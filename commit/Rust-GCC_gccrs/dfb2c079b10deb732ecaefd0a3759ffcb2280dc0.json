{"sha": "dfb2c079b10deb732ecaefd0a3759ffcb2280dc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZiMmMwNzliMTBkZWI3MzJlY2FlZmQwYTM3NTlmZmNiMjI4MGRjMA==", "commit": {"author": {"name": "Herman A.J. ten Brugge", "email": "Haj.Ten.Brugge@net.HCC.nl", "date": "1999-11-18T07:57:32Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-11-18T07:57:32Z"}, "message": "* varasm.c (output_constructor) Solved problem with long long\n        bitfields. Corrected calculating this_time and shift. Also\n        corrected calculating mask when BITS_PER_UNIT == 32 (c4x).\n\nFrom-SVN: r30571", "tree": {"sha": "37845075fd4f70413bea7f65b66b9d236d72217d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37845075fd4f70413bea7f65b66b9d236d72217d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfb2c079b10deb732ecaefd0a3759ffcb2280dc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfb2c079b10deb732ecaefd0a3759ffcb2280dc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfb2c079b10deb732ecaefd0a3759ffcb2280dc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfb2c079b10deb732ecaefd0a3759ffcb2280dc0/comments", "author": null, "committer": null, "parents": [{"sha": "ee7602056eb3f0156d9c6b5eb2a8c9e1402997d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee7602056eb3f0156d9c6b5eb2a8c9e1402997d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee7602056eb3f0156d9c6b5eb2a8c9e1402997d2"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "d8f275591819f7af83233c95c485ca2b1566ce9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb2c079b10deb732ecaefd0a3759ffcb2280dc0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb2c079b10deb732ecaefd0a3759ffcb2280dc0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dfb2c079b10deb732ecaefd0a3759ffcb2280dc0", "patch": "@@ -1,3 +1,9 @@\n+1999-11-18 Herman A.J. ten Brugge <Haj.Ten.Brugge@net.HCC.nl>\n+\n+\t* varasm.c (output_constructor) Solved problem with long long\n+\tbitfields. Corrected calculating this_time and shift. Also\n+\tcorrected calculating mask when BITS_PER_UNIT == 32 (c4x).\n+\n Wed Nov 17 23:46:14 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* flow.c (split_edge): Take looping structure into account when"}, {"sha": "e3b0996032d085bb667a1391abbdf8a50a8df1ff", "filename": "gcc/varasm.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb2c079b10deb732ecaefd0a3759ffcb2280dc0/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb2c079b10deb732ecaefd0a3759ffcb2280dc0/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=dfb2c079b10deb732ecaefd0a3759ffcb2280dc0", "patch": "@@ -4530,12 +4530,13 @@ output_constructor (exp, size)\n \t\t     and put them into bytes from the most significant end.  */\n \t\t  shift = end_offset - next_offset - this_time;\n \t\t  /* Don't try to take a bunch of bits that cross\n-\t\t     the word boundary in the INTEGER_CST.  */\n+\t\t     the word boundary in the INTEGER_CST. We can\n+\t\t     only select bits from the LOW or HIGH part\n+\t\t     not from both.  */\n \t\t  if (shift < HOST_BITS_PER_WIDE_INT\n \t\t      && shift + this_time > HOST_BITS_PER_WIDE_INT)\n \t\t    {\n-\t\t      this_time -= (HOST_BITS_PER_WIDE_INT - shift);\n-\t\t      shift = HOST_BITS_PER_WIDE_INT;\n+\t\t      this_time = (HOST_BITS_PER_WIDE_INT - shift);\n \t\t    }\n \n \t\t  /* Now get the bits from the appropriate constant word.  */\n@@ -4550,8 +4551,10 @@ output_constructor (exp, size)\n \t\t    }\n \t\t  else\n \t\t    abort ();\n+\t\t  /* Get the result. This works only when:\n+\t\t     1 <= this_time <= HOST_BITS_PER_WIDE_INT.  */\n \t\t  byte |= (((value >> shift)\n-\t\t\t    & (((HOST_WIDE_INT) 1 << this_time) - 1))\n+\t\t\t    & (((HOST_WIDE_INT) 2 << (this_time - 1)) - 1))\n \t\t\t   << (BITS_PER_UNIT - this_time - next_bit));\n \t\t}\n \t      else\n@@ -4563,12 +4566,13 @@ output_constructor (exp, size)\n \t\t  shift = (next_offset\n \t\t\t   - TREE_INT_CST_LOW (DECL_FIELD_BITPOS (field)));\n \t\t  /* Don't try to take a bunch of bits that cross\n-\t\t     the word boundary in the INTEGER_CST.  */\n+\t\t     the word boundary in the INTEGER_CST. We can\n+\t\t     only select bits from the LOW or HIGH part\n+\t\t     not from both.  */\n \t\t  if (shift < HOST_BITS_PER_WIDE_INT\n \t\t      && shift + this_time > HOST_BITS_PER_WIDE_INT)\n \t\t    {\n-\t\t      this_time -= (HOST_BITS_PER_WIDE_INT - shift);\n-\t\t      shift = HOST_BITS_PER_WIDE_INT;\n+\t\t      this_time = (HOST_BITS_PER_WIDE_INT - shift);\n \t\t    }\n \n \t\t  /* Now get the bits from the appropriate constant word.  */\n@@ -4581,8 +4585,10 @@ output_constructor (exp, size)\n \t\t    }\n \t\t  else\n \t\t    abort ();\n+\t\t  /* Get the result. This works only when:\n+\t\t     1 <= this_time <= HOST_BITS_PER_WIDE_INT.  */\n \t\t  byte |= (((value >> shift)\n-\t\t\t    & (((HOST_WIDE_INT) 1 << this_time) - 1))\n+\t\t\t    & (((HOST_WIDE_INT) 2 << (this_time - 1)) - 1))\n \t\t\t   << next_bit);\n \t\t}\n \t      next_offset += this_time;"}]}