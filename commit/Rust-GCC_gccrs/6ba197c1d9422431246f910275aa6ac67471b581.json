{"sha": "6ba197c1d9422431246f910275aa6ac67471b581", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJhMTk3YzFkOTQyMjQzMTI0NmY5MTAyNzVhYTZhYzY3NDcxYjU4MQ==", "commit": {"author": {"name": "Evgeny Stupachenko", "email": "evstupac@gmail.com", "date": "2014-06-10T12:40:16Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-06-10T12:40:16Z"}, "message": "i386.c (expand_vec_perm_pblendv): New.\n\ngcc/\n        * config/i386/i386.c (expand_vec_perm_pblendv): New.\n        * config/i386/i386.c (ix86_expand_vec_perm_const_1): Use\n        expand_vec_perm_pblendv.\n\nFrom-SVN: r211407", "tree": {"sha": "b6b70abe5403207c90e60614768f8f034736df19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6b70abe5403207c90e60614768f8f034736df19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ba197c1d9422431246f910275aa6ac67471b581", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ba197c1d9422431246f910275aa6ac67471b581", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ba197c1d9422431246f910275aa6ac67471b581", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ba197c1d9422431246f910275aa6ac67471b581/comments", "author": {"login": "evstupac", "id": 38332307, "node_id": "MDQ6VXNlcjM4MzMyMzA3", "avatar_url": "https://avatars.githubusercontent.com/u/38332307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/evstupac", "html_url": "https://github.com/evstupac", "followers_url": "https://api.github.com/users/evstupac/followers", "following_url": "https://api.github.com/users/evstupac/following{/other_user}", "gists_url": "https://api.github.com/users/evstupac/gists{/gist_id}", "starred_url": "https://api.github.com/users/evstupac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/evstupac/subscriptions", "organizations_url": "https://api.github.com/users/evstupac/orgs", "repos_url": "https://api.github.com/users/evstupac/repos", "events_url": "https://api.github.com/users/evstupac/events{/privacy}", "received_events_url": "https://api.github.com/users/evstupac/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5933f9ae4f8d7b9dec44ec95e70fcc543a616839", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5933f9ae4f8d7b9dec44ec95e70fcc543a616839", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5933f9ae4f8d7b9dec44ec95e70fcc543a616839"}], "stats": {"total": 83, "additions": 83, "deletions": 0}, "files": [{"sha": "3adb61bbd24368c5a017ecd478f81cd80ee139dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba197c1d9422431246f910275aa6ac67471b581/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba197c1d9422431246f910275aa6ac67471b581/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ba197c1d9422431246f910275aa6ac67471b581", "patch": "@@ -1,3 +1,9 @@\n+2014-06-10  Evgeny Stupachenko  <evstupac@gmail.com>\n+\n+\t* config/i386/i386.c (expand_vec_perm_pblendv): New.\n+\t* config/i386/i386.c (ix86_expand_vec_perm_const_1): Use\n+\texpand_vec_perm_pblendv.\n+\n 2014-06-10  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* doc/arm-acle-intrinsics.texi: Specify when CRC32 intrinsics are"}, {"sha": "2050aaf005c9f96f9d3c65f388c723d5aeb2cdb2", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba197c1d9422431246f910275aa6ac67471b581/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba197c1d9422431246f910275aa6ac67471b581/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6ba197c1d9422431246f910275aa6ac67471b581", "patch": "@@ -43201,6 +43201,80 @@ expand_vec_perm_palignr (struct expand_vec_perm_d *d)\n   return ok;\n }\n \n+/* A subroutine of ix86_expand_vec_perm_const_1.  Try to simplify\n+   the permutation using the SSE4_1 pblendv instruction.  Potentially\n+   reduces permutaion from 2 pshufb and or to 1 pshufb and pblendv.  */\n+\n+static bool\n+expand_vec_perm_pblendv (struct expand_vec_perm_d *d)\n+{\n+  unsigned i, which, nelt = d->nelt;\n+  struct expand_vec_perm_d dcopy, dcopy1;\n+  enum machine_mode vmode = d->vmode;\n+  bool ok;\n+\n+  /* Use the same checks as in expand_vec_perm_blend, but skipping\n+     AVX2 as it requires more than 2 instructions for general case.  */\n+  if (d->one_operand_p)\n+    return false;\n+  if (TARGET_AVX && (vmode == V4DFmode || vmode == V8SFmode))\n+    ;\n+  else if (TARGET_SSE4_1 && GET_MODE_SIZE (vmode) == 16)\n+    ;\n+  else\n+    return false;\n+\n+  /* Figure out where permutation elements stay not in their\n+     respective lanes.  */\n+  for (i = 0, which = 0; i < nelt; ++i)\n+    {\n+      unsigned e = d->perm[i];\n+      if (e != i)\n+\twhich |= (e < nelt ? 1 : 2);\n+    }\n+  /* We can pblend the part where elements stay not in their\n+     respective lanes only when these elements are all in one\n+     half of a permutation.\n+     {0 1 8 3 4 5 9 7} is ok as 8, 9 are at not at their respective\n+     lanes, but both 8 and 9 >= 8\n+     {0 1 8 3 4 5 2 7} is not ok as 2 and 8 are not at their\n+     respective lanes and 8 >= 8, but 2 not.  */\n+  if (which != 1 && which != 2)\n+    return false;\n+  if (d->testing_p)\n+    return true;\n+\n+  /* First we apply one operand permutation to the part where\n+     elements stay not in their respective lanes.  */\n+  dcopy = *d;\n+  if (which == 2)\n+    dcopy.op0 = dcopy.op1 = d->op1;\n+  else\n+    dcopy.op0 = dcopy.op1 = d->op0;\n+  dcopy.one_operand_p = true;\n+\n+  for (i = 0; i < nelt; ++i)\n+    dcopy.perm[i] = d->perm[i] & (nelt - 1);\n+\n+  ok = expand_vec_perm_1 (&dcopy);\n+  gcc_assert (ok);\n+\n+  /* Next we put permuted elements into their positions.  */\n+  dcopy1 = *d;\n+  if (which == 2)\n+    dcopy1.op1 = dcopy.target;\n+  else\n+    dcopy1.op0 = dcopy.target;\n+\n+  for (i = 0; i < nelt; ++i)\n+    dcopy1.perm[i] = ((d->perm[i] >= nelt) ? (nelt + i) : i);\n+\n+  ok = expand_vec_perm_blend (&dcopy1);\n+  gcc_assert (ok);\n+\n+  return true;\n+}\n+\n static bool expand_vec_perm_interleave3 (struct expand_vec_perm_d *d);\n \n /* A subroutine of ix86_expand_vec_perm_builtin_1.  Try to simplify\n@@ -44573,6 +44647,9 @@ ix86_expand_vec_perm_const_1 (struct expand_vec_perm_d *d)\n   if (expand_vec_perm_vperm2f128 (d))\n     return true;\n \n+  if (expand_vec_perm_pblendv (d))\n+    return true;\n+\n   /* Try sequences of three instructions.  */\n \n   if (expand_vec_perm_2vperm2f128_vshuf (d))"}]}