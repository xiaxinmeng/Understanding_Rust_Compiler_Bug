{"sha": "417e896eadabd82ce4019fe699f73dd9648b7b70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE3ZTg5NmVhZGFiZDgyY2U0MDE5ZmU2OTlmNzNkZDk2NDhiN2I3MA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-08-14T01:00:23Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-08-14T01:00:23Z"}, "message": "hashtable.h (_Hashtable<>::operator=(const _Hashtable&)): Move inline.\n\n2010-08-13  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/hashtable.h (_Hashtable<>::operator=(const\n\t_Hashtable&)): Move inline.\n\t(operator=(_Hashtable&&)): Define.\n\t* include/bits/unordered_map.h (unordered_map(unordered_map&&),\n\tunordered_map(const unordered_map&), unordered_multimap\n\t(unordered_multimap&&), unordered_multimap(const unordered_multimap&),\n\t__unordered_map(__unordered_map&&), __unordered_map(const\n\t__unordered_map&), __unordered_multimap(__unordered_multimap&&),\n\t__unordered_multimap(const __unordered_multimap&)): Do not define,\n\tleave implicit.\n\t* include/bits/unordered_set.h (unordered_set(unordered_set&&),\n\tunordered_set(const unordered_set&), unordered_multiset\n\t(unordered_multiset&&), unordered_multiset(const unordered_multiset&),\n\t__unordered_set(__unordered_set&&), __unordered_set(const\n\t__unordered_set&), __unordered_multiset(__unordered_multiset&&),\n\t__unordered_multiset(const __unordered_multiset&)): Likewise.\n\n\t* include/bits/unordered_map.h (__unordered_map(initializer_list<>),\n\t__unordered_map<>::operator=(initializer_list<>),\n\t__unordered_multimap(initializer_list<>), __unordered_multimap<>::\n\toperator=(initializer_list<>)): Add.\n\t* include/bits/unordered_set.h (__unordered_set(initializer_list<>),\n\t__unordered_set<>::operator=(initializer_list<>),\n\t__unordered_multiset(initializer_list<>), __unordered_multiset<>::\n\toperator=(initializer_list<>)): Likewise.\n\n\t* include/bits/unordered_map.h (__unordered_map(_InputIterator,\n\t_InputIterator, size_type __n), unordered_map(_InputIterator,\n\t_InputIterator, size_type __n), unordered_map(initializer_list<>,\n\tsize_type __n), unordered_multimap(initializer_list<>, size_type __n)):\n\tFix __n default to 0.\n\t* include/bits/unordered_set.h (__unordered_set(_InputIterator,\n\t_InputIterator, size_type __n), unordered_set(_InputIterator,\n\t_InputIterator, size_type __n), unordered_set(initializer_list<>,\n\tsize_type __n), unordered_multiset(initializer_list<>, size_type __n)):\n\tLikewise.\n\t* include/debug/unordered_map (unordered_map(_InputIterator,\n\t_InputIterator, size_type __n), unordered_map(initializer_list<>,\n\tsize_type __n), unordered_map(_InputIterator, _InputIterator,\n\tsize_type __n), unordered_multimap(initializer_list<>, size_type __n)):\n\tLikewise.\n\t* include/debug/unordered_set (unordered_set(_InputIterator,\n\t_InputIterator, size_type __n), unordered_set(initializer_list<>,\n\tsize_type __n), unordered_set(_InputIterator, _InputIterator,\n\tsize_type __n), unordered_multiset(initializer_list<>, size_type __n)):\n\tLikewise.\n\t* include/profile/unordered_map (unordered_map(_InputIterator,\n\t_InputIterator, size_type __n), unordered_map(initializer_list<>,\n\tsize_type __n), unordered_map(_InputIterator, _InputIterator,\n\tsize_type __n), unordered_multimap(initializer_list<>, size_type __n)):\n\tLikewise.\n\t* include/profile/unordered_set (unordered_set(_InputIterator,\n\t_InputIterator, size_type __n), unordered_set(initializer_list<>,\n\tsize_type __n), unordered_set(_InputIterator, _InputIterator,\n\tsize_type __n), unordered_multiset(initializer_list<>, size_type __n)):\n\tLikewise.\n\nFrom-SVN: r163236", "tree": {"sha": "8af6cdbb9dca74c717e040332a5c43e1f5f0771f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8af6cdbb9dca74c717e040332a5c43e1f5f0771f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/417e896eadabd82ce4019fe699f73dd9648b7b70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/417e896eadabd82ce4019fe699f73dd9648b7b70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/417e896eadabd82ce4019fe699f73dd9648b7b70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/417e896eadabd82ce4019fe699f73dd9648b7b70/comments", "author": null, "committer": null, "parents": [{"sha": "e3f5a69d0c1ee723681acd29bd12a8401556b556", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3f5a69d0c1ee723681acd29bd12a8401556b556", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3f5a69d0c1ee723681acd29bd12a8401556b556"}], "stats": {"total": 356, "additions": 201, "deletions": 155}, "files": [{"sha": "115679e5e4dac15631179c575c20b707f08c1aee", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417e896eadabd82ce4019fe699f73dd9648b7b70/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417e896eadabd82ce4019fe699f73dd9648b7b70/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=417e896eadabd82ce4019fe699f73dd9648b7b70", "patch": "@@ -1,3 +1,62 @@\n+2010-08-13  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/hashtable.h (_Hashtable<>::operator=(const\n+\t_Hashtable&)): Move inline.\n+\t(operator=(_Hashtable&&)): Define.\n+\t* include/bits/unordered_map.h (unordered_map(unordered_map&&),\n+\tunordered_map(const unordered_map&), unordered_multimap\n+\t(unordered_multimap&&), unordered_multimap(const unordered_multimap&),\n+\t__unordered_map(__unordered_map&&), __unordered_map(const\n+\t__unordered_map&), __unordered_multimap(__unordered_multimap&&),\n+\t__unordered_multimap(const __unordered_multimap&)): Do not define,\n+\tleave implicit.\n+\t* include/bits/unordered_set.h (unordered_set(unordered_set&&),\n+\tunordered_set(const unordered_set&), unordered_multiset\n+\t(unordered_multiset&&), unordered_multiset(const unordered_multiset&),\n+\t__unordered_set(__unordered_set&&), __unordered_set(const\n+\t__unordered_set&), __unordered_multiset(__unordered_multiset&&),\n+\t__unordered_multiset(const __unordered_multiset&)): Likewise.\n+\n+\t* include/bits/unordered_map.h (__unordered_map(initializer_list<>),\n+\t__unordered_map<>::operator=(initializer_list<>),\n+\t__unordered_multimap(initializer_list<>), __unordered_multimap<>::\n+\toperator=(initializer_list<>)): Add.\n+\t* include/bits/unordered_set.h (__unordered_set(initializer_list<>),\n+\t__unordered_set<>::operator=(initializer_list<>),\n+\t__unordered_multiset(initializer_list<>), __unordered_multiset<>::\n+\toperator=(initializer_list<>)): Likewise.\n+\n+\t* include/bits/unordered_map.h (__unordered_map(_InputIterator,\n+\t_InputIterator, size_type __n), unordered_map(_InputIterator,\n+\t_InputIterator, size_type __n), unordered_map(initializer_list<>,\n+\tsize_type __n), unordered_multimap(initializer_list<>, size_type __n)):\n+\tFix __n default to 0.\n+\t* include/bits/unordered_set.h (__unordered_set(_InputIterator,\n+\t_InputIterator, size_type __n), unordered_set(_InputIterator,\n+\t_InputIterator, size_type __n), unordered_set(initializer_list<>,\n+\tsize_type __n), unordered_multiset(initializer_list<>, size_type __n)):\n+\tLikewise.\n+\t* include/debug/unordered_map (unordered_map(_InputIterator,\n+\t_InputIterator, size_type __n), unordered_map(initializer_list<>,\n+\tsize_type __n), unordered_map(_InputIterator, _InputIterator,\n+\tsize_type __n), unordered_multimap(initializer_list<>, size_type __n)):\n+\tLikewise.\n+\t* include/debug/unordered_set (unordered_set(_InputIterator,\n+\t_InputIterator, size_type __n), unordered_set(initializer_list<>,\n+\tsize_type __n), unordered_set(_InputIterator, _InputIterator,\n+\tsize_type __n), unordered_multiset(initializer_list<>, size_type __n)):\n+\tLikewise.\n+\t* include/profile/unordered_map (unordered_map(_InputIterator,\n+\t_InputIterator, size_type __n), unordered_map(initializer_list<>,\n+\tsize_type __n), unordered_map(_InputIterator, _InputIterator,\n+\tsize_type __n), unordered_multimap(initializer_list<>, size_type __n)):\n+\tLikewise.\n+\t* include/profile/unordered_set (unordered_set(_InputIterator,\n+\t_InputIterator, size_type __n), unordered_set(initializer_list<>,\n+\tsize_type __n), unordered_set(_InputIterator, _InputIterator,\n+\tsize_type __n), unordered_multiset(initializer_list<>, size_type __n)):\n+\tLikewise.\n+\n 2010-08-13  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/45281"}, {"sha": "e62e156e523eb0f791071491dc7205fe586a67b5", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417e896eadabd82ce4019fe699f73dd9648b7b70/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417e896eadabd82ce4019fe699f73dd9648b7b70/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=417e896eadabd82ce4019fe699f73dd9648b7b70", "patch": "@@ -212,7 +212,22 @@ namespace std\n       _Hashtable(_Hashtable&&);\n       \n       _Hashtable&\n-      operator=(const _Hashtable&);\n+      operator=(const _Hashtable& __ht)\n+      {\n+\t_Hashtable __tmp(__ht);\n+\tthis->swap(__tmp);\n+\treturn *this;\n+      }\n+\n+      _Hashtable&\n+      operator=(_Hashtable&& __ht)\n+      {\n+\t// NB: DR 1204.\n+\t// NB: DR 675.\n+\tthis->clear();\n+\tthis->swap(__ht);\n+\treturn *this;\n+      }\n \n       ~_Hashtable();\n \n@@ -663,21 +678,6 @@ namespace std\n       __ht._M_rehash_policy = _RehashPolicy();\n     }\n \n-  template<typename _Key, typename _Value, \n-\t   typename _Allocator, typename _ExtractKey, typename _Equal,\n-\t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n-\t   bool __chc, bool __cit, bool __uk>\n-    _Hashtable<_Key, _Value, _Allocator, _ExtractKey, _Equal,\n-\t       _H1, _H2, _Hash, _RehashPolicy, __chc, __cit, __uk>&\n-    _Hashtable<_Key, _Value, _Allocator, _ExtractKey, _Equal,\n-\t       _H1, _H2, _Hash, _RehashPolicy, __chc, __cit, __uk>::\n-    operator=(const _Hashtable& __ht)\n-    {\n-      _Hashtable __tmp(__ht);\n-      this->swap(__tmp);\n-      return *this;\n-    }\n-\n   template<typename _Key, typename _Value, \n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,"}, {"sha": "08058c1a94f8df2164ad4184111148220e0698e9", "filename": "libstdc++-v3/include/bits/unordered_map.h", "status": "modified", "additions": 44, "deletions": 51, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417e896eadabd82ce4019fe699f73dd9648b7b70/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417e896eadabd82ce4019fe699f73dd9648b7b70/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h?ref=417e896eadabd82ce4019fe699f73dd9648b7b70", "patch": "@@ -56,6 +56,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n         _Base;\n \n     public:\n+      typedef typename _Base::value_type      value_type;\n       typedef typename _Base::size_type       size_type;\n       typedef typename _Base::hasher          hasher;\n       typedef typename _Base::key_equal       key_equal;\n@@ -73,7 +74,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \n       template<typename _InputIterator>\n         __unordered_map(_InputIterator __f, _InputIterator __l, \n-\t\t\tsize_type __n = 10,\n+\t\t\tsize_type __n = 0,\n \t\t\tconst hasher& __hf = hasher(), \n \t\t\tconst key_equal& __eql = key_equal(), \n \t\t\tconst allocator_type& __a = allocator_type())\n@@ -82,10 +83,24 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t__eql, std::_Select1st<std::pair<const _Key, _Tp> >(), __a)\n \t{ }\n \n-      __unordered_map(const __unordered_map& __x) = default;\n+      __unordered_map(initializer_list<value_type> __l,\n+\t\t      size_type __n = 0,\n+\t\t      const hasher& __hf = hasher(),\n+\t\t      const key_equal& __eql = key_equal(),\n+\t\t      const allocator_type& __a = allocator_type())\n+      : _Base(__l.begin(), __l.end(), __n, __hf,\n+\t      __detail::_Mod_range_hashing(),\n+\t      __detail::_Default_ranged_hash(),\n+\t      __eql, std::_Select1st<std::pair<const _Key, _Tp> >(), __a)\n+      { }\n \n-      __unordered_map(__unordered_map&& __x)\n-      : _Base(std::move(__x)) { }\n+      __unordered_map&\n+      operator=(initializer_list<value_type> __l)\n+      {\n+\tthis->clear();\n+\tthis->insert(__l.begin(), __l.end());\n+\treturn *this;\n+      }\n     };\n   \n   template<class _Key, class _Tp,\n@@ -112,6 +127,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n         _Base;\n \n     public:\n+      typedef typename _Base::value_type      value_type;\n       typedef typename _Base::size_type       size_type;\n       typedef typename _Base::hasher          hasher;\n       typedef typename _Base::key_equal       key_equal;\n@@ -130,7 +146,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \n       template<typename _InputIterator>\n         __unordered_multimap(_InputIterator __f, _InputIterator __l, \n-\t\t\t     typename _Base::size_type __n = 0,\n+\t\t\t     size_type __n = 0,\n \t\t\t     const hasher& __hf = hasher(), \n \t\t\t     const key_equal& __eql = key_equal(), \n \t\t\t     const allocator_type& __a = allocator_type())\n@@ -139,10 +155,24 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t__eql, std::_Select1st<std::pair<const _Key, _Tp> >(), __a)\n         { }\n \n-      __unordered_multimap(const __unordered_multimap& __x) = default;\n+      __unordered_multimap(initializer_list<value_type> __l,\n+\t\t\t   size_type __n = 0,\n+\t\t\t   const hasher& __hf = hasher(),\n+\t\t\t   const key_equal& __eql = key_equal(),\n+\t\t\t   const allocator_type& __a = allocator_type())\n+      : _Base(__l.begin(), __l.end(), __n, __hf,\n+\t      __detail::_Mod_range_hashing(),\n+\t      __detail::_Default_ranged_hash(),\n+\t      __eql, std::_Select1st<std::pair<const _Key, _Tp> >(), __a)\n+      { }\n \n-      __unordered_multimap(__unordered_multimap&& __x)\n-      : _Base(std::move(__x)) { }\n+      __unordered_multimap&\n+      operator=(initializer_list<value_type> __l)\n+      {\n+\tthis->clear();\n+\tthis->insert(__l.begin(), __l.end());\n+\treturn *this;\n+      }\n     };\n \n   template<class _Key, class _Tp, class _Hash, class _Pred, class _Alloc,\n@@ -243,39 +273,21 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \n       template<typename _InputIterator>\n         unordered_map(_InputIterator __f, _InputIterator __l, \n-\t\t      size_type __n = 10,\n+\t\t      size_type __n = 0,\n \t\t      const hasher& __hf = hasher(), \n \t\t      const key_equal& __eql = key_equal(), \n \t\t      const allocator_type& __a = allocator_type())\n \t: _Base(__f, __l, __n, __hf, __eql, __a)\n         { }\n \n-      unordered_map(const unordered_map& __x) = default;\n-\n-      unordered_map(unordered_map&& __x)\n-      : _Base(std::move(__x)) { }\n-\n       unordered_map(initializer_list<value_type> __l,\n-\t\t    size_type __n = 10,\n+\t\t    size_type __n = 0,\n \t\t    const hasher& __hf = hasher(),\n \t\t    const key_equal& __eql = key_equal(),\n \t\t    const allocator_type& __a = allocator_type())\n-\t: _Base(__l.begin(), __l.end(), __n, __hf, __eql, __a)\n+      : _Base(__l.begin(), __l.end(), __n, __hf, __eql, __a)\n       { }\n \n-      unordered_map&\n-      operator=(const unordered_map& __x) = default;\n-\n-      unordered_map&\n-      operator=(unordered_map&& __x)\n-      {\n-\t// NB: DR 1204.\n-\t// NB: DR 675.\n-\tthis->clear();\n-\tthis->swap(__x);\n-\treturn *this;\t\n-      }\n-\n       unordered_map&\n       operator=(initializer_list<value_type> __l)\n       {\n@@ -327,42 +339,23 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       : _Base(__n, __hf, __eql, __a)\n       { }\n \n-\n       template<typename _InputIterator>\n         unordered_multimap(_InputIterator __f, _InputIterator __l, \n-\t\t\t   typename _Base::size_type __n = 0,\n+\t\t\t   size_type __n = 0,\n \t\t\t   const hasher& __hf = hasher(), \n \t\t\t   const key_equal& __eql = key_equal(), \n \t\t\t   const allocator_type& __a = allocator_type())\n \t: _Base(__f, __l, __n, __hf, __eql, __a)\n         { }\n \n-      unordered_multimap(const unordered_multimap& __x) = default;\n-\n-      unordered_multimap(unordered_multimap&& __x)\n-      : _Base(std::move(__x)) { }\n-\n       unordered_multimap(initializer_list<value_type> __l,\n-\t\t\t size_type __n = 10,\n+\t\t\t size_type __n = 0,\n \t\t\t const hasher& __hf = hasher(),\n \t\t\t const key_equal& __eql = key_equal(),\n \t\t\t const allocator_type& __a = allocator_type())\n-\t: _Base(__l.begin(), __l.end(), __n, __hf, __eql, __a)\n+      : _Base(__l.begin(), __l.end(), __n, __hf, __eql, __a)\n       { }\n \n-      unordered_multimap&\n-      operator=(const unordered_multimap& __x) = default;\n-\n-      unordered_multimap&\n-      operator=(unordered_multimap&& __x)\n-      {\n-\t// NB: DR 1204.\n-\t// NB: DR 675.\n-\tthis->clear();\n-\tthis->swap(__x);\n-\treturn *this;\t\n-      }\n-\n       unordered_multimap&\n       operator=(initializer_list<value_type> __l)\n       {"}, {"sha": "260ad796c1aa070b603d671c762645ae4e54d494", "filename": "libstdc++-v3/include/bits/unordered_set.h", "status": "modified", "additions": 48, "deletions": 54, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417e896eadabd82ce4019fe699f73dd9648b7b70/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417e896eadabd82ce4019fe699f73dd9648b7b70/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h?ref=417e896eadabd82ce4019fe699f73dd9648b7b70", "patch": "@@ -56,6 +56,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n         _Base;\n \n     public:\n+      typedef typename _Base::value_type      value_type;\n       typedef typename _Base::size_type       size_type;\n       typedef typename _Base::hasher          hasher;\n       typedef typename _Base::key_equal       key_equal;\n@@ -68,24 +69,38 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t      const allocator_type& __a = allocator_type())\n       : _Base(__n, __hf, __detail::_Mod_range_hashing(),\n \t      __detail::_Default_ranged_hash(), __eql,\n-\t      std::_Identity<_Value>(), __a)\n+\t      std::_Identity<value_type>(), __a)\n       { }\n \n       template<typename _InputIterator>\n         __unordered_set(_InputIterator __f, _InputIterator __l, \n-\t\t\tsize_type __n = 10,\n+\t\t\tsize_type __n = 0,\n \t\t\tconst hasher& __hf = hasher(), \n \t\t\tconst key_equal& __eql = key_equal(), \n \t\t\tconst allocator_type& __a = allocator_type())\n \t: _Base(__f, __l, __n, __hf, __detail::_Mod_range_hashing(),\n \t\t__detail::_Default_ranged_hash(), __eql,\n-\t\tstd::_Identity<_Value>(), __a)\n+\t\tstd::_Identity<value_type>(), __a)\n         { }\n \n-      __unordered_set(const __unordered_set& __x) = default;\n+      __unordered_set(initializer_list<value_type> __l,\n+\t\t      size_type __n = 0,\n+\t\t      const hasher& __hf = hasher(),\n+\t\t      const key_equal& __eql = key_equal(),\n+\t\t      const allocator_type& __a = allocator_type())\n+      : _Base(__l.begin(), __l.end(), __n, __hf,\n+\t      __detail::_Mod_range_hashing(),\n+\t      __detail::_Default_ranged_hash(), __eql,\n+\t      std::_Identity<value_type>(), __a)\n+      { }\n \n-      __unordered_set(__unordered_set&& __x)\n-      : _Base(std::move(__x)) { }\n+      __unordered_set&\n+      operator=(initializer_list<value_type> __l)\n+      {\n+\tthis->clear();\n+\tthis->insert(__l.begin(), __l.end());\n+\treturn *this;\n+      }\n     };\n \n   template<class _Value,\n@@ -110,6 +125,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n         _Base;\n \n     public:\n+      typedef typename _Base::value_type      value_type;\n       typedef typename _Base::size_type       size_type;\n       typedef typename _Base::hasher          hasher;\n       typedef typename _Base::key_equal       key_equal;\n@@ -122,25 +138,39 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t\t   const allocator_type& __a = allocator_type())\n       : _Base(__n, __hf, __detail::_Mod_range_hashing(),\n \t      __detail::_Default_ranged_hash(), __eql,\n-\t      std::_Identity<_Value>(), __a)\n+\t      std::_Identity<value_type>(), __a)\n       { }\n \n \n       template<typename _InputIterator>\n         __unordered_multiset(_InputIterator __f, _InputIterator __l, \n-\t\t\t     typename _Base::size_type __n = 0,\n+\t\t\t     size_type __n = 0,\n \t\t\t     const hasher& __hf = hasher(), \n \t\t\t     const key_equal& __eql = key_equal(), \n \t\t\t     const allocator_type& __a = allocator_type())\n \t: _Base(__f, __l, __n, __hf, __detail::_Mod_range_hashing(),\n \t\t__detail::_Default_ranged_hash(), __eql,\n-\t\tstd::_Identity<_Value>(), __a)\n+\t\tstd::_Identity<value_type>(), __a)\n         { }\n \n-      __unordered_multiset(const __unordered_multiset& __x) = default;\n+      __unordered_multiset(initializer_list<value_type> __l,\n+\t\t\t   size_type __n = 0,\n+\t\t\t   const hasher& __hf = hasher(),\n+\t\t\t   const key_equal& __eql = key_equal(),\n+\t\t\t   const allocator_type& __a = allocator_type())\n+      : _Base(__l.begin(), __l.end(), __n, __hf,\n+\t      __detail::_Mod_range_hashing(),\n+\t      __detail::_Default_ranged_hash(), __eql,\n+\t      std::_Identity<value_type>(), __a)\n+      { }\n \n-      __unordered_multiset(__unordered_multiset&& __x)\n-      : _Base(std::move(__x)) { }\n+      __unordered_multiset&\n+      operator=(initializer_list<value_type> __l)\n+      {\n+\tthis->clear();\n+\tthis->insert(__l.begin(), __l.end());\n+\treturn *this;\n+      }\n     };\n \n   template<class _Value, class _Hash, class _Pred, class _Alloc,\n@@ -236,39 +266,21 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \n       template<typename _InputIterator>\n         unordered_set(_InputIterator __f, _InputIterator __l, \n-\t\t      size_type __n = 10,\n+\t\t      size_type __n = 0,\n \t\t      const hasher& __hf = hasher(), \n \t\t      const key_equal& __eql = key_equal(), \n \t\t      const allocator_type& __a = allocator_type())\n \t: _Base(__f, __l, __n, __hf, __eql, __a)\n         { }\n \n-      unordered_set(const unordered_set& __x) = default;\n-\n-      unordered_set(unordered_set&& __x)\n-      : _Base(std::move(__x)) { }\n-\n       unordered_set(initializer_list<value_type> __l,\n-\t\t    size_type __n = 10,\n+\t\t    size_type __n = 0,\n \t\t    const hasher& __hf = hasher(),\n \t\t    const key_equal& __eql = key_equal(),\n \t\t    const allocator_type& __a = allocator_type())\n-\t: _Base(__l.begin(), __l.end(), __n, __hf, __eql, __a)\n+      : _Base(__l.begin(), __l.end(), __n, __hf, __eql, __a)\n       { }\n \n-      unordered_set&\n-      operator=(const unordered_set& __x) = default;\n-\n-      unordered_set&\n-      operator=(unordered_set&& __x)\n-      {\n-\t// NB: DR 1204.\n-\t// NB: DR 675.\n-\tthis->clear();\n-\tthis->swap(__x);\n-\treturn *this;\t\n-      }\n-\n       unordered_set&\n       operator=(initializer_list<value_type> __l)\n       {\n@@ -320,39 +332,21 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \n       template<typename _InputIterator>\n         unordered_multiset(_InputIterator __f, _InputIterator __l, \n-\t\t\t   typename _Base::size_type __n = 0,\n+\t\t\t   size_type __n = 0,\n \t\t\t   const hasher& __hf = hasher(), \n \t\t\t   const key_equal& __eql = key_equal(), \n \t\t\t   const allocator_type& __a = allocator_type())\n \t: _Base(__f, __l, __n, __hf, __eql, __a)\n         { }\n \n-      unordered_multiset(const unordered_multiset& __x) = default;\n-\n-      unordered_multiset(unordered_multiset&& __x)\n-      : _Base(std::move(__x)) { }\n-\n       unordered_multiset(initializer_list<value_type> __l,\n-\t\t\t size_type __n = 10,\n+\t\t\t size_type __n = 0,\n \t\t\t const hasher& __hf = hasher(),\n \t\t\t const key_equal& __eql = key_equal(),\n \t\t\t const allocator_type& __a = allocator_type())\n-\t: _Base(__l.begin(), __l.end(), __n, __hf, __eql, __a)\n+      : _Base(__l.begin(), __l.end(), __n, __hf, __eql, __a)\n       { }\n \n-      unordered_multiset&\n-      operator=(const unordered_multiset& __x) = default;\n-\n-      unordered_multiset&\n-      operator=(unordered_multiset&& __x)\n-      {\n-\t// NB: DR 1204.\n-\t// NB: DR 675.\n-\tthis->clear();\n-\tthis->swap(__x);\n-\treturn *this;\t\n-      }\n-\n       unordered_multiset&\n       operator=(initializer_list<value_type> __l)\n       {"}, {"sha": "04d311dc408d43375a15b614c4e493c33c10d4a3", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417e896eadabd82ce4019fe699f73dd9648b7b70/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417e896eadabd82ce4019fe699f73dd9648b7b70/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=417e896eadabd82ce4019fe699f73dd9648b7b70", "patch": "@@ -79,7 +79,7 @@ namespace __debug\n \n       template<typename _InputIterator>\n         unordered_map(_InputIterator __f, _InputIterator __l, \n-\t\t      size_type __n = 10,\n+\t\t      size_type __n = 0,\n \t\t      const hasher& __hf = hasher(), \n \t\t      const key_equal& __eql = key_equal(), \n \t\t      const allocator_type& __a = allocator_type())\n@@ -96,7 +96,7 @@ namespace __debug\n       : _Base(std::move(__x)), _Safe_base() { }\n \n       unordered_map(initializer_list<value_type> __l,\n-\t\t    size_type __n = 10,\n+\t\t    size_type __n = 0,\n \t\t    const hasher& __hf = hasher(),\n \t\t    const key_equal& __eql = key_equal(),\n \t\t    const allocator_type& __a = allocator_type())\n@@ -338,7 +338,7 @@ namespace __debug\n \n       template<typename _InputIterator>\n         unordered_multimap(_InputIterator __f, _InputIterator __l, \n-\t\t\t   size_type __n = 10,\n+\t\t\t   size_type __n = 0,\n \t\t\t   const hasher& __hf = hasher(), \n \t\t\t   const key_equal& __eql = key_equal(), \n \t\t\t   const allocator_type& __a = allocator_type())\n@@ -355,7 +355,7 @@ namespace __debug\n       : _Base(std::move(__x)), _Safe_base() { }\n \n       unordered_multimap(initializer_list<value_type> __l,\n-\t\t\t size_type __n = 10,\n+\t\t\t size_type __n = 0,\n \t\t\t const hasher& __hf = hasher(),\n \t\t\t const key_equal& __eql = key_equal(),\n \t\t\t const allocator_type& __a = allocator_type())"}, {"sha": "13f869813e58ffa46c1e38c53ad056c77cdc31f7", "filename": "libstdc++-v3/include/debug/unordered_set", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417e896eadabd82ce4019fe699f73dd9648b7b70/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417e896eadabd82ce4019fe699f73dd9648b7b70/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set?ref=417e896eadabd82ce4019fe699f73dd9648b7b70", "patch": "@@ -79,7 +79,7 @@ namespace __debug\n \n       template<typename _InputIterator>\n         unordered_set(_InputIterator __f, _InputIterator __l, \n-\t\t      size_type __n = 10,\n+\t\t      size_type __n = 0,\n \t\t      const hasher& __hf = hasher(), \n \t\t      const key_equal& __eql = key_equal(), \n \t\t      const allocator_type& __a = allocator_type())\n@@ -96,7 +96,7 @@ namespace __debug\n       : _Base(std::move(__x)), _Safe_base() { }\n \n       unordered_set(initializer_list<value_type> __l,\n-\t\t    size_type __n = 10,\n+\t\t    size_type __n = 0,\n \t\t    const hasher& __hf = hasher(),\n \t\t    const key_equal& __eql = key_equal(),\n \t\t    const allocator_type& __a = allocator_type())\n@@ -334,7 +334,7 @@ namespace __debug\n \n       template<typename _InputIterator>\n         unordered_multiset(_InputIterator __f, _InputIterator __l, \n-\t\t\t   size_type __n = 10,\n+\t\t\t   size_type __n = 0,\n \t\t\t   const hasher& __hf = hasher(), \n \t\t\t   const key_equal& __eql = key_equal(), \n \t\t\t   const allocator_type& __a = allocator_type())\n@@ -351,7 +351,7 @@ namespace __debug\n       : _Base(std::move(__x)), _Safe_base() { }\n \n       unordered_multiset(initializer_list<value_type> __l,\n-\t\t\t size_type __n = 10,\n+\t\t\t size_type __n = 0,\n \t\t\t const hasher& __hf = hasher(),\n \t\t\t const key_equal& __eql = key_equal(),\n \t\t\t const allocator_type& __a = allocator_type())"}, {"sha": "2dec1f2a26807bdc7c83c569d8396d251570278c", "filename": "libstdc++-v3/include/profile/unordered_map", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417e896eadabd82ce4019fe699f73dd9648b7b70/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417e896eadabd82ce4019fe699f73dd9648b7b70/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map?ref=417e896eadabd82ce4019fe699f73dd9648b7b70", "patch": "@@ -86,10 +86,10 @@ namespace __profile\n \n       template<typename _InputIterator>\n         unordered_map(_InputIterator __f, _InputIterator __l,\n-              size_type __n = 10,\n-              const hasher& __hf = hasher(),\n-              const key_equal& __eql = key_equal(),\n-              const allocator_type& __a = allocator_type())\n+\t\t      size_type __n = 0,\n+\t\t      const hasher& __hf = hasher(),\n+\t\t      const key_equal& __eql = key_equal(),\n+\t\t      const allocator_type& __a = allocator_type())\n       : _Base(__f, __l, __n, __hf, __eql, __a)\n       {\n         __profcxx_hashtable_construct(this, _Base::bucket_count());\n@@ -111,7 +111,7 @@ namespace __profile\n       }\n \n       unordered_map(initializer_list<value_type> __l,\n-\t\t    size_type __n = 10,\n+\t\t    size_type __n = 0,\n \t\t    const hasher& __hf = hasher(),\n \t\t    const key_equal& __eql = key_equal(),\n \t\t    const allocator_type& __a = allocator_type())\n@@ -314,19 +314,19 @@ namespace __profile\n \n       explicit\n       unordered_multimap(size_type __n = 10,\n-\t\t    const hasher& __hf = hasher(),\n-\t\t    const key_equal& __eql = key_equal(),\n-\t\t    const allocator_type& __a = allocator_type())\n+\t\t\t const hasher& __hf = hasher(),\n+\t\t\t const key_equal& __eql = key_equal(),\n+\t\t\t const allocator_type& __a = allocator_type())\n       : _Base(__n, __hf, __eql, __a)\n       {\n         __profcxx_hashtable_construct(this, _Base::bucket_count());\n       }\n       template<typename _InputIterator>\n         unordered_multimap(_InputIterator __f, _InputIterator __l,\n-              size_type __n = 10,\n-              const hasher& __hf = hasher(),\n-              const key_equal& __eql = key_equal(),\n-              const allocator_type& __a = allocator_type())\n+\t\t\t   size_type __n = 0,\n+\t\t\t   const hasher& __hf = hasher(),\n+\t\t\t   const key_equal& __eql = key_equal(),\n+\t\t\t   const allocator_type& __a = allocator_type())\n       : _Base(__f, __l, __n, __hf, __eql, __a)\n       {\n         __profcxx_hashtable_construct(this, _Base::bucket_count());\n@@ -345,7 +345,7 @@ namespace __profile\n       }\n \n       unordered_multimap(initializer_list<value_type> __l,\n-\t\t\t size_type __n = 10,\n+\t\t\t size_type __n = 0,\n \t\t\t const hasher& __hf = hasher(),\n \t\t\t const key_equal& __eql = key_equal(),\n \t\t\t const allocator_type& __a = allocator_type())"}, {"sha": "2dade092024cb0987baa3949014200f14af62be6", "filename": "libstdc++-v3/include/profile/unordered_set", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417e896eadabd82ce4019fe699f73dd9648b7b70/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417e896eadabd82ce4019fe699f73dd9648b7b70/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set?ref=417e896eadabd82ce4019fe699f73dd9648b7b70", "patch": "@@ -85,10 +85,10 @@ namespace __profile\n \n       template<typename _InputIterator>\n         unordered_set(_InputIterator __f, _InputIterator __l,\n-              size_type __n = 10,\n-              const hasher& __hf = hasher(),\n-              const key_equal& __eql = key_equal(),\n-              const allocator_type& __a = allocator_type())\n+\t\t      size_type __n = 0,\n+\t\t      const hasher& __hf = hasher(),\n+\t\t      const key_equal& __eql = key_equal(),\n+\t\t      const allocator_type& __a = allocator_type())\n       : _Base(__f, __l, __n, __hf, __eql, __a)\n       {\n         __profcxx_hashtable_construct(this, _Base::bucket_count());\n@@ -110,7 +110,7 @@ namespace __profile\n       }\n \n       unordered_set(initializer_list<value_type> __l,\n-\t\t    size_type __n = 10,\n+\t\t    size_type __n = 0,\n \t\t    const hasher& __hf = hasher(),\n \t\t    const key_equal& __eql = key_equal(),\n \t\t    const allocator_type& __a = allocator_type())\n@@ -302,20 +302,20 @@ namespace __profile\n \n       explicit\n       unordered_multiset(size_type __n = 10,\n-\t\t    const hasher& __hf = hasher(),\n-\t\t    const key_equal& __eql = key_equal(),\n-\t\t    const allocator_type& __a = allocator_type())\n+\t\t\t const hasher& __hf = hasher(),\n+\t\t\t const key_equal& __eql = key_equal(),\n+\t\t\t const allocator_type& __a = allocator_type())\n       : _Base(__n, __hf, __eql, __a)\n       {\n         __profcxx_hashtable_construct(this, _Base::bucket_count());\n       }\n \n       template<typename _InputIterator>\n         unordered_multiset(_InputIterator __f, _InputIterator __l,\n-              size_type __n = 10,\n-              const hasher& __hf = hasher(),\n-              const key_equal& __eql = key_equal(),\n-              const allocator_type& __a = allocator_type())\n+\t\t\t   size_type __n = 0,\n+\t\t\t   const hasher& __hf = hasher(),\n+\t\t\t   const key_equal& __eql = key_equal(),\n+\t\t\t   const allocator_type& __a = allocator_type())\n       : _Base(__f, __l, __n, __hf, __eql, __a)\n       {\n         __profcxx_hashtable_construct(this, _Base::bucket_count());\n@@ -334,7 +334,7 @@ namespace __profile\n       }\n \n       unordered_multiset(initializer_list<value_type> __l,\n-\t\t\t size_type __n = 10,\n+\t\t\t size_type __n = 0,\n \t\t\t const hasher& __hf = hasher(),\n \t\t\t const key_equal& __eql = key_equal(),\n \t\t\t const allocator_type& __a = allocator_type())"}]}