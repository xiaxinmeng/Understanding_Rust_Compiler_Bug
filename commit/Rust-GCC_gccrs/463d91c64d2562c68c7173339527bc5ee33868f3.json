{"sha": "463d91c64d2562c68c7173339527bc5ee33868f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYzZDkxYzY0ZDI1NjJjNjhjNzE3MzMzOTUyN2JjNWVlMzM4NjhmMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-04-13T15:02:23Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-04-13T15:02:23Z"}, "message": "re PR c++/70634 (ICE on valid code on x86_64-linux-gnu: Segmentation fault (program cc1plus))\n\n\tPR c++/70634\n\n\t* pt.c (instantiation_dependent_uneval_expression_p): Split out\n\tfrom instantiation_dependent_expression_p.\n\t(value_dependent_expression_p): Use it for unevaluated operands.\n\t(instantiation_dependent_r): Don't check value-dependence.\n\t(instantiation_dependent_expression_p): Check\n\tvalue-dependence of the expression as a whole.\n\t* cp-tree.h: Declare instantiation_dependent_uneval_expression_p.\n\t* semantics.c (finish_decltype_type): Use it.\n\nFrom-SVN: r234945", "tree": {"sha": "a64b95a81764092e805c67201664de7db382b2c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a64b95a81764092e805c67201664de7db382b2c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/463d91c64d2562c68c7173339527bc5ee33868f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/463d91c64d2562c68c7173339527bc5ee33868f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/463d91c64d2562c68c7173339527bc5ee33868f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/463d91c64d2562c68c7173339527bc5ee33868f3/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eb07f187a471f9a203626aecced17d6947c3cc46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb07f187a471f9a203626aecced17d6947c3cc46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb07f187a471f9a203626aecced17d6947c3cc46"}], "stats": {"total": 56, "additions": 38, "deletions": 18}, "files": [{"sha": "e7d23842c68278b2af1143d19479117ae7635f6e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d91c64d2562c68c7173339527bc5ee33868f3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d91c64d2562c68c7173339527bc5ee33868f3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=463d91c64d2562c68c7173339527bc5ee33868f3", "patch": "@@ -1,5 +1,15 @@\n 2016-04-13  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/70634\n+\t* pt.c (instantiation_dependent_uneval_expression_p): Split out\n+\tfrom instantiation_dependent_expression_p.\n+\t(value_dependent_expression_p): Use it for unevaluated operands.\n+\t(instantiation_dependent_r): Don't check value-dependence.\n+\t(instantiation_dependent_expression_p): Check\n+\tvalue-dependence of the expression as a whole.\n+\t* cp-tree.h: Declare instantiation_dependent_uneval_expression_p.\n+\t* semantics.c (finish_decltype_type): Use it.\n+\n \t* constexpr.c (potential_nondependent_constant_expression): New.\n \t(potential_nondependent_static_init_expression): New.\n \t(maybe_constant_value_1, fold_non_dependent_expr)"}, {"sha": "a3cd834a1055745bc65127534ec3d308cad81ac5", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d91c64d2562c68c7173339527bc5ee33868f3/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d91c64d2562c68c7173339527bc5ee33868f3/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=463d91c64d2562c68c7173339527bc5ee33868f3", "patch": "@@ -6127,6 +6127,7 @@ extern bool any_type_dependent_elements_p       (const_tree);\n extern bool type_dependent_expression_p_push\t(tree);\n extern bool value_dependent_expression_p\t(tree);\n extern bool instantiation_dependent_expression_p (tree);\n+extern bool instantiation_dependent_uneval_expression_p (tree);\n extern bool any_value_dependent_elements_p      (const_tree);\n extern bool dependent_omp_for_p\t\t\t(tree, tree, tree, tree);\n extern tree resolve_typename_type\t\t(tree, bool);"}, {"sha": "b75ac24e2b94fef7b2232656254814dde1805e70", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d91c64d2562c68c7173339527bc5ee33868f3/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d91c64d2562c68c7173339527bc5ee33868f3/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=463d91c64d2562c68c7173339527bc5ee33868f3", "patch": "@@ -22720,7 +22720,7 @@ value_dependent_expression_p (tree expression)\n         return true;\n       else if (TYPE_P (expression))\n \treturn dependent_type_p (expression);\n-      return instantiation_dependent_expression_p (expression);\n+      return instantiation_dependent_uneval_expression_p (expression);\n \n     case AT_ENCODE_EXPR:\n       /* An 'encode' expression is value-dependent if the operand is\n@@ -22730,7 +22730,7 @@ value_dependent_expression_p (tree expression)\n \n     case NOEXCEPT_EXPR:\n       expression = TREE_OPERAND (expression, 0);\n-      return instantiation_dependent_expression_p (expression);\n+      return instantiation_dependent_uneval_expression_p (expression);\n \n     case SCOPE_REF:\n       /* All instantiation-dependent expressions should also be considered\n@@ -23101,13 +23101,6 @@ instantiation_dependent_r (tree *tp, int *walk_subtrees,\n     case TREE_VEC:\n       return NULL_TREE;\n \n-    case VAR_DECL:\n-    case CONST_DECL:\n-      /* A constant with a dependent initializer is dependent.  */\n-      if (value_dependent_expression_p (*tp))\n-\treturn *tp;\n-      break;\n-\n     case TEMPLATE_PARM_INDEX:\n       return *tp;\n \n@@ -23133,12 +23126,6 @@ instantiation_dependent_r (tree *tp, int *walk_subtrees,\n \tbreak;\n       }\n \n-    case TRAIT_EXPR:\n-      if (value_dependent_expression_p (*tp))\n-\treturn *tp;\n-      *walk_subtrees = false;\n-      return NULL_TREE;\n-\n     case COMPONENT_REF:\n       if (identifier_p (TREE_OPERAND (*tp, 1)))\n \t/* In a template, finish_class_member_access_expr creates a\n@@ -23189,10 +23176,15 @@ instantiation_dependent_r (tree *tp, int *walk_subtrees,\n \n    \"An expression is instantiation-dependent if it is type-dependent\n    or value-dependent, or it has a subexpression that is type-dependent\n-   or value-dependent.\"  */\n+   or value-dependent.\"\n+\n+   Except don't actually check value-dependence for unevaluated expressions,\n+   because in sizeof(i) we don't care about the value of i.  Checking\n+   type-dependence will in turn check value-dependence of array bounds/template\n+   arguments as needed.  */\n \n bool\n-instantiation_dependent_expression_p (tree expression)\n+instantiation_dependent_uneval_expression_p (tree expression)\n {\n   tree result;\n \n@@ -23207,6 +23199,15 @@ instantiation_dependent_expression_p (tree expression)\n   return result != NULL_TREE;\n }\n \n+/* As above, but also check value-dependence of the expression as a whole.  */\n+\n+bool\n+instantiation_dependent_expression_p (tree expression)\n+{\n+  return (instantiation_dependent_uneval_expression_p (expression)\n+\t  || value_dependent_expression_p (expression));\n+}\n+\n /* Like type_dependent_expression_p, but it also works while not processing\n    a template definition, i.e. during substitution or mangling.  */\n "}, {"sha": "0487adf6018db461efb9cb246cce745f1e2f1dd3", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d91c64d2562c68c7173339527bc5ee33868f3/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d91c64d2562c68c7173339527bc5ee33868f3/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=463d91c64d2562c68c7173339527bc5ee33868f3", "patch": "@@ -8740,7 +8740,7 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p,\n   /* Depending on the resolution of DR 1172, we may later need to distinguish\n      instantiation-dependent but not type-dependent expressions so that, say,\n      A<decltype(sizeof(T))>::U doesn't require 'typename'.  */\n-  if (instantiation_dependent_expression_p (expr))\n+  if (instantiation_dependent_uneval_expression_p (expr))\n     {\n       type = cxx_make_type (DECLTYPE_TYPE);\n       DECLTYPE_TYPE_EXPR (type) = expr;"}, {"sha": "94d66fc92b82bc0a0aef58e26b74fb80a0c241f4", "filename": "gcc/testsuite/g++.dg/template/dependent-expr10.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d91c64d2562c68c7173339527bc5ee33868f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d91c64d2562c68c7173339527bc5ee33868f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr10.C?ref=463d91c64d2562c68c7173339527bc5ee33868f3", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/70634\n+\n+template < typename T >\n+bool foo ()\n+{\n+  const int i = sizeof (i) > 1 ? sizeof (T) : 0;\n+  return i > 0;\n+}"}]}