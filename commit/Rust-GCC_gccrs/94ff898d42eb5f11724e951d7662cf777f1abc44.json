{"sha": "94ff898d42eb5f11724e951d7662cf777f1abc44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRmZjg5OGQ0MmViNWYxMTcyNGU5NTFkNzY2MmNmNzc3ZjFhYmM0NA==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@redhat.com", "date": "2004-10-22T19:44:48Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2004-10-22T19:44:48Z"}, "message": "rs6000.c (setup_incoming_varargs): Align DFmode saves.\n\n2004-10-22  Eric Christopher  <echristo@redhat.com>\n\n        * config/rs6000/rs6000.c (setup_incoming_varargs): Align DFmode\n\tsaves.\n\nFrom-SVN: r89474", "tree": {"sha": "5659a1fd55de7c015ff44e6b12ed6825e80272fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5659a1fd55de7c015ff44e6b12ed6825e80272fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94ff898d42eb5f11724e951d7662cf777f1abc44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94ff898d42eb5f11724e951d7662cf777f1abc44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94ff898d42eb5f11724e951d7662cf777f1abc44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94ff898d42eb5f11724e951d7662cf777f1abc44/comments", "author": {"login": "echristo", "id": 327308, "node_id": "MDQ6VXNlcjMyNzMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/327308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/echristo", "html_url": "https://github.com/echristo", "followers_url": "https://api.github.com/users/echristo/followers", "following_url": "https://api.github.com/users/echristo/following{/other_user}", "gists_url": "https://api.github.com/users/echristo/gists{/gist_id}", "starred_url": "https://api.github.com/users/echristo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/echristo/subscriptions", "organizations_url": "https://api.github.com/users/echristo/orgs", "repos_url": "https://api.github.com/users/echristo/repos", "events_url": "https://api.github.com/users/echristo/events{/privacy}", "received_events_url": "https://api.github.com/users/echristo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7a2f78706181882e730b94a2c3708eaa5fd24ddf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a2f78706181882e730b94a2c3708eaa5fd24ddf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a2f78706181882e730b94a2c3708eaa5fd24ddf"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "1e782274b87a7eb19d12ef15c88001a626e3904c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ff898d42eb5f11724e951d7662cf777f1abc44/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ff898d42eb5f11724e951d7662cf777f1abc44/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=94ff898d42eb5f11724e951d7662cf777f1abc44", "patch": "@@ -1,3 +1,8 @@\n+2004-10-22  Eric Christopher  <echristo@redhat.com>\n+\n+        * config/rs6000/rs6000.c (setup_incoming_varargs): Align DFmode\n+\tsaves.\n+\n 2004-10-22  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* config/rs6000/spe.md (spe_extendsfdf2): New."}, {"sha": "adf4fec8ffc2e0fb9cb4ffc5a70386708574880e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ff898d42eb5f11724e951d7662cf777f1abc44/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ff898d42eb5f11724e951d7662cf777f1abc44/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=94ff898d42eb5f11724e951d7662cf777f1abc44", "patch": "@@ -762,9 +762,9 @@ static tree rs6000_build_builtin_va_list (void);\n static tree rs6000_gimplify_va_arg (tree, tree, tree *, tree *);\n static bool rs6000_must_pass_in_stack (enum machine_mode, tree);\n static bool rs6000_vector_mode_supported_p (enum machine_mode);\n-static int get_vec_cmp_insn (enum rtx_code, enum machine_mode, \n+static int get_vec_cmp_insn (enum rtx_code, enum machine_mode,\n \t\t\t     enum machine_mode);\n-static rtx rs6000_emit_vector_compare (enum rtx_code, rtx, rtx, \n+static rtx rs6000_emit_vector_compare (enum rtx_code, rtx, rtx,\n \t\t\t\t       enum machine_mode);\n static int get_vsel_insn (enum machine_mode);\n static void rs6000_emit_vector_select (rtx, rtx, rtx, rtx);\n@@ -5476,6 +5476,7 @@ setup_incoming_varargs (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t{\n \t  mem = gen_rtx_MEM (DFmode, plus_constant (save_area, off));\n \t  set_mem_alias_set (mem, set);\n+\t  set_mem_align (mem, GET_MODE_ALIGNMENT (DFmode));\n \t  emit_move_insn (mem, gen_rtx_REG (DFmode, fregno));\n \t  fregno++;\n \t  off += 8;\n@@ -11294,7 +11295,7 @@ output_e500_flip_eq_bit (rtx dst, rtx src)\n    not available.  */\n \n static int\n-get_vec_cmp_insn (enum rtx_code code, \n+get_vec_cmp_insn (enum rtx_code code,\n \t\t  enum machine_mode dest_mode,\n \t\t  enum machine_mode op_mode)\n {\n@@ -11393,7 +11394,7 @@ rs6000_emit_vector_compare (enum rtx_code rcode,\n \t    enum insn_code nor_code;\n \t    rtx eq_rtx = rs6000_emit_vector_compare (EQ, op0, op1,\n \t\t\t\t\t\t     dest_mode);\n-\t    \n+\n \t    nor_code = one_cmpl_optab->handlers[(int)dest_mode].insn_code;\n \t    if (nor_code == CODE_FOR_nothing)\n \t      abort ();\n@@ -11521,7 +11522,7 @@ rs6000_emit_vector_select (rtx dest, rtx op1, rtx op2, rtx mask)\n   int vsel_insn_index  = get_vsel_insn (GET_MODE (dest));\n \n   temp = gen_reg_rtx (dest_mode);\n-  \n+\n   t = gen_rtx_fmt_ee (SET, VOIDmode, temp,\n \t\t      gen_rtx_fmt_Ei (UNSPEC, dest_mode,\n \t\t\t\t      gen_rtvec (3, op1, op2, mask),\n@@ -11531,7 +11532,7 @@ rs6000_emit_vector_select (rtx dest, rtx op1, rtx op2, rtx mask)\n   return;\n }\n \n-/* Emit vector conditional expression.  \n+/* Emit vector conditional expression.\n    DEST is destination. OP1 and OP2 are two VEC_COND_EXPR operands.\n    CC_OP0 and CC_OP1 are the two operands for the relation operation COND.  */\n \n@@ -11594,7 +11595,7 @@ rs6000_emit_cmove (rtx dest, rtx op, rtx true_cond, rtx false_cond)\n     return 0;\n \n   is_against_zero = op1 == CONST0_RTX (compare_mode);\n-  \n+\n   /* A floating-point subtract might overflow, underflow, or produce\n      an inexact result, thus changing the floating-point flags, so it\n      can't be generated if we care about that.  It's safe if one side\n@@ -17251,7 +17252,7 @@ toc_section (void)\n static void\n rs6000_darwin_file_start (void)\n {\n-  static const struct \n+  static const struct\n   {\n     const char *arg;\n     const char *name;\n@@ -17274,7 +17275,7 @@ rs6000_darwin_file_start (void)\n     { NULL, \"ppc\", 0 } };\n   const char *cpu_id = \"\";\n   size_t i;\n-  \n+\n   rs6000_file_start();\n \n   /* Determine the argument to -mcpu=.  Default to G3 if not specified.  */"}]}