{"sha": "f847198ec32588beda29a03572a765f9f91b0644", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg0NzE5OGVjMzI1ODhiZWRhMjlhMDM1NzJhNzY1ZjlmOTFiMDY0NA==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2018-12-14T20:43:02Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2018-12-14T20:43:02Z"}, "message": "[PR88495] An OpenACC async queue is always synchronized with itself\n\nAn OpenACC async queue is always synchronized with itself, so invocations like\n\"#pragma acc wait(0) async(0)\", or \"acc_wait_async (0, 0)\" don't make a lot of\nsense, but are still valid.\n\n\tlibgomp/\n\tPR libgomp/88495\n\t* plugin/plugin-nvptx.c (nvptx_wait_async): Don't refuse\n\t\"identical parameters\".\n\t* testsuite/libgomp.oacc-c-c++-common/asyncwait-nop-1.c: Update.\n\t* testsuite/libgomp.oacc-c-c++-common/lib-80.c: Remove.\n\nFrom-SVN: r267152", "tree": {"sha": "fe3691f588a1fb4281a4e96daa9607b92f809a48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe3691f588a1fb4281a4e96daa9607b92f809a48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f847198ec32588beda29a03572a765f9f91b0644", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f847198ec32588beda29a03572a765f9f91b0644", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f847198ec32588beda29a03572a765f9f91b0644", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f847198ec32588beda29a03572a765f9f91b0644/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c8ab8aab9f93380f874e199366ad1badd1dd59a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8ab8aab9f93380f874e199366ad1badd1dd59a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8ab8aab9f93380f874e199366ad1badd1dd59a4"}], "stats": {"total": 147, "additions": 8, "deletions": 139}, "files": [{"sha": "349497d58ee631edbd22347c9c7a523d97bb2317", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f847198ec32588beda29a03572a765f9f91b0644/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f847198ec32588beda29a03572a765f9f91b0644/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=f847198ec32588beda29a03572a765f9f91b0644", "patch": "@@ -1,5 +1,11 @@\n 2018-12-14  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\tPR libgomp/88495\n+\t* plugin/plugin-nvptx.c (nvptx_wait_async): Don't refuse\n+\t\"identical parameters\".\n+\t* testsuite/libgomp.oacc-c-c++-common/asyncwait-nop-1.c: Update.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-80.c: Remove.\n+\n \tPR libgomp/88484\n \t* oacc-parallel.c (GOACC_wait): Correct handling for \"async >= 0\".\n \t* testsuite/libgomp.oacc-c-c++-common/asyncwait-nop-1.c: New file."}, {"sha": "fb686de73f2596659b6d4fbb1c4db4775b9f4ad3", "filename": "libgomp/plugin/plugin-nvptx.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f847198ec32588beda29a03572a765f9f91b0644/libgomp%2Fplugin%2Fplugin-nvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f847198ec32588beda29a03572a765f9f91b0644/libgomp%2Fplugin%2Fplugin-nvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-nvptx.c?ref=f847198ec32588beda29a03572a765f9f91b0644", "patch": "@@ -1617,8 +1617,9 @@ nvptx_wait_async (int async1, int async2)\n      necessarily have to exist already.  */\n   s2 = select_stream_for_async (async2, self, true, NULL);\n \n+  /* A stream is always synchronized with itself.  */\n   if (s1 == s2)\n-    GOMP_PLUGIN_fatal (\"identical parameters\");\n+    return;\n \n   e = (CUevent *) GOMP_PLUGIN_malloc (sizeof (CUevent));\n "}, {"sha": "4ab67363ba67e003dd798a2a77f66debfdc85ab2", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/asyncwait-nop-1.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f847198ec32588beda29a03572a765f9f91b0644/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fasyncwait-nop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f847198ec32588beda29a03572a765f9f91b0644/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fasyncwait-nop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fasyncwait-nop-1.c?ref=f847198ec32588beda29a03572a765f9f91b0644", "patch": "@@ -51,9 +51,6 @@ main ()\n     {\n       for (size_t j = 0; j < values_n; ++j)\n \t{\n-\t  if (values[i] == values[j])\n-\t    continue;\n-\n #pragma acc parallel wait (values[i]) async (values[j])\n \t  ;\n #pragma acc wait (values[i]) async (values[j])"}, {"sha": "9a9a837fa4f29ac701cc7fe504d0746f1087db90", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-80.c", "status": "removed", "additions": 0, "deletions": 135, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8ab8aab9f93380f874e199366ad1badd1dd59a4/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-80.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8ab8aab9f93380f874e199366ad1badd1dd59a4/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-80.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-80.c?ref=c8ab8aab9f93380f874e199366ad1badd1dd59a4", "patch": "@@ -1,135 +0,0 @@\n-/* { dg-do run { target openacc_nvidia_accel_selected } } */\n-/* { dg-additional-options \"-lcuda\" } */\n-\n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <unistd.h>\n-#include <openacc.h>\n-#include <cuda.h>\n-#include \"timer.h\"\n-\n-int\n-main (int argc, char **argv)\n-{\n-  CUdevice dev;\n-  CUfunction delay;\n-  CUmodule module;\n-  CUresult r;\n-  CUstream stream;\n-  int N;\n-  int i;\n-  unsigned long *a, *d_a, dticks;\n-  int nbytes;\n-  float atime, dtime;\n-  void *kargs[2];\n-  int clkrate;\n-  int devnum, nprocs;\n-\n-  acc_init (acc_device_nvidia);\n-\n-  devnum = acc_get_device_num (acc_device_nvidia);\n-\n-  r = cuDeviceGet (&dev, devnum);\n-  if (r != CUDA_SUCCESS)\n-    {\n-      fprintf (stderr, \"cuDeviceGet failed: %d\\n\", r);\n-      abort ();\n-    }\n-\n-  r =\n-    cuDeviceGetAttribute (&nprocs, CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT,\n-\t\t\t  dev);\n-  if (r != CUDA_SUCCESS)\n-    {\n-      fprintf (stderr, \"cuDeviceGetAttribute failed: %d\\n\", r);\n-      abort ();\n-    }\n-\n-  r = cuDeviceGetAttribute (&clkrate, CU_DEVICE_ATTRIBUTE_CLOCK_RATE, dev);\n-  if (r != CUDA_SUCCESS)\n-    {\n-      fprintf (stderr, \"cuDeviceGetAttribute failed: %d\\n\", r);\n-      abort ();\n-    }\n-\n-  r = cuModuleLoad (&module, \"subr.ptx\");\n-  if (r != CUDA_SUCCESS)\n-    {\n-      fprintf (stderr, \"cuModuleLoad failed: %d\\n\", r);\n-      abort ();\n-    }\n-\n-  r = cuModuleGetFunction (&delay, module, \"delay\");\n-  if (r != CUDA_SUCCESS)\n-    {\n-      fprintf (stderr, \"cuModuleGetFunction failed: %d\\n\", r);\n-      abort ();\n-    }\n-\n-  nbytes = nprocs * sizeof (unsigned long);\n-\n-  dtime = 200.0;\n-\n-  dticks = (unsigned long) (dtime * clkrate);\n-\n-  N = nprocs;\n-\n-  a = (unsigned long *) malloc (nbytes);\n-  d_a = (unsigned long *) acc_malloc (nbytes);\n-\n-  acc_map_data (a, d_a, nbytes);\n-\n-  r = cuStreamCreate (&stream, CU_STREAM_DEFAULT);\n-  if (r != CUDA_SUCCESS)\n-\t{\n-\t  fprintf (stderr, \"cuStreamCreate failed: %d\\n\", r);\n-\t  abort ();\n-\t}\n-\n-  acc_set_cuda_stream (1, stream);\n-\n-  init_timers (1);\n-\n-  kargs[0] = (void *) &d_a;\n-  kargs[1] = (void *) &dticks;\n-\n-  start_timer (0);\n-\n-  for (i = 0; i < N; i++)\n-    {\n-      r = cuLaunchKernel (delay, 1, 1, 1, 1, 1, 1, 0, stream, kargs, 0);\n-      if (r != CUDA_SUCCESS)\n-\t{\n-\t  fprintf (stderr, \"cuLaunchKernel failed: %d\\n\", r);\n-\t  abort ();\n-\t}\n-    }\n-\n-  fprintf (stderr, \"CheCKpOInT\\n\");\n-  acc_wait_async (1, 1);\n-\n-  acc_wait (1);\n-\n-  atime = stop_timer (0);\n-\n-  if (atime < dtime)\n-    {\n-      fprintf (stderr, \"actual time < delay time\\n\");\n-      abort ();\n-    }\n-\n-  acc_unmap_data (a);\n-\n-  fini_timers ();\n-\n-  free (a);\n-  acc_free (d_a);\n-\n-  acc_shutdown (acc_device_nvidia);\n-\n-  return 0;\n-}\n-\n-/* { dg-output \"CheCKpOInT(\\n|\\r\\n|\\r).*\" } */\n-/* { dg-output \"identical parameters\" } */\n-/* { dg-shouldfail \"\" } */"}]}