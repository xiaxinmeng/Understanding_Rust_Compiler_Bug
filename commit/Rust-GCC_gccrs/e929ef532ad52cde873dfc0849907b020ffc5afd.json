{"sha": "e929ef532ad52cde873dfc0849907b020ffc5afd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkyOWVmNTMyYWQ1MmNkZTg3M2RmYzA4NDk5MDdiMDIwZmZjNWFmZA==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-11-10T17:28:18Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-11-10T17:28:18Z"}, "message": "Fortran: OpenMP 5.0 (in_,task_)reduction clause extensions\n\ngcc/fortran/ChangeLog:\n\n\t* dump-parse-tree.c (show_omp_clauses): Handle new reduction enums.\n\t* gfortran.h (OMP_LIST_REDUCTION_INSCAN, OMP_LIST_REDUCTION_TASK,\n\tOMP_LIST_IN_REDUCTION, OMP_LIST_TASK_REDUCTION): Add enums.\n\t* openmp.c (enum omp_mask1): Add OMP_CLAUSE_IN_REDUCTION\n\tand OMP_CLAUSE_TASK_REDUCTION.\n\t(gfc_match_omp_clause_reduction): Extend reduction handling;\n\tmoved from ...\n\t(gfc_match_omp_clauses): ... here. Add calls to it.\n\t(OMP_TASK_CLAUSES, OMP_TARGET_CLAUSES, OMP_TASKLOOP_CLAUSES):\n\tAdd OMP_CLAUSE_IN_REDUCTION.\n\t(gfc_match_omp_taskgroup): Add task_reduction matching.\n\t(resolve_omp_clauses): Update for new reduction clause changes;\n\tremove removed nonmonotonic-schedule restrictions.\n\t(gfc_resolve_omp_parallel_blocks): Add new enums to switch.\n\t* trans-openmp.c (gfc_omp_clause_default_ctor,\n\tgfc_trans_omp_reduction_list, gfc_trans_omp_clauses,\n\tgfc_split_omp_clauses): Handle updated reduction clause.\n\ngcc/ChangeLog:\n\n\t* gimplify.c (gimplify_scan_omp_clauses, gimplify_omp_loop): Use 'do'\n\tinstead of 'for' in error messages for Fortran.\n\t* omp-low.c (check_omp_nesting_restrictions): Likewise\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/gomp/schedule-modifiers-2.f90: Remove some dg-error.\n\t* gfortran.dg/gomp/reduction4.f90: New test.\n\t* gfortran.dg/gomp/reduction5.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-1.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-2.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-3.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-4.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-5.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-6.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-7.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-8.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-9.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-10.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-11.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-12.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-13.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-14.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-15.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-16.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-17.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-18.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-19.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-20.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-21.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-22.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-23.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-24.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-25.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-26.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-27.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-28.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-29.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-30.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-31.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-32.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-33.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-34.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-35.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-36.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-37.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-38.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-39.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-40.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-41.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-42.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-43.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-44.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-45.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-46.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-47.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-48.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-49.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-50.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-51.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-52.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-53.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-54.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-55.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-56.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-57.f90: New test.\n\t* gfortran.dg/gomp/workshare-reduction-58.f90: New test.", "tree": {"sha": "095a8e137a565634c9bfe46eb4542a857a21c539", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/095a8e137a565634c9bfe46eb4542a857a21c539"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e929ef532ad52cde873dfc0849907b020ffc5afd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e929ef532ad52cde873dfc0849907b020ffc5afd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e929ef532ad52cde873dfc0849907b020ffc5afd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e929ef532ad52cde873dfc0849907b020ffc5afd/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cca9751700946f1398fc3bcb96d529bb2964f0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cca9751700946f1398fc3bcb96d529bb2964f0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cca9751700946f1398fc3bcb96d529bb2964f0f"}], "stats": {"total": 2521, "additions": 2349, "deletions": 172}, "files": [{"sha": "cab0fb2979f50279fb07a6e7baae04548a9c2124", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -1587,7 +1587,11 @@ show_omp_clauses (gfc_omp_clauses *omp_clauses)\n \t  case OMP_LIST_MAP: type = \"MAP\"; break;\n \t  case OMP_LIST_TO: type = \"TO\"; break;\n \t  case OMP_LIST_FROM: type = \"FROM\"; break;\n-\t  case OMP_LIST_REDUCTION: type = \"REDUCTION\"; break;\n+\t  case OMP_LIST_REDUCTION:\n+\t  case OMP_LIST_REDUCTION_INSCAN:\n+\t  case OMP_LIST_REDUCTION_TASK: type = \"REDUCTION\"; break;\n+\t  case OMP_LIST_IN_REDUCTION: type = \"IN_REDUCTION\"; break;\n+\t  case OMP_LIST_TASK_REDUCTION: type = \"TASK_REDUCTION\"; break;\n \t  case OMP_LIST_DEVICE_RESIDENT: type = \"DEVICE_RESIDENT\"; break;\n \t  case OMP_LIST_LINK: type = \"LINK\"; break;\n \t  case OMP_LIST_USE_DEVICE: type = \"USE_DEVICE\"; break;\n@@ -1600,6 +1604,10 @@ show_omp_clauses (gfc_omp_clauses *omp_clauses)\n \t    gcc_unreachable ();\n \t  }\n \tfprintf (dumpfile, \" %s(\", type);\n+\tif (list_type == OMP_LIST_REDUCTION_INSCAN)\n+\t  fputs (\"inscan, \", dumpfile);\n+\tif (list_type == OMP_LIST_REDUCTION_TASK)\n+\t  fputs (\"task, \", dumpfile);\n \tshow_omp_namelist (list_type, omp_clauses->lists[list_type]);\n \tfputc (')', dumpfile);\n       }"}, {"sha": "6467985ea7f080ccf009e536ac782bd692b8719f", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -1278,6 +1278,10 @@ enum\n   OMP_LIST_TO,\n   OMP_LIST_FROM,\n   OMP_LIST_REDUCTION,\n+  OMP_LIST_REDUCTION_INSCAN,\n+  OMP_LIST_REDUCTION_TASK,\n+  OMP_LIST_IN_REDUCTION,\n+  OMP_LIST_TASK_REDUCTION,\n   OMP_LIST_DEVICE_RESIDENT,\n   OMP_LIST_LINK,\n   OMP_LIST_USE_DEVICE,"}, {"sha": "68d0b65ff87f082b4a28a9be6a0a68f96d0cf8c3", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 230, "deletions": 147, "changes": 377, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -762,6 +762,8 @@ enum omp_mask1\n   OMP_CLAUSE_SHARED,\n   OMP_CLAUSE_COPYIN,\n   OMP_CLAUSE_REDUCTION,\n+  OMP_CLAUSE_IN_REDUCTION,\n+  OMP_CLAUSE_TASK_REDUCTION,\n   OMP_CLAUSE_IF,\n   OMP_CLAUSE_NUM_THREADS,\n   OMP_CLAUSE_SCHEDULE,\n@@ -959,6 +961,163 @@ gfc_match_omp_map_clause (gfc_omp_namelist **list, gfc_omp_map_op map_op,\n   return false;\n }\n \n+/* reduction ( reduction-modifier, reduction-operator : variable-list )\n+   in_reduction ( reduction-operator : variable-list )\n+   task_reduction ( reduction-operator : variable-list )  */\n+\n+static match\n+gfc_match_omp_clause_reduction (char pc, gfc_omp_clauses *c, bool openacc,\n+\t\t\t\tbool allow_derived)\n+{\n+  if (pc == 'r' && gfc_match (\"reduction ( \") != MATCH_YES)\n+    return MATCH_NO;\n+  else if (pc == 'i' && gfc_match (\"in_reduction ( \") != MATCH_YES)\n+    return MATCH_NO;\n+  else if (pc == 't' && gfc_match (\"task_reduction ( \") != MATCH_YES)\n+    return MATCH_NO;\n+\n+  locus old_loc = gfc_current_locus;\n+  int list_idx = 0;\n+\n+  if (pc == 'r' && !openacc)\n+    {\n+      if (gfc_match (\"inscan\") == MATCH_YES)\n+\tlist_idx = OMP_LIST_REDUCTION_INSCAN;\n+      else if (gfc_match (\"task\") == MATCH_YES)\n+\tlist_idx = OMP_LIST_REDUCTION_TASK;\n+      else if (gfc_match (\"default\") == MATCH_YES)\n+\tlist_idx = OMP_LIST_REDUCTION;\n+      if (list_idx != 0 && gfc_match (\", \") != MATCH_YES)\n+\t{\n+\t  gfc_error (\"Comma expected at %C\");\n+\t  gfc_current_locus = old_loc;\n+\t  return MATCH_NO;\n+\t}\n+      if (list_idx == 0)\n+\tlist_idx = OMP_LIST_REDUCTION;\n+    }\n+  else if (pc == 'i')\n+    list_idx = OMP_LIST_IN_REDUCTION;\n+  else if (pc == 't')\n+    list_idx = OMP_LIST_TASK_REDUCTION;\n+  else\n+    list_idx = OMP_LIST_REDUCTION;\n+\n+  gfc_omp_reduction_op rop = OMP_REDUCTION_NONE;\n+  char buffer[GFC_MAX_SYMBOL_LEN + 3];\n+  if (gfc_match_char ('+') == MATCH_YES)\n+    rop = OMP_REDUCTION_PLUS;\n+  else if (gfc_match_char ('*') == MATCH_YES)\n+    rop = OMP_REDUCTION_TIMES;\n+  else if (gfc_match_char ('-') == MATCH_YES)\n+    rop = OMP_REDUCTION_MINUS;\n+  else if (gfc_match (\".and.\") == MATCH_YES)\n+    rop = OMP_REDUCTION_AND;\n+  else if (gfc_match (\".or.\") == MATCH_YES)\n+    rop = OMP_REDUCTION_OR;\n+  else if (gfc_match (\".eqv.\") == MATCH_YES)\n+    rop = OMP_REDUCTION_EQV;\n+  else if (gfc_match (\".neqv.\") == MATCH_YES)\n+    rop = OMP_REDUCTION_NEQV;\n+  if (rop != OMP_REDUCTION_NONE)\n+    snprintf (buffer, sizeof buffer, \"operator %s\",\n+\t      gfc_op2string ((gfc_intrinsic_op) rop));\n+  else if (gfc_match_defined_op_name (buffer + 1, 1) == MATCH_YES)\n+    {\n+      buffer[0] = '.';\n+      strcat (buffer, \".\");\n+    }\n+  else if (gfc_match_name (buffer) == MATCH_YES)\n+    {\n+      gfc_symbol *sym;\n+      const char *n = buffer;\n+\n+      gfc_find_symbol (buffer, NULL, 1, &sym);\n+      if (sym != NULL)\n+\t{\n+\t  if (sym->attr.intrinsic)\n+\t    n = sym->name;\n+\t  else if ((sym->attr.flavor != FL_UNKNOWN\n+\t\t    && sym->attr.flavor != FL_PROCEDURE)\n+\t\t   || sym->attr.external\n+\t\t   || sym->attr.generic\n+\t\t   || sym->attr.entry\n+\t\t   || sym->attr.result\n+\t\t   || sym->attr.dummy\n+\t\t   || sym->attr.subroutine\n+\t\t   || sym->attr.pointer\n+\t\t   || sym->attr.target\n+\t\t   || sym->attr.cray_pointer\n+\t\t   || sym->attr.cray_pointee\n+\t\t   || (sym->attr.proc != PROC_UNKNOWN\n+\t\t       && sym->attr.proc != PROC_INTRINSIC)\n+\t\t   || sym->attr.if_source != IFSRC_UNKNOWN\n+\t\t   || sym == sym->ns->proc_name)\n+\t\t{\n+\t\t  sym = NULL;\n+\t\t  n = NULL;\n+\t\t}\n+\t      else\n+\t\tn = sym->name;\n+\t    }\n+\t  if (n == NULL)\n+\t    rop = OMP_REDUCTION_NONE;\n+\t  else if (strcmp (n, \"max\") == 0)\n+\t    rop = OMP_REDUCTION_MAX;\n+\t  else if (strcmp (n, \"min\") == 0)\n+\t    rop = OMP_REDUCTION_MIN;\n+\t  else if (strcmp (n, \"iand\") == 0)\n+\t    rop = OMP_REDUCTION_IAND;\n+\t  else if (strcmp (n, \"ior\") == 0)\n+\t    rop = OMP_REDUCTION_IOR;\n+\t  else if (strcmp (n, \"ieor\") == 0)\n+\t    rop = OMP_REDUCTION_IEOR;\n+\t  if (rop != OMP_REDUCTION_NONE\n+\t      && sym != NULL\n+\t      && ! sym->attr.intrinsic\n+\t      && ! sym->attr.use_assoc\n+\t      && ((sym->attr.flavor == FL_UNKNOWN\n+\t\t   && !gfc_add_flavor (&sym->attr, FL_PROCEDURE,\n+\t\t\t\t\t      sym->name, NULL))\n+\t\t  || !gfc_add_intrinsic (&sym->attr, NULL)))\n+\t    rop = OMP_REDUCTION_NONE;\n+    }\n+  else\n+    buffer[0] = '\\0';\n+  gfc_omp_udr *udr = (buffer[0] ? gfc_find_omp_udr (gfc_current_ns, buffer, NULL)\n+\t\t\t\t: NULL);\n+  gfc_omp_namelist **head = NULL;\n+  if (rop == OMP_REDUCTION_NONE && udr)\n+    rop = OMP_REDUCTION_USER;\n+\n+  if (gfc_match_omp_variable_list (\" :\", &c->lists[list_idx], false, NULL,\n+\t\t\t\t   &head, openacc, allow_derived) != MATCH_YES)\n+    {\n+      gfc_current_locus = old_loc;\n+      return MATCH_NO;\n+    }\n+  gfc_omp_namelist *n;\n+  if (rop == OMP_REDUCTION_NONE)\n+    {\n+      n = *head;\n+      *head = NULL;\n+      gfc_error_now (\"!$OMP DECLARE REDUCTION %s not found at %L\",\n+\t\t     buffer, &old_loc);\n+      gfc_free_omp_namelist (n);\n+    }\n+  else\n+    for (n = *head; n; n = n->next)\n+      {\n+\tn->u.reduction_op = rop;\n+\tif (udr)\n+\t  {\n+\t    n->udr = gfc_get_omp_namelist_udr ();\n+\t    n->udr->udr = udr;\n+\t  }\n+     }\n+  return MATCH_YES;\n+}\n+\n /* Match OpenMP and OpenACC directive clauses. MASK is a bitmask of\n    clauses that are allowed for a particular directive.  */\n \n@@ -1379,6 +1538,10 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t      needs_space = true;\n \t      continue;\n \t    }\n+\t  if ((mask & OMP_CLAUSE_IN_REDUCTION)\n+\t      && gfc_match_omp_clause_reduction (pc, c, openacc,\n+\t\t\t\t\t\t allow_derived) == MATCH_YES)\n+\t    continue;\n \t  if ((mask & OMP_CLAUSE_INBRANCH)\n \t      && !c->inbranch\n \t      && !c->notinbranch\n@@ -1717,124 +1880,24 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t      continue;\n \t    }\n \t  if ((mask & OMP_CLAUSE_REDUCTION)\n-\t      && gfc_match (\"reduction ( \") == MATCH_YES)\n+\t      && gfc_match_omp_clause_reduction (pc, c, openacc,\n+\t\t\t\t\t\t allow_derived) == MATCH_YES)\n+\t    continue;\n+\t  if ((mask & OMP_CLAUSE_MEMORDER)\n+\t      && c->memorder == OMP_MEMORDER_UNSET\n+\t      && gfc_match (\"relaxed\") == MATCH_YES)\n \t    {\n-\t      gfc_omp_reduction_op rop = OMP_REDUCTION_NONE;\n-\t      char buffer[GFC_MAX_SYMBOL_LEN + 3];\n-\t      if (gfc_match_char ('+') == MATCH_YES)\n-\t\trop = OMP_REDUCTION_PLUS;\n-\t      else if (gfc_match_char ('*') == MATCH_YES)\n-\t\trop = OMP_REDUCTION_TIMES;\n-\t      else if (gfc_match_char ('-') == MATCH_YES)\n-\t\trop = OMP_REDUCTION_MINUS;\n-\t      else if (gfc_match (\".and.\") == MATCH_YES)\n-\t\trop = OMP_REDUCTION_AND;\n-\t      else if (gfc_match (\".or.\") == MATCH_YES)\n-\t\trop = OMP_REDUCTION_OR;\n-\t      else if (gfc_match (\".eqv.\") == MATCH_YES)\n-\t\trop = OMP_REDUCTION_EQV;\n-\t      else if (gfc_match (\".neqv.\") == MATCH_YES)\n-\t\trop = OMP_REDUCTION_NEQV;\n-\t      if (rop != OMP_REDUCTION_NONE)\n-\t\tsnprintf (buffer, sizeof buffer, \"operator %s\",\n-\t\t\t  gfc_op2string ((gfc_intrinsic_op) rop));\n-\t      else if (gfc_match_defined_op_name (buffer + 1, 1) == MATCH_YES)\n-\t\t{\n-\t\t  buffer[0] = '.';\n-\t\t  strcat (buffer, \".\");\n-\t\t}\n-\t      else if (gfc_match_name (buffer) == MATCH_YES)\n-\t\t{\n-\t\t  gfc_symbol *sym;\n-\t\t  const char *n = buffer;\n-\n-\t\t  gfc_find_symbol (buffer, NULL, 1, &sym);\n-\t\t  if (sym != NULL)\n-\t\t    {\n-\t\t      if (sym->attr.intrinsic)\n-\t\t\tn = sym->name;\n-\t\t      else if ((sym->attr.flavor != FL_UNKNOWN\n-\t\t\t\t&& sym->attr.flavor != FL_PROCEDURE)\n-\t\t\t       || sym->attr.external\n-\t\t\t       || sym->attr.generic\n-\t\t\t       || sym->attr.entry\n-\t\t\t       || sym->attr.result\n-\t\t\t       || sym->attr.dummy\n-\t\t\t       || sym->attr.subroutine\n-\t\t\t       || sym->attr.pointer\n-\t\t\t       || sym->attr.target\n-\t\t\t       || sym->attr.cray_pointer\n-\t\t\t       || sym->attr.cray_pointee\n-\t\t\t       || (sym->attr.proc != PROC_UNKNOWN\n-\t\t\t\t   && sym->attr.proc != PROC_INTRINSIC)\n-\t\t\t       || sym->attr.if_source != IFSRC_UNKNOWN\n-\t\t\t       || sym == sym->ns->proc_name)\n-\t\t\t{\n-\t\t\t  sym = NULL;\n-\t\t\t  n = NULL;\n-\t\t\t}\n-\t\t      else\n-\t\t\tn = sym->name;\n-\t\t    }\n-\t\t  if (n == NULL)\n-\t\t    rop = OMP_REDUCTION_NONE;\n-\t\t  else if (strcmp (n, \"max\") == 0)\n-\t\t    rop = OMP_REDUCTION_MAX;\n-\t\t  else if (strcmp (n, \"min\") == 0)\n-\t\t    rop = OMP_REDUCTION_MIN;\n-\t\t  else if (strcmp (n, \"iand\") == 0)\n-\t\t    rop = OMP_REDUCTION_IAND;\n-\t\t  else if (strcmp (n, \"ior\") == 0)\n-\t\t    rop = OMP_REDUCTION_IOR;\n-\t\t  else if (strcmp (n, \"ieor\") == 0)\n-\t\t    rop = OMP_REDUCTION_IEOR;\n-\t\t  if (rop != OMP_REDUCTION_NONE\n-\t\t      && sym != NULL\n-\t\t      && ! sym->attr.intrinsic\n-\t\t      && ! sym->attr.use_assoc\n-\t\t      && ((sym->attr.flavor == FL_UNKNOWN\n-\t\t\t  && !gfc_add_flavor (&sym->attr, FL_PROCEDURE,\n-\t\t\t\t\t      sym->name, NULL))\n-\t\t\t  || !gfc_add_intrinsic (&sym->attr, NULL)))\n-\t\t    rop = OMP_REDUCTION_NONE;\n-\t\t}\n-\t      else\n-\t\tbuffer[0] = '\\0';\n-\t      gfc_omp_udr *udr\n-\t\t= (buffer[0]\n-\t\t   ? gfc_find_omp_udr (gfc_current_ns, buffer, NULL) : NULL);\n-\t      gfc_omp_namelist **head = NULL;\n-\t      if (rop == OMP_REDUCTION_NONE && udr)\n-\t\trop = OMP_REDUCTION_USER;\n-\n-\t      if (gfc_match_omp_variable_list (\" :\",\n-\t\t\t\t\t       &c->lists[OMP_LIST_REDUCTION],\n-\t\t\t\t\t       false, NULL, &head, openacc,\n-\t\t\t\t\t       allow_derived) == MATCH_YES)\n-\t\t{\n-\t\t  gfc_omp_namelist *n;\n-\t\t  if (rop == OMP_REDUCTION_NONE)\n-\t\t    {\n-\t\t      n = *head;\n-\t\t      *head = NULL;\n-\t\t      gfc_error_now (\"!$OMP DECLARE REDUCTION %s not found \"\n-\t\t\t\t     \"at %L\", buffer, &old_loc);\n-\t\t      gfc_free_omp_namelist (n);\n-\t\t    }\n-\t\t  else\n-\t\t    for (n = *head; n; n = n->next)\n-\t\t      {\n-\t\t\tn->u.reduction_op = rop;\n-\t\t\tif (udr)\n-\t\t\t  {\n-\t\t\t    n->udr = gfc_get_omp_namelist_udr ();\n-\t\t\t    n->udr->udr = udr;\n-\t\t\t  }\n-\t\t      }\n-\t\t  continue;\n-\t\t}\n-\t      else\n-\t\tgfc_current_locus = old_loc;\n+\t      c->memorder = OMP_MEMORDER_RELAXED;\n+\t      needs_space = true;\n+\t      continue;\n+\t    }\n+\t  if ((mask & OMP_CLAUSE_MEMORDER)\n+\t      && c->memorder == OMP_MEMORDER_UNSET\n+\t      && gfc_match (\"release\") == MATCH_YES)\n+\t    {\n+\t      c->memorder = OMP_MEMORDER_RELEASE;\n+\t      needs_space = true;\n+\t      continue;\n \t    }\n \t  if ((mask & OMP_CLAUSE_MEMORDER)\n \t      && c->memorder == OMP_MEMORDER_UNSET\n@@ -1962,6 +2025,10 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t    }\n \t  break;\n \tcase 't':\n+\t  if ((mask & OMP_CLAUSE_TASK_REDUCTION)\n+\t      && gfc_match_omp_clause_reduction (pc, c, openacc,\n+\t\t\t\t\t\t allow_derived) == MATCH_YES)\n+\t    continue;\n \t  if ((mask & OMP_CLAUSE_THREAD_LIMIT)\n \t      && c->thread_limit == NULL\n \t      && gfc_match (\"thread_limit ( %e )\",\n@@ -2696,18 +2763,19 @@ gfc_match_oacc_routine (void)\n   (omp_mask (OMP_CLAUSE_PRIVATE) | OMP_CLAUSE_FIRSTPRIVATE\t\t\\\n    | OMP_CLAUSE_SHARED | OMP_CLAUSE_IF | OMP_CLAUSE_DEFAULT\t\t\\\n    | OMP_CLAUSE_UNTIED | OMP_CLAUSE_FINAL | OMP_CLAUSE_MERGEABLE\t\\\n-   | OMP_CLAUSE_DEPEND | OMP_CLAUSE_PRIORITY)\n+   | OMP_CLAUSE_DEPEND | OMP_CLAUSE_PRIORITY | OMP_CLAUSE_IN_REDUCTION)\n #define OMP_TASKLOOP_CLAUSES \\\n   (omp_mask (OMP_CLAUSE_PRIVATE) | OMP_CLAUSE_FIRSTPRIVATE\t\t\\\n    | OMP_CLAUSE_LASTPRIVATE | OMP_CLAUSE_SHARED | OMP_CLAUSE_IF\t\t\\\n    | OMP_CLAUSE_DEFAULT | OMP_CLAUSE_UNTIED | OMP_CLAUSE_FINAL\t\t\\\n    | OMP_CLAUSE_MERGEABLE | OMP_CLAUSE_PRIORITY | OMP_CLAUSE_GRAINSIZE\t\\\n-   | OMP_CLAUSE_NUM_TASKS | OMP_CLAUSE_COLLAPSE | OMP_CLAUSE_NOGROUP)\n+   | OMP_CLAUSE_NUM_TASKS | OMP_CLAUSE_COLLAPSE | OMP_CLAUSE_NOGROUP\t\\\n+   | OMP_CLAUSE_REDUCTION | OMP_CLAUSE_IN_REDUCTION)\n #define OMP_TARGET_CLAUSES \\\n   (omp_mask (OMP_CLAUSE_DEVICE) | OMP_CLAUSE_MAP | OMP_CLAUSE_IF\t\\\n    | OMP_CLAUSE_DEPEND | OMP_CLAUSE_NOWAIT | OMP_CLAUSE_PRIVATE\t\t\\\n    | OMP_CLAUSE_FIRSTPRIVATE | OMP_CLAUSE_DEFAULTMAP\t\t\t\\\n-   | OMP_CLAUSE_IS_DEVICE_PTR)\n+   | OMP_CLAUSE_IS_DEVICE_PTR | OMP_CLAUSE_IN_REDUCTION)\n #define OMP_TARGET_DATA_CLAUSES \\\n   (omp_mask (OMP_CLAUSE_DEVICE) | OMP_CLAUSE_MAP | OMP_CLAUSE_IF\t\\\n    | OMP_CLAUSE_USE_DEVICE_PTR | OMP_CLAUSE_USE_DEVICE_ADDR)\n@@ -4228,12 +4296,12 @@ gfc_match_omp_barrier (void)\n match\n gfc_match_omp_taskgroup (void)\n {\n-  if (gfc_match_omp_eos () != MATCH_YES)\n-    {\n-      gfc_error (\"Unexpected junk after $OMP TASKGROUP statement at %C\");\n-      return MATCH_ERROR;\n-    }\n+  gfc_omp_clauses *c;\n+  if (gfc_match_omp_clauses (&c, OMP_CLAUSE_TASK_REDUCTION, true, true)\n+      != MATCH_YES)\n+    return MATCH_ERROR;\n   new_st.op = EXEC_OMP_TASKGROUP;\n+  new_st.ext.omp_clauses = c;\n   return MATCH_YES;\n }\n \n@@ -4560,7 +4628,9 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n   static const char *clause_names[]\n     = { \"PRIVATE\", \"FIRSTPRIVATE\", \"LASTPRIVATE\", \"COPYPRIVATE\", \"SHARED\",\n \t\"COPYIN\", \"UNIFORM\", \"ALIGNED\", \"LINEAR\", \"DEPEND\", \"MAP\",\n-\t\"TO\", \"FROM\", \"REDUCTION\", \"DEVICE_RESIDENT\", \"LINK\", \"USE_DEVICE\",\n+\t\"TO\", \"FROM\", \"REDUCTION\", \"REDUCTION\" /*inscan*/, \"REDUCTION\" /*task*/,\n+\t\"IN_REDUCTION\", \"TASK_REDUCTION\",\n+\t\"DEVICE_RESIDENT\", \"LINK\", \"USE_DEVICE\",\n \t\"CACHE\", \"IS_DEVICE_PTR\", \"USE_DEVICE_PTR\", \"USE_DEVICE_ADDR\",\n \t\"NONTEMPORAL\" };\n   STATIC_ASSERT (ARRAY_SIZE (clause_names) == OMP_LIST_NUM);\n@@ -4727,21 +4797,7 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n   if (omp_clauses->sched_kind != OMP_SCHED_NONE\n       && omp_clauses->sched_nonmonotonic)\n     {\n-      if (omp_clauses->sched_kind != OMP_SCHED_DYNAMIC\n-\t  && omp_clauses->sched_kind != OMP_SCHED_GUIDED)\n-\t{\n-\t  const char *p;\n-\t  switch (omp_clauses->sched_kind)\n-\t    {\n-\t    case OMP_SCHED_STATIC: p = \"STATIC\"; break;\n-\t    case OMP_SCHED_RUNTIME: p = \"RUNTIME\"; break;\n-\t    case OMP_SCHED_AUTO: p = \"AUTO\"; break;\n-\t    default: gcc_unreachable ();\n-\t    }\n-\t  gfc_error (\"NONMONOTONIC modifier specified for %s schedule kind \"\n-\t\t     \"at %L\", p, &code->loc);\n-\t}\n-      else if (omp_clauses->sched_monotonic)\n+      if (omp_clauses->sched_monotonic)\n \tgfc_error (\"Both MONOTONIC and NONMONOTONIC schedule modifiers \"\n \t\t   \"specified at %L\", &code->loc);\n       else if (omp_clauses->ordered)\n@@ -4818,7 +4874,11 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t&& (list != OMP_LIST_MAP || openacc)\n \t&& list != OMP_LIST_FROM\n \t&& list != OMP_LIST_TO\n-\t&& (list != OMP_LIST_REDUCTION || !openacc))\n+\t&& (list != OMP_LIST_REDUCTION || !openacc)\n+\t&& list != OMP_LIST_REDUCTION_INSCAN\n+\t&& list != OMP_LIST_REDUCTION_TASK\n+\t&& list != OMP_LIST_IN_REDUCTION\n+\t&& list != OMP_LIST_TASK_REDUCTION)\n       for (n = omp_clauses->lists[list]; n; n = n->next)\n \t{\n \t  bool component_ref_p = false;\n@@ -5224,6 +5284,11 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t    for (; n != NULL; n = n->next)\n \t      {\n \t\tbool bad = false;\n+\t\tbool is_reduction = (list == OMP_LIST_REDUCTION\n+\t\t\t\t     || list == OMP_LIST_REDUCTION_INSCAN\n+\t\t\t\t     || list == OMP_LIST_REDUCTION_TASK\n+\t\t\t\t     || list == OMP_LIST_IN_REDUCTION\n+\t\t\t\t     || list == OMP_LIST_TASK_REDUCTION);\n \t\tif (n->sym->attr.threadprivate)\n \t\t  gfc_error (\"THREADPRIVATE object %qs in %s clause at %L\",\n \t\t\t     n->sym->name, name, &n->where);\n@@ -5233,15 +5298,15 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t\tif (n->sym->attr.associate_var)\n \t\t  gfc_error (\"ASSOCIATE name %qs in %s clause at %L\",\n \t\t\t     n->sym->name, name, &n->where);\n-\t\tif (list != OMP_LIST_PRIVATE)\n+\t\tif (list != OMP_LIST_PRIVATE && is_reduction)\n \t\t  {\n-\t\t    if (n->sym->attr.proc_pointer && list == OMP_LIST_REDUCTION)\n+\t\t    if (n->sym->attr.proc_pointer)\n \t\t      gfc_error (\"Procedure pointer %qs in %s clause at %L\",\n \t\t\t\t n->sym->name, name, &n->where);\n-\t\t    if (n->sym->attr.pointer && list == OMP_LIST_REDUCTION)\n+\t\t    if (n->sym->attr.pointer)\n \t\t      gfc_error (\"POINTER object %qs in %s clause at %L\",\n \t\t\t\t n->sym->name, name, &n->where);\n-\t\t    if (n->sym->attr.cray_pointer && list == OMP_LIST_REDUCTION)\n+\t\t    if (n->sym->attr.cray_pointer)\n \t\t      gfc_error (\"Cray pointer %qs in %s clause at %L\",\n \t\t\t\t n->sym->name, name, &n->where);\n \t\t  }\n@@ -5253,7 +5318,7 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t\telse if (n->sym->as && n->sym->as->type == AS_ASSUMED_SIZE)\n \t\t  gfc_error (\"Assumed size array %qs in %s clause at %L\",\n \t\t\t     n->sym->name, name, &n->where);\n-\t\tif (n->sym->attr.in_namelist && list != OMP_LIST_REDUCTION)\n+\t\tif (n->sym->attr.in_namelist && !is_reduction)\n \t\t  gfc_error (\"Variable %qs in %s clause is used in \"\n \t\t\t     \"NAMELIST statement at %L\",\n \t\t\t     n->sym->name, name, &n->where);\n@@ -5273,7 +5338,21 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \n \t\tswitch (list)\n \t\t  {\n+\t\t  case OMP_LIST_REDUCTION_INSCAN:\n+\t\t  case OMP_LIST_REDUCTION_TASK:\n+\t\t    if (code && (code->op == EXEC_OMP_TASKLOOP\n+\t\t\t\t || code->op == EXEC_OMP_TEAMS\n+\t\t\t\t || code->op == EXEC_OMP_TEAMS_DISTRIBUTE))\n+\t\t      {\n+\t\t\tgfc_error (\"Only DEFAULT permitted as reduction-\"\n+\t\t\t\t   \"modifier in REDUCTION clause at %L\",\n+\t\t\t\t   &n->where);\n+\t\t\tbreak;\n+\t\t      }\n+\t\t    gcc_fallthrough ();\n \t\t  case OMP_LIST_REDUCTION:\n+\t\t  case OMP_LIST_IN_REDUCTION:\n+\t\t  case OMP_LIST_TASK_REDUCTION:\n \t\t    switch (n->u.reduction_op)\n \t\t      {\n \t\t      case OMP_REDUCTION_PLUS:\n@@ -6102,6 +6181,10 @@ gfc_resolve_omp_parallel_blocks (gfc_code *code, gfc_namespace *ns)\n       case OMP_LIST_FIRSTPRIVATE:\n       case OMP_LIST_LASTPRIVATE:\n       case OMP_LIST_REDUCTION:\n+      case OMP_LIST_REDUCTION_INSCAN:\n+      case OMP_LIST_REDUCTION_TASK:\n+      case OMP_LIST_IN_REDUCTION:\n+      case OMP_LIST_TASK_REDUCTION:\n       case OMP_LIST_LINEAR:\n \tfor (n = omp_clauses->lists[list]; n; n = n->next)\n \t  ctx.sharing_clauses->add (n->sym);"}, {"sha": "d2559bd0c0a4476b5c541d00fe1b43e0aba3dd9b", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 54, "deletions": 17, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -626,6 +626,8 @@ gfc_omp_clause_default_ctor (tree clause, tree decl, tree outer)\n     case OMP_CLAUSE_LASTPRIVATE:\n     case OMP_CLAUSE_LINEAR:\n     case OMP_CLAUSE_REDUCTION:\n+    case OMP_CLAUSE_IN_REDUCTION:\n+    case OMP_CLAUSE_TASK_REDUCTION:\n       break;\n     default:\n       gcc_unreachable ();\n@@ -699,7 +701,9 @@ gfc_omp_clause_default_ctor (tree clause, tree decl, tree outer)\n   then_b = gfc_finish_block (&cond_block);\n \n   /* Reduction clause requires allocated ALLOCATABLE.  */\n-  if (OMP_CLAUSE_CODE (clause) != OMP_CLAUSE_REDUCTION)\n+  if (OMP_CLAUSE_CODE (clause) != OMP_CLAUSE_REDUCTION\n+      && OMP_CLAUSE_CODE (clause) != OMP_CLAUSE_IN_REDUCTION\n+      && OMP_CLAUSE_CODE (clause) != OMP_CLAUSE_TASK_REDUCTION)\n     {\n       gfc_init_block (&cond_block);\n       if (GFC_DESCRIPTOR_TYPE_P (type))\n@@ -2029,20 +2033,40 @@ gfc_trans_omp_array_reduction_or_udr (tree c, gfc_omp_namelist *n, locus where)\n }\n \n static tree\n-gfc_trans_omp_reduction_list (gfc_omp_namelist *namelist, tree list,\n+gfc_trans_omp_reduction_list (int kind, gfc_omp_namelist *namelist, tree list,\n \t\t\t      locus where, bool mark_addressable)\n {\n+  omp_clause_code clause = OMP_CLAUSE_REDUCTION;\n+  switch (kind)\n+    {\n+    case OMP_LIST_REDUCTION:\n+    case OMP_LIST_REDUCTION_INSCAN:\n+    case OMP_LIST_REDUCTION_TASK:\n+      break;\n+    case OMP_LIST_IN_REDUCTION:\n+      clause = OMP_CLAUSE_IN_REDUCTION;\n+      break;\n+    case OMP_LIST_TASK_REDUCTION:\n+      clause = OMP_CLAUSE_TASK_REDUCTION;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n   for (; namelist != NULL; namelist = namelist->next)\n     if (namelist->sym->attr.referenced)\n       {\n \ttree t = gfc_trans_omp_variable (namelist->sym, false);\n \tif (t != error_mark_node)\n \t  {\n \t    tree node = build_omp_clause (gfc_get_location (&namelist->where),\n-\t\t\t\t\t  OMP_CLAUSE_REDUCTION);\n+\t\t\t\t\t  clause);\n \t    OMP_CLAUSE_DECL (node) = t;\n \t    if (mark_addressable)\n \t      TREE_ADDRESSABLE (t) = 1;\n+\t    if (kind == OMP_LIST_REDUCTION_INSCAN)\n+\t      OMP_CLAUSE_REDUCTION_INSCAN (node) = 1;\n+\t    if (kind == OMP_LIST_REDUCTION_TASK)\n+\t      OMP_CLAUSE_REDUCTION_TASK (node) = 1;\n \t    switch (namelist->u.reduction_op)\n \t      {\n \t      case OMP_REDUCTION_PLUS:\n@@ -2267,10 +2291,14 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n       switch (list)\n \t{\n \tcase OMP_LIST_REDUCTION:\n+\tcase OMP_LIST_REDUCTION_INSCAN:\n+\tcase OMP_LIST_REDUCTION_TASK:\n+\tcase OMP_LIST_IN_REDUCTION:\n+\tcase OMP_LIST_TASK_REDUCTION:\n \t  /* An OpenACC async clause indicates the need to set reduction\n \t     arguments addressable, to allow asynchronous copy-out.  */\n-\t  omp_clauses = gfc_trans_omp_reduction_list (n, omp_clauses, where,\n-\t\t\t\t\t\t      clauses->async);\n+\t  omp_clauses = gfc_trans_omp_reduction_list (list, n, omp_clauses,\n+\t\t\t\t\t\t      where, clauses->async);\n \t  break;\n \tcase OMP_LIST_PRIVATE:\n \t  clause_code = OMP_CLAUSE_PRIVATE;\n@@ -5207,18 +5235,27 @@ gfc_split_omp_clauses (gfc_code *code,\n       /* Reduction is allowed on simd, do, parallel and teams.\n \t Duplicate it on all of them, but omit on do if\n \t parallel is present.  */\n-      if (mask & GFC_OMP_MASK_TEAMS)\n-\tclausesa[GFC_OMP_SPLIT_TEAMS].lists[OMP_LIST_REDUCTION]\n-\t  = code->ext.omp_clauses->lists[OMP_LIST_REDUCTION];\n-      if (mask & GFC_OMP_MASK_PARALLEL)\n-\tclausesa[GFC_OMP_SPLIT_PARALLEL].lists[OMP_LIST_REDUCTION]\n-\t  = code->ext.omp_clauses->lists[OMP_LIST_REDUCTION];\n-      else if (mask & GFC_OMP_MASK_DO)\n-\tclausesa[GFC_OMP_SPLIT_DO].lists[OMP_LIST_REDUCTION]\n-\t  = code->ext.omp_clauses->lists[OMP_LIST_REDUCTION];\n-      if (mask & GFC_OMP_MASK_SIMD)\n-\tclausesa[GFC_OMP_SPLIT_SIMD].lists[OMP_LIST_REDUCTION]\n-\t  = code->ext.omp_clauses->lists[OMP_LIST_REDUCTION];\n+      for (int i = OMP_LIST_REDUCTION; i <= OMP_LIST_REDUCTION_TASK; i++)\n+\t{\n+\t  if (mask & GFC_OMP_MASK_TEAMS)\n+\t    clausesa[GFC_OMP_SPLIT_TEAMS].lists[i]\n+\t      = code->ext.omp_clauses->lists[i];\n+\t  if (mask & GFC_OMP_MASK_PARALLEL)\n+\t    clausesa[GFC_OMP_SPLIT_PARALLEL].lists[i]\n+\t      = code->ext.omp_clauses->lists[i];\n+\t  else if (mask & GFC_OMP_MASK_DO)\n+\t    clausesa[GFC_OMP_SPLIT_DO].lists[i]\n+\t      = code->ext.omp_clauses->lists[i];\n+\t  if (mask & GFC_OMP_MASK_SIMD)\n+\t    clausesa[GFC_OMP_SPLIT_SIMD].lists[i]\n+\t      = code->ext.omp_clauses->lists[i];\n+\t}\n+      if (mask & GFC_OMP_MASK_TARGET)\n+\tclausesa[GFC_OMP_SPLIT_TARGET].lists[OMP_LIST_IN_REDUCTION]\n+\t  = code->ext.omp_clauses->lists[OMP_LIST_IN_REDUCTION];\n+      if (mask & GFC_OMP_MASK_TASKLOOP)\n+\tclausesa[GFC_OMP_SPLIT_TASKLOOP].lists[OMP_LIST_IN_REDUCTION]\n+\t  = code->ext.omp_clauses->lists[OMP_LIST_IN_REDUCTION];\n       /* Linear clause is supported on do and simd,\n \t put it on the innermost one.  */\n       clausesa[innermost].lists[OMP_LIST_LINEAR]"}, {"sha": "d18c43e3e0fe2648a722f18bea8f3afb45897fd8", "filename": "gcc/gimplify.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -8672,7 +8672,8 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t\t{\n \t\t  error_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t    \"invalid %<task%> reduction modifier on construct \"\n-\t\t\t    \"other than %<parallel%>, %<for%> or %<sections%>\");\n+\t\t\t    \"other than %<parallel%>, %qs or %<sections%>\",\n+\t\t\t    lang_GNU_Fortran () ? \"do\" : \"for\");\n \t\t  OMP_CLAUSE_REDUCTION_TASK (c) = 0;\n \t\t}\n \t    }\n@@ -12703,7 +12704,8 @@ gimplify_omp_loop (tree *expr_p, gimple_seq *pre_p)\n \t  {\n \t    error_at (OMP_CLAUSE_LOCATION (*pc),\n \t\t      \"invalid %<task%> reduction modifier on construct \"\n-\t\t      \"other than %<parallel%>, %<for%> or %<sections%>\");\n+\t\t      \"other than %<parallel%>, %qs or %<sections%>\",\n+\t\t      lang_GNU_Fortran () ? \"do\" : \"for\");\n \t    OMP_CLAUSE_REDUCTION_TASK (*pc) = 0;\n \t  }\n \tpc = &OMP_CLAUSE_CHAIN (*pc);"}, {"sha": "83ca5fc23e0471da5a5776c0871203e5726c0732", "filename": "gcc/omp-low.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -2937,7 +2937,8 @@ check_omp_nesting_restrictions (gimple *stmt, omp_context *ctx)\n \t\t    {\n \t\t      error_at (gimple_location (stmt),\n \t\t\t\t\"%<ordered simd threads%> must be closely \"\n-\t\t\t\t\"nested inside of %<for simd%> region\");\n+\t\t\t\t\"nested inside of %<%s simd%> region\",\n+\t\t\t\tlang_GNU_Fortran () ? \"do\" : \"for\");\n \t\t      return false;\n \t\t    }\n \t\t  return true;"}, {"sha": "af8c91b2a87c78397264e91d3fd230277d9b347e", "filename": "gcc/testsuite/gfortran.dg/gomp/reduction4.f90", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Freduction4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Freduction4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Freduction4.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,171 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-fdump-tree-original\" }\n+!\n+! (in_)reduction clause\n+! Test all in-principle valid combinations, even if\n+! not valid in this context (some fail at ME level)\n+!\n+implicit none\n+integer :: a, b, i\n+a = 0\n+\n+! ------------ parallel ------------\n+!$omp parallel reduction(+:a)\n+do i=1,10\n+  a = a + 1\n+end do\n+!$omp end parallel\n+\n+!$omp parallel reduction(default,+:a)\n+do i=1,10\n+  a = a + 1\n+end do\n+!$omp end parallel\n+\n+!$omp parallel reduction(task,+:a)\n+do i=1,10\n+  a = a + 1\n+end do\n+!$omp end parallel\n+\n+!$omp parallel reduction(inscan,+:a)  ! { dg-error \"'inscan' 'reduction' clause on 'parallel' construct\" }\n+do i=1,10\n+  a = a + 1\n+end do\n+!$omp end parallel\n+\n+! ------------ simd ------------\n+!$omp simd reduction(+:a)\n+do i=1,10\n+  a = a + 1\n+end do\n+\n+!$omp simd reduction(default,+:a)\n+do i=1,10\n+  a = a + 1\n+end do\n+\n+!$omp simd reduction(task,+:a)  ! { dg-error \"invalid 'task' reduction modifier on construct other than 'parallel', 'do' or 'sections'\" }\n+do i=1,10\n+  a = a + 1\n+end do\n+\n+!$omp simd reduction(inscan,+:a)  ! { dg-error \"'inscan' 'reduction' clause but not in 'scan' directive clause\" }\n+do i=1,10\n+  a = a + 1\n+end do\n+\n+! ------------ do ------------\n+!$omp parallel\n+!$omp do reduction(+:a)\n+do i=1,10\n+  a = a + 1\n+end do\n+!$omp end parallel\n+\n+!$omp parallel\n+!$omp do reduction(default,+:a)\n+do i=1,10\n+  a = a + 1\n+end do\n+!$omp end parallel\n+\n+!$omp parallel\n+!$omp do reduction(task,+:a)\n+do i=1,10\n+  a = a + 1\n+end do\n+!$omp end parallel\n+\n+!$omp parallel\n+!$omp do reduction(inscan,+:a)  ! { dg-error \"'a' specified in 'inscan' 'reduction' clause but not in 'scan' directive clause\" }\n+do i=1,10\n+  a = a + 1\n+end do\n+!$omp end parallel\n+\n+! ------------ section ------------\n+!$omp parallel\n+!$omp sections reduction(+:a)\n+  !$omp section\n+  a = a + 1\n+!$omp end sections\n+!$omp end parallel\n+\n+!$omp parallel\n+!$omp sections reduction(default,+:a)\n+  !$omp section\n+  a = a + 1\n+!$omp end sections\n+!$omp end parallel\n+\n+!$omp parallel\n+!$omp sections reduction(task,+:a)\n+  !$omp section\n+  a = a + 1\n+!$omp end sections\n+!$omp end parallel\n+\n+!$omp parallel\n+!$omp sections reduction(inscan,+:a)  ! { dg-error \"'inscan' 'reduction' clause on 'sections' construct\" }\n+  !$omp section\n+  a = a + 1\n+!$omp end sections\n+!$omp end parallel\n+\n+! ------------ task ------------\n+!$omp task in_reduction(+:a)\n+  a = a + 1\n+!$omp end task\n+\n+! ------------ taskloop ------------\n+!$omp taskloop reduction(+:a) in_reduction(+:b)\n+do i=1,10\n+  a = a + 1\n+end do\n+\n+!$omp taskloop reduction(default,+:a) in_reduction(+:b)\n+do i=1,10\n+  a = a + 1\n+end do\n+\n+! ------------ target ------------\n+!$omp target in_reduction(+:b)\n+  a = a + 1\n+!$omp end target\n+\n+! ------------ teams ------------\n+!$omp teams reduction(+:b)\n+  a = a + 1\n+!$omp end teams\n+\n+!$omp teams reduction(default, +:b)\n+  a = a + 1\n+!$omp end teams\n+\n+! ------------ taskgroup --------\n+\n+!$omp taskgroup task_reduction(+:b)\n+  a = a + 1\n+!$omp end taskgroup\n+\n+end\n+\n+! { dg-final { scan-tree-dump-times \"#pragma omp for reduction\\\\(\\\\\\+:a\\\\)\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp for reduction\\\\(inscan,\\\\\\+:a\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp for reduction\\\\(task,\\\\\\+:a\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp parallel\\[\\n\\r\\]\" 8 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp parallel private\\\\(i\\\\) reduction\\\\(\\\\\\+:a\\\\)\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp parallel private\\\\(i\\\\) reduction\\\\(inscan,\\\\\\+:a\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp parallel private\\\\(i\\\\) reduction\\\\(task,\\\\\\+:a\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp section\\[\\n\\r\\]\" 4 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp sections reduction\\\\(\\\\\\+:a\\\\)\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp sections reduction\\\\(inscan,\\\\\\+:a\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp sections reduction\\\\(task,\\\\\\+:a\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp simd linear\\\\(i:1\\\\) reduction\\\\(\\\\\\+:a\\\\)\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp simd linear\\\\(i:1\\\\) reduction\\\\(inscan,\\\\\\+:a\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp simd linear\\\\(i:1\\\\) reduction\\\\(task,\\\\\\+:a\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp target in_reduction\\\\(\\\\\\+:b\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task in_reduction\\\\(\\\\\\+:a\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp teams reduction\\\\(\\\\\\+:b\\\\)\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp taskloop reduction\\\\(\\\\\\+:a\\\\) in_reduction\\\\(\\\\\\+:b\\\\)\" 2 \"original\" } }"}, {"sha": "df915f1cad44c2a0d4b279e7f5212e2ca63cbf17", "filename": "gcc/testsuite/gfortran.dg/gomp/reduction5.f90", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Freduction5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Freduction5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Freduction5.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,41 @@\n+! { dg-do compile }\n+!\n+implicit none\n+integer :: a, b, i\n+a = 0\n+\n+!$omp parallel reduction(foo,+:a)  ! { dg-error \"26: Failed to match clause\" }\n+do i=1,10\n+  a = a + 1\n+end do\n+!$omp end parallel  ! { dg-error \"Unexpected !.OMP END PARALLEL statement\" }\n+\n+!$omp parallel reduction(task +:a) ! { dg-error \"30: Comma expected at\" }\n+do i=1,10\n+  a = a + 1\n+end do\n+!$omp end parallel  ! { dg-error \"Unexpected !.OMP END PARALLEL statement\" }\n+\n+!$omp task in_reduction(foo,+:a)  ! { dg-error \"25: Failed to match clause\" }\n+  a = a + 1\n+!$omp end task  ! { dg-error \"Unexpected !.OMP END TASK statement\" }\n+\n+!$omp taskloop reduction(inscan,+:a) in_reduction(+:b) ! { dg-error \"34: Only DEFAULT permitted as reduction-modifier in REDUCTION clause\" }\n+do i=1,10\n+  a = a + 1\n+end do\n+\n+!$omp taskloop reduction(task,+:a) in_reduction(+:b) ! { dg-error \"32: Only DEFAULT permitted as reduction-modifier in REDUCTION clause\" }\n+do i=1,10\n+  a = a + 1\n+end do\n+\n+!$omp teams reduction(inscan,+:b) ! { dg-error \"31: Only DEFAULT permitted as reduction-modifier in REDUCTION clause\" }\n+  a = a + 1\n+!$omp end teams\n+\n+!$omp teams reduction(task, +:b) ! { dg-error \"30: Only DEFAULT permitted as reduction-modifier in REDUCTION clause\" }\n+  a = a + 1\n+!$omp end teams\n+\n+end"}, {"sha": "537fba23c11199c8f926f165a23d3cea3faaa0b3", "filename": "gcc/testsuite/gfortran.dg/gomp/schedule-modifiers-2.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fschedule-modifiers-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fschedule-modifiers-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fschedule-modifiers-2.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -3,16 +3,16 @@\n \n subroutine foo\n   integer :: i\n-  !$omp do schedule (nonmonotonic: static, 2)\t! { dg-error \"NONMONOTONIC modifier specified for STATIC schedule kind\" }\n+  !$omp do schedule (nonmonotonic: static, 2)\n   do i = 0, 64\n   end do\n-  !$omp do schedule (nonmonotonic : static)\t! { dg-error \"NONMONOTONIC modifier specified for STATIC schedule kind\" }\n+  !$omp do schedule (nonmonotonic : static)\n   do i = 0, 64\n   end do\n-  !$omp do schedule (nonmonotonic : runtime)\t! { dg-error \"NONMONOTONIC modifier specified for RUNTIME schedule kind\" }\n+  !$omp do schedule (nonmonotonic : runtime)\n   do i = 0, 64\n   end do\n-  !$omp do schedule (nonmonotonic : auto)\t! { dg-error \"NONMONOTONIC modifier specified for AUTO schedule kind\" }\n+  !$omp do schedule (nonmonotonic : auto)\n   do i = 0, 64\n   end do\n   !$omp do schedule (nonmonotonic : dynamic) ordered\t! { dg-error \"NONMONOTONIC schedule modifier specified with ORDERED clause\" }"}, {"sha": "3e639d2e74b7cea7a0d89652a2c1d37894662de6", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-1.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-1.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, 0, 0, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_maybe_nonmonotonic_runtime_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer :: j\n+  interface\n+    subroutine bar(i)\n+      integer :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer :: a, b ,c\n+  integer :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (runtime)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "e71ac3f41a7b18830580bf283b13467ac28a2c17", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-10.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-10.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop\\[^\\n\\r]*_next \" \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer :: j\n+  interface\n+    subroutine bar(i)\n+      integer :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer :: a, b ,c\n+  integer :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (nonmonotonic: static, 2)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "94202200ca1045c65b4ccd1e4cb173d5be54bfe5", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-11.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-11.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, 2, 1, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_nonmonotonic_dynamic_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer :: j\n+  interface\n+    subroutine bar(i)\n+      integer :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer :: a, b ,c\n+  integer :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (dynamic)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "66c6eb1cae057d8bc0460309f4232bf51d2b7a58", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-12.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-12.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483650|-2147483646), 1, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_dynamic_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer :: j\n+  interface\n+    subroutine bar(i)\n+      integer :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer :: a, b ,c\n+  integer :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (monotonic: dynamic)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "89782d299fd494d0ea9ba6b51c9d8a4d42c098f6", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-13.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-13.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-13.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-13.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, 2, 1, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_nonmonotonic_dynamic_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer :: j\n+  interface\n+    subroutine bar(i)\n+      integer :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer :: a, b ,c\n+  integer :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (nonmonotonic: dynamic)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "16b3e01b8911501f2b6170fddc33f24a6cac6dc8", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-14.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-14.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-14.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-14.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, 2, 3, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_nonmonotonic_dynamic_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer :: j\n+  interface\n+    subroutine bar(i)\n+      integer :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer :: a, b ,c\n+  integer :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (dynamic, 3)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "8bf126c5ea708d3d99c072fcf51b38223774e9f1", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-15.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-15.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483650|-2147483646), 3, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_dynamic_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer :: j\n+  interface\n+    subroutine bar(i)\n+      integer :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer :: a, b ,c\n+  integer :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (monotonic: dynamic, 3)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "fe8d1ae2124dc163adf497477c2955b972c913a9", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-16.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-16.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-16.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-16.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, 2, 3, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_nonmonotonic_dynamic_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer :: j\n+  interface\n+    subroutine bar(i)\n+      integer :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer :: a, b ,c\n+  integer :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (nonmonotonic: dynamic, 3)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "1f2823dd72443eedd60bd1a3c918894d15f1685c", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-17.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-17.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-17.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-17.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, 3, 1, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_nonmonotonic_guided_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer :: j\n+  interface\n+    subroutine bar(i)\n+      integer :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer :: a, b ,c\n+  integer :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (guided)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "ad0856a6fe78b167e64872b62551c57dd17e4f7b", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-18.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-18.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-18.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-18.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483651|-2147483645), 1, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } \n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_guided_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer :: j\n+  interface\n+    subroutine bar(i)\n+      integer :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer :: a, b ,c\n+  integer :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (monotonic: guided)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "e884dbf037ce8dfe9ff44a7331b10fc4b532b876", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-19.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-19.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-19.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-19.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, 3, 1, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_nonmonotonic_guided_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer :: j\n+  interface\n+    subroutine bar(i)\n+      integer :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer :: a, b ,c\n+  integer :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (nonmonotonic: guided)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "2f78c0be4b39ac7bc170bf82e8b7c337d4e63a11", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-2.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-2.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483648|-2147483648), 0, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_runtime_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer :: j\n+  interface\n+    subroutine bar(i)\n+      integer :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer :: a, b ,c\n+  integer :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (monotonic: runtime)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "8a4d6dfe4dfdabd0b39c3cb826b75dce8271bc97", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-20.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-20.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-20.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-20.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, 3, 3, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_nonmonotonic_guided_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer :: j\n+  interface\n+    subroutine bar(i)\n+      integer :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer :: a, b ,c\n+  integer :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (guided, 3)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "2d9362b751fafaaf1ef7d3b6c248770a9a1b1f5b", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-21.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-21.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-21.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-21.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483651|-2147483645), 3, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_guided_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer :: j\n+  interface\n+    subroutine bar(i)\n+      integer :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer :: a, b ,c\n+  integer :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (monotonic: guided, 3)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "485171fd481a75b0b608a1a0918feb8e90226142", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-22.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-22.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-22.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-22.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, 3, 3, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_nonmonotonic_guided_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer :: j\n+  interface\n+    subroutine bar(i)\n+      integer :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer :: a, b ,c\n+  integer :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (nonmonotonic: guided, 3)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "45dc0002b920b540101f5c3a6148d1ad00fbdaed", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-23.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-23.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-23.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-23.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop\\[^\\n\\r]*_next \" \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer :: j\n+  interface\n+    subroutine bar(i)\n+      integer :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer :: a, b ,c\n+  integer :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (auto)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "e7fbe922f3e90ae0d72903aeb1d61cf1f97764ec", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-24.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-24.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-24.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-24.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop\\[^\\n\\r]*_next \" \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer :: j\n+  interface\n+    subroutine bar(i)\n+      integer :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer :: a, b ,c\n+  integer :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (monotonic: auto)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "d5554c49962bc7f54adab9e13571bcd88a143574", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-25.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-25.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-25.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-25.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop\\[^\\n\\r]*_next \" \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer :: j\n+  interface\n+    subroutine bar(i)\n+      integer :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer :: a, b ,c\n+  integer :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (nonmonotonic: auto)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "282679029147014bf62929a6f85fdc15b1321ab0", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-26.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-26.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-26.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-26.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, 0, 0, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_maybe_nonmonotonic_runtime_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer(8) :: j\n+  interface\n+    subroutine bar(i)\n+      integer(8) :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer(8) :: a, b ,c\n+  integer(8) :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (runtime)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "2ee047d4e8cacbb2b9b4504b749c7737b93e7e74", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-27.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-27.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-27.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-27.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483648|-2147483648), 0, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_runtime_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer(8) :: j\n+  interface\n+    subroutine bar(i)\n+      integer(8) :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer(8) :: a, b ,c\n+  integer(8) :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (monotonic: runtime)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "6c9d49be13ca7da8e9362cfa4e55082ebb87c80b", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-28.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-28.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-28.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-28.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, 4, 0, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_nonmonotonic_runtime_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer(8) :: j\n+  interface\n+    subroutine bar(i)\n+      integer(8) :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer(8) :: a, b ,c\n+  integer(8) :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (nonmonotonic: runtime)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "316b72e1d2e5f0f05438e3323267f12db680802a", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-29.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-29.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-29.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-29.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop_ull\\[^\\n\\r]*_next \" \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer(8) :: j\n+  interface\n+    subroutine bar(i)\n+      integer(8) :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer(8) :: a, b ,c\n+  integer(8) :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "6c9d49be13ca7da8e9362cfa4e55082ebb87c80b", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-3.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-3.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, 4, 0, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_nonmonotonic_runtime_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer(8) :: j\n+  interface\n+    subroutine bar(i)\n+      integer(8) :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer(8) :: a, b ,c\n+  integer(8) :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (nonmonotonic: runtime)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "b9406d6b236831838d9b30496c9d4a079cbe81a1", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-30.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-30.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-30.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-30.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop_ull\\[^\\n\\r]*_next \" \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer(8) :: j\n+  interface\n+    subroutine bar(i)\n+      integer(8) :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer(8) :: a, b ,c\n+  integer(8) :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (static)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "4a246045c1b6438bf9a01d9376f7728f02aa1611", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-31.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-31.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-31.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-31.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop_ull\\[^\\n\\r]*_next \" \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer(8) :: j\n+  interface\n+    subroutine bar(i)\n+      integer(8) :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer(8) :: a, b ,c\n+  integer(8) :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (monotonic: static)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "a7062d9eaae2cd263483a2382f2d8a8b32926a27", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-32.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-32.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-32.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-32.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop_ull\\[^\\n\\r]*_next \" \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer(8) :: j\n+  interface\n+    subroutine bar(i)\n+      integer(8) :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer(8) :: a, b ,c\n+  integer(8) :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (nonmonotonic: static)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "67c25c82dddd86880fb8ccb6f3e87abf598bb400", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-33.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-33.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-33.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-33.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop_ull\\[^\\n\\r]*_next \" \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer(8) :: j\n+  interface\n+    subroutine bar(i)\n+      integer(8) :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer(8) :: a, b ,c\n+  integer(8) :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (static, 2)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "f1e4d89adbb93e66b8d6af0ffca5b7ef05245bb0", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-34.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-34.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-34.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-34.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop_ull\\[^\\n\\r]*_next \" \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer(8) :: j\n+  interface\n+    subroutine bar(i)\n+      integer(8) :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer(8) :: a, b ,c\n+  integer(8) :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (monotonic: static, 2)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "7d7c27118ba41648a594a0d288fd1031a213aeac", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-35.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-35.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-35.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-35.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop_ull\\[^\\n\\r]*_next \" \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer(8) :: j\n+  interface\n+    subroutine bar(i)\n+      integer(8) :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer(8) :: a, b ,c\n+  integer(8) :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (nonmonotonic: static, 2)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "b190e9ee87bf2256b6e06caa7ee41ad7abd16041", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-36.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-36.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-36.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-36.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, 2, 1, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_nonmonotonic_dynamic_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer(8) :: j\n+  interface\n+    subroutine bar(i)\n+      integer(8) :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer(8) :: a, b ,c\n+  integer(8) :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (dynamic)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "c541d22d6cf8c8e08257957ae4828e83eecc60bc", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-37.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-37.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-37.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-37.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483650|-2147483646), 1, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_dynamic_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer(8) :: j\n+  interface\n+    subroutine bar(i)\n+      integer(8) :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer(8) :: a, b ,c\n+  integer(8) :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (monotonic: dynamic)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "46a27a0386cbce55490b2f96c48bc3e95aeb2a11", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-38.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-38.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-38.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-38.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, 2, 1, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_nonmonotonic_dynamic_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer(8) :: j\n+  interface\n+    subroutine bar(i)\n+      integer(8) :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer(8) :: a, b ,c\n+  integer(8) :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (nonmonotonic: dynamic)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "6cdd9a8807bf1ab529179053eb2fe0a3d58a7920", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-39.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-39.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-39.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-39.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, 2, 3, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_nonmonotonic_dynamic_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer(8) :: j\n+  interface\n+    subroutine bar(i)\n+      integer(8) :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer(8) :: a, b ,c\n+  integer(8) :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (dynamic, 3)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "c7744277bc8951c20149a70599f34385b07efc79", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-4.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-4.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop\\[^\\n\\r]*_next \" \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer :: j\n+  interface\n+    subroutine bar(i)\n+      integer :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer :: a, b ,c\n+  integer :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "29da27abc5ac552c759fcb8dcdb2430df92facf0", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-40.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-40.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-40.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-40.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483650|-2147483646), 3, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_dynamic_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer(8) :: j\n+  interface\n+    subroutine bar(i)\n+      integer(8) :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer(8) :: a, b ,c\n+  integer(8) :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (monotonic: dynamic, 3)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "4ed879cdd00c17ec09464451e79a3c99462571ba", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-41.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-41.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-41.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-41.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, 2, 3, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_nonmonotonic_dynamic_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer(8) :: j\n+  interface\n+    subroutine bar(i)\n+      integer(8) :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer(8) :: a, b ,c\n+  integer(8) :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (nonmonotonic: dynamic, 3)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "78d02ef80351410fd3509ce433a3c40a469bf3c3", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-42.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-42.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-42.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-42.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, 3, 1, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_nonmonotonic_guided_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer(8) :: j\n+  interface\n+    subroutine bar(i)\n+      integer(8) :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer(8) :: a, b ,c\n+  integer(8) :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (guided)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "16885c8421050d0f10dce5bbab1546afede9bc3f", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-43.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-43.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-43.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-43.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483651|-2147483645), 1, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_guided_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer(8) :: j\n+  interface\n+    subroutine bar(i)\n+      integer(8) :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer(8) :: a, b ,c\n+  integer(8) :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (monotonic: guided)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "0db9be6854c9587e4261f4d71785c1fe2ecbbc5c", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-44.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-44.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-44.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-44.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, 3, 1, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_nonmonotonic_guided_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer(8) :: j\n+  interface\n+    subroutine bar(i)\n+      integer(8) :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer(8) :: a, b ,c\n+  integer(8) :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (nonmonotonic: guided)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "40b127554142ee9d29656f944f597d8058280e8b", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-45.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-45.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-45.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-45.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, 3, 3, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_nonmonotonic_guided_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer(8) :: j\n+  interface\n+    subroutine bar(i)\n+      integer(8) :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer(8) :: a, b ,c\n+  integer(8) :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (guided, 3)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "57c74023d8d8f8d2f76f5359a459b4018d486d82", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-46.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-46.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-46.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-46.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483651|-2147483645), 3, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_guided_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer(8) :: j\n+  interface\n+    subroutine bar(i)\n+      integer(8) :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer(8) :: a, b ,c\n+  integer(8) :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (monotonic: guided, 3)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "b4564300b50a9fc3e65556b0e91aea16d8891620", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-47.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-47.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-47.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-47.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, 3, 3, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_nonmonotonic_guided_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer(8) :: j\n+  interface\n+    subroutine bar(i)\n+      integer(8) :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer(8) :: a, b ,c\n+  integer(8) :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (nonmonotonic: guided, 3)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "1370010ac60f23c76266d7e1067c18f6aac69bc2", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-48.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-48.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-48.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-48.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop_ull\\[^\\n\\r]*_next \" \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer(8) :: j\n+  interface\n+    subroutine bar(i)\n+      integer(8) :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer(8) :: a, b ,c\n+  integer(8) :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (auto)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "ab2591f3acfae3227d65e323666e28c38b1d33a3", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-49.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-49.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-49.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-49.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop_ull\\[^\\n\\r]*_next \" \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer(8) :: j\n+  interface\n+    subroutine bar(i)\n+      integer(8) :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer(8) :: a, b ,c\n+  integer(8) :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (monotonic: auto)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "ce3db0fa90336877e69db2b4e4ff8adb601a6a74", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-5.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-5.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop\\[^\\n\\r]*_next \" \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer :: j\n+  interface\n+    subroutine bar(i)\n+      integer :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer :: a, b ,c\n+  integer :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (static)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "8b8942709a5a643f2f022613da3930d80a3117e5", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-50.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-50.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-50.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-50.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop_ull\\[^\\n\\r]*_next \" \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer(8) :: j\n+  interface\n+    subroutine bar(i)\n+      integer(8) :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer(8) :: a, b ,c\n+  integer(8) :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (nonmonotonic: auto)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "13bde3aabebe0c0885297b4a529b08514c4eafc4", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-51.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-51.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-51.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-51.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ordered_start \\[^\\n\\r]*, (?:2147483648|-2147483648), 0, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_ordered_start \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_ordered_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ordered_runtime_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer :: j\n+  interface\n+    subroutine bar(i)\n+      integer :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer :: a, b ,c\n+  integer :: i\n+  !$omp parallel\n+  !$omp do ordered reduction (task, *: j) schedule (runtime)\n+  do i = a, b, c\n+    call bar (j)\n+    !$omp ordered\n+    j = j + 1\n+    !$omp end ordered\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "50dce3dccf98bdc774a718fd56f23057b9d14f3e", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-52.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-52.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-52.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-52.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ordered_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_ordered_start \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_ordered_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ordered_static_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer :: j\n+  interface\n+    subroutine bar(i)\n+      integer :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer :: a, b ,c\n+  integer :: i\n+  !$omp parallel\n+  !$omp do ordered reduction (task, *: j)\n+  do i = a, b, c\n+    call bar (j)\n+    !$omp ordered\n+    j = j + 1\n+    !$omp end ordered\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "018420946cbcdd61c7eb2cdcb62405d12ef2170d", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-53.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-53.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-53.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-53.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ordered_start \\[^\\n\\r]*, (?:2147483650|-2147483646), 4, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_ordered_start \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_ordered_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ordered_dynamic_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer :: j\n+  interface\n+    subroutine bar(i)\n+      integer :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer :: a, b ,c\n+  integer :: i\n+  !$omp parallel\n+  !$omp do ordered reduction (task, *: j) schedule (dynamic, 4)\n+  do i = a, b, c\n+    call bar (j)\n+    !$omp ordered\n+    j = j + 1\n+    !$omp end ordered\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "0681e43863c99bd00bb1eeaf356f773a7054a747", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-54.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-54.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-54.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-54.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ordered_start \\[^\\n\\r]*, (?:2147483651|-2147483645), 6, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_ordered_start \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_ordered_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ordered_guided_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer :: j\n+  interface\n+    subroutine bar(i)\n+      integer :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer :: a, b ,c\n+  integer :: i\n+  !$omp parallel\n+  !$omp do ordered reduction (task, *: j) schedule (guided, 6)\n+  do i = a, b, c\n+    call bar (j)\n+    !$omp ordered\n+    j = j + 1\n+    !$omp end ordered\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "4d2e1e509ef46296d3f58691b3aa726a41fd8c07", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-55.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-55.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-55.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-55.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_doacross_start \\[^\\n\\r]*, (?:2147483648|-2147483648), 0, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_doacross_post \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_doacross_wait \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_runtime_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer :: j\n+  interface\n+    subroutine bar(i)\n+      integer :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer :: a, b ,c\n+  integer :: i\n+  !$omp parallel\n+  !$omp do ordered(1) reduction (task, *: j) schedule (runtime)\n+  do i = a, b, c\n+    call bar (j)\n+    !$omp ordered depend(sink: i - 1)\n+    j = j + 1\n+    !$omp ordered depend(source)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "dc5ddafa0e5365c7dffdf4be30bf93262bcdd412", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-56.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-56.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-56.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-56.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_doacross_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_doacross_post \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_doacross_wait \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_static_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer(8) :: j\n+  interface\n+    subroutine bar(i)\n+      integer(8) :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer(8) :: a, b ,c\n+  integer(8) :: i\n+  !$omp parallel\n+  !$omp do ordered(1) reduction (task, *: j)\n+  do i = a, b, c\n+    call bar (j)\n+    !$omp ordered depend(sink: i - 1)\n+    j = j + 1\n+    !$omp ordered depend(source)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "80424882d2c578eca37f63cf12ef172a81af8d09", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-57.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-57.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-57.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-57.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_doacross_start \\[^\\n\\r]*, (?:2147483650|-2147483646), 1, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_doacross_post \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_doacross_wait \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_dynamic_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer(8) :: j\n+  interface\n+    subroutine bar(i)\n+      integer(8) :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer(8) :: a, b ,c\n+  integer(8) :: i\n+  !$omp parallel\n+  !$omp do ordered(1) reduction (task, *: j) schedule (dynamic)\n+  do i = a, b, c\n+    call bar (j)\n+    !$omp ordered depend(sink: i - 1)\n+    j = j + 1\n+    !$omp ordered depend(source)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "ae4f8bc5ef8f3a7729225c51a132bd8d3155b5ba", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-58.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-58.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-58.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-58.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_doacross_start \\[^\\n\\r]*, (?:2147483651|-2147483645), 1, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_doacross_post \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_doacross_wait \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_guided_next \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer :: j\n+  interface\n+    subroutine bar(i)\n+      integer :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer :: a, b ,c\n+  integer :: i\n+  !$omp parallel\n+  !$omp do ordered(1) reduction (task, *: j) schedule (guided)\n+  do i = a, b, c\n+    call bar (j)\n+    !$omp ordered depend(sink: i - 1)\n+    j = j + 1\n+    !$omp ordered depend(source)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "147f14a2a35b7ddf875a613f43c95e42a7742620", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-6.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-6.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop\\[^\\n\\r]*_next \" \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer :: j\n+  interface\n+    subroutine bar(i)\n+      integer :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer :: a, b ,c\n+  integer :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (monotonic: static)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "dc99a7512ced1f82864db9977b4708d382d94565", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-7.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-7.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop\\[^\\n\\r]*_next \" \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer :: j\n+  interface\n+    subroutine bar(i)\n+      integer :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer :: a, b ,c\n+  integer :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (nonmonotonic: static)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "9d0a1ce95f907df2c5acb1c462c18b475ea69daa", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-8.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-8.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop\\[^\\n\\r]*_next \" \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer :: j\n+  interface\n+    subroutine bar(i)\n+      integer :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer :: a, b ,c\n+  integer :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (static, 2)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}, {"sha": "c61374613be075cfa64def6ecb59d3405623718d", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare-reduction-9.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e929ef532ad52cde873dfc0849907b020ffc5afd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare-reduction-9.f90?ref=e929ef532ad52cde873dfc0849907b020ffc5afd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop\\[^\\n\\r]*_next \" \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } }\n+\n+module m\n+  implicit none (type, external)\n+  integer :: j\n+  interface\n+    subroutine bar(i)\n+      integer :: i\n+    end subroutine\n+  end interface\n+end module m\n+\n+subroutine foo(a, b, c)\n+  use m\n+  implicit none (type, external)\n+  integer :: a, b ,c\n+  integer :: i\n+  !$omp parallel\n+  !$omp do reduction (task, *: j) schedule (monotonic: static, 2)\n+  do i = a, b, c\n+    j = j + 1\n+    call bar (j)\n+  end do\n+  !$omp end parallel\n+end"}]}