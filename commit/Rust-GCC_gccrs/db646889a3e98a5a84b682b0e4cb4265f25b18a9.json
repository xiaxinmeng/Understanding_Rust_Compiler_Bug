{"sha": "db646889a3e98a5a84b682b0e4cb4265f25b18a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI2NDY4ODlhM2U5OGE1YTg0YjY4MmIwZTRjYjQyNjVmMjViMThhOQ==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2015-09-13T16:53:59Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-09-13T16:53:59Z"}, "message": "var-tracking.c: remove typedef of shared_hash\n\ngcc/ChangeLog:\n\n2015-09-13  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* var-tracking.c (shared_hash_def): Rename to shared_hash.\n\t(shared_hash): Remove typedef.\n\t(struct dataflow_set): Adjust.\n\t(shared_hash_unshare): Likewise.\n\t(dataflow_set_merge): Likewise.\n\t(vt_initialize): Likewise.\n\t(vt_finalize): Likewise.\n\nFrom-SVN: r227721", "tree": {"sha": "008fe3ff47b6c9b40e3513f68dd42ded47e27ebf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/008fe3ff47b6c9b40e3513f68dd42ded47e27ebf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db646889a3e98a5a84b682b0e4cb4265f25b18a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db646889a3e98a5a84b682b0e4cb4265f25b18a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db646889a3e98a5a84b682b0e4cb4265f25b18a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db646889a3e98a5a84b682b0e4cb4265f25b18a9/comments", "author": null, "committer": null, "parents": [{"sha": "9975741b27426b78b51adcbe8395c26ae0ad8690", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9975741b27426b78b51adcbe8395c26ae0ad8690", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9975741b27426b78b51adcbe8395c26ae0ad8690"}], "stats": {"total": 66, "additions": 38, "deletions": 28}, "files": [{"sha": "031717dd9a00a1106059178d81f4a9d645e0874f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db646889a3e98a5a84b682b0e4cb4265f25b18a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db646889a3e98a5a84b682b0e4cb4265f25b18a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db646889a3e98a5a84b682b0e4cb4265f25b18a9", "patch": "@@ -1,3 +1,13 @@\n+2015-09-13  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* var-tracking.c (shared_hash_def): Rename to shared_hash.\n+\t(shared_hash): Remove typedef.\n+\t(struct dataflow_set): Adjust.\n+\t(shared_hash_unshare): Likewise.\n+\t(dataflow_set_merge): Likewise.\n+\t(vt_initialize): Likewise.\n+\t(vt_finalize): Likewise.\n+\n 2015-09-13  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* var-tracking.c (struct location_chain): Rename from"}, {"sha": "126feee064ede3ce7b0330c0e78c5bcce0ce40d6", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db646889a3e98a5a84b682b0e4cb4265f25b18a9/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db646889a3e98a5a84b682b0e4cb4265f25b18a9/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=db646889a3e98a5a84b682b0e4cb4265f25b18a9", "patch": "@@ -525,14 +525,14 @@ struct emit_note_data\n \n /* Structure holding a refcounted hash table.  If refcount > 1,\n    it must be first unshared before modified.  */\n-typedef struct shared_hash_def\n+struct shared_hash\n {\n   /* Reference count.  */\n   int refcount;\n \n   /* Actual hash table.  */\n   variable_table_type *htab;\n-} *shared_hash;\n+};\n \n /* Structure holding the IN or OUT set for a basic block.  */\n struct dataflow_set\n@@ -544,10 +544,10 @@ struct dataflow_set\n   attrs regs[FIRST_PSEUDO_REGISTER];\n \n   /* Variable locations.  */\n-  shared_hash vars;\n+  shared_hash *vars;\n \n   /* Vars that is being traversed.  */\n-  shared_hash traversed_vars;\n+  shared_hash *traversed_vars;\n };\n \n /* The structure (one for each basic block) containing the information\n@@ -593,8 +593,8 @@ static object_allocator<location_chain> location_chain_pool\n   (\"location_chain pool\", 1024);\n \n /* Alloc pool for struct shared_hash_def.  */\n-static object_allocator<shared_hash_def> shared_hash_def_pool\n-  (\"shared_hash_def pool\", 256);\n+static object_allocator<shared_hash> shared_hash_pool\n+  (\"shared_hash pool\", 256);\n \n /* Alloc pool for struct loc_exp_dep_s for NOT_ONEPART variables.  */\n object_allocator<loc_exp_dep> loc_exp_dep_pool (\"loc_exp_dep pool\", 64);\n@@ -611,7 +611,7 @@ static bool emit_notes;\n static variable_table_type *dropped_values;\n \n /* Empty shared hashtable.  */\n-static shared_hash empty_shared_hash;\n+static shared_hash *empty_shared_hash;\n \n /* Scratch register bitmap used by cselib_expand_value_rtx.  */\n static bitmap scratch_regs = NULL;\n@@ -1571,23 +1571,23 @@ attrs_list_mpdv_union (attrs *dstp, attrs src, attrs src2)\n /* Return true if VARS is shared.  */\n \n static inline bool\n-shared_hash_shared (shared_hash vars)\n+shared_hash_shared (shared_hash *vars)\n {\n   return vars->refcount > 1;\n }\n \n /* Return the hash table for VARS.  */\n \n static inline variable_table_type *\n-shared_hash_htab (shared_hash vars)\n+shared_hash_htab (shared_hash *vars)\n {\n   return vars->htab;\n }\n \n /* Return true if VAR is shared, or maybe because VARS is shared.  */\n \n static inline bool\n-shared_var_p (variable var, shared_hash vars)\n+shared_var_p (variable var, shared_hash *vars)\n {\n   /* Don't count an entry in the changed_variables table as a duplicate.  */\n   return ((var->refcount > 1 + (int) var->in_changed_variables)\n@@ -1596,10 +1596,10 @@ shared_var_p (variable var, shared_hash vars)\n \n /* Copy variables into a new hash table.  */\n \n-static shared_hash\n-shared_hash_unshare (shared_hash vars)\n+static shared_hash *\n+shared_hash_unshare (shared_hash *vars)\n {\n-  shared_hash new_vars = new shared_hash_def;\n+  shared_hash *new_vars = new shared_hash;\n   gcc_assert (vars->refcount > 1);\n   new_vars->refcount = 1;\n   new_vars->htab = new variable_table_type (vars->htab->elements () + 3);\n@@ -1610,8 +1610,8 @@ shared_hash_unshare (shared_hash vars)\n \n /* Increment reference counter on VARS and return it.  */\n \n-static inline shared_hash\n-shared_hash_copy (shared_hash vars)\n+static inline shared_hash *\n+shared_hash_copy (shared_hash *vars)\n {\n   vars->refcount++;\n   return vars;\n@@ -1621,7 +1621,7 @@ shared_hash_copy (shared_hash vars)\n    anymore.  */\n \n static void\n-shared_hash_destroy (shared_hash vars)\n+shared_hash_destroy (shared_hash *vars)\n {\n   gcc_checking_assert (vars->refcount > 0);\n   if (--vars->refcount == 0)\n@@ -1635,7 +1635,7 @@ shared_hash_destroy (shared_hash vars)\n    INSERT, insert it if not already present.  */\n \n static inline variable_def **\n-shared_hash_find_slot_unshare_1 (shared_hash *pvars, decl_or_value dv,\n+shared_hash_find_slot_unshare_1 (shared_hash **pvars, decl_or_value dv,\n \t\t\t\t hashval_t dvhash, enum insert_option ins)\n {\n   if (shared_hash_shared (*pvars))\n@@ -1644,7 +1644,7 @@ shared_hash_find_slot_unshare_1 (shared_hash *pvars, decl_or_value dv,\n }\n \n static inline variable_def **\n-shared_hash_find_slot_unshare (shared_hash *pvars, decl_or_value dv,\n+shared_hash_find_slot_unshare (shared_hash **pvars, decl_or_value dv,\n \t\t\t       enum insert_option ins)\n {\n   return shared_hash_find_slot_unshare_1 (pvars, dv, dv_htab_hash (dv), ins);\n@@ -1655,30 +1655,30 @@ shared_hash_find_slot_unshare (shared_hash *pvars, decl_or_value dv,\n    return NULL.  */\n \n static inline variable_def **\n-shared_hash_find_slot_1 (shared_hash vars, decl_or_value dv, hashval_t dvhash)\n+shared_hash_find_slot_1 (shared_hash *vars, decl_or_value dv, hashval_t dvhash)\n {\n   return shared_hash_htab (vars)->find_slot_with_hash (dv, dvhash,\n \t\t\t\t\t\t       shared_hash_shared (vars)\n \t\t\t\t\t\t       ? NO_INSERT : INSERT);\n }\n \n static inline variable_def **\n-shared_hash_find_slot (shared_hash vars, decl_or_value dv)\n+shared_hash_find_slot (shared_hash *vars, decl_or_value dv)\n {\n   return shared_hash_find_slot_1 (vars, dv, dv_htab_hash (dv));\n }\n \n /* Return slot for DV only if it is already present in the hash table.  */\n \n static inline variable_def **\n-shared_hash_find_slot_noinsert_1 (shared_hash vars, decl_or_value dv,\n+shared_hash_find_slot_noinsert_1 (shared_hash *vars, decl_or_value dv,\n \t\t\t\t  hashval_t dvhash)\n {\n   return shared_hash_htab (vars)->find_slot_with_hash (dv, dvhash, NO_INSERT);\n }\n \n static inline variable_def **\n-shared_hash_find_slot_noinsert (shared_hash vars, decl_or_value dv)\n+shared_hash_find_slot_noinsert (shared_hash *vars, decl_or_value dv)\n {\n   return shared_hash_find_slot_noinsert_1 (vars, dv, dv_htab_hash (dv));\n }\n@@ -1687,13 +1687,13 @@ shared_hash_find_slot_noinsert (shared_hash vars, decl_or_value dv)\n    table.  */\n \n static inline variable\n-shared_hash_find_1 (shared_hash vars, decl_or_value dv, hashval_t dvhash)\n+shared_hash_find_1 (shared_hash *vars, decl_or_value dv, hashval_t dvhash)\n {\n   return shared_hash_htab (vars)->find_with_hash (dv, dvhash);\n }\n \n static inline variable\n-shared_hash_find (shared_hash vars, decl_or_value dv)\n+shared_hash_find (shared_hash *vars, decl_or_value dv)\n {\n   return shared_hash_find_1 (vars, dv, dv_htab_hash (dv));\n }\n@@ -4226,7 +4226,7 @@ dataflow_set_merge (dataflow_set *dst, dataflow_set *src2)\n   dataflow_set_init (dst);\n   dst->stack_adjust = cur.stack_adjust;\n   shared_hash_destroy (dst->vars);\n-  dst->vars = new shared_hash_def;\n+  dst->vars = new shared_hash;\n   dst->vars->refcount = 1;\n   dst->vars->htab = new variable_table_type (MAX (src1_elems, src2_elems));\n \n@@ -8946,7 +8946,7 @@ process_changed_values (variable_table_type *htab)\n \n static void\n emit_notes_for_changes (rtx_insn *insn, enum emit_note_where where,\n-\t\t\tshared_hash vars)\n+\t\t\tshared_hash *vars)\n {\n   emit_note_data data;\n   variable_table_type *htab = shared_hash_htab (vars);\n@@ -9859,7 +9859,7 @@ vt_initialize (void)\n \n   alloc_aux_for_blocks (sizeof (struct variable_tracking_info_def));\n \n-  empty_shared_hash = new shared_hash_def;\n+  empty_shared_hash = new shared_hash;\n   empty_shared_hash->refcount = 1;\n   empty_shared_hash->htab = new variable_table_type (1);\n   changed_variables = new variable_table_type (10);\n@@ -10220,7 +10220,7 @@ vt_finalize (void)\n   attrs_def_pool.release ();\n   var_pool.release ();\n   location_chain_pool.release ();\n-  shared_hash_def_pool.release ();\n+  shared_hash_pool.release ();\n \n   if (MAY_HAVE_DEBUG_INSNS)\n     {"}]}