{"sha": "444ca59fa44336fbfe4744c9870bf1dd0a75093f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ0Y2E1OWZhNDQzMzZmYmZlNDc0NGM5ODcwYmYxZGQwYTc1MDkzZg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-11-13T14:08:09Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-11-13T14:08:09Z"}, "message": "c-parse.in (c99_block_start, [...]): New.\n\n\t* c-parse.in (c99_block_start, c99_block_end,\n\tc99_block_lineno_labeled_stmt): New.\n\t(simple_if, do_stmt_start): Use c99_block_lineno_labeled_stmt.\n\t(stmt): Split off selection and iteration statements into...\n\t(select_or_iter_stmt): New.  Use c99_block_lineno_labeled_stmt.\n\ntestsuite:\n\t* gcc.dg/c99-scope-1.c: Remove xfail.\n\t* gcc.dg/c99-scope-2.c: New test.\n\nFrom-SVN: r37427", "tree": {"sha": "813f582e01755dc24b3956ee33ab7b1309e45624", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/813f582e01755dc24b3956ee33ab7b1309e45624"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/444ca59fa44336fbfe4744c9870bf1dd0a75093f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/444ca59fa44336fbfe4744c9870bf1dd0a75093f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/444ca59fa44336fbfe4744c9870bf1dd0a75093f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/444ca59fa44336fbfe4744c9870bf1dd0a75093f/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2ecb02d79f0d5df0d602c33562e3b9eec5085b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2ecb02d79f0d5df0d602c33562e3b9eec5085b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2ecb02d79f0d5df0d602c33562e3b9eec5085b7"}], "stats": {"total": 162, "additions": 147, "deletions": 15}, "files": [{"sha": "6d026b153e1ba51af3bfc8946d12d3de6f88eea2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/444ca59fa44336fbfe4744c9870bf1dd0a75093f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/444ca59fa44336fbfe4744c9870bf1dd0a75093f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=444ca59fa44336fbfe4744c9870bf1dd0a75093f", "patch": "@@ -1,3 +1,11 @@\n+2000-11-13  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-parse.in (c99_block_start, c99_block_end,\n+\tc99_block_lineno_labeled_stmt): New.\n+\t(simple_if, do_stmt_start): Use c99_block_lineno_labeled_stmt.\n+\t(stmt): Split off selection and iteration statements into...\n+\t(select_or_iter_stmt): New.  Use c99_block_lineno_labeled_stmt.\n+\n 2000-11-13  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* invoke.texi (-Wtrigraphs, -fdump-translation-unit, -save-temps,"}, {"sha": "bbce2caa199c232580fa0ded300e2521f106acbf", "filename": "gcc/c-parse.in", "status": "modified", "additions": 62, "deletions": 14, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/444ca59fa44336fbfe4744c9870bf1dd0a75093f/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/444ca59fa44336fbfe4744c9870bf1dd0a75093f/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=444ca59fa44336fbfe4744c9870bf1dd0a75093f", "patch": "@@ -176,6 +176,7 @@ end ifc\n %type <ttype> compstmt compstmt_start compstmt_nostart compstmt_primary_start\n %type <ttype> do_stmt_start poplevel\n \n+%type <ttype> c99_block_start c99_block_end\n %type <ttype> declarator\n %type <ttype> notype_declarator after_type_declarator\n %type <ttype> parm_declarator\n@@ -1623,6 +1624,40 @@ end ifobjc\n poplevel:  /* empty */\n                 { $$ = add_scope_stmt (/*begin_p=*/0, /*partial_p=*/0); }\n \n+/* Start and end blocks created for the new scopes of C99.  */\n+c99_block_start: /* empty */\n+\t\t{ if (flag_isoc99)\n+\t\t    {\n+\t\t      $$ = c_begin_compound_stmt ();\n+\t\t      pushlevel (0);\n+\t\t      clear_last_expr ();\n+\t\t      add_scope_stmt (/*begin_p=*/1, /*partial_p=*/0);\n+ifobjc\n+\t\t      if (objc_method_context)\n+\t\t\tadd_objc_decls ();\n+end ifobjc\n+\t\t    }\n+\t\t  else\n+\t\t    $$ = NULL_TREE;\n+\t\t}\n+\t;\n+\n+/* Productions using c99_block_start and c99_block_end will need to do what's\n+   in compstmt: RECHAIN_STMTS ($1, COMPOUND_BODY ($1)); $$ = $2; where\n+   $1 is the value of c99_block_start and $2 of c99_block_end.  */\n+c99_block_end: /* empty */\n+                { if (flag_isoc99)\n+\t\t    {\n+\t\t      tree scope_stmt = add_scope_stmt (/*begin_p=*/0, /*partial_p=*/0);\n+\t\t      $$ = poplevel (kept_level_p (), 0, 0); \n+\t\t      SCOPE_STMT_BLOCK (TREE_PURPOSE (scope_stmt)) \n+\t\t\t= SCOPE_STMT_BLOCK (TREE_VALUE (scope_stmt))\n+\t\t\t= $$;\n+\t\t    }\n+\t\t  else\n+\t\t    $$ = NULL_TREE; }\n+\t;\n+\n /* Read zero or more forward-declarations for labels\n    that nested functions can jump to.  */\n maybe_label_decls:\n@@ -1703,7 +1738,7 @@ compstmt: compstmt_start compstmt_nostart\n \n /* Value is number of statements counted as of the closeparen.  */\n simple_if:\n-\t  if_prefix lineno_labeled_stmt\n+\t  if_prefix c99_block_lineno_labeled_stmt\n                 { c_finish_then (); }\n /* Make sure c_expand_end_cond is run once\n    for each call to c_expand_start_cond.\n@@ -1735,7 +1770,7 @@ do_stmt_start:\n \t\t     condition now.  Otherwise, we can get crashes at\n \t\t     RTL-generation time.  */\n \t\t  DO_COND ($<ttype>$) = error_mark_node; }\n-\t  lineno_labeled_stmt WHILE\n+\t  c99_block_lineno_labeled_stmt WHILE\n \t\t{ $$ = $<ttype>2;\n \t\t  RECHAIN_STMTS ($$, DO_BODY ($$)); }\n \t;\n@@ -1765,6 +1800,13 @@ lineno_labeled_stmt:\n \t\t{ }\n \t;\n \n+/* Like lineno_labeled_stmt, but a block in C99.  */\n+c99_block_lineno_labeled_stmt:\n+\t  c99_block_start lineno_labeled_stmt c99_block_end\n+\t\t{ if (flag_isoc99)\n+\t\t    RECHAIN_STMTS ($1, COMPOUND_BODY ($1)); }\n+\t;\n+\n lineno_stmt_or_label:\n \t  save_filename save_lineno stmt_or_label\n \t\t{ $$ = $3; }\n@@ -1777,17 +1819,11 @@ stmt_or_label:\n \t\t{ $$ = 1; }\n \t;\n \n-/* Parse a single real statement, not including any labels.  */\n-stmt:\n-\t  compstmt\n-\t\t{ stmt_count++; }\n-\t| expr ';'\n-\t\t{ stmt_count++;\n-\t\t  c_expand_expr_stmt ($1); }\n-\t| simple_if ELSE\n+select_or_iter_stmt:\n+\t  simple_if ELSE\n \t\t{ c_expand_start_else ();\n \t\t  $<itype>1 = stmt_count; }\n-\t  lineno_labeled_stmt\n+\t  c99_block_lineno_labeled_stmt\n                 { c_finish_else ();\n \t\t  c_expand_end_cond ();\n \t\t  if (extra_warnings && stmt_count == $<itype>1)\n@@ -1812,7 +1848,7 @@ stmt:\n                 { $4 = truthvalue_conversion ($4);\n \t\t  $<ttype>$ \n \t\t    = add_stmt (build_stmt (WHILE_STMT, $4, NULL_TREE)); }\n-\t  lineno_labeled_stmt\n+\t  c99_block_lineno_labeled_stmt\n \t\t{ RECHAIN_STMTS ($<ttype>6, WHILE_BODY ($<ttype>6)); }\n \t| do_stmt_start\n \t  '(' expr ')' ';'\n@@ -1831,13 +1867,25 @@ stmt:\n                 { FOR_COND ($<ttype>5) = $6; }\n \t  xexpr ')'\n \t\t{ FOR_EXPR ($<ttype>5) = $9; }\n-\t  lineno_labeled_stmt\n+\t  c99_block_lineno_labeled_stmt\n                 { RECHAIN_STMTS ($<ttype>5, FOR_BODY ($<ttype>5)); }\n \t| SWITCH '(' expr ')'\n \t\t{ stmt_count++;\n \t\t  $<ttype>$ = c_start_case ($3); }\n-\t  lineno_labeled_stmt\n+\t  c99_block_lineno_labeled_stmt\n                 { c_finish_case (); }\n+\t;\n+\n+/* Parse a single real statement, not including any labels.  */\n+stmt:\n+\t  compstmt\n+\t\t{ stmt_count++; }\n+\t| expr ';'\n+\t\t{ stmt_count++;\n+\t\t  c_expand_expr_stmt ($1); }\n+\t| c99_block_start select_or_iter_stmt c99_block_end\n+\t\t{ if (flag_isoc99)\n+\t\t    RECHAIN_STMTS ($1, COMPOUND_BODY ($1)); }\n \t| BREAK ';'\n \t        { stmt_count++;\n \t\t  add_stmt (build_break_stmt ()); }"}, {"sha": "cf20ec6adbd782db0357cb3d657d8310fa4c2af3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/444ca59fa44336fbfe4744c9870bf1dd0a75093f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/444ca59fa44336fbfe4744c9870bf1dd0a75093f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=444ca59fa44336fbfe4744c9870bf1dd0a75093f", "patch": "@@ -1,3 +1,8 @@\n+2000-11-13  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/c99-scope-1.c: Remove xfail.\n+\t* gcc.dg/c99-scope-2.c: New test.\n+\n 2000-11-12  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.c-torture/execute/string-opt-3.c: Also test builtin rindex."}, {"sha": "48ea3b088f70c9d87e9b9e9e8074d90605795303", "filename": "gcc/testsuite/gcc.dg/c99-scope-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/444ca59fa44336fbfe4744c9870bf1dd0a75093f/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-scope-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/444ca59fa44336fbfe4744c9870bf1dd0a75093f/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-scope-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-scope-1.c?ref=444ca59fa44336fbfe4744c9870bf1dd0a75093f", "patch": "@@ -1,6 +1,6 @@\n /* Test for new block scopes in C99.  Inspired by C99 Rationale (N897).  */\n /* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n-/* { dg-do run { xfail *-*-* } } */\n+/* { dg-do run } */\n /* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n \n struct foo {"}, {"sha": "5b81f700414a467ea5a2d14a7ba2a01e6fa611cb", "filename": "gcc/testsuite/gcc.dg/c99-scope-2.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/444ca59fa44336fbfe4744c9870bf1dd0a75093f/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-scope-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/444ca59fa44336fbfe4744c9870bf1dd0a75093f/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-scope-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-scope-2.c?ref=444ca59fa44336fbfe4744c9870bf1dd0a75093f", "patch": "@@ -0,0 +1,71 @@\n+/* Test for new block scopes in C99.  Test for each new scope.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do run } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main (void)\n+{\n+  struct foo { int i0; };\n+  int a, b, c, d;\n+  a = sizeof (struct foo);\n+  if (b = sizeof (struct foo { int i0; int i1; }))\n+    c = sizeof (struct foo { int i0; int i1; int i2; });\n+  if (!(a < b && b < c))\n+    abort ();\n+  if ((b = sizeof (struct foo { int i0; int i1; })), 0)\n+    c = sizeof (struct foo { int i0; int i1; int i2; });\n+  else\n+    d = sizeof (struct foo { int i0; int i1; int i2; int i3; });\n+  if (!(a < b && b < d))\n+    abort ();\n+  switch (b = sizeof (struct foo { int i0; int i1; }))\n+    default:\n+      c = sizeof (struct foo { int i0; int i1; int i2; });\n+  if (!(a < b && b < c))\n+    abort ();\n+  do\n+    c = sizeof (struct foo { int i0; int i1; int i2; });\n+  while ((b = sizeof (struct foo { int i0; int i1; })), 0);\n+  if (!(a < b && b < c))\n+    abort ();\n+  d = 1;\n+  while ((b = sizeof (struct foo { int i0; int i1; })), d)\n+    (c = sizeof (struct foo { int i0; int i1; int i2; })), d--;\n+  if (!(a < b && b < c))\n+    abort ();\n+  d = 1;\n+  for ((b = sizeof (struct foo { int i0; int i1; })); d; d--)\n+    c = sizeof (struct foo { int i0; int i1; int i2; });\n+  if (!(a < b && b < c))\n+    abort ();\n+  d = 1;\n+  for ((b = sizeof (struct foo { int i0; int i1; })); d; d--)\n+    c = sizeof (struct foo);\n+  if (!(a < b && b == c))\n+    abort ();\n+  d = 1;\n+  for (; (b = sizeof (struct foo { int i0; int i1; })), d; d--)\n+    c = sizeof (struct foo { int i0; int i1; int i2; });\n+  if (!(a < b && b < c))\n+    abort ();\n+  d = 1;\n+  for (; (b = sizeof (struct foo { int i0; int i1; })), d; d--)\n+    c = sizeof (struct foo);\n+  if (!(a < b && b == c))\n+    abort ();\n+  d = 1;\n+  for (; d; (b = sizeof (struct foo { int i0; int i1; })), d--)\n+    c = sizeof (struct foo { int i0; int i1; int i2; });\n+  if (!(a < b && b < c))\n+    abort ();\n+  d = 1;\n+  for (; d; (b = sizeof (struct foo { int i0; int i1; })), d--)\n+    c = sizeof (struct foo);\n+  if (!(a < b && b == c))\n+    abort ();\n+  exit (0);\n+}"}]}