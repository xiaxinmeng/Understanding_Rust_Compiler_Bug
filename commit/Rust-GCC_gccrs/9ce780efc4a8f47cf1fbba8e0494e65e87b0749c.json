{"sha": "9ce780efc4a8f47cf1fbba8e0494e65e87b0749c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNlNzgwZWZjNGE4ZjQ3Y2YxZmJiYThlMDQ5NGU2NWU4N2IwNzQ5Yw==", "commit": {"author": {"name": "Andre Simoes Dias Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2020-04-07T14:06:37Z"}, "committer": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2020-04-07T14:44:51Z"}, "message": "arm: MVE: Fix v[id]wdup's\n\nThis patch fixes v[id]wdup intrinsics. They had two issues:\n1) the predicated versions did not link the incoming inactive vector parameter\nto the output\n2) The backend didn't enforce the wrap limit operand be in an odd register.\n\n1) was fixed like we did for all other predicated intrinsics\n2) requires a temporary hack where we pass the value in the top end of DImode\noperand. The proper fix would be to add a register CLASS but this interacted\nbadly with other existing targets codegen.  We will look to fix this properly in GCC 11.\n\ngcc/ChangeLog:\n2020-04-07  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* config/arm/arm_mve.h: Fix v[id]wdup intrinsics.\n\t* config/arm/mve/md: Fix v[id]wdup patterns.", "tree": {"sha": "7eeec3628a5539049a2d9eda8941a05747355d13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7eeec3628a5539049a2d9eda8941a05747355d13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ce780efc4a8f47cf1fbba8e0494e65e87b0749c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ce780efc4a8f47cf1fbba8e0494e65e87b0749c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ce780efc4a8f47cf1fbba8e0494e65e87b0749c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ce780efc4a8f47cf1fbba8e0494e65e87b0749c/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b094133c1c5bf21ccd60c344de6f4a798140e61b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b094133c1c5bf21ccd60c344de6f4a798140e61b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b094133c1c5bf21ccd60c344de6f4a798140e61b"}], "stats": {"total": 207, "additions": 125, "deletions": 82}, "files": [{"sha": "48c9c48aad6517d505bc27d6f5d8b376d591454d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce780efc4a8f47cf1fbba8e0494e65e87b0749c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce780efc4a8f47cf1fbba8e0494e65e87b0749c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ce780efc4a8f47cf1fbba8e0494e65e87b0749c", "patch": "@@ -1,3 +1,8 @@\n+2020-04-07  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/arm/arm_mve.h: Fix v[id]wdup intrinsics.\n+\t* config/arm/mve/md: Fix v[id]wdup patterns.\n+\n 2020-04-07  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/arm/arm.c (output_move_neon): Deal with label + offset cases."}, {"sha": "47eead71d9515b4103a5b66999a3f9357dc3c3be", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 97, "deletions": 60, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce780efc4a8f47cf1fbba8e0494e65e87b0749c/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce780efc4a8f47cf1fbba8e0494e65e87b0749c/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=9ce780efc4a8f47cf1fbba8e0494e65e87b0749c", "patch": "@@ -13585,95 +13585,107 @@ __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vdwdupq_m_n_u8 (uint8x16_t __inactive, uint32_t __a, uint32_t __b, const int __imm, mve_pred16_t __p)\n {\n-  return __builtin_mve_vdwdupq_m_n_uv16qi (__inactive, __a, __b, __imm, __p);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  return __builtin_mve_vdwdupq_m_n_uv16qi (__inactive, __a, __c, __imm, __p);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vdwdupq_m_n_u32 (uint32x4_t __inactive, uint32_t __a, uint32_t __b, const int __imm, mve_pred16_t __p)\n {\n-  return __builtin_mve_vdwdupq_m_n_uv4si (__inactive, __a, __b, __imm, __p);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  return __builtin_mve_vdwdupq_m_n_uv4si (__inactive, __a, __c, __imm, __p);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vdwdupq_m_n_u16 (uint16x8_t __inactive, uint32_t __a, uint32_t __b, const int __imm, mve_pred16_t __p)\n {\n-  return __builtin_mve_vdwdupq_m_n_uv8hi (__inactive, __a, __b, __imm, __p);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  return __builtin_mve_vdwdupq_m_n_uv8hi (__inactive, __a, __c, __imm, __p);\n }\n \n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vdwdupq_m_wb_u8 (uint8x16_t __inactive, uint32_t * __a, uint32_t __b, const int __imm, mve_pred16_t __p)\n {\n-  uint8x16_t __res =  __builtin_mve_vdwdupq_m_n_uv16qi (__inactive, *__a, __b, __imm, __p);\n-  *__a = __builtin_mve_vdwdupq_m_wb_uv16qi (__inactive, *__a, __b, __imm, __p);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  uint8x16_t __res =  __builtin_mve_vdwdupq_m_n_uv16qi (__inactive, *__a, __c, __imm, __p);\n+  *__a = __builtin_mve_vdwdupq_m_wb_uv16qi (__inactive, *__a, __c, __imm, __p);\n   return __res;\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vdwdupq_m_wb_u32 (uint32x4_t __inactive, uint32_t * __a, uint32_t __b, const int __imm, mve_pred16_t __p)\n {\n-  uint32x4_t __res =  __builtin_mve_vdwdupq_m_n_uv4si (__inactive, *__a, __b, __imm, __p);\n-  *__a = __builtin_mve_vdwdupq_m_wb_uv4si (__inactive, *__a, __b, __imm, __p);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  uint32x4_t __res =  __builtin_mve_vdwdupq_m_n_uv4si (__inactive, *__a, __c, __imm, __p);\n+  *__a = __builtin_mve_vdwdupq_m_wb_uv4si (__inactive, *__a, __c, __imm, __p);\n   return __res;\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vdwdupq_m_wb_u16 (uint16x8_t __inactive, uint32_t * __a, uint32_t __b, const int __imm, mve_pred16_t __p)\n {\n-  uint16x8_t __res =  __builtin_mve_vdwdupq_m_n_uv8hi (__inactive, *__a, __b, __imm, __p);\n-  *__a = __builtin_mve_vdwdupq_m_wb_uv8hi (__inactive, *__a, __b, __imm, __p);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  uint16x8_t __res =  __builtin_mve_vdwdupq_m_n_uv8hi (__inactive, *__a, __c, __imm, __p);\n+  *__a = __builtin_mve_vdwdupq_m_wb_uv8hi (__inactive, *__a, __c, __imm, __p);\n   return __res;\n }\n \n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vdwdupq_n_u8 (uint32_t __a, uint32_t __b, const int __imm)\n {\n-  return __builtin_mve_vdwdupq_n_uv16qi (__a, __b, __imm);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  return __builtin_mve_vdwdupq_n_uv16qi (__a, __c, __imm);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vdwdupq_n_u32 (uint32_t __a, uint32_t __b, const int __imm)\n {\n-  return __builtin_mve_vdwdupq_n_uv4si (__a, __b, __imm);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  return __builtin_mve_vdwdupq_n_uv4si (__a, __c, __imm);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vdwdupq_n_u16 (uint32_t __a, uint32_t __b, const int __imm)\n {\n-  return __builtin_mve_vdwdupq_n_uv8hi (__a, __b, __imm);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  return __builtin_mve_vdwdupq_n_uv8hi (__a, __c, __imm);\n }\n \n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vdwdupq_wb_u8 (uint32_t * __a, uint32_t __b, const int __imm)\n {\n-  uint8x16_t __res = __builtin_mve_vdwdupq_n_uv16qi (*__a, __b, __imm);\n-  *__a = __builtin_mve_vdwdupq_wb_uv16qi (*__a, __b, __imm);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  uint8x16_t __res = __builtin_mve_vdwdupq_n_uv16qi (*__a, __c, __imm);\n+  *__a = __builtin_mve_vdwdupq_wb_uv16qi (*__a, __c, __imm);\n   return __res;\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vdwdupq_wb_u32 (uint32_t * __a, uint32_t __b, const int __imm)\n {\n-  uint32x4_t __res = __builtin_mve_vdwdupq_n_uv4si (*__a, __b, __imm);\n-  *__a = __builtin_mve_vdwdupq_wb_uv4si (*__a, __b, __imm);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  uint32x4_t __res = __builtin_mve_vdwdupq_n_uv4si (*__a, __c, __imm);\n+  *__a = __builtin_mve_vdwdupq_wb_uv4si (*__a, __c, __imm);\n   return __res;\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vdwdupq_wb_u16 (uint32_t * __a, uint32_t __b, const int __imm)\n {\n-  uint16x8_t __res = __builtin_mve_vdwdupq_n_uv8hi (*__a, __b, __imm);\n-  *__a = __builtin_mve_vdwdupq_wb_uv8hi (*__a, __b, __imm);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  uint16x8_t __res = __builtin_mve_vdwdupq_n_uv8hi (*__a, __c, __imm);\n+  *__a = __builtin_mve_vdwdupq_wb_uv8hi (*__a, __c, __imm);\n   return __res;\n }\n \n@@ -13804,98 +13816,111 @@ __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_viwdupq_m_n_u8 (uint8x16_t __inactive, uint32_t __a, uint32_t __b, const int __imm, mve_pred16_t __p)\n {\n-  return __builtin_mve_viwdupq_m_n_uv16qi (__inactive, __a, __b, __imm, __p);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  return __builtin_mve_viwdupq_m_n_uv16qi (__inactive, __a, __c, __imm, __p);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_viwdupq_m_n_u32 (uint32x4_t __inactive, uint32_t __a, uint32_t __b, const int __imm, mve_pred16_t __p)\n {\n-  return __builtin_mve_viwdupq_m_n_uv4si (__inactive, __a, __b, __imm, __p);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  return __builtin_mve_viwdupq_m_n_uv4si (__inactive, __a, __c, __imm, __p);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_viwdupq_m_n_u16 (uint16x8_t __inactive, uint32_t __a, uint32_t __b, const int __imm, mve_pred16_t __p)\n {\n-  return __builtin_mve_viwdupq_m_n_uv8hi (__inactive, __a, __b, __imm, __p);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  return __builtin_mve_viwdupq_m_n_uv8hi (__inactive, __a, __c, __imm, __p);\n }\n \n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_viwdupq_m_wb_u8 (uint8x16_t __inactive, uint32_t * __a, uint32_t __b, const int __imm, mve_pred16_t __p)\n {\n-  uint8x16_t __res = __builtin_mve_viwdupq_m_n_uv16qi (__inactive, *__a, __b, __imm, __p);\n-  *__a =  __builtin_mve_viwdupq_m_wb_uv16qi (__inactive, *__a, __b, __imm, __p);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  uint8x16_t __res = __builtin_mve_viwdupq_m_n_uv16qi (__inactive, *__a, __c, __imm, __p);\n+  *__a =  __builtin_mve_viwdupq_m_wb_uv16qi (__inactive, *__a, __c, __imm, __p);\n   return __res;\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_viwdupq_m_wb_u32 (uint32x4_t __inactive, uint32_t * __a, uint32_t __b, const int __imm, mve_pred16_t __p)\n {\n-  uint32x4_t __res = __builtin_mve_viwdupq_m_n_uv4si (__inactive, *__a, __b, __imm, __p);\n-  *__a =  __builtin_mve_viwdupq_m_wb_uv4si (__inactive, *__a, __b, __imm, __p);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  uint32x4_t __res = __builtin_mve_viwdupq_m_n_uv4si (__inactive, *__a, __c, __imm, __p);\n+  *__a =  __builtin_mve_viwdupq_m_wb_uv4si (__inactive, *__a, __c, __imm, __p);\n   return __res;\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_viwdupq_m_wb_u16 (uint16x8_t __inactive, uint32_t * __a, uint32_t __b, const int __imm, mve_pred16_t __p)\n {\n-  uint16x8_t __res = __builtin_mve_viwdupq_m_n_uv8hi (__inactive, *__a, __b, __imm, __p);\n-  *__a =  __builtin_mve_viwdupq_m_wb_uv8hi (__inactive, *__a, __b, __imm, __p);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  uint16x8_t __res = __builtin_mve_viwdupq_m_n_uv8hi (__inactive, *__a, __c, __imm, __p);\n+  *__a =  __builtin_mve_viwdupq_m_wb_uv8hi (__inactive, *__a, __c, __imm, __p);\n   return __res;\n }\n \n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_viwdupq_n_u8 (uint32_t __a, uint32_t __b, const int __imm)\n {\n-  return __builtin_mve_viwdupq_n_uv16qi (__a, __b, __imm);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  return __builtin_mve_viwdupq_n_uv16qi (__a, __c, __imm);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_viwdupq_n_u32 (uint32_t __a, uint32_t __b, const int __imm)\n {\n-  return __builtin_mve_viwdupq_n_uv4si (__a, __b, __imm);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  return __builtin_mve_viwdupq_n_uv4si (__a, __c, __imm);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_viwdupq_n_u16 (uint32_t __a, uint32_t __b, const int __imm)\n {\n-  return __builtin_mve_viwdupq_n_uv8hi (__a, __b, __imm);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  return __builtin_mve_viwdupq_n_uv8hi (__a, __c, __imm);\n }\n \n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_viwdupq_wb_u8 (uint32_t * __a, uint32_t __b, const int __imm)\n {\n-  uint8x16_t __res = __builtin_mve_viwdupq_n_uv16qi (*__a, __b, __imm);\n-  *__a = __builtin_mve_viwdupq_wb_uv16qi (*__a, __b, __imm);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  uint8x16_t __res = __builtin_mve_viwdupq_n_uv16qi (*__a, __c, __imm);\n+  *__a = __builtin_mve_viwdupq_wb_uv16qi (*__a, __c, __imm);\n   return __res;\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_viwdupq_wb_u32 (uint32_t * __a, uint32_t __b, const int __imm)\n {\n-  uint32x4_t __res = __builtin_mve_viwdupq_n_uv4si (*__a, __b, __imm);\n-  *__a = __builtin_mve_viwdupq_wb_uv4si (*__a, __b, __imm);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  uint32x4_t __res = __builtin_mve_viwdupq_n_uv4si (*__a, __c, __imm);\n+  *__a = __builtin_mve_viwdupq_wb_uv4si (*__a, __c, __imm);\n   return __res;\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_viwdupq_wb_u16 (uint32_t * __a, uint32_t __b, const int __imm)\n {\n-  uint16x8_t __res = __builtin_mve_viwdupq_n_uv8hi (*__a, __b, __imm);\n-  *__a = __builtin_mve_viwdupq_wb_uv8hi (*__a, __b, __imm);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  uint16x8_t __res = __builtin_mve_viwdupq_n_uv8hi (*__a, __c, __imm);\n+  *__a = __builtin_mve_viwdupq_wb_uv8hi (*__a, __c, __imm);\n   return __res;\n }\n \n+\n __extension__ extern __inline int64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vldrdq_gather_base_wb_s64 (uint64x2_t * __addr, const int __offset)\n@@ -14095,50 +14120,56 @@ __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vdwdupq_x_n_u8 (uint32_t __a, uint32_t __b, const int __imm, mve_pred16_t __p)\n {\n-  return __builtin_mve_vdwdupq_m_n_uv16qi (vuninitializedq_u8 (), __a, __b, __imm, __p);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  return __builtin_mve_vdwdupq_m_n_uv16qi (__arm_vuninitializedq_u8 (), __a, __c, __imm, __p);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vdwdupq_x_n_u16 (uint32_t __a, uint32_t __b, const int __imm, mve_pred16_t __p)\n {\n-  return __builtin_mve_vdwdupq_m_n_uv8hi (vuninitializedq_u16 (), __a, __b, __imm, __p);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  return __builtin_mve_vdwdupq_m_n_uv8hi (__arm_vuninitializedq_u16 (), __a, __c, __imm, __p);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vdwdupq_x_n_u32 (uint32_t __a, uint32_t __b, const int __imm, mve_pred16_t __p)\n {\n-  return __builtin_mve_vdwdupq_m_n_uv4si (vuninitializedq_u32 (), __a, __b, __imm, __p);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  return __builtin_mve_vdwdupq_m_n_uv4si (__arm_vuninitializedq_u32 (), __a, __c, __imm, __p);\n }\n \n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vdwdupq_x_wb_u8 (uint32_t *__a, uint32_t __b, const int __imm, mve_pred16_t __p)\n {\n-  uint8x16_t __arg1 = vuninitializedq_u8 ();\n-  uint8x16_t __res = __builtin_mve_vdwdupq_m_n_uv16qi (__arg1, *__a, __b, __imm, __p);\n-  *__a = __builtin_mve_vdwdupq_m_wb_uv16qi (__arg1, *__a, __b, __imm, __p);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  uint8x16_t __arg1 = __arm_vuninitializedq_u8 ();\n+  uint8x16_t __res = __builtin_mve_vdwdupq_m_n_uv16qi (__arg1, *__a, __c, __imm, __p);\n+  *__a = __builtin_mve_vdwdupq_m_wb_uv16qi (__arg1, *__a, __c, __imm, __p);\n   return __res;\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vdwdupq_x_wb_u16 (uint32_t *__a, uint32_t __b, const int __imm, mve_pred16_t __p)\n {\n-  uint16x8_t __arg1 = vuninitializedq_u16 ();\n-  uint16x8_t __res =  __builtin_mve_vdwdupq_m_n_uv8hi (__arg1, *__a, __b, __imm, __p);\n-  *__a = __builtin_mve_vdwdupq_m_wb_uv8hi (__arg1, *__a, __b, __imm, __p);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  uint16x8_t __arg1 = __arm_vuninitializedq_u16 ();\n+  uint16x8_t __res =  __builtin_mve_vdwdupq_m_n_uv8hi (__arg1, *__a, __c, __imm, __p);\n+  *__a = __builtin_mve_vdwdupq_m_wb_uv8hi (__arg1, *__a, __c, __imm, __p);\n   return __res;\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vdwdupq_x_wb_u32 (uint32_t *__a, uint32_t __b, const int __imm, mve_pred16_t __p)\n {\n-  uint32x4_t __arg1 = vuninitializedq_u32 ();\n-  uint32x4_t __res =  __builtin_mve_vdwdupq_m_n_uv4si (__arg1, *__a, __b, __imm, __p);\n-  *__a = __builtin_mve_vdwdupq_m_wb_uv4si (__arg1, *__a, __b, __imm, __p);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  uint32x4_t __arg1 = __arm_vuninitializedq_u32 ();\n+  uint32x4_t __res =  __builtin_mve_vdwdupq_m_n_uv4si (__arg1, *__a, __c, __imm, __p);\n+  *__a = __builtin_mve_vdwdupq_m_wb_uv4si (__arg1, *__a, __c, __imm, __p);\n   return __res;\n }\n \n@@ -14197,50 +14228,56 @@ __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_viwdupq_x_n_u8 (uint32_t __a, uint32_t __b, const int __imm, mve_pred16_t __p)\n {\n-  return __builtin_mve_viwdupq_m_n_uv16qi (vuninitializedq_u8 (), __a, __b, __imm, __p);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  return __builtin_mve_viwdupq_m_n_uv16qi (__arm_vuninitializedq_u8 (), __a, __c, __imm, __p);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_viwdupq_x_n_u16 (uint32_t __a, uint32_t __b, const int __imm, mve_pred16_t __p)\n {\n-  return __builtin_mve_viwdupq_m_n_uv8hi (vuninitializedq_u16 (), __a, __b, __imm, __p);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  return __builtin_mve_viwdupq_m_n_uv8hi (__arm_vuninitializedq_u16 (), __a, __c, __imm, __p);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_viwdupq_x_n_u32 (uint32_t __a, uint32_t __b, const int __imm, mve_pred16_t __p)\n {\n-  return __builtin_mve_viwdupq_m_n_uv4si (vuninitializedq_u32 (), __a, __b, __imm, __p);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  return __builtin_mve_viwdupq_m_n_uv4si (__arm_vuninitializedq_u32 (), __a, __c, __imm, __p);\n }\n \n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_viwdupq_x_wb_u8 (uint32_t *__a, uint32_t __b, const int __imm, mve_pred16_t __p)\n {\n-  uint8x16_t __arg1 = vuninitializedq_u8 ();\n-  uint8x16_t __res = __builtin_mve_viwdupq_m_n_uv16qi (__arg1, *__a, __b, __imm, __p);\n-  *__a =  __builtin_mve_viwdupq_m_wb_uv16qi (__arg1, *__a, __b, __imm, __p);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  uint8x16_t __arg1 = __arm_vuninitializedq_u8 ();\n+  uint8x16_t __res = __builtin_mve_viwdupq_m_n_uv16qi (__arg1, *__a, __c, __imm, __p);\n+  *__a =  __builtin_mve_viwdupq_m_wb_uv16qi (__arg1, *__a, __c, __imm, __p);\n   return __res;\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_viwdupq_x_wb_u16 (uint32_t *__a, uint32_t __b, const int __imm, mve_pred16_t __p)\n {\n-  uint16x8_t __arg1 = vuninitializedq_u16 ();\n-  uint16x8_t __res = __builtin_mve_viwdupq_m_n_uv8hi (__arg1, *__a, __b, __imm, __p);\n-  *__a =  __builtin_mve_viwdupq_m_wb_uv8hi (__arg1, *__a, __b, __imm, __p);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  uint16x8_t __arg1 = __arm_vuninitializedq_u16 ();\n+  uint16x8_t __res = __builtin_mve_viwdupq_m_n_uv8hi (__arg1, *__a, __c, __imm, __p);\n+  *__a =  __builtin_mve_viwdupq_m_wb_uv8hi (__arg1, *__a, __c, __imm, __p);\n   return __res;\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_viwdupq_x_wb_u32 (uint32_t *__a, uint32_t __b, const int __imm, mve_pred16_t __p)\n {\n-  uint32x4_t __arg1 = vuninitializedq_u32 ();\n-  uint32x4_t __res = __builtin_mve_viwdupq_m_n_uv4si (__arg1, *__a, __b, __imm, __p);\n-  *__a =  __builtin_mve_viwdupq_m_wb_uv4si (__arg1, *__a, __b, __imm, __p);\n+  uint64_t __c = ((uint64_t) __b) << 32;\n+  uint32x4_t __arg1 = __arm_vuninitializedq_u32 ();\n+  uint32x4_t __res = __builtin_mve_viwdupq_m_n_uv4si (__arg1, *__a, __c, __imm, __p);\n+  *__a =  __builtin_mve_viwdupq_m_wb_uv4si (__arg1, *__a, __c, __imm, __p);\n   return __res;\n }\n "}, {"sha": "4a506cc3861534b4ddc30ba8f4f3c4ec28a8cc69", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce780efc4a8f47cf1fbba8e0494e65e87b0749c/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce780efc4a8f47cf1fbba8e0494e65e87b0749c/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=9ce780efc4a8f47cf1fbba8e0494e65e87b0749c", "patch": "@@ -9853,7 +9853,7 @@\n (define_expand \"mve_vdwdupq_n_u<mode>\"\n  [(match_operand:MVE_2 0 \"s_register_operand\")\n   (match_operand:SI 1 \"s_register_operand\")\n-  (match_operand:SI 2 \"s_register_operand\")\n+  (match_operand:DI 2 \"s_register_operand\")\n   (match_operand:SI 3 \"mve_imm_selective_upto_8\")]\n  \"TARGET_HAVE_MVE\"\n {\n@@ -9870,7 +9870,7 @@\n (define_expand \"mve_vdwdupq_wb_u<mode>\"\n  [(match_operand:SI 0 \"s_register_operand\")\n   (match_operand:SI 1 \"s_register_operand\")\n-  (match_operand:SI 2 \"s_register_operand\")\n+  (match_operand:DI 2 \"s_register_operand\")\n   (match_operand:SI 3 \"mve_imm_selective_upto_8\")\n   (unspec:MVE_2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n  \"TARGET_HAVE_MVE\"\n@@ -9888,16 +9888,16 @@\n (define_insn \"mve_vdwdupq_wb_u<mode>_insn\"\n   [(set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n \t(unspec:MVE_2 [(match_operand:SI 2 \"s_register_operand\" \"1\")\n-\t\t       (match_operand:SI 3 \"s_register_operand\" \"r\")\n+\t\t       (subreg:SI (match_operand:DI 3 \"s_register_operand\" \"r\") 4)\n \t\t       (match_operand:SI 4 \"mve_imm_selective_upto_8\" \"Rg\")]\n \t VDWDUPQ))\n    (set (match_operand:SI 1 \"s_register_operand\" \"=e\")\n \t(unspec:SI [(match_dup 2)\n-\t\t    (match_dup 3)\n+\t\t    (subreg:SI (match_dup 3) 4)\n \t\t    (match_dup 4)]\n \t VDWDUPQ))]\n   \"TARGET_HAVE_MVE\"\n-  \"vdwdup.u%#<V_sz_elem>\\t%q0, %2, %3, %4\"\n+  \"vdwdup.u%#<V_sz_elem>\\t%q0, %2, %R3, %4\"\n )\n \n ;;\n@@ -9907,7 +9907,7 @@\n  [(match_operand:MVE_2 0 \"s_register_operand\")\n   (match_operand:MVE_2 1 \"s_register_operand\")\n   (match_operand:SI 2 \"s_register_operand\")\n-  (match_operand:SI 3 \"s_register_operand\")\n+  (match_operand:DI 3 \"s_register_operand\")\n   (match_operand:SI 4 \"mve_imm_selective_upto_8\")\n   (match_operand:HI 5 \"vpr_register_operand\")]\n  \"TARGET_HAVE_MVE\"\n@@ -9927,7 +9927,7 @@\n  [(match_operand:SI 0 \"s_register_operand\")\n   (match_operand:MVE_2 1 \"s_register_operand\")\n   (match_operand:SI 2 \"s_register_operand\")\n-  (match_operand:SI 3 \"s_register_operand\")\n+  (match_operand:DI 3 \"s_register_operand\")\n   (match_operand:SI 4 \"mve_imm_selective_upto_8\")\n   (match_operand:HI 5 \"vpr_register_operand\")]\n  \"TARGET_HAVE_MVE\"\n@@ -9945,22 +9945,22 @@\n ;;\n (define_insn \"mve_vdwdupq_m_wb_u<mode>_insn\"\n   [(set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n-\t(unspec:MVE_2 [(match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 2 \"s_register_operand\" \"0\")\n \t\t       (match_operand:SI 3 \"s_register_operand\" \"1\")\n-\t\t       (match_operand:SI 4 \"s_register_operand\" \"r\")\n+\t\t       (subreg:SI (match_operand:DI 4 \"s_register_operand\" \"r\") 4)\n \t\t       (match_operand:SI 5 \"mve_imm_selective_upto_8\" \"Rg\")\n \t\t       (match_operand:HI 6 \"vpr_register_operand\" \"Up\")]\n \t VDWDUPQ_M))\n    (set (match_operand:SI 1 \"s_register_operand\" \"=e\")\n \t(unspec:SI [(match_dup 2)\n \t\t    (match_dup 3)\n-\t\t    (match_dup 4)\n+\t\t    (subreg:SI (match_dup 4) 4)\n \t\t    (match_dup 5)\n \t\t    (match_dup 6)]\n \t VDWDUPQ_M))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"vpst\\;\\tvdwdupt.u%#<V_sz_elem>\\t%q2, %3, %4, %5\"\n+  \"vpst\\;\\tvdwdupt.u%#<V_sz_elem>\\t%q2, %3, %R4, %5\"\n   [(set_attr \"type\" \"mve_move\")\n    (set_attr \"length\"\"8\")])\n \n@@ -9970,7 +9970,7 @@\n (define_expand \"mve_viwdupq_n_u<mode>\"\n  [(match_operand:MVE_2 0 \"s_register_operand\")\n   (match_operand:SI 1 \"s_register_operand\")\n-  (match_operand:SI 2 \"s_register_operand\")\n+  (match_operand:DI 2 \"s_register_operand\")\n   (match_operand:SI 3 \"mve_imm_selective_upto_8\")]\n  \"TARGET_HAVE_MVE\"\n {\n@@ -9987,7 +9987,7 @@\n (define_expand \"mve_viwdupq_wb_u<mode>\"\n  [(match_operand:SI 0 \"s_register_operand\")\n   (match_operand:SI 1 \"s_register_operand\")\n-  (match_operand:SI 2 \"s_register_operand\")\n+  (match_operand:DI 2 \"s_register_operand\")\n   (match_operand:SI 3 \"mve_imm_selective_upto_8\")\n   (unspec:MVE_2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n  \"TARGET_HAVE_MVE\"\n@@ -10005,16 +10005,16 @@\n (define_insn \"mve_viwdupq_wb_u<mode>_insn\"\n   [(set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n \t(unspec:MVE_2 [(match_operand:SI 2 \"s_register_operand\" \"1\")\n-\t\t       (match_operand:SI 3 \"s_register_operand\" \"r\")\n+\t\t       (subreg:SI (match_operand:DI 3 \"s_register_operand\" \"r\") 4)\n \t\t       (match_operand:SI 4 \"mve_imm_selective_upto_8\" \"Rg\")]\n \t VIWDUPQ))\n    (set (match_operand:SI 1 \"s_register_operand\" \"=e\")\n \t(unspec:SI [(match_dup 2)\n-\t\t    (match_dup 3)\n+\t\t    (subreg:SI (match_dup 3) 4)\n \t\t    (match_dup 4)]\n \t VIWDUPQ))]\n   \"TARGET_HAVE_MVE\"\n-  \"viwdup.u%#<V_sz_elem>\\t%q0, %2, %3, %4\"\n+  \"viwdup.u%#<V_sz_elem>\\t%q0, %2, %R3, %4\"\n )\n \n ;;\n@@ -10024,7 +10024,7 @@\n  [(match_operand:MVE_2 0 \"s_register_operand\")\n   (match_operand:MVE_2 1 \"s_register_operand\")\n   (match_operand:SI 2 \"s_register_operand\")\n-  (match_operand:SI 3 \"s_register_operand\")\n+  (match_operand:DI 3 \"s_register_operand\")\n   (match_operand:SI 4 \"mve_imm_selective_upto_8\")\n   (match_operand:HI 5 \"vpr_register_operand\")]\n  \"TARGET_HAVE_MVE\"\n@@ -10044,7 +10044,7 @@\n  [(match_operand:SI 0 \"s_register_operand\")\n   (match_operand:MVE_2 1 \"s_register_operand\")\n   (match_operand:SI 2 \"s_register_operand\")\n-  (match_operand:SI 3 \"s_register_operand\")\n+  (match_operand:DI 3 \"s_register_operand\")\n   (match_operand:SI 4 \"mve_imm_selective_upto_8\")\n   (match_operand:HI 5 \"vpr_register_operand\")]\n  \"TARGET_HAVE_MVE\"\n@@ -10062,24 +10062,25 @@\n ;;\n (define_insn \"mve_viwdupq_m_wb_u<mode>_insn\"\n   [(set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n-\t(unspec:MVE_2 [(match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 2 \"s_register_operand\" \"0\")\n \t\t       (match_operand:SI 3 \"s_register_operand\" \"1\")\n-\t\t       (match_operand:SI 4 \"s_register_operand\" \"r\")\n+\t\t       (subreg:SI (match_operand:DI 4 \"s_register_operand\" \"r\") 4)\n \t\t       (match_operand:SI 5 \"mve_imm_selective_upto_8\" \"Rg\")\n \t\t       (match_operand:HI 6 \"vpr_register_operand\" \"Up\")]\n \t VIWDUPQ_M))\n    (set (match_operand:SI 1 \"s_register_operand\" \"=e\")\n \t(unspec:SI [(match_dup 2)\n \t\t    (match_dup 3)\n-\t\t    (match_dup 4)\n+\t\t    (subreg:SI (match_dup 4) 4)\n \t\t    (match_dup 5)\n \t\t    (match_dup 6)]\n \t VIWDUPQ_M))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"vpst\\;\\tviwdupt.u%#<V_sz_elem>\\t%q2, %3, %4, %5\"\n+  \"vpst\\;\\tviwdupt.u%#<V_sz_elem>\\t%q2, %3, %R4, %5\"\n   [(set_attr \"type\" \"mve_move\")\n    (set_attr \"length\"\"8\")])\n+\n (define_expand \"mve_vstrwq_scatter_base_wb_<supf>v4si\"\n   [(match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n    (match_operand:SI 1 \"mve_vldrd_immediate\" \"Ri\")"}]}