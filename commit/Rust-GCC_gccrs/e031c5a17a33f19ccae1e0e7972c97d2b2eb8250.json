{"sha": "e031c5a17a33f19ccae1e0e7972c97d2b2eb8250", "node_id": "C_kwDOANBUbNoAKGUwMzFjNWExN2EzM2YxOWNjYWUxZTBlNzk3MmM5N2QyYjJlYjgyNTA", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-11-03T17:47:01Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-11-03T17:47:01Z"}, "message": "analyzer: use std::unique_ptr for feasibility_problems and exploded_path\n\ngcc/analyzer/ChangeLog:\n\t* diagnostic-manager.cc: Include \"make-unique.h\".\n\tUse std::unique_ptr for feasibility_problems and exploded_path.\n\tDelete explicit saved_diagnostic dtor.\n\t* diagnostic-manager.h: Likewise.\n\t* engine.cc: Likewise.\n\t* exploded-graph.h: Likewise.\n\t* feasible-graph.cc: Likewise.\n\t* feasible-graph.h: Likewise.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "d0fbbfc10c53d3123782d8fff72061e7d2c4b3ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0fbbfc10c53d3123782d8fff72061e7d2c4b3ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e031c5a17a33f19ccae1e0e7972c97d2b2eb8250", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e031c5a17a33f19ccae1e0e7972c97d2b2eb8250", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e031c5a17a33f19ccae1e0e7972c97d2b2eb8250", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e031c5a17a33f19ccae1e0e7972c97d2b2eb8250/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca5ff10546e612eff3d5e225b62b44ddf656cfbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca5ff10546e612eff3d5e225b62b44ddf656cfbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca5ff10546e612eff3d5e225b62b44ddf656cfbf"}], "stats": {"total": 90, "additions": 43, "deletions": 47}, "files": [{"sha": "0a8a2e8df8cf1915a876edf37a9c3d3b0d5bb551", "filename": "gcc/analyzer/diagnostic-manager.cc", "status": "modified", "additions": 30, "deletions": 34, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e031c5a17a33f19ccae1e0e7972c97d2b2eb8250/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e031c5a17a33f19ccae1e0e7972c97d2b2eb8250/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.cc?ref=e031c5a17a33f19ccae1e0e7972c97d2b2eb8250", "patch": "@@ -56,6 +56,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"analyzer/feasible-graph.h\"\n #include \"analyzer/checker-path.h\"\n #include \"analyzer/reachability.h\"\n+#include \"make-unique.h\"\n \n #if ENABLE_ANALYZER\n \n@@ -85,21 +86,24 @@ class epath_finder\n \n   logger *get_logger () const { return m_eg.get_logger (); }\n \n-  exploded_path *get_best_epath (const exploded_node *target_enode,\n-\t\t\t\t const char *desc, unsigned diag_idx,\n-\t\t\t\t feasibility_problem **out_problem);\n+  std::unique_ptr<exploded_path>\n+  get_best_epath (const exploded_node *target_enode,\n+\t\t  const char *desc, unsigned diag_idx,\n+\t\t  std::unique_ptr<feasibility_problem> *out_problem);\n \n private:\n   DISABLE_COPY_AND_ASSIGN(epath_finder);\n \n-  exploded_path *explore_feasible_paths (const exploded_node *target_enode,\n-\t\t\t\t\t const char *desc, unsigned diag_idx);\n-  bool process_worklist_item (feasible_worklist *worklist,\n-\t\t\t      const trimmed_graph &tg,\n-\t\t\t      feasible_graph *fg,\n-\t\t\t      const exploded_node *target_enode,\n-\t\t\t      unsigned diag_idx,\n-\t\t\t      exploded_path **out_best_path) const;\n+  std::unique_ptr<exploded_path>\n+  explore_feasible_paths (const exploded_node *target_enode,\n+\t\t\t  const char *desc, unsigned diag_idx);\n+  bool\n+  process_worklist_item (feasible_worklist *worklist,\n+\t\t\t const trimmed_graph &tg,\n+\t\t\t feasible_graph *fg,\n+\t\t\t const exploded_node *target_enode,\n+\t\t\t unsigned diag_idx,\n+\t\t\t std::unique_ptr<exploded_path> *out_best_path) const;\n   void dump_trimmed_graph (const exploded_node *target_enode,\n \t\t\t   const char *desc, unsigned diag_idx,\n \t\t\t   const trimmed_graph &tg,\n@@ -132,10 +136,10 @@ class epath_finder\n \n    Write any feasibility_problem to *OUT_PROBLEM.  */\n \n-exploded_path *\n+std::unique_ptr<exploded_path>\n epath_finder::get_best_epath (const exploded_node *enode,\n \t\t\t      const char *desc, unsigned diag_idx,\n-\t\t\t      feasibility_problem **out_problem)\n+\t\t\t      std::unique_ptr<feasibility_problem> *out_problem)\n {\n   logger *logger = get_logger ();\n   LOG_SCOPE (logger);\n@@ -156,7 +160,8 @@ epath_finder::get_best_epath (const exploded_node *enode,\n       /* Attempt to find the shortest feasible path using feasible_graph.  */\n       if (logger)\n \tlogger->log (\"trying to find shortest feasible path\");\n-      if (exploded_path *epath = explore_feasible_paths (enode, desc, diag_idx))\n+      if (std::unique_ptr<exploded_path> epath\n+\t    = explore_feasible_paths (enode, desc, diag_idx))\n \t{\n \t  if (logger)\n \t    logger->log (\"accepting %qs at EN: %i, SN: %i (sd: %i)\"\n@@ -184,8 +189,8 @@ epath_finder::get_best_epath (const exploded_node *enode,\n       if (logger)\n \tlogger->log (\"trying to find shortest path ignoring feasibility\");\n       gcc_assert (m_sep);\n-      exploded_path *epath\n-\t= new exploded_path (m_sep->get_shortest_path (enode));\n+      std::unique_ptr<exploded_path> epath\n+\t= make_unique<exploded_path> (m_sep->get_shortest_path (enode));\n       if (epath->feasible_p (logger, out_problem, m_eg.get_engine (), &m_eg))\n \t{\n \t  if (logger)\n@@ -367,7 +372,7 @@ class auto_checking_feasibility\n      continue forever without reaching the target), or\n    - getting monotonically closer to the termination threshold.  */\n \n-exploded_path *\n+std::unique_ptr<exploded_path>\n epath_finder::explore_feasible_paths (const exploded_node *target_enode,\n \t\t\t\t      const char *desc, unsigned diag_idx)\n {\n@@ -405,7 +410,7 @@ epath_finder::explore_feasible_paths (const exploded_node *target_enode,\n      a limit.  */\n \n   /* Set this if we find a feasible path to TARGET_ENODE.  */\n-  exploded_path *best_path = NULL;\n+  std::unique_ptr<exploded_path> best_path = NULL;\n \n   {\n     auto_checking_feasibility sentinel (mgr);\n@@ -447,12 +452,13 @@ epath_finder::explore_feasible_paths (const exploded_node *target_enode,\n    to TARGET_ENODE.  */\n \n bool\n-epath_finder::process_worklist_item (feasible_worklist *worklist,\n-\t\t\t\t     const trimmed_graph &tg,\n-\t\t\t\t     feasible_graph *fg,\n-\t\t\t\t     const exploded_node *target_enode,\n-\t\t\t\t     unsigned diag_idx,\n-\t\t\t\t     exploded_path **out_best_path) const\n+epath_finder::\n+process_worklist_item (feasible_worklist *worklist,\n+\t\t       const trimmed_graph &tg,\n+\t\t       feasible_graph *fg,\n+\t\t       const exploded_node *target_enode,\n+\t\t       unsigned diag_idx,\n+\t\t       std::unique_ptr<exploded_path> *out_best_path) const\n {\n   logger *logger = get_logger ();\n \n@@ -658,14 +664,6 @@ saved_diagnostic::saved_diagnostic (const state_machine *sm,\n   gcc_assert (m_enode);\n }\n \n-/* saved_diagnostic's dtor.  */\n-\n-saved_diagnostic::~saved_diagnostic ()\n-{\n-  delete m_best_epath;\n-  delete m_problem;\n-}\n-\n bool\n saved_diagnostic::operator== (const saved_diagnostic &other) const\n {\n@@ -808,8 +806,6 @@ saved_diagnostic::calc_best_epath (epath_finder *pf)\n {\n   logger *logger = pf->get_logger ();\n   LOG_SCOPE (logger);\n-  delete m_best_epath;\n-  delete m_problem;\n   m_problem = NULL;\n \n   m_best_epath = pf->get_best_epath (m_enode, m_d->get_kind (), m_idx,"}, {"sha": "4862cf472419a991f3a01c3322f9bceedf5e55c0", "filename": "gcc/analyzer/diagnostic-manager.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e031c5a17a33f19ccae1e0e7972c97d2b2eb8250/gcc%2Fanalyzer%2Fdiagnostic-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e031c5a17a33f19ccae1e0e7972c97d2b2eb8250/gcc%2Fanalyzer%2Fdiagnostic-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.h?ref=e031c5a17a33f19ccae1e0e7972c97d2b2eb8250", "patch": "@@ -38,7 +38,6 @@ class saved_diagnostic\n \t\t    state_machine::state_t state,\n \t\t    std::unique_ptr<pending_diagnostic> d,\n \t\t    unsigned idx);\n-  ~saved_diagnostic ();\n \n   bool operator== (const saved_diagnostic &other) const;\n \n@@ -51,11 +50,11 @@ class saved_diagnostic\n \n   const feasibility_problem *get_feasibility_problem () const\n   {\n-    return m_problem;\n+    return m_problem.get ();\n   }\n \n   bool calc_best_epath (epath_finder *pf);\n-  const exploded_path *get_best_epath () const { return m_best_epath; }\n+  const exploded_path *get_best_epath () const { return m_best_epath.get (); }\n   unsigned get_epath_length () const;\n \n   void add_duplicate (saved_diagnostic *other);\n@@ -83,8 +82,8 @@ class saved_diagnostic\n   DISABLE_COPY_AND_ASSIGN (saved_diagnostic);\n \n   unsigned m_idx;\n-  exploded_path *m_best_epath; // owned\n-  feasibility_problem *m_problem; // owned\n+  std::unique_ptr<exploded_path> m_best_epath;\n+  std::unique_ptr<feasibility_problem> m_problem;\n \n   auto_vec<const saved_diagnostic *> m_duplicates;\n   auto_delete_vec <pending_note> m_notes;"}, {"sha": "a727553028b5ffddbf87ea55c8ddf3f0b5861b5f", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e031c5a17a33f19ccae1e0e7972c97d2b2eb8250/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e031c5a17a33f19ccae1e0e7972c97d2b2eb8250/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=e031c5a17a33f19ccae1e0e7972c97d2b2eb8250", "patch": "@@ -4599,8 +4599,9 @@ exploded_path::get_final_enode () const\n    feasibility_problem to *OUT.  */\n \n bool\n-exploded_path::feasible_p (logger *logger, feasibility_problem **out,\n-\t\t\t    engine *eng, const exploded_graph *eg) const\n+exploded_path::feasible_p (logger *logger,\n+\t\t\t   std::unique_ptr<feasibility_problem> *out,\n+\t\t\t   engine *eng, const exploded_graph *eg) const\n {\n   LOG_SCOPE (logger);\n \n@@ -4627,8 +4628,8 @@ exploded_path::feasible_p (logger *logger, feasibility_problem **out,\n \t      const program_point &src_point = src_enode.get_point ();\n \t      const gimple *last_stmt\n \t\t= src_point.get_supernode ()->get_last_stmt ();\n-\t      *out = new feasibility_problem (edge_idx, *eedge,\n-\t\t\t\t\t      last_stmt, rc);\n+\t      *out = make_unique<feasibility_problem> (edge_idx, *eedge,\n+\t\t\t\t\t\t       last_stmt, rc);\n \t    }\n \t  else\n \t    delete rc;"}, {"sha": "6a25003cd5a29f897b332fdb65a0832d43161db2", "filename": "gcc/analyzer/exploded-graph.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e031c5a17a33f19ccae1e0e7972c97d2b2eb8250/gcc%2Fanalyzer%2Fexploded-graph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e031c5a17a33f19ccae1e0e7972c97d2b2eb8250/gcc%2Fanalyzer%2Fexploded-graph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fexploded-graph.h?ref=e031c5a17a33f19ccae1e0e7972c97d2b2eb8250", "patch": "@@ -923,7 +923,7 @@ class exploded_path\n   void dump_to_file (const char *filename,\n \t\t     const extrinsic_state &ext_state) const;\n \n-  bool feasible_p (logger *logger, feasibility_problem **out,\n+  bool feasible_p (logger *logger, std::unique_ptr<feasibility_problem> *out,\n \t\t    engine *eng, const exploded_graph *eg) const;\n \n   auto_vec<const exploded_edge *> m_edges;"}, {"sha": "7c3dcf8bbc10b4b3999d3693c569d4eb8a469b5e", "filename": "gcc/analyzer/feasible-graph.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e031c5a17a33f19ccae1e0e7972c97d2b2eb8250/gcc%2Fanalyzer%2Ffeasible-graph.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e031c5a17a33f19ccae1e0e7972c97d2b2eb8250/gcc%2Fanalyzer%2Ffeasible-graph.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Ffeasible-graph.cc?ref=e031c5a17a33f19ccae1e0e7972c97d2b2eb8250", "patch": "@@ -190,10 +190,10 @@ feasible_graph::add_feasibility_problem (feasible_node *src_fnode,\n /* Make an exploded_path from the origin to FNODE's exploded_node,\n    following the edges in the feasible_graph.  */\n \n-exploded_path *\n+std::unique_ptr<exploded_path>\n feasible_graph::make_epath (feasible_node *fnode) const\n {\n-  exploded_path *epath = new exploded_path ();\n+  std::unique_ptr<exploded_path> epath (new exploded_path ());\n \n   /* FG is actually a tree.  Built the path backwards, by walking\n      backwards from FNODE until we reach the origin.  */"}, {"sha": "9f37b08969e27a88728a6b81285d900d5aeb87ed", "filename": "gcc/analyzer/feasible-graph.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e031c5a17a33f19ccae1e0e7972c97d2b2eb8250/gcc%2Fanalyzer%2Ffeasible-graph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e031c5a17a33f19ccae1e0e7972c97d2b2eb8250/gcc%2Fanalyzer%2Ffeasible-graph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Ffeasible-graph.h?ref=e031c5a17a33f19ccae1e0e7972c97d2b2eb8250", "patch": "@@ -195,7 +195,7 @@ class feasible_graph : public digraph <fg_traits>\n \t\t\t\tconst exploded_edge *eedge,\n \t\t\t\trejected_constraint *rc);\n \n-  exploded_path *make_epath (feasible_node *fnode) const;\n+  std::unique_ptr<exploded_path> make_epath (feasible_node *fnode) const;\n \n   void dump_feasible_path (const feasible_node &dst_fnode,\n \t\t\t   const char *filename) const;"}]}