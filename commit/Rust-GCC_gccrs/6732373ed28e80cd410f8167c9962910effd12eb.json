{"sha": "6732373ed28e80cd410f8167c9962910effd12eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjczMjM3M2VkMjhlODBjZDQxMGY4MTY3Yzk5NjI5MTBlZmZkMTJlYg==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2019-03-27T16:59:15Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@gcc.gnu.org", "date": "2019-03-27T16:59:15Z"}, "message": "re PR rtl-optimization/89313 (ICE in process_alt_operands, at lra-constraints.c:2962)\n\ngcc/\n\tPR rtl-optimization/89313\n\t* function.c (matching_constraint_num): New static function.\n\t(match_asm_constraints_1): Use it.  Fixup white space and comment.\n\tDon't replace inputs with non-matching constraints which conflict\n\twith early clobber outputs.\n\ngcc/testsuite/\n\tPR rtl-optimization/89313\n\t* gcc.dg/pr89313.c: New test.\n\nFrom-SVN: r269969", "tree": {"sha": "2d46c09de4ac3186738336859dda3ab67f5ab6d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d46c09de4ac3186738336859dda3ab67f5ab6d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6732373ed28e80cd410f8167c9962910effd12eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6732373ed28e80cd410f8167c9962910effd12eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6732373ed28e80cd410f8167c9962910effd12eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6732373ed28e80cd410f8167c9962910effd12eb/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "52295c2de4adcd0f5a6ee9b5a4f57cd156182cf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52295c2de4adcd0f5a6ee9b5a4f57cd156182cf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52295c2de4adcd0f5a6ee9b5a4f57cd156182cf0"}], "stats": {"total": 87, "additions": 76, "deletions": 11}, "files": [{"sha": "132af149fe75508564a6c2900e9428111eee0121", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6732373ed28e80cd410f8167c9962910effd12eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6732373ed28e80cd410f8167c9962910effd12eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6732373ed28e80cd410f8167c9962910effd12eb", "patch": "@@ -1,3 +1,11 @@\n+2019-03-27  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR rtl-optimization/89313\n+\t* function.c (matching_constraint_num): New static function.\n+\t(match_asm_constraints_1): Use it.  Fixup white space and comment.\n+\tDon't replace inputs with non-matching constraints which conflict\n+\twith early clobber outputs.\n+\n 2019-03-27  Jeff Law  <law@redhat.com>\n \n "}, {"sha": "bf5ba3d7b73e3f3869a9961f3cc91be8fa4d8f50", "filename": "gcc/function.c", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6732373ed28e80cd410f8167c9962910effd12eb/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6732373ed28e80cd410f8167c9962910effd12eb/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=6732373ed28e80cd410f8167c9962910effd12eb", "patch": "@@ -6395,6 +6395,21 @@ make_pass_thread_prologue_and_epilogue (gcc::context *ctxt)\n }\n \f\n \n+/* If CONSTRAINT is a matching constraint, then return its number.\n+   Otherwise, return -1.  */\n+\n+static int\n+matching_constraint_num (const char *constraint)\n+{\n+  if (*constraint == '%')\n+    constraint++;\n+\n+  if (IN_RANGE (*constraint, '0', '9'))\n+    return strtoul (constraint, NULL, 10);\n+\n+  return -1;\n+}\n+\n /* This mini-pass fixes fall-out from SSA in asm statements that have\n    in-out constraints.  Say you start with\n \n@@ -6453,14 +6468,10 @@ match_asm_constraints_1 (rtx_insn *insn, rtx *p_sets, int noutputs)\n       rtx input, output;\n       rtx_insn *insns;\n       const char *constraint = ASM_OPERANDS_INPUT_CONSTRAINT (op, i);\n-      char *end;\n       int match, j;\n \n-      if (*constraint == '%')\n-\tconstraint++;\n-\n-      match = strtoul (constraint, &end, 10);\n-      if (end == constraint)\n+      match = matching_constraint_num (constraint);\n+      if (match < 0)\n \tcontinue;\n \n       gcc_assert (match < noutputs);\n@@ -6477,14 +6488,14 @@ match_asm_constraints_1 (rtx_insn *insn, rtx *p_sets, int noutputs)\n       /* We can't do anything if the output is also used as input,\n \t as we're going to overwrite it.  */\n       for (j = 0; j < ninputs; j++)\n-        if (reg_overlap_mentioned_p (output, RTVEC_ELT (inputs, j)))\n+\tif (reg_overlap_mentioned_p (output, RTVEC_ELT (inputs, j)))\n \t  break;\n       if (j != ninputs)\n \tcontinue;\n \n       /* Avoid changing the same input several times.  For\n \t asm (\"\" : \"=mr\" (out1), \"=mr\" (out2) : \"0\" (in), \"1\" (in));\n-\t only change in once (to out1), rather than changing it\n+\t only change it once (to out1), rather than changing it\n \t first to out1 and afterwards to out2.  */\n       if (i > 0)\n \t{\n@@ -6502,6 +6513,9 @@ match_asm_constraints_1 (rtx_insn *insn, rtx *p_sets, int noutputs)\n       end_sequence ();\n       emit_insn_before (insns, insn);\n \n+      constraint = ASM_OPERANDS_OUTPUT_CONSTRAINT(SET_SRC(p_sets[match]));\n+      bool early_clobber_p = strchr (constraint, '&') != NULL;\n+\n       /* Now replace all mentions of the input with output.  We can't\n \t just replace the occurrence in inputs[i], as the register might\n \t also be used in some other input (or even in an address of an\n@@ -6523,16 +6537,28 @@ match_asm_constraints_1 (rtx_insn *insn, rtx *p_sets, int noutputs)\n \t value, but different pseudos) where we formerly had only one.\n \t With more complicated asms this might lead to reload failures\n \t which wouldn't have happen without this pass.  So, iterate over\n-\t all operands and replace all occurrences of the register used.  */\n+\t all operands and replace all occurrences of the register used.\n+\n+\t However, if one or more of the 'input' uses have a non-matching\n+\t constraint and the matched output operand is an early clobber\n+\t operand, then do not replace the input operand, since by definition\n+\t it conflicts with the output operand and cannot share the same\n+\t register.  See PR89313 for details.  */\n+\n       for (j = 0; j < noutputs; j++)\n \tif (!rtx_equal_p (SET_DEST (p_sets[j]), input)\n \t    && reg_overlap_mentioned_p (input, SET_DEST (p_sets[j])))\n \t  SET_DEST (p_sets[j]) = replace_rtx (SET_DEST (p_sets[j]),\n \t\t\t\t\t      input, output);\n       for (j = 0; j < ninputs; j++)\n \tif (reg_overlap_mentioned_p (input, RTVEC_ELT (inputs, j)))\n-\t  RTVEC_ELT (inputs, j) = replace_rtx (RTVEC_ELT (inputs, j),\n-\t\t\t\t\t       input, output);\n+\t  {\n+\t    if (!early_clobber_p\n+\t\t|| match == matching_constraint_num\n+\t\t\t      (ASM_OPERANDS_INPUT_CONSTRAINT (op, j)))\n+\t      RTVEC_ELT (inputs, j) = replace_rtx (RTVEC_ELT (inputs, j),\n+\t\t\t\t\t\t   input, output);\n+\t  }\n \n       changed = true;\n     }"}, {"sha": "472b4ed7c2a31b46dcc2ca8fef764bdcf2e811ed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6732373ed28e80cd410f8167c9962910effd12eb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6732373ed28e80cd410f8167c9962910effd12eb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6732373ed28e80cd410f8167c9962910effd12eb", "patch": "@@ -1,3 +1,8 @@\n+2019-03-27  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR rtl-optimization/89313\n+\t* gcc.dg/pr89313.c: New test.\n+\n 2019-03-26  Jeff Law  <law@redhat.com>\n \n \tPR rtl-optimization/87761"}, {"sha": "6688323fbde02cd65e0337708e5447919504413e", "filename": "gcc/testsuite/gcc.dg/pr89313.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6732373ed28e80cd410f8167c9962910effd12eb/gcc%2Ftestsuite%2Fgcc.dg%2Fpr89313.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6732373ed28e80cd410f8167c9962910effd12eb/gcc%2Ftestsuite%2Fgcc.dg%2Fpr89313.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr89313.c?ref=6732373ed28e80cd410f8167c9962910effd12eb", "patch": "@@ -0,0 +1,26 @@\n+/* PR rtl-optimization/89313  */\n+/* { dg-do compile { target aarch64*-*-* arm*-*-* i?86-*-* powerpc*-*-* s390*-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2\" } */\n+\n+#if defined (__aarch64__)\n+# define REG \"x0\"\n+#elif defined (__arm__)\n+# define REG \"r0\"\n+#elif defined (__i386__)\n+# define REG \"%eax\"\n+#elif defined (__powerpc__)\n+# define REG \"r3\"\n+#elif defined (__s390__)\n+# define REG \"0\"\n+#elif defined (__x86_64__)\n+# define REG \"rax\"\n+#endif\n+\n+long\n+bug (long arg)\n+{\n+  register long output asm (REG);\n+  long input = arg;\n+  asm (\"blah %0, %1, %2\" : \"=&r\" (output) : \"r\" (input), \"0\" (input));\n+  return output;\n+}"}]}