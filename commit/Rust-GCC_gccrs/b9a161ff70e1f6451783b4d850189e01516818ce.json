{"sha": "b9a161ff70e1f6451783b4d850189e01516818ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjlhMTYxZmY3MGUxZjY0NTE3ODNiNGQ4NTAxODllMDE1MTY4MThjZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-02-13T17:42:31Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-02-13T17:42:31Z"}, "message": "PR c++/79296 - ICE mangling localized template instantiation\n\n\tPR c++/79296 - ICE mangling localized template instantiation\n\t* decl2.c (determine_visibility): Use template fn context for\n\tlocal class instantiations.\n\n\tPR c++/79296\n\t* g++.dg/cpp0x/pr79296.C: New.\n\nFrom-SVN: r245398", "tree": {"sha": "6bc93add89319b65b0867647c87fd9dee7cc527c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bc93add89319b65b0867647c87fd9dee7cc527c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9a161ff70e1f6451783b4d850189e01516818ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9a161ff70e1f6451783b4d850189e01516818ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9a161ff70e1f6451783b4d850189e01516818ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9a161ff70e1f6451783b4d850189e01516818ce/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7953a24c609aab00b163738fff12ff230fc0a5b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7953a24c609aab00b163738fff12ff230fc0a5b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7953a24c609aab00b163738fff12ff230fc0a5b5"}], "stats": {"total": 70, "additions": 50, "deletions": 20}, "files": [{"sha": "300860416ddaf63b8bb9125299575a5320f3d7d5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a161ff70e1f6451783b4d850189e01516818ce/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a161ff70e1f6451783b4d850189e01516818ce/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b9a161ff70e1f6451783b4d850189e01516818ce", "patch": "@@ -1,3 +1,9 @@\n+2017-02-13  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/79296 - ICE mangling localized template instantiation\n+\t* decl2.c (determine_visibility): Use template fn context for\n+\tlocal class instantiations.\n+\n 2017-02-11  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/77659 - ICE with new and C++14 aggregate NSDMI"}, {"sha": "d2e57ffe917aaa866fbdea4d3f8a0a5738de1540", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a161ff70e1f6451783b4d850189e01516818ce/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a161ff70e1f6451783b4d850189e01516818ce/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=b9a161ff70e1f6451783b4d850189e01516818ce", "patch": "@@ -2225,11 +2225,6 @@ constrain_visibility_for_template (tree decl, tree targs)\n void\n determine_visibility (tree decl)\n {\n-  tree class_type = NULL_TREE;\n-  bool use_template;\n-  bool orig_visibility_specified;\n-  enum symbol_visibility orig_visibility;\n-\n   /* Remember that all decls get VISIBILITY_DEFAULT when built.  */\n \n   /* Only relevant for names with external linkage.  */\n@@ -2241,25 +2236,28 @@ determine_visibility (tree decl)\n      maybe_clone_body.  */\n   gcc_assert (!DECL_CLONED_FUNCTION_P (decl));\n \n-  orig_visibility_specified = DECL_VISIBILITY_SPECIFIED (decl);\n-  orig_visibility = DECL_VISIBILITY (decl);\n+  bool orig_visibility_specified = DECL_VISIBILITY_SPECIFIED (decl);\n+  enum symbol_visibility orig_visibility = DECL_VISIBILITY (decl);\n \n+  /* The decl may be a template instantiation, which could influence\n+     visibilty.  */\n+  tree template_decl = NULL_TREE;\n   if (TREE_CODE (decl) == TYPE_DECL)\n     {\n       if (CLASS_TYPE_P (TREE_TYPE (decl)))\n-\tuse_template = CLASSTYPE_USE_TEMPLATE (TREE_TYPE (decl));\n+\t{\n+\t  if (CLASSTYPE_USE_TEMPLATE (TREE_TYPE (decl)))\n+\t    template_decl = decl;\n+\t}\n       else if (TYPE_TEMPLATE_INFO (TREE_TYPE (decl)))\n-\tuse_template = 1;\n-      else\n-\tuse_template = 0;\n+\ttemplate_decl = decl;\n     }\n-  else if (DECL_LANG_SPECIFIC (decl))\n-    use_template = DECL_USE_TEMPLATE (decl);\n-  else\n-    use_template = 0;\n+  else if (DECL_LANG_SPECIFIC (decl) && DECL_USE_TEMPLATE (decl))\n+    template_decl = decl;\n \n   /* If DECL is a member of a class, visibility specifiers on the\n      class can influence the visibility of the DECL.  */\n+  tree class_type = NULL_TREE;\n   if (DECL_CLASS_SCOPE_P (decl))\n     class_type = DECL_CONTEXT (decl);\n   else\n@@ -2302,8 +2300,11 @@ determine_visibility (tree decl)\n \t    }\n \n \t  /* Local classes in templates have CLASSTYPE_USE_TEMPLATE set,\n-\t     but have no TEMPLATE_INFO, so don't try to check it.  */\n-\t  use_template = 0;\n+\t     but have no TEMPLATE_INFO.  Their containing template\n+\t     function does, and the local class could be constrained\n+\t     by that.  */\n+\t  if (template_decl)\n+\t    template_decl = fn;\n \t}\n       else if (VAR_P (decl) && DECL_TINFO_P (decl)\n \t       && flag_visibility_ms_compat)\n@@ -2333,7 +2334,7 @@ determine_visibility (tree decl)\n \t      && !CLASSTYPE_VISIBILITY_SPECIFIED (TREE_TYPE (DECL_NAME (decl))))\n \t    targetm.cxx.determine_class_data_visibility (decl);\n \t}\n-      else if (use_template)\n+      else if (template_decl)\n \t/* Template instantiations and specializations get visibility based\n \t   on their template unless they override it with an attribute.  */;\n       else if (! DECL_VISIBILITY_SPECIFIED (decl))\n@@ -2350,11 +2351,11 @@ determine_visibility (tree decl)\n \t}\n     }\n \n-  if (use_template)\n+  if (template_decl)\n     {\n       /* If the specialization doesn't specify visibility, use the\n \t visibility from the template.  */\n-      tree tinfo = get_template_info (decl);\n+      tree tinfo = get_template_info (template_decl);\n       tree args = TI_ARGS (tinfo);\n       tree attribs = (TREE_CODE (decl) == TYPE_DECL\n \t\t      ? TYPE_ATTRIBUTES (TREE_TYPE (decl))"}, {"sha": "c7aad2706973f1dd634576c42648192a12c5f4de", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a161ff70e1f6451783b4d850189e01516818ce/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a161ff70e1f6451783b4d850189e01516818ce/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b9a161ff70e1f6451783b4d850189e01516818ce", "patch": "@@ -1,3 +1,8 @@\n+2017-02-13  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/79296\n+\t* g++.dg/cpp0x/pr79296.C: New.\n+\n 2017-02-13  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* gcc.dg/tree-ssa/ssa-dom-cse-2.c: Do not xfail powerpc64*-*-*."}, {"sha": "00dc2be101944b89f74dce24209cbcb17420e837", "filename": "gcc/testsuite/g++.dg/cpp0x/pr79296.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a161ff70e1f6451783b4d850189e01516818ce/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr79296.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a161ff70e1f6451783b4d850189e01516818ce/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr79296.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr79296.C?ref=b9a161ff70e1f6451783b4d850189e01516818ce", "patch": "@@ -0,0 +1,18 @@\n+// { dg-require-effective-target lto }\n+// { dg-additional-options \"-flto\" }\n+// { dg-do compile { target c++11 } }\n+\n+// PR 79296 ICE mangling local class of localized instantiation\n+\n+struct X {\n+  template <typename T> X (T const *) {\n+    struct Z {};\n+  }\n+};\n+\n+void Baz ()\n+{\n+  struct Y { } y;\n+\n+  0, X (&y);\n+}"}]}