{"sha": "ec8aac6f55cd0f5e73e57d58f373fc3a0385bcac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM4YWFjNmY1NWNkMGY1ZTczZTU3ZDU4ZjM3M2ZjM2EwMzg1YmNhYw==", "commit": {"author": {"name": "Jonathan Larmour", "email": "jlarmour@cygnus.co.uk", "date": "1999-10-21T12:05:58Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "1999-10-21T12:05:58Z"}, "message": "Apply patches submitted by eCos team.\n\nFrom-SVN: r30120", "tree": {"sha": "1015a0d7d7dca5b334c8b87cad65860a825ca995", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1015a0d7d7dca5b334c8b87cad65860a825ca995"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec8aac6f55cd0f5e73e57d58f373fc3a0385bcac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec8aac6f55cd0f5e73e57d58f373fc3a0385bcac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec8aac6f55cd0f5e73e57d58f373fc3a0385bcac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec8aac6f55cd0f5e73e57d58f373fc3a0385bcac/comments", "author": null, "committer": null, "parents": [{"sha": "8141abe88d835e30f0a398551244fe0bb63af321", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8141abe88d835e30f0a398551244fe0bb63af321", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8141abe88d835e30f0a398551244fe0bb63af321"}], "stats": {"total": 45, "additions": 32, "deletions": 13}, "files": [{"sha": "c8428ad6c5bbb73baac89237624e623ffc3187f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec8aac6f55cd0f5e73e57d58f373fc3a0385bcac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec8aac6f55cd0f5e73e57d58f373fc3a0385bcac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec8aac6f55cd0f5e73e57d58f373fc3a0385bcac", "patch": "@@ -1,3 +1,16 @@\n+Thu Oct 21 13:03:49 1999  Jonathan Larmour  <jlarmour@cygnus.co.uk>\n+\n+\t* config/arm/telf.h (ASM_OUTPUT_SECTION_NAME): Add %nobits option\n+\tto .section when outputting a .bss section to deal with multiple\n+\t.bss input sections (as happens with -fdata-sections)\n+\tAlso output %progbits, not @progbits so the assembler doesn't treat as\n+\ta comment.\n+\t* config/arm/unknown-elf.h (ASM_OUTPUT_SECTION_NAME): Likewise\n+\n+\t* config/arm/lib1funcs.asm (_call_via_rX): Allow compilation of\n+\tthumb parts even when building with non-thumb CPUs, by forcing\n+\tthumb mode.\t\n+\n Wed Oct 20 22:57:58 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* sparc.md (movsf_const_intreg): If splitting, length must be > 1."}, {"sha": "07b50a71fc43a807ca37945320df115faa2a3d89", "filename": "gcc/config/arm/lib1funcs.asm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec8aac6f55cd0f5e73e57d58f373fc3a0385bcac/gcc%2Fconfig%2Farm%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec8aac6f55cd0f5e73e57d58f373fc3a0385bcac/gcc%2Fconfig%2Farm%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flib1funcs.asm?ref=ec8aac6f55cd0f5e73e57d58f373fc3a0385bcac", "patch": "@@ -469,7 +469,7 @@ SYM (__div0):\n \t\n \t.text\n \t.align 0\n-\t.code 16\n+        .force_thumb\n .macro call_via register\n \t.globl\tSYM (_call_via_\\register)\n \tTYPE\t(_call_via_\\register)"}, {"sha": "ececd534406e6e1a5806dcbacb468db121960078", "filename": "gcc/config/arm/telf.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec8aac6f55cd0f5e73e57d58f373fc3a0385bcac/gcc%2Fconfig%2Farm%2Ftelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec8aac6f55cd0f5e73e57d58f373fc3a0385bcac/gcc%2Fconfig%2Farm%2Ftelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ftelf.h?ref=ec8aac6f55cd0f5e73e57d58f373fc3a0385bcac", "patch": "@@ -82,11 +82,13 @@ extern int arm_structure_size_boundary;\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n-        fprintf (STREAM, \"\\t.section %s,\\\"ax\\\",@progbits\\n\", (NAME));\t\\\n+        fprintf (STREAM, \"\\t.section %s,\\\"ax\\\",%%progbits\\n\", NAME);\t\\\n       else if ((DECL) && DECL_READONLY_SECTION (DECL, RELOC))\t\t\\\n-        fprintf (STREAM, \"\\t.section %s,\\\"a\\\"\\n\", (NAME));\t\t\\\n+        fprintf (STREAM, \"\\t.section %s,\\\"a\\\"\\n\", NAME);\t\t\\\n+      else if (! strncmp (NAME, \".bss\", 4))      \t\t\t\\\n+        fprintf (STREAM, \"\\t.section %s,\\\"aw\\\",%%nobits\\n\", NAME); \t\\\n       else\t\t\t\t\t\t\t\t\\\n-        fprintf (STREAM, \"\\t.section %s,\\\"aw\\\"\\n\", (NAME));\t\t\\\n+        fprintf (STREAM, \"\\t.section %s,\\\"aw\\\"\\n\", NAME);\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \f"}, {"sha": "aeddcdf15f52ba611aee5774542fc6175302f2b5", "filename": "gcc/config/arm/unknown-elf.h", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec8aac6f55cd0f5e73e57d58f373fc3a0385bcac/gcc%2Fconfig%2Farm%2Funknown-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec8aac6f55cd0f5e73e57d58f373fc3a0385bcac/gcc%2Fconfig%2Farm%2Funknown-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funknown-elf.h?ref=ec8aac6f55cd0f5e73e57d58f373fc3a0385bcac", "patch": "@@ -89,15 +89,19 @@ func_ptr __DTOR_END__[1] = { (func_ptr) 0 };\n    NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL or\n    NULL_TREE.  Some target formats do not support arbitrary sections.  Do not\n    define this macro in such cases.  */\n-#define ASM_OUTPUT_SECTION_NAME(STREAM, DECL, NAME, RELOC) \\\n-do {\t\t\t\t\t\t\t\t\\\n-  if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\\\n-    fprintf (STREAM, \"\\t.section %s,\\\"ax\\\",@progbits\\n\", (NAME)); \\\n-  else if ((DECL) && DECL_READONLY_SECTION (DECL, RELOC))\t\\\n-    fprintf (STREAM, \"\\t.section %s,\\\"a\\\"\\n\", (NAME));\t\t\\\n-  else\t\t\t\t\t\t\t\t\\\n-    fprintf (STREAM, \"\\t.section %s,\\\"aw\\\"\\n\", (NAME));\t\t\\\n-} while (0)\n+#define ASM_OUTPUT_SECTION_NAME(STREAM, DECL, NAME, RELOC)        \t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t  \t\\\n+      if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)\t\t  \t\\\n+\tfprintf (STREAM, \"\\t.section %s,\\\"ax\\\",%%progbits\\n\", NAME);\t\\\n+      else if ((DECL) && DECL_READONLY_SECTION (DECL, RELOC))\t  \t\\\n+\tfprintf (STREAM, \"\\t.section %s,\\\"a\\\"\\n\", NAME);\t\t\\\n+      else if (! strncmp (NAME, \".bss\", 4))      \t\t\t\\\n+\tfprintf (STREAM, \"\\t.section %s,\\\"aw\\\",%%nobits\\n\", NAME);\t\\\n+      else\t\t\t\t\t\t\t \t\\\n+\tfprintf (STREAM, \"\\t.section %s,\\\"aw\\\"\\n\", NAME);\t  \t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n \n /* Don't know how to order these.  UNALIGNED_WORD_ASM_OP is in\n    dwarf2.out. */ "}]}