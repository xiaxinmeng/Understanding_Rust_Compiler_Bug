{"sha": "58de89e74911baebdd1d0ce10cba6a8be8ff71ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThkZTg5ZTc0OTExYmFlYmRkMWQwY2UxMGNiYTZhOGJlOGZmNzFlZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2000-04-12T13:10:42Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-04-12T13:10:42Z"}, "message": "* tree.c (unsave_expr_now_r, unsafe_for_reeval): Properly do TREE_LIST.\n\nFrom-SVN: r33104", "tree": {"sha": "0743b530b7eaeeb9262ddf9790c3a1c21d7683f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0743b530b7eaeeb9262ddf9790c3a1c21d7683f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58de89e74911baebdd1d0ce10cba6a8be8ff71ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58de89e74911baebdd1d0ce10cba6a8be8ff71ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58de89e74911baebdd1d0ce10cba6a8be8ff71ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58de89e74911baebdd1d0ce10cba6a8be8ff71ee/comments", "author": null, "committer": null, "parents": [{"sha": "c3c6393606e01880684fb037538eac0ffd1f4337", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3c6393606e01880684fb037538eac0ffd1f4337", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3c6393606e01880684fb037538eac0ffd1f4337"}], "stats": {"total": 54, "additions": 25, "deletions": 29}, "files": [{"sha": "29743ba7f5efbd943b189a7842d3d3ddd249e6c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58de89e74911baebdd1d0ce10cba6a8be8ff71ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58de89e74911baebdd1d0ce10cba6a8be8ff71ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58de89e74911baebdd1d0ce10cba6a8be8ff71ee", "patch": "@@ -1,5 +1,7 @@\n Wed Apr 12 08:47:38 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* tree.c (unsave_expr_now_r, unsafe_for_reeval): Properly do TREE_LIST.\n+\n \t* print-rtl.c (print_rtx): For CALL_PLACEHOLDER, output the\n \tCALL_INSN from the normal case.\n "}, {"sha": "24eca04e5541a644350d2c091020f3c91338a9c3", "filename": "gcc/tree.c", "status": "modified", "additions": 23, "deletions": 29, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58de89e74911baebdd1d0ce10cba6a8be8ff71ee/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58de89e74911baebdd1d0ce10cba6a8be8ff71ee/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=58de89e74911baebdd1d0ce10cba6a8be8ff71ee", "patch": "@@ -2649,27 +2649,22 @@ unsave_expr_now_r (expr)\n   unsave_expr_1 (expr);\n \n   code = TREE_CODE (expr);\n-  if (code == CALL_EXPR \n-      && TREE_OPERAND (expr, 1)\n-      && TREE_CODE (TREE_OPERAND (expr, 1)) == TREE_LIST)\n-    {\n-      tree exp = TREE_OPERAND (expr, 1);\n-      while (exp)\n-\t{\n-\t  unsave_expr_now_r (TREE_VALUE (exp));\n-\t  exp = TREE_CHAIN (exp);\n-\t}\n-    }\n- \n   switch (TREE_CODE_CLASS (code))\n     {\n     case 'c':  /* a constant */\n     case 't':  /* a type node */\n-    case 'x':  /* something random, like an identifier or an ERROR_MARK.  */\n     case 'd':  /* A decl node */\n     case 'b':  /* A block node */\n       break;\n \n+    case 'x':  /* miscellaneous: e.g., identifier, TREE_LIST or ERROR_MARK.  */\n+      if (code == TREE_LIST)\n+\t{\n+\t  unsave_expr_now_r (TREE_VALUE (expr));\n+\t  unsave_expr_now_r (TREE_CHAIN (expr));\n+\t}\n+      break;\n+\n     case 'e':  /* an expression */\n     case 'r':  /* a reference */\n     case 's':  /* an expression with side effects */\n@@ -2724,37 +2719,36 @@ int\n unsafe_for_reeval (expr)\n      tree expr;\n {\n+  int unsafeness = 0;\n   enum tree_code code;\n-  register int i, tmp, unsafeness;\n+  int i, tmp;\n+  tree exp;\n   int first_rtl;\n \n   if (expr == NULL_TREE)\n     return 1;\n \n   code = TREE_CODE (expr);\n   first_rtl = first_rtl_op (code);\n-  unsafeness = 0;\n \n   switch (code)\n     {\n     case SAVE_EXPR:\n     case RTL_EXPR:\n       return 2;\n \n-    case CALL_EXPR:\n-      if (TREE_OPERAND (expr, 1)\n-\t  && TREE_CODE (TREE_OPERAND (expr, 1)) == TREE_LIST)\n+    case TREE_LIST:\n+      for (exp = expr; exp != 0; exp = TREE_CHAIN (exp))\n \t{\n-\t  tree exp = TREE_OPERAND (expr, 1);\n-\t  while (exp)\n-\t    {\n-\t      tmp = unsafe_for_reeval (TREE_VALUE (exp));\n-\t      if (tmp > 1)\n-\t\treturn tmp;\n-\t      exp = TREE_CHAIN (exp);\n-\t    }\n+\t  tmp = unsafe_for_reeval (TREE_VALUE (exp));\n+\t  unsafeness = MAX (tmp, unsafeness);\n \t}\n-      return 1;\n+\n+      return unsafeness;\n+\n+    case CALL_EXPR:\n+      tmp = unsafe_for_reeval (TREE_OPERAND (expr, 1));\n+      return MAX (tmp, 1);\n \n     case TARGET_EXPR:\n       unsafeness = 1;\n@@ -2783,9 +2777,9 @@ unsafe_for_reeval (expr)\n       for (i = first_rtl - 1; i >= 0; i--)\n \t{\n \t  tmp = unsafe_for_reeval (TREE_OPERAND (expr, i));\n-\t  if (tmp > unsafeness)\n-\t    unsafeness = tmp;\n+\t  unsafeness = MAX (tmp, unsafeness);\n \t}\n+\n       return unsafeness;\n \n     default:"}]}