{"sha": "f6ba472caf42db1f5f2f98b73afccf448b36c322", "node_id": "C_kwDOANBUbNoAKGY2YmE0NzJjYWY0MmRiMWY1ZjJmOThiNzNhZmNjZjQ0OGIzNmMzMjI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-02-10T12:50:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-10T12:50:30Z"}, "message": "Merge #916\n\n916: Support inline attribute by marking as DECL_DECLARED_INLINE_P r=philberty a=philberty\n\nThis does a refactor by removing more flags for the fndecl construction\r\nfrom the rust-gcc wrapper code in favour of using the tree api directly.\r\nThe ABI option attributes have also been refactored from the backend\r\ninterface in favour of their own package.\r\n\r\nThe gccgo wrapper tried to mark inline fns as extern inline but this\r\nrefactor allows us to control the inline options specificly for the\r\nrust semantics.\r\n\r\nFixes #857\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "46d8ef5483a0acc2ee585c8fe176ae7438a5e800", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46d8ef5483a0acc2ee585c8fe176ae7438a5e800"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6ba472caf42db1f5f2f98b73afccf448b36c322", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiBQoWCRBK7hj4Ov3rIwAAL70IAILZb0tidzQM3Tg88JnIHT5i\nBp5gPHdOHN5DtkuEunjGjEht1PoVymemVq1EDqZBNu+BC02mD6yXoTk6HxJ1gSCK\nIAcibD1ENcjmXscoyRDRgg7gx8zzz6rM6HIcYoU31TxHQYio2Rlb497bPgi2PIsB\nMFz2D1qW/1uRuSSe1ToPy4hReNo6Yoab5stxg258x44d0erTabcPmk6TScNdVDip\nqZE7WLdGF6tKWS6Syr8G1K3/d48mjyD82G/WUWC7Agv83tj0XNfQ/4evhRiKROJ3\n1mr94r/bI4ExeVyndtPLdL7FKAldYPEjrOUyy0qi2FwSnDStRbaxzgl37NRL7W4=\n=ocVa\n-----END PGP SIGNATURE-----\n", "payload": "tree 46d8ef5483a0acc2ee585c8fe176ae7438a5e800\nparent 6d1ff568084ed86e6cf14e709fe6892256be824a\nparent c598bbbcc1eadb178e74d908ce917b7cf4f556c1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1644497430 +0000\ncommitter GitHub <noreply@github.com> 1644497430 +0000\n\nMerge #916\n\n916: Support inline attribute by marking as DECL_DECLARED_INLINE_P r=philberty a=philberty\n\nThis does a refactor by removing more flags for the fndecl construction\r\nfrom the rust-gcc wrapper code in favour of using the tree api directly.\r\nThe ABI option attributes have also been refactored from the backend\r\ninterface in favour of their own package.\r\n\r\nThe gccgo wrapper tried to mark inline fns as extern inline but this\r\nrefactor allows us to control the inline options specificly for the\r\nrust semantics.\r\n\r\nFixes #857\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6ba472caf42db1f5f2f98b73afccf448b36c322", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6ba472caf42db1f5f2f98b73afccf448b36c322", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6ba472caf42db1f5f2f98b73afccf448b36c322/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d1ff568084ed86e6cf14e709fe6892256be824a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d1ff568084ed86e6cf14e709fe6892256be824a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d1ff568084ed86e6cf14e709fe6892256be824a"}, {"sha": "c598bbbcc1eadb178e74d908ce917b7cf4f556c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c598bbbcc1eadb178e74d908ce917b7cf4f556c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c598bbbcc1eadb178e74d908ce917b7cf4f556c1"}], "stats": {"total": 378, "additions": 214, "deletions": 164}, "files": [{"sha": "2d745954c8ad79eead5a1abf3020a673ff7e8c50", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6ba472caf42db1f5f2f98b73afccf448b36c322/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6ba472caf42db1f5f2f98b73afccf448b36c322/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=f6ba472caf42db1f5f2f98b73afccf448b36c322", "patch": "@@ -75,6 +75,7 @@ GRS_OBJS = \\\n     rust/rust-macro-expand.o \\\n     rust/rust-hir-full-test.o \\\n     rust/rust-hir-map.o \\\n+    rust/rust-abi.o \\\n     rust/rust-ast-lower.o \\\n     rust/rust-ast-lower-pattern.o \\\n     rust/rust-ast-resolve.o \\\n@@ -99,6 +100,7 @@ GRS_OBJS = \\\n     rust/rust-compile-expr.o \\\n     rust/rust-compile-type.o \\\n     rust/rust-constexpr.o \\\n+    rust/rust-compile-base.o \\\n     $(END)\n # removed object files from here\n "}, {"sha": "82a38e722a6a6fbe8ec2969dfdbfb8e5b51c9d28", "filename": "gcc/rust/backend/rust-compile-base.cc", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6ba472caf42db1f5f2f98b73afccf448b36c322/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6ba472caf42db1f5f2f98b73afccf448b36c322/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.cc?ref=f6ba472caf42db1f5f2f98b73afccf448b36c322", "patch": "@@ -0,0 +1,92 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-compile-base.h\"\n+#include \"stringpool.h\"\n+\n+namespace Rust {\n+namespace Compile {\n+\n+void\n+HIRCompileBase::setup_attributes_on_fndecl (\n+  tree fndecl, bool is_main_entry_point, bool has_visibility,\n+  const HIR::FunctionQualifiers &qualifiers, const AST::AttrVec &attrs)\n+{\n+  // if its the main fn or pub visibility mark its as DECL_PUBLIC\n+  // please see https://github.com/Rust-GCC/gccrs/pull/137\n+  if (is_main_entry_point || has_visibility)\n+    {\n+      TREE_PUBLIC (fndecl) = 1;\n+    }\n+\n+  // is it a const fn\n+  if (qualifiers.is_const ())\n+    {\n+      TREE_READONLY (fndecl) = 1;\n+    }\n+\n+  // is it inline?\n+  for (const auto &attr : attrs)\n+    {\n+      bool is_inline = attr.get_path ().as_string ().compare (\"inline\") == 0;\n+      if (is_inline)\n+\t{\n+\t  DECL_DECLARED_INLINE_P (fndecl) = 1;\n+\n+\t  // do we want to force inline regardless of optimisation level?\n+\t  // https://gcc.gnu.org/onlinedocs/gcc/Inline.html\n+\t  //\n+\t  // /* Add attribute \"always_inline\": */\n+\t  // DECL_ATTRIBUTES (fndecl)\n+\t  //   = tree_cons (get_identifier (\"always_inline\"), NULL,\n+\t  //       \t DECL_ATTRIBUTES (fndecl));\n+\t}\n+    }\n+}\n+\n+void\n+HIRCompileBase::setup_abi_options (tree fndecl, ABI abi)\n+{\n+  switch (abi)\n+    {\n+    case Rust::ABI::RUST:\n+    case Rust::ABI::INTRINSIC:\n+    case Rust::ABI::C:\n+    case Rust::ABI::CDECL:\n+      DECL_ATTRIBUTES (fndecl)\n+\t= tree_cons (get_identifier (\"cdecl\"), NULL, DECL_ATTRIBUTES (fndecl));\n+      break;\n+\n+    case Rust::ABI::STDCALL:\n+      DECL_ATTRIBUTES (fndecl) = tree_cons (get_identifier (\"stdcall\"), NULL,\n+\t\t\t\t\t    DECL_ATTRIBUTES (fndecl));\n+      break;\n+\n+    case Rust::ABI::FASTCALL:\n+      DECL_ATTRIBUTES (fndecl) = tree_cons (get_identifier (\"fastcall\"), NULL,\n+\t\t\t\t\t    DECL_ATTRIBUTES (fndecl));\n+\n+      break;\n+\n+    default:\n+      break;\n+    }\n+}\n+\n+} // namespace Compile\n+} // namespace Rust"}, {"sha": "f318e81273c12a4a1fd127464c2503232e25ac5b", "filename": "gcc/rust/backend/rust-compile-base.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6ba472caf42db1f5f2f98b73afccf448b36c322/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6ba472caf42db1f5f2f98b73afccf448b36c322/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.h?ref=f6ba472caf42db1f5f2f98b73afccf448b36c322", "patch": "@@ -71,6 +71,12 @@ class HIRCompileBase : public HIR::HIRFullVisitorBase\n \n   tree resolve_deref_adjustment (Resolver::Adjustment &adjustment,\n \t\t\t\t tree expression, Location locus);\n+\n+  static void setup_attributes_on_fndecl (\n+    tree fndecl, bool is_main_entry_point, bool has_visibility,\n+    const HIR::FunctionQualifiers &qualifiers, const AST::AttrVec &attrs);\n+\n+  static void setup_abi_options (tree fndecl, ABI abi);\n };\n \n } // namespace Compile"}, {"sha": "143b240e9588cc803b7cc32e5a68d249194ef2af", "filename": "gcc/rust/backend/rust-compile-extern.h", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6ba472caf42db1f5f2f98b73afccf448b36c322/gcc%2Frust%2Fbackend%2Frust-compile-extern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6ba472caf42db1f5f2f98b73afccf448b36c322/gcc%2Frust%2Fbackend%2Frust-compile-extern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-extern.h?ref=f6ba472caf42db1f5f2f98b73afccf448b36c322", "patch": "@@ -125,19 +125,16 @@ class CompileExternItem : public HIRCompileBase\n       }\n \n     tree compiled_fn_type = TyTyResolveCompile::compile (ctx, fntype);\n-    compiled_fn_type\n-      = ctx->get_backend ()->specify_abi_attribute (compiled_fn_type,\n-\t\t\t\t\t\t    fntype->get_abi ());\n-\n-    const unsigned int flags\n-      = Backend::function_is_declaration | Backend::function_is_visible;\n-\n     std::string ir_symbol_name = function.get_item_name ();\n     std::string asm_name = function.get_item_name ();\n \n+    const unsigned int flags = Backend::function_is_declaration;\n     tree fndecl\n       = ctx->get_backend ()->function (compiled_fn_type, ir_symbol_name,\n \t\t\t\t       asm_name, flags, function.get_locus ());\n+    TREE_PUBLIC (fndecl) = 1;\n+    setup_abi_options (fndecl, fntype->get_abi ());\n+\n     ctx->insert_function_decl (fntype, fndecl);\n   }\n "}, {"sha": "93202767f882e5aa606e9481c362f80f379ad238", "filename": "gcc/rust/backend/rust-compile-implitem.h", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6ba472caf42db1f5f2f98b73afccf448b36c322/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6ba472caf42db1f5f2f98b73afccf448b36c322/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h?ref=f6ba472caf42db1f5f2f98b73afccf448b36c322", "patch": "@@ -133,13 +133,6 @@ class CompileInherentImplItem : public HIRCompileBase\n     // convert to the actual function type\n     tree compiled_fn_type = TyTyResolveCompile::compile (ctx, fntype);\n \n-    unsigned int flags = 0;\n-\n-    // if its the main fn or pub visibility mark its as DECL_PUBLIC\n-    // please see https://github.com/Rust-GCC/gccrs/pull/137\n-    if (function.has_visibility ())\n-      flags |= Backend::function_is_visible;\n-\n     const Resolver::CanonicalPath *canonical_path = nullptr;\n     bool ok = ctx->get_mappings ()->lookup_canonical_path (\n       function.get_mappings ().get_crate_num (),\n@@ -150,9 +143,13 @@ class CompileInherentImplItem : public HIRCompileBase\n       = canonical_path->get () + fntype->subst_as_string ();\n     std::string asm_name = ctx->mangle_item (fntype, *canonical_path);\n \n+    unsigned int flags = 0;\n     tree fndecl\n       = ctx->get_backend ()->function (compiled_fn_type, ir_symbol_name,\n \t\t\t\t       asm_name, flags, function.get_locus ());\n+    setup_attributes_on_fndecl (fndecl, false, function.has_visibility (),\n+\t\t\t\tfunction.get_qualifiers (),\n+\t\t\t\tfunction.get_outer_attrs ());\n     ctx->insert_function_decl (fntype, fndecl);\n \n     // setup the params\n@@ -395,9 +392,7 @@ class CompileTraitItem : public HIRCompileBase\n \n     // convert to the actual function type\n     tree compiled_fn_type = TyTyResolveCompile::compile (ctx, fntype);\n-\n     HIR::TraitFunctionDecl &function = func.get_decl ();\n-    unsigned int flags = 0;\n \n     const Resolver::CanonicalPath *canonical_path = nullptr;\n     bool ok = ctx->get_mappings ()->lookup_canonical_path (\n@@ -408,9 +403,13 @@ class CompileTraitItem : public HIRCompileBase\n     std::string fn_identifier = canonical_path->get ();\n     std::string asm_name = ctx->mangle_item (fntype, *canonical_path);\n \n+    unsigned int flags = 0;\n     tree fndecl\n       = ctx->get_backend ()->function (compiled_fn_type, fn_identifier,\n \t\t\t\t       asm_name, flags, func.get_locus ());\n+    setup_attributes_on_fndecl (fndecl, false, false,\n+\t\t\t\tfunc.get_decl ().get_qualifiers (),\n+\t\t\t\tfunc.get_outer_attrs ());\n     ctx->insert_function_decl (fntype, fndecl);\n \n     // setup the params"}, {"sha": "70b54155fad5fe63e48f099ae861a4526b3dee55", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6ba472caf42db1f5f2f98b73afccf448b36c322/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6ba472caf42db1f5f2f98b73afccf448b36c322/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=f6ba472caf42db1f5f2f98b73afccf448b36c322", "patch": "@@ -144,9 +144,9 @@ class CompileItem : public HIRCompileBase\n \t  NULL, constant.get_locus ());\n \n \ttree fndecl\n-\t  = ctx->get_backend ()->function (compiled_fn_type, ident, \"\",\n-\t\t\t\t\t   Backend::function_read_only,\n+\t  = ctx->get_backend ()->function (compiled_fn_type, ident, \"\", 0,\n \t\t\t\t\t   constant.get_locus ());\n+\tTREE_READONLY (fndecl) = 1;\n \n \ttree enclosing_scope = NULL_TREE;\n \tHIR::BlockExpr *function_body\n@@ -255,18 +255,6 @@ class CompileItem : public HIRCompileBase\n \n     tree compiled_fn_type = TyTyResolveCompile::compile (ctx, fntype);\n \n-    unsigned int flags = 0;\n-    bool is_main_fn = function.get_function_name ().compare (\"main\") == 0;\n-\n-    // if its the main fn or pub visibility mark its as DECL_PUBLIC\n-    // please see https://github.com/Rust-GCC/gccrs/pull/137\n-    if (is_main_fn || function.has_visibility ())\n-      flags |= Backend::function_is_visible;\n-\n-    // is it a const function?\n-    if (function.get_qualifiers ().is_const ())\n-      flags |= Backend::function_read_only;\n-\n     const Resolver::CanonicalPath *canonical_path = nullptr;\n     bool ok = ctx->get_mappings ()->lookup_canonical_path (\n       function.get_mappings ().get_crate_num (),\n@@ -275,19 +263,25 @@ class CompileItem : public HIRCompileBase\n \n     std::string ir_symbol_name\n       = canonical_path->get () + fntype->subst_as_string ();\n-\n     std::string asm_name = function.get_function_name ();\n \n     // we don't mangle the main fn since we haven't implemented the main shim\n     // yet\n+    bool is_main_fn = function.get_function_name ().compare (\"main\") == 0;\n     if (!is_main_fn)\n       {\n \tasm_name = ctx->mangle_item (fntype, *canonical_path);\n       }\n \n+    unsigned int flags = 0;\n     tree fndecl\n       = ctx->get_backend ()->function (compiled_fn_type, ir_symbol_name,\n \t\t\t\t       asm_name, flags, function.get_locus ());\n+    setup_attributes_on_fndecl (fndecl, is_main_fn, function.has_visibility (),\n+\t\t\t\tfunction.get_qualifiers (),\n+\t\t\t\tfunction.get_outer_attrs ());\n+\n+    // insert into the context\n     ctx->insert_function_decl (fntype, fndecl);\n \n     // setup the params"}, {"sha": "5fdf8060170b01fd300a27696d56fbabd6c676db", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6ba472caf42db1f5f2f98b73afccf448b36c322/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6ba472caf42db1f5f2f98b73afccf448b36c322/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=f6ba472caf42db1f5f2f98b73afccf448b36c322", "patch": "@@ -2262,6 +2262,8 @@ struct TraitFunctionDecl\n   }\n \n   std::vector<FunctionParam> &get_function_params () { return function_params; }\n+\n+  const FunctionQualifiers &get_qualifiers () const { return qualifiers; }\n };\n \n // Actual trait item function declaration within traits\n@@ -2339,6 +2341,8 @@ class TraitItemFunc : public TraitItem\n     return TraitItemKind::FUNC;\n   }\n \n+  AST::AttrVec get_outer_attrs () const { return outer_attrs; }\n+\n protected:\n   // Clone function implementation as (not pure) virtual method\n   TraitItemFunc *clone_trait_item_impl () const override"}, {"sha": "2a7691ca8f7422be5656b865e71228ff8d9e8ef2", "filename": "gcc/rust/rust-backend.h", "status": "modified", "additions": 4, "deletions": 65, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6ba472caf42db1f5f2f98b73afccf448b36c322/gcc%2Frust%2Frust-backend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6ba472caf42db1f5f2f98b73afccf448b36c322/gcc%2Frust%2Frust-backend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-backend.h?ref=f6ba472caf42db1f5f2f98b73afccf448b36c322", "patch": "@@ -27,8 +27,6 @@\n #include \"rust-linemap.h\"\n #include \"rust-diagnostics.h\"\n #include \"operator.h\"\n-#include \"rust-abi.h\"\n-\n #include \"tree.h\"\n \n extern bool\n@@ -74,49 +72,6 @@ class Backend\n   virtual void debug (tree) = 0;\n   virtual void debug (Bvariable *) = 0;\n \n-  static Rust::ABI get_abi_from_string (const std::string &abi, Location locus)\n-  {\n-    if (abi.compare (\"rust\") == 0)\n-      return Rust::ABI::C;\n-    else if (abi.compare (\"rust-intrinsic\") == 0)\n-      return Rust::ABI::INTRINSIC;\n-    else if (abi.compare (\"C\") == 0)\n-      return Rust::ABI::C;\n-    else if (abi.compare (\"cdecl\") == 0)\n-      return Rust::ABI::CDECL;\n-    else if (abi.compare (\"stdcall\") == 0)\n-      return Rust::ABI::STDCALL;\n-    else if (abi.compare (\"fastcall\") == 0)\n-      return Rust::ABI::FASTCALL;\n-\n-    rust_error_at (locus, \"unknown abi specified\");\n-\n-    return Rust::ABI::UNKNOWN;\n-  }\n-\n-  static std::string get_string_from_abi (Rust::ABI abi)\n-  {\n-    switch (abi)\n-      {\n-      case Rust::ABI::RUST:\n-\treturn \"rust\";\n-      case Rust::ABI::INTRINSIC:\n-\treturn \"rust-intrinsic\";\n-      case Rust::ABI::C:\n-\treturn \"C\";\n-      case Rust::ABI::CDECL:\n-\treturn \"cdecl\";\n-      case Rust::ABI::STDCALL:\n-\treturn \"stdcall\";\n-      case Rust::ABI::FASTCALL:\n-\treturn \"fastcall\";\n-\n-      case Rust::ABI::UNKNOWN:\n-\treturn \"unknown\";\n-      }\n-    return \"unknown\";\n-  }\n-\n   virtual tree get_identifier_node (const std::string &str) = 0;\n \n   // Types.\n@@ -681,35 +636,21 @@ class Backend\n \n   // Bit flags to pass to the function method.\n \n-  // Set if the function should be visible outside of the current\n-  // compilation unit.\n-  static const unsigned int function_is_visible = 1 << 0;\n-\n   // Set if this is a function declaration rather than a definition;\n   // the definition will be in another compilation unit.\n-  static const unsigned int function_is_declaration = 1 << 1;\n+  static const unsigned int function_is_declaration = 1 << 0;\n \n   // Set if the function should never be inlined because they call\n   // recover and must be visible for correct panic recovery.\n-  static const unsigned int function_is_uninlinable = 1 << 2;\n+  static const unsigned int function_is_uninlinable = 1 << 1;\n \n   // Set if the function does not return.  This is set for the\n   // implementation of panic.\n-  static const unsigned int function_does_not_return = 1 << 3;\n+  static const unsigned int function_does_not_return = 1 << 2;\n \n   // Set if the function should be put in a unique section if\n   // possible.  This is used for field tracking.\n-  static const unsigned int function_in_unique_section = 1 << 4;\n-\n-  // Set if the function should be available for inlining in the\n-  // backend, but should not be emitted as a standalone function.  Any\n-  // call to the function that is not inlined should be treated as a\n-  // call to a function defined in a different compilation unit.  This\n-  // is like a C99 function marked inline but not extern.\n-  static const unsigned int function_only_inline = 1 << 5;\n-\n-  // const function\n-  static const unsigned int function_read_only = 1 << 6;\n+  static const unsigned int function_in_unique_section = 1 << 3;\n \n   // Declare or define a function of FNTYPE.\n   // NAME is the Go name of the function.  ASM_NAME, if not the empty\n@@ -721,8 +662,6 @@ class Backend\n \t\t\t Location)\n     = 0;\n \n-  virtual tree specify_abi_attribute (tree type, Rust::ABI abi) = 0;\n-\n   // Create a statement that runs all deferred calls for FUNCTION.  This should\n   // be a statement that looks like this in C++:\n   //   finish:"}, {"sha": "62c9d80b2135ec6d2a005adef7eee000795b4a91", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 1, "deletions": 60, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6ba472caf42db1f5f2f98b73afccf448b36c322/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6ba472caf42db1f5f2f98b73afccf448b36c322/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=f6ba472caf42db1f5f2f98b73afccf448b36c322", "patch": "@@ -160,10 +160,6 @@ class Gcc_backend : public Backend\n \n   tree immutable_type (tree);\n \n-  tree specify_abi_attribute (tree, Rust::ABI);\n-\n-  tree insert_type_attribute (tree, const std::string &);\n-\n   tree function_type (const typed_identifier &,\n \t\t      const std::vector<typed_identifier> &,\n \t\t      const std::vector<typed_identifier> &, tree,\n@@ -769,52 +765,6 @@ Gcc_backend::immutable_type (tree base)\n   return constified;\n }\n \n-// ABI\n-\n-tree\n-Gcc_backend::specify_abi_attribute (tree type, Rust::ABI abi)\n-{\n-  std::string abi_string;\n-  switch (abi)\n-    {\n-    case Rust::ABI::UNKNOWN:\n-      return error_type ();\n-\n-    case Rust::ABI::RUST:\n-    case Rust::ABI::INTRINSIC:\n-    case Rust::ABI::C:\n-    case Rust::ABI::CDECL:\n-      abi_string = \"cdecl\";\n-      break;\n-\n-    case Rust::ABI::STDCALL:\n-      abi_string = \"stdcall\";\n-      break;\n-    case Rust::ABI::FASTCALL:\n-      abi_string = \"fastcall\";\n-      break;\n-    }\n-\n-  return insert_type_attribute (type, abi_string);\n-}\n-\n-tree\n-Gcc_backend::insert_type_attribute (tree type, const std::string &attrname)\n-{\n-  tree ident = get_identifier (attrname.c_str ());\n-\n-  tree attribs = NULL_TREE;\n-  tree old_attrs = TYPE_ATTRIBUTES (type);\n-  if (old_attrs)\n-    attribs = merge_type_attributes (old_attrs,\n-\t\t\t\t     tree_cons (ident, NULL_TREE, NULL_TREE));\n-  else\n-    attribs = tree_cons (ident, NULL_TREE, NULL_TREE);\n-\n-  tree res = build_type_attribute_variant (type, attribs);\n-  return res;\n-}\n-\n // Make a function type.\n \n tree\n@@ -2965,8 +2915,7 @@ Gcc_backend::function (tree functype, const std::string &name,\n     = build_decl (location.gcc_location (), FUNCTION_DECL, id, functype);\n   if (!asm_name.empty ())\n     SET_DECL_ASSEMBLER_NAME (decl, get_identifier_from_string (asm_name));\n-  if ((flags & function_is_visible) != 0)\n-    TREE_PUBLIC (decl) = 1;\n+\n   if ((flags & function_is_declaration) != 0)\n     DECL_EXTERNAL (decl) = 1;\n   else\n@@ -2985,14 +2934,6 @@ Gcc_backend::function (tree functype, const std::string &name,\n     TREE_THIS_VOLATILE (decl) = 1;\n   if ((flags & function_in_unique_section) != 0)\n     resolve_unique_section (decl, 0, 1);\n-  if ((flags & function_only_inline) != 0)\n-    {\n-      TREE_PUBLIC (decl) = 1;\n-      DECL_EXTERNAL (decl) = 1;\n-      DECL_DECLARED_INLINE_P (decl) = 1;\n-    }\n-  if ((flags & function_read_only) != 0)\n-    TREE_READONLY (decl) = 1;\n \n   rust_preserve_from_gc (decl);\n   return decl;"}, {"sha": "b5c0dbc52cb28a2fe264019c46d7d3c1588d54b9", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6ba472caf42db1f5f2f98b73afccf448b36c322/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6ba472caf42db1f5f2f98b73afccf448b36c322/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=f6ba472caf42db1f5f2f98b73afccf448b36c322", "patch": "@@ -126,14 +126,18 @@ class TypeCheckTopLevelExternItem : public TypeCheckBase\n       CanonicalPath::new_seg (function.get_mappings ().get_nodeid (),\n \t\t\t      function.get_item_name ()),\n       function.get_locus ()};\n-    auto fnType\n-      = new TyTy::FnType (function.get_mappings ().get_hirid (),\n-\t\t\t  function.get_mappings ().get_defid (),\n-\t\t\t  function.get_item_name (), ident, flags,\n-\t\t\t  ::Backend::get_abi_from_string (parent.get_abi (),\n-\t\t\t\t\t\t\t  parent.get_locus ()),\n-\t\t\t  std::move (params), ret_type,\n-\t\t\t  std::move (substitutions));\n+\n+    auto abi = get_abi_from_string (parent.get_abi ());\n+    if (abi == ABI::UNKNOWN)\n+      {\n+\trust_error_at (parent.get_locus (), \"unknown abi\");\n+      }\n+\n+    auto fnType = new TyTy::FnType (function.get_mappings ().get_hirid (),\n+\t\t\t\t    function.get_mappings ().get_defid (),\n+\t\t\t\t    function.get_item_name (), ident, flags,\n+\t\t\t\t    abi, std::move (params), ret_type,\n+\t\t\t\t    std::move (substitutions));\n \n     context->insert_type (function.get_mappings (), fnType);\n   }"}, {"sha": "c27e38203613be269840f2cdb37ed45a7978f572", "filename": "gcc/rust/util/rust-abi.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6ba472caf42db1f5f2f98b73afccf448b36c322/gcc%2Frust%2Futil%2Frust-abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6ba472caf42db1f5f2f98b73afccf448b36c322/gcc%2Frust%2Futil%2Frust-abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-abi.cc?ref=f6ba472caf42db1f5f2f98b73afccf448b36c322", "patch": "@@ -0,0 +1,64 @@\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-abi.h\"\n+\n+namespace Rust {\n+\n+Rust::ABI\n+get_abi_from_string (const std::string &abi)\n+{\n+  if (abi.compare (\"rust\") == 0)\n+    return Rust::ABI::C;\n+  else if (abi.compare (\"rust-intrinsic\") == 0)\n+    return Rust::ABI::INTRINSIC;\n+  else if (abi.compare (\"C\") == 0)\n+    return Rust::ABI::C;\n+  else if (abi.compare (\"cdecl\") == 0)\n+    return Rust::ABI::CDECL;\n+  else if (abi.compare (\"stdcall\") == 0)\n+    return Rust::ABI::STDCALL;\n+  else if (abi.compare (\"fastcall\") == 0)\n+    return Rust::ABI::FASTCALL;\n+\n+  return Rust::ABI::UNKNOWN;\n+}\n+\n+std::string\n+get_string_from_abi (Rust::ABI abi)\n+{\n+  switch (abi)\n+    {\n+    case Rust::ABI::RUST:\n+      return \"rust\";\n+    case Rust::ABI::INTRINSIC:\n+      return \"rust-intrinsic\";\n+    case Rust::ABI::C:\n+      return \"C\";\n+    case Rust::ABI::CDECL:\n+      return \"cdecl\";\n+    case Rust::ABI::STDCALL:\n+      return \"stdcall\";\n+    case Rust::ABI::FASTCALL:\n+      return \"fastcall\";\n+\n+    case Rust::ABI::UNKNOWN:\n+      return \"unknown\";\n+    }\n+  return \"unknown\";\n+}\n+\n+} // namespace Rust"}, {"sha": "04224eefc3d4027caa53d25cacf6cd382f8fd742", "filename": "gcc/rust/util/rust-abi.h", "status": "renamed", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6ba472caf42db1f5f2f98b73afccf448b36c322/gcc%2Frust%2Futil%2Frust-abi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6ba472caf42db1f5f2f98b73afccf448b36c322/gcc%2Frust%2Futil%2Frust-abi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-abi.h?ref=f6ba472caf42db1f5f2f98b73afccf448b36c322", "patch": "@@ -17,6 +17,8 @@\n #ifndef RUST_ABI_OPTIONS_H\n #define RUST_ABI_OPTIONS_H\n \n+#include <string>\n+\n namespace Rust {\n \n enum ABI\n@@ -30,6 +32,12 @@ enum ABI\n   FASTCALL,\n };\n \n+extern Rust::ABI\n+get_abi_from_string (const std::string &abi);\n+\n+extern std::string\n+get_string_from_abi (Rust::ABI abi);\n+\n } // namespace Rust\n \n #endif // RUST_ABI_OPTIONS_H", "previous_filename": "gcc/rust/rust-abi.h"}]}