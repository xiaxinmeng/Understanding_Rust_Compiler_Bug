{"sha": "aa487ef2717e0f319f2f8d3496d0003939ec2b09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE0ODdlZjI3MTdlMGYzMTlmMmY4ZDM0OTZkMDAwMzkzOWVjMmIwOQ==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2021-01-10T06:40:56Z"}, "committer": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2021-01-10T06:40:56Z"}, "message": "Cleanup - remove old for loop implementations in AttrVisitor", "tree": {"sha": "831eb17d5f7ddcf7fb4e42b32edebe1fd4ba92db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/831eb17d5f7ddcf7fb4e42b32edebe1fd4ba92db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa487ef2717e0f319f2f8d3496d0003939ec2b09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa487ef2717e0f319f2f8d3496d0003939ec2b09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa487ef2717e0f319f2f8d3496d0003939ec2b09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa487ef2717e0f319f2f8d3496d0003939ec2b09/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52"}], "stats": {"total": 447, "additions": 0, "deletions": 447}, "files": [{"sha": "39bba4f0509513d8ee29ac55378e58aae852c7ea", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 0, "deletions": 447, "changes": 447, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa487ef2717e0f319f2f8d3496d0003939ec2b09/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa487ef2717e0f319f2f8d3496d0003939ec2b09/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=aa487ef2717e0f319f2f8d3496d0003939ec2b09", "patch": "@@ -56,31 +56,6 @@ class AttrVisitor : public AST::ASTVisitor\n \t// if nothing else happens, increment\n \t++it;\n       }\n-\n-#if 0\n-    for (int i = 0; i < fields.size ();)\n-      {\n-\tauto &field = fields[i];\n-\n-\tauto &field_attrs = field.get_outer_attrs ();\n-\texpander.expand_cfg_attrs (field_attrs);\n-\tif (expander.fails_cfg_with_expand (field_attrs))\n-\t  {\n-\t    fields.erase (fields.begin () + i);\n-\t    continue;\n-\t  }\n-\n-\t// expand sub-types of type, but can't strip type itself\n-\tauto &type = field.get_field_type ();\n-\ttype->accept_vis (*this);\n-\tif (type->is_marked_for_strip ())\n-\t  rust_error_at (type->get_locus_slow (),\n-\t\t\t \"cannot strip type in this position\");\n-\n-\t// if nothing else happens, increment\n-\ti++;\n-      }\n-#endif\n   }\n \n   void expand_tuple_fields (std::vector<AST::TupleField> &fields)\n@@ -107,31 +82,6 @@ class AttrVisitor : public AST::ASTVisitor\n \t// if nothing else happens, increment\n \t++it;\n       }\n-\n-#if 0\n-    for (int i = 0; i < fields.size ();)\n-      {\n-\tauto &field = fields[i];\n-\n-\tauto &field_attrs = field.get_outer_attrs ();\n-\texpander.expand_cfg_attrs (field_attrs);\n-\tif (expander.fails_cfg_with_expand (field_attrs))\n-\t  {\n-\t    fields.erase (fields.begin () + i);\n-\t    continue;\n-\t  }\n-\n-\t// expand sub-types of type, but can't strip type itself\n-\tauto &type = field.get_field_type ();\n-\ttype->accept_vis (*this);\n-\tif (type->is_marked_for_strip ())\n-\t  rust_error_at (type->get_locus_slow (),\n-\t\t\t \"cannot strip type in this position\");\n-\n-\t// if nothing else happens, increment\n-\ti++;\n-      }\n-#endif\n   }\n \n   void expand_function_params (std::vector<AST::FunctionParam> &params)\n@@ -164,37 +114,6 @@ class AttrVisitor : public AST::ASTVisitor\n \t// increment\n \t++it;\n       }\n-\n-#if 0\n-    for (int i = 0; i < params.size ();)\n-      {\n-\tauto &param = params[i];\n-\n-\tauto &param_attrs = param.get_outer_attrs ();\n-\texpander.expand_cfg_attrs (param_attrs);\n-\tif (expander.fails_cfg_with_expand (param_attrs))\n-\t  {\n-\t    params.erase (params.begin () + i);\n-\t    continue;\n-\t  }\n-\n-\t// TODO: should an unwanted strip lead to break out of loop?\n-\tauto &pattern = param.get_pattern ();\n-\tpattern->accept_vis (*this);\n-\tif (pattern->is_marked_for_strip ())\n-\t  rust_error_at (pattern->get_locus_slow (),\n-\t\t\t \"cannot strip pattern in this position\");\n-\n-\tauto &type = param.get_type ();\n-\ttype->accept_vis (*this);\n-\tif (type->is_marked_for_strip ())\n-\t  rust_error_at (type->get_locus_slow (),\n-\t\t\t \"cannot strip type in this position\");\n-\n-\t// increment\n-\ti++;\n-      }\n-#endif\n   }\n \n   void expand_generic_args (AST::GenericArgs &args)\n@@ -271,39 +190,6 @@ class AttrVisitor : public AST::ASTVisitor\n \t// increment if found nothing else so far\n \t++it;\n       }\n-\n-#if 0\n-    for (int i = 0; i < params.size ();)\n-      {\n-\tauto &param = params[i];\n-\n-\tauto &param_attrs = param.get_outer_attrs ();\n-\texpander.expand_cfg_attrs (param_attrs);\n-\tif (expander.fails_cfg_with_expand (param_attrs))\n-\t  {\n-\t    params.erase (params.begin () + i);\n-\t    continue;\n-\t  }\n-\n-\tauto &pattern = param.get_pattern ();\n-\tpattern->accept_vis (*this);\n-\tif (pattern->is_marked_for_strip ())\n-\t  rust_error_at (pattern->get_locus_slow (),\n-\t\t\t \"cannot strip pattern in this position\");\n-\n-\tif (param.has_type_given ())\n-\t  {\n-\t    auto &type = param.get_type ();\n-\t    type->accept_vis (*this);\n-\t    if (type->is_marked_for_strip ())\n-\t      rust_error_at (type->get_locus_slow (),\n-\t\t\t     \"cannot strip type in this position\");\n-\t  }\n-\n-\t// increment if found nothing else so far\n-\ti++;\n-      }\n-#endif\n   }\n \n   void expand_self_param (AST::SelfParam &self_param)\n@@ -798,22 +684,6 @@ class AttrVisitor : public AST::ASTVisitor\n     /* apparently outer attributes are allowed in \"elements of array\n      * expressions\" according to spec */\n     expand_pointer_allow_strip (elems.get_values ());\n-\n-#if 0\n-    auto &values = elems.get_values ();\n-    for (int i = 0; i < values.size ();)\n-      {\n-\tauto &value = values[i];\n-\n-\t// mark for stripping if required\n-\tvalue->accept_vis (*this);\n-\n-\tif (value->is_marked_for_strip ())\n-\t  values.erase (values.begin () + i);\n-\telse\n-\t  i++;\n-      }\n-#endif\n   }\n   void visit (AST::ArrayElemsCopied &elems) override\n   {\n@@ -916,22 +786,6 @@ class AttrVisitor : public AST::ASTVisitor\n     /* apparently outer attributes are allowed in \"elements of tuple\n      * expressions\" according to spec */\n     expand_pointer_allow_strip (expr.get_tuple_elems ());\n-\n-#if 0\n-    auto &values = expr.get_tuple_elems ();\n-    for (int i = 0; i < values.size ();)\n-      {\n-\tauto &value = values[i];\n-\n-\t// mark for stripping if required\n-\tvalue->accept_vis (*this);\n-\n-\tif (value->is_marked_for_strip ())\n-\t  values.erase (values.begin () + i);\n-\telse\n-\t  i++;\n-      }\n-#endif\n   }\n   void visit (AST::TupleIndexExpr &expr) override\n   {\n@@ -1118,22 +972,6 @@ class AttrVisitor : public AST::ASTVisitor\n     /* spec says outer attributes are specifically allowed for elements\n      * of tuple-style struct expressions, so full stripping possible */\n     expand_pointer_allow_strip (expr.get_elems ());\n-\n-#if 0\n-    auto &values = expr.get_elems ();\n-    for (int i = 0; i < values.size ();)\n-      {\n-\tauto &value = values[i];\n-\n-\t// mark for stripping if required\n-\tvalue->accept_vis (*this);\n-\n-\tif (value->is_marked_for_strip ())\n-\t  values.erase (values.begin () + i);\n-\telse\n-\t  i++;\n-      }\n-#endif\n   }\n   void visit (AST::StructExprUnit &expr) override\n   {\n@@ -1229,22 +1067,6 @@ class AttrVisitor : public AST::ASTVisitor\n     /* spec says outer attributes are specifically allowed for elements\n      * of tuple-style enum expressions, so full stripping possible */\n     expand_pointer_allow_strip (expr.get_elems ());\n-\n-#if 0\n-    auto &values = expr.get_elems ();\n-    for (int i = 0; i < values.size ();)\n-      {\n-\tauto &value = values[i];\n-\n-\t// mark for stripping if required\n-\tvalue->accept_vis (*this);\n-\n-\tif (value->is_marked_for_strip ())\n-\t  values.erase (values.begin () + i);\n-\telse\n-\t  i++;\n-      }\n-#endif\n   }\n   void visit (AST::EnumExprFieldless &expr) override\n   {\n@@ -1280,22 +1102,6 @@ class AttrVisitor : public AST::ASTVisitor\n     /* spec says outer attributes are specifically allowed for elements\n      * of call expressions, so full stripping possible */\n     expand_pointer_allow_strip (expr.get_params ());\n-\n-#if 0\n-    auto &params = expr.get_params ();\n-    for (int i = 0; i < params.size ();)\n-      {\n-\tauto &param = params[i];\n-\n-\t// mark for stripping if required\n-\tparam->accept_vis (*this);\n-\n-\tif (param->is_marked_for_strip ())\n-\t  params.erase (params.begin () + i);\n-\telse\n-\t  i++;\n-      }\n-#endif\n   }\n   void visit (AST::MethodCallExpr &expr) override\n   {\n@@ -1324,22 +1130,6 @@ class AttrVisitor : public AST::ASTVisitor\n     /* spec says outer attributes are specifically allowed for elements\n      * of method call expressions, so full stripping possible */\n     expand_pointer_allow_strip (expr.get_params ());\n-\n-#if 0\n-    auto &params = expr.get_params ();\n-    for (int i = 0; i < params.size ();)\n-      {\n-\tauto &param = params[i];\n-\n-\t// mark for stripping if required\n-\tparam->accept_vis (*this);\n-\n-\tif (param->is_marked_for_strip ())\n-\t  params.erase (params.begin () + i);\n-\telse\n-\t  i++;\n-      }\n-#endif\n   }\n   void visit (AST::FieldAccessExpr &expr) override\n   {\n@@ -1405,22 +1195,6 @@ class AttrVisitor : public AST::ASTVisitor\n     // strip all statements\n     expand_pointer_allow_strip (expr.get_statements ());\n \n-#if 0\n-    auto &stmts = expr.get_statements ();\n-    for (int i = 0; i < stmts.size ();)\n-      {\n-\tauto &stmt = stmts[i];\n-\n-\t// mark for stripping if required\n-\tstmt->accept_vis (*this);\n-\n-\tif (stmt->is_marked_for_strip ())\n-\t  stmts.erase (stmts.begin () + i);\n-\telse\n-\t  i++;\n-      }\n-#endif\n-\n     // strip tail expression if exists - can actually fully remove it\n     if (expr.has_tail_expr ())\n       {\n@@ -2118,56 +1892,6 @@ class AttrVisitor : public AST::ASTVisitor\n \t// increment to next case if haven't continued\n \t++it;\n       }\n-\n-#if 0\n-    for (int i = 0; i < match_cases.size ();)\n-      {\n-\tauto &match_case = match_cases[i];\n-\n-\t// strip match case based on outer attributes in match arm\n-\tauto &match_arm = match_case.get_arm ();\n-\texpander.expand_cfg_attrs (match_arm.get_outer_attrs ());\n-\tif (expander.fails_cfg_with_expand (match_arm.get_outer_attrs ()))\n-\t  {\n-\t    // strip match case\n-\t    match_cases.erase (match_cases.begin () + i);\n-\t    continue;\n-\t  }\n-\n-\tfor (auto &pattern : match_arm.get_patterns ())\n-\t  {\n-\t    pattern->accept_vis (*this);\n-\t    if (pattern->is_marked_for_strip ())\n-\t      rust_error_at (pattern->get_locus_slow (),\n-\t\t\t     \"cannot strip pattern in this position\");\n-\t  }\n-\n-\t/* assuming that guard expression cannot be stripped as\n-\t * strictly speaking you would have to strip the whole guard to\n-\t * make syntactical sense, which you can't do. as such, only\n-\t * strip sub-expressions */\n-\tif (match_arm.has_match_arm_guard ())\n-\t  {\n-\t    auto &guard_expr = match_arm.get_guard_expr ();\n-\t    guard_expr->accept_vis (*this);\n-\t    if (guard_expr->is_marked_for_strip ())\n-\t      rust_error_at (guard_expr->get_locus_slow (),\n-\t\t\t     \"cannot strip expression in this position - outer \"\n-\t\t\t     \"attributes not allowed\");\n-\t  }\n-\n-\t// strip sub-expressions from match cases\n-\tauto &case_expr = match_case.get_expr ();\n-\tcase_expr->accept_vis (*this);\n-\tif (case_expr->is_marked_for_strip ())\n-\t  rust_error_at (case_expr->get_locus_slow (),\n-\t\t\t \"cannot strip expression in this position - outer \"\n-\t\t\t \"attributes not allowed\");\n-\n-\t// increment to next case if haven't continued\n-\ti++;\n-      }\n-#endif\n   }\n   void visit (AST::AwaitExpr &expr) override\n   {\n@@ -2310,22 +2034,6 @@ class AttrVisitor : public AST::ASTVisitor\n \n     // strip items if required\n     expand_pointer_allow_strip (module.get_items ());\n-\n-#if 0\n-    auto &items = module.get_items ();\n-    for (int i = 0; i < items.size ();)\n-      {\n-\tauto &item = items[i];\n-\n-\t// mark for stripping if required\n-\titem->accept_vis (*this);\n-\n-\tif (item->is_marked_for_strip ())\n-\t  items.erase (items.begin () + i);\n-\telse\n-\t  i++;\n-      }\n-#endif\n   }\n   void visit (AST::ModuleNoBody &module) override\n   {\n@@ -2552,22 +2260,6 @@ class AttrVisitor : public AST::ASTVisitor\n     /* strip enum fields if required - this is presumably\n      * allowed by spec */\n     expand_pointer_allow_strip (enum_item.get_variants ());\n-\n-#if 0\n-    auto &variants = enum_item.get_variants ();\n-    for (int i = 0; i < variants.size ();)\n-      {\n-\tauto &variant = variants[i];\n-\n-\t// mark for stripping if required\n-\tvariant->accept_vis (*this);\n-\n-\tif (variant->is_marked_for_strip ())\n-\t  variants.erase (variants.begin () + i);\n-\telse\n-\t  i++;\n-      }\n-#endif\n   }\n   void visit (AST::Union &union_item) override\n   {\n@@ -2775,22 +2467,6 @@ class AttrVisitor : public AST::ASTVisitor\n \n     // strip trait items if required\n     expand_pointer_allow_strip (trait.get_trait_items ());\n-\n-#if 0\n-    auto &trait_items = trait.get_trait_items ();\n-    for (int i = 0; i < trait_items.size ();)\n-      {\n-\tauto &item = trait_items[i];\n-\n-\t// mark for stripping if required\n-\titem->accept_vis (*this);\n-\n-\tif (item->is_marked_for_strip ())\n-\t  trait_items.erase (trait_items.begin () + i);\n-\telse\n-\t  i++;\n-      }\n-#endif\n   }\n   void visit (AST::InherentImpl &impl) override\n   {\n@@ -2825,22 +2501,6 @@ class AttrVisitor : public AST::ASTVisitor\n \n     // strip inherent impl items if required\n     expand_pointer_allow_strip (impl.get_impl_items ());\n-\n-#if 0\n-    auto &impl_items = impl.get_impl_items ();\n-    for (int i = 0; i < impl_items.size ();)\n-      {\n-\tauto &item = impl_items[i];\n-\n-\t// mark for stripping if required\n-\titem->accept_vis (*this);\n-\n-\tif (item->is_marked_for_strip ())\n-\t  impl_items.erase (impl_items.begin () + i);\n-\telse\n-\t  i++;\n-      }\n-#endif\n   }\n   void visit (AST::TraitImpl &impl) override\n   {\n@@ -2881,22 +2541,6 @@ class AttrVisitor : public AST::ASTVisitor\n \n     // strip trait impl items if required\n     expand_pointer_allow_strip (impl.get_impl_items ());\n-\n-#if 0\n-    auto &impl_items = impl.get_impl_items ();\n-    for (int i = 0; i < impl_items.size ();)\n-      {\n-\tauto &item = impl_items[i];\n-\n-\t// mark for stripping if required\n-\titem->accept_vis (*this);\n-\n-\tif (item->is_marked_for_strip ())\n-\t  impl_items.erase (impl_items.begin () + i);\n-\telse\n-\t  i++;\n-      }\n-#endif\n   }\n   void visit (AST::ExternalStaticItem &item) override\n   {\n@@ -2952,29 +2596,6 @@ class AttrVisitor : public AST::ASTVisitor\n \t// increment if nothing else happens\n \t++it;\n       }\n-#if 0\n-    for (int i = 0; i < params.size ();)\n-      {\n-\tauto &param = params[i];\n-\n-\tauto &param_attrs = param.get_outer_attrs ();\n-\texpander.expand_cfg_attrs (param_attrs);\n-\tif (expander.fails_cfg_with_expand (param_attrs))\n-\t  {\n-\t    params.erase (params.begin () + i);\n-\t    continue;\n-\t  }\n-\n-\tauto &type = param.get_type ();\n-\ttype->accept_vis (*this);\n-\tif (type->is_marked_for_strip ())\n-\t  rust_error_at (type->get_locus_slow (),\n-\t\t\t \"cannot strip type in this position\");\n-\n-\t// increment if nothing else happens\n-\ti++;\n-      }\n-#endif\n     /* NOTE: these are extern function params, which may have different\n      * rules and restrictions to \"normal\" function params. So expansion\n      * handled separately. */\n@@ -3014,22 +2635,6 @@ class AttrVisitor : public AST::ASTVisitor\n \n     // strip external items if required\n     expand_pointer_allow_strip (block.get_extern_items ());\n-\n-#if 0\n-    auto &extern_items = block.get_extern_items ();\n-    for (int i = 0; i < extern_items.size ();)\n-      {\n-\tauto &item = extern_items[i];\n-\n-\t// mark for stripping if required\n-\titem->accept_vis (*this);\n-\n-\tif (item->is_marked_for_strip ())\n-\t  extern_items.erase (extern_items.begin () + i);\n-\telse\n-\t  i++;\n-      }\n-#endif\n   }\n \n   // I don't think it would be possible to strip macros without expansion\n@@ -3185,21 +2790,6 @@ class AttrVisitor : public AST::ASTVisitor\n     // assuming you can strip struct pattern fields\n     expand_pointer_allow_strip (elems.get_struct_pattern_fields ());\n \n-#if 0\n-    auto &fields = elems.get_struct_pattern_fields ();\n-    for (int i = 0; i < fields.size ();)\n-      {\n-\tauto &field = fields[i];\n-\n-\tfield->accept_vis (*this);\n-\n-\tif (field->is_marked_for_strip ())\n-\t  fields.erase (fields.begin () + i);\n-\telse\n-\t  i++;\n-      }\n-#endif\n-\n     // assuming you can strip the \"..\" part\n     if (elems.has_etc ())\n       {\n@@ -3530,29 +3120,6 @@ class AttrVisitor : public AST::ASTVisitor\n \t// increment if nothing else happens\n \t++it;\n       }\n-#if 0\n-    for (int i = 0; i < params.size ();)\n-      {\n-\tauto &param = params[i];\n-\n-\tauto &param_attrs = param.get_outer_attrs ();\n-\texpander.expand_cfg_attrs (param_attrs);\n-\tif (expander.fails_cfg_with_expand (param_attrs))\n-\t  {\n-\t    params.erase (params.begin () + i);\n-\t    continue;\n-\t  }\n-\n-\tauto &type = param.get_type ();\n-\ttype->accept_vis (*this);\n-\tif (type->is_marked_for_strip ())\n-\t  rust_error_at (type->get_locus_slow (),\n-\t\t\t \"cannot strip type in this position\");\n-\n-\t// increment if nothing else happens\n-\ti++;\n-      }\n-#endif\n \n     /* TODO: assuming that variadic nature cannot be stripped. If this\n      * is not true, then have code here to do so. */\n@@ -3798,20 +3365,6 @@ MacroExpander::expand_crate ()\n \t++it;\n     }\n \n-#if 0\n-  for (int i = 0; i < items.size ();)\n-    {\n-      auto &item = items[i];\n-\n-      // mark for stripping if required\n-      item->accept_vis (attr_visitor);\n-\n-      if (item->is_marked_for_strip ())\n-\titems.erase (items.begin () + i);\n-      else\n-\ti++;\n-    }\n-#endif\n   // TODO: should recursive attribute and macro expansion be done in the same\n   // transversal? Or in separate ones like currently?\n "}]}