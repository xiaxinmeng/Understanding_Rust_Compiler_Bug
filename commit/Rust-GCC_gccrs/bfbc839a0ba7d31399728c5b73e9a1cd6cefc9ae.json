{"sha": "bfbc839a0ba7d31399728c5b73e9a1cd6cefc9ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZiYzgzOWEwYmE3ZDMxMzk5NzI4YzViNzNlOWExY2Q2Y2VmYzlhZQ==", "commit": {"author": {"name": "Marcel B\u00f6hme", "email": "boehme.marcel@gmail.com", "date": "2016-05-02T17:06:40Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2016-05-02T17:06:40Z"}, "message": "Demangler integer overflow fixes from Marcel B\u00f6hme.\n\n\tPR c++/70498\n\t* cp-demangle.c: Parse numbers as integer instead of long to avoid\n\toverflow after sanity checks. Include <limits.h> if available.\n\t(INT_MAX): Define if necessary.\n\t(d_make_template_param): Takes integer argument instead of long.\n\t(d_make_function_param): Likewise.\n\t(d_append_num): Likewise.\n\t(d_identifier): Likewise.\n\t(d_number): Parse as and return integer.\n\t(d_compact_number): Handle overflow.\n\t(d_source_name): Change variable type to integer for parsed number.\n\t(d_java_resource): Likewise.\n\t(d_special_name): Likewise.\n\t(d_discriminator): Likewise.\n\t(d_unnamed_type): Likewise.\n\t* testsuite/demangle-expected: Add regression test cases.\n\nFrom-SVN: r235767", "tree": {"sha": "1b8741b43eaf24ec813b24240428e1f12d730a11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b8741b43eaf24ec813b24240428e1f12d730a11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfbc839a0ba7d31399728c5b73e9a1cd6cefc9ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfbc839a0ba7d31399728c5b73e9a1cd6cefc9ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfbc839a0ba7d31399728c5b73e9a1cd6cefc9ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfbc839a0ba7d31399728c5b73e9a1cd6cefc9ae/comments", "author": {"login": "dbgbench", "id": 29189320, "node_id": "MDQ6VXNlcjI5MTg5MzIw", "avatar_url": "https://avatars.githubusercontent.com/u/29189320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbgbench", "html_url": "https://github.com/dbgbench", "followers_url": "https://api.github.com/users/dbgbench/followers", "following_url": "https://api.github.com/users/dbgbench/following{/other_user}", "gists_url": "https://api.github.com/users/dbgbench/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbgbench/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbgbench/subscriptions", "organizations_url": "https://api.github.com/users/dbgbench/orgs", "repos_url": "https://api.github.com/users/dbgbench/repos", "events_url": "https://api.github.com/users/dbgbench/events{/privacy}", "received_events_url": "https://api.github.com/users/dbgbench/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "818b88a7a1be36183bc4bbc24535329389d6178e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/818b88a7a1be36183bc4bbc24535329389d6178e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/818b88a7a1be36183bc4bbc24535329389d6178e"}], "stats": {"total": 85, "additions": 61, "deletions": 24}, "files": [{"sha": "1407cd3ff980f3a3b1890042eef268d9de437df3", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfbc839a0ba7d31399728c5b73e9a1cd6cefc9ae/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfbc839a0ba7d31399728c5b73e9a1cd6cefc9ae/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=bfbc839a0ba7d31399728c5b73e9a1cd6cefc9ae", "patch": "@@ -1,3 +1,22 @@\n+2016-05-02  Marcel B\u00f6hme  <boehme.marcel@gmail.com>\n+\n+\tPR c++/70498\n+\t* cp-demangle.c: Parse numbers as integer instead of long to avoid\n+\toverflow after sanity checks. Include <limits.h> if available.\n+\t(INT_MAX): Define if necessary.\n+\t(d_make_template_param): Takes integer argument instead of long.\n+\t(d_make_function_param): Likewise.\n+\t(d_append_num): Likewise.\n+\t(d_identifier): Likewise.\n+\t(d_number): Parse as and return integer.\n+\t(d_compact_number): Handle overflow.\n+\t(d_source_name): Change variable type to integer for parsed number.\n+\t(d_java_resource): Likewise.\n+\t(d_special_name): Likewise.\n+\t(d_discriminator): Likewise.\n+\t(d_unnamed_type): Likewise.\n+\t* testsuite/demangle-expected: Add regression test cases.\n+\n 2016-04-30  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* configure: Remove SH5 support."}, {"sha": "aad0a5d565977077cbab1cce88658e75868f45a6", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfbc839a0ba7d31399728c5b73e9a1cd6cefc9ae/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfbc839a0ba7d31399728c5b73e9a1cd6cefc9ae/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=bfbc839a0ba7d31399728c5b73e9a1cd6cefc9ae", "patch": "@@ -128,6 +128,13 @@ extern char *alloca ();\n # endif /* alloca */\n #endif /* HAVE_ALLOCA_H */\n \n+#ifdef HAVE_LIMITS_H\n+#include <limits.h>\n+#endif\n+#ifndef INT_MAX\n+# define INT_MAX       (int)(((unsigned int) ~0) >> 1)          /* 0x7FFFFFFF */ \n+#endif\n+\n #include \"ansidecl.h\"\n #include \"libiberty.h\"\n #include \"demangle.h\"\n@@ -398,7 +405,7 @@ d_make_dtor (struct d_info *, enum gnu_v3_dtor_kinds,\n              struct demangle_component *);\n \n static struct demangle_component *\n-d_make_template_param (struct d_info *, long);\n+d_make_template_param (struct d_info *, int);\n \n static struct demangle_component *\n d_make_sub (struct d_info *, const char *, int);\n@@ -421,9 +428,9 @@ static struct demangle_component *d_unqualified_name (struct d_info *);\n \n static struct demangle_component *d_source_name (struct d_info *);\n \n-static long d_number (struct d_info *);\n+static int d_number (struct d_info *);\n \n-static struct demangle_component *d_identifier (struct d_info *, long);\n+static struct demangle_component *d_identifier (struct d_info *, int);\n \n static struct demangle_component *d_operator_name (struct d_info *);\n \n@@ -1119,7 +1126,7 @@ d_make_dtor (struct d_info *di, enum gnu_v3_dtor_kinds kind,\n /* Add a new template parameter.  */\n \n static struct demangle_component *\n-d_make_template_param (struct d_info *di, long i)\n+d_make_template_param (struct d_info *di, int i)\n {\n   struct demangle_component *p;\n \n@@ -1135,7 +1142,7 @@ d_make_template_param (struct d_info *di, long i)\n /* Add a new function parameter.  */\n \n static struct demangle_component *\n-d_make_function_param (struct d_info *di, long i)\n+d_make_function_param (struct d_info *di, int i)\n {\n   struct demangle_component *p;\n \n@@ -1620,7 +1627,7 @@ d_unqualified_name (struct d_info *di)\n static struct demangle_component *\n d_source_name (struct d_info *di)\n {\n-  long len;\n+  int len;\n   struct demangle_component *ret;\n \n   len = d_number (di);\n@@ -1633,12 +1640,12 @@ d_source_name (struct d_info *di)\n \n /* number ::= [n] <(non-negative decimal integer)>  */\n \n-static long\n+static int\n d_number (struct d_info *di)\n {\n   int negative;\n   char peek;\n-  long ret;\n+  int ret;\n \n   negative = 0;\n   peek = d_peek_char (di);\n@@ -1681,7 +1688,7 @@ d_number_component (struct d_info *di)\n /* identifier ::= <(unqualified source code identifier)>  */\n \n static struct demangle_component *\n-d_identifier (struct d_info *di, long len)\n+d_identifier (struct d_info *di, int len)\n {\n   const char *name;\n \n@@ -1702,7 +1709,7 @@ d_identifier (struct d_info *di, long len)\n   /* Look for something which looks like a gcc encoding of an\n      anonymous namespace, and replace it with a more user friendly\n      name.  */\n-  if (len >= (long) ANONYMOUS_NAMESPACE_PREFIX_LEN + 2\n+  if (len >= (int) ANONYMOUS_NAMESPACE_PREFIX_LEN + 2\n       && memcmp (name, ANONYMOUS_NAMESPACE_PREFIX,\n \t\t ANONYMOUS_NAMESPACE_PREFIX_LEN) == 0)\n     {\n@@ -1870,7 +1877,7 @@ d_java_resource (struct d_info *di)\n {\n   struct demangle_component *p = NULL;\n   struct demangle_component *next = NULL;\n-  long len, i;\n+  int len, i;\n   char c;\n   const char *str;\n \n@@ -2012,7 +2019,7 @@ d_special_name (struct d_info *di)\n \tcase 'C':\n \t  {\n \t    struct demangle_component *derived_type;\n-\t    long offset;\n+\t    int offset;\n \t    struct demangle_component *base_type;\n \n \t    derived_type = cplus_demangle_type (di);\n@@ -2946,18 +2953,18 @@ d_pointer_to_member_type (struct d_info *di)\n \n /* <non-negative number> _ */\n \n-static long\n+static int\n d_compact_number (struct d_info *di)\n {\n-  long num;\n+  int num;\n   if (d_peek_char (di) == '_')\n     num = 0;\n   else if (d_peek_char (di) == 'n')\n     return -1;\n   else\n     num = d_number (di) + 1;\n \n-  if (! d_check_char (di, '_'))\n+  if (num < 0 || ! d_check_char (di, '_'))\n     return -1;\n   return num;\n }\n@@ -2969,7 +2976,7 @@ d_compact_number (struct d_info *di)\n static struct demangle_component *\n d_template_param (struct d_info *di)\n {\n-  long param;\n+  int param;\n \n   if (! d_check_char (di, 'T'))\n     return NULL;\n@@ -3171,9 +3178,10 @@ d_expression_1 (struct d_info *di)\n \t}\n       else\n \t{\n-\t  index = d_compact_number (di) + 1;\n-\t  if (index == 0)\n+\t  index = d_compact_number (di);\n+\t  if (index == INT_MAX || index == -1)\n \t    return NULL;\n+\t  index ++;\n \t}\n       return d_make_function_param (di, index);\n     }\n@@ -3502,7 +3510,7 @@ d_local_name (struct d_info *di)\n static int\n d_discriminator (struct d_info *di)\n {\n-  long discrim;\n+  int discrim;\n \n   if (d_peek_char (di) != '_')\n     return 1;\n@@ -3558,7 +3566,7 @@ static struct demangle_component *\n d_unnamed_type (struct d_info *di)\n {\n   struct demangle_component *ret;\n-  long num;\n+  int num;\n \n   if (! d_check_char (di, 'U'))\n     return NULL;\n@@ -4086,10 +4094,10 @@ d_append_string (struct d_print_info *dpi, const char *s)\n }\n \n static inline void\n-d_append_num (struct d_print_info *dpi, long l)\n+d_append_num (struct d_print_info *dpi, int l)\n {\n   char buf[25];\n-  sprintf (buf,\"%ld\", l);\n+  sprintf (buf,\"%d\", l);\n   d_append_string (dpi, buf);\n }\n "}, {"sha": "d124261121f59328b651692f0d20fa8a900abf91", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfbc839a0ba7d31399728c5b73e9a1cd6cefc9ae/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfbc839a0ba7d31399728c5b73e9a1cd6cefc9ae/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=bfbc839a0ba7d31399728c5b73e9a1cd6cefc9ae", "patch": "@@ -4422,12 +4422,22 @@ void baz<int>(A<sizeof (foo((int)(), (floatcomplex )00000000_00000000))>*)\n _Z3fooI1FEN1XIXszdtcl1PclcvT__EEE5arrayEE4TypeEv\n X<sizeof ((P(((F)())())).array)>::Type foo<F>()\n #\n-# Tests a use-after-free problem\n+# Tests a use-after-free problem PR70481\n \n _Q.__0\n ::Q.(void)\n #\n-# Tests a use-after-free problem\n+# Tests a use-after-free problem PR70481\n \n _Q10-__9cafebabe.\n cafebabe.::-(void)\n+#\n+# Tests integer overflow problem PR70492\n+\n+__vt_90000000000cafebabe\n+__vt_90000000000cafebabe\n+#\n+# Tests write access violation PR70498\n+\n+_Z80800000000000000000000\n+_Z80800000000000000000000"}]}