{"sha": "ed24b9f26546b6780c0c130858041483daffb80a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQyNGI5ZjI2NTQ2YjY3ODBjMGMxMzA4NTgwNDE0ODNkYWZmYjgwYQ==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-04-15T17:43:05Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-04-15T17:43:05Z"}, "message": "Initial revision\n\nFrom-SVN: r11787", "tree": {"sha": "128cb0fba9762c53d192f372f2b4d4a0950e6629", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/128cb0fba9762c53d192f372f2b4d4a0950e6629"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed24b9f26546b6780c0c130858041483daffb80a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed24b9f26546b6780c0c130858041483daffb80a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed24b9f26546b6780c0c130858041483daffb80a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed24b9f26546b6780c0c130858041483daffb80a/comments", "author": null, "committer": null, "parents": [{"sha": "f47c02fa79ae06338b50cb475fb4503cce921562", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f47c02fa79ae06338b50cb475fb4503cce921562", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f47c02fa79ae06338b50cb475fb4503cce921562"}], "stats": {"total": 227, "additions": 227, "deletions": 0}, "files": [{"sha": "4234b84fc04c39a6ad5121e571edadd520ce6a02", "filename": "gcc/choose-temp.c", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed24b9f26546b6780c0c130858041483daffb80a/gcc%2Fchoose-temp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed24b9f26546b6780c0c130858041483daffb80a/gcc%2Fchoose-temp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fchoose-temp.c?ref=ed24b9f26546b6780c0c130858041483daffb80a", "patch": "@@ -0,0 +1,139 @@\n+/* Utility to pick a temporary directory.\n+   Copyright (C) 1996 Free Software Foundation, Inc.\n+\n+This file is part of the libiberty library.\n+Libiberty is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Library General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+Libiberty is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+Library General Public License for more details.\n+\n+You should have received a copy of the GNU Library General Public\n+License along with libiberty; see the file COPYING.LIB.  If\n+not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* This file exports one function: choose_temp_base.  */\n+\n+#ifndef _WIN32\n+#include <sys/file.h>   /* May get R_OK, etc. on some systems.  */\n+#endif\n+\n+#ifndef R_OK\n+#define R_OK 4\n+#define W_OK 2\n+#define X_OK 1\n+#endif\n+\n+#ifdef IN_GCC\n+#include \"config.h\"\n+#include \"gansidecl.h\"\n+extern char *xmalloc ();\n+#else\n+#include \"ansidecl.h\"\n+#include \"libiberty.h\"\n+#if defined (__MSDOS__) || defined (_WIN32)\n+#define DIR_SEPARATOR '\\\\'\n+#endif\n+#endif\n+\n+#ifndef DIR_SEPARATOR\n+#define DIR_SEPARATOR '/'\n+#endif\n+\n+/* On MSDOS, write temp files in current dir\n+   because there's no place else we can expect to use.  */\n+/* ??? Although the current directory is tried as a last resort,\n+   this is left in so that on MSDOS it is prefered to /tmp on the\n+   off chance that someone requires this, since that was the previous\n+   behaviour.  */\n+#ifdef __MSDOS__\n+#ifndef P_tmpdir\n+#define P_tmpdir \".\"\n+#endif\n+#endif\n+\n+/* Name of temporary file.\n+   mktemp requires 6 trailing X's.  */\n+#define TEMP_FILE \"ccXXXXXX\"\n+\n+/* Subroutine of choose_temp_base.\n+   If BASE is non-NULL, returh it.\n+   Otherwise it checks if DIR is a usable directory.\n+   If success, DIR is returned.\n+   Otherwise NULL is returned.  */\n+\n+static char *\n+try (dir, base)\n+     char *dir, *base;\n+{\n+  if (base != 0)\n+    return base;\n+  if (dir != 0\n+      && access (dir, R_OK | W_OK) == 0)\n+    return dir;\n+  return 0;\n+}\n+\n+/* Return a prefix for temporary file names or NULL if unable to find one.\n+   The current directory is chosen if all else fails so the program is\n+   exited if a temporary directory can't be found (mktemp fails).\n+   The buffer for the result is obtained with xmalloc.  */\n+\n+char *\n+choose_temp_base ()\n+{\n+  char *base = 0;\n+  char *temp_filename;\n+  int len;\n+  char usrtmp[sizeof (\"/usr/tmp\")],tmp[sizeof (\"/tmp\")];\n+\n+#ifndef MPW\n+  base = try (getenv (\"TMPDIR\"), base);\n+  base = try (getenv (\"TMP\"), base);\n+  base = try (getenv (\"TEMP\"), base);\n+\n+#ifdef P_tmpdir\n+  base = try (P_tmpdir, base);\n+#endif\n+\n+  /* Try /usr/tmp, then /tmp.  */\n+  sprintf (usrtmp, \"%cusr%ctmp\", DIR_SEPARATOR, DIR_SEPARATOR);\n+  base = try (usrtmp, base);\n+  sprintf (tmp, \"%ctmp\", DIR_SEPARATOR);\n+  base = try (tmp, base);\n+ \n+  /* If all else fails, use the current directory!  */\n+  if (base == 0)\n+    base = \".\";\n+\n+#else /* MPW */\n+  base = \":\";\n+#endif\n+\n+  len = strlen (base);\n+  if (len == 0)\n+    abort ();\n+  temp_filename = xmalloc (len + 1 /*DIR_SEPARATOR*/\n+\t\t\t   + strlen (TEMP_FILE) + 1);\n+  strcpy (temp_filename, base);\n+\n+#ifndef MPW\n+  if (temp_filename[len-1] != '/'\n+      && temp_filename[len-1] != DIR_SEPARATOR)\n+    temp_filename[len++] = DIR_SEPARATOR;\n+#else /* MPW */\n+  if (temp_filename[len-1] != ':')\n+    temp_filename[len++] = ':';\n+#endif /* MPW */\n+  strcpy (temp_filename + len, TEMP_FILE);\n+\n+  mktemp (temp_filename);\n+  if (strlen (temp_filename) == 0)\n+    abort ();\n+  return temp_filename;\n+}"}, {"sha": "b2a250d0ea350d51bb42d25bd9a91ad466845c2b", "filename": "gcc/gansidecl.h", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed24b9f26546b6780c0c130858041483daffb80a/gcc%2Fgansidecl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed24b9f26546b6780c0c130858041483daffb80a/gcc%2Fgansidecl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgansidecl.h?ref=ed24b9f26546b6780c0c130858041483daffb80a", "patch": "@@ -0,0 +1,88 @@\n+/* ANSI and traditional C compatability macros.\n+   Copyright (C) 1996 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* This file mimics some of the support provided by include/ansidecl.h\n+   in binutils and gdb releases.\n+   ??? Over time the two should be merged into one.  */\n+\n+#ifndef\tANSIDECL_H\n+#define\tANSIDECL_H\n+\n+/* Add prototype support.  */\n+#ifndef PROTO\n+#if defined (USE_PROTOTYPES) ? USE_PROTOTYPES : defined (__STDC__)\n+#define PROTO(ARGS) ARGS\n+#else\n+#define PROTO(ARGS) ()\n+#endif\n+#endif\n+\n+#ifndef VPROTO\n+#ifdef __STDC__\n+#define PVPROTO(ARGS)\t\tARGS\n+#define VPROTO(ARGS)            ARGS\n+#define VA_START(va_list,var)  va_start(va_list,var)\n+#else\n+#define PVPROTO(ARGS)\t\t()\n+#define VPROTO(ARGS)            (va_alist) va_dcl\n+#define VA_START(va_list,var)  va_start(va_list)\n+#endif\n+#endif\n+\n+#ifndef STDIO_PROTO\n+#ifdef BUFSIZ\n+#define STDIO_PROTO(ARGS) PROTO(ARGS)\n+#else\n+#define STDIO_PROTO(ARGS) ()\n+#endif\n+#endif\n+\n+/* Define a generic NULL if one hasn't already been defined.  */\n+\n+#ifndef NULL\n+#define NULL 0\n+#endif\n+\n+#ifndef GENERIC_PTR\n+#if defined (USE_PROTOTYPES) ? USE_PROTOTYPES : defined (__STDC__)\n+#define GENERIC_PTR void *\n+#else\n+#define GENERIC_PTR char *\n+#endif\n+#endif\n+\n+#ifndef NULL_PTR\n+#define NULL_PTR ((GENERIC_PTR)0)\n+#endif\n+\n+#ifdef __STDC__\n+\n+#define\tPTR void *\n+\n+#else\n+\n+#define\tPTR char *\n+#ifndef const\n+#define const\n+#endif\n+\n+#endif /* ! __STDC__ */\n+\n+#endif /* ANSIDECL_H */"}]}