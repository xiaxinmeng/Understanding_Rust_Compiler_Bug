{"sha": "98d2c0ad6e11698fd7b24816e69d7ca1586663a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThkMmMwYWQ2ZTExNjk4ZmQ3YjI0ODE2ZTY5ZDdjYTE1ODY2NjNhNg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2011-07-26T16:04:53Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-07-26T16:04:53Z"}, "message": "i386.md (add->lea splitter): Implement using SWI mode iterator.\n\n\t* config/i386/i386.md (add->lea splitter): Implement using SWI\n\tmode iterator.  Change operand 2 predicate to <nonmemory_operand>.\n\t(add->lea zext splitter): Change operand 2 predicate to\n\tx86_64_nonmemory_operand.\n\nFrom-SVN: r176795", "tree": {"sha": "c2904bc5d7b95c1b65c774c098ca8e74e32d3093", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2904bc5d7b95c1b65c774c098ca8e74e32d3093"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98d2c0ad6e11698fd7b24816e69d7ca1586663a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98d2c0ad6e11698fd7b24816e69d7ca1586663a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98d2c0ad6e11698fd7b24816e69d7ca1586663a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98d2c0ad6e11698fd7b24816e69d7ca1586663a6/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c21510a9f1cc185569a39334fe99f7b88fa009a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c21510a9f1cc185569a39334fe99f7b88fa009a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c21510a9f1cc185569a39334fe99f7b88fa009a3"}], "stats": {"total": 38, "additions": 14, "deletions": 24}, "files": [{"sha": "ab5aaff9003c69cd74617e50e3f23a0e3417c959", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98d2c0ad6e11698fd7b24816e69d7ca1586663a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98d2c0ad6e11698fd7b24816e69d7ca1586663a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98d2c0ad6e11698fd7b24816e69d7ca1586663a6", "patch": "@@ -1,3 +1,10 @@\n+2011-07-26  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (add->lea splitter): Implement using SWI\n+\tmode iterator.  Change operand 2 predicate to <nonmemory_operand>.\n+\t(add->lea zext splitter): Change operand 2 predicate to\n+\tx86_64_nonmemory_operand.\n+\n 2011-07-26  Richard Guenther  <rguenther@suse.de>\n \n \t* predict.c (maybe_hot_frequency_p): Make sure a zero entry-block"}, {"sha": "e91a2999ffb5a47d9035b337c7e11fb8aa68ba3c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 7, "deletions": 24, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98d2c0ad6e11698fd7b24816e69d7ca1586663a6/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98d2c0ad6e11698fd7b24816e69d7ca1586663a6/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=98d2c0ad6e11698fd7b24816e69d7ca1586663a6", "patch": "@@ -5805,17 +5805,14 @@\n \n ;; Convert add to the lea pattern to avoid flags dependency.\n (define_split\n-  [(set (match_operand 0 \"register_operand\" \"\")\n-\t(plus (match_operand 1 \"register_operand\" \"\")\n-              (match_operand 2 \"nonmemory_operand\" \"\")))\n+  [(set (match_operand:SWI 0 \"register_operand\" \"\")\n+\t(plus (match_operand:SWI 1 \"register_operand\" \"\")\n+              (match_operand:SWI 2 \"<nonmemory_operand>\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"GET_MODE (operands[0]) == GET_MODE (operands[1])\n-   && (GET_MODE (operands[0]) == GET_MODE (operands[2])\n-       || GET_MODE (operands[2]) == VOIDmode)\n-   && reload_completed && ix86_lea_for_add_ok (insn, operands)\" \n+  \"reload_completed && ix86_lea_for_add_ok (insn, operands)\" \n   [(const_int 0)]\n {\n-  enum machine_mode mode = GET_MODE (operands[0]);\n+  enum machine_mode mode = <MODE>mode;\n   rtx pat;\n \n   if (GET_MODE_SIZE (mode) < GET_MODE_SIZE (SImode))\n@@ -5832,28 +5829,14 @@\n   DONE;\n })\n \n-;; Convert add to the lea pattern to avoid flags dependency.\n-;; ??? This pattern handles immediate operands that do not satisfy immediate\n-;; operand predicate (TARGET_LEGITIMATE_CONSTANT_P) in the previous pattern.\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t (match_operand:DI 2 \"x86_64_immediate_operand\" \"\")))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && reload_completed \n-   && true_regnum (operands[0]) != true_regnum (operands[1])\"\n-  [(set (match_dup 0)\n-\t(plus:DI (match_dup 1) (match_dup 2)))])\n-\n ;; Convert add to the lea pattern to avoid flags dependency.\n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(zero_extend:DI\n \t  (plus:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"\"))))\n+\t\t   (match_operand:SI 2 \"x86_64_nonmemory_operand\" \"\"))))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && reload_completed\n-   && ix86_lea_for_add_ok (insn, operands)\"\n+  \"TARGET_64BIT && reload_completed && ix86_lea_for_add_ok (insn, operands)\"\n   [(set (match_dup 0)\n \t(zero_extend:DI (plus:SI (match_dup 1) (match_dup 2))))])\n "}]}