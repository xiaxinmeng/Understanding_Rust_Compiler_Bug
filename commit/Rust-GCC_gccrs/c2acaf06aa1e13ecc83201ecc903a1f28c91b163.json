{"sha": "c2acaf06aa1e13ecc83201ecc903a1f28c91b163", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJhY2FmMDZhYTFlMTNlY2M4MzIwMWVjYzkwM2ExZjI4YzkxYjE2Mw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-07-21T00:55:20Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-07-21T00:55:20Z"}, "message": "gensupport.c (old_preds): Don't reference PREDICATE_CODES.\n\n\t* gensupport.c (old_preds): Don't reference PREDICATE_CODES.\n\t(old_special_pred_table): Don't reference\n\tSPECIAL_MODE_PREDICATES.\n\t* system.h (PREDICATE_CODES, SPECIAL_MODE_PREDICATES): Poison.\n\t* config/arc/arc.h: Don't mention PREDICATE_CODES.\n\t* config/sh/predicates.h: Don't mention\n\tSPECIAL_MODE_PREDICATES.\n\t* doc/tm.texi (PREDICATE_CODES, SPECIAL_MODE_PREDICATES):\n\tRemove.\n\nFrom-SVN: r102215", "tree": {"sha": "02a50ce7cf4f0f62266ea97a15fe935fba0d7a8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02a50ce7cf4f0f62266ea97a15fe935fba0d7a8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2acaf06aa1e13ecc83201ecc903a1f28c91b163", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2acaf06aa1e13ecc83201ecc903a1f28c91b163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2acaf06aa1e13ecc83201ecc903a1f28c91b163", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2acaf06aa1e13ecc83201ecc903a1f28c91b163/comments", "author": null, "committer": null, "parents": [{"sha": "40be89481afb537f10184567e6a434026ca63a93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40be89481afb537f10184567e6a434026ca63a93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40be89481afb537f10184567e6a434026ca63a93"}], "stats": {"total": 97, "additions": 23, "deletions": 74}, "files": [{"sha": "30f292d5dd5160ef87c771f0f7398a75ac83e76b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2acaf06aa1e13ecc83201ecc903a1f28c91b163/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2acaf06aa1e13ecc83201ecc903a1f28c91b163/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2acaf06aa1e13ecc83201ecc903a1f28c91b163", "patch": "@@ -1,3 +1,15 @@\n+2005-07-20  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* gensupport.c (old_preds): Don't reference PREDICATE_CODES.\n+\t(old_special_pred_table): Don't reference\n+\tSPECIAL_MODE_PREDICATES.\n+\t* system.h (PREDICATE_CODES, SPECIAL_MODE_PREDICATES): Poison.\n+\t* config/arc/arc.h: Don't mention PREDICATE_CODES.\n+\t* config/sh/predicates.h: Don't mention\n+\tSPECIAL_MODE_PREDICATES.\n+\t* doc/tm.texi (PREDICATE_CODES, SPECIAL_MODE_PREDICATES):\n+\tRemove.\n+\n 2005-07-20  DJ Delorie  <dj@redhat.com>\n \n \t* config.gcc: Add m32c-elf support."}, {"sha": "524a88a4e4f68e2dac3056d4ef778f24c944c98b", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2acaf06aa1e13ecc83201ecc903a1f28c91b163/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2acaf06aa1e13ecc83201ecc903a1f28c91b163/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=c2acaf06aa1e13ecc83201ecc903a1f28c91b163", "patch": "@@ -23,7 +23,6 @@ Boston, MA 02110-1301, USA.  */\n \n /* Things to do:\n \n-   - PREDICATE_CODES\n    - incscc, decscc?\n    - print active compiler options in assembler output\n */"}, {"sha": "87281c3b49bc891151f64c98d60cfab9b5edf640", "filename": "gcc/config/sh/predicates.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2acaf06aa1e13ecc83201ecc903a1f28c91b163/gcc%2Fconfig%2Fsh%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2acaf06aa1e13ecc83201ecc903a1f28c91b163/gcc%2Fconfig%2Fsh%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fpredicates.md?ref=c2acaf06aa1e13ecc83201ecc903a1f28c91b163", "patch": "@@ -77,17 +77,17 @@\n   return 0;\n })\n \n-;; Like arith_reg_dest, but this predicate belongs to\n-;; SPECIAL_MODE_PREDICATES.\n+;; Like arith_reg_dest, but this predicate is defined with\n+;; define_special_predicate, not define_predicate.\n \n (define_special_predicate \"any_arith_reg_dest\"\n   (match_code \"subreg,reg\")\n {\n   return arith_reg_dest (op, mode);\n })\n \n-;; Like register_operand, but this predicate belongs to\n-;; SPECIAL_MODE_PREDICATES.\n+;; Like register_operand, but this predicate is defined with\n+;; define_special_predicate, not define_predicate.\n \n (define_special_predicate \"any_register_operand\"\n   (match_code \"subreg,reg\")"}, {"sha": "a6703b19c8e253b47f549a0a694a0375eb44b137", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2acaf06aa1e13ecc83201ecc903a1f28c91b163/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2acaf06aa1e13ecc83201ecc903a1f28c91b163/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=c2acaf06aa1e13ecc83201ecc903a1f28c91b163", "patch": "@@ -8667,56 +8667,6 @@ is in effect.  The default is to return false to use @code{__cxa_atexit}.\n @c prevent bad page break with this line\n Here are several miscellaneous parameters.\n \n-@defmac PREDICATE_CODES\n-Define this if you have defined special-purpose predicates in the file\n-@file{@var{machine}.c}.  This macro is called within an initializer of an\n-array of structures.  The first field in the structure is the name of a\n-predicate and the second field is an array of rtl codes.  For each\n-predicate, list all rtl codes that can be in expressions matched by the\n-predicate.  The list should have a trailing comma.  Here is an example\n-of two entries in the list for a typical RISC machine:\n-\n-@smallexample\n-#define PREDICATE_CODES \\\n-  @{\"gen_reg_rtx_operand\", @{SUBREG, REG@}@},  \\\n-  @{\"reg_or_short_cint_operand\", @{SUBREG, REG, CONST_INT@}@},\n-@end smallexample\n-\n-Defining this macro does not affect the generated code (however,\n-incorrect definitions that omit an rtl code that may be matched by the\n-predicate can cause the compiler to malfunction).  Instead, it allows\n-the table built by @file{genrecog} to be more compact and efficient,\n-thus speeding up the compiler.  The most important predicates to include\n-in the list specified by this macro are those used in the most insn\n-patterns.\n-\n-For each predicate function named in @code{PREDICATE_CODES}, a\n-declaration will be generated in @file{insn-codes.h}.\n-\n-Use of this macro is deprecated; use @code{define_predicate} instead.\n-@xref{Defining Predicates}.\n-@end defmac\n-\n-@defmac SPECIAL_MODE_PREDICATES\n-Define this if you have special predicates that know special things\n-about modes.  Genrecog will warn about certain forms of\n-@code{match_operand} without a mode; if the operand predicate is\n-listed in @code{SPECIAL_MODE_PREDICATES}, the warning will be\n-suppressed.\n-\n-Here is an example from the IA-32 port (@code{ext_register_operand}\n-specially checks for @code{HImode} or @code{SImode} in preparation\n-for a byte extraction from @code{%ah} etc.).\n-\n-@smallexample\n-#define SPECIAL_MODE_PREDICATES \\\n-  \"ext_register_operand\",\n-@end smallexample\n-\n-Use of this macro is deprecated; use @code{define_special_predicate}\n-instead.  @xref{Defining Predicates}.\n-@end defmac\n-\n @defmac HAS_LONG_COND_BRANCH\n Define this boolean macro to indicate whether or not your architecture\n has conditional branches that can span all of memory.  It is used in"}, {"sha": "2f6f54da465a5b11819501a7b4c49a0d6ecfc90c", "filename": "gcc/gensupport.c", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2acaf06aa1e13ecc83201ecc903a1f28c91b163/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2acaf06aa1e13ecc83201ecc903a1f28c91b163/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=c2acaf06aa1e13ecc83201ecc903a1f28c91b163", "patch": "@@ -1218,10 +1218,7 @@ add_predicate (struct pred_data *pred)\n }\n \n /* This array gives the initial content of the predicate table.  It\n-   has entries for all predicates defined in recog.c.  The back end\n-   can define PREDICATE_CODES to give additional entries for the\n-   table; this is considered an obsolete mechanism (use\n-   define_predicate instead).  */\n+   has entries for all predicates defined in recog.c.  */\n \n struct old_pred_table\n {\n@@ -1251,31 +1248,21 @@ static const struct old_pred_table old_preds[] = {\n   {\"indirect_operand\", {SUBREG, MEM}},\n   {\"comparison_operator\", {EQ, NE, LE, LT, GE, GT, LEU, LTU, GEU, GTU,\n \t\t\t   UNORDERED, ORDERED, UNEQ, UNGE, UNGT, UNLE,\n-\t\t\t   UNLT, LTGT}},\n-#ifdef PREDICATE_CODES\n-  PREDICATE_CODES\n-#endif\n+\t\t\t   UNLT, LTGT}}\n };\n #define NUM_KNOWN_OLD_PREDS ARRAY_SIZE (old_preds)\n \n-/* This table gives the initial set of special predicates.  It has\n-   entries for all special predicates defined in recog.c.  The back\n-   end can define SPECIAL_MODE_PREDICATES to give additional entries\n-   for the table; this is considered an obsolete mechanism (use\n-   define_special_predicate instead).  */\n+/* This table gives the set of special predicates.  It has entries for\n+   all special predicates defined in recog.c.  */\n static const char *const old_special_pred_table[] = {\n   \"address_operand\",\n   \"pmode_register_operand\",\n-#ifdef SPECIAL_MODE_PREDICATES\n-  SPECIAL_MODE_PREDICATES\n-#endif\n };\n \n #define NUM_OLD_SPECIAL_MODE_PREDS ARRAY_SIZE (old_special_pred_table)\n \n /* Initialize the table of predicate definitions, starting with\n-   the information we have on generic predicates, and the old-style\n-   PREDICATE_CODES definitions.  */\n+   the information we have on generic predicates.  */\n \n static void\n init_predicate_table (void)"}, {"sha": "48105fe7a8e03be62655e7af26a0e9b6662613f0", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2acaf06aa1e13ecc83201ecc903a1f28c91b163/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2acaf06aa1e13ecc83201ecc903a1f28c91b163/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=c2acaf06aa1e13ecc83201ecc903a1f28c91b163", "patch": "@@ -740,7 +740,8 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tCASE_DROPS_THROUGH TARGET_BELL TARGET_BS TARGET_CR TARGET_DIGIT0   \\\n         TARGET_ESC TARGET_FF TARGET_NEWLINE TARGET_TAB TARGET_VT\t   \\\n         LINK_LIBGCC_SPECIAL DONT_ACCESS_GBLS_AFTER_EPILOGUE\t\t   \\\n-\tTARGET_OPTIONS TARGET_SWITCHES EXTRA_CC_MODES FINALIZE_PIC\n+\tTARGET_OPTIONS TARGET_SWITCHES EXTRA_CC_MODES FINALIZE_PIC\t   \\\n+\tPREDICATE_CODES SPECIAL_MODE_PREDICATES\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}]}