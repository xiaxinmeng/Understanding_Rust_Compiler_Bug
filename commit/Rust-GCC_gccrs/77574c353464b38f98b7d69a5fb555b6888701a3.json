{"sha": "77574c353464b38f98b7d69a5fb555b6888701a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc1NzRjMzUzNDY0YjM4Zjk4YjdkNjlhNWZiNTU1YjY4ODg3MDFhMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-01-29T14:45:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-01-29T14:45:44Z"}, "message": "re PR middle-end/58742 (pointer arithmetic simplification)\n\n2014-01-29  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/58742\n\t* tree-ssa-forwprop.c (associate_pointerplus): Rename to\n\tassociate_pointerplus_align.\n\t(associate_pointerplus_diff): New function.\n\t(associate_pointerplus): Likewise.  Call associate_pointerplus_align\n\tand associate_pointerplus_diff.\n\n\t* gcc.dg/pr58742-1.c: New testcase.\n\t* gcc.dg/pr58742-2.c: Likewise.\n\t* gcc.dg/pr58742-3.c: Likewise.\n\nFrom-SVN: r207239", "tree": {"sha": "0b29ae9817e081fdd5d933b5bcbf8bebda1d3615", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b29ae9817e081fdd5d933b5bcbf8bebda1d3615"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77574c353464b38f98b7d69a5fb555b6888701a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77574c353464b38f98b7d69a5fb555b6888701a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77574c353464b38f98b7d69a5fb555b6888701a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77574c353464b38f98b7d69a5fb555b6888701a3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "15b25b242b7165045c40850b3759330c39ff1c02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15b25b242b7165045c40850b3759330c39ff1c02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15b25b242b7165045c40850b3759330c39ff1c02"}], "stats": {"total": 155, "additions": 154, "deletions": 1}, "files": [{"sha": "c81432d0d9f4823411e67f7c1b1be4765652cbcc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77574c353464b38f98b7d69a5fb555b6888701a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77574c353464b38f98b7d69a5fb555b6888701a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77574c353464b38f98b7d69a5fb555b6888701a3", "patch": "@@ -1,3 +1,12 @@\n+2014-01-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/58742\n+\t* tree-ssa-forwprop.c (associate_pointerplus): Rename to\n+\tassociate_pointerplus_align.\n+\t(associate_pointerplus_diff): New function.\n+\t(associate_pointerplus): Likewise.  Call associate_pointerplus_align\n+\tand associate_pointerplus_diff.\n+\n 2014-01-29  Richard Biener  <rguenther@suse.de>\n \n \t* lto-streamer.h (LTO_major_version): Bump to 3."}, {"sha": "f330ee037ec6fa16399af4c41968f9a54597a14e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77574c353464b38f98b7d69a5fb555b6888701a3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77574c353464b38f98b7d69a5fb555b6888701a3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77574c353464b38f98b7d69a5fb555b6888701a3", "patch": "@@ -1,3 +1,10 @@\n+2014-01-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/58742\n+\t* gcc.dg/pr58742-1.c: New testcase.\n+\t* gcc.dg/pr58742-2.c: Likewise.\n+\t* gcc.dg/pr58742-3.c: Likewise.\n+\n 2014-01-29  Renlin Li  <Renlin.Li@arm.com>\n \n \t* gcc.target/arm/ftest-armv7ve-arm.c: New."}, {"sha": "94f56273f4956bdea690ebd1d9b5eebb5a31845c", "filename": "gcc/testsuite/gcc.dg/pr58742-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77574c353464b38f98b7d69a5fb555b6888701a3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr58742-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77574c353464b38f98b7d69a5fb555b6888701a3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr58742-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr58742-1.c?ref=77574c353464b38f98b7d69a5fb555b6888701a3", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-cddce1\" } */\n+\n+int *\n+fx (int *b, int *e)\n+{\n+  __SIZE_TYPE__ p = e - b;\n+  /* The first forwprop pass should optimize this to return e;  */\n+  return b + p;\n+}\n+\n+/* { dg-final { scan-tree-dump \"return e\" \"cddce1\" } } */\n+/* { dg-final { cleanup-tree-dump \"cddce1\" } } */"}, {"sha": "e0011e950caf3370659561e4d2cf5d287ec1e793", "filename": "gcc/testsuite/gcc.dg/pr58742-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77574c353464b38f98b7d69a5fb555b6888701a3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr58742-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77574c353464b38f98b7d69a5fb555b6888701a3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr58742-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr58742-2.c?ref=77574c353464b38f98b7d69a5fb555b6888701a3", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-cddce1\" } */\n+\n+__SIZE_TYPE__\n+fx (char *a, __SIZE_TYPE__ sz)\n+{\n+  char *b = a + sz;\n+  /* The first forwprop pass should optimize this to return sz;  */\n+  return b - a;\n+}\n+\n+/* { dg-final { scan-tree-dump \"return sz\" \"cddce1\" } } */\n+/* { dg-final { cleanup-tree-dump \"cddce1\" } } */"}, {"sha": "f4e95e64547e205bc9647998220347e7b0d41ed8", "filename": "gcc/testsuite/gcc.dg/pr58742-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77574c353464b38f98b7d69a5fb555b6888701a3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr58742-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77574c353464b38f98b7d69a5fb555b6888701a3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr58742-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr58742-3.c?ref=77574c353464b38f98b7d69a5fb555b6888701a3", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-cddce1\" } */\n+\n+int *\n+fx (int *a, int sz)\n+{\n+  int *b = a + sz;\n+  b = b - sz;\n+  /* forwprop together with FRE should optimize this to return a;  */\n+  return b;\n+}\n+\n+/* { dg-final { scan-tree-dump \"return a\" \"cddce1\" } } */\n+/* { dg-final { cleanup-tree-dump \"cddce1\" } } */"}, {"sha": "ebdd8f546f2702550cb9939ca35644f1c40fc73c", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 98, "deletions": 1, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77574c353464b38f98b7d69a5fb555b6888701a3/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77574c353464b38f98b7d69a5fb555b6888701a3/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=77574c353464b38f98b7d69a5fb555b6888701a3", "patch": "@@ -2802,7 +2802,7 @@ associate_plusminus (gimple_stmt_iterator *gsi)\n    true if anything changed, false otherwise.  */\n \n static bool\n-associate_pointerplus (gimple_stmt_iterator *gsi)\n+associate_pointerplus_align (gimple_stmt_iterator *gsi)\n {\n   gimple stmt = gsi_stmt (*gsi);\n   gimple def_stmt;\n@@ -2850,6 +2850,103 @@ associate_pointerplus (gimple_stmt_iterator *gsi)\n   return true;\n }\n \n+/* Associate operands of a POINTER_PLUS_EXPR assignmen at *GSI.  Returns\n+   true if anything changed, false otherwise.  */\n+\n+static bool\n+associate_pointerplus_diff (gimple_stmt_iterator *gsi)\n+{\n+  gimple stmt = gsi_stmt (*gsi);\n+  gimple def_stmt;\n+  tree ptr1, rhs;\n+\n+  /* Pattern match\n+       tem1 = (long) ptr1;\n+       tem2 = (long) ptr2;\n+       tem3 = tem2 - tem1;\n+       tem4 = (unsigned long) tem3;\n+       tem5 = ptr1 + tem4;\n+     and produce\n+       tem5 = ptr2;  */\n+  ptr1 = gimple_assign_rhs1 (stmt);\n+  rhs = gimple_assign_rhs2 (stmt);\n+  if (TREE_CODE (rhs) != SSA_NAME)\n+    return false;\n+  gimple minus = SSA_NAME_DEF_STMT (rhs);\n+  /* Conditionally look through a sign-changing conversion.  */\n+  if (is_gimple_assign (minus)\n+      && CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (minus))\n+      && (TYPE_PRECISION (TREE_TYPE (gimple_assign_rhs1 (minus)))\n+\t  == TYPE_PRECISION (TREE_TYPE (rhs)))\n+      && TREE_CODE (gimple_assign_rhs1 (minus)) == SSA_NAME)\n+    minus = SSA_NAME_DEF_STMT (gimple_assign_rhs1 (minus));\n+  if (!is_gimple_assign (minus))\n+    return false;\n+  if (gimple_assign_rhs_code (minus) != MINUS_EXPR)\n+    return false;\n+  rhs = gimple_assign_rhs2 (minus);\n+  if (TREE_CODE (rhs) != SSA_NAME)\n+    return false;\n+  def_stmt = SSA_NAME_DEF_STMT (rhs);\n+  if (!is_gimple_assign (def_stmt)\n+      || ! CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (def_stmt))\n+      || gimple_assign_rhs1 (def_stmt) != ptr1)\n+    return false;\n+  rhs = gimple_assign_rhs1 (minus);\n+  if (TREE_CODE (rhs) != SSA_NAME)\n+    return false;\n+  def_stmt = SSA_NAME_DEF_STMT (rhs);\n+  if (!is_gimple_assign (def_stmt)\n+      || ! CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (def_stmt)))\n+    return false;\n+  rhs = gimple_assign_rhs1 (def_stmt);\n+  if (! useless_type_conversion_p (TREE_TYPE (ptr1), TREE_TYPE (rhs)))\n+    return false;\n+\n+  gimple_assign_set_rhs_with_ops (gsi, TREE_CODE (rhs), rhs, NULL_TREE);\n+  update_stmt (stmt);\n+\n+  return true;\n+}\n+\n+/* Associate operands of a POINTER_PLUS_EXPR assignmen at *GSI.  Returns\n+   true if anything changed, false otherwise.  */\n+\n+static bool\n+associate_pointerplus (gimple_stmt_iterator *gsi)\n+{\n+  gimple stmt = gsi_stmt (*gsi);\n+  gimple def_stmt;\n+  tree ptr, off1, off2;\n+\n+  if (associate_pointerplus_align (gsi)\n+      || associate_pointerplus_diff (gsi))\n+    return true;\n+\n+  /* Associate (p +p off1) +p off2 as (p +p (off1 + off2)).  */\n+  ptr = gimple_assign_rhs1 (stmt);\n+  off1 = gimple_assign_rhs2 (stmt);\n+  if (TREE_CODE (ptr) != SSA_NAME)\n+    return false;\n+  def_stmt = SSA_NAME_DEF_STMT (ptr);\n+  if (!is_gimple_assign (def_stmt)\n+      || gimple_assign_rhs_code (def_stmt) != POINTER_PLUS_EXPR)\n+    return false;\n+  ptr = gimple_assign_rhs1 (def_stmt);\n+  off2 = gimple_assign_rhs2 (def_stmt);\n+  if (!types_compatible_p (TREE_TYPE (off1), TREE_TYPE (off2)))\n+    return false;\n+\n+  tree off = make_ssa_name (TREE_TYPE (off1), NULL);\n+  gimple ostmt = gimple_build_assign_with_ops (PLUS_EXPR, off, off1, off2);\n+  gsi_insert_before (gsi, ostmt, GSI_SAME_STMT);\n+\n+  gimple_assign_set_rhs_with_ops (gsi, POINTER_PLUS_EXPR, ptr, off);\n+  update_stmt (stmt);\n+\n+  return true;\n+}\n+\n /* Combine two conversions in a row for the second conversion at *GSI.\n    Returns 1 if there were any changes made, 2 if cfg-cleanup needs to\n    run.  Else it returns 0.  */"}]}