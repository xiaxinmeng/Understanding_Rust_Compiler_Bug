{"sha": "9b57b627f005582f50c30ada127a688c2b9e0f7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI1N2I2MjdmMDA1NTgyZjUwYzMwYWRhMTI3YTY4OGMyYjllMGY3Zg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-01-20T22:08:17Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-01-20T22:08:17Z"}, "message": "varray.c: Include hashtab.h\n\n\n\t* varray.c:  Include hashtab.h\n\t(varray_descriptor): New structure.\n\t(hash_descriptor, eq_descriptor, varray_descriptor,\n\tprint_statistics): New static functions\n\t(varray_init, varray_grow): Update statistics\n\t(dump_varray_statistics): New function.\n\t* varray.h (dump_varray_statistics): Declare.\n\t* toplev.c (finalize): Call it.\n\t* Makefile.in (varray.o): Add dependency.\n\nFrom-SVN: r76232", "tree": {"sha": "3766da594c6f5644ba0542c0536288c8cbe6769b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3766da594c6f5644ba0542c0536288c8cbe6769b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b57b627f005582f50c30ada127a688c2b9e0f7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b57b627f005582f50c30ada127a688c2b9e0f7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b57b627f005582f50c30ada127a688c2b9e0f7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b57b627f005582f50c30ada127a688c2b9e0f7f/comments", "author": null, "committer": null, "parents": [{"sha": "d5d2603ff4d6b25ac7d2e804a3d00fb648e08832", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5d2603ff4d6b25ac7d2e804a3d00fb648e08832", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5d2603ff4d6b25ac7d2e804a3d00fb648e08832"}], "stats": {"total": 136, "additions": 134, "deletions": 2}, "files": [{"sha": "dc323843542eb83ac33cb1c7ef12d8a8edced14e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b57b627f005582f50c30ada127a688c2b9e0f7f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b57b627f005582f50c30ada127a688c2b9e0f7f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b57b627f005582f50c30ada127a688c2b9e0f7f", "patch": "@@ -1,3 +1,15 @@\n+2004-01-20  Jan Hubicka  <jh@suse.cz>\n+\n+\t* varray.c:  Include hashtab.h\n+\t(varray_descriptor): New structure.\n+\t(hash_descriptor, eq_descriptor, varray_descriptor,\n+\tprint_statistics): New static functions\n+\t(varray_init, varray_grow): Update statistics\n+\t(dump_varray_statistics): New function.\n+\t* varray.h (dump_varray_statistics): Declare.\n+\t* toplev.c (finalize): Call it.\n+\t* Makefile.in (varray.o): Add dependency.\n+\n 2004-01-20  Jan Hubicka  <jh@suse.cz>\n \n \t* cselib.c: Include alloc-pool.h"}, {"sha": "7ebe77f2c320f96caa67846f9f8ce08b4516cd78", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b57b627f005582f50c30ada127a688c2b9e0f7f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b57b627f005582f50c30ada127a688c2b9e0f7f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=9b57b627f005582f50c30ada127a688c2b9e0f7f", "patch": "@@ -1731,7 +1731,8 @@ bitmap.o : bitmap.c $(CONFIG_H) $(SYSTEM_H)  coretypes.h $(GTM_H) $(RTL_H) flags\n global.o : global.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) flags.h \\\n    reload.h function.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h insn-config.h output.h \\\n    toplev.h $(TM_P_H)\n-varray.o : varray.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) varray.h $(GGC_H) errors.h\n+varray.o : varray.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) varray.h $(GGC_H) errors.h \\\n+   $(HASHTAB_H)\n ra.o : ra.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TM_P_H) insn-config.h \\\n    $(RECOG_H) $(INTEGRATE_H) function.h $(REGS_H) $(OBSTACK_H) hard-reg-set.h \\\n    $(BASIC_BLOCK_H) df.h $(EXPR_H) output.h toplev.h flags.h reload.h ra.h"}, {"sha": "ea4c56358db48f2170df71b94035a9123e4c3b18", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b57b627f005582f50c30ada127a688c2b9e0f7f/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b57b627f005582f50c30ada127a688c2b9e0f7f/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=9b57b627f005582f50c30ada127a688c2b9e0f7f", "patch": "@@ -4586,6 +4586,7 @@ finalize (void)\n       stringpool_statistics ();\n       dump_tree_statistics ();\n       dump_rtx_statistics ();\n+      dump_varray_statistics ();\n     }\n \n   /* Free up memory for the benefit of leak detectors.  */"}, {"sha": "d8af31903b929d60c12cfc3c30a2e4b9086724c6", "filename": "gcc/varray.c", "status": "modified", "additions": 117, "deletions": 1, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b57b627f005582f50c30ada127a688c2b9e0f7f/gcc%2Fvarray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b57b627f005582f50c30ada127a688c2b9e0f7f/gcc%2Fvarray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarray.c?ref=9b57b627f005582f50c30ada127a688c2b9e0f7f", "patch": "@@ -27,9 +27,60 @@\n #include \"tm.h\"\n #include \"varray.h\"\n #include \"ggc.h\"\n+#include \"hashtab.h\"\n \n #define VARRAY_HDR_SIZE (sizeof (struct varray_head_tag) - sizeof (varray_data))\n \n+#ifdef GATHER_STATISTICS\n+\n+/* Store infromation about each particular varray.  */\n+struct varray_descriptor\n+{\n+  const char *name;\n+  int allocated;\n+  int created;\n+  int resized;\n+  int copied;\n+};\n+\n+/* Hashtable mapping varray names to descriptors.  */\n+static htab_t varray_hash;\n+\n+/* Hashtable helpers.  */\n+static hashval_t\n+hash_descriptor (const void *p)\n+{\n+  const struct varray_descriptor *d = p;\n+  return htab_hash_pointer (d->name);\n+}\n+static int\n+eq_descriptor (const void *p1, const void *p2)\n+{\n+  const struct varray_descriptor *d = p1;\n+  return d->name == p2;\n+}\n+\n+/* For given name, return descriptor, create new if needed.  */\n+static struct varray_descriptor *\n+varray_descriptor (const char *name)\n+{\n+  struct varray_descriptor **slot;\n+\n+  if (!varray_hash)\n+    varray_hash = htab_create (10, hash_descriptor, eq_descriptor, NULL);\n+\n+  slot = (struct varray_descriptor **)\n+    htab_find_slot_with_hash (varray_hash, name,\n+\t\t    \t      htab_hash_pointer (name),\n+\t\t\t      1);\n+  if (*slot)\n+    return *slot;\n+  *slot = xcalloc (sizeof (**slot), 1);\n+  (*slot)->name = name;\n+  return *slot;\n+}\n+#endif\n+\n /* Do not add any more non-GC items here.  Please either remove or GC\n    those items that are not GCed.  */\n \n@@ -67,6 +118,12 @@ varray_init (size_t num_elements, enum varray_data_enum element_kind,\n {\n   size_t data_size = num_elements * element[element_kind].size;\n   varray_type ptr;\n+#ifdef GATHER_STATISTICS\n+  struct varray_descriptor *desc = varray_descriptor (name);\n+\n+  desc->created++;\n+  desc->allocated += data_size + VARRAY_HDR_SIZE;\n+#endif\n   if (element[element_kind].uses_ggc)\n     ptr = ggc_alloc_cleared (VARRAY_HDR_SIZE + data_size);\n   else\n@@ -85,12 +142,20 @@ varray_type\n varray_grow (varray_type va, size_t n)\n {\n   size_t old_elements = va->num_elements;\n-\n   if (n != old_elements)\n     {\n       size_t elem_size = element[va->type].size;\n       size_t old_data_size = old_elements * elem_size;\n       size_t data_size = n * elem_size;\n+#ifdef GATHER_STATISTICS\n+      struct varray_descriptor *desc = varray_descriptor (va->name);\n+      varray_type oldva = va;\n+\n+      if (data_size > old_data_size)\n+        desc->allocated += data_size - old_data_size;\n+      desc->resized ++;\n+#endif\n+\n \n       if (element[va->type].uses_ggc)\n \tva = ggc_realloc (va, VARRAY_HDR_SIZE + data_size);\n@@ -99,6 +164,10 @@ varray_grow (varray_type va, size_t n)\n       va->num_elements = n;\n       if (n > old_elements)\n \tmemset (&va->data.c[old_data_size], 0, data_size - old_data_size);\n+#ifdef GATHER_STATISTICS\n+      if (oldva != va)\n+        desc->copied++;\n+#endif\n     }\n \n   return va;\n@@ -137,3 +206,50 @@ varray_underflow (varray_type va, const char *file, int line,\n }\n \n #endif\n+\n+/* Output per-varray statistics.  */\n+#ifdef GATHER_STATISTICS\n+\n+/* Used to accumulate statistics about varray sizes.  */\n+struct output_info\n+{\n+  int count;\n+  int size;\n+};\n+\n+/* Called via htab_traverse.  Output varray descriptor pointed out by SLOT\n+   and update statistics.  */\n+static int\n+print_statistics (void **slot, void *b)\n+{\n+  struct varray_descriptor *d = (struct varray_descriptor *) *slot;\n+  struct output_info *i = (struct output_info *) b;\n+\n+  if (d->allocated)\n+    {\n+      fprintf (stderr, \"%-21s %6d %10d %7d %7d\\n\", d->name,\n+\t       d->created, d->allocated, d->resized, d->copied);\n+      i->size += d->allocated;\n+      i->count += d->created;\n+    }\n+  return 1;\n+}\n+#endif\n+\n+/* Output per-varray memory usage statistics.  */\n+void dump_varray_statistics (void)\n+{\n+#ifdef GATHER_STATISTICS\n+  struct output_info info;\n+\n+  fprintf (stderr, \"\\nVARRAY Kind            Count      Bytes  Resized copied\\n\");\n+  fprintf (stderr, \"-------------------------------------------------------\\n\");\n+  info.count = 0;\n+  info.size = 0;\n+  htab_traverse (varray_hash, print_statistics, &info);\n+  fprintf (stderr, \"-------------------------------------------------------\\n\");\n+  fprintf (stderr, \"%-20s %7d %10d\\n\",\n+\t   \"Total\", info.count, info.size);\n+  fprintf (stderr, \"-------------------------------------------------------\\n\");\n+#endif\n+}"}, {"sha": "0f011c402f11c28e02f54c622dca33c2007ccdc1", "filename": "gcc/varray.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b57b627f005582f50c30ada127a688c2b9e0f7f/gcc%2Fvarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b57b627f005582f50c30ada127a688c2b9e0f7f/gcc%2Fvarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarray.h?ref=9b57b627f005582f50c30ada127a688c2b9e0f7f", "patch": "@@ -223,6 +223,8 @@ extern varray_type varray_grow (varray_type, size_t);\n \n extern void varray_clear (varray_type);\n \n+extern void dump_varray_statistics (void);\n+\n /* Check for VARRAY_xxx macros being in bound.  */\n #if defined ENABLE_CHECKING && (GCC_VERSION >= 2007)\n extern void varray_check_failed (varray_type, size_t, const char *, int,"}]}