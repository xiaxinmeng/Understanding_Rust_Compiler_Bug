{"sha": "38b305d0a3f999fcc52d5bcef25c2df1e6df4337", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhiMzA1ZDBhM2Y5OTlmY2M1MmQ1YmNlZjI1YzJkZjFlNmRmNDMzNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2004-03-08T22:24:45Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2004-03-08T22:24:45Z"}, "message": "re PR c++/13170 (ICE in build_base_path)\n\n        PR c++/13170\n        * decl.c (xref_tag): Remove attribute handling.\n        * cp-tree.h: Adjust prototype.\n        * decl.c, parser.c, rtti.c: Adjust callers.\n        * parser.c (cp_parser_class_head): Pass back attributes in the\n        class head.\n        (cp_parser_class_specifier): Adjust.\n\nFrom-SVN: r79129", "tree": {"sha": "56bedce81cd77320067da595944568deeb32f6dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56bedce81cd77320067da595944568deeb32f6dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38b305d0a3f999fcc52d5bcef25c2df1e6df4337", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38b305d0a3f999fcc52d5bcef25c2df1e6df4337", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38b305d0a3f999fcc52d5bcef25c2df1e6df4337", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38b305d0a3f999fcc52d5bcef25c2df1e6df4337/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5a66cfb2f1274869df984c106783809c379950ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a66cfb2f1274869df984c106783809c379950ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a66cfb2f1274869df984c106783809c379950ec"}], "stats": {"total": 75, "additions": 42, "deletions": 33}, "files": [{"sha": "c64bb212ae0834e1c9d1b0097852a48019e3bec2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b305d0a3f999fcc52d5bcef25c2df1e6df4337/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b305d0a3f999fcc52d5bcef25c2df1e6df4337/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=38b305d0a3f999fcc52d5bcef25c2df1e6df4337", "patch": "@@ -1,3 +1,13 @@\n+2004-03-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/13170\n+\t* decl.c (xref_tag): Remove attribute handling.\n+\t* cp-tree.h: Adjust prototype.\n+\t* decl.c, parser.c, rtti.c: Adjust callers.\n+\t* parser.c (cp_parser_class_head): Pass back attributes in the\n+\tclass head.\n+\t(cp_parser_class_specifier): Adjust.\n+\n 2004-03-08  Matt Austern  <austern@apple.com>\n \n \tPR debug/14079"}, {"sha": "55b077e8eeeb46694a4dd8e0b8863d0e88dde23a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b305d0a3f999fcc52d5bcef25c2df1e6df4337/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b305d0a3f999fcc52d5bcef25c2df1e6df4337/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=38b305d0a3f999fcc52d5bcef25c2df1e6df4337", "patch": "@@ -3647,7 +3647,7 @@ extern tree get_scope_of_declarator             (tree);\n extern void grok_special_member_properties\t(tree);\n extern int grok_ctor_properties\t\t\t(tree, tree);\n extern bool grok_op_properties\t\t\t(tree, int, bool);\n-extern tree xref_tag\t\t\t\t(enum tag_types, tree, tree, bool, bool);\n+extern tree xref_tag\t\t\t\t(enum tag_types, tree, bool, bool);\n extern tree xref_tag_from_type\t\t\t(tree, tree, int);\n extern void xref_basetypes\t\t\t(tree, tree);\n extern tree start_enum\t\t\t\t(tree);"}, {"sha": "8c2405fef1db2145220acd5dcdc390a673bb202d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b305d0a3f999fcc52d5bcef25c2df1e6df4337/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b305d0a3f999fcc52d5bcef25c2df1e6df4337/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=38b305d0a3f999fcc52d5bcef25c2df1e6df4337", "patch": "@@ -9303,8 +9303,7 @@ check_elaborated_type_specifier (enum tag_types tag_code,\n    Define the tag as a forward-reference if it is not defined.\n \n    If a declaration is given, process it here, and report an error if\n-   multiple declarations are not identical.  ATTRIBUTE is the attribute\n-   appeared in this declaration.\n+   multiple declarations are not identical.\n \n    GLOBALIZE is false when this is also a definition.  Only look in\n    the current frame for the name (since C++ allows new names in any\n@@ -9314,7 +9313,7 @@ check_elaborated_type_specifier (enum tag_types tag_code,\n    a set of template parameters.  */\n \n tree\n-xref_tag (enum tag_types tag_code, tree name, tree attributes, \n+xref_tag (enum tag_types tag_code, tree name,\n \t  bool globalize, bool template_header_p)\n {\n   enum tree_code code;\n@@ -9470,16 +9469,6 @@ xref_tag (enum tag_types tag_code, tree name, tree attributes,\n \tredeclare_class_template (t, current_template_parms);\n     }\n \n-  /* Add attributes only when defining a class. */\n-  if (attributes)\n-    {\n-      /* The only place that xref_tag is called with non-null\n-\t attributes is in cp_parser_class_head(), when defining a\n-\t class.  */ \n-      my_friendly_assert (TYPE_ATTRIBUTES (t) == NULL_TREE, 20040113);\n-      TYPE_ATTRIBUTES (t) = attributes;\n-    }\n-\n   POP_TIMEVAR_AND_RETURN (TV_NAME_LOOKUP, t);\n }\n \n@@ -9496,7 +9485,7 @@ xref_tag_from_type (tree old, tree id, int globalize)\n   if (id == NULL_TREE)\n     id = TYPE_IDENTIFIER (old);\n \n-  return xref_tag (tag_kind, id, /*attributes=*/NULL_TREE, globalize, false);\n+  return xref_tag (tag_kind, id, globalize, false);\n }\n \n /* REF is a type (named NAME), for which we have just seen some"}, {"sha": "b633653203704bb485a8f0c2e591b5717fb42f77", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b305d0a3f999fcc52d5bcef25c2df1e6df4337/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b305d0a3f999fcc52d5bcef25c2df1e6df4337/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=38b305d0a3f999fcc52d5bcef25c2df1e6df4337", "patch": "@@ -1523,7 +1523,7 @@ static tree cp_parser_class_name\n static tree cp_parser_class_specifier\n   (cp_parser *);\n static tree cp_parser_class_head\n-  (cp_parser *, bool *);\n+  (cp_parser *, bool *, tree *);\n static enum tag_types cp_parser_class_key\n   (cp_parser *);\n static void cp_parser_member_specification_opt\n@@ -9293,7 +9293,6 @@ cp_parser_elaborated_type_specifier (cp_parser* parser,\n \t    warning (\"type attributes are honored only at type definition\");\n \n \t  type = xref_tag (tag_type, identifier,\n-\t\t\t   /*attributes=*/NULL_TREE,\n \t\t\t   (is_friend\n \t\t\t    || !is_declaration\n \t\t\t    || cp_lexer_next_token_is_not (parser->lexer,\n@@ -11786,7 +11785,7 @@ cp_parser_class_specifier (cp_parser* parser)\n {\n   cp_token *token;\n   tree type;\n-  tree attributes = NULL_TREE;\n+  tree attributes;\n   int has_trailing_semicolon;\n   bool nested_name_specifier_p;\n   unsigned saved_num_template_parameter_lists;\n@@ -11796,7 +11795,8 @@ cp_parser_class_specifier (cp_parser* parser)\n \n   /* Parse the class-head.  */\n   type = cp_parser_class_head (parser,\n-\t\t\t       &nested_name_specifier_p);\n+\t\t\t       &nested_name_specifier_p,\n+\t\t\t       &attributes);\n   /* If the class-head was a semantic disaster, skip the entire body\n      of the class.  */\n   if (!type)\n@@ -11839,17 +11839,14 @@ cp_parser_class_specifier (cp_parser* parser)\n      missing trailing `;'.  */\n   token = cp_lexer_peek_token (parser->lexer);\n   has_trailing_semicolon = (token->type == CPP_SEMICOLON);\n-  /* Look for attributes to apply to this class.  */\n+  /* Look for trailing attributes to apply to this class.  */\n   if (cp_parser_allow_gnu_extensions_p (parser))\n-    attributes = cp_parser_attributes_opt (parser);\n-  /* If we got any attributes in class_head, xref_tag will stick them in\n-     TREE_TYPE of the type.  Grab them now.  */\n-  if (type != error_mark_node)\n     {\n-      attributes = chainon (TYPE_ATTRIBUTES (type), attributes);\n-      TYPE_ATTRIBUTES (type) = NULL_TREE;\n-      type = finish_struct (type, attributes);\n+      tree sub_attr = cp_parser_attributes_opt (parser);\n+      attributes = chainon (attributes, sub_attr);\n     }\n+  if (type != error_mark_node)\n+    type = finish_struct (type, attributes);\n   if (pop_p)\n     pop_scope (CP_DECL_CONTEXT (TYPE_MAIN_DECL (type)));\n   /* If this class is not itself within the scope of another class,\n@@ -11956,7 +11953,8 @@ cp_parser_class_specifier (cp_parser* parser)\n \n static tree\n cp_parser_class_head (cp_parser* parser,\n-\t\t      bool* nested_name_specifier_p)\n+\t\t      bool* nested_name_specifier_p,\n+\t\t      tree *attributes_p)\n {\n   cp_token *token;\n   tree nested_name_specifier;\n@@ -12183,7 +12181,7 @@ cp_parser_class_head (cp_parser* parser,\n       /* If the class was unnamed, create a dummy name.  */\n       if (!id)\n \tid = make_anon_name ();\n-      type = xref_tag (class_key, id, attributes, /*globalize=*/false,\n+      type = xref_tag (class_key, id, /*globalize=*/false,\n \t\t       parser->num_template_parameter_lists);\n     }\n   else\n@@ -12267,6 +12265,7 @@ cp_parser_class_head (cp_parser* parser,\n       end_specialization ();\n       --parser->num_template_parameter_lists;\n     }\n+  *attributes_p = attributes;\n   return type;\n }\n "}, {"sha": "e9c06160bbe9c410d7f2729fe1c629426e6574e5", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b305d0a3f999fcc52d5bcef25c2df1e6df4337/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b305d0a3f999fcc52d5bcef25c2df1e6df4337/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=38b305d0a3f999fcc52d5bcef25c2df1e6df4337", "patch": "@@ -120,7 +120,7 @@ init_rtti_processing (void)\n   push_namespace (std_identifier);\n   type_info_type_node \n     = xref_tag (class_type, get_identifier (\"type_info\"),\n-\t\t/*attributes=*/NULL_TREE, true, false);\n+\t\ttrue, false);\n   pop_namespace ();\n   const_type_info_type = build_qualified_type (type_info_type_node, \n \t\t\t\t\t       TYPE_QUAL_CONST);\n@@ -635,7 +635,6 @@ build_dynamic_cast_1 (tree type, tree expr)\n \t      push_nested_namespace (ns);\n \t      tinfo_ptr = xref_tag (class_type,\n \t\t\t\t    get_identifier (\"__class_type_info\"),\n-\t\t\t\t    /*attributes=*/NULL_TREE,\n \t\t\t\t    true, false);\n \t      \n \t      tinfo_ptr = build_pointer_type\n@@ -777,7 +776,7 @@ tinfo_base_init (tree desc, tree target)\n   \n       push_nested_namespace (abi_node);\n       real_type = xref_tag (class_type, TINFO_REAL_NAME (desc),\n-\t\t\t    /*attributes=*/NULL_TREE, true, false);\n+\t\t\t    true, false);\n       pop_nested_namespace (abi_node);\n   \n       if (!COMPLETE_TYPE_P (real_type))\n@@ -1373,7 +1372,6 @@ emit_support_tinfos (void)\n   push_nested_namespace (abi_node);\n   bltn_type = xref_tag (class_type,\n \t\t\tget_identifier (\"__fundamental_type_info\"), \n-\t\t\t/*attributes=*/NULL_TREE,\n \t\t\ttrue, false);\n   pop_nested_namespace (abi_node);\n   if (!COMPLETE_TYPE_P (bltn_type))"}, {"sha": "1b227293c461b8e34442e7a7fcccc40cbbe549b0", "filename": "gcc/testsuite/g++.dg/ext/attrib14.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b305d0a3f999fcc52d5bcef25c2df1e6df4337/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b305d0a3f999fcc52d5bcef25c2df1e6df4337/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib14.C?ref=38b305d0a3f999fcc52d5bcef25c2df1e6df4337", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/13170\n+// The bogus attribute is ignored, but was in TYPE_ATTRIBUTES during parsing of the class,\n+// causing some variants to have it and some not.\n+\n+struct __attribute__((bogus)) A\n+{\n+    virtual ~A();\n+    void foo(const A&);\n+    void bar(const A&);\n+};\t\t\t\t// { dg-warning \"ignored\" \"\" }\n+\n+void A::foo(const A&)   {}\n+void A::bar(const A& a) { foo(a); }"}]}