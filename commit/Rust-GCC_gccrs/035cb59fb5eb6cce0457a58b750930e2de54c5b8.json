{"sha": "035cb59fb5eb6cce0457a58b750930e2de54c5b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM1Y2I1OWZiNWViNmNjZTA0NTdhNThiNzUwOTMwZTJkZTU0YzViOA==", "commit": {"author": {"name": "Easwaran Raman", "email": "eraman@google.com", "date": "2013-09-04T17:48:15Z"}, "committer": {"name": "Easwaran Raman", "email": "eraman@gcc.gnu.org", "date": "2013-09-04T17:48:15Z"}, "message": "re PR tree-optimization/57370 (compiler hangs in reassoc)\n\n2013-09-04  Easwaran Raman  <eraman@google.com>\n\n\tPR middle-end/57370\n\tPR tree-optimization/58011\n\t* tree-ssa-reassoc.c (get_stmt_uid_with_default): New function,\n\t(build_and_add_sum): Use it.\n\t(appears_later_in_bb): Simplify code.\n\ngcc/testsuite/ChangeLog:\n2013-09-04  Easwaran Raman  <eraman@google.com>\n\n\tPR middle-end/57370\n\tPR tree-optimization/58011\n\t* gfortran.dg/reassoc_12.f90: New testcase.\n\t* gcc.dg/tree-ssa/reassoc-31.c: New testcase.\n\nFrom-SVN: r202262", "tree": {"sha": "978a3db48b7e445927f02ae5baf19f5a0cba2a00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/978a3db48b7e445927f02ae5baf19f5a0cba2a00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/035cb59fb5eb6cce0457a58b750930e2de54c5b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/035cb59fb5eb6cce0457a58b750930e2de54c5b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/035cb59fb5eb6cce0457a58b750930e2de54c5b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/035cb59fb5eb6cce0457a58b750930e2de54c5b8/comments", "author": null, "committer": null, "parents": [{"sha": "07154e975621e4498123d3d60a5c6c13b6c4a8cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07154e975621e4498123d3d60a5c6c13b6c4a8cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07154e975621e4498123d3d60a5c6c13b6c4a8cf"}], "stats": {"total": 130, "additions": 118, "deletions": 12}, "files": [{"sha": "286aed5534428092333b2933918873ed6ce04ae4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/035cb59fb5eb6cce0457a58b750930e2de54c5b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/035cb59fb5eb6cce0457a58b750930e2de54c5b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=035cb59fb5eb6cce0457a58b750930e2de54c5b8", "patch": "@@ -1,3 +1,10 @@\n+2013-09-04  Easwaran Raman  <eraman@google.com>\n+\n+\tPR middle-end/57370\n+\t* tree-ssa-reassoc.c (get_stmt_uid_with_default): New function,\n+\t(build_and_add_sum): Use it.\n+\t(appears_later_in_bb): Simplify code.\n+\n 2013-09-04  Teresa Johnson  <tejohnson@google.com>\n \n \t* dumpfile.c (dump_finish): Don't close stderr/stdout."}, {"sha": "5f1939086aab276bbfe4c61d22564bb4a29ffff6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/035cb59fb5eb6cce0457a58b750930e2de54c5b8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/035cb59fb5eb6cce0457a58b750930e2de54c5b8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=035cb59fb5eb6cce0457a58b750930e2de54c5b8", "patch": "@@ -1,3 +1,10 @@\n+2013-09-04  Easwaran Raman  <eraman@google.com>\n+\n+\tPR middle-end/57370\n+\tPR tree-optimization/58011\n+\t* gfortran.dg/reassoc_12.f90: New testcase.\n+\t* gcc.dg/tree-ssa/reassoc-31.c: New testcase.\n+\n 2013-09-04  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* gcc.dg/attr-weakref-1.c: Skip on AIX."}, {"sha": "1c1527f135006ed6ce3c01f8ad3b9b93f54635f0", "filename": "gcc/testsuite/gcc.dg/tree-ssa/reassoc-31.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/035cb59fb5eb6cce0457a58b750930e2de54c5b8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/035cb59fb5eb6cce0457a58b750930e2de54c5b8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-31.c?ref=035cb59fb5eb6cce0457a58b750930e2de54c5b8", "patch": "@@ -0,0 +1,17 @@\n+/* PR tree-optimization/58011 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+int a, b;\n+\n+void f(unsigned p)\n+{\n+    unsigned *pp = &p;\n+\n+    if(!a)\n+        p = 0;\n+\n+    for(b = 0; b < 1; b++)\n+        if(3 * p + 5 * *pp)\n+            a = 0;\n+}\n+"}, {"sha": "7f4d70e31cac09a3f0fcf4b14759bb2e46b40a7d", "filename": "gcc/testsuite/gfortran.dg/reassoc_12.f90", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/035cb59fb5eb6cce0457a58b750930e2de54c5b8/gcc%2Ftestsuite%2Fgfortran.dg%2Freassoc_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/035cb59fb5eb6cce0457a58b750930e2de54c5b8/gcc%2Ftestsuite%2Fgfortran.dg%2Freassoc_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Freassoc_12.f90?ref=035cb59fb5eb6cce0457a58b750930e2de54c5b8", "patch": "@@ -0,0 +1,74 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -ffast-math\" }\n+! PR middle-end/57370\n+\n+ SUBROUTINE xb88_lr_adiabatic_lda_calc(e_ndrho_ndrho_ndrho, &\n+                                       grad_deriv,npoints, sx)\n+    IMPLICIT REAL*8 (t)\n+    INTEGER, PARAMETER :: dp=8\n+    REAL(kind=dp), DIMENSION(1:npoints) :: e_ndrho_ndrho_ndrho, &\n+                                           e_ndrho_ndrho_rho\n+      DO ii=1,npoints\n+          IF( grad_deriv >= 2 .OR. grad_deriv == -2 ) THEN\n+            t1425 = t233 * t557\n+            t1429 = beta * t225\n+            t1622 = t327 * t1621\n+            t1626 = t327 * t1625\n+            t1632 = t327 * t1631\n+            t1685 = t105 * t1684\n+            t2057 = t1636 + t8 * (t2635 + t3288)\n+          END IF\n+          IF( grad_deriv >= 3 .OR. grad_deriv == -3 ) THEN\n+            t5469 = t5440 - t5443 - t5446 - t5449 - &\n+                    t5451 - t5454 - t5456 + t5459  - &\n+                    t5462 + t5466 - t5468\n+            t5478 = 0.240e2_dp * t1616 * t973 * t645 * t1425\n+            t5489 = 0.1600000000e2_dp * t1429 * t1658\n+            t5531 = 0.160e2_dp * t112 * t1626\n+            t5533 = 0.160e2_dp * t112 * t1632\n+            t5537 = 0.160e2_dp * t112 * t1622\n+            t5541 = t5472 - t5478 - t5523 + t5525 + &\n+                    t5531 + t5533 + t5535 + t5537 + &\n+                    t5540\n+            t5565 = t112 * t1685\n+            t5575 = t5545 - t5548 + t5551 + t5553 - &\n+                    t5558 + t5560 - t5562 + t5564 - &\n+                    0.80e1_dp * t5565 + t5568 + t5572 + &\n+                    t5574\n+            t5611 = t5579 - t5585 + t5590 - t5595 + &\n+                    t5597 - t5602 + t5604 + t5607 + &\n+                    t5610\n+            t5613 = t5469 + t5541 + t5575 + t5611\n+            t6223 = t6189 - &\n+                    0.3333333336e0_dp  * t83 * t84 * t5613 + &\n+                    t6222\n+            t6227 = - t8 * (t5305 + t6223)\n+            e_ndrho_ndrho_rho(ii) = e_ndrho_ndrho_rho(ii) + &\n+                     t6227 * sx\n+            t6352 = t5440 - t5443 - t5446 - t5449 - &\n+                    t5451 - t5454 + &\n+                    0.40e1_dp * t102  * t327 * t2057 * t557 - &\n+                    t5456 + t5459 - t5462 + t5466 - &\n+                    t5468\n+            t6363 = t5480 - t5489 + &\n+                    0.9600000000e2_dp  * t1054 * t640 * t3679\n+            t6367 = t5472 - t5474 - t5478 - t5523 + &\n+                    t5525 + t5531 + t5533 + t5535 + &\n+                    t5537 - 0.20e1_dp * t102 * t105 * t6363 + &\n+                    t5540\n+            t6370 = t5545 - t5548 + t5551 + t5553 - &\n+                    t5558 + t5560 - t5562 + t5564  - &\n+                    0.40e1_dp * t5565 + &\n+                    t5568 + t5572 + t5574\n+            t6373 = t5579 - t5585 + t5590 - t5595 + &\n+                    t5597 - t5602 + t5604 + t5607 + &\n+                    t5610\n+            t6375 = t6352 + t6367 + t6370 + t6373\n+            t6380 = - 0.3333333336e0_dp * t83 * t84 * t6375 + t5701\n+            t6669 = -t4704 - t8 * (t6344 + t6380 + t6665)\n+            e_ndrho_ndrho_ndrho(ii) = e_ndrho_ndrho_ndrho(ii) + &\n+                     t6669 * sx\n+          END IF\n+      END DO\n+  END SUBROUTINE xb88_lr_adiabatic_lda_calc\n+"}, {"sha": "03c6c5dbfa4bb365d3f51c0a461495c804c67d98", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/035cb59fb5eb6cce0457a58b750930e2de54c5b8/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/035cb59fb5eb6cce0457a58b750930e2de54c5b8/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=035cb59fb5eb6cce0457a58b750930e2de54c5b8", "patch": "@@ -1141,6 +1141,14 @@ zero_one_operation (tree *def, enum tree_code opcode, tree op)\n   while (1);\n }\n \n+/* Returns the UID of STMT if it is non-NULL. Otherwise return 1.  */\n+\n+static inline unsigned\n+get_stmt_uid_with_default (gimple stmt)\n+{\n+  return stmt ? gimple_uid (stmt) : 1;\n+}\n+\n /* Builds one statement performing OP1 OPCODE OP2 using TMPVAR for\n    the result.  Places the statement after the definition of either\n    OP1 or OP2.  Returns the new statement.  */\n@@ -1165,12 +1173,8 @@ build_and_add_sum (tree type, tree op1, tree op2, enum tree_code opcode)\n   if ((!op1def || gimple_nop_p (op1def))\n       && (!op2def || gimple_nop_p (op2def)))\n     {\n-      gimple first_stmt;\n-      unsigned uid;\n       gsi = gsi_after_labels (single_succ (ENTRY_BLOCK_PTR));\n-      first_stmt = gsi_stmt (gsi);\n-      uid = first_stmt ? gimple_uid (first_stmt) : 1;\n-      gimple_set_uid (sum, uid);\n+      gimple_set_uid (sum, get_stmt_uid_with_default (gsi_stmt (gsi)));\n       gsi_insert_before (&gsi, sum, GSI_NEW_STMT);\n     }\n   else if ((!op1def || gimple_nop_p (op1def))\n@@ -1180,7 +1184,7 @@ build_and_add_sum (tree type, tree op1, tree op2, enum tree_code opcode)\n       if (gimple_code (op2def) == GIMPLE_PHI)\n \t{\n \t  gsi = gsi_after_labels (gimple_bb (op2def));\n-          gimple_set_uid (sum, gimple_uid (gsi_stmt (gsi)));\n+          gimple_set_uid (sum, get_stmt_uid_with_default (gsi_stmt (gsi)));\n \t  gsi_insert_before (&gsi, sum, GSI_NEW_STMT);\n \t}\n       else\n@@ -1207,7 +1211,7 @@ build_and_add_sum (tree type, tree op1, tree op2, enum tree_code opcode)\n       if (gimple_code (op1def) == GIMPLE_PHI)\n \t{\n \t  gsi = gsi_after_labels (gimple_bb (op1def));\n-          gimple_set_uid (sum, gimple_uid (op1def));\n+          gimple_set_uid (sum, get_stmt_uid_with_default (gsi_stmt (gsi)));\n \t  gsi_insert_before (&gsi, sum, GSI_NEW_STMT);\n \t}\n       else\n@@ -2860,7 +2864,7 @@ not_dominated_by (gimple a, gimple b)\n   basic_block bb_a, bb_b;\n   bb_a = gimple_bb (a);\n   bb_b = gimple_bb (b);\n-  return ((bb_a == bb_b && gimple_uid (a)  < gimple_uid (b))\n+  return ((bb_a == bb_b && gimple_uid (a) < gimple_uid (b))\n           || (bb_a != bb_b\n               && !dominated_by_p (CDI_DOMINATORS, bb_a, bb_b)));\n \n@@ -2874,10 +2878,7 @@ appears_later_in_bb (gimple stmt1, gimple stmt2)\n {\n   unsigned uid = gimple_uid (stmt1);\n   gimple_stmt_iterator gsi = gsi_for_stmt (stmt1);\n-  gsi_next (&gsi);\n-  if (gsi_end_p (gsi))\n-    return stmt1;\n-  for (; !gsi_end_p (gsi); gsi_next (&gsi))\n+  for (gsi_next (&gsi); !gsi_end_p (gsi); gsi_next (&gsi))\n     {\n       gimple stmt = gsi_stmt (gsi);\n "}]}