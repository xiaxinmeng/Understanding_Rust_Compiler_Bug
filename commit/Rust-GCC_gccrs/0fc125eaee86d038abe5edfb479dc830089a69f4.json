{"sha": "0fc125eaee86d038abe5edfb479dc830089a69f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZjMTI1ZWFlZTg2ZDAzOGFiZTVlZGZiNDc5ZGM4MzAwODlhNjlmNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-05-10T18:37:54Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-05-10T18:37:54Z"}, "message": "hashtable (hashtable_iterator<>::hashtable_iterator(), [...]): Add.\n\n2006-05-10  Paolo Carlini  <pcarlini@suse.de>\n\t    Peter Doerfler  <gcc@pdoerfler.com>\n\n\t* include/tr1/hashtable (hashtable_iterator<>::hashtable_iterator(),\n\thashtable_const_iterator<>::hashtable_const_iterator(),\n\tnode_iterator<>::node_iterator(),\n\tnode_const_iterator<>::node_const_iterator()): Add.\n\t(node_iterator<>::node_iterator(hash_node<>*),\n\tnode_const_iterator<>::node_const_iterator(hash_node<>*)): Tweak,\n\tremove default.\n\t* testsuite/tr1/6_containers/unordered/hashtable/\n\titerators_default_constructor.c: New.\n\nCo-Authored-By: Peter Doerfler <gcc@pdoerfler.com>\n\nFrom-SVN: r113681", "tree": {"sha": "c29c4e2d0913cf7f7ce42dc2a31854af6d479cb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c29c4e2d0913cf7f7ce42dc2a31854af6d479cb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fc125eaee86d038abe5edfb479dc830089a69f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fc125eaee86d038abe5edfb479dc830089a69f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fc125eaee86d038abe5edfb479dc830089a69f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fc125eaee86d038abe5edfb479dc830089a69f4/comments", "author": null, "committer": null, "parents": [{"sha": "3a7e3b6994153f59697d1ab2bc3e251daa63a4d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a7e3b6994153f59697d1ab2bc3e251daa63a4d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a7e3b6994153f59697d1ab2bc3e251daa63a4d7"}], "stats": {"total": 68, "additions": 62, "deletions": 6}, "files": [{"sha": "71c8b1e69dd200526e1c05a7604fbd903f937bbb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc125eaee86d038abe5edfb479dc830089a69f4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc125eaee86d038abe5edfb479dc830089a69f4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0fc125eaee86d038abe5edfb479dc830089a69f4", "patch": "@@ -1,3 +1,16 @@\n+2006-05-10  Paolo Carlini  <pcarlini@suse.de>\n+\t    Peter Doerfler  <gcc@pdoerfler.com>\n+\n+\t* include/tr1/hashtable (hashtable_iterator<>::hashtable_iterator(),\n+\thashtable_const_iterator<>::hashtable_const_iterator(),\n+\tnode_iterator<>::node_iterator(),\n+\tnode_const_iterator<>::node_const_iterator()): Add.\n+\t(node_iterator<>::node_iterator(hash_node<>*),\n+\tnode_const_iterator<>::node_const_iterator(hash_node<>*)): Tweak,\n+\tremove default.\n+\t* testsuite/tr1/6_containers/unordered/hashtable/\n+\titerators_default_constructor.c: New.\n+\n 2006-05-10  Marc Glisse  <marc.glisse@normalesup.org>\n \n \t* include/ext/pool_allocator.h: Add missing std:: qualifications."}, {"sha": "ad34a9c9a5950f9529f0ad4c4dfa9e9b16c04708", "filename": "libstdc++-v3/include/tr1/hashtable", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc125eaee86d038abe5edfb479dc830089a69f4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc125eaee86d038abe5edfb479dc830089a69f4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable?ref=0fc125eaee86d038abe5edfb479dc830089a69f4", "patch": "@@ -171,8 +171,11 @@ namespace Internal\n       typedef std::ptrdiff_t                           difference_type;\n       typedef std::forward_iterator_tag                iterator_category;\n \n+      node_iterator()\n+      : node_iterator_base<Value, cache>(0) { }\n+\n       explicit\n-      node_iterator(hash_node<Value, cache>* p = 0)\n+      node_iterator(hash_node<Value, cache>* p)\n       : node_iterator_base<Value, cache>(p) { }\n \n       reference\n@@ -209,8 +212,11 @@ namespace Internal\n       typedef std::ptrdiff_t                           difference_type;\n       typedef std::forward_iterator_tag                iterator_category;\n \n+      node_const_iterator()\n+      : node_iterator_base<Value, cache>(0) { }\n+\n       explicit\n-      node_const_iterator(hash_node<Value, cache>* p = 0)\n+      node_const_iterator(hash_node<Value, cache>* p)\n       : node_iterator_base<Value, cache>(p) { }\n \n       node_const_iterator(const node_iterator<Value, constant_iterators,\n@@ -246,8 +252,7 @@ namespace Internal\n     {\n       hashtable_iterator_base(hash_node<Value, cache>* node,\n \t\t\t      hash_node<Value, cache>** bucket)\n-      : m_cur_node(node), m_cur_bucket(bucket)\n-      { }\n+      : m_cur_node(node), m_cur_bucket(bucket) { }\n \n       void\n       incr()\n@@ -303,14 +308,17 @@ namespace Internal\n       typedef std::ptrdiff_t                           difference_type;\n       typedef std::forward_iterator_tag                iterator_category;\n \n+      hashtable_iterator()\n+      : hashtable_iterator_base<Value, cache>(0, 0) { }\n+\n       hashtable_iterator(hash_node<Value, cache>* p,\n \t\t\t hash_node<Value, cache>** b)\n       : hashtable_iterator_base<Value, cache>(p, b) { }\n \n       explicit\n       hashtable_iterator(hash_node<Value, cache>** b)\n       : hashtable_iterator_base<Value, cache>(*b, b) { }\n-  \n+\n       reference\n       operator*() const\n       { return this->m_cur_node->m_v; }\n@@ -345,14 +353,17 @@ namespace Internal\n       typedef std::ptrdiff_t                           difference_type;\n       typedef std::forward_iterator_tag                iterator_category;\n \n+      hashtable_const_iterator()\n+      : hashtable_iterator_base<Value, cache>(0, 0) { }\n+\n       hashtable_const_iterator(hash_node<Value, cache>* p,\n \t\t\t       hash_node<Value, cache>** b)\n       : hashtable_iterator_base<Value, cache>(p, b) { }\n \n       explicit\n       hashtable_const_iterator(hash_node<Value, cache>** b)\n       : hashtable_iterator_base<Value, cache>(*b, b) { }\n-  \n+\n       hashtable_const_iterator(const hashtable_iterator<Value,\n \t\t\t       constant_iterators, cache>& x)\n       : hashtable_iterator_base<Value, cache>(x.m_cur_node, x.m_cur_bucket) { }"}, {"sha": "17705aee04cedb29f6f8c417ec132f655fa2c5f9", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/hashtable/iterators_default_constructor.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc125eaee86d038abe5edfb479dc830089a69f4/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Fhashtable%2Fiterators_default_constructor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc125eaee86d038abe5edfb479dc830089a69f4/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Fhashtable%2Fiterators_default_constructor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Fhashtable%2Fiterators_default_constructor.cc?ref=0fc125eaee86d038abe5edfb479dc830089a69f4", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 6.3 Unordered associative containers\n+\n+#include <tr1/unordered_set>\n+\n+void\n+test01()\n+{\n+  std::tr1::unordered_set<int>::iterator                it;\n+  std::tr1::unordered_set<int>::const_iterator         cit;\n+  std::tr1::unordered_set<int>::local_iterator         lit;\n+  std::tr1::unordered_set<int>::const_local_iterator  clit;\n+}"}]}