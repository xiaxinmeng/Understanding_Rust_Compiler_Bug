{"sha": "90a8eab4a1292430467f68b65e5127f7760acc94", "node_id": "C_kwDOANBUbNoAKDkwYThlYWI0YTEyOTI0MzA0NjdmNjhiNjVlNTEyN2Y3NzYwYWNjOTQ", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2022-05-11T07:27:42Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2022-05-13T06:00:29Z"}, "message": "[PR105455] Set edge probabilities when hardening conditionals\n\nWhen turning unconditional edges into conditional, as in\ngimple-harden-conditionals.cc:insert_check_and_trap, the newly-created\nedge's probability comes out uninitialized, while the previously\nunconditional edge's probability is presumably\nprofile_probability::always.\n\nMixing initialized and uninitialized probabilities before expand\nbreaks predict.cc:force_edge_cold: the initialized probability may end\nup copied to a REG_BR_PROB note in a conditional branch insn, but if\nforce_edge_cold is called on that edge, it will find another edge with\nuninitialized probability and assume the note is absent.  Later on,\nrtl_verify_edges complains that the note does not match the\nprobability modified by force_edge_cold in the edge.\n\nThis patch sets probabilities for edges affected by hardening of\nconditionals, both the newly-created edges to trap blocks and the\npreviously-unconditional edges, so that the former are considered\nnever taken, while the latter are confirmed as always taken.\n\n\nfor  gcc/ChangeLog\n\n\tPR rtl-optimization/105455\n\t* gimple-harden-conditionals.cc (insert_check_and_trap): Set\n\tprobabilities for newly-conditional edges.\n\nfor  gcc/testsuite/ChangeLog\n\n\tPR rtl-optimization/105455\n\t* gcc.dg/pr105455.c: New.", "tree": {"sha": "2c4f4a28c74683ba083cf0c6a2703ccc024b9112", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c4f4a28c74683ba083cf0c6a2703ccc024b9112"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90a8eab4a1292430467f68b65e5127f7760acc94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90a8eab4a1292430467f68b65e5127f7760acc94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90a8eab4a1292430467f68b65e5127f7760acc94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90a8eab4a1292430467f68b65e5127f7760acc94/comments", "author": null, "committer": null, "parents": [{"sha": "8ab4b484153031c407b7d8c760b6a2605da1199a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ab4b484153031c407b7d8c760b6a2605da1199a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ab4b484153031c407b7d8c760b6a2605da1199a"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "19ceb8a4bd61e00caf345e1342fd5c1844a87733", "filename": "gcc/gimple-harden-conditionals.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90a8eab4a1292430467f68b65e5127f7760acc94/gcc%2Fgimple-harden-conditionals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90a8eab4a1292430467f68b65e5127f7760acc94/gcc%2Fgimple-harden-conditionals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-harden-conditionals.cc?ref=90a8eab4a1292430467f68b65e5127f7760acc94", "patch": "@@ -254,8 +254,10 @@ insert_check_and_trap (location_t loc, gimple_stmt_iterator *gsip,\n      equality.  */\n   single_succ_edge (chk)->flags &= ~EDGE_FALLTHRU;\n   single_succ_edge (chk)->flags |= neg_true_false_flag;\n+  single_succ_edge (chk)->probability = profile_probability::always ();\n   edge e = make_edge (chk, trp, true_false_flag);\n   e->goto_locus = loc;\n+  e->probability = profile_probability::never ();\n \n   if (dom_info_available_p (CDI_DOMINATORS))\n     set_immediate_dominator (CDI_DOMINATORS, trp, chk);"}, {"sha": "81e9154baa1c3970507697913b0109c277d07b41", "filename": "gcc/testsuite/gcc.dg/pr105455.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90a8eab4a1292430467f68b65e5127f7760acc94/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105455.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90a8eab4a1292430467f68b65e5127f7760acc94/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105455.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105455.c?ref=90a8eab4a1292430467f68b65e5127f7760acc94", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fharden-conditional-branches -funroll-loops --param max-loop-header-insns=1\" } */\n+\n+__attribute__ ((cold)) void\n+bar (void);\n+\n+void\n+foo (int x)\n+{\n+  if (x)\n+    {\n+      int i;\n+\n+      for (i = 0; i < 101; ++i)\n+        bar ();\n+    }\n+}"}]}