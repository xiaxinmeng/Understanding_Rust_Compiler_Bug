{"sha": "42c3898c1d9a5351eaac6ffd792a5d1aaa268435", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJjMzg5OGMxZDlhNTM1MWVhYWM2ZmZkNzkyYTVkMWFhYTI2ODQzNQ==", "commit": {"author": {"name": "Pascal Obry", "email": "obry@adacore.com", "date": "2008-04-08T06:42:41Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-04-08T06:42:41Z"}, "message": "g-sercom.ads, [...] (Data_Rate): Add B115200.\n\n2008-04-08  Pascal Obry  <obry@adacore.com>\n\n\t* g-sercom.ads, g-sercom.adb (Data_Rate): Add B115200.\n\t(Stop_Bits_Number): New type.\n\t(Parity_Check): Likewise.\n\t(Set): Add parameter to set the number of stop bits and\n\tthe parity. Parameter timeout is now a duration instead\n\tof a plain integer.\n\n\t* g-sercom-linux.adb:\n\tImplement the stop bits and parity support for GNU/Linux.\n\tFix handling of timeout, it must be given in tenth of seconds.\n\t\n\t* g-sercom-mingw.adb:\n\tImplement the stop bits and parity support for Windows.\n\tUse new s-win32.ads unit instead of declaring Win32 services\n\tdirectly into this body.\n\tUpdate handling of timeout as now a duration.\n\n\t* s-win32.ads, s-winext.ads: New files.\n\nFrom-SVN: r134003", "tree": {"sha": "846458809f617b6811dda5e74ec15d1be5265eef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/846458809f617b6811dda5e74ec15d1be5265eef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42c3898c1d9a5351eaac6ffd792a5d1aaa268435", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42c3898c1d9a5351eaac6ffd792a5d1aaa268435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42c3898c1d9a5351eaac6ffd792a5d1aaa268435", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42c3898c1d9a5351eaac6ffd792a5d1aaa268435/comments", "author": {"login": "TurboGit", "id": 467069, "node_id": "MDQ6VXNlcjQ2NzA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/467069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TurboGit", "html_url": "https://github.com/TurboGit", "followers_url": "https://api.github.com/users/TurboGit/followers", "following_url": "https://api.github.com/users/TurboGit/following{/other_user}", "gists_url": "https://api.github.com/users/TurboGit/gists{/gist_id}", "starred_url": "https://api.github.com/users/TurboGit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TurboGit/subscriptions", "organizations_url": "https://api.github.com/users/TurboGit/orgs", "repos_url": "https://api.github.com/users/TurboGit/repos", "events_url": "https://api.github.com/users/TurboGit/events{/privacy}", "received_events_url": "https://api.github.com/users/TurboGit/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e68c63e3800a7ff463fc0c41cd769569793fb53b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e68c63e3800a7ff463fc0c41cd769569793fb53b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e68c63e3800a7ff463fc0c41cd769569793fb53b"}], "stats": {"total": 796, "additions": 563, "deletions": 233}, "files": [{"sha": "cf8f805eb74a1e370702141ad5fa962e055716dc", "filename": "gcc/ada/g-sercom-linux.adb", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42c3898c1d9a5351eaac6ffd792a5d1aaa268435/gcc%2Fada%2Fg-sercom-linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42c3898c1d9a5351eaac6ffd792a5d1aaa268435/gcc%2Fada%2Fg-sercom-linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-sercom-linux.adb?ref=42c3898c1d9a5351eaac6ffd792a5d1aaa268435", "patch": "@@ -43,6 +43,8 @@ with GNAT.OS_Lib; use GNAT.OS_Lib;\n \n package body GNAT.Serial_Communications is\n \n+   use type Interfaces.C.unsigned;\n+\n    type Port_Data is new int;\n \n    subtype unsigned is Interfaces.C.unsigned;\n@@ -63,23 +65,32 @@ package body GNAT.Serial_Communications is\n    CREAD    : constant := 8#0200#;\n    CSTOPB   : constant := 8#0100#;\n    CRTSCTS  : constant := 8#020000000000#;\n+   PARENB   : constant := 8#00400#;\n+   PARODD   : constant := 8#01000#;\n \n    --  c_cc indexes\n \n    VTIME : constant := 5;\n    VMIN  : constant := 6;\n \n    C_Data_Rate : constant array (Data_Rate) of unsigned :=\n-                   (B1200  => 8#000011#,\n-                    B2400  => 8#000013#,\n-                    B4800  => 8#000014#,\n-                    B9600  => 8#000015#,\n-                    B19200 => 8#000016#,\n-                    B38400 => 8#000017#,\n-                    B57600 => 8#010001#);\n+                   (B1200   => 8#000011#,\n+                    B2400   => 8#000013#,\n+                    B4800   => 8#000014#,\n+                    B9600   => 8#000015#,\n+                    B19200  => 8#000016#,\n+                    B38400  => 8#000017#,\n+                    B57600  => 8#010001#,\n+                    B115200 => 8#010002#);\n+\n+   C_Bits      : constant array (Data_Bits) of unsigned :=\n+                   (B7 => 8#040#, B8 => 8#060#);\n \n-   C_Bits : constant array (Data_Bits) of unsigned :=\n-              (B7 => 8#040#, B8 => 8#060#);\n+   C_Stop_Bits : constant array (Stop_Bits_Number) of unsigned :=\n+                   (One => 0, Two => CSTOPB);\n+\n+   C_Parity    : constant array (Parity_Check) of unsigned :=\n+                   (None => 0, Odd => PARENB or PARODD, Even => PARENB);\n \n    procedure Raise_Error (Message : String; Error : Integer := Errno);\n    pragma No_Return (Raise_Error);\n@@ -168,14 +179,14 @@ package body GNAT.Serial_Communications is\n    ---------\n \n    procedure Set\n-     (Port    : Serial_Port;\n-      Rate    : Data_Rate := B9600;\n-      Bits    : Data_Bits := B8;\n-      Block   : Boolean   := True;\n-      Timeout : Integer   := 10)\n+     (Port      : Serial_Port;\n+      Rate      : Data_Rate        := B9600;\n+      Bits      : Data_Bits        := B8;\n+      Stop_Bits : Stop_Bits_Number := One;\n+      Parity    : Parity_Check     := None;\n+      Block     : Boolean          := True;\n+      Timeout   : Duration         := 10.0)\n    is\n-      use type unsigned;\n-\n       type termios is record\n          c_iflag  : unsigned;\n          c_oflag  : unsigned;\n@@ -214,17 +225,18 @@ package body GNAT.Serial_Communications is\n \n       Current.c_cflag      := C_Data_Rate (Rate)\n                                 or C_Bits (Bits)\n+                                or C_Stop_Bits (Stop_Bits)\n+                                or C_Parity (Parity)\n                                 or CLOCAL\n                                 or CREAD\n-                                or CSTOPB\n                                 or CRTSCTS;\n       Current.c_lflag      := 0;\n       Current.c_iflag      := 0;\n       Current.c_oflag      := 0;\n       Current.c_ispeed     := Data_Rate_Value (Rate);\n       Current.c_ospeed     := Data_Rate_Value (Rate);\n       Current.c_cc (VMIN)  := char'Val (0);\n-      Current.c_cc (VTIME) := char'Val (Timeout);\n+      Current.c_cc (VTIME) := char'Val (Natural (Timeout * 10));\n \n       --  Set port settings\n "}, {"sha": "76f0aa089546c04701f25eff1e3aad6d9c8367dc", "filename": "gcc/ada/g-sercom-mingw.adb", "status": "modified", "additions": 45, "deletions": 190, "changes": 235, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42c3898c1d9a5351eaac6ffd792a5d1aaa268435/gcc%2Fada%2Fg-sercom-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42c3898c1d9a5351eaac6ffd792a5d1aaa268435/gcc%2Fada%2Fg-sercom-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-sercom-mingw.adb?ref=42c3898c1d9a5351eaac6ffd792a5d1aaa268435", "patch": "@@ -35,176 +35,24 @@\n \n with Ada.Unchecked_Deallocation; use Ada;\n with Ada.Streams;                use Ada.Streams;\n-with System;                     use System;\n+with System.Win32.Ext;           use System, System.Win32, System.Win32.Ext;\n \n package body GNAT.Serial_Communications is\n \n    --  Common types\n \n-   type HANDLE is new Interfaces.C.long;\n-   type DWORD is new Interfaces.C.unsigned_long;\n-   type WORD  is new Interfaces.C.unsigned_short;\n-   subtype PVOID is System.Address;\n-   type BOOL is new Boolean;\n-   for BOOL'Size use Interfaces.C.unsigned_long'Size;\n-   type BYTE is new Interfaces.C.unsigned_char;\n-   subtype CHAR is Interfaces.C.char;\n-\n    type Port_Data is new HANDLE;\n \n-   type Bits1  is range 0 .. 2 ** 1 - 1;\n-   type Bits2  is range 0 .. 2 ** 2 - 1;\n-   type Bits17 is range 0 .. 2 ** 17 - 1;\n-   for Bits1'Size  use 1;\n-   for Bits2'Size  use 2;\n-   for Bits17'Size use 17;\n+   C_Bits      : constant array (Data_Bits) of Interfaces.C.unsigned := (8, 7);\n+   C_Parity    : constant array (Parity_Check) of Interfaces.C.unsigned :=\n+                   (None => NOPARITY, Odd => ODDPARITY, Even => EVENPARITY);\n+   C_Stop_Bits : constant array (Stop_Bits_Number) of Interfaces.C.unsigned :=\n+                   (One => ONESTOPBIT, Two => TWOSTOPBITS);\n \n    -----------\n    -- Files --\n    -----------\n \n-   function GetLastError return DWORD;\n-   pragma Import (Stdcall, GetLastError, \"GetLastError\");\n-\n-   GENERIC_READ  : constant := 16#80000000#;\n-   GENERIC_WRITE : constant := 16#40000000#;\n-   OPEN_EXISTING : constant := 3;\n-\n-   type OVERLAPPED is record\n-      Internal     : DWORD;\n-      InternalHigh : DWORD;\n-      Offset       : DWORD;\n-      OffsetHigh   : DWORD;\n-      hEvent       : HANDLE;\n-   end record;\n-\n-   type SECURITY_ATTRIBUTES is record\n-      nLength             : DWORD;\n-      pSecurityDescriptor : PVOID;\n-      bInheritHandle      : BOOL;\n-   end record;\n-\n-   function CreateFile\n-     (lpFileName            : Address;\n-      dwDesiredAccess       : DWORD;\n-      dwShareMode           : DWORD;\n-      lpSecurityAttributes  : access SECURITY_ATTRIBUTES;\n-      dwCreationDisposition : DWORD;\n-      dwFlagsAndAttributes  : DWORD;\n-      hTemplateFile         : HANDLE) return HANDLE;\n-   pragma Import (Stdcall, CreateFile, \"CreateFileA\");\n-\n-   function WriteFile\n-     (hFile                  : HANDLE;\n-      lpBuffer               : Address;\n-      nNumberOfBytesToWrite  : DWORD;\n-      lpNumberOfBytesWritten : access DWORD;\n-      lpOverlapped           : access OVERLAPPED) return BOOL;\n-   pragma Import (Stdcall, WriteFile, \"WriteFile\");\n-\n-   function ReadFile\n-     (hFile                : HANDLE;\n-      lpBuffer             : Address;\n-      nNumberOfBytesToRead : DWORD;\n-      lpNumberOfBytesRead  : access DWORD;\n-      lpOverlapped         : access OVERLAPPED) return BOOL;\n-   pragma Import (Stdcall, ReadFile, \"ReadFile\");\n-\n-   function CloseHandle (hObject : HANDLE) return BOOL;\n-   pragma Import (Stdcall, CloseHandle, \"CloseHandle\");\n-\n-   DTR_CONTROL_DISABLE : constant := 16#0#;\n-   RTS_CONTROL_DISABLE : constant := 16#0#;\n-   ODDPARITY           : constant := 1;\n-   ONESTOPBIT          : constant := 0;\n-\n-   type DCB is record\n-      DCBLENGTH         : DWORD;\n-      BaudRate          : DWORD;\n-      fBinary           : Bits1;\n-      fParity           : Bits1;\n-      fOutxCtsFlow      : Bits1;\n-      fOutxDsrFlow      : Bits1;\n-      fDtrControl       : Bits2;\n-      fDsrSensitivity   : Bits1;\n-      fTXContinueOnXoff : Bits1;\n-      fOutX             : Bits1;\n-      fInX              : Bits1;\n-      fErrorChar        : Bits1;\n-      fNull             : Bits1;\n-      fRtsControl       : Bits2;\n-      fAbortOnError     : Bits1;\n-      fDummy2           : Bits17;\n-      wReserved         : WORD;\n-      XonLim            : WORD;\n-      XoffLim           : WORD;\n-      ByteSize          : BYTE;\n-      Parity            : BYTE;\n-      StopBits          : BYTE;\n-      XonChar           : CHAR;\n-      XoffChar          : CHAR;\n-      ErrorChar         : CHAR;\n-      EofChar           : CHAR;\n-      EvtChar           : CHAR;\n-      wReserved1        : WORD;\n-   end record;\n-   pragma Convention (C, DCB);\n-\n-   for DCB use record\n-      DCBLENGTH         at  0 range 0 .. 31;\n-      BaudRate          at  4 range 0 .. 31;\n-      fBinary           at  8 range 0 .. 0;\n-      fParity           at  8 range 1 .. 1;\n-      fOutxCtsFlow      at  8 range 2 .. 2;\n-      fOutxDsrFlow      at  8 range 3 .. 3;\n-      fDtrControl       at  8 range 4 .. 5;\n-      fDsrSensitivity   at  8 range 6 .. 6;\n-      fTXContinueOnXoff at  8 range 7 .. 7;\n-      fOutX             at  9 range 0 .. 0;\n-      fInX              at  9 range 1 .. 1;\n-      fErrorChar        at  9 range 2 .. 2;\n-      fNull             at  9 range 3 .. 3;\n-      fRtsControl       at  9 range 4 .. 5;\n-      fAbortOnError     at  9 range 6 .. 6;\n-      fDummy2           at  9 range 7 .. 23;\n-      wReserved         at 12 range 0 .. 15;\n-      XonLim            at 14 range 0 .. 15;\n-      XoffLim           at 16 range 0 .. 15;\n-      ByteSize          at 18 range 0 .. 7;\n-      Parity            at 19 range 0 .. 7;\n-      StopBits          at 20 range 0 .. 7;\n-      XonChar           at 21 range 0 .. 7;\n-      XoffChar          at 22 range 0 .. 7;\n-      ErrorChar         at 23 range 0 .. 7;\n-      EofChar           at 24 range 0 .. 7;\n-      EvtChar           at 25 range 0 .. 7;\n-      wReserved1        at 26 range 0 .. 15;\n-   end record;\n-\n-   type COMMTIMEOUTS is record\n-      ReadIntervalTimeout         : DWORD;\n-      ReadTotalTimeoutMultiplier  : DWORD;\n-      ReadTotalTimeoutConstant    : DWORD;\n-      WriteTotalTimeoutMultiplier : DWORD;\n-      WriteTotalTimeoutConstant   : DWORD;\n-   end record;\n-   pragma Convention (C, COMMTIMEOUTS);\n-\n-   function GetCommState\n-     (hFile : HANDLE;\n-      lpDCB : access DCB) return BOOL;\n-   pragma Import (Stdcall, GetCommState, \"GetCommState\");\n-\n-   function SetCommState\n-     (hFile : HANDLE;\n-      lpDCB : access DCB) return BOOL;\n-   pragma Import (Stdcall, SetCommState, \"SetCommState\");\n-\n-   function SetCommTimeouts\n-     (hFile          : HANDLE;\n-      lpCommTimeouts : access COMMTIMEOUTS) return BOOL;\n-   pragma Import (Stdcall, SetCommTimeouts, \"SetCommTimeouts\");\n-\n    procedure Raise_Error (Message : String; Error : DWORD := GetLastError);\n    pragma No_Return (Raise_Error);\n \n@@ -222,7 +70,8 @@ package body GNAT.Serial_Communications is\n       if Port.H /= null then\n          Success := CloseHandle (HANDLE (Port.H.all));\n          Unchecked_Free (Port.H);\n-         if not Success then\n+\n+         if Success = Win32.FALSE then\n             Raise_Error (\"error closing the port\");\n          end if;\n       end if;\n@@ -257,14 +106,14 @@ package body GNAT.Serial_Communications is\n          Success := CloseHandle (HANDLE (Port.H.all));\n       end if;\n \n-      Port.H.all := Port_Data (CreateFile\n+      Port.H.all := CreateFile\n         (lpFileName            => C_Name (C_Name'First)'Address,\n          dwDesiredAccess       => GENERIC_READ or GENERIC_WRITE,\n          dwShareMode           => 0,\n          lpSecurityAttributes  => null,\n-         DwCreationDisposition => OPEN_EXISTING,\n+         dwCreationDisposition => OPEN_EXISTING,\n          dwFlagsAndAttributes  => 0,\n-         HTemplateFile         => 0));\n+         hTemplateFile         => 0);\n \n       if Port.H.all = 0 then\n          Raise_Error (\"cannot open com port\");\n@@ -297,14 +146,15 @@ package body GNAT.Serial_Communications is\n          Raise_Error (\"read: port not opened\", 0);\n       end if;\n \n-      Success := ReadFile\n-        (hFile                => HANDLE (Port.H.all),\n-         lpBuffer             => Buffer (Buffer'First)'Address,\n-         nNumberOfBytesToRead => DWORD (Buffer'Length),\n-         lpNumberOfBytesRead  => Read_Last'Access,\n-         lpOverlapped         => null);\n+      Success :=\n+        ReadFile\n+          (hFile                => HANDLE (Port.H.all),\n+           lpBuffer             => Buffer (Buffer'First)'Address,\n+           nNumberOfBytesToRead => DWORD (Buffer'Length),\n+           lpNumberOfBytesRead  => Read_Last'Access,\n+           lpOverlapped         => null);\n \n-      if not Success then\n+      if Success = Win32.FALSE then\n          Raise_Error (\"read error\");\n       end if;\n \n@@ -316,11 +166,13 @@ package body GNAT.Serial_Communications is\n    ---------\n \n    procedure Set\n-     (Port    : Serial_Port;\n-      Rate    : Data_Rate := B9600;\n-      Bits    : Data_Bits := B8;\n-      Block   : Boolean   := True;\n-      Timeout : Integer   := 10)\n+     (Port      : Serial_Port;\n+      Rate      : Data_Rate        := B9600;\n+      Bits      : Data_Bits        := B8;\n+      Stop_Bits : Stop_Bits_Number := One;\n+      Parity    : Parity_Check     := None;\n+      Block     : Boolean          := True;\n+      Timeout   : Duration         := 10.0)\n    is\n       Success      : BOOL;\n       Com_Time_Out : aliased COMMTIMEOUTS;\n@@ -333,14 +185,15 @@ package body GNAT.Serial_Communications is\n \n       Success := GetCommState (HANDLE (Port.H.all), Com_Settings'Access);\n \n-      if not Success then\n+      if Success = Win32.FALSE then\n          Success := CloseHandle (HANDLE (Port.H.all));\n          Port.H.all := 0;\n          Raise_Error (\"set: cannot get comm state\");\n       end if;\n \n       Com_Settings.BaudRate        := DWORD (Data_Rate_Value (Rate));\n       Com_Settings.fParity         := 1;\n+      Com_Settings.fBinary         := Bits1 (System.Win32.TRUE);\n       Com_Settings.fOutxCtsFlow    := 0;\n       Com_Settings.fOutxDsrFlow    := 0;\n       Com_Settings.fDsrSensitivity := 0;\n@@ -349,13 +202,13 @@ package body GNAT.Serial_Communications is\n       Com_Settings.fInX            := 0;\n       Com_Settings.fRtsControl     := RTS_CONTROL_DISABLE;\n       Com_Settings.fAbortOnError   := 0;\n-      Com_Settings.ByteSize        := BYTE (Bit_Value (Bits));\n-      Com_Settings.Parity          := ODDPARITY;\n-      Com_Settings.StopBits        := ONESTOPBIT;\n+      Com_Settings.ByteSize        := BYTE (C_Bits (Bits));\n+      Com_Settings.Parity          := BYTE (C_Parity (Parity));\n+      Com_Settings.StopBits        := BYTE (C_Stop_Bits (Stop_Bits));\n \n       Success := SetCommState (HANDLE (Port.H.all), Com_Settings'Access);\n \n-      if not Success then\n+      if Success = Win32.FALSE then\n          Success := CloseHandle (HANDLE (Port.H.all));\n          Port.H.all := 0;\n          Raise_Error (\"cannot set comm state\");\n@@ -371,11 +224,12 @@ package body GNAT.Serial_Communications is\n             others                   => 0);\n       end if;\n \n-      Success := SetCommTimeouts\n-         (hFile          => HANDLE (Port.H.all),\n-          lpCommTimeouts => Com_Time_Out'Access);\n+      Success :=\n+        SetCommTimeouts\n+          (hFile          => HANDLE (Port.H.all),\n+           lpCommTimeouts => Com_Time_Out'Access);\n \n-      if not Success then\n+      if Success = Win32.FALSE then\n          Raise_Error (\"cannot set the timeout\");\n       end if;\n    end Set;\n@@ -396,14 +250,15 @@ package body GNAT.Serial_Communications is\n          Raise_Error (\"write: port not opened\", 0);\n       end if;\n \n-      Success := WriteFile\n-         (hFile                  => HANDLE (Port.H.all),\n-          lpBuffer               => Buffer'Address,\n-          nNumberOfBytesToWrite  => DWORD (Buffer'Length),\n-          lpNumberOfBytesWritten => Temp_Last'Access,\n-          lpOverlapped           => null);\n+      Success :=\n+        WriteFile\n+          (hFile                  => HANDLE (Port.H.all),\n+           lpBuffer               => Buffer'Address,\n+           nNumberOfBytesToWrite  => DWORD (Buffer'Length),\n+           lpNumberOfBytesWritten => Temp_Last'Access,\n+           lpOverlapped           => null);\n \n-      if not Boolean (Success)\n+      if Success = Win32.FALSE\n         or else Stream_Element_Offset (Temp_Last) /= Buffer'Length\n       then\n          Raise_Error (\"failed to write data\");"}, {"sha": "ead5c868c6e9c40fb0d94b1b9d39e448cbeb40f0", "filename": "gcc/ada/g-sercom.adb", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42c3898c1d9a5351eaac6ffd792a5d1aaa268435/gcc%2Fada%2Fg-sercom.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42c3898c1d9a5351eaac6ffd792a5d1aaa268435/gcc%2Fada%2Fg-sercom.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-sercom.adb?ref=42c3898c1d9a5351eaac6ffd792a5d1aaa268435", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                       Copyright (C) 2007, AdaCore                        --\n+--                     Copyright (C) 2007-2008, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -77,11 +77,13 @@ package body GNAT.Serial_Communications is\n    ---------\n \n    procedure Set\n-     (Port    : Serial_Port;\n-      Rate    : Data_Rate := B9600;\n-      Bits    : Data_Bits := B8;\n-      Block   : Boolean   := True;\n-      Timeout : Integer   := 10) is\n+     (Port      : Serial_Port;\n+      Rate      : Data_Rate        := B9600;\n+      Bits      : Data_Bits        := B8;\n+      Stop_Bits : Stop_Bits_Number := One;\n+      Parity    : Parity_Check     := None;\n+      Block     : Boolean          := True;\n+      Timeout   : Duration         := 10.0) is\n    begin\n       Unimplemented;\n    end Set;\n@@ -124,8 +126,7 @@ package body GNAT.Serial_Communications is\n \n    procedure Unimplemented is\n    begin\n-      raise Program_Error\n-        with \"Serial_Communications not implemented\";\n+      raise Program_Error with \"Serial_Communications not implemented\";\n    end Unimplemented;\n \n end GNAT.Serial_Communications;"}, {"sha": "3d327cec76fb3fd50dd6ea5d27e3892905357d42", "filename": "gcc/ada/g-sercom.ads", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42c3898c1d9a5351eaac6ffd792a5d1aaa268435/gcc%2Fada%2Fg-sercom.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42c3898c1d9a5351eaac6ffd792a5d1aaa268435/gcc%2Fada%2Fg-sercom.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-sercom.ads?ref=42c3898c1d9a5351eaac6ffd792a5d1aaa268435", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                       Copyright (C) 2007, AdaCore                        --\n+--                    Copyright (C) 2007-2008, AdaCore                      --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -47,12 +47,19 @@ package GNAT.Serial_Communications is\n    function Name (Number : Positive) return Port_Name;\n    --  Returns the port name for the given port number\n \n-   type Data_Rate is (B1200, B2400, B4800, B9600, B19200, B38400, B57600);\n+   type Data_Rate is\n+     (B1200, B2400, B4800, B9600, B19200, B38400, B57600, B115200);\n    --  Speed of the communication\n \n    type Data_Bits is (B8, B7);\n    --  Communication bits\n \n+   type Stop_Bits_Number is (One, Two);\n+   --  One or two stop bits\n+\n+   type Parity_Check is (None, Even, Odd);\n+   --  Either no parity check or an even or odd parity\n+\n    type Serial_Port is new Ada.Streams.Root_Stream_Type with private;\n \n    procedure Open\n@@ -62,14 +69,18 @@ package GNAT.Serial_Communications is\n    --  opened.\n \n    procedure Set\n-     (Port    : Serial_Port;\n-      Rate    : Data_Rate := B9600;\n-      Bits    : Data_Bits := B8;\n-      Block   : Boolean   := True;\n-      Timeout : Integer   := 10);\n+     (Port      : Serial_Port;\n+      Rate      : Data_Rate        := B9600;\n+      Bits      : Data_Bits        := B8;\n+      Stop_Bits : Stop_Bits_Number := One;\n+      Parity    : Parity_Check     := None;\n+      Block     : Boolean          := True;\n+      Timeout   : Duration         := 10.0);\n    --  The communication port settings. If Block is set then a read call\n    --  will wait for the whole buffer to be filed. If Block is not set then\n-   --  the given Timeout (in seconds) is used.\n+   --  the given Timeout (in seconds) is used. Note that the timeout precision\n+   --  may be limited on some implementation (e.g. on GNU/Linux the maximum\n+   --  precision is a tenth of seconds).\n \n    overriding procedure Read\n      (Port   : in out Serial_Port;\n@@ -96,14 +107,13 @@ private\n    end record;\n \n    Data_Rate_Value : constant array (Data_Rate) of Interfaces.C.unsigned :=\n-                       (B1200  => 1_200,\n-                        B2400  => 2_400,\n-                        B4800  => 4_800,\n-                        B9600  => 9_600,\n-                        B19200 => 19_200,\n-                        B38400 => 38_400,\n-                        B57600 => 57_600);\n-\n-   Bit_Value : constant array (Data_Bits) of Interfaces.C.unsigned := (8, 7);\n+                       (B1200   =>   1_200,\n+                        B2400   =>   2_400,\n+                        B4800   =>   4_800,\n+                        B9600   =>   9_600,\n+                        B19200  =>  19_200,\n+                        B38400  =>  38_400,\n+                        B57600  =>  57_600,\n+                        B115200 => 115_200);\n \n end GNAT.Serial_Communications;"}, {"sha": "2d2648514b82bc3fc4a2da79ec4a6004491d138c", "filename": "gcc/ada/s-win32.ads", "status": "added", "additions": 295, "deletions": 0, "changes": 295, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42c3898c1d9a5351eaac6ffd792a5d1aaa268435/gcc%2Fada%2Fs-win32.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42c3898c1d9a5351eaac6ffd792a5d1aaa268435/gcc%2Fada%2Fs-win32.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-win32.ads?ref=42c3898c1d9a5351eaac6ffd792a5d1aaa268435", "patch": "@@ -0,0 +1,295 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                        GNAT RUN-TIME COMPONENTS                          --\n+--                                                                          --\n+--                         S Y S T E M . W I N 3 2                          --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--            Copyright (C) 2008, Free Software Foundation, Inc.            --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package plus its child provide the low level interface to the Win32\n+--  API. The core part of the Win32 API (commont to RTX and Win32) is in this\n+--  package, and an additional part of the Win32 API which is not supported by\n+--  RTX is in package System.Win33.Ext.\n+\n+with Interfaces.C;\n+\n+package System.Win32 is\n+   pragma Pure;\n+\n+   -------------------\n+   -- General Types --\n+   -------------------\n+\n+   --  The LARGE_INTEGER type is actually a fixed point type\n+   --  that only can represent integers. The reason for this is\n+   --  easier conversion to Duration or other fixed point types.\n+   --  (See Operations.Clock)\n+\n+   type LARGE_INTEGER is delta 1.0 range -2.0**63 .. 2.0**63 - 1.0;\n+\n+   subtype PVOID is Address;\n+\n+   type HANDLE is new Interfaces.C.long;\n+\n+   INVALID_HANDLE_VALUE : constant HANDLE := -1;\n+\n+   type DWORD  is new Interfaces.C.unsigned_long;\n+   type WORD   is new Interfaces.C.unsigned_short;\n+   type BYTE   is new Interfaces.C.unsigned_char;\n+   type LONG   is new Interfaces.C.long;\n+   type CHAR   is new Interfaces.C.char;\n+\n+   type BOOL   is new Interfaces.C.int;\n+   for BOOL'Size use Interfaces.C.int'Size;\n+\n+   type Bits1  is range 0 .. 2 ** 1 - 1;\n+   type Bits2  is range 0 .. 2 ** 2 - 1;\n+   type Bits17 is range 0 .. 2 ** 17 - 1;\n+   for Bits1'Size  use 1;\n+   for Bits2'Size  use 2;\n+   for Bits17'Size use 17;\n+\n+   FALSE : constant := 0;\n+   TRUE  : constant := 1;\n+\n+   function GetLastError return DWORD;\n+   pragma Import (Stdcall, GetLastError, \"GetLastError\");\n+\n+   -----------\n+   -- Files --\n+   -----------\n+\n+   GENERIC_READ  : constant := 16#80000000#;\n+   GENERIC_WRITE : constant := 16#40000000#;\n+\n+   CREATE_NEW        : constant := 1;\n+   CREATE_ALWAYS     : constant := 2;\n+   OPEN_EXISTING     : constant := 3;\n+   OPEN_ALWAYS       : constant := 4;\n+   TRUNCATE_EXISTING : constant := 5;\n+\n+   FILE_SHARE_DELETE : constant := 16#00000004#;\n+   FILE_SHARE_READ   : constant := 16#00000001#;\n+   FILE_SHARE_WRITE  : constant := 16#00000002#;\n+\n+   FILE_BEGIN        : constant := 0;\n+   FILE_CURRENT      : constant := 1;\n+   FILE_END          : constant := 2;\n+\n+   PAGE_NOACCESS       : constant := 16#0001#;\n+   PAGE_READONLY       : constant := 16#0002#;\n+   PAGE_READWRITE      : constant := 16#0004#;\n+   PAGE_WRITECOPY      : constant := 16#0008#;\n+   PAGE_EXECUTE        : constant := 16#0010#;\n+\n+   FILE_MAP_ALL_ACCESS : constant := 16#F001f#;\n+   FILE_MAP_READ       : constant := 4;\n+   FILE_MAP_WRITE      : constant := 2;\n+   FILE_MAP_COPY       : constant := 1;\n+\n+   FILE_ADD_FILE             : constant := 16#0002#;\n+   FILE_ADD_SUBDIRECTORY     : constant := 16#0004#;\n+   FILE_APPEND_DATA          : constant := 16#0004#;\n+   FILE_CREATE_PIPE_INSTANCE : constant := 16#0004#;\n+   FILE_DELETE_CHILD         : constant := 16#0040#;\n+   FILE_EXECUTE              : constant := 16#0020#;\n+   FILE_LIST_DIRECTORY       : constant := 16#0001#;\n+   FILE_READ_ATTRIBUTES      : constant := 16#0080#;\n+   FILE_READ_DATA            : constant := 16#0001#;\n+   FILE_READ_EA              : constant := 16#0008#;\n+   FILE_TRAVERSE             : constant := 16#0020#;\n+   FILE_WRITE_ATTRIBUTES     : constant := 16#0100#;\n+   FILE_WRITE_DATA           : constant := 16#0002#;\n+   FILE_WRITE_EA             : constant := 16#0010#;\n+   STANDARD_RIGHTS_READ      : constant := 16#20000#;\n+   STANDARD_RIGHTS_WRITE     : constant := 16#20000#;\n+   SYNCHRONIZE               : constant := 16#100000#;\n+\n+   FILE_ATTRIBUTE_READONLY            : constant := 16#00000001#;\n+   FILE_ATTRIBUTE_HIDDEN              : constant := 16#00000002#;\n+   FILE_ATTRIBUTE_SYSTEM              : constant := 16#00000004#;\n+   FILE_ATTRIBUTE_DIRECTORY           : constant := 16#00000010#;\n+   FILE_ATTRIBUTE_ARCHIVE             : constant := 16#00000020#;\n+   FILE_ATTRIBUTE_DEVICE              : constant := 16#00000040#;\n+   FILE_ATTRIBUTE_NORMAL              : constant := 16#00000080#;\n+   FILE_ATTRIBUTE_TEMPORARY           : constant := 16#00000100#;\n+   FILE_ATTRIBUTE_SPARSE_FILE         : constant := 16#00000200#;\n+   FILE_ATTRIBUTE_REPARSE_POINT       : constant := 16#00000400#;\n+   FILE_ATTRIBUTE_COMPRESSED          : constant := 16#00000800#;\n+   FILE_ATTRIBUTE_OFFLINE             : constant := 16#00001000#;\n+   FILE_ATTRIBUTE_NOT_CONTENT_INDEXED : constant := 16#00002000#;\n+   FILE_ATTRIBUTE_ENCRYPTED           : constant := 16#00004000#;\n+   FILE_ATTRIBUTE_VALID_FLAGS         : constant := 16#00007fb7#;\n+   FILE_ATTRIBUTE_VALID_SET_FLAGS     : constant := 16#000031a7#;\n+\n+   type OVERLAPPED is record\n+      Internal     : DWORD;\n+      InternalHigh : DWORD;\n+      Offset       : DWORD;\n+      OffsetHigh   : DWORD;\n+      hEvent       : HANDLE;\n+   end record;\n+\n+   type SECURITY_ATTRIBUTES is record\n+      nLength             : DWORD;\n+      pSecurityDescriptor : PVOID;\n+      bInheritHandle      : BOOL;\n+   end record;\n+\n+   function CreateFile\n+     (lpFileName            : Address;\n+      dwDesiredAccess       : DWORD;\n+      dwShareMode           : DWORD;\n+      lpSecurityAttributes  : access SECURITY_ATTRIBUTES;\n+      dwCreationDisposition : DWORD;\n+      dwFlagsAndAttributes  : DWORD;\n+      hTemplateFile         : HANDLE) return HANDLE;\n+   pragma Import (Stdcall, CreateFile, \"CreateFileA\");\n+\n+   function GetFileSize\n+     (hFile          : HANDLE;\n+      lpFileSizeHigh : access DWORD) return BOOL;\n+   pragma Import (Stdcall, GetFileSize, \"GetFileSize\");\n+\n+   function SetFilePointer\n+     (hFile                : HANDLE;\n+      lDistanceToMove      : LONG;\n+      lpDistanceToMoveHigh : access LONG;\n+      dwMoveMethod         : DWORD) return DWORD;\n+   pragma Import (Stdcall, SetFilePointer, \"SetFilePointer\");\n+\n+   function WriteFile\n+     (hFile                  : HANDLE;\n+      lpBuffer               : Address;\n+      nNumberOfBytesToWrite  : DWORD;\n+      lpNumberOfBytesWritten : access DWORD;\n+      lpOverlapped           : access OVERLAPPED) return BOOL;\n+   pragma Import (Stdcall, WriteFile, \"WriteFile\");\n+\n+   function ReadFile\n+     (hFile                : HANDLE;\n+      lpBuffer             : Address;\n+      nNumberOfBytesToRead : DWORD;\n+      lpNumberOfBytesRead  : access DWORD;\n+      lpOverlapped         : access OVERLAPPED) return BOOL;\n+   pragma Import (Stdcall, ReadFile, \"ReadFile\");\n+\n+   function CloseHandle (hObject : HANDLE) return BOOL;\n+   pragma Import (Stdcall, CloseHandle, \"CloseHandle\");\n+\n+   function CreateFileMapping\n+     (hFile                : HANDLE;\n+      lpSecurityAttributes : access SECURITY_ATTRIBUTES;\n+      flProtect            : DWORD;\n+      dwMaximumSizeHigh    : DWORD;\n+      dwMaximumSizeLow     : DWORD;\n+      lpName               : Address) return HANDLE;\n+   pragma Import (Stdcall, CreateFileMapping, \"CreateFileMappingA\");\n+\n+   function MapViewOfFile\n+     (hFileMappingObject   : HANDLE;\n+      dwDesiredAccess      : DWORD;\n+      dwFileOffsetHigh     : DWORD;\n+      dwFileOffsetLow      : DWORD;\n+      dwNumberOfBytesToMap : DWORD) return System.Address;\n+   pragma Import (Stdcall, MapViewOfFile, \"MapViewOfFile\");\n+\n+   function UnmapViewOfFile (lpBaseAddress : System.Address) return BOOL;\n+   pragma Import (Stdcall, UnmapViewOfFile, \"UnmapViewOfFile\");\n+\n+   ------------------------\n+   -- System Information --\n+   ------------------------\n+\n+   subtype ProcessorId is DWORD;\n+\n+   type SYSTEM_INFO is record\n+      dwOemId                     : DWORD;\n+      dwPageSize                  : DWORD;\n+      lpMinimumApplicationAddress : PVOID;\n+      lpMaximumApplicationAddress : PVOID;\n+      dwActiveProcessorMask       : DWORD;\n+      dwNumberOfProcessors        : DWORD;\n+      dwProcessorType             : DWORD;\n+      dwAllocationGranularity     : DWORD;\n+      dwReserved                  : DWORD;\n+   end record;\n+\n+   procedure GetSystemInfo (SI : access SYSTEM_INFO);\n+   pragma Import (Stdcall, GetSystemInfo, \"GetSystemInfo\");\n+\n+   ---------------------\n+   -- Time Management --\n+   ---------------------\n+\n+   type SYSTEMTIME is record\n+      wYear         : WORD;\n+      wMonth        : WORD;\n+      wDayOfWeek    : WORD;\n+      wDay          : WORD;\n+      wHour         : WORD;\n+      wMinute       : WORD;\n+      wSecond       : WORD;\n+      wMilliseconds : WORD;\n+   end record;\n+\n+   procedure GetSystemTime (pSystemTime : access SYSTEMTIME);\n+   pragma Import (Stdcall, GetSystemTime, \"GetSystemTime\");\n+\n+   procedure GetSystemTimeAsFileTime (lpFileTime : access Long_Long_Integer);\n+   pragma Import (Stdcall, GetSystemTimeAsFileTime, \"GetSystemTimeAsFileTime\");\n+\n+   function FileTimeToSystemTime\n+     (lpFileTime   : access Long_Long_Integer;\n+      lpSystemTime : access SYSTEMTIME) return BOOL;\n+   pragma Import (Stdcall, FileTimeToSystemTime, \"FileTimeToSystemTime\");\n+\n+   function SystemTimeToFileTime\n+     (lpSystemTime : access SYSTEMTIME;\n+      lpFileTime   : access Long_Long_Integer) return BOOL;\n+   pragma Import (Stdcall, SystemTimeToFileTime, \"SystemTimeToFileTime\");\n+\n+   function FileTimeToLocalFileTime\n+     (lpFileTime      : access Long_Long_Integer;\n+      lpLocalFileTime : access Long_Long_Integer) return BOOL;\n+   pragma Import (Stdcall, FileTimeToLocalFileTime, \"FileTimeToLocalFileTime\");\n+\n+   function LocalFileTimeToFileTime\n+     (lpFileTime      : access Long_Long_Integer;\n+      lpLocalFileTime : access Long_Long_Integer) return BOOL;\n+   pragma Import (Stdcall, LocalFileTimeToFileTime, \"LocalFileTimeToFileTime\");\n+\n+   procedure Sleep (dwMilliseconds : DWORD);\n+   pragma Import (Stdcall, Sleep, External_Name => \"Sleep\");\n+\n+   function QueryPerformanceCounter\n+     (lpPerformanceCount : access LARGE_INTEGER) return BOOL;\n+   pragma Import\n+     (Stdcall, QueryPerformanceCounter, \"QueryPerformanceCounter\");\n+\n+end System.Win32;"}, {"sha": "a0091ff74d3d0aa7118ef9eb39aa6df4fb83035b", "filename": "gcc/ada/s-winext.ads", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42c3898c1d9a5351eaac6ffd792a5d1aaa268435/gcc%2Fada%2Fs-winext.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42c3898c1d9a5351eaac6ffd792a5d1aaa268435/gcc%2Fada%2Fs-winext.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-winext.ads?ref=42c3898c1d9a5351eaac6ffd792a5d1aaa268435", "patch": "@@ -0,0 +1,157 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                        GNAT RUN-TIME COMPONENTS                          --\n+--                                                                          --\n+--                     S Y S T E M . W I N 3 2 . E X T                      --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--            Copyright (C) 2008, Free Software Foundation, Inc.            --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides the part of the low level Win32 interface which is\n+--  not supported by RTX (but supported by regular Windows platforms).\n+\n+package System.Win32.Ext is\n+   pragma Pure;\n+\n+   ---------------------\n+   -- Time Management --\n+   ---------------------\n+\n+   function QueryPerformanceFrequency\n+     (lpFrequency : access LARGE_INTEGER) return Win32.BOOL;\n+   pragma Import\n+     (Stdcall, QueryPerformanceFrequency, \"QueryPerformanceFrequency\");\n+\n+   ---------------\n+   -- Processor --\n+   ---------------\n+\n+   function SetThreadIdealProcessor\n+     (hThread          : HANDLE;\n+      dwIdealProcessor : ProcessorId) return DWORD;\n+   pragma Import (Stdcall, SetThreadIdealProcessor, \"SetThreadIdealProcessor\");\n+\n+   --------------\n+   -- Com Port --\n+   --------------\n+\n+   DTR_CONTROL_DISABLE : constant := 16#0#;\n+   RTS_CONTROL_DISABLE : constant := 16#0#;\n+   NOPARITY            : constant := 0;\n+   ODDPARITY           : constant := 1;\n+   EVENPARITY          : constant := 2;\n+   ONESTOPBIT          : constant := 0;\n+   TWOSTOPBITS         : constant := 2;\n+\n+   type DCB is record\n+      DCBLENGTH         : DWORD;\n+      BaudRate          : DWORD;\n+      fBinary           : Bits1;\n+      fParity           : Bits1;\n+      fOutxCtsFlow      : Bits1;\n+      fOutxDsrFlow      : Bits1;\n+      fDtrControl       : Bits2;\n+      fDsrSensitivity   : Bits1;\n+      fTXContinueOnXoff : Bits1;\n+      fOutX             : Bits1;\n+      fInX              : Bits1;\n+      fErrorChar        : Bits1;\n+      fNull             : Bits1;\n+      fRtsControl       : Bits2;\n+      fAbortOnError     : Bits1;\n+      fDummy2           : Bits17;\n+      wReserved         : WORD;\n+      XonLim            : WORD;\n+      XoffLim           : WORD;\n+      ByteSize          : BYTE;\n+      Parity            : BYTE;\n+      StopBits          : BYTE;\n+      XonChar           : CHAR;\n+      XoffChar          : CHAR;\n+      ErrorChar         : CHAR;\n+      EofChar           : CHAR;\n+      EvtChar           : CHAR;\n+      wReserved1        : WORD;\n+   end record;\n+   pragma Convention (C, DCB);\n+\n+   for DCB use record\n+      DCBLENGTH         at  0 range 0 .. 31;\n+      BaudRate          at  4 range 0 .. 31;\n+      fBinary           at  8 range 0 .. 0;\n+      fParity           at  8 range 1 .. 1;\n+      fOutxCtsFlow      at  8 range 2 .. 2;\n+      fOutxDsrFlow      at  8 range 3 .. 3;\n+      fDtrControl       at  8 range 4 .. 5;\n+      fDsrSensitivity   at  8 range 6 .. 6;\n+      fTXContinueOnXoff at  8 range 7 .. 7;\n+      fOutX             at  9 range 0 .. 0;\n+      fInX              at  9 range 1 .. 1;\n+      fErrorChar        at  9 range 2 .. 2;\n+      fNull             at  9 range 3 .. 3;\n+      fRtsControl       at  9 range 4 .. 5;\n+      fAbortOnError     at  9 range 6 .. 6;\n+      fDummy2           at  9 range 7 .. 23;\n+      wReserved         at 12 range 0 .. 15;\n+      XonLim            at 14 range 0 .. 15;\n+      XoffLim           at 16 range 0 .. 15;\n+      ByteSize          at 18 range 0 .. 7;\n+      Parity            at 19 range 0 .. 7;\n+      StopBits          at 20 range 0 .. 7;\n+      XonChar           at 21 range 0 .. 7;\n+      XoffChar          at 22 range 0 .. 7;\n+      ErrorChar         at 23 range 0 .. 7;\n+      EofChar           at 24 range 0 .. 7;\n+      EvtChar           at 25 range 0 .. 7;\n+      wReserved1        at 26 range 0 .. 15;\n+   end record;\n+\n+   type COMMTIMEOUTS is record\n+      ReadIntervalTimeout         : DWORD;\n+      ReadTotalTimeoutMultiplier  : DWORD;\n+      ReadTotalTimeoutConstant    : DWORD;\n+      WriteTotalTimeoutMultiplier : DWORD;\n+      WriteTotalTimeoutConstant   : DWORD;\n+   end record;\n+   pragma Convention (C, COMMTIMEOUTS);\n+\n+   function GetCommState\n+     (hFile : HANDLE;\n+      lpDCB : access DCB) return BOOL;\n+   pragma Import (Stdcall, GetCommState, \"GetCommState\");\n+\n+   function SetCommState\n+     (hFile : HANDLE;\n+      lpDCB : access DCB) return BOOL;\n+   pragma Import (Stdcall, SetCommState, \"SetCommState\");\n+\n+   function SetCommTimeouts\n+     (hFile          : HANDLE;\n+      lpCommTimeouts : access COMMTIMEOUTS) return BOOL;\n+   pragma Import (Stdcall, SetCommTimeouts, \"SetCommTimeouts\");\n+\n+end System.Win32.Ext;"}]}