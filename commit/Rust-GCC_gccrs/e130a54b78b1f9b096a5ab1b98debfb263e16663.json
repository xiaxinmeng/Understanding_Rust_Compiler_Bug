{"sha": "e130a54b78b1f9b096a5ab1b98debfb263e16663", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTEzMGE1NGI3OGIxZjliMDk2YTVhYjFiOThkZWJmYjI2M2UxNjY2Mw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-06-16T20:23:02Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-06-16T20:23:02Z"}, "message": "c-common.def (ASM_STMT): Remove.\n\n        * c-common.def (ASM_STMT): Remove.\n        * c-common.h (c_common_stmt_codes): Remove ASM_STMT.\n        * c-dump.c (c_dump_tree): Likewise.\n        * c-gimplify.c (c_gimplify_stmt): Likewise.\n        * c-pretty-print.c (pp_c_statement): Likewise.\n        * c-typeck.c (build_asm_expr): Use ASM_EXPR.\n        * tree.h: Fix commentary.\ncp/\n        * parser.c (cp_parser_asm_definition): Update commentary.\n        * pt.c (tsubst_expr): Use ASM_EXPR.\n        * semantics.c (finish_asm_stmt): Likewise.\n\nFrom-SVN: r83260", "tree": {"sha": "6cad84a65bce84ea2e0619cc63bbdd0ee3caef9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cad84a65bce84ea2e0619cc63bbdd0ee3caef9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e130a54b78b1f9b096a5ab1b98debfb263e16663", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e130a54b78b1f9b096a5ab1b98debfb263e16663", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e130a54b78b1f9b096a5ab1b98debfb263e16663", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e130a54b78b1f9b096a5ab1b98debfb263e16663/comments", "author": null, "committer": null, "parents": [{"sha": "9e14e18fd124e651f079728315e40a16288863b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e14e18fd124e651f079728315e40a16288863b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e14e18fd124e651f079728315e40a16288863b6"}], "stats": {"total": 92, "additions": 25, "deletions": 67}, "files": [{"sha": "3ba6fa70782fe55d31e14fb6945c42cff7466e1a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e130a54b78b1f9b096a5ab1b98debfb263e16663/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e130a54b78b1f9b096a5ab1b98debfb263e16663/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e130a54b78b1f9b096a5ab1b98debfb263e16663", "patch": "@@ -1,3 +1,13 @@\n+2004-06-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-common.def (ASM_STMT): Remove.\n+\t* c-common.h (c_common_stmt_codes): Remove ASM_STMT.\n+\t* c-dump.c (c_dump_tree): Likewise.\n+\t* c-gimplify.c (c_gimplify_stmt): Likewise.\n+\t* c-pretty-print.c (pp_c_statement): Likewise.\n+\t* c-typeck.c (build_asm_expr): Use ASM_EXPR.\n+\t* tree.h: Fix commentary.\n+\n 2004-06-16  Richard Henderson  <rth@redhat.com>\n \n \t* c-common.def (GOTO_STMT, LABEL_STMT): Remove."}, {"sha": "a78cfc16d3de48c12b15ce1e5abe011f4b0c4f5c", "filename": "gcc/c-common.def", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e130a54b78b1f9b096a5ab1b98debfb263e16663/gcc%2Fc-common.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e130a54b78b1f9b096a5ab1b98debfb263e16663/gcc%2Fc-common.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.def?ref=e130a54b78b1f9b096a5ab1b98debfb263e16663", "patch": "@@ -71,9 +71,6 @@ DEFTREECODE (CONTINUE_STMT, \"continue_stmt\", 'e', 0)\n    SWITCH_COND, SWITCH_BODY and SWITCH_TYPE, respectively.  */\n DEFTREECODE (SWITCH_STMT, \"switch_stmt\", 'e', 3)\n \n-/* Used to represent an inline assembly statement.  */\n-DEFTREECODE (ASM_STMT, \"asm_stmt\", 'e', 4)\n-\n /* Used to represent a CASE_LABEL. The operands are CASE_LOW and\n    CASE_HIGH, respectively. If CASE_LOW is NULL_TREE, the label is a\n    'default' label. If CASE_HIGH is NULL_TREE, the label is a normal case"}, {"sha": "6dbb5167f54d4a5ac439054d8e175dcc93fd07a0", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e130a54b78b1f9b096a5ab1b98debfb263e16663/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e130a54b78b1f9b096a5ab1b98debfb263e16663/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=e130a54b78b1f9b096a5ab1b98debfb263e16663", "patch": "@@ -30,7 +30,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    0: TREE_NEGATED_INT (in INTEGER_CST).\n       IDENTIFIER_MARKED (used by search routines).\n       DECL_PRETTY_FUNCTION_P (in VAR_DECL)\n-      ASM_INPUT_P (in ASM_STMT)\n       STMT_EXPR_NO_SCOPE (in STMT_EXPR)\n    1: C_DECLARED_LABEL_FLAG (in LABEL_DECL)\n       STMT_IS_FULL_EXPR_P (in _STMT)\n@@ -1009,7 +1008,7 @@ enum c_tree_code {\n    DECL_STMT,\t\tIF_STMT,\tFOR_STMT,\t\\\n    WHILE_STMT,\t\tDO_STMT,\tRETURN_STMT,\t\\\n    BREAK_STMT,\t\tCONTINUE_STMT,\t\t\t\\\n-   SWITCH_STMT,\t\tASM_STMT,\tCASE_LABEL\n+   SWITCH_STMT,\t\tCASE_LABEL\n \n /* TRUE if a code represents a statement.  The front end init\n    langhook should take care of initialization of this array.  */"}, {"sha": "db03dfb566bfb17988ab77a88f10eeb82d9550c6", "filename": "gcc/c-dump.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e130a54b78b1f9b096a5ab1b98debfb263e16663/gcc%2Fc-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e130a54b78b1f9b096a5ab1b98debfb263e16663/gcc%2Fc-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-dump.c?ref=e130a54b78b1f9b096a5ab1b98debfb263e16663", "patch": "@@ -63,17 +63,6 @@ c_dump_tree (void *dump_info, tree t)\n \tdump_string (di, \"bitfield\");\n       break;\n \n-    case ASM_STMT:\n-      dump_stmt (di, t);\n-      if (ASM_VOLATILE_P (t))\n-\tdump_string (di, \"volatile\");\n-      dump_child (\"strg\", ASM_STRING (t));\n-      dump_child (\"outs\", ASM_OUTPUTS (t));\n-      dump_child (\"ins\", ASM_INPUTS (t));\n-      dump_child (\"clbr\", ASM_CLOBBERS (t));\n-      dump_next_stmt (di, t);\n-      break;\n-\n     case BREAK_STMT:\n     case CONTINUE_STMT:\n       dump_stmt (di, t);"}, {"sha": "3b84cd981de5bdc6f8af609027da59d0e52c767e", "filename": "gcc/c-gimplify.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e130a54b78b1f9b096a5ab1b98debfb263e16663/gcc%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e130a54b78b1f9b096a5ab1b98debfb263e16663/gcc%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-gimplify.c?ref=e130a54b78b1f9b096a5ab1b98debfb263e16663", "patch": "@@ -283,18 +283,6 @@ c_gimplify_stmt (tree *stmt_p)\n       ret = GS_OK;\n       break;\n \n-    case ASM_STMT:\n-      {\n-\ttree new_stmt = build (ASM_EXPR, void_type_node, ASM_STRING (stmt),\n-\t\t\t       ASM_OUTPUTS (stmt), ASM_INPUTS (stmt),\n-\t\t\t       ASM_CLOBBERS (stmt));\n-\tASM_INPUT_P (new_stmt) = ASM_INPUT_P (stmt);\n-\tASM_VOLATILE_P (new_stmt) = ASM_VOLATILE_P (stmt);\n-\tstmt = new_stmt;\n-\tret = GS_OK;\n-      }\n-      break;\n-\n     default:\n       if (lang_gimplify_stmt && (*lang_gimplify_stmt) (&stmt))\n \t{"}, {"sha": "e5eb8e3dbb0cd53d502be59bb2a3575e6e383654", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e130a54b78b1f9b096a5ab1b98debfb263e16663/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e130a54b78b1f9b096a5ab1b98debfb263e16663/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=e130a54b78b1f9b096a5ab1b98debfb263e16663", "patch": "@@ -2117,37 +2117,6 @@ pp_c_statement (c_pretty_printer *pp, tree stmt)\n       pp_needs_newline (pp) = true;\n       break;\n \n-    case ASM_STMT:\n-      {\n-\tbool has_volatile_p = ASM_VOLATILE_P (stmt);\n-\tbool is_extended = has_volatile_p || ASM_INPUTS (stmt)\n-\t  || ASM_OUTPUTS (stmt) || ASM_CLOBBERS (stmt);\n-\tpp_c_identifier (pp, is_extended ? \"__asm__\" : \"asm\");\n-\tif (has_volatile_p)\n-\t  pp_c_identifier (pp, \"__volatile__\");\n-\tpp_space (pp);\n-\tpp_c_left_paren (pp);\n-\tpp_c_string_literal (pp, ASM_STRING (stmt));\n-\tif (is_extended)\n-\t  {\n-\t    pp_space (pp);\n-\t    pp_separate_with (pp, ':');\n-\t    if (ASM_OUTPUTS (stmt))\n-\t      pp_expression (pp, ASM_OUTPUTS (stmt));\n-\t    pp_space (pp);\n-\t    pp_separate_with (pp, ':');\n-\t    if (ASM_INPUTS (stmt))\n-\t      pp_expression (pp, ASM_INPUTS (stmt));\n-\t    pp_space (pp);\n-\t    pp_separate_with (pp, ':');\n-\t    if (ASM_CLOBBERS (stmt))\n-\t      pp_expression (pp, ASM_CLOBBERS (stmt));\n-\t  }\n-\tpp_c_right_paren (pp);\n-\tpp_newline (pp);\n-      }\n-      break;\n-\n     default:\n       pp_unsupported_tree (pp, stmt);\n     }"}, {"sha": "32bf24a419390075a942cb7d3fe6169a915b0ea9", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e130a54b78b1f9b096a5ab1b98debfb263e16663/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e130a54b78b1f9b096a5ab1b98debfb263e16663/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=e130a54b78b1f9b096a5ab1b98debfb263e16663", "patch": "@@ -6124,7 +6124,7 @@ process_init_element (tree value)\n \f\n /* Build a complete asm-statement, whose components are a CV_QUALIFIER\n    (guaranteed to be 'volatile' or null) and ARGS (represented using\n-   an ASM_STMT node).  */\n+   an ASM_EXPR node).  */\n tree\n build_asm_stmt (tree cv_qualifier, tree args)\n {\n@@ -6137,7 +6137,7 @@ build_asm_stmt (tree cv_qualifier, tree args)\n    some INPUTS, and some CLOBBERS.  The latter three may be NULL.\n    SIMPLE indicates whether there was anything at all after the\n    string in the asm expression -- asm(\"blah\") and asm(\"blah\" : )\n-   are subtly different.  We use a ASM_STMT node to represent this.  */\n+   are subtly different.  We use a ASM_EXPR node to represent this.  */\n tree\n build_asm_expr (tree string, tree outputs, tree inputs, tree clobbers,\n \t\tbool simple)\n@@ -6188,7 +6188,7 @@ build_asm_expr (tree string, tree outputs, tree inputs, tree clobbers,\n   for (tail = inputs; tail; tail = TREE_CHAIN (tail))\n     TREE_VALUE (tail) = default_function_array_conversion (TREE_VALUE (tail));\n \n-  args = build_stmt (ASM_STMT, string, outputs, inputs, clobbers);\n+  args = build_stmt (ASM_EXPR, string, outputs, inputs, clobbers);\n \n   /* Simple asm statements are treated as volatile.  */\n   if (simple)"}, {"sha": "90636b0cc5c32a2b7a145939bf38ba0073f21412", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e130a54b78b1f9b096a5ab1b98debfb263e16663/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e130a54b78b1f9b096a5ab1b98debfb263e16663/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e130a54b78b1f9b096a5ab1b98debfb263e16663", "patch": "@@ -1,3 +1,9 @@\n+2004-06-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* parser.c (cp_parser_asm_definition): Update commentary.\n+\t* pt.c (tsubst_expr): Use ASM_EXPR.\n+\t* semantics.c (finish_asm_stmt): Likewise.\n+\n 2004-06-16  Richard Henderson  <rth@redhat.com>\n \n \t* decl.c (finish_destructor_body): Use LABEL_EXPR."}, {"sha": "863c9a29582b5304484dae9e44a67cc295449dd6", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e130a54b78b1f9b096a5ab1b98debfb263e16663/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e130a54b78b1f9b096a5ab1b98debfb263e16663/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=e130a54b78b1f9b096a5ab1b98debfb263e16663", "patch": "@@ -10035,12 +10035,12 @@ cp_parser_asm_definition (cp_parser* parser)\n \t\t\t\t\t   /*consume_paren=*/true);\n   cp_parser_require (parser, CPP_SEMICOLON, \"`;'\");\n \n-  /* Create the ASM_STMT.  */\n+  /* Create the ASM_EXPR.  */\n   if (at_function_scope_p ())\n     {\n       asm_stmt = finish_asm_stmt (volatile_p, string, outputs,\n \t\t\t\t  inputs, clobbers);\n-      /* If the extended syntax was not used, mark the ASM_STMT.  */\n+      /* If the extended syntax was not used, mark the ASM_EXPR.  */\n       if (!extended_p)\n \tASM_INPUT_P (asm_stmt) = 1;\n     }"}, {"sha": "a1e0a37d8c713f73b95322558ad09b97751885b5", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e130a54b78b1f9b096a5ab1b98debfb263e16663/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e130a54b78b1f9b096a5ab1b98debfb263e16663/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e130a54b78b1f9b096a5ab1b98debfb263e16663", "patch": "@@ -7997,7 +7997,7 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n       finish_goto_stmt (tmp);\n       break;\n \n-    case ASM_STMT:\n+    case ASM_EXPR:\n       prep_stmt (t);\n       tmp = finish_asm_stmt\n \t(ASM_VOLATILE_P (t),"}, {"sha": "8961d8f6e4669af8c0866e0b68a2a22da63da960", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e130a54b78b1f9b096a5ab1b98debfb263e16663/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e130a54b78b1f9b096a5ab1b98debfb263e16663/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=e130a54b78b1f9b096a5ab1b98debfb263e16663", "patch": "@@ -1073,7 +1073,7 @@ finish_asm_stmt (int volatile_p, tree string, tree output_operands,\n \t}\n     }\n \n-  r = build_stmt (ASM_STMT, string,\n+  r = build_stmt (ASM_EXPR, string,\n \t\t  output_operands, input_operands,\n \t\t  clobbers);\n   ASM_VOLATILE_P (r) = volatile_p;"}, {"sha": "aa1511fc4de8effc7aa58cf31336d5b26eb374d1", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e130a54b78b1f9b096a5ab1b98debfb263e16663/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e130a54b78b1f9b096a5ab1b98debfb263e16663/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=e130a54b78b1f9b096a5ab1b98debfb263e16663", "patch": "@@ -1081,7 +1081,7 @@ struct tree_vec GTY(())\n    a goto statement.  */\n #define GOTO_DESTINATION(NODE)  TREE_OPERAND ((NODE), 0)\n \n-/* ASM_STMT accessors. ASM_STRING returns a STRING_CST for the\n+/* ASM_EXPR accessors. ASM_STRING returns a STRING_CST for the\n    instruction (e.g., \"mov x, y\"). ASM_OUTPUTS, ASM_INPUTS, and\n    ASM_CLOBBERS represent the outputs, inputs, and clobbers for the\n    statement.  */"}]}