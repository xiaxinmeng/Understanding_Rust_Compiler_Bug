{"sha": "b1d5f644929182de05cf2bb940a6c417ec28f29a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFkNWY2NDQ5MjkxODJkZTA1Y2YyYmI5NDBhNmM0MTdlYzI4ZjI5YQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-08-30T12:37:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-08-30T12:37:10Z"}, "message": "re PR tree-optimization/87147 (GCC miscompiles at -O3 on valid code)\n\n2018-08-30  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/87147\n\t* tree-ssa-sccvn.c (SSA_VISITED): New function.\n\t(visit_phi): When the degenerate result is from the backedge and\n\twe didn't visit its definition yet drop to VARYING.\n\t(do_rpo_vn): Properly mark blocks with incoming backedges as executable.\n\n\t* gcc.dg/torture/pr87147.c: New testcase.\n\nFrom-SVN: r263980", "tree": {"sha": "e9f0db5db8d2a0fdf340469bc42a7d577979b988", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9f0db5db8d2a0fdf340469bc42a7d577979b988"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1d5f644929182de05cf2bb940a6c417ec28f29a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1d5f644929182de05cf2bb940a6c417ec28f29a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1d5f644929182de05cf2bb940a6c417ec28f29a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1d5f644929182de05cf2bb940a6c417ec28f29a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "28428506aafe4613e4abf0b38671b4fc9c371ef9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28428506aafe4613e4abf0b38671b4fc9c371ef9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28428506aafe4613e4abf0b38671b4fc9c371ef9"}], "stats": {"total": 74, "additions": 67, "deletions": 7}, "files": [{"sha": "e7a1910ee6ff8556c3d5b1a0ad1225b8a028b344", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5f644929182de05cf2bb940a6c417ec28f29a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5f644929182de05cf2bb940a6c417ec28f29a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1d5f644929182de05cf2bb940a6c417ec28f29a", "patch": "@@ -1,3 +1,11 @@\n+2018-08-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/87147\n+\t* tree-ssa-sccvn.c (SSA_VISITED): New function.\n+\t(visit_phi): When the degenerate result is from the backedge and\n+\twe didn't visit its definition yet drop to VARYING.\n+\t(do_rpo_vn): Properly mark blocks with incoming backedges as executable.\n+\n 2018-08-29  Jan Hubicka  <jh@suse.cz>\n \n \t* lto-streamer-out.c (DFS::DFS_write_tree_body): Do not walk"}, {"sha": "75e6c6755638dd87cf03ad624a2748752541b785", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5f644929182de05cf2bb940a6c417ec28f29a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5f644929182de05cf2bb940a6c417ec28f29a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b1d5f644929182de05cf2bb940a6c417ec28f29a", "patch": "@@ -1,3 +1,8 @@\n+2018-08-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/87147\n+\t* gcc.dg/torture/pr87147.c: New testcase.\n+\n 2018-08-30  Tamar Christina  <tamar.christina@arm.com>\n \n  \t* gcc.target/aarch64/large_struct_copy_2.c: New."}, {"sha": "385cfce7201111160bfa618a38eb147122decdaa", "filename": "gcc/testsuite/gcc.dg/torture/pr87147.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5f644929182de05cf2bb940a6c417ec28f29a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr87147.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5f644929182de05cf2bb940a6c417ec28f29a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr87147.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr87147.c?ref=b1d5f644929182de05cf2bb940a6c417ec28f29a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+\n+short a;\n+long b;\n+int c, d, g;\n+char e, h;\n+long f[] = {0};\n+int main()\n+{\n+  int i = 1;\n+  for (; a <= 3; a++) {\n+      c = 0;\n+      for (; c <= 2; c++) {\n+\t  b = 0;\n+\t  for (; b <= 3; b++) {\n+\t      h = i && f[d];\n+\t      e = g && i;\n+\t      i = 0;\n+\t  }\n+      }\n+  }\n+}"}, {"sha": "2bf71e5b15b359a7debd12194e74a759cf85f554", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5f644929182de05cf2bb940a6c417ec28f29a/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5f644929182de05cf2bb940a6c417ec28f29a/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=b1d5f644929182de05cf2bb940a6c417ec28f29a", "patch": "@@ -462,6 +462,15 @@ SSA_VAL (tree x)\n   return tem && tem->visited ? tem->valnum : x;\n }\n \n+/* Return whether X was visited.  */\n+\n+inline bool\n+SSA_VISITED (tree x)\n+{\n+  vn_ssa_aux_t tem = vn_ssa_aux_hash->find_with_hash (x, SSA_NAME_VERSION (x));\n+  return tem && tem->visited;\n+}\n+\n /* Return the SSA value of the VUSE x, supporting released VDEFs\n    during elimination which will value-number the VDEF to the\n    associated VUSE (but not substitute in the whole lattice).  */\n@@ -4100,6 +4109,7 @@ static bool\n visit_phi (gimple *phi, bool *inserted, bool backedges_varying_p)\n {\n   tree result, sameval = VN_TOP, seen_undef = NULL_TREE;\n+  tree backedge_name = NULL_TREE;\n   tree sameval_base = NULL_TREE;\n   poly_int64 soff, doff;\n   unsigned n_executable = 0;\n@@ -4126,9 +4136,13 @@ visit_phi (gimple *phi, bool *inserted, bool backedges_varying_p)\n \ttree def = PHI_ARG_DEF_FROM_EDGE (phi, e);\n \n \t++n_executable;\n-\tif (TREE_CODE (def) == SSA_NAME\n-\t    && (!backedges_varying_p || !(e->flags & EDGE_DFS_BACK)))\n-\t  def = SSA_VAL (def);\n+\tif (TREE_CODE (def) == SSA_NAME)\n+\t  {\n+\t    if (e->flags & EDGE_DFS_BACK)\n+\t      backedge_name = def;\n+\t    if (!backedges_varying_p || !(e->flags & EDGE_DFS_BACK))\n+\t      def = SSA_VAL (def);\n+\t  }\n \tif (def == VN_TOP)\n \t  ;\n \t/* Ignore undefined defs for sameval but record one.  */\n@@ -4162,10 +4176,15 @@ visit_phi (gimple *phi, bool *inserted, bool backedges_varying_p)\n \t  }\n       }\n \n-\n+  /* If the value we want to use is the backedge and that wasn't visited\n+     yet drop to VARYING.  */ \n+  if (backedge_name\n+      && sameval == backedge_name\n+      && !SSA_VISITED (backedge_name))\n+    result = PHI_RESULT (phi);\n   /* If none of the edges was executable keep the value-number at VN_TOP,\n      if only a single edge is exectuable use its value.  */\n-  if (n_executable <= 1)\n+  else if (n_executable <= 1)\n     result = seen_undef ? seen_undef : sameval;\n   /* If we saw only undefined values and VN_TOP use one of the\n      undefined values.  */\n@@ -6298,6 +6317,7 @@ do_rpo_vn (function *fn, edge entry, bitmap exit_bbs,\n     {\n       basic_block bb = BASIC_BLOCK_FOR_FN (fn, rpo[i]);\n       rpo_state[i].visited = 0;\n+      bb->flags &= ~BB_EXECUTABLE;\n       bool has_backedges = false;\n       edge e;\n       edge_iterator ei;\n@@ -6306,12 +6326,17 @@ do_rpo_vn (function *fn, edge entry, bitmap exit_bbs,\n \t  if (e->flags & EDGE_DFS_BACK)\n \t    has_backedges = true;\n \t  if (! iterate && (e->flags & EDGE_DFS_BACK))\n-\t    e->flags |= EDGE_EXECUTABLE;\n+\t    {\n+\t      e->flags |= EDGE_EXECUTABLE;\n+\t      /* ???  Strictly speaking we only need to unconditionally\n+\t\t process a block when it is in an irreducible region,\n+\t\t thus when it may be reachable via the backedge only.  */\n+\t      bb->flags |= BB_EXECUTABLE;\n+\t    }\n \t  else\n \t    e->flags &= ~EDGE_EXECUTABLE;\n \t}\n       rpo_state[i].iterate = iterate && has_backedges;\n-      bb->flags &= ~BB_EXECUTABLE;\n     }\n   entry->flags |= EDGE_EXECUTABLE;\n   entry->dest->flags |= BB_EXECUTABLE;"}]}