{"sha": "2a9afc868088221a4edd54e79d1388ab25f7f2fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE5YWZjODY4MDg4MjIxYTRlZGQ1NGU3OWQxMzg4YWIyNWY3ZjJmYQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2016-03-01T21:46:58Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2016-03-01T21:46:58Z"}, "message": "re PR tree-optimization/69196 (code size regression with jump threading at -O2)\n\n\tPR tree-optimization/69196\n\t* tree-ssa-threadbackward.c (fsm_find_control_statement_thread_paths):\n\tDo count some PHIs in the thread path against the insn count.  Decrease\n\tfinal statement count by one as the control statement in the last\n\tblock will get removed.  Remove special cased code for handling PHIs\t\tin the last block.\n\n\tPR tree-optimization/69196\n\t* gcc.dg/tree-ssa/vrp46.c: Twiddle threading params to keep it from\n\tduplicating code and spoiling the expected output.\n\nFrom-SVN: r233866", "tree": {"sha": "7e1d32b69687a2bfcffd1e2fd057ba3e812d1297", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e1d32b69687a2bfcffd1e2fd057ba3e812d1297"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a9afc868088221a4edd54e79d1388ab25f7f2fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a9afc868088221a4edd54e79d1388ab25f7f2fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a9afc868088221a4edd54e79d1388ab25f7f2fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a9afc868088221a4edd54e79d1388ab25f7f2fa/comments", "author": null, "committer": null, "parents": [{"sha": "0d39977e3486bdd4d35913b7ce7e293e2f2e8cc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d39977e3486bdd4d35913b7ce7e293e2f2e8cc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d39977e3486bdd4d35913b7ce7e293e2f2e8cc2"}], "stats": {"total": 70, "additions": 51, "deletions": 19}, "files": [{"sha": "c1f25572590e091fbf55cf141bda48b6424a72cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a9afc868088221a4edd54e79d1388ab25f7f2fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a9afc868088221a4edd54e79d1388ab25f7f2fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a9afc868088221a4edd54e79d1388ab25f7f2fa", "patch": "@@ -1,3 +1,11 @@\n+2016-03-01  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/69196\n+\t* tree-ssa-threadbackward.c (fsm_find_control_statement_thread_paths):\n+\tDo count some PHIs in the thread path against the insn count.  Decrease\n+\tfinal statement count by one as the control statement in the last\n+\tblock will get removed.  Remove special cased code for handling PHIs\t\tin the last block.\n+\n 2016-03-01  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/70027"}, {"sha": "ef8a9875d4021ac3051af79f4cb55cbd4b6d1360", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a9afc868088221a4edd54e79d1388ab25f7f2fa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a9afc868088221a4edd54e79d1388ab25f7f2fa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2a9afc868088221a4edd54e79d1388ab25f7f2fa", "patch": "@@ -1,3 +1,9 @@\n+2016-03-01  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/69196\n+\t* gcc.dg/tree-ssa/vrp46.c: Twiddle threading params to keep it from\n+\tduplicating code and spoiling the expected output.\n+\n 2016-03-01  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/70033"}, {"sha": "d3c9ed144f387cc98f549a5d0bf1b4ece89a81cb", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp46.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a9afc868088221a4edd54e79d1388ab25f7f2fa/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp46.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a9afc868088221a4edd54e79d1388ab25f7f2fa/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp46.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp46.c?ref=2a9afc868088221a4edd54e79d1388ab25f7f2fa", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1 --param fsm-scale-path-blocks=1\" } */\n \n int func_81 (int);\n int func_98 (int);"}, {"sha": "3028504aefa2c8e9233038f67738335ec26e8ebf", "filename": "gcc/tree-ssa-threadbackward.c", "status": "modified", "additions": 36, "deletions": 18, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a9afc868088221a4edd54e79d1388ab25f7f2fa/gcc%2Ftree-ssa-threadbackward.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a9afc868088221a4edd54e79d1388ab25f7f2fa/gcc%2Ftree-ssa-threadbackward.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.c?ref=2a9afc868088221a4edd54e79d1388ab25f7f2fa", "patch": "@@ -286,6 +286,37 @@ fsm_find_control_statement_thread_paths (tree name,\n \t\t      break;\n \t\t    }\n \n+\t\t  /* PHIs in the path will create degenerate PHIS in the\n+\t\t     copied path which will then get propagated away, so\n+\t\t     looking at just the duplicate path the PHIs would\n+\t\t     seem unimportant.\n+\n+\t\t     But those PHIs, because they're assignments to objects\n+\t\t     typically with lives that exist outside the thread path,\n+\t\t     will tend to generate PHIs (or at least new PHI arguments)\n+\t\t     at points where we leave the thread path and rejoin\n+\t\t     the original blocks.  So we do want to account for them.\n+\n+\t\t     We ignore virtual PHIs.  We also ignore cases where BB\n+\t\t     has a single incoming edge.  That's the most common\n+\t\t     degenerate PHI we'll see here.  Finally we ignore PHIs\n+\t\t     that are associated with the value we're tracking as\n+\t\t     that object likely dies.  */\n+\t\t  if (EDGE_COUNT (bb->succs) > 1 && EDGE_COUNT (bb->preds) > 1)\n+\t\t    {\n+\t\t      for (gphi_iterator gsip = gsi_start_phis (bb);\n+\t\t\t   !gsi_end_p (gsip);\n+\t\t\t   gsi_next (&gsip))\n+\t\t\t{\n+\t\t\t  gphi *phi = gsip.phi ();\n+\t\t\t  tree dst = gimple_phi_result (phi);\n+\n+\t\t\t  if (SSA_NAME_VAR (dst) != SSA_NAME_VAR (name)\n+\t\t\t      && !virtual_operand_p (dst))\n+\t\t\t    ++n_insns;\n+\t\t\t}\n+\t\t    }\n+\n \t\t  for (gsi = gsi_after_labels (bb);\n \t\t       !gsi_end_p (gsi);\n \t\t       gsi_next_nondebug (&gsi))\n@@ -324,6 +355,11 @@ fsm_find_control_statement_thread_paths (tree name,\n \t\tthreaded_through_latch = true;\n \t    }\n \n+\t  /* We are going to remove the control statement at the end of the\n+\t     last block in the threading path.  So don't count it against our\n+\t     statement count.  */\n+\t  n_insns--;\n+\n \t  gimple *stmt = get_gimple_control_stmt ((*path)[0]);\n \t  gcc_assert (stmt);\n \t  /* We have found a constant value for ARG.  For GIMPLE_SWITCH\n@@ -352,24 +388,6 @@ fsm_find_control_statement_thread_paths (tree name,\n \t\t  == DOMST_NONDOMINATING))\n \t    creates_irreducible_loop = true;\n \n-\t  /* PHIs in the final target and only the final target will need\n-\t     to be duplicated.  So only count those against the number\n-\t     of statements.  */\n-\t  gphi_iterator gsip;\n-\t  for (gsip = gsi_start_phis (taken_edge->dest);\n-\t       !gsi_end_p (gsip);\n-\t       gsi_next (&gsip))\n-\t    {\n-\t      gphi *phi = gsip.phi ();\n-\t      tree dst = gimple_phi_result (phi);\n-\n-\t      /* We consider any non-virtual PHI as a statement since it\n-\t\t count result in a constant assignment or copy\n-\t\t operation.  */\n-\t      if (!virtual_operand_p (dst))\n-\t\t++n_insns;\n-\t    }\n-\n \t  if (path_crosses_loops)\n \t    {\n \t      if (dump_file && (dump_flags & TDF_DETAILS))"}]}