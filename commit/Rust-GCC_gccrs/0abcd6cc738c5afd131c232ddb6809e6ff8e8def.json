{"sha": "0abcd6cc738c5afd131c232ddb6809e6ff8e8def", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFiY2Q2Y2M3MzhjNWFmZDEzMWMyMzJkZGI2ODA5ZTZmZjhlOGRlZg==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2016-09-09T09:40:22Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2016-09-09T09:40:22Z"}, "message": "[Patch libgcc] Enable HCmode multiply and divide (mulhc3/divhc3)\n\nThis patch arranges for half-precision complex multiply and divide\nroutines to be built if __LIBGCC_HAS_HF_MODE__.  This will be true\nif the target supports the _Float16 type.\n\nlibgcc/\n\n\tPR target/63250\n\t*  Makefile.in (lib2funcs): Build _mulhc3 and _divhc3.\n\t* libgcc2.h (LIBGCC_HAS_HF_MODE): Conditionally define.\n\t(HFtype): Likewise.\n\t(HCtype): Likewise.\n\t(__divhc3): Likewise.\n\t(__mulhc3): Likewise.\n\t* libgcc2.c: Support _mulhc3 and _divhc3.\n\nFrom-SVN: r240043", "tree": {"sha": "fa60721ba37968ad4ebd70293c6f08a547f86ddf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa60721ba37968ad4ebd70293c6f08a547f86ddf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0abcd6cc738c5afd131c232ddb6809e6ff8e8def", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0abcd6cc738c5afd131c232ddb6809e6ff8e8def", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0abcd6cc738c5afd131c232ddb6809e6ff8e8def", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0abcd6cc738c5afd131c232ddb6809e6ff8e8def/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f67a81a5e266a110963062cf3d76c98d8bcb0974", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f67a81a5e266a110963062cf3d76c98d8bcb0974", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f67a81a5e266a110963062cf3d76c98d8bcb0974"}], "stats": {"total": 45, "additions": 39, "deletions": 6}, "files": [{"sha": "73e3a4f6d6f48029bb332e3589b1fc375adcffe1", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0abcd6cc738c5afd131c232ddb6809e6ff8e8def/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0abcd6cc738c5afd131c232ddb6809e6ff8e8def/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=0abcd6cc738c5afd131c232ddb6809e6ff8e8def", "patch": "@@ -1,3 +1,14 @@\n+2016-09-09  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\tPR target/63250\n+\t*  Makefile.in (lib2funcs): Build _mulhc3 and _divhc3.\n+\t* libgcc2.h (LIBGCC_HAS_HF_MODE): Conditionally define.\n+\t(HFtype): Likewise.\n+\t(HCtype): Likewise.\n+\t(__divhc3): Likewise.\n+\t(__mulhc3): Likewise.\n+\t* libgcc2.c: Support _mulhc3 and _divhc3.\n+\n 2016-09-07  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR libgcc/77519"}, {"sha": "53e3ea20b12aead9ccaad0ede7a6e14ac7673323", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0abcd6cc738c5afd131c232ddb6809e6ff8e8def/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0abcd6cc738c5afd131c232ddb6809e6ff8e8def/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=0abcd6cc738c5afd131c232ddb6809e6ff8e8def", "patch": "@@ -414,8 +414,9 @@ lib2funcs = _muldi3 _negdi2 _lshrdi3 _ashldi3 _ashrdi3 _cmpdi2 _ucmpdi2\t   \\\n \t    _negvsi2 _negvdi2 _ctors _ffssi2 _ffsdi2 _clz _clzsi2 _clzdi2  \\\n \t    _ctzsi2 _ctzdi2 _popcount_tab _popcountsi2 _popcountdi2\t   \\\n \t    _paritysi2 _paritydi2 _powisf2 _powidf2 _powixf2 _powitf2\t   \\\n-\t    _mulsc3 _muldc3 _mulxc3 _multc3 _divsc3 _divdc3 _divxc3\t   \\\n-\t    _divtc3 _bswapsi2 _bswapdi2 _clrsbsi2 _clrsbdi2\n+\t    _mulhc3 _mulsc3 _muldc3 _mulxc3 _multc3 _divhc3 _divsc3\t   \\\n+\t    _divdc3 _divxc3 _divtc3 _bswapsi2 _bswapdi2 _clrsbsi2\t   \\\n+\t    _clrsbdi2\n \n # The floating-point conversion routines that involve a single-word integer.\n # XX stands for the integer mode."}, {"sha": "9fb150b2dd5fc415736a110ff5f979edd5ad1b6b", "filename": "libgcc/libgcc2.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0abcd6cc738c5afd131c232ddb6809e6ff8e8def/libgcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0abcd6cc738c5afd131c232ddb6809e6ff8e8def/libgcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcc2.c?ref=0abcd6cc738c5afd131c232ddb6809e6ff8e8def", "patch": "@@ -1852,7 +1852,8 @@ NAME (TYPE x, int m)\n \n #endif\n \f\n-#if ((defined(L_mulsc3) || defined(L_divsc3)) && LIBGCC2_HAS_SF_MODE) \\\n+#if((defined(L_mulhc3) || defined(L_divhc3)) && LIBGCC2_HAS_HF_MODE) \\\n+    || ((defined(L_mulsc3) || defined(L_divsc3)) && LIBGCC2_HAS_SF_MODE) \\\n     || ((defined(L_muldc3) || defined(L_divdc3)) && LIBGCC2_HAS_DF_MODE) \\\n     || ((defined(L_mulxc3) || defined(L_divxc3)) && LIBGCC2_HAS_XF_MODE) \\\n     || ((defined(L_multc3) || defined(L_divtc3)) && LIBGCC2_HAS_TF_MODE)\n@@ -1861,7 +1862,13 @@ NAME (TYPE x, int m)\n #undef double\n #undef long\n \n-#if defined(L_mulsc3) || defined(L_divsc3)\n+#if defined(L_mulhc3) || defined(L_divhc3)\n+# define MTYPE\tHFtype\n+# define CTYPE\tHCtype\n+# define MODE\thc\n+# define CEXT\t__LIBGCC_HF_FUNC_EXT__\n+# define NOTRUNC (!__LIBGCC_HF_EXCESS_PRECISION__)\n+#elif defined(L_mulsc3) || defined(L_divsc3)\n # define MTYPE\tSFtype\n # define CTYPE\tSCtype\n # define MODE\tsc\n@@ -1922,7 +1929,7 @@ extern void *compile_type_assert[sizeof(INFINITY) == sizeof(MTYPE) ? 1 : -1];\n # define TRUNC(x)\t__asm__ (\"\" : \"=m\"(x) : \"m\"(x))\n #endif\n \n-#if defined(L_mulsc3) || defined(L_muldc3) \\\n+#if defined(L_mulhc3) || defined(L_mulsc3) || defined(L_muldc3) \\\n     || defined(L_mulxc3) || defined(L_multc3)\n \n CTYPE\n@@ -1992,7 +1999,7 @@ CONCAT3(__mul,MODE,3) (MTYPE a, MTYPE b, MTYPE c, MTYPE d)\n }\n #endif /* complex multiply */\n \n-#if defined(L_divsc3) || defined(L_divdc3) \\\n+#if defined(L_divhc3) || defined(L_divsc3) || defined(L_divdc3) \\\n     || defined(L_divxc3) || defined(L_divtc3)\n \n CTYPE"}, {"sha": "c46fb77a6ec2828d40f23ff823d05d3c36d9f796", "filename": "libgcc/libgcc2.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0abcd6cc738c5afd131c232ddb6809e6ff8e8def/libgcc%2Flibgcc2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0abcd6cc738c5afd131c232ddb6809e6ff8e8def/libgcc%2Flibgcc2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcc2.h?ref=0abcd6cc738c5afd131c232ddb6809e6ff8e8def", "patch": "@@ -34,6 +34,12 @@ extern void __clear_cache (char *, char *);\n extern void __eprintf (const char *, const char *, unsigned int, const char *)\n   __attribute__ ((__noreturn__));\n \n+#ifdef __LIBGCC_HAS_HF_MODE__\n+#define LIBGCC2_HAS_HF_MODE 1\n+#else\n+#define LIBGCC2_HAS_HF_MODE 0\n+#endif\n+\n #ifdef __LIBGCC_HAS_SF_MODE__\n #define LIBGCC2_HAS_SF_MODE 1\n #else\n@@ -133,6 +139,10 @@ typedef unsigned int UTItype\t__attribute__ ((mode (TI)));\n #endif\n #endif\n \n+#if LIBGCC2_HAS_HF_MODE\n+typedef\t\tfloat HFtype\t__attribute__ ((mode (HF)));\n+typedef _Complex float HCtype\t__attribute__ ((mode (HC)));\n+#endif\n #if LIBGCC2_HAS_SF_MODE\n typedef \tfloat SFtype\t__attribute__ ((mode (SF)));\n typedef _Complex float SCtype\t__attribute__ ((mode (SC)));\n@@ -424,6 +434,10 @@ extern SItype __negvsi2 (SItype);\n #endif /* COMPAT_SIMODE_TRAPPING_ARITHMETIC */\n \n #undef int\n+#if LIBGCC2_HAS_HF_MODE\n+extern HCtype __divhc3 (HFtype, HFtype, HFtype, HFtype);\n+extern HCtype __mulhc3 (HFtype, HFtype, HFtype, HFtype);\n+#endif\n #if LIBGCC2_HAS_SF_MODE\n extern DWtype __fixsfdi (SFtype);\n extern SFtype __floatdisf (DWtype);"}]}