{"sha": "116c24a05cd68221a2e832c0a7c0d9225c7e4d20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE2YzI0YTA1Y2Q2ODIyMWEyZTgzMmMwYTdjMGQ5MjI1YzdlNGQyMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-08-22T12:41:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-22T12:41:18Z"}, "message": "init.c: adjust EH support code on Alpha/Tru64 as well.\n\n2008-08-22  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* init.c: adjust EH support code on Alpha/Tru64 as well.\n\n\t* raise-gcc.c: Add back a couple of comments.\n\nFrom-SVN: r139446", "tree": {"sha": "6d16dd0e5e2d1e6489a3550cab5cbaf3e60afcf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d16dd0e5e2d1e6489a3550cab5cbaf3e60afcf4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/116c24a05cd68221a2e832c0a7c0d9225c7e4d20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/116c24a05cd68221a2e832c0a7c0d9225c7e4d20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/116c24a05cd68221a2e832c0a7c0d9225c7e4d20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/116c24a05cd68221a2e832c0a7c0d9225c7e4d20/comments", "author": null, "committer": null, "parents": [{"sha": "0999b547483679fe9060506a28e170866d07cd92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0999b547483679fe9060506a28e170866d07cd92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0999b547483679fe9060506a28e170866d07cd92"}], "stats": {"total": 36, "additions": 7, "deletions": 29}, "files": [{"sha": "79655931b37f746a22cbffa3c841de117fbc6916", "filename": "gcc/ada/init.c", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/116c24a05cd68221a2e832c0a7c0d9225c7e4d20/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/116c24a05cd68221a2e832c0a7c0d9225c7e4d20/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=116c24a05cd68221a2e832c0a7c0d9225c7e4d20", "patch": "@@ -291,30 +291,6 @@ extern char *__gnat_get_code_loc (struct sigcontext *);\n extern void __gnat_set_code_loc (struct sigcontext *, char *);\n extern size_t __gnat_machine_state_length (void);\n \n-/* __gnat_adjust_context_for_raise - see comments along with the default\n-   version later in this file.  */\n-\n-#define HAVE_GNAT_ADJUST_CONTEXT_FOR_RAISE\n-\n-void\n-__gnat_adjust_context_for_raise (int signo, void *context)\n-{\n-  struct sigcontext * sigcontext = (struct sigcontext *) context;\n-\n-  /* The fallback code fetches the faulting insn address from sc_pc, so\n-     adjust that when need be.  For SIGFPE, the required adjustment depends\n-     on the trap shadow situation (see man ieee).  */\n-  if (signo == SIGFPE)\n-    {\n-      /* ??? We never adjust here, considering that sc_pc always\n-\t designates the instruction following the one which trapped.\n-\t This is not necessarily true but corresponds to what we have\n-\t always observed.  */\n-    }\n-  else\n-    sigcontext->sc_pc ++;\n-}\n-\n static void\n __gnat_error_handler\n   (int sig, siginfo_t *sip, struct sigcontext *context)\n@@ -323,10 +299,6 @@ __gnat_error_handler\n   static int recurse = 0;\n   const char *msg;\n \n-  /* Adjusting is required for every fault context, so adjust for this one\n-     now, before we possibly trigger a recursive fault below.  */\n-  __gnat_adjust_context_for_raise (sig, context);\n-\n   /* If this was an explicit signal from a \"kill\", just resignal it.  */\n   if (SI_FROMUSER (sip))\n     {\n@@ -2104,7 +2076,7 @@ __gnat_adjust_context_for_raise (int signo ATTRIBUTE_UNUSED,\n {\n   /* We used to compensate here for the raised from call vs raised from signal\n      exception discrepancy with the GCC ZCX scheme, but this is now dealt with\n-     generically (except for Alpha and IA-64), see PR other/26208.\n+     generically (except for the IA-64), see GCC PR other/26208.\n \n      *** Call vs signal exception discrepancy with GCC ZCX scheme ***\n "}, {"sha": "434213b7d899ccb180767f02e0420fe7b8bf562a", "filename": "gcc/ada/raise-gcc.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/116c24a05cd68221a2e832c0a7c0d9225c7e4d20/gcc%2Fada%2Fraise-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/116c24a05cd68221a2e832c0a7c0d9225c7e4d20/gcc%2Fada%2Fraise-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise-gcc.c?ref=116c24a05cd68221a2e832c0a7c0d9225c7e4d20", "patch": "@@ -694,6 +694,8 @@ get_call_site_action_for (_Unwind_Context *uw_context,\n #else\n   _Unwind_Ptr call_site = _Unwind_GetIP (uw_context);\n #endif\n+  /* Subtract 1 if necessary because GetIPInfo returns the actual call site\n+     value + 1 in this case.  */\n   if (!ip_before_insn)\n     call_site--;\n \n@@ -758,6 +760,10 @@ get_call_site_action_for (_Unwind_Context *uw_context,\n #else\n   _Unwind_Ptr ip = _Unwind_GetIP (uw_context);\n #endif\n+  /* Subtract 1 if necessary because GetIPInfo yields a call return address\n+     in this case, while we are interested in information for the call point.\n+     This does not always yield the exact call instruction address but always\n+     brings the IP back within the corresponding region.  */\n   if (!ip_before_insn)\n     ip--;\n "}]}