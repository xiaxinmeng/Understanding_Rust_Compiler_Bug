{"sha": "29f5bccbfc09753b7e465285956bb15fe3bc10b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlmNWJjY2JmYzA5NzUzYjdlNDY1Mjg1OTU2YmIxNWZlM2JjMTBiMA==", "commit": {"author": {"name": "Dehao Chen", "email": "dehao@google.com", "date": "2012-11-01T00:08:51Z"}, "committer": {"name": "Dehao Chen", "email": "dehao@gcc.gnu.org", "date": "2012-11-01T00:08:51Z"}, "message": "tree-eh.c (do_return_redirection): Set location for jump statement.\n\ngcc:\n2012-10-31  Dehao Chen  <dehao@google.com>\n\n\t* tree-eh.c (do_return_redirection): Set location for jump statement.\n\t(do_goto_redirection): Likewise.\n\t(frob_into_branch_around): Likewise.\n\t(lower_try_finally_nofallthru): Likewise.\n\t(lower_try_finally_copy): Likewise.\n\t(lower_try_finally_switch): Likewise.\n\t* expr.c (store_expr): Use current insn location instead of expr\n\tlocation.\n\t(expand_expr_real): Likewise.\n\t(expand_expr_real_1): Likewise.\n\ngcc/testsuite:\n2012-10-31  Dehao Chen  <dehao@google.com>\n\n\t* g++.dg/debug/dwarf2/block.C: New testcase.\n\nFrom-SVN: r193053", "tree": {"sha": "06a68854befb9c71d71c7a7a73535a6958147b76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06a68854befb9c71d71c7a7a73535a6958147b76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29f5bccbfc09753b7e465285956bb15fe3bc10b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f5bccbfc09753b7e465285956bb15fe3bc10b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29f5bccbfc09753b7e465285956bb15fe3bc10b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f5bccbfc09753b7e465285956bb15fe3bc10b0/comments", "author": {"login": "danielcdh", "id": 694263, "node_id": "MDQ6VXNlcjY5NDI2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/694263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielcdh", "html_url": "https://github.com/danielcdh", "followers_url": "https://api.github.com/users/danielcdh/followers", "following_url": "https://api.github.com/users/danielcdh/following{/other_user}", "gists_url": "https://api.github.com/users/danielcdh/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielcdh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielcdh/subscriptions", "organizations_url": "https://api.github.com/users/danielcdh/orgs", "repos_url": "https://api.github.com/users/danielcdh/repos", "events_url": "https://api.github.com/users/danielcdh/events{/privacy}", "received_events_url": "https://api.github.com/users/danielcdh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0f379f762d2f3e7f84c038368b9e32c50c8deaab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f379f762d2f3e7f84c038368b9e32c50c8deaab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f379f762d2f3e7f84c038368b9e32c50c8deaab"}], "stats": {"total": 94, "additions": 65, "deletions": 29}, "files": [{"sha": "9db326f627a53b5c0bf8d29abed32d006abf04cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f5bccbfc09753b7e465285956bb15fe3bc10b0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f5bccbfc09753b7e465285956bb15fe3bc10b0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29f5bccbfc09753b7e465285956bb15fe3bc10b0", "patch": "@@ -1,3 +1,16 @@\n+2012-10-31  Dehao Chen  <dehao@google.com>\n+\n+\t* tree-eh.c (do_return_redirection): Set location for jump statement.\n+\t(do_goto_redirection): Likewise.\n+\t(frob_into_branch_around): Likewise.\n+\t(lower_try_finally_nofallthru): Likewise.\n+\t(lower_try_finally_copy): Likewise.\n+\t(lower_try_finally_switch): Likewise.\n+\t* expr.c (store_expr): Use current insn location instead of expr\n+\tlocation.\n+\t(expand_expr_real): Likewise.\n+\t(expand_expr_real_1): Likewise.\n+\n 2012-10-31   Easwaran Raman  <eraman@google.com>\n \n \tPR target/54938"}, {"sha": "0ad3b578f17529bc0b2f3db3e1b21b20c671a712", "filename": "gcc/expr.c", "status": "modified", "additions": 12, "deletions": 29, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f5bccbfc09753b7e465285956bb15fe3bc10b0/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f5bccbfc09753b7e465285956bb15fe3bc10b0/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=29f5bccbfc09753b7e465285956bb15fe3bc10b0", "patch": "@@ -5024,7 +5024,7 @@ store_expr (tree exp, rtx target, int call_param_p, bool nontemporal)\n {\n   rtx temp;\n   rtx alt_rtl = NULL_RTX;\n-  location_t loc = EXPR_LOCATION (exp);\n+  location_t loc = curr_insn_location ();\n \n   if (VOID_TYPE_P (TREE_TYPE (exp)))\n     {\n@@ -7863,31 +7863,7 @@ expand_expr_real (tree exp, rtx target, enum machine_mode tmode,\n       return ret ? ret : const0_rtx;\n     }\n \n-  /* If this is an expression of some kind and it has an associated line\n-     number, then emit the line number before expanding the expression.\n-\n-     We need to save and restore the file and line information so that\n-     errors discovered during expansion are emitted with the right\n-     information.  It would be better of the diagnostic routines\n-     used the file/line information embedded in the tree nodes rather\n-     than globals.  */\n-  if (cfun && EXPR_HAS_LOCATION (exp))\n-    {\n-      location_t saved_location = input_location;\n-      location_t saved_curr_loc = curr_insn_location ();\n-      input_location = EXPR_LOCATION (exp);\n-      set_curr_insn_location (input_location);\n-\n-      ret = expand_expr_real_1 (exp, target, tmode, modifier, alt_rtl);\n-\n-      input_location = saved_location;\n-      set_curr_insn_location (saved_curr_loc);\n-    }\n-  else\n-    {\n-      ret = expand_expr_real_1 (exp, target, tmode, modifier, alt_rtl);\n-    }\n-\n+  ret = expand_expr_real_1 (exp, target, tmode, modifier, alt_rtl);\n   return ret;\n }\n \n@@ -9244,8 +9220,15 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \tg = SSA_NAME_DEF_STMT (exp);\n       if (g)\n \t{\n-\t  rtx r = expand_expr_real (gimple_assign_rhs_to_tree (g), target,\n-\t\t\t\t    tmode, modifier, NULL);\n+\t  rtx r;\n+\t  location_t saved_loc = input_location;\n+\n+\t  input_location = gimple_location (g);\n+\t  set_curr_insn_location (input_location);\n+\t  r = expand_expr_real (gimple_assign_rhs_to_tree (g), target,\n+\t\t\t\ttmode, modifier, NULL);\n+\t  input_location = saved_loc;\n+\t  set_curr_insn_location (saved_loc);\n \t  if (REG_P (r) && !REG_EXPR (r))\n \t    set_reg_attrs_for_decl_rtl (SSA_NAME_VAR (exp), r);\n \t  return r;\n@@ -9475,7 +9458,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t       with non-BLKmode values.  */\n \t    gcc_assert (GET_MODE (ret) != BLKmode);\n \n-\t    val = build_decl (EXPR_LOCATION (exp),\n+\t    val = build_decl (curr_insn_location (),\n \t\t\t      VAR_DECL, NULL, TREE_TYPE (exp));\n \t    DECL_ARTIFICIAL (val) = 1;\n \t    DECL_IGNORED_P (val) = 1;"}, {"sha": "926b1796c44e91257b7ad7591b25351ea3082af8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f5bccbfc09753b7e465285956bb15fe3bc10b0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f5bccbfc09753b7e465285956bb15fe3bc10b0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=29f5bccbfc09753b7e465285956bb15fe3bc10b0", "patch": "@@ -1,3 +1,7 @@\n+2012-10-31  Dehao Chen  <dehao@google.com>\n+\n+\t* g++.dg/debug/dwarf2/block.C: New testcase.\n+\n 2012-10-31  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.dg/pr44974.c: Add noinline."}, {"sha": "176823f237e6bbed8798308ccd106dc428376923", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/block.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f5bccbfc09753b7e465285956bb15fe3bc10b0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fblock.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f5bccbfc09753b7e465285956bb15fe3bc10b0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fblock.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fblock.C?ref=29f5bccbfc09753b7e465285956bb15fe3bc10b0", "patch": "@@ -0,0 +1,29 @@\n+// Compiler should not generate too many lexical blocks for this function.\n+// { dg-do compile { target { i?86-*-* x86_64-*-* } } }\n+// { dg-options \"-O0 -fno-exceptions -g -dA\" }\n+\n+union UElement {\n+    void* pointer;\n+    int integer;\n+};\n+struct UColToken {\n+  unsigned source;\n+  unsigned char **rulesToParseHdl;\n+};\n+\n+int uhash_hashTokens(const union UElement k)\n+{\n+  int hash = 0;\n+  struct UColToken *key = (struct UColToken *)k.pointer;\n+  if (key != 0) {\n+    int len = (key->source & 0xFF000000)>>24;\n+    int inc = ((len - 32) / 32) + 1;\n+    const unsigned char *p = (key->source & 0x00FFFFFF)\n+\t\t\t     + *(key->rulesToParseHdl);\n+    const unsigned char *limit = p + len;\n+    hash = *p + *limit;\n+  }\n+  return hash;\n+}\n+\n+// { dg-final { scan-assembler-not \"LBB10\" } }"}, {"sha": "960a966014e7c6ead0e5c6ddd640a9b9d721e6bd", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f5bccbfc09753b7e465285956bb15fe3bc10b0/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f5bccbfc09753b7e465285956bb15fe3bc10b0/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=29f5bccbfc09753b7e465285956bb15fe3bc10b0", "patch": "@@ -739,6 +739,7 @@ do_return_redirection (struct goto_queue_node *q, tree finlab, gimple_seq mod)\n     gimple_seq_add_seq (&q->repl_stmt, mod);\n \n   x = gimple_build_goto (finlab);\n+  gimple_set_location (x, q->location);\n   gimple_seq_add_stmt (&q->repl_stmt, x);\n }\n \n@@ -758,6 +759,7 @@ do_goto_redirection (struct goto_queue_node *q, tree finlab, gimple_seq mod,\n     gimple_seq_add_seq (&q->repl_stmt, mod);\n \n   x = gimple_build_goto (finlab);\n+  gimple_set_location (x, q->location);\n   gimple_seq_add_stmt (&q->repl_stmt, x);\n }\n \n@@ -857,6 +859,7 @@ frob_into_branch_around (gimple tp, eh_region region, tree over)\n       if (!over)\n \tover = create_artificial_label (loc);\n       x = gimple_build_goto (over);\n+      gimple_set_location (x, loc);\n       gimple_seq_add_stmt (&cleanup, x);\n     }\n   gimple_seq_add_seq (&eh_seq, cleanup);\n@@ -1085,6 +1088,7 @@ lower_try_finally_nofallthru (struct leh_state *state,\n \t  emit_post_landing_pad (&eh_seq, tf->region);\n \n \t  x = gimple_build_goto (lab);\n+\t  gimple_set_location (x, gimple_location (tf->try_finally_expr));\n \t  gimple_seq_add_stmt (&eh_seq, x);\n \t}\n     }\n@@ -1223,6 +1227,7 @@ lower_try_finally_copy (struct leh_state *state, struct leh_tf_state *tf)\n \n       tmp = lower_try_finally_fallthru_label (tf);\n       x = gimple_build_goto (tmp);\n+      gimple_set_location (x, tf_loc);\n       gimple_seq_add_stmt (&new_stmt, x);\n     }\n \n@@ -1395,6 +1400,7 @@ lower_try_finally_switch (struct leh_state *state, struct leh_tf_state *tf)\n \n       tmp = lower_try_finally_fallthru_label (tf);\n       x = gimple_build_goto (tmp);\n+      gimple_set_location (x, tf_loc);\n       gimple_seq_add_stmt (&switch_body, x);\n     }\n \n@@ -1423,6 +1429,7 @@ lower_try_finally_switch (struct leh_state *state, struct leh_tf_state *tf)\n       gimple_seq_add_stmt (&eh_seq, x);\n \n       x = gimple_build_goto (finally_label);\n+      gimple_set_location (x, tf_loc);\n       gimple_seq_add_stmt (&eh_seq, x);\n \n       tmp = build_int_cst (integer_type_node, eh_index);"}]}