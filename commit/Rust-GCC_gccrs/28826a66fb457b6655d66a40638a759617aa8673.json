{"sha": "28826a66fb457b6655d66a40638a759617aa8673", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg4MjZhNjZmYjQ1N2I2NjU1ZDY2YTQwNjM4YTc1OTYxN2FhODY3Mw==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2017-01-23T21:56:58Z"}, "committer": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2017-01-23T21:56:58Z"}, "message": "scalar-insert-exp-3.c: New test.\n\ngcc/testsuite/ChangeLog:\n\n2017-01-23  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* gcc.target/powerpc/bfp/scalar-insert-exp-3.c: New test.\n\t* gcc.target/powerpc/bfp/scalar-insert-exp-4.c: New test.\n\t* gcc.target/powerpc/bfp/scalar-insert-exp-5.c: New test.\n\t* gcc.target/powerpc/bfp/scalar-test-data-class-0.c: Adjust return\n\ttype of test function to reflect change in built-in function's\n\treturn type.\n\t* gcc.target/powerpc/bfp/scalar-test-data-class-1.c: Likewise.\n\t* gcc.target/powerpc/bfp/scalar-test-data-class-2.c: Likewise.\n\t* gcc.target/powerpc/bfp/scalar-test-data-class-3.c: Likewise.\n\t* gcc.target/powerpc/bfp/scalar-test-data-class-4.c: Adjust return\n\ttype and second argument type to reflect change in built-in\n\tfunction's type signature.\n\t* gcc.target/powerpc/bfp/scalar-test-data-class-5.c: Likewise.\n\t* gcc.target/powerpc/bfp/scalar-test-data-class-6.c: Adjust return\n\ttype of test function to reflect change in built-in function's\n\treturn type.\n\t* gcc.target/powerpc/bfp/scalar-test-data-class-7.c: Likewise.\n\t* gcc.target/powerpc/bfp/scalar-test-neg-0.c: Likewise.\n\t* gcc.target/powerpc/bfp/scalar-test-neg-1.c: Likewise.\n\t* gcc.target/powerpc/bfp/scalar-test-neg-2.c: Likewise.\n\t* gcc.target/powerpc/bfp/scalar-test-neg-3.c: Likewise.\n\t* gcc.target/powerpc/bfp/vec-extract-exp-0.c: Likewise.\n\t* gcc.target/powerpc/bfp/vec-extract-exp-1.c: Likewise.\n\t* gcc.target/powerpc/bfp/vec-extract-exp-2.c: Likewise.\n\t* gcc.target/powerpc/bfp/vec-extract-exp-3.c: Likewise.\n\t* gcc.target/powerpc/bfp/vec-extract-sig-0.c: Likewise.\n\t* gcc.target/powerpc/bfp/vec-extract-sig-1.c: Likewise.\n\t* gcc.target/powerpc/bfp/vec-extract-sig-2.c: Likewise.\n\t* gcc.target/powerpc/bfp/vec-extract-sig-3.c: Likewise.\n\t* gcc.target/powerpc/bfp/vec-insert-exp-4.c: New test.\n\t* gcc.target/powerpc/bfp/vec-insert-exp-5.c: New test.\n\t* gcc.target/powerpc/bfp/vec-insert-exp-6.c: New test.\n\t* gcc.target/powerpc/bfp/vec-insert-exp-7.c: New test.\n\t* gcc.target/powerpc/bfp/vec-test-data-class-0.c: Adjust return\n\ttype of test function to reflect change in built-in function's\n\treturn type.\n\t* gcc.target/powerpc/bfp/vec-test-data-class-1.c: Likewise.\n\t* gcc.target/powerpc/bfp/vec-test-data-class-2.c: Likewise.\n\t* gcc.target/powerpc/bfp/vec-test-data-class-3.c: Likewise.\n\t* gcc.target/powerpc/bfp/vec-test-data-class-4.c: Likewise.\n\t* gcc.target/powerpc/bfp/vec-test-data-class-5.c: Likewise.\n\t* gcc.target/powerpc/bfp/vec-test-data-class-6.c: Adjust types of\n\ttest function's result and second argument to reflect change in\n\tbuilt-in function's type signature.\n\t* gcc.target/powerpc/bfp/vec-test-data-class-7.c: Likewise.\n\ngcc/ChangeLog:\n\n2017-01-23  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* config/rs6000/rs6000-builtin.def (VSIEDPF): Add scalar insert\n\texponent support with double type for first argument.\n\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Changed\n\ttype returned by __builtin_vec_extract_sig,\n\t__builtin_vec_extract_sig_sp, and __builtin_vec_extract_sig_dp\n\tfunctions from \"vector int\" to \"vector unsigned int\" or from\n\t\"vector long long int\" to \"vector unsigned long long int\".\n\tChanged type returned by __builtin_vec_extract_exp,\n\t__builtin_vec_extract_exp_sp, and __builtin_vec_extract_exp_dp\n\tfunctions from \"vector int\" to \"vector unsigned int\" or from\n\t\"vector long long int\" to \"vector unsigned long long int\".\n\tChanged return type of __builtin_vec_test_data_class,\n\t__builtin_vec_test_data_class_sp, and\n\t__builtin_vec_test_data_class_dp from \"vector int\" to\n\t\"vector bool int\" or from \"vector long long int\" to \"vector bool\n\tlong long int\" and changed second argument type from \"unsigned\n\tint\" to \"int\".  Added new overloaded function forms \"vector float\n\t__builtin_vec_insert_exp (vector float, vector unsigned int)\" and\n\t\"vector float __builtin_vec_insert_exp_sp (vector float, vector\n\tunsigned int)\" and \"vector double __builtin_vec_insert_exp (vector\n\tdouble, vector unsigned long long int)\" and \"vector double\n\t__builtin_vec_insert_exp_dp (vector double, vector unsigned long\n\tlong int)\".  Changed return type of\n\t__builtin_scalar_test_data_class and\n\t__builtin_scalar_test_data_class_sp and\n\t__builtin_scalar_test_data_class_dp from \"unsigned int\" to \"bool\n\tint\" and changed second argument from \"unsigned int\" to \"int\".\n\tChanged type returned by __builtin_scalar_test_neg,\n\t__builtin_scalar_test_neg_sp, and __builtin_scalar_test_neg_dp\n\tfrom \"int\" to \"bool int\".  Added new overloaded function form\n\t\"double __builtin_scalar_insert_exp (double, unsigned long long int)\".\n\t* config/rs6000/vsx.md (xsiexpdpf): New insn for scalar insert\n\texponent double-precision with floating point first argument.\n\t* doc/extend.texi (PowerPC AltiVec Built-in Functions): Adjust\n\tdocumentation of scalar_test_data_class, scalar_test_neg,\n\tscalar_extract_sig, scalar_extract_exp, scalar_insert_exp,\n\tvector_extract_exp, vec_extract_sig, vec_insert_exp, and\n\tvec_test_data_class built-in functions to reflect refinements in\n\ttheir type signatures.\n\nFrom-SVN: r244834", "tree": {"sha": "beb69c9b1d00c84729c22cc2585d61d1cab4d840", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/beb69c9b1d00c84729c22cc2585d61d1cab4d840"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28826a66fb457b6655d66a40638a759617aa8673", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28826a66fb457b6655d66a40638a759617aa8673", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28826a66fb457b6655d66a40638a759617aa8673", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28826a66fb457b6655d66a40638a759617aa8673/comments", "author": null, "committer": null, "parents": [{"sha": "fc7612fd026d28298e2c270acdc5cafbe21cc1a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc7612fd026d28298e2c270acdc5cafbe21cc1a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc7612fd026d28298e2c270acdc5cafbe21cc1a8"}], "stats": {"total": 466, "additions": 378, "deletions": 88}, "files": [{"sha": "468e012b14e14c51bf1ac338d720ee57645966b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -1,3 +1,45 @@\n+2017-01-23  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* config/rs6000/rs6000-builtin.def (VSIEDPF): Add scalar insert\n+\texponent support with double type for first argument.\n+\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Changed\n+\ttype returned by __builtin_vec_extract_sig,\n+\t__builtin_vec_extract_sig_sp, and __builtin_vec_extract_sig_dp\n+\tfunctions from \"vector int\" to \"vector unsigned int\" or from\n+\t\"vector long long int\" to \"vector unsigned long long int\".\n+\tChanged type returned by __builtin_vec_extract_exp,\n+\t__builtin_vec_extract_exp_sp, and __builtin_vec_extract_exp_dp\n+\tfunctions from \"vector int\" to \"vector unsigned int\" or from\n+\t\"vector long long int\" to \"vector unsigned long long int\".\n+\tChanged return type of __builtin_vec_test_data_class,\n+\t__builtin_vec_test_data_class_sp, and\n+\t__builtin_vec_test_data_class_dp from \"vector int\" to\n+\t\"vector bool int\" or from \"vector long long int\" to \"vector bool\n+\tlong long int\" and changed second argument type from \"unsigned\n+\tint\" to \"int\".  Added new overloaded function forms \"vector float\n+\t__builtin_vec_insert_exp (vector float, vector unsigned int)\" and\n+\t\"vector float __builtin_vec_insert_exp_sp (vector float, vector\n+\tunsigned int)\" and \"vector double __builtin_vec_insert_exp (vector\n+\tdouble, vector unsigned long long int)\" and \"vector double\n+\t__builtin_vec_insert_exp_dp (vector double, vector unsigned long\n+\tlong int)\".  Changed return type of\n+\t__builtin_scalar_test_data_class and\n+\t__builtin_scalar_test_data_class_sp and\n+\t__builtin_scalar_test_data_class_dp from \"unsigned int\" to \"bool\n+\tint\" and changed second argument from \"unsigned int\" to \"int\".\n+\tChanged type returned by __builtin_scalar_test_neg,\n+\t__builtin_scalar_test_neg_sp, and __builtin_scalar_test_neg_dp\n+\tfrom \"int\" to \"bool int\".  Added new overloaded function form\n+\t\"double __builtin_scalar_insert_exp (double, unsigned long long int)\".\n+\t* config/rs6000/vsx.md (xsiexpdpf): New insn for scalar insert\n+\texponent double-precision with floating point first argument.\n+\t* doc/extend.texi (PowerPC AltiVec Built-in Functions): Adjust\n+\tdocumentation of scalar_test_data_class, scalar_test_neg,\n+\tscalar_extract_sig, scalar_extract_exp, scalar_insert_exp,\n+\tvector_extract_exp, vec_extract_sig, vec_insert_exp, and\n+\tvec_test_data_class built-in functions to reflect refinements in\n+\ttheir type signatures.\n+\n 2017-01-23  Andreas Tobler  <andreast@gcc.gnu.org>\n \n \t* config/aarch64/aarch64.c (aarch64_elf_asm_constructor): Increase"}, {"sha": "61aed2ba98aaf66e0e4315e9be0b50932bc63ffd", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -1964,6 +1964,7 @@ BU_P9V_VSX_1 (XXBRH_V8HI,\t\"xxbrh_v8hi\",\tCONST,\tp9_xxbrh_v8hi)\n \n /* 2 argument vsx scalar functions added in ISA 3.0 (power9).  */\n BU_P9V_64BIT_VSX_2 (VSIEDP,\t\"scalar_insert_exp\",\tCONST,\txsiexpdp)\n+BU_P9V_64BIT_VSX_2 (VSIEDPF,\t\"scalar_insert_exp_dp\",\tCONST,\txsiexpdpf)\n \n BU_P9V_VSX_2 (VSCEDPGT,\t\"scalar_cmp_exp_dp_gt\",\tCONST,\txscmpexpdp_gt)\n BU_P9V_VSX_2 (VSCEDPLT,\t\"scalar_cmp_exp_dp_lt\",\tCONST,\txscmpexpdp_lt)"}, {"sha": "fd6da7e77e0144186d9ac209d1c1e6fb80a604c7", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 32, "deletions": 20, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -4360,64 +4360,74 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V4SI, 0 },\n \n   { P9V_BUILTIN_VEC_VES, P9V_BUILTIN_VESSP,\n-    RS6000_BTI_V4SI, RS6000_BTI_V4SF, 0, 0 },\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_V4SF, 0, 0 },\n   { P9V_BUILTIN_VEC_VES, P9V_BUILTIN_VESDP,\n-    RS6000_BTI_V2DI, RS6000_BTI_V2DF, 0, 0 },\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_V2DF, 0, 0 },\n \n   { P9V_BUILTIN_VEC_VESSP, P9V_BUILTIN_VESSP,\n-    RS6000_BTI_V4SI, RS6000_BTI_V4SF, 0, 0 },\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_V4SF, 0, 0 },\n   { P9V_BUILTIN_VEC_VESDP, P9V_BUILTIN_VESDP,\n-    RS6000_BTI_V2DI, RS6000_BTI_V2DF, 0, 0 },\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_V2DF, 0, 0 },\n \n   { P9V_BUILTIN_VEC_VEE, P9V_BUILTIN_VEESP,\n-    RS6000_BTI_V4SI, RS6000_BTI_V4SF, 0, 0 },\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_V4SF, 0, 0 },\n   { P9V_BUILTIN_VEC_VEE, P9V_BUILTIN_VEEDP,\n-    RS6000_BTI_V2DI, RS6000_BTI_V2DF, 0, 0 },\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_V2DF, 0, 0 },\n \n   { P9V_BUILTIN_VEC_VEESP, P9V_BUILTIN_VEESP,\n-    RS6000_BTI_V4SI, RS6000_BTI_V4SF, 0, 0 },\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_V4SF, 0, 0 },\n   { P9V_BUILTIN_VEC_VEEDP, P9V_BUILTIN_VEEDP,\n-    RS6000_BTI_V2DI, RS6000_BTI_V2DF, 0, 0 },\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_V2DF, 0, 0 },\n \n   { P9V_BUILTIN_VEC_VTDC, P9V_BUILTIN_VTDCSP,\n-    RS6000_BTI_V4SI, RS6000_BTI_V4SF, RS6000_BTI_UINTSI, 0 },\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_V4SF, RS6000_BTI_INTSI, 0 },\n   { P9V_BUILTIN_VEC_VTDC, P9V_BUILTIN_VTDCDP,\n-    RS6000_BTI_V2DI, RS6000_BTI_V2DF, RS6000_BTI_UINTSI, 0 },\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_V2DF, RS6000_BTI_INTSI, 0 },\n \n   { P9V_BUILTIN_VEC_VTDCSP, P9V_BUILTIN_VTDCSP,\n-    RS6000_BTI_V4SI, RS6000_BTI_V4SF, RS6000_BTI_UINTSI, 0 },\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_V4SF, RS6000_BTI_INTSI, 0 },\n   { P9V_BUILTIN_VEC_VTDCDP, P9V_BUILTIN_VTDCDP,\n-    RS6000_BTI_V2DI, RS6000_BTI_V2DF, RS6000_BTI_UINTSI, 0 },\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_V2DF, RS6000_BTI_INTSI, 0 },\n \n   { P9V_BUILTIN_VEC_VIE, P9V_BUILTIN_VIESP,\n     RS6000_BTI_V4SF, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n+  { P9V_BUILTIN_VEC_VIE, P9V_BUILTIN_VIESP,\n+    RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_unsigned_V4SI, 0 },\n+\n   { P9V_BUILTIN_VEC_VIE, P9V_BUILTIN_VIEDP,\n     RS6000_BTI_V2DF, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+  { P9V_BUILTIN_VEC_VIE, P9V_BUILTIN_VIEDP,\n+    RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_unsigned_V2DI, 0 },\n \n   { P9V_BUILTIN_VEC_VIESP, P9V_BUILTIN_VIESP,\n     RS6000_BTI_V4SF, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n+  { P9V_BUILTIN_VEC_VIESP, P9V_BUILTIN_VIESP,\n+    RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_unsigned_V4SI, 0 },\n+\n   { P9V_BUILTIN_VEC_VIEDP, P9V_BUILTIN_VIEDP,\n     RS6000_BTI_V2DF, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+  { P9V_BUILTIN_VEC_VIEDP, P9V_BUILTIN_VIEDP,\n+    RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_unsigned_V2DI, 0 },\n \n   { P9V_BUILTIN_VEC_VSTDC, P9V_BUILTIN_VSTDCSP,\n-    RS6000_BTI_UINTSI, RS6000_BTI_float, RS6000_BTI_UINTSI, 0 },\n+    RS6000_BTI_bool_int, RS6000_BTI_float, RS6000_BTI_INTSI, 0 },\n   { P9V_BUILTIN_VEC_VSTDC, P9V_BUILTIN_VSTDCDP,\n-    RS6000_BTI_UINTSI, RS6000_BTI_double, RS6000_BTI_UINTSI, 0 },\n+    RS6000_BTI_bool_int, RS6000_BTI_double, RS6000_BTI_INTSI, 0 },\n \n   { P9V_BUILTIN_VEC_VSTDCSP, P9V_BUILTIN_VSTDCSP,\n-    RS6000_BTI_UINTSI, RS6000_BTI_float, RS6000_BTI_UINTSI, 0 },\n+    RS6000_BTI_bool_int, RS6000_BTI_float, RS6000_BTI_INTSI, 0 },\n   { P9V_BUILTIN_VEC_VSTDCDP, P9V_BUILTIN_VSTDCDP,\n-    RS6000_BTI_UINTSI, RS6000_BTI_double, RS6000_BTI_UINTSI, 0 },\n+    RS6000_BTI_bool_int, RS6000_BTI_double, RS6000_BTI_INTSI, 0 },\n \n   { P9V_BUILTIN_VEC_VSTDCN, P9V_BUILTIN_VSTDCNSP,\n-    RS6000_BTI_INTSI, RS6000_BTI_float, 0, 0 },\n+    RS6000_BTI_bool_int, RS6000_BTI_float, 0, 0 },\n   { P9V_BUILTIN_VEC_VSTDCN, P9V_BUILTIN_VSTDCNDP,\n-    RS6000_BTI_INTSI, RS6000_BTI_double, 0, 0 },\n+    RS6000_BTI_bool_int, RS6000_BTI_double, 0, 0 },\n \n   { P9V_BUILTIN_VEC_VSTDCNSP, P9V_BUILTIN_VSTDCNSP,\n-    RS6000_BTI_INTSI, RS6000_BTI_float, 0, 0 },\n+    RS6000_BTI_bool_int, RS6000_BTI_float, 0, 0 },\n   { P9V_BUILTIN_VEC_VSTDCNDP, P9V_BUILTIN_VSTDCNDP,\n-    RS6000_BTI_INTSI, RS6000_BTI_double, 0, 0 },\n+    RS6000_BTI_bool_int, RS6000_BTI_double, 0, 0 },\n \n   { P9V_BUILTIN_VEC_VSEEDP, P9V_BUILTIN_VSEEDP,\n     RS6000_BTI_UINTSI, RS6000_BTI_double, 0, 0 },\n@@ -4427,6 +4437,8 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n \n   { P9V_BUILTIN_VEC_VSIEDP, P9V_BUILTIN_VSIEDP,\n     RS6000_BTI_double, RS6000_BTI_UINTDI, RS6000_BTI_UINTDI, 0 },\n+  { P9V_BUILTIN_VEC_VSIEDP, P9V_BUILTIN_VSIEDPF,\n+    RS6000_BTI_double, RS6000_BTI_double, RS6000_BTI_UINTDI, 0 },\n \n   { P9V_BUILTIN_VEC_VSCEDPGT, P9V_BUILTIN_VSCEDPGT,\n     RS6000_BTI_INTSI, RS6000_BTI_double, RS6000_BTI_double, 0 },"}, {"sha": "28bbeb2a7d97d193db1b037fbe3ae20df73e29cf", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -3426,6 +3426,16 @@\n   \"xsiexpdp %x0,%1,%2\"\n   [(set_attr \"type\" \"fpsimple\")])\n \n+;; VSX Scalar Insert Exponent Double-Precision Floating Point Argument\n+(define_insn \"xsiexpdpf\"\n+  [(set (match_operand:DF 0 \"vsx_register_operand\" \"=wa\")\n+\t(unspec:DF [(match_operand:DF 1 \"register_operand\" \"r\")\n+\t\t    (match_operand:DI 2 \"register_operand\" \"r\")]\n+\t UNSPEC_VSX_SIEXPDP))]\n+  \"TARGET_P9_VECTOR && TARGET_64BIT\"\n+  \"xsiexpdp %x0,%1,%2\"\n+  [(set_attr \"type\" \"fpsimple\")])\n+\n ;; VSX Scalar Compare Exponents Double-Precision\n (define_expand \"xscmpexpdp_<code>\"\n   [(set (match_dup 3)"}, {"sha": "5cb4748e0323620b563cf24a6e61ec577c733a08", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 74, "deletions": 36, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -15133,17 +15133,19 @@ unsigned long long int scalar_extract_sig (double source);\n \n double\n scalar_insert_exp (unsigned long long int significand, unsigned long long int exponent);\n+double\n+scalar_insert_exp (double significand, unsigned long long int exponent);\n \n int scalar_cmp_exp_gt (double arg1, double arg2);\n int scalar_cmp_exp_lt (double arg1, double arg2);\n int scalar_cmp_exp_eq (double arg1, double arg2);\n int scalar_cmp_exp_unordered (double arg1, double arg2);\n \n-int scalar_test_data_class (float source, unsigned int condition);\n-int scalar_test_data_class (double source, unsigned int condition);\n+bool scalar_test_data_class (float source, const int condition);\n+bool scalar_test_data_class (double source, const int condition);\n \n-int scalar_test_neg (float source);\n-int scalar_test_neg (double source);\n+bool scalar_test_neg (float source);\n+bool scalar_test_neg (double source);\n \n int __builtin_byte_in_set (unsigned char u, unsigned long long set);\n int __builtin_byte_in_range (unsigned char u, unsigned int range);\n@@ -15178,19 +15180,30 @@ random number.  The @code{__builtin_darn_raw} function provides a\n 64-bit raw random number.  The @code{__builtin_darn_32} function\n provides a 32-bit random number.\n \n-The @code{scalar_extract_sig} and @code{scalar_insert_exp}\n+The @code{scalar_extract_exp} and @code{scalar_extract_sig}\n functions require a 64-bit environment supporting ISA 3.0 or later.\n-The @code{scalar_extract_exp} and @code{vec_extract_sig} built-in\n-functions return the significand and exponent respectively of their\n-@code{source} arguments.  The\n-@code{scalar_insert_exp} built-in function returns a double-precision\n+The @code{scalar_extract_exp} and @code{scalar_extract_sig} built-in\n+functions return the significand and the biased exponent value\n+respectively of their @code{source} arguments.\n+Within the result returned by @code{scalar_extract_sig},\n+the @code{0x10000000000000} bit is set if the\n+function's @code{source} argument is in normalized form.\n+Otherwise, this bit is set to 0.\n+Note that the sign of the significand is not represented in the result\n+returned from the @code{scalar_extract_sig} function.  Use the\n+@code{scalar_test_neg} function to test the sign of its @code{double}\n+argument.\n+\n+The @code{scalar_insert_exp} \n+function requires a 64-bit environment supporting ISA 3.0 or later.\n+The @code{scalar_insert_exp} built-in function returns a double-precision\n floating point value that is constructed by assembling the values of its\n @code{significand} and @code{exponent} arguments.  The sign of the\n result is copied from the most significant bit of the\n @code{significand} argument.  The significand and exponent components\n of the result are composed of the least significant 11 bits of the\n-@code{significand} argument and the least significant 52 bits of the\n-@code{exponent} argument.\n+@code{exponent} argument and the least significant 52 bits of the\n+@code{significand} argument.\n \n The @code{scalar_cmp_exp_gt}, @code{scalar_cmp_exp_lt},\n @code{scalar_cmp_exp_eq}, and @code{scalar_cmp_exp_unordered} built-in\n@@ -15199,11 +15212,11 @@ than, equal to, or not comparable to @code{arg2} respectively.  The\n arguments are not comparable if one or the other equals NaN (not a\n number). \n \n-The @code{scalar_test_data_class} built-in functions return a non-zero\n-value if any of the condition tests enabled by the value of the\n-@code{condition} variable are true.  The\n-@code{condition} argument must be an unsigned integer with value not\n-exceeding 127.  The\n+The @code{scalar_test_data_class} built-in function returns 1\n+if any of the condition tests enabled by the value of the\n+@code{condition} variable are true, and 0 otherwise.  The\n+@code{condition} argument must be a compile-time constant integer with\n+value not exceeding 127.  The\n @code{condition} argument is encoded as a bitmask with each bit\n enabling the testing of a different condition, as characterized by the\n following:\n@@ -15217,10 +15230,8 @@ following:\n 0x01    Test for -Denormal\n @end smallexample\n \n-If all of the enabled test conditions are false, the return value is 0.\n-\n-The @code{scalar_test_neg} built-in functions return a non-zero value\n-if their @code{source} argument holds a negative value.\n+The @code{scalar_test_neg} built-in function returns 1 if its\n+@code{source} argument holds a negative value, 0 otherwise.\n \n The @code{__builtin_byte_in_set} function requires a\n 64-bit environment supporting ISA 3.0 or later.  This function returns\n@@ -18140,39 +18151,66 @@ elements of the vector result.\n The following built-in functions are available for the PowerPC family\n of processors, starting with ISA 3.0 or later (@option{-mcpu=power9}):\n @smallexample\n-__vector int\n+__vector unsigned int\n vec_extract_exp (__vector float source);\n-__vector long long int\n+__vector unsigned long long int\n vec_extract_exp (__vector double source);\n \n-__vector int\n+__vector unsigned int\n vec_extract_sig (__vector float source);\n-__vector long long int\n+__vector unsigned long long int\n vec_extract_sig (__vector double source);\n \n __vector float\n vec_insert_exp (__vector unsigned int significands,\n                 __vector unsigned int exponents);\n+__vector float\n+vec_insert_exp (__vector unsigned float significands,\n+                __vector unsigned int exponents);\n __vector double\n vec_insert_exp (__vector unsigned long long int significands,\n                 __vector unsigned long long int exponents);\n+__vector double\n+vec_insert_exp (__vector unsigned double significands,\n+                __vector unsigned long long int exponents);\n \n-__vector int vec_test_data_class (__vector float source,\n-                                  unsigned int condition);\n-__vector long long int vec_test_data_class (__vector double source,\n-                                            unsigned int condition);\n+__vector bool int vec_test_data_class (__vector float source,\n+                                       const int condition);\n+__vector bool long long int vec_test_data_class (__vector double source,\n+                                                 const int condition);\n @end smallexample\n \n The @code{vec_extract_sig} and @code{vec_extract_exp} built-in\n-functions return vectors representing the significands and exponents\n-of their @code{source} arguments respectively.  The\n-@code{vec_insert_exp} built-in functions return a vector of single- or\n-double-precision floating\n+functions return vectors representing the significands and biased\n+exponent values of their @code{source} arguments respectively.\n+Within the result vector returned by @code{vec_extract_sig}, the\n+@code{0x800000} bit of each vector element returned when the\n+function's @code{source} argument is of type @code{float} is set to 1\n+if the corresponding floating point value is in normalized form.\n+Otherwise, this bit is set to 0.  When the @code{source} argument is\n+of type @code{double}, the @code{0x10000000000000} bit within each of\n+the result vector's elements is set according to the same rules.\n+Note that the sign of the significand is not represented in the result\n+returned from the @code{vec_extract_sig} function.  To extract the\n+sign bits, use the\n+@code{vec_cpsgn} function, which returns a new vector within which all\n+of the sign bits of its second argument vector are overwritten with the\n+sign bits copied from the coresponding elements of its first argument\n+vector, and all other (non-sign) bits of the second argument vector\n+are copied unchanged into the result vector.\n+\n+The @code{vec_insert_exp} built-in functions return a vector of\n+single- or double-precision floating\n point values constructed by assembling the values of their\n @code{significands} and @code{exponents} arguments into the\n-corresponding elements of the returned vector.  The sign of each\n+corresponding elements of the returned vector.\n+The sign of each\n element of the result is copied from the most significant bit of the\n-corresponding entry within the @code{significands} argument.  The\n+corresponding entry within the @code{significands} argument.\n+Note that the relevant\n+bits of the @code{significands} argument are the same, for both integer\n+and floating point types.\n+The\n significand and exponent components of each element of the result are\n composed of the least significant bits of the corresponding\n @code{significands} element and the least significant bits of the\n@@ -18181,8 +18219,8 @@ corresponding @code{exponents} element.\n The @code{vec_test_data_class} built-in function returns a vector\n representing the results of testing the @code{source} vector for the\n condition selected by the @code{condition} argument.  The\n-@code{condition} argument must be an unsigned integer with value not\n-exceeding 127.  The\n+@code{condition} argument must be a compile-time constant integer with\n+value not exceeding 127.  The\n @code{condition} argument is encoded as a bitmask with each bit\n enabling the testing of a different condition, as characterized by the\n following:"}, {"sha": "004bff932bb100252862e0fc24af6db6f63bef3e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -1,3 +1,51 @@\n+2017-01-23  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/bfp/scalar-insert-exp-3.c: New test.\n+\t* gcc.target/powerpc/bfp/scalar-insert-exp-4.c: New test.\n+\t* gcc.target/powerpc/bfp/scalar-insert-exp-5.c: New test.\n+\t* gcc.target/powerpc/bfp/scalar-test-data-class-0.c: Adjust return\n+\ttype of test function to reflect change in built-in function's\n+\treturn type.\n+\t* gcc.target/powerpc/bfp/scalar-test-data-class-1.c: Likewise.\n+\t* gcc.target/powerpc/bfp/scalar-test-data-class-2.c: Likewise.\n+\t* gcc.target/powerpc/bfp/scalar-test-data-class-3.c: Likewise.\n+\t* gcc.target/powerpc/bfp/scalar-test-data-class-4.c: Adjust return\n+\ttype and second argument type to reflect change in built-in\n+\tfunction's type signature.\n+\t* gcc.target/powerpc/bfp/scalar-test-data-class-5.c: Likewise.\n+\t* gcc.target/powerpc/bfp/scalar-test-data-class-6.c: Adjust return\n+\ttype of test function to reflect change in built-in function's\n+\treturn type.\n+\t* gcc.target/powerpc/bfp/scalar-test-data-class-7.c: Likewise.\n+\t* gcc.target/powerpc/bfp/scalar-test-neg-0.c: Likewise.\n+\t* gcc.target/powerpc/bfp/scalar-test-neg-1.c: Likewise.\n+\t* gcc.target/powerpc/bfp/scalar-test-neg-2.c: Likewise.\n+\t* gcc.target/powerpc/bfp/scalar-test-neg-3.c: Likewise.\n+\t* gcc.target/powerpc/bfp/vec-extract-exp-0.c: Likewise.\n+\t* gcc.target/powerpc/bfp/vec-extract-exp-1.c: Likewise.\n+\t* gcc.target/powerpc/bfp/vec-extract-exp-2.c: Likewise.\n+\t* gcc.target/powerpc/bfp/vec-extract-exp-3.c: Likewise.\n+\t* gcc.target/powerpc/bfp/vec-extract-sig-0.c: Likewise.\n+\t* gcc.target/powerpc/bfp/vec-extract-sig-1.c: Likewise.\n+\t* gcc.target/powerpc/bfp/vec-extract-sig-2.c: Likewise.\n+\t* gcc.target/powerpc/bfp/vec-extract-sig-3.c: Likewise.\n+\t* gcc.target/powerpc/bfp/vec-insert-exp-4.c: New test.\n+\t* gcc.target/powerpc/bfp/vec-insert-exp-5.c: New test.\n+\t* gcc.target/powerpc/bfp/vec-insert-exp-6.c: New test.\n+\t* gcc.target/powerpc/bfp/vec-insert-exp-7.c: New test.\n+\t* gcc.target/powerpc/bfp/vec-test-data-class-0.c: Adjust return\n+\ttype of test function to reflect change in built-in function's\n+\treturn type.\n+\t* gcc.target/powerpc/bfp/vec-test-data-class-1.c: Likewise.\n+\t* gcc.target/powerpc/bfp/vec-test-data-class-2.c: Likewise.\n+\t* gcc.target/powerpc/bfp/vec-test-data-class-3.c: Likewise.\n+\t* gcc.target/powerpc/bfp/vec-test-data-class-4.c: Likewise.\n+\t* gcc.target/powerpc/bfp/vec-test-data-class-5.c: Likewise.\n+\t* gcc.target/powerpc/bfp/vec-test-data-class-6.c: Adjust types of\n+\ttest function's result and second argument to reflect change in\n+\tbuilt-in function's type signature.\n+\t* gcc.target/powerpc/bfp/vec-test-data-class-7.c: Likewise.\n+\n 2017-01-23  Nathan Sidwell  <nathan@acm.org>\n \n \tPR C++/71710"}, {"sha": "4dbd7ca2efae35cb0e776a398f22b974e2b8d869", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-insert-exp-3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-insert-exp-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-insert-exp-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-insert-exp-3.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+/* This test should succeed only on 64-bit configurations.  */\n+#include <altivec.h>\n+\n+double\n+insert_exponent (double *significand_p,\n+\t\t unsigned long long int *exponent_p)\n+{\n+  double significand = *significand_p;\n+  unsigned long long int exponent = *exponent_p;\n+\n+  return scalar_insert_exp (significand, exponent);\n+}\n+\n+/* { dg-final { scan-assembler \"xsiexpdp\" } } */"}, {"sha": "8b72cec88d96ab4b01a8885ac24559fd88453acd", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-insert-exp-4.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-insert-exp-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-insert-exp-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-insert-exp-4.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power8\" } */\n+\n+/* This test should succeed only on 64-bit configurations.  */\n+#include <altivec.h>\n+\n+double\n+insert_exponent (double *significand_p,\n+\t\t unsigned long long int *exponent_p)\n+{\n+  double significand = *significand_p;\n+  unsigned long long int exponent = *exponent_p;\n+\n+  return __builtin_vec_scalar_insert_exp (significand, exponent); /* { dg-error \"Builtin function __builtin_vsx_scalar_insert_exp_dp requires\" } */\n+}"}, {"sha": "e831f20e5898df0fb527c278d61de255dacfb5ec", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-insert-exp-5.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-insert-exp-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-insert-exp-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-insert-exp-5.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+/* This test only runs on 32-bit configurations, where a compiler error\n+   should be issued because this builtin is not available on \n+   32-bit configurations.  */\n+\n+#include <altivec.h>\n+\n+double\n+insert_exponent (double *significand_p,\n+\t\t unsigned long long int *exponent_p)\n+{\n+  double significand = *significand_p;\n+  unsigned long long int exponent = *exponent_p;\n+\n+  return scalar_insert_exp (significand, exponent); /* { dg-error \"Builtin function __builtin_vec_scalar_insert_exp not supported in this compiler configuration\" } */\n+}"}, {"sha": "eba19c3cc0f699adccb68fb2368b36d176289a18", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-test-data-class-0.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-0.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -4,8 +4,9 @@\n /* { dg-options \"-mcpu=power9\" } */\n \n #include <altivec.h>\n+#include <stdbool.h>\n \n-unsigned int\n+bool\n test_data_class (double *p)\n {\n   double source = *p;"}, {"sha": "98c13ff5f9cb30f563d9a5c724c174f99d8ee716", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-test-data-class-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-1.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -4,8 +4,9 @@\n /* { dg-options \"-mcpu=power9\" } */\n \n #include <altivec.h>\n+#include <stdbool.h>\n \n-unsigned int\n+bool\n test_data_class (float *p)\n {\n   float source = *p;"}, {"sha": "05ef48dddfc2b12ff51d06588d1ce8011c5207d3", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-test-data-class-2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-2.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -4,8 +4,9 @@\n /* { dg-options \"-mcpu=power9\" } */\n \n #include <altivec.h>\n+#include <stdbool.h>\n \n-unsigned int\n+bool\n test_data_class (double *p)\n {\n   double source = *p;"}, {"sha": "b13f470ade576fc5e8eb83c173adc62da24f6024", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-test-data-class-3.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-3.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -4,8 +4,9 @@\n /* { dg-options \"-mcpu=power9\" } */\n \n #include <altivec.h>\n+#include <stdbool.h>\n \n-unsigned int\n+bool\n test_data_class (float *p)\n {\n   float source = *p;"}, {"sha": "054fd7d3f6b36362ad13409fbbc5d594afbc9a64", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-test-data-class-4.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-4.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -4,9 +4,10 @@\n /* { dg-options \"-mcpu=power9\" } */\n \n #include <altivec.h>\n+#include <stdbool.h>\n \n-unsigned int\n-test_data_class (double *p, unsigned int condition_flag)\n+bool\n+test_data_class (double *p, const int condition_flag)\n {\n   double source = *p;\n "}, {"sha": "d039c900544c7d9d064fbe4405f1cc98f7e11941", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-test-data-class-5.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-5.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -4,9 +4,10 @@\n /* { dg-options \"-mcpu=power9\" } */\n \n #include <altivec.h>\n+#include <stdbool.h>\n \n-unsigned int\n-test_data_class (float *p, unsigned int condition_flag)\n+bool\n+test_data_class (float *p, const int condition_flag)\n {\n   float source = *p;\n "}, {"sha": "10405a386c01048ef4ea0c6013fa84303ad1d7be", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-test-data-class-6.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-6.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -4,8 +4,9 @@\n /* { dg-options \"-mcpu=power8\" } */\n \n #include <altivec.h>\n+#include <stdbool.h>\n \n-unsigned int\n+bool\n test_data_class (double *p)\n {\n   double source = *p;"}, {"sha": "a7482eff559c140cfbd509ca223d0326b1ebe8d2", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-test-data-class-7.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-7.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -4,8 +4,9 @@\n /* { dg-options \"-mcpu=power8\" } */\n \n #include <altivec.h>\n+#include <stdbool.h>\n \n-unsigned int\n+bool\n test_data_class (float *p)\n {\n   float source = *p;"}, {"sha": "c89cee71ba141f7ae5fef8c85b4bc9741f8d1f16", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-test-neg-0.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-neg-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-neg-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-neg-0.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -4,8 +4,9 @@\n /* { dg-options \"-mcpu=power9\" } */\n \n #include <altivec.h>\n+#include <stdbool.h>\n \n-unsigned int\n+bool\n test_neg (double *p)\n {\n   double source = *p;"}, {"sha": "2d9622be173502757e925e39ea880901745fa3ca", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-test-neg-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-neg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-neg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-neg-1.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -4,8 +4,9 @@\n /* { dg-options \"-mcpu=power9\" } */\n \n #include <altivec.h>\n+#include <stdbool.h>\n \n-unsigned int\n+bool\n test_neg (float *p)\n {\n   float source = *p;"}, {"sha": "3d93376e4bd8996bdb7c9c5459c10f93e50f2c95", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-test-neg-2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-neg-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-neg-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-neg-2.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -4,8 +4,9 @@\n /* { dg-options \"-mcpu=power8\" } */\n \n #include <altivec.h>\n+#include <stdbool.h>\n \n-unsigned int\n+bool\n test_neg (float *p)\n {\n   float source = *p;"}, {"sha": "33971f6574c031e4104530fa6f58e311a620eef5", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-test-neg-3.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-neg-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-neg-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-neg-3.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -4,8 +4,9 @@\n /* { dg-options \"-mcpu=power8\" } */\n \n #include <altivec.h>\n+#include <stdbool.h>\n \n-unsigned int\n+bool\n test_neg (double *p)\n {\n   double source = *p;"}, {"sha": "7bb819c7c96211986d16dc47131aeb1b33df9dd4", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/vec-extract-exp-0.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-extract-exp-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-extract-exp-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-extract-exp-0.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -5,7 +5,7 @@\n \n #include <altivec.h>\n \n-__vector int\n+__vector unsigned int\n get_exponents (__vector float *p)\n {\n   __vector float source = *p;"}, {"sha": "5f8b2eb5d4b77afed049d18ed4ef6de590c196c3", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/vec-extract-exp-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-extract-exp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-extract-exp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-extract-exp-1.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -5,7 +5,7 @@\n \n #include <altivec.h>\n \n-__vector long long int\n+__vector unsigned long long int\n get_exponents (__vector double *p)\n {\n   __vector double source = *p;"}, {"sha": "1462e4797bf6869d525b9759b04835ced5fd4a3d", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/vec-extract-exp-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-extract-exp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-extract-exp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-extract-exp-2.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -5,7 +5,7 @@\n \n #include <altivec.h>\n \n-__vector long long int\n+__vector unsigned long long int\n get_exponents (__vector double *p)\n {\n   __vector double source = *p;"}, {"sha": "15dc0dde7adf1ab7db70258094c4d2ce1be1aaf6", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/vec-extract-exp-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-extract-exp-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-extract-exp-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-extract-exp-3.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -5,7 +5,7 @@\n \n #include <altivec.h>\n \n-__vector int\n+__vector unsigned int\n get_exponents (__vector float *p)\n {\n   __vector float source = *p;"}, {"sha": "9def7c1d67e869bc76e36172dac4f79489fffece", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/vec-extract-sig-0.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-extract-sig-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-extract-sig-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-extract-sig-0.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -5,7 +5,7 @@\n \n #include <altivec.h>\n \n-__vector int\n+__vector unsigned int\n get_significands (__vector float *p)\n {\n   __vector float source = *p;"}, {"sha": "74e5355385c50c32321d0dd85bd37d7f63b2d11a", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/vec-extract-sig-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-extract-sig-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-extract-sig-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-extract-sig-1.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -5,7 +5,7 @@\n \n #include <altivec.h>\n \n-__vector long long int\n+__vector unsigned long long int\n get_significands (__vector double *p)\n {\n   __vector double source = *p;"}, {"sha": "c4088cfc67e2ecacc21468ec11348e1b0ff62951", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/vec-extract-sig-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-extract-sig-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-extract-sig-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-extract-sig-2.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -5,7 +5,7 @@\n \n #include <altivec.h>\n \n-__vector long long int\n+__vector unsigned long long int\n get_significands (__vector double *p)\n {\n   __vector double source = *p;"}, {"sha": "0adbbc25ee2fbe5f8759c46c23509b27fe6bc7f2", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/vec-extract-sig-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-extract-sig-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-extract-sig-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-extract-sig-3.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -5,7 +5,7 @@\n \n #include <altivec.h>\n \n-__vector int\n+__vector unsigned int\n get_significands (__vector float *p)\n {\n   __vector float source = *p;"}, {"sha": "4f075708138038295e85ae656ac8a4fca70591f8", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/vec-insert-exp-4.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-insert-exp-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-insert-exp-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-insert-exp-4.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+__vector float\n+make_floats (__vector float *significands_p, \n+\t     __vector unsigned int *exponents_p)\n+{\n+  __vector float significands = *significands_p;\n+  __vector unsigned int exponents = *exponents_p;\n+\n+  return vec_insert_exp (significands, exponents);\n+}\n+\n+/* { dg-final { scan-assembler \"xviexpsp\" } } */"}, {"sha": "4a396d68078db791eacd518921b6e7cbbfa70b83", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/vec-insert-exp-5.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-insert-exp-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-insert-exp-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-insert-exp-5.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+__vector double\n+make_doubles (__vector double *significands_p,\n+\t      __vector unsigned long long int *exponents_p)\n+{\n+  __vector double significands = *significands_p;\n+  __vector unsigned long long int exponents = *exponents_p;\n+\n+  return vec_insert_exp (significands, exponents);\n+}\n+\n+/* { dg-final { scan-assembler \"xviexpdp\" } } */"}, {"sha": "5a76af7ed674f6ac1a0d347796d2b6c6e8dbc414", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/vec-insert-exp-6.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-insert-exp-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-insert-exp-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-insert-exp-6.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power8\" } */\n+\n+#include <altivec.h>\n+\n+__vector float\n+make_floats (__vector float *significands_p, \n+\t     __vector unsigned int *exponents_p)\n+{\n+  __vector float significands = *significands_p;\n+  __vector unsigned int exponents = *exponents_p;\n+\n+  return __builtin_vec_insert_exp (significands, exponents); /* { dg-error \"Builtin function __builtin_vsx_insert_exp_sp requires\" } */\n+}"}, {"sha": "8655818fc407ffa35029744f1eb7102cac73e3dd", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/vec-insert-exp-7.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-insert-exp-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-insert-exp-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-insert-exp-7.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power8\" } */\n+\n+#include <altivec.h>\n+\n+__vector double\n+make_doubles (__vector double *significands_p,\n+\t      __vector unsigned long long int *exponents_p)\n+{\n+  __vector double significands = *significands_p;\n+  __vector unsigned long long int exponents = *exponents_p;\n+\n+  return __builtin_vec_insert_exp (significands, exponents); /* { dg-error \"Builtin function __builtin_vsx_insert_exp_dp requires\" } */\n+}"}, {"sha": "cea500b8960d06e9fc65b3c354f120b8ee634ccd", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/vec-test-data-class-0.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-0.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -5,7 +5,7 @@\n \n #include <altivec.h>\n \n-__vector int\n+__vector bool int\n get_data_class_flags (__vector float *p)\n {\n   __vector float source = *p;"}, {"sha": "c965c0f721fefbc929841d5c7ee831c458c99233", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/vec-test-data-class-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-1.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -5,7 +5,7 @@\n \n #include <altivec.h>\n \n-__vector long long int\n+__vector bool long long int\n get_data_class_flags (__vector double *p)\n {\n   __vector double source = *p;"}, {"sha": "c7e236fdb82d2826d1454ef468a51cae9244efe4", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/vec-test-data-class-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-2.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -5,7 +5,7 @@\n \n #include <altivec.h>\n \n-__vector long long int\n+__vector bool long long int\n get_data_class_flags (__vector double *p)\n {\n   __vector double source = *p;"}, {"sha": "9a6c069ac11adf8f642aba4d1f87c1d69760302b", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/vec-test-data-class-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-3.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -5,7 +5,7 @@\n \n #include <altivec.h>\n \n-__vector int\n+__vector bool int\n get_data_class_flags (__vector float *p)\n {\n   __vector float source = *p;"}, {"sha": "7392a4da85e24ba04dff1e8e6cac783864892ea1", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/vec-test-data-class-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-4.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -5,7 +5,7 @@\n \n #include <altivec.h>\n \n-__vector int\n+__vector bool int\n get_data_class_flags (__vector float *p)\n {\n   __vector float source = *p;"}, {"sha": "bd94d3f9379b60b88faec08684b85d3a53ec1f6c", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/vec-test-data-class-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-5.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -5,7 +5,7 @@\n \n #include <altivec.h>\n \n-__vector long long int\n+__vector bool long long int\n get_data_class_flags (__vector double *p)\n {\n   __vector double source = *p;"}, {"sha": "cc77e04a496998e645847d2611d61bf06acea3f2", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/vec-test-data-class-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-6.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -5,8 +5,8 @@\n \n #include <altivec.h>\n \n-__vector int\n-get_data_class_flags (__vector float *p, unsigned int condition_flag)\n+__vector bool int\n+get_data_class_flags (__vector float *p, int condition_flag)\n {\n   __vector float source = *p;\n "}, {"sha": "61aa7cc3a8fe33bce0d92c7ac0c452ae1272081d", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/vec-test-data-class-7.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28826a66fb457b6655d66a40638a759617aa8673/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fvec-test-data-class-7.c?ref=28826a66fb457b6655d66a40638a759617aa8673", "patch": "@@ -5,8 +5,8 @@\n \n #include <altivec.h>\n \n-__vector long long int\n-get_data_class_flags (__vector double *p, unsigned int condition_flag)\n+__vector bool long long int\n+get_data_class_flags (__vector double *p, int condition_flag)\n {\n   __vector double source = *p;\n "}]}