{"sha": "65d76c55931c076d674def3e6bd035f875e2c55c", "node_id": "C_kwDOANBUbNoAKDY1ZDc2YzU1OTMxYzA3NmQ2NzRkZWYzZTZiZDAzNWY4NzVlMmM1NWM", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2022-08-23T16:51:01Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-09-12T08:16:50Z"}, "message": "[Ada] Fix bugs in check-related warnings.\n\nMake sure warnings about wrong-length aggregates don't get\nsuppressed. Such a warning (in a with-ed unit) can be the only\nexplanation for an error about No_Elaboration_Code violations.\n\nAvoid passing a bogus \"#\" to Error_Msg. We really should never\nconstruct message templates by concatenating strings that can\ncome from input data, but there are too many cases of that to\nclean up. The message template parameters should really be\nof a type other than String, to avoid these kinds of bugs,\nbut again, that's too much work to clean up now.\n\ngcc/ada/\n\n\t* checks.adb\n\t(Selected_Length_Checks): In the message for an aggregate that has\n\ttoo few or too many elements, add \"!!\" to make sure the warning\n\tgets printed in with'ed units. Note that we have to put \"!!\"\n\tbefore the \"??\", because Compile_Time_Constraint_Error detects\n\twarnings by comparing the last character of the message with '?'\n\t(which is bit dubious, but we're not changing that here).\n\t(Length_Mismatch_Info_Message): Use Unat for some things that\n\tcan't be negative. Specify Decimal instead of Auto in calls to\n\tUI_Image.\n\t* sem_util.adb\n\t(Compile_Time_Constraint_Error): Minor.\n\t* uintp.adb\n\t(Image_Uint): It's always better to initialize objects on their\n\tdeclaration.", "tree": {"sha": "5aebbe99d816bd4ebee54ff68c778910609ebac2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5aebbe99d816bd4ebee54ff68c778910609ebac2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65d76c55931c076d674def3e6bd035f875e2c55c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65d76c55931c076d674def3e6bd035f875e2c55c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65d76c55931c076d674def3e6bd035f875e2c55c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65d76c55931c076d674def3e6bd035f875e2c55c/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "635e98b86497d8c017ea437725b6620572c9de5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/635e98b86497d8c017ea437725b6620572c9de5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/635e98b86497d8c017ea437725b6620572c9de5c"}], "stats": {"total": 33, "additions": 18, "deletions": 15}, "files": [{"sha": "8fa16b802dee2cb964dc77741d4940f8da334b7f", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d76c55931c076d674def3e6bd035f875e2c55c/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d76c55931c076d674def3e6bd035f875e2c55c/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=65d76c55931c076d674def3e6bd035f875e2c55c", "patch": "@@ -9951,8 +9951,8 @@ package body Checks is\n       --    Typ'Length /= Exp'Length\n \n       function Length_Mismatch_Info_Message\n-        (Left_Element_Count  : Uint;\n-         Right_Element_Count : Uint) return String;\n+        (Left_Element_Count  : Unat;\n+         Right_Element_Count : Unat) return String;\n       --  Returns a message indicating how many elements were expected\n       --  (Left_Element_Count) and how many were found (Right_Element_Count).\n \n@@ -10150,14 +10150,14 @@ package body Checks is\n       ----------------------------------\n \n       function Length_Mismatch_Info_Message\n-        (Left_Element_Count  : Uint;\n-         Right_Element_Count : Uint) return String\n+        (Left_Element_Count  : Unat;\n+         Right_Element_Count : Unat) return String\n       is\n \n-         function Plural_Vs_Singular_Ending (Count : Uint) return String;\n+         function Plural_Vs_Singular_Ending (Count : Unat) return String;\n          --  Returns an empty string if Count is 1; otherwise returns \"s\"\n \n-         function Plural_Vs_Singular_Ending (Count : Uint) return String is\n+         function Plural_Vs_Singular_Ending (Count : Unat) return String is\n          begin\n             if Count = 1 then\n                return \"\";\n@@ -10167,12 +10167,19 @@ package body Checks is\n          end Plural_Vs_Singular_Ending;\n \n       begin\n-         return \"expected \" & UI_Image (Left_Element_Count)\n+         return \"expected \"\n+                  & UI_Image (Left_Element_Count, Format => Decimal)\n                   & \" element\"\n                   & Plural_Vs_Singular_Ending (Left_Element_Count)\n-                  & \"; found \" & UI_Image (Right_Element_Count)\n+                  & \"; found \"\n+                  & UI_Image (Right_Element_Count, Format => Decimal)\n                   & \" element\"\n                   & Plural_Vs_Singular_Ending (Right_Element_Count);\n+         --  \"Format => Decimal\" above is needed because otherwise UI_Image\n+         --  can sometimes return a hexadecimal number 16#...#, but \"#\" means\n+         --  something special to Errout. A previous version used the default\n+         --  Auto, which was essentially the same bug as documented here:\n+         --  https://xkcd.com/327/ .\n       end Length_Mismatch_Info_Message;\n \n       -----------------\n@@ -10371,14 +10378,14 @@ package body Checks is\n                            if L_Length > R_Length then\n                               Add_Check\n                                 (Compile_Time_Constraint_Error\n-                                  (Wnode, \"too few elements for}??\", T_Typ,\n+                                  (Wnode, \"too few elements for}!!??\", T_Typ,\n                                    Extra_Msg => Length_Mismatch_Info_Message\n                                                   (L_Length, R_Length)));\n \n                            elsif L_Length < R_Length then\n                               Add_Check\n                                 (Compile_Time_Constraint_Error\n-                                  (Wnode, \"too many elements for}??\", T_Typ,\n+                                  (Wnode, \"too many elements for}!!??\", T_Typ,\n                                    Extra_Msg => Length_Mismatch_Info_Message\n                                                   (L_Length, R_Length)));\n                            end if;"}, {"sha": "5d83956398b5605a6875a1436a1c78cc22320099", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d76c55931c076d674def3e6bd035f875e2c55c/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d76c55931c076d674def3e6bd035f875e2c55c/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=65d76c55931c076d674def3e6bd035f875e2c55c", "patch": "@@ -6691,8 +6691,6 @@ package body Sem_Util is\n       Wmsg : Boolean;\n       Eloc : Source_Ptr;\n \n-   --  Start of processing for Compile_Time_Constraint_Error\n-\n    begin\n       --  If this is a warning, convert it into an error if we are in code\n       --  subject to SPARK_Mode being set On, unless Warn is True to force a"}, {"sha": "248298acded855514463d2ccc1d0f6d6c53fed71", "filename": "gcc/ada/uintp.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d76c55931c076d674def3e6bd035f875e2c55c/gcc%2Fada%2Fuintp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d76c55931c076d674def3e6bd035f875e2c55c/gcc%2Fada%2Fuintp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.adb?ref=65d76c55931c076d674def3e6bd035f875e2c55c", "patch": "@@ -300,11 +300,9 @@ package body Uintp is\n \n       function Better_In_Hex return Boolean is\n          T16 : constant Valid_Uint := Uint_2**Int'(16);\n-         A   : Valid_Uint;\n+         A   : Valid_Uint := UI_Abs (Input);\n \n       begin\n-         A := UI_Abs (Input);\n-\n          --  Small values up to 2**16 can always be in decimal\n \n          if A < T16 then"}]}