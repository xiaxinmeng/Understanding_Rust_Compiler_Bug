{"sha": "3b0d91ff929f16828833bb2fe336a2ba458ebf65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2IwZDkxZmY5MjlmMTY4Mjg4MzNiYjJmZTMzNmEyYmE0NThlYmY2NQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-01-17T14:51:05Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-01-17T14:51:05Z"}, "message": "* All files: PROTO -> PARAMS.\n\nFrom-SVN: r31456", "tree": {"sha": "a795bc24901a55520035de502c1befbaa5c5f73c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a795bc24901a55520035de502c1befbaa5c5f73c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b0d91ff929f16828833bb2fe336a2ba458ebf65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b0d91ff929f16828833bb2fe336a2ba458ebf65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b0d91ff929f16828833bb2fe336a2ba458ebf65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b0d91ff929f16828833bb2fe336a2ba458ebf65/comments", "author": null, "committer": null, "parents": [{"sha": "9771524624e99015d39ea3d180f2cdfb29bed831", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9771524624e99015d39ea3d180f2cdfb29bed831", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9771524624e99015d39ea3d180f2cdfb29bed831"}], "stats": {"total": 1566, "additions": 785, "deletions": 781}, "files": [{"sha": "b1b9bad40c1e16ec7c59fc906033bc95b87fdeb2", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=3b0d91ff929f16828833bb2fe336a2ba458ebf65", "patch": "@@ -1,3 +1,7 @@\n+2000-01-17  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* All files: PROTO -> PARAMS.\n+\n 2000-01-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* lex.c: Include tm_p.h."}, {"sha": "b07a532735be3259d611f157881d7abb01cac001", "filename": "gcc/ch/actions.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Factions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Factions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Factions.c?ref=3b0d91ff929f16828833bb2fe336a2ba458ebf65", "patch": "@@ -32,21 +32,21 @@ Boston, MA 02111-1307, USA.  */\n #include \"assert.h\"\n #include \"toplev.h\"\n \n-static int id_cmp PROTO ((tree *, tree *));\n-static void warn_unhandled PROTO ((const char *));\n-static tree adjust_return_value PROTO ((tree, const char *));\n-static tree update_else_range_for_int_const PROTO ((tree, tree));\n-static tree update_else_range_for_range PROTO ((tree, tree, tree));\n-static tree update_else_range_for_range_expr PROTO ((tree, tree));\n-static tree update_else_range_for_type PROTO ((tree, tree));\n-static tree compute_else_range PROTO ((tree, tree, int));\n-static tree check_case_value PROTO ((tree, tree));\n-static void chill_handle_case_label_range PROTO ((tree, tree, tree));\n-static tree chill_handle_multi_case_label_range PROTO ((tree, tree, tree));\n-static tree chill_handle_multi_case_else_label PROTO ((tree));\n-static tree chill_handle_multi_case_label PROTO ((tree, tree));\n-static tree chill_handle_multi_case_label_list PROTO ((tree, tree));\n-static void print_missing_cases PROTO ((tree, const unsigned char *, long));\n+static int id_cmp PARAMS ((tree *, tree *));\n+static void warn_unhandled PARAMS ((const char *));\n+static tree adjust_return_value PARAMS ((tree, const char *));\n+static tree update_else_range_for_int_const PARAMS ((tree, tree));\n+static tree update_else_range_for_range PARAMS ((tree, tree, tree));\n+static tree update_else_range_for_range_expr PARAMS ((tree, tree));\n+static tree update_else_range_for_type PARAMS ((tree, tree));\n+static tree compute_else_range PARAMS ((tree, tree, int));\n+static tree check_case_value PARAMS ((tree, tree));\n+static void chill_handle_case_label_range PARAMS ((tree, tree, tree));\n+static tree chill_handle_multi_case_label_range PARAMS ((tree, tree, tree));\n+static tree chill_handle_multi_case_else_label PARAMS ((tree));\n+static tree chill_handle_multi_case_label PARAMS ((tree, tree));\n+static tree chill_handle_multi_case_label_list PARAMS ((tree, tree));\n+static void print_missing_cases PARAMS ((tree, const unsigned char *, long));\n \n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n@@ -172,7 +172,7 @@ build_exception_variant (type, raises)\n       /* NULL terminator for list.  */\n       a[i] = NULL_TREE;\n       qsort (a, i, sizeof (tree),\n-\t     (int (*) PROTO((const void*, const void*))) id_cmp);\n+\t     (int (*) PARAMS ((const void*, const void*))) id_cmp);\n       while (i--)\n \tTREE_CHAIN (a[i]) = a[i+1];\n       raises = a[0];"}, {"sha": "f47039856c00d63bf3137a7cc08ca9e8fc8bb980", "filename": "gcc/ch/actions.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Factions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Factions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Factions.h?ref=3b0d91ff929f16828833bb2fe336a2ba458ebf65", "patch": "@@ -20,15 +20,15 @@ Boston, MA 02111-1307, USA.  */\n \n /* used by compile_file */\n \n-void init_chill PROTO((void));\n+void init_chill PARAMS ((void));\n \n extern int grant_count;\n \n-extern void push_handler PROTO((void));\n-extern void pop_handler PROTO((int));\n-extern void push_action PROTO((void));\n+extern void push_handler PARAMS ((void));\n+extern void pop_handler PARAMS ((int));\n+extern void push_action PARAMS ((void));\n \n-extern int  chill_handle_single_dimension_case_label PROTO((tree, tree, int *, int *));\n-extern tree build_chill_multi_dimension_case_expr    PROTO((tree, tree, tree));\n-extern tree build_multi_case_selector_expression     PROTO((tree, tree));\n-extern void compute_else_ranges                      PROTO((tree, tree));\n+extern int  chill_handle_single_dimension_case_label PARAMS ((tree, tree, int *, int *));\n+extern tree build_chill_multi_dimension_case_expr    PARAMS ((tree, tree, tree));\n+extern tree build_multi_case_selector_expression     PARAMS ((tree, tree));\n+extern void compute_else_ranges                      PARAMS ((tree, tree));"}, {"sha": "b5a56aeb8b9cce9dad7c736a0be8a704bfe66f8d", "filename": "gcc/ch/ch-tree.h", "status": "modified", "additions": 425, "deletions": 425, "changes": 850, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Fch-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Fch-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fch-tree.h?ref=3b0d91ff929f16828833bb2fe336a2ba458ebf65", "patch": "@@ -100,7 +100,7 @@ extern tree ALL_POSTFIX;\n    In this case, the USE_SEIZE_FILE directive will not be copied\n    into the grant file */\n #define CH_USE_SEIZEFILE_RESTRICTED(NODE) TREE_LANG_FLAG_4(NODE)\n-extern tree decl_old_name PROTO ((tree));\n+extern tree decl_old_name PARAMS ((tree));\n \n /* for selective granting, mark as already granted */\n #define CH_ALREADY_GRANTED(NODE) TREE_LANG_FLAG_4(NODE)\n@@ -620,17 +620,17 @@ extern tree case_else_node;\n #endif\n \n /* in c-aux-info.c */\n-extern void gen_aux_info_record                 PROTO((tree, int, int, int));\n+extern void gen_aux_info_record                 PARAMS ((tree, int, int, int));\n \n /* in c-common.c */\n-extern tree combine_strings                     PROTO((tree));\n-extern void constant_expression_warning         PROTO((tree));\n-extern void decl_attributes                     PROTO((tree, tree));\n-extern void declare_function_name               PROTO((void));\n+extern tree combine_strings                     PARAMS ((tree));\n+extern void constant_expression_warning         PARAMS ((tree));\n+extern void decl_attributes                     PARAMS ((tree, tree));\n+extern void declare_function_name               PARAMS ((void));\n #ifdef BUFSIZ\n-extern char *get_directive_line                 PROTO((FILE *));\n+extern char *get_directive_line                 PARAMS ((FILE *));\n #endif\n-extern tree shorten_compare                     PROTO((tree *, tree *, tree *, enum tree_code *));\n+extern tree shorten_compare                     PARAMS ((tree *, tree *, tree *, enum tree_code *));\n \n /* in c-decl.c */\n extern tree wchar_type_node, signed_wchar_type_node, unsigned_wchar_type_node;\n@@ -646,495 +646,495 @@ extern tree boolean_true_node, boolean_false_node;\n extern tree global_function_decl;\n \n /* in except.c */\n-extern void except_init_pass_2                  PROTO((void));\n-extern void push_handler\t\t\tPROTO((void));\n-extern void pop_handler\t\t\t\tPROTO((int));\n+extern void except_init_pass_2                  PARAMS ((void));\n+extern void push_handler\t\t\tPARAMS ((void));\n+extern void pop_handler\t\t\t\tPARAMS ((int));\n \n /* in ch-loop.c */\n extern int flag_local_loop_counter;\n-extern void push_loop_block                     PROTO((void));\n-extern void pop_loop_block                      PROTO((void));\n-extern void build_loop_start                    PROTO((tree));\n-extern void top_loop_end_check\t\t\tPROTO((tree));\n-extern void build_loop_end                      PROTO((void));\n-extern void build_loop_iterator                 PROTO((tree, tree, tree, tree, int, int, int));\n-extern void begin_loop_scope                    PROTO((void));\n-extern void end_loop_scope                      PROTO((tree));\n-extern void nonvalue_begin_loop_scope           PROTO((void));\n-extern void nonvalue_end_loop_scope             PROTO((void));\n-\n-extern tree build_enumerator                    PROTO((tree, tree));\n-extern tree c_build_type_variant                PROTO((tree, int, int));\n-extern int  c_decode_option                     PROTO((int, char **));\n-extern void c_mark_varargs                      PROTO((void));\n-extern void clear_parm_order                    PROTO((void));\n-extern tree combine_parm_decls                  PROTO((tree, tree, int));\n-extern int  complete_array_type                 PROTO((tree, tree, int));\n-extern void declare_parm_level                  PROTO((int));\n-extern tree define_label                        PROTO((char *, int, tree));\n-extern void delete_block                        PROTO((tree));\n-extern void finish_decl                         PROTO((tree));\n-extern tree finish_enum                         PROTO((tree, tree));\n-extern void finish_function                     PROTO((int));\n-extern tree finish_struct                       PROTO((tree, tree));\n-extern tree get_parm_decls                      PROTO((void));\n-extern tree get_parm_info                       PROTO((int));\n-extern tree getdecls                            PROTO((void));\n-extern tree gettags                             PROTO((void));\n-extern int  global_bindings_p                   PROTO((void));\n-extern tree grokfield                           PROTO((char *, int, tree, tree, tree));\n-extern tree groktypename                        PROTO((tree));\n-extern tree groktypename_in_parm_context        PROTO((tree));\n-extern tree implicitly_declare                  PROTO((tree));\n-extern void init_decl_processing                PROTO((void));\n-extern void insert_block                        PROTO((tree));\n-extern void keep_next_level                     PROTO((void));\n-extern int  kept_level_p                        PROTO((void));\n-extern tree lookup_label                        PROTO((tree));\n-extern tree lookup_name                         PROTO((tree));\n-extern tree maybe_build_cleanup                 PROTO((tree));\n-extern void parmlist_tags_warning               PROTO((void));\n-extern void pending_xref_error                  PROTO((void));\n-extern void pop_chill_function_context          PROTO((void));\n-extern tree poplevel                            PROTO((int, int, int));\n+extern void push_loop_block                     PARAMS ((void));\n+extern void pop_loop_block                      PARAMS ((void));\n+extern void build_loop_start                    PARAMS ((tree));\n+extern void top_loop_end_check\t\t\tPARAMS ((tree));\n+extern void build_loop_end                      PARAMS ((void));\n+extern void build_loop_iterator                 PARAMS ((tree, tree, tree, tree, int, int, int));\n+extern void begin_loop_scope                    PARAMS ((void));\n+extern void end_loop_scope                      PARAMS ((tree));\n+extern void nonvalue_begin_loop_scope           PARAMS ((void));\n+extern void nonvalue_end_loop_scope             PARAMS ((void));\n+\n+extern tree build_enumerator                    PARAMS ((tree, tree));\n+extern tree c_build_type_variant                PARAMS ((tree, int, int));\n+extern int  c_decode_option                     PARAMS ((int, char **));\n+extern void c_mark_varargs                      PARAMS ((void));\n+extern void clear_parm_order                    PARAMS ((void));\n+extern tree combine_parm_decls                  PARAMS ((tree, tree, int));\n+extern int  complete_array_type                 PARAMS ((tree, tree, int));\n+extern void declare_parm_level                  PARAMS ((int));\n+extern tree define_label                        PARAMS ((char *, int, tree));\n+extern void delete_block                        PARAMS ((tree));\n+extern void finish_decl                         PARAMS ((tree));\n+extern tree finish_enum                         PARAMS ((tree, tree));\n+extern void finish_function                     PARAMS ((int));\n+extern tree finish_struct                       PARAMS ((tree, tree));\n+extern tree get_parm_decls                      PARAMS ((void));\n+extern tree get_parm_info                       PARAMS ((int));\n+extern tree getdecls                            PARAMS ((void));\n+extern tree gettags                             PARAMS ((void));\n+extern int  global_bindings_p                   PARAMS ((void));\n+extern tree grokfield                           PARAMS ((char *, int, tree, tree, tree));\n+extern tree groktypename                        PARAMS ((tree));\n+extern tree groktypename_in_parm_context        PARAMS ((tree));\n+extern tree implicitly_declare                  PARAMS ((tree));\n+extern void init_decl_processing                PARAMS ((void));\n+extern void insert_block                        PARAMS ((tree));\n+extern void keep_next_level                     PARAMS ((void));\n+extern int  kept_level_p                        PARAMS ((void));\n+extern tree lookup_label                        PARAMS ((tree));\n+extern tree lookup_name                         PARAMS ((tree));\n+extern tree maybe_build_cleanup                 PARAMS ((tree));\n+extern void parmlist_tags_warning               PARAMS ((void));\n+extern void pending_xref_error                  PARAMS ((void));\n+extern void pop_chill_function_context          PARAMS ((void));\n+extern tree poplevel                            PARAMS ((int, int, int));\n #ifdef BUFSIZ\n-extern void print_lang_decl                     PROTO((FILE *,tree, int));\n-extern void print_lang_identifier               PROTO((FILE *,tree, int));\n-extern void print_lang_type                     PROTO((FILE *,tree, int));\n+extern void print_lang_decl                     PARAMS ((FILE *,tree, int));\n+extern void print_lang_identifier               PARAMS ((FILE *,tree, int));\n+extern void print_lang_type                     PARAMS ((FILE *,tree, int));\n #endif\n-extern void push_chill_function_context         PROTO((void));\n-extern void push_parm_decl                      PROTO((tree));\n-extern tree pushdecl                            PROTO((tree));\n-extern tree pushdecl_top_level                  PROTO((tree));\n-extern void pushlevel                           PROTO((int));\n-extern void set_block                           PROTO((tree));\n-extern tree shadow_label                        PROTO((tree));\n-extern void shadow_record_fields                PROTO((tree));\n-extern void shadow_tag                          PROTO((tree));\n-extern void shadow_tag_warned                   PROTO((tree, int));\n-extern tree start_enum                          PROTO((tree));\n-extern int  start_function                      PROTO((tree, tree, int));\n-extern tree start_decl                          PROTO((tree, tree, int));\n-extern tree start_struct                        PROTO((enum tree_code, tree));\n-extern void store_parm_decls                    PROTO((void));\n-extern tree xref_tag                            PROTO((enum tree_code, tree));\n+extern void push_chill_function_context         PARAMS ((void));\n+extern void push_parm_decl                      PARAMS ((tree));\n+extern tree pushdecl                            PARAMS ((tree));\n+extern tree pushdecl_top_level                  PARAMS ((tree));\n+extern void pushlevel                           PARAMS ((int));\n+extern void set_block                           PARAMS ((tree));\n+extern tree shadow_label                        PARAMS ((tree));\n+extern void shadow_record_fields                PARAMS ((tree));\n+extern void shadow_tag                          PARAMS ((tree));\n+extern void shadow_tag_warned                   PARAMS ((tree, int));\n+extern tree start_enum                          PARAMS ((tree));\n+extern int  start_function                      PARAMS ((tree, tree, int));\n+extern tree start_decl                          PARAMS ((tree, tree, int));\n+extern tree start_struct                        PARAMS ((enum tree_code, tree));\n+extern void store_parm_decls                    PARAMS ((void));\n+extern tree xref_tag                            PARAMS ((enum tree_code, tree));\n \n /* in c-typeck.c */\n-extern tree build_array_ref                     PROTO((tree, tree));\n-extern tree build_c_cast                        PROTO((tree, tree));\n-extern tree build_chill_modify_expr             PROTO((tree, tree));\n-extern tree build_chill_component_ref           PROTO((tree, tree));\n-extern tree build_component_ref                 PROTO((tree, tree));\n-extern tree build_compound_expr                 PROTO((tree));\n-extern tree build_conditional_expr              PROTO((tree, tree, tree));\n-extern tree build_function_call                 PROTO((tree, tree));\n-extern tree build_indirect_ref                  PROTO((tree, char *));\n-extern tree build_modify_expr                   PROTO((tree, enum tree_code, tree));\n-extern tree build_unary_op                      PROTO((enum tree_code, tree, int));\n-extern tree c_alignof                           PROTO((tree));\n-extern tree c_alignof_expr                      PROTO((tree));\n-extern void c_expand_asm_operands               PROTO((tree, tree, tree, tree, int, char *, int));\n-extern tree c_sizeof                            PROTO((tree));\n-extern void c_expand_return                     PROTO((tree));\n-extern tree c_expand_start_case                 PROTO((tree));\n-extern tree common_type                         PROTO((tree, tree));\n-extern tree copy_novelty                        PROTO((tree, tree));\n-extern tree default_conversion                  PROTO((tree));\n-extern void finish_init                         PROTO((void));\n-extern tree parser_build_binary_op              PROTO((enum tree_code, tree, tree));\n-extern tree pop_init_level                      PROTO((int));\n-extern void process_init_default                PROTO((tree));\n-extern void process_init_element                PROTO((tree));\n-extern void push_init_level                     PROTO((int));\n-extern void really_start_incremental_init       PROTO((tree));\n-extern void set_init_index                      PROTO((tree, tree));\n-extern void set_init_label                      PROTO((tree));\n-extern void start_init                          PROTO((tree, tree, int));\n-extern void store_init_value                    PROTO((tree, tree));\n-extern tree valid_array_index_p                 PROTO((tree, tree, const char *, int));\n+extern tree build_array_ref                     PARAMS ((tree, tree));\n+extern tree build_c_cast                        PARAMS ((tree, tree));\n+extern tree build_chill_modify_expr             PARAMS ((tree, tree));\n+extern tree build_chill_component_ref           PARAMS ((tree, tree));\n+extern tree build_component_ref                 PARAMS ((tree, tree));\n+extern tree build_compound_expr                 PARAMS ((tree));\n+extern tree build_conditional_expr              PARAMS ((tree, tree, tree));\n+extern tree build_function_call                 PARAMS ((tree, tree));\n+extern tree build_indirect_ref                  PARAMS ((tree, char *));\n+extern tree build_modify_expr                   PARAMS ((tree, enum tree_code, tree));\n+extern tree build_unary_op                      PARAMS ((enum tree_code, tree, int));\n+extern tree c_alignof                           PARAMS ((tree));\n+extern tree c_alignof_expr                      PARAMS ((tree));\n+extern void c_expand_asm_operands               PARAMS ((tree, tree, tree, tree, int, char *, int));\n+extern tree c_sizeof                            PARAMS ((tree));\n+extern void c_expand_return                     PARAMS ((tree));\n+extern tree c_expand_start_case                 PARAMS ((tree));\n+extern tree common_type                         PARAMS ((tree, tree));\n+extern tree copy_novelty                        PARAMS ((tree, tree));\n+extern tree default_conversion                  PARAMS ((tree));\n+extern void finish_init                         PARAMS ((void));\n+extern tree parser_build_binary_op              PARAMS ((enum tree_code, tree, tree));\n+extern tree pop_init_level                      PARAMS ((int));\n+extern void process_init_default                PARAMS ((tree));\n+extern void process_init_element                PARAMS ((tree));\n+extern void push_init_level                     PARAMS ((int));\n+extern void really_start_incremental_init       PARAMS ((tree));\n+extern void set_init_index                      PARAMS ((tree, tree));\n+extern void set_init_label                      PARAMS ((tree));\n+extern void start_init                          PARAMS ((tree, tree, int));\n+extern void store_init_value                    PARAMS ((tree, tree));\n+extern tree valid_array_index_p                 PARAMS ((tree, tree, const char *, int));\n \n /* in ch/actions.c */\n extern int grant_only_flag;\n-extern void allocate_lang_decl                  PROTO((tree));\n-extern tree build_chill_abs                     PROTO((tree));\n-extern tree build_chill_array_ref_1             PROTO((tree, tree));\n-extern tree build_chill_array_ref               PROTO((tree, tree));\n-extern tree build_chill_bin_type                PROTO((tree));\n-extern tree build_chill_binary_op               PROTO((enum chill_tree_code, tree, tree));\n-extern tree build_chill_card                    PROTO((tree));\n-extern tree build_chill_case_expr               PROTO((tree, tree, tree)); \n-extern tree build_cause_exception               PROTO((tree, int));\n-extern tree build_chill_exception_decl          PROTO((const char *));\n-extern tree build_chill_function_call           PROTO((tree, tree));\n-extern tree build_chill_length                  PROTO((tree));\n-extern tree build_chill_indirect_ref            PROTO((tree, tree, int));\n-extern tree build_chill_lower                   PROTO((tree));\n-extern tree build_chill_max                     PROTO((tree));\n-extern tree build_chill_min                     PROTO((tree));\n-extern tree build_chill_num                     PROTO((tree));\n-extern tree build_chill_repetition_op           PROTO((tree, tree));\n-extern tree build_chill_sizeof                  PROTO((tree));\n-extern tree build_chill_slice\t\t        PROTO((tree, tree, tree));\n-extern tree build_chill_slice_with_range        PROTO((tree, tree, tree));\n-extern tree build_chill_slice_with_length       PROTO((tree, tree, tree));\n-extern tree build_chill_struct_type             PROTO((tree));\n-extern tree build_chill_unary_op                PROTO((enum chill_tree_code, tree));\n-extern tree build_chill_upper                   PROTO((tree));\n-extern tree build_exception_variant             PROTO((tree, tree));\n-extern tree build_generalized_call              PROTO((tree, tree));\n-extern tree build_lang_decl                     PROTO((enum chill_tree_code, tree, tree));\n-extern tree build_rts_call                      PROTO((const char *, tree, tree));\n-extern tree build_varying_struct                PROTO((tree));\n-extern void chill_check_decl                    PROTO((tree));\n-extern tree chill_convert_for_assignment        PROTO((tree, tree, const char *));\n-extern void chill_expand_return                 PROTO((tree, int));\n-extern void chill_expand_result                 PROTO((tree, int));\n-extern void chill_handle_case_default           PROTO((void));\n-extern void chill_handle_case_label\t\tPROTO((tree, tree));\n-extern int  chill_varying_string_type_p         PROTO((tree));\n-extern int  chill_varying_type_p                PROTO((tree));\n-extern int  ch_singleton_set                    PROTO((tree));\n-extern tree check_expression                    PROTO((tree, tree, tree));\n-extern void check_missing_cases                 PROTO((tree));\n-extern tree check_non_null                      PROTO((tree));\n-extern tree check_range                         PROTO((tree, tree, tree,tree));\n-extern void cond_type_range_exception           PROTO((tree));\n-extern void expand_cause_exception              PROTO((tree));\n-extern tree finish_chill_binary_op              PROTO((tree));\n-extern tree finish_chill_unary_op               PROTO((tree));\n-extern tree high_domain_value                   PROTO((tree));\n-extern tree low_domain_value                    PROTO((tree));\n-extern tree maybe_array_ref\t\t\tPROTO((tree, tree));\n-extern void maybe_chill_check_decl              PROTO((tree));\n-extern tree powersetlen                         PROTO((tree));\n-extern tree test_range                          PROTO((tree, tree, tree));\n+extern void allocate_lang_decl                  PARAMS ((tree));\n+extern tree build_chill_abs                     PARAMS ((tree));\n+extern tree build_chill_array_ref_1             PARAMS ((tree, tree));\n+extern tree build_chill_array_ref               PARAMS ((tree, tree));\n+extern tree build_chill_bin_type                PARAMS ((tree));\n+extern tree build_chill_binary_op               PARAMS ((enum chill_tree_code, tree, tree));\n+extern tree build_chill_card                    PARAMS ((tree));\n+extern tree build_chill_case_expr               PARAMS ((tree, tree, tree)); \n+extern tree build_cause_exception               PARAMS ((tree, int));\n+extern tree build_chill_exception_decl          PARAMS ((const char *));\n+extern tree build_chill_function_call           PARAMS ((tree, tree));\n+extern tree build_chill_length                  PARAMS ((tree));\n+extern tree build_chill_indirect_ref            PARAMS ((tree, tree, int));\n+extern tree build_chill_lower                   PARAMS ((tree));\n+extern tree build_chill_max                     PARAMS ((tree));\n+extern tree build_chill_min                     PARAMS ((tree));\n+extern tree build_chill_num                     PARAMS ((tree));\n+extern tree build_chill_repetition_op           PARAMS ((tree, tree));\n+extern tree build_chill_sizeof                  PARAMS ((tree));\n+extern tree build_chill_slice\t\t        PARAMS ((tree, tree, tree));\n+extern tree build_chill_slice_with_range        PARAMS ((tree, tree, tree));\n+extern tree build_chill_slice_with_length       PARAMS ((tree, tree, tree));\n+extern tree build_chill_struct_type             PARAMS ((tree));\n+extern tree build_chill_unary_op                PARAMS ((enum chill_tree_code, tree));\n+extern tree build_chill_upper                   PARAMS ((tree));\n+extern tree build_exception_variant             PARAMS ((tree, tree));\n+extern tree build_generalized_call              PARAMS ((tree, tree));\n+extern tree build_lang_decl                     PARAMS ((enum chill_tree_code, tree, tree));\n+extern tree build_rts_call                      PARAMS ((const char *, tree, tree));\n+extern tree build_varying_struct                PARAMS ((tree));\n+extern void chill_check_decl                    PARAMS ((tree));\n+extern tree chill_convert_for_assignment        PARAMS ((tree, tree, const char *));\n+extern void chill_expand_return                 PARAMS ((tree, int));\n+extern void chill_expand_result                 PARAMS ((tree, int));\n+extern void chill_handle_case_default           PARAMS ((void));\n+extern void chill_handle_case_label\t\tPARAMS ((tree, tree));\n+extern int  chill_varying_string_type_p         PARAMS ((tree));\n+extern int  chill_varying_type_p                PARAMS ((tree));\n+extern int  ch_singleton_set                    PARAMS ((tree));\n+extern tree check_expression                    PARAMS ((tree, tree, tree));\n+extern void check_missing_cases                 PARAMS ((tree));\n+extern tree check_non_null                      PARAMS ((tree));\n+extern tree check_range                         PARAMS ((tree, tree, tree,tree));\n+extern void cond_type_range_exception           PARAMS ((tree));\n+extern void expand_cause_exception              PARAMS ((tree));\n+extern tree finish_chill_binary_op              PARAMS ((tree));\n+extern tree finish_chill_unary_op               PARAMS ((tree));\n+extern tree high_domain_value                   PARAMS ((tree));\n+extern tree low_domain_value                    PARAMS ((tree));\n+extern tree maybe_array_ref\t\t\tPARAMS ((tree, tree));\n+extern void maybe_chill_check_decl              PARAMS ((tree));\n+extern tree powersetlen                         PARAMS ((tree));\n+extern tree test_range                          PARAMS ((tree, tree, tree));\n /* in ch/convert.c */\n-extern tree build_array_type_for_scalar         PROTO((tree));\n-extern tree convert                             PROTO((tree, tree));\n-extern tree convert_from_reference              PROTO((tree));\n-extern tree convert_to_class                    PROTO((ch_class, tree));\n-extern const char *display_int_cst\t\tPROTO((tree));\n+extern tree build_array_type_for_scalar         PARAMS ((tree));\n+extern tree convert                             PARAMS ((tree, tree));\n+extern tree convert_from_reference              PARAMS ((tree));\n+extern tree convert_to_class                    PARAMS ((ch_class, tree));\n+extern const char *display_int_cst\t\tPARAMS ((tree));\n \n /* in ch/decl.c */\n-extern tree build_enumerator\t\t        PROTO((tree, tree));\n-extern tree chill_munge_params                  PROTO((tree, tree, tree));\n-extern tree build_chill_function_type           PROTO((tree, tree, tree, tree));\n-extern tree decl_temp1                          PROTO((tree, tree, int, tree, int, int));\n-extern void do_based_decls                      PROTO((tree, tree, tree));\n-extern void do_chill_outparms                   PROTO((void));\n-extern tree do_decl                             PROTO((tree, tree, int, int, tree, int));\n-extern void do_decls                            PROTO((tree, tree, int, int, tree, int));\n-extern void expand_chill_outparms               PROTO((void));\n-extern void find_granted_decls\t\t        PROTO((void));\n-extern void finish_chill_function               PROTO((void));\n-extern tree finish_enum\t\t                PROTO((tree, tree));\n-extern void fixup_chill_parms                   PROTO((tree));\n-extern void finish_outer_function               PROTO((void));\n-extern unsigned get_type_precision              PROTO((tree, tree));\n-extern tree grok_chill_fixedfields              PROTO((tree, tree, tree));\n-extern tree grok_chill_variantdefs              PROTO((tree, tree, tree));\n-extern void layout_enum                         PROTO((tree));\n-/* extern tree lookup_remembered_decl PROTO((HOST_WIDE_INT, tree)); */\n-extern void lookup_and_expand_goto\t\tPROTO((tree));\n-extern tree lookup_tag_fields\t\t        PROTO((tree, tree));\n-extern void lookup_and_handle_exit              PROTO((tree));\n-extern tree massage_param_node\t\t\tPROTO((tree, tree));\n-extern void pop_module                          PROTO((void));\n-extern void print_mode                          PROTO((tree));\n-extern tree push_extern_function                PROTO((tree, tree, tree, tree, int));\n-extern void push_extern_process                 PROTO((tree, tree, tree, int));\n-extern void push_extern_signal                  PROTO((tree, tree, tree));\n-extern void push_granted                        PROTO((tree, tree));\n-extern tree push_modedef                        PROTO((tree, tree, int));\n-extern tree push_module                         PROTO((tree, int));\n-extern void push_parms                          PROTO((tree, tree, tree));\n-extern void push_syndecl                        PROTO((tree, tree, tree));\n+extern tree build_enumerator\t\t        PARAMS ((tree, tree));\n+extern tree chill_munge_params                  PARAMS ((tree, tree, tree));\n+extern tree build_chill_function_type           PARAMS ((tree, tree, tree, tree));\n+extern tree decl_temp1                          PARAMS ((tree, tree, int, tree, int, int));\n+extern void do_based_decls                      PARAMS ((tree, tree, tree));\n+extern void do_chill_outparms                   PARAMS ((void));\n+extern tree do_decl                             PARAMS ((tree, tree, int, int, tree, int));\n+extern void do_decls                            PARAMS ((tree, tree, int, int, tree, int));\n+extern void expand_chill_outparms               PARAMS ((void));\n+extern void find_granted_decls\t\t        PARAMS ((void));\n+extern void finish_chill_function               PARAMS ((void));\n+extern tree finish_enum\t\t                PARAMS ((tree, tree));\n+extern void fixup_chill_parms                   PARAMS ((tree));\n+extern void finish_outer_function               PARAMS ((void));\n+extern unsigned get_type_precision              PARAMS ((tree, tree));\n+extern tree grok_chill_fixedfields              PARAMS ((tree, tree, tree));\n+extern tree grok_chill_variantdefs              PARAMS ((tree, tree, tree));\n+extern void layout_enum                         PARAMS ((tree));\n+/* extern tree lookup_remembered_decl PARAMS ((HOST_WIDE_INT, tree)); */\n+extern void lookup_and_expand_goto\t\tPARAMS ((tree));\n+extern tree lookup_tag_fields\t\t        PARAMS ((tree, tree));\n+extern void lookup_and_handle_exit              PARAMS ((tree));\n+extern tree massage_param_node\t\t\tPARAMS ((tree, tree));\n+extern void pop_module                          PARAMS ((void));\n+extern void print_mode                          PARAMS ((tree));\n+extern tree push_extern_function                PARAMS ((tree, tree, tree, tree, int));\n+extern void push_extern_process                 PARAMS ((tree, tree, tree, int));\n+extern void push_extern_signal                  PARAMS ((tree, tree, tree));\n+extern void push_granted                        PARAMS ((tree, tree));\n+extern tree push_modedef                        PARAMS ((tree, tree, int));\n+extern tree push_module                         PARAMS ((tree, int));\n+extern void push_parms                          PARAMS ((tree, tree, tree));\n+extern void push_syndecl                        PARAMS ((tree, tree, tree));\n extern int result_never_set;\n-extern void save_expr_under_name                PROTO((tree, tree));\n-extern tree set_module_name                     PROTO((tree));\n-extern int  start_chill_function                PROTO((tree, tree, tree, tree, tree));\n-extern void start_outer_function\t        PROTO((void));\n-extern void switch_to_pass_2 \t                PROTO((void));\n+extern void save_expr_under_name                PARAMS ((tree, tree));\n+extern tree set_module_name                     PARAMS ((tree));\n+extern int  start_chill_function                PARAMS ((tree, tree, tree, tree, tree));\n+extern void start_outer_function\t        PARAMS ((void));\n+extern void switch_to_pass_2 \t                PARAMS ((void));\n \n /* in ch/except.c */\n-extern void chill_check_no_handlers             PROTO((void));\n-extern void chill_finish_on                     PROTO((void));\n-extern void chill_handle_on_labels              PROTO((tree));\n-extern void chill_reraise_exceptions            PROTO((tree));\n-extern void chill_start_default_handler         PROTO((void));\n-extern void chill_start_on                      PROTO((void));\n-extern void expand_goto_except_cleanup          PROTO((int));\n-extern int is_handled\t\t\t\tPROTO((tree));\n+extern void chill_check_no_handlers             PARAMS ((void));\n+extern void chill_finish_on                     PARAMS ((void));\n+extern void chill_handle_on_labels              PARAMS ((tree));\n+extern void chill_reraise_exceptions            PARAMS ((tree));\n+extern void chill_start_default_handler         PARAMS ((void));\n+extern void chill_start_on                      PARAMS ((void));\n+extern void expand_goto_except_cleanup          PARAMS ((int));\n+extern int is_handled\t\t\t\tPARAMS ((tree));\n \n /* in ch/expr.c */\n-extern tree build_chill_addr_expr               PROTO((tree, const char *));\n-extern tree build_chill_arrow_expr              PROTO((tree, int));\n-extern tree build_component_ref\t\t        PROTO((tree, tree));\n-extern tree build_chill_compound_expr           PROTO((tree));\n-extern tree build_chill_descr                   PROTO((tree));\n-extern void build_chill_descr_type              PROTO((void));\n-extern void build_chill_inttime_type            PROTO((void));\n-extern tree build_compare_expr\t\t\tPROTO((enum tree_code,\n+extern tree build_chill_addr_expr               PARAMS ((tree, const char *));\n+extern tree build_chill_arrow_expr              PARAMS ((tree, int));\n+extern tree build_component_ref\t\t        PARAMS ((tree, tree));\n+extern tree build_chill_compound_expr           PARAMS ((tree));\n+extern tree build_chill_descr                   PARAMS ((tree));\n+extern void build_chill_descr_type              PARAMS ((void));\n+extern void build_chill_inttime_type            PARAMS ((void));\n+extern tree build_compare_expr\t\t\tPARAMS ((enum tree_code,\n \t\t\t\t\t\t       tree, tree));\n-extern tree build_compare_discrete_expr\t\tPROTO((enum tree_code,\n+extern tree build_compare_discrete_expr\t\tPARAMS ((enum tree_code,\n \t\t\t\t\t\t       tree, tree));\n-extern tree check_case_selector                 PROTO((tree));\n-extern tree check_case_selector_list            PROTO((tree));\n-extern tree check_have_mode                     PROTO((tree, const char *));\n-extern void init_chill_expand                   PROTO((void));\n-extern void chill_expand_assignment             PROTO((tree, enum chill_tree_code, tree));\n-extern void expand_assignment_action            PROTO((tree, enum chill_tree_code, tree));\n-extern int compare_int_csts\t\t\tPROTO((enum chill_tree_code,\n+extern tree check_case_selector                 PARAMS ((tree));\n+extern tree check_case_selector_list            PARAMS ((tree));\n+extern tree check_have_mode                     PARAMS ((tree, const char *));\n+extern void init_chill_expand                   PARAMS ((void));\n+extern void chill_expand_assignment             PARAMS ((tree, enum chill_tree_code, tree));\n+extern void expand_assignment_action            PARAMS ((tree, enum chill_tree_code, tree));\n+extern int compare_int_csts\t\t\tPARAMS ((enum chill_tree_code,\n \t\t\t\t\t\t       tree, tree));\n-extern void expand_varying_length_assignment    PROTO((tree, tree));\n-extern tree force_addr_of\t\t\tPROTO((tree));\n-extern tree resolve_component_ref               PROTO((tree));\n-extern tree truthvalue_conversion               PROTO((tree));\n-extern tree varying_to_slice\t\t        PROTO((tree));\n+extern void expand_varying_length_assignment    PARAMS ((tree, tree));\n+extern tree force_addr_of\t\t\tPARAMS ((tree));\n+extern tree resolve_component_ref               PARAMS ((tree));\n+extern tree truthvalue_conversion               PARAMS ((tree));\n+extern tree varying_to_slice\t\t        PARAMS ((tree));\n \n /* in ch/grant.c */\n-extern void chill_finish_compile                PROTO((void));\n-extern void chill_seize                         PROTO((tree, tree, tree));\n-extern void start_outer_function\t        PROTO((void));\n-extern void finish_chill_seize                  PROTO((tree));\n-extern void chill_grant                         PROTO((tree,tree, tree, tree));\n-extern void set_default_grant_file              PROTO((void));\n-extern void set_identifier_size                 PROTO((int));\n-extern void write_grant_file                    PROTO((void));\n-extern void write_spec_module                   PROTO((tree, tree));\n+extern void chill_finish_compile                PARAMS ((void));\n+extern void chill_seize                         PARAMS ((tree, tree, tree));\n+extern void start_outer_function\t        PARAMS ((void));\n+extern void finish_chill_seize                  PARAMS ((tree));\n+extern void chill_grant                         PARAMS ((tree,tree, tree, tree));\n+extern void set_default_grant_file              PARAMS ((void));\n+extern void set_identifier_size                 PARAMS ((int));\n+extern void write_grant_file                    PARAMS ((void));\n+extern void write_spec_module                   PARAMS ((tree, tree));\n \n /* in ch/lang.c */\n extern tree string_index_type_dummy;\n extern tree integer_minus_one_node;\n extern int  flag_old_strings;\n-extern void GNU_xref_begin                      PROTO((void));\n-extern void GNU_xref_end                        PROTO((void));\n-extern tree build_chill_array_type              PROTO((tree, tree, int, tree));\n-extern tree build_chill_struct_type             PROTO((tree));\n-extern tree build_chill_pointer_type            PROTO((tree));\n-extern tree build_chill_range_type              PROTO((tree, tree, tree));\n-extern tree build_chill_reference_type          PROTO((tree));\n-extern tree build_simple_array_type             PROTO((tree, tree, tree));\n-extern tree const_expr                          PROTO((tree));\n-extern tree get_identifier3\t\t\tPROTO((const char *, const char *, const char *));\n-extern tree layout_chill_array_type             PROTO((tree));\n-extern tree layout_chill_range_type             PROTO((tree, int));\n-extern tree layout_chill_pointer_type           PROTO((tree));\n-extern tree layout_chill_struct_type            PROTO((tree));\n-extern tree layout_chill_variants               PROTO((tree));\n-extern tree layout_powerset_type                PROTO((tree));\n-extern tree lookup_interface                    PROTO((tree));\n-extern tree maybe_building_objc_message_expr    PROTO((void));\n-extern void maybe_objc_check_decl               PROTO((tree));\n-extern int  maybe_objc_comptypes                PROTO((tree, tree));\n-extern int  recognize_objc_keyword              PROTO((void));\n+extern void GNU_xref_begin                      PARAMS ((void));\n+extern void GNU_xref_end                        PARAMS ((void));\n+extern tree build_chill_array_type              PARAMS ((tree, tree, int, tree));\n+extern tree build_chill_struct_type             PARAMS ((tree));\n+extern tree build_chill_pointer_type            PARAMS ((tree));\n+extern tree build_chill_range_type              PARAMS ((tree, tree, tree));\n+extern tree build_chill_reference_type          PARAMS ((tree));\n+extern tree build_simple_array_type             PARAMS ((tree, tree, tree));\n+extern tree const_expr                          PARAMS ((tree));\n+extern tree get_identifier3\t\t\tPARAMS ((const char *, const char *, const char *));\n+extern tree layout_chill_array_type             PARAMS ((tree));\n+extern tree layout_chill_range_type             PARAMS ((tree, int));\n+extern tree layout_chill_pointer_type           PARAMS ((tree));\n+extern tree layout_chill_struct_type            PARAMS ((tree));\n+extern tree layout_chill_variants               PARAMS ((tree));\n+extern tree layout_powerset_type                PARAMS ((tree));\n+extern tree lookup_interface                    PARAMS ((tree));\n+extern tree maybe_building_objc_message_expr    PARAMS ((void));\n+extern void maybe_objc_check_decl               PARAMS ((tree));\n+extern int  maybe_objc_comptypes                PARAMS ((tree, tree));\n+extern int  recognize_objc_keyword              PARAMS ((void));\n \n /* in ch/lex.l */\n extern tree use_seizefile_name;\n extern tree current_seizefile_name;\n-extern tree build_chill_string                  PROTO((int, const char *));\n-extern int  check_newline                       PROTO((void));\n-extern tree get_chill_filename                  PROTO((void)); \n-extern tree get_chill_linenumber                PROTO((void));       \n-extern void register_seize_path                 PROTO((const char *));\n-extern void reinit_parse_for_function           PROTO((void));\n-extern void mark_use_seizefile_written          PROTO((tree));\n+extern tree build_chill_string                  PARAMS ((int, const char *));\n+extern int  check_newline                       PARAMS ((void));\n+extern tree get_chill_filename                  PARAMS ((void)); \n+extern tree get_chill_linenumber                PARAMS ((void));       \n+extern void register_seize_path                 PARAMS ((const char *));\n+extern void reinit_parse_for_function           PARAMS ((void));\n+extern void mark_use_seizefile_written          PARAMS ((tree));\n \n /* in ch/loop.c */\n-extern void begin_chill_loop                    PROTO((tree, tree));\n-extern tree build_chill_iterator                PROTO((tree, tree, tree, int, int, int));\n-extern void end_chill_loop                      PROTO((void));\n-extern tree get_unique_identifier               PROTO((const char *));\n+extern void begin_chill_loop                    PARAMS ((tree, tree));\n+extern tree build_chill_iterator                PARAMS ((tree, tree, tree, int, int, int));\n+extern void end_chill_loop                      PARAMS ((void));\n+extern tree get_unique_identifier               PARAMS ((const char *));\n \n /* in ch/inout.c */\n-extern tree access_recordmode                   PROTO((tree));\n-extern void invalidate_access_recordmode        PROTO((tree));\n-extern tree access_indexmode                    PROTO((tree));\n-extern tree access_dynamic                      PROTO((tree));\n+extern tree access_recordmode                   PARAMS ((tree));\n+extern void invalidate_access_recordmode        PARAMS ((tree));\n+extern tree access_indexmode                    PARAMS ((tree));\n+extern tree access_dynamic                      PARAMS ((tree));\n extern tree association_init_value;\n extern tree association_type_node;\n-extern tree build_access_mode                   PROTO((tree, tree, int));\n-extern tree build_chill_associate               PROTO((tree, tree, tree));\n-extern tree build_chill_connect                 PROTO((tree, tree, tree, tree));\n-extern tree build_chill_create                  PROTO((tree));\n-extern tree build_chill_delete                  PROTO((tree));\n-extern tree build_chill_disconnect              PROTO((tree));\n-extern tree build_chill_dissociate              PROTO((tree));\n-extern tree build_chill_eoln                    PROTO((tree)); \n-extern tree build_chill_existing                PROTO((tree));\n-extern tree build_chill_gettextaccess           PROTO((tree)); \n-extern tree build_chill_getassociation          PROTO((tree)); \n-extern tree build_chill_gettextindex            PROTO((tree)); \n-extern tree build_chill_gettextrecord           PROTO((tree)); \n-extern tree build_chill_getusage                PROTO((tree)); \n-extern tree build_chill_indexable               PROTO((tree)); \n-extern tree build_chill_isassociated            PROTO((tree)); \n-extern tree build_chill_modify                  PROTO((tree, tree));\n-extern tree build_chill_outoffile               PROTO((tree)); \n-extern tree build_chill_readable                PROTO((tree));\n-extern tree build_chill_readrecord              PROTO((tree, tree));\n-extern tree build_chill_readtext                PROTO((tree, tree));\n-extern tree build_chill_sequencible             PROTO((tree)); \n-extern tree build_chill_settextaccess           PROTO((tree, tree));\n-extern tree build_chill_settextindex            PROTO((tree, tree));\n-extern tree build_chill_settextrecord           PROTO((tree, tree));\n-extern tree build_chill_variable                PROTO((tree)); \n-extern tree build_chill_writeable               PROTO((tree));\n-extern tree build_chill_writerecord             PROTO((tree, tree));\n-extern tree build_chill_writetext               PROTO((tree, tree));\n-extern void build_enum_tables                   PROTO((void));\n-extern tree build_text_mode                     PROTO((tree, tree, int));\n-extern tree check_text_length                   PROTO((tree));\n-extern void init_access_location                PROTO((tree, tree));\n-extern void init_text_location                  PROTO((tree, tree));\n-extern void inout_init                          PROTO((void));\n-extern tree text_dynamic                        PROTO((tree));\n-extern tree text_indexmode                      PROTO((tree));\n-extern tree text_length                         PROTO((tree));\n+extern tree build_access_mode                   PARAMS ((tree, tree, int));\n+extern tree build_chill_associate               PARAMS ((tree, tree, tree));\n+extern tree build_chill_connect                 PARAMS ((tree, tree, tree, tree));\n+extern tree build_chill_create                  PARAMS ((tree));\n+extern tree build_chill_delete                  PARAMS ((tree));\n+extern tree build_chill_disconnect              PARAMS ((tree));\n+extern tree build_chill_dissociate              PARAMS ((tree));\n+extern tree build_chill_eoln                    PARAMS ((tree)); \n+extern tree build_chill_existing                PARAMS ((tree));\n+extern tree build_chill_gettextaccess           PARAMS ((tree)); \n+extern tree build_chill_getassociation          PARAMS ((tree)); \n+extern tree build_chill_gettextindex            PARAMS ((tree)); \n+extern tree build_chill_gettextrecord           PARAMS ((tree)); \n+extern tree build_chill_getusage                PARAMS ((tree)); \n+extern tree build_chill_indexable               PARAMS ((tree)); \n+extern tree build_chill_isassociated            PARAMS ((tree)); \n+extern tree build_chill_modify                  PARAMS ((tree, tree));\n+extern tree build_chill_outoffile               PARAMS ((tree)); \n+extern tree build_chill_readable                PARAMS ((tree));\n+extern tree build_chill_readrecord              PARAMS ((tree, tree));\n+extern tree build_chill_readtext                PARAMS ((tree, tree));\n+extern tree build_chill_sequencible             PARAMS ((tree)); \n+extern tree build_chill_settextaccess           PARAMS ((tree, tree));\n+extern tree build_chill_settextindex            PARAMS ((tree, tree));\n+extern tree build_chill_settextrecord           PARAMS ((tree, tree));\n+extern tree build_chill_variable                PARAMS ((tree)); \n+extern tree build_chill_writeable               PARAMS ((tree));\n+extern tree build_chill_writerecord             PARAMS ((tree, tree));\n+extern tree build_chill_writetext               PARAMS ((tree, tree));\n+extern void build_enum_tables                   PARAMS ((void));\n+extern tree build_text_mode                     PARAMS ((tree, tree, int));\n+extern tree check_text_length                   PARAMS ((tree));\n+extern void init_access_location                PARAMS ((tree, tree));\n+extern void init_text_location                  PARAMS ((tree, tree));\n+extern void inout_init                          PARAMS ((void));\n+extern tree text_dynamic                        PARAMS ((tree));\n+extern tree text_indexmode                      PARAMS ((tree));\n+extern tree text_length                         PARAMS ((tree));\n extern tree usage_type_node;\n extern tree where_type_node;\n \n /* in ch/parse.c */\n-extern tree get_type_of                         PROTO((tree));\n-extern void set_yydebug                         PROTO((int));\n-extern void yyerror                             PROTO((char *));\n+extern tree get_type_of                         PARAMS ((tree));\n+extern void set_yydebug                         PARAMS ((int));\n+extern void yyerror                             PARAMS ((char *));\n extern int  pass;\n extern int ignoring;\n extern int seen_action;\n extern int build_constructor;\n-extern void possibly_define_exit_label          PROTO((tree));\n-extern void to_global_binding_level             PROTO((void));\n+extern void possibly_define_exit_label          PARAMS ((tree));\n+extern void to_global_binding_level             PARAMS ((void));\n \n /* in ch/satisfy.c */\n-extern tree satisfy_decl \t                PROTO((tree, int));\n+extern tree satisfy_decl \t                PARAMS ((tree, int));\n \n /* in ch/tasking.c */\n-extern void add_taskstuff_to_list               PROTO((tree, const char *, tree, tree, tree));\n-extern void process_buffer_decls                PROTO((tree, tree, int));\n-extern tree buffer_element_mode                 PROTO((tree));\n-extern void invalidate_buffer_element_mode      PROTO((tree));\n-extern tree build_buffer_descriptor             PROTO((tree, tree, tree));\n-extern tree build_buffer_type                   PROTO((tree, tree));\n-extern void build_delay_action                  PROTO((tree, tree));\n-extern tree build_delay_case_start              PROTO((tree, tree));\n-extern void build_delay_case_end                PROTO((tree));\n-extern void build_delay_case_label              PROTO((tree, int));\n-extern tree build_event_type                    PROTO((tree));\n-extern void build_receive_case_end              PROTO((tree, tree));\n-extern int  build_receive_case_if_generated     PROTO((void));\n-extern tree build_receive_case_label            PROTO((tree, tree));\n-extern tree build_receive_case_start            PROTO((tree));\n-extern void expand_continue_event               PROTO((tree));\n-extern void expand_send_buffer                  PROTO((tree, tree, tree, tree, tree));\n-extern void expand_send_signal                  PROTO((tree, tree, tree, tree, tree));\n-extern void build_start_process                 PROTO((tree, tree, tree, tree));\n-extern tree build_copy_number                   PROTO((tree));\n-extern tree build_gen_code                      PROTO((tree));\n-extern tree build_gen_inst                      PROTO((tree, tree));\n-extern tree build_gen_ptype                     PROTO((tree));\n-extern void build_instance_type                 PROTO((void));\n-extern tree build_process_header                PROTO((tree, tree));\n-extern void build_process_wrapper               PROTO((tree, tree));\n-extern tree build_proc_type                     PROTO((tree));\n-extern tree build_queue_length                  PROTO((tree));\n-extern tree build_signal_descriptor             PROTO((tree, tree));\n-extern tree build_signal_struct_type            PROTO((tree, tree, tree));\n-extern tree build_tasking_struct                PROTO((void));\n+extern void add_taskstuff_to_list               PARAMS ((tree, const char *, tree, tree, tree));\n+extern void process_buffer_decls                PARAMS ((tree, tree, int));\n+extern tree buffer_element_mode                 PARAMS ((tree));\n+extern void invalidate_buffer_element_mode      PARAMS ((tree));\n+extern tree build_buffer_descriptor             PARAMS ((tree, tree, tree));\n+extern tree build_buffer_type                   PARAMS ((tree, tree));\n+extern void build_delay_action                  PARAMS ((tree, tree));\n+extern tree build_delay_case_start              PARAMS ((tree, tree));\n+extern void build_delay_case_end                PARAMS ((tree));\n+extern void build_delay_case_label              PARAMS ((tree, int));\n+extern tree build_event_type                    PARAMS ((tree));\n+extern void build_receive_case_end              PARAMS ((tree, tree));\n+extern int  build_receive_case_if_generated     PARAMS ((void));\n+extern tree build_receive_case_label            PARAMS ((tree, tree));\n+extern tree build_receive_case_start            PARAMS ((tree));\n+extern void expand_continue_event               PARAMS ((tree));\n+extern void expand_send_buffer                  PARAMS ((tree, tree, tree, tree, tree));\n+extern void expand_send_signal                  PARAMS ((tree, tree, tree, tree, tree));\n+extern void build_start_process                 PARAMS ((tree, tree, tree, tree));\n+extern tree build_copy_number                   PARAMS ((tree));\n+extern tree build_gen_code                      PARAMS ((tree));\n+extern tree build_gen_inst                      PARAMS ((tree, tree));\n+extern tree build_gen_ptype                     PARAMS ((tree));\n+extern void build_instance_type                 PARAMS ((void));\n+extern tree build_process_header                PARAMS ((tree, tree));\n+extern void build_process_wrapper               PARAMS ((tree, tree));\n+extern tree build_proc_type                     PARAMS ((tree));\n+extern tree build_queue_length                  PARAMS ((tree));\n+extern tree build_signal_descriptor             PARAMS ((tree, tree));\n+extern tree build_signal_struct_type            PARAMS ((tree, tree, tree));\n+extern tree build_tasking_struct                PARAMS ((void));\n extern tree chill_taskingcode_type_node;\n-extern tree check_queue_size                    PROTO((tree));\n-extern tree generate_tasking_code_variable      PROTO((tree, tree *, int));\n-extern tree get_signal_type_name                PROTO((tree));\n-extern tree get_struct_type_name                PROTO((tree));\n-extern tree get_tasking_code_name               PROTO((tree));\n-extern tree make_process_struct                 PROTO((tree, tree));\n-extern tree make_signal_struct                  PROTO((tree));\n-extern tree max_queue_size                      PROTO((tree));\n-extern void tasking_init                        PROTO((void));\n-extern void tasking_registry                    PROTO((void));\n-extern void tasking_setup                       PROTO((void));\n+extern tree check_queue_size                    PARAMS ((tree));\n+extern tree generate_tasking_code_variable      PARAMS ((tree, tree *, int));\n+extern tree get_signal_type_name                PARAMS ((tree));\n+extern tree get_struct_type_name                PARAMS ((tree));\n+extern tree get_tasking_code_name               PARAMS ((tree));\n+extern tree make_process_struct                 PARAMS ((tree, tree));\n+extern tree make_signal_struct                  PARAMS ((tree));\n+extern tree max_queue_size                      PARAMS ((tree));\n+extern void tasking_init                        PARAMS ((void));\n+extern void tasking_registry                    PARAMS ((void));\n+extern void tasking_setup                       PARAMS ((void));\n \n /* in ch/timing.c */\n extern tree abs_timing_type_node;\n extern tree after_stack;\n-extern void build_after_end                     PROTO((void));\n-extern void build_after_start                   PROTO((tree, int));\n-extern void build_after_timeout_start           PROTO((void));\n-extern void build_at_action                     PROTO((tree));\n-extern void build_cycle_end                     PROTO((tree));\n-extern tree build_cycle_start                   PROTO((tree));\n-extern tree build_timeout_preface               PROTO((void));\n-extern void build_timesupervised_call           PROTO((tree, tree));\n+extern void build_after_end                     PARAMS ((void));\n+extern void build_after_start                   PARAMS ((tree, int));\n+extern void build_after_timeout_start           PARAMS ((void));\n+extern void build_at_action                     PARAMS ((tree));\n+extern void build_cycle_end                     PARAMS ((tree));\n+extern tree build_cycle_start                   PARAMS ((tree));\n+extern tree build_timeout_preface               PARAMS ((void));\n+extern void build_timesupervised_call           PARAMS ((tree, tree));\n extern tree duration_timing_type_node;\n-extern void timing_init                         PROTO((void));\n+extern void timing_init                         PARAMS ((void));\n \n /* in ch/tree.c */\n-extern tree build_alias_decl\t\t\tPROTO((tree, tree, tree));\n-extern tree build_bitstring_type                PROTO((tree));\n-extern tree build_powerset_type                 PROTO((tree));\n-extern tree build_string_type                   PROTO((tree, tree));\n-extern tree decl_check_rename\t\t\tPROTO((tree, tree));\n-extern tree discrete_count                      PROTO((tree));\n-extern int  list_length                         PROTO((tree));\n-extern tree munge_exit_label\t\t\tPROTO((tree));\n-extern tree save_if_needed\t\t\tPROTO((tree));\n+extern tree build_alias_decl\t\t\tPARAMS ((tree, tree, tree));\n+extern tree build_bitstring_type                PARAMS ((tree));\n+extern tree build_powerset_type                 PARAMS ((tree));\n+extern tree build_string_type                   PARAMS ((tree, tree));\n+extern tree decl_check_rename\t\t\tPARAMS ((tree, tree));\n+extern tree discrete_count                      PARAMS ((tree));\n+extern int  list_length                         PARAMS ((tree));\n+extern tree munge_exit_label\t\t\tPARAMS ((tree));\n+extern tree save_if_needed\t\t\tPARAMS ((tree));\n \n /* in ch/typeck.c */\n-extern tree build_array_from_set                PROTO((tree));\n-extern tree build_chill_array_ref               PROTO((tree, tree));\n-extern tree build_chill_bitref                  PROTO((tree, tree));\n-extern tree build_chill_cast                    PROTO((tree, tree));\n-extern tree chill_equivalent\t                PROTO((tree, tree, struct mode_chain*));\n-extern tree build_init_struct                   PROTO((void));\n-extern tree build_readonly_type                 PROTO((tree));\n-extern int  chill_compatible                    PROTO((tree, tree));\n-extern int  chill_compatible_classes            PROTO((tree, tree));\n-extern ch_class chill_expr_class                PROTO((tree));\n-extern tree chill_give_type_to_expr             PROTO((tree, tree));\n-extern tree chill_expand_tuple                  PROTO((tree, tree));\n-extern ch_class chill_expr_class                PROTO((tree));\n-extern int  chill_location                      PROTO((tree));\n-extern tree chill_max_vary_array_index\t\tPROTO((tree));\n-extern int  chill_read_compatible               PROTO((tree, tree));\n-extern int  chill_referable                     PROTO((tree));\n-extern tree chill_root_mode\t                PROTO((tree));\n-extern ch_class chill_resulting_class           PROTO((ch_class, ch_class));\n-extern tree chill_resulting_mode                PROTO((tree, tree));\n-extern int  chill_similar\t                PROTO((tree, tree, struct mode_chain*));\n-extern int  discrete_type_p\t\t\tPROTO((tree));\n-extern tree convert_to_discrete                 PROTO((tree));\n-extern tree smash_dummy_type                    PROTO((tree));\n-extern tree string_assignment_condition         PROTO((tree, tree));\n-extern tree type_for_mode                       PROTO((enum machine_mode, int));\n-extern tree type_for_size                       PROTO((unsigned, int));\n-extern int  valid_array_index                   PROTO((tree, tree));\n-extern void validate_varying_array_ref          PROTO((tree, tree));\n+extern tree build_array_from_set                PARAMS ((tree));\n+extern tree build_chill_array_ref               PARAMS ((tree, tree));\n+extern tree build_chill_bitref                  PARAMS ((tree, tree));\n+extern tree build_chill_cast                    PARAMS ((tree, tree));\n+extern tree chill_equivalent\t                PARAMS ((tree, tree, struct mode_chain*));\n+extern tree build_init_struct                   PARAMS ((void));\n+extern tree build_readonly_type                 PARAMS ((tree));\n+extern int  chill_compatible                    PARAMS ((tree, tree));\n+extern int  chill_compatible_classes            PARAMS ((tree, tree));\n+extern ch_class chill_expr_class                PARAMS ((tree));\n+extern tree chill_give_type_to_expr             PARAMS ((tree, tree));\n+extern tree chill_expand_tuple                  PARAMS ((tree, tree));\n+extern ch_class chill_expr_class                PARAMS ((tree));\n+extern int  chill_location                      PARAMS ((tree));\n+extern tree chill_max_vary_array_index\t\tPARAMS ((tree));\n+extern int  chill_read_compatible               PARAMS ((tree, tree));\n+extern int  chill_referable                     PARAMS ((tree));\n+extern tree chill_root_mode\t                PARAMS ((tree));\n+extern ch_class chill_resulting_class           PARAMS ((ch_class, ch_class));\n+extern tree chill_resulting_mode                PARAMS ((tree, tree));\n+extern int  chill_similar\t                PARAMS ((tree, tree, struct mode_chain*));\n+extern int  discrete_type_p\t\t\tPARAMS ((tree));\n+extern tree convert_to_discrete                 PARAMS ((tree));\n+extern tree smash_dummy_type                    PARAMS ((tree));\n+extern tree string_assignment_condition         PARAMS ((tree, tree));\n+extern tree type_for_mode                       PARAMS ((enum machine_mode, int));\n+extern tree type_for_size                       PARAMS ((unsigned, int));\n+extern int  valid_array_index                   PARAMS ((tree, tree));\n+extern void validate_varying_array_ref          PARAMS ((tree, tree));\n \n /* in function.c */\n-extern void expand_function_end                 PROTO((char *, int, int));\n-extern void expand_function_start               PROTO((tree, int));\n-extern void init_function_start                 PROTO((tree, char *, int));\n-extern void pop_function_context                PROTO((void));\n-extern void push_function_context               PROTO((void));\n+extern void expand_function_end                 PARAMS ((char *, int, int));\n+extern void expand_function_start               PARAMS ((tree, int));\n+extern void init_function_start                 PARAMS ((tree, char *, int));\n+extern void pop_function_context                PARAMS ((void));\n+extern void push_function_context               PARAMS ((void));\n \n /* in integrate.c */\n-extern void output_inline_function              PROTO((tree));\n+extern void output_inline_function              PARAMS ((tree));\n \n /* in toplev.c */\n-extern void announce_function                   PROTO((tree));\n-extern int  floor_log2_wide                     PROTO((unsigned HOST_WIDE_INT));\n-extern void rest_of_compilation                 PROTO((tree));\n+extern void announce_function                   PARAMS ((tree));\n+extern int  floor_log2_wide                     PARAMS ((unsigned HOST_WIDE_INT));\n+extern void rest_of_compilation                 PARAMS ((tree));\n \n /* in varasm.c */\n-extern void make_function_rtl                   PROTO((tree));\n+extern void make_function_rtl                   PARAMS ((tree));\n \n /* in ???? */\n-extern void init_iterators                      PROTO((void));\n-extern int  mark_addressable\t\t\tPROTO((tree));\n+extern void init_iterators                      PARAMS ((void));\n+extern int  mark_addressable\t\t\tPARAMS ((tree));\n extern tree chill_result_decl;\n #ifdef RTX_CODE\n-extern rtx label_rtx                            PROTO((tree));\n+extern rtx label_rtx                            PARAMS ((tree));\n #endif\n-extern void permanent_allocation                PROTO((int));\n+extern void permanent_allocation                PARAMS ((int));\n \n #ifndef SET_WORD_SIZE\n #define SET_WORD_SIZE BITS_PER_WORD\n@@ -1164,7 +1164,7 @@ struct module\n extern struct module *current_module;\n \n /* fold a tree to constant as much as possible */\n-extern tree deep_fold PROTO((tree));\n+extern tree deep_fold PARAMS ((tree));\n \n extern const char * const gnuchill_version;\n "}, {"sha": "7ad914b9f33393dff6cf6635393ecb02623129e0", "filename": "gcc/ch/convert.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fconvert.c?ref=3b0d91ff929f16828833bb2fe336a2ba458ebf65", "patch": "@@ -38,18 +38,18 @@ extern tree bit_one_node, bit_zero_node;\n extern tree string_one_type_node;\n extern tree bitstring_one_type_node;\n \n-static tree convert_to_reference\tPROTO ((tree, tree));\n-static tree convert_to_boolean\t\tPROTO ((tree, tree));\n-static tree convert_to_char\t\tPROTO ((tree, tree));\n+static tree convert_to_reference\tPARAMS ((tree, tree));\n+static tree convert_to_boolean\t\tPARAMS ((tree, tree));\n+static tree convert_to_char\t\tPARAMS ((tree, tree));\n #if 0\n-static tree base_type_size_in_bytes\tPROTO ((tree));\n+static tree base_type_size_in_bytes\tPARAMS ((tree));\n #endif\n-static tree remove_tree_element\t\tPROTO ((tree, tree *));\n-static tree check_ps_range\t\tPROTO ((tree, tree, tree));\n-static tree digest_powerset_tuple\tPROTO ((tree, tree));\n-static tree digest_structure_tuple\tPROTO ((tree, tree));\n-static tree digest_array_tuple\t\tPROTO ((tree, tree, int));\n-static tree convert1\t\t\tPROTO ((tree, tree));\n+static tree remove_tree_element\t\tPARAMS ((tree, tree *));\n+static tree check_ps_range\t\tPARAMS ((tree, tree, tree));\n+static tree digest_powerset_tuple\tPARAMS ((tree, tree));\n+static tree digest_structure_tuple\tPARAMS ((tree, tree));\n+static tree digest_array_tuple\t\tPARAMS ((tree, tree, int));\n+static tree convert1\t\t\tPARAMS ((tree, tree));\n \f\n static tree\n convert_to_reference (reftype, expr)"}, {"sha": "6e1cf730aac17f284d8f686c98d4bdcb3c8e0545", "filename": "gcc/ch/decl.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fdecl.c?ref=3b0d91ff929f16828833bb2fe336a2ba458ebf65", "patch": "@@ -205,12 +205,12 @@ extern struct obstack *saveable_obstack;\n extern tree signal_code;\n extern int special_UC;\n \n-static tree get_next_decl             PROTO((void));\n-static tree lookup_name_for_seizing   PROTO((tree));\n+static tree get_next_decl             PARAMS ((void));\n+static tree lookup_name_for_seizing   PARAMS ((tree));\n #if 0\n-static tree lookup_name_current_level PROTO((tree));\n+static tree lookup_name_current_level PARAMS ((tree));\n #endif\n-static void save_decl                 PROTO((tree));\n+static void save_decl                 PARAMS ((tree));\n \n extern struct obstack permanent_obstack;\n extern int in_pseudo_module;\n@@ -240,21 +240,21 @@ tree chill_result_decl;\n int result_never_set;\n \n /* forward declarations */\n-static void pushdecllist                     PROTO((tree, int));\n-static int  init_nonvalue_struct             PROTO((tree));\n-static int  init_nonvalue_array              PROTO((tree));\n-static void set_nesting_level                PROTO((tree, int));\n-static tree make_chill_variants              PROTO((tree, tree, tree));\n-static tree fix_identifier                   PROTO((tree));\n-static void proclaim_decl                    PROTO((tree, int));\n-static tree maybe_acons                      PROTO((tree, tree));\n-static void push_scope_decls                 PROTO((int));\n-static void pop_scope_decls                  PROTO((tree, tree));\n-static tree build_implied_names              PROTO((tree));\n-static void bind_sub_modules                 PROTO((int));\n-static void layout_array_type                PROTO((tree));\n-static void do_based_decl                    PROTO((tree, tree, tree));\n-static void handle_one_level                 PROTO((tree, tree));\n+static void pushdecllist                     PARAMS ((tree, int));\n+static int  init_nonvalue_struct             PARAMS ((tree));\n+static int  init_nonvalue_array              PARAMS ((tree));\n+static void set_nesting_level                PARAMS ((tree, int));\n+static tree make_chill_variants              PARAMS ((tree, tree, tree));\n+static tree fix_identifier                   PARAMS ((tree));\n+static void proclaim_decl                    PARAMS ((tree, int));\n+static tree maybe_acons                      PARAMS ((tree, tree));\n+static void push_scope_decls                 PARAMS ((int));\n+static void pop_scope_decls                  PARAMS ((tree, tree));\n+static tree build_implied_names              PARAMS ((tree));\n+static void bind_sub_modules                 PARAMS ((int));\n+static void layout_array_type                PARAMS ((tree));\n+static void do_based_decl                    PARAMS ((tree, tree, tree));\n+static void handle_one_level                 PARAMS ((tree, tree));\n \n int current_nesting_level = BUILTIN_NESTING_LEVEL;\n int current_module_nesting_level = 0;\n@@ -1545,7 +1545,7 @@ struct tree_pair\n   tree decl;\n };\n \n-static int  label_value_cmp                  PROTO((struct tree_pair *,\n+static int  label_value_cmp                  PARAMS ((struct tree_pair *,\n \t\t\t\t\t\t    struct tree_pair *));\n \n /* Function to help qsort sort variant labels by value order.  */\n@@ -1739,7 +1739,7 @@ layout_chill_variants (utype)\n       int limit;\n       qsort (label_value_array,\n \t     label_index, sizeof (struct tree_pair),\n-\t     (int (*) PROTO ((const void *, const void *))) label_value_cmp);\n+\t     (int (*) PARAMS ((const void *, const void *))) label_value_cmp);\n       limit = label_index - 1;\n       for (label_index = 0; label_index < limit; label_index++)\n \t{\n@@ -2493,7 +2493,7 @@ struct path\n   tree node;\n };\n \n-static tree find_implied_types            PROTO((tree, struct path *, tree));\n+static tree find_implied_types            PARAMS ((tree, struct path *, tree));\n \f\n /* Look for implied types (enumeral types) implied by TYPE (a decl or type).\n    Add these to list."}, {"sha": "92a94258022ae0f5aa169817e78cfd966329e807", "filename": "gcc/ch/except.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fexcept.c?ref=3b0d91ff929f16828833bb2fe336a2ba458ebf65", "patch": "@@ -60,10 +60,10 @@ static tree link_handler_decl;\n static tree handler_link_pointer_type;\n static tree unlink_handler_decl;\n static int exceptions_initialized = 0;\n-static void emit_setup_handler PROTO((void));\n-static void initialize_exceptions PROTO((void));\n-static tree start_handler_array PROTO((void));\n-static void finish_handler_array PROTO((void));\n+static void emit_setup_handler PARAMS ((void));\n+static void initialize_exceptions PARAMS ((void));\n+static tree start_handler_array PARAMS ((void));\n+static void finish_handler_array PARAMS ((void));\n static tree char_pointer_type_for_handler;\n \n /* If this is 1, operations to push and pop on the __exceptionStack"}, {"sha": "84a409af4b33f0e64732c12a4750bbb59e6df1ae", "filename": "gcc/ch/expr.c", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fexpr.c?ref=3b0d91ff929f16828833bb2fe336a2ba458ebf65", "patch": "@@ -52,42 +52,42 @@ extern int  special_UC;\n #define DAYS_MAX                                            49\n \n /* forward declarations */\n-static rtx chill_expand_expr\t\tPROTO ((tree, rtx, enum machine_mode, \n+static rtx chill_expand_expr\t\tPARAMS ((tree, rtx, enum machine_mode, \n \t\t\t\t\t\tenum expand_modifier));\n-static tree chill_expand_case_expr\tPROTO ((tree));\n-static int check_arglist_length\t\tPROTO ((tree, int, int, tree));\n-static tree internal_build_compound_expr PROTO ((tree, int));\n-static int is_really_instance\t\tPROTO ((tree));\n-static int invalid_operand\t\tPROTO ((enum chill_tree_code,\n+static tree chill_expand_case_expr\tPARAMS ((tree));\n+static int check_arglist_length\t\tPARAMS ((tree, int, int, tree));\n+static tree internal_build_compound_expr PARAMS ((tree, int));\n+static int is_really_instance\t\tPARAMS ((tree));\n+static int invalid_operand\t\tPARAMS ((enum chill_tree_code,\n \t\t\t\t\t\ttree, int));\n-static int invalid_right_operand\tPROTO ((enum chill_tree_code, tree));\n-static tree build_chill_abstime\t\tPROTO ((tree));\n-static tree build_allocate_memory_call\tPROTO ((tree, tree));\n-static tree build_allocate_global_memory_call PROTO ((tree, tree));\n-static tree build_return_memory\t\tPROTO ((tree));\n-static tree build_chill_duration\tPROTO ((tree, unsigned long,\n+static int invalid_right_operand\tPARAMS ((enum chill_tree_code, tree));\n+static tree build_chill_abstime\t\tPARAMS ((tree));\n+static tree build_allocate_memory_call\tPARAMS ((tree, tree));\n+static tree build_allocate_global_memory_call PARAMS ((tree, tree));\n+static tree build_return_memory\t\tPARAMS ((tree));\n+static tree build_chill_duration\tPARAMS ((tree, unsigned long,\n \t\t\t\t\t\ttree, unsigned long));\n-static tree build_chill_floatcall\tPROTO ((tree, const char *,\n+static tree build_chill_floatcall\tPARAMS ((tree, const char *,\n \t\t\t\t\t\tconst char *));\n-static tree build_allocate_getstack\tPROTO ((tree, tree, const char *,\n+static tree build_allocate_getstack\tPARAMS ((tree, tree, const char *,\n \t\t\t\t\t\tconst char *, tree, tree));\n-static tree build_chill_allocate\tPROTO ((tree, tree));\n-static tree build_chill_getstack\tPROTO ((tree, tree));\n-static tree build_chill_terminate\tPROTO ((tree));\n-static tree build_chill_inttime\t\tPROTO ((tree, tree));\n-static tree build_chill_lower_or_upper\tPROTO ((tree, int));\n-static tree build_max_min\t\tPROTO ((tree, int));\n-static tree build_chill_pred_or_succ\tPROTO ((tree, enum tree_code));\n-static tree expand_packed_set\t\tPROTO ((const char *, int, tree));\n-static tree fold_set_expr\t\tPROTO ((enum chill_tree_code,\n+static tree build_chill_allocate\tPARAMS ((tree, tree));\n+static tree build_chill_getstack\tPARAMS ((tree, tree));\n+static tree build_chill_terminate\tPARAMS ((tree));\n+static tree build_chill_inttime\t\tPARAMS ((tree, tree));\n+static tree build_chill_lower_or_upper\tPARAMS ((tree, int));\n+static tree build_max_min\t\tPARAMS ((tree, int));\n+static tree build_chill_pred_or_succ\tPARAMS ((tree, enum tree_code));\n+static tree expand_packed_set\t\tPARAMS ((const char *, int, tree));\n+static tree fold_set_expr\t\tPARAMS ((enum chill_tree_code,\n \t\t\t\t\t\ttree, tree));\n-static tree build_compare_set_expr\tPROTO ((enum tree_code, tree, tree));\n-static tree scalar_to_string\t\tPROTO ((tree));\n-static tree build_concat_expr\t\tPROTO ((tree, tree));\n-static tree build_compare_string_expr\tPROTO ((enum tree_code, tree, tree));\n-static tree compare_records\t\tPROTO ((tree, tree));\n-static tree string_char_rep\t\tPROTO ((int, tree));\n-static tree build_boring_bitstring\tPROTO ((long, int));\n+static tree build_compare_set_expr\tPARAMS ((enum tree_code, tree, tree));\n+static tree scalar_to_string\t\tPARAMS ((tree));\n+static tree build_concat_expr\t\tPARAMS ((tree, tree));\n+static tree build_compare_string_expr\tPARAMS ((enum tree_code, tree, tree));\n+static tree compare_records\t\tPARAMS ((tree, tree));\n+static tree string_char_rep\t\tPARAMS ((int, tree));\n+static tree build_boring_bitstring\tPARAMS ((long, int));\n \n /* variable to hold the type the DESCR built-in returns */\n static tree descr_type = NULL_TREE;"}, {"sha": "4784ce6dc00a488e02cb8f947ca1f7be4d502f32", "filename": "gcc/ch/grant.c", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Fgrant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Fgrant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fgrant.c?ref=3b0d91ff929f16828833bb2fe336a2ba458ebf65", "patch": "@@ -73,44 +73,44 @@ char\t*grant_file_name;\n MYSTRING\t*gstring = NULL;\n MYSTRING        *selective_gstring = NULL;\n \n-static MYSTRING *decode_decl                PROTO((tree));\n-static MYSTRING *decode_constant            PROTO((tree));\n-static void      grant_one_decl             PROTO((tree));\n-static MYSTRING *get_type                   PROTO((tree));\n-static MYSTRING *decode_mode                PROTO((tree));\n-static MYSTRING *decode_prefix_rename       PROTO((tree));\n-static MYSTRING *decode_constant_selective  PROTO((tree, tree));\n-static MYSTRING *decode_mode_selective      PROTO((tree, tree));\n-static MYSTRING *get_type_selective         PROTO((tree, tree));\n-static MYSTRING *decode_decl_selective      PROTO((tree, tree));\n-static MYSTRING *newstring                  PROTO((const char *));\n-static void strfree                         PROTO((MYSTRING *));\n-static MYSTRING *append                     PROTO((MYSTRING *, const char *));\n-static MYSTRING *prepend                    PROTO((MYSTRING *, const char *));\n-static void grant_use_seizefile             PROTO((const char *));\n-static MYSTRING *decode_layout              PROTO((tree));\n-static MYSTRING *grant_array_type           PROTO((tree));\n-static MYSTRING *grant_array_type_selective PROTO((tree, tree));\n-static MYSTRING *get_tag_value              PROTO((tree));\n-static MYSTRING *get_tag_value_selective    PROTO((tree, tree));\n-static MYSTRING *print_enumeral             PROTO((tree));\n-static MYSTRING *print_enumeral_selective   PROTO((tree, tree));\n-static MYSTRING *print_integer_type         PROTO((tree));\n-static tree find_enum_parent                PROTO((tree, tree));\n-static MYSTRING *print_integer_selective    PROTO((tree, tree));\n-static MYSTRING *print_struct               PROTO((tree));\n-static MYSTRING *print_struct_selective     PROTO((tree, tree));\n-static MYSTRING *print_proc_exceptions      PROTO((tree));\n-static MYSTRING *print_proc_tail            PROTO((tree, tree, int));\n-static MYSTRING *print_proc_tail_selective  PROTO((tree, tree, tree));\n-static tree find_in_decls                   PROTO((tree, tree));\n-static int in_ridpointers                   PROTO((tree));\n-static void grant_seized_identifier         PROTO((tree));\n-static void globalize_decl                  PROTO((tree));\n-static void grant_one_decl_selective        PROTO((tree, tree));\n-static int compare_memory_file              PROTO((const char *, const char *));\n-static int search_in_list                   PROTO((tree, tree));\n-static int really_grant_this                PROTO((tree, tree));\n+static MYSTRING *decode_decl                PARAMS ((tree));\n+static MYSTRING *decode_constant            PARAMS ((tree));\n+static void      grant_one_decl             PARAMS ((tree));\n+static MYSTRING *get_type                   PARAMS ((tree));\n+static MYSTRING *decode_mode                PARAMS ((tree));\n+static MYSTRING *decode_prefix_rename       PARAMS ((tree));\n+static MYSTRING *decode_constant_selective  PARAMS ((tree, tree));\n+static MYSTRING *decode_mode_selective      PARAMS ((tree, tree));\n+static MYSTRING *get_type_selective         PARAMS ((tree, tree));\n+static MYSTRING *decode_decl_selective      PARAMS ((tree, tree));\n+static MYSTRING *newstring                  PARAMS ((const char *));\n+static void strfree                         PARAMS ((MYSTRING *));\n+static MYSTRING *append                     PARAMS ((MYSTRING *, const char *));\n+static MYSTRING *prepend                    PARAMS ((MYSTRING *, const char *));\n+static void grant_use_seizefile             PARAMS ((const char *));\n+static MYSTRING *decode_layout              PARAMS ((tree));\n+static MYSTRING *grant_array_type           PARAMS ((tree));\n+static MYSTRING *grant_array_type_selective PARAMS ((tree, tree));\n+static MYSTRING *get_tag_value              PARAMS ((tree));\n+static MYSTRING *get_tag_value_selective    PARAMS ((tree, tree));\n+static MYSTRING *print_enumeral             PARAMS ((tree));\n+static MYSTRING *print_enumeral_selective   PARAMS ((tree, tree));\n+static MYSTRING *print_integer_type         PARAMS ((tree));\n+static tree find_enum_parent                PARAMS ((tree, tree));\n+static MYSTRING *print_integer_selective    PARAMS ((tree, tree));\n+static MYSTRING *print_struct               PARAMS ((tree));\n+static MYSTRING *print_struct_selective     PARAMS ((tree, tree));\n+static MYSTRING *print_proc_exceptions      PARAMS ((tree));\n+static MYSTRING *print_proc_tail            PARAMS ((tree, tree, int));\n+static MYSTRING *print_proc_tail_selective  PARAMS ((tree, tree, tree));\n+static tree find_in_decls                   PARAMS ((tree, tree));\n+static int in_ridpointers                   PARAMS ((tree));\n+static void grant_seized_identifier         PARAMS ((tree));\n+static void globalize_decl                  PARAMS ((tree));\n+static void grant_one_decl_selective        PARAMS ((tree, tree));\n+static int compare_memory_file              PARAMS ((const char *, const char *));\n+static int search_in_list                   PARAMS ((tree, tree));\n+static int really_grant_this                PARAMS ((tree, tree));\n \n /* list of the VAR_DECLs of the module initializer entries */\n tree      module_init_list = NULL_TREE;"}, {"sha": "ad5f971f2987582675dc0ae819de3612a28f988c", "filename": "gcc/ch/inout.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Finout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Finout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Finout.c?ref=3b0d91ff929f16828833bb2fe336a2ba458ebf65", "patch": "@@ -35,26 +35,26 @@ extern int ignore_case;\n /* set non-zero if special words are to be entered in uppercase */\n extern int special_UC;\n \n-static int intsize_of_charsexpr\t\tPROTO ((tree));\n-static tree add_enum_to_list\t\tPROTO ((tree, tree));\n-static void build_chill_io_list_type\tPROTO ((void));\n-static void build_io_types\t\tPROTO ((void));\n-static void declare_predefined_file\tPROTO ((const char *, const char *));\n-static tree build_access_part\t        PROTO ((void));\n-static tree textlocation_mode\t\tPROTO ((tree));\n-static int check_assoc\t\t\tPROTO ((tree, int, const char *));\n-static tree assoc_call\t\t\tPROTO ((tree, tree, const char *));\n-static int check_transfer\t\tPROTO ((tree, int, const char *));\n-static int connect_process_optionals\tPROTO ((tree, tree *, tree *, tree));\n-static tree connect_text\t\tPROTO ((tree, tree, tree, tree));\n-static tree connect_access\t\tPROTO ((tree, tree, tree, tree));\n-static int check_access\t\t\tPROTO ((tree, int, const char *));\n-static int check_text\t\t\tPROTO ((tree, int, const char *));\n-static tree get_final_type_and_range\tPROTO ((tree, tree *, tree *));\n-static void process_io_list\t\tPROTO ((tree, tree *, tree *, rtx *,\n+static int intsize_of_charsexpr\t\tPARAMS ((tree));\n+static tree add_enum_to_list\t\tPARAMS ((tree, tree));\n+static void build_chill_io_list_type\tPARAMS ((void));\n+static void build_io_types\t\tPARAMS ((void));\n+static void declare_predefined_file\tPARAMS ((const char *, const char *));\n+static tree build_access_part\t        PARAMS ((void));\n+static tree textlocation_mode\t\tPARAMS ((tree));\n+static int check_assoc\t\t\tPARAMS ((tree, int, const char *));\n+static tree assoc_call\t\t\tPARAMS ((tree, tree, const char *));\n+static int check_transfer\t\tPARAMS ((tree, int, const char *));\n+static int connect_process_optionals\tPARAMS ((tree, tree *, tree *, tree));\n+static tree connect_text\t\tPARAMS ((tree, tree, tree, tree));\n+static tree connect_access\t\tPARAMS ((tree, tree, tree, tree));\n+static int check_access\t\t\tPARAMS ((tree, int, const char *));\n+static int check_text\t\t\tPARAMS ((tree, int, const char *));\n+static tree get_final_type_and_range\tPARAMS ((tree, tree *, tree *));\n+static void process_io_list\t\tPARAMS ((tree, tree *, tree *, rtx *,\n \t\t\t\t\t\tint, int));\n-static void check_format_string\t\tPROTO ((tree, tree, int));\n-static int get_max_size\t\t\tPROTO ((tree));\n+static void check_format_string\t\tPARAMS ((tree, tree, int));\n+static int get_max_size\t\t\tPARAMS ((tree));\n \n /* association mode */\n tree association_type_node;\n@@ -3807,7 +3807,7 @@ typedef enum\n } convcode_t;\n static convcode_t     convcode;\n \n-static tree check_exprlist\t\tPROTO ((convcode_t, tree, int,\n+static tree check_exprlist\t\tPARAMS ((convcode_t, tree, int,\n \t\t\t\t\t\tunsigned long));\n \n typedef enum\n@@ -3844,7 +3844,7 @@ typedef enum {\n   NormalEnd, EndAtParen, TextFailEnd \n } formatexit_t;\n \n-static formatexit_t scanformcont\tPROTO ((char *, int, char **, int *,\n+static formatexit_t scanformcont\tPARAMS ((char *, int, char **, int *,\n \t\t\t\t\t\ttree, tree *, int, int *));\n \n /* NOTE: varibale have to be set to False before calling check_format_string */"}, {"sha": "fdc7f4ca2a3d652ce4cc8538a9a2809d80005999", "filename": "gcc/ch/lang.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Flang.c?ref=3b0d91ff929f16828833bb2fe336a2ba458ebf65", "patch": "@@ -52,8 +52,8 @@ extern FILE* finput;\n \n extern int maximum_field_alignment;\n \n-static int deep_const_expr\t\t\tPROTO ((tree));\n-static void chill_print_error_function\t\tPROTO ((const char *));\n+static int deep_const_expr\t\t\tPARAMS ((tree));\n+static void chill_print_error_function\t\tPARAMS ((const char *));\n \f\n /* return 1 if the expression tree given has all\n    constant nodes as its leaves; return 0 otherwise. */"}, {"sha": "21a9aa0d60e2b68851513cb31d7b1fb3c39627a0", "filename": "gcc/ch/lex.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Flex.c?ref=3b0d91ff929f16828833bb2fe336a2ba458ebf65", "patch": "@@ -68,26 +68,26 @@ extern struct obstack permanent_obstack;\n extern struct obstack temporary_obstack;\n \n /* forward declarations */\n-static void close_input_file         PROTO((const char *));\n-static tree convert_bitstring        PROTO((char *));\n-static tree convert_integer          PROTO((char *));\n-static void maybe_downcase           PROTO((char *));\n-static int  maybe_number             PROTO((const char *));\n-static tree equal_number             PROTO((void));\n-static void handle_use_seizefile_directive PROTO((int));\n-static int  handle_name\t\t     PROTO((tree));\n-static char *readstring              PROTO((int, int *));\n-static void read_directive\t     PROTO((void));\n-static tree read_identifier\t     PROTO((int));\n-static tree read_number              PROTO((int));\n-static void skip_c_comment           PROTO((void));\n-static void skip_line_comment        PROTO((void));\n-static int  skip_whitespace          PROTO((void));\n-static tree string_or_char           PROTO((int, const char *));\n-static void ch_lex_init              PROTO((void));\n-static void skip_directive           PROTO((void));\n-static int same_file                 PROTO((const char *, const char *));\n-static int getlc                     PROTO((FILE *));\n+static void close_input_file         PARAMS ((const char *));\n+static tree convert_bitstring        PARAMS ((char *));\n+static tree convert_integer          PARAMS ((char *));\n+static void maybe_downcase           PARAMS ((char *));\n+static int  maybe_number             PARAMS ((const char *));\n+static tree equal_number             PARAMS ((void));\n+static void handle_use_seizefile_directive PARAMS ((int));\n+static int  handle_name\t\t     PARAMS ((tree));\n+static char *readstring              PARAMS ((int, int *));\n+static void read_directive\t     PARAMS ((void));\n+static tree read_identifier\t     PARAMS ((int));\n+static tree read_number              PARAMS ((int));\n+static void skip_c_comment           PARAMS ((void));\n+static void skip_line_comment        PARAMS ((void));\n+static int  skip_whitespace          PARAMS ((void));\n+static tree string_or_char           PARAMS ((int, const char *));\n+static void ch_lex_init              PARAMS ((void));\n+static void skip_directive           PARAMS ((void));\n+static int same_file                 PARAMS ((const char *, const char *));\n+static int getlc                     PARAMS ((FILE *));\n \n /* next variables are public, because ch-actions uses them */\n \n@@ -294,8 +294,8 @@ finish_parse ()\n     fclose (finput);\n }\n \f\n-static int yywrap PROTO ((void));\n-static int yy_refill PROTO ((void));\n+static int yywrap PARAMS ((void));\n+static int yy_refill PARAMS ((void));\n \n #define YY_PUTBACK_SIZE 5\n #define YY_BUF_SIZE 1000"}, {"sha": "466ba285db6f1f816e4e14725ea4828f742cbcd7", "filename": "gcc/ch/lex.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Flex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Flex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Flex.h?ref=3b0d91ff929f16828833bb2fe336a2ba458ebf65", "patch": "@@ -82,9 +82,9 @@ extern tree ridpointers[(int) RID_MAX];\n \n extern char *token_buffer;\t/* Pointer to token buffer.  */\n \n-extern tree make_pointer_declarator PROTO((tree, tree));\n-extern void reinit_parse_for_function PROTO((void));\n-extern int yylex PROTO((void));\n+extern tree make_pointer_declarator PARAMS ((tree, tree));\n+extern void reinit_parse_for_function PARAMS ((void));\n+extern int yylex PARAMS ((void));\n \n extern tree default_grant_file;\n extern tree current_grant_file;\n@@ -94,4 +94,4 @@ extern tree current_seize_file;\n extern int chill_at_module_level;\n extern tree chill_initializer_name;\n \n-extern void prepare_paren_colon PROTO((void));\n+extern void prepare_paren_colon PARAMS ((void));"}, {"sha": "c23138ad0ee2827a8264231919905aabffb2d35f", "filename": "gcc/ch/loop.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Floop.c?ref=3b0d91ff929f16828833bb2fe336a2ba458ebf65", "patch": "@@ -36,15 +36,15 @@ Boston, MA 02111-1307, USA.  */\n int flag_local_loop_counter = 1;\n \n /* forward declarations */\n-static int  declare_temps            PROTO((void));\n-static int  initialize_iter_var      PROTO((void));\n-static void maybe_skip_loop          PROTO((void));\n-static int  bottom_loop_end_check    PROTO((void));\n-static int  increment_temps          PROTO((void));\n-static tree build_temporary_variable PROTO((const char *, tree));\n-static tree maybe_make_for_temp      PROTO((tree, const char *, tree));\n+static int  declare_temps            PARAMS ((void));\n+static int  initialize_iter_var      PARAMS ((void));\n+static void maybe_skip_loop          PARAMS ((void));\n+static int  bottom_loop_end_check    PARAMS ((void));\n+static int  increment_temps          PARAMS ((void));\n+static tree build_temporary_variable PARAMS ((const char *, tree));\n+static tree maybe_make_for_temp      PARAMS ((tree, const char *, tree));\n #if 0\n-static tree chill_unsigned_type      PROTO((tree));\n+static tree chill_unsigned_type      PARAMS ((tree));\n #endif\n \f\n /* In terms of the parameters passed to build_loop_iterator,"}, {"sha": "0bd935200eb48908fbe78f8430bce1ba6b5bc297", "filename": "gcc/ch/nloop.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Fnloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Fnloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fnloop.c?ref=3b0d91ff929f16828833bb2fe336a2ba458ebf65", "patch": "@@ -35,26 +35,26 @@ Boston, MA 02111-1307, USA.  */\n    ch-actions.c (lang_decode_option) will set this flag. */\n int flag_local_loop_counter = 0;\n \n-extern tree chill_truthvalue_conversion PROTO((tree));\n-extern rtx  emit_line_note              PROTO((char *, int)); \n-extern void error                       PROTO((char *, ...));\n-extern rtx  expand_assignment           PROTO((tree, tree, int, int));\n-extern void save_expr_under_name        PROTO((tree, tree));\n-extern void stamp_nesting_label         PROTO((tree));\n-extern int  int_fits_type_p             PROTO((tree, tree));\n-extern void warning                     PROTO((char *, ...));\n+extern tree chill_truthvalue_conversion PARAMS ((tree));\n+extern rtx  emit_line_note              PARAMS ((char *, int)); \n+extern void error                       PARAMS ((char *, ...));\n+extern rtx  expand_assignment           PARAMS ((tree, tree, int, int));\n+extern void save_expr_under_name        PARAMS ((tree, tree));\n+extern void stamp_nesting_label         PARAMS ((tree));\n+extern int  int_fits_type_p             PARAMS ((tree, tree));\n+extern void warning                     PARAMS ((char *, ...));\n \n /* forward declarations */\n-static int  classify_loop            PROTO((void));\n-static int  declare_temps            PROTO((void));\n-static int  initialize_iter_var      PROTO((void));\n-static int  maybe_skip_loop          PROTO((void));\n-static int  top_loop_end_check       PROTO((void));\n-static int  bottom_loop_end_check    PROTO((void));\n-static int  increment_temps          PROTO((void));\n-static tree build_temporary_variable PROTO((char *, tree));\n-static tree maybe_make_for_temp      PROTO((tree, char *, tree));\n-static tree chill_unsigned_type      PROTO((tree));\n+static int  classify_loop            PARAMS ((void));\n+static int  declare_temps            PARAMS ((void));\n+static int  initialize_iter_var      PARAMS ((void));\n+static int  maybe_skip_loop          PARAMS ((void));\n+static int  top_loop_end_check       PARAMS ((void));\n+static int  bottom_loop_end_check    PARAMS ((void));\n+static int  increment_temps          PARAMS ((void));\n+static tree build_temporary_variable PARAMS ((char *, tree));\n+static tree maybe_make_for_temp      PARAMS ((tree, char *, tree));\n+static tree chill_unsigned_type      PARAMS ((tree));\n \f\n /* In terms of the parameters passed to build_loop_iterator,\n  *   there are several types of loops.  They are encoded by"}, {"sha": "a2cad5ba78875eea4455d0c5c6f9c46a0ee128b3", "filename": "gcc/ch/parse.c", "status": "modified", "additions": 125, "deletions": 125, "changes": 250, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fparse.c?ref=3b0d91ff929f16828833bb2fe336a2ba458ebf65", "patch": "@@ -70,28 +70,28 @@ const char * const language_string = \"GNU CHILL\";\n /* Cause the `yydebug' variable to be defined.  */\n #define YYDEBUG 1\n \n-extern struct rtx_def* gen_label_rtx\t      PROTO((void));\n-extern void emit_jump                         PROTO((struct rtx_def *));\n-extern struct rtx_def* emit_label             PROTO((struct rtx_def *));\n+extern struct rtx_def* gen_label_rtx\t      PARAMS ((void));\n+extern void emit_jump                         PARAMS ((struct rtx_def *));\n+extern struct rtx_def* emit_label             PARAMS ((struct rtx_def *));\n \n /* This is a hell of a lot easier than getting expr.h included in\n    by parse.c.  */\n-extern struct rtx_def *expand_expr  \tPROTO((tree, struct rtx_def *,\n+extern struct rtx_def *expand_expr  \tPARAMS ((tree, struct rtx_def *,\n \t\t\t\t\t       enum machine_mode, int));\n \n-static int parse_action\t\t\t\tPROTO((void));\n-static void ch_parse_init\t\t\tPROTO((void));\n-static void check_end_label\t\t\tPROTO((tree, tree));\n-static void end_function       \t\t\tPROTO((void));\n-static tree build_prefix_clause\t\t\tPROTO((tree));\n-static enum terminal PEEK_TOKEN\t\t\tPROTO((void));\n-static int peek_token_\t\t\t\tPROTO((int));\n-static void pushback_token\t\t\tPROTO((int, tree));\n-static void forward_token_\t\t\tPROTO((void));\n-static void require\t\t\t\tPROTO((enum terminal));\n-static int check_token\t\t\t\tPROTO((enum terminal));\n-static int expect\t\t\t\tPROTO((enum terminal, const char *));\n-static void define__PROCNAME__\t\t\tPROTO((void));\n+static int parse_action\t\t\t\tPARAMS ((void));\n+static void ch_parse_init\t\t\tPARAMS ((void));\n+static void check_end_label\t\t\tPARAMS ((tree, tree));\n+static void end_function       \t\t\tPARAMS ((void));\n+static tree build_prefix_clause\t\t\tPARAMS ((tree));\n+static enum terminal PEEK_TOKEN\t\t\tPARAMS ((void));\n+static int peek_token_\t\t\t\tPARAMS ((int));\n+static void pushback_token\t\t\tPARAMS ((int, tree));\n+static void forward_token_\t\t\tPARAMS ((void));\n+static void require\t\t\t\tPARAMS ((enum terminal));\n+static int check_token\t\t\t\tPARAMS ((enum terminal));\n+static int expect\t\t\t\tPARAMS ((enum terminal, const char *));\n+static void define__PROCNAME__\t\t\tPARAMS ((void));\n \n extern int  lineno;\n extern char *input_filename;\n@@ -386,114 +386,114 @@ define__PROCNAME__ ()\n }\n \n /* Forward declarations. */\n-static tree parse_expression PROTO((void));\n-static tree parse_primval PROTO((void));\n-static tree parse_mode PROTO((void));\n-static tree parse_opt_mode PROTO((void));\n-static tree parse_untyped_expr PROTO((void));\n-static tree parse_opt_untyped_expr PROTO((void));\n-static int parse_definition PROTO((int));\n-static void parse_opt_actions PROTO((void));\n-static void parse_body PROTO((void));\n-static tree parse_if_expression_body PROTO((void));\n-static tree parse_opt_handler PROTO((void));\n-static tree parse_opt_name_string PROTO((int));\n-static tree parse_simple_name_string PROTO((void));\n-static tree parse_name_string PROTO((void));\n-static tree parse_defining_occurrence PROTO((void));\n-static tree parse_name PROTO((void));\n-static tree parse_optlabel PROTO((void));\n-static void parse_opt_end_label_semi_colon PROTO((tree));\n-static void parse_modulion PROTO((tree));\n-static void parse_spec_module PROTO((tree));\n-static void parse_semi_colon PROTO((void));\n-static tree parse_defining_occurrence_list PROTO((void));\n-static void parse_mode_definition PROTO((int));\n-static void parse_mode_definition_statement PROTO((int));\n-static void parse_synonym_definition PROTO((void));\n-static void parse_synonym_definition_statement PROTO((void));\n-static tree parse_on_exception_list PROTO((void));\n-static void parse_on_alternatives PROTO((void));\n-static void parse_loc_declaration PROTO((int));\n-static void parse_declaration_statement PROTO((int));\n-static tree parse_optforbid PROTO((void));\n-static tree parse_postfix PROTO((enum terminal));\n-static tree parse_postfix_list PROTO((enum terminal));\n-static void parse_rename_clauses PROTO((enum terminal));\n-static tree parse_opt_prefix_clause PROTO((void));\n-static void parse_grant_statement PROTO((void));\n-static void parse_seize_statement PROTO((void));\n-static tree parse_param_name_list PROTO((void));\n-static tree parse_param_attr PROTO((void));\n-static tree parse_formpar PROTO((void));\n-static tree parse_formparlist PROTO((void));\n-static tree parse_opt_result_spec PROTO((void));\n-static tree parse_opt_except PROTO((void));\n-static tree parse_opt_recursive PROTO((void));\n-static tree parse_procedureattr PROTO((void));\n-static void parse_proc_body PROTO((tree, tree));\n-static void parse_procedure_definition PROTO((int));\n-static tree parse_processpar PROTO((void));\n-static tree parse_processparlist PROTO((void));\n-static void parse_process_definition PROTO((int));\n-static void parse_signal_definition PROTO((void));\n-static void parse_signal_definition_statement PROTO((void));\n-static void parse_then_clause PROTO((void));\n-static void parse_opt_else_clause PROTO((void));\n-static tree parse_expr_list PROTO((void));\n-static tree parse_range_list_clause PROTO((void));\n-static void pushback_paren_expr PROTO((tree));\n-static tree parse_case_label PROTO((void));\n-static tree parse_case_label_list PROTO((tree, int));\n-static tree parse_case_label_specification PROTO((tree));\n-static void parse_single_dimension_case_action PROTO((tree));\n-static void parse_multi_dimension_case_action PROTO((tree));\n-static void parse_case_action PROTO((tree));\n-static tree parse_asm_operands PROTO((void));\n-static tree parse_asm_clobbers PROTO((void));\n-static void ch_expand_asm_operands PROTO((tree, tree, tree, tree, int, char *, int));\n-static void parse_asm_action PROTO((void));\n-static void parse_begin_end_block PROTO((tree));\n-static void parse_if_action PROTO((tree));\n-static void parse_iteration PROTO((void));\n-static tree parse_delay_case_event_list PROTO((void));\n-static void parse_delay_case_action PROTO((tree));\n-static void parse_do_action PROTO((tree));\n-static tree parse_receive_spec PROTO((void));\n-static void parse_receive_case_action PROTO((tree));\n-static void parse_send_action PROTO((void));\n-static void parse_start_action PROTO((void));\n-static tree parse_call PROTO((tree));\n-static tree parse_tuple_fieldname_list PROTO((void));\n-static tree parse_tuple_element PROTO((void));\n-static tree parse_opt_element_list PROTO((void));\n-static tree parse_tuple PROTO((tree));\n-static tree parse_operand6 PROTO((void));\n-static tree parse_operand5 PROTO((void));\n-static tree parse_operand4 PROTO((void));\n-static tree parse_operand3 PROTO((void));\n-static tree parse_operand2 PROTO((void));\n-static tree parse_operand1 PROTO((void));\n-static tree parse_operand0 PROTO((void));\n-static tree parse_case_expression PROTO((void));\n-static tree parse_then_alternative PROTO((void));\n-static tree parse_else_alternative PROTO((void));\n-static tree parse_if_expression PROTO((void));\n-static tree parse_index_mode PROTO((void));\n-static tree parse_set_mode PROTO((void));\n-static tree parse_pos PROTO((void));\n-static tree parse_step PROTO((void));\n-static tree parse_opt_layout PROTO((int));\n-static tree parse_field_name_list PROTO((void));\n-static tree parse_fixed_field PROTO((void));\n-static tree parse_variant_field_list PROTO((void));\n-static tree parse_variant_alternative PROTO((void));\n-static tree parse_field PROTO((void));\n-static tree parse_structure_mode PROTO((void));\n-static tree parse_opt_queue_size PROTO((void));\n-static tree parse_procedure_mode PROTO((void));\n-static void parse_program PROTO((void));\n-static void parse_pass_1_2 PROTO((void));\n+static tree parse_expression PARAMS ((void));\n+static tree parse_primval PARAMS ((void));\n+static tree parse_mode PARAMS ((void));\n+static tree parse_opt_mode PARAMS ((void));\n+static tree parse_untyped_expr PARAMS ((void));\n+static tree parse_opt_untyped_expr PARAMS ((void));\n+static int parse_definition PARAMS ((int));\n+static void parse_opt_actions PARAMS ((void));\n+static void parse_body PARAMS ((void));\n+static tree parse_if_expression_body PARAMS ((void));\n+static tree parse_opt_handler PARAMS ((void));\n+static tree parse_opt_name_string PARAMS ((int));\n+static tree parse_simple_name_string PARAMS ((void));\n+static tree parse_name_string PARAMS ((void));\n+static tree parse_defining_occurrence PARAMS ((void));\n+static tree parse_name PARAMS ((void));\n+static tree parse_optlabel PARAMS ((void));\n+static void parse_opt_end_label_semi_colon PARAMS ((tree));\n+static void parse_modulion PARAMS ((tree));\n+static void parse_spec_module PARAMS ((tree));\n+static void parse_semi_colon PARAMS ((void));\n+static tree parse_defining_occurrence_list PARAMS ((void));\n+static void parse_mode_definition PARAMS ((int));\n+static void parse_mode_definition_statement PARAMS ((int));\n+static void parse_synonym_definition PARAMS ((void));\n+static void parse_synonym_definition_statement PARAMS ((void));\n+static tree parse_on_exception_list PARAMS ((void));\n+static void parse_on_alternatives PARAMS ((void));\n+static void parse_loc_declaration PARAMS ((int));\n+static void parse_declaration_statement PARAMS ((int));\n+static tree parse_optforbid PARAMS ((void));\n+static tree parse_postfix PARAMS ((enum terminal));\n+static tree parse_postfix_list PARAMS ((enum terminal));\n+static void parse_rename_clauses PARAMS ((enum terminal));\n+static tree parse_opt_prefix_clause PARAMS ((void));\n+static void parse_grant_statement PARAMS ((void));\n+static void parse_seize_statement PARAMS ((void));\n+static tree parse_param_name_list PARAMS ((void));\n+static tree parse_param_attr PARAMS ((void));\n+static tree parse_formpar PARAMS ((void));\n+static tree parse_formparlist PARAMS ((void));\n+static tree parse_opt_result_spec PARAMS ((void));\n+static tree parse_opt_except PARAMS ((void));\n+static tree parse_opt_recursive PARAMS ((void));\n+static tree parse_procedureattr PARAMS ((void));\n+static void parse_proc_body PARAMS ((tree, tree));\n+static void parse_procedure_definition PARAMS ((int));\n+static tree parse_processpar PARAMS ((void));\n+static tree parse_processparlist PARAMS ((void));\n+static void parse_process_definition PARAMS ((int));\n+static void parse_signal_definition PARAMS ((void));\n+static void parse_signal_definition_statement PARAMS ((void));\n+static void parse_then_clause PARAMS ((void));\n+static void parse_opt_else_clause PARAMS ((void));\n+static tree parse_expr_list PARAMS ((void));\n+static tree parse_range_list_clause PARAMS ((void));\n+static void pushback_paren_expr PARAMS ((tree));\n+static tree parse_case_label PARAMS ((void));\n+static tree parse_case_label_list PARAMS ((tree, int));\n+static tree parse_case_label_specification PARAMS ((tree));\n+static void parse_single_dimension_case_action PARAMS ((tree));\n+static void parse_multi_dimension_case_action PARAMS ((tree));\n+static void parse_case_action PARAMS ((tree));\n+static tree parse_asm_operands PARAMS ((void));\n+static tree parse_asm_clobbers PARAMS ((void));\n+static void ch_expand_asm_operands PARAMS ((tree, tree, tree, tree, int, char *, int));\n+static void parse_asm_action PARAMS ((void));\n+static void parse_begin_end_block PARAMS ((tree));\n+static void parse_if_action PARAMS ((tree));\n+static void parse_iteration PARAMS ((void));\n+static tree parse_delay_case_event_list PARAMS ((void));\n+static void parse_delay_case_action PARAMS ((tree));\n+static void parse_do_action PARAMS ((tree));\n+static tree parse_receive_spec PARAMS ((void));\n+static void parse_receive_case_action PARAMS ((tree));\n+static void parse_send_action PARAMS ((void));\n+static void parse_start_action PARAMS ((void));\n+static tree parse_call PARAMS ((tree));\n+static tree parse_tuple_fieldname_list PARAMS ((void));\n+static tree parse_tuple_element PARAMS ((void));\n+static tree parse_opt_element_list PARAMS ((void));\n+static tree parse_tuple PARAMS ((tree));\n+static tree parse_operand6 PARAMS ((void));\n+static tree parse_operand5 PARAMS ((void));\n+static tree parse_operand4 PARAMS ((void));\n+static tree parse_operand3 PARAMS ((void));\n+static tree parse_operand2 PARAMS ((void));\n+static tree parse_operand1 PARAMS ((void));\n+static tree parse_operand0 PARAMS ((void));\n+static tree parse_case_expression PARAMS ((void));\n+static tree parse_then_alternative PARAMS ((void));\n+static tree parse_else_alternative PARAMS ((void));\n+static tree parse_if_expression PARAMS ((void));\n+static tree parse_index_mode PARAMS ((void));\n+static tree parse_set_mode PARAMS ((void));\n+static tree parse_pos PARAMS ((void));\n+static tree parse_step PARAMS ((void));\n+static tree parse_opt_layout PARAMS ((int));\n+static tree parse_field_name_list PARAMS ((void));\n+static tree parse_fixed_field PARAMS ((void));\n+static tree parse_variant_field_list PARAMS ((void));\n+static tree parse_variant_alternative PARAMS ((void));\n+static tree parse_field PARAMS ((void));\n+static tree parse_structure_mode PARAMS ((void));\n+static tree parse_opt_queue_size PARAMS ((void));\n+static tree parse_procedure_mode PARAMS ((void));\n+static void parse_program PARAMS ((void));\n+static void parse_pass_1_2 PARAMS ((void));\n \n static tree\n parse_opt_name_string (allow_all)"}, {"sha": "6e7e7363f385191c160117b227b00823225bbb27", "filename": "gcc/ch/satisfy.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Fsatisfy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Fsatisfy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fsatisfy.c?ref=3b0d91ff929f16828833bb2fe336a2ba458ebf65", "patch": "@@ -36,11 +36,11 @@ struct decl_chain\n };\n \n /* forward declarations */\n-static tree satisfy\t\tPROTO ((tree, struct decl_chain *));\n-static void cycle_error_print\tPROTO ((struct decl_chain *, tree));\n-static tree safe_satisfy_decl\tPROTO ((tree, struct decl_chain *));\n-static void satisfy_list\tPROTO ((tree, struct decl_chain *));\n-static void satisfy_list_values\tPROTO ((tree, struct decl_chain *));\n+static tree satisfy\t\tPARAMS ((tree, struct decl_chain *));\n+static void cycle_error_print\tPARAMS ((struct decl_chain *, tree));\n+static tree safe_satisfy_decl\tPARAMS ((tree, struct decl_chain *));\n+static void satisfy_list\tPARAMS ((tree, struct decl_chain *));\n+static void satisfy_list_values\tPARAMS ((tree, struct decl_chain *));\n \n static struct decl_chain dummy_chain;\n #define LOOKUP_ONLY (chain==&dummy_chain)"}, {"sha": "eb6465dbeea95971fc13b28a98d6c4f058e4ea29", "filename": "gcc/ch/tasking.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Ftasking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Ftasking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Ftasking.c?ref=3b0d91ff929f16828833bb2fe336a2ba458ebf65", "patch": "@@ -45,18 +45,18 @@ tree chill_taskingcode_type_node;\n \n /* forward declarations */\n #if 0\n-static void validate_process_parameters\t\tPROTO((tree));\n-static tree get_struct_variable_name\t\tPROTO((tree));\n-static tree decl_tasking_code_variable\t\tPROTO((tree, tree *, int));\n+static void validate_process_parameters\t\tPARAMS ((tree));\n+static tree get_struct_variable_name\t\tPARAMS ((tree));\n+static tree decl_tasking_code_variable\t\tPARAMS ((tree, tree *, int));\n #endif\n-static tree get_struct_debug_type_name\t\tPROTO((tree));\n-static tree get_process_wrapper_name\t\tPROTO((tree));\n-static tree build_tasking_enum\t\t\tPROTO((void));\n-static void build_tasking_message_type\t\tPROTO((void));\n-static tree build_receive_signal_case_label\tPROTO((tree, tree));\n-static tree build_receive_buffer_case_label\tPROTO((tree, tree));\n-static void build_receive_buffer_case_end\tPROTO((tree, tree));\n-static void build_receive_signal_case_end\tPROTO((tree, tree));\n+static tree get_struct_debug_type_name\t\tPARAMS ((tree));\n+static tree get_process_wrapper_name\t\tPARAMS ((tree));\n+static tree build_tasking_enum\t\t\tPARAMS ((void));\n+static void build_tasking_message_type\t\tPARAMS ((void));\n+static tree build_receive_signal_case_label\tPARAMS ((tree, tree));\n+static tree build_receive_buffer_case_label\tPARAMS ((tree, tree));\n+static void build_receive_buffer_case_end\tPARAMS ((tree, tree));\n+static void build_receive_signal_case_end\tPARAMS ((tree, tree));\n \n /* list of this module's process, buffer, etc. decls.\n  This is a list of TREE_VECs, chain by their TREE_CHAINs. */"}, {"sha": "17cbd8ef52d1c0b184f1b7615b000d8e081a5daa", "filename": "gcc/ch/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Ftree.c?ref=3b0d91ff929f16828833bb2fe336a2ba458ebf65", "patch": "@@ -34,7 +34,7 @@ extern struct obstack permanent_obstack;\n    to layout_chill_range_type for the index range of a string. */\n tree string_index_type_dummy;\n \n-static tree make_powerset_type\t\t\t\tPROTO ((tree));\n+static tree make_powerset_type\t\t\t\tPARAMS ((tree));\n \f\n /* Build a chill string type.\n    For a character string, ELT_TYPE==char_type_node; "}, {"sha": "fd91227a0f080fa639bfa0f76ba9ec56df4891c6", "filename": "gcc/ch/typeck.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0d91ff929f16828833bb2fe336a2ba458ebf65/gcc%2Fch%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Ftypeck.c?ref=3b0d91ff929f16828833bb2fe336a2ba458ebf65", "patch": "@@ -40,16 +40,16 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n \n /* forward declarations */\n-static int chill_l_equivalent PROTO((tree, tree, struct mode_chain*));\n-static tree extract_constant_from_buffer PROTO((tree, const unsigned char *, int));\n-static int expand_constant_to_buffer PROTO((tree, unsigned char *, int));\n-static tree build_empty_string PROTO((tree));\n-static tree make_chill_pointer_type PROTO((tree, enum tree_code));\n-static tree make_chill_range_type PROTO((tree, tree, tree));\n-static void apply_chill_array_layout PROTO((tree));\n-static int field_decl_cmp PROTO((tree *, tree*));\n-static tree make_chill_struct_type PROTO((tree));\n-static int apply_chill_field_layout PROTO((tree, int *));\n+static int chill_l_equivalent PARAMS ((tree, tree, struct mode_chain*));\n+static tree extract_constant_from_buffer PARAMS ((tree, const unsigned char *, int));\n+static int expand_constant_to_buffer PARAMS ((tree, unsigned char *, int));\n+static tree build_empty_string PARAMS ((tree));\n+static tree make_chill_pointer_type PARAMS ((tree, enum tree_code));\n+static tree make_chill_range_type PARAMS ((tree, tree, tree));\n+static void apply_chill_array_layout PARAMS ((tree));\n+static int field_decl_cmp PARAMS ((tree *, tree*));\n+static tree make_chill_struct_type PARAMS ((tree));\n+static int apply_chill_field_layout PARAMS ((tree, int *));\n \f\n /*\n  * This function checks an array access.\n@@ -3292,7 +3292,7 @@ layout_chill_struct_type (t)\n \t  field_array[len++] = x;\n \n \tqsort (field_array, len, sizeof (tree),\n-\t       (int (*) PROTO ((const void *, const void *))) field_decl_cmp);\n+\t       (int (*) PARAMS ((const void *, const void *))) field_decl_cmp);\n       }\n   }\n "}]}