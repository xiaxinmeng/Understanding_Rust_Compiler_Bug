{"sha": "263ee052390366c2476124b43a53cec7e5540187", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYzZWUwNTIzOTAzNjZjMjQ3NjEyNGI0M2E1M2NlYzdlNTU0MDE4Nw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-12-16T16:09:23Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-12-16T16:09:23Z"}, "message": "re PR c++/13275 (Implementation of offsetof macro)\n\n\tPR c++/13275\n\t* c-common.h (enum rid): Add RID_OFFSETOF.\n\t* c-parser.in (rid_to_yy): Ignore RID_OFFSETOF.\n\t* ginclude/stddef.h (offsetof): Reimplement for C++, using\n\t__offsetof__.\n\t* doc/extend.texi: Document __offsetof__.\n\n\tPR c++/13275\n\t* lex.c (reswords): Add \"__offsetof\" and \"__offsetof__\".\n\t* parser.c (cp_parser): Add in_offsetof_p.\n\t(cp_parser_new): Initialize it.\n\t(cp_parser_primary_expression): Handle __offsetof__ (...).\n\t(cp_parser_postfix_expression): Allow casts to pointer type and\n\tuses of \"->\" in a constant expression if implementing offsetof.\n\t(cp_parser_unary_expression): Allow the use of \"&\" in a constant\n\texpression if implementing offsetof.\n\n\tPR c++/13275\n\t* g++.dg/other/offsetof2.C: Remove XFAIL.\n\t* g++.dg/parse/offsetof1.C: New test.\n\t* g++.gd/parse/offsetof2.C: Likewise.\n\nFrom-SVN: r74702", "tree": {"sha": "2b4a4284864e77f0905c40d1a718bb9eb360f8ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b4a4284864e77f0905c40d1a718bb9eb360f8ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/263ee052390366c2476124b43a53cec7e5540187", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/263ee052390366c2476124b43a53cec7e5540187", "html_url": "https://github.com/Rust-GCC/gccrs/commit/263ee052390366c2476124b43a53cec7e5540187", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/263ee052390366c2476124b43a53cec7e5540187/comments", "author": null, "committer": null, "parents": [{"sha": "ff5034c5be89c496e39b79b52cd496130c51fdb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff5034c5be89c496e39b79b52cd496130c51fdb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff5034c5be89c496e39b79b52cd496130c51fdb2"}], "stats": {"total": 178, "additions": 143, "deletions": 35}, "files": [{"sha": "6b0eee4d5bf09b5abc5cb37a9aa8b4d265cfe207", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/263ee052390366c2476124b43a53cec7e5540187/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/263ee052390366c2476124b43a53cec7e5540187/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=263ee052390366c2476124b43a53cec7e5540187", "patch": "@@ -1,3 +1,12 @@\n+2003-12-16  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/13275\n+\t* c-common.h (enum rid): Add RID_OFFSETOF.\n+\t* c-parser.in (rid_to_yy): Ignore RID_OFFSETOF.\n+\t* ginclude/stddef.h (offsetof): Reimplement for C++, using\n+\t__offsetof__.\n+\t* doc/extend.texi: Document __offsetof__.\n+\t\n 2003-12-16  Stan Cox  <scox@redhat.com>\n \n \t* config/iq2000/iq2000.h: Formatting."}, {"sha": "28e8356004b73f9a331b4547abab273e0ed2721f", "filename": "gcc/c-common.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/263ee052390366c2476124b43a53cec7e5540187/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/263ee052390366c2476124b43a53cec7e5540187/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=263ee052390366c2476124b43a53cec7e5540187", "patch": "@@ -88,9 +88,10 @@ enum rid\n   RID_PUBLIC,   RID_PRIVATE,  RID_PROTECTED,\n   RID_TEMPLATE, RID_NULL,     RID_CATCH,\n   RID_DELETE,   RID_FALSE,    RID_NAMESPACE,\n-  RID_NEW,      RID_OPERATOR, RID_THIS,\n-  RID_THROW,    RID_TRUE,     RID_TRY,\n-  RID_TYPENAME, RID_TYPEID,   RID_USING,\n+  RID_NEW,      RID_OFFSETOF, RID_OPERATOR, \n+  RID_THIS,     RID_THROW,    RID_TRUE,     \n+  RID_TRY,      RID_TYPENAME, RID_TYPEID,   \n+  RID_USING,\n \n   /* casts */\n   RID_CONSTCAST, RID_DYNCAST, RID_REINTCAST, RID_STATCAST,"}, {"sha": "954c37067ffa99578f962d1d0e24842b2e7c0358", "filename": "gcc/c-parse.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/263ee052390366c2476124b43a53cec7e5540187/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/263ee052390366c2476124b43a53cec7e5540187/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=263ee052390366c2476124b43a53cec7e5540187", "patch": "@@ -3484,6 +3484,7 @@ static const short rid_to_yy[RID_MAX] =\n   /* RID_FALSE */\t0,\n   /* RID_NAMESPACE */\t0,\n   /* RID_NEW */\t\t0,\n+  /* RID_OFFSETOF */    0,\n   /* RID_OPERATOR */\t0,\n   /* RID_THIS */\t0,\n   /* RID_THROW */\t0,"}, {"sha": "31876c98145a8582c7230fe01ff530c28a5ceef9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/263ee052390366c2476124b43a53cec7e5540187/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/263ee052390366c2476124b43a53cec7e5540187/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=263ee052390366c2476124b43a53cec7e5540187", "patch": "@@ -1,3 +1,21 @@\n+2003-12-16  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/13275\n+\t* lex.c (reswords): Add \"__offsetof\" and \"__offsetof__\".\n+\t* parser.c (cp_parser): Add in_offsetof_p.\n+\t(cp_parser_new): Initialize it.\n+\t(cp_parser_primary_expression): Handle __offsetof__ (...).\n+\t(cp_parser_postfix_expression): Allow casts to pointer type and\n+\tuses of \"->\" in a constant expression if implementing offsetof.\n+\t(cp_parser_unary_expression): Allow the use of \"&\" in a constant\n+\texpression if implementing offsetof.\n+\n+2003-12-16  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\r\n+\r\n+\tPR c++/2294\r\n+\t* name-lookup.c (push_overloaded_decl): always construct an OVERLOAD\r\n+\tif the declaration comes from an using declaration.\r\n+\n 2003-12-16  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n \t* semantics.c (finish_id_expression): Refactor the code to handle\n@@ -17385,7 +17403,7 @@\n \t* parse.y (member_init): Just pass in the type.\n \t* init.c (expand_member_init): Handle getting a type.\n \n-2000-07-04  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n+2000-07-04  Martin v. L\u00f6wis  <loewis@informatik.hu-berlin.de>\n \t    Jason Merrill  <jason@redhat.com>\n \n \t* decl.c (finish_function): Warn if a function has no return\n@@ -17731,7 +17749,7 @@\n \t* decl.c (pushdecl): Don't set DECL_CONTEXT from current_namespace.\n \t(push_namespace): Set DECL_CONTEXT for a new NAMESPACE_DECL.\n \n-2000-06-24  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n+2000-06-24  Martin v. L\u00f6wis  <loewis@informatik.hu-berlin.de>\n \n \t* parse.y (complex_direct_notype_declarator): Support global_scope.\n \t* Makefile.in: Adjust conflict count.\n@@ -18916,7 +18934,7 @@\n \t* semantics.c (finish_member_declaration): Don't mark members of\n \tclasses declared in an extern \"C\" region as extern \"C\".\n \n-2000-05-22  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n+2000-05-22  Martin v. L\u00f6wis  <loewis@informatik.hu-berlin.de>\n \n \t* decl2.c (qualified_lookup_using_namespace): Look through\n \tnamespace aliases.\n@@ -19370,7 +19388,7 @@\n \n \t* ir.texi: Correct typo.\n \n-2000-04-25  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n+2000-04-25  Martin v. L\u00f6wis  <loewis@informatik.hu-berlin.de>\n \n \t* decl.c (grokdeclarator): Reject VLAs as members.\n \n@@ -19669,7 +19687,7 @@\n \t(interface_only): Don't declare.\n \t(interface_unknown): Likewise.\n \n-2000-04-11  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n+2000-04-11  Martin v. L\u00f6wis  <loewis@informatik.hu-berlin.de>\n \n \t* tree.h (HAVE_TEMPLATES): Remove definition.\n \t* lang-options.h (-fthis-is-variable): Remove documentation.\n@@ -19724,7 +19742,7 @@\n \t(__pointer_to_member_type_info::__do_catch): Remove.\n \t(__pointer_to_member_type_info::__pointer_catch): Implement.\n \n-2000-04-10  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n+2000-04-10  Martin v. L\u00f6wis  <loewis@informatik.hu-berlin.de>\n \n \t* lex.c (init_parse): Remove traces of classof and headof.\n \t* decl2.c (flag_operator_names): Default to 1.\n@@ -20437,7 +20455,7 @@ Wed Apr  5 15:12:18 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \t* init.c (build_offset_ref): Handle the case of a templated member\n \tfunction.\n \n-2000-03-19  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n+2000-03-19  Martin v. L\u00f6wis  <loewis@informatik.hu-berlin.de>\n \n \t* except.c (expand_exception_blocks): Clear catch_clauses_last.\n \n@@ -20463,7 +20481,7 @@ Wed Apr  5 15:12:18 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \t(layout_class_type): Implement new ABI handling of bitfields\n \tlonger than their types.\n \n-2000-03-18  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n+2000-03-18  Martin v. L\u00f6wis  <loewis@informatik.hu-berlin.de>\n \n \t* parse.y (extdefs): Call ggc_collect.\n \t* parse.c: Regenerated.\n@@ -21073,7 +21091,7 @@ Wed Apr  5 15:12:18 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \n \t* decl.c (decls_match): Remove obsolete static member nadgering.\n \n-2000-02-21  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n+2000-02-21  Martin v. L\u00f6wis  <loewis@informatik.hu-berlin.de>\n \n \t* decl.c (grokdeclarator): Change ANSI to ISO.\n \t* lex.c (consume_string, readescape, do_identifier): Likewise.\n@@ -22100,7 +22118,7 @@ Wed Apr  5 15:12:18 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \t* optimize.c (copy_body_r): Clear the operand three of a\n \tTARGET_EXPR when copying it.\n \n-2000-01-14  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n+2000-01-14  Martin v. L\u00f6wis  <loewis@informatik.hu-berlin.de>\n \n \t* method.c (build_decl_overload_real): Check whether we are in ::\n \tbefore returning __builtin_new/delete.\n@@ -22397,6 +22415,6 @@ Wed Apr  5 15:12:18 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \t(fixup_vtable_deltas1): Likewise.\n \t(finish_struct_1): Likewise.\n \n-2000-01-01  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n+2000-01-01  Martin v. L\u00f6wis  <loewis@informatik.hu-berlin.de>\n \n \t* call.c (build_new_method_call): Also check destructors."}, {"sha": "50af11784701c7d509639a30a649c3085c4176de", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/263ee052390366c2476124b43a53cec7e5540187/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/263ee052390366c2476124b43a53cec7e5540187/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=263ee052390366c2476124b43a53cec7e5540187", "patch": "@@ -266,6 +266,8 @@ static const struct resword reswords[] =\n   { \"__inline__\",\tRID_INLINE,\t0 },\n   { \"__label__\",\tRID_LABEL,\t0 },\n   { \"__null\",\t\tRID_NULL,\t0 },\n+  { \"__offsetof\",       RID_OFFSETOF,   0 },\n+  { \"__offsetof__\",     RID_OFFSETOF,   0 },\n   { \"__real\",\t\tRID_REALPART,\t0 },\n   { \"__real__\",\t\tRID_REALPART,\t0 },\n   { \"__restrict\",\tRID_RESTRICT,\t0 },"}, {"sha": "89806116055c2cc79e7242ba45216014c2794e9f", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/263ee052390366c2476124b43a53cec7e5540187/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/263ee052390366c2476124b43a53cec7e5540187/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=263ee052390366c2476124b43a53cec7e5540187", "patch": "@@ -1230,6 +1230,9 @@ typedef struct cp_parser GTY(())\n      been seen that makes the expression non-constant.  */\n   bool non_constant_expression_p;\n \n+  /* TRUE if we are parsing the argument to \"__offsetof__\".  */\n+  bool in_offsetof_p;\n+\n   /* TRUE if local variable names and `this' are forbidden in the\n      current context.  */\n   bool local_variables_forbidden_p;\n@@ -2225,6 +2228,9 @@ cp_parser_new (void)\n   parser->allow_non_constant_expression_p = false;\n   parser->non_constant_expression_p = false;\n \n+  /* We are not parsing offsetof.  */\n+  parser->in_offsetof_p = false;\n+\n   /* Local variable names are not forbidden.  */\n   parser->local_variables_forbidden_p = false;\n \n@@ -2503,6 +2509,29 @@ cp_parser_primary_expression (cp_parser *parser,\n \t    return build_x_va_arg (expression, type);\n \t  }\n \n+\tcase RID_OFFSETOF:\n+\t  {\n+\t    tree expression;\n+\t    bool saved_in_offsetof_p;\n+\n+\t    /* Consume the \"__offsetof__\" token.  */\n+\t    cp_lexer_consume_token (parser->lexer);\n+\t    /* Consume the opening `('.  */\n+\t    cp_parser_require (parser, CPP_OPEN_PAREN, \"`('\");\n+\t    /* Parse the parenthesized (almost) constant-expression.  */\n+\t    saved_in_offsetof_p = parser->in_offsetof_p;\n+\t    parser->in_offsetof_p = true;\n+\t    expression \n+\t      = cp_parser_constant_expression (parser,\n+\t\t\t\t\t       /*allow_non_constant_p=*/false,\n+\t\t\t\t\t       /*non_constant_p=*/NULL);\n+\t    parser->in_offsetof_p = saved_in_offsetof_p;\n+\t    /* Consume the closing ')'.  */\n+\t    cp_parser_require (parser, CPP_CLOSE_PAREN, \"`)'\");\n+\n+\t    return expression;\n+\t  }\n+\n \tdefault:\n \t  cp_parser_error (parser, \"expected primary-expression\");\n \t  return error_mark_node;\n@@ -3394,7 +3423,10 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p)\n \t   can be used in constant-expressions.  */\n \tif (parser->constant_expression_p\n \t    && !dependent_type_p (type)\n-\t    && !INTEGRAL_OR_ENUMERATION_TYPE_P (type))\n+\t    && !INTEGRAL_OR_ENUMERATION_TYPE_P (type)\n+\t    /* A cast to pointer or reference type is allowed in the\n+\t       implementation of \"offsetof\".  */\n+\t    && !(parser->in_offsetof_p && POINTER_TYPE_P (type)))\n \t  {\n \t    if (!parser->allow_non_constant_expression_p)\n \t      return (cp_parser_non_constant_expression \n@@ -3854,7 +3886,10 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p)\n \t       operator.  */\n \t    parser->context->object_type = NULL_TREE;\n \t    /* These operators may not appear in constant-expressions.  */\n-\t    if (parser->constant_expression_p)\n+\t    if (parser->constant_expression_p\n+\t\t/* The \"->\" operator is allowed in the implementation\n+\t\t   of \"offsetof\".  */\n+\t\t&& !(parser->in_offsetof_p && token_type == CPP_DEREF))\n \t      {\n \t\tif (!parser->allow_non_constant_expression_p)\n \t\t  postfix_expression \n@@ -4259,7 +4294,10 @@ cp_parser_unary_expression (cp_parser *parser, bool address_p)\n \t  break;\n \n \tcase ADDR_EXPR:\n-\t  non_constant_p = \"`&'\";\n+\t  /* The \"&\" operator is allowed in the implementation of\n+\t     \"offsetof\".  */\n+\t  if (!parser->in_offsetof_p)\n+\t    non_constant_p = \"`&'\";\n \t  /* Fall through.  */\n \tcase BIT_NOT_EXPR:\n \t  expression = build_x_unary_op (unary_operator, cast_expression);"}, {"sha": "21456db1ba6f2dd10e77da54766997f13ba62081", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/263ee052390366c2476124b43a53cec7e5540187/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/263ee052390366c2476124b43a53cec7e5540187/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=263ee052390366c2476124b43a53cec7e5540187", "patch": "@@ -7656,6 +7656,7 @@ Predefined Macros,cpp,The GNU C Preprocessor}).\n                         method denoted by a @samp{->*} or @samp{.*} expression.\n * C++ Attributes::      Variable, function, and type attributes for C++ only.\n * Strong Using::      Strong using-directives for namespace composition.\n+* Offsetof::            Special syntax for implementing @code{offsetof}.\n * Java Exceptions::     Tweaking exception handling to work with Java.\n * Deprecated Features:: Things will disappear from g++.\n * Backwards Compatibility:: Compatibilities with earlier definitions of C++.\n@@ -8295,6 +8296,25 @@ int main()\n @}\n @end smallexample\n \n+@node Offsetof\n+@section Offsetof\n+\n+G++ uses a syntactic extension to implement the @code{offsetof} macro.\n+\n+In particular:\n+\n+@smallexample\n+  __offsetof__ (expression)\n+@end smallexample\n+\n+is equivalent to the parenthesized expression, except that the\n+expression is considered an integral constant expression even if it\n+contains certain operators that are not normally permitted in an\n+integral constant expression.  Users should never use\n+@code{__offsetof__} directly; the only valid use of\n+@code{__offsetof__} is to implement the @code{offsetof} macro in\n+@code{<stddef.h>}.\n+\n @node Java Exceptions\n @section Java Exceptions\n "}, {"sha": "1bb3e90bc9b15820e12164a24653752d4ce5ae67", "filename": "gcc/ginclude/stddef.h", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/263ee052390366c2476124b43a53cec7e5540187/gcc%2Fginclude%2Fstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/263ee052390366c2476124b43a53cec7e5540187/gcc%2Fginclude%2Fstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstddef.h?ref=263ee052390366c2476124b43a53cec7e5540187", "patch": "@@ -413,21 +413,12 @@ typedef __WINT_TYPE__ wint_t;\n #ifndef __cplusplus\n #define offsetof(TYPE, MEMBER) ((size_t) &((TYPE *)0)->MEMBER)\n #else\n-/* In C++ a POD type can have a user defined address-of operator, and\n-   that will break offsetof. C++ core defect 273 addresses this and\n-   claims that reinterpret_casts to char & type are sufficient to\n-   overcome this problem.\n-\n-   (reinterpret_cast <size_t>\n-     (&reinterpret_cast <char &>(static_cast <TYPE *> (0)->MEMBER)))\n-\n-   But, such casts are not permitted in integral constant expressions,\n-   which offsetof is supposed to be.\n-\n-   It appears that offsetof is unimplementable in C++ without a\n-   compiler extension.  */\n-#define offsetof(TYPE, MEMBER) (reinterpret_cast <size_t> \\\n-\t(&static_cast<TYPE *> (0)->MEMBER))\n+/* The cast to \"char &\" below avoids problems with user-defined\n+   \"operator &\", which can appear in a POD type.  */\n+#define offsetof(TYPE, MEMBER)\t\t\t\t\\\n+  (__offsetof__ (reinterpret_cast <size_t>\t\t\\\n+                 (&reinterpret_cast <char &>\t\t\\\n+                  (static_cast<TYPE *> (0)->MEMBER))))\n #endif /* C++ */\n #endif /* _STDDEF_H was defined this time */\n "}, {"sha": "72832a8c0e6682f3b4acbfcc87e6286c1ee38af4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/263ee052390366c2476124b43a53cec7e5540187/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/263ee052390366c2476124b43a53cec7e5540187/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=263ee052390366c2476124b43a53cec7e5540187", "patch": "@@ -1,3 +1,10 @@\n+2003-12-16  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/13275\n+\t* g++.dg/other/offsetof2.C: Remove XFAIL.\n+\t* g++.dg/parse/offsetof1.C: New test.\n+\t* g++.gd/parse/offsetof2.C: Likewise.\n+\n 2003-12-16  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n \t* g++.dg/template/nontype3.C: New test."}, {"sha": "3ab63981d9b35facdd5eb5b5c3eddd590e0f5d6b", "filename": "gcc/testsuite/g++.dg/other/offsetof2.C", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/263ee052390366c2476124b43a53cec7e5540187/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/263ee052390366c2476124b43a53cec7e5540187/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof2.C?ref=263ee052390366c2476124b43a53cec7e5540187", "patch": "@@ -1,13 +1,11 @@\n-// { dg-do run { xfail *-*-* } }\n+// { dg-do run }\n // { dg-options -Wold-style-cast }\n \n // Copyright (C) 2003 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 22 Apr 2003 <nathan@codesourcery.com>\n \n // DR273 POD can have an operator&, offsetof is still required to work\n \n-// XFAILED - you can't write offsetof without an extension\n-\n #include <stddef.h>\n \n struct POD1"}, {"sha": "ae9d3110aba67c5dc0bdd5fb8dc66e6659decba6", "filename": "gcc/testsuite/g++.dg/parse/offsetof1.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/263ee052390366c2476124b43a53cec7e5540187/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Foffsetof1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/263ee052390366c2476124b43a53cec7e5540187/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Foffsetof1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Foffsetof1.C?ref=263ee052390366c2476124b43a53cec7e5540187", "patch": "@@ -0,0 +1,11 @@\n+#include <stddef.h>\n+\n+template <bool> struct StaticAssert;\n+template <> struct StaticAssert<true> {};\n+\n+struct MyPOD\n+{\n+  int a; int b; int c; \n+};\n+\n+StaticAssert<(offsetof(MyPOD, a) == 0)> s;"}, {"sha": "4552d39fea2b1bf06709bb7095a8142b159ecf64", "filename": "gcc/testsuite/g++.dg/parse/offsetof2.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/263ee052390366c2476124b43a53cec7e5540187/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Foffsetof2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/263ee052390366c2476124b43a53cec7e5540187/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Foffsetof2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Foffsetof2.C?ref=263ee052390366c2476124b43a53cec7e5540187", "patch": "@@ -0,0 +1,12 @@\n+#include <cstddef>\n+\n+struct choke_me\n+{\n+    int size;\n+    char storage[1];\n+};\n+\n+struct offset_is_broken\n+{\n+    static const int offset = offsetof(choke_me, storage);\n+};"}]}