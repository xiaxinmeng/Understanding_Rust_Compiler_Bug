{"sha": "085825b83b283c7533aa4d95ceda37231c4c99dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg1ODI1YjgzYjI4M2M3NTMzYWE0ZDk1Y2VkYTM3MjMxYzRjOTlkZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2002-10-27T07:35:06Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2002-10-27T07:35:06Z"}, "message": "re PR libstdc++/8347 (empty vector range used in string construction causes core dump.)\n\n2002-10-27  Paolo Carlini  <pcarlini@unitus.it>\n\n\tPR libstdc++/8347\n\t* include/bits/basic_string.tcc\n\t(string::_S_construct(_InIter, _InIter, const _Alloc&,\n\tforward_iterator_tag)): Do not throw logic error if\n\t__beg == NULL && __end == __beg.\n\t(string::string(const _CharT*, const _Alloc&)): Tweak.\n\t* testsuite/21_strings/ctor_copy_dtor.cc: Add test05 from PR.\n\nFrom-SVN: r58577", "tree": {"sha": "2c476023bdd470f4ec06836f5845a7aa69a038c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c476023bdd470f4ec06836f5845a7aa69a038c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/085825b83b283c7533aa4d95ceda37231c4c99dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/085825b83b283c7533aa4d95ceda37231c4c99dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/085825b83b283c7533aa4d95ceda37231c4c99dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/085825b83b283c7533aa4d95ceda37231c4c99dd/comments", "author": null, "committer": null, "parents": [{"sha": "881fc3545960a3a2da8d7c52fb87fd75039c22e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/881fc3545960a3a2da8d7c52fb87fd75039c22e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/881fc3545960a3a2da8d7c52fb87fd75039c22e5"}], "stats": {"total": 31, "additions": 26, "deletions": 5}, "files": [{"sha": "a62709a93e8a99332cd79de1584f2d2d24856f6b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/085825b83b283c7533aa4d95ceda37231c4c99dd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/085825b83b283c7533aa4d95ceda37231c4c99dd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=085825b83b283c7533aa4d95ceda37231c4c99dd", "patch": "@@ -1,3 +1,13 @@\n+2002-10-27  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\tPR libstdc++/8347\n+\t* include/bits/basic_string.tcc\n+\t(string::_S_construct(_InIter, _InIter, const _Alloc&,\n+\tforward_iterator_tag)): Do not throw logic error if\n+\t__beg == NULL && __end == __beg.\n+\t(string::string(const _CharT*, const _Alloc&)): Tweak.\n+\t* testsuite/21_strings/ctor_copy_dtor.cc: Add test05 from PR.\n+\n 2002-10-24  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \tPR other/3337"}, {"sha": "3047dfa5ba7e965ef295e99534aa91dbf7c4c580", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/085825b83b283c7533aa4d95ceda37231c4c99dd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/085825b83b283c7533aa4d95ceda37231c4c99dd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=085825b83b283c7533aa4d95ceda37231c4c99dd", "patch": "@@ -139,13 +139,13 @@ namespace std\n       {\n \tsize_type __dnew = static_cast<size_type>(distance(__beg, __end));\n \n+\tif (__beg == __end && __a == _Alloc())\n+\t  return _S_empty_rep()._M_refcopy();\n+\n \t// NB: Not required, but considered best practice.\n \tif (__builtin_expect(__beg == _InIter(), 0))\n \t  __throw_logic_error(\"attempt to create string with null pointer\");\n \t\n-\tif (__beg == __end && __a == _Alloc())\n-\t  return _S_empty_rep()._M_refcopy();\n-\n \t// Check for out_of_range and length_error exceptions.\n \t_Rep* __r = _Rep::_S_create(__dnew, __a);\n \ttry \n@@ -223,8 +223,8 @@ namespace std\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_string<_CharT, _Traits, _Alloc>::\n     basic_string(const _CharT* __s, const _Alloc& __a)\n-    : _M_dataplus(_S_construct(__s, __s ? __s + traits_type::length(__s) : 0, \n-\t\t\t       __a), __a)\n+    : _M_dataplus(_S_construct(__s, __s ? __s + traits_type::length(__s) :\n+\t\t\t       __s + npos, __a), __a)\n     { }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>"}, {"sha": "63c8be429940792192c24b2f2ba000f7e350faca", "filename": "libstdc++-v3/testsuite/21_strings/ctor_copy_dtor.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/085825b83b283c7533aa4d95ceda37231c4c99dd/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fctor_copy_dtor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/085825b83b283c7533aa4d95ceda37231c4c99dd/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fctor_copy_dtor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fctor_copy_dtor.cc?ref=085825b83b283c7533aa4d95ceda37231c4c99dd", "patch": "@@ -22,6 +22,7 @@\n \n #include <new>\n #include <string>\n+#include <vector>\n #include <stdexcept>\n #include <testsuite_hooks.h>\n \n@@ -214,12 +215,22 @@ void test04()\n   VERIFY( str02 == \"onifotrop\" );\n }\n \n+// libstdc++/8347\n+void test05()\n+{\n+  bool test = true;\n+\n+  std::vector<char> empty;\n+  std::string empty2(empty.begin(), empty.end());\n+}\n+\n int main()\n { \n   __set_testsuite_memlimit();\n   test01();\n   test02();\n   test03();\n   test04();\n+  test05();\n   return 0;\n }"}]}