{"sha": "6d7d9f0eaecc3896149504cc44de789e6cbb2366", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ3ZDlmMGVhZWNjMzg5NjE0OTUwNGNjNDRkZTc4OWU2Y2JiMjM2Ng==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2015-04-24T17:24:05Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2015-04-24T17:24:05Z"}, "message": "re PR target/65849 (Add missing tuning knobs to #pragma target/attribute target support)\n\n[gcc]\n2015-04-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/65849\n\t* config/rs6000/rs6000.opt (-mvsx-align-128): Make options that\n\tsave to independent variables use the Save attribute.  This will\n\tallow these options to be modified with the #pragma/attribute\n\ttarget support.\n\t(-mallow-movmisalign): Likewise.\n\t(-mallow-df-permute): Likewise.\n\t(-msched-groups): Likewise.\n\t(-malways-hint): Likewise.\n\t(-malign-branch-targets): Likewise.\n\t(-mvectorize-builtins): Likewise.\n\t(-msave-toc-indirect): Likewise.\n\n\t* config/rs6000/rs6000.c (rs6000_opt_masks): Add more options that\n\tcan be set via the #pragma/attribute target support.\n\t(rs6000_opt_vars): Likewise.\n\t(rs6000_inner_target_options): If VSX was set, also set\n\t-mno-avoid-indexed-addresses.\n\n[gcc/testsuite]\n2015-04-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/65849\n\t* gcc.target/powerpc/pr65849-1.c: New test to verify being able to\n\tset new options.\n\t* gcc.target/powerpc/pr65849-2.c: Likewise.\n\nFrom-SVN: r222417", "tree": {"sha": "5399212e2b499024a9eec913c419cc3b61a970ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5399212e2b499024a9eec913c419cc3b61a970ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d7d9f0eaecc3896149504cc44de789e6cbb2366", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d7d9f0eaecc3896149504cc44de789e6cbb2366", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d7d9f0eaecc3896149504cc44de789e6cbb2366", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d7d9f0eaecc3896149504cc44de789e6cbb2366/comments", "author": null, "committer": null, "parents": [{"sha": "728dc15380585e6706357092c0b7becfc48f5133", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/728dc15380585e6706357092c0b7becfc48f5133", "html_url": "https://github.com/Rust-GCC/gccrs/commit/728dc15380585e6706357092c0b7becfc48f5133"}], "stats": {"total": 1554, "additions": 1541, "deletions": 13}, "files": [{"sha": "025289e21e1be409fd96e22dd01de90d8f0cc72f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7d9f0eaecc3896149504cc44de789e6cbb2366/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7d9f0eaecc3896149504cc44de789e6cbb2366/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d7d9f0eaecc3896149504cc44de789e6cbb2366", "patch": "@@ -1,3 +1,24 @@\n+2015-04-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/65849\n+\t* config/rs6000/rs6000.opt (-mvsx-align-128): Make options that\n+\tsave to independent variables use the Save attribute.  This will\n+\tallow these options to be modified with the #pragma/attribute\n+\ttarget support.\n+\t(-mallow-movmisalign): Likewise.\n+\t(-mallow-df-permute): Likewise.\n+\t(-msched-groups): Likewise.\n+\t(-malways-hint): Likewise.\n+\t(-malign-branch-targets): Likewise.\n+\t(-mvectorize-builtins): Likewise.\n+\t(-msave-toc-indirect): Likewise.\n+\n+\t* config/rs6000/rs6000.c (rs6000_opt_masks): Add more options that\n+\tcan be set via the #pragma/attribute target support.\n+\t(rs6000_opt_vars): Likewise.\n+\t(rs6000_inner_target_options): If VSX was set, also set\n+\t-mno-avoid-indexed-addresses.\n+\n 2015-04-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/iterators.md (shiftable_ops): Rename to..."}, {"sha": "99e3fbbc21e456cb9b4252592bc19b4c2b7f0fa1", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 49, "deletions": 5, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7d9f0eaecc3896149504cc44de789e6cbb2366/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7d9f0eaecc3896149504cc44de789e6cbb2366/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=6d7d9f0eaecc3896149504cc44de789e6cbb2366", "patch": "@@ -32219,10 +32219,11 @@ static struct rs6000_opt_mask const rs6000_opt_masks[] =\n   { \"quad-memory\",\t\tOPTION_MASK_QUAD_MEMORY,\tfalse, true  },\n   { \"quad-memory-atomic\",\tOPTION_MASK_QUAD_MEMORY_ATOMIC,\tfalse, true  },\n   { \"recip-precision\",\t\tOPTION_MASK_RECIP_PRECISION,\tfalse, true  },\n+  { \"save-toc-indirect\",\tOPTION_MASK_SAVE_TOC_INDIRECT,\tfalse, true  },\n   { \"string\",\t\t\tOPTION_MASK_STRING,\t\tfalse, true  },\n   { \"update\",\t\t\tOPTION_MASK_NO_UPDATE,\t\ttrue , true  },\n-  { \"upper-regs-df\",\t\tOPTION_MASK_UPPER_REGS_DF,\tfalse, false },\n-  { \"upper-regs-sf\",\t\tOPTION_MASK_UPPER_REGS_SF,\tfalse, false },\n+  { \"upper-regs-df\",\t\tOPTION_MASK_UPPER_REGS_DF,\tfalse, true  },\n+  { \"upper-regs-sf\",\t\tOPTION_MASK_UPPER_REGS_SF,\tfalse, true  },\n   { \"vsx\",\t\t\tOPTION_MASK_VSX,\t\tfalse, true  },\n   { \"vsx-timode\",\t\tOPTION_MASK_VSX_TIMODE,\t\tfalse, true  },\n #ifdef OPTION_MASK_64BIT\n@@ -32295,6 +32296,42 @@ static struct rs6000_opt_var const rs6000_opt_vars[] =\n   { \"longcall\",\n     offsetof (struct gcc_options, x_rs6000_default_long_calls),\n     offsetof (struct cl_target_option, x_rs6000_default_long_calls), },\n+  { \"optimize-swaps\",\n+    offsetof (struct gcc_options, x_rs6000_optimize_swaps),\n+    offsetof (struct cl_target_option, x_rs6000_optimize_swaps), },\n+  { \"allow-movmisalign\",\n+    offsetof (struct gcc_options, x_TARGET_ALLOW_MOVMISALIGN),\n+    offsetof (struct cl_target_option, x_TARGET_ALLOW_MOVMISALIGN), },\n+  { \"allow-df-permute\",\n+    offsetof (struct gcc_options, x_TARGET_ALLOW_DF_PERMUTE),\n+    offsetof (struct cl_target_option, x_TARGET_ALLOW_DF_PERMUTE), },\n+  { \"sched-groups\",\n+    offsetof (struct gcc_options, x_TARGET_SCHED_GROUPS),\n+    offsetof (struct cl_target_option, x_TARGET_SCHED_GROUPS), },\n+  { \"always-hint\",\n+    offsetof (struct gcc_options, x_TARGET_ALWAYS_HINT),\n+    offsetof (struct cl_target_option, x_TARGET_ALWAYS_HINT), },\n+  { \"align-branch-targets\",\n+    offsetof (struct gcc_options, x_TARGET_ALIGN_BRANCH_TARGETS),\n+    offsetof (struct cl_target_option, x_TARGET_ALIGN_BRANCH_TARGETS), },\n+  { \"vectorize-builtins\",\n+    offsetof (struct gcc_options, x_TARGET_VECTORIZE_BUILTINS),\n+    offsetof (struct cl_target_option, x_TARGET_VECTORIZE_BUILTINS), },\n+  { \"tls-markers\",\n+    offsetof (struct gcc_options, x_tls_markers),\n+    offsetof (struct cl_target_option, x_tls_markers), },\n+  { \"sched-prolog\",\n+    offsetof (struct gcc_options, x_TARGET_SCHED_PROLOG),\n+    offsetof (struct cl_target_option, x_TARGET_SCHED_PROLOG), },\n+  { \"sched-epilog\",\n+    offsetof (struct gcc_options, x_TARGET_SCHED_PROLOG),\n+    offsetof (struct cl_target_option, x_TARGET_SCHED_PROLOG), },\n+  { \"gen-cell-microcode\",\n+    offsetof (struct gcc_options, x_rs6000_gen_cell_microcode),\n+    offsetof (struct cl_target_option, x_rs6000_gen_cell_microcode), },\n+  { \"warn-cell-microcode\",\n+    offsetof (struct gcc_options, x_rs6000_warn_cell_microcode),\n+    offsetof (struct cl_target_option, x_rs6000_warn_cell_microcode), },\n };\n \n /* Inner function to handle attribute((target(\"...\"))) and #pragma GCC target\n@@ -32368,9 +32405,15 @@ rs6000_inner_target_options (tree args, bool attr_p)\n \t\t\trs6000_isa_flags_explicit |= mask;\n \n \t\t\t/* VSX needs altivec, so -mvsx automagically sets\n-\t\t\t   altivec.  */\n-\t\t\tif (mask == OPTION_MASK_VSX && !invert)\n-\t\t\t  mask |= OPTION_MASK_ALTIVEC;\n+\t\t\t   altivec and disables -mavoid-indexed-addresses.  */\n+\t\t\tif (!invert)\n+\t\t\t  {\n+\t\t\t    if (mask == OPTION_MASK_VSX)\n+\t\t\t      {\n+\t\t\t\tmask |= OPTION_MASK_ALTIVEC;\n+\t\t\t\tTARGET_AVOID_XFORM = 0;\n+\t\t\t      }\n+\t\t\t  }\n \n \t\t\tif (rs6000_opt_masks[i].invert)\n \t\t\t  invert = !invert;\n@@ -32391,6 +32434,7 @@ rs6000_inner_target_options (tree args, bool attr_p)\n \t\t\tsize_t j = rs6000_opt_vars[i].global_offset;\n \t\t\t*((int *) ((char *)&global_options + j)) = !invert;\n \t\t\terror_p = false;\n+\t\t\tnot_valid_p = false;\n \t\t\tbreak;\n \t\t      }\n \t\t}"}, {"sha": "dbe2ec7f764fc36222629e1911102985024cb956", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7d9f0eaecc3896149504cc44de789e6cbb2366/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7d9f0eaecc3896149504cc44de789e6cbb2366/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=6d7d9f0eaecc3896149504cc44de789e6cbb2366", "patch": "@@ -204,35 +204,35 @@ mvsx-scalar-memory\n Target Undocumented Report Alias(mupper-regs-df)\n \n mvsx-align-128\n-Target Undocumented Report Var(TARGET_VSX_ALIGN_128)\n+Target Undocumented Report Var(TARGET_VSX_ALIGN_128) Save\n ; If -mvsx, set alignment to 128 bits instead of 32/64\n \n mallow-movmisalign\n-Target Undocumented Var(TARGET_ALLOW_MOVMISALIGN) Init(-1)\n+Target Undocumented Var(TARGET_ALLOW_MOVMISALIGN) Init(-1) Save\n ; Allow/disallow the movmisalign in DF/DI vectors\n \n mefficient-unaligned-vector\n Target Undocumented Report Var(TARGET_EFFICIENT_UNALIGNED_VSX) Init(-1)\n ; Consider unaligned VSX accesses to be efficient/inefficient\n \n mallow-df-permute\n-Target Undocumented Var(TARGET_ALLOW_DF_PERMUTE)\n+Target Undocumented Var(TARGET_ALLOW_DF_PERMUTE) Save\n ; Allow/disallow permutation of DF/DI vectors\n \n msched-groups\n-Target Undocumented Report Var(TARGET_SCHED_GROUPS) Init(-1)\n+Target Undocumented Report Var(TARGET_SCHED_GROUPS) Init(-1) Save\n ; Explicitly set/unset whether rs6000_sched_groups is set\n \n malways-hint\n-Target Undocumented Report Var(TARGET_ALWAYS_HINT) Init(-1)\n+Target Undocumented Report Var(TARGET_ALWAYS_HINT) Init(-1) Save\n ; Explicitly set/unset whether rs6000_always_hint is set\n \n malign-branch-targets\n-Target Undocumented Report Var(TARGET_ALIGN_BRANCH_TARGETS) Init(-1)\n+Target Undocumented Report Var(TARGET_ALIGN_BRANCH_TARGETS) Init(-1) Save\n ; Explicitly set/unset whether rs6000_align_branch_targets is set\n \n mvectorize-builtins\n-Target Undocumented Report Var(TARGET_VECTORIZE_BUILTINS) Init(-1)\n+Target Undocumented Report Var(TARGET_VECTORIZE_BUILTINS) Init(-1) Save\n ; Explicitly control whether we vectorize the builtins or not.\n \n mno-update\n@@ -542,7 +542,7 @@ Target Report Var(TARGET_POINTERS_TO_NESTED_FUNCTIONS) Init(1) Save\n Use/do not use r11 to hold the static link in calls to functions via pointers.\n \n msave-toc-indirect\n-Target Report Var(TARGET_SAVE_TOC_INDIRECT) Save\n+Target Report Mask(SAVE_TOC_INDIRECT) Var(rs6000_isa_flags)\n Control whether we save the TOC in the prologue for indirect calls or generate the save inline\n \n mvsx-timode"}, {"sha": "d90c2716294f3427a0656a868d7c1053374feac0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7d9f0eaecc3896149504cc44de789e6cbb2366/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7d9f0eaecc3896149504cc44de789e6cbb2366/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6d7d9f0eaecc3896149504cc44de789e6cbb2366", "patch": "@@ -1,3 +1,10 @@\n+2015-04-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/65849\n+\t* gcc.target/powerpc/pr65849-1.c: New test to verify being able to\n+\tset new options.\n+\t* gcc.target/powerpc/pr65849-2.c: Likewise.\n+\n 2015-04-24  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/65802"}, {"sha": "14b6e381427a4ec2bbfee6b8fa33d376cd9d24d7", "filename": "gcc/testsuite/gcc.target/powerpc/pr65849-1.c", "status": "added", "additions": 728, "deletions": 0, "changes": 728, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7d9f0eaecc3896149504cc44de789e6cbb2366/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr65849-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7d9f0eaecc3896149504cc44de789e6cbb2366/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr65849-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr65849-1.c?ref=6d7d9f0eaecc3896149504cc44de789e6cbb2366", "patch": "@@ -0,0 +1,728 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power7\" } } */\n+/* { dg-options \"-mcpu=power7 -O2 -mno-upper-regs-df\" } */\n+\n+/* Test whether we can enable the -mupper-regs-df with target pragmas.  Make\n+   sure double values are allocated to the Altivec registers as well as the\n+   traditional FPR registers.  */\n+\n+#ifndef TYPE\n+#define TYPE double\n+#endif\n+\n+#ifndef MASK_TYPE\n+#define MASK_TYPE unsigned long long\n+#endif\n+\n+#define MASK_ONE\t((MASK_TYPE)1)\n+#define ZERO\t\t((TYPE) 0.0)\n+\n+#pragma GCC target (\"upper-regs-df\")\n+TYPE\n+test_add (const MASK_TYPE *add_mask, const TYPE *add_values,\n+\t  const MASK_TYPE *sub_mask, const TYPE *sub_values,\n+\t  const MASK_TYPE *mul_mask, const TYPE *mul_values,\n+\t  const MASK_TYPE *div_mask, const TYPE *div_values,\n+\t  const MASK_TYPE *eq0_mask, int *eq0_ptr)\n+{\n+  TYPE value;\n+  TYPE value00\t= ZERO;\n+  TYPE value01\t= ZERO;\n+  TYPE value02\t= ZERO;\n+  TYPE value03\t= ZERO;\n+  TYPE value04\t= ZERO;\n+  TYPE value05\t= ZERO;\n+  TYPE value06\t= ZERO;\n+  TYPE value07\t= ZERO;\n+  TYPE value08\t= ZERO;\n+  TYPE value09\t= ZERO;\n+  TYPE value10\t= ZERO;\n+  TYPE value11\t= ZERO;\n+  TYPE value12\t= ZERO;\n+  TYPE value13\t= ZERO;\n+  TYPE value14\t= ZERO;\n+  TYPE value15\t= ZERO;\n+  TYPE value16\t= ZERO;\n+  TYPE value17\t= ZERO;\n+  TYPE value18\t= ZERO;\n+  TYPE value19\t= ZERO;\n+  TYPE value20\t= ZERO;\n+  TYPE value21\t= ZERO;\n+  TYPE value22\t= ZERO;\n+  TYPE value23\t= ZERO;\n+  TYPE value24\t= ZERO;\n+  TYPE value25\t= ZERO;\n+  TYPE value26\t= ZERO;\n+  TYPE value27\t= ZERO;\n+  TYPE value28\t= ZERO;\n+  TYPE value29\t= ZERO;\n+  TYPE value30\t= ZERO;\n+  TYPE value31\t= ZERO;\n+  TYPE value32\t= ZERO;\n+  TYPE value33\t= ZERO;\n+  TYPE value34\t= ZERO;\n+  TYPE value35\t= ZERO;\n+  TYPE value36\t= ZERO;\n+  TYPE value37\t= ZERO;\n+  TYPE value38\t= ZERO;\n+  TYPE value39\t= ZERO;\n+  MASK_TYPE mask;\n+  int eq0;\n+\n+  while ((mask = *add_mask++) != 0)\n+    {\n+      value = *add_values++;\n+\n+      __asm__ (\" #reg %0\" : \"+d\" (value));\n+\n+      if ((mask & (MASK_ONE <<  0)) != 0)\n+\tvalue00 += value;\n+\n+      if ((mask & (MASK_ONE <<  1)) != 0)\n+\tvalue01 += value;\n+\n+      if ((mask & (MASK_ONE <<  2)) != 0)\n+\tvalue02 += value;\n+\n+      if ((mask & (MASK_ONE <<  3)) != 0)\n+\tvalue03 += value;\n+\n+      if ((mask & (MASK_ONE <<  4)) != 0)\n+\tvalue04 += value;\n+\n+      if ((mask & (MASK_ONE <<  5)) != 0)\n+\tvalue05 += value;\n+\n+      if ((mask & (MASK_ONE <<  6)) != 0)\n+\tvalue06 += value;\n+\n+      if ((mask & (MASK_ONE <<  7)) != 0)\n+\tvalue07 += value;\n+\n+      if ((mask & (MASK_ONE <<  8)) != 0)\n+\tvalue08 += value;\n+\n+      if ((mask & (MASK_ONE <<  9)) != 0)\n+\tvalue09 += value;\n+\n+      if ((mask & (MASK_ONE << 10)) != 0)\n+\tvalue10 += value;\n+\n+      if ((mask & (MASK_ONE << 11)) != 0)\n+\tvalue11 += value;\n+\n+      if ((mask & (MASK_ONE << 12)) != 0)\n+\tvalue12 += value;\n+\n+      if ((mask & (MASK_ONE << 13)) != 0)\n+\tvalue13 += value;\n+\n+      if ((mask & (MASK_ONE << 14)) != 0)\n+\tvalue14 += value;\n+\n+      if ((mask & (MASK_ONE << 15)) != 0)\n+\tvalue15 += value;\n+\n+      if ((mask & (MASK_ONE << 16)) != 0)\n+\tvalue16 += value;\n+\n+      if ((mask & (MASK_ONE << 17)) != 0)\n+\tvalue17 += value;\n+\n+      if ((mask & (MASK_ONE << 18)) != 0)\n+\tvalue18 += value;\n+\n+      if ((mask & (MASK_ONE << 19)) != 0)\n+\tvalue19 += value;\n+\n+      if ((mask & (MASK_ONE << 20)) != 0)\n+\tvalue20 += value;\n+\n+      if ((mask & (MASK_ONE << 21)) != 0)\n+\tvalue21 += value;\n+\n+      if ((mask & (MASK_ONE << 22)) != 0)\n+\tvalue22 += value;\n+\n+      if ((mask & (MASK_ONE << 23)) != 0)\n+\tvalue23 += value;\n+\n+      if ((mask & (MASK_ONE << 24)) != 0)\n+\tvalue24 += value;\n+\n+      if ((mask & (MASK_ONE << 25)) != 0)\n+\tvalue25 += value;\n+\n+      if ((mask & (MASK_ONE << 26)) != 0)\n+\tvalue26 += value;\n+\n+      if ((mask & (MASK_ONE << 27)) != 0)\n+\tvalue27 += value;\n+\n+      if ((mask & (MASK_ONE << 28)) != 0)\n+\tvalue28 += value;\n+\n+      if ((mask & (MASK_ONE << 29)) != 0)\n+\tvalue29 += value;\n+\n+      if ((mask & (MASK_ONE << 30)) != 0)\n+\tvalue30 += value;\n+\n+      if ((mask & (MASK_ONE << 31)) != 0)\n+\tvalue31 += value;\n+\n+      if ((mask & (MASK_ONE << 32)) != 0)\n+\tvalue32 += value;\n+\n+      if ((mask & (MASK_ONE << 33)) != 0)\n+\tvalue33 += value;\n+\n+      if ((mask & (MASK_ONE << 34)) != 0)\n+\tvalue34 += value;\n+\n+      if ((mask & (MASK_ONE << 35)) != 0)\n+\tvalue35 += value;\n+\n+      if ((mask & (MASK_ONE << 36)) != 0)\n+\tvalue36 += value;\n+\n+      if ((mask & (MASK_ONE << 37)) != 0)\n+\tvalue37 += value;\n+\n+      if ((mask & (MASK_ONE << 38)) != 0)\n+\tvalue38 += value;\n+\n+      if ((mask & (MASK_ONE << 39)) != 0)\n+\tvalue39 += value;\n+    }\n+\n+  while ((mask = *sub_mask++) != 0)\n+    {\n+      value = *sub_values++;\n+\n+      __asm__ (\" #reg %0\" : \"+d\" (value));\n+\n+      if ((mask & (MASK_ONE <<  0)) != 0)\n+\tvalue00 -= value;\n+\n+      if ((mask & (MASK_ONE <<  1)) != 0)\n+\tvalue01 -= value;\n+\n+      if ((mask & (MASK_ONE <<  2)) != 0)\n+\tvalue02 -= value;\n+\n+      if ((mask & (MASK_ONE <<  3)) != 0)\n+\tvalue03 -= value;\n+\n+      if ((mask & (MASK_ONE <<  4)) != 0)\n+\tvalue04 -= value;\n+\n+      if ((mask & (MASK_ONE <<  5)) != 0)\n+\tvalue05 -= value;\n+\n+      if ((mask & (MASK_ONE <<  6)) != 0)\n+\tvalue06 -= value;\n+\n+      if ((mask & (MASK_ONE <<  7)) != 0)\n+\tvalue07 -= value;\n+\n+      if ((mask & (MASK_ONE <<  8)) != 0)\n+\tvalue08 -= value;\n+\n+      if ((mask & (MASK_ONE <<  9)) != 0)\n+\tvalue09 -= value;\n+\n+      if ((mask & (MASK_ONE << 10)) != 0)\n+\tvalue10 -= value;\n+\n+      if ((mask & (MASK_ONE << 11)) != 0)\n+\tvalue11 -= value;\n+\n+      if ((mask & (MASK_ONE << 12)) != 0)\n+\tvalue12 -= value;\n+\n+      if ((mask & (MASK_ONE << 13)) != 0)\n+\tvalue13 -= value;\n+\n+      if ((mask & (MASK_ONE << 14)) != 0)\n+\tvalue14 -= value;\n+\n+      if ((mask & (MASK_ONE << 15)) != 0)\n+\tvalue15 -= value;\n+\n+      if ((mask & (MASK_ONE << 16)) != 0)\n+\tvalue16 -= value;\n+\n+      if ((mask & (MASK_ONE << 17)) != 0)\n+\tvalue17 -= value;\n+\n+      if ((mask & (MASK_ONE << 18)) != 0)\n+\tvalue18 -= value;\n+\n+      if ((mask & (MASK_ONE << 19)) != 0)\n+\tvalue19 -= value;\n+\n+      if ((mask & (MASK_ONE << 20)) != 0)\n+\tvalue20 -= value;\n+\n+      if ((mask & (MASK_ONE << 21)) != 0)\n+\tvalue21 -= value;\n+\n+      if ((mask & (MASK_ONE << 22)) != 0)\n+\tvalue22 -= value;\n+\n+      if ((mask & (MASK_ONE << 23)) != 0)\n+\tvalue23 -= value;\n+\n+      if ((mask & (MASK_ONE << 24)) != 0)\n+\tvalue24 -= value;\n+\n+      if ((mask & (MASK_ONE << 25)) != 0)\n+\tvalue25 -= value;\n+\n+      if ((mask & (MASK_ONE << 26)) != 0)\n+\tvalue26 -= value;\n+\n+      if ((mask & (MASK_ONE << 27)) != 0)\n+\tvalue27 -= value;\n+\n+      if ((mask & (MASK_ONE << 28)) != 0)\n+\tvalue28 -= value;\n+\n+      if ((mask & (MASK_ONE << 29)) != 0)\n+\tvalue29 -= value;\n+\n+      if ((mask & (MASK_ONE << 30)) != 0)\n+\tvalue30 -= value;\n+\n+      if ((mask & (MASK_ONE << 31)) != 0)\n+\tvalue31 -= value;\n+\n+      if ((mask & (MASK_ONE << 32)) != 0)\n+\tvalue32 -= value;\n+\n+      if ((mask & (MASK_ONE << 33)) != 0)\n+\tvalue33 -= value;\n+\n+      if ((mask & (MASK_ONE << 34)) != 0)\n+\tvalue34 -= value;\n+\n+      if ((mask & (MASK_ONE << 35)) != 0)\n+\tvalue35 -= value;\n+\n+      if ((mask & (MASK_ONE << 36)) != 0)\n+\tvalue36 -= value;\n+\n+      if ((mask & (MASK_ONE << 37)) != 0)\n+\tvalue37 -= value;\n+\n+      if ((mask & (MASK_ONE << 38)) != 0)\n+\tvalue38 -= value;\n+\n+      if ((mask & (MASK_ONE << 39)) != 0)\n+\tvalue39 -= value;\n+    }\n+\n+  while ((mask = *mul_mask++) != 0)\n+    {\n+      value = *mul_values++;\n+\n+      __asm__ (\" #reg %0\" : \"+d\" (value));\n+\n+      if ((mask & (MASK_ONE <<  0)) != 0)\n+\tvalue00 *= value;\n+\n+      if ((mask & (MASK_ONE <<  1)) != 0)\n+\tvalue01 *= value;\n+\n+      if ((mask & (MASK_ONE <<  2)) != 0)\n+\tvalue02 *= value;\n+\n+      if ((mask & (MASK_ONE <<  3)) != 0)\n+\tvalue03 *= value;\n+\n+      if ((mask & (MASK_ONE <<  4)) != 0)\n+\tvalue04 *= value;\n+\n+      if ((mask & (MASK_ONE <<  5)) != 0)\n+\tvalue05 *= value;\n+\n+      if ((mask & (MASK_ONE <<  6)) != 0)\n+\tvalue06 *= value;\n+\n+      if ((mask & (MASK_ONE <<  7)) != 0)\n+\tvalue07 *= value;\n+\n+      if ((mask & (MASK_ONE <<  8)) != 0)\n+\tvalue08 *= value;\n+\n+      if ((mask & (MASK_ONE <<  9)) != 0)\n+\tvalue09 *= value;\n+\n+      if ((mask & (MASK_ONE << 10)) != 0)\n+\tvalue10 *= value;\n+\n+      if ((mask & (MASK_ONE << 11)) != 0)\n+\tvalue11 *= value;\n+\n+      if ((mask & (MASK_ONE << 12)) != 0)\n+\tvalue12 *= value;\n+\n+      if ((mask & (MASK_ONE << 13)) != 0)\n+\tvalue13 *= value;\n+\n+      if ((mask & (MASK_ONE << 14)) != 0)\n+\tvalue14 *= value;\n+\n+      if ((mask & (MASK_ONE << 15)) != 0)\n+\tvalue15 *= value;\n+\n+      if ((mask & (MASK_ONE << 16)) != 0)\n+\tvalue16 *= value;\n+\n+      if ((mask & (MASK_ONE << 17)) != 0)\n+\tvalue17 *= value;\n+\n+      if ((mask & (MASK_ONE << 18)) != 0)\n+\tvalue18 *= value;\n+\n+      if ((mask & (MASK_ONE << 19)) != 0)\n+\tvalue19 *= value;\n+\n+      if ((mask & (MASK_ONE << 20)) != 0)\n+\tvalue20 *= value;\n+\n+      if ((mask & (MASK_ONE << 21)) != 0)\n+\tvalue21 *= value;\n+\n+      if ((mask & (MASK_ONE << 22)) != 0)\n+\tvalue22 *= value;\n+\n+      if ((mask & (MASK_ONE << 23)) != 0)\n+\tvalue23 *= value;\n+\n+      if ((mask & (MASK_ONE << 24)) != 0)\n+\tvalue24 *= value;\n+\n+      if ((mask & (MASK_ONE << 25)) != 0)\n+\tvalue25 *= value;\n+\n+      if ((mask & (MASK_ONE << 26)) != 0)\n+\tvalue26 *= value;\n+\n+      if ((mask & (MASK_ONE << 27)) != 0)\n+\tvalue27 *= value;\n+\n+      if ((mask & (MASK_ONE << 28)) != 0)\n+\tvalue28 *= value;\n+\n+      if ((mask & (MASK_ONE << 29)) != 0)\n+\tvalue29 *= value;\n+\n+      if ((mask & (MASK_ONE << 30)) != 0)\n+\tvalue30 *= value;\n+\n+      if ((mask & (MASK_ONE << 31)) != 0)\n+\tvalue31 *= value;\n+\n+      if ((mask & (MASK_ONE << 32)) != 0)\n+\tvalue32 *= value;\n+\n+      if ((mask & (MASK_ONE << 33)) != 0)\n+\tvalue33 *= value;\n+\n+      if ((mask & (MASK_ONE << 34)) != 0)\n+\tvalue34 *= value;\n+\n+      if ((mask & (MASK_ONE << 35)) != 0)\n+\tvalue35 *= value;\n+\n+      if ((mask & (MASK_ONE << 36)) != 0)\n+\tvalue36 *= value;\n+\n+      if ((mask & (MASK_ONE << 37)) != 0)\n+\tvalue37 *= value;\n+\n+      if ((mask & (MASK_ONE << 38)) != 0)\n+\tvalue38 *= value;\n+\n+      if ((mask & (MASK_ONE << 39)) != 0)\n+\tvalue39 *= value;\n+    }\n+\n+  while ((mask = *div_mask++) != 0)\n+    {\n+      value = *div_values++;\n+\n+      __asm__ (\" #reg %0\" : \"+d\" (value));\n+\n+      if ((mask & (MASK_ONE <<  0)) != 0)\n+\tvalue00 /= value;\n+\n+      if ((mask & (MASK_ONE <<  1)) != 0)\n+\tvalue01 /= value;\n+\n+      if ((mask & (MASK_ONE <<  2)) != 0)\n+\tvalue02 /= value;\n+\n+      if ((mask & (MASK_ONE <<  3)) != 0)\n+\tvalue03 /= value;\n+\n+      if ((mask & (MASK_ONE <<  4)) != 0)\n+\tvalue04 /= value;\n+\n+      if ((mask & (MASK_ONE <<  5)) != 0)\n+\tvalue05 /= value;\n+\n+      if ((mask & (MASK_ONE <<  6)) != 0)\n+\tvalue06 /= value;\n+\n+      if ((mask & (MASK_ONE <<  7)) != 0)\n+\tvalue07 /= value;\n+\n+      if ((mask & (MASK_ONE <<  8)) != 0)\n+\tvalue08 /= value;\n+\n+      if ((mask & (MASK_ONE <<  9)) != 0)\n+\tvalue09 /= value;\n+\n+      if ((mask & (MASK_ONE << 10)) != 0)\n+\tvalue10 /= value;\n+\n+      if ((mask & (MASK_ONE << 11)) != 0)\n+\tvalue11 /= value;\n+\n+      if ((mask & (MASK_ONE << 12)) != 0)\n+\tvalue12 /= value;\n+\n+      if ((mask & (MASK_ONE << 13)) != 0)\n+\tvalue13 /= value;\n+\n+      if ((mask & (MASK_ONE << 14)) != 0)\n+\tvalue14 /= value;\n+\n+      if ((mask & (MASK_ONE << 15)) != 0)\n+\tvalue15 /= value;\n+\n+      if ((mask & (MASK_ONE << 16)) != 0)\n+\tvalue16 /= value;\n+\n+      if ((mask & (MASK_ONE << 17)) != 0)\n+\tvalue17 /= value;\n+\n+      if ((mask & (MASK_ONE << 18)) != 0)\n+\tvalue18 /= value;\n+\n+      if ((mask & (MASK_ONE << 19)) != 0)\n+\tvalue19 /= value;\n+\n+      if ((mask & (MASK_ONE << 20)) != 0)\n+\tvalue20 /= value;\n+\n+      if ((mask & (MASK_ONE << 21)) != 0)\n+\tvalue21 /= value;\n+\n+      if ((mask & (MASK_ONE << 22)) != 0)\n+\tvalue22 /= value;\n+\n+      if ((mask & (MASK_ONE << 23)) != 0)\n+\tvalue23 /= value;\n+\n+      if ((mask & (MASK_ONE << 24)) != 0)\n+\tvalue24 /= value;\n+\n+      if ((mask & (MASK_ONE << 25)) != 0)\n+\tvalue25 /= value;\n+\n+      if ((mask & (MASK_ONE << 26)) != 0)\n+\tvalue26 /= value;\n+\n+      if ((mask & (MASK_ONE << 27)) != 0)\n+\tvalue27 /= value;\n+\n+      if ((mask & (MASK_ONE << 28)) != 0)\n+\tvalue28 /= value;\n+\n+      if ((mask & (MASK_ONE << 29)) != 0)\n+\tvalue29 /= value;\n+\n+      if ((mask & (MASK_ONE << 30)) != 0)\n+\tvalue30 /= value;\n+\n+      if ((mask & (MASK_ONE << 31)) != 0)\n+\tvalue31 /= value;\n+\n+      if ((mask & (MASK_ONE << 32)) != 0)\n+\tvalue32 /= value;\n+\n+      if ((mask & (MASK_ONE << 33)) != 0)\n+\tvalue33 /= value;\n+\n+      if ((mask & (MASK_ONE << 34)) != 0)\n+\tvalue34 /= value;\n+\n+      if ((mask & (MASK_ONE << 35)) != 0)\n+\tvalue35 /= value;\n+\n+      if ((mask & (MASK_ONE << 36)) != 0)\n+\tvalue36 /= value;\n+\n+      if ((mask & (MASK_ONE << 37)) != 0)\n+\tvalue37 /= value;\n+\n+      if ((mask & (MASK_ONE << 38)) != 0)\n+\tvalue38 /= value;\n+\n+      if ((mask & (MASK_ONE << 39)) != 0)\n+\tvalue39 /= value;\n+    }\n+\n+  while ((mask = *eq0_mask++) != 0)\n+    {\n+      eq0 = 0;\n+\n+      if ((mask & (MASK_ONE <<  0)) != 0)\n+\teq0 |= (value00 == ZERO);\n+\n+      if ((mask & (MASK_ONE <<  1)) != 0)\n+\teq0 |= (value01 == ZERO);\n+\n+      if ((mask & (MASK_ONE <<  2)) != 0)\n+\teq0 |= (value02 == ZERO);\n+\n+      if ((mask & (MASK_ONE <<  3)) != 0)\n+\teq0 |= (value03 == ZERO);\n+\n+      if ((mask & (MASK_ONE <<  4)) != 0)\n+\teq0 |= (value04 == ZERO);\n+\n+      if ((mask & (MASK_ONE <<  5)) != 0)\n+\teq0 |= (value05 == ZERO);\n+\n+      if ((mask & (MASK_ONE <<  6)) != 0)\n+\teq0 |= (value06 == ZERO);\n+\n+      if ((mask & (MASK_ONE <<  7)) != 0)\n+\teq0 |= (value07 == ZERO);\n+\n+      if ((mask & (MASK_ONE <<  8)) != 0)\n+\teq0 |= (value08 == ZERO);\n+\n+      if ((mask & (MASK_ONE <<  9)) != 0)\n+\teq0 |= (value09 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 10)) != 0)\n+\teq0 |= (value10 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 11)) != 0)\n+\teq0 |= (value11 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 12)) != 0)\n+\teq0 |= (value12 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 13)) != 0)\n+\teq0 |= (value13 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 14)) != 0)\n+\teq0 |= (value14 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 15)) != 0)\n+\teq0 |= (value15 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 16)) != 0)\n+\teq0 |= (value16 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 17)) != 0)\n+\teq0 |= (value17 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 18)) != 0)\n+\teq0 |= (value18 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 19)) != 0)\n+\teq0 |= (value19 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 20)) != 0)\n+\teq0 |= (value20 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 21)) != 0)\n+\teq0 |= (value21 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 22)) != 0)\n+\teq0 |= (value22 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 23)) != 0)\n+\teq0 |= (value23 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 24)) != 0)\n+\teq0 |= (value24 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 25)) != 0)\n+\teq0 |= (value25 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 26)) != 0)\n+\teq0 |= (value26 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 27)) != 0)\n+\teq0 |= (value27 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 28)) != 0)\n+\teq0 |= (value28 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 29)) != 0)\n+\teq0 |= (value29 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 30)) != 0)\n+\teq0 |= (value30 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 31)) != 0)\n+\teq0 |= (value31 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 32)) != 0)\n+\teq0 |= (value32 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 33)) != 0)\n+\teq0 |= (value33 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 34)) != 0)\n+\teq0 |= (value34 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 35)) != 0)\n+\teq0 |= (value35 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 36)) != 0)\n+\teq0 |= (value36 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 37)) != 0)\n+\teq0 |= (value37 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 38)) != 0)\n+\teq0 |= (value38 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 39)) != 0)\n+\teq0 |= (value39 == ZERO);\n+\n+      *eq0_ptr++ = eq0;\n+    }\n+\n+  return (  value00 + value01 + value02 + value03 + value04\n+\t  + value05 + value06 + value07 + value08 + value09\n+\t  + value10 + value11 + value12 + value13 + value14\n+\t  + value15 + value16 + value17 + value18 + value19\n+\t  + value20 + value21 + value22 + value23 + value24\n+\t  + value25 + value26 + value27 + value28 + value29\n+\t  + value30 + value31 + value32 + value33 + value34\n+\t  + value35 + value36 + value37 + value38 + value39);\n+}\n+\n+/* { dg-final { scan-assembler \"fadd\"     } } */\n+/* { dg-final { scan-assembler \"fsub\"     } } */\n+/* { dg-final { scan-assembler \"fmul\"     } } */\n+/* { dg-final { scan-assembler \"fdiv\"     } } */\n+/* { dg-final { scan-assembler \"fcmpu\"    } } */\n+/* { dg-final { scan-assembler \"xsadddp\"  } } */\n+/* { dg-final { scan-assembler \"xssubdp\"  } } */\n+/* { dg-final { scan-assembler \"xsmuldp\"  } } */\n+/* { dg-final { scan-assembler \"xsdivdp\"  } } */\n+/* { dg-final { scan-assembler \"xscmpudp\" } } */"}, {"sha": "83f8b8e52a27fe2a8f9132ab45d2c6d70fe1037c", "filename": "gcc/testsuite/gcc.target/powerpc/pr65849-2.c", "status": "added", "additions": 728, "deletions": 0, "changes": 728, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7d9f0eaecc3896149504cc44de789e6cbb2366/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr65849-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7d9f0eaecc3896149504cc44de789e6cbb2366/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr65849-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr65849-2.c?ref=6d7d9f0eaecc3896149504cc44de789e6cbb2366", "patch": "@@ -0,0 +1,728 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-mcpu=power8 -O2 -mno-upper-regs-sf\" } */\n+\n+/* Test whether we can enable the -mupper-regs-sf with target pragmas.  Make\n+   sure float values are allocated to the Altivec registers as well as the\n+   traditional FPR registers.  */\n+\n+#ifndef TYPE\n+#define TYPE float\n+#endif\n+\n+#ifndef MASK_TYPE\n+#define MASK_TYPE unsigned long long\n+#endif\n+\n+#define MASK_ONE\t((MASK_TYPE)1)\n+#define ZERO\t\t((TYPE) 0.0)\n+\n+#pragma GCC target (\"upper-regs-sf\")\n+TYPE\n+test_add (const MASK_TYPE *add_mask, const TYPE *add_values,\n+\t  const MASK_TYPE *sub_mask, const TYPE *sub_values,\n+\t  const MASK_TYPE *mul_mask, const TYPE *mul_values,\n+\t  const MASK_TYPE *div_mask, const TYPE *div_values,\n+\t  const MASK_TYPE *eq0_mask, int *eq0_ptr)\n+{\n+  TYPE value;\n+  TYPE value00\t= ZERO;\n+  TYPE value01\t= ZERO;\n+  TYPE value02\t= ZERO;\n+  TYPE value03\t= ZERO;\n+  TYPE value04\t= ZERO;\n+  TYPE value05\t= ZERO;\n+  TYPE value06\t= ZERO;\n+  TYPE value07\t= ZERO;\n+  TYPE value08\t= ZERO;\n+  TYPE value09\t= ZERO;\n+  TYPE value10\t= ZERO;\n+  TYPE value11\t= ZERO;\n+  TYPE value12\t= ZERO;\n+  TYPE value13\t= ZERO;\n+  TYPE value14\t= ZERO;\n+  TYPE value15\t= ZERO;\n+  TYPE value16\t= ZERO;\n+  TYPE value17\t= ZERO;\n+  TYPE value18\t= ZERO;\n+  TYPE value19\t= ZERO;\n+  TYPE value20\t= ZERO;\n+  TYPE value21\t= ZERO;\n+  TYPE value22\t= ZERO;\n+  TYPE value23\t= ZERO;\n+  TYPE value24\t= ZERO;\n+  TYPE value25\t= ZERO;\n+  TYPE value26\t= ZERO;\n+  TYPE value27\t= ZERO;\n+  TYPE value28\t= ZERO;\n+  TYPE value29\t= ZERO;\n+  TYPE value30\t= ZERO;\n+  TYPE value31\t= ZERO;\n+  TYPE value32\t= ZERO;\n+  TYPE value33\t= ZERO;\n+  TYPE value34\t= ZERO;\n+  TYPE value35\t= ZERO;\n+  TYPE value36\t= ZERO;\n+  TYPE value37\t= ZERO;\n+  TYPE value38\t= ZERO;\n+  TYPE value39\t= ZERO;\n+  MASK_TYPE mask;\n+  int eq0;\n+\n+  while ((mask = *add_mask++) != 0)\n+    {\n+      value = *add_values++;\n+\n+      __asm__ (\" #reg %0\" : \"+d\" (value));\n+\n+      if ((mask & (MASK_ONE <<  0)) != 0)\n+\tvalue00 += value;\n+\n+      if ((mask & (MASK_ONE <<  1)) != 0)\n+\tvalue01 += value;\n+\n+      if ((mask & (MASK_ONE <<  2)) != 0)\n+\tvalue02 += value;\n+\n+      if ((mask & (MASK_ONE <<  3)) != 0)\n+\tvalue03 += value;\n+\n+      if ((mask & (MASK_ONE <<  4)) != 0)\n+\tvalue04 += value;\n+\n+      if ((mask & (MASK_ONE <<  5)) != 0)\n+\tvalue05 += value;\n+\n+      if ((mask & (MASK_ONE <<  6)) != 0)\n+\tvalue06 += value;\n+\n+      if ((mask & (MASK_ONE <<  7)) != 0)\n+\tvalue07 += value;\n+\n+      if ((mask & (MASK_ONE <<  8)) != 0)\n+\tvalue08 += value;\n+\n+      if ((mask & (MASK_ONE <<  9)) != 0)\n+\tvalue09 += value;\n+\n+      if ((mask & (MASK_ONE << 10)) != 0)\n+\tvalue10 += value;\n+\n+      if ((mask & (MASK_ONE << 11)) != 0)\n+\tvalue11 += value;\n+\n+      if ((mask & (MASK_ONE << 12)) != 0)\n+\tvalue12 += value;\n+\n+      if ((mask & (MASK_ONE << 13)) != 0)\n+\tvalue13 += value;\n+\n+      if ((mask & (MASK_ONE << 14)) != 0)\n+\tvalue14 += value;\n+\n+      if ((mask & (MASK_ONE << 15)) != 0)\n+\tvalue15 += value;\n+\n+      if ((mask & (MASK_ONE << 16)) != 0)\n+\tvalue16 += value;\n+\n+      if ((mask & (MASK_ONE << 17)) != 0)\n+\tvalue17 += value;\n+\n+      if ((mask & (MASK_ONE << 18)) != 0)\n+\tvalue18 += value;\n+\n+      if ((mask & (MASK_ONE << 19)) != 0)\n+\tvalue19 += value;\n+\n+      if ((mask & (MASK_ONE << 20)) != 0)\n+\tvalue20 += value;\n+\n+      if ((mask & (MASK_ONE << 21)) != 0)\n+\tvalue21 += value;\n+\n+      if ((mask & (MASK_ONE << 22)) != 0)\n+\tvalue22 += value;\n+\n+      if ((mask & (MASK_ONE << 23)) != 0)\n+\tvalue23 += value;\n+\n+      if ((mask & (MASK_ONE << 24)) != 0)\n+\tvalue24 += value;\n+\n+      if ((mask & (MASK_ONE << 25)) != 0)\n+\tvalue25 += value;\n+\n+      if ((mask & (MASK_ONE << 26)) != 0)\n+\tvalue26 += value;\n+\n+      if ((mask & (MASK_ONE << 27)) != 0)\n+\tvalue27 += value;\n+\n+      if ((mask & (MASK_ONE << 28)) != 0)\n+\tvalue28 += value;\n+\n+      if ((mask & (MASK_ONE << 29)) != 0)\n+\tvalue29 += value;\n+\n+      if ((mask & (MASK_ONE << 30)) != 0)\n+\tvalue30 += value;\n+\n+      if ((mask & (MASK_ONE << 31)) != 0)\n+\tvalue31 += value;\n+\n+      if ((mask & (MASK_ONE << 32)) != 0)\n+\tvalue32 += value;\n+\n+      if ((mask & (MASK_ONE << 33)) != 0)\n+\tvalue33 += value;\n+\n+      if ((mask & (MASK_ONE << 34)) != 0)\n+\tvalue34 += value;\n+\n+      if ((mask & (MASK_ONE << 35)) != 0)\n+\tvalue35 += value;\n+\n+      if ((mask & (MASK_ONE << 36)) != 0)\n+\tvalue36 += value;\n+\n+      if ((mask & (MASK_ONE << 37)) != 0)\n+\tvalue37 += value;\n+\n+      if ((mask & (MASK_ONE << 38)) != 0)\n+\tvalue38 += value;\n+\n+      if ((mask & (MASK_ONE << 39)) != 0)\n+\tvalue39 += value;\n+    }\n+\n+  while ((mask = *sub_mask++) != 0)\n+    {\n+      value = *sub_values++;\n+\n+      __asm__ (\" #reg %0\" : \"+d\" (value));\n+\n+      if ((mask & (MASK_ONE <<  0)) != 0)\n+\tvalue00 -= value;\n+\n+      if ((mask & (MASK_ONE <<  1)) != 0)\n+\tvalue01 -= value;\n+\n+      if ((mask & (MASK_ONE <<  2)) != 0)\n+\tvalue02 -= value;\n+\n+      if ((mask & (MASK_ONE <<  3)) != 0)\n+\tvalue03 -= value;\n+\n+      if ((mask & (MASK_ONE <<  4)) != 0)\n+\tvalue04 -= value;\n+\n+      if ((mask & (MASK_ONE <<  5)) != 0)\n+\tvalue05 -= value;\n+\n+      if ((mask & (MASK_ONE <<  6)) != 0)\n+\tvalue06 -= value;\n+\n+      if ((mask & (MASK_ONE <<  7)) != 0)\n+\tvalue07 -= value;\n+\n+      if ((mask & (MASK_ONE <<  8)) != 0)\n+\tvalue08 -= value;\n+\n+      if ((mask & (MASK_ONE <<  9)) != 0)\n+\tvalue09 -= value;\n+\n+      if ((mask & (MASK_ONE << 10)) != 0)\n+\tvalue10 -= value;\n+\n+      if ((mask & (MASK_ONE << 11)) != 0)\n+\tvalue11 -= value;\n+\n+      if ((mask & (MASK_ONE << 12)) != 0)\n+\tvalue12 -= value;\n+\n+      if ((mask & (MASK_ONE << 13)) != 0)\n+\tvalue13 -= value;\n+\n+      if ((mask & (MASK_ONE << 14)) != 0)\n+\tvalue14 -= value;\n+\n+      if ((mask & (MASK_ONE << 15)) != 0)\n+\tvalue15 -= value;\n+\n+      if ((mask & (MASK_ONE << 16)) != 0)\n+\tvalue16 -= value;\n+\n+      if ((mask & (MASK_ONE << 17)) != 0)\n+\tvalue17 -= value;\n+\n+      if ((mask & (MASK_ONE << 18)) != 0)\n+\tvalue18 -= value;\n+\n+      if ((mask & (MASK_ONE << 19)) != 0)\n+\tvalue19 -= value;\n+\n+      if ((mask & (MASK_ONE << 20)) != 0)\n+\tvalue20 -= value;\n+\n+      if ((mask & (MASK_ONE << 21)) != 0)\n+\tvalue21 -= value;\n+\n+      if ((mask & (MASK_ONE << 22)) != 0)\n+\tvalue22 -= value;\n+\n+      if ((mask & (MASK_ONE << 23)) != 0)\n+\tvalue23 -= value;\n+\n+      if ((mask & (MASK_ONE << 24)) != 0)\n+\tvalue24 -= value;\n+\n+      if ((mask & (MASK_ONE << 25)) != 0)\n+\tvalue25 -= value;\n+\n+      if ((mask & (MASK_ONE << 26)) != 0)\n+\tvalue26 -= value;\n+\n+      if ((mask & (MASK_ONE << 27)) != 0)\n+\tvalue27 -= value;\n+\n+      if ((mask & (MASK_ONE << 28)) != 0)\n+\tvalue28 -= value;\n+\n+      if ((mask & (MASK_ONE << 29)) != 0)\n+\tvalue29 -= value;\n+\n+      if ((mask & (MASK_ONE << 30)) != 0)\n+\tvalue30 -= value;\n+\n+      if ((mask & (MASK_ONE << 31)) != 0)\n+\tvalue31 -= value;\n+\n+      if ((mask & (MASK_ONE << 32)) != 0)\n+\tvalue32 -= value;\n+\n+      if ((mask & (MASK_ONE << 33)) != 0)\n+\tvalue33 -= value;\n+\n+      if ((mask & (MASK_ONE << 34)) != 0)\n+\tvalue34 -= value;\n+\n+      if ((mask & (MASK_ONE << 35)) != 0)\n+\tvalue35 -= value;\n+\n+      if ((mask & (MASK_ONE << 36)) != 0)\n+\tvalue36 -= value;\n+\n+      if ((mask & (MASK_ONE << 37)) != 0)\n+\tvalue37 -= value;\n+\n+      if ((mask & (MASK_ONE << 38)) != 0)\n+\tvalue38 -= value;\n+\n+      if ((mask & (MASK_ONE << 39)) != 0)\n+\tvalue39 -= value;\n+    }\n+\n+  while ((mask = *mul_mask++) != 0)\n+    {\n+      value = *mul_values++;\n+\n+      __asm__ (\" #reg %0\" : \"+d\" (value));\n+\n+      if ((mask & (MASK_ONE <<  0)) != 0)\n+\tvalue00 *= value;\n+\n+      if ((mask & (MASK_ONE <<  1)) != 0)\n+\tvalue01 *= value;\n+\n+      if ((mask & (MASK_ONE <<  2)) != 0)\n+\tvalue02 *= value;\n+\n+      if ((mask & (MASK_ONE <<  3)) != 0)\n+\tvalue03 *= value;\n+\n+      if ((mask & (MASK_ONE <<  4)) != 0)\n+\tvalue04 *= value;\n+\n+      if ((mask & (MASK_ONE <<  5)) != 0)\n+\tvalue05 *= value;\n+\n+      if ((mask & (MASK_ONE <<  6)) != 0)\n+\tvalue06 *= value;\n+\n+      if ((mask & (MASK_ONE <<  7)) != 0)\n+\tvalue07 *= value;\n+\n+      if ((mask & (MASK_ONE <<  8)) != 0)\n+\tvalue08 *= value;\n+\n+      if ((mask & (MASK_ONE <<  9)) != 0)\n+\tvalue09 *= value;\n+\n+      if ((mask & (MASK_ONE << 10)) != 0)\n+\tvalue10 *= value;\n+\n+      if ((mask & (MASK_ONE << 11)) != 0)\n+\tvalue11 *= value;\n+\n+      if ((mask & (MASK_ONE << 12)) != 0)\n+\tvalue12 *= value;\n+\n+      if ((mask & (MASK_ONE << 13)) != 0)\n+\tvalue13 *= value;\n+\n+      if ((mask & (MASK_ONE << 14)) != 0)\n+\tvalue14 *= value;\n+\n+      if ((mask & (MASK_ONE << 15)) != 0)\n+\tvalue15 *= value;\n+\n+      if ((mask & (MASK_ONE << 16)) != 0)\n+\tvalue16 *= value;\n+\n+      if ((mask & (MASK_ONE << 17)) != 0)\n+\tvalue17 *= value;\n+\n+      if ((mask & (MASK_ONE << 18)) != 0)\n+\tvalue18 *= value;\n+\n+      if ((mask & (MASK_ONE << 19)) != 0)\n+\tvalue19 *= value;\n+\n+      if ((mask & (MASK_ONE << 20)) != 0)\n+\tvalue20 *= value;\n+\n+      if ((mask & (MASK_ONE << 21)) != 0)\n+\tvalue21 *= value;\n+\n+      if ((mask & (MASK_ONE << 22)) != 0)\n+\tvalue22 *= value;\n+\n+      if ((mask & (MASK_ONE << 23)) != 0)\n+\tvalue23 *= value;\n+\n+      if ((mask & (MASK_ONE << 24)) != 0)\n+\tvalue24 *= value;\n+\n+      if ((mask & (MASK_ONE << 25)) != 0)\n+\tvalue25 *= value;\n+\n+      if ((mask & (MASK_ONE << 26)) != 0)\n+\tvalue26 *= value;\n+\n+      if ((mask & (MASK_ONE << 27)) != 0)\n+\tvalue27 *= value;\n+\n+      if ((mask & (MASK_ONE << 28)) != 0)\n+\tvalue28 *= value;\n+\n+      if ((mask & (MASK_ONE << 29)) != 0)\n+\tvalue29 *= value;\n+\n+      if ((mask & (MASK_ONE << 30)) != 0)\n+\tvalue30 *= value;\n+\n+      if ((mask & (MASK_ONE << 31)) != 0)\n+\tvalue31 *= value;\n+\n+      if ((mask & (MASK_ONE << 32)) != 0)\n+\tvalue32 *= value;\n+\n+      if ((mask & (MASK_ONE << 33)) != 0)\n+\tvalue33 *= value;\n+\n+      if ((mask & (MASK_ONE << 34)) != 0)\n+\tvalue34 *= value;\n+\n+      if ((mask & (MASK_ONE << 35)) != 0)\n+\tvalue35 *= value;\n+\n+      if ((mask & (MASK_ONE << 36)) != 0)\n+\tvalue36 *= value;\n+\n+      if ((mask & (MASK_ONE << 37)) != 0)\n+\tvalue37 *= value;\n+\n+      if ((mask & (MASK_ONE << 38)) != 0)\n+\tvalue38 *= value;\n+\n+      if ((mask & (MASK_ONE << 39)) != 0)\n+\tvalue39 *= value;\n+    }\n+\n+  while ((mask = *div_mask++) != 0)\n+    {\n+      value = *div_values++;\n+\n+      __asm__ (\" #reg %0\" : \"+d\" (value));\n+\n+      if ((mask & (MASK_ONE <<  0)) != 0)\n+\tvalue00 /= value;\n+\n+      if ((mask & (MASK_ONE <<  1)) != 0)\n+\tvalue01 /= value;\n+\n+      if ((mask & (MASK_ONE <<  2)) != 0)\n+\tvalue02 /= value;\n+\n+      if ((mask & (MASK_ONE <<  3)) != 0)\n+\tvalue03 /= value;\n+\n+      if ((mask & (MASK_ONE <<  4)) != 0)\n+\tvalue04 /= value;\n+\n+      if ((mask & (MASK_ONE <<  5)) != 0)\n+\tvalue05 /= value;\n+\n+      if ((mask & (MASK_ONE <<  6)) != 0)\n+\tvalue06 /= value;\n+\n+      if ((mask & (MASK_ONE <<  7)) != 0)\n+\tvalue07 /= value;\n+\n+      if ((mask & (MASK_ONE <<  8)) != 0)\n+\tvalue08 /= value;\n+\n+      if ((mask & (MASK_ONE <<  9)) != 0)\n+\tvalue09 /= value;\n+\n+      if ((mask & (MASK_ONE << 10)) != 0)\n+\tvalue10 /= value;\n+\n+      if ((mask & (MASK_ONE << 11)) != 0)\n+\tvalue11 /= value;\n+\n+      if ((mask & (MASK_ONE << 12)) != 0)\n+\tvalue12 /= value;\n+\n+      if ((mask & (MASK_ONE << 13)) != 0)\n+\tvalue13 /= value;\n+\n+      if ((mask & (MASK_ONE << 14)) != 0)\n+\tvalue14 /= value;\n+\n+      if ((mask & (MASK_ONE << 15)) != 0)\n+\tvalue15 /= value;\n+\n+      if ((mask & (MASK_ONE << 16)) != 0)\n+\tvalue16 /= value;\n+\n+      if ((mask & (MASK_ONE << 17)) != 0)\n+\tvalue17 /= value;\n+\n+      if ((mask & (MASK_ONE << 18)) != 0)\n+\tvalue18 /= value;\n+\n+      if ((mask & (MASK_ONE << 19)) != 0)\n+\tvalue19 /= value;\n+\n+      if ((mask & (MASK_ONE << 20)) != 0)\n+\tvalue20 /= value;\n+\n+      if ((mask & (MASK_ONE << 21)) != 0)\n+\tvalue21 /= value;\n+\n+      if ((mask & (MASK_ONE << 22)) != 0)\n+\tvalue22 /= value;\n+\n+      if ((mask & (MASK_ONE << 23)) != 0)\n+\tvalue23 /= value;\n+\n+      if ((mask & (MASK_ONE << 24)) != 0)\n+\tvalue24 /= value;\n+\n+      if ((mask & (MASK_ONE << 25)) != 0)\n+\tvalue25 /= value;\n+\n+      if ((mask & (MASK_ONE << 26)) != 0)\n+\tvalue26 /= value;\n+\n+      if ((mask & (MASK_ONE << 27)) != 0)\n+\tvalue27 /= value;\n+\n+      if ((mask & (MASK_ONE << 28)) != 0)\n+\tvalue28 /= value;\n+\n+      if ((mask & (MASK_ONE << 29)) != 0)\n+\tvalue29 /= value;\n+\n+      if ((mask & (MASK_ONE << 30)) != 0)\n+\tvalue30 /= value;\n+\n+      if ((mask & (MASK_ONE << 31)) != 0)\n+\tvalue31 /= value;\n+\n+      if ((mask & (MASK_ONE << 32)) != 0)\n+\tvalue32 /= value;\n+\n+      if ((mask & (MASK_ONE << 33)) != 0)\n+\tvalue33 /= value;\n+\n+      if ((mask & (MASK_ONE << 34)) != 0)\n+\tvalue34 /= value;\n+\n+      if ((mask & (MASK_ONE << 35)) != 0)\n+\tvalue35 /= value;\n+\n+      if ((mask & (MASK_ONE << 36)) != 0)\n+\tvalue36 /= value;\n+\n+      if ((mask & (MASK_ONE << 37)) != 0)\n+\tvalue37 /= value;\n+\n+      if ((mask & (MASK_ONE << 38)) != 0)\n+\tvalue38 /= value;\n+\n+      if ((mask & (MASK_ONE << 39)) != 0)\n+\tvalue39 /= value;\n+    }\n+\n+  while ((mask = *eq0_mask++) != 0)\n+    {\n+      eq0 = 0;\n+\n+      if ((mask & (MASK_ONE <<  0)) != 0)\n+\teq0 |= (value00 == ZERO);\n+\n+      if ((mask & (MASK_ONE <<  1)) != 0)\n+\teq0 |= (value01 == ZERO);\n+\n+      if ((mask & (MASK_ONE <<  2)) != 0)\n+\teq0 |= (value02 == ZERO);\n+\n+      if ((mask & (MASK_ONE <<  3)) != 0)\n+\teq0 |= (value03 == ZERO);\n+\n+      if ((mask & (MASK_ONE <<  4)) != 0)\n+\teq0 |= (value04 == ZERO);\n+\n+      if ((mask & (MASK_ONE <<  5)) != 0)\n+\teq0 |= (value05 == ZERO);\n+\n+      if ((mask & (MASK_ONE <<  6)) != 0)\n+\teq0 |= (value06 == ZERO);\n+\n+      if ((mask & (MASK_ONE <<  7)) != 0)\n+\teq0 |= (value07 == ZERO);\n+\n+      if ((mask & (MASK_ONE <<  8)) != 0)\n+\teq0 |= (value08 == ZERO);\n+\n+      if ((mask & (MASK_ONE <<  9)) != 0)\n+\teq0 |= (value09 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 10)) != 0)\n+\teq0 |= (value10 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 11)) != 0)\n+\teq0 |= (value11 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 12)) != 0)\n+\teq0 |= (value12 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 13)) != 0)\n+\teq0 |= (value13 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 14)) != 0)\n+\teq0 |= (value14 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 15)) != 0)\n+\teq0 |= (value15 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 16)) != 0)\n+\teq0 |= (value16 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 17)) != 0)\n+\teq0 |= (value17 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 18)) != 0)\n+\teq0 |= (value18 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 19)) != 0)\n+\teq0 |= (value19 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 20)) != 0)\n+\teq0 |= (value20 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 21)) != 0)\n+\teq0 |= (value21 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 22)) != 0)\n+\teq0 |= (value22 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 23)) != 0)\n+\teq0 |= (value23 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 24)) != 0)\n+\teq0 |= (value24 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 25)) != 0)\n+\teq0 |= (value25 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 26)) != 0)\n+\teq0 |= (value26 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 27)) != 0)\n+\teq0 |= (value27 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 28)) != 0)\n+\teq0 |= (value28 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 29)) != 0)\n+\teq0 |= (value29 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 30)) != 0)\n+\teq0 |= (value30 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 31)) != 0)\n+\teq0 |= (value31 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 32)) != 0)\n+\teq0 |= (value32 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 33)) != 0)\n+\teq0 |= (value33 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 34)) != 0)\n+\teq0 |= (value34 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 35)) != 0)\n+\teq0 |= (value35 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 36)) != 0)\n+\teq0 |= (value36 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 37)) != 0)\n+\teq0 |= (value37 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 38)) != 0)\n+\teq0 |= (value38 == ZERO);\n+\n+      if ((mask & (MASK_ONE << 39)) != 0)\n+\teq0 |= (value39 == ZERO);\n+\n+      *eq0_ptr++ = eq0;\n+    }\n+\n+  return (  value00 + value01 + value02 + value03 + value04\n+\t  + value05 + value06 + value07 + value08 + value09\n+\t  + value10 + value11 + value12 + value13 + value14\n+\t  + value15 + value16 + value17 + value18 + value19\n+\t  + value20 + value21 + value22 + value23 + value24\n+\t  + value25 + value26 + value27 + value28 + value29\n+\t  + value30 + value31 + value32 + value33 + value34\n+\t  + value35 + value36 + value37 + value38 + value39);\n+}\n+\n+/* { dg-final { scan-assembler \"fadds\"     } } */\n+/* { dg-final { scan-assembler \"fsubs\"     } } */\n+/* { dg-final { scan-assembler \"fmuls\"     } } */\n+/* { dg-final { scan-assembler \"fdivs\"     } } */\n+/* { dg-final { scan-assembler \"fcmpu\"    } } */\n+/* { dg-final { scan-assembler \"xsaddsp\"  } } */\n+/* { dg-final { scan-assembler \"xssubsp\"  } } */\n+/* { dg-final { scan-assembler \"xsmulsp\"  } } */\n+/* { dg-final { scan-assembler \"xsdivsp\"  } } */\n+/* { dg-final { scan-assembler \"xscmpudp\" } } */"}]}