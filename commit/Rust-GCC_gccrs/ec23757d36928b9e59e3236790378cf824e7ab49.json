{"sha": "ec23757d36928b9e59e3236790378cf824e7ab49", "node_id": "C_kwDOANBUbNoAKGVjMjM3NTdkMzY5MjhiOWU1OWUzMjM2NzkwMzc4Y2Y4MjRlN2FiNDk", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-25T14:02:25Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-25T14:11:25Z"}, "message": "Add support for generics within operator overloads\n\nThis ports over some code from the method-call expr to try and infer the\narguments in the function definition when required.\n\nAddresses #809", "tree": {"sha": "51ee5e938c29b56bddf8eb4ee0d818b38b7c440e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51ee5e938c29b56bddf8eb4ee0d818b38b7c440e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec23757d36928b9e59e3236790378cf824e7ab49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec23757d36928b9e59e3236790378cf824e7ab49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec23757d36928b9e59e3236790378cf824e7ab49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec23757d36928b9e59e3236790378cf824e7ab49/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12b7154e90f676222262fe3d6935a950805a8566", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12b7154e90f676222262fe3d6935a950805a8566", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12b7154e90f676222262fe3d6935a950805a8566"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "f8b9f051fa6a37a9cc3f291038224d078fc4cf20", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec23757d36928b9e59e3236790378cf824e7ab49/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec23757d36928b9e59e3236790378cf824e7ab49/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=ec23757d36928b9e59e3236790378cf824e7ab49", "patch": "@@ -1293,6 +1293,8 @@ class TypeCheckExpr : public TypeCheckBase\n       return false;\n \n     // mark the required tree addressable\n+    Adjuster adj (lhs);\n+    TyTy::BaseType *receiver_adjusted_self_ty = adj.adjust_type (adjustments);\n     if (Adjuster::needs_address (adjustments))\n       AddressTakenResolver::SetAddressTaken (*expr.get_expr ().get ());\n \n@@ -1324,14 +1326,12 @@ class TypeCheckExpr : public TypeCheckBase\n \t\tTyTy::FnType *fntype = static_cast<TyTy::FnType *> (lookup);\n \t\trust_assert (fntype->is_method ());\n \n-\t\tAdjuster adj (lhs);\n-\t\tTyTy::BaseType *adjusted = adj.adjust_type (adjustments);\n-\n \t\tbool is_lang_item_impl\n \t\t  = trait_reference->get_mappings ().get_defid ()\n \t\t    == respective_lang_item_id;\n \t\tbool self_is_lang_item_self\n-\t\t  = fntype->get_self_type ()->is_equal (*adjusted);\n+\t\t  = fntype->get_self_type ()->is_equal (\n+\t\t    *receiver_adjusted_self_ty);\n \t\tbool recursive_operator_overload\n \t\t  = is_lang_item_impl && self_is_lang_item_self;\n \n@@ -1415,8 +1415,20 @@ class TypeCheckExpr : public TypeCheckBase\n \t  }\n       }\n \n+    // handle generics\n+    if (!receiver_is_type_param)\n+      {\n+\tif (lookup->needs_generic_substitutions ())\n+\t  {\n+\t    lookup = SubstMapper::InferSubst (lookup, expr.get_locus ());\n+\t  }\n+      }\n+\n     // type check the arguments if required\n     TyTy::FnType *type = static_cast<TyTy::FnType *> (lookup);\n+    rust_assert (type->num_params () > 0);\n+    auto fnparam = type->param_at (0);\n+    fnparam.second->unify (receiver_adjusted_self_ty); // typecheck the self\n     if (rhs == nullptr)\n       {\n \trust_assert (type->num_params () == 1);\n@@ -1429,7 +1441,7 @@ class TypeCheckExpr : public TypeCheckBase\n       }\n \n     // get the return type\n-    TyTy::BaseType *function_ret_tyty = fn->get_return_type ()->clone ();\n+    TyTy::BaseType *function_ret_tyty = type->get_return_type ()->clone ();\n \n     // store the expected fntype\n     context->insert_operator_overload (expr.get_mappings ().get_hirid (), type);"}]}