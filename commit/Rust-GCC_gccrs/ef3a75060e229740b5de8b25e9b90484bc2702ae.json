{"sha": "ef3a75060e229740b5de8b25e9b90484bc2702ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYzYTc1MDYwZTIyOTc0MGI1ZGU4YjI1ZTliOTA0ODRiYzI3MDJhZQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2015-11-24T13:15:43Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2015-11-24T13:15:43Z"}, "message": "Handle C++11 <math.h> overloads on Solaris 12\n\n\t* acinclude.m4 (GLIBCXX_CHECK_MATH11_PROTO): New test.\n\t* configure.ac: Use it.\n\t* configure: Regenerate.\n\t* config.h.in: Regenerate.\n\n\t* include/c_global/cmath [__cplusplus >= 201103L]\n\t(std::fpclassify): Wrap in !__CORRECT_ISO_CPP11_MATH_H_PROTO.\n\t(std::isfinite): Likewise.\n\t(std::isinf): Likewise.\n\t(std::isnan): Likewise.\n\t(std::isnormal): Likewise.\n\t(std::signbit): Likewise.\n\t(std::isgreater): Likewise.\n\t(std::isgreaterequal): Likewise.\n\t(std::isless): Likewise.\n\t(std::islessequal): Likewise.\n\t(std::islessgreater): Likewise.\n\t(std::isunordered): Likewise.\n\t(std::acosh): Likewise.\n\t(std::asinh): Likewise.\n\t(std::atanh): Likewise.\n\t(std::cbrt): Likewise.\n\t(std::copysign): Likewise.\n\t(std::erf): Likewise.\n\t(std::erfc): Likewise.\n\t(std::exp2): Likewise.\n\t(std::expm1): Likewise.\n\t(std::fdim): Likewise.\n\t(std::fma): Likewise.\n\t(std::fmax): Likewise.\n\t(std::fmin): Likewise.\n\t(std::hypot): Likewise.\n\t(std::ilogb): Likewise.\n\t(std::lgamma): Likewise.\n\t(std::llrint): Likewise.\n\t(std::llround): Likewise.\n\t(std::log1p): Likewise.\n\t(std::log2): Likewise.\n\t(std::logb): Likewise.\n\t(std::lrint): Likewise.\n\t(std::lround): Likewise.\n\t(std::nearbyint): Likewise.\n\t(std::nextafter): Likewise.\n\t(std::nexttoward): Likewise.\n\t(std::remainder): Likewise.\n\t(std::remquo): Likewise.\n\t(std::rint): Likewise.\n\t(std::round): Likewise.\n\t(std::scalbln): Likewise.\n\t(std::scalbn): Likewise.\n\t(std::tgamma): Likewise.\n\t(std::trunc): Likewise.\n\t* include/tr1/cmath [_GLIBCXX_USE_C99_MATH_TR1] (std::tr1::acosh):\n\tWrap in !__CORRECT_ISO_CPP11_MATH_H_PROTO.\n\t(std::tr1::asinh): Likewise.\n\t(std::tr1::atanh): Likewise.\n\t(std::tr1::cbrt): Likewise.\n\t(std::tr1::copysign): Likewise.\n\t(std::tr1::erf): Likewise.\n\t(std::tr1::erfc): Likewise.\n\t(std::tr1::exp2): Likewise.\n\t(std::tr1::expm1): Likewise.\n\t(std::tr1::fabs): Likewise.\n\t(std::tr1::fdim): Likewise.\n\t(std::tr1::fma): Likewise.\n\t(std::tr1::fmax): Likewise.\n\t(std::tr1::fmin): Likewise.\n\t(std::tr1::hypot): Likewise.\n\t(std::tr1::ilogb): Likewise.\n\t(std::tr1::lgamma): Likewise.\n\t(std::tr1::llrint): Likewise.\n\t(std::tr1::llround): Likewise.\n\t(std::tr1::log1p): Likewise.\n\t(std::tr1::log2): Likewise.\n\t(std::tr1::logb): Likewise.\n\t(std::tr1::lrint): Likewise.\n\t(std::tr1::lround): Likewise.\n\t(std::tr1::nearbyint): Likewise.\n\t(std::tr1::nextafter): Likewise.\n\t(std::tr1::nexttoward): Likewise.\n\t(std::tr1::remainder): Likewise.\n\t(std::tr1::remquo): Likewise.\n\t(std::tr1::rint): Likewise.\n\t(std::tr1::scalbln): Likewise.\n\t(std::tr1::scalbn): Likewise.\n\t(std::tr1::tgamma): Likewise.\n\t(std::tr1::trunc): Likewise.\n\t(std::tr1::pow): Likewise.\n\n\t* testsuite/26_numerics/headers/cmath/c99_classification_macros_c.cc:\n\tRestrict dg-xfail-if, dg-excess-errors to *-*-solaris2.1[01]*.\n\nFrom-SVN: r230807", "tree": {"sha": "cde511fb00f0fef608bd92523dc754de32fc6ae2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cde511fb00f0fef608bd92523dc754de32fc6ae2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef3a75060e229740b5de8b25e9b90484bc2702ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef3a75060e229740b5de8b25e9b90484bc2702ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef3a75060e229740b5de8b25e9b90484bc2702ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef3a75060e229740b5de8b25e9b90484bc2702ae/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "714e1b3b4f22c4afd2891e956b5c05d7614ab0f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/714e1b3b4f22c4afd2891e956b5c05d7614ab0f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/714e1b3b4f22c4afd2891e956b5c05d7614ab0f9"}], "stats": {"total": 377, "additions": 375, "deletions": 2}, "files": [{"sha": "428e21383f14eb86ae843252b01f9885bc8afc83", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef3a75060e229740b5de8b25e9b90484bc2702ae/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef3a75060e229740b5de8b25e9b90484bc2702ae/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ef3a75060e229740b5de8b25e9b90484bc2702ae", "patch": "@@ -1,3 +1,97 @@\n+2015-11-24  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* acinclude.m4 (GLIBCXX_CHECK_MATH11_PROTO): New test.\n+\t* configure.ac: Use it.\n+\t* configure: Regenerate.\n+\t* config.h.in: Regenerate.\n+\n+\t* include/c_global/cmath [__cplusplus >= 201103L]\n+\t(std::fpclassify): Wrap in !__CORRECT_ISO_CPP11_MATH_H_PROTO.\n+\t(std::isfinite): Likewise.\n+\t(std::isinf): Likewise.\n+\t(std::isnan): Likewise.\n+\t(std::isnormal): Likewise.\n+\t(std::signbit): Likewise.\n+\t(std::isgreater): Likewise.\n+\t(std::isgreaterequal): Likewise.\n+\t(std::isless): Likewise.\n+\t(std::islessequal): Likewise.\n+\t(std::islessgreater): Likewise.\n+\t(std::isunordered): Likewise.\n+\t(std::acosh): Likewise.\n+\t(std::asinh): Likewise.\n+\t(std::atanh): Likewise.\n+\t(std::cbrt): Likewise.\n+\t(std::copysign): Likewise.\n+\t(std::erf): Likewise.\n+\t(std::erfc): Likewise.\n+\t(std::exp2): Likewise.\n+\t(std::expm1): Likewise.\n+\t(std::fdim): Likewise.\n+\t(std::fma): Likewise.\n+\t(std::fmax): Likewise.\n+\t(std::fmin): Likewise.\n+\t(std::hypot): Likewise.\n+\t(std::ilogb): Likewise.\n+\t(std::lgamma): Likewise.\n+\t(std::llrint): Likewise.\n+\t(std::llround): Likewise.\n+\t(std::log1p): Likewise.\n+\t(std::log2): Likewise.\n+\t(std::logb): Likewise.\n+\t(std::lrint): Likewise.\n+\t(std::lround): Likewise.\n+\t(std::nearbyint): Likewise.\n+\t(std::nextafter): Likewise.\n+\t(std::nexttoward): Likewise.\n+\t(std::remainder): Likewise.\n+\t(std::remquo): Likewise.\n+\t(std::rint): Likewise.\n+\t(std::round): Likewise.\n+\t(std::scalbln): Likewise.\n+\t(std::scalbn): Likewise.\n+\t(std::tgamma): Likewise.\n+\t(std::trunc): Likewise.\n+\t* include/tr1/cmath [_GLIBCXX_USE_C99_MATH_TR1] (std::tr1::acosh):\n+\tWrap in !__CORRECT_ISO_CPP11_MATH_H_PROTO.\n+\t(std::tr1::asinh): Likewise.\n+\t(std::tr1::atanh): Likewise.\n+\t(std::tr1::cbrt): Likewise.\n+\t(std::tr1::copysign): Likewise.\n+\t(std::tr1::erf): Likewise.\n+\t(std::tr1::erfc): Likewise.\n+\t(std::tr1::exp2): Likewise.\n+\t(std::tr1::expm1): Likewise.\n+\t(std::tr1::fabs): Likewise.\n+\t(std::tr1::fdim): Likewise.\n+\t(std::tr1::fma): Likewise.\n+\t(std::tr1::fmax): Likewise.\n+\t(std::tr1::fmin): Likewise.\n+\t(std::tr1::hypot): Likewise.\n+\t(std::tr1::ilogb): Likewise.\n+\t(std::tr1::lgamma): Likewise.\n+\t(std::tr1::llrint): Likewise.\n+\t(std::tr1::llround): Likewise.\n+\t(std::tr1::log1p): Likewise.\n+\t(std::tr1::log2): Likewise.\n+\t(std::tr1::logb): Likewise.\n+\t(std::tr1::lrint): Likewise.\n+\t(std::tr1::lround): Likewise.\n+\t(std::tr1::nearbyint): Likewise.\n+\t(std::tr1::nextafter): Likewise.\n+\t(std::tr1::nexttoward): Likewise.\n+\t(std::tr1::remainder): Likewise.\n+\t(std::tr1::remquo): Likewise.\n+\t(std::tr1::rint): Likewise.\n+\t(std::tr1::scalbln): Likewise.\n+\t(std::tr1::scalbn): Likewise.\n+\t(std::tr1::tgamma): Likewise.\n+\t(std::tr1::trunc): Likewise.\n+\t(std::tr1::pow): Likewise.\n+\n+\t* testsuite/26_numerics/headers/cmath/c99_classification_macros_c.cc:\n+\tRestrict dg-xfail-if, dg-excess-errors to *-*-solaris2.1[01]*.\n+\n 2015-11-21  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* testsuite/23_containers/vector/profile/vector.cc: Add maxdata"}, {"sha": "312b1fd89249177f14906700edc96a1222bb7cf3", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef3a75060e229740b5de8b25e9b90484bc2702ae/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef3a75060e229740b5de8b25e9b90484bc2702ae/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=ef3a75060e229740b5de8b25e9b90484bc2702ae", "patch": "@@ -2146,6 +2146,52 @@ AC_DEFUN([GLIBCXX_CHECK_STDIO_PROTO], [\n   AC_LANG_RESTORE\n ])\n \n+dnl\n+dnl Check whether required C++11 overloads are present in <math.h>.\n+dnl\n+AC_DEFUN([GLIBCXX_CHECK_MATH11_PROTO], [\n+\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -std=c++11\"\n+\n+  case \"$host\" in\n+    *-*-solaris2.*)\n+      # Solaris 12 introduced the C++11 <math.h> overloads.  A backport to\n+      # a Solaris 11.3 SRU is likely, maybe even a Solaris 10 patch.\n+      AC_MSG_CHECKING([for C++11 <math.h> overloads])\n+      AC_CACHE_VAL(glibcxx_cv_math11_overload, [\n+\tAC_COMPILE_IFELSE([AC_LANG_SOURCE(\n+\t  [#include <math.h>\n+\t   #undef isfinite\n+\t   namespace std {\n+\t     inline bool isfinite(float __x)\n+\t     { return __builtin_isfinite(__x); }\n+\t   }\n+\t])],\n+\t[glibcxx_cv_math11_overload=no],\n+\t[glibcxx_cv_math11_overload=yes]\n+      )])\n+\n+      # autoheader cannot handle indented templates.\n+      AH_VERBATIM([__CORRECT_ISO_CPP11_MATH_H_PROTO],\n+        [/* Define if all C++11 overloads are available in <math.h>.  */\n+#if __cplusplus >= 201103L\n+#undef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#endif])\n+\n+      if test $glibcxx_cv_math11_overload = yes; then\n+        AC_DEFINE(__CORRECT_ISO_CPP11_MATH_H_PROTO)\n+      fi\n+      AC_MSG_RESULT([$glibcxx_cv_math11_overload])\n+      ;;\n+  esac\n+\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+])\n+\n dnl\n dnl Check whether macros, etc are present for <system_error>\n dnl"}, {"sha": "b6cb7aa86e7098cece4aa40549b3522857bf85fe", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef3a75060e229740b5de8b25e9b90484bc2702ae/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef3a75060e229740b5de8b25e9b90484bc2702ae/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=ef3a75060e229740b5de8b25e9b90484bc2702ae", "patch": "@@ -952,6 +952,11 @@\n /* Define to 1 if mutex_timedlock is available. */\n #undef _GTHREAD_USE_MUTEX_TIMEDLOCK\n \n+/* Define if all C++11 overloads are available in <math.h>.  */\n+#if __cplusplus >= 201103L\n+#undef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#endif\n+\n #if defined (HAVE__ACOSF) && ! defined (HAVE_ACOSF)\n # define HAVE_ACOSF 1\n # define acosf _acosf"}, {"sha": "86e66e10ca03fd266c9d855f4bf0aa1e102ebabc", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef3a75060e229740b5de8b25e9b90484bc2702ae/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef3a75060e229740b5de8b25e9b90484bc2702ae/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=ef3a75060e229740b5de8b25e9b90484bc2702ae", "patch": "@@ -18120,6 +18120,68 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n \n \n+\n+  ac_ext=cpp\n+ac_cpp='$CXXCPP $CPPFLAGS'\n+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n+\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -std=c++11\"\n+\n+  case \"$host\" in\n+    *-*-solaris2.*)\n+      # Solaris 12 introduced the C++11 <math.h> overloads.  A backport to\n+      # a Solaris 11.3 SRU is likely, maybe even a Solaris 10 patch.\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for C++11 <math.h> overloads\" >&5\n+$as_echo_n \"checking for C++11 <math.h> overloads... \" >&6; }\n+      if test \"${glibcxx_cv_math11_overload+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+\tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <math.h>\n+\t   #undef isfinite\n+\t   namespace std {\n+\t     inline bool isfinite(float __x)\n+\t     { return __builtin_isfinite(__x); }\n+\t   }\n+\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_math11_overload=no\n+else\n+  glibcxx_cv_math11_overload=yes\n+\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+\n+\n+      # autoheader cannot handle indented templates.\n+\n+\n+      if test $glibcxx_cv_math11_overload = yes; then\n+        $as_echo \"#define __CORRECT_ISO_CPP11_MATH_H_PROTO 1\" >>confdefs.h\n+\n+      fi\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_math11_overload\" >&5\n+$as_echo \"$glibcxx_cv_math11_overload\" >&6; }\n+      ;;\n+  esac\n+\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n+\n+\n+\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for EOWNERDEAD\" >&5\n $as_echo_n \"checking for EOWNERDEAD... \" >&6; }\n if test \"${glibcxx_cv_system_error1+set}\" = set; then :"}, {"sha": "4361cf0e4508b1df56c8d3172710a7608a22d84c", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef3a75060e229740b5de8b25e9b90484bc2702ae/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef3a75060e229740b5de8b25e9b90484bc2702ae/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=ef3a75060e229740b5de8b25e9b90484bc2702ae", "patch": "@@ -180,6 +180,7 @@ GLIBCXX_ENABLE_VTABLE_VERIFY([no])\n \n # Checks for operating systems support that doesn't require linking.\n GLIBCXX_CHECK_STDIO_PROTO\n+GLIBCXX_CHECK_MATH11_PROTO\n GLIBCXX_CHECK_SYSTEM_ERROR\n GLIBCXX_CHECK_UCHAR_H\n "}, {"sha": "c5fca4dec7159abd9cb7a3d6692dd7efc66d8b99", "filename": "libstdc++-v3/include/c_global/cmath", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef3a75060e229740b5de8b25e9b90484bc2702ae/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef3a75060e229740b5de8b25e9b90484bc2702ae/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath?ref=ef3a75060e229740b5de8b25e9b90484bc2702ae", "patch": "@@ -557,6 +557,8 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus >= 201103L\n+\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr int\n   fpclassify(float __x)\n   { return __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL,\n@@ -571,13 +573,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   fpclassify(long double __x)\n   { return __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL,\n \t\t\t\tFP_SUBNORMAL, FP_ZERO, __x); }\n+#endif\n \n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n                                               int>::__type\n     fpclassify(_Tp __x)\n     { return __x != 0 ? FP_NORMAL : FP_ZERO; }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr bool\n   isfinite(float __x)\n   { return __builtin_isfinite(__x); }\n@@ -589,13 +593,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   constexpr bool\n   isfinite(long double __x)\n   { return __builtin_isfinite(__x); }\n+#endif\n \n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n                                               bool>::__type\n     isfinite(_Tp __x)\n     { return true; }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr bool\n   isinf(float __x)\n   { return __builtin_isinf(__x); }\n@@ -607,13 +613,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   constexpr bool\n   isinf(long double __x)\n   { return __builtin_isinf(__x); }\n+#endif\n \n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n                                               bool>::__type\n     isinf(_Tp __x)\n     { return false; }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr bool\n   isnan(float __x)\n   { return __builtin_isnan(__x); }\n@@ -625,13 +633,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   constexpr bool\n   isnan(long double __x)\n   { return __builtin_isnan(__x); }\n+#endif\n \n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n                                               bool>::__type\n     isnan(_Tp __x)\n     { return false; }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr bool\n   isnormal(float __x)\n   { return __builtin_isnormal(__x); }\n@@ -643,13 +653,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   constexpr bool\n   isnormal(long double __x)\n   { return __builtin_isnormal(__x); }\n+#endif\n \n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n                                               bool>::__type\n     isnormal(_Tp __x)\n     { return __x != 0 ? true : false; }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   // Note: middle-end/36757 is fixed, __builtin_signbit is type-generic.\n   constexpr bool\n   signbit(float __x)\n@@ -662,13 +674,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   constexpr bool\n   signbit(long double __x)\n   { return __builtin_signbit(__x); }\n+#endif\n \n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n                                               bool>::__type\n     signbit(_Tp __x)\n     { return __x < 0 ? true : false; }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr bool\n   isgreater(float __x, float __y)\n   { return __builtin_isgreater(__x, __y); }\n@@ -680,6 +694,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   constexpr bool\n   isgreater(long double __x, long double __y)\n   { return __builtin_isgreater(__x, __y); }\n+#endif\n \n   template<typename _Tp, typename _Up>\n     constexpr typename\n@@ -691,6 +706,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __builtin_isgreater(__type(__x), __type(__y));\n     }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr bool\n   isgreaterequal(float __x, float __y)\n   { return __builtin_isgreaterequal(__x, __y); }\n@@ -702,6 +718,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   constexpr bool\n   isgreaterequal(long double __x, long double __y)\n   { return __builtin_isgreaterequal(__x, __y); }\n+#endif\n \n   template<typename _Tp, typename _Up>\n     constexpr typename\n@@ -713,6 +730,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __builtin_isgreaterequal(__type(__x), __type(__y));\n     }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr bool\n   isless(float __x, float __y)\n   { return __builtin_isless(__x, __y); }\n@@ -724,6 +742,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   constexpr bool\n   isless(long double __x, long double __y)\n   { return __builtin_isless(__x, __y); }\n+#endif\n \n   template<typename _Tp, typename _Up>\n     constexpr typename\n@@ -735,6 +754,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __builtin_isless(__type(__x), __type(__y));\n     }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr bool\n   islessequal(float __x, float __y)\n   { return __builtin_islessequal(__x, __y); }\n@@ -746,6 +766,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   constexpr bool\n   islessequal(long double __x, long double __y)\n   { return __builtin_islessequal(__x, __y); }\n+#endif\n \n   template<typename _Tp, typename _Up>\n     constexpr typename\n@@ -757,6 +778,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __builtin_islessequal(__type(__x), __type(__y));\n     }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr bool\n   islessgreater(float __x, float __y)\n   { return __builtin_islessgreater(__x, __y); }\n@@ -768,6 +790,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   constexpr bool\n   islessgreater(long double __x, long double __y)\n   { return __builtin_islessgreater(__x, __y); }\n+#endif\n \n   template<typename _Tp, typename _Up>\n     constexpr typename\n@@ -779,6 +802,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __builtin_islessgreater(__type(__x), __type(__y));\n     }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr bool\n   isunordered(float __x, float __y)\n   { return __builtin_isunordered(__x, __y); }\n@@ -790,6 +814,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   constexpr bool\n   isunordered(long double __x, long double __y)\n   { return __builtin_isunordered(__x, __y); }\n+#endif\n \n   template<typename _Tp, typename _Up>\n     constexpr typename\n@@ -1180,69 +1205,79 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   using ::truncl;\n \n   /// Additional overloads.\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr float\n   acosh(float __x)\n   { return __builtin_acoshf(__x); }\n \n   constexpr long double\n   acosh(long double __x)\n   { return __builtin_acoshl(__x); }\n+#endif\n \n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     acosh(_Tp __x)\n     { return __builtin_acosh(__x); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr float\n   asinh(float __x)\n   { return __builtin_asinhf(__x); }\n \n   constexpr long double\n   asinh(long double __x)\n   { return __builtin_asinhl(__x); }\n+#endif\n \n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     asinh(_Tp __x)\n     { return __builtin_asinh(__x); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr float\n   atanh(float __x)\n   { return __builtin_atanhf(__x); }\n \n   constexpr long double\n   atanh(long double __x)\n   { return __builtin_atanhl(__x); }\n+#endif\n \n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     atanh(_Tp __x)\n     { return __builtin_atanh(__x); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr float\n   cbrt(float __x)\n   { return __builtin_cbrtf(__x); }\n \n   constexpr long double\n   cbrt(long double __x)\n   { return __builtin_cbrtl(__x); }\n+#endif\n \n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     cbrt(_Tp __x)\n     { return __builtin_cbrt(__x); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr float\n   copysign(float __x, float __y)\n   { return __builtin_copysignf(__x, __y); }\n \n   constexpr long double\n   copysign(long double __x, long double __y)\n   { return __builtin_copysignl(__x, __y); }\n+#endif\n \n   template<typename _Tp, typename _Up>\n     constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n@@ -1252,69 +1287,79 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return copysign(__type(__x), __type(__y));\n     }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr float\n   erf(float __x)\n   { return __builtin_erff(__x); }\n \n   constexpr long double\n   erf(long double __x)\n   { return __builtin_erfl(__x); }\n+#endif\n \n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     erf(_Tp __x)\n     { return __builtin_erf(__x); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr float\n   erfc(float __x)\n   { return __builtin_erfcf(__x); }\n \n   constexpr long double\n   erfc(long double __x)\n   { return __builtin_erfcl(__x); }\n+#endif\n \n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     erfc(_Tp __x)\n     { return __builtin_erfc(__x); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr float\n   exp2(float __x)\n   { return __builtin_exp2f(__x); }\n \n   constexpr long double\n   exp2(long double __x)\n   { return __builtin_exp2l(__x); }\n+#endif\n \n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     exp2(_Tp __x)\n     { return __builtin_exp2(__x); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr float\n   expm1(float __x)\n   { return __builtin_expm1f(__x); }\n \n   constexpr long double\n   expm1(long double __x)\n   { return __builtin_expm1l(__x); }\n+#endif\n \n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     expm1(_Tp __x)\n     { return __builtin_expm1(__x); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr float\n   fdim(float __x, float __y)\n   { return __builtin_fdimf(__x, __y); }\n \n   constexpr long double\n   fdim(long double __x, long double __y)\n   { return __builtin_fdiml(__x, __y); }\n+#endif\n \n   template<typename _Tp, typename _Up>\n     constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n@@ -1324,13 +1369,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return fdim(__type(__x), __type(__y));\n     }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr float\n   fma(float __x, float __y, float __z)\n   { return __builtin_fmaf(__x, __y, __z); }\n \n   constexpr long double\n   fma(long double __x, long double __y, long double __z)\n   { return __builtin_fmal(__x, __y, __z); }\n+#endif\n \n   template<typename _Tp, typename _Up, typename _Vp>\n     constexpr typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type\n@@ -1340,13 +1387,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return fma(__type(__x), __type(__y), __type(__z));\n     }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr float\n   fmax(float __x, float __y)\n   { return __builtin_fmaxf(__x, __y); }\n \n   constexpr long double\n   fmax(long double __x, long double __y)\n   { return __builtin_fmaxl(__x, __y); }\n+#endif\n \n   template<typename _Tp, typename _Up>\n     constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n@@ -1356,13 +1405,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return fmax(__type(__x), __type(__y));\n     }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr float\n   fmin(float __x, float __y)\n   { return __builtin_fminf(__x, __y); }\n \n   constexpr long double\n   fmin(long double __x, long double __y)\n   { return __builtin_fminl(__x, __y); }\n+#endif\n \n   template<typename _Tp, typename _Up>\n     constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n@@ -1372,13 +1423,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return fmin(__type(__x), __type(__y));\n     }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr float\n   hypot(float __x, float __y)\n   { return __builtin_hypotf(__x, __y); }\n \n   constexpr long double\n   hypot(long double __x, long double __y)\n   { return __builtin_hypotl(__x, __y); }\n+#endif\n \n   template<typename _Tp, typename _Up>\n     constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n@@ -1388,13 +1441,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return hypot(__type(__x), __type(__y));\n     }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr int\n   ilogb(float __x)\n   { return __builtin_ilogbf(__x); }\n \n   constexpr int\n   ilogb(long double __x)\n   { return __builtin_ilogbl(__x); }\n+#endif\n \n   template<typename _Tp>\n     constexpr\n@@ -1403,62 +1458,71 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     ilogb(_Tp __x)\n     { return __builtin_ilogb(__x); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr float\n   lgamma(float __x)\n   { return __builtin_lgammaf(__x); }\n \n   constexpr long double\n   lgamma(long double __x)\n   { return __builtin_lgammal(__x); }\n+#endif\n \n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     lgamma(_Tp __x)\n     { return __builtin_lgamma(__x); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr long long\n   llrint(float __x)\n   { return __builtin_llrintf(__x); }\n \n   constexpr long long\n   llrint(long double __x)\n   { return __builtin_llrintl(__x); }\n+#endif\n \n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               long long>::__type\n     llrint(_Tp __x)\n     { return __builtin_llrint(__x); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr long long\n   llround(float __x)\n   { return __builtin_llroundf(__x); }\n \n   constexpr long long\n   llround(long double __x)\n   { return __builtin_llroundl(__x); }\n+#endif\n \n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               long long>::__type\n     llround(_Tp __x)\n     { return __builtin_llround(__x); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr float\n   log1p(float __x)\n   { return __builtin_log1pf(__x); }\n \n   constexpr long double\n   log1p(long double __x)\n   { return __builtin_log1pl(__x); }\n+#endif\n \n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     log1p(_Tp __x)\n     { return __builtin_log1p(__x); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   // DR 568.\n   constexpr float\n   log2(float __x)\n@@ -1467,76 +1531,87 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   constexpr long double\n   log2(long double __x)\n   { return __builtin_log2l(__x); }\n+#endif\n \n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     log2(_Tp __x)\n     { return __builtin_log2(__x); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr float\n   logb(float __x)\n   { return __builtin_logbf(__x); }\n \n   constexpr long double\n   logb(long double __x)\n   { return __builtin_logbl(__x); }\n+#endif\n \n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     logb(_Tp __x)\n     { return __builtin_logb(__x); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr long\n   lrint(float __x)\n   { return __builtin_lrintf(__x); }\n \n   constexpr long\n   lrint(long double __x)\n   { return __builtin_lrintl(__x); }\n+#endif\n \n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               long>::__type\n     lrint(_Tp __x)\n     { return __builtin_lrint(__x); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr long\n   lround(float __x)\n   { return __builtin_lroundf(__x); }\n \n   constexpr long\n   lround(long double __x)\n   { return __builtin_lroundl(__x); }\n+#endif\n \n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               long>::__type\n     lround(_Tp __x)\n     { return __builtin_lround(__x); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr float\n   nearbyint(float __x)\n   { return __builtin_nearbyintf(__x); }\n \n   constexpr long double\n   nearbyint(long double __x)\n   { return __builtin_nearbyintl(__x); }\n+#endif\n \n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     nearbyint(_Tp __x)\n     { return __builtin_nearbyint(__x); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr float\n   nextafter(float __x, float __y)\n   { return __builtin_nextafterf(__x, __y); }\n \n   constexpr long double\n   nextafter(long double __x, long double __y)\n   { return __builtin_nextafterl(__x, __y); }\n+#endif\n \n   template<typename _Tp, typename _Up>\n     constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n@@ -1546,27 +1621,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return nextafter(__type(__x), __type(__y));\n     }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr float\n   nexttoward(float __x, long double __y)\n   { return __builtin_nexttowardf(__x, __y); }\n \n   constexpr long double\n   nexttoward(long double __x, long double __y)\n   { return __builtin_nexttowardl(__x, __y); }\n+#endif\n \n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     nexttoward(_Tp __x, long double __y)\n     { return __builtin_nexttoward(__x, __y); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr float\n   remainder(float __x, float __y)\n   { return __builtin_remainderf(__x, __y); }\n \n   constexpr long double\n   remainder(long double __x, long double __y)\n   { return __builtin_remainderl(__x, __y); }\n+#endif\n \n   template<typename _Tp, typename _Up>\n     constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n@@ -1576,13 +1655,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return remainder(__type(__x), __type(__y));\n     }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   remquo(float __x, float __y, int* __pquo)\n   { return __builtin_remquof(__x, __y, __pquo); }\n \n   inline long double\n   remquo(long double __x, long double __y, int* __pquo)\n   { return __builtin_remquol(__x, __y, __pquo); }\n+#endif\n \n   template<typename _Tp, typename _Up>\n     inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n@@ -1592,83 +1673,95 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return remquo(__type(__x), __type(__y), __pquo);\n     }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr float\n   rint(float __x)\n   { return __builtin_rintf(__x); }\n \n   constexpr long double\n   rint(long double __x)\n   { return __builtin_rintl(__x); }\n+#endif\n \n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     rint(_Tp __x)\n     { return __builtin_rint(__x); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr float\n   round(float __x)\n   { return __builtin_roundf(__x); }\n \n   constexpr long double\n   round(long double __x)\n   { return __builtin_roundl(__x); }\n+#endif\n \n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     round(_Tp __x)\n     { return __builtin_round(__x); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr float\n   scalbln(float __x, long __ex)\n   { return __builtin_scalblnf(__x, __ex); }\n \n   constexpr long double\n   scalbln(long double __x, long __ex)\n   { return __builtin_scalblnl(__x, __ex); }\n+#endif\n \n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     scalbln(_Tp __x, long __ex)\n     { return __builtin_scalbln(__x, __ex); }\n  \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr float\n   scalbn(float __x, int __ex)\n   { return __builtin_scalbnf(__x, __ex); }\n \n   constexpr long double\n   scalbn(long double __x, int __ex)\n   { return __builtin_scalbnl(__x, __ex); }\n+#endif\n \n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     scalbn(_Tp __x, int __ex)\n     { return __builtin_scalbn(__x, __ex); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr float\n   tgamma(float __x)\n   { return __builtin_tgammaf(__x); }\n \n   constexpr long double\n   tgamma(long double __x)\n   { return __builtin_tgammal(__x); }\n+#endif\n \n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     tgamma(_Tp __x)\n     { return __builtin_tgamma(__x); }\n  \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr float\n   trunc(float __x)\n   { return __builtin_truncf(__x); }\n \n   constexpr long double\n   trunc(long double __x)\n   { return __builtin_truncl(__x); }\n+#endif\n \n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, "}, {"sha": "181cc2440f136440431aecd3deb5199c187584ad", "filename": "libstdc++-v3/include/tr1/cmath", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef3a75060e229740b5de8b25e9b90484bc2702ae/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef3a75060e229740b5de8b25e9b90484bc2702ae/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath?ref=ef3a75060e229740b5de8b25e9b90484bc2702ae", "patch": "@@ -419,13 +419,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// Additional overloads [8.16.4].\n   using std::acos;\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   acosh(float __x)\n   { return __builtin_acoshf(__x); }\n \n   inline long double\n   acosh(long double __x)\n   { return __builtin_acoshl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n@@ -435,13 +437,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using std::asin;\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   asinh(float __x)\n   { return __builtin_asinhf(__x); }\n \n   inline long double\n   asinh(long double __x)\n   { return __builtin_asinhl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n@@ -452,27 +456,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   using std::atan;\n   using std::atan2;\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   atanh(float __x)\n   { return __builtin_atanhf(__x); }\n \n   inline long double\n   atanh(long double __x)\n   { return __builtin_atanhl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n \t\t\t\t\t   double>::__type\n     atanh(_Tp __x)\n     { return __builtin_atanh(__x); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   cbrt(float __x)\n   { return __builtin_cbrtf(__x); }\n \n   inline long double\n   cbrt(long double __x)\n   { return __builtin_cbrtl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n@@ -482,13 +490,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using std::ceil;\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   copysign(float __x, float __y)\n   { return __builtin_copysignf(__x, __y); }\n \n   inline long double\n   copysign(long double __x, long double __y)\n   { return __builtin_copysignl(__x, __y); }\n+#endif\n \n   template<typename _Tp, typename _Up>\n     inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n@@ -501,27 +511,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   using std::cos;\n   using std::cosh;  \n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   erf(float __x)\n   { return __builtin_erff(__x); }\n \n   inline long double\n   erf(long double __x)\n   { return __builtin_erfl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n \t\t\t\t\t   double>::__type\n     erf(_Tp __x)\n     { return __builtin_erf(__x); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   erfc(float __x)\n   { return __builtin_erfcf(__x); }\n \n   inline long double\n   erfc(long double __x)\n   { return __builtin_erfcl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n@@ -531,27 +545,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using std::exp;\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   exp2(float __x)\n   { return __builtin_exp2f(__x); }\n \n   inline long double\n   exp2(long double __x)\n   { return __builtin_exp2l(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n \t\t\t\t\t   double>::__type\n     exp2(_Tp __x)\n     { return __builtin_exp2(__x); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   expm1(float __x)\n   { return __builtin_expm1f(__x); }\n \n   inline long double\n   expm1(long double __x)\n   { return __builtin_expm1l(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n@@ -568,13 +586,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   using ::fabs;\n \n #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   fabs(float __x)\n   { return __builtin_fabsf(__x); }\n \n   inline long double\n   fabs(long double __x)\n   { return __builtin_fabsl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n@@ -583,13 +603,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return __builtin_fabs(__x); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   fdim(float __x, float __y)\n   { return __builtin_fdimf(__x, __y); }\n \n   inline long double\n   fdim(long double __x, long double __y)\n   { return __builtin_fdiml(__x, __y); }\n+#endif\n \n   template<typename _Tp, typename _Up>\n     inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n@@ -601,13 +623,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using std::floor;\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   fma(float __x, float __y, float __z)\n   { return __builtin_fmaf(__x, __y, __z); }\n \n   inline long double\n   fma(long double __x, long double __y, long double __z)\n   { return __builtin_fmal(__x, __y, __z); }\n+#endif\n \n   template<typename _Tp, typename _Up, typename _Vp>\n     inline typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type\n@@ -617,13 +641,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return fma(__type(__x), __type(__y), __type(__z));\n     }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   fmax(float __x, float __y)\n   { return __builtin_fmaxf(__x, __y); }\n \n   inline long double\n   fmax(long double __x, long double __y)\n   { return __builtin_fmaxl(__x, __y); }\n+#endif\n \n   template<typename _Tp, typename _Up>\n     inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n@@ -633,13 +659,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return fmax(__type(__x), __type(__y));\n     }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   fmin(float __x, float __y)\n   { return __builtin_fminf(__x, __y); }\n \n   inline long double\n   fmin(long double __x, long double __y)\n   { return __builtin_fminl(__x, __y); }\n+#endif\n \n   template<typename _Tp, typename _Up>\n     inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n@@ -652,13 +680,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   using std::fmod;\n   using std::frexp;\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   hypot(float __x, float __y)\n   { return __builtin_hypotf(__x, __y); }\n \n   inline long double\n   hypot(long double __x, long double __y)\n   { return __builtin_hypotl(__x, __y); }\n+#endif\n \n   template<typename _Tp, typename _Up>\n     inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n@@ -668,13 +698,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return hypot(__type(__y), __type(__x));\n     }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline int\n   ilogb(float __x)\n   { return __builtin_ilogbf(__x); }\n \n   inline int\n   ilogb(long double __x)\n   { return __builtin_ilogbl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n@@ -684,41 +716,47 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using std::ldexp;\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   lgamma(float __x)\n   { return __builtin_lgammaf(__x); }\n \n   inline long double\n   lgamma(long double __x)\n   { return __builtin_lgammal(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n \t\t\t\t\t   double>::__type\n     lgamma(_Tp __x)\n     { return __builtin_lgamma(__x); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline long long\n   llrint(float __x)\n   { return __builtin_llrintf(__x); }\n \n   inline long long\n   llrint(long double __x)\n   { return __builtin_llrintl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n \t\t\t\t\t   long long>::__type\n     llrint(_Tp __x)\n     { return __builtin_llrint(__x); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline long long\n   llround(float __x)\n   { return __builtin_llroundf(__x); }\n \n   inline long long\n   llround(long double __x)\n   { return __builtin_llroundl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n@@ -729,13 +767,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   using std::log;\n   using std::log10;\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   log1p(float __x)\n   { return __builtin_log1pf(__x); }\n \n   inline long double\n   log1p(long double __x)\n   { return __builtin_log1pl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n@@ -744,27 +784,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return __builtin_log1p(__x); }\n \n   // DR 568.\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   log2(float __x)\n   { return __builtin_log2f(__x); }\n \n   inline long double\n   log2(long double __x)\n   { return __builtin_log2l(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n \t\t\t\t\t   double>::__type\n     log2(_Tp __x)\n     { return __builtin_log2(__x); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   logb(float __x)\n   { return __builtin_logbf(__x); }\n \n   inline long double\n   logb(long double __x)\n   { return __builtin_logbl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n@@ -774,55 +818,63 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __builtin_logb(__x);\n     }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline long\n   lrint(float __x)\n   { return __builtin_lrintf(__x); }\n \n   inline long\n   lrint(long double __x)\n   { return __builtin_lrintl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n \t\t\t\t\t   long>::__type\n     lrint(_Tp __x)\n     { return __builtin_lrint(__x); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline long\n   lround(float __x)\n   { return __builtin_lroundf(__x); }\n \n   inline long\n   lround(long double __x)\n   { return __builtin_lroundl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n \t\t\t\t\t   long>::__type\n     lround(_Tp __x)\n     { return __builtin_lround(__x); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   nearbyint(float __x)\n   { return __builtin_nearbyintf(__x); }\n \n   inline long double\n   nearbyint(long double __x)\n   { return __builtin_nearbyintl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n \t\t\t\t\t   double>::__type\n     nearbyint(_Tp __x)\n     { return __builtin_nearbyint(__x); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   nextafter(float __x, float __y)\n   { return __builtin_nextafterf(__x, __y); }\n \n   inline long double\n   nextafter(long double __x, long double __y)\n   { return __builtin_nextafterl(__x, __y); }\n+#endif\n \n   template<typename _Tp, typename _Up>\n     inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n@@ -832,27 +884,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return nextafter(__type(__x), __type(__y));\n     }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   nexttoward(float __x, long double __y)\n   { return __builtin_nexttowardf(__x, __y); }\n \n   inline long double\n   nexttoward(long double __x, long double __y)\n   { return __builtin_nexttowardl(__x, __y); }\n+#endif\n \n   template<typename _Tp>\n     inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n \t\t\t\t\t   double>::__type\n     nexttoward(_Tp __x, long double __y)\n     { return __builtin_nexttoward(__x, __y); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   remainder(float __x, float __y)\n   { return __builtin_remainderf(__x, __y); }\n \n   inline long double\n   remainder(long double __x, long double __y)\n   { return __builtin_remainderl(__x, __y); }\n+#endif\n \n   template<typename _Tp, typename _Up>\n     inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n@@ -862,13 +918,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return remainder(__type(__x), __type(__y));\n     }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   remquo(float __x, float __y, int* __pquo)\n   { return __builtin_remquof(__x, __y, __pquo); }\n \n   inline long double\n   remquo(long double __x, long double __y, int* __pquo)\n   { return __builtin_remquol(__x, __y, __pquo); }\n+#endif\n \n   template<typename _Tp, typename _Up>\n     inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n@@ -878,55 +936,63 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return remquo(__type(__x), __type(__y), __pquo);\n     }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   rint(float __x)\n   { return __builtin_rintf(__x); }\n \n   inline long double\n   rint(long double __x)\n   { return __builtin_rintl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n \t\t\t\t\t   double>::__type\n     rint(_Tp __x)\n     { return __builtin_rint(__x); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   round(float __x)\n   { return __builtin_roundf(__x); }\n \n   inline long double\n   round(long double __x)\n   { return __builtin_roundl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n \t\t\t\t\t   double>::__type\n     round(_Tp __x)\n     { return __builtin_round(__x); }\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   scalbln(float __x, long __ex)\n   { return __builtin_scalblnf(__x, __ex); }\n \n   inline long double\n   scalbln(long double __x, long __ex)\n   { return __builtin_scalblnl(__x, __ex); }\n+#endif\n \n   template<typename _Tp>\n     inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n \t\t\t\t\t   double>::__type\n     scalbln(_Tp __x, long __ex)\n     { return __builtin_scalbln(__x, __ex); }\n  \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   scalbn(float __x, int __ex)\n   { return __builtin_scalbnf(__x, __ex); }\n \n   inline long double\n   scalbn(long double __x, int __ex)\n   { return __builtin_scalbnl(__x, __ex); }\n+#endif\n \n   template<typename _Tp>\n     inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n@@ -940,27 +1006,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   using std::tan;\n   using std::tanh;\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   tgamma(float __x)\n   { return __builtin_tgammaf(__x); }\n \n   inline long double\n   tgamma(long double __x)\n   { return __builtin_tgammal(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n \t\t\t\t\t   double>::__type\n     tgamma(_Tp __x)\n     { return __builtin_tgamma(__x); }\n  \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   trunc(float __x)\n   { return __builtin_truncf(__x); }\n \n   inline long double\n   trunc(long double __x)\n   { return __builtin_truncl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n@@ -994,13 +1064,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // the discussion about this issue here:\n   // http://gcc.gnu.org/ml/gcc-patches/2012-09/msg01278.html\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   pow(float __x, float __y)\n   { return std::pow(__x, __y); }\n \n   inline long double\n   pow(long double __x, long double __y)\n   { return std::pow(__x, __y); }\n+#endif\n \n   template<typename _Tp, typename _Up>\n     inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type"}, {"sha": "658f68c27d5636b8964c884aad51841325e090ba", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cmath/c99_classification_macros_c.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef3a75060e229740b5de8b25e9b90484bc2702ae/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fc99_classification_macros_c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef3a75060e229740b5de8b25e9b90484bc2702ae/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fc99_classification_macros_c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fc99_classification_macros_c.cc?ref=ef3a75060e229740b5de8b25e9b90484bc2702ae", "patch": "@@ -20,8 +20,8 @@\n // { dg-do compile }\n // { dg-add-options no_pch }\n \n-// { dg-xfail-if \"\" { { *-*-linux* *-*-gnu* *-*-darwin* *-*-solaris2.1[0-9]* hppa*-*-hpux* *-*-mingw* *-*-aix* } || { uclibc || newlib } } { \"*\" } { \"\" } }\n-// { dg-excess-errors \"\" { target { { *-*-linux* *-*-gnu* *-*-darwin* *-*-solaris2.1[0-9]* hppa*-*-hpux* *-*-mingw* *-*-aix* } || { uclibc || newlib } } } }\n+// { dg-xfail-if \"\" { { *-*-linux* *-*-gnu* *-*-darwin* *-*-solaris2.1[01]* hppa*-*-hpux* *-*-mingw* *-*-aix* } || { uclibc || newlib } } { \"*\" } { \"\" } }\n+// { dg-excess-errors \"\" { target { { *-*-linux* *-*-gnu* *-*-darwin* *-*-solaris2.1[01]* hppa*-*-hpux* *-*-mingw* *-*-aix* } || { uclibc || newlib } } } }\n \n #include <math.h>\n "}]}