{"sha": "650beb110538097b9c3e8600149b333a83e7e836", "node_id": "C_kwDOANBUbNoAKDY1MGJlYjExMDUzODA5N2I5YzNlODYwMDE0OWIzMzNhODNlN2U4MzY", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-10-02T13:43:39Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-10-03T19:53:45Z"}, "message": "coroutines: Await expressions are not allowed in handlers [PR 99710].\n\nC++20 [expr.await] / 2\nAn await-expression shall appear only in a potentially-evaluated expression\nwithin the compound-statement of a function-body outside of a handler.\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\n\tPR c++/99710\n\ngcc/cp/ChangeLog:\n\n\t* coroutines.cc (await_statement_walker): Report an error if\n\tan await expression is found in a handler body.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/coroutines/pr99710.C: New test.", "tree": {"sha": "ab8d2884394098cd1b37692964051afb8771511e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab8d2884394098cd1b37692964051afb8771511e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/650beb110538097b9c3e8600149b333a83e7e836", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/650beb110538097b9c3e8600149b333a83e7e836", "html_url": "https://github.com/Rust-GCC/gccrs/commit/650beb110538097b9c3e8600149b333a83e7e836", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/650beb110538097b9c3e8600149b333a83e7e836/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8009c79b64b532d8a0966fe3c6d636369df6e35d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8009c79b64b532d8a0966fe3c6d636369df6e35d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8009c79b64b532d8a0966fe3c6d636369df6e35d"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "377b90c777fb9de0f8c94640527d1fab96f88d3c", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650beb110538097b9c3e8600149b333a83e7e836/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650beb110538097b9c3e8600149b333a83e7e836/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=650beb110538097b9c3e8600149b333a83e7e836", "patch": "@@ -3688,7 +3688,22 @@ await_statement_walker (tree *stmt, int *do_subtree, void *d)\n \t    *do_subtree = 0;\n \t    return res;\n \t  }\n-\tbreak;\n+\t  break;\n+\tcase HANDLER:\n+\t  {\n+\t    /* [expr.await] An await-expression shall appear only in a\n+\t       potentially-evaluated expression within the compound-statement\n+\t       of a function-body outside of a handler.  */\n+\t    tree *await_ptr;\n+\t    hash_set<tree> visited;\n+\t    if (!(cp_walk_tree (&HANDLER_BODY (expr), find_any_await,\n+\t\t  &await_ptr, &visited)))\n+\t      return NULL_TREE; /* All OK.  */\n+\t    location_t loc = EXPR_LOCATION (*await_ptr);\n+\t    error_at (loc, \"await expressions are not permitted in handlers\");\n+\t    return NULL_TREE; /* This is going to fail later anyway.  */\n+\t  }\n+\t  break;\n       }\n   else if (EXPR_P (expr))\n     {"}, {"sha": "e4f7116b8d7c458fe6f5e1bdadd86e679b95f564", "filename": "gcc/testsuite/g++.dg/coroutines/pr99710.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650beb110538097b9c3e8600149b333a83e7e836/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr99710.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650beb110538097b9c3e8600149b333a83e7e836/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr99710.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr99710.C?ref=650beb110538097b9c3e8600149b333a83e7e836", "patch": "@@ -0,0 +1,25 @@\n+#include <coroutine>\n+\n+struct task {\n+    struct promise_type {\n+        std::suspend_always initial_suspend();\n+        std::suspend_always final_suspend() noexcept;\n+        task get_return_object();\n+        void return_void();\n+        void unhandled_exception();\n+    };\n+};\n+\n+task\n+my_coro ()\n+{\n+  try\n+    { }\n+  catch (...)\n+    {\n+      // [expr.await] An await-expression shall appear only in a potentially-\n+      // evaluated expression within the compound-statement of a function-body\n+      // outside of a handler \n+      co_await std::suspend_always{}; // { dg-error \"await expressions are not permitted in handlers\" }\n+    }\n+}"}]}