{"sha": "c47c29c8964d7c80329574f4a3b9c70f2fa533b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ3YzI5Yzg5NjRkN2M4MDMyOTU3NGY0YTNiOWM3MGYyZmE1MzNiNA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2006-12-12T03:58:52Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2006-12-12T03:58:52Z"}, "message": "re PR middle-end/17982 (stop calling assemble_external before final assembly output time)\n\n2006-12-11  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR middle-end/17982\n\tPR middle-end/20218\n\t* cgraphunit.c (cgraph_optimize): Remove call to\n\tprocess_pending_assemble_externals.\n\n\t* config/elfos.h (ASM_OUTPUT_EXTERNAL): New.\n\n\t* config/ia64/hpux.h (TARGET_ASM_FILE_END): Removed.\n\n\t* config/ia64/ia64.c (ia64_asm_output_external): Rewritten.\n\t(ia64_hpux_add_extern_decl): Removed.\n\t(ia64_hpux_file_end): Likewise.\n\t(extern_func_list): Likewise.\n\t(extern_func_head): Likewise.\n\n\t* output.h (assemble_external): Update comments.\n\t(default_elf_asm_output_external): New.\n\t(maybe_assemble_visibility): New.\n\n\t* toplev.c (compile_file): Update comment.\n\n\t* varasm.c (assemble_external): Always put it on\n\tpending_assemble_externals.\n\t(maybe_assemble_visibility): Make it extern and return int.\n\t(default_elf_asm_output_external): New.\n\nFrom-SVN: r119764", "tree": {"sha": "39fa7bd559e89365079d4e0441db0929ccb97dd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39fa7bd559e89365079d4e0441db0929ccb97dd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c47c29c8964d7c80329574f4a3b9c70f2fa533b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c47c29c8964d7c80329574f4a3b9c70f2fa533b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c47c29c8964d7c80329574f4a3b9c70f2fa533b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c47c29c8964d7c80329574f4a3b9c70f2fa533b4/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "864abd46caa11641fe0588e31d1e19135c29f476", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/864abd46caa11641fe0588e31d1e19135c29f476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/864abd46caa11641fe0588e31d1e19135c29f476"}], "stats": {"total": 205, "additions": 94, "deletions": 111}, "files": [{"sha": "a39ec7eaf1094c3df5e941dede3a8330349149c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c47c29c8964d7c80329574f4a3b9c70f2fa533b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c47c29c8964d7c80329574f4a3b9c70f2fa533b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c47c29c8964d7c80329574f4a3b9c70f2fa533b4", "patch": "@@ -1,3 +1,31 @@\n+2006-12-11  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR middle-end/17982\n+\tPR middle-end/20218\n+\t* cgraphunit.c (cgraph_optimize): Remove call to\n+\tprocess_pending_assemble_externals.\n+\n+\t* config/elfos.h (ASM_OUTPUT_EXTERNAL): New.\n+\n+\t* config/ia64/hpux.h (TARGET_ASM_FILE_END): Removed.\n+\n+\t* config/ia64/ia64.c (ia64_asm_output_external): Rewritten.\n+\t(ia64_hpux_add_extern_decl): Removed.\n+\t(ia64_hpux_file_end): Likewise.\n+\t(extern_func_list): Likewise.\n+\t(extern_func_head): Likewise.\n+\n+\t* output.h (assemble_external): Update comments.\n+\t(default_elf_asm_output_external): New.\n+\t(maybe_assemble_visibility): New.\n+\n+\t* toplev.c (compile_file): Update comment.\n+\n+\t* varasm.c (assemble_external): Always put it on\n+\tpending_assemble_externals.\n+\t(maybe_assemble_visibility): Make it extern and return int.\n+\t(default_elf_asm_output_external): New.\n+\n 2006-12-11  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* tree-ssa-structalias.c (handle_ptr_arith): Return false when we"}, {"sha": "a24752783257c63f6a05e6eec6010a5fb2ffb608", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c47c29c8964d7c80329574f4a3b9c70f2fa533b4/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c47c29c8964d7c80329574f4a3b9c70f2fa533b4/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=c47c29c8964d7c80329574f4a3b9c70f2fa533b4", "patch": "@@ -1388,8 +1388,6 @@ cgraph_optimize (void)\n       return;\n     }\n \n-  process_pending_assemble_externals ();\n-\n   /* Frontend may output common variables after the unit has been finalized.\n      It is safe to deal with them here as they are always zero initialized.  */\n   varpool_analyze_pending_decls ();"}, {"sha": "7e7f0719d1fcdf547d0f6a491457c9fbe982a0f5", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c47c29c8964d7c80329574f4a3b9c70f2fa533b4/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c47c29c8964d7c80329574f4a3b9c70f2fa533b4/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=c47c29c8964d7c80329574f4a3b9c70f2fa533b4", "patch": "@@ -504,3 +504,13 @@ Boston, MA 02110-1301, USA.  */\n    elf_record_gcc_switches function defined in varasm.c.  */\n #undef  TARGET_ASM_RECORD_GCC_SWITCHES\n #define TARGET_ASM_RECORD_GCC_SWITCHES elf_record_gcc_switches\n+\n+/* A C statement (sans semicolon) to output to the stdio stream STREAM\n+   any text necessary for declaring the name of an external symbol\n+   named NAME whch is referenced in this compilation but not defined.\n+   It is needed to properly support non-default visibility.  */\n+\n+#ifndef ASM_OUTPUT_EXTERNAL\n+#define ASM_OUTPUT_EXTERNAL(FILE, DECL, NAME) \\\n+  default_elf_asm_output_external (FILE, DECL, NAME)\n+#endif"}, {"sha": "186f339147b40e8c51fe53cc065f036e75a35b87", "filename": "gcc/config/ia64/hpux.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c47c29c8964d7c80329574f4a3b9c70f2fa533b4/gcc%2Fconfig%2Fia64%2Fhpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c47c29c8964d7c80329574f4a3b9c70f2fa533b4/gcc%2Fconfig%2Fia64%2Fhpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux.h?ref=c47c29c8964d7c80329574f4a3b9c70f2fa533b4", "patch": "@@ -144,10 +144,6 @@ do {\t\t\t\t\t\t\t\t\\\n    definitions, so do not use them in gthr-posix.h.  */\n #define GTHREAD_USE_WEAK 0\n \n-/* Put out the needed function declarations at the end.  */\n-\n-#define TARGET_ASM_FILE_END ia64_hpux_file_end\n-\n #undef CTORS_SECTION_ASM_OP\n #define CTORS_SECTION_ASM_OP  \"\\t.section\\t.init_array,\\t\\\"aw\\\",\\\"init_array\\\"\"\n "}, {"sha": "d0a86a36b59be42808887d55414db04e40ddf139", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 22, "deletions": 91, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c47c29c8964d7c80329574f4a3b9c70f2fa533b4/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c47c29c8964d7c80329574f4a3b9c70f2fa533b4/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=c47c29c8964d7c80329574f4a3b9c70f2fa533b4", "patch": "@@ -255,10 +255,6 @@ static section *ia64_rwreloc_select_rtx_section (enum machine_mode, rtx,\n \t\t\t\t\t\t unsigned HOST_WIDE_INT)\n      ATTRIBUTE_UNUSED;\n static unsigned int ia64_section_type_flags (tree, const char *, int);\n-static void ia64_hpux_add_extern_decl (tree decl)\n-     ATTRIBUTE_UNUSED;\n-static void ia64_hpux_file_end (void)\n-     ATTRIBUTE_UNUSED;\n static void ia64_init_libfuncs (void)\n      ATTRIBUTE_UNUSED;\n static void ia64_hpux_init_libfuncs (void)\n@@ -5020,49 +5016,6 @@ ia64_secondary_reload_class (enum reg_class class,\n   return NO_REGS;\n }\n \n-\f\n-/* Emit text to declare externally defined variables and functions, because\n-   the Intel assembler does not support undefined externals.  */\n-\n-void\n-ia64_asm_output_external (FILE *file, tree decl, const char *name)\n-{\n-  int save_referenced;\n-\n-  /* GNU as does not need anything here, but the HP linker does need\n-     something for external functions.  */\n-\n-  if (TARGET_GNU_AS\n-      && (!TARGET_HPUX_LD\n-\t  || TREE_CODE (decl) != FUNCTION_DECL\n-\t  || strstr (name, \"__builtin_\") == name))\n-    return;\n-\n-  /* ??? The Intel assembler creates a reference that needs to be satisfied by\n-     the linker when we do this, so we need to be careful not to do this for\n-     builtin functions which have no library equivalent.  Unfortunately, we\n-     can't tell here whether or not a function will actually be called by\n-     expand_expr, so we pull in library functions even if we may not need\n-     them later.  */\n-  if (! strcmp (name, \"__builtin_next_arg\")\n-      || ! strcmp (name, \"alloca\")\n-      || ! strcmp (name, \"__builtin_constant_p\")\n-      || ! strcmp (name, \"__builtin_args_info\"))\n-    return;\n-\n-  if (TARGET_HPUX_LD)\n-    ia64_hpux_add_extern_decl (decl);\n-  else\n-    {\n-      /* assemble_name will set TREE_SYMBOL_REFERENCED, so we must save and\n-         restore it.  */\n-      save_referenced = TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl));\n-      if (TREE_CODE (decl) == FUNCTION_DECL)\n-        ASM_OUTPUT_TYPE_DIRECTIVE (file, name, \"function\");\n-      (*targetm.asm_out.globalize_label) (file, name);\n-      TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)) = save_referenced;\n-    }\n-}\n \f\n /* Parse the -mfixed-range= option string.  */\n \n@@ -9174,55 +9127,33 @@ ia64_hpux_function_arg_padding (enum machine_mode mode, tree type)\n    return DEFAULT_FUNCTION_ARG_PADDING (mode, type);\n }\n \n-/* Linked list of all external functions that are to be emitted by GCC.\n-   We output the name if and only if TREE_SYMBOL_REFERENCED is set in\n-   order to avoid putting out names that are never really used.  */\n-\n-struct extern_func_list GTY(())\n-{\n-  struct extern_func_list *next;\n-  tree decl;\n-};\n-\n-static GTY(()) struct extern_func_list *extern_func_head;\n-\n-static void\n-ia64_hpux_add_extern_decl (tree decl)\n-{\n-  struct extern_func_list *p = ggc_alloc (sizeof (struct extern_func_list));\n-\n-  p->decl = decl;\n-  p->next = extern_func_head;\n-  extern_func_head = p;\n-}\n-\n-/* Print out the list of used global functions.  */\n+/* Emit text to declare externally defined variables and functions, because\n+   the Intel assembler does not support undefined externals.  */\n \n-static void\n-ia64_hpux_file_end (void)\n+void\n+ia64_asm_output_external (FILE *file, tree decl, const char *name)\n {\n-  struct extern_func_list *p;\n-\n-  for (p = extern_func_head; p; p = p->next)\n+  /* We output the name if and only if TREE_SYMBOL_REFERENCED is\n+     set in order to avoid putting out names that are never really\n+     used. */\n+  if (TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)))\n     {\n-      tree decl = p->decl;\n-      tree id = DECL_ASSEMBLER_NAME (decl);\n-\n-      gcc_assert (id);\n-\n-      if (!TREE_ASM_WRITTEN (decl) && TREE_SYMBOL_REFERENCED (id))\n-        {\n-\t  const char *name = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n+      /* maybe_assemble_visibility will return 1 if the assembler\n+\t visibility directive is outputed.  */\n+      int need_visibility = ((*targetm.binds_local_p) (decl)\n+\t\t\t     && maybe_assemble_visibility (decl));\n \n-\t  TREE_ASM_WRITTEN (decl) = 1;\n-\t  (*targetm.asm_out.globalize_label) (asm_out_file, name);\n-\t  fputs (TYPE_ASM_OP, asm_out_file);\n-\t  assemble_name (asm_out_file, name);\n-\t  fprintf (asm_out_file, \",\" TYPE_OPERAND_FMT \"\\n\", \"function\");\n-        }\n+      /* GNU as does not need anything here, but the HP linker does\n+\t need something for external functions.  */\n+      if ((TARGET_HPUX_LD || !TARGET_GNU_AS)\n+\t  && TREE_CODE (decl) == FUNCTION_DECL)\n+\t{\n+\t  ASM_OUTPUT_TYPE_DIRECTIVE (file, name, \"function\");\n+\t  (*targetm.asm_out.globalize_label) (file, name);\n+\t}\n+      else if (need_visibility && !TARGET_GNU_AS)\n+\t(*targetm.asm_out.globalize_label) (file, name);\n     }\n-\n-  extern_func_head = 0;\n }\n \n /* Set SImode div/mod functions, init_integral_libfuncs only initializes"}, {"sha": "5f87cffd4be283cc7311d3d1e67952d945c3d211", "filename": "gcc/output.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c47c29c8964d7c80329574f4a3b9c70f2fa533b4/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c47c29c8964d7c80329574f4a3b9c70f2fa533b4/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=c47c29c8964d7c80329574f4a3b9c70f2fa533b4", "patch": "@@ -204,9 +204,9 @@ extern void assemble_variable (tree, int, int, int);\n    DONT_OUTPUT_DATA is from assemble_variable.  */\n extern void align_variable (tree decl, bool dont_output_data);\n \n-/* Output something to declare an external symbol to the assembler.\n-   (Most assemblers don't need this, so we normally output nothing.)\n-   Do nothing if DECL is not external.  */\n+/* Queue for outputing something to declare an external symbol to the\n+   assembler.  (Most assemblers don't need this, so we normally output\n+   nothing.)  Do nothing if DECL is not external.  */\n extern void assemble_external (tree);\n \n /* Assemble code to leave SIZE bytes of zeros.  */\n@@ -619,6 +619,10 @@ extern void default_file_start (void);\n extern void file_end_indicate_exec_stack (void);\n extern bool default_valid_pointer_mode (enum machine_mode);\n \n+extern void default_elf_asm_output_external (FILE *file, tree,\n+\t\t\t\t\t     const char *);\n+extern int maybe_assemble_visibility (tree);\n+\n extern int default_address_cost (rtx);\n \n /* dbxout helper functions */"}, {"sha": "ae0b536691e9b7d7e8189ab6e64b7a653ab488d1", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c47c29c8964d7c80329574f4a3b9c70f2fa533b4/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c47c29c8964d7c80329574f4a3b9c70f2fa533b4/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=c47c29c8964d7c80329574f4a3b9c70f2fa533b4", "patch": "@@ -1076,9 +1076,7 @@ compile_file (void)\n \n   dw2_output_indirect_constants ();\n \n-  /* Flush any pending external directives.  cgraph did this for\n-     assemble_external calls from the front end, but the RTL\n-     expander can also generate them.  */\n+  /* Flush any pending external directives.  */\n   process_pending_assemble_externals ();\n \n   /* Attach a special .ident directive to the end of the file to identify"}, {"sha": "ff1ee6e05776dc82794536709b01e76f89825db1", "filename": "gcc/varasm.c", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c47c29c8964d7c80329574f4a3b9c70f2fa533b4/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c47c29c8964d7c80329574f4a3b9c70f2fa533b4/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=c47c29c8964d7c80329574f4a3b9c70f2fa533b4", "patch": "@@ -126,7 +126,6 @@ static unsigned HOST_WIDE_INT array_size_for_constructor (tree);\n static unsigned min_align (unsigned, unsigned);\n static void output_constructor (tree, unsigned HOST_WIDE_INT, unsigned int);\n static void globalize_decl (tree);\n-static void maybe_assemble_visibility (tree);\n #ifdef BSS_SECTION_ASM_OP\n #ifdef ASM_OUTPUT_BSS\n static void asm_output_bss (FILE *, tree, const char *,\n@@ -1964,11 +1963,10 @@ assemble_external (tree decl ATTRIBUTE_UNUSED)\n   if (!DECL_P (decl) || !DECL_EXTERNAL (decl) || !TREE_PUBLIC (decl))\n     return;\n \n-  if (flag_unit_at_a_time)\n-    pending_assemble_externals = tree_cons (0, decl,\n-\t\t\t\t\t    pending_assemble_externals);\n-  else\n-    assemble_external_real (decl);\n+  /* We want to output external symbols at very last to check if they\n+     are references or not.  */\n+  pending_assemble_externals = tree_cons (0, decl,\n+\t\t\t\t\t  pending_assemble_externals);\n #endif\n }\n \n@@ -5071,13 +5069,18 @@ default_assemble_visibility (tree decl, int vis)\n \n /* A helper function to call assemble_visibility when needed for a decl.  */\n \n-static void\n+int\n maybe_assemble_visibility (tree decl)\n {\n   enum symbol_visibility vis = DECL_VISIBILITY (decl);\n \n   if (vis != VISIBILITY_DEFAULT)\n-    targetm.asm_out.visibility (decl, vis);\n+    {\n+      targetm.asm_out.visibility (decl, vis);\n+      return 1;\n+    }\n+  else\n+    return 0;\n }\n \n /* Returns 1 if the target configuration supports defining public symbols\n@@ -6327,4 +6330,19 @@ elf_record_gcc_switches (print_switch_type type, const char * name)\n   return 0;\n }\n \n+/* Emit text to declare externally defined symbols. It is needed to\n+   properly support non-default visibility.  */\n+void\n+default_elf_asm_output_external (FILE *file ATTRIBUTE_UNUSED,\n+\t\t\t\t tree decl,\n+\t\t\t\t const char *name ATTRIBUTE_UNUSED)\n+{\n+  /* We output the name if and only if TREE_SYMBOL_REFERENCED is\n+     set in order to avoid putting out names that are never really\n+     used. */\n+  if (TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl))\n+      && targetm.binds_local_p (decl))\n+    maybe_assemble_visibility (decl);\n+}\n+\n #include \"gt-varasm.h\""}]}