{"sha": "e46c777050aad8088ffdc7edcfea7deefc38de21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ2Yzc3NzA1MGFhZDgwODhmZmRjN2VkY2ZlYTdkZWVmYzM4ZGUyMQ==", "commit": {"author": {"name": "Cesar Philippidis", "email": "cesar@codesourcery.com", "date": "2016-05-24T22:54:21Z"}, "committer": {"name": "Cesar Philippidis", "email": "cesar@gcc.gnu.org", "date": "2016-05-24T22:54:21Z"}, "message": "c-parser.c (c_parser_oacc_declare): Add support for GOMP_MAP_FIRSTPRIVATE_POINTER.\n\n\tgcc/c/\n\t* c-parser.c (c_parser_oacc_declare): Add support for\n\tGOMP_MAP_FIRSTPRIVATE_POINTER.\n\t* c-typeck.c (handle_omp_array_sections_1): Replace bool is_omp\n\targument with enum c_omp_region_type ort.\n\t(handle_omp_array_sections): Likewise.  Update call to\n\thandle_omp_array_sections_1.\n\t(c_finish_omp_clauses): Add specific errors and warning messages for\n\tOpenACC.  Use firsrtprivate pointers for OpenACC subarrays.  Update\n\tcall to handle_omp_array_sections.\n\n\tgcc/cp/\n\t* parser.c (cp_parser_oacc_declare): Add support for\n\tGOMP_MAP_FIRSTPRIVATE_POINTER.\n\t* semantics.c (handle_omp_array_sections_1): Replace bool is_omp\n\targument with enum c_omp_region_type ort.  Don't privatize OpenACC\n\tnon-static members.\n\t(handle_omp_array_sections): Replace bool is_omp argument with enum\n\tc_omp_region_type ort.  Update call to handle_omp_array_sections_1.\n\t(finish_omp_clauses): Add specific errors and warning messages for\n\tOpenACC.  Use firsrtprivate pointers for OpenACC subarrays.  Update\n\tcall to handle_omp_array_sections.\n\n\tgcc/\n\t* gimplify.c (omp_notice_variable): Use zero-length arrays for data\n\tpointers inside OACC_DATA regions.\n\t(gimplify_scan_omp_clauses): Prune firstprivate clause associated\n\twith OACC_DATA, OACC_ENTER_DATA and OACC_EXIT data regions.\n\t(gimplify_adjust_omp_clauses): Fix typo in comment.\n\n\tgcc/testsuite/\n\t* c-c++-common/goacc/data-clause-duplicate-1.c: Adjust test.\n\t* c-c++-common/goacc/deviceptr-1.c: Likewise.\n\t* c-c++-common/goacc/kernels-alias-3.c: Likewise.\n\t* c-c++-common/goacc/kernels-alias-4.c: Likewise.\n\t* c-c++-common/goacc/kernels-alias-5.c: Likewise.\n\t* c-c++-common/goacc/kernels-alias-8.c: Likewise.\n\t* c-c++-common/goacc/kernels-alias-ipa-pta-3.c: Likewise.\n\t* c-c++-common/goacc/pcopy.c: Likewise.\n\t* c-c++-common/goacc/pcopyin.c: Likewise.\n\t* c-c++-common/goacc/pcopyout.c: Likewise.\n\t* c-c++-common/goacc/pcreate.c: Likewise.\n\t* c-c++-common/goacc/pr70688.c: New test.\n\t* c-c++-common/goacc/present-1.c: Adjust test.\n\t* c-c++-common/goacc/reduction-5.c: Likewise.\n\t* g++.dg/goacc/data-1.C: New test.\n\n\tlibgomp/\n\t* oacc-mem.c (acc_malloc): Update handling of shared-memory targets.\n\t(acc_free): Likewise.\n\t(acc_memcpy_to_device): Likewise.\n\t(acc_memcpy_from_device): Likewise.\n\t(acc_deviceptr): Likewise.\n\t(acc_hostptr): Likewise.\n\t(acc_is_present): Likewise.\n\t(acc_map_data): Likewise.\n\t(acc_unmap_data): Likewise.\n\t(present_create_copy): Likewise.\n\t(delete_copyout): Likewise.\n\t(update_dev_host): Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/asyncwait-1.c: Remove xfail.\n\t* testsuite/libgomp.oacc-c-c++-common/data-2-lib.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/data-2.c: Adjust test.\n\t* testsuite/libgomp.oacc-c-c++-common/data-3.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/enter_exit-lib.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/lib-13.c: Adjust test so that\n\tit only runs on nvptx targets.\n\t* testsuite/libgomp.oacc-c-c++-common/lib-14.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/lib-15.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/lib-16.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/lib-17.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/lib-18.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/lib-20.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/lib-21.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/lib-22.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/lib-23.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/lib-24.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/lib-25.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/lib-28.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/lib-29.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/lib-30.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/lib-34.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/lib-42.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/lib-43.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/lib-44.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/lib-47.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/lib-48.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/lib-52.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/lib-53.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/lib-54.c: Likewise.\n\nFrom-SVN: r236678", "tree": {"sha": "55f6b762c06be575338011057f1346ea2444b92c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55f6b762c06be575338011057f1346ea2444b92c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e46c777050aad8088ffdc7edcfea7deefc38de21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e46c777050aad8088ffdc7edcfea7deefc38de21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e46c777050aad8088ffdc7edcfea7deefc38de21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e46c777050aad8088ffdc7edcfea7deefc38de21/comments", "author": {"login": "cesarjp", "id": 4576177, "node_id": "MDQ6VXNlcjQ1NzYxNzc=", "avatar_url": "https://avatars.githubusercontent.com/u/4576177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cesarjp", "html_url": "https://github.com/cesarjp", "followers_url": "https://api.github.com/users/cesarjp/followers", "following_url": "https://api.github.com/users/cesarjp/following{/other_user}", "gists_url": "https://api.github.com/users/cesarjp/gists{/gist_id}", "starred_url": "https://api.github.com/users/cesarjp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cesarjp/subscriptions", "organizations_url": "https://api.github.com/users/cesarjp/orgs", "repos_url": "https://api.github.com/users/cesarjp/repos", "events_url": "https://api.github.com/users/cesarjp/events{/privacy}", "received_events_url": "https://api.github.com/users/cesarjp/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4bfc9db7e6e6d9332b462f8975902817819b321e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bfc9db7e6e6d9332b462f8975902817819b321e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bfc9db7e6e6d9332b462f8975902817819b321e"}], "stats": {"total": 835, "additions": 722, "deletions": 113}, "files": [{"sha": "57e9ba14d4a60c67d28b27e25d3fbd14e64f7b8e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,3 +1,11 @@\n+2016-05-24  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* gimplify.c (omp_notice_variable): Use zero-length arrays for data\n+\tpointers inside OACC_DATA regions.\n+\t(gimplify_scan_omp_clauses): Prune firstprivate clause associated\n+\twith OACC_DATA, OACC_ENTER_DATA and OACC_EXIT data regions.\n+\t(gimplify_adjust_omp_clauses): Fix typo in comment.\n+\n 2016-05-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* config/rs6000/altivec.md (VParity): New mode iterator for vector"}, {"sha": "2e3eeb1af3f7592b72ad462db49eec73375221ad", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,3 +1,15 @@\n+2016-05-24  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* c-parser.c (c_parser_oacc_declare): Add support for\n+\tGOMP_MAP_FIRSTPRIVATE_POINTER.\n+\t* c-typeck.c (handle_omp_array_sections_1): Replace bool is_omp\n+\targument with enum c_omp_region_type ort.\n+\t(handle_omp_array_sections): Likewise.  Update call to\n+\thandle_omp_array_sections_1.\n+\t(c_finish_omp_clauses): Add specific errors and warning messages for\n+\tOpenACC.  Use firsrtprivate pointers for OpenACC subarrays.  Update\n+\tcall to handle_omp_array_sections.\n+\n 2016-05-24  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* c-parser.c (c_parser_oacc_routine): Tighten syntax checks."}, {"sha": "1cf4fb452aa8e66536789aa1c69909a487a50502", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -13602,6 +13602,7 @@ c_parser_oacc_declare (c_parser *parser)\n \n       switch (OMP_CLAUSE_MAP_KIND (t))\n \t{\n+\tcase GOMP_MAP_FIRSTPRIVATE_POINTER:\n \tcase GOMP_MAP_FORCE_ALLOC:\n \tcase GOMP_MAP_FORCE_TO:\n \tcase GOMP_MAP_FORCE_DEVICEPTR:"}, {"sha": "1520c20c653f42fdc6221ebda436d1d2c61f8ff8", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 44, "deletions": 15, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -11940,7 +11940,7 @@ c_finish_omp_cancellation_point (location_t loc, tree clauses)\n static tree\n handle_omp_array_sections_1 (tree c, tree t, vec<tree> &types,\n \t\t\t     bool &maybe_zero_len, unsigned int &first_non_one,\n-\t\t\t     bool is_omp)\n+\t\t\t     enum c_omp_region_type ort)\n {\n   tree ret, low_bound, length, type;\n   if (TREE_CODE (t) != TREE_LIST)\n@@ -11949,7 +11949,7 @@ handle_omp_array_sections_1 (tree c, tree t, vec<tree> &types,\n \treturn error_mark_node;\n       ret = t;\n       if (TREE_CODE (t) == COMPONENT_REF\n-\t  && is_omp\n+\t  && ort == C_ORT_OMP\n \t  && (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_MAP\n \t      || OMP_CLAUSE_CODE (c) == OMP_CLAUSE_TO\n \t      || OMP_CLAUSE_CODE (c) == OMP_CLAUSE_FROM))\n@@ -11996,7 +11996,7 @@ handle_omp_array_sections_1 (tree c, tree t, vec<tree> &types,\n     }\n \n   ret = handle_omp_array_sections_1 (c, TREE_CHAIN (t), types,\n-\t\t\t\t     maybe_zero_len, first_non_one, is_omp);\n+\t\t\t\t     maybe_zero_len, first_non_one, ort);\n   if (ret == error_mark_node || ret == NULL_TREE)\n     return ret;\n \n@@ -12227,14 +12227,14 @@ handle_omp_array_sections_1 (tree c, tree t, vec<tree> &types,\n /* Handle array sections for clause C.  */\n \n static bool\n-handle_omp_array_sections (tree c, bool is_omp)\n+handle_omp_array_sections (tree c, enum c_omp_region_type ort)\n {\n   bool maybe_zero_len = false;\n   unsigned int first_non_one = 0;\n   auto_vec<tree, 10> types;\n   tree first = handle_omp_array_sections_1 (c, OMP_CLAUSE_DECL (c), types,\n \t\t\t\t\t    maybe_zero_len, first_non_one,\n-\t\t\t\t\t    is_omp);\n+\t\t\t\t\t    ort);\n   if (first == error_mark_node)\n     return true;\n   if (first == NULL_TREE)\n@@ -12427,7 +12427,7 @@ handle_omp_array_sections (tree c, bool is_omp)\n \t      && TREE_CODE (TREE_TYPE (t)) == ARRAY_TYPE))\n \treturn false;\n       gcc_assert (OMP_CLAUSE_MAP_KIND (c) != GOMP_MAP_FORCE_DEVICEPTR);\n-      if (is_omp)\n+      if (ort == C_ORT_OMP || ort == C_ORT_ACC)\n \tswitch (OMP_CLAUSE_MAP_KIND (c))\n \t  {\n \t  case GOMP_MAP_ALLOC:\n@@ -12445,7 +12445,7 @@ handle_omp_array_sections (tree c, bool is_omp)\n \t    break;\n \t  }\n       tree c2 = build_omp_clause (OMP_CLAUSE_LOCATION (c), OMP_CLAUSE_MAP);\n-      if (!is_omp)\n+      if (ort != C_ORT_OMP && ort != C_ORT_ACC)\n \tOMP_CLAUSE_SET_MAP_KIND (c2, GOMP_MAP_POINTER);\n       else if (TREE_CODE (t) == COMPONENT_REF)\n \tOMP_CLAUSE_SET_MAP_KIND (c2, GOMP_MAP_ALWAYS_POINTER);\n@@ -12520,7 +12520,7 @@ tree\n c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n {\n   bitmap_head generic_head, firstprivate_head, lastprivate_head;\n-  bitmap_head aligned_head, map_head, map_field_head;\n+  bitmap_head aligned_head, map_head, map_field_head, oacc_reduction_head;\n   tree c, t, type, *pc;\n   tree simdlen = NULL_TREE, safelen = NULL_TREE;\n   bool branch_seen = false;\n@@ -12537,6 +12537,7 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n   bitmap_initialize (&aligned_head, &bitmap_default_obstack);\n   bitmap_initialize (&map_head, &bitmap_default_obstack);\n   bitmap_initialize (&map_field_head, &bitmap_default_obstack);\n+  bitmap_initialize (&oacc_reduction_head, &bitmap_default_obstack);\n \n   for (pc = &clauses, c = clauses; c ; c = *pc)\n     {\n@@ -12560,7 +12561,7 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t  t = OMP_CLAUSE_DECL (c);\n \t  if (TREE_CODE (t) == TREE_LIST)\n \t    {\n-\t      if (handle_omp_array_sections (c, ort & C_ORT_OMP))\n+\t      if (handle_omp_array_sections (c, ort))\n \t\t{\n \t\t  remove = true;\n \t\t  break;\n@@ -12874,6 +12875,17 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t\tomp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n \t      remove = true;\n \t    }\n+\t  else if (ort == C_ORT_ACC\n+\t\t   && OMP_CLAUSE_CODE (c) == OMP_CLAUSE_REDUCTION)\n+\t    {\n+\t      if (bitmap_bit_p (&oacc_reduction_head, DECL_UID (t)))\n+\t\t{\n+\t\t  error (\"%qD appears more than once in reduction clauses\", t);\n+\t\t  remove = true;\n+\t\t}\n+\t      else\n+\t\tbitmap_set_bit (&oacc_reduction_head, DECL_UID (t));\n+\t    }\n \t  else if (bitmap_bit_p (&generic_head, DECL_UID (t))\n \t\t   || bitmap_bit_p (&firstprivate_head, DECL_UID (t))\n \t\t   || bitmap_bit_p (&lastprivate_head, DECL_UID (t)))\n@@ -12885,7 +12897,10 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t  else if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_PRIVATE\n \t\t   && bitmap_bit_p (&map_head, DECL_UID (t)))\n \t    {\n-\t      error (\"%qD appears both in data and map clauses\", t);\n+\t      if (ort == C_ORT_ACC)\n+\t\terror (\"%qD appears more than once in data clauses\", t);\n+\t      else\n+\t\terror (\"%qD appears both in data and map clauses\", t);\n \t      remove = true;\n \t    }\n \t  else\n@@ -12911,7 +12926,10 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t    }\n \t  else if (bitmap_bit_p (&map_head, DECL_UID (t)))\n \t    {\n-\t      error (\"%qD appears both in data and map clauses\", t);\n+\t      if (ort == C_ORT_ACC)\n+\t\terror (\"%qD appears more than once in data clauses\", t);\n+\t      else\n+\t\terror (\"%qD appears both in data and map clauses\", t);\n \t      remove = true;\n \t    }\n \t  else\n@@ -13004,7 +13022,7 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t    }\n \t  if (TREE_CODE (t) == TREE_LIST)\n \t    {\n-\t      if (handle_omp_array_sections (c, ort & C_ORT_OMP))\n+\t      if (handle_omp_array_sections (c, ort))\n \t\tremove = true;\n \t      break;\n \t    }\n@@ -13027,7 +13045,7 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t  t = OMP_CLAUSE_DECL (c);\n \t  if (TREE_CODE (t) == TREE_LIST)\n \t    {\n-\t      if (handle_omp_array_sections (c, ort & C_ORT_OMP))\n+\t      if (handle_omp_array_sections (c, ort))\n \t\tremove = true;\n \t      else\n \t\t{\n@@ -13054,6 +13072,9 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t\t  if (OMP_CLAUSE_CODE (c) != OMP_CLAUSE_MAP)\n \t\t\t    error (\"%qD appears more than once in motion\"\n \t\t\t\t   \" clauses\", t);\n+\t\t\t  else if (ort == C_ORT_ACC)\n+\t\t\t    error (\"%qD appears more than once in data\"\n+\t\t\t\t   \" clauses\", t);\n \t\t\t  else\n \t\t\t    error (\"%qD appears more than once in map\"\n \t\t\t\t   \" clauses\", t);\n@@ -13155,7 +13176,10 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t}\n \t      else if (bitmap_bit_p (&map_head, DECL_UID (t)))\n \t\t{\n-\t\t  error (\"%qD appears both in data and map clauses\", t);\n+\t\t  if (ort == C_ORT_ACC)\n+\t\t    error (\"%qD appears more than once in data clauses\", t);\n+\t\t  else\n+\t\t    error (\"%qD appears both in data and map clauses\", t);\n \t\t  remove = true;\n \t\t}\n \t      else\n@@ -13165,14 +13189,19 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t    {\n \t      if (OMP_CLAUSE_CODE (c) != OMP_CLAUSE_MAP)\n \t\terror (\"%qD appears more than once in motion clauses\", t);\n+\t      else if (ort == C_ORT_ACC)\n+\t\terror (\"%qD appears more than once in data clauses\", t);\n \t      else\n \t\terror (\"%qD appears more than once in map clauses\", t);\n \t      remove = true;\n \t    }\n \t  else if (bitmap_bit_p (&generic_head, DECL_UID (t))\n \t\t   || bitmap_bit_p (&firstprivate_head, DECL_UID (t)))\n \t    {\n-\t      error (\"%qD appears both in data and map clauses\", t);\n+\t      if (ort == C_ORT_ACC)\n+\t\terror (\"%qD appears more than once in data clauses\", t);\n+\t      else\n+\t\terror (\"%qD appears both in data and map clauses\", t);\n \t      remove = true;\n \t    }\n \t  else"}, {"sha": "9f618a4f2ffc417760036d6aa3ddd0d3e7155224", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,3 +1,16 @@\n+2016-05-24  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* parser.c (cp_parser_oacc_declare): Add support for\n+\tGOMP_MAP_FIRSTPRIVATE_POINTER.\n+\t* semantics.c (handle_omp_array_sections_1): Replace bool is_omp\n+\targument with enum c_omp_region_type ort.  Don't privatize OpenACC\n+\tnon-static members.\n+\t(handle_omp_array_sections): Replace bool is_omp argument with enum\n+\tc_omp_region_type ort.  Update call to handle_omp_array_sections_1.\n+\t(finish_omp_clauses): Add specific errors and warning messages for\n+\tOpenACC.  Use firsrtprivate pointers for OpenACC subarrays.  Update\n+\tcall to handle_omp_array_sections.\n+\n 2016-05-24  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/70584"}, {"sha": "d21230fdd8d6a0bbf9ec6048d3be9d55d9d4928c", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -35214,6 +35214,7 @@ cp_parser_oacc_declare (cp_parser *parser, cp_token *pragma_tok)\n       gcc_assert (OMP_CLAUSE_CODE (t) == OMP_CLAUSE_MAP);\n       switch (OMP_CLAUSE_MAP_KIND (t))\n \t{\n+\tcase GOMP_MAP_FIRSTPRIVATE_POINTER:\n \tcase GOMP_MAP_FORCE_ALLOC:\n \tcase GOMP_MAP_FORCE_TO:\n \tcase GOMP_MAP_FORCE_DEVICEPTR:"}, {"sha": "8a3e7fd619b33ef88241cb390b3a29d387994b6c", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 50, "deletions": 22, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -4472,7 +4472,7 @@ omp_privatize_field (tree t, bool shared)\n static tree\n handle_omp_array_sections_1 (tree c, tree t, vec<tree> &types,\n \t\t\t     bool &maybe_zero_len, unsigned int &first_non_one,\n-\t\t\t     bool is_omp)\n+\t\t\t     enum c_omp_region_type ort)\n {\n   tree ret, low_bound, length, type;\n   if (TREE_CODE (t) != TREE_LIST)\n@@ -4484,7 +4484,7 @@ handle_omp_array_sections_1 (tree c, tree t, vec<tree> &types,\n \tt = TREE_OPERAND (t, 0);\n       ret = t;\n       if (TREE_CODE (t) == COMPONENT_REF\n-\t  && is_omp\n+\t  && ort == C_ORT_OMP\n \t  && (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_MAP\n \t      || OMP_CLAUSE_CODE (c) == OMP_CLAUSE_TO\n \t      || OMP_CLAUSE_CODE (c) == OMP_CLAUSE_FROM)\n@@ -4545,11 +4545,12 @@ handle_omp_array_sections_1 (tree c, tree t, vec<tree> &types,\n       return ret;\n     }\n \n-  if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_REDUCTION\n+  if (ort == C_ORT_OMP\n+      && OMP_CLAUSE_CODE (c) == OMP_CLAUSE_REDUCTION\n       && TREE_CODE (TREE_CHAIN (t)) == FIELD_DECL)\n     TREE_CHAIN (t) = omp_privatize_field (TREE_CHAIN (t), false);\n   ret = handle_omp_array_sections_1 (c, TREE_CHAIN (t), types,\n-\t\t\t\t     maybe_zero_len, first_non_one, is_omp);\n+\t\t\t\t     maybe_zero_len, first_non_one, ort);\n   if (ret == error_mark_node || ret == NULL_TREE)\n     return ret;\n \n@@ -4792,14 +4793,14 @@ handle_omp_array_sections_1 (tree c, tree t, vec<tree> &types,\n /* Handle array sections for clause C.  */\n \n static bool\n-handle_omp_array_sections (tree c, bool is_omp)\n+handle_omp_array_sections (tree c, enum c_omp_region_type ort)\n {\n   bool maybe_zero_len = false;\n   unsigned int first_non_one = 0;\n   auto_vec<tree, 10> types;\n   tree first = handle_omp_array_sections_1 (c, OMP_CLAUSE_DECL (c), types,\n \t\t\t\t\t    maybe_zero_len, first_non_one,\n-\t\t\t\t\t    is_omp);\n+\t\t\t\t\t    ort);\n   if (first == error_mark_node)\n     return true;\n   if (first == NULL_TREE)\n@@ -4988,7 +4989,7 @@ handle_omp_array_sections (tree c, bool is_omp)\n \t      || (TREE_CODE (t) == COMPONENT_REF\n \t\t  && TREE_CODE (TREE_TYPE (t)) == ARRAY_TYPE))\n \t    return false;\n-\t  if (is_omp)\n+\t  if (ort == C_ORT_OMP || ort == C_ORT_ACC)\n \t    switch (OMP_CLAUSE_MAP_KIND (c))\n \t      {\n \t      case GOMP_MAP_ALLOC:\n@@ -5007,7 +5008,7 @@ handle_omp_array_sections (tree c, bool is_omp)\n \t      }\n \t  tree c2 = build_omp_clause (OMP_CLAUSE_LOCATION (c),\n \t\t\t\t      OMP_CLAUSE_MAP);\n-\t  if (!is_omp)\n+\t  if ((ort & C_ORT_OMP_DECLARE_SIMD) != C_ORT_OMP && ort != C_ORT_ACC)\n \t    OMP_CLAUSE_SET_MAP_KIND (c2, GOMP_MAP_POINTER);\n \t  else if (TREE_CODE (t) == COMPONENT_REF)\n \t    OMP_CLAUSE_SET_MAP_KIND (c2, GOMP_MAP_ALWAYS_POINTER);\n@@ -5774,7 +5775,7 @@ tree\n finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n {\n   bitmap_head generic_head, firstprivate_head, lastprivate_head;\n-  bitmap_head aligned_head, map_head, map_field_head;\n+  bitmap_head aligned_head, map_head, map_field_head, oacc_reduction_head;\n   tree c, t, *pc;\n   tree safelen = NULL_TREE;\n   bool branch_seen = false;\n@@ -5788,6 +5789,7 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n   bitmap_initialize (&aligned_head, &bitmap_default_obstack);\n   bitmap_initialize (&map_head, &bitmap_default_obstack);\n   bitmap_initialize (&map_field_head, &bitmap_default_obstack);\n+  bitmap_initialize (&oacc_reduction_head, &bitmap_default_obstack);\n \n   for (pc = &clauses, c = clauses; c ; c = *pc)\n     {\n@@ -5807,8 +5809,7 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t  t = OMP_CLAUSE_DECL (c);\n \t  if (TREE_CODE (t) == TREE_LIST)\n \t    {\n-\t      if (handle_omp_array_sections (c, ((ort & C_ORT_OMP_DECLARE_SIMD)\n-\t\t\t\t\t\t == C_ORT_OMP)))\n+\t      if (handle_omp_array_sections (c, ort))\n \t\t{\n \t\t  remove = true;\n \t\t  break;\n@@ -6018,6 +6019,17 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t       omp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n \t      remove = true;\n \t    }\n+\t  else if (ort == C_ORT_ACC\n+\t\t   && OMP_CLAUSE_CODE (c) == OMP_CLAUSE_REDUCTION)\n+\t    {\n+\t      if (bitmap_bit_p (&oacc_reduction_head, DECL_UID (t)))\n+\t\t{\n+\t\t  error (\"%qD appears more than once in reduction clauses\", t);\n+\t\t  remove = true;\n+\t\t}\n+\t      else\n+\t\tbitmap_set_bit (&oacc_reduction_head, DECL_UID (t));\n+\t    }\n \t  else if (bitmap_bit_p (&generic_head, DECL_UID (t))\n \t\t   || bitmap_bit_p (&firstprivate_head, DECL_UID (t))\n \t\t   || bitmap_bit_p (&lastprivate_head, DECL_UID (t)))\n@@ -6028,7 +6040,10 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t  else if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_PRIVATE\n \t\t   && bitmap_bit_p (&map_head, DECL_UID (t)))\n \t    {\n-\t      error (\"%qD appears both in data and map clauses\", t);\n+\t      if (ort == C_ORT_ACC)\n+\t\terror (\"%qD appears more than once in data clauses\", t);\n+\t      else\n+\t\terror (\"%qD appears both in data and map clauses\", t);\n \t      remove = true;\n \t    }\n \t  else\n@@ -6038,7 +6053,8 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \thandle_field_decl:\n \t  if (!remove\n \t      && TREE_CODE (t) == FIELD_DECL\n-\t      && t == OMP_CLAUSE_DECL (c))\n+\t      && t == OMP_CLAUSE_DECL (c)\n+\t      && ort != C_ORT_ACC)\n \t    {\n \t      OMP_CLAUSE_DECL (c)\n \t\t= omp_privatize_field (t, (OMP_CLAUSE_CODE (c)\n@@ -6054,7 +6070,7 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t    omp_note_field_privatization (t, OMP_CLAUSE_DECL (c));\n \t  else\n \t    t = OMP_CLAUSE_DECL (c);\n-\t  if (t == current_class_ptr)\n+\t  if (ort != C_ORT_ACC && t == current_class_ptr)\n \t    {\n \t      error (\"%<this%> allowed in OpenMP only in %<declare simd%>\"\n \t\t     \" clauses\");\n@@ -6081,7 +6097,10 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t    }\n \t  else if (bitmap_bit_p (&map_head, DECL_UID (t)))\n \t    {\n-\t      error (\"%qD appears both in data and map clauses\", t);\n+\t      if (ort == C_ORT_ACC)\n+\t\terror (\"%qD appears more than once in data clauses\", t);\n+\t      else\n+\t\terror (\"%qD appears both in data and map clauses\", t);\n \t      remove = true;\n \t    }\n \t  else\n@@ -6529,8 +6548,7 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t    }\n \t  if (TREE_CODE (t) == TREE_LIST)\n \t    {\n-\t      if (handle_omp_array_sections (c, ((ort & C_ORT_OMP_DECLARE_SIMD)\n-\t\t\t\t\t\t == C_ORT_OMP)))\n+\t      if (handle_omp_array_sections (c, ort))\n \t\tremove = true;\n \t      break;\n \t    }\n@@ -6564,8 +6582,7 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t  t = OMP_CLAUSE_DECL (c);\n \t  if (TREE_CODE (t) == TREE_LIST)\n \t    {\n-\t      if (handle_omp_array_sections (c, ((ort & C_ORT_OMP_DECLARE_SIMD)\n-\t\t\t\t\t\t == C_ORT_OMP)))\n+\t      if (handle_omp_array_sections (c, ort))\n \t\tremove = true;\n \t      else\n \t\t{\n@@ -6594,6 +6611,9 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t\t  if (OMP_CLAUSE_CODE (c) != OMP_CLAUSE_MAP)\n \t\t\t    error (\"%qD appears more than once in motion\"\n \t\t\t\t   \" clauses\", t);\n+\t\t\t  else if (ort == C_ORT_ACC)\n+\t\t\t    error (\"%qD appears more than once in data\"\n+\t\t\t\t   \" clauses\", t);\n \t\t\t  else\n \t\t\t    error (\"%qD appears more than once in map\"\n \t\t\t\t   \" clauses\", t);\n@@ -6681,7 +6701,7 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t     omp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n \t      remove = true;\n \t    }\n-\t  else if (t == current_class_ptr)\n+\t  else if (ort != C_ORT_ACC && t == current_class_ptr)\n \t    {\n \t      error (\"%<this%> allowed in OpenMP only in %<declare simd%>\"\n \t\t     \" clauses\");\n@@ -6730,7 +6750,10 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t}\n \t      else if (bitmap_bit_p (&map_head, DECL_UID (t)))\n \t\t{\n-\t\t  error (\"%qD appears both in data and map clauses\", t);\n+\t\t  if (ort == C_ORT_ACC)\n+\t\t    error (\"%qD appears more than once in data clauses\", t);\n+\t\t  else\n+\t\t    error (\"%qD appears both in data and map clauses\", t);\n \t\t  remove = true;\n \t\t}\n \t      else\n@@ -6740,14 +6763,19 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t    {\n \t      if (OMP_CLAUSE_CODE (c) != OMP_CLAUSE_MAP)\n \t\terror (\"%qD appears more than once in motion clauses\", t);\n+\t      if (ort == C_ORT_ACC)\n+\t\terror (\"%qD appears more than once in data clauses\", t);\n \t      else\n \t\terror (\"%qD appears more than once in map clauses\", t);\n \t      remove = true;\n \t    }\n \t  else if (bitmap_bit_p (&generic_head, DECL_UID (t))\n \t\t   || bitmap_bit_p (&firstprivate_head, DECL_UID (t)))\n \t    {\n-\t      error (\"%qD appears both in data and map clauses\", t);\n+\t      if (ort == C_ORT_ACC)\n+\t\terror (\"%qD appears more than once in data clauses\", t);\n+\t      else\n+\t\terror (\"%qD appears both in data and map clauses\", t);\n \t      remove = true;\n \t    }\n \t  else"}, {"sha": "8316bb8881f22745b705d6bb9f2e3a1af80d43f4", "filename": "gcc/gimplify.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -6280,6 +6280,9 @@ omp_notice_variable (struct gimplify_omp_ctx *ctx, tree decl, bool in_code)\n \t\t        error (\"variable %qE declared in enclosing \"\n \t\t\t       \"%<host_data%> region\", DECL_NAME (decl));\n \t\t      nflags |= GOVD_MAP;\n+\t\t      if (octx->region_type == ORT_ACC_DATA\n+\t\t\t  && (n2->value & GOVD_MAP_0LEN_ARRAY))\n+\t\t\tnflags |= GOVD_MAP_0LEN_ARRAY;\n \t\t      goto found_outer;\n \t\t    }\n \t\t}\n@@ -6855,9 +6858,14 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t    {\n \t    case OMP_TARGET:\n \t      break;\n+\t    case OACC_DATA:\n+\t      if (TREE_CODE (TREE_TYPE (decl)) != ARRAY_TYPE)\n+\t\tbreak;\n \t    case OMP_TARGET_DATA:\n \t    case OMP_TARGET_ENTER_DATA:\n \t    case OMP_TARGET_EXIT_DATA:\n+\t    case OACC_ENTER_DATA:\n+\t    case OACC_EXIT_DATA:\n \t    case OACC_HOST_DATA:\n \t      if (OMP_CLAUSE_MAP_KIND (c) == GOMP_MAP_FIRSTPRIVATE_POINTER\n \t\t  || (OMP_CLAUSE_MAP_KIND (c)\n@@ -7311,6 +7319,10 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t\t    omp_notice_variable (outer_ctx, t, true);\n \t\t}\n \t    }\n+\t  if (code == OACC_DATA\n+\t      && OMP_CLAUSE_CODE (c) == OMP_CLAUSE_MAP\n+\t      && OMP_CLAUSE_MAP_KIND (c) == GOMP_MAP_FIRSTPRIVATE_POINTER)\n+\t    flags |= GOVD_MAP_0LEN_ARRAY;\n \t  omp_add_variable (ctx, decl, flags);\n \t  if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_REDUCTION\n \t      && OMP_CLAUSE_REDUCTION_PLACEHOLDER (c))\n@@ -7569,6 +7581,10 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t  gcc_unreachable ();\n \t}\n \n+      if (code == OACC_DATA\n+\t  && OMP_CLAUSE_CODE (c) == OMP_CLAUSE_MAP\n+\t  && OMP_CLAUSE_MAP_KIND (c) == GOMP_MAP_FIRSTPRIVATE_POINTER)\n+\tremove = true;\n       if (remove)\n \t*list_p = OMP_CLAUSE_CHAIN (c);\n       else\n@@ -8029,7 +8045,7 @@ gimplify_adjust_omp_clauses (gimple_seq *pre_p, gimple_seq body, tree *list_p,\n \t      break;\n \t    }\n \t  decl = OMP_CLAUSE_DECL (c);\n-\t  /* Data clasues associated with acc parallel reductions must be\n+\t  /* Data clauses associated with acc parallel reductions must be\n \t     compatible with present_or_copy.  Warn and adjust the clause\n \t     if that is not the case.  */\n \t  if (ctx->region_type == ORT_ACC_PARALLEL)"}, {"sha": "bb082a177ced45d05eac794609250dfc2dbb319a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,3 +1,21 @@\n+2016-05-24  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* c-c++-common/goacc/data-clause-duplicate-1.c: Adjust test.\n+\t* c-c++-common/goacc/deviceptr-1.c: Likewise.\n+\t* c-c++-common/goacc/kernels-alias-3.c: Likewise.\n+\t* c-c++-common/goacc/kernels-alias-4.c: Likewise.\n+\t* c-c++-common/goacc/kernels-alias-5.c: Likewise.\n+\t* c-c++-common/goacc/kernels-alias-8.c: Likewise.\n+\t* c-c++-common/goacc/kernels-alias-ipa-pta-3.c: Likewise.\n+\t* c-c++-common/goacc/pcopy.c: Likewise.\n+\t* c-c++-common/goacc/pcopyin.c: Likewise.\n+\t* c-c++-common/goacc/pcopyout.c: Likewise.\n+\t* c-c++-common/goacc/pcreate.c: Likewise.\n+\t* c-c++-common/goacc/pr70688.c: New test.\n+\t* c-c++-common/goacc/present-1.c: Adjust test.\n+\t* c-c++-common/goacc/reduction-5.c: Likewise.\n+\t* g++.dg/goacc/data-1.C: New test.\n+\n 2016-05-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/p9-vparity.c: New file to check ISA 3.0"}, {"sha": "6245beb20794e2c60f437b05388b7c9f0fc44504", "filename": "gcc/testsuite/c-c++-common/goacc/data-clause-duplicate-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdata-clause-duplicate-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdata-clause-duplicate-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdata-clause-duplicate-1.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -2,12 +2,12 @@ void\n fun (void)\n {\n   float *fp;\n-#pragma acc parallel copy(fp[0:2],fp[0:2]) /* { dg-error \"'fp' appears more than once in map clauses\" } */\n+#pragma acc parallel copy(fp[0:2],fp[0:2]) /* { dg-error \"'fp' appears more than once in data clauses\" } */\n   ;\n-#pragma acc kernels present_or_copyin(fp[3]) present_or_copyout(fp[7:4]) /* { dg-error \"'fp' appears more than once in map clauses\" } */\n+#pragma acc kernels present_or_copyin(fp[3]) present_or_copyout(fp[7:4]) /* { dg-error \"'fp' appears more than once in data clauses\" } */\n   ;\n-#pragma acc data create(fp[:10]) deviceptr(fp) /* { dg-error \"'fp' appears more than once in map clauses\" } */\n+#pragma acc data create(fp[:10]) deviceptr(fp) /* { dg-error \"'fp' appears more than once in data clauses\" } */\n   ;\n-#pragma acc data create(fp) present(fp) /* { dg-error \"'fp' appears more than once in map clauses\" } */\n+#pragma acc data create(fp) present(fp) /* { dg-error \"'fp' appears more than once in data clauses\" } */\n   ;\n }"}, {"sha": "3aa0e8a115364d897f82c4570e2e1d9e65d39ac4", "filename": "gcc/testsuite/c-c++-common/goacc/deviceptr-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdeviceptr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdeviceptr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdeviceptr-1.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -47,19 +47,19 @@ fun2 (void)\n   /* { dg-error \"'u' undeclared\" \"u undeclared\" { target *-*-* } 46 } */\n   /* { dg-error \"'fun2' is not a variable\" \"fun2 not a variable\" { target *-*-* } 46 } */\n   /* { dg-error \"'i' is not a pointer variable\" \"i not a pointer variable\" { target *-*-* } 46 } */\n-  /* { dg-error \"'fp' appears more than once in map clauses\" \"fp more than once\" { target *-*-* } 46 } */\n+  /* { dg-error \"'fp' appears more than once in data clauses\" \"fp more than once\" { target *-*-* } 46 } */\n   ;\n }\n \n void\n fun3 (void)\n {\n   float *fp;\n-#pragma acc data deviceptr(fp,fp) /* { dg-error \"'fp' appears more than once in map clauses\" } */\n+#pragma acc data deviceptr(fp,fp) /* { dg-error \"'fp' appears more than once in data clauses\" } */\n   ;\n-#pragma acc parallel deviceptr(fp) deviceptr(fp) /* { dg-error \"'fp' appears more than once in map clauses\" } */\n+#pragma acc parallel deviceptr(fp) deviceptr(fp) /* { dg-error \"'fp' appears more than once in data clauses\" } */\n   ;\n-#pragma acc kernels copy(fp) deviceptr(fp) /* { dg-error \"'fp' appears more than once in map clauses\" } */\n+#pragma acc kernels copy(fp) deviceptr(fp) /* { dg-error \"'fp' appears more than once in data clauses\" } */\n   ;\n }\n "}, {"sha": "2934f124ef69edca1011d289394511a065fa581f", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-alias-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-3.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -17,5 +17,5 @@ foo (void)\n /* Only the omp_data_i related loads should be annotated with\n    non-base 0 cliques.  */\n /* { dg-final { scan-tree-dump-times \"clique 1 base 1\" 2 \"ealias\" } } */\n-/* { dg-final { scan-tree-dump-times \"(?n)clique 1 base 0\" 3 \"ealias\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)clique 1 base 0\" 2 \"ealias\" } } */\n "}, {"sha": "f6ee5b58c7126f6cb86565bf5cab0f3f3c4275e4", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-alias-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-4.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -19,5 +19,5 @@ foo (void)\n /* Only the omp_data_i related loads should be annotated with\n    non-base 0 cliques.  */\n /* { dg-final { scan-tree-dump-times \"clique 1 base 1\" 2 \"ealias\" } } */\n-/* { dg-final { scan-tree-dump-times \"(?n)clique 1 base 0\" 3 \"ealias\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)clique 1 base 0\" 2 \"ealias\" } } */\n "}, {"sha": "74425fb02bc9b0d5b4e2509fa24b331c4e61aa54", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-alias-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-5.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -15,5 +15,5 @@ foo (int *a)\n \n /* Only the omp_data_i related loads should be annotated with cliques.  */\n /* { dg-final { scan-tree-dump-times \"clique 1 base 1\" 2 \"ealias\" } } */\n-/* { dg-final { scan-tree-dump-times \"(?n)clique 1 base 0\" 4 \"ealias\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)clique 1 base 0\" 2 \"ealias\" } } */\n "}, {"sha": "69200ccf192556cb762f10a668a326368581e4bf", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-alias-8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-8.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -7,7 +7,7 @@ extern void *acc_copyin (void *, size_t);\n void\n foo (int *a, size_t n)\n {\n-  int *p = (int *)acc_copyin (&a, n);\n+  int *p = (int *)acc_copyin (a, n);\n \n #pragma acc kernels deviceptr (p) pcopy(a[0:n])\n   {\n@@ -18,5 +18,5 @@ foo (int *a, size_t n)\n \n /* Only the omp_data_i related loads should be annotated with cliques.  */\n /* { dg-final { scan-tree-dump-times \"clique 1 base 1\" 2 \"ealias\" } } */\n-/* { dg-final { scan-tree-dump-times \"(?n)clique 1 base 0\" 3 \"ealias\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)clique 1 base 0\" 2 \"ealias\" } } */\n "}, {"sha": "1ea0e7303d900a0d8935255fe7fb6037716372ab", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-alias-ipa-pta-3.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-ipa-pta-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-ipa-pta-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-ipa-pta-3.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -31,6 +31,5 @@ foo (void)\n   free (c);\n }\n \n-/* { dg-final { scan-tree-dump-times \"(?n)= 0;$\" 1 \"optimized\" } } */\n-/* { dg-final { scan-tree-dump-times \"(?n)= 1;$\" 1 \"optimized\" } } */\n-/* { dg-final { scan-tree-dump-times \"(?n)= \\\\*a\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)= 0;$\" 1 \"optimized\" { target c } } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)= 1;$\" 1 \"optimized\" { target c }  } } */"}, {"sha": "0e0aad55a6806d96c19212f223c6fcbd15211ecd", "filename": "gcc/testsuite/c-c++-common/goacc/pcopy.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fpcopy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fpcopy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fpcopy.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -7,4 +7,4 @@ f (char *cp)\n   ;\n }\n \n-/* { dg-final { scan-tree-dump-times \"#pragma acc parallel map\\\\(tofrom:\\\\*\\\\(cp \\\\+ 3\\\\) \\\\\\[len: 5]\\\\) map\\\\(alloc:cp \\\\\\[pointer assign, bias: 3]\\\\)\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"#pragma acc parallel map\\\\(tofrom:\\\\*\\\\(cp \\\\+ 3\\\\) \\\\\\[len: 5]\\\\) map\\\\(firstprivate:cp \\\\\\[pointer assign, bias: 3]\\\\)\" 1 \"original\" } } */"}, {"sha": "3085251deb653cb3555b4e849065ef9b6ef1e592", "filename": "gcc/testsuite/c-c++-common/goacc/pcopyin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fpcopyin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fpcopyin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fpcopyin.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -7,4 +7,4 @@ f (char *cp)\n   ;\n }\n \n-/* { dg-final { scan-tree-dump-times \"#pragma acc parallel map\\\\(to:\\\\*\\\\(cp \\\\+ 4\\\\) \\\\\\[len: 6]\\\\) map\\\\(alloc:cp \\\\\\[pointer assign, bias: 4]\\\\)\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"#pragma acc parallel map\\\\(to:\\\\*\\\\(cp \\\\+ 4\\\\) \\\\\\[len: 6]\\\\) map\\\\(firstprivate:cp \\\\\\[pointer assign, bias: 4]\\\\)\" 1 \"original\" } } */"}, {"sha": "47c454ce92a5eca82fed0ad62dc8cc0ac91a01a4", "filename": "gcc/testsuite/c-c++-common/goacc/pcopyout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fpcopyout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fpcopyout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fpcopyout.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -7,4 +7,4 @@ f (char *cp)\n   ;\n }\n \n-/* { dg-final { scan-tree-dump-times \"#pragma acc parallel map\\\\(from:\\\\*\\\\(cp \\\\+ 5\\\\) \\\\\\[len: 7]\\\\) map\\\\(alloc:cp \\\\\\[pointer assign, bias: 5]\\\\)\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"#pragma acc parallel map\\\\(from:\\\\*\\\\(cp \\\\+ 5\\\\) \\\\\\[len: 7]\\\\) map\\\\(firstprivate:cp \\\\\\[pointer assign, bias: 5]\\\\)\" 1 \"original\" } } */"}, {"sha": "a403e5a64ffe3ae3c5a2eb6c06c59ac335cb5126", "filename": "gcc/testsuite/c-c++-common/goacc/pcreate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fpcreate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fpcreate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fpcreate.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -7,4 +7,4 @@ f (char *cp)\n   ;\n }\n \n-/* { dg-final { scan-tree-dump-times \"#pragma acc parallel map\\\\(alloc:\\\\*\\\\(cp \\\\+ 6\\\\) \\\\\\[len: 8]\\\\) map\\\\(alloc:cp \\\\\\[pointer assign, bias: 6]\\\\)\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"#pragma acc parallel map\\\\(alloc:\\\\*\\\\(cp \\\\+ 6\\\\) \\\\\\[len: 8]\\\\) map\\\\(firstprivate:cp \\\\\\[pointer assign, bias: 6]\\\\)\" 1 \"original\" } } */"}, {"sha": "5a2366540692b491f589afdbb22f8e09f5efc5e2", "filename": "gcc/testsuite/c-c++-common/goacc/pr70688.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fpr70688.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fpr70688.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fpr70688.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -0,0 +1,48 @@\n+const int n = 100;\n+\n+int\n+private_reduction ()\n+{\n+  int i, r;\n+\n+  #pragma acc parallel\n+  #pragma acc loop private (r) reduction (+:r)\n+  for (i = 0; i < 100; i++)\n+    r += 10;\n+\n+  return r;\n+}\n+\n+int\n+parallel_reduction ()\n+{\n+  int sum = 0;\n+  int dummy = 0;\n+\n+#pragma acc data copy (dummy)\n+  {\n+#pragma acc parallel num_gangs (10) copy (sum) reduction (+:sum)\n+    {\n+      int v = 5;\n+      sum += 10 + v;\n+    }\n+  }\n+\n+  return sum;\n+}\n+\n+int\n+main ()\n+{\n+  int i, s = 0;\n+\n+#pragma acc parallel num_gangs (10) copy (s) reduction (+:s)\n+  for (i = 0; i < n; i++)\n+    s += i+1;\n+\n+#pragma acc parallel num_gangs (10) reduction (+:s) copy (s)\n+  for (i = 0; i < n; i++)\n+    s += i+1;\n+\n+  return 0;\n+}"}, {"sha": "51362b2f2f16eb98bb940dd340d18ddb30ac94c5", "filename": "gcc/testsuite/c-c++-common/goacc/present-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fpresent-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fpresent-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fpresent-1.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -7,4 +7,4 @@ f (char *cp)\n   ;\n }\n \n-/* { dg-final { scan-tree-dump-times \"#pragma acc parallel map\\\\(force_present:\\\\*\\\\(cp \\\\+ 7\\\\) \\\\\\[len: 9]\\\\) map\\\\(alloc:cp \\\\\\[pointer assign, bias: 7]\\\\)\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"#pragma acc parallel map\\\\(force_present:\\\\*\\\\(cp \\\\+ 7\\\\) \\\\\\[len: 9]\\\\) map\\\\(firstprivate:cp \\\\\\[pointer assign, bias: 7]\\\\)\" 1 \"original\" } } */"}, {"sha": "dfdbab9139375a418ca1281c7da8352a528f384e", "filename": "gcc/testsuite/c-c++-common/goacc/reduction-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Freduction-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Freduction-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Freduction-5.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -7,9 +7,9 @@ main(void)\n {\n   int v1;\n \n-#pragma acc parallel reduction(+:v1) private(v1) /* { dg-error \"appears more than once in data clauses\" } */\n+#pragma acc parallel reduction(+:v1) private(v1) /* { dg-error \"invalid private reduction\" } */\n   ;\n-#pragma acc parallel reduction(+:v1) firstprivate(v1) /* { dg-error \"appears more than once in data clauses\" } */\n+#pragma acc parallel reduction(+:v1) firstprivate(v1) /* { dg-error \"invalid private reduction\" } */\n   ;\n \n   return 0;"}, {"sha": "54676dc2dffbb477c8e744fc6e1f59b1adc4c32d", "filename": "gcc/testsuite/g++.dg/goacc/data-1.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Fdata-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Fdata-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Fdata-1.C?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -0,0 +1,39 @@\n+void\n+foo (int &a, int (&b)[100], int &n)\n+{\n+#pragma acc enter data copyin (a, b) async wait\n+#pragma acc enter data create (b[20:30]) async wait\n+#pragma acc enter data (a) /* { dg-error \"expected '#pragma acc' clause before '\\\\\\(' token\" } */\n+#pragma acc enter data create (b(1:10)) /* { dg-error \"expected '\\\\\\)' before '\\\\\\(' token\" } */\n+#pragma acc exit data delete (a) if (0)\n+#pragma acc exit data copyout (b) if (a)\n+#pragma acc exit data delete (b)\n+#pragma acc enter /* { dg-error \"expected 'data' in\" } */\n+#pragma acc exit /* { dg-error \"expected 'data' in\" } */\n+#pragma acc enter data /* { dg-error \"has no data movement clause\" } */\n+#pragma acc exit data /* { dg-error \"has no data movement clause\" } */\n+#pragma acc enter Data /* { dg-error \"invalid pragma before\" } */\n+#pragma acc exit copyout (b) /* { dg-error \"invalid pragma before\" } */\n+}\n+\n+template<typename T>\n+void\n+foo (T &a, T (&b)[100], T &n)\n+{\n+#pragma acc enter data copyin (a, b) async wait\n+#pragma acc enter data create (b[20:30]) async wait\n+#pragma acc enter data (a) /* { dg-error \"expected '#pragma acc' clause before '\\\\\\(' token\" } */\n+#pragma acc enter data create (b(1:10)) /* { dg-error \"expected '\\\\\\)' before '\\\\\\(' token\" } */\n+#pragma acc exit data delete (a) if (0)\n+#pragma acc exit data copyout (b) if (a)\n+#pragma acc exit data delete (b)\n+#pragma acc enter /* { dg-error \"expected 'data' in\" } */\n+#pragma acc exit /* { dg-error \"expected 'data' in\" } */\n+#pragma acc enter data /* { dg-error \"has no data movement clause\" } */\n+#pragma acc exit data /* { dg-error \"has no data movement clause\" } */\n+#pragma acc enter Data /* { dg-error \"invalid pragma before\" } */\n+#pragma acc exit copyout (b) /* { dg-error \"invalid pragma before\" } */\n+}\n+\n+/* { dg-error \"has no data movement clause\" \"\" { target *-*-* } 6 } */\n+/* { dg-error \"has no data movement clause\" \"\" { target *-*-* } 25 } */"}, {"sha": "7ad7ff49ff85687e23408b9c76e86f472588d868", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,3 +1,48 @@\n+2016-05-24  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* oacc-mem.c (acc_malloc): Update handling of shared-memory targets.\n+\t(acc_free): Likewise.\n+\t(acc_memcpy_to_device): Likewise.\n+\t(acc_memcpy_from_device): Likewise.\n+\t(acc_deviceptr): Likewise.\n+\t(acc_hostptr): Likewise.\n+\t(acc_is_present): Likewise.\n+\t(acc_map_data): Likewise.\n+\t(acc_unmap_data): Likewise.\n+\t(present_create_copy): Likewise.\n+\t(delete_copyout): Likewise.\n+\t(update_dev_host): Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/asyncwait-1.c: Remove xfail.\n+\t* testsuite/libgomp.oacc-c-c++-common/data-2-lib.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/data-2.c: Adjust test.\n+\t* testsuite/libgomp.oacc-c-c++-common/data-3.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/enter_exit-lib.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-13.c: Adjust test so that\n+\tit only runs on nvptx targets.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-14.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-15.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-16.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-17.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-18.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-20.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-21.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-22.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-23.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-24.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-25.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-28.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-29.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-30.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-34.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-42.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-43.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-44.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-47.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-48.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-52.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-53.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-54.c: Likewise.\n+\n 2016-05-23  Martin Jambor  <mjambor@suse.cz>\n \n \t* testsuite/libgomp.hsa.c/switch-sbr-2.c: New test."}, {"sha": "665e208cd36e1178fbcfc51ba7f42cc5a7b9e7d7", "filename": "libgomp/oacc-mem.c", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Foacc-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Foacc-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-mem.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -32,6 +32,7 @@\n #include \"gomp-constants.h\"\n #include \"oacc-int.h\"\n #include <stdint.h>\n+#include <string.h>\n #include <assert.h>\n \n /* Return block containing [H->S), or NULL if not contained.  The device lock\n@@ -104,6 +105,9 @@ acc_malloc (size_t s)\n \n   assert (thr->dev);\n \n+  if (thr->dev->capabilities & GOMP_OFFLOAD_CAP_SHARED_MEM)\n+    return malloc (s);\n+\n   return thr->dev->alloc_func (thr->dev->target_id, s);\n }\n \n@@ -124,6 +128,9 @@ acc_free (void *d)\n \n   struct gomp_device_descr *acc_dev = thr->dev;\n \n+  if (acc_dev->capabilities & GOMP_OFFLOAD_CAP_SHARED_MEM)\n+    return free (d);\n+\n   gomp_mutex_lock (&acc_dev->lock);\n \n   /* We don't have to call lazy open here, as the ptr value must have\n@@ -154,6 +161,12 @@ acc_memcpy_to_device (void *d, void *h, size_t s)\n \n   assert (thr && thr->dev);\n \n+  if (thr->dev->capabilities & GOMP_OFFLOAD_CAP_SHARED_MEM)\n+    {\n+      memmove (d, h, s);\n+      return;\n+    }\n+\n   thr->dev->host2dev_func (thr->dev->target_id, d, h, s);\n }\n \n@@ -166,6 +179,12 @@ acc_memcpy_from_device (void *h, void *d, size_t s)\n \n   assert (thr && thr->dev);\n \n+  if (thr->dev->capabilities & GOMP_OFFLOAD_CAP_SHARED_MEM)\n+    {\n+      memmove (h, d, s);\n+      return;\n+    }\n+\n   thr->dev->dev2host_func (thr->dev->target_id, h, d, s);\n }\n \n@@ -184,6 +203,9 @@ acc_deviceptr (void *h)\n   struct goacc_thread *thr = goacc_thread ();\n   struct gomp_device_descr *dev = thr->dev;\n \n+  if (thr->dev->capabilities & GOMP_OFFLOAD_CAP_SHARED_MEM)\n+    return h;\n+\n   gomp_mutex_lock (&dev->lock);\n \n   n = lookup_host (dev, h, 1);\n@@ -218,6 +240,9 @@ acc_hostptr (void *d)\n   struct goacc_thread *thr = goacc_thread ();\n   struct gomp_device_descr *acc_dev = thr->dev;\n \n+  if (thr->dev->capabilities & GOMP_OFFLOAD_CAP_SHARED_MEM)\n+    return d;\n+\n   gomp_mutex_lock (&acc_dev->lock);\n \n   n = lookup_dev (acc_dev->openacc.data_environ, d, 1);\n@@ -252,6 +277,9 @@ acc_is_present (void *h, size_t s)\n   struct goacc_thread *thr = goacc_thread ();\n   struct gomp_device_descr *acc_dev = thr->dev;\n \n+  if (thr->dev->capabilities & GOMP_OFFLOAD_CAP_SHARED_MEM)\n+    return h != NULL;\n+\n   gomp_mutex_lock (&acc_dev->lock);\n \n   n = lookup_host (acc_dev, h, s);\n@@ -271,7 +299,7 @@ acc_is_present (void *h, size_t s)\n void\n acc_map_data (void *h, void *d, size_t s)\n {\n-  struct target_mem_desc *tgt;\n+  struct target_mem_desc *tgt = NULL;\n   size_t mapnum = 1;\n   void *hostaddrs = h;\n   void *devaddrs = d;\n@@ -287,9 +315,6 @@ acc_map_data (void *h, void *d, size_t s)\n     {\n       if (d != h)\n         gomp_fatal (\"cannot map data on shared-memory system\");\n-\n-      tgt = gomp_map_vars (NULL, 0, NULL, NULL, NULL, NULL, true,\n-\t\t\t   GOMP_MAP_VARS_OPENACC);\n     }\n   else\n     {\n@@ -335,6 +360,10 @@ acc_unmap_data (void *h)\n \n   /* No need to call lazy open, as the address must have been mapped.  */\n \n+  /* This is a no-op on shared-memory targets.  */\n+  if (acc_dev->capabilities & GOMP_OFFLOAD_CAP_SHARED_MEM)\n+    return;\n+\n   size_t host_size;\n \n   gomp_mutex_lock (&acc_dev->lock);\n@@ -405,6 +434,9 @@ present_create_copy (unsigned f, void *h, size_t s)\n   struct goacc_thread *thr = goacc_thread ();\n   struct gomp_device_descr *acc_dev = thr->dev;\n \n+  if (acc_dev->capabilities & GOMP_OFFLOAD_CAP_SHARED_MEM)\n+    return h;\n+\n   gomp_mutex_lock (&acc_dev->lock);\n \n   n = lookup_host (acc_dev, h, s);\n@@ -496,6 +528,9 @@ delete_copyout (unsigned f, void *h, size_t s)\n   struct goacc_thread *thr = goacc_thread ();\n   struct gomp_device_descr *acc_dev = thr->dev;\n \n+  if (acc_dev->capabilities & GOMP_OFFLOAD_CAP_SHARED_MEM)\n+    return;\n+\n   gomp_mutex_lock (&acc_dev->lock);\n \n   n = lookup_host (acc_dev, h, s);\n@@ -553,6 +588,9 @@ update_dev_host (int is_dev, void *h, size_t s)\n   struct goacc_thread *thr = goacc_thread ();\n   struct gomp_device_descr *acc_dev = thr->dev;\n \n+  if (acc_dev->capabilities & GOMP_OFFLOAD_CAP_SHARED_MEM)\n+    return;\n+\n   gomp_mutex_lock (&acc_dev->lock);\n \n   n = lookup_host (acc_dev, h, s);"}, {"sha": "d478ce2eef5799ad2cfec3c9274c463c916e92eb", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/asyncwait-1.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fasyncwait-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fasyncwait-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fasyncwait-1.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,6 +1,4 @@\n /* { dg-do run { target openacc_nvidia_accel_selected } } */\n-/* <http://news.gmane.org/find-root.php?message_id=%3C87pp0aaksc.fsf%40kepler.schwinge.homeip.net%3E>.\n-   { dg-xfail-run-if \"TODO\" { *-*-* } } */\n /* { dg-additional-options \"-lcuda\" } */\n \n #include <openacc.h>"}, {"sha": "e1aa2c931ff047211bc79da61930f1117fbf2cd3", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/data-2-lib.c", "status": "added", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdata-2-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdata-2-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdata-2-lib.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -0,0 +1,185 @@\n+/* This test is similar to data-2.c, but it uses acc_* library functions\n+   to move data.  */\n+\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+#include <assert.h>\n+#include <openacc.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int N = 128; //1024 * 1024;\n+  float *a, *b, *c, *d, *e;\n+  void *d_a, *d_b, *d_c, *d_d;\n+  int i;\n+  int nbytes;\n+\n+  nbytes = N * sizeof (float);\n+\n+  a = (float *) malloc (nbytes);\n+  b = (float *) malloc (nbytes);\n+  c = (float *) malloc (nbytes);\n+  d = (float *) malloc (nbytes);\n+  e = (float *) malloc (nbytes);\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      a[i] = 3.0;\n+      b[i] = 0.0;\n+    }\n+\n+  d_a = acc_copyin (a, nbytes);\n+  d_b = acc_copyin (b, nbytes);\n+  acc_copyin (&N, sizeof (int));\n+  \n+#pragma acc parallel present (a[0:N], b[0:N], N) async wait\n+#pragma acc loop\n+  for (i = 0; i < N; i++)\n+    b[i] = a[i];\n+\n+  acc_wait_all ();\n+\n+  acc_memcpy_from_device (a, d_a, nbytes);\n+  acc_memcpy_from_device (b, d_b, nbytes);\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      assert (a[i] == 3.0);\n+      assert (b[i] == 3.0);\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      a[i] = 2.0;\n+      b[i] = 0.0;\n+    }\n+\n+  acc_update_device (a, nbytes);\n+  acc_update_device (b, nbytes);\n+  \n+#pragma acc parallel present (a[0:N], b[0:N], N)  async (1)\n+#pragma acc loop\n+  for (i = 0; i < N; i++)\n+    b[i] = a[i];\n+\n+  acc_memcpy_from_device (a, d_a, nbytes);\n+  acc_memcpy_from_device (b, d_b, nbytes);\n+  \n+  for (i = 0; i < N; i++)\n+    {\n+      assert (a[i] == 2.0);\n+      assert (b[i] == 2.0);\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      a[i] = 3.0;\n+      b[i] = 0.0;\n+      c[i] = 0.0;\n+      d[i] = 0.0;\n+    }\n+\n+  acc_update_device (a, nbytes);\n+  acc_update_device (b, nbytes);\n+  d_c = acc_copyin (c, nbytes);\n+  d_d = acc_copyin (d, nbytes);\n+\n+#pragma acc parallel present (a[0:N], b[0:N], N) async (1)\n+#pragma acc loop\n+  for (i = 0; i < N; i++)\n+    b[i] = (a[i] * a[i] * a[i]) / a[i];\n+\n+#pragma acc parallel present (a[0:N], c[0:N], N) async (2)\n+#pragma acc loop\n+  for (i = 0; i < N; i++)\n+    c[i] = (a[i] + a[i] + a[i] + a[i]) / a[i];\n+\n+#pragma acc parallel present (a[0:N], d[0:N], N) async (3)\n+#pragma acc loop\n+  for (i = 0; i < N; i++)\n+    d[i] = ((a[i] * a[i] + a[i]) / a[i]) - a[i];\n+\n+  acc_wait_all ();\n+  \n+  acc_memcpy_from_device (a, d_a, nbytes);\n+  acc_memcpy_from_device (b, d_b, nbytes);\n+  acc_memcpy_from_device (c, d_c, nbytes);\n+  acc_memcpy_from_device (d, d_d, nbytes);\n+  \n+  for (i = 0; i < N; i++)\n+    {\n+      if (a[i] != 3.0)\n+\tabort ();\n+\n+      if (b[i] != 9.0)\n+\tabort ();\n+\n+      if (c[i] != 4.0)\n+\tabort ();\n+\n+      if (d[i] != 1.0)\n+\tabort ();\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      a[i] = 2.0;\n+      b[i] = 0.0;\n+      c[i] = 0.0;\n+      d[i] = 0.0;\n+      e[i] = 0.0;\n+    }\n+\n+  acc_update_device (a, nbytes);\n+  acc_update_device (b, nbytes);\n+  acc_update_device (c, nbytes);\n+  acc_update_device (d, nbytes);\n+  acc_copyin (e, nbytes);\n+\n+#pragma acc parallel present (a[0:N], b[0:N], N) async (1)\n+  for (int ii = 0; ii < N; ii++)\n+    b[ii] = (a[ii] * a[ii] * a[ii]) / a[ii];\n+\n+#pragma acc parallel present (a[0:N], c[0:N], N) async (2)\n+  for (int ii = 0; ii < N; ii++)\n+    c[ii] = (a[ii] + a[ii] + a[ii] + a[ii]) / a[ii];\n+\n+#pragma acc parallel present (a[0:N], d[0:N], N) async (3)\n+  for (int ii = 0; ii < N; ii++)\n+    d[ii] = ((a[ii] * a[ii] + a[ii]) / a[ii]) - a[ii];\n+\n+#pragma acc parallel present (a[0:N], b[0:N], c[0:N], d[0:N], e[0:N], N) \\\n+  async (4)\n+  for (int ii = 0; ii < N; ii++)\n+    e[ii] = a[ii] + b[ii] + c[ii] + d[ii];\n+\n+  acc_wait_all ();\n+  acc_copyout (a, nbytes);\n+  acc_copyout (b, nbytes);\n+  acc_copyout (c, nbytes); \n+  acc_copyout (d, nbytes);\n+  acc_copyout (e, nbytes);\n+  acc_delete (&N, sizeof (int));\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      if (a[i] != 2.0)\n+\tabort ();\n+\n+      if (b[i] != 4.0)\n+\tabort ();\n+\n+      if (c[i] != 4.0)\n+\tabort ();\n+\n+      if (d[i] != 1.0)\n+\tabort ();\n+\n+      if (e[i] != 11.0)\n+\tabort ();\n+    }\n+\n+  return 0;\n+}"}, {"sha": "c1c0825919d52da3bbe2f901d355579355ac6b8b", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/data-2.c", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdata-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdata-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdata-2.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,3 +1,5 @@\n+/* Test 'acc enter/exit data' regions.  */\n+\n /* { dg-do run } */\n \n #include <stdlib.h>\n@@ -25,7 +27,7 @@ main (int argc, char **argv)\n     }\n \n #pragma acc enter data copyin (a[0:N]) copyin (b[0:N]) copyin (N) async\n-#pragma acc parallel async wait\n+#pragma acc parallel present (a[0:N], b[0:N]) async wait\n #pragma acc loop\n   for (i = 0; i < N; i++)\n     b[i] = a[i];\n@@ -49,7 +51,7 @@ main (int argc, char **argv)\n     }\n \n #pragma acc enter data copyin (a[0:N]) copyin (b[0:N]) copyin (N) async (1)\n-#pragma acc parallel async (1)\n+#pragma acc parallel present (a[0:N], b[0:N])  async (1)\n #pragma acc loop\n   for (i = 0; i < N; i++)\n     b[i] = a[i];\n@@ -76,17 +78,17 @@ main (int argc, char **argv)\n \n #pragma acc enter data copyin (a[0:N]) copyin (b[0:N]) copyin (c[0:N]) copyin (d[0:N]) copyin (N) async (1)\n \n-#pragma acc parallel async (1) wait (1)\n+#pragma acc parallel present (a[0:N], b[0:N]) async (1) wait (1)\n #pragma acc loop\n   for (i = 0; i < N; i++)\n     b[i] = (a[i] * a[i] * a[i]) / a[i];\n \n-#pragma acc parallel async (2) wait (1)\n+#pragma acc parallel present (a[0:N], c[0:N]) async (2) wait (1)\n #pragma acc loop\n   for (i = 0; i < N; i++)\n     c[i] = (a[i] + a[i] + a[i] + a[i]) / a[i];\n \n-#pragma acc parallel async (3) wait (1)\n+#pragma acc parallel present (a[0:N], d[0:N]) async (3) wait (1)\n #pragma acc loop\n   for (i = 0; i < N; i++)\n     d[i] = ((a[i] * a[i] + a[i]) / a[i]) - a[i];\n@@ -120,26 +122,27 @@ main (int argc, char **argv)\n \n #pragma acc enter data copyin (a[0:N]) copyin (b[0:N]) copyin (c[0:N]) copyin (d[0:N]) copyin (e[0:N]) copyin (N) async (1)\n \n-#pragma acc parallel async (1) wait (1)\n+#pragma acc parallel present (a[0:N], b[0:N]) async (1) wait (1)\n   for (int ii = 0; ii < N; ii++)\n     b[ii] = (a[ii] * a[ii] * a[ii]) / a[ii];\n \n-#pragma acc parallel async (2) wait (1)\n+#pragma acc parallel present (a[0:N], c[0:N]) async (2) wait (1)\n   for (int ii = 0; ii < N; ii++)\n     c[ii] = (a[ii] + a[ii] + a[ii] + a[ii]) / a[ii];\n \n-#pragma acc parallel async (3) wait (1)\n+#pragma acc parallel present (a[0:N], d[0:N]) async (3) wait (1)\n   for (int ii = 0; ii < N; ii++)\n     d[ii] = ((a[ii] * a[ii] + a[ii]) / a[ii]) - a[ii];\n \n-#pragma acc parallel wait (1) async (4)\n+#pragma acc parallel present (a[0:N], b[0:N], c[0:N], d[0:N], e[0:N]) \\\n+  wait (1) async (4)\n   for (int ii = 0; ii < N; ii++)\n     e[ii] = a[ii] + b[ii] + c[ii] + d[ii];\n \n-#pragma acc exit data copyout (a[0:N]) copyout (b[0:N]) copyout (c[0:N]) copyout (d[0:N]) copyout (e[0:N]) wait (1, 2, 3, 4) async (1)\n+#pragma acc exit data copyout (a[0:N]) copyout (b[0:N]) copyout (c[0:N]) \\\n+  copyout (d[0:N]) copyout (e[0:N]) wait (1, 2, 3, 4) async (1)\n #pragma acc wait (1)\n \n-\n   for (i = 0; i < N; i++)\n     {\n       if (a[i] != 2.0)"}, {"sha": "0bf706a1b5d42cf9983e61a28f926bc369554c6e", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/data-3.c", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdata-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdata-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdata-3.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,3 +1,5 @@\n+/* Test 'acc enter/exit data' regions with 'acc update'.  */\n+\n /* { dg-do run } */\n \n #include <stdlib.h>\n@@ -25,7 +27,7 @@ main (int argc, char **argv)\n     }\n \n #pragma acc enter data copyin (a[0:N]) copyin (b[0:N]) copyin (N) async\n-#pragma acc parallel async wait\n+#pragma acc parallel present (a[0:N], b[0:N]) async wait\n #pragma acc loop\n   for (i = 0; i < N; i++)\n     b[i] = a[i];\n@@ -49,7 +51,7 @@ main (int argc, char **argv)\n     }\n \n #pragma acc update device (a[0:N], b[0:N]) async (1)\n-#pragma acc parallel async (1)\n+#pragma acc parallel present (a[0:N], b[0:N]) async (1)\n #pragma acc loop\n   for (i = 0; i < N; i++)\n     b[i] = a[i];\n@@ -78,17 +80,17 @@ main (int argc, char **argv)\n #pragma acc update device (b[0:N]) async (2)\n #pragma acc enter data copyin (c[0:N], d[0:N]) async (3)\n \n-#pragma acc parallel async (1) wait (1,2)\n+#pragma acc parallel present (a[0:N], b[0:N]) async (1) wait (1,2)\n #pragma acc loop\n   for (i = 0; i < N; i++)\n     b[i] = (a[i] * a[i] * a[i]) / a[i];\n \n-#pragma acc parallel async (2) wait (1,3)\n+#pragma acc parallel present (a[0:N], c[0:N]) async (2) wait (1,3)\n #pragma acc loop\n   for (i = 0; i < N; i++)\n     c[i] = (a[i] + a[i] + a[i] + a[i]) / a[i];\n \n-#pragma acc parallel async (3) wait (1,3)\n+#pragma acc parallel present (a[0:N], d[0:N]) async (3) wait (1,3)\n #pragma acc loop\n   for (i = 0; i < N; i++)\n     d[i] = ((a[i] * a[i] + a[i]) / a[i]) - a[i];\n@@ -123,27 +125,28 @@ main (int argc, char **argv)\n #pragma acc update device (a[0:N], b[0:N], c[0:N], d[0:N]) async (1)\n #pragma acc enter data copyin (e[0:N]) async (5)\n \n-#pragma acc parallel async (1) wait (1)\n+#pragma acc parallel present (a[0:N], b[0:N]) async (1) wait (1)\n   for (int ii = 0; ii < N; ii++)\n     b[ii] = (a[ii] * a[ii] * a[ii]) / a[ii];\n \n-#pragma acc parallel async (2) wait (1)\n+#pragma acc parallel present (a[0:N], c[0:N]) async (2) wait (1)\n   for (int ii = 0; ii < N; ii++)\n     c[ii] = (a[ii] + a[ii] + a[ii] + a[ii]) / a[ii];\n \n-#pragma acc parallel async (3) wait (1)\n+#pragma acc parallel present (a[0:N], d[0:N]) async (3) wait (1)\n   for (int ii = 0; ii < N; ii++)\n     d[ii] = ((a[ii] * a[ii] + a[ii]) / a[ii]) - a[ii];\n \n-#pragma acc parallel wait (1,5) async (4)\n+#pragma acc parallel present (a[0:N], b[0:N], c[0:N], d[0:N], e[0:N]) \\\n+  wait (1,5) async (4)\n   for (int ii = 0; ii < N; ii++)\n     e[ii] = a[ii] + b[ii] + c[ii] + d[ii];\n \n-#pragma acc exit data copyout (a[0:N]) copyout (b[0:N]) copyout (c[0:N]) copyout (d[0:N]) copyout (e[0:N]) wait (1, 2, 3, 4) async (1)\n+#pragma acc exit data copyout (a[0:N]) copyout (b[0:N]) copyout (c[0:N]) \\\n+  copyout (d[0:N]) copyout (e[0:N]) wait (1, 2, 3, 4) async (1)\n #pragma acc exit data delete (N)\n #pragma acc wait (1)\n \n-\n   for (i = 0; i < N; i++)\n     {\n       if (a[i] != 2.0)\n@@ -162,5 +165,11 @@ main (int argc, char **argv)\n \tabort ();\n     }\n \n+  free (a);\n+  free (b);\n+  free (c);\n+  free (d);\n+  free (e);\n+\n   return 0;\n }"}, {"sha": "b5b37b2893fbd2262733d2ca252c8108b8b38f09", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/enter_exit-lib.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fenter_exit-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fenter_exit-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fenter_exit-lib.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -0,0 +1,70 @@\n+/* Verify enter/exit data interoperablilty between pragmas and\n+   acc library calls.  */\n+\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+#include <assert.h>\n+#include <openacc.h>\n+\n+int\n+main ()\n+{\n+  int *p = (int *)malloc (sizeof (int));\n+\n+  /* Test 1: pragma input, library output.  */\n+  \n+#pragma acc enter data copyin (p[0:1])\n+\n+#pragma acc parallel present (p[0:1]) num_gangs (1)\n+  {\n+    p[0] = 1;\n+  }\n+\n+  acc_copyout (p, sizeof (int));\n+\n+  assert (p[0] == 1);\n+  \n+  /* Test 2: library input, pragma output.  */\n+\n+  acc_copyin (p, sizeof (int));\n+\n+#pragma acc parallel present (p[0:1]) num_gangs (1)\n+  {\n+    p[0] = 2;\n+  }\n+\n+#pragma acc exit data copyout (p[0:1])\n+  \n+  assert (p[0] == 2);\n+\n+  /* Test 3: library input, library output.  */\n+\n+  acc_copyin (p, sizeof (int));\n+\n+#pragma acc parallel present (p[0:1]) num_gangs (1)\n+  {\n+    p[0] = 3;\n+  }\n+\n+  acc_copyout (p, sizeof (int));\n+  \n+  assert (p[0] == 3);\n+\n+  /* Test 4: pragma input, pragma output.  */\n+\n+#pragma acc enter data copyin (p[0:1])\n+  \n+#pragma acc parallel present (p[0:1]) num_gangs (1)\n+  {\n+    p[0] = 3;\n+  }\n+\n+#pragma acc exit data copyout (p[0:1])\n+  \n+  assert (p[0] == 3);\n+  \n+  free (p);\n+\n+  return 0;\n+}"}, {"sha": "d6655335e21571234cceee5761bcd312f81678cc", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-13.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-13.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,4 +1,6 @@\n-/* { dg-do run } */\n+/* Check acc_is_present and acc_delete.  */\n+\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n \n #include <stdlib.h>\n #include <openacc.h>"}, {"sha": "ee21257c9a5d0da5542298360b82b68246202778", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-14.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-14.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,4 +1,6 @@\n-/* { dg-do run } */\n+/* Check acc_is_present.  */\n+\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n \n #include <stdlib.h>\n #include <openacc.h>"}, {"sha": "50c17011fe794b881a38ec15c89f830fa3e5365b", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-15.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-15.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,4 +1,6 @@\n-/* { dg-do run } */\n+/* Check acc_is_present and acc_copyout.  */\n+\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n \n #include <stdlib.h>\n #include <openacc.h>"}, {"sha": "c81a78de26d869e27b0714b8acd03edc0212fa21", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-16.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-16.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,4 +1,6 @@\n-/* { dg-do run } */\n+/* Test if duplicate data mappings with acc_copy_in.  */\n+\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n \n #include <stdio.h>\n #include <stdlib.h>"}, {"sha": "a3487e8f5bfc49ab513dde9942be4869b6a8152f", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-17.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-17.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,4 +1,7 @@\n-/* { dg-do run } */\n+/* Check acc_copyout failure with acc_device_nvidia.  */\n+\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n+\n \n #include <stdio.h>\n #include <stdlib.h>"}, {"sha": "b686cc9481551d3ee449ca6a7df2c661904f9e9f", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-18.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-18.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,4 +1,6 @@\n-/* { dg-do run } */\n+/* Verify that acc_delete unregisters data mappings on the device.  */\n+\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n \n #include <stdio.h>\n #include <stdlib.h>"}, {"sha": "25ceb3a26af47febe93a8cfe29259d6e3f1ce5a9", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-20.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-20.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,4 +1,6 @@\n-/* { dg-do run } */\n+/* Exercise acc_copyin and acc_copyout on nvidia targets.  */\n+\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n \n #include <stdio.h>\n #include <stdlib.h>"}, {"sha": "b170f81229ceb17dd62ed83d79aba450b35957e2", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-21.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-21.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,4 +1,6 @@\n-/* { dg-do run } */\n+/* Exercise acc_copyin and acc_copyout on nvidia targets.  */\n+\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n \n #include <stdio.h>\n #include <stdlib.h>"}, {"sha": "65ff440a528cfcc0c0656cfc0b0be0d3e50fabcc", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-22.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-22.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,4 +1,6 @@\n-/* { dg-do run } */\n+/* Exercise acc_copyin and acc_copyout on nvidia targets.  */\n+\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n \n #include <stdio.h>\n #include <stdlib.h>"}, {"sha": "fd4dc5971a197c38bd91f2af79e970fdea142142", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-23.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-23.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,4 +1,6 @@\n-/* { dg-do run } */\n+/* Exercise acc_copyin and acc_copyout on nvidia targets.  */\n+\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n \n #include <stdio.h>\n #include <stdlib.h>"}, {"sha": "09e2817f41dba372e5d0207fbbd9935fa8e3dea0", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-24.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-24.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,4 +1,6 @@\n-/* { dg-do run } */\n+/* Exercise acc_create, acc_is_present and acc_delete.  */\n+\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n \n #include <stdlib.h>\n #include <openacc.h>"}, {"sha": "5f00ccb3885a3010da64bf713c036e342b6a41fd", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-25.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-25.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,4 +1,6 @@\n-/* { dg-do run } */\n+/* Exercise acc_create and acc_delete on nvidia targets.  */\n+\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n \n #include <stdio.h>\n #include <stdlib.h>"}, {"sha": "7a96ab26ebd15970d6897c68de3ff7e5a5344af2", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-28.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-28.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,4 +1,6 @@\n-/* { dg-do run } */\n+/* Exercise acc_delete with a NULL address on nvidia targets.  */\n+\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n \n #include <stdio.h>\n #include <stdlib.h>"}, {"sha": "318a060f228d4df03994b01dbc0392cc39fc6251", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-29.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-29.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,4 +1,6 @@\n-/* { dg-do run } */\n+/* Exercise acc_delete with size zero on nvidia targets.  */\n+\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n \n #include <stdio.h>\n #include <stdlib.h>"}, {"sha": "9bc9ecc10689634df77ed63ec255abc83aaaaf26", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-30.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-30.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,4 +1,6 @@\n-/* { dg-do run } */\n+/* Exercise an invalid partial acc_delete on nvidia targets.  */\n+\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n \n #include <stdio.h>\n #include <stdlib.h>"}, {"sha": "a24916d13066c63a63ac249adb721d0b75de9372", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-34.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-34.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,4 +1,6 @@\n-/* { dg-do run } */\n+/* Exercise an invalid acc_present_or_create on nvidia targets.  */\n+\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n \n #include <stdio.h>\n #include <stdlib.h>"}, {"sha": "30b90d49c7b4ab1651d57ceea7ade63c964f7841", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-42.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-42.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-42.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-42.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,4 +1,6 @@\n-/* { dg-do run } */\n+/* Exercise acc_update_device on unmapped data on nvidia targets.  */\n+\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n \n #include <stdio.h>\n #include <stdlib.h>"}, {"sha": "5db29124e9ec5bc48667aa14e4d3b62ae558129f", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-43.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-43.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-43.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-43.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,4 +1,6 @@\n-/* { dg-do run } */\n+/* Exercise acc_update_device with a NULL data address on nvidia targets.  */\n+\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n \n #include <stdio.h>\n #include <stdlib.h>"}, {"sha": "8bbf016a19192fda5ac40c81739b16ba4866bed5", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-44.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-44.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-44.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-44.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,4 +1,6 @@\n-/* { dg-do run } */\n+/* Exercise acc_update_device with size zero data on nvidia targets.  */\n+\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n \n #include <stdio.h>\n #include <stdlib.h>"}, {"sha": "c2140429cb1edd115d792baa44397493c7a5b70f", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-47.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-47.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-47.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-47.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,4 +1,6 @@\n-/* { dg-do run } */\n+/* Exercise acc_update_self with a NULL data mapping on nvidia targets.  */\n+\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n \n #include <stdio.h>\n #include <string.h>"}, {"sha": "afa137ff098bf49eeb66ca24dc809a9f8cf0ab23", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-48.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-48.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-48.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-48.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,4 +1,6 @@\n-/* { dg-do run } */\n+/* Exercise acc_update_self with a size zero data mapping on nvidia targets.  */\n+\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n \n #include <stdio.h>\n #include <string.h>"}, {"sha": "25c70c226f4be60531df207e9829b299958f5972", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-52.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-52.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-52.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-52.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,4 +1,6 @@\n-/* { dg-do run } */\n+/* Exercise acc_map_data with a NULL data mapping on nvidia targets.  */\n+\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n \n #include <stdio.h>\n #include <stdlib.h>"}, {"sha": "a8ee7df629c7052b27302e0f1efb2384886098d8", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-53.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-53.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-53.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-53.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,4 +1,6 @@\n-/* { dg-do run } */\n+/* Exercise acc_map_data with a NULL data mapping on nvidia targets.  */\n+\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n \n #include <stdio.h>\n #include <stdlib.h>"}, {"sha": "fc221f471167fdb7ac8d82d42bdc8a1b04d4c5d8", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-54.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-54.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46c777050aad8088ffdc7edcfea7deefc38de21/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-54.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-54.c?ref=e46c777050aad8088ffdc7edcfea7deefc38de21", "patch": "@@ -1,4 +1,6 @@\n-/* { dg-do run } */\n+/* Exercise acc_map_data with data size of zero on nvidia targets.  */\n+\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n \n #include <stdio.h>\n #include <stdlib.h>"}]}