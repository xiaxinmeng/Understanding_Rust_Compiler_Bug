{"sha": "5526ddf6fd215e80083eea611180c6073f006da6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUyNmRkZjZmZDIxNWU4MDA4M2VlYTYxMTE4MGM2MDczZjAwNmRhNg==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2002-07-24T16:05:34Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2002-07-24T16:05:34Z"}, "message": "[multiple changes]\n\n2002-07-24  Mark Wielaard  <mark@klomp.org>\n\n\t* java/lang/reflect/natField.cc (setAddr): Check isAccessible().\n\t* java/io/ObjectInputStream.java (setBooleanField): Before setting\n\tfield call setAccessible(true).\n\t(setByteField): Likewise.\n\t(setCharField): Likewise.\n\t(setDoubleField): Likewise.\n\t(setFloatField): Likewise.\n\t(setIntField): Likewise.\n\t(setLongField): Likewise.\n\t(setShortField): Likewise.\n\t(setObjectField): Likewise.\n\n2002-07-24  Tom Tromey  <tromey@redhat.com>\n\n\t* java/io/ObjectInputStream.java (readObject) [TC_ARRAY]: Don't\n\tuse toString() to format array element.\n\nFrom-SVN: r55711", "tree": {"sha": "b686e1771a3e2f1e0f071f8cae330a21d68da4e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b686e1771a3e2f1e0f071f8cae330a21d68da4e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5526ddf6fd215e80083eea611180c6073f006da6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5526ddf6fd215e80083eea611180c6073f006da6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5526ddf6fd215e80083eea611180c6073f006da6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5526ddf6fd215e80083eea611180c6073f006da6/comments", "author": null, "committer": null, "parents": [{"sha": "5df533b352f83085011093326d32e1c9bc6a786d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5df533b352f83085011093326d32e1c9bc6a786d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5df533b352f83085011093326d32e1c9bc6a786d"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "ff3c72fa08c59f4e97d386336f6822ff36fc1693", "filename": "libjava/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5526ddf6fd215e80083eea611180c6073f006da6/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5526ddf6fd215e80083eea611180c6073f006da6/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=5526ddf6fd215e80083eea611180c6073f006da6", "patch": "@@ -1,3 +1,22 @@\n+2002-07-24  Mark Wielaard  <mark@klomp.org>\n+\n+\t* java/lang/reflect/natField.cc (setAddr): Check isAccessible().\n+\t* java/io/ObjectInputStream.java (setBooleanField): Before setting\n+\tfield call setAccessible(true).\n+\t(setByteField): Likewise.\n+\t(setCharField): Likewise.\n+\t(setDoubleField): Likewise.\n+\t(setFloatField): Likewise.\n+\t(setIntField): Likewise.\n+\t(setLongField): Likewise.\n+\t(setShortField): Likewise.\n+\t(setObjectField): Likewise.\n+\n+2002-07-24  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/io/ObjectInputStream.java (readObject) [TC_ARRAY]: Don't\n+\tuse toString() to format array element.\n+\n 2002-07-23  Mark Wielaard  <mark@klomp.org>\n \n \t* gnu/java/security/provider/MD5.java: Extends MessageDigest, not"}, {"sha": "e1e16f28498d49fe866d2d8ac0d8d0d1c1d8de31", "filename": "libjava/java/io/ObjectInputStream.java", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5526ddf6fd215e80083eea611180c6073f006da6/libjava%2Fjava%2Fio%2FObjectInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5526ddf6fd215e80083eea611180c6073f006da6/libjava%2Fjava%2Fio%2FObjectInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectInputStream.java?ref=5526ddf6fd215e80083eea611180c6073f006da6", "patch": "@@ -244,7 +244,7 @@ public final Object readObject () throws ClassNotFoundException, IOException\n \tint handle = assignNewHandle (array);\n \treadArrayElements (array, componentType);\n \tfor (int i=0, len=Array.getLength(array); i < len; i++)\n-\t  dumpElementln (\"  ELEMENT[\" + i + \"]=\" + Array.get(array, i).toString());\n+\t  dumpElementln (\"  ELEMENT[\" + i + \"]=\" + Array.get(array, i));\n \tret_val = processResolution (array, handle);\n \tbreak;\n       }\n@@ -1401,6 +1401,7 @@ private void setBooleanField (Object obj, String field_name,\n       {\n \tClass klass = obj.getClass ();\n \tField f = getField (klass, field_name);\n+\tf.setAccessible(true);\n \tf.setBoolean (obj, val);\n       }\n     catch (Exception _)\n@@ -1415,6 +1416,7 @@ private void setByteField (Object obj, String field_name,\n       {\n \tClass klass = obj.getClass ();\n \tField f = getField (klass, field_name);\n+\tf.setAccessible(true);\n \tf.setByte (obj, val);\n       }\n     catch (Exception _)\n@@ -1429,6 +1431,7 @@ private void setCharField (Object obj, String field_name,\n       {\n \tClass klass = obj.getClass ();\n \tField f = getField (klass, field_name);\n+\tf.setAccessible(true);\n \tf.setChar (obj, val);\n       }\n     catch (Exception _)\n@@ -1443,6 +1446,7 @@ private void setDoubleField (Object obj, String field_name,\n       {\n \tClass klass = obj.getClass ();\n \tField f = getField (klass, field_name);\n+\tf.setAccessible(true);\n \tf.setDouble (obj, val);\n       }\n     catch (Exception _)\n@@ -1457,6 +1461,7 @@ private void setFloatField (Object obj, String field_name,\n       {\n \tClass klass = obj.getClass ();\n \tField f = getField (klass, field_name);\n+\tf.setAccessible(true);\n \tf.setFloat (obj, val);\n       }\n     catch (Exception _)\n@@ -1471,6 +1476,7 @@ private void setIntField (Object obj, String field_name,\n       {\n \tClass klass = obj.getClass ();\n \tField f = getField (klass, field_name);\n+\tf.setAccessible(true);\n \tf.setInt (obj, val);\n       }\n     catch (Exception _)\n@@ -1486,6 +1492,7 @@ private void setLongField (Object obj, String field_name,\n       {\n \tClass klass = obj.getClass ();\n \tField f = getField (klass, field_name);\n+\tf.setAccessible(true);\n \tf.setLong (obj, val);\n       }\n     catch (Exception _)\n@@ -1501,6 +1508,7 @@ private void setShortField (Object obj, String field_name,\n       {\n \tClass klass = obj.getClass ();\n \tField f = getField (klass, field_name);\n+\tf.setAccessible(true);\n \tf.setShort (obj, val);\n       }\n     catch (Exception _)\n@@ -1516,6 +1524,7 @@ private void setObjectField (Object obj, String field_name, String type_code,\n       {\n \tClass klass = obj.getClass ();\n \tField f = getField (klass, field_name);\n+\tf.setAccessible(true);\n \t// FIXME: We should check the type_code here\n \tf.set (obj, val);\n       }"}, {"sha": "b10b5f5a65aca7242a5e277b20e0e1a00c891384", "filename": "libjava/java/lang/reflect/natField.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5526ddf6fd215e80083eea611180c6073f006da6/libjava%2Fjava%2Flang%2Freflect%2FnatField.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5526ddf6fd215e80083eea611180c6073f006da6/libjava%2Fjava%2Flang%2Freflect%2FnatField.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FnatField.cc?ref=5526ddf6fd215e80083eea611180c6073f006da6", "patch": "@@ -257,7 +257,8 @@ static void*\n setAddr (java::lang::reflect::Field* field, jclass caller, jobject obj)\n {\n   void *addr = getAddr(field, caller, obj);\n-  if  (field->getModifiers() & java::lang::reflect::Modifier::FINAL)\n+  if  (!field->isAccessible()\n+\t&& field->getModifiers() & java::lang::reflect::Modifier::FINAL)\n     throw new java::lang::IllegalAccessException();\n   return addr;\n }"}]}