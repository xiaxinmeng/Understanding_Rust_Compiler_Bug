{"sha": "20e267130303233419490f5e849367e7cf6a5974", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBlMjY3MTMwMzAzMjMzNDE5NDkwZjVlODQ5MzY3ZTdjZjZhNTk3NA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2002-01-07T20:43:18Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2002-01-07T20:43:18Z"}, "message": "rs6000.c (altivec_expand_ternop_builtin): Don't die on invalid arguments.\n\n2002-01-07  Aldy Hernandez  <aldyh@redhat.com>\n\n        * rs6000.c (altivec_expand_ternop_builtin): Don't die on invalid\n        arguments.\n        (altivec_expand_binop_builtin): Same.\n        (altivec_expand_unop_builtin): Same.\n        (print_operand): Fix typo.\n        (bdesc_1arg): Add vupk* variants.\n\n        * rs6000.h (rs6000_builtins): Add vupk* enums.\n\n        * rs6000.md: Add altivec_vupk* variants.\n\nFrom-SVN: r48611", "tree": {"sha": "21a802b08d849908f1883b4c4defbf54ff293b39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21a802b08d849908f1883b4c4defbf54ff293b39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20e267130303233419490f5e849367e7cf6a5974", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20e267130303233419490f5e849367e7cf6a5974", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20e267130303233419490f5e849367e7cf6a5974", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20e267130303233419490f5e849367e7cf6a5974/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4dd57c18061b32137907024ee21cf115f34228a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dd57c18061b32137907024ee21cf115f34228a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dd57c18061b32137907024ee21cf115f34228a4"}], "stats": {"total": 113, "additions": 104, "deletions": 9}, "files": [{"sha": "7aa74784da96d3523a5416fc9c1af0d6baf00c1e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e267130303233419490f5e849367e7cf6a5974/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e267130303233419490f5e849367e7cf6a5974/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=20e267130303233419490f5e849367e7cf6a5974", "patch": "@@ -1,3 +1,16 @@\n+2002-01-07  Aldy Hernandez  <aldyh@redhat.com>\n+\n+        * rs6000.c (altivec_expand_ternop_builtin): Don't die on invalid\n+        arguments.\n+        (altivec_expand_binop_builtin): Same.\n+        (altivec_expand_unop_builtin): Same.\n+        (print_operand): Fix typo.\n+        (bdesc_1arg): Add vupk* variants.\n+\n+        * rs6000.h (rs6000_builtins): Add vupk* enums.\n+\n+        * rs6000.md: Add altivec_vupk* variants.\n+\n 2002-01-07  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* doc/gcc.texi, doc/gccint.texi, doc/cppinternals.texi,"}, {"sha": "4be53b729b93683e1cea6f66ecc055b78f77a026", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e267130303233419490f5e849367e7cf6a5974/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e267130303233419490f5e849367e7cf6a5974/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=20e267130303233419490f5e849367e7cf6a5974", "patch": "@@ -3375,6 +3375,12 @@ static const struct builtin_description bdesc_1arg[] =\n   { MASK_ALTIVEC, CODE_FOR_altivec_vspltisb, \"__builtin_altivec_vspltisb\", ALTIVEC_BUILTIN_VSPLTISB },\n   { MASK_ALTIVEC, CODE_FOR_altivec_vspltish, \"__builtin_altivec_vspltish\", ALTIVEC_BUILTIN_VSPLTISH },\n   { MASK_ALTIVEC, CODE_FOR_altivec_vspltisw, \"__builtin_altivec_vspltisw\", ALTIVEC_BUILTIN_VSPLTISW },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vupkhsb, \"__builtin_altivec_vupkhsb\", ALTIVEC_BUILTIN_VUPKHSB },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vupkhpx, \"__builtin_altivec_vupkhpx\", ALTIVEC_BUILTIN_VUPKHPX },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vupkhsh, \"__builtin_altivec_vupkhsh\", ALTIVEC_BUILTIN_VUPKHSH },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vupklsb, \"__builtin_altivec_vupklsb\", ALTIVEC_BUILTIN_VUPKLSB },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vupklpx, \"__builtin_altivec_vupklpx\", ALTIVEC_BUILTIN_VUPKLPX },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vupklsh, \"__builtin_altivec_vupklsh\", ALTIVEC_BUILTIN_VUPKLSH },\n };\n \n static rtx\n@@ -3389,7 +3395,11 @@ altivec_expand_unop_builtin (icode, arglist, target)\n   enum machine_mode tmode = insn_data[icode].operand[0].mode;\n   enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n \n-  if (! target\n+  /* If we got invalid arguments bail out before generating bad rtl.  */\n+  if (arg0 == error_mark_node)\n+    return target;\n+\n+  if (target != 0\n       || GET_MODE (target) != tmode\n       || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n     target = gen_reg_rtx (tmode);\n@@ -3419,7 +3429,11 @@ altivec_expand_binop_builtin (icode, arglist, target)\n   enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n   enum machine_mode mode1 = insn_data[icode].operand[2].mode;\n \n-  if (! target\n+  /* If we got invalid arguments bail out before generating bad rtl.  */\n+  if (arg0 == error_mark_node || arg1 == error_mark_node)\n+    return target;\n+\n+  if (target != 0\n       || GET_MODE (target) != tmode\n       || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n     target = gen_reg_rtx (tmode);\n@@ -3454,7 +3468,13 @@ altivec_expand_ternop_builtin (icode, arglist, target)\n   enum machine_mode mode1 = insn_data[icode].operand[2].mode;\n   enum machine_mode mode2 = insn_data[icode].operand[3].mode;\n \n-  if (! target\n+  /* If we got invalid arguments bail out before generating bad rtl.  */\n+  if (arg0 == error_mark_node\n+      || arg1 == error_mark_node\n+      || arg2 == error_mark_node)\n+    return target;\n+\n+  if (target != 0\n       || GET_MODE (target) != tmode\n       || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n     target = gen_reg_rtx (tmode);\n@@ -3497,7 +3517,7 @@ altivec_expand_builtin (exp, target)\n       tmode = insn_data[icode].operand[0].mode;\n       mode0 = insn_data[icode].operand[1].mode;\n \n-      if (! target\n+      if (target != 0\n \t  || GET_MODE (target) != tmode\n \t  || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n \ttarget = gen_reg_rtx (tmode);\n@@ -3518,7 +3538,7 @@ altivec_expand_builtin (exp, target)\n       tmode = insn_data[icode].operand[0].mode;\n       mode0 = insn_data[icode].operand[1].mode;\n \n-      if (! target\n+      if (target != 0\n \t  || GET_MODE (target) != tmode\n \t  || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n \ttarget = gen_reg_rtx (tmode);\n@@ -3539,7 +3559,7 @@ altivec_expand_builtin (exp, target)\n       tmode = insn_data[icode].operand[0].mode;\n       mode0 = insn_data[icode].operand[1].mode;\n \n-      if (! target\n+      if (target != 0\n \t  || GET_MODE (target) != tmode\n \t  || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n \ttarget = gen_reg_rtx (tmode);\n@@ -3560,7 +3580,7 @@ altivec_expand_builtin (exp, target)\n       tmode = insn_data[icode].operand[0].mode;\n       mode0 = insn_data[icode].operand[1].mode;\n \n-      if (! target\n+      if (target != 0\n \t  || GET_MODE (target) != tmode\n \t  || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n \ttarget = gen_reg_rtx (tmode);\n@@ -3716,6 +3736,7 @@ altivec_init_builtins (void)\n   tree pshort_type_node = build_pointer_type (short_integer_type_node);\n   tree pchar_type_node = build_pointer_type (char_type_node);\n   tree pfloat_type_node = build_pointer_type (float_type_node);\n+\n   tree v4sf_ftype_v4sf_v4sf_v16qi\n     = build_function_type (V4SF_type_node,\n \t\t\t   tree_cons (NULL_TREE, V4SF_type_node,\n@@ -3781,6 +3802,11 @@ altivec_init_builtins (void)\n     = build_function_type (V4SF_type_node,\n \t\t\t   tree_cons (NULL_TREE, pfloat_type_node, endlink));\n \n+  /* V8HI foo (V16QI).  */\n+  tree v8hi_ftype_v16qi\n+    = build_function_type (V8HI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V16QI_type_node, endlink));\n+\n   /* void foo (int *, V4SI).  */\n   tree void_ftype_pint_v4si\n     = build_function_type (void_type_node,\n@@ -3978,6 +4004,10 @@ altivec_init_builtins (void)\n \t\t\t\t      tree_cons (NULL_TREE, V4SI_type_node,\n \t\t\t\t\t\t endlink)));\n \n+  tree v4si_ftype_v8hi\n+    = build_function_type (V4SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V8HI_type_node, endlink));\n+\n   tree int_ftype_v4si_v4si\n     = build_function_type (integer_type_node,\n \t\t\t   tree_cons (NULL_TREE, V4SI_type_node,\n@@ -4239,6 +4269,10 @@ altivec_init_builtins (void)\n         type = v16qi_ftype_char;\n       else if (mode0 == V4SFmode && mode1 == V4SFmode)\n \ttype = v4sf_ftype_v4sf;\n+      else if (mode0 == V8HImode && mode1 == V16QImode)\n+\ttype = v8hi_ftype_v16qi;\n+      else if (mode0 == V4SImode && mode1 == V8HImode)\n+\ttype = v4si_ftype_v8hi;\n       else\n \tabort ();\n \n@@ -5525,7 +5559,7 @@ print_operand (file, x, code)\n       /* If X is a constant integer whose low-order 5 bits are zero,\n \t write 'l'.  Otherwise, write 'r'.  This is a kludge to fix a bug\n \t in the AIX assembler where \"sri\" with a zero shift count\n-\t write a trash instruction.  */\n+\t writes a trash instruction.  */\n       if (GET_CODE (x) == CONST_INT && (INTVAL (x) & 31) == 0)\n \tputc ('l', file);\n       else"}, {"sha": "840613a793cb90a9a8b42a7dc7eac24039f9fd13", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e267130303233419490f5e849367e7cf6a5974/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e267130303233419490f5e849367e7cf6a5974/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=20e267130303233419490f5e849367e7cf6a5974", "patch": "@@ -2954,5 +2954,11 @@ enum rs6000_builtins\n   ALTIVEC_BUILTIN_VSLDOI_16QI,\n   ALTIVEC_BUILTIN_VSLDOI_8HI,\n   ALTIVEC_BUILTIN_VSLDOI_4SI,\n-  ALTIVEC_BUILTIN_VSLDOI_4SF\n+  ALTIVEC_BUILTIN_VSLDOI_4SF,\n+  ALTIVEC_BUILTIN_VUPKHSB,\n+  ALTIVEC_BUILTIN_VUPKHPX,\n+  ALTIVEC_BUILTIN_VUPKHSH,\n+  ALTIVEC_BUILTIN_VUPKLSB,\n+  ALTIVEC_BUILTIN_VUPKLPX,\n+  ALTIVEC_BUILTIN_VUPKLSH\n };"}, {"sha": "79c52c235d72b3dd28bb06cd0d86ccb7bfb39c8d", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e267130303233419490f5e849367e7cf6a5974/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e267130303233419490f5e849367e7cf6a5974/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=20e267130303233419490f5e849367e7cf6a5974", "patch": "@@ -15230,3 +15230,45 @@\n   \"TARGET_ALTIVEC\"\n   \"vsldoi %0, %1, %2, %3\"\n   [(set_attr \"type\" \"vecperm\")])\n+\n+(define_insn \"altivec_vupkhsb\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+  \t(unspec:V8HI [(match_operand:V16QI 1 \"register_operand\" \"v\")] 167))]\n+  \"TARGET_ALTIVEC\"\n+  \"vupkhsb %0, %1\"\n+  [(set_attr \"type\" \"vecperm\")])\n+\n+(define_insn \"altivec_vupkhpx\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+  \t(unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")] 168))]\n+  \"TARGET_ALTIVEC\"\n+  \"vupkhpx %0, %1\"\n+  [(set_attr \"type\" \"vecperm\")])\n+\n+(define_insn \"altivec_vupkhsh\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+  \t(unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")] 169))]\n+  \"TARGET_ALTIVEC\"\n+  \"vupkhsh %0, %1\"\n+  [(set_attr \"type\" \"vecperm\")])\n+\n+(define_insn \"altivec_vupklsb\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+  \t(unspec:V8HI [(match_operand:V16QI 1 \"register_operand\" \"v\")] 170))]\n+  \"TARGET_ALTIVEC\"\n+  \"vupklsb %0, %1\"\n+  [(set_attr \"type\" \"vecperm\")])\n+\n+(define_insn \"altivec_vupklpx\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+  \t(unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")] 171))]\n+  \"TARGET_ALTIVEC\"\n+  \"vupklpx %0, %1\"\n+  [(set_attr \"type\" \"vecperm\")])\n+\n+(define_insn \"altivec_vupklsh\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+  \t(unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")] 172))]\n+  \"TARGET_ALTIVEC\"\n+  \"vupklsh %0, %1\"\n+  [(set_attr \"type\" \"vecperm\")])"}]}