{"sha": "6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM2Y2ZiZmQ1MjYwZjc3NGIwNTE3YWEzZDZkMGNjOTdlYTVmODFlNg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-03-08T13:57:01Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-03-08T13:57:01Z"}, "message": "c-common.c, [...]: Fix comment formatting.\n\n\t* c-common.c, c-opts.c, combine.c, cse.c, dojump.c,\n\tgimplify.c, tree-dfa.c, tree-ssa-loop-ivopts.c,\n\ttree-ssa-phiopt.c, tree-ssa-pre.c, tree-ssa-sink.c,\n\ttree-vect-analyze.c, tree.def, tree.h: Fix comment formatting.\n\nFrom-SVN: r96104", "tree": {"sha": "da9ac66b4af709e8201b3825f6c026442ea0df6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da9ac66b4af709e8201b3825f6c026442ea0df6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6/comments", "author": null, "committer": null, "parents": [{"sha": "be93246638ed4c4096002388883aabebea74cc5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be93246638ed4c4096002388883aabebea74cc5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be93246638ed4c4096002388883aabebea74cc5a"}], "stats": {"total": 48, "additions": 28, "deletions": 20}, "files": [{"sha": "40d702cde82fb4709d194f6be608f398bdb08810", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6", "patch": "@@ -1,3 +1,10 @@\n+2005-03-08  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* c-common.c, c-opts.c, combine.c, cse.c, dojump.c,\n+\tgimplify.c, tree-dfa.c, tree-ssa-loop-ivopts.c,\n+\ttree-ssa-phiopt.c, tree-ssa-pre.c, tree-ssa-sink.c,\n+\ttree-vect-analyze.c, tree.def, tree.h: Fix comment formatting.\n+\n 2005-03-08  Alexey Neyman  <alex.neyman@auriga.ru>\n \n \tPR c/14411"}, {"sha": "e658cf12e7b4f605a2ce7cff32cd6bf6e4225267", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6", "patch": "@@ -3272,7 +3272,7 @@ c_common_nodes_and_builtins (void)\n \n /* Look up the function in built_in_decls that corresponds to DECL\n    and set ASMSPEC as its user assembler name.  DECL must be a\n-   function decl that declares a builtin. */\n+   function decl that declares a builtin.  */\n \n void\n set_builtin_user_assembler_name (tree decl, const char *asmspec)"}, {"sha": "128c83a3f3659d4b5cec7c6e6251f32691139dca", "filename": "gcc/c-opts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6", "patch": "@@ -1097,7 +1097,7 @@ c_common_parse_file (int set_yydebug)\n       c_parse_file ();\n       finish_file ();\n       pop_file_scope ();\n-      /* And end the main input file. */\n+      /* And end the main input file.  */\n       (*debug_hooks->end_source_file) (0);\n       if (++i >= num_in_fnames)\n \tbreak;\n@@ -1229,7 +1229,7 @@ sanitize_cpp_opts (void)\n \n   /* Disable -dD, -dN and -dI if normal output is suppressed.  Allow\n      -dM since at least glibc relies on -M -dM to work.  */\n-  /* Also, flag_no_output implies flag_no_line_commands, always. */\n+  /* Also, flag_no_output implies flag_no_line_commands, always.  */\n   if (flag_no_output)\n     {\n       if (flag_dump_macros != 'M')"}, {"sha": "0fc1f5f4283fb6e39748db0a2d6118d272b61e70", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6", "patch": "@@ -9434,7 +9434,8 @@ gen_lowpart_for_combine (enum machine_mode omode, rtx x)\n       if (WORDS_BIG_ENDIAN)\n \toffset = MAX (isize, UNITS_PER_WORD) - MAX (osize, UNITS_PER_WORD);\n \n-      /* Adjust the address so that the address-after-the-data is unchanged. */\n+      /* Adjust the address so that the address-after-the-data is\n+\t unchanged.  */\n       if (BYTES_BIG_ENDIAN)\n \toffset -= MIN (UNITS_PER_WORD, osize) - MIN (UNITS_PER_WORD, isize);\n "}, {"sha": "d7f3027e2bb48129eb776669609d7cef31fdbd8c", "filename": "gcc/cse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6", "patch": "@@ -2987,7 +2987,7 @@ find_best_addr (rtx insn, rtx *loc, enum machine_mode mode)\n \t\tint new_cost;\n \t\t\n \t\t/* Get the canonical version of the address so we can accept\n-\t\t   more. */\n+\t\t   more.  */\n \t\tnew = canon_for_address (new);\n \t\t\n \t\tnew_cost = address_cost (new, mode);"}, {"sha": "3c9d88a548b9b8a4f3688da23749dfd7d4c2922a", "filename": "gcc/dojump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6", "patch": "@@ -926,7 +926,7 @@ do_compare_and_jump (tree exp, enum rtx_code signed_code,\n      be reliably compared, then canonicalize them.\n      Only do this if *both* sides of the comparison are function pointers.\n      If one side isn't, we want a noncanonicalized comparison.  See PR\n-     middle-end/17564. */\n+     middle-end/17564.  */\n   if (HAVE_canonicalize_funcptr_for_compare\n       && TREE_CODE (TREE_TYPE (TREE_OPERAND (exp, 0))) == POINTER_TYPE\n       && TREE_CODE (TREE_TYPE (TREE_TYPE (TREE_OPERAND (exp, 0))))"}, {"sha": "93724a9e403a42da8aaa8a5b0e7df361d03aa385", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6", "patch": "@@ -4256,7 +4256,7 @@ gimplify_type_sizes (tree type, tree *list_p)\n      can't easily test for.  We could pass TYPE down to gimplify_one_sizepos\n      and test there, but it doesn't seem worth it.  */\n \n-  /* We first do the main variant, then copy into any other variants. */\n+  /* We first do the main variant, then copy into any other variants.  */\n   type = TYPE_MAIN_VARIANT (type);\n \n   switch (TREE_CODE (type))"}, {"sha": "630ee4cbf8d847a01df66726262d467700c8f483", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6", "patch": "@@ -907,7 +907,7 @@ add_referenced_var (tree var, struct walk_state *walk_state)\n           && !DECL_EXTERNAL (var)\n \t  /* It's not necessary to walk the initial value of non-constant\n \t     public variables because it cannot be propagated by the\n-\t     optimizers. */\n+\t     optimizers.  */\n \t  && (!TREE_PUBLIC (var) || !TREE_CONSTANT (var)))\n       \twalk_tree (&DECL_INITIAL (var), find_vars_r, walk_state, 0);\n     }"}, {"sha": "98d3a4c007d391e7f11fa3fddb648f623ef49dbb", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6", "patch": "@@ -4017,7 +4017,7 @@ iv_ca_delta_add (struct iv_use *use, struct cost_pair *old_cp,\n }\n \n /* Joins two lists of changes L1 and L2.  Destructive -- old lists\n-   are rewritten.   */\n+   are rewritten.  */\n \n static struct iv_ca_delta *\n iv_ca_delta_join (struct iv_ca_delta *l1, struct iv_ca_delta *l2)"}, {"sha": "840829590a0aac157463f273c9d7e589193598d6", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6", "patch": "@@ -492,7 +492,7 @@ value_replacement (basic_block cond_bb, basic_block middle_bb,\n     replacement.  Return true if the replacement is done.  Otherwise return\n     false.\n     bb is the basic block where the replacement is going to be done on.  arg0\n-    is argument 0 from the phi.  Likewise for arg1.   */\n+    is argument 0 from the phi.  Likewise for arg1.  */\n \n static bool\n abs_replacement (basic_block cond_bb, basic_block middle_bb,"}, {"sha": "d098d87b380478a850619ccbc455bfd00a364b62", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6", "patch": "@@ -714,7 +714,7 @@ set_equal (value_set_t a, value_set_t b)\n }\n \n /* Replace an instance of EXPR's VALUE with EXPR in SET if it exists,\n-   and add it otherwise. */\n+   and add it otherwise.  */\n \n static void\n bitmap_value_replace_in_set (bitmap_set_t set, tree expr)\n@@ -1384,7 +1384,7 @@ create_expression_by_pieces (basic_block block, tree expr, tree stmts)\n }\n \n /* Return the folded version of T if T, when folded, is a gimple\n-   min_invariant.  Otherwise, return T. */ \n+   min_invariant.  Otherwise, return T.  */ \n \n static tree\n fully_constant_expression (tree t)"}, {"sha": "5984a5a3fcf8b721f74af16f06c207b8e7f10195", "filename": "gcc/tree-ssa-sink.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6/gcc%2Ftree-ssa-sink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6/gcc%2Ftree-ssa-sink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sink.c?ref=6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6", "patch": "@@ -73,7 +73,7 @@ Boston, MA 02111-1307, USA.  */\n \n static struct\n {  \n-  /* The number of statements sunk down the flowgraph by code sinking. */\n+  /* The number of statements sunk down the flowgraph by code sinking.  */\n   int sunk;\n   \n } sink_stats;\n@@ -106,7 +106,7 @@ find_bb_for_arg (tree phi, tree def)\n    and all the other uses are in phis in the same basic block, but this\n    requires some expensive checking later (you have to make sure no def/vdef\n    in the statement occurs for multiple edges in the various phi nodes it's\n-   used in, so that you only have one place you can sink it to. */\n+   used in, so that you only have one place you can sink it to.  */\n \n static bool\n all_immediate_uses_same_place (dataflow_t imm)\n@@ -266,7 +266,7 @@ nearest_common_dominator_of_uses (dataflow_t imm)\n /* Given a statement (STMT) and the basic block it is currently in (FROMBB), \n    determine the location to sink the statement to, if any.\n    Return the basic block to sink it to, or NULL if we should not sink\n-   it. */\n+   it.  */\n \n static tree\n statement_sink_location (tree stmt, basic_block frombb)"}, {"sha": "5a66a31ceda5a849ab35a8f72cc28f48a9533fda", "filename": "gcc/tree-vect-analyze.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6/gcc%2Ftree-vect-analyze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6/gcc%2Ftree-vect-analyze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-analyze.c?ref=6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6", "patch": "@@ -1699,7 +1699,7 @@ vect_object_analysis (tree memref, tree stmt, bool is_read,\n     return NULL_TREE;\n \n   /* Part 2: Combine the results of object and address analysis to calculate \n-     INITIAL_OFFSET, STEP and misalignment info. */\n+     INITIAL_OFFSET, STEP and misalignment info.  */\n   *offset = size_binop (PLUS_EXPR, object_offset, address_offset);\n   if (object_misalign && address_misalign)\n     *misalign = size_binop (PLUS_EXPR, object_misalign, address_misalign);"}, {"sha": "bcb38849857e9f4d4af26336543b3ffb6ea1aaf6", "filename": "gcc/tree.def", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6", "patch": "@@ -148,7 +148,7 @@ DEFTREECODE (OFFSET_TYPE, \"offset_type\", tcc_type, 0)\n DEFTREECODE (ENUMERAL_TYPE, \"enumeral_type\", tcc_type, 0)\n \n /* Boolean type (true or false are the only values).  Looks like an\n-   INTEGRAL_TYPE. */\n+   INTEGRAL_TYPE.  */\n DEFTREECODE (BOOLEAN_TYPE, \"boolean_type\", tcc_type, 0)\n \n /* CHAR in Java; not used in C.  Looks like an INTEGRAL_TYPE.  */\n@@ -171,7 +171,7 @@ DEFTREECODE (REAL_TYPE, \"real_type\", tcc_type, 0)\n /* The ordering of the following codes is optimized for the checking\n    macros in tree.h.  Changing the order will degrade the speed of the\n    compiler.  POINTER_TYPE, REFERENCE_TYPE.  Note that this range\n-   overlaps the previous range of ordered types. */\n+   overlaps the previous range of ordered types.  */\n      \n /* All pointer-to-x types have code POINTER_TYPE.\n    The TREE_TYPE points to the node for the type pointed to.  */\n@@ -867,7 +867,7 @@ DEFTREECODE (SSA_NAME, \"ssa_name\", tcc_exceptional, 0)\n    PHI_ARG_ELT returns the Ith tuple <ssa_name, edge> from the\n    argument list.  Each tuple contains the incoming reaching\n    definition (SSA_NAME node) and the edge via which that definition\n-   is coming through.   */\n+   is coming through.  */\n DEFTREECODE (PHI_NODE, \"phi_node\", tcc_exceptional, 0)\n \n /* Used to represent a typed exception handler.  CATCH_TYPES is the type (or"}, {"sha": "3857ff909cc1fdbdc725224c4c4a27c269e8da51", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6c6cfbfd5260f774b0517aa3d6d0cc97ea5f81e6", "patch": "@@ -751,7 +751,7 @@ extern void tree_operand_check_failed (int, enum tree_code,\n \n /* Nonzero if TYPE represents an integral type.  Note that we do not\n    include COMPLEX types here.  Keep these checks in ascending code\n-   order. */\n+   order.  */\n \n #define INTEGRAL_TYPE_P(TYPE)  \\\n   (TREE_CODE (TYPE) == ENUMERAL_TYPE  \\"}]}