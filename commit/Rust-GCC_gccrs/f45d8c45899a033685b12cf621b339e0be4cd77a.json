{"sha": "f45d8c45899a033685b12cf621b339e0be4cd77a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ1ZDhjNDU4OTlhMDMzNjg1YjEyY2Y2MjFiMzM5ZTBiZTRjZDc3YQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-04-30T17:12:42Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-04-30T17:12:42Z"}, "message": "i386.md (and<mode>3): Change runtime operand mode checks to compile-time \"mode == <MODE>mode\" checks.\n\n\t* config/i386/i386.md (and<mode>3): Change runtime operand mode checks\n\tto compile-time \"mode == <MODE>mode\" checks.\n\t(and splitter): Ditto.\n\nFrom-SVN: r186993", "tree": {"sha": "b4a2b0e3b39a2d6b1964154e1da6439810870008", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4a2b0e3b39a2d6b1964154e1da6439810870008"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f45d8c45899a033685b12cf621b339e0be4cd77a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f45d8c45899a033685b12cf621b339e0be4cd77a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f45d8c45899a033685b12cf621b339e0be4cd77a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f45d8c45899a033685b12cf621b339e0be4cd77a/comments", "author": null, "committer": null, "parents": [{"sha": "3efc29598a3bc89fd2012f7b354c6385f9a2185b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3efc29598a3bc89fd2012f7b354c6385f9a2185b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3efc29598a3bc89fd2012f7b354c6385f9a2185b"}], "stats": {"total": 33, "additions": 18, "deletions": 15}, "files": [{"sha": "5e7dadfbfc4c2e6297d44b729cd7632ca5b4782d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f45d8c45899a033685b12cf621b339e0be4cd77a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f45d8c45899a033685b12cf621b339e0be4cd77a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f45d8c45899a033685b12cf621b339e0be4cd77a", "patch": "@@ -1,3 +1,9 @@\n+2012-04-30  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (and<mode>3): Change runtime operand mode checks\n+\tto compile-time \"mode == <MODE>mode\" checks.\n+\t(and splitter): Ditto.\n+\n 2012-04-30  Richard Henderson  <rth@redhat.com>\n \n \t* config/arm/arm.md (UNSPEC_LL): New.\n@@ -40,7 +46,7 @@\n \t* config/arm/arm-protos.h (ldm_stm_operation_p): New parameters.\n \t* config/arm/arm.c (ldm_stm_operation_p): New parameters.\n \t* config/arm/predicates.md (load_multiple_operation): Add arguments.\n-\t(store_multiple_operation): Likewise.\t\n+\t(store_multiple_operation): Likewise.\n \n 2012-04-30  Uros Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "9047a31a01bd68ad5cb6846f8f5fefd250971d54", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f45d8c45899a033685b12cf621b339e0be4cd77a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f45d8c45899a033685b12cf621b339e0be4cd77a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f45d8c45899a033685b12cf621b339e0be4cd77a", "patch": "@@ -7695,7 +7695,7 @@\n \t\t  (match_operand:SWIM 2 \"<general_szext_operand>\")))]\n   \"\"\n {\n-  enum machine_mode mode = GET_MODE (operands[1]);\n+  enum machine_mode mode = <MODE>mode;\n   rtx (*insn) (rtx, rtx);\n \n   if (CONST_INT_P (operands[2]) && REG_P (operands[0]))\n@@ -7710,30 +7710,28 @@\n \tmode = QImode;\n       }\n \n-  if (mode == GET_MODE (operands[1]))\n+  if (mode == <MODE>mode)\n     {\n       ix86_expand_binary_operator (AND, <MODE>mode, operands);\n       DONE;\n     }\n \n-  operands[1] = gen_lowpart (mode, operands[1]);\n-\n-  if (GET_MODE (operands[0]) == DImode)\n+  if (<MODE>mode == DImode)\n     insn = (mode == SImode)\n \t   ? gen_zero_extendsidi2\n \t   : (mode == HImode)\n \t   ? gen_zero_extendhidi2\n \t   : gen_zero_extendqidi2;\n-  else if (GET_MODE (operands[0]) == SImode)\n+  else if (<MODE>mode == SImode)\n     insn = (mode == HImode)\n \t   ? gen_zero_extendhisi2\n \t   : gen_zero_extendqisi2;\n-  else if (GET_MODE (operands[0]) == HImode)\n+  else if (<MODE>mode == HImode)\n     insn = gen_zero_extendqihi2;\n   else\n     gcc_unreachable ();\n \n-  emit_insn (insn (operands[0], operands[1]));\n+  emit_insn (insn (operands[0], gen_lowpart (mode, operands[1])));\n   DONE;\n })\n \n@@ -7884,24 +7882,23 @@\n       mode = QImode;\n     }\n \n-  operands[1] = gen_lowpart (mode, operands[1]);\n-\n-  if (GET_MODE (operands[0]) == DImode)\n+  if (<MODE>mode == DImode)\n     insn = (mode == SImode)\n \t   ? gen_zero_extendsidi2\n \t   : (mode == HImode)\n \t   ? gen_zero_extendhidi2\n \t   : gen_zero_extendqidi2;\n   else\n     {\n-      /* Zero extend to SImode to avoid partial register stalls.  */\n-      operands[0] = gen_lowpart (SImode, operands[0]);\n+      if (<MODE>mode != SImode)\n+\t/* Zero extend to SImode to avoid partial register stalls.  */\n+\toperands[0] = gen_lowpart (SImode, operands[0]);\n \n       insn = (mode == HImode)\n \t     ? gen_zero_extendhisi2\n \t     : gen_zero_extendqisi2;\n     }\n-  emit_insn (insn (operands[0], operands[1]));\n+  emit_insn (insn (operands[0], gen_lowpart (mode, operands[1])));\n   DONE;\n })\n "}]}