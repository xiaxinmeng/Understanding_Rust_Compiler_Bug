{"sha": "9bb3d6c4ef6c5cbaa7e457b59dbe2ade9055b3fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJiM2Q2YzRlZjZjNWNiYWE3ZTQ1N2I1OWRiZTJhZGU5MDU1YjNmYQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-11-29T18:22:30Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-11-29T18:22:30Z"}, "message": "i386.c (inline_memory_move_cost): Check \"in\" for 2 in MMX_CLASS_P case.\n\n\t* config/i386/i386.c (inline_memory_move_cost):\n\tCheck \"in\" for 2 in MMX_CLASS_P case.\n\t* config/i386/mmx.md (*mov<mode>_internal): Correct\n\tTARGET_INTER_UNIT_MOVES_FROM_VEC and TARGET_INTER_UNIT_MOVES_TO_VEC\n\talternatives in preferred_for_speed attribute calculation.\n\nFrom-SVN: r266635", "tree": {"sha": "8e06597e75ed9b272b280dc8db59e283153a872c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e06597e75ed9b272b280dc8db59e283153a872c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bb3d6c4ef6c5cbaa7e457b59dbe2ade9055b3fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bb3d6c4ef6c5cbaa7e457b59dbe2ade9055b3fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bb3d6c4ef6c5cbaa7e457b59dbe2ade9055b3fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bb3d6c4ef6c5cbaa7e457b59dbe2ade9055b3fa/comments", "author": null, "committer": null, "parents": [{"sha": "550dfbdcf6d93d88edd469089be54850e19128e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/550dfbdcf6d93d88edd469089be54850e19128e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/550dfbdcf6d93d88edd469089be54850e19128e1"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "8cf443f6b9f7fa3e00e33eef35f11930b1f63eff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bb3d6c4ef6c5cbaa7e457b59dbe2ade9055b3fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bb3d6c4ef6c5cbaa7e457b59dbe2ade9055b3fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9bb3d6c4ef6c5cbaa7e457b59dbe2ade9055b3fa", "patch": "@@ -1,3 +1,11 @@\n+2018-11-29  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (inline_memory_move_cost):\n+\tCheck \"in\" for 2 in MMX_CLASS_P case.\n+\t* config/i386/mmx.md (*mov<mode>_internal): Correct\n+\tTARGET_INTER_UNIT_MOVES_FROM_VEC and TARGET_INTER_UNIT_MOVES_TO_VEC\n+\talternatives in preferred_for_speed attribute calculation.\n+\n 2018-11-29  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/88172\n@@ -20,7 +28,7 @@\n \tinlining when flag_live_patching is LIVE_PATCHING_INLINE_ONLY_STATIC.\n \t* opts.c (control_options_for_live_patching): New function.\n \t(finish_options): Make flag_live_patching incompatible with flag_lto.\n-\tControl IPA optimizations based on different levels of \n+\tControl IPA optimizations based on different levels of\n \tflag_live_patching.\n \n 2018-11-29  Giuliano Belinassi  <giuliano.belinassi@usp.br>"}, {"sha": "209b74aa4dca65d15ffe7943cfa3d387da07dced", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bb3d6c4ef6c5cbaa7e457b59dbe2ade9055b3fa/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bb3d6c4ef6c5cbaa7e457b59dbe2ade9055b3fa/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9bb3d6c4ef6c5cbaa7e457b59dbe2ade9055b3fa", "patch": "@@ -39480,8 +39480,7 @@ sse_store_index (machine_mode mode)\n    Q_REGS classes.\n  */\n static inline int\n-inline_memory_move_cost (machine_mode mode, enum reg_class regclass,\n-\t\t\t int in)\n+inline_memory_move_cost (machine_mode mode, enum reg_class regclass, int in)\n {\n   int cost;\n   if (FLOAT_CLASS_P (regclass))\n@@ -39528,7 +39527,7 @@ inline_memory_move_cost (machine_mode mode, enum reg_class regclass,\n \t  default:\n \t    return 100;\n \t}\n-      if (in)\n+      if (in == 2)\n         return MAX (ix86_cost->mmx_load [index], ix86_cost->mmx_store [index]);\n       return in ? ix86_cost->mmx_load [index] : ix86_cost->mmx_store [index];\n     }\n@@ -39567,7 +39566,7 @@ inline_memory_move_cost (machine_mode mode, enum reg_class regclass,\n \tif (mode == TFmode)\n \t  mode = XFmode;\n \tif (in == 2)\n-\t  cost = MAX (ix86_cost->int_load[2] , ix86_cost->int_store[2]);\n+\t  cost = MAX (ix86_cost->int_load[2], ix86_cost->int_store[2]);\n \telse if (in)\n \t  cost = ix86_cost->int_load[2];\n \telse\n@@ -39577,8 +39576,7 @@ inline_memory_move_cost (machine_mode mode, enum reg_class regclass,\n }\n \n static int\n-ix86_memory_move_cost (machine_mode mode, reg_class_t regclass,\n-\t\t       bool in)\n+ix86_memory_move_cost (machine_mode mode, reg_class_t regclass, bool in)\n {\n   return inline_memory_move_cost (mode, (enum reg_class) regclass, in ? 1 : 0);\n }"}, {"sha": "66da7bcd7e5da09325a90429081e7bb19b6179bd", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bb3d6c4ef6c5cbaa7e457b59dbe2ade9055b3fa/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bb3d6c4ef6c5cbaa7e457b59dbe2ade9055b3fa/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=9bb3d6c4ef6c5cbaa7e457b59dbe2ade9055b3fa", "patch": "@@ -208,9 +208,9 @@\n \t   ]\n \t   (const_string \"DI\")))\n    (set (attr \"preferred_for_speed\")\n-     (cond [(eq_attr \"alternative\" \"10,15\")\n+     (cond [(eq_attr \"alternative\" \"9,15\")\n \t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_FROM_VEC\")\n-\t    (eq_attr \"alternative\" \"11,16\")\n+\t    (eq_attr \"alternative\" \"10,16\")\n \t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_TO_VEC\")\n \t   ]\n \t   (symbol_ref \"true\")))])"}]}