{"sha": "c637141af07b7719c1b4c870373944929bcc34b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYzNzE0MWFmMDdiNzcxOWMxYjRjODcwMzczOTQ0OTI5YmNjMzRiNg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2012-08-22T19:46:28Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2012-08-22T19:46:28Z"}, "message": "Add -mlong-double-64/-mlong-double-80 to i386\n\ngcc/\n\n\t* doc/invoke.texi: Document -mlong-double-64/-mlong-double-80.\n\n\t* config/i386/i386.c (flag_opts): Add -mlong-double-64.\n\t(TARGET_HAS_BIONIC): Default long double to 64-bit for Bionic.\n\n\t* config/i386/i386.h (LONG_DOUBLE_TYPE_SIZE): Use 64 if\n\tTARGET_LONG_DOUBLE_64 is true.\n\t(LIBGCC2_LONG_DOUBLE_TYPE_SIZE): New macro.\n\t(WIDEST_HARDWARE_FP_SIZE): Defined to 80.\n\n\t* config/i386/i386.opt (mlong-double-80): New option.\n\t(mlong-double-64): Likewise.\n\n\t* config/i386/i386-c.c (ix86_target_macros): Define\n\t__LONG_DOUBLE_64__ for TARGET_LONG_DOUBLE_64.\n\ngcc/testsuite/\n\n\t* gcc.target/i386/long-double-64-1.c: New file.\n\t* gcc.target/i386/long-double-64-2.c: Likewise.\n\t* gcc.target/i386/long-double-64-3.c: Likewise.\n\t* gcc.target/i386/long-double-64-4.c: Likewise.\n\t* gcc.target/i386/long-double-80-1.c: Likewise.\n\t* gcc.target/i386/long-double-80-2.c: Likewise.\n\t* gcc.target/i386/long-double-80-3.c: Likewise.\n\t* gcc.target/i386/long-double-80-4.c: Likewise.\n\t* gcc.target/i386/long-double-80-5.c: Likewise.\n\t* gcc.target/i386/long-double-80-6.c: Likewise.\n\t* gcc.target/i386/long-double-80-7.c: Likewise.\n\nlibgcc/\n\n\t* config/i386/t-linux (HOST_LIBGCC2_CFLAGS): New.\n\nFrom-SVN: r190599", "tree": {"sha": "236b8d81975f925b0d2373ea51609df62083694d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/236b8d81975f925b0d2373ea51609df62083694d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c637141af07b7719c1b4c870373944929bcc34b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c637141af07b7719c1b4c870373944929bcc34b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c637141af07b7719c1b4c870373944929bcc34b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c637141af07b7719c1b4c870373944929bcc34b6/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a8a68bb00acf28a07497e7d233f13f4e5097d21a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8a68bb00acf28a07497e7d233f13f4e5097d21a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8a68bb00acf28a07497e7d233f13f4e5097d21a"}], "stats": {"total": 199, "additions": 196, "deletions": 3}, "files": [{"sha": "f67c4ac97e05cd2626adb9326b58ce61519179f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c637141af07b7719c1b4c870373944929bcc34b6", "patch": "@@ -1,3 +1,21 @@\n+2012-08-22  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* doc/invoke.texi: Document -mlong-double-64/-mlong-double-80.\n+\n+\t* config/i386/i386.c (flag_opts): Add -mlong-double-64.\n+\t(TARGET_HAS_BIONIC): Default long double to 64-bit for Bionic.\n+\n+\t* config/i386/i386.h (LONG_DOUBLE_TYPE_SIZE): Use 64 if\n+\tTARGET_LONG_DOUBLE_64 is true.\n+\t(LIBGCC2_LONG_DOUBLE_TYPE_SIZE): New macro.\n+\t(WIDEST_HARDWARE_FP_SIZE): Defined to 80.\n+\n+\t* config/i386/i386.opt (mlong-double-80): New option.\n+\t(mlong-double-64): Likewise.\n+\n+\t* config/i386/i386-c.c (ix86_target_macros): Define\n+\t__LONG_DOUBLE_64__ for TARGET_LONG_DOUBLE_64.\n+\n 2012-08-22  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/54347"}, {"sha": "edd64ff7ae388b78eaa0a30eade8e4b81c7a2a2b", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=c637141af07b7719c1b4c870373944929bcc34b6", "patch": "@@ -409,6 +409,9 @@ ix86_target_macros (void)\n       builtin_define_std (\"i386\");\n     }\n \n+  if (TARGET_LONG_DOUBLE_64)\n+    cpp_define (parse_in, \"__LONG_DOUBLE_64__\");\n+\n   cpp_define_formatted (parse_in, \"__ATOMIC_HLE_ACQUIRE=%d\", IX86_HLE_ACQUIRE);\n   cpp_define_formatted (parse_in, \"__ATOMIC_HLE_RELEASE=%d\", IX86_HLE_RELEASE);\n "}, {"sha": "da931ee153745189a60bdd49375376285c2a8852", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c637141af07b7719c1b4c870373944929bcc34b6", "patch": "@@ -2786,6 +2786,7 @@ ix86_target_string (HOST_WIDE_INT isa, int flags, const char *arch,\n   static struct ix86_target_opts flag_opts[] =\n   {\n     { \"-m128bit-long-double\",\t\tMASK_128BIT_LONG_DOUBLE },\n+    { \"-mlong-double-64\",\t\tMASK_LONG_DOUBLE_64 },\n     { \"-m80387\",\t\t\tMASK_80387 },\n     { \"-maccumulate-outgoing-args\",\tMASK_ACCUMULATE_OUTGOING_ARGS },\n     { \"-malign-double\",\t\t\tMASK_ALIGN_DOUBLE },\n@@ -4084,6 +4085,11 @@ ix86_option_override_internal (bool main_args_p)\n   else if (target_flags_explicit & MASK_RECIP)\n     recip_mask &= ~(RECIP_MASK_ALL & ~recip_mask_explicit);\n \n+  /* Default long double to 64-bit for Bionic.  */\n+  if (TARGET_HAS_BIONIC\n+      && !(target_flags_explicit & MASK_LONG_DOUBLE_64))\n+    target_flags |= MASK_LONG_DOUBLE_64;\n+\n   /* Save the initial options in case the user does function specific\n      options.  */\n   if (main_args_p)"}, {"sha": "3a41a43e308bffe23a807edfdbcccc9c2bffda35", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=c637141af07b7719c1b4c870373944929bcc34b6", "patch": "@@ -671,9 +671,17 @@ enum target_cpu_default\n #define LONG_LONG_TYPE_SIZE 64\n #define FLOAT_TYPE_SIZE 32\n #define DOUBLE_TYPE_SIZE 64\n-#define LONG_DOUBLE_TYPE_SIZE 80\n+#define LONG_DOUBLE_TYPE_SIZE (TARGET_LONG_DOUBLE_64 ? 64 : 80)\n \n-#define WIDEST_HARDWARE_FP_SIZE LONG_DOUBLE_TYPE_SIZE\n+/* Define this to set long double type size to use in libgcc2.c, which can\n+   not depend on target_flags.  */\n+#ifdef __LONG_DOUBLE_64__\n+#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n+#else\n+#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 80\n+#endif\n+\n+#define WIDEST_HARDWARE_FP_SIZE 80\n \n #if defined (TARGET_BI_ARCH) || TARGET_64BIT_DEFAULT\n #define MAX_BITS_PER_WORD 64"}, {"sha": "6a389947d904e6b97b5f0c41eca0ad2fce425bcf", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=c637141af07b7719c1b4c870373944929bcc34b6", "patch": "@@ -86,6 +86,14 @@ m96bit-long-double\n Target RejectNegative Report InverseMask(128BIT_LONG_DOUBLE) Save\n sizeof(long double) is 12\n \n+mlong-double-80\n+Target Report RejectNegative InverseMask(LONG_DOUBLE_64) Save\n+Use 80-bit long double\n+\n+mlong-double-64\n+Target Report RejectNegative Mask(LONG_DOUBLE_64) Save\n+Use 64-bit long double\n+\n maccumulate-outgoing-args\n Target Report Mask(ACCUMULATE_OUTGOING_ARGS) Save\n Reserve space for outgoing arguments in the function prologue"}, {"sha": "5404a3c7706551c4fa9e49a96a7c0dcbf564597b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c637141af07b7719c1b4c870373944929bcc34b6", "patch": "@@ -636,7 +636,8 @@ Objective-C and Objective-C++ Dialects}.\n -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically -mstringop-strategy=@var{alg} @gol\n -mpush-args  -maccumulate-outgoing-args  -m128bit-long-double @gol\n--m96bit-long-double  -mregparm=@var{num}  -msseregparm @gol\n+-m96bit-long-double -mlong-double-64 -mlong-double-80 @gol\n+-mregparm=@var{num}  -msseregparm @gol\n -mveclibabi=@var{type} -mvect8-ret-in-mem @gol\n -mpc32 -mpc64 -mpc80 -mstackrealign @gol\n -momit-leaf-frame-pointer  -mno-red-zone -mno-tls-direct-seg-refs @gol\n@@ -13517,6 +13518,21 @@ as well as modifying the function calling convention for functions taking\n @code{long double}.  Hence they are not binary-compatible\n with code compiled without that switch.\n \n+@item -mlong-double-64\n+@itemx -mlong-double-80\n+@opindex mlong-double-64\n+@opindex mlong-double-80\n+These switches control the size of @code{long double} type. A size\n+of 64 bits makes the @code{long double} type equivalent to the @code{double}\n+type. This is the default for Bionic C library.\n+\n+@strong{Warning:} if you override the default value for your target ABI, this\n+changes the size of\n+structures and arrays containing @code{long double} variables,\n+as well as modifying the function calling convention for functions taking\n+@code{long double}.  Hence they are not binary-compatible\n+with code compiled without that switch.\n+\n @item -mlarge-data-threshold=@var{threshold}\n @opindex mlarge-data-threshold\n When @option{-mcmodel=medium} is specified, data objects larger than"}, {"sha": "ed45fc03c56e653fd37943d8a368c9fe529f0701", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c637141af07b7719c1b4c870373944929bcc34b6", "patch": "@@ -1,3 +1,17 @@\n+2012-08-22  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* gcc.target/i386/long-double-64-1.c: New file.\n+\t* gcc.target/i386/long-double-64-2.c: Likewise.\n+\t* gcc.target/i386/long-double-64-3.c: Likewise.\n+\t* gcc.target/i386/long-double-64-4.c: Likewise.\n+\t* gcc.target/i386/long-double-80-1.c: Likewise.\n+\t* gcc.target/i386/long-double-80-2.c: Likewise.\n+\t* gcc.target/i386/long-double-80-3.c: Likewise.\n+\t* gcc.target/i386/long-double-80-4.c: Likewise.\n+\t* gcc.target/i386/long-double-80-5.c: Likewise.\n+\t* gcc.target/i386/long-double-80-6.c: Likewise.\n+\t* gcc.target/i386/long-double-80-7.c: Likewise.\n+\n 2012-08-22  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR tree-optimization/54317"}, {"sha": "cf933796f8aea30e2991ab157ee1ea698f9d2c98", "filename": "gcc/testsuite/gcc.target/i386/long-double-64-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-1.c?ref=c637141af07b7719c1b4c870373944929bcc34b6", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mlong-double-64\" } */\n+\n+long double\n+foo (long double x)\n+{\n+  return x * x;\n+}\n+\n+/* { dg-final { scan-assembler-not \"fldt\" } } */"}, {"sha": "ddf4fe656d099863763007fe2027105babebef00", "filename": "gcc/testsuite/gcc.target/i386/long-double-64-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-2.c?ref=c637141af07b7719c1b4c870373944929bcc34b6", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -mbionic\" } */\n+\n+long double\n+foo (long double x)\n+{\n+  return x * x;\n+}\n+\n+/* { dg-final { scan-assembler-not \"fldt\" } } */"}, {"sha": "e748fab2edd3c2cd052192e806fcdf4078daa46f", "filename": "gcc/testsuite/gcc.target/i386/long-double-64-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-3.c?ref=c637141af07b7719c1b4c870373944929bcc34b6", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -mandroid\" } */\n+\n+long double\n+foo (long double x)\n+{\n+  return x * x;\n+}\n+\n+/* { dg-final { scan-assembler-not \"fldt\" } } */"}, {"sha": "d9c25aaec080cf54c02aa2ed5899eaee5a6ce3f6", "filename": "gcc/testsuite/gcc.target/i386/long-double-64-4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-4.c?ref=c637141af07b7719c1b4c870373944929bcc34b6", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mlong-double-80 -mlong-double-64\" } */\n+\n+long double\n+foo (long double x)\n+{\n+  return x * x;\n+}\n+\n+/* { dg-final { scan-assembler-not \"fldt\" } } */"}, {"sha": "d3b75a0be21deb32137982899638677deebe3f1f", "filename": "gcc/testsuite/gcc.target/i386/long-double-80-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-1.c?ref=c637141af07b7719c1b4c870373944929bcc34b6", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mlong-double-80\" } */\n+\n+long double\n+foo (long double x)\n+{\n+  return x * x;\n+}\n+\n+/* { dg-final { scan-assembler \"fldt\" } } */"}, {"sha": "954dfd15d4271a414c25b245ae2994568eab1044", "filename": "gcc/testsuite/gcc.target/i386/long-double-80-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-2.c?ref=c637141af07b7719c1b4c870373944929bcc34b6", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -mlong-double-80 -mbionic\" } */\n+\n+long double\n+foo (long double x)\n+{\n+  return x * x;\n+}\n+\n+/* { dg-final { scan-assembler \"fldt\" } } */"}, {"sha": "e0e8365e32c4ab6f653d41dafb324b8764e9f094", "filename": "gcc/testsuite/gcc.target/i386/long-double-80-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-3.c?ref=c637141af07b7719c1b4c870373944929bcc34b6", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -mlong-double-80 -mandroid\" } */\n+\n+long double\n+foo (long double x)\n+{\n+  return x * x;\n+}\n+\n+/* { dg-final { scan-assembler \"fldt\" } } */"}, {"sha": "cac2d55bc166cbd75b91de4822777a3dbc03baed", "filename": "gcc/testsuite/gcc.target/i386/long-double-80-4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-4.c?ref=c637141af07b7719c1b4c870373944929bcc34b6", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mlong-double-64 -mlong-double-80\" } */\n+\n+long double\n+foo (long double x)\n+{\n+  return x * x;\n+}\n+\n+/* { dg-final { scan-assembler \"fldt\" } } */"}, {"sha": "4aa606fd1ba052f804852cac2f20ba3a9ba1075b", "filename": "gcc/testsuite/gcc.target/i386/long-double-80-5.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-5.c?ref=c637141af07b7719c1b4c870373944929bcc34b6", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mlong-double-64\" } */\n+\n+__float80\n+foo (__float80 x)\n+{\n+  return x * x;\n+}\n+\n+/* { dg-final { scan-assembler \"fldt\" } } */"}, {"sha": "a395a265942c12e4c037f5cccec30584462be84c", "filename": "gcc/testsuite/gcc.target/i386/long-double-80-6.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-6.c?ref=c637141af07b7719c1b4c870373944929bcc34b6", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O0 -mlong-double-64 -mfpmath=387\" } */\n+\n+int\n+main ()\n+{\n+  __float80 a = -0.23456789;\n+  if ((double) a >= 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "9b30fe88567862a8e59781192941fa10ad1b4bdb", "filename": "gcc/testsuite/gcc.target/i386/long-double-80-7.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c637141af07b7719c1b4c870373944929bcc34b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-7.c?ref=c637141af07b7719c1b4c870373944929bcc34b6", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O0 -mlong-double-64 -mfpmath=sse\" } */\n+/* { dg-require-effective-target sse2 } */\n+\n+#include \"sse2-check.h\"\n+\n+static void\n+sse2_test (void)\n+{\n+  __float80 a = -0.23456789;\n+  if ((double) a >= 0)\n+    __builtin_abort ();\n+}"}, {"sha": "d59a455e54ad76d3beffe5a8536fdcff5f702d7c", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c637141af07b7719c1b4c870373944929bcc34b6/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c637141af07b7719c1b4c870373944929bcc34b6/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=c637141af07b7719c1b4c870373944929bcc34b6", "patch": "@@ -1,3 +1,7 @@\n+2012-08-22  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/t-linux (HOST_LIBGCC2_CFLAGS): New.\n+\n 2012-08-22  Joseph Myers  <joseph@codesourcery.com>\n \n \t* Makefile.in (vis_hide, gen-hide-list): Do not make definitions"}, {"sha": "4f47f7bfa59cfbe99372aa349c340c7b07c96b14", "filename": "libgcc/config/i386/t-linux", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c637141af07b7719c1b4c870373944929bcc34b6/libgcc%2Fconfig%2Fi386%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c637141af07b7719c1b4c870373944929bcc34b6/libgcc%2Fconfig%2Fi386%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Ft-linux?ref=c637141af07b7719c1b4c870373944929bcc34b6", "patch": "@@ -2,3 +2,5 @@\n # Need to support TImode for x86.  Override the settings from\n # t-slibgcc-elf-ver and t-linux\n SHLIB_MAPFILES = libgcc-std.ver $(srcdir)/config/i386/libgcc-glibc.ver\n+\n+HOST_LIBGCC2_CFLAGS += -mlong-double-80"}]}