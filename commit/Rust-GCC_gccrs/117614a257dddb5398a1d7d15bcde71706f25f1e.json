{"sha": "117614a257dddb5398a1d7d15bcde71706f25f1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE3NjE0YTI1N2RkZGI1Mzk4YTFkN2QxNWJjZGU3MTcwNmYyNWYxZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-28T22:49:09Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-28T22:49:09Z"}, "message": "Better error message for old syntax of send expression as value.\n\nFrom-SVN: r171637", "tree": {"sha": "4ec984047bbf4911a1f7ee1ef9b46b78fe7313aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ec984047bbf4911a1f7ee1ef9b46b78fe7313aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/117614a257dddb5398a1d7d15bcde71706f25f1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/117614a257dddb5398a1d7d15bcde71706f25f1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/117614a257dddb5398a1d7d15bcde71706f25f1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/117614a257dddb5398a1d7d15bcde71706f25f1e/comments", "author": null, "committer": null, "parents": [{"sha": "f9fc495911f333c79db7c2cfefe575e9fee920ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9fc495911f333c79db7c2cfefe575e9fee920ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9fc495911f333c79db7c2cfefe575e9fee920ad"}], "stats": {"total": 91, "additions": 72, "deletions": 19}, "files": [{"sha": "1120c1e48274ce3f13a78349398bc4b5adf2d71e", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 71, "deletions": 18, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/117614a257dddb5398a1d7d15bcde71706f25f1e/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/117614a257dddb5398a1d7d15bcde71706f25f1e/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=117614a257dddb5398a1d7d15bcde71706f25f1e", "patch": "@@ -3153,7 +3153,7 @@ Parse::statement(Label* label)\n \t  case KEYWORD_MAP:\n \t  case KEYWORD_STRUCT:\n \t  case KEYWORD_INTERFACE:\n-\t    this->simple_stat(true, false, NULL, NULL);\n+\t    this->simple_stat(true, NULL, NULL, NULL);\n \t    break;\n \t  case KEYWORD_GO:\n \t  case KEYWORD_DEFER:\n@@ -3206,7 +3206,7 @@ Parse::statement(Label* label)\n \t    this->unget_token(Token::make_identifier_token(identifier,\n \t\t\t\t\t\t\t   is_exported,\n \t\t\t\t\t\t\t   location));\n-\t    this->simple_stat(true, false, NULL, NULL);\n+\t    this->simple_stat(true, NULL, NULL, NULL);\n \t  }\n       }\n       break;\n@@ -3221,14 +3221,14 @@ Parse::statement(Label* label)\n \t\t\t\t location);\n \t}\n       else if (!token->is_op(OPERATOR_SEMICOLON))\n-\tthis->simple_stat(true, false, NULL, NULL);\n+\tthis->simple_stat(true, NULL, NULL, NULL);\n       break;\n \n     case Token::TOKEN_STRING:\n     case Token::TOKEN_INTEGER:\n     case Token::TOKEN_FLOAT:\n     case Token::TOKEN_IMAGINARY:\n-      this->simple_stat(true, false, NULL, NULL);\n+      this->simple_stat(true, NULL, NULL, NULL);\n       break;\n \n     default:\n@@ -3330,10 +3330,12 @@ Parse::labeled_stmt(const std::string& label_name, source_location location)\n // EmptyStmt was handled in Parse::statement.\n \n // In order to make this work for if and switch statements, if\n-// RETURN_EXP is true, and we see an ExpressionStat, we return the\n+// RETURN_EXP is not NULL, and we see an ExpressionStat, we return the\n // expression rather than adding an expression statement to the\n // current block.  If we see something other than an ExpressionStat,\n-// we add the statement and return NULL.\n+// we add the statement, set *RETURN_EXP to true if we saw a send\n+// statement, and return NULL.  The handling of send statements is for\n+// better error messages.\n \n // If P_RANGE_CLAUSE is not NULL, then this will recognize a\n // RangeClause.\n@@ -3342,7 +3344,7 @@ Parse::labeled_stmt(const std::string& label_name, source_location location)\n // guard (var := expr.(\"type\") using the literal keyword \"type\").\n \n Expression*\n-Parse::simple_stat(bool may_be_composite_lit, bool return_exp,\n+Parse::simple_stat(bool may_be_composite_lit, bool* return_exp,\n \t\t   Range_clause* p_range_clause, Type_switch* p_type_switch)\n {\n   const Token* token = this->peek_token();\n@@ -3385,7 +3387,11 @@ Parse::simple_stat(bool may_be_composite_lit, bool return_exp,\n     }\n   token = this->peek_token();\n   if (token->is_op(OPERATOR_CHANOP))\n-    this->send_stmt(this->verify_not_sink(exp));\n+    {\n+      this->send_stmt(this->verify_not_sink(exp));\n+      if (return_exp != NULL)\n+\t*return_exp = true;\n+    }\n   else if (token->is_op(OPERATOR_PLUSPLUS)\n \t   || token->is_op(OPERATOR_MINUSMINUS))\n     this->inc_dec_stat(this->verify_not_sink(exp));\n@@ -3404,7 +3410,7 @@ Parse::simple_stat(bool may_be_composite_lit, bool return_exp,\n \t   || token->is_op(OPERATOR_ANDEQ)\n \t   || token->is_op(OPERATOR_BITCLEAREQ))\n     this->assignment(this->verify_not_sink(exp), p_range_clause);\n-  else if (return_exp)\n+  else if (return_exp != NULL)\n     return this->verify_not_sink(exp);\n   else\n     this->expression_stat(this->verify_not_sink(exp));\n@@ -3743,9 +3749,14 @@ Parse::if_stat()\n \n   this->gogo_->start_block(location);\n \n+  bool saw_simple_stat = false;\n   Expression* cond = NULL;\n+  bool saw_send_stmt;\n   if (this->simple_stat_may_start_here())\n-    cond = this->simple_stat(false, true, NULL, NULL);\n+    {\n+      cond = this->simple_stat(false, &saw_send_stmt, NULL, NULL);\n+      saw_simple_stat = true;\n+    }\n   if (cond != NULL && this->peek_token()->is_op(OPERATOR_SEMICOLON))\n     {\n       // The SimpleStat is an expression statement.\n@@ -3756,7 +3767,20 @@ Parse::if_stat()\n     {\n       if (this->peek_token()->is_op(OPERATOR_SEMICOLON))\n \tthis->advance_token();\n-      cond = this->expression(PRECEDENCE_NORMAL, false, false, NULL);\n+      else if (saw_simple_stat)\n+\t{\n+\t  if (saw_send_stmt)\n+\t    error_at(this->location(),\n+\t\t     (\"send statement used as value; \"\n+\t\t      \"use select for non-blocking send\"));\n+\t  else\n+\t    error_at(this->location(),\n+\t\t     \"expected %<;%> after statement in if expression\");\n+\t  if (!this->expression_may_start_here())\n+\t    cond = Expression::make_error(this->location());\n+\t}\n+      if (cond == NULL)\n+\tcond = this->expression(PRECEDENCE_NORMAL, false, false, NULL);\n     }\n \n   this->gogo_->start_block(this->location());\n@@ -3809,10 +3833,16 @@ Parse::switch_stat(Label* label)\n \n   this->gogo_->start_block(location);\n \n+  bool saw_simple_stat = false;\n   Expression* switch_val = NULL;\n+  bool saw_send_stmt;\n   Type_switch type_switch;\n   if (this->simple_stat_may_start_here())\n-    switch_val = this->simple_stat(false, true, NULL, &type_switch);\n+    {\n+      switch_val = this->simple_stat(false, &saw_send_stmt, NULL,\n+\t\t\t\t     &type_switch);\n+      saw_simple_stat = true;\n+    }\n   if (switch_val != NULL && this->peek_token()->is_op(OPERATOR_SEMICOLON))\n     {\n       // The SimpleStat is an expression statement.\n@@ -3823,6 +3853,16 @@ Parse::switch_stat(Label* label)\n     {\n       if (this->peek_token()->is_op(OPERATOR_SEMICOLON))\n \tthis->advance_token();\n+      else if (saw_simple_stat)\n+\t{\n+\t  if (saw_send_stmt)\n+\t    error_at(this->location(),\n+\t\t     (\"send statement used as value; \"\n+\t\t      \"use select for non-blocking send\"));\n+\t  else\n+\t    error_at(this->location(),\n+\t\t     \"expected %<;%> after statement in switch expression\");\n+\t}\n       if (!this->peek_token()->is_op(OPERATOR_LCURLY))\n \t{\n \t  if (this->peek_token()->is_identifier())\n@@ -3840,7 +3880,7 @@ Parse::switch_stat(Label* label)\n \t      if (is_coloneq)\n \t\t{\n \t\t  // This must be a TypeSwitchGuard.\n-\t\t  switch_val = this->simple_stat(false, true, NULL,\n+\t\t  switch_val = this->simple_stat(false, &saw_send_stmt, NULL,\n \t\t\t\t\t\t &type_switch);\n \t\t  if (!type_switch.found)\n \t\t    {\n@@ -4500,11 +4540,19 @@ Parse::for_stat(Label* label)\n \t{\n \t  // We might be looking at a Condition, an InitStat, or a\n \t  // RangeClause.\n-\t  cond = this->simple_stat(false, true, &range_clause, NULL);\n+\t  bool saw_send_stmt;\n+\t  cond = this->simple_stat(false, &saw_send_stmt, &range_clause, NULL);\n \t  if (!this->peek_token()->is_op(OPERATOR_SEMICOLON))\n \t    {\n \t      if (cond == NULL && !range_clause.found)\n-\t\terror_at(this->location(), \"parse error in for statement\");\n+\t\t{\n+\t\t  if (saw_send_stmt)\n+\t\t    error_at(this->location(),\n+\t\t\t     (\"send statement used as value; \"\n+\t\t\t      \"use select for non-blocking send\"));\n+\t\t  else\n+\t\t    error_at(this->location(), \"parse error in for statement\");\n+\t\t}\n \t    }\n \t  else\n \t    {\n@@ -4608,7 +4656,7 @@ Parse::for_clause(Expression** cond, Block** post)\n   else\n     {\n       this->gogo_->start_block(this->location());\n-      this->simple_stat(false, false, NULL, NULL);\n+      this->simple_stat(false, NULL, NULL, NULL);\n       *post = this->gogo_->finish_block(this->location());\n     }\n }\n@@ -4992,8 +5040,13 @@ Parse::program()\n \ttoken = this->advance_token();\n       else if (!token->is_eof() || !saw_errors())\n \t{\n-\t  error_at(this->location(),\n-\t\t   \"expected %<;%> or newline after top level declaration\");\n+\t  if (token->is_op(OPERATOR_CHANOP))\n+\t    error_at(this->location(),\n+\t\t     (\"send statement used as value; \"\n+\t\t      \"use select for non-blocking send\"));\n+\t  else\n+\t    error_at(this->location(),\n+\t\t     \"expected %<;%> or newline after top level declaration\");\n \t  this->skip_past_error(OPERATOR_INVALID);\n \t}\n     }"}, {"sha": "f072fd35932dee6cd6d05111a459bb2d9b5fbf10", "filename": "gcc/go/gofrontend/parse.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/117614a257dddb5398a1d7d15bcde71706f25f1e/gcc%2Fgo%2Fgofrontend%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/117614a257dddb5398a1d7d15bcde71706f25f1e/gcc%2Fgo%2Fgofrontend%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.h?ref=117614a257dddb5398a1d7d15bcde71706f25f1e", "patch": "@@ -223,7 +223,7 @@ class Parse\n   void statement(Label*);\n   bool statement_may_start_here();\n   void labeled_stmt(const std::string&, source_location);\n-  Expression* simple_stat(bool, bool, Range_clause*, Type_switch*);\n+  Expression* simple_stat(bool, bool*, Range_clause*, Type_switch*);\n   bool simple_stat_may_start_here();\n   void statement_list();\n   bool statement_list_may_start_here();"}]}