{"sha": "41b4dc74e3ea3989fb337a877ee642f9dca023ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFiNGRjNzRlM2VhMzk4OWZiMzM3YTg3N2VlNjQyZjlkY2EwMjNiYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-09-24T02:43:53Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-09-24T02:43:53Z"}, "message": "Initial revision\n\nFrom-SVN: r12794", "tree": {"sha": "9949644a2f0bf002eee037a585ab162588abc10f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9949644a2f0bf002eee037a585ab162588abc10f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41b4dc74e3ea3989fb337a877ee642f9dca023ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41b4dc74e3ea3989fb337a877ee642f9dca023ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41b4dc74e3ea3989fb337a877ee642f9dca023ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41b4dc74e3ea3989fb337a877ee642f9dca023ba/comments", "author": null, "committer": null, "parents": [{"sha": "0b97ea96f6dc3de1e3c6438702ac5b0b308e48d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b97ea96f6dc3de1e3c6438702ac5b0b308e48d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b97ea96f6dc3de1e3c6438702ac5b0b308e48d0"}], "stats": {"total": 194, "additions": 194, "deletions": 0}, "files": [{"sha": "0dddc498325a24147e4a2489ca3d37e4cd7d4159", "filename": "gcc/config/rs6000/vxppc.h", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b4dc74e3ea3989fb337a877ee642f9dca023ba/gcc%2Fconfig%2Frs6000%2Fvxppc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b4dc74e3ea3989fb337a877ee642f9dca023ba/gcc%2Fconfig%2Frs6000%2Fvxppc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvxppc.h?ref=41b4dc74e3ea3989fb337a877ee642f9dca023ba", "patch": "@@ -0,0 +1,63 @@\n+/* Definitions of target machine for GNU compiler.  Vxworks PowerPC version.\n+   Copyright (C) 1996 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* This file just exists to give specs for the PowerPC running on VxWorks.  */\n+\n+#include \"rs6000/sysv4.h\"\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \"\\\n+%{posix: -D_POSIX_SOURCE} \\\n+%{!mcpu*: \\\n+  %{mpowerpc*: -D_ARCH_PPC -DCPU=PPC603} \\\n+  %{!mno-powerpc: -D_ARCH_PPC -DCPU=PPC603}} \\\n+%{mcpu=powerpc: -D_ARCH_PPC -DCPU=PPC603} \\\n+%{mcpu=403: -D_ARCH_PPC -DCPU=PPC403} \\\n+%{mcpu=601: -D_ARCH_PPC -D_ARCH_PWR -DCPU=PPC601} \\\n+%{mcpu=603: -D_ARCH_PPC -DCPU=PPC603} \\\n+%{mcpu=604: -D_ARCH_PPC -DCPU=PPC604}\"\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"\\\n+-D__vxworks -D__vxworks__ -Asystem(vxworks) -Asystem(embedded) \\\n+-Acpu(powerpc) -Amachine(powerpc)\"\n+\n+/* VxWorks does all the library stuff itself.  */\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC \"\"\n+\n+/* VxWorks uses object files, not loadable images.  make linker just\n+   combine objects. */\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \"-r\"\n+\n+/* VxWorks provides the functionality of crt0.o and friends itself.  */\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \"\"\n+\n+#undef ENDFILE_SPEC\n+#define ENDFILE_SPEC \"\"\n+\n+/* We use stabs-in-elf for debugging */\n+#undef PREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG"}, {"sha": "6c80375f56b993ed4d927eba01b93c558f041c18", "filename": "gcc/config/sparc/vxsim.h", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b4dc74e3ea3989fb337a877ee642f9dca023ba/gcc%2Fconfig%2Fsparc%2Fvxsim.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b4dc74e3ea3989fb337a877ee642f9dca023ba/gcc%2Fconfig%2Fsparc%2Fvxsim.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fvxsim.h?ref=41b4dc74e3ea3989fb337a877ee642f9dca023ba", "patch": "@@ -0,0 +1,131 @@\n+/* Definitions of target machine for GNU compiler, for SPARC VxSim\n+   Copyright 1996 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Supposedly the same as vanilla sparc svr4, except for the stuff below: */\n+#include \"sparc/sysv4.h\"\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \\\n+ \"-DCPU=SIMSPARCSOLARIS -D__vxworks -D__vxworks__ -Dsparc -D__svr4__ -D__SVR4 \\\n+  -Asystem(embedded) -Asystem(svr4) -Acpu(sparc) -Amachine(sparc)\\\n+  -D__GCC_NEW_VARARGS__\"\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \"\"\n+\n+#undef CC1_SPEC\n+#define CC1_SPEC \"-fno-builtin %{sun4:} %{target:}\"\n+\n+/* The sun bundled assembler doesn't accept -Yd, (and neither does gas).\n+   It's safe to pass -s always, even if -g is not used. */\n+#undef ASM_SPEC\n+#define ASM_SPEC \\\n+  \"%{V} %{v:%{!V:-V}} %{Qy:} %{!Qn:-Qy} %{n} %{T} %{Ym,*} %{Wa,*:%*} -s \\\n+   %{fpic:-K PIC} %{fPIC:-K PIC}\"\n+\n+/* However it appears that Solaris 2.0 uses the same reg numbering as\n+   the old BSD-style system did. */\n+\n+#undef DBX_REGISTER_NUMBER\n+/* Same as sparc.h */\n+#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n+\n+/* We use stabs-in-elf for debugging, because that is what the native\n+   toolchain uses.  */\n+#undef PREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n+\n+/* The Solaris 2 assembler uses .skip, not .zero, so put this back. */\n+#undef ASM_OUTPUT_SKIP\n+#define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n+  fprintf (FILE, \"\\t.skip %u\\n\", (SIZE))\n+\n+#undef ASM_OUTPUT_ALIGNED_LOCAL\n+#define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGN)\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  fputs (\"\\t.local\\t\", (FILE));\t\t\\\n+  assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n+  putc ('\\n', (FILE));\t\t\t\t\t\t\t\\\n+  ASM_OUTPUT_ALIGNED_COMMON (FILE, NAME, SIZE, ALIGN);\t\t\t\\\n+} while (0)\n+\n+#undef COMMON_ASM_OP\n+#define COMMON_ASM_OP \"\\t.common\"\n+\n+/* This is how to output a definition of an internal numbered label where\n+   PREFIX is the class of label and NUM is the number within the class.  */\n+\n+#undef  ASM_OUTPUT_INTERNAL_LABEL\n+#define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\\\n+  fprintf (FILE, \".L%s%d:\\n\", PREFIX, NUM)\n+\n+/* This is how to output a reference to an internal numbered label where\n+   PREFIX is the class of label and NUM is the number within the class.  */\n+\n+#undef  ASM_OUTPUT_INTERNAL_LABELREF\n+#define ASM_OUTPUT_INTERNAL_LABELREF(FILE,PREFIX,NUM)\t\\\n+  fprintf (FILE, \".L%s%d\", PREFIX, NUM)\n+\n+/* This is how to store into the string LABEL\n+   the symbol_ref name of an internal numbered label where\n+   PREFIX is the class of label and NUM is the number within the class.\n+   This is suitable for output with `assemble_name'.  */\n+\n+#undef  ASM_GENERATE_INTERNAL_LABEL\n+#define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n+  sprintf (LABEL, \"*.L%s%d\", PREFIX, NUM)\n+\n+\f\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC \"\"\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \"\"\n+\n+#undef  ENDFILE_SPEC\n+#define ENDFILE_SPEC \"\"\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \"-r\"\n+\n+/* This defines which switch letters take arguments.\n+   It is as in svr4.h but with -R added.  */\n+\n+#undef SWITCH_TAKES_ARG\n+#define SWITCH_TAKES_ARG(CHAR) \\\n+  (   (CHAR) == 'D' \\\n+   || (CHAR) == 'U' \\\n+   || (CHAR) == 'o' \\\n+   || (CHAR) == 'e' \\\n+   || (CHAR) == 'u' \\\n+   || (CHAR) == 'I' \\\n+   || (CHAR) == 'm' \\\n+   || (CHAR) == 'L' \\\n+   || (CHAR) == 'R' \\\n+   || (CHAR) == 'A' \\\n+   || (CHAR) == 'h' \\\n+   || (CHAR) == 'z')\n+\f\n+/* ??? This does not work in SunOS 4.x, so it is not enabled in sparc.h.\n+   Instead, it is enabled here, because it does work under Solaris.  */\n+/* Define for support of TFmode long double and REAL_ARITHMETIC.\n+   Sparc ABI says that long double is 4 words.  */\n+#define LONG_DOUBLE_TYPE_SIZE 64"}]}