{"sha": "a2e6c10cbd7ff6f51052d5a550b4bf999189aa31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJlNmMxMGNiZDdmZjZmNTEwNTJkNWE1NTBiNGJmOTk5MTg5YWEzMQ==", "commit": {"author": {"name": "Zhenqiang Chen", "email": "zhenqiang.chen@linaro.org", "date": "2014-05-15T06:54:48Z"}, "committer": {"name": "Zhenqiang Chen", "email": "zqchen@gcc.gnu.org", "date": "2014-05-15T06:54:48Z"}, "message": "regcprop.h: New file.\n\n2014-05-15  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n\n\t* regcprop.h: New file.\n\t* regcprop.c (skip_debug_insn_p): New decl.\n\t(replace_oldest_value_reg): Check skip_debug_insn_p.\n\t(copyprop_hardreg_forward_bb_without_debug_insn.): New function.\n\t* shrink-wrap.c: include regcprop.h\n\t(prepare_shrink_wrap):\n\tCall copyprop_hardreg_forward_bb_without_debug_insn.\n\ntestsuite/ChangeLog:\n2014-05-15  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n\n\t* shrink-wrap-loop.c: New test case.\n\nFrom-SVN: r210458", "tree": {"sha": "7b099524607ef851d55ab807f10d94713196c9d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b099524607ef851d55ab807f10d94713196c9d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2e6c10cbd7ff6f51052d5a550b4bf999189aa31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2e6c10cbd7ff6f51052d5a550b4bf999189aa31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2e6c10cbd7ff6f51052d5a550b4bf999189aa31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2e6c10cbd7ff6f51052d5a550b4bf999189aa31/comments", "author": null, "committer": null, "parents": [{"sha": "e974b93b6cb75eb6828918fb4bb8454ed8249096", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e974b93b6cb75eb6828918fb4bb8454ed8249096", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e974b93b6cb75eb6828918fb4bb8454ed8249096"}], "stats": {"total": 95, "additions": 93, "deletions": 2}, "files": [{"sha": "beac3a76047aabfb9c7d5d5518b894a7438d6287", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2e6c10cbd7ff6f51052d5a550b4bf999189aa31/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2e6c10cbd7ff6f51052d5a550b4bf999189aa31/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a2e6c10cbd7ff6f51052d5a550b4bf999189aa31", "patch": "@@ -1,3 +1,13 @@\n+2014-05-15  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n+\n+\t* regcprop.h: New file.\n+\t* regcprop.c (skip_debug_insn_p): New decl.\n+\t(replace_oldest_value_reg): Check skip_debug_insn_p.\n+\t(copyprop_hardreg_forward_bb_without_debug_insn.): New function.\n+\t* shrink-wrap.c: include regcprop.h\n+\t(prepare_shrink_wrap):\n+\tCall copyprop_hardreg_forward_bb_without_debug_insn.\n+\n 2014-05-15  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n \n \t* shrink-wrap.h: Update comment."}, {"sha": "7a5a4f6c6865b462bc1753b60150e67ee734ea59", "filename": "gcc/regcprop.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2e6c10cbd7ff6f51052d5a550b4bf999189aa31/gcc%2Fregcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2e6c10cbd7ff6f51052d5a550b4bf999189aa31/gcc%2Fregcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregcprop.c?ref=a2e6c10cbd7ff6f51052d5a550b4bf999189aa31", "patch": "@@ -77,6 +77,7 @@ struct value_data\n };\n \n static alloc_pool debug_insn_changes_pool;\n+static bool skip_debug_insn_p;\n \n static void kill_value_one_regno (unsigned, struct value_data *);\n static void kill_value_regno (unsigned, unsigned, struct value_data *);\n@@ -485,7 +486,7 @@ replace_oldest_value_reg (rtx *loc, enum reg_class cl, rtx insn,\n \t\t\t  struct value_data *vd)\n {\n   rtx new_rtx = find_oldest_value_reg (cl, *loc, vd);\n-  if (new_rtx)\n+  if (new_rtx && (!DEBUG_INSN_P (insn) || !skip_debug_insn_p))\n     {\n       if (DEBUG_INSN_P (insn))\n \t{\n@@ -1112,6 +1113,26 @@ debug_value_data (struct value_data *vd)\n \t       vd->e[i].next_regno);\n }\n \n+/* Do copyprop_hardreg_forward_1 for a single basic block BB.\n+   DEBUG_INSN is skipped since we do not want to involve DF related\n+   staff as how it is handled in function pass_cprop_hardreg::execute.\n+\n+   NOTE: Currently it is only used for shrink-wrap.  Maybe extend it\n+   to handle DEBUG_INSN for other uses.  */\n+\n+void\n+copyprop_hardreg_forward_bb_without_debug_insn (basic_block bb)\n+{\n+  struct value_data *vd;\n+  vd = XNEWVEC (struct value_data, 1);\n+  init_value_data (vd);\n+\n+  skip_debug_insn_p = true;\n+  copyprop_hardreg_forward_1 (bb, vd);\n+  free (vd);\n+  skip_debug_insn_p = false;\n+}\n+\n #ifdef ENABLE_CHECKING\n static void\n validate_value_data (struct value_data *vd)"}, {"sha": "ab54eafcaf89952f4a4e8066fce00f3405852c07", "filename": "gcc/regcprop.h", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2e6c10cbd7ff6f51052d5a550b4bf999189aa31/gcc%2Fregcprop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2e6c10cbd7ff6f51052d5a550b4bf999189aa31/gcc%2Fregcprop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregcprop.h?ref=a2e6c10cbd7ff6f51052d5a550b4bf999189aa31", "patch": "@@ -0,0 +1,27 @@\n+/* Copy propagation on hard registers.\n+   Copyright (C) 1989-2014 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_REGCPROP_H\n+#define GCC_REGCPROP_H\n+\n+#include \"basic-block.h\"\n+\n+extern void copyprop_hardreg_forward_bb_without_debug_insn (basic_block bb);\n+\n+#endif  /* GCC_REGCPROP_H  */"}, {"sha": "f09cfe7b1f9007452752785d53eb4131ecb882c7", "filename": "gcc/shrink-wrap.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2e6c10cbd7ff6f51052d5a550b4bf999189aa31/gcc%2Fshrink-wrap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2e6c10cbd7ff6f51052d5a550b4bf999189aa31/gcc%2Fshrink-wrap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fshrink-wrap.c?ref=a2e6c10cbd7ff6f51052d5a550b4bf999189aa31", "patch": "@@ -52,7 +52,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"params.h\"\n #include \"bb-reorder.h\"\n #include \"shrink-wrap.h\"\n-\n+#include \"regcprop.h\"\n \n #ifdef HAVE_simple_return\n \n@@ -320,6 +320,15 @@ prepare_shrink_wrap (basic_block entry_block)\n   df_ref *ref;\n   bool split_p = false;\n \n+  if (JUMP_P (BB_END (entry_block)))\n+    {\n+      /* To have more shrink-wrapping opportunities, prepare_shrink_wrap tries\n+\t to sink the copies from parameter to callee saved register out of\n+\t entry block.  copyprop_hardreg_forward_bb_without_debug_insn is called\n+\t to release some dependences.  */\n+      copyprop_hardreg_forward_bb_without_debug_insn (entry_block);\n+    }\n+\n   CLEAR_HARD_REG_SET (uses);\n   CLEAR_HARD_REG_SET (defs);\n   FOR_BB_INSNS_REVERSE_SAFE (entry_block, insn, curr)"}, {"sha": "7df284eb6bd08fc1816ce72e3431efcee11a5945", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2e6c10cbd7ff6f51052d5a550b4bf999189aa31/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2e6c10cbd7ff6f51052d5a550b4bf999189aa31/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a2e6c10cbd7ff6f51052d5a550b4bf999189aa31", "patch": "@@ -1,3 +1,7 @@\n+2014-05-15  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n+\n+\t* shrink-wrap-loop.c: New test case.\n+\n 2014-05-14  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* gcc.target/arm/simd/vtrnqf32_1.c: New file."}, {"sha": "17dca4e5c3d6fac42dc496d477f6e4112c3c5f14", "filename": "gcc/testsuite/gcc.dg/shrink-wrap-loop.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2e6c10cbd7ff6f51052d5a550b4bf999189aa31/gcc%2Ftestsuite%2Fgcc.dg%2Fshrink-wrap-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2e6c10cbd7ff6f51052d5a550b4bf999189aa31/gcc%2Ftestsuite%2Fgcc.dg%2Fshrink-wrap-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fshrink-wrap-loop.c?ref=a2e6c10cbd7ff6f51052d5a550b4bf999189aa31", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target { { x86_64-*-* } || { arm_thumb2 } } } } */\n+/* { dg-options \"-O2 -fdump-rtl-pro_and_epilogue\"  } */\n+\n+int foo (int *p1, int *p2);\n+\n+int\n+test (int *p1, int *p2)\n+{\n+  int *p;\n+\n+  for (p = p2; p != 0; p++)\n+    {\n+      if (!foo (p, p1))\n+        return 0;\n+    }\n+\n+  return 1;\n+}\n+/* { dg-final { scan-rtl-dump \"Performing shrink-wrapping\" \"pro_and_epilogue\"  } } */\n+/* { dg-final { cleanup-rtl-dump \"pro_and_epilogue\" } } */"}]}