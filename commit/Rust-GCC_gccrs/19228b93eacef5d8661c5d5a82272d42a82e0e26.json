{"sha": "19228b93eacef5d8661c5d5a82272d42a82e0e26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkyMjhiOTNlYWNlZjVkODY2MWM1ZDVhODIyNzJkNDJhODJlMGUyNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-04-01T21:13:29Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-04-01T21:13:29Z"}, "message": "re PR middle-end/48335 (ICE in convert_move)\n\n\tPR middle-end/48335\n\t* expr.c (expand_assignment): Handle all possibilities\n\tif TO_RTX is CONCAT.\n\t* expmed.c (store_bit_field_1): Avoid trying to create\n\tinvalid SUBREGs.\n\t(store_split_bit_field): If SUBREG_REG (op0) or\n\top0 itself has smaller mode than word, return it\n\tfor offset 0 and const0_rtx for out-of-bounds stores.\n\tIf word is const0_rtx, skip it.\n\n\t* gcc.c-torture/compile/pr48335-1.c: New test.\n\t* gcc.dg/pr48335-1.c: New test.\n\t* gcc.dg/pr48335-2.c: New test.\n\t* gcc.dg/pr48335-3.c: New test.\n\t* gcc.dg/pr48335-4.c: New test.\n\t* gcc.dg/pr48335-5.c: New test.\n\t* gcc.dg/pr48335-6.c: New test.\n\t* gcc.dg/pr48335-7.c: New test.\n\t* gcc.dg/pr48335-8.c: New test.\n\t* gcc.target/i386/pr48335-1.c: New test.\n\nFrom-SVN: r171855", "tree": {"sha": "feaee55ecf6450268c89a7644e7055c18ceee503", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/feaee55ecf6450268c89a7644e7055c18ceee503"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19228b93eacef5d8661c5d5a82272d42a82e0e26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19228b93eacef5d8661c5d5a82272d42a82e0e26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19228b93eacef5d8661c5d5a82272d42a82e0e26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19228b93eacef5d8661c5d5a82272d42a82e0e26/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "88cb339e2fc095381098658177b8600ee151c58f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88cb339e2fc095381098658177b8600ee151c58f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88cb339e2fc095381098658177b8600ee151c58f"}], "stats": {"total": 536, "additions": 514, "deletions": 22}, "files": [{"sha": "a1ee99ad0555221e270609c76f54399a2ae4a78b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19228b93eacef5d8661c5d5a82272d42a82e0e26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19228b93eacef5d8661c5d5a82272d42a82e0e26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19228b93eacef5d8661c5d5a82272d42a82e0e26", "patch": "@@ -1,3 +1,15 @@\n+2011-04-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/48335\n+\t* expr.c (expand_assignment): Handle all possibilities\n+\tif TO_RTX is CONCAT.\n+\t* expmed.c (store_bit_field_1): Avoid trying to create\n+\tinvalid SUBREGs.\n+\t(store_split_bit_field): If SUBREG_REG (op0) or\n+\top0 itself has smaller mode than word, return it\n+\tfor offset 0 and const0_rtx for out-of-bounds stores.\n+\tIf word is const0_rtx, skip it.\n+\n 2011-04-01  Naveen H.S  <naveen.S@kpitcummins.com>\n \n \t* config/h8300/h8300.c (print_operand_address): Rename to..."}, {"sha": "9458df3747e9a694bac50d3a1d7210a481edd17f", "filename": "gcc/expmed.c", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19228b93eacef5d8661c5d5a82272d42a82e0e26/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19228b93eacef5d8661c5d5a82272d42a82e0e26/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=19228b93eacef5d8661c5d5a82272d42a82e0e26", "patch": "@@ -418,8 +418,10 @@ store_bit_field_1 (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n       && bitsize == GET_MODE_BITSIZE (fieldmode)\n       && (!MEM_P (op0)\n \t  ? ((GET_MODE_SIZE (fieldmode) >= UNITS_PER_WORD\n-\t     || GET_MODE_SIZE (GET_MODE (op0)) == GET_MODE_SIZE (fieldmode))\n-\t     && byte_offset % GET_MODE_SIZE (fieldmode) == 0)\n+\t      || GET_MODE_SIZE (GET_MODE (op0)) == GET_MODE_SIZE (fieldmode))\n+\t     && ((GET_MODE (op0) == fieldmode && byte_offset == 0)\n+\t\t || validate_subreg (fieldmode, GET_MODE (op0), op0,\n+\t\t\t\t     byte_offset)))\n \t  : (! SLOW_UNALIGNED_ACCESS (fieldmode, MEM_ALIGN (op0))\n \t     || (offset * BITS_PER_UNIT % bitsize == 0\n \t\t && MEM_ALIGN (op0) % GET_MODE_BITSIZE (fieldmode) == 0))))\n@@ -479,6 +481,7 @@ store_bit_field_1 (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n       struct expand_operand ops[2];\n       enum insn_code icode = optab_handler (movstrict_optab, fieldmode);\n       rtx arg0 = op0;\n+      unsigned HOST_WIDE_INT subreg_off;\n \n       if (GET_CODE (arg0) == SUBREG)\n \t{\n@@ -491,15 +494,18 @@ store_bit_field_1 (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n \t  arg0 = SUBREG_REG (arg0);\n \t}\n \n-      arg0 = gen_rtx_SUBREG (fieldmode, arg0,\n-\t\t\t     (bitnum % BITS_PER_WORD) / BITS_PER_UNIT\n-\t\t\t     + (offset * UNITS_PER_WORD));\n+      subreg_off = (bitnum % BITS_PER_WORD) / BITS_PER_UNIT\n+\t\t   + (offset * UNITS_PER_WORD);\n+      if (validate_subreg (fieldmode, GET_MODE (arg0), arg0, subreg_off))\n+\t{\n+\t  arg0 = gen_rtx_SUBREG (fieldmode, arg0, subreg_off);\n \n-      create_fixed_operand (&ops[0], arg0);\n-      /* Shrink the source operand to FIELDMODE.  */\n-      create_convert_operand_to (&ops[1], value, fieldmode, false);\n-      if (maybe_expand_insn (icode, 2, ops))\n-\treturn true;\n+\t  create_fixed_operand (&ops[0], arg0);\n+\t  /* Shrink the source operand to FIELDMODE.  */\n+\t  create_convert_operand_to (&ops[1], value, fieldmode, false);\n+\t  if (maybe_expand_insn (icode, 2, ops))\n+\t    return true;\n+\t}\n     }\n \n   /* Handle fields bigger than a word.  */\n@@ -1045,22 +1051,32 @@ store_split_bit_field (rtx op0, unsigned HOST_WIDE_INT bitsize,\n       if (GET_CODE (op0) == SUBREG)\n \t{\n \t  int word_offset = (SUBREG_BYTE (op0) / UNITS_PER_WORD) + offset;\n-\t  word = operand_subword_force (SUBREG_REG (op0), word_offset,\n-\t\t\t\t\tGET_MODE (SUBREG_REG (op0)));\n+\t  enum machine_mode sub_mode = GET_MODE (SUBREG_REG (op0));\n+\t  if (sub_mode != BLKmode && GET_MODE_SIZE (sub_mode) < UNITS_PER_WORD)\n+\t    word = word_offset ? const0_rtx : op0;\n+\t  else\n+\t    word = operand_subword_force (SUBREG_REG (op0), word_offset,\n+\t\t\t\t\t  GET_MODE (SUBREG_REG (op0)));\n \t  offset = 0;\n \t}\n       else if (REG_P (op0))\n \t{\n-\t  word = operand_subword_force (op0, offset, GET_MODE (op0));\n+\t  enum machine_mode op0_mode = GET_MODE (op0);\n+\t  if (op0_mode != BLKmode && GET_MODE_SIZE (op0_mode) < UNITS_PER_WORD)\n+\t    word = offset ? const0_rtx : op0;\n+\t  else\n+\t    word = operand_subword_force (op0, offset, GET_MODE (op0));\n \t  offset = 0;\n \t}\n       else\n \tword = op0;\n \n       /* OFFSET is in UNITs, and UNIT is in bits.\n-         store_fixed_bit_field wants offset in bytes.  */\n-      store_fixed_bit_field (word, offset * unit / BITS_PER_UNIT, thissize,\n-\t\t\t     thispos, part);\n+\t store_fixed_bit_field wants offset in bytes.  If WORD is const0_rtx,\n+\t it is just an out-of-bounds access.  Ignore it.  */\n+      if (word != const0_rtx)\n+\tstore_fixed_bit_field (word, offset * unit / BITS_PER_UNIT, thissize,\n+\t\t\t       thispos, part);\n       bitsdone += thissize;\n     }\n }"}, {"sha": "d521f648b23ff989be6faa9a46312eb632c7d781", "filename": "gcc/expr.c", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19228b93eacef5d8661c5d5a82272d42a82e0e26/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19228b93eacef5d8661c5d5a82272d42a82e0e26/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=19228b93eacef5d8661c5d5a82272d42a82e0e26", "patch": "@@ -4280,16 +4280,47 @@ expand_assignment (tree to, tree from, bool nontemporal)\n       /* Handle expand_expr of a complex value returning a CONCAT.  */\n       else if (GET_CODE (to_rtx) == CONCAT)\n \t{\n-\t  if (COMPLEX_MODE_P (TYPE_MODE (TREE_TYPE (from))))\n+\t  unsigned short mode_bitsize = GET_MODE_BITSIZE (GET_MODE (to_rtx));\n+\t  if (COMPLEX_MODE_P (TYPE_MODE (TREE_TYPE (from)))\n+\t      && bitpos == 0\n+\t      && bitsize == mode_bitsize)\n+\t    result = store_expr (from, to_rtx, false, nontemporal);\n+\t  else if (bitsize == mode_bitsize / 2\n+\t\t   && (bitpos == 0 || bitpos == mode_bitsize / 2))\n+\t    result = store_expr (from, XEXP (to_rtx, bitpos != 0), false,\n+\t\t\t\t nontemporal);\n+\t  else if (bitpos + bitsize <= mode_bitsize / 2)\n+\t    result = store_field (XEXP (to_rtx, 0), bitsize, bitpos,\n+\t\t\t\t  mode1, from, TREE_TYPE (tem),\n+\t\t\t\t  get_alias_set (to), nontemporal);\n+\t  else if (bitpos >= mode_bitsize / 2)\n+\t    result = store_field (XEXP (to_rtx, 1), bitsize,\n+\t\t\t\t  bitpos - mode_bitsize / 2, mode1, from,\n+\t\t\t\t  TREE_TYPE (tem), get_alias_set (to),\n+\t\t\t\t  nontemporal);\n+\t  else if (bitpos == 0 && bitsize == mode_bitsize)\n \t    {\n-\t      gcc_assert (bitpos == 0);\n-\t      result = store_expr (from, to_rtx, false, nontemporal);\n+\t      rtx from_rtx;\n+\t      result = expand_normal (from);\n+\t      from_rtx = simplify_gen_subreg (GET_MODE (to_rtx), result,\n+\t\t\t\t\t      TYPE_MODE (TREE_TYPE (from)), 0);\n+\t      emit_move_insn (XEXP (to_rtx, 0),\n+\t\t\t      read_complex_part (from_rtx, false));\n+\t      emit_move_insn (XEXP (to_rtx, 1),\n+\t\t\t      read_complex_part (from_rtx, true));\n \t    }\n \t  else\n \t    {\n-\t      gcc_assert (bitpos == 0 || bitpos == GET_MODE_BITSIZE (mode1));\n-\t      result = store_expr (from, XEXP (to_rtx, bitpos != 0), false,\n-\t\t\t\t   nontemporal);\n+\t      rtx temp = assign_stack_temp (GET_MODE (to_rtx),\n+\t\t\t\t\t    GET_MODE_SIZE (GET_MODE (to_rtx)),\n+\t\t\t\t\t    0);\n+\t      write_complex_part (temp, XEXP (to_rtx, 0), false);\n+\t      write_complex_part (temp, XEXP (to_rtx, 1), true);\n+\t      result = store_field (temp, bitsize, bitpos, mode1, from,\n+\t\t\t\t    TREE_TYPE (tem), get_alias_set (to),\n+\t\t\t\t    nontemporal);\n+\t      emit_move_insn (XEXP (to_rtx, 0), read_complex_part (temp, false));\n+\t      emit_move_insn (XEXP (to_rtx, 1), read_complex_part (temp, true));\n \t    }\n \t}\n       else"}, {"sha": "4ffaaac0f33afa0342fccfe10268217dfdbb622e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19228b93eacef5d8661c5d5a82272d42a82e0e26/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19228b93eacef5d8661c5d5a82272d42a82e0e26/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=19228b93eacef5d8661c5d5a82272d42a82e0e26", "patch": "@@ -1,3 +1,17 @@\n+2011-04-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/48335\n+\t* gcc.c-torture/compile/pr48335-1.c: New test.\n+\t* gcc.dg/pr48335-1.c: New test.\n+\t* gcc.dg/pr48335-2.c: New test.\n+\t* gcc.dg/pr48335-3.c: New test.\n+\t* gcc.dg/pr48335-4.c: New test.\n+\t* gcc.dg/pr48335-5.c: New test.\n+\t* gcc.dg/pr48335-6.c: New test.\n+\t* gcc.dg/pr48335-7.c: New test.\n+\t* gcc.dg/pr48335-8.c: New test.\n+\t* gcc.target/i386/pr48335-1.c: New test.\n+\n 2011-04-01  Vincent Lefevre  <vincent+gcc@vinc17.org>\n \n \tPR c/36299"}, {"sha": "6f813382c707fdb6ec94e813bab6bc63585fcc2f", "filename": "gcc/testsuite/gcc.c-torture/compile/pr48335-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19228b93eacef5d8661c5d5a82272d42a82e0e26/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr48335-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19228b93eacef5d8661c5d5a82272d42a82e0e26/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr48335-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr48335-1.c?ref=19228b93eacef5d8661c5d5a82272d42a82e0e26", "patch": "@@ -0,0 +1,41 @@\n+/* PR middle-end/48335 */\n+\n+struct S { float d; };\n+\n+void bar (struct S);\n+\n+void\n+f0 (int x)\n+{\n+  struct S s = {.d = 0.0f };\n+  ((char *) &s.d)[0] = x;\n+  s.d *= 7.0;\n+  bar (s);\n+}\n+\n+void\n+f1 (int x)\n+{\n+  struct S s = {.d = 0.0f };\n+  ((char *) &s.d)[1] = x;\n+  s.d *= 7.0;\n+  bar (s);\n+}\n+\n+void\n+f2 (int x)\n+{\n+  struct S s = {.d = 0.0f };\n+  ((char *) &s.d)[2] = x;\n+  s.d *= 7.0;\n+  bar (s);\n+}\n+\n+void\n+f3 (int x)\n+{\n+  struct S s = {.d = 0.0f };\n+  ((char *) &s.d)[3] = x;\n+  s.d *= 7.0;\n+  bar (s);\n+}"}, {"sha": "7a022eac835b868992aeab342a68c322b16171c2", "filename": "gcc/testsuite/gcc.dg/pr48335-1.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19228b93eacef5d8661c5d5a82272d42a82e0e26/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48335-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19228b93eacef5d8661c5d5a82272d42a82e0e26/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48335-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48335-1.c?ref=19228b93eacef5d8661c5d5a82272d42a82e0e26", "patch": "@@ -0,0 +1,48 @@\n+/* PR middle-end/48335 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-tree-sra\" } */\n+\n+typedef long long T __attribute__((may_alias));\n+\n+struct S\n+{\n+  _Complex float d __attribute__((aligned (8)));\n+};\n+\n+void bar (struct S);\n+\n+void\n+f1 (T x)\n+{\n+  struct S s;\n+  *(T *) &s.d = x;\n+  __real__ s.d *= 7.0;\n+  bar (s);\n+}\n+\n+void\n+f2 (int x)\n+{\n+  struct S s = { .d = 0.0f };\n+  *(char *) &s.d = x;\n+  __real__ s.d *= 7.0;\n+  bar (s);\n+}\n+\n+void\n+f3 (int x)\n+{\n+  struct S s = { .d = 0.0f };\n+  ((char *) &s.d)[2] = x;\n+  __real__ s.d *= 7.0;\n+  bar (s);\n+}\n+\n+void\n+f4 (int x, int y)\n+{\n+  struct S s = { .d = 0.0f };\n+  ((char *) &s.d)[y] = x;\n+  __real__ s.d *= 7.0;\n+  bar (s);\n+}"}, {"sha": "a37c0797c3bfb4f4368374d703e631789a298152", "filename": "gcc/testsuite/gcc.dg/pr48335-2.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19228b93eacef5d8661c5d5a82272d42a82e0e26/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48335-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19228b93eacef5d8661c5d5a82272d42a82e0e26/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48335-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48335-2.c?ref=19228b93eacef5d8661c5d5a82272d42a82e0e26", "patch": "@@ -0,0 +1,58 @@\n+/* PR middle-end/48335 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-tree-sra\" } */\n+\n+typedef long long T __attribute__((may_alias, aligned (1)));\n+typedef short U __attribute__((may_alias, aligned (1)));\n+\n+struct S\n+{\n+  _Complex float d __attribute__((aligned (8)));\n+};\n+\n+void bar (struct S);\n+\n+void\n+f1 (T x)\n+{\n+  struct S s;\n+  *(T *) ((char *) &s.d + 1) = x;\n+  __real__ s.d *= 7.0;\n+  bar (s);\n+}\n+\n+void\n+f2 (int x)\n+{\n+  struct S s = { .d = 0.0f };\n+  ((U *)((char *) &s.d + 1))[0] = x;\n+  __real__ s.d *= 7.0;\n+  bar (s);\n+}\n+\n+void\n+f3 (int x)\n+{\n+  struct S s = { .d = 0.0f };\n+  ((U *)((char *) &s.d + 1))[1] = x;\n+  __real__ s.d *= 7.0;\n+  bar (s);\n+}\n+\n+void\n+f4 (int x)\n+{\n+  struct S s = { .d = 0.0f };\n+  ((U *)((char *) &s.d + 1))[2] = x;\n+  __real__ s.d *= 7.0;\n+  bar (s);\n+}\n+\n+void\n+f5 (int x)\n+{\n+  struct S s = { .d = 0.0f };\n+  ((U *)((char *) &s.d + 1))[3] = x;\n+  __real__ s.d *= 7.0;\n+  bar (s);\n+}"}, {"sha": "9041f591fff66b3129d104ff4d00b6fe402a3060", "filename": "gcc/testsuite/gcc.dg/pr48335-3.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19228b93eacef5d8661c5d5a82272d42a82e0e26/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48335-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19228b93eacef5d8661c5d5a82272d42a82e0e26/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48335-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48335-3.c?ref=19228b93eacef5d8661c5d5a82272d42a82e0e26", "patch": "@@ -0,0 +1,48 @@\n+/* PR middle-end/48335 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-tree-sra\" } */\n+\n+typedef short U __attribute__((may_alias, aligned (1)));\n+\n+struct S\n+{\n+  double d;\n+};\n+\n+void bar (struct S);\n+\n+void\n+f1 (int x)\n+{\n+  struct S s = { .d = 0.0 };\n+  ((U *)((char *) &s.d + 1))[0] = x;\n+  __real__ s.d *= 7.0;\n+  bar (s);\n+}\n+\n+void\n+f2 (int x)\n+{\n+  struct S s = { .d = 0.0 };\n+  ((U *)((char *) &s.d + 1))[1] = x;\n+  __real__ s.d *= 7.0;\n+  bar (s);\n+}\n+\n+void\n+f3 (int x)\n+{\n+  struct S s = { .d = 0.0 };\n+  ((U *)((char *) &s.d + 1))[2] = x;\n+  __real__ s.d *= 7.0;\n+  bar (s);\n+}\n+\n+void\n+f4 (int x)\n+{\n+  struct S s = { .d = 0.0 };\n+  ((U *)((char *) &s.d + 1))[3] = x;\n+  __real__ s.d *= 7.0;\n+  bar (s);\n+}"}, {"sha": "98e9e1eec7389032f8f5e68f847a8bae2c28aa85", "filename": "gcc/testsuite/gcc.dg/pr48335-4.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19228b93eacef5d8661c5d5a82272d42a82e0e26/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48335-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19228b93eacef5d8661c5d5a82272d42a82e0e26/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48335-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48335-4.c?ref=19228b93eacef5d8661c5d5a82272d42a82e0e26", "patch": "@@ -0,0 +1,39 @@\n+/* PR middle-end/48335 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-tree-sra\" } */\n+\n+typedef short U __attribute__((may_alias, aligned (1)));\n+\n+struct S\n+{\n+  double d;\n+};\n+\n+void bar (struct S);\n+\n+void\n+f1 (int x)\n+{\n+  struct S s = { .d = 0.0 };\n+  ((U *)((char *) &s.d + 1))[-1] = x;\n+  __real__ s.d *= 7.0;\n+  bar (s);\n+}\n+\n+void\n+f2 (int x)\n+{\n+  struct S s = { .d = 0.0 };\n+  ((U *)((char *) &s.d + 1))[-2] = x;\n+  __real__ s.d *= 7.0;\n+  bar (s);\n+}\n+\n+void\n+f3 (int x)\n+{\n+  struct S s = { .d = 0.0 };\n+  ((U *)((char *) &s.d + 1))[5] = x;\n+  __real__ s.d *= 7.0;\n+  bar (s);\n+}"}, {"sha": "b1895484dc9d699cb2fdfb2b903956f56a9dac04", "filename": "gcc/testsuite/gcc.dg/pr48335-5.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19228b93eacef5d8661c5d5a82272d42a82e0e26/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48335-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19228b93eacef5d8661c5d5a82272d42a82e0e26/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48335-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48335-5.c?ref=19228b93eacef5d8661c5d5a82272d42a82e0e26", "patch": "@@ -0,0 +1,38 @@\n+/* PR middle-end/48335 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-tree-sra\" } */\n+\n+typedef long long T __attribute__((may_alias));\n+\n+struct S\n+{\n+  _Complex float d __attribute__((aligned (8)));\n+};\n+\n+int\n+f1 (struct S x)\n+{\n+  struct S s = x;\n+  return *(T *) &s.d;\n+}\n+\n+int\n+f2 (struct S x)\n+{\n+  struct S s = x;\n+  return *(char *) &s.d;\n+}\n+\n+int\n+f3 (struct S x)\n+{\n+  struct S s = x;\n+  return ((char *) &s.d)[2];\n+}\n+\n+int\n+f4 (struct S x, int y)\n+{\n+  struct S s = x;\n+  return ((char *) &s.d)[y];\n+}"}, {"sha": "769130cc4e389ee3b284e5e2f8c5e5557fbc9829", "filename": "gcc/testsuite/gcc.dg/pr48335-6.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19228b93eacef5d8661c5d5a82272d42a82e0e26/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48335-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19228b93eacef5d8661c5d5a82272d42a82e0e26/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48335-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48335-6.c?ref=19228b93eacef5d8661c5d5a82272d42a82e0e26", "patch": "@@ -0,0 +1,46 @@\n+/* PR middle-end/48335 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-tree-sra\" } */\n+\n+typedef long long T __attribute__((may_alias, aligned (1)));\n+typedef short U __attribute__((may_alias, aligned (1)));\n+\n+struct S\n+{\n+  _Complex float d __attribute__((aligned (8)));\n+};\n+\n+T\n+f1 (struct S x)\n+{\n+  struct S s = x;\n+  return *(T *) ((char *) &s.d + 1);\n+}\n+\n+int\n+f2 (struct S x)\n+{\n+  struct S s = x;\n+  return ((U *)((char *) &s.d + 1))[0];\n+}\n+\n+int\n+f3 (struct S x)\n+{\n+  struct S s = x;\n+  return ((U *)((char *) &s.d + 1))[1];\n+}\n+\n+int\n+f4 (struct S x)\n+{\n+  struct S s = x;\n+  return ((U *)((char *) &s.d + 1))[2];\n+}\n+\n+int\n+f5 (struct S x)\n+{\n+  struct S s = x;\n+  return ((U *)((char *) &s.d + 1))[3];\n+}"}, {"sha": "ddb15ee6ab9f00926ae10418502012d5a2d1ae7a", "filename": "gcc/testsuite/gcc.dg/pr48335-7.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19228b93eacef5d8661c5d5a82272d42a82e0e26/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48335-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19228b93eacef5d8661c5d5a82272d42a82e0e26/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48335-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48335-7.c?ref=19228b93eacef5d8661c5d5a82272d42a82e0e26", "patch": "@@ -0,0 +1,38 @@\n+/* PR middle-end/48335 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-tree-sra\" } */\n+\n+typedef short U __attribute__((may_alias, aligned (1)));\n+\n+struct S\n+{\n+  double d;\n+};\n+\n+int\n+f1 (struct S x)\n+{\n+  struct S s = x;\n+  return ((U *)((char *) &s.d + 1))[0];\n+}\n+\n+int\n+f2 (struct S x)\n+{\n+  struct S s = x;\n+  return ((U *)((char *) &s.d + 1))[1];\n+}\n+\n+int\n+f3 (struct S x)\n+{\n+  struct S s = x;\n+  return ((U *)((char *) &s.d + 1))[2];\n+}\n+\n+int\n+f4 (struct S x)\n+{\n+  struct S s = x;\n+  return ((U *)((char *) &s.d + 1))[3];\n+}"}, {"sha": "bb06c157f8367c081161c4924ed5e16da9145001", "filename": "gcc/testsuite/gcc.dg/pr48335-8.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19228b93eacef5d8661c5d5a82272d42a82e0e26/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48335-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19228b93eacef5d8661c5d5a82272d42a82e0e26/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48335-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48335-8.c?ref=19228b93eacef5d8661c5d5a82272d42a82e0e26", "patch": "@@ -0,0 +1,31 @@\n+/* PR middle-end/48335 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-tree-sra\" } */\n+\n+typedef short U __attribute__((may_alias, aligned (1)));\n+\n+struct S\n+{\n+  double d;\n+};\n+\n+int\n+f1 (struct S x)\n+{\n+  struct S s = x;\n+  return ((U *)((char *) &s.d + 1))[-1];\n+}\n+\n+int\n+f2 (struct S x)\n+{\n+  struct S s = x;\n+  return ((U *)((char *) &s.d + 1))[-2];\n+}\n+\n+int\n+f3 (struct S x)\n+{\n+  struct S s = x;\n+  return ((U *)((char *) &s.d + 1))[5];\n+}"}, {"sha": "08c5284ea80ddb4e90927d499b1d433cf34c0b3c", "filename": "gcc/testsuite/gcc.target/i386/pr48335-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19228b93eacef5d8661c5d5a82272d42a82e0e26/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr48335-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19228b93eacef5d8661c5d5a82272d42a82e0e26/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr48335-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr48335-1.c?ref=19228b93eacef5d8661c5d5a82272d42a82e0e26", "patch": "@@ -0,0 +1,32 @@\n+/* PR middle-end/48335 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-tree-sra -msse2\" } */\n+\n+#include <emmintrin.h>\n+\n+typedef __float128 T __attribute__((may_alias));\n+\n+struct S\n+{\n+  _Complex double d __attribute__((aligned (16)));\n+};\n+\n+void bar (struct S);\n+\n+void\n+f1 (T x)\n+{\n+  struct S s;\n+  *(T *) &s.d = x;\n+  __real__ s.d *= 7.0;\n+  bar (s);\n+}\n+\n+void\n+f2 (__m128d x)\n+{\n+  struct S s;\n+  _mm_store_pd ((double *) &s.d, x);\n+  __real__ s.d *= 7.0;\n+  bar (s);\n+}"}]}