{"sha": "f7da1e9a1e1b18af3a64419f989b6d7ed284f4fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdkYTFlOWExZTFiMThhZjNhNjQ0MTlmOTg5YjZkN2VkMjg0ZjRmYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-03-03T18:08:17Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-03-03T18:08:17Z"}, "message": "toplev.c (rest_of_compilation): Avoid cfg_cleanup calls when not optimizing.\n\n\t* toplev.c (rest_of_compilation):  Avoid cfg_cleanup calls when not\n\toptimizing.\n\nFrom-SVN: r63723", "tree": {"sha": "2d278a21eb40e98bc3007fcd1771f2f28eecca11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d278a21eb40e98bc3007fcd1771f2f28eecca11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7da1e9a1e1b18af3a64419f989b6d7ed284f4fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7da1e9a1e1b18af3a64419f989b6d7ed284f4fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7da1e9a1e1b18af3a64419f989b6d7ed284f4fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7da1e9a1e1b18af3a64419f989b6d7ed284f4fc/comments", "author": null, "committer": null, "parents": [{"sha": "0d4de51defe172a09205933c74af23b69b526dd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d4de51defe172a09205933c74af23b69b526dd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d4de51defe172a09205933c74af23b69b526dd1"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "df960ee66ba7a2c4474d47ebb9f0a20df52f0a0b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7da1e9a1e1b18af3a64419f989b6d7ed284f4fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7da1e9a1e1b18af3a64419f989b6d7ed284f4fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7da1e9a1e1b18af3a64419f989b6d7ed284f4fc", "patch": "@@ -1,3 +1,8 @@\n+Mon Mar  3 19:07:21 CET 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* toplev.c (rest_of_compilation):  Avoid cfg_cleanup calls when not\n+\toptimizing.\n+\n 2003-03-03  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.md (*ixorsi3_zext_hi): Restrict to"}, {"sha": "339b198b0cfabf5415f3c1b9cf0b697885b54e0a", "filename": "gcc/toplev.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7da1e9a1e1b18af3a64419f989b6d7ed284f4fc/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7da1e9a1e1b18af3a64419f989b6d7ed284f4fc/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=f7da1e9a1e1b18af3a64419f989b6d7ed284f4fc", "patch": "@@ -2812,7 +2812,8 @@ rest_of_compilation (decl)\n     }\n \n   timevar_push (TV_JUMP);\n-  cleanup_cfg (optimize ? CLEANUP_EXPENSIVE | CLEANUP_PRE_LOOP: 0);\n+  if (optimize)\n+    cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_PRE_LOOP);\n \n   /* Try to identify useless null pointer tests and delete them.  */\n   if (flag_delete_null_pointer_checks)\n@@ -3043,8 +3044,9 @@ rest_of_compilation (decl)\n   open_dump_file (DFI_cfg, decl);\n   if (rtl_dump_file)\n     dump_flow_info (rtl_dump_file);\n-  cleanup_cfg ((optimize ? CLEANUP_EXPENSIVE : 0)\n-\t       | (flag_thread_jumps ? CLEANUP_THREADING : 0));\n+  if (optimize)\n+    cleanup_cfg (CLEANUP_EXPENSIVE\n+\t\t | (flag_thread_jumps ? CLEANUP_THREADING : 0));\n \n   /* It may make more sense to mark constant functions after dead code is\n      eliminated by life_analysis, but we need to do it early, as -fprofile-arcs\n@@ -3473,7 +3475,8 @@ rest_of_compilation (decl)\n #endif\n     split_all_insns (0);\n \n-  cleanup_cfg (optimize ? CLEANUP_EXPENSIVE : 0);\n+  if (optimize)\n+    cleanup_cfg (CLEANUP_EXPENSIVE);\n \n   /* On some machines, the prologue and epilogue code, or parts thereof,\n      can be represented as RTL.  Doing so lets us schedule insns between"}]}