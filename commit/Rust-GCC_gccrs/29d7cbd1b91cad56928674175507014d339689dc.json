{"sha": "29d7cbd1b91cad56928674175507014d339689dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlkN2NiZDFiOTFjYWQ1NjkyODY3NDE3NTUwNzAxNGQzMzk2ODlkYw==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2014-06-27T13:48:54Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2014-06-27T13:48:54Z"}, "message": "Support compressed debug sections\n\n\t* configure.ac (gcc_cv_as_compress_debug): Check for assembler\n\tcompressed debug support.\n\t(gcc_cv_ld_compress_debug): Check for linker compressed debug\n\tsupport.\n\t* configure: Regenerate.\n\t* config.in: Regenerate.\n\t* common.opt (compressed_debug_sections): New enum.\n\t(gz, gz=): New options.\n\t* gcc.c (LINK_COMPRESS_DEBUG_SPEC, ASM_COMPRESS_DEBUG_SPEC):\n\tDefine.\n\t(LINK_COMMAND_SPEC): Invoke LINK_COMPRESS_DEBUG_SPEC.\n\t(asm_options): Invoke ASM_COMPRESS_DEBUG_SPEC.\n\t* config/darwin.h (LINK_COMMAND_SPEC_A): Invoke\n\tLINK_COMPRESS_DEBUG_SPEC.\n\t* config/i386/djgpp.h (LINK_COMMAND_SPEC): Likewise.\n\t* opts.c (common_handle_option): Handle OPT_gz, OPT_gz_.\n\t* doc/invoke.texi (Option Summary, Debugging Options): Add\n\t-gz[=type].\n\t(Debugging Options): Document -gz[=type].\n\nFrom-SVN: r212072", "tree": {"sha": "cb33b8e33481d74febbb79409812bd681334a6b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb33b8e33481d74febbb79409812bd681334a6b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29d7cbd1b91cad56928674175507014d339689dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29d7cbd1b91cad56928674175507014d339689dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29d7cbd1b91cad56928674175507014d339689dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29d7cbd1b91cad56928674175507014d339689dc/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d284e1b86aa99cdf480905c58cf8975b1ae1e295", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d284e1b86aa99cdf480905c58cf8975b1ae1e295", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d284e1b86aa99cdf480905c58cf8975b1ae1e295"}], "stats": {"total": 351, "additions": 346, "deletions": 5}, "files": [{"sha": "9216478dbc675ccfba5579e7f0761707a79d2e76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d7cbd1b91cad56928674175507014d339689dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d7cbd1b91cad56928674175507014d339689dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29d7cbd1b91cad56928674175507014d339689dc", "patch": "@@ -1,3 +1,25 @@\n+2014-06-27  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.ac (gcc_cv_as_compress_debug): Check for assembler\n+\tcompressed debug support.\n+\t(gcc_cv_ld_compress_debug): Check for linker compressed debug\n+\tsupport.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\t* common.opt (compressed_debug_sections): New enum.\n+\t(gz, gz=): New options.\n+\t* gcc.c (LINK_COMPRESS_DEBUG_SPEC, ASM_COMPRESS_DEBUG_SPEC):\n+\tDefine.\n+\t(LINK_COMMAND_SPEC): Invoke LINK_COMPRESS_DEBUG_SPEC.\n+\t(asm_options): Invoke ASM_COMPRESS_DEBUG_SPEC.\n+\t* config/darwin.h (LINK_COMMAND_SPEC_A): Invoke\n+\tLINK_COMPRESS_DEBUG_SPEC.\n+\t* config/i386/djgpp.h (LINK_COMMAND_SPEC): Likewise.\n+\t* opts.c (common_handle_option): Handle OPT_gz, OPT_gz_.\n+\t* doc/invoke.texi (Option Summary, Debugging Options): Add\n+\t-gz[=type].\n+\t(Debugging Options): Document -gz[=type].\n+\n 2014-06-27  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/61160"}, {"sha": "15371dfbe9b378e7d0c0fd724a63c903710f10a8", "filename": "gcc/common.opt", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d7cbd1b91cad56928674175507014d339689dc/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d7cbd1b91cad56928674175507014d339689dc/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=29d7cbd1b91cad56928674175507014d339689dc", "patch": "@@ -2527,6 +2527,28 @@ gxcoff+\n Common JoinedOrMissing Negative(gcoff)\n Generate debug information in extended XCOFF format\n \n+Enum\n+Name(compressed_debug_sections) Type(int)\n+\n+; Since -gz= is completely handled in specs, the values aren't used and we\n+; assign arbitrary constants.\n+EnumValue\n+Enum(compressed_debug_sections) String(none) Value(0)\n+\n+EnumValue\n+Enum(compressed_debug_sections) String(zlib) Value(1)\n+\n+EnumValue\n+Enum(compressed_debug_sections) String(zlib-gnu) Value(2)\n+\n+gz\n+Common Driver\n+Generate compressed debug sections\n+\n+gz=\n+Common Driver Joined Enum(compressed_debug_sections)\n+-gz=<format>\tGenerate compressed debug sections in format <format>\n+\n h\n Driver Joined Separate\n "}, {"sha": "515f3415290adb320a9cf729cbd4f0ef09583836", "filename": "gcc/config.in", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d7cbd1b91cad56928674175507014d339689dc/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d7cbd1b91cad56928674175507014d339689dc/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=29d7cbd1b91cad56928674175507014d339689dc", "patch": "@@ -6,6 +6,18 @@\n #endif\n \n \n+/* Define to the assembler option to enable compressed debug sections. */\n+#ifndef USED_FOR_TARGET\n+#undef AS_COMPRESS_DEBUG_OPTION\n+#endif\n+\n+\n+/* Define to the assembler option to disable compressed debug sections. */\n+#ifndef USED_FOR_TARGET\n+#undef AS_NO_COMPRESS_DEBUG_OPTION\n+#endif\n+\n+\n /* Define as the number of bits in a byte, if `limits.h' doesn't. */\n #ifndef USED_FOR_TARGET\n #undef CHAR_BIT\n@@ -223,6 +235,13 @@\n #endif\n \n \n+/* Define to the level of your assembler's compressed debug section support.\n+   */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_COMPRESS_DEBUG\n+#endif\n+\n+\n /* Define if your assembler supports the DCI/ICI instructions. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_DCI\n@@ -1274,6 +1293,12 @@\n #endif\n \n \n+/* Define to the level of your linker's compressed debug section support. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_LD_COMPRESS_DEBUG\n+#endif\n+\n+\n /* Define if your linker supports --demangle option. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_LD_DEMANGLE\n@@ -1699,6 +1724,12 @@\n #endif\n \n \n+/* Define to the linker option to enable compressed debug sections. */\n+#ifndef USED_FOR_TARGET\n+#undef LD_COMPRESS_DEBUG_OPTION\n+#endif\n+\n+\n /* Define to the linker option to enable use of shared objects. */\n #ifndef USED_FOR_TARGET\n #undef LD_DYNAMIC_OPTION"}, {"sha": "10dfa4d4f18cfde1f69006c865998c9648eab91a", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d7cbd1b91cad56928674175507014d339689dc/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d7cbd1b91cad56928674175507014d339689dc/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=29d7cbd1b91cad56928674175507014d339689dc", "patch": "@@ -171,7 +171,8 @@ extern GTY(()) int darwin_ms_struct;\n     LINK_PLUGIN_SPEC \\\n     \"%{flto*:%<fcompare-debug*} \\\n     %{flto*} \\\n-    %l %X %{s} %{t} %{Z} %{u*} \\\n+    %l \" LINK_COMPRESS_DEBUG_SPEC \\\n+   \"%X %{s} %{t} %{Z} %{u*} \\\n     %{e*} %{r} \\\n     %{o*}%{!o:-o a.out} \\\n     %{!nostdlib:%{!nostartfiles:%S}} \\"}, {"sha": "0f3718f340a7291ecc7c8dce89ba61de0f9d4896", "filename": "gcc/config/i386/djgpp.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d7cbd1b91cad56928674175507014d339689dc/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d7cbd1b91cad56928674175507014d339689dc/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.h?ref=29d7cbd1b91cad56928674175507014d339689dc", "patch": "@@ -80,7 +80,8 @@ along with GCC; see the file COPYING3.  If not see\n #undef LINK_COMMAND_SPEC\n #define LINK_COMMAND_SPEC \\\n \"%{!fsyntax-only: \\\n-%{!c:%{!M:%{!MM:%{!E:%{!S:%(linker) %l %X %{o*} %{e*} %{N} %{n} \\\n+%{!c:%{!M:%{!MM:%{!E:%{!S:%(linker) %l \" LINK_COMPRESS_DEBUG_SPEC \\\n+\"%X %{o*} %{e*} %{N} %{n} \\\n \\t%{r} %{s} %{t} %{u*} %{z} %{Z}\\\n \\t%{!nostdlib:%{!nostartfiles:%S}}\\\n \\t%{static:} %{L*} %D %o\\"}, {"sha": "59f6abfe563d1b8999cc12a43e4dc6a8920da1b1", "filename": "gcc/configure", "status": "modified", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d7cbd1b91cad56928674175507014d339689dc/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d7cbd1b91cad56928674175507014d339689dc/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=29d7cbd1b91cad56928674175507014d339689dc", "patch": "@@ -26531,6 +26531,62 @@ $as_echo \"#define HAVE_AS_DEBUG_PREFIX_MAP 1\" >>confdefs.h\n fi\n fi\n \n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for compressed debug sections\" >&5\n+$as_echo_n \"checking assembler for compressed debug sections... \" >&6; }\n+if test \"${gcc_cv_as_compress_debug+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_compress_debug=no\n+  if test x$gcc_cv_as != x; then\n+    $as_echo '' > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags --compress-debug-sections -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\t# gas compiled without zlib cannot compress debug sections and warns\n+   # about it, but still exits successfully.  So check for this, too.\n+   if $gcc_cv_as --compress-debug-sections -o conftest.o conftest.s 2>&1 | grep -i warning > /dev/null\n+   then\n+     gcc_cv_as_compress_debug=0\n+   elif $gcc_cv_as --compress-debug-sections -o conftest.o conftest.s > /dev/null 2>&1\n+   then\n+     gcc_cv_as_compress_debug=1\n+     gcc_cv_as_compress_debug_option=\"--compress-debug-sections\"\n+     gcc_cv_as_no_compress_debug_option=\"--nocompress-debug-sections\"\n+   else\n+     gcc_cv_as_compress_debug=0\n+   # FIXME: Future gas versions will support ELF gABI style via\n+   # --compress-debug-sections[=type].\n+   fi\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_compress_debug\" >&5\n+$as_echo \"$gcc_cv_as_compress_debug\" >&6; }\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_AS_COMPRESS_DEBUG $gcc_cv_as_compress_debug\n+_ACEOF\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define AS_COMPRESS_DEBUG_OPTION \"$gcc_cv_as_compress_debug_option\"\n+_ACEOF\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define AS_NO_COMPRESS_DEBUG_OPTION \"$gcc_cv_as_no_compress_debug_option\"\n+_ACEOF\n+\n+\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for .lcomm with alignment\" >&5\n $as_echo_n \"checking assembler for .lcomm with alignment... \" >&6; }\n if test \"${gcc_cv_as_lcomm_with_alignment+set}\" = set; then :\n@@ -26936,6 +26992,66 @@ fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_ld_eh_gc_sections_bug\" >&5\n $as_echo \"$gcc_cv_ld_eh_gc_sections_bug\" >&6; }\n \n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking linker for compressed debug sections\" >&5\n+$as_echo_n \"checking linker for compressed debug sections... \" >&6; }\n+# gold/gld support compressed debug sections since binutils 2.19/2.21\n+if test $in_tree_ld = yes ; then\n+  gcc_cv_ld_compress_debug=0\n+  if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 19 -o \"$gcc_cv_gld_major_version\" -gt 2 \\\n+     && test $in_tree_ld_is_elf = yes && test $ld_is_gold = yes; then\n+    gcc_cv_ld_compress_debug=2\n+    gcc_cv_ld_compress_debug_option=\"--compress-debug-sections\"\n+  elif test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 21 -o \"$gcc_cv_gld_major_version\" -gt 2 \\\n+     && test $in_tree_ld_is_elf = yes; then\n+    gcc_cv_ld_compress_debug=1\n+  fi\n+elif echo \"$ld_ver\" | grep GNU > /dev/null; then\n+  gcc_cv_ld_compress_debug=1\n+  if test 0\"$ld_date\" -lt 20050308; then\n+    if test -n \"$ld_date\"; then\n+      # If there was date string, but was earlier than 2005-03-08, fail\n+      gcc_cv_ld_compress_debug=0\n+    elif test \"$ld_vers_major\" -lt 2; then\n+      gcc_cv_ld_compress_debug=0\n+    elif test \"$ld_vers_major\" -eq 2 -a \"$ld_vers_minor\" -lt 21; then\n+      gcc_cv_ld_compress_debug=0\n+    fi\n+  fi\n+  if test $ld_is_gold = yes; then\n+    gcc_cv_ld_compress_debug=2\n+    gcc_cv_ld_compress_debug_option=\"--compress-debug-sections\"\n+  fi\n+else\n+  case \"${target}\" in\n+    *-*-solaris2*)\n+      # Introduced in Solaris 11.2.\n+      if $gcc_cv_ld --help 2>&1 | grep -- '-z compress-sections' > /dev/null; then\n+        gcc_cv_ld_compress_debug=3\n+        gcc_cv_ld_compress_debug_option=\"-z compress-sections\"\n+      else\n+        gcc_cv_ld_compress_debug=0\n+      fi\n+      ;;\n+    *)\n+      # Assume linkers other than GNU ld don't support compessed debug\n+      # sections.\n+      gcc_cv_ld_compress_debug=0\n+      ;;\n+  esac\n+fi\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_LD_COMPRESS_DEBUG $gcc_cv_ld_compress_debug\n+_ACEOF\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define LD_COMPRESS_DEBUG_OPTION \"$gcc_cv_ld_compress_debug_option\"\n+_ACEOF\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_ld_compress_debug\" >&5\n+$as_echo \"$gcc_cv_ld_compress_debug\" >&6; }\n+\n # --------\n # UNSORTED\n # --------"}, {"sha": "6de2e94dbe653da3163608342365d974287ef766", "filename": "gcc/configure.ac", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d7cbd1b91cad56928674175507014d339689dc/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d7cbd1b91cad56928674175507014d339689dc/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=29d7cbd1b91cad56928674175507014d339689dc", "patch": "@@ -4406,6 +4406,30 @@ if test x\"$insn\" != x; then\n [Define if your assembler supports the --debug-prefix-map option.])])\n fi\n \n+gcc_GAS_CHECK_FEATURE([compressed debug sections],\n+  gcc_cv_as_compress_debug,,[--compress-debug-sections],,\n+  [# gas compiled without zlib cannot compress debug sections and warns\n+   # about it, but still exits successfully.  So check for this, too.\n+   if $gcc_cv_as --compress-debug-sections -o conftest.o conftest.s 2>&1 | grep -i warning > /dev/null\n+   then\n+     gcc_cv_as_compress_debug=0\n+   elif $gcc_cv_as --compress-debug-sections -o conftest.o conftest.s > /dev/null 2>&1\n+   then\n+     gcc_cv_as_compress_debug=1\n+     gcc_cv_as_compress_debug_option=\"--compress-debug-sections\"\n+     gcc_cv_as_no_compress_debug_option=\"--nocompress-debug-sections\"\n+   else\n+     gcc_cv_as_compress_debug=0\n+   # FIXME: Future gas versions will support ELF gABI style via\n+   # --compress-debug-sections[=type].\n+   fi])\n+AC_DEFINE_UNQUOTED(HAVE_AS_COMPRESS_DEBUG, $gcc_cv_as_compress_debug,\n+[Define to the level of your assembler's compressed debug section support.])\n+AC_DEFINE_UNQUOTED(AS_COMPRESS_DEBUG_OPTION, \"$gcc_cv_as_compress_debug_option\",\n+[Define to the assembler option to enable compressed debug sections.])\n+AC_DEFINE_UNQUOTED(AS_NO_COMPRESS_DEBUG_OPTION, \"$gcc_cv_as_no_compress_debug_option\",\n+[Define to the assembler option to disable compressed debug sections.])\n+\n gcc_GAS_CHECK_FEATURE([.lcomm with alignment], gcc_cv_as_lcomm_with_alignment,\n  ,,\n [.lcomm bar,4,16],,\n@@ -4712,6 +4736,60 @@ if test x$gcc_cv_ld_eh_gc_sections_bug = xyes; then\n fi\n AC_MSG_RESULT($gcc_cv_ld_eh_gc_sections_bug)\n \n+AC_MSG_CHECKING(linker for compressed debug sections)\n+# gold/gld support compressed debug sections since binutils 2.19/2.21\n+if test $in_tree_ld = yes ; then\n+  gcc_cv_ld_compress_debug=0\n+  if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 19 -o \"$gcc_cv_gld_major_version\" -gt 2 \\\n+     && test $in_tree_ld_is_elf = yes && test $ld_is_gold = yes; then\n+    gcc_cv_ld_compress_debug=2\n+    gcc_cv_ld_compress_debug_option=\"--compress-debug-sections\"\n+  elif test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 21 -o \"$gcc_cv_gld_major_version\" -gt 2 \\\n+     && test $in_tree_ld_is_elf = yes; then\n+    gcc_cv_ld_compress_debug=1\n+  fi\n+elif echo \"$ld_ver\" | grep GNU > /dev/null; then\n+  gcc_cv_ld_compress_debug=1\n+  if test 0\"$ld_date\" -lt 20050308; then\n+    if test -n \"$ld_date\"; then\n+      # If there was date string, but was earlier than 2005-03-08, fail\n+      gcc_cv_ld_compress_debug=0\n+    elif test \"$ld_vers_major\" -lt 2; then\n+      gcc_cv_ld_compress_debug=0\n+    elif test \"$ld_vers_major\" -eq 2 -a \"$ld_vers_minor\" -lt 21; then\n+      gcc_cv_ld_compress_debug=0\n+    fi\n+  fi\n+  if test $ld_is_gold = yes; then\n+    gcc_cv_ld_compress_debug=2\n+    gcc_cv_ld_compress_debug_option=\"--compress-debug-sections\"\n+  fi\n+else\n+changequote(,)dnl\n+  case \"${target}\" in\n+    *-*-solaris2*)\n+      # Introduced in Solaris 11.2.\n+      if $gcc_cv_ld --help 2>&1 | grep -- '-z compress-sections' > /dev/null; then\n+        gcc_cv_ld_compress_debug=3\n+        gcc_cv_ld_compress_debug_option=\"-z compress-sections\"\n+      else\n+        gcc_cv_ld_compress_debug=0\n+      fi\n+      ;;\n+    *)\n+      # Assume linkers other than GNU ld don't support compessed debug\n+      # sections.\n+      gcc_cv_ld_compress_debug=0\n+      ;;\n+  esac\n+changequote([,])dnl\n+fi\n+AC_DEFINE_UNQUOTED(HAVE_LD_COMPRESS_DEBUG, $gcc_cv_ld_compress_debug,\n+[Define to the level of your linker's compressed debug section support.])\n+AC_DEFINE_UNQUOTED(LD_COMPRESS_DEBUG_OPTION, \"$gcc_cv_ld_compress_debug_option\",\n+[Define to the linker option to enable compressed debug sections.])\n+AC_MSG_RESULT($gcc_cv_ld_compress_debug)\n+\n # --------\n # UNSORTED\n # --------"}, {"sha": "51f732d5a653cbc4a9f5a855f97ba2275ea205ed", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d7cbd1b91cad56928674175507014d339689dc/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d7cbd1b91cad56928674175507014d339689dc/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=29d7cbd1b91cad56928674175507014d339689dc", "patch": "@@ -344,7 +344,7 @@ Objective-C and Objective-C++ Dialects}.\n -g  -g@var{level}  -gtoggle  -gcoff  -gdwarf-@var{version} @gol\n -ggdb  -grecord-gcc-switches  -gno-record-gcc-switches @gol\n -gstabs  -gstabs+  -gstrict-dwarf  -gno-strict-dwarf @gol\n--gvms  -gxcoff  -gxcoff+ @gol\n+-gvms  -gxcoff  -gxcoff+ -gz@r{[}=@var{type}@r{]} @gol\n -fno-merge-debug-strings -fno-dwarf2-cfi-asm @gol\n -fdebug-prefix-map=@var{old}=@var{new} @gol\n -femit-struct-debug-baseonly -femit-struct-debug-reduced @gol\n@@ -5289,6 +5289,18 @@ DWARF extensions from later standard versions is allowed.\n Allow using extensions of later DWARF standard version than selected with\n @option{-gdwarf-@var{version}}.\n \n+@item -gz@r{[}=@var{type}@r{]}\n+@opindex gz\n+Produce compressed debug sections in DWARF format, if that is supported.\n+If @var{type} is not given, the default type depends on the capabilities\n+of the assembler and linker used.  @var{type} may be one of\n+@option{none} (don't compress debug sections), @option{zlib} (use zlib\n+compression in ELF gABI format), or @option{zlib-gnu} (use zlib\n+compression in traditional GNU format).  If the linker doesn't support\n+writing compressed debug sections, the option is rejected.  Otherwise,\n+if the assembler does not support them, @option{-gz} is silently ignored\n+when producing object files.\n+\n @item -gvms\n @opindex gvms\n Produce debugging information in Alpha/VMS debug format (if that is"}, {"sha": "6cd08eab8b55ca3503b9537df97fd07b3e7e2f8d", "filename": "gcc/gcc.c", "status": "modified", "additions": 55, "deletions": 2, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d7cbd1b91cad56928674175507014d339689dc/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d7cbd1b91cad56928674175507014d339689dc/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=29d7cbd1b91cad56928674175507014d339689dc", "patch": "@@ -597,6 +597,31 @@ proper position among the other output files.  */\n #endif\n #endif\n \n+/* Linker options for compressed debug sections.  */\n+#if HAVE_LD_COMPRESS_DEBUG == 0\n+/* No linker support.  */\n+#define LINK_COMPRESS_DEBUG_SPEC \\\n+\t\" %{gz*:%e-gz is not supported in this configuration} \"\n+#elif HAVE_LD_COMPRESS_DEBUG == 1\n+/* GNU style on input, GNU ld options.  Reject, not useful.  */\n+#define LINK_COMPRESS_DEBUG_SPEC \\\n+\t\" %{gz*:%e-gz is not supported in this configuration} \"\n+#elif HAVE_LD_COMPRESS_DEBUG == 2\n+/* GNU style, GNU gold options.  */\n+#define LINK_COMPRESS_DEBUG_SPEC \\\n+\t\" %{gz|gz=zlib-gnu:\" LD_COMPRESS_DEBUG_OPTION \"=zlib}\" \\\n+\t\" %{gz=none:\"        LD_COMPRESS_DEBUG_OPTION \"=none}\" \\\n+\t\" %{gz=zlib:%e-gz=zlib is not supported in this configuration} \"\n+#elif HAVE_LD_COMPRESS_DEBUG == 3\n+/* ELF gABI style.  */\n+#define LINK_COMPRESS_DEBUG_SPEC \\\n+\t\" %{gz|gz=zlib:\"  LD_COMPRESS_DEBUG_OPTION \"=zlib}\" \\\n+\t\" %{gz=none:\"\t  LD_COMPRESS_DEBUG_OPTION \"=none}\" \\\n+\t\" %{gz=zlib-gnu:\" LD_COMPRESS_DEBUG_OPTION \"=zlib-gnu} \"\n+#else\n+#error Unknown value for HAVE_LD_COMPRESS_DEBUG.\n+#endif\n+\n /* config.h can define LIBGCC_SPEC to override how and when libgcc.a is\n    included.  */\n #ifndef LIBGCC_SPEC\n@@ -631,6 +656,33 @@ proper position among the other output files.  */\n #define ASM_MAP \"\"\n #endif\n \n+/* Assembler options for compressed debug sections.  */\n+#if HAVE_LD_COMPRESS_DEBUG < 2\n+/* Reject if the linker cannot write compressed debug sections.  */\n+#define ASM_COMPRESS_DEBUG_SPEC \\\n+\t\" %{gz*:%e-gz is not supported in this configuration} \"\n+#else /* HAVE_LD_COMPRESS_DEBUG >= 2 */\n+#if HAVE_AS_COMPRESS_DEBUG == 0\n+/* No assembler support.  Ignore silently.  */\n+#define ASM_COMPRESS_DEBUG_SPEC \\\n+\t\" %{gz*:} \"\n+#elif HAVE_AS_COMPRESS_DEBUG == 1\n+/* GNU style, GNU as options.  */\n+#define ASM_COMPRESS_DEBUG_SPEC \\\n+\t\" %{gz|gz=zlib-gnu:\" AS_COMPRESS_DEBUG_OPTION \"}\" \\\n+\t\" %{gz=none:\"        AS_NO_COMPRESS_DEBUG_OPTION \"}\" \\\n+\t\" %{gz=zlib:%e-gz=zlib is not supported in this configuration} \"\n+#elif HAVE_AS_COMPRESS_DEBUG == 2\n+/* ELF gABI style.  */\n+#define ASM_COMPRESS_DEBUG_SPEC \\\n+\t\" %{gz|gz=zlib:\"  AS_COMPRESS_DEBUG_OPTION \"=zlib}\" \\\n+\t\" %{gz=none:\"\t  AS_COMPRESS_DEBUG_OPTION \"=none}\" \\\n+\t\" %{gz=zlib-gnu:\" AS_COMPRESS_DEBUG_OPTION \"=zlib-gnu} \"\n+#else\n+#error Unknown value for HAVE_AS_COMPRESS_DEBUG.\n+#endif\n+#endif /* HAVE_LD_COMPRESS_DEBUG >= 2 */\n+\n /* Define ASM_DEBUG_SPEC to be a spec suitable for translating '-g'\n    to the assembler.  */\n #ifndef ASM_DEBUG_SPEC\n@@ -761,8 +813,8 @@ proper position among the other output files.  */\n     LINK_PLUGIN_SPEC \\\n    \"%{flto|flto=*:%<fcompare-debug*} \\\n     %{flto} %{flto=*} %l \" LINK_PIE_SPEC \\\n-   \"%{fuse-ld=*:-fuse-ld=%*}\\\n-    %X %{o*} %{e*} %{N} %{n} %{r}\\\n+   \"%{fuse-ld=*:-fuse-ld=%*} \" LINK_COMPRESS_DEBUG_SPEC \\\n+   \"%X %{o*} %{e*} %{N} %{n} %{r}\\\n     %{s} %{t} %{u*} %{z} %{Z} %{!nostdlib:%{!nostartfiles:%S}} \" VTABLE_VERIFICATION_SPEC \" \\\n     %{static:} %{L*} %(mfwrap) %(link_libgcc) \" SANITIZER_EARLY_SPEC \" %o\\\n     %{fopenmp|ftree-parallelize-loops=*:%:include(libgomp.spec)%(link_gomp)}\\\n@@ -885,6 +937,7 @@ static const char *asm_options =\n    to the assembler equivalents.  */\n \"%{v} %{w:-W} %{I*} \"\n #endif\n+ASM_COMPRESS_DEBUG_SPEC\n \"%a %Y %{c:%W{o*}%{!o*:-o %w%b%O}}%{!c:-o %d%w%u%O}\";\n \n static const char *invoke_as ="}, {"sha": "419a07496d20501935da9cdd0f28dade8c6a0363", "filename": "gcc/opts.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d7cbd1b91cad56928674175507014d339689dc/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d7cbd1b91cad56928674175507014d339689dc/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=29d7cbd1b91cad56928674175507014d339689dc", "patch": "@@ -1879,6 +1879,11 @@ common_handle_option (struct gcc_options *opts,\n \t\t       loc);\n       break;\n \n+    case OPT_gz:\n+    case OPT_gz_:\n+      /* Handled completely via specs.  */\n+      break;\n+\n     case OPT_pedantic_errors:\n       dc->pedantic_errors = 1;\n       control_warning_option (OPT_Wpedantic, DK_ERROR, value,"}]}