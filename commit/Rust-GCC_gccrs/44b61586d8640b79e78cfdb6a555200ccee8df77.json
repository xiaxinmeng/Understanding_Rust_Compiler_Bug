{"sha": "44b61586d8640b79e78cfdb6a555200ccee8df77", "node_id": "C_kwDOANBUbNoAKDQ0YjYxNTg2ZDg2NDBiNzllNzhjZmRiNmE1NTUyMDBjY2VlOGRmNzc", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-10-07T13:26:01Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-10-07T13:26:01Z"}, "message": "Fix access node merging\n\ngcc/ChangeLog:\n\n2021-10-07  Jan Hubicka  <hubicka@ucw.cz>\n\n\tPR ipa/102581\n\t* ipa-modref-tree.h (modref_access_node::contains_p): Handle offsets\n\tbetter.\n\t(modref_access_node::try_merge_with): Add sanity check that there\n\tare no redundant entries in the list.\n\ngcc/testsuite/ChangeLog:\n\n2021-10-07  Jan Hubicka  <hubicka@ucw.cz>\n\n\t* g++.dg/torture/pr102581.C: New test.", "tree": {"sha": "280264cbb63b2964235bcfec1408eba79dc479dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/280264cbb63b2964235bcfec1408eba79dc479dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44b61586d8640b79e78cfdb6a555200ccee8df77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44b61586d8640b79e78cfdb6a555200ccee8df77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44b61586d8640b79e78cfdb6a555200ccee8df77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44b61586d8640b79e78cfdb6a555200ccee8df77/comments", "author": null, "committer": null, "parents": [{"sha": "348b426be3fc99453b42e79a18331c7bf24ee0dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/348b426be3fc99453b42e79a18331c7bf24ee0dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/348b426be3fc99453b42e79a18331c7bf24ee0dc"}], "stats": {"total": 59, "additions": 57, "deletions": 2}, "files": [{"sha": "8e9b89b3e2c8fffebab1b421e9cf9dd752e1b371", "filename": "gcc/ipa-modref-tree.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44b61586d8640b79e78cfdb6a555200ccee8df77/gcc%2Fipa-modref-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44b61586d8640b79e78cfdb6a555200ccee8df77/gcc%2Fipa-modref-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref-tree.h?ref=44b61586d8640b79e78cfdb6a555200ccee8df77", "patch": "@@ -110,8 +110,11 @@ struct GTY(()) modref_access_node\n \t       if (!a.parm_offset_known)\n \t\t return false;\n \t       /* Accesses are never below parm_offset, so look\n-\t\t  for smaller offset.  */\n-\t       if (!known_le (parm_offset, a.parm_offset))\n+\t\t  for smaller offset.\n+\t\t  If access ranges are known still allow merging\n+\t\t  when bit offsets comparsion passes.  */\n+\t       if (!known_le (parm_offset, a.parm_offset)\n+\t\t   && !range_info_useful_p ())\n \t\t return false;\n \t       aoffset_adj = (a.parm_offset - parm_offset)\n \t\t\t     << LOG2_BITS_PER_UNIT;\n@@ -618,6 +621,7 @@ struct GTY((user)) modref_ref_node\n \t    found = true;\n \t  if (!found && n->merge (*a, false))\n \t    found = restart = true;\n+\t  gcc_checking_assert (found || !a->merge (*n, false));\n \t  if (found)\n \t    {\n \t      accesses->unordered_remove (i);"}, {"sha": "7f172d088b8327ba16ed7c9cad319f75f43365ac", "filename": "gcc/testsuite/g++.dg/torture/pr102581.C", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44b61586d8640b79e78cfdb6a555200ccee8df77/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr102581.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44b61586d8640b79e78cfdb6a555200ccee8df77/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr102581.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr102581.C?ref=44b61586d8640b79e78cfdb6a555200ccee8df77", "patch": "@@ -0,0 +1,51 @@\n+// { dg-do compile }\n+/* { dg-additional-options \"-fno-strict-aliasing\" } */\n+enum VkStructureType {\n+  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT,\n+  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR\n+} typedef VkPhysicalDeviceSparseProperties;\n+struct VkPhysicalDeviceProperties {\n+  int apiVersion;\n+  VkPhysicalDeviceSparseProperties sparseProperties;\n+};\n+typedef struct {\n+  VkStructureType sType;\n+  int *pPhysicalDevices;\n+} VkPhysicalDeviceFeatures2;\n+typedef struct VkPhysicalDeviceProperties2 {\n+  VkStructureType sType;\n+  void *pNext;\n+} VkPhysicalDeviceMemoryProperties2;\n+struct VulkanVersion {\n+  int major;\n+  int minor;\n+  int patch;\n+};\n+int make_vulkan_version_version;\n+VulkanVersion make_vulkan_version() {\n+  return {make_vulkan_version_version, make_vulkan_version_version,\n+          make_vulkan_version_version};\n+}\n+struct AppGpu {\n+  int &inst;\n+  int id;\n+  int *phys_device = nullptr;\n+  VulkanVersion api_version{};\n+  VkPhysicalDeviceProperties props{};\n+  VkPhysicalDeviceProperties2 props2{};\n+  int memory_props{};\n+  VkPhysicalDeviceMemoryProperties2 memory_props2{};\n+  int features{};\n+  VkPhysicalDeviceFeatures2 features2{};\n+  int *dev = nullptr;\n+  int enabled_features{};\n+  int AppGpu_phys_device;\n+  int AppGpu_inst;\n+  AppGpu() : inst(AppGpu_inst), id() {\n+    api_version = make_vulkan_version();\n+    props2.sType = memory_props2.sType = features2.sType =\n+        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR;\n+  }\n+};\n+int\n+main() { AppGpu(); return 0; }"}]}