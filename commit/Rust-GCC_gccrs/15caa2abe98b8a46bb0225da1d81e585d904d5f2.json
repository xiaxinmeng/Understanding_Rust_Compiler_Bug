{"sha": "15caa2abe98b8a46bb0225da1d81e585d904d5f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVjYWEyYWJlOThiOGE0NmJiMDIyNWRhMWQ4MWU1ODVkOTA0ZDVmMg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-09-26T11:55:17Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-09-26T11:55:17Z"}, "message": "re PR tree-optimization/30375 (tree-ssa-dse incorrectly removes struct initialization)\n\n2007-09-26  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/30375\n\tPR tree-optimization/33560\n\t* tree-ssa-dse.c (get_use_of_stmt_lhs): Give up on uses\n\twith calls.\n\n\tRevert\n\t2006-05-22  Aldy Hernandez  <aldyh@redhat.com>\n\n        * tree-ssa-dse.c (aggregate_vardecl_d): New.\n        (dse_global_data): Add aggregate_vardecl field.\n        (dse_possible_dead_store_p): New.\n        Add prev_defvar variable.\n        Allow immediate uses and previous immediate uses to differ\n        if they are setting different parts of the whole.\n        (get_aggregate_vardecl): New.\n        (dse_record_partial_aggregate_store): New.\n        (dse_whole_aggregate_clobbered_p): New.\n        (dse_partial_kill_p): New.\n        Call dse_maybe_record_aggregate_store().\n        When checking whether a STMT and its USE_STMT refer to the\n        same memory address, check also for partial kills that clobber\n        the whole.\n        Move some variable definitions to the block where they are used.\n        (aggregate_vardecl_hash): New.\n        (aggregate_vardecl_eq): New.\n        (aggregate_vardecl_free): New.\n        (aggregate_whole_store_p): New.\n        (tree_ssa_dse): Initialize and free aggregate_vardecl.\n        Mark which aggregate stores we care about.\n\n\t* gcc.dg/tree-ssa/complex-4.c: XFAIL.\n\t* gcc.dg/tree-ssa/complex-5.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-dse-9.c: Likewise.\n\t* gcc.dg/torture/pr30375.c: New testcase.\n\t* gcc.dg/torture/pr33560.c: New testcase.\n\t* gcc.dg/tree-ssa/pr30375.c: Likewise.\n\nFrom-SVN: r128810", "tree": {"sha": "f14afdbb50855b11471a4e6e7fc81ee87d8849f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f14afdbb50855b11471a4e6e7fc81ee87d8849f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15caa2abe98b8a46bb0225da1d81e585d904d5f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15caa2abe98b8a46bb0225da1d81e585d904d5f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15caa2abe98b8a46bb0225da1d81e585d904d5f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15caa2abe98b8a46bb0225da1d81e585d904d5f2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "43943e4035dfaf885484faa9a1f71ec28f4677c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43943e4035dfaf885484faa9a1f71ec28f4677c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43943e4035dfaf885484faa9a1f71ec28f4677c9"}], "stats": {"total": 468, "additions": 160, "deletions": 308}, "files": [{"sha": "f5fb4a62c082509e4925519b7d830ffa592a0acb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15caa2abe98b8a46bb0225da1d81e585d904d5f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15caa2abe98b8a46bb0225da1d81e585d904d5f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=15caa2abe98b8a46bb0225da1d81e585d904d5f2", "patch": "@@ -1,3 +1,35 @@\n+2007-09-26  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/30375\n+\tPR tree-optimization/33560\n+\t* tree-ssa-dse.c (get_use_of_stmt_lhs): Give up on uses\n+\twith calls.\n+\n+\tRevert\n+\t2006-05-22  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-dse.c (aggregate_vardecl_d): New.\n+\t(dse_global_data): Add aggregate_vardecl field.\n+\t(dse_possible_dead_store_p): New.\n+\tAdd prev_defvar variable.\n+\tAllow immediate uses and previous immediate uses to differ\n+\tif they are setting different parts of the whole.\n+\t(get_aggregate_vardecl): New.\n+\t(dse_record_partial_aggregate_store): New.\n+\t(dse_whole_aggregate_clobbered_p): New.\n+\t(dse_partial_kill_p): New.\n+\tCall dse_maybe_record_aggregate_store().\n+\tWhen checking whether a STMT and its USE_STMT refer to the\n+\tsame memory address, check also for partial kills that clobber\n+\tthe whole.\n+\tMove some variable definitions to the block where they are used.\n+\t(aggregate_vardecl_hash): New.\n+\t(aggregate_vardecl_eq): New.\n+\t(aggregate_vardecl_free): New.\n+\t(aggregate_whole_store_p): New.\n+\t(tree_ssa_dse): Initialize and free aggregate_vardecl.\n+\tMark which aggregate stores we care about.\n+\n 2007-09-25  DJ Delorie  <dj@redhat.com>\n \n \tPR target/33551"}, {"sha": "c43dad2773fee812cbf9db2f2d6170009b648686", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15caa2abe98b8a46bb0225da1d81e585d904d5f2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15caa2abe98b8a46bb0225da1d81e585d904d5f2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=15caa2abe98b8a46bb0225da1d81e585d904d5f2", "patch": "@@ -1,3 +1,14 @@\n+2007-09-26  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/30375\n+\tPR tree-optimization/33560\n+\t* gcc.dg/tree-ssa/complex-4.c: XFAIL.\n+\t* gcc.dg/tree-ssa/complex-5.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-dse-9.c: Likewise.\n+\t* gcc.dg/torture/pr30375.c: New testcase.\n+\t* gcc.dg/torture/pr33560.c: New testcase.\n+\t* gcc.dg/tree-ssa/pr30375.c: Likewise.\n+\n 2007-09-25  Simon Martin  <simartin@users.sourceforge.net>\n \n \tPR c++/33207"}, {"sha": "ea63f97c98d26f19e678fffb02c55f7f3b9f6da1", "filename": "gcc/testsuite/gcc.dg/torture/pr30375.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15caa2abe98b8a46bb0225da1d81e585d904d5f2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr30375.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15caa2abe98b8a46bb0225da1d81e585d904d5f2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr30375.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr30375.c?ref=15caa2abe98b8a46bb0225da1d81e585d904d5f2", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-options \"--param max-aliased-vops=0\" } */\n+\n+typedef struct _s {\n+    int a;\n+    int b;\n+    int c;\n+    int d;\n+} s;\n+\n+extern void abort(void);\n+\n+void __attribute__((noinline)) g(s *p)\n+{\n+  if (p->d != 0)\n+    abort ();\n+}\n+\n+char *c = (void*)0;\n+void __attribute__((noinline)) f(void) { if (c) *c = 1; }\n+\n+void test_signed_msg_encoding(void)\n+{\n+    s signInfo = { sizeof(signInfo), 0 };\n+\n+    signInfo.b = 1;\n+    signInfo.c = 0;\n+    g(&signInfo);\n+    signInfo.d = 1;\n+    f();\n+}\n+\n+int main()\n+{\n+  test_signed_msg_encoding ();\n+  test_signed_msg_encoding ();\n+  return 0;\n+}"}, {"sha": "5b2359b3dc0a9825aa770ddb177830a1e23dd8bd", "filename": "gcc/testsuite/gcc.dg/torture/pr33560.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15caa2abe98b8a46bb0225da1d81e585d904d5f2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr33560.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15caa2abe98b8a46bb0225da1d81e585d904d5f2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr33560.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr33560.c?ref=15caa2abe98b8a46bb0225da1d81e585d904d5f2", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-options \"--param max-aliased-vops=0\" } */\n+\n+struct T\n+{\n+  int a, b;\n+} t;\n+\n+__attribute__((noinline)) struct T *f (struct T *p)\n+{\n+  struct T *q = __builtin_malloc (sizeof (struct T));\n+  *q = *p;\n+  return q;\n+}\n+\n+int main (void)\n+{\n+  struct T *p;\n+\n+  t.a = 1;\n+  t.b = 2;\n+  p = f (&t);\n+  t.a = 3;\n+\n+  if (p->a != 1)\n+    __builtin_abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "fa2ad5816039558184d39edeaec59dc09dc7b7ea", "filename": "gcc/testsuite/gcc.dg/tree-ssa/complex-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15caa2abe98b8a46bb0225da1d81e585d904d5f2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcomplex-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15caa2abe98b8a46bb0225da1d81e585d904d5f2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcomplex-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcomplex-4.c?ref=15caa2abe98b8a46bb0225da1d81e585d904d5f2", "patch": "@@ -10,5 +10,5 @@ int f(void)\n   return g(&t);\n }\n \n-/* { dg-final { scan-tree-dump-times \"__complex__\" 0 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__complex__\" 0 \"optimized\" { xfail *-*-* } } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "dec394a5f2d7fcf89cedbdc4595d33300c17ece8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/complex-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15caa2abe98b8a46bb0225da1d81e585d904d5f2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcomplex-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15caa2abe98b8a46bb0225da1d81e585d904d5f2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcomplex-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcomplex-5.c?ref=15caa2abe98b8a46bb0225da1d81e585d904d5f2", "patch": "@@ -8,5 +8,5 @@ int f(void)\n  __imag__ t = 2;\n }\n \n-/* { dg-final { scan-tree-dump-times \"__complex__\" 0 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__complex__\" 0 \"optimized\" { xfail *-*-* } } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "33c3f5c530c9fb472a656555285dc01c4f9e8f63", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr30375.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15caa2abe98b8a46bb0225da1d81e585d904d5f2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr30375.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15caa2abe98b8a46bb0225da1d81e585d904d5f2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr30375.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr30375.c?ref=15caa2abe98b8a46bb0225da1d81e585d904d5f2", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-dse\" } */\n+\n+typedef struct _s {\n+    int a;\n+    int b;\n+    int c;\n+    int d;\n+} s;\n+\n+extern void g(s*);\n+extern void f(void);\n+\n+void test_signed_msg_encoding(void)\n+{\n+    s signInfo = { sizeof(signInfo), 0 };\n+\n+    signInfo.b = 1;\n+    signInfo.c = 0;\n+    g(&signInfo);\n+    signInfo.d = 0;\n+    f();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"signInfo = {};\" 1 \"dse1\" } } */\n+/* { dg-final { cleanup-tree-dump \"dse*\" } } */"}, {"sha": "4cb67f0ae2311221cb6c6601773a71bf503c788f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dse-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15caa2abe98b8a46bb0225da1d81e585d904d5f2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15caa2abe98b8a46bb0225da1d81e585d904d5f2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-9.c?ref=15caa2abe98b8a46bb0225da1d81e585d904d5f2", "patch": "@@ -10,5 +10,5 @@ foo ()\n }\n \n /* We should eliminate the first assignment.  */\n-/* { dg-final { scan-tree-dump-times \"VDEF\" 2 \"dse1\"} } */\n+/* { dg-final { scan-tree-dump-times \"VDEF\" 2 \"dse1\" { xfail *-*-* } } } */\n /* { dg-final { cleanup-tree-dump \"dse1\" } } */"}, {"sha": "d7453dd30d43e34f4f844ab31fdde636711c599d", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 20, "deletions": 305, "changes": 325, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15caa2abe98b8a46bb0225da1d81e585d904d5f2/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15caa2abe98b8a46bb0225da1d81e585d904d5f2/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=15caa2abe98b8a46bb0225da1d81e585d904d5f2", "patch": "@@ -33,8 +33,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-dump.h\"\n #include \"domwalk.h\"\n #include \"flags.h\"\n-#include \"hashtab.h\"\n-#include \"sbitmap.h\"\n \n /* This file implements dead store elimination.\n \n@@ -66,26 +64,6 @@ along with GCC; see the file COPYING3.  If not see\n    the CFG.  */\n    \n \n-/* Given an aggregate, this records the parts of it which have been\n-   stored into.  */\n-struct aggregate_vardecl_d\n-{\n-  /* The aggregate.  */\n-  tree decl;\n-\n-  /* Some aggregates are too big for us to handle or never get stored\n-     to as a whole.  If this field is TRUE, we don't care about this\n-     aggregate.  */\n-  bool ignore;\n-\n-  /* Number of parts in the whole.  */\n-  unsigned nparts;\n-  \n-  /* A bitmap of parts of the aggregate that have been set.  If part N\n-     of an aggregate has been stored to, bit N should be on.  */\n-  sbitmap parts_set;\n-};\n-\n struct dse_global_data\n {\n   /* This is the global bitmap for store statements.\n@@ -94,10 +72,6 @@ struct dse_global_data\n      that we want to record, set the bit corresponding to the statement's\n      unique ID in this bitmap.  */\n   bitmap stores;\n-\n-  /* A hash table containing the parts of an aggregate which have been\n-     stored to.  */\n-  htab_t aggregate_vardecl;\n };\n \n /* We allocate a bitmap-per-block for stores which are encountered\n@@ -126,7 +100,6 @@ static void dse_optimize_stmt (struct dom_walk_data *,\n static void dse_record_phis (struct dom_walk_data *, basic_block);\n static void dse_finalize_block (struct dom_walk_data *, basic_block);\n static void record_voperand_set (bitmap, bitmap *, unsigned int);\n-static void dse_record_partial_aggregate_store (tree, struct dse_global_data *);\n \n static unsigned max_stmt_uid;\t/* Maximal uid of a statement.  Uids to phi\n \t\t\t\t   nodes are assigned using the versions of\n@@ -264,7 +237,10 @@ get_use_of_stmt_lhs (tree stmt,\n   single_imm_use (DEF_FROM_PTR (def_p), use_p, use_stmt);\n   gcc_assert (*use_p != NULL_USE_OPERAND_P);\n   first_use_p = use_p;\n-  if (TREE_CODE (*use_stmt) != GIMPLE_MODIFY_STMT)\n+\n+  /* If the use is not simple, give up.  */\n+  if (TREE_CODE (*use_stmt) != GIMPLE_MODIFY_STMT\n+      || get_call_expr_in (*use_stmt))\n     return NULL_TREE;\n \n   do\n@@ -283,7 +259,8 @@ get_use_of_stmt_lhs (tree stmt,\n \treturn NULL_TREE;\n       single_imm_use (DEF_FROM_PTR (def_p), use_p, use_stmt);\n       gcc_assert (*use_p != NULL_USE_OPERAND_P);\n-      if (TREE_CODE (*use_stmt) != GIMPLE_MODIFY_STMT)\n+      if (TREE_CODE (*use_stmt) != GIMPLE_MODIFY_STMT\n+\t  || get_call_expr_in (*use_stmt))\n \treturn NULL_TREE;\n     }\n   while (1);\n@@ -372,28 +349,14 @@ dse_possible_dead_store_p (tree stmt,\n \t}\n       else if (temp != *use_stmt)\n \t{\n-\t  /* The immediate use and the previously found immediate use\n-\t     must be the same, except... if they're uses of different\n-\t     parts of the whole.  */\n-\t  if (TREE_CODE (defvar) == SSA_NAME\n-\t      && TREE_CODE (SSA_NAME_VAR (defvar)) == STRUCT_FIELD_TAG\n-\t      && TREE_CODE (prev_defvar) == SSA_NAME\n-\t      && TREE_CODE (SSA_NAME_VAR (prev_defvar)) == STRUCT_FIELD_TAG\n-\t      && (SFT_PARENT_VAR (SSA_NAME_VAR (defvar))\n-\t\t  == SFT_PARENT_VAR (SSA_NAME_VAR (prev_defvar))))\n-\t    ;\n-\t  else\n-\t    {\n-\t      fail = true;\n-\t      break;\n-\t    }\n+\t  fail = true;\n+\t  break;\n \t}\n     }\n \n   if (fail)\n     {\n       record_voperand_set (dse_gd->stores, &bd->stores, ann->uid);\n-      dse_record_partial_aggregate_store (stmt, dse_gd);\n       return false;\n     }\n \n@@ -424,180 +387,6 @@ dse_possible_dead_store_p (tree stmt,\n }\n \n \n-/* Given a DECL, return its AGGREGATE_VARDECL_D entry.  If no entry is\n-   found and INSERT is TRUE, add a new entry.  */\n-\n-static struct aggregate_vardecl_d *\n-get_aggregate_vardecl (tree decl, struct dse_global_data *dse_gd, bool insert)\n-{\n-  struct aggregate_vardecl_d av, *av_p;\n-  void **slot;\n-\n-  av.decl = decl;\n-  slot = htab_find_slot (dse_gd->aggregate_vardecl, &av, insert ? INSERT : NO_INSERT);\n-\n-\n-  /* Not found, and we don't want to insert.  */\n-  if (slot == NULL)\n-    return NULL;\n-\n-  /* Create new entry.  */\n-  if (*slot == NULL)\n-    {\n-      av_p = XNEW (struct aggregate_vardecl_d);\n-      av_p->decl = decl;\n-\n-      /* Record how many parts the whole has.  */\n-      if (TREE_CODE (TREE_TYPE (decl)) == COMPLEX_TYPE)\n-\tav_p->nparts = 2;\n-      else if (TREE_CODE (TREE_TYPE (decl)) == RECORD_TYPE)\n-\t{\n-\t  tree fields;\n-\n-\t  /* Count the number of fields.  */\n-\t  fields = TYPE_FIELDS (TREE_TYPE (decl));\n-\t  av_p->nparts = 0;\n-\t  while (fields)\n-\t    {\n-\t      av_p->nparts++;\n-\t      fields = TREE_CHAIN (fields);\n-\t    }\n-\t}\n-      else\n-\tabort ();\n-\n-      av_p->ignore = true;\n-      av_p->parts_set = sbitmap_alloc (HOST_BITS_PER_LONG);\n-      sbitmap_zero (av_p->parts_set);\n-      *slot = av_p;\n-    }\n-  else\n-    av_p = (struct aggregate_vardecl_d *) *slot;\n-\n-  return av_p;\n-}\n-\n-\n-/* If STMT is a partial store into an aggregate, record which part got set.  */\n-\n-static void\n-dse_record_partial_aggregate_store (tree stmt, struct dse_global_data *dse_gd)\n-{\n-  tree lhs, decl;\n-  enum tree_code code;\n-  struct aggregate_vardecl_d *av_p;\n-  int part;\n-\n-  gcc_assert (TREE_CODE (stmt) == GIMPLE_MODIFY_STMT);\n-\n-  lhs = GIMPLE_STMT_OPERAND (stmt, 0);\n-  code = TREE_CODE (lhs);\n-  if (code != IMAGPART_EXPR\n-      && code != REALPART_EXPR\n-      && code != COMPONENT_REF)\n-    return;\n-  decl = TREE_OPERAND (lhs, 0);\n-  /* Early bail on things like nested COMPONENT_REFs.  */\n-  if (TREE_CODE (decl) != VAR_DECL)\n-    return;\n-  /* Early bail on unions.  */\n-  if (code == COMPONENT_REF\n-      && TREE_CODE (TREE_TYPE (TREE_OPERAND (lhs, 0))) != RECORD_TYPE)\n-    return;\n-  \n-  av_p = get_aggregate_vardecl (decl, dse_gd, /*insert=*/false);\n-  /* Run away, this isn't an aggregate we care about.  */\n-  if (!av_p || av_p->ignore)\n-    return;\n-\n-  switch (code)\n-    {\n-    case IMAGPART_EXPR:\n-      part = 0;\n-      break;\n-    case REALPART_EXPR:\n-      part = 1;\n-      break;\n-    case COMPONENT_REF:\n-      {\n-\ttree orig_field, fields;\n-\ttree record_type = TREE_TYPE (TREE_OPERAND (lhs, 0));\n-\n-\t/* Get FIELD_DECL.  */\n-\torig_field = TREE_OPERAND (lhs, 1);\n-\n-\t/* FIXME: Eeech, do this more efficiently.  Perhaps\n-\t   calculate bit/byte offsets.  */\n-\tpart = -1;\n-\tfields = TYPE_FIELDS (record_type);\n-\twhile (fields)\n-\t  {\n-\t    ++part;\n-\t    if (fields == orig_field)\n-\t      break;\n-\t    fields = TREE_CHAIN (fields);\n-\t  }\n-\tgcc_assert (part >= 0);\n-      }\n-      break;\n-    default:\n-      return;\n-    }\n-\n-  /* Record which part was set.  */\n-  SET_BIT (av_p->parts_set, part);\n-}\n-\n-\n-/* Return TRUE if all parts in an AGGREGATE_VARDECL have been set.  */\n-\n-static inline bool\n-dse_whole_aggregate_clobbered_p (struct aggregate_vardecl_d *av_p)\n-{\n-  unsigned int i;\n-  sbitmap_iterator sbi;\n-  int nbits_set = 0;\n-\n-  /* Count the number of partial stores (bits set).  */\n-  EXECUTE_IF_SET_IN_SBITMAP (av_p->parts_set, 0, i, sbi)\n-    nbits_set++;\n-  return ((unsigned) nbits_set == av_p->nparts);\n-}\n-\n-\n-/* Return TRUE if STMT is a store into a whole aggregate whose parts we\n-   have already seen and recorded.  */\n-\n-static bool\n-dse_partial_kill_p (tree stmt, struct dse_global_data *dse_gd)\n-{\n-  tree decl;\n-  struct aggregate_vardecl_d *av_p;\n-\n-  /* Make sure this is a store into the whole.  */\n-  if (TREE_CODE (stmt) == GIMPLE_MODIFY_STMT)\n-    {\n-      enum tree_code code;\n-\n-      decl = GIMPLE_STMT_OPERAND (stmt, 0);\n-      code = TREE_CODE (TREE_TYPE (decl));\n-\n-      if (code != COMPLEX_TYPE && code != RECORD_TYPE)\n-\treturn false;\n-\n-      if (TREE_CODE (decl) != VAR_DECL)\n-\treturn false;\n-    }\n-  else\n-    return false;\n-\n-  av_p = get_aggregate_vardecl (decl, dse_gd, /*insert=*/false);\n-  gcc_assert (av_p != NULL);\n-\n-  return dse_whole_aggregate_clobbered_p (av_p);\n-}\n-\n-\n /* Attempt to eliminate dead stores in the statement referenced by BSI.\n \n    A dead store is a store into a memory location which will later be\n@@ -645,14 +434,14 @@ dse_optimize_stmt (struct dom_walk_data *walk_data,\n \t\t\t\t      dse_gd, bd))\n \treturn;\n \n-      /* If this is a partial store into an aggregate, record it.  */\n-      dse_record_partial_aggregate_store (stmt, dse_gd);\n-\n+      /* If we have precisely one immediate use at this point, then we may\n+\t have found redundant store.  Make sure that the stores are to\n+\t the same memory location.  This includes checking that any\n+\t SSA-form variables in the address will have the same values.  */\n       if (use_p != NULL_USE_OPERAND_P\n           && bitmap_bit_p (dse_gd->stores, get_stmt_uid (use_stmt))\n-          && (!operand_equal_p (GIMPLE_STMT_OPERAND (stmt, 0),\n-                                GIMPLE_STMT_OPERAND (use_stmt, 0), 0)\n-              && !dse_partial_kill_p (stmt, dse_gd))\n+          && !operand_equal_p (GIMPLE_STMT_OPERAND (stmt, 0),\n+                               GIMPLE_STMT_OPERAND (use_stmt, 0), 0)\n           && memory_address_same (stmt, use_stmt))\n         {\n           /* If we have precisely one immediate use at this point, but\n@@ -673,9 +462,8 @@ dse_optimize_stmt (struct dom_walk_data *walk_data,\n \t memory location, then we may have found redundant store.  */\n       if (use_p != NULL_USE_OPERAND_P\n \t  && bitmap_bit_p (dse_gd->stores, get_stmt_uid (use_stmt))\n-\t  && (operand_equal_p (GIMPLE_STMT_OPERAND (stmt, 0),\n-\t\t\t       GIMPLE_STMT_OPERAND (use_stmt, 0), 0)\n-\t      || dse_partial_kill_p (stmt, dse_gd))\n+\t  && operand_equal_p (GIMPLE_STMT_OPERAND (stmt, 0),\n+\t\t\t      GIMPLE_STMT_OPERAND (use_stmt, 0), 0)\n \t  && memory_address_same (stmt, use_stmt))\n \t{\n \t  ssa_op_iter op_iter;\n@@ -758,52 +546,6 @@ dse_finalize_block (struct dom_walk_data *walk_data,\n       }\n }\n \n-\n-/* Hashing and equality functions for AGGREGATE_VARDECL.  */\n-\n-static hashval_t\n-aggregate_vardecl_hash (const void *p)\n-{\n-  return htab_hash_pointer\n-    ((const void *)((const struct aggregate_vardecl_d *)p)->decl);\n-}\n-\n-static int\n-aggregate_vardecl_eq (const void *p1, const void *p2)\n-{\n-  return ((const struct aggregate_vardecl_d *)p1)->decl\n-    == ((const struct aggregate_vardecl_d *)p2)->decl;\n-}\n-\n-\n-/* Free memory allocated by one entry in AGGREGATE_VARDECL.  */\n-\n-static void\n-aggregate_vardecl_free (void *p)\n-{\n-  struct aggregate_vardecl_d *entry = (struct aggregate_vardecl_d *) p;\n-  sbitmap_free (entry->parts_set);\n-  free (entry);\n-}\n-\n-\n-/* Return true if STMT is a store into an entire aggregate.  */\n-\n-static bool\n-aggregate_whole_store_p (tree stmt)\n-{\n-  if (TREE_CODE (stmt) == GIMPLE_MODIFY_STMT)\n-    {\n-      tree lhs = GIMPLE_STMT_OPERAND (stmt, 0);\n-      enum tree_code code = TREE_CODE (TREE_TYPE (lhs));\n-\n-      if (code == COMPLEX_TYPE || code == RECORD_TYPE)\n-\treturn true;\n-    }\n-  return false;\n-}\n-\n-\n /* Main entry point.  */\n \n static unsigned int\n@@ -813,40 +555,15 @@ tree_ssa_dse (void)\n   struct dse_global_data dse_gd;\n   basic_block bb;\n \n-  dse_gd.aggregate_vardecl = \n-    htab_create (37, aggregate_vardecl_hash,\n-\t\t aggregate_vardecl_eq, aggregate_vardecl_free);\n-\n+  /* Create a UID for each statement in the function.  Ordering of the\n+     UIDs is not important for this pass.  */\n   max_stmt_uid = 0;\n   FOR_EACH_BB (bb)\n     {\n       block_stmt_iterator bsi;\n \n       for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n-\t{\n-\t  tree stmt = bsi_stmt (bsi);\n-\n-\t  /* Record aggregates which have been stored into as a whole.  */\n-\t  if (aggregate_whole_store_p (stmt))\n-\t    {\n-\t      tree lhs = GIMPLE_STMT_OPERAND (stmt, 0);\n-\t      if (TREE_CODE (lhs) == VAR_DECL)\n-\t\t{\n-\t\t  struct aggregate_vardecl_d *av_p;\n-\n-\t\t  av_p = get_aggregate_vardecl (lhs, &dse_gd, /*insert=*/true);\n-\t\t  av_p->ignore = false;\n-\n-\t\t  /* Ignore aggregates with too many parts.  */\n-\t\t  if (av_p->nparts > HOST_BITS_PER_LONG)\n-\t\t    av_p->ignore = true;\n-\t\t}\n-\t    }\n-\n-\t  /* Create a UID for each statement in the function.\n-\t     Ordering of the UIDs is not important for this pass.  */\n-\t  stmt_ann (stmt)->uid = max_stmt_uid++;\n-\t}\n+\tstmt_ann (bsi_stmt (bsi))->uid = max_stmt_uid++;\n     }\n \n   /* We might consider making this a property of each pass so that it\n@@ -872,7 +589,6 @@ tree_ssa_dse (void)\n \n   /* This is the main hash table for the dead store elimination pass.  */\n   dse_gd.stores = BITMAP_ALLOC (NULL);\n-\n   walk_data.global_data = &dse_gd;\n \n   /* Initialize the dominator walker.  */\n@@ -884,9 +600,8 @@ tree_ssa_dse (void)\n   /* Finalize the dominator walker.  */\n   fini_walk_dominator_tree (&walk_data);\n \n-  /* Release unneeded data.  */\n+  /* Release the main bitmap.  */\n   BITMAP_FREE (dse_gd.stores);\n-  htab_delete (dse_gd.aggregate_vardecl);\n \n   /* For now, just wipe the post-dominator information.  */\n   free_dominance_info (CDI_POST_DOMINATORS);"}]}