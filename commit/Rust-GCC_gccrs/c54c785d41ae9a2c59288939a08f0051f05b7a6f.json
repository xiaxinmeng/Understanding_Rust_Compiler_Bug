{"sha": "c54c785d41ae9a2c59288939a08f0051f05b7a6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU0Yzc4NWQ0MWFlOWEyYzU5Mjg4OTM5YTA4ZjAwNTFmMDViN2E2Zg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-05-31T16:25:35Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-05-31T16:25:35Z"}, "message": "gimple.c (gimple_call_builtin_p): New function.\n\n\n\t* gimple.c (gimple_call_builtin_p): New function.\n\t* gimple.h (gimple_call_builtin_p): Declare.\n\t* tree-cfg.c (make_edges): Produce edge from BUILT_IN_RETURN\n\tto exit.\n\t(execute_warn_function_return): BUILT_IN_RETURN is return.\n\t(split_critical_edges): Return edges are not critical.\n\t(is_ctrl_altering_stmt): Builtin_in_return is altering.\n\t(gimple_verify_flow_info): Handle built_in_return.\n\t(execute_warn_function_return): Handle built_in_return.\n\t* ipa-pure-const.c (check_call): Ignore builtin_return.\n\n\t* gcc.dg/builtin-apply4.c: Compile with -Wmissing-return.\n\nFrom-SVN: r160079", "tree": {"sha": "7abd6b17d74d7f3258b196f10f26ef8e74c4a1bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7abd6b17d74d7f3258b196f10f26ef8e74c4a1bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c54c785d41ae9a2c59288939a08f0051f05b7a6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c54c785d41ae9a2c59288939a08f0051f05b7a6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c54c785d41ae9a2c59288939a08f0051f05b7a6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c54c785d41ae9a2c59288939a08f0051f05b7a6f/comments", "author": null, "committer": null, "parents": [{"sha": "4892422a064e6f5d633123afecf6e95e4fca0f48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4892422a064e6f5d633123afecf6e95e4fca0f48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4892422a064e6f5d633123afecf6e95e4fca0f48"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "f4c57b2861c542690cfde9cc620d55f4eb420c84", "filename": "gcc/gimple.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54c785d41ae9a2c59288939a08f0051f05b7a6f/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54c785d41ae9a2c59288939a08f0051f05b7a6f/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=c54c785d41ae9a2c59288939a08f0051f05b7a6f", "patch": "@@ -4732,4 +4732,16 @@ gimple_decl_printable_name (tree decl, int verbosity)\n   return IDENTIFIER_POINTER (DECL_NAME (decl));\n }\n \n+/* Return true when STMT is builtins call to CODE.  */\n+\n+bool\n+gimple_call_builtin_p (gimple stmt, enum built_in_function code)\n+{\n+  tree fndecl;\n+  return (is_gimple_call (stmt)\n+\t  && (fndecl = gimple_call_fndecl (stmt)) != NULL\n+\t  && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL\n+\t  && DECL_FUNCTION_CODE (fndecl) == code);\n+}\n+\n #include \"gt-gimple.h\""}, {"sha": "1a4dacd23319fbc62ec891ae8ef37144b8d68a61", "filename": "gcc/gimple.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54c785d41ae9a2c59288939a08f0051f05b7a6f/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54c785d41ae9a2c59288939a08f0051f05b7a6f/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=c54c785d41ae9a2c59288939a08f0051f05b7a6f", "patch": "@@ -961,6 +961,7 @@ extern bool walk_stmt_load_store_ops (gimple, void *,\n \t\t\t\t      bool (*)(gimple, tree, void *),\n \t\t\t\t      bool (*)(gimple, tree, void *));\n extern bool gimple_ior_addresses_taken (bitmap, gimple);\n+extern bool gimple_call_builtin_p (gimple, enum built_in_function);\n \n /* In gimplify.c  */\n extern tree create_tmp_var_raw (tree, const char *);"}, {"sha": "54238856e9080eed2422182610f733f4088b2dba", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54c785d41ae9a2c59288939a08f0051f05b7a6f/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54c785d41ae9a2c59288939a08f0051f05b7a6f/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=c54c785d41ae9a2c59288939a08f0051f05b7a6f", "patch": "@@ -369,6 +369,9 @@ check_call (funct_state local, gimple call, bool ipa)\n      graph.  */\n   if (callee_t)\n     {\n+      /* built_in_return is really just an return statemnt.  */\n+      if (gimple_call_builtin_p (call, BUILT_IN_RETURN))\n+\treturn;\n       /* When bad things happen to bad functions, they cannot be const\n \t or pure.  */\n       if (setjmp_call_p (callee_t))"}, {"sha": "5d094b5bbaef4b9e5613cdb90ea684130c9c2d83", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54c785d41ae9a2c59288939a08f0051f05b7a6f/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54c785d41ae9a2c59288939a08f0051f05b7a6f/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=c54c785d41ae9a2c59288939a08f0051f05b7a6f", "patch": "@@ -568,8 +568,12 @@ make_edges (void)\n \t\t create abnormal edges to them.  */\n \t      make_eh_edges (last);\n \n+\t      /* BUILTIN_RETURN is really a return statement.  */\n+\t      if (gimple_call_builtin_p (last, BUILT_IN_RETURN))\n+\t\tmake_edge (bb, EXIT_BLOCK_PTR, 0), fallthru = false;\n \t      /* Some calls are known not to return.  */\n-\t      fallthru = !(gimple_call_flags (last) & ECF_NORETURN);\n+\t      else\n+\t        fallthru = !(gimple_call_flags (last) & ECF_NORETURN);\n \t      break;\n \n \t    case GIMPLE_ASSIGN:\n@@ -2248,6 +2252,10 @@ is_ctrl_altering_stmt (gimple t)\n \t/* A call also alters control flow if it does not return.  */\n \tif (flags & ECF_NORETURN)\n \t  return true;\n+\n+\t/* BUILT_IN_RETURN call is same as return statement.  */\n+\tif (gimple_call_builtin_p (t, BUILT_IN_RETURN))\n+\t  return true;\n       }\n       break;\n \n@@ -4436,6 +4444,10 @@ gimple_verify_flow_info (void)\n \t    }\n \t  break;\n \n+\tcase GIMPLE_CALL:\n+\t  if (!gimple_call_builtin_p (stmt, BUILT_IN_RETURN))\n+\t    break;\n+\t  /* ... fallthru ... */\n \tcase GIMPLE_RETURN:\n \t  if (!single_succ_p (bb)\n \t      || (single_succ_edge (bb)->flags\n@@ -7050,7 +7062,9 @@ split_critical_edges (void)\n \t      gsi = gsi_last_bb (e->src);\n \t      if (!gsi_end_p (gsi)\n \t\t  && stmt_ends_bb_p (gsi_stmt (gsi))\n-\t\t  && gimple_code (gsi_stmt (gsi)) != GIMPLE_RETURN)\n+\t\t  && (gimple_code (gsi_stmt (gsi)) != GIMPLE_RETURN\n+\t\t      && !gimple_call_builtin_p (gsi_stmt (gsi),\n+\t\t\t\t\t\t BUILT_IN_RETURN)))\n \t\tsplit_edge (e);\n \t    }\n \t}\n@@ -7148,7 +7162,8 @@ execute_warn_function_return (void)\n       FOR_EACH_EDGE (e, ei, EXIT_BLOCK_PTR->preds)\n \t{\n \t  last = last_stmt (e->src);\n-\t  if (gimple_code (last) == GIMPLE_RETURN\n+\t  if ((gimple_code (last) == GIMPLE_RETURN\n+\t       || gimple_call_builtin_p (last, BUILT_IN_RETURN))\n \t      && (location = gimple_location (last)) != UNKNOWN_LOCATION)\n \t    break;\n \t}"}]}