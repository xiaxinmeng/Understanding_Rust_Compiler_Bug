{"sha": "525521b6ddb69a9f0478704e0eec2231c0923d2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI1NTIxYjZkZGI2OWE5ZjA0Nzg3MDRlMGVlYzIyMzFjMDkyM2QyZA==", "commit": {"author": {"name": "Douglas Gregor", "email": "doug.gregor@gmail.com", "date": "2008-03-27T14:53:57Z"}, "committer": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2008-03-27T14:53:57Z"}, "message": "re PR bootstrap/35704 (Bootstrap failure on i686-apple-darwin9 at revision 133519 (take 2).)\n\n2008-03-27  Douglas Gregor  <doug.gregor@gmail.com>\n\n\tPR obj-c++/35704\n\t* typeck.c (build_x_compound_expr): Use cp_build_compound_expr.\n\t(build_compound_expr): New, for compatibility with C\n\tbuild_compound_expr.\n\t(cp_build_compound_expr): Renamed from build_compound_expr.\n\t(build_c_cast): New, for compatibility with C build_c_cast.\n\t(cp_build_c_cast): Renamed from build_c_cast.\n\t* init.c (build_vec_delete_1): Fix calls to build_compound_expr.\n\t* decl.c (cxx_maybe_build_cleanup): Ditto.\n\t* cp-tree.h (build_compound_expr): Add C-compatibile prototype.\n\t(cp_build_compound_expr): Renamed from build_compound_expr.\n\t(build_c_cast): Add C-compatible prototype.\n\t(cp_build_c_cast): Renamed from build_c_cast.\n\t* typeck2.c (build_functional_cast): Use cp_build_c_cast.\n\t* parser.c (cp_parser_cast_expression): Fix call to build_c_cast.\n\n2008-03-27  Douglas Gregor  <doug.gregor@gmail.com>\n\n\tPR obj-c++/35704\t\n\t* objc-act.c (objc_build_component_ref): Fix call to\n\tfinish_class_member_access_expr.\n\t(objc_generate_cxx_ctor_or_dtor): Fix call to\n\tbuild_special_member_call.\n\nFrom-SVN: r133643", "tree": {"sha": "090934fe30a8019c24a7123ebc14a508495e1103", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/090934fe30a8019c24a7123ebc14a508495e1103"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/525521b6ddb69a9f0478704e0eec2231c0923d2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/525521b6ddb69a9f0478704e0eec2231c0923d2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/525521b6ddb69a9f0478704e0eec2231c0923d2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/525521b6ddb69a9f0478704e0eec2231c0923d2d/comments", "author": {"login": "DougGregor", "id": 989428, "node_id": "MDQ6VXNlcjk4OTQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/989428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DougGregor", "html_url": "https://github.com/DougGregor", "followers_url": "https://api.github.com/users/DougGregor/followers", "following_url": "https://api.github.com/users/DougGregor/following{/other_user}", "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions", "organizations_url": "https://api.github.com/users/DougGregor/orgs", "repos_url": "https://api.github.com/users/DougGregor/repos", "events_url": "https://api.github.com/users/DougGregor/events{/privacy}", "received_events_url": "https://api.github.com/users/DougGregor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "063cc99c4658d52b33b37f4173d304efa9c68b00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/063cc99c4658d52b33b37f4173d304efa9c68b00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/063cc99c4658d52b33b37f4173d304efa9c68b00"}], "stats": {"total": 79, "additions": 61, "deletions": 18}, "files": [{"sha": "10e7af77a7f5cf0bf7658181fca843eb1e1283c7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525521b6ddb69a9f0478704e0eec2231c0923d2d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525521b6ddb69a9f0478704e0eec2231c0923d2d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=525521b6ddb69a9f0478704e0eec2231c0923d2d", "patch": "@@ -1,3 +1,21 @@\n+2008-03-27  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+\tPR obj-c++/35704\n+\t* typeck.c (build_x_compound_expr): Use cp_build_compound_expr.\n+\t(build_compound_expr): New, for compatibility with C\n+\tbuild_compound_expr.\n+\t(cp_build_compound_expr): Renamed from build_compound_expr.\n+\t(build_c_cast): New, for compatibility with C build_c_cast.\n+\t(cp_build_c_cast): Renamed from build_c_cast.\n+\t* init.c (build_vec_delete_1): Fix calls to build_compound_expr.\n+\t* decl.c (cxx_maybe_build_cleanup): Ditto.\n+\t* cp-tree.h (build_compound_expr): Add C-compatibile prototype.\n+\t(cp_build_compound_expr): Renamed from build_compound_expr.\n+\t(build_c_cast): Add C-compatible prototype.\n+\t(cp_build_c_cast): Renamed from build_c_cast.\n+\t* typeck2.c (build_functional_cast): Use cp_build_c_cast.\n+\t* parser.c (cp_parser_cast_expression): Fix call to build_c_cast.\n+\n 2008-03-27  Douglas Gregor  <doug.gregor@gmail.com>\n \n \t* pt.c (tsubst_copy) <case SIZEOF_EXPR>: Cope with"}, {"sha": "f50b926ce4bd2f4070b5419a58b14427e6e1c26a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525521b6ddb69a9f0478704e0eec2231c0923d2d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525521b6ddb69a9f0478704e0eec2231c0923d2d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=525521b6ddb69a9f0478704e0eec2231c0923d2d", "patch": "@@ -4804,11 +4804,13 @@ extern tree build_x_conditional_expr\t\t(tree, tree, tree,\n                                                  tsubst_flags_t);\n extern tree build_x_compound_expr_from_list\t(tree, const char *);\n extern tree build_x_compound_expr\t\t(tree, tree, tsubst_flags_t);\n-extern tree build_compound_expr\t\t\t(tree, tree, tsubst_flags_t);\n+extern tree build_compound_expr                 (tree, tree);\n+extern tree cp_build_compound_expr\t\t(tree, tree, tsubst_flags_t);\n extern tree build_static_cast\t\t\t(tree, tree, tsubst_flags_t);\n extern tree build_reinterpret_cast\t\t(tree, tree, tsubst_flags_t);\n extern tree build_const_cast\t\t\t(tree, tree, tsubst_flags_t);\n-extern tree build_c_cast\t\t\t(tree, tree, tsubst_flags_t);\n+extern tree build_c_cast\t\t\t(tree, tree);\n+extern tree cp_build_c_cast\t\t\t(tree, tree, tsubst_flags_t);\n extern tree build_x_modify_expr\t\t\t(tree, enum tree_code, tree,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree cp_build_modify_expr\t\t(tree, enum tree_code, tree,"}, {"sha": "8737496746650cd1830cefc1c0f96949690bb029", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525521b6ddb69a9f0478704e0eec2231c0923d2d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525521b6ddb69a9f0478704e0eec2231c0923d2d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=525521b6ddb69a9f0478704e0eec2231c0923d2d", "patch": "@@ -12229,7 +12229,7 @@ cxx_maybe_build_cleanup (tree decl)\n       call = build_delete (TREE_TYPE (addr), addr,\n \t\t\t   sfk_complete_destructor, flags, 0);\n       if (cleanup)\n-\tcleanup = build_compound_expr (cleanup, call, tf_warning_or_error);\n+\tcleanup = build_compound_expr (cleanup, call);\n       else\n \tcleanup = call;\n     }"}, {"sha": "6b2156d39cc70abead9f01ce241463ce06c707ba", "filename": "gcc/cp/init.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525521b6ddb69a9f0478704e0eec2231c0923d2d/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525521b6ddb69a9f0478704e0eec2231c0923d2d/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=525521b6ddb69a9f0478704e0eec2231c0923d2d", "patch": "@@ -2528,15 +2528,13 @@ build_vec_delete_1 (tree base, tree maxindex, tree type,\n   body = build_compound_expr\n     (body, cp_build_modify_expr (tbase, NOP_EXPR,\n \t\t\t\t build2 (POINTER_PLUS_EXPR, ptype, tbase, tmp),\n-\t\t\t\t tf_warning_or_error),\n-     tf_warning_or_error);\n+\t\t\t\t tf_warning_or_error));\n   body = build_compound_expr\n     (body, build_delete (ptype, tbase, sfk_complete_destructor,\n-\t\t\t LOOKUP_NORMAL|LOOKUP_DESTRUCTOR, 1),\n-     tf_warning_or_error);\n+\t\t\t LOOKUP_NORMAL|LOOKUP_DESTRUCTOR, 1));\n \n   loop = build1 (LOOP_EXPR, void_type_node, body);\n-  loop = build_compound_expr (tbase_init, loop, tf_warning_or_error);\n+  loop = build_compound_expr (tbase_init, loop);\n \n  no_destructor:\n   /* If the delete flag is one, or anything else with the low bit set,\n@@ -2582,7 +2580,7 @@ build_vec_delete_1 (tree base, tree maxindex, tree type,\n   else if (!body)\n     body = deallocate_expr;\n   else\n-    body = build_compound_expr (body, deallocate_expr, tf_warning_or_error);\n+    body = build_compound_expr (body, deallocate_expr);\n \n   if (!body)\n     body = integer_zero_node;"}, {"sha": "35a2fc3286f64f771586a4363de9049957fefefd", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525521b6ddb69a9f0478704e0eec2231c0923d2d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525521b6ddb69a9f0478704e0eec2231c0923d2d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=525521b6ddb69a9f0478704e0eec2231c0923d2d", "patch": "@@ -5880,7 +5880,7 @@ cp_parser_cast_expression (cp_parser *parser, bool address_p, bool cast_p)\n \t    return error_mark_node;\n \n \t  /* Perform the cast.  */\n-\t  expr = build_c_cast (type, expr, tf_warning_or_error);\n+\t  expr = build_c_cast (type, expr);\n \t  return expr;\n \t}\n     }"}, {"sha": "de10c0e3a99482bcacdd957a4c8e107acd90e64a", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525521b6ddb69a9f0478704e0eec2231c0923d2d/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525521b6ddb69a9f0478704e0eec2231c0923d2d/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=525521b6ddb69a9f0478704e0eec2231c0923d2d", "patch": "@@ -5037,18 +5037,26 @@ build_x_compound_expr (tree op1, tree op2, tsubst_flags_t complain)\n   result = build_new_op (COMPOUND_EXPR, LOOKUP_NORMAL, op1, op2, NULL_TREE,\n \t\t\t /*overloaded_p=*/NULL, complain);\n   if (!result)\n-    result = build_compound_expr (op1, op2, complain);\n+    result = cp_build_compound_expr (op1, op2, complain);\n \n   if (processing_template_decl && result != error_mark_node)\n     return build_min_non_dep (COMPOUND_EXPR, result, orig_op1, orig_op2);\n \n   return result;\n }\n \n+/* Like cp_build_compound_expr, but for the c-common bits.  */\n+\n+tree\n+build_compound_expr (tree lhs, tree rhs)\n+{\n+  return cp_build_compound_expr (lhs, rhs, tf_warning_or_error);\n+}\n+\n /* Build a compound expression.  */\n \n tree\n-build_compound_expr (tree lhs, tree rhs, tsubst_flags_t complain)\n+cp_build_compound_expr (tree lhs, tree rhs, tsubst_flags_t complain)\n {\n   lhs = convert_to_void (lhs, \"left-hand operand of comma\", complain);\n \n@@ -5775,11 +5783,19 @@ build_const_cast (tree type, tree expr, tsubst_flags_t complain)\n \t\t\t     /*valid_p=*/NULL);\n }\n \n+/* Like cp_build_c_cast, but for the c-common bits.  */\n+\n+tree\n+build_c_cast (tree type, tree expr)\n+{\n+  return cp_build_c_cast (type, expr, tf_warning_or_error);\n+}\n+\n /* Build an expression representing an explicit C-style cast to type\n    TYPE of expression EXPR.  */\n \n tree\n-build_c_cast (tree type, tree expr, tsubst_flags_t complain)\n+cp_build_c_cast (tree type, tree expr, tsubst_flags_t complain)\n {\n   tree value = expr;\n   tree result;\n@@ -6466,7 +6482,7 @@ build_ptrmemfunc (tree type, tree pfn, int force, bool c_cast_p)\n   /* Handle null pointer to member function conversions.  */\n   if (integer_zerop (pfn))\n     {\n-      pfn = build_c_cast (type, integer_zero_node, tf_warning_or_error);\n+      pfn = build_c_cast (type, integer_zero_node);\n       return build_ptrmemfunc1 (to_type,\n \t\t\t\tinteger_zero_node,\n \t\t\t\tpfn);"}, {"sha": "409c4922378a8348517c60ddfca36331ac3d7e5c", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525521b6ddb69a9f0478704e0eec2231c0923d2d/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525521b6ddb69a9f0478704e0eec2231c0923d2d/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=525521b6ddb69a9f0478704e0eec2231c0923d2d", "patch": "@@ -1342,7 +1342,7 @@ build_functional_cast (tree exp, tree parms, tsubst_flags_t complain)\n \n       /* This must build a C cast.  */\n       parms = build_x_compound_expr_from_list (parms, \"functional cast\");\n-      return build_c_cast (type, parms, complain);\n+      return cp_build_c_cast (type, parms, complain);\n     }\n \n   /* Prepare to evaluate as a call to a constructor.  If this expression\n@@ -1363,7 +1363,7 @@ build_functional_cast (tree exp, tree parms, tsubst_flags_t complain)\n      conversion is equivalent (in definedness, and if defined in\n      meaning) to the corresponding cast expression.  */\n   if (parms && TREE_CHAIN (parms) == NULL_TREE)\n-    return build_c_cast (type, TREE_VALUE (parms), complain);\n+    return cp_build_c_cast (type, TREE_VALUE (parms), complain);\n \n   /* [expr.type.conv]\n "}, {"sha": "4b0b02837b721bf217857700961016868649eb2d", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525521b6ddb69a9f0478704e0eec2231c0923d2d/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525521b6ddb69a9f0478704e0eec2231c0923d2d/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=525521b6ddb69a9f0478704e0eec2231c0923d2d", "patch": "@@ -1,3 +1,11 @@\n+2008-03-27  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+\tPR obj-c++/35704\n+\t* objc-act.c (objc_build_component_ref): Fix call to\n+\tfinish_class_member_access_expr.\n+\t(objc_generate_cxx_ctor_or_dtor): Fix call to\n+\tbuild_special_member_call.\n+\n 2008-03-25  Andrew Pinski  <pinskia@gmail.com>\n \n \tPR objc/29197"}, {"sha": "9baa4da793f831d3ff845da1f400772bb0241d66", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525521b6ddb69a9f0478704e0eec2231c0923d2d/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525521b6ddb69a9f0478704e0eec2231c0923d2d/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=525521b6ddb69a9f0478704e0eec2231c0923d2d", "patch": "@@ -1255,7 +1255,8 @@ objc_build_component_ref (tree datum, tree component)\n      front-end, but 'finish_class_member_access_expr' seems to be\n      a worthy substitute.  */\n #ifdef OBJCPLUS\n-  return finish_class_member_access_expr (datum, component, false);\n+  return finish_class_member_access_expr (datum, component, false,\n+                                          tf_warning_or_error);\n #else\n   return build_component_ref (datum, component);\n #endif\n@@ -4493,7 +4494,7 @@ objc_generate_cxx_ctor_or_dtor (bool dtor)\n \t     (build_special_member_call\n \t      (build_ivar_reference (DECL_NAME (ivar)),\n \t       dtor ? complete_dtor_identifier : complete_ctor_identifier,\n-\t       NULL_TREE, type, LOOKUP_NORMAL));\n+\t       NULL_TREE, type, LOOKUP_NORMAL, tf_warning_or_error));\n \t}\n     }\n "}]}