{"sha": "e457a6fc36cc3d4241c83ad4f74a6ed903376982", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ1N2E2ZmMzNmNjM2Q0MjQxYzgzYWQ0Zjc0YTZlZDkwMzM3Njk4Mg==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-02-23T10:29:26Z"}, "committer": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-02-23T10:29:26Z"}, "message": "re PR fortran/67451 ([F08] ICE with sourced allocation from coarray.)\n\ngcc/testsuite/ChangeLog:\n\n2016-02-23  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/67451\n\t* gfortran.dg/coarray_allocate_5.f08: New test.\n\n\ngcc/fortran/ChangeLog:\n\n2016-02-23  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/67451\n\t* trans-array.c (gfc_array_allocate): Take the attributes from the\n\texpression to allocate and not from the source=-expression.\n\nFrom-SVN: r233625", "tree": {"sha": "32dbc9ce729b00746995438b95c3c519e3e73efe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32dbc9ce729b00746995438b95c3c519e3e73efe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e457a6fc36cc3d4241c83ad4f74a6ed903376982", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e457a6fc36cc3d4241c83ad4f74a6ed903376982", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e457a6fc36cc3d4241c83ad4f74a6ed903376982", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e457a6fc36cc3d4241c83ad4f74a6ed903376982/comments", "author": null, "committer": null, "parents": [{"sha": "d7b574f4d2d1162db60fbeedbc908a2e7a9c6b14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7b574f4d2d1162db60fbeedbc908a2e7a9c6b14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7b574f4d2d1162db60fbeedbc908a2e7a9c6b14"}], "stats": {"total": 70, "additions": 58, "deletions": 12}, "files": [{"sha": "7e0b8828e042a34d5f13a0d4795a26b2ea8d5cb5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e457a6fc36cc3d4241c83ad4f74a6ed903376982/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e457a6fc36cc3d4241c83ad4f74a6ed903376982/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e457a6fc36cc3d4241c83ad4f74a6ed903376982", "patch": "@@ -1,3 +1,9 @@\n+2016-02-23  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/67451\n+\t* trans-array.c (gfc_array_allocate): Take the attributes from the\n+\texpression to allocate and not from the source=-expression.\n+\n 2016-02-20  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/69423"}, {"sha": "649b80fec8473f7cff4b393cd7b7ea2c0d871026", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e457a6fc36cc3d4241c83ad4f74a6ed903376982/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e457a6fc36cc3d4241c83ad4f74a6ed903376982/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=e457a6fc36cc3d4241c83ad4f74a6ed903376982", "patch": "@@ -5401,17 +5401,8 @@ gfc_array_allocate (gfc_se * se, gfc_expr * expr, tree status, tree errmsg,\n   if (!retrieve_last_ref (&ref, &prev_ref))\n     return false;\n \n-  if (ref->u.ar.type == AR_FULL && expr3 != NULL)\n-    {\n-      /* F08:C633: Array shape from expr3.  */\n-      ref = expr3->ref;\n-\n-      /* Find the last reference in the chain.  */\n-      if (!retrieve_last_ref (&ref, &prev_ref))\n-\treturn false;\n-      alloc_w_e3_arr_spec = true;\n-    }\n-\n+  /* Take the allocatable and coarray properties solely from the expr-ref's\n+     attributes and not from source=-expression.  */\n   if (!prev_ref)\n     {\n       allocatable = expr->symtree->n.sym->attr.allocatable;\n@@ -5428,6 +5419,17 @@ gfc_array_allocate (gfc_se * se, gfc_expr * expr, tree status, tree errmsg,\n   if (!dimension)\n     gcc_assert (coarray);\n \n+  if (ref->u.ar.type == AR_FULL && expr3 != NULL)\n+    {\n+      /* F08:C633: Array shape from expr3.  */\n+      ref = expr3->ref;\n+\n+      /* Find the last reference in the chain.  */\n+      if (!retrieve_last_ref (&ref, &prev_ref))\n+\treturn false;\n+      alloc_w_e3_arr_spec = true;\n+    }\n+\n   /* Figure out the size of the array.  */\n   switch (ref->u.ar.type)\n     {\n@@ -5463,7 +5465,8 @@ gfc_array_allocate (gfc_se * se, gfc_expr * expr, tree status, tree errmsg,\n   gfc_init_block (&set_descriptor_block);\n   size = gfc_array_init_size (se->expr, alloc_w_e3_arr_spec ? expr->rank\n \t\t\t\t\t\t\t   : ref->u.ar.as->rank,\n-\t\t\t      ref->u.ar.as->corank, &offset, lower, upper,\n+\t\t\t      coarray ? ref->u.ar.as->corank : 0,\n+\t\t\t      &offset, lower, upper,\n \t\t\t      &se->pre, &set_descriptor_block, &overflow,\n \t\t\t      expr3_elem_size, nelems, expr3, e3_arr_desc,\n \t\t\t      e3_is_array_constr, expr);"}, {"sha": "7d23225e994cfd06c6044e1fac66dd21721e5355", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e457a6fc36cc3d4241c83ad4f74a6ed903376982/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e457a6fc36cc3d4241c83ad4f74a6ed903376982/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e457a6fc36cc3d4241c83ad4f74a6ed903376982", "patch": "@@ -1,3 +1,8 @@\n+2016-02-23  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/67451\n+\t* gfortran.dg/coarray_allocate_5.f08: New test.\n+\n 2016-02-23  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* gcc.target/s390/vcond-shift.c: Move to ..."}, {"sha": "feb1bf3f2df932506265168f048677061a55d321", "filename": "gcc/testsuite/gfortran.dg/coarray_allocate_5.f08", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e457a6fc36cc3d4241c83ad4f74a6ed903376982/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_allocate_5.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e457a6fc36cc3d4241c83ad4f74a6ed903376982/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_allocate_5.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_allocate_5.f08?ref=e457a6fc36cc3d4241c83ad4f74a6ed903376982", "patch": "@@ -0,0 +1,32 @@\n+! { dg-do run }\n+! { dg-options \"-fcoarray=lib -lcaf_single -fdump-tree-original\" }\n+!\n+! Contributed by Ian Harvey  <ian_harvey@bigpond.com>\n+! Extended by Andre Vehreschild  <vehre@gcc.gnu.org>\n+! to test that coarray references in allocate work now\n+! PR fortran/67451\n+\n+  program main\n+    implicit none\n+    type foo\n+      integer :: bar = 99\n+    end type\n+    class(foo), dimension(:), allocatable :: foobar[:]\n+    class(foo), dimension(:), allocatable :: some_local_object\n+    allocate(foobar(10)[*])\n+\n+    allocate(some_local_object, source=foobar)\n+\n+    if (.not. allocated(foobar)) call abort()\n+    if (lbound(foobar, 1) /= 1 .OR. ubound(foobar, 1) /= 10) call abort()\n+    if (.not. allocated(some_local_object)) call abort()\n+    if (any(some_local_object(:)%bar /= [99, 99,  99, 99, 99, 99, 99, 99, 99, 99])) call abort()\n+\n+    deallocate(some_local_object)\n+    deallocate(foobar)\n+  end program\n+\n+! Check that some_local_object is treated as rank-1 array.\n+! This failed beforehand, because the coarray attribute of the source=expression\n+! was propagated to some_local_object in the allocate.\n+! { dg-final { scan-tree-dump-not \"some_local_object\\._data\\.dim\\[1\\]\\.lbound\" \"original\" } }"}]}