{"sha": "2867118ddda9b56d991c16022f7d3d634ed08313", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg2NzExOGRkZGE5YjU2ZDk5MWMxNjAyMmY3ZDNkNjM0ZWQwODMxMw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-08-14T19:49:52Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-08-14T22:43:16Z"}, "message": "analyzer: fix initialization from constant pool [PR96609,PR96616]\n\nPR testsuite/96609 and PR analyzer/96616 report various testsuite\nfailures seen on powerpc64, aarch64, and arm in new tests added by\nr11-2694-g808f4dfeb3a95f50f15e71148e5c1067f90a126d.\n\nSome of these failures (in gcc.dg/analyzer/init.c, and on arm\nin gcc.dg/analyzer/casts-1.c) relate to initializations from var_decls\nin the constant pool.  I wrote the tests assuming that the gimplified\nstmts would initialize the locals via a gassign of code CONSTRUCTOR,\nwhereas on these targets some of the initializations are gassign from\na VAR_DECL e.g.:\n  c = *.LC0;\nwhere \"*.LC0\" is a var_decl with DECL_IN_CONSTANT_POOL set.\n\nFor example, in test_7:\n   struct coord c[2] = {{3, 4}, {5, 6}};\n   __analyzer_eval (c[0].x == 3); /* { dg-warning \"TRUE\" } */\nafter the initialization, the store was simply recording:\n   cluster for: c: INIT_VAL(*.LC0)\nwhen I was expecting the cluster for c to have:\n  cluster for: c\n    key:   {kind: direct, start: 0, size: 32, next: 32}\n    value: 'int' {(int)3}\n    key:   {kind: direct, start: 32, size: 32, next: 64}\n    value: 'int' {(int)4}\n    key:   {kind: direct, start: 64, size: 32, next: 96}\n    value: 'int' {(int)5}\n    key:   {kind: direct, start: 96, size: 32, next: 128}\n    value: 'int' {(int)6}\nThe test for c[0].x == 3 would then generate:\n  cluster for: _2: (SUB(SUB(INIT_VAL(*.LC0), c[(int)0]), c[(int)0].x)==(int)3)\nwhich is UNKNOWN, leading to the test failing.\n\nThis patch fixes the init.c and casts-1.c failures by special-casing\nreads from a var_decl with DECL_IN_CONSTANT_POOL set, so that they build\na compound_svalue containing the bindings implied by the CONSTRUCTOR\nnode for DECL_INITIAL.\n\ngcc/analyzer/ChangeLog:\n\tPR testsuite/96609\n\tPR analyzer/96616\n\t* region-model.cc (region_model::get_store_value): Call\n\tmaybe_get_constant_value on decl_regions first.\n\t* region-model.h (decl_region::maybe_get_constant_value): New decl.\n\t* region.cc (decl_region::get_stack_depth): Likewise.\n\t(decl_region::maybe_get_constant_value): New.\n\t* store.cc (get_subregion_within_ctor): New.\n\t(binding_map::apply_ctor_to_region): New.\n\t* store.h (binding_map::apply_ctor_to_region): New decl.", "tree": {"sha": "2ebd908388286bb587a09e75935f1e58b9df8191", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ebd908388286bb587a09e75935f1e58b9df8191"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2867118ddda9b56d991c16022f7d3d634ed08313", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2867118ddda9b56d991c16022f7d3d634ed08313", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2867118ddda9b56d991c16022f7d3d634ed08313", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2867118ddda9b56d991c16022f7d3d634ed08313/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee88b536069db8f870c444c441182a9c76ec5bba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee88b536069db8f870c444c441182a9c76ec5bba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee88b536069db8f870c444c441182a9c76ec5bba"}], "stats": {"total": 96, "additions": 96, "deletions": 0}, "files": [{"sha": "3c7ea40e8d8b92377d822aeb7febae9eb7d8f6fa", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2867118ddda9b56d991c16022f7d3d634ed08313/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2867118ddda9b56d991c16022f7d3d634ed08313/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=2867118ddda9b56d991c16022f7d3d634ed08313", "patch": "@@ -1192,6 +1192,11 @@ region_model::get_rvalue (tree expr, region_model_context *ctxt)\n const svalue *\n region_model::get_store_value (const region *reg) const\n {\n+  /* Special-case: handle var_decls in the constant pool.  */\n+  if (const decl_region *decl_reg = reg->dyn_cast_decl_region ())\n+    if (const svalue *sval = decl_reg->maybe_get_constant_value (m_mgr))\n+      return sval;\n+\n   const svalue *sval\n     = m_store.get_any_binding (m_mgr->get_store_manager (), reg);\n   if (sval)"}, {"sha": "3d044bf8d6c35adc3a911936b75da2ed4edfef20", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2867118ddda9b56d991c16022f7d3d634ed08313/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2867118ddda9b56d991c16022f7d3d634ed08313/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=2867118ddda9b56d991c16022f7d3d634ed08313", "patch": "@@ -1869,6 +1869,8 @@ class decl_region : public region\n   tree get_decl () const { return m_decl; }\n   int get_stack_depth () const;\n \n+  const svalue *maybe_get_constant_value (region_model_manager *mgr) const;\n+\n private:\n   tree m_decl;\n };"}, {"sha": "afe416b001ba5b65c7b38d4013fc2b693c219e28", "filename": "gcc/analyzer/region.cc", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2867118ddda9b56d991c16022f7d3d634ed08313/gcc%2Fanalyzer%2Fregion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2867118ddda9b56d991c16022f7d3d634ed08313/gcc%2Fanalyzer%2Fregion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion.cc?ref=2867118ddda9b56d991c16022f7d3d634ed08313", "patch": "@@ -874,6 +874,33 @@ decl_region::get_stack_depth () const\n   return 0;\n }\n \n+/* If the underlying decl is in the global constant pool,\n+   return an svalue representing the constant value.\n+   Otherwise return NULL.  */\n+\n+const svalue *\n+decl_region::maybe_get_constant_value (region_model_manager *mgr) const\n+{\n+  if (TREE_CODE (m_decl) == VAR_DECL\n+      && DECL_IN_CONSTANT_POOL (m_decl)\n+      && DECL_INITIAL (m_decl)\n+      && TREE_CODE (DECL_INITIAL (m_decl)) == CONSTRUCTOR)\n+    {\n+      tree ctor = DECL_INITIAL (m_decl);\n+      gcc_assert (!TREE_CLOBBER_P (ctor));\n+\n+      /* Create a binding map, applying ctor to it, using this\n+\t decl_region as the base region when building child regions\n+\t for offset calculations.  */\n+      binding_map map;\n+      map.apply_ctor_to_region (this, ctor, mgr);\n+\n+      /* Return a compound svalue for the map we built.  */\n+      return mgr->get_or_create_compound_svalue (get_type (), map);\n+    }\n+  return NULL;\n+}\n+\n /* class field_region : public region.  */\n \n /* Implementation of region::dump_to_pp vfunc for field_region.  */"}, {"sha": "232920019e077bd0b3a7764336a4aaa24fc676c9", "filename": "gcc/analyzer/store.cc", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2867118ddda9b56d991c16022f7d3d634ed08313/gcc%2Fanalyzer%2Fstore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2867118ddda9b56d991c16022f7d3d634ed08313/gcc%2Fanalyzer%2Fstore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.cc?ref=2867118ddda9b56d991c16022f7d3d634ed08313", "patch": "@@ -366,6 +366,65 @@ binding_map::dump (bool simple) const\n   pp_flush (&pp);\n }\n \n+/* Get the child region of PARENT_REG based upon INDEX within a\n+   CONSTRUCTOR.   */\n+\n+static const region *\n+get_subregion_within_ctor (const region *parent_reg, tree index,\n+\t\t\t   region_model_manager *mgr)\n+{\n+  switch (TREE_CODE (index))\n+    {\n+    default:\n+      gcc_unreachable ();\n+    case INTEGER_CST:\n+      {\n+\tconst svalue *index_sval\n+\t  = mgr->get_or_create_constant_svalue (index);\n+\treturn mgr->get_element_region (parent_reg,\n+\t\t\t\t\tTREE_TYPE (parent_reg->get_type ()),\n+\t\t\t\t\tindex_sval);\n+      }\n+      break;\n+    case FIELD_DECL:\n+      return mgr->get_field_region (parent_reg, index);\n+    }\n+}\n+\n+/* Bind values from CONSTRUCTOR to this map, relative to\n+   PARENT_REG's relationship to its base region.  */\n+\n+void\n+binding_map::apply_ctor_to_region (const region *parent_reg, tree ctor,\n+\t\t\t\t   region_model_manager *mgr)\n+{\n+  gcc_assert (parent_reg);\n+  gcc_assert (TREE_CODE (ctor) == CONSTRUCTOR);\n+  gcc_assert (!CONSTRUCTOR_NO_CLEARING (ctor));\n+\n+  unsigned ix;\n+  tree index;\n+  tree val;\n+  FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (ctor), ix, index, val)\n+    {\n+      if (!index)\n+\tindex = build_int_cst (integer_type_node, ix);\n+      const region *child_reg\n+\t= get_subregion_within_ctor (parent_reg, index, mgr);\n+      if (TREE_CODE (val) == CONSTRUCTOR)\n+\tapply_ctor_to_region (child_reg, val, mgr);\n+      else\n+\t{\n+\t  gcc_assert (CONSTANT_CLASS_P (val));\n+\t  const svalue *cst_sval = mgr->get_or_create_constant_svalue (val);\n+\t  const binding_key *k\n+\t    = binding_key::make (mgr->get_store_manager (), child_reg,\n+\t\t\t\t BK_direct);\n+\t  put (k, cst_sval);\n+\t}\n+    }\n+}\n+\n /* class binding_cluster.  */\n \n /* binding_cluster's copy ctor.  */"}, {"sha": "16bad030b3606967c96499492c949b03fc7947ef", "filename": "gcc/analyzer/store.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2867118ddda9b56d991c16022f7d3d634ed08313/gcc%2Fanalyzer%2Fstore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2867118ddda9b56d991c16022f7d3d634ed08313/gcc%2Fanalyzer%2Fstore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.h?ref=2867118ddda9b56d991c16022f7d3d634ed08313", "patch": "@@ -340,6 +340,9 @@ class binding_map\n   void dump_to_pp (pretty_printer *pp, bool simple, bool multiline) const;\n   void dump (bool simple) const;\n \n+  void apply_ctor_to_region (const region *parent_reg, tree ctor,\n+\t\t\t     region_model_manager *mgr);\n+\n private:\n   map_t m_map;\n };"}]}