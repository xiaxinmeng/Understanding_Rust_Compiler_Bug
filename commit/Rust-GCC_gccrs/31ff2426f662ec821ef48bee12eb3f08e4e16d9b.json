{"sha": "31ff2426f662ec821ef48bee12eb3f08e4e16d9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFmZjI0MjZmNjYyZWM4MjFlZjQ4YmVlMTJlYjNmMDhlNGUxNmQ5Yg==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-10-21T13:01:35Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-10-21T13:01:35Z"}, "message": "cfgloop.c (flow_loops_find): Call bb_has_abnormal_pred.\n\n\t* cfgloop.c (flow_loops_find): Call bb_has_abnormal_pred.\n\t* reload1.c (has_nonexceptional_receiver): Likewise.\n\t* tree-into-ssa.c (rewrite_update_enter_block): Likewise.\n\t(create_new_def_for): Likewise.\n\t* tree-cfgcleanup.c (remove_forwarder_block): Likewise.\n\t(merge_phi_nodes): Likewise.\n\t(has_abnormal_incoming_edge_p): Delete.\n\nFrom-SVN: r165772", "tree": {"sha": "25c12529017cf06539baa62937edd24614e91926", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25c12529017cf06539baa62937edd24614e91926"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31ff2426f662ec821ef48bee12eb3f08e4e16d9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31ff2426f662ec821ef48bee12eb3f08e4e16d9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31ff2426f662ec821ef48bee12eb3f08e4e16d9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31ff2426f662ec821ef48bee12eb3f08e4e16d9b/comments", "author": null, "committer": null, "parents": [{"sha": "2f7ba24e1f6367bf8c1a094ec85eb4064f7cf6ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f7ba24e1f6367bf8c1a094ec85eb4064f7cf6ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f7ba24e1f6367bf8c1a094ec85eb4064f7cf6ff"}], "stats": {"total": 57, "additions": 18, "deletions": 39}, "files": [{"sha": "10649f9d47dbe5a27aa1f1126614b918aa0d0922", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ff2426f662ec821ef48bee12eb3f08e4e16d9b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ff2426f662ec821ef48bee12eb3f08e4e16d9b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31ff2426f662ec821ef48bee12eb3f08e4e16d9b", "patch": "@@ -1,3 +1,13 @@\n+2010-10-21  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* cfgloop.c (flow_loops_find): Call bb_has_abnormal_pred.\n+\t* reload1.c (has_nonexceptional_receiver): Likewise.\n+\t* tree-into-ssa.c (rewrite_update_enter_block): Likewise.\n+\t(create_new_def_for): Likewise.\n+\t* tree-cfgcleanup.c (remove_forwarder_block): Likewise.\n+\t(merge_phi_nodes): Likewise.\n+\t(has_abnormal_incoming_edge_p): Delete.\n+\n 2010-10-21  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/sse.md (ssescalarmodesuffix): Add V8SI and V4DI."}, {"sha": "22bce4f3190775fe915077e110cfe16f578e9a80", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ff2426f662ec821ef48bee12eb3f08e4e16d9b/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ff2426f662ec821ef48bee12eb3f08e4e16d9b/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=31ff2426f662ec821ef48bee12eb3f08e4e16d9b", "patch": "@@ -410,10 +410,7 @@ flow_loops_find (struct loops *loops)\n \n       /* If we have an abnormal predecessor, do not consider the\n \t loop (not worth the problems).  */\n-      FOR_EACH_EDGE (e, ei, header->preds)\n-\tif (e->flags & EDGE_ABNORMAL)\n-\t  break;\n-      if (e)\n+      if (bb_has_abnormal_pred (header))\n \tcontinue;\n \n       FOR_EACH_EDGE (e, ei, header->preds)"}, {"sha": "c8fd33a62a898fcd571d273e6a726bbfbc323f9a", "filename": "gcc/reload1.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ff2426f662ec821ef48bee12eb3f08e4e16d9b/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ff2426f662ec821ef48bee12eb3f08e4e16d9b/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=31ff2426f662ec821ef48bee12eb3f08e4e16d9b", "patch": "@@ -675,10 +675,8 @@ has_nonexceptional_receiver (void)\n   /* Now see if there's a reachable block with an exceptional incoming\n      edge.  */\n   FOR_EACH_BB (bb)\n-    if (bb->flags & BB_REACHABLE)\n-      FOR_EACH_EDGE (e, ei, bb->preds)\n-\tif (e->flags & EDGE_ABNORMAL)\n-\t  return true;\n+    if (bb->flags & BB_REACHABLE && bb_has_abnormal_pred (bb))\n+      return true;\n \n   /* No exceptional block reached exit unexceptionally.  */\n   return false;"}, {"sha": "ae23cfc6ab9aa3e3e400101cd9729496730ea10c", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ff2426f662ec821ef48bee12eb3f08e4e16d9b/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ff2426f662ec821ef48bee12eb3f08e4e16d9b/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=31ff2426f662ec821ef48bee12eb3f08e4e16d9b", "patch": "@@ -338,21 +338,6 @@ tree_forwarder_block_p (basic_block bb, bool phi_wanted)\n   return true;\n }\n \n-/* Return true if BB has at least one abnormal incoming edge.  */\n-\n-static inline bool\n-has_abnormal_incoming_edge_p (basic_block bb)\n-{\n-  edge e;\n-  edge_iterator ei;\n-\n-  FOR_EACH_EDGE (e, ei, bb->preds)\n-    if (e->flags & EDGE_ABNORMAL)\n-      return true;\n-\n-  return false;\n-}\n-\n /* If all the PHI nodes in DEST have alternatives for E1 and E2 and\n    those alternatives are equal in each of the PHI nodes, then return\n    true, else return false.  */\n@@ -418,8 +403,8 @@ remove_forwarder_block (basic_block bb)\n \n      So if there is an abnormal edge to BB, proceed only if there is\n      no abnormal edge to DEST and there are no phi nodes in DEST.  */\n-  if (has_abnormal_incoming_edge_p (bb)\n-      && (has_abnormal_incoming_edge_p (dest)\n+  if (bb_has_abnormal_pred (bb)\n+      && (bb_has_abnormal_pred (dest)\n \t  || !gimple_seq_empty_p (phi_nodes (dest))))\n     return false;\n \n@@ -990,7 +975,7 @@ merge_phi_nodes (void)\n       if (gimple_seq_empty_p (phi_nodes (dest))\n \t  /* We don't want to deal with a basic block with\n \t     abnormal edges.  */\n-\t  || has_abnormal_incoming_edge_p (bb))\n+\t  || bb_has_abnormal_pred (bb))\n \tcontinue;\n \n       if (!dominated_by_p (CDI_DOMINATORS, dest, bb))"}, {"sha": "8c2b159399da4e5897ad8131420c471f9e49dd57", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ff2426f662ec821ef48bee12eb3f08e4e16d9b/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ff2426f662ec821ef48bee12eb3f08e4e16d9b/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=31ff2426f662ec821ef48bee12eb3f08e4e16d9b", "patch": "@@ -2080,13 +2080,7 @@ rewrite_update_enter_block (struct dom_walk_data *walk_data ATTRIBUTE_UNUSED,\n \n   /* Mark the LHS if any of the arguments flows through an abnormal\n      edge.  */\n-  is_abnormal_phi = false;\n-  FOR_EACH_EDGE (e, ei, bb->preds)\n-    if (e->flags & EDGE_ABNORMAL)\n-      {\n-\tis_abnormal_phi = true;\n-\tbreak;\n-      }\n+  is_abnormal_phi = bb_has_abnormal_pred (bb);\n \n   /* If any of the PHI nodes is a replacement for a name in\n      OLD_SSA_NAMES or it's one of the names in NEW_SSA_NAMES, then\n@@ -2843,12 +2837,7 @@ create_new_def_for (tree old_name, gimple stmt, def_operand_p def)\n       basic_block bb = gimple_bb (stmt);\n \n       /* If needed, mark NEW_NAME as occurring in an abnormal PHI node. */\n-      FOR_EACH_EDGE (e, ei, bb->preds)\n-\tif (e->flags & EDGE_ABNORMAL)\n-\t  {\n-\t    SSA_NAME_OCCURS_IN_ABNORMAL_PHI (new_name) = 1;\n-\t    break;\n-\t  }\n+      SSA_NAME_OCCURS_IN_ABNORMAL_PHI (new_name) = bb_has_abnormal_pred (bb);\n     }\n \n   register_new_name_mapping (new_name, old_name);"}]}