{"sha": "b208ba405685dc77a095a22db323323abb3bf846", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIwOGJhNDA1Njg1ZGM3N2EwOTVhMjJkYjMyMzMyM2FiYjNiZjg0Ng==", "commit": {"author": {"name": "Caroline Tice", "email": "cmtice@google.com", "date": "2013-08-28T21:06:43Z"}, "committer": {"name": "Caroline Tice", "email": "ctice@gcc.gnu.org", "date": "2013-08-28T21:06:43Z"}, "message": "Replace fixed size array that was holding vtable pointers with a vector, allowing dynamic resizing.\n\nReplace fixed size array that was holding vtable pointers\nwith a vector, allowing dynamic resizing.  ALso fix issues with\nwarning diagnostics.\n\nFrom-SVN: r202060", "tree": {"sha": "b91ce3c583553fff1f3e57c01e9b109865973396", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b91ce3c583553fff1f3e57c01e9b109865973396"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b208ba405685dc77a095a22db323323abb3bf846", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b208ba405685dc77a095a22db323323abb3bf846", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b208ba405685dc77a095a22db323323abb3bf846", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b208ba405685dc77a095a22db323323abb3bf846/comments", "author": {"login": "cmtice", "id": 5561162, "node_id": "MDQ6VXNlcjU1NjExNjI=", "avatar_url": "https://avatars.githubusercontent.com/u/5561162?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cmtice", "html_url": "https://github.com/cmtice", "followers_url": "https://api.github.com/users/cmtice/followers", "following_url": "https://api.github.com/users/cmtice/following{/other_user}", "gists_url": "https://api.github.com/users/cmtice/gists{/gist_id}", "starred_url": "https://api.github.com/users/cmtice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cmtice/subscriptions", "organizations_url": "https://api.github.com/users/cmtice/orgs", "repos_url": "https://api.github.com/users/cmtice/repos", "events_url": "https://api.github.com/users/cmtice/events{/privacy}", "received_events_url": "https://api.github.com/users/cmtice/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1b08b734395b9ed5e19cd24cc7e373dc67a494b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b08b734395b9ed5e19cd24cc7e373dc67a494b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b08b734395b9ed5e19cd24cc7e373dc67a494b1"}], "stats": {"total": 122, "additions": 65, "deletions": 57}, "files": [{"sha": "da60378b1adb63269f2ce1f84d81737a12f48941", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b208ba405685dc77a095a22db323323abb3bf846/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b208ba405685dc77a095a22db323323abb3bf846/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b208ba405685dc77a095a22db323323abb3bf846", "patch": "@@ -1,3 +1,23 @@\n+2013-08-27  Caroline Tice  <cmtice@google.com>\n+\n+\t* vtable-class-hierarchy.c: Remove unnecessary include statements.\n+\t(MAX_SET_SIZE): Remove unnecessary constant.\n+\t(register_construction_vtables):  Make vtable_ptr_array parameter\n+\tinto a vector; remove num_args parameter. Change array accesses to\n+\tvector accesses.\n+\t(register_other_binfo_vtables): Ditto.\n+\t(insert_call_to_register_set): Ditto.\n+\t(insert_call_to_register_pair): Ditto.\n+\t(output_set_info):  Ditto.  Also change warning calls to warning_at\n+\tcalls, and fix format of warning messages.\n+\t(register_all_pairs): Change vtbl_ptr_array from an array into a\n+\tvector.  Remove num_vtable_args (replace with calls to vector length).\n+\tChange array stores & accesses to vector functions. Change calls to\n+\tregister_construction_vtables, register_other_binfo_vtables,\n+\tinsert_call_to_register_set, insert_call_to_register_pair and\n+\toutput_set_info to match their new signatures.  Change warning to\n+\twarning_at and fix the format of the warning message.\n+\n 2013-08-27  Jakub Jelinek  <jakub@redhat.com>\n \t    Aldy Hernandez  <aldyh@redhat.com>\n "}, {"sha": "276fa1f9966f2f4d6dd6dea802fa89bae6fb765b", "filename": "gcc/cp/vtable-class-hierarchy.c", "status": "modified", "additions": 45, "deletions": 57, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b208ba405685dc77a095a22db323323abb3bf846/gcc%2Fcp%2Fvtable-class-hierarchy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b208ba405685dc77a095a22db323323abb3bf846/gcc%2Fcp%2Fvtable-class-hierarchy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fvtable-class-hierarchy.c?ref=b208ba405685dc77a095a22db323323abb3bf846", "patch": "@@ -113,29 +113,12 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n-#include \"tm.h\"\n-#include \"timevar.h\"\n-#include \"cpplib.h\"\n-#include \"tree.h\"\n #include \"cp-tree.h\"\n-#include \"intl.h\"\n-#include \"c-family/c-pragma.h\"\n-#include \"decl.h\"\n-#include \"flags.h\"\n-#include \"diagnostic-core.h\"\n #include \"output.h\"\n-#include \"target.h\"\n #include \"cgraph.h\"\n-#include \"c-family/c-common.h\"\n-#include \"c-family/c-objc.h\"\n-#include \"plugin.h\"\n #include \"tree-iterator.h\"\n #include \"vtable-verify.h\"\n #include \"gimple.h\"\n-#include \"bitmap.h\"\n-#include \"libiberty.h\"\n-\n-#define MAX_SET_SIZE 5000\n \n static int num_calls_to_regset = 0;\n static int num_calls_to_regpair = 0;\n@@ -508,7 +491,7 @@ build_string_from_id (tree identifier)\n \n static void\n register_construction_vtables (tree base_class, tree record_type,\n-                               tree *vtable_ptr_array, int *num_args)\n+                               vec<tree> *vtable_ptr_array)\n {\n   tree vtbl_var_decl;\n \n@@ -587,10 +570,7 @@ register_construction_vtables (tree base_class, tree record_type,\n                   /* Add this vtable pointer to our set of valid\n                      pointers for the base class.  */\n \n-                  gcc_assert (*num_args < (MAX_SET_SIZE - 1));\n-\n-                  vtable_ptr_array[*num_args] = value;\n-                  *num_args = *num_args + 1;\n+                  vtable_ptr_array->safe_push (value);\n                   current_set_size++;\n                 }\n             }\n@@ -617,7 +597,7 @@ register_construction_vtables (tree base_class, tree record_type,\n \n static void\n register_other_binfo_vtables (tree binfo, tree base_class,\n-                              tree *vtable_ptr_array, int *num_args)\n+                              vec<tree> *vtable_ptr_array)\n {\n   unsigned ix;\n   tree base_binfo;\n@@ -641,16 +621,12 @@ register_other_binfo_vtables (tree binfo, tree base_class,\n                                                                base_class);\n           if (!already_registered)\n             {\n-              gcc_assert (*num_args < (MAX_SET_SIZE - 1));\n-\n-              vtable_ptr_array[*num_args] = vtable_address;\n-              *num_args = *num_args + 1;\n+              vtable_ptr_array->safe_push (vtable_address);\n               current_set_size++;\n             }\n         }\n \n-      register_other_binfo_vtables (base_binfo, base_class, vtable_ptr_array,\n-                                    num_args);\n+      register_other_binfo_vtables (base_binfo, base_class, vtable_ptr_array);\n     }\n }\n \n@@ -735,7 +711,8 @@ write_out_current_set_data (tree base_class, int set_size)\n \n   if (class_data_log_fd == -1)\n     {\n-      warning (0, \"Unable to open log file 'vtv_class_set_sizes.log'\");\n+      warning_at (UNKNOWN_LOCATION, 0,\n+\t\t  \"unable to open log file %<vtv_class_set_sizes.log%>: %m\");\n       return;\n     }\n \n@@ -775,11 +752,12 @@ build_key_buffer_arg (tree base_ptr_var_decl)\n }\n \n static void\n-insert_call_to_register_set (tree class_name, int num_args,\n-                             tree *vtbl_ptr_array, tree body, tree arg1,\n+insert_call_to_register_set (tree class_name,\n+                             vec<tree> *vtbl_ptr_array, tree body, tree arg1,\n                              tree arg2, tree size_hint_arg)\n {\n   tree call_expr;\n+  int num_args = vtbl_ptr_array->length();\n   char *array_arg_name = ACONCAT ((\"__vptr_array_\",\n                                    IDENTIFIER_POINTER (class_name), NULL));\n   tree array_arg_type = build_array_type_nelts (build_pointer_type\n@@ -808,7 +786,7 @@ insert_call_to_register_set (tree class_name, int num_args,\n \n   for (k = 0; k < num_args; ++k)\n     {\n-      CONSTRUCTOR_APPEND_ELT (array_elements, NULL_TREE, vtbl_ptr_array[k]);\n+      CONSTRUCTOR_APPEND_ELT (array_elements, NULL_TREE, (*vtbl_ptr_array)[k]);\n     }\n \n   initial = build_constructor (TREE_TYPE (array_arg), array_elements);\n@@ -833,14 +811,18 @@ insert_call_to_register_set (tree class_name, int num_args,\n }\n \n static void\n-insert_call_to_register_pair (tree vtable_address, int num_args, tree arg1,\n+insert_call_to_register_pair (vec<tree> *vtbl_ptr_array, tree arg1,\n                               tree arg2, tree size_hint_arg, tree str1,\n                               tree str2, tree body)\n {\n   tree call_expr;\n+  int num_args = vtbl_ptr_array->length();\n+  tree vtable_address = NULL_TREE;\n \n   if (num_args == 0)\n     vtable_address = build_int_cst (build_pointer_type (void_type_node), 0);\n+  else\n+    vtable_address = (*vtbl_ptr_array)[0];\n \n   if (flag_vtv_debug)\n     call_expr = build_call_expr (vlt_register_pairs_fndecl, 6, arg1, arg2,\n@@ -854,11 +836,12 @@ insert_call_to_register_pair (tree vtable_address, int num_args, tree arg1,\n }\n \n static void\n-output_set_info (tree record_type, tree *vtbl_ptr_array, int array_size)\n+output_set_info (tree record_type, vec<tree> vtbl_ptr_array)\n {\n   static int vtv_debug_log_fd = -1;\n   char buffer[1024];\n   int bytes_written __attribute__ ((unused));\n+  int array_len = vtbl_ptr_array.length();\n   const char *class_name =\n               IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (TYPE_NAME (record_type)));\n   char *file_name = get_log_file_name (\"vtv_set_ptr_data.log\");\n@@ -868,11 +851,12 @@ output_set_info (tree record_type, tree *vtbl_ptr_array, int array_size)\n                              O_WRONLY | O_APPEND | O_CREAT, S_IRWXU);\n   if (vtv_debug_log_fd == -1)\n     {\n-      warning (0, \"Unable to open log file 'vtv_set_ptr_data.log'\");\n+      warning_at (UNKNOWN_LOCATION, 0,\n+\t\t  \"unable to open log file %<vtv_set_ptr_data.log%>: %m\");\n       return;\n     }\n \n-  for (int i = 0; i < array_size; ++i)\n+  for (int i = 0; i < array_len; ++i)\n     {\n       const char *vptr_name = \"unknown\";\n       int vptr_offset = 0;\n@@ -911,8 +895,7 @@ static bool\n register_all_pairs (tree body)\n {\n   bool registered_at_least_one = false;\n-  tree vtbl_ptr_array[MAX_SET_SIZE];\n-  int num_vtable_args = 0;\n+  vec<tree> *vtbl_ptr_array = NULL;\n   unsigned j;\n \n   for (j = 0; j < num_vtable_map_nodes; ++j)\n@@ -938,7 +921,11 @@ register_all_pairs (tree body)\n       new_type = build_pointer_type (TREE_TYPE (base_ptr_var_decl));\n       arg1 = build1 (ADDR_EXPR, new_type, base_ptr_var_decl);\n \n-      num_vtable_args = 0;\n+      /* We need a fresh vector for each iteration.  */\n+      if (vtbl_ptr_array)\n+\tvec_free (vtbl_ptr_array);\n+\n+      vec_alloc (vtbl_ptr_array, 10);\n \n       for (i = 0; i < num_vtable_map_nodes; ++i)\n         if (bitmap_bit_p (current->class_info->descendants, i))\n@@ -977,25 +964,22 @@ register_all_pairs (tree body)\n \n                     if (!already_registered)\n                       {\n-\n-                        vtbl_ptr_array[num_vtable_args++] = vtable_address;\n+                        vtbl_ptr_array->safe_push (vtable_address);\n \n                         /* Find and handle any 'extra' vtables associated\n                            with this class, via virtual inheritance.   */\n                         register_construction_vtables (base_class, class_type,\n-                                                       vtbl_ptr_array,\n-                                                       &num_vtable_args);\n+                                                       vtbl_ptr_array);\n \n                         /* Find and handle any 'extra' vtables associated\n                            with this class, via multiple inheritance.   */\n                         register_other_binfo_vtables (binfo, base_class,\n-                                                      vtbl_ptr_array,\n-                                                      &num_vtable_args);\n+                                                      vtbl_ptr_array);\n                       }\n                   }\n               }\n           }\n-      current_set_size = num_vtable_args;\n+      current_set_size = vtbl_ptr_array->length();\n \n       /* Sometimes we need to initialize the set symbol even if we are\n          not adding any vtable pointers to the set in the current\n@@ -1009,9 +993,12 @@ register_all_pairs (tree body)\n       /* If we have added vtable pointers to the set in this\n          compilation unit, adjust the size hint for the set's hash\n          table appropriately.  */\n-      if (num_vtable_args > 0)\n-        while ((size_t) num_vtable_args > size_hint)\n-          size_hint <<= 1;\n+      if (vtbl_ptr_array->length() > 0)\n+\t{\n+\t  unsigned len = vtbl_ptr_array->length();\n+\t  while ((size_t) len > size_hint)\n+\t    size_hint <<= 1;\n+\t}\n       size_hint_arg = build_int_cst (size_type_node, size_hint);\n \n       /* Get the key-buffer argument.  */\n@@ -1023,23 +1010,23 @@ register_all_pairs (tree body)\n \n       if (flag_vtv_debug)\n         output_set_info (current->class_info->class_type,\n-                         vtbl_ptr_array, num_vtable_args);\n+                         *vtbl_ptr_array);\n \n-      if (num_vtable_args > 1)\n+      if (vtbl_ptr_array->length() > 1)\n         {\n-          insert_call_to_register_set (current->class_name, num_vtable_args,\n+          insert_call_to_register_set (current->class_name,\n                                        vtbl_ptr_array, body, arg1, arg2,\n                                        size_hint_arg);\n           registered_at_least_one = true;\n         }\n-      else if (num_vtable_args >= 0)\n+      else\n         {\n \n-          if (num_vtable_args > 0\n+          if (vtbl_ptr_array->length() > 0\n               || (current->is_used\n                   || (current->registered.size() > 0)))\n             {\n-              insert_call_to_register_pair (vtbl_ptr_array[0], num_vtable_args,\n+              insert_call_to_register_pair (vtbl_ptr_array,\n                                             arg1, arg2, size_hint_arg, str1,\n                                             str2, body);\n               registered_at_least_one = true;\n@@ -1114,7 +1101,8 @@ write_out_vtv_count_data (void)\n                              O_WRONLY | O_APPEND | O_CREAT, S_IRWXU);\n   if (vtv_count_log_fd == -1)\n     {\n-      warning (0, \"Unable to open log file 'vtv_count_data.log'\");\n+      warning_at (UNKNOWN_LOCATION, 0,\n+\t\t  \"unable to open log file %<vtv_count_data.log%>: %m\");\n       return;\n     }\n "}]}