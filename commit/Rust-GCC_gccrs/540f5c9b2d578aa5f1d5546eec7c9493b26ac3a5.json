{"sha": "540f5c9b2d578aa5f1d5546eec7c9493b26ac3a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQwZjVjOWIyZDU3OGFhNWYxZDU1NDZlZWM3Yzk0OTNiMjZhYzNhNQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-05-13T13:58:00Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-05-13T13:58:00Z"}, "message": "2002-05-13  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/fstream.tcc\n\t(basic_filebuf::_M_allocate_internal_buffer): Remove extraneous\n\ttry/catch blocks.\n\t* src/localename.cc (locale::_Impl::_M_install_facet): Same.\n\n\t* docs/html/install.html: Tweak, add bits about required locales\n\tfor the 22_locale tests when using the gnu model.\n\n\t* testsuite/27_io/istream_sentry.cc: Tweak.\n\nFrom-SVN: r53423", "tree": {"sha": "33dcb11f77ea15c38b0a56909da70847cdb36831", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33dcb11f77ea15c38b0a56909da70847cdb36831"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/540f5c9b2d578aa5f1d5546eec7c9493b26ac3a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/540f5c9b2d578aa5f1d5546eec7c9493b26ac3a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/540f5c9b2d578aa5f1d5546eec7c9493b26ac3a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/540f5c9b2d578aa5f1d5546eec7c9493b26ac3a5/comments", "author": null, "committer": null, "parents": [{"sha": "a8b432f4def6548c398a660a2880517f20802fcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8b432f4def6548c398a660a2880517f20802fcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8b432f4def6548c398a660a2880517f20802fcc"}], "stats": {"total": 90, "additions": 58, "deletions": 32}, "files": [{"sha": "5d5f675639533ceb72e94c6dfa790e64cdff4559", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/540f5c9b2d578aa5f1d5546eec7c9493b26ac3a5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/540f5c9b2d578aa5f1d5546eec7c9493b26ac3a5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=540f5c9b2d578aa5f1d5546eec7c9493b26ac3a5", "patch": "@@ -1,3 +1,15 @@\n+2002-05-13  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/fstream.tcc\n+\t(basic_filebuf::_M_allocate_internal_buffer): Remove extraneous\n+\ttry/catch blocks.\n+\t* src/localename.cc (locale::_Impl::_M_install_facet): Same.\n+\n+\t* docs/html/install.html: Tweak, add bits about required locales\n+\tfor the 22_locale tests when using the gnu model.\n+\n+\t* testsuite/27_io/istream_sentry.cc: Tweak.\n+\t\n 2002-05-13  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* config/os/irix/irix5.2/bits/ctype_inline.h (scan_is, scan_not):"}, {"sha": "c2ec0305a9d9688fd54dbc838b95e4541ffc7a56", "filename": "libstdc++-v3/docs/html/install.html", "status": "modified", "additions": 43, "deletions": 18, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/540f5c9b2d578aa5f1d5546eec7c9493b26ac3a5/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Finstall.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/540f5c9b2d578aa5f1d5546eec7c9493b26ac3a5/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Finstall.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Finstall.html?ref=540f5c9b2d578aa5f1d5546eec7c9493b26ac3a5", "patch": "@@ -67,32 +67,57 @@ <h2><a name=\"prereqs\">Tools you will need beforehand</a></h2>\n \n    <p>As of June 19, 2000, libstdc++ attempts to use tricky and\n       space-saving features of the GNU toolchain, enabled with\n-      <code>-ffunction-sections -fdata-sections -Wl,--gc-sections</code>.\n-      To obtain maximum benefit from this, binutils after this date\n-      should also be used (bugs were fixed with C++ exception handling\n-      related to this change in libstdc++-v3).  The version of these\n-      tools should be <code>2.10.90</code>, and you can get snapshots (as\n-      well as releases) of binutils\n-      <a href=\"ftp://sources.redhat.com/pub/binutils\">here</a>.\n+      <code>-ffunction-sections -fdata-sections\n+      -Wl,--gc-sections</code>.  To obtain maximum benefit from this,\n+      binutils after this date should also be used (bugs were fixed\n+      with C++ exception handling related to this change in\n+      libstdc++-v3).  The version of these tools should be\n+      <code>2.10.90</code>, or later, and you can get snapshots (as\n+      well as releases) of binutils \n+      <a href=\"ftp://sources.redhat.com/pub/binutils\">here</a>. The\n+      configure process will automatically detect and use these\n+      features if the underlying support is present.\n    </p>\n \n    <p>If you are using a 3.1-series libstdc++ snapshot, then the\n-      requirements are slightly more stringent:  the compiler sources must\n-      also be 3.1 or later (for both technical and licensing reasons), and\n-      your binutils must be 2.11.95 or later if you want to use symbol\n-      versioning in shared libraries.\n+      requirements are slightly more stringent: the compiler sources\n+      must also be 3.1 or later (for both technical and licensing\n+      reasons), and your binutils must be 2.11.95 or later if you want\n+      to use symbol versioning in shared libraries. Again, the\n+      configure process will automatically detect and use these\n+      features if the underlying support is present.\n    </p>\n  \n- <!-- Commented until some system-specific requirements appear.\n-   <p>Finally, a few system-specific requirements:\n+    <p>Finally, a few system-specific requirements:\n       <dl>\n-        <dt>Cygwin\n-        <dd>If you are using Cygwin to compile libstdc++-v3 on Win32, you'll\n-            [snip]\n-\n+        <dt> linux\n+\n+        <dd>If you are using gcc 3.1 or later on linux, and are using\n+        the gnu locale model (enabled by default for sufficient\n+        versions of glibc), the following locales are used and tested\n+        in the libstdc++ testsuites: en_HK, en_US, fr_FR, fr_FR@euro,\n+        de_DE, de_DE@euro, ja_JP.eucjp, and it_IT. Failure to have the\n+        underlying \"C\" library locale information installed will mean\n+        that C++ named locales for the above regions will not work:\n+        because of this, the libstdc++ testsuite will not pass the\n+        named locale tests. If this isn't an issue, don't worry about\n+        it. If named locales are needed, the underlying locale\n+        information must be installed. Note that rebuilding libstdc++\n+        after locales are installed is not necessary. \n+\t\n+\t<p> To install\n+        support for locales, do only one of the following: </p>\n+        <p>\n+ \t  <li> install all locales\n+\t  <p> <code> export LC_ALL=C </code> </p>\n+\t  <p> <code> rpm -e glibc-common --nodeps </code> </p>\n+\t  <p> <code> rpm -i --define \"_install_langs all\" \n+\t  glibc-common-2.2.5-34.i386.rpm </code> </p>\n+ \t  <li> install just the necessary locales\n+\t  <p> <code> localedef -i de_DE -f ISO-8859-1 de_DE </code> </p>\n+         </p>\n       </dl>\n    </p>\n--->\n \n <hr>\n "}, {"sha": "5b7e8bf9eaedd04f2100e35966e68e6baf591cd1", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/540f5c9b2d578aa5f1d5546eec7c9493b26ac3a5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/540f5c9b2d578aa5f1d5546eec7c9493b26ac3a5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=540f5c9b2d578aa5f1d5546eec7c9493b26ac3a5", "patch": "@@ -49,12 +49,7 @@ namespace std\n \t  _M_buf_size = _M_buf_size_opt;\n \n \t  // Allocate internal buffer.\n-\t  try { _M_buf = new char_type[_M_buf_size]; }\n-\t  catch(...) \n-\t    {\n-\t      delete [] _M_buf;\n-\t      __throw_exception_again;\n-\t    }\n+\t  _M_buf = new char_type[_M_buf_size]; \n \t  _M_buf_allocated = true;\n \t}\n     }"}, {"sha": "824d9790cef9f5e8b81248a626e2de96e6854a53", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/540f5c9b2d578aa5f1d5546eec7c9493b26ac3a5/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/540f5c9b2d578aa5f1d5546eec7c9493b26ac3a5/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=540f5c9b2d578aa5f1d5546eec7c9493b26ac3a5", "patch": "@@ -255,13 +255,7 @@ namespace std\n \t    facet** __old = _M_facets;\n \t    facet** __new;\n \t    const size_t __new_size = __index + 4;\n-\t    try\n-\t      { __new = new facet*[__new_size]; }\n-\t    catch(...) \n-\t      {\n-\t\tdelete [] __new;\n-\t\t__throw_exception_again;\n-\t      }\n+\t    __new = new facet*[__new_size]; \n \t    for (size_t __i = 0; __i < _M_facets_size; ++__i)\n \t      __new[__i] = _M_facets[__i];\n \t    for (size_t __i2 = _M_facets_size; __i2 < __new_size; ++__i2)"}, {"sha": "8ff446f09fc22dbc53c15868d8ba211943a6bdf2", "filename": "libstdc++-v3/testsuite/27_io/istream_sentry.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/540f5c9b2d578aa5f1d5546eec7c9493b26ac3a5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_sentry.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/540f5c9b2d578aa5f1d5546eec7c9493b26ac3a5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_sentry.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_sentry.cc?ref=540f5c9b2d578aa5f1d5546eec7c9493b26ac3a5", "patch": "@@ -70,7 +70,7 @@ test02()\n   double x;\n \n   // ios_base::eof == 2\n-  while(in >> x)\n+  while (in >> x)\n     {\n       ++i;\n       if (i > 3) "}]}