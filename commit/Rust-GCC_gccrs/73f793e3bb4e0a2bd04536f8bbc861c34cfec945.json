{"sha": "73f793e3bb4e0a2bd04536f8bbc861c34cfec945", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNmNzkzZTNiYjRlMGEyYmQwNDUzNmY4YmJjODYxYzM0Y2ZlYzk0NQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-05-28T19:49:18Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-05-28T19:49:18Z"}, "message": "md.texi: Document that the % constraint character must be at the beginning of the string.\n\ngcc/\n\t* doc/md.texi: Document that the % constraint character must\n\tbe at the beginning of the string.\n\t* genoutput.c (validate_insn_alternatives): Check that '=',\n\t'+' and '%' only appear at the beginning of a constraint.\n\t* ira.c (commutative_constraint_p): Delete.\n\t(ira_get_dup_out_num): Expect the '%' commutativity marker to be\n\tat the start of the string.\n\t* config/alpha/alpha.md (*movmemdi_1, *clrmemdi_1): Remove\n\tduplicate '='s.\n\t* config/arm/neon.md (bicdi3_neon): Likewise.\n\t* config/iq2000/iq2000.md (addsi3_internal, subsi3_internal, sgt_si)\n\t(slt_si, sltu_si): Likewise.\n\t* config/vax/vax.md (sbcdi3): Likewise.\n\t* config/h8300/h8300.md (*cmpstz): Remove duplicate '+'.\n\t* config/arc/arc.md (mulsi_600, mulsidi_600, umulsidi_600)\n\t(mul64): Move '%' to beginning of constraint.\n\t* config/arm/arm.md (*xordi3_insn): Likewise.\n\t* config/nds32/nds32.md (add<mode>3, mulsi3, andsi3, iorsi3)\n\t(xorsi3): Likewise.\n\nFrom-SVN: r211031", "tree": {"sha": "18194c4ebc03529b7414e609111af0e8e670d580", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18194c4ebc03529b7414e609111af0e8e670d580"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73f793e3bb4e0a2bd04536f8bbc861c34cfec945", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73f793e3bb4e0a2bd04536f8bbc861c34cfec945", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73f793e3bb4e0a2bd04536f8bbc861c34cfec945", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73f793e3bb4e0a2bd04536f8bbc861c34cfec945/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5a7555ab101f5796bc51f9175552d7c77f79754b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a7555ab101f5796bc51f9175552d7c77f79754b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a7555ab101f5796bc51f9175552d7c77f79754b"}], "stats": {"total": 121, "additions": 61, "deletions": 60}, "files": [{"sha": "034d9b051c00c7745be97f5781bfde44b54e695e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f793e3bb4e0a2bd04536f8bbc861c34cfec945/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f793e3bb4e0a2bd04536f8bbc861c34cfec945/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73f793e3bb4e0a2bd04536f8bbc861c34cfec945", "patch": "@@ -1,3 +1,25 @@\n+2014-05-28  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* doc/md.texi: Document that the % constraint character must\n+\tbe at the beginning of the string.\n+\t* genoutput.c (validate_insn_alternatives): Check that '=',\n+\t'+' and '%' only appear at the beginning of a constraint.\n+\t* ira.c (commutative_constraint_p): Delete.\n+\t(ira_get_dup_out_num): Expect the '%' commutativity marker to be\n+\tat the start of the string.\n+\t* config/alpha/alpha.md (*movmemdi_1, *clrmemdi_1): Remove\n+\tduplicate '='s.\n+\t* config/arm/neon.md (bicdi3_neon): Likewise.\n+\t* config/iq2000/iq2000.md (addsi3_internal, subsi3_internal, sgt_si)\n+\t(slt_si, sltu_si): Likewise.\n+\t* config/vax/vax.md (sbcdi3): Likewise.\n+\t* config/h8300/h8300.md (*cmpstz): Remove duplicate '+'.\n+\t* config/arc/arc.md (mulsi_600, mulsidi_600, umulsidi_600)\n+\t(mul64): Move '%' to beginning of constraint.\n+\t* config/arm/arm.md (*xordi3_insn): Likewise.\n+\t* config/nds32/nds32.md (add<mode>3, mulsi3, andsi3, iorsi3)\n+\t(xorsi3): Likewise.\n+\n 2014-05-28  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* doc/md.texi: Document the restrictions on the \"enabled\" attribute."}, {"sha": "34ff1f0062ff9fa3e2406091f1d6d2cf7e409930", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f793e3bb4e0a2bd04536f8bbc861c34cfec945/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f793e3bb4e0a2bd04536f8bbc861c34cfec945/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=73f793e3bb4e0a2bd04536f8bbc861c34cfec945", "patch": "@@ -4764,7 +4764,7 @@\n   \"operands[4] = gen_rtx_SYMBOL_REF (Pmode, \\\"OTS$MOVE\\\");\")\n \n (define_insn \"*movmemdi_1\"\n-  [(set (match_operand:BLK 0 \"memory_operand\" \"=m,=m\")\n+  [(set (match_operand:BLK 0 \"memory_operand\" \"=m,m\")\n \t(match_operand:BLK 1 \"memory_operand\" \"m,m\"))\n    (use (match_operand:DI 2 \"nonmemory_operand\" \"r,i\"))\n    (use (match_operand:DI 3 \"immediate_operand\"))\n@@ -4831,7 +4831,7 @@\n })\n \n (define_insn \"*clrmemdi_1\"\n-  [(set (match_operand:BLK 0 \"memory_operand\" \"=m,=m\")\n+  [(set (match_operand:BLK 0 \"memory_operand\" \"=m,m\")\n \t\t   (const_int 0))\n    (use (match_operand:DI 1 \"nonmemory_operand\" \"r,i\"))\n    (use (match_operand:DI 2 \"immediate_operand\"))"}, {"sha": "2f93d7cd2bed0ebfaaba197023aff1b03708234e", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f793e3bb4e0a2bd04536f8bbc861c34cfec945/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f793e3bb4e0a2bd04536f8bbc861c34cfec945/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=73f793e3bb4e0a2bd04536f8bbc861c34cfec945", "patch": "@@ -1698,7 +1698,7 @@\n \n (define_insn \"mulsi_600\"\n   [(set (match_operand:SI 2 \"mlo_operand\" \"\")\n-\t(mult:SI (match_operand:SI 0 \"register_operand\"  \"Rcq#q,c,c,%c\")\n+\t(mult:SI (match_operand:SI 0 \"register_operand\"  \"%Rcq#q,c,c,c\")\n \t\t (match_operand:SI 1 \"nonmemory_operand\" \"Rcq#q,cL,I,Cal\")))\n    (clobber (match_operand:SI 3 \"mhi_operand\" \"\"))]\n   \"TARGET_MUL64_SET\"\n@@ -1750,7 +1750,7 @@\n (define_insn \"mulsidi_600\"\n   [(set (reg:DI MUL64_OUT_REG)\n \t(mult:DI (sign_extend:DI\n-\t\t   (match_operand:SI 0 \"register_operand\"  \"Rcq#q,c,c,%c\"))\n+\t\t   (match_operand:SI 0 \"register_operand\"  \"%Rcq#q,c,c,c\"))\n \t\t (sign_extend:DI\n ; assembler issue for \"I\", see mulsi_600\n ;\t\t   (match_operand:SI 1 \"register_operand\" \"Rcq#q,cL,I,Cal\"))))]\n@@ -1766,7 +1766,7 @@\n (define_insn \"umulsidi_600\"\n   [(set (reg:DI MUL64_OUT_REG)\n \t(mult:DI (zero_extend:DI\n-\t\t   (match_operand:SI 0 \"register_operand\"  \"c,c,%c\"))\n+\t\t   (match_operand:SI 0 \"register_operand\"  \"%c,c,c\"))\n \t\t (sign_extend:DI\n ; assembler issue for \"I\", see mulsi_600\n ;\t\t   (match_operand:SI 1 \"register_operand\" \"cL,I,Cal\"))))]\n@@ -4134,7 +4134,7 @@\n \n ;; FIXME: an intrinsic for multiply is daft.  Can we remove this?\n (define_insn \"mul64\"\n-  [(unspec [(match_operand:SI 0 \"general_operand\" \"q,r,r,%r\")\n+  [(unspec [(match_operand:SI 0 \"general_operand\" \"%q,r,r,r\")\n \t\t     (match_operand:SI 1 \"general_operand\" \"q,rL,I,Cal\")]\n \t\t   UNSPEC_MUL64)]\n   \"TARGET_MUL64_SET\""}, {"sha": "74403fdc7c08582e255c795d42f3c3dfa2245da9", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f793e3bb4e0a2bd04536f8bbc861c34cfec945/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f793e3bb4e0a2bd04536f8bbc861c34cfec945/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=73f793e3bb4e0a2bd04536f8bbc861c34cfec945", "patch": "@@ -3169,7 +3169,7 @@\n \n (define_insn_and_split \"*xordi3_insn\"\n   [(set (match_operand:DI         0 \"s_register_operand\" \"=w,&r,&r,&r,&r,?w\")\n-\t(xor:DI (match_operand:DI 1 \"s_register_operand\" \"w ,%0,r ,0 ,r ,w\")\n+\t(xor:DI (match_operand:DI 1 \"s_register_operand\" \"%w ,0,r ,0 ,r ,w\")\n \t\t(match_operand:DI 2 \"arm_xordi_operand\"  \"w ,r ,r ,Dg,Dg,w\")))]\n   \"TARGET_32BIT && !TARGET_IWMMXT\"\n {"}, {"sha": "1fc4dcd827585b857e192b1276008521c192c4a7", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f793e3bb4e0a2bd04536f8bbc861c34cfec945/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f793e3bb4e0a2bd04536f8bbc861c34cfec945/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=73f793e3bb4e0a2bd04536f8bbc861c34cfec945", "patch": "@@ -728,7 +728,7 @@\n \n ;; Compare to *anddi_notdi_di.\n (define_insn \"bicdi3_neon\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,?=&r,?&r\")\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,?&r,?&r\")\n         (and:DI (not:DI (match_operand:DI 2 \"s_register_operand\" \"w,r,0\"))\n \t\t(match_operand:DI 1 \"s_register_operand\" \"w,0,r\")))]\n   \"TARGET_NEON\""}, {"sha": "bc592dcfaf31aa463a3b25c5322807c54c0f64a5", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f793e3bb4e0a2bd04536f8bbc861c34cfec945/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f793e3bb4e0a2bd04536f8bbc861c34cfec945/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=73f793e3bb4e0a2bd04536f8bbc861c34cfec945", "patch": "@@ -3589,7 +3589,7 @@\n   [(set_attr \"cc\" \"clobber\")])\n \n (define_insn_and_split \"*cmpstz\"\n-  [(set (zero_extract:QI (match_operand:QI 0 \"bit_memory_operand\" \"+WU,+WU\")\n+  [(set (zero_extract:QI (match_operand:QI 0 \"bit_memory_operand\" \"+WU,WU\")\n \t\t\t (const_int 1)\n \t\t\t (match_operand:QI 1 \"immediate_operand\" \"n,n\"))\n \t(match_operator:QI 2 \"eqne_operator\""}, {"sha": "96ba555f8d2f424e543c18ee8db657d6ed050732", "filename": "gcc/config/iq2000/iq2000.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f793e3bb4e0a2bd04536f8bbc861c34cfec945/gcc%2Fconfig%2Fiq2000%2Fiq2000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f793e3bb4e0a2bd04536f8bbc861c34cfec945/gcc%2Fconfig%2Fiq2000%2Fiq2000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.md?ref=73f793e3bb4e0a2bd04536f8bbc861c34cfec945", "patch": "@@ -260,7 +260,7 @@\n   \"\")\n \n (define_insn \"addsi3_internal\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,=d\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n \t(plus:SI (match_operand:SI 1 \"reg_or_0_operand\" \"dJ,dJ\")\n \t\t (match_operand:SI 2 \"arith_operand\" \"d,I\")))]\n   \"\"\n@@ -286,7 +286,7 @@\n   \"\")\n \n (define_insn \"subsi3_internal\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,=d\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n \t(minus:SI (match_operand:SI 1 \"reg_or_0_operand\" \"dJ,dJ\")\n \t\t  (match_operand:SI 2 \"arith_operand\" \"d,I\")))]\n   \"\"\n@@ -1229,7 +1229,7 @@\n    (set_attr \"mode\"\t\"SI\")])\n \n (define_insn \"sgt_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,=d\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n \t(gt:SI (match_operand:SI 1 \"register_operand\" \"d,d\")\n \t       (match_operand:SI 2 \"reg_or_0_operand\" \"d,J\")))]\n   \"\"\n@@ -1240,7 +1240,7 @@\n    (set_attr \"mode\"\t\"SI,SI\")])\n \n (define_insn \"slt_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,=d\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n \t(lt:SI (match_operand:SI 1 \"register_operand\" \"d,d\")\n \t       (match_operand:SI 2 \"arith_operand\" \"d,I\")))]\n   \"\"\n@@ -1273,7 +1273,7 @@\n    (set_attr \"mode\"\t\"SI\")])\n \n (define_insn \"sltu_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,=d\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n \t(ltu:SI (match_operand:SI 1 \"register_operand\" \"d,d\")\n \t\t(match_operand:SI 2 \"arith_operand\" \"d,I\")))]\n   \"\""}, {"sha": "da3a97a538feac506084d5064f2d4285c05bd3b0", "filename": "gcc/config/nds32/nds32.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f793e3bb4e0a2bd04536f8bbc861c34cfec945/gcc%2Fconfig%2Fnds32%2Fnds32.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f793e3bb4e0a2bd04536f8bbc861c34cfec945/gcc%2Fconfig%2Fnds32%2Fnds32.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.md?ref=73f793e3bb4e0a2bd04536f8bbc861c34cfec945", "patch": "@@ -261,7 +261,7 @@\n \n (define_insn \"add<mode>3\"\n   [(set (match_operand:QIHISI 0 \"register_operand\"                   \"=   d,    l,    d,    l,  d, l,    k,    l,    r, r\")\n-\t(plus:QIHISI (match_operand:QIHISI 1 \"register_operand\"      \"    0,    l,    0,    l, %0, l,    0,    k,    r, r\")\n+\t(plus:QIHISI (match_operand:QIHISI 1 \"register_operand\"      \"%   0,    l,    0,    l,  0, l,    0,    k,    r, r\")\n \t\t     (match_operand:QIHISI 2 \"nds32_rimm15s_operand\" \" In05, In03, Iu05, Iu03,  r, l, Is10, Iu06, Is15, r\")))]\n   \"\"\n {\n@@ -382,9 +382,9 @@\n ;; Multiplication instructions.\n \n (define_insn \"mulsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\"          \"= w, r\")\n-\t(mult:SI (match_operand:SI 1 \"register_operand\" \" %0, r\")\n-\t\t (match_operand:SI 2 \"register_operand\" \"  w, r\")))]\n+  [(set (match_operand:SI 0 \"register_operand\"          \"=w, r\")\n+\t(mult:SI (match_operand:SI 1 \"register_operand\" \"%0, r\")\n+\t\t (match_operand:SI 2 \"register_operand\" \" w, r\")))]\n   \"\"\n   \"@\n   mul33\\t%0, %2\n@@ -489,9 +489,9 @@\n )\n \n (define_insn \"andsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\"         \"= w, r,    l,    l,    l,    l,    l,    l,    r,   r,     r,    r,    r\")\n-\t(and:SI (match_operand:SI 1 \"register_operand\" \" %0, r,    l,    l,    l,    l,    0,    0,    r,   r,     r,    r,    r\")\n-\t\t(match_operand:SI 2 \"general_operand\"  \"  w, r, Izeb, Izeh, Ixls, Ix11, Ibms, Ifex, Izeb, Izeh, Iu15, Ii15, Ic15\")))]\n+  [(set (match_operand:SI 0 \"register_operand\"         \"=w, r,    l,    l,    l,    l,    l,    l,    r,   r,     r,    r,    r\")\n+\t(and:SI (match_operand:SI 1 \"register_operand\" \"%0, r,    l,    l,    l,    l,    0,    0,    r,   r,     r,    r,    r\")\n+\t\t(match_operand:SI 2 \"general_operand\"  \" w, r, Izeb, Izeh, Ixls, Ix11, Ibms, Ifex, Izeb, Izeh, Iu15, Ii15, Ic15\")))]\n   \"\"\n {\n   HOST_WIDE_INT mask = INTVAL (operands[2]);\n@@ -585,9 +585,9 @@\n ;; For V3/V3M ISA, we have 'or33' instruction.\n ;; So we can identify 'or Rt3,Rt3,Ra3' case and set its length to be 2.\n (define_insn \"iorsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\"         \"= w, r,    r,    r\")\n-\t(ior:SI (match_operand:SI 1 \"register_operand\" \" %0, r,    r,    r\")\n-\t\t(match_operand:SI 2 \"general_operand\"  \"  w, r, Iu15, Ie15\")))]\n+  [(set (match_operand:SI 0 \"register_operand\"         \"=w, r,    r,    r\")\n+\t(ior:SI (match_operand:SI 1 \"register_operand\" \"%0, r,    r,    r\")\n+\t\t(match_operand:SI 2 \"general_operand\"  \" w, r, Iu15, Ie15\")))]\n   \"\"\n {\n   int one_position;\n@@ -645,9 +645,9 @@\n ;; For V3/V3M ISA, we have 'xor33' instruction.\n ;; So we can identify 'xor Rt3,Rt3,Ra3' case and set its length to be 2.\n (define_insn \"xorsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\"         \"= w, r,    r,    r\")\n-\t(xor:SI (match_operand:SI 1 \"register_operand\" \" %0, r,    r,    r\")\n-\t\t(match_operand:SI 2 \"general_operand\"  \"  w, r, Iu15, It15\")))]\n+  [(set (match_operand:SI 0 \"register_operand\"         \"=w, r,    r,    r\")\n+\t(xor:SI (match_operand:SI 1 \"register_operand\" \"%0, r,    r,    r\")\n+\t\t(match_operand:SI 2 \"general_operand\"  \" w, r, Iu15, It15\")))]\n   \"\"\n {\n   int one_position;"}, {"sha": "fc73367dfea864f80ab33f3590451fbb2aff6ddc", "filename": "gcc/config/vax/vax.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f793e3bb4e0a2bd04536f8bbc861c34cfec945/gcc%2Fconfig%2Fvax%2Fvax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f793e3bb4e0a2bd04536f8bbc861c34cfec945/gcc%2Fconfig%2Fvax%2Fvax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.md?ref=73f793e3bb4e0a2bd04536f8bbc861c34cfec945", "patch": "@@ -423,7 +423,7 @@\n   \"vax_expand_addsub_di_operands (operands, MINUS); DONE;\")\n \n (define_insn \"sbcdi3\"\n-  [(set (match_operand:DI 0 \"nonimmediate_addsub_di_operand\" \"=Rr,=Rr\")\n+  [(set (match_operand:DI 0 \"nonimmediate_addsub_di_operand\" \"=Rr,Rr\")\n \t(minus:DI (match_operand:DI 1 \"general_addsub_di_operand\" \"0,I\")\n \t\t  (match_operand:DI 2 \"general_addsub_di_operand\" \"nRr,Rr\")))]\n   \"TARGET_QMATH\""}, {"sha": "7c3d7142aa19fc94a1fd03d2dadcdf9553b256e4", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f793e3bb4e0a2bd04536f8bbc861c34cfec945/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f793e3bb4e0a2bd04536f8bbc861c34cfec945/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=73f793e3bb4e0a2bd04536f8bbc861c34cfec945", "patch": "@@ -1589,7 +1589,10 @@ See, for example, the @samp{mulsi3} insn of the ARM@.\n Declares the instruction to be commutative for this operand and the\n following operand.  This means that the compiler may interchange the\n two operands if that is the cheapest way to make all operands fit the\n-constraints.\n+constraints.  @samp{%} applies to all alternatives and must appear as\n+the first character in the constraint.  Only input operands can use\n+@samp{%}.\n+\n @ifset INTERNALS\n This is often used in patterns for addition instructions\n that really have only two operands: the result must go in one of the"}, {"sha": "b3ce120f33a62b431270f1425cefaaad52524d74", "filename": "gcc/genoutput.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f793e3bb4e0a2bd04536f8bbc861c34cfec945/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f793e3bb4e0a2bd04536f8bbc861c34cfec945/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=73f793e3bb4e0a2bd04536f8bbc861c34cfec945", "patch": "@@ -781,6 +781,11 @@ validate_insn_alternatives (struct data *d)\n \n \tfor (p = d->operand[start].constraint; (c = *p); p += len)\n \t  {\n+\t    if ((c == '%' || c == '=' || c == '+')\n+\t\t&& p != d->operand[start].constraint)\n+\t      error_with_line (d->lineno,\n+\t\t\t       \"character '%c' can only be used at the\"\n+\t\t\t       \" beginning of a constraint string\", c);\n #ifdef USE_MD_CONSTRAINTS\n \t    if (ISSPACE (c) || strchr (indep_constraints, c))\n \t      len = 1;"}, {"sha": "26d017e0820347a2436fcbd87038b466883c31fe", "filename": "gcc/ira.c", "status": "modified", "additions": 2, "deletions": 31, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f793e3bb4e0a2bd04536f8bbc861c34cfec945/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f793e3bb4e0a2bd04536f8bbc861c34cfec945/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=73f793e3bb4e0a2bd04536f8bbc861c34cfec945", "patch": "@@ -1770,34 +1770,6 @@ setup_prohibited_mode_move_regs (void)\n \n \f\n \n-/* Return TRUE if the operand constraint STR is commutative.  */\n-static bool\n-commutative_constraint_p (const char *str)\n-{\n-  int c;\n-\n-  alternative_mask enabled = recog_data.enabled_alternatives;\n-  for (;;)\n-    {\n-      c = *str;\n-      if (c == '\\0')\n-\tbreak;\n-      str += CONSTRAINT_LEN (c, str);\n-      if (c == '#')\n-\tenabled &= ~ALTERNATIVE_BIT (0);\n-      else if (c == ',')\n-\tenabled >>= 1;\n-      else if (enabled & 1)\n-\t{\n-\t  /* Usually `%' is the first constraint character but the\n-\t     documentation does not require this.  */\n-\t  if (c == '%')\n-\t    return true;\n-\t}\n-    }\n-  return false;\n-}\n-\n /* Setup possible alternatives in ALTS for INSN.  */\n void\n ira_setup_alts (rtx insn, HARD_REG_SET &alts)\n@@ -2099,10 +2071,9 @@ ira_get_dup_out_num (int op_num, HARD_REG_SET &alts)\n       if (use_commut_op_p)\n \tbreak;\n       use_commut_op_p = true;\n-      if (commutative_constraint_p (recog_data.constraints[op_num]))\n+      if (recog_data.constraints[op_num][0] == '%')\n \tstr = recog_data.constraints[op_num + 1];\n-      else if (op_num > 0 && commutative_constraint_p (recog_data.constraints\n-\t\t\t\t\t\t       [op_num - 1]))\n+      else if (op_num > 0 && recog_data.constraints[op_num - 1][0] == '%')\n \tstr = recog_data.constraints[op_num - 1];\n       else\n \tbreak;"}]}