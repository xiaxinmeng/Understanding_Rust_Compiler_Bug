{"sha": "06bc9e41f4da836809323409de0a27892cba655a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZiYzllNDFmNGRhODM2ODA5MzIzNDA5ZGUwYTI3ODkyY2JhNjU1YQ==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2013-12-27T14:03:55Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-12-27T14:03:55Z"}, "message": "i386.c (ix86_print_operand): Print EVEX's RC modifiers.\n\n        * config/i386/i386.c (ix86_print_operand): Print EVEX's RC modifiers.\n        * config/i386/i386.md (define_constants): Define EVEx's RC constants.\n        * gcc/config/i386/sse.md (<plusminus_insn><mode>3<mask_name>): Extend\n        to support EVEX's rounding control.\n        (*<plusminus_insn><mode>3<mask_name>): Ditto.\n        (mul<mode>3<mask_name>): Ditto.\n        (*mul<mode>3<mask_name>): Ditto.\n        (<sse>_div<mode>3<mask_name>): Ditto.\n        (<sse>_sqrt<mode>2<mask_name>): Ditto.\n        (<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name>): Ditto.\n        (avx512f_fmadd_<mode>_mask): Ditto.\n        (avx512f_fmadd_<mode>_mask3): Ditto.\n        (<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name>): Ditto.\n        (avx512f_fmsub_<mode>_mask): Ditto.\n        (avx512f_fmsub_<mode>_mask3): Ditto.\n        (<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name>): Ditto.\n        (avx512f_fnmadd_<mode>_mask): Ditto.\n        (avx512f_fnmadd_<mode>_mask3): Ditto.\n        (<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name>): Ditto.\n        (avx512f_fnmsub_<mode>_mask): Ditto.\n        (avx512f_fnmsub_<mode>_mask3): Ditto.\n        (<sd_mask_codefor>fma_fmaddsub_<mode><sd_maskz_name>): Ditto.\n        (avx512f_fmaddsub_<mode>_mask): Ditto.\n        (avx512f_fmaddsub_<mode>_mask3): Ditto.\n        (<sd_mask_codefor>fma_fmsubadd_<mode><sd_maskz_name>): Ditto.\n        (avx512f_fmsubadd_<mode>_mask): Ditto.\n        (avx512f_fmsubadd_<mode>_mask3): Ditto.\n        (fmai_vmfmadd_<mode>): Ditto.\n        (*fmai_fmadd_<mode>): Ditto.\n        (*fmai_fmsub_<mode>): Ditto.\n        (*fmai_fnmadd_<mode>): Ditto.\n        (*fmai_fnmsub_<mode>): Ditto.\n        (sse_cvtsi2ss): Ditto.\n        (sse_cvtsi2ssq): Ditto.\n        (sse_cvtss2si): Ditto.\n        (sse_cvtss2siq): Ditto.\n        (cvtusi2<ssescalarmodesuffix>32): Ditto.\n        (cvtusi2<ssescalarmodesuffix>64): Ditto.\n        (float<sseintvecmodelower><mode>2<mask_name>): Ditto.\n        (ufloatv16siv16sf2<mask_name>): Ditto.\n        (<mask_codefor>avx512f_fix_notruncv16sfv16si<mask_name>): Ditto.\n        (<mask_codefor>avx512f_ufix_notruncv16sfv16si<mask_name>): Ditto.\n        (sse2_cvtsi2sdq): Ditto.\n        (avx512f_vcvtss2usi): Ditto.\n        (avx512f_vcvtss2usiq): Ditto.\n        (avx512f_vcvtsd2usi): Ditto.\n        (avx512f_vcvtsd2usiq): Ditto.\n        (sse2_cvtsd2si): Ditto.\n        (sse2_cvtsd2siq): Ditto.\n        (<mask_codefor>avx512f_cvtpd2dq512<mask_name>): Ditto.\n        (avx512f_ufix_notruncv8dfv8si<mask_name>): Ditto.\n        (<mask_codefor>avx512f_cvtpd2ps512<mask_name>): Ditto.\n        (avx512f_scalef<mode><mask_name>): Ditto.\n        (<code><mode>3<mask_name>): Ditto.\n        (*avx2_<code><mode>3<mask_name>): Ditto.\n        (avx512er_exp2<mode><mask_name): Ditto.\n        (<mask_codefor>avx512er_rcp28<mode><mask_name>): Ditto.\n        (<mask_codefor>avx512er_rsqrt28<mode><mask_name>): Ditto.\n        (avx512f_fmadd_<mode>_maskz): New.\n        * config/i386/subst.md (SUBST_A): New.\n        (round_name): Ditto.\n        (round_mask_operand2): Ditto.\n        (round_mask_operand3): Ditto.\n        (round_mask_scalar_operand3): Ditto.\n        (round_sd_mask_operand4): Ditto.\n        (round_op2): Ditto.\n        (round_op3): Ditto.\n        (round_op4): Ditto.\n        (round_op5): Ditto.\n        (round_op6): Ditto.\n        (round_mask_op2): Ditto.\n        (round_mask_op3): Ditto.\n        (round_mask_scalar_op3): Ditto.\n        (round_sd_mask_op4): Ditto.\n        (round_constraint): Ditto.\n        (round_constraint2): Ditto.\n        (round_constraint3): Ditto.\n        (round_nimm_predicate): Ditto.\n        (round_mode512bit_condition): Ditto.\n        (round_modev4sf_condition): Ditto.\n        (round_codefor): Ditto.\n        (round_opnum): Ditto.\n        (round): Ditto.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\nCo-Authored-By: Sergey Lega <sergey.s.lega@intel.com>\n\nFrom-SVN: r206220", "tree": {"sha": "2e01fc3af73ce2ba2d02c3b6f054571529b328e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e01fc3af73ce2ba2d02c3b6f054571529b328e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06bc9e41f4da836809323409de0a27892cba655a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06bc9e41f4da836809323409de0a27892cba655a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06bc9e41f4da836809323409de0a27892cba655a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06bc9e41f4da836809323409de0a27892cba655a/comments", "author": null, "committer": null, "parents": [{"sha": "4085fae0dcfdf7218c82eea865eb4e85a4f33d9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4085fae0dcfdf7218c82eea865eb4e85a4f33d9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4085fae0dcfdf7218c82eea865eb4e85a4f33d9c"}], "stats": {"total": 658, "additions": 425, "deletions": 233}, "files": [{"sha": "afc4cc13862827faf972ced396a1a610ff19d7d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bc9e41f4da836809323409de0a27892cba655a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bc9e41f4da836809323409de0a27892cba655a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06bc9e41f4da836809323409de0a27892cba655a", "patch": "@@ -1,3 +1,97 @@\n+2013-12-27  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Sergey Lega  <sergey.s.lega@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/i386.c (ix86_print_operand): Print EVEX's RC modifiers.\n+\t* config/i386/i386.md (define_constants): Define EVEx's RC constants.\n+\t* gcc/config/i386/sse.md (<plusminus_insn><mode>3<mask_name>): Extend\n+\tto support EVEX's rounding control.\n+\t(*<plusminus_insn><mode>3<mask_name>): Ditto.\n+\t(mul<mode>3<mask_name>): Ditto.\n+\t(*mul<mode>3<mask_name>): Ditto.\n+\t(<sse>_div<mode>3<mask_name>): Ditto.\n+\t(<sse>_sqrt<mode>2<mask_name>): Ditto.\n+\t(<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name>): Ditto.\n+\t(avx512f_fmadd_<mode>_mask): Ditto.\n+\t(avx512f_fmadd_<mode>_mask3): Ditto.\n+\t(<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name>): Ditto.\n+\t(avx512f_fmsub_<mode>_mask): Ditto.\n+\t(avx512f_fmsub_<mode>_mask3): Ditto.\n+\t(<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name>): Ditto.\n+\t(avx512f_fnmadd_<mode>_mask): Ditto.\n+\t(avx512f_fnmadd_<mode>_mask3): Ditto.\n+\t(<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name>): Ditto.\n+\t(avx512f_fnmsub_<mode>_mask): Ditto.\n+\t(avx512f_fnmsub_<mode>_mask3): Ditto.\n+\t(<sd_mask_codefor>fma_fmaddsub_<mode><sd_maskz_name>): Ditto.\n+\t(avx512f_fmaddsub_<mode>_mask): Ditto.\n+\t(avx512f_fmaddsub_<mode>_mask3): Ditto.\n+\t(<sd_mask_codefor>fma_fmsubadd_<mode><sd_maskz_name>): Ditto.\n+\t(avx512f_fmsubadd_<mode>_mask): Ditto.\n+\t(avx512f_fmsubadd_<mode>_mask3): Ditto.\n+\t(fmai_vmfmadd_<mode>): Ditto.\n+\t(*fmai_fmadd_<mode>): Ditto.\n+\t(*fmai_fmsub_<mode>): Ditto.\n+\t(*fmai_fnmadd_<mode>): Ditto.\n+\t(*fmai_fnmsub_<mode>): Ditto.\n+\t(sse_cvtsi2ss): Ditto.\n+\t(sse_cvtsi2ssq): Ditto.\n+\t(sse_cvtss2si): Ditto.\n+\t(sse_cvtss2siq): Ditto.\n+\t(cvtusi2<ssescalarmodesuffix>32): Ditto.\n+\t(cvtusi2<ssescalarmodesuffix>64): Ditto.\n+\t(float<sseintvecmodelower><mode>2<mask_name>): Ditto.\n+\t(ufloatv16siv16sf2<mask_name>): Ditto.\n+\t(<mask_codefor>avx512f_fix_notruncv16sfv16si<mask_name>): Ditto.\n+\t(<mask_codefor>avx512f_ufix_notruncv16sfv16si<mask_name>): Ditto.\n+\t(sse2_cvtsi2sdq): Ditto.\n+\t(avx512f_vcvtss2usi): Ditto.\n+\t(avx512f_vcvtss2usiq): Ditto.\n+\t(avx512f_vcvtsd2usi): Ditto.\n+\t(avx512f_vcvtsd2usiq): Ditto.\n+\t(sse2_cvtsd2si): Ditto.\n+\t(sse2_cvtsd2siq): Ditto.\n+\t(<mask_codefor>avx512f_cvtpd2dq512<mask_name>): Ditto.\n+\t(avx512f_ufix_notruncv8dfv8si<mask_name>): Ditto.\n+\t(<mask_codefor>avx512f_cvtpd2ps512<mask_name>): Ditto.\n+\t(avx512f_scalef<mode><mask_name>): Ditto.\n+\t(<code><mode>3<mask_name>): Ditto.\n+\t(*avx2_<code><mode>3<mask_name>): Ditto.\n+\t(avx512er_exp2<mode><mask_name): Ditto.\n+\t(<mask_codefor>avx512er_rcp28<mode><mask_name>): Ditto.\n+\t(<mask_codefor>avx512er_rsqrt28<mode><mask_name>): Ditto.\n+\t(avx512f_fmadd_<mode>_maskz): New.\n+\t* config/i386/subst.md (SUBST_A): New.\n+\t(round_name): Ditto.\n+\t(round_mask_operand2): Ditto.\n+\t(round_mask_operand3): Ditto.\n+\t(round_mask_scalar_operand3): Ditto.\n+\t(round_sd_mask_operand4): Ditto.\n+\t(round_op2): Ditto.\n+\t(round_op3): Ditto.\n+\t(round_op4): Ditto.\n+\t(round_op5): Ditto.\n+\t(round_op6): Ditto.\n+\t(round_mask_op2): Ditto.\n+\t(round_mask_op3): Ditto.\n+\t(round_mask_scalar_op3): Ditto.\n+\t(round_sd_mask_op4): Ditto.\n+\t(round_constraint): Ditto.\n+\t(round_constraint2): Ditto.\n+\t(round_constraint3): Ditto.\n+\t(round_nimm_predicate): Ditto.\n+\t(round_mode512bit_condition): Ditto.\n+\t(round_modev4sf_condition): Ditto.\n+\t(round_codefor): Ditto.\n+\t(round_opnum): Ditto.\n+\t(round): Ditto.\n+\n 2013-12-26   H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/59588"}, {"sha": "2fc9b802993ad9d7b3d7b3774f5ccea4a166ddf5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bc9e41f4da836809323409de0a27892cba655a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bc9e41f4da836809323409de0a27892cba655a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=06bc9e41f4da836809323409de0a27892cba655a", "patch": "@@ -14990,6 +14990,38 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \t    fputs (\"{z}\", file);\n \t  return;\n \n+\tcase 'R':\n+\t  gcc_assert (CONST_INT_P (x));\n+\n+\t  if (ASSEMBLER_DIALECT == ASM_INTEL)\n+\t    fputs (\", \", file);\n+\n+\t  switch (INTVAL (x))\n+\t    {\n+\t    case ROUND_NEAREST_INT:\n+\t      fputs (\"{rn-sae}\", file);\n+\t      break;\n+\t    case ROUND_NEG_INF:\n+\t      fputs (\"{rd-sae}\", file);\n+\t      break;\n+\t    case ROUND_POS_INF:\n+\t      fputs (\"{ru-sae}\", file);\n+\t      break;\n+\t    case ROUND_ZERO:\n+\t      fputs (\"{rz-sae}\", file);\n+\t      break;\n+\t    case ROUND_SAE:\n+\t      fputs (\"{sae}\", file);\n+\t      break;\n+\t    default:\n+\t      gcc_unreachable ();\n+\t    }\n+\n+\t  if (ASSEMBLER_DIALECT == ASM_ATT)\n+\t    fputs (\", \", file);\n+\n+\t  return;\n+\n \tcase '*':\n \t  if (ASSEMBLER_DIALECT == ASM_ATT)\n \t    putc ('*', file);"}, {"sha": "c7ed099f38aa30a5047b7921ce93a02d12b1bfbe", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bc9e41f4da836809323409de0a27892cba655a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bc9e41f4da836809323409de0a27892cba655a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=06bc9e41f4da836809323409de0a27892cba655a", "patch": "@@ -241,6 +241,16 @@\n    (ROUND_NO_EXC\t\t0x8)\n   ])\n \n+;; Constants to represent AVX512F embeded rounding\n+(define_constants\n+  [(ROUND_NEAREST_INT\t\t\t0)\n+   (ROUND_NEG_INF\t\t\t1)\n+   (ROUND_POS_INF\t\t\t2)\n+   (ROUND_ZERO\t\t\t\t3)\n+   (NO_ROUND\t\t\t\t4)\n+   (ROUND_SAE\t\t\t\t5)\n+  ])\n+\n ;; Constants to represent pcomtrue/pcomfalse variants\n (define_constants\n   [(PCOM_FALSE\t\t\t0)"}, {"sha": "4c9f310594e876fa2cfcf3054cb621b61fbe79b7", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 247, "deletions": 233, "changes": 480, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bc9e41f4da836809323409de0a27892cba655a/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bc9e41f4da836809323409de0a27892cba655a/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=06bc9e41f4da836809323409de0a27892cba655a", "patch": "@@ -1272,23 +1272,23 @@\n }\n   [(set_attr \"isa\" \"noavx,noavx,avx,avx\")])\n \n-(define_expand \"<plusminus_insn><mode>3<mask_name>\"\n+(define_expand \"<plusminus_insn><mode>3<mask_name><round_name>\"\n   [(set (match_operand:VF 0 \"register_operand\")\n \t(plusminus:VF\n-\t  (match_operand:VF 1 \"nonimmediate_operand\")\n-\t  (match_operand:VF 2 \"nonimmediate_operand\")))]\n-  \"TARGET_SSE && <mask_mode512bit_condition>\"\n+\t  (match_operand:VF 1 \"<round_nimm_predicate>\")\n+\t  (match_operand:VF 2 \"<round_nimm_predicate>\")))]\n+  \"TARGET_SSE && <mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n-(define_insn \"*<plusminus_insn><mode>3<mask_name>\"\n+(define_insn \"*<plusminus_insn><mode>3<mask_name><round_name>\"\n   [(set (match_operand:VF 0 \"register_operand\" \"=x,v\")\n \t(plusminus:VF\n-\t  (match_operand:VF 1 \"nonimmediate_operand\" \"<comm>0,v\")\n-\t  (match_operand:VF 2 \"nonimmediate_operand\" \"xm,vm\")))]\n-  \"TARGET_SSE && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands) && <mask_mode512bit_condition>\"\n+\t  (match_operand:VF 1 \"<round_nimm_predicate>\" \"<comm>0,v\")\n+\t  (match_operand:VF 2 \"<round_nimm_predicate>\" \"xm,<round_constraint>\")))]\n+  \"TARGET_SSE && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands) && <mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n    <plusminus_mnemonic><ssemodesuffix>\\t{%2, %0|%0, %2}\n-   v<plusminus_mnemonic><ssemodesuffix>\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n+   v<plusminus_mnemonic><ssemodesuffix>\\t{<round_mask_op3>%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2<round_mask_op3>}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sseadd\")\n    (set_attr \"prefix\" \"<mask_prefix3>\")\n@@ -1311,23 +1311,23 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n-(define_expand \"mul<mode>3<mask_name>\"\n+(define_expand \"mul<mode>3<mask_name><round_name>\"\n   [(set (match_operand:VF 0 \"register_operand\")\n \t(mult:VF\n-\t  (match_operand:VF 1 \"nonimmediate_operand\")\n-\t  (match_operand:VF 2 \"nonimmediate_operand\")))]\n-  \"TARGET_SSE && <mask_mode512bit_condition>\"\n+\t  (match_operand:VF 1 \"<round_nimm_predicate>\")\n+\t  (match_operand:VF 2 \"<round_nimm_predicate>\")))]\n+  \"TARGET_SSE && <mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"ix86_fixup_binary_operands_no_copy (MULT, <MODE>mode, operands);\")\n \n-(define_insn \"*mul<mode>3<mask_name>\"\n+(define_insn \"*mul<mode>3<mask_name><round_name>\"\n   [(set (match_operand:VF 0 \"register_operand\" \"=x,v\")\n \t(mult:VF\n-\t  (match_operand:VF 1 \"nonimmediate_operand\" \"%0,v\")\n-\t  (match_operand:VF 2 \"nonimmediate_operand\" \"xm,vm\")))]\n-  \"TARGET_SSE && ix86_binary_operator_ok (MULT, <MODE>mode, operands) && <mask_mode512bit_condition>\"\n+\t  (match_operand:VF 1 \"<round_nimm_predicate>\" \"%0,v\")\n+\t  (match_operand:VF 2 \"<round_nimm_predicate>\" \"xm,<round_constraint>\")))]\n+  \"TARGET_SSE && ix86_binary_operator_ok (MULT, <MODE>mode, operands) && <mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n    mul<ssemodesuffix>\\t{%2, %0|%0, %2}\n-   vmul<ssemodesuffix>\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n+   vmul<ssemodesuffix>\\t{<round_mask_op3>%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2<round_mask_op3>}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"ssemul\")\n    (set_attr \"prefix\" \"<mask_prefix3>\")\n@@ -1378,15 +1378,15 @@\n     }\n })\n \n-(define_insn \"<sse>_div<mode>3<mask_name>\"\n+(define_insn \"<sse>_div<mode>3<mask_name><round_name>\"\n   [(set (match_operand:VF 0 \"register_operand\" \"=x,v\")\n \t(div:VF\n \t  (match_operand:VF 1 \"register_operand\" \"0,v\")\n-\t  (match_operand:VF 2 \"nonimmediate_operand\" \"xm,vm\")))]\n-  \"TARGET_SSE && <mask_mode512bit_condition>\"\n+\t  (match_operand:VF 2 \"<round_nimm_predicate>\" \"xm,<round_constraint>\")))]\n+  \"TARGET_SSE && <mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n    div<ssemodesuffix>\\t{%2, %0|%0, %2}\n-   vdiv<ssemodesuffix>\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n+   vdiv<ssemodesuffix>\\t{<round_mask_op3>%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2<round_mask_op3>}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"ssediv\")\n    (set_attr \"prefix\" \"<mask_prefix3>\")\n@@ -1470,11 +1470,11 @@\n     }\n })\n \n-(define_insn \"<sse>_sqrt<mode>2<mask_name>\"\n+(define_insn \"<sse>_sqrt<mode>2<mask_name><round_name>\"\n   [(set (match_operand:VF 0 \"register_operand\" \"=v\")\n-\t(sqrt:VF (match_operand:VF 1 \"nonimmediate_operand\" \"vm\")))]\n-  \"TARGET_SSE && <mask_mode512bit_condition>\"\n-  \"%vsqrt<ssemodesuffix>\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+\t(sqrt:VF (match_operand:VF 1 \"<round_nimm_predicate>\" \"<round_constraint>\")))]\n+  \"TARGET_SSE && <mask_mode512bit_condition> && <round_mode512bit_condition>\"\n+  \"%vsqrt<ssemodesuffix>\\t{<round_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_mask_op2>}\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"atom_sse_attr\" \"sqrt\")\n    (set_attr \"btver2_sse_attr\" \"sqrt\")\n@@ -2741,210 +2741,224 @@\n \t  (match_operand:FMAMODE 3 \"nonimmediate_operand\")))]\n   \"\")\n \n-(define_insn \"<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name>\"\n+(define_expand \"avx512f_fmadd_<mode>_maskz\"\n+  [(match_operand:VF_512 0 \"register_operand\")\n+   (match_operand:VF_512 1 \"nonimmediate_operand\")\n+   (match_operand:VF_512 2 \"nonimmediate_operand\")\n+   (match_operand:VF_512 3 \"nonimmediate_operand\")\n+   (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n+  \"TARGET_AVX512F\"\n+{\n+  emit_insn (gen_fma_fmadd_<mode>_maskz_1 (\n+    operands[0], operands[1], operands[2], operands[3],\n+    CONST0_RTX (<MODE>mode), operands[4]));\n+  DONE;\n+})\n+\n+(define_insn \"<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name><round_name>\"\n   [(set (match_operand:FMAMODE 0 \"register_operand\" \"=v,v,v,x,x\")\n \t(fma:FMAMODE\n-\t  (match_operand:FMAMODE 1 \"nonimmediate_operand\" \"%0, 0, v, x,x\")\n-\t  (match_operand:FMAMODE 2 \"nonimmediate_operand\" \"vm, v,vm, x,m\")\n-\t  (match_operand:FMAMODE 3 \"nonimmediate_operand\" \" v,vm, 0,xm,x\")))]\n-  \"<sd_mask_mode512bit_condition>\"\n-  \"@\n-   vfmadd132<ssemodesuffix>\\t{%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2}\n-   vfmadd213<ssemodesuffix>\\t{%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3}\n-   vfmadd231<ssemodesuffix>\\t{%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2}\n+\t  (match_operand:FMAMODE 1 \"<round_nimm_predicate>\" \"%0,0,v,x,x\")\n+\t  (match_operand:FMAMODE 2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>,x,m\")\n+\t  (match_operand:FMAMODE 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0,xm,x\")))]\n+  \"<sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n+  \"@\n+   vfmadd132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n+   vfmadd213<ssemodesuffix>\\t{<round_sd_mask_op4>%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<round_sd_mask_op4>}\n+   vfmadd231<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2<round_sd_mask_op4>}\n    vfmadd<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n    vfmadd<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"isa\" \"fma_avx512f,fma_avx512f,fma_avx512f,fma4,fma4\")\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_fmadd_<mode>_mask\"\n+(define_insn \"avx512f_fmadd_<mode>_mask<round_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v,v\")\n \t(vec_merge:VF_512\n \t  (fma:VF_512\n \t    (match_operand:VF_512 1 \"register_operand\" \"0,0\")\n-\t    (match_operand:VF_512 2 \"nonimmediate_operand\" \"vm,v\")\n-\t    (match_operand:VF_512 3 \"nonimmediate_operand\" \"v,vm\"))\n+\t    (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>,v\")\n+\t    (match_operand:VF_512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>\"))\n \t  (match_dup 1)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k,k\")))]\n   \"TARGET_AVX512F\"\n   \"@\n-   vfmadd132<ssemodesuffix>\\t{%2, %3, %0%{%4%}|%0%{%4%}, %3, %2}\n-   vfmadd213<ssemodesuffix>\\t{%3, %2, %0%{%4%}|%0%{%4%}, %2, %3}\"\n+   vfmadd132<ssemodesuffix>\\t{<round_op5>%2, %3, %0%{%4%}|%0%{%4%}, %3, %2<round_op5>}\n+   vfmadd213<ssemodesuffix>\\t{<round_op5>%3, %2, %0%{%4%}|%0%{%4%}, %2, %3<round_op5>}\"\n   [(set_attr \"isa\" \"fma_avx512f,fma_avx512f\")\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_fmadd_<mode>_mask3\"\n+(define_insn \"avx512f_fmadd_<mode>_mask3<round_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=x\")\n \t(vec_merge:VF_512\n \t  (fma:VF_512\n \t    (match_operand:VF_512 1 \"register_operand\" \"x\")\n-\t    (match_operand:VF_512 2 \"nonimmediate_operand\" \"vm\")\n+\t    (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>\")\n \t    (match_operand:VF_512 3 \"register_operand\" \"0\"))\n \t  (match_dup 3)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k\")))]\n   \"TARGET_AVX512F\"\n-  \"vfmadd231<ssemodesuffix>\\t{%2, %1, %0%{%4%}|%0%{%4%}, %1, %2}\"\n+  \"vfmadd231<ssemodesuffix>\\t{<round_op5>%2, %1, %0%{%4%}|%0%{%4%}, %1, %2<round_op5>}\"\n   [(set_attr \"isa\" \"fma_avx512f\")\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name>\"\n+(define_insn \"<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name><round_name>\"\n   [(set (match_operand:FMAMODE 0 \"register_operand\" \"=v,v,v,x,x\")\n \t(fma:FMAMODE\n-\t  (match_operand:FMAMODE   1 \"nonimmediate_operand\" \"%0, 0, v, x,x\")\n-\t  (match_operand:FMAMODE   2 \"nonimmediate_operand\" \"vm, v,vm, x,m\")\n+\t  (match_operand:FMAMODE   1 \"<round_nimm_predicate>\" \"%0, 0, v, x,x\")\n+\t  (match_operand:FMAMODE   2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>,x,m\")\n \t  (neg:FMAMODE\n-\t    (match_operand:FMAMODE 3 \"nonimmediate_operand\" \" v,vm, 0,xm,x\"))))]\n-  \"<sd_mask_mode512bit_condition>\"\n+\t    (match_operand:FMAMODE 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0,xm,x\"))))]\n+  \"<sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n-   vfmsub132<ssemodesuffix>\\t{%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2}\n-   vfmsub213<ssemodesuffix>\\t{%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3}\n-   vfmsub231<ssemodesuffix>\\t{%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2}\n+   vfmsub132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n+   vfmsub213<ssemodesuffix>\\t{<round_sd_mask_op4>%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<round_sd_mask_op4>}\n+   vfmsub231<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2<round_sd_mask_op4>}\n    vfmsub<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n    vfmsub<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"isa\" \"fma_avx512f,fma_avx512f,fma_avx512f,fma4,fma4\")\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_fmsub_<mode>_mask\"\n+(define_insn \"avx512f_fmsub_<mode>_mask<round_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v,v\")\n \t(vec_merge:VF_512\n \t  (fma:VF_512\n \t    (match_operand:VF_512 1 \"register_operand\" \"0,0\")\n-\t    (match_operand:VF_512 2 \"nonimmediate_operand\" \"vm,v\")\n+\t    (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>,v\")\n \t    (neg:VF_512\n-\t      (match_operand:VF_512 3 \"nonimmediate_operand\" \"v,vm\")))\n+\t      (match_operand:VF_512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>\")))\n \t  (match_dup 1)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k,k\")))]\n   \"TARGET_AVX512F\"\n   \"@\n-   vfmsub132<ssemodesuffix>\\t{%2, %3, %0%{%4%}|%0%{%4%}, %3, %2}\n-   vfmsub213<ssemodesuffix>\\t{%3, %2, %0%{%4%}|%0%{%4%}, %2, %3}\"\n+   vfmsub132<ssemodesuffix>\\t{<round_op5>%2, %3, %0%{%4%}|%0%{%4%}, %3, %2<round_op5>}\n+   vfmsub213<ssemodesuffix>\\t{<round_op5>%3, %2, %0%{%4%}|%0%{%4%}, %2, %3<round_op5>}\"\n   [(set_attr \"isa\" \"fma_avx512f,fma_avx512f\")\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_fmsub_<mode>_mask3\"\n+(define_insn \"avx512f_fmsub_<mode>_mask3<round_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF_512\n \t  (fma:VF_512\n \t    (match_operand:VF_512 1 \"register_operand\" \"v\")\n-\t    (match_operand:VF_512 2 \"nonimmediate_operand\" \"vm\")\n+\t    (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>\")\n \t    (neg:VF_512\n \t      (match_operand:VF_512 3 \"register_operand\" \"0\")))\n \t  (match_dup 3)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k\")))]\n   \"TARGET_AVX512F\"\n-  \"vfmsub231<ssemodesuffix>\\t{%2, %1, %0%{%4%}|%0%{%4%}, %1, %2}\"\n+  \"vfmsub231<ssemodesuffix>\\t{<round_op5>%2, %1, %0%{%4%}|%0%{%4%}, %1, %2<round_op5>}\"\n   [(set_attr \"isa\" \"fma_avx512f\")\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name>\"\n+(define_insn \"<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name><round_name>\"\n   [(set (match_operand:FMAMODE 0 \"register_operand\" \"=v,v,v,x,x\")\n \t(fma:FMAMODE\n \t  (neg:FMAMODE\n-\t    (match_operand:FMAMODE 1 \"nonimmediate_operand\" \"%0, 0, v, x,x\"))\n-\t  (match_operand:FMAMODE   2 \"nonimmediate_operand\" \"vm, v,vm, x,m\")\n-\t  (match_operand:FMAMODE   3 \"nonimmediate_operand\" \" v,vm, 0,xm,x\")))]\n-  \"<sd_mask_mode512bit_condition>\"\n-  \"@\n-   vfnmadd132<ssemodesuffix>\\t{%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2}\n-   vfnmadd213<ssemodesuffix>\\t{%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3}\n-   vfnmadd231<ssemodesuffix>\\t{%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2}\n+\t    (match_operand:FMAMODE 1 \"<round_nimm_predicate>\" \"%0,0,v,x,x\"))\n+\t  (match_operand:FMAMODE   2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>,x,m\")\n+\t  (match_operand:FMAMODE   3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0,xm,x\")))]\n+  \"<sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n+  \"@\n+   vfnmadd132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n+   vfnmadd213<ssemodesuffix>\\t{<round_sd_mask_op4>%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<round_sd_mask_op4>}\n+   vfnmadd231<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2<round_sd_mask_op4>}\n    vfnmadd<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n    vfnmadd<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"isa\" \"fma_avx512f,fma_avx512f,fma_avx512f,fma4,fma4\")\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_fnmadd_<mode>_mask\"\n+(define_insn \"avx512f_fnmadd_<mode>_mask<round_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v,v\")\n \t(vec_merge:VF_512\n \t  (fma:VF_512\n \t    (neg:VF_512\n \t      (match_operand:VF_512 1 \"register_operand\" \"0,0\"))\n-\t    (match_operand:VF_512 2 \"nonimmediate_operand\" \"vm,v\")\n-\t    (match_operand:VF_512 3 \"nonimmediate_operand\" \"v,vm\"))\n+\t    (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>,v\")\n+\t    (match_operand:VF_512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>\"))\n \t  (match_dup 1)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k,k\")))]\n   \"TARGET_AVX512F\"\n   \"@\n-   vfnmadd132<ssemodesuffix>\\t{%2, %3, %0%{%4%}|%0%{%4%}, %3, %2}\n-   vfnmadd213<ssemodesuffix>\\t{%3, %2, %0%{%4%}|%0%{%4%}, %2, %3}\"\n+   vfnmadd132<ssemodesuffix>\\t{<round_op5>%2, %3, %0%{%4%}|%0%{%4%}, %3, %2<round_op5>}\n+   vfnmadd213<ssemodesuffix>\\t{<round_op5>%3, %2, %0%{%4%}|%0%{%4%}, %2, %3<round_op5>}\"\n   [(set_attr \"isa\" \"fma_avx512f,fma_avx512f\")\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_fnmadd_<mode>_mask3\"\n+(define_insn \"avx512f_fnmadd_<mode>_mask3<round_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF_512\n \t  (fma:VF_512\n \t    (neg:VF_512\n \t      (match_operand:VF_512 1 \"register_operand\" \"v\"))\n-\t    (match_operand:VF_512 2 \"nonimmediate_operand\" \"vm\")\n+\t    (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>\")\n \t    (match_operand:VF_512 3 \"register_operand\" \"0\"))\n \t  (match_dup 3)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k\")))]\n   \"TARGET_AVX512F\"\n-  \"vfnmadd231<ssemodesuffix>\\t{%2, %1, %0%{%4%}|%0%{%4%}, %1, %2}\"\n+  \"vfnmadd231<ssemodesuffix>\\t{<round_op5>%2, %1, %0%{%4%}|%0%{%4%}, %1, %2<round_op5>}\"\n   [(set_attr \"isa\" \"fma_avx512f\")\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name>\"\n+(define_insn \"<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name><round_name>\"\n   [(set (match_operand:FMAMODE 0 \"register_operand\" \"=v,v,v,x,x\")\n \t(fma:FMAMODE\n \t  (neg:FMAMODE\n-\t    (match_operand:FMAMODE 1 \"nonimmediate_operand\" \"%0, 0, v, x,x\"))\n-\t  (match_operand:FMAMODE   2 \"nonimmediate_operand\" \"vm, v,vm, x,m\")\n+\t    (match_operand:FMAMODE 1 \"<round_nimm_predicate>\" \"%0,0,v,x,x\"))\n+\t  (match_operand:FMAMODE   2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>,x,m\")\n \t  (neg:FMAMODE\n-\t    (match_operand:FMAMODE 3 \"nonimmediate_operand\" \" v,vm, 0,xm,x\"))))]\n-  \"<sd_mask_mode512bit_condition>\"\n+\t    (match_operand:FMAMODE 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0,xm,x\"))))]\n+  \"<sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n-   vfnmsub132<ssemodesuffix>\\t{%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2}\n-   vfnmsub213<ssemodesuffix>\\t{%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3}\n-   vfnmsub231<ssemodesuffix>\\t{%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2}\n+   vfnmsub132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n+   vfnmsub213<ssemodesuffix>\\t{<round_sd_mask_op4>%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<round_sd_mask_op4>}\n+   vfnmsub231<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2<round_sd_mask_op4>}\n    vfnmsub<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n    vfnmsub<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"isa\" \"fma_avx512f,fma_avx512f,fma_avx512f,fma4,fma4\")\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_fnmsub_<mode>_mask\"\n+(define_insn \"avx512f_fnmsub_<mode>_mask<round_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v,v\")\n \t(vec_merge:VF_512\n \t  (fma:VF_512\n \t    (neg:VF_512\n \t      (match_operand:VF_512 1 \"register_operand\" \"0,0\"))\n-\t    (match_operand:VF_512 2 \"nonimmediate_operand\" \"vm,v\")\n+\t    (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>,v\")\n \t    (neg:VF_512\n-\t      (match_operand:VF_512 3 \"nonimmediate_operand\" \"v,vm\")))\n+\t      (match_operand:VF_512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>\")))\n \t  (match_dup 1)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k,k\")))]\n   \"TARGET_AVX512F\"\n   \"@\n-   vfnmsub132<ssemodesuffix>\\t{%2, %3, %0%{%4%}|%0%{%4%}, %3, %2}\n-   vfnmsub213<ssemodesuffix>\\t{%3, %2, %0%{%4%}|%0%{%4%}, %2, %3}\"\n+   vfnmsub132<ssemodesuffix>\\t{<round_op5>%2, %3, %0%{%4%}|%0%{%4%}, %3, %2<round_op5>}\n+   vfnmsub213<ssemodesuffix>\\t{<round_op5>%3, %2, %0%{%4%}|%0%{%4%}, %2, %3<round_op5>}\"\n   [(set_attr \"isa\" \"fma_avx512f,fma_avx512f\")\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_fnmsub_<mode>_mask3\"\n+(define_insn \"avx512f_fnmsub_<mode>_mask3<round_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF_512\n \t  (fma:VF_512\n \t    (neg:VF_512\n \t      (match_operand:VF_512 1 \"register_operand\" \"v\"))\n-\t    (match_operand:VF_512 2 \"nonimmediate_operand\" \"vm\")\n+\t    (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>\")\n \t    (neg:VF_512\n \t      (match_operand:VF_512 3 \"register_operand\" \"0\")))\n \t  (match_dup 3)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k\")))]\n   \"TARGET_AVX512F\"\n-  \"vfnmsub231<ssemodesuffix>\\t{%2, %1, %0%{%4%}|%0%{%4%}, %1, %2}\"\n+  \"vfnmsub231<ssemodesuffix>\\t{<round_op5>%2, %1, %0%{%4%}|%0%{%4%}, %1, %2<round_op5>}\"\n   [(set_attr \"isa\" \"fma_avx512f\")\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -2983,123 +2997,123 @@\n   DONE;\n })\n \n-(define_insn \"<sd_mask_codefor>fma_fmaddsub_<mode><sd_maskz_name>\"\n+(define_insn \"<sd_mask_codefor>fma_fmaddsub_<mode><sd_maskz_name><round_name>\"\n   [(set (match_operand:VF 0 \"register_operand\" \"=v,v,v,x,x\")\n \t(unspec:VF\n-\t  [(match_operand:VF 1 \"nonimmediate_operand\" \"%0, 0, v, x,x\")\n-\t   (match_operand:VF 2 \"nonimmediate_operand\" \"vm, v,vm, x,m\")\n-\t   (match_operand:VF 3 \"nonimmediate_operand\" \" v,vm, 0,xm,x\")]\n+\t  [(match_operand:VF 1 \"<round_nimm_predicate>\" \"%0,0,v,x,x\")\n+\t   (match_operand:VF 2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>,x,m\")\n+\t   (match_operand:VF 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0,xm,x\")]\n \t  UNSPEC_FMADDSUB))]\n-  \"(TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F) && <sd_mask_mode512bit_condition>\"\n+  \"(TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F) && <sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n-   vfmaddsub132<ssemodesuffix>\\t{%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2}\n-   vfmaddsub213<ssemodesuffix>\\t{%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3}\n-   vfmaddsub231<ssemodesuffix>\\t{%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2}\n+   vfmaddsub132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n+   vfmaddsub213<ssemodesuffix>\\t{<round_sd_mask_op4>%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<round_sd_mask_op4>}\n+   vfmaddsub231<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2<round_sd_mask_op4>}\n    vfmaddsub<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n    vfmaddsub<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"isa\" \"fma_avx512f,fma_avx512f,fma_avx512f,fma4,fma4\")\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_fmaddsub_<mode>_mask\"\n+(define_insn \"avx512f_fmaddsub_<mode>_mask<round_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v,v\")\n \t(vec_merge:VF_512\n \t  (unspec:VF_512\n \t    [(match_operand:VF_512 1 \"register_operand\" \"0,0\")\n-\t     (match_operand:VF_512 2 \"nonimmediate_operand\" \"vm,v\")\n-\t     (match_operand:VF_512 3 \"nonimmediate_operand\" \"v,vm\")]\n+\t     (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>,v\")\n+\t     (match_operand:VF_512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>\")]\n \t    UNSPEC_FMADDSUB)\n \t  (match_dup 1)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k,k\")))]\n   \"TARGET_AVX512F\"\n   \"@\n-   vfmaddsub132<ssemodesuffix>\\t{%2, %3, %0%{%4%}|%0%{%4%}, %3, %2}\n-   vfmaddsub213<ssemodesuffix>\\t{%3, %2, %0%{%4%}|%0%{%4%}, %2, %3}\"\n+   vfmaddsub132<ssemodesuffix>\\t{<round_op5>%2, %3, %0%{%4%}|%0%{%4%}, %3, %2<round_op5>}\n+   vfmaddsub213<ssemodesuffix>\\t{<round_op5>%3, %2, %0%{%4%}|%0%{%4%}, %2, %3<round_op5>}\"\n   [(set_attr \"isa\" \"fma_avx512f,fma_avx512f\")\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_fmaddsub_<mode>_mask3\"\n+(define_insn \"avx512f_fmaddsub_<mode>_mask3<round_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF_512\n \t  (unspec:VF_512\n \t    [(match_operand:VF_512 1 \"register_operand\" \"v\")\n-\t     (match_operand:VF_512 2 \"nonimmediate_operand\" \"vm\")\n+\t     (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>\")\n \t     (match_operand:VF_512 3 \"register_operand\" \"0\")]\n \t    UNSPEC_FMADDSUB)\n \t  (match_dup 3)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k\")))]\n   \"TARGET_AVX512F\"\n-  \"vfmaddsub231<ssemodesuffix>\\t{%2, %1, %0%{%4%}|%0%{%4%}, %1, %2}\"\n+  \"vfmaddsub231<ssemodesuffix>\\t{<round_op5>%2, %1, %0%{%4%}|%0%{%4%}, %1, %2<round_op5>}\"\n   [(set_attr \"isa\" \"fma_avx512f\")\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"<sd_mask_codefor>fma_fmsubadd_<mode><sd_maskz_name>\"\n+(define_insn \"<sd_mask_codefor>fma_fmsubadd_<mode><sd_maskz_name><round_name>\"\n   [(set (match_operand:VF 0 \"register_operand\" \"=v,v,v,x,x\")\n \t(unspec:VF\n-\t  [(match_operand:VF   1 \"nonimmediate_operand\" \"%0, 0, v, x,x\")\n-\t   (match_operand:VF   2 \"nonimmediate_operand\" \"vm, v,vm, x,m\")\n+\t  [(match_operand:VF   1 \"<round_nimm_predicate>\" \"%0,0,v,x,x\")\n+\t   (match_operand:VF   2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>,x,m\")\n \t   (neg:VF\n-\t     (match_operand:VF 3 \"nonimmediate_operand\" \" v,vm, 0,xm,x\"))]\n+\t     (match_operand:VF 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0,xm,x\"))]\n \t  UNSPEC_FMADDSUB))]\n-  \"(TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F) && <sd_mask_mode512bit_condition>\"\n+  \"(TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F) && <sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n-   vfmsubadd132<ssemodesuffix>\\t{%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2}\n-   vfmsubadd213<ssemodesuffix>\\t{%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3}\n-   vfmsubadd231<ssemodesuffix>\\t{%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2}\n+   vfmsubadd132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n+   vfmsubadd213<ssemodesuffix>\\t{<round_sd_mask_op4>%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<round_sd_mask_op4>}\n+   vfmsubadd231<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2<round_sd_mask_op4>}\n    vfmsubadd<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n    vfmsubadd<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"isa\" \"fma_avx512f,fma_avx512f,fma_avx512f,fma4,fma4\")\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_fmsubadd_<mode>_mask\"\n+(define_insn \"avx512f_fmsubadd_<mode>_mask<round_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v,v\")\n \t(vec_merge:VF_512\n \t  (unspec:VF_512\n \t    [(match_operand:VF_512 1 \"register_operand\" \"0,0\")\n-\t     (match_operand:VF_512 2 \"nonimmediate_operand\" \"vm,v\")\n+\t     (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>,v\")\n \t     (neg:VF_512\n-\t       (match_operand:VF_512 3 \"nonimmediate_operand\" \"v,vm\"))]\n+\t       (match_operand:VF_512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>\"))]\n \t    UNSPEC_FMADDSUB)\n \t  (match_dup 1)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k,k\")))]\n   \"TARGET_AVX512F\"\n   \"@\n-   vfmsubadd132<ssemodesuffix>\\t{%2, %3, %0%{%4%}|%0%{%4%}, %3, %2}\n-   vfmsubadd213<ssemodesuffix>\\t{%3, %2, %0%{%4%}|%0%{%4%}, %2, %3}\"\n+   vfmsubadd132<ssemodesuffix>\\t{<round_op5>%2, %3, %0%{%4%}|%0%{%4%}, %3, %2<round_op5>}\n+   vfmsubadd213<ssemodesuffix>\\t{<round_op5>%3, %2, %0%{%4%}|%0%{%4%}, %2, %3<round_op5>}\"\n   [(set_attr \"isa\" \"fma_avx512f,fma_avx512f\")\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_fmsubadd_<mode>_mask3\"\n+(define_insn \"avx512f_fmsubadd_<mode>_mask3<round_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF_512\n \t  (unspec:VF_512\n \t    [(match_operand:VF_512 1 \"register_operand\" \"v\")\n-\t     (match_operand:VF_512 2 \"nonimmediate_operand\" \"vm\")\n+\t     (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>\")\n \t     (neg:VF_512\n \t       (match_operand:VF_512 3 \"register_operand\" \"0\"))]\n \t    UNSPEC_FMADDSUB)\n \t  (match_dup 3)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k\")))]\n   \"TARGET_AVX512F\"\n-  \"vfmsubadd231<ssemodesuffix>\\t{%2, %1, %0%{%4%}|%0%{%4%}, %1, %2}\"\n+  \"vfmsubadd231<ssemodesuffix>\\t{<round_op5>%2, %1, %0%{%4%}|%0%{%4%}, %1, %2<round_op5>}\"\n   [(set_attr \"isa\" \"fma_avx512f\")\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n ;; FMA3 floating point scalar intrinsics. These merge result with\n ;; high-order elements from the destination register.\n \n-(define_expand \"fmai_vmfmadd_<mode>\"\n+(define_expand \"fmai_vmfmadd_<mode><round_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\")\n \t(vec_merge:VF_128\n \t  (fma:VF_128\n-\t    (match_operand:VF_128 1 \"nonimmediate_operand\")\n-\t    (match_operand:VF_128 2 \"nonimmediate_operand\")\n-\t    (match_operand:VF_128 3 \"nonimmediate_operand\"))\n+\t    (match_operand:VF_128 1 \"<round_nimm_predicate>\")\n+\t    (match_operand:VF_128 2 \"<round_nimm_predicate>\")\n+\t    (match_operand:VF_128 3 \"<round_nimm_predicate>\"))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n   \"TARGET_FMA\")\n@@ -3108,67 +3122,67 @@\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v,v\")\n         (vec_merge:VF_128\n \t  (fma:VF_128\n-\t    (match_operand:VF_128 1 \"nonimmediate_operand\" \" 0, 0\")\n-\t    (match_operand:VF_128 2 \"nonimmediate_operand\" \"vm, v\")\n-\t    (match_operand:VF_128 3 \"nonimmediate_operand\" \" v,vm\"))\n+\t    (match_operand:VF_128 1 \"<round_nimm_predicate>\" \" 0, 0\")\n+\t    (match_operand:VF_128 2 \"<round_nimm_predicate>\" \"<round_constraint>, v\")\n+\t    (match_operand:VF_128 3 \"<round_nimm_predicate>\" \" v,<round_constraint>\"))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n   \"TARGET_FMA || TARGET_AVX512F\"\n   \"@\n-   vfmadd132<ssescalarmodesuffix>\\t{%2, %3, %0|%0, %<iptr>3, %<iptr>2}\n-   vfmadd213<ssescalarmodesuffix>\\t{%3, %2, %0|%0, %<iptr>2, %<iptr>3}\"\n+   vfmadd132<ssescalarmodesuffix>\\t{<round_op4>%2, %3, %0|%0, %<iptr>3, %<iptr>2<round_op4>}\n+   vfmadd213<ssescalarmodesuffix>\\t{<round_op4>%3, %2, %0|%0, %<iptr>2, %<iptr>3<round_op4>}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*fmai_fmsub_<mode>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v,v\")\n         (vec_merge:VF_128\n \t  (fma:VF_128\n-\t    (match_operand:VF_128   1 \"nonimmediate_operand\" \" 0, 0\")\n-\t    (match_operand:VF_128   2 \"nonimmediate_operand\" \"vm, v\")\n+\t    (match_operand:VF_128   1 \"<round_nimm_predicate>\" \"0,0\")\n+\t    (match_operand:VF_128   2 \"<round_nimm_predicate>\" \"<round_constraint>,v\")\n \t    (neg:VF_128\n-\t      (match_operand:VF_128 3 \"nonimmediate_operand\" \" v,vm\")))\n+\t      (match_operand:VF_128 3 \"<round_nimm_predicate>\" \" v,<round_constraint>\")))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n   \"TARGET_FMA || TARGET_AVX512F\"\n   \"@\n-   vfmsub132<ssescalarmodesuffix>\\t{%2, %3, %0|%0, %<iptr>3, %<iptr>2}\n-   vfmsub213<ssescalarmodesuffix>\\t{%3, %2, %0|%0, %<iptr>2, %<iptr>3}\"\n+   vfmsub132<ssescalarmodesuffix>\\t{<round_op4>%2, %3, %0|%0, %<iptr>3, %<iptr>2<round_op4>}\n+   vfmsub213<ssescalarmodesuffix>\\t{<round_op4>%3, %2, %0|%0, %<iptr>2, %<iptr>3<round_op4>}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*fmai_fnmadd_<mode>\"\n+(define_insn \"*fmai_fnmadd_<mode><round_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v,v\")\n         (vec_merge:VF_128\n \t  (fma:VF_128\n \t    (neg:VF_128\n-\t      (match_operand:VF_128 2 \"nonimmediate_operand\" \"vm, v\"))\n-\t    (match_operand:VF_128   1 \"nonimmediate_operand\" \" 0, 0\")\n-\t    (match_operand:VF_128   3 \"nonimmediate_operand\" \" v,vm\"))\n+\t      (match_operand:VF_128 2 \"<round_nimm_predicate>\" \"<round_constraint>,v\"))\n+\t    (match_operand:VF_128   1 \"<round_nimm_predicate>\" \"0,0\")\n+\t    (match_operand:VF_128   3 \"<round_nimm_predicate>\" \"v,<round_constraint>\"))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n   \"TARGET_FMA || TARGET_AVX512F\"\n   \"@\n-   vfnmadd132<ssescalarmodesuffix>\\t{%2, %3, %0|%0, %<iptr>3, %<iptr>2}\n-   vfnmadd213<ssescalarmodesuffix>\\t{%3, %2, %0|%0, %<iptr>2, %<iptr>3}\"\n+   vfnmadd132<ssescalarmodesuffix>\\t{<round_op4>%2, %3, %0|%0, %<iptr>3, %<iptr>2<round_op4>}\n+   vfnmadd213<ssescalarmodesuffix>\\t{<round_op4>%3, %2, %0|%0, %<iptr>2, %<iptr>3<round_op4>}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*fmai_fnmsub_<mode>\"\n+(define_insn \"*fmai_fnmsub_<mode><round_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v,v\")\n         (vec_merge:VF_128\n \t  (fma:VF_128\n \t    (neg:VF_128\n-\t      (match_operand:VF_128 2 \"nonimmediate_operand\" \"vm, v\"))\n-\t    (match_operand:VF_128   1 \"nonimmediate_operand\" \" 0, 0\")\n+\t      (match_operand:VF_128 2 \"<round_nimm_predicate>\" \"<round_constraint>, v\"))\n+\t    (match_operand:VF_128   1 \"<round_nimm_predicate>\" \" 0, 0\")\n \t    (neg:VF_128\n-\t      (match_operand:VF_128 3 \"nonimmediate_operand\" \" v,vm\")))\n+\t      (match_operand:VF_128 3 \"<round_nimm_predicate>\" \" v,<round_constraint>\")))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n   \"TARGET_FMA || TARGET_AVX512F\"\n   \"@\n-   vfnmsub132<ssescalarmodesuffix>\\t{%2, %3, %0|%0, %<iptr>3, %<iptr>2}\n-   vfnmsub213<ssescalarmodesuffix>\\t{%3, %2, %0|%0, %<iptr>2, %<iptr>3}\"\n+   vfnmsub132<ssescalarmodesuffix>\\t{<round_op4>%2, %3, %0|%0, %<iptr>3, %<iptr>2<round_op4>}\n+   vfnmsub213<ssescalarmodesuffix>\\t{<round_op4>%3, %2, %0|%0, %<iptr>2, %<iptr>3<round_op4>}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -3289,18 +3303,18 @@\n    (set_attr \"prefix_rep\" \"0\")\n    (set_attr \"mode\" \"SF\")])\n \n-(define_insn \"sse_cvtsi2ss\"\n+(define_insn \"sse_cvtsi2ss<round_name>\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x,v\")\n \t(vec_merge:V4SF\n \t  (vec_duplicate:V4SF\n-\t    (float:SF (match_operand:SI 2 \"nonimmediate_operand\" \"r,m,rm\")))\n+\t    (float:SF (match_operand:SI 2 \"<round_nimm_predicate>\" \"r,m,<round_constraint3>\")))\n \t  (match_operand:V4SF 1 \"register_operand\" \"0,0,v\")\n \t  (const_int 1)))]\n   \"TARGET_SSE\"\n   \"@\n    cvtsi2ss\\t{%2, %0|%0, %2}\n    cvtsi2ss\\t{%2, %0|%0, %2}\n-   vcvtsi2ss\\t{%2, %1, %0|%0, %1, %2}\"\n+   vcvtsi2ss\\t{<round_op3>%2, %1, %0|%0, %1, %2<round_op3>}\"\n   [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"vector,double,*\")\n@@ -3310,18 +3324,18 @@\n    (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n    (set_attr \"mode\" \"SF\")])\n \n-(define_insn \"sse_cvtsi2ssq\"\n+(define_insn \"sse_cvtsi2ssq<round_name>\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x,v\")\n \t(vec_merge:V4SF\n \t  (vec_duplicate:V4SF\n-\t    (float:SF (match_operand:DI 2 \"nonimmediate_operand\" \"r,m,rm\")))\n+\t    (float:SF (match_operand:DI 2 \"<round_nimm_predicate>\" \"r,m,<round_constraint3>\")))\n \t  (match_operand:V4SF 1 \"register_operand\" \"0,0,v\")\n \t  (const_int 1)))]\n   \"TARGET_SSE && TARGET_64BIT\"\n   \"@\n    cvtsi2ssq\\t{%2, %0|%0, %2}\n    cvtsi2ssq\\t{%2, %0|%0, %2}\n-   vcvtsi2ssq\\t{%2, %1, %0|%0, %1, %2}\"\n+   vcvtsi2ssq\\t{<round_op3>%2, %1, %0|%0, %1, %2<round_op3>}\"\n   [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"vector,double,*\")\n@@ -3333,15 +3347,15 @@\n    (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n    (set_attr \"mode\" \"SF\")])\n \n-(define_insn \"sse_cvtss2si\"\n+(define_insn \"sse_cvtss2si<round_name>\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(unspec:SI\n \t  [(vec_select:SF\n-\t     (match_operand:V4SF 1 \"nonimmediate_operand\" \"v,m\")\n+\t     (match_operand:V4SF 1 \"<round_nimm_predicate>\" \"v,<round_constraint2>\")\n \t     (parallel [(const_int 0)]))]\n \t  UNSPEC_FIX_NOTRUNC))]\n   \"TARGET_SSE\"\n-  \"%vcvtss2si\\t{%1, %0|%0, %k1}\"\n+  \"%vcvtss2si\\t{<round_op2>%1, %0|%0, %k1<round_op2>}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"bdver1_decode\" \"double,double\")\n@@ -3363,15 +3377,15 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"sse_cvtss2siq\"\n+(define_insn \"sse_cvtss2siq<round_name>\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(unspec:DI\n \t  [(vec_select:SF\n-\t     (match_operand:V4SF 1 \"nonimmediate_operand\" \"v,m\")\n+\t     (match_operand:V4SF 1 \"<round_nimm_predicate>\" \"v,<round_constraint2>\")\n \t     (parallel [(const_int 0)]))]\n \t  UNSPEC_FIX_NOTRUNC))]\n   \"TARGET_SSE && TARGET_64BIT\"\n-  \"%vcvtss2si{q}\\t{%1, %0|%0, %k1}\"\n+  \"%vcvtss2si{q}\\t{<round_op2>%1, %0|%0, %k1<round_op2>}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"bdver1_decode\" \"double,double\")\n@@ -3425,50 +3439,50 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"cvtusi2<ssescalarmodesuffix>32\"\n+(define_insn \"cvtusi2<ssescalarmodesuffix>32<round_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF_128\n \t  (vec_duplicate:VF_128\n \t    (unsigned_float:<ssescalarmode>\n-\t      (match_operand:SI 2 \"nonimmediate_operand\" \"rm\")))\n+\t      (match_operand:SI 2 \"<round_nimm_predicate>\" \"<round_constraint3>\")))\n \t  (match_operand:VF_128 1 \"register_operand\" \"v\")\n \t  (const_int 1)))]\n-  \"TARGET_AVX512F\"\n-  \"vcvtusi2<ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"TARGET_AVX512F && <round_modev4sf_condition>\"\n+  \"vcvtusi2<ssescalarmodesuffix>\\t{<round_op3>%2, %1, %0|%0, %1, %2<round_op3>}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n-(define_insn \"cvtusi2<ssescalarmodesuffix>64\"\n+(define_insn \"cvtusi2<ssescalarmodesuffix>64<round_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF_128\n \t  (vec_duplicate:VF_128\n \t    (unsigned_float:<ssescalarmode>\n-\t      (match_operand:DI 2 \"nonimmediate_operand\" \"rm\")))\n+\t      (match_operand:DI 2 \"<round_nimm_predicate>\" \"<round_constraint3>\")))\n \t  (match_operand:VF_128 1 \"register_operand\" \"v\")\n \t  (const_int 1)))]\n   \"TARGET_AVX512F && TARGET_64BIT\"\n-  \"vcvtusi2<ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"vcvtusi2<ssescalarmodesuffix>\\t{<round_op3>%2, %1, %0|%0, %1, %2<round_op3>}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n-(define_insn \"float<sseintvecmodelower><mode>2<mask_name>\"\n+(define_insn \"float<sseintvecmodelower><mode>2<mask_name><round_name>\"\n   [(set (match_operand:VF1 0 \"register_operand\" \"=v\")\n \t(float:VF1\n-\t  (match_operand:<sseintvecmode> 1 \"nonimmediate_operand\" \"vm\")))]\n-  \"TARGET_SSE2 && <mask_mode512bit_condition>\"\n-  \"%vcvtdq2ps\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+\t  (match_operand:<sseintvecmode> 1 \"<round_nimm_predicate>\" \"<round_constraint>\")))]\n+  \"TARGET_SSE2 && <mask_mode512bit_condition> && <round_mode512bit_condition>\"\n+  \"%vcvtdq2ps\\t{<round_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_mask_op2>}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"ufloatv16siv16sf2<mask_name>\"\n+(define_insn \"ufloatv16siv16sf2<mask_name><round_name>\"\n   [(set (match_operand:V16SF 0 \"register_operand\" \"=v\")\n \t(unsigned_float:V16SF\n-\t  (match_operand:V16SI 1 \"nonimmediate_operand\" \"vm\")))]\n+\t  (match_operand:V16SI 1 \"<round_nimm_predicate>\" \"<round_constraint>\")))]\n   \"TARGET_AVX512F\"\n-  \"vcvtudq2ps\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  \"vcvtudq2ps\\t{<round_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_mask_op2>}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"V16SF\")])\n@@ -3503,24 +3517,24 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"<mask_codefor>avx512f_fix_notruncv16sfv16si<mask_name>\"\n+(define_insn \"<mask_codefor>avx512f_fix_notruncv16sfv16si<mask_name><round_name>\"\n   [(set (match_operand:V16SI 0 \"register_operand\" \"=v\")\n \t(unspec:V16SI\n-\t  [(match_operand:V16SF 1 \"nonimmediate_operand\" \"vm\")]\n+\t  [(match_operand:V16SF 1 \"<round_nimm_predicate>\" \"<round_constraint>\")]\n \t  UNSPEC_FIX_NOTRUNC))]\n   \"TARGET_AVX512F\"\n-  \"vcvtps2dq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  \"vcvtps2dq\\t{<round_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_mask_op2>}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n-(define_insn \"<mask_codefor>avx512f_ufix_notruncv16sfv16si<mask_name>\"\n+(define_insn \"<mask_codefor>avx512f_ufix_notruncv16sfv16si<mask_name><round_name>\"\n   [(set (match_operand:V16SI 0 \"register_operand\" \"=v\")\n \t(unspec:V16SI\n-\t  [(match_operand:V16SF 1 \"nonimmediate_operand\" \"vm\")]\n+\t  [(match_operand:V16SF 1 \"<round_nimm_predicate>\" \"<round_constraint>\")]\n \t  UNSPEC_UNSIGNED_FIX_NOTRUNC))]\n   \"TARGET_AVX512F\"\n-  \"vcvtps2udq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  \"vcvtps2udq\\t{<round_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_mask_op2>}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n@@ -3638,18 +3652,18 @@\n    (set_attr \"prefix\" \"orig,orig,vex\")\n    (set_attr \"mode\" \"DF\")])\n \n-(define_insn \"sse2_cvtsi2sdq\"\n+(define_insn \"sse2_cvtsi2sdq<round_name>\"\n   [(set (match_operand:V2DF 0 \"register_operand\" \"=x,x,v\")\n \t(vec_merge:V2DF\n \t  (vec_duplicate:V2DF\n-\t    (float:DF (match_operand:DI 2 \"nonimmediate_operand\" \"r,m,rm\")))\n+\t    (float:DF (match_operand:DI 2 \"<round_nimm_predicate>\" \"r,m,<round_constraint3>\")))\n \t  (match_operand:V2DF 1 \"register_operand\" \"0,0,v\")\n \t  (const_int 1)))]\n   \"TARGET_SSE2 && TARGET_64BIT\"\n   \"@\n    cvtsi2sdq\\t{%2, %0|%0, %2}\n    cvtsi2sdq\\t{%2, %0|%0, %2}\n-   vcvtsi2sdq\\t{%2, %1, %0|%0, %1, %2}\"\n+   vcvtsi2sdq\\t{<round_op3>%2, %1, %0|%0, %1, %2<round_op3>}\"\n   [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"double,direct,*\")\n@@ -3660,28 +3674,28 @@\n    (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n    (set_attr \"mode\" \"DF\")])\n \n-(define_insn \"avx512f_vcvtss2usi\"\n+(define_insn \"avx512f_vcvtss2usi<round_name>\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(unspec:SI\n \t  [(vec_select:SF\n-\t     (match_operand:V4SF 1 \"nonimmediate_operand\" \"vm\")\n+\t     (match_operand:V4SF 1 \"<round_nimm_predicate>\" \"<round_constraint>\")\n \t     (parallel [(const_int 0)]))]\n \t  UNSPEC_UNSIGNED_FIX_NOTRUNC))]\n   \"TARGET_AVX512F\"\n-  \"vcvtss2usi\\t{%1, %0|%0, %1}\"\n+  \"vcvtss2usi\\t{<round_op2>%1, %0|%0, %1<round_op2>}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"avx512f_vcvtss2usiq\"\n+(define_insn \"avx512f_vcvtss2usiq<round_name>\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unspec:DI\n \t  [(vec_select:SF\n-\t     (match_operand:V4SF 1 \"nonimmediate_operand\" \"vm\")\n+\t     (match_operand:V4SF 1 \"<round_nimm_predicate>\" \"<round_constraint>\")\n \t     (parallel [(const_int 0)]))]\n \t  UNSPEC_UNSIGNED_FIX_NOTRUNC))]\n   \"TARGET_AVX512F && TARGET_64BIT\"\n-  \"vcvtss2usi\\t{%1, %0|%0, %1}\"\n+  \"vcvtss2usi\\t{<round_op2>%1, %0|%0, %1<round_op2>}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"DI\")])\n@@ -3710,28 +3724,28 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"avx512f_vcvtsd2usi\"\n+(define_insn \"avx512f_vcvtsd2usi<round_name>\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(unspec:SI\n \t  [(vec_select:DF\n-\t     (match_operand:V2DF 1 \"nonimmediate_operand\" \"vm\")\n+\t     (match_operand:V2DF 1 \"<round_nimm_predicate>\" \"<round_constraint>\")\n \t     (parallel [(const_int 0)]))]\n \t  UNSPEC_UNSIGNED_FIX_NOTRUNC))]\n   \"TARGET_AVX512F\"\n-  \"vcvtsd2usi\\t{%1, %0|%0, %1}\"\n+  \"vcvtsd2usi\\t{<round_op2>%1, %0|%0, %1<round_op2>}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"avx512f_vcvtsd2usiq\"\n+(define_insn \"avx512f_vcvtsd2usiq<round_name>\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unspec:DI\n \t  [(vec_select:DF\n-\t     (match_operand:V2DF 1 \"nonimmediate_operand\" \"vm\")\n+\t     (match_operand:V2DF 1 \"<round_nimm_predicate>\" \"<round_constraint>\")\n \t     (parallel [(const_int 0)]))]\n \t  UNSPEC_UNSIGNED_FIX_NOTRUNC))]\n   \"TARGET_AVX512F && TARGET_64BIT\"\n-  \"vcvtsd2usi\\t{%1, %0|%0, %1}\"\n+  \"vcvtsd2usi\\t{<round_op2>%1, %0|%0, %1<round_op2>}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"DI\")])\n@@ -3760,15 +3774,15 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"sse2_cvtsd2si\"\n+(define_insn \"sse2_cvtsd2si<round_name>\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(unspec:SI\n \t  [(vec_select:DF\n-\t     (match_operand:V2DF 1 \"nonimmediate_operand\" \"v,m\")\n+\t     (match_operand:V2DF 1 \"<round_nimm_predicate>\" \"v,<round_constraint2>\")\n \t     (parallel [(const_int 0)]))]\n \t  UNSPEC_FIX_NOTRUNC))]\n   \"TARGET_SSE2\"\n-  \"%vcvtsd2si\\t{%1, %0|%0, %q1}\"\n+  \"%vcvtsd2si\\t{<round_op2>%1, %0|%0, %q1<round_op2>}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"bdver1_decode\" \"double,double\")\n@@ -3791,15 +3805,15 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"sse2_cvtsd2siq\"\n+(define_insn \"sse2_cvtsd2siq<round_name>\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(unspec:DI\n \t  [(vec_select:DF\n-\t     (match_operand:V2DF 1 \"nonimmediate_operand\" \"v,m\")\n+\t     (match_operand:V2DF 1 \"<round_nimm_predicate>\" \"v,<round_constraint2>\")\n \t     (parallel [(const_int 0)]))]\n \t  UNSPEC_FIX_NOTRUNC))]\n   \"TARGET_SSE2 && TARGET_64BIT\"\n-  \"%vcvtsd2si{q}\\t{%1, %0|%0, %q1}\"\n+  \"%vcvtsd2si{q}\\t{<round_op2>%1, %0|%0, %q1<round_op2>}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"bdver1_decode\" \"double,double\")\n@@ -3920,13 +3934,13 @@\n    (set_attr \"ssememalign\" \"64\")\n    (set_attr \"mode\" \"V2DF\")])\n \n-(define_insn \"<mask_codefor>avx512f_cvtpd2dq512<mask_name>\"\n+(define_insn \"<mask_codefor>avx512f_cvtpd2dq512<mask_name><round_name>\"\n   [(set (match_operand:V8SI 0 \"register_operand\" \"=v\")\n \t(unspec:V8SI\n-\t  [(match_operand:V8DF 1 \"nonimmediate_operand\" \"vm\")]\n+\t  [(match_operand:V8DF 1 \"<round_nimm_predicate>\" \"<round_constraint>\")]\n \t  UNSPEC_FIX_NOTRUNC))]\n   \"TARGET_AVX512F\"\n-  \"vcvtpd2dq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  \"vcvtpd2dq\\t{<round_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_mask_op2>}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"OI\")])\n@@ -3994,13 +4008,13 @@\n    (set_attr \"athlon_decode\" \"vector\")\n    (set_attr \"bdver1_decode\" \"double\")])\n \n-(define_insn \"avx512f_ufix_notruncv8dfv8si<mask_name>\"\n+(define_insn \"avx512f_ufix_notruncv8dfv8si<mask_name><round_name>\"\n   [(set (match_operand:V8SI 0 \"register_operand\" \"=v\")\n \t(unspec:V8SI\n-\t  [(match_operand:V8DF 1 \"nonimmediate_operand\" \"vm\")]\n+\t  [(match_operand:V8DF 1 \"<round_nimm_predicate>\" \"<round_constraint>\")]\n \t  UNSPEC_UNSIGNED_FIX_NOTRUNC))]\n   \"TARGET_AVX512F\"\n-  \"vcvtpd2udq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  \"vcvtpd2udq\\t{<round_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_mask_op2>}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"OI\")])\n@@ -4116,12 +4130,12 @@\n    (set_attr \"prefix\" \"orig,orig,vex\")\n    (set_attr \"mode\" \"DF\")])\n \n-(define_insn \"<mask_codefor>avx512f_cvtpd2ps512<mask_name>\"\n+(define_insn \"<mask_codefor>avx512f_cvtpd2ps512<mask_name><round_name>\"\n   [(set (match_operand:V8SF 0 \"register_operand\" \"=v\")\n \t(float_truncate:V8SF\n-\t  (match_operand:V8DF 1 \"nonimmediate_operand\" \"vm\")))]\n+\t  (match_operand:V8DF 1 \"<round_nimm_predicate>\" \"<round_constraint>\")))]\n   \"TARGET_AVX512F\"\n-  \"vcvtpd2ps\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  \"vcvtpd2ps\\t{<round_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_mask_op2>}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"V8SF\")])\n@@ -6489,14 +6503,14 @@\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\"  \"<ssescalarmode>\")])\n \n-(define_insn \"avx512f_scalef<mode><mask_name>\"\n+(define_insn \"avx512f_scalef<mode><mask_name><round_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n \t(unspec:VF_512\n \t  [(match_operand:VF_512 1 \"register_operand\" \"v\")\n-\t   (match_operand:VF_512 2 \"nonimmediate_operand\" \"vm\")]\n+\t   (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>\")]\n \t  UNSPEC_SCALEF))]\n   \"TARGET_AVX512F\"\n-  \"%vscalef<ssemodesuffix>\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n+  \"%vscalef<ssemodesuffix>\\t{<round_mask_op3>%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2<round_mask_op3>}\"\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\"  \"<MODE>\")])\n \n@@ -8230,22 +8244,22 @@\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_expand \"<code><mode>3<mask_name>\"\n+(define_expand \"<code><mode>3<mask_name><round_name>\"\n   [(set (match_operand:VI124_256_48_512 0 \"register_operand\")\n \t(maxmin:VI124_256_48_512\n-\t  (match_operand:VI124_256_48_512 1 \"nonimmediate_operand\")\n-\t  (match_operand:VI124_256_48_512 2 \"nonimmediate_operand\")))]\n-  \"TARGET_AVX2 && <mask_mode512bit_condition>\"\n+\t  (match_operand:VI124_256_48_512 1 \"<round_nimm_predicate>\")\n+\t  (match_operand:VI124_256_48_512 2 \"<round_nimm_predicate>\")))]\n+  \"TARGET_AVX2 && <mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n-(define_insn \"*avx2_<code><mode>3<mask_name>\"\n+(define_insn \"*avx2_<code><mode>3<mask_name><round_name>\"\n   [(set (match_operand:VI124_256_48_512 0 \"register_operand\" \"=v\")\n \t(maxmin:VI124_256_48_512\n-\t  (match_operand:VI124_256_48_512 1 \"nonimmediate_operand\" \"%v\")\n-\t  (match_operand:VI124_256_48_512 2 \"nonimmediate_operand\" \"vm\")))]\n+\t  (match_operand:VI124_256_48_512 1 \"<round_nimm_predicate>\" \"%v\")\n+\t  (match_operand:VI124_256_48_512 2 \"<round_nimm_predicate>\" \"<round_constraint>\")))]\n   \"TARGET_AVX2 && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\n-   && <mask_mode512bit_condition>\"\n-  \"vp<maxmin_int><ssemodesuffix>\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n+   && <mask_mode512bit_condition> && <round_mode512bit_condition>\"\n+  \"vp<maxmin_int><ssemodesuffix>\\t{<round_mask_op3>%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2<round_mask_op3>}\"\n   [(set_attr \"type\" \"sseiadd\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"maybe_evex\")\n@@ -12543,33 +12557,33 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n-(define_insn \"avx512er_exp2<mode><mask_name>\"\n+(define_insn \"avx512er_exp2<mode><mask_name><round_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n \t(unspec:VF_512\n-\t  [(match_operand:VF_512 1 \"nonimmediate_operand\" \"vm\")]\n+\t  [(match_operand:VF_512 1 \"<round_nimm_predicate>\" \"<round_constraint>\")]\n \t  UNSPEC_EXP2))]\n   \"TARGET_AVX512ER\"\n-  \"vexp2<ssemodesuffix>\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  \"vexp2<ssemodesuffix>\\t{<round_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_mask_op2>}\"\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"<mask_codefor>avx512er_rcp28<mode><mask_name>\"\n+(define_insn \"<mask_codefor>avx512er_rcp28<mode><mask_name><round_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n \t(unspec:VF_512\n-\t  [(match_operand:VF_512 1 \"nonimmediate_operand\" \"vm\")]\n+\t  [(match_operand:VF_512 1 \"<round_nimm_predicate>\" \"<round_constraint>\")]\n \t  UNSPEC_RCP28))]\n   \"TARGET_AVX512ER\"\n-  \"vrcp28<ssemodesuffix>\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  \"vrcp28<ssemodesuffix>\\t{<round_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_mask_op2>}\"\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"<mask_codefor>avx512er_rsqrt28<mode><mask_name>\"\n+(define_insn \"<mask_codefor>avx512er_rsqrt28<mode><mask_name><round_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n \t(unspec:VF_512\n-\t  [(match_operand:VF_512 1 \"nonimmediate_operand\" \"vm\")]\n+\t  [(match_operand:VF_512 1 \"<round_nimm_predicate>\" \"<round_constraint>\")]\n \t  UNSPEC_RSQRT28))]\n   \"TARGET_AVX512ER\"\n-  \"vrsqrt28<ssemodesuffix>\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  \"vrsqrt28<ssemodesuffix>\\t{<round_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_mask_op2>}\"\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n "}, {"sha": "b20cf20f95df69a3280601d03991f19a0875dba1", "filename": "gcc/config/i386/subst.md", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bc9e41f4da836809323409de0a27892cba655a/gcc%2Fconfig%2Fi386%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bc9e41f4da836809323409de0a27892cba655a/gcc%2Fconfig%2Fi386%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsubst.md?ref=06bc9e41f4da836809323409de0a27892cba655a", "patch": "@@ -30,6 +30,16 @@\n (define_mode_iterator SUBST_S\n   [QI HI SI DI])\n \n+(define_mode_iterator SUBST_A\n+  [V16QI\n+   V16HI V8HI\n+   V16SI V8SI  V4SI\n+   V8DI  V4DI  V2DI\n+   V16SF V8SF  V4SF\n+   V8DF  V4DF  V2DF\n+   QI HI SI DI SF DF\n+   CCFP CCFPU])\n+\n (define_subst_attr \"mask_name\" \"mask\" \"\" \"_mask\")\n (define_subst_attr \"mask_applied\" \"mask\" \"false\" \"true\")\n (define_subst_attr \"mask_operand2\" \"mask\" \"\" \"%{%3%}%N2\")\n@@ -87,3 +97,35 @@\n \t (match_operand:SUBST_V 2 \"const0_operand\" \"C\")\n \t (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"k\")))\n ])\n+\n+(define_subst_attr \"round_name\" \"round\" \"\" \"_round\")\n+(define_subst_attr \"round_mask_operand2\" \"mask\" \"%R2\" \"%R4\")\n+(define_subst_attr \"round_mask_operand3\" \"mask\" \"%R3\" \"%R5\")\n+(define_subst_attr \"round_mask_scalar_operand3\" \"mask_scalar\" \"%R3\" \"%R5\")\n+(define_subst_attr \"round_sd_mask_operand4\" \"sd\" \"%R4\" \"%R6\")\n+(define_subst_attr \"round_op2\" \"round\" \"\" \"%R2\")\n+(define_subst_attr \"round_op3\" \"round\" \"\" \"%R3\")\n+(define_subst_attr \"round_op4\" \"round\" \"\" \"%R4\")\n+(define_subst_attr \"round_op5\" \"round\" \"\" \"%R5\")\n+(define_subst_attr \"round_op6\" \"round\" \"\" \"%R6\")\n+(define_subst_attr \"round_mask_op2\" \"round\" \"\" \"<round_mask_operand2>\")\n+(define_subst_attr \"round_mask_op3\" \"round\" \"\" \"<round_mask_operand3>\")\n+(define_subst_attr \"round_mask_scalar_op3\" \"round\" \"\" \"<round_mask_scalar_operand3>\")\n+(define_subst_attr \"round_sd_mask_op4\" \"round\" \"\" \"<round_sd_mask_operand4>\")\n+(define_subst_attr \"round_constraint\" \"round\" \"vm\" \"v\")\n+(define_subst_attr \"round_constraint2\" \"round\" \"m\" \"v\")\n+(define_subst_attr \"round_constraint3\" \"round\" \"rm\" \"r\")\n+(define_subst_attr \"round_nimm_predicate\" \"round\" \"nonimmediate_operand\" \"register_operand\")\n+(define_subst_attr \"round_mode512bit_condition\" \"round\" \"1\" \"(GET_MODE (operands[0]) == V16SFmode || GET_MODE (operands[0]) == V8DFmode)\")\n+(define_subst_attr \"round_modev4sf_condition\" \"round\" \"1\" \"(GET_MODE (operands[0]) == V4SFmode)\")\n+(define_subst_attr \"round_codefor\" \"round\" \"*\" \"\")\n+(define_subst_attr \"round_opnum\" \"round\" \"5\" \"6\")\n+\n+(define_subst \"round\"\n+  [(set (match_operand:SUBST_A 0)\n+        (match_operand:SUBST_A 1))]\n+  \"TARGET_AVX512F\"\n+  [(parallel[\n+     (set (match_dup 0)\n+          (match_dup 1))\n+     (unspec [(match_operand:SI 2 \"const_0_to_4_operand\")] UNSPEC_EMBEDDED_ROUNDING)])])"}]}