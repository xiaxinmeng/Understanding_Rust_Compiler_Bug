{"sha": "a81f2330a313bcba17be25819ba4c3ad9ffd03c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgxZjIzMzBhMzEzYmNiYTE3YmUyNTgxOWJhNGMzYWQ5ZmZkMDNjNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-11-16T18:42:35Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-11-16T18:42:35Z"}, "message": "i386.md (cbranchsi4): Use nonimmediate_operand for operand 1 predicate.\n\n\t* config/i386/i386.md (cbranchsi4): Use nonimmediate_operand for\n\toperand 1 predicate.\n\t(cstoresi4): Ditto for operand 2.\n\t(cbranch<mode>4): Macroize expander from cbranch{qi,hi,si,di,ti}4\n\tpatterns using SDWIM mode iterator.\n\t(cstore<mode>4): Macroize expander from cstore{qi,hi,si,di}4 patterns\n\tusing SWIM mode iterator.\n\t(cmpdi_1): Rename from cmpdi_1_rex64.\n\t(cmp<mode>_1): Macroize expander from cmp{si,di}_1 patterns using\n\tSWI48 mode iterator.\n\t(*cmp<mode>_1): Macroize insn from *cmp{qi,hi,si,di}_1_insn using SWI\n\tmode iterator.\n\t(*cmp<mode>_ccno_1): Ditto from *cmp{qi,hi,si,di}_ccno_1.\n\t(*cmp<mode>_minus_1): Ditto from *cmp{qi,hi,si,di}_minus_1.\n\t(*cmpqi_ext_3_insn): Make private.\n\t(*cmpqi_ext_3_insn_rex64): Make private.\n\t(cmpstrnsi): Update for renamed cmpdi_1_rex64.\n\t* config/i386/predicates.md (cmpsi_operand): Remove.\n\nFrom-SVN: r154212", "tree": {"sha": "a9cf6e65a8660817c51dbd6ab7ed9507252386e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9cf6e65a8660817c51dbd6ab7ed9507252386e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a81f2330a313bcba17be25819ba4c3ad9ffd03c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a81f2330a313bcba17be25819ba4c3ad9ffd03c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a81f2330a313bcba17be25819ba4c3ad9ffd03c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a81f2330a313bcba17be25819ba4c3ad9ffd03c7/comments", "author": null, "committer": null, "parents": [{"sha": "f61428ed3c6921fb19b70d103d32ba072f6dadcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f61428ed3c6921fb19b70d103d32ba072f6dadcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f61428ed3c6921fb19b70d103d32ba072f6dadcd"}], "stats": {"total": 383, "additions": 74, "deletions": 309}, "files": [{"sha": "bcfe5a96aff724b067e6c301ddc7bdf33eefe14c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81f2330a313bcba17be25819ba4c3ad9ffd03c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81f2330a313bcba17be25819ba4c3ad9ffd03c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a81f2330a313bcba17be25819ba4c3ad9ffd03c7", "patch": "@@ -1,23 +1,44 @@\n+2009-11-16  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (cbranchsi4): Use nonimmediate_operand for\n+\toperand 1 predicate.\n+\t(cstoresi4): Ditto for operand 2.\n+\t(cbranch<mode>4): Macroize expander from cbranch{qi,hi,si,di,ti}4\n+\tpatterns using SDWIM mode iterator.\n+\t(cstore<mode>4): Macroize expander from cstore{qi,hi,si,di}4 patterns\n+\tusing SWIM mode iterator.\n+\t(cmpdi_1): Rename from cmpdi_1_rex64.\n+\t(cmp<mode>_1): Macroize expander from cmp{si,di}_1 patterns using\n+\tSWI48 mode iterator.\n+\t(*cmp<mode>_1): Macroize insn from *cmp{qi,hi,si,di}_1_insn using SWI\n+\tmode iterator.\n+\t(*cmp<mode>_ccno_1): Ditto from *cmp{qi,hi,si,di}_ccno_1.\n+\t(*cmp<mode>_minus_1): Ditto from *cmp{qi,hi,si,di}_minus_1.\n+\t(*cmpqi_ext_3_insn): Make private.\n+\t(*cmpqi_ext_3_insn_rex64): Make private.\n+\t(cmpstrnsi): Update for renamed cmpdi_1_rex64.\n+\t* config/i386/predicates.md (cmpsi_operand): Remove.\n+\n 2009-11-16  Paul Brook  <paul@codesourcery.com>\n \n \t* doc/invoke.texi: Document ARM VFPv4 based FPUs.\n \t* config/arm/arm.c (all_fpus): Add VFPv4 entries.\n \n 2009-11-14  Jan Hubicka  <jh@suse.cz>\n \n-\t* cgraphbuild.c (compute_call_stmt_bb_frequency): Use proper ENTRY_BLOCK_PTR.\n-\t* cgraph.c (cgraph_clone_edge): Avoid freq_scale 0 to completely zero out all\n-\tcallees.\n-\t* cgraphunit.c (verify_cgraph_node): Verify cgraph nodes for frequency and count match.\n+\t* cgraphbuild.c (compute_call_stmt_bb_frequency): Use proper\n+\tENTRY_BLOCK_PTR.\n+\t* cgraph.c (cgraph_clone_edge): Avoid freq_scale 0 to completely\n+\tzero out all callees.\n+\t* cgraphunit.c (verify_cgraph_node): Verify cgraph nodes for\n+\tfrequency and count match.\n \t* ipa-inline.c (update_noncloned_frequencies): New function.\n \t(cgraph_clone_inlined_nodes): Use it.\n \t* tree-inline.c (copy_bb): Fix frequency scaling; output\n \tdiagnostic on frequency mismatches to dump file.\n \t(initialize_cfun): Do not scale frequency; fix count scaling;\n-\tinitialize entry and exit block frequencies; copy profile\n-\tinfo.\n-\t(copy_cfg_body): Use frequency_scale as argument;\n-\tfix count scaling.\n+\tinitialize entry and exit block frequencies; copy profile info.\n+\t(copy_cfg_body): Use frequency_scale as argument; fix count scaling.\n \t(copy_body): Use frequency_scale as argument.\n \t(expand_call_inline): Compute frequency scale and output diagnostic\n \tto dump file.\n@@ -65,7 +86,7 @@\n \tnew 'outgoing' argument.\n \t(iq2000_libcall_value, iq2000_function_value_regno_p): New functions.\n \t(TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE): Declare.\n-\t* config/iq2000/iq2000.h: (FUNCTION_VALUE_REGNO_P): Redefine, use\n+\t* config/iq2000/iq2000.h (FUNCTION_VALUE_REGNO_P): Redefine, use\n \tiq2000_function_value_regno_p.\n \t(FUNCTION_VALUE, LIBCALL_VALUE): Remove.\n \t* config/iq2000/iq2000-protos.h (iq2000_function_value_regno_p):"}, {"sha": "8ed381fd6c6a0df00bfaa22bc6d79c0bcbc428be", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 44, "deletions": 283, "changes": 327, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81f2330a313bcba17be25819ba4c3ad9ffd03c7/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81f2330a313bcba17be25819ba4c3ad9ffd03c7/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a81f2330a313bcba17be25819ba4c3ad9ffd03c7", "patch": "@@ -843,322 +843,80 @@\n \f\n ;; Compare and branch/compare and store instructions.\n \n-(define_expand \"cbranchti4\"\n-  [(set (reg:CC FLAGS_REG)\n-\t(compare:CC (match_operand:TI 1 \"nonimmediate_operand\" \"\")\n-\t\t    (match_operand:TI 2 \"x86_64_general_operand\" \"\")))\n-   (set (pc) (if_then_else\n-              (match_operator 0 \"comparison_operator\"\n-               [(reg:CC FLAGS_REG)\n-                (const_int 0)])\n-              (label_ref (match_operand 3 \"\" \"\"))\n-              (pc)))]\n-  \"TARGET_64BIT\"\n-{\n-  if (MEM_P (operands[1]) && MEM_P (operands[2]))\n-    operands[1] = force_reg (TImode, operands[1]);\n-  ix86_compare_op0 = operands[1];\n-  ix86_compare_op1 = operands[2];\n-  ix86_expand_branch (GET_CODE (operands[0]), operands[3]);\n-  DONE;\n-})\n-\n-(define_expand \"cbranchdi4\"\n-  [(set (reg:CC FLAGS_REG)\n-\t(compare:CC (match_operand:DI 1 \"nonimmediate_operand\" \"\")\n-\t\t    (match_operand:DI 2 \"x86_64_general_operand\" \"\")))\n-   (set (pc) (if_then_else\n-              (match_operator 0 \"comparison_operator\"\n-               [(reg:CC FLAGS_REG)\n-                (const_int 0)])\n-              (label_ref (match_operand 3 \"\" \"\"))\n-              (pc)))]\n-  \"\"\n-{\n-  if (MEM_P (operands[1]) && MEM_P (operands[2]))\n-    operands[1] = force_reg (DImode, operands[1]);\n-  ix86_compare_op0 = operands[1];\n-  ix86_compare_op1 = operands[2];\n-  ix86_expand_branch (GET_CODE (operands[0]), operands[3]);\n-  DONE;\n-})\n-\n-(define_expand \"cstoredi4\"\n-  [(set (reg:CC FLAGS_REG)\n-\t(compare:CC (match_operand:DI 2 \"nonimmediate_operand\" \"\")\n-\t\t    (match_operand:DI 3 \"x86_64_general_operand\" \"\")))\n-   (set (match_operand:QI 0 \"register_operand\" \"\")\n-              (match_operator 1 \"comparison_operator\"\n-               [(reg:CC FLAGS_REG)\n-                (const_int 0)]))]\n-  \"TARGET_64BIT\"\n-{\n-  if (MEM_P (operands[2]) && MEM_P (operands[3]))\n-    operands[2] = force_reg (DImode, operands[2]);\n-  ix86_compare_op0 = operands[2];\n-  ix86_compare_op1 = operands[3];\n-  ix86_expand_setcc (GET_CODE (operands[1]), operands[0]);\n-  DONE;\n-})\n-\n-(define_expand \"cbranchsi4\"\n-  [(set (reg:CC FLAGS_REG)\n-\t(compare:CC (match_operand:SI 1 \"cmpsi_operand\" \"\")\n-\t\t    (match_operand:SI 2 \"general_operand\" \"\")))\n-   (set (pc) (if_then_else\n-              (match_operator 0 \"comparison_operator\"\n-               [(reg:CC FLAGS_REG)\n-                (const_int 0)])\n-              (label_ref (match_operand 3 \"\" \"\"))\n-              (pc)))]\n-  \"\"\n-{\n-  if (MEM_P (operands[1]) && MEM_P (operands[2]))\n-    operands[1] = force_reg (SImode, operands[1]);\n-  ix86_compare_op0 = operands[1];\n-  ix86_compare_op1 = operands[2];\n-  ix86_expand_branch (GET_CODE (operands[0]), operands[3]);\n-  DONE;\n-})\n-\n-(define_expand \"cstoresi4\"\n-  [(set (reg:CC FLAGS_REG)\n-\t(compare:CC (match_operand:SI 2 \"cmpsi_operand\" \"\")\n-\t\t    (match_operand:SI 3 \"general_operand\" \"\")))\n-   (set (match_operand:QI 0 \"register_operand\" \"\")\n-              (match_operator 1 \"comparison_operator\"\n-               [(reg:CC FLAGS_REG)\n-                (const_int 0)]))]\n-  \"\"\n-{\n-  if (MEM_P (operands[2]) && MEM_P (operands[3]))\n-    operands[2] = force_reg (SImode, operands[2]);\n-  ix86_compare_op0 = operands[2];\n-  ix86_compare_op1 = operands[3];\n-  ix86_expand_setcc (GET_CODE (operands[1]), operands[0]);\n-  DONE;\n-})\n-\n-(define_expand \"cbranchhi4\"\n-  [(set (reg:CC FLAGS_REG)\n-\t(compare:CC (match_operand:HI 1 \"nonimmediate_operand\" \"\")\n-\t\t    (match_operand:HI 2 \"general_operand\" \"\")))\n-   (set (pc) (if_then_else\n-              (match_operator 0 \"comparison_operator\"\n-               [(reg:CC FLAGS_REG)\n-                (const_int 0)])\n-              (label_ref (match_operand 3 \"\" \"\"))\n-              (pc)))]\n-  \"\"\n-{\n-  if (MEM_P (operands[1]) && MEM_P (operands[2]))\n-    operands[1] = force_reg (HImode, operands[1]);\n-  ix86_compare_op0 = operands[1];\n-  ix86_compare_op1 = operands[2];\n-  ix86_expand_branch (GET_CODE (operands[0]), operands[3]);\n-  DONE;\n-})\n-\n-(define_expand \"cstorehi4\"\n-  [(set (reg:CC FLAGS_REG)\n-\t(compare:CC (match_operand:HI 2 \"nonimmediate_operand\" \"\")\n-\t\t    (match_operand:HI 3 \"general_operand\" \"\")))\n-   (set (match_operand:QI 0 \"register_operand\" \"\")\n-              (match_operator 1 \"comparison_operator\"\n-               [(reg:CC FLAGS_REG)\n-                (const_int 0)]))]\n-  \"\"\n-{\n-  if (MEM_P (operands[2]) && MEM_P (operands[3]))\n-    operands[2] = force_reg (HImode, operands[2]);\n-  ix86_compare_op0 = operands[2];\n-  ix86_compare_op1 = operands[3];\n-  ix86_expand_setcc (GET_CODE (operands[1]), operands[0]);\n-  DONE;\n-})\n-\n-\n-(define_expand \"cbranchqi4\"\n+(define_expand \"cbranch<mode>4\"\n   [(set (reg:CC FLAGS_REG)\n-\t(compare:CC (match_operand:QI 1 \"nonimmediate_operand\" \"\")\n-\t\t    (match_operand:QI 2 \"general_operand\" \"\")))\n+\t(compare:CC (match_operand:SDWIM 1 \"nonimmediate_operand\" \"\")\n+\t\t    (match_operand:SDWIM 2 \"<general_operand>\" \"\")))\n    (set (pc) (if_then_else\n-              (match_operator 0 \"comparison_operator\"\n-               [(reg:CC FLAGS_REG)\n-                (const_int 0)])\n-              (label_ref (match_operand 3 \"\" \"\"))\n-              (pc)))]\n+\t       (match_operator 0 \"comparison_operator\"\n+\t\t[(reg:CC FLAGS_REG) (const_int 0)])\n+\t       (label_ref (match_operand 3 \"\" \"\"))\n+\t       (pc)))]\n   \"\"\n {\n   if (MEM_P (operands[1]) && MEM_P (operands[2]))\n-    operands[1] = force_reg (QImode, operands[1]);\n+    operands[1] = force_reg (<MODE>mode, operands[1]);\n   ix86_compare_op0 = operands[1];\n   ix86_compare_op1 = operands[2];\n   ix86_expand_branch (GET_CODE (operands[0]), operands[3]);\n   DONE;\n })\n \n-\n-(define_expand \"cstoreqi4\"\n+(define_expand \"cstore<mode>4\"\n   [(set (reg:CC FLAGS_REG)\n-\t(compare:CC (match_operand:QI 2 \"nonimmediate_operand\" \"\")\n-\t\t    (match_operand:QI 3 \"general_operand\" \"\")))\n+\t(compare:CC (match_operand:SWIM 2 \"nonimmediate_operand\" \"\")\n+\t\t    (match_operand:SWIM 3 \"<general_operand>\" \"\")))\n    (set (match_operand:QI 0 \"register_operand\" \"\")\n-              (match_operator 1 \"comparison_operator\"\n-               [(reg:CC FLAGS_REG)\n-                (const_int 0)]))]\n+\t(match_operator 1 \"comparison_operator\"\n+\t  [(reg:CC FLAGS_REG) (const_int 0)]))]\n   \"\"\n {\n   if (MEM_P (operands[2]) && MEM_P (operands[3]))\n-    operands[2] = force_reg (QImode, operands[2]);\n+    operands[2] = force_reg (<MODE>mode, operands[2]);\n   ix86_compare_op0 = operands[2];\n   ix86_compare_op1 = operands[3];\n   ix86_expand_setcc (GET_CODE (operands[1]), operands[0]);\n   DONE;\n })\n \n-\n-(define_insn \"cmpdi_ccno_1_rex64\"\n-  [(set (reg FLAGS_REG)\n-\t(compare (match_operand:DI 0 \"nonimmediate_operand\" \"r,?mr\")\n-\t\t (match_operand:DI 1 \"const0_operand\" \"\")))]\n-  \"TARGET_64BIT && ix86_match_ccmode (insn, CCNOmode)\"\n-  \"@\n-   test{q}\\t%0, %0\n-   cmp{q}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"test,icmp\")\n-   (set_attr \"length_immediate\" \"0,1\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"*cmpdi_minus_1_rex64\"\n-  [(set (reg FLAGS_REG)\n-\t(compare (minus:DI (match_operand:DI 0 \"nonimmediate_operand\" \"rm,r\")\n-\t\t\t   (match_operand:DI 1 \"x86_64_general_operand\" \"re,mr\"))\n-\t\t (const_int 0)))]\n-  \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\"\n-  \"cmp{q}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"icmp\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_expand \"cmpdi_1_rex64\"\n-  [(set (reg:CC FLAGS_REG)\n-\t(compare:CC (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n-\t\t    (match_operand:DI 1 \"general_operand\" \"\")))]\n-  \"TARGET_64BIT\"\n-  \"\")\n-\n-(define_insn \"cmpdi_1_insn_rex64\"\n-  [(set (reg FLAGS_REG)\n-\t(compare (match_operand:DI 0 \"nonimmediate_operand\" \"mr,r\")\n-\t\t (match_operand:DI 1 \"x86_64_general_operand\" \"re,mr\")))]\n-  \"TARGET_64BIT && ix86_match_ccmode (insn, CCmode)\"\n-  \"cmp{q}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"icmp\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-\n-(define_insn \"*cmpsi_ccno_1\"\n-  [(set (reg FLAGS_REG)\n-\t(compare (match_operand:SI 0 \"nonimmediate_operand\" \"r,?mr\")\n-\t\t (match_operand:SI 1 \"const0_operand\" \"\")))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\"\n-  \"@\n-   test{l}\\t%0, %0\n-   cmp{l}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"test,icmp\")\n-   (set_attr \"length_immediate\" \"0,1\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"*cmpsi_minus_1\"\n-  [(set (reg FLAGS_REG)\n-\t(compare (minus:SI (match_operand:SI 0 \"nonimmediate_operand\" \"rm,r\")\n-\t\t\t   (match_operand:SI 1 \"general_operand\" \"ri,mr\"))\n-\t\t (const_int 0)))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\"\n-  \"cmp{l}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"icmp\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_expand \"cmpsi_1\"\n+(define_expand \"cmp<mode>_1\"\n   [(set (reg:CC FLAGS_REG)\n-\t(compare:CC (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n-\t\t    (match_operand:SI 1 \"general_operand\" \"\")))]\n+\t(compare:CC (match_operand:SWI48 0 \"nonimmediate_operand\" \"\")\n+\t\t    (match_operand:SWI48 1 \"<general_operand>\" \"\")))]\n   \"\"\n   \"\")\n \n-(define_insn \"*cmpsi_1_insn\"\n-  [(set (reg FLAGS_REG)\n-\t(compare (match_operand:SI 0 \"nonimmediate_operand\" \"rm,r\")\n-\t\t (match_operand:SI 1 \"general_operand\" \"ri,mr\")))]\n-  \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n-    && ix86_match_ccmode (insn, CCmode)\"\n-  \"cmp{l}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"icmp\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"*cmphi_ccno_1\"\n-  [(set (reg FLAGS_REG)\n-\t(compare (match_operand:HI 0 \"nonimmediate_operand\" \"r,?mr\")\n-\t\t (match_operand:HI 1 \"const0_operand\" \"\")))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\"\n-  \"@\n-   test{w}\\t%0, %0\n-   cmp{w}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"test,icmp\")\n-   (set_attr \"length_immediate\" \"0,1\")\n-   (set_attr \"mode\" \"HI\")])\n-\n-(define_insn \"*cmphi_minus_1\"\n-  [(set (reg FLAGS_REG)\n-\t(compare (minus:HI (match_operand:HI 0 \"nonimmediate_operand\" \"rm,r\")\n-\t\t\t   (match_operand:HI 1 \"general_operand\" \"rn,mr\"))\n-\t\t (const_int 0)))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\"\n-  \"cmp{w}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"icmp\")\n-   (set_attr \"mode\" \"HI\")])\n-\n-(define_insn \"*cmphi_1\"\n-  [(set (reg FLAGS_REG)\n-\t(compare (match_operand:HI 0 \"nonimmediate_operand\" \"rm,r\")\n-\t\t (match_operand:HI 1 \"general_operand\" \"rn,mr\")))]\n-  \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n-   && ix86_match_ccmode (insn, CCmode)\"\n-  \"cmp{w}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"icmp\")\n-   (set_attr \"mode\" \"HI\")])\n-\n-(define_insn \"*cmpqi_ccno_1\"\n+(define_insn \"*cmp<mode>_ccno_1\"\n   [(set (reg FLAGS_REG)\n-\t(compare (match_operand:QI 0 \"nonimmediate_operand\" \"q,?mq\")\n-\t\t (match_operand:QI 1 \"const0_operand\" \"\")))]\n+\t(compare (match_operand:SWI 0 \"nonimmediate_operand\" \"<r>,?m<r>\")\n+\t\t (match_operand:SWI 1 \"const0_operand\" \"\")))]\n   \"ix86_match_ccmode (insn, CCNOmode)\"\n   \"@\n-   test{b}\\t%0, %0\n-   cmp{b}\\t{$0, %0|%0, 0}\"\n+   test{<imodesuffix>}\\t%0, %0\n+   cmp{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"test,icmp\")\n    (set_attr \"length_immediate\" \"0,1\")\n-   (set_attr \"mode\" \"QI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*cmpqi_1\"\n+(define_insn \"*cmp<mode>_1\"\n   [(set (reg FLAGS_REG)\n-\t(compare (match_operand:QI 0 \"nonimmediate_operand\" \"qm,q\")\n-\t\t (match_operand:QI 1 \"general_operand\" \"qn,mq\")))]\n-  \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n-    && ix86_match_ccmode (insn, CCmode)\"\n-  \"cmp{b}\\t{%1, %0|%0, %1}\"\n+\t(compare (match_operand:SWI 0 \"nonimmediate_operand\" \"<r>m,<r>\")\n+\t\t (match_operand:SWI 1 \"<general_operand>\" \"<r><i>,<r>m\")))]\n+  \"ix86_match_ccmode (insn, CCmode)\"\n+  \"cmp{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"icmp\")\n-   (set_attr \"mode\" \"QI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*cmpqi_minus_1\"\n+(define_insn \"*cmp<mode>_minus_1\"\n   [(set (reg FLAGS_REG)\n-\t(compare (minus:QI (match_operand:QI 0 \"nonimmediate_operand\" \"qm,q\")\n-\t\t\t   (match_operand:QI 1 \"general_operand\" \"qn,mq\"))\n-\t\t (const_int 0)))]\n+\t(compare\n+\t  (minus:SWI (match_operand:SWI 0 \"nonimmediate_operand\" \"<r>m,<r>\")\n+\t\t     (match_operand:SWI 1 \"<general_operand>\" \"<r><i>,<r>m\"))\n+\t  (const_int 0)))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\"\n-  \"cmp{b}\\t{%1, %0|%0, %1}\"\n+  \"cmp{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"icmp\")\n-   (set_attr \"mode\" \"QI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*cmpqi_ext_1\"\n   [(set (reg FLAGS_REG)\n@@ -1211,11 +969,11 @@\n \t      (match_operand 0 \"ext_register_operand\" \"\")\n \t      (const_int 8)\n \t      (const_int 8)) 0)\n-\t  (match_operand:QI 1 \"general_operand\" \"\")))]\n+\t  (match_operand:QI 1 \"immediate_operand\" \"\")))]\n   \"\"\n   \"\")\n \n-(define_insn \"cmpqi_ext_3_insn\"\n+(define_insn \"*cmpqi_ext_3_insn\"\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (subreg:QI\n@@ -1230,7 +988,7 @@\n    (set_attr \"modrm\" \"1\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_insn \"cmpqi_ext_3_insn_rex64\"\n+(define_insn \"*cmpqi_ext_3_insn_rex64\"\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (subreg:QI\n@@ -19226,10 +18984,13 @@\n     }\n   else\n     {\n+      rtx (*cmp_insn)(rtx, rtx);\n+\n       if (TARGET_64BIT)\n-\temit_insn (gen_cmpdi_1_rex64 (countreg, countreg));\n+\tcmp_insn = gen_cmpdi_1;\n       else\n-\temit_insn (gen_cmpsi_1 (countreg, countreg));\n+\tcmp_insn = gen_cmpsi_1;\n+      emit_insn (cmp_insn (countreg, countreg));\n       emit_insn (gen_cmpstrnqi_1 (addr1, addr2, countreg, align,\n \t\t\t\t  operands[1], operands[2]));\n     }"}, {"sha": "e5916e39a5a952ab64e9ddb020e9a96f90b21910", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81f2330a313bcba17be25819ba4c3ad9ffd03c7/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81f2330a313bcba17be25819ba4c3ad9ffd03c7/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=a81f2330a313bcba17be25819ba4c3ad9ffd03c7", "patch": "@@ -1126,23 +1126,6 @@\n        (and (match_code \"mult\")\n \t    (match_test \"TARGET_TUNE_PROMOTE_HIMODE_IMUL\"))))\n \n-;; To avoid problems when jump re-emits comparisons like testqi_ext_ccno_0,\n-;; re-recognize the operand to avoid a copy_to_mode_reg that will fail.\n-;;\n-;; ??? It seems likely that this will only work because cmpsi is an\n-;; expander, and no actual insns use this.\n-\n-(define_predicate \"cmpsi_operand\"\n-  (ior (match_operand 0 \"nonimmediate_operand\")\n-       (and (match_code \"and\")\n-\t    (match_code \"zero_extract\" \"0\")\n-\t    (match_code \"const_int\"    \"1\")\n-\t    (match_code \"const_int\"    \"01\")\n-\t    (match_code \"const_int\"    \"02\")\n-\t    (match_test \"INTVAL (XEXP (XEXP (op, 0), 1)) == 8\")\n-\t    (match_test \"INTVAL (XEXP (XEXP (op, 0), 2)) == 8\")\n-       )))\n-\n (define_predicate \"compare_operator\"\n   (match_code \"compare\"))\n "}]}