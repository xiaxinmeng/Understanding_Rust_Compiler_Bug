{"sha": "ab937357527b7198b6345d935af5e51888567032", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI5MzczNTc1MjdiNzE5OGI2MzQ1ZDkzNWFmNWU1MTg4ODU2NzAzMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2000-12-01T17:53:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2000-12-01T17:53:07Z"}, "message": "builtins.c (target_char_cast): New function.\n\n\t* builtins.c (target_char_cast): New function.\n\t(expand_builtin_strchr): Use it.\n\t(expand_builtin_strrchr): Use it.\n\t(builtin_memset_read_str): New function.\n\t(expand_builtin_memset): Use target_char_cast.\n\tTry to optimize memset with second argument non-zero using\n\tstore_by_pieces.\n\n\t* gcc.c-torture/execute/string-opt-5.c: Add some memset tests.\n\nFrom-SVN: r37918", "tree": {"sha": "5cf6632448272597f83a9be9809285ed8776ef09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cf6632448272597f83a9be9809285ed8776ef09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab937357527b7198b6345d935af5e51888567032", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab937357527b7198b6345d935af5e51888567032", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab937357527b7198b6345d935af5e51888567032", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab937357527b7198b6345d935af5e51888567032/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3a69a7d58ef5212c22187b661e466f062429b8cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a69a7d58ef5212c22187b661e466f062429b8cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a69a7d58ef5212c22187b661e466f062429b8cb"}], "stats": {"total": 135, "additions": 123, "deletions": 12}, "files": [{"sha": "024d701da75b9e55fa2db07f82496100b6ba5977", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab937357527b7198b6345d935af5e51888567032/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab937357527b7198b6345d935af5e51888567032/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab937357527b7198b6345d935af5e51888567032", "patch": "@@ -1,3 +1,13 @@\n+2000-12-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* builtins.c (target_char_cast): New function.\n+\t(expand_builtin_strchr): Use it.\n+\t(expand_builtin_strrchr): Use it.\n+\t(builtin_memset_read_str): New function.\n+\t(expand_builtin_memset): Use target_char_cast.\n+\tTry to optimize memset with second argument non-zero using\n+\tstore_by_pieces.\n+\n 2000-11-30  Marek Michalkiewicz  <marekm@linux.org.pl>\n \n \t* install.texi (avr): Replace incomplete list of supported MCU"}, {"sha": "0e59904325e50676e0f8e8890de61729a4b4de7e", "filename": "gcc/builtins.c", "status": "modified", "additions": 86, "deletions": 11, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab937357527b7198b6345d935af5e51888567032/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab937357527b7198b6345d935af5e51888567032/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=ab937357527b7198b6345d935af5e51888567032", "patch": "@@ -83,6 +83,7 @@ static tree c_strlen\t\t\tPARAMS ((tree));\n static const char *c_getstr\t\tPARAMS ((tree));\n static rtx c_readstr\t\t\tPARAMS ((const char *,\n \t\t\t\t\t\t enum machine_mode));\n+static int target_char_cast\t\tPARAMS ((tree, char *)); \n static rtx get_memory_rtx\t\tPARAMS ((tree));\n static int apply_args_size\t\tPARAMS ((void));\n static int apply_result_size\t\tPARAMS ((void));\n@@ -116,6 +117,8 @@ static rtx builtin_strncpy_read_str\tPARAMS ((PTR, HOST_WIDE_INT,\n \t\t\t\t\t\t enum machine_mode));\n static rtx expand_builtin_strncpy\tPARAMS ((tree, rtx,\n \t\t\t\t\t\t enum machine_mode));\n+static rtx builtin_memset_read_str\tPARAMS ((PTR, HOST_WIDE_INT,\n+\t\t\t\t\t\t enum machine_mode));\n static rtx expand_builtin_memset\tPARAMS ((tree));\n static rtx expand_builtin_bzero\t\tPARAMS ((tree));\n static rtx expand_builtin_strlen\tPARAMS ((tree, rtx));\n@@ -317,6 +320,7 @@ c_getstr (src)\n /* Return a CONST_INT or CONST_DOUBLE corresponding to target\n    reading GET_MODE_BITSIZE (MODE) bits from string constant\n    STR.  */\n+\n static rtx\n c_readstr (str, mode)\n      const char *str;\n@@ -349,6 +353,36 @@ c_readstr (str, mode)\n   return immed_double_const (c[0], c[1], mode);\n }\n \n+/* Cast a target constant CST to target CHAR and if that value fits into\n+   host char type, return zero and put that value into variable pointed by\n+   P.  */\n+\n+static int\n+target_char_cast (cst, p)\n+     tree cst;\n+     char *p;\n+{\n+  unsigned HOST_WIDE_INT val, hostval;\n+\n+  if (TREE_CODE (cst) != INTEGER_CST\n+      || CHAR_TYPE_SIZE > HOST_BITS_PER_WIDE_INT)\n+    return 1;\n+\n+  val = TREE_INT_CST_LOW (cst);\n+  if (CHAR_TYPE_SIZE < HOST_BITS_PER_WIDE_INT)\n+    val &= (((unsigned HOST_WIDE_INT) 1) << CHAR_TYPE_SIZE) - 1;\n+\n+  hostval = val;\n+  if (HOST_BITS_PER_CHAR < HOST_BITS_PER_WIDE_INT)\n+    hostval &= (((unsigned HOST_WIDE_INT) 1) << HOST_BITS_PER_CHAR) - 1;\n+\n+  if (val != hostval)\n+    return 1;\n+\n+  *p = hostval;\n+  return 0;\n+}\n+\n /* Given TEM, a pointer to a stack frame, follow the dynamic chain COUNT\n    times to get the address of either a higher stack frame, or a return\n    address located within it (depending on FNDECL_CODE).  */\n@@ -1583,7 +1617,13 @@ expand_builtin_strchr (arglist, target, mode)\n       p1 = c_getstr (s1);\n       if (p1 != NULL)\n \t{\n-\t  const char *r = strchr (p1, (char) TREE_INT_CST_LOW (s2));\n+\t  char c;\n+\t  const char *r;\n+\n+\t  if (target_char_cast (s2, &c))\n+\t    return 0;\n+\n+\t  r = strchr (p1, c);\n \n \t  if (r == NULL)\n \t    return const0_rtx;\n@@ -1628,7 +1668,13 @@ expand_builtin_strrchr (arglist, target, mode)\n       p1 = c_getstr (s1);\n       if (p1 != NULL)\n \t{\n-\t  const char *r = strrchr (p1, (char) TREE_INT_CST_LOW (s2));\n+\t  char c;\n+\t  const char *r;\n+\n+\t  if (target_char_cast (s2, &c))\n+\t    return 0;\n+\n+\t  r = strrchr (p1, c);\n \n \t  if (r == NULL)\n \t    return const0_rtx;\n@@ -1945,6 +1991,24 @@ expand_builtin_strncpy (arglist, target, mode)\n     }\n }\n \n+/* Callback routine for store_by_pieces.  Read GET_MODE_BITSIZE (MODE)\n+   bytes from constant string DATA + OFFSET and return it as target\n+   constant.  */\n+\n+static rtx\n+builtin_memset_read_str (data, offset, mode)\n+     PTR data;\n+     HOST_WIDE_INT offset ATTRIBUTE_UNUSED;\n+     enum machine_mode mode;\n+{\n+  const char *c = (const char *) data;\n+  char *p = alloca (GET_MODE_SIZE (mode));\n+\n+  memset (p, *c, GET_MODE_SIZE (mode));\n+\n+  return c_readstr (p, mode);\n+}\n+\n /* Expand expression EXP, which is a call to the memset builtin.  Return 0\n    if we failed the caller should emit a normal call.  */\n \n@@ -1971,6 +2035,7 @@ expand_builtin_memset (exp)\n       tree dest = TREE_VALUE (arglist);\n       tree val = TREE_VALUE (TREE_CHAIN (arglist));\n       tree len = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n+      char c;\n \n       int dest_align = get_pointer_alignment (dest, BIGGEST_ALIGNMENT);\n       rtx dest_mem, dest_addr, len_rtx;\n@@ -1980,19 +2045,29 @@ expand_builtin_memset (exp)\n       if (dest_align == 0)\n \treturn 0;\n \n-      /* If the arguments have side-effects, then we can only evaluate\n-\t them at most once.  The following code evaluates them twice if\n-\t they are not constants because we break out to expand_call\n-\t in that case.  They can't be constants if they have side-effects\n-\t so we can check for that first.  Alternatively, we could call\n-\t save_expr to make multiple evaluation safe.  */\n-      if (TREE_SIDE_EFFECTS (val) || TREE_SIDE_EFFECTS (len))\n+      if (TREE_CODE (val) != INTEGER_CST)\n \treturn 0;\n \n-      /* If VAL is not 0, don't do this operation in-line. */\n-      if (expand_expr (val, NULL_RTX, VOIDmode, 0) != const0_rtx)\n+      if (target_char_cast (val, &c))\n \treturn 0;\n \n+      if (c)\n+\t{\n+\t  if (TREE_CODE (len) != INTEGER_CST || TREE_INT_CST_HIGH (len))\n+\t    return 0;\n+\t  if (current_function_check_memory_usage\n+\t      || !can_store_by_pieces (TREE_INT_CST_LOW (len),\n+\t\t\t\t       builtin_memset_read_str,\n+\t\t\t\t       (PTR) &c, dest_align))\n+\t    return 0;\n+\n+\t  dest_mem = get_memory_rtx (dest);\n+\t  store_by_pieces (dest_mem, TREE_INT_CST_LOW (len),\n+\t\t\t   builtin_memset_read_str,\n+\t\t\t   (PTR) &c, dest_align);\n+\t  return force_operand (XEXP (dest_mem, 0), NULL_RTX);\n+\t}\n+\n       len_rtx = expand_expr (len, NULL_RTX, VOIDmode, 0);\n \n       dest_mem = get_memory_rtx (dest);"}, {"sha": "4b7d5fba4968164b550fdbbe6cae8b86f3f04226", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab937357527b7198b6345d935af5e51888567032/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab937357527b7198b6345d935af5e51888567032/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ab937357527b7198b6345d935af5e51888567032", "patch": "@@ -1,3 +1,7 @@\n+2000-12-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.c-torture/execute/string-opt-5.c: Add some memset tests.\n+\n 2000-12-01  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.old-deja/g++.other/cast6.C: New test."}, {"sha": "178812226dc390d087abdebca1b7013b285ae72c", "filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-5.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab937357527b7198b6345d935af5e51888567032/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab937357527b7198b6345d935af5e51888567032/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-5.c?ref=ab937357527b7198b6345d935af5e51888567032", "patch": "@@ -17,6 +17,7 @@ extern int memcmp (const void *, const void *, __SIZE_TYPE__);\n int x = 6;\n int y = 1;\n char *bar = \"hi world\";\n+char buf [64];\n \n int main()\n {\n@@ -79,7 +80,28 @@ int main()\n     abort ();\n   memset (dst, ' ', sizeof dst);\n   if (strncpy (dst, \"hello\", 8) != dst || memcmp (dst, \"hello\\0\\0\\0 \", 9))\n-    abort();\n+    abort ();\n+  x = '!';\n+  memset (buf, ' ', sizeof buf);\n+  if (memset (buf, x++, ++y) != buf\n+      || x != '!' + 1\n+      || y != 3\n+      || memcmp (buf, \"!!!\", 3))\n+    abort ();\n+  if (memset (buf + y++, '-', 8) != buf + 3\n+      || y != 4\n+      || memcmp (buf, \"!!!--------\", 11))\n+    abort ();\n+  x = 10;\n+  if (memset (buf + ++x, 0, y++) != buf + 11\n+      || x != 11\n+      || y != 5\n+      || memcmp (buf + 8, \"---\\0\\0\\0\", 7))\n+    abort ();\n+  if (memset (buf + (x += 4), 0, 6) != buf + 15\n+      || x != 15\n+      || memcmp (buf + 10, \"-\\0\\0\\0\\0\\0\\0\\0\\0\\0\", 11))\n+    abort ();\n \n   return 0;\n }"}]}