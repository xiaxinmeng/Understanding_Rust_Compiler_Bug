{"sha": "505caa7295b93ecdec8ac9b31595eb34dbd48c9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA1Y2FhNzI5NWI5M2VjZGVjOGFjOWIzMTU5NWViMzRkYmQ0OGM5Zg==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-04-28T18:43:38Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-01-14T19:06:50Z"}, "message": "[gcn offloading] Only supported in 64-bit configurations\n\nSimilar to nvptx offloading, see PR65099 \"nvptx offloading: hard-coded 64-bit\nassumptions\".\n\n\tgcc/\n\t* config/gcn/mkoffload.c (main): Create an offload image only in\n\t64-bit configurations.", "tree": {"sha": "f8f051e23d2072e70e8b897f0a156c9878028661", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8f051e23d2072e70e8b897f0a156c9878028661"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/505caa7295b93ecdec8ac9b31595eb34dbd48c9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/505caa7295b93ecdec8ac9b31595eb34dbd48c9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/505caa7295b93ecdec8ac9b31595eb34dbd48c9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/505caa7295b93ecdec8ac9b31595eb34dbd48c9f/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05a30af3f237984b4dcf1dbbc17fdac583c46506", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05a30af3f237984b4dcf1dbbc17fdac583c46506", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05a30af3f237984b4dcf1dbbc17fdac583c46506"}], "stats": {"total": 260, "additions": 134, "deletions": 126}, "files": [{"sha": "eb1c717e6e95a225522f27515130e5dee923379c", "filename": "gcc/config/gcn/mkoffload.c", "status": "modified", "additions": 134, "deletions": 126, "changes": 260, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/505caa7295b93ecdec8ac9b31595eb34dbd48c9f/gcc%2Fconfig%2Fgcn%2Fmkoffload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/505caa7295b93ecdec8ac9b31595eb34dbd48c9f/gcc%2Fconfig%2Fgcn%2Fmkoffload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fmkoffload.c?ref=505caa7295b93ecdec8ac9b31595eb34dbd48c9f", "patch": "@@ -755,11 +755,6 @@ main (int argc, char **argv)\n   FILE *cfile = stdout;\n   const char *outname = 0;\n \n-  const char *gcn_s1_name;\n-  const char *gcn_s2_name;\n-  const char *gcn_o_name;\n-  const char *gcn_cfile_name;\n-\n   progname = \"mkoffload\";\n   diagnostic_initialize (global_dc, 0);\n \n@@ -905,145 +900,158 @@ main (int argc, char **argv)\n   if (!dumppfx)\n     dumppfx = outname;\n \n-  const char *mko_dumpbase = concat (dumppfx, \".mkoffload\", NULL);\n-  const char *hsaco_dumpbase = concat (dumppfx, \".mkoffload.hsaco\", NULL);\n   gcn_dumpbase = concat (dumppfx, \".c\", NULL);\n \n+  const char *gcn_cfile_name;\n   if (save_temps)\n-    {\n-      gcn_s1_name = concat (mko_dumpbase, \".1.s\", NULL);\n-      gcn_s2_name = concat (mko_dumpbase, \".2.s\", NULL);\n-      gcn_o_name = hsaco_dumpbase;\n-      gcn_cfile_name = gcn_dumpbase;\n-    }\n+    gcn_cfile_name = gcn_dumpbase;\n   else\n-    {\n-      gcn_s1_name = make_temp_file (\".mkoffload.1.s\");\n-      gcn_s2_name = make_temp_file (\".mkoffload.2.s\");\n-      gcn_o_name = make_temp_file (\".mkoffload.hsaco\");\n-      gcn_cfile_name = make_temp_file (\".c\");\n-    }\n-  obstack_ptr_grow (&files_to_cleanup, gcn_s1_name);\n-  obstack_ptr_grow (&files_to_cleanup, gcn_s2_name);\n-  obstack_ptr_grow (&files_to_cleanup, gcn_o_name);\n+    gcn_cfile_name = make_temp_file (\".c\");\n   obstack_ptr_grow (&files_to_cleanup, gcn_cfile_name);\n \n-  obstack_ptr_grow (&cc_argv_obstack, \"-dumpdir\");\n-  obstack_ptr_grow (&cc_argv_obstack, \"\");\n-  obstack_ptr_grow (&cc_argv_obstack, \"-dumpbase\");\n-  obstack_ptr_grow (&cc_argv_obstack, mko_dumpbase);\n-  obstack_ptr_grow (&cc_argv_obstack, \"-dumpbase-ext\");\n-  obstack_ptr_grow (&cc_argv_obstack, \"\");\n-\n-  obstack_ptr_grow (&cc_argv_obstack, \"-o\");\n-  obstack_ptr_grow (&cc_argv_obstack, gcn_s1_name);\n-  obstack_ptr_grow (&cc_argv_obstack, NULL);\n-  const char **cc_argv = XOBFINISH (&cc_argv_obstack, const char **);\n-\n-  /* Build arguments for assemble/link pass.  */\n-  struct obstack ld_argv_obstack;\n-  obstack_init (&ld_argv_obstack);\n-  obstack_ptr_grow (&ld_argv_obstack, driver);\n-\n-  /* Extract early-debug information from the input objects.\n-     This loop finds all the inputs that end \".o\" and aren't the output.  */\n-  int dbgcount = 0;\n-  for (int ix = 1; ix != argc; ix++)\n+  cfile = fopen (gcn_cfile_name, \"w\");\n+  if (!cfile)\n+    fatal_error (input_location, \"cannot open '%s'\", gcn_cfile_name);\n+\n+  /* Currently, we only support offloading in 64-bit configurations.  */\n+  if (offload_abi == OFFLOAD_ABI_LP64)\n     {\n-      if (!strcmp (argv[ix], \"-o\") && ix + 1 != argc)\n-\t++ix;\n+      const char *mko_dumpbase = concat (dumppfx, \".mkoffload\", NULL);\n+      const char *hsaco_dumpbase = concat (dumppfx, \".mkoffload.hsaco\", NULL);\n+\n+      const char *gcn_s1_name;\n+      const char *gcn_s2_name;\n+      const char *gcn_o_name;\n+      if (save_temps)\n+\t{\n+\t  gcn_s1_name = concat (mko_dumpbase, \".1.s\", NULL);\n+\t  gcn_s2_name = concat (mko_dumpbase, \".2.s\", NULL);\n+\t  gcn_o_name = hsaco_dumpbase;\n+\t}\n       else\n \t{\n-\t  if (strcmp (argv[ix] + strlen(argv[ix]) - 2, \".o\") == 0)\n+\t  gcn_s1_name = make_temp_file (\".mkoffload.1.s\");\n+\t  gcn_s2_name = make_temp_file (\".mkoffload.2.s\");\n+\t  gcn_o_name = make_temp_file (\".mkoffload.hsaco\");\n+\t}\n+      obstack_ptr_grow (&files_to_cleanup, gcn_s1_name);\n+      obstack_ptr_grow (&files_to_cleanup, gcn_s2_name);\n+      obstack_ptr_grow (&files_to_cleanup, gcn_o_name);\n+\n+      obstack_ptr_grow (&cc_argv_obstack, \"-dumpdir\");\n+      obstack_ptr_grow (&cc_argv_obstack, \"\");\n+      obstack_ptr_grow (&cc_argv_obstack, \"-dumpbase\");\n+      obstack_ptr_grow (&cc_argv_obstack, mko_dumpbase);\n+      obstack_ptr_grow (&cc_argv_obstack, \"-dumpbase-ext\");\n+      obstack_ptr_grow (&cc_argv_obstack, \"\");\n+\n+      obstack_ptr_grow (&cc_argv_obstack, \"-o\");\n+      obstack_ptr_grow (&cc_argv_obstack, gcn_s1_name);\n+      obstack_ptr_grow (&cc_argv_obstack, NULL);\n+      const char **cc_argv = XOBFINISH (&cc_argv_obstack, const char **);\n+\n+      /* Build arguments for assemble/link pass.  */\n+      struct obstack ld_argv_obstack;\n+      obstack_init (&ld_argv_obstack);\n+      obstack_ptr_grow (&ld_argv_obstack, driver);\n+\n+      /* Extract early-debug information from the input objects.\n+\t This loop finds all the inputs that end \".o\" and aren't the output.  */\n+      int dbgcount = 0;\n+      for (int ix = 1; ix != argc; ix++)\n+\t{\n+\t  if (!strcmp (argv[ix], \"-o\") && ix + 1 != argc)\n+\t    ++ix;\n+\t  else\n \t    {\n-\t      char *dbgobj;\n-\t      if (save_temps)\n-\t\t{\n-\t\t  char buf[10];\n-\t\t  sprintf (buf, \"%d\", dbgcount++);\n-\t\t  dbgobj = concat (dumppfx, \".mkoffload.dbg\", buf, \".o\", NULL);\n-\t\t}\n-\t      else\n-\t\tdbgobj = make_temp_file (\".mkoffload.dbg.o\");\n-\n-\t      /* If the copy fails then just ignore it.  */\n-\t      if (copy_early_debug_info (argv[ix], dbgobj))\n+\t      if (strcmp (argv[ix] + strlen(argv[ix]) - 2, \".o\") == 0)\n \t\t{\n-\t\t  obstack_ptr_grow (&ld_argv_obstack, dbgobj);\n-\t\t  obstack_ptr_grow (&files_to_cleanup, dbgobj);\n+\t\t  char *dbgobj;\n+\t\t  if (save_temps)\n+\t\t    {\n+\t\t      char buf[10];\n+\t\t      sprintf (buf, \"%d\", dbgcount++);\n+\t\t      dbgobj = concat (dumppfx, \".mkoffload.dbg\", buf, \".o\", NULL);\n+\t\t    }\n+\t\t  else\n+\t\t    dbgobj = make_temp_file (\".mkoffload.dbg.o\");\n+\n+\t\t  /* If the copy fails then just ignore it.  */\n+\t\t  if (copy_early_debug_info (argv[ix], dbgobj))\n+\t\t    {\n+\t\t      obstack_ptr_grow (&ld_argv_obstack, dbgobj);\n+\t\t      obstack_ptr_grow (&files_to_cleanup, dbgobj);\n+\t\t    }\n+\t\t  else\n+\t\t    free (dbgobj);\n \t\t}\n-\t      else\n-\t\tfree (dbgobj);\n \t    }\n \t}\n+      obstack_ptr_grow (&ld_argv_obstack, gcn_s2_name);\n+      obstack_ptr_grow (&ld_argv_obstack, \"-lgomp\");\n+\n+      for (int i = 1; i < argc; i++)\n+\tif (strncmp (argv[i], \"-l\", 2) == 0\n+\t    || strncmp (argv[i], \"-Wl\", 3) == 0\n+\t    || strncmp (argv[i], \"-march\", 6) == 0)\n+\t  obstack_ptr_grow (&ld_argv_obstack, argv[i]);\n+\n+      obstack_ptr_grow (&cc_argv_obstack, \"-dumpdir\");\n+      obstack_ptr_grow (&cc_argv_obstack, \"\");\n+      obstack_ptr_grow (&cc_argv_obstack, \"-dumpbase\");\n+      obstack_ptr_grow (&cc_argv_obstack, hsaco_dumpbase);\n+      obstack_ptr_grow (&cc_argv_obstack, \"-dumpbase-ext\");\n+      obstack_ptr_grow (&cc_argv_obstack, \"\");\n+\n+      obstack_ptr_grow (&ld_argv_obstack, \"-o\");\n+      obstack_ptr_grow (&ld_argv_obstack, gcn_o_name);\n+      obstack_ptr_grow (&ld_argv_obstack, NULL);\n+      const char **ld_argv = XOBFINISH (&ld_argv_obstack, const char **);\n+\n+      /* Clean up unhelpful environment variables.  */\n+      char *execpath = getenv (\"GCC_EXEC_PREFIX\");\n+      char *cpath = getenv (\"COMPILER_PATH\");\n+      char *lpath = getenv (\"LIBRARY_PATH\");\n+      unsetenv (\"GCC_EXEC_PREFIX\");\n+      unsetenv (\"COMPILER_PATH\");\n+      unsetenv (\"LIBRARY_PATH\");\n+\n+      /* Run the compiler pass.  */\n+      fork_execute (cc_argv[0], CONST_CAST (char **, cc_argv), true, \".gcc_args\");\n+      obstack_free (&cc_argv_obstack, NULL);\n+\n+      in = fopen (gcn_s1_name, \"r\");\n+      if (!in)\n+\tfatal_error (input_location, \"cannot open intermediate gcn asm file\");\n+\n+      out = fopen (gcn_s2_name, \"w\");\n+      if (!out)\n+\tfatal_error (input_location, \"cannot open '%s'\", gcn_s2_name);\n+\n+      process_asm (in, out, cfile);\n+\n+      fclose (in);\n+      fclose (out);\n+\n+      /* Run the assemble/link pass.  */\n+      fork_execute (ld_argv[0], CONST_CAST (char **, ld_argv), true, \".ld_args\");\n+      obstack_free (&ld_argv_obstack, NULL);\n+\n+      in = fopen (gcn_o_name, \"r\");\n+      if (!in)\n+\tfatal_error (input_location, \"cannot open intermediate gcn obj file\");\n+\n+      process_obj (in, cfile);\n+\n+      fclose (in);\n+\n+      xputenv (concat (\"GCC_EXEC_PREFIX=\", execpath, NULL));\n+      xputenv (concat (\"COMPILER_PATH=\", cpath, NULL));\n+      xputenv (concat (\"LIBRARY_PATH=\", lpath, NULL));\n     }\n-  obstack_ptr_grow (&ld_argv_obstack, gcn_s2_name);\n-  obstack_ptr_grow (&ld_argv_obstack, \"-lgomp\");\n \n-  for (int i = 1; i < argc; i++)\n-    if (strncmp (argv[i], \"-l\", 2) == 0\n-\t|| strncmp (argv[i], \"-Wl\", 3) == 0\n-\t|| strncmp (argv[i], \"-march\", 6) == 0)\n-      obstack_ptr_grow (&ld_argv_obstack, argv[i]);\n-\n-  obstack_ptr_grow (&cc_argv_obstack, \"-dumpdir\");\n-  obstack_ptr_grow (&cc_argv_obstack, \"\");\n-  obstack_ptr_grow (&cc_argv_obstack, \"-dumpbase\");\n-  obstack_ptr_grow (&cc_argv_obstack, hsaco_dumpbase);\n-  obstack_ptr_grow (&cc_argv_obstack, \"-dumpbase-ext\");\n-  obstack_ptr_grow (&cc_argv_obstack, \"\");\n-\n-  obstack_ptr_grow (&ld_argv_obstack, \"-o\");\n-  obstack_ptr_grow (&ld_argv_obstack, gcn_o_name);\n-  obstack_ptr_grow (&ld_argv_obstack, NULL);\n-  const char **ld_argv = XOBFINISH (&ld_argv_obstack, const char **);\n-\n-  /* Clean up unhelpful environment variables.  */\n-  char *execpath = getenv (\"GCC_EXEC_PREFIX\");\n-  char *cpath = getenv (\"COMPILER_PATH\");\n-  char *lpath = getenv (\"LIBRARY_PATH\");\n-  unsetenv (\"GCC_EXEC_PREFIX\");\n-  unsetenv (\"COMPILER_PATH\");\n-  unsetenv (\"LIBRARY_PATH\");\n-\n-  /* Run the compiler pass.  */\n-  fork_execute (cc_argv[0], CONST_CAST (char **, cc_argv), true,  \".gcc_args\");\n-  obstack_free (&cc_argv_obstack, NULL);\n-\n-  in = fopen (gcn_s1_name, \"r\");\n-  if (!in)\n-    fatal_error (input_location, \"cannot open intermediate gcn asm file\");\n-\n-  out = fopen (gcn_s2_name, \"w\");\n-  if (!out)\n-    fatal_error (input_location, \"cannot open '%s'\", gcn_s2_name);\n-\n-  cfile = fopen (gcn_cfile_name, \"w\");\n-  if (!cfile)\n-    fatal_error (input_location, \"cannot open '%s'\", gcn_cfile_name);\n-\n-  process_asm (in, out, cfile);\n-\n-  fclose (in);\n-  fclose (out);\n-\n-  /* Run the assemble/link pass.  */\n-  fork_execute (ld_argv[0], CONST_CAST (char **, ld_argv), true, \".ld_args\");\n-  obstack_free (&ld_argv_obstack, NULL);\n-\n-  in = fopen (gcn_o_name, \"r\");\n-  if (!in)\n-    fatal_error (input_location, \"cannot open intermediate gcn obj file\");\n-\n-  process_obj (in, cfile);\n-\n-  fclose (in);\n   fclose (cfile);\n \n-  xputenv (concat (\"GCC_EXEC_PREFIX=\", execpath, NULL));\n-  xputenv (concat (\"COMPILER_PATH=\", cpath, NULL));\n-  xputenv (concat (\"LIBRARY_PATH=\", lpath, NULL));\n-\n   compile_native (gcn_cfile_name, outname, collect_gcc, fPIC, fpic);\n \n   return 0;"}]}