{"sha": "1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU0YWU1NTFkZGI4YmExZTAyZTNkZDUwYmM1NTM4MWQzMTNmZWQ4ZQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2009-04-21T07:47:13Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2009-04-21T07:47:13Z"}, "message": "re PR c/16202 (The -Wsequence-point warning misses many important instances)\n\n2009-04-21  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR 16202\n\t* c-typeck.c (lvalue_p): Move declaration ...\n\t* c-common.h (lvalue_p): ... to here.\n\t* c-common.c (candidate_equal_p): New.\n\t(add_tlist): Use it.\n\t(merge_tlist): Use it.\n\t(warn_for_collisions_1): Likewise.\n\t(warning_candidate_p): Accept more candidates.\n\t(verify_tree): A warning candidate can be an expression. Use\n\tcandidate_equal_p.\ncp/\n\t* tree.c (lvalue_p_1): Use const_tree.\n\tUse CONST_CAST_TREE to avoid warning.\n\t(lvalue_p): Returns bool, receives const_tree.\ntestsuite/\n\t* gcc.dg/sequence-pt-1.c: Remove XFAILs.\n\t* gcc.dg/sequence-pt-2.c: New.\n\t* gcc.dg/sequence-pt-3.c: New.\n\t* g++.dg/warn/sequence-pt-1.C: Remove XFAILs.\n\t* g++.dg/warn/sequence-pt-2.c: New.\n\t* g++.dg/warn/sequence-pt-3.c: New.\n\nFrom-SVN: r146472", "tree": {"sha": "42ffdc85ff34751f35f4783c71117e6304c80f6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42ffdc85ff34751f35f4783c71117e6304c80f6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e/comments", "author": null, "committer": null, "parents": [{"sha": "6e9a9f9fed6b9a26fe8dda1a0a51713007c260a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e9a9f9fed6b9a26fe8dda1a0a51713007c260a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e9a9f9fed6b9a26fe8dda1a0a51713007c260a1"}], "stats": {"total": 210, "additions": 185, "deletions": 25}, "files": [{"sha": "a62edc8059741891ca28ca4720e165ef14f1d202", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e", "patch": "@@ -1,3 +1,16 @@\n+2009-04-21  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR 16202\n+\t* c-typeck.c (lvalue_p): Move declaration ...\n+\t* c-common.h (lvalue_p): ... to here.\n+\t* c-common.c (candidate_equal_p): New.\n+\t(add_tlist): Use it.\n+\t(merge_tlist): Use it.\n+\t(warn_for_collisions_1): Likewise.\n+\t(warning_candidate_p): Accept more candidates.\n+\t(verify_tree): A warning candidate can be an expression. Use\n+\tcandidate_equal_p.\n+\n 2009-04-21  Ben Elliston  <bje@au.ibm.com>\n \n \tPR target/5267"}, {"sha": "eab4582b8e08de3dd8b7716e558013fdf243ea91", "filename": "gcc/c-common.c", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e", "patch": "@@ -2381,6 +2381,7 @@ static void add_tlist (struct tlist **, struct tlist *, tree, int);\n static void merge_tlist (struct tlist **, struct tlist *, int);\n static void verify_tree (tree, struct tlist **, struct tlist **, tree);\n static int warning_candidate_p (tree);\n+static bool candidate_equal_p (const_tree, const_tree);\n static void warn_for_collisions (struct tlist *);\n static void warn_for_collisions_1 (tree, tree, struct tlist *, int);\n static struct tlist *new_tlist (struct tlist *, tree, tree);\n@@ -2408,7 +2409,7 @@ add_tlist (struct tlist **to, struct tlist *add, tree exclude_writer, int copy)\n       struct tlist *next = add->next;\n       if (!copy)\n \tadd->next = *to;\n-      if (!exclude_writer || add->writer != exclude_writer)\n+      if (!exclude_writer || !candidate_equal_p (add->writer, exclude_writer))\n \t*to = copy ? new_tlist (*to, add->expr, add->writer) : add;\n       add = next;\n     }\n@@ -2435,7 +2436,7 @@ merge_tlist (struct tlist **to, struct tlist *add, int copy)\n       struct tlist *next = add->next;\n \n       for (tmp2 = *to; tmp2; tmp2 = tmp2->next)\n-\tif (tmp2->expr == add->expr)\n+\tif (candidate_equal_p (tmp2->expr, add->expr))\n \t  {\n \t    found = 1;\n \t    if (!tmp2->writer)\n@@ -2463,15 +2464,14 @@ warn_for_collisions_1 (tree written, tree writer, struct tlist *list,\n \n   /* Avoid duplicate warnings.  */\n   for (tmp = warned_ids; tmp; tmp = tmp->next)\n-    if (tmp->expr == written)\n+    if (candidate_equal_p (tmp->expr, written))\n       return;\n \n   while (list)\n     {\n-      if (list->expr == written\n-\t  && list->writer != writer\n-\t  && (!only_writes || list->writer)\n-\t  && DECL_NAME (list->expr))\n+      if (candidate_equal_p (list->expr, written)\n+\t  && !candidate_equal_p (list->writer, writer)\n+\t  && (!only_writes || list->writer))\n \t{\n \t  warned_ids = new_tlist (warned_ids, written, NULL_TREE);\n \t  warning_at (EXPR_HAS_LOCATION (writer)\n@@ -2503,7 +2503,17 @@ warn_for_collisions (struct tlist *list)\n static int\n warning_candidate_p (tree x)\n {\n-  return TREE_CODE (x) == VAR_DECL || TREE_CODE (x) == PARM_DECL;\n+  /* !VOID_TYPE_P (TREE_TYPE (x)) is workaround for cp/tree.c\n+     (lvalue_p) crash on TRY/CATCH. */\n+  return !(DECL_P (x) && DECL_ARTIFICIAL (x))\n+    && TREE_TYPE (x) && !VOID_TYPE_P (TREE_TYPE (x)) && lvalue_p (x);\n+}\n+\n+/* Return nonzero if X and Y appear to be the same candidate (or NULL) */\n+static bool\n+candidate_equal_p (const_tree x, const_tree y)\n+{\n+  return (x == y) || (x && y && operand_equal_p (x, y, 0));\n }\n \n /* Walk the tree X, and record accesses to variables.  If X is written by the\n@@ -2549,10 +2559,7 @@ verify_tree (tree x, struct tlist **pbefore_sp, struct tlist **pno_sp,\n   cl = TREE_CODE_CLASS (code);\n \n   if (warning_candidate_p (x))\n-    {\n-      *pno_sp = new_tlist (*pno_sp, x, writer);\n-      return;\n-    }\n+    *pno_sp = new_tlist (*pno_sp, x, writer);\n \n   switch (code)\n     {\n@@ -2665,7 +2672,7 @@ verify_tree (tree x, struct tlist **pbefore_sp, struct tlist **pno_sp,\n       {\n \tstruct tlist_cache *t;\n \tfor (t = save_expr_cache; t; t = t->next)\n-\t  if (t->expr == x)\n+\t  if (candidate_equal_p (t->expr, x))\n \t    break;\n \n \tif (!t)"}, {"sha": "a46da6bcb7d0de0998785bc81eabac01aa1e589a", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e", "patch": "@@ -932,6 +932,7 @@ extern tree finish_label_address_expr (tree, location_t);\n    different implementations.  Used in c-common.c.  */\n extern tree lookup_label (tree);\n extern tree lookup_name (tree);\n+extern bool lvalue_p (const_tree);\n \n extern bool vector_targets_convertible_p (const_tree t1, const_tree t2);\n extern bool vector_types_convertible_p (const_tree t1, const_tree t2, bool emit_lax_note);"}, {"sha": "f5cfc6440d382f5f1f53cb1ff8fbe84cbc5fa455", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e", "patch": "@@ -110,7 +110,6 @@ static tree find_init_member (tree);\n static void readonly_error (tree, enum lvalue_use);\n static void readonly_warning (tree, enum lvalue_use);\n static int lvalue_or_else (const_tree, enum lvalue_use);\n-static int lvalue_p (const_tree);\n static void record_maybe_used_decl (tree);\n static int comptypes_internal (const_tree, const_tree);\n \f\n@@ -3503,7 +3502,7 @@ build_unary_op (location_t location,\n    Lvalues can be assigned, unless their type has TYPE_READONLY.\n    Lvalues can have their address taken, unless they have C_DECL_REGISTER.  */\n \n-static int\n+bool\n lvalue_p (const_tree ref)\n {\n   const enum tree_code code = TREE_CODE (ref);"}, {"sha": "c3374e37106f8f3efce2edaf35e26dd31a7f99fd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e", "patch": "@@ -1,3 +1,10 @@\n+2009-04-21  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR 16202\n+\t* tree.c (lvalue_p_1): Use const_tree.\n+\tUse CONST_CAST_TREE to avoid warning.\n+\t(lvalue_p): Returns bool, receives const_tree.\n+\n 2009-04-21  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR c++/13358"}, {"sha": "d66e0de47753c3e3aba15681300a39dc346836f1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e", "patch": "@@ -5014,7 +5014,6 @@ extern tree convert_member_func_to_ptr\t\t(tree, tree);\n extern tree convert_ptrmem\t\t\t(tree, tree, bool, bool);\n extern int lvalue_or_else\t\t\t(tree, enum lvalue_use,\n                                                  tsubst_flags_t);\n-extern int lvalue_p\t\t\t\t(tree);\n \n /* in typeck2.c */\n extern void require_complete_eh_spec_types\t(tree, tree);"}, {"sha": "c95c11c4ddeaad86fa89a290334110313404959f", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e", "patch": "@@ -44,7 +44,7 @@ static tree build_cplus_array_type_1 (tree, tree);\n static int list_hash_eq (const void *, const void *);\n static hashval_t list_hash_pieces (tree, tree, tree);\n static hashval_t list_hash (const void *);\n-static cp_lvalue_kind lvalue_p_1 (tree, int);\n+static cp_lvalue_kind lvalue_p_1 (const_tree, int);\n static tree build_target_expr (tree, tree);\n static tree count_trees_r (tree *, int *, void *);\n static tree verify_stmt_tree_r (tree *, int *, void *);\n@@ -59,7 +59,7 @@ static tree handle_init_priority_attribute (tree *, tree, tree, int, bool *);\n    nonzero, rvalues of class type are considered lvalues.  */\n \n static cp_lvalue_kind\n-lvalue_p_1 (tree ref,\n+lvalue_p_1 (const_tree ref,\n \t    int treat_class_rvalues_as_lvalues)\n {\n   cp_lvalue_kind op1_lvalue_kind = clk_none;\n@@ -207,7 +207,9 @@ lvalue_p_1 (tree ref,\n     case BASELINK:\n       /* We now represent a reference to a single static member function\n \t with a BASELINK.  */\n-      return lvalue_p_1 (BASELINK_FUNCTIONS (ref),\n+      /* This CONST_CAST is okay because BASELINK_FUNCTIONS returns\n+\t its argument unmodified and we assign it to a const_tree.  */\n+      return lvalue_p_1 (BASELINK_FUNCTIONS (CONST_CAST_TREE (ref)),\n \t\t\t treat_class_rvalues_as_lvalues);\n \n     case NON_DEPENDENT_EXPR:\n@@ -251,8 +253,8 @@ real_lvalue_p (tree ref)\n /* This differs from real_lvalue_p in that class rvalues are\n    considered lvalues.  */\n \n-int\n-lvalue_p (tree ref)\n+bool\n+lvalue_p (const_tree ref)\n {\n   return\n     (lvalue_p_1 (ref, /*class rvalue ok*/ 1) != clk_none);"}, {"sha": "8b6d742b8cbc89de8416b94812ba7d6e8aa9956b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e", "patch": "@@ -1,3 +1,13 @@\n+2009-04-21  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR 16202\n+\t* gcc.dg/sequence-pt-1.c: Remove XFAILs.\n+\t* gcc.dg/sequence-pt-2.c: New.\n+\t* gcc.dg/sequence-pt-3.c: New.\n+\t* g++.dg/warn/sequence-pt-1.C: Remove XFAILs.\n+\t* g++.dg/warn/sequence-pt-2.c: New.\n+\t* g++.dg/warn/sequence-pt-3.c: New.\n+\n 2009-04-21  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/torture/pr39678.c (struct X): Make c field signed char."}, {"sha": "05eee82c176025dcce7a0bb76c8ea83533457b99", "filename": "gcc/testsuite/g++.dg/warn/sequence-pt-1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fsequence-pt-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fsequence-pt-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fsequence-pt-1.C?ref=1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e", "patch": "@@ -30,10 +30,10 @@ foo (int a, int b, int n, int p, int *ptr, struct s *sptr,\n   ap[n] = bp[n++]; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n   ap[--n] = bp[n]; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n   ap[++n] = bp[--n]; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n-  cp[n][n] = cp[n][n]++; /* { dg-warning \"undefined\" \"sequence point warning\" { xfail *-*-* } } */\n+  cp[n][n] = cp[n][n]++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n   cp[n][p] = cp[n][n++]; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n   *ptr++ = (size_t)ptr++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n-  sptr->a = sptr->a++; /* { dg-warning \"undefined\" \"sequence point warning\" { xfail *-*-* } } */\n+  sptr->a = sptr->a++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n   sptr->a = (size_t)(sptr++); /* { dg-warning \"undefined\" \"sequence point warning\" } */\n   *ptr++ = fn (*ptr); /* { dg-warning \"undefined\" \"sequence point warning\" } */\n   a = b = a++; /* { dg-warning \"undefined\" \"sequence point warning\" } */"}, {"sha": "9a4b618ea53f20758e7e30220d05666e884599a5", "filename": "gcc/testsuite/g++.dg/warn/sequence-pt-2.C", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fsequence-pt-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fsequence-pt-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fsequence-pt-2.C?ref=1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e", "patch": "@@ -0,0 +1,46 @@\n+/* More sequence point warning tests  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wsequence-point\" } */\n+\n+struct s { struct s *nxt; int v; } q;\n+    \n+int x[10];\n+    \n+int foo(int *p)\n+{\n+  int i = 0;\n+\n+  /* Test general-lvalue sequence point warnings  */\n+  (*p) = (*p)++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  p[3] = p[3]++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  p[i] = p[i]++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  x[3] = x[3]++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  q.nxt->nxt->v = q.nxt->nxt->v++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+\n+  /* test expressions that appear elsewhere in the C grammar */\n+\n+  { int a = i-i++; (void)a;} /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+\n+  if ((i-i++) != 0) /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+    return i-i++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+\n+  for (i-i++;;)  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+    ;\n+\n+  for (; (i-i++) != 0; )  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+    ;\n+\n+  for (;;i-i++)  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+    ;\n+\n+  while ((i-i++) != 0)  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+    ;\n+\n+  do {} while ((i-i++) != 0);  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+\n+  switch (i-i++) {  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  case 0: return 1;\n+  }\n+\n+  return 0;\n+}"}, {"sha": "58971ca186d939ab52695f028de53d2ed80267d3", "filename": "gcc/testsuite/g++.dg/warn/sequence-pt-3.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fsequence-pt-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fsequence-pt-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fsequence-pt-3.C?ref=1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e", "patch": "@@ -0,0 +1,15 @@\n+/* More sequence point warning tests  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wsequence-point\" } */\n+\n+void bar(int i, int j)\n+{\n+  return;\n+}\n+\n+void foo (int i)\n+{\n+   int a = i-i++; (void)a; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+\n+   bar (i--, i++); /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+}"}, {"sha": "05eee82c176025dcce7a0bb76c8ea83533457b99", "filename": "gcc/testsuite/gcc.dg/sequence-pt-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e/gcc%2Ftestsuite%2Fgcc.dg%2Fsequence-pt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e/gcc%2Ftestsuite%2Fgcc.dg%2Fsequence-pt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsequence-pt-1.c?ref=1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e", "patch": "@@ -30,10 +30,10 @@ foo (int a, int b, int n, int p, int *ptr, struct s *sptr,\n   ap[n] = bp[n++]; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n   ap[--n] = bp[n]; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n   ap[++n] = bp[--n]; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n-  cp[n][n] = cp[n][n]++; /* { dg-warning \"undefined\" \"sequence point warning\" { xfail *-*-* } } */\n+  cp[n][n] = cp[n][n]++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n   cp[n][p] = cp[n][n++]; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n   *ptr++ = (size_t)ptr++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n-  sptr->a = sptr->a++; /* { dg-warning \"undefined\" \"sequence point warning\" { xfail *-*-* } } */\n+  sptr->a = sptr->a++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n   sptr->a = (size_t)(sptr++); /* { dg-warning \"undefined\" \"sequence point warning\" } */\n   *ptr++ = fn (*ptr); /* { dg-warning \"undefined\" \"sequence point warning\" } */\n   a = b = a++; /* { dg-warning \"undefined\" \"sequence point warning\" } */"}, {"sha": "9a4b618ea53f20758e7e30220d05666e884599a5", "filename": "gcc/testsuite/gcc.dg/sequence-pt-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e/gcc%2Ftestsuite%2Fgcc.dg%2Fsequence-pt-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e/gcc%2Ftestsuite%2Fgcc.dg%2Fsequence-pt-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsequence-pt-2.c?ref=1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e", "patch": "@@ -0,0 +1,46 @@\n+/* More sequence point warning tests  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wsequence-point\" } */\n+\n+struct s { struct s *nxt; int v; } q;\n+    \n+int x[10];\n+    \n+int foo(int *p)\n+{\n+  int i = 0;\n+\n+  /* Test general-lvalue sequence point warnings  */\n+  (*p) = (*p)++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  p[3] = p[3]++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  p[i] = p[i]++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  x[3] = x[3]++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  q.nxt->nxt->v = q.nxt->nxt->v++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+\n+  /* test expressions that appear elsewhere in the C grammar */\n+\n+  { int a = i-i++; (void)a;} /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+\n+  if ((i-i++) != 0) /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+    return i-i++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+\n+  for (i-i++;;)  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+    ;\n+\n+  for (; (i-i++) != 0; )  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+    ;\n+\n+  for (;;i-i++)  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+    ;\n+\n+  while ((i-i++) != 0)  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+    ;\n+\n+  do {} while ((i-i++) != 0);  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+\n+  switch (i-i++) {  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  case 0: return 1;\n+  }\n+\n+  return 0;\n+}"}, {"sha": "58971ca186d939ab52695f028de53d2ed80267d3", "filename": "gcc/testsuite/gcc.dg/sequence-pt-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e/gcc%2Ftestsuite%2Fgcc.dg%2Fsequence-pt-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e/gcc%2Ftestsuite%2Fgcc.dg%2Fsequence-pt-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsequence-pt-3.c?ref=1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e", "patch": "@@ -0,0 +1,15 @@\n+/* More sequence point warning tests  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wsequence-point\" } */\n+\n+void bar(int i, int j)\n+{\n+  return;\n+}\n+\n+void foo (int i)\n+{\n+   int a = i-i++; (void)a; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+\n+   bar (i--, i++); /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+}"}]}