{"sha": "b36ec51873ba05c1ac3d5e568f400dd5f59d2cb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM2ZWM1MTg3M2JhMDVjMWFjM2Q1ZTU2OGY0MDBkZDVmNTlkMmNiOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-09-22T08:50:22Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-27T09:19:29Z"}, "message": "[Ada] New flag Transform_Function_Array\n\ngcc/ada/\n\n\t* exp_ch6.adb, freeze.adb, gnat1drv.adb, opt.ads, sem_ch6.adb\n\t(Transform_Function_Array): New flag, split from Modify_Tree_For_C.\n\t* exp_unst.adb: Minor reformatting.", "tree": {"sha": "35ddaddad9cedf0c65c165d12ad81c68eba0b2fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35ddaddad9cedf0c65c165d12ad81c68eba0b2fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b36ec51873ba05c1ac3d5e568f400dd5f59d2cb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b36ec51873ba05c1ac3d5e568f400dd5f59d2cb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b36ec51873ba05c1ac3d5e568f400dd5f59d2cb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b36ec51873ba05c1ac3d5e568f400dd5f59d2cb9/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79e61a6361f87a8162fe362e08d3ffeb76803606", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79e61a6361f87a8162fe362e08d3ffeb76803606", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79e61a6361f87a8162fe362e08d3ffeb76803606"}], "stats": {"total": 61, "additions": 36, "deletions": 25}, "files": [{"sha": "4f1357648edf311688eca76e17224657b684c942", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b36ec51873ba05c1ac3d5e568f400dd5f59d2cb9/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b36ec51873ba05c1ac3d5e568f400dd5f59d2cb9/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=b36ec51873ba05c1ac3d5e568f400dd5f59d2cb9", "patch": "@@ -3665,7 +3665,7 @@ package body Exp_Ch6 is\n          return;\n       end if;\n \n-      if Modify_Tree_For_C\n+      if Transform_Function_Array\n         and then Nkind (Call_Node) = N_Function_Call\n         and then Is_Entity_Name (Name (Call_Node))\n       then\n@@ -6691,7 +6691,7 @@ package body Exp_Ch6 is\n       --  are not needed by the C generator (and this also produces cleaner\n       --  output).\n \n-      if Modify_Tree_For_C\n+      if Transform_Function_Array\n         and then Nkind (Specification (N)) = N_Function_Specification\n         and then Is_Array_Type (Etype (Subp))\n         and then Is_Constrained (Etype (Subp))"}, {"sha": "e0f2bd1c6c007c06bd5fa16641cce33692e75b77", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b36ec51873ba05c1ac3d5e568f400dd5f59d2cb9/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b36ec51873ba05c1ac3d5e568f400dd5f59d2cb9/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=b36ec51873ba05c1ac3d5e568f400dd5f59d2cb9", "patch": "@@ -882,8 +882,8 @@ package body Exp_Unst is\n                      --  outside the nested structure do not affect us.\n \n                      if Scope_Within (Ent, Subp)\n-                        and then Is_Subprogram (Ent)\n-                        and then not Is_Imported (Ent)\n+                       and then Is_Subprogram (Ent)\n+                       and then not Is_Imported (Ent)\n                      then\n                         Append_Unique_Call ((N, Current_Subprogram, Ent));\n                      end if;"}, {"sha": "0779165a49c8cd70dd5e33dfc8f026ac33b355e5", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b36ec51873ba05c1ac3d5e568f400dd5f59d2cb9/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b36ec51873ba05c1ac3d5e568f400dd5f59d2cb9/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=b36ec51873ba05c1ac3d5e568f400dd5f59d2cb9", "patch": "@@ -9142,7 +9142,7 @@ package body Freeze is\n          Check_Overriding_Indicator (E, Empty, Is_Primitive (E));\n       end if;\n \n-      if Modify_Tree_For_C\n+      if Transform_Function_Array\n         and then Nkind (Parent (E)) = N_Function_Specification\n         and then Is_Array_Type (Etype (E))\n         and then Is_Constrained (Etype (E))"}, {"sha": "1ea7d7631752e02c38086173185e487b11902ee5", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b36ec51873ba05c1ac3d5e568f400dd5f59d2cb9/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b36ec51873ba05c1ac3d5e568f400dd5f59d2cb9/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=b36ec51873ba05c1ac3d5e568f400dd5f59d2cb9", "patch": "@@ -167,6 +167,7 @@ procedure Gnat1drv is\n \n       if Debug_Flag_Dot_U then\n          Modify_Tree_For_C := True;\n+         Transform_Function_Array := True;\n       end if;\n \n       --  -gnatd_A disables generation of ALI files\n@@ -179,6 +180,7 @@ procedure Gnat1drv is\n \n       if Generate_C_Code then\n          Modify_Tree_For_C := True;\n+         Transform_Function_Array := True;\n          Unnest_Subprogram_Mode := True;\n          Building_Static_Dispatch_Tables := False;\n          Minimize_Expression_With_Actions := True;\n@@ -246,9 +248,10 @@ procedure Gnat1drv is\n          --  this way when we are doing CodePeer tests on existing test suites\n          --  that may have -gnateg set, to avoid the need for special casing.\n \n-         Modify_Tree_For_C      := False;\n-         Generate_C_Code        := False;\n-         Unnest_Subprogram_Mode := False;\n+         Modify_Tree_For_C        := False;\n+         Transform_Function_Array := False;\n+         Generate_C_Code          := False;\n+         Unnest_Subprogram_Mode   := False;\n \n          --  Turn off inlining, confuses CodePeer output and gains nothing\n \n@@ -454,9 +457,10 @@ procedure Gnat1drv is\n          --  this way when we are doing GNATprove tests on existing test suites\n          --  that may have -gnateg set, to avoid the need for special casing.\n \n-         Modify_Tree_For_C := False;\n-         Generate_C_Code := False;\n-         Unnest_Subprogram_Mode := False;\n+         Modify_Tree_For_C        := False;\n+         Transform_Function_Array := False;\n+         Generate_C_Code          := False;\n+         Unnest_Subprogram_Mode   := False;\n \n          --  Turn off inlining, which would confuse formal verification output\n          --  and gain nothing."}, {"sha": "3e9f36edc7e28fd2b514fef5eb203ce4e0def0cb", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b36ec51873ba05c1ac3d5e568f400dd5f59d2cb9/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b36ec51873ba05c1ac3d5e568f400dd5f59d2cb9/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=b36ec51873ba05c1ac3d5e568f400dd5f59d2cb9", "patch": "@@ -1588,6 +1588,12 @@ package Opt is\n    --  Tolerate time stamp and other consistency errors. If this flag is set to\n    --  True (-t), then inconsistencies result in warnings rather than errors.\n \n+   Transform_Function_Array : Boolean := False;\n+   --  GNAT\n+   --  If this switch is set True, then functions returning constrained arrays\n+   --  are transformed into a procedure with an out parameter, and all calls\n+   --  are updated accordingly.\n+\n    Treat_Categorization_Errors_As_Warnings : Boolean := False;\n    --  Normally categorization errors are true illegalities. If this switch\n    --  is set, then such errors result in warning messages rather than error"}, {"sha": "c476e45765cdcafbdb7fb853dc146f1f99f5e3d7", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b36ec51873ba05c1ac3d5e568f400dd5f59d2cb9/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b36ec51873ba05c1ac3d5e568f400dd5f59d2cb9/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=b36ec51873ba05c1ac3d5e568f400dd5f59d2cb9", "patch": "@@ -3023,10 +3023,10 @@ package body Sem_Ch6 is\n          --  Required to ensure that Expand_Call rewrites calls to this\n          --  function by calls to the built procedure.\n \n-         if Modify_Tree_For_C\n+         if Transform_Function_Array\n            and then Nkind (Body_Spec) = N_Function_Specification\n            and then\n-              Rewritten_For_C (Defining_Entity (Specification (Subp_Decl)))\n+             Rewritten_For_C (Defining_Entity (Specification (Subp_Decl)))\n          then\n             Set_Rewritten_For_C (Defining_Entity (Body_Spec));\n             Set_Corresponding_Procedure (Defining_Entity (Body_Spec),\n@@ -4073,11 +4073,11 @@ package body Sem_Ch6 is\n                   Build_Subprogram_Declaration;\n \n                --  If this is a function that returns a constrained array, and\n-               --  we are generating C code, create subprogram declaration\n-               --  to simplify subsequent C generation.\n+               --  Transform_Function_Array is set, create subprogram\n+               --  declaration to simplify e.g. subsequent C generation.\n \n                elsif No (Spec_Id)\n-                 and then Modify_Tree_For_C\n+                 and then Transform_Function_Array\n                  and then Nkind (Body_Spec) = N_Function_Specification\n                  and then Is_Array_Type (Etype (Body_Id))\n                  and then Is_Constrained (Etype (Body_Id))\n@@ -4171,17 +4171,18 @@ package body Sem_Ch6 is\n          Spec_Id := Build_Internal_Protected_Declaration (N);\n       end if;\n \n-      --  If we are generating C and this is a function returning a constrained\n-      --  array type for which we must create a procedure with an extra out\n-      --  parameter, build and analyze the body now. The procedure declaration\n-      --  has already been created. We reuse the source body of the function,\n-      --  because in an instance it may contain global references that cannot\n-      --  be reanalyzed. The source function itself is not used any further,\n-      --  so we mark it as having a completion. If the subprogram is a stub the\n-      --  transformation is done later, when the proper body is analyzed.\n+      --  If Transform_Function_Array is set and this is a function returning a\n+      --  constrained array type for which we must create a procedure with an\n+      --  extra out parameter, build and analyze the body now. The procedure\n+      --  declaration has already been created. We reuse the source body of the\n+      --  function, because in an instance it may contain global references\n+      --  that cannot be reanalyzed. The source function itself is not used any\n+      --  further, so we mark it as having a completion. If the subprogram is a\n+      --  stub the transformation is done later, when the proper body is\n+      --  analyzed.\n \n       if Expander_Active\n-        and then Modify_Tree_For_C\n+        and then Transform_Function_Array\n         and then Present (Spec_Id)\n         and then Ekind (Spec_Id) = E_Function\n         and then Nkind (N) /= N_Subprogram_Body_Stub"}]}