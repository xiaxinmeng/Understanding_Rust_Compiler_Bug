{"sha": "20a380171f5db5f356b173d573559bfeef1ebbff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBhMzgwMTcxZjVkYjVmMzU2YjE3M2Q1NzM1NTliZmVlZjFlYmJmZg==", "commit": {"author": {"name": "Matthew Malcomson", "email": "matthew.malcomson@arm.com", "date": "2019-11-18T11:16:46Z"}, "committer": {"name": "Matthew Malcomson", "email": "matmal01@gcc.gnu.org", "date": "2019-11-18T11:16:46Z"}, "message": "[mid-end][__RTL] Clean state despite unspecified __RTL startwith passes\n\nHi there,\n\nWhen compiling an __RTL function that has an unspecified \"startwith\"\npass we currently don't run the cleanup pass, this means that we ICE on\nthe next function (if it's a basic function).\n\nThis change ensures that the clean_state pass is run even if the\nstartwith pass is unspecified.\n\nWe also ensure the name of the startwith pass is always freed correctly.\n\nAs an example, before this change the following code would ICE when compiling\nthe function `foo_a`.\n\nWhen compiled with\n./aarch64-none-linux-gnu-gcc -O0 -S unspecified-pass-error.c -o test.s\n\n```\nint __RTL () badfoo ()\n{\n(function \"badfoo\"\n  (insn-chain\n    (block 2\n      (edge-from entry (flags \"FALLTHRU\"))\n      (cnote 3 [bb 2] NOTE_INSN_BASIC_BLOCK)\n      (cinsn 101 (set (reg:DI x19) (reg:DI x0)))\n      (cinsn 10 (use (reg/i:SI x19)))\n      (edge-to exit (flags \"FALLTHRU\"))\n    ) ;; block 2\n  ) ;; insn-chain\n) ;; function \"foo2\"\n}\n\nint\nfoo_a ()\n{\n  return 200;\n}\n```\n\nNow it silently ignores the __RTL function and successfully compiles foo_a.\n\nregtest done on aarch64\nregtest done on x86_64\n\nOK for trunk?\n\ngcc/ChangeLog:\n\n2019-11-18  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* run-rtl-passes.c (run_rtl_passes): Accept and handle empty\n\t\"initial_pass_name\" argument -- by running \"*clean_state\" pass.\n\tAlso free the \"initial_pass_name\" when done.\n\ngcc/c/ChangeLog:\n\n2019-11-18  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* c-parser.c (c_parser_parse_rtl_body): Always call\n\trun_rtl_passes, even if startwith pass is not provided.\n\ngcc/testsuite/ChangeLog:\n\n2019-11-18  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* gcc.dg/rtl/aarch64/unspecified-pass-error.c: New test.\n\nFrom-SVN: r278393", "tree": {"sha": "6917b6d723309b3e12013c39ef8855b345a135e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6917b6d723309b3e12013c39ef8855b345a135e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20a380171f5db5f356b173d573559bfeef1ebbff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20a380171f5db5f356b173d573559bfeef1ebbff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20a380171f5db5f356b173d573559bfeef1ebbff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20a380171f5db5f356b173d573559bfeef1ebbff/comments", "author": {"login": "mmalcomson", "id": 57484298, "node_id": "MDQ6VXNlcjU3NDg0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmalcomson", "html_url": "https://github.com/mmalcomson", "followers_url": "https://api.github.com/users/mmalcomson/followers", "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}", "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions", "organizations_url": "https://api.github.com/users/mmalcomson/orgs", "repos_url": "https://api.github.com/users/mmalcomson/repos", "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}", "received_events_url": "https://api.github.com/users/mmalcomson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ef50b972e10238a1ac20f23ce3bb32187ae4cb84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef50b972e10238a1ac20f23ce3bb32187ae4cb84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef50b972e10238a1ac20f23ce3bb32187ae4cb84"}], "stats": {"total": 90, "additions": 70, "deletions": 20}, "files": [{"sha": "78a918281a7a97038904263e726efcf7af1330b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20a380171f5db5f356b173d573559bfeef1ebbff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20a380171f5db5f356b173d573559bfeef1ebbff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=20a380171f5db5f356b173d573559bfeef1ebbff", "patch": "@@ -1,3 +1,9 @@\n+2019-11-18  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* run-rtl-passes.c (run_rtl_passes): Accept and handle empty\n+\t\"initial_pass_name\" argument -- by running \"*clean_state\" pass.\n+\tAlso free the \"initial_pass_name\" when done.\n+\n 2019-11-18  Richard Biener  <rguenther@suse.de>\n \n \tPR rtl-optimization/92462"}, {"sha": "0658ea0d2a69d65d1d342883ba78784d5e68e493", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20a380171f5db5f356b173d573559bfeef1ebbff/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20a380171f5db5f356b173d573559bfeef1ebbff/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=20a380171f5db5f356b173d573559bfeef1ebbff", "patch": "@@ -1,3 +1,8 @@\n+2019-11-18  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* c-parser.c (c_parser_parse_rtl_body): Always call\n+\trun_rtl_passes, even if startwith pass is not provided.\n+\n 2019-11-15  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-parser.c (c_parser_std_attribute_specifier): Diagnose"}, {"sha": "2efa23424ffb5f2b707e9b8521ee15202b18e322", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20a380171f5db5f356b173d573559bfeef1ebbff/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20a380171f5db5f356b173d573559bfeef1ebbff/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=20a380171f5db5f356b173d573559bfeef1ebbff", "patch": "@@ -21574,11 +21574,9 @@ c_parser_parse_rtl_body (c_parser *parser, char *start_with_pass)\n       return;\n     }\n \n- /*  If a pass name was provided for START_WITH_PASS, run the backend\n-     accordingly now, on the cfun created above, transferring\n-     ownership of START_WITH_PASS.  */\n-  if (start_with_pass)\n-    run_rtl_passes (start_with_pass);\n+ /*  Run the backend on the cfun created above, transferring ownership of\n+     START_WITH_PASS.  */\n+  run_rtl_passes (start_with_pass);\n }\n \n #include \"gt-c-c-parser.h\""}, {"sha": "38765ebbc288e7aef35d7c02693efd534c6b2ddc", "filename": "gcc/run-rtl-passes.c", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20a380171f5db5f356b173d573559bfeef1ebbff/gcc%2Frun-rtl-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20a380171f5db5f356b173d573559bfeef1ebbff/gcc%2Frun-rtl-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frun-rtl-passes.c?ref=20a380171f5db5f356b173d573559bfeef1ebbff", "patch": "@@ -49,24 +49,31 @@ run_rtl_passes (char *initial_pass_name)\n   switch_to_section (text_section);\n   (*debug_hooks->assembly_start) ();\n \n-  /* Pass \"expand\" normally sets this up.  */\n+  if (initial_pass_name)\n+    {\n+      /* Pass \"expand\" normally sets this up.  */\n #ifdef INSN_SCHEDULING\n-  init_sched_attrs ();\n+      init_sched_attrs ();\n #endif\n+      bitmap_obstack_initialize (NULL);\n+      bitmap_obstack_initialize (&reg_obstack);\n+      opt_pass *rest_of_compilation\n+\t= g->get_passes ()->get_rest_of_compilation ();\n+      gcc_assert (rest_of_compilation);\n+      execute_pass_list (cfun, rest_of_compilation);\n \n-  bitmap_obstack_initialize (NULL);\n-  bitmap_obstack_initialize (&reg_obstack);\n-\n-  opt_pass *rest_of_compilation\n-    = g->get_passes ()->get_rest_of_compilation ();\n-  gcc_assert (rest_of_compilation);\n-  execute_pass_list (cfun, rest_of_compilation);\n-\n-  opt_pass *clean_slate = g->get_passes ()->get_clean_slate ();\n-  gcc_assert (clean_slate);\n-  execute_pass_list (cfun, clean_slate);\n-\n-  bitmap_obstack_release (&reg_obstack);\n+      opt_pass *clean_slate = g->get_passes ()->get_clean_slate ();\n+      gcc_assert (clean_slate);\n+      execute_pass_list (cfun, clean_slate);\n+      bitmap_obstack_release (&reg_obstack);\n+    }\n+  else\n+    {\n+      opt_pass *clean_slate = g->get_passes ()->get_clean_slate ();\n+      gcc_assert (clean_slate);\n+      execute_pass_list (cfun, clean_slate);\n+    }\n \n   cfun->curr_properties |= PROP_rtl;\n+  free (initial_pass_name);\n }"}, {"sha": "87705b421fc3ff71570d9a6a5a4d02dd0e42a017", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20a380171f5db5f356b173d573559bfeef1ebbff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20a380171f5db5f356b173d573559bfeef1ebbff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=20a380171f5db5f356b173d573559bfeef1ebbff", "patch": "@@ -1,3 +1,7 @@\n+2019-11-18  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* gcc.dg/rtl/aarch64/unspecified-pass-error.c: New test.\n+\n 2019-11-18  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* lib/target-supports.exp"}, {"sha": "596501e977044132bd3e9a2d0afd0f8b2b789186", "filename": "gcc/testsuite/gcc.dg/rtl/aarch64/unspecified-pass-error.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20a380171f5db5f356b173d573559bfeef1ebbff/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Faarch64%2Funspecified-pass-error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20a380171f5db5f356b173d573559bfeef1ebbff/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Faarch64%2Funspecified-pass-error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Faarch64%2Funspecified-pass-error.c?ref=20a380171f5db5f356b173d573559bfeef1ebbff", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile { target aarch64-*-* } } */\n+/* { dg-additional-options \"-O0\" } */\n+\n+/*\n+   Ensure an __RTL function with an unspecified \"startwith\" pass doesn't cause\n+   an assertion error on the next function.\n+ */\n+\n+int __RTL () badfoo ()\n+{\n+(function \"badfoo\"\n+  (insn-chain\n+    (block 2\n+      (edge-from entry (flags \"FALLTHRU\"))\n+      (cnote 3 [bb 2] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 101 (set (reg:DI x19) (reg:DI x0)))\n+      (cinsn 10 (use (reg/i:SI x19)))\n+      (edge-to exit (flags \"FALLTHRU\"))\n+    ) ;; block 2\n+  ) ;; insn-chain\n+) ;; function \"foo2\"\n+}\n+\n+/* Compile a valid C function to test the clean_state pass has been run.  */\n+int\n+foo_a ()\n+{\n+  return 200;\n+}\n+"}]}