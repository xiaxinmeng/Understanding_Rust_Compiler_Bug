{"sha": "581263689a92a036d9e00f64eed60ffd8e28025f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgxMjYzNjg5YTkyYTAzNmQ5ZTAwZjY0ZWVkNjBmZmQ4ZTI4MDI1Zg==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2014-06-06T08:23:16Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2014-06-06T08:23:16Z"}, "message": "ChangeLog (2014-05-23): Fix ChangeLog entry to refer to target endianness instead of host endianness.\n\n2014-06-06  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    gcc/\n    * ChangeLog (2014-05-23): Fix ChangeLog entry to refer to target\n      endianness instead of host endianness.\n    * tree-ssa-math-opts.c (find_bswap_or_nop_1): Likewise in dumps and\n      comments.\n\n    gcc/testsuite/\n    * gcc.dg/optimize-bswaphi-1.c: Adapt test to change of dump output.\n      Specify -march=z900 as an additional option.\n    * gcc.dg/optimize-bswapsi-1.c: Likewise for s390 options.\n    * gcc.dg/optimize-bswapsi-2.c: Likewise.\n    * gcc.dg/optimize-bswapdi-3.c: Likewise for adaptation to dump change.\n\nFrom-SVN: r211309", "tree": {"sha": "d50e92c0f6474aef6ca2ca3e80f9640aa58f8d48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d50e92c0f6474aef6ca2ca3e80f9640aa58f8d48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/581263689a92a036d9e00f64eed60ffd8e28025f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/581263689a92a036d9e00f64eed60ffd8e28025f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/581263689a92a036d9e00f64eed60ffd8e28025f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/581263689a92a036d9e00f64eed60ffd8e28025f/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3fd48b121a654c914b2784334650d23095d938e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fd48b121a654c914b2784334650d23095d938e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fd48b121a654c914b2784334650d23095d938e4"}], "stats": {"total": 38, "additions": 27, "deletions": 11}, "files": [{"sha": "971b79af473755949889caa8eb0c0979a89e6b51", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/581263689a92a036d9e00f64eed60ffd8e28025f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/581263689a92a036d9e00f64eed60ffd8e28025f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=581263689a92a036d9e00f64eed60ffd8e28025f", "patch": "@@ -1,3 +1,10 @@\n+2014-06-06  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* ChangeLog (2014-05-23): Fix ChangeLog entry to refer to target\n+\tendianness instead of host endianness.\n+\t* tree-ssa-math-opts.c (find_bswap_or_nop_1): Likewise in dumps and\n+\tcomments.\n+\n 2014-06-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR debug/53927\n@@ -2011,7 +2018,8 @@\n \t(find_bswap_or_nop_1): This. Also add support for memory source.\n \t(find_bswap): Renamed to ...\n \t(find_bswap_or_nop): This. Also add support for memory source and\n-\tdetection of bitwise operations equivalent to load in host endianness.\n+\tdetection of bitwise operations equivalent to load in target\n+\tendianness.\n \t(execute_optimize_bswap): Likewise. Also move its leading comment back\n \tin place and split statement transformation into ...\n \t(bswap_replace): This."}, {"sha": "f9f03d90c08af39423fcdb54745a6e8ef95e99d2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/581263689a92a036d9e00f64eed60ffd8e28025f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/581263689a92a036d9e00f64eed60ffd8e28025f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=581263689a92a036d9e00f64eed60ffd8e28025f", "patch": "@@ -1,3 +1,11 @@\n+2014-06-06  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* gcc.dg/optimize-bswaphi-1.c: Adapt test to change of dump output.\n+\tSpecify -march=z900 as an additional option.\n+\t* gcc.dg/optimize-bswapsi-1.c: Likewise for s390 options.\n+\t* gcc.dg/optimize-bswapsi-2.c: Likewise.\n+\t* gcc.dg/optimize-bswapdi-3.c: Likewise for adaptation to dump change.\n+\n 2014-06-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gfortran.dg/gomp/allocatable_components_1.f90: Adjust for"}, {"sha": "d96d7e51025851145d713ba1fb93dea83e77e687", "filename": "gcc/testsuite/gcc.dg/optimize-bswapdi-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/581263689a92a036d9e00f64eed60ffd8e28025f/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapdi-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/581263689a92a036d9e00f64eed60ffd8e28025f/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapdi-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapdi-3.c?ref=581263689a92a036d9e00f64eed60ffd8e28025f", "patch": "@@ -59,6 +59,6 @@ uint64_t read_be64_3 (unsigned char *data)\n \t | ((uint64_t) *(data + 1) << 48) | ((uint64_t) *data << 56);\n }\n \n-/* { dg-final { scan-tree-dump-times \"64 bit load in host endianness found at\" 3 \"bswap\" } } */\n+/* { dg-final { scan-tree-dump-times \"64 bit load in target endianness found at\" 3 \"bswap\" } } */\n /* { dg-final { scan-tree-dump-times \"64 bit bswap implementation found at\" 3 \"bswap\" { xfail alpha*-*-* arm*-*-* } } } */\n /* { dg-final { cleanup-tree-dump \"bswap\" } } */"}, {"sha": "3e51f043cae62f744ca99c893fa158392454da26", "filename": "gcc/testsuite/gcc.dg/optimize-bswaphi-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/581263689a92a036d9e00f64eed60ffd8e28025f/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswaphi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/581263689a92a036d9e00f64eed60ffd8e28025f/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswaphi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswaphi-1.c?ref=581263689a92a036d9e00f64eed60ffd8e28025f", "patch": "@@ -2,7 +2,7 @@\n /* { dg-require-effective-target bswap16 } */\n /* { dg-require-effective-target stdint_types } */\n /* { dg-options \"-O2 -fdump-tree-bswap\" } */\n-/* { dg-options \"-O2 -fdump-tree-bswap -march=z900\" { target s390-*-* } } */\n+/* { dg-additional-options \"-march=z900\" { target s390-*-* } } */\n \n #include <stdint.h>\n \n@@ -42,6 +42,6 @@ uint32_t read_be16_3 (unsigned char *data)\n   return *(data + 1) | (*data << 8);\n }\n \n-/* { dg-final { scan-tree-dump-times \"16 bit load in host endianness found at\" 3 \"bswap\" } } */\n+/* { dg-final { scan-tree-dump-times \"16 bit load in target endianness found at\" 3 \"bswap\" } } */\n /* { dg-final { scan-tree-dump-times \"16 bit bswap implementation found at\" 3 \"bswap\" { xfail alpha*-*-* arm*-*-* } } } */\n /* { dg-final { cleanup-tree-dump \"bswap\" } } */"}, {"sha": "ebfca6077b9f33e7118fed829e3aecea529ec318", "filename": "gcc/testsuite/gcc.dg/optimize-bswapsi-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/581263689a92a036d9e00f64eed60ffd8e28025f/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapsi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/581263689a92a036d9e00f64eed60ffd8e28025f/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapsi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapsi-1.c?ref=581263689a92a036d9e00f64eed60ffd8e28025f", "patch": "@@ -2,7 +2,7 @@\n /* { dg-require-effective-target bswap32 } */\n /* { dg-require-effective-target stdint_types } */\n /* { dg-options \"-O2 -fdump-tree-bswap\" } */\n-/* { dg-options \"-O2 -fdump-tree-bswap -march=z900\" { target s390-*-* } } */\n+/* { dg-additional-options \"-march=z900\" { target s390-*-* } } */\n \n #include <stdint.h>\n "}, {"sha": "de6e6971478e8dadfd7a14a5ed33c868373ef279", "filename": "gcc/testsuite/gcc.dg/optimize-bswapsi-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/581263689a92a036d9e00f64eed60ffd8e28025f/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapsi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/581263689a92a036d9e00f64eed60ffd8e28025f/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapsi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapsi-2.c?ref=581263689a92a036d9e00f64eed60ffd8e28025f", "patch": "@@ -2,7 +2,7 @@\n /* { dg-require-effective-target bswap32 } */\n /* { dg-require-effective-target stdint_types } */\n /* { dg-options \"-O2 -fdump-tree-bswap\" } */\n-/* { dg-options \"-O2 -fdump-tree-bswap -march=z900\" { target s390-*-* } } */\n+/* { dg-additional-options \"-march=z900\" { target s390-*-* } } */\n \n #include <stdint.h>\n \n@@ -44,6 +44,6 @@ uint32_t read_be32_3 (unsigned char *data)\n \t | (*data << 24);\n }\n \n-/* { dg-final { scan-tree-dump-times \"32 bit load in host endianness found at\" 3 \"bswap\" } } */\n+/* { dg-final { scan-tree-dump-times \"32 bit load in target endianness found at\" 3 \"bswap\" } } */\n /* { dg-final { scan-tree-dump-times \"32 bit bswap implementation found at\" 3 \"bswap\" { xfail alpha*-*-* arm*-*-* } } } */\n /* { dg-final { cleanup-tree-dump \"bswap\" } } */"}, {"sha": "a928ad926bb55c70e90125ba28e3b0789246dd70", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/581263689a92a036d9e00f64eed60ffd8e28025f/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/581263689a92a036d9e00f64eed60ffd8e28025f/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=581263689a92a036d9e00f64eed60ffd8e28025f", "patch": "@@ -1971,7 +1971,7 @@ find_bswap_or_nop_1 (gimple stmt, struct symbolic_number *n, int limit)\n \t      n->range = n2.range + off_sub;\n \n \t      /* Reinterpret byte marks in symbolic number holding the value of\n-\t\t bigger weight according to host endianness.  */\n+\t\t bigger weight according to target endianness.  */\n \t      inc = BYTES_BIG_ENDIAN ? off_sub + n2.range - n1.range : off_sub;\n \t      mask = 0xFF;\n \t      if (BYTES_BIG_ENDIAN)\n@@ -2074,7 +2074,7 @@ find_bswap_or_nop (gimple stmt, struct symbolic_number *n, bool *bswap)\n \n   /* A complete byte swap should make the symbolic number to start with\n      the largest digit in the highest order byte. Unchanged symbolic\n-     number indicates a read with same endianness as host architecture.  */\n+     number indicates a read with same endianness as target architecture.  */\n   if (n->n == cmpnop)\n     *bswap = false;\n   else if (n->n == cmpxchg)\n@@ -2204,7 +2204,7 @@ bswap_replace (gimple stmt, gimple_stmt_iterator *gsi, tree src, tree fndecl,\n \t  if (dump_file)\n \t    {\n \t      fprintf (dump_file,\n-\t\t       \"%d bit load in host endianness found at: \",\n+\t\t       \"%d bit load in target endianness found at: \",\n \t\t       (int)n->range);\n \t      print_gimple_stmt (dump_file, stmt, 0, 0);\n \t    }\n@@ -2271,7 +2271,7 @@ bswap_replace (gimple stmt, gimple_stmt_iterator *gsi, tree src, tree fndecl,\n /* Find manual byte swap implementations as well as load in a given\n    endianness. Byte swaps are turned into a bswap builtin invokation\n    while endian loads are converted to bswap builtin invokation or\n-   simple load according to the host endianness.  */\n+   simple load according to the target endianness.  */\n \n unsigned int\n pass_optimize_bswap::execute (function *fun)"}]}