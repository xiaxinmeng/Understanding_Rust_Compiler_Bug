{"sha": "51b9db927f5dca75792b11cbc91266d6b842a6b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFiOWRiOTI3ZjVkY2E3NTc5MmIxMWNiYzkxMjY2ZDZiODQyYTZiMg==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "maxim@codesourcery.com", "date": "2010-05-27T12:06:58Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2010-05-27T12:06:58Z"}, "message": "Support compilation for Android platform.  Reimplement -mandroid.\n\n\t* config.gcc (*linux*): Include linux-android.h and linux-android.opt.\n\t(*android*): Set ANDROID_DEFAULT.\n\t(arm*-*-linux*): Include linux-android.h.\n\t(arm*-*-eabi*): Don't include previous -mandroid implementation.\n\t* config/arm/eabi.h: Remove, move Android-specific parts ...\n\t* config/linux-android.h: ... here.  New file.\n\t* config/arm/eabi.opt: Rename to ...\n\t* config/linux-android.opt: ... this.\n\t(mandroid): Allow -mno-android option.  Initialize based on\n\tANDROID_DEFAULT.\n\t* config/linux.h (STARTFILE_SPEC, ENDFILE_SPEC, CC1_SPEC, LIB_SPEC):\n\tMove logic to corresponding LINUX_TARGET_* macros.\n\t(TARGET_OS_CPP_BUILTINS): Define __ANDROID__, when appropriate.\n\t* config/linux-eabi.h (LINK_SPEC, CC1_SPEC, CC1PLUS_SPEC, LIB_SPEC,)\n\t(STARTFILE_SPEC, ENDFILE_SPEC): Define to choose between Linux and\n\tAndroid definitions.\n\t(LINUX_TARGET_OS_CPP_BUILTINS): Define __ANDROID__ if TARGET_ANDROID.\n\t* doc/invoke.texi (-mandroid, -tno-android-cc, -tno-android-ld):\n\tDocument.\n\nFrom-SVN: r159918", "tree": {"sha": "7ad832699f9e9bad16de80149c717b4f8e7cab5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ad832699f9e9bad16de80149c717b4f8e7cab5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51b9db927f5dca75792b11cbc91266d6b842a6b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51b9db927f5dca75792b11cbc91266d6b842a6b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51b9db927f5dca75792b11cbc91266d6b842a6b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51b9db927f5dca75792b11cbc91266d6b842a6b2/comments", "author": null, "committer": null, "parents": [{"sha": "74c7025321da74e985e225350c32edd3996a4a1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74c7025321da74e985e225350c32edd3996a4a1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74c7025321da74e985e225350c32edd3996a4a1e"}], "stats": {"total": 305, "additions": 163, "deletions": 142}, "files": [{"sha": "68fffda8e970ec7268f5ad11652f0e62f328134b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b9db927f5dca75792b11cbc91266d6b842a6b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b9db927f5dca75792b11cbc91266d6b842a6b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=51b9db927f5dca75792b11cbc91266d6b842a6b2", "patch": "@@ -1,3 +1,27 @@\n+2010-05-27  Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\n+\tSupport compilation for Android platform.  Reimplement -mandroid.\n+\n+\t* config.gcc (*linux*): Include linux-android.h and linux-android.opt.\n+\t(*android*): Set ANDROID_DEFAULT.\n+\t(arm*-*-linux*): Include linux-android.h.\n+\t(arm*-*-eabi*): Don't include previous -mandroid implementation.\n+\t* config/arm/eabi.h: Remove, move Android-specific parts ...\n+\t* config/linux-android.h: ... here.  New file.\n+\t* config/arm/eabi.opt: Rename to ...\n+\t* config/linux-android.opt: ... this.\n+\t(mandroid): Allow -mno-android option.  Initialize based on\n+\tANDROID_DEFAULT.\n+\t* config/linux.h (STARTFILE_SPEC, ENDFILE_SPEC, CC1_SPEC, LIB_SPEC):\n+\tMove logic to corresponding LINUX_TARGET_* macros.\n+\t(TARGET_OS_CPP_BUILTINS): Define __ANDROID__, when appropriate.\n+\t* config/linux-eabi.h (LINK_SPEC, CC1_SPEC, CC1PLUS_SPEC, LIB_SPEC,)\n+\t(STARTFILE_SPEC, ENDFILE_SPEC): Define to choose between Linux and\n+\tAndroid definitions.\n+\t(LINUX_TARGET_OS_CPP_BUILTINS): Define __ANDROID__ if TARGET_ANDROID.\n+\t* doc/invoke.texi (-mandroid, -tno-android-cc, -tno-android-ld):\n+\tDocument.\n+\n 2010-05-27  Maxim Kuvyrkov  <maxim@codesourcery.com>\n \n \tAdd support for Bionic C library"}, {"sha": "022997a0a4c9f950de082fd61de736d1632e8f7c", "filename": "gcc/config.gcc", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b9db927f5dca75792b11cbc91266d6b842a6b2/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b9db927f5dca75792b11cbc91266d6b842a6b2/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=51b9db927f5dca75792b11cbc91266d6b842a6b2", "patch": "@@ -534,6 +534,22 @@ case ${target} in\n   default_use_cxa_atexit=yes\n   use_gcc_tgmath=no\n   use_gcc_stdint=wrap\n+  # Add Android userspace support to Linux targets.\n+  case $target in\n+    *linux*)\n+      tm_file=\"$tm_file linux-android.h\"\n+      extra_options=\"$extra_options linux-android.opt\"\n+      ;;\n+  esac\n+  # Enable compilation for Android by default for *android* targets.\n+  case $target in\n+    *-*-*android*)\n+      tm_defines=\"$tm_defines ANDROID_DEFAULT=1\"\n+      ;;\n+    *)\n+      tm_defines=\"$tm_defines ANDROID_DEFAULT=0\"\n+      ;;\n+  esac\n   ;;\n *-*-netbsd*)\n   tmake_file=\"t-slibgcc-elf-ver t-libc-ok t-netbsd t-libgcc-pic\"\n@@ -717,7 +733,7 @@ arm*-*-netbsd*)\n \tuse_collect2=yes\n \t;;\n arm*-*-linux*)\t\t\t# ARM GNU/Linux with ELF\n-\ttm_file=\"dbxelf.h elfos.h linux.h glibc-stdint.h arm/elf.h arm/linux-gas.h arm/linux-elf.h\"\n+\ttm_file=\"dbxelf.h elfos.h linux.h linux-android.h glibc-stdint.h arm/elf.h arm/linux-gas.h arm/linux-elf.h\"\n \tcase $target in\n \tarm*b-*)\n \t\ttm_defines=\"${tm_defines} TARGET_BIG_ENDIAN_DEFAULT=1\"\n@@ -774,9 +790,8 @@ arm*-*-eabi* | arm*-*-symbianelf* )\n \ttmake_file=\"arm/t-arm arm/t-arm-elf\"\n \tcase ${target} in\n \tarm*-*-eabi*)\n-\t  tm_file=\"$tm_file arm/eabi.h newlib-stdint.h\"\n+\t  tm_file=\"$tm_file newlib-stdint.h\"\n \t  tmake_file=\"${tmake_file} arm/t-bpabi\"\n-\t  extra_options=\"${extra_options} arm/eabi.opt\"\n \t  use_gcc_stdint=wrap\n \t  ;;\n \tarm*-*-symbianelf*)"}, {"sha": "c7d1d3ed20ccf08a74290d567dd83ae2ff83442b", "filename": "gcc/config/arm/eabi.h", "status": "removed", "additions": 0, "deletions": 125, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74c7025321da74e985e225350c32edd3996a4a1e/gcc%2Fconfig%2Farm%2Feabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74c7025321da74e985e225350c32edd3996a4a1e/gcc%2Fconfig%2Farm%2Feabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Feabi.h?ref=74c7025321da74e985e225350c32edd3996a4a1e", "patch": "@@ -1,125 +0,0 @@\n-/* Configuration file for ARM EABI targets.\n-   Copyright (C) 2008\n-   Free Software Foundation, Inc.\n-   Contributed by Doug Kwan (dougkwan@google.com)\n-\n-   This file is part of GCC.\n-\n-   GCC is free software; you can redistribute it and/or modify it\n-   under the terms of the GNU General Public License as published\n-   by the Free Software Foundation; either version 3, or (at your\n-   option) any later version.\n-\n-   GCC is distributed in the hope that it will be useful, but WITHOUT\n-   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n-   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n-   License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with GCC; see the file COPYING3.  If not see\n-   <http://www.gnu.org/licenses/>.  */\n-\n-/* This file contains macro overrides for EABI targets.  */\n-\n-#undef TARGET_OS_CPP_BUILTINS\n-#define TARGET_OS_CPP_BUILTINS()\t\t\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      TARGET_BPABI_CPP_BUILTINS ();\t\t\t\\\n-      if (TARGET_ANDROID)\t\t\t\t\\\n-\tbuiltin_define (\"__ANDROID__\");\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-  while (false)\n-\n-#undef SUBSUBTARGET_EXTRA_SPECS\n-#define SUBSUBTARGET_EXTRA_SPECS \\\n-  { \"link_android\",\t\tANDROID_LINK_SPEC },\t\t\\\n-  { \"link_default\",\t\tBPABI_LINK_SPEC },\t\t\\\n-  { \"cc1_android\",\t\tANDROID_CC1_SPEC },\t\t\\\n-  { \"cc1_default\",\t\tCC1_DEFAULT_SPEC },\t\t\\\n-  { \"cc1plus_android\",\t\tANDROID_CC1PLUS_SPEC },\t\t\\\n-  { \"cc1plus_default\",\t\tCC1PLUS_DEFAULT_SPEC },\t\t\\\n-  { \"lib_android\",\t\tANDROID_LIB_SPEC },\t\t\\\n-  { \"lib_default\",\t\tLIB_DEFAULT_SPEC },\t\t\\\n-  { \"startfile_android\",\tANDROID_STARTFILE_SPEC },\t\\\n-  { \"startfile_default\",\tUNKNOWN_ELF_STARTFILE_SPEC },\t\\\n-  { \"endfile_android\",\t\tANDROID_ENDFILE_SPEC },\t\t\\\n-  { \"endfile_default\",\t\tUNKNOWN_ELF_ENDFILE_SPEC },\t\\\n-\n-#undef ANDROID_LINK_SPEC\n-#define ANDROID_LINK_SPEC \\\n-\"%{mbig-endian:-EB} %{mlittle-endian:-EL} \"\t\t\\\n-\"%{static:-Bstatic} %{shared:-shared} %{symbolic:-Bsymbolic} \"\t\\\n-\"%{!static:\" \\\n-   \"%{shared: -Bsymbolic} \" \\\n-   \"%{!shared:\" \\\n-      \"%{rdynamic:-export-dynamic} \" \\\n-      \"%{!dynamic-linker:-dynamic-linker /system/bin/linker}}} \" \\\n-\"-X\" SUBTARGET_EXTRA_LINK_SPEC\n-\n-/* Override LINK_SPEC in bpabi.h. */\n-#undef LINK_SPEC\n-#define LINK_SPEC \\\n-\"%{mandroid: %(link_android) ;\" \\\n-\"          : %(link_default)}\"\n-\n-/* Android uses -fno-exceptions by default. */\n-#undef ANDROID_CC1_SPEC\n-#define ANDROID_CC1_SPEC \"%{!fexceptions:-fno-exceptions}\"\n-\n-/* Default CC1_SPEC as in arm.h. */\n-#undef CC1_DEFAULT_SPEC\n-#define CC1_DEFAULT_SPEC \"\"\n-\n-#undef CC1_SPEC\n-#define CC1_SPEC \\\n-\"%{mandroid: %(cc1_android) ;\" \\\n-\"          : %(cc1_default)}\"\n-\n-/* Android uses -fno-rtti by default. */\n-#undef ANDROID_CC1PLUS_SPEC\n-#define ANDROID_CC1PLUS_SPEC \"%{!frtti:-fno-rtti}\"\n-\n-/* Default CC1PLUS_SPEC as in gcc.c. */\n-#undef CC1PLUS_DEFAULT_SPEC\n-#define CC1PLUS_DEFAULT_SPEC \"\"\n-\n-#undef CC1PLUS_SPEC\n-#define CC1PLUS_SPEC \\\n-\"%{mandroid: %(cc1plus_android) ;\" \\\n-\"          : %(cc1plus_default)}\"\n-\n-#undef ANDROID_LIB_SPEC\n-#define ANDROID_LIB_SPEC\t\"-lc %{!static:-ldl}\"\n-\n-/* Default LIB_SPEC as in gcc.c. */\n-#undef LIB_DEFAULT_SPEC\n-#define LIB_DEFAULT_SPEC \\\n-\"%{!shared:%{g*:-lg} %{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p}}\"\n-\n-#undef LIB_SPEC\n-#define LIB_SPEC \\\n-\"%{mandroid: %(lib_android) ;\" \\\n-\"          : %(lib_default)}\"\n-\n-#undef ANDROID_STARTFILE_SPEC\n-#define ANDROID_STARTFILE_SPEC \\\n-\"%{!shared:\" \\\n-   \"%{static: crtbegin_static%O%s ;\" \\\n-   \"        : crtbegin_dynamic%O%s}}\"\n-\n-/* Override STARTFILE_SPEC in unknown-elf.h. */\n-#undef STARTFILE_SPEC\n-#define STARTFILE_SPEC \\\n-\"%{mandroid: %(startfile_android) ;\" \\\n-\"          : %(startfile_default)}\"\n-\n-#undef ANDROID_ENDFILE_SPEC\n-#define ANDROID_ENDFILE_SPEC\t\"%{!shared:crtend_android%O%s}\"\n-\n-/* Override ENDFILE_SPEC in unknown-elf.h. */\n-#undef ENDFILE_SPEC\n-#define ENDFILE_SPEC \\\n-\"%{mandroid: %(endfile_android) ;\" \\\n-\"          : %(endfile_default)}\"\n-"}, {"sha": "e69035e590dc139d8868d76ac25e5f76c2242661", "filename": "gcc/config/arm/linux-eabi.h", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b9db927f5dca75792b11cbc91266d6b842a6b2/gcc%2Fconfig%2Farm%2Flinux-eabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b9db927f5dca75792b11cbc91266d6b842a6b2/gcc%2Fconfig%2Farm%2Flinux-eabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-eabi.h?ref=51b9db927f5dca75792b11cbc91266d6b842a6b2", "patch": "@@ -66,7 +66,30 @@\n /* At this point, bpabi.h will have clobbered LINK_SPEC.  We want to\n    use the GNU/Linux version, not the generic BPABI version.  */\n #undef  LINK_SPEC\n-#define LINK_SPEC LINUX_TARGET_LINK_SPEC BE8_LINK_SPEC\n+#define LINK_SPEC BE8_LINK_SPEC\t\t\t\t\t\t\\\n+  LINUX_OR_ANDROID_LD (LINUX_TARGET_LINK_SPEC,\t\t\t\t\\\n+\t\t       LINUX_TARGET_LINK_SPEC \" \" ANDROID_LINK_SPEC)\n+\n+#undef  CC1_SPEC\n+#define CC1_SPEC\t\t\t\t\t\t\\\n+  LINUX_OR_ANDROID_CC (LINUX_TARGET_CC1_SPEC,\t\t\t\\\n+\t\t       LINUX_TARGET_CC1_SPEC \" \" ANDROID_CC1_SPEC)\n+\n+#define CC1PLUS_SPEC \\\n+  LINUX_OR_ANDROID_CC (\"\", ANDROID_CC1PLUS_SPEC)\n+\n+#undef  LIB_SPEC\n+#define LIB_SPEC\t\t\t\t\t\t\\\n+  LINUX_OR_ANDROID_LD (LINUX_TARGET_LIB_SPEC,\t\t\t\\\n+\t\t       LINUX_TARGET_LIB_SPEC \" \" ANDROID_LIB_SPEC)\n+\n+#undef\tSTARTFILE_SPEC\n+#define STARTFILE_SPEC \\\n+  LINUX_OR_ANDROID_LD (LINUX_TARGET_STARTFILE_SPEC, ANDROID_STARTFILE_SPEC)\n+\n+#undef\tENDFILE_SPEC\n+#define ENDFILE_SPEC \\\n+  LINUX_OR_ANDROID_LD (LINUX_TARGET_ENDFILE_SPEC, ANDROID_ENDFILE_SPEC)\n \n /* Use the default LIBGCC_SPEC, not the version in linux-elf.h, as we\n    do not use -lfloat.  */"}, {"sha": "a43bab5b0357145cba876fdedcfb4533f724d064", "filename": "gcc/config/linux-android.h", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b9db927f5dca75792b11cbc91266d6b842a6b2/gcc%2Fconfig%2Flinux-android.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b9db927f5dca75792b11cbc91266d6b842a6b2/gcc%2Fconfig%2Flinux-android.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux-android.h?ref=51b9db927f5dca75792b11cbc91266d6b842a6b2", "patch": "@@ -0,0 +1,54 @@\n+/* Configuration file for Linux Android targets.\n+   Copyright (C) 2008, 2010\n+   Free Software Foundation, Inc.\n+   Contributed by Doug Kwan (dougkwan@google.com)\n+   Rewritten by CodeSourcery, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#if ANDROID_DEFAULT\n+# define NOANDROID \"mno-android\"\n+#else\n+# define NOANDROID \"!mandroid\"\n+#endif\n+\n+#define LINUX_OR_ANDROID_CC(LINUX_SPEC, ANDROID_SPEC) \\\n+  \"%{\" NOANDROID \"|tno-android-cc:\" LINUX_SPEC \";:\" ANDROID_SPEC \"}\"\n+\n+#define LINUX_OR_ANDROID_LD(LINUX_SPEC, ANDROID_SPEC) \\\n+  \"%{\" NOANDROID \"|tno-android-ld:\" LINUX_SPEC \";:\" ANDROID_SPEC \"}\"\n+\n+#define ANDROID_LINK_SPEC \\\n+  \"%{shared: -Bsymbolic}\"\n+\n+#define ANDROID_CC1_SPEC\t\t\t\t\t\t\\\n+  \"%{!mglibc:%{!muclibc:%{!mbionic: -mbionic}}} \"\t\t\t\\\n+  \"%{!fno-pic:%{!fno-PIC:%{!fpic:%{!fPIC: -fPIC}}}}\"\n+\n+#define ANDROID_CC1PLUS_SPEC\t\t\t\t\t\t\\\n+  \"%{!fexceptions:%{!fno-exceptions: -fno-exceptions}} \"\t\t\\\n+  \"%{!frtti:%{!fno-rtti: -fno-rtti}}\"\n+\n+#define ANDROID_LIB_SPEC \\\n+  \"%{!static: -ldl}\"\n+\n+#define ANDROID_STARTFILE_SPEC\t\t\t\t\t\t\\\n+  \"%{!shared:\"\t\t\t\t\t\t\t\t\\\n+  \"  %{static: crtbegin_static%O%s;: crtbegin_dynamic%O%s}}\"\n+\n+#define ANDROID_ENDFILE_SPEC \\\n+  \"%{!shared: crtend_android%O%s}\""}, {"sha": "ad659caf0d192361e3024bc4672f8fe98f1ac22d", "filename": "gcc/config/linux-android.opt", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b9db927f5dca75792b11cbc91266d6b842a6b2/gcc%2Fconfig%2Flinux-android.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b9db927f5dca75792b11cbc91266d6b842a6b2/gcc%2Fconfig%2Flinux-android.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux-android.opt?ref=51b9db927f5dca75792b11cbc91266d6b842a6b2", "patch": "@@ -1,6 +1,6 @@\n-; EABI specific options for ARM port of the compiler.\n+; Android specific options.\n \n-; Copyright (C) 2008 Free Software Foundation, Inc.\n+; Copyright (C) 2008, 2010 Free Software Foundation, Inc.\n ;\n ; This file is part of GCC.\n ;\n@@ -19,5 +19,5 @@\n ; <http://www.gnu.org/licenses/>.\n \n mandroid\n-Target Report RejectNegative Mask(ANDROID)\n-Generate code for the Android operating system.\n+Target Report Mask(ANDROID) Var(flag_android) Init(ANDROID_DEFAULT ? OPTION_MASK_ANDROID : 0)\n+Generate code for the Android platform.", "previous_filename": "gcc/config/arm/eabi.opt"}, {"sha": "241e65668f015abb18cfb61bd6eb7fc4093d71f7", "filename": "gcc/config/linux.h", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b9db927f5dca75792b11cbc91266d6b842a6b2/gcc%2Fconfig%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b9db927f5dca75792b11cbc91266d6b842a6b2/gcc%2Fconfig%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux.h?ref=51b9db927f5dca75792b11cbc91266d6b842a6b2", "patch": "@@ -42,41 +42,45 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    provides part of the support for getting C++ file-scope static\n    object constructed before entering `main'.  */\n    \n-#undef\tSTARTFILE_SPEC\n #if defined HAVE_LD_PIE\n-#define STARTFILE_SPEC \\\n+#define LINUX_TARGET_STARTFILE_SPEC \\\n   \"%{!shared: %{pg|p|profile:gcrt1.o%s;pie:Scrt1.o%s;:crt1.o%s}} \\\n    crti.o%s %{static:crtbeginT.o%s;shared|pie:crtbeginS.o%s;:crtbegin.o%s}\"\n #else\n-#define STARTFILE_SPEC \\\n+#define LINUX_TARGET_STARTFILE_SPEC \\\n   \"%{!shared: %{pg|p|profile:gcrt1.o%s;:crt1.o%s}} \\\n    crti.o%s %{static:crtbeginT.o%s;shared|pie:crtbeginS.o%s;:crtbegin.o%s}\"\n #endif\n+#undef  STARTFILE_SPEC\n+#define STARTFILE_SPEC LINUX_TARGET_STARTFILE_SPEC\n \n /* Provide a ENDFILE_SPEC appropriate for GNU/Linux.  Here we tack on\n    the GNU/Linux magical crtend.o file (see crtstuff.c) which\n    provides part of the support for getting C++ file-scope static\n    object constructed before entering `main', followed by a normal\n    GNU/Linux \"finalizer\" file, `crtn.o'.  */\n \n-#undef\tENDFILE_SPEC\n-#define ENDFILE_SPEC \\\n+#define LINUX_TARGET_ENDFILE_SPEC \\\n   \"%{shared|pie:crtendS.o%s;:crtend.o%s} crtn.o%s\"\n+#undef  ENDFILE_SPEC\n+#define ENDFILE_SPEC LINUX_TARGET_ENDFILE_SPEC\n \n /* This is for -profile to use -lc_p instead of -lc.  */\n+#define LINUX_TARGET_CC1_SPEC \"%{profile:-p}\"\n #ifndef CC1_SPEC\n-#define CC1_SPEC \"%{profile:-p}\"\n+#define CC1_SPEC LINUX_TARGET_CC1_SPEC\n #endif\n \n /* The GNU C++ standard library requires that these macros be defined.  */\n #undef CPLUSPLUS_CPP_SPEC\n #define CPLUSPLUS_CPP_SPEC \"-D_GNU_SOURCE %(cpp)\"\n \n-#undef\tLIB_SPEC\n-#define LIB_SPEC \\\n+#define LINUX_TARGET_LIB_SPEC \\\n   \"%{pthread:-lpthread} \\\n    %{shared:-lc} \\\n    %{!shared:%{mieee-fp:-lieee} %{profile:-lc_p}%{!profile:-lc}}\"\n+#undef  LIB_SPEC\n+#define LIB_SPEC LINUX_TARGET_LIB_SPEC\n \n /* C libraries supported on Linux.  */\n #define OPTION_GLIBC  (linux_libc == LIBC_GLIBC)\n@@ -92,6 +96,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \tbuiltin_assert (\"system=linux\");\t\t\t\\\n \tbuiltin_assert (\"system=unix\");\t\t\t\t\\\n \tbuiltin_assert (\"system=posix\");\t\t\t\\\n+\tif (OPTION_ANDROID)\t\t\t\t\t\\\n+\t  builtin_define (\"__ANDROID__\");\t\t\t\\\n     } while (0)\n \n #if defined(HAVE_LD_EH_FRAME_HDR)"}, {"sha": "baa8e88f34827f56172e6e4bb3beedd98f477cc7", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b9db927f5dca75792b11cbc91266d6b842a6b2/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b9db927f5dca75792b11cbc91266d6b842a6b2/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=51b9db927f5dca75792b11cbc91266d6b842a6b2", "patch": "@@ -559,7 +559,8 @@ Objective-C and Objective-C++ Dialects}.\n -mcpu=@var{cpu}}\n \n @emph{GNU/Linux Options}\n-@gccoptlist{-muclibc}\n+@gccoptlist{-mglibc -muclibc -mbionic -mandroid @gol\n+-tno-android-cc -tno-android-ld}\n \n @emph{H8/300 Options}\n @gccoptlist{-mrelax  -mh  -ms  -mn  -mint32  -malign-300}\n@@ -11489,6 +11490,29 @@ Use uClibc C library.  This is the default on\n @opindex mbionic\n Use Bionic C library.  This is the default on\n @samp{*-*-linux-*android*} targets.\n+\n+@item -mandroid\n+@opindex mandroid\n+Compile code compatible with Android platform.  This is the default on\n+@samp{*-*-linux-*android*} targets.\n+\n+When compiling, this option enables @option{-mbionic}, @option{-fPIC},\n+@option{-fno-exceptions} and @option{-fno-rtti} by default.  When linking,\n+this option makes the GCC driver pass Android-specific options to the linker.\n+Finally, this option causes the preprocessor macro @code{__ANDROID__}\n+to be defined.\n+\n+@item -tno-android-cc\n+@opindex tno-android-cc\n+Disable compilation effects of @option{-mandroid}, i.e., do not enable\n+@option{-mbionic}, @option{-fPIC}, @option{-fno-exceptions} and\n+@option{-fno-rtti} by default.\n+\n+@item -tno-android-ld\n+@opindex tno-android-ld\n+Disable linking effects of @option{-mandroid}, i.e., pass standard Linux\n+linking options to the linker.\n+\n @end table\n \n @node H8/300 Options"}]}