{"sha": "f5e6686534eab43fb0b9e6807b9489958a12c74e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVlNjY4NjUzNGVhYjQzZmIwYjllNjgwN2I5NDg5OTU4YTEyYzc0ZQ==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2009-06-26T00:40:55Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2009-06-26T00:40:55Z"}, "message": "re PR target/40468 (FAIL: gcc.c-torture/execute/20061031-1.c execution,  -Os)\n\n\tPR target/40468\n\t* pa.c (branch_to_delay_slot_p, branch_needs_nop_p): New functions.\n\t(output_cbranch): Use new functions.\n\t(output_lbranch, output_bb, output_bvb, output_dbra, output_movb):\n\tLikewise.\n\nFrom-SVN: r148959", "tree": {"sha": "f38de5e8497b766b594aec7bc2ebb9b13a007acb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f38de5e8497b766b594aec7bc2ebb9b13a007acb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5e6686534eab43fb0b9e6807b9489958a12c74e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5e6686534eab43fb0b9e6807b9489958a12c74e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5e6686534eab43fb0b9e6807b9489958a12c74e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5e6686534eab43fb0b9e6807b9489958a12c74e/comments", "author": null, "committer": null, "parents": [{"sha": "9218bba42b6f57d8eb5ade01fd0c0fda9a57d3b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9218bba42b6f57d8eb5ade01fd0c0fda9a57d3b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9218bba42b6f57d8eb5ade01fd0c0fda9a57d3b2"}], "stats": {"total": 103, "additions": 89, "deletions": 14}, "files": [{"sha": "5702f6727b11cde8d626945156faf73322c617bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e6686534eab43fb0b9e6807b9489958a12c74e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e6686534eab43fb0b9e6807b9489958a12c74e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5e6686534eab43fb0b9e6807b9489958a12c74e", "patch": "@@ -1,3 +1,11 @@\n+2009-06-25  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\tPR target/40468\n+\t* pa.c (branch_to_delay_slot_p, branch_needs_nop_p): New functions.\n+\t(output_cbranch): Use new functions.\n+\t(output_lbranch, output_bb, output_bvb, output_dbra, output_movb):\n+\tLikewise.\n+\n 2009-06-25  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \t    Pat Haugen  <pthaugen@us.ibm.com>\n \t    Revital Eres <ERES@il.ibm.com>"}, {"sha": "0d03ff52615fea6f388546fcb846ce3edfe080d2", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 81, "deletions": 14, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e6686534eab43fb0b9e6807b9489958a12c74e/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e6686534eab43fb0b9e6807b9489958a12c74e/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=f5e6686534eab43fb0b9e6807b9489958a12c74e", "patch": "@@ -6086,6 +6086,38 @@ pa_scalar_mode_supported_p (enum machine_mode mode)\n     }\n }\n \n+/* Return TRUE if INSN, a jump insn, has an unfilled delay slot and\n+   it branches to the next real instruction.  Otherwise, return FALSE.  */\n+\n+static bool\n+branch_to_delay_slot_p (rtx insn)\n+{\n+  if (dbr_sequence_length ())\n+    return FALSE;\n+\n+  return next_real_insn (JUMP_LABEL (insn)) == next_real_insn (insn);\n+}\n+\n+/* Return TRUE if INSN, a jump insn, needs a nop in its delay slot.\n+\n+   This occurs when INSN has an unfilled delay slot and is followed\n+   by an ASM_INPUT.  Disaster can occur if the ASM_INPUT is empty and\n+   the jump branches into the delay slot.  So, we add a nop in the delay\n+   slot just to be safe.  This messes up our instruction count, but we\n+   don't know how big the ASM_INPUT insn is anyway.  */\n+\n+static bool\n+branch_needs_nop_p (rtx insn)\n+{\n+  rtx next_insn;\n+\n+  if (dbr_sequence_length ())\n+    return FALSE;\n+\n+  next_insn = next_real_insn (insn);\n+  return GET_CODE (PATTERN (next_insn)) == ASM_INPUT;\n+}\n+\n /* This routine handles all the normal conditional branch sequences we\n    might need to generate.  It handles compare immediate vs compare\n    register, nullification of delay slots, varying length branches,\n@@ -6111,7 +6143,7 @@ output_cbranch (rtx *operands, int negated, rtx insn)\n      slot and the same branch target as this branch.  We could check\n      for this but jump optimization should eliminate nop jumps.  It\n      is always safe to emit a nop.  */\n-  if (next_real_insn (JUMP_LABEL (insn)) == next_real_insn (insn))\n+  if (branch_to_delay_slot_p (insn))\n     return \"nop\";\n \n   /* The doubleword form of the cmpib instruction doesn't have the LEU\n@@ -6160,7 +6192,12 @@ output_cbranch (rtx *operands, int negated, rtx insn)\n \tif (useskip)\n \t  strcat (buf, \" %2,%r1,%%r0\");\n \telse if (nullify)\n-\t  strcat (buf, \",n %2,%r1,%0\");\n+\t  {\n+\t    if (branch_needs_nop_p (insn))\n+\t      strcat (buf, \",n %2,%r1,%0%#\");\n+\t    else\n+\t      strcat (buf, \",n %2,%r1,%0\");\n+\t  }\n \telse\n \t  strcat (buf, \" %2,%r1,%0\");\n \tbreak;\n@@ -6433,7 +6470,7 @@ output_bb (rtx *operands ATTRIBUTE_UNUSED, int negated, rtx insn, int which)\n      is only used when optimizing; jump optimization should eliminate the\n      jump.  But be prepared just in case.  */\n \n-  if (next_real_insn (JUMP_LABEL (insn)) == next_real_insn (insn))\n+  if (branch_to_delay_slot_p (insn))\n     return \"nop\";\n \n   /* If this is a long branch with its delay slot unfilled, set `nullify'\n@@ -6479,11 +6516,21 @@ output_bb (rtx *operands ATTRIBUTE_UNUSED, int negated, rtx insn, int which)\n \tif (useskip)\n \t  strcat (buf, \" %0,%1,1,%%r0\");\n \telse if (nullify && negated)\n-\t  strcat (buf, \",n %0,%1,%3\");\n+\t  {\n+\t    if (branch_needs_nop_p (insn))\n+\t      strcat (buf, \",n %0,%1,%3%#\");\n+\t    else\n+\t      strcat (buf, \",n %0,%1,%3\");\n+\t  }\n \telse if (nullify && ! negated)\n-\t  strcat (buf, \",n %0,%1,%2\");\n+\t  {\n+\t    if (branch_needs_nop_p (insn))\n+\t      strcat (buf, \",n %0,%1,%2%#\");\n+\t    else\n+\t      strcat (buf, \",n %0,%1,%2\");\n+\t  }\n \telse if (! nullify && negated)\n-\t  strcat (buf, \"%0,%1,%3\");\n+\t  strcat (buf, \" %0,%1,%3\");\n \telse if (! nullify && ! negated)\n \t  strcat (buf, \" %0,%1,%2\");\n \tbreak;\n@@ -6614,7 +6661,7 @@ output_bvb (rtx *operands ATTRIBUTE_UNUSED, int negated, rtx insn, int which)\n      is only used when optimizing; jump optimization should eliminate the\n      jump.  But be prepared just in case.  */\n \n-  if (next_real_insn (JUMP_LABEL (insn)) == next_real_insn (insn))\n+  if (branch_to_delay_slot_p (insn))\n     return \"nop\";\n \n   /* If this is a long branch with its delay slot unfilled, set `nullify'\n@@ -6660,11 +6707,21 @@ output_bvb (rtx *operands ATTRIBUTE_UNUSED, int negated, rtx insn, int which)\n \tif (useskip)\n \t  strcat (buf, \"{ %0,1,%%r0| %0,%%sar,1,%%r0}\");\n \telse if (nullify && negated)\n-\t  strcat (buf, \"{,n %0,%3|,n %0,%%sar,%3}\");\n+\t  {\n+\t    if (branch_needs_nop_p (insn))\n+\t      strcat (buf, \"{,n %0,%3%#|,n %0,%%sar,%3%#}\");\n+\t    else\n+\t      strcat (buf, \"{,n %0,%3|,n %0,%%sar,%3}\");\n+\t  }\n \telse if (nullify && ! negated)\n-\t  strcat (buf, \"{,n %0,%2|,n %0,%%sar,%2}\");\n+\t  {\n+\t    if (branch_needs_nop_p (insn))\n+\t      strcat (buf, \"{,n %0,%2%#|,n %0,%%sar,%2%#}\");\n+\t    else\n+\t      strcat (buf, \"{,n %0,%2|,n %0,%%sar,%2}\");\n+\t  }\n \telse if (! nullify && negated)\n-\t  strcat (buf, \"{%0,%3|%0,%%sar,%3}\");\n+\t  strcat (buf, \"{ %0,%3| %0,%%sar,%3}\");\n \telse if (! nullify && ! negated)\n \t  strcat (buf, \"{ %0,%2| %0,%%sar,%2}\");\n \tbreak;\n@@ -6786,7 +6843,7 @@ output_dbra (rtx *operands, rtx insn, int which_alternative)\n   /* A conditional branch to the following instruction (e.g. the delay slot) is\n      asking for a disaster.  Be prepared!  */\n \n-  if (next_real_insn (JUMP_LABEL (insn)) == next_real_insn (insn))\n+  if (branch_to_delay_slot_p (insn))\n     {\n       if (which_alternative == 0)\n \treturn \"ldo %1(%0),%0\";\n@@ -6823,7 +6880,12 @@ output_dbra (rtx *operands, rtx insn, int which_alternative)\n \t{\n \tcase 4:\n \t  if (nullify)\n-\t    return \"addib,%C2,n %1,%0,%3\";\n+\t    {\n+\t      if (branch_needs_nop_p (insn))\n+\t\treturn \"addib,%C2,n %1,%0,%3%#\";\n+\t      else\n+\t\treturn \"addib,%C2,n %1,%0,%3\";\n+\t    }\n \t  else\n \t    return \"addib,%C2 %1,%0,%3\";\n       \n@@ -6931,7 +6993,7 @@ output_movb (rtx *operands, rtx insn, int which_alternative,\n   /* A conditional branch to the following instruction (e.g. the delay slot) is\n      asking for a disaster.  Be prepared!  */\n \n-  if (next_real_insn (JUMP_LABEL (insn)) == next_real_insn (insn))\n+  if (branch_to_delay_slot_p (insn))\n     {\n       if (which_alternative == 0)\n \treturn \"copy %1,%0\";\n@@ -6969,7 +7031,12 @@ output_movb (rtx *operands, rtx insn, int which_alternative,\n \t{\n \tcase 4:\n \t  if (nullify)\n-\t    return \"movb,%C2,n %1,%0,%3\";\n+\t    {\n+\t      if (branch_needs_nop_p (insn))\n+\t\treturn \"movb,%C2,n %1,%0,%3%#\";\n+\t      else\n+\t\treturn \"movb,%C2,n %1,%0,%3\";\n+\t    }\n \t  else\n \t    return \"movb,%C2 %1,%0,%3\";\n "}]}