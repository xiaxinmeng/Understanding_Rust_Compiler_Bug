{"sha": "af1634f1b555004753a22d1124dbb8419ee095cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYxNjM0ZjFiNTU1MDA0NzUzYTIyZDExMjRkYmI4NDE5ZWUwOTVjYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-05-08T07:30:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-05-08T07:30:54Z"}, "message": "csa: Fix --enable-checking=yes,df bootstrap failure in csa [PR94961]\n\nMy recent combine-stack-adj.c change broke df checking bootstrap,\nwhile most of the changes are done through validate_change/confirm_changes\nwhich update df info, the removal of REG_EQUAL notes didn't update df info.\n\n2020-05-08  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR bootstrap/94961\n\tPR rtl-optimization/94516\n\t* rtl.h (remove_reg_equal_equiv_notes): Add a bool argument defaulted\n\tto false.\n\t* rtlanal.c (remove_reg_equal_equiv_notes): Add no_rescan argument.\n\tCall df_notes_rescan if that argument is not true and returning true.\n\t* combine.c (adjust_for_new_dest): Pass true as second argument to\n\tremove_reg_equal_equiv_notes.\n\t* postreload.c (reload_combine_recognize_pattern): Don't call\n\tdf_notes_rescan.", "tree": {"sha": "0248c89291a324cd6af2806c61e8c29b6b6f95ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0248c89291a324cd6af2806c61e8c29b6b6f95ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af1634f1b555004753a22d1124dbb8419ee095cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af1634f1b555004753a22d1124dbb8419ee095cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af1634f1b555004753a22d1124dbb8419ee095cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af1634f1b555004753a22d1124dbb8419ee095cb/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88fdafb10608c8d01048f91213d67669988d62f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88fdafb10608c8d01048f91213d67669988d62f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88fdafb10608c8d01048f91213d67669988d62f4"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "27f6ea4f97f39ebbd551ed141e7cdfff1fe1a480", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af1634f1b555004753a22d1124dbb8419ee095cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af1634f1b555004753a22d1124dbb8419ee095cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af1634f1b555004753a22d1124dbb8419ee095cb", "patch": "@@ -1,3 +1,16 @@\n+2020-05-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR bootstrap/94961\n+\tPR rtl-optimization/94516\n+\t* rtl.h (remove_reg_equal_equiv_notes): Add a bool argument defaulted\n+\tto false.\n+\t* rtlanal.c (remove_reg_equal_equiv_notes): Add no_rescan argument.\n+\tCall df_notes_rescan if that argument is not true and returning true.\n+\t* combine.c (adjust_for_new_dest): Pass true as second argument to\n+\tremove_reg_equal_equiv_notes.\n+\t* postreload.c (reload_combine_recognize_pattern): Don't call\n+\tdf_notes_rescan.\n+\n 2020-05-07  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.md (*setnbc_<un>signed_<GPR:mode>): New"}, {"sha": "b044f29fd36b37b4da74dea971ce521403cc870c", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af1634f1b555004753a22d1124dbb8419ee095cb/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af1634f1b555004753a22d1124dbb8419ee095cb/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=af1634f1b555004753a22d1124dbb8419ee095cb", "patch": "@@ -2459,7 +2459,7 @@ static void\n adjust_for_new_dest (rtx_insn *insn)\n {\n   /* For notes, be conservative and simply remove them.  */\n-  remove_reg_equal_equiv_notes (insn);\n+  remove_reg_equal_equiv_notes (insn, true);\n \n   /* The new insn will have a destination that was previously the destination\n      of an insn just above it.  Call distribute_links to make a LOG_LINK from"}, {"sha": "f625828502248f74f9fd88f6383e6e04b02a0cb8", "filename": "gcc/postreload.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af1634f1b555004753a22d1124dbb8419ee095cb/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af1634f1b555004753a22d1124dbb8419ee095cb/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=af1634f1b555004753a22d1124dbb8419ee095cb", "patch": "@@ -1223,11 +1223,10 @@ reload_combine_recognize_pattern (rtx_insn *insn)\n \t      /* Delete the reg-reg addition.  */\n \t      delete_insn (insn);\n \n-\t      if (reg_state[regno].offset != const0_rtx\n-\t\t  /* Previous REG_EQUIV / REG_EQUAL notes for PREV\n-\t\t     are now invalid.  */\n-\t\t  && remove_reg_equal_equiv_notes (prev))\n-\t\tdf_notes_rescan (prev);\n+\t      if (reg_state[regno].offset != const0_rtx)\n+\t\t/* Previous REG_EQUIV / REG_EQUAL notes for PREV\n+\t\t   are now invalid.  */\n+\t\tremove_reg_equal_equiv_notes (prev);\n \n \t      reg_state[regno].use_index = RELOAD_COMBINE_MAX_USES;\n \t      return true;"}, {"sha": "b0b1aacd2e8ff4155a7ed49e53a0f061eaba3361", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af1634f1b555004753a22d1124dbb8419ee095cb/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af1634f1b555004753a22d1124dbb8419ee095cb/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=af1634f1b555004753a22d1124dbb8419ee095cb", "patch": "@@ -3500,7 +3500,7 @@ extern void add_args_size_note (rtx_insn *, poly_int64);\n extern void add_shallow_copy_of_reg_note (rtx_insn *, rtx);\n extern rtx duplicate_reg_note (rtx);\n extern void remove_note (rtx_insn *, const_rtx);\n-extern bool remove_reg_equal_equiv_notes (rtx_insn *);\n+extern bool remove_reg_equal_equiv_notes (rtx_insn *, bool = false);\n extern void remove_reg_equal_equiv_notes_for_regno (unsigned int);\n extern int side_effects_p (const_rtx);\n extern int volatile_refs_p (const_rtx);"}, {"sha": "9ff17caaba0ddb55fcbf4ba5f9996bac038cb3f8", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af1634f1b555004753a22d1124dbb8419ee095cb/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af1634f1b555004753a22d1124dbb8419ee095cb/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=af1634f1b555004753a22d1124dbb8419ee095cb", "patch": "@@ -2480,10 +2480,11 @@ remove_note (rtx_insn *insn, const_rtx note)\n }\n \n /* Remove REG_EQUAL and/or REG_EQUIV notes if INSN has such notes.\n-   Return true if any note has been removed.  */\n+   If NO_RESCAN is false and any notes were removed, call\n+   df_notes_rescan.  Return true if any note has been removed.  */\n \n bool\n-remove_reg_equal_equiv_notes (rtx_insn *insn)\n+remove_reg_equal_equiv_notes (rtx_insn *insn, bool no_rescan)\n {\n   rtx *loc;\n   bool ret = false;\n@@ -2500,6 +2501,8 @@ remove_reg_equal_equiv_notes (rtx_insn *insn)\n       else\n \tloc = &XEXP (*loc, 1);\n     }\n+  if (ret && !no_rescan)\n+    df_notes_rescan (insn);\n   return ret;\n }\n "}]}