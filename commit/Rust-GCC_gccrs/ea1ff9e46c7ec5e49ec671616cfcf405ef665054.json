{"sha": "ea1ff9e46c7ec5e49ec671616cfcf405ef665054", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWExZmY5ZTQ2YzdlYzVlNDllYzY3MTYxNmNmY2Y0MDVlZjY2NTA1NA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-12-06T10:31:44Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-12-06T10:31:44Z"}, "message": "Avoid quadratic behaviour in prune_runtime_alias_test_list\n\nprune_runtime_alias_test_list used ordered_remove to remove a merged\nalias pair, which made the function quadratic when many aliases could\nbe removed.\n\nI had a testcase in which these memmoves accounted for an impressive\n85% of compile time.  The fact that we had so many probably shows\na deeper problem, but still, it's easy to remove as we go.\n\n2019-12-06  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-data-ref.c (prune_runtime_alias_test_list): Exit early\n\tfor empty vectors.  Avoid using ordered_remove and instead\n\tshuffle the vector as we go.\n\nFrom-SVN: r279038", "tree": {"sha": "4a101e644378f764e68b9aeb0c38993ec6c4d243", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a101e644378f764e68b9aeb0c38993ec6c4d243"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea1ff9e46c7ec5e49ec671616cfcf405ef665054", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea1ff9e46c7ec5e49ec671616cfcf405ef665054", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea1ff9e46c7ec5e49ec671616cfcf405ef665054", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea1ff9e46c7ec5e49ec671616cfcf405ef665054/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "28fabd43d9d249134244eb9d7815917c7ae44b64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28fabd43d9d249134244eb9d7815917c7ae44b64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28fabd43d9d249134244eb9d7815917c7ae44b64"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "68da94ae735ee0dc19a49a4f206d6b0c50142243", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea1ff9e46c7ec5e49ec671616cfcf405ef665054/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea1ff9e46c7ec5e49ec671616cfcf405ef665054/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea1ff9e46c7ec5e49ec671616cfcf405ef665054", "patch": "@@ -1,3 +1,9 @@\n+2019-12-06  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-data-ref.c (prune_runtime_alias_test_list): Exit early\n+\tfor empty vectors.  Avoid using ordered_remove and instead\n+\tshuffle the vector as we go.\n+\n 2019-12-06  Richard Biener  <rguenther@suse.de>\n \n \t* genmatch.c (enum tree_code): Remove CONVERT{0,1,2} and"}, {"sha": "7ef891de5e985299dd8a5a2ee3af28f2aa19de37", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea1ff9e46c7ec5e49ec671616cfcf405ef665054/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea1ff9e46c7ec5e49ec671616cfcf405ef665054/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=ea1ff9e46c7ec5e49ec671616cfcf405ef665054", "patch": "@@ -1535,6 +1535,9 @@ void\n prune_runtime_alias_test_list (vec<dr_with_seg_len_pair_t> *alias_pairs,\n \t\t\t       poly_uint64)\n {\n+  if (alias_pairs->is_empty ())\n+    return;\n+\n   /* Canonicalize each pair so that the base components are ordered wrt\n      data_ref_compare_tree.  This allows the loop below to merge more\n      cases.  */\n@@ -1565,10 +1568,11 @@ prune_runtime_alias_test_list (vec<dr_with_seg_len_pair_t> *alias_pairs,\n \n   /* Scan the sorted dr pairs and check if we can combine alias checks\n      of two neighboring dr pairs.  */\n+  unsigned int last = 0;\n   for (i = 1; i < alias_pairs->length (); ++i)\n     {\n       /* Deal with two ddrs (dr_a1, dr_b1) and (dr_a2, dr_b2).  */\n-      dr_with_seg_len_pair_t *alias_pair1 = &(*alias_pairs)[i - 1];\n+      dr_with_seg_len_pair_t *alias_pair1 = &(*alias_pairs)[last];\n       dr_with_seg_len_pair_t *alias_pair2 = &(*alias_pairs)[i];\n \n       dr_with_seg_len *dr_a1 = &alias_pair1->first;\n@@ -1584,10 +1588,15 @@ prune_runtime_alias_test_list (vec<dr_with_seg_len_pair_t> *alias_pairs,\n \t\t\t DR_REF (dr_a1->dr), DR_REF (dr_b1->dr),\n \t\t\t DR_REF (dr_a2->dr), DR_REF (dr_b2->dr));\n \t  alias_pair1->flags |= alias_pair2->flags;\n-\t  alias_pairs->ordered_remove (i--);\n \t  continue;\n \t}\n \n+      /* Assume that we won't be able to merge the pairs, then correct\n+\t if we do.  */\n+      last += 1;\n+      if (last != i)\n+\t(*alias_pairs)[last] = (*alias_pairs)[i];\n+\n       if (*dr_a1 == *dr_a2 || *dr_b1 == *dr_b2)\n \t{\n \t  /* We consider the case that DR_B1 and DR_B2 are same memrefs,\n@@ -1695,10 +1704,10 @@ prune_runtime_alias_test_list (vec<dr_with_seg_len_pair_t> *alias_pairs,\n \t\t\t DR_REF (dr_a1->dr), DR_REF (dr_b1->dr),\n \t\t\t DR_REF (dr_a2->dr), DR_REF (dr_b2->dr));\n \t  alias_pair1->flags |= alias_pair2->flags;\n-\t  alias_pairs->ordered_remove (i);\n-\t  i--;\n+\t  last -= 1;\n \t}\n     }\n+  alias_pairs->truncate (last + 1);\n \n   /* Try to restore the original dr_with_seg_len order within each\n      dr_with_seg_len_pair_t.  If we ended up combining swapped and"}]}