{"sha": "c4ae175881f773383f392ee39bad4ac1c0fa53ca", "node_id": "C_kwDOANBUbNoAKGM0YWUxNzU4ODFmNzczMzgzZjM5MmVlMzliYWQ0YWMxYzBmYTUzY2E", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-05T09:10:19Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-05-04T06:20:13Z"}, "message": "LTO plugin: modernize a bit.\n\ninclude/ChangeLog:\n\n\t* plugin-api.h (enum ld_plugin_tag): Do not set implicit enum\n\tvalues.\n\nlto-plugin/ChangeLog:\n\n\t* lto-plugin.c (struct plugin_objfile): Use bool for offset\n\tfield.\n\t(exec_lto_wrapper): Assign true/false to bool variables.\n\t(process_offload_section): Likewise.\n\t(claim_file_handler): Likewise.\n\t(onload): Likewise.", "tree": {"sha": "683b759735163a4c4501c6f22e8d2f694300316f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/683b759735163a4c4501c6f22e8d2f694300316f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4ae175881f773383f392ee39bad4ac1c0fa53ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4ae175881f773383f392ee39bad4ac1c0fa53ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4ae175881f773383f392ee39bad4ac1c0fa53ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4ae175881f773383f392ee39bad4ac1c0fa53ca/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e66af28d9907321c14a34803bcf1cfdd350745b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e66af28d9907321c14a34803bcf1cfdd350745b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e66af28d9907321c14a34803bcf1cfdd350745b8"}], "stats": {"total": 87, "additions": 44, "deletions": 43}, "files": [{"sha": "8aebe2ff2678d02861b5388a9110185a7c9cab1f", "filename": "include/plugin-api.h", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4ae175881f773383f392ee39bad4ac1c0fa53ca/include%2Fplugin-api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4ae175881f773383f392ee39bad4ac1c0fa53ca/include%2Fplugin-api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fplugin-api.h?ref=c4ae175881f773383f392ee39bad4ac1c0fa53ca", "patch": "@@ -487,40 +487,40 @@ enum ld_plugin_level\n \n enum ld_plugin_tag\n {\n-  LDPT_NULL = 0,\n-  LDPT_API_VERSION = 1,\n-  LDPT_GOLD_VERSION = 2,\n-  LDPT_LINKER_OUTPUT = 3,\n-  LDPT_OPTION = 4,\n-  LDPT_REGISTER_CLAIM_FILE_HOOK = 5,\n-  LDPT_REGISTER_ALL_SYMBOLS_READ_HOOK = 6,\n-  LDPT_REGISTER_CLEANUP_HOOK = 7,\n-  LDPT_ADD_SYMBOLS = 8,\n-  LDPT_GET_SYMBOLS = 9,\n-  LDPT_ADD_INPUT_FILE = 10,\n-  LDPT_MESSAGE = 11,\n-  LDPT_GET_INPUT_FILE = 12,\n-  LDPT_RELEASE_INPUT_FILE = 13,\n-  LDPT_ADD_INPUT_LIBRARY = 14,\n-  LDPT_OUTPUT_NAME = 15,\n-  LDPT_SET_EXTRA_LIBRARY_PATH = 16,\n-  LDPT_GNU_LD_VERSION = 17,\n-  LDPT_GET_VIEW = 18,\n-  LDPT_GET_INPUT_SECTION_COUNT = 19,\n-  LDPT_GET_INPUT_SECTION_TYPE = 20,\n-  LDPT_GET_INPUT_SECTION_NAME = 21,\n-  LDPT_GET_INPUT_SECTION_CONTENTS = 22,\n-  LDPT_UPDATE_SECTION_ORDER = 23,\n-  LDPT_ALLOW_SECTION_ORDERING = 24,\n-  LDPT_GET_SYMBOLS_V2 = 25,\n-  LDPT_ALLOW_UNIQUE_SEGMENT_FOR_SECTIONS = 26,\n-  LDPT_UNIQUE_SEGMENT_FOR_SECTIONS = 27,\n-  LDPT_GET_SYMBOLS_V3 = 28,\n-  LDPT_GET_INPUT_SECTION_ALIGNMENT = 29,\n-  LDPT_GET_INPUT_SECTION_SIZE = 30,\n-  LDPT_REGISTER_NEW_INPUT_HOOK = 31,\n-  LDPT_GET_WRAP_SYMBOLS = 32,\n-  LDPT_ADD_SYMBOLS_V2 = 33\n+  LDPT_NULL,\n+  LDPT_API_VERSION,\n+  LDPT_GOLD_VERSION,\n+  LDPT_LINKER_OUTPUT,\n+  LDPT_OPTION,\n+  LDPT_REGISTER_CLAIM_FILE_HOOK,\n+  LDPT_REGISTER_ALL_SYMBOLS_READ_HOOK,\n+  LDPT_REGISTER_CLEANUP_HOOK,\n+  LDPT_ADD_SYMBOLS,\n+  LDPT_GET_SYMBOLS,\n+  LDPT_ADD_INPUT_FILE,\n+  LDPT_MESSAGE,\n+  LDPT_GET_INPUT_FILE,\n+  LDPT_RELEASE_INPUT_FILE,\n+  LDPT_ADD_INPUT_LIBRARY,\n+  LDPT_OUTPUT_NAME,\n+  LDPT_SET_EXTRA_LIBRARY_PATH,\n+  LDPT_GNU_LD_VERSION,\n+  LDPT_GET_VIEW,\n+  LDPT_GET_INPUT_SECTION_COUNT,\n+  LDPT_GET_INPUT_SECTION_TYPE,\n+  LDPT_GET_INPUT_SECTION_NAME,\n+  LDPT_GET_INPUT_SECTION_CONTENTS,\n+  LDPT_UPDATE_SECTION_ORDER,\n+  LDPT_ALLOW_SECTION_ORDERING,\n+  LDPT_GET_SYMBOLS_V2,\n+  LDPT_ALLOW_UNIQUE_SEGMENT_FOR_SECTIONS,\n+  LDPT_UNIQUE_SEGMENT_FOR_SECTIONS,\n+  LDPT_GET_SYMBOLS_V3,\n+  LDPT_GET_INPUT_SECTION_ALIGNMENT,\n+  LDPT_GET_INPUT_SECTION_SIZE,\n+  LDPT_REGISTER_NEW_INPUT_HOOK,\n+  LDPT_GET_WRAP_SYMBOLS,\n+  LDPT_ADD_SYMBOLS_V2,\n };\n \n /* The plugin transfer vector.  */"}, {"sha": "47378435612aee920cd6cdd459a7d9fcdfb33602", "filename": "lto-plugin/lto-plugin.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4ae175881f773383f392ee39bad4ac1c0fa53ca/lto-plugin%2Flto-plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4ae175881f773383f392ee39bad4ac1c0fa53ca/lto-plugin%2Flto-plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Flto-plugin.c?ref=c4ae175881f773383f392ee39bad4ac1c0fa53ca", "patch": "@@ -122,7 +122,7 @@ struct plugin_symtab\n struct plugin_objfile\n {\n   int found;\n-  int offload;\n+  bool offload;\n   simple_object_read *objfile;\n   struct plugin_symtab *out;\n   const struct ld_plugin_input_file *file;\n@@ -205,7 +205,7 @@ static const char *link_output_name = NULL;\n \n /* This indicates link_output_name already contains the dot of the\n    suffix, so we can skip it in extensions.  */\n-static int skip_in_suffix = 0;\n+static bool skip_in_suffix = false;\n \n /* The version of gold being used, or -1 if not gold.  The number is\n    MAJOR * 100 + MINOR.  */\n@@ -636,7 +636,8 @@ exec_lto_wrapper (char *argv[])\n   /* Write argv to a file to avoid a command line that is too long\n      Save the file locally on save-temps.  */\n   const char *suffix = \".lto_wrapper_args\";\n-  suffix += skip_in_suffix;\n+  if (skip_in_suffix)\n+    suffix++;\n   if (save_temps && link_output_name)\n     arguments_file_name = concat (link_output_name, suffix, NULL);\n   else\n@@ -1139,7 +1140,7 @@ process_offload_section (void *data, const char *name, off_t offset, off_t len)\n   if (startswith (name, \".gnu.offload_lto_.opts\"))\n     {\n       struct plugin_objfile *obj = (struct plugin_objfile *) data;\n-      obj->offload = 1;\n+      obj->offload = true;\n       return 0;\n     }\n \n@@ -1182,7 +1183,7 @@ claim_file_handler (const struct ld_plugin_input_file *file, int *claimed)\n   *claimed = 0;\n   obj.file = file;\n   obj.found = 0;\n-  obj.offload = 0;\n+  obj.offload = false;\n   obj.out = &lto_file.symtab;\n   errmsg = NULL;\n   obj.objfile = simple_object_start_read (file->fd, file->offset, LTO_SEGMENT_NAME,\n@@ -1220,7 +1221,7 @@ claim_file_handler (const struct ld_plugin_input_file *file, int *claimed)\n     simple_object_find_sections (obj.objfile, process_offload_section,\n \t\t\t\t &obj, &err);\n \n-  if (obj.found == 0 && obj.offload == 0)\n+  if (obj.found == 0 && !obj.offload)\n     goto err;\n \n   if (obj.found > 1)\n@@ -1257,10 +1258,10 @@ claim_file_handler (const struct ld_plugin_input_file *file, int *claimed)\n   /* If this is an LTO file without offload, and it is the first LTO file, save\n      the pointer to the last offload file in the list.  Further offload LTO\n      files will be inserted after it, if any.  */\n-  if (*claimed && obj.offload == 0 && offload_files_last_lto == NULL)\n+  if (*claimed && !obj.offload && offload_files_last_lto == NULL)\n     offload_files_last_lto = offload_files_last;\n \n-  if (obj.offload == 1)\n+  if (obj.offload)\n     {\n       /* Add file to the list.  The order must be exactly the same as the final\n \t order after recompilation and linking, otherwise host and target tables\n@@ -1547,7 +1548,7 @@ onload (struct ld_plugin_tv *tv)\n \t  assert (escapes == 0);\n \t  assert (ticks == oddticks);\n \t  assert (q - link_output_name == len - 1);\n-\t  skip_in_suffix = 1;\n+\t  skip_in_suffix = true;\n \t}\n     }\n "}]}