{"sha": "02f52e19231d05b9aaf63c8d873ce0930579ccb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJmNTJlMTkyMzFkMDViOWFhZjYzYzhkODczY2UwOTMwNTc5Y2NiNg==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@suse.de", "date": "2001-04-28T11:35:04Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2001-04-28T11:35:04Z"}, "message": "invoke.texi: Use XX-bit instead of XXbit or XX bit where appropriate.\n\n\t* invoke.texi: Use XX-bit instead of XXbit or XX bit where\n\tappropriate.\n\t* extend.texi: Likewise.\n\t* tm.texi: Likewise.\n\nFrom-SVN: r41659", "tree": {"sha": "0e08f015f028f8f1a97fd20338279fbed90f69af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e08f015f028f8f1a97fd20338279fbed90f69af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02f52e19231d05b9aaf63c8d873ce0930579ccb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02f52e19231d05b9aaf63c8d873ce0930579ccb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02f52e19231d05b9aaf63c8d873ce0930579ccb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02f52e19231d05b9aaf63c8d873ce0930579ccb6/comments", "author": {"login": "ajaeger", "id": 16867, "node_id": "MDQ6VXNlcjE2ODY3", "avatar_url": "https://avatars.githubusercontent.com/u/16867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajaeger", "html_url": "https://github.com/ajaeger", "followers_url": "https://api.github.com/users/ajaeger/followers", "following_url": "https://api.github.com/users/ajaeger/following{/other_user}", "gists_url": "https://api.github.com/users/ajaeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajaeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajaeger/subscriptions", "organizations_url": "https://api.github.com/users/ajaeger/orgs", "repos_url": "https://api.github.com/users/ajaeger/repos", "events_url": "https://api.github.com/users/ajaeger/events{/privacy}", "received_events_url": "https://api.github.com/users/ajaeger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e5f973d45bffd642e6d49308df917aa7c9ce0af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e5f973d45bffd642e6d49308df917aa7c9ce0af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e5f973d45bffd642e6d49308df917aa7c9ce0af"}], "stats": {"total": 307, "additions": 156, "deletions": 151}, "files": [{"sha": "845cb2ecba7961d66a2f006ffb8b66c46c068d7e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f52e19231d05b9aaf63c8d873ce0930579ccb6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f52e19231d05b9aaf63c8d873ce0930579ccb6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02f52e19231d05b9aaf63c8d873ce0930579ccb6", "patch": "@@ -1,3 +1,10 @@\n+2001-04-28  Andreas Jaeger  <aj@suse.de>\n+\n+\t* invoke.texi: Use XX-bit instead of XXbit or XX bit where\n+\tappropriate.\n+\t* extend.texi: Likewise.\n+\t* tm.texi: Likewise.\n+\n 2001-04-28  Andreas Jaeger  <aj@suse.de>\n \n         * md.texi: Use XX-bit instead of XXbit or XX bit where\n@@ -697,7 +704,7 @@ Fri Apr 13 21:40:28 2001  Loren J. Rittle  <ljrittle@acm.org>\n \tgen_move_insn): Delete redundant declarations.\n \n 2001-04-13  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n- \n+\n \t* Makefile.in (CFLAGS, BOOT_CFLAGS): Partly revert 2000-10-27 patch.\n \t(stage1_build): Instead pass down STAGE1_CFLAGS here. Pass down\n \tMAKEINFO and MAKEINFOFLAGS too."}, {"sha": "7bcba9d63750ce1d4ed8ad11c15356818b3fea03", "filename": "gcc/extend.texi", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f52e19231d05b9aaf63c8d873ce0930579ccb6/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f52e19231d05b9aaf63c8d873ce0930579ccb6/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=02f52e19231d05b9aaf63c8d873ce0930579ccb6", "patch": "@@ -197,7 +197,7 @@ Statement expressions are not supported fully in G++, and their fate\n there is unclear.  (It is possible that they will become fully supported\n at some point, or that they will be deprecated, or that the bugs that\n are present will continue to exist indefinitely.)  Presently, statement\n-expressions do not work well as default arguments. \n+expressions do not work well as default arguments.\n \n In addition, there are semantic issues with statement-expressions in\n C++.  If you try to use statement-expressions instead of inline\n@@ -340,7 +340,7 @@ Another use of label values is in an interpreter for threaded code.\n The labels within the interpreter function can be stored in the\n threaded code for super-fast dispatching.\n \n-You may not use this mechanism to jump to code in a different function. \n+You may not use this mechanism to jump to code in a different function.\n If you do that, totally unpredictable things will happen.  The best way to\n avoid this is to store the label address only in automatic variables and\n never pass it as an argument.\n@@ -897,7 +897,7 @@ thisline->length = this_length;\n In ISO C89, you would have to give @code{contents} a length of 1, which\n means either you waste space or complicate the argument to @code{malloc}.\n \n-In ISO C99, you would use a @dfn{flexible array member}, which is \n+In ISO C99, you would use a @dfn{flexible array member}, which is\n slightly different in syntax and semantics:\n \n @itemize @bullet\n@@ -912,7 +912,7 @@ of zero-length arrays, @code{sizeof} evaluates to zero.\n \n @item\n Flexible array members may only appear as the last member of a\n-@code{struct} that is otherwise non-empty.  GCC currently allows \n+@code{struct} that is otherwise non-empty.  GCC currently allows\n zero-length arrays anywhere.  You may encounter problems, however,\n defining structures containing only a zero-length array.  Such usage\n is deprecated, and we recommend using zero-length arrays only in\n@@ -1940,11 +1940,11 @@ Small model objects live in the lower 16MB of memory (so that their\n addresses can be loaded with the @code{ld24} instruction), and are\n callable with the @code{bl} instruction.\n \n-Medium model objects may live anywhere in the 32 bit address space (the\n+Medium model objects may live anywhere in the 32-bit address space (the\n compiler will generate @code{seth/add3} instructions to load their addresses),\n and are callable with the @code{bl} instruction.\n \n-Large model objects may live anywhere in the 32 bit address space (the\n+Large model objects may live anywhere in the 32-bit address space (the\n compiler will generate @code{seth/add3} instructions to load their addresses),\n and may not be reachable with the @code{bl} instruction (the compiler will\n generate the much slower @code{seth/add3/jl} instruction sequence).\n@@ -2465,10 +2465,10 @@ section, consider using the facilities of the linker instead.\n \n @item shared\n @cindex @code{shared} variable attribute\n-On Windows NT, in addition to putting variable definitions in a named \n-section, the section can also be shared among all running copies of an \n-executable or DLL. For example, this small program defines shared data \n-by putting it in a named section \"shared\" and marking the section \n+On Windows NT, in addition to putting variable definitions in a named\n+section, the section can also be shared among all running copies of an\n+executable or DLL. For example, this small program defines shared data\n+by putting it in a named section \"shared\" and marking the section\n shareable:\n \n @smallexample\n@@ -2484,7 +2484,7 @@ main()\n \n @noindent\n You may only use the @code{shared} attribute along with @code{section}\n-attribute with a fully initialized global definition because of the way \n+attribute with a fully initialized global definition because of the way\n linkers work.  See @code{section} attribute for more information.\n \n The @code{shared} attribute is only available on Windows NT.\n@@ -2514,7 +2514,7 @@ or @code{large}, representing each of the code models.\n Small model objects live in the lower 16MB of memory (so that their\n addresses can be loaded with the @code{ld24} instruction).\n \n-Medium and large model objects may live anywhere in the 32 bit address space\n+Medium and large model objects may live anywhere in the 32-bit address space\n (the compiler will generate @code{seth/add3} instructions to load their\n addresses).\n \n@@ -2755,7 +2755,7 @@ inc (int *a)\n (If you are writing a header file to be included in ISO C programs, write\n @code{__inline__} instead of @code{inline}.  @xref{Alternate Keywords}.)\n You can also make all ``simple enough'' functions inline with the option\n-@samp{-finline-functions}. \n+@samp{-finline-functions}.\n \n Note that certain usages in a function definition can make it unsuitable\n for inline substitution.  Among these usages are: use of varargs, use of\n@@ -3741,7 +3741,7 @@ specify the @samp{-O} option.\n \n @findex __builtin_expect\n @item __builtin_expect(@var{exp}, @var{c})\n-You may use @code{__builtin_expect} to provide the compiler with \n+You may use @code{__builtin_expect} to provide the compiler with\n branch prediction information.  In general, you should prefer to\n use actual profile feedback for this (@samp{-fprofile-arcs}), as\n programmers are notoriously bad at predicting how their programs\n@@ -4342,7 +4342,7 @@ relative ordering.\n @item com_interface\n @cindex com_interface attribute\n \n-@c This is based on:  1) grepping the code, \n+@c This is based on:  1) grepping the code,\n @c 2) http://gcc.gnu.org/ml/gcc-bugs/1999-08n/msg01212.html\n @c 3) http://gcc.gnu.org/ml/gcc-bugs/1999-08n/msg01215.html\n @c and 4) a lot of guesswork.  You can tell I don't use COM.  -pme 21Dec00\n@@ -4358,10 +4358,10 @@ thus, only the base class in a COM hierarchy needs @code{com_interface}.\n @item java_interface\n @cindex java_interface attribute\n \n-This type attribute informs C++ that the class is a Java interface.  It may \n+This type attribute informs C++ that the class is a Java interface.  It may\n only be applied to classes declared within an @code{extern \"Java\"} block.\n-Calls to methods declared in this interface will be dispatched using GCJ's \n-interface table mechanism, instead of regular virtual table dispatch.  \n+Calls to methods declared in this interface will be dispatched using GCJ's\n+interface table mechanism, instead of regular virtual table dispatch.\n \n @end table\n \n@@ -4429,4 +4429,3 @@ implicitly scoped inside a C language scope. Also, an empty prototype\n @code{()} will be treated as an unspecified number of arguments, rather\n than no arguments, as C++ demands.\n @end table\n-"}, {"sha": "e573452f542668d90d3a8c4c80189cada0c4b9cf", "filename": "gcc/invoke.texi", "status": "modified", "additions": 98, "deletions": 99, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f52e19231d05b9aaf63c8d873ce0930579ccb6/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f52e19231d05b9aaf63c8d873ce0930579ccb6/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=02f52e19231d05b9aaf63c8d873ce0930579ccb6", "patch": "@@ -116,7 +116,7 @@ only one of these two forms, whichever one is not the default.\n * C Dialect Options::   Controlling the variant of C language compiled.\n * C++ Dialect Options:: Variations on C++.\n * Language Independent Options:: Controlling how diagnostics should be\n-                        formatted. \n+                        formatted.\n * Warning Options::     How picky should the compiler be?\n * Debugging Options::   Symbol tables, measurements, and debugging dumps.\n * Optimize Options::    How much optimization?\n@@ -597,7 +597,7 @@ in the following sections.\n * C Dialect Options::   Controlling the variant of C language compiled.\n * C++ Dialect Options:: Variations on C++.\n * Language Independent Options:: Controlling how diagnostics should be\n-                        formatted. \n+                        formatted.\n * Warning Options::     How picky should the compiler be?\n * Debugging Options::   Symbol tables, measurements, and debugging dumps.\n * Optimize Options::    How much optimization?\n@@ -863,7 +863,7 @@ C (when compiling C code), or of standard C++ (when compiling C++ code),\n such as the @code{asm} and @code{typeof} keywords, and\n predefined macros such as @code{unix} and @code{vax} that identify the\n type of system you are using.  It also enables the undesirable and\n-rarely used ISO trigraph feature.  For the C compiler, \n+rarely used ISO trigraph feature.  For the C compiler,\n it disables recognition of C++ style @samp{//} comments as well as\n the @code{inline} keyword.\n \n@@ -893,7 +893,7 @@ affected.\n \n @item -std=\n Determine the language standard.  A value for this option must be provided;\n-possible values are \n+possible values are\n \n @table @samp\n @item iso9899:1990\n@@ -1232,7 +1232,7 @@ two definitions were merged.\n This option is no longer useful on most targets, now that support has\n been added for putting variables into BSS without making them common.\n \n-@item -fno-const-strings \n+@item -fno-const-strings\n Give string constants type @code{char *} instead of type @code{const\n char *}.  By default, G++ uses type @code{const char *} as required by\n the standard.  Even if you use @samp{-fno-const-strings}, you cannot\n@@ -1293,7 +1293,7 @@ otherwise be invalid, or have different behavior.\n \n @item -fno-gnu-keywords\n Do not recognize @code{typeof} as a keyword, so that code can use this\n-word as an identifier. You can use the keyword @code{__typeof__} instead.  \n+word as an identifier. You can use the keyword @code{__typeof__} instead.\n @samp{-ansi} implies @samp{-fno-gnu-keywords}.\n \n @item -fhonor-std\n@@ -1399,7 +1399,7 @@ those.\n Like all options that change the ABI, all C++ code, @emph{including\n libgcc.a} must be built with the same setting of this option.\n \n-@item -fno-weak \n+@item -fno-weak\n Do not use weak symbol support, even if it is provied by the linker.\n By default, G++ will use weak symbols if they are available.  This\n option exists only for testing, and should not be used by end-users;\n@@ -1553,14 +1553,14 @@ below can be used to control the diagnostic messages formatting\n algorithm, e.g. how many characters per line, how often source location\n information should be reported.  Right now, only the C++ front-end can\n honor these options.  However it is expected, in the near future, that\n-the remaining front-ends would be able to digest them correctly. \n+the remaining front-ends would be able to digest them correctly.\n \n @table @gcctabopt\n @item -fmessage-length=@var{n}\n Try to format error messages so that they fit on lines of about @var{n}\n characters.  The default is 72 characters for g++ and 0 for the rest of\n the front-ends supported by GCC.  If @var{n} is zero, then no\n-line-wrapping will be done; each error message will appear on a single \n+line-wrapping will be done; each error message will appear on a single\n line.\n \n @item -fdiagnostics-show-location=once\n@@ -1569,7 +1569,7 @@ reporter to emit @emph{once} source location information; that is, in\n case the message is too long to fit on a single physical line and has to\n be wrapped, the source location won't be emitted (as prefix) again,\n over and over, in subsequent continuation lines.  This is the default\n-behaviour. \n+behaviour.\n \n @item -fdiagnostics-show-location=every-line\n Only meaningful in line-wrapping mode.  Instructs the diagnostic\n@@ -1835,7 +1835,7 @@ D. Hugh Redelmeier\n @item -Wreturn-type\n Warn whenever a function is defined with a return-type that defaults to\n @code{int}.  Also warn about any @code{return} statement with no\n-return-value in a function whose return-type is not @code{void}. \n+return-value in a function whose return-type is not @code{void}.\n \n For C++, a function without return type always produces a diagnostic\n message, even when @samp{-Wno-return-type} is specified. The only\n@@ -2279,7 +2279,7 @@ appropriate may not be detected.  This option has no effect unless\n \n @item -Wpacked\n Warn if a structure is given the packed attribute, but the packed\n-attribute has no effect on the layout or size of the structure.  \n+attribute has no effect on the layout or size of the structure.\n Such structures may be mis-aligned for little benefit.  For\n instance, in this code, the variable @code{f.x} in @code{struct bar}\n will be misaligned even though @code{struct bar} does not itself\n@@ -2324,7 +2324,7 @@ are circumstances under which part of the affected line can be executed,\n so care should be taken when removing apparently-unreachable code.\n \n For instance, when a function is inlined, a warning may mean that the\n-line is unreachable in only one inlined copy of the function.  \n+line is unreachable in only one inlined copy of the function.\n \n This option is not made part of @samp{-Wall} because in a debugging\n version of a program there is often substantial code which checks\n@@ -2623,7 +2623,7 @@ block and arc execution counts from the information in the\n Says to make debugging dumps during compilation at times specified by\n @var{letters}.  This is used for debugging the compiler.  The file names\n for most of the dumps are made by appending a pass number and a word to\n-the source file name (e.g.  @file{foo.c.00.rtl} or @file{foo.c.01.sibling}). \n+the source file name (e.g.  @file{foo.c.00.rtl} or @file{foo.c.01.sibling}).\n Here are the possible letters for use in @var{letters}, and their meanings:\n \n @table @samp\n@@ -2655,7 +2655,7 @@ Dump after purging @code{ADDRESSOF} codes, to @file{@var{file}.04.addressof}.\n Dump after global register allocation, to @file{@var{file}.19.greg}.\n @item o\n Dump after post-reload CSE and other optimizations, to @file{@var{file}.20.postreload}.\n-@item G      \n+@item G\n Dump after GCSE, to @file{@var{file}.08.gcse}.\n @item i\n Dump after sibling call optimizations, to @file{@var{file}.01.sibling}.\n@@ -2671,7 +2671,7 @@ Dump after local register allocation, to @file{@var{file}.18.lreg}.\n Dump after loop optimization, to @file{@var{file}.09.loop}.\n @item M\n Dump after performing the machine dependent reorganisation pass, to\n-@file{@var{file}.28.mach}. \n+@file{@var{file}.28.mach}.\n @item n\n Dump after register renumbering, to @file{@var{file}.23.rnreg}.\n @item N\n@@ -2683,7 +2683,7 @@ Dump after the second instruction scheduling pass, to\n @file{@var{file}.25.sched2}.\n @item s\n Dump after CSE (including the jump optimization that sometimes follows\n-CSE), to @file{@var{file}.03.cse}. \n+CSE), to @file{@var{file}.03.cse}.\n @item S\n Dump after the first instruction scheduling pass, to\n @file{@var{file}.17.sched}.\n@@ -2965,13 +2965,13 @@ assembler code in its own right.\n @item -finline-limit=@var{n}\n By default, gcc limits the size of functions that can be inlined.  This flag\n allows the control of this limit for functions that are explicitly marked as\n-inline (ie marked with the inline keyword or defined within the class \n-definition in c++).  @var{n} is the size of functions that can be inlined in \n+inline (ie marked with the inline keyword or defined within the class\n+definition in c++).  @var{n} is the size of functions that can be inlined in\n number of pseudo instructions (not counting parameter handling).  The default\n value of n is 10000.  Increasing this value can result in more inlined code at\n the cost of compilation time and memory consumption.  Decreasing usually makes\n-the compilation faster and less code will be inlined (which presumably \n-means slower programs).  This option is particularly useful for programs that \n+the compilation faster and less code will be inlined (which presumably\n+means slower programs).  This option is particularly useful for programs that\n use inlining heavily such as those based on recursive templates with c++.\n \n @emph{Note:} pseudo instruction represents, in this particular context, an\n@@ -3029,7 +3029,7 @@ sets @samp{-fno-math-errno}.\n @item -funsafe-math-optimizations\n Allow optimizations for floating-point arithmetic that (a) assume\n that arguments and results are valid and (b) may violate IEEE or\n-ANSI standards.  \n+ANSI standards.\n \n This option should never be turned on by any @samp{-O} option since\n it can result in incorrect output for programs which depend on\n@@ -3105,10 +3105,10 @@ This pass also performs global constant and copy propagation.\n When -fgcse-lm is enabled, global common subexpression elimination will\n attempt to move loads which are only killed by stores into themselves. This\n allows a loop containing a load/store sequence to be changed to a load outside\n-the loop, and a copy/store within the loop. \n+the loop, and a copy/store within the loop.\n \n @item -fgcse-sm\n-When -fgcse-sm is enabled, A store motion pass is run after global common \n+When -fgcse-sm is enabled, A store motion pass is run after global common\n subexpression elimination. This pass will attempt to move stores out of loops.\n When used in conjunction with -fgcse-lm, loops containing a load/store sequence\n can be changed to a load before the loop and a store after the loop.\n@@ -3257,11 +3257,11 @@ object of one type is assumed never to reside at the same address as an\n object of a different type, unless the types are almost the same.  For\n example, an @code{unsigned int} can alias an @code{int}, but not a\n @code{void*} or a @code{double}.  A character type may alias any other\n-type.  \n+type.\n \n Pay special attention to code like this:\n @example\n-union a_union @{ \n+union a_union @{\n   int i;\n   double d;\n @};\n@@ -3278,7 +3278,7 @@ recently written to (called ``type-punning'') is common.  Even with\n is accessed through the union type.  So, the code above will work as\n expected.  However, this code might not:\n @example\n-int f() @{ \n+int f() @{\n   a_union t;\n   int* ip;\n   t.d = 3.0;\n@@ -3368,7 +3368,7 @@ In some places, GCC uses various constants to control the amount of\n optimization that is done.  For example, GCC will not inline functions\n that contain more that a certain number of instructions.  You can\n control some of these constants on the command-line using the\n-@samp{--param} option.  \n+@samp{--param} option.\n \n In each case, the @var{value} is a integer.  The allowable choices for\n @var{name} are given in the following table:\n@@ -3811,7 +3811,7 @@ libraries.  On other systems, this option has no effect.\n @item -shared\n Produce a shared object which can then be linked with other objects to\n form an executable.  Not all systems support this option.  For predictable\n-results, you must also specify the same set of options that were used to \n+results, you must also specify the same set of options that were used to\n generate code (@samp{-fpic}, @samp{-fPIC}, or model suboptions)\n when you specify this option.@footnote{On some systems, @samp{gcc -shared}\n needs to build supplementary stub code for constructors to work. On\n@@ -3984,7 +3984,7 @@ character on the line and it can be one of the following:\n @table @code\n @item %@var{command}\n Issues a @var{command} to the spec file processor.  The commands that can\n-appear here are: \n+appear here are:\n \n @table @code\n @item %include <@var{file}>\n@@ -4017,7 +4017,7 @@ character, in which case the text will be appended to the spec.\n @item [@var{suffix}]:\n Creates a new @samp{[@var{suffix}] spec} pair.  All lines after this directive\n and up to the next directive or blank line are considered to make up the\n-spec string for the indicated suffix.  When the compiler encounters an \n+spec string for the indicated suffix.  When the compiler encounters an\n input file with the named suffix, it will processes the spec string in\n order to work out how to compile that file.  For example:\n \n@@ -4064,7 +4064,7 @@ possible to override earlier entries using this technique.\n \n GCC has the following spec strings built into it.  Spec files can\n override these strings or create their own.  Note that individual\n-targets can also add their own spec strings to this list. \n+targets can also add their own spec strings to this list.\n \n @smallexample\n asm          Options to pass to the assembler\n@@ -4105,7 +4105,7 @@ it is possible to generate quite complex command lines.\n Here is a table of all defined @samp{%}-sequences for spec\n strings.  Note that spaces are not generated automatically around the\n results of expanding these sequences.  Therefore you can concatenate them\n-together or combine them with constant text in a single argument. \n+together or combine them with constant text in a single argument.\n \n @table @code\n @item %%\n@@ -4127,13 +4127,13 @@ the last period).\n Marks the argument containing or following the @samp{%d} as a\n temporary file name, so that that file will be deleted if GCC exits\n successfully.  Unlike @samp{%g}, this contributes no text to the\n-argument. \n+argument.\n \n @item %g@var{suffix}\n Substitute a file name that has suffix @var{suffix} and is chosen\n once per compilation, and mark the argument in the same way as\n @samp{%d}.  To reduce exposure to denial-of-service attacks, the file\n-name is now chosen in a way that is hard to predict even when previously \n+name is now chosen in a way that is hard to predict even when previously\n chosen file names are known.  For example, @samp{%g.s ... %g.o ... %g.s}\n might turn into @samp{ccUVUUAU.s ccXYAXZ12.o ccUVUUAU.s}.  @var{suffix} matches\n the regexp @samp{[.A-Za-z]*} or the special string @samp{%O}, which is\n@@ -4157,7 +4157,7 @@ simply substituted with a file name chosen for the previous @samp{%u},\n without regard to any appended suffix.\n \n @item %j@var{SUFFIX}\n-Substitutes the name of the HOST_BIT_BUCKET, if any, and if it is \n+Substitutes the name of the HOST_BIT_BUCKET, if any, and if it is\n writable, and if save-temps is off; otherwise, substitute the name\n of a temporary file, just like @samp{%u}.  This temporary file is not\n meant for communication between processes, but rather as a junk\n@@ -4199,15 +4199,15 @@ current target machine.  Use this when running @code{cpp}.\n Like @samp{%p}, but puts @samp{__} before and after the name of each\n predefined macro, except for macros that start with @samp{__} or with\n @samp{_@var{L}}, where @var{L} is an uppercase letter.  This is for ISO\n-C.  \n+C.\n \n @item %I\n Substitute a @samp{-iprefix} option made from GCC_EXEC_PREFIX.\n \n @item %s\n Current argument is the name of a library or startup file of some sort.\n Search for that file in a standard list of directories and substitute\n-the full name found. \n+the full name found.\n \n @item %e@var{str}\n Print @var{str} as an error message.  @var{str} is terminated by a newline.\n@@ -4264,7 +4264,7 @@ command line passed to the linker.  Typically it will make use of the\n @item %D\n Dump out a @samp{-L} option for each directory that GCC believes might\n contain startup files.  If the target supports multilibs then the\n-current multilib directory will be prepended to each of these paths. \n+current multilib directory will be prepended to each of these paths.\n \n @item %M\n Output the multilib directory with directory seperators replaced with\n@@ -4273,28 +4273,28 @@ Output the multilib directory with directory seperators replaced with\n \n @item %L\n Process the @code{lib} spec.  This is a spec string for deciding which\n-libraries should be included on the command line to the linker. \n+libraries should be included on the command line to the linker.\n \n @item %G\n Process the @code{libgcc} spec.  This is a spec string for deciding\n-which GCC support library should be included on the command line to the linker. \n+which GCC support library should be included on the command line to the linker.\n \n @item %S\n Process the @code{startfile} spec.  This is a spec for deciding which\n object files should be the first ones passed to the linker.  Typically\n-this might be a file named @file{crt0.o}. \n+this might be a file named @file{crt0.o}.\n \n @item %E\n Process the @code{endfile} spec.  This is a spec string that specifies\n-the last object files that will be passed to the linker.  \n+the last object files that will be passed to the linker.\n \n @item %C\n Process the @code{cpp} spec.  This is used to construct the arguments\n to be passed to the C preprocessor.\n \n @item %c\n Process the @code{signed_char} spec.  This is intended to be used\n-to tell cpp whether a char is signed.  It typically has the definition: \n+to tell cpp whether a char is signed.  It typically has the definition:\n @smallexample\n %@{funsigned-char:-D__CHAR_UNSIGNED__@}\n @end smallexample\n@@ -4322,14 +4322,14 @@ and would output the command line option @samp{-foo}.\n \n @item %W@{@code{S}@}\n Like %@{@code{S}@} but mark last argument supplied within as a file to be\n-deleted on failure. \n+deleted on failure.\n \n @item %@{@code{S}*@}\n Substitutes all the switches specified to GCC whose names start\n with @code{-S}, but which also take an argument.  This is used for\n switches like @samp{-o, -D, -I}, etc.  GCC considers @samp{-o foo} as being\n one switch whose names starts with @samp{o}.  %@{o*@} would substitute this\n-text, including the space.  Thus two arguments would be generated. \n+text, including the space.  Thus two arguments would be generated.\n \n @item %@{^@code{S}*@}\n Like %@{@code{S}*@}, but don't put a blank between a switch and its\n@@ -4351,7 +4351,7 @@ string after this option will not.\n Substitutes @code{X} if one or more switches whose names start with\n @code{-S} are specified to GCC.  Note that the tail part of the\n @code{-S} option (i.e. the part matched by the @samp{*}) will be substituted\n-for each occurrence of @samp{%*} within @code{X}. \n+for each occurrence of @samp{%*} within @code{X}.\n \n @item %@{@code{S}:@code{X}@}\n Substitutes @code{X}, but only if the @samp{-S} switch was given to GCC.\n@@ -4396,7 +4396,7 @@ jim.d         -bar -boggle\n The conditional text @code{X} in a %@{@code{S}:@code{X}@} or\n %@{!@code{S}:@code{X}@} construct may contain other nested @samp{%} constructs\n or spaces, or even newlines.  They are processed as usual, as described\n-above. \n+above.\n \n The @samp{-O, -f, -m, and -W} switches are handled specifically in these\n constructs.  If another value of @samp{-O} or the negated form of a @samp{-f, -m, or\n@@ -4414,7 +4414,7 @@ compiler's spec to say which switches take arguments.  But this cannot\n be done in a consistent fashion.  GCC cannot even decide which input\n files have been specified without knowing which switches take arguments,\n and it must know which input files to compile in order to tell which\n-compilers to run). \n+compilers to run).\n \n GCC also knows implicitly that arguments starting in @samp{-l} are to be\n treated as compiler output files, and passed to the linker in their\n@@ -4630,7 +4630,7 @@ CPU32 or CPU32+ core, including the 68330, 68331, 68332, 68333, 68334,\n Generate output for a 520X \"coldfire\" family cpu.  This is the default\n when the compiler is configured for 520X-based systems.\n \n-Use this option for microcontroller with a 5200 core, including \n+Use this option for microcontroller with a 5200 core, including\n the MCF5202, MCF5203, MCF5204 and MCF5202.\n \n \n@@ -4695,7 +4695,7 @@ The @code{rtd} instruction is supported by the 68010, 68020, 68030,\n \n @item -malign-int\n @itemx -mno-align-int\n-Control whether GCC aligns @code{int}, @code{long}, @code{long long}, \n+Control whether GCC aligns @code{int}, @code{long}, @code{long long},\n @code{float}, @code{double}, and @code{long double} variables on a 32-bit\n boundary (@samp{-malign-int}) or a 16-bit boundary (@samp{-mno-align-int}).\n Aligning variables on 32-bit boundaries produces code that runs somewhat\n@@ -4725,7 +4725,7 @@ the system.\n @cindex M68hc1x options\n \n These are the @samp{-m} options defined for the 68hc11 and 68hc12\n-microcontrollers.  The default values for these options depends on \n+microcontrollers.  The default values for these options depends on\n which style of microcontroller was selected when the compiler was configured;\n the defaults for the most common choices are given below.\n \n@@ -4965,17 +4965,17 @@ handlers.\n @end table\n \n These @samp{-m} switches are supported in addition to the above\n-on SPARC V9 processors in 64 bit environments.\n+on SPARC V9 processors in 64-bit environments.\n \n @table @gcctabopt\n @item -mlittle-endian\n Generate code for a processor running in little-endian mode.\n \n @item -m32\n @itemx -m64\n-Generate code for a 32 bit or 64 bit environment.\n-The 32 bit environment sets int, long and pointer to 32 bits.\n-The 64 bit environment sets int to 32 bits and long and pointer\n+Generate code for a 32-bit or 64-bit environment.\n+The 32-bit environment sets int, long and pointer to 32 bits.\n+The 64-bit environment sets int to 32 bits and long and pointer\n to 64 bits.\n \n @item -mcmodel=medlow\n@@ -4997,9 +4997,9 @@ Pointers are 64 bits.\n \n @item -mcmodel=embmedany\n Generate code for the Medium/Anywhere code model for embedded systems:\n-assume a 32 bit text and a 32 bit data segment, both starting anywhere\n+assume a 32-bit text and a 32-bit data segment, both starting anywhere\n (determined at link time).  Register %g4 points to the base of the\n-data segment.  Pointers still 64 bits.\n+data segment.  Pointers are still 64 bits.\n Programs are statically linked, PIC is not supported.\n \n @item -mstack-bias\n@@ -5314,22 +5314,22 @@ address is aligned to a word boundary.\n \n This option is ignored when compiling for ARM architecture 4 or later,\n since these processors have instructions to directly access half-word\n-objects in memory. \n-        \n+objects in memory.\n+\n @item -mno-alignment-traps\n @kindex -mno-alignment-traps\n Generate code that assumes that the MMU will not trap unaligned\n accesses.  This produces better code when the target instruction set\n does not have half-word memory operations (implementations prior to\n-ARMv4). \n+ARMv4).\n \n Note that you cannot use this option to access unaligned word objects,\n since the processor will only fetch one 32-bit aligned object from\n-memory. \n+memory.\n \n The default setting for most targets is -mno-alignment-traps, since\n this produces better code when there are no half-word memory\n-instructions available. \n+instructions available.\n \n @item -mshort-load-bytes\n @kindex -mshort-load-bytes\n@@ -5428,7 +5428,7 @@ Tells the compiler to perform function calls by first loading the\n address of the function into a register and then performing a subroutine\n call on this register.  This switch is needed if the target function\n will lie outside of the 64 megabyte addressing range of the offset based\n-version of subroutine call instruction. \n+version of subroutine call instruction.\n \n Even if this switch is enabled, not all function calls will be turned\n into long calls.  The heuristic is that static functions, functions\n@@ -5446,7 +5446,7 @@ This feature is not enabled by default.  Specifying\n placing the function calls within the scope of a @samp{#pragma\n long_calls_off} directive.  Note these switches have no effect on how\n the compiler generates code to handle function calls via function\n-pointers.  \n+pointers.\n \n @item -mnop-fun-dllimport\n @kindex -mnop-fun-dllimport\n@@ -5486,14 +5486,14 @@ with this option.\n @kindex -mno-tpcs-frame\n Generate a stack frame that is compliant with the Thumb Procedure Call\n Standard for all non-leaf functions.  (A leaf function is one that does\n-not call any other functions).  The default is @samp{-mno-apcs-frame}. \n+not call any other functions).  The default is @samp{-mno-apcs-frame}.\n \n @item -mtpcs-leaf-frame\n @kindex -mtpcs-leaf-frame\n @kindex -mno-tpcs-leaf-frame\n Generate a stack frame that is compliant with the Thumb Procedure Call\n Standard for all leaf functions.  (A leaf function is one that does\n-not call any other functions).  The default is @samp{-mno-apcs-leaf-frame}. \n+not call any other functions).  The default is @samp{-mno-apcs-leaf-frame}.\n \n @item -mlittle-endian\n @kindex -mlittle-endian\n@@ -5559,7 +5559,7 @@ Indicate to the linker that it should perform a relaxation optimization pass\n to shorten branches, calls and absolute memory addresses.  This option only\n has an effect when used on the command line for the final link step.\n \n-This option makes symbolic debugging impossible. \n+This option makes symbolic debugging impossible.\n @end table\n \n @node MN10300 Options\n@@ -5588,7 +5588,7 @@ Indicate to the linker that it should perform a relaxation optimization pass\n to shorten branches, calls and absolute memory addresses.  This option only\n has an effect when used on the command line for the final link step.\n \n-This option makes symbolic debugging impossible. \n+This option makes symbolic debugging impossible.\n @end table\n \n \n@@ -5609,12 +5609,12 @@ The addressability of a particular object can be set with the\n @code{model} attribute.\n \n @item -mcode-model=medium\n-Assume objects may be anywhere in the 32 bit address space (the compiler\n+Assume objects may be anywhere in the 32-bit address space (the compiler\n will generate @code{seth/add3} instructions to load their addresses), and\n assume all subroutines are reachable with the @code{bl} instruction.\n \n @item -mcode-model=large\n-Assume objects may be anywhere in the 32 bit address space (the compiler\n+Assume objects may be anywhere in the 32-bit address space (the compiler\n will generate @code{seth/add3} instructions to load their addresses), and\n assume subroutines may not be reachable with the @code{bl} instruction\n (the compiler will generate the much slower @code{seth/add3/jl}\n@@ -5982,19 +5982,19 @@ specify generic POWER, POWER2, pure 32-bit PowerPC (i.e., not MPC601),\n and 64-bit PowerPC architecture machine types, with an appropriate,\n generic processor model assumed for scheduling purposes.@refill\n \n-Specifying any of the following options: \n+Specifying any of the following options:\n @samp{-mcpu=rios1}, @samp{-mcpu=rios2}, @samp{-mcpu=rsc},\n-@samp{-mcpu=power}, or @samp{-mcpu=power2}  \n-enables the @samp{-mpower} option and disables the @samp{-mpowerpc} option; \n+@samp{-mcpu=power}, or @samp{-mcpu=power2}\n+enables the @samp{-mpower} option and disables the @samp{-mpowerpc} option;\n @samp{-mcpu=601} enables both the @samp{-mpower} and @samp{-mpowerpc} options.\n All of @samp{-mcpu=rs64a}, @samp{-mcpu=602}, @samp{-mcpu=603},\n @samp{-mcpu=603e}, @samp{-mcpu=604}, @samp{-mcpu=620}, @samp{-mcpu=630},\n @samp{-mcpu=740}, and @samp{-mcpu=750}\n-enable the @samp{-mpowerpc} option and disable the @samp{-mpower} option.  \n+enable the @samp{-mpowerpc} option and disable the @samp{-mpower} option.\n Exactly similarly, all of @samp{-mcpu=403},\n-@samp{-mcpu=505}, @samp{-mcpu=821}, @samp{-mcpu=860} and @samp{-mcpu=powerpc} \n+@samp{-mcpu=505}, @samp{-mcpu=821}, @samp{-mcpu=860} and @samp{-mcpu=powerpc}\n enable the @samp{-mpowerpc} option and disable the @samp{-mpower} option.\n-@samp{-mcpu=common} disables both the \n+@samp{-mcpu=common} disables both the\n @samp{-mpower} and @samp{-mpowerpc} options.@refill\n \n AIX versions 4 or greater selects @samp{-mcpu=common} by default, so\n@@ -6408,7 +6408,7 @@ root instructions).  @samp{r6000} is the default @var{cpu type} at this\n ISA level.\n \n @item -mips3\n-Issue instructions from level 3 of the MIPS ISA (64 bit instructions).\n+Issue instructions from level 3 of the MIPS ISA (64-bit instructions).\n @samp{r4000} is the default @var{cpu type} at this ISA level.\n \n @item -mips4\n@@ -6575,7 +6575,7 @@ when executing, and thus may be preferred for some embedded systems.\n @itemx -mno-uninit-const-in-rodata\n When used together with -membedded-data, it will always store uninitialized\n const variables in the read-only data section.\n-  \n+\n @item -msingle-float\n @itemx -mdouble-float\n The @samp{-msingle-float} switch tells gcc to assume that the floating\n@@ -6664,7 +6664,7 @@ AMD chips as opposed to the Intel ones.\n \n @item -march=@var{cpu type}\n Generate instructions for the machine type @var{cpu type}.  The choices\n-for @var{cpu type} are the same as for @samp{-mcpu}.  Moreover, \n+for @var{cpu type} are the same as for @samp{-mcpu}.  Moreover,\n specifying @samp{-march=@var{cpu type}} implies @samp{-mcpu=@var{cpu type}}.\n \n @item -m386\n@@ -6731,7 +6731,7 @@ impossible to reach with 12 byte long doubles in the array accesses.\n @strong{Warning:} if you use the @samp{-m128bit-long-double} switch, the\n structures and arrays containing @code{long double} will change their size as\n well as function calling convention for function taking @code{long double}\n-will be modified. \n+will be modified.\n \n @item -m96bit-long-double\n @itemx -m96bit-long-double\n@@ -6747,7 +6747,7 @@ These options are meaningful only on System V Release 3.\n @item -mno-wide-multiply\n @itemx -mwide-multiply\n Control whether GCC uses the @code{mul} and @code{imul} that produce\n-64 bit results in @code{eax:edx} from 32 bit operands to do @code{long\n+64-bit results in @code{eax:edx} from 32-bit operands to do @code{long\n long} multiplies and 32-bit division by constants.\n \n @item -mrtd\n@@ -6820,7 +6820,7 @@ Streaming SIMD Extension (SSE) data type @code{__m128} suffers similar\n penalties if it is not 16 byte aligned.\n \n To ensure proper alignment of this values on the stack, the stack boundary\n-must be as aligned as that required by any value stored on the stack. \n+must be as aligned as that required by any value stored on the stack.\n Further, every function must be generated such that it keeps the stack\n aligned.  Thus calling a function compiled with a higher preferred\n stack boundary from a function compiled with a lower preferred stack\n@@ -6849,10 +6849,10 @@ increase in code size. This switch implies -mno-push-args.\n \n @item -mthreads\n @kindex -mthreads\n-Support thread-safe exception handling on @samp{Mingw32}. Code that relies \n-on thread-safe exception handling must compile and link all code with the \n-@samp{-mthreads} option. When compiling, @samp{-mthreads} defines \n-@samp{-D_MT}; when linking, it links in a special thread helper library \n+Support thread-safe exception handling on @samp{Mingw32}. Code that relies\n+on thread-safe exception handling must compile and link all code with the\n+@samp{-mthreads} option. When compiling, @samp{-mthreads} defines\n+@samp{-D_MT}; when linking, it links in a special thread helper library\n @samp{-lmingwthrd} which cleans up per thread exception handling data.\n \n @item -mno-align-stringops\n@@ -6887,7 +6887,7 @@ other way around.\n \n PA 2.0 support currently requires gas snapshot 19990413 or later.  The\n next release of binutils (current is 2.9.1) will probably contain PA 2.0\n-support.  \n+support.\n \n @item -mpa-risc-1-0\n @itemx -mpa-risc-1-1\n@@ -6940,8 +6940,8 @@ Enable the use of assembler directives only GAS understands.\n \n @item -mschedule=@var{cpu type}\n Schedule code according to the constraints for the machine type\n-@var{cpu type}.  The choices for @var{cpu type} are @samp{700} \n-@samp{7100}, @samp{7100LC}, @samp{7200}, and @samp{8000}.  Refer to \n+@var{cpu type}.  The choices for @var{cpu type} are @samp{700}\n+@samp{7100}, @samp{7100LC}, @samp{7200}, and @samp{8000}.  Refer to\n @file{/usr/lib/sched.models} on an HP-UX system to determine the\n proper scheduling option for your machine.\n \n@@ -7120,8 +7120,8 @@ IEEE @var{inexact flag}.  Turning on this option causes the generated\n code to implement fully-compliant IEEE math.  The option is a shorthand\n for @samp{-D_IEEE_FP -D_IEEE_FP_INEXACT} plus the three following:\n @samp{-mieee-conformant},\n-@samp{-mfp-trap-mode=sui}, \n-and @samp{-mtrap-precision=i}.  \n+@samp{-mfp-trap-mode=sui},\n+and @samp{-mtrap-precision=i}.\n On some Alpha implementations the resulting code may execute\n significantly slower than the code generated by default.  Since there\n is very little code that depends on the @var{inexact flag}, you should\n@@ -7383,7 +7383,7 @@ Compile code for the processor in big endian mode.\n Compile code for the processor in little endian mode.\n \n @item -mdalign\n-Align doubles at 64 bit boundaries.  Note that this changes the calling\n+Align doubles at 64-bit boundaries.  Note that this changes the calling\n conventions, and thus some functions from the standard C library will\n not work unless you recompile it first with -mdalign.\n \n@@ -7485,7 +7485,7 @@ memory access.\n @item -mbk\n @itemx -mno-bk\n Allow (disallow) allocation of general integer operands into the block\n-count register BK. \n+count register BK.\n \n @item -mdb\n @itemx -mno-db\n@@ -7625,7 +7625,7 @@ area can hold up to 64 kilobytes.\n @item -mzda=@var{n}\n Put static or global variables whose size is @var{n} bytes or less into\n the first 32 kilobytes of memory.\n- \n+\n @item -mv850\n Specify that the target processor is the V850.\n \n@@ -7840,7 +7840,7 @@ Change only the low 8 bits of the stack pointer.\n @cindex MCore options\n \n These are the @samp{-m} options defined for the Motorola M*Core\n-processors.  \n+processors.\n \n @table @gcctabopt\n \n@@ -8582,7 +8582,7 @@ with @samp{-q}.\n \n The output from @code{protoize} or @code{unprotoize} replaces the\n original source file.  The original file is renamed to a name ending\n-with @samp{.save} (for DOS, the saved filename ends in @samp{.sav} \n+with @samp{.save} (for DOS, the saved filename ends in @samp{.sav}\n without the original @samp{.c} suffix).  If the @samp{.save} (@samp{.sav}\n for DOS) file already exists, then the source file is simply discarded.\n \n@@ -8618,7 +8618,7 @@ the @var{compilation-options}, they are ignored.\n \n @item -C\n Rename files to end in @samp{.C} (@samp{.cc} for DOS-based file\n-systems) instead of @samp{.c}.  This is convenient if you are converting \n+systems) instead of @samp{.c}.  This is convenient if you are converting\n a C program to C++.  This option applies only to @code{protoize}.\n \n @item -g\n@@ -8687,4 +8687,3 @@ exist, because otherwise they won't get converted.\n \n @xref{Protoize Caveats}, for more information on how to use\n @code{protoize} successfully.\n-"}, {"sha": "7d0242e169f37e591e79b3597a0fd7eea5a51991", "filename": "gcc/tm.texi", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f52e19231d05b9aaf63c8d873ce0930579ccb6/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f52e19231d05b9aaf63c8d873ce0930579ccb6/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=02f52e19231d05b9aaf63c8d873ce0930579ccb6", "patch": "@@ -740,7 +740,7 @@ If a target needs per-function specific data it should define the type\n @code{INIT_EXPANDERS}.  This macro should be used to initialise some or\n all of the function pointers @code{init_machine_status},\n @code{free_machine_status} and @code{mark_machine_status}.  These\n-pointers are explained below. \n+pointers are explained below.\n \n One typical use of per-function, target specific data is to create an\n RTX to hold the register containing the function's return address.  This\n@@ -752,7 +752,7 @@ all of the per-function information.  Thus when processing of a nested\n function began the old per-function data had to be pushed onto a\n stack, and when the processing was finished, it had to be popped off the\n stack.  GCC used to provide function pointers called\n-@code{save_machine_status} and @code{restore_machine_status} to handle \n+@code{save_machine_status} and @code{restore_machine_status} to handle\n the saving and restoring of the target specific information.  Since the\n single data area approach is no longer used, these pointers are no\n longer supported.\n@@ -1250,7 +1250,7 @@ If @code{DEFAULT_VTABLE_THUNKS} is 0, GCC uses the traditional\n implementation by default.  The ``thunk'' implementation is more efficient\n (especially if you have provided an implementation of\n @code{ASM_OUTPUT_MI_THUNK}, see @ref{Function Entry}), but is not binary\n-compatible with code compiled using the traditional implementation.  \n+compatible with code compiled using the traditional implementation.\n If you are writing a new port, define @code{DEFAULT_VTABLE_THUNKS} to 1.\n \n If you do not define this macro, the default for @samp{-fvtable-thunk} is 0.\n@@ -1569,7 +1569,7 @@ Zero or more C statements that may conditionally modify five variables\n Before the macro is called @code{fixed_regs}, @code{call_used_regs}\n @code{reg_class_contents} and @code{reg_names} have been initialized\n from @code{FIXED_REGISTERS}, @code{CALL_USED_REGISTERS},\n-@code{REG_CLASS_CONTENTS} and @code{REGISTER_NAMES}, respectively, \n+@code{REG_CLASS_CONTENTS} and @code{REGISTER_NAMES}, respectively,\n @code{global_regs} has been cleared, and any @samp{-ffixed-@var{reg}},\n @samp{-fcall-used-@var{reg}} and @samp{-fcall-saved-@var{reg}} command\n options have been applied.\n@@ -1788,7 +1788,7 @@ This macro takes 4 parameters:\n @code{XMODE}  - The mode of xregno.\n @code{OFFSET} - The byte offset.\n @code{YMODE} - The mode of a top level SUBREG (or what may become one).\n-The default function can be found in rtlanal.c, function \n+The default function can be found in rtlanal.c, function\n @code{subreg_regno_offset}. Normally this does not need to be defined.\n @end table\n \n@@ -2491,7 +2491,7 @@ debugging information like that provided by DWARF 2.\n @item ARG_POINTER_CFA_OFFSET (@var{fundecl})\n A C expression whose value is an integer giving the offset, in bytes,\n from the argument pointer to the canonical frame address (cfa).  The\n-final value should coincide with that calculated by \n+final value should coincide with that calculated by\n @code{INCOMING_FRAME_SP_OFFSET}.  Which is unfortunately not usable\n during virtual register instantiation.\n \n@@ -2527,7 +2527,7 @@ to store a stack adjustment to be applied before function return.\n This is used to unwind the stack to an exception handler's call frame.\n It will be assigned zero on code paths that return normally.\n \n-Typically this is a call-clobbered hard register that is otherwise \n+Typically this is a call-clobbered hard register that is otherwise\n untouched by the epilogue, but could also be a stack slot.\n \n You must define this macro if you want to support call frame exception\n@@ -2536,12 +2536,12 @@ handling like that provided by DWARF 2.\n @findex EH_RETURN_HANDLER_RTX\n @item EH_RETURN_HANDLER_RTX\n A C expression whose value is RTL representing a location in which\n-to store the address of an exception handler to which we should \n+to store the address of an exception handler to which we should\n return.  It will not be assigned on code paths that return normally.\n \n Typically this is the location in the call frame at which the normal\n-return address is stored.  For targets that return by popping an \n-address off the stack, this might be a memory address just below \n+return address is stored.  For targets that return by popping an\n+address off the stack, this might be a memory address just below\n the @emph{target} call frame rather than inside the current call\n frame.  @code{EH_RETURN_STACKADJ_RTX} will have already been assigned,\n so it may be used to calculate the location of the target call frame.\n@@ -2592,8 +2592,8 @@ will use the third approach.\n @findex STACK_CHECK_BUILTIN\n @item STACK_CHECK_BUILTIN\n A nonzero value if stack checking is done by the configuration files in a\n-machine-dependent manner.  You should define this macro if stack checking \n-is require by the ABI of your machine or if you would like to have to stack \n+machine-dependent manner.  You should define this macro if stack checking\n+is require by the ABI of your machine or if you would like to have to stack\n checking in some more efficient way than GCC's portable approach.\n The default value of this macro is zero.\n \n@@ -2606,7 +2606,7 @@ default value of 4096 is suitable for most systems.\n \n @findex STACK_CHECK_PROBE_LOAD\n @item STACK_CHECK_PROBE_LOAD\n-A integer which is nonzero if GCC should perform the stack probe \n+A integer which is nonzero if GCC should perform the stack probe\n as a load instruction and zero if GCC should use a store instruction.\n The default is zero, which is the most efficient choice on most systems.\n \n@@ -3047,7 +3047,7 @@ register in which to pass this part of the argument, and the mode of the\n register RTX indicates how large this part of the argument is.  The\n second operand of the @code{expr_list} is a @code{const_int} which gives\n the offset in bytes into the entire argument of where this part starts.\n-As a special exception the first @code{expr_list} in the @code{parallel} \n+As a special exception the first @code{expr_list} in the @code{parallel}\n RTX may have a first operand of zero.  This indicates that the entire\n argument is also stored on the stack.\n \n@@ -3222,8 +3222,8 @@ constant size shorter than an @code{int}, and upward otherwise.\n \n @findex PAD_VARARGS_DOWN\n @item PAD_VARARGS_DOWN\n-If defined, a C expression which determines whether the default \n-implementation of va_arg will attempt to pad down before reading the \n+If defined, a C expression which determines whether the default\n+implementation of va_arg will attempt to pad down before reading the\n next argument, if that argument is smaller than its aligned space as\n controlled by @code{PARM_BOUNDARY}.  If this macro is not defined, all such\n arguments are padded down if @code{BYTES_BIG_ENDIAN} is true.\n@@ -3246,7 +3246,7 @@ stack.\n @findex LOAD_ARGS_REVERSED\n @item LOAD_ARGS_REVERSED\n If defined, the order in which arguments are loaded into their\n-respective argument registers is reversed so that the last \n+respective argument registers is reversed so that the last\n argument is loaded first.  This macro only affects arguments\n passed in registers.\n \n@@ -3459,7 +3459,7 @@ must live across calls.\n @item DEFAULT_CALLER_SAVES\n Define this macro if function calls on the target machine do not preserve\n any registers; in other words, if @code{CALL_USED_REGISTERS} has 1\n-for all registers.  When defined, this macro enables @samp{-fcaller-saves} \n+for all registers.  When defined, this macro enables @samp{-fcaller-saves}\n by default for all optimization levels.  It has no effect for optimization\n levels 2 and higher, where @samp{-fcaller-saves} is the default.\n \n@@ -3938,12 +3938,12 @@ return 0.\n @findex FUNCTION_OK_FOR_SIBCALL\n @item FUNCTION_OK_FOR_SIBCALL (@var{decl})\n A C expression that evaluates to true if it is ok to perform a sibling\n-call to @var{decl}.  \n+call to @var{decl}.\n \n It is not uncommon for limitations of calling conventions to prevent\n tail calls to functions outside the current unit of translation, or\n during PIC compilation.  Use this macro to enforce these restrictions,\n-as the @code{sibcall} md pattern can not fail, or fall over to a \n+as the @code{sibcall} md pattern can not fail, or fall over to a\n ``normal'' call.\n @end table\n \n@@ -4700,7 +4700,7 @@ A C compound statement that attempts to replace @var{x}, which is an address\n that needs reloading, with a valid memory address for an operand of mode\n @var{mode}.  @var{win} will be a C statement label elsewhere in the code.\n It is not necessary to define this macro, but it might be useful for\n-performance reasons. \n+performance reasons.\n \n For example, on the i386, it is sometimes possible to use a single\n reload register instead of two by reloading a sum of two pseudo\n@@ -4841,7 +4841,7 @@ two places, the @file{md} file and in @code{NOTICE_UPDATE_CC}.\n \n @findex EXTRA_CC_MODES\n @item EXTRA_CC_MODES\n-A list of additional modes for condition code values in registers \n+A list of additional modes for condition code values in registers\n (@pxref{Jump Patterns}).  This macro should expand to a sequence of\n calls of the macro @code{CC} separated by white space.  @code{CC} takes\n two arguments.  The first is the enumeration name of the mode, which\n@@ -4994,7 +4994,7 @@ calculation is used for any RTL for which this macro does not return a\n value.\n \n This macro is optional; do not define it if the default cost assumptions\n-are adequate for the target machine.  \n+are adequate for the target machine.\n \n @findex ADDRESS_COST\n @item ADDRESS_COST (@var{address})\n@@ -5379,7 +5379,7 @@ data section.\n \n @findex JUMP_TABLES_IN_TEXT_SECTION\n @item JUMP_TABLES_IN_TEXT_SECTION\n-Define this macro to be an expression with a non-zero value if jump \n+Define this macro to be an expression with a non-zero value if jump\n tables (for @code{tablejump} insns) should be output in the text\n section, along with the assembler instructions.  Otherwise, the\n readonly data section is used.\n@@ -5697,8 +5697,8 @@ default is @code{\"\\t.byte\\t\"}.\n @item UNALIGNED_SHORT_ASM_OP\n @itemx UNALIGNED_INT_ASM_OP\n @itemx UNALIGNED_DOUBLE_INT_ASM_OP\n-A C string constant, including spacing, giving the pseudo-op to use \n-to assemble 16, 32, and 64 bit integers respectively @emph{without}\n+A C string constant, including spacing, giving the pseudo-op to use\n+to assemble 16-, 32-, and 64-bit integers respectively @emph{without}\n adding implicit padding or alignment.  These macros are required if\n DWARF 2 frame unwind is used.  On ELF systems, these will default\n to @code{.2byte}, @code{.4byte}, and @code{.8byte}.@refill\n@@ -6819,7 +6819,7 @@ If this macro is not defined, nothing special is output at the end of\n the jump-table.\n @end table\n \n-@node Exception Region Output \n+@node Exception Region Output\n @subsection Assembler Commands for Exception Regions\n \n @c prevent bad page break with this line\n@@ -6936,7 +6936,7 @@ implementation.\n \n @findex LABEL_ALIGN_AFTER_BARRIER_MAX_SKIP\n @item LABEL_ALIGN_AFTER_BARRIER_MAX_SKIP\n-The maximum number of bytes to skip when applying \n+The maximum number of bytes to skip when applying\n @code{LABEL_ALIGN_AFTER_BARRIER}.  This works only if\n @code{ASM_OUTPUT_MAX_SKIP_ALIGN} is defined.\n \n@@ -7693,7 +7693,7 @@ return an integer value not larger than the corresponding element in\n NUM_MODES_FOR_MODE_SWITCHING, to denote the mode that @var{entity} must\n be switched into prior to the execution of INSN.\n \n-@findex NORMAL_MODE \n+@findex NORMAL_MODE\n @item NORMAL_MODE (@var{entity})\n If this macro is defined, it is evaluated for every @var{entity} that needs\n mode switching.  It should evaluate to an integer, which is a mode that\n@@ -7753,9 +7753,9 @@ declaration will be generated in @file{insn-codes.h}.\n @item SPECIAL_MODE_PREDICATES\n @findex SPECIAL_MODE_PREDICATES\n Define this if you have special predicates that know special things\n-about modes.  Genrecog will warn about certain forms of \n+about modes.  Genrecog will warn about certain forms of\n @code{match_operand} without a mode; if the operand predicate is\n-listed in @code{SPECIAL_MODE_PREDICATES}, the warning will be \n+listed in @code{SPECIAL_MODE_PREDICATES}, the warning will be\n suppressed.\n \n Here is an example from the IA-32 port (@code{ext_register_operand}\n@@ -7777,7 +7777,7 @@ elements of a jump-table should have.\n Optional: return the preferred mode for an @code{addr_diff_vec}\n when the minimum and maximum offset are known.  If you define this,\n it enables extra code in branch shortening to deal with @code{addr_diff_vec}.\n-To make this work, you also have to define INSN_ALIGN and \n+To make this work, you also have to define INSN_ALIGN and\n make the alignment for @code{addr_diff_vec} explicit.\n The @var{body} argument is provided so that the offset_unsigned and scale\n flags can be updated."}]}