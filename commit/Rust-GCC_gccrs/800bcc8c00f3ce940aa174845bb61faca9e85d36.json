{"sha": "800bcc8c00f3ce940aa174845bb61faca9e85d36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODAwYmNjOGMwMGYzY2U5NDBhYTE3NDg0NWJiNjFmYWNhOWU4NWQzNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-05-19T08:11:01Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-05-19T08:11:01Z"}, "message": "openmp: Add basic library allocator support.\n\nThis patch adds very basic allocator support (omp_{init,destroy}_allocator,\nomp_{alloc,free}, omp_[sg]et_default_allocator).\nThe plan is to use memkind (likely dlopened) for high bandwidth memory, but\nthat part isn't implemented yet, probably mlock for pinned memory and see\nwhat other options there are for other kinds of memory.\nFor offloading targets, we need to decide if we want to support the\ndynamic allocators (and on which targets), or if e.g. all we do is at compile\ntime replace omp_alloc/omp_free calls with constexpr predefined allocators\nwith something special.\n\nAnd allocate directive and allocator/uses_allocators clauses are future work\ntoo.\n\n2020-05-19  Jakub Jelinek  <jakub@redhat.com>\n\n\t* omp.h.in (omp_uintptr_t): New typedef.\n\t(__GOMP_UINTPTR_T_ENUM): Define.\n\t(omp_memspace_handle_t, omp_allocator_handle_t, omp_alloctrait_key_t,\n\tomp_alloctrait_value_t, omp_alloctrait_t): New typedefs.\n\t(__GOMP_DEFAULT_NULL_ALLOCATOR): Define.\n\t(omp_init_allocator, omp_destroy_allocator, omp_set_default_allocator,\n\tomp_get_default_allocator, omp_alloc, omp_free): Declare.\n\t* libgomp.h (struct gomp_team_state): Add def_allocator field.\n\t(gomp_def_allocator): Declare.\n\t* libgomp.map (OMP_5.0.1): Export omp_set_default_allocator,\n\tomp_get_default_allocator, omp_init_allocator, omp_destroy_allocator,\n\tomp_alloc and omp_free.\n\t* team.c (gomp_team_start): Copy over ts.def_allocator.\n\t* env.c (gomp_def_allocator): New variable.\n\t(parse_wait_policy): Adjust function comment.\n\t(parse_allocator): New function.\n\t(handle_omp_display_env): Print OMP_ALLOCATOR.\n\t(initialize_env): Call parse_allocator.\n\t* Makefile.am (libgomp_la_SOURCES): Add allocator.c.\n\t* allocator.c: New file.\n\t* icv.c (omp_set_default_allocator, omp_get_default_allocator): New\n\tfunctions.\n\t* testsuite/libgomp.c-c++-common/alloc-1.c: New test.\n\t* testsuite/libgomp.c-c++-common/alloc-2.c: New test.\n\t* testsuite/libgomp.c-c++-common/alloc-3.c: New test.\n\t* Makefile.in: Regenerated.", "tree": {"sha": "6d47155dfd3312da918cf370cda1fd3e00ae0fe6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d47155dfd3312da918cf370cda1fd3e00ae0fe6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/800bcc8c00f3ce940aa174845bb61faca9e85d36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/800bcc8c00f3ce940aa174845bb61faca9e85d36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/800bcc8c00f3ce940aa174845bb61faca9e85d36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/800bcc8c00f3ce940aa174845bb61faca9e85d36/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3b44e34085c16059da5a7a7a3d84abb46d40884", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3b44e34085c16059da5a7a7a3d84abb46d40884", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3b44e34085c16059da5a7a7a3d84abb46d40884"}], "stats": {"total": 455, "additions": 450, "deletions": 5}, "files": [{"sha": "5d40619185374a8a6c15ea796c97aad498d60e52", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/800bcc8c00f3ce940aa174845bb61faca9e85d36/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/800bcc8c00f3ce940aa174845bb61faca9e85d36/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=800bcc8c00f3ce940aa174845bb61faca9e85d36", "patch": "@@ -1,3 +1,32 @@\n+2020-05-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* omp.h.in (omp_uintptr_t): New typedef.\n+\t(__GOMP_UINTPTR_T_ENUM): Define.\n+\t(omp_memspace_handle_t, omp_allocator_handle_t, omp_alloctrait_key_t,\n+\tomp_alloctrait_value_t, omp_alloctrait_t): New typedefs.\n+\t(__GOMP_DEFAULT_NULL_ALLOCATOR): Define.\n+\t(omp_init_allocator, omp_destroy_allocator, omp_set_default_allocator,\n+\tomp_get_default_allocator, omp_alloc, omp_free): Declare.\n+\t* libgomp.h (struct gomp_team_state): Add def_allocator field.\n+\t(gomp_def_allocator): Declare.\n+\t* libgomp.map (OMP_5.0.1): Export omp_set_default_allocator,\n+\tomp_get_default_allocator, omp_init_allocator, omp_destroy_allocator,\n+\tomp_alloc and omp_free.\n+\t* team.c (gomp_team_start): Copy over ts.def_allocator.\n+\t* env.c (gomp_def_allocator): New variable.\n+\t(parse_wait_policy): Adjust function comment.\n+\t(parse_allocator): New function.\n+\t(handle_omp_display_env): Print OMP_ALLOCATOR.\n+\t(initialize_env): Call parse_allocator.\n+\t* Makefile.am (libgomp_la_SOURCES): Add allocator.c.\n+\t* allocator.c: New file.\n+\t* icv.c (omp_set_default_allocator, omp_get_default_allocator): New\n+\tfunctions.\n+\t* testsuite/libgomp.c-c++-common/alloc-1.c: New test.\n+\t* testsuite/libgomp.c-c++-common/alloc-2.c: New test.\n+\t* testsuite/libgomp.c-c++-common/alloc-3.c: New test.\n+\t* Makefile.in: Regenerated.\n+\n 2020-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/95147"}, {"sha": "b84156291e8c01cd6dd989decb6d20c3c3258301", "filename": "libgomp/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/800bcc8c00f3ce940aa174845bb61faca9e85d36/libgomp%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/800bcc8c00f3ce940aa174845bb61faca9e85d36/libgomp%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FMakefile.am?ref=800bcc8c00f3ce940aa174845bb61faca9e85d36", "patch": "@@ -65,7 +65,7 @@ libgomp_la_SOURCES = alloc.c atomic.c barrier.c critical.c env.c error.c \\\n \tproc.c sem.c bar.c ptrlock.c time.c fortran.c affinity.c target.c \\\n \tsplay-tree.c libgomp-plugin.c oacc-parallel.c oacc-host.c oacc-init.c \\\n \toacc-mem.c oacc-async.c oacc-plugin.c oacc-cuda.c priority_queue.c \\\n-\taffinity-fmt.c teams.c oacc-profiling.c oacc-target.c\n+\taffinity-fmt.c teams.c allocator.c oacc-profiling.c oacc-target.c\n \n include $(top_srcdir)/plugin/Makefrag.am\n "}, {"sha": "5ff2ac14db916a60f1c221d941ac98adcfb04fae", "filename": "libgomp/Makefile.in", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/800bcc8c00f3ce940aa174845bb61faca9e85d36/libgomp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/800bcc8c00f3ce940aa174845bb61faca9e85d36/libgomp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FMakefile.in?ref=800bcc8c00f3ce940aa174845bb61faca9e85d36", "patch": "@@ -231,7 +231,8 @@ am_libgomp_la_OBJECTS = alloc.lo atomic.lo barrier.lo critical.lo \\\n \ttarget.lo splay-tree.lo libgomp-plugin.lo oacc-parallel.lo \\\n \toacc-host.lo oacc-init.lo oacc-mem.lo oacc-async.lo \\\n \toacc-plugin.lo oacc-cuda.lo priority_queue.lo affinity-fmt.lo \\\n-\tteams.lo oacc-profiling.lo oacc-target.lo $(am__objects_1)\n+\tteams.lo allocator.lo oacc-profiling.lo oacc-target.lo \\\n+\t$(am__objects_1)\n libgomp_la_OBJECTS = $(am_libgomp_la_OBJECTS)\n AM_V_P = $(am__v_P_@AM_V@)\n am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)\n@@ -572,7 +573,7 @@ libgomp_la_SOURCES = alloc.c atomic.c barrier.c critical.c env.c \\\n \taffinity.c target.c splay-tree.c libgomp-plugin.c \\\n \toacc-parallel.c oacc-host.c oacc-init.c oacc-mem.c \\\n \toacc-async.c oacc-plugin.c oacc-cuda.c priority_queue.c \\\n-\taffinity-fmt.c teams.c oacc-profiling.c oacc-target.c \\\n+\taffinity-fmt.c teams.c allocator.c oacc-profiling.c oacc-target.c \\\n \t$(am__append_4)\n \n # Nvidia PTX OpenACC plugin.\n@@ -765,6 +766,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/affinity-fmt.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/affinity.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/alloc.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/allocator.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/atomic.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/bar.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/barrier.Plo@am__quote@"}, {"sha": "c0c4730d47c7d0b8320206bb62a60bc1f8043f2d", "filename": "libgomp/env.c", "status": "modified", "additions": 60, "deletions": 2, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/800bcc8c00f3ce940aa174845bb61faca9e85d36/libgomp%2Fenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/800bcc8c00f3ce940aa174845bb61faca9e85d36/libgomp%2Fenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fenv.c?ref=800bcc8c00f3ce940aa174845bb61faca9e85d36", "patch": "@@ -86,6 +86,7 @@ char *gomp_bind_var_list;\n unsigned long gomp_bind_var_list_len;\n void **gomp_places_list;\n unsigned long gomp_places_list_len;\n+uintptr_t gomp_def_allocator = omp_default_mem_alloc;\n int gomp_debug_var;\n unsigned int gomp_num_teams_var;\n bool gomp_display_affinity_var;\n@@ -949,8 +950,7 @@ parse_boolean (const char *name, bool *value)\n     gomp_error (\"Invalid value for environment variable %s\", name);\n }\n \n-/* Parse the OMP_WAIT_POLICY environment variable and store the\n-   result in gomp_active_wait_policy.  */\n+/* Parse the OMP_WAIT_POLICY environment variable and return the value.  */\n \n static int\n parse_wait_policy (void)\n@@ -1084,6 +1084,47 @@ parse_affinity (bool ignore)\n   return false;\n }\n \n+/* Parse the OMP_ALLOCATOR environment variable and return the value.  */\n+\n+static uintptr_t\n+parse_allocator (void)\n+{\n+  const char *env;\n+  uintptr_t ret = omp_default_mem_alloc;\n+\n+  env = getenv (\"OMP_ALLOCATOR\");\n+  if (env == NULL)\n+    return ret;\n+\n+  while (isspace ((unsigned char) *env))\n+    ++env;\n+  if (0)\n+    ;\n+#define C(v) \\\n+  else if (strncasecmp (env, #v, sizeof (#v) - 1) == 0)\t\\\n+    {\t\t\t\t\t\t\t\\\n+      ret = v;\t\t\t\t\t\t\\\n+      env += sizeof (#v) - 1;\t\t\t\t\\\n+    }\n+  C (omp_default_mem_alloc)\n+  C (omp_large_cap_mem_alloc)\n+  C (omp_const_mem_alloc)\n+  C (omp_high_bw_mem_alloc)\n+  C (omp_low_lat_mem_alloc)\n+  C (omp_cgroup_mem_alloc)\n+  C (omp_pteam_mem_alloc)\n+  C (omp_thread_mem_alloc)\n+#undef C\n+  else\n+    env = \"X\";\n+  while (isspace ((unsigned char) *env))\n+    ++env;\n+  if (*env == '\\0')\n+    return ret;\n+  gomp_error (\"Invalid value for environment variable OMP_ALLOCATOR\");\n+  return omp_default_mem_alloc;\n+}\n+\n static void\n parse_acc_device_type (void)\n {\n@@ -1276,6 +1317,22 @@ handle_omp_display_env (unsigned long stacksize, int wait_policy)\n \t   gomp_display_affinity_var ? \"TRUE\" : \"FALSE\");\n   fprintf (stderr, \"  OMP_AFFINITY_FORMAT = '%s'\\n\",\n \t   gomp_affinity_format_var);\n+  fprintf (stderr, \"  OMP_ALLOCATOR = '\");\n+  switch (gomp_def_allocator)\n+    {\n+#define C(v) case v: fputs (#v, stderr); break;\n+    C (omp_default_mem_alloc)\n+    C (omp_large_cap_mem_alloc)\n+    C (omp_const_mem_alloc)\n+    C (omp_high_bw_mem_alloc)\n+    C (omp_low_lat_mem_alloc)\n+    C (omp_cgroup_mem_alloc)\n+    C (omp_pteam_mem_alloc)\n+    C (omp_thread_mem_alloc)\n+#undef C\n+    default: break;\n+    }\n+  fputs (\"'\\n\", stderr);\n \n   if (verbose)\n     {\n@@ -1312,6 +1369,7 @@ initialize_env (void)\n   parse_int (\"OMP_MAX_TASK_PRIORITY\", &gomp_max_task_priority_var, true);\n   parse_unsigned_long (\"OMP_MAX_ACTIVE_LEVELS\", &gomp_max_active_levels_var,\n \t\t       true);\n+  gomp_def_allocator = parse_allocator ();\n   if (parse_unsigned_long (\"OMP_THREAD_LIMIT\", &thread_limit_var, false))\n     {\n       gomp_global_icv.thread_limit_var"}, {"sha": "b13289b47a74e36b7d39cb9e85fae6d42df99893", "filename": "libgomp/icv.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/800bcc8c00f3ce940aa174845bb61faca9e85d36/libgomp%2Ficv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/800bcc8c00f3ce940aa174845bb61faca9e85d36/libgomp%2Ficv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ficv.c?ref=800bcc8c00f3ce940aa174845bb61faca9e85d36", "patch": "@@ -197,6 +197,25 @@ omp_get_partition_place_nums (int *place_nums)\n     *place_nums++ = thr->ts.place_partition_off + i;\n }\n \n+void\n+omp_set_default_allocator (omp_allocator_handle_t allocator)\n+{\n+  struct gomp_thread *thr = gomp_thread ();\n+  if (allocator == omp_null_allocator)\n+    allocator = omp_default_mem_alloc;\n+  thr->ts.def_allocator = (uintptr_t) allocator;\n+}\n+\n+omp_allocator_handle_t\n+omp_get_default_allocator (void)\n+{\n+  struct gomp_thread *thr = gomp_thread ();\n+  if (thr->ts.def_allocator == omp_null_allocator)\n+    return (omp_allocator_handle_t) gomp_def_allocator;\n+  else\n+    return (omp_allocator_handle_t) thr->ts.def_allocator;\n+}\n+\n ialias (omp_set_dynamic)\n ialias (omp_set_nested)\n ialias (omp_set_num_threads)"}, {"sha": "ca42e0de64041621079678b9d82f5b2101d76591", "filename": "libgomp/libgomp.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/800bcc8c00f3ce940aa174845bb61faca9e85d36/libgomp%2Flibgomp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/800bcc8c00f3ce940aa174845bb61faca9e85d36/libgomp%2Flibgomp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.h?ref=800bcc8c00f3ce940aa174845bb61faca9e85d36", "patch": "@@ -397,6 +397,9 @@ struct gomp_team_state\n   unsigned place_partition_off;\n   unsigned place_partition_len;\n \n+  /* Def-allocator-var ICV.  */\n+  uintptr_t def_allocator;\n+\n #ifdef HAVE_SYNC_BUILTINS\n   /* Number of single stmts encountered.  */\n   unsigned long single_count;\n@@ -450,6 +453,7 @@ extern int gomp_debug_var;\n extern bool gomp_display_affinity_var;\n extern char *gomp_affinity_format_var;\n extern size_t gomp_affinity_format_len;\n+extern uintptr_t gomp_def_allocator;\n extern int goacc_device_num;\n extern char *goacc_device_type;\n extern int goacc_default_dims[GOMP_DIM_MAX];"}, {"sha": "012e3d645fe0d6f18945a45af82df2c0a816ad18", "filename": "libgomp/libgomp.map", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/800bcc8c00f3ce940aa174845bb61faca9e85d36/libgomp%2Flibgomp.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/800bcc8c00f3ce940aa174845bb61faca9e85d36/libgomp%2Flibgomp.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.map?ref=800bcc8c00f3ce940aa174845bb61faca9e85d36", "patch": "@@ -180,6 +180,16 @@ OMP_5.0 {\n \tomp_pause_resource_all_;\n } OMP_4.5;\n \n+OMP_5.0.1 {\n+  global:\n+\tomp_set_default_allocator;\n+\tomp_get_default_allocator;\n+\tomp_init_allocator;\n+\tomp_destroy_allocator;\n+\tomp_alloc;\n+\tomp_free;\n+} OMP_5.0;\n+\n GOMP_1.0 {\n   global:\n \tGOMP_atomic_end;"}, {"sha": "e2db33e005f88a6efb65b467ea5a13f743799e9c", "filename": "libgomp/omp.h.in", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/800bcc8c00f3ce940aa174845bb61faca9e85d36/libgomp%2Fomp.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/800bcc8c00f3ce940aa174845bb61faca9e85d36/libgomp%2Fomp.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fomp.h.in?ref=800bcc8c00f3ce940aa174845bb61faca9e85d36", "patch": "@@ -90,11 +90,87 @@ typedef enum omp_pause_resource_t\n   omp_pause_hard = 2\n } omp_pause_resource_t;\n \n+typedef __UINTPTR_TYPE__ omp_uintptr_t;\n+\n+#if __cplusplus >= 201103L\n+# define __GOMP_UINTPTR_T_ENUM : omp_uintptr_t\n+#else\n+# define __GOMP_UINTPTR_T_ENUM\n+#endif\n+\n+typedef enum omp_memspace_handle_t __GOMP_UINTPTR_T_ENUM\n+{\n+  omp_default_mem_space = 0,\n+  omp_large_cap_mem_space = 1,\n+  omp_const_mem_space = 2,\n+  omp_high_bw_mem_space = 3,\n+  omp_low_lat_mem_space = 4,\n+  __omp_memspace_handle_t_max__ = __UINTPTR_MAX__\n+} omp_memspace_handle_t;\n+\n+typedef enum omp_allocator_handle_t __GOMP_UINTPTR_T_ENUM\n+{\n+  omp_null_allocator = 0,\n+  omp_default_mem_alloc = 1,\n+  omp_large_cap_mem_alloc = 2,\n+  omp_const_mem_alloc = 3,\n+  omp_high_bw_mem_alloc = 4,\n+  omp_low_lat_mem_alloc = 5,\n+  omp_cgroup_mem_alloc = 6,\n+  omp_pteam_mem_alloc = 7,\n+  omp_thread_mem_alloc = 8,\n+  __omp_allocator_handle_t_max__ = __UINTPTR_MAX__\n+} omp_allocator_handle_t;\n+\n+typedef enum omp_alloctrait_key_t\n+{\n+  omp_atk_sync_hint = 1,\n+  omp_atk_alignment = 2,\n+  omp_atk_access = 3,\n+  omp_atk_pool_size = 4,\n+  omp_atk_fallback = 5,\n+  omp_atk_fb_data = 6,\n+  omp_atk_pinned = 7,\n+  omp_atk_partition = 8\n+} omp_alloctrait_key_t;\n+\n+typedef enum omp_alloctrait_value_t\n+{\n+  omp_atv_false = 0,\n+  omp_atv_true = 1,\n+  omp_atv_default = 2,\n+  omp_atv_contended = 3,\n+  omp_atv_uncontended = 4,\n+  omp_atv_sequential = 5,\n+  omp_atv_private = 6,\n+  omp_atv_all = 7,\n+  omp_atv_thread = 8,\n+  omp_atv_pteam = 9,\n+  omp_atv_cgroup = 10,\n+  omp_atv_default_mem_fb = 11,\n+  omp_atv_null_fb = 12,\n+  omp_atv_abort_fb = 13,\n+  omp_atv_allocator_fb = 14,\n+  omp_atv_environment = 15,\n+  omp_atv_nearest = 16,\n+  omp_atv_blocked = 17,\n+  omp_atv_interleaved = 18,\n+  __omp_alloctrait_value_max__ = __UINTPTR_MAX__\n+} omp_alloctrait_value_t;\n+\n+typedef struct omp_alloctrait_t\n+{\n+  omp_alloctrait_key_t key;\n+  omp_uintptr_t value;\n+} omp_alloctrait_t;\n+\n #ifdef __cplusplus\n extern \"C\" {\n # define __GOMP_NOTHROW throw ()\n+# define __GOMP_DEFAULT_NULL_ALLOCATOR = omp_null_allocator\n #else\n # define __GOMP_NOTHROW __attribute__((__nothrow__))\n+# define __GOMP_DEFAULT_NULL_ALLOCATOR\n #endif\n \n extern void omp_set_num_threads (int) __GOMP_NOTHROW;\n@@ -188,6 +264,20 @@ extern __SIZE_TYPE__ omp_capture_affinity (char *, __SIZE_TYPE__, const char *)\n extern int omp_pause_resource (omp_pause_resource_t, int) __GOMP_NOTHROW;\n extern int omp_pause_resource_all (omp_pause_resource_t) __GOMP_NOTHROW;\n \n+extern omp_allocator_handle_t omp_init_allocator (omp_memspace_handle_t,\n+\t\t\t\t\t\t  int,\n+\t\t\t\t\t\t  const omp_alloctrait_t [])\n+  __GOMP_NOTHROW;\n+extern void omp_destroy_allocator (omp_allocator_handle_t) __GOMP_NOTHROW;\n+extern void omp_set_default_allocator (omp_allocator_handle_t) __GOMP_NOTHROW;\n+extern omp_allocator_handle_t omp_get_default_allocator (void) __GOMP_NOTHROW;\n+extern void *omp_alloc (__SIZE_TYPE__,\n+\t\t\tomp_allocator_handle_t __GOMP_DEFAULT_NULL_ALLOCATOR)\n+  __GOMP_NOTHROW;\n+extern void omp_free (void *,\n+\t\t      omp_allocator_handle_t __GOMP_DEFAULT_NULL_ALLOCATOR)\n+  __GOMP_NOTHROW;\n+\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "cbc3aec0265c7d6f15017a2645dfde09b82e0008", "filename": "libgomp/team.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/800bcc8c00f3ce940aa174845bb61faca9e85d36/libgomp%2Fteam.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/800bcc8c00f3ce940aa174845bb61faca9e85d36/libgomp%2Fteam.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fteam.c?ref=800bcc8c00f3ce940aa174845bb61faca9e85d36", "patch": "@@ -636,6 +636,7 @@ gomp_team_start (void (*fn) (void *), void *data, unsigned nthreads,\n \t  nthr->ts.active_level = thr->ts.active_level;\n \t  nthr->ts.place_partition_off = place_partition_off;\n \t  nthr->ts.place_partition_len = place_partition_len;\n+\t  nthr->ts.def_allocator = thr->ts.def_allocator;\n #ifdef HAVE_SYNC_BUILTINS\n \t  nthr->ts.single_count = 0;\n #endif\n@@ -823,6 +824,7 @@ gomp_team_start (void (*fn) (void *), void *data, unsigned nthreads,\n       start_data->ts.team_id = i;\n       start_data->ts.level = team->prev_ts.level + 1;\n       start_data->ts.active_level = thr->ts.active_level;\n+      start_data->ts.def_allocator = thr->ts.def_allocator;\n #ifdef HAVE_SYNC_BUILTINS\n       start_data->ts.single_count = 0;\n #endif"}, {"sha": "9259a9c44df7b5d593b5bb541479e9ff7563327b", "filename": "libgomp/testsuite/libgomp.c-c++-common/alloc-1.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/800bcc8c00f3ce940aa174845bb61faca9e85d36/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Falloc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/800bcc8c00f3ce940aa174845bb61faca9e85d36/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Falloc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Falloc-1.c?ref=800bcc8c00f3ce940aa174845bb61faca9e85d36", "patch": "@@ -0,0 +1,157 @@\n+#include <omp.h>\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+const omp_alloctrait_t traits2[]\n+= { { omp_atk_alignment, 16 },\n+    { omp_atk_sync_hint, omp_atv_default },\n+    { omp_atk_access, omp_atv_default },\n+    { omp_atk_pool_size, 1024 },\n+    { omp_atk_fallback, omp_atv_default_mem_fb },\n+    { omp_atk_partition, omp_atv_environment } };\n+omp_alloctrait_t traits3[]\n+= { { omp_atk_sync_hint, omp_atv_uncontended },\n+    { omp_atk_alignment, 32 },\n+    { omp_atk_access, omp_atv_all },\n+    { omp_atk_pool_size, 512 },\n+    { omp_atk_fallback, omp_atv_allocator_fb },\n+    { omp_atk_fb_data, 0 },\n+    { omp_atk_partition, omp_atv_default } };\n+const omp_alloctrait_t traits4[]\n+= { { omp_atk_alignment, 128 },\n+    { omp_atk_pool_size, 1024 },\n+    { omp_atk_fallback, omp_atv_null_fb } };\n+\n+int\n+main ()\n+{\n+  int *volatile p = (int *) omp_alloc (3 * sizeof (int), omp_default_mem_alloc);\n+  int *volatile q;\n+  int *volatile r;\n+  omp_alloctrait_t traits[3]\n+    = { { omp_atk_alignment, 64 },\n+\t{ omp_atk_fallback, omp_atv_null_fb },\n+\t{ omp_atk_pool_size, 4096 } };\n+  omp_allocator_handle_t a, a2;\n+\n+  if ((((uintptr_t) p) % __alignof (int)) != 0)\n+    abort ();\n+  p[0] = 1;\n+  p[1] = 2;\n+  p[2] = 3;\n+  omp_free (p, omp_default_mem_alloc);\n+  p = (int *) omp_alloc (2 * sizeof (int), omp_default_mem_alloc);\n+  if ((((uintptr_t) p) % __alignof (int)) != 0)\n+    abort ();\n+  p[0] = 1;\n+  p[1] = 2;\n+  omp_free (p, omp_null_allocator);\n+  omp_set_default_allocator (omp_default_mem_alloc);\n+  p = (int *) omp_alloc (sizeof (int), omp_null_allocator);\n+  if ((((uintptr_t) p) % __alignof (int)) != 0)\n+    abort ();\n+  p[0] = 3;\n+  omp_free (p, omp_get_default_allocator ());\n+\n+  a = omp_init_allocator (omp_default_mem_space, 3, traits);\n+  if (a == omp_null_allocator)\n+    abort ();\n+  p = (int *) omp_alloc (3072, a);\n+  if ((((uintptr_t) p) % 64) != 0)\n+    abort ();\n+  p[0] = 1;\n+  p[3071 / sizeof (int)] = 2;\n+  if (omp_alloc (3072, a) != NULL)\n+    abort ();\n+  omp_free (p, a);\n+  p = (int *) omp_alloc (3072, a);\n+  p[0] = 3;\n+  p[3071 / sizeof (int)] = 4;\n+  omp_free (p, omp_null_allocator);\n+  omp_set_default_allocator (a);\n+  if (omp_get_default_allocator () != a)\n+    abort ();\n+  p = (int *) omp_alloc (3072, omp_null_allocator);\n+  if (omp_alloc (3072, omp_null_allocator) != NULL)\n+    abort ();\n+  omp_free (p, a);\n+  omp_destroy_allocator (a);\n+\n+  a = omp_init_allocator (omp_default_mem_space,\n+\t\t\t  sizeof (traits2) / sizeof (traits2[0]),\n+\t\t\t  traits2);\n+  if (a == omp_null_allocator)\n+    abort ();\n+  if (traits3[5].key != omp_atk_fb_data)\n+    abort ();\n+  traits3[5].value = (uintptr_t) a;\n+  a2 = omp_init_allocator (omp_default_mem_space,\n+\t\t\t   sizeof (traits3) / sizeof (traits3[0]),\n+\t\t\t   traits3);\n+  if (a2 == omp_null_allocator)\n+    abort ();\n+  p = (int *) omp_alloc (420, a2);\n+  if ((((uintptr_t) p) % 32) != 0)\n+    abort ();\n+  p[0] = 5;\n+  p[419 / sizeof (int)] = 6;\n+  q = (int *) omp_alloc (768, a2);\n+  if ((((uintptr_t) q) % 16) != 0)\n+    abort ();\n+  q[0] = 7;\n+  q[767 / sizeof (int)] = 8;\n+  r = (int *) omp_alloc (512, a2);\n+  if ((((uintptr_t) r) % __alignof (int)) != 0)\n+    abort ();\n+  r[0] = 9;\n+  r[511 / sizeof (int)] = 10;\n+  omp_free (p, omp_null_allocator);\n+  omp_free (q, a2);\n+  omp_free (r, omp_null_allocator);\n+  omp_destroy_allocator (a2);\n+  omp_destroy_allocator (a);\n+\n+  a = omp_init_allocator (omp_default_mem_space,\n+\t\t\t  sizeof (traits4) / sizeof (traits4[0]),\n+\t\t\t  traits4);\n+  if (a == omp_null_allocator)\n+    abort ();\n+  if (traits3[5].key != omp_atk_fb_data)\n+    abort ();\n+  traits3[5].value = (uintptr_t) a;\n+  a2 = omp_init_allocator (omp_default_mem_space,\n+\t\t\t   sizeof (traits3) / sizeof (traits3[0]),\n+\t\t\t   traits3);\n+  if (a2 == omp_null_allocator)\n+    abort ();\n+  omp_set_default_allocator (a2);\n+#ifdef __cplusplus\n+  p = static_cast <int *> (omp_alloc (420));\n+#else\n+  p = (int *) omp_alloc (420, omp_null_allocator);\n+#endif\n+  if ((((uintptr_t) p) % 32) != 0)\n+    abort ();\n+  p[0] = 5;\n+  p[419 / sizeof (int)] = 6;\n+  q = (int *) omp_alloc (768, omp_null_allocator);\n+  if ((((uintptr_t) q) % 128) != 0)\n+    abort ();\n+  q[0] = 7;\n+  q[767 / sizeof (int)] = 8;\n+  if (omp_alloc (768, omp_null_allocator) != NULL)\n+    abort ();\n+#ifdef __cplusplus\n+  omp_free (p);\n+  omp_free (q);\n+  omp_free (NULL);\n+#else\n+  omp_free (p, omp_null_allocator);\n+  omp_free (q, omp_null_allocator);\n+  omp_free (NULL, omp_null_allocator);\n+#endif\n+  omp_free (NULL, omp_null_allocator);\n+  omp_destroy_allocator (a2);\n+  omp_destroy_allocator (a);\n+  return 0;\n+}"}, {"sha": "ee539580f2bf4fb31aea2c1c862895b29393d653", "filename": "libgomp/testsuite/libgomp.c-c++-common/alloc-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/800bcc8c00f3ce940aa174845bb61faca9e85d36/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Falloc-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/800bcc8c00f3ce940aa174845bb61faca9e85d36/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Falloc-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Falloc-2.c?ref=800bcc8c00f3ce940aa174845bb61faca9e85d36", "patch": "@@ -0,0 +1,46 @@\n+#include <omp.h>\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+int\n+main ()\n+{\n+  omp_alloctrait_t traits[3]\n+    = { { omp_atk_alignment, 64 },\n+\t{ omp_atk_fallback, omp_atv_null_fb },\n+\t{ omp_atk_pool_size, 4096 } };\n+  omp_allocator_handle_t a\n+    = omp_init_allocator (omp_default_mem_space, 3, traits);\n+  if (a == omp_null_allocator)\n+    abort ();\n+\n+  #pragma omp parallel num_threads(4)\n+  {\n+    int n = omp_get_thread_num ();\n+    double *volatile p, *volatile q;\n+    omp_set_default_allocator ((n & 1) ? a : omp_default_mem_alloc);\n+    p = (double *) omp_alloc (1696, omp_null_allocator);\n+    if (p == NULL)\n+      abort ();\n+    p[0] = 1.0;\n+    p[1695 / sizeof (double *)] = 2.0;\n+    #pragma omp barrier\n+    omp_set_default_allocator ((n & 1) ? omp_default_mem_alloc : a);\n+    q = (double *) omp_alloc (1696, omp_null_allocator);\n+    if (n & 1)\n+      {\n+\tif (q == NULL)\n+\t  abort ();\n+\tq[0] = 3.0;\n+\tq[1695 / sizeof (double *)] = 4.0;\n+      }\n+    else if (q != NULL)\n+      abort ();\n+    #pragma omp barrier\n+    omp_free (p, omp_null_allocator);\n+    omp_free (q, omp_null_allocator);\n+    omp_set_default_allocator (omp_default_mem_alloc);\n+  }\n+  omp_destroy_allocator (a);\n+  return 0;\n+}"}, {"sha": "a30cdc05e6051302253ec6c46dfdef4756826df3", "filename": "libgomp/testsuite/libgomp.c-c++-common/alloc-3.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/800bcc8c00f3ce940aa174845bb61faca9e85d36/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Falloc-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/800bcc8c00f3ce940aa174845bb61faca9e85d36/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Falloc-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Falloc-3.c?ref=800bcc8c00f3ce940aa174845bb61faca9e85d36", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-set-target-env-var OMP_ALLOCATOR \"omp_cgroup_mem_alloc\" } */\n+/* { dg-set-target-env-var OMP_DISPLAY_ENV \"true\" } */\n+\n+#include <string.h>\n+#include <stdlib.h>\n+#include <omp.h>\n+\n+int\n+main ()\n+{\n+  const char *p = getenv (\"OMP_ALLOCATOR\");\n+  if (p && strcmp (p, \"omp_cgroup_mem_alloc\") == 0)\n+    {\n+      if (omp_get_default_allocator () != omp_cgroup_mem_alloc)\n+\tabort ();\n+      #pragma omp parallel num_threads (2)\n+      {\n+\tif (omp_get_default_allocator () != omp_cgroup_mem_alloc)\n+\t  abort ();\n+\t#pragma omp parallel num_threads (2)\n+\t{\n+\t  if (omp_get_default_allocator () != omp_cgroup_mem_alloc)\n+\t    abort ();\n+\t}\n+      }\n+    }\n+  return 0;\n+}"}]}