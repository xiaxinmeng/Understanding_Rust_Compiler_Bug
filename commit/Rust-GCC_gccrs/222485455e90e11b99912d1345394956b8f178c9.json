{"sha": "222485455e90e11b99912d1345394956b8f178c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIyNDg1NDU1ZTkwZTExYjk5OTEyZDEzNDUzOTQ5NTZiOGYxNzhjOQ==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-11-02T22:31:03Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-11-02T22:31:03Z"}, "message": "acconfig.h: Update comments.\n\n2001-11-02  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* acconfig.h:  Update comments.\n\t* acinclude.m4 (GLIBCPP_ENABLE_C99):  Move strtoll, strtoull tests...\n\t(GLIBCPP_ENABLE_LONG_LONG):  ...to here.  Don't check enable_c99.\n\t* aclocal.m4:  Regenerate.\n\t* config.h.in:  Regenerate.\n\t* configure:  Regenerate.\n\n\t* include/bits/boost_concept_check.h:  Unconditionally compile uses\n\tof 'long long' which require only compiler support, not C lib support.\n\t* include/bits/cpp_type_traits.h:  Likewise.\n\t* include/bits/std_limits.h:  Likewise.\n\t* include/bits/type_traits.h:  Likewise.\n\t* src/concept-inst.cc:  Likewise.\n\t* src/limits.cc:  Likewise.\n\t* include/c_shadow/stdlib.h:  Compile conditionally on _GLIBCPP_USE_C99\n\tinstead of _GLIBCPP_USE_LONG_LONG.\n\t* include/c_shadow/bits/std_cstdlib.h:  Likewise.\n\nFrom-SVN: r46723", "tree": {"sha": "8c731ebbdfd5e94f77b13396db1b670dbbc9432a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c731ebbdfd5e94f77b13396db1b670dbbc9432a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/222485455e90e11b99912d1345394956b8f178c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/222485455e90e11b99912d1345394956b8f178c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/222485455e90e11b99912d1345394956b8f178c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/222485455e90e11b99912d1345394956b8f178c9/comments", "author": null, "committer": null, "parents": [{"sha": "bafe341a4fa148de96ed187c17fd6ff43d8dce1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bafe341a4fa148de96ed187c17fd6ff43d8dce1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bafe341a4fa148de96ed187c17fd6ff43d8dce1c"}], "stats": {"total": 1763, "additions": 870, "deletions": 893}, "files": [{"sha": "5c35fb68a2d406a4418d3b24dab661058f7a526c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/222485455e90e11b99912d1345394956b8f178c9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/222485455e90e11b99912d1345394956b8f178c9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=222485455e90e11b99912d1345394956b8f178c9", "patch": "@@ -1,3 +1,23 @@\n+2001-11-02  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* acconfig.h:  Update comments.\n+\t* acinclude.m4 (GLIBCPP_ENABLE_C99):  Move strtoll, strtoull tests...\n+\t(GLIBCPP_ENABLE_LONG_LONG):  ...to here.  Don't check enable_c99.\n+\t* aclocal.m4:  Regenerate.\n+\t* config.h.in:  Regenerate.\n+\t* configure:  Regenerate.\n+\n+\t* include/bits/boost_concept_check.h:  Unconditionally compile uses\n+\tof 'long long' which require only compiler support, not C lib support.\n+\t* include/bits/cpp_type_traits.h:  Likewise.\n+\t* include/bits/std_limits.h:  Likewise.\n+\t* include/bits/type_traits.h:  Likewise.\n+\t* src/concept-inst.cc:  Likewise.\n+\t* src/limits.cc:  Likewise.\n+\t* include/c_shadow/stdlib.h:  Compile conditionally on _GLIBCPP_USE_C99\n+\tinstead of _GLIBCPP_USE_LONG_LONG.\n+\t* include/c_shadow/bits/std_cstdlib.h:  Likewise.\n+\n 2001-11-02  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* config/io/c_io_stdio.h:  Correct grammar in comments."}, {"sha": "3950f608786e7ab2849a4576eefb4ed76e72e90d", "filename": "libstdc++-v3/acconfig.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/222485455e90e11b99912d1345394956b8f178c9/libstdc%2B%2B-v3%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/222485455e90e11b99912d1345394956b8f178c9/libstdc%2B%2B-v3%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facconfig.h?ref=222485455e90e11b99912d1345394956b8f178c9", "patch": "@@ -10,16 +10,16 @@\n #undef HAVE_GETTEXT\n #undef HAVE_STPCPY\n \n-// Define if GCC supports weak symbols\n+// Define if GCC supports weak symbols.\n #undef _GLIBCPP_SUPPORTS_WEAK\n \n-// Define if gthr-default.h exists (meaning that threading support is enabled)\n+// Define if gthr-default.h exists (meaning that threading support is enabled).\n #undef HAVE_GTHR_DEFAULT\n \n-// Include support for 'long long' and 'unsigned long long'.\n+// Include I/O support for 'long long' and 'unsigned long long'.\n #undef _GLIBCPP_USE_LONG_LONG\n \n-// Define if code specialized for wchar_t should be used.\n+// Define if C99 features such as lldiv_t, llabs, lldiv should be exposed.\n #undef _GLIBCPP_USE_C99\n \n // Include support for 'long double'."}, {"sha": "4a7f1df90ae7bbcc330391fc27cacd1bb7069b27", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/222485455e90e11b99912d1345394956b8f178c9/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/222485455e90e11b99912d1345394956b8f178c9/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=222485455e90e11b99912d1345394956b8f178c9", "patch": "@@ -1433,10 +1433,6 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n \t         [char* tmp; strtof(\"gnu\", &tmp);],, [ac_c99_stdlib=no])\n   AC_TRY_COMPILE([#include <stdlib.h>],\n \t         [char* tmp; strtold(\"gnu\", &tmp);],, [ac_c99_stdlib=no])\n-  AC_TRY_COMPILE([#include <stdlib.h>],\n-\t         [char* tmp; strtoll(\"gnu\", &tmp, 10);],, [ac_c99_stdlib=no])\n-  AC_TRY_COMPILE([#include <stdlib.h>],\n-\t         [char* tmp; strtoull(\"gnu\", &tmp, 10);],, [ac_c99_stdlib=no])\n   AC_TRY_COMPILE([#include <stdlib.h>], [llabs(10);],, [ac_c99_stdlib=no])\n   AC_TRY_COMPILE([#include <stdlib.h>], [lldiv(10,1);],, [ac_c99_stdlib=no])\n   AC_TRY_COMPILE([#include <stdlib.h>], [atoll(\"10\");],, [ac_c99_stdlib=no])\n@@ -1478,7 +1474,8 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n \n dnl\n dnl Check for template specializations for the 'long long' type extension.\n-dnl NB: Must check for C99 support before calling _GLIBCPP_ENABLE_LONG_LONG\n+dnl The result determines only whether 'long long' I/O is enabled; things\n+dnl like numeric_limits<> specializations are always available.\n dnl\n dnl GLIBCPP_ENABLE_LONG_LONG\n dnl --enable-long-long defines _GLIBCPP_USE_LONG_LONG\n@@ -1503,15 +1500,15 @@ AC_DEFUN(GLIBCPP_ENABLE_LONG_LONG, [dnl\n    esac],\n   enable_long_long=GLIBCPP_ENABLE_LONG_LONG_DEFAULT)dnl\n \n-  # iostreams require strtoll, strtoull to compile. If the\n-  # GLIBCPP_ENABLE_C99 tests found these, and if C99 support is enabled,\n-  # go ahead and allow long long to be used.\n-  if test x\"$enable_c99\" = x\"no\"; then\n-    enable_long_long=no; \n-  fi\n+  AC_MSG_CHECKING([for enabled long long I/O support])\n+\n+  # iostreams require strtoll, strtoull to compile\n+  AC_TRY_COMPILE([#include <stdlib.h>],\n+                 [char* tmp; strtoll(\"gnu\", &tmp, 10);],,[enable_long_long=no])\n+  AC_TRY_COMPILE([#include <stdlib.h>],\n+                 [char* tmp; strtoull(\"gnu\", &tmp, 10);],,[enable_long_long=no])\n \n   # Option parsed, now set things appropriately\n-  AC_MSG_CHECKING([for enabled long long support])\n   if test x\"$enable_long_long\" = xyes; then\n     AC_DEFINE(_GLIBCPP_USE_LONG_LONG)\n   fi"}, {"sha": "1a52ee85eff63aafa8245337f1fc6d8387e1d4ac", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/222485455e90e11b99912d1345394956b8f178c9/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/222485455e90e11b99912d1345394956b8f178c9/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=222485455e90e11b99912d1345394956b8f178c9", "patch": "@@ -1445,10 +1445,6 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n \t         [char* tmp; strtof(\"gnu\", &tmp);],, [ac_c99_stdlib=no])\n   AC_TRY_COMPILE([#include <stdlib.h>],\n \t         [char* tmp; strtold(\"gnu\", &tmp);],, [ac_c99_stdlib=no])\n-  AC_TRY_COMPILE([#include <stdlib.h>],\n-\t         [char* tmp; strtoll(\"gnu\", &tmp, 10);],, [ac_c99_stdlib=no])\n-  AC_TRY_COMPILE([#include <stdlib.h>],\n-\t         [char* tmp; strtoull(\"gnu\", &tmp, 10);],, [ac_c99_stdlib=no])\n   AC_TRY_COMPILE([#include <stdlib.h>], [llabs(10);],, [ac_c99_stdlib=no])\n   AC_TRY_COMPILE([#include <stdlib.h>], [lldiv(10,1);],, [ac_c99_stdlib=no])\n   AC_TRY_COMPILE([#include <stdlib.h>], [atoll(\"10\");],, [ac_c99_stdlib=no])\n@@ -1490,7 +1486,8 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n \n dnl\n dnl Check for template specializations for the 'long long' type extension.\n-dnl NB: Must check for C99 support before calling _GLIBCPP_ENABLE_LONG_LONG\n+dnl The result determines only whether 'long long' I/O is enabled; things\n+dnl like numeric_limits<> specializations are always available.\n dnl\n dnl GLIBCPP_ENABLE_LONG_LONG\n dnl --enable-long-long defines _GLIBCPP_USE_LONG_LONG\n@@ -1515,15 +1512,15 @@ AC_DEFUN(GLIBCPP_ENABLE_LONG_LONG, [dnl\n    esac],\n   enable_long_long=GLIBCPP_ENABLE_LONG_LONG_DEFAULT)dnl\n \n-  # iostreams require strtoll, strtoull to compile. If the\n-  # GLIBCPP_ENABLE_C99 tests found these, and if C99 support is enabled,\n-  # go ahead and allow long long to be used.\n-  if test x\"$enable_c99\" = x\"no\"; then\n-    enable_long_long=no; \n-  fi\n+  AC_MSG_CHECKING([for enabled long long I/O support])\n+\n+  # iostreams require strtoll, strtoull to compile\n+  AC_TRY_COMPILE([#include <stdlib.h>],\n+                 [char* tmp; strtoll(\"gnu\", &tmp, 10);],,[enable_long_long=no])\n+  AC_TRY_COMPILE([#include <stdlib.h>],\n+                 [char* tmp; strtoull(\"gnu\", &tmp, 10);],,[enable_long_long=no])\n \n   # Option parsed, now set things appropriately\n-  AC_MSG_CHECKING([for enabled long long support])\n   if test x\"$enable_long_long\" = xyes; then\n     AC_DEFINE(_GLIBCPP_USE_LONG_LONG)\n   fi"}, {"sha": "04b17645fa97331d8d1bb8af13c97132047b2460", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/222485455e90e11b99912d1345394956b8f178c9/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/222485455e90e11b99912d1345394956b8f178c9/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=222485455e90e11b99912d1345394956b8f178c9", "patch": "@@ -6,16 +6,16 @@\n /* Define if you need to in order for stat and other things to work.  */\n #undef _POSIX_SOURCE\n \n-// Define if GCC supports weak symbols\n+// Define if GCC supports weak symbols.\n #undef _GLIBCPP_SUPPORTS_WEAK\n \n-// Define if gthr-default.h exists (meaning that threading support is enabled)\n+// Define if gthr-default.h exists (meaning that threading support is enabled).\n #undef HAVE_GTHR_DEFAULT\n \n-// Include support for 'long long' and 'unsigned long long'.\n+// Include I/O support for 'long long' and 'unsigned long long'.\n #undef _GLIBCPP_USE_LONG_LONG\n \n-// Define if code specialized for wchar_t should be used.\n+// Define if C99 features such as lldiv_t, llabs, lldiv should be exposed.\n #undef _GLIBCPP_USE_C99\n \n // Include support for shadow headers, ie --enable-cshadow-headers."}, {"sha": "00cd262aa2a94e2ce46289ca34cf589e4c022888", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 819, "deletions": 823, "changes": 1642, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/222485455e90e11b99912d1345394956b8f178c9/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/222485455e90e11b99912d1345394956b8f178c9/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=222485455e90e11b99912d1345394956b8f178c9"}, {"sha": "9f6599c6be28c9c92d0e29d67fd908e6b0cca075", "filename": "libstdc++-v3/include/bits/boost_concept_check.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/222485455e90e11b99912d1345394956b8f178c9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/222485455e90e11b99912d1345394956b8f178c9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h?ref=222485455e90e11b99912d1345394956b8f178c9", "patch": "@@ -97,11 +97,9 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n   template <> struct _IntegerConcept<unsigned int> { void __constraints() {} };\n   template <> struct _IntegerConcept<long> { void __constraints() {} };\n   template <> struct _IntegerConcept<unsigned long> { void __constraints() {} };\n-#ifdef _GLIBCPP_USE_LONG_LONG\n   template <> struct _IntegerConcept<long long> { void __constraints() {} };\n   template <> struct _IntegerConcept<unsigned long long>\n                                                 { void __constraints() {} };\n-#endif\n \n   template <class _Tp>\n   struct _SignedIntegerConcept {\n@@ -112,9 +110,7 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n   template <> struct _SignedIntegerConcept<short> { void __constraints() {} };\n   template <> struct _SignedIntegerConcept<int> { void __constraints() {} };\n   template <> struct _SignedIntegerConcept<long> { void __constraints() {} };\n-#ifdef _GLIBCPP_USE_LONG_LONG\n   template <> struct _SignedIntegerConcept<long long> { void __constraints(){}};\n-#endif\n \n   template <class _Tp>\n   struct _UnsignedIntegerConcept {\n@@ -128,10 +124,8 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n     { void __constraints() {} };\n   template <> struct _UnsignedIntegerConcept<unsigned long>\n     { void __constraints() {} };\n-#ifdef _GLIBCPP_USE_LONG_LONG\n   template <> struct _UnsignedIntegerConcept<unsigned long long>\n     { void __constraints() {} };\n-#endif\n \n   //===========================================================================\n   // Basic Concepts"}, {"sha": "272692bd00b7df4de62ed1a2255d0b21adaaa9e3", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/222485455e90e11b99912d1345394956b8f178c9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/222485455e90e11b99912d1345394956b8f178c9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=222485455e90e11b99912d1345394956b8f178c9", "patch": "@@ -200,7 +200,6 @@ namespace std\n     };\n   };\n \n-# ifdef _GLIBCPP_USE_LONG_LONG\n   template<>\n   struct __is_integer<long long>\n   {\n@@ -218,7 +217,6 @@ namespace std\n       _M_type = 1\n     };\n   };\n-# endif\n \n   //\n   // Floating point types"}, {"sha": "38b709a78b82b96ea5e61ff3c713c8ab442578cd", "filename": "libstdc++-v3/include/bits/std_limits.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/222485455e90e11b99912d1345394956b8f178c9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/222485455e90e11b99912d1345394956b8f178c9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_limits.h?ref=222485455e90e11b99912d1345394956b8f178c9", "patch": "@@ -103,11 +103,9 @@\n #ifndef __glibcpp_wchar_t_is_signed\n #define __glibcpp_wchar_t_is_signed true\n #endif\n-#ifdef _GLIBCPP_USE_LONG_LONG\n #ifndef __glibcpp_long_long_bits\n #define __glibcpp_long_long_bits 64\n #endif\n-#endif\n #ifndef __glibcpp_float_bits\n #define __glibcpp_float_bits 32\n #endif\n@@ -133,11 +131,9 @@\n #ifndef __glibcpp_wchar_t_traps\n #define __glibcpp_wchar_t_traps true\n #endif\n-#ifdef _GLIBCPP_USE_LONG_LONG\n #ifndef __glibcpp_long_long_traps\n #define __glibcpp_long_long_traps true\n #endif\n-#endif\n \n // You should not need to define any macros below this point, unless\n // you have a machine with non-standard bit-widths.\n@@ -433,8 +429,6 @@\n // You must define these macros in the configuration file.\n #endif\n \n-#ifdef _GLIBCPP_USE_LONG_LONG\n-\n // long long\n \n #define __glibcpp_signed_long_long_traps true\n@@ -481,8 +475,6 @@\n // You must define these macros in the configuration file.\n #endif\n \n-#endif\n-\n // wchar_t\n \n #define __glibcpp_wchar_t_traps true\n@@ -1645,8 +1637,6 @@ namespace std\n #undef __glibcpp_unsigned_long_digits10\n #undef __glibcpp_unsigned_long_traps  \n \n-#ifdef _GLIBCPP_USE_LONG_LONG\n-\n   template<>\n     struct numeric_limits<long long>\n     {\n@@ -1757,9 +1747,6 @@ namespace std\n #undef __glibcpp_unsigned_long_long_digits\n #undef __glibcpp_unsigned_long_long_digits10\n #undef __glibcpp_unsigned_long_long_traps  \n-  \n-#endif // _GLIBCPP_USE_LONG_LONG\n-  \n \n   template<>\n     struct numeric_limits<float>"}, {"sha": "89e50f39a3f7ea00df6e1348c22730ccfb34fe57", "filename": "libstdc++-v3/include/bits/type_traits.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/222485455e90e11b99912d1345394956b8f178c9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ftype_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/222485455e90e11b99912d1345394956b8f178c9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ftype_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ftype_traits.h?ref=222485455e90e11b99912d1345394956b8f178c9", "patch": "@@ -208,8 +208,6 @@ template<> struct __type_traits<unsigned long> {\n    typedef __true_type    is_POD_type;\n };\n \n-#ifdef _GLIBCPP_USE_LONG_LONG\n-\n template<> struct __type_traits<long long> {\n    typedef __true_type    has_trivial_default_constructor;\n    typedef __true_type    has_trivial_copy_constructor;\n@@ -226,8 +224,6 @@ template<> struct __type_traits<unsigned long long> {\n    typedef __true_type    is_POD_type;\n };\n \n-#endif /* _GLIBCPP_USE_LONG_LONG */\n-\n template<> struct __type_traits<float> {\n    typedef __true_type    has_trivial_default_constructor;\n    typedef __true_type    has_trivial_copy_constructor;\n@@ -313,8 +309,6 @@ template<> struct _Is_integer<unsigned long> {\n   typedef __true_type _Integral;\n };\n \n-#ifdef _GLIBCPP_USE_LONG_LONG\n-\n template<> struct _Is_integer<long long> {\n   typedef __true_type _Integral;\n };\n@@ -323,8 +317,6 @@ template<> struct _Is_integer<unsigned long long> {\n   typedef __true_type _Integral;\n };\n \n-#endif /* _GLIBCPP_USE_LONG_LONG */\n-\n template<typename _Tp> struct _Is_normal_iterator {\n    typedef __false_type _Normal;\n };"}, {"sha": "d219efd6750dc043241035f70e34eb5fe148a1af", "filename": "libstdc++-v3/include/c_shadow/bits/std_cstdlib.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/222485455e90e11b99912d1345394956b8f178c9/libstdc%2B%2B-v3%2Finclude%2Fc_shadow%2Fbits%2Fstd_cstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/222485455e90e11b99912d1345394956b8f178c9/libstdc%2B%2B-v3%2Finclude%2Fc_shadow%2Fbits%2Fstd_cstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_shadow%2Fbits%2Fstd_cstdlib.h?ref=222485455e90e11b99912d1345394956b8f178c9", "patch": "@@ -87,7 +87,7 @@ namespace _C_legacy {\n #  undef div\n #  undef labs\n #  undef ldiv\n-#ifdef _GLIBCPP_USE_LONG_LONG\n+#ifdef _GLIBCPP_USE_C99\n #  undef llabs\n #  undef lldiv\n #endif\n@@ -101,7 +101,7 @@ namespace std {\n   struct div_t : _C_legacy::_CPP_div_t_capture { };\n   struct ldiv_t : _C_legacy::_CPP_ldiv_t_capture { };\n \n-#ifdef _GLIBCPP_USE_LONG_LONG\n+#ifdef _GLIBCPP_USE_C99\n # ifdef _GLIBCPP_HAVE_LLDIV_T\n   struct lldiv_t : _C_legacy::_CPP_lldiv_t_capture { };\n # else\n@@ -173,7 +173,7 @@ namespace std {\n   div(long __n, long __d)\n   { ldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n \n-#ifdef _GLIBCPP_USE_LONG_LONG\n+#ifdef _GLIBCPP_USE_C99\n   inline long long \n   llabs(long long __x) { return __x >= 0 ? __x : -__x; }\n "}, {"sha": "9740b57b3fc1a8d256981034ddb34fb160105966", "filename": "libstdc++-v3/include/c_shadow/stdlib.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/222485455e90e11b99912d1345394956b8f178c9/libstdc%2B%2B-v3%2Finclude%2Fc_shadow%2Fstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/222485455e90e11b99912d1345394956b8f178c9/libstdc%2B%2B-v3%2Finclude%2Fc_shadow%2Fstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_shadow%2Fstdlib.h?ref=222485455e90e11b99912d1345394956b8f178c9", "patch": "@@ -47,7 +47,7 @@\n   // some names and types with the std:: C++ version.\n   using std::div_t;\n   using std::ldiv_t;\n-#ifdef _GLIBCPP_USE_LONG_LONG\n+#ifdef _GLIBCPP_USE_C99\n   using std::lldiv_t;\n #endif\n "}, {"sha": "28cf104adbd44b156454e57ed1bdeeabab931e44", "filename": "libstdc++-v3/src/concept-inst.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/222485455e90e11b99912d1345394956b8f178c9/libstdc%2B%2B-v3%2Fsrc%2Fconcept-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/222485455e90e11b99912d1345394956b8f178c9/libstdc%2B%2B-v3%2Fsrc%2Fconcept-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fconcept-inst.cc?ref=222485455e90e11b99912d1345394956b8f178c9", "patch": "@@ -94,9 +94,7 @@ namespace __gnu_cxx\n \n   _Instantiate(_LessThanComparableConcept<long> );\n \n-#ifdef _GLIBCPP_USE_LONG_LONG\n   _Instantiate(_LessThanComparableConcept<long long> );\n-#endif\n \n   _Instantiate(_LessThanComparableConcept<unsigned> );\n "}, {"sha": "cf3ddaee00e06cff8d1d58b482b503c4da288615", "filename": "libstdc++-v3/src/limits.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/222485455e90e11b99912d1345394956b8f178c9/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/222485455e90e11b99912d1345394956b8f178c9/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc?ref=222485455e90e11b99912d1345394956b8f178c9", "patch": "@@ -305,8 +305,7 @@ namespace std\n   const bool numeric_limits<unsigned long>::tinyness_before;\n   const float_round_style numeric_limits<unsigned long>::round_style;\n \n-  // XXX: Extensions\n-#ifdef _GLIBCPP_USE_LONG_LONG  \n+  // NOTA BENE:  long long is an extension\n   const bool numeric_limits<long long>::is_specialized;\n   const int  numeric_limits<long long>::digits;\n   const int  numeric_limits<long long>::digits10;\n@@ -352,7 +351,6 @@ namespace std\n   const bool numeric_limits<unsigned long long>::traps;\n   const bool numeric_limits<unsigned long long>::tinyness_before;\n   const float_round_style numeric_limits<unsigned long long>::round_style;\n-#endif // _GLIBCPP_USE_LONG_LONG\n \n   // float\n   const bool numeric_limits<float>::is_specialized;"}]}