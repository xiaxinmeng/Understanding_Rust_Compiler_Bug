{"sha": "6d65ddca42f296b7e4413aac49497698415abce6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ2NWRkY2E0MmYyOTZiN2U0NDEzYWFjNDk0OTc2OTg0MTVhYmNlNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-16T08:32:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-27T13:24:57Z"}, "message": "Refactor array descriptor field access\n\nThis refactors the array descriptor component access tree building\nto commonize code into new helpers to provide a single place to\nfix correctness issues with respect to TBAA.\n\nThe only interesting part is the gfc_conv_descriptor_data_get change\nto drop broken special-casing of REFERENCE_TYPE desc which, when hit,\nwould build invalid GENERIC trees, missing an INDIRECT_REF before\nsubsetting the descriptor with a COMPONENT_REF.\n\n2020-10-16  Richard Biener  <rguenther@suse.de>\n\ngcc/fortran/ChangeLog:\n\t* trans-array.c (gfc_get_descriptor_field): New helper.\n\t(gfc_conv_descriptor_data_get): Use it - drop strange\n\tREFERENCE_TYPE handling and make sure we don't trigger it.\n\t(gfc_conv_descriptor_data_addr): Use gfc_get_descriptor_field.\n\t(gfc_conv_descriptor_data_set): Likewise.\n\t(gfc_conv_descriptor_offset): Likewise.\n\t(gfc_conv_descriptor_dtype): Likewise.\n\t(gfc_conv_descriptor_span): Likewise.\n\t(gfc_get_descriptor_dimension): Likewise.\n\t(gfc_conv_descriptor_token): Likewise.\n\t(gfc_conv_descriptor_subfield): New helper.\n\t(gfc_conv_descriptor_stride): Use it.\n\t(gfc_conv_descriptor_lbound): Likewise.\n\t(gfc_conv_descriptor_ubound): Likewise.", "tree": {"sha": "1762603b173defc33724605271a70aea05876457", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1762603b173defc33724605271a70aea05876457"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d65ddca42f296b7e4413aac49497698415abce6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d65ddca42f296b7e4413aac49497698415abce6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d65ddca42f296b7e4413aac49497698415abce6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d65ddca42f296b7e4413aac49497698415abce6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a369d199bf2f34e037030b18d0da923e8a24997", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a369d199bf2f34e037030b18d0da923e8a24997", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a369d199bf2f34e037030b18d0da923e8a24997"}], "stats": {"total": 184, "additions": 56, "deletions": 128}, "files": [{"sha": "b2c39aa32decba4532fa48e9862422b3892e4f8a", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 56, "deletions": 128, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d65ddca42f296b7e4413aac49497698415abce6/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d65ddca42f296b7e4413aac49497698415abce6/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=6d65ddca42f296b7e4413aac49497698415abce6", "patch": "@@ -133,28 +133,31 @@ gfc_array_dataptr_type (tree desc)\n #define LBOUND_SUBFIELD 1\n #define UBOUND_SUBFIELD 2\n \n+static tree\n+gfc_get_descriptor_field (tree desc, unsigned field_idx)\n+{\n+  tree type = TREE_TYPE (desc);\n+  gcc_assert (GFC_DESCRIPTOR_TYPE_P (type));\n+\n+  tree field = gfc_advance_chain (TYPE_FIELDS (type), field_idx);\n+  gcc_assert (field != NULL_TREE);\n+\n+  return fold_build3_loc (input_location, COMPONENT_REF, TREE_TYPE (field),\n+\t\t\t  desc, field, NULL_TREE);\n+}\n+\n /* This provides READ-ONLY access to the data field.  The field itself\n    doesn't have the proper type.  */\n \n tree\n gfc_conv_descriptor_data_get (tree desc)\n {\n-  tree field, type, t;\n-\n-  type = TREE_TYPE (desc);\n+  tree type = TREE_TYPE (desc);\n   if (TREE_CODE (type) == REFERENCE_TYPE)\n-    type = TREE_TYPE (type);\n+    gcc_unreachable ();\n \n-  gcc_assert (GFC_DESCRIPTOR_TYPE_P (type));\n-\n-  field = TYPE_FIELDS (type);\n-  gcc_assert (DATA_FIELD == 0);\n-\n-  t = fold_build3_loc (input_location, COMPONENT_REF, TREE_TYPE (field), desc,\n-\t\t       field, NULL_TREE);\n-  t = fold_convert (GFC_TYPE_ARRAY_DATAPTR_TYPE (type), t);\n-\n-  return t;\n+  tree field = gfc_get_descriptor_field (desc, DATA_FIELD);\n+  return fold_convert (GFC_TYPE_ARRAY_DATAPTR_TYPE (type), field);\n }\n \n /* This provides WRITE access to the data field.\n@@ -168,17 +171,8 @@ gfc_conv_descriptor_data_get (tree desc)\n void\n gfc_conv_descriptor_data_set (stmtblock_t *block, tree desc, tree value)\n {\n-  tree field, type, t;\n-\n-  type = TREE_TYPE (desc);\n-  gcc_assert (GFC_DESCRIPTOR_TYPE_P (type));\n-\n-  field = TYPE_FIELDS (type);\n-  gcc_assert (DATA_FIELD == 0);\n-\n-  t = fold_build3_loc (input_location, COMPONENT_REF, TREE_TYPE (field), desc,\n-\t\t       field, NULL_TREE);\n-  gfc_add_modify (block, t, fold_convert (TREE_TYPE (field), value));\n+  tree field = gfc_get_descriptor_field (desc, DATA_FIELD);\n+  gfc_add_modify (block, field, fold_convert (TREE_TYPE (field), value));\n }\n \n \n@@ -188,33 +182,16 @@ gfc_conv_descriptor_data_set (stmtblock_t *block, tree desc, tree value)\n tree\n gfc_conv_descriptor_data_addr (tree desc)\n {\n-  tree field, type, t;\n-\n-  type = TREE_TYPE (desc);\n-  gcc_assert (GFC_DESCRIPTOR_TYPE_P (type));\n-\n-  field = TYPE_FIELDS (type);\n-  gcc_assert (DATA_FIELD == 0);\n-\n-  t = fold_build3_loc (input_location, COMPONENT_REF, TREE_TYPE (field), desc,\n-\t\t       field, NULL_TREE);\n-  return gfc_build_addr_expr (NULL_TREE, t);\n+  tree field = gfc_get_descriptor_field (desc, DATA_FIELD);\n+  return gfc_build_addr_expr (NULL_TREE, field);\n }\n \n static tree\n gfc_conv_descriptor_offset (tree desc)\n {\n-  tree type;\n-  tree field;\n-\n-  type = TREE_TYPE (desc);\n-  gcc_assert (GFC_DESCRIPTOR_TYPE_P (type));\n-\n-  field = gfc_advance_chain (TYPE_FIELDS (type), OFFSET_FIELD);\n-  gcc_assert (field != NULL_TREE && TREE_TYPE (field) == gfc_array_index_type);\n-\n-  return fold_build3_loc (input_location, COMPONENT_REF, TREE_TYPE (field),\n-\t\t\t  desc, field, NULL_TREE);\n+  tree field = gfc_get_descriptor_field (desc, OFFSET_FIELD);\n+  gcc_assert (TREE_TYPE (field) == gfc_array_index_type);\n+  return field;\n }\n \n tree\n@@ -235,34 +212,17 @@ gfc_conv_descriptor_offset_set (stmtblock_t *block, tree desc,\n tree\n gfc_conv_descriptor_dtype (tree desc)\n {\n-  tree field;\n-  tree type;\n-\n-  type = TREE_TYPE (desc);\n-  gcc_assert (GFC_DESCRIPTOR_TYPE_P (type));\n-\n-  field = gfc_advance_chain (TYPE_FIELDS (type), DTYPE_FIELD);\n-  gcc_assert (field != NULL_TREE\n-\t      && TREE_TYPE (field) == get_dtype_type_node ());\n-\n-  return fold_build3_loc (input_location, COMPONENT_REF, TREE_TYPE (field),\n-\t\t\t  desc, field, NULL_TREE);\n+  tree field = gfc_get_descriptor_field (desc, DTYPE_FIELD);\n+  gcc_assert (TREE_TYPE (field) == get_dtype_type_node ());\n+  return field;\n }\n \n static tree\n gfc_conv_descriptor_span (tree desc)\n {\n-  tree type;\n-  tree field;\n-\n-  type = TREE_TYPE (desc);\n-  gcc_assert (GFC_DESCRIPTOR_TYPE_P (type));\n-\n-  field = gfc_advance_chain (TYPE_FIELDS (type), SPAN_FIELD);\n-  gcc_assert (field != NULL_TREE && TREE_TYPE (field) == gfc_array_index_type);\n-\n-  return fold_build3_loc (input_location, COMPONENT_REF, TREE_TYPE (field),\n-\t\t\t  desc, field, NULL_TREE);\n+  tree field = gfc_get_descriptor_field (desc, SPAN_FIELD);\n+  gcc_assert (TREE_TYPE (field) == gfc_array_index_type);\n+  return field;\n }\n \n tree\n@@ -328,22 +288,13 @@ gfc_conv_descriptor_attribute (tree desc)\n \t\t\t  dtype, tmp, NULL_TREE);\n }\n \n-\n tree\n gfc_get_descriptor_dimension (tree desc)\n {\n-  tree type, field;\n-\n-  type = TREE_TYPE (desc);\n-  gcc_assert (GFC_DESCRIPTOR_TYPE_P (type));\n-\n-  field = gfc_advance_chain (TYPE_FIELDS (type), DIMENSION_FIELD);\n-  gcc_assert (field != NULL_TREE\n-\t  && TREE_CODE (TREE_TYPE (field)) == ARRAY_TYPE\n-\t  && TREE_CODE (TREE_TYPE (TREE_TYPE (field))) == RECORD_TYPE);\n-\n-  return fold_build3_loc (input_location, COMPONENT_REF, TREE_TYPE (field),\n-\t\t\t  desc, field, NULL_TREE);\n+  tree field = gfc_get_descriptor_field (desc, DIMENSION_FIELD);\n+  gcc_assert (TREE_CODE (TREE_TYPE (field)) == ARRAY_TYPE\n+\t      && TREE_CODE (TREE_TYPE (TREE_TYPE (field))) == RECORD_TYPE);\n+  return field;\n }\n \n \n@@ -361,38 +312,31 @@ gfc_conv_descriptor_dimension (tree desc, tree dim)\n tree\n gfc_conv_descriptor_token (tree desc)\n {\n-  tree type;\n-  tree field;\n-\n-  type = TREE_TYPE (desc);\n-  gcc_assert (GFC_DESCRIPTOR_TYPE_P (type));\n   gcc_assert (flag_coarray == GFC_FCOARRAY_LIB);\n-  field = gfc_advance_chain (TYPE_FIELDS (type), CAF_TOKEN_FIELD);\n-\n+  tree field = gfc_get_descriptor_field (desc, CAF_TOKEN_FIELD);\n   /* Should be a restricted pointer - except in the finalization wrapper.  */\n-  gcc_assert (field != NULL_TREE\n-\t      && (TREE_TYPE (field) == prvoid_type_node\n-\t\t  || TREE_TYPE (field) == pvoid_type_node));\n+  gcc_assert (TREE_TYPE (field) == prvoid_type_node\n+\t      || TREE_TYPE (field) == pvoid_type_node);\n+  return field;\n+}\n+\n+static tree\n+gfc_conv_descriptor_subfield (tree desc, tree dim, unsigned field_idx)\n+{\n+  tree tmp = gfc_conv_descriptor_dimension (desc, dim);\n+  tree field = gfc_advance_chain (TYPE_FIELDS (TREE_TYPE (tmp)), field_idx);\n+  gcc_assert (field != NULL_TREE);\n \n   return fold_build3_loc (input_location, COMPONENT_REF, TREE_TYPE (field),\n-\t\t\t  desc, field, NULL_TREE);\n+\t\t\t  tmp, field, NULL_TREE);\n }\n \n-\n static tree\n gfc_conv_descriptor_stride (tree desc, tree dim)\n {\n-  tree tmp;\n-  tree field;\n-\n-  tmp = gfc_conv_descriptor_dimension (desc, dim);\n-  field = TYPE_FIELDS (TREE_TYPE (tmp));\n-  field = gfc_advance_chain (field, STRIDE_SUBFIELD);\n-  gcc_assert (field != NULL_TREE && TREE_TYPE (field) == gfc_array_index_type);\n-\n-  tmp = fold_build3_loc (input_location, COMPONENT_REF, TREE_TYPE (field),\n-\t\t\t tmp, field, NULL_TREE);\n-  return tmp;\n+  tree field = gfc_conv_descriptor_subfield (desc, dim, STRIDE_SUBFIELD);\n+  gcc_assert (TREE_TYPE (field) == gfc_array_index_type);\n+  return field;\n }\n \n tree\n@@ -421,17 +365,9 @@ gfc_conv_descriptor_stride_set (stmtblock_t *block, tree desc,\n static tree\n gfc_conv_descriptor_lbound (tree desc, tree dim)\n {\n-  tree tmp;\n-  tree field;\n-\n-  tmp = gfc_conv_descriptor_dimension (desc, dim);\n-  field = TYPE_FIELDS (TREE_TYPE (tmp));\n-  field = gfc_advance_chain (field, LBOUND_SUBFIELD);\n-  gcc_assert (field != NULL_TREE && TREE_TYPE (field) == gfc_array_index_type);\n-\n-  tmp = fold_build3_loc (input_location, COMPONENT_REF, TREE_TYPE (field),\n-\t\t\t tmp, field, NULL_TREE);\n-  return tmp;\n+  tree field = gfc_conv_descriptor_subfield (desc, dim, LBOUND_SUBFIELD);\n+  gcc_assert (TREE_TYPE (field) == gfc_array_index_type);\n+  return field;\n }\n \n tree\n@@ -451,17 +387,9 @@ gfc_conv_descriptor_lbound_set (stmtblock_t *block, tree desc,\n static tree\n gfc_conv_descriptor_ubound (tree desc, tree dim)\n {\n-  tree tmp;\n-  tree field;\n-\n-  tmp = gfc_conv_descriptor_dimension (desc, dim);\n-  field = TYPE_FIELDS (TREE_TYPE (tmp));\n-  field = gfc_advance_chain (field, UBOUND_SUBFIELD);\n-  gcc_assert (field != NULL_TREE && TREE_TYPE (field) == gfc_array_index_type);\n-\n-  tmp = fold_build3_loc (input_location, COMPONENT_REF, TREE_TYPE (field),\n-\t\t\t tmp, field, NULL_TREE);\n-  return tmp;\n+  tree field = gfc_conv_descriptor_subfield (desc, dim, UBOUND_SUBFIELD);\n+  gcc_assert (TREE_TYPE (field) == gfc_array_index_type);\n+  return field;\n }\n \n tree"}]}