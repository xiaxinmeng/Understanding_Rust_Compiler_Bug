{"sha": "8ebeee52bcaa48ccdd6a04889ca4945698ff6960", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGViZWVlNTJiY2FhNDhjY2RkNmEwNDg4OWNhNDk0NTY5OGZmNjk2MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-11-18T02:21:54Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-11-18T02:21:54Z"}, "message": "search.c (get_abstract_virtuals): Complain about virtuals with no final overrider.\n\n\t* search.c (get_abstract_virtuals): Complain about virtuals with\n\tno final overrider.\n\t* typeck2.c (abstract_virtuals_error): Remove handling for virtuals\n\twith no final overrider.\n\t* class.c (override_one_vtable): Don't set DECL_ABSTRACT_VIRTUAL_P\n\ton virtuals with no final overrider.\nFixes Sec10/3/E10120.C\n\t* lex.c (reinit_parse_for_block): Add a space after the initial ':'.\nFixes Sec9/7/R09434.r0\n\t* class.c (finish_struct_1): Don't remove zero-width bit-fields until\n\tafter layout_type.\nFixes Sec9/6/P09024.C\n\t* friend.c (do_friend): Don't set_mangled_name_for_decl.\nFixes Sec9/2/P09075.C\n\t* class.c (finish_struct_anon): Complain about non-fields.\n\t* decl2.c (build_anon_union_vars): Likewise.\n\t* decl.c (grokdeclarator): Normal data members can't have the same\n\tname as the class, either.\n\t* class.c (finish_struct_anon): Neither can members of an\n\tanonymous union.\nFixes Sec9/2/C09268.cm\n\nFrom-SVN: r23691", "tree": {"sha": "8ef5374aa25f5637e6ac2642886cbeb83776a581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ef5374aa25f5637e6ac2642886cbeb83776a581"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ebeee52bcaa48ccdd6a04889ca4945698ff6960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ebeee52bcaa48ccdd6a04889ca4945698ff6960", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ebeee52bcaa48ccdd6a04889ca4945698ff6960", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ebeee52bcaa48ccdd6a04889ca4945698ff6960/comments", "author": null, "committer": null, "parents": [{"sha": "7251e5522be2dc59c79433e4ced2cbbc1cd91e16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7251e5522be2dc59c79433e4ced2cbbc1cd91e16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7251e5522be2dc59c79433e4ced2cbbc1cd91e16"}], "stats": {"total": 160, "additions": 76, "deletions": 84}, "files": [{"sha": "777848cd8489252feb7220e43776e92145149133", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ebeee52bcaa48ccdd6a04889ca4945698ff6960/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ebeee52bcaa48ccdd6a04889ca4945698ff6960/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8ebeee52bcaa48ccdd6a04889ca4945698ff6960", "patch": "@@ -1,3 +1,27 @@\n+1998-11-18  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* search.c (get_abstract_virtuals): Complain about virtuals with\n+\tno final overrider.\n+\t* typeck2.c (abstract_virtuals_error): Remove handling for virtuals\n+\twith no final overrider.\n+\t* class.c (override_one_vtable): Don't set DECL_ABSTRACT_VIRTUAL_P\n+\ton virtuals with no final overrider.\n+\n+\t* lex.c (reinit_parse_for_block): Add a space after the initial ':'.\n+\n+\t* class.c (finish_struct_1): Don't remove zero-width bit-fields until\n+\tafter layout_type.\n+\n+\t* friend.c (do_friend): Don't set_mangled_name_for_decl.\n+\n+\t* class.c (finish_struct_anon): Complain about non-fields.\n+\t* decl2.c (build_anon_union_vars): Likewise.\n+\n+\t* decl.c (grokdeclarator): Normal data members can't have the same\n+\tname as the class, either.\n+\t* class.c (finish_struct_anon): Neither can members of an\n+\tanonymous union.\n+\n 1998-11-17  Mark Mitchell  <mark@markmitchell.com>\n \n \t* cp-tree.h (TYPE_ALIAS_SET): Document language-dependent uses."}, {"sha": "b25dbeff48c80ab6a81c4351b6451d982b6b8fd7", "filename": "gcc/cp/class.c", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ebeee52bcaa48ccdd6a04889ca4945698ff6960/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ebeee52bcaa48ccdd6a04889ca4945698ff6960/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=8ebeee52bcaa48ccdd6a04889ca4945698ff6960", "patch": "@@ -2858,13 +2858,11 @@ override_one_vtable (binfo, old, t)\n \t    }\n \t  {\n \t    /* This MUST be overridden, or the class is ill-formed.  */\n-\t    /* For now, we just make it abstract.  */\n \t    tree fndecl = TREE_OPERAND (FNADDR_FROM_VTABLE_ENTRY (TREE_VALUE (virtuals)), 0);\n \t    tree vfn;\n \n \t    fndecl = copy_node (fndecl);\n \t    copy_lang_decl (fndecl);\n-\t    DECL_ABSTRACT_VIRTUAL_P (fndecl) = 1;\n \t    DECL_NEEDS_FINAL_OVERRIDER_P (fndecl) = 1;\n \t    /* Make sure we search for it later.  */\n \t    if (! CLASSTYPE_ABSTRACT_VIRTUALS (t))\n@@ -3142,9 +3140,20 @@ finish_struct_anon (t)\n \t  tree* uelt = &TYPE_FIELDS (TREE_TYPE (field));\n \t  for (; *uelt; uelt = &TREE_CHAIN (*uelt))\n \t    {\n-\t      if (TREE_CODE (*uelt) != FIELD_DECL)\n+\t      if (DECL_ARTIFICIAL (*uelt))\n \t\tcontinue;\n \n+\t      if (DECL_NAME (*uelt) == TYPE_IDENTIFIER (t))\n+\t\tcp_pedwarn_at (\"ANSI C++ forbids member `%D' with same name as enclosing class\",\n+\t\t\t       *uelt);\n+\n+\t      if (TREE_CODE (*uelt) != FIELD_DECL)\n+\t\t{\n+\t\t  cp_pedwarn_at (\"`%#D' invalid; an anonymous union can only have non-static data members\",\n+\t\t\t\t *uelt);\n+\t\t  continue;\n+\t\t}\n+\n \t      if (TREE_PRIVATE (*uelt))\n \t\tcp_pedwarn_at (\"private member `%#D' in anonymous union\",\n \t\t\t       *uelt);\n@@ -3885,23 +3894,9 @@ finish_struct_1 (t, warn_anon)\n     }\n \n   /* Now DECL_INITIAL is null on all members except for zero-width bit-fields.\n-     And they have already done their work.\n \n      C++: maybe we will support default field initialization some day...  */\n \n-  /* Delete all zero-width bit-fields from the front of the fieldlist */\n-  while (fields && DECL_C_BIT_FIELD (fields)\n-\t && DECL_INITIAL (fields))\n-    fields = TREE_CHAIN (fields);\n-  /* Delete all such fields from the rest of the fields.  */\n-  for (x = fields; x;)\n-    {\n-      if (TREE_CHAIN (x) && DECL_C_BIT_FIELD (TREE_CHAIN (x))\n-\t  && DECL_INITIAL (TREE_CHAIN (x)))\n-\tTREE_CHAIN (x) = TREE_CHAIN (TREE_CHAIN (x));\n-      else\n-\tx = TREE_CHAIN (x);\n-    }\n   /* Delete all duplicate fields from the fields */\n   delete_duplicate_fields (fields);\n \n@@ -3931,7 +3926,7 @@ finish_struct_1 (t, warn_anon)\n \t}\n     }\n \n-  /* Now we have the final fieldlist for the data fields.  Record it,\n+  /* Now we have the nearly final fieldlist for the data fields.  Record it,\n      then lay out the structure or union (including the fields).  */\n \n   TYPE_FIELDS (t) = fields;\n@@ -3988,6 +3983,23 @@ finish_struct_1 (t, warn_anon)\n   else if (empty)\n     TYPE_FIELDS (t) = fields;\n \n+  my_friendly_assert (TYPE_FIELDS (t) == fields, 981117);\n+\n+  /* Delete all zero-width bit-fields from the front of the fieldlist */\n+  while (fields && DECL_C_BIT_FIELD (fields)\n+\t && DECL_INITIAL (fields))\n+    fields = TREE_CHAIN (fields);\n+  /* Delete all such fields from the rest of the fields.  */\n+  for (x = fields; x;)\n+    {\n+      if (TREE_CHAIN (x) && DECL_C_BIT_FIELD (TREE_CHAIN (x))\n+\t  && DECL_INITIAL (TREE_CHAIN (x)))\n+\tTREE_CHAIN (x) = TREE_CHAIN (TREE_CHAIN (x));\n+      else\n+\tx = TREE_CHAIN (x);\n+    }\n+  TYPE_FIELDS (t) = fields;\n+\n   if (TYPE_USES_VIRTUAL_BASECLASSES (t))\n     {\n       tree vbases;"}, {"sha": "dd7fba97c17d9791b43d7467adfbf7062f5d3184", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ebeee52bcaa48ccdd6a04889ca4945698ff6960/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ebeee52bcaa48ccdd6a04889ca4945698ff6960/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=8ebeee52bcaa48ccdd6a04889ca4945698ff6960", "patch": "@@ -10779,13 +10779,13 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\t  return void_type_node;\n \t      }\n \n+\t    /* 9.2p13 [class.mem] */\n+\t    if (declarator == current_class_name)\n+\t      cp_pedwarn (\"ANSI C++ forbids data member `%D' with same name as enclosing class\",\n+\t\t\t  declarator);\n+\n \t    if (staticp)\n \t      {\n-\t\t/* ANSI C++ Apr '95 wp 9.2 */\n-\t\tif (declarator == current_class_name)\n-\t\t  cp_pedwarn (\"ANSI C++ forbids static member `%D' with same name as enclosing class\",\n-\t\t\t      declarator);\n-\n \t\t/* C++ allows static class members.\n \t\t   All other work for this is done by grokfield.\n \t\t   This VAR_DCL is built by build_lang_field_decl."}, {"sha": "c2b4a1da750c29bc312d2deba14ca3b4b379af60", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ebeee52bcaa48ccdd6a04889ca4945698ff6960/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ebeee52bcaa48ccdd6a04889ca4945698ff6960/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=8ebeee52bcaa48ccdd6a04889ca4945698ff6960", "patch": "@@ -2141,8 +2141,15 @@ build_anon_union_vars (anon_decl, elems, static_p, external_p)\n        field = TREE_CHAIN (field))\n     {\n       tree decl;\n-      if (TREE_CODE (field) != FIELD_DECL)\n+\n+      if (DECL_ARTIFICIAL (field))\n \tcontinue;\n+      if (TREE_CODE (field) != FIELD_DECL)\n+\t{\n+\t  cp_pedwarn_at (\"`%#D' invalid; an anonymous union can only have non-static data members\",\n+\t\t\t field);\n+\t  continue;\n+\t}\n \n       if (TREE_PRIVATE (field))\n \tcp_pedwarn_at (\"private member `%#D' in anonymous union\", field);"}, {"sha": "0b71f092386eace9f346e362b24e7a22ab5e6f4c", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ebeee52bcaa48ccdd6a04889ca4945698ff6960/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ebeee52bcaa48ccdd6a04889ca4945698ff6960/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=8ebeee52bcaa48ccdd6a04889ca4945698ff6960", "patch": "@@ -413,7 +413,6 @@ do_friend (ctype, declarator, decl, parmdecls, flags, quals, funcdef_flag)\n \n \t Note that because classes all wind up being top-level\n \t in their scope, their friend wind up in top-level scope as well.  */\n-      set_mangled_name_for_decl (decl);\n       DECL_ARGUMENTS (decl) = parmdecls;\n       if (funcdef_flag)\n \tDECL_CLASS_CONTEXT (decl) = current_class_type;"}, {"sha": "5d60b041cac68947b20a0cc192bdfca7151183e6", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ebeee52bcaa48ccdd6a04889ca4945698ff6960/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ebeee52bcaa48ccdd6a04889ca4945698ff6960/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=8ebeee52bcaa48ccdd6a04889ca4945698ff6960", "patch": "@@ -1554,6 +1554,8 @@ reinit_parse_for_block (pyychar, obstackp)\n   else if (pyychar == ':')\n     {\n       obstack_1grow (obstackp, pyychar);\n+      /* Add a space so we don't get confused by ': ::A(20)'.  */\n+      obstack_1grow (obstackp, ' ');\n       look_for_lbrac = 1;\n       blev = 0;\n     }"}, {"sha": "1f705799560114ddf6a86f4ea1a3dc0852ba79b7", "filename": "gcc/cp/search.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ebeee52bcaa48ccdd6a04889ca4945698ff6960/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ebeee52bcaa48ccdd6a04889ca4945698ff6960/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=8ebeee52bcaa48ccdd6a04889ca4945698ff6960", "patch": "@@ -1963,7 +1963,9 @@ get_abstract_virtuals (type)\n \t{\n \t  tree base_pfn = FNADDR_FROM_VTABLE_ENTRY (TREE_VALUE (virtuals));\n \t  tree base_fndecl = TREE_OPERAND (base_pfn, 0);\n-\t  if (DECL_ABSTRACT_VIRTUAL_P (base_fndecl))\n+\t  if (DECL_NEEDS_FINAL_OVERRIDER_P (base_fndecl))\n+\t    cp_error (\"`%#D' needs a final overrider\", base_fndecl);\n+\t  else if (DECL_ABSTRACT_VIRTUAL_P (base_fndecl))\n \t    abstract_virtuals = tree_cons (NULL_TREE, base_fndecl, abstract_virtuals);\n \t  virtuals = TREE_CHAIN (virtuals);\n \t}"}, {"sha": "78eebf6ed30ce17cb5f56390013c2abec61f7500", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 4, "deletions": 58, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ebeee52bcaa48ccdd6a04889ca4945698ff6960/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ebeee52bcaa48ccdd6a04889ca4945698ff6960/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=8ebeee52bcaa48ccdd6a04889ca4945698ff6960", "patch": "@@ -133,30 +133,8 @@ abstract_virtuals_error (decl, type)\n      tree type;\n {\n   tree u = CLASSTYPE_ABSTRACT_VIRTUALS (type);\n-  int has_abstract_virtuals, needs_final_overriders;\n   tree tu;\n \n-  /* Count how many abstract methods need to be defined.  */\n-  for (has_abstract_virtuals = 0, tu = u; tu; tu = TREE_CHAIN (tu))\n-    {\n-      if (DECL_ABSTRACT_VIRTUAL_P (TREE_VALUE (tu))\n-\t  && ! DECL_NEEDS_FINAL_OVERRIDER_P (TREE_VALUE (tu)))\n-\t{\n-\t  has_abstract_virtuals = 1;\n-\t  break;\n-\t}\n-    }\n-\n-  /* Count how many virtual methods need a final overrider.  */\n-  for (needs_final_overriders = 0, tu = u; tu; tu = TREE_CHAIN (tu))\n-    {\n-      if (DECL_NEEDS_FINAL_OVERRIDER_P (TREE_VALUE (tu)))\n-\t{\n-\t  needs_final_overriders = 1;\n-\t  break;\n-\t}\n-    }\n-\n   if (decl)\n     {\n       if (TREE_CODE (decl) == RESULT_DECL)\n@@ -185,44 +163,12 @@ abstract_virtuals_error (decl, type)\n     {\n       TREE_PURPOSE (u) = error_mark_node;\n \n-      if (has_abstract_virtuals)\n-\terror (\"  since the following virtual functions are abstract:\");\n-      tu = u;\n-      while (tu)\n-\t{\n-\t  if (DECL_ABSTRACT_VIRTUAL_P (TREE_VALUE (tu))\n-\t      && ! DECL_NEEDS_FINAL_OVERRIDER_P (TREE_VALUE (tu)))\n-\t    cp_error (\"\\t%#D\", TREE_VALUE (tu));\n-\t  tu = TREE_CHAIN (tu);\n-\t}\n-\n-      if (needs_final_overriders)\n-\t{\n-\t  if (has_abstract_virtuals)\n-\t    error (\"  and the following virtual functions need a final overrider:\");\n-\t  else\n-\t    error (\"  since the following virtual functions need a final overrider:\");\n-\t}\n-      tu = u;\n-      while (tu)\n-\t{\n-\t  if (DECL_NEEDS_FINAL_OVERRIDER_P (TREE_VALUE (tu)))\n-\t    cp_error (\"\\t%#D\", TREE_VALUE (tu));\n-\t  tu = TREE_CHAIN (tu);\n-\t}\n+      error (\"  since the following virtual functions are abstract:\");\n+      for (tu = u; tu; tu = TREE_CHAIN (tu))\n+\tcp_error (\"\\t%#D\", TREE_VALUE (tu));\n     }\n   else\n-    {\n-      if (has_abstract_virtuals)\n-\t{\n-\t  if (needs_final_overriders)\n-\t    cp_error (\"  since type `%T' has abstract virtual functions and must override virtual functions\", type);\n-\t  else\n-\t    cp_error (\"  since type `%T' has abstract virtual functions\", type);\n-\t}\n-      else\n-\tcp_error (\"  since type `%T' must override virtual functions\", type);\n-    }\n+    cp_error (\"  since type `%T' has abstract virtual functions\", type);\n }\n \n /* Print an error message for invalid use of a signature type."}]}