{"sha": "afef9a5b58787892f16170ab08bedb15351fe771", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZlZjlhNWI1ODc4Nzg5MmYxNjE3MGFiMDhiZWRiMTUzNTFmZTc3MQ==", "commit": {"author": {"name": "James Lemke", "email": "jwlemke@wasabisystems.com", "date": "2006-06-05T15:59:03Z"}, "committer": {"name": "James Lemke", "email": "jwlemke@gcc.gnu.org", "date": "2006-06-05T15:59:03Z"}, "message": "* dg-cmp-results.sh: New script for comparing DejaGNU logs.\n\nFrom-SVN: r114393", "tree": {"sha": "85f97054daf47d9c2a7f46c95fcc45a5784bc392", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85f97054daf47d9c2a7f46c95fcc45a5784bc392"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afef9a5b58787892f16170ab08bedb15351fe771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afef9a5b58787892f16170ab08bedb15351fe771", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afef9a5b58787892f16170ab08bedb15351fe771", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afef9a5b58787892f16170ab08bedb15351fe771/comments", "author": null, "committer": null, "parents": [{"sha": "8a10503f40fd316c6996f3b504515f94c183fabd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a10503f40fd316c6996f3b504515f94c183fabd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a10503f40fd316c6996f3b504515f94c183fabd"}], "stats": {"total": 205, "additions": 205, "deletions": 0}, "files": [{"sha": "120213ac20fa1b7954680c1ea1ee7841d3681eee", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afef9a5b58787892f16170ab08bedb15351fe771/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afef9a5b58787892f16170ab08bedb15351fe771/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=afef9a5b58787892f16170ab08bedb15351fe771", "patch": "@@ -1,3 +1,7 @@\n+2006-06-05  James Lemke  <jwlemke@wasabisystems.com>\n+\n+\t* dg-cmp-results.sh: New script for comparing DejaGNU logs.\n+\n 2006-06-02  Richard Earnshaw  <rearnsha@arm.com>\n \t    Mike Stump  <mrs@apple.com>\n "}, {"sha": "f5a4f09a616be9bd66dc9788feeeaa85ada3e8ec", "filename": "contrib/dg-cmp-results.sh", "status": "added", "additions": 201, "deletions": 0, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afef9a5b58787892f16170ab08bedb15351fe771/contrib%2Fdg-cmp-results.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afef9a5b58787892f16170ab08bedb15351fe771/contrib%2Fdg-cmp-results.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fdg-cmp-results.sh?ref=afef9a5b58787892f16170ab08bedb15351fe771", "patch": "@@ -0,0 +1,201 @@\n+#!/bin/bash\n+# Copyright (C) 2006 Free Software Foundation\n+#\n+# Analyze changes in GCC DejaGNU test logs for binutils, gcc, gdb, etc.\n+# Original version written in 2005 by James Lemke <jwlemke@wasabisystems.com>.\n+#\n+# See usage() below.\n+\n+usage () {\n+    cat <<EOF >&2\n+Usage:\n+    dg-cmp-results.sh [-v] [-v] [-v] <variant-name> <old-file> <new-file>\n+    <variant-name> names the desired variant, \"/\" must be written as \"\\/\".\n+    Use the empty string (\"\") for the first variant in each file.\n+    Output is to stdout.\n+    Non-verbose output is degradation info like PASS->FAIL.\n+    -v adds improvement info like FAIL->PASS.\n+    -v -v adds info like tests that are no longer run.\n+    -v -v -v adds info for tests that have not changed status.\n+    -v -v -v -v is used for debugging.\n+EOF\n+}\n+\n+verbose=0\n+while test \"$1\" = \"-v\"; do\n+    verbose=`expr $verbose + 1`\n+    shift\n+done\n+\n+if test $# -ne 3 -o ! -f \"$2\" -o ! -f \"$3\"; then\n+    usage\n+    exit 1\n+fi\n+\n+# Command differences for various platforms.\n+case `uname -s` in\n+Darwin|NetBSD)\n+    E=-E\t# sed\n+    ;;\n+*)\n+    E=-r\t# sed\n+    ;;\n+esac\n+\n+# sections are identified by separator lines beginning with '\\t\\t==='.\n+# section 0 identifies run date, target, and host.\n+# section 1 and subsequent contain test data for a target variant.\n+# -skip to /^Running target/ and use that line to identify the variant.\n+# -subsequent lines contain the result data.  They begin with:\n+# '(PASS|FAIL|XFAIL|XPASS|UNTESTED|UNSUPPORTED|UNRESOLVED):'\n+VARIANT=\"$1\"\n+OFILE=\"$2\"\n+OBASE=`basename \"$2\"`\n+NFILE=\"$3\"\n+NBASE=`basename \"$3\"`\n+\n+echo \"dg-cmp-results.sh: Verbosity is ${verbose}, Variant is \\\"${VARIANT}\\\"\"\n+echo\n+\n+header=\"^Running target $VARIANT\"\n+\n+temp=`grep \"$header\" $OFILE`\n+if test -z \"$temp\"; then\n+    echo \"Error: variant \\\"$VARIANT\\\" not found in $OFILE.\"\n+    exit 1\n+fi\n+temp=`grep \"$header\" $NFILE`\n+if test -z \"$temp\"; then\n+    echo \"Error: variant \\\"$VARIANT\\\" not found in $NFILE.\"\n+    exit 1\n+fi\n+unset temp\n+\n+# Copy out the old file's section 0.\n+echo \"Older log file: $OFILE\"\n+sed $E -e '/^[[:space:]]+===/,$d' $OFILE\n+\n+# Copy out the new file's section 0.\n+echo \"Newer log file: $NFILE\"\n+sed $E -e '/^[[:space:]]+===/,$d' $NFILE\n+\n+# Create a temporary file from the old file's interesting section.\n+sed $E -e \"1,/$header/d\" \\\n+  -e '/^[[:space:]]+===/,$d' \\\n+  -e '/^[A-Z]+:/!d' \\\n+  -e '/^(WARNING|ERROR):/d' \\\n+  -e 's/\\r$//' \\\n+  -e 's/^/O:/' \\\n+  $OFILE |\n+  sort -s -t : -k 3b - \\\n+  >/tmp/o$$-$OBASE\n+\n+# Create a temporary file from the new file's interesting section.\n+sed $E -e \"1,/$header/d\" \\\n+  -e '/^[[:space:]]+===/,$d' \\\n+  -e '/^[A-Z]+:/!d' \\\n+  -e '/^(WARNING|ERROR):/d' \\\n+  -e 's/\\r$//' \\\n+  -e 's/^/N:/' \\\n+  $NFILE |\n+  sort -s -t : -k 3b - \\\n+  >/tmp/n$$-$NBASE\n+\n+# Merge the two files, then compare adjacent lines.\n+# Comparison is complicated by tests that may be run multiple times.\n+# If that case, we assume that the order is the same in both files.\n+cat <<EOF >compare-$$.awk\n+BEGIN {\n+    FS = \":\"\n+    queue1 = 1; queueN = 0; status[queue1] = \"\"; name[queue1] = \"\"\n+    verbose = verbose + 0\t# Make sure it's defined.\n+}\n+\n+# FIFO circular queue\n+function push(st, nm) {\n+    queueN += 1; status[queueN] = st; name[queueN] = nm\n+}\n+function peek() {\n+    result = 0\n+    if (queueN >= queue1) result = queue1\n+    return result\n+}\n+function drop() {\n+    queue1 += 1\n+    if (queue1 > queueN) { queue1 = 1; queueN = 0; }\n+}\n+\n+function compare(st, nm) {\n+    old = peek()\n+    if (old == 0) {\n+        # This new test wasn't run last time.\n+        if (verbose >= 2) printf(\"NA->%s:%s\\n\", st, nm)\n+    }\n+    else {\n+\t# Compare this new test to the first queued old one.\n+\tif (verbose >= 4) {\n+\t    printf(\"Comparing two lines:\\n O:%s:%s\\n N:%s:%s\\n\",\n+\t     status[old], nm[old], st, nm)\n+\t}\n+        if (name[old] != nm) {\n+\t    # The old test wasn't run this time and\n+\t    # the new test wasn't run last time.\n+\t    if (verbose >= 2) {\n+\t\tprintf(\"%s->NA:%s\\n\", status[old], name[old])\n+\t\tif (nm != \"\") printf(\"NA->%s:%s\\n\", st, nm)\n+\t    }\n+\t    drop()\n+        }\n+\telse {\n+\t    notable = 0\n+\t    if (status[old] == st) {\n+\t        # Status of this test has not changed.\n+\t\tif (verbose >= 3) printf(\"%s:%s\\n\", st, nm)\n+\t    }\n+\t    else if(status[old] == \"PASS\" && st == \"XFAIL\") {\n+\t        if (verbose >= 1) notable = 1\n+\t    }\n+\t    else if(status[old] == \"PASS\" || st == \"FAIL\") {\n+\t        # Test did pass but doesn't now\n+\t\t# or didn't fail but does now.\n+\t\tnotable = 1\n+\t    }\n+\t    else if(st == \"PASS\") {\n+\t        # Test didn't pass but does now.\n+\t\tif (verbose >= 1) notable = 1\n+\t    }\n+\t    else if(verbose >= 2) {\n+\t        # Miscellaneous status change.\n+\t\tnotable = 1\n+\t    }\n+\t    if (notable > 0) printf(\"%s->%s:%s\\n\", status[old], st, nm)\n+\t    drop()\n+\t}\n+    }\n+}\n+\n+/^O:/ {\n+    while (old = peek()) {\n+\tif (name[old] == \\$3) break;\n+\t# The queued test is no longer run.\n+\tcompare(\"\", \"\");\n+    }\n+    # Save this test for later comparison.\n+    push(\\$2, \\$3)\n+}\n+\n+/^N:/ {\n+    compare(\\$2, \\$3)\n+}\n+\n+END {\n+    while (old = peek()) compare(\"\", \"\")\n+}\n+EOF\n+sort -m -s -t : -k 3b /tmp/o$$-$OBASE /tmp/n$$-$NBASE |\n+ awk -v verbose=$verbose -f compare-$$.awk /dev/stdin\n+\n+# Delete the temporary files.\n+rm -f compare-$$.awk /tmp/o$$-$OBASE /tmp/n$$-$NBASE\n+\n+exit 0"}]}