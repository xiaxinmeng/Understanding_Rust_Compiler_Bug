{"sha": "57cf50a4640c0e19b20f3c77028b3d1542b6fb53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdjZjUwYTQ2NDBjMGUxOWIyMGYzYzc3MDI4YjNkMTU0MmI2ZmI1Mw==", "commit": {"author": {"name": "Gavin Romig-Koch", "email": "gavin@cygnus.com", "date": "1999-08-25T19:29:43Z"}, "committer": {"name": "Gavin Romig-Koch", "email": "gavin@gcc.gnu.org", "date": "1999-08-25T19:29:43Z"}, "message": "combine.c (nonzero_bits): Allow single-ly set registers to be anywere in the function only if...\n\n\t* combine.c (nonzero_bits) : Allow single-ly set registers to be\n\tanywere in the function only if they are pseudos and set before\n\tbeing used (not live at the start of the function).\n\t(num_sign_bit_copies) : Same.\n\t(get_last_value_validate) : Same.\n\t(get_last_value) : Same.\n\nFrom-SVN: r28871", "tree": {"sha": "429fe5fec82339cb4e279f1ef8644202e5c7a46f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/429fe5fec82339cb4e279f1ef8644202e5c7a46f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57cf50a4640c0e19b20f3c77028b3d1542b6fb53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57cf50a4640c0e19b20f3c77028b3d1542b6fb53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57cf50a4640c0e19b20f3c77028b3d1542b6fb53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57cf50a4640c0e19b20f3c77028b3d1542b6fb53/comments", "author": null, "committer": null, "parents": [{"sha": "95c5608516d4ecccc04099e7b18e11190547bcff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95c5608516d4ecccc04099e7b18e11190547bcff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95c5608516d4ecccc04099e7b18e11190547bcff"}], "stats": {"total": 48, "additions": 37, "deletions": 11}, "files": [{"sha": "a5ea729fbd7976975ff2fc179e1f956cc5c7dcdb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cf50a4640c0e19b20f3c77028b3d1542b6fb53/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cf50a4640c0e19b20f3c77028b3d1542b6fb53/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57cf50a4640c0e19b20f3c77028b3d1542b6fb53", "patch": "@@ -1,3 +1,12 @@\n+Wed Aug 25 15:27:22 1999  Gavin Romig-Koch  <gavin@cygnus.com>\n+\n+\t* combine.c (nonzero_bits) : Allow single-ly set registers to be\n+\tanywere in the function only if they are pseudos and set before\n+\tbeing used (not live at the start of the function).\n+\t(num_sign_bit_copies) : Same.\n+\t(get_last_value_validate) : Same.\n+\t(get_last_value) : Same.\n+\n Wed Aug 25 11:13:29 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* loop.c (express_from): Try harder to unify (* c N) and (* c M)"}, {"sha": "dcd60c2cec4a76203656b5ba42391c2709d456e3", "filename": "gcc/combine.c", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cf50a4640c0e19b20f3c77028b3d1542b6fb53/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cf50a4640c0e19b20f3c77028b3d1542b6fb53/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=57cf50a4640c0e19b20f3c77028b3d1542b6fb53", "patch": "@@ -7521,8 +7521,11 @@ nonzero_bits (x, mode)\n \n       if (reg_last_set_value[REGNO (x)] != 0\n \t  && reg_last_set_mode[REGNO (x)] == mode\n-\t  && (REG_N_SETS (REGNO (x)) == 1\n-\t      || reg_last_set_label[REGNO (x)] == label_tick)\n+\t  && (reg_last_set_label[REGNO (x)] == label_tick\n+\t      || (REGNO (x) >= FIRST_PSEUDO_REGISTER\n+\t\t  && REG_N_SETS (REGNO (x)) == 1\n+\t\t  && ! REGNO_REG_SET_P (BASIC_BLOCK (0)->global_live_at_start, \n+\t\t\t\t\tREGNO (x))))\n \t  && INSN_CUID (reg_last_set[REGNO (x)]) < subst_low_cuid)\n \treturn reg_last_set_nonzero_bits[REGNO (x)];\n \n@@ -7911,8 +7914,11 @@ num_sign_bit_copies (x, mode)\n \n       if (reg_last_set_value[REGNO (x)] != 0\n \t  && reg_last_set_mode[REGNO (x)] == mode\n-\t  && (REG_N_SETS (REGNO (x)) == 1\n-\t      || reg_last_set_label[REGNO (x)] == label_tick)\n+\t  && (reg_last_set_label[REGNO (x)] == label_tick\n+\t      || (REGNO (x) >= FIRST_PSEUDO_REGISTER\n+\t\t  && REG_N_SETS (REGNO (x)) == 1\n+\t\t  && ! REGNO_REG_SET_P (BASIC_BLOCK (0)->global_live_at_start,\n+\t\t\t\t\tREGNO (x))))\n \t  && INSN_CUID (reg_last_set[REGNO (x)]) < subst_low_cuid)\n \treturn reg_last_set_sign_bit_copies[REGNO (x)];\n \n@@ -10734,9 +10740,11 @@ get_last_value_validate (loc, insn, tick, replace)\n \n       for (j = regno; j < endregno; j++)\n \tif (reg_last_set_invalid[j]\n-\t    /* If this is a pseudo-register that was only set once, it is\n-\t       always valid.  */\n-\t    || (! (regno >= FIRST_PSEUDO_REGISTER && REG_N_SETS (regno) == 1)\n+\t    /* If this is a pseudo-register that was only set once and not\n+\t       live at the beginning of the function, it is always valid.  */\n+\t    || (! (regno >= FIRST_PSEUDO_REGISTER \n+\t\t   && REG_N_SETS (regno) == 1\n+\t\t   && ! REGNO_REG_SET_P (BASIC_BLOCK (0)->global_live_at_start, regno))\n \t\t&& reg_last_set_label[j] > tick))\n \t  {\n \t    if (replace)\n@@ -10795,12 +10803,21 @@ get_last_value (x)\n   regno = REGNO (x);\n   value = reg_last_set_value[regno];\n \n-  /* If we don't have a value or if it isn't for this basic block,\n-     return 0.  */\n+  /* If we don't have a value, or if it isn't for this basic block and\n+     it's either a hard register, set more than once, or it's a live\n+     at the beginning of the function, return 0.  \n+\n+     Because if it's not live at the beginnning of the function then the reg \n+     is always set before being used (is never used without being set).\n+     And, if it's set only once, and it's always set before use, then all\n+     uses must have the same last value, even if it's not from this basic\n+     block.  */\n \n   if (value == 0\n-      || (REG_N_SETS (regno) != 1\n-\t  && reg_last_set_label[regno] != label_tick))\n+      || (reg_last_set_label[regno] != label_tick\n+\t  && (regno < FIRST_PSEUDO_REGISTER\n+\t      || REG_N_SETS (regno) != 1\n+\t      || REGNO_REG_SET_P (BASIC_BLOCK (0)->global_live_at_start, regno))))\n     return 0;\n \n   /* If the value was set in a later insn than the ones we are processing,"}]}