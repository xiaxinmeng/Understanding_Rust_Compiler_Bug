{"sha": "b7539c3b933cd68708894228e6dfef3d48832fdf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc1MzljM2I5MzNjZDY4NzA4ODk0MjI4ZTZkZmVmM2Q0ODgzMmZkZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-10-14T15:12:32Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-10-14T15:12:32Z"}, "message": "[multiple changes]\n\n2011-10-14  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_disp.adb (Check_Premature_Freezing): If an untagged type\n\tis a generic actual, it is a subtype of a type that was frozen\n\tby the instantiation, and even if not marked frozen it does not\n\taffect the construction of the dispatch table.\n\n2011-10-14  Robert Dewar  <dewar@adacore.com>\n\n\t* make.adb, mlib-utl.adb, sem_util.adb, sem_ch4.adb: Minor code\n\treformatting.\n\t* s-rident.ads: Add missing Compiler_Unit pragma.\n\nFrom-SVN: r179989", "tree": {"sha": "02125b4345c859f5b221e69d9ab34f3d02c614f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02125b4345c859f5b221e69d9ab34f3d02c614f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7539c3b933cd68708894228e6dfef3d48832fdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7539c3b933cd68708894228e6dfef3d48832fdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7539c3b933cd68708894228e6dfef3d48832fdf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7539c3b933cd68708894228e6dfef3d48832fdf/comments", "author": null, "committer": null, "parents": [{"sha": "85ff29389d2a4e9cae1efabb1acfb8c8927d7e11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85ff29389d2a4e9cae1efabb1acfb8c8927d7e11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85ff29389d2a4e9cae1efabb1acfb8c8927d7e11"}], "stats": {"total": 115, "additions": 65, "deletions": 50}, "files": [{"sha": "5ca9b97430f730272046d6e3a9adf25c021add31", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7539c3b933cd68708894228e6dfef3d48832fdf/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7539c3b933cd68708894228e6dfef3d48832fdf/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b7539c3b933cd68708894228e6dfef3d48832fdf", "patch": "@@ -1,3 +1,16 @@\n+2011-10-14  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_disp.adb (Check_Premature_Freezing): If an untagged type\n+\tis a generic actual, it is a subtype of a type that was frozen\n+\tby the instantiation, and even if not marked frozen it does not\n+\taffect the construction of the dispatch table.\n+\n+2011-10-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* make.adb, mlib-utl.adb, sem_util.adb, sem_ch4.adb: Minor code\n+\treformatting.\n+\t* s-rident.ads: Add missing Compiler_Unit pragma.\n+\n 2011-10-14  Gary Dismukes  <dismukes@adacore.com>\n \n \t* sem_res.adb: Minor reformatting."}, {"sha": "21745288abf7c94100d68ffe163eeb06e52d1af5", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7539c3b933cd68708894228e6dfef3d48832fdf/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7539c3b933cd68708894228e6dfef3d48832fdf/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=b7539c3b933cd68708894228e6dfef3d48832fdf", "patch": "@@ -3771,12 +3771,16 @@ package body Exp_Disp is\n       --  Start of processing for Check_Premature_Freezing\n \n       begin\n+         --  Note that if the type is a (subtype of) a generic actual, the\n+         --  actual will have been frozen by the instantiation.\n+\n          if Present (N)\n            and then Is_Private_Type (Typ)\n            and then No (Full_View (Typ))\n            and then not Is_Generic_Type (Typ)\n            and then not Is_Tagged_Type (Typ)\n            and then not Is_Frozen (Typ)\n+           and then not Is_Generic_Actual_Type (Typ)\n          then\n             Error_Msg_Sloc := Sloc (Subp);\n             Error_Msg_NE"}, {"sha": "92043487bfa7ea0658c78654ac83a4e8d75cde77", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7539c3b933cd68708894228e6dfef3d48832fdf/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7539c3b933cd68708894228e6dfef3d48832fdf/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=b7539c3b933cd68708894228e6dfef3d48832fdf", "patch": "@@ -4603,7 +4603,7 @@ package body Make is\n \n    procedure Library_Phase\n      (Stand_Alone_Libraries : in out Boolean;\n-      Library_Rebuilt : in out Boolean)\n+      Library_Rebuilt       : in out Boolean)\n    is\n       Depth   : Natural;\n       Current : Natural;"}, {"sha": "215fa5d6e8dd01f47d0fa5e7f2efab82d77263ab", "filename": "gcc/ada/mlib-utl.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7539c3b933cd68708894228e6dfef3d48832fdf/gcc%2Fada%2Fmlib-utl.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7539c3b933cd68708894228e6dfef3d48832fdf/gcc%2Fada%2Fmlib-utl.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmlib-utl.adb?ref=b7539c3b933cd68708894228e6dfef3d48832fdf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2002-2010, AdaCore                     --\n+--                     Copyright (C) 2002-2011, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -553,8 +553,7 @@ package body MLib.Utl is\n                Write_RF (Opening'Address, 1);\n             end if;\n \n-            Write_RF\n-                (Objects (J).all'Address, Objects (J).all'Length);\n+            Write_RF (Objects (J).all'Address, Objects (J).all'Length);\n \n             --  Closing quote for GNU linker\n "}, {"sha": "1c306e3466422c4d12347e2cd9a9e6315a6e2819", "filename": "gcc/ada/s-rident.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7539c3b933cd68708894228e6dfef3d48832fdf/gcc%2Fada%2Fs-rident.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7539c3b933cd68708894228e6dfef3d48832fdf/gcc%2Fada%2Fs-rident.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-rident.ads?ref=b7539c3b933cd68708894228e6dfef3d48832fdf", "patch": "@@ -41,6 +41,8 @@\n --  so we can do the instantiation under control of Discard_Names to remove\n --  the tables.\n \n+pragma Compiler_Unit;\n+\n generic\n package System.Rident is\n    pragma Preelaborate;"}, {"sha": "efc76f113980917ab6fd92bd0c98a231581fe9af", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 41, "deletions": 43, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7539c3b933cd68708894228e6dfef3d48832fdf/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7539c3b933cd68708894228e6dfef3d48832fdf/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=b7539c3b933cd68708894228e6dfef3d48832fdf", "patch": "@@ -3114,63 +3114,61 @@ package body Sem_Ch4 is\n \n          if Present (Next_Actual (Act2)) then\n             return;\n+         end if;\n \n-         elsif     Op_Name = Name_Op_Add\n-           or else Op_Name = Name_Op_Subtract\n-           or else Op_Name = Name_Op_Multiply\n-           or else Op_Name = Name_Op_Divide\n-           or else Op_Name = Name_Op_Mod\n-           or else Op_Name = Name_Op_Rem\n-           or else Op_Name = Name_Op_Expon\n-         then\n-            Find_Arithmetic_Types (Act1, Act2, Op_Id, N);\n+         --  Otherwise action depends on operator\n \n-         elsif     Op_Name =  Name_Op_And\n-           or else Op_Name = Name_Op_Or\n-           or else Op_Name = Name_Op_Xor\n-         then\n-            Find_Boolean_Types (Act1, Act2, Op_Id, N);\n+         case Op_Name is\n+            when Name_Op_Add      |\n+                 Name_Op_Subtract |\n+                 Name_Op_Multiply |\n+                 Name_Op_Divide   |\n+                 Name_Op_Mod      |\n+                 Name_Op_Rem      |\n+                 Name_Op_Expon    =>\n+               Find_Arithmetic_Types (Act1, Act2, Op_Id, N);\n \n-         elsif     Op_Name = Name_Op_Lt\n-           or else Op_Name = Name_Op_Le\n-           or else Op_Name = Name_Op_Gt\n-           or else Op_Name = Name_Op_Ge\n-         then\n-            Find_Comparison_Types (Act1, Act2, Op_Id,  N);\n+            when Name_Op_And      |\n+                 Name_Op_Or       |\n+                 Name_Op_Xor      =>\n+               Find_Boolean_Types (Act1, Act2, Op_Id, N);\n \n-         elsif     Op_Name = Name_Op_Eq\n-           or else Op_Name = Name_Op_Ne\n-         then\n-            Find_Equality_Types (Act1, Act2, Op_Id,  N);\n+            when Name_Op_Lt       |\n+                 Name_Op_Le       |\n+                 Name_Op_Gt       |\n+                 Name_Op_Ge       =>\n+               Find_Comparison_Types (Act1, Act2, Op_Id,  N);\n \n-         elsif     Op_Name = Name_Op_Concat then\n-            Find_Concatenation_Types (Act1, Act2, Op_Id, N);\n+            when Name_Op_Eq       |\n+                 Name_Op_Ne       =>\n+               Find_Equality_Types (Act1, Act2, Op_Id,  N);\n \n-         --  Is this else null correct, or should it be an abort???\n+            when Name_Op_Concat   =>\n+               Find_Concatenation_Types (Act1, Act2, Op_Id, N);\n \n-         else\n-            null;\n-         end if;\n+            --  Is this when others, or should it be an abort???\n+\n+            when others           =>\n+               null;\n+         end case;\n \n       --  Unary operator case\n \n       else\n-         if        Op_Name = Name_Op_Subtract\n-           or else Op_Name = Name_Op_Add\n-           or else Op_Name = Name_Op_Abs\n-         then\n-            Find_Unary_Types (Act1, Op_Id, N);\n+         case Op_Name is\n+            when Name_Op_Subtract |\n+                 Name_Op_Add      |\n+                 Name_Op_Abs      =>\n+               Find_Unary_Types (Act1, Op_Id, N);\n \n-         elsif\n-            Op_Name = Name_Op_Not\n-         then\n-            Find_Negation_Types (Act1, Op_Id, N);\n+            when Name_Op_Not      =>\n+               Find_Negation_Types (Act1, Op_Id, N);\n \n-         --  Is this else null correct, or should it be an abort???\n+            --  Is this when others correct, or should it be an abort???\n \n-         else\n-            null;\n-         end if;\n+            when others           =>\n+               null;\n+         end case;\n       end if;\n    end Analyze_Operator_Call;\n "}, {"sha": "99667d0b060befa27480745a8d52d0ac0e90a0e3", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7539c3b933cd68708894228e6dfef3d48832fdf/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7539c3b933cd68708894228e6dfef3d48832fdf/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=b7539c3b933cd68708894228e6dfef3d48832fdf", "patch": "@@ -3910,8 +3910,8 @@ package body Sem_Util is\n             end if;\n          end loop;\n \n-         --  This loop checks the form of the prefix for an entity,\n-         --  using recursion to deal with intermediate components.\n+         --  This loop checks the form of the prefix for an entity, using\n+         --  recursion to deal with intermediate components.\n \n          loop\n             --  Check for Y where Y is an entity\n@@ -3925,7 +3925,6 @@ package body Sem_Util is\n             elsif\n               Nkind_In (Expr, N_Selected_Component, N_Indexed_Component)\n             then\n-\n                Expr := Prefix (Expr);\n                Off := True;\n "}]}