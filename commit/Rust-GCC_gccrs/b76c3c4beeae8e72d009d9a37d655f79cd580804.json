{"sha": "b76c3c4beeae8e72d009d9a37d655f79cd580804", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc2YzNjNGJlZWFlOGU3MmQwMDlkOWEzN2Q2NTVmNzljZDU4MDgwNA==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2007-11-05T17:13:46Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2007-11-05T17:13:46Z"}, "message": "config.gcc (arm*-*-*): Set c_target_objs and cxx_target_objs.\n\n2007-11-05  Paul Brook  <paul@codesourcery.com>\n\n\tgcc/\n\t* config.gcc (arm*-*-*): Set c_target_objs and cxx_target_objs.\n\t* config/arm/arm.c (arm_lang_output_object_attributes_hook): New.\n\t(arm_file_start): Don't set Tag_ABI_PCS_wchar_t.  Call\n\tarm_lang_output_object_attributes_hook.\n\t* config/arm/arm.h (arm_lang_output_object_attributes_hook): Declare.\n\t(REGISTER_TARGET_PRAGMAS): Call arm_lang_object_attributes_init.\n\t* config/arm/arm-protos.h (arm_lang_object_attributes_init): Add\n\tprototype.\n\t* config/arm/t-arm.c (arm.o): New rule.\n\t* config/arm/arm-c.c: New file.\n\nFrom-SVN: r129904", "tree": {"sha": "d9b1db9abf800db89044e66cfd259861dd9e81a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9b1db9abf800db89044e66cfd259861dd9e81a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b76c3c4beeae8e72d009d9a37d655f79cd580804", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b76c3c4beeae8e72d009d9a37d655f79cd580804", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b76c3c4beeae8e72d009d9a37d655f79cd580804", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b76c3c4beeae8e72d009d9a37d655f79cd580804/comments", "author": null, "committer": null, "parents": [{"sha": "04e0cb885cfba02870a9c00debc68ef2a86ce8a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04e0cb885cfba02870a9c00debc68ef2a86ce8a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04e0cb885cfba02870a9c00debc68ef2a86ce8a7"}], "stats": {"total": 66, "additions": 62, "deletions": 4}, "files": [{"sha": "5c27131c815a316121c092f56f1934e24853f870", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76c3c4beeae8e72d009d9a37d655f79cd580804/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76c3c4beeae8e72d009d9a37d655f79cd580804/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b76c3c4beeae8e72d009d9a37d655f79cd580804", "patch": "@@ -1,3 +1,20 @@\n+2007-11-05  Paul Brook  <paul@codesourcery.com>\n+\n+\t* Makefile.target: Add ssd0303.o, pl022.o and ssd0323.o.\n+\t* vl.c (register_machines): Add lm3s6965evb_machine.\n+\t* vl.h (armv7m_init): Add.\n+\t(lm3s6965evb_machine): Declare.\n+\t(pl022_init): New prototype.\n+\t(ssd0323_xfer_ssi, ssd0323_init): New prototype.\n+\t* hw/ssd0323.c: New file.\n+\t* hw/armv7m.c (armv7m_init): Remove board init code.\n+\t(lm3s811evb_machine): Remove.\n+\t* hw/osram_oled.c: Rename...\n+\t* hw/ssd0303.c: ... to this.\n+\t* hw/pl022.c: New file.\n+\t* hw/stellaris.c: Define and use stellaris_boards.\n+\t(lm3s811evb_machine, lm3s6965evb_machine): New.\n+\n 2007-11-05  Nick Clifton  <nickc@redhat.com>\n \t    Sebastian Pop  <sebastian.pop@amd.com>\n "}, {"sha": "a46dbd633d9eee37ddbe98438edd01bd280e0d7c", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76c3c4beeae8e72d009d9a37d655f79cd580804/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76c3c4beeae8e72d009d9a37d655f79cd580804/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=b76c3c4beeae8e72d009d9a37d655f79cd580804", "patch": "@@ -259,6 +259,8 @@ strongarm*-*-*)\n arm*-*-*)\n \tcpu_type=arm\n \textra_headers=\"mmintrin.h arm_neon.h\"\n+\tc_target_objs=\"arm-c.o\"\n+\tcxx_target_objs=\"arm-c.o\"\n \t;;\n bfin*-*)\n \tcpu_type=bfin"}, {"sha": "60cf5a9728cc85add2326a5e56e760f9a750602b", "filename": "gcc/config/arm/arm-c.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76c3c4beeae8e72d009d9a37d655f79cd580804/gcc%2Fconfig%2Farm%2Farm-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76c3c4beeae8e72d009d9a37d655f79cd580804/gcc%2Fconfig%2Farm%2Farm-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-c.c?ref=b76c3c4beeae8e72d009d9a37d655f79cd580804", "patch": "@@ -0,0 +1,27 @@\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tm_p.h\"\n+#include \"tree.h\"\n+#include \"output.h\"\n+#include \"c-common.h\"\n+\n+\n+/* Output C specific EABI object attributes.  These can not be done in\n+   arm.c because they require information from the C frontend.  */\n+\n+static void arm_output_c_attributes(void)\n+{\n+  /* Tag_ABI_PCS_wchar_t.  */\n+  asm_fprintf (asm_out_file, \"\\t.eabi_attribute 18, %d\\n\",\n+\t       (int)(TYPE_PRECISION (wchar_type_node) / BITS_PER_UNIT));\n+}\n+\n+\n+/* Setup so that common code calls arm_output_c_attributes.  */\n+\n+void arm_lang_object_attributes_init(void)\n+{\n+  arm_lang_output_object_attributes_hook = arm_output_c_attributes;\n+}"}, {"sha": "3a71744ea9e923e9defd8874be1a30cb98067e07", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76c3c4beeae8e72d009d9a37d655f79cd580804/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76c3c4beeae8e72d009d9a37d655f79cd580804/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=b76c3c4beeae8e72d009d9a37d655f79cd580804", "patch": "@@ -207,6 +207,8 @@ extern void arm_pr_long_calls (struct cpp_reader *);\n extern void arm_pr_no_long_calls (struct cpp_reader *);\n extern void arm_pr_long_calls_off (struct cpp_reader *);\n \n+extern void arm_lang_object_attributes_init(void);\n+\n extern const char *arm_mangle_type (const_tree);\n \n #endif /* ! GCC_ARM_PROTOS_H */"}, {"sha": "f09606cf3ea1327535d22e6e18443276bc9492e9", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76c3c4beeae8e72d009d9a37d655f79cd580804/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76c3c4beeae8e72d009d9a37d655f79cd580804/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=b76c3c4beeae8e72d009d9a37d655f79cd580804", "patch": "@@ -59,6 +59,8 @@ typedef struct minipool_fixup   Mfix;\n \n const struct attribute_spec arm_attribute_table[];\n \n+void (*arm_lang_output_object_attributes_hook)(void);\n+\n /* Forward function declarations.  */\n static arm_stack_offsets *arm_get_frame_offsets (void);\n static void arm_add_gc_roots (void);\n@@ -17508,10 +17510,6 @@ arm_file_start (void)\n          are used.  However we don't have any easy way of figuring this out.\n \t Conservatively record the setting that would have been used.  */\n \n-      /* Tag_ABI_PCS_wchar_t.  */\n-      asm_fprintf (asm_out_file, \"\\t.eabi_attribute 18, %d\\n\",\n-\t\t   (int)WCHAR_TYPE_SIZE / BITS_PER_UNIT);\n-\n       /* Tag_ABI_FP_rounding.  */\n       if (flag_rounding_math)\n \tasm_fprintf (asm_out_file, \"\\t.eabi_attribute 19, 1\\n\");\n@@ -17547,6 +17545,9 @@ arm_file_start (void)\n       else\n \tval = 6;\n       asm_fprintf (asm_out_file, \"\\t.eabi_attribute 30, %d\\n\", val);\n+\n+      if (arm_lang_output_object_attributes_hook)\n+\tarm_lang_output_object_attributes_hook();\n     }\n   default_file_start();\n }"}, {"sha": "2b83335caaf2bc82c697031ac656a79df4e3d209", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76c3c4beeae8e72d009d9a37d655f79cd580804/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76c3c4beeae8e72d009d9a37d655f79cd580804/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=b76c3c4beeae8e72d009d9a37d655f79cd580804", "patch": "@@ -132,6 +132,8 @@ extern rtx pool_vector_label;\n /* Set to 1 when a return insn is output, this means that the epilogue\n    is not needed.  */\n extern int return_used_this_function;\n+/* Callback to output language specific object attributes.  */\n+extern void (*arm_lang_output_object_attributes_hook)(void);\n \f\n /* Just in case configure has failed to define anything.  */\n #ifndef TARGET_CPU_DEFAULT\n@@ -2287,10 +2289,12 @@ extern unsigned arm_pic_register;\n extern int making_const_table;\n \f\n /* Handle pragmas for compatibility with Intel's compilers.  */\n+/* Also abuse this to register additional C specific EABI attributes.  */\n #define REGISTER_TARGET_PRAGMAS() do {\t\t\t\t\t\\\n   c_register_pragma (0, \"long_calls\", arm_pr_long_calls);\t\t\\\n   c_register_pragma (0, \"no_long_calls\", arm_pr_no_long_calls);\t\t\\\n   c_register_pragma (0, \"long_calls_off\", arm_pr_long_calls_off);\t\\\n+  arm_lang_object_attributes_init(); \\\n } while (0)\n \n /* Condition code information.  */"}, {"sha": "96e4e49a73df7cbec258a5f109ee2b5054fbc064", "filename": "gcc/config/arm/t-arm", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76c3c4beeae8e72d009d9a37d655f79cd580804/gcc%2Fconfig%2Farm%2Ft-arm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76c3c4beeae8e72d009d9a37d655f79cd580804/gcc%2Fconfig%2Farm%2Ft-arm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm?ref=b76c3c4beeae8e72d009d9a37d655f79cd580804", "patch": "@@ -23,3 +23,8 @@ $(srcdir)/config/arm/arm-tune.md: $(srcdir)/config/arm/gentune.sh \\\n \t$(SHELL) $(srcdir)/config/arm/gentune.sh \\\n \t\t$(srcdir)/config/arm/arm-cores.def > \\\n \t\t$(srcdir)/config/arm/arm-tune.md\n+\n+arm-c.o: $(srcdir)/config/arm/arm-c.c $(CONFIG_H) $(SYSTEM_H) \\\n+    coretypes.h $(TM_H) $(TREE_H) output.h $(C_COMMON_H)\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/config/arm/arm-c.c\n+"}]}