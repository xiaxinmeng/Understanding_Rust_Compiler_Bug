{"sha": "23314e77ec9e3dfea806f31b6dd65920f628f207", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMzMTRlNzdlYzllM2RmZWE4MDZmMzFiNmRkNjU5MjBmNjI4ZjIwNw==", "commit": {"author": {"name": "Adam Nemet", "email": "anemet@caviumnetworks.com", "date": "2009-06-17T22:11:47Z"}, "committer": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2009-06-17T22:11:47Z"}, "message": "tree.h (STRIP_NOPS, [...]): Use tree_strip_nop_conversions...\n\n\t* tree.h (STRIP_NOPS, STRIP_SIGN_NOPS,\n\tSTRIP_USELESS_TYPE_CONVERSION): Use tree_strip_nop_conversions,\n\ttree_strip_sign_nop_conversions and\n\ttree_ssa_strip_useless_type_conversions rather than stripping\n\tthe operations here.\n\t(tree_strip_nop_conversions, tree_strip_sign_nop_conversions):\n\tDeclare them.\n\t* gimple.h (tree_ssa_strip_useless_type_conversions): Declare it.\n\t* tree-ssa.c (tree_ssa_strip_useless_type_conversions): New function.\n\t* tree.c (tree_nop_conversion, tree_sign_nop_conversion,\n\ttree_strip_nop_conversions, tree_strip_sign_nop_conversions): New\n\tfunctions.\n\ntestsuite/\n\t* gcc.c-torture/execute/bitfld-5.c: New test.\n\nFrom-SVN: r148631", "tree": {"sha": "891864d93af2879f6eb0fac88b1eb64c1454dc24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/891864d93af2879f6eb0fac88b1eb64c1454dc24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23314e77ec9e3dfea806f31b6dd65920f628f207", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23314e77ec9e3dfea806f31b6dd65920f628f207", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23314e77ec9e3dfea806f31b6dd65920f628f207", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23314e77ec9e3dfea806f31b6dd65920f628f207/comments", "author": null, "committer": null, "parents": [{"sha": "799dbb0f77a506ed18a17ac3765b29af9dd88055", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/799dbb0f77a506ed18a17ac3765b29af9dd88055", "html_url": "https://github.com/Rust-GCC/gccrs/commit/799dbb0f77a506ed18a17ac3765b29af9dd88055"}], "stats": {"total": 172, "additions": 150, "deletions": 22}, "files": [{"sha": "bd861b0cf962cf76c77c11768edd9969c0ff51cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23314e77ec9e3dfea806f31b6dd65920f628f207/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23314e77ec9e3dfea806f31b6dd65920f628f207/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23314e77ec9e3dfea806f31b6dd65920f628f207", "patch": "@@ -1,3 +1,18 @@\n+2009-06-17  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* tree.h (STRIP_NOPS, STRIP_SIGN_NOPS,\n+\tSTRIP_USELESS_TYPE_CONVERSION): Use tree_strip_nop_conversions,\n+\ttree_strip_sign_nop_conversions and\n+\ttree_ssa_strip_useless_type_conversions rather than stripping\n+\tthe operations here.\n+\t(tree_strip_nop_conversions, tree_strip_sign_nop_conversions):\n+\tDeclare them.\n+\t* gimple.h (tree_ssa_strip_useless_type_conversions): Declare it.\n+\t* tree-ssa.c (tree_ssa_strip_useless_type_conversions): New function.\n+\t* tree.c (tree_nop_conversion, tree_sign_nop_conversion,\n+\ttree_strip_nop_conversions, tree_strip_sign_nop_conversions): New\n+\tfunctions.\n+\n 2009-06-17  Michael Eager  <eager@eagercon.com>\n \n \t* config/rs6000/constraints.md: register_constraint \"d\": New."}, {"sha": "2010109bc4ebaea5337a6139015f066bcf1836d9", "filename": "gcc/gimple.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23314e77ec9e3dfea806f31b6dd65920f628f207/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23314e77ec9e3dfea806f31b6dd65920f628f207/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=23314e77ec9e3dfea806f31b6dd65920f628f207", "patch": "@@ -997,6 +997,7 @@ extern bool validate_gimple_arglist (const_gimple, ...);\n \n /* In tree-ssa.c  */\n extern bool tree_ssa_useless_type_conversion (tree);\n+extern tree tree_ssa_strip_useless_type_conversions (tree);\n extern bool useless_type_conversion_p (tree, tree);\n extern bool types_compatible_p (tree, tree);\n "}, {"sha": "68ae876cab5753a61cc4ad33e97d6508619f6fa4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23314e77ec9e3dfea806f31b6dd65920f628f207/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23314e77ec9e3dfea806f31b6dd65920f628f207/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=23314e77ec9e3dfea806f31b6dd65920f628f207", "patch": "@@ -1,3 +1,7 @@\n+2009-06-17  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* gcc.c-torture/execute/bitfld-5.c: New test.\n+\n 2009-06-17  David Daney  <ddaney@caviumnetworks.com>\n \n \t* gcc.dg/builtin-unreachable-3.c: New test."}, {"sha": "ca88d92214ed2ca165d40da73c55744c69863afe", "filename": "gcc/testsuite/gcc.c-torture/execute/bitfld-5.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23314e77ec9e3dfea806f31b6dd65920f628f207/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbitfld-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23314e77ec9e3dfea806f31b6dd65920f628f207/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbitfld-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbitfld-5.c?ref=23314e77ec9e3dfea806f31b6dd65920f628f207", "patch": "@@ -0,0 +1,35 @@\n+/* See http://gcc.gnu.org/ml/gcc/2009-06/msg00072.html.  */\n+\n+extern void abort (void);\n+\n+struct s\n+{\n+  unsigned long long a:2;\n+  unsigned long long b:40;\n+  unsigned long long c:22;\n+};\n+\n+__attribute__ ((noinline)) void\n+g (unsigned long long a, unsigned long long b)\n+{\n+  asm (\"\");\n+  if (a != b)\n+    abort ();\n+}\n+\n+__attribute__ ((noinline)) void\n+f (struct s s, unsigned long long b)\n+{\n+  asm (\"\");\n+  g (((unsigned long long) (s.b-8)) + 8, b);\n+}\n+\n+int\n+main ()\n+{\n+  struct s s = {1, 10, 3};\n+  struct s t = {1, 2, 3};\n+  f (s, 10);\n+  f (t, 0x10000000002);\n+  return 0;\n+}"}, {"sha": "d63e974cf91fe0cd151533bd432a5b6430b062f9", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23314e77ec9e3dfea806f31b6dd65920f628f207/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23314e77ec9e3dfea806f31b6dd65920f628f207/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=23314e77ec9e3dfea806f31b6dd65920f628f207", "patch": "@@ -1079,6 +1079,18 @@ tree_ssa_useless_type_conversion (tree expr)\n   return false;\n }\n \n+/* Strip conversions from EXP according to\n+   tree_ssa_useless_type_conversion and return the resulting\n+   expression.  */\n+\n+tree\n+tree_ssa_strip_useless_type_conversions (tree exp)\n+{\n+  while (tree_ssa_useless_type_conversion (exp))\n+    exp = TREE_OPERAND (exp, 0);\n+  return exp;\n+}\n+\n \n /* Internal helper for walk_use_def_chains.  VAR, FN and DATA are as\n    described in walk_use_def_chains."}, {"sha": "f48512fceeb8c3d60e8fc90be8ce1e0b3d187696", "filename": "gcc/tree.c", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23314e77ec9e3dfea806f31b6dd65920f628f207/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23314e77ec9e3dfea806f31b6dd65920f628f207/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=23314e77ec9e3dfea806f31b6dd65920f628f207", "patch": "@@ -9460,5 +9460,78 @@ list_equal_p (const_tree t1, const_tree t2)\n   return !t1 && !t2;\n }\n \n+/* Return true iff conversion in EXP generates no instruction.  Mark\n+   it inline so that we fully inline into the stripping functions even\n+   though we have two uses of this function.  */\n+\n+static inline bool\n+tree_nop_conversion (const_tree exp)\n+{\n+  tree outer_type, inner_type;\n+\n+  if (!CONVERT_EXPR_P (exp)\n+      && TREE_CODE (exp) != NON_LVALUE_EXPR)\n+    return false;\n+  if (TREE_OPERAND (exp, 0) == error_mark_node)\n+    return false;\n+\n+  outer_type = TREE_TYPE (exp);\n+  inner_type = TREE_TYPE (TREE_OPERAND (exp, 0));\n+\n+  /* Use precision rather then machine mode when we can, which gives\n+     the correct answer even for submode (bit-field) types.  */\n+  if ((INTEGRAL_TYPE_P (outer_type)\n+       || POINTER_TYPE_P (outer_type)\n+       || TREE_CODE (outer_type) == OFFSET_TYPE)\n+      && (INTEGRAL_TYPE_P (inner_type)\n+\t  || POINTER_TYPE_P (inner_type)\n+\t  || TREE_CODE (inner_type) == OFFSET_TYPE))\n+    return TYPE_PRECISION (outer_type) == TYPE_PRECISION (inner_type);\n+\n+  /* Otherwise fall back on comparing machine modes (e.g. for\n+     aggregate types, floats).  */\n+  return TYPE_MODE (outer_type) == TYPE_MODE (inner_type);\n+}\n+\n+/* Return true iff conversion in EXP generates no instruction.  Don't\n+   consider conversions changing the signedness.  */\n+\n+static bool\n+tree_sign_nop_conversion (const_tree exp)\n+{\n+  tree outer_type, inner_type;\n+\n+  if (!tree_nop_conversion (exp))\n+    return false;\n+\n+  outer_type = TREE_TYPE (exp);\n+  inner_type = TREE_TYPE (TREE_OPERAND (exp, 0));\n+\n+  return (TYPE_UNSIGNED (outer_type) == TYPE_UNSIGNED (inner_type)\n+\t  && POINTER_TYPE_P (outer_type) == POINTER_TYPE_P (inner_type));\n+}\n+\n+/* Strip conversions from EXP according to tree_nop_conversion and\n+   return the resulting expression.  */\n+\n+tree\n+tree_strip_nop_conversions (tree exp)\n+{\n+  while (tree_nop_conversion (exp))\n+    exp = TREE_OPERAND (exp, 0);\n+  return exp;\n+}\n+\n+/* Strip conversions from EXP according to tree_sign_nop_conversion\n+   and return the resulting expression.  */\n+\n+tree\n+tree_strip_sign_nop_conversions (tree exp)\n+{\n+  while (tree_sign_nop_conversion (exp))\n+    exp = TREE_OPERAND (exp, 0);\n+  return exp;\n+}\n+\n \n #include \"gt-tree.h\""}, {"sha": "8aabf79cebe0afd948c99adf6dc938e44fe83706", "filename": "gcc/tree.h", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23314e77ec9e3dfea806f31b6dd65920f628f207/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23314e77ec9e3dfea806f31b6dd65920f628f207/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=23314e77ec9e3dfea806f31b6dd65920f628f207", "patch": "@@ -966,30 +966,17 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n   case NOP_EXPR:\t\t\t\t\t\t\\\n   case CONVERT_EXPR\n \n-/* Given an expression as a tree, strip any NON_LVALUE_EXPRs and NOP_EXPRs\n-   that don't change the machine mode.  */\n+/* Given an expression as a tree, strip any conversion that generates\n+   no instruction.  Accepts both tree and const_tree arguments since\n+   we are not modifying the tree itself.  */\n \n-#define STRIP_NOPS(EXP)\t\t\t\t\t\t\\\n-  while ((CONVERT_EXPR_P (EXP)\t\t\t\t\t\\\n-\t  || TREE_CODE (EXP) == NON_LVALUE_EXPR)\t\t\\\n-\t && TREE_OPERAND (EXP, 0) != error_mark_node\t\t\\\n-\t && (TYPE_MODE (TREE_TYPE (EXP))\t\t\t\\\n-\t     == TYPE_MODE (TREE_TYPE (TREE_OPERAND (EXP, 0))))) \\\n-    (EXP) = TREE_OPERAND (EXP, 0)\n+#define STRIP_NOPS(EXP) \\\n+  (EXP) = tree_strip_nop_conversions (CONST_CAST_TREE (EXP))\n \n /* Like STRIP_NOPS, but don't let the signedness change either.  */\n \n #define STRIP_SIGN_NOPS(EXP) \\\n-  while ((CONVERT_EXPR_P (EXP)\t\t\t\t\t\\\n-\t  || TREE_CODE (EXP) == NON_LVALUE_EXPR)\t\t\\\n-\t && TREE_OPERAND (EXP, 0) != error_mark_node\t\t\\\n-\t && (TYPE_MODE (TREE_TYPE (EXP))\t\t\t\\\n-\t     == TYPE_MODE (TREE_TYPE (TREE_OPERAND (EXP, 0))))\t\\\n-\t && (TYPE_UNSIGNED (TREE_TYPE (EXP))\t\t\t\\\n-\t     == TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (EXP, 0)))) \\\n-\t && (POINTER_TYPE_P (TREE_TYPE (EXP))\t\t\t\\\n-\t     == POINTER_TYPE_P (TREE_TYPE (TREE_OPERAND (EXP, 0))))) \\\n-    (EXP) = TREE_OPERAND (EXP, 0)\n+  (EXP) = tree_strip_sign_nop_conversions (CONST_CAST_TREE (EXP))\n \n /* Like STRIP_NOPS, but don't alter the TREE_TYPE either.  */\n \n@@ -1004,9 +991,8 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n /* Remove unnecessary type conversions according to\n    tree_ssa_useless_type_conversion.  */\n \n-#define STRIP_USELESS_TYPE_CONVERSION(EXP)\t\t\t\t\\\n-      while (tree_ssa_useless_type_conversion (EXP))\t\t\t\\\n-\tEXP = TREE_OPERAND (EXP, 0)\n+#define STRIP_USELESS_TYPE_CONVERSION(EXP) \\\n+  (EXP) = tree_ssa_strip_useless_type_conversions (EXP)\n \n /* Nonzero if TYPE represents an integral type.  Note that we do not\n    include COMPLEX types here.  Keep these checks in ascending code\n@@ -4632,6 +4618,8 @@ extern bool stdarg_p (tree);\n extern bool prototype_p (tree);\n extern bool auto_var_in_fn_p (const_tree, const_tree);\n extern tree build_low_bits_mask (tree, unsigned);\n+extern tree tree_strip_nop_conversions (tree);\n+extern tree tree_strip_sign_nop_conversions (tree);\n \f\n /* In cgraph.c */\n extern void change_decl_assembler_name (tree, tree);"}]}