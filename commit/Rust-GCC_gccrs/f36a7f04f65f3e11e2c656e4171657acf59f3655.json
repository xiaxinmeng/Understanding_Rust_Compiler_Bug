{"sha": "f36a7f04f65f3e11e2c656e4171657acf59f3655", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM2YTdmMDRmNjVmM2UxMWUyYzY1NmU0MTcxNjU3YWNmNTlmMzY1NQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-11-23T09:52:04Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-11-23T09:52:04Z"}, "message": "re PR fortran/82814 (ICE from submodule character function)\n\n2017-11-23  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/82814\n\t* trans-types.c (gfc_sym_type): If a character function result\n\tis missing the charlen backend_decl, use the one from the name-\n\tspace procedure symbol, if present.\n\n2017-11-23  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/82814\n\t* gfortran.dg/submodule_31.f08: New test.\n\nFrom-SVN: r255094", "tree": {"sha": "fb63a6bad613369a7c94717b06feb22ab3cf50b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb63a6bad613369a7c94717b06feb22ab3cf50b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f36a7f04f65f3e11e2c656e4171657acf59f3655", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f36a7f04f65f3e11e2c656e4171657acf59f3655", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f36a7f04f65f3e11e2c656e4171657acf59f3655", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f36a7f04f65f3e11e2c656e4171657acf59f3655/comments", "author": null, "committer": null, "parents": [{"sha": "d7a160a45ea7ed09247788c708721c2813cf0007", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7a160a45ea7ed09247788c708721c2813cf0007", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7a160a45ea7ed09247788c708721c2813cf0007"}], "stats": {"total": 72, "additions": 72, "deletions": 0}, "files": [{"sha": "036bf7b2994838e52e32be33dab5f0c2ebbba597", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f36a7f04f65f3e11e2c656e4171657acf59f3655/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f36a7f04f65f3e11e2c656e4171657acf59f3655/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f36a7f04f65f3e11e2c656e4171657acf59f3655", "patch": "@@ -1,3 +1,10 @@\n+2017-11-23  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82814\n+\t* trans-types.c (gfc_sym_type): If a character function result\n+\tis missing the charlen backend_decl, use the one from the name-\n+\tspace procedure symbol, if present.\n+\n 2017-11-22  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/62170"}, {"sha": "6868329575b8e1818a53358e5e31e0b3843e2774", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f36a7f04f65f3e11e2c656e4171657acf59f3655/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f36a7f04f65f3e11e2c656e4171657acf59f3655/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=f36a7f04f65f3e11e2c656e4171657acf59f3655", "patch": "@@ -2201,6 +2201,12 @@ gfc_sym_type (gfc_symbol * sym)\n   if (sym->backend_decl && !sym->attr.function)\n     return TREE_TYPE (sym->backend_decl);\n \n+  if (sym->attr.result\n+      && sym->ts.type == BT_CHARACTER\n+      && sym->ts.u.cl->backend_decl == NULL_TREE\n+      && sym->ns->proc_name->ts.u.cl->backend_decl != NULL_TREE)\n+    sym->ts.u.cl->backend_decl = sym->ns->proc_name->ts.u.cl->backend_decl;\n+\n   if (sym->ts.type == BT_CHARACTER\n       && ((sym->attr.function && sym->attr.is_bind_c)\n \t  || (sym->attr.result"}, {"sha": "58b9276c5c04c2e92fabac2d254c35f29279f710", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f36a7f04f65f3e11e2c656e4171657acf59f3655/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f36a7f04f65f3e11e2c656e4171657acf59f3655/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f36a7f04f65f3e11e2c656e4171657acf59f3655", "patch": "@@ -1,3 +1,8 @@\n+2017-11-23  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82814\n+\t* gfortran.dg/submodule_31.f08: New test.\n+\n 2017-11-23  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/23094"}, {"sha": "72594d05df39c50e19b95649a1c2bac1a655929a", "filename": "gcc/testsuite/gfortran.dg/submodule_31.f08", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f36a7f04f65f3e11e2c656e4171657acf59f3655/gcc%2Ftestsuite%2Fgfortran.dg%2Fsubmodule_31.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f36a7f04f65f3e11e2c656e4171657acf59f3655/gcc%2Ftestsuite%2Fgfortran.dg%2Fsubmodule_31.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsubmodule_31.f08?ref=f36a7f04f65f3e11e2c656e4171657acf59f3655", "patch": "@@ -0,0 +1,54 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR82814 in which an ICE occurred for the submodule allocation.\n+!\n+! Contributed by \"Werner Blokbuster\"  <werner.blokbuster@gmail.com>\n+!\n+module u\n+\n+    implicit none\n+\n+    interface unique\n+        module function uniq_char(input) result(uniq)\n+            character(*), intent(in) :: input(:)\n+            character(size(input)), allocatable :: uniq(:)\n+        end function uniq_char\n+    end interface unique\n+\n+contains\n+\n+    module function uniq2(input) result(uniq)\n+        character(*), intent(in) :: input(:)\n+        character(size(input)), allocatable :: uniq(:)\n+            allocate(uniq(1))\n+            uniq = 'A'\n+    end function uniq2\n+\n+end module u\n+\n+\n+submodule (u) z\n+\n+    implicit none\n+\n+contains\n+\n+    module function uniq_char(input) result(uniq)\n+        character(*), intent(in) :: input(:)\n+        character(size(input)), allocatable :: uniq(:)\n+            allocate(uniq(1)) ! This used to ICE\n+            uniq = 'A'\n+    end function uniq_char\n+\n+end submodule z\n+\n+\n+program test_uniq\n+    use u\n+    implicit none\n+    character(1), dimension(4) :: chr = ['1','2','1','2']\n+\n+    write(*,*) unique(chr)\n+    write(*,*) uniq2(chr)\n+\n+end program test_uniq"}]}