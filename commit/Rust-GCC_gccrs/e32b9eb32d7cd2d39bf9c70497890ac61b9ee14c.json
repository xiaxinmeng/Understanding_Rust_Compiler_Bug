{"sha": "e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c", "node_id": "C_kwDOANBUbNoAKGUzMmI5ZWIzMmQ3Y2QyZDM5YmY5YzcwNDk3ODkwYWM2MWI5ZWUxNGM", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-11-30T09:52:25Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-11-30T09:52:25Z"}, "message": "vect: Add support for fmax and fmin reductions\n\nThis patch adds support for reductions involving calls to fmax*()\nand fmin*(), without the -ffast-math flags that allow them to be\nconverted to MAX_EXPR and MIN_EXPR.\n\ngcc/\n\t* doc/md.texi (reduc_fmin_scal_@var{m}): Document.\n\t(reduc_fmax_scal_@var{m}): Likewise.\n\t* optabs.def (reduc_fmax_scal_optab): New optab.\n\t(reduc_fmin_scal_optab): Likewise\n\t* internal-fn.def (REDUC_FMAX, REDUC_FMIN): New functions.\n\t* tree-vect-loop.c (reduction_fn_for_scalar_code): Handle\n\tCASE_CFN_FMAX and CASE_CFN_FMIN.\n\t(neutral_op_for_reduction): Likewise.\n\t(needs_fold_left_reduction_p): Likewise.\n\t* config/aarch64/iterators.md (FMAXMINV): New iterator.\n\t(fmaxmin): Handle UNSPEC_FMAXNMV and UNSPEC_FMINNMV.\n\t* config/aarch64/aarch64-simd.md (reduc_<optab>_scal_<mode>): Fix\n\tunspec mode.\n\t(reduc_<fmaxmin>_scal_<mode>): New pattern.\n\t* config/aarch64/aarch64-sve.md (reduc_<fmaxmin>_scal_<mode>):\n\tLikewise.\n\ngcc/testsuite/\n\t* gcc.dg/vect/vect-fmax-1.c: New test.\n\t* gcc.dg/vect/vect-fmax-2.c: Likewise.\n\t* gcc.dg/vect/vect-fmax-3.c: Likewise.\n\t* gcc.dg/vect/vect-fmin-1.c: New test.\n\t* gcc.dg/vect/vect-fmin-2.c: Likewise.\n\t* gcc.dg/vect/vect-fmin-3.c: Likewise.\n\t* gcc.target/aarch64/fmaxnm_1.c: Likewise.\n\t* gcc.target/aarch64/fmaxnm_2.c: Likewise.\n\t* gcc.target/aarch64/fminnm_1.c: Likewise.\n\t* gcc.target/aarch64/fminnm_2.c: Likewise.\n\t* gcc.target/aarch64/sve/fmaxnm_2.c: Likewise.\n\t* gcc.target/aarch64/sve/fmaxnm_3.c: Likewise.\n\t* gcc.target/aarch64/sve/fminnm_2.c: Likewise.\n\t* gcc.target/aarch64/sve/fminnm_3.c: Likewise.", "tree": {"sha": "3f4188ad4a2fc980f1b134c4f0137c3aba7947d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f4188ad4a2fc980f1b134c4f0137c3aba7947d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30213ae9a2eb53f6bc0913919457ceae2572b019", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30213ae9a2eb53f6bc0913919457ceae2572b019", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30213ae9a2eb53f6bc0913919457ceae2572b019"}], "stats": {"total": 608, "additions": 599, "deletions": 9}, "files": [{"sha": "8e61dd9fcbbd71eec9eaa019763bc2a2316195b8", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c", "patch": "@@ -3592,8 +3592,8 @@\n ;; gimple_fold'd to the IFN_REDUC_(MAX|MIN) function.  (This is FP smax/smin).\n (define_expand \"reduc_<optab>_scal_<mode>\"\n   [(match_operand:<VEL> 0 \"register_operand\")\n-   (unspec:VHSDF [(match_operand:VHSDF 1 \"register_operand\")]\n-\t\t  FMAXMINV)]\n+   (unspec:<VEL> [(match_operand:VHSDF 1 \"register_operand\")]\n+\t\t FMAXMINV)]\n   \"TARGET_SIMD\"\n   {\n     rtx elt = aarch64_endian_lane_rtx (<MODE>mode, 0);\n@@ -3605,6 +3605,17 @@\n   }\n )\n \n+(define_expand \"reduc_<fmaxmin>_scal_<mode>\"\n+  [(match_operand:<VEL> 0 \"register_operand\")\n+   (unspec:<VEL> [(match_operand:VHSDF 1 \"register_operand\")]\n+\t\t FMAXMINNMV)]\n+  \"TARGET_SIMD\"\n+  {\n+    emit_insn (gen_reduc_<optab>_scal_<mode> (operands[0], operands[1]));\n+    DONE;\n+  }\n+)\n+\n ;; Likewise for integer cases, signed and unsigned.\n (define_expand \"reduc_<optab>_scal_<mode>\"\n   [(match_operand:<VEL> 0 \"register_operand\")"}, {"sha": "9ef968840c20a3049901b3f8a919cf27ded1da3e", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c", "patch": "@@ -8566,6 +8566,17 @@\n   }\n )\n \n+(define_expand \"reduc_<fmaxmin>_scal_<mode>\"\n+  [(match_operand:<VEL> 0 \"register_operand\")\n+   (unspec:<VEL> [(match_operand:SVE_FULL_F 1 \"register_operand\")]\n+\t\t FMAXMINNMV)]\n+  \"TARGET_SVE\"\n+  {\n+    emit_insn (gen_reduc_<optab>_scal_<mode> (operands[0], operands[1]));\n+    DONE;\n+  }\n+)\n+\n ;; Predicated floating-point tree reductions.\n (define_insn \"@aarch64_pred_reduc_<optab>_<mode>\"\n   [(set (match_operand:<VEL> 0 \"register_operand\" \"=w\")"}, {"sha": "0b34e7f7d16c2cc08e69026543e93858eee0f5dd", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c", "patch": "@@ -2519,6 +2519,8 @@\n (define_int_iterator FMAXMINV [UNSPEC_FMAXV UNSPEC_FMINV\n \t\t\t       UNSPEC_FMAXNMV UNSPEC_FMINNMV])\n \n+(define_int_iterator FMAXMINNMV [UNSPEC_FMAXNMV UNSPEC_FMINNMV])\n+\n (define_int_iterator SVE_INT_ADDV [UNSPEC_SADDV UNSPEC_UADDV])\n \n (define_int_iterator USADDLP [UNSPEC_SADDLP UNSPEC_UADDLP])\n@@ -3225,8 +3227,10 @@\n \n (define_int_attr fmaxmin [(UNSPEC_FMAX \"fmax_nan\")\n \t\t\t  (UNSPEC_FMAXNM \"fmax\")\n+\t\t\t  (UNSPEC_FMAXNMV \"fmax\")\n \t\t\t  (UNSPEC_FMIN \"fmin_nan\")\n \t\t\t  (UNSPEC_FMINNM \"fmin\")\n+\t\t\t  (UNSPEC_FMINNMV \"fmin\")\n \t\t\t  (UNSPEC_COND_FMAXNM \"fmax\")\n \t\t\t  (UNSPEC_COND_FMINNM \"fmin\")])\n "}, {"sha": "8fd0f8d2fe1b70b8d5185c634246bec719d46877", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c", "patch": "@@ -5400,6 +5400,14 @@ Find the unsigned minimum/maximum of the elements of a vector. The vector is\n operand 1, and operand 0 is the scalar result, with mode equal to the mode of\n the elements of the input vector.\n \n+@cindex @code{reduc_fmin_scal_@var{m}} instruction pattern\n+@cindex @code{reduc_fmax_scal_@var{m}} instruction pattern\n+@item @samp{reduc_fmin_scal_@var{m}}, @samp{reduc_fmax_scal_@var{m}}\n+Find the floating-point minimum/maximum of the elements of a vector,\n+using the same rules as @code{fmin@var{m}3} and @code{fmax@var{m}3}.\n+Operand 1 is a vector of mode @var{m} and operand 0 is the scalar\n+result, which has mode @code{GET_MODE_INNER (@var{m})}.\n+\n @cindex @code{reduc_plus_scal_@var{m}} instruction pattern\n @item @samp{reduc_plus_scal_@var{m}}\n Compute the sum of the elements of a vector. The vector is operand 1, and"}, {"sha": "acb0dbda5567b1f449a08698ab4935adeb09d86d", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c", "patch": "@@ -216,6 +216,10 @@ DEF_INTERNAL_SIGNED_OPTAB_FN (REDUC_MAX, ECF_CONST | ECF_NOTHROW, first,\n \t\t\t      reduc_smax_scal, reduc_umax_scal, unary)\n DEF_INTERNAL_SIGNED_OPTAB_FN (REDUC_MIN, ECF_CONST | ECF_NOTHROW, first,\n \t\t\t      reduc_smin_scal, reduc_umin_scal, unary)\n+DEF_INTERNAL_OPTAB_FN (REDUC_FMAX, ECF_CONST | ECF_NOTHROW,\n+\t\t       reduc_fmax_scal, unary)\n+DEF_INTERNAL_OPTAB_FN (REDUC_FMIN, ECF_CONST | ECF_NOTHROW,\n+\t\t       reduc_fmin_scal, unary)\n DEF_INTERNAL_OPTAB_FN (REDUC_AND, ECF_CONST | ECF_NOTHROW,\n \t\t       reduc_and_scal, unary)\n DEF_INTERNAL_OPTAB_FN (REDUC_IOR, ECF_CONST | ECF_NOTHROW,"}, {"sha": "cef6054b378160882a1450c1f8e2c5b11d510b98", "filename": "gcc/optabs.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Foptabs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Foptabs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.def?ref=e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c", "patch": "@@ -335,6 +335,8 @@ OPTAB_D (fmax_optab, \"fmax$a3\")\n OPTAB_D (fmin_optab, \"fmin$a3\")\n \n /* Vector reduction to a scalar.  */\n+OPTAB_D (reduc_fmax_scal_optab, \"reduc_fmax_scal_$a\")\n+OPTAB_D (reduc_fmin_scal_optab, \"reduc_fmin_scal_$a\")\n OPTAB_D (reduc_smax_scal_optab, \"reduc_smax_scal_$a\")\n OPTAB_D (reduc_smin_scal_optab, \"reduc_smin_scal_$a\")\n OPTAB_D (reduc_plus_scal_optab, \"reduc_plus_scal_$a\")"}, {"sha": "841ffab5666fb62a4f503630b0eb61d371b959a9", "filename": "gcc/testsuite/gcc.dg/vect/vect-fmax-1.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-fmax-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-fmax-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-fmax-1.c?ref=e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c", "patch": "@@ -0,0 +1,83 @@\n+#include \"tree-vect.h\"\n+\n+#ifndef TYPE\n+#define TYPE float\n+#define FN __builtin_fmaxf\n+#endif\n+\n+TYPE __attribute__((noipa))\n+test (TYPE x, TYPE *ptr, int n)\n+{\n+  for (int i = 0; i < n; ++i)\n+    x = FN (x, ptr[i]);\n+  return x;\n+}\n+\n+#define N 128\n+#define HALF (N / 2)\n+\n+int\n+main (void)\n+{\n+  check_vect ();\n+\n+  TYPE a[N];\n+\n+  for (int i = 0; i < N; ++i)\n+    a[i] = i;\n+\n+  if (test (-1, a, 1) != 0)\n+    __builtin_abort ();\n+  if (test (-1, a, 64) != 63)\n+    __builtin_abort ();\n+  if (test (-1, a, 65) != 64)\n+    __builtin_abort ();\n+  if (test (-1, a, 66) != 65)\n+    __builtin_abort ();\n+  if (test (-1, a, 67) != 66)\n+    __builtin_abort ();\n+  if (test (-1, a, 128) != 127)\n+    __builtin_abort ();\n+  if (test (127, a, 128) != 127)\n+    __builtin_abort ();\n+  if (test (128, a, 128) != 128)\n+    __builtin_abort ();\n+\n+  for (int i = 0; i < N; ++i)\n+    a[i] = -i;\n+\n+  if (test (-60, a, 4) != 0)\n+    __builtin_abort ();\n+  if (test (0, a, 4) != 0)\n+    __builtin_abort ();\n+  if (test (1, a, 4) != 1)\n+    __builtin_abort ();\n+\n+  for (int i = 0; i < HALF; ++i)\n+    {\n+      a[i] = i;\n+      a[HALF + i] = HALF - i;\n+    }\n+\n+  if (test (0, a, HALF - 16) != HALF - 17)\n+    __builtin_abort ();\n+  if (test (0, a, HALF - 2) != HALF - 3)\n+    __builtin_abort ();\n+  if (test (0, a, HALF - 1) != HALF - 2)\n+    __builtin_abort ();\n+  if (test (0, a, HALF) != HALF - 1)\n+    __builtin_abort ();\n+  if (test (0, a, HALF + 1) != HALF)\n+    __builtin_abort ();\n+  if (test (0, a, HALF + 2) != HALF)\n+    __builtin_abort ();\n+  if (test (0, a, HALF + 3) != HALF)\n+    __builtin_abort ();\n+  if (test (0, a, HALF + 16) != HALF)\n+    __builtin_abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Detected reduction\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"LOOP VECTORIZED\" \"vect\" { target vect_max_reduc } } } */"}, {"sha": "3d1f64416d5e8cad13d8ce5fca73010c0c75d015", "filename": "gcc/testsuite/gcc.dg/vect/vect-fmax-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-fmax-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-fmax-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-fmax-2.c?ref=e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c", "patch": "@@ -0,0 +1,7 @@\n+#define TYPE double\n+#define FN __builtin_fmax\n+\n+#include \"vect-fmax-1.c\"\n+\n+/* { dg-final { scan-tree-dump \"Detected reduction\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"LOOP VECTORIZED\" \"vect\" { target vect_max_reduc } } } */"}, {"sha": "f711ed0563e3ee3baeea8262d10af18d6a097b51", "filename": "gcc/testsuite/gcc.dg/vect/vect-fmax-3.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-fmax-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-fmax-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-fmax-3.c?ref=e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c", "patch": "@@ -0,0 +1,83 @@\n+#include \"tree-vect.h\"\n+\n+void __attribute__((noipa))\n+test (double x0, double x1, double *restrict res, double *restrict ptr, int n)\n+{\n+  for (int i = 0; i < n; i += 2)\n+    {\n+      x0 = __builtin_fmax (x0, ptr[i + 0]);\n+      x1 = __builtin_fmax (x1, ptr[i + 1]);\n+    }\n+  res[0] = x0;\n+  res[1] = x1;\n+}\n+\n+#define N 128\n+#define HALF (N / 2)\n+\n+int\n+main (void)\n+{\n+  check_vect ();\n+\n+  double res[2], a[N];\n+\n+  for (int i = 0; i < N; i += 2)\n+    {\n+      a[i] = i < HALF ? i : HALF;\n+      a[i + 1] = i / 8;\n+    }\n+\n+  test (-1, -1, res, a, 2);\n+  if (res[0] != 0 || res[1] != 0)\n+    __builtin_abort ();\n+\n+  test (-1, -1, res, a, 6);\n+  if (res[0] != 4 || res[1] != 0)\n+    __builtin_abort ();\n+\n+  test (-1, -1, res, a, 8);\n+  if (res[0] != 6 || res[1] != 0)\n+    __builtin_abort ();\n+\n+  test (-1, -1, res, a, 10);\n+  if (res[0] != 8 || res[1] != 1)\n+    __builtin_abort ();\n+\n+  test (-1, -1, res, a, HALF - 2);\n+  if (res[0] != HALF - 4 || res[1] != HALF / 8 - 1)\n+    __builtin_abort ();\n+\n+  test (-1, -1, res, a, HALF);\n+  if (res[0] != HALF - 2 || res[1] != HALF / 8 - 1)\n+    __builtin_abort ();\n+\n+  test (-1, -1, res, a, HALF + 2);\n+  if (res[0] != HALF || res[1] != HALF / 8)\n+    __builtin_abort ();\n+\n+  test (-1, -1, res, a, HALF + 8);\n+  if (res[0] != HALF || res[1] != HALF / 8)\n+    __builtin_abort ();\n+\n+  test (-1, -1, res, a, HALF + 10);\n+  if (res[0] != HALF || res[1] != HALF / 8 + 1)\n+    __builtin_abort ();\n+\n+  test (-1, -1, res, a, N);\n+  if (res[0] != HALF || res[1] != N / 8 - 1)\n+    __builtin_abort ();\n+\n+  test (HALF + 1, -1, res, a, N);\n+  if (res[0] != HALF + 1 || res[1] != N / 8 - 1)\n+    __builtin_abort ();\n+\n+  test (HALF + 1, N, res, a, N);\n+  if (res[0] != HALF + 1 || res[1] != N)\n+    __builtin_abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Detected reduction\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"LOOP VECTORIZED\" \"vect\" { target vect_max_reduc } } } */"}, {"sha": "3d5f843a9db377e834886ae145c6346596ceb7c8", "filename": "gcc/testsuite/gcc.dg/vect/vect-fmin-1.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-fmin-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-fmin-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-fmin-1.c?ref=e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c", "patch": "@@ -0,0 +1,86 @@\n+#include \"tree-vect.h\"\n+\n+#ifndef TYPE\n+#define TYPE float\n+#define FN __builtin_fminf\n+#endif\n+\n+TYPE __attribute__((noipa))\n+test (TYPE x, TYPE *ptr, int n)\n+{\n+  for (int i = 0; i < n; ++i)\n+    x = FN (x, ptr[i]);\n+  return x;\n+}\n+\n+#define N 128\n+#define HALF (N / 2)\n+\n+int\n+main (void)\n+{\n+  check_vect ();\n+\n+  TYPE a[N];\n+\n+  for (int i = 0; i < N; ++i)\n+    a[i] = -i;\n+\n+  if (test (1, a, 1) != 0)\n+    __builtin_abort ();\n+  if (test (1, a, 64) != -63)\n+    __builtin_abort ();\n+  if (test (1, a, 65) != -64)\n+    __builtin_abort ();\n+  if (test (1, a, 66) != -65)\n+    __builtin_abort ();\n+  if (test (1, a, 67) != -66)\n+    __builtin_abort ();\n+  if (test (1, a, 128) != -127)\n+    __builtin_abort ();\n+  if (test (-127, a, 128) != -127)\n+    __builtin_abort ();\n+  if (test (-128, a, 128) != -128)\n+    __builtin_abort ();\n+\n+  for (int i = 0; i < N; ++i)\n+    a[i] = i;\n+\n+  if (test (1, a, 4) != 0)\n+    __builtin_abort ();\n+  if (test (0, a, 4) != 0)\n+    __builtin_abort ();\n+  if (test (-1, a, 4) != -1)\n+    __builtin_abort ();\n+\n+  for (int i = 0; i < HALF; ++i)\n+    {\n+      a[i] = HALF - i;\n+      a[HALF + i] = i;\n+    }\n+\n+  if (test (N, a, HALF - 16) != 17)\n+    __builtin_abort ();\n+  if (test (N, a, HALF - 2) != 3)\n+    __builtin_abort ();\n+  if (test (N, a, HALF - 1) != 2)\n+    __builtin_abort ();\n+  if (test (N, a, HALF) != 1)\n+    __builtin_abort ();\n+  if (test (N, a, HALF + 1) != 0)\n+    __builtin_abort ();\n+  if (test (N, a, HALF + 2) != 0)\n+    __builtin_abort ();\n+  if (test (N, a, HALF + 3) != 0)\n+    __builtin_abort ();\n+  if (test (N, a, HALF + 16) != 0)\n+    __builtin_abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Detected reduction\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"LOOP VECTORIZED\" \"vect\" { target vect_max_reduc } } } */\n+\n+/* { dg-final { scan-tree-dump \"Detected reduction\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"LOOP VECTORIZED\" \"vect\" { target vect_max_reduc } } } */"}, {"sha": "21e45cca55a87d47ebb5122366b1998f1fed7b62", "filename": "gcc/testsuite/gcc.dg/vect/vect-fmin-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-fmin-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-fmin-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-fmin-2.c?ref=e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c", "patch": "@@ -0,0 +1,9 @@\n+#ifndef TYPE\n+#define TYPE double\n+#define FN __builtin_fmin\n+#endif\n+\n+#include \"vect-fmin-1.c\"\n+\n+/* { dg-final { scan-tree-dump \"Detected reduction\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"LOOP VECTORIZED\" \"vect\" { target vect_max_reduc } } } */"}, {"sha": "cc38bf439093581a0e3afd3963ba0ccdc4cadf8f", "filename": "gcc/testsuite/gcc.dg/vect/vect-fmin-3.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-fmin-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-fmin-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-fmin-3.c?ref=e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c", "patch": "@@ -0,0 +1,83 @@\n+#include \"tree-vect.h\"\n+\n+void __attribute__((noipa))\n+test (double x0, double x1, double *restrict res, double *restrict ptr, int n)\n+{\n+  for (int i = 0; i < n; i += 2)\n+    {\n+      x0 = __builtin_fmin (x0, ptr[i + 0]);\n+      x1 = __builtin_fmin (x1, ptr[i + 1]);\n+    }\n+  res[0] = x0;\n+  res[1] = x1;\n+}\n+\n+#define N 128\n+#define HALF (N / 2)\n+\n+int\n+main (void)\n+{\n+  check_vect ();\n+\n+  double res[2], a[N];\n+\n+  for (int i = 0; i < N; i += 2)\n+    {\n+      a[i] = i < HALF ? HALF - i : 0;\n+      a[i + 1] = -i / 8;\n+    }\n+\n+  test (N, N, res, a, 2);\n+  if (res[0] != HALF || res[1] != 0)\n+    __builtin_abort ();\n+\n+  test (N, N, res, a, 6);\n+  if (res[0] != HALF - 4 || res[1] != 0)\n+    __builtin_abort ();\n+\n+  test (N, N, res, a, 8);\n+  if (res[0] != HALF - 6 || res[1] != 0)\n+    __builtin_abort ();\n+\n+  test (N, N, res, a, 10);\n+  if (res[0] != HALF - 8 || res[1] != -1)\n+    __builtin_abort ();\n+\n+  test (N, N, res, a, HALF - 2);\n+  if (res[0] != 4 || res[1] != -HALF / 8 + 1)\n+    __builtin_abort ();\n+\n+  test (N, N, res, a, HALF);\n+  if (res[0] != 2 || res[1] != -HALF / 8 + 1)\n+    __builtin_abort ();\n+\n+  test (N, N, res, a, HALF + 2);\n+  if (res[0] != 0 || res[1] != -HALF / 8)\n+    __builtin_abort ();\n+\n+  test (N, N, res, a, HALF + 8);\n+  if (res[0] != 0 || res[1] != -HALF / 8)\n+    __builtin_abort ();\n+\n+  test (N, N, res, a, HALF + 10);\n+  if (res[0] != 0 || res[1] != -HALF / 8 - 1)\n+    __builtin_abort ();\n+\n+  test (N, N, res, a, N);\n+  if (res[0] != 0 || res[1] != -N / 8 + 1)\n+    __builtin_abort ();\n+\n+  test (-1, N, res, a, N);\n+  if (res[0] != -1 || res[1] != -N / 8 + 1)\n+    __builtin_abort ();\n+\n+  test (-1, -N / 8, res, a, N);\n+  if (res[0] != -1 || res[1] != -N / 8)\n+    __builtin_abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Detected reduction\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"LOOP VECTORIZED\" \"vect\" { target vect_max_reduc } } } */"}, {"sha": "40c36c7a3dc242d6d3aeac29c72a711d2a23e670", "filename": "gcc/testsuite/gcc.target/aarch64/fmaxnm_1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmaxnm_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmaxnm_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmaxnm_1.c?ref=e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-options \"-O2 -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+#pragma GCC target \"+nosve\"\n+\n+float\n+f1 (float x, float *ptr)\n+{\n+  for (int i = 0; i < 128; ++i)\n+    x = __builtin_fmaxf (x, ptr[i]);\n+  return x;\n+}\n+\n+double\n+f2 (double x, double *ptr)\n+{\n+  for (int i = 0; i < 128; ++i)\n+    x = __builtin_fmax (x, ptr[i]);\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tv[0-9]+\\.4s, v[0-9]+\\.4s, v[0-9]+\\.4s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnmv\\ts[0-9]+, v[0-9]+\\.4s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tv[0-9]+\\.2d, v[0-9]+\\.2d, v[0-9]+\\.2d\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnmp\\td[0-9]+, v[0-9]+\\.2d\\n} 1 } } */"}, {"sha": "6e48ac8eeee69d1077fad264cef1f1566b6842f6", "filename": "gcc/testsuite/gcc.target/aarch64/fmaxnm_2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmaxnm_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmaxnm_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmaxnm_2.c?ref=e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-options \"-O2 -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+#pragma GCC target \"+nosve\"\n+\n+void\n+f (double *restrict res, double *restrict ptr)\n+{\n+  double x0 = res[0];\n+  double x1 = res[1];\n+  for (int i = 0; i < 128; i += 2)\n+    {\n+      x0 = __builtin_fmax (x0, ptr[i + 0]);\n+      x1 = __builtin_fmax (x1, ptr[i + 1]);\n+    }\n+  res[0] = x0;\n+  res[1] = x1;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tv[0-9]+\\.2d, v[0-9]+\\.2d, v[0-9]+\\.2d\\n} 1 } } */\n+/* { dg-final { scan-assembler {\\tstr\\tq[0-9]+, \\[x0\\]\\n} } } */"}, {"sha": "1cf372b2a6b55c107750a024d1893d6ce79a763b", "filename": "gcc/testsuite/gcc.target/aarch64/fminnm_1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffminnm_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffminnm_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffminnm_1.c?ref=e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-options \"-O2 -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+#pragma GCC target \"+nosve\"\n+\n+float\n+f1 (float x, float *ptr)\n+{\n+  for (int i = 0; i < 128; ++i)\n+    x = __builtin_fminf (x, ptr[i]);\n+  return x;\n+}\n+\n+double\n+f2 (double x, double *ptr)\n+{\n+  for (int i = 0; i < 128; ++i)\n+    x = __builtin_fmin (x, ptr[i]);\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tv[0-9]+\\.4s, v[0-9]+\\.4s, v[0-9]+\\.4s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnmv\\ts[0-9]+, v[0-9]+\\.4s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tv[0-9]+\\.2d, v[0-9]+\\.2d, v[0-9]+\\.2d\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnmp\\td[0-9]+, v[0-9]+\\.2d\\n} 1 } } */"}, {"sha": "543e18840510ad710714afd789c1cedd6993b2b9", "filename": "gcc/testsuite/gcc.target/aarch64/fminnm_2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffminnm_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffminnm_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffminnm_2.c?ref=e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-options \"-O2 -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+#pragma GCC target \"+nosve\"\n+\n+void\n+f (double *restrict res, double *restrict ptr)\n+{\n+  double x0 = res[0];\n+  double x1 = res[1];\n+  for (int i = 0; i < 128; i += 2)\n+    {\n+      x0 = __builtin_fmin (x0, ptr[i + 0]);\n+      x1 = __builtin_fmin (x1, ptr[i + 1]);\n+    }\n+  res[0] = x0;\n+  res[1] = x1;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tv[0-9]+\\.2d, v[0-9]+\\.2d, v[0-9]+\\.2d\\n} 1 } } */\n+/* { dg-final { scan-assembler {\\tstr\\tq[0-9]+, \\[x0\\]\\n} } } */"}, {"sha": "ee3cdc20f96550ceeb1e6c11dd464c59eb4b3e6f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/fmaxnm_2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffmaxnm_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffmaxnm_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffmaxnm_2.c?ref=e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-options \"-O2 -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+float\n+f1 (float x, float *ptr)\n+{\n+  for (int i = 0; i < 128; ++i)\n+    x = __builtin_fmaxf (x, ptr[i]);\n+  return x;\n+}\n+\n+double\n+f2 (double x, double *ptr)\n+{\n+  for (int i = 0; i < 128; ++i)\n+    x = __builtin_fmax (x, ptr[i]);\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler {\\twhilelo\\t(p[0-7])\\.s,.*\\tfmaxnm\\tz[0-9]+\\.s, \\1/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnmv\\ts[0-9]+, p[0-7], z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler {\\twhilelo\\t(p[0-7])\\.d,.*\\tfmaxnm\\tz[0-9]+\\.d, \\1/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnmv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */"}, {"sha": "a8eee0f4b2698f0425f55ea91c523e462ca134bd", "filename": "gcc/testsuite/gcc.target/aarch64/sve/fmaxnm_3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffmaxnm_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffmaxnm_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffmaxnm_3.c?ref=e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-options \"-O2 -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+void\n+f (double *restrict res, double *restrict ptr)\n+{\n+  double x0 = res[0];\n+  double x1 = res[1];\n+  for (int i = 0; i < 128; i += 2)\n+    {\n+      x0 = __builtin_fmax (x0, ptr[i + 0]);\n+      x1 = __builtin_fmax (x1, ptr[i + 1]);\n+    }\n+  res[0] = x0;\n+  res[1] = x1;\n+}\n+\n+/* { dg-final { scan-assembler {\\twhilelo\\t(p[0-7])\\.d,.*\\tfmaxnm\\tz[0-9]+\\.d, \\1/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnmv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 2 } } */"}, {"sha": "10aced05f1afe69f6e646ac23bac8196c13f8357", "filename": "gcc/testsuite/gcc.target/aarch64/sve/fminnm_2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffminnm_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffminnm_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffminnm_2.c?ref=e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-options \"-O2 -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+float\n+f1 (float x, float *ptr)\n+{\n+  for (int i = 0; i < 128; ++i)\n+    x = __builtin_fminf (x, ptr[i]);\n+  return x;\n+}\n+\n+double\n+f2 (double x, double *ptr)\n+{\n+  for (int i = 0; i < 128; ++i)\n+    x = __builtin_fmin (x, ptr[i]);\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler {\\twhilelo\\t(p[0-7])\\.s,.*\\tfminnm\\tz[0-9]+\\.s, \\1/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tfminnmv\\ts[0-9]+, p[0-7], z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler {\\twhilelo\\t(p[0-7])\\.d,.*\\tfminnm\\tz[0-9]+\\.d, \\1/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tfminnmv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */"}, {"sha": "80ad01602491d07b338113f34d372b5f3970a3be", "filename": "gcc/testsuite/gcc.target/aarch64/sve/fminnm_3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffminnm_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffminnm_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffminnm_3.c?ref=e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-options \"-O2 -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+void\n+f (double *restrict res, double *restrict ptr)\n+{\n+  double x0 = res[0];\n+  double x1 = res[1];\n+  for (int i = 0; i < 128; i += 2)\n+    {\n+      x0 = __builtin_fmin (x0, ptr[i + 0]);\n+      x1 = __builtin_fmin (x1, ptr[i + 1]);\n+    }\n+  res[0] = x0;\n+  res[1] = x1;\n+}\n+\n+/* { dg-final { scan-assembler {\\twhilelo\\t(p[0-7])\\.d,.*\\tfminnm\\tz[0-9]+\\.d, \\1/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tfminnmv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 2 } } */"}, {"sha": "841da78f1fd10f40abc72eef97cd3ad100529294", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 38, "deletions": 7, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c", "patch": "@@ -3185,9 +3185,22 @@ reduction_fn_for_scalar_code (code_helper code, internal_fn *reduc_fn)\n \treturn true;\n \n       default:\n-\tbreak;\n-    }\n-  return false;\n+\treturn false;\n+      }\n+  else\n+    switch (combined_fn (code))\n+      {\n+      CASE_CFN_FMAX:\n+\t*reduc_fn = IFN_REDUC_FMAX;\n+\treturn true;\n+\n+      CASE_CFN_FMIN:\n+\t*reduc_fn = IFN_REDUC_FMIN;\n+\treturn true;\n+\n+      default:\n+\treturn false;\n+      }\n }\n \n /* If there is a neutral value X such that a reduction would not be affected\n@@ -3223,9 +3236,18 @@ neutral_op_for_reduction (tree scalar_type, code_helper code,\n \treturn initial_value;\n \n       default:\n-\tbreak;\n+\treturn NULL_TREE;\n+      }\n+  else\n+    switch (combined_fn (code))\n+      {\n+      CASE_CFN_FMIN:\n+      CASE_CFN_FMAX:\n+\treturn initial_value;\n+\n+      default:\n+\treturn NULL_TREE;\n       }\n-  return NULL_TREE;\n }\n \n /* Error reporting helper for vect_is_simple_reduction below.  GIMPLE statement\n@@ -3255,9 +3277,18 @@ needs_fold_left_reduction_p (tree type, code_helper code)\n \t    return false;\n \n \t  default:\n-\t    break;\n+\t    return !flag_associative_math;\n+\t  }\n+      else\n+\tswitch (combined_fn (code))\n+\t  {\n+\t  CASE_CFN_FMIN:\n+\t  CASE_CFN_FMAX:\n+\t    return false;\n+\n+\t  default:\n+\t    return !flag_associative_math;\n \t  }\n-      return !flag_associative_math;\n     }\n \n   if (INTEGRAL_TYPE_P (type))"}]}