{"sha": "ceda50e9d5a000988c6403fe9113ef3c51bfc443", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VkYTUwZTlkNWEwMDA5ODhjNjQwM2ZlOTExM2VmM2M1MWJmYzQ0Mw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-02-12T06:14:12Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-02-12T06:14:12Z"}, "message": "gcse.c (lookup_set): Remove unused argument PAT.\n\n        * gcse.c (lookup_set): Remove unused argument PAT.  Update\n        both callers.\n\nFrom-SVN: r62759", "tree": {"sha": "cb108ff180f54437c43e9496f22a4b4db03a0ff9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb108ff180f54437c43e9496f22a4b4db03a0ff9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ceda50e9d5a000988c6403fe9113ef3c51bfc443", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceda50e9d5a000988c6403fe9113ef3c51bfc443", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceda50e9d5a000988c6403fe9113ef3c51bfc443", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceda50e9d5a000988c6403fe9113ef3c51bfc443/comments", "author": null, "committer": null, "parents": [{"sha": "cc687dae1d8838b25e9e535de5f235e8fc0d66ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc687dae1d8838b25e9e535de5f235e8fc0d66ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc687dae1d8838b25e9e535de5f235e8fc0d66ab"}], "stats": {"total": 31, "additions": 13, "deletions": 18}, "files": [{"sha": "ccd5b580700922c33bb59f7139e84faae50e82c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceda50e9d5a000988c6403fe9113ef3c51bfc443/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceda50e9d5a000988c6403fe9113ef3c51bfc443/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ceda50e9d5a000988c6403fe9113ef3c51bfc443", "patch": "@@ -1,3 +1,8 @@\n+2003-02-11  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcse.c (lookup_set): Remove unused argument PAT.  Update\n+\tboth callers.\n+\n 2003-02-11  Geoffrey Keating  <geoffk@apple.com>\n \n \t* diagnostic.c (real_abort): New."}, {"sha": "7389661813338f206828c5e4cd9cec37fb558554", "filename": "gcc/gcse.c", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceda50e9d5a000988c6403fe9113ef3c51bfc443/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceda50e9d5a000988c6403fe9113ef3c51bfc443/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=ceda50e9d5a000988c6403fe9113ef3c51bfc443", "patch": "@@ -593,7 +593,7 @@ static void compute_hash_table_work PARAMS ((struct hash_table *));\n static void dump_hash_table\tPARAMS ((FILE *, const char *,\n \t\t\t\t\tstruct hash_table *));\n static struct expr *lookup_expr\tPARAMS ((rtx, struct hash_table *));\n-static struct expr *lookup_set\tPARAMS ((unsigned int, rtx, struct hash_table *));\n+static struct expr *lookup_set\tPARAMS ((unsigned int, struct hash_table *));\n static struct expr *next_set\tPARAMS ((unsigned int, struct expr *));\n static void reset_opr_set_tables PARAMS ((void));\n static int oprs_not_set_p\tPARAMS ((rtx, rtx));\n@@ -2641,31 +2641,21 @@ lookup_expr (pat, table)\n   return expr;\n }\n \n-/* Lookup REGNO in the set TABLE.  If PAT is non-NULL look for the entry that\n-   matches it, otherwise return the first entry for REGNO.  The result is a\n-   pointer to the table entry, or NULL if not found.  */\n+/* Lookup REGNO in the set TABLE.  The result is a pointer to the\n+   table entry, or NULL if not found.  */\n \n static struct expr *\n-lookup_set (regno, pat, table)\n+lookup_set (regno, table)\n      unsigned int regno;\n-     rtx pat;\n      struct hash_table *table;\n {\n   unsigned int hash = hash_set (regno, table->size);\n   struct expr *expr;\n \n   expr = table->table[hash];\n \n-  if (pat)\n-    {\n-      while (expr && ! expr_equiv_p (expr->expr, pat))\n-\texpr = expr->next_same_hash;\n-    }\n-  else\n-    {\n-      while (expr && REGNO (SET_DEST (expr->expr)) != regno)\n-\texpr = expr->next_same_hash;\n-    }\n+  while (expr && REGNO (SET_DEST (expr->expr)) != regno)\n+    expr = expr->next_same_hash;\n \n   return expr;\n }\n@@ -3997,7 +3987,7 @@ find_avail_set (regno, insn)\n   while (1)\n     {\n       rtx src;\n-      struct expr *set = lookup_set (regno, NULL_RTX, &set_hash_table);\n+      struct expr *set = lookup_set (regno, &set_hash_table);\n \n       /* Find a set that is available at the start of the block\n \t which contains INSN.  */\n@@ -4727,7 +4717,7 @@ find_bypass_set (regno, bb)\n   for (;;)\n     {\n       rtx src;\n-      struct expr *set = lookup_set (regno, NULL_RTX, &set_hash_table);\n+      struct expr *set = lookup_set (regno, &set_hash_table);\n \n       while (set)\n \t{"}]}