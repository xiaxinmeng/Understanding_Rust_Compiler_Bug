{"sha": "4b8a70aa26d5b60e100c2a90ecb27877a4e3e9e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI4YTcwYWEyNmQ1YjYwZTEwMGMyYTkwZWNiMjc4NzdhNGUzZTllOQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2005-01-15T22:27:02Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-01-15T22:27:02Z"}, "message": "re PR java/19444 (GCJ implementation of java.net.URI misses host support)\n\n2005-01-15  Michael Koch  <konqueror@gmx.de>\n\n\tPR libgcj/19444\n\t* java/net/URI.java\n\t(AUTHORITY_REGEXP): New regexp constant.\n\t(AUTHORITY_USERINFO_GROUP): New constant.\n\t(AUTHORITY_HOST_GROUP): Likewise.\n\t(AUTHORITY_PORT_GROUP): Likewise.\n\t(port): Changed default value to -1.\n\t(parseURI): Parse authority part and initialize host,\n\tport and userInfo.\n\nFrom-SVN: r93711", "tree": {"sha": "8712880fa245ebf684a98a678be59432c8b68a17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8712880fa245ebf684a98a678be59432c8b68a17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b8a70aa26d5b60e100c2a90ecb27877a4e3e9e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b8a70aa26d5b60e100c2a90ecb27877a4e3e9e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b8a70aa26d5b60e100c2a90ecb27877a4e3e9e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b8a70aa26d5b60e100c2a90ecb27877a4e3e9e9/comments", "author": null, "committer": null, "parents": [{"sha": "01c4f82a926915f1aaa7733ac026984eb5787e56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01c4f82a926915f1aaa7733ac026984eb5787e56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01c4f82a926915f1aaa7733ac026984eb5787e56"}], "stats": {"total": 61, "additions": 57, "deletions": 4}, "files": [{"sha": "14a105a5c9cad25a4cbbb953979d4888f7371a31", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8a70aa26d5b60e100c2a90ecb27877a4e3e9e9/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8a70aa26d5b60e100c2a90ecb27877a4e3e9e9/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=4b8a70aa26d5b60e100c2a90ecb27877a4e3e9e9", "patch": "@@ -1,3 +1,15 @@\n+2005-01-15  Michael Koch  <konqueror@gmx.de>\n+\n+\tPR libgcj/19444\n+\t* java/net/URI.java\n+\t(AUTHORITY_REGEXP): New regexp constant.\n+\t(AUTHORITY_USERINFO_GROUP): New constant.\n+\t(AUTHORITY_HOST_GROUP): Likewise.\n+\t(AUTHORITY_PORT_GROUP): Likewise.\n+\t(port): Changed default value to -1.\n+\t(parseURI): Parse authority part and initialize host,\n+\tport and userInfo.\n+\n 2005-01-14  Robin Green  <greenrd@greenrd.org>\n \n \t* java/io/File.java (toURI): Generate a URI which we understand."}, {"sha": "4de5095bbbbbac94adc8dc1633745ab5f5391bf4", "filename": "libjava/java/net/URI.java", "status": "modified", "additions": 45, "deletions": 4, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8a70aa26d5b60e100c2a90ecb27877a4e3e9e9/libjava%2Fjava%2Fnet%2FURI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8a70aa26d5b60e100c2a90ecb27877a4e3e9e9/libjava%2Fjava%2Fnet%2FURI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURI.java?ref=4b8a70aa26d5b60e100c2a90ecb27877a4e3e9e9", "patch": "@@ -1,5 +1,5 @@\n-/* URI.java - An URI class --\n-   Copyright (C) 2002, 2004 Free Software Foundation, Inc.\n+/* URI.java -- An URI class\n+   Copyright (C) 2002, 2004, 2005  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,6 +35,7 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package java.net;\n \n import java.io.IOException;\n@@ -44,7 +45,6 @@\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n-\n /**\n  * @author Ito Kazumitsu (ito.kazumitsu@hitachi-cable.co.jp)\n  * @author Dalibor Topic (robilad@kaffe.org)\n@@ -64,6 +64,9 @@ public final class URI implements Comparable, Serializable\n   private static final String URI_REGEXP =\n     \"^(([^:/?#]+):)?((//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?)?(#(.*))?\";\n \n+  private static final String AUTHORITY_REGEXP =\n+    \"^(([^?#]*)@([^?#]*):([^?#]*))?\";\n+\n   /**\n    * Valid characters (taken from rfc2396)\n    */\n@@ -111,6 +114,11 @@ public final class URI implements Comparable, Serializable\n    * Index of fragment component in parsed URI.\n    */\n   private static final int FRAGMENT_GROUP = 10;\n+  \n+  private static final int AUTHORITY_USERINFO_GROUP = 2;\n+  private static final int AUTHORITY_HOST_GROUP = 3;\n+  private static final int AUTHORITY_PORT_GROUP = 4;\n+  \n   private transient String scheme;\n   private transient String rawSchemeSpecificPart;\n   private transient String schemeSpecificPart;\n@@ -120,7 +128,7 @@ public final class URI implements Comparable, Serializable\n   private transient String userInfo;\n   private transient String rawHost;\n   private transient String host;\n-  private transient int port;\n+  private transient int port = -1;\n   private transient String rawPath;\n   private transient String path;\n   private transient String rawQuery;\n@@ -168,6 +176,7 @@ private void parseURI(String str) throws URISyntaxException\n   {\n     Pattern pattern = Pattern.compile(URI_REGEXP);\n     Matcher matcher = pattern.matcher(str);\n+    \n     if (matcher.matches())\n       {\n \tscheme = getURIGroup(matcher, SCHEME_GROUP);\n@@ -180,10 +189,42 @@ private void parseURI(String str) throws URISyntaxException\n     else\n       throw new URISyntaxException(str, \"doesn't match URI regular expression\");\n \n+    if (rawAuthority != null)\n+      {\n+\tpattern = Pattern.compile(AUTHORITY_REGEXP);\n+\tmatcher = pattern.matcher(rawAuthority);\n+\n+\tif (matcher.matches())\n+\t  {\n+\t    rawUserInfo = getURIGroup(matcher, AUTHORITY_USERINFO_GROUP);\n+\t    rawHost = getURIGroup(matcher, AUTHORITY_HOST_GROUP);\n+\n+\t    String portStr = getURIGroup(matcher, AUTHORITY_PORT_GROUP);\n+\n+\t    if (portStr != null)\n+\t      try\n+\t\t{\n+\t\t  port = Integer.parseInt(portStr);\n+\t\t}\n+\t      catch (NumberFormatException e)\n+\t\t{\n+\t\t  URISyntaxException use =\n+\t\t    new URISyntaxException\n+\t\t      (str, \"doesn't match URI regular expression\");\n+\t\t  use.initCause(e);\n+\t\t  throw use;\n+\t\t}\n+\t  }\n+\telse\n+\t  throw new URISyntaxException(str, \"doesn't match URI regular expression\");\n+      }\n+\n     // We must eagerly unquote the parts, because this is the only time\n     // we may throw an exception.\n     schemeSpecificPart = unquote(rawSchemeSpecificPart);\n     authority = unquote(rawAuthority);\n+    userInfo = unquote(rawUserInfo);\n+    host = unquote(rawHost);\n     path = unquote(rawPath);\n     query = unquote(rawQuery);\n     fragment = unquote(rawFragment);"}]}