{"sha": "e203404e8e863684181345f2aecc25b065261231", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIwMzQwNGU4ZTg2MzY4NDE4MTM0NWYyYWVjYzI1YjA2NTI2MTIzMQ==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@suse.de", "date": "2004-04-22T22:16:11Z"}, "committer": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "2004-04-22T22:16:11Z"}, "message": "ia64intrin.h: Add intermediate cast to void * to avoid aliasing warning.\n\n\t* config/ia64/ia64intrin.h: Add intermediate cast to void * to\n\tavoid aliasing warning.\n\nFrom-SVN: r81059", "tree": {"sha": "2b3dfb79ab04359cbb72363d9cea208a1ee7b5d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b3dfb79ab04359cbb72363d9cea208a1ee7b5d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e203404e8e863684181345f2aecc25b065261231", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e203404e8e863684181345f2aecc25b065261231", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e203404e8e863684181345f2aecc25b065261231", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e203404e8e863684181345f2aecc25b065261231/comments", "author": {"login": "andreas-schwab", "id": 2175493, "node_id": "MDQ6VXNlcjIxNzU0OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2175493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreas-schwab", "html_url": "https://github.com/andreas-schwab", "followers_url": "https://api.github.com/users/andreas-schwab/followers", "following_url": "https://api.github.com/users/andreas-schwab/following{/other_user}", "gists_url": "https://api.github.com/users/andreas-schwab/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreas-schwab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreas-schwab/subscriptions", "organizations_url": "https://api.github.com/users/andreas-schwab/orgs", "repos_url": "https://api.github.com/users/andreas-schwab/repos", "events_url": "https://api.github.com/users/andreas-schwab/events{/privacy}", "received_events_url": "https://api.github.com/users/andreas-schwab/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bade3a0018d65df8c449ccec6f6472965d3e3b24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bade3a0018d65df8c449ccec6f6472965d3e3b24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bade3a0018d65df8c449ccec6f6472965d3e3b24"}], "stats": {"total": 69, "additions": 37, "deletions": 32}, "files": [{"sha": "2a805a2fdba874160ce07f2c4de0c9366e8604b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e203404e8e863684181345f2aecc25b065261231/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e203404e8e863684181345f2aecc25b065261231/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e203404e8e863684181345f2aecc25b065261231", "patch": "@@ -1,3 +1,8 @@\n+2004-04-23  Andreas Schwab  <schwab@suse.de>\n+\n+\t* config/ia64/ia64intrin.h: Add intermediate cast to void * to\n+\tavoid aliasing warning.\n+\n 2004-04-22  Jan Hubicka  <jh@suse.cz>\n \n       * cfgloopmanip.c (scale_bbs_frequencies): Use RDIV macro"}, {"sha": "2397c4ccde84fe0810d3686aeb634e7ae7026ad2", "filename": "gcc/config/ia64/ia64intrin.h", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e203404e8e863684181345f2aecc25b065261231/gcc%2Fconfig%2Fia64%2Fia64intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e203404e8e863684181345f2aecc25b065261231/gcc%2Fconfig%2Fia64%2Fia64intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64intrin.h?ref=e203404e8e863684181345f2aecc25b065261231", "patch": "@@ -14,114 +14,114 @@ extern long __sync_val_compare_and_swap_di (long *, long, long);\n #define __sync_val_compare_and_swap(PTR, OLD, NEW)\t\t\t\\\n  ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n   ? (__typeof__(*(PTR)))\t\t\t\t\t\t\\\n-    __sync_val_compare_and_swap_si((int *)(PTR),(int)(OLD),(int)(NEW))\t\\\n+    __sync_val_compare_and_swap_si((int *)(void *)(PTR),(int)(OLD),(int)(NEW))\t\\\n   : (__typeof__(*(PTR)))\t\t\t\t\t\t\\\n-    __sync_val_compare_and_swap_di((long *)(PTR),(long)(OLD),(long)(NEW)))\n+    __sync_val_compare_and_swap_di((long *)(void *)(PTR),(long)(OLD),(long)(NEW)))\n \n extern int __sync_bool_compare_and_swap_si (int *, int, int);\n extern int __sync_bool_compare_and_swap_di (long *, long, long);\n #define __sync_bool_compare_and_swap(PTR, OLD, NEW)\t\t\t\\\n  ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n-  ? __sync_bool_compare_and_swap_si((int *)(PTR),(int)(OLD),(int)(NEW))\t\\\n-  : __sync_bool_compare_and_swap_di((long *)(PTR),(long)(OLD),(long)(NEW)))\n+  ? __sync_bool_compare_and_swap_si((int *)(void *)(PTR),(int)(OLD),(int)(NEW))\t\\\n+  : __sync_bool_compare_and_swap_di((long *)(void *)(PTR),(long)(OLD),(long)(NEW)))\n \n extern void __sync_lock_release_si (int *);\n extern void __sync_lock_release_di (long *);\n #define __sync_lock_release(PTR)\t\t\\\n   ((sizeof (*(PTR)) == sizeof(int))\t\t\\\n-   ? __sync_lock_release_si((int *)(PTR))\t\\\n-   : __sync_lock_release_di((long *)(PTR)))\n+   ? __sync_lock_release_si((int *)(void *)(PTR))\t\\\n+   : __sync_lock_release_di((long *)(void *)(PTR)))\n \n extern int __sync_lock_test_and_set_si (int *, int);\n extern long __sync_lock_test_and_set_di (long *, long);\n #define __sync_lock_test_and_set(PTR,VAL)\t\t\t\t\\\n  ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n-  ? (__typeof__(*(PTR))) __sync_lock_test_and_set_si((int *)(PTR),(int)(VAL)) \\\n-  : (__typeof__(*(PTR))) __sync_lock_test_and_set_di((long *)(PTR),(long)(VAL)))\n+  ? (__typeof__(*(PTR))) __sync_lock_test_and_set_si((int *)(void *)(PTR),(int)(VAL)) \\\n+  : (__typeof__(*(PTR))) __sync_lock_test_and_set_di((long *)(void *)(PTR),(long)(VAL)))\n \n extern int __sync_fetch_and_add_si (int *, int);\n extern long __sync_fetch_and_add_di (long *, long);\n #define __sync_fetch_and_add(PTR,VAL)\t\t\t\t\t\\\n  ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n-  ? (__typeof__(*(PTR))) __sync_fetch_and_add_si((int *)(PTR),(int)(VAL)) \\\n-  : (__typeof__(*(PTR))) __sync_fetch_and_add_di((long *)(PTR),(long)(VAL)))\n+  ? (__typeof__(*(PTR))) __sync_fetch_and_add_si((int *)(void *)(PTR),(int)(VAL)) \\\n+  : (__typeof__(*(PTR))) __sync_fetch_and_add_di((long *)(void *)(PTR),(long)(VAL)))\n \n extern int __sync_fetch_and_sub_si (int *, int);\n extern long __sync_fetch_and_sub_di (long *, long);\n #define __sync_fetch_and_sub(PTR,VAL)\t\t\t\t\t\\\n  ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n-  ? (__typeof__(*(PTR))) __sync_fetch_and_sub_si((int *)(PTR),(int)(VAL)) \\\n-  : (__typeof__(*(PTR))) __sync_fetch_and_sub_di((long *)(PTR),(long)(VAL)))\n+  ? (__typeof__(*(PTR))) __sync_fetch_and_sub_si((int *)(void *)(PTR),(int)(VAL)) \\\n+  : (__typeof__(*(PTR))) __sync_fetch_and_sub_di((long *)(void *)(PTR),(long)(VAL)))\n \n extern int __sync_fetch_and_and_si (int *, int);\n extern long __sync_fetch_and_and_di (long *, long);\n #define __sync_fetch_and_and(PTR,VAL)\t\t\t\t\t\\\n  ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n-  ? (__typeof__(*(PTR))) __sync_fetch_and_and_si((int *)(PTR),(int)(VAL)) \\\n-  : (__typeof__(*(PTR))) __sync_fetch_and_and_di((long *)(PTR),(long)(VAL)))\n+  ? (__typeof__(*(PTR))) __sync_fetch_and_and_si((int *)(void *)(PTR),(int)(VAL)) \\\n+  : (__typeof__(*(PTR))) __sync_fetch_and_and_di((long *)(void *)(PTR),(long)(VAL)))\n \n extern int __sync_fetch_and_or_si (int *, int);\n extern long __sync_fetch_and_or_di (long *, long);\n #define __sync_fetch_and_or(PTR,VAL)\t\t\t\t\t\\\n  ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n-  ? (__typeof__(*(PTR))) __sync_fetch_and_or_si((int *)(PTR),(int)(VAL)) \\\n-  : (__typeof__(*(PTR))) __sync_fetch_and_or_di((long *)(PTR),(long)(VAL)))\n+  ? (__typeof__(*(PTR))) __sync_fetch_and_or_si((int *)(void *)(PTR),(int)(VAL)) \\\n+  : (__typeof__(*(PTR))) __sync_fetch_and_or_di((long *)(void *)(PTR),(long)(VAL)))\n \n extern int __sync_fetch_and_xor_si (int *, int);\n extern long __sync_fetch_and_xor_di (long *, long);\n #define __sync_fetch_and_xor(PTR,VAL)\t\t\t\t\t\\\n  ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n-  ? (__typeof__(*(PTR))) __sync_fetch_and_xor_si((int *)(PTR),(int)(VAL)) \\\n-  : (__typeof__(*(PTR))) __sync_fetch_and_xor_di((long *)(PTR),(long)(VAL)))\n+  ? (__typeof__(*(PTR))) __sync_fetch_and_xor_si((int *)(void *)(PTR),(int)(VAL)) \\\n+  : (__typeof__(*(PTR))) __sync_fetch_and_xor_di((long *)(void *)(PTR),(long)(VAL)))\n \n extern int __sync_fetch_and_nand_si (int *, int);\n extern long __sync_fetch_and_nand_di (long *, long);\n #define __sync_fetch_and_nand(PTR,VAL)\t\t\t\t\t\\\n  ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n-  ? (__typeof__(*(PTR))) __sync_fetch_and_nand_si((int *)(PTR),(int)(VAL)) \\\n-  : (__typeof__(*(PTR))) __sync_fetch_and_nand_di((long *)(PTR),(long)(VAL)))\n+  ? (__typeof__(*(PTR))) __sync_fetch_and_nand_si((int *)(void *)(PTR),(int)(VAL)) \\\n+  : (__typeof__(*(PTR))) __sync_fetch_and_nand_di((long *)(void *)(PTR),(long)(VAL)))\n \n extern int __sync_add_and_fetch_si (int *, int);\n extern long __sync_add_and_fetch_di (long *, long);\n #define __sync_add_and_fetch(PTR,VAL)\t\t\t\t\t\\\n  ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n-  ? (__typeof__(*(PTR))) __sync_add_and_fetch_si((int *)(PTR),(int)(VAL)) \\\n-  : (__typeof__(*(PTR))) __sync_add_and_fetch_di((long *)(PTR),(long)(VAL)))\n+  ? (__typeof__(*(PTR))) __sync_add_and_fetch_si((int *)(void *)(PTR),(int)(VAL)) \\\n+  : (__typeof__(*(PTR))) __sync_add_and_fetch_di((long *)(void *)(PTR),(long)(VAL)))\n \n extern int __sync_sub_and_fetch_si (int *, int);\n extern long __sync_sub_and_fetch_di (long *, long);\n #define __sync_sub_and_fetch(PTR,VAL)\t\t\t\t\t\\\n  ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n-  ? (__typeof__(*(PTR))) __sync_sub_and_fetch_si((int *)(PTR),(int)(VAL)) \\\n-  : (__typeof__(*(PTR))) __sync_sub_and_fetch_di((long *)(PTR),(long)(VAL)))\n+  ? (__typeof__(*(PTR))) __sync_sub_and_fetch_si((int *)(void *)(PTR),(int)(VAL)) \\\n+  : (__typeof__(*(PTR))) __sync_sub_and_fetch_di((long *)(void *)(PTR),(long)(VAL)))\n \n extern int __sync_and_and_fetch_si (int *, int);\n extern long __sync_and_and_fetch_di (long *, long);\n #define __sync_and_and_fetch(PTR,VAL)\t\t\t\t\t\\\n  ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n-  ? (__typeof__(*(PTR))) __sync_and_and_fetch_si((int *)(PTR),(int)(VAL)) \\\n-  : (__typeof__(*(PTR))) __sync_and_and_fetch_di((long *)(PTR),(long)(VAL)))\n+  ? (__typeof__(*(PTR))) __sync_and_and_fetch_si((int *)(void *)(PTR),(int)(VAL)) \\\n+  : (__typeof__(*(PTR))) __sync_and_and_fetch_di((long *)(void *)(PTR),(long)(VAL)))\n \n extern int __sync_or_and_fetch_si (int *, int);\n extern long __sync_or_and_fetch_di (long *, long);\n #define __sync_or_and_fetch(PTR,VAL)\t\t\t\t\t\\\n  ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n-  ? (__typeof__(*(PTR))) __sync_or_and_fetch_si((int *)(PTR),(int)(VAL)) \\\n-  : (__typeof__(*(PTR))) __sync_or_and_fetch_di((long *)(PTR),(long)(VAL)))\n+  ? (__typeof__(*(PTR))) __sync_or_and_fetch_si((int *)(void *)(PTR),(int)(VAL)) \\\n+  : (__typeof__(*(PTR))) __sync_or_and_fetch_di((long *)(void *)(PTR),(long)(VAL)))\n \n extern int __sync_xor_and_fetch_si (int *, int);\n extern long __sync_xor_and_fetch_di (long *, long);\n #define __sync_xor_and_fetch(PTR,VAL)\t\t\t\t\t\\\n  ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n-  ? (__typeof__(*(PTR))) __sync_xor_and_fetch_si((int *)(PTR),(int)(VAL)) \\\n-  : (__typeof__(*(PTR))) __sync_xor_and_fetch_di((long *)(PTR),(long)(VAL)))\n+  ? (__typeof__(*(PTR))) __sync_xor_and_fetch_si((int *)(void *)(PTR),(int)(VAL)) \\\n+  : (__typeof__(*(PTR))) __sync_xor_and_fetch_di((long *)(void *)(PTR),(long)(VAL)))\n \n extern int __sync_nand_and_fetch_si (int *, int);\n extern long __sync_nand_and_fetch_di (long *, long);\n #define __sync_nand_and_fetch(PTR,VAL)\t\t\t\t\t\\\n  ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n-  ? (__typeof__(*(PTR))) __sync_nand_and_fetch_si((int *)(PTR),(int)(VAL)) \\\n-  : (__typeof__(*(PTR))) __sync_nand_and_fetch_di((long *)(PTR),(long)(VAL)))\n+  ? (__typeof__(*(PTR))) __sync_nand_and_fetch_si((int *)(void *)(PTR),(int)(VAL)) \\\n+  : (__typeof__(*(PTR))) __sync_nand_and_fetch_di((long *)(void *)(PTR),(long)(VAL)))\n \n #ifdef __cplusplus\n }"}]}