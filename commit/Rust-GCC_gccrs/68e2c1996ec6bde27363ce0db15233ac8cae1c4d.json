{"sha": "68e2c1996ec6bde27363ce0db15233ac8cae1c4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhlMmMxOTk2ZWM2YmRlMjczNjNjZTBkYjE1MjMzYWM4Y2FlMWM0ZA==", "commit": {"author": {"name": "Prathamesh Kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2019-09-04T16:25:21Z"}, "committer": {"name": "Prathamesh Kulkarni", "email": "prathamesh3492@gcc.gnu.org", "date": "2019-09-04T16:25:21Z"}, "message": "Add warning Wenum-conversion for C and ObjC.\n\nThe patch enables warning with Wextra due to PR91593 and warnings with\nallmodconfig kernel build. Once these issues are resolved, we could\nconsider promoting it to Wall.\n\n2019-09-04  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n\n\tPR c/78736\n\t* doc/invoke.texi: Document -Wenum-conversion.\n\nc-family\n\t* c.opt (Wenum-conversion): New option.\n\nc/\n\t* c-typeck.c (convert_for_assignment): Handle Wenum-conversion.\n\ntestsuite/\n\t* gcc.dg/Wenum-conversion.c: New test-case.\n\nFrom-SVN: r275376", "tree": {"sha": "f36d29fb8fb3e378f3c06105410c3d6b2f368994", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f36d29fb8fb3e378f3c06105410c3d6b2f368994"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68e2c1996ec6bde27363ce0db15233ac8cae1c4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e2c1996ec6bde27363ce0db15233ac8cae1c4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68e2c1996ec6bde27363ce0db15233ac8cae1c4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e2c1996ec6bde27363ce0db15233ac8cae1c4d/comments", "author": null, "committer": null, "parents": [{"sha": "bc7f7ff954679ac46771f56cbb947a4c19557d98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc7f7ff954679ac46771f56cbb947a4c19557d98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc7f7ff954679ac46771f56cbb947a4c19557d98"}], "stats": {"total": 69, "additions": 68, "deletions": 1}, "files": [{"sha": "fc187665099ac716d441d5a9dbda154c0013761e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e2c1996ec6bde27363ce0db15233ac8cae1c4d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e2c1996ec6bde27363ce0db15233ac8cae1c4d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68e2c1996ec6bde27363ce0db15233ac8cae1c4d", "patch": "@@ -1,3 +1,8 @@\n+2019-09-04  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR c/78736\n+\t* doc/invoke.texi: Document -Wenum-conversion.\n+\n 2019-09-04  Richard Biener  <rguenther@suse.de>\n \n \tPR rtl-optimization/36262"}, {"sha": "ecdaaeba645c8a27002a3c2926f4ddd032d9f5af", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e2c1996ec6bde27363ce0db15233ac8cae1c4d/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e2c1996ec6bde27363ce0db15233ac8cae1c4d/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=68e2c1996ec6bde27363ce0db15233ac8cae1c4d", "patch": "@@ -1,3 +1,8 @@\n+2019-09-04  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR c/78736\n+\t* c.opt (Wenum-conversion): New option.\n+\n 2019-09-03  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* c-attribs.c (handle_section_attribute): Call the"}, {"sha": "38a8e7d1d12af5e1b7b8739130fedb2d26dea215", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e2c1996ec6bde27363ce0db15233ac8cae1c4d/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e2c1996ec6bde27363ce0db15233ac8cae1c4d/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=68e2c1996ec6bde27363ce0db15233ac8cae1c4d", "patch": "@@ -541,6 +541,10 @@ Wenum-compare\n C ObjC C++ ObjC++ Var(warn_enum_compare) Init(-1) Warning LangEnabledBy(C ObjC,Wall || Wc++-compat)\n Warn about comparison of different enum types.\n \n+Wenum-conversion\n+C ObjC Var(warn_enum_conversion) Init(0) Warning LangEnabledBy(C ObjC,Wextra)\n+Warn about implicit conversion of enum types.\n+\n Werror\n C ObjC C++ ObjC++\n ; Documented in common.opt"}, {"sha": "285ea1871003adb7bf598f1d906e342394b9f8a9", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e2c1996ec6bde27363ce0db15233ac8cae1c4d/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e2c1996ec6bde27363ce0db15233ac8cae1c4d/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=68e2c1996ec6bde27363ce0db15233ac8cae1c4d", "patch": "@@ -1,3 +1,8 @@\n+2019-09-04  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR c/78736\n+\t* c-typeck.c (convert_for_assignment): Handle Wenum-conversion.\n+\n 2019-08-23  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR pch/61250"}, {"sha": "d4e12eb93d1d2d774ed4f5964d5434e18d4109ae", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e2c1996ec6bde27363ce0db15233ac8cae1c4d/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e2c1996ec6bde27363ce0db15233ac8cae1c4d/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=68e2c1996ec6bde27363ce0db15233ac8cae1c4d", "patch": "@@ -6726,6 +6726,21 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \t  }\n     }\n \n+  if (warn_enum_conversion)\n+    {\n+      tree checktype = origtype != NULL_TREE ? origtype : rhstype;\n+      if (checktype != error_mark_node\n+\t  && TREE_CODE (checktype) == ENUMERAL_TYPE\n+\t  && TREE_CODE (type) == ENUMERAL_TYPE\n+\t  && TYPE_MAIN_VARIANT (checktype) != TYPE_MAIN_VARIANT (type))\n+       {\n+\t  gcc_rich_location loc (location);\n+\t  warning_at (&loc, OPT_Wenum_conversion,\n+\t\t      \"implicit conversion from %qT to %qT\",\n+\t\t      checktype, type);\n+       }\n+    }\n+\n   if (TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (rhstype))\n     {\n       warn_for_address_or_pointer_of_packed_member (type, orig_rhs);"}, {"sha": "34d07463e2322a1264736ddcba3de229898481cb", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e2c1996ec6bde27363ce0db15233ac8cae1c4d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e2c1996ec6bde27363ce0db15233ac8cae1c4d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=68e2c1996ec6bde27363ce0db15233ac8cae1c4d", "patch": "@@ -307,7 +307,8 @@ Objective-C and Objective-C++ Dialects}.\n -Wno-discarded-qualifiers  -Wno-discarded-array-qualifiers @gol\n -Wno-div-by-zero  -Wdouble-promotion @gol\n -Wduplicated-branches  -Wduplicated-cond @gol\n--Wempty-body  -Wenum-compare  -Wno-endif-labels  -Wexpansion-to-defined @gol\n+-Wempty-body  -Wenum-compare  -Wenum-conversion @gol\n+-Wno-endif-labels  -Wexpansion-to-defined @gol\n -Werror  -Werror=*  -Wextra-semi  -Wfatal-errors @gol\n -Wfloat-equal  -Wformat  -Wformat=2 @gol\n -Wno-format-contains-nul  -Wno-format-extra-args  @gol\n@@ -4434,6 +4435,7 @@ Options} and @ref{Objective-C and Objective-C++ Dialect Options}.\n -Wcomment  @gol\n -Wduplicate-decl-specifier @r{(C and Objective-C only)} @gol\n -Wenum-compare @r{(in C/ObjC; this is on by default in C++)} @gol\n+-Wenum-conversion @r{in C/ObjC;} @gol\n -Wformat   @gol\n -Wint-in-bool-context  @gol\n -Wimplicit @r{(C and Objective-C only)} @gol\n@@ -7012,6 +7014,12 @@ In C++ enumerated type mismatches in conditional expressions are also\n diagnosed and the warning is enabled by default.  In C this warning is \n enabled by @option{-Wall}.\n \n+@item -Wenum-conversion @r{(C, Objective-C only)}\n+@opindex Wenum-conversion\n+@opindex Wno-enum-conversion\n+Warn when a value of enumerated type is implicitly converted to a \n+different enumerated type.  This warning is enabled by @option{-Wextra}.\n+\n @item -Wextra-semi @r{(C++, Objective-C++ only)}\n @opindex Wextra-semi\n @opindex Wno-extra-semi"}, {"sha": "5b6332a6a000b5f36200f24da32da2ff4252d05c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e2c1996ec6bde27363ce0db15233ac8cae1c4d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e2c1996ec6bde27363ce0db15233ac8cae1c4d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=68e2c1996ec6bde27363ce0db15233ac8cae1c4d", "patch": "@@ -1,3 +1,8 @@\n+2019-09-04  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR c/78736\n+\t* gcc.dg/Wenum-conversion.c: New test-case.\n+\n 2019-09-03  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* gcc.target/msp430/data-attributes-2.c: New test."}, {"sha": "86033399b7db24031d195cdfd8bec3795a3e874f", "filename": "gcc/testsuite/gcc.dg/Wenum-conversion.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e2c1996ec6bde27363ce0db15233ac8cae1c4d/gcc%2Ftestsuite%2Fgcc.dg%2FWenum-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e2c1996ec6bde27363ce0db15233ac8cae1c4d/gcc%2Ftestsuite%2Fgcc.dg%2FWenum-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWenum-conversion.c?ref=68e2c1996ec6bde27363ce0db15233ac8cae1c4d", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wenum-conversion\" } */\n+\n+enum X { x1, x2 };\n+enum Y { y1, y2 };\n+\n+enum X obj = y1;  /* { dg-warning \"implicit conversion from .enum Y. to .enum X.\" } */\n+enum Y obj2 = y1;\n+\n+enum X obj3;\n+void foo()\n+{\n+  obj3 = y2; /* { dg-warning \"implicit conversion from .enum Y. to .enum X.\" } */\n+}\n+\n+void bar(enum X);\n+void f(void)\n+{\n+  bar (y1); /* { dg-warning \"implicit conversion from .enum Y. to .enum X.\" } */\n+}"}]}