{"sha": "c50eadba265a0e9b3b84267477f953d0d5872522", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUwZWFkYmEyNjVhMGU5YjNiODQyNjc0NzdmOTUzZDBkNTg3MjUyMg==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2019-04-12T06:25:04Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-04-12T06:25:04Z"}, "message": "d: Add -fbuilding-libphobos-tests option\n\nCurrently, the druntime and phobos unittests are compiled as a separate\ncheck program, then ran by the libphobos.unittest/unittest.exp script.\nAs PR d/89255 notes, this process lacks proper multilib handling.\n\nAs a first step, a new internal option that instructs the compiler to\nput the reference to all unittest functions in another symbol has been\nadded.  This will allow each module to be compiled separately as a\nstandalone program using dg-runtest without running into collisions in\nthe D runtime module registry.\n\ngcc/d/ChangeLog:\n\n2019-04-12  Iain Buclaw  <ibuclaw@gdcproject.org>\n\n\t* d-tree.h (DECL_IN_UNITTEST_CONDITION_P): Define.\n\t* decl.cc (DeclVisitor): Add in_version_unittest_ field.\n\t(DeclVisitor::visit(ConditionalDeclaration)): New override.\n\t(DeclVisitor::visit(FuncDeclaration)): Set\n\tDECL_IN_UNITTEST_CONDITION_P.\n\t* lang.opt (-fbuilding-libphobos-tests): Add option.\n\t* modules.cc (current_testing_module): New static variable.\n\t(build_module_tree): Generate second moduleinfo symbol to hold\n\treference to unittests if flag_building_libphobos_tests.\n\t(register_module_decl): Check DECL_IN_UNITTEST_CONDITION_P to decide\n\twhich moduleinfo the decl should be registered against.\n\nFrom-SVN: r270301", "tree": {"sha": "adebd7495b2b5b33202ade4920313cb8e4c79318", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adebd7495b2b5b33202ade4920313cb8e4c79318"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c50eadba265a0e9b3b84267477f953d0d5872522", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c50eadba265a0e9b3b84267477f953d0d5872522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c50eadba265a0e9b3b84267477f953d0d5872522", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c50eadba265a0e9b3b84267477f953d0d5872522/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "77f4fb57664b93b49257699ddb48182f6dc6a60a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77f4fb57664b93b49257699ddb48182f6dc6a60a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77f4fb57664b93b49257699ddb48182f6dc6a60a"}], "stats": {"total": 130, "additions": 122, "deletions": 8}, "files": [{"sha": "5623170ae5edc916aa3b0c5c73542240445a7ae9", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c50eadba265a0e9b3b84267477f953d0d5872522/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c50eadba265a0e9b3b84267477f953d0d5872522/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=c50eadba265a0e9b3b84267477f953d0d5872522", "patch": "@@ -1,3 +1,17 @@\n+2019-04-12  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-tree.h (DECL_IN_UNITTEST_CONDITION_P): Define.\n+\t* decl.cc (DeclVisitor): Add in_version_unittest_ field.\n+\t(DeclVisitor::visit(ConditionalDeclaration)): New override.\n+\t(DeclVisitor::visit(FuncDeclaration)): Set\n+\tDECL_IN_UNITTEST_CONDITION_P.\n+\t* lang.opt (-fbuilding-libphobos-tests): Add option.\n+\t* modules.cc (current_testing_module): New static variable.\n+\t(build_module_tree): Generate second moduleinfo symbol to hold\n+\treference to unittests if flag_building_libphobos_tests.\n+\t(register_module_decl): Check DECL_IN_UNITTEST_CONDITION_P to decide\n+\twhich moduleinfo the decl should be registered against.\n+\n 2019-03-31  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/88462"}, {"sha": "cff832cc645499fb613e5ff435c696c680eabf2e", "filename": "gcc/d/d-tree.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c50eadba265a0e9b3b84267477f953d0d5872522/gcc%2Fd%2Fd-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c50eadba265a0e9b3b84267477f953d0d5872522/gcc%2Fd%2Fd-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-tree.h?ref=c50eadba265a0e9b3b84267477f953d0d5872522", "patch": "@@ -59,7 +59,8 @@ typedef Array<Expression *> Expressions;\n \n    Usage of DECL_LANG_FLAG_?:\n    0: LABEL_VARIABLE_CASE (in LABEL_DECL).\n-      DECL_BUILT_IN_CTFE (in FUNCTION_DECL).  */\n+      DECL_BUILT_IN_CTFE (in FUNCTION_DECL).\n+   1: DECL_IN_UNITTEST_CONDITION_P (in FUNCTION_DECL).  */\n \n /* The kinds of scopes we recognize.  */\n \n@@ -380,6 +381,10 @@ lang_tree_node\n #define DECL_BUILT_IN_CTFE(NODE) \\\n   (DECL_LANG_FLAG_0 (FUNCTION_DECL_CHECK (NODE)))\n \n+/* True if the decl is only compiled in when unittests are turned on.  */\n+#define DECL_IN_UNITTEST_CONDITION_P(NODE) \\\n+  (DECL_LANG_FLAG_1 (FUNCTION_DECL_CHECK (NODE)))\n+\n enum d_tree_index\n {\n   DTI_VTABLE_ENTRY_TYPE,"}, {"sha": "f6c863988e31b7201c5b4e6be7cec8744d08f883", "filename": "gcc/d/decl.cc", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c50eadba265a0e9b3b84267477f953d0d5872522/gcc%2Fd%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c50eadba265a0e9b3b84267477f953d0d5872522/gcc%2Fd%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdecl.cc?ref=c50eadba265a0e9b3b84267477f953d0d5872522", "patch": "@@ -21,6 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"dmd/aggregate.h\"\n #include \"dmd/attrib.h\"\n+#include \"dmd/cond.h\"\n #include \"dmd/ctfe.h\"\n #include \"dmd/declaration.h\"\n #include \"dmd/enum.h\"\n@@ -121,9 +122,13 @@ class DeclVisitor : public Visitor\n {\n   using Visitor::visit;\n \n+  /* If we're lowering the body of a version(unittest) condition.  */\n+  bool in_version_unittest_;\n+\n public:\n   DeclVisitor (void)\n   {\n+    this->in_version_unittest_ = false;\n   }\n \n   /* This should be overridden by each declaration class.  */\n@@ -241,6 +246,25 @@ class DeclVisitor : public Visitor\n     visit ((AttribDeclaration *) d);\n   }\n \n+  /* Conditional compilation is the process of selecting which code to compile\n+     and which code to not compile.  Look for version conditions that may  */\n+\n+  void visit (ConditionalDeclaration *d)\n+  {\n+    bool old_condition = this->in_version_unittest_;\n+\n+    if (global.params.useUnitTests)\n+      {\n+\tVersionCondition *vc = d->condition->isVersionCondition ();\n+\tif (vc && vc->ident == Identifier::idPool (\"unittest\"))\n+\t  this->in_version_unittest_ = true;\n+      }\n+\n+    visit ((AttribDeclaration *) d);\n+\n+    this->in_version_unittest_ = old_condition;\n+  }\n+\n   /* Walk over all members in the namespace scope.  */\n \n   void visit (Nspace *d)\n@@ -868,6 +892,7 @@ class DeclVisitor : public Visitor\n       }\n \n     DECL_ARGUMENTS (fndecl) = param_list;\n+    DECL_IN_UNITTEST_CONDITION_P (fndecl) = this->in_version_unittest_;\n     rest_of_decl_compilation (fndecl, 1, 0);\n \n     /* If this is a member function that nested (possibly indirectly) in another"}, {"sha": "f65be444d4532f52c61f7fbcc0e980dc0cdd0c4f", "filename": "gcc/d/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c50eadba265a0e9b3b84267477f953d0d5872522/gcc%2Fd%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c50eadba265a0e9b3b84267477f953d0d5872522/gcc%2Fd%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Flang.opt?ref=c50eadba265a0e9b3b84267477f953d0d5872522", "patch": "@@ -197,6 +197,10 @@ Enum(bounds_check) String(safeonly) Value(1)\n EnumValue\n Enum(bounds_check) String(on) Value(2)\n \n+; Generates a secondary ModuleInfo symbol for linking in unittests\n+fbuilding-libphobos-tests\n+D Undocumented Var(flag_building_libphobos_tests)\n+\n fbuiltin\n D Var(flag_no_builtin, 0)\n ; Documented in C"}, {"sha": "315f5d82356a3818cb77c8e891b96d449f99f23f", "filename": "gcc/d/modules.cc", "status": "modified", "additions": 73, "deletions": 7, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c50eadba265a0e9b3b84267477f953d0d5872522/gcc%2Fd%2Fmodules.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c50eadba265a0e9b3b84267477f953d0d5872522/gcc%2Fd%2Fmodules.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fmodules.cc?ref=c50eadba265a0e9b3b84267477f953d0d5872522", "patch": "@@ -110,6 +110,11 @@ enum module_info_flags\n \n static module_info *current_moduleinfo;\n \n+/* When compiling with -fbuilding-libphobos-tests, this contains information\n+   about the module that gets compiled in only when unittests are enabled.  */\n+\n+static module_info *current_testing_module;\n+\n /* The declaration of the current module being compiled.  */\n \n static Module *current_module_decl;\n@@ -706,8 +711,10 @@ build_module_tree (Module *decl)\n   assert (!current_moduleinfo && !current_module_decl);\n \n   module_info mi = module_info ();\n+  module_info mitest = module_info ();\n \n   current_moduleinfo = &mi;\n+  current_testing_module = &mitest;\n   current_module_decl = decl;\n \n   /* Layout module members.  */\n@@ -720,6 +727,53 @@ build_module_tree (Module *decl)\n \t}\n     }\n \n+  /* For libphobos-internal use only.  Generate a separate module info symbol\n+     that references all compiled in unittests, this allows compiling library\n+     modules and linking to libphobos without having run-time conflicts because\n+     of two ModuleInfo records with the same name being present in two DSOs.  */\n+  if (flag_building_libphobos_tests)\n+    {\n+      /* Associate the module info symbol with a mock module.  */\n+      const char *name = concat (GDC_PREFIX (\"modtest__\"),\n+\t\t\t\t decl->ident->toChars (), NULL);\n+      Module *tm = Module::create (decl->arg, Identifier::idPool (name), 0, 0);\n+      Dsymbols members;\n+\n+      /* Setting parent puts module in the same package as the current, to\n+\t avoid any symbol conflicts.  */\n+      tm->parent = decl->parent;\n+      tm->needmoduleinfo = decl->needmoduleinfo;\n+      tm->members = &members;\n+      /* Register the current module as being imported by the mock module.\n+\t This informs run-time that there is a dependency between the two.  */\n+      tm->aimports.push (decl);\n+\n+      if (mitest.ctors || mitest.ctorgates)\n+\ttm->sctor = build_funcs_gates_fn (get_identifier (\"*__modtestctor\"),\n+\t\t\t\t\t  mitest.ctors, mitest.ctorgates);\n+\n+      if (mitest.dtors)\n+\ttm->sdtor = build_funcs_gates_fn (get_identifier (\"*__modtestdtor\"),\n+\t\t\t\t\t  mitest.dtors, NULL);\n+\n+      if (mitest.sharedctors || mitest.sharedctorgates)\n+\ttm->ssharedctor\n+\t  = build_funcs_gates_fn (get_identifier (\"*__modtestsharedctor\"),\n+\t\t\t\t  mitest.sharedctors, mitest.sharedctorgates);\n+\n+      if (mitest.shareddtors)\n+\ttm->sshareddtor\n+\t  = build_funcs_gates_fn (get_identifier (\"*__modtestshareddtor\"),\n+\t\t\t\t  mitest.shareddtors, NULL);\n+\n+      if (mi.unitTests)\n+\ttm->stest = build_funcs_gates_fn (get_identifier (\"*__modtest\"),\n+\t\t\t\t\t  mi.unitTests, NULL);\n+\n+      mi.unitTests = NULL;\n+      layout_moduleinfo (tm);\n+    }\n+\n   /* Default behavior is to always generate module info because of templates.\n      Can be switched off for not compiling against runtime library.  */\n   if (!global.params.betterC\n@@ -751,6 +805,7 @@ build_module_tree (Module *decl)\n     }\n \n   current_moduleinfo = NULL;\n+  current_testing_module = NULL;\n   current_module_decl = NULL;\n }\n \n@@ -777,13 +832,24 @@ register_module_decl (Declaration *d)\n     {\n       tree decl = get_symbol_decl (fd);\n \n+      /* Any module constructors or destructors that are only present when\n+\t compiling in unittests are kept track of separately so they are\n+\t not omitted when compiling with -fbuilding-libphobos-tests.  */\n+      module_info *minfo;\n+      if (flag_building_libphobos_tests && DECL_IN_UNITTEST_CONDITION_P (decl))\n+\tminfo = current_testing_module;\n+      else\n+\tminfo = current_moduleinfo;\n+\n+      gcc_assert (minfo != NULL);\n+\n       /* If a static constructor, push into the current ModuleInfo.\n \t Checks for `shared' first because it derives from the non-shared\n \t constructor type in the front-end.  */\n       if (fd->isSharedStaticCtorDeclaration ())\n-\tvec_safe_push (current_moduleinfo->sharedctors, decl);\n+\tvec_safe_push (minfo->sharedctors, decl);\n       else if (fd->isStaticCtorDeclaration ())\n-\tvec_safe_push (current_moduleinfo->ctors, decl);\n+\tvec_safe_push (minfo->ctors, decl);\n \n       /* If a static destructor, do same as with constructors, but also\n \t increment the destructor's vgate at construction time.  */\n@@ -793,24 +859,24 @@ register_module_decl (Declaration *d)\n \t  if (vgate != NULL)\n \t    {\n \t      tree gate = get_symbol_decl (vgate);\n-\t      vec_safe_push (current_moduleinfo->sharedctorgates, gate);\n+\t      vec_safe_push (minfo->sharedctorgates, gate);\n \t    }\n-\t  vec_safe_insert (current_moduleinfo->shareddtors, 0, decl);\n+\t  vec_safe_insert (minfo->shareddtors, 0, decl);\n \t}\n       else if (fd->isStaticDtorDeclaration ())\n \t{\n \t  VarDeclaration *vgate = ((StaticDtorDeclaration *) fd)->vgate;\n \t  if (vgate != NULL)\n \t    {\n \t      tree gate = get_symbol_decl (vgate);\n-\t      vec_safe_push (current_moduleinfo->ctorgates, gate);\n+\t      vec_safe_push (minfo->ctorgates, gate);\n \t    }\n-\t  vec_safe_insert (current_moduleinfo->dtors, 0, decl);\n+\t  vec_safe_insert (minfo->dtors, 0, decl);\n \t}\n \n       /* If a unittest function.  */\n       if (fd->isUnitTestDeclaration ())\n-\tvec_safe_push (current_moduleinfo->unitTests, decl);\n+\tvec_safe_push (minfo->unitTests, decl);\n     }\n }\n "}]}