{"sha": "ad5dd90de05dba5f4db6bc4d1e355dab4e4a4696", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ1ZGQ5MGRlMDVkYmE1ZjRkYjZiYzRkMWUzNTVkYWI0ZTRhNDY5Ng==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-03-09T05:52:06Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-03-09T05:52:06Z"}, "message": "re PR fortran/26257 (internal compiler error: Segmentation fault, on function call with assumed shape array parameter)\n\n2006-03-09 Paul Thomas <pault@gcc.gnu.org>\n\n\tPR fortran/26257\n\t* trans-array.c (gfc_conv_expr_descriptor): Exclude calculation of\n\tthe offset and data when se->data_not_needed is set.\n\t* trans.h: Include the data_not_need bit in gfc_se.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_size): Set it for SIZE.\n\n2006-03-09 Paul Thomas <pault@gcc.gnu.org>\n\n\t* PR fortran/26257\n\tgfortran.dg/auto_char_len_3.f90: New test\n\nFrom-SVN: r111860", "tree": {"sha": "a01707e32f37b611c2929f463154b2d63f209724", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a01707e32f37b611c2929f463154b2d63f209724"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad5dd90de05dba5f4db6bc4d1e355dab4e4a4696", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad5dd90de05dba5f4db6bc4d1e355dab4e4a4696", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad5dd90de05dba5f4db6bc4d1e355dab4e4a4696", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad5dd90de05dba5f4db6bc4d1e355dab4e4a4696/comments", "author": null, "committer": null, "parents": [{"sha": "07127a0a3b7a73f24105b80dd63c12d38fe84bf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07127a0a3b7a73f24105b80dd63c12d38fe84bf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07127a0a3b7a73f24105b80dd63c12d38fe84bf1"}], "stats": {"total": 62, "additions": 55, "deletions": 7}, "files": [{"sha": "dc1cdea6ec0b6999c2ff0cca704a13d44c78fbde", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad5dd90de05dba5f4db6bc4d1e355dab4e4a4696/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad5dd90de05dba5f4db6bc4d1e355dab4e4a4696/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ad5dd90de05dba5f4db6bc4d1e355dab4e4a4696", "patch": "@@ -1,3 +1,11 @@\n+2006-03-09 Paul Thomas <pault@gcc.gnu.org>\n+\n+\tPR fortran/26257\n+\t* trans-array.c (gfc_conv_expr_descriptor): Exclude calculation of\n+\tthe offset and data when se->data_not_needed is set.\n+\t* trans.h: Include the data_not_need bit in gfc_se.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_size): Set it for SIZE.\n+\n 2006-03-06  Paul Thomas  <pault@gcc.gnu.org>\n             Erik Edelmann  <eedelman@gcc.gnu.org>\n "}, {"sha": "a865d5749d1b023271409b9b4ab2cf166f08507e", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad5dd90de05dba5f4db6bc4d1e355dab4e4a4696/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad5dd90de05dba5f4db6bc4d1e355dab4e4a4696/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=ad5dd90de05dba5f4db6bc4d1e355dab4e4a4696", "patch": "@@ -4172,14 +4172,19 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n \t  dim++;\n \t}\n \n-      /* Point the data pointer at the first element in the section.  */\n-      tmp = gfc_conv_array_data (desc);\n-      tmp = build_fold_indirect_ref (tmp);\n-      tmp = gfc_build_array_ref (tmp, offset);\n-      offset = gfc_build_addr_expr (gfc_array_dataptr_type (desc), tmp);\n-      gfc_conv_descriptor_data_set (&loop.pre, parm, offset);\n+      if (se->data_not_needed)\n+\tgfc_conv_descriptor_data_set (&loop.pre, parm, gfc_index_zero_node);\n+      else\n+\t{\n+\t  /* Point the data pointer at the first element in the section.  */\n+\t  tmp = gfc_conv_array_data (desc);\n+\t  tmp = build_fold_indirect_ref (tmp);\n+\t  tmp = gfc_build_array_ref (tmp, offset);\n+\t  offset = gfc_build_addr_expr (gfc_array_dataptr_type (desc), tmp);\n+\t  gfc_conv_descriptor_data_set (&loop.pre, parm, offset);\n+\t}\n \n-      if (se->direct_byref)\n+      if (se->direct_byref && !se->data_not_needed)\n \t{\n \t  /* Set the offset.  */\n \t  tmp = gfc_conv_descriptor_offset (parm);"}, {"sha": "c6a23134ed778cf1f13f61da47b6dc78aa880763", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad5dd90de05dba5f4db6bc4d1e355dab4e4a4696/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad5dd90de05dba5f4db6bc4d1e355dab4e4a4696/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=ad5dd90de05dba5f4db6bc4d1e355dab4e4a4696", "patch": "@@ -2405,6 +2405,7 @@ gfc_conv_intrinsic_size (gfc_se * se, gfc_expr * expr)\n   ss = gfc_walk_expr (actual->expr);\n   gcc_assert (ss != gfc_ss_terminator);\n   argse.want_pointer = 1;\n+  argse.data_not_needed = 1;\n   gfc_conv_expr_descriptor (&argse, actual->expr, ss);\n   gfc_add_block_to_block (&se->pre, &argse.pre);\n   gfc_add_block_to_block (&se->post, &argse.post);"}, {"sha": "4955fe48c49649ee7ae5bded4ef86d5b64093b8a", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad5dd90de05dba5f4db6bc4d1e355dab4e4a4696/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad5dd90de05dba5f4db6bc4d1e355dab4e4a4696/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=ad5dd90de05dba5f4db6bc4d1e355dab4e4a4696", "patch": "@@ -67,6 +67,10 @@ typedef struct gfc_se\n   /* Ignore absent optional arguments.  Used for some intrinsics.  */\n   unsigned ignore_optional:1;\n \n+  /* When this is set the data and offset fields of the returned descriptor\n+     are NULL.  Used by intrinsic size.  */\n+  unsigned data_not_needed:1;\n+\n   /* Scalarization parameters.  */\n   struct gfc_se *parent;\n   struct gfc_ss *ss;"}, {"sha": "3dff55cba19c3cf674cdf31049130b89e7e60332", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad5dd90de05dba5f4db6bc4d1e355dab4e4a4696/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad5dd90de05dba5f4db6bc4d1e355dab4e4a4696/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ad5dd90de05dba5f4db6bc4d1e355dab4e4a4696", "patch": "@@ -1,3 +1,8 @@\n+2006-03-09 Paul Thomas <pault@gcc.gnu.org>\n+\n+\t* PR fortran/26257\n+\tgfortran.dg/auto_char_len_3.f90: New test\n+\n 2006-03-08  Jeff Law  <law@redhat.com>\n \n \t* gcc.dg/tree-ssa/20030730-1.c: No longer expected to fail."}, {"sha": "b94151148af4f9c3ddf18ad236845a1fa56b0677", "filename": "gcc/testsuite/gfortran.dg/auto_char_len_3.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad5dd90de05dba5f4db6bc4d1e355dab4e4a4696/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_len_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad5dd90de05dba5f4db6bc4d1e355dab4e4a4696/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_len_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_len_3.f90?ref=ad5dd90de05dba5f4db6bc4d1e355dab4e4a4696", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do run }\n+! Test the fix for PR26257, in which the implicit reference to\n+! chararray in the main program call of chararray2string would\n+! cause a segfault in gfc_build_addr_expr.\n+!\n+! Based on the reduced testcase in the PR.\n+module chtest\n+contains\n+  function chararray2string(chararray) result(text)\n+    character(len=1), dimension(:) :: chararray    ! input\n+    character(len=size(chararray, 1)) :: text      ! output\n+    do i = 1,size(chararray,1)\n+      text(i:i) = chararray (i)\n+    end do\n+  end function chararray2string\n+end module chtest\n+program TestStringTools\n+  use chtest\n+  character(len=52)               :: txt\n+  character(len=1), dimension(52) :: chararr = &\n+        (/(char(i+64),char(i+96), i = 1,26)/)\n+  txt = chararray2string(chararr)\n+  if (txt .ne. \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\") &\n+        call abort ()\n+end program TestStringTools"}]}