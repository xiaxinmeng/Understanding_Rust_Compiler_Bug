{"sha": "12beba6fe60833d89cf886bbce863371fa4c97a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJiZWJhNmZlNjA4MzNkODljZjg4NmJiY2U4NjMzNzFmYTRjOTdhMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-01-29T22:34:48Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-01-29T22:34:48Z"}, "message": "expr.c (force_operand): Ignore flag_pic for detecting pic address loads.\n\n        * expr.c (force_operand): Ignore flag_pic for detecting pic\n        address loads.\n        * regclass.c (init_reg_sets_1): Test fixed_regs not flag_pic\n        for determining if PIC_OFFSET_TABLE_REGNUM is call-clobbered.\n        * resource.c (mark_target_live_regs): Use regs_invalidated_by_call\n        instead of open-coded loop.\n        * doc/tm.texi (PIC_OFFSET_TABLE_REGNUM): Clarify that it must\n        be fixed when in use.\n\nFrom-SVN: r49329", "tree": {"sha": "773ecd145345464a68b2e439a644c31df6f3d773", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/773ecd145345464a68b2e439a644c31df6f3d773"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12beba6fe60833d89cf886bbce863371fa4c97a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12beba6fe60833d89cf886bbce863371fa4c97a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12beba6fe60833d89cf886bbce863371fa4c97a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12beba6fe60833d89cf886bbce863371fa4c97a0/comments", "author": null, "committer": null, "parents": [{"sha": "2583081eb57e13822839118432d5ac1281b60f89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2583081eb57e13822839118432d5ac1281b60f89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2583081eb57e13822839118432d5ac1281b60f89"}], "stats": {"total": 36, "additions": 17, "deletions": 19}, "files": [{"sha": "6d0befa4cd825d9f25234de2912a5d892884003d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12beba6fe60833d89cf886bbce863371fa4c97a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12beba6fe60833d89cf886bbce863371fa4c97a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12beba6fe60833d89cf886bbce863371fa4c97a0", "patch": "@@ -1,3 +1,14 @@\n+2002-01-29  Richard Henderson  <rth@redhat.com>\n+\n+\t* expr.c (force_operand): Ignore flag_pic for detecting pic\n+\taddress loads.\n+\t* regclass.c (init_reg_sets_1): Test fixed_regs not flag_pic\n+\tfor determining if PIC_OFFSET_TABLE_REGNUM is call-clobbered.\n+\t* resource.c (mark_target_live_regs): Use regs_invalidated_by_call\n+\tinstead of open-coded loop.\n+\t* doc/tm.texi (PIC_OFFSET_TABLE_REGNUM): Clarify that it must\n+\tbe fixed when in use.\n+\n 2002-01-29  Richard Henderson  <rth@redhat.com>\n \n \t* sched-int.h (struct deps_reg): Add uses_length, clobbers_length."}, {"sha": "f3454f33c5c7db1ad71d950e741140eca10709b0", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12beba6fe60833d89cf886bbce863371fa4c97a0/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12beba6fe60833d89cf886bbce863371fa4c97a0/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=12beba6fe60833d89cf886bbce863371fa4c97a0", "patch": "@@ -5603,7 +5603,8 @@ processor's ``application binary interface'' (ABI)@.  When this macro\n is defined, RTL is generated for this register once, as with the stack\n pointer and frame pointer registers.  If this macro is not defined, it\n is up to the machine-dependent files to allocate such a register (if\n-necessary).\n+necessary).  Note that this register must be fixed when in use (e.g.\n+when @code{flag_pic} is true).\n \n @findex PIC_OFFSET_TABLE_REG_CALL_CLOBBERED\n @item PIC_OFFSET_TABLE_REG_CALL_CLOBBERED"}, {"sha": "2b8b0856b46f3742cafef1e3a8eeb29691aa6d81", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12beba6fe60833d89cf886bbce863371fa4c97a0/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12beba6fe60833d89cf886bbce863371fa4c97a0/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=12beba6fe60833d89cf886bbce863371fa4c97a0", "patch": "@@ -5393,8 +5393,7 @@ force_operand (value, target)\n   rtx subtarget = get_subtarget (target);\n \n   /* Check for a PIC address load.  */\n-  if (flag_pic\n-      && (GET_CODE (value) == PLUS || GET_CODE (value) == MINUS)\n+  if ((GET_CODE (value) == PLUS || GET_CODE (value) == MINUS)\n       && XEXP (value, 0) == pic_offset_table_rtx\n       && (GET_CODE (XEXP (value, 1)) == SYMBOL_REF\n \t  || GET_CODE (XEXP (value, 1)) == LABEL_REF"}, {"sha": "d064e240b62691b7933d0b3b1ecc032293c09748", "filename": "gcc/regclass.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12beba6fe60833d89cf886bbce863371fa4c97a0/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12beba6fe60833d89cf886bbce863371fa4c97a0/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=12beba6fe60833d89cf886bbce863371fa4c97a0", "patch": "@@ -470,7 +470,7 @@ init_reg_sets_1 ()\n \t;\n #endif\n #ifndef PIC_OFFSET_TABLE_REG_CALL_CLOBBERED\n-      else if (i == PIC_OFFSET_TABLE_REGNUM && flag_pic)\n+      else if (i == PIC_OFFSET_TABLE_REGNUM && fixed_regs[i])\n \t;\n #endif\n       else if (0"}, {"sha": "5b19fe45450ccef6a7dc5bb0f44f438b68dcf184", "filename": "gcc/resource.c", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12beba6fe60833d89cf886bbce863371fa4c97a0/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12beba6fe60833d89cf886bbce863371fa4c97a0/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=12beba6fe60833d89cf886bbce863371fa4c97a0", "patch": "@@ -1023,21 +1023,8 @@ mark_target_live_regs (insns, target, res)\n \t      /* CALL clobbers all call-used regs that aren't fixed except\n \t\t sp, ap, and fp.  Do this before setting the result of the\n \t\t call live.  */\n-\t      for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-\t\tif (call_used_regs[i]\n-\t\t    && i != STACK_POINTER_REGNUM && i != FRAME_POINTER_REGNUM\n-\t\t    && i != ARG_POINTER_REGNUM\n-#if HARD_FRAME_POINTER_REGNUM != FRAME_POINTER_REGNUM\n-\t\t    && i != HARD_FRAME_POINTER_REGNUM\n-#endif\n-#if ARG_POINTER_REGNUM != FRAME_POINTER_REGNUM\n-\t\t    && ! (i == ARG_POINTER_REGNUM && fixed_regs[i])\n-#endif\n-#if !defined (PIC_OFFSET_TABLE_REG_CALL_CLOBBERED)\n-\t\t    && ! (i == PIC_OFFSET_TABLE_REGNUM && flag_pic)\n-#endif\n-\t\t    )\n-\t\t  CLEAR_HARD_REG_BIT (current_live_regs, i);\n+\t      AND_COMPL_HARD_REG_SET (current_live_regs,\n+\t\t\t\t      regs_invalidated_by_call);\n \n \t      /* A CALL_INSN sets any global register live, since it may\n \t\t have been modified by the call.  */"}]}