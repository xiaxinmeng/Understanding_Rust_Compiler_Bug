{"sha": "3a3589b4ba5e2d88874f8178f8808f784860fca5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EzNTg5YjRiYTVlMmQ4ODg3NGY4MTc4Zjg4MDhmNzg0ODYwZmNhNQ==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2004-10-25T22:55:25Z"}, "committer": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2004-10-25T22:55:25Z"}, "message": "c-common.h: Remove RID_ID.\n\n[gcc/ChangeLog]\n2004-10-25  David Ayers  <d.ayers@inode.at>\n\n\t* c-common.h: Remove RID_ID.\n\t* c-parse.in: Remove OBJECTNAME and references to RID_ID.\n\t(typespec_reserved_attr): Add rule for TYPENAME\n\tnon_empty_protocolrefs.\n\t(yylexname): Remove special handling of RID_ID.\n\n[gcc/objc/ChangeLog]\n2004-10-25  Ziemowit Laski  <zlaski@apple.com>\n\t    David Ayers  <d.ayers@inode.at>\n\n\t* objc-act.c (objc_comptypes): Use IS_PROTOCOL_QUALIFIED_UNTYPED\n\tinstead of IS_PROTOCOL_QUALIFIED_ID; add comparisons for:\n\t'Class <Protocol> != id <Protocol>'; 'Class <Protocol> != <class> *';\n\t'Class <Protocol> == id' and 'Class <Protocol> == Class'.\n\t(objc_is_id): Add test for 'super'.\n\t(objc_finish_message_expr): Allow for messaging of 'Class <Proto>'\n\treceivers; if class methods are not found in protocol lists, search\n\tfor instance methods therein and warn if one is found.  Look in\n\tglobal hash tables for suitable method as a last resort when messaging\n\t'id <Proto>', 'Class <Proto>' and invalid receiver types.\n\t(objc_add_method): Insert instance methods listed in protocols into\n\tthe global class method hash table.\n\t* objc-act.h (IS_PROTOCOL_QUALIFIED_ID): Rename to\n\tIS_PROTOCOL_QUALIFIED_UNTYPED and allow for 'Class <Proto>' in\n\taddition to 'id <Proto>'.\n\n[gcc/testsuite/ChangeLog]\n2004-10-25  David Ayers  <d.ayers@inode.at>\n\t    Ziemowit Laski  <zlaski@apple.com>\n\n\t* objc.dg/call-super-2.m: Add messages to 'Class <Proto>'; update\n\tdiagnostics when messaging 'id <Proto>'.\n\t* objc.dg/class-protocol-1.m: New test.\n\t* objc.dg/desig-init-1.m: Add message to an invalid receiver using\n\ta non-existent method signature.\n\t* objc.dg/method-5.m, objc.dg/method-6.m, objc.dg/proto-hier-1.m:\n\tUpdate diagnostics when messaging with non-existent method signature.\n\t* objc.dg/proto-hier-2.m: Adjust wording of diagnostic.\n\t* objc.dg/proto-lossage-1.m, objc.dg/proto-lossage-4.m: Messages to\n\tinvalid receivers are now resolved as if messaging 'id'; remove\n\textraneous diagnostics.\n\nFrom-SVN: r89562", "tree": {"sha": "ac249a647a7d1f72cb019c1e551cbb2d1a3eeda9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac249a647a7d1f72cb019c1e551cbb2d1a3eeda9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a3589b4ba5e2d88874f8178f8808f784860fca5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a3589b4ba5e2d88874f8178f8808f784860fca5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a3589b4ba5e2d88874f8178f8808f784860fca5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a3589b4ba5e2d88874f8178f8808f784860fca5/comments", "author": null, "committer": null, "parents": [{"sha": "5307127042d75e40e952bb986e6f15377dac75db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5307127042d75e40e952bb986e6f15377dac75db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5307127042d75e40e952bb986e6f15377dac75db"}], "stats": {"total": 718, "additions": 620, "deletions": 98}, "files": [{"sha": "ae76071825d2b20b62e24849b84d42c102928536", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a3589b4ba5e2d88874f8178f8808f784860fca5", "patch": "@@ -1,3 +1,11 @@\n+2004-10-25  David Ayers  <d.ayers@inode.at>\n+\n+\t* c-common.h: Remove RID_ID.\n+\t* c-parse.in: Remove OBJECTNAME and references to RID_ID.\n+\t(typespec_reserved_attr): Add rule for TYPENAME\n+\tnon_empty_protocolrefs.\n+\t(yylexname): Remove special handling of RID_ID.\n+\n 2004-10-25  James E Wilson  <wilson@specifixinc.com>\n \n \t* doc/invoke.texi (-fcrossjumping): Not enabled at -O."}, {"sha": "95aaf8c115aaa8138cae6d7041e1b61711b3f091", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=3a3589b4ba5e2d88874f8178f8808f784860fca5", "patch": "@@ -92,7 +92,7 @@ enum rid\n   RID_CONSTCAST, RID_DYNCAST, RID_REINTCAST, RID_STATCAST,\n \n   /* Objective-C */\n-  RID_ID,          RID_AT_ENCODE,    RID_AT_END,\n+  RID_AT_ENCODE,   RID_AT_END,\n   RID_AT_CLASS,    RID_AT_ALIAS,     RID_AT_DEFS,\n   RID_AT_PRIVATE,  RID_AT_PROTECTED, RID_AT_PUBLIC,\n   RID_AT_PROTOCOL, RID_AT_SELECTOR,  "}, {"sha": "dbeee7239887099adfe753d268969aed850c1587", "filename": "gcc/c-parse.in", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=3a3589b4ba5e2d88874f8178f8808f784860fca5", "patch": "@@ -178,7 +178,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    Objective C, so that the token codes are the same in both.  */\n %token AT_INTERFACE AT_IMPLEMENTATION AT_END AT_SELECTOR AT_DEFS AT_ENCODE\n %token CLASSNAME AT_PUBLIC AT_PRIVATE AT_PROTECTED AT_PROTOCOL\n-%token OBJECTNAME AT_CLASS AT_ALIAS\n+%token AT_CLASS AT_ALIAS\n %token AT_THROW AT_TRY AT_CATCH AT_FINALLY AT_SYNCHRONIZED\n %token OBJC_STRING\n \n@@ -259,7 +259,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n %type <ttype> selectorarg keywordnamelist keywordname objcencodeexpr\n %type <ttype> non_empty_protocolrefs protocolrefs identifier_list objcprotocolexpr\n \n-%type <ttype> CLASSNAME OBJECTNAME OBJC_STRING OBJC_TYPE_QUAL\n+%type <ttype> CLASSNAME OBJC_STRING OBJC_TYPE_QUAL\n \n %type <ttype> superclass objc_quals objc_qual objc_typename\n %type <itype> objc_try_catch_stmt optellipsis\n@@ -472,7 +472,6 @@ identifier:\n \tIDENTIFIER\n \t| TYPENAME\n @@ifobjc\n-\t| OBJECTNAME\n \t| CLASSNAME\n @@end_ifobjc\n \t;\n@@ -1281,7 +1280,7 @@ typespec_nonreserved_nonattr:\n \t| CLASSNAME protocolrefs\n \t\t{ $$.kind = ctsk_objc;\n \t\t  $$.spec = objc_get_protocol_qualified_type ($1, $2); }\n-\t| OBJECTNAME protocolrefs\n+\t| TYPENAME non_empty_protocolrefs\n \t\t{ $$.kind = ctsk_objc;\n \t\t  $$.spec = objc_get_protocol_qualified_type ($1, $2); }\n \n@@ -1567,10 +1566,6 @@ after_type_declarator:\n \t\t{ $$ = make_pointer_declarator ($2, $3); }\n \t| TYPENAME\n \t\t{ $$ = build_id_declarator ($1); }\n-@@ifobjc\n-\t| OBJECTNAME\n-\t\t{ $$ = build_id_declarator ($1); }\n-@@end_ifobjc\n \t;\n \n /* Kinds of declarator that can appear in a parameter list\n@@ -1589,10 +1584,6 @@ parm_declarator_starttypename:\n \t\t{ $$ = set_array_declarator_inner ($2, $1, false); }\n \t| TYPENAME\n \t\t{ $$ = build_id_declarator ($1); }\n-@@ifobjc\n-\t| OBJECTNAME\n-\t\t{ $$ = build_id_declarator ($1); }\n-@@end_ifobjc\n \t;\n \n parm_declarator_nostarttypename:\n@@ -2884,7 +2875,6 @@ selector:\n \t  IDENTIFIER\n \t| TYPENAME\n \t| CLASSNAME\n-\t| OBJECTNAME\n \t| reservedwords\n \t;\n \n@@ -3144,7 +3134,6 @@ static const struct resword reswords[] =\n   { \"while\",\t\tRID_WHILE,\t0 },\n \n @@ifobjc\n-  { \"id\",\t\tRID_ID,\t\t\tD_OBJC },\n \n   /* These objc keywords are recognized only immediately after\n      an '@'.  */\n@@ -3287,7 +3276,6 @@ static const short rid_to_yy[RID_MAX] =\n   /* RID_STATCAST */\t0,\n \n   /* Objective C */\n-  /* RID_ID */\t\t\tOBJECTNAME,\n   /* RID_AT_ENCODE */\t\tAT_ENCODE,\n   /* RID_AT_END */\t\tAT_END,\n   /* RID_AT_CLASS */\t\tAT_CLASS,\n@@ -3356,15 +3344,6 @@ yylexname (void)\n       enum rid rid_code = C_RID_CODE (yylval.ttype);\n \n @@ifobjc\n-      /* Turn non-typedefed refs to \"id\" into plain identifiers; this\n-\t allows constructs like \"void foo(id id);\" to work.  */\n-      if (rid_code == RID_ID)\n-      {\n-\tdecl = lookup_name (yylval.ttype);\n-\tif (decl == NULL_TREE || TREE_CODE (decl) != TYPE_DECL)\n-\t  return IDENTIFIER;\n-      }\n-\n       if (!OBJC_IS_AT_KEYWORD (rid_code)\n \t  && (!OBJC_IS_PQ_KEYWORD (rid_code) || objc_pq_context))\n @@end_ifobjc\n@@ -3527,7 +3506,6 @@ yyprint (FILE *file, int yychar, YYSTYPE yyl)\n     {\n     case IDENTIFIER:\n     case TYPENAME:\n-    case OBJECTNAME:\n     case TYPESPEC:\n     case TYPE_QUAL:\n     case SCSPEC:"}, {"sha": "f781a1cefd55cd7d22d587053c2697a0b4b36577", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=3a3589b4ba5e2d88874f8178f8808f784860fca5", "patch": "@@ -1,3 +1,22 @@\n+2004-10-25  Ziemowit Laski  <zlaski@apple.com>\n+\t    David Ayers  <d.ayers@inode.at>\n+\n+\t* objc-act.c (objc_comptypes): Use IS_PROTOCOL_QUALIFIED_UNTYPED\n+\tinstead of IS_PROTOCOL_QUALIFIED_ID; add comparisons for:\n+\t'Class <Protocol> != id <Protocol>'; 'Class <Protocol> != <class> *';\n+\t'Class <Protocol> == id' and 'Class <Protocol> == Class'.\n+\t(objc_is_id): Add test for 'super'.\n+\t(objc_finish_message_expr): Allow for messaging of 'Class <Proto>'\n+\treceivers; if class methods are not found in protocol lists, search\n+\tfor instance methods therein and warn if one is found.  Look in\n+\tglobal hash tables for suitable method as a last resort when messaging\n+\t'id <Proto>', 'Class <Proto>' and invalid receiver types.\n+\t(objc_add_method): Insert instance methods listed in protocols into\n+\tthe global class method hash table.\n+\t* objc-act.h (IS_PROTOCOL_QUALIFIED_ID): Rename to\n+\tIS_PROTOCOL_QUALIFIED_UNTYPED and allow for 'Class <Proto>' in\n+\taddition to 'id <Proto>'.\n+\n 2004-10-21  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR objc/17923"}, {"sha": "21b279d5397b79bda13c1a5989e116e011495307", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 76, "deletions": 27, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=3a3589b4ba5e2d88874f8178f8808f784860fca5", "patch": "@@ -866,8 +866,8 @@ objc_comptypes (tree lhs, tree rhs, int reflexive)\n       && TREE_CODE (rhs) == POINTER_TYPE\n       && TREE_CODE (TREE_TYPE (rhs)) == RECORD_TYPE)\n     {\n-      int lhs_is_proto = IS_PROTOCOL_QUALIFIED_ID (lhs);\n-      int rhs_is_proto = IS_PROTOCOL_QUALIFIED_ID (rhs);\n+      int lhs_is_proto = IS_PROTOCOL_QUALIFIED_UNTYPED (lhs);\n+      int rhs_is_proto = IS_PROTOCOL_QUALIFIED_UNTYPED (rhs);\n \n       if (lhs_is_proto)\n         {\n@@ -878,6 +878,11 @@ objc_comptypes (tree lhs, tree rhs, int reflexive)\n \t  /* <Protocol> = <Protocol>  */\n \t  if (rhs_is_proto)\n \t    {\n+\t      /* Class <Protocol> != id <Protocol>;\n+\t\t id <Protocol> != Class <Protocol>  */\n+\t      if (IS_ID (lhs) != IS_ID (rhs))\n+\t\treturn 0;\n+\n \t      rproto_list = TYPE_PROTOCOL_LIST (rhs);\n \n \t      if (!reflexive)\n@@ -942,6 +947,10 @@ objc_comptypes (tree lhs, tree rhs, int reflexive)\n \t      tree rname = OBJC_TYPE_NAME (TREE_TYPE (rhs));\n \t      tree rinter;\n \n+\t      /* Class <Protocol> != <class> *  */\n+\t      if (IS_CLASS (lhs))\n+\t\treturn 0;\n+\n \t      /* Make sure the protocol is supported by the object on\n \t\t the rhs.  */\n \t      for (lproto = lproto_list; lproto; lproto = TREE_CHAIN (lproto))\n@@ -985,15 +994,15 @@ objc_comptypes (tree lhs, tree rhs, int reflexive)\n \t\t}\n \t      return 1;\n \t    }\n-\t  /* <Protocol> = id */\n+\t  /* id <Protocol> = id; Class <Protocol> = id */\n \t  else if (objc_is_object_id (TREE_TYPE (rhs)))\n \t    {\n \t      return 1;\n \t    }\n-\t  /* <Protocol> = Class */\n+\t  /* id <Protocol> != Class; Class <Protocol> = Class */\n \t  else if (objc_is_class_id (TREE_TYPE (rhs)))\n \t    {\n-\t      return 0;\n+\t      return IS_CLASS (lhs);\n \t    }\n \t  /* <Protocol> = ?? : let comptypes decide.  */\n           return -1;\n@@ -1003,6 +1012,10 @@ objc_comptypes (tree lhs, tree rhs, int reflexive)\n \t  /* <class> * = <Protocol> */\n \t  if (TYPED_OBJECT (TREE_TYPE (lhs)))\n \t    {\n+\t      /* <class> * != Class <Protocol> */\n+\t      if (IS_CLASS (rhs))\n+\t\treturn 0;\n+\n \t      if (reflexive)\n \t\t{\n \t\t  tree rname = OBJC_TYPE_NAME (TREE_TYPE (lhs));\n@@ -1062,15 +1075,15 @@ objc_comptypes (tree lhs, tree rhs, int reflexive)\n \t      else\n \t\treturn 0;\n \t    }\n-\t  /* id = <Protocol> */\n+\t  /* id = id <Protocol>; id = Class <Protocol> */\n \t  else if (objc_is_object_id (TREE_TYPE (lhs)))\n \t    {\n \t      return 1;\n \t    }\n-\t  /* Class = <Protocol> */\n+\t  /* Class != id <Protocol>; Class = Class <Protocol> */\n \t  else if (objc_is_class_id (TREE_TYPE (lhs)))\n \t    {\n-\t      return 0;\n+\t      return IS_CLASS (rhs);\n \t    }\n \t  /* ??? = <Protocol> : let comptypes decide */\n \t  else\n@@ -2714,7 +2727,8 @@ objc_is_id (tree type)\n \n   /* NB: This function may be called before the ObjC front-end has\n      been initialized, in which case OBJC_OBJECT_TYPE will (still) be NULL.  */\n-  return (objc_object_type && type && (IS_ID (type) || IS_CLASS (type))\n+  return (objc_object_type && type\n+\t  && (IS_ID (type) || IS_CLASS (type) || IS_SUPER (type))\n \t  ? type\n \t  : NULL_TREE); \n }\n@@ -5567,25 +5581,35 @@ objc_finish_message_expr (tree receiver, tree sel_name, tree method_params)\n     {\n       if (!rtype)\n \trtype = xref_tag (RECORD_TYPE, class_tree);\n-      else if (IS_ID (rtype))\n+      else\n \t{\n+\t  class_tree = (IS_CLASS (rtype) ? objc_class_name : NULL_TREE);\n \t  rprotos = TYPE_PROTOCOL_LIST (rtype);\n \t  rtype = NULL_TREE;\n \t}\n-      else\n-\t{\n-\t  class_tree = objc_class_name;\n-\t  OBJC_SET_TYPE_NAME (rtype, class_tree);\n-\t}\n \n       if (rprotos)\n-\tmethod_prototype\n-\t  = lookup_method_in_protocol_list (rprotos, sel_name,\n-\t\t\t\t\t    class_tree != NULL_TREE);\n-      if (!method_prototype && !rprotos)\n-\tmethod_prototype\n-\t  = lookup_method_in_hash_lists (sel_name,\n-\t\t\t\t\t class_tree != NULL_TREE);\n+\t{\n+\t  /* If messaging 'id <Protos>' or 'Class <Proto>', first search\n+\t     in protocols themselves for the method prototype.  */\n+\t  method_prototype\n+\t    = lookup_method_in_protocol_list (rprotos, sel_name,\n+\t\t\t\t\t      class_tree != NULL_TREE);\n+\n+\t  /* If messaging 'Class <Proto>' but did not find a class method\n+\t     prototype, search for an instance method instead, and warn\n+\t     about having done so.  */\n+\t  if (!method_prototype && !rtype && class_tree != NULL_TREE)\n+\t    {\n+\t      method_prototype\n+\t\t= lookup_method_in_protocol_list (rprotos, sel_name, 0);\n+\n+\t      if (method_prototype)\n+\t\twarning (\"found `-%s' instead of `+%s' in protocol(s)\",\n+\t\t\t IDENTIFIER_POINTER (sel_name),\n+\t\t\t IDENTIFIER_POINTER (sel_name));\n+\t    }\n+\t}\n     }\n   else\n     {\n@@ -5642,10 +5666,28 @@ objc_finish_message_expr (tree receiver, tree sel_name, tree method_params)\n \t{\n \t  warning (\"invalid receiver type `%s'\",\n \t\t   gen_type_name (orig_rtype));\n+\t  /* After issuing the \"invalid receiver\" warning, perform method\n+\t     lookup as if we were messaging 'id'.  */\n \t  rtype = rprotos = NULL_TREE;\n \t}\n     }\t\n \n+\n+  /* For 'id' or 'Class' receivers, search in the global hash table\n+     as a last resort.  For all receivers, warn if protocol searches\n+     have failed.  */\n+  if (!method_prototype)\n+    {\n+      if (rprotos)\n+\twarning (\"`%c%s' not found in protocol(s)\",\n+\t\t (class_tree ? '+' : '-'),\n+\t\t IDENTIFIER_POINTER (sel_name));\n+\n+      if (!rtype)\n+\tmethod_prototype\n+\t  = lookup_method_in_hash_lists (sel_name, class_tree != NULL_TREE);\n+    }\n+\n   if (!method_prototype)\n     {\n       static bool warn_missing_methods = false;\n@@ -5655,10 +5697,14 @@ objc_finish_message_expr (tree receiver, tree sel_name, tree method_params)\n \t\t IDENTIFIER_POINTER (OBJC_TYPE_NAME (rtype)),\n \t\t (class_tree ? '+' : '-'),\n \t\t IDENTIFIER_POINTER (sel_name));\n-      if (rprotos)\n-\twarning (\"`%c%s' not implemented by protocol(s)\",\n+      /* If we are messaging an 'id' or 'Class' object and made it here,\n+\t then we have failed to find _any_ instance or class method,\n+\t respectively.  */\n+      else\n+\twarning (\"no `%c%s' method found\",\n \t\t (class_tree ? '+' : '-'),\n \t\t IDENTIFIER_POINTER (sel_name));\n+\n       if (!warn_missing_methods)\n \t{\n \t  warning (\"(Messages without a matching method signature\");\n@@ -6160,13 +6206,16 @@ objc_add_method (tree class, tree method, int is_class)\n       add_method_to_hash_list (nst_method_hash_list, method);\n \n       /* Instance methods in root classes (and categories thereof)\n-\t may acts as class methods as a last resort. */\n+\t may act as class methods as a last resort.  We also add\n+\t instance methods listed in @protocol declarations to\n+\t the class hash table, on the assumption that @protocols\n+\t may be adopted by root classes or categories.  */\n       if (TREE_CODE (class) == CATEGORY_INTERFACE_TYPE\n \t  || TREE_CODE (class) == CATEGORY_IMPLEMENTATION_TYPE)\n \tclass = lookup_interface (CLASS_NAME (class));\n \n-      if (TREE_CODE (class) != PROTOCOL_INTERFACE_TYPE\n-\t  && !CLASS_SUPER_NAME (class))\n+      if (TREE_CODE (class) == PROTOCOL_INTERFACE_TYPE\n+\t  || !CLASS_SUPER_NAME (class))\n \tadd_method_to_hash_list (cls_method_hash_list, method);\n     }\n "}, {"sha": "d13e3742f1c820ef26fa9be04b8b6c54e28cd381", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=3a3589b4ba5e2d88874f8178f8808f784860fca5", "patch": "@@ -277,8 +277,8 @@ extern GTY(()) tree objc_global_trees[OCTI_MAX];\n   (POINTER_TYPE_P (TYPE) && TREE_TYPE (TYPE) == TREE_TYPE (objc_object_type))\n #define IS_CLASS(TYPE) \\\n   (POINTER_TYPE_P (TYPE) && TREE_TYPE (TYPE) == TREE_TYPE (objc_class_type))\n-#define IS_PROTOCOL_QUALIFIED_ID(TYPE) \\\n-  (IS_ID (TYPE) && TYPE_PROTOCOL_LIST (TYPE))\n+#define IS_PROTOCOL_QUALIFIED_UNTYPED(TYPE) \\\n+  ((IS_ID (TYPE) || IS_CLASS (TYPE)) && TYPE_PROTOCOL_LIST (TYPE))\n #define IS_SUPER(TYPE) \\\n   (POINTER_TYPE_P (TYPE) && TREE_TYPE (TYPE) == objc_super_template)\n "}, {"sha": "a0768c31742bd9c8b5209034e71f3b1b3b4d7c87", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3a3589b4ba5e2d88874f8178f8808f784860fca5", "patch": "@@ -1,3 +1,18 @@\n+2004-10-25  David Ayers  <d.ayers@inode.at>\n+\t    Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* objc.dg/call-super-2.m: Add messages to 'Class <Proto>'; update\n+\tdiagnostics when messaging 'id <Proto>'.\n+\t* objc.dg/class-protocol-1.m: New test.\n+\t* objc.dg/desig-init-1.m: Add message to an invalid receiver using\n+\ta non-existent method signature.\n+\t* objc.dg/method-5.m, objc.dg/method-6.m, objc.dg/proto-hier-1.m:\n+\tUpdate diagnostics when messaging with non-existent method signature.\n+\t* objc.dg/proto-hier-2.m: Adjust wording of diagnostic.\n+\t* objc.dg/proto-lossage-1.m, objc.dg/proto-lossage-4.m: Messages to\n+\tinvalid receivers are now resolved as if messaging 'id'; remove\n+\textraneous diagnostics.\n+\n 2004-10-25  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \tPR c/16667"}, {"sha": "be8a89fdc7bd4c65a1ad7cce2f3110653e643a17", "filename": "gcc/testsuite/objc.dg/call-super-2.m", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-2.m?ref=3a3589b4ba5e2d88874f8178f8808f784860fca5", "patch": "@@ -46,15 +46,14 @@ @implementation Derived\n + (int) class_func1\n {\n    int i = (size_t)[self class_func0];       /* { dg-warning \".Derived. may not respond to .\\\\+class_func0.\" } */\n-       /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 48 } */\n-       /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 48 } */\n-       /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 48 } */\n    return i + (size_t)[super class_func0];   /* { dg-warning \".Object. may not respond to .\\\\+class_func0.\" } */\n }\n + (int) class_func2\n {\n-   int i = [(id <Func>)self class_func0];\n-   return i + [(id <Func>)super class_func0];\n+   int i = [(id <Func>)self class_func0];  /* { dg-warning \".\\\\-class_func0. not found in protocol\" } */\n+   i += [(id <Func>)super class_func0];    /* { dg-warning \".\\\\-class_func0. not found in protocol\" } */\n+   i += [(Class <Func>)self class_func0];\n+   return i + [(Class <Func>)super class_func0];\n }\n + (int) class_func3\n {\n@@ -120,16 +119,18 @@ + (int) categ_class_func1\n }\n + (int) categ_class_func2\n {\n-   int i = [(id <Func>)self class_func0];\n-   return i + [(id <Func>)super class_func0];\n+   int i = [(id <Func>)self class_func0];  /* { dg-warning \".\\\\-class_func0. not found in protocol\" } */\n+   i += [(id <Func>)super class_func0];    /* { dg-warning \".\\\\-class_func0. not found in protocol\" } */\n+   i += [(Class <Func>)self class_func0];\n+   return i + [(Class <Func>)super class_func0];\n }\n - (int) categ_instance_func1\n {\n    int i = (size_t)[self instance_func0];    /* { dg-warning \".Derived. may not respond to .\\\\-instance_func0.\" } */\n    i += [(Derived <Func> *)self categ_instance_func2];\n    i += (size_t)[(Object <Func> *)self categ_instance_func2]; /* { dg-warning \".Object. may not respond to .\\\\-categ_instance_func2.\" } */\n-   /* { dg-warning \".\\\\-categ_instance_func2. not implemented by protocol\" \"\" { target *-*-* } 130 } */\n-   i += (size_t)[(id <Func>)self categ_instance_func2];  /* { dg-warning \".\\\\-categ_instance_func2. not implemented by protocol\" } */\n+   /* { dg-warning \".\\\\-categ_instance_func2. not found in protocol\" \"\" { target *-*-* } 131 } */\n+   i += (size_t)[(id <Func>)self categ_instance_func2];  /* { dg-warning \".\\\\-categ_instance_func2. not found in protocol\" } */\n    i += [(id)self categ_instance_func2];\n    return i + (size_t)[super instance_func0];   /* { dg-warning \".Object. may not respond to .\\\\-instance_func0.\" } */\n }\n@@ -138,3 +139,7 @@ - (int) categ_instance_func2\n    return [(id <Func>)super instance_func0];\n }\n @end\n+\n+/* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */"}, {"sha": "ffa2435f5c0bfe62408b10ce01ca99a53dd51caa", "filename": "gcc/testsuite/objc.dg/class-protocol-1.m", "status": "added", "additions": 441, "deletions": 0, "changes": 441, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2Ftestsuite%2Fobjc.dg%2Fclass-protocol-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2Ftestsuite%2Fobjc.dg%2Fclass-protocol-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fclass-protocol-1.m?ref=3a3589b4ba5e2d88874f8178f8808f784860fca5", "patch": "@@ -0,0 +1,441 @@\n+/* Check Class <protocol> types */\n+/* Author: David Ayers <d.ayers@inode.at> */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+\n+@protocol MyProto1\n++(void)doItClass1;\n+-(void)doItInstance1;\n+@end\n+\n+@protocol MyProto2\n++(void)doItClass2;\n+-(void)doItInstance2;\n+@end\n+\n+@interface MyClass1 <MyProto1>\n+{\n+  Class isa;\n+}\n+@end\n+@implementation MyClass1\n++(void)doItClass1{}\n+-(void)doItInstance1{}\n+@end\n+\n+@interface MyClass2 : MyClass1 <MyProto2>\n+@end\n+@implementation MyClass2\n++(void)doItClass2{}\n+-(void)doItInstance2{}\n+@end\n+\n+@interface MyClass3\n+{\n+  Class isa;\n+}\n+@end\n+@interface MyClass4 : MyClass3 <MyProto1>\n+@end\n+\n+/*----------------------------------------*/\n+\n+Class cls = 0;\n+Class <MyProto1> clsP1 = 0;\n+Class <MyProto2> clsP2 = 0;\n+\n+void\n+testSimple(void)\n+{\n+  [cls doItClass1];\n+  [cls doItInstance1];\n+  [cls doItClass2];\n+  [cls doItInstance2];\n+\n+  [clsP1 doItClass1];\n+  [clsP1 doItInstance1]; /* { dg-warning \"instead of\" }  */\n+  [clsP1 doItClass2];    /* { dg-warning \"not found in protocol\" } */\n+  [clsP1 doItInstance2]; /* { dg-warning \"not found in protocol\" } */\n+\n+  [clsP2 doItClass1];    /* { dg-warning \"not found in protocol\" } */\n+  [clsP2 doItInstance1]; /* { dg-warning \"not found in protocol\" } */\n+  [clsP2 doItClass2];\n+  [clsP2 doItInstance2]; /* { dg-warning \"instead of\" }  */\n+\n+  [MyClass1 doItClass1];\n+  [MyClass1 doItInstance1];\n+  [MyClass1 doItClass2];    /* { dg-warning \"may not respond to\" } */\n+  [MyClass1 doItInstance2]; /* { dg-warning \"may not respond to\" } */\n+\n+  [MyClass2 doItClass1];\n+  [MyClass2 doItInstance1];\n+  [MyClass2 doItClass2];\n+  [MyClass2 doItInstance2]; /* { dg-warning \"may not respond to\" } */\n+\n+  [MyClass3 doItClass1];    /* { dg-warning \"may not respond to\" } */\n+  [MyClass3 doItInstance1]; /* { dg-warning \"may not respond to\" } */\n+\n+  [MyClass4 doItClass1];\n+  [MyClass4 doItInstance1]; /* { dg-warning \"may not respond to\" } */\n+}\n+\n+/*----------------------------------------*/\n+/* Protocols declared by categories */\n+\n+@protocol MyProto3\n++(void)doItClass3;\n+-(void)doItInstance3;\n+@end\n+@protocol MyProto4\n++(void)doItClass4;\n+-(void)doItInstance4;\n+@end\n+\n+@interface MyClass1 (Category1) <MyProto3>\n+@end\n+@interface MyClass2 (Category2) <MyProto4>\n+@end\n+\n+void\n+testCategory(void)\n+{\n+  [cls doItClass3];\n+  [cls doItInstance3];\n+  [cls doItClass4];\n+  [cls doItInstance4];\n+\n+  [MyClass1 doItClass3];\n+  [MyClass1 doItInstance3];\n+  [MyClass1 doItClass4];    /* { dg-warning \"may not respond\" } */\n+  [MyClass1 doItInstance4]; /* { dg-warning \"may not respond\" } */\n+\n+  [MyClass2 doItClass3];\n+  [MyClass2 doItInstance3];\n+  [MyClass2 doItClass4];\n+  [MyClass2 doItInstance4]; /* { dg-warning \"may not respond\" } */\n+\n+}\n+\n+/*----------------------------------------*/\n+/* Inherited protocols declared by categories */\n+\n+@protocol MyProto5 <MyProto1>\n++(void)doItClass5;\n+-(void)doItInstance5;\n+@end\n+\n+@protocol MyProto6 <MyProto2>\n++(void)doItClass6;\n+-(void)doItInstance6;\n+@end\n+\n+@interface MyClass1 (Category3) <MyProto5>\n+@end\n+@interface MyClass2 (Category4) <MyProto6>\n+@end\n+\n+Class <MyProto5> clsP5 = 0;\n+Class <MyProto6> clsP6 = 0;\n+\n+void\n+testCategoryInherited(void)\n+{\n+  [cls doItClass5];\n+  [cls doItInstance5];\n+  [cls doItClass6];\n+  [cls doItInstance6];\n+\n+  [clsP5 doItClass1];\n+  [clsP5 doItInstance1]; /* { dg-warning \"instead of\" }  */\n+  [clsP5 doItClass2];    /* { dg-warning \"not found in protocol\" } */\n+  [clsP5 doItInstance2]; /* { dg-warning \"not found in protocol\" } */\n+\n+  [clsP6 doItClass1];    /* { dg-warning \"not found in protocol\" } */\n+  [clsP6 doItInstance1]; /* { dg-warning \"not found in protocol\" } */\n+  [clsP6 doItClass2];\n+  [clsP6 doItInstance2]; /* { dg-warning \"instead of\" }  */\n+\n+\n+  [MyClass1 doItClass5];\n+  [MyClass1 doItInstance5];\n+  [MyClass1 doItClass6];    /* { dg-warning \"may not respond\" } */\n+  [MyClass1 doItInstance6]; /* { dg-warning \"may not respond\" } */\n+\n+  [MyClass2 doItClass5];\n+  [MyClass2 doItInstance5];\n+  [MyClass2 doItClass6];\n+  [MyClass2 doItInstance6]; /* { dg-warning \"may not respond\" } */\n+\n+}\n+\n+/*----------------------------------------*/\n+/* Forward declared root protocols */\n+\n+@protocol FwProto;\n+\n+@interface MyClass1 (Forward) <FwProto>\n+@end\n+\n+Class <FwProto> clsP7 = 0;\n+\n+void\n+testForwardeDeclared1(void)\n+{\n+  [cls doItClass7];         /* { dg-warning \"no .\\\\+doItClass7. method found\" } */\n+  [cls doItInstance7];      /* { dg-warning \"no .\\\\+doItInstance7. method found\" } */\n+\n+  [clsP7 doItClass7];       /* { dg-warning \"not found in protocol\" } */\n+  /* { dg-warning \"no .\\\\+doItClass7. method found\" \"\" { target *-*-* } 189 } */\n+  [clsP7 doItInstance7];    /* { dg-warning \"not found in protocol\" } */\n+  /* { dg-warning \"no .\\\\+doItInstance7. method found\" \"\" { target *-*-* } 191 } */\n+\n+  [MyClass1 doItClass7];    /* { dg-warning \"may not respond\" } */\n+  [MyClass1 doItInstance7]; /* { dg-warning \"may not respond\" } */\n+\n+  [MyClass2 doItClass7];    /* { dg-warning \"may not respond\" } */\n+  [MyClass2 doItInstance7]; /* { dg-warning \"may not respond\" } */\n+\n+}\n+\n+@protocol FwProto\n++(void)doItClass7;\n+-(void)doItInstance7;\n+@end\n+\n+void\n+testForwardeDeclared2(void)\n+{\n+  [cls doItClass7];\n+  [cls doItInstance7];\n+\n+  [clsP7 doItClass7];    \n+  [clsP7 doItInstance7]; /* { dg-warning \"instead of\" }  */\n+\n+  [MyClass1 doItClass7];\n+  [MyClass1 doItInstance7];\n+\n+  [MyClass2 doItClass7];\n+  [MyClass2 doItInstance7];\n+}\n+\n+/*----------------------------------------*/\n+/* Inherited non root protocols */\n+\n+@protocol MyProto8\n++(void)doItClass8;\n+-(void)doItInstance8;\n+@end\n+\n+@protocol MyProto9 <MyProto8>\n++(void)doItClass9;\n+-(void)doItInstance9;\n+@end\n+\n+@interface MyClass1 (InheritedNonRoot) <MyProto9>\n+@end\n+\n+Class <MyProto8> clsP8 = 0;\n+Class <MyProto9> clsP9 = 0;\n+\n+void\n+testInheritedNonRoot(void)\n+{\n+  [cls doItClass8];\n+  [cls doItInstance8];\n+  [cls doItClass9];\n+  [cls doItInstance9];\n+\n+  [clsP8 doItClass8];\n+  [clsP8 doItInstance8]; /* { dg-warning \"instead of\" }  */\n+  [clsP8 doItClass9];    /* { dg-warning \"not found in protocol\" } */\n+  [clsP8 doItInstance9]; /* { dg-warning \"not found in protocol\" } */\n+\n+  [clsP9 doItClass8];\n+  [clsP9 doItInstance8]; /* { dg-warning \"instead of\" }  */\n+  [clsP9 doItClass9];\n+  [clsP9 doItInstance9]; /* { dg-warning \"instead of\" }  */\n+\n+  [MyClass1 doItClass8];\n+  [MyClass1 doItInstance8];\n+  [MyClass1 doItClass9];\n+  [MyClass1 doItInstance9];\n+\n+  [MyClass2 doItClass8];\n+  [MyClass2 doItInstance8];\n+  [MyClass2 doItClass9];\n+  [MyClass2 doItInstance9];\n+  \n+}\n+\n+/*----------------------------------------*/\n+/* Prototype mismatch  */\n+\n+@protocol MyOtherProto1\n++(id)doItClass1;\n+-(id)doItInstance1;\n+@end\n+@interface MyOtherClass1 <MyOtherProto1>\n+@end\n+\n+Class <MyOtherProto1> oclsP1;\n+\n+void\n+testPrototypeMismatch(void)\n+{\n+  id tmp1 = [oclsP1 doItClass1];\n+  id tmp2 = [oclsP1 doItInstance1]; /* { dg-warning \"instead of\" }  */\n+\n+  [clsP1 doItClass1];\n+  [clsP1 doItInstance1]; /* { dg-warning \"instead of\" }  */\n+}\n+\n+id obj = nil;\n+id <MyProto1> objP1 = nil;\n+id <MyProto2> objP2 = nil;\n+id <MyProto5> objP5 = nil;\n+int num = 0;\n+void *ptr = 0;\n+\n+MyClass1 *mc1 = nil;\n+\n+void\n+testComptypes(void)\n+{\n+  { /* id <protocol>, id <protocol>  */\n+    objP1 == objP2;  /* { dg-warning \"lacks a cast\" } */\n+    objP2 == objP1;  /* { dg-warning \"lacks a cast\" } */\n+\n+    objP1 == objP5;\n+    objP5 == objP1;\n+  }\n+  { /* id <protocol>, SomeClass *  */\n+    mc1 == objP1;\n+    objP1 == mc1;\n+    \n+    mc1 == objP2; /* { dg-warning \"does not implement\" } */\n+    objP2 == mc1; /* { dg-warning \"does not implement\" } */\n+  }\n+  { /* id <protocol>, id  */\n+    obj == objP1;\n+    objP1 == obj;\n+  }\n+  { /* id <protocol>, Class  */\n+    cls == objP1; /* { dg-warning \"lacks a cast\" } */\n+    objP1 == cls; /* { dg-warning \"lacks a cast\" } */\n+  }\n+  { /* id <protocol>, non-ObjC  */\n+    num == objP1; /* { dg-warning \"between pointer\" } */\n+    objP1 == num; /* { dg-warning \"between pointer\" } */\n+\n+    ptr == objP1;\n+    objP1 == ptr;\n+  }\n+  { /* Class <protocol>, Class <protocol> */\n+    clsP1 == clsP2; /* { dg-warning \"lacks a cast\" } */\n+    clsP2 == clsP1; /* { dg-warning \"lacks a cast\" } */\n+\n+    clsP1 == clsP5;\n+    clsP5 == clsP1;\n+  }\n+  { /* Class <protocol>, SomeClass * */\n+    mc1 == clsP1; /* { dg-warning \"lacks a cast\" } */\n+    clsP1 == mc1; /* { dg-warning \"lacks a cast\" } */\n+  }\n+  { /* Class <protocol>, id */\n+    obj == clsP1;\n+    clsP1 == obj;\n+  }\n+  { /* Class <protocol>, Class */\n+    cls == clsP1;\n+    clsP1 == cls;\n+  }\n+  { /* Class <protocol>, non-ObjC */\n+    num == clsP1; /* { dg-warning \"between pointer\" } */\n+    clsP1 == num; /* { dg-warning \"between pointer\" } */\n+\n+    ptr == clsP1;\n+    clsP1 == ptr;\n+  }\n+  { /* Class <protocol>, id <protocol> */\n+    clsP1 == objP1; /* { dg-warning \"lacks a cast\" } */\n+    objP1 == clsP1; /* { dg-warning \"lacks a cast\" } */\n+  }\n+\n+  { /* id <protocol>, id <protocol>  */\n+    objP1 = objP2; /* { dg-warning \"does not conform\" } */\n+    objP2 = objP1; /* { dg-warning \"does not conform\" } */\n+\n+    objP1 = objP5;\n+    objP5 = objP1; /* { dg-warning \"does not conform\" } */\n+  }\n+  { /* id <protocol>, SomeClass *  */\n+    mc1 = objP1; /* { dg-warning \"incompatible\" } */ /* FIXME: should be \"\" */\n+    objP1 = mc1;\n+    \n+    mc1 = objP2; /* { dg-warning \"incompatible\" } */ /* FIXME: should be \"does not implement\" */\n+    objP2 = mc1; /* { dg-warning \"does not implement\" } */\n+  }\n+  { /* id <protocol>, id  */\n+    obj = objP1;\n+    objP1 = obj;\n+  }\n+  { /* id <protocol>, Class  */\n+    cls = objP1; /* { dg-warning \"incompatible\" } */\n+    objP1 = cls; /* { dg-warning \"incompatible\" } */\n+  }\n+  { /* id <protocol>, non-ObjC  */\n+    num = objP1; /* { dg-warning \"makes integer\" } */\n+    objP1 = num; /* { dg-warning \"makes pointer\" } */\n+\n+    ptr = objP1;\n+    objP1 = ptr;\n+  }\n+  { /* Class <protocol>, Class <protocol> */\n+    clsP1 = clsP2; /* { dg-warning \"does not conform\" } */\n+    clsP2 = clsP1; /* { dg-warning \"does not conform\" } */\n+\n+    clsP1 = clsP5;\n+    clsP5 = clsP1; /* { dg-warning \"does not conform\" } */\n+  }\n+  { /* Class <protocol>, SomeClass * */\n+    /* These combinations should always elicit a warning.  */\n+    mc1 = clsP1; /* { dg-warning \"incompatible\" } */\n+    clsP1 = mc1; /* { dg-warning \"incompatible\" } */\n+    \n+    mc1 = clsP2; /* { dg-warning \"incompatible\" } */\n+    clsP2 = mc1; /* { dg-warning \"incompatible\" } */\n+  }\n+  { /* Class <protocol>, id */\n+    obj = clsP1;\n+    clsP1 = obj;\n+  }\n+  { /* Class <protocol>, Class */\n+    cls = clsP1;\n+    clsP1 = cls;\n+  }\n+  { /* Class <protocol>, non-ObjC */\n+    num = clsP1; /* { dg-warning \"makes integer\" } */\n+    clsP1 = num; /* { dg-warning \"makes pointer\" } */\n+\n+    ptr = clsP1;\n+    clsP1 = ptr;\n+  }\n+  { /* Class <protocol>, id <protocol> */\n+    clsP1 = objP1; /* { dg-warning \"incompatible\" } */\n+    objP1 = clsP1; /* { dg-warning \"incompatible\" } */\n+  }\n+}\n+\n+int main ()\n+{\n+  testSimple();\n+  testCategory();\n+  testCategoryInherited();\n+  return(0);\n+}\n+\n+/* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */"}, {"sha": "6ef710b51fff5863fbdc05c12903fdd0d00f226b", "filename": "gcc/testsuite/objc.dg/desig-init-1.m", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2Ftestsuite%2Fobjc.dg%2Fdesig-init-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2Ftestsuite%2Fobjc.dg%2Fdesig-init-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fdesig-init-1.m?ref=3a3589b4ba5e2d88874f8178f8808f784860fca5", "patch": "@@ -4,7 +4,8 @@\n /* { dg-options \"-std=gnu99\" } */\n /* { dg-do run } */\n \n-#include <stdio.h>           \n+#include <stdio.h> \n+#include <stdlib.h>\n #include <objc/objc.h>\n #include <objc/Object.h>\n \n@@ -18,19 +19,20 @@ @implementation Cls\n + (int) meth1 { return 45; }\n + (int) meth2 { return 21; }\n + (void) doTests {\n-  int arr[6] = { \n+  int arr[7] = { \n     0, \n     [Cls meth1], \n     [2 + 1] = 3, \n-    [2 * 2 ... 5] = (size_t)[0 meth2], /* { dg-warning \"invalid receiver type\" } */ \n-       /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 25 } */\n-       /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 25 } */\n-       /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 25 } */\n-    [2] [Cls meth2]\n+    [2 * 2 ... 5] = (size_t)[0 meth4], /* { dg-warning \"invalid receiver type\" } */ \n+       /* { dg-warning \"no .\\\\-meth4. method found\" \"\" { target *-*-* } 26 } */\n+    [2] [Cls meth2],\n+    /* Since invalid receivers are treated as 'id' for purposes of message\n+       lookup, we _should_ find a meth2 to call below.  */\n+    [6] = (int)[0 meth2] /* { dg-warning \"invalid receiver type\" } */\n   };\n \n   if (arr[0] != 0 || arr[1] != 45 || arr[2] != 21 || arr[3] != 3)\n-    abort (); /* { dg-warning \"implicit declaration\" } */\n+    abort ();\n \n   printf (\"%s\\n\", [super name]);\n   printf (\"%d %d %d %d %d %d\\n\", arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]);\n@@ -41,3 +43,7 @@ int main(void) {\n   [Cls doTests];\n   return 0;\n }\n+\n+/* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */"}, {"sha": "37677a1ccaa4df818084fb6b6263ebd1c6a24714", "filename": "gcc/testsuite/objc.dg/method-5.m", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-5.m?ref=3a3589b4ba5e2d88874f8178f8808f784860fca5", "patch": "@@ -9,10 +9,12 @@\n \n void foo(UnderSpecified *u, NotAClass *n) {\n   [n nonexistent_method];    /* { dg-warning \"invalid receiver type\" } */\n-       /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 11 } */\n-       /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 11 } */\n-       /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 11 } */\n+       /* { dg-warning \"no .\\\\-nonexistent_method. method found\" \"\" { target *-*-* } 11 } */\n   [NotAClass nonexistent_method]; /* { dg-error \".NotAClass. is not an Objective\\\\-C class name or alias\" } */\n   [u nonexistent_method]; /* { dg-warning \".UnderSpecified. may not respond to .\\\\-nonexistent_method.\" } */\n   [UnderSpecified nonexistent_method]; /* { dg-warning \".UnderSpecified. may not respond to .\\\\+nonexistent_method.\" } */\n }\n+\n+/* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */"}, {"sha": "a4c1323fac8bb78cd274f163883707bd84176697", "filename": "gcc/testsuite/objc.dg/method-6.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-6.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-6.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-6.m?ref=3a3589b4ba5e2d88874f8178f8808f784860fca5", "patch": "@@ -22,7 +22,7 @@ void foo(void) {\n        /* { dg-warning \"using .\\\\-\\\\(unsigned( int)?\\\\)port.\" \"\" { target *-*-* } 9 } */\n        /* { dg-warning \"also found .\\\\+\\\\(Protocol \\\\*\\\\)port.\" \"\" { target *-*-* } 14 } */\n \n-  [receiver starboard];  /* { dg-warning \".Class. may not respond to .\\\\+starboard.\" } */\n+  [receiver starboard];  /* { dg-warning \"no .\\\\+starboard. method found\" } */\n        /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 25 } */\n        /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 25 } */\n        /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 25 } */"}, {"sha": "99dcbc567737d276d16b1f0f92a9ccc1e3671bc8", "filename": "gcc/testsuite/objc.dg/proto-hier-1.m", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-hier-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-hier-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-hier-1.m?ref=3a3589b4ba5e2d88874f8178f8808f784860fca5", "patch": "@@ -48,9 +48,11 @@ int foo(void) {\n   id<Booing, Fooing> stupidVar;\n   [stupidVar boo];\n   [stupidVar foo];\n-  [stupidVar anotherMsg]; /* { dg-warning \".\\-anotherMsg. not implemented by protocol\" } */\n-       /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 51 } */\n-       /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 51 } */\n-       /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 51 } */\n+  [stupidVar anotherMsg]; /* { dg-warning \".\\\\-anotherMsg. not found in protocol\" } */\n+       /* { dg-warning \"no .\\\\-anotherMsg. method found\" \"\" { target *-*-* } 51 } */\n   return 0;\n }\n+\n+/* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */"}, {"sha": "819cf4a5089b15b117580fa6e918dfa8a444f99b", "filename": "gcc/testsuite/objc.dg/proto-hier-2.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-hier-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-hier-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-hier-2.m?ref=3a3589b4ba5e2d88874f8178f8808f784860fca5", "patch": "@@ -41,7 +41,7 @@ -(id) my_method: (int) i\n   id one = [self anotherDataSource];\n \n   i = i - 1;\n-  // Do not issue warning about my_method not implemented by protocol\n+  // Do not issue warning about my_method not found in protocol\n   return [(one ? [self mainDataSource] : one) my_method:i];\n }\n "}, {"sha": "2f7eb9861400dd2d08f18044f0735d39096828a8", "filename": "gcc/testsuite/objc.dg/proto-lossage-1.m", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-1.m?ref=3a3589b4ba5e2d88874f8178f8808f784860fca5", "patch": "@@ -35,14 +35,10 @@ @implementation Foo\n   return (id <NSObject>)plate1; /* { dg-bogus \"does not conform\" } */\n }\n - (int) getValue {\n-  int i = [plate1 someValue];   /* { dg-warning \".\\\\-someValue. not implemented by protocol\\\\(s\\\\)\" } */\n-     /* { dg-warning \"\\\\(Messages without a matching method signature\" \"\" { target *-*-* } 38 } */\n-     /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 38 } */\n-     /* { dg-warning \".\\.\\.\\.. as arguments\\.\\\\)\" \"\" { target *-*-* } 38 } */\n-     /* { dg-warning \"initialization makes integer from pointer without a cast\" \"\" { target *-*-* } 38 } */\n+  int i = [plate1 someValue];   /* { dg-warning \".\\\\-someValue. not found in protocol\\\\(s\\\\)\" } */\n \n-  int j = [(id <NSObject>)plate1 someValue];  /* { dg-bogus \"not implemented by protocol\" } */\n-  int k = [(id)plate1 someValue]; /* { dg-bogus \"not implemented by protocol\" } */\n+  int j = [(id <NSObject>)plate1 someValue];  /* { dg-bogus \"not found in protocol\" } */\n+  int k = [(id)plate1 someValue]; /* { dg-bogus \"not found in protocol\" } */\n   return i + j + k;\n }\n @end"}, {"sha": "8df169da4ee5e7ab344465491a182537c7eaed69", "filename": "gcc/testsuite/objc.dg/proto-lossage-4.m", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a3589b4ba5e2d88874f8178f8808f784860fca5/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-4.m?ref=3a3589b4ba5e2d88874f8178f8808f784860fca5", "patch": "@@ -19,33 +19,34 @@ long foo(void) {\n   Obj *objrcvr;\n   Obj <Proto> *objrcvr2;\n \n-  receiver += [receiver someValue]; /* { dg-warning \"invalid receiver type .long int.\" } */\n-/* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 22 } */\n-/* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 22 } */\n-/* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 22 } */\n-/* { dg-warning \"assignment makes integer from pointer without a cast\" \"\" { target *-*-* } 22 } */\n+  /* NB: Since 'receiver' is an invalid ObjC message receiver, the compiler\n+     should warn but then search for methods as if we were messaging 'id'.  */\n \n+  receiver += [receiver someValue]; /* { dg-warning \"invalid receiver type .long int.\" } */\n   receiver += [receiver anotherValue]; /* { dg-warning \"invalid receiver type .long int.\" } */\n-/* { dg-warning \"assignment makes integer from pointer without a cast\" \"\" { target *-*-* } 28 } */\n-  \n+\n   receiver += [(Obj *)receiver someValue]; /* { dg-warning \".Obj. may not respond to .\\\\-someValue.\" } */\n-/* { dg-warning \"assignment makes integer from pointer without a cast\" \"\" { target *-*-* } 31 } */\n+/* { dg-warning \"assignment makes integer from pointer without a cast\" \"\" { target *-*-* } 28 } */\n \n   receiver += [(Obj *)receiver anotherValue];\n   receiver += [(Obj <Proto> *)receiver someValue];\n   receiver += [(Obj <Proto> *)receiver anotherValue];\n   receiver += [objrcvr someValue]; /* { dg-warning \".Obj. may not respond to .\\\\-someValue.\" } */\n-/* { dg-warning \"assignment makes integer from pointer without a cast\" \"\" { target *-*-* } 37 } */\n+/* { dg-warning \"assignment makes integer from pointer without a cast\" \"\" { target *-*-* } 34 } */\n \n   receiver += [objrcvr anotherValue];\n   receiver += [(Obj <Proto> *)objrcvr someValue];\n   receiver += [(Obj <Proto> *)objrcvr anotherValue];\n   receiver += [objrcvr2 someValue];\n   receiver += [objrcvr2 anotherValue];\n   receiver += [(Obj *)objrcvr2 someValue]; /* { dg-warning \".Obj. may not respond to .\\\\-someValue.\" } */\n-/* { dg-warning \"assignment makes integer from pointer without a cast\" \"\" { target *-*-* } 45 } */\n+/* { dg-warning \"assignment makes integer from pointer without a cast\" \"\" { target *-*-* } 42 } */\n \n   receiver += [(Obj *)objrcvr2 anotherValue];\n \n   return receiver;\n }\n+\n+/* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */"}]}