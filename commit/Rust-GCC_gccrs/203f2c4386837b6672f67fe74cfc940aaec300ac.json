{"sha": "203f2c4386837b6672f67fe74cfc940aaec300ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAzZjJjNDM4NjgzN2I2NjcyZjY3ZmU3NGNmYzk0MGFhZWMzMDBhYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-06-25T17:17:10Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-06-25T17:17:10Z"}, "message": "hash-map-traits.h (default_hashmap_traits): Delete.\n\ngcc/\n\t* hash-map-traits.h (default_hashmap_traits): Delete.\n\nFrom-SVN: r224976", "tree": {"sha": "58fed5c3ac1790572383f033a236acd07c138c69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58fed5c3ac1790572383f033a236acd07c138c69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/203f2c4386837b6672f67fe74cfc940aaec300ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/203f2c4386837b6672f67fe74cfc940aaec300ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/203f2c4386837b6672f67fe74cfc940aaec300ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/203f2c4386837b6672f67fe74cfc940aaec300ac/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0ef08bc588a22e4a98adfc92dd63e753ebc27d3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ef08bc588a22e4a98adfc92dd63e753ebc27d3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ef08bc588a22e4a98adfc92dd63e753ebc27d3d"}], "stats": {"total": 82, "additions": 4, "deletions": 78}, "files": [{"sha": "216a77ed0f4d7c55dd552ac44e233eb5cb1e1efe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203f2c4386837b6672f67fe74cfc940aaec300ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203f2c4386837b6672f67fe74cfc940aaec300ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=203f2c4386837b6672f67fe74cfc940aaec300ac", "patch": "@@ -1,3 +1,7 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* hash-map-traits.h (default_hashmap_traits): Delete.\n+\n 2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* hash-map-traits.h (unbounded_hashmap_traits): New class."}, {"sha": "9cdbfbede2dfeccf119c6f1f083cf04110e469e9", "filename": "gcc/hash-map-traits.h", "status": "modified", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203f2c4386837b6672f67fe74cfc940aaec300ac/gcc%2Fhash-map-traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203f2c4386837b6672f67fe74cfc940aaec300ac/gcc%2Fhash-map-traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-map-traits.h?ref=203f2c4386837b6672f67fe74cfc940aaec300ac", "patch": "@@ -25,84 +25,6 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"hash-traits.h\"\n \n-/* implement default behavior for traits when types allow it.  */\n-\n-struct default_hashmap_traits\n-{\n-  /* Hashes the passed in key.  */\n-\n-  template<typename T>\n-  static hashval_t\n-  hash (T *p)\n-    {\n-      return uintptr_t (p) >> 3;\n-    }\n-\n-  /* If the value converts to hashval_t just use it.  */\n-\n-  template<typename T> static hashval_t hash (T v) { return v; }\n-\n-  /* Return true if the two keys passed as arguments are equal.  */\n-\n-  template<typename T>\n-  static bool\n-  equal_keys (const T &a, const T &b)\n-    {\n-      return a == b;\n-    }\n-\n-  /* Called to dispose of the key and value before marking the entry as\n-     deleted.  */\n-\n-  template<typename T> static void remove (T &v) { v.~T (); }\n-\n-  /* Mark the passed in entry as being deleted.  */\n-\n-  template<typename T>\n-  static void\n-  mark_deleted (T &e)\n-    {\n-      mark_key_deleted (e.m_key);\n-    }\n-\n-  /* Mark the passed in entry as being empty.  */\n-\n-  template<typename T>\n-  static void\n-  mark_empty (T &e)\n-    {\n-      mark_key_empty (e.m_key);\n-    }\n-\n-  /* Return true if the passed in entry is marked as deleted.  */\n-\n-  template<typename T>\n-  static bool\n-  is_deleted (T &e)\n-    {\n-      return e.m_key == (void *)1;\n-    }\n-\n-  /* Return true if the passed in entry is marked as empty.  */\n-\n-  template<typename T> static bool is_empty (T &e) { return e.m_key == NULL; }\n-\n-private:\n-  template<typename T>\n-  static void\n-  mark_key_deleted (T *&k)\n-    {\n-      k = reinterpret_cast<T *> (1);\n-    }\n-\n-  template<typename T>\n-  static void\n-  mark_key_empty (T *&k)\n-    {\n-      k = static_cast<T *> (0);\n-    }\n-};\n-\n /* Implement hash_map traits for a key with hash traits H.  Empty and\n    deleted map entries are represented as empty and deleted keys.  */\n "}]}