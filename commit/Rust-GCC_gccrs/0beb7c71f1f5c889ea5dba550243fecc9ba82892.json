{"sha": "0beb7c71f1f5c889ea5dba550243fecc9ba82892", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJlYjdjNzFmMWY1Yzg4OWVhNWRiYTU1MDI0M2ZlY2M5YmE4Mjg5Mg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2015-12-07T17:53:09Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-12-07T17:53:09Z"}, "message": "nvptx.c (write_return): New.\n\n\t* config//nvptx/nvptx.c (write_return): New.\n\t(write_fn_proto, nvptx_declare_function_name): Call it.\n\nFrom-SVN: r231375", "tree": {"sha": "e1abeb872bc3cbe6acac1b73135dcba73624ca5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1abeb872bc3cbe6acac1b73135dcba73624ca5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0beb7c71f1f5c889ea5dba550243fecc9ba82892", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0beb7c71f1f5c889ea5dba550243fecc9ba82892", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0beb7c71f1f5c889ea5dba550243fecc9ba82892", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0beb7c71f1f5c889ea5dba550243fecc9ba82892/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "66189108d3785a463d2d1d0341fa6198582d9fd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66189108d3785a463d2d1d0341fa6198582d9fd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66189108d3785a463d2d1d0341fa6198582d9fd2"}], "stats": {"total": 60, "additions": 35, "deletions": 25}, "files": [{"sha": "f843e4be54b4ee5aee9abc84f6f515e0e5e18037", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0beb7c71f1f5c889ea5dba550243fecc9ba82892/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0beb7c71f1f5c889ea5dba550243fecc9ba82892/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0beb7c71f1f5c889ea5dba550243fecc9ba82892", "patch": "@@ -1,3 +1,8 @@\n+2015-12-07  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* config//nvptx/nvptx.c (write_return): New.\n+\t(write_fn_proto, nvptx_declare_function_name): Call it.\n+\n 2015-12-07  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/61886"}, {"sha": "5a32adeb53a38ea6ec345a43b9fbe3f68d6bae9e", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 30, "deletions": 25, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0beb7c71f1f5c889ea5dba550243fecc9ba82892/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0beb7c71f1f5c889ea5dba550243fecc9ba82892/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=0beb7c71f1f5c889ea5dba550243fecc9ba82892", "patch": "@@ -452,6 +452,33 @@ write_one_arg (std::stringstream &s, int for_reg, int argno,\n   return argno + 1;\n }\n \n+static bool\n+write_return (std::stringstream &s, bool for_proto, tree type,\n+\t      machine_mode ret_mode)\n+{\n+  machine_mode mode = TYPE_MODE (type);\n+  bool return_in_mem = mode != VOIDmode && !RETURN_IN_REG_P (mode);\n+\n+  mode = arg_promotion (mode);\n+  if (for_proto)\n+    {\n+      if (!return_in_mem && mode != VOIDmode)\n+\ts << \"(.param\" << nvptx_ptx_type_from_mode (mode, false)\n+\t  << \" %out_retval) \";\n+    }\n+  else\n+    {\n+      /* Prologue.  C++11 ABI causes us to return a reference to the\n+\t passed in pointer for return_in_mem.  */\n+      ret_mode = arg_promotion (ret_mode);\n+      if (ret_mode != VOIDmode)\n+\ts << \"\\t.reg\" << nvptx_ptx_type_from_mode (ret_mode, false)\n+\t  << \" %retval;\\n\";\n+    }\n+\n+  return return_in_mem;\n+}\n+\n /* Look for attributes in ATTRS that would indicate we must write a function\n    as a .entry kernel rather than a .func.  Return true if one is found.  */\n \n@@ -520,19 +547,7 @@ write_fn_proto (std::stringstream &s, bool is_defn,\n   tree result_type = TREE_TYPE (fntype);\n \n   /* Declare the result.  */\n-  bool return_in_mem = false;\n-  if (TYPE_MODE (result_type) != VOIDmode)\n-    {\n-      machine_mode mode = TYPE_MODE (result_type);\n-      if (!RETURN_IN_REG_P (mode))\n-\treturn_in_mem = true;\n-      else\n-\t{\n-\t  mode = arg_promotion (mode);\n-\t  s << \"(.param\" << nvptx_ptx_type_from_mode (mode, false)\n-\t    << \" %out_retval) \";\n-\t}\n-    }\n+  bool return_in_mem = write_return (s, true, result_type, VOIDmode);\n \n   s << name;\n \n@@ -725,8 +740,8 @@ nvptx_declare_function_name (FILE *file, const char *name, const_tree decl)\n   write_fn_proto (s, true, name, decl);\n   s << \"{\\n\";\n \n-  bool return_in_mem = (TYPE_MODE (result_type) != VOIDmode\n-\t\t\t&& !RETURN_IN_REG_P (TYPE_MODE (result_type)));\n+  bool return_in_mem = write_return (s, false, result_type,\n+\t\t\t\t     (machine_mode)cfun->machine->ret_reg_mode);\n   if (return_in_mem)\n     argno = write_one_arg (s, 0, argno, ptr_type_node, true);\n   \n@@ -755,16 +770,6 @@ nvptx_declare_function_name (FILE *file, const char *name, const_tree decl)\n \n   fprintf (file, \"%s\", s.str().c_str());\n \n-  /* C++11 ABI causes us to return a reference to the passed in\n-     pointer for return_in_mem.  */\n-  if (cfun->machine->ret_reg_mode != VOIDmode)\n-    {\n-      machine_mode mode = arg_promotion\n-\t((machine_mode)cfun->machine->ret_reg_mode);\n-      fprintf (file, \"\\t.reg%s %%retval;\\n\",\n-\t       nvptx_ptx_type_from_mode (mode, false));\n-    }\n-\n   fprintf (file, \"\\t.reg.u%d %s;\\n\", GET_MODE_BITSIZE (Pmode),\n \t   reg_names[OUTGOING_STATIC_CHAIN_REGNUM]);\n   "}]}