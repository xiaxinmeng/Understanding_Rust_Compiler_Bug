{"sha": "4a62f44193ab95288311d162c45dbd31a7930281", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE2MmY0NDE5M2FiOTUyODgzMTFkMTYyYzQ1ZGJkMzFhNzkzMDI4MQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2019-01-03T12:23:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-01-03T12:23:27Z"}, "message": "re PR lto/85574 (LTO bootstapped binaries differ)\n\n2019-01-03  Jan Hubicka  <hubicka@ucw.cz>\n\n\tPR tree-optimization/85574\n\t* tree-ssa-uncprop.c (struct equiv_hash_elt): Remove unused\n\tstructure.\n\t(struct ssa_equip_hash_traits): Declare.\n\t(val_ssa_equiv): Use custom hash traits using operand_equal_p.\n\nFrom-SVN: r267552", "tree": {"sha": "dd8b2512a93699bd03a1ba546488b7b898d2365f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd8b2512a93699bd03a1ba546488b7b898d2365f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a62f44193ab95288311d162c45dbd31a7930281", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a62f44193ab95288311d162c45dbd31a7930281", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a62f44193ab95288311d162c45dbd31a7930281", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a62f44193ab95288311d162c45dbd31a7930281/comments", "author": null, "committer": null, "parents": [{"sha": "5227609c33e649e337c44653039fff9aacc84e2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5227609c33e649e337c44653039fff9aacc84e2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5227609c33e649e337c44653039fff9aacc84e2f"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "1cf696b3503d6f52c69371d76827c5af4cb54146", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a62f44193ab95288311d162c45dbd31a7930281/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a62f44193ab95288311d162c45dbd31a7930281/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a62f44193ab95288311d162c45dbd31a7930281", "patch": "@@ -1,3 +1,11 @@\n+2019-01-03  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR tree-optimization/85574\n+\t* tree-ssa-uncprop.c (struct equiv_hash_elt): Remove unused\n+\tstructure.\n+\t(struct ssa_equip_hash_traits): Declare.\n+\t(val_ssa_equiv): Use custom hash traits using operand_equal_p.\n+\n 2019-01-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/88644"}, {"sha": "b9b05ed1a2c2152e99b210535aac094e5abf1b14", "filename": "gcc/tree-ssa-uncprop.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a62f44193ab95288311d162c45dbd31a7930281/gcc%2Ftree-ssa-uncprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a62f44193ab95288311d162c45dbd31a7930281/gcc%2Ftree-ssa-uncprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uncprop.c?ref=4a62f44193ab95288311d162c45dbd31a7930281", "patch": "@@ -268,21 +268,24 @@ associate_equivalences_with_edges (void)\n    so with each value we have a list of SSA_NAMEs that have the\n    same value.  */\n \n-\n-/* Main structure for recording equivalences into our hash table.  */\n-struct equiv_hash_elt\n+/* Traits for the hash_map to record the value to SSA name equivalences\n+   mapping.  */\n+struct ssa_equip_hash_traits : default_hash_traits <tree>\n {\n-  /* The value/key of this entry.  */\n-  tree value;\n-\n-  /* List of SSA_NAMEs which have the same value/key.  */\n-  vec<tree> equivalences;\n+  static inline hashval_t hash (value_type value)\n+    { return iterative_hash_expr (value, 0); }\n+  static inline bool equal (value_type existing, value_type candidate)\n+    { return operand_equal_p (existing, candidate, 0); }\n };\n \n+typedef hash_map<tree, auto_vec<tree>,\n+\t\t simple_hashmap_traits <ssa_equip_hash_traits,\n+\t\t\t\t\tauto_vec <tree> > > val_ssa_equiv_t;\n+\n /* Global hash table implementing a mapping from invariant values\n    to a list of SSA_NAMEs which have the same value.  We might be\n    able to reuse tree-vn for this code.  */\n-static hash_map<tree, auto_vec<tree> > *val_ssa_equiv;\n+val_ssa_equiv_t *val_ssa_equiv;\n \n static void uncprop_into_successor_phis (basic_block);\n \n@@ -476,7 +479,7 @@ pass_uncprop::execute (function *fun)\n   associate_equivalences_with_edges ();\n \n   /* Create our global data structures.  */\n-  val_ssa_equiv = new hash_map<tree, auto_vec<tree> > (1024);\n+  val_ssa_equiv = new val_ssa_equiv_t (1024);\n \n   /* We're going to do a dominator walk, so ensure that we have\n      dominance information.  */"}]}