{"sha": "d07cae9e4b4402a19c5a1371c09d899002362d5d", "node_id": "C_kwDOANBUbNoAKGQwN2NhZTllNGI0NDAyYTE5YzVhMTM3MWMwOWQ4OTkwMDIzNjJkNWQ", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-10-21T12:01:43Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-12-04T21:00:44Z"}, "message": "Get rid of make builtin macro\n\nThis macro is a mess and a helper method is much better for this case.", "tree": {"sha": "b293b2b25fea17f768a31579acbe4c6f83a74cb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b293b2b25fea17f768a31579acbe4c6f83a74cb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d07cae9e4b4402a19c5a1371c09d899002362d5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d07cae9e4b4402a19c5a1371c09d899002362d5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d07cae9e4b4402a19c5a1371c09d899002362d5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d07cae9e4b4402a19c5a1371c09d899002362d5d/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22329b03a6e0a3381d907745205012cf290b3c2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22329b03a6e0a3381d907745205012cf290b3c2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22329b03a6e0a3381d907745205012cf290b3c2a"}], "stats": {"total": 94, "additions": 46, "deletions": 48}, "files": [{"sha": "ed7cc769cfbf2723d737e6d74409ab93b9811ae5", "filename": "gcc/rust/resolve/rust-name-resolver.cc", "status": "modified", "additions": 42, "deletions": 45, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07cae9e4b4402a19c5a1371c09d899002362d5d/gcc%2Frust%2Fresolve%2Frust-name-resolver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07cae9e4b4402a19c5a1371c09d899002362d5d/gcc%2Frust%2Fresolve%2Frust-name-resolver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.cc?ref=d07cae9e4b4402a19c5a1371c09d899002362d5d", "patch": "@@ -19,40 +19,17 @@\n #include \"rust-name-resolver.h\"\n #include \"rust-ast-full.h\"\n \n-#define MKBUILTIN_TYPE(_X, _R, _TY)                                            \\\n-  do                                                                           \\\n-    {                                                                          \\\n-      AST::PathIdentSegment seg (_X, Linemap::predeclared_location ());        \\\n-      auto typePath = ::std::unique_ptr<AST::TypePathSegment> (                \\\n-\tnew AST::TypePathSegment (::std::move (seg), false,                    \\\n-\t\t\t\t  Linemap::predeclared_location ()));          \\\n-      ::std::vector< ::std::unique_ptr<AST::TypePathSegment> > segs;           \\\n-      segs.push_back (::std::move (typePath));                                 \\\n-      auto builtin_type                                                        \\\n-\t= new AST::TypePath (::std::move (segs),                               \\\n-\t\t\t     Linemap::predeclared_location (), false);         \\\n-      _R.push_back (builtin_type);                                             \\\n-      tyctx->insert_builtin (_TY->get_ref (), builtin_type->get_node_id (),    \\\n-\t\t\t     _TY);                                             \\\n-      mappings->insert_node_to_hir (builtin_type->get_node_id (),              \\\n-\t\t\t\t    _TY->get_ref ());                          \\\n-      mappings->insert_canonical_path (                                        \\\n-\tbuiltin_type->get_node_id (),                                          \\\n-\tCanonicalPath::new_seg (builtin_type->get_node_id (), _X));            \\\n-    }                                                                          \\\n-  while (0)\n-\n namespace Rust {\n namespace Resolver {\n \n Rib::Rib (CrateNum crateNum, NodeId node_id)\n-  : crate_num (crateNum), node_id (node_id),\n-    mappings (Analysis::Mappings::get ())\n+  : crate_num (crateNum), node_id (node_id)\n {}\n \n void\n Rib::insert_name (\n   const CanonicalPath &path, NodeId id, Location locus, bool shadow,\n+\n   std::function<void (const CanonicalPath &, NodeId, Location)> dup_cb)\n {\n   auto it = path_mappings.find (path);\n@@ -69,8 +46,8 @@ Rib::insert_name (\n     }\n \n   path_mappings[path] = id;\n-  reverse_path_mappings.insert (std::pair<NodeId, CanonicalPath> (id, path));\n-  decls_within_rib.insert (std::pair<NodeId, Location> (id, locus));\n+  reverse_path_mappings.insert ({id, path});\n+  decls_within_rib.insert ({id, locus});\n   references[id] = {};\n }\n \n@@ -387,24 +364,24 @@ Resolver::generate_builtins ()\n   auto str = new TyTy::StrType (mappings->get_next_hir_id ());\n   auto never = new TyTy::NeverType (mappings->get_next_hir_id ());\n \n-  MKBUILTIN_TYPE (\"u8\", builtins, u8);\n-  MKBUILTIN_TYPE (\"u16\", builtins, u16);\n-  MKBUILTIN_TYPE (\"u32\", builtins, u32);\n-  MKBUILTIN_TYPE (\"u64\", builtins, u64);\n-  MKBUILTIN_TYPE (\"u128\", builtins, u128);\n-  MKBUILTIN_TYPE (\"i8\", builtins, i8);\n-  MKBUILTIN_TYPE (\"i16\", builtins, i16);\n-  MKBUILTIN_TYPE (\"i32\", builtins, i32);\n-  MKBUILTIN_TYPE (\"i64\", builtins, i64);\n-  MKBUILTIN_TYPE (\"i128\", builtins, i128);\n-  MKBUILTIN_TYPE (\"bool\", builtins, rbool);\n-  MKBUILTIN_TYPE (\"f32\", builtins, f32);\n-  MKBUILTIN_TYPE (\"f64\", builtins, f64);\n-  MKBUILTIN_TYPE (\"usize\", builtins, usize);\n-  MKBUILTIN_TYPE (\"isize\", builtins, isize);\n-  MKBUILTIN_TYPE (\"char\", builtins, char_tyty);\n-  MKBUILTIN_TYPE (\"str\", builtins, str);\n-  MKBUILTIN_TYPE (\"!\", builtins, never);\n+  setup_builtin (\"u8\", u8);\n+  setup_builtin (\"u16\", u16);\n+  setup_builtin (\"u32\", u32);\n+  setup_builtin (\"u64\", u64);\n+  setup_builtin (\"u128\", u128);\n+  setup_builtin (\"i8\", i8);\n+  setup_builtin (\"i16\", i16);\n+  setup_builtin (\"i32\", i32);\n+  setup_builtin (\"i64\", i64);\n+  setup_builtin (\"i128\", i128);\n+  setup_builtin (\"bool\", rbool);\n+  setup_builtin (\"f32\", f32);\n+  setup_builtin (\"f64\", f64);\n+  setup_builtin (\"usize\", usize);\n+  setup_builtin (\"isize\", isize);\n+  setup_builtin (\"char\", char_tyty);\n+  setup_builtin (\"str\", str);\n+  setup_builtin (\"!\", never);\n \n   // unit type ()\n   TyTy::TupleType *unit_tyty\n@@ -418,6 +395,26 @@ Resolver::generate_builtins ()\n   set_unit_type_node_id (unit_type->get_node_id ());\n }\n \n+void\n+Resolver::setup_builtin (const std::string &name, TyTy::BaseType *tyty)\n+{\n+  AST::PathIdentSegment seg (name, Linemap::predeclared_location ());\n+  auto typePath = ::std::unique_ptr<AST::TypePathSegment> (\n+    new AST::TypePathSegment (::std::move (seg), false,\n+\t\t\t      Linemap::predeclared_location ()));\n+  ::std::vector< ::std::unique_ptr<AST::TypePathSegment> > segs;\n+  segs.push_back (::std::move (typePath));\n+  auto builtin_type\n+    = new AST::TypePath (::std::move (segs), Linemap::predeclared_location (),\n+\t\t\t false);\n+  builtins.push_back (builtin_type);\n+  tyctx->insert_builtin (tyty->get_ref (), builtin_type->get_node_id (), tyty);\n+  mappings->insert_node_to_hir (builtin_type->get_node_id (), tyty->get_ref ());\n+  mappings->insert_canonical_path (\n+    builtin_type->get_node_id (),\n+    CanonicalPath::new_seg (builtin_type->get_node_id (), name));\n+}\n+\n void\n Resolver::insert_resolved_name (NodeId refId, NodeId defId)\n {"}, {"sha": "6c2e5fdcadc8b44ef5d5b9541c09e94fd063f9f6", "filename": "gcc/rust/resolve/rust-name-resolver.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07cae9e4b4402a19c5a1371c09d899002362d5d/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07cae9e4b4402a19c5a1371c09d899002362d5d/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.h?ref=d07cae9e4b4402a19c5a1371c09d899002362d5d", "patch": "@@ -30,8 +30,9 @@ namespace Resolver {\n class Rib\n {\n public:\n-  // Rust uses local_def_ids assigned by def_collector on the AST\n-  // lets use NodeId instead\n+  // FIXME\n+  // Rust uses local_def_ids assigned by def_collector on the AST. Consider\n+  // moving to a local-def-id\n   Rib (CrateNum crateNum, NodeId node_id);\n \n   // this takes the relative paths of items within a compilation unit for lookup\n@@ -59,7 +60,6 @@ class Rib\n   std::map<NodeId, CanonicalPath> reverse_path_mappings;\n   std::map<NodeId, Location> decls_within_rib;\n   std::map<NodeId, std::set<NodeId>> references;\n-  Analysis::Mappings *mappings;\n };\n \n class Scope\n@@ -172,6 +172,7 @@ class Resolver\n   Resolver ();\n \n   void generate_builtins ();\n+  void setup_builtin (const std::string &name, TyTy::BaseType *tyty);\n \n   Analysis::Mappings *mappings;\n   TypeCheckContext *tyctx;"}]}