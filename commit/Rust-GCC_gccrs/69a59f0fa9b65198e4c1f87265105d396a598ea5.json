{"sha": "69a59f0fa9b65198e4c1f87265105d396a598ea5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjlhNTlmMGZhOWI2NTE5OGU0YzFmODcyNjUxMDVkMzk2YTU5OGVhNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2013-09-09T13:07:02Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2013-09-09T13:07:02Z"}, "message": "gcc/\n\t* combine.c (simplify_set, expand_field_assignment, extract_left_shift)\n\t(force_to_mode, simplify_shift_const_1, simplify_comparison):\n\tUse gen_int_mode with the mode of the associated simplify_* call.\n\t* explow.c (probe_stack_range, anti_adjust_stack_and_probe): Likewise.\n\t* expmed.c (expand_shift_1): Likewise.\n\t* function.c (instantiate_virtual_regs_in_insn): Likewise.\n\t* loop-iv.c (iv_number_of_iterations): Likewise.\n\t* loop-unroll.c (unroll_loop_runtime_iterations): Likewise.\n\t* simplify-rtx.c (simplify_binary_operation_1): Likewise.\n\nFrom-SVN: r202393", "tree": {"sha": "a5201ad7e75918350ccb6467b3fc9ff8b667c680", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5201ad7e75918350ccb6467b3fc9ff8b667c680"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69a59f0fa9b65198e4c1f87265105d396a598ea5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69a59f0fa9b65198e4c1f87265105d396a598ea5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69a59f0fa9b65198e4c1f87265105d396a598ea5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69a59f0fa9b65198e4c1f87265105d396a598ea5/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2f1cd2ebd65eae6d87332c0bcd5d0e840c886cf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f1cd2ebd65eae6d87332c0bcd5d0e840c886cf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f1cd2ebd65eae6d87332c0bcd5d0e840c886cf3"}], "stats": {"total": 119, "additions": 69, "deletions": 50}, "files": [{"sha": "76b7ca930eac8e2175a830d849aa0523da0b5fe6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69a59f0fa9b65198e4c1f87265105d396a598ea5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69a59f0fa9b65198e4c1f87265105d396a598ea5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69a59f0fa9b65198e4c1f87265105d396a598ea5", "patch": "@@ -1,3 +1,15 @@\n+2013-09-09  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* combine.c (simplify_set, expand_field_assignment, extract_left_shift)\n+\t(force_to_mode, simplify_shift_const_1, simplify_comparison):\n+\tUse gen_int_mode with the mode of the associated simplify_* call.\n+\t* explow.c (probe_stack_range, anti_adjust_stack_and_probe): Likewise.\n+\t* expmed.c (expand_shift_1): Likewise.\n+\t* function.c (instantiate_virtual_regs_in_insn): Likewise.\n+\t* loop-iv.c (iv_number_of_iterations): Likewise.\n+\t* loop-unroll.c (unroll_loop_runtime_iterations): Likewise.\n+\t* simplify-rtx.c (simplify_binary_operation_1): Likewise.\n+\n 2013-09-09  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* asan.c (asan_clear_shadow): Use gen_int_mode with the mode"}, {"sha": "335d3ddd6cd4b31ed27df625651a450cffd22775", "filename": "gcc/combine.c", "status": "modified", "additions": 33, "deletions": 30, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69a59f0fa9b65198e4c1f87265105d396a598ea5/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69a59f0fa9b65198e4c1f87265105d396a598ea5/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=69a59f0fa9b65198e4c1f87265105d396a598ea5", "patch": "@@ -6374,8 +6374,9 @@ simplify_set (rtx x)\n \t\t  *cc_use = old_cc_use;\n \t\t  other_changed = 0;\n \n-\t\t  op0 = simplify_gen_binary (XOR, GET_MODE (op0),\n-\t\t\t\t\t     op0, GEN_INT (mask));\n+\t\t  op0 = simplify_gen_binary (XOR, GET_MODE (op0), op0,\n+\t\t\t\t\t     gen_int_mode (mask,\n+\t\t\t\t\t\t\t   GET_MODE (op0)));\n \t\t}\n \t    }\n \t}\n@@ -6897,11 +6898,13 @@ expand_field_assignment (const_rtx x)\n \t\t/* If position is ADJUST - X, new position is X.  */\n \t\tpos = XEXP (pos, 0);\n \t      else\n-\t\tpos = simplify_gen_binary (MINUS, GET_MODE (pos),\n-\t\t\t\t\t   GEN_INT (GET_MODE_PRECISION (\n-\t\t\t\t\t\t    GET_MODE (inner))\n-\t\t\t\t\t\t    - len),\n-\t\t\t\t\t   pos);\n+\t\t{\n+\t\t  HOST_WIDE_INT prec = GET_MODE_PRECISION (GET_MODE (inner));\n+\t\t  pos = simplify_gen_binary (MINUS, GET_MODE (pos),\n+\t\t\t\t\t     gen_int_mode (prec - len,\n+\t\t\t\t\t\t\t   GET_MODE (pos)),\n+\t\t\t\t\t     pos);\n+\t\t}\n \t    }\n \t}\n \n@@ -6954,7 +6957,8 @@ expand_field_assignment (const_rtx x)\n       /* Now compute the equivalent expression.  Make a copy of INNER\n \t for the SET_DEST in case it is a MEM into which we will substitute;\n \t we don't want shared RTL in that case.  */\n-      mask = GEN_INT (((unsigned HOST_WIDE_INT) 1 << len) - 1);\n+      mask = gen_int_mode (((unsigned HOST_WIDE_INT) 1 << len) - 1,\n+\t\t\t   compute_mode);\n       cleared = simplify_gen_binary (AND, compute_mode,\n \t\t\t\t     simplify_gen_unary (NOT, compute_mode,\n \t\t\t\t       simplify_gen_binary (ASHIFT,\n@@ -7418,9 +7422,11 @@ extract_left_shift (rtx x, int count)\n \t  && (UINTVAL (XEXP (x, 1))\n \t      & ((((unsigned HOST_WIDE_INT) 1 << count)) - 1)) == 0\n \t  && (tem = extract_left_shift (XEXP (x, 0), count)) != 0)\n-\treturn simplify_gen_binary (code, mode, tem,\n-\t\t\t\t    GEN_INT (INTVAL (XEXP (x, 1)) >> count));\n-\n+\t{\n+\t  HOST_WIDE_INT val = INTVAL (XEXP (x, 1)) >> count;\n+\t  return simplify_gen_binary (code, mode, tem,\n+\t\t\t\t      gen_int_mode (val, mode));\n+\t}\n       break;\n \n     default:\n@@ -8128,17 +8134,10 @@ force_to_mode (rtx x, enum machine_mode mode, unsigned HOST_WIDE_INT mask,\n \t      unsigned HOST_WIDE_INT cval\n \t\t= UINTVAL (XEXP (x, 1))\n \t\t  | (GET_MODE_MASK (GET_MODE (x)) & ~mask);\n-\t      int width = GET_MODE_PRECISION (GET_MODE (x));\n \t      rtx y;\n \n-\t      /* If MODE is narrower than HOST_WIDE_INT and CVAL is a negative\n-\t\t number, sign extend it.  */\n-\t      if (width > 0 && width < HOST_BITS_PER_WIDE_INT\n-\t\t  && (cval & (HOST_WIDE_INT_1U << (width - 1))) != 0)\n-\t\tcval |= HOST_WIDE_INT_M1U << width;\n-\n-\t      y = simplify_gen_binary (AND, GET_MODE (x),\n-\t\t\t\t       XEXP (x, 0), GEN_INT (cval));\n+\t      y = simplify_gen_binary (AND, GET_MODE (x), XEXP (x, 0),\n+\t\t\t\t       gen_int_mode (cval, GET_MODE (x)));\n \t      if (set_src_cost (y, optimize_this_for_speed_p)\n \t          < set_src_cost (x, optimize_this_for_speed_p))\n \t\tx = y;\n@@ -8228,8 +8227,9 @@ force_to_mode (rtx x, enum machine_mode mode, unsigned HOST_WIDE_INT mask,\n \t  && (UINTVAL (XEXP (x, 1))\n \t      & ~nonzero_bits (XEXP (x, 0), GET_MODE (x))) == 0)\n \t{\n-\t  temp = GEN_INT ((INTVAL (XEXP (x, 1)) & mask)\n-\t\t\t  << INTVAL (XEXP (XEXP (x, 0), 1)));\n+\t  temp = gen_int_mode ((INTVAL (XEXP (x, 1)) & mask)\n+\t\t\t       << INTVAL (XEXP (XEXP (x, 0), 1)),\n+\t\t\t       GET_MODE (x));\n \t  temp = simplify_gen_binary (GET_CODE (x), GET_MODE (x),\n \t\t\t\t      XEXP (XEXP (x, 0), 0), temp);\n \t  x = simplify_gen_binary (LSHIFTRT, GET_MODE (x), temp,\n@@ -8443,7 +8443,8 @@ force_to_mode (rtx x, enum machine_mode mode, unsigned HOST_WIDE_INT mask,\n \t  && INTVAL (XEXP (x, 1)) >= 0)\n \t{\n \t  temp = simplify_binary_operation (code == ROTATE ? ROTATERT : ROTATE,\n-\t\t\t\t\t    GET_MODE (x), GEN_INT (mask),\n+\t\t\t\t\t    GET_MODE (x),\n+\t\t\t\t\t    gen_int_mode (mask, GET_MODE (x)),\n \t\t\t\t\t    XEXP (x, 1));\n \t  if (temp && CONST_INT_P (temp))\n \t    SUBST (XEXP (x, 0),\n@@ -10092,7 +10093,8 @@ simplify_shift_const_1 (enum rtx_code code, enum machine_mode result_mode,\n \t\t nonzero bits of the inner shift the same way the\n \t\t outer shift will.  */\n \n-\t      mask_rtx = GEN_INT (nonzero_bits (varop, GET_MODE (varop)));\n+\t      mask_rtx = gen_int_mode (nonzero_bits (varop, GET_MODE (varop)),\n+\t\t\t\t       result_mode);\n \n \t      mask_rtx\n \t\t= simplify_const_binary_operation (code, result_mode, mask_rtx,\n@@ -10193,9 +10195,10 @@ simplify_shift_const_1 (enum rtx_code code, enum machine_mode result_mode,\n \t      && !(code == ASHIFTRT && GET_CODE (varop) == XOR\n \t\t   && 0 > trunc_int_for_mode (INTVAL (XEXP (varop, 1)),\n \t\t\t\t\t      shift_mode))\n-\t      && (new_rtx = simplify_const_binary_operation (code, result_mode,\n-\t\t\t\t\t\t\t XEXP (varop, 1),\n-\t\t\t\t\t\t\t GEN_INT (count))) != 0\n+\t      && (new_rtx = simplify_const_binary_operation\n+\t\t  (code, result_mode,\n+\t\t   gen_int_mode (INTVAL (XEXP (varop, 1)), result_mode),\n+\t\t   GEN_INT (count))) != 0\n \t      && CONST_INT_P (new_rtx)\n \t      && merge_outer_ops (&outer_op, &outer_const, GET_CODE (varop),\n \t\t\t\t  INTVAL (new_rtx), result_mode, &complement_p))\n@@ -11946,11 +11949,11 @@ simplify_comparison (enum rtx_code code, rtx *pop0, rtx *pop1)\n \t  if (op1 == const0_rtx && (code == LT || code == GE)\n \t      && HWI_COMPUTABLE_MODE_P (mode))\n \t    {\n+\t      unsigned HOST_WIDE_INT sign\n+\t\t= (unsigned HOST_WIDE_INT) 1 << (GET_MODE_BITSIZE (mode) - 1);\n \t      op0 = simplify_gen_binary (AND, tmode,\n \t\t\t\t\t gen_lowpart (tmode, op0),\n-\t\t\t\t\t GEN_INT ((unsigned HOST_WIDE_INT) 1\n-\t\t\t\t\t\t  << (GET_MODE_BITSIZE (mode)\n-\t\t\t\t\t\t      - 1)));\n+\t\t\t\t\t gen_int_mode (sign, mode));\n \t      code = (code == LT) ? NE : EQ;\n \t      break;\n \t    }"}, {"sha": "f278e29b78e057ff8f2d6dc205c0c1bfb4e233d4", "filename": "gcc/explow.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69a59f0fa9b65198e4c1f87265105d396a598ea5/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69a59f0fa9b65198e4c1f87265105d396a598ea5/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=69a59f0fa9b65198e4c1f87265105d396a598ea5", "patch": "@@ -1636,7 +1636,8 @@ probe_stack_range (HOST_WIDE_INT first, rtx size)\n \n       /* ROUNDED_SIZE = SIZE & -PROBE_INTERVAL  */\n       rounded_size\n-\t= simplify_gen_binary (AND, Pmode, size, GEN_INT (-PROBE_INTERVAL));\n+\t= simplify_gen_binary (AND, Pmode, size,\n+\t\t\t       gen_int_mode (-PROBE_INTERVAL, Pmode));\n       rounded_size_op = force_operand (rounded_size, NULL_RTX);\n \n \n@@ -1780,7 +1781,8 @@ anti_adjust_stack_and_probe (rtx size, bool adjust_back)\n \n       /* ROUNDED_SIZE = SIZE & -PROBE_INTERVAL  */\n       rounded_size\n-\t= simplify_gen_binary (AND, Pmode, size, GEN_INT (-PROBE_INTERVAL));\n+\t= simplify_gen_binary (AND, Pmode, size,\n+\t\t\t       gen_int_mode (-PROBE_INTERVAL, Pmode));\n       rounded_size_op = force_operand (rounded_size, NULL_RTX);\n \n "}, {"sha": "747231f96df7bfc34d619660e21058c43edcd006", "filename": "gcc/expmed.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69a59f0fa9b65198e4c1f87265105d396a598ea5/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69a59f0fa9b65198e4c1f87265105d396a598ea5/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=69a59f0fa9b65198e4c1f87265105d396a598ea5", "patch": "@@ -2214,11 +2214,10 @@ expand_shift_1 (enum tree_code code, enum machine_mode mode, rtx shifted,\n \t\t  other_amount\n \t\t    = simplify_gen_unary (NEG, GET_MODE (op1),\n \t\t\t\t\t  op1, GET_MODE (op1));\n+\t\t  HOST_WIDE_INT mask = GET_MODE_PRECISION (mode) - 1;\n \t\t  other_amount\n-\t\t    = simplify_gen_binary (AND, GET_MODE (op1),\n-\t\t\t\t\t   other_amount,\n-\t\t\t\t\t   GEN_INT (GET_MODE_PRECISION (mode)\n-\t\t\t\t\t\t    - 1));\n+\t\t    = simplify_gen_binary (AND, GET_MODE (op1), other_amount,\n+\t\t\t\t\t   gen_int_mode (mask, GET_MODE (op1)));\n \t\t}\n \n \t      shifted = force_reg (mode, shifted);"}, {"sha": "c7d259c73ffc53f92ac3c7e5f1877a6862a4b297", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69a59f0fa9b65198e4c1f87265105d396a598ea5/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69a59f0fa9b65198e4c1f87265105d396a598ea5/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=69a59f0fa9b65198e4c1f87265105d396a598ea5", "patch": "@@ -1520,7 +1520,7 @@ instantiate_virtual_regs_in_insn (rtx insn)\n \n \t  for_each_rtx (&SET_SRC (set), instantiate_virtual_regs_in_rtx, NULL);\n \t  x = simplify_gen_binary (PLUS, GET_MODE (new_rtx), SET_SRC (set),\n-\t\t\t\t   GEN_INT (-offset));\n+\t\t\t\t   gen_int_mode (-offset, GET_MODE (new_rtx)));\n \t  x = force_operand (x, new_rtx);\n \t  if (x != new_rtx)\n \t    emit_move_insn (new_rtx, x);"}, {"sha": "9112e886318111aa77b9bd2cf6c57b9e24a8eaec", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69a59f0fa9b65198e4c1f87265105d396a598ea5/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69a59f0fa9b65198e4c1f87265105d396a598ea5/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=69a59f0fa9b65198e4c1f87265105d396a598ea5", "patch": "@@ -2672,11 +2672,11 @@ iv_number_of_iterations (struct loop *loop, rtx insn, rtx condition,\n       bound = GEN_INT (((unsigned HOST_WIDEST_INT) 1 << (size - 1 ) << 1) - 1);\n \n       tmp1 = lowpart_subreg (mode, iv1.base, comp_mode);\n-      tmp = simplify_gen_binary (UMOD, mode, tmp1, GEN_INT (d));\n+      tmp = simplify_gen_binary (UMOD, mode, tmp1, gen_int_mode (d, mode));\n       assumption = simplify_gen_relational (NE, SImode, mode, tmp, const0_rtx);\n       desc->infinite = alloc_EXPR_LIST (0, assumption, desc->infinite);\n \n-      tmp = simplify_gen_binary (UDIV, mode, tmp1, GEN_INT (d));\n+      tmp = simplify_gen_binary (UDIV, mode, tmp1, gen_int_mode (d, mode));\n       inv = inverse (s, size);\n       tmp = simplify_gen_binary (MULT, mode, tmp, gen_int_mode (inv, mode));\n       desc->niter_expr = simplify_gen_binary (AND, mode, tmp, bound);"}, {"sha": "95d58209224f6fd69567c2f66a6758c83a5d11b4", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69a59f0fa9b65198e4c1f87265105d396a598ea5/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69a59f0fa9b65198e4c1f87265105d396a598ea5/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=69a59f0fa9b65198e4c1f87265105d396a598ea5", "patch": "@@ -1309,7 +1309,7 @@ unroll_loop_runtime_iterations (struct loop *loop)\n   gcc_assert (!desc->const_iter);\n   desc->niter_expr =\n     simplify_gen_binary (UDIV, desc->mode, old_niter,\n-\t\t\t GEN_INT (max_unroll + 1));\n+\t\t\t gen_int_mode (max_unroll + 1, desc->mode));\n   loop->nb_iterations_upper_bound\n     = loop->nb_iterations_upper_bound.udiv (double_int::from_uhwi (max_unroll\n \t\t\t\t\t\t\t\t   + 1),"}, {"sha": "9ec41a5dbd4ae5b52249f417edc98d858f109c46", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69a59f0fa9b65198e4c1f87265105d396a598ea5/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69a59f0fa9b65198e4c1f87265105d396a598ea5/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=69a59f0fa9b65198e4c1f87265105d396a598ea5", "patch": "@@ -2818,12 +2818,13 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \t  && CONST_INT_P (XEXP (op0, 1))\n \t  && CONST_INT_P (op1)\n \t  && (UINTVAL (XEXP (op0, 1)) & UINTVAL (op1)) != 0)\n-\treturn simplify_gen_binary (IOR, mode,\n-\t\t\t\t    simplify_gen_binary\n-\t\t\t\t\t  (AND, mode, XEXP (op0, 0),\n-\t\t\t\t\t   GEN_INT (UINTVAL (XEXP (op0, 1))\n-\t\t\t\t\t\t    & ~UINTVAL (op1))),\n-\t\t\t\t    op1);\n+\t{\n+\t  rtx tmp = simplify_gen_binary (AND, mode, XEXP (op0, 0),\n+\t\t\t\t\t gen_int_mode (UINTVAL (XEXP (op0, 1))\n+\t\t\t\t\t\t       & ~UINTVAL (op1),\n+\t\t\t\t\t\t       mode));\n+\t  return simplify_gen_binary (IOR, mode, tmp, op1);\n+\t}\n \n       /* If OP0 is (ashiftrt (plus ...) C), it might actually be\n          a (sign_extend (plus ...)).  Then check if OP1 is a CONST_INT and\n@@ -2953,17 +2954,19 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \t      /* Try to simplify ~A&C | ~B&C.  */\n \t      if (na_c != NULL_RTX)\n \t\treturn simplify_gen_binary (IOR, mode, na_c,\n-\t\t\t\t\t    GEN_INT (~bval & cval));\n+\t\t\t\t\t    gen_int_mode (~bval & cval, mode));\n \t    }\n \t  else\n \t    {\n \t      /* If ~A&C is zero, simplify A&(~C&B) | ~B&C.  */\n \t      if (na_c == const0_rtx)\n \t\t{\n \t\t  rtx a_nc_b = simplify_gen_binary (AND, mode, a,\n-\t\t\t\t\t\t    GEN_INT (~cval & bval));\n+\t\t\t\t\t\t    gen_int_mode (~cval & bval,\n+\t\t\t\t\t\t\t\t  mode));\n \t\t  return simplify_gen_binary (IOR, mode, a_nc_b,\n-\t\t\t\t\t      GEN_INT (~bval & cval));\n+\t\t\t\t\t      gen_int_mode (~bval & cval,\n+\t\t\t\t\t\t\t    mode));\n \t\t}\n \t    }\n \t}\n@@ -3297,7 +3300,7 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n       if (CONST_INT_P (trueop1)\n \t  && exact_log2 (UINTVAL (trueop1)) > 0)\n \treturn simplify_gen_binary (AND, mode, op0,\n-\t\t\t\t    GEN_INT (INTVAL (op1) - 1));\n+\t\t\t\t    gen_int_mode (INTVAL (op1) - 1, mode));\n       break;\n \n     case MOD:"}]}