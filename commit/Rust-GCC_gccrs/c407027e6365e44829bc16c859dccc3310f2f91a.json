{"sha": "c407027e6365e44829bc16c859dccc3310f2f91a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQwNzAyN2U2MzY1ZTQ0ODI5YmMxNmM4NTlkY2NjMzMxMGYyZjkxYQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2014-06-12T08:20:35Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2014-06-12T08:20:35Z"}, "message": "re PR target/61443 ([avr] ICE when varargs argument is indirect addr-space access)\n\ngcc/\n\tPR target/61443\n\t* config/avr/avr.md (push<mode>1): Avoid (subreg(mem)) when\n\tloading from address spaces.\ngcc/testsuite/\n\tPR target/61443\n\t* gcc.target/avr/torture/pr61443.c: New test.\n\nFrom-SVN: r211491", "tree": {"sha": "287461e1db672a7aa8a6321e4a5793f7b954a5e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/287461e1db672a7aa8a6321e4a5793f7b954a5e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c407027e6365e44829bc16c859dccc3310f2f91a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c407027e6365e44829bc16c859dccc3310f2f91a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c407027e6365e44829bc16c859dccc3310f2f91a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c407027e6365e44829bc16c859dccc3310f2f91a/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c9e6fca817dab3861222e0c1bfbcf5c9c252830", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c9e6fca817dab3861222e0c1bfbcf5c9c252830", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c9e6fca817dab3861222e0c1bfbcf5c9c252830"}], "stats": {"total": 154, "additions": 154, "deletions": 0}, "files": [{"sha": "f0d6d26c9c877cbd7437c83d9dd94f98a60e815d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c407027e6365e44829bc16c859dccc3310f2f91a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c407027e6365e44829bc16c859dccc3310f2f91a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c407027e6365e44829bc16c859dccc3310f2f91a", "patch": "@@ -1,3 +1,9 @@\n+2014-06-12  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/61443\n+\t* config/avr/avr.md (push<mode>1): Avoid (subreg(mem)) when\n+\tloading from address spaces.\n+\n 2014-06-12  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/61462"}, {"sha": "3bb2a914a339d01d9ccd3247dc2db752975c3fc0", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c407027e6365e44829bc16c859dccc3310f2f91a/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c407027e6365e44829bc16c859dccc3310f2f91a/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=c407027e6365e44829bc16c859dccc3310f2f91a", "patch": "@@ -368,6 +368,15 @@\n   \"\"\n   {\n     int i;\n+\n+    // Avoid (subreg (mem)) for non-generic address spaces below.  Because\n+    // of the poor addressing capabilities of these spaces it's better to\n+    // load them in one chunk.  And it avoids PR61443.\n+\n+    if (MEM_P (operands[0])\n+        && !ADDR_SPACE_GENERIC_P (MEM_ADDR_SPACE (operands[0])))\n+      operands[0] = copy_to_mode_reg (<MODE>mode, operands[0]);\n+\n     for (i = GET_MODE_SIZE (<MODE>mode) - 1; i >= 0; --i)\n       {\n         rtx part = simplify_gen_subreg (QImode, operands[0], <MODE>mode, i);"}, {"sha": "094241acb210ad012f18e47698eba49a5b073235", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c407027e6365e44829bc16c859dccc3310f2f91a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c407027e6365e44829bc16c859dccc3310f2f91a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c407027e6365e44829bc16c859dccc3310f2f91a", "patch": "@@ -1,3 +1,8 @@\n+2014-06-12  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/61443\n+\t* gcc.target/avr/torture/pr61443.c: New test.\n+\n 2014-06-11  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/19200"}, {"sha": "12c6bca6663ae5dc20526c99b012a7cac298c46b", "filename": "gcc/testsuite/gcc.target/avr/torture/pr61443.c", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c407027e6365e44829bc16c859dccc3310f2f91a/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fpr61443.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c407027e6365e44829bc16c859dccc3310f2f91a/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fpr61443.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fpr61443.c?ref=c407027e6365e44829bc16c859dccc3310f2f91a", "patch": "@@ -0,0 +1,134 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+#include <stdlib.h>\n+#include <stdarg.h>\n+\n+#define NC __attribute__((noinline,noclone))\n+\n+void NC vfun (char n, ...)\n+{\n+  va_list ap;\n+\n+  va_start (ap, n);\n+\n+  switch (n)\n+    {\n+    default:\n+      abort();\n+    case 1:\n+      if (11 != va_arg (ap, int))\n+        abort();\n+      break;\n+    case 2:\n+      if (2222 != va_arg (ap, int))\n+        abort();\n+      break;\n+    case 3:\n+      if (333333 != va_arg (ap, __int24))\n+        abort();\n+      break;\n+    case 4:\n+      if (44444444 != va_arg (ap, long))\n+        abort();\n+      break;\n+    case 8:\n+      if (8888888888888888 != va_arg (ap, long long))\n+        abort();\n+      break;\n+    }\n+\n+  va_end (ap);\n+}\n+\n+\n+void NC boo_qi (const __flash char *p)\n+{\n+  vfun (1, *p);\n+}\n+\n+void NC boox_qi (const __memx char *p)\n+{\n+  vfun (1, *p);\n+}\n+\n+void NC boo_hi (const __flash int *p)\n+{\n+  vfun (2, *p);\n+}\n+\n+void NC boox_hi (const __memx int *p)\n+{\n+  vfun (2, *p);\n+}\n+\n+void NC boo_psi (const __flash __int24 *p)\n+{\n+  vfun (3, *p);\n+}\n+\n+void NC boox_psi (const __memx __int24 *p)\n+{\n+  vfun (3, *p);\n+}\n+\n+void NC boo_si (const __flash long *p)\n+{\n+  vfun (4, *p);\n+}\n+\n+void NC boox_si (const __memx long *p)\n+{\n+  vfun (4, *p);\n+}\n+\n+void NC boo_di (const __flash long long *p)\n+{\n+  vfun (8, *p);\n+}\n+\n+void NC boox_di (const __memx long long *p)\n+{\n+  vfun (8, *p);\n+}\n+\n+const __flash char f_qi = 11;\n+const __flash int f_hi = 2222;\n+const __flash __int24 f_psi = 333333;\n+const __flash long f_si = 44444444;\n+const __flash long long f_di = 8888888888888888;\n+\n+const __memx char x_qi = 11;\n+const __memx int x_hi = 2222;\n+const __memx __int24 x_psi = 333333;\n+const __memx long x_si = 44444444;\n+const __memx long long x_di = 8888888888888888;\n+\n+char r_qi = 11;\n+int r_hi = 2222;\n+__int24 r_psi = 333333;\n+long r_si = 44444444;\n+long long r_di = 8888888888888888;\n+\n+int main (void)\n+{\n+  boo_qi (&f_qi);\n+  boo_hi (&f_hi);\n+  boo_psi (&f_psi);\n+  boo_si (&f_si);\n+  boo_di (&f_di);\n+\n+  boox_qi (&x_qi);\n+  boox_hi (&x_hi);\n+  boox_psi (&x_psi);\n+  boox_si (&x_si);\n+  boox_di (&x_di);\n+\n+  boox_qi (&r_qi);\n+  boox_hi (&r_hi);\n+  boox_psi (&r_psi);\n+  boox_si (&r_si);\n+  boox_di (&r_di);\n+\n+  exit (0);\n+}"}]}