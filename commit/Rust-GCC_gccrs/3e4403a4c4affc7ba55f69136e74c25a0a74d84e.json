{"sha": "3e4403a4c4affc7ba55f69136e74c25a0a74d84e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U0NDAzYTRjNGFmZmM3YmE1NWY2OTEzNmU3NGMyNWEwYTc0ZDg0ZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-10-30T17:30:10Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-10-30T17:30:10Z"}, "message": "* decl.c (cp_finish_decl): Never throw for VLA bound == 0.\n\nFrom-SVN: r204218", "tree": {"sha": "830431eb5598391fd06cf859a26254f647041dc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/830431eb5598391fd06cf859a26254f647041dc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e4403a4c4affc7ba55f69136e74c25a0a74d84e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e4403a4c4affc7ba55f69136e74c25a0a74d84e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e4403a4c4affc7ba55f69136e74c25a0a74d84e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e4403a4c4affc7ba55f69136e74c25a0a74d84e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1652c6dada46168fc129de93fda4146624e0ff15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1652c6dada46168fc129de93fda4146624e0ff15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1652c6dada46168fc129de93fda4146624e0ff15"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "da1d7f945cf0d4129bb6b7e31c84a8637025ae5f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4403a4c4affc7ba55f69136e74c25a0a74d84e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4403a4c4affc7ba55f69136e74c25a0a74d84e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3e4403a4c4affc7ba55f69136e74c25a0a74d84e", "patch": "@@ -1,3 +1,7 @@\n+2013-10-30  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl.c (cp_finish_decl): Never throw for VLA bound == 0.\n+\n 2013-10-29  David Malcolm  <dmalcolm@redhat.com>\n \n \tPatch autogenerated by refactor_symtab.py from"}, {"sha": "476d5594156e229bfc58875a39ae4f8e9c996a01", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4403a4c4affc7ba55f69136e74c25a0a74d84e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4403a4c4affc7ba55f69136e74c25a0a74d84e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3e4403a4c4affc7ba55f69136e74c25a0a74d84e", "patch": "@@ -6404,11 +6404,7 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n       /* If the VLA bound is larger than half the address space, or less\n \t than zero, throw std::bad_array_length.  */\n       tree max = convert (ssizetype, TYPE_MAX_VALUE (TYPE_DOMAIN (type)));\n-      /* C++1y says we should throw for length <= 0, but we have\n-\t historically supported zero-length arrays.  Let's treat that as an\n-\t extension to be disabled by -std=c++NN.  */\n-      int lower = flag_iso ? 0 : -1;\n-      tree comp = build2 (LT_EXPR, boolean_type_node, max, ssize_int (lower));\n+      tree comp = build2 (LT_EXPR, boolean_type_node, max, ssize_int (-1));\n       comp = build3 (COND_EXPR, void_type_node, comp,\n \t\t     throw_bad_array_length (), void_zero_node);\n       finish_expr_stmt (comp);"}]}