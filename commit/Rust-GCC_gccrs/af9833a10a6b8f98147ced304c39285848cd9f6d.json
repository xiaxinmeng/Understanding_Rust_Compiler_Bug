{"sha": "af9833a10a6b8f98147ced304c39285848cd9f6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY5ODMzYTEwYTZiOGY5ODE0N2NlZDMwNGMzOTI4NTg0OGNkOWY2ZA==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2021-01-15T23:00:35Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-05-06T07:51:25Z"}, "message": "[Ada] Fix restriction No_Enumeration_Maps on both Image attributes\n\ngcc/ada/\n\n\t* sem_attr.adb (Check_Enum_Image): Reword comment; add\n\tCheck_Enumeration_Maps parameter.  Now this routine combines\n\tboth referencing enumeration literals and checking restriction\n\tNo_Enumeration_Maps, if required.\n\t(Analyze_Attribute): Remove duplicated code and instead call\n\tCheck_Enum_Image.", "tree": {"sha": "30cbbd649877a5b154d2448c902db3eb6747b09d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30cbbd649877a5b154d2448c902db3eb6747b09d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af9833a10a6b8f98147ced304c39285848cd9f6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af9833a10a6b8f98147ced304c39285848cd9f6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af9833a10a6b8f98147ced304c39285848cd9f6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af9833a10a6b8f98147ced304c39285848cd9f6d/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e45796fe051db3a9f35a8a7fb4093f3852cadab4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e45796fe051db3a9f35a8a7fb4093f3852cadab4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e45796fe051db3a9f35a8a7fb4093f3852cadab4"}], "stats": {"total": 70, "additions": 33, "deletions": 37}, "files": [{"sha": "6fe491c7895a7439a9eb3e50eac75d93ed186b14", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 33, "deletions": 37, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af9833a10a6b8f98147ced304c39285848cd9f6d/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af9833a10a6b8f98147ced304c39285848cd9f6d/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=af9833a10a6b8f98147ced304c39285848cd9f6d", "patch": "@@ -318,14 +318,20 @@ package body Sem_Attr is\n       procedure Check_E2;\n       --  Check that two attribute arguments are present\n \n-      procedure Check_Enum_Image;\n-      --  If the prefix type of 'Image is an enumeration type, set all its\n-      --  literals as referenced, since the image function could possibly end\n-      --  up referencing any of the literals indirectly. Same for Enum_Val.\n-      --  Set the flag only if the reference is in the main code unit. Same\n-      --  restriction when resolving 'Value; otherwise an improperly set\n-      --  reference when analyzing an inlined body will lose a proper\n-      --  warning on a useless with_clause.\n+      procedure Check_Enum_Image (Check_Enumeration_Maps : Boolean := False);\n+      --  Common processing for the Image and Value family of attributes,\n+      --  including their Wide and Wide_Wide versions, Enum_Val and Img.\n+      --\n+      --  If the prefix type of an attribute is an enumeration type, set all\n+      --  its literals as referenced, since the attribute function can\n+      --  indirectly reference any of the literals. Set the referenced flag\n+      --  only if the attribute is in the main code unit; otherwise an\n+      --  improperly set reference when analyzing an inlined body will lose a\n+      --  proper warning on a useless with_clause.\n+      --\n+      --  If Check_Enumeration_Maps is True, then the attribute expansion\n+      --  requires enumeration maps, so check whether restriction\n+      --  No_Enumeration_Maps is active.\n \n       procedure Check_First_Last_Valid;\n       --  Perform all checks for First_Valid and Last_Valid attributes\n@@ -1527,7 +1533,7 @@ package body Sem_Attr is\n             Validate_Non_Static_Attribute_Function_Call;\n          end if;\n \n-         Check_Enum_Image;\n+         Check_Enum_Image (Check_Enumeration_Maps => True);\n \n          --  Check restriction No_Fixed_IO. Note the check of Comes_From_Source\n          --  to avoid giving a duplicate message for when Image attributes\n@@ -1962,10 +1968,22 @@ package body Sem_Attr is\n       -- Check_Enum_Image --\n       ----------------------\n \n-      procedure Check_Enum_Image is\n+      procedure Check_Enum_Image (Check_Enumeration_Maps : Boolean := False) is\n          Lit : Entity_Id;\n \n       begin\n+         --  Ensure that Check_Enumeration_Maps parameter is set precisely for\n+         --  attributes whose implementation requires enumeration maps.\n+\n+         pragma Assert\n+           (Check_Enumeration_Maps = (Attr_Id in Attribute_Image\n+                                               | Attribute_Img\n+                                               | Attribute_Value\n+                                               | Attribute_Wide_Image\n+                                               | Attribute_Wide_Value\n+                                               | Attribute_Wide_Wide_Image\n+                                               | Attribute_Wide_Wide_Value));\n+\n          --  When an enumeration type appears in an attribute reference, all\n          --  literals of the type are marked as referenced. This must only be\n          --  done if the attribute reference appears in the current source.\n@@ -1975,6 +1993,10 @@ package body Sem_Attr is\n          if Is_Enumeration_Type (P_Base_Type)\n            and then In_Extended_Main_Code_Unit (N)\n          then\n+            if Check_Enumeration_Maps then\n+               Check_Restriction (No_Enumeration_Maps, N);\n+            end if;\n+\n             Lit := First_Literal (P_Base_Type);\n             while Present (Lit) loop\n                Set_Referenced (Lit);\n@@ -7116,33 +7138,7 @@ package body Sem_Attr is\n       =>\n          Check_E1;\n          Check_Scalar_Type;\n-\n-         --  Case of enumeration type\n-\n-         --  When an enumeration type appears in an attribute reference, all\n-         --  literals of the type are marked as referenced. This must only be\n-         --  done if the attribute reference appears in the current source.\n-         --  Otherwise the information on references may differ between a\n-         --  normal compilation and one that performs inlining.\n-\n-         if Is_Enumeration_Type (P_Type)\n-           and then In_Extended_Main_Code_Unit (N)\n-         then\n-            Check_Restriction (No_Enumeration_Maps, N);\n-\n-            --  Mark all enumeration literals as referenced, since the use of\n-            --  the Value attribute can implicitly reference any of the\n-            --  literals of the enumeration base type.\n-\n-            declare\n-               Ent : Entity_Id := First_Literal (P_Base_Type);\n-            begin\n-               while Present (Ent) loop\n-                  Set_Referenced (Ent);\n-                  Next_Literal (Ent);\n-               end loop;\n-            end;\n-         end if;\n+         Check_Enum_Image (Check_Enumeration_Maps => True);\n \n          --  Set Etype before resolving expression because expansion of\n          --  expression may require enclosing type. Note that the type"}]}