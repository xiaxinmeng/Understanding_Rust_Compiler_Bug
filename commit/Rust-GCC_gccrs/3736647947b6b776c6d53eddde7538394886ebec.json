{"sha": "3736647947b6b776c6d53eddde7538394886ebec", "node_id": "C_kwDOANBUbNoAKDM3MzY2NDc5NDdiNmI3NzZjNmQ1M2VkZGRlNzUzODM5NDg4NmViZWM", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-09-14T08:23:46Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-01-31T13:16:51Z"}, "message": "gccrs: module lowering: Do not append null pointers as items\n\nSome module items do not need to get lowered to HIR such as `macro_rules!` definitions. Hence, module lowering should act the same as crate lowering: Only emplace back the lowered item if it is a valid pointer\n\ngcc/rust/ChangeLog:\n\n\t* hir/rust-ast-lower-item.cc (ASTLoweringItem::visit): Do not lower\n\tnull items within modules.\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/macro44.rs: New test.", "tree": {"sha": "6ee2004af32a1e67581b5ffbb6f962803291a550", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ee2004af32a1e67581b5ffbb6f962803291a550"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3736647947b6b776c6d53eddde7538394886ebec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3736647947b6b776c6d53eddde7538394886ebec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3736647947b6b776c6d53eddde7538394886ebec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3736647947b6b776c6d53eddde7538394886ebec/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "739d0509ed55aa650f197618a0902c6e0553b639", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/739d0509ed55aa650f197618a0902c6e0553b639", "html_url": "https://github.com/Rust-GCC/gccrs/commit/739d0509ed55aa650f197618a0902c6e0553b639"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "411cc4be855532817c9b7cf115fa466dab02f052", "filename": "gcc/rust/hir/rust-ast-lower-item.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3736647947b6b776c6d53eddde7538394886ebec/gcc%2Frust%2Fhir%2Frust-ast-lower-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3736647947b6b776c6d53eddde7538394886ebec/gcc%2Frust%2Fhir%2Frust-ast-lower-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.cc?ref=3736647947b6b776c6d53eddde7538394886ebec", "patch": "@@ -59,7 +59,10 @@ ASTLoweringItem::visit (AST::Module &module)\n   for (auto &item : module.get_items ())\n     {\n       auto transitem = translate (item.get ());\n-      items.push_back (std::unique_ptr<Item> (transitem));\n+      // The item may be null if it doesn't need to live in the HIR - for\n+      // example, macro rules definitions\n+      if (transitem)\n+\titems.push_back (std::unique_ptr<Item> (transitem));\n     }\n \n   // should be lowered/copied from module.get_in/outer_attrs()"}, {"sha": "84b2cdbb506b37c2eaa150f296fd1d239cea099d", "filename": "gcc/testsuite/rust/compile/macro44.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3736647947b6b776c6d53eddde7538394886ebec/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro44.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3736647947b6b776c6d53eddde7538394886ebec/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro44.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro44.rs?ref=3736647947b6b776c6d53eddde7538394886ebec", "patch": "@@ -0,0 +1,34 @@\n+mod foo {\n+    mod bar {\n+        mod baz {\n+            macro_rules! baz {\n+                () => {{}};\n+            }\n+        }\n+    }\n+\n+    macro_rules! foo {\n+        () => {{}};\n+    }\n+\n+    fn foo_f() { // { dg-warning \"function is never used\" }\n+        foo!();\n+    }\n+\n+    fn bar_f() { // { dg-warning \"function is never used\" }\n+        baz!();\n+    }\n+}\n+\n+mod foo2 {\n+    #[macro_export]\n+    macro_rules! bar1 {\n+        () => {};\n+    }\n+\n+    macro_rules! bar2 {\n+        () => {};\n+    }\n+}\n+\n+fn main() {}"}]}