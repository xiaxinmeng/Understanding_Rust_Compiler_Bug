{"sha": "e733134f02f87e7f7bb595f3edca602c4102e3f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTczMzEzNGYwMmY4N2U3ZjdiYjU5NWYzZWRjYTYwMmM0MTAyZTNmOQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2004-06-28T08:13:06Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2004-06-28T08:13:06Z"}, "message": "mn10300-protos.h (legitimate_address_p): Declare.\n\n* config/mn10300/mn10300-protos.h (legitimate_address_p): Declare.\n* config/mn10300/mn10300.c (legitimate_address_p): New.  Test that\nindex is legitimate, compared with code moved from...\n* config/mn10300/mn10300.h (GO_IF_LEGITIMATE_ADDRESS): here.\n(REG_STRICT): Define, according to REG_OK_STRICT.\n(REGNO_IN_RANGE_P, REGNO_DATA_P, REGNO_ADDRESS_P, REGNO_SP_P,\nREGNO_EXTENDED_P, REGNO_AM33_P, REGNO_FP_P): Introduce strict\nargument.\n(REGNO_STRICT_OK_FOR_BASE_P, REGNO_STRICT_OK_FOR_BIT_BASE_P,\nREGNO_STRICT_OK_FOR_INDEX_P): New.\n(REGNO_OK_FOR_BASE_P, REG_OK_FOR_BASE_P, REGNO_OK_FOR_BIT_BASE_P,\nREG_OK_FOR_BIT_BASE_P, REGNO_OK_FOR_INDEX_P, REG_OK_FOR_INDEX_P,\nRTX_OK_FOR_BASE_P): Use them.\n\nFrom-SVN: r83766", "tree": {"sha": "74d147dba6a70b9b8f9d7d0495232f7f2298a8a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74d147dba6a70b9b8f9d7d0495232f7f2298a8a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e733134f02f87e7f7bb595f3edca602c4102e3f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e733134f02f87e7f7bb595f3edca602c4102e3f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e733134f02f87e7f7bb595f3edca602c4102e3f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e733134f02f87e7f7bb595f3edca602c4102e3f9/comments", "author": null, "committer": null, "parents": [{"sha": "0a73e37f4f131d0581df2b6b6df19b03d6903ee2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a73e37f4f131d0581df2b6b6df19b03d6903ee2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a73e37f4f131d0581df2b6b6df19b03d6903ee2"}], "stats": {"total": 182, "additions": 123, "deletions": 59}, "files": [{"sha": "8573a24c376329bb45f886cd80b6d6a7bec1f143", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e733134f02f87e7f7bb595f3edca602c4102e3f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e733134f02f87e7f7bb595f3edca602c4102e3f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e733134f02f87e7f7bb595f3edca602c4102e3f9", "patch": "@@ -1,3 +1,19 @@\n+2004-06-28  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* config/mn10300/mn10300-protos.h (legitimate_address_p): Declare.\n+\t* config/mn10300/mn10300.c (legitimate_address_p): New.  Test that\n+\tindex is legitimate, compared with code moved from...\n+\t* config/mn10300/mn10300.h (GO_IF_LEGITIMATE_ADDRESS): here.\n+\t(REG_STRICT): Define, according to REG_OK_STRICT.\n+\t(REGNO_IN_RANGE_P, REGNO_DATA_P, REGNO_ADDRESS_P, REGNO_SP_P,\n+\tREGNO_EXTENDED_P, REGNO_AM33_P, REGNO_FP_P): Introduce strict\n+\targument.\n+\t(REGNO_STRICT_OK_FOR_BASE_P, REGNO_STRICT_OK_FOR_BIT_BASE_P,\n+\tREGNO_STRICT_OK_FOR_INDEX_P): New.\n+\t(REGNO_OK_FOR_BASE_P, REG_OK_FOR_BASE_P, REGNO_OK_FOR_BIT_BASE_P,\n+\tREG_OK_FOR_BIT_BASE_P, REGNO_OK_FOR_INDEX_P, REG_OK_FOR_INDEX_P,\n+\tRTX_OK_FOR_BASE_P): Use them.\n+\n 2004-06-28  Ben Elliston  <bje@au.ibm.com>\n \n \t* doc/cfg.texi (Basic Blocks): Define dominators."}, {"sha": "e5a1a636da3dfb0a39281a67ddb8e7131a29c3fd", "filename": "gcc/config/mn10300/mn10300-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e733134f02f87e7f7bb595f3edca602c4102e3f9/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e733134f02f87e7f7bb595f3edca602c4102e3f9/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h?ref=e733134f02f87e7f7bb595f3edca602c4102e3f9", "patch": "@@ -28,6 +28,7 @@ extern void mn10300_va_start (tree, rtx);\n extern struct rtx_def *legitimize_address (rtx, rtx, enum machine_mode);\n extern rtx legitimize_pic_address (rtx, rtx);\n extern int legitimate_pic_operand_p (rtx);\n+extern bool legitimate_address_p (enum machine_mode, rtx, int);\n extern void print_operand (FILE *, rtx, int);\n extern void print_operand_address (FILE *, rtx);\n extern void mn10300_print_reg_list (FILE *, int);"}, {"sha": "95078d62da41b195e24218a4758fd5e465b048b4", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e733134f02f87e7f7bb595f3edca602c4102e3f9/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e733134f02f87e7f7bb595f3edca602c4102e3f9/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=e733134f02f87e7f7bb595f3edca602c4102e3f9", "patch": "@@ -1864,6 +1864,56 @@ legitimate_pic_operand_p (rtx x)\n   return 1;\n }\n \n+/* Return TRUE if the address X, taken from a (MEM:MODE X) rtx, is\n+   legitimate, and FALSE otherwise.  */\n+bool\n+legitimate_address_p (enum machine_mode mode, rtx x, int strict)\n+{\n+  if (CONSTANT_ADDRESS_P (x)\n+      && (! flag_pic || legitimate_pic_operand_p (x)))\n+    return TRUE;\n+\n+  if (RTX_OK_FOR_BASE_P (x, strict))\n+    return TRUE;\n+\n+  if (TARGET_AM33\n+      && GET_CODE (x) == POST_INC\n+      && RTX_OK_FOR_BASE_P (XEXP (x, 0), strict)\n+      && (mode == SImode || mode == SFmode || mode == HImode))\n+    return TRUE;\n+\n+  if (GET_CODE (x) == PLUS)\n+    {\n+      rtx base = 0, index = 0;\n+\n+      if (REG_P (XEXP (x, 0))\n+\t  && REGNO_STRICT_OK_FOR_BASE_P (REGNO (XEXP (x, 0)), strict))\n+\t{\n+\t  base = XEXP (x, 0);\n+\t  index = XEXP (x, 1);\n+\t}\n+\n+      if (REG_P (XEXP (x, 1))\n+\t  && REGNO_STRICT_OK_FOR_BASE_P (REGNO (XEXP (x, 1)), strict))\n+\t{\n+\t  base = XEXP (x, 1);\n+\t  index = XEXP (x, 0);\n+\t}\n+\n+      if (base != 0 && index != 0)\n+\t{\n+\t  if (GET_CODE (index) == CONST_INT)\n+\t    return TRUE;\n+\t  if (GET_CODE (index) == CONST\n+\t      && (! flag_pic\n+ \t\t  || legitimate_pic_operand_p (index)))\n+\t    return TRUE;\n+\t}\n+    }\n+\n+  return FALSE;\n+}\n+\n static int\n mn10300_address_cost_1 (rtx x, int *unsig)\n {"}, {"sha": "d980b445cfe9d367ad12f829f93f8fe6a77cca31", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 56, "deletions": 59, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e733134f02f87e7f7bb595f3edca602c4102e3f9/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e733134f02f87e7f7bb595f3edca602c4102e3f9/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=e733134f02f87e7f7bb595f3edca602c4102e3f9", "patch": "@@ -366,41 +366,59 @@ enum reg_class {\n    has been allocated, which happens in local-alloc.c.  */\n \n #ifndef REG_OK_STRICT\n-# define REGNO_IN_RANGE_P(regno,min,max) \\\n-  (IN_RANGE ((regno), (min), (max)) || (regno) >= FIRST_PSEUDO_REGISTER)\n+# define REG_STRICT 0\n #else\n-# define REGNO_IN_RANGE_P(regno,min,max) \\\n-  (IN_RANGE ((regno), (min), (max)) \\\n-   || (reg_renumber \\\n-       && reg_renumber[(regno)] >= (min) && reg_renumber[(regno)] <= (max)))\n+# define REG_STRICT 1\n #endif\n \n-#define REGNO_DATA_P(regno) \\\n-  REGNO_IN_RANGE_P ((regno), FIRST_DATA_REGNUM, LAST_DATA_REGNUM)\n-#define REGNO_ADDRESS_P(regno) \\\n-  REGNO_IN_RANGE_P ((regno), FIRST_ADDRESS_REGNUM, LAST_ADDRESS_REGNUM)\n-#define REGNO_SP_P(regno) \\\n-  REGNO_IN_RANGE_P ((regno), STACK_POINTER_REGNUM, STACK_POINTER_REGNUM)\n-#define REGNO_EXTENDED_P(regno) \\\n-  REGNO_IN_RANGE_P ((regno), FIRST_EXTENDED_REGNUM, LAST_EXTENDED_REGNUM)\n-#define REGNO_AM33_P(regno) \\\n-  (REGNO_DATA_P ((regno)) || REGNO_ADDRESS_P ((regno)) \\\n-   || REGNO_EXTENDED_P ((regno)))\n-#define REGNO_FP_P(regno) \\\n-  REGNO_IN_RANGE_P ((regno), FIRST_FP_REGNUM, LAST_FP_REGNUM)\n-\n+# define REGNO_IN_RANGE_P(regno,min,max,strict) \\\n+  (IN_RANGE ((regno), (min), (max)) \t\t\\\n+   || ((strict)\t\t\t\t\t\\\n+       ? (reg_renumber\t\t\t\t\\\n+\t  && reg_renumber[(regno)] >= (min)\t\\\n+\t  && reg_renumber[(regno)] <= (max))\t\\\n+       : (regno) >= FIRST_PSEUDO_REGISTER))\n+\n+#define REGNO_DATA_P(regno, strict) \\\n+  (REGNO_IN_RANGE_P ((regno), FIRST_DATA_REGNUM, LAST_DATA_REGNUM, \\\n+\t\t     (strict)))\n+#define REGNO_ADDRESS_P(regno, strict) \\\n+  (REGNO_IN_RANGE_P ((regno), FIRST_ADDRESS_REGNUM, LAST_ADDRESS_REGNUM, \\\n+\t\t     (strict)))\n+#define REGNO_SP_P(regno, strict) \\\n+  (REGNO_IN_RANGE_P ((regno), STACK_POINTER_REGNUM, STACK_POINTER_REGNUM, \\\n+\t\t     (strict)))\n+#define REGNO_EXTENDED_P(regno, strict) \\\n+  (REGNO_IN_RANGE_P ((regno), FIRST_EXTENDED_REGNUM, LAST_EXTENDED_REGNUM, \\\n+\t\t     (strict)))\n+#define REGNO_AM33_P(regno, strict) \\\n+  (REGNO_DATA_P ((regno), (strict)) || REGNO_ADDRESS_P ((regno), (strict)) \\\n+   || REGNO_EXTENDED_P ((regno), (strict)))\n+#define REGNO_FP_P(regno, strict) \\\n+  (REGNO_IN_RANGE_P ((regno), FIRST_FP_REGNUM, LAST_FP_REGNUM, (strict)))\n+\n+#define REGNO_STRICT_OK_FOR_BASE_P(regno, strict) \\\n+  (REGNO_SP_P ((regno), (strict)) \\\n+   || REGNO_ADDRESS_P ((regno), (strict)) \\\n+   || REGNO_EXTENDED_P ((regno), (strict)))\n #define REGNO_OK_FOR_BASE_P(regno) \\\n-  (REGNO_SP_P ((regno)) \\\n-   || REGNO_ADDRESS_P ((regno)) || REGNO_EXTENDED_P ((regno)))\n-#define REG_OK_FOR_BASE_P(X) REGNO_OK_FOR_BASE_P (REGNO (X))\n+  (REGNO_STRICT_OK_FOR_BASE_P ((regno), REG_STRICT))\n+#define REG_OK_FOR_BASE_P(X) \\\n+  (REGNO_OK_FOR_BASE_P (REGNO (X)))\n \n+#define REGNO_STRICT_OK_FOR_BIT_BASE_P(regno, strict) \\\n+  (REGNO_SP_P ((regno), (strict)) || REGNO_ADDRESS_P ((regno), (strict)))\n #define REGNO_OK_FOR_BIT_BASE_P(regno) \\\n-  (REGNO_SP_P ((regno)) || REGNO_ADDRESS_P ((regno)))\n-#define REG_OK_FOR_BIT_BASE_P(X) REGNO_OK_FOR_BIT_BASE_P (REGNO (X))\n+  (REGNO_STRICT_OK_FOR_BIT_BASE_P ((regno), REG_STRICT))\n+#define REG_OK_FOR_BIT_BASE_P(X) \\\n+  (REGNO_OK_FOR_BIT_BASE_P (REGNO (X)))\n \n+#define REGNO_STRICT_OK_FOR_INDEX_P(regno, strict) \\\n+  (REGNO_DATA_P ((regno), (strict)) || REGNO_EXTENDED_P ((regno), (strict)))\n #define REGNO_OK_FOR_INDEX_P(regno) \\\n-  (REGNO_DATA_P ((regno)) || REGNO_EXTENDED_P ((regno)))\n-#define REG_OK_FOR_INDEX_P(X) REGNO_OK_FOR_INDEX_P (REGNO (X))\n+  (REGNO_STRICT_OK_FOR_INDEX_P ((regno), REG_STRICT))\n+#define REG_OK_FOR_INDEX_P(X) \\\n+  (REGNO_OK_FOR_INDEX_P (REGNO (X)))\n \n /* Given an rtx X being reloaded into a reg required to be\n    in class CLASS, return the class of reg to actually use.\n@@ -756,41 +774,20 @@ struct cum_arg {int nbytes; };\n \n /* Accept either REG or SUBREG where a register is valid.  */\n   \n-#define RTX_OK_FOR_BASE_P(X)\t\t\t\t\t\\\n-  ((REG_P (X) && REG_OK_FOR_BASE_P (X))\t\t\t\t\\\n+#define RTX_OK_FOR_BASE_P(X, strict)\t\t\t\t\\\n+  ((REG_P (X) && REGNO_STRICT_OK_FOR_BASE_P (REGNO (X),\t\t\\\n+ \t\t\t\t\t     (strict))) \t\\\n    || (GET_CODE (X) == SUBREG && REG_P (SUBREG_REG (X))\t\t\\\n-       && REG_OK_FOR_BASE_P (SUBREG_REG (X))))\n+       && REGNO_STRICT_OK_FOR_BASE_P (REGNO (SUBREG_REG (X)),\t\\\n+ \t\t\t\t      (strict))))\n \n #define GO_IF_LEGITIMATE_ADDRESS(MODE, X, ADDR)    \t\\\n-{\t\t\t\t\t\t\t\\\n-  if (CONSTANT_ADDRESS_P (X)\t\t\t\t\\\n-      && (! flag_pic || legitimate_pic_operand_p (X)))\t\\\n-    goto ADDR;\t\t\t\t\t\t\\\n-  if (RTX_OK_FOR_BASE_P (X))\t\t\t\t\\\n-    goto ADDR;\t\t\t\t\t\t\\\n-  if (TARGET_AM33\t\t\t\t\t\\\n-      && GET_CODE (X) == POST_INC\t\t\t\\\n-      && RTX_OK_FOR_BASE_P (XEXP (X, 0))\t\t\\\n-      && (MODE == SImode || MODE == SFmode || MODE == HImode))\\\n-    goto ADDR;\t\t\t\t\t\t\\\n-  if (GET_CODE (X) == PLUS)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      rtx base = 0, index = 0;\t\t\t\t\\\n-      if (REG_P (XEXP (X, 0))\t\t\t\t\\\n-\t  && REG_OK_FOR_BASE_P (XEXP (X, 0)))\t\t\\\n-\tbase = XEXP (X, 0), index = XEXP (X, 1);\t\\\n-      if (REG_P (XEXP (X, 1))\t\t\t\t\\\n-\t  && REG_OK_FOR_BASE_P (XEXP (X, 1)))\t\t\\\n-\tbase = XEXP (X, 1), index = XEXP (X, 0);\t\\\n-      if (base != 0 && index != 0)\t\t\t\\\n-\t{\t\t\t\t\t\t\\\n-\t  if (GET_CODE (index) == CONST_INT)\t\t\\\n-\t    goto ADDR;\t\t\t\t\t\\\n-\t  if (GET_CODE (index) == CONST)\t\t\\\n-\t    goto ADDR;\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-}\n+do\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    if (legitimate_address_p ((MODE), (X), REG_STRICT))\t\\\n+      goto ADDR;\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\\\n+while (0) \n \n \f\n /* Try machine-dependent ways of modifying an illegitimate address"}]}