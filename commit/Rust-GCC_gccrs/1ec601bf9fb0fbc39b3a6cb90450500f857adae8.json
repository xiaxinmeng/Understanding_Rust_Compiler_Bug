{"sha": "1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVjNjAxYmY5ZmIwZmJjMzliM2E2Y2I5MDQ1MDUwMGY4NTdhZGFlOA==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2010-11-16T21:23:19Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-11-16T21:23:19Z"}, "message": "re PR fortran/32049 (Support on x86_64 also kind=16)\n\n/\n2010-11-13  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n            Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/32049\n        * Makefile.def: Add libquadmath; build it with language=fortran.\n        * configure.ac: Add libquadmath.\n        * Makefile.tpl: Handle multiple libs in check-[+language+].\n        * Makefile.in: Regenerate.\n        * configure: Regenerate.\n\nlibquadmath/\n2010-11-13  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n            Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/32049\n        Initial implementation and checkin.\n\ngcc/fortran/\n2010-11-13  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n            Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/32049\n        * gfortranspec.c (find_spec_file): New function.\n        (lang_specific_driver): Try to find .spec file and use it.\n        * trans-io.c (iocall): Define\n        * IOCALL_X_REAL128/COMPLEX128(,write).\n        (gfc_build_io_library_fndecls): Build decl for __float128 I/O.\n        (transfer_expr): Call __float128 I/O functions.\n        * trans-types.c (gfc_init_kinds): Allow kind-16 belonging\n        to __float128.\n\ngcc/testsuite/\n2010-11-13  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n            Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/32049\n        * gfortran.dg/quad_1.f90: New.\n        * lib/gcc-defs.exp (gcc-set-multilib-library-path): Use also\n        compiler arguments.\n        * lib/gfortran.exp (gfortran_link_flags): Add libquadmath to\n        library search path; call gcc-set-multilib-library-path with\n        arguments such that libgfortran.spec is found.\n        (gfortran_init): Add path for libgfortran.spec to\nGFORTRAN_UNDER_TEST.\n\nlibgomp/\n2010-11-13  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n            Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/32049\n        * configure.ac: \n        * configure: Regenerate.\n\nlibgfortran/\n2010-11-13  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n            Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/32049\n        * Makefile.am: Add missing pow_r16_i4.c, add transfer128.c,\n        link libquadmath, if used.\n        * acinclude.m4 (LIBGFOR_CHECK_FLOAT128): Add.\n        * configure.ac: Use it, touch spec file.\n        * gfortran.map: Add pow_r16_i4 and\n        transfer_(real,complex)128(,write) functions.\n        * intrinsics/cshift0.c (cshift0): Handle __float128 type.\n        * intrinsics/erfc_scaled_inc.c: Ditto.\n        * intrinsics/pack_generic.c (pack): Ditto\n        * intrinsics/spread_generic.c (spread): Ditto.\n        * intrinsics/unpack_generic.c (unpack1): Ditto.\n        * io/read.c (convert_real): Ditto.\n        * io/transfer.c: Update comments.\n        * io/transfer128.c: New file.\n        * io/write_float.def (write_float): Handle __float128 type.\n        * libgfortran.h: #include quadmath_weak.h, define __builtin_infq\n        and nanq.\n        * m4/mtype.m4: Handle __float128 type.\n        * runtime/in_pack_generic.c (internal_pack): Ditto.\n        * runtime/in_unpack_generic.c (internal_unpack): Ditto.\n        * kinds-override.h: New file.\n        * libgfortran.spec.in: Ditto.\n        * generated/pow_r16_i4.c: Generated.\n        * Makefile.in: Regenerate.\n        * configure: Regenerate.\n        * config.h: Regenerate.\n        * bessel_r10.c: Regenerate.\n        * bessel_r16.c: Regenerate.\n        * bessel_r4.c: Regenerate.\n        * bessel_r8.c: Regenerate.\n        * exponent_r16.c: Regenerate.\n        * fraction_r16.c: Regenerate.\n        * nearest_r16.c: Regenerate.\n        * norm2_r10.c: Regenerate.\n        * norm2_r16.c: Regenerate.\n        * norm2_r4.c: Regenerate.\n        * norm2_r8.c: Regenerate.\n        * rrspacing_r16.c: Regenerate.\n        * set_exponent_r16.c: Regenerate.\n        * spacing_r16.c: Regenerate.\n\n\nCo-Authored-By: Tobias Burnus <burnus@net-b.de>\n\nFrom-SVN: r166825", "tree": {"sha": "e26ad385cfada5f1f2c55f92057a0259de8b98d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e26ad385cfada5f1f2c55f92057a0259de8b98d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "07078664fd6fdcb046cee4adf01ee697e56fcbd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07078664fd6fdcb046cee4adf01ee697e56fcbd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07078664fd6fdcb046cee4adf01ee697e56fcbd3"}], "stats": {"total": 35954, "additions": 35830, "deletions": 124}, "files": [{"sha": "49f52afaaacdbc833e0679c1b2c7d4904f63a728", "filename": "ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -1,3 +1,13 @@\n+2010-11-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\t    Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/32049\n+\t* Makefile.def: Add libquadmath; build it with language=fortran.\n+\t* configure.ac: Add libquadmath.\n+\t* Makefile.tpl: Handle multiple libs in check-[+language+].\n+\t* Makefile.in: Regenerate.\n+\t* configure: Regenerate.\n+\n 2010-11-16  Tom Tromey  <tromey@redhat.com>\n \n \t* MAINTAINERS: Moved myself to reviewers section."}, {"sha": "d7192f23f0b33a61cd703de1c148febb542cbbd8", "filename": "Makefile.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/Makefile.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/Makefile.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.def?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -155,6 +155,7 @@ target_modules = { module= libmudflap; lib_path=.libs; };\n target_modules = { module= libssp; lib_path=.libs; };\n target_modules = { module= newlib; };\n target_modules = { module= libgcc; bootstrap=true; no_check=true; };\n+target_modules = { module= libquadmath; };\n target_modules = { module= libgfortran; };\n target_modules = { module= libobjc; };\n target_modules = { module= libtermcap; no_check=true;\n@@ -571,11 +572,13 @@ dependencies = { module=configure-target-libiberty; on=all-binutils; };\n dependencies = { module=configure-target-libiberty; on=all-ld; };\n dependencies = { module=configure-target-newlib; on=all-binutils; };\n dependencies = { module=configure-target-newlib; on=all-ld; };\n+dependencies = { module=configure-target-libgfortran; on=all-target-libquadmath; };\n \n languages = { language=c;\tgcc-check-target=check-gcc; };\n languages = { language=c++;\tgcc-check-target=check-c++;\n \t\t\t\tlib-check-target=check-target-libstdc++-v3; };\n languages = { language=fortran;\tgcc-check-target=check-fortran;\n+\t\t\t\tlib-check-target=check-target-libquadmath;\n \t\t\t\tlib-check-target=check-target-libgfortran; };\n languages = { language=java;\tgcc-check-target=check-java;\n \t\t\t\tlib-check-target=check-target-libjava; };"}, {"sha": "93e8a5d88c6a57402eb37b57760372ee4105c755", "filename": "Makefile.in", "status": "modified", "additions": 466, "deletions": 1, "changes": 467, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -926,6 +926,7 @@ configure-target:  \\\n     maybe-configure-target-libssp \\\n     maybe-configure-target-newlib \\\n     maybe-configure-target-libgcc \\\n+    maybe-configure-target-libquadmath \\\n     maybe-configure-target-libgfortran \\\n     maybe-configure-target-libobjc \\\n     maybe-configure-target-libtermcap \\\n@@ -1108,6 +1109,7 @@ all-target: maybe-all-target-newlib\n @if target-libgcc-no-bootstrap\n all-target: maybe-all-target-libgcc\n @endif target-libgcc-no-bootstrap\n+all-target: maybe-all-target-libquadmath\n all-target: maybe-all-target-libgfortran\n all-target: maybe-all-target-libobjc\n all-target: maybe-all-target-libtermcap\n@@ -1229,6 +1231,7 @@ info-target: maybe-info-target-libmudflap\n info-target: maybe-info-target-libssp\n info-target: maybe-info-target-newlib\n info-target: maybe-info-target-libgcc\n+info-target: maybe-info-target-libquadmath\n info-target: maybe-info-target-libgfortran\n info-target: maybe-info-target-libobjc\n info-target: maybe-info-target-libtermcap\n@@ -1343,6 +1346,7 @@ dvi-target: maybe-dvi-target-libmudflap\n dvi-target: maybe-dvi-target-libssp\n dvi-target: maybe-dvi-target-newlib\n dvi-target: maybe-dvi-target-libgcc\n+dvi-target: maybe-dvi-target-libquadmath\n dvi-target: maybe-dvi-target-libgfortran\n dvi-target: maybe-dvi-target-libobjc\n dvi-target: maybe-dvi-target-libtermcap\n@@ -1457,6 +1461,7 @@ pdf-target: maybe-pdf-target-libmudflap\n pdf-target: maybe-pdf-target-libssp\n pdf-target: maybe-pdf-target-newlib\n pdf-target: maybe-pdf-target-libgcc\n+pdf-target: maybe-pdf-target-libquadmath\n pdf-target: maybe-pdf-target-libgfortran\n pdf-target: maybe-pdf-target-libobjc\n pdf-target: maybe-pdf-target-libtermcap\n@@ -1571,6 +1576,7 @@ html-target: maybe-html-target-libmudflap\n html-target: maybe-html-target-libssp\n html-target: maybe-html-target-newlib\n html-target: maybe-html-target-libgcc\n+html-target: maybe-html-target-libquadmath\n html-target: maybe-html-target-libgfortran\n html-target: maybe-html-target-libobjc\n html-target: maybe-html-target-libtermcap\n@@ -1685,6 +1691,7 @@ TAGS-target: maybe-TAGS-target-libmudflap\n TAGS-target: maybe-TAGS-target-libssp\n TAGS-target: maybe-TAGS-target-newlib\n TAGS-target: maybe-TAGS-target-libgcc\n+TAGS-target: maybe-TAGS-target-libquadmath\n TAGS-target: maybe-TAGS-target-libgfortran\n TAGS-target: maybe-TAGS-target-libobjc\n TAGS-target: maybe-TAGS-target-libtermcap\n@@ -1799,6 +1806,7 @@ install-info-target: maybe-install-info-target-libmudflap\n install-info-target: maybe-install-info-target-libssp\n install-info-target: maybe-install-info-target-newlib\n install-info-target: maybe-install-info-target-libgcc\n+install-info-target: maybe-install-info-target-libquadmath\n install-info-target: maybe-install-info-target-libgfortran\n install-info-target: maybe-install-info-target-libobjc\n install-info-target: maybe-install-info-target-libtermcap\n@@ -1913,6 +1921,7 @@ install-pdf-target: maybe-install-pdf-target-libmudflap\n install-pdf-target: maybe-install-pdf-target-libssp\n install-pdf-target: maybe-install-pdf-target-newlib\n install-pdf-target: maybe-install-pdf-target-libgcc\n+install-pdf-target: maybe-install-pdf-target-libquadmath\n install-pdf-target: maybe-install-pdf-target-libgfortran\n install-pdf-target: maybe-install-pdf-target-libobjc\n install-pdf-target: maybe-install-pdf-target-libtermcap\n@@ -2027,6 +2036,7 @@ install-html-target: maybe-install-html-target-libmudflap\n install-html-target: maybe-install-html-target-libssp\n install-html-target: maybe-install-html-target-newlib\n install-html-target: maybe-install-html-target-libgcc\n+install-html-target: maybe-install-html-target-libquadmath\n install-html-target: maybe-install-html-target-libgfortran\n install-html-target: maybe-install-html-target-libobjc\n install-html-target: maybe-install-html-target-libtermcap\n@@ -2141,6 +2151,7 @@ installcheck-target: maybe-installcheck-target-libmudflap\n installcheck-target: maybe-installcheck-target-libssp\n installcheck-target: maybe-installcheck-target-newlib\n installcheck-target: maybe-installcheck-target-libgcc\n+installcheck-target: maybe-installcheck-target-libquadmath\n installcheck-target: maybe-installcheck-target-libgfortran\n installcheck-target: maybe-installcheck-target-libobjc\n installcheck-target: maybe-installcheck-target-libtermcap\n@@ -2255,6 +2266,7 @@ mostlyclean-target: maybe-mostlyclean-target-libmudflap\n mostlyclean-target: maybe-mostlyclean-target-libssp\n mostlyclean-target: maybe-mostlyclean-target-newlib\n mostlyclean-target: maybe-mostlyclean-target-libgcc\n+mostlyclean-target: maybe-mostlyclean-target-libquadmath\n mostlyclean-target: maybe-mostlyclean-target-libgfortran\n mostlyclean-target: maybe-mostlyclean-target-libobjc\n mostlyclean-target: maybe-mostlyclean-target-libtermcap\n@@ -2369,6 +2381,7 @@ clean-target: maybe-clean-target-libmudflap\n clean-target: maybe-clean-target-libssp\n clean-target: maybe-clean-target-newlib\n clean-target: maybe-clean-target-libgcc\n+clean-target: maybe-clean-target-libquadmath\n clean-target: maybe-clean-target-libgfortran\n clean-target: maybe-clean-target-libobjc\n clean-target: maybe-clean-target-libtermcap\n@@ -2483,6 +2496,7 @@ distclean-target: maybe-distclean-target-libmudflap\n distclean-target: maybe-distclean-target-libssp\n distclean-target: maybe-distclean-target-newlib\n distclean-target: maybe-distclean-target-libgcc\n+distclean-target: maybe-distclean-target-libquadmath\n distclean-target: maybe-distclean-target-libgfortran\n distclean-target: maybe-distclean-target-libobjc\n distclean-target: maybe-distclean-target-libtermcap\n@@ -2597,6 +2611,7 @@ maintainer-clean-target: maybe-maintainer-clean-target-libmudflap\n maintainer-clean-target: maybe-maintainer-clean-target-libssp\n maintainer-clean-target: maybe-maintainer-clean-target-newlib\n maintainer-clean-target: maybe-maintainer-clean-target-libgcc\n+maintainer-clean-target: maybe-maintainer-clean-target-libquadmath\n maintainer-clean-target: maybe-maintainer-clean-target-libgfortran\n maintainer-clean-target: maybe-maintainer-clean-target-libobjc\n maintainer-clean-target: maybe-maintainer-clean-target-libtermcap\n@@ -2766,6 +2781,7 @@ check-target:  \\\n     maybe-check-target-libssp \\\n     maybe-check-target-newlib \\\n     maybe-check-target-libgcc \\\n+    maybe-check-target-libquadmath \\\n     maybe-check-target-libgfortran \\\n     maybe-check-target-libobjc \\\n     maybe-check-target-libtermcap \\\n@@ -2987,6 +3003,7 @@ install-target:  \\\n     maybe-install-target-libssp \\\n     maybe-install-target-newlib \\\n     maybe-install-target-libgcc \\\n+    maybe-install-target-libquadmath \\\n     maybe-install-target-libgfortran \\\n     maybe-install-target-libobjc \\\n     maybe-install-target-libtermcap \\\n@@ -48077,6 +48094,448 @@ maintainer-clean-target-libgcc:\n \n \n \n+.PHONY: configure-target-libquadmath maybe-configure-target-libquadmath\n+maybe-configure-target-libquadmath:\n+@if gcc-bootstrap\n+configure-target-libquadmath: stage_current\n+@endif gcc-bootstrap\n+@if target-libquadmath\n+maybe-configure-target-libquadmath: configure-target-libquadmath\n+configure-target-libquadmath: \n+\t@: $(MAKE); $(unstage)\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\techo \"Checking multilib configuration for libquadmath...\"; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libquadmath ; \\\n+\t$(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/libquadmath/multilib.tmp 2> /dev/null ; \\\n+\tif test -r $(TARGET_SUBDIR)/libquadmath/multilib.out; then \\\n+\t  if cmp -s $(TARGET_SUBDIR)/libquadmath/multilib.tmp $(TARGET_SUBDIR)/libquadmath/multilib.out; then \\\n+\t    rm -f $(TARGET_SUBDIR)/libquadmath/multilib.tmp; \\\n+\t  else \\\n+\t    rm -f $(TARGET_SUBDIR)/libquadmath/Makefile; \\\n+\t    mv $(TARGET_SUBDIR)/libquadmath/multilib.tmp $(TARGET_SUBDIR)/libquadmath/multilib.out; \\\n+\t  fi; \\\n+\telse \\\n+\t  mv $(TARGET_SUBDIR)/libquadmath/multilib.tmp $(TARGET_SUBDIR)/libquadmath/multilib.out; \\\n+\tfi; \\\n+\ttest ! -f $(TARGET_SUBDIR)/libquadmath/Makefile || exit 0; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libquadmath ; \\\n+\t$(NORMAL_TARGET_EXPORTS)  \\\n+\techo Configuring in $(TARGET_SUBDIR)/libquadmath; \\\n+\tcd \"$(TARGET_SUBDIR)/libquadmath\" || exit 1; \\\n+\tcase $(srcdir) in \\\n+\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n+\t  *) topdir=`echo $(TARGET_SUBDIR)/libquadmath/ | \\\n+\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n+\tesac; \\\n+\tsrcdiroption=\"--srcdir=$${topdir}/libquadmath\"; \\\n+\tlibsrcdir=\"$$s/libquadmath\"; \\\n+\trm -f no-such-file || : ; \\\n+\tCONFIG_SITE=no-such-file $(SHELL) $${libsrcdir}/configure \\\n+\t  $(TARGET_CONFIGARGS) --build=${build_alias} --host=${target_alias} \\\n+\t  --target=${target_alias} $${srcdiroption}  \\\n+\t  || exit 1\n+@endif target-libquadmath\n+\n+\n+\n+\n+\n+.PHONY: all-target-libquadmath maybe-all-target-libquadmath\n+maybe-all-target-libquadmath:\n+@if gcc-bootstrap\n+all-target-libquadmath: stage_current\n+@endif gcc-bootstrap\n+@if target-libquadmath\n+TARGET-target-libquadmath=all\n+maybe-all-target-libquadmath: all-target-libquadmath\n+all-target-libquadmath: configure-target-libquadmath\n+\t@: $(MAKE); $(unstage)\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\t$(NORMAL_TARGET_EXPORTS)  \\\n+\t(cd $(TARGET_SUBDIR)/libquadmath && \\\n+\t  $(MAKE) $(BASE_FLAGS_TO_PASS) $(EXTRA_TARGET_FLAGS)  \\\n+\t\t$(TARGET-target-libquadmath))\n+@endif target-libquadmath\n+\n+\n+\n+\n+\n+.PHONY: check-target-libquadmath maybe-check-target-libquadmath\n+maybe-check-target-libquadmath:\n+@if target-libquadmath\n+maybe-check-target-libquadmath: check-target-libquadmath\n+\n+check-target-libquadmath:\n+\t@: $(MAKE); $(unstage)\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\t$(NORMAL_TARGET_EXPORTS) \\\n+\t(cd $(TARGET_SUBDIR)/libquadmath && \\\n+\t  $(MAKE) $(TARGET_FLAGS_TO_PASS)   check)\n+\n+@endif target-libquadmath\n+\n+.PHONY: install-target-libquadmath maybe-install-target-libquadmath\n+maybe-install-target-libquadmath:\n+@if target-libquadmath\n+maybe-install-target-libquadmath: install-target-libquadmath\n+\n+install-target-libquadmath: installdirs\n+\t@: $(MAKE); $(unstage)\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\t$(NORMAL_TARGET_EXPORTS) \\\n+\t(cd $(TARGET_SUBDIR)/libquadmath && \\\n+\t  $(MAKE) $(TARGET_FLAGS_TO_PASS)  install)\n+\n+@endif target-libquadmath\n+\n+# Other targets (info, dvi, pdf, etc.)\n+\n+.PHONY: maybe-info-target-libquadmath info-target-libquadmath\n+maybe-info-target-libquadmath:\n+@if target-libquadmath\n+maybe-info-target-libquadmath: info-target-libquadmath\n+\n+info-target-libquadmath: \\\n+    configure-target-libquadmath \n+\t@: $(MAKE); $(unstage)\n+\t@[ -f $(TARGET_SUBDIR)/libquadmath/Makefile ] || exit 0 ; \\\n+\tr=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\t$(NORMAL_TARGET_EXPORTS) \\\n+\techo \"Doing info in $(TARGET_SUBDIR)/libquadmath\" ; \\\n+\tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n+\t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n+\tdone; \\\n+\t(cd $(TARGET_SUBDIR)/libquadmath && \\\n+\t  $(MAKE) $(BASE_FLAGS_TO_PASS) \"AR=$${AR}\" \"AS=$${AS}\" \\\n+\t          \"CC=$${CC}\" \"CXX=$${CXX}\" \"LD=$${LD}\" \"NM=$${NM}\" \\\n+\t          \"RANLIB=$${RANLIB}\" \\\n+\t          \"DLLTOOL=$${DLLTOOL}\" \"WINDRES=$${WINDRES}\" \"WINDMC=$${WINDMC}\" \\\n+\t           info) \\\n+\t  || exit 1\n+\n+@endif target-libquadmath\n+\n+.PHONY: maybe-dvi-target-libquadmath dvi-target-libquadmath\n+maybe-dvi-target-libquadmath:\n+@if target-libquadmath\n+maybe-dvi-target-libquadmath: dvi-target-libquadmath\n+\n+dvi-target-libquadmath: \\\n+    configure-target-libquadmath \n+\t@: $(MAKE); $(unstage)\n+\t@[ -f $(TARGET_SUBDIR)/libquadmath/Makefile ] || exit 0 ; \\\n+\tr=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\t$(NORMAL_TARGET_EXPORTS) \\\n+\techo \"Doing dvi in $(TARGET_SUBDIR)/libquadmath\" ; \\\n+\tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n+\t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n+\tdone; \\\n+\t(cd $(TARGET_SUBDIR)/libquadmath && \\\n+\t  $(MAKE) $(BASE_FLAGS_TO_PASS) \"AR=$${AR}\" \"AS=$${AS}\" \\\n+\t          \"CC=$${CC}\" \"CXX=$${CXX}\" \"LD=$${LD}\" \"NM=$${NM}\" \\\n+\t          \"RANLIB=$${RANLIB}\" \\\n+\t          \"DLLTOOL=$${DLLTOOL}\" \"WINDRES=$${WINDRES}\" \"WINDMC=$${WINDMC}\" \\\n+\t           dvi) \\\n+\t  || exit 1\n+\n+@endif target-libquadmath\n+\n+.PHONY: maybe-pdf-target-libquadmath pdf-target-libquadmath\n+maybe-pdf-target-libquadmath:\n+@if target-libquadmath\n+maybe-pdf-target-libquadmath: pdf-target-libquadmath\n+\n+pdf-target-libquadmath: \\\n+    configure-target-libquadmath \n+\t@: $(MAKE); $(unstage)\n+\t@[ -f $(TARGET_SUBDIR)/libquadmath/Makefile ] || exit 0 ; \\\n+\tr=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\t$(NORMAL_TARGET_EXPORTS) \\\n+\techo \"Doing pdf in $(TARGET_SUBDIR)/libquadmath\" ; \\\n+\tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n+\t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n+\tdone; \\\n+\t(cd $(TARGET_SUBDIR)/libquadmath && \\\n+\t  $(MAKE) $(BASE_FLAGS_TO_PASS) \"AR=$${AR}\" \"AS=$${AS}\" \\\n+\t          \"CC=$${CC}\" \"CXX=$${CXX}\" \"LD=$${LD}\" \"NM=$${NM}\" \\\n+\t          \"RANLIB=$${RANLIB}\" \\\n+\t          \"DLLTOOL=$${DLLTOOL}\" \"WINDRES=$${WINDRES}\" \"WINDMC=$${WINDMC}\" \\\n+\t           pdf) \\\n+\t  || exit 1\n+\n+@endif target-libquadmath\n+\n+.PHONY: maybe-html-target-libquadmath html-target-libquadmath\n+maybe-html-target-libquadmath:\n+@if target-libquadmath\n+maybe-html-target-libquadmath: html-target-libquadmath\n+\n+html-target-libquadmath: \\\n+    configure-target-libquadmath \n+\t@: $(MAKE); $(unstage)\n+\t@[ -f $(TARGET_SUBDIR)/libquadmath/Makefile ] || exit 0 ; \\\n+\tr=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\t$(NORMAL_TARGET_EXPORTS) \\\n+\techo \"Doing html in $(TARGET_SUBDIR)/libquadmath\" ; \\\n+\tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n+\t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n+\tdone; \\\n+\t(cd $(TARGET_SUBDIR)/libquadmath && \\\n+\t  $(MAKE) $(BASE_FLAGS_TO_PASS) \"AR=$${AR}\" \"AS=$${AS}\" \\\n+\t          \"CC=$${CC}\" \"CXX=$${CXX}\" \"LD=$${LD}\" \"NM=$${NM}\" \\\n+\t          \"RANLIB=$${RANLIB}\" \\\n+\t          \"DLLTOOL=$${DLLTOOL}\" \"WINDRES=$${WINDRES}\" \"WINDMC=$${WINDMC}\" \\\n+\t           html) \\\n+\t  || exit 1\n+\n+@endif target-libquadmath\n+\n+.PHONY: maybe-TAGS-target-libquadmath TAGS-target-libquadmath\n+maybe-TAGS-target-libquadmath:\n+@if target-libquadmath\n+maybe-TAGS-target-libquadmath: TAGS-target-libquadmath\n+\n+TAGS-target-libquadmath: \\\n+    configure-target-libquadmath \n+\t@: $(MAKE); $(unstage)\n+\t@[ -f $(TARGET_SUBDIR)/libquadmath/Makefile ] || exit 0 ; \\\n+\tr=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\t$(NORMAL_TARGET_EXPORTS) \\\n+\techo \"Doing TAGS in $(TARGET_SUBDIR)/libquadmath\" ; \\\n+\tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n+\t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n+\tdone; \\\n+\t(cd $(TARGET_SUBDIR)/libquadmath && \\\n+\t  $(MAKE) $(BASE_FLAGS_TO_PASS) \"AR=$${AR}\" \"AS=$${AS}\" \\\n+\t          \"CC=$${CC}\" \"CXX=$${CXX}\" \"LD=$${LD}\" \"NM=$${NM}\" \\\n+\t          \"RANLIB=$${RANLIB}\" \\\n+\t          \"DLLTOOL=$${DLLTOOL}\" \"WINDRES=$${WINDRES}\" \"WINDMC=$${WINDMC}\" \\\n+\t           TAGS) \\\n+\t  || exit 1\n+\n+@endif target-libquadmath\n+\n+.PHONY: maybe-install-info-target-libquadmath install-info-target-libquadmath\n+maybe-install-info-target-libquadmath:\n+@if target-libquadmath\n+maybe-install-info-target-libquadmath: install-info-target-libquadmath\n+\n+install-info-target-libquadmath: \\\n+    configure-target-libquadmath \\\n+    info-target-libquadmath \n+\t@: $(MAKE); $(unstage)\n+\t@[ -f $(TARGET_SUBDIR)/libquadmath/Makefile ] || exit 0 ; \\\n+\tr=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\t$(NORMAL_TARGET_EXPORTS) \\\n+\techo \"Doing install-info in $(TARGET_SUBDIR)/libquadmath\" ; \\\n+\tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n+\t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n+\tdone; \\\n+\t(cd $(TARGET_SUBDIR)/libquadmath && \\\n+\t  $(MAKE) $(BASE_FLAGS_TO_PASS) \"AR=$${AR}\" \"AS=$${AS}\" \\\n+\t          \"CC=$${CC}\" \"CXX=$${CXX}\" \"LD=$${LD}\" \"NM=$${NM}\" \\\n+\t          \"RANLIB=$${RANLIB}\" \\\n+\t          \"DLLTOOL=$${DLLTOOL}\" \"WINDRES=$${WINDRES}\" \"WINDMC=$${WINDMC}\" \\\n+\t           install-info) \\\n+\t  || exit 1\n+\n+@endif target-libquadmath\n+\n+.PHONY: maybe-install-pdf-target-libquadmath install-pdf-target-libquadmath\n+maybe-install-pdf-target-libquadmath:\n+@if target-libquadmath\n+maybe-install-pdf-target-libquadmath: install-pdf-target-libquadmath\n+\n+install-pdf-target-libquadmath: \\\n+    configure-target-libquadmath \\\n+    pdf-target-libquadmath \n+\t@: $(MAKE); $(unstage)\n+\t@[ -f $(TARGET_SUBDIR)/libquadmath/Makefile ] || exit 0 ; \\\n+\tr=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\t$(NORMAL_TARGET_EXPORTS) \\\n+\techo \"Doing install-pdf in $(TARGET_SUBDIR)/libquadmath\" ; \\\n+\tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n+\t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n+\tdone; \\\n+\t(cd $(TARGET_SUBDIR)/libquadmath && \\\n+\t  $(MAKE) $(BASE_FLAGS_TO_PASS) \"AR=$${AR}\" \"AS=$${AS}\" \\\n+\t          \"CC=$${CC}\" \"CXX=$${CXX}\" \"LD=$${LD}\" \"NM=$${NM}\" \\\n+\t          \"RANLIB=$${RANLIB}\" \\\n+\t          \"DLLTOOL=$${DLLTOOL}\" \"WINDRES=$${WINDRES}\" \"WINDMC=$${WINDMC}\" \\\n+\t           install-pdf) \\\n+\t  || exit 1\n+\n+@endif target-libquadmath\n+\n+.PHONY: maybe-install-html-target-libquadmath install-html-target-libquadmath\n+maybe-install-html-target-libquadmath:\n+@if target-libquadmath\n+maybe-install-html-target-libquadmath: install-html-target-libquadmath\n+\n+install-html-target-libquadmath: \\\n+    configure-target-libquadmath \\\n+    html-target-libquadmath \n+\t@: $(MAKE); $(unstage)\n+\t@[ -f $(TARGET_SUBDIR)/libquadmath/Makefile ] || exit 0 ; \\\n+\tr=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\t$(NORMAL_TARGET_EXPORTS) \\\n+\techo \"Doing install-html in $(TARGET_SUBDIR)/libquadmath\" ; \\\n+\tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n+\t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n+\tdone; \\\n+\t(cd $(TARGET_SUBDIR)/libquadmath && \\\n+\t  $(MAKE) $(BASE_FLAGS_TO_PASS) \"AR=$${AR}\" \"AS=$${AS}\" \\\n+\t          \"CC=$${CC}\" \"CXX=$${CXX}\" \"LD=$${LD}\" \"NM=$${NM}\" \\\n+\t          \"RANLIB=$${RANLIB}\" \\\n+\t          \"DLLTOOL=$${DLLTOOL}\" \"WINDRES=$${WINDRES}\" \"WINDMC=$${WINDMC}\" \\\n+\t           install-html) \\\n+\t  || exit 1\n+\n+@endif target-libquadmath\n+\n+.PHONY: maybe-installcheck-target-libquadmath installcheck-target-libquadmath\n+maybe-installcheck-target-libquadmath:\n+@if target-libquadmath\n+maybe-installcheck-target-libquadmath: installcheck-target-libquadmath\n+\n+installcheck-target-libquadmath: \\\n+    configure-target-libquadmath \n+\t@: $(MAKE); $(unstage)\n+\t@[ -f $(TARGET_SUBDIR)/libquadmath/Makefile ] || exit 0 ; \\\n+\tr=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\t$(NORMAL_TARGET_EXPORTS) \\\n+\techo \"Doing installcheck in $(TARGET_SUBDIR)/libquadmath\" ; \\\n+\tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n+\t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n+\tdone; \\\n+\t(cd $(TARGET_SUBDIR)/libquadmath && \\\n+\t  $(MAKE) $(BASE_FLAGS_TO_PASS) \"AR=$${AR}\" \"AS=$${AS}\" \\\n+\t          \"CC=$${CC}\" \"CXX=$${CXX}\" \"LD=$${LD}\" \"NM=$${NM}\" \\\n+\t          \"RANLIB=$${RANLIB}\" \\\n+\t          \"DLLTOOL=$${DLLTOOL}\" \"WINDRES=$${WINDRES}\" \"WINDMC=$${WINDMC}\" \\\n+\t           installcheck) \\\n+\t  || exit 1\n+\n+@endif target-libquadmath\n+\n+.PHONY: maybe-mostlyclean-target-libquadmath mostlyclean-target-libquadmath\n+maybe-mostlyclean-target-libquadmath:\n+@if target-libquadmath\n+maybe-mostlyclean-target-libquadmath: mostlyclean-target-libquadmath\n+\n+mostlyclean-target-libquadmath: \n+\t@: $(MAKE); $(unstage)\n+\t@[ -f $(TARGET_SUBDIR)/libquadmath/Makefile ] || exit 0 ; \\\n+\tr=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\t$(NORMAL_TARGET_EXPORTS) \\\n+\techo \"Doing mostlyclean in $(TARGET_SUBDIR)/libquadmath\" ; \\\n+\tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n+\t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n+\tdone; \\\n+\t(cd $(TARGET_SUBDIR)/libquadmath && \\\n+\t  $(MAKE) $(BASE_FLAGS_TO_PASS) \"AR=$${AR}\" \"AS=$${AS}\" \\\n+\t          \"CC=$${CC}\" \"CXX=$${CXX}\" \"LD=$${LD}\" \"NM=$${NM}\" \\\n+\t          \"RANLIB=$${RANLIB}\" \\\n+\t          \"DLLTOOL=$${DLLTOOL}\" \"WINDRES=$${WINDRES}\" \"WINDMC=$${WINDMC}\" \\\n+\t           mostlyclean) \\\n+\t  || exit 1\n+\n+@endif target-libquadmath\n+\n+.PHONY: maybe-clean-target-libquadmath clean-target-libquadmath\n+maybe-clean-target-libquadmath:\n+@if target-libquadmath\n+maybe-clean-target-libquadmath: clean-target-libquadmath\n+\n+clean-target-libquadmath: \n+\t@: $(MAKE); $(unstage)\n+\t@[ -f $(TARGET_SUBDIR)/libquadmath/Makefile ] || exit 0 ; \\\n+\tr=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\t$(NORMAL_TARGET_EXPORTS) \\\n+\techo \"Doing clean in $(TARGET_SUBDIR)/libquadmath\" ; \\\n+\tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n+\t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n+\tdone; \\\n+\t(cd $(TARGET_SUBDIR)/libquadmath && \\\n+\t  $(MAKE) $(BASE_FLAGS_TO_PASS) \"AR=$${AR}\" \"AS=$${AS}\" \\\n+\t          \"CC=$${CC}\" \"CXX=$${CXX}\" \"LD=$${LD}\" \"NM=$${NM}\" \\\n+\t          \"RANLIB=$${RANLIB}\" \\\n+\t          \"DLLTOOL=$${DLLTOOL}\" \"WINDRES=$${WINDRES}\" \"WINDMC=$${WINDMC}\" \\\n+\t           clean) \\\n+\t  || exit 1\n+\n+@endif target-libquadmath\n+\n+.PHONY: maybe-distclean-target-libquadmath distclean-target-libquadmath\n+maybe-distclean-target-libquadmath:\n+@if target-libquadmath\n+maybe-distclean-target-libquadmath: distclean-target-libquadmath\n+\n+distclean-target-libquadmath: \n+\t@: $(MAKE); $(unstage)\n+\t@[ -f $(TARGET_SUBDIR)/libquadmath/Makefile ] || exit 0 ; \\\n+\tr=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\t$(NORMAL_TARGET_EXPORTS) \\\n+\techo \"Doing distclean in $(TARGET_SUBDIR)/libquadmath\" ; \\\n+\tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n+\t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n+\tdone; \\\n+\t(cd $(TARGET_SUBDIR)/libquadmath && \\\n+\t  $(MAKE) $(BASE_FLAGS_TO_PASS) \"AR=$${AR}\" \"AS=$${AS}\" \\\n+\t          \"CC=$${CC}\" \"CXX=$${CXX}\" \"LD=$${LD}\" \"NM=$${NM}\" \\\n+\t          \"RANLIB=$${RANLIB}\" \\\n+\t          \"DLLTOOL=$${DLLTOOL}\" \"WINDRES=$${WINDRES}\" \"WINDMC=$${WINDMC}\" \\\n+\t           distclean) \\\n+\t  || exit 1\n+\n+@endif target-libquadmath\n+\n+.PHONY: maybe-maintainer-clean-target-libquadmath maintainer-clean-target-libquadmath\n+maybe-maintainer-clean-target-libquadmath:\n+@if target-libquadmath\n+maybe-maintainer-clean-target-libquadmath: maintainer-clean-target-libquadmath\n+\n+maintainer-clean-target-libquadmath: \n+\t@: $(MAKE); $(unstage)\n+\t@[ -f $(TARGET_SUBDIR)/libquadmath/Makefile ] || exit 0 ; \\\n+\tr=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\t$(NORMAL_TARGET_EXPORTS) \\\n+\techo \"Doing maintainer-clean in $(TARGET_SUBDIR)/libquadmath\" ; \\\n+\tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n+\t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n+\tdone; \\\n+\t(cd $(TARGET_SUBDIR)/libquadmath && \\\n+\t  $(MAKE) $(BASE_FLAGS_TO_PASS) \"AR=$${AR}\" \"AS=$${AS}\" \\\n+\t          \"CC=$${CC}\" \"CXX=$${CXX}\" \"LD=$${LD}\" \"NM=$${NM}\" \\\n+\t          \"RANLIB=$${RANLIB}\" \\\n+\t          \"DLLTOOL=$${DLLTOOL}\" \"WINDRES=$${WINDRES}\" \"WINDMC=$${WINDMC}\" \\\n+\t           maintainer-clean) \\\n+\t  || exit 1\n+\n+@endif target-libquadmath\n+\n+\n+\n+\n+\n .PHONY: configure-target-libgfortran maybe-configure-target-libgfortran\n maybe-configure-target-libgfortran:\n @if gcc-bootstrap\n@@ -55635,7 +56094,7 @@ check-gcc-fortran:\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t$(HOST_EXPORTS) \\\n \t(cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) check-fortran);\n-check-fortran: check-gcc-fortran check-target-libgfortran\n+check-fortran: check-gcc-fortran check-target-libquadmath check-target-libgfortran\n \n .PHONY: check-gcc-java check-java\n check-gcc-java:\n@@ -57650,6 +58109,7 @@ configure-stage3-target-libgcc: maybe-all-stage3-gcc\n configure-stage4-target-libgcc: maybe-all-stage4-gcc\n configure-stageprofile-target-libgcc: maybe-all-stageprofile-gcc\n configure-stagefeedback-target-libgcc: maybe-all-stagefeedback-gcc\n+configure-target-libquadmath: stage_last\n configure-target-libgfortran: stage_last\n configure-target-libobjc: stage_last\n configure-target-libtermcap: stage_last\n@@ -57679,6 +58139,7 @@ configure-target-libmudflap: maybe-all-gcc\n configure-target-libssp: maybe-all-gcc\n configure-target-newlib: maybe-all-gcc\n configure-target-libgcc: maybe-all-gcc\n+configure-target-libquadmath: maybe-all-gcc\n configure-target-libgfortran: maybe-all-gcc\n configure-target-libobjc: maybe-all-gcc\n configure-target-libtermcap: maybe-all-gcc\n@@ -58466,6 +58927,7 @@ configure-target-libiberty: maybe-all-binutils\n configure-target-libiberty: maybe-all-ld\n configure-target-newlib: maybe-all-binutils\n configure-target-newlib: maybe-all-ld\n+configure-target-libgfortran: maybe-all-target-libquadmath\n \n \n # Dependencies for target modules on other target modules are\n@@ -58493,6 +58955,7 @@ configure-target-libstdc++-v3: maybe-all-target-libgcc\n configure-target-libmudflap: maybe-all-target-libgcc\n configure-target-libssp: maybe-all-target-libgcc\n configure-target-newlib: maybe-all-target-libgcc\n+configure-target-libquadmath: maybe-all-target-libgcc\n configure-target-libgfortran: maybe-all-target-libgcc\n configure-target-libobjc: maybe-all-target-libgcc\n configure-target-libtermcap: maybe-all-target-libgcc\n@@ -58520,6 +58983,8 @@ configure-target-libssp: maybe-all-target-newlib maybe-all-target-libgloss\n \n \n \n+configure-target-libquadmath: maybe-all-target-newlib maybe-all-target-libgloss\n+\n configure-target-libgfortran: maybe-all-target-newlib maybe-all-target-libgloss\n \n configure-target-libobjc: maybe-all-target-newlib maybe-all-target-libgloss"}, {"sha": "27a92a097c40af4e9f8d1cf289a512c47451dd8b", "filename": "Makefile.tpl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/Makefile.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/Makefile.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.tpl?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -1340,7 +1340,7 @@ check-gcc-[+language+]:\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t$(HOST_EXPORTS) \\\n \t(cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) [+gcc-check-target+]);\n-check-[+language+]: check-gcc-[+language+][+ IF lib-check-target +] [+ lib-check-target +][+ ENDIF lib-check-target +]\n+check-[+language+]: check-gcc-[+language+][+ FOR lib-check-target +] [+ lib-check-target +][+ ENDFOR lib-check-target +]\n [+ ENDFOR languages +]\n \n # Install the gcc headers files, but not the fixed include files,"}, {"sha": "04a623c2de93443b9729ce91424c3595f27b1078", "filename": "configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -2696,6 +2696,7 @@ target_libraries=\"target-libgcc \\\n \t\ttarget-libstdc++-v3 \\\n \t\ttarget-libmudflap \\\n \t\ttarget-libssp \\\n+\t\ttarget-libquadmath \\\n \t\ttarget-libgfortran \\\n \t\ttarget-boehm-gc \\\n \t\t${libgcj} \\"}, {"sha": "08f533109a68400f4fa9c8e260e4d3808e5d010e", "filename": "configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -195,6 +195,7 @@ target_libraries=\"target-libgcc \\\n \t\ttarget-libstdc++-v3 \\\n \t\ttarget-libmudflap \\\n \t\ttarget-libssp \\\n+\t\ttarget-libquadmath \\\n \t\ttarget-libgfortran \\\n \t\ttarget-boehm-gc \\\n \t\t${libgcj} \\"}, {"sha": "61a0df6792e4a5b996f46c5a56ec9983182f2ee4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -1,3 +1,15 @@\n+2010-11-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\t    Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/32049\n+\t* gfortranspec.c (find_spec_file): New function.\n+\t(lang_specific_driver): Try to find .spec file and use it.\n+\t* trans-io.c (iocall): Define IOCALL_X_REAL128/COMPLEX128(,write).\n+\t(gfc_build_io_library_fndecls): Build decl for __float128 I/O.\n+\t(transfer_expr): Call __float128 I/O functions.\n+\t* trans-types.c (gfc_init_kinds): Allow kind-16 belonging\n+\tto __float128.\n+\n 2010-11-15  Tobias Burnus  <burnus@net.b.de>\n \n \tPR fortran/46484"}, {"sha": "24c9093ded88901ae5eb42d81f5097425432eb30", "filename": "gcc/fortran/gfortranspec.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/gcc%2Ffortran%2Fgfortranspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/gcc%2Ffortran%2Fgfortranspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortranspec.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -63,6 +63,9 @@ along with GCC; see the file COPYING3.  If not see\n #define FORTRAN_LIBRARY \"gfortran\"\n #endif\n \n+/* Name of the spec file.  */\n+#define SPEC_FILE \"libgfortran.spec\"\n+\n /* The original argument list and related info is copied here.  */\n static unsigned int g77_xargc;\n static const struct cl_decoded_option *g77_x_decoded_options;\n@@ -72,6 +75,27 @@ static void append_arg (const struct cl_decoded_option *);\n static unsigned int g77_newargc;\n static struct cl_decoded_option *g77_new_decoded_options;\n \n+\n+/* Return full path name of spec file if it is in DIR, or NULL if\n+   not.  */\n+static char *\n+find_spec_file (const char *dir)\n+{\n+  const char dirsep_string[] = { DIR_SEPARATOR, '\\0' };\n+  char *spec;\n+  struct stat sb;\n+\n+  spec = XNEWVEC (char, strlen (dir) + sizeof (SPEC_FILE) + 4);\n+  strcpy (spec, dir);\n+  strcat (spec, dirsep_string);\n+  strcat (spec, SPEC_FILE);\n+  if (!stat (spec, &sb))\n+    return spec;\n+  free (spec);\n+  return NULL;\n+}\n+\n+\n /* Return whether strings S1 and S2 are both NULL or both the same\n    string.  */\n \n@@ -199,6 +223,9 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n   /* Whether we should link a static libgfortran. */\n   int static_lib = 0; \n \n+  /* The path to the spec file.  */\n+  char *spec_file = NULL;\n+\n   /* Whether we need to link statically.  */\n   int static_linking = 0;\n \n@@ -283,6 +310,12 @@ For more information about these matters, see the file named COPYING\\n\\n\"));\n \t     cool facility for handling --help and --verbose --help.  */\n \t  return;\n \n+\tcase OPT_L:\n+\t  if (!spec_file)\n+\t    spec_file = find_spec_file (decoded_options[i].arg);\n+\t  break;\n+\n+\n \tdefault:\n \t  break;\n \t}\n@@ -413,6 +446,11 @@ For more information about these matters, see the file named COPYING\\n\\n\"));\n \n #endif\n \n+  /* Read the specs file corresponding to libgfortran.\n+     If we didn't find the spec file on the -L path, then we hope it\n+     is somewhere in the standard install areas.  */\n+  append_option (OPT_specs_, spec_file == NULL ? SPEC_FILE : spec_file, 1);\n+\n   if (verbose && g77_new_decoded_options != g77_x_decoded_options)\n     {\n       fprintf (stderr, _(\"Driving:\"));"}, {"sha": "04ad870fb7e7259a15fc23406e0d578d4a9ea51c", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 45, "deletions": 4, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -126,6 +126,10 @@ enum iocall\n   IOCALL_X_REAL_WRITE,\n   IOCALL_X_COMPLEX,\n   IOCALL_X_COMPLEX_WRITE,\n+  IOCALL_X_REAL128,\n+  IOCALL_X_REAL128_WRITE,\n+  IOCALL_X_COMPLEX128,\n+  IOCALL_X_COMPLEX128_WRITE,\n   IOCALL_X_ARRAY,\n   IOCALL_X_ARRAY_WRITE,\n   IOCALL_OPEN,\n@@ -365,6 +369,23 @@ gfc_build_io_library_fndecls (void)\n \tget_identifier (PREFIX(\"transfer_complex_write\")), \".wR\",\n \tvoid_type_node, 3, dt_parm_type, pvoid_type_node, gfc_int4_type_node);\n \n+  /* Version for __float128.  */\n+  iocall[IOCALL_X_REAL128] = gfc_build_library_function_decl_with_spec (\n+\tget_identifier (PREFIX(\"transfer_real128\")), \".wW\",\n+\tvoid_type_node, 3, dt_parm_type, pvoid_type_node, gfc_int4_type_node);\n+\n+  iocall[IOCALL_X_REAL128_WRITE] = gfc_build_library_function_decl_with_spec (\n+\tget_identifier (PREFIX(\"transfer_real128_write\")), \".wR\",\n+\tvoid_type_node, 3, dt_parm_type, pvoid_type_node, gfc_int4_type_node);\n+\n+  iocall[IOCALL_X_COMPLEX128] = gfc_build_library_function_decl_with_spec (\n+\tget_identifier (PREFIX(\"transfer_complex128\")), \".wW\",\n+\tvoid_type_node, 3, dt_parm_type, pvoid_type_node, gfc_int4_type_node);\n+\n+  iocall[IOCALL_X_COMPLEX128_WRITE] = gfc_build_library_function_decl_with_spec (\n+\tget_identifier (PREFIX(\"transfer_complex128_write\")), \".wR\",\n+\tvoid_type_node, 3, dt_parm_type, pvoid_type_node, gfc_int4_type_node);\n+\n   iocall[IOCALL_X_ARRAY] = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"transfer_array\")), \".ww\",\n \tvoid_type_node, 4, dt_parm_type, pvoid_type_node,\n@@ -2057,18 +2078,38 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr, gfc_code * code)\n     case BT_REAL:\n       arg2 = build_int_cst (NULL_TREE, kind);\n       if (last_dt == READ)\n-\tfunction = iocall[IOCALL_X_REAL];\n+\t{\n+\t  if (gfc_real16_is_float128 && ts->kind == 16)\n+\t    function = iocall[IOCALL_X_REAL128];\n+\t  else\n+\t    function = iocall[IOCALL_X_REAL];\n+\t}\n       else\n-\tfunction = iocall[IOCALL_X_REAL_WRITE];\n+\t{\n+\t  if (gfc_real16_is_float128 && ts->kind == 16)\n+\t    function = iocall[IOCALL_X_REAL128_WRITE];\n+\t  else\n+\t    function = iocall[IOCALL_X_REAL_WRITE];\n+\t}\n \n       break;\n \n     case BT_COMPLEX:\n       arg2 = build_int_cst (NULL_TREE, kind);\n       if (last_dt == READ)\n-\tfunction = iocall[IOCALL_X_COMPLEX];\n+\t{\n+\t  if (gfc_real16_is_float128 && ts->kind == 16)\n+\t    function = iocall[IOCALL_X_COMPLEX128];\n+\t  else\n+\t    function = iocall[IOCALL_X_COMPLEX];\n+\t}\n       else\n-\tfunction = iocall[IOCALL_X_COMPLEX_WRITE];\n+\t{\n+\t  if (gfc_real16_is_float128 && ts->kind == 16)\n+\t    function = iocall[IOCALL_X_COMPLEX128_WRITE];\n+\t  else\n+\t    function = iocall[IOCALL_X_COMPLEX_WRITE];\n+\t}\n \n       break;\n "}, {"sha": "0571bd1e742a653a1a422bb81c4622843cb5ae54", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -418,8 +418,12 @@ gfc_init_kinds (void)\n \t useless.  TODO: TFmode support should be enabled once libgfortran\n \t support is done.  */\n \tif (mode != TYPE_MODE (float_type_node)\n-\t  && (mode != TYPE_MODE (double_type_node))\n-          && (mode != TYPE_MODE (long_double_type_node)))\n+\t    && (mode != TYPE_MODE (double_type_node))\n+\t    && (mode != TYPE_MODE (long_double_type_node))\n+#ifdef LIBGCC2_HAS_TF_MODE\n+\t    && (mode != TFmode)\n+#endif\n+\t   )\n \tcontinue;\n \n       /* Let the kind equal the precision divided by 8, rounding up.  Again,"}, {"sha": "f6f967177078bcc33234f90d0578002eb174e67b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -1,3 +1,15 @@\n+2010-11-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\t    Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/32049\n+\t* gfortran.dg/quad_1.f90: New.\n+\t* lib/gcc-defs.exp (gcc-set-multilib-library-path): Use also\n+\tcompiler arguments.\n+\t* lib/gfortran.exp (gfortran_link_flags): Add libquadmath to\n+\tlibrary search path; call gcc-set-multilib-library-path with\n+\targuments such that libgfortran.spec is found.\n+\t(gfortran_init): Add path for libgfortran.spec to GFORTRAN_UNDER_TEST.\n+\n 2010-11-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/46401"}, {"sha": "7d4322e5a748e3dacf6328e5d0d4c9266494340d", "filename": "gcc/testsuite/gfortran.dg/quad_1.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/gcc%2Ftestsuite%2Fgfortran.dg%2Fquad_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/gcc%2Ftestsuite%2Fgfortran.dg%2Fquad_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fquad_1.f90?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do link }\n+!\n+! This test checks whether the largest possible\n+! floating-point number works. That's usually\n+! REAL(16) -- either because the hardware supports it or\n+! because of libquadmath. However, it can also be\n+! REAL(10) or REAL(8)\n+!\n+program test_qp\n+   use iso_fortran_env, only: real_kinds\n+   implicit none\n+   integer, parameter :: QP = real_kinds(ubound(real_kinds,dim=1))\n+   real(QP), parameter :: Z1 = 1,HALF_PI = asin(Z1),PI = HALF_PI+HALF_PI\n+   real(QP) :: x = 0.124_QP\n+   complex(QP) :: z = 0.124_QP\n+   print *, 'kind = ', qp\n+   print *, x\n+   print *, PI\n+   print *, 16*atan(0.2_QP)-4*atan(Z1/239)\n+   print *, sin(PI)\n+   print *, cos(HALF_PI)\n+   print *, asinh(PI)\n+   print *, erfc(Z1)\n+   print *, epsilon(x)\n+   print *, precision(x)\n+   print *, digits(x)\n+\n+   print *, z\n+   print *, PI*cmplx(0.0_qp, 1.0_qp)\n+   print *, 16*atan(0.2_QP)-4*atan(Z1/239)\n+   print *, sin(z)\n+   print *, cos(z)\n+   print *, sinh(z) ! asinh not implemented, cf. PR 46416\n+   print *, precision(z)\n+end program test_qp"}, {"sha": "af898e5aa78eb325750635657792ecba701c9b8a", "filename": "gcc/testsuite/lib/gcc-defs.exp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -250,9 +250,10 @@ proc gcc-set-multilib-library-path { compiler } {\n     }\n \n     set libpath \":${rootme}\"\n+    set options [lrange $compiler 1 end]\n     set compiler [lindex $compiler 0]\n     if { [is_remote host] == 0 && [which $compiler] != 0 } {\n-\tforeach i \"[exec $compiler --print-multi-lib]\" {\n+\tforeach i \"[exec $compiler $options --print-multi-lib]\" {\n \t    set mldir \"\"\n \t    regexp -- \"\\[a-z0-9=_/\\.-\\]*;\" $i mldir\n \t    set mldir [string trimright $mldir \"\\;@\"]"}, {"sha": "be4e7feb81bcfc4babc624a4f3a761e094335836", "filename": "gcc/testsuite/lib/gfortran.exp", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/gcc%2Ftestsuite%2Flib%2Fgfortran.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/gcc%2Ftestsuite%2Flib%2Fgfortran.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgfortran.exp?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -103,11 +103,22 @@ proc gfortran_link_flags { paths } {\n       if [file exists \"${gccpath}/libgfortran/libgforbegin.a\"] {\n           append flags \"-L${gccpath}/libgfortran \"\n       }\n+      if [file exists \"${gccpath}/libquadmath/.libs/libquadmath.a\"] {\n+          # Some targets use libquadmath.a%s in their specs, so they need a -B option\n+          # for uninstalled testing.\n+          append flags \"-B${gccpath}/libquadmath/.libs \"\n+          append flags \"-L${gccpath}/libquadmath/.libs \"\n+          append ld_library_path \":${gccpath}/libquadmath/.libs\"\n+      }\n+      if [file exists \"${gccpath}/libquadmath/.libs/libquadmath.${shlib_ext}\"] {\n+\t  append flags \"-L${gccpath}/libquadmath/.libs \"\n+\t  append ld_library_path \":${gccpath}/libquadmath/.libs\"\n+      }\n       if [file exists \"${gccpath}/libiberty/libiberty.a\"] {\n           append flags \"-L${gccpath}/libiberty \"\n       }\n       append ld_library_path \\\n-\t[gcc-set-multilib-library-path $GFORTRAN_UNDER_TEST]\n+\t[gcc-set-multilib-library-path { $GFORTRAN_UNDER_TEST } ]\n     }\n \n     set_ld_library_path_env_vars\n@@ -150,7 +161,12 @@ proc gfortran_init { args } {\n \t    if { [is_remote host] || ! [info exists TESTING_IN_BUILD_TREE] } {\n \t\tset GFORTRAN_UNDER_TEST [transform gfortran]\n \t    } else {\n-\t\tset GFORTRAN_UNDER_TEST [findfile $base_dir/../../gfortran \"$base_dir/../../gfortran -B$base_dir/../../\" [findfile $base_dir/gfortran \"$base_dir/gfortran -B$base_dir/\" [transform gfortran]]]\n+\t\tif [info exists TOOL_OPTIONS] {\n+\t            set specpath [get_multilibs ${TOOL_OPTIONS}]\n+\t\t} else {\n+\t\t    set specpath [get_multilibs]\n+\t\t}\n+\t\tset GFORTRAN_UNDER_TEST [findfile $base_dir/../../gfortran \"$base_dir/../../gfortran -B$base_dir/../../ -L$specpath/libgfortran\" [findfile $base_dir/gfortran \"$base_dir/gfortran -B$base_dir/\" [transform gfortran]]]\n \t    }\n \t}\n     }"}, {"sha": "51dacdde132b03347515c9e69ce260438e2c07d6", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -1,3 +1,48 @@\n+2010-11-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\t    Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/32049\n+\t* Makefile.am: Add missing pow_r16_i4.c, add transfer128.c,\n+\tlink libquadmath, if used.\n+\t* acinclude.m4 (LIBGFOR_CHECK_FLOAT128): Add.\n+\t* configure.ac: Use it, touch spec file.\n+\t* gfortran.map: Add pow_r16_i4 and\n+\ttransfer_(real,complex)128(,write) functions.\n+\t* intrinsics/cshift0.c (cshift0): Handle __float128 type.\n+\t* intrinsics/erfc_scaled_inc.c: Ditto.\n+\t* intrinsics/pack_generic.c (pack): Ditto\n+\t* intrinsics/spread_generic.c (spread): Ditto.\n+\t* intrinsics/unpack_generic.c (unpack1): Ditto.\n+\t* io/read.c (convert_real): Ditto.\n+\t* io/transfer.c: Update comments.\n+\t* io/transfer128.c: New file.\n+\t* io/write_float.def (write_float): Handle __float128 type.\n+\t* libgfortran.h: #include quadmath_weak.h, define __builtin_infq\n+\tand nanq.\n+\t* m4/mtype.m4: Handle __float128 type.\n+\t* runtime/in_pack_generic.c (internal_pack): Ditto.\n+\t* runtime/in_unpack_generic.c (internal_unpack): Ditto.\n+\t* kinds-override.h: New file.\n+\t* libgfortran.spec.in: Ditto.\n+\t* generated/pow_r16_i4.c: Generated.\n+\t* Makefile.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* config.h: Regenerate.\n+\t* bessel_r10.c: Regenerate.\n+\t* bessel_r16.c: Regenerate.\n+\t* bessel_r4.c: Regenerate.\n+\t* bessel_r8.c: Regenerate.\n+\t* exponent_r16.c: Regenerate.\n+\t* fraction_r16.c: Regenerate.\n+\t* nearest_r16.c: Regenerate.\n+\t* norm2_r10.c: Regenerate.\n+\t* norm2_r16.c: Regenerate.\n+\t* norm2_r4.c: Regenerate.\n+\t* norm2_r8.c: Regenerate.\n+\t* rrspacing_r16.c: Regenerate.\n+\t* set_exponent_r16.c: Regenerate.\n+\t* spacing_r16.c: Regenerate.\n+\n 2010-11-09  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \t* io/unix.c (struct unix_stream): Add st_dev and st_ino members."}, {"sha": "d9e6c64788b7eabaad995f7dfc206f41f62d47d2", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -34,9 +34,10 @@ LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS)) \\\n \t    -no-undefined -bindir \"$(bindir)\"\n \n toolexeclib_LTLIBRARIES = libgfortran.la\n+toolexeclib_DATA = libgfortran.spec\n libgfortran_la_LINK = $(LINK) $(libgfortran_la_LDFLAGS)\n-libgfortran_la_LDFLAGS = -version-info `grep -v '^\\#' $(srcdir)/libtool-version` $(LTLDFLAGS) -lm $(extra_ldflags_libgfortran) $(version_arg)\n-libgfortran_la_DEPENDENCIES = $(version_dep)\n+libgfortran_la_LDFLAGS = -version-info `grep -v '^\\#' $(srcdir)/libtool-version` $(LTLDFLAGS) $(LIBQUADLIB) -lm $(extra_ldflags_libgfortran) $(version_arg)\n+libgfortran_la_DEPENDENCIES = $(version_dep) libgfortran.spec $(LIBQUADLIB_DEP)\n \n myexeclib_LTLIBRARIES = libgfortranbegin.la\n myexeclibdir = $(libdir)/gcc/$(target_alias)/$(gcc_version)$(MULTISUBDIR)\n@@ -47,7 +48,7 @@ libgfortranbegin_la_LINK = $(LINK) $(libgfortranbegin_la_LDFLAGS)\n ## io.h conflicts with a system header on some platforms, so\n ## use -iquote\n AM_CPPFLAGS = -iquote$(srcdir)/io -I$(srcdir)/$(MULTISRCTOP)../gcc \\\n-\t      -I$(srcdir)/$(MULTISRCTOP)../gcc/config \\\n+\t      -I$(srcdir)/$(MULTISRCTOP)../gcc/config $(LIBQUADINCLUDE) \\\n \t      -I$(MULTIBUILDTOP)../../$(host_subdir)/gcc -D_GNU_SOURCE\n \n # Fortran rules for complex multiplication and division\n@@ -71,6 +72,7 @@ io/open.c \\\n io/read.c \\\n io/size_from_kind.c \\\n io/transfer.c \\\n+io/transfer128.c \\\n io/unit.c \\\n io/unix.c \\\n io/write.c \\\n@@ -543,6 +545,7 @@ i_pow_c = \\\n $(srcdir)/generated/pow_i4_i4.c \\\n $(srcdir)/generated/pow_i8_i4.c \\\n $(srcdir)/generated/pow_i16_i4.c \\\n+$(srcdir)/generated/pow_r16_i4.c \\\n $(srcdir)/generated/pow_c4_i4.c \\\n $(srcdir)/generated/pow_c8_i4.c \\\n $(srcdir)/generated/pow_c10_i4.c \\"}, {"sha": "da68aefed6880a5a04b68150136e5e270625cee9", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 69, "deletions": 21, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -15,6 +15,7 @@\n \n @SET_MAKE@\n \n+\n VPATH = @srcdir@\n pkgdatadir = $(datadir)/@PACKAGE@\n pkgincludedir = $(includedir)/@PACKAGE@\n@@ -42,7 +43,7 @@ subdir = .\n DIST_COMMON = ChangeLog $(srcdir)/Makefile.in $(srcdir)/Makefile.am \\\n \t$(top_srcdir)/configure $(am__configure_deps) \\\n \t$(srcdir)/config.h.in $(srcdir)/../mkinstalldirs \\\n-\t$(srcdir)/../depcomp\n+\t$(srcdir)/libgfortran.spec.in $(srcdir)/../depcomp\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/../config/depstand.m4 \\\n \t$(top_srcdir)/../config/lead-dot.m4 \\\n@@ -60,7 +61,7 @@ am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\\n  configure.lineno config.status.lineno\n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = config.h\n-CONFIG_CLEAN_FILES =\n+CONFIG_CLEAN_FILES = libgfortran.spec\n CONFIG_CLEAN_VPATH_FILES =\n am__vpath_adj_setup = srcdirstrip=`echo \"$(srcdir)\" | sed 's|.|.|g'`;\n am__vpath_adj = case $$p in \\\n@@ -84,7 +85,7 @@ am__base_list = \\\n   sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\\n/ /g' | \\\n   sed '$$!N;$$!N;$$!N;$$!N;s/\\n/ /g'\n am__installdirs = \"$(DESTDIR)$(myexeclibdir)\" \\\n-\t\"$(DESTDIR)$(toolexeclibdir)\"\n+\t\"$(DESTDIR)$(toolexeclibdir)\" \"$(DESTDIR)$(toolexeclibdir)\"\n LTLIBRARIES = $(myexeclib_LTLIBRARIES) $(toolexeclib_LTLIBRARIES)\n libgfortran_la_LIBADD =\n am__objects_1 = backtrace.lo bounds.lo compile_options.lo \\\n@@ -186,14 +187,14 @@ am__objects_31 = nearest_r4.lo nearest_r8.lo nearest_r10.lo \\\n \tnearest_r16.lo\n am__objects_32 = set_exponent_r4.lo set_exponent_r8.lo \\\n \tset_exponent_r10.lo set_exponent_r16.lo\n-am__objects_33 = pow_i4_i4.lo pow_i8_i4.lo pow_i16_i4.lo pow_c4_i4.lo \\\n-\tpow_c8_i4.lo pow_c10_i4.lo pow_c16_i4.lo pow_i4_i8.lo \\\n-\tpow_i8_i8.lo pow_i16_i8.lo pow_r4_i8.lo pow_r8_i8.lo \\\n-\tpow_r10_i8.lo pow_r16_i8.lo pow_c4_i8.lo pow_c8_i8.lo \\\n-\tpow_c10_i8.lo pow_c16_i8.lo pow_i4_i16.lo pow_i8_i16.lo \\\n-\tpow_i16_i16.lo pow_r4_i16.lo pow_r8_i16.lo pow_r10_i16.lo \\\n-\tpow_r16_i16.lo pow_c4_i16.lo pow_c8_i16.lo pow_c10_i16.lo \\\n-\tpow_c16_i16.lo\n+am__objects_33 = pow_i4_i4.lo pow_i8_i4.lo pow_i16_i4.lo pow_r16_i4.lo \\\n+\tpow_c4_i4.lo pow_c8_i4.lo pow_c10_i4.lo pow_c16_i4.lo \\\n+\tpow_i4_i8.lo pow_i8_i8.lo pow_i16_i8.lo pow_r4_i8.lo \\\n+\tpow_r8_i8.lo pow_r10_i8.lo pow_r16_i8.lo pow_c4_i8.lo \\\n+\tpow_c8_i8.lo pow_c10_i8.lo pow_c16_i8.lo pow_i4_i16.lo \\\n+\tpow_i8_i16.lo pow_i16_i16.lo pow_r4_i16.lo pow_r8_i16.lo \\\n+\tpow_r10_i16.lo pow_r16_i16.lo pow_c4_i16.lo pow_c8_i16.lo \\\n+\tpow_c10_i16.lo pow_c16_i16.lo\n am__objects_34 = rrspacing_r4.lo rrspacing_r8.lo rrspacing_r10.lo \\\n \trrspacing_r16.lo\n am__objects_35 = spacing_r4.lo spacing_r8.lo spacing_r10.lo \\\n@@ -228,7 +229,8 @@ am__objects_40 = $(am__objects_2) $(am__objects_3) $(am__objects_4) \\\n \t$(am__objects_38) $(am__objects_39)\n am__objects_41 = close.lo file_pos.lo format.lo inquire.lo \\\n \tintrinsics.lo list_read.lo lock.lo open.lo read.lo \\\n-\tsize_from_kind.lo transfer.lo unit.lo unix.lo write.lo fbuf.lo\n+\tsize_from_kind.lo transfer.lo transfer128.lo unit.lo unix.lo \\\n+\twrite.lo fbuf.lo\n am__objects_42 = associated.lo abort.lo access.lo args.lo \\\n \tbit_intrinsics.lo c99_functions.lo chdir.lo chmod.lo clock.lo \\\n \tcpu_time.lo cshift0.lo ctime.lo date_and_time.lo dtime.lo \\\n@@ -318,6 +320,7 @@ MULTIDIRS =\n MULTISUBDIR = \n MULTIDO = true\n MULTICLEAN = true\n+DATA = $(toolexeclib_DATA)\n ETAGS = etags\n CTAGS = ctags\n ACLOCAL = @ACLOCAL@\n@@ -366,6 +369,10 @@ INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@\n LD = @LD@\n LDFLAGS = @LDFLAGS@\n LIBOBJS = @LIBOBJS@\n+LIBQUADINCLUDE = @LIBQUADINCLUDE@\n+LIBQUADLIB = @LIBQUADLIB@\n+LIBQUADLIB_DEP = @LIBQUADLIB_DEP@\n+LIBQUADSPEC = @LIBQUADSPEC@\n LIBS = @LIBS@\n LIBTOOL = @LIBTOOL@\n LIPO = @LIPO@\n@@ -474,16 +481,17 @@ LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS)) \\\n \t    -no-undefined -bindir \"$(bindir)\"\n \n toolexeclib_LTLIBRARIES = libgfortran.la\n+toolexeclib_DATA = libgfortran.spec\n libgfortran_la_LINK = $(LINK) $(libgfortran_la_LDFLAGS)\n-libgfortran_la_LDFLAGS = -version-info `grep -v '^\\#' $(srcdir)/libtool-version` $(LTLDFLAGS) -lm $(extra_ldflags_libgfortran) $(version_arg)\n-libgfortran_la_DEPENDENCIES = $(version_dep)\n+libgfortran_la_LDFLAGS = -version-info `grep -v '^\\#' $(srcdir)/libtool-version` $(LTLDFLAGS) $(LIBQUADLIB) -lm $(extra_ldflags_libgfortran) $(version_arg)\n+libgfortran_la_DEPENDENCIES = $(version_dep) libgfortran.spec $(LIBQUADLIB_DEP)\n myexeclib_LTLIBRARIES = libgfortranbegin.la\n myexeclibdir = $(libdir)/gcc/$(target_alias)/$(gcc_version)$(MULTISUBDIR)\n libgfortranbegin_la_SOURCES = fmain.c\n libgfortranbegin_la_LDFLAGS = -static\n libgfortranbegin_la_LINK = $(LINK) $(libgfortranbegin_la_LDFLAGS)\n AM_CPPFLAGS = -iquote$(srcdir)/io -I$(srcdir)/$(MULTISRCTOP)../gcc \\\n-\t      -I$(srcdir)/$(MULTISRCTOP)../gcc/config \\\n+\t      -I$(srcdir)/$(MULTISRCTOP)../gcc/config $(LIBQUADINCLUDE) \\\n \t      -I$(MULTIBUILDTOP)../../$(host_subdir)/gcc -D_GNU_SOURCE\n \n gfor_io_src = \\\n@@ -498,6 +506,7 @@ io/open.c \\\n io/read.c \\\n io/size_from_kind.c \\\n io/transfer.c \\\n+io/transfer128.c \\\n io/unit.c \\\n io/unix.c \\\n io/write.c \\\n@@ -969,6 +978,7 @@ i_pow_c = \\\n $(srcdir)/generated/pow_i4_i4.c \\\n $(srcdir)/generated/pow_i8_i4.c \\\n $(srcdir)/generated/pow_i16_i4.c \\\n+$(srcdir)/generated/pow_r16_i4.c \\\n $(srcdir)/generated/pow_c4_i4.c \\\n $(srcdir)/generated/pow_c8_i4.c \\\n $(srcdir)/generated/pow_c10_i4.c \\\n@@ -1295,6 +1305,8 @@ $(srcdir)/config.h.in: @MAINTAINER_MODE_TRUE@ $(am__configure_deps)\n \n distclean-hdr:\n \t-rm -f config.h stamp-h1\n+libgfortran.spec: $(top_builddir)/config.status $(srcdir)/libgfortran.spec.in\n+\tcd $(top_builddir) && $(SHELL) ./config.status $@\n install-myexeclibLTLIBRARIES: $(myexeclib_LTLIBRARIES)\n \t@$(NORMAL_INSTALL)\n \ttest -z \"$(myexeclibdir)\" || $(MKDIR_P) \"$(DESTDIR)$(myexeclibdir)\"\n@@ -1712,6 +1724,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pow_r10_i16.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pow_r10_i8.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pow_r16_i16.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pow_r16_i4.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pow_r16_i8.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pow_r4_i16.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pow_r4_i8.Plo@am__quote@\n@@ -1804,6 +1817,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/system_clock.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/time.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/transfer.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/transfer128.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/transpose_c10.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/transpose_c16.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/transpose_c4.Plo@am__quote@\n@@ -4401,6 +4415,13 @@ pow_i16_i4.lo: $(srcdir)/generated/pow_i16_i4.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_i16_i4.lo `test -f '$(srcdir)/generated/pow_i16_i4.c' || echo '$(srcdir)/'`$(srcdir)/generated/pow_i16_i4.c\n \n+pow_r16_i4.lo: $(srcdir)/generated/pow_r16_i4.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_r16_i4.lo -MD -MP -MF $(DEPDIR)/pow_r16_i4.Tpo -c -o pow_r16_i4.lo `test -f '$(srcdir)/generated/pow_r16_i4.c' || echo '$(srcdir)/'`$(srcdir)/generated/pow_r16_i4.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/pow_r16_i4.Tpo $(DEPDIR)/pow_r16_i4.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='$(srcdir)/generated/pow_r16_i4.c' object='pow_r16_i4.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_r16_i4.lo `test -f '$(srcdir)/generated/pow_r16_i4.c' || echo '$(srcdir)/'`$(srcdir)/generated/pow_r16_i4.c\n+\n pow_c4_i4.lo: $(srcdir)/generated/pow_c4_i4.c\n @am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_c4_i4.lo -MD -MP -MF $(DEPDIR)/pow_c4_i4.Tpo -c -o pow_c4_i4.lo `test -f '$(srcdir)/generated/pow_c4_i4.c' || echo '$(srcdir)/'`$(srcdir)/generated/pow_c4_i4.c\n @am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/pow_c4_i4.Tpo $(DEPDIR)/pow_c4_i4.Plo\n@@ -5080,6 +5101,13 @@ transfer.lo: io/transfer.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o transfer.lo `test -f 'io/transfer.c' || echo '$(srcdir)/'`io/transfer.c\n \n+transfer128.lo: io/transfer128.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT transfer128.lo -MD -MP -MF $(DEPDIR)/transfer128.Tpo -c -o transfer128.lo `test -f 'io/transfer128.c' || echo '$(srcdir)/'`io/transfer128.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/transfer128.Tpo $(DEPDIR)/transfer128.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='io/transfer128.c' object='transfer128.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o transfer128.lo `test -f 'io/transfer128.c' || echo '$(srcdir)/'`io/transfer128.c\n+\n unit.lo: io/unit.c\n @am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT unit.lo -MD -MP -MF $(DEPDIR)/unit.Tpo -c -o unit.lo `test -f 'io/unit.c' || echo '$(srcdir)/'`io/unit.c\n @am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/unit.Tpo $(DEPDIR)/unit.Plo\n@@ -5578,6 +5606,26 @@ distclean-multi:\n \t$(MULTICLEAN) $(AM_MAKEFLAGS) DO=distclean multi-clean # $(MAKE)\n maintainer-clean-multi:\n \t$(MULTICLEAN) $(AM_MAKEFLAGS) DO=maintainer-clean multi-clean # $(MAKE)\n+install-toolexeclibDATA: $(toolexeclib_DATA)\n+\t@$(NORMAL_INSTALL)\n+\ttest -z \"$(toolexeclibdir)\" || $(MKDIR_P) \"$(DESTDIR)$(toolexeclibdir)\"\n+\t@list='$(toolexeclib_DATA)'; test -n \"$(toolexeclibdir)\" || list=; \\\n+\tfor p in $$list; do \\\n+\t  if test -f \"$$p\"; then d=; else d=\"$(srcdir)/\"; fi; \\\n+\t  echo \"$$d$$p\"; \\\n+\tdone | $(am__base_list) | \\\n+\twhile read files; do \\\n+\t  echo \" $(INSTALL_DATA) $$files '$(DESTDIR)$(toolexeclibdir)'\"; \\\n+\t  $(INSTALL_DATA) $$files \"$(DESTDIR)$(toolexeclibdir)\" || exit $$?; \\\n+\tdone\n+\n+uninstall-toolexeclibDATA:\n+\t@$(NORMAL_UNINSTALL)\n+\t@list='$(toolexeclib_DATA)'; test -n \"$(toolexeclibdir)\" || list=; \\\n+\tfiles=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \\\n+\ttest -n \"$$files\" || exit 0; \\\n+\techo \" ( cd '$(DESTDIR)$(toolexeclibdir)' && rm -f\" $$files \")\"; \\\n+\tcd \"$(DESTDIR)$(toolexeclibdir)\" && rm -f $$files\n \n ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)\n \tlist='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \\\n@@ -5633,9 +5681,9 @@ distclean-tags:\n check-am: all-am\n check: $(BUILT_SOURCES)\n \t$(MAKE) $(AM_MAKEFLAGS) check-am\n-all-am: Makefile $(LTLIBRARIES) all-multi config.h\n+all-am: Makefile $(LTLIBRARIES) all-multi $(DATA) config.h\n installdirs:\n-\tfor dir in \"$(DESTDIR)$(myexeclibdir)\" \"$(DESTDIR)$(toolexeclibdir)\"; do \\\n+\tfor dir in \"$(DESTDIR)$(myexeclibdir)\" \"$(DESTDIR)$(toolexeclibdir)\" \"$(DESTDIR)$(toolexeclibdir)\"; do \\\n \t  test -z \"$$dir\" || $(MKDIR_P) \"$$dir\"; \\\n \tdone\n install: $(BUILT_SOURCES)\n@@ -5696,7 +5744,7 @@ install-dvi: install-dvi-am\n install-dvi-am:\n \n install-exec-am: install-multi install-myexeclibLTLIBRARIES \\\n-\tinstall-toolexeclibLTLIBRARIES\n+\tinstall-toolexeclibDATA install-toolexeclibLTLIBRARIES\n \n install-html: install-html-am\n \n@@ -5738,7 +5786,7 @@ ps: ps-am\n \n ps-am:\n \n-uninstall-am: uninstall-myexeclibLTLIBRARIES \\\n+uninstall-am: uninstall-myexeclibLTLIBRARIES uninstall-toolexeclibDATA \\\n \tuninstall-toolexeclibLTLIBRARIES\n \n .MAKE: all all-multi check clean-multi distclean-multi install \\\n@@ -5755,13 +5803,13 @@ uninstall-am: uninstall-myexeclibLTLIBRARIES \\\n \tinstall-exec-am install-html install-html-am install-info \\\n \tinstall-info-am install-man install-multi \\\n \tinstall-myexeclibLTLIBRARIES install-pdf install-pdf-am \\\n-\tinstall-ps install-ps-am install-strip \\\n+\tinstall-ps install-ps-am install-strip install-toolexeclibDATA \\\n \tinstall-toolexeclibLTLIBRARIES installcheck installcheck-am \\\n \tinstalldirs maintainer-clean maintainer-clean-generic \\\n \tmaintainer-clean-multi mostlyclean mostlyclean-compile \\\n \tmostlyclean-generic mostlyclean-libtool mostlyclean-multi pdf \\\n \tpdf-am ps ps-am tags uninstall uninstall-am \\\n-\tuninstall-myexeclibLTLIBRARIES \\\n+\tuninstall-myexeclibLTLIBRARIES uninstall-toolexeclibDATA \\\n \tuninstall-toolexeclibLTLIBRARIES\n \n @LIBGFOR_USE_SYMVER_SUN_TRUE@@LIBGFOR_USE_SYMVER_TRUE@gfortran.map-sun : $(srcdir)/gfortran.map \\"}, {"sha": "cb016f188acb5cd32b08b865928929771a4e9df1", "filename": "libgfortran/acinclude.m4", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Facinclude.m4?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -275,3 +275,79 @@ esac])\n     AC_DEFINE(HAVE_BROKEN_POWF, 1, [Define if powf is broken.])\n   fi\n ])\n+\n+dnl Check whether we have a __float128 type\n+AC_DEFUN([LIBGFOR_CHECK_FLOAT128], [\n+  LIBQUADSPEC=\n+  AC_CACHE_CHECK([whether we have a usable __float128 type],\n+                 libgfor_cv_have_float128, [\n+    AC_TRY_LINK([\n+/* no header */\n+],[\n+  typedef _Complex float __attribute__((mode(TC))) __complex128;\n+\n+  __float128 x;\n+  x = __builtin_huge_valq() - 2.e1000Q;\n+\n+  __complex128 z1, z2;\n+  z1 = x;\n+  z2 = 2.Q;\n+\n+  z1 /= z2;\n+  z1 /= 7.Q;\n+],\n+    libgfor_cv_have_float128=yes,\n+    libgfor_cv_have_float128=no)\n+  ])\n+\n+  if test \"x$libgfor_cv_have_float128\" = xyes; then\n+    AC_DEFINE(HAVE_FLOAT128, 1, [Define if have a usable __float128 type.])\n+\n+    dnl Check whether -Wl,--as-needed is supported\n+    dnl \n+    dnl Turn warnings into error to avoid testsuite breakage.  So enable\n+    dnl AC_LANG_WERROR, but there's currently (autoconf 2.64) no way to turn\n+    dnl it off again.  As a workaround, save and restore werror flag like\n+    dnl AC_PATH_XTRA.\n+    dnl Cf. http://gcc.gnu.org/ml/gcc-patches/2010-05/msg01889.html\n+    ac_xsave_[]_AC_LANG_ABBREV[]_werror_flag=$ac_[]_AC_LANG_ABBREV[]_werror_flag\n+    AC_CACHE_CHECK([whether --as-needed works],\n+      [libgfor_cv_have_as_needed],\n+      [\n+      save_LDFLAGS=\"$LDFLAGS\"\n+      LDFLAGS=\"$LDFLAGS -Wl,--as-needed -lm -Wl,--no-as-needed\"\n+      libgfor_cv_have_as_needed=no\n+      AC_LANG_WERROR\n+      AC_LINK_IFELSE([AC_LANG_PROGRAM([])],\n+\t\t     [libgfor_cv_have_as_needed=yes],\n+\t\t     [libgfor_cv_have_as_needed=no])\n+      LDFLAGS=\"$save_LDFLAGS\"\n+      ac_[]_AC_LANG_ABBREV[]_werror_flag=$ac_xsave_[]_AC_LANG_ABBREV[]_werror_flag\n+    ])\n+\n+    dnl For static libgfortran linkage, depend on libquadmath only if needed.\n+    if test \"x$libgfor_cv_have_as_needed\" = xyes; then\n+      LIBQUADSPEC=\"%{static-libgfortran:--as-needed} -lquadmath %{static-libgfortran:--no-as-needed}\"\n+    else\n+      LIBQUADSPEC=\"-lquadmath\"\n+    fi\n+    if test -f ../libquadmath/libquadmath.la; then\n+      LIBQUADLIB=../libquadmath/libquadmath.la\n+      LIBQUADLIB_DEP=../libquadmath/libquadmath.la\n+      LIBQUADINCLUDE='-I$(srcdir)/../libquadmath'\n+    else\n+      LIBQUADLIB=\"-lquadmath\"\n+      LIBQUADLIB_DEP=\n+      LIBQUADINCLUDE=\n+    fi\n+  fi\n+\n+  dnl For the spec file\n+  AC_SUBST(LIBQUADSPEC)\n+  AC_SUBST(LIBQUADLIB)\n+  AC_SUBST(LIBQUADLIB_DEP)\n+  AC_SUBST(LIBQUADINCLUDE)\n+\n+  dnl We need a conditional for the Makefile\n+  AM_CONDITIONAL(LIBGFOR_BUILD_QUAD, [test \"x$libgfor_cv_have_float128\" = xyes])\n+])"}, {"sha": "bd6db109c63d72e57214c5ac4654e5a1be73eed3", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -381,6 +381,9 @@\n /* Define to 1 if you have the <fenv.h> header file. */\n #undef HAVE_FENV_H\n \n+/* Define if have a usable __float128 type. */\n+#undef HAVE_FLOAT128\n+\n /* Define to 1 if you have the <floatingpoint.h> header file. */\n #undef HAVE_FLOATINGPOINT_H\n "}, {"sha": "a9d80922bf3f3e24cafc32c6e5614da69f4cfac7", "filename": "libgfortran/configure", "status": "modified", "additions": 144, "deletions": 4, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -597,12 +597,19 @@ ac_includes_default=\"\\\n # include <unistd.h>\n #endif\"\n \n+ac_c_werror_flag=\n ac_subst_vars='am__EXEEXT_FALSE\n am__EXEEXT_TRUE\n LTLIBOBJS\n LIBOBJS\n IEEE_FLAGS\n FPU_HOST_HEADER\n+LIBGFOR_BUILD_QUAD_FALSE\n+LIBGFOR_BUILD_QUAD_TRUE\n+LIBQUADINCLUDE\n+LIBQUADLIB_DEP\n+LIBQUADLIB\n+LIBQUADSPEC\n extra_ldflags_libgfortran\n ac_ct_FC\n FCFLAGS\n@@ -3408,6 +3415,9 @@ esac\n \n \n \n+# Create a spec file, so that compile/link tests don't fail\n+test -f libgfortran.spec || touch libgfortran.spec\n+\n # Check the compiler.\n # The same as in boehm-gc and libstdc++. Have to borrow it from there.\n # We must force CC to /not/ be precious variables; otherwise\n@@ -11362,7 +11372,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11365 \"configure\"\n+#line 11375 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11468,7 +11478,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11471 \"configure\"\n+#line 11481 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -24286,6 +24296,131 @@ $as_echo \"#define HAVE_BROKEN_POWF 1\" >>confdefs.h\n   fi\n \n \n+# Check whether we have a __float128 type\n+\n+  LIBQUADSPEC=\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether we have a usable __float128 type\" >&5\n+$as_echo_n \"checking whether we have a usable __float128 type... \" >&6; }\n+if test \"${libgfor_cv_have_float128+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+    if test x$gcc_no_link = xyes; then\n+  as_fn_error \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* no header */\n+\n+int\n+main ()\n+{\n+\n+  typedef _Complex float __attribute__((mode(TC))) __complex128;\n+\n+  __float128 x;\n+  x = __builtin_huge_valq() - 2.e1000Q;\n+\n+  __complex128 z1, z2;\n+  z1 = x;\n+  z2 = 2.Q;\n+\n+  z1 /= z2;\n+  z1 /= 7.Q;\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  libgfor_cv_have_float128=yes\n+else\n+  libgfor_cv_have_float128=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgfor_cv_have_float128\" >&5\n+$as_echo \"$libgfor_cv_have_float128\" >&6; }\n+\n+  if test \"x$libgfor_cv_have_float128\" = xyes; then\n+\n+$as_echo \"#define HAVE_FLOAT128 1\" >>confdefs.h\n+\n+\n+                                ac_xsave_c_werror_flag=$ac_c_werror_flag\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether --as-needed works\" >&5\n+$as_echo_n \"checking whether --as-needed works... \" >&6; }\n+if test \"${libgfor_cv_have_as_needed+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+      save_LDFLAGS=\"$LDFLAGS\"\n+      LDFLAGS=\"$LDFLAGS -Wl,--as-needed -lm -Wl,--no-as-needed\"\n+      libgfor_cv_have_as_needed=no\n+\n+ac_c_werror_flag=yes\n+      if test x$gcc_no_link = xyes; then\n+  as_fn_error \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  libgfor_cv_have_as_needed=yes\n+else\n+  libgfor_cv_have_as_needed=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+      LDFLAGS=\"$save_LDFLAGS\"\n+      ac_c_werror_flag=$ac_xsave_c_werror_flag\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgfor_cv_have_as_needed\" >&5\n+$as_echo \"$libgfor_cv_have_as_needed\" >&6; }\n+\n+        if test \"x$libgfor_cv_have_as_needed\" = xyes; then\n+      LIBQUADSPEC=\"%{static-libgfortran:--as-needed} -lquadmath %{static-libgfortran:--no-as-needed}\"\n+    else\n+      LIBQUADSPEC=\"-lquadmath\"\n+    fi\n+    if test -f ../libquadmath/libquadmath.la; then\n+      LIBQUADLIB=../libquadmath/libquadmath.la\n+      LIBQUADLIB_DEP=../libquadmath/libquadmath.la\n+      LIBQUADINCLUDE='-I$(srcdir)/../libquadmath'\n+    else\n+      LIBQUADLIB=\"-lquadmath\"\n+      LIBQUADLIB_DEP=\n+      LIBQUADINCLUDE=\n+    fi\n+  fi\n+\n+\n+\n+\n+\n+\n+     if test \"x$libgfor_cv_have_float128\" = xyes; then\n+  LIBGFOR_BUILD_QUAD_TRUE=\n+  LIBGFOR_BUILD_QUAD_FALSE='#'\n+else\n+  LIBGFOR_BUILD_QUAD_TRUE='#'\n+  LIBGFOR_BUILD_QUAD_FALSE=\n+fi\n+\n+\n+\n # Check for GNU libc feenableexcept\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for feenableexcept in -lm\" >&5\n $as_echo_n \"checking for feenableexcept in -lm... \" >&6; }\n@@ -24832,8 +24967,8 @@ else\n   multilib_arg=\n fi\n \n-# Write our Makefile.\n-ac_config_files=\"$ac_config_files Makefile\"\n+# Write our Makefile and spec file.\n+ac_config_files=\"$ac_config_files Makefile libgfortran.spec\"\n \n cat >confcache <<\\_ACEOF\n # This file is a shell script that caches the results of configure\n@@ -24968,6 +25103,10 @@ if test -z \"${LIBGFOR_USE_SYMVER_SUN_TRUE}\" && test -z \"${LIBGFOR_USE_SYMVER_SUN\n   as_fn_error \"conditional \\\"LIBGFOR_USE_SYMVER_SUN\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${LIBGFOR_BUILD_QUAD_TRUE}\" && test -z \"${LIBGFOR_BUILD_QUAD_FALSE}\"; then\n+  as_fn_error \"conditional \\\"LIBGFOR_BUILD_QUAD\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n \n : ${CONFIG_STATUS=./config.status}\n ac_write_fail=0\n@@ -25961,6 +26100,7 @@ do\n     \"libtool\") CONFIG_COMMANDS=\"$CONFIG_COMMANDS libtool\" ;;\n     \"gstdint.h\") CONFIG_COMMANDS=\"$CONFIG_COMMANDS gstdint.h\" ;;\n     \"Makefile\") CONFIG_FILES=\"$CONFIG_FILES Makefile\" ;;\n+    \"libgfortran.spec\") CONFIG_FILES=\"$CONFIG_FILES libgfortran.spec\" ;;\n \n   *) as_fn_error \"invalid argument: \\`$ac_config_target'\" \"$LINENO\" 5;;\n   esac"}, {"sha": "47315d55c82702d4ff9d7c79481c316d544727f7", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -111,6 +111,9 @@ esac\n AC_SUBST(toolexecdir)\n AC_SUBST(toolexeclibdir)\n \n+# Create a spec file, so that compile/link tests don't fail\n+test -f libgfortran.spec || touch libgfortran.spec\n+\n # Check the compiler.\n # The same as in boehm-gc and libstdc++. Have to borrow it from there.\n # We must force CC to /not/ be precious variables; otherwise\n@@ -459,6 +462,9 @@ LIBGFOR_CHECK_MINGW_SNPRINTF\n # Check for a broken powf implementation\n LIBGFOR_CHECK_FOR_BROKEN_POWF\n \n+# Check whether we have a __float128 type\n+LIBGFOR_CHECK_FLOAT128\n+\n # Check for GNU libc feenableexcept\n AC_CHECK_LIB([m],[feenableexcept],[have_feenableexcept=yes AC_DEFINE([HAVE_FEENABLEEXCEPT],[1],[libm includes feenableexcept])])\n \n@@ -509,6 +515,9 @@ else\n   multilib_arg=\n fi\n \n-# Write our Makefile.\n-AC_CONFIG_FILES(Makefile)\n+# Write our Makefile and spec file.\n+AC_CONFIG_FILES([\n+Makefile\n+libgfortran.spec\n+])\n AC_OUTPUT"}, {"sha": "87599fea6f11f989bc9add29ec2ecaee95fc14fe", "filename": "libgfortran/generated/bessel_r10.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgenerated%2Fbessel_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgenerated%2Fbessel_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fbessel_r10.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -31,6 +31,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n \n #define MATHFUNC(funcname) funcname ## l\n+#define BUILTINMATHFUNC(funcname) MATHFUNC(funcname)\n \n #if defined (HAVE_GFC_REAL_10)\n "}, {"sha": "7097f6b04609cea665ce891e5133310d81769a31", "filename": "libgfortran/generated/bessel_r16.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgenerated%2Fbessel_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgenerated%2Fbessel_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fbessel_r16.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -35,12 +35,17 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #else\n #define MATHFUNC(funcname) funcname ## l\n #endif\n+#if defined(GFC_REAL_16_IS_FLOAT128)\n+#define BUILTINMATHFUNC(funcname) funcname ## q\n+#else\n+#define BUILTINMATHFUNC(funcname) funcname ## l\n+#endif\n \n #if defined (HAVE_GFC_REAL_16)\n \n \n \n-#if (defined(GFC_WITH_QUAD_LIB) || defined(HAVE_JNL))\n+#if (defined(GFC_REAL_16_IS_FLOAT128) || defined(HAVE_JNL))\n extern void bessel_jn_r16 (gfc_array_r16 * const restrict ret, int n1,\n \t\t\t\t     int n2, GFC_REAL_16 x);\n export_proto(bessel_jn_r16);\n@@ -107,7 +112,7 @@ bessel_jn_r16 (gfc_array_r16 * const restrict ret, int n1, int n2, GFC_REAL_16 x\n \n #endif\n \n-#if (defined(GFC_WITH_QUAD_LIB) || defined(HAVE_YNL))\n+#if (defined(GFC_REAL_16_IS_FLOAT128) || defined(HAVE_YNL))\n extern void bessel_yn_r16 (gfc_array_r16 * const restrict ret,\n \t\t\t\t     int n1, int n2, GFC_REAL_16 x);\n export_proto(bessel_yn_r16);"}, {"sha": "75d2ff0a86bfe9d5fc7f7b3e281ac0196c8100ad", "filename": "libgfortran/generated/bessel_r4.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgenerated%2Fbessel_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgenerated%2Fbessel_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fbessel_r4.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -31,6 +31,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n \n #define MATHFUNC(funcname) funcname ## f\n+#define BUILTINMATHFUNC(funcname) MATHFUNC(funcname)\n \n #if defined (HAVE_GFC_REAL_4)\n "}, {"sha": "899237b1e4d7a410f57d6d81d9214c44448c06b5", "filename": "libgfortran/generated/bessel_r8.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgenerated%2Fbessel_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgenerated%2Fbessel_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fbessel_r8.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -31,6 +31,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n \n #define MATHFUNC(funcname) funcname\n+#define BUILTINMATHFUNC(funcname) MATHFUNC(funcname)\n \n #if defined (HAVE_GFC_REAL_8)\n "}, {"sha": "24a115f2ad4a7ab0ec8554acce2b8a8fa38c3152", "filename": "libgfortran/generated/exponent_r16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgenerated%2Fexponent_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgenerated%2Fexponent_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fexponent_r16.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -33,7 +33,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define MATHFUNC(funcname) funcname ## l\n #endif\n \n-#if defined (HAVE_GFC_REAL_16) && (defined(GFC_WITH_QUAD_LIB) || defined(HAVE_FREXPL))\n+#if defined (HAVE_GFC_REAL_16) && (defined(GFC_REAL_16_IS_FLOAT128) || defined(HAVE_FREXPL))\n \n extern GFC_INTEGER_4 exponent_r16 (GFC_REAL_16 s);\n export_proto(exponent_r16);"}, {"sha": "148148508ab5ad98c11f6260bcdbe8593db2194e", "filename": "libgfortran/generated/fraction_r16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgenerated%2Ffraction_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgenerated%2Ffraction_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ffraction_r16.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -33,7 +33,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define MATHFUNC(funcname) funcname ## l\n #endif\n \n-#if defined (HAVE_GFC_REAL_16) && (defined(GFC_WITH_QUAD_LIB) || defined(HAVE_FREXPL))\n+#if defined (HAVE_GFC_REAL_16) && (defined(GFC_REAL_16_IS_FLOAT128) || defined(HAVE_FREXPL))\n \n extern GFC_REAL_16 fraction_r16 (GFC_REAL_16 s);\n export_proto(fraction_r16);"}, {"sha": "7a7f43069f767e596b9534514733aa1065beb1d9", "filename": "libgfortran/generated/nearest_r16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgenerated%2Fnearest_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgenerated%2Fnearest_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fnearest_r16.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -33,7 +33,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define MATHFUNC(funcname) funcname ## l\n #endif\n \n-#if defined (HAVE_GFC_REAL_16) && (defined(GFC_WITH_QUAD_LIB) || defined(HAVE_COPYSIGNL)) && (defined(GFC_WITH_QUAD_LIB) || defined(HAVE_NEXTAFTERL))\n+#if defined (HAVE_GFC_REAL_16) && (defined(GFC_REAL_16_IS_FLOAT128) || defined(HAVE_COPYSIGNL)) && (defined(GFC_REAL_16_IS_FLOAT128) || defined(HAVE_NEXTAFTERL))\n \n extern GFC_REAL_16 nearest_r16 (GFC_REAL_16 s, GFC_REAL_16 dir);\n export_proto(nearest_r16);"}, {"sha": "404cb1c169ef2f63212ef27bd1fc469651aea4ad", "filename": "libgfortran/generated/norm2_r10.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgenerated%2Fnorm2_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgenerated%2Fnorm2_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fnorm2_r10.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -33,6 +33,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #if defined (HAVE_GFC_REAL_10) && defined (HAVE_GFC_REAL_10) && defined (HAVE_SQRTL) && defined (HAVE_FABSL)\n \n #define MATHFUNC(funcname) funcname ## l\n+#define BUILTINMATHFUNC(funcname) MATHFUNC(funcname)\n \n \n extern void norm2_r10 (gfc_array_r10 * const restrict, "}, {"sha": "100f2e76df59389d1432630cfaae607384da954e", "filename": "libgfortran/generated/norm2_r16.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgenerated%2Fnorm2_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgenerated%2Fnorm2_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fnorm2_r16.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -30,13 +30,18 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n \n \n-#if defined (HAVE_GFC_REAL_16) && defined (HAVE_GFC_REAL_16) && (defined(GFC_WITH_QUAD_LIB) || defined(HAVE_SQRTL)) && (defined(GFC_WITH_QUAD_LIB) || defined(HAVE_FABSL))\n+#if defined (HAVE_GFC_REAL_16) && defined (HAVE_GFC_REAL_16) && (defined(GFC_REAL_16_IS_FLOAT128) || defined(HAVE_SQRTL)) && (defined(GFC_REAL_16_IS_FLOAT128) || defined(HAVE_FABSL))\n \n #if defined(GFC_REAL_16_IS_FLOAT128)\n #define MATHFUNC(funcname) funcname ## q\n #else\n #define MATHFUNC(funcname) funcname ## l\n #endif\n+#if defined(GFC_REAL_16_IS_FLOAT128)\n+#define BUILTINMATHFUNC(funcname) funcname ## q\n+#else\n+#define BUILTINMATHFUNC(funcname) funcname ## l\n+#endif\n \n \n extern void norm2_r16 (gfc_array_r16 * const restrict, "}, {"sha": "a86f76e0ac2dc6a6f789ac69ea9980e1adaa9fcf", "filename": "libgfortran/generated/norm2_r4.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgenerated%2Fnorm2_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgenerated%2Fnorm2_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fnorm2_r4.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -33,6 +33,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #if defined (HAVE_GFC_REAL_4) && defined (HAVE_GFC_REAL_4) && defined (HAVE_SQRTF) && defined (HAVE_FABSF)\n \n #define MATHFUNC(funcname) funcname ## f\n+#define BUILTINMATHFUNC(funcname) MATHFUNC(funcname)\n \n \n extern void norm2_r4 (gfc_array_r4 * const restrict, "}, {"sha": "14487e8b2219f74c1497566d1c1648e9c9a8b622", "filename": "libgfortran/generated/norm2_r8.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgenerated%2Fnorm2_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgenerated%2Fnorm2_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fnorm2_r8.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -33,6 +33,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #if defined (HAVE_GFC_REAL_8) && defined (HAVE_GFC_REAL_8) && defined (HAVE_SQRT) && defined (HAVE_FABS)\n \n #define MATHFUNC(funcname) funcname\n+#define BUILTINMATHFUNC(funcname) MATHFUNC(funcname)\n \n \n extern void norm2_r8 (gfc_array_r8 * const restrict, "}, {"sha": "bba2a844538677483e3f948b6c1fc74d9fd2677f", "filename": "libgfortran/generated/pow_r16_i4.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgenerated%2Fpow_r16_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgenerated%2Fpow_r16_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpow_r16_i4.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,75 @@\n+/* Support routines for the intrinsic power (**) operator.\n+   Copyright 2004, 2007, 2009 Free Software Foundation, Inc.\n+   Contributed by Paul Brook\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 3 of the License, or (at your option) any later version.\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"libgfortran.h\"\n+\n+\n+/* Use Binary Method to calculate the powi. This is not an optimal but\n+   a simple and reasonable arithmetic. See section 4.6.3, \"Evaluation of\n+   Powers\" of Donald E. Knuth, \"Seminumerical Algorithms\", Vol. 2, \"The Art\n+   of Computer Programming\", 3rd Edition, 1998.  */\n+\n+#if defined (HAVE_GFC_REAL_16) && defined (HAVE_GFC_INTEGER_4)\n+\n+GFC_REAL_16 pow_r16_i4 (GFC_REAL_16 a, GFC_INTEGER_4 b);\n+export_proto(pow_r16_i4);\n+\n+GFC_REAL_16\n+pow_r16_i4 (GFC_REAL_16 a, GFC_INTEGER_4 b)\n+{\n+  GFC_REAL_16 pow, x;\n+  GFC_INTEGER_4 n;\n+  GFC_UINTEGER_4 u;\n+  \n+  n = b;\n+  x = a;\n+  pow = 1;\n+  if (n != 0)\n+    {\n+      if (n < 0)\n+\t{\n+\n+\t  u = -n;\n+\t  x = pow / x;\n+\t}\n+      else\n+\t{\n+\t   u = n;\n+\t}\n+      for (;;)\n+\t{\n+\t  if (u & 1)\n+\t    pow *= x;\n+\t  u >>= 1;\n+\t  if (u)\n+\t    x *= x;\n+\t  else\n+\t    break;\n+\t}\n+    }\n+  return pow;\n+}\n+\n+#endif"}, {"sha": "8c6aae17cd20df534c16e2dd1987e4ee3b111ad0", "filename": "libgfortran/generated/rrspacing_r16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgenerated%2Frrspacing_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgenerated%2Frrspacing_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Frrspacing_r16.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -33,7 +33,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define MATHFUNC(funcname) funcname ## l\n #endif\n \n-#if defined (HAVE_GFC_REAL_16) && (defined(GFC_WITH_QUAD_LIB) || defined(HAVE_FABSL)) && (defined(GFC_WITH_QUAD_LIB) || defined(HAVE_FREXPL))\n+#if defined (HAVE_GFC_REAL_16) && (defined(GFC_REAL_16_IS_FLOAT128) || defined(HAVE_FABSL)) && (defined(GFC_REAL_16_IS_FLOAT128) || defined(HAVE_FREXPL))\n \n extern GFC_REAL_16 rrspacing_r16 (GFC_REAL_16 s, int p);\n export_proto(rrspacing_r16);\n@@ -47,7 +47,7 @@ rrspacing_r16 (GFC_REAL_16 s, int p)\n   if (x == 0.)\n     return 0.;\n   MATHFUNC(frexp) (s, &e);\n-#if (defined(GFC_WITH_QUAD_LIB) || defined(HAVE_LDEXPL))\n+#if (defined(GFC_REAL_16_IS_FLOAT128) || defined(HAVE_LDEXPL))\n   return MATHFUNC(ldexp) (x, p - e);\n #else\n   return MATHFUNC(scalbn) (x, p - e);"}, {"sha": "e13834444385b9aa5be6e937ed750e7f640d80c2", "filename": "libgfortran/generated/set_exponent_r16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgenerated%2Fset_exponent_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgenerated%2Fset_exponent_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fset_exponent_r16.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -33,7 +33,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define MATHFUNC(funcname) funcname ## l\n #endif\n \n-#if defined (HAVE_GFC_REAL_16) && (defined(GFC_WITH_QUAD_LIB) || defined(HAVE_SCALBNL)) && (defined(GFC_WITH_QUAD_LIB) || defined(HAVE_FREXPL))\n+#if defined (HAVE_GFC_REAL_16) && (defined(GFC_REAL_16_IS_FLOAT128) || defined(HAVE_SCALBNL)) && (defined(GFC_REAL_16_IS_FLOAT128) || defined(HAVE_FREXPL))\n \n extern GFC_REAL_16 set_exponent_r16 (GFC_REAL_16 s, GFC_INTEGER_4 i);\n export_proto(set_exponent_r16);"}, {"sha": "f26b9fc220cfa67576185fd146c1d7930d9da1cf", "filename": "libgfortran/generated/spacing_r16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgenerated%2Fspacing_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgenerated%2Fspacing_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspacing_r16.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -33,7 +33,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define MATHFUNC(funcname) funcname ## l\n #endif\n \n-#if defined (HAVE_GFC_REAL_16) && (defined(GFC_WITH_QUAD_LIB) || defined(HAVE_FREXPL))\n+#if defined (HAVE_GFC_REAL_16) && (defined(GFC_REAL_16_IS_FLOAT128) || defined(HAVE_FREXPL))\n \n extern GFC_REAL_16 spacing_r16 (GFC_REAL_16 s, int p, int emin, GFC_REAL_16 tiny);\n export_proto(spacing_r16);\n@@ -47,7 +47,7 @@ spacing_r16 (GFC_REAL_16 s, int p, int emin, GFC_REAL_16 tiny)\n   MATHFUNC(frexp) (s, &e);\n   e = e - p;\n   e = e > emin ? e : emin;\n-#if (defined(GFC_WITH_QUAD_LIB) || defined(HAVE_LDEXPL))\n+#if (defined(GFC_REAL_16_IS_FLOAT128) || defined(HAVE_LDEXPL))\n   return MATHFUNC(ldexp) (1., e);\n #else\n   return MATHFUNC(scalbn) (1., e);"}, {"sha": "359f6a820b245044fd0744d65fa9c018a46a44fc", "filename": "libgfortran/gfortran.map", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgfortran.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fgfortran.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgfortran.map?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -528,6 +528,7 @@ GFORTRAN_1.0 {\n     _gfortran_pow_r10_i16;\n     _gfortran_pow_r10_i8;\n     _gfortran_pow_r16_i16;\n+    _gfortran_pow_r16_i4;\n     _gfortran_pow_r16_i8;\n     _gfortran_pow_r4_i16;\n     _gfortran_pow_r4_i8;\n@@ -1146,9 +1147,13 @@ GFORTRAN_1.4 {\n     _gfortran_transfer_character_write;\n     _gfortran_transfer_character_wide_write;\n     _gfortran_transfer_complex_write;\n+    _gfortran_transfer_complex128;\n+    _gfortran_transfer_complex128_write;\n     _gfortran_transfer_integer_write;\n     _gfortran_transfer_logical_write;\n     _gfortran_transfer_real_write;\n+    _gfortran_transfer_real128;\n+    _gfortran_transfer_real128_write;\n } GFORTRAN_1.3; \n \n F2C_1.0 {"}, {"sha": "25f9833111920bf371dbf3cb78e5f80c256346f7", "filename": "libgfortran/intrinsics/cshift0.c", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fintrinsics%2Fcshift0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fintrinsics%2Fcshift0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fcshift0.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -134,18 +134,26 @@ cshift0 (gfc_array_char * ret, const gfc_array_char * array,\n       cshift0_r8 ((gfc_array_r8 *)ret, (gfc_array_r8 *) array, shift, which);\n       return;\n \n-#ifdef HAVE_GFC_REAL_10\n+/* FIXME: This here is a hack, which will have to be removed when\n+   the array descriptor is reworked.  Currently, we don't store the\n+   kind value for the type, but only the size.  Because on targets with\n+   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   we cannot discriminate here and have to fall back to the generic\n+   handling (which is suboptimal).  */\n+#if !defined(GFC_REAL_16_IS_FLOAT128)\n+# ifdef HAVE_GFC_REAL_10\n     case GFC_DTYPE_REAL_10:\n       cshift0_r10 ((gfc_array_r10 *)ret, (gfc_array_r10 *) array, shift,\n \t\t   which);\n       return;\n-#endif\n+# endif\n \n-#ifdef HAVE_GFC_REAL_16\n+# ifdef HAVE_GFC_REAL_16\n     case GFC_DTYPE_REAL_16:\n       cshift0_r16 ((gfc_array_r16 *)ret, (gfc_array_r16 *) array, shift,\n \t\t   which);\n       return;\n+# endif\n #endif\n \n     case GFC_DTYPE_COMPLEX_4:\n@@ -156,18 +164,26 @@ cshift0 (gfc_array_char * ret, const gfc_array_char * array,\n       cshift0_c8 ((gfc_array_c8 *)ret, (gfc_array_c8 *) array, shift, which);\n       return;\n \n-#ifdef HAVE_GFC_COMPLEX_10\n+/* FIXME: This here is a hack, which will have to be removed when\n+   the array descriptor is reworked.  Currently, we don't store the\n+   kind value for the type, but only the size.  Because on targets with\n+   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   we cannot discriminate here and have to fall back to the generic\n+   handling (which is suboptimal).  */\n+#if !defined(GFC_REAL_16_IS_FLOAT128)\n+# ifdef HAVE_GFC_COMPLEX_10\n     case GFC_DTYPE_COMPLEX_10:\n       cshift0_c10 ((gfc_array_c10 *)ret, (gfc_array_c10 *) array, shift,\n \t\t   which);\n       return;\n-#endif\n+# endif\n \n-#ifdef HAVE_GFC_COMPLEX_16\n+# ifdef HAVE_GFC_COMPLEX_16\n     case GFC_DTYPE_COMPLEX_16:\n       cshift0_c16 ((gfc_array_c16 *)ret, (gfc_array_c16 *) array, shift,\n \t\t   which);\n       return;\n+# endif\n #endif\n \n     default:"}, {"sha": "c003c667e60a783b3f3bacdd547bf7e58bcb2315", "filename": "libgfortran/intrinsics/erfc_scaled_inc.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fintrinsics%2Ferfc_scaled_inc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fintrinsics%2Ferfc_scaled_inc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Ferfc_scaled_inc.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -39,7 +39,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n # define EXP(x) exp(x)\n # define TRUNC(x) trunc(x)\n \n-#else\n+#elif (KIND == 10) || (KIND == 16 && defined(GFC_REAL_16_IS_LONG_DOUBLE))\n \n # ifdef HAVE_EXPL\n #  define EXP(x) expl(x)\n@@ -48,6 +48,15 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #  define TRUNC(x) truncl(x)\n # endif\n \n+#elif (KIND == 16 && defined(GFC_REAL_16_IS_FLOAT128))\n+\n+#  define EXP(x) expq(x)\n+#  define TRUNC(x) truncq(x)\n+\n+#else\n+\n+# error \"What exactly is it that you want me to do?\"\n+\n #endif\n \n #if defined(EXP) && defined(TRUNC)"}, {"sha": "78756463feecf49364bcecede59148020bc34635", "filename": "libgfortran/intrinsics/pack_generic.c", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fintrinsics%2Fpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fintrinsics%2Fpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fpack_generic.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -301,18 +301,26 @@ pack (gfc_array_char *ret, const gfc_array_char *array,\n \t       (gfc_array_l1 *) mask, (gfc_array_r8 *) vector);\n       return;\n \n-#ifdef HAVE_GFC_REAL_10\n+/* FIXME: This here is a hack, which will have to be removed when\n+   the array descriptor is reworked.  Currently, we don't store the\n+   kind value for the type, but only the size.  Because on targets with\n+   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   we cannot discriminate here and have to fall back to the generic\n+   handling (which is suboptimal).  */\n+#if !defined(GFC_REAL_16_IS_FLOAT128)\n+# ifdef HAVE_GFC_REAL_10\n     case GFC_DTYPE_REAL_10:\n       pack_r10 ((gfc_array_r10 *) ret, (gfc_array_r10 *) array,\n \t\t(gfc_array_l1 *) mask, (gfc_array_r10 *) vector);\n       return;\n-#endif\n+# endif\n \n-#ifdef HAVE_GFC_REAL_16\n+# ifdef HAVE_GFC_REAL_16\n     case GFC_DTYPE_REAL_16:\n       pack_r16 ((gfc_array_r16 *) ret, (gfc_array_r16 *) array,\n \t\t(gfc_array_l1 *) mask, (gfc_array_r16 *) vector);\n       return;\n+# endif\n #endif\n \n     case GFC_DTYPE_COMPLEX_4:\n@@ -325,18 +333,26 @@ pack (gfc_array_char *ret, const gfc_array_char *array,\n \t       (gfc_array_l1 *) mask, (gfc_array_c8 *) vector);\n       return;\n \n-#ifdef HAVE_GFC_COMPLEX_10\n+/* FIXME: This here is a hack, which will have to be removed when\n+   the array descriptor is reworked.  Currently, we don't store the\n+   kind value for the type, but only the size.  Because on targets with\n+   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   we cannot discriminate here and have to fall back to the generic\n+   handling (which is suboptimal).  */\n+#if !defined(GFC_REAL_16_IS_FLOAT128)\n+# ifdef HAVE_GFC_COMPLEX_10\n     case GFC_DTYPE_COMPLEX_10:\n       pack_c10 ((gfc_array_c10 *) ret, (gfc_array_c10 *) array,\n \t\t(gfc_array_l1 *) mask, (gfc_array_c10 *) vector);\n       return;\n-#endif\n+# endif\n \n-#ifdef HAVE_GFC_COMPLEX_16\n+# ifdef HAVE_GFC_COMPLEX_16\n     case GFC_DTYPE_COMPLEX_16:\n       pack_c16 ((gfc_array_c16 *) ret, (gfc_array_c16 *) array,\n \t\t(gfc_array_l1 *) mask, (gfc_array_c16 *) vector);\n       return;\n+# endif\n #endif\n \n       /* For derived types, let's check the actual alignment of the"}, {"sha": "5fe98ddc1cf5e7e78247025b2e4a7c2e596a7a8e", "filename": "libgfortran/intrinsics/spread_generic.c", "status": "modified", "additions": 44, "deletions": 12, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fintrinsics%2Fspread_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fintrinsics%2Fspread_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fspread_generic.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -322,18 +322,26 @@ spread (gfc_array_char *ret, const gfc_array_char *source,\n \t\t *along, *pncopies);\n       return;\n \n-#ifdef GFC_HAVE_REAL_10\n+/* FIXME: This here is a hack, which will have to be removed when\n+   the array descriptor is reworked.  Currently, we don't store the\n+   kind value for the type, but only the size.  Because on targets with\n+   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   we cannot discriminate here and have to fall back to the generic\n+   handling (which is suboptimal).  */\n+#if !defined(GFC_REAL_16_IS_FLOAT128)\n+# ifdef GFC_HAVE_REAL_10\n     case GFC_DTYPE_REAL_10:\n       spread_r10 ((gfc_array_r10 *) ret, (gfc_array_r10 *) source,\n \t\t *along, *pncopies);\n       return;\n-#endif\n+# endif\n \n-#ifdef GFC_HAVE_REAL_16\n+# ifdef GFC_HAVE_REAL_16\n     case GFC_DTYPE_REAL_16:\n       spread_r16 ((gfc_array_r16 *) ret, (gfc_array_r16 *) source,\n \t\t *along, *pncopies);\n       return;\n+# endif\n #endif\n \n     case GFC_DTYPE_COMPLEX_4:\n@@ -346,18 +354,26 @@ spread (gfc_array_char *ret, const gfc_array_char *source,\n \t\t *along, *pncopies);\n       return;\n \n-#ifdef GFC_HAVE_COMPLEX_10\n+/* FIXME: This here is a hack, which will have to be removed when\n+   the array descriptor is reworked.  Currently, we don't store the\n+   kind value for the type, but only the size.  Because on targets with\n+   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   we cannot discriminate here and have to fall back to the generic\n+   handling (which is suboptimal).  */\n+#if !defined(GFC_REAL_16_IS_FLOAT128)\n+# ifdef GFC_HAVE_COMPLEX_10\n     case GFC_DTYPE_COMPLEX_10:\n       spread_c10 ((gfc_array_c10 *) ret, (gfc_array_c10 *) source,\n \t\t *along, *pncopies);\n       return;\n-#endif\n+# endif\n \n-#ifdef GFC_HAVE_COMPLEX_16\n+# ifdef GFC_HAVE_COMPLEX_16\n     case GFC_DTYPE_COMPLEX_16:\n       spread_c16 ((gfc_array_c16 *) ret, (gfc_array_c16 *) source,\n \t\t *along, *pncopies);\n       return;\n+# endif\n #endif\n \n     case GFC_DTYPE_DERIVED_2:\n@@ -501,18 +517,26 @@ spread_scalar (gfc_array_char *ret, const char *source,\n \t\t\t*along, *pncopies);\n       return;\n \n-#ifdef HAVE_GFC_REAL_10\n+/* FIXME: This here is a hack, which will have to be removed when\n+   the array descriptor is reworked.  Currently, we don't store the\n+   kind value for the type, but only the size.  Because on targets with\n+   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   we cannot discriminate here and have to fall back to the generic\n+   handling (which is suboptimal).  */\n+#if !defined(GFC_REAL_16_IS_FLOAT128)\n+# ifdef HAVE_GFC_REAL_10\n     case GFC_DTYPE_REAL_10:\n       spread_scalar_r10 ((gfc_array_r10 *) ret, (GFC_REAL_10 *) source,\n \t\t\t*along, *pncopies);\n       return;\n-#endif\n+# endif\n \n-#ifdef HAVE_GFC_REAL_16\n+# ifdef HAVE_GFC_REAL_16\n     case GFC_DTYPE_REAL_16:\n       spread_scalar_r16 ((gfc_array_r16 *) ret, (GFC_REAL_16 *) source,\n \t\t\t*along, *pncopies);\n       return;\n+# endif\n #endif\n \n     case GFC_DTYPE_COMPLEX_4:\n@@ -525,18 +549,26 @@ spread_scalar (gfc_array_char *ret, const char *source,\n \t\t\t*along, *pncopies);\n       return;\n \n-#ifdef HAVE_GFC_COMPLEX_10\n+/* FIXME: This here is a hack, which will have to be removed when\n+   the array descriptor is reworked.  Currently, we don't store the\n+   kind value for the type, but only the size.  Because on targets with\n+   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   we cannot discriminate here and have to fall back to the generic\n+   handling (which is suboptimal).  */\n+#if !defined(GFC_REAL_16_IS_FLOAT128)\n+# ifdef HAVE_GFC_COMPLEX_10\n     case GFC_DTYPE_COMPLEX_10:\n       spread_scalar_c10 ((gfc_array_c10 *) ret, (GFC_COMPLEX_10 *) source,\n \t\t\t*along, *pncopies);\n       return;\n-#endif\n+# endif\n \n-#ifdef HAVE_GFC_COMPLEX_16\n+# ifdef HAVE_GFC_COMPLEX_16\n     case GFC_DTYPE_COMPLEX_16:\n       spread_scalar_c16 ((gfc_array_c16 *) ret, (GFC_COMPLEX_16 *) source,\n \t\t\t*along, *pncopies);\n       return;\n+# endif\n #endif\n \n     case GFC_DTYPE_DERIVED_2:"}, {"sha": "e8e2945073b91cd20d16e7c6b8fd8491e43d6ce8", "filename": "libgfortran/intrinsics/unpack_generic.c", "status": "modified", "additions": 44, "deletions": 12, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fintrinsics%2Funpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fintrinsics%2Funpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Funpack_generic.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -261,18 +261,26 @@ unpack1 (gfc_array_char *ret, const gfc_array_char *vector,\n \t\t  mask, (gfc_array_r8 *) field);\n       return;\n \n-#ifdef HAVE_GFC_REAL_10\n+/* FIXME: This here is a hack, which will have to be removed when\n+   the array descriptor is reworked.  Currently, we don't store the\n+   kind value for the type, but only the size.  Because on targets with\n+   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   we cannot discriminate here and have to fall back to the generic\n+   handling (which is suboptimal).  */\n+#if !defined(GFC_REAL_16_IS_FLOAT128)\n+# ifdef HAVE_GFC_REAL_10\n     case GFC_DTYPE_REAL_10:\n       unpack1_r10 ((gfc_array_r10 *) ret, (gfc_array_r10 *) vector,\n \t\t   mask, (gfc_array_r10 *) field);\n       return;\n-#endif\n+# endif\n \n-#ifdef HAVE_GFC_REAL_16\n+# ifdef HAVE_GFC_REAL_16\n     case GFC_DTYPE_REAL_16:\n       unpack1_r16 ((gfc_array_r16 *) ret, (gfc_array_r16 *) vector,\n \t\t   mask, (gfc_array_r16 *) field);\n       return;\n+# endif\n #endif\n \n     case GFC_DTYPE_COMPLEX_4:\n@@ -285,18 +293,26 @@ unpack1 (gfc_array_char *ret, const gfc_array_char *vector,\n \t\t  mask, (gfc_array_c8 *) field);\n       return;\n \n-#ifdef HAVE_GFC_COMPLEX_10\n+/* FIXME: This here is a hack, which will have to be removed when\n+   the array descriptor is reworked.  Currently, we don't store the\n+   kind value for the type, but only the size.  Because on targets with\n+   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   we cannot discriminate here and have to fall back to the generic\n+   handling (which is suboptimal).  */\n+#if !defined(GFC_REAL_16_IS_FLOAT128)\n+# ifdef HAVE_GFC_COMPLEX_10\n     case GFC_DTYPE_COMPLEX_10:\n       unpack1_c10 ((gfc_array_c10 *) ret, (gfc_array_c10 *) vector,\n \t\t   mask, (gfc_array_c10 *) field);\n       return;\n-#endif\n+# endif\n \n-#ifdef HAVE_GFC_COMPLEX_16\n+# ifdef HAVE_GFC_COMPLEX_16\n     case GFC_DTYPE_COMPLEX_16:\n       unpack1_c16 ((gfc_array_c16 *) ret, (gfc_array_c16 *) vector,\n \t\t   mask, (gfc_array_c16 *) field);\n       return;\n+# endif\n #endif\n \n     case GFC_DTYPE_DERIVED_2:\n@@ -455,18 +471,26 @@ unpack0 (gfc_array_char *ret, const gfc_array_char *vector,\n \t\t  mask, (GFC_REAL_8  *) field);\n       return;\n \n-#ifdef HAVE_GFC_REAL_10\n+/* FIXME: This here is a hack, which will have to be removed when\n+   the array descriptor is reworked.  Currently, we don't store the\n+   kind value for the type, but only the size.  Because on targets with\n+   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   we cannot discriminate here and have to fall back to the generic\n+   handling (which is suboptimal).  */\n+#if !defined(GFC_REAL_16_IS_FLOAT128)\n+# ifdef HAVE_GFC_REAL_10\n     case GFC_DTYPE_REAL_10:\n       unpack0_r10 ((gfc_array_r10 *) ret, (gfc_array_r10 *) vector,\n \t\t   mask, (GFC_REAL_10 *) field);\n       return;\n-#endif\n+# endif\n \n-#ifdef HAVE_GFC_REAL_16\n+# ifdef HAVE_GFC_REAL_16\n     case GFC_DTYPE_REAL_16:\n       unpack0_r16 ((gfc_array_r16 *) ret, (gfc_array_r16 *) vector,\n \t\t   mask, (GFC_REAL_16 *) field);\n       return;\n+# endif\n #endif\n \n     case GFC_DTYPE_COMPLEX_4:\n@@ -479,18 +503,26 @@ unpack0 (gfc_array_char *ret, const gfc_array_char *vector,\n \t\t  mask, (GFC_COMPLEX_8 *) field);\n       return;\n \n-#ifdef HAVE_GFC_COMPLEX_10\n+/* FIXME: This here is a hack, which will have to be removed when\n+   the array descriptor is reworked.  Currently, we don't store the\n+   kind value for the type, but only the size.  Because on targets with\n+   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   we cannot discriminate here and have to fall back to the generic\n+   handling (which is suboptimal).  */\n+#if !defined(GFC_REAL_16_IS_FLOAT128)\n+# ifdef HAVE_GFC_COMPLEX_10\n     case GFC_DTYPE_COMPLEX_10:\n       unpack0_c10 ((gfc_array_c10 *) ret, (gfc_array_c10 *) vector,\n \t\t   mask, (GFC_COMPLEX_10 *) field);\n       return;\n-#endif\n+# endif\n \n-#ifdef HAVE_GFC_COMPLEX_16\n+# ifdef HAVE_GFC_COMPLEX_16\n     case GFC_DTYPE_COMPLEX_16:\n       unpack0_c16 ((gfc_array_c16 *) ret, (gfc_array_c16 *) vector,\n \t\t   mask, (GFC_COMPLEX_16 *) field);\n       return;\n+# endif\n #endif\n \n     case GFC_DTYPE_DERIVED_2:"}, {"sha": "33486fa2fa028169fb258e563f5e89d53e646cf5", "filename": "libgfortran/io/read.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fio%2Fread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fio%2Fread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fread.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -162,10 +162,16 @@ convert_real (st_parameter_dt *dtp, void *dest, const char *buffer, int length)\n       break;\n #endif\n \n-#if defined(HAVE_GFC_REAL_16) && defined (HAVE_STRTOLD)\n+#if defined(HAVE_GFC_REAL_16)\n+# if defined(GFC_REAL_16_IS_FLOAT128)\n+    case 16:\n+      __qmath_(quadmath_strtopQ) (buffer, NULL, dest);\n+      break;\n+# elif defined(HAVE_STRTOLD)\n     case 16:\n       *((GFC_REAL_16*) dest) = gfc_strtold (buffer, NULL);\n       break;\n+# endif\n #endif\n \n     default:"}, {"sha": "8fffe0e54c8bd059041edc1a309a6d642743aa10", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -48,16 +48,30 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n    For other sorts of data transfer, there are zero or more data\n    transfer statement that depend on the format of the data transfer\n-   statement.\n+   statement. For READ (and for backwards compatibily: for WRITE), one has\n \n       transfer_integer\n       transfer_logical\n       transfer_character\n       transfer_character_wide\n       transfer_real\n       transfer_complex\n-\n-    These subroutines do not return status.\n+      transfer_real128\n+      transfer_complex128\n+   \n+    and for WRITE\n+\n+      transfer_integer_write\n+      transfer_logical_write\n+      transfer_character_write\n+      transfer_character_wide_write\n+      transfer_real_write\n+      transfer_complex_write\n+      transfer_real128_write\n+      transfer_complex128_write\n+\n+    These subroutines do not return status. The *128 functions\n+    are in the file transfer128.c.\n \n     The last call is a call to st_[read|write]_done().  While\n     something can easily go wrong with the initial st_read() or"}, {"sha": "66deabea1e869108bec1851968725d96f9f71aa6", "filename": "libgfortran/io/transfer128.c", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fio%2Ftransfer128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fio%2Ftransfer128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer128.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,108 @@\n+/* Copyright (C) 2010\n+   Free Software Foundation, Inc.\n+\n+This file is part of the GNU Fortran runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Note: This file needs to be a separate translation unit (.o file)\n+   to make sure that for static linkage, the libquad dependence only\n+   occurs if needed.  */\n+\n+#include \"io.h\"\n+\n+\n+#if defined(GFC_REAL_16_IS_FLOAT128)\n+\n+/* The prototypes for the called procedures in transfer.c.  */\n+\n+extern void transfer_real (st_parameter_dt *, void *, int);\n+export_proto(transfer_real);\n+\n+extern void transfer_real_write (st_parameter_dt *, void *, int);\n+export_proto(transfer_real_write);\n+\n+extern void transfer_complex (st_parameter_dt *, void *, int);\n+export_proto(transfer_complex);\n+\n+extern void transfer_complex_write (st_parameter_dt *, void *, int);\n+export_proto(transfer_complex_write);\n+\n+\n+/* The prototypes for the procedures in this file.  */\n+\n+extern void transfer_real128 (st_parameter_dt *, void *, int);\n+export_proto(transfer_real128);\n+\n+extern void transfer_real128_write (st_parameter_dt *, void *, int);\n+export_proto(transfer_real128_write);\n+\n+extern void transfer_complex128 (st_parameter_dt *, void *, int);\n+export_proto(transfer_complex128);\n+\n+extern void transfer_complex128_write (st_parameter_dt *, void *, int);\n+export_proto(transfer_complex128_write);\n+\n+\n+/* Make sure that libquadmath is pulled in. The functions quadmath_strtopQ\n+   and quadmath_dtoaq are weakly referrenced in convert_real and write_float;\n+   the pointer assignment with USED attribute make sure that there is a\n+   non-weakref dependence if the quadmath functions are used. That avoids\n+   segfault when libquad is statically linked.  */\n+\n+void\n+transfer_real128 (st_parameter_dt *dtp, void *p, int kind)\n+{\n+  static void __attribute__((used)) *tmp1 = quadmath_strtopQ;\n+  static void __attribute__((used)) *tmp2 = quadmath_dtoaq;\n+\n+  transfer_real (dtp, p, kind);\n+}\n+\n+\n+void\n+transfer_real128_write (st_parameter_dt *dtp, void *p, int kind)\n+{\n+  static void __attribute__((used)) *tmp1 = quadmath_strtopQ;\n+  static void __attribute__((used)) *tmp2 = quadmath_dtoaq;\n+\n+  transfer_real (dtp, p, kind);\n+}\n+\n+\n+void\n+transfer_complex128 (st_parameter_dt *dtp, void *p, int kind)\n+{\n+  static void __attribute__((used)) *tmp1 = quadmath_strtopQ;\n+  static void __attribute__((used)) *tmp2 = quadmath_dtoaq;\n+\n+  transfer_complex (dtp, p, kind);\n+}\n+\n+\n+void\n+transfer_complex128_write (st_parameter_dt *dtp, void *p, int kind)\n+{\n+/*  static void __attribute__((used)) *tmp1 = quadmath_strtopQ;\n+  static void __attribute__((used)) *tmp2 = quadmath_dtoaq;*/\n+\n+  transfer_complex_write (dtp, p, kind);\n+}\n+#endif"}, {"sha": "987c3cd88a6ecc820c1973d43ecb4ddc1e229cea", "filename": "libgfortran/io/write.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fio%2Fwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fio%2Fwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -1459,6 +1459,7 @@ set_fnode_default (st_parameter_dt *dtp, fnode *f, int length)\n /* Output a real number with default format.\n    This is 1PG14.7E2 for REAL(4), 1PG23.15E3 for REAL(8),\n    1PG28.19E4 for REAL(10) and 1PG43.34E4 for REAL(16).  */\n+// FX -- FIXME: should we change the default format for __float128-real(16)?\n \n void\n write_real (st_parameter_dt *dtp, const char *source, int length)"}, {"sha": "fc004911cb6845308ae8307fa28ae39640a17112", "filename": "libgfortran/io/write_float.def", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fio%2Fwrite_float.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fio%2Fwrite_float.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite_float.def?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -973,6 +973,11 @@ sprintf (buffer, \"%+-#\" STR(MIN_FIELD_WIDTH) \".*\" \\\n \n #endif\n \n+#if defined(GFC_REAL_16_IS_FLOAT128)\n+#define DTOAQ \\\n+__qmath_(quadmath_dtoaq) (buffer, size, ndigits - 1, tmp);\n+#endif\n+\n #define WRITE_FLOAT(x,y)\\\n {\\\n \tGFC_REAL_ ## x tmp;\\\n@@ -1002,7 +1007,7 @@ static void\n write_float (st_parameter_dt *dtp, const fnode *f, const char *source, int len)\n {\n \n-#if defined(HAVE_GFC_REAL_16) && __LDBL_DIG__ > 18\n+#if defined(HAVE_GFC_REAL_16) || __LDBL_DIG__ > 18\n # define MIN_FIELD_WIDTH 46\n #else\n # define MIN_FIELD_WIDTH 31\n@@ -1057,7 +1062,11 @@ write_float (st_parameter_dt *dtp, const fnode *f, const char *source, int len)\n #endif\n #ifdef HAVE_GFC_REAL_16\n     case 16:\n+# ifdef GFC_REAL_16_IS_FLOAT128\n+      WRITE_FLOAT(16,Q)\n+# else\n       WRITE_FLOAT(16,L)\n+# endif\n       break;\n #endif\n     default:"}, {"sha": "952413b977e7e0d8025b9e3c4d8c010fa5353b67", "filename": "libgfortran/kinds-override.h", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fkinds-override.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fkinds-override.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fkinds-override.h?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,46 @@\n+/* Header used to override things detected by the mk-kinds-h.sh script.\n+   Copyright (C) 2010 Free Software Foundation, Inc.\n+\n+This file is part of the GNU Fortran runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+\n+/* What are the C types corresponding to the real(kind=10) and\n+   real(kind=16) types? We currently rely on the following assumptions:\n+     -- if real(kind=10) exists, i.e. if HAVE_GFC_REAL_10 is defined,\n+        then it is necessarily the \"long double\" type\n+     -- if real(kind=16) exists, then:\n+         * if HAVE_GFC_REAL_10, real(kind=16) is \"__float128\"\n+\t * otherwise, real(kind=16) is \"long double\"\n+   To allow to change this in the future, we create the\n+   GFC_REAL_16_IS_FLOAT128 macro that is used throughout libgfortran.  */\n+\n+#if defined(HAVE_GFC_REAL_16)\n+# if defined(HAVE_GFC_REAL_10)\n+#  define GFC_REAL_16_IS_FLOAT128\n+#  if !defined(HAVE_FLOAT128)\n+#   error \"Where has __float128 gone?\"\n+#  endif\n+# else\n+#  define GFC_REAL_16_IS_LONG_DOUBLE\n+# endif\n+#endif\n+"}, {"sha": "ac8649235aea3484edddbef29c56d0fdfbe4c73b", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -46,6 +46,12 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include <float.h>\n #include <stdarg.h>\n \n+/* If we're support quad-precision floating-point type, include the\n+   header to our support library.  */\n+#ifdef HAVE_FLOAT128\n+#  include \"quadmath_weak.h\"\n+#endif\n+\n #ifdef __MINGW32__\n extern float __strtof (const char *, char **);\n #define gfc_strtof __strtof\n@@ -309,7 +315,11 @@ internal_proto(big_endian);\n #  define GFC_REAL_10_INFINITY __builtin_infl ()\n # endif\n # ifdef HAVE_GFC_REAL_16\n-#  define GFC_REAL_16_INFINITY __builtin_infl ()\n+#  ifdef GFC_REAL_16_IS_LONG_DOUBLE\n+#   define GFC_REAL_16_INFINITY __builtin_infl ()\n+#  else\n+#   define GFC_REAL_16_INFINITY __builtin_infq ()\n+#  endif\n # endif\n #endif\n #ifdef __FLT_HAS_QUIET_NAN__\n@@ -323,7 +333,11 @@ internal_proto(big_endian);\n #  define GFC_REAL_10_QUIET_NAN __builtin_nanl (\"\")\n # endif\n # ifdef HAVE_GFC_REAL_16\n-#  define GFC_REAL_16_QUIET_NAN __builtin_nanl (\"\")\n+#  ifdef GFC_REAL_16_IS_LONG_DOUBLE\n+#   define GFC_REAL_16_QUIET_NAN __builtin_nanl (\"\")\n+#  else\n+#   define GFC_REAL_16_QUIET_NAN nanq (\"\")\n+#  endif\n # endif\n #endif\n "}, {"sha": "95aa3f842a30a9bfc073c68735e9f13f8d11139f", "filename": "libgfortran/libgfortran.spec.in", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Flibgfortran.spec.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Flibgfortran.spec.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.spec.in?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,8 @@\n+#\n+# This spec file is read by gfortran when linking.\n+# It is used to specify the libraries we need to link in, in the right\n+# order.\n+#\n+\n+%rename lib liborig\n+*lib: @LIBQUADSPEC@ -lm %(libgcc) %(liborig)"}, {"sha": "b133e578bfa0763f13bccef8e5fd39c97003a7b7", "filename": "libgfortran/m4/mtype.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fm4%2Fmtype.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fm4%2Fmtype.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fmtype.m4?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -5,7 +5,7 @@ define(real_type, `GFC_REAL_'kind)dnl\n define(`upcase', `translit(`$*', `a-z', `A-Z')')dnl\n define(q,ifelse(kind,4,f,ifelse(kind,8,`',ifelse(kind,10,l,ifelse(kind,16,l,`_'kind)))))dnl\n define(Q,translit(q,`a-z',`A-Z'))dnl\n-define(hasmathfunc,`ifelse(kind,4,`defined (HAVE_'upcase($1)`F)',ifelse(kind,8,`defined (HAVE_'upcase($1)`)',ifelse(kind,10,`defined (HAVE_'upcase($1)`L)',ifelse(kind,16,`(defined(GFC_WITH_QUAD_LIB) || defined(HAVE_'upcase($1)`L))',`error out'))))')\n+define(hasmathfunc,`ifelse(kind,4,`defined (HAVE_'upcase($1)`F)',ifelse(kind,8,`defined (HAVE_'upcase($1)`)',ifelse(kind,10,`defined (HAVE_'upcase($1)`L)',ifelse(kind,16,`(defined(GFC_REAL_16_IS_FLOAT128) || defined(HAVE_'upcase($1)`L))',`error out'))))')\n define(mathfunc_macro,`ifelse(kind,16,`#if defined(GFC_REAL_16_IS_FLOAT128)\n #define MATHFUNC(funcname) funcname ## q\n #else"}, {"sha": "98a95ab54a7288b29f14690f99ce1fd9a1946304", "filename": "libgfortran/mk-kinds-h.sh", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fmk-kinds-h.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fmk-kinds-h.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fmk-kinds-h.sh?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -44,25 +44,33 @@ echo \"#define GFC_UINTEGER_LARGEST GFC_UINTEGER_${largest}\"\n echo \"#define GFC_DEFAULT_CHAR ${smallest}\"\n echo \"\"\n \n-REAL_10_FOUND=\n+\n+# Get the kind value for long double, so we may disambiguate it\n+# from __float128.\n+echo \"use iso_c_binding; print *, c_long_double ; end\" > tmq$$.f90\n+long_double_kind=`$compile -S -fdump-parse-tree tmq$$.f90 | grep TRANSFER \\\n+\t\t\t| sed 's/ *TRANSFER *//'`\n+rm -f tmq$$.*\n+\n \n for k in $possible_real_kinds; do\n   echo \"  real (kind=$k) :: x\" > tmp$$.f90\n   echo \"  x = 1.0_$k\" >> tmp$$.f90\n   echo \"  end\" >> tmp$$.f90\n   if $compile -S tmp$$.f90 > /dev/null 2>&1; then\n     case $k in\n-      4) ctype=\"float\" ; suffix=\"f\" ;;\n-      8) ctype=\"double\" ; suffix=\"\" ;;\n-      10) ctype=\"long double\" ; suffix=\"l\" ; REAL_10_FOUND=1 ;;\n-      16) ctype=\"long double\"\n-\t  suffix=\"l\"\n-\t  # Disable REAL(16) if it is just __float128\n-\t  # until the library is fixed\n-\t  if [ -n \"$REAL_10_FOUND\" ]; then\n-\t    continue\n-\t  fi\n-\t  ;;\n+      4) ctype=\"float\" ; cplxtype=\"complex float\" ; suffix=\"f\" ;;\n+      8) ctype=\"double\" ; cplxtype=\"complex double\" ; suffix=\"\" ;;\n+      10) ctype=\"long double\" ; cplxtype=\"complex long double\" ; suffix=\"l\" ;;\n+      16) if [ $long_double_kind -eq 10 ]; then\n+\t    ctype=\"__float128\"\n+\t    cplxtype=\"_Complex float __attribute__((mode(TC)))\"\n+\t    suffix=\"q\"\n+\t  else\n+\t    ctype=\"long double\"\n+\t    cplxtype=\"complex long double\"\n+\t    suffix=\"l\"\n+\t  fi ;;\n       *) echo \"$0: Unknown type\" >&2 ; exit 1 ;;\n     esac\n \n@@ -86,7 +94,7 @@ for k in $possible_real_kinds; do\n \n     # Output the information we've gathered\n     echo \"typedef ${ctype} GFC_REAL_${k};\"\n-    echo \"typedef complex ${ctype} GFC_COMPLEX_${k};\"\n+    echo \"typedef ${cplxtype} GFC_COMPLEX_${k};\"\n     echo \"#define HAVE_GFC_REAL_${k}\"\n     echo \"#define HAVE_GFC_COMPLEX_${k}\"\n     echo \"#define GFC_REAL_${k}_HUGE ${huge}${suffix}\"\n@@ -103,4 +111,9 @@ for k in $possible_real_kinds; do\n   rm -f tmp$$.*\n done\n \n+\n+# After this, we include a header that can override some of the \n+# autodetected settings.\n+echo '#include \"kinds-override.h\"'\n+\n exit 0"}, {"sha": "014bd8e01116883aeef6afefe95c56031344d7f7", "filename": "libgfortran/runtime/in_pack_generic.c", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fruntime%2Fin_pack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fruntime%2Fin_pack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fin_pack_generic.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -80,29 +80,46 @@ internal_pack (gfc_array_char * source)\n     case GFC_DTYPE_REAL_8:\n       return internal_pack_r8 ((gfc_array_r8 *) source);\n \n-#if defined (HAVE_GFC_REAL_10)\n+/* FIXME: This here is a hack, which will have to be removed when\n+   the array descriptor is reworked.  Currently, we don't store the\n+   kind value for the type, but only the size.  Because on targets with\n+   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   we cannot discriminate here and have to fall back to the generic\n+   handling (which is suboptimal).  */\n+#if !defined(GFC_REAL_16_IS_FLOAT128)\n+# if defined (HAVE_GFC_REAL_10)\n     case GFC_DTYPE_REAL_10:\n       return internal_pack_r10 ((gfc_array_r10 *) source);\n-#endif\n+# endif\n \n-#if defined (HAVE_GFC_REAL_16)\n+# if defined (HAVE_GFC_REAL_16)\n     case GFC_DTYPE_REAL_16:\n       return internal_pack_r16 ((gfc_array_r16 *) source);\n+# endif\n #endif\n+\n     case GFC_DTYPE_COMPLEX_4:\n       return internal_pack_c4 ((gfc_array_c4 *) source);\n \t\n     case GFC_DTYPE_COMPLEX_8:\n       return internal_pack_c8 ((gfc_array_c8 *) source);\n \n-#if defined (HAVE_GFC_COMPLEX_10)\n+/* FIXME: This here is a hack, which will have to be removed when\n+   the array descriptor is reworked.  Currently, we don't store the\n+   kind value for the type, but only the size.  Because on targets with\n+   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   we cannot discriminate here and have to fall back to the generic\n+   handling (which is suboptimal).  */\n+#if !defined(GFC_REAL_16_IS_FLOAT128)\n+# if defined (HAVE_GFC_COMPLEX_10)\n     case GFC_DTYPE_COMPLEX_10:\n       return internal_pack_c10 ((gfc_array_c10 *) source);\n-#endif\n+# endif\n \n-#if defined (HAVE_GFC_COMPLEX_16)\n+# if defined (HAVE_GFC_COMPLEX_16)\n     case GFC_DTYPE_COMPLEX_16:\n       return internal_pack_c16 ((gfc_array_c16 *) source);\n+# endif\n #endif\n \n     case GFC_DTYPE_DERIVED_2:"}, {"sha": "a9caf2afe7395ed290737e1c3b1dbd9b0e716832", "filename": "libgfortran/runtime/in_unpack_generic.c", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fruntime%2Fin_unpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgfortran%2Fruntime%2Fin_unpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fin_unpack_generic.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -81,6 +81,7 @@ internal_unpack (gfc_array_char * d, const void * s)\n       internal_unpack_16 ((gfc_array_i16 *) d, (const GFC_INTEGER_16 *) s);\n       return;\n #endif\n+\n     case GFC_DTYPE_REAL_4:\n       internal_unpack_r4 ((gfc_array_r4 *) d, (const GFC_REAL_4 *) s);\n       return;\n@@ -89,17 +90,26 @@ internal_unpack (gfc_array_char * d, const void * s)\n       internal_unpack_r8 ((gfc_array_r8 *) d, (const GFC_REAL_8 *) s);\n       return;\n \n-#if defined(HAVE_GFC_REAL_10)\n+/* FIXME: This here is a hack, which will have to be removed when\n+   the array descriptor is reworked.  Currently, we don't store the\n+   kind value for the type, but only the size.  Because on targets with\n+   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   we cannot discriminate here and have to fall back to the generic\n+   handling (which is suboptimal).  */\n+#if !defined(GFC_REAL_16_IS_FLOAT128)\n+# if defined(HAVE_GFC_REAL_10)\n     case GFC_DTYPE_REAL_10:\n       internal_unpack_r10 ((gfc_array_r10 *) d, (const GFC_REAL_10 *) s);\n       return;\n-#endif\n+# endif\n \n-#if defined(HAVE_GFC_REAL_16)\n+# if defined(HAVE_GFC_REAL_16)\n     case GFC_DTYPE_REAL_16:\n       internal_unpack_r16 ((gfc_array_r16 *) d, (const GFC_REAL_16 *) s);\n       return;\n+# endif\n #endif\n+\n     case GFC_DTYPE_COMPLEX_4:\n       internal_unpack_c4 ((gfc_array_c4 *)d, (const GFC_COMPLEX_4 *)s);\n       return;\n@@ -108,17 +118,26 @@ internal_unpack (gfc_array_char * d, const void * s)\n       internal_unpack_c8 ((gfc_array_c8 *)d, (const GFC_COMPLEX_8 *)s);\n       return;\n \n-#if defined(HAVE_GFC_COMPLEX_10)\n+/* FIXME: This here is a hack, which will have to be removed when\n+   the array descriptor is reworked.  Currently, we don't store the\n+   kind value for the type, but only the size.  Because on targets with\n+   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   we cannot discriminate here and have to fall back to the generic\n+   handling (which is suboptimal).  */\n+#if !defined(GFC_REAL_16_IS_FLOAT128)\n+# if defined(HAVE_GFC_COMPLEX_10)\n     case GFC_DTYPE_COMPLEX_10:\n       internal_unpack_c10 ((gfc_array_c10 *) d, (const GFC_COMPLEX_10 *) s);\n       return;\n-#endif\n+# endif\n \n-#if defined(HAVE_GFC_COMPLEX_16)\n+# if defined(HAVE_GFC_COMPLEX_16)\n     case GFC_DTYPE_COMPLEX_16:\n       internal_unpack_c16 ((gfc_array_c16 *) d, (const GFC_COMPLEX_16 *) s);\n       return;\n+# endif\n #endif\n+\n     case GFC_DTYPE_DERIVED_2:\n       if (GFC_UNALIGNED_2(d->data) || GFC_UNALIGNED_2(s))\n \tbreak;"}, {"sha": "ef34c9a04ee5dcbb535352ab6fc1c2d5d2f73c01", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -1,3 +1,10 @@\n+2010-11-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\t    Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/32049\n+\t* configure.ac: \n+\t* configure: Regenerate.\n+\n 2010-10-06  Marcus Shawcroft  <marcus.shawcroft@arm.com>\n \n \t* config/linux/futex.h: New."}, {"sha": "14b6e3ff373806d4ab259f70658ce7f48c8ddbf1", "filename": "libgomp/configure", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgomp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgomp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -11459,6 +11459,10 @@ fi\n \n \n \n+# Create a spec file, so that compile/link tests don't fail\n+test -f libgfortran.spec || touch libgfortran.spec\n+FCFLAGS=\"$FCFLAGS -L.\"\n+\n # We need gfortran to compile parts of the library\n # We can't use AC_PROG_FC because it expects a fully working gfortran.\n #AC_PROG_FC(gfortran)\n@@ -14377,7 +14381,7 @@ ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $\n ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n \n-FCFLAGS=\"$FCFLAGS -Wall\"\n+FCFLAGS=\"$FCFLAGS -Wall -L../libgfortran\"\n \n # For libtool versioning info, format is CURRENT:REVISION:AGE\n libtool_VERSION=1:0:0"}, {"sha": "0e976a88a1de147b39b99d5bb6f4e8c68ba3bc47", "filename": "libgomp/configure.ac", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgomp%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libgomp%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure.ac?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -140,6 +140,10 @@ AC_SUBST(enable_static)\n \n AM_MAINTAINER_MODE\n \n+# Create a spec file, so that compile/link tests don't fail\n+test -f libgfortran.spec || touch libgfortran.spec\n+FCFLAGS=\"$FCFLAGS -L.\"\n+\n # We need gfortran to compile parts of the library\n # We can't use AC_PROG_FC because it expects a fully working gfortran.\n #AC_PROG_FC(gfortran)\n@@ -155,7 +159,7 @@ case `echo $GFORTRAN` in\n     fi ;;\n esac\n AC_PROG_FC(gfortran)\n-FCFLAGS=\"$FCFLAGS -Wall\"\n+FCFLAGS=\"$FCFLAGS -Wall -L../libgfortran\"\n \n # For libtool versioning info, format is CURRENT:REVISION:AGE\n libtool_VERSION=1:0:0"}, {"sha": "ae23fcfda2da8599b52baff4c257847205d78c56", "filename": "libquadmath/COPYING.LIB", "status": "added", "additions": 504, "deletions": 0, "changes": 504, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2FCOPYING.LIB", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2FCOPYING.LIB", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FCOPYING.LIB?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,504 @@\n+\t\t  GNU LESSER GENERAL PUBLIC LICENSE\n+\t\t       Version 2.1, February 1999\n+\n+ Copyright (C) 1991, 1999 Free Software Foundation, Inc.\n+     51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ Everyone is permitted to copy and distribute verbatim copies\n+ of this license document, but changing it is not allowed.\n+\n+[This is the first released version of the Lesser GPL.  It also counts\n+ as the successor of the GNU Library Public License, version 2, hence\n+ the version number 2.1.]\n+\n+\t\t\t    Preamble\n+\n+  The licenses for most software are designed to take away your\n+freedom to share and change it.  By contrast, the GNU General Public\n+Licenses are intended to guarantee your freedom to share and change\n+free software--to make sure the software is free for all its users.\n+\n+  This license, the Lesser General Public License, applies to some\n+specially designated software packages--typically libraries--of the\n+Free Software Foundation and other authors who decide to use it.  You\n+can use it too, but we suggest you first think carefully about whether\n+this license or the ordinary General Public License is the better\n+strategy to use in any particular case, based on the explanations below.\n+\n+  When we speak of free software, we are referring to freedom of use,\n+not price.  Our General Public Licenses are designed to make sure that\n+you have the freedom to distribute copies of free software (and charge\n+for this service if you wish); that you receive source code or can get\n+it if you want it; that you can change the software and use pieces of\n+it in new free programs; and that you are informed that you can do\n+these things.\n+\n+  To protect your rights, we need to make restrictions that forbid\n+distributors to deny you these rights or to ask you to surrender these\n+rights.  These restrictions translate to certain responsibilities for\n+you if you distribute copies of the library or if you modify it.\n+\n+  For example, if you distribute copies of the library, whether gratis\n+or for a fee, you must give the recipients all the rights that we gave\n+you.  You must make sure that they, too, receive or can get the source\n+code.  If you link other code with the library, you must provide\n+complete object files to the recipients, so that they can relink them\n+with the library after making changes to the library and recompiling\n+it.  And you must show them these terms so they know their rights.\n+\n+  We protect your rights with a two-step method: (1) we copyright the\n+library, and (2) we offer you this license, which gives you legal\n+permission to copy, distribute and/or modify the library.\n+\n+  To protect each distributor, we want to make it very clear that\n+there is no warranty for the free library.  Also, if the library is\n+modified by someone else and passed on, the recipients should know\n+that what they have is not the original version, so that the original\n+author's reputation will not be affected by problems that might be\n+introduced by others.\n+\f\n+  Finally, software patents pose a constant threat to the existence of\n+any free program.  We wish to make sure that a company cannot\n+effectively restrict the users of a free program by obtaining a\n+restrictive license from a patent holder.  Therefore, we insist that\n+any patent license obtained for a version of the library must be\n+consistent with the full freedom of use specified in this license.\n+\n+  Most GNU software, including some libraries, is covered by the\n+ordinary GNU General Public License.  This license, the GNU Lesser\n+General Public License, applies to certain designated libraries, and\n+is quite different from the ordinary General Public License.  We use\n+this license for certain libraries in order to permit linking those\n+libraries into non-free programs.\n+\n+  When a program is linked with a library, whether statically or using\n+a shared library, the combination of the two is legally speaking a\n+combined work, a derivative of the original library.  The ordinary\n+General Public License therefore permits such linking only if the\n+entire combination fits its criteria of freedom.  The Lesser General\n+Public License permits more lax criteria for linking other code with\n+the library.\n+\n+  We call this license the \"Lesser\" General Public License because it\n+does Less to protect the user's freedom than the ordinary General\n+Public License.  It also provides other free software developers Less\n+of an advantage over competing non-free programs.  These disadvantages\n+are the reason we use the ordinary General Public License for many\n+libraries.  However, the Lesser license provides advantages in certain\n+special circumstances.\n+\n+  For example, on rare occasions, there may be a special need to\n+encourage the widest possible use of a certain library, so that it becomes\n+a de-facto standard.  To achieve this, non-free programs must be\n+allowed to use the library.  A more frequent case is that a free\n+library does the same job as widely used non-free libraries.  In this\n+case, there is little to gain by limiting the free library to free\n+software only, so we use the Lesser General Public License.\n+\n+  In other cases, permission to use a particular library in non-free\n+programs enables a greater number of people to use a large body of\n+free software.  For example, permission to use the GNU C Library in\n+non-free programs enables many more people to use the whole GNU\n+operating system, as well as its variant, the GNU/Linux operating\n+system.\n+\n+  Although the Lesser General Public License is Less protective of the\n+users' freedom, it does ensure that the user of a program that is\n+linked with the Library has the freedom and the wherewithal to run\n+that program using a modified version of the Library.\n+\n+  The precise terms and conditions for copying, distribution and\n+modification follow.  Pay close attention to the difference between a\n+\"work based on the library\" and a \"work that uses the library\".  The\n+former contains code derived from the library, whereas the latter must\n+be combined with the library in order to run.\n+\f\n+\t\t  GNU LESSER GENERAL PUBLIC LICENSE\n+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n+\n+  0. This License Agreement applies to any software library or other\n+program which contains a notice placed by the copyright holder or\n+other authorized party saying it may be distributed under the terms of\n+this Lesser General Public License (also called \"this License\").\n+Each licensee is addressed as \"you\".\n+\n+  A \"library\" means a collection of software functions and/or data\n+prepared so as to be conveniently linked with application programs\n+(which use some of those functions and data) to form executables.\n+\n+  The \"Library\", below, refers to any such software library or work\n+which has been distributed under these terms.  A \"work based on the\n+Library\" means either the Library or any derivative work under\n+copyright law: that is to say, a work containing the Library or a\n+portion of it, either verbatim or with modifications and/or translated\n+straightforwardly into another language.  (Hereinafter, translation is\n+included without limitation in the term \"modification\".)\n+\n+  \"Source code\" for a work means the preferred form of the work for\n+making modifications to it.  For a library, complete source code means\n+all the source code for all modules it contains, plus any associated\n+interface definition files, plus the scripts used to control compilation\n+and installation of the library.\n+\n+  Activities other than copying, distribution and modification are not\n+covered by this License; they are outside its scope.  The act of\n+running a program using the Library is not restricted, and output from\n+such a program is covered only if its contents constitute a work based\n+on the Library (independent of the use of the Library in a tool for\n+writing it).  Whether that is true depends on what the Library does\n+and what the program that uses the Library does.\n+  \n+  1. You may copy and distribute verbatim copies of the Library's\n+complete source code as you receive it, in any medium, provided that\n+you conspicuously and appropriately publish on each copy an\n+appropriate copyright notice and disclaimer of warranty; keep intact\n+all the notices that refer to this License and to the absence of any\n+warranty; and distribute a copy of this License along with the\n+Library.\n+\n+  You may charge a fee for the physical act of transferring a copy,\n+and you may at your option offer warranty protection in exchange for a\n+fee.\n+\f\n+  2. You may modify your copy or copies of the Library or any portion\n+of it, thus forming a work based on the Library, and copy and\n+distribute such modifications or work under the terms of Section 1\n+above, provided that you also meet all of these conditions:\n+\n+    a) The modified work must itself be a software library.\n+\n+    b) You must cause the files modified to carry prominent notices\n+    stating that you changed the files and the date of any change.\n+\n+    c) You must cause the whole of the work to be licensed at no\n+    charge to all third parties under the terms of this License.\n+\n+    d) If a facility in the modified Library refers to a function or a\n+    table of data to be supplied by an application program that uses\n+    the facility, other than as an argument passed when the facility\n+    is invoked, then you must make a good faith effort to ensure that,\n+    in the event an application does not supply such function or\n+    table, the facility still operates, and performs whatever part of\n+    its purpose remains meaningful.\n+\n+    (For example, a function in a library to compute square roots has\n+    a purpose that is entirely well-defined independent of the\n+    application.  Therefore, Subsection 2d requires that any\n+    application-supplied function or table used by this function must\n+    be optional: if the application does not supply it, the square\n+    root function must still compute square roots.)\n+\n+These requirements apply to the modified work as a whole.  If\n+identifiable sections of that work are not derived from the Library,\n+and can be reasonably considered independent and separate works in\n+themselves, then this License, and its terms, do not apply to those\n+sections when you distribute them as separate works.  But when you\n+distribute the same sections as part of a whole which is a work based\n+on the Library, the distribution of the whole must be on the terms of\n+this License, whose permissions for other licensees extend to the\n+entire whole, and thus to each and every part regardless of who wrote\n+it.\n+\n+Thus, it is not the intent of this section to claim rights or contest\n+your rights to work written entirely by you; rather, the intent is to\n+exercise the right to control the distribution of derivative or\n+collective works based on the Library.\n+\n+In addition, mere aggregation of another work not based on the Library\n+with the Library (or with a work based on the Library) on a volume of\n+a storage or distribution medium does not bring the other work under\n+the scope of this License.\n+\n+  3. You may opt to apply the terms of the ordinary GNU General Public\n+License instead of this License to a given copy of the Library.  To do\n+this, you must alter all the notices that refer to this License, so\n+that they refer to the ordinary GNU General Public License, version 2,\n+instead of to this License.  (If a newer version than version 2 of the\n+ordinary GNU General Public License has appeared, then you can specify\n+that version instead if you wish.)  Do not make any other change in\n+these notices.\n+\f\n+  Once this change is made in a given copy, it is irreversible for\n+that copy, so the ordinary GNU General Public License applies to all\n+subsequent copies and derivative works made from that copy.\n+\n+  This option is useful when you wish to copy part of the code of\n+the Library into a program that is not a library.\n+\n+  4. You may copy and distribute the Library (or a portion or\n+derivative of it, under Section 2) in object code or executable form\n+under the terms of Sections 1 and 2 above provided that you accompany\n+it with the complete corresponding machine-readable source code, which\n+must be distributed under the terms of Sections 1 and 2 above on a\n+medium customarily used for software interchange.\n+\n+  If distribution of object code is made by offering access to copy\n+from a designated place, then offering equivalent access to copy the\n+source code from the same place satisfies the requirement to\n+distribute the source code, even though third parties are not\n+compelled to copy the source along with the object code.\n+\n+  5. A program that contains no derivative of any portion of the\n+Library, but is designed to work with the Library by being compiled or\n+linked with it, is called a \"work that uses the Library\".  Such a\n+work, in isolation, is not a derivative work of the Library, and\n+therefore falls outside the scope of this License.\n+\n+  However, linking a \"work that uses the Library\" with the Library\n+creates an executable that is a derivative of the Library (because it\n+contains portions of the Library), rather than a \"work that uses the\n+library\".  The executable is therefore covered by this License.\n+Section 6 states terms for distribution of such executables.\n+\n+  When a \"work that uses the Library\" uses material from a header file\n+that is part of the Library, the object code for the work may be a\n+derivative work of the Library even though the source code is not.\n+Whether this is true is especially significant if the work can be\n+linked without the Library, or if the work is itself a library.  The\n+threshold for this to be true is not precisely defined by law.\n+\n+  If such an object file uses only numerical parameters, data\n+structure layouts and accessors, and small macros and small inline\n+functions (ten lines or less in length), then the use of the object\n+file is unrestricted, regardless of whether it is legally a derivative\n+work.  (Executables containing this object code plus portions of the\n+Library will still fall under Section 6.)\n+\n+  Otherwise, if the work is a derivative of the Library, you may\n+distribute the object code for the work under the terms of Section 6.\n+Any executables containing that work also fall under Section 6,\n+whether or not they are linked directly with the Library itself.\n+\f\n+  6. As an exception to the Sections above, you may also combine or\n+link a \"work that uses the Library\" with the Library to produce a\n+work containing portions of the Library, and distribute that work\n+under terms of your choice, provided that the terms permit\n+modification of the work for the customer's own use and reverse\n+engineering for debugging such modifications.\n+\n+  You must give prominent notice with each copy of the work that the\n+Library is used in it and that the Library and its use are covered by\n+this License.  You must supply a copy of this License.  If the work\n+during execution displays copyright notices, you must include the\n+copyright notice for the Library among them, as well as a reference\n+directing the user to the copy of this License.  Also, you must do one\n+of these things:\n+\n+    a) Accompany the work with the complete corresponding\n+    machine-readable source code for the Library including whatever\n+    changes were used in the work (which must be distributed under\n+    Sections 1 and 2 above); and, if the work is an executable linked\n+    with the Library, with the complete machine-readable \"work that\n+    uses the Library\", as object code and/or source code, so that the\n+    user can modify the Library and then relink to produce a modified\n+    executable containing the modified Library.  (It is understood\n+    that the user who changes the contents of definitions files in the\n+    Library will not necessarily be able to recompile the application\n+    to use the modified definitions.)\n+\n+    b) Use a suitable shared library mechanism for linking with the\n+    Library.  A suitable mechanism is one that (1) uses at run time a\n+    copy of the library already present on the user's computer system,\n+    rather than copying library functions into the executable, and (2)\n+    will operate properly with a modified version of the library, if\n+    the user installs one, as long as the modified version is\n+    interface-compatible with the version that the work was made with.\n+\n+    c) Accompany the work with a written offer, valid for at\n+    least three years, to give the same user the materials\n+    specified in Subsection 6a, above, for a charge no more\n+    than the cost of performing this distribution.\n+\n+    d) If distribution of the work is made by offering access to copy\n+    from a designated place, offer equivalent access to copy the above\n+    specified materials from the same place.\n+\n+    e) Verify that the user has already received a copy of these\n+    materials or that you have already sent this user a copy.\n+\n+  For an executable, the required form of the \"work that uses the\n+Library\" must include any data and utility programs needed for\n+reproducing the executable from it.  However, as a special exception,\n+the materials to be distributed need not include anything that is\n+normally distributed (in either source or binary form) with the major\n+components (compiler, kernel, and so on) of the operating system on\n+which the executable runs, unless that component itself accompanies\n+the executable.\n+\n+  It may happen that this requirement contradicts the license\n+restrictions of other proprietary libraries that do not normally\n+accompany the operating system.  Such a contradiction means you cannot\n+use both them and the Library together in an executable that you\n+distribute.\n+\f\n+  7. You may place library facilities that are a work based on the\n+Library side-by-side in a single library together with other library\n+facilities not covered by this License, and distribute such a combined\n+library, provided that the separate distribution of the work based on\n+the Library and of the other library facilities is otherwise\n+permitted, and provided that you do these two things:\n+\n+    a) Accompany the combined library with a copy of the same work\n+    based on the Library, uncombined with any other library\n+    facilities.  This must be distributed under the terms of the\n+    Sections above.\n+\n+    b) Give prominent notice with the combined library of the fact\n+    that part of it is a work based on the Library, and explaining\n+    where to find the accompanying uncombined form of the same work.\n+\n+  8. You may not copy, modify, sublicense, link with, or distribute\n+the Library except as expressly provided under this License.  Any\n+attempt otherwise to copy, modify, sublicense, link with, or\n+distribute the Library is void, and will automatically terminate your\n+rights under this License.  However, parties who have received copies,\n+or rights, from you under this License will not have their licenses\n+terminated so long as such parties remain in full compliance.\n+\n+  9. You are not required to accept this License, since you have not\n+signed it.  However, nothing else grants you permission to modify or\n+distribute the Library or its derivative works.  These actions are\n+prohibited by law if you do not accept this License.  Therefore, by\n+modifying or distributing the Library (or any work based on the\n+Library), you indicate your acceptance of this License to do so, and\n+all its terms and conditions for copying, distributing or modifying\n+the Library or works based on it.\n+\n+  10. Each time you redistribute the Library (or any work based on the\n+Library), the recipient automatically receives a license from the\n+original licensor to copy, distribute, link with or modify the Library\n+subject to these terms and conditions.  You may not impose any further\n+restrictions on the recipients' exercise of the rights granted herein.\n+You are not responsible for enforcing compliance by third parties with\n+this License.\n+\f\n+  11. If, as a consequence of a court judgment or allegation of patent\n+infringement or for any other reason (not limited to patent issues),\n+conditions are imposed on you (whether by court order, agreement or\n+otherwise) that contradict the conditions of this License, they do not\n+excuse you from the conditions of this License.  If you cannot\n+distribute so as to satisfy simultaneously your obligations under this\n+License and any other pertinent obligations, then as a consequence you\n+may not distribute the Library at all.  For example, if a patent\n+license would not permit royalty-free redistribution of the Library by\n+all those who receive copies directly or indirectly through you, then\n+the only way you could satisfy both it and this License would be to\n+refrain entirely from distribution of the Library.\n+\n+If any portion of this section is held invalid or unenforceable under any\n+particular circumstance, the balance of the section is intended to apply,\n+and the section as a whole is intended to apply in other circumstances.\n+\n+It is not the purpose of this section to induce you to infringe any\n+patents or other property right claims or to contest validity of any\n+such claims; this section has the sole purpose of protecting the\n+integrity of the free software distribution system which is\n+implemented by public license practices.  Many people have made\n+generous contributions to the wide range of software distributed\n+through that system in reliance on consistent application of that\n+system; it is up to the author/donor to decide if he or she is willing\n+to distribute software through any other system and a licensee cannot\n+impose that choice.\n+\n+This section is intended to make thoroughly clear what is believed to\n+be a consequence of the rest of this License.\n+\n+  12. If the distribution and/or use of the Library is restricted in\n+certain countries either by patents or by copyrighted interfaces, the\n+original copyright holder who places the Library under this License may add\n+an explicit geographical distribution limitation excluding those countries,\n+so that distribution is permitted only in or among countries not thus\n+excluded.  In such case, this License incorporates the limitation as if\n+written in the body of this License.\n+\n+  13. The Free Software Foundation may publish revised and/or new\n+versions of the Lesser General Public License from time to time.\n+Such new versions will be similar in spirit to the present version,\n+but may differ in detail to address new problems or concerns.\n+\n+Each version is given a distinguishing version number.  If the Library\n+specifies a version number of this License which applies to it and\n+\"any later version\", you have the option of following the terms and\n+conditions either of that version or of any later version published by\n+the Free Software Foundation.  If the Library does not specify a\n+license version number, you may choose any version ever published by\n+the Free Software Foundation.\n+\f\n+  14. If you wish to incorporate parts of the Library into other free\n+programs whose distribution conditions are incompatible with these,\n+write to the author to ask for permission.  For software which is\n+copyrighted by the Free Software Foundation, write to the Free\n+Software Foundation; we sometimes make exceptions for this.  Our\n+decision will be guided by the two goals of preserving the free status\n+of all derivatives of our free software and of promoting the sharing\n+and reuse of software generally.\n+\n+\t\t\t    NO WARRANTY\n+\n+  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO\n+WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.\n+EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR\n+OTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY\n+KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE\n+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n+PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\n+LIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME\n+THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n+\n+  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN\n+WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY\n+AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU\n+FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\n+CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE\n+LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING\n+RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A\n+FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF\n+SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n+DAMAGES.\n+\n+\t\t     END OF TERMS AND CONDITIONS\n+\f\n+           How to Apply These Terms to Your New Libraries\n+\n+  If you develop a new library, and you want it to be of the greatest\n+possible use to the public, we recommend making it free software that\n+everyone can redistribute and change.  You can do so by permitting\n+redistribution under these terms (or, alternatively, under the terms of the\n+ordinary General Public License).\n+\n+  To apply these terms, attach the following notices to the library.  It is\n+safest to attach them to the start of each source file to most effectively\n+convey the exclusion of warranty; and each file should have at least the\n+\"copyright\" line and a pointer to where the full notice is found.\n+\n+    <one line to give the library's name and a brief idea of what it does.>\n+    Copyright (C) <year>  <name of author>\n+\n+    This library is free software; you can redistribute it and/or\n+    modify it under the terms of the GNU Lesser General Public\n+    License as published by the Free Software Foundation; either\n+    version 2.1 of the License, or (at your option) any later version.\n+\n+    This library is distributed in the hope that it will be useful,\n+    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+    Lesser General Public License for more details.\n+\n+    You should have received a copy of the GNU Lesser General Public\n+    License along with this library; if not, write to the Free Software\n+    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+\n+Also add information on how to contact you by electronic and paper mail.\n+\n+You should also get your employer (if you work as a programmer) or your\n+school, if any, to sign a \"copyright disclaimer\" for the library, if\n+necessary.  Here is a sample; alter the names:\n+\n+  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n+  library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n+\n+  <signature of Ty Coon>, 1 April 1990\n+  Ty Coon, President of Vice\n+\n+That's all there is to it!\n+\n+"}, {"sha": "687d32d9f606ab2fa2b8b9b32e67b69a6d7bc36f", "filename": "libquadmath/ChangeLog", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FChangeLog?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,5 @@\n+2010-11-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\t    Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/32049\n+\tInitial implementation and checkin."}, {"sha": "667b9baf66a4987fbc22f5fde41ae0a5bc738d94", "filename": "libquadmath/Makefile.am", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FMakefile.am?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,70 @@\n+## Process this file with automake to produce Makefile.in\n+\n+AUTOMAKE_OPTIONS = 1.8 foreign\n+\n+\n+## Skip over everything if the quadlib is not available:\n+if BUILD_LIBQUADMATH\n+ACLOCAL_AMFLAGS = -I .. -I ../config\n+\n+## May be used by toolexeclibdir.\n+gcc_version := $(shell cat $(top_srcdir)/../gcc/BASE-VER)\n+\n+## Symbol versioning (copied from libssp).\n+if LIBQUAD_USE_SYMVER\n+if LIBQUAD_USE_SYMVER_GNU\n+version_arg = -Wl,--version-script=$(srcdir)/quadmath.map\n+version_dep = $(srcdir)/quadmath.map\n+endif\n+if LIBQUAD_USE_SYMVER_SUN\n+version_arg = -Wl,-M,quadmath.map-sun\n+version_dep = quadmath.map-sun\n+quadmath.map-sun : $(srcdir)/quadmath.map \\\n+                $(top_srcdir)/../contrib/make_sunver.pl \\\n+                $(libquadmath_la_OBJECTS) $(libquadmath_la_LIBADD)\n+        perl $(top_srcdir)/../contrib/make_sunver.pl \\\n+          $(srcdir)/quadmath.map \\\n+          $(libquadmath_la_OBJECTS:%.lo=.libs/%.o) \\\n+         `echo $(libquadmath_la_LIBADD) | \\\n+            sed 's,/\\([^/.]*\\)\\.la,/.libs/\\1.a,g'` \\\n+         > $@ || (rm -f $@ ; exit 1)\n+endif\n+else\n+version_arg =\n+version_dep =\n+endif\n+\n+LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS)) \\\n+            -no-undefined\n+\n+\n+toolexeclib_LTLIBRARIES = libquadmath.la\n+libquadmath_la_LIBADD = -lm\n+libquadmath_la_LDFLAGS = $(LTLDFLAGS) -version-info `grep -v '^\\#' $(srcdir)/libtool-version` $(version_arg)\n+libquadmath_la_LINK = $(LINK) $(libgfortran_la_LDFLAGS)\n+libquadmath_la_DEPENDENCIES = $(version_dep)\n+\n+include_HEADERS = quadmath.h quadmath_weak.h\n+\n+libquadmath_la_SOURCES = \\\n+  gdtoa/arith.h gdtoa/gdtoa_fltrnds.h gdtoa/gd_qnan.h gdtoa/gdtoaimp.h \\\n+  gdtoa/gdtoa.h quadmath-imp.h \\\n+  gdtoa/dmisc.c gdtoa/gdtoa.c gdtoa/hd_init.c gdtoa/smisc.c gdtoa/sum.c \\\n+  gdtoa/g_Qfmt.c gdtoa/gethex.c gdtoa/hexnan.c gdtoa/strtodg.c \\\n+  gdtoa/ulp.c gdtoa/g__fmt.c gdtoa/gmisc.c gdtoa/misc.c gdtoa/strtopQ.c \\\n+  quadmath_io.c \\\n+  math/acoshq.c math/fmodq.c math/acosq.c math/frexpq.c \\\n+  math/rem_pio2q.c math/asinhq.c math/hypotq.c math/remainderq.c \\\n+  math/asinq.c math/rintq.c math/atan2q.c math/isinfq.c \\\n+  math/roundq.c math/atanhq.c math/isnanq.c math/scalblnq.c math/atanq.c \\\n+  math/j0q.c math/scalbnq.c math/cbrtq.c math/j1q.c math/signbitq.c \\\n+  math/ceilq.c math/jnq.c math/sincos_table.c math/complex.c math/ldexpq.c \\\n+  math/sincosq.c math/copysignq.c math/lgammaq.c math/sincosq_kernel.c \\\n+  math/coshq.c math/llroundq.c math/sinhq.c math/cosq.c math/log10q.c \\\n+  math/sinq.c math/cosq_kernel.c math/log1pq.c math/sinq_kernel.c \\\n+  math/erfq.c math/logq.c math/sqrtq.c math/expm1q.c math/lroundq.c \\\n+  math/tanhq.c math/expq.c math/modfq.c math/tanq.c math/fabsq.c \\\n+  math/nanq.c math/tgammaq.c math/finiteq.c math/nextafterq.c \\\n+  math/truncq.c math/floorq.c math/powq.c\n+\n+endif"}, {"sha": "8033ff938c4c2c29ce5a9e07eddf21f2834b4da9", "filename": "libquadmath/Makefile.in", "status": "added", "additions": 981, "deletions": 0, "changes": 981, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FMakefile.in?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,981 @@\n+# Makefile.in generated by automake 1.11.1 from Makefile.am.\n+# @configure_input@\n+\n+# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n+# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,\n+# Inc.\n+# This Makefile.in is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY, to the extent permitted by law; without\n+# even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+# PARTICULAR PURPOSE.\n+\n+@SET_MAKE@\n+\n+\n+VPATH = @srcdir@\n+pkgdatadir = $(datadir)/@PACKAGE@\n+pkgincludedir = $(includedir)/@PACKAGE@\n+pkglibdir = $(libdir)/@PACKAGE@\n+pkglibexecdir = $(libexecdir)/@PACKAGE@\n+am__cd = CDPATH=\"$${ZSH_VERSION+.}$(PATH_SEPARATOR)\" && cd\n+install_sh_DATA = $(install_sh) -c -m 644\n+install_sh_PROGRAM = $(install_sh) -c\n+install_sh_SCRIPT = $(install_sh) -c\n+INSTALL_HEADER = $(INSTALL_DATA)\n+transform = $(program_transform_name)\n+NORMAL_INSTALL = :\n+PRE_INSTALL = :\n+POST_INSTALL = :\n+NORMAL_UNINSTALL = :\n+PRE_UNINSTALL = :\n+POST_UNINSTALL = :\n+build_triplet = @build@\n+host_triplet = @host@\n+target_triplet = @target@\n+@BUILD_LIBQUADMATH_FALSE@libquadmath_la_DEPENDENCIES =\n+subdir = .\n+DIST_COMMON = $(srcdir)/Makefile.in $(srcdir)/Makefile.am \\\n+\t$(top_srcdir)/configure $(am__configure_deps) \\\n+\t$(srcdir)/config.h.in $(srcdir)/../mkinstalldirs \\\n+\t$(srcdir)/../depcomp $(am__include_HEADERS_DIST)\n+ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n+am__aclocal_m4_deps = $(top_srcdir)/../config/depstand.m4 \\\n+\t$(top_srcdir)/../config/lead-dot.m4 \\\n+\t$(top_srcdir)/../config/multi.m4 \\\n+\t$(top_srcdir)/../config/override.m4 \\\n+\t$(top_srcdir)/../ltoptions.m4 $(top_srcdir)/../ltsugar.m4 \\\n+\t$(top_srcdir)/../ltversion.m4 $(top_srcdir)/../lt~obsolete.m4 \\\n+\t$(top_srcdir)/acinclude.m4 $(top_srcdir)/../libtool.m4 \\\n+\t$(top_srcdir)/configure.ac\n+am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n+\t$(ACLOCAL_M4)\n+am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\\n+ configure.lineno config.status.lineno\n+mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n+CONFIG_HEADER = config.h\n+CONFIG_CLEAN_FILES =\n+CONFIG_CLEAN_VPATH_FILES =\n+am__vpath_adj_setup = srcdirstrip=`echo \"$(srcdir)\" | sed 's|.|.|g'`;\n+am__vpath_adj = case $$p in \\\n+    $(srcdir)/*) f=`echo \"$$p\" | sed \"s|^$$srcdirstrip/||\"`;; \\\n+    *) f=$$p;; \\\n+  esac;\n+am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;\n+am__install_max = 40\n+am__nobase_strip_setup = \\\n+  srcdirstrip=`echo \"$(srcdir)\" | sed 's/[].[^$$\\\\*|]/\\\\\\\\&/g'`\n+am__nobase_strip = \\\n+  for p in $$list; do echo \"$$p\"; done | sed -e \"s|$$srcdirstrip/||\"\n+am__nobase_list = $(am__nobase_strip_setup); \\\n+  for p in $$list; do echo \"$$p $$p\"; done | \\\n+  sed \"s| $$srcdirstrip/| |;\"' / .*\\//!s/ .*/ ./; s,\\( .*\\)/[^/]*$$,\\1,' | \\\n+  $(AWK) 'BEGIN { files[\".\"] = \"\" } { files[$$2] = files[$$2] \" \" $$1; \\\n+    if (++n[$$2] == $(am__install_max)) \\\n+      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = \"\" } } \\\n+    END { for (dir in files) print dir, files[dir] }'\n+am__base_list = \\\n+  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\\n/ /g' | \\\n+  sed '$$!N;$$!N;$$!N;$$!N;s/\\n/ /g'\n+am__installdirs = \"$(DESTDIR)$(toolexeclibdir)\" \\\n+\t\"$(DESTDIR)$(includedir)\"\n+LTLIBRARIES = $(toolexeclib_LTLIBRARIES)\n+am__dirstamp = $(am__leading_dot)dirstamp\n+@BUILD_LIBQUADMATH_TRUE@am_libquadmath_la_OBJECTS = gdtoa/dmisc.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tgdtoa/gdtoa.lo gdtoa/hd_init.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tgdtoa/smisc.lo gdtoa/sum.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tgdtoa/g_Qfmt.lo gdtoa/gethex.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tgdtoa/hexnan.lo gdtoa/strtodg.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tgdtoa/ulp.lo gdtoa/g__fmt.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tgdtoa/gmisc.lo gdtoa/misc.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tgdtoa/strtopQ.lo quadmath_io.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/acoshq.lo math/fmodq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/acosq.lo math/frexpq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/rem_pio2q.lo math/asinhq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/hypotq.lo math/remainderq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/asinq.lo math/rintq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/atan2q.lo math/isinfq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/roundq.lo math/atanhq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/isnanq.lo math/scalblnq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/atanq.lo math/j0q.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/scalbnq.lo math/cbrtq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/j1q.lo math/signbitq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/ceilq.lo math/jnq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/sincos_table.lo math/complex.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/ldexpq.lo math/sincosq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/copysignq.lo math/lgammaq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/sincosq_kernel.lo math/coshq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/llroundq.lo math/sinhq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/cosq.lo math/log10q.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/sinq.lo math/cosq_kernel.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/log1pq.lo math/sinq_kernel.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/erfq.lo math/logq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/sqrtq.lo math/expm1q.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/lroundq.lo math/tanhq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/expq.lo math/modfq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/tanq.lo math/fabsq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/nanq.lo math/tgammaq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/finiteq.lo math/nextafterq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/truncq.lo math/floorq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/powq.lo\n+libquadmath_la_OBJECTS = $(am_libquadmath_la_OBJECTS)\n+@BUILD_LIBQUADMATH_TRUE@am_libquadmath_la_rpath = -rpath \\\n+@BUILD_LIBQUADMATH_TRUE@\t$(toolexeclibdir)\n+DEFAULT_INCLUDES = -I.@am__isrc@\n+depcomp = $(SHELL) $(top_srcdir)/../depcomp\n+am__depfiles_maybe = depfiles\n+am__mv = mv -f\n+COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\\n+\t$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n+LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n+\t--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\\n+\t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n+CCLD = $(CC)\n+LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n+\t--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \\\n+\t$(LDFLAGS) -o $@\n+SOURCES = $(libquadmath_la_SOURCES)\n+MULTISRCTOP = \n+MULTIBUILDTOP = \n+MULTIDIRS = \n+MULTISUBDIR = \n+MULTIDO = true\n+MULTICLEAN = true\n+am__include_HEADERS_DIST = quadmath.h quadmath_weak.h\n+HEADERS = $(include_HEADERS)\n+ETAGS = etags\n+CTAGS = ctags\n+ACLOCAL = @ACLOCAL@\n+AMTAR = @AMTAR@\n+AR = @AR@\n+AUTOCONF = @AUTOCONF@\n+AUTOHEADER = @AUTOHEADER@\n+AUTOMAKE = @AUTOMAKE@\n+AWK = @AWK@\n+CC = @CC@\n+CCDEPMODE = @CCDEPMODE@\n+CFLAGS = @CFLAGS@\n+CPP = @CPP@\n+CPPFLAGS = @CPPFLAGS@\n+CYGPATH_W = @CYGPATH_W@\n+DEFS = @DEFS@\n+DEPDIR = @DEPDIR@\n+DSYMUTIL = @DSYMUTIL@\n+DUMPBIN = @DUMPBIN@\n+ECHO_C = @ECHO_C@\n+ECHO_N = @ECHO_N@\n+ECHO_T = @ECHO_T@\n+EGREP = @EGREP@\n+EXEEXT = @EXEEXT@\n+FGREP = @FGREP@\n+GREP = @GREP@\n+INSTALL = @INSTALL@\n+INSTALL_DATA = @INSTALL_DATA@\n+INSTALL_PROGRAM = @INSTALL_PROGRAM@\n+INSTALL_SCRIPT = @INSTALL_SCRIPT@\n+INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@\n+LD = @LD@\n+LDFLAGS = @LDFLAGS@\n+LIBOBJS = @LIBOBJS@\n+LIBS = @LIBS@\n+LIBTOOL = @LIBTOOL@\n+LIPO = @LIPO@\n+LN_S = @LN_S@\n+LTLIBOBJS = @LTLIBOBJS@\n+MAINT = @MAINT@\n+MAKEINFO = @MAKEINFO@\n+MKDIR_P = @MKDIR_P@\n+NM = @NM@\n+NMEDIT = @NMEDIT@\n+OBJDUMP = @OBJDUMP@\n+OBJEXT = @OBJEXT@\n+OTOOL = @OTOOL@\n+OTOOL64 = @OTOOL64@\n+PACKAGE = @PACKAGE@\n+PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@\n+PACKAGE_NAME = @PACKAGE_NAME@\n+PACKAGE_STRING = @PACKAGE_STRING@\n+PACKAGE_TARNAME = @PACKAGE_TARNAME@\n+PACKAGE_URL = @PACKAGE_URL@\n+PACKAGE_VERSION = @PACKAGE_VERSION@\n+PATH_SEPARATOR = @PATH_SEPARATOR@\n+RANLIB = @RANLIB@\n+SED = @SED@\n+SET_MAKE = @SET_MAKE@\n+SHELL = @SHELL@\n+STRIP = @STRIP@\n+VERSION = @VERSION@\n+abs_builddir = @abs_builddir@\n+abs_srcdir = @abs_srcdir@\n+abs_top_builddir = @abs_top_builddir@\n+abs_top_srcdir = @abs_top_srcdir@\n+ac_ct_CC = @ac_ct_CC@\n+ac_ct_DUMPBIN = @ac_ct_DUMPBIN@\n+am__include = @am__include@\n+am__leading_dot = @am__leading_dot@\n+am__quote = @am__quote@\n+am__tar = @am__tar@\n+am__untar = @am__untar@\n+bindir = @bindir@\n+build = @build@\n+build_alias = @build_alias@\n+build_cpu = @build_cpu@\n+build_os = @build_os@\n+build_vendor = @build_vendor@\n+builddir = @builddir@\n+datadir = @datadir@\n+datarootdir = @datarootdir@\n+docdir = @docdir@\n+dvidir = @dvidir@\n+enable_shared = @enable_shared@\n+enable_static = @enable_static@\n+exec_prefix = @exec_prefix@\n+host = @host@\n+host_alias = @host_alias@\n+host_cpu = @host_cpu@\n+host_os = @host_os@\n+host_vendor = @host_vendor@\n+htmldir = @htmldir@\n+includedir = @includedir@\n+infodir = @infodir@\n+install_sh = @install_sh@\n+libdir = @libdir@\n+libexecdir = @libexecdir@\n+localedir = @localedir@\n+localstatedir = @localstatedir@\n+mandir = @mandir@\n+mkdir_p = @mkdir_p@\n+multi_basedir = @multi_basedir@\n+oldincludedir = @oldincludedir@\n+pdfdir = @pdfdir@\n+prefix = @prefix@\n+program_transform_name = @program_transform_name@\n+psdir = @psdir@\n+sbindir = @sbindir@\n+sharedstatedir = @sharedstatedir@\n+srcdir = @srcdir@\n+sysconfdir = @sysconfdir@\n+target = @target@\n+target_alias = @target_alias@\n+target_cpu = @target_cpu@\n+target_os = @target_os@\n+target_vendor = @target_vendor@\n+toolexecdir = @toolexecdir@\n+toolexeclibdir = @toolexeclibdir@\n+top_build_prefix = @top_build_prefix@\n+top_builddir = @top_builddir@\n+top_srcdir = @top_srcdir@\n+AUTOMAKE_OPTIONS = 1.8 foreign\n+@BUILD_LIBQUADMATH_TRUE@ACLOCAL_AMFLAGS = -I .. -I ../config\n+@BUILD_LIBQUADMATH_TRUE@gcc_version := $(shell cat $(top_srcdir)/../gcc/BASE-VER)\n+@BUILD_LIBQUADMATH_TRUE@@LIBQUAD_USE_SYMVER_FALSE@version_arg = \n+@BUILD_LIBQUADMATH_TRUE@@LIBQUAD_USE_SYMVER_GNU_TRUE@@LIBQUAD_USE_SYMVER_TRUE@version_arg = -Wl,--version-script=$(srcdir)/quadmath.map\n+@BUILD_LIBQUADMATH_TRUE@@LIBQUAD_USE_SYMVER_SUN_TRUE@@LIBQUAD_USE_SYMVER_TRUE@version_arg = -Wl,-M,quadmath.map-sun\n+@BUILD_LIBQUADMATH_TRUE@@LIBQUAD_USE_SYMVER_FALSE@version_dep = \n+@BUILD_LIBQUADMATH_TRUE@@LIBQUAD_USE_SYMVER_GNU_TRUE@@LIBQUAD_USE_SYMVER_TRUE@version_dep = $(srcdir)/quadmath.map\n+@BUILD_LIBQUADMATH_TRUE@@LIBQUAD_USE_SYMVER_SUN_TRUE@@LIBQUAD_USE_SYMVER_TRUE@version_dep = quadmath.map-sun\n+@BUILD_LIBQUADMATH_TRUE@LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS)) \\\n+@BUILD_LIBQUADMATH_TRUE@            -no-undefined\n+\n+@BUILD_LIBQUADMATH_TRUE@toolexeclib_LTLIBRARIES = libquadmath.la\n+@BUILD_LIBQUADMATH_TRUE@libquadmath_la_LIBADD = -lm\n+@BUILD_LIBQUADMATH_TRUE@libquadmath_la_LDFLAGS = $(LTLDFLAGS) -version-info `grep -v '^\\#' $(srcdir)/libtool-version` $(version_arg)\n+@BUILD_LIBQUADMATH_TRUE@libquadmath_la_LINK = $(LINK) $(libgfortran_la_LDFLAGS)\n+@BUILD_LIBQUADMATH_TRUE@libquadmath_la_DEPENDENCIES = $(version_dep)\n+@BUILD_LIBQUADMATH_TRUE@include_HEADERS = quadmath.h quadmath_weak.h\n+@BUILD_LIBQUADMATH_TRUE@libquadmath_la_SOURCES = \\\n+@BUILD_LIBQUADMATH_TRUE@  gdtoa/arith.h gdtoa/gdtoa_fltrnds.h gdtoa/gd_qnan.h gdtoa/gdtoaimp.h \\\n+@BUILD_LIBQUADMATH_TRUE@  gdtoa/gdtoa.h quadmath-imp.h \\\n+@BUILD_LIBQUADMATH_TRUE@  gdtoa/dmisc.c gdtoa/gdtoa.c gdtoa/hd_init.c gdtoa/smisc.c gdtoa/sum.c \\\n+@BUILD_LIBQUADMATH_TRUE@  gdtoa/g_Qfmt.c gdtoa/gethex.c gdtoa/hexnan.c gdtoa/strtodg.c \\\n+@BUILD_LIBQUADMATH_TRUE@  gdtoa/ulp.c gdtoa/g__fmt.c gdtoa/gmisc.c gdtoa/misc.c gdtoa/strtopQ.c \\\n+@BUILD_LIBQUADMATH_TRUE@  quadmath_io.c \\\n+@BUILD_LIBQUADMATH_TRUE@  math/acoshq.c math/fmodq.c math/acosq.c math/frexpq.c \\\n+@BUILD_LIBQUADMATH_TRUE@  math/rem_pio2q.c math/asinhq.c math/hypotq.c math/remainderq.c \\\n+@BUILD_LIBQUADMATH_TRUE@  math/asinq.c math/rintq.c math/atan2q.c math/isinfq.c \\\n+@BUILD_LIBQUADMATH_TRUE@  math/roundq.c math/atanhq.c math/isnanq.c math/scalblnq.c math/atanq.c \\\n+@BUILD_LIBQUADMATH_TRUE@  math/j0q.c math/scalbnq.c math/cbrtq.c math/j1q.c math/signbitq.c \\\n+@BUILD_LIBQUADMATH_TRUE@  math/ceilq.c math/jnq.c math/sincos_table.c math/complex.c math/ldexpq.c \\\n+@BUILD_LIBQUADMATH_TRUE@  math/sincosq.c math/copysignq.c math/lgammaq.c math/sincosq_kernel.c \\\n+@BUILD_LIBQUADMATH_TRUE@  math/coshq.c math/llroundq.c math/sinhq.c math/cosq.c math/log10q.c \\\n+@BUILD_LIBQUADMATH_TRUE@  math/sinq.c math/cosq_kernel.c math/log1pq.c math/sinq_kernel.c \\\n+@BUILD_LIBQUADMATH_TRUE@  math/erfq.c math/logq.c math/sqrtq.c math/expm1q.c math/lroundq.c \\\n+@BUILD_LIBQUADMATH_TRUE@  math/tanhq.c math/expq.c math/modfq.c math/tanq.c math/fabsq.c \\\n+@BUILD_LIBQUADMATH_TRUE@  math/nanq.c math/tgammaq.c math/finiteq.c math/nextafterq.c \\\n+@BUILD_LIBQUADMATH_TRUE@  math/truncq.c math/floorq.c math/powq.c\n+\n+all: config.h\n+\t$(MAKE) $(AM_MAKEFLAGS) all-am\n+\n+.SUFFIXES:\n+.SUFFIXES: .c .lo .o .obj\n+am--refresh:\n+\t@:\n+$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.am  $(am__configure_deps)\n+\t@for dep in $?; do \\\n+\t  case '$(am__configure_deps)' in \\\n+\t    *$$dep*) \\\n+\t      echo ' cd $(srcdir) && $(AUTOMAKE) --foreign'; \\\n+\t      $(am__cd) $(srcdir) && $(AUTOMAKE) --foreign \\\n+\t\t&& exit 0; \\\n+\t      exit 1;; \\\n+\t  esac; \\\n+\tdone; \\\n+\techo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign Makefile'; \\\n+\t$(am__cd) $(top_srcdir) && \\\n+\t  $(AUTOMAKE) --foreign Makefile\n+.PRECIOUS: Makefile\n+Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status\n+\t@case '$?' in \\\n+\t  *config.status*) \\\n+\t    echo ' $(SHELL) ./config.status'; \\\n+\t    $(SHELL) ./config.status;; \\\n+\t  *) \\\n+\t    echo ' cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe)'; \\\n+\t    cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe);; \\\n+\tesac;\n+\n+$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)\n+\t$(SHELL) ./config.status --recheck\n+\n+$(top_srcdir)/configure: @MAINTAINER_MODE_TRUE@ $(am__configure_deps)\n+\t$(am__cd) $(srcdir) && $(AUTOCONF)\n+$(ACLOCAL_M4): @MAINTAINER_MODE_TRUE@ $(am__aclocal_m4_deps)\n+\t$(am__cd) $(srcdir) && $(ACLOCAL) $(ACLOCAL_AMFLAGS)\n+$(am__aclocal_m4_deps):\n+\n+config.h: stamp-h1\n+\t@if test ! -f $@; then \\\n+\t  rm -f stamp-h1; \\\n+\t  $(MAKE) $(AM_MAKEFLAGS) stamp-h1; \\\n+\telse :; fi\n+\n+stamp-h1: $(srcdir)/config.h.in $(top_builddir)/config.status\n+\t@rm -f stamp-h1\n+\tcd $(top_builddir) && $(SHELL) ./config.status config.h\n+$(srcdir)/config.h.in: @MAINTAINER_MODE_TRUE@ $(am__configure_deps) \n+\t($(am__cd) $(top_srcdir) && $(AUTOHEADER))\n+\trm -f stamp-h1\n+\ttouch $@\n+\n+distclean-hdr:\n+\t-rm -f config.h stamp-h1\n+install-toolexeclibLTLIBRARIES: $(toolexeclib_LTLIBRARIES)\n+\t@$(NORMAL_INSTALL)\n+\ttest -z \"$(toolexeclibdir)\" || $(MKDIR_P) \"$(DESTDIR)$(toolexeclibdir)\"\n+\t@list='$(toolexeclib_LTLIBRARIES)'; test -n \"$(toolexeclibdir)\" || list=; \\\n+\tlist2=; for p in $$list; do \\\n+\t  if test -f $$p; then \\\n+\t    list2=\"$$list2 $$p\"; \\\n+\t  else :; fi; \\\n+\tdone; \\\n+\ttest -z \"$$list2\" || { \\\n+\t  echo \" $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 '$(DESTDIR)$(toolexeclibdir)'\"; \\\n+\t  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 \"$(DESTDIR)$(toolexeclibdir)\"; \\\n+\t}\n+\n+uninstall-toolexeclibLTLIBRARIES:\n+\t@$(NORMAL_UNINSTALL)\n+\t@list='$(toolexeclib_LTLIBRARIES)'; test -n \"$(toolexeclibdir)\" || list=; \\\n+\tfor p in $$list; do \\\n+\t  $(am__strip_dir) \\\n+\t  echo \" $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f '$(DESTDIR)$(toolexeclibdir)/$$f'\"; \\\n+\t  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f \"$(DESTDIR)$(toolexeclibdir)/$$f\"; \\\n+\tdone\n+\n+clean-toolexeclibLTLIBRARIES:\n+\t-test -z \"$(toolexeclib_LTLIBRARIES)\" || rm -f $(toolexeclib_LTLIBRARIES)\n+\t@list='$(toolexeclib_LTLIBRARIES)'; for p in $$list; do \\\n+\t  dir=\"`echo $$p | sed -e 's|/[^/]*$$||'`\"; \\\n+\t  test \"$$dir\" != \"$$p\" || dir=.; \\\n+\t  echo \"rm -f \\\"$${dir}/so_locations\\\"\"; \\\n+\t  rm -f \"$${dir}/so_locations\"; \\\n+\tdone\n+gdtoa/$(am__dirstamp):\n+\t@$(MKDIR_P) gdtoa\n+\t@: > gdtoa/$(am__dirstamp)\n+gdtoa/$(DEPDIR)/$(am__dirstamp):\n+\t@$(MKDIR_P) gdtoa/$(DEPDIR)\n+\t@: > gdtoa/$(DEPDIR)/$(am__dirstamp)\n+gdtoa/dmisc.lo: gdtoa/$(am__dirstamp) gdtoa/$(DEPDIR)/$(am__dirstamp)\n+gdtoa/gdtoa.lo: gdtoa/$(am__dirstamp) gdtoa/$(DEPDIR)/$(am__dirstamp)\n+gdtoa/hd_init.lo: gdtoa/$(am__dirstamp) \\\n+\tgdtoa/$(DEPDIR)/$(am__dirstamp)\n+gdtoa/smisc.lo: gdtoa/$(am__dirstamp) gdtoa/$(DEPDIR)/$(am__dirstamp)\n+gdtoa/sum.lo: gdtoa/$(am__dirstamp) gdtoa/$(DEPDIR)/$(am__dirstamp)\n+gdtoa/g_Qfmt.lo: gdtoa/$(am__dirstamp) gdtoa/$(DEPDIR)/$(am__dirstamp)\n+gdtoa/gethex.lo: gdtoa/$(am__dirstamp) gdtoa/$(DEPDIR)/$(am__dirstamp)\n+gdtoa/hexnan.lo: gdtoa/$(am__dirstamp) gdtoa/$(DEPDIR)/$(am__dirstamp)\n+gdtoa/strtodg.lo: gdtoa/$(am__dirstamp) \\\n+\tgdtoa/$(DEPDIR)/$(am__dirstamp)\n+gdtoa/ulp.lo: gdtoa/$(am__dirstamp) gdtoa/$(DEPDIR)/$(am__dirstamp)\n+gdtoa/g__fmt.lo: gdtoa/$(am__dirstamp) gdtoa/$(DEPDIR)/$(am__dirstamp)\n+gdtoa/gmisc.lo: gdtoa/$(am__dirstamp) gdtoa/$(DEPDIR)/$(am__dirstamp)\n+gdtoa/misc.lo: gdtoa/$(am__dirstamp) gdtoa/$(DEPDIR)/$(am__dirstamp)\n+gdtoa/strtopQ.lo: gdtoa/$(am__dirstamp) \\\n+\tgdtoa/$(DEPDIR)/$(am__dirstamp)\n+math/$(am__dirstamp):\n+\t@$(MKDIR_P) math\n+\t@: > math/$(am__dirstamp)\n+math/$(DEPDIR)/$(am__dirstamp):\n+\t@$(MKDIR_P) math/$(DEPDIR)\n+\t@: > math/$(DEPDIR)/$(am__dirstamp)\n+math/acoshq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/fmodq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/acosq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/frexpq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/rem_pio2q.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/asinhq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/hypotq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/remainderq.lo: math/$(am__dirstamp) \\\n+\tmath/$(DEPDIR)/$(am__dirstamp)\n+math/asinq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/rintq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/atan2q.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/isinfq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/roundq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/atanhq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/isnanq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/scalblnq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/atanq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/j0q.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/scalbnq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/cbrtq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/j1q.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/signbitq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/ceilq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/jnq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/sincos_table.lo: math/$(am__dirstamp) \\\n+\tmath/$(DEPDIR)/$(am__dirstamp)\n+math/complex.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/ldexpq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/sincosq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/copysignq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/lgammaq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/sincosq_kernel.lo: math/$(am__dirstamp) \\\n+\tmath/$(DEPDIR)/$(am__dirstamp)\n+math/coshq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/llroundq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/sinhq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/cosq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/log10q.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/sinq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/cosq_kernel.lo: math/$(am__dirstamp) \\\n+\tmath/$(DEPDIR)/$(am__dirstamp)\n+math/log1pq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/sinq_kernel.lo: math/$(am__dirstamp) \\\n+\tmath/$(DEPDIR)/$(am__dirstamp)\n+math/erfq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/logq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/sqrtq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/expm1q.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/lroundq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/tanhq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/expq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/modfq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/tanq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/fabsq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/nanq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/tgammaq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/finiteq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/nextafterq.lo: math/$(am__dirstamp) \\\n+\tmath/$(DEPDIR)/$(am__dirstamp)\n+math/truncq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/floorq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/powq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+libquadmath.la: $(libquadmath_la_OBJECTS) $(libquadmath_la_DEPENDENCIES) \n+\t$(libquadmath_la_LINK) $(am_libquadmath_la_rpath) $(libquadmath_la_OBJECTS) $(libquadmath_la_LIBADD) $(LIBS)\n+\n+mostlyclean-compile:\n+\t-rm -f *.$(OBJEXT)\n+\t-rm -f gdtoa/dmisc.$(OBJEXT)\n+\t-rm -f gdtoa/dmisc.lo\n+\t-rm -f gdtoa/g_Qfmt.$(OBJEXT)\n+\t-rm -f gdtoa/g_Qfmt.lo\n+\t-rm -f gdtoa/g__fmt.$(OBJEXT)\n+\t-rm -f gdtoa/g__fmt.lo\n+\t-rm -f gdtoa/gdtoa.$(OBJEXT)\n+\t-rm -f gdtoa/gdtoa.lo\n+\t-rm -f gdtoa/gethex.$(OBJEXT)\n+\t-rm -f gdtoa/gethex.lo\n+\t-rm -f gdtoa/gmisc.$(OBJEXT)\n+\t-rm -f gdtoa/gmisc.lo\n+\t-rm -f gdtoa/hd_init.$(OBJEXT)\n+\t-rm -f gdtoa/hd_init.lo\n+\t-rm -f gdtoa/hexnan.$(OBJEXT)\n+\t-rm -f gdtoa/hexnan.lo\n+\t-rm -f gdtoa/misc.$(OBJEXT)\n+\t-rm -f gdtoa/misc.lo\n+\t-rm -f gdtoa/smisc.$(OBJEXT)\n+\t-rm -f gdtoa/smisc.lo\n+\t-rm -f gdtoa/strtodg.$(OBJEXT)\n+\t-rm -f gdtoa/strtodg.lo\n+\t-rm -f gdtoa/strtopQ.$(OBJEXT)\n+\t-rm -f gdtoa/strtopQ.lo\n+\t-rm -f gdtoa/sum.$(OBJEXT)\n+\t-rm -f gdtoa/sum.lo\n+\t-rm -f gdtoa/ulp.$(OBJEXT)\n+\t-rm -f gdtoa/ulp.lo\n+\t-rm -f math/acoshq.$(OBJEXT)\n+\t-rm -f math/acoshq.lo\n+\t-rm -f math/acosq.$(OBJEXT)\n+\t-rm -f math/acosq.lo\n+\t-rm -f math/asinhq.$(OBJEXT)\n+\t-rm -f math/asinhq.lo\n+\t-rm -f math/asinq.$(OBJEXT)\n+\t-rm -f math/asinq.lo\n+\t-rm -f math/atan2q.$(OBJEXT)\n+\t-rm -f math/atan2q.lo\n+\t-rm -f math/atanhq.$(OBJEXT)\n+\t-rm -f math/atanhq.lo\n+\t-rm -f math/atanq.$(OBJEXT)\n+\t-rm -f math/atanq.lo\n+\t-rm -f math/cbrtq.$(OBJEXT)\n+\t-rm -f math/cbrtq.lo\n+\t-rm -f math/ceilq.$(OBJEXT)\n+\t-rm -f math/ceilq.lo\n+\t-rm -f math/complex.$(OBJEXT)\n+\t-rm -f math/complex.lo\n+\t-rm -f math/copysignq.$(OBJEXT)\n+\t-rm -f math/copysignq.lo\n+\t-rm -f math/coshq.$(OBJEXT)\n+\t-rm -f math/coshq.lo\n+\t-rm -f math/cosq.$(OBJEXT)\n+\t-rm -f math/cosq.lo\n+\t-rm -f math/cosq_kernel.$(OBJEXT)\n+\t-rm -f math/cosq_kernel.lo\n+\t-rm -f math/erfq.$(OBJEXT)\n+\t-rm -f math/erfq.lo\n+\t-rm -f math/expm1q.$(OBJEXT)\n+\t-rm -f math/expm1q.lo\n+\t-rm -f math/expq.$(OBJEXT)\n+\t-rm -f math/expq.lo\n+\t-rm -f math/fabsq.$(OBJEXT)\n+\t-rm -f math/fabsq.lo\n+\t-rm -f math/finiteq.$(OBJEXT)\n+\t-rm -f math/finiteq.lo\n+\t-rm -f math/floorq.$(OBJEXT)\n+\t-rm -f math/floorq.lo\n+\t-rm -f math/fmodq.$(OBJEXT)\n+\t-rm -f math/fmodq.lo\n+\t-rm -f math/frexpq.$(OBJEXT)\n+\t-rm -f math/frexpq.lo\n+\t-rm -f math/hypotq.$(OBJEXT)\n+\t-rm -f math/hypotq.lo\n+\t-rm -f math/isinfq.$(OBJEXT)\n+\t-rm -f math/isinfq.lo\n+\t-rm -f math/isnanq.$(OBJEXT)\n+\t-rm -f math/isnanq.lo\n+\t-rm -f math/j0q.$(OBJEXT)\n+\t-rm -f math/j0q.lo\n+\t-rm -f math/j1q.$(OBJEXT)\n+\t-rm -f math/j1q.lo\n+\t-rm -f math/jnq.$(OBJEXT)\n+\t-rm -f math/jnq.lo\n+\t-rm -f math/ldexpq.$(OBJEXT)\n+\t-rm -f math/ldexpq.lo\n+\t-rm -f math/lgammaq.$(OBJEXT)\n+\t-rm -f math/lgammaq.lo\n+\t-rm -f math/llroundq.$(OBJEXT)\n+\t-rm -f math/llroundq.lo\n+\t-rm -f math/log10q.$(OBJEXT)\n+\t-rm -f math/log10q.lo\n+\t-rm -f math/log1pq.$(OBJEXT)\n+\t-rm -f math/log1pq.lo\n+\t-rm -f math/logq.$(OBJEXT)\n+\t-rm -f math/logq.lo\n+\t-rm -f math/lroundq.$(OBJEXT)\n+\t-rm -f math/lroundq.lo\n+\t-rm -f math/modfq.$(OBJEXT)\n+\t-rm -f math/modfq.lo\n+\t-rm -f math/nanq.$(OBJEXT)\n+\t-rm -f math/nanq.lo\n+\t-rm -f math/nextafterq.$(OBJEXT)\n+\t-rm -f math/nextafterq.lo\n+\t-rm -f math/powq.$(OBJEXT)\n+\t-rm -f math/powq.lo\n+\t-rm -f math/rem_pio2q.$(OBJEXT)\n+\t-rm -f math/rem_pio2q.lo\n+\t-rm -f math/remainderq.$(OBJEXT)\n+\t-rm -f math/remainderq.lo\n+\t-rm -f math/rintq.$(OBJEXT)\n+\t-rm -f math/rintq.lo\n+\t-rm -f math/roundq.$(OBJEXT)\n+\t-rm -f math/roundq.lo\n+\t-rm -f math/scalblnq.$(OBJEXT)\n+\t-rm -f math/scalblnq.lo\n+\t-rm -f math/scalbnq.$(OBJEXT)\n+\t-rm -f math/scalbnq.lo\n+\t-rm -f math/signbitq.$(OBJEXT)\n+\t-rm -f math/signbitq.lo\n+\t-rm -f math/sincos_table.$(OBJEXT)\n+\t-rm -f math/sincos_table.lo\n+\t-rm -f math/sincosq.$(OBJEXT)\n+\t-rm -f math/sincosq.lo\n+\t-rm -f math/sincosq_kernel.$(OBJEXT)\n+\t-rm -f math/sincosq_kernel.lo\n+\t-rm -f math/sinhq.$(OBJEXT)\n+\t-rm -f math/sinhq.lo\n+\t-rm -f math/sinq.$(OBJEXT)\n+\t-rm -f math/sinq.lo\n+\t-rm -f math/sinq_kernel.$(OBJEXT)\n+\t-rm -f math/sinq_kernel.lo\n+\t-rm -f math/sqrtq.$(OBJEXT)\n+\t-rm -f math/sqrtq.lo\n+\t-rm -f math/tanhq.$(OBJEXT)\n+\t-rm -f math/tanhq.lo\n+\t-rm -f math/tanq.$(OBJEXT)\n+\t-rm -f math/tanq.lo\n+\t-rm -f math/tgammaq.$(OBJEXT)\n+\t-rm -f math/tgammaq.lo\n+\t-rm -f math/truncq.$(OBJEXT)\n+\t-rm -f math/truncq.lo\n+\n+distclean-compile:\n+\t-rm -f *.tab.c\n+\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/quadmath_io.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gdtoa/$(DEPDIR)/dmisc.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gdtoa/$(DEPDIR)/g_Qfmt.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gdtoa/$(DEPDIR)/g__fmt.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gdtoa/$(DEPDIR)/gdtoa.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gdtoa/$(DEPDIR)/gethex.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gdtoa/$(DEPDIR)/gmisc.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gdtoa/$(DEPDIR)/hd_init.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gdtoa/$(DEPDIR)/hexnan.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gdtoa/$(DEPDIR)/misc.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gdtoa/$(DEPDIR)/smisc.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gdtoa/$(DEPDIR)/strtodg.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gdtoa/$(DEPDIR)/strtopQ.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gdtoa/$(DEPDIR)/sum.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gdtoa/$(DEPDIR)/ulp.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/acoshq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/acosq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/asinhq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/asinq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/atan2q.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/atanhq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/atanq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/cbrtq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/ceilq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/complex.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/copysignq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/coshq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/cosq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/cosq_kernel.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/erfq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/expm1q.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/expq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/fabsq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/finiteq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/floorq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/fmodq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/frexpq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/hypotq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/isinfq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/isnanq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/j0q.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/j1q.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/jnq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/ldexpq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/lgammaq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/llroundq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/log10q.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/log1pq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/logq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/lroundq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/modfq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/nanq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/nextafterq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/powq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/rem_pio2q.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/remainderq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/rintq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/roundq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/scalblnq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/scalbnq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/signbitq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/sincos_table.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/sincosq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/sincosq_kernel.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/sinhq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/sinq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/sinq_kernel.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/sqrtq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/tanhq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/tanq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/tgammaq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/truncq.Plo@am__quote@\n+\n+.c.o:\n+@am__fastdepCC_TRUE@\tdepbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\\.o$$||'`;\\\n+@am__fastdepCC_TRUE@\t$(COMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\\\n+@am__fastdepCC_TRUE@\t$(am__mv) $$depbase.Tpo $$depbase.Po\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='$<' object='$@' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(COMPILE) -c -o $@ $<\n+\n+.c.obj:\n+@am__fastdepCC_TRUE@\tdepbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\\.obj$$||'`;\\\n+@am__fastdepCC_TRUE@\t$(COMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ `$(CYGPATH_W) '$<'` &&\\\n+@am__fastdepCC_TRUE@\t$(am__mv) $$depbase.Tpo $$depbase.Po\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='$<' object='$@' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(COMPILE) -c -o $@ `$(CYGPATH_W) '$<'`\n+\n+.c.lo:\n+@am__fastdepCC_TRUE@\tdepbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\\.lo$$||'`;\\\n+@am__fastdepCC_TRUE@\t$(LTCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\\\n+@am__fastdepCC_TRUE@\t$(am__mv) $$depbase.Tpo $$depbase.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='$<' object='$@' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LTCOMPILE) -c -o $@ $<\n+\n+mostlyclean-libtool:\n+\t-rm -f *.lo\n+\n+clean-libtool:\n+\t-rm -rf .libs _libs\n+\t-rm -rf gdtoa/.libs gdtoa/_libs\n+\t-rm -rf math/.libs math/_libs\n+\n+distclean-libtool:\n+\t-rm -f libtool config.lt\n+\n+# GNU Make needs to see an explicit $(MAKE) variable in the command it\n+# runs to enable its job server during parallel builds.  Hence the\n+# comments below.\n+all-multi:\n+\t$(MULTIDO) $(AM_MAKEFLAGS) DO=all multi-do # $(MAKE)\n+install-multi:\n+\t$(MULTIDO) $(AM_MAKEFLAGS) DO=install multi-do # $(MAKE)\n+\n+mostlyclean-multi:\n+\t$(MULTICLEAN) $(AM_MAKEFLAGS) DO=mostlyclean multi-clean # $(MAKE)\n+clean-multi:\n+\t$(MULTICLEAN) $(AM_MAKEFLAGS) DO=clean multi-clean # $(MAKE)\n+distclean-multi:\n+\t$(MULTICLEAN) $(AM_MAKEFLAGS) DO=distclean multi-clean # $(MAKE)\n+maintainer-clean-multi:\n+\t$(MULTICLEAN) $(AM_MAKEFLAGS) DO=maintainer-clean multi-clean # $(MAKE)\n+install-includeHEADERS: $(include_HEADERS)\n+\t@$(NORMAL_INSTALL)\n+\ttest -z \"$(includedir)\" || $(MKDIR_P) \"$(DESTDIR)$(includedir)\"\n+\t@list='$(include_HEADERS)'; test -n \"$(includedir)\" || list=; \\\n+\tfor p in $$list; do \\\n+\t  if test -f \"$$p\"; then d=; else d=\"$(srcdir)/\"; fi; \\\n+\t  echo \"$$d$$p\"; \\\n+\tdone | $(am__base_list) | \\\n+\twhile read files; do \\\n+\t  echo \" $(INSTALL_HEADER) $$files '$(DESTDIR)$(includedir)'\"; \\\n+\t  $(INSTALL_HEADER) $$files \"$(DESTDIR)$(includedir)\" || exit $$?; \\\n+\tdone\n+\n+uninstall-includeHEADERS:\n+\t@$(NORMAL_UNINSTALL)\n+\t@list='$(include_HEADERS)'; test -n \"$(includedir)\" || list=; \\\n+\tfiles=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \\\n+\ttest -n \"$$files\" || exit 0; \\\n+\techo \" ( cd '$(DESTDIR)$(includedir)' && rm -f\" $$files \")\"; \\\n+\tcd \"$(DESTDIR)$(includedir)\" && rm -f $$files\n+\n+ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)\n+\tlist='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \\\n+\tunique=`for i in $$list; do \\\n+\t    if test -f \"$$i\"; then echo $$i; else echo $(srcdir)/$$i; fi; \\\n+\t  done | \\\n+\t  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \\\n+\t      END { if (nonempty) { for (i in files) print i; }; }'`; \\\n+\tmkid -fID $$unique\n+tags: TAGS\n+\n+TAGS:  $(HEADERS) $(SOURCES) config.h.in $(TAGS_DEPENDENCIES) \\\n+\t\t$(TAGS_FILES) $(LISP)\n+\tset x; \\\n+\there=`pwd`; \\\n+\tlist='$(SOURCES) $(HEADERS) config.h.in $(LISP) $(TAGS_FILES)'; \\\n+\tunique=`for i in $$list; do \\\n+\t    if test -f \"$$i\"; then echo $$i; else echo $(srcdir)/$$i; fi; \\\n+\t  done | \\\n+\t  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \\\n+\t      END { if (nonempty) { for (i in files) print i; }; }'`; \\\n+\tshift; \\\n+\tif test -z \"$(ETAGS_ARGS)$$*$$unique\"; then :; else \\\n+\t  test -n \"$$unique\" || unique=$$empty_fix; \\\n+\t  if test $$# -gt 0; then \\\n+\t    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \\\n+\t      \"$$@\" $$unique; \\\n+\t  else \\\n+\t    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \\\n+\t      $$unique; \\\n+\t  fi; \\\n+\tfi\n+ctags: CTAGS\n+CTAGS:  $(HEADERS) $(SOURCES) config.h.in $(TAGS_DEPENDENCIES) \\\n+\t\t$(TAGS_FILES) $(LISP)\n+\tlist='$(SOURCES) $(HEADERS) config.h.in $(LISP) $(TAGS_FILES)'; \\\n+\tunique=`for i in $$list; do \\\n+\t    if test -f \"$$i\"; then echo $$i; else echo $(srcdir)/$$i; fi; \\\n+\t  done | \\\n+\t  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \\\n+\t      END { if (nonempty) { for (i in files) print i; }; }'`; \\\n+\ttest -z \"$(CTAGS_ARGS)$$unique\" \\\n+\t  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \\\n+\t     $$unique\n+\n+GTAGS:\n+\there=`$(am__cd) $(top_builddir) && pwd` \\\n+\t  && $(am__cd) $(top_srcdir) \\\n+\t  && gtags -i $(GTAGS_ARGS) \"$$here\"\n+\n+distclean-tags:\n+\t-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags\n+check-am: all-am\n+check: check-am\n+all-am: Makefile $(LTLIBRARIES) all-multi $(HEADERS) config.h\n+installdirs:\n+\tfor dir in \"$(DESTDIR)$(toolexeclibdir)\" \"$(DESTDIR)$(includedir)\"; do \\\n+\t  test -z \"$$dir\" || $(MKDIR_P) \"$$dir\"; \\\n+\tdone\n+install: install-am\n+install-exec: install-exec-am\n+install-data: install-data-am\n+uninstall: uninstall-am\n+\n+install-am: all-am\n+\t@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am\n+\n+installcheck: installcheck-am\n+install-strip:\n+\t$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" \\\n+\t  install_sh_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" INSTALL_STRIP_FLAG=-s \\\n+\t  `test -z '$(STRIP)' || \\\n+\t    echo \"INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'\"` install\n+mostlyclean-generic:\n+\n+clean-generic:\n+\n+distclean-generic:\n+\t-test -z \"$(CONFIG_CLEAN_FILES)\" || rm -f $(CONFIG_CLEAN_FILES)\n+\t-test . = \"$(srcdir)\" || test -z \"$(CONFIG_CLEAN_VPATH_FILES)\" || rm -f $(CONFIG_CLEAN_VPATH_FILES)\n+\t-rm -f gdtoa/$(DEPDIR)/$(am__dirstamp)\n+\t-rm -f gdtoa/$(am__dirstamp)\n+\t-rm -f math/$(DEPDIR)/$(am__dirstamp)\n+\t-rm -f math/$(am__dirstamp)\n+\n+maintainer-clean-generic:\n+\t@echo \"This command is intended for maintainers to use\"\n+\t@echo \"it deletes files that may require special tools to rebuild.\"\n+clean: clean-am clean-multi\n+\n+clean-am: clean-generic clean-libtool clean-toolexeclibLTLIBRARIES \\\n+\tmostlyclean-am\n+\n+distclean: distclean-am distclean-multi\n+\t-rm -f $(am__CONFIG_DISTCLEAN_FILES)\n+\t-rm -rf ./$(DEPDIR) gdtoa/$(DEPDIR) math/$(DEPDIR)\n+\t-rm -f Makefile\n+distclean-am: clean-am distclean-compile distclean-generic \\\n+\tdistclean-hdr distclean-libtool distclean-tags\n+\n+dvi: dvi-am\n+\n+dvi-am:\n+\n+html: html-am\n+\n+html-am:\n+\n+info: info-am\n+\n+info-am:\n+\n+install-data-am: install-includeHEADERS\n+\n+install-dvi: install-dvi-am\n+\n+install-dvi-am:\n+\n+install-exec-am: install-multi install-toolexeclibLTLIBRARIES\n+\n+install-html: install-html-am\n+\n+install-html-am:\n+\n+install-info: install-info-am\n+\n+install-info-am:\n+\n+install-man:\n+\n+install-pdf: install-pdf-am\n+\n+install-pdf-am:\n+\n+install-ps: install-ps-am\n+\n+install-ps-am:\n+\n+installcheck-am:\n+\n+maintainer-clean: maintainer-clean-am maintainer-clean-multi\n+\t-rm -f $(am__CONFIG_DISTCLEAN_FILES)\n+\t-rm -rf $(top_srcdir)/autom4te.cache\n+\t-rm -rf ./$(DEPDIR) gdtoa/$(DEPDIR) math/$(DEPDIR)\n+\t-rm -f Makefile\n+maintainer-clean-am: distclean-am maintainer-clean-generic\n+\n+mostlyclean: mostlyclean-am mostlyclean-multi\n+\n+mostlyclean-am: mostlyclean-compile mostlyclean-generic \\\n+\tmostlyclean-libtool\n+\n+pdf: pdf-am\n+\n+pdf-am:\n+\n+ps: ps-am\n+\n+ps-am:\n+\n+uninstall-am: uninstall-includeHEADERS \\\n+\tuninstall-toolexeclibLTLIBRARIES\n+\n+.MAKE: all all-multi clean-multi distclean-multi install-am \\\n+\tinstall-multi install-strip maintainer-clean-multi \\\n+\tmostlyclean-multi\n+\n+.PHONY: CTAGS GTAGS all all-am all-multi am--refresh check check-am \\\n+\tclean clean-generic clean-libtool clean-multi \\\n+\tclean-toolexeclibLTLIBRARIES ctags distclean distclean-compile \\\n+\tdistclean-generic distclean-hdr distclean-libtool \\\n+\tdistclean-multi distclean-tags dvi dvi-am html html-am info \\\n+\tinfo-am install install-am install-data install-data-am \\\n+\tinstall-dvi install-dvi-am install-exec install-exec-am \\\n+\tinstall-html install-html-am install-includeHEADERS \\\n+\tinstall-info install-info-am install-man install-multi \\\n+\tinstall-pdf install-pdf-am install-ps install-ps-am \\\n+\tinstall-strip install-toolexeclibLTLIBRARIES installcheck \\\n+\tinstallcheck-am installdirs maintainer-clean \\\n+\tmaintainer-clean-generic maintainer-clean-multi mostlyclean \\\n+\tmostlyclean-compile mostlyclean-generic mostlyclean-libtool \\\n+\tmostlyclean-multi pdf pdf-am ps ps-am tags uninstall \\\n+\tuninstall-am uninstall-includeHEADERS \\\n+\tuninstall-toolexeclibLTLIBRARIES\n+\n+@BUILD_LIBQUADMATH_TRUE@@LIBQUAD_USE_SYMVER_SUN_TRUE@@LIBQUAD_USE_SYMVER_TRUE@quadmath.map-sun : $(srcdir)/quadmath.map \\\n+@BUILD_LIBQUADMATH_TRUE@@LIBQUAD_USE_SYMVER_SUN_TRUE@@LIBQUAD_USE_SYMVER_TRUE@                $(top_srcdir)/../contrib/make_sunver.pl \\\n+@BUILD_LIBQUADMATH_TRUE@@LIBQUAD_USE_SYMVER_SUN_TRUE@@LIBQUAD_USE_SYMVER_TRUE@                $(libquadmath_la_OBJECTS) $(libquadmath_la_LIBADD)\n+@BUILD_LIBQUADMATH_TRUE@@LIBQUAD_USE_SYMVER_SUN_TRUE@@LIBQUAD_USE_SYMVER_TRUE@        perl $(top_srcdir)/../contrib/make_sunver.pl \\\n+@BUILD_LIBQUADMATH_TRUE@@LIBQUAD_USE_SYMVER_SUN_TRUE@@LIBQUAD_USE_SYMVER_TRUE@          $(srcdir)/quadmath.map \\\n+@BUILD_LIBQUADMATH_TRUE@@LIBQUAD_USE_SYMVER_SUN_TRUE@@LIBQUAD_USE_SYMVER_TRUE@          $(libquadmath_la_OBJECTS:%.lo=.libs/%.o) \\\n+@BUILD_LIBQUADMATH_TRUE@@LIBQUAD_USE_SYMVER_SUN_TRUE@@LIBQUAD_USE_SYMVER_TRUE@         `echo $(libquadmath_la_LIBADD) | \\\n+@BUILD_LIBQUADMATH_TRUE@@LIBQUAD_USE_SYMVER_SUN_TRUE@@LIBQUAD_USE_SYMVER_TRUE@            sed 's,/\\([^/.]*\\)\\.la,/.libs/\\1.a,g'` \\\n+@BUILD_LIBQUADMATH_TRUE@@LIBQUAD_USE_SYMVER_SUN_TRUE@@LIBQUAD_USE_SYMVER_TRUE@         > $@ || (rm -f $@ ; exit 1)\n+\n+# Tell versions [3.59,3.63) of GNU make to not export all variables.\n+# Otherwise a system limit (for SysV at least) may be exceeded.\n+.NOEXPORT:"}, {"sha": "3bbd0550a4f5f02054d70d6e46e89d310ba2d7b2", "filename": "libquadmath/acinclude.m4", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Facinclude.m4?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,53 @@\n+dnl ----------------------------------------------------------------------\n+dnl This whole bit snagged from libgfortran.\n+\n+dnl Check whether the target supports __sync_*_compare_and_swap.\n+AC_DEFUN([LIBGOMP_CHECK_SYNC_BUILTINS], [\n+  AC_CACHE_CHECK([whether the target supports __sync_*_compare_and_swap],\n+                 libgomp_cv_have_sync_builtins, [\n+  AC_TRY_LINK([], [int foo; __sync_val_compare_and_swap(&foo, 0, 1);],\n+              libgomp_cv_have_sync_builtins=yes, libgomp_cv_have_sync_builtins=no)])\n+  if test $libgomp_cv_have_sync_builtins = yes; then\n+    AC_DEFINE(HAVE_SYNC_BUILTINS, 1,\n+              [Define to 1 if the target supports __sync_*_compare_and_swap])\n+  fi])\n+\n+dnl Check whether the target supports hidden visibility.\n+AC_DEFUN([LIBGOMP_CHECK_ATTRIBUTE_VISIBILITY], [\n+  AC_CACHE_CHECK([whether the target supports hidden visibility],\n+                 libgomp_cv_have_attribute_visibility, [\n+  save_CFLAGS=\"$CFLAGS\"\n+  CFLAGS=\"$CFLAGS -Werror\"\n+  AC_TRY_COMPILE([void __attribute__((visibility(\"hidden\"))) foo(void) { }],\n+                 [], libgomp_cv_have_attribute_visibility=yes,\n+                 libgomp_cv_have_attribute_visibility=no)\n+  CFLAGS=\"$save_CFLAGS\"])\n+  if test $libgomp_cv_have_attribute_visibility = yes; then\n+    AC_DEFINE(HAVE_ATTRIBUTE_VISIBILITY, 1,\n+      [Define to 1 if the target supports __attribute__((visibility(...))).])\n+  fi])\n+\n+dnl Check whether the target supports dllexport\n+AC_DEFUN([LIBGOMP_CHECK_ATTRIBUTE_DLLEXPORT], [\n+  AC_CACHE_CHECK([whether the target supports dllexport],\n+                 libgomp_cv_have_attribute_dllexport, [\n+  save_CFLAGS=\"$CFLAGS\"\n+  CFLAGS=\"$CFLAGS -Werror\"\n+  AC_TRY_COMPILE([void __attribute__((dllexport)) foo(void) { }],\n+                 [], libgomp_cv_have_attribute_dllexport=yes,\n+                 libgomp_cv_have_attribute_dllexport=no)\n+  CFLAGS=\"$save_CFLAGS\"])\n+  if test $libgomp_cv_have_attribute_dllexport = yes; then\n+    AC_DEFINE(HAVE_ATTRIBUTE_DLLEXPORT, 1,\n+      [Define to 1 if the target supports __attribute__((dllexport)).])\n+  fi])\n+\n+sinclude(../libtool.m4)\n+dnl The lines below arrange for aclocal not to bring an installed\n+dnl libtool.m4 into aclocal.m4, while still arranging for automake to\n+dnl add a definition of LIBTOOL to Makefile.in.\n+ifelse(,,,[AC_SUBST(LIBTOOL)\n+AC_DEFUN([AM_PROG_LIBTOOL])\n+AC_DEFUN([AC_LIBTOOL_DLOPEN])\n+AC_DEFUN([AC_PROG_LD])\n+])"}, {"sha": "e3dae7feb5edb3aee3755605d0b8e4c688679b26", "filename": "libquadmath/aclocal.m4", "status": "added", "additions": 1014, "deletions": 0, "changes": 1014, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Faclocal.m4?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,1014 @@\n+# generated automatically by aclocal 1.11.1 -*- Autoconf -*-\n+\n+# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n+# 2005, 2006, 2007, 2008, 2009  Free Software Foundation, Inc.\n+# This file is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY, to the extent permitted by law; without\n+# even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+# PARTICULAR PURPOSE.\n+\n+m4_ifndef([AC_AUTOCONF_VERSION],\n+  [m4_copy([m4_PACKAGE_VERSION], [AC_AUTOCONF_VERSION])])dnl\n+m4_if(m4_defn([AC_AUTOCONF_VERSION]), [2.64],,\n+[m4_warning([this file was generated for autoconf 2.64.\n+You have another version of autoconf.  It may work, but is not guaranteed to.\n+If you have problems, you may need to regenerate the build system entirely.\n+To do so, use the procedure documented by the package, typically `autoreconf'.])])\n+\n+# Copyright (C) 2002, 2003, 2005, 2006, 2007, 2008  Free Software Foundation, Inc.\n+#\n+# This file is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# AM_AUTOMAKE_VERSION(VERSION)\n+# ----------------------------\n+# Automake X.Y traces this macro to ensure aclocal.m4 has been\n+# generated from the m4 files accompanying Automake X.Y.\n+# (This private macro should not be called outside this file.)\n+AC_DEFUN([AM_AUTOMAKE_VERSION],\n+[am__api_version='1.11'\n+dnl Some users find AM_AUTOMAKE_VERSION and mistake it for a way to\n+dnl require some minimum version.  Point them to the right macro.\n+m4_if([$1], [1.11.1], [],\n+      [AC_FATAL([Do not call $0, use AM_INIT_AUTOMAKE([$1]).])])dnl\n+])\n+\n+# _AM_AUTOCONF_VERSION(VERSION)\n+# -----------------------------\n+# aclocal traces this macro to find the Autoconf version.\n+# This is a private macro too.  Using m4_define simplifies\n+# the logic in aclocal, which can simply ignore this definition.\n+m4_define([_AM_AUTOCONF_VERSION], [])\n+\n+# AM_SET_CURRENT_AUTOMAKE_VERSION\n+# -------------------------------\n+# Call AM_AUTOMAKE_VERSION and AM_AUTOMAKE_VERSION so they can be traced.\n+# This function is AC_REQUIREd by AM_INIT_AUTOMAKE.\n+AC_DEFUN([AM_SET_CURRENT_AUTOMAKE_VERSION],\n+[AM_AUTOMAKE_VERSION([1.11.1])dnl\n+m4_ifndef([AC_AUTOCONF_VERSION],\n+  [m4_copy([m4_PACKAGE_VERSION], [AC_AUTOCONF_VERSION])])dnl\n+_AM_AUTOCONF_VERSION(m4_defn([AC_AUTOCONF_VERSION]))])\n+\n+# AM_AUX_DIR_EXPAND                                         -*- Autoconf -*-\n+\n+# Copyright (C) 2001, 2003, 2005  Free Software Foundation, Inc.\n+#\n+# This file is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# For projects using AC_CONFIG_AUX_DIR([foo]), Autoconf sets\n+# $ac_aux_dir to `$srcdir/foo'.  In other projects, it is set to\n+# `$srcdir', `$srcdir/..', or `$srcdir/../..'.\n+#\n+# Of course, Automake must honor this variable whenever it calls a\n+# tool from the auxiliary directory.  The problem is that $srcdir (and\n+# therefore $ac_aux_dir as well) can be either absolute or relative,\n+# depending on how configure is run.  This is pretty annoying, since\n+# it makes $ac_aux_dir quite unusable in subdirectories: in the top\n+# source directory, any form will work fine, but in subdirectories a\n+# relative path needs to be adjusted first.\n+#\n+# $ac_aux_dir/missing\n+#    fails when called from a subdirectory if $ac_aux_dir is relative\n+# $top_srcdir/$ac_aux_dir/missing\n+#    fails if $ac_aux_dir is absolute,\n+#    fails when called from a subdirectory in a VPATH build with\n+#          a relative $ac_aux_dir\n+#\n+# The reason of the latter failure is that $top_srcdir and $ac_aux_dir\n+# are both prefixed by $srcdir.  In an in-source build this is usually\n+# harmless because $srcdir is `.', but things will broke when you\n+# start a VPATH build or use an absolute $srcdir.\n+#\n+# So we could use something similar to $top_srcdir/$ac_aux_dir/missing,\n+# iff we strip the leading $srcdir from $ac_aux_dir.  That would be:\n+#   am_aux_dir='\\$(top_srcdir)/'`expr \"$ac_aux_dir\" : \"$srcdir//*\\(.*\\)\"`\n+# and then we would define $MISSING as\n+#   MISSING=\"\\${SHELL} $am_aux_dir/missing\"\n+# This will work as long as MISSING is not called from configure, because\n+# unfortunately $(top_srcdir) has no meaning in configure.\n+# However there are other variables, like CC, which are often used in\n+# configure, and could therefore not use this \"fixed\" $ac_aux_dir.\n+#\n+# Another solution, used here, is to always expand $ac_aux_dir to an\n+# absolute PATH.  The drawback is that using absolute paths prevent a\n+# configured tree to be moved without reconfiguration.\n+\n+AC_DEFUN([AM_AUX_DIR_EXPAND],\n+[dnl Rely on autoconf to set up CDPATH properly.\n+AC_PREREQ([2.50])dnl\n+# expand $ac_aux_dir to an absolute path\n+am_aux_dir=`cd $ac_aux_dir && pwd`\n+])\n+\n+# AM_CONDITIONAL                                            -*- Autoconf -*-\n+\n+# Copyright (C) 1997, 2000, 2001, 2003, 2004, 2005, 2006, 2008\n+# Free Software Foundation, Inc.\n+#\n+# This file is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# serial 9\n+\n+# AM_CONDITIONAL(NAME, SHELL-CONDITION)\n+# -------------------------------------\n+# Define a conditional.\n+AC_DEFUN([AM_CONDITIONAL],\n+[AC_PREREQ(2.52)dnl\n+ ifelse([$1], [TRUE],  [AC_FATAL([$0: invalid condition: $1])],\n+\t[$1], [FALSE], [AC_FATAL([$0: invalid condition: $1])])dnl\n+AC_SUBST([$1_TRUE])dnl\n+AC_SUBST([$1_FALSE])dnl\n+_AM_SUBST_NOTMAKE([$1_TRUE])dnl\n+_AM_SUBST_NOTMAKE([$1_FALSE])dnl\n+m4_define([_AM_COND_VALUE_$1], [$2])dnl\n+if $2; then\n+  $1_TRUE=\n+  $1_FALSE='#'\n+else\n+  $1_TRUE='#'\n+  $1_FALSE=\n+fi\n+AC_CONFIG_COMMANDS_PRE(\n+[if test -z \"${$1_TRUE}\" && test -z \"${$1_FALSE}\"; then\n+  AC_MSG_ERROR([[conditional \"$1\" was never defined.\n+Usually this means the macro was only invoked conditionally.]])\n+fi])])\n+\n+# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2009\n+# Free Software Foundation, Inc.\n+#\n+# This file is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# serial 10\n+\n+# There are a few dirty hacks below to avoid letting `AC_PROG_CC' be\n+# written in clear, in which case automake, when reading aclocal.m4,\n+# will think it sees a *use*, and therefore will trigger all it's\n+# C support machinery.  Also note that it means that autoscan, seeing\n+# CC etc. in the Makefile, will ask for an AC_PROG_CC use...\n+\n+\n+# _AM_DEPENDENCIES(NAME)\n+# ----------------------\n+# See how the compiler implements dependency checking.\n+# NAME is \"CC\", \"CXX\", \"GCJ\", or \"OBJC\".\n+# We try a few techniques and use that to set a single cache variable.\n+#\n+# We don't AC_REQUIRE the corresponding AC_PROG_CC since the latter was\n+# modified to invoke _AM_DEPENDENCIES(CC); we would have a circular\n+# dependency, and given that the user is not expected to run this macro,\n+# just rely on AC_PROG_CC.\n+AC_DEFUN([_AM_DEPENDENCIES],\n+[AC_REQUIRE([AM_SET_DEPDIR])dnl\n+AC_REQUIRE([AM_OUTPUT_DEPENDENCY_COMMANDS])dnl\n+AC_REQUIRE([AM_MAKE_INCLUDE])dnl\n+AC_REQUIRE([AM_DEP_TRACK])dnl\n+\n+ifelse([$1], CC,   [depcc=\"$CC\"   am_compiler_list=],\n+       [$1], CXX,  [depcc=\"$CXX\"  am_compiler_list=],\n+       [$1], OBJC, [depcc=\"$OBJC\" am_compiler_list='gcc3 gcc'],\n+       [$1], UPC,  [depcc=\"$UPC\"  am_compiler_list=],\n+       [$1], GCJ,  [depcc=\"$GCJ\"  am_compiler_list='gcc3 gcc'],\n+                   [depcc=\"$$1\"   am_compiler_list=])\n+\n+AC_CACHE_CHECK([dependency style of $depcc],\n+               [am_cv_$1_dependencies_compiler_type],\n+[if test -z \"$AMDEP_TRUE\" && test -f \"$am_depcomp\"; then\n+  # We make a subdir and do the tests there.  Otherwise we can end up\n+  # making bogus files that we don't know about and never remove.  For\n+  # instance it was reported that on HP-UX the gcc test will end up\n+  # making a dummy file named `D' -- because `-MD' means `put the output\n+  # in D'.\n+  mkdir conftest.dir\n+  # Copy depcomp to subdir because otherwise we won't find it if we're\n+  # using a relative directory.\n+  cp \"$am_depcomp\" conftest.dir\n+  cd conftest.dir\n+  # We will build objects and dependencies in a subdirectory because\n+  # it helps to detect inapplicable dependency modes.  For instance\n+  # both Tru64's cc and ICC support -MD to output dependencies as a\n+  # side effect of compilation, but ICC will put the dependencies in\n+  # the current directory while Tru64 will put them in the object\n+  # directory.\n+  mkdir sub\n+\n+  am_cv_$1_dependencies_compiler_type=none\n+  if test \"$am_compiler_list\" = \"\"; then\n+     am_compiler_list=`sed -n ['s/^#*\\([a-zA-Z0-9]*\\))$/\\1/p'] < ./depcomp`\n+  fi\n+  am__universal=false\n+  m4_case([$1], [CC],\n+    [case \" $depcc \" in #(\n+     *\\ -arch\\ *\\ -arch\\ *) am__universal=true ;;\n+     esac],\n+    [CXX],\n+    [case \" $depcc \" in #(\n+     *\\ -arch\\ *\\ -arch\\ *) am__universal=true ;;\n+     esac])\n+\n+  for depmode in $am_compiler_list; do\n+    # Setup a source with many dependencies, because some compilers\n+    # like to wrap large dependency lists on column 80 (with \\), and\n+    # we should not choose a depcomp mode which is confused by this.\n+    #\n+    # We need to recreate these files for each test, as the compiler may\n+    # overwrite some of them when testing with obscure command lines.\n+    # This happens at least with the AIX C compiler.\n+    : > sub/conftest.c\n+    for i in 1 2 3 4 5 6; do\n+      echo '#include \"conftst'$i'.h\"' >> sub/conftest.c\n+      # Using `: > sub/conftst$i.h' creates only sub/conftst1.h with\n+      # Solaris 8's {/usr,}/bin/sh.\n+      touch sub/conftst$i.h\n+    done\n+    echo \"${am__include} ${am__quote}sub/conftest.Po${am__quote}\" > confmf\n+\n+    # We check with `-c' and `-o' for the sake of the \"dashmstdout\"\n+    # mode.  It turns out that the SunPro C++ compiler does not properly\n+    # handle `-M -o', and we need to detect this.  Also, some Intel\n+    # versions had trouble with output in subdirs\n+    am__obj=sub/conftest.${OBJEXT-o}\n+    am__minus_obj=\"-o $am__obj\"\n+    case $depmode in\n+    gcc)\n+      # This depmode causes a compiler race in universal mode.\n+      test \"$am__universal\" = false || continue\n+      ;;\n+    nosideeffect)\n+      # after this tag, mechanisms are not by side-effect, so they'll\n+      # only be used when explicitly requested\n+      if test \"x$enable_dependency_tracking\" = xyes; then\n+\tcontinue\n+      else\n+\tbreak\n+      fi\n+      ;;\n+    msvisualcpp | msvcmsys)\n+      # This compiler won't grok `-c -o', but also, the minuso test has\n+      # not run yet.  These depmodes are late enough in the game, and\n+      # so weak that their functioning should not be impacted.\n+      am__obj=conftest.${OBJEXT-o}\n+      am__minus_obj=\n+      ;;\n+    none) break ;;\n+    esac\n+    if depmode=$depmode \\\n+       source=sub/conftest.c object=$am__obj \\\n+       depfile=sub/conftest.Po tmpdepfile=sub/conftest.TPo \\\n+       $SHELL ./depcomp $depcc -c $am__minus_obj sub/conftest.c \\\n+         >/dev/null 2>conftest.err &&\n+       grep sub/conftst1.h sub/conftest.Po > /dev/null 2>&1 &&\n+       grep sub/conftst6.h sub/conftest.Po > /dev/null 2>&1 &&\n+       grep $am__obj sub/conftest.Po > /dev/null 2>&1 &&\n+       ${MAKE-make} -s -f confmf > /dev/null 2>&1; then\n+      # icc doesn't choke on unknown options, it will just issue warnings\n+      # or remarks (even with -Werror).  So we grep stderr for any message\n+      # that says an option was ignored or not supported.\n+      # When given -MP, icc 7.0 and 7.1 complain thusly:\n+      #   icc: Command line warning: ignoring option '-M'; no argument required\n+      # The diagnosis changed in icc 8.0:\n+      #   icc: Command line remark: option '-MP' not supported\n+      if (grep 'ignoring option' conftest.err ||\n+          grep 'not supported' conftest.err) >/dev/null 2>&1; then :; else\n+        am_cv_$1_dependencies_compiler_type=$depmode\n+        break\n+      fi\n+    fi\n+  done\n+\n+  cd ..\n+  rm -rf conftest.dir\n+else\n+  am_cv_$1_dependencies_compiler_type=none\n+fi\n+])\n+AC_SUBST([$1DEPMODE], [depmode=$am_cv_$1_dependencies_compiler_type])\n+AM_CONDITIONAL([am__fastdep$1], [\n+  test \"x$enable_dependency_tracking\" != xno \\\n+  && test \"$am_cv_$1_dependencies_compiler_type\" = gcc3])\n+])\n+\n+\n+# AM_SET_DEPDIR\n+# -------------\n+# Choose a directory name for dependency files.\n+# This macro is AC_REQUIREd in _AM_DEPENDENCIES\n+AC_DEFUN([AM_SET_DEPDIR],\n+[AC_REQUIRE([AM_SET_LEADING_DOT])dnl\n+AC_SUBST([DEPDIR], [\"${am__leading_dot}deps\"])dnl\n+])\n+\n+\n+# AM_DEP_TRACK\n+# ------------\n+AC_DEFUN([AM_DEP_TRACK],\n+[AC_ARG_ENABLE(dependency-tracking,\n+[  --disable-dependency-tracking  speeds up one-time build\n+  --enable-dependency-tracking   do not reject slow dependency extractors])\n+if test \"x$enable_dependency_tracking\" != xno; then\n+  am_depcomp=\"$ac_aux_dir/depcomp\"\n+  AMDEPBACKSLASH='\\'\n+fi\n+AM_CONDITIONAL([AMDEP], [test \"x$enable_dependency_tracking\" != xno])\n+AC_SUBST([AMDEPBACKSLASH])dnl\n+_AM_SUBST_NOTMAKE([AMDEPBACKSLASH])dnl\n+])\n+\n+# Generate code to set up dependency tracking.              -*- Autoconf -*-\n+\n+# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2008\n+# Free Software Foundation, Inc.\n+#\n+# This file is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+#serial 5\n+\n+# _AM_OUTPUT_DEPENDENCY_COMMANDS\n+# ------------------------------\n+AC_DEFUN([_AM_OUTPUT_DEPENDENCY_COMMANDS],\n+[{\n+  # Autoconf 2.62 quotes --file arguments for eval, but not when files\n+  # are listed without --file.  Let's play safe and only enable the eval\n+  # if we detect the quoting.\n+  case $CONFIG_FILES in\n+  *\\'*) eval set x \"$CONFIG_FILES\" ;;\n+  *)   set x $CONFIG_FILES ;;\n+  esac\n+  shift\n+  for mf\n+  do\n+    # Strip MF so we end up with the name of the file.\n+    mf=`echo \"$mf\" | sed -e 's/:.*$//'`\n+    # Check whether this is an Automake generated Makefile or not.\n+    # We used to match only the files named `Makefile.in', but\n+    # some people rename them; so instead we look at the file content.\n+    # Grep'ing the first line is not enough: some people post-process\n+    # each Makefile.in and add a new line on top of each file to say so.\n+    # Grep'ing the whole file is not good either: AIX grep has a line\n+    # limit of 2048, but all sed's we know have understand at least 4000.\n+    if sed -n 's,^#.*generated by automake.*,X,p' \"$mf\" | grep X >/dev/null 2>&1; then\n+      dirpart=`AS_DIRNAME(\"$mf\")`\n+    else\n+      continue\n+    fi\n+    # Extract the definition of DEPDIR, am__include, and am__quote\n+    # from the Makefile without running `make'.\n+    DEPDIR=`sed -n 's/^DEPDIR = //p' < \"$mf\"`\n+    test -z \"$DEPDIR\" && continue\n+    am__include=`sed -n 's/^am__include = //p' < \"$mf\"`\n+    test -z \"am__include\" && continue\n+    am__quote=`sed -n 's/^am__quote = //p' < \"$mf\"`\n+    # When using ansi2knr, U may be empty or an underscore; expand it\n+    U=`sed -n 's/^U = //p' < \"$mf\"`\n+    # Find all dependency output files, they are included files with\n+    # $(DEPDIR) in their names.  We invoke sed twice because it is the\n+    # simplest approach to changing $(DEPDIR) to its actual value in the\n+    # expansion.\n+    for file in `sed -n \"\n+      s/^$am__include $am__quote\\(.*(DEPDIR).*\\)$am__quote\"'$/\\1/p' <\"$mf\" | \\\n+\t sed -e 's/\\$(DEPDIR)/'\"$DEPDIR\"'/g' -e 's/\\$U/'\"$U\"'/g'`; do\n+      # Make sure the directory exists.\n+      test -f \"$dirpart/$file\" && continue\n+      fdir=`AS_DIRNAME([\"$file\"])`\n+      AS_MKDIR_P([$dirpart/$fdir])\n+      # echo \"creating $dirpart/$file\"\n+      echo '# dummy' > \"$dirpart/$file\"\n+    done\n+  done\n+}\n+])# _AM_OUTPUT_DEPENDENCY_COMMANDS\n+\n+\n+# AM_OUTPUT_DEPENDENCY_COMMANDS\n+# -----------------------------\n+# This macro should only be invoked once -- use via AC_REQUIRE.\n+#\n+# This code is only required when automatic dependency tracking\n+# is enabled.  FIXME.  This creates each `.P' file that we will\n+# need in order to bootstrap the dependency handling code.\n+AC_DEFUN([AM_OUTPUT_DEPENDENCY_COMMANDS],\n+[AC_CONFIG_COMMANDS([depfiles],\n+     [test x\"$AMDEP_TRUE\" != x\"\" || _AM_OUTPUT_DEPENDENCY_COMMANDS],\n+     [AMDEP_TRUE=\"$AMDEP_TRUE\" ac_aux_dir=\"$ac_aux_dir\"])\n+])\n+\n+# Do all the work for Automake.                             -*- Autoconf -*-\n+\n+# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n+# 2005, 2006, 2008, 2009 Free Software Foundation, Inc.\n+#\n+# This file is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# serial 16\n+\n+# This macro actually does too much.  Some checks are only needed if\n+# your package does certain things.  But this isn't really a big deal.\n+\n+# AM_INIT_AUTOMAKE(PACKAGE, VERSION, [NO-DEFINE])\n+# AM_INIT_AUTOMAKE([OPTIONS])\n+# -----------------------------------------------\n+# The call with PACKAGE and VERSION arguments is the old style\n+# call (pre autoconf-2.50), which is being phased out.  PACKAGE\n+# and VERSION should now be passed to AC_INIT and removed from\n+# the call to AM_INIT_AUTOMAKE.\n+# We support both call styles for the transition.  After\n+# the next Automake release, Autoconf can make the AC_INIT\n+# arguments mandatory, and then we can depend on a new Autoconf\n+# release and drop the old call support.\n+AC_DEFUN([AM_INIT_AUTOMAKE],\n+[AC_PREREQ([2.62])dnl\n+dnl Autoconf wants to disallow AM_ names.  We explicitly allow\n+dnl the ones we care about.\n+m4_pattern_allow([^AM_[A-Z]+FLAGS$])dnl\n+AC_REQUIRE([AM_SET_CURRENT_AUTOMAKE_VERSION])dnl\n+AC_REQUIRE([AC_PROG_INSTALL])dnl\n+if test \"`cd $srcdir && pwd`\" != \"`pwd`\"; then\n+  # Use -I$(srcdir) only when $(srcdir) != ., so that make's output\n+  # is not polluted with repeated \"-I.\"\n+  AC_SUBST([am__isrc], [' -I$(srcdir)'])_AM_SUBST_NOTMAKE([am__isrc])dnl\n+  # test to see if srcdir already configured\n+  if test -f $srcdir/config.status; then\n+    AC_MSG_ERROR([source directory already configured; run \"make distclean\" there first])\n+  fi\n+fi\n+\n+# test whether we have cygpath\n+if test -z \"$CYGPATH_W\"; then\n+  if (cygpath --version) >/dev/null 2>/dev/null; then\n+    CYGPATH_W='cygpath -w'\n+  else\n+    CYGPATH_W=echo\n+  fi\n+fi\n+AC_SUBST([CYGPATH_W])\n+\n+# Define the identity of the package.\n+dnl Distinguish between old-style and new-style calls.\n+m4_ifval([$2],\n+[m4_ifval([$3], [_AM_SET_OPTION([no-define])])dnl\n+ AC_SUBST([PACKAGE], [$1])dnl\n+ AC_SUBST([VERSION], [$2])],\n+[_AM_SET_OPTIONS([$1])dnl\n+dnl Diagnose old-style AC_INIT with new-style AM_AUTOMAKE_INIT.\n+m4_if(m4_ifdef([AC_PACKAGE_NAME], 1)m4_ifdef([AC_PACKAGE_VERSION], 1), 11,,\n+  [m4_fatal([AC_INIT should be called with package and version arguments])])dnl\n+ AC_SUBST([PACKAGE], ['AC_PACKAGE_TARNAME'])dnl\n+ AC_SUBST([VERSION], ['AC_PACKAGE_VERSION'])])dnl\n+\n+_AM_IF_OPTION([no-define],,\n+[AC_DEFINE_UNQUOTED(PACKAGE, \"$PACKAGE\", [Name of package])\n+ AC_DEFINE_UNQUOTED(VERSION, \"$VERSION\", [Version number of package])])dnl\n+\n+# Some tools Automake needs.\n+AC_REQUIRE([AM_SANITY_CHECK])dnl\n+AC_REQUIRE([AC_ARG_PROGRAM])dnl\n+AM_MISSING_PROG(ACLOCAL, aclocal-${am__api_version})\n+AM_MISSING_PROG(AUTOCONF, autoconf)\n+AM_MISSING_PROG(AUTOMAKE, automake-${am__api_version})\n+AM_MISSING_PROG(AUTOHEADER, autoheader)\n+AM_MISSING_PROG(MAKEINFO, makeinfo)\n+AC_REQUIRE([AM_PROG_INSTALL_SH])dnl\n+AC_REQUIRE([AM_PROG_INSTALL_STRIP])dnl\n+AC_REQUIRE([AM_PROG_MKDIR_P])dnl\n+# We need awk for the \"check\" target.  The system \"awk\" is bad on\n+# some platforms.\n+AC_REQUIRE([AC_PROG_AWK])dnl\n+AC_REQUIRE([AC_PROG_MAKE_SET])dnl\n+AC_REQUIRE([AM_SET_LEADING_DOT])dnl\n+_AM_IF_OPTION([tar-ustar], [_AM_PROG_TAR([ustar])],\n+\t      [_AM_IF_OPTION([tar-pax], [_AM_PROG_TAR([pax])],\n+\t\t\t     [_AM_PROG_TAR([v7])])])\n+_AM_IF_OPTION([no-dependencies],,\n+[AC_PROVIDE_IFELSE([AC_PROG_CC],\n+\t\t  [_AM_DEPENDENCIES(CC)],\n+\t\t  [define([AC_PROG_CC],\n+\t\t\t  defn([AC_PROG_CC])[_AM_DEPENDENCIES(CC)])])dnl\n+AC_PROVIDE_IFELSE([AC_PROG_CXX],\n+\t\t  [_AM_DEPENDENCIES(CXX)],\n+\t\t  [define([AC_PROG_CXX],\n+\t\t\t  defn([AC_PROG_CXX])[_AM_DEPENDENCIES(CXX)])])dnl\n+AC_PROVIDE_IFELSE([AC_PROG_OBJC],\n+\t\t  [_AM_DEPENDENCIES(OBJC)],\n+\t\t  [define([AC_PROG_OBJC],\n+\t\t\t  defn([AC_PROG_OBJC])[_AM_DEPENDENCIES(OBJC)])])dnl\n+])\n+_AM_IF_OPTION([silent-rules], [AC_REQUIRE([AM_SILENT_RULES])])dnl\n+dnl The `parallel-tests' driver may need to know about EXEEXT, so add the\n+dnl `am__EXEEXT' conditional if _AM_COMPILER_EXEEXT was seen.  This macro\n+dnl is hooked onto _AC_COMPILER_EXEEXT early, see below.\n+AC_CONFIG_COMMANDS_PRE(dnl\n+[m4_provide_if([_AM_COMPILER_EXEEXT],\n+  [AM_CONDITIONAL([am__EXEEXT], [test -n \"$EXEEXT\"])])])dnl\n+])\n+\n+dnl Hook into `_AC_COMPILER_EXEEXT' early to learn its expansion.  Do not\n+dnl add the conditional right here, as _AC_COMPILER_EXEEXT may be further\n+dnl mangled by Autoconf and run in a shell conditional statement.\n+m4_define([_AC_COMPILER_EXEEXT],\n+m4_defn([_AC_COMPILER_EXEEXT])[m4_provide([_AM_COMPILER_EXEEXT])])\n+\n+\n+# When config.status generates a header, we must update the stamp-h file.\n+# This file resides in the same directory as the config header\n+# that is generated.  The stamp files are numbered to have different names.\n+\n+# Autoconf calls _AC_AM_CONFIG_HEADER_HOOK (when defined) in the\n+# loop where config.status creates the headers, so we can generate\n+# our stamp files there.\n+AC_DEFUN([_AC_AM_CONFIG_HEADER_HOOK],\n+[# Compute $1's index in $config_headers.\n+_am_arg=$1\n+_am_stamp_count=1\n+for _am_header in $config_headers :; do\n+  case $_am_header in\n+    $_am_arg | $_am_arg:* )\n+      break ;;\n+    * )\n+      _am_stamp_count=`expr $_am_stamp_count + 1` ;;\n+  esac\n+done\n+echo \"timestamp for $_am_arg\" >`AS_DIRNAME([\"$_am_arg\"])`/stamp-h[]$_am_stamp_count])\n+\n+# Copyright (C) 2001, 2003, 2005, 2008  Free Software Foundation, Inc.\n+#\n+# This file is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# AM_PROG_INSTALL_SH\n+# ------------------\n+# Define $install_sh.\n+AC_DEFUN([AM_PROG_INSTALL_SH],\n+[AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl\n+if test x\"${install_sh}\" != xset; then\n+  case $am_aux_dir in\n+  *\\ * | *\\\t*)\n+    install_sh=\"\\${SHELL} '$am_aux_dir/install-sh'\" ;;\n+  *)\n+    install_sh=\"\\${SHELL} $am_aux_dir/install-sh\"\n+  esac\n+fi\n+AC_SUBST(install_sh)])\n+\n+# Add --enable-maintainer-mode option to configure.         -*- Autoconf -*-\n+# From Jim Meyering\n+\n+# Copyright (C) 1996, 1998, 2000, 2001, 2002, 2003, 2004, 2005, 2008\n+# Free Software Foundation, Inc.\n+#\n+# This file is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# serial 5\n+\n+# AM_MAINTAINER_MODE([DEFAULT-MODE])\n+# ----------------------------------\n+# Control maintainer-specific portions of Makefiles.\n+# Default is to disable them, unless `enable' is passed literally.\n+# For symmetry, `disable' may be passed as well.  Anyway, the user\n+# can override the default with the --enable/--disable switch.\n+AC_DEFUN([AM_MAINTAINER_MODE],\n+[m4_case(m4_default([$1], [disable]),\n+       [enable], [m4_define([am_maintainer_other], [disable])],\n+       [disable], [m4_define([am_maintainer_other], [enable])],\n+       [m4_define([am_maintainer_other], [enable])\n+        m4_warn([syntax], [unexpected argument to AM@&t@_MAINTAINER_MODE: $1])])\n+AC_MSG_CHECKING([whether to am_maintainer_other maintainer-specific portions of Makefiles])\n+  dnl maintainer-mode's default is 'disable' unless 'enable' is passed\n+  AC_ARG_ENABLE([maintainer-mode],\n+[  --][am_maintainer_other][-maintainer-mode  am_maintainer_other make rules and dependencies not useful\n+\t\t\t  (and sometimes confusing) to the casual installer],\n+      [USE_MAINTAINER_MODE=$enableval],\n+      [USE_MAINTAINER_MODE=]m4_if(am_maintainer_other, [enable], [no], [yes]))\n+  AC_MSG_RESULT([$USE_MAINTAINER_MODE])\n+  AM_CONDITIONAL([MAINTAINER_MODE], [test $USE_MAINTAINER_MODE = yes])\n+  MAINT=$MAINTAINER_MODE_TRUE\n+  AC_SUBST([MAINT])dnl\n+]\n+)\n+\n+AU_DEFUN([jm_MAINTAINER_MODE], [AM_MAINTAINER_MODE])\n+\n+# Check to see how 'make' treats includes.\t            -*- Autoconf -*-\n+\n+# Copyright (C) 2001, 2002, 2003, 2005, 2009  Free Software Foundation, Inc.\n+#\n+# This file is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# serial 4\n+\n+# AM_MAKE_INCLUDE()\n+# -----------------\n+# Check to see how make treats includes.\n+AC_DEFUN([AM_MAKE_INCLUDE],\n+[am_make=${MAKE-make}\n+cat > confinc << 'END'\n+am__doit:\n+\t@echo this is the am__doit target\n+.PHONY: am__doit\n+END\n+# If we don't find an include directive, just comment out the code.\n+AC_MSG_CHECKING([for style of include used by $am_make])\n+am__include=\"#\"\n+am__quote=\n+_am_result=none\n+# First try GNU make style include.\n+echo \"include confinc\" > confmf\n+# Ignore all kinds of additional output from `make'.\n+case `$am_make -s -f confmf 2> /dev/null` in #(\n+*the\\ am__doit\\ target*)\n+  am__include=include\n+  am__quote=\n+  _am_result=GNU\n+  ;;\n+esac\n+# Now try BSD make style include.\n+if test \"$am__include\" = \"#\"; then\n+   echo '.include \"confinc\"' > confmf\n+   case `$am_make -s -f confmf 2> /dev/null` in #(\n+   *the\\ am__doit\\ target*)\n+     am__include=.include\n+     am__quote=\"\\\"\"\n+     _am_result=BSD\n+     ;;\n+   esac\n+fi\n+AC_SUBST([am__include])\n+AC_SUBST([am__quote])\n+AC_MSG_RESULT([$_am_result])\n+rm -f confinc confmf\n+])\n+\n+# Copyright (C) 1999, 2000, 2001, 2003, 2004, 2005, 2008\n+# Free Software Foundation, Inc.\n+#\n+# This file is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# serial 6\n+\n+# AM_PROG_CC_C_O\n+# --------------\n+# Like AC_PROG_CC_C_O, but changed for automake.\n+AC_DEFUN([AM_PROG_CC_C_O],\n+[AC_REQUIRE([AC_PROG_CC_C_O])dnl\n+AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl\n+AC_REQUIRE_AUX_FILE([compile])dnl\n+# FIXME: we rely on the cache variable name because\n+# there is no other way.\n+set dummy $CC\n+am_cc=`echo $[2] | sed ['s/[^a-zA-Z0-9_]/_/g;s/^[0-9]/_/']`\n+eval am_t=\\$ac_cv_prog_cc_${am_cc}_c_o\n+if test \"$am_t\" != yes; then\n+   # Losing compiler, so override with the script.\n+   # FIXME: It is wrong to rewrite CC.\n+   # But if we don't then we get into trouble of one sort or another.\n+   # A longer-term fix would be to have automake use am__CC in this case,\n+   # and then we could set am__CC=\"\\$(top_srcdir)/compile \\$(CC)\"\n+   CC=\"$am_aux_dir/compile $CC\"\n+fi\n+dnl Make sure AC_PROG_CC is never called again, or it will override our\n+dnl setting of CC.\n+m4_define([AC_PROG_CC],\n+          [m4_fatal([AC_PROG_CC cannot be called after AM_PROG_CC_C_O])])\n+])\n+\n+# Fake the existence of programs that GNU maintainers use.  -*- Autoconf -*-\n+\n+# Copyright (C) 1997, 1999, 2000, 2001, 2003, 2004, 2005, 2008\n+# Free Software Foundation, Inc.\n+#\n+# This file is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# serial 6\n+\n+# AM_MISSING_PROG(NAME, PROGRAM)\n+# ------------------------------\n+AC_DEFUN([AM_MISSING_PROG],\n+[AC_REQUIRE([AM_MISSING_HAS_RUN])\n+$1=${$1-\"${am_missing_run}$2\"}\n+AC_SUBST($1)])\n+\n+\n+# AM_MISSING_HAS_RUN\n+# ------------------\n+# Define MISSING if not defined so far and test if it supports --run.\n+# If it does, set am_missing_run to use it, otherwise, to nothing.\n+AC_DEFUN([AM_MISSING_HAS_RUN],\n+[AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl\n+AC_REQUIRE_AUX_FILE([missing])dnl\n+if test x\"${MISSING+set}\" != xset; then\n+  case $am_aux_dir in\n+  *\\ * | *\\\t*)\n+    MISSING=\"\\${SHELL} \\\"$am_aux_dir/missing\\\"\" ;;\n+  *)\n+    MISSING=\"\\${SHELL} $am_aux_dir/missing\" ;;\n+  esac\n+fi\n+# Use eval to expand $SHELL\n+if eval \"$MISSING --run true\"; then\n+  am_missing_run=\"$MISSING --run \"\n+else\n+  am_missing_run=\n+  AC_MSG_WARN([`missing' script is too old or missing])\n+fi\n+])\n+\n+# Copyright (C) 2003, 2004, 2005, 2006  Free Software Foundation, Inc.\n+#\n+# This file is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# AM_PROG_MKDIR_P\n+# ---------------\n+# Check for `mkdir -p'.\n+AC_DEFUN([AM_PROG_MKDIR_P],\n+[AC_PREREQ([2.60])dnl\n+AC_REQUIRE([AC_PROG_MKDIR_P])dnl\n+dnl Automake 1.8 to 1.9.6 used to define mkdir_p.  We now use MKDIR_P,\n+dnl while keeping a definition of mkdir_p for backward compatibility.\n+dnl @MKDIR_P@ is magic: AC_OUTPUT adjusts its value for each Makefile.\n+dnl However we cannot define mkdir_p as $(MKDIR_P) for the sake of\n+dnl Makefile.ins that do not define MKDIR_P, so we do our own\n+dnl adjustment using top_builddir (which is defined more often than\n+dnl MKDIR_P).\n+AC_SUBST([mkdir_p], [\"$MKDIR_P\"])dnl\n+case $mkdir_p in\n+  [[\\\\/$]]* | ?:[[\\\\/]]*) ;;\n+  */*) mkdir_p=\"\\$(top_builddir)/$mkdir_p\" ;;\n+esac\n+])\n+\n+# Helper functions for option handling.                     -*- Autoconf -*-\n+\n+# Copyright (C) 2001, 2002, 2003, 2005, 2008  Free Software Foundation, Inc.\n+#\n+# This file is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# serial 4\n+\n+# _AM_MANGLE_OPTION(NAME)\n+# -----------------------\n+AC_DEFUN([_AM_MANGLE_OPTION],\n+[[_AM_OPTION_]m4_bpatsubst($1, [[^a-zA-Z0-9_]], [_])])\n+\n+# _AM_SET_OPTION(NAME)\n+# ------------------------------\n+# Set option NAME.  Presently that only means defining a flag for this option.\n+AC_DEFUN([_AM_SET_OPTION],\n+[m4_define(_AM_MANGLE_OPTION([$1]), 1)])\n+\n+# _AM_SET_OPTIONS(OPTIONS)\n+# ----------------------------------\n+# OPTIONS is a space-separated list of Automake options.\n+AC_DEFUN([_AM_SET_OPTIONS],\n+[m4_foreach_w([_AM_Option], [$1], [_AM_SET_OPTION(_AM_Option)])])\n+\n+# _AM_IF_OPTION(OPTION, IF-SET, [IF-NOT-SET])\n+# -------------------------------------------\n+# Execute IF-SET if OPTION is set, IF-NOT-SET otherwise.\n+AC_DEFUN([_AM_IF_OPTION],\n+[m4_ifset(_AM_MANGLE_OPTION([$1]), [$2], [$3])])\n+\n+# Check to make sure that the build environment is sane.    -*- Autoconf -*-\n+\n+# Copyright (C) 1996, 1997, 2000, 2001, 2003, 2005, 2008\n+# Free Software Foundation, Inc.\n+#\n+# This file is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# serial 5\n+\n+# AM_SANITY_CHECK\n+# ---------------\n+AC_DEFUN([AM_SANITY_CHECK],\n+[AC_MSG_CHECKING([whether build environment is sane])\n+# Just in case\n+sleep 1\n+echo timestamp > conftest.file\n+# Reject unsafe characters in $srcdir or the absolute working directory\n+# name.  Accept space and tab only in the latter.\n+am_lf='\n+'\n+case `pwd` in\n+  *[[\\\\\\\"\\#\\$\\&\\'\\`$am_lf]]*)\n+    AC_MSG_ERROR([unsafe absolute working directory name]);;\n+esac\n+case $srcdir in\n+  *[[\\\\\\\"\\#\\$\\&\\'\\`$am_lf\\ \\\t]]*)\n+    AC_MSG_ERROR([unsafe srcdir value: `$srcdir']);;\n+esac\n+\n+# Do `set' in a subshell so we don't clobber the current shell's\n+# arguments.  Must try -L first in case configure is actually a\n+# symlink; some systems play weird games with the mod time of symlinks\n+# (eg FreeBSD returns the mod time of the symlink's containing\n+# directory).\n+if (\n+   set X `ls -Lt \"$srcdir/configure\" conftest.file 2> /dev/null`\n+   if test \"$[*]\" = \"X\"; then\n+      # -L didn't work.\n+      set X `ls -t \"$srcdir/configure\" conftest.file`\n+   fi\n+   rm -f conftest.file\n+   if test \"$[*]\" != \"X $srcdir/configure conftest.file\" \\\n+      && test \"$[*]\" != \"X conftest.file $srcdir/configure\"; then\n+\n+      # If neither matched, then we have a broken ls.  This can happen\n+      # if, for instance, CONFIG_SHELL is bash and it inherits a\n+      # broken ls alias from the environment.  This has actually\n+      # happened.  Such a system could not be considered \"sane\".\n+      AC_MSG_ERROR([ls -t appears to fail.  Make sure there is not a broken\n+alias in your environment])\n+   fi\n+\n+   test \"$[2]\" = conftest.file\n+   )\n+then\n+   # Ok.\n+   :\n+else\n+   AC_MSG_ERROR([newly created file is older than distributed files!\n+Check your system clock])\n+fi\n+AC_MSG_RESULT(yes)])\n+\n+# Copyright (C) 2001, 2003, 2005  Free Software Foundation, Inc.\n+#\n+# This file is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# AM_PROG_INSTALL_STRIP\n+# ---------------------\n+# One issue with vendor `install' (even GNU) is that you can't\n+# specify the program used to strip binaries.  This is especially\n+# annoying in cross-compiling environments, where the build's strip\n+# is unlikely to handle the host's binaries.\n+# Fortunately install-sh will honor a STRIPPROG variable, so we\n+# always use install-sh in `make install-strip', and initialize\n+# STRIPPROG with the value of the STRIP variable (set by the user).\n+AC_DEFUN([AM_PROG_INSTALL_STRIP],\n+[AC_REQUIRE([AM_PROG_INSTALL_SH])dnl\n+# Installed binaries are usually stripped using `strip' when the user\n+# run `make install-strip'.  However `strip' might not be the right\n+# tool to use in cross-compilation environments, therefore Automake\n+# will honor the `STRIP' environment variable to overrule this program.\n+dnl Don't test for $cross_compiling = yes, because it might be `maybe'.\n+if test \"$cross_compiling\" != no; then\n+  AC_CHECK_TOOL([STRIP], [strip], :)\n+fi\n+INSTALL_STRIP_PROGRAM=\"\\$(install_sh) -c -s\"\n+AC_SUBST([INSTALL_STRIP_PROGRAM])])\n+\n+# Copyright (C) 2006, 2008  Free Software Foundation, Inc.\n+#\n+# This file is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# serial 2\n+\n+# _AM_SUBST_NOTMAKE(VARIABLE)\n+# ---------------------------\n+# Prevent Automake from outputting VARIABLE = @VARIABLE@ in Makefile.in.\n+# This macro is traced by Automake.\n+AC_DEFUN([_AM_SUBST_NOTMAKE])\n+\n+# AM_SUBST_NOTMAKE(VARIABLE)\n+# ---------------------------\n+# Public sister of _AM_SUBST_NOTMAKE.\n+AC_DEFUN([AM_SUBST_NOTMAKE], [_AM_SUBST_NOTMAKE($@)])\n+\n+# Check how to create a tarball.                            -*- Autoconf -*-\n+\n+# Copyright (C) 2004, 2005  Free Software Foundation, Inc.\n+#\n+# This file is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# serial 2\n+\n+# _AM_PROG_TAR(FORMAT)\n+# --------------------\n+# Check how to create a tarball in format FORMAT.\n+# FORMAT should be one of `v7', `ustar', or `pax'.\n+#\n+# Substitute a variable $(am__tar) that is a command\n+# writing to stdout a FORMAT-tarball containing the directory\n+# $tardir.\n+#     tardir=directory && $(am__tar) > result.tar\n+#\n+# Substitute a variable $(am__untar) that extract such\n+# a tarball read from stdin.\n+#     $(am__untar) < result.tar\n+AC_DEFUN([_AM_PROG_TAR],\n+[# Always define AMTAR for backward compatibility.\n+AM_MISSING_PROG([AMTAR], [tar])\n+m4_if([$1], [v7],\n+     [am__tar='${AMTAR} chof - \"$$tardir\"'; am__untar='${AMTAR} xf -'],\n+     [m4_case([$1], [ustar],, [pax],,\n+              [m4_fatal([Unknown tar format])])\n+AC_MSG_CHECKING([how to create a $1 tar archive])\n+# Loop over all known methods to create a tar archive until one works.\n+_am_tools='gnutar m4_if([$1], [ustar], [plaintar]) pax cpio none'\n+_am_tools=${am_cv_prog_tar_$1-$_am_tools}\n+# Do not fold the above two line into one, because Tru64 sh and\n+# Solaris sh will not grok spaces in the rhs of `-'.\n+for _am_tool in $_am_tools\n+do\n+  case $_am_tool in\n+  gnutar)\n+    for _am_tar in tar gnutar gtar;\n+    do\n+      AM_RUN_LOG([$_am_tar --version]) && break\n+    done\n+    am__tar=\"$_am_tar --format=m4_if([$1], [pax], [posix], [$1]) -chf - \"'\"$$tardir\"'\n+    am__tar_=\"$_am_tar --format=m4_if([$1], [pax], [posix], [$1]) -chf - \"'\"$tardir\"'\n+    am__untar=\"$_am_tar -xf -\"\n+    ;;\n+  plaintar)\n+    # Must skip GNU tar: if it does not support --format= it doesn't create\n+    # ustar tarball either.\n+    (tar --version) >/dev/null 2>&1 && continue\n+    am__tar='tar chf - \"$$tardir\"'\n+    am__tar_='tar chf - \"$tardir\"'\n+    am__untar='tar xf -'\n+    ;;\n+  pax)\n+    am__tar='pax -L -x $1 -w \"$$tardir\"'\n+    am__tar_='pax -L -x $1 -w \"$tardir\"'\n+    am__untar='pax -r'\n+    ;;\n+  cpio)\n+    am__tar='find \"$$tardir\" -print | cpio -o -H $1 -L'\n+    am__tar_='find \"$tardir\" -print | cpio -o -H $1 -L'\n+    am__untar='cpio -i -H $1 -d'\n+    ;;\n+  none)\n+    am__tar=false\n+    am__tar_=false\n+    am__untar=false\n+    ;;\n+  esac\n+\n+  # If the value was cached, stop now.  We just wanted to have am__tar\n+  # and am__untar set.\n+  test -n \"${am_cv_prog_tar_$1}\" && break\n+\n+  # tar/untar a dummy directory, and stop if the command works\n+  rm -rf conftest.dir\n+  mkdir conftest.dir\n+  echo GrepMe > conftest.dir/file\n+  AM_RUN_LOG([tardir=conftest.dir && eval $am__tar_ >conftest.tar])\n+  rm -rf conftest.dir\n+  if test -s conftest.tar; then\n+    AM_RUN_LOG([$am__untar <conftest.tar])\n+    grep GrepMe conftest.dir/file >/dev/null 2>&1 && break\n+  fi\n+done\n+rm -rf conftest.dir\n+\n+AC_CACHE_VAL([am_cv_prog_tar_$1], [am_cv_prog_tar_$1=$_am_tool])\n+AC_MSG_RESULT([$am_cv_prog_tar_$1])])\n+AC_SUBST([am__tar])\n+AC_SUBST([am__untar])\n+]) # _AM_PROG_TAR\n+\n+m4_include([../config/depstand.m4])\n+m4_include([../config/lead-dot.m4])\n+m4_include([../config/multi.m4])\n+m4_include([../config/override.m4])\n+m4_include([../ltoptions.m4])\n+m4_include([../ltsugar.m4])\n+m4_include([../ltversion.m4])\n+m4_include([../lt~obsolete.m4])\n+m4_include([acinclude.m4])"}, {"sha": "648942b281c4c09948be74fd6bc27adbd2de4c4e", "filename": "libquadmath/config.h.in", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fconfig.h.in?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,71 @@\n+/* config.h.in.  Generated from configure.ac by autoheader.  */\n+\n+/* libm includes cbrtl */\n+#undef HAVE_CBRTL\n+\n+/* Define to 1 if you have the <dlfcn.h> header file. */\n+#undef HAVE_DLFCN_H\n+\n+/* Define to 1 if you have the <inttypes.h> header file. */\n+#undef HAVE_INTTYPES_H\n+\n+/* Define to 1 if you have the <memory.h> header file. */\n+#undef HAVE_MEMORY_H\n+\n+/* libm includes sqrtl */\n+#undef HAVE_SQRTL\n+\n+/* Define to 1 if you have the <stdint.h> header file. */\n+#undef HAVE_STDINT_H\n+\n+/* Define to 1 if you have the <stdlib.h> header file. */\n+#undef HAVE_STDLIB_H\n+\n+/* Define to 1 if you have the <strings.h> header file. */\n+#undef HAVE_STRINGS_H\n+\n+/* Define to 1 if you have the <string.h> header file. */\n+#undef HAVE_STRING_H\n+\n+/* Define to 1 if you have the <sys/stat.h> header file. */\n+#undef HAVE_SYS_STAT_H\n+\n+/* Define to 1 if you have the <sys/types.h> header file. */\n+#undef HAVE_SYS_TYPES_H\n+\n+/* Define to 1 if you have the <unistd.h> header file. */\n+#undef HAVE_UNISTD_H\n+\n+/* Define to the sub-directory in which libtool stores uninstalled libraries.\n+   */\n+#undef LT_OBJDIR\n+\n+/* Define to 1 if your C compiler doesn't accept -c and -o together. */\n+#undef NO_MINUS_C_MINUS_O\n+\n+/* Name of package */\n+#undef PACKAGE\n+\n+/* Define to the address where bug reports for this package should be sent. */\n+#undef PACKAGE_BUGREPORT\n+\n+/* Define to the full name of this package. */\n+#undef PACKAGE_NAME\n+\n+/* Define to the full name and version of this package. */\n+#undef PACKAGE_STRING\n+\n+/* Define to the one symbol short name of this package. */\n+#undef PACKAGE_TARNAME\n+\n+/* Define to the home page for this package. */\n+#undef PACKAGE_URL\n+\n+/* Define to the version of this package. */\n+#undef PACKAGE_VERSION\n+\n+/* Define to 1 if you have the ANSI C header files. */\n+#undef STDC_HEADERS\n+\n+/* Version number of package */\n+#undef VERSION"}, {"sha": "166d42d6be4a5578e572da3d600214e8c64214ba", "filename": "libquadmath/configure", "status": "added", "additions": 13413, "deletions": 0, "changes": 13413, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fconfigure?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8"}, {"sha": "3f4c87f2695aa893f43ee96074b96c235157fef5", "filename": "libquadmath/configure.ac", "status": "added", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fconfigure.ac?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,163 @@\n+# Process this file with autoconf to produce a configure script, like so:\n+# aclocal && autoconf && autoheader && automake\n+\n+AC_PREREQ(2.64)\n+AC_INIT([GCC Quad-precision Math Library], 0.1,,[libquadmath])\n+AC_CONFIG_HEADER(config.h)\n+\n+# Gets build, host, target, *_vendor, *_cpu, *_os, etc.\n+#\n+# You will slowly go insane if you do not grok the following fact:  when\n+# building this library, the top-level /target/ becomes the library's /host/.\n+#\n+# configure then causes --target to default to --host, exactly like any\n+# other package using autoconf.  Therefore, 'target' and 'host' will\n+# always be the same.  This makes sense both for native and cross compilers\n+# just think about it for a little while.  :-)\n+#\n+# Also, if this library is being configured as part of a cross compiler, the\n+# top-level configure script will pass the \"real\" host as $with_cross_host.\n+#\n+# Do not delete or change the following two lines.  For why, see\n+# http://gcc.gnu.org/ml/libstdc++/2003-07/msg00451.html\n+AC_CANONICAL_SYSTEM\n+target_alias=${target_alias-$host_alias}\n+\n+AM_INIT_AUTOMAKE([1.9.0 foreign subdir-objects no-dist -Wall -Werror])\n+\n+AC_PROG_CC\n+AM_PROG_CC_C_O\n+\n+AC_MSG_CHECKING([for --enable-version-specific-runtime-libs])\n+AC_ARG_ENABLE(version-specific-runtime-libs,\n+[  --enable-version-specific-runtime-libs    Specify that runtime libraries should be installed in a compiler-specific directory ],\n+[case \"$enableval\" in\n+ yes) version_specific_libs=yes ;;\n+ no)  version_specific_libs=no ;;\n+ *)   AC_MSG_ERROR([Unknown argument to enable/disable version-specific libs]);;\n+ esac],\n+[version_specific_libs=no])\n+AC_MSG_RESULT($version_specific_libs)\n+\n+\n+# Configure libtool\n+AM_PROG_LIBTOOL\n+AC_SUBST(enable_shared)\n+AC_SUBST(enable_static)\n+\n+AM_MAINTAINER_MODE\n+AM_ENABLE_MULTILIB(, ..)\n+\n+# Calculate toolexeclibdir\n+# Also toolexecdir, though it's only used in toolexeclibdir\n+case ${version_specific_libs} in\n+  yes)\n+    # Need the gcc compiler version to know where to install libraries\n+    # and header files if --enable-version-specific-runtime-libs option\n+    # is selected.\n+    toolexecdir='$(libdir)/gcc/$(target_alias)'\n+    toolexeclibdir='$(toolexecdir)/$(gcc_version)$(MULTISUBDIR)'\n+    ;;\n+  no)\n+    if test -n \"$with_cross_host\" &&\n+       test x\"$with_cross_host\" != x\"no\"; then\n+      # Install a library built with a cross compiler in tooldir, not libdir.\n+      toolexecdir='$(exec_prefix)/$(target_alias)'\n+      toolexeclibdir='$(toolexecdir)/lib'\n+    else\n+      toolexecdir='$(libdir)/gcc-lib/$(target_alias)'\n+      toolexeclibdir='$(libdir)'\n+    fi\n+    multi_os_directory=`$CC -print-multi-os-directory`\n+    case $multi_os_directory in\n+      .) ;; # Avoid trailing /.\n+      *) toolexeclibdir=$toolexeclibdir/$multi_os_directory ;;\n+    esac\n+    ;;\n+esac\n+AC_SUBST(toolexecdir)\n+AC_SUBST(toolexeclibdir)\n+\n+AC_CHECK_LIB([m],[sqrtl],[AC_DEFINE([HAVE_SQRTL],[1],[libm includes sqrtl])])\n+AC_CHECK_LIB([m],[cbrtl],[AC_DEFINE([HAVE_CBRTL],[1],[libm includes cbrtl])])\n+\n+# Check for symbol versioning (copied from libssp).\n+AC_MSG_CHECKING([whether symbol versioning is supported])\n+save_LDFLAGS=\"$LDFLAGS\"\n+LDFLAGS=\"$LDFLAGS -fPIC -shared -Wl,--version-script,./conftest.map\"\n+cat > conftest.map <<EOF\n+FOO_1.0 {\n+  global: *foo*; bar; local: *;\n+};\n+EOF\n+AC_TRY_LINK([int foo;],[],[quadmath_use_symver=gnu],[quadmath_use_symver=no])\n+if test x$quadmath_use_symver = xno; then\n+  case \"$target_os\" in\n+    solaris2*)\n+      LDFLAGS=\"$save_LDFLAGS\"\n+      LDFLAGS=\"$LDFLAGS -fPIC -shared -Wl,-M,./conftest.map\"\n+      # Sun ld cannot handle wildcards and treats all entries as undefined.\n+      cat > conftest.map <<EOF\n+FOO_1.0 {\n+  global: foo; local: *;\n+};\n+EOF\n+      AC_TRY_LINK([int foo;],[],[quadmath_use_symver=sun],[quadmath_use_symver=no])\n+      ;;\n+  esac\n+fi\n+LDFLAGS=\"$save_LDFLAGS\"\n+AC_MSG_RESULT($quadmath_use_symver)\n+AM_CONDITIONAL(LIBQUAD_USE_SYMVER, [test \"x$quadmath_use_symver\" != xno])\n+AM_CONDITIONAL(LIBQUAD_USE_SYMVER_GNU, [test \"x$quadmath_use_symver\" = xgnu])\n+AM_CONDITIONAL(LIBQUAD_USE_SYMVER_SUN, [test \"x$quadmath_use_symver\" = xsun])\n+\n+AC_MSG_CHECKING([whether __float128 is supported])\n+  AC_TRY_LINK([\n+    typedef _Complex float __attribute__((mode(TC))) __complex128;\n+\n+    __float128 foo (__float128 x)\n+    {\n+\n+     __complex128 z1, z2;\n+\n+     z1 = x;\n+     z2 = x / 7.Q;\n+     z2 /= z1;\n+\n+     return (__float128) z2;\n+    }\n+\n+    __float128 bar (__float128 x)\n+    {\n+      return x * __builtin_huge_valq ();\n+    }\n+  ],[\n+    foo (1.2Q);\n+    bar (1.2Q);\n+  ],[\n+    libquad_have_float128=yes\n+  ],[\n+    libquad_have_float128=no\n+])\n+AC_MSG_RESULT([$libquad_have_float128])\n+\n+dnl\n+dnl Enable the following for a stand-alone library:\n+dnl\n+dnl if test $libquad_have_float128 = no; then\n+dnl   AC_MSG_ERROR([__float128 support is required to build this library.])\n+dnl fi\n+\n+AM_CONDITIONAL(BUILD_LIBQUADMATH, [test \"x$libquad_have_float128\" = xyes])\n+\n+AC_CACHE_SAVE\n+\n+if test ${multilib} = yes; then\n+  multilib_arg=\"--enable-multilib\"\n+else\n+  multilib_arg=\n+fi\n+\n+AC_CONFIG_FILES(Makefile)\n+AC_OUTPUT"}, {"sha": "069fd0832c39936d4c7fff887f50577ca4ad87bd", "filename": "libquadmath/gdtoa/README.gdtoa", "status": "added", "additions": 369, "deletions": 0, "changes": 369, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2FREADME.gdtoa", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2FREADME.gdtoa", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fgdtoa%2FREADME.gdtoa?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,369 @@\n+The content below is the README file of the gdtoa distribution, available\n+from http://www.netlib.org/fp/\n+\n+----------------------------------------------------\n+\n+This directory contains source for a library of binary -> decimal\n+and decimal -> binary conversion routines, for single-, double-,\n+and extended-precision IEEE binary floating-point arithmetic, and\n+other IEEE-like binary floating-point, including \"double double\",\n+as in\n+\n+\tT. J. Dekker, \"A Floating-Point Technique for Extending the\n+\tAvailable Precision\", Numer. Math. 18 (1971), pp. 224-242\n+\n+and\n+\n+\t\"Inside Macintosh: PowerPC Numerics\", Addison-Wesley, 1994\n+\n+The conversion routines use double-precision floating-point arithmetic\n+and, where necessary, high precision integer arithmetic.  The routines\n+are generalizations of the strtod and dtoa routines described in\n+\n+\tDavid M. Gay, \"Correctly Rounded Binary-Decimal and\n+\tDecimal-Binary Conversions\", Numerical Analysis Manuscript\n+\tNo. 90-10, Bell Labs, Murray Hill, 1990;\n+\thttp://cm.bell-labs.com/cm/cs/what/ampl/REFS/rounding.ps.gz\n+\n+(based in part on papers by Clinger and Steele & White: see the\n+references in the above paper).\n+\n+The present conversion routines should be able to use any of IEEE binary,\n+VAX, or IBM-mainframe double-precision arithmetic internally, but I (dmg)\n+have so far only had a chance to test them with IEEE double precision\n+arithmetic.\n+\n+The core conversion routines are strtodg for decimal -> binary conversions\n+and gdtoa for binary -> decimal conversions.  These routines operate\n+on arrays of unsigned 32-bit integers of type ULong, a signed 32-bit\n+exponent of type Long, and arithmetic characteristics described in\n+struct FPI; FPI, Long, and ULong are defined in gdtoa.h.  File arith.h\n+is supposed to provide #defines that cause gdtoa.h to define its\n+types correctly.  File arithchk.c is source for a program that\n+generates a suitable arith.h on all systems where I've been able to\n+test it.\n+\n+The core conversion routines are meant to be called by helper routines\n+that know details of the particular binary arithmetic of interest and\n+convert.  The present directory provides helper routines for 5 variants\n+of IEEE binary floating-point arithmetic, each indicated by one or\n+two letters:\n+\n+\tf\tIEEE single precision\n+\td\tIEEE double precision\n+\tx\tIEEE extended precision, as on Intel 80x87\n+\t\tand software emulations of Motorola 68xxx chips\n+\t\tthat do not pad the way the 68xxx does, but\n+\t\tonly store 80 bits\n+\txL\tIEEE extended precision, as on Motorola 68xxx chips\n+\tQ\tquad precision, as on Sun Sparc chips\n+\tdd\tdouble double, pairs of IEEE double numbers\n+\t\twhose sum is the desired value\n+\n+For decimal -> binary conversions, there are three families of\n+helper routines: one for round-nearest (or the current rounding\n+mode on IEEE-arithmetic systems that provide the C99 fegetround()\n+function, if compiled with -DHonor_FLT_ROUNDS):\n+\n+\tstrtof\n+\tstrtod\n+\tstrtodd\n+\tstrtopd\n+\tstrtopf\n+\tstrtopx\n+\tstrtopxL\n+\tstrtopQ\n+\n+one with rounding direction specified:\n+\n+\tstrtorf\n+\tstrtord\n+\tstrtordd\n+\tstrtorx\n+\tstrtorxL\n+\tstrtorQ\n+\n+and one for computing an interval (at most one bit wide) that contains\n+the decimal number:\n+\n+\tstrtoIf\n+\tstrtoId\n+\tstrtoIdd\n+\tstrtoIx\n+\tstrtoIxL\n+\tstrtoIQ\n+\n+The latter call strtoIg, which makes one call on strtodg and adjusts\n+the result to provide the desired interval.  On systems where native\n+arithmetic can easily make one-ulp adjustments on values in the\n+desired floating-point format, it might be more efficient to use the\n+native arithmetic.  Routine strtodI is a variant of strtoId that\n+illustrates one way to do this for IEEE binary double-precision\n+arithmetic -- but whether this is more efficient remains to be seen.\n+\n+Functions strtod and strtof have \"natural\" return types, float and\n+double -- strtod is specified by the C standard, and strtof appears\n+in the stdlib.h of some systems, such as (at least some) Linux systems.\n+The other functions write their results to their final argument(s):\n+to the final two argument for the strtoI... (interval) functions,\n+and to the final argument for the others (strtop... and strtor...).\n+Where possible, these arguments have \"natural\" return types (double*\n+or float*), to permit at least some type checking.  In reality, they\n+are viewed as arrays of ULong (or, for the \"x\" functions, UShort)\n+values. On systems where long double is the appropriate type, one can\n+pass long double* final argument(s) to these routines.  The int value\n+that these routines return is the return value from the call they make\n+on strtodg; see the enum of possible return values in gdtoa.h.\n+\n+Source files g_ddfmt.c, misc.c, smisc.c, strtod.c, strtodg.c, and ulp.c\n+should use true IEEE double arithmetic (not, e.g., double extended),\n+at least for storing (and viewing the bits of) the variables declared\n+\"double\" within them.\n+\n+One detail indicated in struct FPI is whether the target binary\n+arithmetic departs from the IEEE standard by flushing denormalized\n+numbers to 0.  On systems that do this, the helper routines for\n+conversion to double-double format (when compiled with\n+Sudden_Underflow #defined) penalize the bottom of the exponent\n+range so that they return a nonzero result only when the least\n+significant bit of the less significant member of the pair of\n+double values returned can be expressed as a normalized double\n+value.  An alternative would be to drop to 53-bit precision near\n+the bottom of the exponent range.  To get correct rounding, this\n+would (in general) require two calls on strtodg (one specifying\n+126-bit arithmetic, then, if necessary, one specifying 53-bit\n+arithmetic).\n+\n+By default, the core routine strtodg and strtod set errno to ERANGE\n+if the result overflows to +Infinity or underflows to 0.  Compile\n+these routines with NO_ERRNO #defined to inhibit errno assignments.\n+\n+Routine strtod is based on netlib's \"dtoa.c from fp\", and\n+(f = strtod(s,se)) is more efficient for some conversions than, say,\n+strtord(s,se,1,&f).  Parts of strtod require true IEEE double\n+arithmetic with the default rounding mode (round-to-nearest) and, on\n+systems with IEEE extended-precision registers, double-precision\n+(53-bit) rounding precision.  If the machine uses (the equivalent of)\n+Intel 80x87 arithmetic, the call\n+\t_control87(PC_53, MCW_PC);\n+does this with many compilers.  Whether this or another call is\n+appropriate depends on the compiler; for this to work, it may be\n+necessary to #include \"float.h\" or another system-dependent header\n+file.\n+\n+Source file strtodnrp.c gives a strtod that does not require 53-bit\n+rounding precision on systems (such as Intel IA32 systems) that may\n+suffer double rounding due to use of extended-precision registers.\n+For some conversions this variant of strtod is less efficient than the\n+one in strtod.c when the latter is run with 53-bit rounding precision.\n+\n+The values that the strto* routines return for NaNs are determined by\n+gd_qnan.h, which the makefile generates by running the program whose\n+source is qnan.c.  Note that the rules for distinguishing signaling\n+from quiet NaNs are system-dependent.  For cross-compilation, you need\n+to determine arith.h and gd_qnan.h suitably, e.g., using the\n+arithmetic of the target machine.\n+\n+C99's hexadecimal floating-point constants are recognized by the\n+strto* routines (but this feature has not yet been heavily tested).\n+Compiling with NO_HEX_FP #defined disables this feature.\n+\n+When compiled with -DINFNAN_CHECK, the strto* routines recognize C99's\n+NaN and Infinity syntax.  Moreover, unless No_Hex_NaN is #defined, the\n+strto* routines also recognize C99's NaN(...) syntax: they accept\n+(case insensitively) strings of the form NaN(x), where x is a string\n+of hexadecimal digits and spaces; if there is only one string of\n+hexadecimal digits, it is taken for the fraction bits of the resulting\n+NaN; if there are two or more strings of hexadecimal digits, each\n+string is assigned to the next available sequence of 32-bit words of\n+fractions bits (starting with the most significant), right-aligned in\n+each sequence.\n+\n+For binary -> decimal conversions, I've provided just one family\n+of helper routines:\n+\n+\tg_ffmt\n+\tg_dfmt\n+\tg_ddfmt\n+\tg_xfmt\n+\tg_xLfmt\n+\tg_Qfmt\n+\n+which do a \"%g\" style conversion either to a specified number of decimal\n+places (if their ndig argument is positive), or to the shortest\n+decimal string that rounds to the given binary floating-point value\n+(if ndig <= 0).  They write into a buffer supplied as an argument\n+and return either a pointer to the end of the string (a null character)\n+in the buffer, if the buffer was long enough, or 0.  Other forms of\n+conversion are easily done with the help of gdtoa(), such as %e or %f\n+style and conversions with direction of rounding specified (so that, if\n+desired, the decimal value is either >= or <= the binary value).\n+On IEEE-arithmetic systems that provide the C99 fegetround() function,\n+if compiled with -DHonor_FLT_ROUNDS, these routines honor the current\n+rounding mode.\n+\n+For an example of more general conversions based on dtoa(), see\n+netlib's \"printf.c from ampl/solvers\".\n+\n+For double-double -> decimal, g_ddfmt() assumes IEEE-like arithmetic\n+of precision max(126, #bits(input)) bits, where #bits(input) is the\n+number of mantissa bits needed to represent the sum of the two double\n+values in the input.\n+\n+The makefile creates a library, gdtoa.a.  To use the helper\n+routines, a program only needs to include gdtoa.h.  All the\n+source files for gdtoa.a include a more extensive gdtoaimp.h;\n+among other things, gdtoaimp.h has #defines that make \"internal\"\n+names end in _D2A.  To make a \"system\" library, one could modify\n+these #defines to make the names start with __.\n+\n+Various comments about possible #defines appear in gdtoaimp.h,\n+but for most purposes, arith.h should set suitable #defines.\n+\n+Systems with preemptive scheduling of multiple threads require some\n+manual intervention.  On such systems, it's necessary to compile\n+dmisc.c, dtoa.c gdota.c, and misc.c with MULTIPLE_THREADS #defined,\n+and to provide (or suitably #define) two locks, acquired by\n+ACQUIRE_DTOA_LOCK(n) and freed by FREE_DTOA_LOCK(n) for n = 0 or 1.\n+(The second lock, accessed in pow5mult, ensures lazy evaluation of\n+only one copy of high powers of 5; omitting this lock would introduce\n+a small probability of wasting memory, but would otherwise be harmless.)\n+Routines that call dtoa or gdtoa directly must also invoke freedtoa(s)\n+to free the value s returned by dtoa or gdtoa.  It's OK to do so whether\n+or not MULTIPLE_THREADS is #defined, and the helper g_*fmt routines\n+listed above all do this indirectly (in gfmt_D2A(), which they all call).\n+\n+By default, there is a private pool of memory of length 2000 bytes\n+for intermediate quantities, and MALLOC (see gdtoaimp.h) is called only\n+if the private pool does not suffice.   2000 is large enough that MALLOC\n+is called only under very unusual circumstances (decimal -> binary\n+conversion of very long strings) for conversions to and from double\n+precision.  For systems with preemptively scheduled multiple threads\n+or for conversions to extended or quad, it may be appropriate to\n+#define PRIVATE_MEM nnnn, where nnnn is a suitable value > 2000.\n+For extended and quad precisions, -DPRIVATE_MEM=20000 is probably\n+plenty even for many digits at the ends of the exponent range.\n+Use of the private pool avoids some overhead.\n+\n+Directory test provides some test routines.  See its README.\n+I've also tested this stuff (except double double conversions)\n+with Vern Paxson's testbase program: see\n+\n+\tV. Paxson and W. Kahan, \"A Program for Testing IEEE Binary-Decimal\n+\tConversion\", manuscript, May 1991,\n+\tftp://ftp.ee.lbl.gov/testbase-report.ps.Z .\n+\n+(The same ftp directory has source for testbase.)\n+\n+Some system-dependent additions to CFLAGS in the makefile:\n+\n+\tHU-UX: -Aa -Ae\n+\tOSF (DEC Unix): -ieee_with_no_inexact\n+\tSunOS 4.1x: -DKR_headers -DBad_float_h\n+\n+If you want to put this stuff into a shared library and your\n+operating system requires export lists for shared libraries,\n+the following would be an appropriate export list:\n+\n+\tdtoa\n+\tfreedtoa\n+\tg_Qfmt\n+\tg_ddfmt\n+\tg_dfmt\n+\tg_ffmt\n+\tg_xLfmt\n+\tg_xfmt\n+\tgdtoa\n+\tstrtoIQ\n+\tstrtoId\n+\tstrtoIdd\n+\tstrtoIf\n+\tstrtoIx\n+\tstrtoIxL\n+\tstrtod\n+\tstrtodI\n+\tstrtodg\n+\tstrtof\n+\tstrtopQ\n+\tstrtopd\n+\tstrtopdd\n+\tstrtopf\n+\tstrtopx\n+\tstrtopxL\n+\tstrtorQ\n+\tstrtord\n+\tstrtordd\n+\tstrtorf\n+\tstrtorx\n+\tstrtorxL\n+\n+When time permits, I (dmg) hope to write in more detail about the\n+present conversion routines; for now, this README file must suffice.\n+Meanwhile, if you wish to write helper functions for other kinds of\n+IEEE-like arithmetic, some explanation of struct FPI and the bits\n+array may be helpful.  Both gdtoa and strtodg operate on a bits array\n+described by FPI *fpi.  The bits array is of type ULong, a 32-bit\n+unsigned integer type.  Floating-point numbers have fpi->nbits bits,\n+with the least significant 32 bits in bits[0], the next 32 bits in\n+bits[1], etc.  These numbers are regarded as integers multiplied by\n+2^e (i.e., 2 to the power of the exponent e), where e is the second\n+argument (be) to gdtoa and is stored in *exp by strtodg.  The minimum\n+and maximum exponent values fpi->emin and fpi->emax for normalized\n+floating-point numbers reflect this arrangement.  For example, the\n+P754 standard for binary IEEE arithmetic specifies doubles as having\n+53 bits, with normalized values of the form 1.xxxxx... times 2^(b-1023),\n+with 52 bits (the x's) and the biased exponent b represented explicitly;\n+b is an unsigned integer in the range 1 <= b <= 2046 for normalized\n+finite doubles, b = 0 for denormals, and b = 2047 for Infinities and NaNs.\n+To turn an IEEE double into the representation used by strtodg and gdtoa,\n+we multiply 1.xxxx... by 2^52 (to make it an integer) and reduce the\n+exponent e = (b-1023) by 52:\n+\n+\tfpi->emin = 1 - 1023 - 52\n+\tfpi->emax = 1046 - 1023 - 52\n+\n+In various wrappers for IEEE double, we actually write -53 + 1 rather\n+than -52, to emphasize that there are 53 bits including one implicit bit.\n+Field fpi->rounding indicates the desired rounding direction, with\n+possible values\n+\tFPI_Round_zero = toward 0,\n+\tFPI_Round_near = unbiased rounding -- the IEEE default,\n+\tFPI_Round_up = toward +Infinity, and\n+\tFPI_Round_down = toward -Infinity\n+given in gdtoa.h.\n+\n+Field fpi->sudden_underflow indicates whether strtodg should return\n+denormals or flush them to zero.  Normal floating-point numbers have\n+bit fpi->nbits in the bits array on.  Denormals have it off, with\n+exponent = fpi->emin.  Strtodg provides distinct return values for normals\n+and denormals; see gdtoa.h.\n+\n+Compiling g__fmt.c, strtod.c, and strtodg.c with -DUSE_LOCALE causes\n+the decimal-point character to be taken from the current locale; otherwise\n+it is '.'.\n+\n+Source files dtoa.c and strtod.c in this directory are derived from\n+netlib's \"dtoa.c from fp\" and are meant to function equivalently.\n+When compiled with Honor_FLT_ROUNDS #defined (on systems that provide\n+FLT_ROUNDS and fegetround() as specified in the C99 standard), they\n+honor the current rounding mode.  Because FLT_ROUNDS is buggy on some\n+(Linux) systems -- not reflecting calls on fesetround(), as the C99\n+standard says it should -- when Honor_FLT_ROUNDS is #defined, the\n+current rounding mode is obtained from fegetround() rather than from\n+FLT_ROUNDS, unless Trust_FLT_ROUNDS is also #defined.\n+\n+Compile with -DUSE_LOCALE to use the current locale; otherwise\n+decimal points are assumed to be '.'.  With -DUSE_LOCALE, unless\n+you also compile with -DNO_LOCALE_CACHE, the details about the\n+current \"decimal point\" character string are cached and assumed not\n+to change during the program's execution.\n+\n+On machines with a 64-bit long double and perhaps a 113-bit \"quad\"\n+type, you can invoke \"make Printf\" to add Printf (and variants, such\n+as Fprintf) to gdtoa.a.  These are analogs, declared in stdio1.h, of\n+printf and fprintf, etc. in which %La, %Le, %Lf, and %Lg are for long\n+double and (if appropriate) %Lqa, %Lqe, %Lqf, and %Lqg are for quad\n+precision printing.\n+\n+Please send comments to\tDavid M. Gay (dmg at acm dot org, with \" at \"\n+changed at \"@\" and \" dot \" changed to \".\")."}, {"sha": "f4209e31e89e885213890efaf9a47068b94c8fdf", "filename": "libquadmath/gdtoa/arith.h", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Farith.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Farith.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fgdtoa%2Farith.h?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,14 @@\n+#include <stdint.h>\n+\n+#if __LITTLE_ENDIAN__\n+# define IEEE_8087\n+#elif __BIG_ENDIAN__\n+# define IEEE_MC68k\n+#else\n+// Because quad math is typically performed on little-endian hardware\n+//# error \"Unknown endianness\"\n+# define IEEE_8087\n+#endif\n+\n+// This should be 32 bit integer type\n+#define Long int"}, {"sha": "ce170c733bf723cdd9ab4e4801a4f35ac2010bcc", "filename": "libquadmath/gdtoa/dmisc.c", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fdmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fdmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fgdtoa%2Fdmisc.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,216 @@\n+/****************************************************************\n+\n+The author of this software is David M. Gay.\n+\n+Copyright (C) 1998 by Lucent Technologies\n+All Rights Reserved\n+\n+Permission to use, copy, modify, and distribute this software and\n+its documentation for any purpose and without fee is hereby\n+granted, provided that the above copyright notice appear in all\n+copies and that both that the copyright notice and this\n+permission notice and warranty disclaimer appear in supporting\n+documentation, and that the name of Lucent or any of its entities\n+not be used in advertising or publicity pertaining to\n+distribution of the software without specific, written prior\n+permission.\n+\n+LUCENT DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,\n+INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.\n+IN NO EVENT SHALL LUCENT OR ANY OF ITS ENTITIES BE LIABLE FOR ANY\n+SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n+WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER\n+IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,\n+ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n+THIS SOFTWARE.\n+\n+****************************************************************/\n+\n+/* Please send bug reports to David M. Gay (dmg at acm dot org,\n+ * with \" at \" changed at \"@\" and \" dot \" changed to \".\").\t*/\n+\n+#include \"gdtoaimp.h\"\n+\n+#ifndef MULTIPLE_THREADS\n+ char *dtoa_result;\n+#endif\n+\n+ char *\n+#ifdef KR_headers\n+rv_alloc(i) int i;\n+#else\n+rv_alloc(int i)\n+#endif\n+{\n+\tint j, k, *r;\n+\n+\tj = sizeof(ULong);\n+\tfor(k = 0;\n+\t\tsizeof(Bigint) - sizeof(ULong) - sizeof(int) + j <= i;\n+\t\tj <<= 1)\n+\t\t\tk++;\n+\tr = (int*)Balloc(k);\n+\t*r = k;\n+\treturn\n+#ifndef MULTIPLE_THREADS\n+\tdtoa_result =\n+#endif\n+\t\t(char *)(r+1);\n+\t}\n+\n+ char *\n+#ifdef KR_headers\n+nrv_alloc(s, rve, n) char *s, **rve; int n;\n+#else\n+nrv_alloc(char *s, char **rve, int n)\n+#endif\n+{\n+\tchar *rv, *t;\n+\n+\tt = rv = rv_alloc(n);\n+\twhile((*t = *s++) !=0)\n+\t\tt++;\n+\tif (rve)\n+\t\t*rve = t;\n+\treturn rv;\n+\t}\n+\n+/* freedtoa(s) must be used to free values s returned by dtoa\n+ * when MULTIPLE_THREADS is #defined.  It should be used in all cases,\n+ * but for consistency with earlier versions of dtoa, it is optional\n+ * when MULTIPLE_THREADS is not defined.\n+ */\n+\n+ void\n+#ifdef KR_headers\n+freedtoa(s) char *s;\n+#else\n+freedtoa(char *s)\n+#endif\n+{\n+\tBigint *b = (Bigint *)((int *)s - 1);\n+\tb->maxwds = 1 << (b->k = *(int*)b);\n+\tBfree(b);\n+#ifndef MULTIPLE_THREADS\n+\tif (s == dtoa_result)\n+\t\tdtoa_result = 0;\n+#endif\n+\t}\n+\n+ int\n+quorem\n+#ifdef KR_headers\n+\t(b, S) Bigint *b, *S;\n+#else\n+\t(Bigint *b, Bigint *S)\n+#endif\n+{\n+\tint n;\n+\tULong *bx, *bxe, q, *sx, *sxe;\n+#ifdef ULLong\n+\tULLong borrow, carry, y, ys;\n+#else\n+\tULong borrow, carry, y, ys;\n+#ifdef Pack_32\n+\tULong si, z, zs;\n+#endif\n+#endif\n+\n+\tn = S->wds;\n+#ifdef DEBUG\n+\t/*debug*/ if (b->wds > n)\n+\t/*debug*/\tBug(\"oversize b in quorem\");\n+#endif\n+\tif (b->wds < n)\n+\t\treturn 0;\n+\tsx = S->x;\n+\tsxe = sx + --n;\n+\tbx = b->x;\n+\tbxe = bx + n;\n+\tq = *bxe / (*sxe + 1);\t/* ensure q <= true quotient */\n+#ifdef DEBUG\n+\t/*debug*/ if (q > 9)\n+\t/*debug*/\tBug(\"oversized quotient in quorem\");\n+#endif\n+\tif (q) {\n+\t\tborrow = 0;\n+\t\tcarry = 0;\n+\t\tdo {\n+#ifdef ULLong\n+\t\t\tys = *sx++ * (ULLong)q + carry;\n+\t\t\tcarry = ys >> 32;\n+\t\t\ty = *bx - (ys & 0xffffffffUL) - borrow;\n+\t\t\tborrow = y >> 32 & 1UL;\n+\t\t\t*bx++ = y & 0xffffffffUL;\n+#else\n+#ifdef Pack_32\n+\t\t\tsi = *sx++;\n+\t\t\tys = (si & 0xffff) * q + carry;\n+\t\t\tzs = (si >> 16) * q + (ys >> 16);\n+\t\t\tcarry = zs >> 16;\n+\t\t\ty = (*bx & 0xffff) - (ys & 0xffff) - borrow;\n+\t\t\tborrow = (y & 0x10000) >> 16;\n+\t\t\tz = (*bx >> 16) - (zs & 0xffff) - borrow;\n+\t\t\tborrow = (z & 0x10000) >> 16;\n+\t\t\tStoreinc(bx, z, y);\n+#else\n+\t\t\tys = *sx++ * q + carry;\n+\t\t\tcarry = ys >> 16;\n+\t\t\ty = *bx - (ys & 0xffff) - borrow;\n+\t\t\tborrow = (y & 0x10000) >> 16;\n+\t\t\t*bx++ = y & 0xffff;\n+#endif\n+#endif\n+\t\t\t}\n+\t\t\twhile(sx <= sxe);\n+\t\tif (!*bxe) {\n+\t\t\tbx = b->x;\n+\t\t\twhile(--bxe > bx && !*bxe)\n+\t\t\t\t--n;\n+\t\t\tb->wds = n;\n+\t\t\t}\n+\t\t}\n+\tif (cmp(b, S) >= 0) {\n+\t\tq++;\n+\t\tborrow = 0;\n+\t\tcarry = 0;\n+\t\tbx = b->x;\n+\t\tsx = S->x;\n+\t\tdo {\n+#ifdef ULLong\n+\t\t\tys = *sx++ + carry;\n+\t\t\tcarry = ys >> 32;\n+\t\t\ty = *bx - (ys & 0xffffffffUL) - borrow;\n+\t\t\tborrow = y >> 32 & 1UL;\n+\t\t\t*bx++ = y & 0xffffffffUL;\n+#else\n+#ifdef Pack_32\n+\t\t\tsi = *sx++;\n+\t\t\tys = (si & 0xffff) + carry;\n+\t\t\tzs = (si >> 16) + (ys >> 16);\n+\t\t\tcarry = zs >> 16;\n+\t\t\ty = (*bx & 0xffff) - (ys & 0xffff) - borrow;\n+\t\t\tborrow = (y & 0x10000) >> 16;\n+\t\t\tz = (*bx >> 16) - (zs & 0xffff) - borrow;\n+\t\t\tborrow = (z & 0x10000) >> 16;\n+\t\t\tStoreinc(bx, z, y);\n+#else\n+\t\t\tys = *sx++ + carry;\n+\t\t\tcarry = ys >> 16;\n+\t\t\ty = *bx - (ys & 0xffff) - borrow;\n+\t\t\tborrow = (y & 0x10000) >> 16;\n+\t\t\t*bx++ = y & 0xffff;\n+#endif\n+#endif\n+\t\t\t}\n+\t\t\twhile(sx <= sxe);\n+\t\tbx = b->x;\n+\t\tbxe = bx + n;\n+\t\tif (!*bxe) {\n+\t\t\twhile(--bxe > bx && !*bxe)\n+\t\t\t\t--n;\n+\t\t\tb->wds = n;\n+\t\t\t}\n+\t\t}\n+\treturn q;\n+\t}"}, {"sha": "563fa36bfa5dac2491bf1a3abf463276d1557401", "filename": "libquadmath/gdtoa/g_Qfmt.c", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fg_Qfmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fg_Qfmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fgdtoa%2Fg_Qfmt.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,125 @@\n+/****************************************************************\n+\n+The author of this software is David M. Gay.\n+\n+Copyright (C) 1998, 2000 by Lucent Technologies\n+All Rights Reserved\n+\n+Permission to use, copy, modify, and distribute this software and\n+its documentation for any purpose and without fee is hereby\n+granted, provided that the above copyright notice appear in all\n+copies and that both that the copyright notice and this\n+permission notice and warranty disclaimer appear in supporting\n+documentation, and that the name of Lucent or any of its entities\n+not be used in advertising or publicity pertaining to\n+distribution of the software without specific, written prior\n+permission.\n+\n+LUCENT DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,\n+INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.\n+IN NO EVENT SHALL LUCENT OR ANY OF ITS ENTITIES BE LIABLE FOR ANY\n+SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n+WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER\n+IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,\n+ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n+THIS SOFTWARE.\n+\n+****************************************************************/\n+\n+/* Please send bug reports to David M. Gay (dmg at acm dot org,\n+ * with \" at \" changed at \"@\" and \" dot \" changed to \".\").\t*/\n+\n+#include \"gdtoaimp.h\"\n+\n+#undef _0\n+#undef _1\n+\n+/* one or the other of IEEE_MC68k or IEEE_8087 should be #defined */\n+\n+#ifdef IEEE_MC68k\n+#define _0 0\n+#define _1 1\n+#define _2 2\n+#define _3 3\n+#endif\n+#ifdef IEEE_8087\n+#define _0 3\n+#define _1 2\n+#define _2 1\n+#define _3 0\n+#endif\n+\n+ char*\n+#ifdef KR_headers\n+g_Qfmt(buf, V, ndig, bufsize) char *buf; char *V; int ndig; size_t bufsize;\n+#else\n+g_Qfmt(char *buf, void *V, int ndig, size_t bufsize)\n+#endif\n+{\n+\tstatic FPI fpi0 = { 113, 1-16383-113+1, 32766 - 16383 - 113 + 1, 1, 0 };\n+\tchar *b, *s, *se;\n+\tULong bits[4], *L, sign;\n+\tint decpt, ex, i, mode;\n+#ifdef Honor_FLT_ROUNDS\n+#include \"gdtoa_fltrnds.h\"\n+#else\n+#define fpi &fpi0\n+#endif\n+\n+\tif (ndig < 0)\n+\t\tndig = 0;\n+\tif (bufsize < ndig + 10)\n+\t\treturn 0;\n+\n+\tL = (ULong*)V;\n+\tsign = L[_0] & 0x80000000L;\n+\tbits[3] = L[_0] & 0xffff;\n+\tbits[2] = L[_1];\n+\tbits[1] = L[_2];\n+\tbits[0] = L[_3];\n+\tb = buf;\n+\tif ( (ex = (L[_0] & 0x7fff0000L) >> 16) !=0) {\n+\t\tif (ex == 0x7fff) {\n+\t\t\t/* Infinity or NaN */\n+\t\t\tif (bits[0] | bits[1] | bits[2] | bits[3])\n+\t\t\t\tb = strcp(b, \"NaN\");\n+\t\t\telse {\n+\t\t\t\tb = buf;\n+\t\t\t\tif (sign)\n+\t\t\t\t\t*b++ = '-';\n+\t\t\t\tb = strcp(b, \"Infinity\");\n+\t\t\t\t}\n+\t\t\treturn b;\n+\t\t\t}\n+\t\ti = STRTOG_Normal;\n+\t\tbits[3] |= 0x10000;\n+\t\t}\n+\telse if (bits[0] | bits[1] | bits[2] | bits[3]) {\n+\t\ti = STRTOG_Denormal;\n+\t\tex = 1;\n+\t\t}\n+\telse {\n+#ifndef IGNORE_ZERO_SIGN\n+\t\tif (sign)\n+\t\t\t*b++ = '-';\n+#endif\n+\t\t*b++ = '0';\n+\t\t*b = 0;\n+\t\treturn b;\n+\t\t}\n+\tex -= 0x3fff + 112;\n+\tmode = 2;\n+\tif (ndig <= 0) {\n+\t\tif (bufsize < 48)\n+\t\t\treturn 0;\n+\t\tmode = 0;\n+\t\t}\n+\ts = gdtoa(fpi, ex, bits, &i, mode, ndig, &decpt, &se);\n+\n+\t// FXC -- modifications\n+\t\n+\n+\n+\treturn g__fmt(buf, s, se, decpt, sign, bufsize);\n+\t// FXC -- end of modifications\n+\t}"}, {"sha": "6c4b3d26fb2a9ca054ec2b657a324be9dc589bf1", "filename": "libquadmath/gdtoa/g__fmt.c", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fg__fmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fg__fmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fgdtoa%2Fg__fmt.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,147 @@\n+/****************************************************************\n+\n+The author of this software is David M. Gay.\n+\n+Copyright (C) 1998 by Lucent Technologies\n+All Rights Reserved\n+\n+Permission to use, copy, modify, and distribute this software and\n+its documentation for any purpose and without fee is hereby\n+granted, provided that the above copyright notice appear in all\n+copies and that both that the copyright notice and this\n+permission notice and warranty disclaimer appear in supporting\n+documentation, and that the name of Lucent or any of its entities\n+not be used in advertising or publicity pertaining to\n+distribution of the software without specific, written prior\n+permission.\n+\n+LUCENT DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,\n+INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.\n+IN NO EVENT SHALL LUCENT OR ANY OF ITS ENTITIES BE LIABLE FOR ANY\n+SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n+WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER\n+IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,\n+ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n+THIS SOFTWARE.\n+\n+****************************************************************/\n+\n+/* Please send bug reports to David M. Gay (dmg at acm dot org,\n+ * with \" at \" changed at \"@\" and \" dot \" changed to \".\").\t*/\n+\n+#include \"gdtoaimp.h\"\n+\n+#ifdef USE_LOCALE\n+#include \"locale.h\"\n+#endif\n+\n+ char *\n+#ifdef KR_headers\n+g__fmt(b, s, se, decpt, sign, blen) char *b; char *s; char *se; int decpt; ULong sign; size_t blen;\n+#else\n+g__fmt(char *b, char *s, char *se, int decpt, ULong sign, size_t blen)\n+#endif\n+{\n+\tint i, j, k;\n+\tchar *be, *s0;\n+\tsize_t len;\n+#ifdef USE_LOCALE\n+#ifdef NO_LOCALE_CACHE\n+\tchar *decimalpoint = localeconv()->decimal_point;\n+\tsize_t dlen = strlen(decimalpoint);\n+#else\n+\tchar *decimalpoint;\n+\tstatic char *decimalpoint_cache;\n+\tstatic size_t dlen;\n+\tif (!(s0 = decimalpoint_cache)) {\n+\t\ts0 = localeconv()->decimal_point;\n+\t\tdlen = strlen(s0);\n+\t\tif ((decimalpoint_cache = (char*)MALLOC(strlen(s0) + 1))) {\n+\t\t\tstrcpy(decimalpoint_cache, s0);\n+\t\t\ts0 = decimalpoint_cache;\n+\t\t\t}\n+\t\t}\n+\tdecimalpoint = s0;\n+#endif\n+#else\n+#define dlen 0\n+#endif\n+\ts0 = s;\n+\tlen = (se-s) + dlen + 6; /* 6 = sign + e+dd + trailing null */\n+\tif (blen < len)\n+\t\tgoto ret0;\n+\tbe = b + blen - 1;\n+\tif (sign)\n+\t\t*b++ = '-';\n+\tif (decpt <= -4 || decpt > se - s + 5) {\n+\t\t*b++ = *s++;\n+\t\tif (*s) {\n+#ifdef USE_LOCALE\n+\t\t\twhile((*b = *decimalpoint++))\n+\t\t\t\t++b;\n+#else\n+\t\t\t*b++ = '.';\n+#endif\n+\t\t\twhile((*b = *s++) !=0)\n+\t\t\t\tb++;\n+\t\t\t}\n+\t\t*b++ = 'e';\n+\t\t/* sprintf(b, \"%+.2d\", decpt - 1); */\n+\t\tif (--decpt < 0) {\n+\t\t\t*b++ = '-';\n+\t\t\tdecpt = -decpt;\n+\t\t\t}\n+\t\telse\n+\t\t\t*b++ = '+';\n+\t\tfor(j = 2, k = 10; 10*k <= decpt; j++, k *= 10){}\n+\t\tfor(;;) {\n+\t\t\ti = decpt / k;\n+\t\t\tif (b >= be)\n+\t\t\t\tgoto ret0;\n+\t\t\t*b++ = i + '0';\n+\t\t\tif (--j <= 0)\n+\t\t\t\tbreak;\n+\t\t\tdecpt -= i*k;\n+\t\t\tdecpt *= 10;\n+\t\t\t}\n+\t\t*b = 0;\n+\t\t}\n+\telse if (decpt <= 0) {\n+#ifdef USE_LOCALE\n+\t\twhile((*b = *decimalpoint++))\n+\t\t\t++b;\n+#else\n+\t\t*b++ = '.';\n+#endif\n+\t\tif (be < b - decpt + (se - s))\n+\t\t\tgoto ret0;\n+\t\tfor(; decpt < 0; decpt++)\n+\t\t\t*b++ = '0';\n+\t\twhile((*b = *s++) != 0)\n+\t\t\tb++;\n+\t\t}\n+\telse {\n+\t\twhile((*b = *s++) != 0) {\n+\t\t\tb++;\n+\t\t\tif (--decpt == 0 && *s) {\n+#ifdef USE_LOCALE\n+\t\t\t\twhile(*b = *decimalpoint++)\n+\t\t\t\t\t++b;\n+#else\n+\t\t\t\t*b++ = '.';\n+#endif\n+\t\t\t\t}\n+\t\t\t}\n+\t\tif (b + decpt > be) {\n+ ret0:\n+\t\t\tb = 0;\n+\t\t\tgoto ret;\n+\t\t\t}\n+\t\tfor(; decpt > 0; decpt--)\n+\t\t\t*b++ = '0';\n+\t\t*b = 0;\n+\t\t}\n+ ret:\n+\tfreedtoa(s0);\n+\treturn b;\n+ \t}"}, {"sha": "87eba8fb3190bcdd09d1b9cb508147a897042264", "filename": "libquadmath/gdtoa/gd_qnan.h", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fgd_qnan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fgd_qnan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fgdtoa%2Fgd_qnan.h?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,12 @@\n+#define f_QNAN 0xffc00000\n+#define d_QNAN0 0x0\n+#define d_QNAN1 0xfff80000\n+#define ld_QNAN0 0x0\n+#define ld_QNAN1 0xc0000000\n+#define ld_QNAN2 0xffff\n+#define ld_QNAN3 0x0\n+#define ldus_QNAN0 0x0\n+#define ldus_QNAN1 0x0\n+#define ldus_QNAN2 0x0\n+#define ldus_QNAN3 0xc000\n+#define ldus_QNAN4 0xffff"}, {"sha": "4ebdf41a6a31517ac09bafca5a6ea704cfef6462", "filename": "libquadmath/gdtoa/gdtoa.c", "status": "added", "additions": 745, "deletions": 0, "changes": 745, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fgdtoa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fgdtoa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fgdtoa%2Fgdtoa.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,745 @@\n+/****************************************************************\n+\n+The author of this software is David M. Gay.\n+\n+Copyright (C) 1998, 1999 by Lucent Technologies\n+All Rights Reserved\n+\n+Permission to use, copy, modify, and distribute this software and\n+its documentation for any purpose and without fee is hereby\n+granted, provided that the above copyright notice appear in all\n+copies and that both that the copyright notice and this\n+permission notice and warranty disclaimer appear in supporting\n+documentation, and that the name of Lucent or any of its entities\n+not be used in advertising or publicity pertaining to\n+distribution of the software without specific, written prior\n+permission.\n+\n+LUCENT DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,\n+INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.\n+IN NO EVENT SHALL LUCENT OR ANY OF ITS ENTITIES BE LIABLE FOR ANY\n+SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n+WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER\n+IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,\n+ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n+THIS SOFTWARE.\n+\n+****************************************************************/\n+\n+/* Please send bug reports to David M. Gay (dmg at acm dot org,\n+ * with \" at \" changed at \"@\" and \" dot \" changed to \".\").\t*/\n+\n+#include \"gdtoaimp.h\"\n+\n+ static Bigint *\n+#ifdef KR_headers\n+bitstob(bits, nbits, bbits) ULong *bits; int nbits; int *bbits;\n+#else\n+bitstob(ULong *bits, int nbits, int *bbits)\n+#endif\n+{\n+\tint i, k;\n+\tBigint *b;\n+\tULong *be, *x, *x0;\n+\n+\ti = ULbits;\n+\tk = 0;\n+\twhile(i < nbits) {\n+\t\ti <<= 1;\n+\t\tk++;\n+\t\t}\n+#ifndef Pack_32\n+\tif (!k)\n+\t\tk = 1;\n+#endif\n+\tb = Balloc(k);\n+\tbe = bits + ((nbits - 1) >> kshift);\n+\tx = x0 = b->x;\n+\tdo {\n+\t\t*x++ = *bits & ALL_ON;\n+#ifdef Pack_16\n+\t\t*x++ = (*bits >> 16) & ALL_ON;\n+#endif\n+\t\t} while(++bits <= be);\n+\ti = x - x0;\n+\twhile(!x0[--i])\n+\t\tif (!i) {\n+\t\t\tb->wds = 0;\n+\t\t\t*bbits = 0;\n+\t\t\tgoto ret;\n+\t\t\t}\n+\tb->wds = i + 1;\n+\t*bbits = i*ULbits + 32 - hi0bits(b->x[i]);\n+ ret:\n+\treturn b;\n+\t}\n+\n+/* dtoa for IEEE arithmetic (dmg): convert double to ASCII string.\n+ *\n+ * Inspired by \"How to Print Floating-Point Numbers Accurately\" by\n+ * Guy L. Steele, Jr. and Jon L. White [Proc. ACM SIGPLAN '90, pp. 112-126].\n+ *\n+ * Modifications:\n+ *\t1. Rather than iterating, we use a simple numeric overestimate\n+ *\t   to determine k = floor(log10(d)).  We scale relevant\n+ *\t   quantities using O(log2(k)) rather than O(k) multiplications.\n+ *\t2. For some modes > 2 (corresponding to ecvt and fcvt), we don't\n+ *\t   try to generate digits strictly left to right.  Instead, we\n+ *\t   compute with fewer bits and propagate the carry if necessary\n+ *\t   when rounding the final digit up.  This is often faster.\n+ *\t3. Under the assumption that input will be rounded nearest,\n+ *\t   mode 0 renders 1e23 as 1e23 rather than 9.999999999999999e22.\n+ *\t   That is, we allow equality in stopping tests when the\n+ *\t   round-nearest rule will give the same floating-point value\n+ *\t   as would satisfaction of the stopping test with strict\n+ *\t   inequality.\n+ *\t4. We remove common factors of powers of 2 from relevant\n+ *\t   quantities.\n+ *\t5. When converting floating-point integers less than 1e16,\n+ *\t   we use floating-point arithmetic rather than resorting\n+ *\t   to multiple-precision integers.\n+ *\t6. When asked to produce fewer than 15 digits, we first try\n+ *\t   to get by with floating-point arithmetic; we resort to\n+ *\t   multiple-precision integer arithmetic only if we cannot\n+ *\t   guarantee that the floating-point calculation has given\n+ *\t   the correctly rounded result.  For k requested digits and\n+ *\t   \"uniformly\" distributed input, the probability is\n+ *\t   something like 10^(k-15) that we must resort to the Long\n+ *\t   calculation.\n+ */\n+\n+ char *\n+gdtoa\n+#ifdef KR_headers\n+\t(fpi, be, bits, kindp, mode, ndigits, decpt, rve)\n+\tFPI *fpi; int be; ULong *bits;\n+\tint *kindp, mode, ndigits, *decpt; char **rve;\n+#else\n+\t(FPI *fpi, int be, ULong *bits, int *kindp, int mode, int ndigits, int *decpt, char **rve)\n+#endif\n+{\n+ /*\tArguments ndigits and decpt are similar to the second and third\n+\targuments of ecvt and fcvt; trailing zeros are suppressed from\n+\tthe returned string.  If not null, *rve is set to point\n+\tto the end of the return value.  If d is +-Infinity or NaN,\n+\tthen *decpt is set to 9999.\n+\n+\tmode:\n+\t\t0 ==> shortest string that yields d when read in\n+\t\t\tand rounded to nearest.\n+\t\t1 ==> like 0, but with Steele & White stopping rule;\n+\t\t\te.g. with IEEE P754 arithmetic , mode 0 gives\n+\t\t\t1e23 whereas mode 1 gives 9.999999999999999e22.\n+\t\t2 ==> max(1,ndigits) significant digits.  This gives a\n+\t\t\treturn value similar to that of ecvt, except\n+\t\t\tthat trailing zeros are suppressed.\n+\t\t3 ==> through ndigits past the decimal point.  This\n+\t\t\tgives a return value similar to that from fcvt,\n+\t\t\texcept that trailing zeros are suppressed, and\n+\t\t\tndigits can be negative.\n+\t\t4-9 should give the same return values as 2-3, i.e.,\n+\t\t\t4 <= mode <= 9 ==> same return as mode\n+\t\t\t2 + (mode & 1).  These modes are mainly for\n+\t\t\tdebugging; often they run slower but sometimes\n+\t\t\tfaster than modes 2-3.\n+\t\t4,5,8,9 ==> left-to-right digit generation.\n+\t\t6-9 ==> don't try fast floating-point estimate\n+\t\t\t(if applicable).\n+\n+\t\tValues of mode other than 0-9 are treated as mode 0.\n+\n+\t\tSufficient space is allocated to the return value\n+\t\tto hold the suppressed trailing zeros.\n+\t*/\n+\n+\tint bbits, b2, b5, be0, dig, i, ieps, ilim, ilim0, ilim1, inex;\n+\tint j, j1, k, k0, k_check, kind, leftright, m2, m5, nbits;\n+\tint rdir, s2, s5, spec_case, try_quick;\n+\tLong L;\n+\tBigint *b, *b1, *delta, *mlo, *mhi, *mhi1, *S;\n+\tdouble d2, ds;\n+\tchar *s, *s0;\n+\tU d, eps;\n+\n+#ifndef MULTIPLE_THREADS\n+\tif (dtoa_result) {\n+\t\tfreedtoa(dtoa_result);\n+\t\tdtoa_result = 0;\n+\t\t}\n+#endif\n+\tinex = 0;\n+\tkind = *kindp &= ~STRTOG_Inexact;\n+\tswitch(kind & STRTOG_Retmask) {\n+\t  case STRTOG_Zero:\n+\t\tgoto ret_zero;\n+\t  case STRTOG_Normal:\n+\t  case STRTOG_Denormal:\n+\t\tbreak;\n+\t  case STRTOG_Infinite:\n+\t\t*decpt = -32768;\n+\t\treturn nrv_alloc(\"Infinity\", rve, 8);\n+\t  case STRTOG_NaN:\n+\t\t*decpt = -32768;\n+\t\treturn nrv_alloc(\"NaN\", rve, 3);\n+\t  default:\n+\t\treturn 0;\n+\t  }\n+\tb = bitstob(bits, nbits = fpi->nbits, &bbits);\n+\tbe0 = be;\n+\tif ( (i = trailz(b)) !=0) {\n+\t\trshift(b, i);\n+\t\tbe += i;\n+\t\tbbits -= i;\n+\t\t}\n+\tif (!b->wds) {\n+\t\tBfree(b);\n+ ret_zero:\n+\t\t*decpt = 1;\n+\t\treturn nrv_alloc(\"0\", rve, 1);\n+\t\t}\n+\n+\tdval(&d) = b2d(b, &i);\n+\ti = be + bbits - 1;\n+\tword0(&d) &= Frac_mask1;\n+\tword0(&d) |= Exp_11;\n+#ifdef IBM\n+\tif ( (j = 11 - hi0bits(word0(&d) & Frac_mask)) !=0)\n+\t\tdval(&d) /= 1 << j;\n+#endif\n+\n+\t/* log(x)\t~=~ log(1.5) + (x-1.5)/1.5\n+\t * log10(x)\t =  log(x) / log(10)\n+\t *\t\t~=~ log(1.5)/log(10) + (x-1.5)/(1.5*log(10))\n+\t * log10(&d) = (i-Bias)*log(2)/log(10) + log10(d2)\n+\t *\n+\t * This suggests computing an approximation k to log10(&d) by\n+\t *\n+\t * k = (i - Bias)*0.301029995663981\n+\t *\t+ ( (d2-1.5)*0.289529654602168 + 0.176091259055681 );\n+\t *\n+\t * We want k to be too large rather than too small.\n+\t * The error in the first-order Taylor series approximation\n+\t * is in our favor, so we just round up the constant enough\n+\t * to compensate for any error in the multiplication of\n+\t * (i - Bias) by 0.301029995663981; since |i - Bias| <= 1077,\n+\t * and 1077 * 0.30103 * 2^-52 ~=~ 7.2e-14,\n+\t * adding 1e-13 to the constant term more than suffices.\n+\t * Hence we adjust the constant term to 0.1760912590558.\n+\t * (We could get a more accurate k by invoking log10,\n+\t *  but this is probably not worthwhile.)\n+\t */\n+#ifdef IBM\n+\ti <<= 2;\n+\ti += j;\n+#endif\n+\tds = (dval(&d)-1.5)*0.289529654602168 + 0.1760912590558 + i*0.301029995663981;\n+\n+\t/* correct assumption about exponent range */\n+\tif ((j = i) < 0)\n+\t\tj = -j;\n+\tif ((j -= 1077) > 0)\n+\t\tds += j * 7e-17;\n+\n+\tk = (int)ds;\n+\tif (ds < 0. && ds != k)\n+\t\tk--;\t/* want k = floor(ds) */\n+\tk_check = 1;\n+#ifdef IBM\n+\tj = be + bbits - 1;\n+\tif ( (j1 = j & 3) !=0)\n+\t\tdval(&d) *= 1 << j1;\n+\tword0(&d) += j << Exp_shift - 2 & Exp_mask;\n+#else\n+\tword0(&d) += (be + bbits - 1) << Exp_shift;\n+#endif\n+\tif (k >= 0 && k <= Ten_pmax) {\n+\t\tif (dval(&d) < tens[k])\n+\t\t\tk--;\n+\t\tk_check = 0;\n+\t\t}\n+\tj = bbits - i - 1;\n+\tif (j >= 0) {\n+\t\tb2 = 0;\n+\t\ts2 = j;\n+\t\t}\n+\telse {\n+\t\tb2 = -j;\n+\t\ts2 = 0;\n+\t\t}\n+\tif (k >= 0) {\n+\t\tb5 = 0;\n+\t\ts5 = k;\n+\t\ts2 += k;\n+\t\t}\n+\telse {\n+\t\tb2 -= k;\n+\t\tb5 = -k;\n+\t\ts5 = 0;\n+\t\t}\n+\tif (mode < 0 || mode > 9)\n+\t\tmode = 0;\n+\ttry_quick = 1;\n+\tif (mode > 5) {\n+\t\tmode -= 4;\n+\t\ttry_quick = 0;\n+\t\t}\n+\tleftright = 1;\n+\tilim = ilim1 = -1;\t/* Values for cases 0 and 1; done here to */\n+\t\t\t\t/* silence erroneous \"gcc -Wall\" warning. */\n+\tswitch(mode) {\n+\t\tcase 0:\n+\t\tcase 1:\n+\t\t\ti = (int)(nbits * .30103) + 3;\n+\t\t\tndigits = 0;\n+\t\t\tbreak;\n+\t\tcase 2:\n+\t\t\tleftright = 0;\n+\t\t\t/* no break */\n+\t\tcase 4:\n+\t\t\tif (ndigits <= 0)\n+\t\t\t\tndigits = 1;\n+\t\t\tilim = ilim1 = i = ndigits;\n+\t\t\tbreak;\n+\t\tcase 3:\n+\t\t\tleftright = 0;\n+\t\t\t/* no break */\n+\t\tcase 5:\n+\t\t\ti = ndigits + k + 1;\n+\t\t\tilim = i;\n+\t\t\tilim1 = i - 1;\n+\t\t\tif (i <= 0)\n+\t\t\t\ti = 1;\n+\t\t}\n+\ts = s0 = rv_alloc(i);\n+\n+\tif ( (rdir = fpi->rounding - 1) !=0) {\n+\t\tif (rdir < 0)\n+\t\t\trdir = 2;\n+\t\tif (kind & STRTOG_Neg)\n+\t\t\trdir = 3 - rdir;\n+\t\t}\n+\n+\t/* Now rdir = 0 ==> round near, 1 ==> round up, 2 ==> round down. */\n+\n+\tif (ilim >= 0 && ilim <= Quick_max && try_quick && !rdir\n+#ifndef IMPRECISE_INEXACT\n+\t\t&& k == 0\n+#endif\n+\t\t\t\t\t\t\t\t) {\n+\n+\t\t/* Try to get by with floating-point arithmetic. */\n+\n+\t\ti = 0;\n+\t\td2 = dval(&d);\n+#ifdef IBM\n+\t\tif ( (j = 11 - hi0bits(word0(&d) & Frac_mask)) !=0)\n+\t\t\tdval(&d) /= 1 << j;\n+#endif\n+\t\tk0 = k;\n+\t\tilim0 = ilim;\n+\t\tieps = 2; /* conservative */\n+\t\tif (k > 0) {\n+\t\t\tds = tens[k&0xf];\n+\t\t\tj = k >> 4;\n+\t\t\tif (j & Bletch) {\n+\t\t\t\t/* prevent overflows */\n+\t\t\t\tj &= Bletch - 1;\n+\t\t\t\tdval(&d) /= bigtens[n_bigtens-1];\n+\t\t\t\tieps++;\n+\t\t\t\t}\n+\t\t\tfor(; j; j >>= 1, i++)\n+\t\t\t\tif (j & 1) {\n+\t\t\t\t\tieps++;\n+\t\t\t\t\tds *= bigtens[i];\n+\t\t\t\t\t}\n+\t\t\t}\n+\t\telse  {\n+\t\t\tds = 1.;\n+\t\t\tif ( (j1 = -k) !=0) {\n+\t\t\t\tdval(&d) *= tens[j1 & 0xf];\n+\t\t\t\tfor(j = j1 >> 4; j; j >>= 1, i++)\n+\t\t\t\t\tif (j & 1) {\n+\t\t\t\t\t\tieps++;\n+\t\t\t\t\t\tdval(&d) *= bigtens[i];\n+\t\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\tif (k_check && dval(&d) < 1. && ilim > 0) {\n+\t\t\tif (ilim1 <= 0)\n+\t\t\t\tgoto fast_failed;\n+\t\t\tilim = ilim1;\n+\t\t\tk--;\n+\t\t\tdval(&d) *= 10.;\n+\t\t\tieps++;\n+\t\t\t}\n+\t\tdval(&eps) = ieps*dval(&d) + 7.;\n+\t\tword0(&eps) -= (P-1)*Exp_msk1;\n+\t\tif (ilim == 0) {\n+\t\t\tS = mhi = 0;\n+\t\t\tdval(&d) -= 5.;\n+\t\t\tif (dval(&d) > dval(&eps))\n+\t\t\t\tgoto one_digit;\n+\t\t\tif (dval(&d) < -dval(&eps))\n+\t\t\t\tgoto no_digits;\n+\t\t\tgoto fast_failed;\n+\t\t\t}\n+#ifndef No_leftright\n+\t\tif (leftright) {\n+\t\t\t/* Use Steele & White method of only\n+\t\t\t * generating digits needed.\n+\t\t\t */\n+\t\t\tdval(&eps) = ds*0.5/tens[ilim-1] - dval(&eps);\n+\t\t\tfor(i = 0;;) {\n+\t\t\t\tL = (Long)(dval(&d)/ds);\n+\t\t\t\tdval(&d) -= L*ds;\n+\t\t\t\t*s++ = '0' + (int)L;\n+\t\t\t\tif (dval(&d) < dval(&eps)) {\n+\t\t\t\t\tif (dval(&d))\n+\t\t\t\t\t\tinex = STRTOG_Inexlo;\n+\t\t\t\t\tgoto ret1;\n+\t\t\t\t\t}\n+\t\t\t\tif (ds - dval(&d) < dval(&eps))\n+\t\t\t\t\tgoto bump_up;\n+\t\t\t\tif (++i >= ilim)\n+\t\t\t\t\tbreak;\n+\t\t\t\tdval(&eps) *= 10.;\n+\t\t\t\tdval(&d) *= 10.;\n+\t\t\t\t}\n+\t\t\t}\n+\t\telse {\n+#endif\n+\t\t\t/* Generate ilim digits, then fix them up. */\n+\t\t\tdval(&eps) *= tens[ilim-1];\n+\t\t\tfor(i = 1;; i++, dval(&d) *= 10.) {\n+\t\t\t\tif ( (L = (Long)(dval(&d)/ds)) !=0)\n+\t\t\t\t\tdval(&d) -= L*ds;\n+\t\t\t\t*s++ = '0' + (int)L;\n+\t\t\t\tif (i == ilim) {\n+\t\t\t\t\tds *= 0.5;\n+\t\t\t\t\tif (dval(&d) > ds + dval(&eps))\n+\t\t\t\t\t\tgoto bump_up;\n+\t\t\t\t\telse if (dval(&d) < ds - dval(&eps)) {\n+\t\t\t\t\t\tif (dval(&d))\n+\t\t\t\t\t\t\tinex = STRTOG_Inexlo;\n+\t\t\t\t\t\tgoto clear_trailing0;\n+\t\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+#ifndef No_leftright\n+\t\t\t}\n+#endif\n+ fast_failed:\n+\t\ts = s0;\n+\t\tdval(&d) = d2;\n+\t\tk = k0;\n+\t\tilim = ilim0;\n+\t\t}\n+\n+\t/* Do we have a \"small\" integer? */\n+\n+\tif (be >= 0 && k <= Int_max) {\n+\t\t/* Yes. */\n+\t\tds = tens[k];\n+\t\tif (ndigits < 0 && ilim <= 0) {\n+\t\t\tS = mhi = 0;\n+\t\t\tif (ilim < 0 || dval(&d) <= 5*ds)\n+\t\t\t\tgoto no_digits;\n+\t\t\tgoto one_digit;\n+\t\t\t}\n+\t\tfor(i = 1;; i++, dval(&d) *= 10.) {\n+\t\t\tL = dval(&d) / ds;\n+\t\t\tdval(&d) -= L*ds;\n+#ifdef Check_FLT_ROUNDS\n+\t\t\t/* If FLT_ROUNDS == 2, L will usually be high by 1 */\n+\t\t\tif (dval(&d) < 0) {\n+\t\t\t\tL--;\n+\t\t\t\tdval(&d) += ds;\n+\t\t\t\t}\n+#endif\n+\t\t\t*s++ = '0' + (int)L;\n+\t\t\tif (dval(&d) == 0.)\n+\t\t\t\tbreak;\n+\t\t\tif (i == ilim) {\n+\t\t\t\tif (rdir) {\n+\t\t\t\t\tif (rdir == 1)\n+\t\t\t\t\t\tgoto bump_up;\n+\t\t\t\t\tinex = STRTOG_Inexlo;\n+\t\t\t\t\tgoto ret1;\n+\t\t\t\t\t}\n+\t\t\t\tdval(&d) += dval(&d);\n+\t\t\t\tif (dval(&d) > ds || (dval(&d) == ds && L & 1)) {\n+ bump_up:\n+\t\t\t\t\tinex = STRTOG_Inexhi;\n+\t\t\t\t\twhile(*--s == '9')\n+\t\t\t\t\t\tif (s == s0) {\n+\t\t\t\t\t\t\tk++;\n+\t\t\t\t\t\t\t*s = '0';\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t++*s++;\n+\t\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tinex = STRTOG_Inexlo;\n+ clear_trailing0:\n+\t\t\t\t\twhile(*--s == '0'){}\n+\t\t\t\t\t++s;\n+\t\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\tgoto ret1;\n+\t\t}\n+\n+\tm2 = b2;\n+\tm5 = b5;\n+\tmhi = mlo = 0;\n+\tif (leftright) {\n+\t\tif (mode < 2) {\n+\t\t\ti = nbits - bbits;\n+\t\t\tif (be - i++ < fpi->emin)\n+\t\t\t\t/* denormal */\n+\t\t\t\ti = be - fpi->emin + 1;\n+\t\t\t}\n+\t\telse {\n+\t\t\tj = ilim - 1;\n+\t\t\tif (m5 >= j)\n+\t\t\t\tm5 -= j;\n+\t\t\telse {\n+\t\t\t\ts5 += j -= m5;\n+\t\t\t\tb5 += j;\n+\t\t\t\tm5 = 0;\n+\t\t\t\t}\n+\t\t\tif ((i = ilim) < 0) {\n+\t\t\t\tm2 -= i;\n+\t\t\t\ti = 0;\n+\t\t\t\t}\n+\t\t\t}\n+\t\tb2 += i;\n+\t\ts2 += i;\n+\t\tmhi = i2b(1);\n+\t\t}\n+\tif (m2 > 0 && s2 > 0) {\n+\t\ti = m2 < s2 ? m2 : s2;\n+\t\tb2 -= i;\n+\t\tm2 -= i;\n+\t\ts2 -= i;\n+\t\t}\n+\tif (b5 > 0) {\n+\t\tif (leftright) {\n+\t\t\tif (m5 > 0) {\n+\t\t\t\tmhi = pow5mult(mhi, m5);\n+\t\t\t\tb1 = mult(mhi, b);\n+\t\t\t\tBfree(b);\n+\t\t\t\tb = b1;\n+\t\t\t\t}\n+\t\t\tif ( (j = b5 - m5) !=0)\n+\t\t\t\tb = pow5mult(b, j);\n+\t\t\t}\n+\t\telse\n+\t\t\tb = pow5mult(b, b5);\n+\t\t}\n+\tS = i2b(1);\n+\tif (s5 > 0)\n+\t\tS = pow5mult(S, s5);\n+\n+\t/* Check for special case that d is a normalized power of 2. */\n+\n+\tspec_case = 0;\n+\tif (mode < 2) {\n+\t\tif (bbits == 1 && be0 > fpi->emin + 1) {\n+\t\t\t/* The special case */\n+\t\t\tb2++;\n+\t\t\ts2++;\n+\t\t\tspec_case = 1;\n+\t\t\t}\n+\t\t}\n+\n+\t/* Arrange for convenient computation of quotients:\n+\t * shift left if necessary so divisor has 4 leading 0 bits.\n+\t *\n+\t * Perhaps we should just compute leading 28 bits of S once\n+\t * and for all and pass them and a shift to quorem, so it\n+\t * can do shifts and ors to compute the numerator for q.\n+\t */\n+\ti = ((s5 ? hi0bits(S->x[S->wds-1]) : ULbits - 1) - s2 - 4) & kmask;\n+\tm2 += i;\n+\tif ((b2 += i) > 0)\n+\t\tb = lshift(b, b2);\n+\tif ((s2 += i) > 0)\n+\t\tS = lshift(S, s2);\n+\tif (k_check) {\n+\t\tif (cmp(b,S) < 0) {\n+\t\t\tk--;\n+\t\t\tb = multadd(b, 10, 0);\t/* we botched the k estimate */\n+\t\t\tif (leftright)\n+\t\t\t\tmhi = multadd(mhi, 10, 0);\n+\t\t\tilim = ilim1;\n+\t\t\t}\n+\t\t}\n+\tif (ilim <= 0 && mode > 2) {\n+\t\tif (ilim < 0 || cmp(b,S = multadd(S,5,0)) <= 0) {\n+\t\t\t/* no digits, fcvt style */\n+ no_digits:\n+\t\t\tk = -1 - ndigits;\n+\t\t\tinex = STRTOG_Inexlo;\n+\t\t\tgoto ret;\n+\t\t\t}\n+ one_digit:\n+\t\tinex = STRTOG_Inexhi;\n+\t\t*s++ = '1';\n+\t\tk++;\n+\t\tgoto ret;\n+\t\t}\n+\tif (leftright) {\n+\t\tif (m2 > 0)\n+\t\t\tmhi = lshift(mhi, m2);\n+\n+\t\t/* Compute mlo -- check for special case\n+\t\t * that d is a normalized power of 2.\n+\t\t */\n+\n+\t\tmlo = mhi;\n+\t\tif (spec_case) {\n+\t\t\tmhi = Balloc(mhi->k);\n+\t\t\tBcopy(mhi, mlo);\n+\t\t\tmhi = lshift(mhi, 1);\n+\t\t\t}\n+\n+\t\tfor(i = 1;;i++) {\n+\t\t\tdig = quorem(b,S) + '0';\n+\t\t\t/* Do we yet have the shortest decimal string\n+\t\t\t * that will round to d?\n+\t\t\t */\n+\t\t\tj = cmp(b, mlo);\n+\t\t\tdelta = diff(S, mhi);\n+\t\t\tj1 = delta->sign ? 1 : cmp(b, delta);\n+\t\t\tBfree(delta);\n+#ifndef ROUND_BIASED\n+\t\t\tif (j1 == 0 && !mode && !(bits[0] & 1) && !rdir) {\n+\t\t\t\tif (dig == '9')\n+\t\t\t\t\tgoto round_9_up;\n+\t\t\t\tif (j <= 0) {\n+\t\t\t\t\tif (b->wds > 1 || b->x[0])\n+\t\t\t\t\t\tinex = STRTOG_Inexlo;\n+\t\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tdig++;\n+\t\t\t\t\tinex = STRTOG_Inexhi;\n+\t\t\t\t\t}\n+\t\t\t\t*s++ = dig;\n+\t\t\t\tgoto ret;\n+\t\t\t\t}\n+#endif\n+\t\t\tif (j < 0 || (j == 0 && !mode\n+#ifndef ROUND_BIASED\n+\t\t\t\t\t\t\t&& !(bits[0] & 1)\n+#endif\n+\t\t\t\t\t)) {\n+\t\t\t\tif (rdir && (b->wds > 1 || b->x[0])) {\n+\t\t\t\t\tif (rdir == 2) {\n+\t\t\t\t\t\tinex = STRTOG_Inexlo;\n+\t\t\t\t\t\tgoto accept;\n+\t\t\t\t\t\t}\n+\t\t\t\t\twhile (cmp(S,mhi) > 0) {\n+\t\t\t\t\t\t*s++ = dig;\n+\t\t\t\t\t\tmhi1 = multadd(mhi, 10, 0);\n+\t\t\t\t\t\tif (mlo == mhi)\n+\t\t\t\t\t\t\tmlo = mhi1;\n+\t\t\t\t\t\tmhi = mhi1;\n+\t\t\t\t\t\tb = multadd(b, 10, 0);\n+\t\t\t\t\t\tdig = quorem(b,S) + '0';\n+\t\t\t\t\t\t}\n+\t\t\t\t\tif (dig++ == '9')\n+\t\t\t\t\t\tgoto round_9_up;\n+\t\t\t\t\tinex = STRTOG_Inexhi;\n+\t\t\t\t\tgoto accept;\n+\t\t\t\t\t}\n+\t\t\t\tif (j1 > 0) {\n+\t\t\t\t\tb = lshift(b, 1);\n+\t\t\t\t\tj1 = cmp(b, S);\n+\t\t\t\t\tif ((j1 > 0 || (j1 == 0 && dig & 1))\n+\t\t\t\t\t&& dig++ == '9')\n+\t\t\t\t\t\tgoto round_9_up;\n+\t\t\t\t\tinex = STRTOG_Inexhi;\n+\t\t\t\t\t}\n+\t\t\t\tif (b->wds > 1 || b->x[0])\n+\t\t\t\t\tinex = STRTOG_Inexlo;\n+ accept:\n+\t\t\t\t*s++ = dig;\n+\t\t\t\tgoto ret;\n+\t\t\t\t}\n+\t\t\tif (j1 > 0 && rdir != 2) {\n+\t\t\t\tif (dig == '9') { /* possible if i == 1 */\n+ round_9_up:\n+\t\t\t\t\t*s++ = '9';\n+\t\t\t\t\tinex = STRTOG_Inexhi;\n+\t\t\t\t\tgoto roundoff;\n+\t\t\t\t\t}\n+\t\t\t\tinex = STRTOG_Inexhi;\n+\t\t\t\t*s++ = dig + 1;\n+\t\t\t\tgoto ret;\n+\t\t\t\t}\n+\t\t\t*s++ = dig;\n+\t\t\tif (i == ilim)\n+\t\t\t\tbreak;\n+\t\t\tb = multadd(b, 10, 0);\n+\t\t\tif (mlo == mhi)\n+\t\t\t\tmlo = mhi = multadd(mhi, 10, 0);\n+\t\t\telse {\n+\t\t\t\tmlo = multadd(mlo, 10, 0);\n+\t\t\t\tmhi = multadd(mhi, 10, 0);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\telse\n+\t\tfor(i = 1;; i++) {\n+\t\t\t*s++ = dig = quorem(b,S) + '0';\n+\t\t\tif (i >= ilim)\n+\t\t\t\tbreak;\n+\t\t\tb = multadd(b, 10, 0);\n+\t\t\t}\n+\n+\t/* Round off last digit */\n+\n+\tif (rdir) {\n+\t\tif (rdir == 2 || (b->wds <= 1 && !b->x[0]))\n+\t\t\tgoto chopzeros;\n+\t\tgoto roundoff;\n+\t\t}\n+\tb = lshift(b, 1);\n+\tj = cmp(b, S);\n+\tif (j > 0 || (j == 0 && dig & 1)) {\n+ roundoff:\n+\t\tinex = STRTOG_Inexhi;\n+\t\twhile(*--s == '9')\n+\t\t\tif (s == s0) {\n+\t\t\t\tk++;\n+\t\t\t\t*s++ = '1';\n+\t\t\t\tgoto ret;\n+\t\t\t\t}\n+\t\t++*s++;\n+\t\t}\n+\telse {\n+ chopzeros:\n+\t\tif (b->wds > 1 || b->x[0])\n+\t\t\tinex = STRTOG_Inexlo;\n+\t\twhile(*--s == '0'){}\n+\t\t++s;\n+\t\t}\n+ ret:\n+\tBfree(S);\n+\tif (mhi) {\n+\t\tif (mlo && mlo != mhi)\n+\t\t\tBfree(mlo);\n+\t\tBfree(mhi);\n+\t\t}\n+ ret1:\n+\tBfree(b);\n+\t*s = 0;\n+\t*decpt = k + 1;\n+\tif (rve)\n+\t\t*rve = s;\n+\t*kindp |= inex;\n+\treturn s0;\n+\t}"}, {"sha": "1a60b6cdd6ddace79ca71fb1c7d1ad921017229b", "filename": "libquadmath/gdtoa/gdtoa.h", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fgdtoa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fgdtoa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fgdtoa%2Fgdtoa.h?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,154 @@\n+/****************************************************************\n+\n+The author of this software is David M. Gay.\n+\n+Copyright (C) 1998 by Lucent Technologies\n+All Rights Reserved\n+\n+Permission to use, copy, modify, and distribute this software and\n+its documentation for any purpose and without fee is hereby\n+granted, provided that the above copyright notice appear in all\n+copies and that both that the copyright notice and this\n+permission notice and warranty disclaimer appear in supporting\n+documentation, and that the name of Lucent or any of its entities\n+not be used in advertising or publicity pertaining to\n+distribution of the software without specific, written prior\n+permission.\n+\n+LUCENT DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,\n+INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.\n+IN NO EVENT SHALL LUCENT OR ANY OF ITS ENTITIES BE LIABLE FOR ANY\n+SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n+WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER\n+IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,\n+ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n+THIS SOFTWARE.\n+\n+****************************************************************/\n+\n+/* Please send bug reports to David M. Gay (dmg at acm dot org,\n+ * with \" at \" changed at \"@\" and \" dot \" changed to \".\").\t*/\n+\n+#ifndef GDTOA_H_INCLUDED\n+#define GDTOA_H_INCLUDED\n+\n+#include \"arith.h\"\n+#include <stddef.h> /* for size_t */\n+\n+#ifndef Long\n+#define Long long\n+#endif\n+#ifndef ULong\n+typedef unsigned Long ULong;\n+#endif\n+#ifndef UShort\n+typedef unsigned short UShort;\n+#endif\n+\n+#ifndef ANSI\n+#ifdef KR_headers\n+#define ANSI(x) ()\n+#define Void /*nothing*/\n+#else\n+#define ANSI(x) x\n+#define Void void\n+#endif\n+#endif /* ANSI */\n+\n+#ifndef CONST\n+#ifdef KR_headers\n+#define CONST /* blank */\n+#else\n+#define CONST const\n+#endif\n+#endif /* CONST */\n+\n+ enum {\t/* return values from strtodg */\n+\tSTRTOG_Zero\t= 0,\n+\tSTRTOG_Normal\t= 1,\n+\tSTRTOG_Denormal\t= 2,\n+\tSTRTOG_Infinite\t= 3,\n+\tSTRTOG_NaN\t= 4,\n+\tSTRTOG_NaNbits\t= 5,\n+\tSTRTOG_NoNumber\t= 6,\n+\tSTRTOG_Retmask\t= 7,\n+\n+\t/* The following may be or-ed into one of the above values. */\n+\n+\tSTRTOG_Neg\t= 0x08, /* does not affect STRTOG_Inexlo or STRTOG_Inexhi */\n+\tSTRTOG_Inexlo\t= 0x10,\t/* returned result rounded toward zero */\n+\tSTRTOG_Inexhi\t= 0x20, /* returned result rounded away from zero */\n+\tSTRTOG_Inexact\t= 0x30,\n+\tSTRTOG_Underflow= 0x40,\n+\tSTRTOG_Overflow\t= 0x80\n+\t};\n+\n+ typedef struct\n+FPI {\n+\tint nbits;\n+\tint emin;\n+\tint emax;\n+\tint rounding;\n+\tint sudden_underflow;\n+\t} FPI;\n+\n+enum {\t/* FPI.rounding values: same as FLT_ROUNDS */\n+\tFPI_Round_zero = 0,\n+\tFPI_Round_near = 1,\n+\tFPI_Round_up = 2,\n+\tFPI_Round_down = 3\n+\t};\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+extern char* dtoa  ANSI((double d, int mode, int ndigits, int *decpt,\n+\t\t\tint *sign, char **rve));\n+extern char* gdtoa ANSI((FPI *fpi, int be, ULong *bits, int *kindp,\n+\t\t\tint mode, int ndigits, int *decpt, char **rve));\n+extern void freedtoa ANSI((char*));\n+extern float  strtof ANSI((CONST char *, char **));\n+extern double strtod ANSI((CONST char *, char **));\n+extern int strtodg ANSI((CONST char*, char**, FPI*, Long*, ULong*));\n+\n+extern char*\tg_ddfmt  ANSI((char*, double*, int, size_t));\n+extern char*\tg_dfmt   ANSI((char*, double*, int, size_t));\n+extern char*\tg_ffmt   ANSI((char*, float*,  int, size_t));\n+extern char*\tg_Qfmt   ANSI((char*, void*,   int, size_t));\n+extern char*\tg_xfmt   ANSI((char*, void*,   int, size_t));\n+extern char*\tg_xLfmt  ANSI((char*, void*,   int, size_t));\n+\n+extern int\tstrtoId  ANSI((CONST char*, char**, double*, double*));\n+extern int\tstrtoIdd ANSI((CONST char*, char**, double*, double*));\n+extern int\tstrtoIf  ANSI((CONST char*, char**, float*, float*));\n+extern int\tstrtoIQ  ANSI((CONST char*, char**, void*, void*));\n+extern int\tstrtoIx  ANSI((CONST char*, char**, void*, void*));\n+extern int\tstrtoIxL ANSI((CONST char*, char**, void*, void*));\n+extern int\tstrtord  ANSI((CONST char*, char**, int, double*));\n+extern int\tstrtordd ANSI((CONST char*, char**, int, double*));\n+extern int\tstrtorf  ANSI((CONST char*, char**, int, float*));\n+extern int\tstrtorQ  ANSI((CONST char*, char**, int, void*));\n+extern int\tstrtorx  ANSI((CONST char*, char**, int, void*));\n+extern int\tstrtorxL ANSI((CONST char*, char**, int, void*));\n+#if 1\n+extern int\tstrtodI  ANSI((CONST char*, char**, double*));\n+extern int\tstrtopd  ANSI((CONST char*, char**, double*));\n+extern int\tstrtopdd ANSI((CONST char*, char**, double*));\n+extern int\tstrtopf  ANSI((CONST char*, char**, float*));\n+extern int\tquadmath_strtopQ  ANSI((CONST char*, char**, void*));\n+extern int\tstrtopx  ANSI((CONST char*, char**, void*));\n+extern int\tstrtopxL ANSI((CONST char*, char**, void*));\n+#else\n+#define strtopd(s,se,x) strtord(s,se,1,x)\n+#define strtopdd(s,se,x) strtordd(s,se,1,x)\n+#define strtopf(s,se,x) strtorf(s,se,1,x)\n+#define strtopQ(s,se,x) strtorQ(s,se,1,x)\n+#define strtopx(s,se,x) strtorx(s,se,1,x)\n+#define strtopxL(s,se,x) strtorxL(s,se,1,x)\n+#endif\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+#endif /* GDTOA_H_INCLUDED */"}, {"sha": "33e5f9e5342c8568e487b6a43115ce8091e35b7d", "filename": "libquadmath/gdtoa/gdtoa_fltrnds.h", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fgdtoa_fltrnds.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fgdtoa_fltrnds.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fgdtoa%2Fgdtoa_fltrnds.h?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,18 @@\n+\tFPI *fpi, fpi1;\n+\tint Rounding;\n+#ifdef Trust_FLT_ROUNDS /*{{ only define this if FLT_ROUNDS really works! */\n+\tRounding = Flt_Rounds;\n+#else /*}{*/\n+\tRounding = 1;\n+\tswitch(fegetround()) {\n+\t  case FE_TOWARDZERO:\tRounding = 0; break;\n+\t  case FE_UPWARD:\tRounding = 2; break;\n+\t  case FE_DOWNWARD:\tRounding = 3;\n+\t  }\n+#endif /*}}*/\n+\tfpi = &fpi0;\n+\tif (Rounding != 1) {\n+\t\tfpi1 = fpi0;\n+\t\tfpi = &fpi1;\n+\t\tfpi1.rounding = Rounding;\n+\t\t}"}, {"sha": "2c188d66a0a4cc36ad07fa949da2fca686d8ed29", "filename": "libquadmath/gdtoa/gdtoaimp.h", "status": "added", "additions": 616, "deletions": 0, "changes": 616, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fgdtoaimp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fgdtoaimp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fgdtoa%2Fgdtoaimp.h?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,616 @@\n+/****************************************************************\n+\n+The author of this software is David M. Gay.\n+\n+Copyright (C) 1998-2000 by Lucent Technologies\n+All Rights Reserved\n+\n+Permission to use, copy, modify, and distribute this software and\n+its documentation for any purpose and without fee is hereby\n+granted, provided that the above copyright notice appear in all\n+copies and that both that the copyright notice and this\n+permission notice and warranty disclaimer appear in supporting\n+documentation, and that the name of Lucent or any of its entities\n+not be used in advertising or publicity pertaining to\n+distribution of the software without specific, written prior\n+permission.\n+\n+LUCENT DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,\n+INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.\n+IN NO EVENT SHALL LUCENT OR ANY OF ITS ENTITIES BE LIABLE FOR ANY\n+SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n+WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER\n+IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,\n+ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n+THIS SOFTWARE.\n+\n+****************************************************************/\n+\n+/* This is a variation on dtoa.c that converts arbitary binary\n+   floating-point formats to and from decimal notation.  It uses\n+   double-precision arithmetic internally, so there are still\n+   various #ifdefs that adapt the calculations to the native\n+   double-precision arithmetic (any of IEEE, VAX D_floating,\n+   or IBM mainframe arithmetic).\n+\n+   Please send bug reports to David M. Gay (dmg at acm dot org,\n+   with \" at \" changed at \"@\" and \" dot \" changed to \".\").\n+ */\n+\n+/* On a machine with IEEE extended-precision registers, it is\n+ * necessary to specify double-precision (53-bit) rounding precision\n+ * before invoking strtod or dtoa.  If the machine uses (the equivalent\n+ * of) Intel 80x87 arithmetic, the call\n+ *\t_control87(PC_53, MCW_PC);\n+ * does this with many compilers.  Whether this or another call is\n+ * appropriate depends on the compiler; for this to work, it may be\n+ * necessary to #include \"float.h\" or another system-dependent header\n+ * file.\n+ */\n+\n+/* strtod for IEEE-, VAX-, and IBM-arithmetic machines.\n+ *\n+ * This strtod returns a nearest machine number to the input decimal\n+ * string (or sets errno to ERANGE).  With IEEE arithmetic, ties are\n+ * broken by the IEEE round-even rule.  Otherwise ties are broken by\n+ * biased rounding (add half and chop).\n+ *\n+ * Inspired loosely by William D. Clinger's paper \"How to Read Floating\n+ * Point Numbers Accurately\" [Proc. ACM SIGPLAN '90, pp. 112-126].\n+ *\n+ * Modifications:\n+ *\n+ *\t1. We only require IEEE, IBM, or VAX double-precision\n+ *\t\tarithmetic (not IEEE double-extended).\n+ *\t2. We get by with floating-point arithmetic in a case that\n+ *\t\tClinger missed -- when we're computing d * 10^n\n+ *\t\tfor a small integer d and the integer n is not too\n+ *\t\tmuch larger than 22 (the maximum integer k for which\n+ *\t\twe can represent 10^k exactly), we may be able to\n+ *\t\tcompute (d*10^k) * 10^(e-k) with just one roundoff.\n+ *\t3. Rather than a bit-at-a-time adjustment of the binary\n+ *\t\tresult in the hard case, we use floating-point\n+ *\t\tarithmetic to determine the adjustment to within\n+ *\t\tone bit; only in really hard cases do we need to\n+ *\t\tcompute a second residual.\n+ *\t4. Because of 3., we don't need a large table of powers of 10\n+ *\t\tfor ten-to-e (just some small tables, e.g. of 10^k\n+ *\t\tfor 0 <= k <= 22).\n+ */\n+\n+/*\n+ * #define IEEE_8087 for IEEE-arithmetic machines where the least\n+ *\tsignificant byte has the lowest address.\n+ * #define IEEE_MC68k for IEEE-arithmetic machines where the most\n+ *\tsignificant byte has the lowest address.\n+ * #define Long int on machines with 32-bit ints and 64-bit longs.\n+ * #define Sudden_Underflow for IEEE-format machines without gradual\n+ *\tunderflow (i.e., that flush to zero on underflow).\n+ * #define IBM for IBM mainframe-style floating-point arithmetic.\n+ * #define VAX for VAX-style floating-point arithmetic (D_floating).\n+ * #define No_leftright to omit left-right logic in fast floating-point\n+ *\tcomputation of dtoa.\n+ * #define Check_FLT_ROUNDS if FLT_ROUNDS can assume the values 2 or 3.\n+ * #define RND_PRODQUOT to use rnd_prod and rnd_quot (assembly routines\n+ *\tthat use extended-precision instructions to compute rounded\n+ *\tproducts and quotients) with IBM.\n+ * #define ROUND_BIASED for IEEE-format with biased rounding.\n+ * #define Inaccurate_Divide for IEEE-format with correctly rounded\n+ *\tproducts but inaccurate quotients, e.g., for Intel i860.\n+ * #define NO_LONG_LONG on machines that do not have a \"long long\"\n+ *\tinteger type (of >= 64 bits).  On such machines, you can\n+ *\t#define Just_16 to store 16 bits per 32-bit Long when doing\n+ *\thigh-precision integer arithmetic.  Whether this speeds things\n+ *\tup or slows things down depends on the machine and the number\n+ *\tbeing converted.  If long long is available and the name is\n+ *\tsomething other than \"long long\", #define Llong to be the name,\n+ *\tand if \"unsigned Llong\" does not work as an unsigned version of\n+ *\tLlong, #define #ULLong to be the corresponding unsigned type.\n+ * #define KR_headers for old-style C function headers.\n+ * #define Bad_float_h if your system lacks a float.h or if it does not\n+ *\tdefine some or all of DBL_DIG, DBL_MAX_10_EXP, DBL_MAX_EXP,\n+ *\tFLT_RADIX, FLT_ROUNDS, and DBL_MAX.\n+ * #define MALLOC your_malloc, where your_malloc(n) acts like malloc(n)\n+ *\tif memory is available and otherwise does something you deem\n+ *\tappropriate.  If MALLOC is undefined, malloc will be invoked\n+ *\tdirectly -- and assumed always to succeed.  Similarly, if you\n+ *\twant something other than the system's free() to be called to\n+ *\trecycle memory acquired from MALLOC, #define FREE to be the\n+ *\tname of the alternate routine.  (FREE or free is only called in\n+ *\tpathological cases, e.g., in a gdtoa call after a gdtoa return in\n+ *\tmode 3 with thousands of digits requested.)\n+ * #define Omit_Private_Memory to omit logic (added Jan. 1998) for making\n+ *\tmemory allocations from a private pool of memory when possible.\n+ *\tWhen used, the private pool is PRIVATE_MEM bytes long:  2304 bytes,\n+ *\tunless #defined to be a different length.  This default length\n+ *\tsuffices to get rid of MALLOC calls except for unusual cases,\n+ *\tsuch as decimal-to-binary conversion of a very long string of\n+ *\tdigits.  When converting IEEE double precision values, the\n+ *\tlongest string gdtoa can return is about 751 bytes long.  For\n+ *\tconversions by strtod of strings of 800 digits and all gdtoa\n+ *\tconversions of IEEE doubles in single-threaded executions with\n+ *\t8-byte pointers, PRIVATE_MEM >= 7400 appears to suffice; with\n+ *\t4-byte pointers, PRIVATE_MEM >= 7112 appears adequate.\n+ * #define NO_INFNAN_CHECK if you do not wish to have INFNAN_CHECK\n+ *\t#defined automatically on IEEE systems.  On such systems,\n+ *\twhen INFNAN_CHECK is #defined, strtod checks\n+ *\tfor Infinity and NaN (case insensitively).\n+ *\tWhen INFNAN_CHECK is #defined and No_Hex_NaN is not #defined,\n+ *\tstrtodg also accepts (case insensitively) strings of the form\n+ *\tNaN(x), where x is a string of hexadecimal digits (optionally\n+ *\tpreceded by 0x or 0X) and spaces; if there is only one string\n+ *\tof hexadecimal digits, it is taken for the fraction bits of the\n+ *\tresulting NaN; if there are two or more strings of hexadecimal\n+ *\tdigits, each string is assigned to the next available sequence\n+ *\tof 32-bit words of fractions bits (starting with the most\n+ *\tsignificant), right-aligned in each sequence.\n+ *\tUnless GDTOA_NON_PEDANTIC_NANCHECK is #defined, input \"NaN(...)\"\n+ *\tis consumed even when ... has the wrong form (in which case the\n+ *\t\"(...)\" is consumed but ignored).\n+ * #define MULTIPLE_THREADS if the system offers preemptively scheduled\n+ *\tmultiple threads.  In this case, you must provide (or suitably\n+ *\t#define) two locks, acquired by ACQUIRE_DTOA_LOCK(n) and freed\n+ *\tby FREE_DTOA_LOCK(n) for n = 0 or 1.  (The second lock, accessed\n+ *\tin pow5mult, ensures lazy evaluation of only one copy of high\n+ *\tpowers of 5; omitting this lock would introduce a small\n+ *\tprobability of wasting memory, but would otherwise be harmless.)\n+ *\tYou must also invoke freedtoa(s) to free the value s returned by\n+ *\tdtoa.  You may do so whether or not MULTIPLE_THREADS is #defined.\n+ * #define IMPRECISE_INEXACT if you do not care about the setting of\n+ *\tthe STRTOG_Inexact bits in the special case of doing IEEE double\n+ *\tprecision conversions (which could also be done by the strtod in\n+ *\tdtoa.c).\n+ * #define NO_HEX_FP to disable recognition of C9x's hexadecimal\n+ *\tfloating-point constants.\n+ * #define -DNO_ERRNO to suppress setting errno (in strtod.c and\n+ *\tstrtodg.c).\n+ * #define NO_STRING_H to use private versions of memcpy.\n+ *\tOn some K&R systems, it may also be necessary to\n+ *\t#define DECLARE_SIZE_T in this case.\n+ * #define USE_LOCALE to use the current locale's decimal_point value.\n+ */\n+\n+#ifndef GDTOAIMP_H_INCLUDED\n+#define GDTOAIMP_H_INCLUDED\n+#include \"gdtoa.h\"\n+#include \"gd_qnan.h\"\n+#ifdef Honor_FLT_ROUNDS\n+#include <fenv.h>\n+#endif\n+\n+#ifdef DEBUG\n+#include \"stdio.h\"\n+#define Bug(x) {fprintf(stderr, \"%s\\n\", x); exit(1);}\n+#endif\n+\n+#include \"stdlib.h\"\n+#include \"string.h\"\n+\n+#ifdef KR_headers\n+#define Char char\n+#else\n+#define Char void\n+#endif\n+\n+#ifdef MALLOC\n+extern Char *MALLOC ANSI((size_t));\n+#else\n+#define MALLOC malloc\n+#endif\n+\n+#undef IEEE_Arith\n+#undef Avoid_Underflow\n+#ifdef IEEE_MC68k\n+#define IEEE_Arith\n+#endif\n+#ifdef IEEE_8087\n+#define IEEE_Arith\n+#endif\n+\n+#include \"errno.h\"\n+#ifdef Bad_float_h\n+\n+#ifdef IEEE_Arith\n+#define DBL_DIG 15\n+#define DBL_MAX_10_EXP 308\n+#define DBL_MAX_EXP 1024\n+#define FLT_RADIX 2\n+#define DBL_MAX 1.7976931348623157e+308\n+#endif\n+\n+#ifdef IBM\n+#define DBL_DIG 16\n+#define DBL_MAX_10_EXP 75\n+#define DBL_MAX_EXP 63\n+#define FLT_RADIX 16\n+#define DBL_MAX 7.2370055773322621e+75\n+#endif\n+\n+#ifdef VAX\n+#define DBL_DIG 16\n+#define DBL_MAX_10_EXP 38\n+#define DBL_MAX_EXP 127\n+#define FLT_RADIX 2\n+#define DBL_MAX 1.7014118346046923e+38\n+#define n_bigtens 2\n+#endif\n+\n+#ifndef LONG_MAX\n+#define LONG_MAX 2147483647\n+#endif\n+\n+#else /* ifndef Bad_float_h */\n+#include \"float.h\"\n+#endif /* Bad_float_h */\n+\n+#ifdef IEEE_Arith\n+#define Scale_Bit 0x10\n+#define n_bigtens 5\n+#endif\n+\n+#ifdef IBM\n+#define n_bigtens 3\n+#endif\n+\n+#ifdef VAX\n+#define n_bigtens 2\n+#endif\n+\n+#ifndef __MATH_H__\n+#include \"math.h\"\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+#if defined(IEEE_8087) + defined(IEEE_MC68k) + defined(VAX) + defined(IBM) != 1\n+Exactly one of IEEE_8087, IEEE_MC68k, VAX, or IBM should be defined.\n+#endif\n+\n+typedef union { double d; ULong L[2]; } U;\n+\n+#ifdef IEEE_8087\n+#define word0(x) (x)->L[1]\n+#define word1(x) (x)->L[0]\n+#else\n+#define word0(x) (x)->L[0]\n+#define word1(x) (x)->L[1]\n+#endif\n+#define dval(x) (x)->d\n+\n+/* The following definition of Storeinc is appropriate for MIPS processors.\n+ * An alternative that might be better on some machines is\n+ * #define Storeinc(a,b,c) (*a++ = b << 16 | c & 0xffff)\n+ */\n+#if defined(IEEE_8087) + defined(VAX)\n+#define Storeinc(a,b,c) (((unsigned short *)a)[1] = (unsigned short)b, \\\n+((unsigned short *)a)[0] = (unsigned short)c, a++)\n+#else\n+#define Storeinc(a,b,c) (((unsigned short *)a)[0] = (unsigned short)b, \\\n+((unsigned short *)a)[1] = (unsigned short)c, a++)\n+#endif\n+\n+/* #define P DBL_MANT_DIG */\n+/* Ten_pmax = floor(P*log(2)/log(5)) */\n+/* Bletch = (highest power of 2 < DBL_MAX_10_EXP) / 16 */\n+/* Quick_max = floor((P-1)*log(FLT_RADIX)/log(10) - 1) */\n+/* Int_max = floor(P*log(FLT_RADIX)/log(10) - 1) */\n+\n+#ifdef IEEE_Arith\n+#define Exp_shift  20\n+#define Exp_shift1 20\n+#define Exp_msk1    0x100000\n+#define Exp_msk11   0x100000\n+#define Exp_mask  0x7ff00000\n+#define P 53\n+#define Bias 1023\n+#define Emin (-1022)\n+#define Exp_1  0x3ff00000\n+#define Exp_11 0x3ff00000\n+#define Ebits 11\n+#define Frac_mask  0xfffff\n+#define Frac_mask1 0xfffff\n+#define Ten_pmax 22\n+#define Bletch 0x10\n+#define Bndry_mask  0xfffff\n+#define Bndry_mask1 0xfffff\n+#define LSB 1\n+#define Sign_bit 0x80000000\n+#define Log2P 1\n+#define Tiny0 0\n+#define Tiny1 1\n+#define Quick_max 14\n+#define Int_max 14\n+\n+#ifndef Flt_Rounds\n+#ifdef FLT_ROUNDS\n+#define Flt_Rounds FLT_ROUNDS\n+#else\n+#define Flt_Rounds 1\n+#endif\n+#endif /*Flt_Rounds*/\n+\n+#else /* ifndef IEEE_Arith */\n+#undef  Sudden_Underflow\n+#define Sudden_Underflow\n+#ifdef IBM\n+#undef Flt_Rounds\n+#define Flt_Rounds 0\n+#define Exp_shift  24\n+#define Exp_shift1 24\n+#define Exp_msk1   0x1000000\n+#define Exp_msk11  0x1000000\n+#define Exp_mask  0x7f000000\n+#define P 14\n+#define Bias 65\n+#define Exp_1  0x41000000\n+#define Exp_11 0x41000000\n+#define Ebits 8\t/* exponent has 7 bits, but 8 is the right value in b2d */\n+#define Frac_mask  0xffffff\n+#define Frac_mask1 0xffffff\n+#define Bletch 4\n+#define Ten_pmax 22\n+#define Bndry_mask  0xefffff\n+#define Bndry_mask1 0xffffff\n+#define LSB 1\n+#define Sign_bit 0x80000000\n+#define Log2P 4\n+#define Tiny0 0x100000\n+#define Tiny1 0\n+#define Quick_max 14\n+#define Int_max 15\n+#else /* VAX */\n+#undef Flt_Rounds\n+#define Flt_Rounds 1\n+#define Exp_shift  23\n+#define Exp_shift1 7\n+#define Exp_msk1    0x80\n+#define Exp_msk11   0x800000\n+#define Exp_mask  0x7f80\n+#define P 56\n+#define Bias 129\n+#define Exp_1  0x40800000\n+#define Exp_11 0x4080\n+#define Ebits 8\n+#define Frac_mask  0x7fffff\n+#define Frac_mask1 0xffff007f\n+#define Ten_pmax 24\n+#define Bletch 2\n+#define Bndry_mask  0xffff007f\n+#define Bndry_mask1 0xffff007f\n+#define LSB 0x10000\n+#define Sign_bit 0x8000\n+#define Log2P 1\n+#define Tiny0 0x80\n+#define Tiny1 0\n+#define Quick_max 15\n+#define Int_max 15\n+#endif /* IBM, VAX */\n+#endif /* IEEE_Arith */\n+\n+#ifndef IEEE_Arith\n+#define ROUND_BIASED\n+#endif\n+\n+#ifdef RND_PRODQUOT\n+#define rounded_product(a,b) a = rnd_prod(a, b)\n+#define rounded_quotient(a,b) a = rnd_quot(a, b)\n+#ifdef KR_headers\n+extern double rnd_prod(), rnd_quot();\n+#else\n+extern double rnd_prod(double, double), rnd_quot(double, double);\n+#endif\n+#else\n+#define rounded_product(a,b) a *= b\n+#define rounded_quotient(a,b) a /= b\n+#endif\n+\n+#define Big0 (Frac_mask1 | Exp_msk1*(DBL_MAX_EXP+Bias-1))\n+#define Big1 0xffffffff\n+\n+#undef  Pack_16\n+#ifndef Pack_32\n+#define Pack_32\n+#endif\n+\n+#ifdef NO_LONG_LONG\n+#undef ULLong\n+#ifdef Just_16\n+#undef Pack_32\n+#define Pack_16\n+/* When Pack_32 is not defined, we store 16 bits per 32-bit Long.\n+ * This makes some inner loops simpler and sometimes saves work\n+ * during multiplications, but it often seems to make things slightly\n+ * slower.  Hence the default is now to store 32 bits per Long.\n+ */\n+#endif\n+#else\t/* long long available */\n+#ifndef Llong\n+#define Llong long long\n+#endif\n+#ifndef ULLong\n+#define ULLong unsigned Llong\n+#endif\n+#endif /* NO_LONG_LONG */\n+\n+#ifdef Pack_32\n+#define ULbits 32\n+#define kshift 5\n+#define kmask 31\n+#define ALL_ON 0xffffffff\n+#else\n+#define ULbits 16\n+#define kshift 4\n+#define kmask 15\n+#define ALL_ON 0xffff\n+#endif\n+\n+#ifndef MULTIPLE_THREADS\n+#define ACQUIRE_DTOA_LOCK(n)\t/*nothing*/\n+#define FREE_DTOA_LOCK(n)\t/*nothing*/\n+#endif\n+\n+#define Kmax 9\n+\n+ struct\n+Bigint {\n+\tstruct Bigint *next;\n+\tint k, maxwds, sign, wds;\n+\tULong x[1];\n+\t};\n+\n+ typedef struct Bigint Bigint;\n+\n+#ifdef NO_STRING_H\n+#ifdef DECLARE_SIZE_T\n+typedef unsigned int size_t;\n+#endif\n+extern void memcpy_D2A ANSI((void*, const void*, size_t));\n+#define Bcopy(x,y) memcpy_D2A(&x->sign,&y->sign,y->wds*sizeof(ULong) + 2*sizeof(int))\n+#else /* !NO_STRING_H */\n+#define Bcopy(x,y) memcpy(&x->sign,&y->sign,y->wds*sizeof(ULong) + 2*sizeof(int))\n+#endif /* NO_STRING_H */\n+\n+#define Balloc Balloc_D2A\n+#define Bfree Bfree_D2A\n+#define ULtoQ ULtoQ_D2A\n+#define ULtof ULtof_D2A\n+#define ULtod ULtod_D2A\n+#define ULtodd ULtodd_D2A\n+#define ULtox ULtox_D2A\n+#define ULtoxL ULtoxL_D2A\n+#define any_on any_on_D2A\n+#define b2d b2d_D2A\n+#define bigtens bigtens_D2A\n+#define cmp cmp_D2A\n+#define copybits copybits_D2A\n+#define d2b d2b_D2A\n+#define decrement decrement_D2A\n+#define diff diff_D2A\n+#define dtoa_result dtoa_result_D2A\n+#define g__fmt g__fmt_D2A\n+#define gethex gethex_D2A\n+#define hexdig hexdig_D2A\n+#define hexnan hexnan_D2A\n+#define hi0bits(x) hi0bits_D2A((ULong)(x))\n+#define i2b i2b_D2A\n+#define increment increment_D2A\n+#define lo0bits lo0bits_D2A\n+#define lshift lshift_D2A\n+#define match match_D2A\n+#define mult mult_D2A\n+#define multadd multadd_D2A\n+#define nrv_alloc nrv_alloc_D2A\n+#define pow5mult pow5mult_D2A\n+#define quorem quorem_D2A\n+#define ratio ratio_D2A\n+#define rshift rshift_D2A\n+#define rv_alloc rv_alloc_D2A\n+#define s2b s2b_D2A\n+#define set_ones set_ones_D2A\n+#define strcp strcp_D2A\n+#define strtoIg strtoIg_D2A\n+#define sum sum_D2A\n+#define tens tens_D2A\n+#define tinytens tinytens_D2A\n+#define tinytens tinytens_D2A\n+#define trailz trailz_D2A\n+#define ulp ulp_D2A\n+\n+ extern char *dtoa_result;\n+ extern CONST double bigtens[], tens[], tinytens[];\n+ extern unsigned char hexdig[];\n+\n+ extern Bigint *Balloc ANSI((int));\n+ extern void Bfree ANSI((Bigint*));\n+ extern void ULtof ANSI((ULong*, ULong*, Long, int));\n+ extern void ULtod ANSI((ULong*, ULong*, Long, int));\n+ extern void ULtodd ANSI((ULong*, ULong*, Long, int));\n+ extern void ULtoQ ANSI((ULong*, ULong*, Long, int));\n+ extern void ULtox ANSI((UShort*, ULong*, Long, int));\n+ extern void ULtoxL ANSI((ULong*, ULong*, Long, int));\n+ extern ULong any_on ANSI((Bigint*, int));\n+ extern double b2d ANSI((Bigint*, int*));\n+ extern int cmp ANSI((Bigint*, Bigint*));\n+ extern void copybits ANSI((ULong*, int, Bigint*));\n+ extern Bigint *d2b ANSI((double, int*, int*));\n+ extern void decrement ANSI((Bigint*));\n+ extern Bigint *diff ANSI((Bigint*, Bigint*));\n+ extern char *dtoa ANSI((double d, int mode, int ndigits,\n+\t\t\tint *decpt, int *sign, char **rve));\n+ extern char *g__fmt ANSI((char*, char*, char*, int, ULong, size_t));\n+ extern int gethex ANSI((CONST char**, FPI*, Long*, Bigint**, int));\n+ extern void hexdig_init_D2A(Void);\n+ extern int hexnan ANSI((CONST char**, FPI*, ULong*));\n+ extern int hi0bits_D2A ANSI((ULong));\n+ extern Bigint *i2b ANSI((int));\n+ extern Bigint *increment ANSI((Bigint*));\n+ extern int lo0bits ANSI((ULong*));\n+ extern Bigint *lshift ANSI((Bigint*, int));\n+ extern int match ANSI((CONST char**, char*));\n+ extern Bigint *mult ANSI((Bigint*, Bigint*));\n+ extern Bigint *multadd ANSI((Bigint*, int, int));\n+ extern char *nrv_alloc ANSI((char*, char **, int));\n+ extern Bigint *pow5mult ANSI((Bigint*, int));\n+ extern int quorem ANSI((Bigint*, Bigint*));\n+ extern double ratio ANSI((Bigint*, Bigint*));\n+ extern void rshift ANSI((Bigint*, int));\n+ extern char *rv_alloc ANSI((int));\n+ extern Bigint *s2b ANSI((CONST char*, int, int, ULong, int));\n+ extern Bigint *set_ones ANSI((Bigint*, int));\n+ extern char *strcp ANSI((char*, const char*));\n+ extern int strtoIg ANSI((CONST char*, char**, FPI*, Long*, Bigint**, int*));\n+ extern double strtod ANSI((const char *s00, char **se));\n+ extern Bigint *sum ANSI((Bigint*, Bigint*));\n+ extern int trailz ANSI((Bigint*));\n+ extern double ulp ANSI((U*));\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+/*\n+ * NAN_WORD0 and NAN_WORD1 are only referenced in strtod.c.  Prior to\n+ * 20050115, they used to be hard-wired here (to 0x7ff80000 and 0,\n+ * respectively), but now are determined by compiling and running\n+ * qnan.c to generate gd_qnan.h, which specifies d_QNAN0 and d_QNAN1.\n+ * Formerly gdtoaimp.h recommended supplying suitable -DNAN_WORD0=...\n+ * and -DNAN_WORD1=...  values if necessary.  This should still work.\n+ * (On HP Series 700/800 machines, -DNAN_WORD0=0x7ff40000 works.)\n+ */\n+#ifdef IEEE_Arith\n+#ifndef NO_INFNAN_CHECK\n+#undef INFNAN_CHECK\n+#define INFNAN_CHECK\n+#endif\n+#ifdef IEEE_MC68k\n+#define _0 0\n+#define _1 1\n+#ifndef NAN_WORD0\n+#define NAN_WORD0 d_QNAN0\n+#endif\n+#ifndef NAN_WORD1\n+#define NAN_WORD1 d_QNAN1\n+#endif\n+#else\n+#define _0 1\n+#define _1 0\n+#ifndef NAN_WORD0\n+#define NAN_WORD0 d_QNAN1\n+#endif\n+#ifndef NAN_WORD1\n+#define NAN_WORD1 d_QNAN0\n+#endif\n+#endif\n+#else\n+#undef INFNAN_CHECK\n+#endif\n+\n+#undef SI\n+#ifdef Sudden_Underflow\n+#define SI 1\n+#else\n+#define SI 0\n+#endif\n+\n+#endif /* GDTOAIMP_H_INCLUDED */"}, {"sha": "a9982c9d33a76095a8281498749ba20072f5fab2", "filename": "libquadmath/gdtoa/gethex.c", "status": "added", "additions": 350, "deletions": 0, "changes": 350, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fgethex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fgethex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fgdtoa%2Fgethex.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,350 @@\n+/****************************************************************\n+\n+The author of this software is David M. Gay.\n+\n+Copyright (C) 1998 by Lucent Technologies\n+All Rights Reserved\n+\n+Permission to use, copy, modify, and distribute this software and\n+its documentation for any purpose and without fee is hereby\n+granted, provided that the above copyright notice appear in all\n+copies and that both that the copyright notice and this\n+permission notice and warranty disclaimer appear in supporting\n+documentation, and that the name of Lucent or any of its entities\n+not be used in advertising or publicity pertaining to\n+distribution of the software without specific, written prior\n+permission.\n+\n+LUCENT DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,\n+INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.\n+IN NO EVENT SHALL LUCENT OR ANY OF ITS ENTITIES BE LIABLE FOR ANY\n+SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n+WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER\n+IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,\n+ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n+THIS SOFTWARE.\n+\n+****************************************************************/\n+\n+/* Please send bug reports to David M. Gay (dmg at acm dot org,\n+ * with \" at \" changed at \"@\" and \" dot \" changed to \".\").\t*/\n+\n+#include \"gdtoaimp.h\"\n+\n+#ifdef USE_LOCALE\n+#include \"locale.h\"\n+#endif\n+\n+ int\n+#ifdef KR_headers\n+gethex(sp, fpi, exp, bp, sign)\n+\tCONST char **sp; FPI *fpi; Long *exp; Bigint **bp; int sign;\n+#else\n+gethex( CONST char **sp, FPI *fpi, Long *exp, Bigint **bp, int sign)\n+#endif\n+{\n+\tBigint *b;\n+\tCONST unsigned char *decpt, *s0, *s, *s1;\n+\tint big, esign, havedig, irv, j, k, n, n0, nbits, up, zret;\n+\tULong L, lostbits, *x;\n+\tLong e, e1;\n+#ifdef USE_LOCALE\n+\tint i;\n+#ifdef NO_LOCALE_CACHE\n+\tconst unsigned char *decimalpoint = (unsigned char*)localeconv()->decimal_point;\n+#else\n+\tconst unsigned char *decimalpoint;\n+\tstatic unsigned char *decimalpoint_cache;\n+\tif (!(s0 = decimalpoint_cache)) {\n+\t\ts0 = (unsigned char*)localeconv()->decimal_point;\n+\t\tif ((decimalpoint_cache = (char*)MALLOC(strlen(s0) + 1))) {\n+\t\t\tstrcpy(decimalpoint_cache, s0);\n+\t\t\ts0 = decimalpoint_cache;\n+\t\t\t}\n+\t\t}\n+\tdecimalpoint = s0;\n+#endif\n+#endif\n+\n+\tif (!hexdig['0'])\n+\t\thexdig_init_D2A();\n+\t*bp = 0;\n+\thavedig = 0;\n+\ts0 = *(CONST unsigned char **)sp + 2;\n+\twhile(s0[havedig] == '0')\n+\t\thavedig++;\n+\ts0 += havedig;\n+\ts = s0;\n+\tdecpt = 0;\n+\tzret = 0;\n+\te = 0;\n+\tif (hexdig[*s])\n+\t\thavedig++;\n+\telse {\n+\t\tzret = 1;\n+#ifdef USE_LOCALE\n+\t\tfor(i = 0; decimalpoint[i]; ++i) {\n+\t\t\tif (s[i] != decimalpoint[i])\n+\t\t\t\tgoto pcheck;\n+\t\t\t}\n+\t\tdecpt = s += i;\n+#else\n+\t\tif (*s != '.')\n+\t\t\tgoto pcheck;\n+\t\tdecpt = ++s;\n+#endif\n+\t\tif (!hexdig[*s])\n+\t\t\tgoto pcheck;\n+\t\twhile(*s == '0')\n+\t\t\ts++;\n+\t\tif (hexdig[*s])\n+\t\t\tzret = 0;\n+\t\thavedig = 1;\n+\t\ts0 = s;\n+\t\t}\n+\twhile(hexdig[*s])\n+\t\ts++;\n+#ifdef USE_LOCALE\n+\tif (*s == *decimalpoint && !decpt) {\n+\t\tfor(i = 1; decimalpoint[i]; ++i) {\n+\t\t\tif (s[i] != decimalpoint[i])\n+\t\t\t\tgoto pcheck;\n+\t\t\t}\n+\t\tdecpt = s += i;\n+#else\n+\tif (*s == '.' && !decpt) {\n+\t\tdecpt = ++s;\n+#endif\n+\t\twhile(hexdig[*s])\n+\t\t\ts++;\n+\t\t}/*}*/\n+\tif (decpt)\n+\t\te = -(((Long)(s-decpt)) << 2);\n+ pcheck:\n+\ts1 = s;\n+\tbig = esign = 0;\n+\tswitch(*s) {\n+\t  case 'p':\n+\t  case 'P':\n+\t\tswitch(*++s) {\n+\t\t  case '-':\n+\t\t\tesign = 1;\n+\t\t\t/* no break */\n+\t\t  case '+':\n+\t\t\ts++;\n+\t\t  }\n+\t\tif ((n = hexdig[*s]) == 0 || n > 0x19) {\n+\t\t\ts = s1;\n+\t\t\tbreak;\n+\t\t\t}\n+\t\te1 = n - 0x10;\n+\t\twhile((n = hexdig[*++s]) !=0 && n <= 0x19) {\n+\t\t\tif (e1 & 0xf8000000)\n+\t\t\t\tbig = 1;\n+\t\t\te1 = 10*e1 + n - 0x10;\n+\t\t\t}\n+\t\tif (esign)\n+\t\t\te1 = -e1;\n+\t\te += e1;\n+\t  }\n+\t*sp = (char*)s;\n+\tif (!havedig)\n+\t\t*sp = (char*)s0 - 1;\n+\tif (zret)\n+\t\treturn STRTOG_Zero;\n+\tif (big) {\n+\t\tif (esign) {\n+\t\t\tswitch(fpi->rounding) {\n+\t\t\t  case FPI_Round_up:\n+\t\t\t\tif (sign)\n+\t\t\t\t\tbreak;\n+\t\t\t\tgoto ret_tiny;\n+\t\t\t  case FPI_Round_down:\n+\t\t\t\tif (!sign)\n+\t\t\t\t\tbreak;\n+\t\t\t\tgoto ret_tiny;\n+\t\t\t  }\n+\t\t\tgoto retz;\n+ ret_tiny:\n+\t\t\tb = Balloc(0);\n+\t\t\tb->wds = 1;\n+\t\t\tb->x[0] = 1;\n+\t\t\tgoto dret;\n+\t\t\t}\n+\t\tswitch(fpi->rounding) {\n+\t\t  case FPI_Round_near:\n+\t\t\tgoto ovfl1;\n+\t\t  case FPI_Round_up:\n+\t\t\tif (!sign)\n+\t\t\t\tgoto ovfl1;\n+\t\t\tgoto ret_big;\n+\t\t  case FPI_Round_down:\n+\t\t\tif (sign)\n+\t\t\t\tgoto ovfl1;\n+\t\t\tgoto ret_big;\n+\t\t  }\n+ ret_big:\n+\t\tnbits = fpi->nbits;\n+\t\tn0 = n = nbits >> kshift;\n+\t\tif (nbits & kmask)\n+\t\t\t++n;\n+\t\tfor(j = n, k = 0; j >>= 1; ++k);\n+\t\t*bp = b = Balloc(k);\n+\t\tb->wds = n;\n+\t\tfor(j = 0; j < n0; ++j)\n+\t\t\tb->x[j] = ALL_ON;\n+\t\tif (n > n0)\n+\t\t\tb->x[j] = ULbits >> (ULbits - (nbits & kmask));\n+\t\t*exp = fpi->emin;\n+\t\treturn STRTOG_Normal | STRTOG_Inexlo;\n+\t\t}\n+\tn = s1 - s0 - 1;\n+\tfor(k = 0; n > (1 << (kshift-2)) - 1; n >>= 1)\n+\t\tk++;\n+\tb = Balloc(k);\n+\tx = b->x;\n+\tn = 0;\n+\tL = 0;\n+#ifdef USE_LOCALE\n+\tfor(i = 0; decimalpoint[i+1]; ++i);\n+#endif\n+\twhile(s1 > s0) {\n+#ifdef USE_LOCALE\n+\t\tif (*--s1 == decimalpoint[i]) {\n+\t\t\ts1 -= i;\n+\t\t\tcontinue;\n+\t\t\t}\n+#else\n+\t\tif (*--s1 == '.')\n+\t\t\tcontinue;\n+#endif\n+\t\tif (n == ULbits) {\n+\t\t\t*x++ = L;\n+\t\t\tL = 0;\n+\t\t\tn = 0;\n+\t\t\t}\n+\t\tL |= (hexdig[*s1] & 0x0f) << n;\n+\t\tn += 4;\n+\t\t}\n+\t*x++ = L;\n+\tb->wds = n = x - b->x;\n+\tn = ULbits*n - hi0bits(L);\n+\tnbits = fpi->nbits;\n+\tlostbits = 0;\n+\tx = b->x;\n+\tif (n > nbits) {\n+\t\tn -= nbits;\n+\t\tif (any_on(b,n)) {\n+\t\t\tlostbits = 1;\n+\t\t\tk = n - 1;\n+\t\t\tif (x[k>>kshift] & 1 << (k & kmask)) {\n+\t\t\t\tlostbits = 2;\n+\t\t\t\tif (k > 0 && any_on(b,k))\n+\t\t\t\t\tlostbits = 3;\n+\t\t\t\t}\n+\t\t\t}\n+\t\trshift(b, n);\n+\t\te += n;\n+\t\t}\n+\telse if (n < nbits) {\n+\t\tn = nbits - n;\n+\t\tb = lshift(b, n);\n+\t\te -= n;\n+\t\tx = b->x;\n+\t\t}\n+\tif (e > fpi->emax) {\n+ ovfl:\n+\t\tBfree(b);\n+ ovfl1:\n+#ifndef NO_ERRNO\n+\t\terrno = ERANGE;\n+#endif\n+\t\treturn STRTOG_Infinite | STRTOG_Overflow | STRTOG_Inexhi;\n+\t\t}\n+\tirv = STRTOG_Normal;\n+\tif (e < fpi->emin) {\n+\t\tirv = STRTOG_Denormal;\n+\t\tn = fpi->emin - e;\n+\t\tif (n >= nbits) {\n+\t\t\tswitch (fpi->rounding) {\n+\t\t\t  case FPI_Round_near:\n+\t\t\t\tif (n == nbits && (n < 2 || any_on(b,n-1)))\n+\t\t\t\t\tgoto one_bit;\n+\t\t\t\tbreak;\n+\t\t\t  case FPI_Round_up:\n+\t\t\t\tif (!sign)\n+\t\t\t\t\tgoto one_bit;\n+\t\t\t\tbreak;\n+\t\t\t  case FPI_Round_down:\n+\t\t\t\tif (sign) {\n+ one_bit:\n+\t\t\t\t\tx[0] = b->wds = 1;\n+ dret:\n+\t\t\t\t\t*bp = b;\n+\t\t\t\t\t*exp = fpi->emin;\n+#ifndef NO_ERRNO\n+\t\t\t\t\terrno = ERANGE;\n+#endif\n+\t\t\t\t\treturn STRTOG_Denormal | STRTOG_Inexhi\n+\t\t\t\t\t\t| STRTOG_Underflow;\n+\t\t\t\t\t}\n+\t\t\t  }\n+\t\t\tBfree(b);\n+ retz:\n+#ifndef NO_ERRNO\n+\t\t\terrno = ERANGE;\n+#endif\n+\t\t\treturn STRTOG_Zero | STRTOG_Inexlo | STRTOG_Underflow;\n+\t\t\t}\n+\t\tk = n - 1;\n+\t\tif (lostbits)\n+\t\t\tlostbits = 1;\n+\t\telse if (k > 0)\n+\t\t\tlostbits = any_on(b,k);\n+\t\tif (x[k>>kshift] & 1 << (k & kmask))\n+\t\t\tlostbits |= 2;\n+\t\tnbits -= n;\n+\t\trshift(b,n);\n+\t\te = fpi->emin;\n+\t\t}\n+\tif (lostbits) {\n+\t\tup = 0;\n+\t\tswitch(fpi->rounding) {\n+\t\t  case FPI_Round_zero:\n+\t\t\tbreak;\n+\t\t  case FPI_Round_near:\n+\t\t\tif (lostbits & 2\n+\t\t\t && (lostbits | x[0]) & 1)\n+\t\t\t\tup = 1;\n+\t\t\tbreak;\n+\t\t  case FPI_Round_up:\n+\t\t\tup = 1 - sign;\n+\t\t\tbreak;\n+\t\t  case FPI_Round_down:\n+\t\t\tup = sign;\n+\t\t  }\n+\t\tif (up) {\n+\t\t\tk = b->wds;\n+\t\t\tb = increment(b);\n+\t\t\tx = b->x;\n+\t\t\tif (irv == STRTOG_Denormal) {\n+\t\t\t\tif (nbits == fpi->nbits - 1\n+\t\t\t\t && x[nbits >> kshift] & 1 << (nbits & kmask))\n+\t\t\t\t\tirv =  STRTOG_Normal;\n+\t\t\t\t}\n+\t\t\telse if (b->wds > k\n+\t\t\t || ((n = nbits & kmask) !=0\n+\t\t\t      && hi0bits(x[k-1]) < 32-n)) {\n+\t\t\t\trshift(b,1);\n+\t\t\t\tif (++e > fpi->emax)\n+\t\t\t\t\tgoto ovfl;\n+\t\t\t\t}\n+\t\t\tirv |= STRTOG_Inexhi;\n+\t\t\t}\n+\t\telse\n+\t\t\tirv |= STRTOG_Inexlo;\n+\t\t}\n+\t*bp = b;\n+\t*exp = e;\n+\treturn irv;\n+\t}"}, {"sha": "8270ef944797b8a707a33160a6207b2f3baa15be", "filename": "libquadmath/gdtoa/gmisc.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fgmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fgmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fgdtoa%2Fgmisc.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,86 @@\n+/****************************************************************\n+\n+The author of this software is David M. Gay.\n+\n+Copyright (C) 1998 by Lucent Technologies\n+All Rights Reserved\n+\n+Permission to use, copy, modify, and distribute this software and\n+its documentation for any purpose and without fee is hereby\n+granted, provided that the above copyright notice appear in all\n+copies and that both that the copyright notice and this\n+permission notice and warranty disclaimer appear in supporting\n+documentation, and that the name of Lucent or any of its entities\n+not be used in advertising or publicity pertaining to\n+distribution of the software without specific, written prior\n+permission.\n+\n+LUCENT DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,\n+INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.\n+IN NO EVENT SHALL LUCENT OR ANY OF ITS ENTITIES BE LIABLE FOR ANY\n+SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n+WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER\n+IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,\n+ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n+THIS SOFTWARE.\n+\n+****************************************************************/\n+\n+/* Please send bug reports to David M. Gay (dmg at acm dot org,\n+ * with \" at \" changed at \"@\" and \" dot \" changed to \".\").\t*/\n+\n+#include \"gdtoaimp.h\"\n+\n+ void\n+#ifdef KR_headers\n+rshift(b, k) Bigint *b; int k;\n+#else\n+rshift(Bigint *b, int k)\n+#endif\n+{\n+\tULong *x, *x1, *xe, y;\n+\tint n;\n+\n+\tx = x1 = b->x;\n+\tn = k >> kshift;\n+\tif (n < b->wds) {\n+\t\txe = x + b->wds;\n+\t\tx += n;\n+\t\tif (k &= kmask) {\n+\t\t\tn = ULbits - k;\n+\t\t\ty = *x++ >> k;\n+\t\t\twhile(x < xe) {\n+\t\t\t\t*x1++ = (y | (*x << n)) & ALL_ON;\n+\t\t\t\ty = *x++ >> k;\n+\t\t\t\t}\n+\t\t\tif ((*x1 = y) !=0)\n+\t\t\t\tx1++;\n+\t\t\t}\n+\t\telse\n+\t\t\twhile(x < xe)\n+\t\t\t\t*x1++ = *x++;\n+\t\t}\n+\tif ((b->wds = x1 - b->x) == 0)\n+\t\tb->x[0] = 0;\n+\t}\n+\n+ int\n+#ifdef KR_headers\n+trailz(b) Bigint *b;\n+#else\n+trailz(Bigint *b)\n+#endif\n+{\n+\tULong L, *x, *xe;\n+\tint n = 0;\n+\n+\tx = b->x;\n+\txe = x + b->wds;\n+\tfor(n = 0; x < xe && !*x; x++)\n+\t\tn += ULbits;\n+\tif (x < xe) {\n+\t\tL = *x;\n+\t\tn += lo0bits(&L);\n+\t\t}\n+\treturn n;\n+\t}"}, {"sha": "fa6e18dee8f4cff8f350629ce1fd4ec38ba1a676", "filename": "libquadmath/gdtoa/hd_init.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fhd_init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fhd_init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fgdtoa%2Fhd_init.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,55 @@\n+/****************************************************************\n+\n+The author of this software is David M. Gay.\n+\n+Copyright (C) 2000 by Lucent Technologies\n+All Rights Reserved\n+\n+Permission to use, copy, modify, and distribute this software and\n+its documentation for any purpose and without fee is hereby\n+granted, provided that the above copyright notice appear in all\n+copies and that both that the copyright notice and this\n+permission notice and warranty disclaimer appear in supporting\n+documentation, and that the name of Lucent or any of its entities\n+not be used in advertising or publicity pertaining to\n+distribution of the software without specific, written prior\n+permission.\n+\n+LUCENT DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,\n+INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.\n+IN NO EVENT SHALL LUCENT OR ANY OF ITS ENTITIES BE LIABLE FOR ANY\n+SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n+WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER\n+IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,\n+ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n+THIS SOFTWARE.\n+\n+****************************************************************/\n+\n+/* Please send bug reports to David M. Gay (dmg at acm dot org,\n+ * with \" at \" changed at \"@\" and \" dot \" changed to \".\").\t*/\n+\n+#include \"gdtoaimp.h\"\n+\n+ unsigned char hexdig[256];\n+\n+ static void\n+#ifdef KR_headers\n+htinit(h, s, inc) unsigned char *h; unsigned char *s; int inc;\n+#else\n+htinit(unsigned char *h, unsigned char *s, int inc)\n+#endif\n+{\n+\tint i, j;\n+\tfor(i = 0; (j = s[i]) !=0; i++)\n+\t\th[j] = i + inc;\n+\t}\n+\n+ void\n+hexdig_init_D2A(Void)\n+{\n+#define USC (unsigned char *)\n+\thtinit(hexdig, USC \"0123456789\", 0x10);\n+\thtinit(hexdig, USC \"abcdef\", 0x10 + 10);\n+\thtinit(hexdig, USC \"ABCDEF\", 0x10 + 10);\n+\t}"}, {"sha": "a443721f52dd17319893bb83af20d654a3ee2d76", "filename": "libquadmath/gdtoa/hexnan.c", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fhexnan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fhexnan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fgdtoa%2Fhexnan.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,150 @@\n+/****************************************************************\n+\n+The author of this software is David M. Gay.\n+\n+Copyright (C) 2000 by Lucent Technologies\n+All Rights Reserved\n+\n+Permission to use, copy, modify, and distribute this software and\n+its documentation for any purpose and without fee is hereby\n+granted, provided that the above copyright notice appear in all\n+copies and that both that the copyright notice and this\n+permission notice and warranty disclaimer appear in supporting\n+documentation, and that the name of Lucent or any of its entities\n+not be used in advertising or publicity pertaining to\n+distribution of the software without specific, written prior\n+permission.\n+\n+LUCENT DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,\n+INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.\n+IN NO EVENT SHALL LUCENT OR ANY OF ITS ENTITIES BE LIABLE FOR ANY\n+SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n+WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER\n+IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,\n+ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n+THIS SOFTWARE.\n+\n+****************************************************************/\n+\n+/* Please send bug reports to David M. Gay (dmg at acm dot org,\n+ * with \" at \" changed at \"@\" and \" dot \" changed to \".\").\t*/\n+\n+#include \"gdtoaimp.h\"\n+\n+ static void\n+#ifdef KR_headers\n+L_shift(x, x1, i) ULong *x; ULong *x1; int i;\n+#else\n+L_shift(ULong *x, ULong *x1, int i)\n+#endif\n+{\n+\tint j;\n+\n+\ti = 8 - i;\n+\ti <<= 2;\n+\tj = ULbits - i;\n+\tdo {\n+\t\t*x |= x[1] << j;\n+\t\tx[1] >>= i;\n+\t\t} while(++x < x1);\n+\t}\n+\n+ int\n+#ifdef KR_headers\n+hexnan(sp, fpi, x0)\n+\tCONST char **sp; FPI *fpi; ULong *x0;\n+#else\n+hexnan( CONST char **sp, FPI *fpi, ULong *x0)\n+#endif\n+{\n+\tULong c, h, *x, *x1, *xe;\n+\tCONST char *s;\n+\tint havedig, hd0, i, nbits;\n+\n+\tif (!hexdig['0'])\n+\t\thexdig_init_D2A();\n+\tnbits = fpi->nbits;\n+\tx = x0 + (nbits >> kshift);\n+\tif (nbits & kmask)\n+\t\tx++;\n+\t*--x = 0;\n+\tx1 = xe = x;\n+\thavedig = hd0 = i = 0;\n+\ts = *sp;\n+\t/* allow optional initial 0x or 0X */\n+\twhile((c = *(CONST unsigned char*)(s+1)) && c <= ' ')\n+\t\t++s;\n+\tif (s[1] == '0' && (s[2] == 'x' || s[2] == 'X')\n+\t && *(CONST unsigned char*)(s+3) > ' ')\n+\t\ts += 2;\n+\twhile((c = *(CONST unsigned char*)++s)) {\n+\t\tif (!(h = hexdig[c])) {\n+\t\t\tif (c <= ' ') {\n+\t\t\t\tif (hd0 < havedig) {\n+\t\t\t\t\tif (x < x1 && i < 8)\n+\t\t\t\t\t\tL_shift(x, x1, i);\n+\t\t\t\t\tif (x <= x0) {\n+\t\t\t\t\t\ti = 8;\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t}\n+\t\t\t\t\thd0 = havedig;\n+\t\t\t\t\t*--x = 0;\n+\t\t\t\t\tx1 = x;\n+\t\t\t\t\ti = 0;\n+\t\t\t\t\t}\n+\t\t\t\twhile(*(CONST unsigned char*)(s+1) <= ' ')\n+\t\t\t\t\t++s;\n+\t\t\t\tif (s[1] == '0' && (s[2] == 'x' || s[2] == 'X')\n+\t\t\t\t && *(CONST unsigned char*)(s+3) > ' ')\n+\t\t\t\t\ts += 2;\n+\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\tif (/*(*/ c == ')' && havedig) {\n+\t\t\t\t*sp = s + 1;\n+\t\t\t\tbreak;\n+\t\t\t\t}\n+#ifndef GDTOA_NON_PEDANTIC_NANCHECK\n+\t\t\tdo {\n+\t\t\t\tif (/*(*/ c == ')') {\n+\t\t\t\t\t*sp = s + 1;\n+\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t} while((c = *++s));\n+#endif\n+\t\t\treturn STRTOG_NaN;\n+\t\t\t}\n+\t\thavedig++;\n+\t\tif (++i > 8) {\n+\t\t\tif (x <= x0)\n+\t\t\t\tcontinue;\n+\t\t\ti = 1;\n+\t\t\t*--x = 0;\n+\t\t\t}\n+\t\t*x = (*x << 4) | (h & 0xf);\n+\t\t}\n+\tif (!havedig)\n+\t\treturn STRTOG_NaN;\n+\tif (x < x1 && i < 8)\n+\t\tL_shift(x, x1, i);\n+\tif (x > x0) {\n+\t\tx1 = x0;\n+\t\tdo *x1++ = *x++;\n+\t\t\twhile(x <= xe);\n+\t\tdo *x1++ = 0;\n+\t\t\twhile(x1 <= xe);\n+\t\t}\n+\telse {\n+\t\t/* truncate high-order word if necessary */\n+\t\tif ( (i = nbits & (ULbits-1)) !=0)\n+\t\t\t*xe &= ((ULong)0xffffffff) >> (ULbits - i);\n+\t\t}\n+\tfor(x1 = xe;; --x1) {\n+\t\tif (*x1 != 0)\n+\t\t\tbreak;\n+\t\tif (x1 == x0) {\n+\t\t\t*x1 = 1;\n+\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\treturn STRTOG_NaNbits;\n+\t}"}, {"sha": "c9a61e9951f5b719a0cedb8da6c5f846a4103491", "filename": "libquadmath/gdtoa/makefile", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fmakefile", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fmakefile", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fgdtoa%2Fmakefile?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,42 @@\n+# /****************************************************************\n+# Copyright (C) 1998 by Lucent Technologies\n+# All Rights Reserved\n+#\n+# Permission to use, copy, modify, and distribute this software and\n+# its documentation for any purpose and without fee is hereby\n+# granted, provided that the above copyright notice appear in all\n+# copies and that both that the copyright notice and this\n+# permission notice and warranty disclaimer appear in supporting\n+# documentation, and that the name of Lucent or any of its entities\n+# not be used in advertising or publicity pertaining to\n+# distribution of the software without specific, written prior\n+# permission.\n+#\n+# LUCENT DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,\n+# INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.\n+# IN NO EVENT SHALL LUCENT OR ANY OF ITS ENTITIES BE LIABLE FOR ANY\n+# SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n+# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER\n+# IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,\n+# ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n+# THIS SOFTWARE.\n+#\n+# ****************************************************************/\n+\n+.SUFFIXES: .c .o\n+CC = cc\n+CFLAGS = -g\n+\n+.c.o:\n+\t$(CC) -c $(CFLAGS) $*.c\n+\n+all: gdtoa.a\n+\n+gdtoa.a: dmisc.c g_Qfmt.c g__fmt.c gdtoa.c gethex.c gmisc.c hd_init.c\\\n+\t hexnan.c misc.c smisc.c strtopQ.c strtodg.c sum.c ulp.c\n+\t$(CC) -c $(CFLAGS) $?\n+\tx=`echo $? | sed 's/\\.c/.o/g'` && ar ruv gdtoa.a $$x && rm $$x\n+\tranlib gdtoa.a || true\n+\n+clean:\n+\trm -f *.[ao]"}, {"sha": "e5f7b046b2e87bdffae3adbf6c19a9b33125f4ce", "filename": "libquadmath/gdtoa/misc.c", "status": "added", "additions": 875, "deletions": 0, "changes": 875, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fgdtoa%2Fmisc.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,875 @@\n+/****************************************************************\n+\n+The author of this software is David M. Gay.\n+\n+Copyright (C) 1998, 1999 by Lucent Technologies\n+All Rights Reserved\n+\n+Permission to use, copy, modify, and distribute this software and\n+its documentation for any purpose and without fee is hereby\n+granted, provided that the above copyright notice appear in all\n+copies and that both that the copyright notice and this\n+permission notice and warranty disclaimer appear in supporting\n+documentation, and that the name of Lucent or any of its entities\n+not be used in advertising or publicity pertaining to\n+distribution of the software without specific, written prior\n+permission.\n+\n+LUCENT DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,\n+INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.\n+IN NO EVENT SHALL LUCENT OR ANY OF ITS ENTITIES BE LIABLE FOR ANY\n+SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n+WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER\n+IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,\n+ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n+THIS SOFTWARE.\n+\n+****************************************************************/\n+\n+/* Please send bug reports to David M. Gay (dmg at acm dot org,\n+ * with \" at \" changed at \"@\" and \" dot \" changed to \".\").\t*/\n+\n+#include \"gdtoaimp.h\"\n+\n+ static Bigint *freelist[Kmax+1];\n+#ifndef Omit_Private_Memory\n+#ifndef PRIVATE_MEM\n+#define PRIVATE_MEM 2304\n+#endif\n+#define PRIVATE_mem ((PRIVATE_MEM+sizeof(double)-1)/sizeof(double))\n+static double private_mem[PRIVATE_mem], *pmem_next = private_mem;\n+#endif\n+\n+ Bigint *\n+Balloc\n+#ifdef KR_headers\n+\t(k) int k;\n+#else\n+\t(int k)\n+#endif\n+{\n+\tint x;\n+\tBigint *rv;\n+#ifndef Omit_Private_Memory\n+\tunsigned int len;\n+#endif\n+\n+\tACQUIRE_DTOA_LOCK(0);\n+\t/* The k > Kmax case does not need ACQUIRE_DTOA_LOCK(0), */\n+\t/* but this case seems very unlikely. */\n+\tif (k <= Kmax && (rv = freelist[k]) !=0) {\n+\t\tfreelist[k] = rv->next;\n+\t\t}\n+\telse {\n+\t\tx = 1 << k;\n+#ifdef Omit_Private_Memory\n+\t\trv = (Bigint *)MALLOC(sizeof(Bigint) + (x-1)*sizeof(ULong));\n+#else\n+\t\tlen = (sizeof(Bigint) + (x-1)*sizeof(ULong) + sizeof(double) - 1)\n+\t\t\t/sizeof(double);\n+\t\tif (k <= Kmax && pmem_next - private_mem + len <= PRIVATE_mem) {\n+\t\t\trv = (Bigint*)pmem_next;\n+\t\t\tpmem_next += len;\n+\t\t\t}\n+\t\telse\n+\t\t\trv = (Bigint*)MALLOC(len*sizeof(double));\n+#endif\n+\t\trv->k = k;\n+\t\trv->maxwds = x;\n+\t\t}\n+\tFREE_DTOA_LOCK(0);\n+\trv->sign = rv->wds = 0;\n+\treturn rv;\n+\t}\n+\n+ void\n+Bfree\n+#ifdef KR_headers\n+\t(v) Bigint *v;\n+#else\n+\t(Bigint *v)\n+#endif\n+{\n+\tif (v) {\n+\t\tif (v->k > Kmax)\n+#ifdef FREE\n+\t\t\tFREE((void*)v);\n+#else\n+\t\t\tfree((void*)v);\n+#endif\n+\t\telse {\n+\t\t\tACQUIRE_DTOA_LOCK(0);\n+\t\t\tv->next = freelist[v->k];\n+\t\t\tfreelist[v->k] = v;\n+\t\t\tFREE_DTOA_LOCK(0);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+ int\n+lo0bits\n+#ifdef KR_headers\n+\t(y) ULong *y;\n+#else\n+\t(ULong *y)\n+#endif\n+{\n+\tint k;\n+\tULong x = *y;\n+\n+\tif (x & 7) {\n+\t\tif (x & 1)\n+\t\t\treturn 0;\n+\t\tif (x & 2) {\n+\t\t\t*y = x >> 1;\n+\t\t\treturn 1;\n+\t\t\t}\n+\t\t*y = x >> 2;\n+\t\treturn 2;\n+\t\t}\n+\tk = 0;\n+\tif (!(x & 0xffff)) {\n+\t\tk = 16;\n+\t\tx >>= 16;\n+\t\t}\n+\tif (!(x & 0xff)) {\n+\t\tk += 8;\n+\t\tx >>= 8;\n+\t\t}\n+\tif (!(x & 0xf)) {\n+\t\tk += 4;\n+\t\tx >>= 4;\n+\t\t}\n+\tif (!(x & 0x3)) {\n+\t\tk += 2;\n+\t\tx >>= 2;\n+\t\t}\n+\tif (!(x & 1)) {\n+\t\tk++;\n+\t\tx >>= 1;\n+\t\tif (!x)\n+\t\t\treturn 32;\n+\t\t}\n+\t*y = x;\n+\treturn k;\n+\t}\n+\n+ Bigint *\n+multadd\n+#ifdef KR_headers\n+\t(b, m, a) Bigint *b; int m, a;\n+#else\n+\t(Bigint *b, int m, int a)\t/* multiply by m and add a */\n+#endif\n+{\n+\tint i, wds;\n+#ifdef ULLong\n+\tULong *x;\n+\tULLong carry, y;\n+#else\n+\tULong carry, *x, y;\n+#ifdef Pack_32\n+\tULong xi, z;\n+#endif\n+#endif\n+\tBigint *b1;\n+\n+\twds = b->wds;\n+\tx = b->x;\n+\ti = 0;\n+\tcarry = a;\n+\tdo {\n+#ifdef ULLong\n+\t\ty = *x * (ULLong)m + carry;\n+\t\tcarry = y >> 32;\n+\t\t*x++ = y & 0xffffffffUL;\n+#else\n+#ifdef Pack_32\n+\t\txi = *x;\n+\t\ty = (xi & 0xffff) * m + carry;\n+\t\tz = (xi >> 16) * m + (y >> 16);\n+\t\tcarry = z >> 16;\n+\t\t*x++ = (z << 16) + (y & 0xffff);\n+#else\n+\t\ty = *x * m + carry;\n+\t\tcarry = y >> 16;\n+\t\t*x++ = y & 0xffff;\n+#endif\n+#endif\n+\t\t}\n+\t\twhile(++i < wds);\n+\tif (carry) {\n+\t\tif (wds >= b->maxwds) {\n+\t\t\tb1 = Balloc(b->k+1);\n+\t\t\tBcopy(b1, b);\n+\t\t\tBfree(b);\n+\t\t\tb = b1;\n+\t\t\t}\n+\t\tb->x[wds++] = carry;\n+\t\tb->wds = wds;\n+\t\t}\n+\treturn b;\n+\t}\n+\n+ int\n+hi0bits_D2A\n+#ifdef KR_headers\n+\t(x) ULong x;\n+#else\n+\t(ULong x)\n+#endif\n+{\n+\tint k = 0;\n+\n+\tif (!(x & 0xffff0000)) {\n+\t\tk = 16;\n+\t\tx <<= 16;\n+\t\t}\n+\tif (!(x & 0xff000000)) {\n+\t\tk += 8;\n+\t\tx <<= 8;\n+\t\t}\n+\tif (!(x & 0xf0000000)) {\n+\t\tk += 4;\n+\t\tx <<= 4;\n+\t\t}\n+\tif (!(x & 0xc0000000)) {\n+\t\tk += 2;\n+\t\tx <<= 2;\n+\t\t}\n+\tif (!(x & 0x80000000)) {\n+\t\tk++;\n+\t\tif (!(x & 0x40000000))\n+\t\t\treturn 32;\n+\t\t}\n+\treturn k;\n+\t}\n+\n+ Bigint *\n+i2b\n+#ifdef KR_headers\n+\t(i) int i;\n+#else\n+\t(int i)\n+#endif\n+{\n+\tBigint *b;\n+\n+\tb = Balloc(1);\n+\tb->x[0] = i;\n+\tb->wds = 1;\n+\treturn b;\n+\t}\n+\n+ Bigint *\n+mult\n+#ifdef KR_headers\n+\t(a, b) Bigint *a, *b;\n+#else\n+\t(Bigint *a, Bigint *b)\n+#endif\n+{\n+\tBigint *c;\n+\tint k, wa, wb, wc;\n+\tULong *x, *xa, *xae, *xb, *xbe, *xc, *xc0;\n+\tULong y;\n+#ifdef ULLong\n+\tULLong carry, z;\n+#else\n+\tULong carry, z;\n+#ifdef Pack_32\n+\tULong z2;\n+#endif\n+#endif\n+\n+\tif (a->wds < b->wds) {\n+\t\tc = a;\n+\t\ta = b;\n+\t\tb = c;\n+\t\t}\n+\tk = a->k;\n+\twa = a->wds;\n+\twb = b->wds;\n+\twc = wa + wb;\n+\tif (wc > a->maxwds)\n+\t\tk++;\n+\tc = Balloc(k);\n+\tfor(x = c->x, xa = x + wc; x < xa; x++)\n+\t\t*x = 0;\n+\txa = a->x;\n+\txae = xa + wa;\n+\txb = b->x;\n+\txbe = xb + wb;\n+\txc0 = c->x;\n+#ifdef ULLong\n+\tfor(; xb < xbe; xc0++) {\n+\t\tif ( (y = *xb++) !=0) {\n+\t\t\tx = xa;\n+\t\t\txc = xc0;\n+\t\t\tcarry = 0;\n+\t\t\tdo {\n+\t\t\t\tz = *x++ * (ULLong)y + *xc + carry;\n+\t\t\t\tcarry = z >> 32;\n+\t\t\t\t*xc++ = z & 0xffffffffUL;\n+\t\t\t\t}\n+\t\t\t\twhile(x < xae);\n+\t\t\t*xc = carry;\n+\t\t\t}\n+\t\t}\n+#else\n+#ifdef Pack_32\n+\tfor(; xb < xbe; xb++, xc0++) {\n+\t\tif ( (y = *xb & 0xffff) !=0) {\n+\t\t\tx = xa;\n+\t\t\txc = xc0;\n+\t\t\tcarry = 0;\n+\t\t\tdo {\n+\t\t\t\tz = (*x & 0xffff) * y + (*xc & 0xffff) + carry;\n+\t\t\t\tcarry = z >> 16;\n+\t\t\t\tz2 = (*x++ >> 16) * y + (*xc >> 16) + carry;\n+\t\t\t\tcarry = z2 >> 16;\n+\t\t\t\tStoreinc(xc, z2, z);\n+\t\t\t\t}\n+\t\t\t\twhile(x < xae);\n+\t\t\t*xc = carry;\n+\t\t\t}\n+\t\tif ( (y = *xb >> 16) !=0) {\n+\t\t\tx = xa;\n+\t\t\txc = xc0;\n+\t\t\tcarry = 0;\n+\t\t\tz2 = *xc;\n+\t\t\tdo {\n+\t\t\t\tz = (*x & 0xffff) * y + (*xc >> 16) + carry;\n+\t\t\t\tcarry = z >> 16;\n+\t\t\t\tStoreinc(xc, z, z2);\n+\t\t\t\tz2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;\n+\t\t\t\tcarry = z2 >> 16;\n+\t\t\t\t}\n+\t\t\t\twhile(x < xae);\n+\t\t\t*xc = z2;\n+\t\t\t}\n+\t\t}\n+#else\n+\tfor(; xb < xbe; xc0++) {\n+\t\tif ( (y = *xb++) !=0) {\n+\t\t\tx = xa;\n+\t\t\txc = xc0;\n+\t\t\tcarry = 0;\n+\t\t\tdo {\n+\t\t\t\tz = *x++ * y + *xc + carry;\n+\t\t\t\tcarry = z >> 16;\n+\t\t\t\t*xc++ = z & 0xffff;\n+\t\t\t\t}\n+\t\t\t\twhile(x < xae);\n+\t\t\t*xc = carry;\n+\t\t\t}\n+\t\t}\n+#endif\n+#endif\n+\tfor(xc0 = c->x, xc = xc0 + wc; wc > 0 && !*--xc; --wc) ;\n+\tc->wds = wc;\n+\treturn c;\n+\t}\n+\n+ static Bigint *p5s;\n+\n+ Bigint *\n+pow5mult\n+#ifdef KR_headers\n+\t(b, k) Bigint *b; int k;\n+#else\n+\t(Bigint *b, int k)\n+#endif\n+{\n+\tBigint *b1, *p5, *p51;\n+\tint i;\n+\tstatic int p05[3] = { 5, 25, 125 };\n+\n+\tif ( (i = k & 3) !=0)\n+\t\tb = multadd(b, p05[i-1], 0);\n+\n+\tif (!(k >>= 2))\n+\t\treturn b;\n+\tif ((p5 = p5s) == 0) {\n+\t\t/* first time */\n+#ifdef MULTIPLE_THREADS\n+\t\tACQUIRE_DTOA_LOCK(1);\n+\t\tif (!(p5 = p5s)) {\n+\t\t\tp5 = p5s = i2b(625);\n+\t\t\tp5->next = 0;\n+\t\t\t}\n+\t\tFREE_DTOA_LOCK(1);\n+#else\n+\t\tp5 = p5s = i2b(625);\n+\t\tp5->next = 0;\n+#endif\n+\t\t}\n+\tfor(;;) {\n+\t\tif (k & 1) {\n+\t\t\tb1 = mult(b, p5);\n+\t\t\tBfree(b);\n+\t\t\tb = b1;\n+\t\t\t}\n+\t\tif (!(k >>= 1))\n+\t\t\tbreak;\n+\t\tif ((p51 = p5->next) == 0) {\n+#ifdef MULTIPLE_THREADS\n+\t\t\tACQUIRE_DTOA_LOCK(1);\n+\t\t\tif (!(p51 = p5->next)) {\n+\t\t\t\tp51 = p5->next = mult(p5,p5);\n+\t\t\t\tp51->next = 0;\n+\t\t\t\t}\n+\t\t\tFREE_DTOA_LOCK(1);\n+#else\n+\t\t\tp51 = p5->next = mult(p5,p5);\n+\t\t\tp51->next = 0;\n+#endif\n+\t\t\t}\n+\t\tp5 = p51;\n+\t\t}\n+\treturn b;\n+\t}\n+\n+ Bigint *\n+lshift\n+#ifdef KR_headers\n+\t(b, k) Bigint *b; int k;\n+#else\n+\t(Bigint *b, int k)\n+#endif\n+{\n+\tint i, k1, n, n1;\n+\tBigint *b1;\n+\tULong *x, *x1, *xe, z;\n+\n+\tn = k >> kshift;\n+\tk1 = b->k;\n+\tn1 = n + b->wds + 1;\n+\tfor(i = b->maxwds; n1 > i; i <<= 1)\n+\t\tk1++;\n+\tb1 = Balloc(k1);\n+\tx1 = b1->x;\n+\tfor(i = 0; i < n; i++)\n+\t\t*x1++ = 0;\n+\tx = b->x;\n+\txe = x + b->wds;\n+\tif (k &= kmask) {\n+#ifdef Pack_32\n+\t\tk1 = 32 - k;\n+\t\tz = 0;\n+\t\tdo {\n+\t\t\t*x1++ = *x << k | z;\n+\t\t\tz = *x++ >> k1;\n+\t\t\t}\n+\t\t\twhile(x < xe);\n+\t\tif ((*x1 = z) !=0)\n+\t\t\t++n1;\n+#else\n+\t\tk1 = 16 - k;\n+\t\tz = 0;\n+\t\tdo {\n+\t\t\t*x1++ = *x << k  & 0xffff | z;\n+\t\t\tz = *x++ >> k1;\n+\t\t\t}\n+\t\t\twhile(x < xe);\n+\t\tif (*x1 = z)\n+\t\t\t++n1;\n+#endif\n+\t\t}\n+\telse do\n+\t\t*x1++ = *x++;\n+\t\twhile(x < xe);\n+\tb1->wds = n1 - 1;\n+\tBfree(b);\n+\treturn b1;\n+\t}\n+\n+ int\n+cmp\n+#ifdef KR_headers\n+\t(a, b) Bigint *a, *b;\n+#else\n+\t(Bigint *a, Bigint *b)\n+#endif\n+{\n+\tULong *xa, *xa0, *xb, *xb0;\n+\tint i, j;\n+\n+\ti = a->wds;\n+\tj = b->wds;\n+#ifdef DEBUG\n+\tif (i > 1 && !a->x[i-1])\n+\t\tBug(\"cmp called with a->x[a->wds-1] == 0\");\n+\tif (j > 1 && !b->x[j-1])\n+\t\tBug(\"cmp called with b->x[b->wds-1] == 0\");\n+#endif\n+\tif (i -= j)\n+\t\treturn i;\n+\txa0 = a->x;\n+\txa = xa0 + j;\n+\txb0 = b->x;\n+\txb = xb0 + j;\n+\tfor(;;) {\n+\t\tif (*--xa != *--xb)\n+\t\t\treturn *xa < *xb ? -1 : 1;\n+\t\tif (xa <= xa0)\n+\t\t\tbreak;\n+\t\t}\n+\treturn 0;\n+\t}\n+\n+ Bigint *\n+diff\n+#ifdef KR_headers\n+\t(a, b) Bigint *a, *b;\n+#else\n+\t(Bigint *a, Bigint *b)\n+#endif\n+{\n+\tBigint *c;\n+\tint i, wa, wb;\n+\tULong *xa, *xae, *xb, *xbe, *xc;\n+#ifdef ULLong\n+\tULLong borrow, y;\n+#else\n+\tULong borrow, y;\n+#ifdef Pack_32\n+\tULong z;\n+#endif\n+#endif\n+\n+\ti = cmp(a,b);\n+\tif (!i) {\n+\t\tc = Balloc(0);\n+\t\tc->wds = 1;\n+\t\tc->x[0] = 0;\n+\t\treturn c;\n+\t\t}\n+\tif (i < 0) {\n+\t\tc = a;\n+\t\ta = b;\n+\t\tb = c;\n+\t\ti = 1;\n+\t\t}\n+\telse\n+\t\ti = 0;\n+\tc = Balloc(a->k);\n+\tc->sign = i;\n+\twa = a->wds;\n+\txa = a->x;\n+\txae = xa + wa;\n+\twb = b->wds;\n+\txb = b->x;\n+\txbe = xb + wb;\n+\txc = c->x;\n+\tborrow = 0;\n+#ifdef ULLong\n+\tdo {\n+\t\ty = (ULLong)*xa++ - *xb++ - borrow;\n+\t\tborrow = y >> 32 & 1UL;\n+\t\t*xc++ = y & 0xffffffffUL;\n+\t\t}\n+\t\twhile(xb < xbe);\n+\twhile(xa < xae) {\n+\t\ty = *xa++ - borrow;\n+\t\tborrow = y >> 32 & 1UL;\n+\t\t*xc++ = y & 0xffffffffUL;\n+\t\t}\n+#else\n+#ifdef Pack_32\n+\tdo {\n+\t\ty = (*xa & 0xffff) - (*xb & 0xffff) - borrow;\n+\t\tborrow = (y & 0x10000) >> 16;\n+\t\tz = (*xa++ >> 16) - (*xb++ >> 16) - borrow;\n+\t\tborrow = (z & 0x10000) >> 16;\n+\t\tStoreinc(xc, z, y);\n+\t\t}\n+\t\twhile(xb < xbe);\n+\twhile(xa < xae) {\n+\t\ty = (*xa & 0xffff) - borrow;\n+\t\tborrow = (y & 0x10000) >> 16;\n+\t\tz = (*xa++ >> 16) - borrow;\n+\t\tborrow = (z & 0x10000) >> 16;\n+\t\tStoreinc(xc, z, y);\n+\t\t}\n+#else\n+\tdo {\n+\t\ty = *xa++ - *xb++ - borrow;\n+\t\tborrow = (y & 0x10000) >> 16;\n+\t\t*xc++ = y & 0xffff;\n+\t\t}\n+\t\twhile(xb < xbe);\n+\twhile(xa < xae) {\n+\t\ty = *xa++ - borrow;\n+\t\tborrow = (y & 0x10000) >> 16;\n+\t\t*xc++ = y & 0xffff;\n+\t\t}\n+#endif\n+#endif\n+\twhile(!*--xc)\n+\t\twa--;\n+\tc->wds = wa;\n+\treturn c;\n+\t}\n+\n+ double\n+b2d\n+#ifdef KR_headers\n+\t(a, e) Bigint *a; int *e;\n+#else\n+\t(Bigint *a, int *e)\n+#endif\n+{\n+\tULong *xa, *xa0, w, y, z;\n+\tint k;\n+\tU d;\n+#ifdef VAX\n+\tULong d0, d1;\n+#else\n+#define d0 word0(&d)\n+#define d1 word1(&d)\n+#endif\n+\n+\txa0 = a->x;\n+\txa = xa0 + a->wds;\n+\ty = *--xa;\n+#ifdef DEBUG\n+\tif (!y) Bug(\"zero y in b2d\");\n+#endif\n+\tk = hi0bits(y);\n+\t*e = 32 - k;\n+#ifdef Pack_32\n+\tif (k < Ebits) {\n+\t\td0 = Exp_1 | y >> (Ebits - k);\n+\t\tw = xa > xa0 ? *--xa : 0;\n+\t\td1 = y << ((32-Ebits) + k) | w >> (Ebits - k);\n+\t\tgoto ret_d;\n+\t\t}\n+\tz = xa > xa0 ? *--xa : 0;\n+\tif (k -= Ebits) {\n+\t\td0 = Exp_1 | y << k | z >> (32 - k);\n+\t\ty = xa > xa0 ? *--xa : 0;\n+\t\td1 = z << k | y >> (32 - k);\n+\t\t}\n+\telse {\n+\t\td0 = Exp_1 | y;\n+\t\td1 = z;\n+\t\t}\n+#else\n+\tif (k < Ebits + 16) {\n+\t\tz = xa > xa0 ? *--xa : 0;\n+\t\td0 = Exp_1 | y << k - Ebits | z >> Ebits + 16 - k;\n+\t\tw = xa > xa0 ? *--xa : 0;\n+\t\ty = xa > xa0 ? *--xa : 0;\n+\t\td1 = z << k + 16 - Ebits | w << k - Ebits | y >> 16 + Ebits - k;\n+\t\tgoto ret_d;\n+\t\t}\n+\tz = xa > xa0 ? *--xa : 0;\n+\tw = xa > xa0 ? *--xa : 0;\n+\tk -= Ebits + 16;\n+\td0 = Exp_1 | y << k + 16 | z << k | w >> 16 - k;\n+\ty = xa > xa0 ? *--xa : 0;\n+\td1 = w << k + 16 | y << k;\n+#endif\n+ ret_d:\n+#ifdef VAX\n+\tword0(&d) = d0 >> 16 | d0 << 16;\n+\tword1(&d) = d1 >> 16 | d1 << 16;\n+#endif\n+\treturn dval(&d);\n+\t}\n+#undef d0\n+#undef d1\n+\n+ Bigint *\n+d2b\n+#ifdef KR_headers\n+\t(dd, e, bits) double dd; int *e, *bits;\n+#else\n+\t(double dd, int *e, int *bits)\n+#endif\n+{\n+\tBigint *b;\n+\tU d;\n+#ifndef Sudden_Underflow\n+\tint i;\n+#endif\n+\tint de, k;\n+\tULong *x, y, z;\n+#ifdef VAX\n+\tULong d0, d1;\n+#else\n+#define d0 word0(&d)\n+#define d1 word1(&d)\n+#endif\n+\td.d = dd;\n+#ifdef VAX\n+\td0 = word0(&d) >> 16 | word0(&d) << 16;\n+\td1 = word1(&d) >> 16 | word1(&d) << 16;\n+#endif\n+\n+#ifdef Pack_32\n+\tb = Balloc(1);\n+#else\n+\tb = Balloc(2);\n+#endif\n+\tx = b->x;\n+\n+\tz = d0 & Frac_mask;\n+\td0 &= 0x7fffffff;\t/* clear sign bit, which we ignore */\n+#ifdef Sudden_Underflow\n+\tde = (int)(d0 >> Exp_shift);\n+#ifndef IBM\n+\tz |= Exp_msk11;\n+#endif\n+#else\n+\tif ( (de = (int)(d0 >> Exp_shift)) !=0)\n+\t\tz |= Exp_msk1;\n+#endif\n+#ifdef Pack_32\n+\tif ( (y = d1) !=0) {\n+\t\tif ( (k = lo0bits(&y)) !=0) {\n+\t\t\tx[0] = y | z << (32 - k);\n+\t\t\tz >>= k;\n+\t\t\t}\n+\t\telse\n+\t\t\tx[0] = y;\n+#ifndef Sudden_Underflow\n+\t\ti =\n+#endif\n+\t\t     b->wds = (x[1] = z) !=0 ? 2 : 1;\n+\t\t}\n+\telse {\n+\t\tk = lo0bits(&z);\n+\t\tx[0] = z;\n+#ifndef Sudden_Underflow\n+\t\ti =\n+#endif\n+\t\t    b->wds = 1;\n+\t\tk += 32;\n+\t\t}\n+#else\n+\tif ( (y = d1) !=0) {\n+\t\tif ( (k = lo0bits(&y)) !=0)\n+\t\t\tif (k >= 16) {\n+\t\t\t\tx[0] = y | z << 32 - k & 0xffff;\n+\t\t\t\tx[1] = z >> k - 16 & 0xffff;\n+\t\t\t\tx[2] = z >> k;\n+\t\t\t\ti = 2;\n+\t\t\t\t}\n+\t\t\telse {\n+\t\t\t\tx[0] = y & 0xffff;\n+\t\t\t\tx[1] = y >> 16 | z << 16 - k & 0xffff;\n+\t\t\t\tx[2] = z >> k & 0xffff;\n+\t\t\t\tx[3] = z >> k+16;\n+\t\t\t\ti = 3;\n+\t\t\t\t}\n+\t\telse {\n+\t\t\tx[0] = y & 0xffff;\n+\t\t\tx[1] = y >> 16;\n+\t\t\tx[2] = z & 0xffff;\n+\t\t\tx[3] = z >> 16;\n+\t\t\ti = 3;\n+\t\t\t}\n+\t\t}\n+\telse {\n+#ifdef DEBUG\n+\t\tif (!z)\n+\t\t\tBug(\"Zero passed to d2b\");\n+#endif\n+\t\tk = lo0bits(&z);\n+\t\tif (k >= 16) {\n+\t\t\tx[0] = z;\n+\t\t\ti = 0;\n+\t\t\t}\n+\t\telse {\n+\t\t\tx[0] = z & 0xffff;\n+\t\t\tx[1] = z >> 16;\n+\t\t\ti = 1;\n+\t\t\t}\n+\t\tk += 32;\n+\t\t}\n+\twhile(!x[i])\n+\t\t--i;\n+\tb->wds = i + 1;\n+#endif\n+#ifndef Sudden_Underflow\n+\tif (de) {\n+#endif\n+#ifdef IBM\n+\t\t*e = (de - Bias - (P-1) << 2) + k;\n+\t\t*bits = 4*P + 8 - k - hi0bits(word0(&d) & Frac_mask);\n+#else\n+\t\t*e = de - Bias - (P-1) + k;\n+\t\t*bits = P - k;\n+#endif\n+#ifndef Sudden_Underflow\n+\t\t}\n+\telse {\n+\t\t*e = de - Bias - (P-1) + 1 + k;\n+#ifdef Pack_32\n+\t\t*bits = 32*i - hi0bits(x[i-1]);\n+#else\n+\t\t*bits = (i+2)*16 - hi0bits(x[i]);\n+#endif\n+\t\t}\n+#endif\n+\treturn b;\n+\t}\n+#undef d0\n+#undef d1\n+\n+ CONST double\n+#ifdef IEEE_Arith\n+bigtens[] = { 1e16, 1e32, 1e64, 1e128, 1e256 };\n+CONST double tinytens[] = { 1e-16, 1e-32, 1e-64, 1e-128, 1e-256\n+\t\t};\n+#else\n+#ifdef IBM\n+bigtens[] = { 1e16, 1e32, 1e64 };\n+CONST double tinytens[] = { 1e-16, 1e-32, 1e-64 };\n+#else\n+bigtens[] = { 1e16, 1e32 };\n+CONST double tinytens[] = { 1e-16, 1e-32 };\n+#endif\n+#endif\n+\n+ CONST double\n+tens[] = {\n+\t\t1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9,\n+\t\t1e10, 1e11, 1e12, 1e13, 1e14, 1e15, 1e16, 1e17, 1e18, 1e19,\n+\t\t1e20, 1e21, 1e22\n+#ifdef VAX\n+\t\t, 1e23, 1e24\n+#endif\n+\t\t};\n+\n+ char *\n+#ifdef KR_headers\n+strcp_D2A(a, b) char *a; char *b;\n+#else\n+strcp_D2A(char *a, CONST char *b)\n+#endif\n+{\n+\twhile((*a = *b++))\n+\t\ta++;\n+\treturn a;\n+\t}\n+\n+#ifdef NO_STRING_H\n+\n+ Char *\n+#ifdef KR_headers\n+memcpy_D2A(a, b, len) Char *a; Char *b; size_t len;\n+#else\n+memcpy_D2A(void *a1, void *b1, size_t len)\n+#endif\n+{\n+\tchar *a = (char*)a1, *ae = a + len;\n+\tchar *b = (char*)b1, *a0 = a;\n+\twhile(a < ae)\n+\t\t*a++ = *b++;\n+\treturn a0;\n+\t}\n+\n+#endif /* NO_STRING_H */"}, {"sha": "f4dbafb21c5f7c37f7f3f87e9ce943fecffd2a9e", "filename": "libquadmath/gdtoa/smisc.c", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fsmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fsmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fgdtoa%2Fsmisc.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,191 @@\n+/****************************************************************\n+\n+The author of this software is David M. Gay.\n+\n+Copyright (C) 1998, 1999 by Lucent Technologies\n+All Rights Reserved\n+\n+Permission to use, copy, modify, and distribute this software and\n+its documentation for any purpose and without fee is hereby\n+granted, provided that the above copyright notice appear in all\n+copies and that both that the copyright notice and this\n+permission notice and warranty disclaimer appear in supporting\n+documentation, and that the name of Lucent or any of its entities\n+not be used in advertising or publicity pertaining to\n+distribution of the software without specific, written prior\n+permission.\n+\n+LUCENT DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,\n+INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.\n+IN NO EVENT SHALL LUCENT OR ANY OF ITS ENTITIES BE LIABLE FOR ANY\n+SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n+WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER\n+IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,\n+ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n+THIS SOFTWARE.\n+\n+****************************************************************/\n+\n+/* Please send bug reports to David M. Gay (dmg at acm dot org,\n+ * with \" at \" changed at \"@\" and \" dot \" changed to \".\").\t*/\n+\n+#include \"gdtoaimp.h\"\n+\n+ Bigint *\n+s2b\n+#ifdef KR_headers\n+\t(s, nd0, nd, y9, dplen) CONST char *s; int dplen, nd0, nd; ULong y9;\n+#else\n+\t(CONST char *s, int nd0, int nd, ULong y9, int dplen)\n+#endif\n+{\n+\tBigint *b;\n+\tint i, k;\n+\tLong x, y;\n+\n+\tx = (nd + 8) / 9;\n+\tfor(k = 0, y = 1; x > y; y <<= 1, k++) ;\n+#ifdef Pack_32\n+\tb = Balloc(k);\n+\tb->x[0] = y9;\n+\tb->wds = 1;\n+#else\n+\tb = Balloc(k+1);\n+\tb->x[0] = y9 & 0xffff;\n+\tb->wds = (b->x[1] = y9 >> 16) ? 2 : 1;\n+#endif\n+\n+\ti = 9;\n+\tif (9 < nd0) {\n+\t\ts += 9;\n+\t\tdo b = multadd(b, 10, *s++ - '0');\n+\t\t\twhile(++i < nd0);\n+\t\ts += dplen;\n+\t\t}\n+\telse\n+\t\ts += dplen + 9;\n+\tfor(; i < nd; i++)\n+\t\tb = multadd(b, 10, *s++ - '0');\n+\treturn b;\n+\t}\n+\n+ double\n+ratio\n+#ifdef KR_headers\n+\t(a, b) Bigint *a, *b;\n+#else\n+\t(Bigint *a, Bigint *b)\n+#endif\n+{\n+\tU da, db;\n+\tint k, ka, kb;\n+\n+\tdval(&da) = b2d(a, &ka);\n+\tdval(&db) = b2d(b, &kb);\n+\tk = ka - kb + ULbits*(a->wds - b->wds);\n+#ifdef IBM\n+\tif (k > 0) {\n+\t\tword0(&da) += (k >> 2)*Exp_msk1;\n+\t\tif (k &= 3)\n+\t\t\tdval(&da) *= 1 << k;\n+\t\t}\n+\telse {\n+\t\tk = -k;\n+\t\tword0(&db) += (k >> 2)*Exp_msk1;\n+\t\tif (k &= 3)\n+\t\t\tdval(&db) *= 1 << k;\n+\t\t}\n+#else\n+\tif (k > 0)\n+\t\tword0(&da) += k*Exp_msk1;\n+\telse {\n+\t\tk = -k;\n+\t\tword0(&db) += k*Exp_msk1;\n+\t\t}\n+#endif\n+\treturn dval(&da) / dval(&db);\n+\t}\n+\n+#ifdef INFNAN_CHECK\n+\n+ int\n+match\n+#ifdef KR_headers\n+\t(sp, t) char **sp, *t;\n+#else\n+\t(CONST char **sp, char *t)\n+#endif\n+{\n+\tint c, d;\n+\tCONST char *s = *sp;\n+\n+\twhile( (d = *t++) !=0) {\n+\t\tif ((c = *++s) >= 'A' && c <= 'Z')\n+\t\t\tc += 'a' - 'A';\n+\t\tif (c != d)\n+\t\t\treturn 0;\n+\t\t}\n+\t*sp = s + 1;\n+\treturn 1;\n+\t}\n+#endif /* INFNAN_CHECK */\n+\n+ void\n+#ifdef KR_headers\n+copybits(c, n, b) ULong *c; int n; Bigint *b;\n+#else\n+copybits(ULong *c, int n, Bigint *b)\n+#endif\n+{\n+\tULong *ce, *x, *xe;\n+#ifdef Pack_16\n+\tint nw, nw1;\n+#endif\n+\n+\tce = c + ((n-1) >> kshift) + 1;\n+\tx = b->x;\n+#ifdef Pack_32\n+\txe = x + b->wds;\n+\twhile(x < xe)\n+\t\t*c++ = *x++;\n+#else\n+\tnw = b->wds;\n+\tnw1 = nw & 1;\n+\tfor(xe = x + (nw - nw1); x < xe; x += 2)\n+\t\tStoreinc(c, x[1], x[0]);\n+\tif (nw1)\n+\t\t*c++ = *x;\n+#endif\n+\twhile(c < ce)\n+\t\t*c++ = 0;\n+\t}\n+\n+ ULong\n+#ifdef KR_headers\n+any_on(b, k) Bigint *b; int k;\n+#else\n+any_on(Bigint *b, int k)\n+#endif\n+{\n+\tint n, nwds;\n+\tULong *x, *x0, x1, x2;\n+\n+\tx = b->x;\n+\tnwds = b->wds;\n+\tn = k >> kshift;\n+\tif (n > nwds)\n+\t\tn = nwds;\n+\telse if (n < nwds && (k &= kmask)) {\n+\t\tx1 = x2 = x[n];\n+\t\tx1 >>= k;\n+\t\tx1 <<= k;\n+\t\tif (x1 != x2)\n+\t\t\treturn 1;\n+\t\t}\n+\tx0 = x;\n+\tx += n;\n+\twhile(x > x0)\n+\t\tif (*--x)\n+\t\t\treturn 1;\n+\treturn 0;\n+\t}"}, {"sha": "5059869ecf5f74a83908330f2e2a329f5607946c", "filename": "libquadmath/gdtoa/strtodg.c", "status": "added", "additions": 1065, "deletions": 0, "changes": 1065, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fstrtodg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fstrtodg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fgdtoa%2Fstrtodg.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,1065 @@\n+/****************************************************************\n+\n+The author of this software is David M. Gay.\n+\n+Copyright (C) 1998-2001 by Lucent Technologies\n+All Rights Reserved\n+\n+Permission to use, copy, modify, and distribute this software and\n+its documentation for any purpose and without fee is hereby\n+granted, provided that the above copyright notice appear in all\n+copies and that both that the copyright notice and this\n+permission notice and warranty disclaimer appear in supporting\n+documentation, and that the name of Lucent or any of its entities\n+not be used in advertising or publicity pertaining to\n+distribution of the software without specific, written prior\n+permission.\n+\n+LUCENT DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,\n+INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.\n+IN NO EVENT SHALL LUCENT OR ANY OF ITS ENTITIES BE LIABLE FOR ANY\n+SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n+WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER\n+IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,\n+ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n+THIS SOFTWARE.\n+\n+****************************************************************/\n+\n+/* Please send bug reports to David M. Gay (dmg at acm dot org,\n+ * with \" at \" changed at \"@\" and \" dot \" changed to \".\").\t*/\n+\n+#include \"gdtoaimp.h\"\n+\n+#ifdef USE_LOCALE\n+#include \"locale.h\"\n+#endif\n+\n+ static CONST int\n+fivesbits[] = {\t 0,  3,  5,  7, 10, 12, 14, 17, 19, 21,\n+\t\t24, 26, 28, 31, 33, 35, 38, 40, 42, 45,\n+\t\t47, 49, 52\n+#ifdef VAX\n+\t\t, 54, 56\n+#endif\n+\t\t};\n+\n+ Bigint *\n+#ifdef KR_headers\n+increment(b) Bigint *b;\n+#else\n+increment(Bigint *b)\n+#endif\n+{\n+\tULong *x, *xe;\n+\tBigint *b1;\n+#ifdef Pack_16\n+\tULong carry = 1, y;\n+#endif\n+\n+\tx = b->x;\n+\txe = x + b->wds;\n+#ifdef Pack_32\n+\tdo {\n+\t\tif (*x < (ULong)0xffffffffL) {\n+\t\t\t++*x;\n+\t\t\treturn b;\n+\t\t\t}\n+\t\t*x++ = 0;\n+\t\t} while(x < xe);\n+#else\n+\tdo {\n+\t\ty = *x + carry;\n+\t\tcarry = y >> 16;\n+\t\t*x++ = y & 0xffff;\n+\t\tif (!carry)\n+\t\t\treturn b;\n+\t\t} while(x < xe);\n+\tif (carry)\n+#endif\n+\t{\n+\t\tif (b->wds >= b->maxwds) {\n+\t\t\tb1 = Balloc(b->k+1);\n+\t\t\tBcopy(b1,b);\n+\t\t\tBfree(b);\n+\t\t\tb = b1;\n+\t\t\t}\n+\t\tb->x[b->wds++] = 1;\n+\t\t}\n+\treturn b;\n+\t}\n+\n+ void\n+#ifdef KR_headers\n+decrement(b) Bigint *b;\n+#else\n+decrement(Bigint *b)\n+#endif\n+{\n+\tULong *x, *xe;\n+#ifdef Pack_16\n+\tULong borrow = 1, y;\n+#endif\n+\n+\tx = b->x;\n+\txe = x + b->wds;\n+#ifdef Pack_32\n+\tdo {\n+\t\tif (*x) {\n+\t\t\t--*x;\n+\t\t\tbreak;\n+\t\t\t}\n+\t\t*x++ = 0xffffffffL;\n+\t\t}\n+\t\twhile(x < xe);\n+#else\n+\tdo {\n+\t\ty = *x - borrow;\n+\t\tborrow = (y & 0x10000) >> 16;\n+\t\t*x++ = y & 0xffff;\n+\t\t} while(borrow && x < xe);\n+#endif\n+\t}\n+\n+ static int\n+#ifdef KR_headers\n+all_on(b, n) Bigint *b; int n;\n+#else\n+all_on(Bigint *b, int n)\n+#endif\n+{\n+\tULong *x, *xe;\n+\n+\tx = b->x;\n+\txe = x + (n >> kshift);\n+\twhile(x < xe)\n+\t\tif ((*x++ & ALL_ON) != ALL_ON)\n+\t\t\treturn 0;\n+\tif (n &= kmask)\n+\t\treturn ((*x | (ALL_ON << n)) & ALL_ON) == ALL_ON;\n+\treturn 1;\n+\t}\n+\n+ Bigint *\n+#ifdef KR_headers\n+set_ones(b, n) Bigint *b; int n;\n+#else\n+set_ones(Bigint *b, int n)\n+#endif\n+{\n+\tint k;\n+\tULong *x, *xe;\n+\n+\tk = (n + ((1 << kshift) - 1)) >> kshift;\n+\tif (b->k < k) {\n+\t\tBfree(b);\n+\t\tb = Balloc(k);\n+\t\t}\n+\tk = n >> kshift;\n+\tif (n &= kmask)\n+\t\tk++;\n+\tb->wds = k;\n+\tx = b->x;\n+\txe = x + k;\n+\twhile(x < xe)\n+\t\t*x++ = ALL_ON;\n+\tif (n)\n+\t\tx[-1] >>= ULbits - n;\n+\treturn b;\n+\t}\n+\n+ static int\n+rvOK\n+#ifdef KR_headers\n+ (d, fpi, exp, bits, exact, rd, irv)\n+ U *d; FPI *fpi; Long *exp; ULong *bits; int exact, rd, *irv;\n+#else\n+ (U *d, FPI *fpi, Long *exp, ULong *bits, int exact, int rd, int *irv)\n+#endif\n+{\n+\tBigint *b;\n+\tULong carry, inex, lostbits;\n+\tint bdif, e, j, k, k1, nb, rv;\n+\n+\tcarry = rv = 0;\n+\tb = d2b(dval(d), &e, &bdif);\n+\tbdif -= nb = fpi->nbits;\n+\te += bdif;\n+\tif (bdif <= 0) {\n+\t\tif (exact)\n+\t\t\tgoto trunc;\n+\t\tgoto ret;\n+\t\t}\n+\tif (P == nb) {\n+\t\tif (\n+#ifndef IMPRECISE_INEXACT\n+\t\t\texact &&\n+#endif\n+\t\t\tfpi->rounding ==\n+#ifdef RND_PRODQUOT\n+\t\t\t\t\tFPI_Round_near\n+#else\n+\t\t\t\t\tFlt_Rounds\n+#endif\n+\t\t\t) goto trunc;\n+\t\tgoto ret;\n+\t\t}\n+\tswitch(rd) {\n+\t  case 1: /* round down (toward -Infinity) */\n+\t\tgoto trunc;\n+\t  case 2: /* round up (toward +Infinity) */\n+\t\tbreak;\n+\t  default: /* round near */\n+\t\tk = bdif - 1;\n+\t\tif (k < 0)\n+\t\t\tgoto trunc;\n+\t\tif (!k) {\n+\t\t\tif (!exact)\n+\t\t\t\tgoto ret;\n+\t\t\tif (b->x[0] & 2)\n+\t\t\t\tbreak;\n+\t\t\tgoto trunc;\n+\t\t\t}\n+\t\tif (b->x[k>>kshift] & ((ULong)1 << (k & kmask)))\n+\t\t\tbreak;\n+\t\tgoto trunc;\n+\t  }\n+\t/* \"break\" cases: round up 1 bit, then truncate; bdif > 0 */\n+\tcarry = 1;\n+ trunc:\n+\tinex = lostbits = 0;\n+\tif (bdif > 0) {\n+\t\tif ( (lostbits = any_on(b, bdif)) !=0)\n+\t\t\tinex = STRTOG_Inexlo;\n+\t\trshift(b, bdif);\n+\t\tif (carry) {\n+\t\t\tinex = STRTOG_Inexhi;\n+\t\t\tb = increment(b);\n+\t\t\tif ( (j = nb & kmask) !=0)\n+\t\t\t\tj = ULbits - j;\n+\t\t\tif (hi0bits(b->x[b->wds - 1]) != j) {\n+\t\t\t\tif (!lostbits)\n+\t\t\t\t\tlostbits = b->x[0] & 1;\n+\t\t\t\trshift(b, 1);\n+\t\t\t\te++;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\telse if (bdif < 0)\n+\t\tb = lshift(b, -bdif);\n+\tif (e < fpi->emin) {\n+\t\tk = fpi->emin - e;\n+\t\te = fpi->emin;\n+\t\tif (k > nb || fpi->sudden_underflow) {\n+\t\t\tb->wds = inex = 0;\n+\t\t\t*irv = STRTOG_Underflow | STRTOG_Inexlo;\n+\t\t\t}\n+\t\telse {\n+\t\t\tk1 = k - 1;\n+\t\t\tif (k1 > 0 && !lostbits)\n+\t\t\t\tlostbits = any_on(b, k1);\n+\t\t\tif (!lostbits && !exact)\n+\t\t\t\tgoto ret;\n+\t\t\tlostbits |=\n+\t\t\t  carry = b->x[k1>>kshift] & (1 << (k1 & kmask));\n+\t\t\trshift(b, k);\n+\t\t\t*irv = STRTOG_Denormal;\n+\t\t\tif (carry) {\n+\t\t\t\tb = increment(b);\n+\t\t\t\tinex = STRTOG_Inexhi | STRTOG_Underflow;\n+\t\t\t\t}\n+\t\t\telse if (lostbits)\n+\t\t\t\tinex = STRTOG_Inexlo | STRTOG_Underflow;\n+\t\t\t}\n+\t\t}\n+\telse if (e > fpi->emax) {\n+\t\te = fpi->emax + 1;\n+\t\t*irv = STRTOG_Infinite | STRTOG_Overflow | STRTOG_Inexhi;\n+#ifndef NO_ERRNO\n+\t\terrno = ERANGE;\n+#endif\n+\t\tb->wds = inex = 0;\n+\t\t}\n+\t*exp = e;\n+\tcopybits(bits, nb, b);\n+\t*irv |= inex;\n+\trv = 1;\n+ ret:\n+\tBfree(b);\n+\treturn rv;\n+\t}\n+\n+ static int\n+#ifdef KR_headers\n+mantbits(d) U *d;\n+#else\n+mantbits(U *d)\n+#endif\n+{\n+\tULong L;\n+#ifdef VAX\n+\tL = word1(d) << 16 | word1(d) >> 16;\n+\tif (L)\n+#else\n+\tif ( (L = word1(d)) !=0)\n+#endif\n+\t\treturn P - lo0bits(&L);\n+#ifdef VAX\n+\tL = word0(d) << 16 | word0(d) >> 16 | Exp_msk11;\n+#else\n+\tL = word0(d) | Exp_msk1;\n+#endif\n+\treturn P - 32 - lo0bits(&L);\n+\t}\n+\n+ int\n+strtodg\n+#ifdef KR_headers\n+\t(s00, se, fpi, exp, bits)\n+\tCONST char *s00; char **se; FPI *fpi; Long *exp; ULong *bits;\n+#else\n+\t(CONST char *s00, char **se, FPI *fpi, Long *exp, ULong *bits)\n+#endif\n+{\n+\tint abe, abits, asub;\n+\tint bb0, bb2, bb5, bbe, bd2, bd5, bbbits, bs2, c, decpt, denorm;\n+\tint dsign, e, e1, e2, emin, esign, finished, i, inex, irv;\n+\tint j, k, nbits, nd, nd0, nf, nz, nz0, rd, rvbits, rve, rve1, sign;\n+\tint sudden_underflow;\n+\tCONST char *s, *s0, *s1;\n+\tdouble adj0, tol;\n+\tLong L;\n+\tU adj, rv;\n+\tULong *b, *be, y, z;\n+\tBigint *ab, *bb, *bb1, *bd, *bd0, *bs, *delta, *rvb, *rvb0;\n+#ifdef USE_LOCALE /*{{*/\n+#ifdef NO_LOCALE_CACHE\n+\tchar *decimalpoint = localeconv()->decimal_point;\n+\tint dplen = strlen(decimalpoint);\n+#else\n+\tchar *decimalpoint;\n+\tstatic char *decimalpoint_cache;\n+\tstatic int dplen;\n+\tif (!(s0 = decimalpoint_cache)) {\n+\t\ts0 = localeconv()->decimal_point;\n+\t\tif ((decimalpoint_cache = (char*)MALLOC(strlen(s0) + 1))) {\n+\t\t\tstrcpy(decimalpoint_cache, s0);\n+\t\t\ts0 = decimalpoint_cache;\n+\t\t\t}\n+\t\tdplen = strlen(s0);\n+\t\t}\n+\tdecimalpoint = (char*)s0;\n+#endif /*NO_LOCALE_CACHE*/\n+#else  /*USE_LOCALE}{*/\n+#define dplen 1\n+#endif /*USE_LOCALE}}*/\n+\n+\tirv = STRTOG_Zero;\n+\tdenorm = sign = nz0 = nz = 0;\n+\tdval(&rv) = 0.;\n+\trvb = 0;\n+\tnbits = fpi->nbits;\n+\tfor(s = s00;;s++) switch(*s) {\n+\t\tcase '-':\n+\t\t\tsign = 1;\n+\t\t\t/* no break */\n+\t\tcase '+':\n+\t\t\tif (*++s)\n+\t\t\t\tgoto break2;\n+\t\t\t/* no break */\n+\t\tcase 0:\n+\t\t\tsign = 0;\n+\t\t\tirv = STRTOG_NoNumber;\n+\t\t\ts = s00;\n+\t\t\tgoto ret;\n+\t\tcase '\\t':\n+\t\tcase '\\n':\n+\t\tcase '\\v':\n+\t\tcase '\\f':\n+\t\tcase '\\r':\n+\t\tcase ' ':\n+\t\t\tcontinue;\n+\t\tdefault:\n+\t\t\tgoto break2;\n+\t\t}\n+ break2:\n+\tif (*s == '0') {\n+#ifndef NO_HEX_FP\n+\t\tswitch(s[1]) {\n+\t\t  case 'x':\n+\t\t  case 'X':\n+\t\t\tirv = gethex(&s, fpi, exp, &rvb, sign);\n+\t\t\tif (irv == STRTOG_NoNumber) {\n+\t\t\t\ts = s00;\n+\t\t\t\tsign = 0;\n+\t\t\t\t}\n+\t\t\tgoto ret;\n+\t\t  }\n+#endif\n+\t\tnz0 = 1;\n+\t\twhile(*++s == '0') ;\n+\t\tif (!*s)\n+\t\t\tgoto ret;\n+\t\t}\n+\tsudden_underflow = fpi->sudden_underflow;\n+\ts0 = s;\n+\ty = z = 0;\n+\tfor(decpt = nd = nf = 0; (c = *s) >= '0' && c <= '9'; nd++, s++)\n+\t\tif (nd < 9)\n+\t\t\ty = 10*y + c - '0';\n+\t\telse if (nd < 16)\n+\t\t\tz = 10*z + c - '0';\n+\tnd0 = nd;\n+#ifdef USE_LOCALE\n+\tif (c == *decimalpoint) {\n+\t\tfor(i = 1; decimalpoint[i]; ++i)\n+\t\t\tif (s[i] != decimalpoint[i])\n+\t\t\t\tgoto dig_done;\n+\t\ts += i;\n+\t\tc = *s;\n+#else\n+\tif (c == '.') {\n+\t\tc = *++s;\n+#endif\n+\t\tdecpt = 1;\n+\t\tif (!nd) {\n+\t\t\tfor(; c == '0'; c = *++s)\n+\t\t\t\tnz++;\n+\t\t\tif (c > '0' && c <= '9') {\n+\t\t\t\ts0 = s;\n+\t\t\t\tnf += nz;\n+\t\t\t\tnz = 0;\n+\t\t\t\tgoto have_dig;\n+\t\t\t\t}\n+\t\t\tgoto dig_done;\n+\t\t\t}\n+\t\tfor(; c >= '0' && c <= '9'; c = *++s) {\n+ have_dig:\n+\t\t\tnz++;\n+\t\t\tif (c -= '0') {\n+\t\t\t\tnf += nz;\n+\t\t\t\tfor(i = 1; i < nz; i++)\n+\t\t\t\t\tif (nd++ < 9)\n+\t\t\t\t\t\ty *= 10;\n+\t\t\t\t\telse if (nd <= DBL_DIG + 1)\n+\t\t\t\t\t\tz *= 10;\n+\t\t\t\tif (nd++ < 9)\n+\t\t\t\t\ty = 10*y + c;\n+\t\t\t\telse if (nd <= DBL_DIG + 1)\n+\t\t\t\t\tz = 10*z + c;\n+\t\t\t\tnz = 0;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}/*}*/\n+ dig_done:\n+\te = 0;\n+\tif (c == 'e' || c == 'E') {\n+\t\tif (!nd && !nz && !nz0) {\n+\t\t\tirv = STRTOG_NoNumber;\n+\t\t\ts = s00;\n+\t\t\tgoto ret;\n+\t\t\t}\n+\t\ts00 = s;\n+\t\tesign = 0;\n+\t\tswitch(c = *++s) {\n+\t\t\tcase '-':\n+\t\t\t\tesign = 1;\n+\t\t\tcase '+':\n+\t\t\t\tc = *++s;\n+\t\t\t}\n+\t\tif (c >= '0' && c <= '9') {\n+\t\t\twhile(c == '0')\n+\t\t\t\tc = *++s;\n+\t\t\tif (c > '0' && c <= '9') {\n+\t\t\t\tL = c - '0';\n+\t\t\t\ts1 = s;\n+\t\t\t\twhile((c = *++s) >= '0' && c <= '9')\n+\t\t\t\t\tL = 10*L + c - '0';\n+\t\t\t\tif (s - s1 > 8 || L > 19999)\n+\t\t\t\t\t/* Avoid confusion from exponents\n+\t\t\t\t\t * so large that e might overflow.\n+\t\t\t\t\t */\n+\t\t\t\t\te = 19999; /* safe for 16 bit ints */\n+\t\t\t\telse\n+\t\t\t\t\te = (int)L;\n+\t\t\t\tif (esign)\n+\t\t\t\t\te = -e;\n+\t\t\t\t}\n+\t\t\telse\n+\t\t\t\te = 0;\n+\t\t\t}\n+\t\telse\n+\t\t\ts = s00;\n+\t\t}\n+\tif (!nd) {\n+\t\tif (!nz && !nz0) {\n+#ifdef INFNAN_CHECK\n+\t\t\t/* Check for Nan and Infinity */\n+\t\t\tif (!decpt)\n+\t\t\t switch(c) {\n+\t\t\t  case 'i':\n+\t\t\t  case 'I':\n+\t\t\t\tif (match(&s,\"nf\")) {\n+\t\t\t\t\t--s;\n+\t\t\t\t\tif (!match(&s,\"inity\"))\n+\t\t\t\t\t\t++s;\n+\t\t\t\t\tirv = STRTOG_Infinite;\n+\t\t\t\t\tgoto infnanexp;\n+\t\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\t  case 'n':\n+\t\t\t  case 'N':\n+\t\t\t\tif (match(&s, \"an\")) {\n+\t\t\t\t\tirv = STRTOG_NaN;\n+\t\t\t\t\t*exp = fpi->emax + 1;\n+#ifndef No_Hex_NaN\n+\t\t\t\t\tif (*s == '(') /*)*/\n+\t\t\t\t\t\tirv = hexnan(&s, fpi, bits);\n+#endif\n+\t\t\t\t\tgoto infnanexp;\n+\t\t\t\t\t}\n+\t\t\t  }\n+#endif /* INFNAN_CHECK */\n+\t\t\tirv = STRTOG_NoNumber;\n+\t\t\ts = s00;\n+\t\t\t}\n+\t\tgoto ret;\n+\t\t}\n+\n+\tirv = STRTOG_Normal;\n+\te1 = e -= nf;\n+\trd = 0;\n+\tswitch(fpi->rounding & 3) {\n+\t  case FPI_Round_up:\n+\t\trd = 2 - sign;\n+\t\tbreak;\n+\t  case FPI_Round_zero:\n+\t\trd = 1;\n+\t\tbreak;\n+\t  case FPI_Round_down:\n+\t\trd = 1 + sign;\n+\t  }\n+\n+\t/* Now we have nd0 digits, starting at s0, followed by a\n+\t * decimal point, followed by nd-nd0 digits.  The number we're\n+\t * after is the integer represented by those digits times\n+\t * 10**e */\n+\n+\tif (!nd0)\n+\t\tnd0 = nd;\n+\tk = nd < DBL_DIG + 1 ? nd : DBL_DIG + 1;\n+\tdval(&rv) = y;\n+\tif (k > 9)\n+\t\tdval(&rv) = tens[k - 9] * dval(&rv) + z;\n+\tbd0 = 0;\n+\tif (nbits <= P && nd <= DBL_DIG) {\n+\t\tif (!e) {\n+\t\t\tif (rvOK(&rv, fpi, exp, bits, 1, rd, &irv))\n+\t\t\t\tgoto ret;\n+\t\t\t}\n+\t\telse if (e > 0) {\n+\t\t\tif (e <= Ten_pmax) {\n+#ifdef VAX\n+\t\t\t\tgoto vax_ovfl_check;\n+#else\n+\t\t\t\ti = fivesbits[e] + mantbits(&rv) <= P;\n+\t\t\t\t/* rv = */ rounded_product(dval(&rv), tens[e]);\n+\t\t\t\tif (rvOK(&rv, fpi, exp, bits, i, rd, &irv))\n+\t\t\t\t\tgoto ret;\n+\t\t\t\te1 -= e;\n+\t\t\t\tgoto rv_notOK;\n+#endif\n+\t\t\t\t}\n+\t\t\ti = DBL_DIG - nd;\n+\t\t\tif (e <= Ten_pmax + i) {\n+\t\t\t\t/* A fancier test would sometimes let us do\n+\t\t\t\t * this for larger i values.\n+\t\t\t\t */\n+\t\t\t\te2 = e - i;\n+\t\t\t\te1 -= i;\n+\t\t\t\tdval(&rv) *= tens[i];\n+#ifdef VAX\n+\t\t\t\t/* VAX exponent range is so narrow we must\n+\t\t\t\t * worry about overflow here...\n+\t\t\t\t */\n+ vax_ovfl_check:\n+\t\t\t\tdval(&adj) = dval(&rv);\n+\t\t\t\tword0(&adj) -= P*Exp_msk1;\n+\t\t\t\t/* adj = */ rounded_product(dval(&adj), tens[e2]);\n+\t\t\t\tif ((word0(&adj) & Exp_mask)\n+\t\t\t\t > Exp_msk1*(DBL_MAX_EXP+Bias-1-P))\n+\t\t\t\t\tgoto rv_notOK;\n+\t\t\t\tword0(&adj) += P*Exp_msk1;\n+\t\t\t\tdval(&rv) = dval(&adj);\n+#else\n+\t\t\t\t/* rv = */ rounded_product(dval(&rv), tens[e2]);\n+#endif\n+\t\t\t\tif (rvOK(&rv, fpi, exp, bits, 0, rd, &irv))\n+\t\t\t\t\tgoto ret;\n+\t\t\t\te1 -= e2;\n+\t\t\t\t}\n+\t\t\t}\n+#ifndef Inaccurate_Divide\n+\t\telse if (e >= -Ten_pmax) {\n+\t\t\t/* rv = */ rounded_quotient(dval(&rv), tens[-e]);\n+\t\t\tif (rvOK(&rv, fpi, exp, bits, 0, rd, &irv))\n+\t\t\t\tgoto ret;\n+\t\t\te1 -= e;\n+\t\t\t}\n+#endif\n+\t\t}\n+ rv_notOK:\n+\te1 += nd - k;\n+\n+\t/* Get starting approximation = rv * 10**e1 */\n+\n+\te2 = 0;\n+\tif (e1 > 0) {\n+\t\tif ( (i = e1 & 15) !=0)\n+\t\t\tdval(&rv) *= tens[i];\n+\t\tif (e1 &= ~15) {\n+\t\t\te1 >>= 4;\n+\t\t\twhile(e1 >= (1 << (n_bigtens-1))) {\n+\t\t\t\te2 += ((word0(&rv) & Exp_mask)\n+\t\t\t\t\t>> Exp_shift1) - Bias;\n+\t\t\t\tword0(&rv) &= ~Exp_mask;\n+\t\t\t\tword0(&rv) |= Bias << Exp_shift1;\n+\t\t\t\tdval(&rv) *= bigtens[n_bigtens-1];\n+\t\t\t\te1 -= 1 << (n_bigtens-1);\n+\t\t\t\t}\n+\t\t\te2 += ((word0(&rv) & Exp_mask) >> Exp_shift1) - Bias;\n+\t\t\tword0(&rv) &= ~Exp_mask;\n+\t\t\tword0(&rv) |= Bias << Exp_shift1;\n+\t\t\tfor(j = 0; e1 > 0; j++, e1 >>= 1)\n+\t\t\t\tif (e1 & 1)\n+\t\t\t\t\tdval(&rv) *= bigtens[j];\n+\t\t\t}\n+\t\t}\n+\telse if (e1 < 0) {\n+\t\te1 = -e1;\n+\t\tif ( (i = e1 & 15) !=0)\n+\t\t\tdval(&rv) /= tens[i];\n+\t\tif (e1 &= ~15) {\n+\t\t\te1 >>= 4;\n+\t\t\twhile(e1 >= (1 << (n_bigtens-1))) {\n+\t\t\t\te2 += ((word0(&rv) & Exp_mask)\n+\t\t\t\t\t>> Exp_shift1) - Bias;\n+\t\t\t\tword0(&rv) &= ~Exp_mask;\n+\t\t\t\tword0(&rv) |= Bias << Exp_shift1;\n+\t\t\t\tdval(&rv) *= tinytens[n_bigtens-1];\n+\t\t\t\te1 -= 1 << (n_bigtens-1);\n+\t\t\t\t}\n+\t\t\te2 += ((word0(&rv) & Exp_mask) >> Exp_shift1) - Bias;\n+\t\t\tword0(&rv) &= ~Exp_mask;\n+\t\t\tword0(&rv) |= Bias << Exp_shift1;\n+\t\t\tfor(j = 0; e1 > 0; j++, e1 >>= 1)\n+\t\t\t\tif (e1 & 1)\n+\t\t\t\t\tdval(&rv) *= tinytens[j];\n+\t\t\t}\n+\t\t}\n+#ifdef IBM\n+\t/* e2 is a correction to the (base 2) exponent of the return\n+\t * value, reflecting adjustments above to avoid overflow in the\n+\t * native arithmetic.  For native IBM (base 16) arithmetic, we\n+\t * must multiply e2 by 4 to change from base 16 to 2.\n+\t */\n+\te2 <<= 2;\n+#endif\n+\trvb = d2b(dval(&rv), &rve, &rvbits);\t/* rv = rvb * 2^rve */\n+\trve += e2;\n+\tif ((j = rvbits - nbits) > 0) {\n+\t\trshift(rvb, j);\n+\t\trvbits = nbits;\n+\t\trve += j;\n+\t\t}\n+\tbb0 = 0;\t/* trailing zero bits in rvb */\n+\te2 = rve + rvbits - nbits;\n+\tif (e2 > fpi->emax + 1)\n+\t\tgoto huge;\n+\trve1 = rve + rvbits - nbits;\n+\tif (e2 < (emin = fpi->emin)) {\n+\t\tdenorm = 1;\n+\t\tj = rve - emin;\n+\t\tif (j > 0) {\n+\t\t\trvb = lshift(rvb, j);\n+\t\t\trvbits += j;\n+\t\t\t}\n+\t\telse if (j < 0) {\n+\t\t\trvbits += j;\n+\t\t\tif (rvbits <= 0) {\n+\t\t\t\tif (rvbits < -1) {\n+ ufl:\n+\t\t\t\t\trvb->wds = 0;\n+\t\t\t\t\trvb->x[0] = 0;\n+\t\t\t\t\t*exp = emin;\n+\t\t\t\t\tirv = STRTOG_Underflow | STRTOG_Inexlo;\n+\t\t\t\t\tgoto ret;\n+\t\t\t\t\t}\n+\t\t\t\trvb->x[0] = rvb->wds = rvbits = 1;\n+\t\t\t\t}\n+\t\t\telse\n+\t\t\t\trshift(rvb, -j);\n+\t\t\t}\n+\t\trve = rve1 = emin;\n+\t\tif (sudden_underflow && e2 + 1 < emin)\n+\t\t\tgoto ufl;\n+\t\t}\n+\n+\t/* Now the hard part -- adjusting rv to the correct value.*/\n+\n+\t/* Put digits into bd: true value = bd * 10^e */\n+\n+\tbd0 = s2b(s0, nd0, nd, y, dplen);\n+\n+\tfor(;;) {\n+\t\tbd = Balloc(bd0->k);\n+\t\tBcopy(bd, bd0);\n+\t\tbb = Balloc(rvb->k);\n+\t\tBcopy(bb, rvb);\n+\t\tbbbits = rvbits - bb0;\n+\t\tbbe = rve + bb0;\n+\t\tbs = i2b(1);\n+\n+\t\tif (e >= 0) {\n+\t\t\tbb2 = bb5 = 0;\n+\t\t\tbd2 = bd5 = e;\n+\t\t\t}\n+\t\telse {\n+\t\t\tbb2 = bb5 = -e;\n+\t\t\tbd2 = bd5 = 0;\n+\t\t\t}\n+\t\tif (bbe >= 0)\n+\t\t\tbb2 += bbe;\n+\t\telse\n+\t\t\tbd2 -= bbe;\n+\t\tbs2 = bb2;\n+\t\tj = nbits + 1 - bbbits;\n+\t\ti = bbe + bbbits - nbits;\n+\t\tif (i < emin)\t/* denormal */\n+\t\t\tj += i - emin;\n+\t\tbb2 += j;\n+\t\tbd2 += j;\n+\t\ti = bb2 < bd2 ? bb2 : bd2;\n+\t\tif (i > bs2)\n+\t\t\ti = bs2;\n+\t\tif (i > 0) {\n+\t\t\tbb2 -= i;\n+\t\t\tbd2 -= i;\n+\t\t\tbs2 -= i;\n+\t\t\t}\n+\t\tif (bb5 > 0) {\n+\t\t\tbs = pow5mult(bs, bb5);\n+\t\t\tbb1 = mult(bs, bb);\n+\t\t\tBfree(bb);\n+\t\t\tbb = bb1;\n+\t\t\t}\n+\t\tbb2 -= bb0;\n+\t\tif (bb2 > 0)\n+\t\t\tbb = lshift(bb, bb2);\n+\t\telse if (bb2 < 0)\n+\t\t\trshift(bb, -bb2);\n+\t\tif (bd5 > 0)\n+\t\t\tbd = pow5mult(bd, bd5);\n+\t\tif (bd2 > 0)\n+\t\t\tbd = lshift(bd, bd2);\n+\t\tif (bs2 > 0)\n+\t\t\tbs = lshift(bs, bs2);\n+\t\tasub = 1;\n+\t\tinex = STRTOG_Inexhi;\n+\t\tdelta = diff(bb, bd);\n+\t\tif (delta->wds <= 1 && !delta->x[0])\n+\t\t\tbreak;\n+\t\tdsign = delta->sign;\n+\t\tdelta->sign = finished = 0;\n+\t\tL = 0;\n+\t\ti = cmp(delta, bs);\n+\t\tif (rd && i <= 0) {\n+\t\t\tirv = STRTOG_Normal;\n+\t\t\tif ( (finished = dsign ^ (rd&1)) !=0) {\n+\t\t\t\tif (dsign != 0) {\n+\t\t\t\t\tirv |= STRTOG_Inexhi;\n+\t\t\t\t\tgoto adj1;\n+\t\t\t\t\t}\n+\t\t\t\tirv |= STRTOG_Inexlo;\n+\t\t\t\tif (rve1 == emin)\n+\t\t\t\t\tgoto adj1;\n+\t\t\t\tfor(i = 0, j = nbits; j >= ULbits;\n+\t\t\t\t\t\ti++, j -= ULbits) {\n+\t\t\t\t\tif (rvb->x[i] & ALL_ON)\n+\t\t\t\t\t\tgoto adj1;\n+\t\t\t\t\t}\n+\t\t\t\tif (j > 1 && lo0bits(rvb->x + i) < j - 1)\n+\t\t\t\t\tgoto adj1;\n+\t\t\t\trve = rve1 - 1;\n+\t\t\t\trvb = set_ones(rvb, rvbits = nbits);\n+\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\tirv |= dsign ? STRTOG_Inexlo : STRTOG_Inexhi;\n+\t\t\tbreak;\n+\t\t\t}\n+\t\tif (i < 0) {\n+\t\t\t/* Error is less than half an ulp -- check for\n+\t\t\t * special case of mantissa a power of two.\n+\t\t\t */\n+\t\t\tirv = dsign\n+\t\t\t\t? STRTOG_Normal | STRTOG_Inexlo\n+\t\t\t\t: STRTOG_Normal | STRTOG_Inexhi;\n+\t\t\tif (dsign || bbbits > 1 || denorm || rve1 == emin)\n+\t\t\t\tbreak;\n+\t\t\tdelta = lshift(delta,1);\n+\t\t\tif (cmp(delta, bs) > 0) {\n+\t\t\t\tirv = STRTOG_Normal | STRTOG_Inexlo;\n+\t\t\t\tgoto drop_down;\n+\t\t\t\t}\n+\t\t\tbreak;\n+\t\t\t}\n+\t\tif (i == 0) {\n+\t\t\t/* exactly half-way between */\n+\t\t\tif (dsign) {\n+\t\t\t\tif (denorm && all_on(rvb, rvbits)) {\n+\t\t\t\t\t/*boundary case -- increment exponent*/\n+\t\t\t\t\trvb->wds = 1;\n+\t\t\t\t\trvb->x[0] = 1;\n+\t\t\t\t\trve = emin + nbits - (rvbits = 1);\n+\t\t\t\t\tirv = STRTOG_Normal | STRTOG_Inexhi;\n+\t\t\t\t\tdenorm = 0;\n+\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\tirv = STRTOG_Normal | STRTOG_Inexlo;\n+\t\t\t\t}\n+\t\t\telse if (bbbits == 1) {\n+\t\t\t\tirv = STRTOG_Normal;\n+ drop_down:\n+\t\t\t\t/* boundary case -- decrement exponent */\n+\t\t\t\tif (rve1 == emin) {\n+\t\t\t\t\tirv = STRTOG_Normal | STRTOG_Inexhi;\n+\t\t\t\t\tif (rvb->wds == 1 && rvb->x[0] == 1)\n+\t\t\t\t\t\tsudden_underflow = 1;\n+\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\trve -= nbits;\n+\t\t\t\trvb = set_ones(rvb, rvbits = nbits);\n+\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\telse\n+\t\t\t\tirv = STRTOG_Normal | STRTOG_Inexhi;\n+\t\t\tif ((bbbits < nbits && !denorm) || !(rvb->x[0] & 1))\n+\t\t\t\tbreak;\n+\t\t\tif (dsign) {\n+\t\t\t\trvb = increment(rvb);\n+\t\t\t\tj = kmask & (ULbits - (rvbits & kmask));\n+\t\t\t\tif (hi0bits(rvb->x[rvb->wds - 1]) != j)\n+\t\t\t\t\trvbits++;\n+\t\t\t\tirv = STRTOG_Normal | STRTOG_Inexhi;\n+\t\t\t\t}\n+\t\t\telse {\n+\t\t\t\tif (bbbits == 1)\n+\t\t\t\t\tgoto undfl;\n+\t\t\t\tdecrement(rvb);\n+\t\t\t\tirv = STRTOG_Normal | STRTOG_Inexlo;\n+\t\t\t\t}\n+\t\t\tbreak;\n+\t\t\t}\n+\t\tif ((dval(&adj) = ratio(delta, bs)) <= 2.) {\n+ adj1:\n+\t\t\tinex = STRTOG_Inexlo;\n+\t\t\tif (dsign) {\n+\t\t\t\tasub = 0;\n+\t\t\t\tinex = STRTOG_Inexhi;\n+\t\t\t\t}\n+\t\t\telse if (denorm && bbbits <= 1) {\n+ undfl:\n+\t\t\t\trvb->wds = 0;\n+\t\t\t\trve = emin;\n+\t\t\t\tirv = STRTOG_Underflow | STRTOG_Inexlo;\n+\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\tadj0 = dval(&adj) = 1.;\n+\t\t\t}\n+\t\telse {\n+\t\t\tadj0 = dval(&adj) *= 0.5;\n+\t\t\tif (dsign) {\n+\t\t\t\tasub = 0;\n+\t\t\t\tinex = STRTOG_Inexlo;\n+\t\t\t\t}\n+\t\t\tif (dval(&adj) < 2147483647.) {\n+\t\t\t\tL = adj0;\n+\t\t\t\tadj0 -= L;\n+\t\t\t\tswitch(rd) {\n+\t\t\t\t  case 0:\n+\t\t\t\t\tif (adj0 >= .5)\n+\t\t\t\t\t\tgoto inc_L;\n+\t\t\t\t\tbreak;\n+\t\t\t\t  case 1:\n+\t\t\t\t\tif (asub && adj0 > 0.)\n+\t\t\t\t\t\tgoto inc_L;\n+\t\t\t\t\tbreak;\n+\t\t\t\t  case 2:\n+\t\t\t\t\tif (!asub && adj0 > 0.) {\n+ inc_L:\n+\t\t\t\t\t\tL++;\n+\t\t\t\t\t\tinex = STRTOG_Inexact - inex;\n+\t\t\t\t\t\t}\n+\t\t\t\t  }\n+\t\t\t\tdval(&adj) = L;\n+\t\t\t\t}\n+\t\t\t}\n+\t\ty = rve + rvbits;\n+\n+\t\t/* adj *= ulp(dval(&rv)); */\n+\t\t/* if (asub) rv -= adj; else rv += adj; */\n+\n+\t\tif (!denorm && rvbits < nbits) {\n+\t\t\trvb = lshift(rvb, j = nbits - rvbits);\n+\t\t\trve -= j;\n+\t\t\trvbits = nbits;\n+\t\t\t}\n+\t\tab = d2b(dval(&adj), &abe, &abits);\n+\t\tif (abe < 0)\n+\t\t\trshift(ab, -abe);\n+\t\telse if (abe > 0)\n+\t\t\tab = lshift(ab, abe);\n+\t\trvb0 = rvb;\n+\t\tif (asub) {\n+\t\t\t/* rv -= adj; */\n+\t\t\tj = hi0bits(rvb->x[rvb->wds-1]);\n+\t\t\trvb = diff(rvb, ab);\n+\t\t\tk = rvb0->wds - 1;\n+\t\t\tif (denorm)\n+\t\t\t\t/* do nothing */;\n+\t\t\telse if (rvb->wds <= k\n+\t\t\t\t|| hi0bits( rvb->x[k]) >\n+\t\t\t\t   hi0bits(rvb0->x[k])) {\n+\t\t\t\t/* unlikely; can only have lost 1 high bit */\n+\t\t\t\tif (rve1 == emin) {\n+\t\t\t\t\t--rvbits;\n+\t\t\t\t\tdenorm = 1;\n+\t\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\trvb = lshift(rvb, 1);\n+\t\t\t\t\t--rve;\n+\t\t\t\t\t--rve1;\n+\t\t\t\t\tL = finished = 0;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\telse {\n+\t\t\trvb = sum(rvb, ab);\n+\t\t\tk = rvb->wds - 1;\n+\t\t\tif (k >= rvb0->wds\n+\t\t\t || hi0bits(rvb->x[k]) < hi0bits(rvb0->x[k])) {\n+\t\t\t\tif (denorm) {\n+\t\t\t\t\tif (++rvbits == nbits)\n+\t\t\t\t\t\tdenorm = 0;\n+\t\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\trshift(rvb, 1);\n+\t\t\t\t\trve++;\n+\t\t\t\t\trve1++;\n+\t\t\t\t\tL = 0;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\tBfree(ab);\n+\t\tBfree(rvb0);\n+\t\tif (finished)\n+\t\t\tbreak;\n+\n+\t\tz = rve + rvbits;\n+\t\tif (y == z && L) {\n+\t\t\t/* Can we stop now? */\n+\t\t\ttol = dval(&adj) * 5e-16; /* > max rel error */\n+\t\t\tdval(&adj) = adj0 - .5;\n+\t\t\tif (dval(&adj) < -tol) {\n+\t\t\t\tif (adj0 > tol) {\n+\t\t\t\t\tirv |= inex;\n+\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\telse if (dval(&adj) > tol && adj0 < 1. - tol) {\n+\t\t\t\tirv |= inex;\n+\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\tbb0 = denorm ? 0 : trailz(rvb);\n+\t\tBfree(bb);\n+\t\tBfree(bd);\n+\t\tBfree(bs);\n+\t\tBfree(delta);\n+\t\t}\n+\tif (!denorm && (j = nbits - rvbits)) {\n+\t\tif (j > 0)\n+\t\t\trvb = lshift(rvb, j);\n+\t\telse\n+\t\t\trshift(rvb, -j);\n+\t\trve -= j;\n+\t\t}\n+\t*exp = rve;\n+\tBfree(bb);\n+\tBfree(bd);\n+\tBfree(bs);\n+\tBfree(bd0);\n+\tBfree(delta);\n+\tif (rve > fpi->emax) {\n+\t\tswitch(fpi->rounding & 3) {\n+\t\t  case FPI_Round_near:\n+\t\t\tgoto huge;\n+\t\t  case FPI_Round_up:\n+\t\t\tif (!sign)\n+\t\t\t\tgoto huge;\n+\t\t\tbreak;\n+\t\t  case FPI_Round_down:\n+\t\t\tif (sign)\n+\t\t\t\tgoto huge;\n+\t\t  }\n+\t\t/* Round to largest representable magnitude */\n+\t\tBfree(rvb);\n+\t\trvb = 0;\n+\t\tirv = STRTOG_Normal | STRTOG_Inexlo;\n+\t\t*exp = fpi->emax;\n+\t\tb = bits;\n+\t\tbe = b + ((fpi->nbits + 31) >> 5);\n+\t\twhile(b < be)\n+\t\t\t*b++ = -1;\n+\t\tif ((j = fpi->nbits & 0x1f))\n+\t\t\t*--be >>= (32 - j);\n+\t\tgoto ret;\n+ huge:\n+\t\trvb->wds = 0;\n+\t\tirv = STRTOG_Infinite | STRTOG_Overflow | STRTOG_Inexhi;\n+#ifndef NO_ERRNO\n+\t\terrno = ERANGE;\n+#endif\n+ infnanexp:\n+\t\t*exp = fpi->emax + 1;\n+\t\t}\n+ ret:\n+\tif (denorm) {\n+\t\tif (sudden_underflow) {\n+\t\t\trvb->wds = 0;\n+\t\t\tirv = STRTOG_Underflow | STRTOG_Inexlo;\n+#ifndef NO_ERRNO\n+\t\t\terrno = ERANGE;\n+#endif\n+\t\t\t}\n+\t\telse  {\n+\t\t\tirv = (irv & ~STRTOG_Retmask) |\n+\t\t\t\t(rvb->wds > 0 ? STRTOG_Denormal : STRTOG_Zero);\n+\t\t\tif (irv & STRTOG_Inexact) {\n+\t\t\t\tirv |= STRTOG_Underflow;\n+#ifndef NO_ERRNO\n+\t\t\t\terrno = ERANGE;\n+#endif\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\tif (se)\n+\t\t*se = (char *)s;\n+\tif (sign)\n+\t\tirv |= STRTOG_Neg;\n+\tif (rvb) {\n+\t\tcopybits(bits, nbits, rvb);\n+\t\tBfree(rvb);\n+\t\t}\n+\treturn irv;\n+\t}"}, {"sha": "ed7fb9c863274d80b914db9cbe983634a47c6e92", "filename": "libquadmath/gdtoa/strtopQ.c", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2FstrtopQ.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2FstrtopQ.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fgdtoa%2FstrtopQ.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,106 @@\n+/****************************************************************\n+\n+The author of this software is David M. Gay.\n+\n+Copyright (C) 1998, 2000 by Lucent Technologies\n+All Rights Reserved\n+\n+Permission to use, copy, modify, and distribute this software and\n+its documentation for any purpose and without fee is hereby\n+granted, provided that the above copyright notice appear in all\n+copies and that both that the copyright notice and this\n+permission notice and warranty disclaimer appear in supporting\n+documentation, and that the name of Lucent or any of its entities\n+not be used in advertising or publicity pertaining to\n+distribution of the software without specific, written prior\n+permission.\n+\n+LUCENT DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,\n+INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.\n+IN NO EVENT SHALL LUCENT OR ANY OF ITS ENTITIES BE LIABLE FOR ANY\n+SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n+WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER\n+IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,\n+ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n+THIS SOFTWARE.\n+\n+****************************************************************/\n+\n+/* Please send bug reports to David M. Gay (dmg at acm dot org,\n+ * with \" at \" changed at \"@\" and \" dot \" changed to \".\").\t*/\n+\n+#include \"gdtoaimp.h\"\n+\n+#undef _0\n+#undef _1\n+\n+/* one or the other of IEEE_MC68k or IEEE_8087 should be #defined */\n+\n+#ifdef IEEE_MC68k\n+#define _0 0\n+#define _1 1\n+#define _2 2\n+#define _3 3\n+#endif\n+#ifdef IEEE_8087\n+#define _0 3\n+#define _1 2\n+#define _2 1\n+#define _3 0\n+#endif\n+\n+ int\n+#ifdef KR_headers\n+quadmath_strtopQ(s, sp, V) CONST char *s; char **sp; void *V;\n+#else\n+quadmath_strtopQ(CONST char *s, char **sp, void *V)\n+#endif\n+{\n+\tstatic FPI fpi0 = { 113, 1-16383-113+1, 32766 - 16383 - 113 + 1, 1, SI };\n+\tULong bits[4];\n+\tLong exp;\n+\tint k;\n+\tULong *L = (ULong*)V;\n+#ifdef Honor_FLT_ROUNDS\n+#include \"gdtoa_fltrnds.h\"\n+#else\n+#define fpi &fpi0\n+#endif\n+\n+\tk = strtodg(s, sp, fpi, &exp, bits);\n+\tswitch(k & STRTOG_Retmask) {\n+\t  case STRTOG_NoNumber:\n+\t  case STRTOG_Zero:\n+\t\tL[0] = L[1] = L[2] = L[3] = 0;\n+\t\tbreak;\n+\n+\t  case STRTOG_Normal:\n+\t  case STRTOG_NaNbits:\n+\t\tL[_3] = bits[0];\n+\t\tL[_2] = bits[1];\n+\t\tL[_1] = bits[2];\n+\t\tL[_0] = (bits[3] & ~0x10000) | ((exp + 0x3fff + 112) << 16);\n+\t\tbreak;\n+\n+\t  case STRTOG_Denormal:\n+\t\tL[_3] = bits[0];\n+\t\tL[_2] = bits[1];\n+\t\tL[_1] = bits[2];\n+\t\tL[_0] = bits[3];\n+\t\tbreak;\n+\n+\t  case STRTOG_Infinite:\n+\t\tL[_0] = 0x7fff0000;\n+\t\tL[_1] = L[_2] = L[_3] = 0;\n+\t\tbreak;\n+\n+\t  case STRTOG_NaN:\n+\t\tL[0] = ld_QNAN0;\n+\t\tL[1] = ld_QNAN1;\n+\t\tL[2] = ld_QNAN2;\n+\t\tL[3] = ld_QNAN3;\n+\t  }\n+\tif (k & STRTOG_Neg)\n+\t\tL[_0] |= 0x80000000L;\n+\treturn k;\n+\t}"}, {"sha": "dc0c88bcfab85f022a52a99da024a61cadddceca", "filename": "libquadmath/gdtoa/sum.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fsum.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fsum.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fgdtoa%2Fsum.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,98 @@\n+/****************************************************************\n+\n+The author of this software is David M. Gay.\n+\n+Copyright (C) 1998 by Lucent Technologies\n+All Rights Reserved\n+\n+Permission to use, copy, modify, and distribute this software and\n+its documentation for any purpose and without fee is hereby\n+granted, provided that the above copyright notice appear in all\n+copies and that both that the copyright notice and this\n+permission notice and warranty disclaimer appear in supporting\n+documentation, and that the name of Lucent or any of its entities\n+not be used in advertising or publicity pertaining to\n+distribution of the software without specific, written prior\n+permission.\n+\n+LUCENT DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,\n+INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.\n+IN NO EVENT SHALL LUCENT OR ANY OF ITS ENTITIES BE LIABLE FOR ANY\n+SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n+WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER\n+IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,\n+ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n+THIS SOFTWARE.\n+\n+****************************************************************/\n+\n+/* Please send bug reports to David M. Gay (dmg at acm dot org,\n+ * with \" at \" changed at \"@\" and \" dot \" changed to \".\").\t*/\n+\n+#include \"gdtoaimp.h\"\n+\n+ Bigint *\n+#ifdef KR_headers\n+sum(a, b) Bigint *a; Bigint *b;\n+#else\n+sum(Bigint *a, Bigint *b)\n+#endif\n+{\n+\tBigint *c;\n+\tULong carry, *xc, *xa, *xb, *xe, y;\n+#ifdef Pack_32\n+\tULong z;\n+#endif\n+\n+\tif (a->wds < b->wds) {\n+\t\tc = b; b = a; a = c;\n+\t\t}\n+\tc = Balloc(a->k);\n+\tc->wds = a->wds;\n+\tcarry = 0;\n+\txa = a->x;\n+\txb = b->x;\n+\txc = c->x;\n+\txe = xc + b->wds;\n+#ifdef Pack_32\n+\tdo {\n+\t\ty = (*xa & 0xffff) + (*xb & 0xffff) + carry;\n+\t\tcarry = (y & 0x10000) >> 16;\n+\t\tz = (*xa++ >> 16) + (*xb++ >> 16) + carry;\n+\t\tcarry = (z & 0x10000) >> 16;\n+\t\tStoreinc(xc, z, y);\n+\t\t}\n+\t\twhile(xc < xe);\n+\txe += a->wds - b->wds;\n+\twhile(xc < xe) {\n+\t\ty = (*xa & 0xffff) + carry;\n+\t\tcarry = (y & 0x10000) >> 16;\n+\t\tz = (*xa++ >> 16) + carry;\n+\t\tcarry = (z & 0x10000) >> 16;\n+\t\tStoreinc(xc, z, y);\n+\t\t}\n+#else\n+\tdo {\n+\t\ty = *xa++ + *xb++ + carry;\n+\t\tcarry = (y & 0x10000) >> 16;\n+\t\t*xc++ = y & 0xffff;\n+\t\t}\n+\t\twhile(xc < xe);\n+\txe += a->wds - b->wds;\n+\twhile(xc < xe) {\n+\t\ty = *xa++ + carry;\n+\t\tcarry = (y & 0x10000) >> 16;\n+\t\t*xc++ = y & 0xffff;\n+\t\t}\n+#endif\n+\tif (carry) {\n+\t\tif (c->wds == c->maxwds) {\n+\t\t\tb = Balloc(c->k + 1);\n+\t\t\tBcopy(b, c);\n+\t\t\tBfree(c);\n+\t\t\tc = b;\n+\t\t\t}\n+\t\tc->x[c->wds++] = 1;\n+\t\t}\n+\treturn c;\n+\t}"}, {"sha": "17e9f862c44331485ef40bbae5a43ff9374ed67b", "filename": "libquadmath/gdtoa/ulp.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fulp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fgdtoa%2Fulp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fgdtoa%2Fulp.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,70 @@\n+/****************************************************************\n+\n+The author of this software is David M. Gay.\n+\n+Copyright (C) 1998, 1999 by Lucent Technologies\n+All Rights Reserved\n+\n+Permission to use, copy, modify, and distribute this software and\n+its documentation for any purpose and without fee is hereby\n+granted, provided that the above copyright notice appear in all\n+copies and that both that the copyright notice and this\n+permission notice and warranty disclaimer appear in supporting\n+documentation, and that the name of Lucent or any of its entities\n+not be used in advertising or publicity pertaining to\n+distribution of the software without specific, written prior\n+permission.\n+\n+LUCENT DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,\n+INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.\n+IN NO EVENT SHALL LUCENT OR ANY OF ITS ENTITIES BE LIABLE FOR ANY\n+SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n+WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER\n+IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,\n+ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n+THIS SOFTWARE.\n+\n+****************************************************************/\n+\n+/* Please send bug reports to David M. Gay (dmg at acm dot org,\n+ * with \" at \" changed at \"@\" and \" dot \" changed to \".\").\t*/\n+\n+#include \"gdtoaimp.h\"\n+\n+ double\n+ulp\n+#ifdef KR_headers\n+\t(x) U *x;\n+#else\n+\t(U *x)\n+#endif\n+{\n+\tLong L;\n+\tU a;\n+\n+\tL = (word0(x) & Exp_mask) - (P-1)*Exp_msk1;\n+#ifndef Sudden_Underflow\n+\tif (L > 0) {\n+#endif\n+#ifdef IBM\n+\t\tL |= Exp_msk1 >> 4;\n+#endif\n+\t\tword0(&a) = L;\n+\t\tword1(&a) = 0;\n+#ifndef Sudden_Underflow\n+\t\t}\n+\telse {\n+\t\tL = -L >> Exp_shift;\n+\t\tif (L < Exp_shift) {\n+\t\t\tword0(&a) = 0x80000 >> L;\n+\t\t\tword1(&a) = 0;\n+\t\t\t}\n+\t\telse {\n+\t\t\tword0(&a) = 0;\n+\t\t\tL -= Exp_shift;\n+\t\t\tword1(&a) = L >= 31 ? 1 : 1 << (31 - L);\n+\t\t\t}\n+\t\t}\n+#endif\n+\treturn dval(&a);\n+\t}"}, {"sha": "d05cf424134fd6c0db31a1bb8b3ae9b0ac72a993", "filename": "libquadmath/libtool-version", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Flibtool-version", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Flibtool-version", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Flibtool-version?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,6 @@\n+# This file is used to maintain libtool version info for libgfortran.\n+# See the libtool manual to understand the meaning of the fields.\n+# This is a separate file so that version updates don't involve re-running\n+# automake.\n+# CURRENT:REVISION:AGE\n+0:0:0"}, {"sha": "b0a1e4e54961f6ed2ba38a4c92a9242f3cf889a3", "filename": "libquadmath/math/acoshq.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Facoshq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Facoshq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Facoshq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,59 @@\n+/* e_acoshl.c -- long double version of e_acosh.c.\n+ * Conversion to long double by Jakub Jelinek, jj@ultra.linux.cz.\n+ */\n+\n+/*\n+ * ====================================================\n+ * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n+ *\n+ * Developed at SunPro, a Sun Microsystems, Inc. business.\n+ * Permission to use, copy, modify, and distribute this\n+ * software is freely granted, provided that this notice\n+ * is preserved.\n+ * ====================================================\n+ */\n+\n+/* __ieee754_acoshl(x)\n+ * Method :\n+ *\tBased on\n+ *\t\tacoshl(x) = logl [ x + sqrtl(x*x-1) ]\n+ *\twe have\n+ *\t\tacoshl(x) := logl(x)+ln2,\tif x is large; else\n+ *\t\tacoshl(x) := logl(2x-1/(sqrtl(x*x-1)+x)) if x>2; else\n+ *\t\tacoshl(x) := log1pl(t+sqrtl(2.0*t+t*t)); where t=x-1.\n+ *\n+ * Special cases:\n+ *\tacoshl(x) is NaN with signal if x<1.\n+ *\tacoshl(NaN) is NaN without signal.\n+ */\n+\n+#include \"quadmath-imp.h\"\n+\n+static const __float128\n+one\t= 1.0Q,\n+ln2\t= 0.6931471805599453094172321214581766Q;\n+\n+__float128\n+acoshq (__float128 x)\n+{\n+\t__float128 t;\n+\tuint64_t lx;\n+\tint64_t hx;\n+\tGET_FLT128_WORDS64(hx,lx,x);\n+\tif(hx<0x3fff000000000000LL) {\t\t/* x < 1 */\n+\t    return (x-x)/(x-x);\n+\t} else if(hx >=0x4035000000000000LL) {\t/* x > 2**54 */\n+\t    if(hx >=0x7fff000000000000LL) {\t/* x is inf of NaN */\n+\t        return x+x;\n+\t    } else\n+\t\treturn logq(x)+ln2;\t/* acoshl(huge)=logl(2x) */\n+\t} else if(((hx-0x3fff000000000000LL)|lx)==0) {\n+\t    return 0.0Q;\t\t\t/* acosh(1) = 0 */\n+\t} else if (hx > 0x4000000000000000LL) {\t/* 2**28 > x > 2 */\n+\t    t=x*x;\n+\t    return logq(2.0Q*x-one/(x+sqrtq(t-one)));\n+\t} else {\t\t\t/* 1<x<2 */\n+\t    t = x-one;\n+\t    return log1pq(t+sqrtq(2.0Q*t+t*t));\n+\t}\n+}"}, {"sha": "a8a361d23bb51252908494266102a8f6885f01fb", "filename": "libquadmath/math/acosq.c", "status": "added", "additions": 317, "deletions": 0, "changes": 317, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Facosq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Facosq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Facosq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,317 @@\n+/*\n+ * ====================================================\n+ * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n+ *\n+ * Developed at SunPro, a Sun Microsystems, Inc. business.\n+ * Permission to use, copy, modify, and distribute this\n+ * software is freely granted, provided that this notice\n+ * is preserved.\n+ * ====================================================\n+ */\n+\n+/*\n+   __float128 expansions are\n+   Copyright (C) 2001 Stephen L. Moshier <moshier@na-net.ornl.gov>\n+   and are incorporated herein by permission of the author.  The author \n+   reserves the right to distribute this material elsewhere under different\n+   copying permissions.  These modifications are distributed here under \n+   the following terms:\n+\n+    This library is free software; you can redistribute it and/or\n+    modify it under the terms of the GNU Lesser General Public\n+    License as published by the Free Software Foundation; either\n+    version 2.1 of the License, or (at your option) any later version.\n+\n+    This library is distributed in the hope that it will be useful,\n+    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+    Lesser General Public License for more details.\n+\n+    You should have received a copy of the GNU Lesser General Public\n+    License along with this library; if not, write to the Free Software\n+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA */\n+\n+/* __ieee754_acosl(x)\n+ * Method :\n+ *      acos(x)  = pi/2 - asin(x)\n+ *      acos(-x) = pi/2 + asin(x)\n+ * For |x| <= 0.375\n+ *      acos(x) = pi/2 - asin(x)\n+ * Between .375 and .5 the approximation is\n+ *      acos(0.4375 + x) = acos(0.4375) + x P(x) / Q(x)\n+ * Between .5 and .625 the approximation is\n+ *      acos(0.5625 + x) = acos(0.5625) + x rS(x) / sS(x)\n+ * For x > 0.625,\n+ *      acos(x) = 2 asin(sqrt((1-x)/2))\n+ *      computed with an extended precision square root in the leading term.\n+ * For x < -0.625\n+ *      acos(x) = pi - 2 asin(sqrt((1-|x|)/2))\n+ *\n+ * Special cases:\n+ *      if x is NaN, return x itself;\n+ *      if |x|>1, return NaN with invalid signal.\n+ *\n+ * Functions needed: __ieee754_sqrtl.\n+ */\n+\n+#include \"quadmath-imp.h\"\n+\n+static const __float128\n+  one = 1.0Q,\n+  pio2_hi = 1.5707963267948966192313216916397514420986Q,\n+  pio2_lo = 4.3359050650618905123985220130216759843812E-35Q,\n+\n+  /* acos(0.5625 + x) = acos(0.5625) + x rS(x) / sS(x)\n+     -0.0625 <= x <= 0.0625\n+     peak relative error 3.3e-35  */\n+\n+  rS0 =  5.619049346208901520945464704848780243887E0Q,\n+  rS1 = -4.460504162777731472539175700169871920352E1Q,\n+  rS2 =  1.317669505315409261479577040530751477488E2Q,\n+  rS3 = -1.626532582423661989632442410808596009227E2Q,\n+  rS4 =  3.144806644195158614904369445440583873264E1Q,\n+  rS5 =  9.806674443470740708765165604769099559553E1Q,\n+  rS6 = -5.708468492052010816555762842394927806920E1Q,\n+  rS7 = -1.396540499232262112248553357962639431922E1Q,\n+  rS8 =  1.126243289311910363001762058295832610344E1Q,\n+  rS9 =  4.956179821329901954211277873774472383512E-1Q,\n+  rS10 = -3.313227657082367169241333738391762525780E-1Q,\n+\n+  sS0 = -4.645814742084009935700221277307007679325E0Q,\n+  sS1 =  3.879074822457694323970438316317961918430E1Q,\n+  sS2 = -1.221986588013474694623973554726201001066E2Q,\n+  sS3 =  1.658821150347718105012079876756201905822E2Q,\n+  sS4 = -4.804379630977558197953176474426239748977E1Q,\n+  sS5 = -1.004296417397316948114344573811562952793E2Q,\n+  sS6 =  7.530281592861320234941101403870010111138E1Q,\n+  sS7 =  1.270735595411673647119592092304357226607E1Q,\n+  sS8 = -1.815144839646376500705105967064792930282E1Q,\n+  sS9 = -7.821597334910963922204235247786840828217E-2Q,\n+  /* 1.000000000000000000000000000000000000000E0 */\n+\n+  acosr5625 = 9.7338991014954640492751132535550279812151E-1Q,\n+  pimacosr5625 = 2.1682027434402468335351320579240000860757E0Q,\n+\n+  /* acos(0.4375 + x) = acos(0.4375) + x rS(x) / sS(x)\n+     -0.0625 <= x <= 0.0625\n+     peak relative error 2.1e-35  */\n+\n+  P0 =  2.177690192235413635229046633751390484892E0Q,\n+  P1 = -2.848698225706605746657192566166142909573E1Q,\n+  P2 =  1.040076477655245590871244795403659880304E2Q,\n+  P3 = -1.400087608918906358323551402881238180553E2Q,\n+  P4 =  2.221047917671449176051896400503615543757E1Q,\n+  P5 =  9.643714856395587663736110523917499638702E1Q,\n+  P6 = -5.158406639829833829027457284942389079196E1Q,\n+  P7 = -1.578651828337585944715290382181219741813E1Q,\n+  P8 =  1.093632715903802870546857764647931045906E1Q,\n+  P9 =  5.448925479898460003048760932274085300103E-1Q,\n+  P10 = -3.315886001095605268470690485170092986337E-1Q,\n+  Q0 = -1.958219113487162405143608843774587557016E0Q,\n+  Q1 =  2.614577866876185080678907676023269360520E1Q,\n+  Q2 = -9.990858606464150981009763389881793660938E1Q,\n+  Q3 =  1.443958741356995763628660823395334281596E2Q,\n+  Q4 = -3.206441012484232867657763518369723873129E1Q,\n+  Q5 = -1.048560885341833443564920145642588991492E2Q,\n+  Q6 =  6.745883931909770880159915641984874746358E1Q,\n+  Q7 =  1.806809656342804436118449982647641392951E1Q,\n+  Q8 = -1.770150690652438294290020775359580915464E1Q,\n+  Q9 = -5.659156469628629327045433069052560211164E-1Q,\n+  /* 1.000000000000000000000000000000000000000E0 */\n+\n+  acosr4375 = 1.1179797320499710475919903296900511518755E0Q,\n+  pimacosr4375 = 2.0236129215398221908706530535894517323217E0Q,\n+\n+  /* asin(x) = x + x^3 pS(x^2) / qS(x^2)\n+     0 <= x <= 0.5\n+     peak relative error 1.9e-35  */\n+  pS0 = -8.358099012470680544198472400254596543711E2Q,\n+  pS1 =  3.674973957689619490312782828051860366493E3Q,\n+  pS2 = -6.730729094812979665807581609853656623219E3Q,\n+  pS3 =  6.643843795209060298375552684423454077633E3Q,\n+  pS4 = -3.817341990928606692235481812252049415993E3Q,\n+  pS5 =  1.284635388402653715636722822195716476156E3Q,\n+  pS6 = -2.410736125231549204856567737329112037867E2Q,\n+  pS7 =  2.219191969382402856557594215833622156220E1Q,\n+  pS8 = -7.249056260830627156600112195061001036533E-1Q,\n+  pS9 =  1.055923570937755300061509030361395604448E-3Q,\n+\n+  qS0 = -5.014859407482408326519083440151745519205E3Q,\n+  qS1 =  2.430653047950480068881028451580393430537E4Q,\n+  qS2 = -4.997904737193653607449250593976069726962E4Q,\n+  qS3 =  5.675712336110456923807959930107347511086E4Q,\n+  qS4 = -3.881523118339661268482937768522572588022E4Q,\n+  qS5 =  1.634202194895541569749717032234510811216E4Q,\n+  qS6 = -4.151452662440709301601820849901296953752E3Q,\n+  qS7 =  5.956050864057192019085175976175695342168E2Q,\n+  qS8 = -4.175375777334867025769346564600396877176E1Q;\n+  /* 1.000000000000000000000000000000000000000E0 */\n+\n+__float128\n+acosq (__float128 x)\n+{\n+  __float128 z, r, w, p, q, s, t, f2;\n+  int32_t ix, sign;\n+  ieee854_float128 u;\n+\n+  u.value = x;\n+  sign = u.words32.w0;\n+  ix = sign & 0x7fffffff;\n+  u.words32.w0 = ix;\t\t/* |x| */\n+  if (ix >= 0x3fff0000)\t\t/* |x| >= 1 */\n+    {\n+      if (ix == 0x3fff0000\n+\t  && (u.words32.w1 | u.words32.w2 | u.words32.w3) == 0)\n+\t{\t\t\t/* |x| == 1 */\n+\t  if ((sign & 0x80000000) == 0)\n+\t    return 0.0;\t\t/* acos(1) = 0  */\n+\t  else\n+\t    return (2.0 * pio2_hi) + (2.0 * pio2_lo);\t/* acos(-1)= pi */\n+\t}\n+      return (x - x) / (x - x);\t/* acos(|x| > 1) is NaN */\n+    }\n+  else if (ix < 0x3ffe0000)\t/* |x| < 0.5 */\n+    {\n+      if (ix < 0x3fc60000)\t/* |x| < 2**-57 */\n+\treturn pio2_hi + pio2_lo;\n+      if (ix < 0x3ffde000)\t/* |x| < .4375 */\n+\t{\n+\t  /* Arcsine of x.  */\n+\t  z = x * x;\n+\t  p = (((((((((pS9 * z\n+\t\t       + pS8) * z\n+\t\t      + pS7) * z\n+\t\t     + pS6) * z\n+\t\t    + pS5) * z\n+\t\t   + pS4) * z\n+\t\t  + pS3) * z\n+\t\t + pS2) * z\n+\t\t+ pS1) * z\n+\t       + pS0) * z;\n+\t  q = (((((((( z\n+\t\t       + qS8) * z\n+\t\t     + qS7) * z\n+\t\t    + qS6) * z\n+\t\t   + qS5) * z\n+\t\t  + qS4) * z\n+\t\t + qS3) * z\n+\t\t+ qS2) * z\n+\t       + qS1) * z\n+\t    + qS0;\n+\t  r = x + x * p / q;\n+\t  z = pio2_hi - (r - pio2_lo);\n+\t  return z;\n+\t}\n+      /* .4375 <= |x| < .5 */\n+      t = u.value - 0.4375Q;\n+      p = ((((((((((P10 * t\n+\t\t    + P9) * t\n+\t\t   + P8) * t\n+\t\t  + P7) * t\n+\t\t + P6) * t\n+\t\t+ P5) * t\n+\t       + P4) * t\n+\t      + P3) * t\n+\t     + P2) * t\n+\t    + P1) * t\n+\t   + P0) * t;\n+\n+      q = (((((((((t\n+\t\t   + Q9) * t\n+\t\t  + Q8) * t\n+\t\t + Q7) * t\n+\t\t+ Q6) * t\n+\t       + Q5) * t\n+\t      + Q4) * t\n+\t     + Q3) * t\n+\t    + Q2) * t\n+\t   + Q1) * t\n+\t+ Q0;\n+      r = p / q;\n+      if (sign & 0x80000000)\n+\tr = pimacosr4375 - r;\n+      else\n+\tr = acosr4375 + r;\n+      return r;\n+    }\n+  else if (ix < 0x3ffe4000)\t/* |x| < 0.625 */\n+    {\n+      t = u.value - 0.5625Q;\n+      p = ((((((((((rS10 * t\n+\t\t    + rS9) * t\n+\t\t   + rS8) * t\n+\t\t  + rS7) * t\n+\t\t + rS6) * t\n+\t\t+ rS5) * t\n+\t       + rS4) * t\n+\t      + rS3) * t\n+\t     + rS2) * t\n+\t    + rS1) * t\n+\t   + rS0) * t;\n+\n+      q = (((((((((t\n+\t\t   + sS9) * t\n+\t\t  + sS8) * t\n+\t\t + sS7) * t\n+\t\t+ sS6) * t\n+\t       + sS5) * t\n+\t      + sS4) * t\n+\t     + sS3) * t\n+\t    + sS2) * t\n+\t   + sS1) * t\n+\t+ sS0;\n+      if (sign & 0x80000000)\n+\tr = pimacosr5625 - p / q;\n+      else\n+\tr = acosr5625 + p / q;\n+      return r;\n+    }\n+  else\n+    {\t\t\t\t/* |x| >= .625 */\n+      z = (one - u.value) * 0.5;\n+      s = sqrtq (z);\n+      /* Compute an extended precision square root from\n+\t the Newton iteration  s -> 0.5 * (s + z / s).\n+         The change w from s to the improved value is\n+\t    w = 0.5 * (s + z / s) - s  = (s^2 + z)/2s - s = (z - s^2)/2s.\n+          Express s = f1 + f2 where f1 * f1 is exactly representable.\n+\t  w = (z - s^2)/2s = (z - f1^2 - 2 f1 f2 - f2^2)/2s .\n+          s + w has extended precision.  */\n+      u.value = s;\n+      u.words32.w2 = 0;\n+      u.words32.w3 = 0;\n+      f2 = s - u.value;\n+      w = z - u.value * u.value;\n+      w = w - 2.0 * u.value * f2;\n+      w = w - f2 * f2;\n+      w = w / (2.0 * s);\n+      /* Arcsine of s.  */\n+      p = (((((((((pS9 * z\n+\t\t   + pS8) * z\n+\t\t  + pS7) * z\n+\t\t + pS6) * z\n+\t\t+ pS5) * z\n+\t       + pS4) * z\n+\t      + pS3) * z\n+\t     + pS2) * z\n+\t    + pS1) * z\n+\t   + pS0) * z;\n+      q = (((((((( z\n+\t\t   + qS8) * z\n+\t\t + qS7) * z\n+\t\t+ qS6) * z\n+\t       + qS5) * z\n+\t      + qS4) * z\n+\t     + qS3) * z\n+\t    + qS2) * z\n+\t   + qS1) * z\n+\t+ qS0;\n+      r = s + (w + s * p / q);\n+\n+      if (sign & 0x80000000)\n+\tw = pio2_hi + (pio2_lo - r);\n+      else\n+\tw = r;\n+      return 2.0 * w;\n+    }\n+}"}, {"sha": "be044dcd87fb2d623a1f65d0d3681a7d143dc6ec", "filename": "libquadmath/math/asinhq.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fasinhq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fasinhq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fasinhq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,71 @@\n+/* s_asinhl.c -- long double version of s_asinh.c.\n+ * Conversion to long double by Ulrich Drepper,\n+ * Cygnus Support, drepper@cygnus.com.\n+ */\n+\n+/*\n+ * ====================================================\n+ * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n+ *\n+ * Developed at SunPro, a Sun Microsystems, Inc. business.\n+ * Permission to use, copy, modify, and distribute this\n+ * software is freely granted, provided that this notice\n+ * is preserved.\n+ * ====================================================\n+ */\n+\n+/* asinhl(x)\n+ * Method :\n+ *      Based on\n+ *              asinhl(x) = signl(x) * logl [ |x| + sqrtl(x*x+1) ]\n+ *      we have\n+ *      asinhl(x) := x  if  1+x*x=1,\n+ *                := signl(x)*(logl(x)+ln2)) for large |x|, else\n+ *                := signl(x)*logl(2|x|+1/(|x|+sqrtl(x*x+1))) if|x|>2, else\n+ *                := signl(x)*log1pl(|x| + x^2/(1 + sqrtl(1+x^2)))\n+ */\n+\n+#include \"quadmath-imp.h\"\n+\n+static const __float128\n+  one = 1.0Q,\n+  ln2 = 6.931471805599453094172321214581765681e-1Q,\n+  huge = 1.0e+4900Q;\n+\n+__float128\n+asinhq (__float128 x)\n+{\n+  __float128 t, w;\n+  int32_t ix, sign;\n+  ieee854_float128 u;\n+\n+  u.value = x;\n+  sign = u.words32.w0;\n+  ix = sign & 0x7fffffff;\n+  if (ix == 0x7fff0000)\n+    return x + x;\t\t/* x is inf or NaN */\n+  if (ix < 0x3fc70000)\n+    {\t\t\t\t/* |x| < 2^ -56 */\n+      if (huge + x > one)\n+\treturn x;\t\t/* return x inexact except 0 */\n+    }\n+  u.words32.w0 = ix;\n+  if (ix > 0x40350000)\n+    {\t\t\t\t/* |x| > 2 ^ 54 */\n+      w = logq (u.value) + ln2;\n+    }\n+  else if (ix >0x40000000)\n+    {\t\t\t\t/* 2^ 54 > |x| > 2.0 */\n+      t = u.value;\n+      w = logq (2.0 * t + one / (sqrtq (x * x + one) + t));\n+    }\n+  else\n+    {\t\t\t\t/* 2.0 > |x| > 2 ^ -56 */\n+      t = x * x;\n+      w = log1pq (u.value + t / (one + sqrtq (one + t)));\n+    }\n+  if (sign & 0x80000000)\n+    return -w;\n+  else\n+    return w;\n+}"}, {"sha": "d4321a58e0ac6bcc9235c2fdab963f9696a1b352", "filename": "libquadmath/math/asinq.c", "status": "added", "additions": 254, "deletions": 0, "changes": 254, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fasinq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fasinq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fasinq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,254 @@\n+/*\n+ * ====================================================\n+ * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n+ *\n+ * Developed at SunPro, a Sun Microsystems, Inc. business.\n+ * Permission to use, copy, modify, and distribute this\n+ * software is freely granted, provided that this notice\n+ * is preserved.\n+ * ====================================================\n+ */\n+\n+/*\n+  __float128 expansions are\n+  Copyright (C) 2001 Stephen L. Moshier <moshier@na-net.ornl.gov>\n+  and are incorporated herein by permission of the author.  The author \n+  reserves the right to distribute this material elsewhere under different \n+  copying permissions.  These modifications are distributed here under the \n+  following terms:\n+\n+    This library is free software; you can redistribute it and/or\n+    modify it under the terms of the GNU Lesser General Public\n+    License as published by the Free Software Foundation; either\n+    version 2.1 of the License, or (at your option) any later version.\n+\n+    This library is distributed in the hope that it will be useful,\n+    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+    Lesser General Public License for more details.\n+\n+    You should have received a copy of the GNU Lesser General Public\n+    License along with this library; if not, write to the Free Software\n+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA */\n+\n+/* __ieee754_asin(x)\n+ * Method :\n+ *\tSince  asin(x) = x + x^3/6 + x^5*3/40 + x^7*15/336 + ...\n+ *\twe approximate asin(x) on [0,0.5] by\n+ *\t\tasin(x) = x + x*x^2*R(x^2)\n+ *      Between .5 and .625 the approximation is\n+ *              asin(0.5625 + x) = asin(0.5625) + x rS(x) / sS(x)\n+ *\tFor x in [0.625,1]\n+ *\t\tasin(x) = pi/2-2*asin(sqrt((1-x)/2))\n+ *\tLet y = (1-x), z = y/2, s := sqrt(z), and pio2_hi+pio2_lo=pi/2;\n+ *\tthen for x>0.98\n+ *\t\tasin(x) = pi/2 - 2*(s+s*z*R(z))\n+ *\t\t\t= pio2_hi - (2*(s+s*z*R(z)) - pio2_lo)\n+ *\tFor x<=0.98, let pio4_hi = pio2_hi/2, then\n+ *\t\tf = hi part of s;\n+ *\t\tc = sqrt(z) - f = (z-f*f)/(s+f) \t...f+c=sqrt(z)\n+ *\tand\n+ *\t\tasin(x) = pi/2 - 2*(s+s*z*R(z))\n+ *\t\t\t= pio4_hi+(pio4-2s)-(2s*z*R(z)-pio2_lo)\n+ *\t\t\t= pio4_hi+(pio4-2f)-(2s*z*R(z)-(pio2_lo+2c))\n+ *\n+ * Special cases:\n+ *\tif x is NaN, return x itself;\n+ *\tif |x|>1, return NaN with invalid signal.\n+ *\n+ */\n+\n+\n+#include \"quadmath-imp.h\"\n+\n+static const __float128\n+  one = 1.0Q,\n+  huge = 1.0e+4932Q,\n+  pio2_hi = 1.5707963267948966192313216916397514420986Q,\n+  pio2_lo = 4.3359050650618905123985220130216759843812E-35Q,\n+  pio4_hi = 7.8539816339744830961566084581987569936977E-1Q,\n+\n+\t/* coefficient for R(x^2) */\n+\n+  /* asin(x) = x + x^3 pS(x^2) / qS(x^2)\n+     0 <= x <= 0.5\n+     peak relative error 1.9e-35  */\n+  pS0 = -8.358099012470680544198472400254596543711E2Q,\n+  pS1 =  3.674973957689619490312782828051860366493E3Q,\n+  pS2 = -6.730729094812979665807581609853656623219E3Q,\n+  pS3 =  6.643843795209060298375552684423454077633E3Q,\n+  pS4 = -3.817341990928606692235481812252049415993E3Q,\n+  pS5 =  1.284635388402653715636722822195716476156E3Q,\n+  pS6 = -2.410736125231549204856567737329112037867E2Q,\n+  pS7 =  2.219191969382402856557594215833622156220E1Q,\n+  pS8 = -7.249056260830627156600112195061001036533E-1Q,\n+  pS9 =  1.055923570937755300061509030361395604448E-3Q,\n+\n+  qS0 = -5.014859407482408326519083440151745519205E3Q,\n+  qS1 =  2.430653047950480068881028451580393430537E4Q,\n+  qS2 = -4.997904737193653607449250593976069726962E4Q,\n+  qS3 =  5.675712336110456923807959930107347511086E4Q,\n+  qS4 = -3.881523118339661268482937768522572588022E4Q,\n+  qS5 =  1.634202194895541569749717032234510811216E4Q,\n+  qS6 = -4.151452662440709301601820849901296953752E3Q,\n+  qS7 =  5.956050864057192019085175976175695342168E2Q,\n+  qS8 = -4.175375777334867025769346564600396877176E1Q,\n+  /* 1.000000000000000000000000000000000000000E0 */\n+\n+  /* asin(0.5625 + x) = asin(0.5625) + x rS(x) / sS(x)\n+     -0.0625 <= x <= 0.0625\n+     peak relative error 3.3e-35  */\n+  rS0 = -5.619049346208901520945464704848780243887E0Q,\n+  rS1 =  4.460504162777731472539175700169871920352E1Q,\n+  rS2 = -1.317669505315409261479577040530751477488E2Q,\n+  rS3 =  1.626532582423661989632442410808596009227E2Q,\n+  rS4 = -3.144806644195158614904369445440583873264E1Q,\n+  rS5 = -9.806674443470740708765165604769099559553E1Q,\n+  rS6 =  5.708468492052010816555762842394927806920E1Q,\n+  rS7 =  1.396540499232262112248553357962639431922E1Q,\n+  rS8 = -1.126243289311910363001762058295832610344E1Q,\n+  rS9 = -4.956179821329901954211277873774472383512E-1Q,\n+  rS10 =  3.313227657082367169241333738391762525780E-1Q,\n+\n+  sS0 = -4.645814742084009935700221277307007679325E0Q,\n+  sS1 =  3.879074822457694323970438316317961918430E1Q,\n+  sS2 = -1.221986588013474694623973554726201001066E2Q,\n+  sS3 =  1.658821150347718105012079876756201905822E2Q,\n+  sS4 = -4.804379630977558197953176474426239748977E1Q,\n+  sS5 = -1.004296417397316948114344573811562952793E2Q,\n+  sS6 =  7.530281592861320234941101403870010111138E1Q,\n+  sS7 =  1.270735595411673647119592092304357226607E1Q,\n+  sS8 = -1.815144839646376500705105967064792930282E1Q,\n+  sS9 = -7.821597334910963922204235247786840828217E-2Q,\n+  /*  1.000000000000000000000000000000000000000E0 */\n+\n+ asinr5625 =  5.9740641664535021430381036628424864397707E-1Q;\n+\n+\n+\n+__float128\n+asinq (__float128 x)\n+{\n+  __float128 t = 0;\n+  __float128 w, p, q, c, r, s;\n+  int32_t ix, sign, flag;\n+  ieee854_float128 u;\n+\n+  flag = 0;\n+  u.value = x;\n+  sign = u.words32.w0;\n+  ix = sign & 0x7fffffff;\n+  u.words32.w0 = ix;    /* |x| */\n+  if (ix >= 0x3fff0000)\t/* |x|>= 1 */\n+    {\n+      if (ix == 0x3fff0000\n+\t  && (u.words32.w1 | u.words32.w2 | u.words32.w3) == 0)\n+\t/* asin(1)=+-pi/2 with inexact */\n+\treturn x * pio2_hi + x * pio2_lo;\n+      return (x - x) / (x - x);\t/* asin(|x|>1) is NaN */\n+    }\n+  else if (ix < 0x3ffe0000) /* |x| < 0.5 */\n+    {\n+      if (ix < 0x3fc60000) /* |x| < 2**-57 */\n+\t{\n+\t  if (huge + x > one)\n+\t    return x;\t\t/* return x with inexact if x!=0 */\n+\t}\n+      else\n+\t{\n+\t  t = x * x;\n+\t  /* Mark to use pS, qS later on.  */\n+\t  flag = 1;\n+\t}\n+    }\n+  else if (ix < 0x3ffe4000) /* 0.625 */\n+    {\n+      t = u.value - 0.5625;\n+      p = ((((((((((rS10 * t\n+\t\t    + rS9) * t\n+\t\t   + rS8) * t\n+\t\t  + rS7) * t\n+\t\t + rS6) * t\n+\t\t+ rS5) * t\n+\t       + rS4) * t\n+\t      + rS3) * t\n+\t     + rS2) * t\n+\t    + rS1) * t\n+\t   + rS0) * t;\n+\n+      q = ((((((((( t\n+\t\t    + sS9) * t\n+\t\t  + sS8) * t\n+\t\t + sS7) * t\n+\t\t+ sS6) * t\n+\t       + sS5) * t\n+\t      + sS4) * t\n+\t     + sS3) * t\n+\t    + sS2) * t\n+\t   + sS1) * t\n+\t+ sS0;\n+      t = asinr5625 + p / q;\n+      if ((sign & 0x80000000) == 0)\n+\treturn t;\n+      else\n+\treturn -t;\n+    }\n+  else\n+    {\n+      /* 1 > |x| >= 0.625 */\n+      w = one - u.value;\n+      t = w * 0.5;\n+    }\n+\n+  p = (((((((((pS9 * t\n+\t       + pS8) * t\n+\t      + pS7) * t\n+\t     + pS6) * t\n+\t    + pS5) * t\n+\t   + pS4) * t\n+\t  + pS3) * t\n+\t + pS2) * t\n+\t+ pS1) * t\n+       + pS0) * t;\n+\n+  q = (((((((( t\n+\t      + qS8) * t\n+\t     + qS7) * t\n+\t    + qS6) * t\n+\t   + qS5) * t\n+\t  + qS4) * t\n+\t + qS3) * t\n+\t+ qS2) * t\n+       + qS1) * t\n+    + qS0;\n+\n+  if (flag) /* 2^-57 < |x| < 0.5 */\n+    {\n+      w = p / q;\n+      return x + x * w;\n+    }\n+\n+  s = sqrtq (t);\n+  if (ix >= 0x3ffef333) /* |x| > 0.975 */\n+    {\n+      w = p / q;\n+      t = pio2_hi - (2.0 * (s + s * w) - pio2_lo);\n+    }\n+  else\n+    {\n+      u.value = s;\n+      u.words32.w3 = 0;\n+      u.words32.w2 = 0;\n+      w = u.value;\n+      c = (t - w * w) / (s + w);\n+      r = p / q;\n+      p = 2.0 * s * r - (pio2_lo - 2.0 * c);\n+      q = pio4_hi - 2.0 * w;\n+      t = pio4_hi - (p - q);\n+    }\n+\n+  if ((sign & 0x80000000) == 0)\n+    return t;\n+  else\n+    return -t;\n+}"}, {"sha": "9d24dccb54eaf8431f6ae719da3ac0b2ace8fbba", "filename": "libquadmath/math/atan2q.c", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fatan2q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fatan2q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fatan2q.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,120 @@\n+/* e_atan2l.c -- long double version of e_atan2.c.\n+ * Conversion to long double by Jakub Jelinek, jj@ultra.linux.cz.\n+ */\n+\n+/*\n+ * ====================================================\n+ * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n+ *\n+ * Developed at SunPro, a Sun Microsystems, Inc. business.\n+ * Permission to use, copy, modify, and distribute this\n+ * software is freely granted, provided that this notice\n+ * is preserved.\n+ * ====================================================\n+ */\n+\n+/* atan2q(y,x)\n+ * Method :\n+ *\t1. Reduce y to positive by atan2q(y,x)=-atan2q(-y,x).\n+ *\t2. Reduce x to positive by (if x and y are unexceptional):\n+ *\t\tARG (x+iy) = arctan(y/x)   \t   ... if x > 0,\n+ *\t\tARG (x+iy) = pi - arctan[y/(-x)]   ... if x < 0,\n+ *\n+ * Special cases:\n+ *\n+ *\tATAN2((anything), NaN ) is NaN;\n+ *\tATAN2(NAN , (anything) ) is NaN;\n+ *\tATAN2(+-0, +(anything but NaN)) is +-0  ;\n+ *\tATAN2(+-0, -(anything but NaN)) is +-pi ;\n+ *\tATAN2(+-(anything but 0 and NaN), 0) is +-pi/2;\n+ *\tATAN2(+-(anything but INF and NaN), +INF) is +-0 ;\n+ *\tATAN2(+-(anything but INF and NaN), -INF) is +-pi;\n+ *\tATAN2(+-INF,+INF ) is +-pi/4 ;\n+ *\tATAN2(+-INF,-INF ) is +-3pi/4;\n+ *\tATAN2(+-INF, (anything but,0,NaN, and INF)) is +-pi/2;\n+ *\n+ * Constants:\n+ * The hexadecimal values are the intended ones for the following\n+ * constants. The decimal values may be used, provided that the\n+ * compiler will convert from decimal to binary accurately enough\n+ * to produce the hexadecimal values shown.\n+ */\n+\n+#include \"quadmath-imp.h\"\n+\n+static const __float128\n+tiny  = 1.0e-4900L,\n+zero  = 0.0,\n+pi_o_4  = 7.85398163397448309615660845819875699e-01L, /* 3ffe921fb54442d18469898cc51701b8 */\n+pi_o_2  = 1.57079632679489661923132169163975140e+00L, /* 3fff921fb54442d18469898cc51701b8 */\n+pi      = 3.14159265358979323846264338327950280e+00L, /* 4000921fb54442d18469898cc51701b8 */\n+pi_lo   = 8.67181013012378102479704402604335225e-35L; /* 3f8dcd129024e088a67cc74020bbea64 */\n+\n+__float128\n+atan2q (__float128 y, __float128 x)\n+{\n+\t__float128 z;\n+\tint64_t k,m,hx,hy,ix,iy;\n+\tuint64_t lx,ly;\n+\n+\tGET_FLT128_WORDS64(hx,lx,x);\n+\tix = hx&0x7fffffffffffffffLL;\n+\tGET_FLT128_WORDS64(hy,ly,y);\n+\tiy = hy&0x7fffffffffffffffLL;\n+\tif(((ix|((lx|-lx)>>63))>0x7fff000000000000LL)||\n+\t   ((iy|((ly|-ly)>>63))>0x7fff000000000000LL))\t/* x or y is NaN */\n+\t   return x+y;\n+\tif(((hx-0x3fff000000000000LL)|lx)==0) return atanq(y);   /* x=1.0L */\n+\tm = ((hy>>63)&1)|((hx>>62)&2);\t/* 2*sign(x)+sign(y) */\n+\n+    /* when y = 0 */\n+\tif((iy|ly)==0) {\n+\t    switch(m) {\n+\t\tcase 0:\n+\t\tcase 1: return y; \t/* atan(+-0,+anything)=+-0 */\n+\t\tcase 2: return  pi+tiny;/* atan(+0,-anything) = pi */\n+\t\tcase 3: return -pi-tiny;/* atan(-0,-anything) =-pi */\n+\t    }\n+\t}\n+    /* when x = 0 */\n+\tif((ix|lx)==0) return (hy<0)?  -pi_o_2-tiny: pi_o_2+tiny;\n+\n+    /* when x is INF */\n+\tif(ix==0x7fff000000000000LL) {\n+\t    if(iy==0x7fff000000000000LL) {\n+\t\tswitch(m) {\n+\t\t    case 0: return  pi_o_4+tiny;/* atan(+INF,+INF) */\n+\t\t    case 1: return -pi_o_4-tiny;/* atan(-INF,+INF) */\n+\t\t    case 2: return  3.0L*pi_o_4+tiny;/*atan(+INF,-INF)*/\n+\t\t    case 3: return -3.0L*pi_o_4-tiny;/*atan(-INF,-INF)*/\n+\t\t}\n+\t    } else {\n+\t\tswitch(m) {\n+\t\t    case 0: return  zero  ;\t/* atan(+...,+INF) */\n+\t\t    case 1: return -zero  ;\t/* atan(-...,+INF) */\n+\t\t    case 2: return  pi+tiny  ;\t/* atan(+...,-INF) */\n+\t\t    case 3: return -pi-tiny  ;\t/* atan(-...,-INF) */\n+\t\t}\n+\t    }\n+\t}\n+    /* when y is INF */\n+\tif(iy==0x7fff000000000000LL) return (hy<0)? -pi_o_2-tiny: pi_o_2+tiny;\n+\n+    /* compute y/x */\n+\tk = (iy-ix)>>48;\n+\tif(k > 120) z=pi_o_2+0.5L*pi_lo; \t/* |y/x| >  2**120 */\n+\telse if(hx<0&&k<-120) z=0.0L; \t\t/* |y|/x < -2**120 */\n+\telse z=atanq(fabsq(y/x));\t\t/* safe to do y/x */\n+\tswitch (m) {\n+\t    case 0: return       z  ;\t/* atan(+,+) */\n+\t    case 1: {\n+\t    \t      uint64_t zh;\n+\t\t      GET_FLT128_MSW64(zh,z);\n+\t\t      SET_FLT128_MSW64(z,zh ^ 0x8000000000000000ULL);\n+\t\t    }\n+\t\t    return       z  ;\t/* atan(-,+) */\n+\t    case 2: return  pi-(z-pi_lo);/* atan(+,-) */\n+\t    default: /* case 3 */\n+\t    \t    return  (z-pi_lo)-pi;/* atan(-,-) */\n+\t}\n+}"}, {"sha": "73db957d3b0613e9dd317e7cab9e4e9f8d66c310", "filename": "libquadmath/math/atanhq.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fatanhq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fatanhq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fatanhq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,66 @@\n+/* s_atanhl.c -- __float128 version of s_atan.c.\n+ * Conversion to __float128 by Ulrich Drepper,\n+ * Cygnus Support, drepper@cygnus.com.\n+ */\n+\n+/*\n+ * ====================================================\n+ * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n+ *\n+ * Developed at SunPro, a Sun Microsystems, Inc. business.\n+ * Permission to use, copy, modify, and distribute this\n+ * software is freely granted, provided that this notice\n+ * is preserved.\n+ * ====================================================\n+ */\n+\n+/* __ieee754_atanhl(x)\n+ * Method :\n+ *    1.Reduced x to positive by atanh(-x) = -atanh(x)\n+ *    2.For x>=0.5\n+ *                   1              2x                          x\n+ *\tatanhl(x) = --- * log(1 + -------) = 0.5 * log1p(2 * --------)\n+ *                   2             1 - x                      1 - x\n+ *\n+ * \tFor x<0.5\n+ *\tatanhl(x) = 0.5*log1pl(2x+2x*x/(1-x))\n+ *\n+ * Special cases:\n+ *\tatanhl(x) is NaN if |x| > 1 with signal;\n+ *\tatanhl(NaN) is that NaN with no signal;\n+ *\tatanhl(+-1) is +-INF with signal.\n+ *\n+ */\n+\n+#include \"quadmath-imp.h\"\n+\n+static const __float128 one = 1.0Q, huge = 1e4900Q;\n+static const __float128 zero = 0.0Q;\n+\n+__float128\n+atanhq (__float128 x)\n+{\n+\t__float128 t;\n+\tuint32_t jx, ix;\n+\tieee854_float128 u;\n+\n+\tu.value = x;\n+\tjx = u.words32.w0;\n+\tix = jx & 0x7fffffff;\n+\tu.words32.w0 = ix;\n+\tif (ix >= 0x3fff0000) /* |x| >= 1.0 or infinity or NaN */\n+\t  {\n+\t    if (u.value == one)\n+\t      return x/zero;\n+\t    else\n+\t      return (x-x)/(x-x);\n+\t  }\n+\tif(ix<0x3fc60000 && (huge+x)>zero) return x;\t/* x < 2^-57 */\n+\n+\tif(ix<0x3ffe0000) {\t\t/* x < 0.5 */\n+\t    t = u.value+u.value;\n+\t    t = 0.5*log1pq(t+t*u.value/(one-u.value));\n+\t} else\n+\t    t = 0.5*log1pq((u.value+u.value)/(one-u.value));\n+\tif(jx & 0x80000000) return -t; else return t;\n+}"}, {"sha": "cb38a340a205272e1b556210ef08f1a6a8c1dae5", "filename": "libquadmath/math/atanq.c", "status": "added", "additions": 231, "deletions": 0, "changes": 231, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fatanq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fatanq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fatanq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,231 @@\n+/*\t\t\t\t\t\t\ts_atanl.c\n+ *\n+ *\tInverse circular tangent for 128-bit __float128 precision\n+ *      (arctangent)\n+ *\n+ *\n+ *\n+ * SYNOPSIS:\n+ *\n+ * __float128 x, y, atanl();\n+ *\n+ * y = atanl( x );\n+ *\n+ *\n+ *\n+ * DESCRIPTION:\n+ *\n+ * Returns radian angle between -pi/2 and +pi/2 whose tangent is x.\n+ *\n+ * The function uses a rational approximation of the form\n+ * t + t^3 P(t^2)/Q(t^2), optimized for |t| < 0.09375.\n+ *\n+ * The argument is reduced using the identity\n+ *    arctan x - arctan u  =  arctan ((x-u)/(1 + ux))\n+ * and an 83-entry lookup table for arctan u, with u = 0, 1/8, ..., 10.25.\n+ * Use of the table improves the execution speed of the routine.\n+ *\n+ *\n+ *\n+ * ACCURACY:\n+ *\n+ *                      Relative error:\n+ * arithmetic   domain     # trials      peak         rms\n+ *    IEEE      -19, 19       4e5       1.7e-34     5.4e-35\n+ *\n+ *\n+ * WARNING:\n+ *\n+ * This program uses integer operations on bit fields of floating-point\n+ * numbers.  It does not work with data structures other than the\n+ * structure assumed.\n+ *\n+ */\n+\n+/* Copyright 2001 by Stephen L. Moshier <moshier@na-net.ornl.gov> \n+\n+    This library is free software; you can redistribute it and/or\n+    modify it under the terms of the GNU Lesser General Public\n+    License as published by the Free Software Foundation; either\n+    version 2.1 of the License, or (at your option) any later version.\n+\n+    This library is distributed in the hope that it will be useful,\n+    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+    Lesser General Public License for more details.\n+\n+    You should have received a copy of the GNU Lesser General Public\n+    License along with this library; if not, write to the Free Software\n+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA */\n+\n+\n+#include \"quadmath-imp.h\"\n+\n+/* arctan(k/8), k = 0, ..., 82 */\n+static const __float128 atantbl[84] = {\n+  0.0000000000000000000000000000000000000000E0Q,\n+  1.2435499454676143503135484916387102557317E-1Q, /* arctan(0.125)  */\n+  2.4497866312686415417208248121127581091414E-1Q,\n+  3.5877067027057222039592006392646049977698E-1Q,\n+  4.6364760900080611621425623146121440202854E-1Q,\n+  5.5859931534356243597150821640166127034645E-1Q,\n+  6.4350110879328438680280922871732263804151E-1Q,\n+  7.1882999962162450541701415152590465395142E-1Q,\n+  7.8539816339744830961566084581987572104929E-1Q,\n+  8.4415398611317100251784414827164750652594E-1Q,\n+  8.9605538457134395617480071802993782702458E-1Q,\n+  9.4200004037946366473793717053459358607166E-1Q,\n+  9.8279372324732906798571061101466601449688E-1Q,\n+  1.0191413442663497346383429170230636487744E0Q,\n+  1.0516502125483736674598673120862998296302E0Q,\n+  1.0808390005411683108871567292171998202703E0Q,\n+  1.1071487177940905030170654601785370400700E0Q,\n+  1.1309537439791604464709335155363278047493E0Q,\n+  1.1525719972156675180401498626127513797495E0Q,\n+  1.1722738811284763866005949441337046149712E0Q,\n+  1.1902899496825317329277337748293183376012E0Q,\n+  1.2068173702852525303955115800565576303133E0Q,\n+  1.2220253232109896370417417439225704908830E0Q,\n+  1.2360594894780819419094519711090786987027E0Q,\n+  1.2490457723982544258299170772810901230778E0Q,\n+  1.2610933822524404193139408812473357720101E0Q,\n+  1.2722973952087173412961937498224804940684E0Q,\n+  1.2827408797442707473628852511364955306249E0Q,\n+  1.2924966677897852679030914214070816845853E0Q,\n+  1.3016288340091961438047858503666855921414E0Q,\n+  1.3101939350475556342564376891719053122733E0Q,\n+  1.3182420510168370498593302023271362531155E0Q,\n+  1.3258176636680324650592392104284756311844E0Q,\n+  1.3329603993374458675538498697331558093700E0Q,\n+  1.3397056595989995393283037525895557411039E0Q,\n+  1.3460851583802539310489409282517796256512E0Q,\n+  1.3521273809209546571891479413898128509842E0Q,\n+  1.3578579772154994751124898859640585287459E0Q,\n+  1.3633001003596939542892985278250991189943E0Q,\n+  1.3684746984165928776366381936948529556191E0Q,\n+  1.3734007669450158608612719264449611486510E0Q,\n+  1.3780955681325110444536609641291551522494E0Q,\n+  1.3825748214901258580599674177685685125566E0Q,\n+  1.3868528702577214543289381097042486034883E0Q,\n+  1.3909428270024183486427686943836432060856E0Q,\n+  1.3948567013423687823948122092044222644895E0Q,\n+  1.3986055122719575950126700816114282335732E0Q,\n+  1.4021993871854670105330304794336492676944E0Q,\n+  1.4056476493802697809521934019958079881002E0Q,\n+  1.4089588955564736949699075250792569287156E0Q,\n+  1.4121410646084952153676136718584891599630E0Q,\n+  1.4152014988178669079462550975833894394929E0Q,\n+  1.4181469983996314594038603039700989523716E0Q,\n+  1.4209838702219992566633046424614466661176E0Q,\n+  1.4237179714064941189018190466107297503086E0Q,\n+  1.4263547484202526397918060597281265695725E0Q,\n+  1.4288992721907326964184700745371983590908E0Q,\n+  1.4313562697035588982240194668401779312122E0Q,\n+  1.4337301524847089866404719096698873648610E0Q,\n+  1.4360250423171655234964275337155008780675E0Q,\n+  1.4382447944982225979614042479354815855386E0Q,\n+  1.4403930189057632173997301031392126865694E0Q,\n+  1.4424730991091018200252920599377292525125E0Q,\n+  1.4444882097316563655148453598508037025938E0Q,\n+  1.4464413322481351841999668424758804165254E0Q,\n+  1.4483352693775551917970437843145232637695E0Q,\n+  1.4501726582147939000905940595923466567576E0Q,\n+  1.4519559822271314199339700039142990228105E0Q,\n+  1.4536875822280323362423034480994649820285E0Q,\n+  1.4553696664279718992423082296859928222270E0Q,\n+  1.4570043196511885530074841089245667532358E0Q,\n+  1.4585935117976422128825857356750737658039E0Q,\n+  1.4601391056210009726721818194296893361233E0Q,\n+  1.4616428638860188872060496086383008594310E0Q,\n+  1.4631064559620759326975975316301202111560E0Q,\n+  1.4645314639038178118428450961503371619177E0Q,\n+  1.4659193880646627234129855241049975398470E0Q,\n+  1.4672716522843522691530527207287398276197E0Q,\n+  1.4685896086876430842559640450619880951144E0Q,\n+  1.4698745421276027686510391411132998919794E0Q,\n+  1.4711276743037345918528755717617308518553E0Q,\n+  1.4723501675822635384916444186631899205983E0Q,\n+  1.4735431285433308455179928682541563973416E0Q, /* arctan(10.25) */\n+  1.5707963267948966192313216916397514420986E0Q  /* pi/2 */\n+};\n+\n+\n+/* arctan t = t + t^3 p(t^2) / q(t^2)\n+   |t| <= 0.09375\n+   peak relative error 5.3e-37 */\n+\n+static const __float128\n+  p0 = -4.283708356338736809269381409828726405572E1Q,\n+  p1 = -8.636132499244548540964557273544599863825E1Q,\n+  p2 = -5.713554848244551350855604111031839613216E1Q,\n+  p3 = -1.371405711877433266573835355036413750118E1Q,\n+  p4 = -8.638214309119210906997318946650189640184E-1Q,\n+  q0 = 1.285112506901621042780814422948906537959E2Q,\n+  q1 = 3.361907253914337187957855834229672347089E2Q,\n+  q2 = 3.180448303864130128268191635189365331680E2Q,\n+  q3 = 1.307244136980865800160844625025280344686E2Q,\n+  q4 = 2.173623741810414221251136181221172551416E1Q;\n+  /* q5 = 1.000000000000000000000000000000000000000E0 */\n+\n+\n+__float128\n+atanq (__float128 x)\n+{\n+  int k, sign;\n+  __float128 t, u, p, q;\n+  ieee854_float128 s;\n+\n+  s.value = x;\n+  k = s.words32.w0;\n+  if (k & 0x80000000)\n+    sign = 1;\n+  else\n+    sign = 0;\n+\n+  /* Check for IEEE special cases.  */\n+  k &= 0x7fffffff;\n+  if (k >= 0x7fff0000)\n+    {\n+      /* NaN. */\n+      if ((k & 0xffff) | s.words32.w1 | s.words32.w2 | s.words32.w3)\n+\treturn (x + x);\n+\n+      /* Infinity. */\n+      if (sign)\n+\treturn -atantbl[83];\n+      else\n+\treturn atantbl[83];\n+    }\n+\n+  if (sign)\n+      x = -x;\n+\n+  if (k >= 0x40024800) /* 10.25 */\n+    {\n+      k = 83;\n+      t = -1.0/x;\n+    }\n+  else\n+    {\n+      /* Index of nearest table element.\n+\t Roundoff to integer is asymmetrical to avoid cancellation when t < 0\n+         (cf. fdlibm). */\n+      k = 8.0Q * x + 0.25Q;\n+      u = 0.125Q * k;\n+      /* Small arctan argument.  */\n+      t = (x - u) / (1.0 + x * u);\n+    }\n+\n+  /* Arctan of small argument t.  */\n+  u = t * t;\n+  p =     ((((p4 * u) + p3) * u + p2) * u + p1) * u + p0;\n+  q = ((((u + q4) * u + q3) * u + q2) * u + q1) * u + q0;\n+  u = t * u * p / q  +  t;\n+\n+  /* arctan x = arctan u  +  arctan t */\n+  u = atantbl[k] + u;\n+  if (sign)\n+    return (-u);\n+  else\n+    return u;\n+}"}, {"sha": "f61f32513ee7468692757b0db23e90452ac7f02c", "filename": "libquadmath/math/cbrtq.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fcbrtq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fcbrtq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcbrtq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,64 @@\n+#include \"quadmath-imp.h\"\n+#include <math.h>\n+#include <float.h>\n+\n+__float128\n+cbrtq (const __float128 x)\n+{\n+  __float128 y;\n+  int exp, i;\n+\n+  if (x == 0)\n+    return x;\n+\n+  if (isnanq (x))\n+    return x;\n+\n+  if (x <= DBL_MAX && x >= DBL_MIN)\n+  {\n+    /* Use double result as starting point.  */\n+    y = cbrt ((double) x);\n+\n+    /* Two Newton iterations.  */\n+    y -= 0.333333333333333333333333333333333333333333333333333Q\n+\t  * (y - x / (y * y));\n+    y -= 0.333333333333333333333333333333333333333333333333333Q\n+\t  * (y - x / (y * y));\n+    return y;\n+  }\n+\n+#ifdef HAVE_CBRTL\n+  if (x <= LDBL_MAX && x >= LDBL_MIN)\n+  {\n+    /* Use long double result as starting point.  */\n+    y = cbrtl ((long double) x);\n+\n+    /* One Newton iteration.  */\n+    y -= 0.333333333333333333333333333333333333333333333333333Q\n+\t  * (y - x / (y * y));\n+    return y;\n+  }\n+#endif\n+\n+  /* If we're outside of the range of C types, we have to compute\n+     the initial guess the hard way.  */\n+  y = frexpq (x, &exp);\n+\n+  i = exp % 3;\n+  y = (i >= 0 ? i : -i);\n+  if (i == 1)\n+    y *= 2, exp--;\n+  else if (i == 2)\n+    y *= 4, exp -= 2;\n+\n+  y = cbrt (y);\n+  y = scalbnq (y, exp / 3);\n+\n+  /* Two Newton iterations.  */\n+  y -= 0.333333333333333333333333333333333333333333333333333Q\n+\t * (y - x / (y * y));\n+  y -= 0.333333333333333333333333333333333333333333333333333Q\n+\t * (y - x / (y * y));\n+  return y;\n+}\n+"}, {"sha": "577d8cd98957b8dbbd65b7adc2577025637392d4", "filename": "libquadmath/math/ceilq.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fceilq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fceilq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fceilq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,61 @@\n+/* s_ceill.c -- long double version of s_ceil.c.\n+ * Conversion to IEEE quad long double by Jakub Jelinek, jj@ultra.linux.cz.\n+ */\n+\n+/*\n+ * ====================================================\n+ * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n+ *\n+ * Developed at SunPro, a Sun Microsystems, Inc. business.\n+ * Permission to use, copy, modify, and distribute this\n+ * software is freely granted, provided that this notice\n+ * is preserved.\n+ * ====================================================\n+ */\n+\n+#include \"quadmath-imp.h\"\n+\n+static const __float128 huge = 1.0e4930Q;\n+\n+__float128\n+ceilq (__float128 x)\n+{\n+\tint64_t i0,i1,j0;\n+\tuint64_t i,j;\n+\tGET_FLT128_WORDS64(i0,i1,x);\n+\tj0 = ((i0>>48)&0x7fff)-0x3fff;\n+\tif(j0<48) {\n+\t    if(j0<0) { \t/* raise inexact if x != 0 */\n+\t\tif(huge+x>0.0) {/* return 0*sign(x) if |x|<1 */\n+\t\t    if(i0<0) {i0=0x8000000000000000ULL;i1=0;}\n+\t\t    else if((i0|i1)!=0) { i0=0x3fff000000000000ULL;i1=0;}\n+\t\t}\n+\t    } else {\n+\t\ti = (0x0000ffffffffffffULL)>>j0;\n+\t\tif(((i0&i)|i1)==0) return x; /* x is integral */\n+\t\tif(huge+x>0.0) {\t/* raise inexact flag */\n+\t\t    if(i0>0) i0 += (0x0001000000000000LL)>>j0;\n+\t\t    i0 &= (~i); i1=0;\n+\t\t}\n+\t    }\n+\t} else if (j0>111) {\n+\t    if(j0==0x4000) return x+x;\t/* inf or NaN */\n+\t    else return x;\t\t/* x is integral */\n+\t} else {\n+\t    i = -1ULL>>(j0-48);\n+\t    if((i1&i)==0) return x;\t/* x is integral */\n+\t    if(huge+x>0.0) { \t\t/* raise inexact flag */\n+\t\tif(i0>0) {\n+\t\t    if(j0==48) i0+=1;\n+\t\t    else {\n+\t\t\tj = i1+(1LL<<(112-j0));\n+\t\t\tif(j<i1) i0 +=1 ; \t/* got a carry */\n+\t\t\ti1=j;\n+\t\t    }\n+\t\t}\n+\t\ti1 &= (~i);\n+\t    }\n+\t}\n+\tSET_FLT128_WORDS64(x,i0,i1);\n+\treturn x;\n+}"}, {"sha": "f67448a2c128f2ed0a55f629065f9c5519ae2b5f", "filename": "libquadmath/math/complex.c", "status": "added", "additions": 210, "deletions": 0, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fcomplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fcomplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcomplex.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,210 @@\n+#include \"quadmath-imp.h\"\n+\n+\n+#define REALPART(z) (__real__(z)) \n+#define IMAGPART(z) (__imag__(z)) \n+#define COMPLEX_ASSIGN(z_, r_, i_) {__real__(z_) = (r_); __imag__(z_) = (i_);} \n+\n+\n+// Horrible... GCC doesn't know how to multiply or divide these\n+// __complex128 things. We have to do it on our own.\n+// Protect it around macros so, some day, we can switch it on\n+\n+#if 0\n+\n+# define C128_MULT(x,y) ((x)*(y))\n+# define C128_DIV(x,y) ((x)/(y))\n+\n+#else\n+\n+#define C128_MULT(x,y) mult_c128(x,y)\n+#define C128_DIV(x,y) div_c128(x,y)\n+\n+static inline __complex128 mult_c128 (__complex128 x, __complex128 y)\n+{\n+  __float128 r1 = REALPART(x), i1 = IMAGPART(x);\n+  __float128 r2 = REALPART(y), i2 = IMAGPART(y);\n+  __complex128 res;\n+  COMPLEX_ASSIGN(res, r1*r2 - i1*i2, i2*r1 + i1*r2);\n+  return res;\n+}\n+\n+\n+// Careful: the algorithm for the division sucks. A lot.\n+static inline __complex128 div_c128 (__complex128 x, __complex128 y)\n+{\n+  __float128 n = hypotq (REALPART (y), IMAGPART (y));\n+  __float128 r1 = REALPART(x), i1 = IMAGPART(x);\n+  __float128 r2 = REALPART(y), i2 = IMAGPART(y);\n+  __complex128 res;\n+  COMPLEX_ASSIGN(res, r1*r2 + i1*i2, i1*r2 - i2*r1);\n+  return res / n;\n+}\n+\n+#endif\n+\n+\n+\n+__float128\n+cabsq (__complex128 z)\n+{\n+  return hypotq (REALPART (z), IMAGPART (z));\n+}\n+\n+\n+__complex128\n+cexpq (__complex128 z)\n+{\n+  __float128 a, b;\n+  __complex128 v;\n+\n+  a = REALPART (z);\n+  b = IMAGPART (z);\n+  COMPLEX_ASSIGN (v, cosq (b), sinq (b));\n+  return expq (a) * v;\n+}\n+\n+\n+__complex128\n+cexpiq (__float128 x)\n+{\n+  __complex128 v;\n+  COMPLEX_ASSIGN (v, cosq (x), sinq (x));\n+  return v;\n+}\n+\n+\n+__float128\n+cargq (__complex128 z)\n+{\n+  return atan2q (IMAGPART (z), REALPART (z));\n+}\n+\n+\n+__complex128\n+clogq (__complex128 z)\n+{\n+  __complex128 v;\n+  COMPLEX_ASSIGN (v, logq (cabsq (z)), cargq (z));\n+  return v;\n+}\n+\n+\n+__complex128\n+clog10q (__complex128 z)\n+{\n+  __complex128 v;\n+  COMPLEX_ASSIGN (v, log10q (cabsq (z)), cargq (z));\n+  return v;\n+}\n+\n+\n+__complex128\n+cpowq (__complex128 base, __complex128 power)\n+{\n+  return cexpq (C128_MULT(power, clogq (base)));\n+}\n+\n+\n+__complex128\n+csinq (__complex128 a)\n+{\n+  __float128 r = REALPART (a), i = IMAGPART (a);\n+  __complex128 v;\n+  COMPLEX_ASSIGN (v, sinq (r) * coshq (i), cosq (r) * sinhq (i));\n+  return v;\n+}\n+\n+\n+__complex128\n+csinhq (__complex128 a)\n+{\n+  __float128 r = REALPART (a), i = IMAGPART (a);\n+  __complex128 v;\n+  COMPLEX_ASSIGN (v, sinhq (r) * cosq (i), coshq (r) * sinq (i));\n+  return v;\n+}\n+\n+\n+__complex128\n+ccosq (__complex128 a)\n+{\n+  __float128 r = REALPART (a), i = IMAGPART (a);\n+  __complex128 v;\n+  COMPLEX_ASSIGN (v, cosq (r) * coshq (i), - (sinq (r) * sinhq (i)));\n+  return v;\n+}\n+\n+\n+__complex128\n+ccoshq (__complex128 a)\n+{\n+  __float128 r = REALPART (a), i = IMAGPART (a);\n+  __complex128 v;\n+  COMPLEX_ASSIGN (v, coshq (r) * cosq (i),  sinhq (r) * sinq (i));\n+  return v;\n+}\n+\n+\n+__complex128\n+ctanq (__complex128 a)\n+{\n+  __float128 rt = tanq (REALPART (a)), it = tanhq (IMAGPART (a));\n+  __complex128 n, d;\n+  COMPLEX_ASSIGN (n, rt, it);\n+  COMPLEX_ASSIGN (d, 1, - (rt * it));\n+  return C128_DIV(n,d);\n+}\n+\n+\n+__complex128\n+ctanhq (__complex128 a)\n+{\n+  __float128 rt = tanhq (REALPART (a)), it = tanq (IMAGPART (a));\n+  __complex128 n, d;\n+  COMPLEX_ASSIGN (n, rt, it);\n+  COMPLEX_ASSIGN (d, 1, rt * it);\n+  return C128_DIV(n,d);\n+}\n+\n+\n+/* Square root algorithm from glibc.  */\n+__complex128\n+csqrtq (__complex128 z)\n+{\n+  __float128 re = REALPART(z), im = IMAGPART(z);\n+  __complex128 v;\n+\n+  if (im == 0)\n+  {\n+    if (re < 0)\n+    {\n+      COMPLEX_ASSIGN (v, 0, copysignq (sqrtq (-re), im));\n+    }\n+    else\n+    {\n+      COMPLEX_ASSIGN (v, fabsq (sqrtq (re)), copysignq (0, im));\n+    }\n+  }\n+  else if (re == 0)\n+  {\n+    __float128 r = sqrtq (0.5 * fabsq (im));\n+    COMPLEX_ASSIGN (v, r, copysignq (r, im));\n+  }\n+  else\n+  {\n+    __float128 d = hypotq (re, im);\n+    __float128 r, s;\n+\n+    /* Use the identity   2  Re res  Im res = Im x\n+\tto avoid cancellation error in  d +/- Re x.  */\n+    if (re > 0)\n+      r = sqrtq (0.5 * d + 0.5 * re), s = (0.5 * im) / r;\n+    else\n+      s = sqrtq (0.5 * d - 0.5 * re), r = fabsq ((0.5 * im) / s);\n+\n+    COMPLEX_ASSIGN (v, r, copysignq (s, im));\n+  }\n+  return v;\n+}\n+"}, {"sha": "b59fcc5492dedccfa247be97b8c3643ba8344bc3", "filename": "libquadmath/math/copysignq.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fcopysignq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fcopysignq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcopysignq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,26 @@\n+/* s_copysignl.c -- long double version of s_copysign.c.\n+ * Conversion to long double by Jakub Jelinek, jj@ultra.linux.cz.\n+ */\n+\n+/*\n+ * ====================================================\n+ * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n+ *\n+ * Developed at SunPro, a Sun Microsystems, Inc. business.\n+ * Permission to use, copy, modify, and distribute this\n+ * software is freely granted, provided that this notice\n+ * is preserved.\n+ * ====================================================\n+ */\n+\n+#include \"quadmath-imp.h\"\n+\n+__float128\n+copysignq (__float128 x, __float128 y)\n+{\n+  uint64_t hx,hy;\n+  GET_FLT128_MSW64(hx,x);\n+  GET_FLT128_MSW64(hy,y);\n+  SET_FLT128_MSW64(x,(hx&0x7fffffffffffffffULL)|(hy&0x8000000000000000ULL));\n+  return x;\n+}"}, {"sha": "a6e0eb5f193e3c1f918315c5c8f40ffd4f83be54", "filename": "libquadmath/math/coshq.c", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fcoshq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fcoshq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcoshq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,108 @@\n+/*\n+ * ====================================================\n+ * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n+ *\n+ * Developed at SunPro, a Sun Microsystems, Inc. business.\n+ * Permission to use, copy, modify, and distribute this\n+ * software is freely granted, provided that this notice\n+ * is preserved.\n+ * ====================================================\n+ */\n+\n+/* Changes for 128-bit __float128 are\n+   Copyright (C) 2001 Stephen L. Moshier <moshier@na-net.ornl.gov>\n+   and are incorporated herein by permission of the author.  The author \n+   reserves the right to distribute this material elsewhere under different\n+   copying permissions.  These modifications are distributed here under \n+   the following terms:\n+\n+    This library is free software; you can redistribute it and/or\n+    modify it under the terms of the GNU Lesser General Public\n+    License as published by the Free Software Foundation; either\n+    version 2.1 of the License, or (at your option) any later version.\n+\n+    This library is distributed in the hope that it will be useful,\n+    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+    Lesser General Public License for more details.\n+\n+    You should have received a copy of the GNU Lesser General Public\n+    License along with this library; if not, write to the Free Software\n+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA */\n+\n+/* __ieee754_coshl(x)\n+ * Method :\n+ * mathematically coshl(x) if defined to be (exp(x)+exp(-x))/2\n+ *      1. Replace x by |x| (coshl(x) = coshl(-x)).\n+ *      2.\n+ *                                                      [ exp(x) - 1 ]^2\n+ *          0        <= x <= ln2/2  :  coshl(x) := 1 + -------------------\n+ *                                                         2*exp(x)\n+ *\n+ *                                                 exp(x) +  1/exp(x)\n+ *          ln2/2    <= x <= 22     :  coshl(x) := -------------------\n+ *                                                         2\n+ *          22       <= x <= lnovft :  coshl(x) := expl(x)/2\n+ *          lnovft   <= x <= ln2ovft:  coshl(x) := expl(x/2)/2 * expl(x/2)\n+ *          ln2ovft  <  x           :  coshl(x) := huge*huge (overflow)\n+ *\n+ * Special cases:\n+ *      coshl(x) is |x| if x is +INF, -INF, or NaN.\n+ *      only coshl(0)=1 is exact for finite x.\n+ */\n+\n+#include \"quadmath-imp.h\"\n+\n+static const __float128 one = 1.0Q, half = 0.5Q, huge = 1.0e4900Q,\n+  ovf_thresh = 1.1357216553474703894801348310092223067821E4Q;\n+\n+__float128\n+coshq (__float128 x)\n+{\n+  __float128 t, w;\n+  int32_t ex;\n+  ieee854_float128 u;\n+\n+  u.value = x;\n+  ex = u.words32.w0 & 0x7fffffff;\n+\n+  /* Absolute value of x.  */\n+  u.words32.w0 = ex;\n+\n+  /* x is INF or NaN */\n+  if (ex >= 0x7fff0000)\n+    return x * x;\n+\n+  /* |x| in [0,0.5*ln2], return 1+expm1l(|x|)^2/(2*expl(|x|)) */\n+  if (ex < 0x3ffd62e4) /* 0.3465728759765625 */\n+    {\n+      t = expm1q (u.value);\n+      w = one + t;\n+      if (ex < 0x3fb80000) /* |x| < 2^-116 */\n+\treturn w;\t\t/* cosh(tiny) = 1 */\n+\n+      return one + (t * t) / (w + w);\n+    }\n+\n+  /* |x| in [0.5*ln2,40], return (exp(|x|)+1/exp(|x|)/2; */\n+  if (ex < 0x40044000)\n+    {\n+      t = expq (u.value);\n+      return half * t + half / t;\n+    }\n+\n+  /* |x| in [22, ln(maxdouble)] return half*exp(|x|) */\n+  if (ex <= 0x400c62e3) /* 11356.375 */\n+    return half * expq (u.value);\n+\n+  /* |x| in [log(maxdouble), overflowthresold] */\n+  if (u.value <= ovf_thresh)\n+    {\n+      w = expq (half * u.value);\n+      t = half * w;\n+      return t * w;\n+    }\n+\n+  /* |x| > overflowthresold, cosh(x) overflow */\n+  return huge * huge;\n+}"}, {"sha": "fff0861d652b1be4f40c30615c8a4b558da24005", "filename": "libquadmath/math/cosq.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fcosq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fcosq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcosq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,82 @@\n+/* s_cosl.c -- long double version of s_cos.c.\n+ * Conversion to long double by Jakub Jelinek, jj@ultra.linux.cz.\n+ */\n+\n+/*\n+ * ====================================================\n+ * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n+ *\n+ * Developed at SunPro, a Sun Microsystems, Inc. business.\n+ * Permission to use, copy, modify, and distribute this\n+ * software is freely granted, provided that this notice\n+ * is preserved.\n+ * ====================================================\n+ */\n+\n+/* cosl(x)\n+ * Return cosine function of x.\n+ *\n+ * kernel function:\n+ *\t__kernel_sinl\t\t... sine function on [-pi/4,pi/4]\n+ *\t__kernel_cosl\t\t... cosine function on [-pi/4,pi/4]\n+ *\t__ieee754_rem_pio2l\t... argument reduction routine\n+ *\n+ * Method.\n+ *      Let S,C and T denote the sin, cos and tan respectively on\n+ *\t[-PI/4, +PI/4]. Reduce the argument x to y1+y2 = x-k*pi/2\n+ *\tin [-pi/4 , +pi/4], and let n = k mod 4.\n+ *\tWe have\n+ *\n+ *          n        sin(x)      cos(x)        tan(x)\n+ *     ----------------------------------------------------------\n+ *\t    0\t       S\t   C\t\t T\n+ *\t    1\t       C\t  -S\t\t-1/T\n+ *\t    2\t      -S\t  -C\t\t T\n+ *\t    3\t      -C\t   S\t\t-1/T\n+ *     ----------------------------------------------------------\n+ *\n+ * Special cases:\n+ *      Let trig be any of sin, cos, or tan.\n+ *      trig(+-INF)  is NaN, with signals;\n+ *      trig(NaN)    is that NaN;\n+ *\n+ * Accuracy:\n+ *\tTRIG(x) returns trig(x) nearly rounded\n+ */\n+\n+#include \"quadmath-imp.h\"\n+\n+__float128\n+cosq (__float128 x)\n+{\n+\t__float128 y[2],z=0.0L;\n+\tint64_t n, ix;\n+\n+    /* High word of x. */\n+\tGET_FLT128_MSW64(ix,x);\n+\n+    /* |x| ~< pi/4 */\n+\tix &= 0x7fffffffffffffffLL;\n+\tif(ix <= 0x3ffe921fb54442d1LL)\n+\t  return __kernel_cosq(x,z);\n+\n+    /* cos(Inf or NaN) is NaN */\n+\telse if (ix>=0x7fff000000000000LL) {\n+\t    if (ix == 0x7fff000000000000LL) {\n+\t\tGET_FLT128_LSW64(n,x);\n+\t    }\n+\t    return x-x;\n+\t}\n+\n+    /* argument reduction needed */\n+\telse {\n+\t    n = rem_pio2q(x,y);\n+\t    switch(n&3) {\n+\t\tcase 0: return  __kernel_cosq(y[0],y[1]);\n+\t\tcase 1: return -__kernel_sinq(y[0],y[1],1);\n+\t\tcase 2: return -__kernel_cosq(y[0],y[1]);\n+\t\tdefault:\n+\t\t        return  __kernel_sinq(y[0],y[1],1);\n+\t    }\n+\t}\n+}"}, {"sha": "b310dc0ef32e7433d20e28c646f4bca5ce127328", "filename": "libquadmath/math/cosq_kernel.c", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fcosq_kernel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fcosq_kernel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcosq_kernel.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,127 @@\n+/* Quad-precision floating point cosine on <-pi/4,pi/4>.\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Jakub Jelinek <jj@ultra.linux.cz>\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+   02111-1307 USA.  */\n+\n+#include \"quadmath-imp.h\"\n+\n+static const __float128 c[] = {\n+#define ONE c[0]\n+ 1.00000000000000000000000000000000000E+00Q, /* 3fff0000000000000000000000000000 */\n+\n+/* cos x ~ ONE + x^2 ( SCOS1 + SCOS2 * x^2 + ... + SCOS4 * x^6 + SCOS5 * x^8 )\n+   x in <0,1/256>  */\n+#define SCOS1 c[1]\n+#define SCOS2 c[2]\n+#define SCOS3 c[3]\n+#define SCOS4 c[4]\n+#define SCOS5 c[5]\n+-5.00000000000000000000000000000000000E-01Q, /* bffe0000000000000000000000000000 */\n+ 4.16666666666666666666666666556146073E-02Q, /* 3ffa5555555555555555555555395023 */\n+-1.38888888888888888888309442601939728E-03Q, /* bff56c16c16c16c16c16a566e42c0375 */\n+ 2.48015873015862382987049502531095061E-05Q, /* 3fefa01a01a019ee02dcf7da2d6d5444 */\n+-2.75573112601362126593516899592158083E-07Q, /* bfe927e4f5dce637cb0b54908754bde0 */\n+\n+/* cos x ~ ONE + x^2 ( COS1 + COS2 * x^2 + ... + COS7 * x^12 + COS8 * x^14 )\n+   x in <0,0.1484375>  */\n+#define COS1 c[6]\n+#define COS2 c[7]\n+#define COS3 c[8]\n+#define COS4 c[9]\n+#define COS5 c[10]\n+#define COS6 c[11]\n+#define COS7 c[12]\n+#define COS8 c[13]\n+-4.99999999999999999999999999999999759E-01Q, /* bffdfffffffffffffffffffffffffffb */\n+ 4.16666666666666666666666666651287795E-02Q, /* 3ffa5555555555555555555555516f30 */\n+-1.38888888888888888888888742314300284E-03Q, /* bff56c16c16c16c16c16c16a463dfd0d */\n+ 2.48015873015873015867694002851118210E-05Q, /* 3fefa01a01a01a01a0195cebe6f3d3a5 */\n+-2.75573192239858811636614709689300351E-07Q, /* bfe927e4fb7789f5aa8142a22044b51f */\n+ 2.08767569877762248667431926878073669E-09Q, /* 3fe21eed8eff881d1e9262d7adff4373 */\n+-1.14707451049343817400420280514614892E-11Q, /* bfda9397496922a9601ed3d4ca48944b */\n+ 4.77810092804389587579843296923533297E-14Q, /* 3fd2ae5f8197cbcdcaf7c3fb4523414c */\n+\n+/* sin x ~ ONE * x + x^3 ( SSIN1 + SSIN2 * x^2 + ... + SSIN4 * x^6 + SSIN5 * x^8 )\n+   x in <0,1/256>  */\n+#define SSIN1 c[14]\n+#define SSIN2 c[15]\n+#define SSIN3 c[16]\n+#define SSIN4 c[17]\n+#define SSIN5 c[18]\n+-1.66666666666666666666666666666666659E-01Q, /* bffc5555555555555555555555555555 */\n+ 8.33333333333333333333333333146298442E-03Q, /* 3ff81111111111111111111110fe195d */\n+-1.98412698412698412697726277416810661E-04Q, /* bff2a01a01a01a01a019e7121e080d88 */\n+ 2.75573192239848624174178393552189149E-06Q, /* 3fec71de3a556c640c6aaa51aa02ab41 */\n+-2.50521016467996193495359189395805639E-08Q, /* bfe5ae644ee90c47dc71839de75b2787 */\n+};\n+\n+#define SINCOSQ_COS_HI 0\n+#define SINCOSQ_COS_LO 1\n+#define SINCOSQ_SIN_HI 2\n+#define SINCOSQ_SIN_LO 3\n+extern const __float128 __sincosq_table[];\n+\n+__float128\n+__kernel_cosq (__float128 x, __float128 y)\n+{\n+  __float128 h, l, z, sin_l, cos_l_m1;\n+  int64_t ix;\n+  uint32_t tix, hix, index;\n+  GET_FLT128_MSW64 (ix, x);\n+  tix = ((uint64_t)ix) >> 32;\n+  tix &= ~0x80000000;\t\t\t/* tix = |x|'s high 32 bits */\n+  if (tix < 0x3ffc3000)\t\t\t/* |x| < 0.1484375 */\n+    {\n+      /* Argument is small enough to approximate it by a Chebyshev\n+\t polynomial of degree 16.  */\n+      if (tix < 0x3fc60000)\t\t/* |x| < 2^-57 */\n+\tif (!((int)x)) return ONE;\t/* generate inexact */\n+      z = x * x;\n+      return ONE + (z*(COS1+z*(COS2+z*(COS3+z*(COS4+\n+\t\t    z*(COS5+z*(COS6+z*(COS7+z*COS8))))))));\n+    }\n+  else\n+    {\n+      /* So that we don't have to use too large polynomial,  we find\n+\t l and h such that x = l + h,  where fabsl(l) <= 1.0/256 with 83\n+\t possible values for h.  We look up cosl(h) and sinl(h) in\n+\t pre-computed tables,  compute cosl(l) and sinl(l) using a\n+\t Chebyshev polynomial of degree 10(11) and compute\n+\t cosl(h+l) = cosl(h)cosl(l) - sinl(h)sinl(l).  */\n+      index = 0x3ffe - (tix >> 16);\n+      hix = (tix + (0x200 << index)) & (0xfffffc00 << index);\n+      x = fabsq (x);\n+      switch (index)\n+\t{\n+\tcase 0: index = ((45 << 10) + hix - 0x3ffe0000) >> 8; break;\n+\tcase 1: index = ((13 << 11) + hix - 0x3ffd0000) >> 9; break;\n+\tdefault:\n+\tcase 2: index = (hix - 0x3ffc3000) >> 10; break;\n+\t}\n+\n+      SET_FLT128_WORDS64(h, ((uint64_t)hix) << 32, 0);\n+      l = y - (h - x);\n+      z = l * l;\n+      sin_l = l*(ONE+z*(SSIN1+z*(SSIN2+z*(SSIN3+z*(SSIN4+z*SSIN5)))));\n+      cos_l_m1 = z*(SCOS1+z*(SCOS2+z*(SCOS3+z*(SCOS4+z*SCOS5))));\n+      return __sincosq_table [index + SINCOSQ_COS_HI]\n+\t     + (__sincosq_table [index + SINCOSQ_COS_LO]\n+\t\t- (__sincosq_table [index + SINCOSQ_SIN_HI] * sin_l\n+\t\t   - __sincosq_table [index + SINCOSQ_COS_HI] * cos_l_m1));\n+    }\n+}"}, {"sha": "50db88ae821811e4c7615673fdae548c3ccfb683", "filename": "libquadmath/math/erfq.c", "status": "added", "additions": 935, "deletions": 0, "changes": 935, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Ferfq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Ferfq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ferfq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,935 @@\n+/*\n+ * ====================================================\n+ * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n+ *\n+ * Developed at SunPro, a Sun Microsystems, Inc. business.\n+ * Permission to use, copy, modify, and distribute this\n+ * software is freely granted, provided that this notice\n+ * is preserved.\n+ * ====================================================\n+ */\n+\n+/* Modifications and expansions for 128-bit long double are\n+   Copyright (C) 2001 Stephen L. Moshier <moshier@na-net.ornl.gov>\n+   and are incorporated herein by permission of the author.  The author \n+   reserves the right to distribute this material elsewhere under different\n+   copying permissions.  These modifications are distributed here under \n+   the following terms:\n+\n+    This library is free software; you can redistribute it and/or\n+    modify it under the terms of the GNU Lesser General Public\n+    License as published by the Free Software Foundation; either\n+    version 2.1 of the License, or (at your option) any later version.\n+\n+    This library is distributed in the hope that it will be useful,\n+    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+    Lesser General Public License for more details.\n+\n+    You should have received a copy of the GNU Lesser General Public\n+    License along with this library; if not, write to the Free Software\n+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA */\n+\n+/* double erf(double x)\n+ * double erfc(double x)\n+ *\t\t\t     x\n+ *\t\t      2      |\\\n+ *     erf(x)  =  ---------  | exp(-t*t)dt\n+ *\t\t   sqrt(pi) \\|\n+ *\t\t\t     0\n+ *\n+ *     erfc(x) =  1-erf(x)\n+ *  Note that\n+ *\t\terf(-x) = -erf(x)\n+ *\t\terfc(-x) = 2 - erfc(x)\n+ *\n+ * Method:\n+ *\t1.  erf(x)  = x + x*R(x^2) for |x| in [0, 7/8]\n+ *\t   Remark. The formula is derived by noting\n+ *          erf(x) = (2/sqrt(pi))*(x - x^3/3 + x^5/10 - x^7/42 + ....)\n+ *\t   and that\n+ *          2/sqrt(pi) = 1.128379167095512573896158903121545171688\n+ *\t   is close to one.\n+ *\n+ *      1a. erf(x)  = 1 - erfc(x), for |x| > 1.0\n+ *          erfc(x) = 1 - erf(x)  if |x| < 1/4\n+ *\n+ *      2. For |x| in [7/8, 1], let s = |x| - 1, and\n+ *         c = 0.84506291151 rounded to single (24 bits)\n+ *\terf(s + c)  = sign(x) * (c  + P1(s)/Q1(s))\n+ *\t   Remark: here we use the taylor series expansion at x=1.\n+ *\t\terf(1+s) = erf(1) + s*Poly(s)\n+ *\t\t\t = 0.845.. + P1(s)/Q1(s)\n+ *\t   Note that |P1/Q1|< 0.078 for x in [0.84375,1.25]\n+ *\n+ *      3. For x in [1/4, 5/4],\n+ *\terfc(s + const)  = erfc(const)  + s P1(s)/Q1(s)\n+ *              for const = 1/4, 3/8, ..., 9/8\n+ *              and 0 <= s <= 1/8 .\n+ *\n+ *      4. For x in [5/4, 107],\n+ *\terfc(x) = (1/x)*exp(-x*x-0.5625 + R(z))\n+ *              z=1/x^2\n+ *         The interval is partitioned into several segments\n+ *         of width 1/8 in 1/x.\n+ *\n+ *      Note1:\n+ *\t   To compute exp(-x*x-0.5625+R/S), let s be a single\n+ *\t   precision number and s := x; then\n+ *\t\t-x*x = -s*s + (s-x)*(s+x)\n+ *\t        exp(-x*x-0.5626+R/S) =\n+ *\t\t\texp(-s*s-0.5625)*exp((s-x)*(s+x)+R/S);\n+ *      Note2:\n+ *\t   Here 4 and 5 make use of the asymptotic series\n+ *\t\t\t  exp(-x*x)\n+ *\t\terfc(x) ~ ---------- * ( 1 + Poly(1/x^2) )\n+ *\t\t\t  x*sqrt(pi)\n+ *\n+ *      5. For inf > x >= 107\n+ *\terf(x)  = sign(x) *(1 - tiny)  (raise inexact)\n+ *\terfc(x) = tiny*tiny (raise underflow) if x > 0\n+ *\t\t\t= 2 - tiny if x<0\n+ *\n+ *      7. Special case:\n+ *\terf(0)  = 0, erf(inf)  = 1, erf(-inf) = -1,\n+ *\terfc(0) = 1, erfc(inf) = 0, erfc(-inf) = 2,\n+ *\t\terfc/erf(NaN) is NaN\n+ */\n+\n+#include \"quadmath-imp.h\"\n+\n+\n+\n+__float128 erfcq (__float128);\n+\n+\n+/* Evaluate P[n] x^n  +  P[n-1] x^(n-1)  +  ...  +  P[0] */\n+\n+static __float128\n+neval (__float128 x, const __float128 *p, int n)\n+{\n+  __float128 y;\n+\n+  p += n;\n+  y = *p--;\n+  do\n+    {\n+      y = y * x + *p--;\n+    }\n+  while (--n > 0);\n+  return y;\n+}\n+\n+\n+/* Evaluate x^n+1  +  P[n] x^(n)  +  P[n-1] x^(n-1)  +  ...  +  P[0] */\n+\n+static __float128\n+deval (__float128 x, const __float128 *p, int n)\n+{\n+  __float128 y;\n+\n+  p += n;\n+  y = x + *p--;\n+  do\n+    {\n+      y = y * x + *p--;\n+    }\n+  while (--n > 0);\n+  return y;\n+}\n+\n+\n+\n+static const __float128\n+tiny = 1e-4931Q,\n+  half = 0.5Q,\n+  one = 1.0Q,\n+  two = 2.0Q,\n+  /* 2/sqrt(pi) - 1 */\n+  efx = 1.2837916709551257389615890312154517168810E-1Q,\n+  /* 8 * (2/sqrt(pi) - 1) */\n+  efx8 = 1.0270333367641005911692712249723613735048E0Q;\n+\n+\n+/* erf(x)  = x  + x R(x^2)\n+   0 <= x <= 7/8\n+   Peak relative error 1.8e-35  */\n+#define NTN1 8\n+static const __float128 TN1[NTN1 + 1] =\n+{\n+ -3.858252324254637124543172907442106422373E10Q,\n+  9.580319248590464682316366876952214879858E10Q,\n+  1.302170519734879977595901236693040544854E10Q,\n+  2.922956950426397417800321486727032845006E9Q,\n+  1.764317520783319397868923218385468729799E8Q,\n+  1.573436014601118630105796794840834145120E7Q,\n+  4.028077380105721388745632295157816229289E5Q,\n+  1.644056806467289066852135096352853491530E4Q,\n+  3.390868480059991640235675479463287886081E1Q\n+};\n+#define NTD1 8\n+static const __float128 TD1[NTD1 + 1] =\n+{\n+  -3.005357030696532927149885530689529032152E11Q,\n+  -1.342602283126282827411658673839982164042E11Q,\n+  -2.777153893355340961288511024443668743399E10Q,\n+  -3.483826391033531996955620074072768276974E9Q,\n+  -2.906321047071299585682722511260895227921E8Q,\n+  -1.653347985722154162439387878512427542691E7Q,\n+  -6.245520581562848778466500301865173123136E5Q,\n+  -1.402124304177498828590239373389110545142E4Q,\n+  -1.209368072473510674493129989468348633579E2Q\n+/* 1.0E0 */\n+};\n+\n+\n+/* erf(z+1)  = erf_const + P(z)/Q(z)\n+   -.125 <= z <= 0\n+   Peak relative error 7.3e-36  */\n+static const __float128 erf_const = 0.845062911510467529296875Q;\n+#define NTN2 8\n+static const __float128 TN2[NTN2 + 1] =\n+{\n+ -4.088889697077485301010486931817357000235E1Q,\n+  7.157046430681808553842307502826960051036E3Q,\n+ -2.191561912574409865550015485451373731780E3Q,\n+  2.180174916555316874988981177654057337219E3Q,\n+  2.848578658049670668231333682379720943455E2Q,\n+  1.630362490952512836762810462174798925274E2Q,\n+  6.317712353961866974143739396865293596895E0Q,\n+  2.450441034183492434655586496522857578066E1Q,\n+  5.127662277706787664956025545897050896203E-1Q\n+};\n+#define NTD2 8\n+static const __float128 TD2[NTD2 + 1] =\n+{\n+  1.731026445926834008273768924015161048885E4Q,\n+  1.209682239007990370796112604286048173750E4Q,\n+  1.160950290217993641320602282462976163857E4Q,\n+  5.394294645127126577825507169061355698157E3Q,\n+  2.791239340533632669442158497532521776093E3Q,\n+  8.989365571337319032943005387378993827684E2Q,\n+  2.974016493766349409725385710897298069677E2Q,\n+  6.148192754590376378740261072533527271947E1Q,\n+  1.178502892490738445655468927408440847480E1Q\n+ /* 1.0E0 */\n+};\n+\n+\n+/* erfc(x + 0.25) = erfc(0.25) + x R(x)\n+   0 <= x < 0.125\n+   Peak relative error 1.4e-35  */\n+#define NRNr13 8\n+static const __float128 RNr13[NRNr13 + 1] =\n+{\n+ -2.353707097641280550282633036456457014829E3Q,\n+  3.871159656228743599994116143079870279866E2Q,\n+ -3.888105134258266192210485617504098426679E2Q,\n+ -2.129998539120061668038806696199343094971E1Q,\n+ -8.125462263594034672468446317145384108734E1Q,\n+  8.151549093983505810118308635926270319660E0Q,\n+ -5.033362032729207310462422357772568553670E0Q,\n+ -4.253956621135136090295893547735851168471E-2Q,\n+ -8.098602878463854789780108161581050357814E-2Q\n+};\n+#define NRDr13 7\n+static const __float128 RDr13[NRDr13 + 1] =\n+{\n+  2.220448796306693503549505450626652881752E3Q,\n+  1.899133258779578688791041599040951431383E2Q,\n+  1.061906712284961110196427571557149268454E3Q,\n+  7.497086072306967965180978101974566760042E1Q,\n+  2.146796115662672795876463568170441327274E2Q,\n+  1.120156008362573736664338015952284925592E1Q,\n+  2.211014952075052616409845051695042741074E1Q,\n+  6.469655675326150785692908453094054988938E-1Q\n+ /* 1.0E0 */\n+};\n+/* erfc(0.25) = C13a + C13b to extra precision.  */\n+static const __float128 C13a = 0.723663330078125Q;\n+static const __float128 C13b = 1.0279753638067014931732235184287934646022E-5Q;\n+\n+\n+/* erfc(x + 0.375) = erfc(0.375) + x R(x)\n+   0 <= x < 0.125\n+   Peak relative error 1.2e-35  */\n+#define NRNr14 8\n+static const __float128 RNr14[NRNr14 + 1] =\n+{\n+ -2.446164016404426277577283038988918202456E3Q,\n+  6.718753324496563913392217011618096698140E2Q,\n+ -4.581631138049836157425391886957389240794E2Q,\n+ -2.382844088987092233033215402335026078208E1Q,\n+ -7.119237852400600507927038680970936336458E1Q,\n+  1.313609646108420136332418282286454287146E1Q,\n+ -6.188608702082264389155862490056401365834E0Q,\n+ -2.787116601106678287277373011101132659279E-2Q,\n+ -2.230395570574153963203348263549700967918E-2Q\n+};\n+#define NRDr14 7\n+static const __float128 RDr14[NRDr14 + 1] =\n+{\n+  2.495187439241869732696223349840963702875E3Q,\n+  2.503549449872925580011284635695738412162E2Q,\n+  1.159033560988895481698051531263861842461E3Q,\n+  9.493751466542304491261487998684383688622E1Q,\n+  2.276214929562354328261422263078480321204E2Q,\n+  1.367697521219069280358984081407807931847E1Q,\n+  2.276988395995528495055594829206582732682E1Q,\n+  7.647745753648996559837591812375456641163E-1Q\n+ /* 1.0E0 */\n+};\n+/* erfc(0.375) = C14a + C14b to extra precision.  */\n+static const __float128 C14a = 0.5958709716796875Q;\n+static const __float128 C14b = 1.2118885490201676174914080878232469565953E-5Q;\n+\n+/* erfc(x + 0.5) = erfc(0.5) + x R(x)\n+   0 <= x < 0.125\n+   Peak relative error 4.7e-36  */\n+#define NRNr15 8\n+static const __float128 RNr15[NRNr15 + 1] =\n+{\n+ -2.624212418011181487924855581955853461925E3Q,\n+  8.473828904647825181073831556439301342756E2Q,\n+ -5.286207458628380765099405359607331669027E2Q,\n+ -3.895781234155315729088407259045269652318E1Q,\n+ -6.200857908065163618041240848728398496256E1Q,\n+  1.469324610346924001393137895116129204737E1Q,\n+ -6.961356525370658572800674953305625578903E0Q,\n+  5.145724386641163809595512876629030548495E-3Q,\n+  1.990253655948179713415957791776180406812E-2Q\n+};\n+#define NRDr15 7\n+static const __float128 RDr15[NRDr15 + 1] =\n+{\n+  2.986190760847974943034021764693341524962E3Q,\n+  5.288262758961073066335410218650047725985E2Q,\n+  1.363649178071006978355113026427856008978E3Q,\n+  1.921707975649915894241864988942255320833E2Q,\n+  2.588651100651029023069013885900085533226E2Q,\n+  2.628752920321455606558942309396855629459E1Q,\n+  2.455649035885114308978333741080991380610E1Q,\n+  1.378826653595128464383127836412100939126E0Q\n+  /* 1.0E0 */\n+};\n+/* erfc(0.5) = C15a + C15b to extra precision.  */\n+static const __float128 C15a = 0.4794921875Q;\n+static const __float128 C15b = 7.9346869534623172533461080354712635484242E-6Q;\n+\n+/* erfc(x + 0.625) = erfc(0.625) + x R(x)\n+   0 <= x < 0.125\n+   Peak relative error 5.1e-36  */\n+#define NRNr16 8\n+static const __float128 RNr16[NRNr16 + 1] =\n+{\n+ -2.347887943200680563784690094002722906820E3Q,\n+  8.008590660692105004780722726421020136482E2Q,\n+ -5.257363310384119728760181252132311447963E2Q,\n+ -4.471737717857801230450290232600243795637E1Q,\n+ -4.849540386452573306708795324759300320304E1Q,\n+  1.140885264677134679275986782978655952843E1Q,\n+ -6.731591085460269447926746876983786152300E0Q,\n+  1.370831653033047440345050025876085121231E-1Q,\n+  2.022958279982138755020825717073966576670E-2Q,\n+};\n+#define NRDr16 7\n+static const __float128 RDr16[NRDr16 + 1] =\n+{\n+  3.075166170024837215399323264868308087281E3Q,\n+  8.730468942160798031608053127270430036627E2Q,\n+  1.458472799166340479742581949088453244767E3Q,\n+  3.230423687568019709453130785873540386217E2Q,\n+  2.804009872719893612081109617983169474655E2Q,\n+  4.465334221323222943418085830026979293091E1Q,\n+  2.612723259683205928103787842214809134746E1Q,\n+  2.341526751185244109722204018543276124997E0Q,\n+  /* 1.0E0 */\n+};\n+/* erfc(0.625) = C16a + C16b to extra precision.  */\n+static const __float128 C16a = 0.3767547607421875Q;\n+static const __float128 C16b = 4.3570693945275513594941232097252997287766E-6Q;\n+\n+/* erfc(x + 0.75) = erfc(0.75) + x R(x)\n+   0 <= x < 0.125\n+   Peak relative error 1.7e-35  */\n+#define NRNr17 8\n+static const __float128 RNr17[NRNr17 + 1] =\n+{\n+  -1.767068734220277728233364375724380366826E3Q,\n+  6.693746645665242832426891888805363898707E2Q,\n+  -4.746224241837275958126060307406616817753E2Q,\n+  -2.274160637728782675145666064841883803196E1Q,\n+  -3.541232266140939050094370552538987982637E1Q,\n+  6.988950514747052676394491563585179503865E0Q,\n+  -5.807687216836540830881352383529281215100E0Q,\n+  3.631915988567346438830283503729569443642E-1Q,\n+  -1.488945487149634820537348176770282391202E-2Q\n+};\n+#define NRDr17 7\n+static const __float128 RDr17[NRDr17 + 1] =\n+{\n+  2.748457523498150741964464942246913394647E3Q,\n+  1.020213390713477686776037331757871252652E3Q,\n+  1.388857635935432621972601695296561952738E3Q,\n+  3.903363681143817750895999579637315491087E2Q,\n+  2.784568344378139499217928969529219886578E2Q,\n+  5.555800830216764702779238020065345401144E1Q,\n+  2.646215470959050279430447295801291168941E1Q,\n+  2.984905282103517497081766758550112011265E0Q,\n+  /* 1.0E0 */\n+};\n+/* erfc(0.75) = C17a + C17b to extra precision.  */\n+static const __float128 C17a = 0.2888336181640625Q;\n+static const __float128 C17b = 1.0748182422368401062165408589222625794046E-5Q;\n+\n+\n+/* erfc(x + 0.875) = erfc(0.875) + x R(x)\n+   0 <= x < 0.125\n+   Peak relative error 2.2e-35  */\n+#define NRNr18 8\n+static const __float128 RNr18[NRNr18 + 1] =\n+{\n+ -1.342044899087593397419622771847219619588E3Q,\n+  6.127221294229172997509252330961641850598E2Q,\n+ -4.519821356522291185621206350470820610727E2Q,\n+  1.223275177825128732497510264197915160235E1Q,\n+ -2.730789571382971355625020710543532867692E1Q,\n+  4.045181204921538886880171727755445395862E0Q,\n+ -4.925146477876592723401384464691452700539E0Q,\n+  5.933878036611279244654299924101068088582E-1Q,\n+ -5.557645435858916025452563379795159124753E-2Q\n+};\n+#define NRDr18 7\n+static const __float128 RDr18[NRDr18 + 1] =\n+{\n+  2.557518000661700588758505116291983092951E3Q,\n+  1.070171433382888994954602511991940418588E3Q,\n+  1.344842834423493081054489613250688918709E3Q,\n+  4.161144478449381901208660598266288188426E2Q,\n+  2.763670252219855198052378138756906980422E2Q,\n+  5.998153487868943708236273854747564557632E1Q,\n+  2.657695108438628847733050476209037025318E1Q,\n+  3.252140524394421868923289114410336976512E0Q,\n+  /* 1.0E0 */\n+};\n+/* erfc(0.875) = C18a + C18b to extra precision.  */\n+static const __float128 C18a = 0.215911865234375Q;\n+static const __float128 C18b = 1.3073705765341685464282101150637224028267E-5Q;\n+\n+/* erfc(x + 1.0) = erfc(1.0) + x R(x)\n+   0 <= x < 0.125\n+   Peak relative error 1.6e-35  */\n+#define NRNr19 8\n+static const __float128 RNr19[NRNr19 + 1] =\n+{\n+ -1.139180936454157193495882956565663294826E3Q,\n+  6.134903129086899737514712477207945973616E2Q,\n+ -4.628909024715329562325555164720732868263E2Q,\n+  4.165702387210732352564932347500364010833E1Q,\n+ -2.286979913515229747204101330405771801610E1Q,\n+  1.870695256449872743066783202326943667722E0Q,\n+ -4.177486601273105752879868187237000032364E0Q,\n+  7.533980372789646140112424811291782526263E-1Q,\n+ -8.629945436917752003058064731308767664446E-2Q\n+};\n+#define NRDr19 7\n+static const __float128 RDr19[NRDr19 + 1] =\n+{\n+  2.744303447981132701432716278363418643778E3Q,\n+  1.266396359526187065222528050591302171471E3Q,\n+  1.466739461422073351497972255511919814273E3Q,\n+  4.868710570759693955597496520298058147162E2Q,\n+  2.993694301559756046478189634131722579643E2Q,\n+  6.868976819510254139741559102693828237440E1Q,\n+  2.801505816247677193480190483913753613630E1Q,\n+  3.604439909194350263552750347742663954481E0Q,\n+  /* 1.0E0 */\n+};\n+/* erfc(1.0) = C19a + C19b to extra precision.  */\n+static const __float128 C19a = 0.15728759765625Q;\n+static const __float128 C19b = 1.1609394035130658779364917390740703933002E-5Q;\n+\n+/* erfc(x + 1.125) = erfc(1.125) + x R(x)\n+   0 <= x < 0.125\n+   Peak relative error 3.6e-36  */\n+#define NRNr20 8\n+static const __float128 RNr20[NRNr20 + 1] =\n+{\n+ -9.652706916457973956366721379612508047640E2Q,\n+  5.577066396050932776683469951773643880634E2Q,\n+ -4.406335508848496713572223098693575485978E2Q,\n+  5.202893466490242733570232680736966655434E1Q,\n+ -1.931311847665757913322495948705563937159E1Q,\n+ -9.364318268748287664267341457164918090611E-2Q,\n+ -3.306390351286352764891355375882586201069E0Q,\n+  7.573806045289044647727613003096916516475E-1Q,\n+ -9.611744011489092894027478899545635991213E-2Q\n+};\n+#define NRDr20 7\n+static const __float128 RDr20[NRDr20 + 1] =\n+{\n+  3.032829629520142564106649167182428189014E3Q,\n+  1.659648470721967719961167083684972196891E3Q,\n+  1.703545128657284619402511356932569292535E3Q,\n+  6.393465677731598872500200253155257708763E2Q,\n+  3.489131397281030947405287112726059221934E2Q,\n+  8.848641738570783406484348434387611713070E1Q,\n+  3.132269062552392974833215844236160958502E1Q,\n+  4.430131663290563523933419966185230513168E0Q\n+ /* 1.0E0 */\n+};\n+/* erfc(1.125) = C20a + C20b to extra precision.  */\n+static const __float128 C20a = 0.111602783203125Q;\n+static const __float128 C20b = 8.9850951672359304215530728365232161564636E-6Q;\n+\n+/* erfc(1/x) = 1/x exp (-1/x^2 - 0.5625 + R(1/x^2))\n+   7/8 <= 1/x < 1\n+   Peak relative error 1.4e-35  */\n+#define NRNr8 9\n+static const __float128 RNr8[NRNr8 + 1] =\n+{\n+  3.587451489255356250759834295199296936784E1Q,\n+  5.406249749087340431871378009874875889602E2Q,\n+  2.931301290625250886238822286506381194157E3Q,\n+  7.359254185241795584113047248898753470923E3Q,\n+  9.201031849810636104112101947312492532314E3Q,\n+  5.749697096193191467751650366613289284777E3Q,\n+  1.710415234419860825710780802678697889231E3Q,\n+  2.150753982543378580859546706243022719599E2Q,\n+  8.740953582272147335100537849981160931197E0Q,\n+  4.876422978828717219629814794707963640913E-2Q\n+};\n+#define NRDr8 8\n+static const __float128 RDr8[NRDr8 + 1] =\n+{\n+  6.358593134096908350929496535931630140282E1Q,\n+  9.900253816552450073757174323424051765523E2Q,\n+  5.642928777856801020545245437089490805186E3Q,\n+  1.524195375199570868195152698617273739609E4Q,\n+  2.113829644500006749947332935305800887345E4Q,\n+  1.526438562626465706267943737310282977138E4Q,\n+  5.561370922149241457131421914140039411782E3Q,\n+  9.394035530179705051609070428036834496942E2Q,\n+  6.147019596150394577984175188032707343615E1Q\n+  /* 1.0E0 */\n+};\n+\n+/* erfc(1/x) = 1/x exp (-1/x^2 - 0.5625 + R(1/x^2))\n+   0.75 <= 1/x <= 0.875\n+   Peak relative error 2.0e-36  */\n+#define NRNr7 9\n+static const __float128 RNr7[NRNr7 + 1] =\n+{\n+ 1.686222193385987690785945787708644476545E1Q,\n+ 1.178224543567604215602418571310612066594E3Q,\n+ 1.764550584290149466653899886088166091093E4Q,\n+ 1.073758321890334822002849369898232811561E5Q,\n+ 3.132840749205943137619839114451290324371E5Q,\n+ 4.607864939974100224615527007793867585915E5Q,\n+ 3.389781820105852303125270837910972384510E5Q,\n+ 1.174042187110565202875011358512564753399E5Q,\n+ 1.660013606011167144046604892622504338313E4Q,\n+ 6.700393957480661937695573729183733234400E2Q\n+};\n+#define NRDr7 9\n+static const __float128 RDr7[NRDr7 + 1] =\n+{\n+-1.709305024718358874701575813642933561169E3Q,\n+-3.280033887481333199580464617020514788369E4Q,\n+-2.345284228022521885093072363418750835214E5Q,\n+-8.086758123097763971926711729242327554917E5Q,\n+-1.456900414510108718402423999575992450138E6Q,\n+-1.391654264881255068392389037292702041855E6Q,\n+-6.842360801869939983674527468509852583855E5Q,\n+-1.597430214446573566179675395199807533371E5Q,\n+-1.488876130609876681421645314851760773480E4Q,\n+-3.511762950935060301403599443436465645703E2Q\n+ /* 1.0E0 */\n+};\n+\n+/* erfc(1/x) = 1/x exp(-1/x^2 - 0.5625 + R(1/x^2))\n+   5/8 <= 1/x < 3/4\n+   Peak relative error 1.9e-35  */\n+#define NRNr6 9\n+static const __float128 RNr6[NRNr6 + 1] =\n+{\n+ 1.642076876176834390623842732352935761108E0Q,\n+ 1.207150003611117689000664385596211076662E2Q,\n+ 2.119260779316389904742873816462800103939E3Q,\n+ 1.562942227734663441801452930916044224174E4Q,\n+ 5.656779189549710079988084081145693580479E4Q,\n+ 1.052166241021481691922831746350942786299E5Q,\n+ 9.949798524786000595621602790068349165758E4Q,\n+ 4.491790734080265043407035220188849562856E4Q,\n+ 8.377074098301530326270432059434791287601E3Q,\n+ 4.506934806567986810091824791963991057083E2Q\n+};\n+#define NRDr6 9\n+static const __float128 RDr6[NRDr6 + 1] =\n+{\n+-1.664557643928263091879301304019826629067E2Q,\n+-3.800035902507656624590531122291160668452E3Q,\n+-3.277028191591734928360050685359277076056E4Q,\n+-1.381359471502885446400589109566587443987E5Q,\n+-3.082204287382581873532528989283748656546E5Q,\n+-3.691071488256738343008271448234631037095E5Q,\n+-2.300482443038349815750714219117566715043E5Q,\n+-6.873955300927636236692803579555752171530E4Q,\n+-8.262158817978334142081581542749986845399E3Q,\n+-2.517122254384430859629423488157361983661E2Q\n+ /* 1.00 */\n+};\n+\n+/* erfc(1/x) = 1/x exp(-1/x^2 - 0.5625 + R(1/x^2))\n+   1/2 <= 1/x < 5/8\n+   Peak relative error 4.6e-36  */\n+#define NRNr5 10\n+static const __float128 RNr5[NRNr5 + 1] =\n+{\n+-3.332258927455285458355550878136506961608E-3Q,\n+-2.697100758900280402659586595884478660721E-1Q,\n+-6.083328551139621521416618424949137195536E0Q,\n+-6.119863528983308012970821226810162441263E1Q,\n+-3.176535282475593173248810678636522589861E2Q,\n+-8.933395175080560925809992467187963260693E2Q,\n+-1.360019508488475978060917477620199499560E3Q,\n+-1.075075579828188621541398761300910213280E3Q,\n+-4.017346561586014822824459436695197089916E2Q,\n+-5.857581368145266249509589726077645791341E1Q,\n+-2.077715925587834606379119585995758954399E0Q\n+};\n+#define NRDr5 9\n+static const __float128 RDr5[NRDr5 + 1] =\n+{\n+ 3.377879570417399341550710467744693125385E-1Q,\n+ 1.021963322742390735430008860602594456187E1Q,\n+ 1.200847646592942095192766255154827011939E2Q,\n+ 7.118915528142927104078182863387116942836E2Q,\n+ 2.318159380062066469386544552429625026238E3Q,\n+ 4.238729853534009221025582008928765281620E3Q,\n+ 4.279114907284825886266493994833515580782E3Q,\n+ 2.257277186663261531053293222591851737504E3Q,\n+ 5.570475501285054293371908382916063822957E2Q,\n+ 5.142189243856288981145786492585432443560E1Q\n+ /* 1.0E0 */\n+};\n+\n+/* erfc(1/x) = 1/x exp(-1/x^2 - 0.5625 + R(1/x^2))\n+   3/8 <= 1/x < 1/2\n+   Peak relative error 2.0e-36  */\n+#define NRNr4 10\n+static const __float128 RNr4[NRNr4 + 1] =\n+{\n+ 3.258530712024527835089319075288494524465E-3Q,\n+ 2.987056016877277929720231688689431056567E-1Q,\n+ 8.738729089340199750734409156830371528862E0Q,\n+ 1.207211160148647782396337792426311125923E2Q,\n+ 8.997558632489032902250523945248208224445E2Q,\n+ 3.798025197699757225978410230530640879762E3Q,\n+ 9.113203668683080975637043118209210146846E3Q,\n+ 1.203285891339933238608683715194034900149E4Q,\n+ 8.100647057919140328536743641735339740855E3Q,\n+ 2.383888249907144945837976899822927411769E3Q,\n+ 2.127493573166454249221983582495245662319E2Q\n+};\n+#define NRDr4 10\n+static const __float128 RDr4[NRDr4 + 1] =\n+{\n+-3.303141981514540274165450687270180479586E-1Q,\n+-1.353768629363605300707949368917687066724E1Q,\n+-2.206127630303621521950193783894598987033E2Q,\n+-1.861800338758066696514480386180875607204E3Q,\n+-8.889048775872605708249140016201753255599E3Q,\n+-2.465888106627948210478692168261494857089E4Q,\n+-3.934642211710774494879042116768390014289E4Q,\n+-3.455077258242252974937480623730228841003E4Q,\n+-1.524083977439690284820586063729912653196E4Q,\n+-2.810541887397984804237552337349093953857E3Q,\n+-1.343929553541159933824901621702567066156E2Q\n+ /* 1.0E0 */\n+};\n+\n+/* erfc(1/x) = 1/x exp(-1/x^2 - 0.5625 + R(1/x^2))\n+   1/4 <= 1/x < 3/8\n+   Peak relative error 8.4e-37  */\n+#define NRNr3 11\n+static const __float128 RNr3[NRNr3 + 1] =\n+{\n+-1.952401126551202208698629992497306292987E-6Q,\n+-2.130881743066372952515162564941682716125E-4Q,\n+-8.376493958090190943737529486107282224387E-3Q,\n+-1.650592646560987700661598877522831234791E-1Q,\n+-1.839290818933317338111364667708678163199E0Q,\n+-1.216278715570882422410442318517814388470E1Q,\n+-4.818759344462360427612133632533779091386E1Q,\n+-1.120994661297476876804405329172164436784E2Q,\n+-1.452850765662319264191141091859300126931E2Q,\n+-9.485207851128957108648038238656777241333E1Q,\n+-2.563663855025796641216191848818620020073E1Q,\n+-1.787995944187565676837847610706317833247E0Q\n+};\n+#define NRDr3 10\n+static const __float128 RDr3[NRDr3 + 1] =\n+{\n+ 1.979130686770349481460559711878399476903E-4Q,\n+ 1.156941716128488266238105813374635099057E-2Q,\n+ 2.752657634309886336431266395637285974292E-1Q,\n+ 3.482245457248318787349778336603569327521E0Q,\n+ 2.569347069372696358578399521203959253162E1Q,\n+ 1.142279000180457419740314694631879921561E2Q,\n+ 3.056503977190564294341422623108332700840E2Q,\n+ 4.780844020923794821656358157128719184422E2Q,\n+ 4.105972727212554277496256802312730410518E2Q,\n+ 1.724072188063746970865027817017067646246E2Q,\n+ 2.815939183464818198705278118326590370435E1Q\n+ /* 1.0E0 */\n+};\n+\n+/* erfc(1/x) = 1/x exp(-1/x^2 - 0.5625 + R(1/x^2))\n+   1/8 <= 1/x < 1/4\n+   Peak relative error 1.5e-36  */\n+#define NRNr2 11\n+static const __float128 RNr2[NRNr2 + 1] =\n+{\n+-2.638914383420287212401687401284326363787E-8Q,\n+-3.479198370260633977258201271399116766619E-6Q,\n+-1.783985295335697686382487087502222519983E-4Q,\n+-4.777876933122576014266349277217559356276E-3Q,\n+-7.450634738987325004070761301045014986520E-2Q,\n+-7.068318854874733315971973707247467326619E-1Q,\n+-4.113919921935944795764071670806867038732E0Q,\n+-1.440447573226906222417767283691888875082E1Q,\n+-2.883484031530718428417168042141288943905E1Q,\n+-2.990886974328476387277797361464279931446E1Q,\n+-1.325283914915104866248279787536128997331E1Q,\n+-1.572436106228070195510230310658206154374E0Q\n+};\n+#define NRDr2 10\n+static const __float128 RDr2[NRDr2 + 1] =\n+{\n+ 2.675042728136731923554119302571867799673E-6Q,\n+ 2.170997868451812708585443282998329996268E-4Q,\n+ 7.249969752687540289422684951196241427445E-3Q,\n+ 1.302040375859768674620410563307838448508E-1Q,\n+ 1.380202483082910888897654537144485285549E0Q,\n+ 8.926594113174165352623847870299170069350E0Q,\n+ 3.521089584782616472372909095331572607185E1Q,\n+ 8.233547427533181375185259050330809105570E1Q,\n+ 1.072971579885803033079469639073292840135E2Q,\n+ 6.943803113337964469736022094105143158033E1Q,\n+ 1.775695341031607738233608307835017282662E1Q\n+ /* 1.0E0 */\n+};\n+\n+/* erfc(1/x) = 1/x exp(-1/x^2 - 0.5625 + R(1/x^2))\n+   1/128 <= 1/x < 1/8\n+   Peak relative error 2.2e-36  */\n+#define NRNr1 9\n+static const __float128 RNr1[NRNr1 + 1] =\n+{\n+-4.250780883202361946697751475473042685782E-8Q,\n+-5.375777053288612282487696975623206383019E-6Q,\n+-2.573645949220896816208565944117382460452E-4Q,\n+-6.199032928113542080263152610799113086319E-3Q,\n+-8.262721198693404060380104048479916247786E-2Q,\n+-6.242615227257324746371284637695778043982E-1Q,\n+-2.609874739199595400225113299437099626386E0Q,\n+-5.581967563336676737146358534602770006970E0Q,\n+-5.124398923356022609707490956634280573882E0Q,\n+-1.290865243944292370661544030414667556649E0Q\n+};\n+#define NRDr1 8\n+static const __float128 RDr1[NRDr1 + 1] =\n+{\n+ 4.308976661749509034845251315983612976224E-6Q,\n+ 3.265390126432780184125233455960049294580E-4Q,\n+ 9.811328839187040701901866531796570418691E-3Q,\n+ 1.511222515036021033410078631914783519649E-1Q,\n+ 1.289264341917429958858379585970225092274E0Q,\n+ 6.147640356182230769548007536914983522270E0Q,\n+ 1.573966871337739784518246317003956180750E1Q,\n+ 1.955534123435095067199574045529218238263E1Q,\n+ 9.472613121363135472247929109615785855865E0Q\n+  /* 1.0E0 */\n+};\n+\n+\n+__float128\n+erfq (__float128 x)\n+{\n+  __float128 a, y, z;\n+  int32_t i, ix, sign;\n+  ieee854_float128 u;\n+\n+  u.value = x;\n+  sign = u.words32.w0;\n+  ix = sign & 0x7fffffff;\n+\n+  if (ix >= 0x7fff0000)\n+    {\t\t\t\t/* erf(nan)=nan */\n+      i = ((sign & 0xffff0000) >> 31) << 1;\n+      return (__float128) (1 - i) + one / x;\t/* erf(+-inf)=+-1 */\n+    }\n+\n+  if (ix >= 0x3fff0000) /* |x| >= 1.0 */\n+    {\n+      y = erfcq (x);\n+      return (one - y);\n+      /*    return (one - erfcq (x)); */\n+    }\n+  u.words32.w0 = ix;\n+  a = u.value;\n+  z = x * x;\n+  if (ix < 0x3ffec000)  /* a < 0.875 */\n+    {\n+      if (ix < 0x3fc60000) /* |x|<2**-57 */\n+\t{\n+\t  if (ix < 0x00080000)\n+\t    return 0.125 * (8.0 * x + efx8 * x);\t/*avoid underflow */\n+\t  return x + efx * x;\n+\t}\n+      y = a + a * neval (z, TN1, NTN1) / deval (z, TD1, NTD1);\n+    }\n+  else\n+    {\n+      a = a - one;\n+      y = erf_const + neval (a, TN2, NTN2) / deval (a, TD2, NTD2);\n+    }\n+\n+  if (sign & 0x80000000) /* x < 0 */\n+    y = -y;\n+  return( y );\n+}\n+\n+\n+__float128\n+erfcq (__float128 x)\n+{\n+  __float128 y = 0.0Q, z, p, r;\n+  int32_t i, ix, sign;\n+  ieee854_float128 u;\n+\n+  u.value = x;\n+  sign = u.words32.w0;\n+  ix = sign & 0x7fffffff;\n+  u.words32.w0 = ix;\n+\n+  if (ix >= 0x7fff0000)\n+    {\t\t\t\t/* erfc(nan)=nan */\n+      /* erfc(+-inf)=0,2 */\n+      return (__float128) (((uint32_t) sign >> 31) << 1) + one / x;\n+    }\n+\n+  if (ix < 0x3ffd0000) /* |x| <1/4 */\n+    {\n+      if (ix < 0x3f8d0000) /* |x|<2**-114 */\n+\treturn one - x;\n+      return one - erfq (x);\n+    }\n+  if (ix < 0x3fff4000) /* 1.25 */\n+    {\n+      x = u.value;\n+      i = 8.0 * x;\n+      switch (i)\n+\t{\n+\tcase 2:\n+\t  z = x - 0.25Q;\n+\t  y = C13b + z * neval (z, RNr13, NRNr13) / deval (z, RDr13, NRDr13);\n+\t  y += C13a;\n+\t  break;\n+\tcase 3:\n+\t  z = x - 0.375Q;\n+\t  y = C14b + z * neval (z, RNr14, NRNr14) / deval (z, RDr14, NRDr14);\n+\t  y += C14a;\n+\t  break;\n+\tcase 4:\n+\t  z = x - 0.5Q;\n+\t  y = C15b + z * neval (z, RNr15, NRNr15) / deval (z, RDr15, NRDr15);\n+\t  y += C15a;\n+\t  break;\n+\tcase 5:\n+\t  z = x - 0.625Q;\n+\t  y = C16b + z * neval (z, RNr16, NRNr16) / deval (z, RDr16, NRDr16);\n+\t  y += C16a;\n+\t  break;\n+\tcase 6:\n+\t  z = x - 0.75Q;\n+\t  y = C17b + z * neval (z, RNr17, NRNr17) / deval (z, RDr17, NRDr17);\n+\t  y += C17a;\n+\t  break;\n+\tcase 7:\n+\t  z = x - 0.875Q;\n+\t  y = C18b + z * neval (z, RNr18, NRNr18) / deval (z, RDr18, NRDr18);\n+\t  y += C18a;\n+\t  break;\n+\tcase 8:\n+\t  z = x - 1.0Q;\n+\t  y = C19b + z * neval (z, RNr19, NRNr19) / deval (z, RDr19, NRDr19);\n+\t  y += C19a;\n+\t  break;\n+\tcase 9:\n+\t  z = x - 1.125Q;\n+\t  y = C20b + z * neval (z, RNr20, NRNr20) / deval (z, RDr20, NRDr20);\n+\t  y += C20a;\n+\t  break;\n+\t}\n+      if (sign & 0x80000000)\n+\ty = 2.0Q - y;\n+      return y;\n+    }\n+  /* 1.25 < |x| < 107 */\n+  if (ix < 0x4005ac00)\n+    {\n+      /* x < -9 */\n+      if ((ix >= 0x40022000) && (sign & 0x80000000))\n+\treturn two - tiny;\n+\n+      x = fabsq (x);\n+      z = one / (x * x);\n+      i = 8.0 / x;\n+      switch (i)\n+\t{\n+\tdefault:\n+\tcase 0:\n+\t  p = neval (z, RNr1, NRNr1) / deval (z, RDr1, NRDr1);\n+\t  break;\n+\tcase 1:\n+\t  p = neval (z, RNr2, NRNr2) / deval (z, RDr2, NRDr2);\n+\t  break;\n+\tcase 2:\n+\t  p = neval (z, RNr3, NRNr3) / deval (z, RDr3, NRDr3);\n+\t  break;\n+\tcase 3:\n+\t  p = neval (z, RNr4, NRNr4) / deval (z, RDr4, NRDr4);\n+\t  break;\n+\tcase 4:\n+\t  p = neval (z, RNr5, NRNr5) / deval (z, RDr5, NRDr5);\n+\t  break;\n+\tcase 5:\n+\t  p = neval (z, RNr6, NRNr6) / deval (z, RDr6, NRDr6);\n+\t  break;\n+\tcase 6:\n+\t  p = neval (z, RNr7, NRNr7) / deval (z, RDr7, NRDr7);\n+\t  break;\n+\tcase 7:\n+\t  p = neval (z, RNr8, NRNr8) / deval (z, RDr8, NRDr8);\n+\t  break;\n+\t}\n+      u.value = x;\n+      u.words32.w3 = 0;\n+      u.words32.w2 &= 0xfe000000;\n+      z = u.value;\n+      r = expq (-z * z - 0.5625) * expq ((z - x) * (z + x) + p);\n+      if ((sign & 0x80000000) == 0)\n+\treturn r / x;\n+      else\n+\treturn two - r / x;\n+    }\n+  else\n+    {\n+      if ((sign & 0x80000000) == 0)\n+\treturn tiny * tiny;\n+      else\n+\treturn two - tiny;\n+    }\n+}"}, {"sha": "510c98fe4930331f6539db8ae87cc0d3527269db", "filename": "libquadmath/math/expm1q.c", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fexpm1q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fexpm1q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fexpm1q.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,158 @@\n+/*\t\t\t\t\t\t\texpm1l.c\n+ *\n+ *\tExponential function, minus 1\n+ *      128-bit __float128 precision\n+ *\n+ *\n+ *\n+ * SYNOPSIS:\n+ *\n+ * __float128 x, y, expm1l();\n+ *\n+ * y = expm1l( x );\n+ *\n+ *\n+ *\n+ * DESCRIPTION:\n+ *\n+ * Returns e (2.71828...) raised to the x power, minus one.\n+ *\n+ * Range reduction is accomplished by separating the argument\n+ * into an integer k and fraction f such that\n+ *\n+ *     x    k  f\n+ *    e  = 2  e.\n+ *\n+ * An expansion x + .5 x^2 + x^3 R(x) approximates exp(f) - 1\n+ * in the basic range [-0.5 ln 2, 0.5 ln 2].\n+ *\n+ *\n+ * ACCURACY:\n+ *\n+ *                      Relative error:\n+ * arithmetic   domain     # trials      peak         rms\n+ *    IEEE    -79,+MAXLOG    100,000     1.7e-34     4.5e-35\n+ *\n+ */\n+\n+/* Copyright 2001 by Stephen L. Moshier \n+\n+    This library is free software; you can redistribute it and/or\n+    modify it under the terms of the GNU Lesser General Public\n+    License as published by the Free Software Foundation; either\n+    version 2.1 of the License, or (at your option) any later version.\n+\n+    This library is distributed in the hope that it will be useful,\n+    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+    Lesser General Public License for more details.\n+\n+    You should have received a copy of the GNU Lesser General Public\n+    License along with this library; if not, write to the Free Software\n+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA */\n+\n+\n+\n+#include \"quadmath-imp.h\"\n+\n+/* exp(x) - 1 = x + 0.5 x^2 + x^3 P(x)/Q(x)\n+   -.5 ln 2  <  x  <  .5 ln 2\n+   Theoretical peak relative error = 8.1e-36  */\n+\n+static const __float128\n+  P0 = 2.943520915569954073888921213330863757240E8Q,\n+  P1 = -5.722847283900608941516165725053359168840E7Q,\n+  P2 = 8.944630806357575461578107295909719817253E6Q,\n+  P3 = -7.212432713558031519943281748462837065308E5Q,\n+  P4 = 4.578962475841642634225390068461943438441E4Q,\n+  P5 = -1.716772506388927649032068540558788106762E3Q,\n+  P6 = 4.401308817383362136048032038528753151144E1Q,\n+  P7 = -4.888737542888633647784737721812546636240E-1Q,\n+  Q0 = 1.766112549341972444333352727998584753865E9Q,\n+  Q1 = -7.848989743695296475743081255027098295771E8Q,\n+  Q2 = 1.615869009634292424463780387327037251069E8Q,\n+  Q3 = -2.019684072836541751428967854947019415698E7Q,\n+  Q4 = 1.682912729190313538934190635536631941751E6Q,\n+  Q5 = -9.615511549171441430850103489315371768998E4Q,\n+  Q6 = 3.697714952261803935521187272204485251835E3Q,\n+  Q7 = -8.802340681794263968892934703309274564037E1Q,\n+  /* Q8 = 1.000000000000000000000000000000000000000E0 */\n+/* C1 + C2 = ln 2 */\n+\n+  C1 = 6.93145751953125E-1Q,\n+  C2 = 1.428606820309417232121458176568075500134E-6Q,\n+/* ln (2^16384 * (1 - 2^-113)) */\n+  maxlog = 1.1356523406294143949491931077970764891253E4Q,\n+/* ln 2^-114 */\n+  minarg = -7.9018778583833765273564461846232128760607E1Q;\n+\n+\n+__float128\n+expm1q (__float128 x)\n+{\n+  __float128 px, qx, xx;\n+  int32_t ix, sign;\n+  ieee854_float128 u;\n+  int k;\n+\n+  /* Detect infinity and NaN.  */\n+  u.value = x;\n+  ix = u.words32.w0;\n+  sign = ix & 0x80000000;\n+  ix &= 0x7fffffff;\n+  if (ix >= 0x7fff0000)\n+    {\n+      /* Infinity. */\n+      if (((ix & 0xffff) | u.words32.w1 | u.words32.w2 | u.words32.w3) == 0)\n+\t{\n+\t  if (sign)\n+\t    return -1.0Q;\n+\t  else\n+\t    return x;\n+\t}\n+      /* NaN. No invalid exception. */\n+      return x;\n+    }\n+\n+  /* expm1(+- 0) = +- 0.  */\n+  if ((ix == 0) && (u.words32.w1 | u.words32.w2 | u.words32.w3) == 0)\n+    return x;\n+\n+  /* Overflow.  */\n+  if (x > maxlog)\n+    return (HUGE_VALQ * HUGE_VALQ);\n+\n+  /* Minimum value.  */\n+  if (x < minarg)\n+    return (4.0/HUGE_VALQ - 1.0Q);\n+\n+  /* Express x = ln 2 (k + remainder), remainder not exceeding 1/2. */\n+  xx = C1 + C2;\t\t\t/* ln 2. */\n+  px = floorq (0.5 + x / xx);\n+  k = px;\n+  /* remainder times ln 2 */\n+  x -= px * C1;\n+  x -= px * C2;\n+\n+  /* Approximate exp(remainder ln 2).  */\n+  px = (((((((P7 * x\n+\t      + P6) * x\n+\t     + P5) * x + P4) * x + P3) * x + P2) * x + P1) * x + P0) * x;\n+\n+  qx = (((((((x\n+\t      + Q7) * x\n+\t     + Q6) * x + Q5) * x + Q4) * x + Q3) * x + Q2) * x + Q1) * x + Q0;\n+\n+  xx = x * x;\n+  qx = x + (0.5 * xx + xx * px / qx);\n+\n+  /* exp(x) = exp(k ln 2) exp(remainder ln 2) = 2^k exp(remainder ln 2).\n+\n+  We have qx = exp(remainder ln 2) - 1, so\n+  exp(x) - 1 = 2^k (qx + 1) - 1\n+             = 2^k qx + 2^k - 1.  */\n+\n+  px = ldexpq (1.0Q, k);\n+  x = px * qx + (px - 1.0);\n+  return x;\n+}"}, {"sha": "a5fbc810269d94aed9ba3f373e2d25a4c72a3617", "filename": "libquadmath/math/expq.c", "status": "added", "additions": 1184, "deletions": 0, "changes": 1184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fexpq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fexpq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fexpq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,1184 @@\n+/* Quad-precision floating point e^x.\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Jakub Jelinek <jj@ultra.linux.cz>\n+   Partly based on double-precision code\n+   by Geoffrey Keating <geoffk@ozemail.com.au>\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+   02111-1307 USA.  */\n+\n+#include \"quadmath-imp.h\"\n+\n+\n+/* __expl_table basically consists of four tables, T_EXPL_ARG{1,2} and\n+   T_EXPL_RES{1,2}. All tables use positive and negative indexes, the 0 points\n+   are marked by T_EXPL_* defines.\n+   For ARG1 and RES1 tables lets B be 89 and S 256.0, for ARG2 and RES2 B is 65\n+   and S 32768.0.\n+   These table have the property that, for all integers -B <= i <= B\n+   expl(__expl_table[T_EXPL_ARGN+2*i]+__expl_table[T_EXPL_ARGN+2*i+1]+r) ==\n+   __expl_table[T_EXPL_RESN+i], __expl_table[T_EXPL_RESN+i] is some exact number\n+   with the low 58 bits of the mantissa 0,\n+   __expl_table[T_EXPL_ARGN+2*i] == i/S+s\n+   where absl(s) <= 2^-54 and absl(r) <= 2^-212.  */\n+\n+static const __float128 __expl_table [] = {\n+ -3.47656250000000000584188889839535373E-01Q, /* bffd640000000000002b1b04213cf000 */\n+  6.90417668990715641167244540876988960E-32Q, /* 3f97667c3fdb588a6ae1af8748357a17 */\n+ -3.43749999999999981853132895957607418E-01Q, /* bffd5ffffffffffffac4ff5f4050b000 */\n+ -7.16021898043268093462818380603370350E-33Q, /* bf94296c8219427edc1431ac2498583e */\n+ -3.39843750000000013418643523138766329E-01Q, /* bffd5c000000000003de1f027a30e000 */\n+  8.16920774283317801641347327589583265E-32Q, /* 3f97a82b65774bdca1b4440d749ed8d3 */\n+ -3.35937500000000014998092453039303051E-01Q, /* bffd5800000000000452a9f4d8857000 */\n+ -6.55865578425428447938248396879359670E-32Q, /* bf97548b7d240f3d034b395e6eecfac8 */\n+ -3.32031250000000000981984049529998541E-01Q, /* bffd540000000000004875277cda5000 */\n+  6.91213046334032232108944519541512737E-32Q, /* 3f9766e5f925338a19045c94443b66e1 */\n+ -3.28124999999999986646017645350399708E-01Q, /* bffd4ffffffffffffc26a667bf44d000 */\n+ -6.16281060996110316602421505683742661E-32Q, /* bf973ffdcdcffb6fbffc86b2b8d42f5d */\n+ -3.24218749999999991645717430645867963E-01Q, /* bffd4bfffffffffffd97901063e48000 */\n+ -7.90797211087760527593856542417304137E-32Q, /* bf979a9afaaca1ada6a8ed1c80584d60 */\n+ -3.20312499999999998918211610690789652E-01Q, /* bffd47ffffffffffffb02d9856d71000 */\n+  8.64024799457616856987630373786503376E-32Q, /* 3f97c0a098623f95579d5d9b2b67342d */\n+ -3.16406249999999998153974811017181883E-01Q, /* bffd43ffffffffffff77c991f1076000 */\n+ -2.73176610180696076418536105483668404E-32Q, /* bf961baeccb32f9b1fcbb8e60468e95a */\n+ -3.12500000000000011420976192575972779E-01Q, /* bffd400000000000034ab8240483d000 */\n+  7.16573502812389453744433792609989420E-32Q, /* 3f977410f4c2cfc4335f28446c0fb363 */\n+ -3.08593750000000001735496343854851414E-01Q, /* bffd3c000000000000800e995c176000 */\n+ -1.56292999645122272621237565671593071E-32Q, /* bf95449b9cbdaff6ac1246adb2c826ac */\n+ -3.04687499999999982592401295899221626E-01Q, /* bffd37fffffffffffafb8bc1e061a000 */\n+  6.48993208584888904958594509625158417E-32Q, /* 3f9750f9fe8366d82d77afa0031a92e1 */\n+ -3.00781249999999999230616898937763959E-01Q, /* bffd33ffffffffffffc73ac39da54000 */\n+  6.57082437496961397305801409357792029E-32Q, /* 3f97552d3cb598ea80135cf3feb27ec4 */\n+ -2.96874999999999998788769281703245722E-01Q, /* bffd2fffffffffffffa6a07fa5021000 */\n+ -3.26588297198283968096426564544269170E-32Q, /* bf9653260fc1802f46b629aee171809b */\n+ -2.92968750000000015318089182805941695E-01Q, /* bffd2c0000000000046a468614bd6000 */\n+ -1.73291974845198589684358727559290718E-32Q, /* bf9567e9d158f52e483c8d8dcb5961dd */\n+ -2.89062500000000007736778942676309681E-01Q, /* bffd280000000000023adf9f4c3d3000 */\n+ -6.83629745986675744404029225571026236E-32Q, /* bf9762f5face6281c1daf1c6aedbdb45 */\n+ -2.85156250000000001367091555763661937E-01Q, /* bffd2400000000000064dfa11e3fb000 */\n+ -5.44898442619766878281110054067026237E-32Q, /* bf971aed6d2db9f542986a785edae072 */\n+ -2.81249999999999986958718100227029406E-01Q, /* bffd1ffffffffffffc3db9265ca9d000 */\n+  1.13007318374506125723591889451107046E-32Q, /* 3f94d569fe387f456a97902907ac3856 */\n+ -2.77343750000000000356078829380495179E-01Q, /* bffd1c0000000000001a462390083000 */\n+ -4.98979365468978332358409063436543102E-32Q, /* bf970315bbf3e0d14b5c94c900702d4c */\n+ -2.73437499999999990276993957508540484E-01Q, /* bffd17fffffffffffd32919bcdc94000 */\n+ -8.79390484115892344533724650295100871E-32Q, /* bf97c89b0b89cc19c3ab2b60da9bbbc3 */\n+ -2.69531250000000002434203866460082225E-01Q, /* bffd14000000000000b39ccf9e130000 */\n+  9.44060754687026590886751809927191596E-32Q, /* 3f97ea2f32cfecca5c64a26137a9210f */\n+ -2.65624999999999997296320716986257179E-01Q, /* bffd0fffffffffffff3880f13a2bc000 */\n+  2.07142664067265697791007875348396921E-32Q, /* 3f95ae37ee685b9122fbe377bd205ee4 */\n+ -2.61718750000000010237478733739017956E-01Q, /* bffd0c000000000002f3648179d40000 */\n+ -6.10552936159265665298996309192680256E-32Q, /* bf973d0467d31e407515a3cca0f3b4e2 */\n+ -2.57812500000000011948220522778370303E-01Q, /* bffd08000000000003719f81275bd000 */\n+  6.72477169058908902499239631466443836E-32Q, /* 3f975d2b8c475d3160cf72d227d8e6f9 */\n+ -2.53906249999999991822993360536596860E-01Q, /* bffd03fffffffffffda4a4b62f818000 */\n+ -2.44868296623215865054704392917190994E-32Q, /* bf95fc92516c6d057d29fc2528855976 */\n+ -2.49999999999999986862019457428548084E-01Q, /* bffcfffffffffffff86d2d20d5ff4000 */\n+ -3.85302898949105073614122724961613078E-32Q, /* bf96901f147cb7d643af71b6129ce929 */\n+ -2.46093750000000000237554160737318435E-01Q, /* bffcf8000000000000230e8ade26b000 */\n+ -1.52823675242678363494345369284988589E-32Q, /* bf953d6700c5f3fc303f79d0ec8c680a */\n+ -2.42187500000000003023380963205457065E-01Q, /* bffcf0000000000001be2c1a78bb0000 */\n+ -7.78402037952209709489481182714311699E-34Q, /* bf9102ab1f3998e887f0ee4cf940faa5 */\n+ -2.38281249999999995309623303145485725E-01Q, /* bffce7fffffffffffd4bd2940f43f000 */\n+ -3.54307216794236899443913216397197696E-32Q, /* bf966fef03ab69c3f289436205b21d02 */\n+ -2.34374999999999998425804947623207526E-01Q, /* bffcdfffffffffffff17b097a6092000 */\n+ -2.86038428948386602859761879407549696E-32Q, /* bf96290a0eba0131efe3a05fe188f2e3 */\n+ -2.30468749999999993822207406785200832E-01Q, /* bffcd7fffffffffffc70519834eae000 */\n+ -2.54339521031747516806893838749365762E-32Q, /* bf96081f0ad7f9107ae6cddb32c178ab */\n+ -2.26562499999999997823524030344489884E-01Q, /* bffccffffffffffffebecf10093df000 */\n+  4.31904611473158635644635628922959401E-32Q, /* 3f96c083f0b1faa7c4c686193e38d67c */\n+ -2.22656250000000004835132405125162742E-01Q, /* bffcc8000000000002c98a233f19f000 */\n+  2.54709791629335691650310168420597566E-33Q, /* 3f92a735903f5eed07a716ab931e20d9 */\n+ -2.18749999999999988969454021829236626E-01Q, /* bffcbffffffffffff9a42dc14ce36000 */\n+ -3.77236096429336082213752014054909454E-32Q, /* bf9687be8e5b2fca54d3e81157eac660 */\n+ -2.14843750000000010613256919115758495E-01Q, /* bffcb80000000000061e3d828ecac000 */\n+ -4.55194148712216691177097854305964738E-32Q, /* bf96d8b35c776aa3e1a4768271380503 */\n+ -2.10937499999999993204656148110447201E-01Q, /* bffcaffffffffffffc152f2aea118000 */\n+ -2.95044199165561453749332254271716417E-32Q, /* bf96326433b00b2439094d9bef22ddd1 */\n+ -2.07031250000000012233944895423355677E-01Q, /* bffca80000000000070d695ee0e94000 */\n+  1.93146788688385419095981415411012357E-32Q, /* 3f959126729135a5e390d4bb802a0bde */\n+ -2.03125000000000008030983633336321863E-01Q, /* bffca0000000000004a129fbc51af000 */\n+  2.37361904671826193563212931215900137E-32Q, /* 3f95ecfb3c4ba1b97ea3ad45cbb1e68a */\n+ -1.99218750000000001763815712796132779E-01Q, /* bffc98000000000001044b12d9950000 */\n+ -3.63171243370923753295192486732883239E-33Q, /* bf932db5fb3f27c38e0fa7bbcfc64f55 */\n+ -1.95312500000000004883660234506677272E-01Q, /* bffc90000000000002d0b3779d1f9000 */\n+ -3.19989507343607877747980892249711601E-33Q, /* bf9309d63de96bb3ef744c865f22f1bd */\n+ -1.91406250000000013720152363227519348E-01Q, /* bffc88000000000007e8bcb387121000 */\n+ -1.89295754093147174148371614722178860E-32Q, /* bf958926e2e67dfe812c508290add2e7 */\n+ -1.87500000000000000182342082774432620E-01Q, /* bffc800000000000001ae8b06a39f000 */\n+ -2.96812835183184815200854214892983927E-32Q, /* bf96343a62d156bbe71f55d14ca4b6e5 */\n+ -1.83593750000000012410147185883290345E-01Q, /* bffc78000000000007276a1adda8d000 */\n+ -2.02191931237489669058466239995304587E-32Q, /* bf95a3efab92d26ec2df90df036a117f */\n+ -1.79687499999999997439177363346082917E-01Q, /* bffc6ffffffffffffe8616db2927d000 */\n+ -9.92752326937775530007399526834009465E-33Q, /* bf949c5f88ed17041e1a3f1829d543cd */\n+ -1.75781249999999995824373974504785174E-01Q, /* bffc67fffffffffffd97c94f13ea3000 */\n+  1.44184772065335613487885714828816178E-32Q, /* 3f952b75c63476e7fcc2f5841c27bcce */\n+ -1.71874999999999986685050259043077809E-01Q, /* bffc5ffffffffffff8530f6bc531a000 */\n+ -3.49007014971241147689894940544402482E-32Q, /* bf966a6dfaa012aea8ffe6d90b02330f */\n+ -1.67968749999999997316058782350439701E-01Q, /* bffc57fffffffffffe73eb914f2aa000 */\n+  3.34025733574205019081305778794376391E-32Q, /* 3f965adf4572561fd5456a6c13d8babf */\n+ -1.64062499999999993322730602128318480E-01Q, /* bffc4ffffffffffffc269be4f68f3000 */\n+ -1.83345916769684984022099095506340635E-32Q, /* bf957ccb69026cb2f6024c211576d5f4 */\n+ -1.60156249999999992419000744447607979E-01Q, /* bffc47fffffffffffba13df21784a000 */\n+  2.73442789798110494773517431626534726E-32Q, /* 3f961bf58ff22c9b30f1e2b39f26d7d5 */\n+ -1.56249999999999987665010524130393080E-01Q, /* bffc3ffffffffffff8e3ad45e7508000 */\n+  2.02695576464836145806428118889332191E-32Q, /* 3f95a4fb7435a4a2f71de81eb8ae75d1 */\n+ -1.52343749999999989905291167951491803E-01Q, /* bffc37fffffffffffa2e48aecfc24000 */\n+ -3.61436631548815190395331054871041524E-32Q, /* bf967756567ebd108075ae527cc2e7f0 */\n+ -1.48437500000000006686107754967759751E-01Q, /* bffc30000000000003dab20261b3c000 */\n+ -2.15524270159131591469319477922198390E-32Q, /* bf95bfa05b82ef3a708c4f0395e9fcf6 */\n+ -1.44531250000000005132889939177166485E-01Q, /* bffc28000000000002f57b1969e7b000 */\n+  2.74741116529653547935086189244019604E-32Q, /* 3f961d4eb77c1185d34fe1b04a3f3cf5 */\n+ -1.40625000000000000707469094533647325E-01Q, /* bffc2000000000000068676d3d5c4000 */\n+  4.40607097220049957013547629906723266E-33Q, /* 3f936e0ac425daf795b42913cf0ef881 */\n+ -1.36718749999999995713752139187543306E-01Q, /* bffc17fffffffffffd87762255991000 */\n+ -3.73751317180116492404578048203389108E-32Q, /* bf9684202491e9cbb7ceb67d9ff7e0c9 */\n+ -1.32812500000000007198453630478482191E-01Q, /* bffc10000000000004264de3a4379000 */\n+ -3.97050085179660203884930593717220728E-32Q, /* bf969c52048de14be3c9c1971e50869c */\n+ -1.28906250000000006070486371645733082E-01Q, /* bffc080000000000037fd87db2cb0000 */\n+  3.59610068058504988294019521946586131E-32Q, /* 3f967570c10687cb8e9ebd0b280abf5a */\n+ -1.25000000000000003700729208608337966E-01Q, /* bffc00000000000002222198bbc74000 */\n+  3.23464851393124362331846965931995969E-33Q, /* 3f930cb95da3bfc847e593716c91d57a */\n+ -1.21093750000000013729038501177102555E-01Q, /* bffbf000000000000fd418d1f5fda000 */\n+  2.45242487730722066611358741283977619E-32Q, /* 3f95fd5945ad86a464292e26ac192a84 */\n+ -1.17187499999999999765305306880205578E-01Q, /* bffbdfffffffffffffbabaf869845000 */\n+ -1.14557520298960389903199646350205537E-32Q, /* bf94dbda735322179d9bcf392e1dd06d */\n+ -1.13281250000000009579647893740755690E-01Q, /* bffbd000000000000b0b69bae7ab9000 */\n+  2.37873962873837390105423621772752350E-32Q, /* 3f95ee0b7e0bd5ac1f6fab1e2a71abc3 */\n+ -1.09375000000000008981153004560108539E-01Q, /* bffbc000000000000a5ac4bc1d2c3000 */\n+  1.53152444860014076105003555837231015E-32Q, /* 3f953e15ce931e12ef9a152522e32bdd */\n+ -1.05468749999999992399063850363228723E-01Q, /* bffbaffffffffffff73c998091408000 */\n+ -8.75920903597804862471749360196688834E-33Q, /* bf946bd7e310a01bae5687ebdc47fcc5 */\n+ -1.01562500000000007685885179918350550E-01Q, /* bffba0000000000008dc7910a648c000 */\n+ -4.63820993797174451904075397785059501E-33Q, /* bf938153d0e54001a472da180fb5e8aa */\n+ -9.76562499999999887262211517861331814E-02Q, /* bffb8ffffffffffff300915aa6fd6000 */\n+ -2.63767025974952608658936466715705903E-33Q, /* bf92b64215bb8d520be5404620d38088 */\n+ -9.37499999999999939650246024457439795E-02Q, /* bffb7ffffffffffff90aca26bd0fc000 */\n+ -1.72047822349322956713582039121348377E-32Q, /* bf9565545015c5b9b56d02cfefca2c7d */\n+ -8.98437500000000033088896383977486369E-02Q, /* bffb70000000000003d09ca1e3cbe000 */\n+  3.04831994420989436248526129869697270E-33Q, /* 3f92fa7d30d2ed90e7ebbd6231fd08b1 */\n+ -8.59374999999999947312400115121319225E-02Q, /* bffb5ffffffffffff9ecefc03376e000 */\n+  1.50416954438393392150792422537312281E-32Q, /* 3f9538675ee99bd722fad0023c09c915 */\n+ -8.20312500000000054182280847004695514E-02Q, /* bffb500000000000063f2dbd40200000 */\n+  2.68399664523430004488075638997207289E-33Q, /* 3f92bdf49766629882c49a3da88928ed */\n+ -7.81250000000000114767533968079748798E-02Q, /* bffb4000000000000d3b56f81ba70000 */\n+  1.72318124201659121296305402819694281E-32Q, /* 3f9565e407aaabfb359e8a567d760de3 */\n+ -7.42187500000000035531829472486812869E-02Q, /* bffb3000000000000418b6e9b5388000 */\n+  2.09401756478514117051383998628099655E-32Q, /* 3f95b2e91221fcd74be0a86d8ad658d2 */\n+ -7.03124999999999987474933134860732535E-02Q, /* bffb1ffffffffffffe8e53453d2ac000 */\n+  2.28515798224350800271565551341211666E-32Q, /* 3f95da9bd6adf00894f05b5cc5530125 */\n+ -6.64062500000000042267533361089054159E-02Q, /* bffb10000000000004df8473dbcf2000 */\n+  1.97576478800281368377376002585430031E-32Q, /* 3f959a59acbddb2f53bd3096b66370e9 */\n+ -6.25000000000000066329769382774201686E-02Q, /* bffb00000000000007a5b5914e336000 */\n+ -1.46422615813786836245343723048221678E-33Q, /* bf91e69295f069fc0c4a9db181ea25a3 */\n+ -5.85937500000000002823707957982406053E-02Q, /* bffae0000000000000a6aeab10592000 */\n+  9.25637741701318872896718218457555829E-33Q, /* 3f94807eb021f1f40a37d4015b1eb76b */\n+ -5.46875000000000081586888005226044448E-02Q, /* bffac0000000000012d00a3171e3a000 */\n+ -4.87144542459404765480424673678105050E-33Q, /* bf9394b42faba6b7036fe7b36269daf3 */\n+ -5.07812499999999927720348253140567013E-02Q, /* bffa9fffffffffffef555cc8dd914000 */\n+ -3.01901021987395945826043649523451725E-33Q, /* bf92f59e7e3025691f290f8f67277faf */\n+ -4.68749999999999935349476738962633103E-02Q, /* bffa7ffffffffffff117b4ea2b876000 */\n+  1.21521638219189777347767475937119750E-32Q, /* 3f94f8c7f88c5b56674b94d984ac8ecb */\n+ -4.29687500000000056305562847814228219E-02Q, /* bffa6000000000000cfbb19be30c0000 */\n+ -1.18643699217679276275559592978275214E-32Q, /* bf94ecd39f0833a876550e83eb012b99 */\n+ -3.90624999999999962692914526031373542E-02Q, /* bffa3ffffffffffff765c743922f9000 */\n+ -4.91277156857520035712509544689973679E-33Q, /* bf939823189996193872e58ac0dececb */\n+ -3.51562500000000108152468207687602886E-02Q, /* bffa20000000000018f031e41177f000 */\n+  1.18599806302656253755207072755609820E-32Q, /* 3f94eca4f23e787fab73ce8f6b9b8d64 */\n+ -3.12500000000000077376981036742289578E-02Q, /* bffa00000000000011d787e0b386f000 */\n+  9.97730386477005171963635210799577079E-33Q, /* 3f949e70e498c46a0173ac0d46c699fc */\n+ -2.73437500000000139436129596418623235E-02Q, /* bff9c00000000000404db66e70a08000 */\n+  2.25755321633070123579875157841633859E-33Q, /* 3f927719b1a93074bdf9f3c2cb784785 */\n+ -2.34375000000000088003629211828324876E-02Q, /* bff98000000000002895a27d45feb000 */\n+  2.84374279216848803102126617873942975E-33Q, /* 3f92d87f70e749d6da6c260b68dc210b */\n+ -1.95312500000000107408831063404855424E-02Q, /* bff9400000000000318898ba69f71000 */\n+  2.47348089686935458989103979140011912E-33Q, /* 3f929afa3de45086fe909fdddb41edce */\n+ -1.56250000000000081443917555362290635E-02Q, /* bff9000000000000258f335e9cdd6000 */\n+ -2.43379314483517422161458863218426254E-33Q, /* bf9294621c8a9ccacf2b020ec19cad27 */\n+ -1.17187500000000051490597418161403184E-02Q, /* bff88000000000002f7ddfa26221f000 */\n+  1.83405297208145390679150568810924707E-33Q, /* 3f9230bbfc5d5fe1b534fbcda0465bb9 */\n+ -7.81249999999999715861805208310174953E-03Q, /* bff7ffffffffffffcb95f3fff157d000 */\n+  3.51548384878710915171654413641872451E-34Q, /* 3f8fd349b76c22966f77a39fc37ed704 */\n+ -3.90625000000000309326013918295097128E-03Q, /* bff7000000000000390f820c8e153000 */\n+  6.38058004651791109324060099097251911E-36Q, /* 3f8a0f665d3ac25a1ac94d688273dbcd */\n+#define T_EXPL_ARG1 (2*89)\n+  0.00000000000000000000000000000000000E+00Q, /* 00000000000000000000000000000000 */\n+  0.00000000000000000000000000000000000E+00Q, /* 00000000000000000000000000000000 */\n+  3.90625000000000245479958859972588985E-03Q, /* 3ff70000000000002d48769ac9874000 */\n+ -6.58439598384342854976169982902779828E-36Q, /* bf8a1811b923e6c626b07ef29761482a */\n+  7.81250000000001311374391093664996358E-03Q, /* 3ff800000000000078f3f3cd89111000 */\n+  2.60265650555493781464273319671555602E-33Q, /* 3f92b070c3b635b87af426735a71fc87 */\n+  1.17187500000000269581156218247101912E-02Q, /* 3ff8800000000000f8a50d02fe20d000 */\n+  1.00961747974945520631836275894919326E-33Q, /* 3f914f80c1a4f8042044fe3b757b030b */\n+  1.56249999999999797878275270751825475E-02Q, /* 3ff8ffffffffffff45935b69da62e000 */\n+  2.03174577741375590087897353146748580E-33Q, /* 3f925194e863496e0f6e91cbf6b22e26 */\n+  1.95312499999999760319884511789111533E-02Q, /* 3ff93fffffffffff917790ff9a8f4000 */\n+  4.62788519658803722282100289809515007E-33Q, /* 3f9380783ba81295feeb3e4879d7d52d */\n+  2.34374999999999822953909016349145918E-02Q, /* 3ff97fffffffffffae5a163bd3cd5000 */\n+ -3.19499956304699705390404384504876533E-33Q, /* bf93096e2037ced8194cf344c692f8d6 */\n+  2.73437500000000137220327275871555682E-02Q, /* 3ff9c000000000003f481dea5dd51000 */\n+ -2.25757776523031994464630107442723424E-33Q, /* bf92771abcf988a02b414bf2614e3734 */\n+  3.12499999999999790857640618332718621E-02Q, /* 3ff9ffffffffffff9f8cd40b51509000 */\n+ -4.22479470489989916319395454536511458E-33Q, /* bf935efb7245612f371deca17cb7b30c */\n+  3.51562499999999840753382405747597346E-02Q, /* 3ffa1fffffffffffdb47bd275f722000 */\n+  1.08459658374118041980976756063083500E-34Q, /* 3f8e2055d18b7117c9db1c318b1e889b */\n+  3.90624999999999989384433621470426757E-02Q, /* 3ffa3ffffffffffffd8d5e18b042e000 */\n+ -7.41674226146122000759491297811091830E-33Q, /* bf94341454e48029e5b0205d91baffdc */\n+  4.29687500000000107505739500500200462E-02Q, /* 3ffa60000000000018ca04cd9085c000 */\n+ -4.74689012756713017494437969420919847E-34Q, /* bf903b7c268103c6f7fbaaa24142e287 */\n+  4.68749999999999978700749928325717352E-02Q, /* 3ffa7ffffffffffffb16b6d5479e3000 */\n+ -1.06208165308448830117773486334902917E-32Q, /* bf94b92be4b3b5b5a596a0a5187cc955 */\n+  5.07812499999999815072625435955786253E-02Q, /* 3ffa9fffffffffffd55bd086d5cbc000 */\n+ -9.37038897148383660401929567549111394E-33Q, /* bf94853b111b0175b491c80d00419416 */\n+  5.46874999999999809511553152189867394E-02Q, /* 3ffabfffffffffffd4138bfa74a61000 */\n+  1.06642963074562437340498606682822123E-32Q, /* 3f94bafa3fe991b39255d563dfa05d89 */\n+  5.85937500000000184331996330905145551E-02Q, /* 3ffae000000000002a810a5f2f8bf000 */\n+ -1.76639977694797200820296641773791945E-34Q, /* bf8ed596f07ce4408f1705c8ec16864c */\n+  6.25000000000000021544696744852045001E-02Q, /* 3ffb000000000000027be32045e2b000 */\n+  1.68616371995798354366633034788947149E-32Q, /* 3f955e33d7440794d8a1b25233d086ab */\n+  6.64062499999999965563110718495802889E-02Q, /* 3ffb0ffffffffffffc079a38a3fed000 */\n+ -1.82463217667830160048872113565316215E-32Q, /* bf957af6163bcdb97cefab44a942482a */\n+  7.03124999999999759989183341261898222E-02Q, /* 3ffb1fffffffffffe454218acea05000 */\n+ -1.07843770101525495515646940862541503E-32Q, /* bf94bff72aada26d94e76e71c07e0580 */\n+  7.42187499999999898968873730710101412E-02Q, /* 3ffb2ffffffffffff45a166496dc1000 */\n+  1.28629441689592874462780757154138223E-32Q, /* 3f950b2724597b8b93ce1e9d1cf4d035 */\n+  7.81249999999999957198938523510804668E-02Q, /* 3ffb3ffffffffffffb10bc52adbc5000 */\n+  1.13297573459968118467100063135856856E-33Q, /* 3f91787eea895b3c245899cf34ad0abd */\n+  8.20312500000000199911640621145851159E-02Q, /* 3ffb500000000000170c59a661a89000 */\n+ -1.51161335208135146756554123073528707E-32Q, /* bf9539f326c5ca84e7db5401566f3775 */\n+  8.59375000000000134175373433347670743E-02Q, /* 3ffb6000000000000f78287547af0000 */\n+  1.09763629458404270323909815379924900E-32Q, /* 3f94c7f0b61b6e3e27d44b9f5bbc7e9d */\n+  8.98437500000000036533922600308306335E-02Q, /* 3ffb70000000000004364a83b7a14000 */\n+  3.11459653680110433194288029777718358E-33Q, /* 3f9302c0248136d65cebeab69488d949 */\n+  9.37500000000000184977946245216914691E-02Q, /* 3ffb800000000000155395d870b17000 */\n+ -4.66656154468277949130395786965043927E-33Q, /* bf9383aec9b993b6db492b1ede786d8a */\n+  9.76562500000000237839723100419376084E-02Q, /* 3ffb9000000000001b6bca237f6c4000 */\n+ -1.03028043424658760249140747856831301E-32Q, /* bf94abf6352e3d2bb398e47919a343fb */\n+  1.01562500000000012345545575236836572E-01Q, /* 3ffba000000000000e3bc30cd9a1f000 */\n+  2.15755372310795701322789783729456319E-32Q, /* 3f95c01b3b819edd9d07548fafd61550 */\n+  1.05468749999999976493840484471911438E-01Q, /* 3ffbafffffffffffe4e634cd77985000 */\n+  1.78771847038773333029677216592309083E-32Q, /* 3f95734b6ae650f33dd43c49a1df9fc0 */\n+  1.09375000000000002267015055992785402E-01Q, /* 3ffbc00000000000029d1ad08de7b000 */\n+  6.23263106693943817730045115112427717E-33Q, /* 3f9402e4b39ce2198a45e1d045868cd6 */\n+  1.13281250000000022354208618429577398E-01Q, /* 3ffbd0000000000019c5cc3f9d2b5000 */\n+  5.40514416644786448581426756221178868E-33Q, /* 3f93c10ab4021472c662f69435de9269 */\n+  1.17187500000000013252367133076817603E-01Q, /* 3ffbe000000000000f47688cc561b000 */\n+ -7.12412585457324989451327215568641325E-33Q, /* bf9427ecb343a8d1758990565fcfbf45 */\n+  1.21093750000000020759863992944300792E-01Q, /* 3ffbf0000000000017ef3af97bf04000 */\n+  6.26591408357572503875647872077266444E-33Q, /* 3f940446a09a2da771b45fc075514d12 */\n+  1.25000000000000004739659392396765618E-01Q, /* 3ffc00000000000002bb7344ecd89000 */\n+ -1.55611398459729463981000080101758830E-32Q, /* bf95433135febefa9e6aa4db39e263d2 */\n+  1.28906249999999982360888081057894783E-01Q, /* 3ffc07fffffffffff5d4ed3154361000 */\n+ -1.77531518652835570781208599686606474E-32Q, /* bf9570b7f225ea076f97f418d11359c1 */\n+  1.32812500000000010568583998727400436E-01Q, /* 3ffc1000000000000617a5d09526a000 */\n+  2.12104021624990594668286391598300893E-32Q, /* 3f95b885d767a1048d93055927a27adc */\n+  1.36718749999999998434125157367005292E-01Q, /* 3ffc17ffffffffffff18eaebc7970000 */\n+  2.50454798592543203967309921276955297E-32Q, /* 3f9604164e5598528a76faff26cd1c97 */\n+  1.40625000000000015550032422969330356E-01Q, /* 3ffc20000000000008f6c79d8928c000 */\n+  7.80972982879849783680252962992639832E-33Q, /* 3f9444674acf2b3225c7647e0d95edf3 */\n+  1.44531250000000012402535562111122522E-01Q, /* 3ffc28000000000007264a8bc1ff1000 */\n+  2.79662468716455159585514763921671876E-32Q, /* 3f96226b095bd78aa650faf95a221993 */\n+  1.48437500000000007761020440087419948E-01Q, /* 3ffc3000000000000479530ff8fe3000 */\n+  2.15518492972728435680556239996258527E-32Q, /* 3f95bf9d49295e73a957906a029768cb */\n+  1.52343750000000001733189947520484032E-01Q, /* 3ffc38000000000000ffc6109f71f000 */\n+  8.34032236093545825619420380704500188E-33Q, /* 3f945a71851226a1d0ce5e656693153e */\n+  1.56249999999999988073295321246958484E-01Q, /* 3ffc3ffffffffffff91fedd62ae0f000 */\n+  2.44119337150624789345260194989620908E-32Q, /* 3f95fb041a57bc1c1280680ac1620bea */\n+  1.60156250000000002076894210913572460E-01Q, /* 3ffc48000000000001327ed84a199000 */\n+ -7.36124501128859978061216696286151753E-33Q, /* bf9431c62f01e59d2c1e00f195a0037f */\n+  1.64062500000000000950861276373482172E-01Q, /* 3ffc500000000000008c5285fba85000 */\n+ -4.80566184447001164583855800470217373E-33Q, /* bf938f3d1fcafd390f22f80e6c19421f */\n+  1.67968749999999989878071706155265999E-01Q, /* 3ffc57fffffffffffa2a445c548c5000 */\n+ -4.42154428718618459799673088733365064E-32Q, /* bf96cb28cf1c1b28006d53ffe633b22a */\n+  1.71874999999999999459734108403218175E-01Q, /* 3ffc5fffffffffffffb04554e9dd4000 */\n+ -3.29736288190321377985697972236270628E-32Q, /* bf96566af0ebc852e84be12859b24a31 */\n+  1.75781249999999997987525759778901845E-01Q, /* 3ffc67fffffffffffed702df6ffff000 */\n+ -1.28800728638468399687523924685844352E-32Q, /* bf950b8236b88ca0c1b739dc91a7e3fc */\n+  1.79687500000000004929565820437175783E-01Q, /* 3ffc70000000000002d779bb32d2e000 */\n+  1.60624461317978482424582320675174225E-32Q, /* 3f954d9a9cc0c963fd081f3dc922d04e */\n+  1.83593750000000016873727045739708856E-01Q, /* 3ffc78000000000009ba1f6263c9a000 */\n+ -3.83390389582056606880506003118452558E-32Q, /* bf968e22a5d826f77f19ee788474df22 */\n+  1.87500000000000013443068740761666872E-01Q, /* 3ffc80000000000007bfd8c72a1bf000 */\n+ -2.74141662712926256150154726565203091E-32Q, /* bf961caf5ac59c7f941f928e324c2cc1 */\n+  1.91406249999999981494101786848611970E-01Q, /* 3ffc87fffffffffff55502eeae001000 */\n+  3.68992437075565165346469517256118001E-32Q, /* 3f967f2f03f9096793372a27b92ad79d */\n+  1.95312499999999989069921848800501648E-01Q, /* 3ffc8ffffffffffff9b3015280394000 */\n+  3.69712249337856518452988332367785220E-32Q, /* 3f967fee5fdb5bd501ff93516999faa0 */\n+  1.99218750000000021148042946919300804E-01Q, /* 3ffc9800000000000c30e67939095000 */\n+  2.50142536781142175091322844848566649E-32Q, /* 3f9603c34ae58e10b300b07137ee618a */\n+  2.03124999999999977732559198825437141E-01Q, /* 3ffc9ffffffffffff329e7df079e4000 */\n+ -2.41951877287895024779300892731537816E-32Q, /* bf95f683aefe6965f080df8f59dd34a1 */\n+  2.07031249999999996744030653771913124E-01Q, /* 3ffca7fffffffffffe1f80f4b73ca000 */\n+ -1.94346475904454000031592792989765585E-32Q, /* bf9593a44f87870a3d100d498501ecc7 */\n+  2.10937500000000000251399259834392298E-01Q, /* 3ffcb000000000000025199873310000 */\n+ -1.33528748788094249098998693871759411E-33Q, /* bf91bbb9b25c813668d6103d08acac35 */\n+  2.14843749999999993936323609611875097E-01Q, /* 3ffcb7fffffffffffc8128c866236000 */\n+  1.14839877977014974625242788556545292E-32Q, /* 3f94dd06b4655c9b83a1305b240e7a42 */\n+  2.18750000000000015181732784749663837E-01Q, /* 3ffcc0000000000008c06da5fff24000 */\n+  1.42689085313142539755499441881408391E-32Q, /* 3f95285a87dfa7ea7dad5b3be8c669f4 */\n+  2.22656249999999992172647770539596569E-01Q, /* 3ffcc7fffffffffffb7ce2fe531f6000 */\n+ -3.34421462850496887359128610229650547E-32Q, /* bf965b487962b5c2d9056ca6ac0c2e5c */\n+  2.26562499999999989595607223847082419E-01Q, /* 3ffccffffffffffffa0095277be5c000 */\n+ -3.08983588107248752517344356508205569E-32Q, /* bf9640dded57157f8eded311213bdbcd */\n+  2.30468749999999979130462438434567117E-01Q, /* 3ffcd7fffffffffff3f8332996560000 */\n+ -3.01407539802851697849105682795217019E-32Q, /* bf9638ffde35dbdfe1a1ffe45185de5d */\n+  2.34375000000000012194252337217891971E-01Q, /* 3ffce0000000000007078dd402c86000 */\n+ -8.46879710915628592284714319904522657E-33Q, /* bf945fc7b29a2ac6c9eff9eb258a510f */\n+  2.38281249999999982991877076137149870E-01Q, /* 3ffce7fffffffffff6320b486eece000 */\n+ -2.93563878880439245627127095245798544E-32Q, /* bf9630daaa4f40ff05caf29ace2ea7d4 */\n+  2.42187499999999981447559841442773990E-01Q, /* 3ffceffffffffffff54e24a09a8d5000 */\n+ -4.56766746558806021264215486909850481E-32Q, /* bf96da556dee11f3113e5a3467b908e6 */\n+  2.46093749999999991067720539980207318E-01Q, /* 3ffcf7fffffffffffad9d405dcb5d000 */\n+  2.14033004219908074003010247652128251E-32Q, /* 3f95bc8776e8f9ae098884aa664cc3df */\n+  2.50000000000000016613825838126835953E-01Q, /* 3ffd00000000000004c9e24c12bb3000 */\n+  2.57617532593749185996714235009382870E-32Q, /* 3f960b867cc01178c0ec68226c6cb47d */\n+  2.53906250000000013372004437827044321E-01Q, /* 3ffd04000000000003daae05b3168000 */\n+  7.20177123439204414298152646284640101E-32Q, /* 3f9775eff59ddad7e7530b83934af87f */\n+  2.57812499999999995765234725413886085E-01Q, /* 3ffd07fffffffffffec7878bad9d5000 */\n+  6.51253187532920882777046064603770602E-32Q, /* 3f975226659ca241402e71c2011583b0 */\n+  2.61718750000000007647689994011222248E-01Q, /* 3ffd0c000000000002344cc793a0f000 */\n+  3.02370610028725823590045201871491395E-32Q, /* 3f9639ffe55fa2fa011674448b4e5b96 */\n+  2.65624999999999986893899042596554269E-01Q, /* 3ffd0ffffffffffffc38f0c0a1e9f000 */\n+ -2.07683715950724761146070082510569258E-32Q, /* bf95af579a92e872fef81abfdf06bae8 */\n+  2.69531249999999979842788204900639327E-01Q, /* 3ffd13fffffffffffa30a908d67db000 */\n+  8.71465252506557329027658736641075706E-32Q, /* 3f97c47d99e19830447a42b1c0ffac61 */\n+  2.73437500000000006712165837793818271E-01Q, /* 3ffd18000000000001ef453a58edb000 */\n+ -6.62704045767568912140550474455810301E-32Q, /* bf9758187a204dcb06ece46588aeeaba */\n+  2.77343749999999994411329302988535617E-01Q, /* 3ffd1bfffffffffffe63a0fec9c9e000 */\n+ -4.87273466291944117406493607771338767E-32Q, /* bf96fa0381b0844a0be46bac2d673f0c */\n+  2.81250000000000012677892447379453135E-01Q, /* 3ffd20000000000003a7769e125d6000 */\n+ -8.55871796664700790726282049552906783E-32Q, /* bf97bc64e01332cf7616b0091b8dff2c */\n+  2.85156249999999998558643013736363981E-01Q, /* 3ffd23ffffffffffff95a5894bccf000 */\n+ -1.33068334720606220176455289635046875E-32Q, /* bf95145f43290ecf5b7adcb24697bc73 */\n+  2.89062500000000008831431235621753924E-01Q, /* 3ffd280000000000028ba504fac59000 */\n+ -9.34157398616814623985483776710704237E-32Q, /* bf97e50ad1115b941fcb5f0c88a428f7 */\n+  2.92968750000000019840235286110877063E-01Q, /* 3ffd2c000000000005b7f372d184f000 */\n+  4.99302093775173155906059132992249671E-33Q, /* 3f939ecdcfb97bad3f8dbec5df5ec67d */\n+  2.96875000000000015867911730971630513E-01Q, /* 3ffd3000000000000492d860c79db000 */\n+  7.86107787827057767235127454590866211E-33Q, /* 3f944689517ee8f16cdb97d6a6938f32 */\n+  3.00781250000000015814100002286124758E-01Q, /* 3ffd340000000000048edfe73a17d000 */\n+ -1.65419431293024229981937172317171504E-32Q, /* bf9557900e3efca16c89646b57f68dc0 */\n+  3.04687499999999985213157159965287195E-01Q, /* 3ffd37fffffffffffbbcec6f99b36000 */\n+  9.68753602893894024018934325652944198E-32Q, /* 3f97f70170e5458660c33a7e8d43d049 */\n+  3.08593749999999989969324338045156215E-01Q, /* 3ffd3bfffffffffffd1bdde4d0fb1000 */\n+  7.10268609610294706092252562643261106E-32Q, /* 3f9770cae45cdf615010401a4b37d8d4 */\n+  3.12500000000000002971606591018488854E-01Q, /* 3ffd40000000000000db440fbc06b000 */\n+  6.38924218802905979887732294952782964E-32Q, /* 3f974bbf988bb5622bd8fbaa46e8b811 */\n+  3.16406250000000006594921047402056305E-01Q, /* 3ffd44000000000001e69e8954814000 */\n+  3.96079878754651470094149874444850097E-32Q, /* 3f969b5017b9fa7a1e86975258c73d3d */\n+  3.20312500000000006713799366908329147E-01Q, /* 3ffd48000000000001ef64159c065000 */\n+ -1.86401314975634286055150437995880517E-32Q, /* bf958323f0434911794e5fb8bfe136ba */\n+  3.24218749999999987061246567584951210E-01Q, /* 3ffd4bfffffffffffc4549db9b928000 */\n+ -3.18643523744758601387071062700407431E-32Q, /* bf964ae5fa7e26c2c3981bed12e14372 */\n+  3.28124999999999991782776266707412953E-01Q, /* 3ffd4ffffffffffffda1ad0840ca8000 */\n+ -4.46964199751314296839915534813144652E-32Q, /* bf96d0277729ffd74727150df6d15547 */\n+  3.32031250000000000393816557756032682E-01Q, /* 3ffd540000000000001d0efc04fad000 */\n+ -9.03246333902065439930373230002688649E-33Q, /* bf947731a008748cc6dee948839ef7ae */\n+  3.35937499999999983810482995064392173E-01Q, /* 3ffd57fffffffffffb556cab8ae61000 */\n+  5.27742727066129518825981597650621794E-32Q, /* 3f9712050a6ddbf1cabf1b971f4b5d0b */\n+  3.39843750000000004310441349760912471E-01Q, /* 3ffd5c0000000000013e0def5ddc4000 */\n+ -3.85927263474732591932884416445586106E-32Q, /* bf9690c51088ef3db9ca000829c450c2 */\n+  3.43749999999999990248130003997484364E-01Q, /* 3ffd5ffffffffffffd3070624a0af000 */\n+  9.62005170171527308106468341512327487E-34Q, /* 3f913fae595cea84432eb01430817fca */\n+  3.47656250000000004085726414568625697E-01Q, /* 3ffd640000000000012d79309e291000 */\n+ -6.59664093705705297250259434519072507E-32Q, /* bf97568465eafb0e662e64a5dbfaf35f */\n+\n+ -1.98364257812501251077851763965418372E-03Q, /* bff6040000000001cd90f658cf0b1000 */\n+ -3.71984513103117734260309047540278737E-34Q, /* bf8fee73c54483194782aac4a6154d11 */\n+ -1.95312500000000378520649630233891879E-03Q, /* bff60000000000008ba643bb5e2e8000 */\n+ -1.12194202736719050440745599339855038E-34Q, /* bf8e2a436aeff7bc529873354f47a3f5 */\n+ -1.92260742187499397430259771221991482E-03Q, /* bff5f7fffffffffe4361cb51170da000 */\n+ -2.30068299876822157331268484824540848E-34Q, /* bf8f31d02f85cfe8c0cc02276ce0f437 */\n+ -1.89208984375001137424603270262074989E-03Q, /* bff5f0000000000347456ed490c23000 */\n+ -1.15012507244426243338260435466985403E-34Q, /* bf8e31c174d5677a937a34ad8d2a70b4 */\n+ -1.86157226562500172319250342061336738E-03Q, /* bff5e800000000007f262fa3617b4000 */\n+ -3.12438344643346437509767736937785561E-34Q, /* bf8f9f4d426a2457c273d34ef7d9bde9 */\n+ -1.83105468749999505256246872355430379E-03Q, /* bff5dffffffffffe92f18c1c2b6fa000 */\n+ -5.91130415288336591179087455220308942E-35Q, /* bf8d3a4c80b42dc036bae446c9807f78 */\n+ -1.80053710937499445182387245573120522E-03Q, /* bff5d7fffffffffe669dea82b4a4c000 */\n+ -1.92396289352411531324908916321392100E-34Q, /* bf8eff7a2123fb573ba9778550d669bd */\n+ -1.77001953125000387737631542516323906E-03Q, /* bff5d000000000011e19915c3ddb7000 */\n+  7.91101758977203355387806553469731354E-36Q, /* 3f8a507f5a70faaccf469e3461873dea */\n+ -1.73950195312500034854670281415554486E-03Q, /* bff5c8000000000019b7dc6ef97bd000 */\n+  1.55906551582436824067407021178835755E-34Q, /* 3f8e9e7880333e34955aebcde3cfb053 */\n+ -1.70898437499998955782591472611429852E-03Q, /* bff5bffffffffffcfd80e88aa6b96000 */\n+  8.22951661962611381718215899498500357E-35Q, /* 3f8db58e6031a779b59f6ece191de7cc */\n+ -1.67846679687500586652037711131708544E-03Q, /* bff5b80000000001b0df6fd21c133000 */\n+ -8.96642618848426299713145894522897419E-35Q, /* bf8ddcbcab46d531801bfae4121f2f8a */\n+ -1.64794921875000109499161354039904782E-03Q, /* bff5b0000000000050cbce8915575000 */\n+ -2.88077905394253859590587789680486639E-34Q, /* bf8f7eebd4dd860ef73b674d5e707959 */\n+ -1.61743164062501133830507079150388351E-03Q, /* bff5a80000000003449e8700c3e82000 */\n+ -3.68271725851639066312899986829350273E-34Q, /* bf8fe9845fe20a5fe74059e0cae185d6 */\n+ -1.58691406249999015546015764131101956E-03Q, /* bff59ffffffffffd2999e668cdd28000 */\n+  8.48197657099957029953716507898788812E-35Q, /* 3f8dc2faaebb97392e451b07b28c4b12 */\n+ -1.55639648437500317366570219290722587E-03Q, /* bff5980000000000ea2cd9a40d256000 */\n+ -3.45156704719737676412949957712570373E-36Q, /* bf8925a079505516c8e317ac1ff53255 */\n+ -1.52587890625000568759013197767046039E-03Q, /* bff5900000000001a3ab8a3f6b698000 */\n+ -1.01902948542497496574967177677556729E-34Q, /* bf8e0ee78d94d9b5ad3d63ae35c9b554 */\n+ -1.49536132812500945889014955936485340E-03Q, /* bff5880000000002b9f1621b57743000 */\n+ -3.32264697086631598830366079048117140E-34Q, /* bf8fb9a7d14c32289204fbb0c9eb20e0 */\n+ -1.46484374999999931883259902869504725E-03Q, /* bff57fffffffffffcdbd1c90e1b4a000 */\n+ -1.76487524793892929381101031660811433E-34Q, /* bf8ed52f2f724bc1ae870b18356337b4 */\n+ -1.43432617187498876325946983333888768E-03Q, /* bff577fffffffffcc2dff8faa5570000 */\n+ -3.54550084538495708816233114576143814E-34Q, /* bf8fd74724576915868c1e8ce9f430f1 */\n+ -1.40380859374999215367421282192718062E-03Q, /* bff56ffffffffffdbd0b18aac65ed000 */\n+ -1.90585907028351204486765167064669639E-34Q, /* bf8efaaa0c0e23e50c11b2120348054f */\n+ -1.37329101562499692341771212945644892E-03Q, /* bff567ffffffffff1cfd00f1b0577000 */\n+ -3.59631150411372589637918252836880320E-34Q, /* bf8fde08239ac74942a46298ea4fb715 */\n+ -1.34277343749999137467356674296739172E-03Q, /* bff55ffffffffffd839030b05d53d000 */\n+ -1.49571076125940368185068762485268117E-35Q, /* bf8b3e1a3d5c684b27a9f835b1d8d3c9 */\n+ -1.31225585937499247038404301859788734E-03Q, /* bff557fffffffffdd469936e691e3000 */\n+  3.10375845385355395586146533282311300E-34Q, /* 3f8f9c8f6d63b7a4145716ffd92491fb */\n+ -1.28173828124999024755581675764821898E-03Q, /* bff54ffffffffffd306589b0ab21d000 */\n+ -1.98541096105909793397376077900810019E-34Q, /* bf8f07e808bbb1e35106c294ffbb9687 */\n+ -1.25122070312500340204619591143332523E-03Q, /* bff5480000000000fb06d5f16ad2c000 */\n+  3.62884195935761446237911443317457521E-34Q, /* 3f8fe25b17d623178a386a6fa6c5afb2 */\n+ -1.22070312499999591578388993012071279E-03Q, /* bff53ffffffffffed2a356c440074000 */\n+ -2.96756662615653130862526710937493307E-35Q, /* bf8c3b90d8ff2a991e5bd16718fb0645 */\n+ -1.19018554687498821966212632349422735E-03Q, /* bff537fffffffffc9ac3b585dda89000 */\n+  1.44659971891167323357060028901142644E-34Q, /* 3f8e809279ab249edf1dad9fe13fb0bf */\n+ -1.15966796875000160938908064907298384E-03Q, /* bff530000000000076c0800db9639000 */\n+  2.50088010538742402346270685365928513E-34Q, /* 3f8f4c6c8a483b60201d30c1a83c3cb7 */\n+ -1.12915039062500267151512523291939657E-03Q, /* bff5280000000000c51f7e7315137000 */\n+  7.56402096465615210500092443924888831E-35Q, /* 3f8d922c1e485d99aea2668ed32b55a6 */\n+ -1.09863281249998665006360103291051571E-03Q, /* bff51ffffffffffc26f2d4c9ce2ba000 */\n+  1.43982174467233642713619821353592061E-34Q, /* 3f8e7ec530b3d92b6303bec1c81214d1 */\n+ -1.06811523437500522742248711752028025E-03Q, /* bff518000000000181b7380f10446000 */\n+  5.41265133745862349181293024531133174E-35Q, /* 3f8d1fc9313d018b30e790e06b6be723 */\n+ -1.03759765624999980942114138999770552E-03Q, /* bff50ffffffffffff1f01130490e1000 */\n+  1.21525139612685854366189534669623436E-34Q, /* 3f8e4311b96b6fcde412caf3f0d86fb9 */\n+ -1.00708007812499602697537601515759439E-03Q, /* bff507fffffffffedad7afcce7051000 */\n+  1.00020246351201558505328236381833392E-34Q, /* 3f8e09e640992512b1300744a7e984ed */\n+ -9.76562499999992592487302113340463694E-04Q, /* bff4fffffffffffbbad8151f8adf6000 */\n+ -1.64984406575162932060422892046851002E-34Q, /* bf8eb69a919986e8054b86fc34300f24 */\n+ -9.46044921874989085824996924138179594E-04Q, /* bff4effffffffff9b55a204fd9792000 */\n+ -9.29539174108308550334255350011347171E-35Q, /* bf8dee3a50ed896b4656fa577a1df3d7 */\n+ -9.15527343750013735214860599791540029E-04Q, /* bff4e00000000007eaf5bf103f82d000 */\n+  3.07557018309280519949818825519490586E-35Q, /* 3f8c470cfbef77d32c74cb8042f6ee81 */\n+ -8.85009765625012292294986105781516428E-04Q, /* bff4d000000000071605c65403b97000 */\n+  4.77499983783821950338363358545463558E-35Q, /* 3f8cfbc3dc18884c4c4f9e07d90d7bd3 */\n+ -8.54492187499986941239470706817188192E-04Q, /* bff4bffffffffff878ddf9cab264a000 */\n+ -1.60128240346239526958630011447901568E-34Q, /* bf8ea9b1a21e19e2d5bd84b0fbffcf95 */\n+ -8.23974609374996290174598690241743810E-04Q, /* bff4affffffffffddc86c249ebe06000 */\n+  1.61677540391961912631535763471935882E-34Q, /* 3f8eadd00841366b0dc2bc262c2c8c36 */\n+ -7.93457031249988696952538334288757473E-04Q, /* bff49ffffffffff97bf6f0aa85a5f000 */\n+  1.22318577008381887076634753347515709E-34Q, /* 3f8e452db5b5d250878f71040da06d14 */\n+ -7.62939453124996723316499040007097041E-04Q, /* bff48ffffffffffe1c7265b431108000 */\n+ -1.03845161748762410745671891558398468E-34Q, /* bf8e14115ad884c96d1a820c73647220 */\n+ -7.32421874999998242520117923997325794E-04Q, /* bff47ffffffffffefca4498b7aa8a000 */\n+  5.64005211953031009549514026639438083E-35Q, /* 3f8d2be06950f68f1a6d8ff829a6928e */\n+ -7.01904296874999772890934814265622012E-04Q, /* bff46fffffffffffde7c0fe5d8041000 */\n+  5.90245467325173644235991233229525762E-35Q, /* 3f8d39d40cc49002189243c194b1db0e */\n+ -6.71386718750008699269643939210658742E-04Q, /* bff460000000000503c91d798b60c000 */\n+ -5.20515801723324452151498579012322191E-35Q, /* bf8d14c0f08a6a9285b32b8bda003eb5 */\n+ -6.40869140625005499535275057463709988E-04Q, /* bff45000000000032b969184e9751000 */\n+ -6.69469163285461870099846471658294534E-35Q, /* bf8d63f36bab7b24d936c9380e3d3fa6 */\n+ -6.10351562499999293780097329596079841E-04Q, /* bff43fffffffffff97c7c433e35ed000 */\n+ -1.16941808547394177991845382085515086E-34Q, /* bf8e36e27886f10b234a7dd8fc588bf0 */\n+ -5.79833984375000068291972326409994795E-04Q, /* bff43000000000000a13ff6dcf2bf000 */\n+  1.17885044988246219185041488459766001E-34Q, /* 3f8e3964677e001a00412aab52790842 */\n+ -5.49316406249990904622170867910987793E-04Q, /* bff41ffffffffffac1c25739c716b000 */\n+ -3.31875702128137033065075734368960972E-35Q, /* bf8c60e928d8982c3c99aef4f885a121 */\n+ -5.18798828125011293653756992177727236E-04Q, /* bff410000000000682a62cff36775000 */\n+ -5.69971237642088463334239430962628187E-35Q, /* bf8d2f0c76f8757d61cd1abc7ea7d066 */\n+ -4.88281249999990512232251384917893121E-04Q, /* bff3fffffffffff50fb48992320df000 */\n+  1.02144616714408655325510171265051108E-35Q, /* 3f8ab279a3626612710b9b3ac71734ac */\n+ -4.57763671874997554564967307956493434E-04Q, /* bff3dffffffffffd2e3c272e3cca9000 */\n+ -8.25484058867957231164162481843653503E-35Q, /* bf8db6e71158e7bf93e2e683f07aa841 */\n+ -4.27246093749991203999790346349633286E-04Q, /* bff3bffffffffff5dbe103cba0eb2000 */\n+ -3.51191203319375193921924105905691755E-35Q, /* bf8c757356d0f3dd7fbefc0dd419ab50 */\n+ -3.96728515624986649402960638705483281E-04Q, /* bff39ffffffffff09b996882706ec000 */\n+ -5.51925962073095883016589497244931171E-36Q, /* bf89d586d49f22289cfc860bebb99056 */\n+ -3.66210937499999945095511981300980754E-04Q, /* bff37fffffffffffefcb88bfc7df6000 */\n+ -2.11696465278144529364423332249588595E-35Q, /* bf8bc23a84d28e5496c874ef9833be25 */\n+ -3.35693359374992480958458008559640163E-04Q, /* bff35ffffffffff754c548a8798f2000 */\n+ -8.58941791799705081104736787493668352E-35Q, /* bf8dc8b1192fb7c3662826d43acb7c68 */\n+ -3.05175781250009811036303273640122156E-04Q, /* bff340000000000b4fb4f1aad1c76000 */\n+ -8.61173897858769926480551302277426632E-35Q, /* bf8dc9e0eabb1c0b33051011b64769fa */\n+ -2.74658203124987298321920308390303850E-04Q, /* bff31ffffffffff15b2056ac252fd000 */\n+  3.35152809454778381053519808988046631E-37Q, /* 3f85c82fb59ff8d7c80d44e635420ab1 */\n+ -2.44140624999999992770514819575735516E-04Q, /* bff2fffffffffffffbbb82d6a7636000 */\n+  3.54445837111124472730013879165516908E-35Q, /* 3f8c78e955b01378be647b1c92aa9a77 */\n+ -2.13623046875012756463165168672749438E-04Q, /* bff2c0000000001d6a1635fea6bbf000 */\n+  1.50050816288650121729916777279129473E-35Q, /* 3f8b3f1f6f616a61129a58e131cbd31d */\n+ -1.83105468749991323078784464300306893E-04Q, /* bff27fffffffffebfe0cbd0c82399000 */\n+ -9.14919506501448661140572099029756008E-37Q, /* bf873754bacaa9d9513b6127e791eb47 */\n+ -1.52587890625013337032336300236461546E-04Q, /* bff240000000001ec0cb57f2cc995000 */\n+  2.84906084373176180870418394956384516E-35Q, /* 3f8c2ef6d03a7e6ab087c4f099e4de89 */\n+ -1.22070312499990746786116828458007518E-04Q, /* bff1ffffffffffd553bbb49f35a34000 */\n+  6.71618008964968339584520728412444537E-36Q, /* 3f8a1dacb99c60071fc9cd2349495bf0 */\n+ -9.15527343750029275602791047595142231E-05Q, /* bff180000000000d8040cd6ecde28000 */\n+ -1.95753652091078750312541716951402172E-35Q, /* bf8ba0526cfb24d8d59122f1c7a09a14 */\n+ -6.10351562499913258461494008080572701E-05Q, /* bff0ffffffffffaffebbb92d7f6a9000 */\n+  5.69868489273961111703398456218119973E-36Q, /* 3f89e4ca5df09ef4a4386dd5b3bf0331 */\n+ -3.05175781250092882818419203884960853E-05Q, /* bff0000000000055ab55de88fac1d000 */\n+  9.03341100018476837609128961872915953E-36Q, /* 3f8a803d229fa3a0e834a63abb06662b */\n+#define T_EXPL_ARG2 (2*T_EXPL_ARG1 + 2 + 2*65)\n+  0.00000000000000000000000000000000000E+00Q, /* 00000000000000000000000000000000 */\n+  0.00000000000000000000000000000000000E+00Q, /* 00000000000000000000000000000000 */\n+  3.05175781249814607084128277672749162E-05Q, /* 3feffffffffffeaa02abb9102f499000 */\n+  1.00271855391179733380665816525889949E-36Q, /* 3f8755351afa042ac3f58114824d4c10 */\n+  6.10351562500179243748093427073421439E-05Q, /* 3ff1000000000052a95de07a4c26d000 */\n+  1.67231624299180373502350811501181670E-36Q, /* 3f881c87a53691cae9d77f4e40d66616 */\n+  9.15527343749970728685313252158399200E-05Q, /* 3ff17ffffffffff28040cc2acde28000 */\n+  2.43665747834893104318707597514407880E-36Q, /* 3f889e9366c7c6c6a2ecb78dc9b0509e */\n+  1.22070312500027751961838150070880064E-04Q, /* 3ff200000000003ffddde6c153b53000 */\n+ -1.73322146370624186623546452226755405E-35Q, /* bf8b709d8d658ed5dbbe943de56ee84e */\n+  1.52587890624995916105682628143179430E-04Q, /* 3ff23ffffffffff6954b56e285d23000 */\n+  1.23580432650945898349135528000443828E-35Q, /* 3f8b06d396601dde16de7d7bc27346e6 */\n+  1.83105468750008670314358488289621794E-04Q, /* 3ff2800000000013fe0cdc8c823b7000 */\n+  4.30446229148833293310207915930740796E-35Q, /* 3f8cc9ba9bfe554a4f7f2fece291eb23 */\n+  2.13623046875005741337455947623248132E-04Q, /* 3ff2c0000000000d3d1662de21a3f000 */\n+ -3.96110759869520786681660669615255057E-35Q, /* bf8ca5379b04ff4a31aab0ceacc917e6 */\n+  2.44140624999981493573336463433440506E-04Q, /* 3ff2ffffffffffd553bbdf48e0534000 */\n+ -1.39617373942387888957350179316792928E-35Q, /* bf8b28eeedc286015802b63f96b8c5cd */\n+  2.74658203124984920706309918754626834E-04Q, /* 3ff31fffffffffee9d60c8439ec1d000 */\n+ -3.16168080483901830349738314447356223E-36Q, /* bf890cf74f81c77a611abc1243812444 */\n+  3.05175781250008648918265055410966055E-04Q, /* 3ff3400000000009f8b5c9a346636000 */\n+  8.54421306185008998867856704677221443E-35Q, /* 3f8dc649cd40922fc08adc6b6b20ead0 */\n+  3.35693359374988945462612499316774515E-04Q, /* 3ff35ffffffffff34146c540f15b2000 */\n+  7.96443137431639500475160850431097078E-35Q, /* 3f8da77638ed3148fc4d99d1c9e13446 */\n+  3.66210937500027690542093987739604535E-04Q, /* 3ff380000000001fecce34bea89c4000 */\n+  2.14507323877752361258862577769090367E-35Q, /* 3f8bc834e554d38894cf91957b0253d3 */\n+  3.96728515625003928083564943615052121E-04Q, /* 3ff3a00000000004875d9a4acf6ab000 */\n+  4.88358523466632050664019922448605508E-35Q, /* 3f8d03a7eaeef1a9f78c71a12c44dd28 */\n+  4.27246093750017799227172345607351585E-04Q, /* 3ff3c00000000014856794c3ee850000 */\n+  6.66520494592631402182216588784828935E-35Q, /* 3f8d6262118fcdb59b8f16108f5f1a6c */\n+  4.57763671875002108342364320152138181E-04Q, /* 3ff3e000000000026e45d855410b9000 */\n+  7.21799615960261390920033272189522298E-35Q, /* 3f8d7fc645cff8879462296af975c9fd */\n+  4.88281249999999768797631616370963356E-04Q, /* 3ff3ffffffffffffbbc2d7cc004df000 */\n+ -5.30564629906905979452258114088325361E-35Q, /* bf8d1a18b71929a30d67a217a27ae851 */\n+  5.18798828124997339054881383202487041E-04Q, /* 3ff40ffffffffffe775055eea5851000 */\n+ -4.03682911253647925867848180522846377E-35Q, /* bf8cad44f0f3e5199d8a589d9332acad */\n+  5.49316406249980511907933706754958501E-04Q, /* 3ff41ffffffffff4c410b29bb62fb000 */\n+ -2.08166843948323917121806956728438051E-35Q, /* bf8bbab8cf691403249fe5b699e25143 */\n+  5.79833984374989593561576568548497165E-04Q, /* 3ff42ffffffffffa0047df328d817000 */\n+ -1.72745033420153042445343706432627539E-34Q, /* bf8ecb3c2d7d3a9e6e960576be901fdf */\n+  6.10351562500008540711511259540838154E-04Q, /* 3ff4400000000004ec62f54f8c271000 */\n+  7.41889382604319545724663095428976499E-35Q, /* 3f8d8a74c002c81a47c93b8e05d15f8e */\n+  6.40869140625020444702875407535884986E-04Q, /* 3ff450000000000bc91b09718515d000 */\n+ -4.47321009727305792048065440180490107E-35Q, /* bf8cdbac5c8fe70822081d8993eb5cb6 */\n+  6.71386718750007531635964622352684074E-04Q, /* 3ff460000000000457792973db05c000 */\n+  5.13698959677949336513874456684462092E-35Q, /* 3f8d112114436949c5ef38d8049004ab */\n+  7.01904296875006634673332887754430334E-04Q, /* 3ff4700000000003d31adf2cb8b1d000 */\n+ -8.25665755717729437292989870760751482E-35Q, /* bf8db6ffcc8ef71f8e648e3a8b160f5a */\n+  7.32421874999998244664170215504673504E-04Q, /* 3ff47ffffffffffefcf5498bd5c8a000 */\n+ -5.64005234937832153139057628112753364E-35Q, /* bf8d2be06a1dfe90e7bf90fba7c12a98 */\n+  7.62939453125017456345986752604096408E-04Q, /* 3ff490000000000a101a1b093d4a8000 */\n+ -1.11084094120417622468550608896588329E-34Q, /* bf8e274feabd2d94f6694507a46accb1 */\n+  7.93457031249987558617598988993908016E-04Q, /* 3ff49ffffffffff8d3f9dcab74bbf000 */\n+ -1.22966480225449015129079129940978828E-34Q, /* bf8e46e6a65eef8fa9e42eddf3da305e */\n+  8.23974609374997378723747633335135819E-04Q, /* 3ff4affffffffffe7d2afbaa55b26000 */\n+ -1.62270010016794279091906973366704963E-34Q, /* bf8eaf633f057ebdb664a34566401c4e */\n+  8.54492187500023938282350821569920958E-04Q, /* 3ff4c0000000000dccaabce399e59000 */\n+ -1.39076361712838158775374263169606160E-34Q, /* bf8e71ba779364b3bbdba7841f2c4ca1 */\n+  8.85009765624987932362186815286691297E-04Q, /* 3ff4cffffffffff90b218886edc2a000 */\n+  4.07328275060905585228261577392403980E-35Q, /* 3f8cb1254dbb6ea4b8cfa5ed4cf28d24 */\n+  9.15527343749975579461305518559161974E-04Q, /* 3ff4dffffffffff1ec2a21f25df33000 */\n+  1.16855112459192484947855553716334015E-35Q, /* 3f8af10bf319e9f5270cf249eeffbe5c */\n+  9.46044921875016761584725882821122521E-04Q, /* 3ff4f00000000009a992c46c16d71000 */\n+  9.51660680007524262741115611071680436E-35Q, /* 3f8df9fd56e81f8edf133843910ee831 */\n+  9.76562499999974118878133088548272636E-04Q, /* 3ff4fffffffffff1149edc46a6df6000 */\n+ -5.65271128977550656964071208289181661E-36Q, /* bf89e0e12689dd721aa2314c81eb6429 */\n+  1.00708007812498671732140389760347830E-03Q, /* 3ff507fffffffffc2be94b90ed091000 */\n+ -1.43355074891483635310132767255371379E-34Q, /* bf8e7d1a688c247b16022daab1316d55 */\n+  1.03759765625002637786192745235343007E-03Q, /* 3ff51000000000079a57b966bc158000 */\n+  2.95905815240957629366749917020106928E-34Q, /* 3f8f895387fc73bb38f8a1b254c01a60 */\n+  1.06811523437500860568717813047520763E-03Q, /* 3ff51800000000027afcd5b35f5e6000 */\n+ -5.98328495358586628195372356742878314E-35Q, /* bf8d3e204130013bf6328f1b70ff8c76 */\n+  1.09863281250001439958487251556220070E-03Q, /* 3ff5200000000004268077c6c66bd000 */\n+  2.41371837889426603334113000868144760E-34Q, /* 3f8f40d6948edf864054ccf151f9815e */\n+  1.12915039062501298413451613770002366E-03Q, /* 3ff5280000000003be0f5dd8fe81b000 */\n+ -1.28815268997394164973472617519705703E-34Q, /* bf8e567321172ea089dce4bc8354ecb7 */\n+  1.15966796874997272036339054191407232E-03Q, /* 3ff52ffffffffff8231e3bcfff1e8000 */\n+  1.02996064554316248496839462594377804E-34Q, /* 3f8e11cf7d402789244f68e2d4f985b1 */\n+  1.19018554687502744121802585360546796E-03Q, /* 3ff5380000000007e8cdf3f8f6c20000 */\n+ -1.43453217726255628994625761307322163E-34Q, /* bf8e7d5d3370d85a374f5f4802fc517a */\n+  1.22070312499997743541996266398850614E-03Q, /* 3ff53ffffffffff97f0722561f454000 */\n+ -1.41086259180534339713692694428211646E-34Q, /* bf8e77125519ff76244dfec5fbd58402 */\n+  1.25122070312501024092560690174507039E-03Q, /* 3ff5480000000002f3a59d8820691000 */\n+  3.84102646020099293168698506729765213E-34Q, /* 3f8ffe8f5b86f9c3569c8f26e19b1f50 */\n+  1.28173828124997986521442660131425390E-03Q, /* 3ff54ffffffffffa3250a764439d9000 */\n+  1.44644589735033114377952806106652650E-34Q, /* 3f8e808801b80dcf38323cdbfdca2549 */\n+  1.31225585937501665804856968749058137E-03Q, /* 3ff5580000000004cd25a414c6d62000 */\n+  1.67474574742200577294563576414361377E-34Q, /* 3f8ebd394a151dbda4f81d5d83c0f1e9 */\n+  1.34277343749997290265837386401818888E-03Q, /* 3ff55ffffffffff83091b042cfd59000 */\n+ -1.55650565030381326742591837551559103E-34Q, /* bf8e9dca490d7fecfadba9625ffb91c5 */\n+  1.37329101562497720784949380297774268E-03Q, /* 3ff567fffffffff96e3c7312f5ccf000 */\n+  1.65279335325630026116581677369221748E-34Q, /* 3f8eb763496f5bd7404f2298b402074f */\n+  1.40380859374999099958354100336136647E-03Q, /* 3ff56ffffffffffd67e2f09f2a381000 */\n+  1.89919944388961890195706641264717076E-34Q, /* 3f8ef8e4d0ffdfeba982aa8829501389 */\n+  1.43432617187497484122173130998160625E-03Q, /* 3ff577fffffffff8bf9c1d71af8a8000 */\n+  2.57638517142061429772064578590009568E-34Q, /* 3f8f5675d82c1cc4ada70fd3a957b89a */\n+  1.46484374999999929342158925502052945E-03Q, /* 3ff57fffffffffffcbdd1c7671b46000 */\n+  1.76487201934184070490166772482073801E-34Q, /* 3f8ed52ef732458f6e4c5c07504f33cc */\n+  1.49536132812502318451070466256902933E-03Q, /* 3ff5880000000006aeb7066c8ad43000 */\n+  2.38068367275295804321313550609246656E-34Q, /* 3f8f3c7277ae6fc390ace5e06c0b025b */\n+  1.52587890625000448053340248672949543E-03Q, /* 3ff59000000000014a9ae2104b3bc000 */\n+  1.01174455568392813258454590274740959E-34Q, /* 3f8e0cf7c434762991bb38e12acee215 */\n+  1.55639648437501113499837053523090913E-03Q, /* 3ff5980000000003359e2c204355e000 */\n+ -2.82398418808099749023517211651363693E-35Q, /* bf8c2c4c2971d88caa95e15fb1ccb1a1 */\n+  1.58691406249999937955142588308171026E-03Q, /* 3ff59fffffffffffd2380ecbc87c2000 */\n+ -1.27361695572422741562701199136538047E-34Q, /* bf8e5295e0e206dfb0f0266c07225448 */\n+  1.61743164062498000531048954475329309E-03Q, /* 3ff5a7fffffffffa3ca6fe61ed94c000 */\n+ -1.22606548862580061633942923016222044E-34Q, /* bf8e45f1b17bb61039d21a351bb207b8 */\n+  1.64794921875001835451453858682255576E-03Q, /* 3ff5b000000000054a52fa20f6565000 */\n+  1.39132339594152335892305491425264583E-34Q, /* 3f8e71e0904c5449b414ee49b191cef2 */\n+  1.67846679687501263995029340691547953E-03Q, /* 3ff5b80000000003a4a9e912c910b000 */\n+  6.67245854693585315412242764786197029E-35Q, /* 3f8d62c4ccac1e7511a617d469468ccd */\n+  1.70898437500002646861403514115369655E-03Q, /* 3ff5c00000000007a109fbaa7e015000 */\n+  6.87367172354719289559624829652240928E-36Q, /* 3f8a245fa835eceb42bae8128d9336db */\n+  1.73950195312501174308226096992992128E-03Q, /* 3ff5c80000000003627c8d637a005000 */\n+ -2.20824271875474985927385878948759352E-34Q, /* bf8f25869b1cbefb25e735992f232f57 */\n+  1.77001953124997491747605207736194513E-03Q, /* 3ff5cffffffffff8c53c84b6883b8000 */\n+  3.43123048533596296514343180408963705E-34Q, /* 3f8fc816b91d173ddadbbf09b1287906 */\n+  1.80053710937497698911127570705069398E-03Q, /* 3ff5d7fffffffff95e1899f4a8430000 */\n+  3.99231237340890073475077494556136100E-35Q, /* 3f8ca889148f62fa854da5674df41279 */\n+  1.83105468750002267094899598630423914E-03Q, /* 3ff5e0000000000688d21e62ba674000 */\n+ -3.22274595655810623999007524769365273E-34Q, /* bf8fac605cb9ae01eb719675ced25560 */\n+  1.86157226562500499224728040579690330E-03Q, /* 3ff5e80000000001705ce28a6d89e000 */\n+  3.07094985075881613489605622068441083E-34Q, /* 3f8f98330225ec7e2c8f3c0d1c432b91 */\n+  1.89208984374998234666824993196980949E-03Q, /* 3ff5effffffffffae969fdc7cd8cf000 */\n+ -3.06287628722973914692165056776495733E-34Q, /* bf8f9720477d9cfa10e464df7f91020c */\n+  1.92260742187501225343755557292811682E-03Q, /* 3ff5f800000000038824e428ed49a000 */\n+  6.30049124729794620592961282769623368E-35Q, /* 3f8d4efdd7cd4336d88a6aa49e1e96bc */\n+  1.95312499999998514894032051116231258E-03Q, /* 3ff5fffffffffffbb82f6a04f1ae0000 */\n+ -6.14610057507500948543216998736262902E-35Q, /* bf8d46c862d39255370e7974d48daa7e */\n+  1.98364257812501222021119324146882732E-03Q, /* 3ff6040000000001c2d8a1aa5188d000 */\n+  3.71942298418113774118754986159801984E-34Q, /* 3f8fee6567d9940495519ffe62cbc9a4 */\n+\n+  7.06341639425619532977052017486130353E-01Q, /* 3ffe69a59c8245a9ac00000000000000 */\n+  7.09106182437398424589503065362805501E-01Q, /* 3ffe6b0ff72deb89d000000000000000 */\n+  7.11881545564596485142772053222870454E-01Q, /* 3ffe6c7bbce9a6d93000000000000000 */\n+  7.14667771155948150507697391731198877E-01Q, /* 3ffe6de8ef213d71e000000000000000 */\n+  7.17464901725936049503573599395167548E-01Q, /* 3ffe6f578f41e1a9e400000000000000 */\n+  7.20272979955439790478166628417966422E-01Q, /* 3ffe70c79eba33c06c00000000000000 */\n+  7.23092048692387218133958981525211129E-01Q, /* 3ffe72391efa434c7400000000000000 */\n+  7.25922150952408251622927082280511968E-01Q, /* 3ffe73ac117390acd800000000000000 */\n+  7.28763329919491220643124052003258839E-01Q, /* 3ffe752077990e79d000000000000000 */\n+  7.31615628946641782803794740175362676E-01Q, /* 3ffe769652df22f7e000000000000000 */\n+  7.34479091556544505525749855223693885E-01Q, /* 3ffe780da4bba98c4800000000000000 */\n+  7.37353761442226890432394270646909717E-01Q, /* 3ffe79866ea5f432d400000000000000 */\n+  7.40239682467726090031590047146892175E-01Q, /* 3ffe7b00b216ccf53000000000000000 */\n+  7.43136898668758316688354170764796436E-01Q, /* 3ffe7c7c70887763c000000000000000 */\n+  7.46045454253390638577059235103661194E-01Q, /* 3ffe7df9ab76b20fd000000000000000 */\n+  7.48965393602715662213498148958024103E-01Q, /* 3ffe7f78645eb8076400000000000000 */\n+  7.51896761271528629722027403659012634E-01Q, /* 3ffe80f89cbf42526400000000000000 */\n+  7.54839601989007347171423134568613023E-01Q, /* 3ffe827a561889716000000000000000 */\n+  7.57793960659394638668118204805068672E-01Q, /* 3ffe83fd91ec46ddc000000000000000 */\n+  7.60759882362683631518152083117456641E-01Q, /* 3ffe858251bdb68b8c00000000000000 */\n+  7.63737412355305483879774897104653064E-01Q, /* 3ffe87089711986c9400000000000000 */\n+  7.66726596070820082262642358728044201E-01Q, /* 3ffe8890636e31f54400000000000000 */\n+  7.69727479120609181517664865168626420E-01Q, /* 3ffe8a19b85b4fa2d800000000000000 */\n+  7.72740107294572486917871856348938309E-01Q, /* 3ffe8ba4976246833800000000000000 */\n+  7.75764526561826289752232810315035749E-01Q, /* 3ffe8d31020df5be4400000000000000 */\n+  7.78800783071404878477039801509818062E-01Q, /* 3ffe8ebef9eac820b000000000000000 */\n+  7.81848923152964780936002853195532225E-01Q, /* 3ffe904e8086b5a87800000000000000 */\n+  7.84908993317491698871180005880887620E-01Q, /* 3ffe91df97714512d800000000000000 */\n+  7.87981040258010162480317717381694820E-01Q, /* 3ffe9372403b8d6bcc00000000000000 */\n+  7.91065110850296016042904057030682452E-01Q, /* 3ffe95067c78379f2800000000000000 */\n+  7.94161252153591734614934694036492147E-01Q, /* 3ffe969c4dbb800b4800000000000000 */\n+  7.97269511411324433014513601847284008E-01Q, /* 3ffe9833b59b38154400000000000000 */\n+  8.00389936051826789142893403550260700E-01Q, /* 3ffe99ccb5aec7bec800000000000000 */\n+  8.03522573689060742863077280162542593E-01Q, /* 3ffe9b674f8f2f3d7c00000000000000 */\n+  8.06667472123343942680406826184480451E-01Q, /* 3ffe9d0384d70893f800000000000000 */\n+  8.09824679342079301047618855591281317E-01Q, /* 3ffe9ea15722892c7800000000000000 */\n+  8.12994243520486992160556383169023320E-01Q, /* 3ffea040c80f8374f000000000000000 */\n+  8.16176213022339780422953481320291758E-01Q, /* 3ffea1e1d93d687d0000000000000000 */\n+  8.19370636400700819157449927843117621E-01Q, /* 3ffea3848c4d49954c00000000000000 */\n+  8.22577562398664585696650419777142815E-01Q, /* 3ffea528e2e1d9f09800000000000000 */\n+  8.25797039950100647542896581398963463E-01Q, /* 3ffea6cede9f70467c00000000000000 */\n+  8.29029118180400342863478613253391813E-01Q, /* 3ffea876812c0877bc00000000000000 */\n+  8.32273846407226292054559735333896242E-01Q, /* 3ffeaa1fcc2f45343800000000000000 */\n+  8.35531274141265073440720811959181447E-01Q, /* 3ffeabcac15271a2a400000000000000 */\n+  8.38801451086982535754188461396552157E-01Q, /* 3ffead7762408309bc00000000000000 */\n+  8.42084427143382358016410194068157580E-01Q, /* 3ffeaf25b0a61a7b4c00000000000000 */\n+  8.45380252404767357221615498019673396E-01Q, /* 3ffeb0d5ae318680c400000000000000 */\n+  8.48688977161503960155997106085123960E-01Q, /* 3ffeb2875c92c4c99400000000000000 */\n+  8.52010651900789478530029441571969073E-01Q, /* 3ffeb43abd7b83db1c00000000000000 */\n+  8.55345327307422548246407245642330963E-01Q, /* 3ffeb5efd29f24c26400000000000000 */\n+  8.58693054264576483003423845730139874E-01Q, /* 3ffeb7a69db2bcc77800000000000000 */\n+  8.62053883854575708767242758767679334E-01Q, /* 3ffeb95f206d17228000000000000000 */\n+  8.65427867359675251357487013592617586E-01Q, /* 3ffebb195c86b6b29000000000000000 */\n+  8.68815056262843166123843730019871145E-01Q, /* 3ffebcd553b9d7b62000000000000000 */\n+  8.72215502248546159513864495238522068E-01Q, /* 3ffebe9307c271855000000000000000 */\n+  8.75629257203538208242932228131394368E-01Q, /* 3ffec0527a5e384ddc00000000000000 */\n+  8.79056373217652342599848225290770642E-01Q, /* 3ffec213ad4c9ed0d800000000000000 */\n+  8.82496902584595399599010079327854328E-01Q, /* 3ffec3d6a24ed8221800000000000000 */\n+  8.85950897802745995779361010136199184E-01Q, /* 3ffec59b5b27d9696800000000000000 */\n+  8.89418411575955636383383762222365476E-01Q, /* 3ffec761d99c5ba58800000000000000 */\n+  8.92899496814352794382685374330321793E-01Q, /* 3ffec92a1f72dd70d400000000000000 */\n+  8.96394206635150403439382671422208659E-01Q, /* 3ffecaf42e73a4c7d800000000000000 */\n+  8.99902594363456265202927397695020773E-01Q, /* 3ffeccc00868c0d18800000000000000 */\n+  9.03424713533086704009278378180169966E-01Q, /* 3ffece8daf1e0ba94c00000000000000 */\n+  9.06960617887383580004723171441582963E-01Q, /* 3ffed05d24612c2af000000000000000 */\n+  9.10510361380034133338412516422977205E-01Q, /* 3ffed22e6a0197c02c00000000000000 */\n+  9.14073998175894436579724811053893063E-01Q, /* 3ffed40181d094303400000000000000 */\n+  9.17651582651815816982221463149471674E-01Q, /* 3ffed5d66da13970f400000000000000 */\n+  9.21243169397474526149949269893113524E-01Q, /* 3ffed7ad2f48737a2000000000000000 */\n+  9.24848813216204823639543519675498828E-01Q, /* 3ffed985c89d041a3000000000000000 */\n+  9.28468569125835141431224428743007593E-01Q, /* 3ffedb603b7784cd1800000000000000 */\n+  9.32102492359527579068867453315760940E-01Q, /* 3ffedd3c89b26894e000000000000000 */\n+  9.35750638366620729469147477175283711E-01Q, /* 3ffedf1ab529fdd41c00000000000000 */\n+  9.39413062813475779888605643463961314E-01Q, /* 3ffee0fabfbc702a3c00000000000000 */\n+  9.43089821584325888048638830696290825E-01Q, /* 3ffee2dcab49ca51b400000000000000 */\n+  9.46780970782128888929563004239753354E-01Q, /* 3ffee4c079b3f8000400000000000000 */\n+  9.50486566729423443256052905780961737E-01Q, /* 3ffee6a62cdec7c7b000000000000000 */\n+  9.54206665969188322362626308859034907E-01Q, /* 3ffee88dc6afecfbfc00000000000000 */\n+  9.57941325265705301283958306157728657E-01Q, /* 3ffeea77490f0196b000000000000000 */\n+  9.61690601605425299247542625380447134E-01Q, /* 3ffeec62b5e5881fb000000000000000 */\n+  9.65454552197837823079851204965962097E-01Q, /* 3ffeee500f1eed967000000000000000 */\n+  9.69233234476344074348475032820715569E-01Q, /* 3ffef03f56a88b5d7800000000000000 */\n+  9.73026706099133165128733935489435680E-01Q, /* 3ffef2308e71a927a800000000000000 */\n+  9.76835024950062025261843245971249416E-01Q, /* 3ffef423b86b7ee79000000000000000 */\n+  9.80658249139538557015427500118676107E-01Q, /* 3ffef618d68936c09c00000000000000 */\n+  9.84496437005408397968864164795377292E-01Q, /* 3ffef80feabfeefa4800000000000000 */\n+  9.88349647113845042323276857132441364E-01Q, /* 3ffefa08f706bbf53800000000000000 */\n+  9.92217938260243514925207364285597578E-01Q, /* 3ffefc03fd56aa225000000000000000 */\n+  9.96101369470117486981664001177705359E-01Q, /* 3ffefe00ffaabffbbc00000000000000 */\n+#define T_EXPL_RES1 (T_EXPL_ARG2 + 2 + 2*65 + 89)\n+  1.00000000000000000000000000000000000E+00Q, /* 3fff0000000000000000000000000000 */\n+  1.00391388933834757590801700644078664E+00Q, /* 3fff0100802ab5577800000000000000 */\n+  1.00784309720644799091004983893071767E+00Q, /* 3fff0202015600445c00000000000000 */\n+  1.01178768355933151879000320150225889E+00Q, /* 3fff0304848362076c00000000000000 */\n+  1.01574770858668572692806719715008512E+00Q, /* 3fff04080ab55de39000000000000000 */\n+  1.01972323271377413034244341361045372E+00Q, /* 3fff050c94ef7a206c00000000000000 */\n+  1.02371431660235789884438872832106426E+00Q, /* 3fff06122436410dd000000000000000 */\n+  1.02772102115162167201845022646011785E+00Q, /* 3fff0718b98f42085000000000000000 */\n+  1.03174340749910264936062276319717057E+00Q, /* 3fff08205601127ec800000000000000 */\n+  1.03578153702162378824169763902318664E+00Q, /* 3fff0928fa934ef90800000000000000 */\n+  1.03983547133622999947277776300325058E+00Q, /* 3fff0a32a84e9c1f5800000000000000 */\n+  1.04390527230112850620713516036630608E+00Q, /* 3fff0b3d603ca7c32800000000000000 */\n+  1.04799100201663270004459604933799710E+00Q, /* 3fff0c49236829e8bc00000000000000 */\n+  1.05209272282610977189420964350574650E+00Q, /* 3fff0d55f2dce5d1e800000000000000 */\n+  1.05621049731693195106174698594259098E+00Q, /* 3fff0e63cfa7ab09d000000000000000 */\n+  1.06034438832143151909548350886325352E+00Q, /* 3fff0f72bad65671b800000000000000 */\n+  1.06449445891785943185681162503897212E+00Q, /* 3fff1082b577d34ed800000000000000 */\n+  1.06866077243134810492719566354935523E+00Q, /* 3fff1193c09c1c595c00000000000000 */\n+  1.07284339243487741866189821848820429E+00Q, /* 3fff12a5dd543ccc4c00000000000000 */\n+  1.07704238275024494209120007326419000E+00Q, /* 3fff13b90cb25176a400000000000000 */\n+  1.08125780744903959851299646288680378E+00Q, /* 3fff14cd4fc989cd6400000000000000 */\n+  1.08548973085361949442173568058933597E+00Q, /* 3fff15e2a7ae28fecc00000000000000 */\n+  1.08973821753809324563988525369495619E+00Q, /* 3fff16f9157587069400000000000000 */\n+  1.09400333232930546678574046381982043E+00Q, /* 3fff18109a3611c35000000000000000 */\n+  1.09828514030782586896606289883493446E+00Q, /* 3fff192937074e0cd800000000000000 */\n+  1.10258370680894224324930519287590869E+00Q, /* 3fff1a42ed01d8cbc800000000000000 */\n+  1.10689909742365749645287564817408565E+00Q, /* 3fff1b5dbd3f68122400000000000000 */\n+  1.11123137799969046168868658241990488E+00Q, /* 3fff1c79a8dacc350c00000000000000 */\n+  1.11558061464248076122274255794764031E+00Q, /* 3fff1d96b0eff0e79400000000000000 */\n+  1.11994687371619722204840741142106708E+00Q, /* 3fff1eb4d69bde569c00000000000000 */\n+  1.12433022184475073235176978414529003E+00Q, /* 3fff1fd41afcba45e800000000000000 */\n+  1.12873072591281087273529237791080959E+00Q, /* 3fff20f47f31c92e4800000000000000 */\n+  1.13314845306682632219974493636982515E+00Q, /* 3fff2216045b6f5cd000000000000000 */\n+  1.13758347071604959399593326452304609E+00Q, /* 3fff2338ab9b32134800000000000000 */\n+  1.14203584653356560174586320499656722E+00Q, /* 3fff245c7613b8a9b000000000000000 */\n+  1.14650564845732405583333957110880874E+00Q, /* 3fff258164e8cdb0d800000000000000 */\n+  1.15099294469117646722011727433709893E+00Q, /* 3fff26a7793f60164400000000000000 */\n+  1.15549780370591653744227755851170514E+00Q, /* 3fff27ceb43d84490400000000000000 */\n+  1.16002029424032515603215642840950750E+00Q, /* 3fff28f7170a755fd800000000000000 */\n+  1.16456048530221917269855680387991015E+00Q, /* 3fff2a20a2ce96406400000000000000 */\n+  1.16911844616950438835445424956560601E+00Q, /* 3fff2b4b58b372c79400000000000000 */\n+  1.17369424639123270948104504896036815E+00Q, /* 3fff2c7739e3c0f32c00000000000000 */\n+  1.17828795578866324378353169777255971E+00Q, /* 3fff2da4478b620c7400000000000000 */\n+  1.18289964445632783673900689791480545E+00Q, /* 3fff2ed282d763d42400000000000000 */\n+  1.18752938276310060494722620205720887E+00Q, /* 3fff3001ecf601af7000000000000000 */\n+  1.19217724135327157730657177125976887E+00Q, /* 3fff31328716a5d63c00000000000000 */\n+  1.19684329114762477708211463323095813E+00Q, /* 3fff32645269ea829000000000000000 */\n+  1.20152760334452030077656559114984702E+00Q, /* 3fff339750219b212c00000000000000 */\n+  1.20623024942098072687102217059873510E+00Q, /* 3fff34cb8170b5835400000000000000 */\n+  1.21095130113378179892436037334846333E+00Q, /* 3fff3600e78b6b11d000000000000000 */\n+  1.21569083052054743854242246925423387E+00Q, /* 3fff373783a722012400000000000000 */\n+  1.22044890990084875515009343871497549E+00Q, /* 3fff386f56fa7686e800000000000000 */\n+  1.22522561187730755216662714701669756E+00Q, /* 3fff39a862bd3c106400000000000000 */\n+  1.23002100933670455162882717559114099E+00Q, /* 3fff3ae2a8287e7a8000000000000000 */\n+  1.23483517545109100499445276000187732E+00Q, /* 3fff3c1e2876834aa800000000000000 */\n+  1.23966818367890557750499169742397498E+00Q, /* 3fff3d5ae4e2cae92c00000000000000 */\n+  1.24452010776609517384017067342938390E+00Q, /* 3fff3e98deaa11dcbc00000000000000 */\n+  1.24939102174724003813111039562500082E+00Q, /* 3fff3fd8170a52071800000000000000 */\n+  1.25428099994668373895478907797951251E+00Q, /* 3fff41188f42c3e32000000000000000 */\n+  1.25919011697966698459794088194030337E+00Q, /* 3fff425a4893dfc3f800000000000000 */\n+  1.26411844775346637881341393949696794E+00Q, /* 3fff439d443f5f159000000000000000 */\n+  1.26906606746853711786826579555054195E+00Q, /* 3fff44e183883d9e4800000000000000 */\n+  1.27403305161966090564007458851847332E+00Q, /* 3fff462707b2bac20c00000000000000 */\n+  1.27901947599709753244923149395617656E+00Q, /* 3fff476dd2045ac67800000000000000 */\n+  1.28402541668774150540599521264084615E+00Q, /* 3fff48b5e3c3e8186800000000000000 */\n+  1.28905095007628295311619126550795045E+00Q, /* 3fff49ff3e397492bc00000000000000 */\n+  1.29409615284637330434591717676084954E+00Q, /* 3fff4b49e2ae5ac67400000000000000 */\n+  1.29916110198179535206719492634874769E+00Q, /* 3fff4c95d26d3f440800000000000000 */\n+  1.30424587476763775839572190307080746E+00Q, /* 3fff4de30ec211e60000000000000000 */\n+  1.30935054879147461104338390214252286E+00Q, /* 3fff4f3198fa0f1cf800000000000000 */\n+  1.31447520194454914310711046709911898E+00Q, /* 3fff50817263c13cd000000000000000 */\n+  1.31961991242296217130558488861424848E+00Q, /* 3fff51d29c4f01cb3000000000000000 */\n+  1.32478475872886558573071624778094701E+00Q, /* 3fff5325180cfacf7800000000000000 */\n+  1.32996981967165983640200010995613411E+00Q, /* 3fff5478e6f02823d000000000000000 */\n+  1.33517517436919680440254865061433520E+00Q, /* 3fff55ce0a4c58c7bc00000000000000 */\n+  1.34040090224898678084031189428060316E+00Q, /* 3fff57248376b033d800000000000000 */\n+  1.34564708304941055283521222918352578E+00Q, /* 3fff587c53c5a7af0400000000000000 */\n+  1.35091379682093615244298234756570309E+00Q, /* 3fff59d57c910fa4e000000000000000 */\n+  1.35620112392734021300455538039386738E+00Q, /* 3fff5b2fff3210fd9400000000000000 */\n+  1.36150914504693443252136830778908916E+00Q, /* 3fff5c8bdd032e770800000000000000 */\n+  1.36683794117379636690046140756749082E+00Q, /* 3fff5de9176045ff5400000000000000 */\n+  1.37218759361900544124779344201670028E+00Q, /* 3fff5f47afa69210a800000000000000 */\n+  1.37755818401188367960941150158760138E+00Q, /* 3fff60a7a734ab0e8800000000000000 */\n+  1.38294979430124120867162673675920814E+00Q, /* 3fff6208ff6a88a46000000000000000 */\n+  1.38836250675662681297595213436579797E+00Q, /* 3fff636bb9a983258400000000000000 */\n+  1.39379640396958309755959248832368758E+00Q, /* 3fff64cfd75454ee7c00000000000000 */\n+  1.39925156885490681313299887733592186E+00Q, /* 3fff663559cf1bc7c400000000000000 */\n+  1.40472808465191417726103395580139477E+00Q, /* 3fff679c427f5a49f400000000000000 */\n+  1.41022603492571069194738697660795879E+00Q, /* 3fff690492cbf9432c00000000000000 */\n+  1.41574550356846662335641440222389065E+00Q, /* 3fff6a6e4c1d491e1800000000000000 */\n+\n+  9.98018323540573404351050612604012713E-01Q, /* 3ffefefc41f8d4bdb000000000000000 */\n+  9.98048781107475468932221929208026268E-01Q, /* 3ffeff003ff556aa8800000000000000 */\n+  9.98079239603882895082165305211674422E-01Q, /* 3ffeff043df9d4986000000000000000 */\n+  9.98109699029824021243584297735651489E-01Q, /* 3ffeff083c064e972c00000000000000 */\n+  9.98140159385327269125909310787392315E-01Q, /* 3ffeff0c3a1ac4b6ec00000000000000 */\n+  9.98170620670420977171843901487591211E-01Q, /* 3ffeff10383737079400000000000000 */\n+  9.98201082885133511579667242585856002E-01Q, /* 3ffeff14365ba5991c00000000000000 */\n+  9.98231546029493238547658506831794512E-01Q, /* 3ffeff183488107b7c00000000000000 */\n+  9.98262010103528552029672482603928074E-01Q, /* 3ffeff1c32bc77beb000000000000000 */\n+  9.98292475107267818223988342651864514E-01Q, /* 3ffeff2030f8db72b000000000000000 */\n+  9.98322941040739375573309644096298143E-01Q, /* 3ffeff242f3d3ba77000000000000000 */\n+  9.98353407903971645787066790944663808E-01Q, /* 3ffeff282d89986cf000000000000000 */\n+  9.98383875696992967307963340317655820E-01Q, /* 3ffeff2c2bddf1d32400000000000000 */\n+  9.98414344419831761845429696222709026E-01Q, /* 3ffeff302a3a47ea0c00000000000000 */\n+  9.98444814072516340086593800151604228E-01Q, /* 3ffeff34289e9ac19800000000000000 */\n+  9.98475284655075123740886056111776270E-01Q, /* 3ffeff38270aea69c800000000000000 */\n+  9.98505756167536479006585636852832977E-01Q, /* 3ffeff3c257f36f29400000000000000 */\n+  9.98536228609928799837547330753295682E-01Q, /* 3ffeff4023fb806bf800000000000000 */\n+  9.98566701982280452432050310562772211E-01Q, /* 3ffeff44227fc6e5ec00000000000000 */\n+  9.98597176284619802988373749030870385E-01Q, /* 3ffeff48210c0a706800000000000000 */\n+  9.98627651516975245460372434536111541E-01Q, /* 3ffeff4c1fa04b1b6800000000000000 */\n+  9.98658127679375173801901155457017012E-01Q, /* 3ffeff501e3c88f6e800000000000000 */\n+  9.98688604771847954211239084543194622E-01Q, /* 3ffeff541ce0c412e000000000000000 */\n+  9.98719082794421980642241010173165705E-01Q, /* 3ffeff581b8cfc7f4c00000000000000 */\n+  9.98749561747125619293186105096538085E-01Q, /* 3ffeff5c1a41324c2400000000000000 */\n+  9.98780041629987291873504773320746608E-01Q, /* 3ffeff6018fd65896800000000000000 */\n+  9.98810522443035364581476187595399097E-01Q, /* 3ffeff6417c196471000000000000000 */\n+  9.98841004186298203615379520670103375E-01Q, /* 3ffeff68168dc4951400000000000000 */\n+  9.98871486859804230684645176552294288E-01Q, /* 3ffeff6c1561f0837400000000000000 */\n+  9.98901970463581839743127943620493170E-01Q, /* 3ffeff70143e1a222c00000000000000 */\n+  9.98932454997659369233531378995394334E-01Q, /* 3ffeff74132241813000000000000000 */\n+  9.98962940462065268620861502313346136E-01Q, /* 3ffeff78120e66b08400000000000000 */\n+  9.98993426856827904103397486323956400E-01Q, /* 3ffeff7c110289c02000000000000000 */\n+  9.99023914181975669634994119405746460E-01Q, /* 3ffeff800ffeaac00000000000000000 */\n+  9.99054402437536959169506189937237650E-01Q, /* 3ffeff840f02c9c02000000000000000 */\n+  9.99084891623540138905212870668037795E-01Q, /* 3ffeff880e0ee6d07800000000000000 */\n+  9.99115381740013658307120181234495249E-01Q, /* 3ffeff8c0d2302010c00000000000000 */\n+  9.99145872786985911329082910015131347E-01Q, /* 3ffeff900c3f1b61d800000000000000 */\n+  9.99176364764485236413804614130640402E-01Q, /* 3ffeff940b633302d000000000000000 */\n+  9.99206857672540083026291313217370771E-01Q, /* 3ffeff980a8f48f3f800000000000000 */\n+  9.99237351511178817364822180024930276E-01Q, /* 3ffeff9c09c35d454800000000000000 */\n+  9.99267846280429861138827618560753763E-01Q, /* 3ffeffa008ff7006c000000000000000 */\n+  9.99298341980321608302162417203362565E-01Q, /* 3ffeffa4084381485c00000000000000 */\n+  9.99328838610882452808681364331278019E-01Q, /* 3ffeffa8078f911a1800000000000000 */\n+  9.99359336172140816367814863951934967E-01Q, /* 3ffeffac06e39f8bf400000000000000 */\n+  9.99389834664125092933417704443854745E-01Q, /* 3ffeffb0063facadec00000000000000 */\n+  9.99420334086863676459344674185558688E-01Q, /* 3ffeffb405a3b88ffc00000000000000 */\n+  9.99450834440384988655026177184481639E-01Q, /* 3ffeffb8050fc3422400000000000000 */\n+  9.99481335724717395718741386190231424E-01Q, /* 3ffeffbc0483ccd45c00000000000000 */\n+  9.99511837939889374871071936468069907E-01Q, /* 3ffeffc003ffd556ac00000000000000 */\n+  9.99542341085929264554721385138691403E-01Q, /* 3ffeffc40383dcd90800000000000000 */\n+  9.99572845162865514234695751838444266E-01Q, /* 3ffeffc8030fe36b7400000000000000 */\n+  9.99603350170726517864849824945849832E-01Q, /* 3ffeffcc02a3e91dec00000000000000 */\n+  9.99633856109540669399038392839429434E-01Q, /* 3ffeffd0023fee006c00000000000000 */\n+  9.99664362979336418302267475155531429E-01Q, /* 3ffeffd401e3f222f800000000000000 */\n+  9.99694870780142130772816244643763639E-01Q, /* 3ffeffd8018ff5958800000000000000 */\n+  9.99725379511986284031266336569387931E-01Q, /* 3ffeffdc0143f8682400000000000000 */\n+  9.99755889174897216520321308053098619E-01Q, /* 3ffeffe000fffaaac000000000000000 */\n+  9.99786399768903377704987178731244057E-01Q, /* 3ffeffe400c3fc6d6000000000000000 */\n+  9.99816911294033217050269968240172602E-01Q, /* 3ffeffe8008ffdc00800000000000000 */\n+  9.99847423750315072998873233700578567E-01Q, /* 3ffeffec0063feb2ac00000000000000 */\n+  9.99877937137777450526954226006637327E-01Q, /* 3ffefff0003fff555800000000000000 */\n+  9.99908451456448688077216502279043198E-01Q, /* 3ffefff40023ffb80000000000000000 */\n+  9.99938966706357262870241697783058044E-01Q, /* 3ffefff8000fffeaac00000000000000 */\n+  9.99969482887531541104308985268289689E-01Q, /* 3ffefffc0003fffd5400000000000000 */\n+#define T_EXPL_RES2 (T_EXPL_RES1 + 1 + 89 + 65)\n+  1.00000000000000000000000000000000000E+00Q, /* 3fff0000000000000000000000000000 */\n+  1.00003051804379100575559391472779680E+00Q, /* 3fff0002000200015400000000000000 */\n+  1.00006103701893306334724798034585547E+00Q, /* 3fff00040008000aac00000000000000 */\n+  1.00009155692545448346209013834595680E+00Q, /* 3fff0006001200240000000000000000 */\n+  1.00012207776338379883185325525118969E+00Q, /* 3fff0008002000555800000000000000 */\n+  1.00015259953274932014366527255333494E+00Q, /* 3fff000a003200a6ac00000000000000 */\n+  1.00018312223357958012925905677548144E+00Q, /* 3fff000c004801200400000000000000 */\n+  1.00021364586590294498691378066723701E+00Q, /* 3fff000e006201c95c00000000000000 */\n+  1.00024417042974783642605984823603649E+00Q, /* 3fff0010008002aab400000000000000 */\n+  1.00027469592514273166727889474714175E+00Q, /* 3fff001200a203cc1000000000000000 */\n+  1.00030522235211605242000132420798764E+00Q, /* 3fff001400c805357000000000000000 */\n+  1.00033574971069616488250630936818197E+00Q, /* 3fff001600f206eed000000000000000 */\n+  1.00036627800091160178652671675081365E+00Q, /* 3fff0018012009003800000000000000 */\n+  1.00039680722279067381919048784766346E+00Q, /* 3fff001a01520b71a000000000000000 */\n+  1.00042733737636191371223048918182030E+00Q, /* 3fff001c01880e4b1000000000000000 */\n+  1.00045786846165368766392589350289200E+00Q, /* 3fff001e01c211948400000000000000 */\n+  1.00048840047869447289485833607614040E+00Q, /* 3fff0020020015560000000000000000 */\n+  1.00051893342751269111445822090900037E+00Q, /* 3fff0022024219978400000000000000 */\n+  1.00054946730813676403215595200890675E+00Q, /* 3fff002402881e611000000000000000 */\n+  1.00058000212059516886853316464112140E+00Q, /* 3fff002602d223baa800000000000000 */\n+  1.00061053786491632733302026281307917E+00Q, /* 3fff0028032029ac4c00000000000000 */\n+  1.00064107454112866113504765053221490E+00Q, /* 3fff002a0372303dfc00000000000000 */\n+  1.00067161214926059198404573180596344E+00Q, /* 3fff002c03c83777b800000000000000 */\n+  1.00070215068934059710059614189958666E+00Q, /* 3fff002e04223f618400000000000000 */\n+  1.00073269016139709819412928482051939E+00Q, /* 3fff0030048048036000000000000000 */\n+  1.00076323056545857248522679583402351E+00Q, /* 3fff003204e251655000000000000000 */\n+  1.00079377190155338617216784768970683E+00Q, /* 3fff003405485b8f5000000000000000 */\n+  1.00082431416971007198668530691065826E+00Q, /* 3fff003605b266896800000000000000 */\n+  1.00085485736995705163820957750431262E+00Q, /* 3fff00380620725b9800000000000000 */\n+  1.00088540150232269132501983222027775E+00Q, /* 3fff003a06927f0ddc00000000000000 */\n+  1.00091594656683552377884893758164253E+00Q, /* 3fff003c07088ca83c00000000000000 */\n+  1.00094649256352402622027852885366883E+00Q, /* 3fff003e07829b32bc00000000000000 */\n+  1.00097703949241650933643654752813745E+00Q, /* 3fff00400800aab55400000000000000 */\n+  1.00100758735354156137020709138596430E+00Q, /* 3fff00420882bb381000000000000000 */\n+  1.00103813614692760403102056443458423E+00Q, /* 3fff00440908ccc2f000000000000000 */\n+  1.00106868587260300351715613942360505E+00Q, /* 3fff00460992df5df000000000000000 */\n+  1.00109923653059629256034668287611566E+00Q, /* 3fff00480a20f3111800000000000000 */\n+  1.00112978812093589287002259879955091E+00Q, /* 3fff004a0ab307e46800000000000000 */\n+  1.00116034064365022615561429120134562E+00Q, /* 3fff004c0b491ddfe000000000000000 */\n+  1.00119089409876788066000585786241572E+00Q, /* 3fff004e0be3350b8c00000000000000 */\n+  1.00122144848631711155917400901671499E+00Q, /* 3fff00500c814d6f6000000000000000 */\n+  1.00125200380632656260715407370298635E+00Q, /* 3fff00520d2367136c00000000000000 */\n+  1.00128256005882454449107399341301061E+00Q, /* 3fff00540dc981ffa800000000000000 */\n+  1.00131311724383964545381786592770368E+00Q, /* 3fff00560e739e3c2000000000000000 */\n+  1.00134367536140017618251363273884635E+00Q, /* 3fff00580f21bbd0cc00000000000000 */\n+  1.00137423441153472492004539162735455E+00Q, /* 3fff005a0fd3dac5b800000000000000 */\n+  1.00140479439427171337584354660066310E+00Q, /* 3fff005c1089fb22e400000000000000 */\n+  1.00143535530963956325933850166620687E+00Q, /* 3fff005e11441cf05000000000000000 */\n+  1.00146591715766680730226312334707472E+00Q, /* 3fff0060120240360400000000000000 */\n+  1.00149647993838186721404781565070152E+00Q, /* 3fff006212c464fc0000000000000000 */\n+  1.00152704365181316470412298258452211E+00Q, /* 3fff0064138a8b4a4400000000000000 */\n+  1.00155760829798923250422149067162536E+00Q, /* 3fff00661454b328d800000000000000 */\n+  1.00158817387693849232377374391944613E+00Q, /* 3fff00681522dc9fbc00000000000000 */\n+  1.00161874038868942138336137759324629E+00Q, /* 3fff006a15f507b6f400000000000000 */\n+  1.00164930783327055241471725821611471E+00Q, /* 3fff006c16cb34768800000000000000 */\n+  1.00167987621071025161612055853765924E+00Q, /* 3fff006e17a562e67400000000000000 */\n+  1.00171044552103705171930414508096874E+00Q, /* 3fff00701883930ec000000000000000 */\n+  1.00174101576427937443369842185347807E+00Q, /* 3fff00721965c4f76c00000000000000 */\n+  1.00177158694046569697988502412044909E+00Q, /* 3fff00741a4bf8a87c00000000000000 */\n+  1.00180215904962455208959681840497069E+00Q, /* 3fff00761b362e29f800000000000000 */\n+  1.00183273209178441698341543997230474E+00Q, /* 3fff00781c246583e400000000000000 */\n+  1.00186330606697365785962006157205906E+00Q, /* 3fff007a1d169ebe3c00000000000000 */\n+  1.00189388097522080744994354972732253E+00Q, /* 3fff007c1e0cd9e10800000000000000 */\n+  1.00192445681655439848611877096118405E+00Q, /* 3fff007e1f0716f45000000000000000 */\n+  1.00195503359100279716642489802325144E+00Q, /* 3fff0080200556001000000000000000 */\n+  1.00198561129859459173374602869444061E+00Q, /* 3fff00822107970c5400000000000000 */\n+};\n+\n+\n+\n+\f\n+\n+\n+\n+/* The basic design here is from\n+   Abraham Ziv, \"Fast Evaluation of Elementary Mathematical Functions with\n+   Correctly Rounded Last Bit\", ACM Trans. Math. Soft., 17 (3), September 1991,\n+   pp. 410-423.\n+\n+   We work with number pairs where the first number is the high part and\n+   the second one is the low part. Arithmetic with the high part numbers must\n+   be exact, without any roundoff errors.\n+\n+   The input value, X, is written as\n+   X = n * ln(2)_0 + arg1[t1]_0 + arg2[t2]_0 + x\n+       - n * ln(2)_1 + arg1[t1]_1 + arg2[t2]_1 + xl\n+\n+   where:\n+   - n is an integer, 16384 >= n >= -16495;\n+   - ln(2)_0 is the first 93 bits of ln(2), and |ln(2)_0-ln(2)-ln(2)_1| < 2^-205\n+   - t1 is an integer, 89 >= t1 >= -89\n+   - t2 is an integer, 65 >= t2 >= -65\n+   - |arg1[t1]-t1/256.0| < 2^-53\n+   - |arg2[t2]-t2/32768.0| < 2^-53\n+   - x + xl is whatever is left, |x + xl| < 2^-16 + 2^-53\n+\n+   Then e^x is approximated as\n+\n+   e^x = 2^n_1 ( 2^n_0 e^(arg1[t1]_0 + arg1[t1]_1) e^(arg2[t2]_0 + arg2[t2]_1)\n+\t       + 2^n_0 e^(arg1[t1]_0 + arg1[t1]_1) e^(arg2[t2]_0 + arg2[t2]_1)\n+\t\t * p (x + xl + n * ln(2)_1))\n+   where:\n+   - p(x) is a polynomial approximating e(x)-1\n+   - e^(arg1[t1]_0 + arg1[t1]_1) is obtained from a table\n+   - e^(arg2[t2]_0 + arg2[t2]_1) likewise\n+   - n_1 + n_0 = n, so that |n_0| < -LDBL_MIN_EXP-1.\n+\n+   If it happens that n_1 == 0 (this is the usual case), that multiplication\n+   is omitted.\n+   */\n+\n+\n+static const __float128 C[] = {\n+/* Smallest integer x for which e^x overflows.  */\n+#define himark C[0]\n+ 11356.523406294143949491931077970765Q,\n+ \n+/* Largest integer x for which e^x underflows.  */\n+#define lomark C[1]\n+-11433.4627433362978788372438434526231Q,\n+\n+/* 3x2^96 */\n+#define THREEp96 C[2]\n+ 59421121885698253195157962752.0Q,\n+\n+/* 3x2^103 */\n+#define THREEp103 C[3]\n+ 30423614405477505635920876929024.0Q,\n+\n+/* 3x2^111 */\n+#define THREEp111 C[4]\n+ 7788445287802241442795744493830144.0Q,\n+\n+/* 1/ln(2) */\n+#define M_1_LN2 C[5]\n+ 1.44269504088896340735992468100189204Q,\n+\n+/* first 93 bits of ln(2) */\n+#define M_LN2_0 C[6]\n+ 0.693147180559945309417232121457981864Q,\n+\n+/* ln2_0 - ln(2) */\n+#define M_LN2_1 C[7]\n+-1.94704509238074995158795957333327386E-31Q,\n+\n+/* very small number */\n+#define TINY C[8]\n+ 1.0e-4900Q,\n+\n+/* 2^16383 */\n+#define TWO16383 C[9]\n+ 5.94865747678615882542879663314003565E+4931Q,\n+\n+/* 256 */\n+#define TWO8 C[10]\n+ 256.0Q,\n+\n+/* 32768 */\n+#define TWO15 C[11]\n+ 32768.0Q,\n+\n+/* Chebyshev polynom coeficients for (exp(x)-1)/x */\n+#define P1 C[12]\n+#define P2 C[13]\n+#define P3 C[14]\n+#define P4 C[15]\n+#define P5 C[16]\n+#define P6 C[17]\n+ 0.5Q,\n+ 1.66666666666666666666666666666666683E-01Q,\n+ 4.16666666666666666666654902320001674E-02Q,\n+ 8.33333333333333333333314659767198461E-03Q,\n+ 1.38888888889899438565058018857254025E-03Q,\n+ 1.98412698413981650382436541785404286E-04Q,\n+};\n+\n+\n+__float128\n+expq (__float128 x)\n+{\n+  /* Check for usual case.  */\n+  if (__builtin_isless (x, himark) && __builtin_isgreater (x, lomark))\n+    {\n+      int tval1, tval2, unsafe, n_i;\n+      __float128 x22, n, t, result, xl;\n+      ieee854_float128 ex2_u, scale_u;\n+\n+      /* Calculate n.  */\n+      n = x * M_1_LN2 + THREEp111;\n+      n -= THREEp111;\n+      x = x - n * M_LN2_0;\n+      xl = n * M_LN2_1;\n+\n+      /* Calculate t/256.  */\n+      t = x + THREEp103;\n+      t -= THREEp103;\n+\n+      /* Compute tval1 = t.  */\n+      tval1 = (int) (t * TWO8);\n+\n+      x -= __expl_table[T_EXPL_ARG1+2*tval1];\n+      xl -= __expl_table[T_EXPL_ARG1+2*tval1+1];\n+\n+      /* Calculate t/32768.  */\n+      t = x + THREEp96;\n+      t -= THREEp96;\n+\n+      /* Compute tval2 = t.  */\n+      tval2 = (int) (t * TWO15);\n+\n+      x -= __expl_table[T_EXPL_ARG2+2*tval2];\n+      xl -= __expl_table[T_EXPL_ARG2+2*tval2+1];\n+\n+      x = x + xl;\n+\n+      /* Compute ex2 = 2^n_0 e^(argtable[tval1]) e^(argtable[tval2]).  */\n+      ex2_u.value = __expl_table[T_EXPL_RES1 + tval1]\n+\t\t* __expl_table[T_EXPL_RES2 + tval2];\n+      n_i = (int)n;\n+      /* 'unsafe' is 1 iff n_1 != 0.  */\n+      unsafe = abs(n_i) >= -FLT128_MIN_EXP - 1;\n+      ex2_u.ieee.exponent += n_i >> unsafe;\n+\n+      /* Compute scale = 2^n_1.  */\n+      scale_u.value = 1.0Q;\n+      scale_u.ieee.exponent += n_i - (n_i >> unsafe);\n+\n+      /* Approximate e^x2 - 1, using a seventh-degree polynomial,\n+\t with maximum error in [-2^-16-2^-53,2^-16+2^-53]\n+\t less than 4.8e-39.  */\n+      x22 = x + x*x*(P1+x*(P2+x*(P3+x*(P4+x*(P5+x*P6)))));\n+\n+      /* Return result.  */\n+      result = x22 * ex2_u.value + ex2_u.value;\n+\n+      /* Now we can test whether the result is ultimate or if we are unsure.\n+\t In the later case we should probably call a mpn based routine to give\n+\t the ultimate result.\n+\t Empirically, this routine is already ultimate in about 99.9986% of\n+\t cases, the test below for the round to nearest case will be false\n+\t in ~ 99.9963% of cases.\n+\t Without proc2 routine maximum error which has been seen is\n+\t 0.5000262 ulp.\n+\n+\t  union ieee854_long_double ex3_u;\n+\n+\t  ex3_u.d = (result - ex2_u.d) - x22 * ex2_u.d;\n+\t  ex2_u.d = result;\n+\t  ex3_u.ieee.exponent += LDBL_MANT_DIG + 15 + IEEE854_LONG_DOUBLE_BIAS\n+\t  \t\t\t - ex2_u.ieee.exponent;\n+\t  n_i = abs (ex3_u.d);\n+\t  n_i = (n_i + 1) / 2;\n+\t  if (!n_i) {\n+\t    return __ieee754_expl_proc2 (origx);\n+\t  }\n+       */\n+      if (!unsafe)\n+\treturn result;\n+      else\n+\treturn result * scale_u.value;\n+    }\n+  /* Exceptional cases:  */\n+  else if (__builtin_isless (x, himark))\n+    {\n+      if (isinfq (x))\n+\t/* e^-inf == 0, with no error.  */\n+\treturn 0;\n+      else\n+\t/* Underflow */\n+\treturn TINY * TINY;\n+    }\n+\n+  /* Return x, if x is a NaN or Inf; or overflow, otherwise.  */\n+  return TWO16383*x;\n+}"}, {"sha": "7ec2850feb72a0ada95513bcfd1135b673b6a398", "filename": "libquadmath/math/fabsq.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Ffabsq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Ffabsq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ffabsq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,25 @@\n+/* s_fabsl.c -- __float128 version of s_fabs.c.\n+ * Conversion to IEEE quad long double by Jakub Jelinek, jj@ultra.linux.cz.\n+ */\n+\n+/*\n+ * ====================================================\n+ * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n+ *\n+ * Developed at SunPro, a Sun Microsystems, Inc. business.\n+ * Permission to use, copy, modify, and distribute this\n+ * software is freely granted, provided that this notice\n+ * is preserved.\n+ * ====================================================\n+ */\n+\n+#include \"quadmath-imp.h\"\n+\n+__float128\n+fabsq (__float128 x)\n+{\n+  uint64_t hx;\n+  GET_FLT128_MSW64(hx,x);\n+  SET_FLT128_MSW64(x,hx&0x7fffffffffffffffLL);\n+  return x;\n+}"}, {"sha": "f22e9d7f20ebd36bcf4dd4f0b6ee690a7aa899c9", "filename": "libquadmath/math/finiteq.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Ffiniteq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Ffiniteq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ffiniteq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,25 @@\n+/* s_finitel.c -- long double version of s_finite.c.\n+ * Conversion to IEEE quad long double by Jakub Jelinek, jj@ultra.linux.cz.\n+ */\n+\n+/*\n+ * ====================================================\n+ * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n+ *\n+ * Developed at SunPro, a Sun Microsystems, Inc. business.\n+ * Permission to use, copy, modify, and distribute this\n+ * software is freely granted, provided that this notice\n+ * is preserved.\n+ * ====================================================\n+ */\n+\n+#include \"quadmath-imp.h\"\n+\n+int\n+finiteq (const __float128 x)\n+{\n+  int64_t hx;\n+  GET_FLT128_MSW64(hx,x);\n+  return (int)((uint64_t)((hx&0x7fffffffffffffffLL)\n+\t\t\t   -0x7fff000000000000LL)>>63);\n+}"}, {"sha": "781cf40e3cb746a05c280a29624612555d1a0dfe", "filename": "libquadmath/math/floorq.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Ffloorq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Ffloorq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ffloorq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,62 @@\n+/* s_floorl.c -- long double version of s_floor.c.\n+ * Conversion to IEEE quad long double by Jakub Jelinek, jj@ultra.linux.cz.\n+ */\n+\n+/*\n+ * ====================================================\n+ * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n+ *\n+ * Developed at SunPro, a Sun Microsystems, Inc. business.\n+ * Permission to use, copy, modify, and distribute this\n+ * software is freely granted, provided that this notice\n+ * is preserved.\n+ * ====================================================\n+ */\n+\n+#include \"quadmath-imp.h\"\n+\n+static const __float128 huge = 1.0e4930Q;\n+\n+__float128\n+floorq (__float128 x)\n+{\n+\tint64_t i0,i1,j0;\n+\tuint64_t i,j;\n+\tGET_FLT128_WORDS64(i0,i1,x);\n+\tj0 = ((i0>>48)&0x7fff)-0x3fff;\n+\tif(j0<48) {\n+\t    if(j0<0) { \t/* raise inexact if x != 0 */\n+\t\tif(huge+x>0.0) {/* return 0*sign(x) if |x|<1 */\n+\t\t    if(i0>=0) {i0=i1=0;}\n+\t\t    else if(((i0&0x7fffffffffffffffLL)|i1)!=0)\n+\t\t\t{ i0=0xbfff000000000000ULL;i1=0;}\n+\t\t}\n+\t    } else {\n+\t\ti = (0x0000ffffffffffffULL)>>j0;\n+\t\tif(((i0&i)|i1)==0) return x; /* x is integral */\n+\t\tif(huge+x>0.0) {\t/* raise inexact flag */\n+\t\t    if(i0<0) i0 += (0x0001000000000000LL)>>j0;\n+\t\t    i0 &= (~i); i1=0;\n+\t\t}\n+\t    }\n+\t} else if (j0>111) {\n+\t    if(j0==0x4000) return x+x;\t/* inf or NaN */\n+\t    else return x;\t\t/* x is integral */\n+\t} else {\n+\t    i = -1ULL>>(j0-48);\n+\t    if((i1&i)==0) return x;\t/* x is integral */\n+\t    if(huge+x>0.0) { \t\t/* raise inexact flag */\n+\t\tif(i0<0) {\n+\t\t    if(j0==48) i0+=1;\n+\t\t    else {\n+\t\t\tj = i1+(1LL<<(112-j0));\n+\t\t\tif(j<i1) i0 +=1 ; \t/* got a carry */\n+\t\t\ti1=j;\n+\t\t    }\n+\t\t}\n+\t\ti1 &= (~i);\n+\t    }\n+\t}\n+\tSET_FLT128_WORDS64(x,i0,i1);\n+\treturn x;\n+}"}, {"sha": "036e3dd531c4f09d139c31ae40d63c28b1e65bfa", "filename": "libquadmath/math/fmodq.c", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Ffmodq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Ffmodq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ffmodq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,129 @@\n+/* e_fmodl.c -- long double version of e_fmod.c.\n+ * Conversion to IEEE quad long double by Jakub Jelinek, jj@ultra.linux.cz.\n+ */\n+/*\n+ * ====================================================\n+ * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n+ *\n+ * Developed at SunPro, a Sun Microsystems, Inc. business.\n+ * Permission to use, copy, modify, and distribute this\n+ * software is freely granted, provided that this notice \n+ * is preserved.\n+ * ====================================================\n+ */\n+\n+/* \n+ * fmodq(x,y)\n+ * Return x mod y in exact arithmetic\n+ * Method: shift and subtract\n+ */\n+\n+#include \"quadmath-imp.h\"\n+\n+static const __float128 one = 1.0, Zero[] = {0.0, -0.0,};\n+\n+__float128\n+fmodq (__float128 x, __float128 y)\n+{\n+  int64_t n,hx,hy,hz,ix,iy,sx,i;\n+  uint64_t lx,ly,lz;\n+\n+  GET_FLT128_WORDS64(hx,lx,x);\n+  GET_FLT128_WORDS64(hy,ly,y);\n+  sx = hx&0x8000000000000000ULL;\t/* sign of x */\n+  hx ^=sx;\t\t\t\t/* |x| */\n+  hy &= 0x7fffffffffffffffLL;\t\t/* |y| */\n+\n+  /* purge off exception values */\n+  if((hy|ly)==0||(hx>=0x7fff000000000000LL)|| /* y=0,or x not finite */\n+    ((hy|((ly|-ly)>>63))>0x7fff000000000000LL))\t/* or y is NaN */\n+      return (x*y)/(x*y);\n+  if(hx<=hy) {\n+      if((hx<hy)||(lx<ly)) return x;\t/* |x|<|y| return x */\n+      if(lx==ly) \n+\t  return Zero[(uint64_t)sx>>63];\t/* |x|=|y| return x*0*/\n+  }\n+\n+  /* determine ix = ilogb(x) */\n+  if(hx<0x0001000000000000LL) {\t/* subnormal x */\n+      if(hx==0) {\n+\t  for (ix = -16431, i=lx; i>0; i<<=1) ix -=1;\n+      } else {\n+\t  for (ix = -16382, i=hx<<15; i>0; i<<=1) ix -=1;\n+      }\n+  } else ix = (hx>>48)-0x3fff;\n+\n+  /* determine iy = ilogb(y) */\n+      if(hy<0x0001000000000000LL) {\t/* subnormal y */\n+\t  if(hy==0) {\n+\t      for (iy = -16431, i=ly; i>0; i<<=1) iy -=1;\n+\t  } else {\n+\t      for (iy = -16382, i=hy<<15; i>0; i<<=1) iy -=1;\n+\t  }\n+      } else iy = (hy>>48)-0x3fff;\n+\n+  /* set up {hx,lx}, {hy,ly} and align y to x */\n+      if(ix >= -16382) \n+\t  hx = 0x0001000000000000LL|(0x0000ffffffffffffLL&hx);\n+      else {\t\t/* subnormal x, shift x to normal */\n+\t  n = -16382-ix;\n+\t  if(n<=63) {\n+\t      hx = (hx<<n)|(lx>>(64-n));\n+\t      lx <<= n;\n+\t  } else {\n+\t      hx = lx<<(n-64);\n+\t      lx = 0;\n+\t  }\n+      }\n+      if(iy >= -16382) \n+\t  hy = 0x0001000000000000LL|(0x0000ffffffffffffLL&hy);\n+      else {\t\t/* subnormal y, shift y to normal */\n+\t  n = -16382-iy;\n+\t  if(n<=63) {\n+\t      hy = (hy<<n)|(ly>>(64-n));\n+\t      ly <<= n;\n+\t  } else {\n+\t      hy = ly<<(n-64);\n+\t      ly = 0;\n+\t  }\n+      }\n+\n+  /* fix point fmod */\n+      n = ix - iy;\n+      while(n--) {\n+\t  hz=hx-hy;lz=lx-ly; if(lx<ly) hz -= 1;\n+\t  if(hz<0){hx = hx+hx+(lx>>63); lx = lx+lx;}\n+\t  else {\n+\t      if((hz|lz)==0) \t\t/* return sign(x)*0 */\n+\t\t  return Zero[(uint64_t)sx>>63];\n+\t      hx = hz+hz+(lz>>63); lx = lz+lz;\n+\t  }\n+      }\n+      hz=hx-hy;lz=lx-ly; if(lx<ly) hz -= 1;\n+      if(hz>=0) {hx=hz;lx=lz;}\n+\n+  /* convert back to floating value and restore the sign */\n+      if((hx|lx)==0) \t\t\t/* return sign(x)*0 */\n+\t  return Zero[(uint64_t)sx>>63];\t\n+      while(hx<0x0001000000000000LL) {\t/* normalize x */\n+\t  hx = hx+hx+(lx>>63); lx = lx+lx;\n+\t  iy -= 1;\n+      }\n+      if(iy>= -16382) {\t/* normalize output */\n+\t  hx = ((hx-0x0001000000000000LL)|((iy+16383)<<48));\n+\t  SET_FLT128_WORDS64(x,hx|sx,lx);\n+      } else {\t\t/* subnormal output */\n+\t  n = -16382 - iy;\n+\t  if(n<=48) {\n+\t      lx = (lx>>n)|((uint64_t)hx<<(64-n));\n+\t      hx >>= n;\n+\t  } else if (n<=63) {\n+\t      lx = (hx<<(64-n))|(lx>>n); hx = sx;\n+\t  } else {\n+\t      lx = hx>>(n-64); hx = sx;\n+\t  }\n+\t  SET_FLT128_WORDS64(x,hx|sx,lx);\n+\t  x *= one;\t\t/* create necessary signal */\n+      }\n+      return x;\t\t/* exact output */\n+}"}, {"sha": "fa3d7836d06a46233a8f609da94c2f1a1d94b910", "filename": "libquadmath/math/frexpq.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Ffrexpq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Ffrexpq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ffrexpq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,49 @@\n+/* s_frexpl.c -- long double version of s_frexp.c.\n+ * Conversion to IEEE quad long double by Jakub Jelinek, jj@ultra.linux.cz.\n+ */\n+\n+/*\n+ * ====================================================\n+ * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n+ *\n+ * Developed at SunPro, a Sun Microsystems, Inc. business.\n+ * Permission to use, copy, modify, and distribute this\n+ * software is freely granted, provided that this notice\n+ * is preserved.\n+ * ====================================================\n+ */\n+\n+/*\n+ * for non-zero x\n+ *\tx = frexpq(arg,&exp);\n+ * return a __float128 fp quantity x such that 0.5 <= |x| <1.0\n+ * and the corresponding binary exponent \"exp\". That is\n+ *\targ = x*2^exp.\n+ * If arg is inf, 0.0, or NaN, then frexpq(arg,&exp) returns arg\n+ * with *exp=0.\n+ */\n+\n+#include \"quadmath-imp.h\"\n+\n+static const __float128\n+two114 = 2.0769187434139310514121985316880384E+34Q; /* 0x4071000000000000, 0 */\n+\n+__float128\n+frexpq (__float128 x, int *eptr)\n+{\n+  uint64_t hx, lx, ix;\n+  GET_FLT128_WORDS64(hx,lx,x);\n+  ix = 0x7fffffffffffffffULL&hx;\n+  *eptr = 0;\n+  if(ix>=0x7fff000000000000ULL||((ix|lx)==0)) return x;\t/* 0,inf,nan */\n+  if (ix<0x0001000000000000ULL) {\t\t/* subnormal */\n+    x *= two114;\n+    GET_FLT128_MSW64(hx,x);\n+    ix = hx&0x7fffffffffffffffULL;\n+    *eptr = -114;\n+  }\n+  *eptr += (ix>>48)-16382;\n+  hx = (hx&0x8000ffffffffffffULL) | 0x3ffe000000000000ULL;\n+  SET_FLT128_MSW64(x,hx);\n+  return x;\n+}"}, {"sha": "e4c2d1bc214942a987fc45272735f8b8408c68a4", "filename": "libquadmath/math/hypotq.c", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fhypotq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fhypotq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fhypotq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,124 @@\n+/*\n+ * ====================================================\n+ * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n+ *\n+ * Developed at SunPro, a Sun Microsystems, Inc. business.\n+ * Permission to use, copy, modify, and distribute this\n+ * software is freely granted, provided that this notice\n+ * is preserved.\n+ * ====================================================\n+ */\n+\n+/* From e_hypotl.c -- long double version of e_hypot.c.\n+ * Conversion to long double by Jakub Jelinek, jakub@redhat.com.\n+ * Conversion to __float128 by FX Coudert, fxcoudert@gcc.gnu.org.\n+ */\n+\n+/* hypotq(x,y)\n+ *\n+ * Method :\n+ *\tIf (assume round-to-nearest) z=x*x+y*y\n+ *\thas error less than sqrtl(2)/2 ulp, than\n+ *\tsqrtl(z) has error less than 1 ulp (exercise).\n+ *\n+ *\tSo, compute sqrtl(x*x+y*y) with some care as\n+ *\tfollows to get the error below 1 ulp:\n+ *\n+ *\tAssume x>y>0;\n+ *\t(if possible, set rounding to round-to-nearest)\n+ *\t1. if x > 2y  use\n+ *\t\tx1*x1+(y*y+(x2*(x+x1))) for x*x+y*y\n+ *\twhere x1 = x with lower 64 bits cleared, x2 = x-x1; else\n+ *\t2. if x <= 2y use\n+ *\t\tt1*y1+((x-y)*(x-y)+(t1*y2+t2*y))\n+ *\twhere t1 = 2x with lower 64 bits cleared, t2 = 2x-t1,\n+ *\ty1= y with lower 64 bits chopped, y2 = y-y1.\n+ *\n+ *\tNOTE: scaling may be necessary if some argument is too\n+ *\t      large or too tiny\n+ *\n+ * Special cases:\n+ *\thypotq(x,y) is INF if x or y is +INF or -INF; else\n+ *\thypotq(x,y) is NAN if x or y is NAN.\n+ *\n+ * Accuracy:\n+ * \thypotq(x,y) returns sqrtl(x^2+y^2) with error less\n+ * \tthan 1 ulps (units in the last place)\n+ */\n+\n+#include \"quadmath-imp.h\"\n+\n+__float128\n+hypotq (__float128 x, __float128 y)\n+{\n+  __float128 a, b, t1, t2, y1, y2, w;\n+  int64_t j, k, ha, hb;\n+\n+  GET_FLT128_MSW64(ha,x);\n+  ha &= 0x7fffffffffffffffLL;\n+  GET_FLT128_MSW64(hb,y);\n+  hb &= 0x7fffffffffffffffLL;\n+  if(hb > ha) {a=y;b=x;j=ha; ha=hb;hb=j;} else {a=x;b=y;}\n+  SET_FLT128_MSW64(a,ha);\t/* a <- |a| */\n+  SET_FLT128_MSW64(b,hb);\t/* b <- |b| */\n+  if((ha-hb)>0x78000000000000LL) {return a+b;} /* x/y > 2**120 */\n+  k=0;\n+  if(ha > 0x5f3f000000000000LL) {\t/* a>2**8000 */\n+     if(ha >= 0x7fff000000000000LL) {\t/* Inf or NaN */\n+         uint64_t low;\n+         w = a+b;\t\t\t/* for sNaN */\n+         GET_FLT128_LSW64(low,a);\n+         if(((ha&0xffffffffffffLL)|low)==0) w = a;\n+         GET_FLT128_LSW64(low,b);\n+         if(((hb^0x7fff000000000000LL)|low)==0) w = b;\n+         return w;\n+     }\n+     /* scale a and b by 2**-9600 */\n+     ha -= 0x2580000000000000LL;\n+     hb -= 0x2580000000000000LL;\tk += 9600;\n+     SET_FLT128_MSW64(a,ha);\n+     SET_FLT128_MSW64(b,hb);\n+  }\n+  if(hb < 0x20bf000000000000LL) {\t/* b < 2**-8000 */\n+      if(hb <= 0x0000ffffffffffffLL) {\t/* subnormal b or 0 */\n+          uint64_t low;\n+  \tGET_FLT128_LSW64(low,b);\n+  \tif((hb|low)==0) return a;\n+  \tt1=0;\n+  \tSET_FLT128_MSW64(t1,0x7ffd000000000000LL); /* t1=2^16382 */\n+  \tb *= t1;\n+  \ta *= t1;\n+  \tk -= 16382;\n+      } else {\t\t/* scale a and b by 2^9600 */\n+          ha += 0x2580000000000000LL; \t/* a *= 2^9600 */\n+  \thb += 0x2580000000000000LL;\t/* b *= 2^9600 */\n+  \tk -= 9600;\n+  \tSET_FLT128_MSW64(a,ha);\n+  \tSET_FLT128_MSW64(b,hb);\n+      }\n+  }\n+    /* medium size a and b */\n+  w = a-b;\n+  if (w>b) {\n+      t1 = 0;\n+      SET_FLT128_MSW64(t1,ha);\n+      t2 = a-t1;\n+      w  = sqrtq(t1*t1-(b*(-b)-t2*(a+t1)));\n+  } else {\n+      a  = a+a;\n+      y1 = 0;\n+      SET_FLT128_MSW64(y1,hb);\n+      y2 = b - y1;\n+      t1 = 0;\n+      SET_FLT128_MSW64(t1,ha+0x0001000000000000LL);\n+      t2 = a - t1;\n+      w  = sqrtq(t1*y1-(w*(-w)-(t1*y2+t2*b)));\n+  }\n+  if(k!=0) {\n+      uint64_t high;\n+      t1 = 1.0L;\n+      GET_FLT128_MSW64(high,t1);\n+      SET_FLT128_MSW64(t1,high+(k<<48));\n+      return t1*w;\n+  } else return w;\n+}"}, {"sha": "46996b54c3dc8dc8e94bcceb324463bafa2e11a9", "filename": "libquadmath/math/isinfq.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fisinfq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fisinfq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fisinfq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,17 @@\n+/*\n+ * Written by J.T. Conklin <jtc@netbsd.org>.\n+ * Change for long double by Jakub Jelinek <jj@ultra.linux.cz>\n+ * Public domain.\n+ */\n+\n+#include \"quadmath-imp.h\"\n+\n+int\n+isinfq (__float128 x)\n+{\n+  int64_t hx,lx;\n+  GET_FLT128_WORDS64(hx,lx,x);\n+  lx |= (hx & 0x7fffffffffffffffLL) ^ 0x7fff000000000000LL;\n+  lx |= -lx;\n+  return ~(lx >> 63) & (hx >> 62);\n+}"}, {"sha": "ab9df1658c89877ab539f66b6b0af7f01c453ad3", "filename": "libquadmath/math/isnanq.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fisnanq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fisnanq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fisnanq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,27 @@\n+/* s_isnanl.c -- long double version of s_isnan.c.\n+ * Conversion to long double by Jakub Jelinek, jj@ultra.linux.cz.\n+ */\n+\n+/*\n+ * ====================================================\n+ * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n+ *\n+ * Developed at SunPro, a Sun Microsystems, Inc. business.\n+ * Permission to use, copy, modify, and distribute this\n+ * software is freely granted, provided that this notice\n+ * is preserved.\n+ * ====================================================\n+ */\n+\n+#include \"quadmath-imp.h\"\n+\n+int\n+isnanq (const __float128 x)\n+{\n+  int64_t hx,lx;\n+  GET_FLT128_WORDS64(hx,lx,x);\n+  hx &= 0x7fffffffffffffffLL;\n+  hx |= (uint64_t)(lx|(-lx))>>63;\n+  hx = 0x7fff000000000000LL - hx;\n+  return (int)((uint64_t)hx>>63);\n+}"}, {"sha": "fecbe627746825e68342e467b2453b2438711ec9", "filename": "libquadmath/math/j0q.c", "status": "added", "additions": 919, "deletions": 0, "changes": 919, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fj0q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fj0q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fj0q.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,919 @@\n+/*\t\t\t\t\t\t\tj0l.c\n+ *\n+ *\tBessel function of order zero\n+ *\n+ *\n+ *\n+ * SYNOPSIS:\n+ *\n+ * long double x, y, j0l();\n+ *\n+ * y = j0l( x );\n+ *\n+ *\n+ *\n+ * DESCRIPTION:\n+ *\n+ * Returns Bessel function of first kind, order zero of the argument.\n+ *\n+ * The domain is divided into two major intervals [0, 2] and\n+ * (2, infinity). In the first interval the rational approximation\n+ * is J0(x) = 1 - x^2 / 4 + x^4 R(x^2)\n+ * The second interval is further partitioned into eight equal segments\n+ * of 1/x.\n+ *\n+ * J0(x) = sqrt(2/(pi x)) (P0(x) cos(X) - Q0(x) sin(X)),\n+ * X = x - pi/4,\n+ *\n+ * and the auxiliary functions are given by\n+ *\n+ * J0(x)cos(X) + Y0(x)sin(X) = sqrt( 2/(pi x)) P0(x),\n+ * P0(x) = 1 + 1/x^2 R(1/x^2)\n+ *\n+ * Y0(x)cos(X) - J0(x)sin(X) = sqrt( 2/(pi x)) Q0(x),\n+ * Q0(x) = 1/x (-.125 + 1/x^2 R(1/x^2))\n+ *\n+ *\n+ *\n+ * ACCURACY:\n+ *\n+ *                      Absolute error:\n+ * arithmetic   domain      # trials      peak         rms\n+ *    IEEE      0, 30       100000      1.7e-34      2.4e-35\n+ *\n+ *\n+ */\n+\n+/*\t\t\t\t\t\t\ty0l.c\n+ *\n+ *\tBessel function of the second kind, order zero\n+ *\n+ *\n+ *\n+ * SYNOPSIS:\n+ *\n+ * double x, y, y0l();\n+ *\n+ * y = y0l( x );\n+ *\n+ *\n+ *\n+ * DESCRIPTION:\n+ *\n+ * Returns Bessel function of the second kind, of order\n+ * zero, of the argument.\n+ *\n+ * The approximation is the same as for J0(x), and\n+ * Y0(x) = sqrt(2/(pi x)) (P0(x) sin(X) + Q0(x) cos(X)).\n+ *\n+ * ACCURACY:\n+ *\n+ *  Absolute error, when y0(x) < 1; else relative error:\n+ *\n+ * arithmetic   domain     # trials      peak         rms\n+ *    IEEE      0, 30       100000      3.0e-34     2.7e-35\n+ *\n+ */\n+\n+/* Copyright 2001 by Stephen L. Moshier (moshier@na-net.ornl.gov).\n+\n+    This library is free software; you can redistribute it and/or\n+    modify it under the terms of the GNU Lesser General Public\n+    License as published by the Free Software Foundation; either\n+    version 2.1 of the License, or (at your option) any later version.\n+\n+    This library is distributed in the hope that it will be useful,\n+    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+    Lesser General Public License for more details.\n+\n+    You should have received a copy of the GNU Lesser General Public\n+    License along with this library; if not, write to the Free Software\n+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA */\n+\n+#include \"quadmath-imp.h\"\n+\n+/* 1 / sqrt(pi) */\n+static const __float128 ONEOSQPI = 5.6418958354775628694807945156077258584405E-1Q;\n+/* 2 / pi */\n+static const __float128 TWOOPI = 6.3661977236758134307553505349005744813784E-1Q;\n+static const __float128 zero = 0.0Q;\n+\n+/* J0(x) = 1 - x^2/4 + x^2 x^2 R(x^2)\n+   Peak relative error 3.4e-37\n+   0 <= x <= 2  */\n+#define NJ0_2N 6\n+static const __float128 J0_2N[NJ0_2N + 1] = {\n+  3.133239376997663645548490085151484674892E16Q,\n+ -5.479944965767990821079467311839107722107E14Q,\n+  6.290828903904724265980249871997551894090E12Q,\n+ -3.633750176832769659849028554429106299915E10Q,\n+  1.207743757532429576399485415069244807022E8Q,\n+ -2.107485999925074577174305650549367415465E5Q,\n+  1.562826808020631846245296572935547005859E2Q,\n+};\n+#define NJ0_2D 6\n+static const __float128 J0_2D[NJ0_2D + 1] = {\n+  2.005273201278504733151033654496928968261E18Q,\n+  2.063038558793221244373123294054149790864E16Q,\n+  1.053350447931127971406896594022010524994E14Q,\n+  3.496556557558702583143527876385508882310E11Q,\n+  8.249114511878616075860654484367133976306E8Q,\n+  1.402965782449571800199759247964242790589E6Q,\n+  1.619910762853439600957801751815074787351E3Q,\n+ /* 1.000000000000000000000000000000000000000E0 */\n+};\n+\n+/* J0(x)cosX + Y0(x)sinX = sqrt( 2/(pi x)) P0(x), P0(x) = 1 + 1/x^2 R(1/x^2),\n+   0 <= 1/x <= .0625\n+   Peak relative error 3.3e-36  */\n+#define NP16_IN 9\n+static const __float128 P16_IN[NP16_IN + 1] = {\n+  -1.901689868258117463979611259731176301065E-16Q,\n+  -1.798743043824071514483008340803573980931E-13Q,\n+  -6.481746687115262291873324132944647438959E-11Q,\n+  -1.150651553745409037257197798528294248012E-8Q,\n+  -1.088408467297401082271185599507222695995E-6Q,\n+  -5.551996725183495852661022587879817546508E-5Q,\n+  -1.477286941214245433866838787454880214736E-3Q,\n+  -1.882877976157714592017345347609200402472E-2Q,\n+  -9.620983176855405325086530374317855880515E-2Q,\n+  -1.271468546258855781530458854476627766233E-1Q,\n+};\n+#define NP16_ID 9\n+static const __float128 P16_ID[NP16_ID + 1] = {\n+  2.704625590411544837659891569420764475007E-15Q,\n+  2.562526347676857624104306349421985403573E-12Q,\n+  9.259137589952741054108665570122085036246E-10Q,\n+  1.651044705794378365237454962653430805272E-7Q,\n+  1.573561544138733044977714063100859136660E-5Q,\n+  8.134482112334882274688298469629884804056E-4Q,\n+  2.219259239404080863919375103673593571689E-2Q,\n+  2.976990606226596289580242451096393862792E-1Q,\n+  1.713895630454693931742734911930937246254E0Q,\n+  3.231552290717904041465898249160757368855E0Q,\n+  /* 1.000000000000000000000000000000000000000E0 */\n+};\n+\n+/* J0(x)cosX + Y0(x)sinX = sqrt( 2/(pi x)) P0(x), P0(x) = 1 + 1/x^2 R(1/x^2)\n+    0.0625 <= 1/x <= 0.125\n+    Peak relative error 2.4e-35  */\n+#define NP8_16N 10\n+static const __float128 P8_16N[NP8_16N + 1] = {\n+  -2.335166846111159458466553806683579003632E-15Q,\n+  -1.382763674252402720401020004169367089975E-12Q,\n+  -3.192160804534716696058987967592784857907E-10Q,\n+  -3.744199606283752333686144670572632116899E-8Q,\n+  -2.439161236879511162078619292571922772224E-6Q,\n+  -9.068436986859420951664151060267045346549E-5Q,\n+  -1.905407090637058116299757292660002697359E-3Q,\n+  -2.164456143936718388053842376884252978872E-2Q,\n+  -1.212178415116411222341491717748696499966E-1Q,\n+  -2.782433626588541494473277445959593334494E-1Q,\n+  -1.670703190068873186016102289227646035035E-1Q,\n+};\n+#define NP8_16D 10\n+static const __float128 P8_16D[NP8_16D + 1] = {\n+  3.321126181135871232648331450082662856743E-14Q,\n+  1.971894594837650840586859228510007703641E-11Q,\n+  4.571144364787008285981633719513897281690E-9Q,\n+  5.396419143536287457142904742849052402103E-7Q,\n+  3.551548222385845912370226756036899901549E-5Q,\n+  1.342353874566932014705609788054598013516E-3Q,\n+  2.899133293006771317589357444614157734385E-2Q,\n+  3.455374978185770197704507681491574261545E-1Q,\n+  2.116616964297512311314454834712634820514E0Q,\n+  5.850768316827915470087758636881584174432E0Q,\n+  5.655273858938766830855753983631132928968E0Q,\n+  /* 1.000000000000000000000000000000000000000E0 */\n+};\n+\n+/* J0(x)cosX + Y0(x)sinX = sqrt( 2/(pi x)) P0(x), P0(x) = 1 + 1/x^2 R(1/x^2)\n+  0.125 <= 1/x <= 0.1875\n+  Peak relative error 2.7e-35  */\n+#define NP5_8N 10\n+static const __float128 P5_8N[NP5_8N + 1] = {\n+  -1.270478335089770355749591358934012019596E-12Q,\n+  -4.007588712145412921057254992155810347245E-10Q,\n+  -4.815187822989597568124520080486652009281E-8Q,\n+  -2.867070063972764880024598300408284868021E-6Q,\n+  -9.218742195161302204046454768106063638006E-5Q,\n+  -1.635746821447052827526320629828043529997E-3Q,\n+  -1.570376886640308408247709616497261011707E-2Q,\n+  -7.656484795303305596941813361786219477807E-2Q,\n+  -1.659371030767513274944805479908858628053E-1Q,\n+  -1.185340550030955660015841796219919804915E-1Q,\n+  -8.920026499909994671248893388013790366712E-3Q,\n+};\n+#define NP5_8D 9\n+static const __float128 P5_8D[NP5_8D + 1] = {\n+  1.806902521016705225778045904631543990314E-11Q,\n+  5.728502760243502431663549179135868966031E-9Q,\n+  6.938168504826004255287618819550667978450E-7Q,\n+  4.183769964807453250763325026573037785902E-5Q,\n+  1.372660678476925468014882230851637878587E-3Q,\n+  2.516452105242920335873286419212708961771E-2Q,\n+  2.550502712902647803796267951846557316182E-1Q,\n+  1.365861559418983216913629123778747617072E0Q,\n+  3.523825618308783966723472468855042541407E0Q,\n+  3.656365803506136165615111349150536282434E0Q,\n+  /* 1.000000000000000000000000000000000000000E0 */\n+};\n+\n+/* J0(x)cosX + Y0(x)sinX = sqrt( 2/(pi x)) P0(x), P0(x) = 1 + 1/x^2 R(1/x^2)\n+   Peak relative error 3.5e-35\n+   0.1875 <= 1/x <= 0.25  */\n+#define NP4_5N 9\n+static const __float128 P4_5N[NP4_5N + 1] = {\n+  -9.791405771694098960254468859195175708252E-10Q,\n+  -1.917193059944531970421626610188102836352E-7Q,\n+  -1.393597539508855262243816152893982002084E-5Q,\n+  -4.881863490846771259880606911667479860077E-4Q,\n+  -8.946571245022470127331892085881699269853E-3Q,\n+  -8.707474232568097513415336886103899434251E-2Q,\n+  -4.362042697474650737898551272505525973766E-1Q,\n+  -1.032712171267523975431451359962375617386E0Q,\n+  -9.630502683169895107062182070514713702346E-1Q,\n+  -2.251804386252969656586810309252357233320E-1Q,\n+};\n+#define NP4_5D 9\n+static const __float128 P4_5D[NP4_5D + 1] = {\n+  1.392555487577717669739688337895791213139E-8Q,\n+  2.748886559120659027172816051276451376854E-6Q,\n+  2.024717710644378047477189849678576659290E-4Q,\n+  7.244868609350416002930624752604670292469E-3Q,\n+  1.373631762292244371102989739300382152416E-1Q,\n+  1.412298581400224267910294815260613240668E0Q,\n+  7.742495637843445079276397723849017617210E0Q,\n+  2.138429269198406512028307045259503811861E1Q,\n+  2.651547684548423476506826951831712762610E1Q,\n+  1.167499382465291931571685222882909166935E1Q,\n+  /* 1.000000000000000000000000000000000000000E0 */\n+};\n+\n+/* J0(x)cosX + Y0(x)sinX = sqrt( 2/(pi x)) P0(x), P0(x) = 1 + 1/x^2 R(1/x^2)\n+   Peak relative error 2.3e-36\n+   0.25 <= 1/x <= 0.3125  */\n+#define NP3r2_4N 9\n+static const __float128 P3r2_4N[NP3r2_4N + 1] = {\n+  -2.589155123706348361249809342508270121788E-8Q,\n+  -3.746254369796115441118148490849195516593E-6Q,\n+  -1.985595497390808544622893738135529701062E-4Q,\n+  -5.008253705202932091290132760394976551426E-3Q,\n+  -6.529469780539591572179155511840853077232E-2Q,\n+  -4.468736064761814602927408833818990271514E-1Q,\n+  -1.556391252586395038089729428444444823380E0Q,\n+  -2.533135309840530224072920725976994981638E0Q,\n+  -1.605509621731068453869408718565392869560E0Q,\n+  -2.518966692256192789269859830255724429375E-1Q,\n+};\n+#define NP3r2_4D 9\n+static const __float128 P3r2_4D[NP3r2_4D + 1] = {\n+  3.682353957237979993646169732962573930237E-7Q,\n+  5.386741661883067824698973455566332102029E-5Q,\n+  2.906881154171822780345134853794241037053E-3Q,\n+  7.545832595801289519475806339863492074126E-2Q,\n+  1.029405357245594877344360389469584526654E0Q,\n+  7.565706120589873131187989560509757626725E0Q,\n+  2.951172890699569545357692207898667665796E1Q,\n+  5.785723537170311456298467310529815457536E1Q,\n+  5.095621464598267889126015412522773474467E1Q,\n+  1.602958484169953109437547474953308401442E1Q,\n+  /* 1.000000000000000000000000000000000000000E0 */\n+};\n+\n+/* J0(x)cosX + Y0(x)sinX = sqrt( 2/(pi x)) P0(x), P0(x) = 1 + 1/x^2 R(1/x^2)\n+   Peak relative error 1.0e-35\n+   0.3125 <= 1/x <= 0.375  */\n+#define NP2r7_3r2N 9\n+static const __float128 P2r7_3r2N[NP2r7_3r2N + 1] = {\n+  -1.917322340814391131073820537027234322550E-7Q,\n+  -1.966595744473227183846019639723259011906E-5Q,\n+  -7.177081163619679403212623526632690465290E-4Q,\n+  -1.206467373860974695661544653741899755695E-2Q,\n+  -1.008656452188539812154551482286328107316E-1Q,\n+  -4.216016116408810856620947307438823892707E-1Q,\n+  -8.378631013025721741744285026537009814161E-1Q,\n+  -6.973895635309960850033762745957946272579E-1Q,\n+  -1.797864718878320770670740413285763554812E-1Q,\n+  -4.098025357743657347681137871388402849581E-3Q,\n+};\n+#define NP2r7_3r2D 8\n+static const __float128 P2r7_3r2D[NP2r7_3r2D + 1] = {\n+  2.726858489303036441686496086962545034018E-6Q,\n+  2.840430827557109238386808968234848081424E-4Q,\n+  1.063826772041781947891481054529454088832E-2Q,\n+  1.864775537138364773178044431045514405468E-1Q,\n+  1.665660052857205170440952607701728254211E0Q,\n+  7.723745889544331153080842168958348568395E0Q,\n+  1.810726427571829798856428548102077799835E1Q,\n+  1.986460672157794440666187503833545388527E1Q,\n+  8.645503204552282306364296517220055815488E0Q,\n+  /* 1.000000000000000000000000000000000000000E0 */\n+};\n+\n+/* J0(x)cosX + Y0(x)sinX = sqrt( 2/(pi x)) P0(x), P0(x) = 1 + 1/x^2 R(1/x^2)\n+   Peak relative error 1.3e-36\n+   0.3125 <= 1/x <= 0.4375  */\n+#define NP2r3_2r7N 9\n+static const __float128 P2r3_2r7N[NP2r3_2r7N + 1] = {\n+  -1.594642785584856746358609622003310312622E-6Q,\n+  -1.323238196302221554194031733595194539794E-4Q,\n+  -3.856087818696874802689922536987100372345E-3Q,\n+  -5.113241710697777193011470733601522047399E-2Q,\n+  -3.334229537209911914449990372942022350558E-1Q,\n+  -1.075703518198127096179198549659283422832E0Q,\n+  -1.634174803414062725476343124267110981807E0Q,\n+  -1.030133247434119595616826842367268304880E0Q,\n+  -1.989811539080358501229347481000707289391E-1Q,\n+  -3.246859189246653459359775001466924610236E-3Q,\n+};\n+#define NP2r3_2r7D 8\n+static const __float128 P2r3_2r7D[NP2r3_2r7D + 1] = {\n+  2.267936634217251403663034189684284173018E-5Q,\n+  1.918112982168673386858072491437971732237E-3Q,\n+  5.771704085468423159125856786653868219522E-2Q,\n+  8.056124451167969333717642810661498890507E-1Q,\n+  5.687897967531010276788680634413789328776E0Q,\n+  2.072596760717695491085444438270778394421E1Q,\n+  3.801722099819929988585197088613160496684E1Q,\n+  3.254620235902912339534998592085115836829E1Q,\n+  1.104847772130720331801884344645060675036E1Q,\n+  /* 1.000000000000000000000000000000000000000E0 */\n+};\n+\n+/* J0(x)cosX + Y0(x)sinX = sqrt( 2/(pi x)) P0(x), P0(x) = 1 + 1/x^2 R(1/x^2)\n+   Peak relative error 1.2e-35\n+   0.4375 <= 1/x <= 0.5  */\n+#define NP2_2r3N 8\n+static const __float128 P2_2r3N[NP2_2r3N + 1] = {\n+  -1.001042324337684297465071506097365389123E-4Q,\n+  -6.289034524673365824853547252689991418981E-3Q,\n+  -1.346527918018624234373664526930736205806E-1Q,\n+  -1.268808313614288355444506172560463315102E0Q,\n+  -5.654126123607146048354132115649177406163E0Q,\n+  -1.186649511267312652171775803270911971693E1Q,\n+  -1.094032424931998612551588246779200724257E1Q,\n+  -3.728792136814520055025256353193674625267E0Q,\n+  -3.000348318524471807839934764596331810608E-1Q,\n+};\n+#define NP2_2r3D 8\n+static const __float128 P2_2r3D[NP2_2r3D + 1] = {\n+  1.423705538269770974803901422532055612980E-3Q,\n+  9.171476630091439978533535167485230575894E-2Q,\n+  2.049776318166637248868444600215942828537E0Q,\n+  2.068970329743769804547326701946144899583E1Q,\n+  1.025103500560831035592731539565060347709E2Q,\n+  2.528088049697570728252145557167066708284E2Q,\n+  2.992160327587558573740271294804830114205E2Q,\n+  1.540193761146551025832707739468679973036E2Q,\n+  2.779516701986912132637672140709452502650E1Q,\n+  /* 1.000000000000000000000000000000000000000E0 */\n+};\n+\n+/* Y0(x)cosX - J0(x)sinX = sqrt( 2/(pi x)) Q0(x),\n+   Q0(x) = 1/x (-.125 + 1/x^2 R(1/x^2))\n+   Peak relative error 2.2e-35\n+   0 <= 1/x <= .0625  */\n+#define NQ16_IN 10\n+static const __float128 Q16_IN[NQ16_IN + 1] = {\n+  2.343640834407975740545326632205999437469E-18Q,\n+  2.667978112927811452221176781536278257448E-15Q,\n+  1.178415018484555397390098879501969116536E-12Q,\n+  2.622049767502719728905924701288614016597E-10Q,\n+  3.196908059607618864801313380896308968673E-8Q,\n+  2.179466154171673958770030655199434798494E-6Q,\n+  8.139959091628545225221976413795645177291E-5Q,\n+  1.563900725721039825236927137885747138654E-3Q,\n+  1.355172364265825167113562519307194840307E-2Q,\n+  3.928058355906967977269780046844768588532E-2Q,\n+  1.107891967702173292405380993183694932208E-2Q,\n+};\n+#define NQ16_ID 9\n+static const __float128 Q16_ID[NQ16_ID + 1] = {\n+  3.199850952578356211091219295199301766718E-17Q,\n+  3.652601488020654842194486058637953363918E-14Q,\n+  1.620179741394865258354608590461839031281E-11Q,\n+  3.629359209474609630056463248923684371426E-9Q,\n+  4.473680923894354600193264347733477363305E-7Q,\n+  3.106368086644715743265603656011050476736E-5Q,\n+  1.198239259946770604954664925153424252622E-3Q,\n+  2.446041004004283102372887804475767568272E-2Q,\n+  2.403235525011860603014707768815113698768E-1Q,\n+  9.491006790682158612266270665136910927149E-1Q,\n+ /* 1.000000000000000000000000000000000000000E0 */\n+ };\n+\n+/* Y0(x)cosX - J0(x)sinX = sqrt( 2/(pi x)) Q0(x),\n+   Q0(x) = 1/x (-.125 + 1/x^2 R(1/x^2))\n+   Peak relative error 5.1e-36\n+   0.0625 <= 1/x <= 0.125  */\n+#define NQ8_16N 11\n+static const __float128 Q8_16N[NQ8_16N + 1] = {\n+  1.001954266485599464105669390693597125904E-17Q,\n+  7.545499865295034556206475956620160007849E-15Q,\n+  2.267838684785673931024792538193202559922E-12Q,\n+  3.561909705814420373609574999542459912419E-10Q,\n+  3.216201422768092505214730633842924944671E-8Q,\n+  1.731194793857907454569364622452058554314E-6Q,\n+  5.576944613034537050396518509871004586039E-5Q,\n+  1.051787760316848982655967052985391418146E-3Q,\n+  1.102852974036687441600678598019883746959E-2Q,\n+  5.834647019292460494254225988766702933571E-2Q,\n+  1.290281921604364618912425380717127576529E-1Q,\n+  7.598886310387075708640370806458926458301E-2Q,\n+};\n+#define NQ8_16D 11\n+static const __float128 Q8_16D[NQ8_16D + 1] = {\n+  1.368001558508338469503329967729951830843E-16Q,\n+  1.034454121857542147020549303317348297289E-13Q,\n+  3.128109209247090744354764050629381674436E-11Q,\n+  4.957795214328501986562102573522064468671E-9Q,\n+  4.537872468606711261992676606899273588899E-7Q,\n+  2.493639207101727713192687060517509774182E-5Q,\n+  8.294957278145328349785532236663051405805E-4Q,\n+  1.646471258966713577374948205279380115839E-2Q,\n+  1.878910092770966718491814497982191447073E-1Q,\n+  1.152641605706170353727903052525652504075E0Q,\n+  3.383550240669773485412333679367792932235E0Q,\n+  3.823875252882035706910024716609908473970E0Q,\n+ /* 1.000000000000000000000000000000000000000E0 */\n+};\n+\n+/* Y0(x)cosX - J0(x)sinX = sqrt( 2/(pi x)) Q0(x),\n+   Q0(x) = 1/x (-.125 + 1/x^2 R(1/x^2))\n+   Peak relative error 3.9e-35\n+   0.125 <= 1/x <= 0.1875  */\n+#define NQ5_8N 10\n+static const __float128 Q5_8N[NQ5_8N + 1] = {\n+  1.750399094021293722243426623211733898747E-13Q,\n+  6.483426211748008735242909236490115050294E-11Q,\n+  9.279430665656575457141747875716899958373E-9Q,\n+  6.696634968526907231258534757736576340266E-7Q,\n+  2.666560823798895649685231292142838188061E-5Q,\n+  6.025087697259436271271562769707550594540E-4Q,\n+  7.652807734168613251901945778921336353485E-3Q,\n+  5.226269002589406461622551452343519078905E-2Q,\n+  1.748390159751117658969324896330142895079E-1Q,\n+  2.378188719097006494782174902213083589660E-1Q,\n+  8.383984859679804095463699702165659216831E-2Q,\n+};\n+#define NQ5_8D 10\n+static const __float128 Q5_8D[NQ5_8D + 1] = {\n+  2.389878229704327939008104855942987615715E-12Q,\n+  8.926142817142546018703814194987786425099E-10Q,\n+  1.294065862406745901206588525833274399038E-7Q,\n+  9.524139899457666250828752185212769682191E-6Q,\n+  3.908332488377770886091936221573123353489E-4Q,\n+  9.250427033957236609624199884089916836748E-3Q,\n+  1.263420066165922645975830877751588421451E-1Q,\n+  9.692527053860420229711317379861733180654E-1Q,\n+  3.937813834630430172221329298841520707954E0Q,\n+  7.603126427436356534498908111445191312181E0Q,\n+  5.670677653334105479259958485084550934305E0Q,\n+ /* 1.000000000000000000000000000000000000000E0 */\n+};\n+\n+/* Y0(x)cosX - J0(x)sinX = sqrt( 2/(pi x)) Q0(x),\n+   Q0(x) = 1/x (-.125 + 1/x^2 R(1/x^2))\n+   Peak relative error 3.2e-35\n+   0.1875 <= 1/x <= 0.25  */\n+#define NQ4_5N 10\n+static const __float128 Q4_5N[NQ4_5N + 1] = {\n+  2.233870042925895644234072357400122854086E-11Q,\n+  5.146223225761993222808463878999151699792E-9Q,\n+  4.459114531468296461688753521109797474523E-7Q,\n+  1.891397692931537975547242165291668056276E-5Q,\n+  4.279519145911541776938964806470674565504E-4Q,\n+  5.275239415656560634702073291768904783989E-3Q,\n+  3.468698403240744801278238473898432608887E-2Q,\n+  1.138773146337708415188856882915457888274E-1Q,\n+  1.622717518946443013587108598334636458955E-1Q,\n+  7.249040006390586123760992346453034628227E-2Q,\n+  1.941595365256460232175236758506411486667E-3Q,\n+};\n+#define NQ4_5D 9\n+static const __float128 Q4_5D[NQ4_5D + 1] = {\n+  3.049977232266999249626430127217988047453E-10Q,\n+  7.120883230531035857746096928889676144099E-8Q,\n+  6.301786064753734446784637919554359588859E-6Q,\n+  2.762010530095069598480766869426308077192E-4Q,\n+  6.572163250572867859316828886203406361251E-3Q,\n+  8.752566114841221958200215255461843397776E-2Q,\n+  6.487654992874805093499285311075289932664E-1Q,\n+  2.576550017826654579451615283022812801435E0Q,\n+  5.056392229924022835364779562707348096036E0Q,\n+  4.179770081068251464907531367859072157773E0Q,\n+ /* 1.000000000000000000000000000000000000000E0 */\n+};\n+\n+/* Y0(x)cosX - J0(x)sinX = sqrt( 2/(pi x)) Q0(x),\n+   Q0(x) = 1/x (-.125 + 1/x^2 R(1/x^2))\n+   Peak relative error 1.4e-36\n+   0.25 <= 1/x <= 0.3125  */\n+#define NQ3r2_4N 10\n+static const __float128 Q3r2_4N[NQ3r2_4N + 1] = {\n+  6.126167301024815034423262653066023684411E-10Q,\n+  1.043969327113173261820028225053598975128E-7Q,\n+  6.592927270288697027757438170153763220190E-6Q,\n+  2.009103660938497963095652951912071336730E-4Q,\n+  3.220543385492643525985862356352195896964E-3Q,\n+  2.774405975730545157543417650436941650990E-2Q,\n+  1.258114008023826384487378016636555041129E-1Q,\n+  2.811724258266902502344701449984698323860E-1Q,\n+  2.691837665193548059322831687432415014067E-1Q,\n+  7.949087384900985370683770525312735605034E-2Q,\n+  1.229509543620976530030153018986910810747E-3Q,\n+};\n+#define NQ3r2_4D 9\n+static const __float128 Q3r2_4D[NQ3r2_4D + 1] = {\n+  8.364260446128475461539941389210166156568E-9Q,\n+  1.451301850638956578622154585560759862764E-6Q,\n+  9.431830010924603664244578867057141839463E-5Q,\n+  3.004105101667433434196388593004526182741E-3Q,\n+  5.148157397848271739710011717102773780221E-2Q,\n+  4.901089301726939576055285374953887874895E-1Q,\n+  2.581760991981709901216967665934142240346E0Q,\n+  7.257105880775059281391729708630912791847E0Q,\n+  1.006014717326362868007913423810737369312E1Q,\n+  5.879416600465399514404064187445293212470E0Q,\n+ /* 1.000000000000000000000000000000000000000E0*/\n+};\n+\n+/* Y0(x)cosX - J0(x)sinX = sqrt( 2/(pi x)) Q0(x),\n+   Q0(x) = 1/x (-.125 + 1/x^2 R(1/x^2))\n+   Peak relative error 3.8e-36\n+   0.3125 <= 1/x <= 0.375  */\n+#define NQ2r7_3r2N 9\n+static const __float128 Q2r7_3r2N[NQ2r7_3r2N + 1] = {\n+  7.584861620402450302063691901886141875454E-8Q,\n+  9.300939338814216296064659459966041794591E-6Q,\n+  4.112108906197521696032158235392604947895E-4Q,\n+  8.515168851578898791897038357239630654431E-3Q,\n+  8.971286321017307400142720556749573229058E-2Q,\n+  4.885856732902956303343015636331874194498E-1Q,\n+  1.334506268733103291656253500506406045846E0Q,\n+  1.681207956863028164179042145803851824654E0Q,\n+  8.165042692571721959157677701625853772271E-1Q,\n+  9.805848115375053300608712721986235900715E-2Q,\n+};\n+#define NQ2r7_3r2D 9\n+static const __float128 Q2r7_3r2D[NQ2r7_3r2D + 1] = {\n+  1.035586492113036586458163971239438078160E-6Q,\n+  1.301999337731768381683593636500979713689E-4Q,\n+  5.993695702564527062553071126719088859654E-3Q,\n+  1.321184892887881883489141186815457808785E-1Q,\n+  1.528766555485015021144963194165165083312E0Q,\n+  9.561463309176490874525827051566494939295E0Q,\n+  3.203719484883967351729513662089163356911E1Q,\n+  5.497294687660930446641539152123568668447E1Q,\n+  4.391158169390578768508675452986948391118E1Q,\n+  1.347836630730048077907818943625789418378E1Q,\n+ /* 1.000000000000000000000000000000000000000E0 */\n+};\n+\n+/* Y0(x)cosX - J0(x)sinX = sqrt( 2/(pi x)) Q0(x),\n+   Q0(x) = 1/x (-.125 + 1/x^2 R(1/x^2))\n+   Peak relative error 2.2e-35\n+   0.375 <= 1/x <= 0.4375  */\n+#define NQ2r3_2r7N 9\n+static const __float128 Q2r3_2r7N[NQ2r3_2r7N + 1] = {\n+  4.455027774980750211349941766420190722088E-7Q,\n+  4.031998274578520170631601850866780366466E-5Q,\n+  1.273987274325947007856695677491340636339E-3Q,\n+  1.818754543377448509897226554179659122873E-2Q,\n+  1.266748858326568264126353051352269875352E-1Q,\n+  4.327578594728723821137731555139472880414E-1Q,\n+  6.892532471436503074928194969154192615359E-1Q,\n+  4.490775818438716873422163588640262036506E-1Q,\n+  8.649615949297322440032000346117031581572E-2Q,\n+  7.261345286655345047417257611469066147561E-4Q,\n+};\n+#define NQ2r3_2r7D 8\n+static const __float128 Q2r3_2r7D[NQ2r3_2r7D + 1] = {\n+  6.082600739680555266312417978064954793142E-6Q,\n+  5.693622538165494742945717226571441747567E-4Q,\n+  1.901625907009092204458328768129666975975E-2Q,\n+  2.958689532697857335456896889409923371570E-1Q,\n+  2.343124711045660081603809437993368799568E0Q,\n+  9.665894032187458293568704885528192804376E0Q,\n+  2.035273104990617136065743426322454881353E1Q,\n+  2.044102010478792896815088858740075165531E1Q,\n+  8.445937177863155827844146643468706599304E0Q,\n+ /* 1.000000000000000000000000000000000000000E0 */\n+};\n+\n+/* Y0(x)cosX - J0(x)sinX = sqrt( 2/(pi x)) Q0(x),\n+   Q0(x) = 1/x (-.125 + 1/x^2 R(1/x^2))\n+   Peak relative error 3.1e-36\n+   0.4375 <= 1/x <= 0.5  */\n+#define NQ2_2r3N 9\n+static const __float128 Q2_2r3N[NQ2_2r3N + 1] = {\n+  2.817566786579768804844367382809101929314E-6Q,\n+  2.122772176396691634147024348373539744935E-4Q,\n+  5.501378031780457828919593905395747517585E-3Q,\n+  6.355374424341762686099147452020466524659E-2Q,\n+  3.539652320122661637429658698954748337223E-1Q,\n+  9.571721066119617436343740541777014319695E-1Q,\n+  1.196258777828426399432550698612171955305E0Q,\n+  6.069388659458926158392384709893753793967E-1Q,\n+  9.026746127269713176512359976978248763621E-2Q,\n+  5.317668723070450235320878117210807236375E-4Q,\n+};\n+#define NQ2_2r3D 8\n+static const __float128 Q2_2r3D[NQ2_2r3D + 1] = {\n+  3.846924354014260866793741072933159380158E-5Q,\n+  3.017562820057704325510067178327449946763E-3Q,\n+  8.356305620686867949798885808540444210935E-2Q,\n+  1.068314930499906838814019619594424586273E0Q,\n+  6.900279623894821067017966573640732685233E0Q,\n+  2.307667390886377924509090271780839563141E1Q,\n+  3.921043465412723970791036825401273528513E1Q,\n+  3.167569478939719383241775717095729233436E1Q,\n+  1.051023841699200920276198346301543665909E1Q,\n+ /* 1.000000000000000000000000000000000000000E0*/\n+};\n+\n+\n+/* Evaluate P[n] x^n  +  P[n-1] x^(n-1)  +  ...  +  P[0] */\n+\n+static __float128\n+neval (__float128 x, const __float128 *p, int n)\n+{\n+  __float128 y;\n+\n+  p += n;\n+  y = *p--;\n+  do\n+    {\n+      y = y * x + *p--;\n+    }\n+  while (--n > 0);\n+  return y;\n+}\n+\n+\n+/* Evaluate x^n+1  +  P[n] x^(n)  +  P[n-1] x^(n-1)  +  ...  +  P[0] */\n+\n+static __float128\n+deval (__float128 x, const __float128 *p, int n)\n+{\n+  __float128 y;\n+\n+  p += n;\n+  y = x + *p--;\n+  do\n+    {\n+      y = y * x + *p--;\n+    }\n+  while (--n > 0);\n+  return y;\n+}\n+\n+\n+/* Bessel function of the first kind, order zero.  */\n+\n+__float128\n+j0q (__float128 x)\n+{\n+  __float128 xx, xinv, z, p, q, c, s, cc, ss;\n+\n+  if (! finiteq (x))\n+    {\n+      if (x != x)\n+\treturn x;\n+      else\n+\treturn 0.0Q;\n+    }\n+  if (x == 0.0Q)\n+    return 1.0Q;\n+\n+  xx = fabsq (x);\n+  if (xx <= 2.0Q)\n+    {\n+      /* 0 <= x <= 2 */\n+      z = xx * xx;\n+      p = z * z * neval (z, J0_2N, NJ0_2N) / deval (z, J0_2D, NJ0_2D);\n+      p -= 0.25Q * z;\n+      p += 1.0Q;\n+      return p;\n+    }\n+\n+  xinv = 1.0Q / xx;\n+  z = xinv * xinv;\n+  if (xinv <= 0.25)\n+    {\n+      if (xinv <= 0.125)\n+\t{\n+\t  if (xinv <= 0.0625)\n+\t    {\n+\t      p = neval (z, P16_IN, NP16_IN) / deval (z, P16_ID, NP16_ID);\n+\t      q = neval (z, Q16_IN, NQ16_IN) / deval (z, Q16_ID, NQ16_ID);\n+\t    }\n+\t  else\n+\t    {\n+\t      p = neval (z, P8_16N, NP8_16N) / deval (z, P8_16D, NP8_16D);\n+\t      q = neval (z, Q8_16N, NQ8_16N) / deval (z, Q8_16D, NQ8_16D);\n+\t    }\n+\t}\n+      else if (xinv <= 0.1875)\n+\t{\n+\t  p = neval (z, P5_8N, NP5_8N) / deval (z, P5_8D, NP5_8D);\n+\t  q = neval (z, Q5_8N, NQ5_8N) / deval (z, Q5_8D, NQ5_8D);\n+\t}\n+      else\n+\t{\n+\t  p = neval (z, P4_5N, NP4_5N) / deval (z, P4_5D, NP4_5D);\n+\t  q = neval (z, Q4_5N, NQ4_5N) / deval (z, Q4_5D, NQ4_5D);\n+\t}\n+    }\t\t\t\t/* .25 */\n+  else /* if (xinv <= 0.5) */\n+    {\n+      if (xinv <= 0.375)\n+\t{\n+\t  if (xinv <= 0.3125)\n+\t    {\n+\t      p = neval (z, P3r2_4N, NP3r2_4N) / deval (z, P3r2_4D, NP3r2_4D);\n+\t      q = neval (z, Q3r2_4N, NQ3r2_4N) / deval (z, Q3r2_4D, NQ3r2_4D);\n+\t    }\n+\t  else\n+\t    {\n+\t      p = neval (z, P2r7_3r2N, NP2r7_3r2N)\n+\t\t  / deval (z, P2r7_3r2D, NP2r7_3r2D);\n+\t      q = neval (z, Q2r7_3r2N, NQ2r7_3r2N)\n+\t\t  / deval (z, Q2r7_3r2D, NQ2r7_3r2D);\n+\t    }\n+\t}\n+      else if (xinv <= 0.4375)\n+\t{\n+\t  p = neval (z, P2r3_2r7N, NP2r3_2r7N)\n+\t      / deval (z, P2r3_2r7D, NP2r3_2r7D);\n+\t  q = neval (z, Q2r3_2r7N, NQ2r3_2r7N)\n+\t      / deval (z, Q2r3_2r7D, NQ2r3_2r7D);\n+\t}\n+      else\n+\t{\n+\t  p = neval (z, P2_2r3N, NP2_2r3N) / deval (z, P2_2r3D, NP2_2r3D);\n+\t  q = neval (z, Q2_2r3N, NQ2_2r3N) / deval (z, Q2_2r3D, NQ2_2r3D);\n+\t}\n+    }\n+  p = 1.0Q + z * p;\n+  q = z * xinv * q;\n+  q = q - 0.125Q * xinv;\n+  /* X = x - pi/4\n+     cos(X) = cos(x) cos(pi/4) + sin(x) sin(pi/4)\n+     = 1/sqrt(2) * (cos(x) + sin(x))\n+     sin(X) = sin(x) cos(pi/4) - cos(x) sin(pi/4)\n+     = 1/sqrt(2) * (sin(x) - cos(x))\n+     sin(x) +- cos(x) = -cos(2x)/(sin(x) -+ cos(x))\n+     cf. Fdlibm.  */\n+  sincosq (xx, &s, &c);\n+  ss = s - c;\n+  cc = s + c;\n+  z = - cosq (xx + xx);\n+  if ((s * c) < 0)\n+    cc = z / ss;\n+  else\n+    ss = z / cc;\n+  z = ONEOSQPI * (p * cc - q * ss) / sqrtq (xx);\n+  return z;\n+}\n+\n+\n+/* Y0(x) = 2/pi * log(x) * J0(x) + R(x^2)\n+   Peak absolute error 1.7e-36 (relative where Y0 > 1)\n+   0 <= x <= 2   */\n+#define NY0_2N 7\n+static __float128 Y0_2N[NY0_2N + 1] = {\n+ -1.062023609591350692692296993537002558155E19Q,\n+  2.542000883190248639104127452714966858866E19Q,\n+ -1.984190771278515324281415820316054696545E18Q,\n+  4.982586044371592942465373274440222033891E16Q,\n+ -5.529326354780295177243773419090123407550E14Q,\n+  3.013431465522152289279088265336861140391E12Q,\n+ -7.959436160727126750732203098982718347785E9Q,\n+  8.230845651379566339707130644134372793322E6Q,\n+};\n+#define NY0_2D 7\n+static __float128 Y0_2D[NY0_2D + 1] = {\n+  1.438972634353286978700329883122253752192E20Q,\n+  1.856409101981569254247700169486907405500E18Q,\n+  1.219693352678218589553725579802986255614E16Q,\n+  5.389428943282838648918475915779958097958E13Q,\n+  1.774125762108874864433872173544743051653E11Q,\n+  4.522104832545149534808218252434693007036E8Q,\n+  8.872187401232943927082914504125234454930E5Q,\n+  1.251945613186787532055610876304669413955E3Q,\n+ /* 1.000000000000000000000000000000000000000E0 */\n+};\n+\n+\n+/* Bessel function of the second kind, order zero.  */\n+\n+__float128\n+y0q (__float128 x)\n+{\n+  __float128 xx, xinv, z, p, q, c, s, cc, ss;\n+\n+  if (! finiteq (x))\n+    {\n+      if (x != x)\n+\treturn x;\n+      else\n+\treturn 0.0Q;\n+    }\n+  if (x <= 0.0Q)\n+    {\n+      if (x < 0.0Q)\n+\treturn (zero / (zero * x));\n+      return -HUGE_VALQ + x;\n+    }\n+  xx = fabsq (x);\n+  if (xx <= 2.0Q)\n+    {\n+      /* 0 <= x <= 2 */\n+      z = xx * xx;\n+      p = neval (z, Y0_2N, NY0_2N) / deval (z, Y0_2D, NY0_2D);\n+      p = TWOOPI * logq (x) * j0q (x) + p;\n+      return p;\n+    }\n+\n+  xinv = 1.0Q / xx;\n+  z = xinv * xinv;\n+  if (xinv <= 0.25)\n+    {\n+      if (xinv <= 0.125)\n+\t{\n+\t  if (xinv <= 0.0625)\n+\t    {\n+\t      p = neval (z, P16_IN, NP16_IN) / deval (z, P16_ID, NP16_ID);\n+\t      q = neval (z, Q16_IN, NQ16_IN) / deval (z, Q16_ID, NQ16_ID);\n+\t    }\n+\t  else\n+\t    {\n+\t      p = neval (z, P8_16N, NP8_16N) / deval (z, P8_16D, NP8_16D);\n+\t      q = neval (z, Q8_16N, NQ8_16N) / deval (z, Q8_16D, NQ8_16D);\n+\t    }\n+\t}\n+      else if (xinv <= 0.1875)\n+\t{\n+\t  p = neval (z, P5_8N, NP5_8N) / deval (z, P5_8D, NP5_8D);\n+\t  q = neval (z, Q5_8N, NQ5_8N) / deval (z, Q5_8D, NQ5_8D);\n+\t}\n+      else\n+\t{\n+\t  p = neval (z, P4_5N, NP4_5N) / deval (z, P4_5D, NP4_5D);\n+\t  q = neval (z, Q4_5N, NQ4_5N) / deval (z, Q4_5D, NQ4_5D);\n+\t}\n+    }\t\t\t\t/* .25 */\n+  else /* if (xinv <= 0.5) */\n+    {\n+      if (xinv <= 0.375)\n+\t{\n+\t  if (xinv <= 0.3125)\n+\t    {\n+\t      p = neval (z, P3r2_4N, NP3r2_4N) / deval (z, P3r2_4D, NP3r2_4D);\n+\t      q = neval (z, Q3r2_4N, NQ3r2_4N) / deval (z, Q3r2_4D, NQ3r2_4D);\n+\t    }\n+\t  else\n+\t    {\n+\t      p = neval (z, P2r7_3r2N, NP2r7_3r2N)\n+\t\t  / deval (z, P2r7_3r2D, NP2r7_3r2D);\n+\t      q = neval (z, Q2r7_3r2N, NQ2r7_3r2N)\n+\t\t  / deval (z, Q2r7_3r2D, NQ2r7_3r2D);\n+\t    }\n+\t}\n+      else if (xinv <= 0.4375)\n+\t{\n+\t  p = neval (z, P2r3_2r7N, NP2r3_2r7N)\n+\t      / deval (z, P2r3_2r7D, NP2r3_2r7D);\n+\t  q = neval (z, Q2r3_2r7N, NQ2r3_2r7N)\n+\t      / deval (z, Q2r3_2r7D, NQ2r3_2r7D);\n+\t}\n+      else\n+\t{\n+\t  p = neval (z, P2_2r3N, NP2_2r3N) / deval (z, P2_2r3D, NP2_2r3D);\n+\t  q = neval (z, Q2_2r3N, NQ2_2r3N) / deval (z, Q2_2r3D, NQ2_2r3D);\n+\t}\n+    }\n+  p = 1.0Q + z * p;\n+  q = z * xinv * q;\n+  q = q - 0.125Q * xinv;\n+  /* X = x - pi/4\n+     cos(X) = cos(x) cos(pi/4) + sin(x) sin(pi/4)\n+     = 1/sqrt(2) * (cos(x) + sin(x))\n+     sin(X) = sin(x) cos(pi/4) - cos(x) sin(pi/4)\n+     = 1/sqrt(2) * (sin(x) - cos(x))\n+     sin(x) +- cos(x) = -cos(2x)/(sin(x) -+ cos(x))\n+     cf. Fdlibm.  */\n+  sincosq (x, &s, &c);\n+  ss = s - c;\n+  cc = s + c;\n+  z = - cosq (x + x);\n+  if ((s * c) < 0)\n+    cc = z / ss;\n+  else\n+    ss = z / cc;\n+  z = ONEOSQPI * (p * ss + q * cc) / sqrtq (x);\n+  return z;\n+}"}, {"sha": "f6bf2a256ce97e4d641ab012f6023ab802e27654", "filename": "libquadmath/math/j1q.c", "status": "added", "additions": 926, "deletions": 0, "changes": 926, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fj1q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fj1q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fj1q.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,926 @@\n+/*\t\t\t\t\t\t\tj1l.c\n+ *\n+ *\tBessel function of order one\n+ *\n+ *\n+ *\n+ * SYNOPSIS:\n+ *\n+ * long double x, y, j1l();\n+ *\n+ * y = j1l( x );\n+ *\n+ *\n+ *\n+ * DESCRIPTION:\n+ *\n+ * Returns Bessel function of first kind, order one of the argument.\n+ *\n+ * The domain is divided into two major intervals [0, 2] and\n+ * (2, infinity). In the first interval the rational approximation is\n+ * J1(x) = .5x + x x^2 R(x^2)\n+ *\n+ * The second interval is further partitioned into eight equal segments\n+ * of 1/x.\n+ * J1(x) = sqrt(2/(pi x)) (P1(x) cos(X) - Q1(x) sin(X)),\n+ * X = x - 3 pi / 4,\n+ *\n+ * and the auxiliary functions are given by\n+ *\n+ * J1(x)cos(X) + Y1(x)sin(X) = sqrt( 2/(pi x)) P1(x),\n+ * P1(x) = 1 + 1/x^2 R(1/x^2)\n+ *\n+ * Y1(x)cos(X) - J1(x)sin(X) = sqrt( 2/(pi x)) Q1(x),\n+ * Q1(x) = 1/x (.375 + 1/x^2 R(1/x^2)).\n+ *\n+ *\n+ *\n+ * ACCURACY:\n+ *\n+ *                      Absolute error:\n+ * arithmetic   domain      # trials      peak         rms\n+ *    IEEE      0, 30       100000      2.8e-34      2.7e-35\n+ *\n+ *\n+ */\n+\n+/*\t\t\t\t\t\t\ty1l.c\n+ *\n+ *\tBessel function of the second kind, order one\n+ *\n+ *\n+ *\n+ * SYNOPSIS:\n+ *\n+ * double x, y, y1l();\n+ *\n+ * y = y1l( x );\n+ *\n+ *\n+ *\n+ * DESCRIPTION:\n+ *\n+ * Returns Bessel function of the second kind, of order\n+ * one, of the argument.\n+ *\n+ * The domain is divided into two major intervals [0, 2] and\n+ * (2, infinity). In the first interval the rational approximation is\n+ * Y1(x) = 2/pi * (log(x) * J1(x) - 1/x) + x R(x^2) .\n+ * In the second interval the approximation is the same as for J1(x), and\n+ * Y1(x) = sqrt(2/(pi x)) (P1(x) sin(X) + Q1(x) cos(X)),\n+ * X = x - 3 pi / 4.\n+ *\n+ * ACCURACY:\n+ *\n+ *  Absolute error, when y0(x) < 1; else relative error:\n+ *\n+ * arithmetic   domain     # trials      peak         rms\n+ *    IEEE      0, 30       100000      2.7e-34     2.9e-35\n+ *\n+ */\n+\n+/* Copyright 2001 by Stephen L. Moshier (moshier@na-net.onrl.gov).\n+\n+    This library is free software; you can redistribute it and/or\n+    modify it under the terms of the GNU Lesser General Public\n+    License as published by the Free Software Foundation; either\n+    version 2.1 of the License, or (at your option) any later version.\n+\n+    This library is distributed in the hope that it will be useful,\n+    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+    Lesser General Public License for more details.\n+\n+    You should have received a copy of the GNU Lesser General Public\n+    License along with this library; if not, write to the Free Software\n+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA */\n+\n+#include \"quadmath-imp.h\"\n+\n+/* 1 / sqrt(pi) */\n+static const __float128 ONEOSQPI = 5.6418958354775628694807945156077258584405E-1Q;\n+/* 2 / pi */\n+static const __float128 TWOOPI = 6.3661977236758134307553505349005744813784E-1Q;\n+static const __float128 zero = 0.0Q;\n+\n+/* J1(x) = .5x + x x^2 R(x^2)\n+   Peak relative error 1.9e-35\n+   0 <= x <= 2  */\n+#define NJ0_2N 6\n+static const __float128 J0_2N[NJ0_2N + 1] = {\n+ -5.943799577386942855938508697619735179660E16Q,\n+  1.812087021305009192259946997014044074711E15Q,\n+ -2.761698314264509665075127515729146460895E13Q,\n+  2.091089497823600978949389109350658815972E11Q,\n+ -8.546413231387036372945453565654130054307E8Q,\n+  1.797229225249742247475464052741320612261E6Q,\n+ -1.559552840946694171346552770008812083969E3Q\n+};\n+#define NJ0_2D 6\n+static const __float128 J0_2D[NJ0_2D + 1] = {\n+  9.510079323819108569501613916191477479397E17Q,\n+  1.063193817503280529676423936545854693915E16Q,\n+  5.934143516050192600795972192791775226920E13Q,\n+  2.168000911950620999091479265214368352883E11Q,\n+  5.673775894803172808323058205986256928794E8Q,\n+  1.080329960080981204840966206372671147224E6Q,\n+  1.411951256636576283942477881535283304912E3Q,\n+ /* 1.000000000000000000000000000000000000000E0Q */\n+};\n+\n+/* J1(x)cosX + Y1(x)sinX = sqrt( 2/(pi x)) P1(x), P1(x) = 1 + 1/x^2 R(1/x^2),\n+   0 <= 1/x <= .0625\n+   Peak relative error 3.6e-36  */\n+#define NP16_IN 9\n+static const __float128 P16_IN[NP16_IN + 1] = {\n+  5.143674369359646114999545149085139822905E-16Q,\n+  4.836645664124562546056389268546233577376E-13Q,\n+  1.730945562285804805325011561498453013673E-10Q,\n+  3.047976856147077889834905908605310585810E-8Q,\n+  2.855227609107969710407464739188141162386E-6Q,\n+  1.439362407936705484122143713643023998457E-4Q,\n+  3.774489768532936551500999699815873422073E-3Q,\n+  4.723962172984642566142399678920790598426E-2Q,\n+  2.359289678988743939925017240478818248735E-1Q,\n+  3.032580002220628812728954785118117124520E-1Q,\n+};\n+#define NP16_ID 9\n+static const __float128 P16_ID[NP16_ID + 1] = {\n+  4.389268795186898018132945193912677177553E-15Q,\n+  4.132671824807454334388868363256830961655E-12Q,\n+  1.482133328179508835835963635130894413136E-9Q,\n+  2.618941412861122118906353737117067376236E-7Q,\n+  2.467854246740858470815714426201888034270E-5Q,\n+  1.257192927368839847825938545925340230490E-3Q,\n+  3.362739031941574274949719324644120720341E-2Q,\n+  4.384458231338934105875343439265370178858E-1Q,\n+  2.412830809841095249170909628197264854651E0Q,\n+  4.176078204111348059102962617368214856874E0Q,\n+ /* 1.000000000000000000000000000000000000000E0 */\n+};\n+\n+/* J1(x)cosX + Y1(x)sinX = sqrt( 2/(pi x)) P1(x), P1(x) = 1 + 1/x^2 R(1/x^2),\n+    0.0625 <= 1/x <= 0.125\n+    Peak relative error 1.9e-36  */\n+#define NP8_16N 11\n+static const __float128 P8_16N[NP8_16N + 1] = {\n+  2.984612480763362345647303274082071598135E-16Q,\n+  1.923651877544126103941232173085475682334E-13Q,\n+  4.881258879388869396043760693256024307743E-11Q,\n+  6.368866572475045408480898921866869811889E-9Q,\n+  4.684818344104910450523906967821090796737E-7Q,\n+  2.005177298271593587095982211091300382796E-5Q,\n+  4.979808067163957634120681477207147536182E-4Q,\n+  6.946005761642579085284689047091173581127E-3Q,\n+  5.074601112955765012750207555985299026204E-2Q,\n+  1.698599455896180893191766195194231825379E-1Q,\n+  1.957536905259237627737222775573623779638E-1Q,\n+  2.991314703282528370270179989044994319374E-2Q,\n+};\n+#define NP8_16D 10\n+static const __float128 P8_16D[NP8_16D + 1] = {\n+  2.546869316918069202079580939942463010937E-15Q,\n+  1.644650111942455804019788382157745229955E-12Q,\n+  4.185430770291694079925607420808011147173E-10Q,\n+  5.485331966975218025368698195861074143153E-8Q,\n+  4.062884421686912042335466327098932678905E-6Q,\n+  1.758139661060905948870523641319556816772E-4Q,\n+  4.445143889306356207566032244985607493096E-3Q,\n+  6.391901016293512632765621532571159071158E-2Q,\n+  4.933040207519900471177016015718145795434E-1Q,\n+  1.839144086168947712971630337250761842976E0Q,\n+  2.715120873995490920415616716916149586579E0Q,\n+ /* 1.000000000000000000000000000000000000000E0 */\n+};\n+\n+/* J1(x)cosX + Y1(x)sinX = sqrt( 2/(pi x)) P1(x), P1(x) = 1 + 1/x^2 R(1/x^2),\n+  0.125 <= 1/x <= 0.1875\n+  Peak relative error 1.3e-36  */\n+#define NP5_8N 10\n+static const __float128 P5_8N[NP5_8N + 1] = {\n+  2.837678373978003452653763806968237227234E-12Q,\n+  9.726641165590364928442128579282742354806E-10Q,\n+  1.284408003604131382028112171490633956539E-7Q,\n+  8.524624695868291291250573339272194285008E-6Q,\n+  3.111516908953172249853673787748841282846E-4Q,\n+  6.423175156126364104172801983096596409176E-3Q,\n+  7.430220589989104581004416356260692450652E-2Q,\n+  4.608315409833682489016656279567605536619E-1Q,\n+  1.396870223510964882676225042258855977512E0Q,\n+  1.718500293904122365894630460672081526236E0Q,\n+  5.465927698800862172307352821870223855365E-1Q\n+};\n+#define NP5_8D 10\n+static const __float128 P5_8D[NP5_8D + 1] = {\n+  2.421485545794616609951168511612060482715E-11Q,\n+  8.329862750896452929030058039752327232310E-9Q,\n+  1.106137992233383429630592081375289010720E-6Q,\n+  7.405786153760681090127497796448503306939E-5Q,\n+  2.740364785433195322492093333127633465227E-3Q,\n+  5.781246470403095224872243564165254652198E-2Q,\n+  6.927711353039742469918754111511109983546E-1Q,\n+  4.558679283460430281188304515922826156690E0Q,\n+  1.534468499844879487013168065728837900009E1Q,\n+  2.313927430889218597919624843161569422745E1Q,\n+  1.194506341319498844336768473218382828637E1Q,\n+ /* 1.000000000000000000000000000000000000000E0 */\n+};\n+\n+/* J1(x)cosX + Y1(x)sinX = sqrt( 2/(pi x)) P1(x), P1(x) = 1 + 1/x^2 R(1/x^2),\n+   Peak relative error 1.4e-36\n+   0.1875 <= 1/x <= 0.25  */\n+#define NP4_5N 10\n+static const __float128 P4_5N[NP4_5N + 1] = {\n+  1.846029078268368685834261260420933914621E-10Q,\n+  3.916295939611376119377869680335444207768E-8Q,\n+  3.122158792018920627984597530935323997312E-6Q,\n+  1.218073444893078303994045653603392272450E-4Q,\n+  2.536420827983485448140477159977981844883E-3Q,\n+  2.883011322006690823959367922241169171315E-2Q,\n+  1.755255190734902907438042414495469810830E-1Q,\n+  5.379317079922628599870898285488723736599E-1Q,\n+  7.284904050194300773890303361501726561938E-1Q,\n+  3.270110346613085348094396323925000362813E-1Q,\n+  1.804473805689725610052078464951722064757E-2Q,\n+};\n+#define NP4_5D 9\n+static const __float128 P4_5D[NP4_5D + 1] = {\n+  1.575278146806816970152174364308980863569E-9Q,\n+  3.361289173657099516191331123405675054321E-7Q,\n+  2.704692281550877810424745289838790693708E-5Q,\n+  1.070854930483999749316546199273521063543E-3Q,\n+  2.282373093495295842598097265627962125411E-2Q,\n+  2.692025460665354148328762368240343249830E-1Q,\n+  1.739892942593664447220951225734811133759E0Q,\n+  5.890727576752230385342377570386657229324E0Q,\n+  9.517442287057841500750256954117735128153E0Q,\n+  6.100616353935338240775363403030137736013E0Q,\n+ /* 1.000000000000000000000000000000000000000E0 */\n+};\n+\n+/* J1(x)cosX + Y1(x)sinX = sqrt( 2/(pi x)) P1(x), P1(x) = 1 + 1/x^2 R(1/x^2),\n+   Peak relative error 3.0e-36\n+   0.25 <= 1/x <= 0.3125  */\n+#define NP3r2_4N 9\n+static const __float128 P3r2_4N[NP3r2_4N + 1] = {\n+  8.240803130988044478595580300846665863782E-8Q,\n+  1.179418958381961224222969866406483744580E-5Q,\n+  6.179787320956386624336959112503824397755E-4Q,\n+  1.540270833608687596420595830747166658383E-2Q,\n+  1.983904219491512618376375619598837355076E-1Q,\n+  1.341465722692038870390470651608301155565E0Q,\n+  4.617865326696612898792238245990854646057E0Q,\n+  7.435574801812346424460233180412308000587E0Q,\n+  4.671327027414635292514599201278557680420E0Q,\n+  7.299530852495776936690976966995187714739E-1Q,\n+};\n+#define NP3r2_4D 9\n+static const __float128 P3r2_4D[NP3r2_4D + 1] = {\n+  7.032152009675729604487575753279187576521E-7Q,\n+  1.015090352324577615777511269928856742848E-4Q,\n+  5.394262184808448484302067955186308730620E-3Q,\n+  1.375291438480256110455809354836988584325E-1Q,\n+  1.836247144461106304788160919310404376670E0Q,\n+  1.314378564254376655001094503090935880349E1Q,\n+  4.957184590465712006934452500894672343488E1Q,\n+  9.287394244300647738855415178790263465398E1Q,\n+  7.652563275535900609085229286020552768399E1Q,\n+  2.147042473003074533150718117770093209096E1Q,\n+ /* 1.000000000000000000000000000000000000000E0 */\n+};\n+\n+/* J1(x)cosX + Y1(x)sinX = sqrt( 2/(pi x)) P1(x), P1(x) = 1 + 1/x^2 R(1/x^2),\n+   Peak relative error 1.0e-35\n+   0.3125 <= 1/x <= 0.375  */\n+#define NP2r7_3r2N 9\n+static const __float128 P2r7_3r2N[NP2r7_3r2N + 1] = {\n+  4.599033469240421554219816935160627085991E-7Q,\n+  4.665724440345003914596647144630893997284E-5Q,\n+  1.684348845667764271596142716944374892756E-3Q,\n+  2.802446446884455707845985913454440176223E-2Q,\n+  2.321937586453963310008279956042545173930E-1Q,\n+  9.640277413988055668692438709376437553804E-1Q,\n+  1.911021064710270904508663334033003246028E0Q,\n+  1.600811610164341450262992138893970224971E0Q,\n+  4.266299218652587901171386591543457861138E-1Q,\n+  1.316470424456061252962568223251247207325E-2Q,\n+};\n+#define NP2r7_3r2D 8\n+static const __float128 P2r7_3r2D[NP2r7_3r2D + 1] = {\n+  3.924508608545520758883457108453520099610E-6Q,\n+  4.029707889408829273226495756222078039823E-4Q,\n+  1.484629715787703260797886463307469600219E-2Q,\n+  2.553136379967180865331706538897231588685E-1Q,\n+  2.229457223891676394409880026887106228740E0Q,\n+  1.005708903856384091956550845198392117318E1Q,\n+  2.277082659664386953166629360352385889558E1Q,\n+  2.384726835193630788249826630376533988245E1Q,\n+  9.700989749041320895890113781610939632410E0Q,\n+ /* 1.000000000000000000000000000000000000000E0 */\n+};\n+\n+/* J1(x)cosX + Y1(x)sinX = sqrt( 2/(pi x)) P1(x), P1(x) = 1 + 1/x^2 R(1/x^2),\n+   Peak relative error 1.7e-36\n+   0.3125 <= 1/x <= 0.4375  */\n+#define NP2r3_2r7N 9\n+static const __float128 P2r3_2r7N[NP2r3_2r7N + 1] = {\n+  3.916766777108274628543759603786857387402E-6Q,\n+  3.212176636756546217390661984304645137013E-4Q,\n+  9.255768488524816445220126081207248947118E-3Q,\n+  1.214853146369078277453080641911700735354E-1Q,\n+  7.855163309847214136198449861311404633665E-1Q,\n+  2.520058073282978403655488662066019816540E0Q,\n+  3.825136484837545257209234285382183711466E0Q,\n+  2.432569427554248006229715163865569506873E0Q,\n+  4.877934835018231178495030117729800489743E-1Q,\n+  1.109902737860249670981355149101343427885E-2Q,\n+};\n+#define NP2r3_2r7D 8\n+static const __float128 P2r3_2r7D[NP2r3_2r7D + 1] = {\n+  3.342307880794065640312646341190547184461E-5Q,\n+  2.782182891138893201544978009012096558265E-3Q,\n+  8.221304931614200702142049236141249929207E-2Q,\n+  1.123728246291165812392918571987858010949E0Q,\n+  7.740482453652715577233858317133423434590E0Q,\n+  2.737624677567945952953322566311201919139E1Q,\n+  4.837181477096062403118304137851260715475E1Q,\n+  3.941098643468580791437772701093795299274E1Q,\n+  1.245821247166544627558323920382547533630E1Q,\n+ /* 1.000000000000000000000000000000000000000E0 */\n+};\n+\n+/* J1(x)cosX + Y1(x)sinX = sqrt( 2/(pi x)) P1(x), P1(x) = 1 + 1/x^2 R(1/x^2),\n+   Peak relative error 1.7e-35\n+   0.4375 <= 1/x <= 0.5  */\n+#define NP2_2r3N 8\n+static const __float128 P2_2r3N[NP2_2r3N + 1] = {\n+  3.397930802851248553545191160608731940751E-4Q,\n+  2.104020902735482418784312825637833698217E-2Q,\n+  4.442291771608095963935342749477836181939E-1Q,\n+  4.131797328716583282869183304291833754967E0Q,\n+  1.819920169779026500146134832455189917589E1Q,\n+  3.781779616522937565300309684282401791291E1Q,\n+  3.459605449728864218972931220783543410347E1Q,\n+  1.173594248397603882049066603238568316561E1Q,\n+  9.455702270242780642835086549285560316461E-1Q,\n+};\n+#define NP2_2r3D 8\n+static const __float128 P2_2r3D[NP2_2r3D + 1] = {\n+  2.899568897241432883079888249845707400614E-3Q,\n+  1.831107138190848460767699919531132426356E-1Q,\n+  3.999350044057883839080258832758908825165E0Q,\n+  3.929041535867957938340569419874195303712E1Q,\n+  1.884245613422523323068802689915538908291E2Q,\n+  4.461469948819229734353852978424629815929E2Q,\n+  5.004998753999796821224085972610636347903E2Q,\n+  2.386342520092608513170837883757163414100E2Q,\n+  3.791322528149347975999851588922424189957E1Q,\n+ /* 1.000000000000000000000000000000000000000E0 */\n+};\n+\n+/* Y1(x)cosX - J1(x)sinX = sqrt( 2/(pi x)) Q1(x),\n+   Q1(x) = 1/x (.375 + 1/x^2 R(1/x^2)),\n+   Peak relative error 8.0e-36\n+   0 <= 1/x <= .0625  */\n+#define NQ16_IN 10\n+static const __float128 Q16_IN[NQ16_IN + 1] = {\n+  -3.917420835712508001321875734030357393421E-18Q,\n+  -4.440311387483014485304387406538069930457E-15Q,\n+  -1.951635424076926487780929645954007139616E-12Q,\n+  -4.318256438421012555040546775651612810513E-10Q,\n+  -5.231244131926180765270446557146989238020E-8Q,\n+  -3.540072702902043752460711989234732357653E-6Q,\n+  -1.311017536555269966928228052917534882984E-4Q,\n+  -2.495184669674631806622008769674827575088E-3Q,\n+  -2.141868222987209028118086708697998506716E-2Q,\n+  -6.184031415202148901863605871197272650090E-2Q,\n+  -1.922298704033332356899546792898156493887E-2Q,\n+};\n+#define NQ16_ID 9\n+static const __float128 Q16_ID[NQ16_ID + 1] = {\n+  3.820418034066293517479619763498400162314E-17Q,\n+  4.340702810799239909648911373329149354911E-14Q,\n+  1.914985356383416140706179933075303538524E-11Q,\n+  4.262333682610888819476498617261895474330E-9Q,\n+  5.213481314722233980346462747902942182792E-7Q,\n+  3.585741697694069399299005316809954590558E-5Q,\n+  1.366513429642842006385029778105539457546E-3Q,\n+  2.745282599850704662726337474371355160594E-2Q,\n+  2.637644521611867647651200098449903330074E-1Q,\n+  1.006953426110765984590782655598680488746E0Q,\n+ /* 1.000000000000000000000000000000000000000E0 */\n+ };\n+\n+/* Y1(x)cosX - J1(x)sinX = sqrt( 2/(pi x)) Q1(x),\n+   Q1(x) = 1/x (.375 + 1/x^2 R(1/x^2)),\n+   Peak relative error 1.9e-36\n+   0.0625 <= 1/x <= 0.125  */\n+#define NQ8_16N 11\n+static const __float128 Q8_16N[NQ8_16N + 1] = {\n+  -2.028630366670228670781362543615221542291E-17Q,\n+  -1.519634620380959966438130374006858864624E-14Q,\n+  -4.540596528116104986388796594639405114524E-12Q,\n+  -7.085151756671466559280490913558388648274E-10Q,\n+  -6.351062671323970823761883833531546885452E-8Q,\n+  -3.390817171111032905297982523519503522491E-6Q,\n+  -1.082340897018886970282138836861233213972E-4Q,\n+  -2.020120801187226444822977006648252379508E-3Q,\n+  -2.093169910981725694937457070649605557555E-2Q,\n+  -1.092176538874275712359269481414448063393E-1Q,\n+  -2.374790947854765809203590474789108718733E-1Q,\n+  -1.365364204556573800719985118029601401323E-1Q,\n+};\n+#define NQ8_16D 11\n+static const __float128 Q8_16D[NQ8_16D + 1] = {\n+  1.978397614733632533581207058069628242280E-16Q,\n+  1.487361156806202736877009608336766720560E-13Q,\n+  4.468041406888412086042576067133365913456E-11Q,\n+  7.027822074821007443672290507210594648877E-9Q,\n+  6.375740580686101224127290062867976007374E-7Q,\n+  3.466887658320002225888644977076410421940E-5Q,\n+  1.138625640905289601186353909213719596986E-3Q,\n+  2.224470799470414663443449818235008486439E-2Q,\n+  2.487052928527244907490589787691478482358E-1Q,\n+  1.483927406564349124649083853892380899217E0Q,\n+  4.182773513276056975777258788903489507705E0Q,\n+  4.419665392573449746043880892524360870944E0Q,\n+ /* 1.000000000000000000000000000000000000000E0 */\n+};\n+\n+/* Y1(x)cosX - J1(x)sinX = sqrt( 2/(pi x)) Q1(x),\n+   Q1(x) = 1/x (.375 + 1/x^2 R(1/x^2)),\n+   Peak relative error 1.5e-35\n+   0.125 <= 1/x <= 0.1875  */\n+#define NQ5_8N 10\n+static const __float128 Q5_8N[NQ5_8N + 1] = {\n+  -3.656082407740970534915918390488336879763E-13Q,\n+  -1.344660308497244804752334556734121771023E-10Q,\n+  -1.909765035234071738548629788698150760791E-8Q,\n+  -1.366668038160120210269389551283666716453E-6Q,\n+  -5.392327355984269366895210704976314135683E-5Q,\n+  -1.206268245713024564674432357634540343884E-3Q,\n+  -1.515456784370354374066417703736088291287E-2Q,\n+  -1.022454301137286306933217746545237098518E-1Q,\n+  -3.373438906472495080504907858424251082240E-1Q,\n+  -4.510782522110845697262323973549178453405E-1Q,\n+  -1.549000892545288676809660828213589804884E-1Q,\n+};\n+#define NQ5_8D 10\n+static const __float128 Q5_8D[NQ5_8D + 1] = {\n+  3.565550843359501079050699598913828460036E-12Q,\n+  1.321016015556560621591847454285330528045E-9Q,\n+  1.897542728662346479999969679234270605975E-7Q,\n+  1.381720283068706710298734234287456219474E-5Q,\n+  5.599248147286524662305325795203422873725E-4Q,\n+  1.305442352653121436697064782499122164843E-2Q,\n+  1.750234079626943298160445750078631894985E-1Q,\n+  1.311420542073436520965439883806946678491E0Q,\n+  5.162757689856842406744504211089724926650E0Q,\n+  9.527760296384704425618556332087850581308E0Q,\n+  6.604648207463236667912921642545100248584E0Q,\n+ /* 1.000000000000000000000000000000000000000E0 */\n+};\n+\n+/* Y1(x)cosX - J1(x)sinX = sqrt( 2/(pi x)) Q1(x),\n+   Q1(x) = 1/x (.375 + 1/x^2 R(1/x^2)),\n+   Peak relative error 1.3e-35\n+   0.1875 <= 1/x <= 0.25  */\n+#define NQ4_5N 10\n+static const __float128 Q4_5N[NQ4_5N + 1] = {\n+  -4.079513568708891749424783046520200903755E-11Q,\n+  -9.326548104106791766891812583019664893311E-9Q,\n+  -8.016795121318423066292906123815687003356E-7Q,\n+  -3.372350544043594415609295225664186750995E-5Q,\n+  -7.566238665947967882207277686375417983917E-4Q,\n+  -9.248861580055565402130441618521591282617E-3Q,\n+  -6.033106131055851432267702948850231270338E-2Q,\n+  -1.966908754799996793730369265431584303447E-1Q,\n+  -2.791062741179964150755788226623462207560E-1Q,\n+  -1.255478605849190549914610121863534191666E-1Q,\n+  -4.320429862021265463213168186061696944062E-3Q,\n+};\n+#define NQ4_5D 9\n+static const __float128 Q4_5D[NQ4_5D + 1] = {\n+  3.978497042580921479003851216297330701056E-10Q,\n+  9.203304163828145809278568906420772246666E-8Q,\n+  8.059685467088175644915010485174545743798E-6Q,\n+  3.490187375993956409171098277561669167446E-4Q,\n+  8.189109654456872150100501732073810028829E-3Q,\n+  1.072572867311023640958725265762483033769E-1Q,\n+  7.790606862409960053675717185714576937994E-1Q,\n+  3.016049768232011196434185423512777656328E0Q,\n+  5.722963851442769787733717162314477949360E0Q,\n+  4.510527838428473279647251350931380867663E0Q,\n+ /* 1.000000000000000000000000000000000000000E0 */\n+};\n+\n+/* Y1(x)cosX - J1(x)sinX = sqrt( 2/(pi x)) Q1(x),\n+   Q1(x) = 1/x (.375 + 1/x^2 R(1/x^2)),\n+   Peak relative error 2.1e-35\n+   0.25 <= 1/x <= 0.3125  */\n+#define NQ3r2_4N 9\n+static const __float128 Q3r2_4N[NQ3r2_4N + 1] = {\n+  -1.087480809271383885936921889040388133627E-8Q,\n+  -1.690067828697463740906962973479310170932E-6Q,\n+  -9.608064416995105532790745641974762550982E-5Q,\n+  -2.594198839156517191858208513873961837410E-3Q,\n+  -3.610954144421543968160459863048062977822E-2Q,\n+  -2.629866798251843212210482269563961685666E-1Q,\n+  -9.709186825881775885917984975685752956660E-1Q,\n+  -1.667521829918185121727268867619982417317E0Q,\n+  -1.109255082925540057138766105229900943501E0Q,\n+  -1.812932453006641348145049323713469043328E-1Q,\n+};\n+#define NQ3r2_4D 9\n+static const __float128 Q3r2_4D[NQ3r2_4D + 1] = {\n+  1.060552717496912381388763753841473407026E-7Q,\n+  1.676928002024920520786883649102388708024E-5Q,\n+  9.803481712245420839301400601140812255737E-4Q,\n+  2.765559874262309494758505158089249012930E-2Q,\n+  4.117921827792571791298862613287549140706E-1Q,\n+  3.323769515244751267093378361930279161413E0Q,\n+  1.436602494405814164724810151689705353670E1Q,\n+  3.163087869617098638064881410646782408297E1Q,\n+  3.198181264977021649489103980298349589419E1Q,\n+  1.203649258862068431199471076202897823272E1Q,\n+ /* 1.000000000000000000000000000000000000000E0  */\n+};\n+\n+/* Y1(x)cosX - J1(x)sinX = sqrt( 2/(pi x)) Q1(x),\n+   Q1(x) = 1/x (.375 + 1/x^2 R(1/x^2)),\n+   Peak relative error 1.6e-36\n+   0.3125 <= 1/x <= 0.375  */\n+#define NQ2r7_3r2N 9\n+static const __float128 Q2r7_3r2N[NQ2r7_3r2N + 1] = {\n+  -1.723405393982209853244278760171643219530E-7Q,\n+  -2.090508758514655456365709712333460087442E-5Q,\n+  -9.140104013370974823232873472192719263019E-4Q,\n+  -1.871349499990714843332742160292474780128E-2Q,\n+  -1.948930738119938669637865956162512983416E-1Q,\n+  -1.048764684978978127908439526343174139788E0Q,\n+  -2.827714929925679500237476105843643064698E0Q,\n+  -3.508761569156476114276988181329773987314E0Q,\n+  -1.669332202790211090973255098624488308989E0Q,\n+  -1.930796319299022954013840684651016077770E-1Q,\n+};\n+#define NQ2r7_3r2D 9\n+static const __float128 Q2r7_3r2D[NQ2r7_3r2D + 1] = {\n+  1.680730662300831976234547482334347983474E-6Q,\n+  2.084241442440551016475972218719621841120E-4Q,\n+  9.445316642108367479043541702688736295579E-3Q,\n+  2.044637889456631896650179477133252184672E-1Q,\n+  2.316091982244297350829522534435350078205E0Q,\n+  1.412031891783015085196708811890448488865E1Q,\n+  4.583830154673223384837091077279595496149E1Q,\n+  7.549520609270909439885998474045974122261E1Q,\n+  5.697605832808113367197494052388203310638E1Q,\n+  1.601496240876192444526383314589371686234E1Q,\n+  /* 1.000000000000000000000000000000000000000E0 */\n+};\n+\n+/* Y1(x)cosX - J1(x)sinX = sqrt( 2/(pi x)) Q1(x),\n+   Q1(x) = 1/x (.375 + 1/x^2 R(1/x^2)),\n+   Peak relative error 9.5e-36\n+   0.375 <= 1/x <= 0.4375  */\n+#define NQ2r3_2r7N 9\n+static const __float128 Q2r3_2r7N[NQ2r3_2r7N + 1] = {\n+  -8.603042076329122085722385914954878953775E-7Q,\n+  -7.701746260451647874214968882605186675720E-5Q,\n+  -2.407932004380727587382493696877569654271E-3Q,\n+  -3.403434217607634279028110636919987224188E-2Q,\n+  -2.348707332185238159192422084985713102877E-1Q,\n+  -7.957498841538254916147095255700637463207E-1Q,\n+  -1.258469078442635106431098063707934348577E0Q,\n+  -8.162415474676345812459353639449971369890E-1Q,\n+  -1.581783890269379690141513949609572806898E-1Q,\n+  -1.890595651683552228232308756569450822905E-3Q,\n+};\n+#define NQ2r3_2r7D 8\n+static const __float128 Q2r3_2r7D[NQ2r3_2r7D + 1] = {\n+  8.390017524798316921170710533381568175665E-6Q,\n+  7.738148683730826286477254659973968763659E-4Q,\n+  2.541480810958665794368759558791634341779E-2Q,\n+  3.878879789711276799058486068562386244873E-1Q,\n+  3.003783779325811292142957336802456109333E0Q,\n+  1.206480374773322029883039064575464497400E1Q,\n+  2.458414064785315978408974662900438351782E1Q,\n+  2.367237826273668567199042088835448715228E1Q,\n+  9.231451197519171090875569102116321676763E0Q,\n+ /* 1.000000000000000000000000000000000000000E0 */\n+};\n+\n+/* Y1(x)cosX - J1(x)sinX = sqrt( 2/(pi x)) Q1(x),\n+   Q1(x) = 1/x (.375 + 1/x^2 R(1/x^2)),\n+   Peak relative error 1.4e-36\n+   0.4375 <= 1/x <= 0.5  */\n+#define NQ2_2r3N 9\n+static const __float128 Q2_2r3N[NQ2_2r3N + 1] = {\n+  -5.552507516089087822166822364590806076174E-6Q,\n+  -4.135067659799500521040944087433752970297E-4Q,\n+  -1.059928728869218962607068840646564457980E-2Q,\n+  -1.212070036005832342565792241385459023801E-1Q,\n+  -6.688350110633603958684302153362735625156E-1Q,\n+  -1.793587878197360221340277951304429821582E0Q,\n+  -2.225407682237197485644647380483725045326E0Q,\n+  -1.123402135458940189438898496348239744403E0Q,\n+  -1.679187241566347077204805190763597299805E-1Q,\n+  -1.458550613639093752909985189067233504148E-3Q,\n+};\n+#define NQ2_2r3D 8\n+static const __float128 Q2_2r3D[NQ2_2r3D + 1] = {\n+  5.415024336507980465169023996403597916115E-5Q,\n+  4.179246497380453022046357404266022870788E-3Q,\n+  1.136306384261959483095442402929502368598E-1Q,\n+  1.422640343719842213484515445393284072830E0Q,\n+  8.968786703393158374728850922289204805764E0Q,\n+  2.914542473339246127533384118781216495934E1Q,\n+  4.781605421020380669870197378210457054685E1Q,\n+  3.693865837171883152382820584714795072937E1Q,\n+  1.153220502744204904763115556224395893076E1Q,\n+  /* 1.000000000000000000000000000000000000000E0 */\n+};\n+\n+\n+/* Evaluate P[n] x^n  +  P[n-1] x^(n-1)  +  ...  +  P[0] */\n+\n+static __float128\n+neval (__float128 x, const __float128 *p, int n)\n+{\n+  __float128 y;\n+\n+  p += n;\n+  y = *p--;\n+  do\n+    {\n+      y = y * x + *p--;\n+    }\n+  while (--n > 0);\n+  return y;\n+}\n+\n+\n+/* Evaluate x^n+1  +  P[n] x^(n)  +  P[n-1] x^(n-1)  +  ...  +  P[0] */\n+\n+static __float128\n+deval (__float128 x, const __float128 *p, int n)\n+{\n+  __float128 y;\n+\n+  p += n;\n+  y = x + *p--;\n+  do\n+    {\n+      y = y * x + *p--;\n+    }\n+  while (--n > 0);\n+  return y;\n+}\n+\n+\n+/* Bessel function of the first kind, order one.  */\n+\n+__float128\n+j1q (__float128 x)\n+{\n+  __float128 xx, xinv, z, p, q, c, s, cc, ss;\n+\n+  if (! finiteq (x))\n+    {\n+      if (x != x)\n+\treturn x;\n+      else\n+\treturn 0.0Q;\n+    }\n+  if (x == 0.0Q)\n+    return x;\n+  xx = fabsq (x);\n+  if (xx <= 2.0Q)\n+    {\n+      /* 0 <= x <= 2 */\n+      z = xx * xx;\n+      p = xx * z * neval (z, J0_2N, NJ0_2N) / deval (z, J0_2D, NJ0_2D);\n+      p += 0.5Q * xx;\n+      if (x < 0)\n+\tp = -p;\n+      return p;\n+    }\n+\n+  xinv = 1.0Q / xx;\n+  z = xinv * xinv;\n+  if (xinv <= 0.25)\n+    {\n+      if (xinv <= 0.125)\n+\t{\n+\t  if (xinv <= 0.0625)\n+\t    {\n+\t      p = neval (z, P16_IN, NP16_IN) / deval (z, P16_ID, NP16_ID);\n+\t      q = neval (z, Q16_IN, NQ16_IN) / deval (z, Q16_ID, NQ16_ID);\n+\t    }\n+\t  else\n+\t    {\n+\t      p = neval (z, P8_16N, NP8_16N) / deval (z, P8_16D, NP8_16D);\n+\t      q = neval (z, Q8_16N, NQ8_16N) / deval (z, Q8_16D, NQ8_16D);\n+\t    }\n+\t}\n+      else if (xinv <= 0.1875)\n+\t{\n+\t  p = neval (z, P5_8N, NP5_8N) / deval (z, P5_8D, NP5_8D);\n+\t  q = neval (z, Q5_8N, NQ5_8N) / deval (z, Q5_8D, NQ5_8D);\n+\t}\n+      else\n+\t{\n+\t  p = neval (z, P4_5N, NP4_5N) / deval (z, P4_5D, NP4_5D);\n+\t  q = neval (z, Q4_5N, NQ4_5N) / deval (z, Q4_5D, NQ4_5D);\n+\t}\n+    }\t\t\t\t/* .25 */\n+  else /* if (xinv <= 0.5) */\n+    {\n+      if (xinv <= 0.375)\n+\t{\n+\t  if (xinv <= 0.3125)\n+\t    {\n+\t      p = neval (z, P3r2_4N, NP3r2_4N) / deval (z, P3r2_4D, NP3r2_4D);\n+\t      q = neval (z, Q3r2_4N, NQ3r2_4N) / deval (z, Q3r2_4D, NQ3r2_4D);\n+\t    }\n+\t  else\n+\t    {\n+\t      p = neval (z, P2r7_3r2N, NP2r7_3r2N)\n+\t\t  / deval (z, P2r7_3r2D, NP2r7_3r2D);\n+\t      q = neval (z, Q2r7_3r2N, NQ2r7_3r2N)\n+\t\t  / deval (z, Q2r7_3r2D, NQ2r7_3r2D);\n+\t    }\n+\t}\n+      else if (xinv <= 0.4375)\n+\t{\n+\t  p = neval (z, P2r3_2r7N, NP2r3_2r7N)\n+\t      / deval (z, P2r3_2r7D, NP2r3_2r7D);\n+\t  q = neval (z, Q2r3_2r7N, NQ2r3_2r7N)\n+\t      / deval (z, Q2r3_2r7D, NQ2r3_2r7D);\n+\t}\n+      else\n+\t{\n+\t  p = neval (z, P2_2r3N, NP2_2r3N) / deval (z, P2_2r3D, NP2_2r3D);\n+\t  q = neval (z, Q2_2r3N, NQ2_2r3N) / deval (z, Q2_2r3D, NQ2_2r3D);\n+\t}\n+    }\n+  p = 1.0Q + z * p;\n+  q = z * q;\n+  q = q * xinv + 0.375Q * xinv;\n+  /* X = x - 3 pi/4\n+     cos(X) = cos(x) cos(3 pi/4) + sin(x) sin(3 pi/4)\n+     = 1/sqrt(2) * (-cos(x) + sin(x))\n+     sin(X) = sin(x) cos(3 pi/4) - cos(x) sin(3 pi/4)\n+     = -1/sqrt(2) * (sin(x) + cos(x))\n+     cf. Fdlibm.  */\n+  sincosq (xx, &s, &c);\n+  ss = -s - c;\n+  cc = s - c;\n+  z = cosq (xx + xx);\n+  if ((s * c) > 0)\n+    cc = z / ss;\n+  else\n+    ss = z / cc;\n+  z = ONEOSQPI * (p * cc - q * ss) / sqrtq (xx);\n+  if (x < 0)\n+    z = -z;\n+  return z;\n+}\n+\n+\n+/* Y1(x) = 2/pi * (log(x) * J1(x) - 1/x) + x R(x^2)\n+   Peak relative error 6.2e-38\n+   0 <= x <= 2   */\n+#define NY0_2N 7\n+static __float128 Y0_2N[NY0_2N + 1] = {\n+  -6.804415404830253804408698161694720833249E19Q,\n+  1.805450517967019908027153056150465849237E19Q,\n+  -8.065747497063694098810419456383006737312E17Q,\n+  1.401336667383028259295830955439028236299E16Q,\n+  -1.171654432898137585000399489686629680230E14Q,\n+  5.061267920943853732895341125243428129150E11Q,\n+  -1.096677850566094204586208610960870217970E9Q,\n+  9.541172044989995856117187515882879304461E5Q,\n+};\n+#define NY0_2D 7\n+static __float128 Y0_2D[NY0_2D + 1] = {\n+  3.470629591820267059538637461549677594549E20Q,\n+  4.120796439009916326855848107545425217219E18Q,\n+  2.477653371652018249749350657387030814542E16Q,\n+  9.954678543353888958177169349272167762797E13Q,\n+  2.957927997613630118216218290262851197754E11Q,\n+  6.748421382188864486018861197614025972118E8Q,\n+  1.173453425218010888004562071020305709319E6Q,\n+  1.450335662961034949894009554536003377187E3Q,\n+  /* 1.000000000000000000000000000000000000000E0 */\n+};\n+\n+\n+/* Bessel function of the second kind, order one.  */\n+\n+__float128\n+y1q (__float128 x)\n+{\n+  __float128 xx, xinv, z, p, q, c, s, cc, ss;\n+\n+  if (! finiteq (x))\n+    {\n+      if (x != x)\n+\treturn x;\n+      else\n+\treturn 0.0Q;\n+    }\n+  if (x <= 0.0Q)\n+    {\n+      if (x < 0.0Q)\n+\treturn (zero / (zero * x));\n+      return -HUGE_VALQ + x;\n+    }\n+  xx = fabsq (x);\n+  if (xx <= 2.0Q)\n+    {\n+      /* 0 <= x <= 2 */\n+      z = xx * xx;\n+      p = xx * neval (z, Y0_2N, NY0_2N) / deval (z, Y0_2D, NY0_2D);\n+      p = -TWOOPI / xx + p;\n+      p = TWOOPI * logq (x) * j1q (x) + p;\n+      return p;\n+    }\n+\n+  xinv = 1.0Q / xx;\n+  z = xinv * xinv;\n+  if (xinv <= 0.25)\n+    {\n+      if (xinv <= 0.125)\n+\t{\n+\t  if (xinv <= 0.0625)\n+\t    {\n+\t      p = neval (z, P16_IN, NP16_IN) / deval (z, P16_ID, NP16_ID);\n+\t      q = neval (z, Q16_IN, NQ16_IN) / deval (z, Q16_ID, NQ16_ID);\n+\t    }\n+\t  else\n+\t    {\n+\t      p = neval (z, P8_16N, NP8_16N) / deval (z, P8_16D, NP8_16D);\n+\t      q = neval (z, Q8_16N, NQ8_16N) / deval (z, Q8_16D, NQ8_16D);\n+\t    }\n+\t}\n+      else if (xinv <= 0.1875)\n+\t{\n+\t  p = neval (z, P5_8N, NP5_8N) / deval (z, P5_8D, NP5_8D);\n+\t  q = neval (z, Q5_8N, NQ5_8N) / deval (z, Q5_8D, NQ5_8D);\n+\t}\n+      else\n+\t{\n+\t  p = neval (z, P4_5N, NP4_5N) / deval (z, P4_5D, NP4_5D);\n+\t  q = neval (z, Q4_5N, NQ4_5N) / deval (z, Q4_5D, NQ4_5D);\n+\t}\n+    }\t\t\t\t/* .25 */\n+  else /* if (xinv <= 0.5) */\n+    {\n+      if (xinv <= 0.375)\n+\t{\n+\t  if (xinv <= 0.3125)\n+\t    {\n+\t      p = neval (z, P3r2_4N, NP3r2_4N) / deval (z, P3r2_4D, NP3r2_4D);\n+\t      q = neval (z, Q3r2_4N, NQ3r2_4N) / deval (z, Q3r2_4D, NQ3r2_4D);\n+\t    }\n+\t  else\n+\t    {\n+\t      p = neval (z, P2r7_3r2N, NP2r7_3r2N)\n+\t\t  / deval (z, P2r7_3r2D, NP2r7_3r2D);\n+\t      q = neval (z, Q2r7_3r2N, NQ2r7_3r2N)\n+\t\t  / deval (z, Q2r7_3r2D, NQ2r7_3r2D);\n+\t    }\n+\t}\n+      else if (xinv <= 0.4375)\n+\t{\n+\t  p = neval (z, P2r3_2r7N, NP2r3_2r7N)\n+\t      / deval (z, P2r3_2r7D, NP2r3_2r7D);\n+\t  q = neval (z, Q2r3_2r7N, NQ2r3_2r7N)\n+\t      / deval (z, Q2r3_2r7D, NQ2r3_2r7D);\n+\t}\n+      else\n+\t{\n+\t  p = neval (z, P2_2r3N, NP2_2r3N) / deval (z, P2_2r3D, NP2_2r3D);\n+\t  q = neval (z, Q2_2r3N, NQ2_2r3N) / deval (z, Q2_2r3D, NQ2_2r3D);\n+\t}\n+    }\n+  p = 1.0Q + z * p;\n+  q = z * q;\n+  q = q * xinv + 0.375Q * xinv;\n+  /* X = x - 3 pi/4\n+     cos(X) = cos(x) cos(3 pi/4) + sin(x) sin(3 pi/4)\n+     = 1/sqrt(2) * (-cos(x) + sin(x))\n+     sin(X) = sin(x) cos(3 pi/4) - cos(x) sin(3 pi/4)\n+     = -1/sqrt(2) * (sin(x) + cos(x))\n+     cf. Fdlibm.  */\n+  sincosq (xx, &s, &c);\n+  ss = -s - c;\n+  cc = s - c;\n+  z = cosq (xx + xx);\n+  if ((s * c) > 0)\n+    cc = z / ss;\n+  else\n+    ss = z / cc;\n+  z = ONEOSQPI * (p * ss + q * cc) / sqrtq (xx);\n+  return z;\n+}"}, {"sha": "d82947a3ccaf19ac78aa56527be49629ea8272da", "filename": "libquadmath/math/jnq.c", "status": "added", "additions": 381, "deletions": 0, "changes": 381, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fjnq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fjnq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fjnq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,381 @@\n+/*\n+ * ====================================================\n+ * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n+ *\n+ * Developed at SunPro, a Sun Microsystems, Inc. business.\n+ * Permission to use, copy, modify, and distribute this\n+ * software is freely granted, provided that this notice\n+ * is preserved.\n+ * ====================================================\n+ */\n+\n+/* Modifications for 128-bit long double are\n+   Copyright (C) 2001 Stephen L. Moshier <moshier@na-net.ornl.gov>\n+   and are incorporated herein by permission of the author.  The author \n+   reserves the right to distribute this material elsewhere under different\n+   copying permissions.  These modifications are distributed here under \n+   the following terms:\n+\n+    This library is free software; you can redistribute it and/or\n+    modify it under the terms of the GNU Lesser General Public\n+    License as published by the Free Software Foundation; either\n+    version 2.1 of the License, or (at your option) any later version.\n+\n+    This library is distributed in the hope that it will be useful,\n+    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+    Lesser General Public License for more details.\n+\n+    You should have received a copy of the GNU Lesser General Public\n+    License along with this library; if not, write to the Free Software\n+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA */\n+\n+/*\n+ * __ieee754_jn(n, x), __ieee754_yn(n, x)\n+ * floating point Bessel's function of the 1st and 2nd kind\n+ * of order n\n+ *\n+ * Special cases:\n+ *\ty0(0)=y1(0)=yn(n,0) = -inf with division by zero signal;\n+ *\ty0(-ve)=y1(-ve)=yn(n,-ve) are NaN with invalid signal.\n+ * Note 2. About jn(n,x), yn(n,x)\n+ *\tFor n=0, j0(x) is called,\n+ *\tfor n=1, j1(x) is called,\n+ *\tfor n<x, forward recursion us used starting\n+ *\tfrom values of j0(x) and j1(x).\n+ *\tfor n>x, a continued fraction approximation to\n+ *\tj(n,x)/j(n-1,x) is evaluated and then backward\n+ *\trecursion is used starting from a supposed value\n+ *\tfor j(n,x). The resulting value of j(0,x) is\n+ *\tcompared with the actual value to correct the\n+ *\tsupposed value of j(n,x).\n+ *\n+ *\tyn(n,x) is similar in all respects, except\n+ *\tthat forward recursion is used for all\n+ *\tvalues of n>1.\n+ *\n+ */\n+\n+#include \"quadmath-imp.h\"\n+\n+static const __float128\n+  invsqrtpi = 5.6418958354775628694807945156077258584405E-1Q,\n+  two = 2.0e0Q,\n+  one = 1.0e0Q,\n+  zero = 0.0Q;\n+\n+\n+__float128\n+jnq (int n, __float128 x)\n+{\n+  uint32_t se;\n+  int32_t i, ix, sgn;\n+  __float128 a, b, temp, di;\n+  __float128 z, w;\n+  ieee854_float128 u;\n+\n+\n+  /* J(-n,x) = (-1)^n * J(n, x), J(n, -x) = (-1)^n * J(n, x)\n+   * Thus, J(-n,x) = J(n,-x)\n+   */\n+\n+  u.value = x;\n+  se = u.words32.w0;\n+  ix = se & 0x7fffffff;\n+\n+  /* if J(n,NaN) is NaN */\n+  if (ix >= 0x7fff0000)\n+    {\n+      if ((u.words32.w0 & 0xffff) | u.words32.w1 | u.words32.w2 | u.words32.w3)\n+\treturn x + x;\n+    }\n+\n+  if (n < 0)\n+    {\n+      n = -n;\n+      x = -x;\n+      se ^= 0x80000000;\n+    }\n+  if (n == 0)\n+    return (j0q (x));\n+  if (n == 1)\n+    return (j1q (x));\n+  sgn = (n & 1) & (se >> 31);\t/* even n -- 0, odd n -- sign(x) */\n+  x = fabsq (x);\n+\n+  if (x == 0.0Q || ix >= 0x7fff0000)\t/* if x is 0 or inf */\n+    b = zero;\n+  else if ((__float128) n <= x)\n+    {\n+      /* Safe to use J(n+1,x)=2n/x *J(n,x)-J(n-1,x) */\n+      if (ix >= 0x412D0000)\n+\t{\t\t\t/* x > 2**302 */\n+\n+\t  /* ??? Could use an expansion for large x here.  */\n+\n+\t  /* (x >> n**2)\n+\t   *      Jn(x) = cos(x-(2n+1)*pi/4)*sqrt(2/x*pi)\n+\t   *      Yn(x) = sin(x-(2n+1)*pi/4)*sqrt(2/x*pi)\n+\t   *      Let s=sin(x), c=cos(x),\n+\t   *          xn=x-(2n+1)*pi/4, sqt2 = sqrt(2),then\n+\t   *\n+\t   *             n    sin(xn)*sqt2    cos(xn)*sqt2\n+\t   *          ----------------------------------\n+\t   *             0     s-c             c+s\n+\t   *             1    -s-c            -c+s\n+\t   *             2    -s+c            -c-s\n+\t   *             3     s+c             c-s\n+\t   */\n+\t  __float128 s;\n+\t  __float128 c;\n+\t  sincosq (x, &s, &c);\n+\t  switch (n & 3)\n+\t    {\n+\t    case 0:\n+\t      temp = c + s;\n+\t      break;\n+\t    case 1:\n+\t      temp = -c + s;\n+\t      break;\n+\t    case 2:\n+\t      temp = -c - s;\n+\t      break;\n+\t    case 3:\n+\t      temp = c - s;\n+\t      break;\n+\t    }\n+\t  b = invsqrtpi * temp / sqrtq (x);\n+\t}\n+      else\n+\t{\n+\t  a = j0q (x);\n+\t  b = j1q (x);\n+\t  for (i = 1; i < n; i++)\n+\t    {\n+\t      temp = b;\n+\t      b = b * ((__float128) (i + i) / x) - a;\t/* avoid underflow */\n+\t      a = temp;\n+\t    }\n+\t}\n+    }\n+  else\n+    {\n+      if (ix < 0x3fc60000)\n+\t{\t\t\t/* x < 2**-57 */\n+\t  /* x is tiny, return the first Taylor expansion of J(n,x)\n+\t   * J(n,x) = 1/n!*(x/2)^n  - ...\n+\t   */\n+\t  if (n >= 400)\t\t/* underflow, result < 10^-4952 */\n+\t    b = zero;\n+\t  else\n+\t    {\n+\t      temp = x * 0.5;\n+\t      b = temp;\n+\t      for (a = one, i = 2; i <= n; i++)\n+\t\t{\n+\t\t  a *= (__float128) i;\t/* a = n! */\n+\t\t  b *= temp;\t/* b = (x/2)^n */\n+\t\t}\n+\t      b = b / a;\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  /* use backward recurrence */\n+\t  /*                      x      x^2      x^2\n+\t   *  J(n,x)/J(n-1,x) =  ----   ------   ------   .....\n+\t   *                      2n  - 2(n+1) - 2(n+2)\n+\t   *\n+\t   *                      1      1        1\n+\t   *  (for large x)   =  ----  ------   ------   .....\n+\t   *                      2n   2(n+1)   2(n+2)\n+\t   *                      -- - ------ - ------ -\n+\t   *                       x     x         x\n+\t   *\n+\t   * Let w = 2n/x and h=2/x, then the above quotient\n+\t   * is equal to the continued fraction:\n+\t   *                  1\n+\t   *      = -----------------------\n+\t   *                     1\n+\t   *         w - -----------------\n+\t   *                        1\n+\t   *              w+h - ---------\n+\t   *                     w+2h - ...\n+\t   *\n+\t   * To determine how many terms needed, let\n+\t   * Q(0) = w, Q(1) = w(w+h) - 1,\n+\t   * Q(k) = (w+k*h)*Q(k-1) - Q(k-2),\n+\t   * When Q(k) > 1e4      good for single\n+\t   * When Q(k) > 1e9      good for double\n+\t   * When Q(k) > 1e17     good for quadruple\n+\t   */\n+\t  /* determine k */\n+\t  __float128 t, v;\n+\t  __float128 q0, q1, h, tmp;\n+\t  int32_t k, m;\n+\t  w = (n + n) / (__float128) x;\n+\t  h = 2.0Q / (__float128) x;\n+\t  q0 = w;\n+\t  z = w + h;\n+\t  q1 = w * z - 1.0Q;\n+\t  k = 1;\n+\t  while (q1 < 1.0e17Q)\n+\t    {\n+\t      k += 1;\n+\t      z += h;\n+\t      tmp = z * q1 - q0;\n+\t      q0 = q1;\n+\t      q1 = tmp;\n+\t    }\n+\t  m = n + n;\n+\t  for (t = zero, i = 2 * (n + k); i >= m; i -= 2)\n+\t    t = one / (i / x - t);\n+\t  a = t;\n+\t  b = one;\n+\t  /*  estimate log((2/x)^n*n!) = n*log(2/x)+n*ln(n)\n+\t   *  Hence, if n*(log(2n/x)) > ...\n+\t   *  single 8.8722839355e+01\n+\t   *  double 7.09782712893383973096e+02\n+\t   *  __float128 1.1356523406294143949491931077970765006170e+04\n+\t   *  then recurrent value may overflow and the result is\n+\t   *  likely underflow to zero\n+\t   */\n+\t  tmp = n;\n+\t  v = two / x;\n+\t  tmp = tmp * logq (fabsq (v * tmp));\n+\n+\t  if (tmp < 1.1356523406294143949491931077970765006170e+04Q)\n+\t    {\n+\t      for (i = n - 1, di = (__float128) (i + i); i > 0; i--)\n+\t\t{\n+\t\t  temp = b;\n+\t\t  b *= di;\n+\t\t  b = b / x - a;\n+\t\t  a = temp;\n+\t\t  di -= two;\n+\t\t}\n+\t    }\n+\t  else\n+\t    {\n+\t      for (i = n - 1, di = (__float128) (i + i); i > 0; i--)\n+\t\t{\n+\t\t  temp = b;\n+\t\t  b *= di;\n+\t\t  b = b / x - a;\n+\t\t  a = temp;\n+\t\t  di -= two;\n+\t\t  /* scale b to avoid spurious overflow */\n+\t\t  if (b > 1e100Q)\n+\t\t    {\n+\t\t      a /= b;\n+\t\t      t /= b;\n+\t\t      b = one;\n+\t\t    }\n+\t\t}\n+\t    }\n+\t  b = (t * j0q (x) / b);\n+\t}\n+    }\n+  if (sgn == 1)\n+    return -b;\n+  else\n+    return b;\n+}\n+\n+__float128\n+ynq (int n, __float128 x)\n+{\n+  uint32_t se;\n+  int32_t i, ix;\n+  int32_t sign;\n+  __float128 a, b, temp;\n+  ieee854_float128 u;\n+\n+  u.value = x;\n+  se = u.words32.w0;\n+  ix = se & 0x7fffffff;\n+\n+  /* if Y(n,NaN) is NaN */\n+  if (ix >= 0x7fff0000)\n+    {\n+      if ((u.words32.w0 & 0xffff) | u.words32.w1 | u.words32.w2 | u.words32.w3)\n+\treturn x + x;\n+    }\n+  if (x <= 0.0Q)\n+    {\n+      if (x == 0.0Q)\n+\treturn -HUGE_VALQ + x;\n+      if (se & 0x80000000)\n+\treturn zero / (zero * x);\n+    }\n+  sign = 1;\n+  if (n < 0)\n+    {\n+      n = -n;\n+      sign = 1 - ((n & 1) << 1);\n+    }\n+  if (n == 0)\n+    return (y0q (x));\n+  if (n == 1)\n+    return (sign * y1q (x));\n+  if (ix >= 0x7fff0000)\n+    return zero;\n+  if (ix >= 0x412D0000)\n+    {\t\t\t\t/* x > 2**302 */\n+\n+      /* ??? See comment above on the possible futility of this.  */\n+\n+      /* (x >> n**2)\n+       *      Jn(x) = cos(x-(2n+1)*pi/4)*sqrt(2/x*pi)\n+       *      Yn(x) = sin(x-(2n+1)*pi/4)*sqrt(2/x*pi)\n+       *      Let s=sin(x), c=cos(x),\n+       *          xn=x-(2n+1)*pi/4, sqt2 = sqrt(2),then\n+       *\n+       *             n    sin(xn)*sqt2    cos(xn)*sqt2\n+       *          ----------------------------------\n+       *             0     s-c             c+s\n+       *             1    -s-c            -c+s\n+       *             2    -s+c            -c-s\n+       *             3     s+c             c-s\n+       */\n+      __float128 s;\n+      __float128 c;\n+      sincosq (x, &s, &c);\n+      switch (n & 3)\n+\t{\n+\tcase 0:\n+\t  temp = s - c;\n+\t  break;\n+\tcase 1:\n+\t  temp = -s - c;\n+\t  break;\n+\tcase 2:\n+\t  temp = -s + c;\n+\t  break;\n+\tcase 3:\n+\t  temp = s + c;\n+\t  break;\n+\t}\n+      b = invsqrtpi * temp / sqrtq (x);\n+    }\n+  else\n+    {\n+      a = y0q (x);\n+      b = y1q (x);\n+      /* quit if b is -inf */\n+      u.value = b;\n+      se = u.words32.w0 & 0xffff0000;\n+      for (i = 1; i < n && se != 0xffff0000; i++)\n+\t{\n+\t  temp = b;\n+\t  b = ((__float128) (i + i) / x) * b - a;\n+\t  u.value = b;\n+\t  se = u.words32.w0 & 0xffff0000;\n+\t  a = temp;\n+\t}\n+    }\n+  if (sign > 0)\n+    return b;\n+  else\n+    return -b;\n+}"}, {"sha": "73f52e509bfde7d675fa74e6c4eda4576e0f37c4", "filename": "libquadmath/math/ldexpq.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fldexpq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fldexpq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fldexpq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,26 @@\n+/* s_ldexpl.c -- long double version of s_ldexp.c.\n+ * Conversion to long double by Ulrich Drepper,\n+ * Cygnus Support, drepper@cygnus.com.\n+ */\n+\n+/*\n+ * ====================================================\n+ * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n+ *\n+ * Developed at SunPro, a Sun Microsystems, Inc. business.\n+ * Permission to use, copy, modify, and distribute this\n+ * software is freely granted, provided that this notice\n+ * is preserved.\n+ * ====================================================\n+ */\n+\n+#include \"quadmath-imp.h\"\n+\n+__float128\n+ldexpq (__float128 value, int exp)\n+{\n+  if(!finiteq(value)||value==0.0Q) return value;\n+  value = scalbnq(value,exp);\n+  /* if(!__finitel(value)||value==0.0Q) __set_errno (ERANGE); */\n+  return value;\n+}"}, {"sha": "6e7697ac6a1b1ba70e42835819de4c1ee2a89e1d", "filename": "libquadmath/math/lgammaq.c", "status": "added", "additions": 1034, "deletions": 0, "changes": 1034, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Flgammaq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Flgammaq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Flgammaq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,1034 @@\n+/*                                                      lgammal\n+ *\n+ *      Natural logarithm of gamma function\n+ *\n+ *\n+ *\n+ * SYNOPSIS:\n+ *\n+ * __float128 x, y, lgammal();\n+ * extern int sgngam;\n+ *\n+ * y = lgammal(x);\n+ *\n+ *\n+ *\n+ * DESCRIPTION:\n+ *\n+ * Returns the base e (2.718...) logarithm of the absolute\n+ * value of the gamma function of the argument.\n+ * The sign (+1 or -1) of the gamma function is returned in a\n+ * global (extern) variable named sgngam.\n+ *\n+ * The positive domain is partitioned into numerous segments for approximation.\n+ * For x > 10,\n+ *   log gamma(x) = (x - 0.5) log(x) - x + log sqrt(2 pi) + 1/x R(1/x^2)\n+ * Near the minimum at x = x0 = 1.46... the approximation is\n+ *   log gamma(x0 + z) = log gamma(x0) + z^2 P(z)/Q(z)\n+ * for small z.\n+ * Elsewhere between 0 and 10,\n+ *   log gamma(n + z) = log gamma(n) + z P(z)/Q(z)\n+ * for various selected n and small z.\n+ *\n+ * The cosecant reflection formula is employed for negative arguments.\n+ *\n+ *\n+ *\n+ * ACCURACY:\n+ *\n+ *\n+ * arithmetic      domain        # trials     peak         rms\n+ *                                            Relative error:\n+ *    IEEE         10, 30         100000     3.9e-34     9.8e-35\n+ *    IEEE          0, 10         100000     3.8e-34     5.3e-35\n+ *                                            Absolute error:\n+ *    IEEE         -10, 0         100000     8.0e-34     8.0e-35\n+ *    IEEE         -30, -10       100000     4.4e-34     1.0e-34\n+ *    IEEE        -100, 100       100000                 1.0e-34\n+ *\n+ * The absolute error criterion is the same as relative error\n+ * when the function magnitude is greater than one but it is absolute\n+ * when the magnitude is less than one.\n+ *\n+ */\n+\n+/* Copyright 2001 by Stephen L. Moshier <moshier@na-net.ornl.gov>\n+\n+    This library is free software; you can redistribute it and/or\n+    modify it under the terms of the GNU Lesser General Public\n+    License as published by the Free Software Foundation; either\n+    version 2.1 of the License, or (at your option) any later version.\n+\n+    This library is distributed in the hope that it will be useful,\n+    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+    Lesser General Public License for more details.\n+\n+    You should have received a copy of the GNU Lesser General Public\n+    License along with this library; if not, write to the Free Software\n+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA */\n+\n+#include \"quadmath-imp.h\"\n+\n+static const __float128 PIQ = 3.1415926535897932384626433832795028841972E0Q;\n+static const __float128 MAXLGM = 1.0485738685148938358098967157129705071571E4928Q;\n+static const __float128 one = 1.0Q;\n+static const __float128 zero = 0.0Q;\n+static const __float128 huge = 1.0e4000Q;\n+\n+/* log gamma(x) = ( x - 0.5 ) * log(x) - x + LS2PI + 1/x P(1/x^2)\n+   1/x <= 0.0741 (x >= 13.495...)\n+   Peak relative error 1.5e-36  */\n+static const __float128 ls2pi = 9.1893853320467274178032973640561763986140E-1Q;\n+#define NRASY 12\n+static const __float128 RASY[NRASY + 1] =\n+{\n+  8.333333333333333333333333333310437112111E-2Q,\n+ -2.777777777777777777777774789556228296902E-3Q,\n+  7.936507936507936507795933938448586499183E-4Q,\n+ -5.952380952380952041799269756378148574045E-4Q,\n+  8.417508417507928904209891117498524452523E-4Q,\n+ -1.917526917481263997778542329739806086290E-3Q,\n+  6.410256381217852504446848671499409919280E-3Q,\n+ -2.955064066900961649768101034477363301626E-2Q,\n+  1.796402955865634243663453415388336954675E-1Q,\n+ -1.391522089007758553455753477688592767741E0Q,\n+  1.326130089598399157988112385013829305510E1Q,\n+ -1.420412699593782497803472576479997819149E2Q,\n+  1.218058922427762808938869872528846787020E3Q\n+};\n+\n+\n+/* log gamma(x+13) = log gamma(13) +  x P(x)/Q(x)\n+   -0.5 <= x <= 0.5\n+   12.5 <= x+13 <= 13.5\n+   Peak relative error 1.1e-36  */\n+static const __float128 lgam13a = 1.9987213134765625E1Q;\n+static const __float128 lgam13b = 1.3608962611495173623870550785125024484248E-6Q;\n+#define NRN13 7\n+static const __float128 RN13[NRN13 + 1] =\n+{\n+  8.591478354823578150238226576156275285700E11Q,\n+  2.347931159756482741018258864137297157668E11Q,\n+  2.555408396679352028680662433943000804616E10Q,\n+  1.408581709264464345480765758902967123937E9Q,\n+  4.126759849752613822953004114044451046321E7Q,\n+  6.133298899622688505854211579222889943778E5Q,\n+  3.929248056293651597987893340755876578072E3Q,\n+  6.850783280018706668924952057996075215223E0Q\n+};\n+#define NRD13 6\n+static const __float128 RD13[NRD13 + 1] =\n+{\n+  3.401225382297342302296607039352935541669E11Q,\n+  8.756765276918037910363513243563234551784E10Q,\n+  8.873913342866613213078554180987647243903E9Q,\n+  4.483797255342763263361893016049310017973E8Q,\n+  1.178186288833066430952276702931512870676E7Q,\n+  1.519928623743264797939103740132278337476E5Q,\n+  7.989298844938119228411117593338850892311E2Q\n+ /* 1.0E0Q */\n+};\n+\n+\n+/* log gamma(x+12) = log gamma(12) +  x P(x)/Q(x)\n+   -0.5 <= x <= 0.5\n+   11.5 <= x+12 <= 12.5\n+   Peak relative error 4.1e-36  */\n+static const __float128 lgam12a = 1.75023040771484375E1Q;\n+static const __float128 lgam12b = 3.7687254483392876529072161996717039575982E-6Q;\n+#define NRN12 7\n+static const __float128 RN12[NRN12 + 1] =\n+{\n+  4.709859662695606986110997348630997559137E11Q,\n+  1.398713878079497115037857470168777995230E11Q,\n+  1.654654931821564315970930093932954900867E10Q,\n+  9.916279414876676861193649489207282144036E8Q,\n+  3.159604070526036074112008954113411389879E7Q,\n+  5.109099197547205212294747623977502492861E5Q,\n+  3.563054878276102790183396740969279826988E3Q,\n+  6.769610657004672719224614163196946862747E0Q\n+};\n+#define NRD12 6\n+static const __float128 RD12[NRD12 + 1] =\n+{\n+  1.928167007860968063912467318985802726613E11Q,\n+  5.383198282277806237247492369072266389233E10Q,\n+  5.915693215338294477444809323037871058363E9Q,\n+  3.241438287570196713148310560147925781342E8Q,\n+  9.236680081763754597872713592701048455890E6Q,\n+  1.292246897881650919242713651166596478850E5Q,\n+  7.366532445427159272584194816076600211171E2Q\n+ /* 1.0E0Q */\n+};\n+\n+\n+/* log gamma(x+11) = log gamma(11) +  x P(x)/Q(x)\n+   -0.5 <= x <= 0.5\n+   10.5 <= x+11 <= 11.5\n+   Peak relative error 1.8e-35  */\n+static const __float128 lgam11a = 1.5104400634765625E1Q;\n+static const __float128 lgam11b = 1.1938309890295225709329251070371882250744E-5Q;\n+#define NRN11 7\n+static const __float128 RN11[NRN11 + 1] =\n+{\n+  2.446960438029415837384622675816736622795E11Q,\n+  7.955444974446413315803799763901729640350E10Q,\n+  1.030555327949159293591618473447420338444E10Q,\n+  6.765022131195302709153994345470493334946E8Q,\n+  2.361892792609204855279723576041468347494E7Q,\n+  4.186623629779479136428005806072176490125E5Q,\n+  3.202506022088912768601325534149383594049E3Q,\n+  6.681356101133728289358838690666225691363E0Q\n+};\n+#define NRD11 6\n+static const __float128 RD11[NRD11 + 1] =\n+{\n+  1.040483786179428590683912396379079477432E11Q,\n+  3.172251138489229497223696648369823779729E10Q,\n+  3.806961885984850433709295832245848084614E9Q,\n+  2.278070344022934913730015420611609620171E8Q,\n+  7.089478198662651683977290023829391596481E6Q,\n+  1.083246385105903533237139380509590158658E5Q,\n+  6.744420991491385145885727942219463243597E2Q\n+ /* 1.0E0Q */\n+};\n+\n+\n+/* log gamma(x+10) = log gamma(10) +  x P(x)/Q(x)\n+   -0.5 <= x <= 0.5\n+   9.5 <= x+10 <= 10.5\n+   Peak relative error 5.4e-37  */\n+static const __float128 lgam10a = 1.280181884765625E1Q;\n+static const __float128 lgam10b = 8.6324252196112077178745667061642811492557E-6Q;\n+#define NRN10 7\n+static const __float128 RN10[NRN10 + 1] =\n+{\n+  -1.239059737177249934158597996648808363783E14Q,\n+  -4.725899566371458992365624673357356908719E13Q,\n+  -7.283906268647083312042059082837754850808E12Q,\n+  -5.802855515464011422171165179767478794637E11Q,\n+  -2.532349691157548788382820303182745897298E10Q,\n+  -5.884260178023777312587193693477072061820E8Q,\n+  -6.437774864512125749845840472131829114906E6Q,\n+  -2.350975266781548931856017239843273049384E4Q\n+};\n+#define NRD10 7\n+static const __float128 RD10[NRD10 + 1] =\n+{\n+  -5.502645997581822567468347817182347679552E13Q,\n+  -1.970266640239849804162284805400136473801E13Q,\n+  -2.819677689615038489384974042561531409392E12Q,\n+  -2.056105863694742752589691183194061265094E11Q,\n+  -8.053670086493258693186307810815819662078E9Q,\n+  -1.632090155573373286153427982504851867131E8Q,\n+  -1.483575879240631280658077826889223634921E6Q,\n+  -4.002806669713232271615885826373550502510E3Q\n+ /* 1.0E0Q */\n+};\n+\n+\n+/* log gamma(x+9) = log gamma(9) +  x P(x)/Q(x)\n+   -0.5 <= x <= 0.5\n+   8.5 <= x+9 <= 9.5\n+   Peak relative error 3.6e-36  */\n+static const __float128 lgam9a = 1.06045989990234375E1Q;\n+static const __float128 lgam9b = 3.9037218127284172274007216547549861681400E-6Q;\n+#define NRN9 7\n+static const __float128 RN9[NRN9 + 1] =\n+{\n+  -4.936332264202687973364500998984608306189E13Q,\n+  -2.101372682623700967335206138517766274855E13Q,\n+  -3.615893404644823888655732817505129444195E12Q,\n+  -3.217104993800878891194322691860075472926E11Q,\n+  -1.568465330337375725685439173603032921399E10Q,\n+  -4.073317518162025744377629219101510217761E8Q,\n+  -4.983232096406156139324846656819246974500E6Q,\n+  -2.036280038903695980912289722995505277253E4Q\n+};\n+#define NRD9 7\n+static const __float128 RD9[NRD9 + 1] =\n+{\n+  -2.306006080437656357167128541231915480393E13Q,\n+  -9.183606842453274924895648863832233799950E12Q,\n+  -1.461857965935942962087907301194381010380E12Q,\n+  -1.185728254682789754150068652663124298303E11Q,\n+  -5.166285094703468567389566085480783070037E9Q,\n+  -1.164573656694603024184768200787835094317E8Q,\n+  -1.177343939483908678474886454113163527909E6Q,\n+  -3.529391059783109732159524500029157638736E3Q\n+  /* 1.0E0Q */\n+};\n+\n+\n+/* log gamma(x+8) = log gamma(8) +  x P(x)/Q(x)\n+   -0.5 <= x <= 0.5\n+   7.5 <= x+8 <= 8.5\n+   Peak relative error 2.4e-37  */\n+static const __float128 lgam8a = 8.525146484375E0Q;\n+static const __float128 lgam8b = 1.4876690414300165531036347125050759667737E-5Q;\n+#define NRN8 8\n+static const __float128 RN8[NRN8 + 1] =\n+{\n+  6.600775438203423546565361176829139703289E11Q,\n+  3.406361267593790705240802723914281025800E11Q,\n+  7.222460928505293914746983300555538432830E10Q,\n+  8.102984106025088123058747466840656458342E9Q,\n+  5.157620015986282905232150979772409345927E8Q,\n+  1.851445288272645829028129389609068641517E7Q,\n+  3.489261702223124354745894067468953756656E5Q,\n+  2.892095396706665774434217489775617756014E3Q,\n+  6.596977510622195827183948478627058738034E0Q\n+};\n+#define NRD8 7\n+static const __float128 RD8[NRD8 + 1] =\n+{\n+  3.274776546520735414638114828622673016920E11Q,\n+  1.581811207929065544043963828487733970107E11Q,\n+  3.108725655667825188135393076860104546416E10Q,\n+  3.193055010502912617128480163681842165730E9Q,\n+  1.830871482669835106357529710116211541839E8Q,\n+  5.790862854275238129848491555068073485086E6Q,\n+  9.305213264307921522842678835618803553589E4Q,\n+  6.216974105861848386918949336819572333622E2Q\n+  /* 1.0E0Q */\n+};\n+\n+\n+/* log gamma(x+7) = log gamma(7) +  x P(x)/Q(x)\n+   -0.5 <= x <= 0.5\n+   6.5 <= x+7 <= 7.5\n+   Peak relative error 3.2e-36  */\n+static const __float128 lgam7a = 6.5792388916015625E0Q;\n+static const __float128 lgam7b = 1.2320408538495060178292903945321122583007E-5Q;\n+#define NRN7 8\n+static const __float128 RN7[NRN7 + 1] =\n+{\n+  2.065019306969459407636744543358209942213E11Q,\n+  1.226919919023736909889724951708796532847E11Q,\n+  2.996157990374348596472241776917953749106E10Q,\n+  3.873001919306801037344727168434909521030E9Q,\n+  2.841575255593761593270885753992732145094E8Q,\n+  1.176342515359431913664715324652399565551E7Q,\n+  2.558097039684188723597519300356028511547E5Q,\n+  2.448525238332609439023786244782810774702E3Q,\n+  6.460280377802030953041566617300902020435E0Q\n+};\n+#define NRD7 7\n+static const __float128 RD7[NRD7 + 1] =\n+{\n+  1.102646614598516998880874785339049304483E11Q,\n+  6.099297512712715445879759589407189290040E10Q,\n+  1.372898136289611312713283201112060238351E10Q,\n+  1.615306270420293159907951633566635172343E9Q,\n+  1.061114435798489135996614242842561967459E8Q,\n+  3.845638971184305248268608902030718674691E6Q,\n+  7.081730675423444975703917836972720495507E4Q,\n+  5.423122582741398226693137276201344096370E2Q\n+  /* 1.0E0Q */\n+};\n+\n+\n+/* log gamma(x+6) = log gamma(6) +  x P(x)/Q(x)\n+   -0.5 <= x <= 0.5\n+   5.5 <= x+6 <= 6.5\n+   Peak relative error 6.2e-37  */\n+static const __float128 lgam6a = 4.7874908447265625E0Q;\n+static const __float128 lgam6b = 8.9805548349424770093452324304839959231517E-7Q;\n+#define NRN6 8\n+static const __float128 RN6[NRN6 + 1] =\n+{\n+  -3.538412754670746879119162116819571823643E13Q,\n+  -2.613432593406849155765698121483394257148E13Q,\n+  -8.020670732770461579558867891923784753062E12Q,\n+  -1.322227822931250045347591780332435433420E12Q,\n+  -1.262809382777272476572558806855377129513E11Q,\n+  -7.015006277027660872284922325741197022467E9Q,\n+  -2.149320689089020841076532186783055727299E8Q,\n+  -3.167210585700002703820077565539658995316E6Q,\n+  -1.576834867378554185210279285358586385266E4Q\n+};\n+#define NRD6 8\n+static const __float128 RD6[NRD6 + 1] =\n+{\n+  -2.073955870771283609792355579558899389085E13Q,\n+  -1.421592856111673959642750863283919318175E13Q,\n+  -4.012134994918353924219048850264207074949E12Q,\n+  -6.013361045800992316498238470888523722431E11Q,\n+  -5.145382510136622274784240527039643430628E10Q,\n+  -2.510575820013409711678540476918249524123E9Q,\n+  -6.564058379709759600836745035871373240904E7Q,\n+  -7.861511116647120540275354855221373571536E5Q,\n+  -2.821943442729620524365661338459579270561E3Q\n+  /* 1.0E0Q */\n+};\n+\n+\n+/* log gamma(x+5) = log gamma(5) +  x P(x)/Q(x)\n+   -0.5 <= x <= 0.5\n+   4.5 <= x+5 <= 5.5\n+   Peak relative error 3.4e-37  */\n+static const __float128 lgam5a = 3.17803955078125E0Q;\n+static const __float128 lgam5b = 1.4279566695619646941601297055408873990961E-5Q;\n+#define NRN5 9\n+static const __float128 RN5[NRN5 + 1] =\n+{\n+  2.010952885441805899580403215533972172098E11Q,\n+  1.916132681242540921354921906708215338584E11Q,\n+  7.679102403710581712903937970163206882492E10Q,\n+  1.680514903671382470108010973615268125169E10Q,\n+  2.181011222911537259440775283277711588410E9Q,\n+  1.705361119398837808244780667539728356096E8Q,\n+  7.792391565652481864976147945997033946360E6Q,\n+  1.910741381027985291688667214472560023819E5Q,\n+  2.088138241893612679762260077783794329559E3Q,\n+  6.330318119566998299106803922739066556550E0Q\n+};\n+#define NRD5 8\n+static const __float128 RD5[NRD5 + 1] =\n+{\n+  1.335189758138651840605141370223112376176E11Q,\n+  1.174130445739492885895466097516530211283E11Q,\n+  4.308006619274572338118732154886328519910E10Q,\n+  8.547402888692578655814445003283720677468E9Q,\n+  9.934628078575618309542580800421370730906E8Q,\n+  6.847107420092173812998096295422311820672E7Q,\n+  2.698552646016599923609773122139463150403E6Q,\n+  5.526516251532464176412113632726150253215E4Q,\n+  4.772343321713697385780533022595450486932E2Q\n+  /* 1.0E0Q */\n+};\n+\n+\n+/* log gamma(x+4) = log gamma(4) +  x P(x)/Q(x)\n+   -0.5 <= x <= 0.5\n+   3.5 <= x+4 <= 4.5\n+   Peak relative error 6.7e-37  */\n+static const __float128 lgam4a = 1.791748046875E0Q;\n+static const __float128 lgam4b = 1.1422353055000812477358380702272722990692E-5Q;\n+#define NRN4 9\n+static const __float128 RN4[NRN4 + 1] =\n+{\n+  -1.026583408246155508572442242188887829208E13Q,\n+  -1.306476685384622809290193031208776258809E13Q,\n+  -7.051088602207062164232806511992978915508E12Q,\n+  -2.100849457735620004967624442027793656108E12Q,\n+  -3.767473790774546963588549871673843260569E11Q,\n+  -4.156387497364909963498394522336575984206E10Q,\n+  -2.764021460668011732047778992419118757746E9Q,\n+  -1.036617204107109779944986471142938641399E8Q,\n+  -1.895730886640349026257780896972598305443E6Q,\n+  -1.180509051468390914200720003907727988201E4Q\n+};\n+#define NRD4 9\n+static const __float128 RD4[NRD4 + 1] =\n+{\n+  -8.172669122056002077809119378047536240889E12Q,\n+  -9.477592426087986751343695251801814226960E12Q,\n+  -4.629448850139318158743900253637212801682E12Q,\n+  -1.237965465892012573255370078308035272942E12Q,\n+  -1.971624313506929845158062177061297598956E11Q,\n+  -1.905434843346570533229942397763361493610E10Q,\n+  -1.089409357680461419743730978512856675984E9Q,\n+  -3.416703082301143192939774401370222822430E7Q,\n+  -4.981791914177103793218433195857635265295E5Q,\n+  -2.192507743896742751483055798411231453733E3Q\n+  /* 1.0E0Q */\n+};\n+\n+\n+/* log gamma(x+3) = log gamma(3) +  x P(x)/Q(x)\n+   -0.25 <= x <= 0.5\n+   2.75 <= x+3 <= 3.5\n+   Peak relative error 6.0e-37  */\n+static const __float128 lgam3a = 6.93145751953125E-1Q;\n+static const __float128 lgam3b = 1.4286068203094172321214581765680755001344E-6Q;\n+\n+#define NRN3 9\n+static const __float128 RN3[NRN3 + 1] =\n+{\n+  -4.813901815114776281494823863935820876670E11Q,\n+  -8.425592975288250400493910291066881992620E11Q,\n+  -6.228685507402467503655405482985516909157E11Q,\n+  -2.531972054436786351403749276956707260499E11Q,\n+  -6.170200796658926701311867484296426831687E10Q,\n+  -9.211477458528156048231908798456365081135E9Q,\n+  -8.251806236175037114064561038908691305583E8Q,\n+  -4.147886355917831049939930101151160447495E7Q,\n+  -1.010851868928346082547075956946476932162E6Q,\n+  -8.333374463411801009783402800801201603736E3Q\n+};\n+#define NRD3 9\n+static const __float128 RD3[NRD3 + 1] =\n+{\n+  -5.216713843111675050627304523368029262450E11Q,\n+  -8.014292925418308759369583419234079164391E11Q,\n+  -5.180106858220030014546267824392678611990E11Q,\n+  -1.830406975497439003897734969120997840011E11Q,\n+  -3.845274631904879621945745960119924118925E10Q,\n+  -4.891033385370523863288908070309417710903E9Q,\n+  -3.670172254411328640353855768698287474282E8Q,\n+  -1.505316381525727713026364396635522516989E7Q,\n+  -2.856327162923716881454613540575964890347E5Q,\n+  -1.622140448015769906847567212766206894547E3Q\n+  /* 1.0E0Q */\n+};\n+\n+\n+/* log gamma(x+2.5) = log gamma(2.5) +  x P(x)/Q(x)\n+   -0.125 <= x <= 0.25\n+   2.375 <= x+2.5 <= 2.75  */\n+static const __float128 lgam2r5a = 2.8466796875E-1Q;\n+static const __float128 lgam2r5b = 1.4901722919159632494669682701924320137696E-5Q;\n+#define NRN2r5 8\n+static const __float128 RN2r5[NRN2r5 + 1] =\n+{\n+  -4.676454313888335499356699817678862233205E9Q,\n+  -9.361888347911187924389905984624216340639E9Q,\n+  -7.695353600835685037920815799526540237703E9Q,\n+  -3.364370100981509060441853085968900734521E9Q,\n+  -8.449902011848163568670361316804900559863E8Q,\n+  -1.225249050950801905108001246436783022179E8Q,\n+  -9.732972931077110161639900388121650470926E6Q,\n+  -3.695711763932153505623248207576425983573E5Q,\n+  -4.717341584067827676530426007495274711306E3Q\n+};\n+#define NRD2r5 8\n+static const __float128 RD2r5[NRD2r5 + 1] =\n+{\n+  -6.650657966618993679456019224416926875619E9Q,\n+  -1.099511409330635807899718829033488771623E10Q,\n+  -7.482546968307837168164311101447116903148E9Q,\n+  -2.702967190056506495988922973755870557217E9Q,\n+  -5.570008176482922704972943389590409280950E8Q,\n+  -6.536934032192792470926310043166993233231E7Q,\n+  -4.101991193844953082400035444146067511725E6Q,\n+  -1.174082735875715802334430481065526664020E5Q,\n+  -9.932840389994157592102947657277692978511E2Q\n+  /* 1.0E0Q */\n+};\n+\n+\n+/* log gamma(x+2) = x P(x)/Q(x)\n+   -0.125 <= x <= +0.375\n+   1.875 <= x+2 <= 2.375\n+   Peak relative error 4.6e-36  */\n+#define NRN2 9\n+static const __float128 RN2[NRN2 + 1] =\n+{\n+  -3.716661929737318153526921358113793421524E9Q,\n+  -1.138816715030710406922819131397532331321E10Q,\n+  -1.421017419363526524544402598734013569950E10Q,\n+  -9.510432842542519665483662502132010331451E9Q,\n+  -3.747528562099410197957514973274474767329E9Q,\n+  -8.923565763363912474488712255317033616626E8Q,\n+  -1.261396653700237624185350402781338231697E8Q,\n+  -9.918402520255661797735331317081425749014E6Q,\n+  -3.753996255897143855113273724233104768831E5Q,\n+  -4.778761333044147141559311805999540765612E3Q\n+};\n+#define NRD2 9\n+static const __float128 RD2[NRD2 + 1] =\n+{\n+  -8.790916836764308497770359421351673950111E9Q,\n+  -2.023108608053212516399197678553737477486E10Q,\n+  -1.958067901852022239294231785363504458367E10Q,\n+  -1.035515043621003101254252481625188704529E10Q,\n+  -3.253884432621336737640841276619272224476E9Q,\n+  -6.186383531162456814954947669274235815544E8Q,\n+  -6.932557847749518463038934953605969951466E7Q,\n+  -4.240731768287359608773351626528479703758E6Q,\n+  -1.197343995089189188078944689846348116630E5Q,\n+  -1.004622911670588064824904487064114090920E3Q\n+/* 1.0E0 */\n+};\n+\n+\n+/* log gamma(x+1.75) = log gamma(1.75) +  x P(x)/Q(x)\n+   -0.125 <= x <= +0.125\n+   1.625 <= x+1.75 <= 1.875\n+   Peak relative error 9.2e-37 */\n+static const __float128 lgam1r75a = -8.441162109375E-2Q;\n+static const __float128 lgam1r75b = 1.0500073264444042213965868602268256157604E-5Q;\n+#define NRN1r75 8\n+static const __float128 RN1r75[NRN1r75 + 1] =\n+{\n+  -5.221061693929833937710891646275798251513E7Q,\n+  -2.052466337474314812817883030472496436993E8Q,\n+  -2.952718275974940270675670705084125640069E8Q,\n+  -2.132294039648116684922965964126389017840E8Q,\n+  -8.554103077186505960591321962207519908489E7Q,\n+  -1.940250901348870867323943119132071960050E7Q,\n+  -2.379394147112756860769336400290402208435E6Q,\n+  -1.384060879999526222029386539622255797389E5Q,\n+  -2.698453601378319296159355612094598695530E3Q\n+};\n+#define NRD1r75 8\n+static const __float128 RD1r75[NRD1r75 + 1] =\n+{\n+  -2.109754689501705828789976311354395393605E8Q,\n+  -5.036651829232895725959911504899241062286E8Q,\n+  -4.954234699418689764943486770327295098084E8Q,\n+  -2.589558042412676610775157783898195339410E8Q,\n+  -7.731476117252958268044969614034776883031E7Q,\n+  -1.316721702252481296030801191240867486965E7Q,\n+  -1.201296501404876774861190604303728810836E6Q,\n+  -5.007966406976106636109459072523610273928E4Q,\n+  -6.155817990560743422008969155276229018209E2Q\n+  /* 1.0E0Q */\n+};\n+\n+\n+/* log gamma(x+x0) = y0 +  x^2 P(x)/Q(x)\n+   -0.0867 <= x <= +0.1634\n+   1.374932... <= x+x0 <= 1.625032...\n+   Peak relative error 4.0e-36  */\n+static const __float128 x0a = 1.4616241455078125Q;\n+static const __float128 x0b = 7.9994605498412626595423257213002588621246E-6Q;\n+static const __float128 y0a = -1.21490478515625E-1Q;\n+static const __float128 y0b = 4.1879797753919044854428223084178486438269E-6Q;\n+#define NRN1r5 8\n+static const __float128 RN1r5[NRN1r5 + 1] =\n+{\n+  6.827103657233705798067415468881313128066E5Q,\n+  1.910041815932269464714909706705242148108E6Q,\n+  2.194344176925978377083808566251427771951E6Q,\n+  1.332921400100891472195055269688876427962E6Q,\n+  4.589080973377307211815655093824787123508E5Q,\n+  8.900334161263456942727083580232613796141E4Q,\n+  9.053840838306019753209127312097612455236E3Q,\n+  4.053367147553353374151852319743594873771E2Q,\n+  5.040631576303952022968949605613514584950E0Q\n+};\n+#define NRD1r5 8\n+static const __float128 RD1r5[NRD1r5 + 1] =\n+{\n+  1.411036368843183477558773688484699813355E6Q,\n+  4.378121767236251950226362443134306184849E6Q,\n+  5.682322855631723455425929877581697918168E6Q,\n+  3.999065731556977782435009349967042222375E6Q,\n+  1.653651390456781293163585493620758410333E6Q,\n+  4.067774359067489605179546964969435858311E5Q,\n+  5.741463295366557346748361781768833633256E4Q,\n+  4.226404539738182992856094681115746692030E3Q,\n+  1.316980975410327975566999780608618774469E2Q,\n+  /* 1.0E0Q */\n+};\n+\n+\n+/* log gamma(x+1.25) = log gamma(1.25) +  x P(x)/Q(x)\n+   -.125 <= x <= +.125\n+   1.125 <= x+1.25 <= 1.375\n+   Peak relative error = 4.9e-36 */\n+static const __float128 lgam1r25a = -9.82818603515625E-2Q;\n+static const __float128 lgam1r25b = 1.0023929749338536146197303364159774377296E-5Q;\n+#define NRN1r25 9\n+static const __float128 RN1r25[NRN1r25 + 1] =\n+{\n+  -9.054787275312026472896002240379580536760E4Q,\n+  -8.685076892989927640126560802094680794471E4Q,\n+  2.797898965448019916967849727279076547109E5Q,\n+  6.175520827134342734546868356396008898299E5Q,\n+  5.179626599589134831538516906517372619641E5Q,\n+  2.253076616239043944538380039205558242161E5Q,\n+  5.312653119599957228630544772499197307195E4Q,\n+  6.434329437514083776052669599834938898255E3Q,\n+  3.385414416983114598582554037612347549220E2Q,\n+  4.907821957946273805080625052510832015792E0Q\n+};\n+#define NRD1r25 8\n+static const __float128 RD1r25[NRD1r25 + 1] =\n+{\n+  3.980939377333448005389084785896660309000E5Q,\n+  1.429634893085231519692365775184490465542E6Q,\n+  2.145438946455476062850151428438668234336E6Q,\n+  1.743786661358280837020848127465970357893E6Q,\n+  8.316364251289743923178092656080441655273E5Q,\n+  2.355732939106812496699621491135458324294E5Q,\n+  3.822267399625696880571810137601310855419E4Q,\n+  3.228463206479133236028576845538387620856E3Q,\n+  1.152133170470059555646301189220117965514E2Q\n+  /* 1.0E0Q */\n+};\n+\n+\n+/* log gamma(x + 1) = x P(x)/Q(x)\n+   0.0 <= x <= +0.125\n+   1.0 <= x+1 <= 1.125\n+   Peak relative error 1.1e-35  */\n+#define NRN1 8\n+static const __float128 RN1[NRN1 + 1] =\n+{\n+  -9.987560186094800756471055681088744738818E3Q,\n+  -2.506039379419574361949680225279376329742E4Q,\n+  -1.386770737662176516403363873617457652991E4Q,\n+  1.439445846078103202928677244188837130744E4Q,\n+  2.159612048879650471489449668295139990693E4Q,\n+  1.047439813638144485276023138173676047079E4Q,\n+  2.250316398054332592560412486630769139961E3Q,\n+  1.958510425467720733041971651126443864041E2Q,\n+  4.516830313569454663374271993200291219855E0Q\n+};\n+#define NRD1 7\n+static const __float128 RD1[NRD1 + 1] =\n+{\n+  1.730299573175751778863269333703788214547E4Q,\n+  6.807080914851328611903744668028014678148E4Q,\n+  1.090071629101496938655806063184092302439E5Q,\n+  9.124354356415154289343303999616003884080E4Q,\n+  4.262071638655772404431164427024003253954E4Q,\n+  1.096981664067373953673982635805821283581E4Q,\n+  1.431229503796575892151252708527595787588E3Q,\n+  7.734110684303689320830401788262295992921E1Q\n+ /* 1.0E0 */\n+};\n+\n+\n+/* log gamma(x + 1) = x P(x)/Q(x)\n+   -0.125 <= x <= 0\n+   0.875 <= x+1 <= 1.0\n+   Peak relative error 7.0e-37  */\n+#define NRNr9 8\n+static const __float128 RNr9[NRNr9 + 1] =\n+{\n+  4.441379198241760069548832023257571176884E5Q,\n+  1.273072988367176540909122090089580368732E6Q,\n+  9.732422305818501557502584486510048387724E5Q,\n+  -5.040539994443998275271644292272870348684E5Q,\n+  -1.208719055525609446357448132109723786736E6Q,\n+  -7.434275365370936547146540554419058907156E5Q,\n+  -2.075642969983377738209203358199008185741E5Q,\n+  -2.565534860781128618589288075109372218042E4Q,\n+  -1.032901669542994124131223797515913955938E3Q,\n+};\n+#define NRDr9 8\n+static const __float128 RDr9[NRDr9 + 1] =\n+{\n+  -7.694488331323118759486182246005193998007E5Q,\n+  -3.301918855321234414232308938454112213751E6Q,\n+  -5.856830900232338906742924836032279404702E6Q,\n+  -5.540672519616151584486240871424021377540E6Q,\n+  -3.006530901041386626148342989181721176919E6Q,\n+  -9.350378280513062139466966374330795935163E5Q,\n+  -1.566179100031063346901755685375732739511E5Q,\n+  -1.205016539620260779274902967231510804992E4Q,\n+  -2.724583156305709733221564484006088794284E2Q\n+/* 1.0E0 */\n+};\n+\n+\n+/* Evaluate P[n] x^n  +  P[n-1] x^(n-1)  +  ...  +  P[0] */\n+\n+static __float128\n+neval (__float128 x, const __float128 *p, int n)\n+{\n+  __float128 y;\n+\n+  p += n;\n+  y = *p--;\n+  do\n+    {\n+      y = y * x + *p--;\n+    }\n+  while (--n > 0);\n+  return y;\n+}\n+\n+\n+/* Evaluate x^n+1  +  P[n] x^(n)  +  P[n-1] x^(n-1)  +  ...  +  P[0] */\n+\n+static __float128\n+deval (__float128 x, const __float128 *p, int n)\n+{\n+  __float128 y;\n+\n+  p += n;\n+  y = x + *p--;\n+  do\n+    {\n+      y = y * x + *p--;\n+    }\n+  while (--n > 0);\n+  return y;\n+}\n+\n+\n+__float128\n+lgammaq (__float128 x)\n+{\n+  __float128 p, q, w, z, nx;\n+  int i, nn, sign;\n+\n+  sign = 1;\n+\n+  if (! finiteq (x))\n+    return x * x;\n+\n+  if (x == 0.0Q)\n+    {\n+      if (signbitq (x))\n+        sign = -1;\n+    }\n+\n+  if (x < 0.0Q)\n+    {\n+      q = -x;\n+      p = floorq (q);\n+      if (p == q)\n+\treturn (one / (p - p));\n+      i = p;\n+      if ((i & 1) == 0)\n+\tsign = -1;\n+      else\n+\tsign = 1;\n+      z = q - p;\n+      if (z > 0.5Q)\n+\t{\n+\t  p += 1.0Q;\n+\t  z = p - q;\n+\t}\n+      z = q * sinq (PIQ * z);\n+      if (z == 0.0Q)\n+\treturn (sign * huge * huge);\n+      w = lgammaq (q);\n+      z = logq (PIQ / z) - w;\n+      return (z);\n+    }\n+\n+  if (x < 13.5Q)\n+    {\n+      p = 0.0Q;\n+      nx = floorq (x + 0.5Q);\n+      nn = nx;\n+      switch (nn)\n+\t{\n+\tcase 0:\n+\t  /* log gamma (x + 1) = log(x) + log gamma(x) */\n+\t  if (x <= 0.125)\n+\t    {\n+\t      p = x * neval (x, RN1, NRN1) / deval (x, RD1, NRD1);\n+\t    }\n+\t  else if (x <= 0.375)\n+\t    {\n+\t      z = x - 0.25Q;\n+\t      p = z * neval (z, RN1r25, NRN1r25) / deval (z, RD1r25, NRD1r25);\n+\t      p += lgam1r25b;\n+\t      p += lgam1r25a;\n+\t    }\n+\t  else if (x <= 0.625)\n+\t    {\n+\t      z = x + (1.0Q - x0a);\n+\t      z = z - x0b;\n+\t      p = neval (z, RN1r5, NRN1r5) / deval (z, RD1r5, NRD1r5);\n+\t      p = p * z * z;\n+\t      p = p + y0b;\n+\t      p = p + y0a;\n+\t    }\n+\t  else if (x <= 0.875)\n+\t    {\n+\t      z = x - 0.75Q;\n+\t      p = z * neval (z, RN1r75, NRN1r75) / deval (z, RD1r75, NRD1r75);\n+\t      p += lgam1r75b;\n+\t      p += lgam1r75a;\n+\t    }\n+\t  else\n+\t    {\n+\t      z = x - 1.0Q;\n+\t      p = z * neval (z, RN2, NRN2) / deval (z, RD2, NRD2);\n+\t    }\n+\t  p = p - logq (x);\n+\t  break;\n+\n+\tcase 1:\n+\t  if (x < 0.875Q)\n+\t    {\n+\t      if (x <= 0.625)\n+\t\t{\n+\t\t  z = x + (1.0Q - x0a);\n+\t\t  z = z - x0b;\n+\t\t  p = neval (z, RN1r5, NRN1r5) / deval (z, RD1r5, NRD1r5);\n+\t\t  p = p * z * z;\n+\t\t  p = p + y0b;\n+\t\t  p = p + y0a;\n+\t\t}\n+\t      else if (x <= 0.875)\n+\t\t{\n+\t\t  z = x - 0.75Q;\n+\t\t  p = z * neval (z, RN1r75, NRN1r75)\n+\t\t        / deval (z, RD1r75, NRD1r75);\n+\t\t  p += lgam1r75b;\n+\t\t  p += lgam1r75a;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  z = x - 1.0Q;\n+\t\t  p = z * neval (z, RN2, NRN2) / deval (z, RD2, NRD2);\n+\t\t}\n+\t      p = p - logq (x);\n+\t    }\n+\t  else if (x < 1.0Q)\n+\t    {\n+\t      z = x - 1.0Q;\n+\t      p = z * neval (z, RNr9, NRNr9) / deval (z, RDr9, NRDr9);\n+\t    }\n+\t  else if (x == 1.0Q)\n+\t    p = 0.0Q;\n+\t  else if (x <= 1.125Q)\n+\t    {\n+\t      z = x - 1.0Q;\n+\t      p = z * neval (z, RN1, NRN1) / deval (z, RD1, NRD1);\n+\t    }\n+\t  else if (x <= 1.375)\n+\t    {\n+\t      z = x - 1.25Q;\n+\t      p = z * neval (z, RN1r25, NRN1r25) / deval (z, RD1r25, NRD1r25);\n+\t      p += lgam1r25b;\n+\t      p += lgam1r25a;\n+\t    }\n+\t  else\n+\t    {\n+\t      /* 1.375 <= x+x0 <= 1.625 */\n+\t      z = x - x0a;\n+\t      z = z - x0b;\n+\t      p = neval (z, RN1r5, NRN1r5) / deval (z, RD1r5, NRD1r5);\n+\t      p = p * z * z;\n+\t      p = p + y0b;\n+\t      p = p + y0a;\n+\t    }\n+\t  break;\n+\n+\tcase 2:\n+\t  if (x < 1.625Q)\n+\t    {\n+\t      z = x - x0a;\n+\t      z = z - x0b;\n+\t      p = neval (z, RN1r5, NRN1r5) / deval (z, RD1r5, NRD1r5);\n+\t      p = p * z * z;\n+\t      p = p + y0b;\n+\t      p = p + y0a;\n+\t    }\n+\t  else if (x < 1.875Q)\n+\t    {\n+\t      z = x - 1.75Q;\n+\t      p = z * neval (z, RN1r75, NRN1r75) / deval (z, RD1r75, NRD1r75);\n+\t      p += lgam1r75b;\n+\t      p += lgam1r75a;\n+\t    }\n+\t  else if (x == 2.0Q)\n+\t    p = 0.0Q;\n+\t  else if (x < 2.375Q)\n+\t    {\n+\t      z = x - 2.0Q;\n+\t      p = z * neval (z, RN2, NRN2) / deval (z, RD2, NRD2);\n+\t    }\n+\t  else\n+\t    {\n+\t      z = x - 2.5Q;\n+\t      p = z * neval (z, RN2r5, NRN2r5) / deval (z, RD2r5, NRD2r5);\n+\t      p += lgam2r5b;\n+\t      p += lgam2r5a;\n+\t    }\n+\t  break;\n+\n+\tcase 3:\n+\t  if (x < 2.75)\n+\t    {\n+\t      z = x - 2.5Q;\n+\t      p = z * neval (z, RN2r5, NRN2r5) / deval (z, RD2r5, NRD2r5);\n+\t      p += lgam2r5b;\n+\t      p += lgam2r5a;\n+\t    }\n+\t  else\n+\t    {\n+\t      z = x - 3.0Q;\n+\t      p = z * neval (z, RN3, NRN3) / deval (z, RD3, NRD3);\n+\t      p += lgam3b;\n+\t      p += lgam3a;\n+\t    }\n+\t  break;\n+\n+\tcase 4:\n+\t  z = x - 4.0Q;\n+\t  p = z * neval (z, RN4, NRN4) / deval (z, RD4, NRD4);\n+\t  p += lgam4b;\n+\t  p += lgam4a;\n+\t  break;\n+\n+\tcase 5:\n+\t  z = x - 5.0Q;\n+\t  p = z * neval (z, RN5, NRN5) / deval (z, RD5, NRD5);\n+\t  p += lgam5b;\n+\t  p += lgam5a;\n+\t  break;\n+\n+\tcase 6:\n+\t  z = x - 6.0Q;\n+\t  p = z * neval (z, RN6, NRN6) / deval (z, RD6, NRD6);\n+\t  p += lgam6b;\n+\t  p += lgam6a;\n+\t  break;\n+\n+\tcase 7:\n+\t  z = x - 7.0Q;\n+\t  p = z * neval (z, RN7, NRN7) / deval (z, RD7, NRD7);\n+\t  p += lgam7b;\n+\t  p += lgam7a;\n+\t  break;\n+\n+\tcase 8:\n+\t  z = x - 8.0Q;\n+\t  p = z * neval (z, RN8, NRN8) / deval (z, RD8, NRD8);\n+\t  p += lgam8b;\n+\t  p += lgam8a;\n+\t  break;\n+\n+\tcase 9:\n+\t  z = x - 9.0Q;\n+\t  p = z * neval (z, RN9, NRN9) / deval (z, RD9, NRD9);\n+\t  p += lgam9b;\n+\t  p += lgam9a;\n+\t  break;\n+\n+\tcase 10:\n+\t  z = x - 10.0Q;\n+\t  p = z * neval (z, RN10, NRN10) / deval (z, RD10, NRD10);\n+\t  p += lgam10b;\n+\t  p += lgam10a;\n+\t  break;\n+\n+\tcase 11:\n+\t  z = x - 11.0Q;\n+\t  p = z * neval (z, RN11, NRN11) / deval (z, RD11, NRD11);\n+\t  p += lgam11b;\n+\t  p += lgam11a;\n+\t  break;\n+\n+\tcase 12:\n+\t  z = x - 12.0Q;\n+\t  p = z * neval (z, RN12, NRN12) / deval (z, RD12, NRD12);\n+\t  p += lgam12b;\n+\t  p += lgam12a;\n+\t  break;\n+\n+\tcase 13:\n+\t  z = x - 13.0Q;\n+\t  p = z * neval (z, RN13, NRN13) / deval (z, RD13, NRD13);\n+\t  p += lgam13b;\n+\t  p += lgam13a;\n+\t  break;\n+\t}\n+      return p;\n+    }\n+\n+  if (x > MAXLGM)\n+    return (sign * huge * huge);\n+\n+  q = ls2pi - x;\n+  q = (x - 0.5Q) * logq (x) + q;\n+  if (x > 1.0e18Q)\n+    return (q);\n+\n+  p = 1.0Q / (x * x);\n+  q += neval (p, RASY, NRASY) / x;\n+  return (q);\n+}"}, {"sha": "c108e7ad18a0347c3d2dd9005e6035b83421d831", "filename": "libquadmath/math/llroundq.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fllroundq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fllroundq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fllroundq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,73 @@\n+/* Round long double value to long long int.\n+   Copyright (C) 1997, 1999, 2004 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997 and\n+   \t\t  Jakub Jelinek <jj@ultra.linux.cz>, 1999.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+   02111-1307 USA.  */\n+\n+#include \"quadmath-imp.h\"\n+\n+\n+long long int\n+llroundq (__float128 x)\n+{\n+  int64_t j0;\n+  uint64_t i1, i0;\n+  long long int result;\n+  int sign;\n+\n+  GET_FLT128_WORDS64 (i0, i1, x);\n+  j0 = ((i0 >> 48) & 0x7fff) - 0x3fff;\n+  sign = (i0 & 0x8000000000000000ULL) != 0 ? -1 : 1;\n+  i0 &= 0x0000ffffffffffffLL;\n+  i0 |= 0x0001000000000000LL;\n+\n+  if (j0 < 48)\n+    {\n+      if (j0 < 0)\n+\treturn j0 < -1 ? 0 : sign;\n+      else\n+\t{\n+\t  i0 += 0x0000800000000000LL >> j0;\n+\t  result = i0 >> (48 - j0);\n+\t}\n+    }\n+  else if (j0 < (int32_t) (8 * sizeof (long long int)) - 1)\n+    {\n+      if (j0 >= 112)\n+\tresult = ((long long int) i0 << (j0 - 48)) | (i1 << (j0 - 112));\n+      else\n+\t{\n+\t  uint64_t j = i1 + (0x8000000000000000ULL >> (j0 - 48));\n+\t  if (j < i1)\n+\t    ++i0;\n+\n+\t  if (j0 == 48)\n+\t    result = (long long int) i0;\n+\t  else\n+\t    result = ((long long int) i0 << (j0 - 48)) | (j >> (112 - j0));\n+\t}\n+    }\n+  else\n+    {\n+      /* The number is too large.  It is left implementation defined\n+\t what happens.  */\n+      return (long long int) x;\n+    }\n+\n+  return sign * result;\n+}"}, {"sha": "50caf18b7fd8dcdff8aa30fe204e0abde0114966", "filename": "libquadmath/math/log10q.c", "status": "added", "additions": 256, "deletions": 0, "changes": 256, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Flog10q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Flog10q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Flog10q.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,256 @@\n+/*\t\t\t\t\t\t\tlog10l.c\n+ *\n+ *\tCommon logarithm, 128-bit long double precision\n+ *\n+ *\n+ *\n+ * SYNOPSIS:\n+ *\n+ * long double x, y, log10l();\n+ *\n+ * y = log10l( x );\n+ *\n+ *\n+ *\n+ * DESCRIPTION:\n+ *\n+ * Returns the base 10 logarithm of x.\n+ *\n+ * The argument is separated into its exponent and fractional\n+ * parts.  If the exponent is between -1 and +1, the logarithm\n+ * of the fraction is approximated by\n+ *\n+ *     log(1+x) = x - 0.5 x^2 + x^3 P(x)/Q(x).\n+ *\n+ * Otherwise, setting  z = 2(x-1)/x+1),\n+ *\n+ *     log(x) = z + z^3 P(z)/Q(z).\n+ *\n+ *\n+ *\n+ * ACCURACY:\n+ *\n+ *                      Relative error:\n+ * arithmetic   domain     # trials      peak         rms\n+ *    IEEE      0.5, 2.0     30000      2.3e-34     4.9e-35\n+ *    IEEE     exp(+-10000)  30000      1.0e-34     4.1e-35\n+ *\n+ * In the tests over the interval exp(+-10000), the logarithms\n+ * of the random arguments were uniformly distributed over\n+ * [-10000, +10000].\n+ *\n+ */\n+\n+/*\n+   Cephes Math Library Release 2.2:  January, 1991\n+   Copyright 1984, 1991 by Stephen L. Moshier\n+   Adapted for glibc November, 2001\n+\n+    This library is free software; you can redistribute it and/or\n+    modify it under the terms of the GNU Lesser General Public\n+    License as published by the Free Software Foundation; either\n+    version 2.1 of the License, or (at your option) any later version.\n+\n+    This library is distributed in the hope that it will be useful,\n+    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+    Lesser General Public License for more details.\n+\n+    You should have received a copy of the GNU Lesser General Public\n+    License along with this library; if not, write to the Free Software\n+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA \n+\n+ */\n+\n+#include \"quadmath-imp.h\"\n+\n+/* Coefficients for ln(1+x) = x - x**2/2 + x**3 P(x)/Q(x)\n+ * 1/sqrt(2) <= x < sqrt(2)\n+ * Theoretical peak relative error = 5.3e-37,\n+ * relative peak error spread = 2.3e-14\n+ */\n+static const __float128 P[13] =\n+{\n+  1.313572404063446165910279910527789794488E4Q,\n+  7.771154681358524243729929227226708890930E4Q,\n+  2.014652742082537582487669938141683759923E5Q,\n+  3.007007295140399532324943111654767187848E5Q,\n+  2.854829159639697837788887080758954924001E5Q,\n+  1.797628303815655343403735250238293741397E5Q,\n+  7.594356839258970405033155585486712125861E4Q,\n+  2.128857716871515081352991964243375186031E4Q,\n+  3.824952356185897735160588078446136783779E3Q,\n+  4.114517881637811823002128927449878962058E2Q,\n+  2.321125933898420063925789532045674660756E1Q,\n+  4.998469661968096229986658302195402690910E-1Q,\n+  1.538612243596254322971797716843006400388E-6Q\n+};\n+static const __float128 Q[12] =\n+{\n+  3.940717212190338497730839731583397586124E4Q,\n+  2.626900195321832660448791748036714883242E5Q,\n+  7.777690340007566932935753241556479363645E5Q,\n+  1.347518538384329112529391120390701166528E6Q,\n+  1.514882452993549494932585972882995548426E6Q,\n+  1.158019977462989115839826904108208787040E6Q,\n+  6.132189329546557743179177159925690841200E5Q,\n+  2.248234257620569139969141618556349415120E5Q,\n+  5.605842085972455027590989944010492125825E4Q,\n+  9.147150349299596453976674231612674085381E3Q,\n+  9.104928120962988414618126155557301584078E2Q,\n+  4.839208193348159620282142911143429644326E1Q\n+/* 1.000000000000000000000000000000000000000E0Q, */\n+};\n+\n+/* Coefficients for log(x) = z + z^3 P(z^2)/Q(z^2),\n+ * where z = 2(x-1)/(x+1)\n+ * 1/sqrt(2) <= x < sqrt(2)\n+ * Theoretical peak relative error = 1.1e-35,\n+ * relative peak error spread 1.1e-9\n+ */\n+static const __float128 R[6] =\n+{\n+  1.418134209872192732479751274970992665513E5Q,\n+ -8.977257995689735303686582344659576526998E4Q,\n+  2.048819892795278657810231591630928516206E4Q,\n+ -2.024301798136027039250415126250455056397E3Q,\n+  8.057002716646055371965756206836056074715E1Q,\n+ -8.828896441624934385266096344596648080902E-1Q\n+};\n+static const __float128 S[6] =\n+{\n+  1.701761051846631278975701529965589676574E6Q,\n+ -1.332535117259762928288745111081235577029E6Q,\n+  4.001557694070773974936904547424676279307E5Q,\n+ -5.748542087379434595104154610899551484314E4Q,\n+  3.998526750980007367835804959888064681098E3Q,\n+ -1.186359407982897997337150403816839480438E2Q\n+/* 1.000000000000000000000000000000000000000E0Q, */\n+};\n+\n+static const __float128\n+/* log10(2) */\n+L102A = 0.3125Q,\n+L102B = -1.14700043360188047862611052755069732318101185E-2Q,\n+/* log10(e) */\n+L10EA = 0.5Q,\n+L10EB = -6.570551809674817234887108108339491770560299E-2Q,\n+/* sqrt(2)/2 */\n+SQRTH = 7.071067811865475244008443621048490392848359E-1Q;\n+\n+\n+\n+/* Evaluate P[n] x^n  +  P[n-1] x^(n-1)  +  ...  +  P[0] */\n+\n+static __float128\n+neval (__float128 x, const __float128 *p, int n)\n+{\n+  __float128 y;\n+\n+  p += n;\n+  y = *p--;\n+  do\n+    {\n+      y = y * x + *p--;\n+    }\n+  while (--n > 0);\n+  return y;\n+}\n+\n+\n+/* Evaluate x^n+1  +  P[n] x^(n)  +  P[n-1] x^(n-1)  +  ...  +  P[0] */\n+\n+static __float128\n+deval (__float128 x, const __float128 *p, int n)\n+{\n+  __float128 y;\n+\n+  p += n;\n+  y = x + *p--;\n+  do\n+    {\n+      y = y * x + *p--;\n+    }\n+  while (--n > 0);\n+  return y;\n+}\n+\n+\n+\n+__float128\n+log10q (__float128 x)\n+{\n+  __float128 z;\n+  __float128 y;\n+  int e;\n+  int64_t hx, lx;\n+\n+/* Test for domain */\n+  GET_FLT128_WORDS64 (hx, lx, x);\n+  if (((hx & 0x7fffffffffffffffLL) | lx) == 0)\n+    return (-1.0Q / (x - x));\n+  if (hx < 0)\n+    return (x - x) / (x - x);\n+  if (hx >= 0x7fff000000000000LL)\n+    return (x + x);\n+\n+/* separate mantissa from exponent */\n+\n+/* Note, frexp is used so that denormal numbers\n+ * will be handled properly.\n+ */\n+  x = frexpq (x, &e);\n+\n+\n+/* logarithm using log(x) = z + z**3 P(z)/Q(z),\n+ * where z = 2(x-1)/x+1)\n+ */\n+  if ((e > 2) || (e < -2))\n+    {\n+      if (x < SQRTH)\n+\t{\t\t\t/* 2( 2x-1 )/( 2x+1 ) */\n+\t  e -= 1;\n+\t  z = x - 0.5Q;\n+\t  y = 0.5Q * z + 0.5Q;\n+\t}\n+      else\n+\t{\t\t\t/*  2 (x-1)/(x+1)   */\n+\t  z = x - 0.5Q;\n+\t  z -= 0.5Q;\n+\t  y = 0.5Q * x + 0.5Q;\n+\t}\n+      x = z / y;\n+      z = x * x;\n+      y = x * (z * neval (z, R, 5) / deval (z, S, 5));\n+      goto done;\n+    }\n+\n+\n+/* logarithm using log(1+x) = x - .5x**2 + x**3 P(x)/Q(x) */\n+\n+  if (x < SQRTH)\n+    {\n+      e -= 1;\n+      x = 2.0 * x - 1.0Q;\t/*  2x - 1  */\n+    }\n+  else\n+    {\n+      x = x - 1.0Q;\n+    }\n+  z = x * x;\n+  y = x * (z * neval (x, P, 12) / deval (x, Q, 11));\n+  y = y - 0.5 * z;\n+\n+done:\n+\n+  /* Multiply log of fraction by log10(e)\n+   * and base 2 exponent by log10(2).\n+   */\n+  z = y * L10EB;\n+  z += x * L10EB;\n+  z += e * L102B;\n+  z += y * L10EA;\n+  z += x * L10EA;\n+  z += e * L102A;\n+  return (z);\n+}"}, {"sha": "a466dc8921eefca510eefedf8996e21c393a805e", "filename": "libquadmath/math/log1pq.c", "status": "added", "additions": 244, "deletions": 0, "changes": 244, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Flog1pq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Flog1pq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Flog1pq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,244 @@\n+/*\t\t\t\t\t\t\tlog1pl.c\n+ *\n+ *      Relative error logarithm\n+ *\tNatural logarithm of 1+x, 128-bit long double precision\n+ *\n+ *\n+ *\n+ * SYNOPSIS:\n+ *\n+ * long double x, y, log1pl();\n+ *\n+ * y = log1pl( x );\n+ *\n+ *\n+ *\n+ * DESCRIPTION:\n+ *\n+ * Returns the base e (2.718...) logarithm of 1+x.\n+ *\n+ * The argument 1+x is separated into its exponent and fractional\n+ * parts.  If the exponent is between -1 and +1, the logarithm\n+ * of the fraction is approximated by\n+ *\n+ *     log(1+x) = x - 0.5 x^2 + x^3 P(x)/Q(x).\n+ *\n+ * Otherwise, setting  z = 2(w-1)/(w+1),\n+ *\n+ *     log(w) = z + z^3 P(z)/Q(z).\n+ *\n+ *\n+ *\n+ * ACCURACY:\n+ *\n+ *                      Relative error:\n+ * arithmetic   domain     # trials      peak         rms\n+ *    IEEE      -1, 8       100000      1.9e-34     4.3e-35\n+ */\n+\n+/* Copyright 2001 by Stephen L. Moshier \n+\n+    This library is free software; you can redistribute it and/or\n+    modify it under the terms of the GNU Lesser General Public\n+    License as published by the Free Software Foundation; either\n+    version 2.1 of the License, or (at your option) any later version.\n+\n+    This library is distributed in the hope that it will be useful,\n+    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+    Lesser General Public License for more details.\n+\n+    You should have received a copy of the GNU Lesser General Public\n+    License along with this library; if not, write to the Free Software\n+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA */\n+\n+\n+#include \"quadmath-imp.h\"\n+\n+/* Coefficients for log(1+x) = x - x^2 / 2 + x^3 P(x)/Q(x)\n+ * 1/sqrt(2) <= 1+x < sqrt(2)\n+ * Theoretical peak relative error = 5.3e-37,\n+ * relative peak error spread = 2.3e-14\n+ */\n+static const __float128\n+  P12 = 1.538612243596254322971797716843006400388E-6Q,\n+  P11 = 4.998469661968096229986658302195402690910E-1Q,\n+  P10 = 2.321125933898420063925789532045674660756E1Q,\n+  P9 = 4.114517881637811823002128927449878962058E2Q,\n+  P8 = 3.824952356185897735160588078446136783779E3Q,\n+  P7 = 2.128857716871515081352991964243375186031E4Q,\n+  P6 = 7.594356839258970405033155585486712125861E4Q,\n+  P5 = 1.797628303815655343403735250238293741397E5Q,\n+  P4 = 2.854829159639697837788887080758954924001E5Q,\n+  P3 = 3.007007295140399532324943111654767187848E5Q,\n+  P2 = 2.014652742082537582487669938141683759923E5Q,\n+  P1 = 7.771154681358524243729929227226708890930E4Q,\n+  P0 = 1.313572404063446165910279910527789794488E4Q,\n+  /* Q12 = 1.000000000000000000000000000000000000000E0Q, */\n+  Q11 = 4.839208193348159620282142911143429644326E1Q,\n+  Q10 = 9.104928120962988414618126155557301584078E2Q,\n+  Q9 = 9.147150349299596453976674231612674085381E3Q,\n+  Q8 = 5.605842085972455027590989944010492125825E4Q,\n+  Q7 = 2.248234257620569139969141618556349415120E5Q,\n+  Q6 = 6.132189329546557743179177159925690841200E5Q,\n+  Q5 = 1.158019977462989115839826904108208787040E6Q,\n+  Q4 = 1.514882452993549494932585972882995548426E6Q,\n+  Q3 = 1.347518538384329112529391120390701166528E6Q,\n+  Q2 = 7.777690340007566932935753241556479363645E5Q,\n+  Q1 = 2.626900195321832660448791748036714883242E5Q,\n+  Q0 = 3.940717212190338497730839731583397586124E4Q;\n+\n+/* Coefficients for log(x) = z + z^3 P(z^2)/Q(z^2),\n+ * where z = 2(x-1)/(x+1)\n+ * 1/sqrt(2) <= x < sqrt(2)\n+ * Theoretical peak relative error = 1.1e-35,\n+ * relative peak error spread 1.1e-9\n+ */\n+static const __float128\n+  R5 = -8.828896441624934385266096344596648080902E-1Q,\n+  R4 = 8.057002716646055371965756206836056074715E1Q,\n+  R3 = -2.024301798136027039250415126250455056397E3Q,\n+  R2 = 2.048819892795278657810231591630928516206E4Q,\n+  R1 = -8.977257995689735303686582344659576526998E4Q,\n+  R0 = 1.418134209872192732479751274970992665513E5Q,\n+  /* S6 = 1.000000000000000000000000000000000000000E0Q, */\n+  S5 = -1.186359407982897997337150403816839480438E2Q,\n+  S4 = 3.998526750980007367835804959888064681098E3Q,\n+  S3 = -5.748542087379434595104154610899551484314E4Q,\n+  S2 = 4.001557694070773974936904547424676279307E5Q,\n+  S1 = -1.332535117259762928288745111081235577029E6Q,\n+  S0 = 1.701761051846631278975701529965589676574E6Q;\n+\n+/* C1 + C2 = ln 2 */\n+static const __float128 C1 = 6.93145751953125E-1Q;\n+static const __float128 C2 = 1.428606820309417232121458176568075500134E-6Q;\n+\n+static const __float128 sqrth = 0.7071067811865475244008443621048490392848Q;\n+static const __float128 zero = 0.0Q;\n+\n+\n+__float128\n+log1pq (__float128 xm1)\n+{\n+  __float128 x, y, z, r, s;\n+  ieee854_float128 u;\n+  int32_t hx;\n+  int e;\n+\n+  /* Test for NaN or infinity input. */\n+  u.value = xm1;\n+  hx = u.words32.w0;\n+  if (hx >= 0x7fff0000)\n+    return xm1;\n+\n+  /* log1p(+- 0) = +- 0.  */\n+  if (((hx & 0x7fffffff) == 0)\n+      && (u.words32.w1 | u.words32.w2 | u.words32.w3) == 0)\n+    return xm1;\n+\n+  x = xm1 + 1.0Q;\n+\n+  /* log1p(-1) = -inf */\n+  if (x <= 0.0Q)\n+    {\n+      if (x == 0.0Q)\n+\treturn (-1.0Q / (x - x));\n+      else\n+\treturn (zero / (x - x));\n+    }\n+\n+  /* Separate mantissa from exponent.  */\n+\n+  /* Use frexp used so that denormal numbers will be handled properly.  */\n+  x = frexpq (x, &e);\n+\n+  /* Logarithm using log(x) = z + z^3 P(z^2)/Q(z^2),\n+     where z = 2(x-1)/x+1).  */\n+  if ((e > 2) || (e < -2))\n+    {\n+      if (x < sqrth)\n+\t{\t\t\t/* 2( 2x-1 )/( 2x+1 ) */\n+\t  e -= 1;\n+\t  z = x - 0.5Q;\n+\t  y = 0.5Q * z + 0.5Q;\n+\t}\n+      else\n+\t{\t\t\t/*  2 (x-1)/(x+1)   */\n+\t  z = x - 0.5Q;\n+\t  z -= 0.5Q;\n+\t  y = 0.5Q * x + 0.5Q;\n+\t}\n+      x = z / y;\n+      z = x * x;\n+      r = ((((R5 * z\n+\t      + R4) * z\n+\t     + R3) * z\n+\t    + R2) * z\n+\t   + R1) * z\n+\t+ R0;\n+      s = (((((z\n+\t       + S5) * z\n+\t      + S4) * z\n+\t     + S3) * z\n+\t    + S2) * z\n+\t   + S1) * z\n+\t+ S0;\n+      z = x * (z * r / s);\n+      z = z + e * C2;\n+      z = z + x;\n+      z = z + e * C1;\n+      return (z);\n+    }\n+\n+\n+  /* Logarithm using log(1+x) = x - .5x^2 + x^3 P(x)/Q(x). */\n+\n+  if (x < sqrth)\n+    {\n+      e -= 1;\n+      if (e != 0)\n+\tx = 2.0Q * x - 1.0Q;\t/*  2x - 1  */\n+      else\n+\tx = xm1;\n+    }\n+  else\n+    {\n+      if (e != 0)\n+\tx = x - 1.0Q;\n+      else\n+\tx = xm1;\n+    }\n+  z = x * x;\n+  r = (((((((((((P12 * x\n+\t\t + P11) * x\n+\t\t+ P10) * x\n+\t       + P9) * x\n+\t      + P8) * x\n+\t     + P7) * x\n+\t    + P6) * x\n+\t   + P5) * x\n+\t  + P4) * x\n+\t + P3) * x\n+\t+ P2) * x\n+       + P1) * x\n+    + P0;\n+  s = (((((((((((x\n+\t\t + Q11) * x\n+\t\t+ Q10) * x\n+\t       + Q9) * x\n+\t      + Q8) * x\n+\t     + Q7) * x\n+\t    + Q6) * x\n+\t   + Q5) * x\n+\t  + Q4) * x\n+\t + Q3) * x\n+\t+ Q2) * x\n+       + Q1) * x\n+    + Q0;\n+  y = x * (z * r / s);\n+  y = y + e * C2;\n+  z = y - 0.5Q * z;\n+  z = z + x;\n+  z = z + e * C1;\n+  return (z);\n+}"}, {"sha": "cd1a48631fa6d47e839a938cbbc343002c464539", "filename": "libquadmath/math/logq.c", "status": "added", "additions": 279, "deletions": 0, "changes": 279, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Flogq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Flogq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Flogq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8", "patch": "@@ -0,0 +1,279 @@\n+/*\t\t\t\t\t\t\tlogll.c\n+ *\n+ * Natural logarithm for 128-bit long double precision.\n+ *\n+ *\n+ *\n+ * SYNOPSIS:\n+ *\n+ * long double x, y, logl();\n+ *\n+ * y = logl( x );\n+ *\n+ *\n+ *\n+ * DESCRIPTION:\n+ *\n+ * Returns the base e (2.718...) logarithm of x.\n+ *\n+ * The argument is separated into its exponent and fractional\n+ * parts.  Use of a lookup table increases the speed of the routine.\n+ * The program uses logarithms tabulated at intervals of 1/128 to\n+ * cover the domain from approximately 0.7 to 1.4.\n+ *\n+ * On the interval [-1/128, +1/128] the logarithm of 1+x is approximated by\n+ *     log(1+x) = x - 0.5 x^2 + x^3 P(x) .\n+ *\n+ *\n+ *\n+ * ACCURACY:\n+ *\n+ *                      Relative error:\n+ * arithmetic   domain     # trials      peak         rms\n+ *    IEEE   0.875, 1.125   100000      1.2e-34    4.1e-35\n+ *    IEEE   0.125, 8       100000      1.2e-34    4.1e-35\n+ *\n+ *\n+ * WARNING:\n+ *\n+ * This program uses integer operations on bit fields of floating-point\n+ * numbers.  It does not work with data structures other than the\n+ * structure assumed.\n+ *\n+ */\n+\n+/* Copyright 2001 by Stephen L. Moshier <moshier@na-net.ornl.gov> \n+\n+    This library is free software; you can redistribute it and/or\n+    modify it under the terms of the GNU Lesser General Public\n+    License as published by the Free Software Foundation; either\n+    version 2.1 of the License, or (at your option) any later version.\n+\n+    This library is distributed in the hope that it will be useful,\n+    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+    Lesser General Public License for more details.\n+\n+    You should have received a copy of the GNU Lesser General Public\n+    License along with this library; if not, write to the Free Software\n+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA */\n+\n+#include \"quadmath-imp.h\"\n+\n+/* log(1+x) = x - .5 x^2 + x^3 l(x)\n+   -.0078125 <= x <= +.0078125\n+   peak relative error 1.2e-37 */\n+static const __float128\n+l3 =   3.333333333333333333333333333333336096926E-1Q,\n+l4 =  -2.499999999999999999999999999486853077002E-1Q,\n+l5 =   1.999999999999999999999999998515277861905E-1Q,\n+l6 =  -1.666666666666666666666798448356171665678E-1Q,\n+l7 =   1.428571428571428571428808945895490721564E-1Q,\n+l8 =  -1.249999999999999987884655626377588149000E-1Q,\n+l9 =   1.111111111111111093947834982832456459186E-1Q,\n+l10 = -1.000000000000532974938900317952530453248E-1Q,\n+l11 =  9.090909090915566247008015301349979892689E-2Q,\n+l12 = -8.333333211818065121250921925397567745734E-2Q,\n+l13 =  7.692307559897661630807048686258659316091E-2Q,\n+l14 = -7.144242754190814657241902218399056829264E-2Q,\n+l15 =  6.668057591071739754844678883223432347481E-2Q;\n+\n+/* Lookup table of ln(t) - (t-1)\n+    t = 0.5 + (k+26)/128)\n+    k = 0, ..., 91   */\n+static const __float128 logtbl[92] = {\n+-5.5345593589352099112142921677820359632418E-2Q,\n+-5.2108257402767124761784665198737642086148E-2Q,\n+-4.8991686870576856279407775480686721935120E-2Q,\n+-4.5993270766361228596215288742353061431071E-2Q,\n+-4.3110481649613269682442058976885699556950E-2Q,\n+-4.0340872319076331310838085093194799765520E-2Q,\n+-3.7682072451780927439219005993827431503510E-2Q,\n+-3.5131785416234343803903228503274262719586E-2Q,\n+-3.2687785249045246292687241862699949178831E-2Q,\n+-3.0347913785027239068190798397055267411813E-2Q,\n+-2.8110077931525797884641940838507561326298E-2Q,\n+-2.5972247078357715036426583294246819637618E-2Q,\n+-2.3932450635346084858612873953407168217307E-2Q,\n+-2.1988775689981395152022535153795155900240E-2Q,\n+-2.0139364778244501615441044267387667496733E-2Q,\n+-1.8382413762093794819267536615342902718324E-2Q,\n+-1.6716169807550022358923589720001638093023E-2Q,\n+-1.5138929457710992616226033183958974965355E-2Q,\n+-1.3649036795397472900424896523305726435029E-2Q,\n+-1.2244881690473465543308397998034325468152E-2Q,\n+-1.0924898127200937840689817557742469105693E-2Q,\n+-9.6875626072830301572839422532631079809328E-3Q,\n+-8.5313926245226231463436209313499745894157E-3Q,\n+-7.4549452072765973384933565912143044991706E-3Q,\n+-6.4568155251217050991200599386801665681310E-3Q,\n+-5.5356355563671005131126851708522185605193E-3Q,\n+-4.6900728132525199028885749289712348829878E-3Q,\n+-3.9188291218610470766469347968659624282519E-3Q,\n+-3.2206394539524058873423550293617843896540E-3Q,\n+-2.5942708080877805657374888909297113032132E-3Q,\n+-2.0385211375711716729239156839929281289086E-3Q,\n+-1.5522183228760777967376942769773768850872E-3Q,\n+-1.1342191863606077520036253234446621373191E-3Q,\n+-7.8340854719967065861624024730268350459991E-4Q,\n+-4.9869831458030115699628274852562992756174E-4Q,\n+-2.7902661731604211834685052867305795169688E-4Q,\n+-1.2335696813916860754951146082826952093496E-4Q,\n+-3.0677461025892873184042490943581654591817E-5Q,\n+#define ZERO logtbl[38]\n+ 0.0000000000000000000000000000000000000000E0Q,\n+-3.0359557945051052537099938863236321874198E-5Q,\n+-1.2081346403474584914595395755316412213151E-4Q,\n+-2.7044071846562177120083903771008342059094E-4Q,\n+-4.7834133324631162897179240322783590830326E-4Q,\n+-7.4363569786340080624467487620270965403695E-4Q,\n+-1.0654639687057968333207323853366578860679E-3Q,\n+-1.4429854811877171341298062134712230604279E-3Q,\n+-1.8753781835651574193938679595797367137975E-3Q,\n+-2.3618380914922506054347222273705859653658E-3Q,\n+-2.9015787624124743013946600163375853631299E-3Q,\n+-3.4938307889254087318399313316921940859043E-3Q,\n+-4.1378413103128673800485306215154712148146E-3Q,\n+-4.8328735414488877044289435125365629849599E-3Q,\n+-5.5782063183564351739381962360253116934243E-3Q,\n+-6.3731336597098858051938306767880719015261E-3Q,\n+-7.2169643436165454612058905294782949315193E-3Q,\n+-8.1090214990427641365934846191367315083867E-3Q,\n+-9.0486422112807274112838713105168375482480E-3Q,\n+-1.0035177140880864314674126398350812606841E-2Q,\n+-1.1067990155502102718064936259435676477423E-2Q,\n+-1.2146457974158024928196575103115488672416E-2Q,\n+-1.3269969823361415906628825374158424754308E-2Q,\n+-1.4437927104692837124388550722759686270765E-2Q,\n+-1.5649743073340777659901053944852735064621E-2Q,\n+-1.6904842527181702880599758489058031645317E-2Q,\n+-1.8202661505988007336096407340750378994209E-2Q,\n+-1.9542647000370545390701192438691126552961E-2Q,\n+-2.0924256670080119637427928803038530924742E-2Q,\n+-2.2346958571309108496179613803760727786257E-2Q,\n+-2.3810230892650362330447187267648486279460E-2Q,\n+-2.5313561699385640380910474255652501521033E-2Q,\n+-2.6856448685790244233704909690165496625399E-2Q,\n+-2.8438398935154170008519274953860128449036E-2Q,\n+-3.0058928687233090922411781058956589863039E-2Q,\n+-3.1717563112854831855692484086486099896614E-2Q,\n+-3.3413836095418743219397234253475252001090E-2Q,\n+-3.5147290019036555862676702093393332533702E-2Q,\n+-3.6917475563073933027920505457688955423688E-2Q,\n+-3.8723951502862058660874073462456610731178E-2Q,\n+-4.0566284516358241168330505467000838017425E-2Q,\n+-4.2444048996543693813649967076598766917965E-2Q,\n+-4.4356826869355401653098777649745233339196E-2Q,\n+-4.6304207416957323121106944474331029996141E-2Q,\n+-4.8285787106164123613318093945035804818364E-2Q,\n+-5.0301169421838218987124461766244507342648E-2Q,\n+-5.2349964705088137924875459464622098310997E-2Q,\n+-5.4431789996103111613753440311680967840214E-2Q,\n+-5.6546268881465384189752786409400404404794E-2Q,\n+-5.8693031345788023909329239565012647817664E-2Q,\n+-6.0871713627532018185577188079210189048340E-2Q,\n+-6.3081958078862169742820420185833800925568E-2Q,\n+-6.5323413029406789694910800219643791556918E-2Q,\n+-6.7595732653791419081537811574227049288168E-2Q\n+};\n+\n+/* ln(2) = ln2a + ln2b with extended precision. */\n+static const __float128\n+  ln2a = 6.93145751953125e-1Q,\n+  ln2b = 1.4286068203094172321214581765680755001344E-6Q;\n+\n+__float128\n+logq (__float128 x)\n+{\n+  __float128 z, y, w;\n+  ieee854_float128 u, t;\n+  unsigned int m;\n+  int k, e;\n+\n+  u.value = x;\n+  m = u.words32.w0;\n+\n+  /* Check for IEEE special cases.  */\n+  k = m & 0x7fffffff;\n+  /* log(0) = -infinity. */\n+  if ((k | u.words32.w1 | u.words32.w2 | u.words32.w3) == 0)\n+    {\n+      return -0.5Q / ZERO;\n+    }\n+  /* log ( x < 0 ) = NaN */\n+  if (m & 0x80000000)\n+    {\n+      return (x - x) / ZERO;\n+    }\n+  /* log (infinity or NaN) */\n+  if (k >= 0x7fff0000)\n+    {\n+      return x + x;\n+    }\n+\n+  /* Extract exponent and reduce domain to 0.703125 <= u < 1.40625  */\n+  e = (int) (m >> 16) - (int) 0x3ffe;\n+  m &= 0xffff;\n+  u.words32.w0 = m | 0x3ffe0000;\n+  m |= 0x10000;\n+  /* Find lookup table index k from high order bits of the significand. */\n+  if (m < 0x16800)\n+    {\n+      k = (m - 0xff00) >> 9;\n+      /* t is the argument 0.5 + (k+26)/128\n+\t of the nearest item to u in the lookup table.  */\n+      t.words32.w0 = 0x3fff0000 + (k << 9);\n+      t.words32.w1 = 0;\n+      t.words32.w2 = 0;\n+      t.words32.w3 = 0;\n+      u.words32.w0 += 0x10000;\n+      e -= 1;\n+      k += 64;\n+    }\n+  else\n+    {\n+      k = (m - 0xfe00) >> 10;\n+      t.words32.w0 = 0x3ffe0000 + (k << 10);\n+      t.words32.w1 = 0;\n+      t.words32.w2 = 0;\n+      t.words32.w3 = 0;\n+    }\n+  /* On this interval the table is not used due to cancellation error.  */\n+  if ((x <= 1.0078125Q) && (x >= 0.9921875Q))\n+    {\n+      z = x - 1.0Q;\n+      k = 64;\n+      t.value  = 1.0Q;\n+      e = 0;\n+    }\n+  else\n+    {\n+      /* log(u) = log( t u/t ) = log(t) + log(u/t)\n+\t log(t) is tabulated in the lookup table.\n+\t Express log(u/t) = log(1+z),  where z = u/t - 1 = (u-t)/t.\n+         cf. Cody & Waite. */\n+      z = (u.value - t.value) / t.value;\n+    }\n+  /* Series expansion of log(1+z).  */\n+  w = z * z;\n+  y = ((((((((((((l15 * z\n+\t\t  + l14) * z\n+\t\t + l13) * z\n+\t\t+ l12) * z\n+\t       + l11) * z\n+\t      + l10) * z\n+\t     + l9) * z\n+\t    + l8) * z\n+\t   + l7) * z\n+\t  + l6) * z\n+\t + l5) * z\n+\t+ l4) * z\n+       + l3) * z * w;\n+  y -= 0.5 * w;\n+  y += e * ln2b;  /* Base 2 exponent offset times ln(2).  */\n+  y += z;\n+  y += logtbl[k-26]; /* log(t) - (t-1) */\n+  y += (t.value - 1.0Q);\n+  y += e * ln2a;\n+  return y;\n+}"}, {"sha": "4b12d24526752e6aa6e51f06ffc98c1705214221", "filename": "libquadmath/math/lroundq.c", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Flroundq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Flroundq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Flroundq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8"}, {"sha": "dc564fe3555594e2a653f0c878fe2f158650db96", "filename": "libquadmath/math/modfq.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fmodfq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fmodfq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fmodfq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8"}, {"sha": "bace4706459e0fc1feebf000380325951c5d3eeb", "filename": "libquadmath/math/nanq.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fnanq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fnanq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fnanq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8"}, {"sha": "01bfa657901a3a293c1726e0fbf0559e7322aadc", "filename": "libquadmath/math/nextafterq.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fnextafterq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fnextafterq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fnextafterq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8"}, {"sha": "d38632438250d265eff4e584effced7c96126504", "filename": "libquadmath/math/powq.c", "status": "added", "additions": 440, "deletions": 0, "changes": 440, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fpowq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fpowq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fpowq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8"}, {"sha": "db0059dd1860ec9862cc746c2f5d03eca542869f", "filename": "libquadmath/math/rem_pio2q.c", "status": "added", "additions": 580, "deletions": 0, "changes": 580, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Frem_pio2q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Frem_pio2q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Frem_pio2q.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8"}, {"sha": "421f728ffe35ca43c9f4bf53e5ecc52f383507e0", "filename": "libquadmath/math/remainderq.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fremainderq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fremainderq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fremainderq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8"}, {"sha": "fe7a59188b4304b5610e2656b34b51a14ebc59e9", "filename": "libquadmath/math/rintq.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Frintq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Frintq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Frintq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8"}, {"sha": "d7f577bd941525c825d1660aaf51b803614421b7", "filename": "libquadmath/math/roundq.c", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Froundq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Froundq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Froundq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8"}, {"sha": "75997f688c4522caf44a7262a2ef7e21642719f3", "filename": "libquadmath/math/scalblnq.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fscalblnq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fscalblnq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fscalblnq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8"}, {"sha": "b7049a70e4521f2cb51f39bd400da481376bcdec", "filename": "libquadmath/math/scalbnq.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fscalbnq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fscalbnq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fscalbnq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8"}, {"sha": "2ddab8667a28e26ba393df6befca5714226c9353", "filename": "libquadmath/math/signbitq.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fsignbitq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fsignbitq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fsignbitq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8"}, {"sha": "b7e7c750314b11ebfa2a52b12097ad818c6e939a", "filename": "libquadmath/math/sincos_table.c", "status": "added", "additions": 696, "deletions": 0, "changes": 696, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fsincos_table.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fsincos_table.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fsincos_table.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8"}, {"sha": "a9f41fc99c8181ddc7958a2b595b3ac140ce7f77", "filename": "libquadmath/math/sincosq.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fsincosq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fsincosq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fsincosq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8"}, {"sha": "64ccaf83fca6b3156f168542fdfbf3786a8ec8f7", "filename": "libquadmath/math/sincosq_kernel.c", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fsincosq_kernel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fsincosq_kernel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fsincosq_kernel.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8"}, {"sha": "5492180a2a2d2b2a7b2a4e3b1ba78fb8694e956c", "filename": "libquadmath/math/sinhq.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fsinhq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fsinhq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fsinhq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8"}, {"sha": "2d573e42409a8f2e21c6b9d7bbe55a9de3e9ef80", "filename": "libquadmath/math/sinq.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fsinq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fsinq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fsinq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8"}, {"sha": "fdfe4e80599d97ef51086c861b8fc14d47b12e1e", "filename": "libquadmath/math/sinq_kernel.c", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fsinq_kernel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fsinq_kernel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fsinq_kernel.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8"}, {"sha": "6ed4605ed5ca346fd8fc3c476fc77aa4946fc4b4", "filename": "libquadmath/math/sqrtq.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fsqrtq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Fsqrtq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fsqrtq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8"}, {"sha": "4ef4fd02143849bb2d1b9a937bfc0b0c02823bf7", "filename": "libquadmath/math/tanhq.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Ftanhq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Ftanhq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ftanhq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8"}, {"sha": "c490c6a3025e7070909698725c0c7d393987d05a", "filename": "libquadmath/math/tanq.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Ftanq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Ftanq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ftanq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8"}, {"sha": "3305b6484cde5a70b0415f0fafff458c28e784c4", "filename": "libquadmath/math/tgammaq.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Ftgammaq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Ftgammaq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ftgammaq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8"}, {"sha": "608871785d11a4a930230dcb0e651e4b648b0b7a", "filename": "libquadmath/math/truncq.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Ftruncq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fmath%2Ftruncq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ftruncq.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8"}, {"sha": "e46ef8cb6ae49649a8443b1804f1753446614961", "filename": "libquadmath/quadmath-imp.h", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fquadmath-imp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fquadmath-imp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fquadmath-imp.h?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8"}, {"sha": "28dbe94470379dd019753ca51accb81af4c99c02", "filename": "libquadmath/quadmath.h", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fquadmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fquadmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fquadmath.h?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8"}, {"sha": "1d016fbd61285a59334338122777c12be2f7b0b4", "filename": "libquadmath/quadmath.map", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fquadmath.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fquadmath.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fquadmath.map?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8"}, {"sha": "82084f245b2978632ade11b69fef5bc6f90913cd", "filename": "libquadmath/quadmath_io.c", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fquadmath_io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fquadmath_io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fquadmath_io.c?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8"}, {"sha": "9857b586d7b8e522d4fec7ca2f36e4393bce5c10", "filename": "libquadmath/quadmath_weak.h", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fquadmath_weak.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec601bf9fb0fbc39b3a6cb90450500f857adae8/libquadmath%2Fquadmath_weak.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fquadmath_weak.h?ref=1ec601bf9fb0fbc39b3a6cb90450500f857adae8"}]}