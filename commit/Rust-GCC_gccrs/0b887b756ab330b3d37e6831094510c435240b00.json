{"sha": "0b887b756ab330b3d37e6831094510c435240b00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI4ODdiNzU2YWIzMzBiM2QzN2U2ODMxMDk0NTEwYzQzNTI0MGIwMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-06-05T07:52:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-06-05T07:52:23Z"}, "message": "omp-expand.c (struct omp_region): Add has_lastprivate_conditional member.\n\n\t* omp-expand.c (struct omp_region): Add has_lastprivate_conditional\n\tmember.\n\t(expand_parallel_call): If region->inner->has_lastprivate_conditional,\n\ttreat it like explicit monotonic schedule modifier.\n\t(expand_omp_for): Initialize has_lastprivate_conditional.\n\tIf fd.lastprivate_conditional != 0, treat it like explicit monotonic\n\tschedule modifier.\n\nFrom-SVN: r271949", "tree": {"sha": "a77bf26a0bc59ac2242d306d5e54f9978c90eeb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a77bf26a0bc59ac2242d306d5e54f9978c90eeb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b887b756ab330b3d37e6831094510c435240b00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b887b756ab330b3d37e6831094510c435240b00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b887b756ab330b3d37e6831094510c435240b00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b887b756ab330b3d37e6831094510c435240b00/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "28b3a77ca055b31aa20c6d263be42c49be32756b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28b3a77ca055b31aa20c6d263be42c49be32756b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28b3a77ca055b31aa20c6d263be42c49be32756b"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "6dc657f943feea16d833d500a3130f19becffbc6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b887b756ab330b3d37e6831094510c435240b00/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b887b756ab330b3d37e6831094510c435240b00/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b887b756ab330b3d37e6831094510c435240b00", "patch": "@@ -1,5 +1,13 @@\n 2019-06-05  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* omp-expand.c (struct omp_region): Add has_lastprivate_conditional\n+\tmember.\n+\t(expand_parallel_call): If region->inner->has_lastprivate_conditional,\n+\ttreat it like explicit monotonic schedule modifier.\n+\t(expand_omp_for): Initialize has_lastprivate_conditional.\n+\tIf fd.lastprivate_conditional != 0, treat it like explicit monotonic\n+\tschedule modifier.\n+\n \t* omp-low.c (lower_rec_input_clauses): For lastprivate conditional\n \treferences, lookup in in hash map MEM_REF operand instead of the\n \tMEM_REF itself."}, {"sha": "69344f449c9fea9030ea181de637deb274b4ee50", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b887b756ab330b3d37e6831094510c435240b00/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b887b756ab330b3d37e6831094510c435240b00/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=0b887b756ab330b3d37e6831094510c435240b00", "patch": "@@ -100,6 +100,9 @@ struct omp_region\n   /* True if this is a combined parallel+workshare region.  */\n   bool is_combined_parallel;\n \n+  /* Copy of fd.lastprivate_conditional != 0.  */\n+  bool has_lastprivate_conditional;\n+\n   /* The ordered stmt if type is GIMPLE_OMP_ORDERED and it has\n      a depend clause.  */\n   gomp_ordered *ord_stmt;\n@@ -601,8 +604,12 @@ expand_parallel_call (struct omp_region *region, basic_block bb,\n \t  switch (region->inner->sched_kind)\n \t    {\n \t    case OMP_CLAUSE_SCHEDULE_RUNTIME:\n-\t      if ((region->inner->sched_modifiers\n-\t\t   & OMP_CLAUSE_SCHEDULE_NONMONOTONIC) != 0)\n+\t      /* For lastprivate(conditional:), our implementation\n+\t\t requires monotonic behavior.  */\n+\t      if (region->inner->has_lastprivate_conditional != 0)\n+\t\tstart_ix2 = 3;\n+\t      else if ((region->inner->sched_modifiers\n+\t\t       & OMP_CLAUSE_SCHEDULE_NONMONOTONIC) != 0)\n \t\tstart_ix2 = 6;\n \t      else if ((region->inner->sched_modifiers\n \t\t\t& OMP_CLAUSE_SCHEDULE_MONOTONIC) == 0)\n@@ -613,7 +620,8 @@ expand_parallel_call (struct omp_region *region, basic_block bb,\n \t    case OMP_CLAUSE_SCHEDULE_DYNAMIC:\n \t    case OMP_CLAUSE_SCHEDULE_GUIDED:\n \t      if ((region->inner->sched_modifiers\n-\t\t   & OMP_CLAUSE_SCHEDULE_MONOTONIC) == 0)\n+\t\t   & OMP_CLAUSE_SCHEDULE_MONOTONIC) == 0\n+\t\t  && !region->inner->has_lastprivate_conditional)\n \t\t{\n \t\t  start_ix2 = 3 + region->inner->sched_kind;\n \t\t  break;\n@@ -6228,6 +6236,7 @@ expand_omp_for (struct omp_region *region, gimple *inner_stmt)\n \t\t\t&fd, loops);\n   region->sched_kind = fd.sched_kind;\n   region->sched_modifiers = fd.sched_modifiers;\n+  region->has_lastprivate_conditional = fd.lastprivate_conditional != 0;\n \n   gcc_assert (EDGE_COUNT (region->entry->succs) == 2);\n   BRANCH_EDGE (region->entry)->flags &= ~EDGE_ABNORMAL;\n@@ -6280,14 +6289,16 @@ expand_omp_for (struct omp_region *region, gimple *inner_stmt)\n       switch (fd.sched_kind)\n \t{\n \tcase OMP_CLAUSE_SCHEDULE_RUNTIME:\n-\t  if ((fd.sched_modifiers & OMP_CLAUSE_SCHEDULE_NONMONOTONIC) != 0)\n+\t  if ((fd.sched_modifiers & OMP_CLAUSE_SCHEDULE_NONMONOTONIC) != 0\n+\t      && fd.lastprivate_conditional == 0)\n \t    {\n \t      gcc_assert (!fd.have_ordered);\n \t      fn_index = 6;\n \t      sched = 4;\n \t    }\n \t  else if ((fd.sched_modifiers & OMP_CLAUSE_SCHEDULE_MONOTONIC) == 0\n-\t\t   && !fd.have_ordered)\n+\t\t   && !fd.have_ordered\n+\t\t   && fd.lastprivate_conditional == 0)\n \t    fn_index = 7;\n \t  else\n \t    {\n@@ -6298,7 +6309,8 @@ expand_omp_for (struct omp_region *region, gimple *inner_stmt)\n \tcase OMP_CLAUSE_SCHEDULE_DYNAMIC:\n \tcase OMP_CLAUSE_SCHEDULE_GUIDED:\n \t  if ((fd.sched_modifiers & OMP_CLAUSE_SCHEDULE_MONOTONIC) == 0\n-\t      && !fd.have_ordered)\n+\t      && !fd.have_ordered\n+\t      && fd.lastprivate_conditional == 0)\n \t    {\n \t      fn_index = 3 + fd.sched_kind;\n \t      sched = (fd.sched_kind == OMP_CLAUSE_SCHEDULE_GUIDED) + 2;"}]}