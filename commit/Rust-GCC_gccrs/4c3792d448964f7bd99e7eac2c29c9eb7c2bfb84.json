{"sha": "4c3792d448964f7bd99e7eac2c29c9eb7c2bfb84", "node_id": "C_kwDOANBUbNoAKDRjMzc5MmQ0NDg5NjRmN2JkOTllN2VhYzJjMjljOWViN2MyYmZiODQ", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2022-02-07T15:36:35Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2022-02-11T23:52:12Z"}, "message": "LRA, rs6000, Darwin: Amend lo_sum use for forced constants [PR104117].\n\nTwo issues resulted in this PR, which manifests when we force a constant into\nmemory in LRA (in PIC code on Darwin).  The presence of such forced constants\nis quite dependent on other RTL optimisations, and it is easy for the issue to\nbecome latent for a specific case.\n\nFirst, in the Darwin-specific rs6000 backend code, we were not being careful\nenough in rejecting invalid symbolic addresses.  Specifically, when generating\nPIC code, we require a SYMBOL_REF to be wrapped in an UNSPEC_MACHOPIC_OFFSET.\n\nSecond, LRA was attempting to load a register using an invalid lo_sum address.\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\nCo-authored-by: Vladimir Makarov <vmakarov@redhat.com>\n\n\tPR target/104117\n\ngcc/ChangeLog:\n\n\t* config/rs6000/rs6000.cc (darwin_rs6000_legitimate_lo_sum_const_p):\n\tCheck for UNSPEC_MACHOPIC_OFFSET wrappers on symbolic addresses when\n\temitting PIC code.\n\t(legitimate_lo_sum_address_p): Likewise.\n\t* lra-constraints.cc (process_address_1): Do not attempt to emit a reg\n\tload from an invalid lo_sum address.", "tree": {"sha": "276323b0c4b81ea182bad70f6dc70d4164e66cb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/276323b0c4b81ea182bad70f6dc70d4164e66cb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c3792d448964f7bd99e7eac2c29c9eb7c2bfb84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c3792d448964f7bd99e7eac2c29c9eb7c2bfb84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c3792d448964f7bd99e7eac2c29c9eb7c2bfb84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c3792d448964f7bd99e7eac2c29c9eb7c2bfb84/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13caa028f9f460f446c0bdeac33c672c9a91cf49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13caa028f9f460f446c0bdeac33c672c9a91cf49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13caa028f9f460f446c0bdeac33c672c9a91cf49"}], "stats": {"total": 55, "additions": 38, "deletions": 17}, "files": [{"sha": "bc3ef0721a46381a6297b6884ece971c1df002b0", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c3792d448964f7bd99e7eac2c29c9eb7c2bfb84/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c3792d448964f7bd99e7eac2c29c9eb7c2bfb84/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=4c3792d448964f7bd99e7eac2c29c9eb7c2bfb84", "patch": "@@ -8317,8 +8317,14 @@ darwin_rs6000_legitimate_lo_sum_const_p (rtx x, machine_mode mode)\n   if (GET_CODE (x) == CONST)\n     x = XEXP (x, 0);\n \n+  /* If we are building PIC code, then any symbol must be wrapped in an\n+     UNSPEC_MACHOPIC_OFFSET so that it will get the picbase subtracted.  */\n+  bool machopic_offs_p = false;\n   if (GET_CODE (x) == UNSPEC && XINT (x, 1) == UNSPEC_MACHOPIC_OFFSET)\n-    x =  XVECEXP (x, 0, 0);\n+    {\n+      x =  XVECEXP (x, 0, 0);\n+      machopic_offs_p = true;\n+    }\n \n   rtx sym = NULL_RTX;\n   unsigned HOST_WIDE_INT offset = 0;\n@@ -8349,6 +8355,9 @@ darwin_rs6000_legitimate_lo_sum_const_p (rtx x, machine_mode mode)\n   if (sym)\n     {\n       tree decl = SYMBOL_REF_DECL (sym);\n+      /* As noted above, PIC code cannot use a bare SYMBOL_REF.  */\n+      if (TARGET_MACHO && flag_pic && !machopic_offs_p)\n+\treturn false;\n #if TARGET_MACHO\n       if (MACHO_SYMBOL_INDIRECTION_P (sym))\n       /* The decl in an indirection symbol is the original one, which might\n@@ -8936,7 +8945,7 @@ legitimate_lo_sum_address_p (machine_mode mode, rtx x, int strict)\n     return false;\n   x = XEXP (x, 1);\n \n-  if (TARGET_ELF || TARGET_MACHO)\n+  if (TARGET_ELF)\n     {\n       bool large_toc_ok;\n \n@@ -8962,7 +8971,32 @@ legitimate_lo_sum_address_p (machine_mode mode, rtx x, int strict)\n \n       return CONSTANT_P (x) || large_toc_ok;\n     }\n+  else if (TARGET_MACHO)\n+    {\n+      if (GET_MODE_NUNITS (mode) != 1)\n+\treturn false;\n+      if (GET_MODE_SIZE (mode) > UNITS_PER_WORD\n+\t  && !(/* see above  */\n+\t       TARGET_HARD_FLOAT && (mode == DFmode || mode == DDmode)))\n+\treturn false;\n+#if TARGET_MACHO\n+      if (MACHO_DYNAMIC_NO_PIC_P || !flag_pic)\n+\treturn CONSTANT_P (x);\n+#endif\n+      /* Macho-O PIC code from here.  */\n+      if (GET_CODE (x) == CONST)\n+\tx = XEXP (x, 0);\n+\n+      /* SYMBOL_REFs need to be wrapped in an UNSPEC_MACHOPIC_OFFSET.  */\n+      if (SYMBOL_REF_P (x))\n+\treturn false;\n \n+      /* So this is OK if the wrapped object is const.  */\n+      if (GET_CODE (x) == UNSPEC\n+\t  && XINT (x, 1) == UNSPEC_MACHOPIC_OFFSET)\n+\treturn CONSTANT_P (XVECEXP (x, 0, 0));\n+      return CONSTANT_P (x);\n+    }\n   return false;\n }\n "}, {"sha": "c700c3f457840aeb170d4ae0ce4973cfaff438b8", "filename": "gcc/lra-constraints.cc", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c3792d448964f7bd99e7eac2c29c9eb7c2bfb84/gcc%2Flra-constraints.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c3792d448964f7bd99e7eac2c29c9eb7c2bfb84/gcc%2Flra-constraints.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.cc?ref=4c3792d448964f7bd99e7eac2c29c9eb7c2bfb84", "patch": "@@ -3625,21 +3625,8 @@ process_address_1 (int nop, bool check_only_p,\n \t\t  *ad.inner = gen_rtx_LO_SUM (Pmode, new_reg, addr);\n \t\t  if (!valid_address_p (op, &ad, cn))\n \t\t    {\n-\t\t      /* Try to put lo_sum into register.  */\n-\t\t      insn = emit_insn (gen_rtx_SET\n-\t\t\t\t\t(new_reg,\n-\t\t\t\t\t gen_rtx_LO_SUM (Pmode, new_reg, addr)));\n-\t\t      code = recog_memoized (insn);\n-\t\t      if (code >= 0)\n-\t\t\t{\n-\t\t\t  *ad.inner = new_reg;\n-\t\t\t  if (!valid_address_p (op, &ad, cn))\n-\t\t\t    {\n-\t\t\t      *ad.inner = addr;\n-\t\t\t      code = -1;\n-\t\t\t    }\n-\t\t\t}\n-\n+\t\t      *ad.inner = addr; /* Punt.  */\n+\t\t      code = -1;\n \t\t    }\n \t\t}\n \t      if (code < 0)"}]}