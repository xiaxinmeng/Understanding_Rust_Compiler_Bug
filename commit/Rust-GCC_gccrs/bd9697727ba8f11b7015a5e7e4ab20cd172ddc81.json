{"sha": "bd9697727ba8f11b7015a5e7e4ab20cd172ddc81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ5Njk3NzI3YmE4ZjExYjcwMTVhNWU3ZTRhYjIwY2QxNzJkZGM4MQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-02-01T19:13:53Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-02-01T19:13:53Z"}, "message": "cpphash.h (struct cpp_buffer): Move saved_flags from cpp_reader.\n\n        * cpphash.h (struct cpp_buffer): Move saved_flags from cpp_reader.\n        * cpplex.c (_cpp_lex_token): New token picks up the saved flags,\n        and AVOID_LPASTE is cleared on meeting an unescaped newline.\n        * cppmacro.c (builtin_macro): Set builtin flags here.\n        (paste_all_tokens): Preserve AVOID_LPASTE on pasted token.\n        (replace_args): Clarify intent.\n        (cpp_get_token): Macro expansion tokens get the saved flags.\n        Update.\n        * cppmain.c (scan_buffer): Remove now-redundant print.printed\n        check.\n\nFrom-SVN: r39393", "tree": {"sha": "cb3461c1cc22fa95ff3bb51b1b2b2dbad2132830", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb3461c1cc22fa95ff3bb51b1b2b2dbad2132830"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd9697727ba8f11b7015a5e7e4ab20cd172ddc81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd9697727ba8f11b7015a5e7e4ab20cd172ddc81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd9697727ba8f11b7015a5e7e4ab20cd172ddc81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd9697727ba8f11b7015a5e7e4ab20cd172ddc81/comments", "author": null, "committer": null, "parents": [{"sha": "8c0abc88e8dc5593bebe1f4e10b9a545cc183dad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c0abc88e8dc5593bebe1f4e10b9a545cc183dad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c0abc88e8dc5593bebe1f4e10b9a545cc183dad"}], "stats": {"total": 59, "additions": 36, "deletions": 23}, "files": [{"sha": "a9fe795852b4b3e21c2b8d16934ea22360dd1361", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9697727ba8f11b7015a5e7e4ab20cd172ddc81/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9697727ba8f11b7015a5e7e4ab20cd172ddc81/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd9697727ba8f11b7015a5e7e4ab20cd172ddc81", "patch": "@@ -1,3 +1,16 @@\n+2001-02-01  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+        * cpphash.h (struct cpp_buffer): Move saved_flags from cpp_reader.\n+        * cpplex.c (_cpp_lex_token): New token picks up the saved flags,\n+        and AVOID_LPASTE is cleared on meeting an unescaped newline.\n+        * cppmacro.c (builtin_macro): Set builtin flags here.\n+        (paste_all_tokens): Preserve AVOID_LPASTE on pasted token.\n+        (replace_args): Clarify intent.\n+        (cpp_get_token): Macro expansion tokens get the saved flags.\n+        Update.\n+        * cppmain.c (scan_buffer): Remove now-redundant print.printed\n+        check.\n+\n 2001-02-01  Jeffrey Oldham  <oldham@codesourcery.com>\n \n \t* config/mips/iris6.h (SUPPORTS_INIT_PRIORITY): Reverse change of"}, {"sha": "77c80cdc00d556478313004859e754596c762320", "filename": "gcc/cpphash.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9697727ba8f11b7015a5e7e4ab20cd172ddc81/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9697727ba8f11b7015a5e7e4ab20cd172ddc81/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=bd9697727ba8f11b7015a5e7e4ab20cd172ddc81", "patch": "@@ -194,6 +194,9 @@ struct cpp_buffer\n   /* Line number at line_base (above). */\n   unsigned int lineno;\n \n+  /* Contains PREV_WHITE and/or AVOID_LPASTE.  */\n+  unsigned char saved_flags;\n+\n   /* Because of the way the lexer works, -Wtrigraphs can sometimes\n      warn twice for the same trigraph.  This helps prevent that.  */\n   const unsigned char *last_Wtrigraphs;\n@@ -331,9 +334,6 @@ struct cpp_reader\n   /* We're printed a warning recommending against using #import.  */\n   unsigned char import_warning;\n \n-  /* Used to flag the token after a paste AVOID_LPASTE.  */\n-  unsigned char saved_flags;\n-\n   /* True after cpp_start_read completes.  Used to inhibit some\n      warnings while parsing the command line.  */\n   unsigned char done_initializing;"}, {"sha": "3ff23b4abac97f88f6460edd9da8ad70909ad007", "filename": "gcc/cpplex.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9697727ba8f11b7015a5e7e4ab20cd172ddc81/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9697727ba8f11b7015a5e7e4ab20cd172ddc81/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=bd9697727ba8f11b7015a5e7e4ab20cd172ddc81", "patch": "@@ -857,7 +857,8 @@ _cpp_lex_token (pfile, result)\n  done_directive:\n   buffer = pfile->buffer;\n   pfile->state.next_bol = 0;\n-  result->flags = 0;\n+  result->flags = buffer->saved_flags;\n+  buffer->saved_flags = 0;\n  next_char:\n   pfile->lexer_pos.line = buffer->lineno;\n  next_char2:\n@@ -899,7 +900,7 @@ _cpp_lex_token (pfile, result)\n \t  /* This is a new line, so clear any white space flag.\n \t     Newlines in arguments are white space (6.10.3.10);\n \t     parse_arg takes care of that.  */\n-\t  result->flags &= ~PREV_WHITE;\n+\t  result->flags &= ~(PREV_WHITE | AVOID_LPASTE);\n \t  goto next_char;\n \t}\n \n@@ -1196,7 +1197,7 @@ _cpp_lex_token (pfile, result)\n \n \t      /* Get whitespace right - newline_in_args sets it.  */\n \t      if (pfile->lexer_pos.col == 1)\n-\t\tresult->flags &= ~PREV_WHITE;\n+\t\tresult->flags &= ~(PREV_WHITE | AVOID_LPASTE);\n \t    }\n \t  else\n \t    {"}, {"sha": "afe60dce87714cf3b16d38d24eaa3fe8a2dad301", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9697727ba8f11b7015a5e7e4ab20cd172ddc81/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9697727ba8f11b7015a5e7e4ab20cd172ddc81/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=bd9697727ba8f11b7015a5e7e4ab20cd172ddc81", "patch": "@@ -146,6 +146,7 @@ builtin_macro (pfile, token)\n      cpp_reader *pfile;\n      cpp_token *token;\n {\n+  unsigned char flags = ((token->flags & PREV_WHITE) | AVOID_LPASTE);\n   cpp_hashnode *node = token->val.node;\n \n   switch (node->value.builtin)\n@@ -219,6 +220,8 @@ builtin_macro (pfile, token)\n       cpp_ice (pfile, \"invalid builtin macro \\\"%s\\\"\", node->name);\n       break;\n     }\n+\n+  token->flags = flags;\n }\n \n /* Used by cpperror.c to obtain the correct line and column to report\n@@ -458,7 +461,7 @@ paste_all_tokens (pfile, lhs)\n   /* The pasted token has the PREV_WHITE flag of the LHS, is no longer\n      PASTE_LEFT, and is subject to macro expansion.  */\n   lhs->flags &= ~(PREV_WHITE | PASTE_LEFT | NO_EXPAND);\n-  lhs->flags |= orig_flags & PREV_WHITE;\n+  lhs->flags |= orig_flags & (PREV_WHITE | AVOID_LPASTE);\n }\n \n /* Reads the unexpanded tokens of a macro argument into ARG.  VAR_ARGS\n@@ -798,11 +801,11 @@ replace_args (pfile, macro, args, list)\n \t    /* The first token gets PREV_WHITE of the CPP_MACRO_ARG.  */\n \t    dest->flags &= ~PREV_WHITE;\n \t    dest->flags |= src->flags & PREV_WHITE;\n+\t    dest->flags |= AVOID_LPASTE;\n \n \t    /* The last token gets the PASTE_LEFT of the CPP_MACRO_ARG.  */\n \t    dest[count - 1].flags |= src->flags & PASTE_LEFT;\n \n-\t    dest[0].flags |= AVOID_LPASTE;\n \t    dest += count;\n \t  }\n \n@@ -906,10 +909,6 @@ cpp_get_token (pfile, token)\n      cpp_reader *pfile;\n      cpp_token *token;\n {\n-  unsigned char flags = pfile->saved_flags;\n-\n-  pfile->saved_flags = 0;\n-\n   for (;;)\n     {\n       cpp_context *context = pfile->context;\n@@ -922,19 +921,21 @@ cpp_get_token (pfile, token)\n       else if (context->list.first != context->list.limit)\n \t{\n \t  *token = *context->list.first++;\n+\t  token->flags |= pfile->buffer->saved_flags;\n+\t  pfile->buffer->saved_flags = 0;\n \t  /* PASTE_LEFT tokens can only appear in macro expansions.  */\n \t  if (token->flags & PASTE_LEFT)\n \t    {\n \t      paste_all_tokens (pfile, token);\n-\t      pfile->saved_flags = AVOID_LPASTE;\n+\t      pfile->buffer->saved_flags = AVOID_LPASTE;\n \t    }\n \t}\n       else\n \t{\n \t  if (context->macro)\n \t    {\n \t      /* Avoid accidental paste at the end of a macro.  */\n-\t      flags |= AVOID_LPASTE;\n+\t      pfile->buffer->saved_flags |= AVOID_LPASTE;\n \t      _cpp_pop_context (pfile);\n \t      continue;\n \t    }\n@@ -944,8 +945,6 @@ cpp_get_token (pfile, token)\n \t  return;\n \t}\n \n-      token->flags |= flags;\n-      flags = 0;\n       if (token->type != CPP_NAME)\n \tbreak;\n \n@@ -959,20 +958,21 @@ cpp_get_token (pfile, token)\n \t  /* Macros invalidate controlling macros.  */\n \t  pfile->mi_state = MI_FAILED;\n \n-\t  /* Remember PREV_WHITE and avoid an accidental paste.  */\n-\t  flags = (token->flags & PREV_WHITE) | AVOID_LPASTE;\n-\n \t  if (node->flags & NODE_BUILTIN)\n \t    {\n \t      builtin_macro (pfile, token);\n-\t      token->flags = flags;\n \t      break;\n \t    }\n \n \t  if (node->value.macro->disabled)\n \t    token->flags |= NO_EXPAND;\n \t  else if (enter_macro_context (pfile, node))\n-\t    continue;\n+\t    {\n+\t      /* Pass AVOID_LPASTE and our PREV_WHITE to next token.  */\n+\t      pfile->buffer->saved_flags = ((token->flags & PREV_WHITE)\n+\t\t\t\t\t    | AVOID_LPASTE);\n+\t      continue;\n+\t    }\n \t}\n \n       /* Don't interpret _Pragma within directives.  The standard is"}, {"sha": "a68d19cf9dbedd67d301f331c26e50816e9af54f", "filename": "gcc/cppmain.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9697727ba8f11b7015a5e7e4ab20cd172ddc81/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9697727ba8f11b7015a5e7e4ab20cd172ddc81/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=bd9697727ba8f11b7015a5e7e4ab20cd172ddc81", "patch": "@@ -234,8 +234,7 @@ scan_buffer (pfile)\n \t\t    putc (' ', print.outf);\n \t\t}\n \t    }\n-\t  else if (print.printed\n-\t\t   && (token->flags & (PREV_WHITE | AVOID_LPASTE))\n+\t  else if ((token->flags & (PREV_WHITE | AVOID_LPASTE))\n \t\t       == AVOID_LPASTE\n \t\t   && cpp_avoid_paste (pfile, &tokens[1 - index], token))\n \t    token->flags |= PREV_WHITE;"}]}