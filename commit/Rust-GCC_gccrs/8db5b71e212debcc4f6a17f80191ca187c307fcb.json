{"sha": "8db5b71e212debcc4f6a17f80191ca187c307fcb", "node_id": "C_kwDOANBUbNoAKDhkYjViNzFlMjEyZGViY2M0ZjZhMTdmODAxOTFjYTE4N2MzMDdmY2I", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-08-15T17:00:43Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-08-15T19:35:10Z"}, "message": "d: Defer compiling inline definitions until after the module has finished.\n\nThis is to prevent the case of when generating the methods of a struct\ntype, we don't accidentally emit an inline function that references it,\nas the outer struct itself would still be incomplete.\n\ngcc/d/ChangeLog:\n\n\t* d-tree.h (d_defer_declaration): Declare.\n\t* decl.cc (function_needs_inline_definition_p): Defer checking\n\tDECL_UNINLINABLE and DECL_DECLARED_INLINE_P.\n\t(maybe_build_decl_tree): Call d_defer_declaration instead of\n\tbuild_decl_tree.\n\t* modules.cc (deferred_inline_declarations): New variable.\n\t(build_module_tree): Set deferred_inline_declarations and a handle\n\tdeclarations pushed to it.\n\t(d_defer_declaration): New function.", "tree": {"sha": "19dedca9ea02beaa0587e37b8b5f5301ca061361", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19dedca9ea02beaa0587e37b8b5f5301ca061361"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8db5b71e212debcc4f6a17f80191ca187c307fcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8db5b71e212debcc4f6a17f80191ca187c307fcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8db5b71e212debcc4f6a17f80191ca187c307fcb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8db5b71e212debcc4f6a17f80191ca187c307fcb/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e206fecaac29f559f4990312b875604eb1ce3ef3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e206fecaac29f559f4990312b875604eb1ce3ef3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e206fecaac29f559f4990312b875604eb1ce3ef3"}], "stats": {"total": 43, "additions": 32, "deletions": 11}, "files": [{"sha": "4885cfe2b15b9ade46af15c8d7a0b48449646004", "filename": "gcc/d/d-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db5b71e212debcc4f6a17f80191ca187c307fcb/gcc%2Fd%2Fd-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db5b71e212debcc4f6a17f80191ca187c307fcb/gcc%2Fd%2Fd-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-tree.h?ref=8db5b71e212debcc4f6a17f80191ca187c307fcb", "patch": "@@ -673,6 +673,7 @@ extern tree maybe_expand_intrinsic (tree);\n extern void build_module_tree (Module *);\n extern tree d_module_context (void);\n extern void register_module_decl (Declaration *);\n+extern void d_defer_declaration (Declaration *);\n extern void d_finish_compilation (tree *, int);\n \n /* In runtime.cc.  */"}, {"sha": "e91aee30845a1682c0507f57ad5ceac4b40c70c9", "filename": "gcc/d/decl.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db5b71e212debcc4f6a17f80191ca187c307fcb/gcc%2Fd%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db5b71e212debcc4f6a17f80191ca187c307fcb/gcc%2Fd%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdecl.cc?ref=8db5b71e212debcc4f6a17f80191ca187c307fcb", "patch": "@@ -1046,18 +1046,10 @@ function_needs_inline_definition_p (FuncDeclaration *fd)\n   if (!DECL_EXTERNAL (fd->csym))\n     return false;\n \n-  /* Non-inlineable functions are always external.  */\n-  if (DECL_UNINLINABLE (fd->csym))\n-    return false;\n-\n   /* No function body available for inlining.  */\n   if (!fd->fbody)\n     return false;\n \n-  /* Ignore functions that aren't decorated with `pragma(inline)'.  */\n-  if (fd->inlining != PINLINE::always)\n-    return false;\n-\n   /* These functions are tied to the module they are defined in.  */\n   if (fd->isFuncLiteralDeclaration ()\n       || fd->isUnitTestDeclaration ()\n@@ -1070,6 +1062,14 @@ function_needs_inline_definition_p (FuncDeclaration *fd)\n   if (function_defined_in_root_p (fd))\n     return false;\n \n+  /* Non-inlineable functions are always external.  */\n+  if (DECL_UNINLINABLE (fd->csym))\n+    return false;\n+\n+  /* Ignore functions that aren't decorated with `pragma(inline)'.  */\n+  if (!DECL_DECLARED_INLINE_P (fd->csym))\n+    return false;\n+\n   /* Weak functions cannot be inlined.  */\n   if (lookup_attribute (\"weak\", DECL_ATTRIBUTES (fd->csym)))\n     return false;\n@@ -1081,8 +1081,8 @@ function_needs_inline_definition_p (FuncDeclaration *fd)\n   return true;\n }\n \n-/* If the variable or function declaration in DECL needs to be defined, call\n-   build_decl_tree on it now before returning its back-end symbol.  */\n+/* If the variable or function declaration in DECL needs to be defined, add it\n+   to the list of deferred declarations to build later.  */\n \n static tree\n maybe_build_decl_tree (Declaration *decl)\n@@ -1103,7 +1103,7 @@ maybe_build_decl_tree (Declaration *decl)\n       if (function_needs_inline_definition_p (fd))\n \t{\n \t  DECL_EXTERNAL (fd->csym) = 0;\n-\t  build_decl_tree (fd);\n+\t  d_defer_declaration (fd);\n \t}\n     }\n "}, {"sha": "0aac8fe3545ee284c92af28519c5c5c6f90649dd", "filename": "gcc/d/modules.cc", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db5b71e212debcc4f6a17f80191ca187c307fcb/gcc%2Fd%2Fmodules.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db5b71e212debcc4f6a17f80191ca187c307fcb/gcc%2Fd%2Fmodules.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fmodules.cc?ref=8db5b71e212debcc4f6a17f80191ca187c307fcb", "patch": "@@ -121,6 +121,9 @@ static module_info *current_testing_module;\n \n static Module *current_module_decl;\n \n+/* Any inline symbols that were deferred during codegen.  */\n+vec<Declaration *> *deferred_inline_declarations;\n+\n /* Returns an internal function identified by IDENT.  This is used\n    by both module initialization and dso handlers.  */\n \n@@ -724,6 +727,9 @@ build_module_tree (Module *decl)\n   current_testing_module = &mitest;\n   current_module_decl = decl;\n \n+  vec<Declaration *> deferred_decls = vNULL;\n+  deferred_inline_declarations = &deferred_decls;\n+\n   /* Layout module members.  */\n   if (decl->members)\n     {\n@@ -811,9 +817,14 @@ build_module_tree (Module *decl)\n       layout_moduleinfo (decl);\n     }\n \n+  /* Process all deferred functions after finishing module.  */\n+  for (size_t i = 0; i < deferred_decls.length (); ++i)\n+    build_decl_tree (deferred_decls[i]);\n+\n   current_moduleinfo = NULL;\n   current_testing_module = NULL;\n   current_module_decl = NULL;\n+  deferred_inline_declarations = NULL;\n }\n \n /* Returns the current function or module context for the purpose\n@@ -888,6 +899,15 @@ register_module_decl (Declaration *d)\n     }\n }\n \n+/* Add DECL as a declaration to emit at the end of the current module.  */\n+\n+void\n+d_defer_declaration (Declaration *decl)\n+{\n+  gcc_assert (deferred_inline_declarations != NULL);\n+  deferred_inline_declarations->safe_push (decl);\n+}\n+\n /* Wrapup all global declarations and start the final compilation.  */\n \n void"}]}