{"sha": "c3ee4651b244be21eaa251676afc4f052727a0b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNlZTQ2NTFiMjQ0YmUyMWVhYTI1MTY3NmFmYzRmMDUyNzI3YTBiNQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2005-10-17T11:19:12Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-10-17T11:19:12Z"}, "message": "re PR c++/21353 (rvalues should not be allowed to be default values for non const references in class functions.)\n\ncp:\n\tPR c++/21353\n\t* g++.dg/template/defarg6.C: New.\ntestsuite:\n\tPR c++/21353\n\t* decl.c (check_default_argument): Don't check\n\tprocessing_template_decl or uses_template_parms here.\n\t(grokparms): Only call check_default_argument when not processing\n\ta template decl.\n\t* parser.c (cp_parser_late_parsing_default_arg): Call\n\tcheck_default_argument when not processing a template decl.\n\nFrom-SVN: r105492", "tree": {"sha": "7d8824489867a310bab522176b3c8b9255de8127", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d8824489867a310bab522176b3c8b9255de8127"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3ee4651b244be21eaa251676afc4f052727a0b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3ee4651b244be21eaa251676afc4f052727a0b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3ee4651b244be21eaa251676afc4f052727a0b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3ee4651b244be21eaa251676afc4f052727a0b5/comments", "author": null, "committer": null, "parents": [{"sha": "5acaf46030143cbb7e08c5c1dde13adff84d8e10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5acaf46030143cbb7e08c5c1dde13adff84d8e10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5acaf46030143cbb7e08c5c1dde13adff84d8e10"}], "stats": {"total": 56, "additions": 46, "deletions": 10}, "files": [{"sha": "a7259695193a2c5367562a9c2dbacbd7371f8b98", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3ee4651b244be21eaa251676afc4f052727a0b5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3ee4651b244be21eaa251676afc4f052727a0b5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c3ee4651b244be21eaa251676afc4f052727a0b5", "patch": "@@ -1,3 +1,13 @@\n+2005-10-17  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/21353\n+\t* decl.c (check_default_argument): Don't check\n+\tprocessing_template_decl or uses_template_parms here.\n+\t(grokparms): Only call check_default_argument when not processing\n+\ta template decl.\n+\t* parser.c (cp_parser_late_parsing_default_arg): Call\n+\tcheck_default_argument when not processing a template decl.\n+\n 2005-10-16  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/24389"}, {"sha": "982fe121805aa23f20840fd9c12ad73fb49022b4", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3ee4651b244be21eaa251676afc4f052727a0b5/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3ee4651b244be21eaa251676afc4f052727a0b5/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c3ee4651b244be21eaa251676afc4f052727a0b5", "patch": "@@ -8453,13 +8453,6 @@ check_default_argument (tree decl, tree arg)\n        deal with it after the class is complete.  */\n     return arg;\n \n-  if (processing_template_decl || uses_template_parms (arg))\n-    /* We don't do anything checking until instantiation-time.  Note\n-       that there may be uninstantiated arguments even for an\n-       instantiated function, since default arguments are not\n-       instantiated until they are needed.  */\n-    return arg;\n-\n   if (TYPE_P (decl))\n     {\n       decl_type = decl;\n@@ -8601,10 +8594,10 @@ grokparms (cp_parameter_declarator *first_parm, tree *parms)\n \t\t       decl, ptr ? \"pointer\" : \"reference\", t);\n \t    }\n \n-\t  if (!any_error && init)\n-\t    init = check_default_argument (decl, init);\n-\t  else\n+\t  if (any_error)\n \t    init = NULL_TREE;\n+\t  else if (init && !processing_template_decl)\n+\t    init = check_default_argument (decl, init);\n \t}\n \n       TREE_CHAIN (decl) = decls;"}, {"sha": "45fc69f1e3847c584b81ac3c5413cf939c5e0680", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3ee4651b244be21eaa251676afc4f052727a0b5/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3ee4651b244be21eaa251676afc4f052727a0b5/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=c3ee4651b244be21eaa251676afc4f052727a0b5", "patch": "@@ -15654,6 +15654,9 @@ cp_parser_late_parsing_default_args (cp_parser *parser, tree fn)\n       /* Parse the assignment-expression.  */\n       parsed_arg = cp_parser_assignment_expression (parser, /*cast_p=*/false);\n \n+      if (!processing_template_decl)\n+\tparsed_arg = check_default_argument (TREE_VALUE (parm), parsed_arg);\n+      \n       TREE_PURPOSE (parm) = parsed_arg;\n \n       /* Update any instantiations we've already created.  */"}, {"sha": "6eeadc5b343b8e9fadee886573c468f39617184a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3ee4651b244be21eaa251676afc4f052727a0b5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3ee4651b244be21eaa251676afc4f052727a0b5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c3ee4651b244be21eaa251676afc4f052727a0b5", "patch": "@@ -1,3 +1,8 @@\n+2005-10-17  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/21353\n+\t* g++.dg/template/defarg6.C: New.\n+\n 2005-10-17  Uros Bizjak  <uros@kss-loka.si>\n \n \tPR target/24315"}, {"sha": "f4d84685abe68352def3bc76930569675c523422", "filename": "gcc/testsuite/g++.dg/template/defarg6.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3ee4651b244be21eaa251676afc4f052727a0b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdefarg6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3ee4651b244be21eaa251676afc4f052727a0b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdefarg6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdefarg6.C?ref=c3ee4651b244be21eaa251676afc4f052727a0b5", "patch": "@@ -0,0 +1,25 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 14 Oct 2005 <nathan@codesourcery.com>\n+\n+// PR 21353 missing error.\n+// Origin:Andrew Pinski <pinskia@gcc.gnu.org>\n+\n+enum X{ a, b, c };\n+\n+struct C\n+{\n+  static void func (X &ref = a); // { dg-error \"default argument\" \"\" }\n+};\n+\n+template <typename T>\n+struct D\n+{\n+  static void func (X &ref = a); // not an error at this point\n+};\n+\n+void Foo (X & obj)\n+{\n+  D<int>::func (obj);\n+\n+  D<int>::func (); // { dg-error \"default argument\" \"\" }\n+}"}]}