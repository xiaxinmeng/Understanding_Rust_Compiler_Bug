{"sha": "a16fc9f1c96c7361d0b7a83a06f3649ace6c440d", "node_id": "C_kwDOANBUbNoAKGExNmZjOWYxYzk2YzczNjFkMGI3YTgzYTA2ZjM2NDlhY2U2YzQ0MGQ", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-05-03T19:21:26Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-05-03T19:21:26Z"}, "message": "c++: make finish_non_static_data_member SFINAE enabled [PR105351]\n\nHere since finish_non_static_data_member isn't SFINAE enabled, we\nincorrectly emit an error when considering the first overload rather\nthan silently discarding it:\n\nsfinae33.C: In substitution of \u2018template<class T> A<T::value> f() [with T = B]\u2019:\nsfinae33.C:11:7:   required from here\nsfinae33.C:5:31: error: invalid use of non-static data member \u2018B::value\u2019\n    5 | template<class T> A<T::value> f();\n      |                               ^\n\nThis patch makes the function SFINAE enabled in the usual way: give it a\ncomplain parameter, check it before emitting an error, and pass it through\nappropriately.\n\n\tPR c++/105351\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (finish_non_static_data_member): Add defaulted\n\tcomplain parameter.\n\t* pt.cc (tsubst_copy_and_build): Pass complain to\n\tfinish_non_static_data_member.\n\t* semantics.cc (finish_non_static_data_member): Respect complain\n\tparameter.\n\t(finish_qualified_id_expr): Pass complain to\n\tfinish_non_static_data_member.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/template/sfinae33.C: New test.", "tree": {"sha": "01f249f3cd129ae610347d2ac1d0d4d9cd195a61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01f249f3cd129ae610347d2ac1d0d4d9cd195a61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a16fc9f1c96c7361d0b7a83a06f3649ace6c440d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a16fc9f1c96c7361d0b7a83a06f3649ace6c440d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a16fc9f1c96c7361d0b7a83a06f3649ace6c440d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a16fc9f1c96c7361d0b7a83a06f3649ace6c440d/comments", "author": null, "committer": null, "parents": [{"sha": "5609bcd620132c290820cccd871a6d7cbf39b785", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5609bcd620132c290820cccd871a6d7cbf39b785", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5609bcd620132c290820cccd871a6d7cbf39b785"}], "stats": {"total": 45, "additions": 32, "deletions": 13}, "files": [{"sha": "8d7cf240b6865a7cd4e474adc82a4693470d85e3", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a16fc9f1c96c7361d0b7a83a06f3649ace6c440d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a16fc9f1c96c7361d0b7a83a06f3649ace6c440d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a16fc9f1c96c7361d0b7a83a06f3649ace6c440d", "patch": "@@ -7615,7 +7615,8 @@ inline tree force_paren_expr_uneval \t\t(tree t)\n { return force_paren_expr (t, true); }\n extern tree maybe_undo_parenthesized_ref\t(tree);\n extern tree maybe_strip_ref_conversion\t\t(tree);\n-extern tree finish_non_static_data_member       (tree, tree, tree);\n+extern tree finish_non_static_data_member       (tree, tree, tree,\n+\t\t\t\t\t\t tsubst_flags_t = tf_warning_or_error);\n extern tree begin_stmt_expr\t\t\t(void);\n extern tree finish_stmt_expr_expr\t\t(tree, tree);\n extern tree finish_stmt_expr\t\t\t(tree, bool);"}, {"sha": "ac002907a41a71479fe2d24e02cec05d3c08215b", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a16fc9f1c96c7361d0b7a83a06f3649ace6c440d/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a16fc9f1c96c7361d0b7a83a06f3649ace6c440d/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=a16fc9f1c96c7361d0b7a83a06f3649ace6c440d", "patch": "@@ -21054,7 +21054,8 @@ tsubst_copy_and_build (tree t,\n \t  }\n \telse if (TREE_CODE (member) == FIELD_DECL)\n \t  {\n-\t    r = finish_non_static_data_member (member, object, NULL_TREE);\n+\t    r = finish_non_static_data_member (member, object, NULL_TREE,\n+\t\t\t\t\t       complain);\n \t    if (TREE_CODE (r) == COMPONENT_REF)\n \t      REF_PARENTHESIZED_P (r) = REF_PARENTHESIZED_P (t);\n \t    RETURN (r);"}, {"sha": "bfb737f665b0634b1e318f9b9857495f539dbc03", "filename": "gcc/cp/semantics.cc", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a16fc9f1c96c7361d0b7a83a06f3649ace6c440d/gcc%2Fcp%2Fsemantics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a16fc9f1c96c7361d0b7a83a06f3649ace6c440d/gcc%2Fcp%2Fsemantics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.cc?ref=a16fc9f1c96c7361d0b7a83a06f3649ace6c440d", "patch": "@@ -2141,7 +2141,8 @@ finish_parenthesized_expr (cp_expr expr)\n    preceded by `.' or `->'.  */\n \n tree\n-finish_non_static_data_member (tree decl, tree object, tree qualifying_scope)\n+finish_non_static_data_member (tree decl, tree object, tree qualifying_scope,\n+\t\t\t       tsubst_flags_t complain /* = tf_warning_or_error */)\n {\n   gcc_assert (TREE_CODE (decl) == FIELD_DECL);\n   bool try_omp_private = !object && omp_private_member_map;\n@@ -2172,12 +2173,15 @@ finish_non_static_data_member (tree decl, tree object, tree qualifying_scope)\n   if (is_dummy_object (object) && cp_unevaluated_operand == 0\n       && (!processing_template_decl || !current_class_ref))\n     {\n-      if (current_function_decl\n-\t  && DECL_STATIC_FUNCTION_P (current_function_decl))\n-\terror (\"invalid use of member %qD in static member function\", decl);\n-      else\n-\terror (\"invalid use of non-static data member %qD\", decl);\n-      inform (DECL_SOURCE_LOCATION (decl), \"declared here\");\n+      if (complain & tf_error)\n+\t{\n+\t  if (current_function_decl\n+\t      && DECL_STATIC_FUNCTION_P (current_function_decl))\n+\t    error (\"invalid use of member %qD in static member function\", decl);\n+\t  else\n+\t    error (\"invalid use of non-static data member %qD\", decl);\n+\t  inform (DECL_SOURCE_LOCATION (decl), \"declared here\");\n+\t}\n \n       return error_mark_node;\n     }\n@@ -2219,8 +2223,9 @@ finish_non_static_data_member (tree decl, tree object, tree qualifying_scope)\n     {\n       tree access_type = TREE_TYPE (object);\n \n-      perform_or_defer_access_check (TYPE_BINFO (access_type), decl,\n-\t\t\t\t     decl, tf_warning_or_error);\n+      if (!perform_or_defer_access_check (TYPE_BINFO (access_type), decl,\n+\t\t\t\t\t  decl, complain))\n+\treturn error_mark_node;\n \n       /* If the data member was named `C::M', convert `*this' to `C'\n \t first.  */\n@@ -2234,7 +2239,7 @@ finish_non_static_data_member (tree decl, tree object, tree qualifying_scope)\n       ret = build_class_member_access_expr (object, decl,\n \t\t\t\t\t    /*access_path=*/NULL_TREE,\n \t\t\t\t\t    /*preserve_reference=*/false,\n-\t\t\t\t\t    tf_warning_or_error);\n+\t\t\t\t\t    complain);\n     }\n   if (try_omp_private)\n     {\n@@ -2396,7 +2401,7 @@ finish_qualified_id_expr (tree qualifying_class,\n     {\n       push_deferring_access_checks (dk_no_check);\n       expr = finish_non_static_data_member (expr, NULL_TREE,\n-\t\t\t\t\t    qualifying_class);\n+\t\t\t\t\t    qualifying_class, complain);\n       pop_deferring_access_checks ();\n     }\n   else if (BASELINK_P (expr))"}, {"sha": "ee384e82a48d86e62e2fae45ada174d150a7d9c6", "filename": "gcc/testsuite/g++.dg/template/sfinae33.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a16fc9f1c96c7361d0b7a83a06f3649ace6c440d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae33.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a16fc9f1c96c7361d0b7a83a06f3649ace6c440d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae33.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae33.C?ref=a16fc9f1c96c7361d0b7a83a06f3649ace6c440d", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/105351\n+\n+template<int> struct A { };\n+\n+template<class T> A<T::value> f();\n+template<class T> void f();\n+\n+struct B { int value; };\n+\n+int main() {\n+  f<B>();\n+}"}]}