{"sha": "dda3871423cbbdfc549a98034201f2c6e2e0d8ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRhMzg3MTQyM2NiYmRmYzU0OWE5ODAzNDIwMWYyYzZlMmUwZDhhYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-06-11T12:29:22Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-06-11T12:29:22Z"}, "message": "[multiple changes]\n\n2014-06-11  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Contract): Do not attempt\n\tanalysis if error has been posted on subprogram body.\n\n2014-06-11  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Stream_TSS_Definition): Apply legality\n\trule given in RM 13.1 (8/1) for operational attributes to stream\n\tattributes: the attribute must apply to a first subtype. Fixes\n\tmissing errors in ACATS test bdd2004.\n\n2014-06-11  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch3.adb (Build_Record_Init_Proc): Don't build for variant\n\trecord type if restriction No_Implicit_Conditionals is active.\n\t(Expand_N_Object_Declaration): Don't allow default initialization\n\tfor variant record type if restriction No_Implicit_Condition is active.\n\t(Build_Variant_Record_Equality): Don't build for variant\n\trecord type if restriction No_Implicit_Conditionals is active.\n\t* exp_ch4.adb (Expand_N_Op_Eq): Error if variant records with\n\tNo_Implicit_Conditionals.\n\t* sem_aux.ads, sem_aux.adb (Has_Variant_Part): New function.\n\n2014-06-11  Ramon Fernandez  <fernandez@adacore.com>\n\n\t* i-cstrin.ads: Update comments.\n\n2014-06-11  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (Resolve_Selected_Component): Handle properly a\n\tselected component whose prefix is overloaded, when none of the\n\tinterpretations matches the expected type.\n\n2014-06-11  Bob Duff  <duff@adacore.com>\n\n\t* make.adb (Wait_For_Available_Slot): Give a more\n\tinformative error message; if the ALI file is not found, print\n\tthe full path of what it's looking for.\n\nFrom-SVN: r211456", "tree": {"sha": "31866ba5fbc32c722c467efac24c59f04eeb55e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31866ba5fbc32c722c467efac24c59f04eeb55e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dda3871423cbbdfc549a98034201f2c6e2e0d8ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dda3871423cbbdfc549a98034201f2c6e2e0d8ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dda3871423cbbdfc549a98034201f2c6e2e0d8ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dda3871423cbbdfc549a98034201f2c6e2e0d8ab/comments", "author": null, "committer": null, "parents": [{"sha": "810241a5bfdbe0a3921916d3287eba6ef59ab575", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/810241a5bfdbe0a3921916d3287eba6ef59ab575", "html_url": "https://github.com/Rust-GCC/gccrs/commit/810241a5bfdbe0a3921916d3287eba6ef59ab575"}], "stats": {"total": 260, "additions": 220, "deletions": 40}, "files": [{"sha": "66663a84ee0c38d5bdf1f1b83b5881418a743d43", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dda3871423cbbdfc549a98034201f2c6e2e0d8ab/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dda3871423cbbdfc549a98034201f2c6e2e0d8ab/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=dda3871423cbbdfc549a98034201f2c6e2e0d8ab", "patch": "@@ -1,3 +1,43 @@\n+2014-06-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Contract): Do not attempt\n+\tanalysis if error has been posted on subprogram body.\n+\n+2014-06-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Stream_TSS_Definition): Apply legality\n+\trule given in RM 13.1 (8/1) for operational attributes to stream\n+\tattributes: the attribute must apply to a first subtype. Fixes\n+\tmissing errors in ACATS test bdd2004.\n+\n+2014-06-11  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch3.adb (Build_Record_Init_Proc): Don't build for variant\n+\trecord type if restriction No_Implicit_Conditionals is active.\n+\t(Expand_N_Object_Declaration): Don't allow default initialization\n+\tfor variant record type if restriction No_Implicit_Condition is active.\n+\t(Build_Variant_Record_Equality): Don't build for variant\n+\trecord type if restriction No_Implicit_Conditionals is active.\n+\t* exp_ch4.adb (Expand_N_Op_Eq): Error if variant records with\n+\tNo_Implicit_Conditionals.\n+\t* sem_aux.ads, sem_aux.adb (Has_Variant_Part): New function.\n+\n+2014-06-11  Ramon Fernandez  <fernandez@adacore.com>\n+\n+\t* i-cstrin.ads: Update comments.\n+\n+2014-06-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Selected_Component): Handle properly a\n+\tselected component whose prefix is overloaded, when none of the\n+\tinterpretations matches the expected type.\n+\n+2014-06-11  Bob Duff  <duff@adacore.com>\n+\n+\t* make.adb (Wait_For_Available_Slot): Give a more\n+\tinformative error message; if the ALI file is not found, print\n+\tthe full path of what it's looking for.\n+\n 2014-06-11  Sergey Rybin  <rybin@adacore.com frybin>\n \n \t* gnat_ugn.texi, vms_data.ads: add description of gnatstub -W<par>"}, {"sha": "a96f7f4534b80b098f0017d7b30031d0943de82c", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 69, "deletions": 30, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dda3871423cbbdfc549a98034201f2c6e2e0d8ab/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dda3871423cbbdfc549a98034201f2c6e2e0d8ab/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=dda3871423cbbdfc549a98034201f2c6e2e0d8ab", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -3484,6 +3484,18 @@ package body Exp_Ch3 is\n          Rec_Type := Underlying_Type (Rec_Type);\n       end if;\n \n+      --  If we have a variant record with restriction No_Implicit_Conditionals\n+      --  in effect, then we skip building the procedure. This is safe because\n+      --  if we can see the restriction, so can any caller, calls to initialize\n+      --  such records are not allowed for variant records if this restriction\n+      --  is active.\n+\n+      if Has_Variant_Part (Rec_Type)\n+        and then Restriction_Active (No_Implicit_Conditionals)\n+      then\n+         return;\n+      end if;\n+\n       --  If there are discriminants, build the discriminant map to replace\n       --  discriminants by their discriminals in complex bound expressions.\n       --  These only arise for the corresponding records of synchronized types.\n@@ -4316,6 +4328,16 @@ package body Exp_Ch3 is\n       Pspecs : constant List_Id := New_List;\n \n    begin\n+      --  If we have a variant record with restriction No_Implicit_Conditionals\n+      --  in effect, then we skip building the procedure. This is safe because\n+      --  if we can see the restriction, so can any caller, calls to equality\n+      --  test routines are not allowed for variant records if this restriction\n+      --  is active.\n+\n+      if Restriction_Active (No_Implicit_Conditionals) then\n+         return;\n+      end if;\n+\n       --  Derived Unchecked_Union types no longer inherit the equality function\n       --  of their parent.\n \n@@ -4431,11 +4453,8 @@ package body Exp_Ch3 is\n \n       else\n          Append_To (Stmts,\n-           Make_Eq_If (Typ,\n-             Discriminant_Specifications (Def)));\n-\n-         Append_List_To (Stmts,\n-           Make_Eq_Case (Typ, Comps));\n+           Make_Eq_If (Typ, Discriminant_Specifications (Def)));\n+         Append_List_To (Stmts, Make_Eq_Case (Typ, Comps));\n       end if;\n \n       Append_To (Stmts,\n@@ -4838,6 +4857,7 @@ package body Exp_Ch3 is\n       Def_Id   : constant Entity_Id  := Defining_Identifier (N);\n       Expr     : constant Node_Id    := Expression (N);\n       Loc      : constant Source_Ptr := Sloc (N);\n+      Obj_Def  : constant Node_Id    := Object_Definition (N);\n       Typ      : constant Entity_Id  := Etype (Def_Id);\n       Base_Typ : constant Entity_Id  := Base_Type (Typ);\n       Expr_Q   : Node_Id;\n@@ -4999,7 +5019,7 @@ package body Exp_Ch3 is\n            and then Is_Entity_Name (Expr_Q)\n            and then Ekind (Entity (Expr_Q)) = E_Variable\n            and then OK_To_Rename (Entity (Expr_Q))\n-           and then Is_Entity_Name (Object_Definition (N));\n+           and then Is_Entity_Name (Obj_Def);\n       end Rewrite_As_Renaming;\n \n    --  Start of processing for Expand_N_Object_Declaration\n@@ -5065,6 +5085,26 @@ package body Exp_Ch3 is\n \n       if No (Expr) then\n \n+         --  If we have a type with a variant part, the initialization proc\n+         --  will contain implicit tests of the discriminant values, which\n+         --  counts as a violation of the restriction No_Implicit_Conditionals.\n+\n+         if Has_Variant_Part (Typ) then\n+            declare\n+               Msg : Boolean;\n+\n+            begin\n+               Check_Restriction (Msg, No_Implicit_Conditionals, Obj_Def);\n+\n+               if Msg then\n+                  Error_Msg_N\n+                    (\"\\initialization of variant record tests discriminants\",\n+                     Obj_Def);\n+                  return;\n+               end if;\n+            end;\n+         end if;\n+\n          --  For the default initialization case, if we have a private type\n          --  with invariants, and invariant checks are enabled, then insert an\n          --  invariant check after the object declaration. Note that it is OK\n@@ -5305,9 +5345,9 @@ package body Exp_Ch3 is\n            --  then we've done it already and must not do it again.\n \n            and then not\n-             (Nkind (Object_Definition (N)) = N_Identifier\n+             (Nkind (Obj_Def) = N_Identifier\n                and then\n-                 Present (Equivalent_Type (Entity (Object_Definition (N)))))\n+                 Present (Equivalent_Type (Entity (Obj_Def))))\n          then\n             pragma Assert (Is_Class_Wide_Type (Typ));\n \n@@ -5416,7 +5456,7 @@ package body Exp_Ch3 is\n                      Expand_Subtype_From_Expr\n                        (N             => N,\n                         Unc_Type      => Typ,\n-                        Subtype_Indic => Object_Definition (N),\n+                        Subtype_Indic => Obj_Def,\n                         Exp           => Expr_N);\n \n                      if not Is_Interface (Etype (Expr_N)) then\n@@ -5427,7 +5467,7 @@ package body Exp_Ch3 is\n \n                      else\n                         New_Expr :=\n-                          Unchecked_Convert_To (Etype (Object_Definition (N)),\n+                          Unchecked_Convert_To (Etype (Obj_Def),\n                             Make_Explicit_Dereference (Loc,\n                               Unchecked_Convert_To (RTE (RE_Tag_Ptr),\n                                 Make_Attribute_Reference (Loc,\n@@ -5442,8 +5482,7 @@ package body Exp_Ch3 is\n                           Make_Object_Declaration (Loc,\n                             Defining_Identifier => Obj_Id,\n                             Object_Definition   =>\n-                              New_Occurrence_Of\n-                                (Etype (Object_Definition (N)), Loc),\n+                              New_Occurrence_Of (Etype (Obj_Def), Loc),\n                             Expression => New_Expr));\n \n                      --  Rename limited type object since they cannot be copied\n@@ -5455,11 +5494,10 @@ package body Exp_Ch3 is\n                           Make_Object_Renaming_Declaration (Loc,\n                             Defining_Identifier => Obj_Id,\n                             Subtype_Mark        =>\n-                              New_Occurrence_Of\n-                                (Etype (Object_Definition (N)), Loc),\n+                              New_Occurrence_Of (Etype (Obj_Def), Loc),\n                             Name                =>\n                               Unchecked_Convert_To\n-                                (Etype (Object_Definition (N)), New_Expr)));\n+                                (Etype (Obj_Def), New_Expr)));\n                      end if;\n \n                      --  Dynamically reference the tag associated with the\n@@ -5744,7 +5782,7 @@ package body Exp_Ch3 is\n             Rewrite (N,\n               Make_Object_Renaming_Declaration (Loc,\n                 Defining_Identifier => Defining_Identifier (N),\n-                Subtype_Mark        => Object_Definition (N),\n+                Subtype_Mark        => Obj_Def,\n                 Name                => Expr_Q));\n \n             --  We do not analyze this renaming declaration, because all its\n@@ -5778,7 +5816,7 @@ package body Exp_Ch3 is\n       end if;\n \n       if Nkind (N) = N_Object_Declaration\n-        and then Nkind (Object_Definition (N)) = N_Access_Definition\n+        and then Nkind (Obj_Def) = N_Access_Definition\n         and then not Is_Local_Anonymous_Access (Etype (Def_Id))\n       then\n          --  An Ada 2012 stand-alone object of an anonymous access type\n@@ -5810,12 +5848,14 @@ package body Exp_Ch3 is\n                Level_Expr := Dynamic_Accessibility_Level (Expr);\n             end if;\n \n-            Level_Decl := Make_Object_Declaration (Loc,\n-             Defining_Identifier => Level,\n-             Object_Definition => New_Occurrence_Of (Standard_Natural, Loc),\n-             Expression => Level_Expr,\n-             Constant_Present => Constant_Present (N),\n-             Has_Init_Expression => True);\n+            Level_Decl :=\n+              Make_Object_Declaration (Loc,\n+                Defining_Identifier => Level,\n+                Object_Definition   =>\n+                  New_Occurrence_Of (Standard_Natural, Loc),\n+                Expression          => Level_Expr,\n+                Constant_Present    => Constant_Present (N),\n+                Has_Init_Expression => True);\n \n             Insert_Action_After (Init_After, Level_Decl);\n \n@@ -8641,6 +8681,7 @@ package body Exp_Ch3 is\n             if Chars (Discr) = External_Name (Node (Elm)) then\n                return Node (Elm);\n             end if;\n+\n             Next_Elmt (Elm);\n          end loop;\n \n@@ -8676,14 +8717,12 @@ package body Exp_Ch3 is\n       end if;\n \n       Alt_List := New_List;\n-\n       while Present (Variant) loop\n          Append_To (Alt_List,\n            Make_Case_Statement_Alternative (Loc,\n              Discrete_Choices => New_Copy_List (Discrete_Choices (Variant)),\n              Statements =>\n                Make_Eq_Case (E, Component_List (Variant), Discrs)));\n-\n          Next_Non_Pragma (Variant);\n       end loop;\n \n@@ -8785,17 +8824,17 @@ package body Exp_Ch3 is\n          else\n             return\n               Make_Implicit_If_Statement (E,\n-                Condition => Cond,\n+                Condition       => Cond,\n                 Then_Statements => New_List (\n                   Make_Simple_Return_Statement (Loc,\n                     Expression => New_Occurrence_Of (Standard_False, Loc))));\n          end if;\n       end if;\n    end Make_Eq_If;\n \n-   --------------------\n-   --  Make_Neq_Body --\n-   --------------------\n+   -------------------\n+   -- Make_Neq_Body --\n+   -------------------\n \n    function Make_Neq_Body (Tag_Typ : Entity_Id) return Node_Id is\n "}, {"sha": "40ac4093dfcf3fcee2b238326683708314371fbb", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dda3871423cbbdfc549a98034201f2c6e2e0d8ab/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dda3871423cbbdfc549a98034201f2c6e2e0d8ab/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=dda3871423cbbdfc549a98034201f2c6e2e0d8ab", "patch": "@@ -6674,6 +6674,8 @@ package body Exp_Ch4 is\n          R_Exp   : Node_Id := Relocate_Node (Rhs);\n \n       begin\n+         --  Adjust operands if necessary to comparison type\n+\n          if Base_Type (Op_Type) /= Base_Type (A_Typ)\n            and then not Is_Class_Wide_Type (A_Typ)\n          then\n@@ -6771,8 +6773,7 @@ package body Exp_Ch4 is\n                   --  formal is that of the discriminant, with added suffix,\n                   --  see Exp_Ch3.Build_Record_Equality for details.\n \n-                  if Is_Unchecked_Union\n-                       (Scope (Entity (Selector_Name (Lhs))))\n+                  if Is_Unchecked_Union (Scope (Entity (Selector_Name (Lhs))))\n                   then\n                      Discr :=\n                        First_Discriminant\n@@ -7074,6 +7075,25 @@ package body Exp_Ch4 is\n \n       Typl := Base_Type (Typl);\n \n+      --  Equality between variant records results in a call to a routine\n+      --  that has conditional tests of the discriminant value(s), and hence\n+      --  violates the No_Implicit_Conditionals restriction.\n+\n+      if Has_Variant_Part (Typl) then\n+         declare\n+            Msg : Boolean;\n+\n+         begin\n+            Check_Restriction (Msg, No_Implicit_Conditionals, N);\n+\n+            if Msg then\n+               Error_Msg_N\n+                 (\"\\comparison of variant records tests discriminants\", N);\n+               return;\n+            end if;\n+         end;\n+      end if;\n+\n       --  Deal with overflow checks in MINIMIZED/ELIMINATED mode and if that\n       --  means we no longer have a comparison operation, we are all done.\n "}, {"sha": "833a69ac6f72976bb072f573ef74c4310ff8f3e5", "filename": "gcc/ada/i-cstrin.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dda3871423cbbdfc549a98034201f2c6e2e0d8ab/gcc%2Fada%2Fi-cstrin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dda3871423cbbdfc549a98034201f2c6e2e0d8ab/gcc%2Fada%2Fi-cstrin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fi-cstrin.ads?ref=dda3871423cbbdfc549a98034201f2c6e2e0d8ab", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1993-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1993-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -60,6 +60,8 @@ package Interfaces.C.Strings is\n    function New_String (Str : String) return chars_ptr;\n \n    procedure Free (Item : in out chars_ptr);\n+   --  When deallocation is prohibited (eg: cert runtimes) this routine\n+   --  will raise Program_Error\n \n    Dereference_Error : exception;\n "}, {"sha": "6e07eb184254514a46cf13e1f6c91e3cdf7e21c4", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dda3871423cbbdfc549a98034201f2c6e2e0d8ab/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dda3871423cbbdfc549a98034201f2c6e2e0d8ab/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=dda3871423cbbdfc549a98034201f2c6e2e0d8ab", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -3728,6 +3728,13 @@ package body Make is\n                      Inform\n                        (Data.Lib_File,\n                         \"WARNING: ALI or object file not found after compile\");\n+\n+                     if not Is_Regular_File\n+                       (Get_Name_String (Name_Id (Data.Full_Lib_File)))\n+                     then\n+                        Inform (Data.Full_Lib_File, \"not found\");\n+                     end if;\n+\n                      Record_Failure (Data.Full_Source_File, Data.Source_Unit);\n                   end if;\n                end if;"}, {"sha": "f36c500bd0805c5cb0b99ba5c878e41910d8856e", "filename": "gcc/ada/sem_aux.adb", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dda3871423cbbdfc549a98034201f2c6e2e0d8ab/gcc%2Fada%2Fsem_aux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dda3871423cbbdfc549a98034201f2c6e2e0d8ab/gcc%2Fada%2Fsem_aux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.adb?ref=dda3871423cbbdfc549a98034201f2c6e2e0d8ab", "patch": "@@ -666,6 +666,51 @@ package body Sem_Aux is\n       end if;\n    end Has_Unconstrained_Elements;\n \n+   ----------------------\n+   -- Has_Variant_Part --\n+   ----------------------\n+\n+   function Has_Variant_Part (Typ : Entity_Id) return Boolean is\n+      FSTyp : Entity_Id;\n+      Decl  : Node_Id;\n+      TDef  : Node_Id;\n+      CList : Node_Id;\n+\n+   begin\n+      if not Is_Type (Typ) then\n+         return False;\n+      end if;\n+\n+      FSTyp := First_Subtype (Typ);\n+\n+      if not Has_Discriminants (FSTyp) then\n+         return False;\n+      end if;\n+\n+      --  Proceed with cautious checks here, return False if tree is not\n+      --  as expected (may be caused by prior errors).\n+\n+      Decl := Declaration_Node (FSTyp);\n+\n+      if Nkind (Decl) /= N_Full_Type_Declaration then\n+         return False;\n+      end if;\n+\n+      TDef := Type_Definition (Decl);\n+\n+      if Nkind (TDef) /= N_Record_Definition then\n+         return False;\n+      end if;\n+\n+      CList := Component_List (TDef);\n+\n+      if Nkind (CList) /= N_Component_List then\n+         return False;\n+      else\n+         return Present (Variant_Part (CList));\n+      end if;\n+   end Has_Variant_Part;\n+\n    ---------------------\n    -- In_Generic_Body --\n    ---------------------"}, {"sha": "d394d0975c06ff10ab8f4b34bb16efa7e2fa9caa", "filename": "gcc/ada/sem_aux.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dda3871423cbbdfc549a98034201f2c6e2e0d8ab/gcc%2Fada%2Fsem_aux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dda3871423cbbdfc549a98034201f2c6e2e0d8ab/gcc%2Fada%2Fsem_aux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.ads?ref=dda3871423cbbdfc549a98034201f2c6e2e0d8ab", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -255,6 +255,10 @@ package Sem_Aux is\n    --  True if T has discriminants and is unconstrained, or is an array type\n    --  whose element type Has_Unconstrained_Elements.\n \n+   function Has_Variant_Part (Typ : Entity_Id) return Boolean;\n+   --  Return True if the first subtype of Typ is a discriminated record type\n+   --  which has a variant part. False otherwise.\n+\n    function In_Generic_Body (Id : Entity_Id) return Boolean;\n    --  Determine whether entity Id appears inside a generic body\n "}, {"sha": "363572f8e46be639cdc505db866c3114d37c83a5", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dda3871423cbbdfc549a98034201f2c6e2e0d8ab/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dda3871423cbbdfc549a98034201f2c6e2e0d8ab/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=dda3871423cbbdfc549a98034201f2c6e2e0d8ab", "patch": "@@ -3132,8 +3132,23 @@ package body Sem_Ch13 is\n                Typ := Etype (Subp);\n             end if;\n \n-            return Base_Type (Typ) = Base_Type (Ent)\n-              and then No (Next_Formal (F));\n+            --  Verify that the prefix of the attribute and the local name\n+            --  for the type of the formal match.\n+\n+            if Base_Type (Typ) /= Base_Type (Ent)\n+              or else Present ((Next_Formal (F)))\n+            then\n+               return False;\n+\n+            elsif not Is_Scalar_Type (Typ)\n+              and then not Is_First_Subtype (Typ)\n+              and then not Is_Class_Wide_Type (Typ)\n+            then\n+               return False;\n+\n+            else\n+               return True;\n+            end if;\n          end Has_Good_Profile;\n \n       --  Start of processing for Analyze_Stream_TSS_Definition\n@@ -3144,6 +3159,10 @@ package body Sem_Ch13 is\n          if not Is_Type (U_Ent) then\n             Error_Msg_N (\"local name must be a subtype\", Nam);\n             return;\n+\n+         elsif not Is_First_Subtype (U_Ent) then\n+            Error_Msg_N (\"local name must be a first subtype\", Nam);\n+            return;\n          end if;\n \n          Pnam := TSS (Base_Type (U_Ent), TSS_Nam);"}, {"sha": "4da9220a3d52d377cf5980467a16451761d39701", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dda3871423cbbdfc549a98034201f2c6e2e0d8ab/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dda3871423cbbdfc549a98034201f2c6e2e0d8ab/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=dda3871423cbbdfc549a98034201f2c6e2e0d8ab", "patch": "@@ -2040,9 +2040,9 @@ package body Sem_Ch6 is\n    begin\n       --  When a subprogram body declaration is illegal, its defining entity is\n       --  left unanalyzed. There is nothing left to do in this case because the\n-      --  body lacks a contract.\n+      --  body lacks a contract, or even a proper Ekind.\n \n-      if No (Contract (Body_Id)) then\n+      if Ekind (Body_Id) = E_Void then\n          return;\n       end if;\n "}, {"sha": "7659db7c8126b2971f2fe48d098600f6a40d0965", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dda3871423cbbdfc549a98034201f2c6e2e0d8ab/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dda3871423cbbdfc549a98034201f2c6e2e0d8ab/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=dda3871423cbbdfc549a98034201f2c6e2e0d8ab", "patch": "@@ -9159,7 +9159,7 @@ package body Sem_Res is\n                Comp := First_Entity (T);\n                while Present (Comp) loop\n                   if Chars (Comp) = Chars (S)\n-                    and then Covers (Etype (Comp), Typ)\n+                    and then Covers (Typ, Etype (Comp))\n                   then\n                      if not Found then\n                         Found := True;\n@@ -9213,6 +9213,9 @@ package body Sem_Res is\n             Get_Next_Interp (I, It);\n          end loop Search;\n \n+         --  There must be a legal interpreations at this point.\n+\n+         pragma Assert (Found);\n          Resolve (P, It1.Typ);\n          Set_Etype (N, Typ);\n          Set_Entity_With_Checks (S, Comp1);\n@@ -9240,6 +9243,7 @@ package body Sem_Res is\n       if Is_Access_Type (Etype (P)) then\n          T := Designated_Type (Etype (P));\n          Check_Fully_Declared_Prefix (T, P);\n+\n       else\n          T := Etype (P);\n       end if;"}]}