{"sha": "4dadc66d180efede2b31bc3c45a9602cd03fca84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRhZGM2NmQxODBlZmVkZTJiMzFiYzNjNDVhOTYwMmNkMDNmY2E4NA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2014-06-06T16:01:37Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-06-06T16:01:37Z"}, "message": "re PR c++/60184 (g++ does not allow static members of named unions)\n\n/cp\n2014-06-06  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/60184\n\t* class.c (check_field_decls): In C++11 mode do not reject\n\tstatic data members and reference-type members in unions.\n\n/testsuite\n2014-06-06  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/60184\n\t* g++.dg/cpp0x/constexpr-union6.C: New.\n\t* g++.dg/cpp0x/union6.C: Likewise.\n\t* g++.dg/init/ref14.C: Adjust.\n\t* g++.dg/init/union1.C: Likewise.\n\nFrom-SVN: r211318", "tree": {"sha": "66b582dce11988db429d9434ea9bf376af8fd140", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66b582dce11988db429d9434ea9bf376af8fd140"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4dadc66d180efede2b31bc3c45a9602cd03fca84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dadc66d180efede2b31bc3c45a9602cd03fca84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dadc66d180efede2b31bc3c45a9602cd03fca84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dadc66d180efede2b31bc3c45a9602cd03fca84/comments", "author": null, "committer": null, "parents": [{"sha": "acce8ce3bf1d3e588a9fb867cec6207e20596482", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acce8ce3bf1d3e588a9fb867cec6207e20596482", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acce8ce3bf1d3e588a9fb867cec6207e20596482"}], "stats": {"total": 65, "additions": 56, "deletions": 9}, "files": [{"sha": "54c7948bb8805920ba274183b6c5da8ad274e7b3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dadc66d180efede2b31bc3c45a9602cd03fca84/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dadc66d180efede2b31bc3c45a9602cd03fca84/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4dadc66d180efede2b31bc3c45a9602cd03fca84", "patch": "@@ -1,3 +1,9 @@\n+2014-06-06  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/60184\n+\t* class.c (check_field_decls): In C++11 mode do not reject\n+\tstatic data members and reference-type members in unions.\n+\n 2014-06-05  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/43453"}, {"sha": "25fc89bc013263a6e482986b771bf6d357597696", "filename": "gcc/cp/class.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dadc66d180efede2b31bc3c45a9602cd03fca84/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dadc66d180efede2b31bc3c45a9602cd03fca84/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=4dadc66d180efede2b31bc3c45a9602cd03fca84", "patch": "@@ -3480,22 +3480,25 @@ check_field_decls (tree t, tree *access_decls,\n       /* When this goes into scope, it will be a non-local reference.  */\n       DECL_NONLOCAL (x) = 1;\n \n-      if (TREE_CODE (t) == UNION_TYPE)\n+      if (TREE_CODE (t) == UNION_TYPE\n+\t  && cxx_dialect < cxx11)\n \t{\n-\t  /* [class.union]\n+\t  /* [class.union] (C++98)\n \n \t     If a union contains a static data member, or a member of\n-\t     reference type, the program is ill-formed.  */\n+\t     reference type, the program is ill-formed.\n+\n+\t     In C++11 this limitation doesn't exist anymore.  */\n \t  if (VAR_P (x))\n \t    {\n-\t      error (\"%q+D may not be static because it is a member of a union\", x);\n+\t      error (\"in C++98 %q+D may not be static because it is \"\n+\t\t     \"a member of a union\", x);\n \t      continue;\n \t    }\n \t  if (TREE_CODE (type) == REFERENCE_TYPE)\n \t    {\n-\t      error (\"%q+D may not have reference type %qT because\"\n-\t\t     \" it is a member of a union\",\n-\t\t     x, type);\n+\t      error (\"in C++98 %q+D may not have reference type %qT \"\n+\t\t     \"because it is a member of a union\", x, type);\n \t      continue;\n \t    }\n \t}"}, {"sha": "9f97db486050547a857679cf266903a265df7b99", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dadc66d180efede2b31bc3c45a9602cd03fca84/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dadc66d180efede2b31bc3c45a9602cd03fca84/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4dadc66d180efede2b31bc3c45a9602cd03fca84", "patch": "@@ -1,3 +1,11 @@\n+2014-06-06  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/60184\n+\t* g++.dg/cpp0x/constexpr-union6.C: New.\n+\t* g++.dg/cpp0x/union6.C: Likewise.\n+\t* g++.dg/init/ref14.C: Adjust.\n+\t* g++.dg/init/union1.C: Likewise.\n+\n 2014-06-06  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/59299"}, {"sha": "96d48182c3d22ab45f82ae3b7033e7ccae770026", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-union6.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dadc66d180efede2b31bc3c45a9602cd03fca84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-union6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dadc66d180efede2b31bc3c45a9602cd03fca84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-union6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-union6.C?ref=4dadc66d180efede2b31bc3c45a9602cd03fca84", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/60184\n+// { dg-do compile { target c++11 } }\n+\n+union Test1 {\n+  static constexpr int kConstant = 10;\n+};\n+\n+union Test2 {\n+  static constexpr const int& kConstant = Test1::kConstant;\n+};"}, {"sha": "1706da9db59b1f248dc5a81305a81c847a56358c", "filename": "gcc/testsuite/g++.dg/cpp0x/union6.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dadc66d180efede2b31bc3c45a9602cd03fca84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Funion6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dadc66d180efede2b31bc3c45a9602cd03fca84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Funion6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Funion6.C?ref=4dadc66d180efede2b31bc3c45a9602cd03fca84", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/60184\n+// { dg-do compile { target c++11 } }\n+\n+union Test1 {\n+  static int kConstant;\n+};\n+\n+union Test2 {\n+  static const int kConstant;\n+};\n+\n+const int Test2::kConstant = 10;\n+\n+union Test3 {\n+  int& kConstant;\n+};\n+\n+union Test4 {\n+  const int& kConstant = 10;\n+};"}, {"sha": "2e522c195668b777241548edb2cce9f200454597", "filename": "gcc/testsuite/g++.dg/init/ref14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dadc66d180efede2b31bc3c45a9602cd03fca84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fref14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dadc66d180efede2b31bc3c45a9602cd03fca84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fref14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fref14.C?ref=4dadc66d180efede2b31bc3c45a9602cd03fca84", "patch": "@@ -4,7 +4,7 @@\n \n union A\n {\n-  int &i; // { dg-error \"may not have reference type\" }\n+  int &i; // { dg-error \"may not have reference type\" \"\" { target { ! c++11 } } }\n };\n \n void foo()"}, {"sha": "ea88346ebe882b9b3c9becdd3fe7fcef0a505fcf", "filename": "gcc/testsuite/g++.dg/init/union1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dadc66d180efede2b31bc3c45a9602cd03fca84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Funion1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dadc66d180efede2b31bc3c45a9602cd03fca84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Funion1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Funion1.C?ref=4dadc66d180efede2b31bc3c45a9602cd03fca84", "patch": "@@ -1,5 +1,5 @@\n // PR c++/14401\n \n union U {\n-  int& i; // { dg-error \"\" }\n+  int& i; // { dg-error \"reference type\" \"\" { target { ! c++11 } } }\n };"}]}