{"sha": "d27f3ff4c3165d5decf103e63336095730745f82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI3ZjNmZjRjMzE2NWQ1ZGVjZjEwM2U2MzMzNjA5NTczMDc0NWY4Mg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-07-09T13:24:20Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-07-09T13:24:20Z"}, "message": "[multiple changes]\n\n2012-07-09  Robert Dewar  <dewar@adacore.com>\n\n\t* freeze.adb: Minor code reorganization (use Ekind_In).\n\t* exp_attr.adb, sem_ch9.adb par-ch4.adb, s-taprop-mingw.adb,\n\tsem_attr.adb, exp_ch8.adb, snames.adb-tmpl, par-util.adb,\n\tsem_ch13.adb, snames.ads-tmpl: Minor reformatting.\n\n2012-07-09  Tristan Gingold  <gingold@adacore.com>\n\n\t* raise-gcc.c: Adjust previous patch.\n\n2012-07-09  Vincent Celier  <celier@adacore.com>\n\n\t* make.adb (Compilation_Phase): Do not build libraries in\n\tCodepeer mode (do not call Library_Phase).\n\nFrom-SVN: r189379", "tree": {"sha": "9eff2140d9be62222e4ed1d9c4ac35cdd16917ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9eff2140d9be62222e4ed1d9c4ac35cdd16917ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d27f3ff4c3165d5decf103e63336095730745f82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d27f3ff4c3165d5decf103e63336095730745f82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d27f3ff4c3165d5decf103e63336095730745f82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d27f3ff4c3165d5decf103e63336095730745f82/comments", "author": null, "committer": null, "parents": [{"sha": "d48f3dca79fe7cd124c90d33dcc88b2147e23856", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d48f3dca79fe7cd124c90d33dcc88b2147e23856", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d48f3dca79fe7cd124c90d33dcc88b2147e23856"}], "stats": {"total": 115, "additions": 72, "deletions": 43}, "files": [{"sha": "bdb53188c269a4e3c68012c14610ee5d29d8ad76", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27f3ff4c3165d5decf103e63336095730745f82/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27f3ff4c3165d5decf103e63336095730745f82/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d27f3ff4c3165d5decf103e63336095730745f82", "patch": "@@ -1,3 +1,19 @@\n+2012-07-09  Robert Dewar  <dewar@adacore.com>\n+\n+\t* freeze.adb: Minor code reorganization (use Ekind_In).\n+\t* exp_attr.adb, sem_ch9.adb par-ch4.adb, s-taprop-mingw.adb,\n+\tsem_attr.adb, exp_ch8.adb, snames.adb-tmpl, par-util.adb,\n+\tsem_ch13.adb, snames.ads-tmpl: Minor reformatting.\n+\n+2012-07-09  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* raise-gcc.c: Adjust previous patch.\n+\n+2012-07-09  Vincent Celier  <celier@adacore.com>\n+\n+\t* make.adb (Compilation_Phase): Do not build libraries in\n+\tCodepeer mode (do not call Library_Phase).\n+\n 2012-07-09  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch13.adb: Extend previous change to elementary types."}, {"sha": "4dbd38f4c59d04a3ab91f17ec1c8c16e5f6b47b4", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27f3ff4c3165d5decf103e63336095730745f82/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27f3ff4c3165d5decf103e63336095730745f82/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=d27f3ff4c3165d5decf103e63336095730745f82", "patch": "@@ -838,8 +838,8 @@ package body Exp_Attr is\n            Attribute_Variable_Indexing    =>\n          null;\n \n-      --  Internal attributes used to deal with Ada 2012 delayed aspects\n-      --  (already diagnosed by parser, thus nothing more to do here).\n+      --  Internal attributes used to deal with Ada 2012 delayed aspects. These\n+      --  were already rejected by the parser. Thus they shouldn't appear here.\n \n       when Attribute_CPU                |\n            Attribute_Dispatching_Domain |"}, {"sha": "3b5c7d3ae6466868692730a7855db0d824850c64", "filename": "gcc/ada/exp_ch8.adb", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27f3ff4c3165d5decf103e63336095730745f82/gcc%2Fada%2Fexp_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27f3ff4c3165d5decf103e63336095730745f82/gcc%2Fada%2Fexp_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch8.adb?ref=d27f3ff4c3165d5decf103e63336095730745f82", "patch": "@@ -243,8 +243,12 @@ package body Exp_Ch8 is\n       Id  : constant Entity_Id  := Defining_Entity (N);\n \n       function Build_Body_For_Renaming return Node_Id;\n-      --  Build and return the body for the renaming declaration of an\n-      --  equality or unequality operator.\n+      --  Build and return the body for the renaming declaration of an equality\n+      --  or inequality operator.\n+\n+      -----------------------------\n+      -- Build_Body_For_Renaming --\n+      -----------------------------\n \n       function Build_Body_For_Renaming return Node_Id is\n          Body_Id : Entity_Id;\n@@ -275,10 +279,12 @@ package body Exp_Ch8 is\n          return Decl;\n       end Build_Body_For_Renaming;\n \n-      --  Local variable\n+      --  Local variables\n \n       Nam : constant Node_Id := Name (N);\n \n+   --  Start of processing for Expand_N_Subprogram_Renaming_Declaration\n+\n    begin\n       --  When the prefix of the name is a function call, we must force the\n       --  call to be made by removing side effects from the call, since we\n@@ -334,9 +340,9 @@ package body Exp_Ch8 is\n                        Expression =>\n                          Expand_Record_Equality\n                            (Id,\n-                            Typ => Typ,\n-                            Lhs => Make_Identifier (Loc, Chars (Left)),\n-                            Rhs => Make_Identifier (Loc, Chars (Right)),\n+                            Typ    => Typ,\n+                            Lhs    => Make_Identifier (Loc, Chars (Left)),\n+                            Rhs    => Make_Identifier (Loc, Chars (Right)),\n                             Bodies => Declarations (Decl))))));\n \n                Append (Decl, List_Containing (N));"}, {"sha": "850e96374329ff2e8f62ceecfcbb7029b34f5916", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27f3ff4c3165d5decf103e63336095730745f82/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27f3ff4c3165d5decf103e63336095730745f82/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=d27f3ff4c3165d5decf103e63336095730745f82", "patch": "@@ -1908,8 +1908,8 @@ package body Freeze is\n       begin\n          --  Deal with delayed aspect specifications for components. The\n          --  analysis of the aspect is required to be delayed to the freeze\n-         --  point, thus we analyze the pragma or attribute definition clause\n-         --  in the tree at this point. We also analyze the aspect\n+         --  point, thus we analyze the pragma or attribute definition\n+         --  clause in the tree at this point. We also analyze the aspect\n          --  specification node at the freeze point when the aspect doesn't\n          --  correspond to pragma/attribute definition clause.\n \n@@ -1955,9 +1955,7 @@ package body Freeze is\n \n             --  Handle the component and discriminant case\n \n-            if Ekind (Comp) = E_Component\n-              or else Ekind (Comp) = E_Discriminant\n-            then\n+            if Ekind_In (Comp, E_Component, E_Discriminant) then\n                declare\n                   CC : constant Node_Id := Component_Clause (Comp);\n "}, {"sha": "5c35a4ebb39dbcec16699a16957a0bb1171261f7", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27f3ff4c3165d5decf103e63336095730745f82/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27f3ff4c3165d5decf103e63336095730745f82/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=d27f3ff4c3165d5decf103e63336095730745f82", "patch": "@@ -4811,6 +4811,7 @@ package body Make is\n       --  have been regenerated.\n \n       if Main_Project /= No_Project\n+        and then not Codepeer_Mode\n         and then MLib.Tgt.Support_For_Libraries /= Prj.None\n         and then (Do_Bind_Step\n                    or Unique_Compile_All_Projects"}, {"sha": "11ef4c7e3f1585db7dafdd1831b36c39aedef22e", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27f3ff4c3165d5decf103e63336095730745f82/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27f3ff4c3165d5decf103e63336095730745f82/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=d27f3ff4c3165d5decf103e63336095730745f82", "patch": "@@ -435,7 +435,8 @@ package body Ch4 is\n                Attr_Name := Token_Name;\n \n                --  Note that internal attributes names don't denote real\n-               --  attribute.\n+               --  attributes, so do not count in this error test. We just\n+               --  want to consider them as not being attribute names.\n \n                if not Is_Attribute_Name (Attr_Name)\n                  or else Is_Internal_Attribute_Name (Attr_Name)"}, {"sha": "ec2d4780f10ad0b67e1b94d6bc60c6f030313254", "filename": "gcc/ada/par-util.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27f3ff4c3165d5decf103e63336095730745f82/gcc%2Fada%2Fpar-util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27f3ff4c3165d5decf103e63336095730745f82/gcc%2Fada%2Fpar-util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-util.adb?ref=d27f3ff4c3165d5decf103e63336095730745f82", "patch": "@@ -721,8 +721,9 @@ package body Util is\n \n       Error_Msg_Name_1 := First_Attribute_Name;\n       while Error_Msg_Name_1 <= Last_Attribute_Name loop\n+\n          --  No mispelling possible with internal attribute names since they\n-         --  don't denote real attribute.\n+         --  don't denote real attributes.\n \n          if not Is_Internal_Attribute_Name (Error_Msg_Name_1)\n            and then Is_Bad_Spelling_Of (Token_Name, Error_Msg_Name_1)"}, {"sha": "8a5dbcf5209af4a1e236372d644c46afdf9c8c35", "filename": "gcc/ada/raise-gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27f3ff4c3165d5decf103e63336095730745f82/gcc%2Fada%2Fraise-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27f3ff4c3165d5decf103e63336095730745f82/gcc%2Fada%2Fraise-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise-gcc.c?ref=d27f3ff4c3165d5decf103e63336095730745f82", "patch": "@@ -1167,7 +1167,7 @@ __gnat_cleanupunwind_handler (int version,\n {\n   /* Terminate when the end of the stack is reached.  */\n   if ((phases & _UA_END_OF_STACK) != 0\n-#if defined (__ia64__) && defined (USE_LIBUNWIND_EXCEPTIONS)\n+#if defined (__ia64__) && defined (__hpux__)\n       /* Strictely follow the ia64 ABI: when end of stack is reached,\n \t the callback will be called with a NULL stack pointer.\n \t No need for that when using libgcc unwinder.  */"}, {"sha": "75d81cb63274679d75a3ac6b75831512035c3212", "filename": "gcc/ada/s-taprop-mingw.adb", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27f3ff4c3165d5decf103e63336095730745f82/gcc%2Fada%2Fs-taprop-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27f3ff4c3165d5decf103e63336095730745f82/gcc%2Fada%2Fs-taprop-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-mingw.adb?ref=d27f3ff4c3165d5decf103e63336095730745f82", "patch": "@@ -725,15 +725,17 @@ package body System.Task_Primitives.Operations is\n       pragma Unreferenced (Loss_Of_Inheritance);\n \n    begin\n-      Res := SetThreadPriority\n-        (T.Common.LL.Thread, Interfaces.C.int (Underlying_Priorities (Prio)));\n+      Res :=\n+        SetThreadPriority\n+          (T.Common.LL.Thread,\n+           Interfaces.C.int (Underlying_Priorities (Prio)));\n       pragma Assert (Res = Win32.TRUE);\n \n       --  Note: Annex D (RM D.2.3(5/2)) requires the task to be placed at the\n       --  head of its priority queue when decreasing its priority as a result\n       --  of a loss of inherited priority. This is not the case, but we\n-      --  consider it an acceptable variation (RM 1.1.3(6)), given this is the\n-      --  built-in behavior offered by the Windows operating system.\n+      --  consider it an acceptable variation (RM 1.1.3(6)), given this is\n+      --  the built-in behavior offered by the Windows operating system.\n \n       --  In older versions we attempted to better approximate the Annex D\n       --  required behavior, but this simulation was not entirely accurate,"}, {"sha": "71e6d7cec4cc6e35ba6c392d05fabddd9d2fe15b", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27f3ff4c3165d5decf103e63336095730745f82/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27f3ff4c3165d5decf103e63336095730745f82/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=d27f3ff4c3165d5decf103e63336095730745f82", "patch": "@@ -2215,8 +2215,8 @@ package body Sem_Attr is\n            Attribute_Variable_Indexing    =>\n          Error_Msg_N (\"illegal attribute\", N);\n \n-      --  Internal attributes used to deal with Ada 2012 delayed aspects\n-      --  (already diagnosed by parser, thus nothing more to do here).\n+      --  Internal attributes used to deal with Ada 2012 delayed aspects. These\n+      --  were already rejected by the parser. Thus they shouldn't appear here.\n \n       when Attribute_CPU                |\n            Attribute_Dispatching_Domain |"}, {"sha": "a601c7b78cf079e57bbbc2836434b4674f9381e1", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27f3ff4c3165d5decf103e63336095730745f82/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27f3ff4c3165d5decf103e63336095730745f82/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=d27f3ff4c3165d5decf103e63336095730745f82", "patch": "@@ -7741,6 +7741,7 @@ package body Sem_Ch13 is\n         and then Siz > UI_From_Int (Int'Last)\n       then\n          Error_Msg_N (\"Size value too large for elementary type\", N);\n+\n          if Nkind (Original_Node (N)) = N_Op_Expon then\n             Error_Msg_N\n               (\"\\maybe '* was meant, rather than '*'*\", Original_Node (N));"}, {"sha": "8c570449c117a25ec120d198c9be0dc99a9c4b4d", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27f3ff4c3165d5decf103e63336095730745f82/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27f3ff4c3165d5decf103e63336095730745f82/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=d27f3ff4c3165d5decf103e63336095730745f82", "patch": "@@ -138,8 +138,7 @@ package body Sem_Ch9 is\n             Pdef       : constant Node_Id := Protected_Definition (N);\n             Priv_Decls : constant List_Id := Private_Declarations (Pdef);\n             Vis_Decls  : constant List_Id := Visible_Declarations (Pdef);\n-\n-            Decl : Node_Id;\n+            Decl       : Node_Id;\n \n          begin\n             --  Examine the visible and the private declarations\n@@ -152,8 +151,8 @@ package body Sem_Ch9 is\n \n                if Nkind (Decl) = N_Entry_Declaration then\n                   if Complain then\n-                     Error_Msg_N (\"entry not allowed when Lock_Free given\",\n-                                  Decl);\n+                     Error_Msg_N\n+                       (\"entry not allowed when Lock_Free given\", Decl);\n                   end if;\n \n                   return False;\n@@ -162,10 +161,10 @@ package body Sem_Ch9 is\n                --  allowed by the lock-free restrictions.\n \n                elsif Nkind (Decl) = N_Subprogram_Declaration\n-                 and then Nkind (Specification (Decl)) =\n-                            N_Procedure_Specification\n-                 and then Present\n-                            (Parameter_Specifications (Specification (Decl)))\n+                 and then\n+                   Nkind (Specification (Decl)) = N_Procedure_Specification\n+                 and then\n+                   Present (Parameter_Specifications (Specification (Decl)))\n                then\n                   declare\n                      Par_Specs : constant List_Id   :=\n@@ -192,8 +191,7 @@ package body Sem_Ch9 is\n                   end;\n                end if;\n \n-               --  Examine the private declarations after the visible\n-               --  declarations.\n+               --  Examine private declarations after visible declarations\n \n                if No (Next (Decl))\n                  and then List_Containing (Decl) = Vis_Decls\n@@ -433,14 +431,13 @@ package body Sem_Ch9 is\n \n          begin\n             Decl := First (Decls);\n-\n             while Present (Decl) loop\n                if Nkind (Decl) = N_Subprogram_Body\n                  and then not Satisfies_Lock_Free_Requirements (Decl)\n                then\n                   if Complain then\n-                     Error_Msg_N (\"body not allowed when Lock_Free given\",\n-                                  Decl);\n+                     Error_Msg_N\n+                       (\"body not allowed when Lock_Free given\", Decl);\n                   end if;\n \n                   return False;\n@@ -479,7 +476,7 @@ package body Sem_Ch9 is\n          else\n             if Ada_Version >= Ada_2005 then\n                Error_Msg_N (\"expect task name or task interface class-wide \"\n-                          & \"object for ABORT\", T_Name);\n+                            & \"object for ABORT\", T_Name);\n             else\n                Error_Msg_N (\"expect task name for ABORT\", T_Name);\n             end if;\n@@ -1782,13 +1779,14 @@ package body Sem_Ch9 is\n       --  issued by Allows_Lock_Free_Implementation.\n \n       if Uses_Lock_Free (Defining_Identifier (N)) then\n+\n          --  Complain when there is an explicit aspect/pragma Priority (or\n          --  Interrupt_Priority) while the lock-free implementation is forced\n          --  by an aspect/pragma.\n \n          declare\n-            Id        : constant Entity_Id :=\n-                          Defining_Identifier (Original_Node (N));\n+            Id : constant Entity_Id :=\n+                   Defining_Identifier (Original_Node (N));\n             --  The warning must be issued on the original identifier in order\n             --  to deal properly with the case of a single protected object.\n \n@@ -1800,6 +1798,7 @@ package body Sem_Ch9 is\n \n          begin\n             if Present (Prio_Item) then\n+\n                --  Aspect case\n \n                if Nkind (Prio_Item) = N_Aspect_Specification"}, {"sha": "3a22750b38926076a25885c28ea3a2fd84b1fa7d", "filename": "gcc/ada/snames.adb-tmpl", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27f3ff4c3165d5decf103e63336095730745f82/gcc%2Fada%2Fsnames.adb-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27f3ff4c3165d5decf103e63336095730745f82/gcc%2Fada%2Fsnames.adb-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.adb-tmpl?ref=d27f3ff4c3165d5decf103e63336095730745f82", "patch": "@@ -398,9 +398,10 @@ package body Snames is\n \n    function Is_Internal_Attribute_Name (N : Name_Id) return Boolean is\n    begin\n-      return N = Name_CPU\n-        or N = Name_Interrupt_Priority\n-        or N = Name_Dispatching_Domain;\n+      return\n+        N = Name_CPU                or else\n+        N = Name_Interrupt_Priority or else\n+        N = Name_Dispatching_Domain;\n    end Is_Internal_Attribute_Name;\n \n    ----------------------------"}, {"sha": "03e6a511ccc9a4f05723fc2b6f2c15e50d7348a6", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27f3ff4c3165d5decf103e63336095730745f82/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27f3ff4c3165d5decf103e63336095730745f82/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=d27f3ff4c3165d5decf103e63336095730745f82", "patch": "@@ -754,9 +754,12 @@ package Snames is\n    --  section in Sem_Attr.\n \n    --  The entries marked INT are not real attributes. They are special names\n-   --  used internally by GNAT in order to deal with delayed aspects\n+   --  used internally by GNAT in order to deal with certain delayed aspects\n    --  (Aspect_CPU, Aspect_Dispatching_Domain, Aspect_Interrupt_Priority) that\n-   --  don't have corresponding pragma or attribute.\n+   --  don't have corresponding pragmas or user-referencable attributes. It is\n+   --  convenient to have these internal attributes available in processing\n+   --  the aspects, since the normal approach is to convert an aspect into its\n+   --  corresponding pragma or attribute specification.\n \n    --  The entries marked VMS are recognized only in OpenVMS implementations\n    --  of GNAT, and are treated as illegal in all other contexts."}]}