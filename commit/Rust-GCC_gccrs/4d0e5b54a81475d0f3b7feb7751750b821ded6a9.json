{"sha": "4d0e5b54a81475d0f3b7feb7751750b821ded6a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQwZTViNTRhODE0NzVkMGYzYjdmZWI3NzUxNzUwYjgyMWRlZDZhOQ==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-09-23T08:25:55Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-09-23T08:25:55Z"}, "message": "Revert r202780:\n\n\t* config/aarch64/aarch64.c (aarch64_expand_prologue): Use plus_constant.\n\t(aarch64_expand_epilogue): Likewise.\n\t(aarch64_legitimize_reload_address): Likewise.\n\nFrom-SVN: r202824", "tree": {"sha": "6bbb812f602155caea846ab49aad3b0899c2cdd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bbb812f602155caea846ab49aad3b0899c2cdd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d0e5b54a81475d0f3b7feb7751750b821ded6a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d0e5b54a81475d0f3b7feb7751750b821ded6a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d0e5b54a81475d0f3b7feb7751750b821ded6a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d0e5b54a81475d0f3b7feb7751750b821ded6a9/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "42e3d759b982c73b1ceb7606a25b3f368d8f3c78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42e3d759b982c73b1ceb7606a25b3f368d8f3c78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42e3d759b982c73b1ceb7606a25b3f368d8f3c78"}], "stats": {"total": 41, "additions": 25, "deletions": 16}, "files": [{"sha": "1d9c5a9c3e9a7d1ab622c14b4fb197f49f9f8c54", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0e5b54a81475d0f3b7feb7751750b821ded6a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0e5b54a81475d0f3b7feb7751750b821ded6a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d0e5b54a81475d0f3b7feb7751750b821ded6a9", "patch": "@@ -1,3 +1,12 @@\n+2013-09-23  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\tRevert r202780:\n+\t2013-09-20  Renlin Li  <renlin.li@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_expand_prologue): Use plus_constant.\n+\t(aarch64_expand_epilogue): Likewise.\n+\t(aarch64_legitimize_reload_address): Likewise.\n+\n 2013-09-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gimplify.c (gimplify_asm_expr): Reset the TREE_CHAIN of clobbers to"}, {"sha": "e8ae20ad3d2f7805314a9b391dff11218eb72957", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0e5b54a81475d0f3b7feb7751750b821ded6a9/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0e5b54a81475d0f3b7feb7751750b821ded6a9/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=4d0e5b54a81475d0f3b7feb7751750b821ded6a9", "patch": "@@ -2065,9 +2065,9 @@ aarch64_expand_prologue (void)\n \t  emit_insn (gen_add2_insn (stack_pointer_rtx, op0));\n \t  aarch64_set_frame_expr (gen_rtx_SET\n \t\t\t\t  (Pmode, stack_pointer_rtx,\n-\t\t\t\t   plus_constant (Pmode,\n-\t\t\t\t\t\t  stack_pointer_rtx,\n-\t\t\t\t\t\t  -frame_size)));\n+\t\t\t\t   gen_rtx_PLUS (Pmode,\n+\t\t\t\t\t\t stack_pointer_rtx,\n+\t\t\t\t\t\t GEN_INT (-frame_size))));\n \t}\n       else if (frame_size > 0)\n \t{\n@@ -2151,9 +2151,9 @@ aarch64_expand_prologue (void)\n \t\t\t\t\t   GEN_INT (fp_offset)));\n \t  aarch64_set_frame_expr (gen_rtx_SET\n \t\t\t\t  (Pmode, hard_frame_pointer_rtx,\n-\t\t\t\t   plus_constant (Pmode,\n-\t\t\t\t\t\t  stack_pointer_rtx,\n-\t\t\t\t\t\t  fp_offset)));\n+\t\t\t\t   gen_rtx_PLUS (Pmode,\n+\t\t\t\t\t\t stack_pointer_rtx,\n+\t\t\t\t\t\t GEN_INT (fp_offset))));\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \t  insn = emit_insn (gen_stack_tie (stack_pointer_rtx,\n \t\t\t\t\t   hard_frame_pointer_rtx));\n@@ -2349,9 +2349,9 @@ aarch64_expand_epilogue (bool for_sibcall)\n \t  emit_insn (gen_add2_insn (stack_pointer_rtx, op0));\n \t  aarch64_set_frame_expr (gen_rtx_SET\n \t\t\t\t  (Pmode, stack_pointer_rtx,\n-\t\t\t\t   plus_constant (Pmode,\n-\t\t\t\t\t\t  stack_pointer_rtx,\n-\t\t\t\t\t\t  frame_size)));\n+\t\t\t\t   gen_rtx_PLUS (Pmode,\n+\t\t\t\t\t\t stack_pointer_rtx,\n+\t\t\t\t\t\t GEN_INT (frame_size))));\n \t}\n       else if (frame_size > 0)\n \t{\n@@ -2373,10 +2373,10 @@ aarch64_expand_epilogue (bool for_sibcall)\n \t    }\n \t}\n \n-        aarch64_set_frame_expr (gen_rtx_SET (Pmode, stack_pointer_rtx,\n-\t\t\t\t\t     plus_constant (Pmode,\n-\t\t\t\t\t\t\t    stack_pointer_rtx,\n-\t\t\t\t\t\t\t    offset)));\n+      aarch64_set_frame_expr (gen_rtx_SET (Pmode, stack_pointer_rtx,\n+\t\t\t\t\t   gen_rtx_PLUS (Pmode,\n+\t\t\t\t\t\t\t stack_pointer_rtx,\n+\t\t\t\t\t\t\t GEN_INT (offset))));\n     }\n \n   emit_use (gen_rtx_REG (DImode, LR_REGNUM));\n@@ -4014,9 +4014,9 @@ aarch64_legitimize_reload_address (rtx *x_p,\n \n       /* Reload high part into base reg, leaving the low part\n \t in the mem instruction.  */\n-      x = plus_constant (xmode,\n-\t\t\t gen_rtx_PLUS (xmode, XEXP (x, 0), cst),\n-\t\t\t low);\n+      x = gen_rtx_PLUS (xmode,\n+\t\t\tgen_rtx_PLUS (xmode, XEXP (x, 0), cst),\n+\t\t\tGEN_INT (low));\n \n       push_reload (XEXP (x, 0), NULL_RTX, &XEXP (x, 0), NULL,\n \t\t   BASE_REG_CLASS, xmode, VOIDmode, 0, 0,"}]}