{"sha": "c1a330ef7f8c77e4cd064f0008d4b735ff9d621b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFhMzMwZWY3ZjhjNzdlNGNkMDY0ZjAwMDhkNGI3MzVmZjlkNjIxYg==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-10-21T15:46:32Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-10-21T15:46:32Z"}, "message": "avr.h (LEGITIMIZE_RELOAD_ADDRESS): Pass address of X instead of X to avr_legitimize_reload_address.\n\n\t* config/avr/avr.h (LEGITIMIZE_RELOAD_ADDRESS): Pass address of X\n\tinstead of X to avr_legitimize_reload_address.\n\t* config/avr/avr-protos.h (avr_legitimize_reload_address): Change\n\tfirst argument's type from rtx to rtx*.\n\t* config/avr/avr.c (avr_legitimize_reload_address): Ditto.\n\tPass PX to push_reload instead of &X.  Change log messages for\n\tbetter distinction.\n\nFrom-SVN: r180308", "tree": {"sha": "8ed3283a266fd187e6cf4b77d36819590385d8dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ed3283a266fd187e6cf4b77d36819590385d8dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1a330ef7f8c77e4cd064f0008d4b735ff9d621b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1a330ef7f8c77e4cd064f0008d4b735ff9d621b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1a330ef7f8c77e4cd064f0008d4b735ff9d621b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1a330ef7f8c77e4cd064f0008d4b735ff9d621b/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9200b30225ee5a65aff650ce166735f04501abea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9200b30225ee5a65aff650ce166735f04501abea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9200b30225ee5a65aff650ce166735f04501abea"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "9d3269f63220981f049535b0194bf76b782e0ba9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1a330ef7f8c77e4cd064f0008d4b735ff9d621b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1a330ef7f8c77e4cd064f0008d4b735ff9d621b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1a330ef7f8c77e4cd064f0008d4b735ff9d621b", "patch": "@@ -1,3 +1,13 @@\n+2011-10-21  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/avr.h (LEGITIMIZE_RELOAD_ADDRESS): Pass address of X\n+\tinstead of X to avr_legitimize_reload_address.\n+\t* config/avr/avr-protos.h (avr_legitimize_reload_address): Change\n+\tfirst argument's type from rtx to rtx*.\n+\t* config/avr/avr.c (avr_legitimize_reload_address): Ditto.\n+\tPass PX to push_reload instead of &X.  Change log messages for\n+\tbetter distinction.\n+\n 2011-10-21  Roland Stigge  <stigge@antcom.de>\n \n \tPR translation/47064"}, {"sha": "817169e39fef5302aabe7f7e7853b421723aac27", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1a330ef7f8c77e4cd064f0008d4b735ff9d621b/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1a330ef7f8c77e4cd064f0008d4b735ff9d621b/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=c1a330ef7f8c77e4cd064f0008d4b735ff9d621b", "patch": "@@ -110,7 +110,7 @@ extern void out_shift_with_cnt (const char *templ, rtx insn,\n extern reg_class_t avr_mode_code_base_reg_class (enum machine_mode, RTX_CODE, RTX_CODE);\n extern bool avr_regno_mode_code_ok_for_base_p (int, enum machine_mode, RTX_CODE, RTX_CODE);\n extern rtx avr_incoming_return_addr_rtx (void);\n-extern rtx avr_legitimize_reload_address (rtx, enum machine_mode, int, int, int, int, rtx (*)(rtx,int));\n+extern rtx avr_legitimize_reload_address (rtx*, enum machine_mode, int, int, int, int, rtx (*)(rtx,int));\n #endif /* RTX_CODE */\n \n #ifdef REAL_VALUE_TYPE"}, {"sha": "1d4c32aa3400f0f425635ee25328a20eea14e3df", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1a330ef7f8c77e4cd064f0008d4b735ff9d621b/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1a330ef7f8c77e4cd064f0008d4b735ff9d621b/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=c1a330ef7f8c77e4cd064f0008d4b735ff9d621b", "patch": "@@ -1356,11 +1356,13 @@ avr_legitimize_address (rtx x, rtx oldx, enum machine_mode mode)\n    than 63 bytes or for R++ or --R addressing.  */\n \n rtx\n-avr_legitimize_reload_address (rtx x, enum machine_mode mode,\n+avr_legitimize_reload_address (rtx *px, enum machine_mode mode,\n                                int opnum, int type, int addr_type,\n                                int ind_levels ATTRIBUTE_UNUSED,\n                                rtx (*mk_memloc)(rtx,int))\n {\n+  rtx x = *px;\n+  \n   if (avr_log.legitimize_reload_address)\n     avr_edump (\"\\n%?:%m %r\\n\", mode, x);\n   \n@@ -1372,7 +1374,7 @@ avr_legitimize_reload_address (rtx x, enum machine_mode mode,\n                    opnum, RELOAD_OTHER);\n       \n       if (avr_log.legitimize_reload_address)\n-        avr_edump (\" RCLASS = %R\\n IN = %r\\n OUT = %r\\n\",\n+        avr_edump (\" RCLASS.1 = %R\\n IN = %r\\n OUT = %r\\n\",\n                    POINTER_REGS, XEXP (x, 0), XEXP (x, 0));\n       \n       return x;\n@@ -1398,15 +1400,15 @@ avr_legitimize_reload_address (rtx x, enum machine_mode mode,\n                            1, addr_type);\n               \n               if (avr_log.legitimize_reload_address)\n-                avr_edump (\" RCLASS = %R\\n IN = %r\\n OUT = %r\\n\",\n+                avr_edump (\" RCLASS.2 = %R\\n IN = %r\\n OUT = %r\\n\",\n                            POINTER_REGS, XEXP (mem, 0), NULL_RTX);\n               \n               push_reload (mem, NULL_RTX, &XEXP (x, 0), NULL,\n                            BASE_POINTER_REGS, GET_MODE (x), VOIDmode, 0, 0,\n                            opnum, type);\n               \n               if (avr_log.legitimize_reload_address)\n-                avr_edump (\" RCLASS = %R\\n IN = %r\\n OUT = %r\\n\",\n+                avr_edump (\" RCLASS.2 = %R\\n IN = %r\\n OUT = %r\\n\",\n                            BASE_POINTER_REGS, mem, NULL_RTX);\n               \n               return x;\n@@ -1415,12 +1417,12 @@ avr_legitimize_reload_address (rtx x, enum machine_mode mode,\n       else if (! (frame_pointer_needed\n                   && XEXP (x, 0) == frame_pointer_rtx))\n         {\n-          push_reload (x, NULL_RTX, &x, NULL,\n+          push_reload (x, NULL_RTX, px, NULL,\n                        POINTER_REGS, GET_MODE (x), VOIDmode, 0, 0,\n                        opnum, type);\n           \n           if (avr_log.legitimize_reload_address)\n-            avr_edump (\" RCLASS = %R\\n IN = %r\\n OUT = %r\\n\",\n+            avr_edump (\" RCLASS.3 = %R\\n IN = %r\\n OUT = %r\\n\",\n                        POINTER_REGS, x, NULL_RTX);\n           \n           return x;"}, {"sha": "b9ce56fa59fc10afd3299ed551ca6e1cf19ac244", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1a330ef7f8c77e4cd064f0008d4b735ff9d621b/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1a330ef7f8c77e4cd064f0008d4b735ff9d621b/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=c1a330ef7f8c77e4cd064f0008d4b735ff9d621b", "patch": "@@ -375,7 +375,7 @@ typedef struct avr_args {\n \n #define LEGITIMIZE_RELOAD_ADDRESS(X,MODE,OPNUM,TYPE,IND_L,WIN)          \\\n   do {                                                                  \\\n-    rtx new_x = avr_legitimize_reload_address (X, MODE, OPNUM, TYPE,    \\\n+    rtx new_x = avr_legitimize_reload_address (&(X), MODE, OPNUM, TYPE, \\\n                                                ADDR_TYPE (TYPE),        \\\n                                                IND_L, make_memloc);     \\\n     if (new_x)                                                          \\"}]}