{"sha": "d8930b138788258aaad77b8fe821ce44d08a66d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg5MzBiMTM4Nzg4MjU4YWFhZDc3YjhmZTgyMWNlNDRkMDhhNjZkMQ==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-06-07T09:26:32Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-06-07T12:16:33Z"}, "message": "d: Merge upstream dmd cef1e7991.\n\nAdds a DString type, a struct that has a compatible layout with D\nstrings.  Many parameters in the Global struct have been switched over\nto this type, and users of these params have been adjust to use the\nlength or ptr field as appropriate.\n\ngcc/d/ChangeLog:\n\n\t* dmd/MERGE: Merge upstream dmd cef1e7991.\n\t* d-lang.cc (d_parse_file): Adjust for new field types.", "tree": {"sha": "1093e7665bae9d6d13ece511fec69cbc16d14646", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1093e7665bae9d6d13ece511fec69cbc16d14646"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8930b138788258aaad77b8fe821ce44d08a66d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8930b138788258aaad77b8fe821ce44d08a66d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8930b138788258aaad77b8fe821ce44d08a66d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8930b138788258aaad77b8fe821ce44d08a66d1/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "557a40f599f64e40cc1b20254bf82acc775375f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/557a40f599f64e40cc1b20254bf82acc775375f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/557a40f599f64e40cc1b20254bf82acc775375f5"}], "stats": {"total": 122, "additions": 70, "deletions": 52}, "files": [{"sha": "c4477cd90cb1cbfeceeef737f78262fe5dc3225c", "filename": "gcc/d/d-lang.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8930b138788258aaad77b8fe821ce44d08a66d1/gcc%2Fd%2Fd-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8930b138788258aaad77b8fe821ce44d08a66d1/gcc%2Fd%2Fd-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-lang.cc?ref=d8930b138788258aaad77b8fe821ce44d08a66d1", "patch": "@@ -1027,8 +1027,8 @@ d_parse_file (void)\n {\n   if (global.params.verbose)\n     {\n-      message (\"binary    %s\", global.params.argv0);\n-      message (\"version   %s\", global.version);\n+      message (\"binary    %s\", global.params.argv0.ptr);\n+      message (\"version   %s\", global.version.ptr);\n \n       if (global.params.versionids)\n \t{\n@@ -1300,11 +1300,12 @@ d_parse_file (void)\n       OutBuffer buf;\n       json_generate (&buf, &modules);\n \n-      const char *name = global.params.jsonfilename;\n+      const char *name = global.params.jsonfilename.ptr;\n \n       if (name && (name[0] != '-' || name[1] != '\\0'))\n \t{\n-\t  const char *nameext = FileName::defaultExt (name, global.json_ext);\n+\t  const char *nameext\n+\t    = FileName::defaultExt (name, global.json_ext.ptr);\n \t  File *fjson = File::create (nameext);\n \t  fjson->setbuffer ((void *) buf.data, buf.offset);\n \t  fjson->ref = 1;"}, {"sha": "fa94d63e4710357fbbae407d5cca3072a3a529e1", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8930b138788258aaad77b8fe821ce44d08a66d1/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8930b138788258aaad77b8fe821ce44d08a66d1/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=d8930b138788258aaad77b8fe821ce44d08a66d1", "patch": "@@ -1,4 +1,4 @@\n-740f3d1eab81d88d11451083d955d5075f60d4e0\n+cef1e7991121a22f50e9966ea407805015922bc7\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "f4ca06d296a9942f3c2462378da6d5b552687fa3", "filename": "gcc/d/dmd/attrib.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8930b138788258aaad77b8fe821ce44d08a66d1/gcc%2Fd%2Fdmd%2Fattrib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8930b138788258aaad77b8fe821ce44d08a66d1/gcc%2Fd%2Fdmd%2Fattrib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fattrib.c?ref=d8930b138788258aaad77b8fe821ce44d08a66d1", "patch": "@@ -994,7 +994,7 @@ void PragmaDeclaration::semantic(Scope *sc)\n             name[se->len] = 0;\n             if (global.params.verbose)\n                 message(\"library   %s\", name);\n-            if (global.params.moduleDeps && !global.params.moduleDepsFile)\n+            if (global.params.moduleDeps && !global.params.moduleDepsFile.length)\n             {\n                 OutBuffer *ob = global.params.moduleDeps;\n                 Module *imod = sc->instantiatingModule();"}, {"sha": "63f294a587c6f6c9da556e908eae5f810a44e16e", "filename": "gcc/d/dmd/cond.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8930b138788258aaad77b8fe821ce44d08a66d1/gcc%2Fd%2Fdmd%2Fcond.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8930b138788258aaad77b8fe821ce44d08a66d1/gcc%2Fd%2Fdmd%2Fcond.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcond.c?ref=d8930b138788258aaad77b8fe821ce44d08a66d1", "patch": "@@ -407,7 +407,7 @@ DebugCondition::DebugCondition(Module *mod, unsigned level, Identifier *ident)\n // Helper for printing dependency information\n void printDepsConditional(Scope *sc, DVCondition* condition, const char* depType)\n {\n-    if (!global.params.moduleDeps || global.params.moduleDepsFile)\n+    if (!global.params.moduleDeps || global.params.moduleDepsFile.length)\n         return;\n     OutBuffer *ob = global.params.moduleDeps;\n     Module* imod = sc ? sc->instantiatingModule() : condition->mod;"}, {"sha": "32602d27e6ca3022d5158597c360e06879d29f11", "filename": "gcc/d/dmd/dimport.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8930b138788258aaad77b8fe821ce44d08a66d1/gcc%2Fd%2Fdmd%2Fdimport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8930b138788258aaad77b8fe821ce44d08a66d1/gcc%2Fd%2Fdmd%2Fdimport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdimport.c?ref=d8930b138788258aaad77b8fe821ce44d08a66d1", "patch": "@@ -321,7 +321,7 @@ void Import::semantic(Scope *sc)\n \n         OutBuffer *ob = global.params.moduleDeps;\n         Module* imod = sc->instantiatingModule();\n-        if (!global.params.moduleDepsFile)\n+        if (!global.params.moduleDepsFile.length)\n             ob->writestring(\"depsImport \");\n         ob->writestring(imod->toPrettyChars());\n         ob->writestring(\" (\");"}, {"sha": "09e95472330ef3488d803e340f2bb5ff5ffceef5", "filename": "gcc/d/dmd/dmodule.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8930b138788258aaad77b8fe821ce44d08a66d1/gcc%2Fd%2Fdmd%2Fdmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8930b138788258aaad77b8fe821ce44d08a66d1/gcc%2Fd%2Fdmd%2Fdmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdmodule.c?ref=d8930b138788258aaad77b8fe821ce44d08a66d1", "patch": "@@ -91,7 +91,7 @@ Module::Module(const char *filename, Identifier *ident, int doDocComment, int do\n     nameoffset = 0;\n     namelen = 0;\n \n-    srcfilename = FileName::defaultExt(filename, global.mars_ext);\n+    srcfilename = FileName::defaultExt(filename, global.mars_ext.ptr);\n \n     if (global.run_noext && global.params.run &&\n         !FileName::ext(filename) &&\n@@ -101,8 +101,8 @@ Module::Module(const char *filename, Identifier *ident, int doDocComment, int do\n         FileName::free(srcfilename);\n         srcfilename = FileName::removeExt(filename);    // just does a mem.strdup(filename)\n     }\n-    else if (!FileName::equalsExt(srcfilename, global.mars_ext) &&\n-        !FileName::equalsExt(srcfilename, global.hdr_ext) &&\n+    else if (!FileName::equalsExt(srcfilename, global.mars_ext.ptr) &&\n+        !FileName::equalsExt(srcfilename, global.hdr_ext.ptr) &&\n         !FileName::equalsExt(srcfilename, \"dd\"))\n     {\n         error(\"source file name '%s' must have .%s extension\", srcfilename, global.mars_ext);\n@@ -112,13 +112,13 @@ Module::Module(const char *filename, Identifier *ident, int doDocComment, int do\n     if (!FileName::absolute(srcfilename))\n         srcfilePath = getcwd(NULL, 0);\n \n-    objfile = setOutfile(global.params.objname, global.params.objdir, filename, global.obj_ext);\n+    objfile = setOutfile(global.params.objname.ptr, global.params.objdir.ptr, filename, global.obj_ext.ptr);\n \n     if (doDocComment)\n         setDocfile();\n \n     if (doHdrGen)\n-        hdrfile = setOutfile(global.params.hdrname, global.params.hdrdir, arg, global.hdr_ext);\n+        hdrfile = setOutfile(global.params.hdrname.ptr, global.params.hdrdir.ptr, arg, global.hdr_ext.ptr);\n \n     //objfile = new File(objfilename);\n }\n@@ -130,7 +130,7 @@ Module *Module::create(const char *filename, Identifier *ident, int doDocComment\n \n void Module::setDocfile()\n {\n-    docfile = setOutfile(global.params.docname, global.params.docdir, arg, global.doc_ext);\n+    docfile = setOutfile(global.params.docname.ptr, global.params.docdir.ptr, arg, global.doc_ext.ptr);\n }\n \n /*********************************************\n@@ -302,7 +302,7 @@ bool Module::read(Loc loc)\n         {\n             ::error(loc, \"cannot find source code for runtime library file 'object.d'\");\n             errorSupplemental(loc, \"dmd might not be correctly installed. Run 'dmd -man' for installation instructions.\");\n-            const char *dmdConfFile = global.inifilename ? FileName::canonicalName(global.inifilename) : NULL;\n+            const char *dmdConfFile = global.inifilename.length ? FileName::canonicalName(global.inifilename.ptr) : NULL;\n             errorSupplemental(loc, \"config file: %s\", dmdConfFile ? dmdConfFile : \"not found\");\n         }\n         else\n@@ -1288,11 +1288,11 @@ const char *lookForSourceFile(const char **path, const char *filename)\n      */\n     *path = NULL;\n \n-    const char *sdi = FileName::forceExt(filename, global.hdr_ext);\n+    const char *sdi = FileName::forceExt(filename, global.hdr_ext.ptr);\n     if (FileName::exists(sdi) == 1)\n         return sdi;\n \n-    const char *sd  = FileName::forceExt(filename, global.mars_ext);\n+    const char *sd  = FileName::forceExt(filename, global.mars_ext.ptr);\n     if (FileName::exists(sd) == 1)\n         return sd;\n "}, {"sha": "4db9591a597aea193bc7929be7f3ba5acf32d466", "filename": "gcc/d/dmd/expressionsem.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8930b138788258aaad77b8fe821ce44d08a66d1/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8930b138788258aaad77b8fe821ce44d08a66d1/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpressionsem.c?ref=d8930b138788258aaad77b8fe821ce44d08a66d1", "patch": "@@ -2373,13 +2373,13 @@ class ExpressionSemanticVisitor : public Visitor\n             OutBuffer *ob = global.params.moduleDeps;\n             Module* imod = sc->instantiatingModule();\n \n-            if (!global.params.moduleDepsFile)\n+            if (!global.params.moduleDepsFile.length)\n                 ob->writestring(\"depsFile \");\n             ob->writestring(imod->toPrettyChars());\n             ob->writestring(\" (\");\n             escapePath(ob, imod->srcfile->toChars());\n             ob->writestring(\") : \");\n-            if (global.params.moduleDepsFile)\n+            if (global.params.moduleDepsFile.length)\n                 ob->writestring(\"string : \");\n             ob->writestring((char *) se->string);\n             ob->writestring(\" (\");"}, {"sha": "5b5aac3ab68d79a1024ce84c4948fd284c659821", "filename": "gcc/d/dmd/globals.h", "status": "modified", "additions": 32, "deletions": 31, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8930b138788258aaad77b8fe821ce44d08a66d1/gcc%2Fd%2Fdmd%2Fglobals.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8930b138788258aaad77b8fe821ce44d08a66d1/gcc%2Fd%2Fdmd%2Fglobals.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fglobals.h?ref=d8930b138788258aaad77b8fe821ce44d08a66d1", "patch": "@@ -144,38 +144,38 @@ struct Param\n \n     CHECKACTION checkAction;       // action to take when bounds, asserts or switch defaults are violated\n \n-    const char *argv0;    // program name\n+    DString  argv0;    // program name\n     Array<const char *> *modFileAliasStrings; // array of char*'s of -I module filename alias strings\n     Array<const char *> *imppath;     // array of char*'s of where to look for import modules\n     Array<const char *> *fileImppath; // array of char*'s of where to look for file import modules\n-    const char *objdir;   // .obj/.lib file output directory\n-    const char *objname;  // .obj file output name\n-    const char *libname;  // .lib file output name\n+    DString objdir;    // .obj/.lib file output directory\n+    DString objname;   // .obj file output name\n+    DString libname;   // .lib file output name\n \n     bool doDocComments;  // process embedded documentation comments\n-    const char *docdir;  // write documentation file to docdir directory\n-    const char *docname; // write documentation file to docname\n+    DString docdir;      // write documentation file to docdir directory\n+    DString docname;     // write documentation file to docname\n     Array<const char *> *ddocfiles;  // macro include files for Ddoc\n \n     bool doHdrGeneration;  // process embedded documentation comments\n-    const char *hdrdir;    // write 'header' file to docdir directory\n-    const char *hdrname;   // write 'header' file to docname\n+    DString hdrdir;        // write 'header' file to docdir directory\n+    DString hdrname;       // write 'header' file to docname\n     bool hdrStripPlainFunctions; // strip the bodies of plain (non-template) functions\n \n     bool doJsonGeneration;    // write JSON file\n-    const char *jsonfilename; // write JSON file to jsonfilename\n+    DString jsonfilename;     // write JSON file to jsonfilename\n \n     unsigned debuglevel;   // debug level\n     Array<const char *> *debugids;     // debug identifiers\n \n     unsigned versionlevel; // version level\n     Array<const char *> *versionids;   // version identifiers\n \n-    const char *defaultlibname; // default library for non-debug builds\n-    const char *debuglibname;   // default library for debug builds\n-    const char *mscrtlib;       // MS C runtime library\n+    DString defaultlibname;     // default library for non-debug builds\n+    DString debuglibname;       // default library for debug builds\n+    DString mscrtlib;           // MS C runtime library\n \n-    const char *moduleDepsFile; // filename for deps output\n+    DString moduleDepsFile;     // filename for deps output\n     OutBuffer *moduleDeps;      // contents to be written to deps file\n \n     // Hidden debug switches\n@@ -194,10 +194,10 @@ struct Param\n     Array<const char *> *linkswitches;\n     Array<const char *> *libfiles;\n     Array<const char *> *dllfiles;\n-    const char *deffile;\n-    const char *resfile;\n-    const char *exefile;\n-    const char *mapfile;\n+    DString deffile;\n+    DString resfile;\n+    DString exefile;\n+    DString mapfile;\n };\n \n typedef unsigned structalign_t;\n@@ -207,26 +207,27 @@ typedef unsigned structalign_t;\n \n struct Global\n {\n-    const char *inifilename;\n-    const char *mars_ext;\n-    const char *obj_ext;\n-    const char *lib_ext;\n-    const char *dll_ext;\n-    const char *doc_ext;        // for Ddoc generated files\n-    const char *ddoc_ext;       // for Ddoc macro include files\n-    const char *hdr_ext;        // for D 'header' import files\n-    const char *json_ext;       // for JSON files\n-    const char *map_ext;        // for .map files\n+    DString inifilename;\n+    DString mars_ext;\n+    DString obj_ext;\n+    DString lib_ext;\n+    DString dll_ext;\n+    DString doc_ext;            // for Ddoc generated files\n+    DString ddoc_ext;           // for Ddoc macro include files\n+    DString hdr_ext;            // for D 'header' import files\n+    DString cxxhdr_ext;         // for C/C++ 'header' files\n+    DString json_ext;           // for JSON files\n+    DString map_ext;            // for .map files\n     bool run_noext;             // allow -run sources without extensions.\n \n-    const char *copyright;\n-    const char *written;\n+    DString copyright;\n+    DString written;\n     const char *main_d;         // dummy filename for dummy main()\n     Array<const char *> *path;        // Array of char*'s which form the import lookup path\n     Array<const char *> *filePath;    // Array of char*'s which form the file import lookup path\n \n-    const char *version;     // Compiler version string\n-    const char *vendor;      // Compiler backend name\n+    DString version;         // Compiler version string\n+    DString vendor;          // Compiler backend name\n \n     Param params;\n     unsigned errors;       // number of errors reported so far"}, {"sha": "777842beff4d556222178b01a878c1b16aaae1be", "filename": "gcc/d/dmd/lexer.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8930b138788258aaad77b8fe821ce44d08a66d1/gcc%2Fd%2Fdmd%2Flexer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8930b138788258aaad77b8fe821ce44d08a66d1/gcc%2Fd%2Fdmd%2Flexer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Flexer.c?ref=d8930b138788258aaad77b8fe821ce44d08a66d1", "patch": "@@ -401,7 +401,7 @@ void Lexer::scan(Token *t)\n                     }\n                     else if (id == Id::VENDOR)\n                     {\n-                        t->ustring = (utf8_t *)const_cast<char *>(global.vendor);\n+                        t->ustring = (utf8_t *)const_cast<char *>(global.vendor.ptr);\n                         goto Lstr;\n                     }\n                     else if (id == Id::TIMESTAMP)\n@@ -417,7 +417,7 @@ void Lexer::scan(Token *t)\n                         unsigned minor = 0;\n                         bool point = false;\n \n-                        for (const char *p = global.version + 1; 1; p++)\n+                        for (const char *p = global.version.ptr + 1; 1; p++)\n                         {\n                             c = *p;\n                             if (isdigit((utf8_t)c))"}, {"sha": "72326d5ff6560586413bfdcb04062826ec8a8a79", "filename": "gcc/d/dmd/root/dcompat.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8930b138788258aaad77b8fe821ce44d08a66d1/gcc%2Fd%2Fdmd%2Froot%2Fdcompat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8930b138788258aaad77b8fe821ce44d08a66d1/gcc%2Fd%2Fdmd%2Froot%2Fdcompat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Fdcompat.h?ref=d8930b138788258aaad77b8fe821ce44d08a66d1", "patch": "@@ -17,6 +17,22 @@ struct DArray\n {\n     size_t length;\n     T *ptr;\n+\n+    DArray() : length(0), ptr(NULL) { }\n+\n+    DArray(size_t length_in, T *ptr_in)\n+        : length(length_in), ptr(ptr_in) { }\n+};\n+\n+struct DString : public DArray<const char>\n+{\n+    DString() : DArray<const char>() { }\n+\n+    DString(const char *ptr)\n+        : DArray<const char>(ptr ? strlen(ptr) : 0, ptr) { }\n+\n+    DString(size_t length, const char *ptr)\n+        : DArray<const char>(length, ptr) { }\n };\n \n /// Corresponding C++ type that maps to D size_t"}]}