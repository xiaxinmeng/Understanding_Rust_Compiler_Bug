{"sha": "d116300be8faa3424f7ce009072201a698b89f58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDExNjMwMGJlOGZhYTM0MjRmN2NlMDA5MDcyMjAxYTY5OGI4OWY1OA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-05-06T01:15:09Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-05-06T01:15:09Z"}, "message": "mn10300.c (notice_update_cc): Use CC_SET_ZN and CC_SET_ZNV.\n\n        * mn10300.c (notice_update_cc): Use CC_SET_ZN and CC_SET_ZNV.\n        * mn10300.h (CC_NO_CARRY): Define.\n        * mn10300.md: Use \"set_zn\" and \"set_znv\" to more accurately\n        describe cc0 status.\n\nFrom-SVN: r14019", "tree": {"sha": "c864edd8aa3b540044d0893fe956f448c1a4a23f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c864edd8aa3b540044d0893fe956f448c1a4a23f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d116300be8faa3424f7ce009072201a698b89f58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d116300be8faa3424f7ce009072201a698b89f58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d116300be8faa3424f7ce009072201a698b89f58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d116300be8faa3424f7ce009072201a698b89f58/comments", "author": null, "committer": null, "parents": [{"sha": "31b663c33a1bcf5dd9c8a96d3e9a821f9516ac16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31b663c33a1bcf5dd9c8a96d3e9a821f9516ac16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31b663c33a1bcf5dd9c8a96d3e9a821f9516ac16"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "d6fd82064938bb855399ca481143f181974a1e32", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d116300be8faa3424f7ce009072201a698b89f58/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d116300be8faa3424f7ce009072201a698b89f58/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=d116300be8faa3424f7ce009072201a698b89f58", "patch": "@@ -596,18 +596,19 @@ notice_update_cc (body, insn)\n \tcc_status.value1 = 0;\n       break;\n \n-    case CC_SET_ZN_C0:\n+    case CC_SET_ZN:\n       /* Insn sets the Z,N flags of CC to recog_operand[0].\n-\t V is always set to 0.  C may or may not be set to 0 but that's ok\n-\t because alter_cond will change tests to use EQ/NE.  */\n+\t V,C are unusable.  */\n       CC_STATUS_INIT;\n-      cc_status.flags |= CC_NO_OVERFLOW | CC_OVERFLOW_UNUSABLE;\n+      cc_status.flags |= CC_NO_CARRY | CC_OVERFLOW_UNUSABLE;\n       cc_status.value1 = recog_operand[0];\n       break;\n \n-    case CC_TST:\n-      /* The insn sets all the condition codes, except v is bogus.  */\n+    case CC_SET_ZNV:\n+      /* Insn sets the Z,N,V flags of CC to recog_operand[0].\n+\t C is unusable.  */\n       CC_STATUS_INIT;\n+      cc_status.flags |= CC_NO_CARRY;\n       cc_status.value1 = recog_operand[0];\n       break;\n "}, {"sha": "88065a2ece3e86a795572476ff2ceb095418bf7a", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d116300be8faa3424f7ce009072201a698b89f58/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d116300be8faa3424f7ce009072201a698b89f58/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=d116300be8faa3424f7ce009072201a698b89f58", "patch": "@@ -709,6 +709,7 @@ extern struct rtx_def *mn10300_builtin_saveregs ();\n    Do not alter them if the instruction would not alter the cc's.  */\n \n #define CC_OVERFLOW_UNUSABLE 0x200\n+#define CC_NO_CARRY CC_NO_OVERFLOW\n #define NOTICE_UPDATE_CC(EXP, INSN) notice_update_cc(EXP, INSN)\n \n /* Compute the cost of computing a constant rtl expression RTX"}, {"sha": "bcea2583dbb3cd6944c03c54787e8c54560c1743", "filename": "gcc/config/mn10300/mn10300.md", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d116300be8faa3424f7ce009072201a698b89f58/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d116300be8faa3424f7ce009072201a698b89f58/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.md?ref=d116300be8faa3424f7ce009072201a698b89f58", "patch": "@@ -30,14 +30,12 @@\n ;; none_0hit - insn does not affect cc but it does modify operand 0\n ;;\tThis attribute is used to keep track of when operand 0 changes.\n ;; \tSee the description of NOTICE_UPDATE_CC for more info.\n-;; set - insn sets flags z,n.  v is unusable c is set to 0.\n-;;\t(c may not really be set to 0 but that's ok, we don't need it anyway).\n-;; set_zn_c0 - insn sets z,n to usable values.  v is unknown.  c may or may not\n-;;\tbe known (if it isn't that's ok, we don't need it anyway).\n+;; set_znv - insn sets z,n,v to useable values; c is unusable.\n+;; set_zn  - insn sets z,n to useable values; v,c are unuseable.\n ;; compare - compare instruction\n ;; invert -- like compare, but flags are inverted.\n ;; clobber - value of cc is unknown\n-(define_attr \"cc\" \"none,none_0hit,tst,set_zn_c0,compare,clobber,invert\"\n+(define_attr \"cc\" \"none,none_0hit,set_znv,set_zn,compare,clobber,invert\"\n   (const_string \"clobber\"))\n \f\n ;; ----------------------------------------------------------------------\n@@ -620,19 +618,19 @@\n   [(set (cc0) (match_operand:SI 0 \"register_operand\" \"da\"))]\n   \"\"\n   \"* return output_tst (operands[0], insn);\"\n-  [(set_attr \"cc\" \"tst\")])\n+  [(set_attr \"cc\" \"set_znv\")])\n \n (define_insn \"\"\n   [(set (cc0) (zero_extend:SI (match_operand:QI 0 \"memory_operand\" \"d\")))]\n   \"\"\n   \"* return output_tst (operands[0], insn);\"\n-  [(set_attr \"cc\" \"tst\")])\n+  [(set_attr \"cc\" \"set_znv\")])\n \n (define_insn \"\"\n   [(set (cc0) (zero_extend:SI (match_operand:HI 0 \"memory_operand\" \"d\")))]\n   \"\"\n   \"* return output_tst (operands[0], insn);\"\n-  [(set_attr \"cc\" \"tst\")])\n+  [(set_attr \"cc\" \"set_znv\")])\n \n \n (define_insn \"cmpsi\"\n@@ -681,7 +679,7 @@\n   add %2,%0\n   add %2,%0\n   mov %2,%0\\;add %1,%0\"\n-  [(set_attr \"cc\" \"set_zn_c0,none_0hit,none_0hit,set_zn_c0,none_0hit,set_zn_c0\")])\n+  [(set_attr \"cc\" \"set_zn,none_0hit,none_0hit,set_zn,none_0hit,set_zn\")])\n \n (define_expand \"adddi3\"\n   [(set (reg:DI 0) (match_operand:DI 1 \"register_operand\" \"\"))\n@@ -735,7 +733,7 @@\n \t\t  (match_operand:SI 2 \"nonmemory_operand\" \"dai\")))]\n   \"\"\n   \"sub %2,%0\"\n-  [(set_attr \"cc\" \"set_zn_c0\")])\n+  [(set_attr \"cc\" \"set_zn\")])\n \n (define_expand \"negsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n@@ -775,7 +773,7 @@\n \t\t (match_operand:SI 2 \"register_operand\" \"d\")))]\n   \"\"\n   \"mul %2,%0\"\n-  [(set_attr \"cc\" \"set_zn_c0\")])\n+  [(set_attr \"cc\" \"set_zn\")])\n \n (define_expand \"udivmodsi4\"\n   [(parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n@@ -805,7 +803,7 @@\n   else\n     return \\\"divu %2,%0\\;mov mdr,%3\\\";\n }\"\n-  [(set_attr \"cc\" \"set_zn_c0\")])\n+  [(set_attr \"cc\" \"set_zn\")])\n \n (define_expand \"divmodsi4\"\n   [(parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n@@ -830,7 +828,7 @@\n   else\n     return \\\"ext %0\\;div %2,%0\\;mov mdr,%3\\\";\n }\"\n-  [(set_attr \"cc\" \"set_zn_c0\")])\n+  [(set_attr \"cc\" \"set_zn\")])\n \n (define_insn \"clear_mdr\"\n   [(unspec_volatile [(const_int 2)] 0)\n@@ -872,7 +870,7 @@\n     return \\\"lsr 4,%0\\;asl2 %0\\;asl2 %0\\\";\n   return \\\"and %2,%0\\\";\n }\"\n-  [(set_attr \"cc\" \"none_0hit,set_zn_c0\")])\n+  [(set_attr \"cc\" \"none_0hit,set_znv\")])\n \n ;; ----------------------------------------------------------------------\n ;; OR INSTRUCTIONS\n@@ -884,7 +882,7 @@\n \t\t(match_operand:SI 2 \"nonmemory_operand\" \"di\")))]\n   \"\"\n   \"or %2,%0\"\n-  [(set_attr \"cc\" \"set_zn_c0\")])\n+  [(set_attr \"cc\" \"set_znv\")])\n \n ;; ----------------------------------------------------------------------\n ;; XOR INSTRUCTIONS\n@@ -896,7 +894,7 @@\n \t\t(match_operand:SI 2 \"nonmemory_operand\" \"di\")))]\n   \"\"\n   \"xor %2,%0\"\n-  [(set_attr \"cc\" \"set_zn_c0\")])\n+  [(set_attr \"cc\" \"set_znv\")])\n \n ;; ----------------------------------------------------------------------\n ;; NOT INSTRUCTIONS\n@@ -907,7 +905,7 @@\n \t(not:SI (match_operand:SI 1 \"register_operand\" \"0\")))]\n   \"\"\n   \"not %0\"\n-  [(set_attr \"cc\" \"set_zn_c0\")])\n+  [(set_attr \"cc\" \"set_znv\")])\n \f\n ;; -----------------------------------------------------------------\n ;; BIT FIELDS\n@@ -944,7 +942,7 @@\n   \"@\n   bclr %N1,%A0\n   and %1,%0\"\n-  [(set_attr \"cc\" \"clobber,set_zn_c0\")])\n+  [(set_attr \"cc\" \"clobber,set_znv\")])\n \n (define_insn \"\"\n   [(set (match_operand:QI 0 \"general_operand\" \"=R,d\")\n@@ -955,7 +953,7 @@\n   \"@\n   bset %1,%A0\n   or %1,%0\"\n-  [(set_attr \"cc\" \"clobber\")])\n+  [(set_attr \"cc\" \"clobber,set_znv\")])\n \n (define_insn \"\"\n   [(set (cc0)\n@@ -982,7 +980,7 @@\n   output_asm_insn (\\\"btst %1,%0\\\", xoperands);\n   return \\\"\\\";\n }\"\n-  [(set_attr \"cc\" \"set_zn_c0\")])\n+  [(set_attr \"cc\" \"set_znv\")])\n \n (define_insn \"\"\n   [(set (cc0)\n@@ -1012,14 +1010,14 @@\n     output_asm_insn (\\\"btst %1,%A0\\\", xoperands);\n   return \\\"\\\";\n }\"\n-  [(set_attr \"cc\" \"set_zn_c0\")])\n+  [(set_attr \"cc\" \"set_znv\")])\n \n (define_insn \"\"\n   [(set (cc0) (and:SI (match_operand:SI 0 \"register_operand\" \"d\")\n \t\t      (match_operand:SI 1 \"const_int_operand\" \"\")))]\n   \"\"\n   \"btst %1,%0\"\n-  [(set_attr \"cc\" \"set_zn_c0\")])\n+  [(set_attr \"cc\" \"set_znv\")])\n \n (define_insn \"\"\n   [(set (cc0)\n@@ -1030,7 +1028,7 @@\n   \"@\n   btst %1,%A0\n   btst %1,%0\"\n-  [(set_attr \"cc\" \"set_zn_c0\")])\n+  [(set_attr \"cc\" \"set_znv\")])\n \n \f\n ;; ----------------------------------------------------------------------\n@@ -1326,7 +1324,7 @@\n   asl2 %0\\;add %0,%0\n   asl2 %0\\;asl2 %0\n   asl %2,%0\"\n-  [(set_attr \"cc\" \"set_zn_c0\")])\n+  [(set_attr \"cc\" \"set_zn\")])\n \n (define_insn \"lshrsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n@@ -1335,7 +1333,7 @@\n \t (match_operand:QI 2 \"nonmemory_operand\" \"di\")))]\n   \"\"\n   \"lsr %2,%0\"\n-  [(set_attr \"cc\" \"set_zn_c0\")])\n+  [(set_attr \"cc\" \"set_zn\")])\n \n (define_insn \"ashrsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n@@ -1344,7 +1342,7 @@\n \t (match_operand:QI 2 \"nonmemory_operand\" \"di\")))]\n   \"\"\n   \"asr %2,%0\"\n-  [(set_attr \"cc\" \"set_zn_c0\")])\n+  [(set_attr \"cc\" \"set_zn\")])\n \n ;; ----------------------------------------------------------------------\n ;; PROLOGUE/EPILOGUE"}]}