{"sha": "89d0345ad7b8d84045813972ee60557a6b511c57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODlkMDM0NWFkN2I4ZDg0MDQ1ODEzOTcyZWU2MDU1N2E2YjUxMWM1Nw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-10-25T08:22:13Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-10-25T08:22:13Z"}, "message": "Fix reductions for fully-masked loops\n\nNow that vectorizable_operation vectorises most loop stmts involved\nin a reduction, it needs to be aware of reductions in fully-masked loops.\nThe LOOP_VINFO_CAN_FULLY_MASK_P parts of vectorizable_reduction now only\napply to cases that use vect_transform_reduction.\n\nThis new way of doing things is definitely an improvement for SVE though,\nsince it means we can lift the old restriction of not using fully-masked\nloops for reduction chains.\n\n2019-10-25  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vect-loop.c (vectorizable_reduction): Restrict the\n\tLOOP_VINFO_CAN_FULLY_MASK_P handling to cases that will be\n\thandled by vect_transform_reduction.  Allow fully-masked loops\n\tto be used with reduction chains.\n\t* tree-vect-stmts.c (vectorizable_operation): Handle reduction\n\toperations in fully-masked loops.\n\t(vectorizable_condition): Reject EXTRACT_LAST_REDUCTION\n\toperations in fully-masked loops.\n\ngcc/testsuite/\n\t* gcc.dg/vect/pr65947-1.c: No longer expect doubled dump lines\n\tfor FOLD_EXTRACT_LAST reductions.\n\t* gcc.dg/vect/pr65947-2.c: Likewise.\n\t* gcc.dg/vect/pr65947-3.c: Likewise.\n\t* gcc.dg/vect/pr65947-4.c: Likewise.\n\t* gcc.dg/vect/pr65947-5.c: Likewise.\n\t* gcc.dg/vect/pr65947-6.c: Likewise.\n\t* gcc.dg/vect/pr65947-9.c: Likewise.\n\t* gcc.dg/vect/pr65947-10.c: Likewise.\n\t* gcc.dg/vect/pr65947-12.c: Likewise.\n\t* gcc.dg/vect/pr65947-13.c: Likewise.\n\t* gcc.dg/vect/pr65947-14.c: Likewise.\n\t* gcc.dg/vect/pr80631-1.c: Likewise.\n\t* gcc.dg/vect/pr80631-2.c: Likewise.\n\t* gcc.dg/vect/vect-cond-reduc-3.c: Likewise.\n\t* gcc.dg/vect/vect-cond-reduc-4.c: Likewise.\n\nFrom-SVN: r277438", "tree": {"sha": "679d68b4d491389b86c0d17c7a69516757266ecd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/679d68b4d491389b86c0d17c7a69516757266ecd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89d0345ad7b8d84045813972ee60557a6b511c57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89d0345ad7b8d84045813972ee60557a6b511c57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89d0345ad7b8d84045813972ee60557a6b511c57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89d0345ad7b8d84045813972ee60557a6b511c57/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ea133b14f48ed5730748a7e02e322fb07ccc2d85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea133b14f48ed5730748a7e02e322fb07ccc2d85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea133b14f48ed5730748a7e02e322fb07ccc2d85"}], "stats": {"total": 204, "additions": 144, "deletions": 60}, "files": [{"sha": "89448b1166aacf68434910fa2cd3b3fe9cc37f83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89d0345ad7b8d84045813972ee60557a6b511c57", "patch": "@@ -1,3 +1,14 @@\n+2019-10-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-loop.c (vectorizable_reduction): Restrict the\n+\tLOOP_VINFO_CAN_FULLY_MASK_P handling to cases that will be\n+\thandled by vect_transform_reduction.  Allow fully-masked loops\n+\tto be used with reduction chains.\n+\t* tree-vect-stmts.c (vectorizable_operation): Handle reduction\n+\toperations in fully-masked loops.\n+\t(vectorizable_condition): Reject EXTRACT_LAST_REDUCTION\n+\toperations in fully-masked loops.\n+\n 2019-10-25  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-loop.c (vectorizable_reduction): Verify"}, {"sha": "4a98f6cab8a8e442e95cebdf0e263f9f978edf39", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=89d0345ad7b8d84045813972ee60557a6b511c57", "patch": "@@ -1,3 +1,22 @@\n+2019-10-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/pr65947-1.c: No longer expect doubled dump lines\n+\tfor FOLD_EXTRACT_LAST reductions.\n+\t* gcc.dg/vect/pr65947-2.c: Likewise.\n+\t* gcc.dg/vect/pr65947-3.c: Likewise.\n+\t* gcc.dg/vect/pr65947-4.c: Likewise.\n+\t* gcc.dg/vect/pr65947-5.c: Likewise.\n+\t* gcc.dg/vect/pr65947-6.c: Likewise.\n+\t* gcc.dg/vect/pr65947-9.c: Likewise.\n+\t* gcc.dg/vect/pr65947-10.c: Likewise.\n+\t* gcc.dg/vect/pr65947-12.c: Likewise.\n+\t* gcc.dg/vect/pr65947-13.c: Likewise.\n+\t* gcc.dg/vect/pr65947-14.c: Likewise.\n+\t* gcc.dg/vect/pr80631-1.c: Likewise.\n+\t* gcc.dg/vect/pr80631-2.c: Likewise.\n+\t* gcc.dg/vect/vect-cond-reduc-3.c: Likewise.\n+\t* gcc.dg/vect/vect-cond-reduc-4.c: Likewise.\n+\n 2019-10-24  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-c++-common/gomp/declare-variant-8.c: New test."}, {"sha": "8ebc385053cd737e800e6dff1c3843a514f274cd", "filename": "gcc/testsuite/gcc.dg/vect/pr65947-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-1.c?ref=89d0345ad7b8d84045813972ee60557a6b511c57", "patch": "@@ -41,5 +41,5 @@ main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 4 \"vect\" { target vect_fold_extract_last } } } */\n+/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 2 \"vect\" { target vect_fold_extract_last } } } */\n /* { dg-final { scan-tree-dump-times \"condition expression based on integer induction.\" 2 \"vect\" { target { ! vect_fold_extract_last } } } } */"}, {"sha": "e4a1d9419c21e204f0492318aa089db8f8b915c3", "filename": "gcc/testsuite/gcc.dg/vect/pr65947-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-10.c?ref=89d0345ad7b8d84045813972ee60557a6b511c57", "patch": "@@ -42,6 +42,6 @@ main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 4 \"vect\" { target vect_fold_extract_last } } } */\n+/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 2 \"vect\" { target vect_fold_extract_last } } } */\n /* { dg-final { scan-tree-dump-not \"condition expression based on integer induction.\" \"vect\" } } */\n "}, {"sha": "a47f4146a29a6d584a6a531dc22746f9d299cecb", "filename": "gcc/testsuite/gcc.dg/vect/pr65947-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-12.c?ref=89d0345ad7b8d84045813972ee60557a6b511c57", "patch": "@@ -42,5 +42,5 @@ main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 4 \"vect\" { target vect_fold_extract_last } } } */\n+/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 2 \"vect\" { target vect_fold_extract_last } } } */\n /* { dg-final { scan-tree-dump-not \"condition expression based on integer induction.\" \"vect\" } } */"}, {"sha": "b0755c0be651187c09bae258f9e072bb54f211ab", "filename": "gcc/testsuite/gcc.dg/vect/pr65947-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-13.c?ref=89d0345ad7b8d84045813972ee60557a6b511c57", "patch": "@@ -42,4 +42,4 @@ main (void)\n \n /* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"condition expression based on integer induction.\" 2 \"vect\" { xfail vect_fold_extract_last } } } */\n-/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 4 \"vect\" { target vect_fold_extract_last } } } */\n+/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 2 \"vect\" { target vect_fold_extract_last } } } */"}, {"sha": "c0df587e7fa62265fe6a8d660d1f131fefb3c6fc", "filename": "gcc/testsuite/gcc.dg/vect/pr65947-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-14.c?ref=89d0345ad7b8d84045813972ee60557a6b511c57", "patch": "@@ -41,5 +41,5 @@ main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 4 \"vect\" { target vect_fold_extract_last } } } */\n+/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 2 \"vect\" { target vect_fold_extract_last } } } */\n /* { dg-final { scan-tree-dump-times \"condition expression based on integer induction.\" 2 \"vect\" { target { ! vect_fold_extract_last } } } } */"}, {"sha": "58ba5f764d08d823710496c49b0c13286ee2e872", "filename": "gcc/testsuite/gcc.dg/vect/pr65947-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-2.c?ref=89d0345ad7b8d84045813972ee60557a6b511c57", "patch": "@@ -42,5 +42,5 @@ main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 4 \"vect\" { target vect_fold_extract_last } } } */\n+/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 2 \"vect\" { target vect_fold_extract_last } } } */\n /* { dg-final { scan-tree-dump-not \"condition expression based on integer induction.\" \"vect\" } } */"}, {"sha": "6b4077e1a62b255f7658acb71573efcbd068cf17", "filename": "gcc/testsuite/gcc.dg/vect/pr65947-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-3.c?ref=89d0345ad7b8d84045813972ee60557a6b511c57", "patch": "@@ -52,5 +52,5 @@ main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 4 \"vect\" { target vect_fold_extract_last } } } */\n+/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 2 \"vect\" { target vect_fold_extract_last } } } */\n /* { dg-final { scan-tree-dump-not \"condition expression based on integer induction.\" \"vect\" } } */"}, {"sha": "99f9765038a3750df042c825462f65efea4b743c", "filename": "gcc/testsuite/gcc.dg/vect/pr65947-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-4.c?ref=89d0345ad7b8d84045813972ee60557a6b511c57", "patch": "@@ -41,6 +41,6 @@ main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 4 \"vect\" { target vect_fold_extract_last } } } */\n+/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 2 \"vect\" { target vect_fold_extract_last } } } */\n /* { dg-final { scan-tree-dump-times \"condition expression based on integer induction.\" 2 \"vect\" { target { ! vect_fold_extract_last } } } } */\n "}, {"sha": "4e3f765cd0cf5680ee17495a610db73449464e3c", "filename": "gcc/testsuite/gcc.dg/vect/pr65947-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-5.c?ref=89d0345ad7b8d84045813972ee60557a6b511c57", "patch": "@@ -53,5 +53,5 @@ main (void)\n /* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 1 \"vect\" { target { ! vect_fold_extract_last } } } } */\n /* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" { target vect_fold_extract_last } } } */\n /* { dg-final { scan-tree-dump \"loop size is greater than data size\" \"vect\" { xfail vect_fold_extract_last } } } */\n-/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 4 \"vect\" { target vect_fold_extract_last } } } */\n+/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 2 \"vect\" { target vect_fold_extract_last } } } */\n /* { dg-final { scan-tree-dump-not \"condition expression based on integer induction.\" \"vect\" } } */"}, {"sha": "dde96d7a553cce2a588c967dcb87d4ce49777a4b", "filename": "gcc/testsuite/gcc.dg/vect/pr65947-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-6.c?ref=89d0345ad7b8d84045813972ee60557a6b511c57", "patch": "@@ -41,5 +41,5 @@ main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 4 \"vect\" { target vect_fold_extract_last } } } */\n+/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 2 \"vect\" { target vect_fold_extract_last } } } */\n /* { dg-final { scan-tree-dump-not \"condition expression based on integer induction.\" \"vect\" } } */"}, {"sha": "1f2953060166f6029661941bb6bcfa33b1e9f46b", "filename": "gcc/testsuite/gcc.dg/vect/pr65947-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-9.c?ref=89d0345ad7b8d84045813972ee60557a6b511c57", "patch": "@@ -48,5 +48,5 @@ main ()\n /* { dg-final { scan-tree-dump-not \"LOOP VECTORIZED\" \"vect\" { target { ! vect_fold_extract_last } } } } */\n /* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 1 \"vect\" { target vect_fold_extract_last } } } */\n /* { dg-final { scan-tree-dump \"loop size is greater than data size\" \"vect\" { target { ! vect_fold_extract_last } } } } */\n-/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 2 \"vect\" { target vect_fold_extract_last } } } */\n+/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 1 \"vect\" { target vect_fold_extract_last } } } */\n /* { dg-final { scan-tree-dump-not \"condition expression based on integer induction.\" \"vect\" } } */"}, {"sha": "f430debb09d8d71764bf9da45cff10abe005236e", "filename": "gcc/testsuite/gcc.dg/vect/pr80631-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr80631-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr80631-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr80631-1.c?ref=89d0345ad7b8d84045813972ee60557a6b511c57", "patch": "@@ -72,5 +72,5 @@ main ()\n }\n \n /* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 5 \"vect\" { target vect_condition } } } */\n-/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 10 \"vect\" { target vect_fold_extract_last } } } */\n+/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 5 \"vect\" { target vect_fold_extract_last } } } */\n /* { dg-final { scan-tree-dump-times \"condition expression based on integer induction.\" 5 \"vect\" { target { { ! vect_fold_extract_last } && vect_condition } } } } */"}, {"sha": "ca786f6f6471c2970da5fe63da6288f3fb65e08f", "filename": "gcc/testsuite/gcc.dg/vect/pr80631-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr80631-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr80631-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr80631-2.c?ref=89d0345ad7b8d84045813972ee60557a6b511c57", "patch": "@@ -73,4 +73,4 @@ main ()\n \n /* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 5 \"vect\" { target vect_condition } } } */\n /* { dg-final { scan-tree-dump-times \"condition expression based on integer induction.\" 5 \"vect\" { target vect_condition xfail vect_fold_extract_last } } } */\n-/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 10 \"vect\" { target vect_fold_extract_last } } } */\n+/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 5 \"vect\" { target vect_fold_extract_last } } } */"}, {"sha": "de9921cfcec1d729b413a3b9c4de99f217c089d9", "filename": "gcc/testsuite/gcc.dg/vect/vect-cond-reduc-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-reduc-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-reduc-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-reduc-3.c?ref=89d0345ad7b8d84045813972ee60557a6b511c57", "patch": "@@ -40,6 +40,6 @@ main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 4 \"vect\" { target vect_fold_extract_last } } } */\n+/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 2 \"vect\" { target vect_fold_extract_last } } } */\n /* { dg-final { scan-tree-dump-times \"condition expression based on integer induction.\" 2 \"vect\" { target { ! vect_fold_extract_last } } } } */\n "}, {"sha": "543504f6b0aabeecee8faf466bab58705fb88bb8", "filename": "gcc/testsuite/gcc.dg/vect/vect-cond-reduc-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-reduc-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-reduc-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-reduc-4.c?ref=89d0345ad7b8d84045813972ee60557a6b511c57", "patch": "@@ -40,6 +40,6 @@ main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 4 \"vect\" { target vect_fold_extract_last } } } */\n+/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 2 \"vect\" { target vect_fold_extract_last } } } */\n /* { dg-final { scan-tree-dump-times \"condition expression based on integer induction.\" 2 \"vect\" { target { ! vect_fold_extract_last } } } } */\n "}, {"sha": "3b58ceec79e0bd1f03711837cf0994b205d35296", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 21, "deletions": 30, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=89d0345ad7b8d84045813972ee60557a6b511c57", "patch": "@@ -6319,38 +6319,8 @@ vectorizable_reduction (stmt_vec_info stmt_info, slp_tree slp_node,\n   else\n     vec_num = 1;\n \n-  internal_fn cond_fn = get_conditional_internal_fn (code);\n-  vec_loop_masks *masks = &LOOP_VINFO_MASKS (loop_vinfo);\n-  bool mask_by_cond_expr = use_mask_by_cond_expr_p (code, cond_fn, vectype_in);\n-\n   vect_model_reduction_cost (stmt_info, reduc_fn, reduction_type, ncopies,\n \t\t\t     cost_vec);\n-  if (loop_vinfo && LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo))\n-    {\n-      if (reduction_type != FOLD_LEFT_REDUCTION\n-\t  && !mask_by_cond_expr\n-\t  && (cond_fn == IFN_LAST\n-\t      || !direct_internal_fn_supported_p (cond_fn, vectype_in,\n-\t\t\t\t\t\t  OPTIMIZE_FOR_SPEED)))\n-\t{\n-\t  if (dump_enabled_p ())\n-\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t     \"can't use a fully-masked loop because no\"\n-\t\t\t     \" conditional operation is available.\\n\");\n-\t  LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo) = false;\n-\t}\n-      else if (reduc_index == -1)\n-\t{\n-\t  if (dump_enabled_p ())\n-\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t     \"can't use a fully-masked loop for chained\"\n-\t\t\t     \" reductions.\\n\");\n-\t  LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo) = false;\n-\t}\n-      else\n-\tvect_record_loop_mask (loop_vinfo, masks, ncopies * vec_num,\n-\t\t\t       vectype_in, NULL);\n-    }\n   if (dump_enabled_p ()\n       && reduction_type == FOLD_LEFT_REDUCTION)\n     dump_printf_loc (MSG_NOTE, vect_location,\n@@ -6367,6 +6337,27 @@ vectorizable_reduction (stmt_vec_info stmt_info, slp_tree slp_node,\n       STMT_VINFO_DEF_TYPE (stmt_info) = vect_internal_def;\n       STMT_VINFO_DEF_TYPE (vect_orig_stmt (stmt_info)) = vect_internal_def;\n     }\n+  else if (loop_vinfo && LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo))\n+    {\n+      vec_loop_masks *masks = &LOOP_VINFO_MASKS (loop_vinfo);\n+      internal_fn cond_fn = get_conditional_internal_fn (code);\n+\n+      if (reduction_type != FOLD_LEFT_REDUCTION\n+\t  && !use_mask_by_cond_expr_p (code, cond_fn, vectype_in)\n+\t  && (cond_fn == IFN_LAST\n+\t      || !direct_internal_fn_supported_p (cond_fn, vectype_in,\n+\t\t\t\t\t\t  OPTIMIZE_FOR_SPEED)))\n+\t{\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t     \"can't use a fully-masked loop because no\"\n+\t\t\t     \" conditional operation is available.\\n\");\n+\t  LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo) = false;\n+\t}\n+      else\n+\tvect_record_loop_mask (loop_vinfo, masks, ncopies * vec_num,\n+\t\t\t       vectype_in, NULL);\n+    }\n   return true;\n }\n "}, {"sha": "19ac82fe4e3c34c3776bd7ef3df40a06660abdb5", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 78, "deletions": 15, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d0345ad7b8d84045813972ee60557a6b511c57/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=89d0345ad7b8d84045813972ee60557a6b511c57", "patch": "@@ -5929,7 +5929,7 @@ vectorizable_operation (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n   poly_uint64 nunits_in;\n   poly_uint64 nunits_out;\n   tree vectype_out;\n-  int ncopies;\n+  int ncopies, vec_num;\n   int j, i;\n   vec<tree> vec_oprnds0 = vNULL;\n   vec<tree> vec_oprnds1 = vNULL;\n@@ -6066,9 +6066,15 @@ vectorizable_operation (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n      vectorized stmts for each SLP node.  Hence, NCOPIES is always 1 in\n      case of SLP.  */\n   if (slp_node)\n-    ncopies = 1;\n+    {\n+      ncopies = 1;\n+      vec_num = SLP_TREE_NUMBER_OF_VEC_STMTS (slp_node);\n+    }\n   else\n-    ncopies = vect_get_num_copies (loop_vinfo, vectype);\n+    {\n+      ncopies = vect_get_num_copies (loop_vinfo, vectype);\n+      vec_num = 1;\n+    }\n \n   gcc_assert (ncopies >= 1);\n \n@@ -6121,8 +6127,34 @@ vectorizable_operation (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n       return false;\n     }\n \n+  int reduc_idx = STMT_VINFO_REDUC_IDX (stmt_info);\n+  vec_loop_masks *masks = (loop_vinfo ? &LOOP_VINFO_MASKS (loop_vinfo) : NULL);\n+  internal_fn cond_fn = get_conditional_internal_fn (code);\n+\n   if (!vec_stmt) /* transformation not required.  */\n     {\n+      /* If this operation is part of a reduction, a fully-masked loop\n+\t should only change the active lanes of the reduction chain,\n+\t keeping the inactive lanes as-is.  */\n+      if (loop_vinfo\n+\t  && LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo)\n+\t  && reduc_idx >= 0)\n+\t{\n+\t  if (cond_fn == IFN_LAST\n+\t      || !direct_internal_fn_supported_p (cond_fn, vectype,\n+\t\t\t\t\t\t  OPTIMIZE_FOR_SPEED))\n+\t    {\n+\t      if (dump_enabled_p ())\n+\t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t\t \"can't use a fully-masked loop because no\"\n+\t\t\t\t \" conditional operation is available.\\n\");\n+\t      LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo) = false;\n+\t    }\n+\t  else\n+\t    vect_record_loop_mask (loop_vinfo, masks, ncopies * vec_num,\n+\t\t\t\t   vectype, NULL);\n+\t}\n+\n       STMT_VINFO_TYPE (stmt_info) = op_vec_info_type;\n       DUMP_VECT_SCOPE (\"vectorizable_operation\");\n       vect_model_simple_cost (stmt_info, ncopies, dt, ndts, slp_node, cost_vec);\n@@ -6135,6 +6167,8 @@ vectorizable_operation (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n     dump_printf_loc (MSG_NOTE, vect_location,\n                      \"transform binary/unary operation.\\n\");\n \n+  bool masked_loop_p = loop_vinfo && LOOP_VINFO_FULLY_MASKED_P (loop_vinfo);\n+\n   /* POINTER_DIFF_EXPR has pointer arguments which are vectorized as\n      vectors with unsigned elements, but the result is signed.  So, we\n      need to compute the MINUS_EXPR into vectype temporary and\n@@ -6252,22 +6286,41 @@ vectorizable_operation (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t\t  ? vec_oprnds1[i] : NULL_TREE);\n \t  vop2 = ((op_type == ternary_op)\n \t\t  ? vec_oprnds2[i] : NULL_TREE);\n-\t  gassign *new_stmt = gimple_build_assign (vec_dest, code,\n-\t\t\t\t\t\t   vop0, vop1, vop2);\n-\t  new_temp = make_ssa_name (vec_dest, new_stmt);\n-\t  gimple_assign_set_lhs (new_stmt, new_temp);\n-\t  new_stmt_info\n-\t    = vect_finish_stmt_generation (stmt_info, new_stmt, gsi);\n-\t  if (vec_cvt_dest)\n+\t  if (masked_loop_p && reduc_idx >= 0)\n \t    {\n-\t      new_temp = build1 (VIEW_CONVERT_EXPR, vectype_out, new_temp);\n-\t      gassign *new_stmt\n-\t\t= gimple_build_assign (vec_cvt_dest, VIEW_CONVERT_EXPR,\n-\t\t\t\t       new_temp);\n-\t      new_temp = make_ssa_name (vec_cvt_dest, new_stmt);\n+\t      /* Perform the operation on active elements only and take\n+\t\t inactive elements from the reduction chain input.  */\n+\t      gcc_assert (!vop2);\n+\t      vop2 = reduc_idx == 1 ? vop1 : vop0;\n+\t      tree mask = vect_get_loop_mask (gsi, masks, vec_num * ncopies,\n+\t\t\t\t\t      vectype, i * ncopies + j);\n+\t      gcall *call = gimple_build_call_internal (cond_fn, 4, mask,\n+\t\t\t\t\t\t\tvop0, vop1, vop2);\n+\t      new_temp = make_ssa_name (vec_dest, call);\n+\t      gimple_call_set_lhs (call, new_temp);\n+\t      gimple_call_set_nothrow (call, true);\n+\t      new_stmt_info\n+\t\t= vect_finish_stmt_generation (stmt_info, call, gsi);\n+\t    }\n+\t  else\n+\t    {\n+\t      gassign *new_stmt = gimple_build_assign (vec_dest, code,\n+\t\t\t\t\t\t       vop0, vop1, vop2);\n+\t      new_temp = make_ssa_name (vec_dest, new_stmt);\n \t      gimple_assign_set_lhs (new_stmt, new_temp);\n \t      new_stmt_info\n \t\t= vect_finish_stmt_generation (stmt_info, new_stmt, gsi);\n+\t      if (vec_cvt_dest)\n+\t\t{\n+\t\t  new_temp = build1 (VIEW_CONVERT_EXPR, vectype_out, new_temp);\n+\t\t  gassign *new_stmt\n+\t\t    = gimple_build_assign (vec_cvt_dest, VIEW_CONVERT_EXPR,\n+\t\t\t\t\t   new_temp);\n+\t\t  new_temp = make_ssa_name (vec_cvt_dest, new_stmt);\n+\t\t  gimple_assign_set_lhs (new_stmt, new_temp);\n+\t\t  new_stmt_info\n+\t\t    = vect_finish_stmt_generation (stmt_info, new_stmt, gsi);\n+\t\t}\n \t    }\n           if (slp_node)\n \t    SLP_TREE_VEC_STMTS (slp_node).quick_push (new_stmt_info);\n@@ -9997,6 +10050,16 @@ vectorizable_condition (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t\treturn false;\n \t    }\n \t}\n+      if (loop_vinfo\n+\t  && LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo)\n+\t  && reduction_type == EXTRACT_LAST_REDUCTION)\n+\t{\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t     \"can't yet use a fully-masked loop for\"\n+\t\t\t     \" EXTRACT_LAST_REDUCTION.\\n\");\n+\t  LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo) = false;\n+\t}\n       if (expand_vec_cond_expr_p (vectype, comp_vectype,\n \t\t\t\t     cond_code))\n \t{"}]}