{"sha": "264b47b0b934849c588e8754ce72cbb87f77fae7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY0YjQ3YjBiOTM0ODQ5YzU4OGU4NzU0Y2U3MmNiYjg3Zjc3ZmFlNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-07-25T10:40:10Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-07-25T10:40:10Z"}, "message": "ipa-inline.c (can_inline_edge_p): Look into DECL_STRUCT_FUNCTION of original nodes if...\n\n\t* ipa-inline.c (can_inline_edge_p): Look into DECL_STRUCT_FUNCTION of\n\toriginal nodes if we are dealing with virtual clones.\n\nFrom-SVN: r176739", "tree": {"sha": "6613cc1d23e08527945cf14cd3e12c6d65d03b93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6613cc1d23e08527945cf14cd3e12c6d65d03b93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/264b47b0b934849c588e8754ce72cbb87f77fae7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/264b47b0b934849c588e8754ce72cbb87f77fae7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/264b47b0b934849c588e8754ce72cbb87f77fae7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/264b47b0b934849c588e8754ce72cbb87f77fae7/comments", "author": null, "committer": null, "parents": [{"sha": "3d02ae6520c3c20a8379d705db12bf21c7976ab3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d02ae6520c3c20a8379d705db12bf21c7976ab3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d02ae6520c3c20a8379d705db12bf21c7976ab3"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "e8a7f250dc63ffcbd33df107f2889d4a8eeae0bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264b47b0b934849c588e8754ce72cbb87f77fae7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264b47b0b934849c588e8754ce72cbb87f77fae7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=264b47b0b934849c588e8754ce72cbb87f77fae7", "patch": "@@ -1,3 +1,8 @@\n+2011-07-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* ipa-inline.c (can_inline_edge_p): Look into DECL_STRUCT_FUNCTION of\n+\toriginal nodes if we are dealing with virtual clones.\n+\n 2011-07-25  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* common/config/c6x/c6x-common.c: New file."}, {"sha": "366fc2287806c06888b3cab8e2b6755f656dd5e3", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264b47b0b934849c588e8754ce72cbb87f77fae7/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264b47b0b934849c588e8754ce72cbb87f77fae7/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=264b47b0b934849c588e8754ce72cbb87f77fae7", "patch": "@@ -238,9 +238,20 @@ can_inline_edge_p (struct cgraph_edge *e, bool report)\n {\n   bool inlinable = true;\n   enum availability avail;\n-  struct cgraph_node *callee = cgraph_function_or_thunk_node (e->callee, &avail);\n+  struct cgraph_node *callee\n+    = cgraph_function_or_thunk_node (e->callee, &avail);\n   tree caller_tree = DECL_FUNCTION_SPECIFIC_OPTIMIZATION (e->caller->decl);\n-  tree callee_tree = callee ? DECL_FUNCTION_SPECIFIC_OPTIMIZATION (callee->decl) : NULL;\n+  tree callee_tree\n+    = callee ? DECL_FUNCTION_SPECIFIC_OPTIMIZATION (callee->decl) : NULL;\n+  struct function *caller_cfun = DECL_STRUCT_FUNCTION (e->caller->decl);\n+  struct function *callee_cfun\n+    = callee ? DECL_STRUCT_FUNCTION (callee->decl) : NULL;\n+\n+  if (!caller_cfun && e->caller->clone_of)\n+    caller_cfun = DECL_STRUCT_FUNCTION (e->caller->clone_of->decl);\n+\n+  if (!callee_cfun && callee && callee->clone_of)\n+    callee_cfun = DECL_STRUCT_FUNCTION (callee->clone_of->decl);\n \n   gcc_assert (e->inline_failed);\n \n@@ -277,12 +288,8 @@ can_inline_edge_p (struct cgraph_edge *e, bool report)\n      caller cannot.\n      FIXME: this is obviously wrong for LTO where STRUCT_FUNCTION is missing.\n      Move the flag into cgraph node or mirror it in the inline summary.  */\n-  else if (DECL_STRUCT_FUNCTION (callee->decl)\n-\t   && DECL_STRUCT_FUNCTION\n-\t        (callee->decl)->can_throw_non_call_exceptions\n-\t   && !(DECL_STRUCT_FUNCTION (e->caller->decl)\n-\t        && DECL_STRUCT_FUNCTION\n-\t\t     (e->caller->decl)->can_throw_non_call_exceptions))\n+  else if (callee_cfun && callee_cfun->can_throw_non_call_exceptions\n+\t   && !(caller_cfun && caller_cfun->can_throw_non_call_exceptions))\n     {\n       e->inline_failed = CIF_NON_CALL_EXCEPTIONS;\n       inlinable = false;"}]}