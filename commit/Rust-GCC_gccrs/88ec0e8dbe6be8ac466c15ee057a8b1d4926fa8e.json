{"sha": "88ec0e8dbe6be8ac466c15ee057a8b1d4926fa8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhlYzBlOGRiZTZiZThhYzQ2NmMxNWVlMDU3YThiMWQ0OTI2ZmE4ZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-02-06T17:21:50Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-02-06T17:21:50Z"}, "message": "Unify gcc.target/i386/memcpy scan strings.\n\nAfter -fno-common became the default, we can unify various\nscan strings between 64bit and 32bit targets.\n\n\t* gcc.target/i386/memcpy-strategy-1.c (dg-final):\n\tUnify scan-assembler strings for all targets.\n\t* gcc.target/i386/memcpy-strategy-2.c (dg-final): Ditto.\n\t* gcc.target/i386/memcpy-strategy-3.c (dg-final): Ditto.\n\t* gcc.target/i386/memcpy-vector_loop-1.c (dg-final): Ditto.", "tree": {"sha": "ac8d6c56dd3373075300dd160901c3c131cf3c88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac8d6c56dd3373075300dd160901c3c131cf3c88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88ec0e8dbe6be8ac466c15ee057a8b1d4926fa8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88ec0e8dbe6be8ac466c15ee057a8b1d4926fa8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88ec0e8dbe6be8ac466c15ee057a8b1d4926fa8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88ec0e8dbe6be8ac466c15ee057a8b1d4926fa8e/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a136a214ede91ef05caac017814b142883dc80d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a136a214ede91ef05caac017814b142883dc80d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a136a214ede91ef05caac017814b142883dc80d"}], "stats": {"total": 14, "additions": 4, "deletions": 10}, "files": [{"sha": "6ac80c9105330b494ce2d497ad26e1446b3ef263", "filename": "gcc/testsuite/gcc.target/i386/memcpy-strategy-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ec0e8dbe6be8ac466c15ee057a8b1d4926fa8e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmemcpy-strategy-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ec0e8dbe6be8ac466c15ee057a8b1d4926fa8e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmemcpy-strategy-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmemcpy-strategy-1.c?ref=88ec0e8dbe6be8ac466c15ee057a8b1d4926fa8e", "patch": "@@ -1,8 +1,7 @@\n /* { dg-do compile } */\n /* { dg-skip-if \"\" { *-*-* } { \"-march=*\" } { \"-march=atom\" } } */\n /* { dg-options \"-O2 -march=atom -mmemcpy-strategy=vector_loop:-1:align\" } */\n-/* { dg-final { scan-assembler-times \"movdqa\" 8 { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler-times \"movdqa\" 4 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"movdqa\" 8 } } */\n \n char a[2048];\n char b[2048];"}, {"sha": "c103896a1106a1fd646d545261f215bc5544ed49", "filename": "gcc/testsuite/gcc.target/i386/memcpy-strategy-2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ec0e8dbe6be8ac466c15ee057a8b1d4926fa8e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmemcpy-strategy-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ec0e8dbe6be8ac466c15ee057a8b1d4926fa8e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmemcpy-strategy-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmemcpy-strategy-2.c?ref=88ec0e8dbe6be8ac466c15ee057a8b1d4926fa8e", "patch": "@@ -1,8 +1,7 @@\n /* { dg-do compile } */\n /* { dg-skip-if \"\" { *-*-* } { \"-march=*\" } { \"-march=atom\" } } */\n /* { dg-options \"-O2 -march=atom -mmemcpy-strategy=vector_loop:3000:align,libcall:-1:align\" } */\n-/* { dg-final { scan-assembler-times \"movdqa\" 8 { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler-times \"movdqa\" 4 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"movdqa\" 8 } } */\n \n char a[2048];\n char b[2048];"}, {"sha": "2d72155bb2e6e4c568249f29835085292b55a7d4", "filename": "gcc/testsuite/gcc.target/i386/memcpy-strategy-3.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ec0e8dbe6be8ac466c15ee057a8b1d4926fa8e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmemcpy-strategy-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ec0e8dbe6be8ac466c15ee057a8b1d4926fa8e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmemcpy-strategy-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmemcpy-strategy-3.c?ref=88ec0e8dbe6be8ac466c15ee057a8b1d4926fa8e", "patch": "@@ -1,9 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -march=atom -mmemcpy-strategy=vector_loop:2000:align,libcall:-1:align\" } */\n-/* On ELF platforms, one hit comes from the .file directive.  */\n-/* { dg-final { scan-assembler-times \"memcpy\" 2 { target { ! *-*-darwin* } } } } */\n-/* But not on Darwin, which doesn't have a .file directive by default.  */\n-/* { dg-final { scan-assembler-times \"_memcpy\" 1  { target *-*-darwin* } } } */\n+/* { dg-final { scan-assembler-times \"call\\[\\\\t \\]*_?memcpy\" 1 } } */\n \n char a[2048];\n char b[2048];"}, {"sha": "93f428acc8595fe615e2e415132fd32c165ac061", "filename": "gcc/testsuite/gcc.target/i386/memcpy-vector_loop-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ec0e8dbe6be8ac466c15ee057a8b1d4926fa8e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmemcpy-vector_loop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ec0e8dbe6be8ac466c15ee057a8b1d4926fa8e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmemcpy-vector_loop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmemcpy-vector_loop-1.c?ref=88ec0e8dbe6be8ac466c15ee057a8b1d4926fa8e", "patch": "@@ -1,8 +1,7 @@\n /* { dg-do compile } */\n /* { dg-skip-if \"\" { *-*-* } { \"-march=*\" } { \"-march=atom\" } } */\n /* { dg-options \"-O2 -march=atom -minline-all-stringops -mstringop-strategy=vector_loop\" } */\n-/* { dg-final { scan-assembler-times \"movdqa\" 8 { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler-times \"movdqa\" 4 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"movdqa\" 8 } } */\n \n char a[2048];\n char b[2048];"}]}