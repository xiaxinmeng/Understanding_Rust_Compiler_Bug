{"sha": "0f6e5d4593c863b3a180f496c45cbd9268a2eef6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY2ZTVkNDU5M2M4NjNiM2ExODBmNDk2YzQ1Y2JkOTI2OGEyZWVmNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-04-17T06:50:02Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-04-17T06:50:02Z"}, "message": "frv.c (symbol_ref_small_data_p): Remove.\n\n        * config/frv/frv.c (symbol_ref_small_data_p): Remove.  Replace\n        all users with SYMBOL_REF_SMALL_P.\n        (const_small_data_p): Use SYMBOL_REF_SMALL_P.\n        (frv_encode_section_info): Remove.\n        (frv_strip_name_encoding): Remove.\n        (frv_in_small_data_p): Merge tests from encode_section_info.\n        (frv_print_operand): Use '@' not SDATA_FLAG_CHAR.\n        * config/frv/frv.h (SDATA_FLAG_CHAR): Remove.\n        (SDATA_NAME_P): Remove.\n        (ASM_OUTPUT_ALIGNED_DECL_LOCAL): Use SIZE not SDATA_NAME_P.\n        (ASM_OUTPUT_LABELREF): Remove.\n        (PRINT_OPERAND_PUNCT_VALID_P): Use '@' not SDATA_FLAG_CHAR.\n\nFrom-SVN: r65725", "tree": {"sha": "27739feb83378bd5623fa4edb0f5aaf17170333b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27739feb83378bd5623fa4edb0f5aaf17170333b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f6e5d4593c863b3a180f496c45cbd9268a2eef6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f6e5d4593c863b3a180f496c45cbd9268a2eef6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f6e5d4593c863b3a180f496c45cbd9268a2eef6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f6e5d4593c863b3a180f496c45cbd9268a2eef6/comments", "author": null, "committer": null, "parents": [{"sha": "90a63880dd0075e4841579daf30006030ba39ab1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90a63880dd0075e4841579daf30006030ba39ab1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90a63880dd0075e4841579daf30006030ba39ab1"}], "stats": {"total": 182, "additions": 59, "deletions": 123}, "files": [{"sha": "1f3fb6c2af0d4e278ba0839ae301bf3290981240", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6e5d4593c863b3a180f496c45cbd9268a2eef6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6e5d4593c863b3a180f496c45cbd9268a2eef6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f6e5d4593c863b3a180f496c45cbd9268a2eef6", "patch": "@@ -1,5 +1,18 @@\n 2003-04-16  Richard Henderson  <rth@redhat.com>\n \n+\t* config/frv/frv.c (symbol_ref_small_data_p): Remove.  Replace\n+\tall users with SYMBOL_REF_SMALL_P.\n+\t(const_small_data_p): Use SYMBOL_REF_SMALL_P.\n+\t(frv_encode_section_info): Remove.\n+\t(frv_strip_name_encoding): Remove.\n+\t(frv_in_small_data_p): Merge tests from encode_section_info.\n+\t(frv_print_operand): Use '@' not SDATA_FLAG_CHAR.\n+\t* config/frv/frv.h (SDATA_FLAG_CHAR): Remove.\n+\t(SDATA_NAME_P): Remove.\n+\t(ASM_OUTPUT_ALIGNED_DECL_LOCAL): Use SIZE not SDATA_NAME_P.\n+\t(ASM_OUTPUT_LABELREF): Remove.\n+\t(PRINT_OPERAND_PUNCT_VALID_P): Use '@' not SDATA_FLAG_CHAR.\n+\n \t* config/frv/frv.c (frv_asm_out_constructor): New.\n \t(frv_asm_out_destructor): New.\n \t* config/frv/frv.h (CTORS_SECTION_ASM_OP): New."}, {"sha": "f28d954543e64718d34264749d7cd49168a5f2bf", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 37, "deletions": 96, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6e5d4593c863b3a180f496c45cbd9268a2eef6/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6e5d4593c863b3a180f496c45cbd9268a2eef6/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=0f6e5d4593c863b3a180f496c45cbd9268a2eef6", "patch": "@@ -198,7 +198,6 @@ int frv_sched_lookahead = 4;\t\t /* -msched-lookahead=n */\n /* Forward references */\n static int frv_default_flags_for_cpu\t\tPARAMS ((void));\n static int frv_string_begins_with\t\tPARAMS ((tree, const char *));\n-static FRV_INLINE int symbol_ref_small_data_p\tPARAMS ((rtx));\n static FRV_INLINE int const_small_data_p\tPARAMS ((rtx));\n static FRV_INLINE int plus_small_data_p\t\tPARAMS ((rtx, rtx));\n static void frv_print_operand_memory_reference_reg\n@@ -276,8 +275,6 @@ static void frv_pack_insns\t\t\tPARAMS ((void));\n static void frv_function_prologue\t\tPARAMS ((FILE *, HOST_WIDE_INT));\n static void frv_function_epilogue\t\tPARAMS ((FILE *, HOST_WIDE_INT));\n static bool frv_assemble_integer\t\tPARAMS ((rtx, unsigned, int));\n-static const char * frv_strip_name_encoding\tPARAMS ((const char *));\n-static void frv_encode_section_info\t\tPARAMS ((tree, int));\n static void frv_init_builtins\t\t\tPARAMS ((void));\n static rtx frv_expand_builtin\t\t\tPARAMS ((tree, rtx, rtx, enum machine_mode, int));\n static bool frv_in_small_data_p\t\t\tPARAMS ((tree));\n@@ -294,10 +291,6 @@ static void frv_asm_out_destructor\t\tPARAMS ((rtx, int));\n #define TARGET_ASM_FUNCTION_EPILOGUE frv_function_epilogue\n #undef  TARGET_ASM_INTEGER\n #define TARGET_ASM_INTEGER frv_assemble_integer\n-#undef  TARGET_STRIP_NAME_ENCODING\n-#define TARGET_STRIP_NAME_ENCODING frv_strip_name_encoding\n-#undef  TARGET_ENCODE_SECTION_INFO\n-#define TARGET_ENCODE_SECTION_INFO frv_encode_section_info\n #undef TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS frv_init_builtins\n #undef TARGET_EXPAND_BUILTIN\n@@ -318,15 +311,6 @@ static void frv_asm_out_destructor\t\tPARAMS ((rtx, int));\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n-/* Given a SYMBOL_REF, return true if it points to small data.  */\n-\n-static FRV_INLINE int\n-symbol_ref_small_data_p (x)\n-     rtx x;\n-{\n-  return SDATA_NAME_P (XSTR (x, 0));\n-}\n-\n /* Given a CONST, return true if the symbol_ref points to small data.  */\n \n static FRV_INLINE int\n@@ -339,7 +323,7 @@ const_small_data_p (x)\n     return FALSE;\n \n   x0 = XEXP (XEXP (x, 0), 0);\n-  if (GET_CODE (x0) != SYMBOL_REF || !SDATA_NAME_P (XSTR (x0, 0)))\n+  if (GET_CODE (x0) != SYMBOL_REF || !SYMBOL_REF_SMALL_P (x0))\n     return FALSE;\n \n   x1 = XEXP (XEXP (x, 0), 1);\n@@ -362,7 +346,7 @@ plus_small_data_p (op0, op1)\n       && REGNO (op0) == SDA_BASE_REG)\n     {\n       if (GET_CODE (op1) == SYMBOL_REF)\n-\treturn symbol_ref_small_data_p (op1);\n+\treturn SYMBOL_REF_SMALL_P (op1);\n \n       if (GET_CODE (op1) == CONST)\n \treturn const_small_data_p (op1);\n@@ -655,64 +639,6 @@ frv_string_begins_with (name, prefix)\n   return (TREE_STRING_LENGTH (name) > prefix_len\n \t  && strncmp (TREE_STRING_POINTER (name), prefix, prefix_len) == 0);\n }\n-\n-/* Encode section information of DECL, which is either a VAR_DECL,\n-   FUNCTION_DECL, STRING_CST, CONSTRUCTOR, or ???.\n-\n-   For the FRV we want to record:\n-\n-   - whether the object lives in .sdata/.sbss.\n-     objects living in .sdata/.sbss are prefixed with SDATA_FLAG_CHAR\n-\n-*/\n-\n-static void\n-frv_encode_section_info (decl, first)\n-     tree decl;\n-     int first;\n-{\n-  if (! first)\n-    return;\n-  if (TREE_CODE (decl) == VAR_DECL)\n-    {\n-      int size = int_size_in_bytes (TREE_TYPE (decl));\n-      tree section_name = DECL_SECTION_NAME (decl);\n-      int is_small = 0;\n-\n-      /* Don't apply the -G flag to internal compiler structures.  We\n-\t should leave such structures in the main data section, partly\n-\t for efficiency and partly because the size of some of them\n-\t (such as C++ typeinfos) is not known until later.  */\n-      if (!DECL_ARTIFICIAL (decl) && size > 0 && size <= g_switch_value)\n-\tis_small = 1;\n-\n-      /* If we already know which section the decl should be in, see if\n-\t it's a small data section.  */\n-      if (section_name)\n-\t{\n-\t  if (TREE_CODE (section_name) == STRING_CST)\n-\t    {\n-\t      if (frv_string_begins_with (section_name, \".sdata\"))\n-\t\tis_small = 1;\n-\t      if (frv_string_begins_with (section_name, \".sbss\"))\n-\t\tis_small = 1;\n-\t    }\n-\t  else\n-\t    abort ();\n-\t}\n-\n-      if (is_small)\n-\t{\n-\t  rtx sym_ref = XEXP (DECL_RTL (decl), 0);\n-\t  char * str = xmalloc (2 + strlen (XSTR (sym_ref, 0)));\n-\n-\t  str[0] = SDATA_FLAG_CHAR;\n-\t  strcpy (&str[1], XSTR (sym_ref, 0));\n-\t  XSTR (sym_ref, 0) = str;\n-\t}\n-    }\n-}\n-\n \f\n /* Zero or more C statements that may conditionally modify two variables\n    `fixed_regs' and `call_used_regs' (both of type `char []') after they have\n@@ -2622,7 +2548,7 @@ frv_print_operand_memory_reference (stream, x, addr_offset)\n \n \tcase SYMBOL_REF:\n \t  if (x0 && GET_CODE (x0) == REG && REGNO (x0) == SDA_BASE_REG\n-\t      && symbol_ref_small_data_p (x1))\n+\t      && SYMBOL_REF_SMALL_P (x1))\n \t    {\n \t      fputs (\"#gprel12(\", stream);\n \t      assemble_name (stream, XSTR (x1, 0));\n@@ -2805,7 +2731,7 @@ frv_print_operand (file, x, code)\n       fprintf (file, \"%d\", frv_print_operand_jump_hint (current_output_insn));\n       break;\n \n-    case SDATA_FLAG_CHAR:\n+    case '@':\n       /* Output small data area base register (gr16). */\n       fputs (reg_names[SDA_BASE_REG], file);\n       break;\n@@ -3522,7 +3448,7 @@ frv_legitimate_address_p (mode, x, strict_p, condexec_p)\n \tcase SYMBOL_REF:\n \t  if (!condexec_p\n \t      && regno0 == SDA_BASE_REG\n-\t      && symbol_ref_small_data_p (x1))\n+\t      && SYMBOL_REF_SMALL_P (x1))\n \t    ret = TRUE;\n \t  break;\n \n@@ -3580,7 +3506,7 @@ frv_legitimize_address (x, oldx, mode)\n      things up when force_reg is called to try and put it in a register because\n      we aren't optimizing.  */\n   if (optimize\n-      && ((GET_CODE (x) == SYMBOL_REF && symbol_ref_small_data_p (x))\n+      && ((GET_CODE (x) == SYMBOL_REF && SYMBOL_REF_SMALL_P (x))\n \t  || (GET_CODE (x) == CONST && const_small_data_p (x))))\n     {\n       ret = gen_rtx_PLUS (Pmode, gen_rtx_REG (Pmode, SDA_BASE_REG), x);\n@@ -3889,7 +3815,7 @@ int int_2word_operand (op, mode)\n \n     case SYMBOL_REF:\n       /* small data references are already 1 word */\n-      return (flag_pic == 0) && (! symbol_ref_small_data_p (op));\n+      return (flag_pic == 0) && (! SYMBOL_REF_SMALL_P (op));\n \n     case CONST_INT:\n       return ! IN_RANGE_P (INTVAL (op), -32768, 32767);\n@@ -3951,7 +3877,7 @@ int pic_symbolic_operand (op, mode)\n \n     case SYMBOL_REF:\n       /* small data references are already 1 word */\n-      return ! symbol_ref_small_data_p (op);\n+      return ! SYMBOL_REF_SMALL_P (op);\n \n     case CONST:\n       /* small data references are already 1 word */\n@@ -3992,7 +3918,7 @@ int small_data_symbolic_operand (op, mode)\n       return const_small_data_p (op);\n \n     case SYMBOL_REF:\n-      return symbol_ref_small_data_p (op);\n+      return SYMBOL_REF_SMALL_P (op);\n     }\n \n   return FALSE;\n@@ -5504,7 +5430,7 @@ frv_emit_movsi (dest, src)\n       break;\n \n     case SYMBOL_REF:\n-      if (symbol_ref_small_data_p (src))\n+      if (SYMBOL_REF_SMALL_P (src))\n \tbase_regno = SDA_BASE_REG;\n \n       else if (flag_pic)\n@@ -9779,23 +9705,38 @@ frv_expand_builtin (exp, target, subtarget, mode, ignore)\n   return 0;\n }\n \n-static const char *\n-frv_strip_name_encoding (str)\n-     const char *str;\n-{\n-  while (*str == '*' || *str == SDATA_FLAG_CHAR)\n-    str++;\n-  return str;\n-}\n-\n static bool\n frv_in_small_data_p (decl)\n      tree decl;\n {\n-  HOST_WIDE_INT size = int_size_in_bytes (TREE_TYPE (decl));\n+  HOST_WIDE_INT size;\n+  tree section_name;\n+\n+  /* Don't apply the -G flag to internal compiler structures.  We\n+     should leave such structures in the main data section, partly\n+     for efficiency and partly because the size of some of them\n+     (such as C++ typeinfos) is not known until later.  */\n+  if (TREE_CODE (decl) != VAR_DECL || DECL_ARTIFICIAL (decl))\n+    return false;\n+\n+  size = int_size_in_bytes (TREE_TYPE (decl));\n+  if (size > 0 && size <= g_switch_value)\n+    return true;\n+\n+  /* If we already know which section the decl should be in, see if\n+     it's a small data section.  */\n+  section_name = DECL_SECTION_NAME (decl);\n+  if (section_name)\n+    {\n+      if (TREE_CODE (section_name) != STRING_CST)\n+\tabort ();\n+      if (frv_string_begins_with (section_name, \".sdata\"))\n+\treturn true;\n+      if (frv_string_begins_with (section_name, \".sbss\"))\n+\treturn true;\n+    }\n \n-  return symbol_ref_small_data_p (XEXP (DECL_RTL (decl), 0))\n-    && size > 0 && size <= g_switch_value;\n+  return false;\n }\n \f\n static bool"}, {"sha": "ed40dfb30f51be66a2ac0aed0f504f2960ed3637", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 9, "deletions": 27, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6e5d4593c863b3a180f496c45cbd9268a2eef6/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6e5d4593c863b3a180f496c45cbd9268a2eef6/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=0f6e5d4593c863b3a180f496c45cbd9268a2eef6", "patch": "@@ -2663,10 +2663,9 @@ __asm__(\"\\n\"\t\t\t\t\t\t\t\t\\\n    macro if you do not define `EXTRA_SECTIONS'.  */\n #undef  EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS                                         \\\n-SDATA_SECTION_FUNCTION                                                  \\\n-SBSS_SECTION_FUNCTION\t\t\t\t\t\t\t\\\n-FIXUP_SECTION_FUNCTION\n-\n+\tSDATA_SECTION_FUNCTION\t\t\t\t\t\t\\\n+\tSBSS_SECTION_FUNCTION\t\t\t\t\t\t\\\n+\tFIXUP_SECTION_FUNCTION\n \n #define SDATA_SECTION_FUNCTION\t\t\t\t\t\t\\\n void\t\t\t\t\t\t\t\t\t\\\n@@ -2677,7 +2676,7 @@ sdata_section ()\t\t\t\t\t\t\t\\\n       fprintf (asm_out_file, \"%s\\n\", SDATA_SECTION_ASM_OP);\t\t\\\n       in_section = in_sdata;\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n+}\n \n #define SBSS_SECTION_FUNCTION\t\t\t\t\t\t\\\n void\t\t\t\t\t\t\t\t\t\\\n@@ -2688,7 +2687,7 @@ sbss_section ()\t\t\t\t\t\t\t\t\\\n       fprintf (asm_out_file, \"%s\\n\", SBSS_SECTION_ASM_OP);\t\t\\\n       in_section = in_sbss;\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n+}\n \n #define FIXUP_SECTION_FUNCTION\t\t\t\t\t\t\\\n void\t\t\t\t\t\t\t\t\t\\\n@@ -2699,11 +2698,7 @@ fixup_section ()\t\t\t\t\t\t\t\\\n       fprintf (asm_out_file, \"%s\\n\", FIXUP_SECTION_ASM_OP);\t\t\\\n       in_section = in_fixup;\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n-\n-#define SDATA_FLAG_CHAR '@'\n-\n-#define SDATA_NAME_P(NAME) (*(NAME) == SDATA_FLAG_CHAR)\n+}\n \f\n /* Position Independent Code.  */\n \n@@ -2788,10 +2783,10 @@ extern int size_directive_output;\n #undef ASM_OUTPUT_ALIGNED_DECL_LOCAL\n #define ASM_OUTPUT_ALIGNED_DECL_LOCAL(STREAM, DECL, NAME, SIZE, ALIGN)\t\\\n do {                                                                   \t\\\n-  if (SDATA_NAME_P (NAME))                                             \t\\\n+  if ((SIZE) > 0 && (SIZE) <= g_switch_value)\t\t\t\t\\\n     sbss_section ();                                                 \t\\\n   else                                                                 \t\\\n-     bss_section ();                                                  \t\\\n+    bss_section ();                                                  \t\\\n   ASM_OUTPUT_ALIGN (STREAM, floor_log2 ((ALIGN) / BITS_PER_UNIT));     \t\\\n   ASM_DECLARE_OBJECT_NAME (STREAM, NAME, DECL);                        \t\\\n   ASM_OUTPUT_SKIP (STREAM, (SIZE) ? (SIZE) : 1);                       \t\\\n@@ -2814,19 +2809,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Globalizing directive for a label.  */\n #define GLOBAL_ASM_OP \"\\t.globl \"\n \n-/* A C statement (sans semicolon) to output to the stdio stream STREAM a\n-   reference in assembler syntax to a label named NAME.  This should add `_' to\n-   the front of the name, if that is customary on your operating system, as it\n-   is in most Berkeley Unix systems.  This macro is used in `assemble_name'.  */\n-#undef ASM_OUTPUT_LABELREF\n-#define ASM_OUTPUT_LABELREF(STREAM, NAME)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  const char *_name = (NAME);\t\t\t\t\t\t\\\n-  while (*_name == '*' || *_name == SDATA_FLAG_CHAR)\t\t\t\\\n-    _name++;\t\t\t\t\t\t\t\t\\\n-  asm_fprintf (STREAM, \"%U%s\", _name);\t\t\t\t\t\\\n-} while (0)\n-\n /* A C statement to store into the string STRING a label whose name is made\n    from the string PREFIX and the number NUM.\n \n@@ -2980,7 +2962,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    * == temporary integer CCR register (cr3)\n    & == temporary integer ICC register (icc3)  */\n #define PRINT_OPERAND_PUNCT_VALID_P(CODE)\t\t\t\t\\\n-((CODE) == '.' || (CODE) == '#' || (CODE) == SDATA_FLAG_CHAR || (CODE) == '~'\t\\\n+((CODE) == '.' || (CODE) == '#' || (CODE) == '@' || (CODE) == '~'\t\\\n  || (CODE) == '*' || (CODE) == '&')\n \n /* A C compound statement to output to stdio stream STREAM the assembler syntax"}]}