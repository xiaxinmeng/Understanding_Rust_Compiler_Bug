{"sha": "5b5588dd53fd0da82e406f5de6e9f189f89f1b1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI1NTg4ZGQ1M2ZkMGRhODJlNDA2ZjVkZTZlOWYxODlmODlmMWIxYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-02T09:59:32Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-02T09:59:32Z"}, "message": "[multiple changes]\n\n2011-09-02  Bob Duff  <duff@adacore.com>\n\n\t* sem_ch6.adb: (Check_Post_State): Suppress warning\n\t\"postcondition refers only to pre-state\" when the expression has not\n\tyet been analyzed, because it causes false alarms. This can happen when\n\tthe postcondition contains a quantified expression, because those are\n\tanalyzed later. This is a temporary/partial fix.\n\t(Process_Post_Conditions): Minor: change wording of warning.\n\n2011-09-02  Marc Sango  <sango@adacore.com>\n\n\t* sem_ch3.adb (Analyze_Object_Declaration): Detect the violation of\n\tillegal use of unconstrained string type in SPARK mode.\n\t* sem_res.adb (Analyze_Operator_Symbol): Set the\n\tright place where the string operand of concatenation should be\n\tviolate in SPARK mode.\n\nFrom-SVN: r178460", "tree": {"sha": "d6a82cb47f4f512aaf1cf08fce7c897f5ef759be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6a82cb47f4f512aaf1cf08fce7c897f5ef759be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b5588dd53fd0da82e406f5de6e9f189f89f1b1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b5588dd53fd0da82e406f5de6e9f189f89f1b1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b5588dd53fd0da82e406f5de6e9f189f89f1b1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b5588dd53fd0da82e406f5de6e9f189f89f1b1a/comments", "author": null, "committer": null, "parents": [{"sha": "bd603506f6e92d29abc1f975ad7d356907ba25c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd603506f6e92d29abc1f975ad7d356907ba25c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd603506f6e92d29abc1f975ad7d356907ba25c2"}], "stats": {"total": 45, "additions": 39, "deletions": 6}, "files": [{"sha": "4ca7037e87735f21c9f3ae0f6a435e76f15a32e8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5588dd53fd0da82e406f5de6e9f189f89f1b1a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5588dd53fd0da82e406f5de6e9f189f89f1b1a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5b5588dd53fd0da82e406f5de6e9f189f89f1b1a", "patch": "@@ -1,3 +1,20 @@\n+2011-09-02  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch6.adb: (Check_Post_State): Suppress warning\n+\t\"postcondition refers only to pre-state\" when the expression has not\n+\tyet been analyzed, because it causes false alarms. This can happen when\n+\tthe postcondition contains a quantified expression, because those are\n+\tanalyzed later. This is a temporary/partial fix.\n+\t(Process_Post_Conditions): Minor: change wording of warning.\n+\n+2011-09-02  Marc Sango  <sango@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Detect the violation of\n+\tillegal use of unconstrained string type in SPARK mode.\n+\t* sem_res.adb (Analyze_Operator_Symbol): Set the\n+\tright place where the string operand of concatenation should be\n+\tviolate in SPARK mode.\n+\n 2011-09-02  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_prag.adb, sem_util.adb, sem_ch6.adb, prj-nmsc.adb,"}, {"sha": "fb702f31f4aa416541cdbfbb1c469cae431ee0ac", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5588dd53fd0da82e406f5de6e9f189f89f1b1a/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5588dd53fd0da82e406f5de6e9f189f89f1b1a/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=5b5588dd53fd0da82e406f5de6e9f189f89f1b1a", "patch": "@@ -3313,9 +3313,18 @@ package body Sem_Ch3 is\n          --  Case of initialization present\n \n          else\n+\n             --  Not allowed in Ada 83\n \n             if not Constant_Present (N) then\n+\n+               --  A declaration of unconstrained type in SPARK is limited,\n+               --  the only exception to this is the admission of declaration\n+               --  of constants of type string.\n+\n+               Check_SPARK_Restriction\n+                 (\"declaration of unconstrained type is limited\", E);\n+\n                if Ada_Version = Ada_83\n                  and then Comes_From_Source (Object_Definition (N))\n                then"}, {"sha": "bd1b6e34d3b5083ab6d09c0f2380f154a3c22c3f", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5588dd53fd0da82e406f5de6e9f189f89f1b1a/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5588dd53fd0da82e406f5de6e9f189f89f1b1a/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=5b5588dd53fd0da82e406f5de6e9f189f89f1b1a", "patch": "@@ -5551,9 +5551,16 @@ package body Sem_Ch6 is\n                declare\n                   E : constant Entity_Id := Entity (N);\n                begin\n-                  if Is_Entity_Name (N)\n-                    and then Present (E)\n-                    and then Ekind (E) in Assignable_Kind\n+                  --  ???Quantified expressions get analyzed later, so E can be\n+                  --  empty at this point. In this case, we suppress the\n+                  --  warning, just in case E is assignable. It seems better to\n+                  --  have false negatives than false positives. At some point,\n+                  --  we should make the warning more accurate, either by\n+                  --  analyzing quantified expressions earlier, or moving this\n+                  --  processing later.\n+\n+                  if No (E) or else\n+                    (Is_Entity_Name (N) and then Ekind (E) in Assignable_Kind)\n                   then\n                      Found := True;\n                   end if;\n@@ -5627,7 +5634,7 @@ package body Sem_Ch6 is\n                Ignored := Find_Post_State (Arg);\n \n                if not Post_State_Mentioned then\n-                  Error_Msg_N (\"?postcondition only refers to pre-state\",\n+                  Error_Msg_N (\"?postcondition refers only to pre-state\",\n                                Prag);\n                end if;\n             end if;"}, {"sha": "0a15075994c51c5e1c136f7662e2b655fd80f255", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5588dd53fd0da82e406f5de6e9f189f89f1b1a/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5588dd53fd0da82e406f5de6e9f189f89f1b1a/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=5b5588dd53fd0da82e406f5de6e9f189f89f1b1a", "patch": "@@ -7741,7 +7741,7 @@ package body Sem_Res is\n       if Is_Character_Type (Etype (Arg)) then\n          if not Is_Static_Expression (Arg) then\n             Check_SPARK_Restriction\n-              (\"character operand for concatenation should be static\", N);\n+              (\"character operand for concatenation should be static\", Arg);\n          end if;\n \n       elsif Is_String_Type (Etype (Arg)) then\n@@ -7750,7 +7750,7 @@ package body Sem_Res is\n            and then not Is_Static_Expression (Arg)\n          then\n             Check_SPARK_Restriction\n-              (\"string operand for concatenation should be static\", N);\n+              (\"string operand for concatenation should be static\", Arg);\n          end if;\n \n       --  Do not issue error on an operand that is neither a character nor a"}]}