{"sha": "6d8ccdbbb20cdff710cd6977165bde1d763f6a40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ4Y2NkYmJiMjBjZGZmNzEwY2Q2OTc3MTY1YmRlMWQ3NjNmNmE0MA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-12-15T07:05:04Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-12-15T07:05:04Z"}, "message": "Bring over changes from latest gcc-2.8 pre-release.\n\nMirror sched.c change into haifa-sched.c\n\nFrom-SVN: r17097", "tree": {"sha": "fff0335d1435c9b6e70f06bebdd1a98b6cfd22bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fff0335d1435c9b6e70f06bebdd1a98b6cfd22bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d8ccdbbb20cdff710cd6977165bde1d763f6a40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d8ccdbbb20cdff710cd6977165bde1d763f6a40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d8ccdbbb20cdff710cd6977165bde1d763f6a40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/comments", "author": null, "committer": null, "parents": [{"sha": "7b8dd497414f0e8299a07ec4c2e81a78980b0bba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b8dd497414f0e8299a07ec4c2e81a78980b0bba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b8dd497414f0e8299a07ec4c2e81a78980b0bba"}], "stats": {"total": 164, "additions": 118, "deletions": 46}, "files": [{"sha": "76a30f9a014a36d6d72a440e59f213beaaa48814", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d8ccdbbb20cdff710cd6977165bde1d763f6a40", "patch": "@@ -1,3 +1,10 @@\n+Mon Dec 15 00:04:48 1997  Jeffrey A Law  (law@cygnus.com)\n+\n+        * haifa-sched.c (remove_dependencies): Set RTX_INTEGRATED_P on\n+\tdependency we delete.  Properly update prev for multiple consecutive\n+\tdeletions.\n+        (priority): Skip deleted dependence.\n+\n Fri Dec 12 18:54:23 1997  Per Bothner  <bothner@cygnus.com>\n \n \t* expr.c (expand_builtin):  Support BUILT_IN_FMOD - just call fmod."}, {"sha": "748764fa33a254f50169354cf7d7b18027924b34", "filename": "gcc/ChangeLog.11", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2FChangeLog.11", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2FChangeLog.11", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.11?ref=6d8ccdbbb20cdff710cd6977165bde1d763f6a40", "patch": "@@ -1,8 +1,52 @@\n-Fri Dec 12 08:01:44 1997  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+Sun Dec 14 06:49:05 1997  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* Version 2.8.0 released.\n+\n+\t* expr.c (expand_expr, case PLACEHOLDER_EXPR): Use placeholder_list \n+\texpression in preference to any other if correct type.\n+\n+\t* i386.h (INITIAL_ELIMINATION_OFFSET): Correctly test for PIC\n+\tregister used.\n+\n+Sat Dec 13 06:11:32 1997  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* frame.h (__register_frame_info_table): Fix typo in declaration.\n+\n+Fri Dec 12 07:55:18 1997  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* function.c (purge_addressof_1): For (mem (address (mem ...)),\n+\twhen collapsing, preserve mode of outer MEM.\n+\n+\t* frame.c (__register_frame_info): Renamed from __register_frame.\n+\t(__register_frame_info_table, __deregister_frame_info): Similarly.\n+\t* frame.h (__{,de}register_frame_info): Likewise.\n+\t(__register_frame_info_table): New declaration.\n+\t* crtstuff.c (__do_global_dtors{,_aux}): Rename __deregister_frame.\n+\t(frame_dummy, __do_global_ctors): Likewise for __register_frame.\n+\t* collect2.c (write_c_file_{stat,glob}): Rename __register_frame\n+\tto __register_frame_info and similarly for __deregister_frame and\n+\t__register_frame_table.\n+\n+\t* sched.c (remove_dependencies): Set RTX_INTEGRATED_P on dependency\n+\twe delete.  Properly update prev for multiple consecutive deletions.\n+\t(priority): Skip deleted dependence.\n \n \t* integrate.c (initialize_for_inline): In DECL_RTL of a PARM_DECL,\n \tlook inside a (mem (addressof (mem ...))).\n \n+Fri Dec 12 05:49:58 1997  Paul Eggert  <eggert@twinsun.com>\n+\n+\t* collect2.c (write_c_file_glob):\n+\tAllocate initial frame object in static storage and pass its address.\n+\n+Thu Dec 11 18:01:31 1997  Philippe De Muyter  <phdm@macqel.be>\n+\n+\t* acconfig.h (NEED_DECLARATION_GETENV): Define slot added.\n+\n+Thu Dec 11 17:54:23 1997  Paul Eggert  <eggert@twinsun.com>\n+\n+\t* crtstuff.c (__do_global_ctors): Fix typo in last change.\n+\n Wed Dec 10 18:38:28 1997  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n  \n         * libgcc2.c (__bb_exit_func): Fix test of return value of fopen."}, {"sha": "60fabf131b791bd5f1163024dcf789c82562e0a9", "filename": "gcc/INSTALL", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2FINSTALL", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2FINSTALL", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FINSTALL?ref=6d8ccdbbb20cdff710cd6977165bde1d763f6a40", "patch": "@@ -164,7 +164,7 @@ and includes all the necessary compilation tools and libraries.\n           `--nfp' currently has no effect, though perhaps there are\n           other systems where it could usefully make a difference.\n \n-    `--enable-objcthreads=TYPE'\n+    `--enable-threads=TYPE'\n           Certain systems, notably Linux-based GNU systems, can't be\n           relied on to supply a threads facility for the Objective C\n           runtime and so will default to single-threaded runtime.  They"}, {"sha": "46441675fd07283f7388e74bbc347cd7847281d6", "filename": "gcc/SERVICE", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2FSERVICE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2FSERVICE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FSERVICE?ref=6d8ccdbbb20cdff710cd6977165bde1d763f6a40", "patch": "@@ -693,8 +693,7 @@ My rate varies greatly between $25-$40/hour, depending on the circumstances.\n Rates for non-profit organizations are substantially lower, and possibly free.\n \n Please note that I have no interest in working with any Micro$oft related\n-products.  I will accept work that involves other non-free, non-Micro$oft\n-software, but I would want the primary focus of the work to be contributing\n+products!  I want the primary focus of my work to be contributing\n to the free software community.\n \n Updated: 1997-12-04"}, {"sha": "41c0cf8b1d61bc6a2f50ad5c07b1adcd849b74a2", "filename": "gcc/acconfig.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Facconfig.h?ref=6d8ccdbbb20cdff710cd6977165bde1d763f6a40", "patch": "@@ -18,4 +18,7 @@\n \n /* Whether rindex must be declared even if <stdlib.h> is included.  */\n #undef NEED_DECLARATION_RINDEX\n+\n+/* Whether getenv must be declared even if <stdlib.h> is included.  */\n+#undef NEED_DECLARATION_GETENV\n @TOP@"}, {"sha": "88547cb4f61bf4902d2ae26ef17c534f90aaed16", "filename": "gcc/collect2.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=6d8ccdbbb20cdff710cd6977165bde1d763f6a40", "patch": "@@ -1790,16 +1790,16 @@ write_c_file_stat (stream, name)\n       fprintf (stream, \"  struct object *next;\\n\");\n       fprintf (stream, \"};\\n\");\n \n-      fprintf (stream, \"extern void __register_frame_table (void *, struct object *);\\n\");\n-      fprintf (stream, \"extern void __deregister_frame (void *);\\n\");\n+      fprintf (stream, \"extern void __register_frame_info_table (void *, struct object *);\\n\");\n+      fprintf (stream, \"extern void __deregister_frame_info (void *);\\n\");\n \n       fprintf (stream, \"static void reg_frame () {\\n\");\n       fprintf (stream, \"\\tstatic struct object ob;\\n\");\n-      fprintf (stream, \"\\t__register_frame_table (frame_table, &ob);\\n\");\n+      fprintf (stream, \"\\t__register_frame_info_table (frame_table, &ob);\\n\");\n       fprintf (stream, \"\\t}\\n\");\n \n       fprintf (stream, \"static void dereg_frame () {\\n\");\n-      fprintf (stream, \"\\t__deregister_frame (frame_table);\\n\");\n+      fprintf (stream, \"\\t__deregister_frame_info (frame_table);\\n\");\n       fprintf (stream, \"\\t}\\n\");\n     }\n \n@@ -1876,16 +1876,16 @@ write_c_file_glob (stream, name)\n       fprintf (stream, \"  struct object *next;\\n\");\n       fprintf (stream, \"};\\n\");\n \n-      fprintf (stream, \"extern void __register_frame_table (void *, struct object *);\\n\");\n-      fprintf (stream, \"extern void __deregister_frame (void *);\\n\");\n+      fprintf (stream, \"extern void __register_frame_info_table (void *, struct object *);\\n\");\n+      fprintf (stream, \"extern void __deregister_frame_info (void *);\\n\");\n \n       fprintf (stream, \"static void reg_frame () {\\n\");\n       fprintf (stream, \"\\tstatic struct object ob;\\n\");\n-      fprintf (stream, \"\\t__register_frame_table (frame_table, &ob);\\n\");\n+      fprintf (stream, \"\\t__register_frame_info_table (frame_table, &ob);\\n\");\n       fprintf (stream, \"\\t}\\n\");\n \n       fprintf (stream, \"static void dereg_frame () {\\n\");\n-      fprintf (stream, \"\\t__deregister_frame (frame_table);\\n\");\n+      fprintf (stream, \"\\t__deregister_frame_info (frame_table);\\n\");\n       fprintf (stream, \"\\t}\\n\");\n     }\n "}, {"sha": "92d4ca095fe7fec81ae68168ab5986f1f54b4291", "filename": "gcc/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=6d8ccdbbb20cdff710cd6977165bde1d763f6a40", "patch": "@@ -20,6 +20,9 @@\n /* Whether rindex must be declared even if <stdlib.h> is included.  */\n #undef NEED_DECLARATION_RINDEX\n \n+/* Whether getenv must be declared even if <stdlib.h> is included.  */\n+#undef NEED_DECLARATION_GETENV\n+\n /* Define if you have the ANSI C header files.  */\n #undef STDC_HEADERS\n "}, {"sha": "6fb08a120d2d0056887e1332475b6dcc9b3da591", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=6d8ccdbbb20cdff710cd6977165bde1d763f6a40", "patch": "@@ -1524,8 +1524,9 @@ do {\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n       for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\t\t\\\n \tif ((regs_ever_live[regno] && ! call_used_regs[regno])\t\t\\\n-\t    || (current_function_uses_pic_offset_table\t\t\t\\\n-\t\t&& regno == PIC_OFFSET_TABLE_REGNUM))\t\t\t\\\n+\t    || ((current_function_uses_pic_offset_table\t\t\t\\\n+\t\t || current_function_uses_const_pool)\t\t\t\\\n+\t\t&& flag_pic && regno == PIC_OFFSET_TABLE_REGNUM))\t\\\n \t  offset += 4;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n       (OFFSET) = offset + get_frame_size ();\t\t\t\t\\"}, {"sha": "3f3643f6b8de7897c3d3fca94d117d5ab1b652fc", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=6d8ccdbbb20cdff710cd6977165bde1d763f6a40", "patch": "@@ -142,7 +142,7 @@ __do_global_dtors_aux ()\n     }\n \n #ifdef EH_FRAME_SECTION_ASM_OP\n-  __deregister_frame (__EH_FRAME_BEGIN__);\n+  __deregister_frame_info (__EH_FRAME_BEGIN__);\n #endif\n   completed = 1;\n }\n@@ -162,15 +162,15 @@ fini_dummy ()\n }\n \n #ifdef EH_FRAME_SECTION_ASM_OP\n-/* Stick a call to __register_frame into the .init section.  For some reason\n-   calls with no arguments work more reliably in .init, so stick the call\n-   in another function.  */\n+/* Stick a call to __register_frame_info into the .init section.  For some\n+   reason calls with no arguments work more reliably in .init, so stick the\n+   call in another function.  */\n \n static void\n frame_dummy ()\n {\n   static struct object object;\n-  __register_frame (__EH_FRAME_BEGIN__, &object);\n+  __register_frame_info (__EH_FRAME_BEGIN__, &object);\n }\n \n static void\n@@ -254,7 +254,7 @@ __do_global_dtors ()\n     (*p) ();\n \n #ifdef EH_FRAME_SECTION_ASM_OP\n-  __deregister_frame (__EH_FRAME_BEGIN__);\n+  __deregister_frame_info (__EH_FRAME_BEGIN__);\n #endif\n }\n #endif\n@@ -395,7 +395,7 @@ __do_global_ctors ()\n   func_ptr *p;\n #ifdef EH_FRAME_SECTION_ASM_OP\n   static struct object object;\n-  __register_frame (__EH_FRAME_BEGIN__, &object);\n+  __register_frame_info (__EH_FRAME_BEGIN__, &object);\n #endif\n   for (p = __CTOR_END__ - 1; *p != (func_ptr) -1; p--)\n     (*p) ();"}, {"sha": "e2a591447c0b16a6b57d5149c391874a6ad079ab", "filename": "gcc/except.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=6d8ccdbbb20cdff710cd6977165bde1d763f6a40", "patch": "@@ -97,9 +97,9 @@ Boston, MA 02111-1307, USA.  */\n    On targets that support crtstuff.c, the unwind information\n    is stored in a section named .eh_frame and the information for the\n    entire shared object or program is registered with a call to\n-   __register_frame.  On other targets, the information for each\n+   __register_frame_info.  On other targets, the information for each\n    translation unit is registered from the file generated by collect2.\n-   __register_frame is defined in frame.c, and is responsible for\n+   __register_frame_info is defined in frame.c, and is responsible for\n    recording all of the unwind regions into one list (which is kept in a\n    static variable named unwind_table_list).\n "}, {"sha": "339f3e2b420c37070f8c86607c1ff912b7488294", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=6d8ccdbbb20cdff710cd6977165bde1d763f6a40", "patch": "@@ -5293,7 +5293,7 @@ expand_expr (exp, target, tmode, modifier)\n \ttree placeholder_expr;\n \n \t/* If there is an object on the head of the placeholder list,\n-\t   see if some object in it's references is of type TYPE.  For\n+\t   see if some object in its references is of type TYPE.  For\n \t   further information, see tree.def.  */\n \tfor (placeholder_expr = placeholder_list;\n \t     placeholder_expr != 0;\n@@ -5310,9 +5310,9 @@ expand_expr (exp, target, tmode, modifier)\n \t\t == need_type))\n \t      object = TREE_PURPOSE (placeholder_expr);\n \n-\t    /* Find the innermost reference that is of the type we want.  */\n+\t    /* Find the outermost reference that is of the type we want.  */\n \t    for (elt = TREE_PURPOSE (placeholder_expr);\n-\t\t elt != 0\n+\t\t elt != 0 && object == 0\n \t\t && (TREE_CODE_CLASS (TREE_CODE (elt)) == 'r'\n \t\t     || TREE_CODE_CLASS (TREE_CODE (elt)) == '1'\n \t\t     || TREE_CODE_CLASS (TREE_CODE (elt)) == '2'\n@@ -5323,10 +5323,7 @@ expand_expr (exp, target, tmode, modifier)\n \t      if (TREE_CODE_CLASS (TREE_CODE (elt)) == 'r'\n \t\t  && (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_OPERAND (elt, 0)))\n \t\t      == need_type))\n-\t\t{\n-\t\t  object = TREE_OPERAND (elt, 0);\n-\t\t  break;\n-\t\t}\n+\t\tobject = TREE_OPERAND (elt, 0);\n \n \t    if (object != 0)\n \t      {"}, {"sha": "ca107b081d3b774f7e7102f54587fcc2143d3a7b", "filename": "gcc/frame.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2Fframe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2Fframe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fframe.c?ref=6d8ccdbbb20cdff710cd6977165bde1d763f6a40", "patch": "@@ -512,7 +512,7 @@ execute_cfa_insn (void *p, struct frame_state_internal *state,\n /* Called from crtbegin.o to register the unwind info for an object.  */\n \n void\n-__register_frame (void *begin, struct object *ob)\n+__register_frame_info (void *begin, struct object *ob)\n {\n   ob->fde_begin = begin;\n \n@@ -533,7 +533,7 @@ __register_frame (void *begin, struct object *ob)\n    collect2.  */\n \n void\n-__register_frame_table (void *begin, struct object *ob)\n+__register_frame_info_table (void *begin, struct object *ob)\n {\n   ob->fde_begin = begin;\n   ob->fde_array = begin;\n@@ -552,7 +552,7 @@ __register_frame_table (void *begin, struct object *ob)\n /* Called from crtend.o to deregister the unwind info for an object.  */\n \n void\n-__deregister_frame (void *begin)\n+__deregister_frame_info (void *begin)\n {\n   struct object **p;\n "}, {"sha": "7fa40d7af480ae5f5f9744e61f3051ed7c5e01b1", "filename": "gcc/frame.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2Fframe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2Fframe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fframe.h?ref=6d8ccdbbb20cdff710cd6977165bde1d763f6a40", "patch": "@@ -37,11 +37,16 @@ struct object {\n /* Called either from crtbegin.o or a static constructor to register the\n    unwind info for an object or translation unit, respectively.  */\n \n-extern void __register_frame (void *, struct object *);\n+extern void __register_frame_info (void *, struct object *);\n+\n+/* Similar, but BEGIN is actually a pointer to a table of unwind entries\n+   for different translation units.  Called from the file generated by\n+   collect2.  */\n+extern void __register_frame_info_table (void *, struct object *);\n \n /* Called from crtend.o to deregister the unwind info for an object.  */\n \n-extern void __deregister_frame (void *);\n+extern void __deregister_frame_info (void *);\n \n /* Called from __throw to find the registers to restore for a given\n    PC_TARGET.  The caller should allocate a local variable of `struct"}, {"sha": "2759b80fde082c397ffed052bb323ed09120b83b", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=6d8ccdbbb20cdff710cd6977165bde1d763f6a40", "patch": "@@ -2739,8 +2739,8 @@ purge_addressof_1 (loc, insn, force)\n   else if (code == MEM && GET_CODE (XEXP (x, 0)) == ADDRESSOF && ! force)\n     {\n       rtx sub = XEXP (XEXP (x, 0), 0);\n-      if (GET_CODE (sub) != REG)\n-\tsub = copy_rtx (sub);\n+      if (GET_CODE (sub) == MEM)\n+\tsub = gen_rtx (MEM, GET_MODE (x), copy_rtx (XEXP (sub, 0)));\n       if (GET_CODE (sub) == REG && GET_MODE (x) != GET_MODE (sub))\n \t{\n \t  if (! BYTES_BIG_ENDIAN && ! WORDS_BIG_ENDIAN)"}, {"sha": "b2545a2ace7475675fb0c85657f3e3e269c89815", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=6d8ccdbbb20cdff710cd6977165bde1d763f6a40", "patch": "@@ -884,17 +884,19 @@ remove_dependence (insn, elem)\n   rtx prev, link;\n   int found = 0;\n \n-  for (prev = 0, link = LOG_LINKS (insn); link;\n-       prev = link, link = XEXP (link, 1))\n+  for (prev = 0, link = LOG_LINKS (insn); link; link = XEXP (link, 1))\n     {\n       if (XEXP (link, 0) == elem)\n \t{\n+\t  RTX_INTEGRATED_P (link) = 1;\n \t  if (prev)\n \t    XEXP (prev, 1) = XEXP (link, 1);\n \t  else\n \t    LOG_LINKS (insn) = XEXP (link, 1);\n \t  found = 1;\n \t}\n+      else\n+\tprev = link;\n     }\n \n   if (!found)\n@@ -3210,6 +3212,9 @@ priority (insn)\n \t    rtx next;\n \t    int next_priority;\n \n+\t    if (RTX_INTEGRATED_P (link))\n+\t      continue;\n+\n \t    next = XEXP (link, 0);\n \n \t    /* critical path is meaningful in block boundaries only */"}, {"sha": "b879850d4036be3d8203edf530f2047042a70783", "filename": "gcc/install.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finstall.texi?ref=6d8ccdbbb20cdff710cd6977165bde1d763f6a40", "patch": "@@ -191,7 +191,7 @@ will print out whether the Haifa scheduler is enabled when it is run.\n \n @cindex Objective C threads\n @cindex threads, Objective C\n-@item --enable-objcthreads=@var{type}\n+@item --enable-threads=@var{type}\n Certain systems, notably Linux-based GNU systems, can't be relied on to\n supply a threads facility for the Objective C runtime and so will\n default to single-threaded runtime.  They may, however, have a library"}, {"sha": "7f1ac4021eb8f7b7f4a00c65eff3f86b226a458e", "filename": "gcc/pexecute.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2Fpexecute.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2Fpexecute.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpexecute.c?ref=6d8ccdbbb20cdff710cd6977165bde1d763f6a40", "patch": "@@ -236,7 +236,7 @@ extern int _spawnvp ();\n /* This is a kludge to get around the Microsoft C spawn functions' propensity\n    to remove the outermost set of double quotes from all arguments.  */\n \n-const char * const *\n+char * const *\n fix_argv (argvec)\n      char **argvec;\n {\n@@ -267,7 +267,7 @@ fix_argv (argvec)\n         argvec[i] = temp;\n       }\n \n-  return (const char * const *) argvec;\n+  return (char * const *) argvec;\n }\n \n #endif /* ! defined (__CYGWIN32__) */\n@@ -278,15 +278,16 @@ pexecute (program, argv, this_pname, temp_base, errmsg_fmt, errmsg_arg, flags)\n      char * const *argv;\n      const char *this_pname;\n      const char *temp_base;\n-     char **errmsg_fmt, **errmsg_arg;\n+     char **errmsg_fmt;\n+     const char **errmsg_arg;\n      int flags;\n {\n   int pid;\n \n   if ((flags & PEXECUTE_ONE) != PEXECUTE_ONE)\n     abort ();\n   pid = (flags & PEXECUTE_SEARCH ? _spawnvp : _spawnv)\n-    (_P_NOWAIT, program, fix_argv(argv));\n+    (_P_NOWAIT, program, fix_argv (argv));\n   if (pid == -1)\n     {\n       *errmsg_fmt = install_error_msg;"}, {"sha": "b7aa75de1eb1c9912ff965958630646abcf5b0b5", "filename": "gcc/sched.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2Fsched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8ccdbbb20cdff710cd6977165bde1d763f6a40/gcc%2Fsched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched.c?ref=6d8ccdbbb20cdff710cd6977165bde1d763f6a40", "patch": "@@ -431,17 +431,19 @@ remove_dependence (insn, elem)\n   rtx prev, link;\n   int found = 0;\n \n-  for (prev = 0, link = LOG_LINKS (insn); link;\n-       prev = link, link = XEXP (link, 1))\n+  for (prev = 0, link = LOG_LINKS (insn); link; link = XEXP (link, 1))\n     {\n       if (XEXP (link, 0) == elem)\n \t{\n+\t  RTX_INTEGRATED_P (link) = 1;\n \t  if (prev)\n \t    XEXP (prev, 1) = XEXP (link, 1);\n \t  else\n \t    LOG_LINKS (insn) = XEXP (link, 1);\n \t  found = 1;\n \t}\n+      else\n+\tprev = link;\n     }\n \n   if (! found)\n@@ -919,6 +921,11 @@ priority (insn)\n \t{\n \t  rtx x = XEXP (prev, 0);\n \n+\t  /* If this was a duplicate of a dependence we already deleted,\n+\t     ignore it.  */\n+\t  if (RTX_INTEGRATED_P (prev))\n+\t    continue;\n+\n \t  /* A dependence pointing to a note or deleted insn is always\n \t     obsolete, because sched_analyze_insn will have created any\n \t     necessary new dependences which replace it.  Notes and deleted"}]}