{"sha": "36e57e16d9d4e0e797154b87c6bb2e981982dbc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZlNTdlMTZkOWQ0ZTBlNzk3MTU0Yjg3YzZiYjJlOTgxOTgyZGJjNQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2012-04-16T16:04:45Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2012-04-16T16:04:45Z"}, "message": "tree-sra.c (build_ref_for_model): Create COMPONENT_REFs only for bit-fields.\n\n2012-04-16  Martin Jambor  <mjambor@suse.cz>\n\n\t* tree-sra.c (build_ref_for_model): Create COMPONENT_REFs only for\n\tbit-fields.\n\nFrom-SVN: r186501", "tree": {"sha": "4ef44cc3e760b65794e2ffab8168c26b6b45066d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ef44cc3e760b65794e2ffab8168c26b6b45066d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36e57e16d9d4e0e797154b87c6bb2e981982dbc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36e57e16d9d4e0e797154b87c6bb2e981982dbc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36e57e16d9d4e0e797154b87c6bb2e981982dbc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36e57e16d9d4e0e797154b87c6bb2e981982dbc5/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "051b40ff6b44e7bfc6518db84ca56ccc10f95f57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/051b40ff6b44e7bfc6518db84ca56ccc10f95f57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/051b40ff6b44e7bfc6518db84ca56ccc10f95f57"}], "stats": {"total": 77, "additions": 22, "deletions": 55}, "files": [{"sha": "914e9bbc6e929639911a6283c42dd4a244658da6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e57e16d9d4e0e797154b87c6bb2e981982dbc5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e57e16d9d4e0e797154b87c6bb2e981982dbc5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36e57e16d9d4e0e797154b87c6bb2e981982dbc5", "patch": "@@ -1,3 +1,8 @@\n+2012-04-16  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* tree-sra.c (build_ref_for_model): Create COMPONENT_REFs only for\n+\tbit-fields.\n+\n 2012-04-16  Ulrich Weigand  <ulrich.weigand@linaro.org>\n \n \tPR target/51819"}, {"sha": "e69f3ac5918cfdc1379dfd2fbd32759323007190", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 17, "deletions": 55, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e57e16d9d4e0e797154b87c6bb2e981982dbc5/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e57e16d9d4e0e797154b87c6bb2e981982dbc5/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=36e57e16d9d4e0e797154b87c6bb2e981982dbc5", "patch": "@@ -1489,70 +1489,32 @@ build_ref_for_offset (location_t loc, tree base, HOST_WIDE_INT offset,\n   return fold_build2_loc (loc, MEM_REF, exp_type, base, off);\n }\n \n-DEF_VEC_ALLOC_P_STACK (tree);\n-#define VEC_tree_stack_alloc(alloc) VEC_stack_alloc (tree, alloc)\n-\n /* Construct a memory reference to a part of an aggregate BASE at the given\n-   OFFSET and of the type of MODEL.  In case this is a chain of references\n-   to component, the function will replicate the chain of COMPONENT_REFs of\n-   the expression of MODEL to access it.  GSI and INSERT_AFTER have the same\n-   meaning as in build_ref_for_offset.  */\n+   OFFSET and of the same type as MODEL.  In case this is a reference to a\n+   bit-field, the function will replicate the last component_ref of model's\n+   expr to access it.  GSI and INSERT_AFTER have the same meaning as in\n+   build_ref_for_offset.  */\n \n static tree\n build_ref_for_model (location_t loc, tree base, HOST_WIDE_INT offset,\n \t\t     struct access *model, gimple_stmt_iterator *gsi,\n \t\t     bool insert_after)\n {\n-  tree type = model->type, t;\n-  VEC(tree,stack) *cr_stack = NULL;\n-\n-  if (TREE_CODE (model->expr) == COMPONENT_REF)\n-    {\n-      tree expr = model->expr;\n-\n-      /* Create a stack of the COMPONENT_REFs so later we can walk them in\n-\t order from inner to outer.  */\n-      cr_stack = VEC_alloc (tree, stack, 6);\n-\n-      do {\n-\ttree field = TREE_OPERAND (expr, 1);\n-\ttree cr_offset = component_ref_field_offset (expr);\n-\tHOST_WIDE_INT bit_pos\n-\t  = tree_low_cst (cr_offset, 1) * BITS_PER_UNIT\n-\t      + TREE_INT_CST_LOW (DECL_FIELD_BIT_OFFSET (field));\n-\n-\t/* We can be called with a model different from the one associated\n-\t   with BASE so we need to avoid going up the chain too far.  */\n-\tif (offset - bit_pos < 0)\n-\t  break;\n-\n-\toffset -= bit_pos;\n-\tVEC_safe_push (tree, stack, cr_stack, expr);\n-\n-\texpr = TREE_OPERAND (expr, 0);\n-\ttype = TREE_TYPE (expr);\n-      } while (TREE_CODE (expr) == COMPONENT_REF);\n-    }\n-\n-  t = build_ref_for_offset (loc, base, offset, type, gsi, insert_after);\n-\n-  if (TREE_CODE (model->expr) == COMPONENT_REF)\n+  if (TREE_CODE (model->expr) == COMPONENT_REF\n+      && DECL_BIT_FIELD (TREE_OPERAND (model->expr, 1)))\n     {\n-      unsigned i;\n-      tree expr;\n-\n-      /* Now replicate the chain of COMPONENT_REFs from inner to outer.  */\n-      FOR_EACH_VEC_ELT_REVERSE (tree, cr_stack, i, expr)\n-\t{\n-\t  tree field = TREE_OPERAND (expr, 1);\n-\t  t = fold_build3_loc (loc, COMPONENT_REF, TREE_TYPE (field), t, field,\n-\t\t\t       TREE_OPERAND (expr, 2));\n-\t}\n-\n-      VEC_free (tree, stack, cr_stack);\n+      /* This access represents a bit-field.  */\n+      tree t, exp_type, fld = TREE_OPERAND (model->expr, 1);\n+\n+      offset -= int_bit_position (fld);\n+      exp_type = TREE_TYPE (TREE_OPERAND (model->expr, 0));\n+      t = build_ref_for_offset (loc, base, offset, exp_type, gsi, insert_after);\n+      return fold_build3_loc (loc, COMPONENT_REF, TREE_TYPE (fld), t, fld,\n+\t\t\t      NULL_TREE);\n     }\n-\n-  return t;\n+  else\n+    return build_ref_for_offset (loc, base, offset, model->type,\n+\t\t\t\t gsi, insert_after);\n }\n \n /* Construct a memory reference consisting of component_refs and array_refs to"}]}