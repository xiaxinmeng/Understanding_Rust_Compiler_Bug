{"sha": "5f754896d3ba9d28ba6bf94923e5e1564cbf4e36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY3NTQ4OTZkM2JhOWQyOGJhNmJmOTQ5MjNlNWUxNTY0Y2JmNGUzNg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-07-25T18:14:57Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-07-25T18:14:57Z"}, "message": "c-lex.c (c_lex_with_flags, lex_string): Constify.\n\n\t* c-lex.c (c_lex_with_flags, lex_string): Constify.\n\t* c-ppoutput.c (print_line, pp_dir_change): Likewise.\n\t* c-typeck.c (free_all_tagged_tu_seen_up_to): Likewise.\n\t* cfg.c (bb_copy_original_hash, bb_copy_original_eq): Likewise.\n\t* cfgloop.c (loop_exit_hash, loop_exit_eq): Likewise.\n\t* ddg.c (compare_sccs): Likewise.\n\t* df-scan.c (df_ref_compare, df_mw_compare): Likewise.\n\t* dfp.c (decimal_real_from_string, decimal_to_decnumber,\n\tdecimal_to_binary, decimal_do_compare, decimal_real_to_decimal,\n\tdecimal_do_fix_trunc, decimal_real_to_integer,\n\tdecimal_real_to_integer2, decimal_real_maxval): Likewise.\n\t* dse.c (const_group_info_t): New.\n\t(invariant_group_base_eq, invariant_group_base_hash): Constify.\n\t* dwarf2out.c (const_dw_die_ref): New.\n\t(decl_die_table_hash, decl_die_table_eq, file_info_cmp): Constify.\n\t* tree-browser.c (TB_parent_eq): Likewise.\n\t* unwind-dw2-fde.c (__register_frame_info_bases,\n\t__deregister_frame_info_bases, fde_unencoded_compare, fde_split,\n\tadd_fdes, linear_search_fdes, binary_search_unencoded_fdes):\n\tLikewise.\n\t* unwind-dw2-fde.h (get_cie, next_fde): Likewise.\n\t* unwind-dw2.c (uw_frame_state_for): Likewise.\n\t* value-prof.c (histogram_hash, histogram_eq): Likewise.\n\t* value-prof.h (const_histogram_value): New.\n\nFrom-SVN: r126920", "tree": {"sha": "91c0ebb0129c4f641a66d0cade0a407bc339ef78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91c0ebb0129c4f641a66d0cade0a407bc339ef78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/comments", "author": null, "committer": null, "parents": [{"sha": "d6076cee31d17b12ff898b4084a4184e646dbfc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6076cee31d17b12ff898b4084a4184e646dbfc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6076cee31d17b12ff898b4084a4184e646dbfc3"}], "stats": {"total": 184, "additions": 105, "deletions": 79}, "files": [{"sha": "9d176594f1555c7c0dd613c8a9b869d321f68863", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f754896d3ba9d28ba6bf94923e5e1564cbf4e36", "patch": "@@ -1,3 +1,30 @@\n+2007-07-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c-lex.c (c_lex_with_flags, lex_string): Constify.\n+\t* c-ppoutput.c (print_line, pp_dir_change): Likewise.\n+\t* c-typeck.c (free_all_tagged_tu_seen_up_to): Likewise.\n+\t* cfg.c (bb_copy_original_hash, bb_copy_original_eq): Likewise.\n+\t* cfgloop.c (loop_exit_hash, loop_exit_eq): Likewise.\n+\t* ddg.c (compare_sccs): Likewise.\n+\t* df-scan.c (df_ref_compare, df_mw_compare): Likewise.\n+\t* dfp.c (decimal_real_from_string, decimal_to_decnumber,\n+\tdecimal_to_binary, decimal_do_compare, decimal_real_to_decimal,\n+\tdecimal_do_fix_trunc, decimal_real_to_integer,\n+\tdecimal_real_to_integer2, decimal_real_maxval): Likewise.\n+\t* dse.c (const_group_info_t): New.\n+\t(invariant_group_base_eq, invariant_group_base_hash): Constify.\n+\t* dwarf2out.c (const_dw_die_ref): New.\n+\t(decl_die_table_hash, decl_die_table_eq, file_info_cmp): Constify.\n+\t* tree-browser.c (TB_parent_eq): Likewise.\n+\t* unwind-dw2-fde.c (__register_frame_info_bases,\n+\t__deregister_frame_info_bases, fde_unencoded_compare, fde_split,\n+\tadd_fdes, linear_search_fdes, binary_search_unencoded_fdes):\n+\tLikewise.\n+\t* unwind-dw2-fde.h (get_cie, next_fde): Likewise.\n+\t* unwind-dw2.c (uw_frame_state_for): Likewise.\n+\t* value-prof.c (histogram_hash, histogram_eq): Likewise.\n+\t* value-prof.h (const_histogram_value): New.\n+\n 2007-07-25  Richard Sandiford  <richard@codesourcery.com>\n \n \t* config/mips/mips.c (machine_function): Add"}, {"sha": "28b5d98a5bc90c0bc9d76ec3f6498a85b14cb18d", "filename": "gcc/c-lex.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=5f754896d3ba9d28ba6bf94923e5e1564cbf4e36", "patch": "@@ -460,7 +460,7 @@ c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags)\n \t  type = lex_string (tok, value, false);\n \t  break;\n \t}\n-      *value = build_string (tok->val.str.len, (char *) tok->val.str.text);\n+      *value = build_string (tok->val.str.len, (const char *) tok->val.str.text);\n       break;\n       \n     case CPP_PRAGMA:\n@@ -811,7 +811,7 @@ lex_string (const cpp_token *tok, tree *valp, bool objc_string)\n        ? cpp_interpret_string : cpp_interpret_string_notranslate)\n       (parse_in, strs, concats + 1, &istr, wide))\n     {\n-      value = build_string (istr.len, (char *) istr.text);\n+      value = build_string (istr.len, (const char *) istr.text);\n       free ((void *) istr.text);\n \n       if (c_lex_string_translate == -1)\n@@ -824,13 +824,13 @@ lex_string (const cpp_token *tok, tree *valp, bool objc_string)\n \t  gcc_assert (xlated);\n \n \t  if (TREE_STRING_LENGTH (value) != (int) istr.len\n-\t      || 0 != strncmp (TREE_STRING_POINTER (value), (char *) istr.text,\n-\t\t\t       istr.len))\n+\t      || 0 != strncmp (TREE_STRING_POINTER (value),\n+\t\t\t       (const char *) istr.text, istr.len))\n \t    {\n \t      /* Arrange for us to return the untranslated string in\n \t\t *valp, but to set up the C type of the translated\n \t\t one.  */\n-\t      *valp = build_string (istr.len, (char *) istr.text);\n+\t      *valp = build_string (istr.len, (const char *) istr.text);\n \t      valp = &TREE_CHAIN (*valp);\n \t    }\n \t  free ((void *) istr.text);"}, {"sha": "50c3386edaf5d5a62e439682a2190dd1ce213a6c", "filename": "gcc/c-ppoutput.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-ppoutput.c?ref=5f754896d3ba9d28ba6bf94923e5e1564cbf4e36", "patch": "@@ -255,7 +255,7 @@ print_line (source_location src_loc, const char *special_flags)\n       /* cpp_quote_string does not nul-terminate, so we have to do it\n \t ourselves.  */\n       p = cpp_quote_string (to_file_quoted,\n-\t\t\t    (unsigned char *) map->to_file, to_file_len);\n+\t\t\t    (const unsigned char *) map->to_file, to_file_len);\n       *p = '\\0';\n       fprintf (print.outf, \"# %u \\\"%s\\\"%s\",\n \t       print.src_line == 0 ? 1 : print.src_line,\n@@ -375,7 +375,7 @@ pp_dir_change (cpp_reader *pfile ATTRIBUTE_UNUSED, const char *dir)\n   unsigned char *p;\n \n   /* cpp_quote_string does not nul-terminate, so we have to do it ourselves.  */\n-  p = cpp_quote_string (to_file_quoted, (unsigned char *) dir, to_file_len);\n+  p = cpp_quote_string (to_file_quoted, (const unsigned char *) dir, to_file_len);\n   *p = '\\0';\n   fprintf (print.outf, \"# 1 \\\"%s//\\\"\\n\", to_file_quoted);\n }"}, {"sha": "f4b5560eed3175b899dd0de9193fae65823269b3", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=5f754896d3ba9d28ba6bf94923e5e1564cbf4e36", "patch": "@@ -1024,9 +1024,10 @@ free_all_tagged_tu_seen_up_to (const struct tagged_tu_seen_cache *tu_til)\n   const struct tagged_tu_seen_cache *tu = tagged_tu_seen_base;\n   while (tu != tu_til)\n     {\n-      struct tagged_tu_seen_cache *tu1 = (struct tagged_tu_seen_cache*)tu;\n+      const struct tagged_tu_seen_cache *tu1\n+\t= (const struct tagged_tu_seen_cache*)tu;\n       tu = tu1->next;\n-      free (tu1);\n+      free ((void *)tu1);\n     }\n   tagged_tu_seen_base = tu_til;\n }"}, {"sha": "2b8fe3c2da6d98b14cca76a325848385ec7b11f9", "filename": "gcc/cfg.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=5f754896d3ba9d28ba6bf94923e5e1564cbf4e36", "patch": "@@ -1107,18 +1107,18 @@ struct htab_bb_copy_original_entry\n static hashval_t\n bb_copy_original_hash (const void *p)\n {\n-  struct htab_bb_copy_original_entry *data\n-    = ((struct htab_bb_copy_original_entry *)p);\n+  const struct htab_bb_copy_original_entry *data\n+    = ((const struct htab_bb_copy_original_entry *)p);\n \n   return data->index1;\n }\n static int\n bb_copy_original_eq (const void *p, const void *q)\n {\n-  struct htab_bb_copy_original_entry *data\n-    = ((struct htab_bb_copy_original_entry *)p);\n-  struct htab_bb_copy_original_entry *data2\n-    = ((struct htab_bb_copy_original_entry *)q);\n+  const struct htab_bb_copy_original_entry *data\n+    = ((const struct htab_bb_copy_original_entry *)p);\n+  const struct htab_bb_copy_original_entry *data2\n+    = ((const struct htab_bb_copy_original_entry *)q);\n \n   return data->index1 == data2->index1;\n }"}, {"sha": "48ba9bd8c6ca5c6f33fdecbbd5e5e0a3319707cf", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=5f754896d3ba9d28ba6bf94923e5e1564cbf4e36", "patch": "@@ -942,7 +942,7 @@ get_loop_body_in_bfs_order (const struct loop *loop)\n static hashval_t\n loop_exit_hash (const void *ex)\n {\n-  struct loop_exit *exit = (struct loop_exit *) ex;\n+  const struct loop_exit *const exit = (const struct loop_exit *) ex;\n \n   return htab_hash_pointer (exit->e);\n }\n@@ -952,7 +952,7 @@ loop_exit_hash (const void *ex)\n static int\n loop_exit_eq (const void *ex, const void *e)\n {\n-  struct loop_exit *exit = (struct loop_exit *) ex;\n+  const struct loop_exit *const exit = (const struct loop_exit *) ex;\n \n   return exit->e == e;\n }"}, {"sha": "fa70f2fc782d8b1f60a0d8fc894f656b872e27e2", "filename": "gcc/ddg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Fddg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Fddg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fddg.c?ref=5f754896d3ba9d28ba6bf94923e5e1564cbf4e36", "patch": "@@ -856,8 +856,8 @@ find_predecessors (sbitmap preds, ddg_ptr g, sbitmap ops)\n static int\n compare_sccs (const void *s1, const void *s2)\n {\n-  int rec_l1 = (*(ddg_scc_ptr *)s1)->recurrence_length;\n-  int rec_l2 = (*(ddg_scc_ptr *)s2)->recurrence_length; \n+  const int rec_l1 = (*(const ddg_scc_ptr *)s1)->recurrence_length;\n+  const int rec_l2 = (*(const ddg_scc_ptr *)s2)->recurrence_length; \n   return ((rec_l2 > rec_l1) - (rec_l2 < rec_l1));\n \t  \n }"}, {"sha": "0f2bf6089599ca2323c72675dd29fa375be7ee6a", "filename": "gcc/df-scan.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=5f754896d3ba9d28ba6bf94923e5e1564cbf4e36", "patch": "@@ -2148,8 +2148,8 @@ df_ref_equal_p (struct df_ref *ref1, struct df_ref *ref2)\n static int\n df_ref_compare (const void *r1, const void *r2)\n {\n-  const struct df_ref *ref1 = *(struct df_ref **)r1;\n-  const struct df_ref *ref2 = *(struct df_ref **)r2;\n+  const struct df_ref *const ref1 = *(const struct df_ref *const*)r1;\n+  const struct df_ref *const ref2 = *(const struct df_ref *const*)r2;\n \n   if (ref1 == ref2)\n     return 0;\n@@ -2265,8 +2265,8 @@ df_mw_equal_p (struct df_mw_hardreg *mw1, struct df_mw_hardreg *mw2)\n static int\n df_mw_compare (const void *m1, const void *m2)\n {\n-  const struct df_mw_hardreg *mw1 = *(struct df_mw_hardreg **)m1;\n-  const struct df_mw_hardreg *mw2 = *(struct df_mw_hardreg **)m2;\n+  const struct df_mw_hardreg *const mw1 = *(const struct df_mw_hardreg *const*)m1;\n+  const struct df_mw_hardreg *const mw2 = *(const struct df_mw_hardreg *const*)m2;\n \n   if (mw1 == mw2)\n     return 0;"}, {"sha": "ac8625edb626c5db17d112b13c0a46899d94c88a", "filename": "gcc/dfp.c", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Fdfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Fdfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdfp.c?ref=5f754896d3ba9d28ba6bf94923e5e1564cbf4e36", "patch": "@@ -96,7 +96,7 @@ decimal_real_from_string (REAL_VALUE_TYPE *r, const char *s)\n   decContextDefault (&set, DEC_INIT_DECIMAL128);\n   set.traps = 0;\n \n-  decNumberFromString (&dn, (char *) s, &set);\n+  decNumberFromString (&dn, s, &set);\n \n   /* It would be more efficient to store directly in decNumber format,\n      but that is impractical from current data structure size.\n@@ -119,17 +119,17 @@ decimal_to_decnumber (const REAL_VALUE_TYPE *r, decNumber *dn)\n       decNumberZero (dn);\n       break;\n     case rvc_inf:\n-      decNumberFromString (dn, (char *)\"Infinity\", &set);\n+      decNumberFromString (dn, \"Infinity\", &set);\n       break;\n     case rvc_nan:\n       if (r->signalling)\n-        decNumberFromString (dn, (char *)\"snan\", &set);\n+        decNumberFromString (dn, \"snan\", &set);\n       else\n-        decNumberFromString (dn, (char *)\"nan\", &set);\n+        decNumberFromString (dn, \"nan\", &set);\n       break;\n     case rvc_normal:\n       gcc_assert (r->decimal);\n-      decimal128ToNumber ((decimal128 *) r->sig, dn);\n+      decimal128ToNumber ((const decimal128 *) r->sig, dn);\n       break;\n     default:\n       gcc_unreachable ();\n@@ -312,8 +312,7 @@ decimal_to_binary (REAL_VALUE_TYPE *to, const REAL_VALUE_TYPE *from,\n \t\t   enum machine_mode mode)\n {\n   char string[256];\n-  decimal128 *d128;\n-  d128 = (decimal128 *) from->sig;\n+  const decimal128 *const d128 = (const decimal128 *) from->sig;\n \n   decimal128ToString (d128, string);\n   real_from_string3 (to, string, mode);\n@@ -360,8 +359,8 @@ decimal_do_compare (const REAL_VALUE_TYPE *a, const REAL_VALUE_TYPE *b,\n   /* Convert into decNumber form for comparison operation.  */\n   decContextDefault (&set, DEC_INIT_DECIMAL128);\n   set.traps = 0;  \n-  decimal128ToNumber ((decimal128 *) a->sig, &dn2);\n-  decimal128ToNumber ((decimal128 *) b->sig, &dn3);\n+  decimal128ToNumber ((const decimal128 *) a->sig, &dn2);\n+  decimal128ToNumber ((const decimal128 *) b->sig, &dn3);\n \n   /* Finally, do the comparison.  */\n   decNumberCompare (&dn, &dn2, &dn3, &set);\n@@ -451,7 +450,7 @@ decimal_real_to_decimal (char *str, const REAL_VALUE_TYPE *r_orig,\n \t\t\t size_t digits ATTRIBUTE_UNUSED,\n \t\t\t int crop_trailing_zeros ATTRIBUTE_UNUSED)\n {\n-  decimal128 *d128 = (decimal128*) r_orig->sig;\n+  const decimal128 *const d128 = (const decimal128*) r_orig->sig;\n \n   /* decimal128ToString requires space for at least 24 characters;\n      Require two more for suffix.  */\n@@ -540,7 +539,7 @@ decimal_do_fix_trunc (REAL_VALUE_TYPE *r, const REAL_VALUE_TYPE *a)\n   decContextDefault (&set, DEC_INIT_DECIMAL128);\n   set.traps = 0;\n   set.round = DEC_ROUND_DOWN;\n-  decimal128ToNumber ((decimal128 *) a->sig, &dn2);\n+  decimal128ToNumber ((const decimal128 *) a->sig, &dn2);\n \n   decNumberToIntegralValue (&dn, &dn2, &set);\n   decimal_from_decnumber (r, &dn, &set);\n@@ -559,7 +558,7 @@ decimal_real_to_integer (const REAL_VALUE_TYPE *r)\n   decContextDefault (&set, DEC_INIT_DECIMAL128);\n   set.traps = 0;\n   set.round = DEC_ROUND_DOWN;\n-  decimal128ToNumber ((decimal128 *) r->sig, &dn);\n+  decimal128ToNumber ((const decimal128 *) r->sig, &dn);\n \n   decNumberToIntegralValue (&dn2, &dn, &set);\n   decNumberZero (&dn3);\n@@ -586,7 +585,7 @@ decimal_real_to_integer2 (HOST_WIDE_INT *plow, HOST_WIDE_INT *phigh,\n   decContextDefault (&set, DEC_INIT_DECIMAL128);\n   set.traps = 0;\n   set.round = DEC_ROUND_DOWN;\n-  decimal128ToNumber ((decimal128 *) r->sig, &dn);\n+  decimal128ToNumber ((const decimal128 *) r->sig, &dn);\n \n   decNumberToIntegralValue (&dn2, &dn, &set);\n   decNumberZero (&dn3);\n@@ -689,18 +688,18 @@ decimal_real_arithmetic (REAL_VALUE_TYPE *r, enum tree_code code,\n void\n decimal_real_maxval (REAL_VALUE_TYPE *r, int sign, enum machine_mode mode)\n { \n-  char *max;\n+  const char *max;\n \n   switch (mode)\n     {\n     case SDmode:\n-      max = (char *) \"9.999999E96\";\n+      max = \"9.999999E96\";\n       break;\n     case DDmode:\n-      max = (char *) \"9.999999999999999E384\";\n+      max = \"9.999999999999999E384\";\n       break;\n     case TDmode:\n-      max = (char *) \"9.999999999999999999999999999999999E6144\";\n+      max = \"9.999999999999999999999999999999999E6144\";\n       break;\n     default:\n       gcc_unreachable ();"}, {"sha": "3839f9472698c8baf42867aaaa16c55d230c2e78", "filename": "gcc/dse.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=5f754896d3ba9d28ba6bf94923e5e1564cbf4e36", "patch": "@@ -441,6 +441,7 @@ struct group_info\n   int offset_map_size_n, offset_map_size_p; \n };\n typedef struct group_info *group_info_t;\n+typedef const struct group_info *const_group_info_t;\n static alloc_pool rtx_group_info_pool;\n \n /* Tables of group_info structures, hashed by base value.  */\n@@ -575,16 +576,16 @@ clear_alias_set_lookup (HOST_WIDE_INT alias_set)\n static int\n invariant_group_base_eq (const void *p1, const void *p2)\n {\n-  const group_info_t gi1 = (const group_info_t) p1;\n-  const group_info_t gi2 = (const group_info_t) p2;\n+  const_group_info_t gi1 = (const_group_info_t) p1;\n+  const_group_info_t gi2 = (const_group_info_t) p2;\n   return rtx_equal_p (gi1->rtx_base, gi2->rtx_base);\n }\n \n \n static hashval_t\n invariant_group_base_hash (const void *p)\n {\n-  const group_info_t gi = (const group_info_t) p;\n+  const_group_info_t gi = (const_group_info_t) p;\n   int do_not_record;\n   return hash_rtx (gi->rtx_base, Pmode, &do_not_record, NULL, false);\n }"}, {"sha": "5b67962e515e3c0eee68b9c93677dfd44b88f94c", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=5f754896d3ba9d28ba6bf94923e5e1564cbf4e36", "patch": "@@ -2700,6 +2700,7 @@ struct dwarf_file_data GTY(())\n \n typedef struct dw_val_struct *dw_val_ref;\n typedef struct die_struct *dw_die_ref;\n+typedef const struct die_struct *const_dw_die_ref;\n typedef struct dw_loc_descr_struct *dw_loc_descr_ref;\n typedef struct dw_loc_list_struct *dw_loc_list_ref;\n \n@@ -5685,15 +5686,15 @@ equate_type_number_to_die (tree type, dw_die_ref type_die)\n static hashval_t\n decl_die_table_hash (const void *x)\n {\n-  return (hashval_t) ((const dw_die_ref) x)->decl_id;\n+  return (hashval_t) ((const_dw_die_ref) x)->decl_id;\n }\n \n /* Return nonzero if decl_id of die_struct X is the same as UID of decl *Y.  */\n \n static int\n decl_die_table_eq (const void *x, const void *y)\n {\n-  return (((const dw_die_ref) x)->decl_id == DECL_UID ((const tree) y));\n+  return (((const_dw_die_ref) x)->decl_id == DECL_UID ((const tree) y));\n }\n \n /* Return the DIE associated with a given declaration.  */\n@@ -7778,8 +7779,8 @@ file_info_cmp (const void *p1, const void *p2)\n {\n   const struct file_info *s1 = p1;\n   const struct file_info *s2 = p2;\n-  unsigned char *cp1;\n-  unsigned char *cp2;\n+  const unsigned char *cp1;\n+  const unsigned char *cp2;\n \n   /* Take care of file names without directories.  We need to make sure that\n      we return consistent values to qsort since some will get confused if\n@@ -7789,18 +7790,18 @@ file_info_cmp (const void *p1, const void *p2)\n   if ((s1->path == s1->fname || s2->path == s2->fname))\n     return (s2->path == s2->fname) - (s1->path == s1->fname);\n \n-  cp1 = (unsigned char *) s1->path;\n-  cp2 = (unsigned char *) s2->path;\n+  cp1 = (const unsigned char *) s1->path;\n+  cp2 = (const unsigned char *) s2->path;\n \n   while (1)\n     {\n       ++cp1;\n       ++cp2;\n       /* Reached the end of the first path?  If so, handle like above.  */\n-      if ((cp1 == (unsigned char *) s1->fname)\n-\t  || (cp2 == (unsigned char *) s2->fname))\n-\treturn ((cp2 == (unsigned char *) s2->fname)\n-\t\t- (cp1 == (unsigned char *) s1->fname));\n+      if ((cp1 == (const unsigned char *) s1->fname)\n+\t  || (cp2 == (const unsigned char *) s2->fname))\n+\treturn ((cp2 == (const unsigned char *) s2->fname)\n+\t\t- (cp1 == (const unsigned char *) s1->fname));\n \n       /* Character of current path component the same?  */\n       else if (*cp1 != *cp2)"}, {"sha": "354757000c450cb025d0fb19f7d565a91d478e94", "filename": "gcc/tree-browser.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Ftree-browser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Ftree-browser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-browser.c?ref=5f754896d3ba9d28ba6bf94923e5e1564cbf4e36", "patch": "@@ -751,9 +751,8 @@ store_child_info (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED,\n static int\n TB_parent_eq (const void *p1, const void *p2)\n {\n-  tree node, parent;\n-  node = (tree) p2;\n-  parent = (tree) p1;\n+  const_tree node = (const_tree)p2;\n+  tree parent = (tree) p1;\n \n   if (p1 == NULL || p2 == NULL)\n     return 0;"}, {"sha": "d5dcad71554e126bed8f68e40818b453867bac71", "filename": "gcc/unwind-dw2-fde.c", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Funwind-dw2-fde.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Funwind-dw2-fde.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2-fde.c?ref=5f754896d3ba9d28ba6bf94923e5e1564cbf4e36", "patch": "@@ -79,7 +79,7 @@ __register_frame_info_bases (const void *begin, struct object *ob,\n \t\t\t     void *tbase, void *dbase)\n {\n   /* If .eh_frame is empty, don't register at all.  */\n-  if ((uword *) begin == 0 || *(uword *) begin == 0)\n+  if ((const uword *) begin == 0 || *(const uword *) begin == 0)\n     return;\n \n   ob->pc_begin = (void *)-1;\n@@ -177,7 +177,7 @@ __deregister_frame_info_bases (const void *begin)\n   struct object *ob = 0;\n \n   /* If .eh_frame is empty, we haven't registered.  */\n-  if ((uword *) begin == 0 || *(uword *) begin == 0)\n+  if ((const uword *) begin == 0 || *(const uword *) begin == 0)\n     return ob;\n \n   init_object_mutex_once ();\n@@ -323,8 +323,8 @@ static int\n fde_unencoded_compare (struct object *ob __attribute__((unused)),\n \t\t       const fde *x, const fde *y)\n {\n-  _Unwind_Ptr x_ptr = *(_Unwind_Ptr *) x->pc_begin;\n-  _Unwind_Ptr y_ptr = *(_Unwind_Ptr *) y->pc_begin;\n+  const _Unwind_Ptr x_ptr = *(const _Unwind_Ptr *) x->pc_begin;\n+  const _Unwind_Ptr y_ptr = *(const _Unwind_Ptr *) y->pc_begin;\n \n   if (x_ptr > y_ptr)\n     return 1;\n@@ -434,7 +434,7 @@ fde_split (struct object *ob, fde_compare_t fde_compare,\n {\n   static const fde *marker;\n   size_t count = linear->count;\n-  const fde **chain_end = &marker;\n+  const fde *const *chain_end = &marker;\n   size_t i, j, k;\n \n   /* This should optimize out, but it is wise to make sure this assumption\n@@ -444,13 +444,13 @@ fde_split (struct object *ob, fde_compare_t fde_compare,\n \n   for (i = 0; i < count; i++)\n     {\n-      const fde **probe;\n+      const fde *const *probe;\n \n       for (probe = chain_end;\n \t   probe != &marker && fde_compare (ob, linear->array[i], *probe) < 0;\n \t   probe = chain_end)\n \t{\n-\t  chain_end = (const fde **) erratic->array[probe - linear->array];\n+\t  chain_end = (const fde *const*) erratic->array[probe - linear->array];\n \t  erratic->array[probe - linear->array] = NULL;\n \t}\n       erratic->array[i] = (const fde *) chain_end;\n@@ -679,7 +679,7 @@ add_fdes (struct object *ob, struct fde_accumulator *accu, const fde *this_fde)\n \n       if (encoding == DW_EH_PE_absptr)\n \t{\n-\t  if (*(_Unwind_Ptr *) this_fde->pc_begin == 0)\n+\t  if (*(const _Unwind_Ptr *) this_fde->pc_begin == 0)\n \t    continue;\n \t}\n       else\n@@ -797,8 +797,8 @@ linear_search_fdes (struct object *ob, const fde *this_fde, void *pc)\n \n       if (encoding == DW_EH_PE_absptr)\n \t{\n-\t  pc_begin = ((_Unwind_Ptr *) this_fde->pc_begin)[0];\n-\t  pc_range = ((_Unwind_Ptr *) this_fde->pc_begin)[1];\n+\t  pc_begin = ((const _Unwind_Ptr *) this_fde->pc_begin)[0];\n+\t  pc_range = ((const _Unwind_Ptr *) this_fde->pc_begin)[1];\n \t  if (pc_begin == 0)\n \t    continue;\n \t}\n@@ -844,12 +844,9 @@ binary_search_unencoded_fdes (struct object *ob, void *pc)\n   for (lo = 0, hi = vec->count; lo < hi; )\n     {\n       size_t i = (lo + hi) / 2;\n-      const fde *f = vec->array[i];\n-      void *pc_begin;\n-      uaddr pc_range;\n-\n-      pc_begin = ((void **) f->pc_begin)[0];\n-      pc_range = ((uaddr *) f->pc_begin)[1];\n+      const fde *const f = vec->array[i];\n+      const void *pc_begin = ((const void *const*) f->pc_begin)[0];\n+      const uaddr pc_range = ((const uaddr *) f->pc_begin)[1];\n \n       if (pc < pc_begin)\n \thi = i;"}, {"sha": "06dd9c35944f7bdf7c413f36a5600d6ea8b4fa7b", "filename": "gcc/unwind-dw2-fde.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Funwind-dw2-fde.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Funwind-dw2-fde.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2-fde.h?ref=5f754896d3ba9d28ba6bf94923e5e1564cbf4e36", "patch": "@@ -160,13 +160,13 @@ typedef struct dwarf_fde fde;\n static inline const struct dwarf_cie *\n get_cie (const struct dwarf_fde *f)\n {\n-  return (void *)&f->CIE_delta - f->CIE_delta;\n+  return (const void *)&f->CIE_delta - f->CIE_delta;\n }\n \n static inline const fde *\n next_fde (const fde *f)\n {\n-  return (const fde *) ((char *) f + f->length + sizeof (f->length));\n+  return (const fde *) ((const char *) f + f->length + sizeof (f->length));\n }\n \n extern const fde * _Unwind_Find_FDE (void *, struct dwarf_eh_bases *);"}, {"sha": "1bea1b30700ce86c1ac807aa41565e817e7b7ad7", "filename": "gcc/unwind-dw2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Funwind-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Funwind-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2.c?ref=5f754896d3ba9d28ba6bf94923e5e1564cbf4e36", "patch": "@@ -1141,11 +1141,11 @@ uw_frame_state_for (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n     return _URC_FATAL_PHASE1_ERROR;\n \n   /* First decode all the insns in the CIE.  */\n-  end = (unsigned char *) next_fde ((struct dwarf_fde *) cie);\n+  end = (const unsigned char *) next_fde ((const struct dwarf_fde *) cie);\n   execute_cfa_program (insn, end, context, fs);\n \n   /* Locate augmentation for the fde.  */\n-  aug = (unsigned char *) fde + sizeof (*fde);\n+  aug = (const unsigned char *) fde + sizeof (*fde);\n   aug += 2 * size_of_encoded_value (fs->fde_encoding);\n   insn = NULL;\n   if (fs->saw_z)\n@@ -1165,7 +1165,7 @@ uw_frame_state_for (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n   /* Then the insns in the FDE up to our target PC.  */\n   if (insn == NULL)\n     insn = aug;\n-  end = (unsigned char *) next_fde (fde);\n+  end = (const unsigned char *) next_fde (fde);\n   execute_cfa_program (insn, end, context, fs);\n \n   return _URC_NO_REASON;"}, {"sha": "53cb5d1e10b879e3c32de2bfc76c428ecd006cc5", "filename": "gcc/value-prof.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=5f754896d3ba9d28ba6bf94923e5e1564cbf4e36", "patch": "@@ -107,15 +107,15 @@ gimple_alloc_histogram_value (struct function *fun ATTRIBUTE_UNUSED,\n static hashval_t\n histogram_hash (const void *x)\n {\n-  return htab_hash_pointer (((histogram_value)x)->hvalue.stmt);\n+  return htab_hash_pointer (((const_histogram_value)x)->hvalue.stmt);\n }\n \n /* Return nonzero if decl_id of die_struct X is the same as UID of decl *Y.  */\n \n static int\n histogram_eq (const void *x, const void *y)\n {\n-  return ((histogram_value) x)->hvalue.stmt == (tree)y;\n+  return ((const_histogram_value) x)->hvalue.stmt == (const_tree)y;\n }\n \n /* Set histogram for STMT.  */"}, {"sha": "d1818570e70ce9d2b31337bc0c505659b1eb81a1", "filename": "gcc/value-prof.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Fvalue-prof.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f754896d3ba9d28ba6bf94923e5e1564cbf4e36/gcc%2Fvalue-prof.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.h?ref=5f754896d3ba9d28ba6bf94923e5e1564cbf4e36", "patch": "@@ -64,6 +64,7 @@ struct histogram_value_t\n };\n \n typedef struct histogram_value_t *histogram_value;\n+typedef const struct histogram_value_t *const_histogram_value;\n \n DEF_VEC_P(histogram_value);\n DEF_VEC_ALLOC_P(histogram_value,heap);"}]}