{"sha": "a55bbe13657211a0d5387f2e78c18fee0f973dc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU1YmJlMTM2NTcyMTFhMGQ1Mzg3ZjJlNzhjMThmZWUwZjk3M2RjNA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2015-03-03T15:52:07Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2015-03-03T15:52:07Z"}, "message": "Regenerate doc/tm.texi\n\n\t* doc/tm.texi: Regenerated.\n\nFrom-SVN: r221151", "tree": {"sha": "a8216a9ae1fcf4df869c04e81ef017717fea0274", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8216a9ae1fcf4df869c04e81ef017717fea0274"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a55bbe13657211a0d5387f2e78c18fee0f973dc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a55bbe13657211a0d5387f2e78c18fee0f973dc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a55bbe13657211a0d5387f2e78c18fee0f973dc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a55bbe13657211a0d5387f2e78c18fee0f973dc4/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2e612c470d9deead7b4d8b6042ac1b711c818766", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e612c470d9deead7b4d8b6042ac1b711c818766", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e612c470d9deead7b4d8b6042ac1b711c818766"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "11a2068f2f12a6df636c098ea81f0f617aef8716", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a55bbe13657211a0d5387f2e78c18fee0f973dc4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a55bbe13657211a0d5387f2e78c18fee0f973dc4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a55bbe13657211a0d5387f2e78c18fee0f973dc4", "patch": "@@ -1,3 +1,7 @@\n+2015-03-03  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* doc/tm.texi: Regenerated.\n+\n 2015-03-03  Max Filippov  <jcmvbkbc@gmail.com>\n \n \t* builtins.c (expand_builtin_return_addr): Add"}, {"sha": "6c5bfabfaa9fc750ab0215920814b05da6d7d4a4", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a55bbe13657211a0d5387f2e78c18fee0f973dc4/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a55bbe13657211a0d5387f2e78c18fee0f973dc4/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=a55bbe13657211a0d5387f2e78c18fee0f973dc4", "patch": "@@ -3045,16 +3045,17 @@ A C expression whose value is RTL representing the value of the return\n address for the frame @var{count} steps up from the current frame, after\n the prologue.  @var{frameaddr} is the frame pointer of the @var{count}\n frame, or the frame pointer of the @var{count} @minus{} 1 frame if\n-@code{RETURN_ADDR_IN_PREVIOUS_FRAME} is defined.\n+@code{RETURN_ADDR_IN_PREVIOUS_FRAME} is nonzero.\n \n The value of the expression must always be the correct address when\n @var{count} is zero, but may be @code{NULL_RTX} if there is no way to\n determine the return address of other frames.\n @end defmac\n \n @defmac RETURN_ADDR_IN_PREVIOUS_FRAME\n-Define this if the return address of a particular stack frame is accessed\n-from the frame pointer of the previous stack frame.\n+Define this macro to nonzero value if the return address of a particular\n+stack frame is accessed from the frame pointer of the previous stack\n+frame.  The zero default for this macro is suitable for most ports.\n @end defmac\n \n @defmac INCOMING_RETURN_ADDR_RTX"}]}