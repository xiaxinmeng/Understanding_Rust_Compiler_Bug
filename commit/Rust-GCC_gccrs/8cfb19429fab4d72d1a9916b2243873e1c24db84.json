{"sha": "8cfb19429fab4d72d1a9916b2243873e1c24db84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNmYjE5NDI5ZmFiNGQ3MmQxYTk5MTZiMjI0Mzg3M2UxYzI0ZGI4NA==", "commit": {"author": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-01-29T16:45:35Z"}, "committer": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-01-29T16:45:35Z"}, "message": "tc1: New directory.\n\n\t* g++.dg/tc1: New directory.\n\t* g++.dg/tc1/dr108.C, g++.dg/tc1/dr128.C, g++.dg/tc1/dr147.C,\n\tg++.dg/tc1/dr179.C, g++.dg/tc1/dr1.C, g++.dg/tc1/dr213.C,\n\tg++.dg/tc1/dr74.C, g++.dg/tc1/dr90.C, g++.dg/tc1/dr127.C,\n\tg++.dg/tc1/dr137.C, g++.dg/tc1/dr164.C, g++.dg/tc1/dr185.C,\n\tg++.dg/tc1/dr20.C, g++.dg/tc1/dr52.C, g++.dg/tc1/dr85.C: New tests.\n\nFrom-SVN: r76867", "tree": {"sha": "e39436f174cfc9c1fa27b4062a70438b9f3b0f64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e39436f174cfc9c1fa27b4062a70438b9f3b0f64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cfb19429fab4d72d1a9916b2243873e1c24db84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cfb19429fab4d72d1a9916b2243873e1c24db84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cfb19429fab4d72d1a9916b2243873e1c24db84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cfb19429fab4d72d1a9916b2243873e1c24db84/comments", "author": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b88cf82e9f9cbbb1851fa71e5845152ba5feada0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b88cf82e9f9cbbb1851fa71e5845152ba5feada0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b88cf82e9f9cbbb1851fa71e5845152ba5feada0"}], "stats": {"total": 319, "additions": 319, "deletions": 0}, "files": [{"sha": "383366743a7982ee4eec4bfd616b7ec02193b713", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8cfb19429fab4d72d1a9916b2243873e1c24db84", "patch": "@@ -1,3 +1,12 @@\n+2004-01-29  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n+\n+\t* g++.dg/tc1: New directory.\n+\t* g++.dg/tc1/dr108.C, g++.dg/tc1/dr128.C, g++.dg/tc1/dr147.C,\n+\tg++.dg/tc1/dr179.C, g++.dg/tc1/dr1.C, g++.dg/tc1/dr213.C,\n+\tg++.dg/tc1/dr74.C, g++.dg/tc1/dr90.C, g++.dg/tc1/dr127.C,\n+\tg++.dg/tc1/dr137.C, g++.dg/tc1/dr164.C, g++.dg/tc1/dr185.C,\n+\tg++.dg/tc1/dr20.C, g++.dg/tc1/dr52.C, g++.dg/tc1/dr85.C: New tests.\n+\n 2004-01-28  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n \t* g++.dg/parse/error11.C: New test."}, {"sha": "9196218f119efa516928dcbc9a1427b22473ae18", "filename": "gcc/testsuite/g++.dg/tc1/dr1.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr1.C?ref=8cfb19429fab4d72d1a9916b2243873e1c24db84", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do compile }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR1: What if two using-declarations refer to the same function but the \n+//  declarations introduce different default-arguments? \n+\n+namespace A { \n+  extern \"C\" void f(int = 5); \n+} \n+namespace B { \n+  extern \"C\" void f(int = 5); \n+} \n+using A::f; \n+using B::f; \n+\n+void use() { \n+  f(3);       \n+  f();        // { dg-error \"\" \"\" { xfail *-*-* } }\n+} "}, {"sha": "f7848ec74b625578ada44a151623495bb59d1ca0", "filename": "gcc/testsuite/g++.dg/tc1/dr108.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr108.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr108.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr108.C?ref=8cfb19429fab4d72d1a9916b2243873e1c24db84", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR108: Are classes nested in templates dependent?\n+\n+template <class T> struct S {\n+  struct I1 {\n+    typedef int X;\n+  };\n+  struct I2 : public I1 {\n+    X x;    // { dg-error \"does not name a type\" }\n+  };\n+};\n+\n+// Additional notes on the same line are allowed\n+// { dg-error \"\" \"\" { target *-*-* } 10 }"}, {"sha": "4dddc6d77789b7c61486510b0090a520edd49ea4", "filename": "gcc/testsuite/g++.dg/tc1/dr127.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr127.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr127.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr127.C?ref=8cfb19429fab4d72d1a9916b2243873e1c24db84", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do link }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR127: Ambiguity in description of matching deallocation function\n+\n+#include <cstddef>\n+#include <new>\n+\n+struct A \n+{\n+  // placement new, but can be called through normal new syntax.\n+  void* operator new(std::size_t size, float = 0.0f)\n+  {\n+    return ::operator new(size);\n+  }\n+\n+  // The matching deallocation function must be called, which means\n+  //  the placemente delete.\n+  void operator delete(void*);\n+  void operator delete(void*, float) {}\n+\n+  A()\n+  { throw 5; }\n+};\n+\n+int main()\n+{\n+  (void)new A;\n+}"}, {"sha": "4dd78d57f5c3292b7c2ec5fc2868fd4746315c9d", "filename": "gcc/testsuite/g++.dg/tc1/dr128.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr128.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr128.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr128.C?ref=8cfb19429fab4d72d1a9916b2243873e1c24db84", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do run }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR128: Casting between enum types\n+\n+extern \"C\" void abort(void);\n+\n+enum E1 { BLACK = 0, RED = 1 };\n+enum E2 { WHITE = 0, YELLOW = 1};\n+\n+int main(void)\n+{\n+  E1 e1 = RED;\n+  E2 e2 = static_cast<E2>(e1);\n+  if (e2 != YELLOW)\n+    abort();\n+  return 0;\n+}"}, {"sha": "bc1beb021bbb93a82e8c691559b15359218b8755", "filename": "gcc/testsuite/g++.dg/tc1/dr137.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr137.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr137.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr137.C?ref=8cfb19429fab4d72d1a9916b2243873e1c24db84", "patch": "@@ -0,0 +1,13 @@\n+// { dg-do compile }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR137: static_cast of cv void*\n+\n+struct A;\n+\n+const void* v;\n+\n+void foo(void)\n+{\n+  (void)static_cast<const volatile A *>(v);\n+  (void)static_cast<A *>(v);  // { dg-error \"\" \"static_cast cannot remove cv qualifiers\" }\n+}"}, {"sha": "268f9f95e58a0a44f3a8d0c4919c4cd3c84e5fc4", "filename": "gcc/testsuite/g++.dg/tc1/dr147.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr147.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr147.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr147.C?ref=8cfb19429fab4d72d1a9916b2243873e1c24db84", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do compile }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR147: Naming the constructor\n+\n+namespace N1 {\n+\n+struct A { A(); };\n+struct B: public A { B(); };\n+\n+A::A() { }\n+B::B() { }\n+\n+B::A ba;\n+A::A a; // { dg-error \"\" \"the injected-class-name can never be found through qualified lookup\" { xfail *-*-* } }\n+\n+}\n+\n+namespace N2 {\n+\n+// This is nasty: if we allowed the injected-class-name to be looked as a \n+//  qualified type, then the following code would be well-formed. Basically\n+//  the last line is defining the static member (with redundant parenthesis).\n+// Instead, it should be rejected as a malformed constructor declaration.\n+\n+template <class T> struct A {\n+  template <class T2> A(T2);\n+  static A x;\n+};\n+template<> A<int>::A<int>(A<int>::x);  // { dg-error \"\" \"this is an invalid declaration of the constructor\" { xfail *-*-* } }\n+\n+}"}, {"sha": "026ec096fb3aaf7e07be0c584d89320e2424c150", "filename": "gcc/testsuite/g++.dg/tc1/dr164.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr164.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr164.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr164.C?ref=8cfb19429fab4d72d1a9916b2243873e1c24db84", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do link }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR164: Overlap between Koenig and normal lookup \n+\n+void f(int);\n+\n+template <class T> void g(T t) {\n+  f(t);\n+}\n+\n+enum E { e };\n+\n+void f(E) {}\n+\n+int main() {\n+  g(e);\n+}"}, {"sha": "39e4164d2a93589c8aa545a48564c57ce48f1cc4", "filename": "gcc/testsuite/g++.dg/tc1/dr179.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr179.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr179.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr179.C?ref=8cfb19429fab4d72d1a9916b2243873e1c24db84", "patch": "@@ -0,0 +1,13 @@\n+// { dg-do compile }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR179: Function pointers and subtraction\n+\n+void foo(void);\n+typedef void (*fp)(void);\n+\n+int main()\n+{\n+  fp f1 = foo;\n+  fp f2 = foo;\n+  (void)f2-f1;  // { dg-error \"\" \"cannot subtract pointers to function\" }\n+}"}, {"sha": "2cd4e397f9317bf8642c41b4f1889d0f61442439", "filename": "gcc/testsuite/g++.dg/tc1/dr185.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr185.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr185.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr185.C?ref=8cfb19429fab4d72d1a9916b2243873e1c24db84", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do run }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR185: \"Named\" temporaries and copy elision \n+\n+extern \"C\" void abort(void);\n+\n+struct A {\n+  mutable int value;\n+  explicit A(int i) : value(i) {}\n+  void mutate(int i) const { value = i; }\n+};\n+\n+int foo() {\n+  A const& t = A(1);\n+  A n(t);          // can this copy be elided? NO!\n+  t.mutate(2);\n+  return n.value;  // can this return 2? NO!\n+}\n+\n+int main()\n+{\n+  int x = foo();\n+  if (x != 1)\n+    abort();\n+  return 0;\n+}"}, {"sha": "fe586212995de927aa45398f7644d36b09a3d253", "filename": "gcc/testsuite/g++.dg/tc1/dr20.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr20.C?ref=8cfb19429fab4d72d1a9916b2243873e1c24db84", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do run }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR20: Some clarifications needed for 12.8 para 15 \n+\n+extern \"C\" void printf(const char*, ...);\n+extern \"C\" void abort(void);\n+\n+int count = 0;\n+\n+class Thing {\n+public:\n+  Thing() {\n+  }\n+  ~Thing() {\n+  }\n+  Thing(const Thing&)\n+  {\n+    count += 1;\n+  }\n+};\n+\n+Thing f() {\n+  Thing t;\n+  return t;\n+}\n+\n+int main(void)\n+{\n+  Thing t2 = f();\n+  printf(\"%d %x\\n\", count, &t2);\n+  if (count != 0)\n+    abort();\n+  return 0;\n+}"}, {"sha": "a8961655b7ad51a927532c7b34c7848f550b7d6e", "filename": "gcc/testsuite/g++.dg/tc1/dr213.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr213.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr213.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr213.C?ref=8cfb19429fab4d72d1a9916b2243873e1c24db84", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR213: Lookup in dependent base classes\n+\n+// We should emit an error at *instantiation* time because g(t) can't be\n+//  resolved to any function.\n+\n+template <class T> struct A : T {\n+  void h(T t) {\n+    f(t);\n+    g(t);     // { dg-error \"\" \"\" { xfail *-*-* } }\n+  }\n+};\n+\n+struct B {\n+  void f(B);\n+  void g(B) {};\n+};\n+\n+void f(B) {}\n+\n+int main()\n+{\n+  A<B> ab;   // { dg-error \"\" \"\" { xfail *-*-* } }\n+  B b;\n+  ab.h(b);\n+}"}, {"sha": "b0896d73fa7076fc6188a6bce68c8c2b27401ff0", "filename": "gcc/testsuite/g++.dg/tc1/dr52.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr52.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr52.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr52.C?ref=8cfb19429fab4d72d1a9916b2243873e1c24db84", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR52: Non-static members, member selection and access checking\n+\n+struct A \n+{\n+  void foo(void);\n+};\n+\n+struct B\n+{\n+private:\n+  void foo(void);\n+};\n+\n+struct B1 : B {};\n+struct B2 : B {};\n+\n+struct C\n+{\n+  void foo(void);\n+};\n+\n+struct D : private C {};\n+\n+struct X: A, B1, B2, D\n+{\n+public:\n+  void bar(void)\n+  {\n+    this->B::foo();  // { dg-error \"\" }\n+    this->C::foo();  // { dg-error \"\" }\n+  }\n+};"}, {"sha": "155c7981b52256043563f94675bddfc64b7b975b", "filename": "gcc/testsuite/g++.dg/tc1/dr74.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr74.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr74.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr74.C?ref=8cfb19429fab4d72d1a9916b2243873e1c24db84", "patch": "@@ -0,0 +1,9 @@\n+// { dg-do compile }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR74: Enumeration value in direct-new-declarator \n+\n+struct A {};\n+enum E1 { COUNT = 10 };\n+\n+A* a = new A[COUNT];\n+"}, {"sha": "31dde8cbb5d429e5b111fceabc1c8f3bcb9186ef", "filename": "gcc/testsuite/g++.dg/tc1/dr85.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr85.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr85.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr85.C?ref=8cfb19429fab4d72d1a9916b2243873e1c24db84", "patch": "@@ -0,0 +1,8 @@\n+// { dg-do compile }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR85: Redeclaration of member class\n+\n+struct Base {\n+  struct Data {};  \n+  struct Data;  // { dg-error \"\" \"redeclaration of nested class is invalid\" { xfail *-*-* } }\n+};"}, {"sha": "b6ec24cc849e497462ea8bdd04386343dce03b65", "filename": "gcc/testsuite/g++.dg/tc1/dr90.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr90.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cfb19429fab4d72d1a9916b2243873e1c24db84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr90.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr90.C?ref=8cfb19429fab4d72d1a9916b2243873e1c24db84", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do compile }\n+// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n+// DR90: Should the enclosing class be an \"associated class\" too? \n+\n+struct A {\n+  union U {};\n+  friend void f(U);\n+};\n+\n+struct B {\n+  struct S {};\n+  friend void f(S);\n+};\n+\n+int main() { \n+  A::U    u; \n+  f(u);\n+  B::S    s;\n+  f(s);\n+}"}]}