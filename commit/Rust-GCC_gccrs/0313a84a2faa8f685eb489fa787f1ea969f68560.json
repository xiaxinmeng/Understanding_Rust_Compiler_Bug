{"sha": "0313a84a2faa8f685eb489fa787f1ea969f68560", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDMxM2E4NGEyZmFhOGY2ODVlYjQ4OWZhNzg3ZjFlYTk2OWY2ODU2MA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2019-11-10T18:33:00Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2019-11-10T18:33:00Z"}, "message": "re PR fortran/92123 ([F2018/array-descriptor]  Scalar allocatable/pointer with array descriptor (via bind(C)): ICE with select rank or error scalar variable with POINTER or ALLOCATABLE in procedure with BIND(C) is not yet supported)\n\n2019-11-10  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/92123\n\t*decl.c (gfc_verify_c_interop_param): Remove error asserting\n\tthat pointer or allocatable variables in a bind C procedure are\n\tnot supported. Delete some trailing spaces.\n\t* trans-stmt.c (trans_associate_var): Correct the attempt to\n\ttreat scalar pointer or allocatable temporaries as if they are\n\tarray descriptors.\n\n2019-11-10  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/92123\n\t* gfortran.dg/bind_c_procs_3.f90 : New test.\n\t* gfortran.dg/ISO_Fortran_binding_15.c : New test.\n\t* gfortran.dg/ISO_Fortran_binding_15.f90 : Additional source.\n\nFrom-SVN: r278025", "tree": {"sha": "3f4a01ea876388bd1334b361f0a96304fc93ff8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f4a01ea876388bd1334b361f0a96304fc93ff8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0313a84a2faa8f685eb489fa787f1ea969f68560", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0313a84a2faa8f685eb489fa787f1ea969f68560", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0313a84a2faa8f685eb489fa787f1ea969f68560", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0313a84a2faa8f685eb489fa787f1ea969f68560/comments", "author": null, "committer": null, "parents": [{"sha": "4b77a3806c4f2e27d149da326a689286043e433c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b77a3806c4f2e27d149da326a689286043e433c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b77a3806c4f2e27d149da326a689286043e433c"}], "stats": {"total": 125, "additions": 109, "deletions": 16}, "files": [{"sha": "33e0f18aeef30b9b9caf81ed37fa4d7cefb070ef", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0313a84a2faa8f685eb489fa787f1ea969f68560/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0313a84a2faa8f685eb489fa787f1ea969f68560/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0313a84a2faa8f685eb489fa787f1ea969f68560", "patch": "@@ -1,3 +1,13 @@\n+2019-11-10  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/92123\n+\t*decl.c (gfc_verify_c_interop_param): Remove error asserting\n+\tthat pointer or allocatable variables in a bind C procedure are\n+\tnot supported. Delete some trailing spaces.\n+\t* trans-stmt.c (trans_associate_var): Correct the attempt to\n+\ttreat scalar pointer or allocatable temporaries as if they are\n+\tarray descriptors.\n+\n 2019-11-09  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/92321\n@@ -53,7 +63,7 @@\n \t* io.c (check_format): Allow zero width for D, E, EN, and ES\n \tspecifiers as default and when -std=F2018 is given. Retain\n \texisting errors when using the -fdec family of flags.\n-\t\n+\n 2019-11-03  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/92113"}, {"sha": "affdbf6908d26d17290809a17b294b4b00200503", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0313a84a2faa8f685eb489fa787f1ea969f68560/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0313a84a2faa8f685eb489fa787f1ea969f68560/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=0313a84a2faa8f685eb489fa787f1ea969f68560", "patch": "@@ -1560,15 +1560,6 @@ gfc_verify_c_interop_param (gfc_symbol *sym)\n \t\t\t\t  sym->ns->proc_name->name))\n \t    retval = false;\n \n-\t  if ((sym->attr.allocatable || sym->attr.pointer) && !sym->as)\n-\t    {\n-\t      gfc_error (\"Scalar variable %qs at %L with POINTER or \"\n-\t\t\t \"ALLOCATABLE in procedure %qs with BIND(C) is not yet\"\n-\t\t\t \" supported\", sym->name, &(sym->declared_at),\n-\t\t\t sym->ns->proc_name->name);\n-\t      retval = false;\n-\t    }\n-\n \t  if (sym->attr.optional == 1 && sym->attr.value)\n \t    {\n \t      gfc_error (\"Variable %qs at %L cannot have both the OPTIONAL \"\n@@ -7567,7 +7558,7 @@ gfc_match_entry (void)\n       entry->attr.is_bind_c = 0;\n \n       loc = entry->old_symbol != NULL\n-\t? entry->old_symbol->declared_at : gfc_current_locus; \n+\t? entry->old_symbol->declared_at : gfc_current_locus;\n       gfc_error_now (\"BIND(C) attribute at %L can only be used for \"\n \t\t     \"variables or common blocks\", &loc);\n      }\n@@ -10313,7 +10304,7 @@ gfc_match_derived_decl (void)\n     }\n \n   /*  In free source form, need to check for TYPE XXX as oppose to TYPEXXX.\n-      But, we need to simply return for TYPE(.  */ \n+      But, we need to simply return for TYPE(.  */\n   if (m == MATCH_NO && gfc_current_form == FORM_FREE)\n     {\n       char c = gfc_peek_ascii_char ();"}, {"sha": "bce353eafe9ff00519c27c443cf30fb8d269d754", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0313a84a2faa8f685eb489fa787f1ea969f68560/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0313a84a2faa8f685eb489fa787f1ea969f68560/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=0313a84a2faa8f685eb489fa787f1ea969f68560", "patch": "@@ -1841,10 +1841,7 @@ trans_associate_var (gfc_symbol *sym, gfc_wrapped_block *block)\n \t  if (rank > 0)\n \t    copy_descriptor (&se.post, se.expr, desc, rank);\n \t  else\n-\t    {\n-\t      tmp = gfc_conv_descriptor_data_get (desc);\n-\t      gfc_conv_descriptor_data_set (&se.post, se.expr, tmp);\n-\t    }\n+\t    gfc_conv_descriptor_data_set (&se.post, se.expr, desc);\n \n \t  /* The dynamic type could have changed too.  */\n \t  if (sym->ts.type == BT_CLASS)"}, {"sha": "34a31f087c65652efd47eb93f40b9fa0e85a10cd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0313a84a2faa8f685eb489fa787f1ea969f68560/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0313a84a2faa8f685eb489fa787f1ea969f68560/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0313a84a2faa8f685eb489fa787f1ea969f68560", "patch": "@@ -1,3 +1,10 @@\n+2019-11-10  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/92123\n+\t* gfortran.dg/bind_c_procs_3.f90 : New test.\n+\t* gfortran.dg/ISO_Fortran_binding_15.c : New test.\n+\t* gfortran.dg/ISO_Fortran_binding_15.f90 : Additional source.\n+\n 2019-11-09  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* gcc.dg/tree-ssa/pr46076.c: Make tested code hot."}, {"sha": "f5c83c74024f1364c87630e4541f0dc7685da70b", "filename": "gcc/testsuite/gfortran.dg/ISO_Fortran_binding_15.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0313a84a2faa8f685eb489fa787f1ea969f68560/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0313a84a2faa8f685eb489fa787f1ea969f68560/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_15.c?ref=0313a84a2faa8f685eb489fa787f1ea969f68560", "patch": "@@ -0,0 +1,43 @@\n+/* Test the fix for PR92123.  */\n+\n+/* Contributed by Vipul Parekh  <parekhvs@gmail.com>  */\n+\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include \"../../../libgfortran/ISO_Fortran_binding.h\"\n+\n+// Prototype for Fortran functions\n+extern void Fsub(CFI_cdesc_t *);\n+\n+int main()\n+{\n+/* Note: ISO C forbids zero-size array 'dim' [-Wpedantic]\n+   Therefore, even though 'dat' represents a scalar, it is set rank 1/  */\n+  CFI_CDESC_T(1) dat;\n+  int irc = 0;\n+\n+  irc = CFI_establish((CFI_cdesc_t *)&dat, NULL,\n+\t\t      CFI_attribute_allocatable,\n+\t\t      CFI_type_int, 0, (CFI_rank_t)0, NULL);\n+  if (irc != CFI_SUCCESS)\n+    {\n+      printf(\"CFI_establish failed: irc = %d.\\n\", irc);\n+      return EXIT_FAILURE;\n+    }\n+\n+  Fsub((CFI_cdesc_t *)&dat);\n+  if (*(int *)dat.base_addr != 42)\n+    {\n+      printf(\"Fsub returned = %d.\\n\", *(int *)dat.base_addr);\n+      return EXIT_FAILURE;\n+    }\n+\n+  irc = CFI_deallocate((CFI_cdesc_t *)&dat);\n+  if (irc != CFI_SUCCESS)\n+    {\n+      printf(\"CFI_deallocate for dat failed: irc = %d.\\n\", irc);\n+      return EXIT_FAILURE;\n+    }\n+\n+  return EXIT_SUCCESS;\n+}"}, {"sha": "d3096c87e39e853710428fa131dbc082e73bb297", "filename": "gcc/testsuite/gfortran.dg/ISO_Fortran_binding_15.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0313a84a2faa8f685eb489fa787f1ea969f68560/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0313a84a2faa8f685eb489fa787f1ea969f68560/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_15.f90?ref=0313a84a2faa8f685eb489fa787f1ea969f68560", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do run { target c99_runtime } }\n+! { dg-additional-sources ISO_Fortran_binding_15.c }\n+!\n+! Test the fix for PR921233. The additional source is the main program.\n+!\n+! Contributed by Vipul Parekh  <parekhvs@gmail.com>\n+!\n+module m\n+  use, intrinsic :: iso_c_binding, only : c_int\n+contains\n+  subroutine Fsub( dat ) bind(C, name=\"Fsub\")\n+    integer(c_int), allocatable, intent(out) :: dat(..)\n+    select rank (dat)\n+      rank (0)\n+      allocate( dat )\n+      dat = 42\n+    end select\n+    return\n+  end subroutine\n+end module m"}, {"sha": "d58289f71249d8103ae40bea5ea5aaf36db50adb", "filename": "gcc/testsuite/gfortran.dg/bind_c_procs_3.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0313a84a2faa8f685eb489fa787f1ea969f68560/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_procs_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0313a84a2faa8f685eb489fa787f1ea969f68560/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_procs_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_procs_3.f90?ref=0313a84a2faa8f685eb489fa787f1ea969f68560", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR92123, in which 'dat' caused an error with the message\n+! \"Scalar variable 'dat' at ?? with POINTER or ALLOCATABLE in procedure Fsub\n+! with BIND(C) is not yet supported.\"\n+!\n+! Contributed by Vipul Parekh  <parekhvs@gmail.com>\n+!\n+module m\n+   use, intrinsic :: iso_c_binding, only : c_int\n+contains\n+   subroutine Fsub( dat ) bind(C, name=\"Fsub\")\n+      !.. Argument list\n+      integer(c_int), allocatable, intent(out) :: dat\n+      dat = 42\n+      return\n+   end subroutine\n+end module m\n+\n+   use, intrinsic :: iso_c_binding, only : c_int\n+   use m, only : Fsub\n+   integer(c_int), allocatable :: x\n+   call Fsub( x )\n+   if (x .ne. 42) stop 1\n+end"}]}