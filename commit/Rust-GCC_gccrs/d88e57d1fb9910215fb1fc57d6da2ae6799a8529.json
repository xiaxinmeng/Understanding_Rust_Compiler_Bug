{"sha": "d88e57d1fb9910215fb1fc57d6da2ae6799a8529", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg4ZTU3ZDFmYjk5MTAyMTVmYjFmYzU3ZDZkYTJhZTY3OTlhODUyOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-03-24T02:23:47Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-03-24T02:23:47Z"}, "message": "sparc.c (sparc_emit_floatunsdi): New.\n\n        * config/sparc/sparc.c (sparc_emit_floatunsdi): New.\n        * config/sparc/sparc-protos.h: Update.\n        * config/sparc/sparc.md (floatunsdisf2, floatunsdidf2): New.\n\nFrom-SVN: r51249", "tree": {"sha": "8bd5eac77194b9d9f1b7aeda8b6931c393eeb7e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bd5eac77194b9d9f1b7aeda8b6931c393eeb7e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d88e57d1fb9910215fb1fc57d6da2ae6799a8529", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d88e57d1fb9910215fb1fc57d6da2ae6799a8529", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d88e57d1fb9910215fb1fc57d6da2ae6799a8529", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d88e57d1fb9910215fb1fc57d6da2ae6799a8529/comments", "author": null, "committer": null, "parents": [{"sha": "6dfaf9ba0dd58f04e097d124977322a35859f6fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dfaf9ba0dd58f04e097d124977322a35859f6fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dfaf9ba0dd58f04e097d124977322a35859f6fe"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "5320d1305229946d869fa395397dc33532c14511", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88e57d1fb9910215fb1fc57d6da2ae6799a8529/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88e57d1fb9910215fb1fc57d6da2ae6799a8529/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d88e57d1fb9910215fb1fc57d6da2ae6799a8529", "patch": "@@ -1,3 +1,9 @@\n+2002-03-23  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/sparc/sparc.c (sparc_emit_floatunsdi): New.\n+\t* config/sparc/sparc-protos.h: Update.\n+\t* config/sparc/sparc.md (floatunsdisf2, floatunsdidf2): New.\n+\n 2002-03-23  Richard Henderson  <rth@redhat.com>\n \n \t* config/sparc/gmon-sol2.c (internal_mcount): Assume either"}, {"sha": "269844eff7291e19a2cf4388344c87a40d113319", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88e57d1fb9910215fb1fc57d6da2ae6799a8529/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88e57d1fb9910215fb1fc57d6da2ae6799a8529/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=d88e57d1fb9910215fb1fc57d6da2ae6799a8529", "patch": "@@ -74,6 +74,7 @@ extern enum machine_mode select_cc_mode PARAMS ((enum rtx_code, rtx, rtx));\n /* Define the function that build the compare insn for scc and bcc.  */\n extern rtx gen_compare_reg PARAMS ((enum rtx_code code, rtx, rtx));\n extern void sparc_emit_float_lib_cmp PARAMS ((rtx, rtx, enum rtx_code));\n+extern void sparc_emit_floatunsdi PARAMS ((rtx [2]));\n /* This function handles all v9 scc insns */\n extern int gen_v9_scc PARAMS ((enum rtx_code, rtx *));\n extern void sparc_initialize_trampoline PARAMS ((rtx, rtx, rtx));"}, {"sha": "d1fbe2d1e0aba3b50a6473be10321831322b0c17", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88e57d1fb9910215fb1fc57d6da2ae6799a8529/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88e57d1fb9910215fb1fc57d6da2ae6799a8529/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=d88e57d1fb9910215fb1fc57d6da2ae6799a8529", "patch": "@@ -5420,6 +5420,42 @@ sparc_emit_float_lib_cmp (x, y, comparison)\n     }\n }\n \n+/* Generate an unsigned DImode to FP conversion.  This is the same code\n+   optabs would emit if we didn't have TFmode patterns.  */\n+\n+void\n+sparc_emit_floatunsdi (operands)\n+     rtx operands[2];\n+{\n+  rtx neglab, donelab, i0, i1, f0, in, out;\n+  enum machine_mode mode;\n+\n+  out = operands[0];\n+  in = force_reg (DImode, operands[1]);\n+  mode = GET_MODE (out);\n+  neglab = gen_label_rtx ();\n+  donelab = gen_label_rtx ();\n+  i0 = gen_reg_rtx (DImode);\n+  i1 = gen_reg_rtx (DImode);\n+  f0 = gen_reg_rtx (mode);\n+\n+  emit_cmp_and_jump_insns (in, const0_rtx, LT, const0_rtx, DImode, 0, neglab);\n+\n+  emit_insn (gen_rtx_SET (VOIDmode, out, gen_rtx_FLOAT (mode, in)));\n+  emit_jump_insn (gen_jump (donelab));\n+  emit_barrier ();\n+\n+  emit_label (neglab);\n+\n+  emit_insn (gen_lshrdi3 (i0, in, const1_rtx));\n+  emit_insn (gen_anddi3 (i1, in, const1_rtx));\n+  emit_insn (gen_iordi3 (i0, i0, i1));\n+  emit_insn (gen_rtx_SET (VOIDmode, f0, gen_rtx_FLOAT (mode, i0)));\n+  emit_insn (gen_rtx_SET (VOIDmode, out, gen_rtx_PLUS (mode, f0, f0)));\n+\n+  emit_label (donelab);\n+}\n+\n /* Return the string to output a conditional branch to LABEL, testing\n    register REG.  LABEL is the operand number of the label; REG is the\n    operand number of the reg.  OP is the conditional expression.  The mode"}, {"sha": "e1810f66a5c58791b8449980c40febdd14592035", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88e57d1fb9910215fb1fc57d6da2ae6799a8529/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88e57d1fb9910215fb1fc57d6da2ae6799a8529/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=d88e57d1fb9910215fb1fc57d6da2ae6799a8529", "patch": "@@ -5243,6 +5243,12 @@\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fptype\" \"double\")])\n \n+(define_expand \"floatunsdisf2\"\n+  [(use (match_operand:SF 0 \"register_operand\" \"\"))\n+   (use (match_operand:DI 1 \"register_operand\" \"\"))]\n+  \"TARGET_ARCH64 && TARGET_FPU\"\n+  \"sparc_emit_floatunsdi (operands); DONE;\")\n+\n (define_insn \"floatdidf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n \t(float:DF (match_operand:DI 1 \"register_operand\" \"e\")))]\n@@ -5251,6 +5257,12 @@\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fptype\" \"double\")])\n \n+(define_expand \"floatunsdidf2\"\n+  [(use (match_operand:DF 0 \"register_operand\" \"\"))\n+   (use (match_operand:DI 1 \"register_operand\" \"\"))]\n+  \"TARGET_ARCH64 && TARGET_FPU\"\n+  \"sparc_emit_floatunsdi (operands); DONE;\")\n+\n (define_expand \"floatditf2\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=e\")\n \t(float:TF (match_operand:DI 1 \"register_operand\" \"e\")))]"}]}