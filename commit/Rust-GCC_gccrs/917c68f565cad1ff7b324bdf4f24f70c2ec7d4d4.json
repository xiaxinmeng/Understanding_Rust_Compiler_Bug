{"sha": "917c68f565cad1ff7b324bdf4f24f70c2ec7d4d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE3YzY4ZjU2NWNhZDFmZjdiMzI0YmRmNGYyNGY3MGMyZWM3ZDRkNA==", "commit": {"author": {"name": "Bernhard Reutner-Fischer", "email": "aldot@gcc.gnu.org", "date": "2015-04-29T10:45:31Z"}, "committer": {"name": "Bernhard Reutner-Fischer", "email": "aldot@gcc.gnu.org", "date": "2015-04-29T10:45:31Z"}, "message": "gimple-walk.c #include TLC\n\nAlso look at return values of parse_input_constraint and\nparse_output_constraint.\n\nFrom-SVN: r222569", "tree": {"sha": "a559b2fe9dcf8500b394d8c5d595ba33c180edde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a559b2fe9dcf8500b394d8c5d595ba33c180edde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/917c68f565cad1ff7b324bdf4f24f70c2ec7d4d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/917c68f565cad1ff7b324bdf4f24f70c2ec7d4d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/917c68f565cad1ff7b324bdf4f24f70c2ec7d4d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/917c68f565cad1ff7b324bdf4f24f70c2ec7d4d4/comments", "author": null, "committer": null, "parents": [{"sha": "ee9da432b6cb3df2ba026dc66aa8a41b99512db5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee9da432b6cb3df2ba026dc66aa8a41b99512db5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee9da432b6cb3df2ba026dc66aa8a41b99512db5"}], "stats": {"total": 43, "additions": 25, "deletions": 18}, "files": [{"sha": "ad13f84e2dcf60ecfa2da81200e191b260ddb343", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/917c68f565cad1ff7b324bdf4f24f70c2ec7d4d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/917c68f565cad1ff7b324bdf4f24f70c2ec7d4d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=917c68f565cad1ff7b324bdf4f24f70c2ec7d4d4", "patch": "@@ -1,3 +1,11 @@\n+2015-04-29  Bernhard Reuther-Fischer  <aldot@gcc.gnu.org>\n+\n+\t* gimple-walk.c: Prune duplicate or unneeded includes.\n+\t(walk_gimple_asm): Only call parse_input_constraint or\n+\tparse_output_constraint if their findings are used.\n+\tHonour parse_input_constraint and parse_output_constraint\n+\tresult.\n+\n 2015-04-29  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* config/arm/neon.md (vec_shl<mode>, vec_shr<mode>): Remove."}, {"sha": "53462b50201e29120d22f4b7d25d3532c2538caf", "filename": "gcc/gimple-walk.c", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/917c68f565cad1ff7b324bdf4f24f70c2ec7d4d4/gcc%2Fgimple-walk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/917c68f565cad1ff7b324bdf4f24f70c2ec7d4d4/gcc%2Fgimple-walk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-walk.c?ref=917c68f565cad1ff7b324bdf4f24f70c2ec7d4d4", "patch": "@@ -24,31 +24,25 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"hash-set.h\"\n-#include \"machmode.h\"\n #include \"vec.h\"\n #include \"double-int.h\"\n #include \"input.h\"\n #include \"alias.h\"\n #include \"symtab.h\"\n-#include \"wide-int.h\"\n #include \"inchash.h\"\n #include \"tree.h\"\n-#include \"fold-const.h\"\n-#include \"stmt.h\"\n #include \"predict.h\"\n #include \"hard-reg-set.h\"\n-#include \"input.h\"\n #include \"function.h\"\n-#include \"basic-block.h\"\n-#include \"tree-ssa-alias.h\"\n-#include \"internal-fn.h\"\n #include \"gimple-expr.h\"\n #include \"is-a.h\"\n+#include \"tree-ssa-alias.h\"\n+#include \"basic-block.h\"\n+#include \"fold-const.h\"\n #include \"gimple.h\"\n #include \"gimple-iterator.h\"\n #include \"gimple-walk.h\"\n-#include \"gimple-walk.h\"\n-#include \"demangle.h\"\n+#include \"stmt.h\"\n \n /* Walk all the statements in the sequence *PSEQ calling walk_gimple_stmt\n    on each one.  WI is as in walk_gimple_stmt.\n@@ -129,10 +123,12 @@ walk_gimple_asm (gasm *stmt, walk_tree_fn callback_op,\n       op = gimple_asm_output_op (stmt, i);\n       constraint = TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (op)));\n       oconstraints[i] = constraint;\n-      parse_output_constraint (&constraint, i, 0, 0, &allows_mem, &allows_reg,\n-\t                       &is_inout);\n       if (wi)\n-\twi->val_only = (allows_reg || !allows_mem);\n+\t{\n+\t  if (parse_output_constraint (&constraint, i, 0, 0, &allows_mem,\n+\t\t\t\t       &allows_reg, &is_inout))\n+\t    wi->val_only = (allows_reg || !allows_mem);\n+\t}\n       ret = walk_tree (&TREE_VALUE (op), callback_op, wi, NULL);\n       if (ret)\n \treturn ret;\n@@ -143,13 +139,16 @@ walk_gimple_asm (gasm *stmt, walk_tree_fn callback_op,\n     {\n       op = gimple_asm_input_op (stmt, i);\n       constraint = TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (op)));\n-      parse_input_constraint (&constraint, 0, 0, noutputs, 0,\n-\t\t\t      oconstraints, &allows_mem, &allows_reg);\n+\n       if (wi)\n \t{\n-\t  wi->val_only = (allows_reg || !allows_mem);\n-          /* Although input \"m\" is not really a LHS, we need a lvalue.  */\n-\t  wi->is_lhs = !wi->val_only;\n+\t  if (parse_input_constraint (&constraint, 0, 0, noutputs, 0,\n+\t\t\t\t      oconstraints, &allows_mem, &allows_reg))\n+\t    {\n+\t      wi->val_only = (allows_reg || !allows_mem);\n+\t      /* Although input \"m\" is not really a LHS, we need a lvalue.  */\n+\t      wi->is_lhs = !wi->val_only;\n+\t    }\n \t}\n       ret = walk_tree (&TREE_VALUE (op), callback_op, wi, NULL);\n       if (ret)"}]}