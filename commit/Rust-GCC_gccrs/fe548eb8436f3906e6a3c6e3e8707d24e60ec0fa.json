{"sha": "fe548eb8436f3906e6a3c6e3e8707d24e60ec0fa", "node_id": "C_kwDOANBUbNoAKGZlNTQ4ZWI4NDM2ZjM5MDZlNmEzYzZlM2U4NzA3ZDI0ZTYwZWMwZmE", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-03-09T13:42:19Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-03-09T13:42:19Z"}, "message": "c++: merge default targs for function templates [PR65396]\n\nWe currently merge default template arguments for class templates, but\nnot for function templates.  This patch fixes this by factoring out the\nargument merging logic in redeclare_class_template into a separate\nfunction and using it in duplicate_decls as well.\n\n\tPR c++/65396\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (merge_default_template_args): Declare.\n\t* decl.cc (merge_default_template_args): Define, factored out\n\tfrom redeclare_class_template.\n\t(duplicate_decls): Use it when merging member function template\n\tand free function declarations.\n\t* pt.cc (redeclare_class_template): Factor out default argument\n\tmerging logic into merge_default_template_args.  Improve location\n\tof a note when there's a template parameter kind mismatch.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/vt-34314.C: Adjust expected location of\n\t\"redeclared here\" note.\n\t* g++.dg/template/pr92440.C: Likewise.\n\t* g++.old-deja/g++.pt/redecl1.C: Adjust expected location of\n\t\"redefinition of default argument\" error.\n\t* g++.dg/template/defarg23.C: New test.\n\t* g++.dg/template/defarg23a.C: New test.", "tree": {"sha": "d155334d863e95a715b555679753ac37c91d8f04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d155334d863e95a715b555679753ac37c91d8f04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe548eb8436f3906e6a3c6e3e8707d24e60ec0fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe548eb8436f3906e6a3c6e3e8707d24e60ec0fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe548eb8436f3906e6a3c6e3e8707d24e60ec0fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe548eb8436f3906e6a3c6e3e8707d24e60ec0fa/comments", "author": null, "committer": null, "parents": [{"sha": "4470e813b0b46d2e579b9e3d69a41a7192709c50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4470e813b0b46d2e579b9e3d69a41a7192709c50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4470e813b0b46d2e579b9e3d69a41a7192709c50"}], "stats": {"total": 163, "additions": 121, "deletions": 42}, "files": [{"sha": "757711bc03a77c07530b2f047a371ed804f1b305", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe548eb8436f3906e6a3c6e3e8707d24e60ec0fa/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe548eb8436f3906e6a3c6e3e8707d24e60ec0fa/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=fe548eb8436f3906e6a3c6e3e8707d24e60ec0fa", "patch": "@@ -6787,6 +6787,7 @@ extern void note_iteration_stmt_body_end\t(bool);\n extern void determine_local_discriminator\t(tree);\n extern int decls_match\t\t\t\t(tree, tree, bool = true);\n extern bool maybe_version_functions\t\t(tree, tree, bool);\n+extern bool merge_default_template_args\t\t(tree, tree, bool);\n extern tree duplicate_decls\t\t\t(tree, tree,\n \t\t\t\t\t\t bool hiding = false,\n \t\t\t\t\t\t bool was_hidden = false);"}, {"sha": "48763c44518f6501e135784a537055d77ec2d83a", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 57, "deletions": 1, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe548eb8436f3906e6a3c6e3e8707d24e60ec0fa/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe548eb8436f3906e6a3c6e3e8707d24e60ec0fa/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=fe548eb8436f3906e6a3c6e3e8707d24e60ec0fa", "patch": "@@ -1470,6 +1470,43 @@ duplicate_function_template_decls (tree newdecl, tree olddecl)\n   return false;\n }\n \n+/* OLD_PARMS is the innermost set of template parameters for some template\n+   declaration, and NEW_PARMS is the corresponding set of template parameters\n+   for a redeclaration of that template.  Merge the default arguments within\n+   these two sets of parameters.  CLASS_P is true iff the template in\n+   question is a class template.  */\n+\n+bool\n+merge_default_template_args (tree new_parms, tree old_parms, bool class_p)\n+{\n+  gcc_checking_assert (TREE_VEC_LENGTH (new_parms)\n+\t\t       == TREE_VEC_LENGTH (old_parms));\n+  for (int i = 0; i < TREE_VEC_LENGTH (new_parms); i++)\n+    {\n+      tree new_parm = TREE_VALUE (TREE_VEC_ELT (new_parms, i));\n+      tree old_parm = TREE_VALUE (TREE_VEC_ELT (old_parms, i));\n+      tree& new_default = TREE_PURPOSE (TREE_VEC_ELT (new_parms, i));\n+      tree& old_default = TREE_PURPOSE (TREE_VEC_ELT (old_parms, i));\n+      if (new_default != NULL_TREE && old_default != NULL_TREE)\n+\t{\n+\t  auto_diagnostic_group d;\n+\t  error (\"redefinition of default argument for %q+#D\", new_parm);\n+\t  inform (DECL_SOURCE_LOCATION (old_parm),\n+\t\t  \"original definition appeared here\");\n+\t  return false;\n+\t}\n+      else if (new_default != NULL_TREE)\n+\t/* Update the previous template parameters (which are the ones\n+\t   that will really count) with the new default value.  */\n+\told_default = new_default;\n+      else if (class_p && old_default != NULL_TREE)\n+\t/* Update the new parameters, too; they'll be used as the\n+\t   parameters for any members.  */\n+\tnew_default = old_default;\n+    }\n+  return true;\n+}\n+\n /* If NEWDECL is a redeclaration of OLDDECL, merge the declarations.\n    If the redeclaration is invalid, a diagnostic is issued, and the\n    error_mark_node is returned.  Otherwise, OLDDECL is returned.\n@@ -1990,7 +2027,21 @@ duplicate_decls (tree newdecl, tree olddecl, bool hiding, bool was_hidden)\n \t\t     template shall be specified on the initial declaration\n \t\t     of the member function within the class template.  */\n \t\t  || CLASSTYPE_TEMPLATE_INFO (CP_DECL_CONTEXT (olddecl))))\n-\t    check_redeclaration_no_default_args (newdecl);\n+\t    {\n+\t      check_redeclaration_no_default_args (newdecl);\n+\n+\t      if (DECL_TEMPLATE_INFO (olddecl)\n+\t\t  && DECL_MEMBER_TEMPLATE_P (DECL_TI_TEMPLATE (olddecl)))\n+\t\t{\n+\t\t  tree new_parms = DECL_TEMPLATE_INFO (newdecl)\n+\t\t    ? DECL_INNERMOST_TEMPLATE_PARMS (DECL_TI_TEMPLATE (newdecl))\n+\t\t    : INNERMOST_TEMPLATE_PARMS (current_template_parms);\n+\t\t  tree old_parms\n+\t\t    = DECL_INNERMOST_TEMPLATE_PARMS (DECL_TI_TEMPLATE (olddecl));\n+\t\t  merge_default_template_args (new_parms, old_parms,\n+\t\t\t\t\t       /*class_p=*/false);\n+\t\t}\n+\t    }\n \t  else\n \t    {\n \t      tree t1 = FUNCTION_FIRST_USER_PARMTYPE (olddecl);\n@@ -2235,6 +2286,11 @@ duplicate_decls (tree newdecl, tree olddecl, bool hiding, bool was_hidden)\n \t\t translation unit.\"  */\n \t      check_no_redeclaration_friend_default_args\n \t\t(old_result, new_result);\n+\n+\t      tree new_parms = DECL_INNERMOST_TEMPLATE_PARMS (newdecl);\n+\t      tree old_parms = DECL_INNERMOST_TEMPLATE_PARMS (olddecl);\n+\t      merge_default_template_args (new_parms, old_parms,\n+\t\t\t\t\t   /*class_p=*/false);\n \t    }\n \t  if (!DECL_UNIQUE_FRIEND_P (old_result))\n \t    DECL_UNIQUE_FRIEND_P (new_result) = false;"}, {"sha": "c93676ed8d225c9e8f4f860fc78edb5e4f39deb3", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 4, "deletions": 27, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe548eb8436f3906e6a3c6e3e8707d24e60ec0fa/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe548eb8436f3906e6a3c6e3e8707d24e60ec0fa/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=fe548eb8436f3906e6a3c6e3e8707d24e60ec0fa", "patch": "@@ -6274,8 +6274,6 @@ redeclare_class_template (tree type, tree parms, tree cons)\n     {\n       tree tmpl_parm;\n       tree parm;\n-      tree tmpl_default;\n-      tree parm_default;\n \n       if (TREE_VEC_ELT (tmpl_parms, i) == error_mark_node\n           || TREE_VEC_ELT (parms, i) == error_mark_node)\n@@ -6286,8 +6284,6 @@ redeclare_class_template (tree type, tree parms, tree cons)\n \treturn false;\n \n       parm = TREE_VALUE (TREE_VEC_ELT (parms, i));\n-      tmpl_default = TREE_PURPOSE (TREE_VEC_ELT (tmpl_parms, i));\n-      parm_default = TREE_PURPOSE (TREE_VEC_ELT (parms, i));\n \n       /* TMPL_PARM and PARM can be either TYPE_DECL, PARM_DECL, or\n \t TEMPLATE_DECL.  */\n@@ -6303,7 +6299,7 @@ redeclare_class_template (tree type, tree parms, tree cons)\n \t{\n \t  auto_diagnostic_group d;\n \t  error (\"template parameter %q+#D\", tmpl_parm);\n-\t  inform (input_location, \"redeclared here as %q#D\", parm);\n+\t  inform (DECL_SOURCE_LOCATION (parm), \"redeclared here as %q#D\", parm);\n \t  return false;\n \t}\n \n@@ -6321,28 +6317,6 @@ redeclare_class_template (tree type, tree parms, tree cons)\n \t  return false;\n \t}\n \n-      if (tmpl_default != NULL_TREE && parm_default != NULL_TREE)\n-\t{\n-\t  /* We have in [temp.param]:\n-\n-\t     A template-parameter may not be given default arguments\n-\t     by two different declarations in the same scope.  */\n-\t  auto_diagnostic_group d;\n-\t  error_at (input_location, \"redefinition of default argument for %q#D\", parm);\n-\t  inform (DECL_SOURCE_LOCATION (tmpl_parm),\n-\t\t  \"original definition appeared here\");\n-\t  return false;\n-\t}\n-\n-      if (parm_default != NULL_TREE)\n-\t/* Update the previous template parameters (which are the ones\n-\t   that will really count) with the new default value.  */\n-\tTREE_PURPOSE (TREE_VEC_ELT (tmpl_parms, i)) = parm_default;\n-      else if (tmpl_default != NULL_TREE)\n-\t/* Update the new parameters, too; they'll be used as the\n-\t   parameters for any members.  */\n-\tTREE_PURPOSE (TREE_VEC_ELT (parms, i)) = tmpl_default;\n-\n       /* Give each template template parm in this redeclaration a\n \t DECL_CONTEXT of the template for which they are a parameter.  */\n       if (TREE_CODE (parm) == TEMPLATE_DECL)\n@@ -6352,6 +6326,9 @@ redeclare_class_template (tree type, tree parms, tree cons)\n \t}\n     }\n \n+  if (!merge_default_template_args (parms, tmpl_parms, /*class_p=*/true))\n+    return false;\n+\n   tree ci = get_constraints (tmpl);\n   tree req1 = ci ? CI_TEMPLATE_REQS (ci) : NULL_TREE;\n   tree req2 = cons ? CI_TEMPLATE_REQS (cons) : NULL_TREE;"}, {"sha": "704a975cc95d662a2a40d37860011b14ef19359d", "filename": "gcc/testsuite/g++.dg/cpp0x/vt-34314.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe548eb8436f3906e6a3c6e3e8707d24e60ec0fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34314.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe548eb8436f3906e6a3c6e3e8707d24e60ec0fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34314.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34314.C?ref=fe548eb8436f3906e6a3c6e3e8707d24e60ec0fa", "patch": "@@ -3,8 +3,8 @@\n template<typename Fun, typename... Args> // { dg-error \"template parameter\" }\n struct call;\n \n-template<typename Fun, typename Arg0>\n-struct call // { dg-message \"note: redeclared here\" }\n+template<typename Fun, typename Arg0> // { dg-message \"note: redeclared here\" }\n+struct call\n {\n     template<typename Sig>\n     struct result;\n@@ -20,8 +20,8 @@ struct call // { dg-message \"note: redeclared here\" }\n template<typename Fun, int... N> // { dg-error \"template parameter\" }\n struct call2;\n \n-template<typename Fun, int N>\n-struct call2 // { dg-message \"note: redeclared here\" }\n+template<typename Fun, int N> // { dg-message \"note: redeclared here\" }\n+struct call2\n {\n     template<typename Sig>\n     struct result;\n@@ -36,8 +36,8 @@ struct call2 // { dg-message \"note: redeclared here\" }\n template<typename Fun, template<typename> class... TT> // { dg-error \"template parameter\" }\n struct call3;\n \n-template<typename Fun, template<typename> class TT>\n-struct call3 // { dg-message \"note: redeclared here\" }\n+template<typename Fun, template<typename> class TT> // { dg-message \"note: redeclared here\" }\n+struct call3\n {\n     template<typename Sig>\n     struct result;"}, {"sha": "443d02656cca5ce53d0638ea9c4f28f399fb2d7c", "filename": "gcc/testsuite/g++.dg/template/defarg23.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe548eb8436f3906e6a3c6e3e8707d24e60ec0fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdefarg23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe548eb8436f3906e6a3c6e3e8707d24e60ec0fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdefarg23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdefarg23.C?ref=fe548eb8436f3906e6a3c6e3e8707d24e60ec0fa", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/65396\n+// { dg-do compile { target c++11 } }\n+\n+template<class T>     void f();\n+template<class T=int> void f();\n+\n+template<class T=int> void g(); // { dg-message \"original definition\" }\n+template<class T=int> void g(); // { dg-error \"redefinition of default\" }\n+\n+template<class T, class U=bool> void h();\n+template<class T=char, class U>\n+void h() {\n+  static_assert(__is_same(T, char), \"\");\n+  static_assert(__is_same(U, bool), \"\");\n+}\n+\n+int main() {\n+  f();\n+  g();\n+  h();\n+}"}, {"sha": "3de0306112e1c21d4c204a5829ca79d284235d7a", "filename": "gcc/testsuite/g++.dg/template/defarg23a.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe548eb8436f3906e6a3c6e3e8707d24e60ec0fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdefarg23a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe548eb8436f3906e6a3c6e3e8707d24e60ec0fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdefarg23a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdefarg23a.C?ref=fe548eb8436f3906e6a3c6e3e8707d24e60ec0fa", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/65396\n+// { dg-do compile { target c++11 } }\n+// Like defarg23.C, but for member functions.\n+\n+struct A {\n+  template<class T> void f();\n+  template<class T=int> void g(); // { dg-message \"original definition\" }\n+  template<class T=char, class U> void h();\n+};\n+\n+template<class T=int> void A::f() { }\n+template<class T=int> void A::g() { } // { dg-error \"redefinition of default\" }\n+template<class T, class U=bool>\n+void A::h() {\n+  static_assert(__is_same(T, char), \"\");\n+  static_assert(__is_same(U, bool), \"\");\n+}\n+\n+int main() {\n+  A a;\n+  a.f();\n+  a.g();\n+  a.h();\n+}"}, {"sha": "f1e9281ab86bb8dacb6ed75fdd7260b8ef08d831", "filename": "gcc/testsuite/g++.dg/template/pr92440.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe548eb8436f3906e6a3c6e3e8707d24e60ec0fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr92440.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe548eb8436f3906e6a3c6e3e8707d24e60ec0fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr92440.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr92440.C?ref=fe548eb8436f3906e6a3c6e3e8707d24e60ec0fa", "patch": "@@ -3,8 +3,8 @@\n \n template <int T> // { dg-error \"template parameter\" }\n struct S {\n-    template <class U>\n-    friend struct S;  // { dg-message \"note: redeclared here as\" }\n+    template <class U> // { dg-message \"note: redeclared here as\" }\n+    friend struct S;\n };\n \n S<0> s;"}, {"sha": "7596513acc0bbad2e257785b0270f0b3f91e0cd2", "filename": "gcc/testsuite/g++.old-deja/g++.pt/redecl1.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe548eb8436f3906e6a3c6e3e8707d24e60ec0fa/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fredecl1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe548eb8436f3906e6a3c6e3e8707d24e60ec0fa/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fredecl1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fredecl1.C?ref=fe548eb8436f3906e6a3c6e3e8707d24e60ec0fa", "patch": "@@ -9,14 +9,14 @@ struct S1 {}; // { dg-error \"redeclared\" } used 1 template parameter\n template <class T = int> // { dg-message \"original definition\" }\n struct S2; \n \n-template <class T = int>\n-struct S2; // { dg-error \"redefinition of default\" } \n+template <class T = int> // { dg-error \"redefinition of default\" } \n+struct S2;\n \n template <class T> // { dg-error \"template parameter\" } \n struct S3;\n \n-template <int I>\n-struct S3; // { dg-message \"note: redeclared here\" } \n+template <int I> // { dg-message \"note: redeclared here\" } \n+struct S3;\n \n-template <template <class T> class C>\n-struct S3; // { dg-message \"note: redeclared here\" } \n+template <template <class T> class C> // { dg-message \"note: redeclared here\" } \n+struct S3;"}]}