{"sha": "db8cb48e64684efc2956b1229e9b1fbac558229a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI4Y2I0OGU2NDY4NGVmYzI5NTZiMTIyOWU5YjFmYmFjNTU4MjI5YQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2000-03-29T09:54:31Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2000-03-29T09:54:31Z"}, "message": "flags.h (flag_optimize_sibling_calls): Declare.\n\n\t* flags.h (flag_optimize_sibling_calls): Declare.\n\t* calls.c (expand_call): Fail sibcall when\n\t!flag_optimize_sibling_calls\n\t* invoke.texi (flag_optimize_sibling_calls): Document.\n\t* toplev.c (flag_optimize_sibling_calls): New global variable.\n\t(f_options): Add flag_optimize_sibling_calls.\n\t(rest_of_compilation): Conditionize\n\toptimize_sibling_and_tail_recursive_calls by\n\tflag_optimize_sibling_calls.\n\t(main): Set flag_optimize_sibling_calls for -O2.\n\t* stmt.c (expand_return): Conditionize tail recursion by\n\tflag_optimize_sibling_calls.\n\nFrom-SVN: r32802", "tree": {"sha": "6115adcb32b8d779e6fc736f4b16ea206907a22e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6115adcb32b8d779e6fc736f4b16ea206907a22e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db8cb48e64684efc2956b1229e9b1fbac558229a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db8cb48e64684efc2956b1229e9b1fbac558229a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db8cb48e64684efc2956b1229e9b1fbac558229a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db8cb48e64684efc2956b1229e9b1fbac558229a/comments", "author": null, "committer": null, "parents": [{"sha": "402eec872f73eebdbfb05cf4bbb133ed9af3460a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/402eec872f73eebdbfb05cf4bbb133ed9af3460a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/402eec872f73eebdbfb05cf4bbb133ed9af3460a"}], "stats": {"total": 39, "additions": 34, "deletions": 5}, "files": [{"sha": "226c83b40a28e5f6cc9f38d156eb9515e6c93c77", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db8cb48e64684efc2956b1229e9b1fbac558229a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db8cb48e64684efc2956b1229e9b1fbac558229a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db8cb48e64684efc2956b1229e9b1fbac558229a", "patch": "@@ -1,3 +1,18 @@\n+Wed Mar 29 11:51:13 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n+\n+\t* flags.h (flag_optimize_sibling_calls): Declare.\n+\t* calls.c (expand_call): Fail sibcall when\n+\t!flag_optimize_sibling_calls\n+\t* invoke.texi (flag_optimize_sibling_calls): Document.\n+\t* toplev.c (flag_optimize_sibling_calls): New global variable.\n+\t(f_options): Add flag_optimize_sibling_calls.\n+\t(rest_of_compilation): Conditionize\n+\toptimize_sibling_and_tail_recursive_calls by\n+\tflag_optimize_sibling_calls.\n+\t(main): Set flag_optimize_sibling_calls for -O2.\n+\t* stmt.c (expand_return): Conditionize tail recursion by\n+\tflag_optimize_sibling_calls.\n+\n 2000-03-29  Richard Henderson  <rth@cygnus.com>\n \n \t* config/i386/att.h (LOCAL_LABEL_PREFIX): Define."}, {"sha": "a978dd453214ef359b6e90703c02928677a989c3", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db8cb48e64684efc2956b1229e9b1fbac558229a/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db8cb48e64684efc2956b1229e9b1fbac558229a/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=db8cb48e64684efc2956b1229e9b1fbac558229a", "patch": "@@ -2034,7 +2034,7 @@ expand_call (exp, target, ignore)\n      the call.  */\n \n   try_tail_call = 0;\n-  if (optimize >= 2\n+  if (flag_optimize_sibling_calls\n       && currently_expanding_call == 1\n       && stmt_loop_nest_empty ()\n       && ! any_pending_cleanups (1))"}, {"sha": "81f5bda4c8bf6aff28279ffeee004f29a4a2fa22", "filename": "gcc/flags.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db8cb48e64684efc2956b1229e9b1fbac558229a/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db8cb48e64684efc2956b1229e9b1fbac558229a/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=db8cb48e64684efc2956b1229e9b1fbac558229a", "patch": "@@ -299,6 +299,10 @@ extern int flag_volatile_static;\n \n extern int flag_fast_math;\n \n+/* Nonzero allows GCC to optimize sibling and tail recursive calls.  */\n+\n+extern int flag_optimize_sibling_calls;\n+\n /* Nonzero means the front end generally wants `errno' maintained by math\n    operations, like built-in SQRT, unless overridden by flag_fast_math.  */\n "}, {"sha": "eb2696131d9c0a85f0610725c245d75c0e4928a6", "filename": "gcc/invoke.texi", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db8cb48e64684efc2956b1229e9b1fbac558229a/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db8cb48e64684efc2956b1229e9b1fbac558229a/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=db8cb48e64684efc2956b1229e9b1fbac558229a", "patch": "@@ -164,8 +164,8 @@ in the following sections.\n -finline-functions  -finline-limit=@var{n}  -fkeep-inline-functions\n -fmove-all-movables  -fno-default-inline  -fno-defer-pop\n -fno-function-cse  -fno-inline  -fno-peephole\n--fomit-frame-pointer  -foptimize-register-moves  -fregmove\n--frerun-cse-after-loop  -frerun-loop-opt  -freduce-all-givs\n+-fomit-frame-pointer  -foptimize-register-moves -foptimize-sibling-calls\n+-fregmove -frerun-cse-after-loop  -frerun-loop-opt  -freduce-all-givs\n -fschedule-insns  -fschedule-insns2  -fstrength-reduce\n -fstrict-aliasing  -fthread-jumps  -funroll-all-loops\n -funroll-loops\n@@ -2461,6 +2461,9 @@ restore frame pointers; it also makes an extra register available\n in many functions.  @strong{It also makes debugging impossible on\n some machines.}\n \n+@item -foptimize-sibling-calls\n+Optimize sibling and tail recursive calls.\n+\n @ifset INTERNALS\n On some machines, such as the Vax, this flag has no effect, because\n the standard calling sequence automatically handles the frame pointer"}, {"sha": "f807554de151d4dddaec827e5055edde7c6860c8", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db8cb48e64684efc2956b1229e9b1fbac558229a/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db8cb48e64684efc2956b1229e9b1fbac558229a/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=db8cb48e64684efc2956b1229e9b1fbac558229a", "patch": "@@ -2872,7 +2872,7 @@ expand_return (retval)\n     }\n \n   /* Attempt to optimize the call if it is tail recursive.  */\n-  if (optimize\n+  if (flag_optimize_sibling_calls\n       && retval_rhs != NULL_TREE\n       && frame_offset == 0\n       && TREE_CODE (retval_rhs) == CALL_EXPR"}, {"sha": "0b06ae2be8ab73c75eddabcfc3691b917bc02086", "filename": "gcc/toplev.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db8cb48e64684efc2956b1229e9b1fbac558229a/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db8cb48e64684efc2956b1229e9b1fbac558229a/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=db8cb48e64684efc2956b1229e9b1fbac558229a", "patch": "@@ -519,6 +519,10 @@ int flag_no_peephole = 0;\n \n int flag_fast_math = 0;\n \n+/* Nonzero allows GCC to optimize sibling and tail recursive calls.  */\n+\n+int flag_optimize_sibling_calls = 0;\n+\n /* Nonzero means the front end generally wants `errno' maintained by math\n    operations, like built-in SQRT, unless overridden by flag_fast_math.  */\n \n@@ -863,6 +867,8 @@ lang_independent_options f_options[] =\n    \"Defer popping functions args from stack until later\" },\n   {\"omit-frame-pointer\", &flag_omit_frame_pointer, 1,\n    \"When possible do not generate stack frames\"},\n+  {\"optimize-sibling-calls\", &flag_optimize_sibling_calls, 1,\n+   \"Optimize sibling and tail recursive calls\" },\n   {\"cse-follow-jumps\", &flag_cse_follow_jumps, 1,\n    \"When running CSE, follow jumps to their targets\" },\n   {\"cse-skip-blocks\", &flag_cse_skip_blocks, 1,\n@@ -2991,7 +2997,7 @@ rest_of_compilation (decl)\n   /* We may have potential sibling or tail recursion sites.  Select one\n      (of possibly multiple) methods of performing the call.  */\n   init_EXPR_INSN_LIST_cache ();\n-  if (optimize)\n+  if (flag_optimize_sibling_calls)\n     optimize_sibling_and_tail_recursive_calls ();\n   \n   if (ggc_p)\n@@ -4733,6 +4739,7 @@ main (argc, argv)\n \n   if (optimize >= 2)\n     {\n+      flag_optimize_sibling_calls = 1;\n       flag_cse_follow_jumps = 1;\n       flag_cse_skip_blocks = 1;\n       flag_gcse = 1;"}]}