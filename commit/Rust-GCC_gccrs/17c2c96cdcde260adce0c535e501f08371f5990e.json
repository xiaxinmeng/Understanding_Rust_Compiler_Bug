{"sha": "17c2c96cdcde260adce0c535e501f08371f5990e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdjMmM5NmNkY2RlMjYwYWRjZTBjNTM1ZTUwMWYwODM3MWY1OTkwZQ==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2008-01-20T06:33:49Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2008-01-20T06:33:49Z"}, "message": "inquire.c (inquire_via_unit): If a unit is opened...\n\n2008-01-19  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\t* io/inquire.c (inquire_via_unit): If a unit is opened, return values\n\taccording to the open action for DIRECT, FORMATTED, and\tUNFORMATTED.\n\t(inquire_via_filename): Return \"UNKNOWN\" for SEQUENTIAL, DIRECT,\n\tFORAMATTED, and UNFORMATTED inquiries.\n\t* io/unix.c (inquire_sequential): Return \"UNKNOWN\" when appropriate\n\tfor files that are not opened. (inquire_direct): Same.\n\t(inquire_formatted): Same.\n\nFrom-SVN: r131672", "tree": {"sha": "dedbc43dcc55e290acd9a5c365727c56e2e2ac08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dedbc43dcc55e290acd9a5c365727c56e2e2ac08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17c2c96cdcde260adce0c535e501f08371f5990e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17c2c96cdcde260adce0c535e501f08371f5990e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17c2c96cdcde260adce0c535e501f08371f5990e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17c2c96cdcde260adce0c535e501f08371f5990e/comments", "author": null, "committer": null, "parents": [{"sha": "e08c673e0571253b8624c8c5d9a8886109c1adb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e08c673e0571253b8624c8c5d9a8886109c1adb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e08c673e0571253b8624c8c5d9a8886109c1adb2"}], "stats": {"total": 92, "additions": 72, "deletions": 20}, "files": [{"sha": "f2c5a43f5b0633f60221446c1ed9678a0c19f732", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c2c96cdcde260adce0c535e501f08371f5990e/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c2c96cdcde260adce0c535e501f08371f5990e/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=17c2c96cdcde260adce0c535e501f08371f5990e", "patch": "@@ -1,3 +1,13 @@\n+2008-01-19  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\t* io/inquire.c (inquire_via_unit): If a unit is opened, return values\n+\taccording to the open action for DIRECT, FORMATTED, and\tUNFORMATTED.\n+\t(inquire_via_filename): Return \"UNKNOWN\" for SEQUENTIAL, DIRECT,\n+\tFORAMATTED, and UNFORMATTED inquiries.\n+\t* io/unix.c (inquire_sequential): Return \"UNKNOWN\" when appropriate\n+\tfor files that are not opened. (inquire_direct): Same.\n+\t(inquire_formatted): Same.\n+\t\n 2008-01-18  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \t* io/transfer.c (formatted_transfer_scalar): Set max_pos to the greater"}, {"sha": "ec462858f67f9029a718b0eda008b71ff69e13d1", "filename": "libgfortran/io/inquire.c", "status": "modified", "additions": 59, "deletions": 17, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c2c96cdcde260adce0c535e501f08371f5990e/libgfortran%2Fio%2Finquire.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c2c96cdcde260adce0c535e501f08371f5990e/libgfortran%2Fio%2Finquire.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Finquire.c?ref=17c2c96cdcde260adce0c535e501f08371f5990e", "patch": "@@ -99,21 +99,39 @@ inquire_via_unit (st_parameter_inquire *iqp, gfc_unit * u)\n       if (u == NULL)\n \tp = inquire_sequential (NULL, 0);\n       else\n-\t{\n-          /* disallow an open direct access file to be accessed sequentially */\n-          if (u->flags.access == ACCESS_DIRECT)\n-            p = \"NO\";\n-          else   \n-            p = inquire_sequential (u->file, u->file_len);\n-\t}\n+\tswitch (u->flags.access)\n+\t  {\n+\t  case ACCESS_DIRECT:\n+\t  case ACCESS_STREAM:\n+\t    p = \"NO\";\n+\t    break;\n+\t  case ACCESS_SEQUENTIAL:\n+\t    p = \"YES\";\n+\t    break;\n+\t  default:\n+\t    internal_error (&iqp->common, \"inquire_via_unit(): Bad access\");\n+\t  }\n \n       cf_strcpy (iqp->sequential, iqp->sequential_len, p);\n     }\n \n   if ((cf & IOPARM_INQUIRE_HAS_DIRECT) != 0)\n     {\n-      p = (u == NULL) ? inquire_direct (NULL, 0) :\n-\tinquire_direct (u->file, u->file_len);\n+      if (u == NULL)\n+\tp = inquire_direct (NULL, 0);\n+      else\n+\tswitch (u->flags.access)\n+\t  {\n+\t  case ACCESS_SEQUENTIAL:\n+\t  case ACCESS_STREAM:\n+\t    p = \"NO\";\n+\t    break;\n+\t  case ACCESS_DIRECT:\n+\t    p = \"YES\";\n+\t    break;\n+\t  default:\n+\t    internal_error (&iqp->common, \"inquire_via_unit(): Bad access\");\n+\t  }\n \n       cf_strcpy (iqp->direct, iqp->direct_len, p);\n     }\n@@ -140,16 +158,40 @@ inquire_via_unit (st_parameter_inquire *iqp, gfc_unit * u)\n \n   if ((cf & IOPARM_INQUIRE_HAS_FORMATTED) != 0)\n     {\n-      p = (u == NULL) ? inquire_formatted (NULL, 0) :\n-\tinquire_formatted (u->file, u->file_len);\n+      if (u == NULL)\n+\tp = inquire_formatted (NULL, 0);\n+      else\n+\tswitch (u->flags.form)\n+\t  {\n+\t  case FORM_FORMATTED:\n+\t    p = \"YES\";\n+\t    break;\n+\t  case FORM_UNFORMATTED:\n+\t    p = \"NO\";\n+\t    break;\n+\t  default:\n+\t    internal_error (&iqp->common, \"inquire_via_unit(): Bad form\");\n+\t  }\n \n       cf_strcpy (iqp->formatted, iqp->formatted_len, p);\n     }\n \n   if ((cf & IOPARM_INQUIRE_HAS_UNFORMATTED) != 0)\n     {\n-      p = (u == NULL) ? inquire_unformatted (NULL, 0) :\n-\tinquire_unformatted (u->file, u->file_len);\n+      if (u == NULL)\n+\tp = inquire_unformatted (NULL, 0);\n+      else\n+\tswitch (u->flags.form)\n+\t  {\n+\t  case FORM_FORMATTED:\n+\t    p = \"NO\";\n+\t    break;\n+\t  case FORM_UNFORMATTED:\n+\t    p = \"YES\";\n+\t    break;\n+\t  default:\n+\t    internal_error (&iqp->common, \"inquire_via_unit(): Bad form\");\n+\t  }\n \n       cf_strcpy (iqp->unformatted, iqp->unformatted_len, p);\n     }\n@@ -359,13 +401,13 @@ inquire_via_filename (st_parameter_inquire *iqp)\n \n   if ((cf & IOPARM_INQUIRE_HAS_SEQUENTIAL) != 0)\n     {\n-      p = inquire_sequential (iqp->file, iqp->file_len);\n+      p = \"UNKNOWN\";\n       cf_strcpy (iqp->sequential, iqp->sequential_len, p);\n     }\n \n   if ((cf & IOPARM_INQUIRE_HAS_DIRECT) != 0)\n     {\n-      p = inquire_direct (iqp->file, iqp->file_len);\n+      p = \"UNKNOWN\";\n       cf_strcpy (iqp->direct, iqp->direct_len, p);\n     }\n \n@@ -374,13 +416,13 @@ inquire_via_filename (st_parameter_inquire *iqp)\n \n   if ((cf & IOPARM_INQUIRE_HAS_FORMATTED) != 0)\n     {\n-      p = inquire_formatted (iqp->file, iqp->file_len);\n+      p = \"UNKNOWN\";\n       cf_strcpy (iqp->formatted, iqp->formatted_len, p);\n     }\n \n   if ((cf & IOPARM_INQUIRE_HAS_UNFORMATTED) != 0)\n     {\n-      p = inquire_unformatted (iqp->file, iqp->file_len);\n+      p = \"UNKNOWN\";\n       cf_strcpy (iqp->unformatted, iqp->unformatted_len, p);\n     }\n "}, {"sha": "d33c11091a0c4033e27300f9ec3c531f19624392", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c2c96cdcde260adce0c535e501f08371f5990e/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c2c96cdcde260adce0c535e501f08371f5990e/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=17c2c96cdcde260adce0c535e501f08371f5990e", "patch": "@@ -1806,7 +1806,7 @@ inquire_sequential (const char *string, int len)\n \n   if (S_ISREG (statbuf.st_mode) ||\n       S_ISCHR (statbuf.st_mode) || S_ISFIFO (statbuf.st_mode))\n-    return yes;\n+    return unknown;\n \n   if (S_ISDIR (statbuf.st_mode) || S_ISBLK (statbuf.st_mode))\n     return no;\n@@ -1829,7 +1829,7 @@ inquire_direct (const char *string, int len)\n     return unknown;\n \n   if (S_ISREG (statbuf.st_mode) || S_ISBLK (statbuf.st_mode))\n-    return yes;\n+    return unknown;\n \n   if (S_ISDIR (statbuf.st_mode) ||\n       S_ISCHR (statbuf.st_mode) || S_ISFIFO (statbuf.st_mode))\n@@ -1855,7 +1855,7 @@ inquire_formatted (const char *string, int len)\n   if (S_ISREG (statbuf.st_mode) ||\n       S_ISBLK (statbuf.st_mode) ||\n       S_ISCHR (statbuf.st_mode) || S_ISFIFO (statbuf.st_mode))\n-    return yes;\n+    return unknown;\n \n   if (S_ISDIR (statbuf.st_mode))\n     return no;"}]}