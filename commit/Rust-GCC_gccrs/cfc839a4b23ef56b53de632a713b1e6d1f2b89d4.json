{"sha": "cfc839a4b23ef56b53de632a713b1e6d1f2b89d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZjODM5YTRiMjNlZjU2YjUzZGU2MzJhNzEzYjFlNmQxZjJiODlkNA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-10-27T21:15:06Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-10-27T21:15:06Z"}, "message": "trans.c (gigi): Fix formatting issues.\n\n\t* gcc-interface/trans.c (gigi): Fix formatting issues.\n\t(build_raise_check): Likewise.\n\t(gnat_to_gnu): Likewise.\n\t* gcc-interface/utils2.c (build_call_raise_range): Likewise.\n\t(build_call_raise_column): Likewise.\n\nFrom-SVN: r166017", "tree": {"sha": "e922f3da292497078c322dcf4f013aefb0052217", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e922f3da292497078c322dcf4f013aefb0052217"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfc839a4b23ef56b53de632a713b1e6d1f2b89d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfc839a4b23ef56b53de632a713b1e6d1f2b89d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfc839a4b23ef56b53de632a713b1e6d1f2b89d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfc839a4b23ef56b53de632a713b1e6d1f2b89d4/comments", "author": null, "committer": null, "parents": [{"sha": "4a8f6a635a690d530395126dadab421d52fc0d13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a8f6a635a690d530395126dadab421d52fc0d13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a8f6a635a690d530395126dadab421d52fc0d13"}], "stats": {"total": 88, "additions": 50, "deletions": 38}, "files": [{"sha": "1d27923619d84c4476ffad53480274c270ec1407", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc839a4b23ef56b53de632a713b1e6d1f2b89d4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc839a4b23ef56b53de632a713b1e6d1f2b89d4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cfc839a4b23ef56b53de632a713b1e6d1f2b89d4", "patch": "@@ -1,3 +1,11 @@\n+2010-10-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (gigi): Fix formatting issues.\n+\t(build_raise_check): Likewise.\n+\t(gnat_to_gnu): Likewise.\n+\t* gcc-interface/utils2.c (build_call_raise_range): Likewise.\n+\t(build_call_raise_column): Likewise.\n+\n 2010-10-26  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_ch5.adb, exp_prag.adb, sem_ch3.adb, exp_atag.adb, layout.adb,"}, {"sha": "39dc0284d11b410874dcce98e471139a13aa708e", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 38, "deletions": 34, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc839a4b23ef56b53de632a713b1e6d1f2b89d4/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc839a4b23ef56b53de632a713b1e6d1f2b89d4/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=cfc839a4b23ef56b53de632a713b1e6d1f2b89d4", "patch": "@@ -469,13 +469,12 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n \t\t\t\t\t\t      integer_type_node,\n \t\t\t\t\t\t      t))),\n \t   NULL_TREE, false, true, true, NULL, Empty);\n-\n-      for (i = 0; i < (int) ARRAY_SIZE (gnat_raise_decls); i++)\n-\tgnat_raise_decls[i] = decl;\n       TREE_THIS_VOLATILE (decl) = 1;\n       TREE_SIDE_EFFECTS (decl) = 1;\n       TREE_TYPE (decl)\n \t= build_qualified_type (TREE_TYPE (decl), TYPE_QUAL_VOLATILE);\n+      for (i = 0; i < (int) ARRAY_SIZE (gnat_raise_decls); i++)\n+\tgnat_raise_decls[i] = decl;\n     }\n   else\n     {\n@@ -647,37 +646,42 @@ build_raise_check (int check, tree void_tree, enum exception_info_kind kind)\n   if (kind != exception_simple)\n     {\n       sprintf (name, \"__gnat_rcheck_%.2d_ext\", check);\n-      result = create_subprog_decl\n-\t(get_identifier (name), NULL_TREE,\n-\t build_function_type\n+      result\n+\t= create_subprog_decl\n+\t  (get_identifier (name), NULL_TREE,\n+\t   build_function_type\n \t   (void_type_node,\n \t    tree_cons\n-\t      (NULL_TREE,\n-\t       build_pointer_type (unsigned_char_type_node),\n-\t       tree_cons (NULL_TREE, integer_type_node,\n-\t\t tree_cons (NULL_TREE, integer_type_node,\n-\t\t   kind == exception_column ? void_tree :\n-\t\t     tree_cons (NULL_TREE, integer_type_node,\n-\t\t       tree_cons (NULL_TREE, integer_type_node, void_tree)))))),\n-\t NULL_TREE, false, true, true, NULL, Empty);\n+\t    (NULL_TREE, build_pointer_type (unsigned_char_type_node),\n+\t     tree_cons (NULL_TREE, integer_type_node,\n+\t\t\ttree_cons (NULL_TREE, integer_type_node,\n+\t\t\t\t   kind == exception_column\n+\t\t\t\t   ? void_tree\n+\t\t\t\t   : tree_cons (NULL_TREE, integer_type_node,\n+\t\t\t\t\t\ttree_cons (NULL_TREE,\n+\t\t\t\t\t\t\t   integer_type_node,\n+\t\t\t\t\t\t\t   void_tree)))))),\n+\t   NULL_TREE, false, true, true, NULL, Empty);\n     }\n   else\n     {\n       sprintf (name, \"__gnat_rcheck_%.2d\", check);\n-      result = create_subprog_decl\n-\t(get_identifier (name), NULL_TREE,\n-\t build_function_type\n+      result\n+\t= create_subprog_decl\n+\t  (get_identifier (name), NULL_TREE,\n+\t   build_function_type\n \t   (void_type_node,\n \t    tree_cons\n-\t      (NULL_TREE,\n-\t       build_pointer_type (unsigned_char_type_node),\n-\t       tree_cons (NULL_TREE, integer_type_node, void_tree))),\n-\t NULL_TREE, false, true, true, NULL, Empty);\n+\t    (NULL_TREE, build_pointer_type (unsigned_char_type_node),\n+\t     tree_cons (NULL_TREE, integer_type_node, void_tree))),\n+\t   NULL_TREE, false, true, true, NULL, Empty);\n     }\n+\n   TREE_THIS_VOLATILE (result) = 1;\n   TREE_SIDE_EFFECTS (result) = 1;\n   TREE_TYPE (result)\n     = build_qualified_type (TREE_TYPE (result), TYPE_QUAL_VOLATILE);\n+\n   return result;\n }\n \f\n@@ -5602,8 +5606,8 @@ gnat_to_gnu (Node_Id gnat_node)\n     case N_Raise_Program_Error:\n     case N_Raise_Storage_Error:\n       {\n-\tint reason = UI_To_Int (Reason (gnat_node));\n-\tNode_Id cond = Condition (gnat_node);\n+\tconst int reason = UI_To_Int (Reason (gnat_node));\n+\tconst Node_Id cond = Condition (gnat_node);\n \tbool handled = false;\n \n \tif (type_annotate_only)\n@@ -5622,8 +5626,8 @@ gnat_to_gnu (Node_Id gnat_node)\n \t  {\n \t    if (reason == CE_Access_Check_Failed)\n \t      {\n-\t\thandled = true;\n \t\tgnu_result = build_call_raise_column (reason, gnat_node);\n+\t\thandled = true;\n \t      }\n \t    else if ((reason == CE_Index_Check_Failed\n \t\t      || reason == CE_Range_Check_Failed\n@@ -5640,12 +5644,14 @@ gnat_to_gnu (Node_Id gnat_node)\n \t\t    && Known_Esize (type)\n \t\t    && UI_To_Int (Esize (type)) <= 32)\n \t\t  {\n+\t\t    Node_Id right_op = Right_Opnd (op);\n+\t\t    gnu_result\n+\t\t      = build_call_raise_range\n+\t\t        (reason, gnat_node,\n+\t\t         gnat_to_gnu (index),                  /* index */\n+\t\t         gnat_to_gnu (Low_Bound (right_op)),   /* first */\n+\t\t         gnat_to_gnu (High_Bound (right_op))); /* last  */\n \t\t    handled = true;\n-\t\t    gnu_result = build_call_raise_range\n-\t\t      (reason, gnat_node,\n-\t\t       gnat_to_gnu (index),                         /* index */\n-\t\t       gnat_to_gnu (Low_Bound (Right_Opnd (op))),   /* first */\n-\t\t       gnat_to_gnu (High_Bound (Right_Opnd (op)))); /* last  */\n \t\t  }\n \t      }\n \t  }\n@@ -5654,20 +5660,18 @@ gnat_to_gnu (Node_Id gnat_node)\n \t  {\n \t    set_expr_location_from_node (gnu_result, gnat_node);\n \t    gnu_result = build3 (COND_EXPR, void_type_node,\n-\t    \t\t\t gnat_to_gnu (cond),\n+\t\t\t\t gnat_to_gnu (cond),\n \t\t\t\t gnu_result, alloc_stmt_list ());\n \t  }\n \telse\n \t  {\n \t    gnu_result = build_call_raise (reason, gnat_node, kind);\n \n-\t    /* If the type is VOID, this is a statement, so we need to\n-\t       generate the code for the call.  Handle a Condition, if there\n-\t       is one.  */\n+\t    /* If the type is VOID, this is a statement, so we need to generate\n+\t       the code for the call.  Handle a Condition, if there is one.  */\n \t    if (TREE_CODE (gnu_result_type) == VOID_TYPE)\n \t      {\n \t\tset_expr_location_from_node (gnu_result, gnat_node);\n-\n \t\tif (Present (cond))\n \t\t  gnu_result = build3 (COND_EXPR, void_type_node,\n \t\t\t\t       gnat_to_gnu (cond),"}, {"sha": "8088d53a1b048f55082a5cbed16bdf98e9fbeeb2", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc839a4b23ef56b53de632a713b1e6d1f2b89d4/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc839a4b23ef56b53de632a713b1e6d1f2b89d4/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=cfc839a4b23ef56b53de632a713b1e6d1f2b89d4", "patch": "@@ -1590,8 +1590,8 @@ build_call_raise_range (int msg, Node_Id gnat_node,\n \t\t\t\t\t   build_index_type (size_int (len)));\n \n   call = build_call_nary (TREE_TYPE (TREE_TYPE (fndecl)),\n-                          build_unary_op (ADDR_EXPR, NULL_TREE, fndecl),\n-                          6,\n+\t\t\t  build_unary_op (ADDR_EXPR, NULL_TREE, fndecl),\n+\t\t\t  6,\n \t\t\t  build1 (ADDR_EXPR,\n \t\t\t\t  build_pointer_type (unsigned_char_type_node),\n \t\t\t\t  filename),\n@@ -1644,8 +1644,8 @@ build_call_raise_column (int msg, Node_Id gnat_node)\n \t\t\t\t\t   build_index_type (size_int (len)));\n \n   call = build_call_nary (TREE_TYPE (TREE_TYPE (fndecl)),\n-                          build_unary_op (ADDR_EXPR, NULL_TREE, fndecl),\n-                          3,\n+\t\t\t  build_unary_op (ADDR_EXPR, NULL_TREE, fndecl),\n+\t\t\t  3,\n \t\t\t  build1 (ADDR_EXPR,\n \t\t\t\t  build_pointer_type (unsigned_char_type_node),\n \t\t\t\t  filename),"}]}