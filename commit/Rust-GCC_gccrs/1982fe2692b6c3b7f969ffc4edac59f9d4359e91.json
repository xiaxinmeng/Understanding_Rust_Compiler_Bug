{"sha": "1982fe2692b6c3b7f969ffc4edac59f9d4359e91", "node_id": "C_kwDOANBUbNoAKDE5ODJmZTI2OTJiNmMzYjdmOTY5ZmZjNGVkYWM1OWY5ZDQzNTllOTE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-06-03T09:41:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-06-03T09:42:35Z"}, "message": "match.pd: Optimize __builtin_mul_overflow_p (x, cst, (stype)0) [PR105777]\n\nThe following patch is an incremental change to the PR30314 enhancement,\nthis one handles signed types.\nFor signed types (but still, the same for 1st and result element type\nand non-zero constant that fits into that type), we actually need to\nwatch for overflow in direction to positive and negative infinity\nand it also depends on whether the cst operand is positive or negative.\nFor __builtin_mul_overflow_p (x, cst, (stype) 0):\nFor cst > 0, we can simplify it to:\nx > INT_MAX / cst || x < INT_MIN / cst\naka:\nx + (unsigned) (INT_MIN / cst) > (unsigned) (INT_MAX / cst) - (unsigned) (INT_MIN / cst)\nand for cst < 0 to:\nx < INT_MAX / cst || x > INT_MIN / cst\naka:\nx + (unsigned) (INT_MAX / cst) > (unsigned) (INT_MIN / cst) - (unsigned) (INT_MAX / cst)\n\nAdditionally, I've added executable testcases, so we don't just check for\nthe optimization to be performed, but also that it is correct (done that\neven for the other PR's testcase).\n\n2022-06-03  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/30314\n\tPR middle-end/105777\n\t* match.pd (__builtin_mul_overflow_p (x, cst, (stype) 0) ->\n\tx > stype_max / cst || x < stype_min / cst): New simplification.\n\n\t* gcc.dg/tree-ssa/pr30314.c: Add noipa attribute to all functions.\n\t* gcc.dg/tree-ssa/pr105777.c: New test.\n\t* gcc.c-torture/execute/pr30314.c: New test.\n\t* gcc.c-torture/execute/pr105777.c: New test.", "tree": {"sha": "8f2ee8226b46aa7916a51f8748927ad3f2395ac1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f2ee8226b46aa7916a51f8748927ad3f2395ac1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1982fe2692b6c3b7f969ffc4edac59f9d4359e91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1982fe2692b6c3b7f969ffc4edac59f9d4359e91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1982fe2692b6c3b7f969ffc4edac59f9d4359e91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1982fe2692b6c3b7f969ffc4edac59f9d4359e91/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fd3c7063db52b8f509a9572ff8078a0f91176da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fd3c7063db52b8f509a9572ff8078a0f91176da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fd3c7063db52b8f509a9572ff8078a0f91176da"}], "stats": {"total": 208, "additions": 201, "deletions": 7}, "files": [{"sha": "44a385b912d43cb1a82b9b297b78919fcd1a0d4c", "filename": "gcc/match.pd", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1982fe2692b6c3b7f969ffc4edac59f9d4359e91/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1982fe2692b6c3b7f969ffc4edac59f9d4359e91/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=1982fe2692b6c3b7f969ffc4edac59f9d4359e91", "patch": "@@ -5970,15 +5970,39 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    (ovf @1 @0))))\n \n /* Optimize __builtin_mul_overflow_p (x, cst, (utype) 0) if all 3 types\n-   are unsigned to x > (umax / cst).  */\n+   are unsigned to x > (umax / cst).  Similarly for signed type, but\n+   in that case it needs to be outside of a range.  */\n (simplify\n  (imagpart (IFN_MUL_OVERFLOW:cs@2 @0 integer_nonzerop@1))\n   (if (INTEGRAL_TYPE_P (TREE_TYPE (@0))\n-       && TYPE_UNSIGNED (TREE_TYPE (@0))\n        && TYPE_MAX_VALUE (TREE_TYPE (@0))\n        && types_match (TREE_TYPE (@0), TREE_TYPE (TREE_TYPE (@2)))\n        && int_fits_type_p (@1, TREE_TYPE (@0)))\n-   (convert (gt @0 (trunc_div! { TYPE_MAX_VALUE (TREE_TYPE (@0)); } @1)))))\n+   (if (TYPE_UNSIGNED (TREE_TYPE (@0)))\n+    (convert (gt @0 (trunc_div! { TYPE_MAX_VALUE (TREE_TYPE (@0)); } @1)))\n+    (if (TYPE_MIN_VALUE (TREE_TYPE (@0)))\n+     (if (integer_minus_onep (@1))\n+      (convert (eq @0 { TYPE_MIN_VALUE (TREE_TYPE (@0)); }))\n+      (with\n+       {\n+\t tree lo = int_const_binop (TRUNC_DIV_EXPR,\n+\t\t\t\t    TYPE_MIN_VALUE (TREE_TYPE (@0)),\n+\t\t\t\t    fold_convert (TREE_TYPE (@0), @1));\n+\t tree hi = int_const_binop (TRUNC_DIV_EXPR,\n+\t\t\t\t    TYPE_MAX_VALUE (TREE_TYPE (@0)),\n+\t\t\t\t    fold_convert (TREE_TYPE (@0), @1));\n+\t tree etype = range_check_type (TREE_TYPE (@0));\n+\t if (etype)\n+\t   {\n+\t     if (wi::neg_p (wi::to_wide (@1)))\n+\t       std::swap (lo, hi);\n+\t     lo = fold_convert (etype, lo);\n+\t     hi = fold_convert (etype, hi);\n+\t     hi = int_const_binop (MINUS_EXPR, hi, lo);\n+\t   }\n+       }\n+       (if (etype)\n+        (convert (gt (minus (convert:etype @0) { lo; }) { hi; })))))))))\n \n /* Simplification of math builtins.  These rules must all be optimizations\n    as well as IL simplifications.  If there is a possibility that the new"}, {"sha": "4a217509e94c10a83457afb2ca869c9a5a8bc74a", "filename": "gcc/testsuite/gcc.c-torture/execute/pr105777.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1982fe2692b6c3b7f969ffc4edac59f9d4359e91/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr105777.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1982fe2692b6c3b7f969ffc4edac59f9d4359e91/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr105777.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr105777.c?ref=1982fe2692b6c3b7f969ffc4edac59f9d4359e91", "patch": "@@ -0,0 +1,73 @@\n+/* PR middle-end/105777 */\n+\n+#include \"../../gcc.dg/tree-ssa/pr105777.c\"\n+\n+int\n+main ()\n+{\n+  if (foo (0) != 0\n+      || foo (__INT_MAX__ / 35) != 0\n+      || foo (__INT_MAX__ / 35 + 1) != 1\n+      || foo (__INT_MAX__) != 1\n+      || foo ((-__INT_MAX__ - 1) / 35) != 0\n+      || foo ((-__INT_MAX__ - 1) / 35 - 1) != 1\n+      || foo (-__INT_MAX__ - 1) != 1)\n+    __builtin_abort ();\n+  if (bar (0) != 0\n+      || bar (__LONG_MAX__ / 35) != 0\n+      || bar (__LONG_MAX__ / 35 + 1) != 1\n+      || bar (__LONG_MAX__) != 1\n+      || bar ((-__LONG_MAX__ - 1) / 35) != 0\n+      || bar ((-__LONG_MAX__ - 1) / 35 - 1) != 1\n+      || bar (-__LONG_MAX__ - 1) != 1)\n+    __builtin_abort ();\n+  if (baz (0) != 0\n+      || baz (__INT_MAX__ / 42) != 0\n+      || baz (__INT_MAX__ / 42 + 1) != 1\n+      || baz (__INT_MAX__) != 1\n+      || baz ((-__INT_MAX__ - 1) / 42) != 0\n+      || baz ((-__INT_MAX__ - 1) / 42 - 1) != 1\n+      || baz (-__INT_MAX__ - 1) != 1)\n+    __builtin_abort ();\n+  if (qux (0) != 0\n+      || qux (__LONG_MAX__ / 42) != 0\n+      || qux (__LONG_MAX__ / 42 + 1) != 1\n+      || qux (__LONG_MAX__) != 1\n+      || qux ((-__LONG_MAX__ - 1) / 42) != 0\n+      || qux ((-__LONG_MAX__ - 1) / 42 - 1) != 1\n+      || qux (-__LONG_MAX__ - 1) != 1)\n+    __builtin_abort ();\n+  if (corge (0) != 0\n+      || corge (__INT_MAX__ / -39) != 0\n+      || corge (__INT_MAX__ / -39 - 1) != 1\n+      || corge (__INT_MAX__) != 1\n+      || corge ((-__INT_MAX__ - 1) / -39) != 0\n+      || corge ((-__INT_MAX__ - 1) / -39 + 1) != 1\n+      || corge (-__INT_MAX__ - 1) != 1)\n+    __builtin_abort ();\n+  if (garply (0) != 0\n+      || garply (__LONG_MAX__ / -39) != 0\n+      || garply (__LONG_MAX__ / -39 - 1) != 1\n+      || garply (__LONG_MAX__) != 1\n+      || garply ((-__LONG_MAX__ - 1) / -39) != 0\n+      || garply ((-__LONG_MAX__ - 1) / -39 + 1) != 1\n+      || garply (-__LONG_MAX__ - 1) != 1)\n+    __builtin_abort ();\n+  if (grault (0) != 0\n+      || grault (__INT_MAX__ / -46) != 0\n+      || grault (__INT_MAX__ / -46 - 1) != 1\n+      || grault (__INT_MAX__) != 1\n+      || grault ((-__INT_MAX__ - 1) / -46) != 0\n+      || grault ((-__INT_MAX__ - 1) / -46 + 1) != 1\n+      || grault (-__INT_MAX__ - 1) != 1)\n+    __builtin_abort ();\n+  if (waldo (0) != 0\n+      || waldo (__LONG_MAX__ / -46) != 0\n+      || waldo (__LONG_MAX__ / -46 - 1) != 1\n+      || waldo (__LONG_MAX__) != 1\n+      || waldo ((-__LONG_MAX__ - 1) / -46) != 0\n+      || waldo ((-__LONG_MAX__ - 1) / -46 + 1) != 1\n+      || waldo (-__LONG_MAX__ - 1) != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "e1d71e2a0db1627a060b75fc9c099975600b614c", "filename": "gcc/testsuite/gcc.c-torture/execute/pr30314.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1982fe2692b6c3b7f969ffc4edac59f9d4359e91/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr30314.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1982fe2692b6c3b7f969ffc4edac59f9d4359e91/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr30314.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr30314.c?ref=1982fe2692b6c3b7f969ffc4edac59f9d4359e91", "patch": "@@ -0,0 +1,29 @@\n+/* PR middle-end/30314 */\n+\n+#include \"../../gcc.dg/tree-ssa/pr30314.c\"\n+\n+int\n+main ()\n+{\n+  if (foo (0) != 0\n+      || foo (~0U / 35) != 0\n+      || foo (~0U / 35 + 1) != 1\n+      || foo (~0U) != 1)\n+    __builtin_abort ();\n+  if (bar (0) != 0\n+      || bar (~0UL / 35) != 0\n+      || bar (~0UL / 35 + 1) != 1\n+      || bar (~0UL) != 1)\n+    __builtin_abort ();\n+  if (baz (0) != 0\n+      || baz (~0U / 42) != 0\n+      || baz (~0U / 42 + 1) != 1\n+      || baz (~0U) != 1)\n+    __builtin_abort ();\n+  if (qux (0) != 0\n+      || qux (~0UL / 42) != 0\n+      || qux (~0UL / 42 + 1) != 1\n+      || qux (~0UL) != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "418708b8b92641800f31de8b34e87555f800c6a2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr105777.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1982fe2692b6c3b7f969ffc4edac59f9d4359e91/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr105777.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1982fe2692b6c3b7f969ffc4edac59f9d4359e91/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr105777.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr105777.c?ref=1982fe2692b6c3b7f969ffc4edac59f9d4359e91", "patch": "@@ -0,0 +1,68 @@\n+/* PR middle-end/105777 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-not \"\\.MUL_OVERFLOW \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \" \\\\+ 61356675;\" \"optimized\" { target int32 } } } */\n+/* { dg-final { scan-tree-dump \" > 122713350\" \"optimized\" { target int32 } } } */\n+/* { dg-final { scan-tree-dump \" \\\\+ 263524915338707880\" \"optimized\" { target lp64 } } } */\n+/* { dg-final { scan-tree-dump \" > 527049830677415760\" \"optimized\" { target lp64 } } } */\n+/* { dg-final { scan-tree-dump \" \\\\+ 51130563\" \"optimized\" { target int32 } } } */\n+/* { dg-final { scan-tree-dump \" > 102261126\" \"optimized\" { target int32 } } } */\n+/* { dg-final { scan-tree-dump \" \\\\+ 219604096115589900\" \"optimized\" { target lp64 } } } */\n+/* { dg-final { scan-tree-dump \" > 439208192231179800\" \"optimized\" { target lp64 } } } */\n+/* { dg-final { scan-tree-dump \" \\\\+ 55063683;\" \"optimized\" { target int32 } } } */\n+/* { dg-final { scan-tree-dump \" > 110127366\" \"optimized\" { target int32 } } } */\n+/* { dg-final { scan-tree-dump \" \\\\+ 236496718893712200\" \"optimized\" { target lp64 } } } */\n+/* { dg-final { scan-tree-dump \" > 472993437787424400\" \"optimized\" { target lp64 } } } */\n+/* { dg-final { scan-tree-dump \" \\\\+ 46684427\" \"optimized\" { target int32 } } } */\n+/* { dg-final { scan-tree-dump \" > 93368854\" \"optimized\" { target int32 } } } */\n+/* { dg-final { scan-tree-dump \" \\\\+ 200508087757712517\" \"optimized\" { target lp64 } } } */\n+/* { dg-final { scan-tree-dump \" > 401016175515425034\" \"optimized\" { target lp64 } } } */\n+\n+__attribute__((noipa)) int\n+foo (int x)\n+{\n+  return __builtin_mul_overflow_p (x, 35, 0);\n+}\n+\n+__attribute__((noipa)) int\n+bar (long int x)\n+{\n+  return __builtin_mul_overflow_p (x, 35L, 0L);\n+}\n+\n+__attribute__((noipa)) int\n+baz (int x)\n+{\n+  return __builtin_mul_overflow_p (42, x, 0);\n+}\n+\n+__attribute__((noipa)) int\n+qux (long int x)\n+{\n+  return __builtin_mul_overflow_p (42, x, 0L);\n+}\n+\n+__attribute__((noipa)) int\n+corge (int x)\n+{\n+  return __builtin_mul_overflow_p (x, -39, 0);\n+}\n+\n+__attribute__((noipa)) int\n+garply (long int x)\n+{\n+  return __builtin_mul_overflow_p (x, -39L, 0L);\n+}\n+\n+__attribute__((noipa)) int\n+grault (int x)\n+{\n+  return __builtin_mul_overflow_p (-46, x, 0);\n+}\n+\n+__attribute__((noipa)) int\n+waldo (long int x)\n+{\n+  return __builtin_mul_overflow_p (-46, x, 0L);\n+}"}, {"sha": "10b0b8587368113d2dd602c1ff74ed05cffc3d0f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr30314.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1982fe2692b6c3b7f969ffc4edac59f9d4359e91/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr30314.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1982fe2692b6c3b7f969ffc4edac59f9d4359e91/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr30314.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr30314.c?ref=1982fe2692b6c3b7f969ffc4edac59f9d4359e91", "patch": "@@ -7,25 +7,25 @@\n /* { dg-final { scan-tree-dump \" > 102261126\" \"optimized\" { target int32 } } } */\n /* { dg-final { scan-tree-dump \" > 439208192231179800\" \"optimized\" { target lp64 } } } */\n \n-int\n+__attribute__((noipa)) int\n foo (unsigned int x)\n {\n   return __builtin_mul_overflow_p (x, 35U, 0U);\n }\n \n-int\n+__attribute__((noipa)) int\n bar (unsigned long int x)\n {\n   return __builtin_mul_overflow_p (x, 35UL, 0UL);\n }\n \n-int\n+__attribute__((noipa)) int\n baz (unsigned int x)\n {\n   return __builtin_mul_overflow_p (42, x, 0U);\n }\n \n-int\n+__attribute__((noipa)) int\n qux (unsigned long int x)\n {\n   return __builtin_mul_overflow_p (42, x, 0UL);"}]}