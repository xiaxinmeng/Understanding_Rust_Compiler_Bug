{"sha": "63bc4e87340a250fb1068267ce635b2da51535e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNiYzRlODczNDBhMjUwZmIxMDY4MjY3Y2U2MzViMmRhNTE1MzVlNQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-05-02T07:57:59Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-05-02T07:57:59Z"}, "message": "c-tree.h (error_init): Remove declaration.\n\n\t* c-tree.h (error_init): Remove declaration.\n\t(pedwarn_init): Likewise.\n\t* c-typeck.c (error_init): Make static and move above.\n\t(pedwarn_init): Likewise.\n\t(warning_init): Move above.\n\t(maybe_warn_string_init): Likewise.\n\nFrom-SVN: r210001", "tree": {"sha": "db76bc80d6ef416ebd1316c430e932a7a24ef307", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db76bc80d6ef416ebd1316c430e932a7a24ef307"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63bc4e87340a250fb1068267ce635b2da51535e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63bc4e87340a250fb1068267ce635b2da51535e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63bc4e87340a250fb1068267ce635b2da51535e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63bc4e87340a250fb1068267ce635b2da51535e5/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed15c5984e10f6556dffdf397accff804bf60a7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed15c5984e10f6556dffdf397accff804bf60a7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed15c5984e10f6556dffdf397accff804bf60a7c"}], "stats": {"total": 143, "additions": 75, "deletions": 68}, "files": [{"sha": "e3c13fec9d2e780230d5d048c92710a60d98a973", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63bc4e87340a250fb1068267ce635b2da51535e5/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63bc4e87340a250fb1068267ce635b2da51535e5/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=63bc4e87340a250fb1068267ce635b2da51535e5", "patch": "@@ -1,3 +1,12 @@\n+2014-05-02  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-tree.h (error_init): Remove declaration.\n+\t(pedwarn_init): Likewise.\n+\t* c-typeck.c (error_init): Make static and move above.\n+\t(pedwarn_init): Likewise.\n+\t(warning_init): Move above.\n+\t(maybe_warn_string_init): Likewise.\n+\n 2014-05-01  Jeff Law  <law@redhat.com>\n \n \tRevert:"}, {"sha": "a6e732791254a83d6c9227b7e97af7da5a60705d", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63bc4e87340a250fb1068267ce635b2da51535e5/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63bc4e87340a250fb1068267ce635b2da51535e5/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=63bc4e87340a250fb1068267ce635b2da51535e5", "patch": "@@ -602,8 +602,6 @@ extern tree build_compound_expr (location_t, tree, tree);\n extern tree c_cast_expr (location_t, struct c_type_name *, tree);\n extern tree build_c_cast (location_t, tree, tree);\n extern void store_init_value (location_t, tree, tree, tree);\n-extern void error_init (const char *);\n-extern void pedwarn_init (location_t, int opt, const char *);\n extern void maybe_warn_string_init (tree, struct c_expr);\n extern void start_init (tree, tree, int);\n extern void finish_init (void);"}, {"sha": "b95fd895d4fdcb76dbd6c9cd6e9b8d9cf920bb1f", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 66, "deletions": 66, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63bc4e87340a250fb1068267ce635b2da51535e5/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63bc4e87340a250fb1068267ce635b2da51535e5/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=63bc4e87340a250fb1068267ce635b2da51535e5", "patch": "@@ -5542,6 +5542,72 @@ convert_to_anonymous_field (location_t location, tree type, tree rhs)\n   return ret;\n }\n \n+/* Issue an error message for a bad initializer component.\n+   GMSGID identifies the message.\n+   The component name is taken from the spelling stack.  */\n+\n+static void\n+error_init (const char *gmsgid)\n+{\n+  char *ofwhat;\n+\n+  /* The gmsgid may be a format string with %< and %>. */\n+  error (gmsgid);\n+  ofwhat = print_spelling ((char *) alloca (spelling_length () + 1));\n+  if (*ofwhat)\n+    error (\"(near initialization for %qs)\", ofwhat);\n+}\n+\n+/* Issue a pedantic warning for a bad initializer component.  OPT is\n+   the option OPT_* (from options.h) controlling this warning or 0 if\n+   it is unconditionally given.  GMSGID identifies the message.  The\n+   component name is taken from the spelling stack.  */\n+\n+static void\n+pedwarn_init (location_t location, int opt, const char *gmsgid)\n+{\n+  char *ofwhat;\n+\n+  /* The gmsgid may be a format string with %< and %>. */\n+  pedwarn (location, opt, gmsgid);\n+  ofwhat = print_spelling ((char *) alloca (spelling_length () + 1));\n+  if (*ofwhat)\n+    pedwarn (location, opt, \"(near initialization for %qs)\", ofwhat);\n+}\n+\n+/* Issue a warning for a bad initializer component.\n+\n+   OPT is the OPT_W* value corresponding to the warning option that\n+   controls this warning.  GMSGID identifies the message.  The\n+   component name is taken from the spelling stack.  */\n+\n+static void\n+warning_init (location_t loc, int opt, const char *gmsgid)\n+{\n+  char *ofwhat;\n+\n+  /* The gmsgid may be a format string with %< and %>. */\n+  warning_at (loc, opt, gmsgid);\n+  ofwhat = print_spelling ((char *) alloca (spelling_length () + 1));\n+  if (*ofwhat)\n+    warning_at (loc, opt, \"(near initialization for %qs)\", ofwhat);\n+}\n+\f\n+/* If TYPE is an array type and EXPR is a parenthesized string\n+   constant, warn if pedantic that EXPR is being used to initialize an\n+   object of type TYPE.  */\n+\n+void\n+maybe_warn_string_init (tree type, struct c_expr expr)\n+{\n+  if (pedantic\n+      && TREE_CODE (type) == ARRAY_TYPE\n+      && TREE_CODE (expr.value) == STRING_CST\n+      && expr.original_code != STRING_CST)\n+    pedwarn_init (input_location, OPT_Wpedantic,\n+\t\t  \"array initialized from parenthesized string constant\");\n+}\n+\n /* Convert value RHS to type TYPE as preparation for an assignment to\n    an lvalue of type TYPE.  If ORIGTYPE is not NULL_TREE, it is the\n    original type of RHS; this differs from TREE_TYPE (RHS) for enum\n@@ -6407,72 +6473,6 @@ print_spelling (char *buffer)\n   return buffer;\n }\n \n-/* Issue an error message for a bad initializer component.\n-   GMSGID identifies the message.\n-   The component name is taken from the spelling stack.  */\n-\n-void\n-error_init (const char *gmsgid)\n-{\n-  char *ofwhat;\n-\n-  /* The gmsgid may be a format string with %< and %>. */\n-  error (gmsgid);\n-  ofwhat = print_spelling ((char *) alloca (spelling_length () + 1));\n-  if (*ofwhat)\n-    error (\"(near initialization for %qs)\", ofwhat);\n-}\n-\n-/* Issue a pedantic warning for a bad initializer component.  OPT is\n-   the option OPT_* (from options.h) controlling this warning or 0 if\n-   it is unconditionally given.  GMSGID identifies the message.  The\n-   component name is taken from the spelling stack.  */\n-\n-void\n-pedwarn_init (location_t location, int opt, const char *gmsgid)\n-{\n-  char *ofwhat;\n-\n-  /* The gmsgid may be a format string with %< and %>. */\n-  pedwarn (location, opt, gmsgid);\n-  ofwhat = print_spelling ((char *) alloca (spelling_length () + 1));\n-  if (*ofwhat)\n-    pedwarn (location, opt, \"(near initialization for %qs)\", ofwhat);\n-}\n-\n-/* Issue a warning for a bad initializer component.\n-\n-   OPT is the OPT_W* value corresponding to the warning option that\n-   controls this warning.  GMSGID identifies the message.  The\n-   component name is taken from the spelling stack.  */\n-\n-static void\n-warning_init (location_t loc, int opt, const char *gmsgid)\n-{\n-  char *ofwhat;\n-\n-  /* The gmsgid may be a format string with %< and %>. */\n-  warning_at (loc, opt, gmsgid);\n-  ofwhat = print_spelling ((char *) alloca (spelling_length () + 1));\n-  if (*ofwhat)\n-    warning_at (loc, opt, \"(near initialization for %qs)\", ofwhat);\n-}\n-\f\n-/* If TYPE is an array type and EXPR is a parenthesized string\n-   constant, warn if pedantic that EXPR is being used to initialize an\n-   object of type TYPE.  */\n-\n-void\n-maybe_warn_string_init (tree type, struct c_expr expr)\n-{\n-  if (pedantic\n-      && TREE_CODE (type) == ARRAY_TYPE\n-      && TREE_CODE (expr.value) == STRING_CST\n-      && expr.original_code != STRING_CST)\n-    pedwarn_init (input_location, OPT_Wpedantic,\n-\t\t  \"array initialized from parenthesized string constant\");\n-}\n-\n /* Digest the parser output INIT as an initializer for type TYPE.\n    Return a C expression of type TYPE to represent the initial value.\n "}]}