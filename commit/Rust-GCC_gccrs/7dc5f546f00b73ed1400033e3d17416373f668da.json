{"sha": "7dc5f546f00b73ed1400033e3d17416373f668da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RjNWY1NDZmMDBiNzNlZDE0MDAwMzNlM2QxNzQxNjM3M2Y2NjhkYQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2007-08-14T08:40:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-08-14T08:40:24Z"}, "message": "par.ads, par.adb: Improve handling of extra right parens.\n\n2007-08-14  Robert Dewar  <dewar@adacore.com>\n\t    Ed Schonberg  <schonberg@adacore.com>\n\n\t* par.ads, par.adb: Improve handling of extra right parens.\n\t(Par): Remove flag From_Limited_With_Clause.\n\n\t* par-util.adb, par-ch3.adb: Improve error recovery for bad constraint\n\tImprove handling of extra right parens.\n\nFrom-SVN: r127423", "tree": {"sha": "fabf23842abeb1091a1d9edaa14c897620da39dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fabf23842abeb1091a1d9edaa14c897620da39dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7dc5f546f00b73ed1400033e3d17416373f668da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc5f546f00b73ed1400033e3d17416373f668da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dc5f546f00b73ed1400033e3d17416373f668da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc5f546f00b73ed1400033e3d17416373f668da/comments", "author": null, "committer": null, "parents": [{"sha": "3355aa3e72ad9cc9cad23709967d82e897fb6bdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3355aa3e72ad9cc9cad23709967d82e897fb6bdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3355aa3e72ad9cc9cad23709967d82e897fb6bdf"}], "stats": {"total": 79, "additions": 37, "deletions": 42}, "files": [{"sha": "53b3c35554b67765aab78cf2cd422cef048c16e1", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc5f546f00b73ed1400033e3d17416373f668da/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc5f546f00b73ed1400033e3d17416373f668da/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=7dc5f546f00b73ed1400033e3d17416373f668da", "patch": "@@ -61,15 +61,14 @@ package body Ch3 is\n       Done    : out Boolean;\n       In_Spec : Boolean);\n    --  Scans out a single declarative item, or, in the case of a declaration\n-   --  with a list of identifiers, a list of declarations, one for each of\n-   --  the identifiers in the list. The declaration or declarations scanned\n-   --  are appended to the given list. Done indicates whether or not there\n-   --  may be additional declarative items to scan. If Done is True, then\n-   --  a decision has been made that there are no more items to scan. If\n-   --  Done is False, then there may be additional declarations to scan.\n-   --  In_Spec is true if we are scanning a package declaration, and is used\n-   --  to generate an appropriate message if a statement is encountered in\n-   --  such a context.\n+   --  with a list of identifiers, a list of declarations, one for each of the\n+   --  identifiers in the list. The declaration or declarations scanned are\n+   --  appended to the given list. Done indicates whether or not there may be\n+   --  additional declarative items to scan. If Done is True, then a decision\n+   --  has been made that there are no more items to scan. If Done is False,\n+   --  then there may be additional declarations to scan. In_Spec is true if\n+   --  we are scanning a package declaration, and is used to generate an\n+   --  appropriate message if a statement is encountered in such a context.\n \n    procedure P_Identifier_Declarations\n      (Decls   : List_Id;\n@@ -2410,7 +2409,7 @@ package body Ch3 is\n    begin\n       Constraint_Node := New_Node (N_Digits_Constraint, Token_Ptr);\n       Scan; -- past DIGITS\n-      Expr_Node := P_Expression_No_Right_Paren;\n+      Expr_Node := P_Expression;\n       Check_Simple_Expression_In_Ada_83 (Expr_Node);\n       Set_Digits_Expression (Constraint_Node, Expr_Node);\n \n@@ -2442,7 +2441,7 @@ package body Ch3 is\n    begin\n       Constraint_Node := New_Node (N_Delta_Constraint, Token_Ptr);\n       Scan; -- past DELTA\n-      Expr_Node := P_Expression_No_Right_Paren;\n+      Expr_Node := P_Expression;\n       Check_Simple_Expression_In_Ada_83 (Expr_Node);\n       Set_Delta_Expression (Constraint_Node, Expr_Node);\n \n@@ -3505,7 +3504,8 @@ package body Ch3 is\n \n          else\n             begin\n-               Expr_Node := No_Right_Paren (P_Expression_Or_Range_Attribute);\n+               Expr_Node := P_Expression_Or_Range_Attribute;\n+               Check_No_Right_Paren;\n \n                if Token = Tok_Colon\n                  and then Nkind (Expr_Node) = N_Identifier\n@@ -3602,7 +3602,7 @@ package body Ch3 is\n \n       if Abstract_Present then\n          Error_Msg_SP (\"ABSTRACT not allowed in interface type definition \" &\n-                       \"('R'M' 3.9.4(2/2))\");\n+                       \"(RM 3.9.4(2/2))\");\n       end if;\n \n       Scan; -- past INTERFACE\n@@ -3983,7 +3983,9 @@ package body Ch3 is\n       Scan_State : Saved_Scan_State;\n \n    begin\n-      if Style_Check then Style.Check_Indentation; end if;\n+      if Style_Check then\n+         Style.Check_Indentation;\n+      end if;\n \n       case Token is\n "}, {"sha": "2971f5633869116813dc82860ce457c36f2ca39c", "filename": "gcc/ada/par-util.adb", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc5f546f00b73ed1400033e3d17416373f668da/gcc%2Fada%2Fpar-util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc5f546f00b73ed1400033e3d17416373f668da/gcc%2Fada%2Fpar-util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-util.adb?ref=7dc5f546f00b73ed1400033e3d17416373f668da", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -176,6 +176,18 @@ package body Util is\n       end if;\n    end Check_Misspelling_Of;\n \n+   --------------------------\n+   -- Check_No_Right_Paren --\n+   --------------------------\n+\n+   procedure Check_No_Right_Paren is\n+   begin\n+      if Token = Tok_Right_Paren then\n+         Error_Msg_SC (\"unexpected right parenthesis\");\n+         Scan; -- past unexpected right paren\n+      end if;\n+   end Check_No_Right_Paren;\n+\n    -----------------------------\n    -- Check_Simple_Expression --\n    -----------------------------\n@@ -587,21 +599,6 @@ package body Util is\n       end if;\n    end No_Constraint;\n \n-   --------------------\n-   -- No_Right_Paren --\n-   --------------------\n-\n-   function No_Right_Paren (Expr : Node_Id) return Node_Id is\n-   begin\n-      if Token = Tok_Right_Paren then\n-         Error_Msg_SC (\"unexpected right parenthesis\");\n-         Resync_Expression;\n-         return Error;\n-      else\n-         return Expr;\n-      end if;\n-   end No_Right_Paren;\n-\n    ---------------------\n    -- Pop_Scope_Stack --\n    ---------------------"}, {"sha": "370dfbfc760dc200c89e47687bc7815645996692", "filename": "gcc/ada/par.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc5f546f00b73ed1400033e3d17416373f668da/gcc%2Fada%2Fpar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc5f546f00b73ed1400033e3d17416373f668da/gcc%2Fada%2Fpar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.adb?ref=7dc5f546f00b73ed1400033e3d17416373f668da", "patch": "@@ -51,8 +51,7 @@ with Tbuild;   use Tbuild;\n ---------\n \n function Par\n-  (Configuration_Pragmas : Boolean;\n-   From_Limited_With     : Boolean := False) return List_Id\n+  (Configuration_Pragmas : Boolean) return List_Id\n is\n    Num_Library_Units : Natural := 0;\n    --  Count number of units parsed (relevant only in syntax check only mode,\n@@ -1042,6 +1041,10 @@ is\n       --  it is returned unchanged. Otherwise an error message is issued\n       --  and Error is returned.\n \n+      procedure Check_No_Right_Paren;\n+      --  Called to check that the current token is not a right paren. If it\n+      --  is, then an error is given, and the right parenthesis is scanned out.\n+\n       function Comma_Present return Boolean;\n       --  Used in comma delimited lists to determine if a comma is present, or\n       --  can reasonably be assumed to have been present (an error message is\n@@ -1089,10 +1092,6 @@ is\n       --  parameter. If a constraint is present, an error message is posted,\n       --  and the constraint is scanned and discarded.\n \n-      function No_Right_Paren (Expr : Node_Id) return Node_Id;\n-      --  Function to check for no right paren at end of expression, returns\n-      --  its argument if no right paren, else flags paren and returns Error.\n-\n       procedure Push_Scope_Stack;\n       pragma Inline (Push_Scope_Stack);\n       --  Push a new entry onto the scope stack. Scope.Last (the stack pointer)"}, {"sha": "5dd8a2b75197953e3e15328db25d6ffe8473e156", "filename": "gcc/ada/par.ads", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc5f546f00b73ed1400033e3d17416373f668da/gcc%2Fada%2Fpar.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc5f546f00b73ed1400033e3d17416373f668da/gcc%2Fada%2Fpar.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.ads?ref=7dc5f546f00b73ed1400033e3d17416373f668da", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -30,17 +30,14 @@\n with Types; use Types;\n \n function Par\n-  (Configuration_Pragmas : Boolean;\n-   From_Limited_With     : Boolean := False) return List_Id;\n+  (Configuration_Pragmas : Boolean) return List_Id;\n --  Top level parsing routine. There are two cases:\n --\n --  If Configuration_Pragmas is False, Par parses a compilation unit in the\n --  current source file and sets the Cunit, Cunit_Entity and Unit_Name fields\n --  of the units table entry for Current_Source_Unit. On return the parse tree\n --  is complete, and decorated with any required implicit label declarations.\n---  The value returned in this case is always No_List. If From_Limited_With is\n---  True, we are parsing a compilation unit found in a limited-with clause (Ada\n---  2005, AI-50217)\n+--  The value returned in this case is always No_List.\n --\n --  If Configuration_Pragmas is True, Par parses a list of configuration\n --  pragmas from the current source file, and returns the list of pragmas."}]}