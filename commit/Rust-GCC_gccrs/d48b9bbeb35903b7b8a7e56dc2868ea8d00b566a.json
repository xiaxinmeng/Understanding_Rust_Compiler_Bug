{"sha": "d48b9bbeb35903b7b8a7e56dc2868ea8d00b566a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ4YjliYmViMzU5MDNiN2I4YTdlNTZkYzI4NjhlYThkMDBiNTY2YQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-05-24T23:08:17Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-05-24T23:08:17Z"}, "message": "cp-tree.h (cp_free_lang_data): Add extern.\n\n\t* cp-tree.h (cp_free_lang_data): Add extern.\n\t(ovl_skip_hidden, is_overloaded_fn, really_overloaded_fn): Add\n\tATTRIBUTE_PURE.\n\t(type_unknown_p): Return bool, make inline, lose TREE_LIST check.\n\t* typeck.c (type_unknown_p): Delete.\n\t* tree.c (is_overloaded_fn): Use MAYBE_BASELINE_FUNCTIONS, adjust\n\toverload management.\n\t(dependent_name): Likewise.\n\t(decl_anon_ns_mem_p): Simplify.\n\nFrom-SVN: r248433", "tree": {"sha": "f8753d02aafe0e861cd2c741be9d246d90e9457e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8753d02aafe0e861cd2c741be9d246d90e9457e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d48b9bbeb35903b7b8a7e56dc2868ea8d00b566a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d48b9bbeb35903b7b8a7e56dc2868ea8d00b566a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d48b9bbeb35903b7b8a7e56dc2868ea8d00b566a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d48b9bbeb35903b7b8a7e56dc2868ea8d00b566a/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d4a760d8c43fa10aa5b450b66f2f4bf67f898a8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4a760d8c43fa10aa5b450b66f2f4bf67f898a8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4a760d8c43fa10aa5b450b66f2f4bf67f898a8c"}], "stats": {"total": 83, "additions": 43, "deletions": 40}, "files": [{"sha": "0f105e8e97bbb0fef906eb12b350d963fb90eeb2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48b9bbeb35903b7b8a7e56dc2868ea8d00b566a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48b9bbeb35903b7b8a7e56dc2868ea8d00b566a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d48b9bbeb35903b7b8a7e56dc2868ea8d00b566a", "patch": "@@ -1,3 +1,15 @@\n+2017-05-24  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (cp_free_lang_data): Add extern.\n+\t(ovl_skip_hidden, is_overloaded_fn, really_overloaded_fn): Add\n+\tATTRIBUTE_PURE.\n+\t(type_unknown_p): Return bool, make inline, lose TREE_LIST check.\n+\t* typeck.c (type_unknown_p): Delete.\n+\t* tree.c (is_overloaded_fn): Use MAYBE_BASELINE_FUNCTIONS, adjust\n+\toverload management.\n+\t(dependent_name): Likewise.\n+\t(decl_anon_ns_mem_p): Simplify.\n+\n 2017-05-24  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR c++/80544"}, {"sha": "8ea4edfedc3ddc00cb1f24a51c33bae1dbe8b165", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48b9bbeb35903b7b8a7e56dc2868ea8d00b566a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48b9bbeb35903b7b8a7e56dc2868ea8d00b566a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d48b9bbeb35903b7b8a7e56dc2868ea8d00b566a", "patch": "@@ -6789,7 +6789,7 @@ extern tree finish_builtin_launder\t\t(location_t, tree,\n /* in tree.c */\n extern int cp_tree_operand_length\t\t(const_tree);\n extern int cp_tree_code_length\t\t\t(enum tree_code);\n-void cp_free_lang_data \t\t\t\t(tree t);\n+extern void cp_free_lang_data \t\t\t(tree t);\n extern tree force_target_expr\t\t\t(tree, tree, tsubst_flags_t);\n extern tree build_target_expr_with_type\t\t(tree, tree, tsubst_flags_t);\n extern void lang_check_failed\t\t\t(const char *, int,\n@@ -6811,7 +6811,8 @@ extern bool type_has_nontrivial_copy_init\t(const_tree);\n extern void maybe_warn_parm_abi\t\t\t(tree, location_t);\n extern bool class_tmpl_impl_spec_p\t\t(const_tree);\n extern int zero_init_p\t\t\t\t(const_tree);\n-extern bool check_abi_tag_redeclaration\t\t(const_tree, const_tree, const_tree);\n+extern bool check_abi_tag_redeclaration\t\t(const_tree, const_tree,\n+\t\t\t\t\t\t const_tree);\n extern bool check_abi_tag_args\t\t\t(tree, tree);\n extern tree strip_typedefs\t\t\t(tree, bool * = NULL);\n extern tree strip_typedefs_expr\t\t\t(tree, bool * = NULL);\n@@ -6852,10 +6853,11 @@ extern tree ovl_make\t\t\t\t(tree fn,\n \t\t\t\t\t\t tree next = NULL_TREE);\n extern tree ovl_insert\t\t\t\t(tree fn, tree maybe_ovl,\n \t\t\t\t\t\t bool using_p = false);\n-extern tree ovl_skip_hidden\t\t\t(tree);\n+extern tree ovl_skip_hidden\t\t\t(tree) ATTRIBUTE_PURE;\n extern tree lookup_add\t\t\t\t(tree fns, tree lookup);\n extern void lookup_keep\t\t\t\t(tree lookup, bool keep);\n-extern int is_overloaded_fn\t\t\t(tree);\n+extern int is_overloaded_fn\t\t\t(tree) ATTRIBUTE_PURE;\n+extern bool really_overloaded_fn\t\t(tree) ATTRIBUTE_PURE;\n extern tree dependent_name\t\t\t(tree);\n extern tree get_fns\t\t\t\t(tree) ATTRIBUTE_PURE;\n extern tree get_first_fn\t\t\t(tree) ATTRIBUTE_PURE;\n@@ -6876,7 +6878,6 @@ extern bool decl_anon_ns_mem_p\t\t\t(const_tree);\n extern tree lvalue_type\t\t\t\t(tree);\n extern tree error_type\t\t\t\t(tree);\n extern int varargs_function_p\t\t\t(const_tree);\n-extern bool really_overloaded_fn\t\t(tree);\n extern bool cp_tree_equal\t\t\t(tree, tree);\n extern tree no_linkage_check\t\t\t(tree, bool);\n extern void debug_binfo\t\t\t\t(tree);\n@@ -6933,7 +6934,7 @@ extern tree require_complete_type_sfinae\t(tree, tsubst_flags_t);\n extern tree complete_type\t\t\t(tree);\n extern tree complete_type_or_else\t\t(tree, tree);\n extern tree complete_type_or_maybe_complain\t(tree, tree, tsubst_flags_t);\n-extern int type_unknown_p\t\t\t(const_tree);\n+inline bool type_unknown_p\t\t\t(const_tree);\n enum { ce_derived, ce_type, ce_normal, ce_exact };\n extern bool comp_except_specs\t\t\t(const_tree, const_tree, int);\n extern bool comptypes\t\t\t\t(tree, tree, int);\n@@ -7311,6 +7312,12 @@ ovl_first (tree node)\n   return node;\n }\n \n+inline bool\n+type_unknown_p (const_tree expr)\n+{\n+  return TREE_TYPE (expr) == unknown_type_node;\n+}\n+\n /* -- end of C++ */\n \n #endif /* ! GCC_CP_TREE_H */"}, {"sha": "f11c0ae0ee3d3e49dd09f1796c683dabdd107570", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 18, "deletions": 25, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48b9bbeb35903b7b8a7e56dc2868ea8d00b566a/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48b9bbeb35903b7b8a7e56dc2868ea8d00b566a/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=d48b9bbeb35903b7b8a7e56dc2868ea8d00b566a", "patch": "@@ -2337,15 +2337,16 @@ is_overloaded_fn (tree x)\n   if (TREE_CODE (x) == OFFSET_REF\n       || TREE_CODE (x) == COMPONENT_REF)\n     x = TREE_OPERAND (x, 1);\n-  if (BASELINK_P (x))\n-    x = BASELINK_FUNCTIONS (x);\n+  x = MAYBE_BASELINK_FUNCTIONS (x);\n   if (TREE_CODE (x) == TEMPLATE_ID_EXPR)\n     x = TREE_OPERAND (x, 0);\n-  if (DECL_FUNCTION_TEMPLATE_P (OVL_CURRENT (x))\n-      || (TREE_CODE (x) == OVERLOAD && OVL_CHAIN (x)))\n+\n+  if (DECL_FUNCTION_TEMPLATE_P (OVL_FIRST (x))\n+      || (TREE_CODE (x) == OVERLOAD && !OVL_SINGLE_P (x)))\n     return 2;\n-  return  (TREE_CODE (x) == FUNCTION_DECL\n-\t   || TREE_CODE (x) == OVERLOAD);\n+\n+  return (TREE_CODE (x) == FUNCTION_DECL\n+\t  || TREE_CODE (x) == OVERLOAD);\n }\n \n /* X is the CALL_EXPR_FN of a CALL_EXPR.  If X represents a dependent name\n@@ -2357,11 +2358,10 @@ dependent_name (tree x)\n {\n   if (identifier_p (x))\n     return x;\n-  if (TREE_CODE (x) != COMPONENT_REF\n-      && TREE_CODE (x) != OFFSET_REF\n-      && TREE_CODE (x) != BASELINK\n-      && is_overloaded_fn (x))\n-    return DECL_NAME (get_first_fn (x));\n+  if (TREE_CODE (x) == TEMPLATE_ID_EXPR)\n+    x = TREE_OPERAND (x, 0);\n+  if (TREE_CODE (x) == OVERLOAD || TREE_CODE (x) == FUNCTION_DECL)\n+    return OVL_NAME (x);\n   return NULL_TREE;\n }\n \n@@ -3319,22 +3319,15 @@ decl_namespace_context (tree decl)\n bool\n decl_anon_ns_mem_p (const_tree decl)\n {\n-  while (1)\n+  while (TREE_CODE (decl) != NAMESPACE_DECL)\n     {\n-      if (decl == NULL_TREE || decl == error_mark_node)\n-\treturn false;\n-      if (TREE_CODE (decl) == NAMESPACE_DECL\n-\t  && DECL_NAME (decl) == NULL_TREE)\n-\treturn true;\n-      /* Classes and namespaces inside anonymous namespaces have\n-         TREE_PUBLIC == 0, so we can shortcut the search.  */\n-      else if (TYPE_P (decl))\n-\treturn (TREE_PUBLIC (TYPE_MAIN_DECL (decl)) == 0);\n-      else if (TREE_CODE (decl) == NAMESPACE_DECL)\n-\treturn (TREE_PUBLIC (decl) == 0);\n-      else\n-\tdecl = DECL_CONTEXT (decl);\n+      /* Classes inside anonymous namespaces have TREE_PUBLIC == 0.  */\n+      if (TYPE_P (decl))\n+\treturn !TREE_PUBLIC (TYPE_MAIN_DECL (decl));\n+\n+      decl = CP_DECL_CONTEXT (decl);\n     }\n+  return !TREE_PUBLIC (decl);\n }\n \n /* Subroutine of cp_tree_equal: t1 and t2 are the CALL_EXPR_FNs of two"}, {"sha": "6bf57bb3a0f8e10bf0e6086279123f1702da57f2", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48b9bbeb35903b7b8a7e56dc2868ea8d00b566a/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48b9bbeb35903b7b8a7e56dc2868ea8d00b566a/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=d48b9bbeb35903b7b8a7e56dc2868ea8d00b566a", "patch": "@@ -162,15 +162,6 @@ complete_type_or_else (tree type, tree value)\n   return complete_type_or_maybe_complain (type, value, tf_warning_or_error);\n }\n \n-/* Return truthvalue of whether type of EXP is instantiated.  */\n-\n-int\n-type_unknown_p (const_tree exp)\n-{\n-  return (TREE_CODE (exp) == TREE_LIST\n-\t  || TREE_TYPE (exp) == unknown_type_node);\n-}\n-\n \f\n /* Return the common type of two parameter lists.\n    We assume that comptypes has already been done and returned 1;"}]}