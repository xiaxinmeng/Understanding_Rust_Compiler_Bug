{"sha": "1ec86e1eaa90fb5cbce6a658ebd797f73b4cab6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVjODZlMWVhYTkwZmI1Y2JjZTZhNjU4ZWJkNzk3ZjczYjRjYWI2ZA==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2019-04-16T10:20:40Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2019-04-16T10:20:40Z"}, "message": "[ARC] Emit blockage regardless to avoid delay slot scheduling.\n\n1.The delay slot scheduler can reschedule some of the frame related\ninstructions resulting in having incorect CFI information. This patch\nintroduces a schedule blockage to avoid this problem.\n\n2.There are cases when an interrupt may happen and not all the current\nfunction stack operations are done, which may result in stack\ncorruption. Such an example is accessing an returning a local\nstructure members, which members are allocated on stack. The stack\nadjustment and the accessing of the struct member can be reorder as\nthey may not use both the SP register for the access.\n\n3.Also, do not save/restore SP when in interrupt. The SP is switch by\nthe core IRQ machinery.\n\ngcc/\nxxxx-xx-xx  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc.c (arc_expand_prologue): Emit blockage regardless\n\tto avoid delay slot scheduling.\n\t(arc_must_save_register): Don't save SP.\n\t* config/arc/arc.md (stack_tie): Remove.\n\t(UNSPEC_ARC_STKTIE): Likewise.\n\nFrom-SVN: r270384", "tree": {"sha": "b628d53ee95b6c7f6630155a8974c13e8a192393", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b628d53ee95b6c7f6630155a8974c13e8a192393"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ec86e1eaa90fb5cbce6a658ebd797f73b4cab6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ec86e1eaa90fb5cbce6a658ebd797f73b4cab6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ec86e1eaa90fb5cbce6a658ebd797f73b4cab6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ec86e1eaa90fb5cbce6a658ebd797f73b4cab6d/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "85b242968bf34b60ff7ef0fcb8ac94eacfa762a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85b242968bf34b60ff7ef0fcb8ac94eacfa762a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85b242968bf34b60ff7ef0fcb8ac94eacfa762a0"}], "stats": {"total": 51, "additions": 23, "deletions": 28}, "files": [{"sha": "0c53e72689d0580031bf08c63d1d3b414075c7e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec86e1eaa90fb5cbce6a658ebd797f73b4cab6d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec86e1eaa90fb5cbce6a658ebd797f73b4cab6d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ec86e1eaa90fb5cbce6a658ebd797f73b4cab6d", "patch": "@@ -1,3 +1,11 @@\n+2019-04-16  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.c (arc_expand_prologue): Emit blockage regardless\n+\tto avoid delay slot scheduling.\n+\t(arc_must_save_register): Don't save SP.\n+\t* config/arc/arc.md (stack_tie): Remove.\n+\t(UNSPEC_ARC_STKTIE): Likewise.\n+\n 2019-04-16  Kito Cheng  <kito.cheng@gmail.com>\n \t    Shiva Chen  <shiva0217@gmail.com>\n "}, {"sha": "33156eaece7b712bdf2faab821d5f7cab8a74d6b", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec86e1eaa90fb5cbce6a658ebd797f73b4cab6d/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec86e1eaa90fb5cbce6a658ebd797f73b4cab6d/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=1ec86e1eaa90fb5cbce6a658ebd797f73b4cab6d", "patch": "@@ -2571,13 +2571,12 @@ arc_compute_function_type (struct function *fun)\n #define FRAME_POINTER_MASK (1 << (FRAME_POINTER_REGNUM))\n #define RETURN_ADDR_MASK (1 << (RETURN_ADDR_REGNUM))\n \n-/* Tell prologue and epilogue if register REGNO should be saved / restored.\n-   The return address and frame pointer are treated separately.\n-   Don't consider them here.\n-   Addition for pic: The gp register needs to be saved if the current\n-   function changes it to access gotoff variables.\n-   FIXME: This will not be needed if we used some arbitrary register\n-   instead of r26.  */\n+/* Tell prologue and epilogue if register REGNO should be saved /\n+   restored.  The return address, stack pointer and frame pointer are\n+   treated separately.  Don't consider them here.  Addition for pic:\n+   The gp register needs to be saved if the current function changes\n+   it to access gotoff variables.  FIXME: This will not be needed if\n+   we used some arbitrary register instead of r26.  */\n \n static bool\n arc_must_save_register (int regno, struct function *func)\n@@ -2610,6 +2609,7 @@ arc_must_save_register (int regno, struct function *func)\n \n   if ((regno) != RETURN_ADDR_REGNUM\n       && (regno) != FRAME_POINTER_REGNUM\n+      && (regno) != STACK_POINTER_REGNUM\n       && df_regs_ever_live_p (regno)\n       && (!call_used_regs[regno]\n \t  || ARC_INTERRUPT_P (fn_type))\n@@ -3683,14 +3683,10 @@ arc_expand_prologue (void)\n \n   /* Allocate the stack frame.  */\n   if (frame_size_to_allocate > 0)\n-    {\n-      frame_stack_add ((HOST_WIDE_INT) 0 - frame_size_to_allocate);\n-      /* If the frame pointer is needed, emit a special barrier that\n-\t will prevent the scheduler from moving stores to the frame\n-\t before the stack adjustment.  */\n-      if (arc_frame_pointer_needed ())\n-\temit_insn (gen_stack_tie (stack_pointer_rtx, hard_frame_pointer_rtx));\n-    }\n+    frame_stack_add ((HOST_WIDE_INT) 0 - frame_size_to_allocate);\n+\n+  /* Emit a blockage to avoid delay slot scheduling.  */\n+  emit_insn (gen_blockage ());\n }\n \n /* Do any necessary cleanup after a function to restore stack, frame,\n@@ -3727,6 +3723,10 @@ arc_expand_epilogue (int sibcall_p)\n   if (!can_trust_sp_p)\n     gcc_assert (arc_frame_pointer_needed ());\n \n+  /* Emit a blockage to avoid/flush all pending sp operations.  */\n+  if (size)\n+    emit_insn (gen_blockage ());\n+\n   if (TARGET_CODE_DENSITY\n       && TARGET_CODE_DENSITY_FRAME\n       && !ARC_AUTOFP_IRQ_P (fn_type)"}, {"sha": "5aafd9df6676356afc90dae45091a3deba93e30f", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec86e1eaa90fb5cbce6a658ebd797f73b4cab6d/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec86e1eaa90fb5cbce6a658ebd797f73b4cab6d/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=1ec86e1eaa90fb5cbce6a658ebd797f73b4cab6d", "patch": "@@ -136,7 +136,6 @@\n   UNSPEC_ARC_VMAC2HU\n   UNSPEC_ARC_VMPY2H\n   UNSPEC_ARC_VMPY2HU\n-  UNSPEC_ARC_STKTIE\n \n   VUNSPEC_ARC_RTIE\n   VUNSPEC_ARC_SYNC\n@@ -6300,18 +6299,6 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n   (set_attr \"predicable\" \"yes,no,no,yes,no\")\n   (set_attr \"cond\" \"canuse,nocond,nocond,canuse_limm,nocond\")])\n \n-(define_insn \"stack_tie\"\n-  [(set (mem:BLK (scratch))\n-\t(unspec:BLK [(match_operand:SI 0 \"register_operand\" \"r\")\n-\t\t     (match_operand:SI 1 \"register_operand\" \"r\")]\n-\t\t    UNSPEC_ARC_STKTIE))]\n-  \"\"\n-  \"\"\n-  [(set_attr \"length\" \"0\")\n-   (set_attr \"iscompact\" \"false\")\n-   (set_attr \"type\" \"block\")]\n-  )\n-\n (define_insn \"*add_shift\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=q,r,r\")\n \t(plus:SI (ashift:SI (match_operand:SI 1 \"register_operand\" \"q,r,r\")"}]}