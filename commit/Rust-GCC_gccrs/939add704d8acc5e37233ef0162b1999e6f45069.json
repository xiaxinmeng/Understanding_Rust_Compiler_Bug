{"sha": "939add704d8acc5e37233ef0162b1999e6f45069", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM5YWRkNzA0ZDhhY2M1ZTM3MjMzZWYwMTYyYjE5OTllNmY0NTA2OQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2004-11-01T00:11:49Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2004-11-01T00:11:49Z"}, "message": "Convert diagnostics to use quoting flag q 8/n\n\n        Convert diagnostics to use quoting flag q 8/n\n        * cvt.c (cp_convert_to_pointer, warn_ref_binding,\n        convert_to_reference, ocp_convert, convert_to_void\n        cp_convert_to_pointer):\n\nFrom-SVN: r89924", "tree": {"sha": "dfdbb10daa7645e2dbedb3dced30dd9737370cbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfdbb10daa7645e2dbedb3dced30dd9737370cbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/939add704d8acc5e37233ef0162b1999e6f45069", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/939add704d8acc5e37233ef0162b1999e6f45069", "html_url": "https://github.com/Rust-GCC/gccrs/commit/939add704d8acc5e37233ef0162b1999e6f45069", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/939add704d8acc5e37233ef0162b1999e6f45069/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "80439563c5704b4daca5e0dbc898771523354645", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80439563c5704b4daca5e0dbc898771523354645", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80439563c5704b4daca5e0dbc898771523354645"}], "stats": {"total": 93, "additions": 52, "deletions": 41}, "files": [{"sha": "09df98f7706886c430a5377e61ae4be931d8af51", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939add704d8acc5e37233ef0162b1999e6f45069/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939add704d8acc5e37233ef0162b1999e6f45069/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=939add704d8acc5e37233ef0162b1999e6f45069", "patch": "@@ -1,3 +1,10 @@\n+2004-10-31  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\tConvert diagnostics to use quoting flag q 8/n\n+\t* cvt.c (cp_convert_to_pointer, warn_ref_binding, \n+\tconvert_to_reference, ocp_convert, convert_to_void \n+\tcp_convert_to_pointer): \n+\n 2004-10-31  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/15172"}, {"sha": "3e84ed0ad89344df86efe0699ddd7c6444689ebf", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 45, "deletions": 41, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939add704d8acc5e37233ef0162b1999e6f45069/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939add704d8acc5e37233ef0162b1999e6f45069/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=939add704d8acc5e37233ef0162b1999e6f45069", "patch": "@@ -87,17 +87,17 @@ cp_convert_to_pointer (tree type, tree expr, bool force)\n       intype = complete_type (intype);\n       if (!COMPLETE_TYPE_P (intype))\n \t{\n-\t  error (\"can't convert from incomplete type `%T' to `%T'\",\n-\t\t    intype, type);\n+\t  error (\"can't convert from incomplete type %qT to %qT\",\n+                 intype, type);\n \t  return error_mark_node;\n \t}\n \n       rval = build_type_conversion (type, expr);\n       if (rval)\n \t{\n \t  if (rval == error_mark_node)\n-\t    error (\"conversion of `%E' from `%T' to `%T' is ambiguous\",\n-\t\t      expr, intype, type);\n+\t    error (\"conversion of %qE from %qT to %qT is ambiguous\",\n+                   expr, intype, type);\n \t  return rval;\n \t}\n     }\n@@ -165,8 +165,8 @@ cp_convert_to_pointer (tree type, tree expr, bool force)\n \n       if (TYPE_PTRMEMFUNC_P (type))\n \t{\n-\t  error (\"cannot convert `%E' from type `%T' to type `%T'\",\n-\t\t    expr, intype, type);\n+\t  error (\"cannot convert %qE from type %qT to type %qT\",\n+                 expr, intype, type);\n \t  return error_mark_node;\n \t}\n \n@@ -194,12 +194,12 @@ cp_convert_to_pointer (tree type, tree expr, bool force)\n       if (bk == bk_via_virtual)\n \t{\n \t  if (force)\n-\t    warning (\"pointer to member cast from `%T' to `%T' is via virtual base\",\n-\t\t     intype, type);\n+\t    warning (\"pointer to member cast from %qT to %qT is via\"\n+                     \" virtual base\", intype, type);\n \t  else\n \t    {\n-\t      error (\"pointer to member cast from `%T' to `%T' is via virtual base\",\n-\t\t     intype, type);\n+\t      error (\"pointer to member cast from %qT to %qT is\"\n+                     \" via virtual base\", intype, type);\n \t      return error_mark_node;\n \t    }\n \t  /* This is a reinterpret cast, whose result is unspecified.\n@@ -234,8 +234,8 @@ cp_convert_to_pointer (tree type, tree expr, bool force)\n \t\t\t\t\t\t       TREE_OPERAND (expr, 1));\n \t    }\n \t}\n-      error (\"cannot convert `%E' from type `%T' to type `%T'\",\n-\t\texpr, intype, type);\n+      error (\"cannot convert %qE from type %qT to type %qT\",\n+             expr, intype, type);\n       return error_mark_node;\n     }\n \n@@ -260,7 +260,7 @@ cp_convert_to_pointer (tree type, tree expr, bool force)\n     }\n   else if (TYPE_PTR_TO_MEMBER_P (type) && INTEGRAL_CODE_P (form))\n     {\n-      error (\"invalid conversion from '%T' to '%T'\", intype, type);\n+      error (\"invalid conversion from %qT to %qT\", intype, type);\n       return error_mark_node;\n     }\n \n@@ -281,8 +281,8 @@ cp_convert_to_pointer (tree type, tree expr, bool force)\n   if (type_unknown_p (expr))\n     return instantiate_type (type, expr, tf_error | tf_warning);\n \n-  error (\"cannot convert `%E' from type `%T' to type `%T'\",\n-\t    expr, intype, type);\n+  error (\"cannot convert %qE from type %qT to type %qT\",\n+         expr, intype, type);\n   return error_mark_node;\n }\n \n@@ -413,13 +413,17 @@ warn_ref_binding (tree reftype, tree intype, tree decl)\n       const char *msg;\n \n       if (CP_TYPE_VOLATILE_P (ttl) && decl)\n-\t  msg = \"initialization of volatile reference type `%#T' from rvalue of type `%T'\";\n+\t  msg = \"initialization of volatile reference type %q#T from\"\n+            \" rvalue of type %qT\";\n       else if (CP_TYPE_VOLATILE_P (ttl))\n-\t  msg = \"conversion to volatile reference type `%#T' from rvalue of type `%T'\";\n+\t  msg = \"conversion to volatile reference type %q#T \"\n+            \" from rvalue of type %qT\";\n       else if (decl)\n-\t  msg = \"initialization of non-const reference type `%#T' from rvalue of type `%T'\";\n+\t  msg = \"initialization of non-const reference type %q#T from\"\n+            \" rvalue of type %qT\";\n       else\n-\t  msg = \"conversion to non-const reference type `%#T' from rvalue of type `%T'\";\n+\t  msg = \"conversion to non-const reference type %q#T from\"\n+            \" rvalue of type %qT\";\n \n       pedwarn (msg, reftype, intype);\n     }\n@@ -492,8 +496,8 @@ convert_to_reference (tree reftype, tree expr, int convtype,\n \t  \n \t  if (! (convtype & CONV_CONST)\n \t\t   && !at_least_as_qualified_p (ttl, ttr))\n-\t    pedwarn (\"conversion from `%T' to `%T' discards qualifiers\",\n-\t\t\tttr, reftype);\n+\t    pedwarn (\"conversion from %qT to %qT discards qualifiers\",\n+                     ttr, reftype);\n \t}\n \n       return build_up_reference (reftype, expr, flags, decl);\n@@ -510,7 +514,7 @@ convert_to_reference (tree reftype, tree expr, int convtype,\n       if (TREE_CODE (intype) == POINTER_TYPE\n \t  && (comptypes (TREE_TYPE (intype), type,\n \t\t\t COMPARE_BASE | COMPARE_DERIVED)))\n-\twarning (\"casting `%T' to `%T' does not dereference pointer\",\n+\twarning (\"casting %qT to %qT does not dereference pointer\",\n \t\t intype, reftype);\n \t  \n       rval = build_unary_op (ADDR_EXPR, expr, 0);\n@@ -537,7 +541,7 @@ convert_to_reference (tree reftype, tree expr, int convtype,\n     }\n \n   if (flags & LOOKUP_COMPLAIN)\n-    error (\"cannot convert type `%T' to type `%T'\", intype, reftype);\n+    error (\"cannot convert type %qT to type %qT\", intype, reftype);\n \n   return error_mark_node;\n }\n@@ -661,7 +665,7 @@ ocp_convert (tree type, tree expr, int convtype, int flags)\n \t  && ((ARITHMETIC_TYPE_P (intype) && ! (convtype & CONV_STATIC))\n \t      || (TREE_CODE (intype) == POINTER_TYPE)))\n \t{\n-\t  pedwarn (\"conversion from `%#T' to `%#T'\", intype, type);\n+\t  pedwarn (\"conversion from %q#T to %q#T\", intype, type);\n \n \t  if (flag_pedantic_errors)\n \t    return error_mark_node;\n@@ -673,7 +677,7 @@ ocp_convert (tree type, tree expr, int convtype, int flags)\n \t  if (rval)\n \t    return rval;\n \t  if (flags & LOOKUP_COMPLAIN)\n-\t    error (\"`%#T' used where a `%T' was expected\", intype, type);\n+\t    error (\"%q#T used where a %qT was expected\", intype, type);\n \t  return error_mark_node;\n \t}\n       if (code == BOOLEAN_TYPE)\n@@ -693,7 +697,7 @@ ocp_convert (tree type, tree expr, int convtype, int flags)\n           if (ret_val)\n             return ret_val;\n           if (flags & LOOKUP_COMPLAIN)\n-            error (\"`%#T' used where a `%T' was expected\", in_vtype, type);\n+            error (\"%q#T used where a %qT was expected\", in_vtype, type);\n           return error_mark_node;\n \t}\n       return fold_if_not_in_template (convert_to_vector (type, e));\n@@ -708,7 +712,7 @@ ocp_convert (tree type, tree expr, int convtype, int flags)\n \t    return rval;\n \t  else\n \t    if (flags & LOOKUP_COMPLAIN)\n-\t      error (\"`%#T' used where a floating point value was expected\",\n+\t      error (\"%q#T used where a floating point value was expected\",\n \t\t\tTREE_TYPE (e));\n \t}\n       if (code == REAL_TYPE)\n@@ -755,8 +759,8 @@ ocp_convert (tree type, tree expr, int convtype, int flags)\n     }\n \n   if (flags & LOOKUP_COMPLAIN)\n-    error (\"conversion from `%T' to non-scalar type `%T' requested\",\n-\t      TREE_TYPE (expr), type);\n+    error (\"conversion from %qT to non-scalar type %qT requested\",\n+           TREE_TYPE (expr), type);\n   return error_mark_node;\n }\n \n@@ -843,12 +847,12 @@ convert_to_void (tree expr, const char *implicit)\n         int is_complete = COMPLETE_TYPE_P (complete_type (type));\n         \n         if (is_volatile && !is_complete)\n-          warning (\"object of incomplete type `%T' will not be accessed in %s\",\n-                      type, implicit ? implicit : \"void context\");\n+          warning (\"object of incomplete type %qT will not be accessed in %s\",\n+                   type, implicit ? implicit : \"void context\");\n         else if (is_reference && is_volatile)\n-          warning (\"object of type `%T' will not be accessed in %s\",\n-                      TREE_TYPE (TREE_OPERAND (expr, 0)),\n-                      implicit ? implicit : \"void context\");\n+          warning (\"object of type %qT will not be accessed in %s\",\n+                   TREE_TYPE (TREE_OPERAND (expr, 0)),\n+                   implicit ? implicit : \"void context\");\n         if (is_reference || !is_volatile || !is_complete)\n           expr = TREE_OPERAND (expr, 0);\n       \n@@ -862,8 +866,8 @@ convert_to_void (tree expr, const char *implicit)\n         int is_complete = COMPLETE_TYPE_P (complete_type (type));\n         \n         if (TYPE_VOLATILE (type) && !is_complete)\n-          warning (\"object `%E' of incomplete type `%T' will not be accessed in %s\",\n-                      expr, type, implicit ? implicit : \"void context\");\n+          warning (\"object %qE of incomplete type %qT will not be accessed in %s\",\n+                   expr, type, implicit ? implicit : \"void context\");\n         break;\n       }\n \n@@ -884,7 +888,7 @@ convert_to_void (tree expr, const char *implicit)\n       }\n     else if (implicit && probe == expr && is_overloaded_fn (probe))\n       /* Only warn when there is no &.  */\n-      warning (\"%s is a reference, not call, to function `%E'\",\n+      warning (\"%s is a reference, not call, to function %qE\",\n \t\t  implicit, expr);\n   }\n   \n@@ -1076,10 +1080,10 @@ build_expr_type_conversion (int desires, tree expr, bool complain)\n \t    {\n \t      if (complain)\n \t\t{\n-\t\t  error (\"ambiguous default type conversion from `%T'\",\n-\t\t\t    basetype);\n-\t\t  error (\"  candidate conversions include `%D' and `%D'\",\n-\t\t\t    winner, cand);\n+\t\t  error (\"ambiguous default type conversion from %qT\",\n+                         basetype);\n+\t\t  error (\"  candidate conversions include %qD and %qD\",\n+                         winner, cand);\n \t\t}\n \t      return error_mark_node;\n \t    }"}]}