{"sha": "ccf7f8806152d202c5ef8c222bba54dd7bc109cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NmN2Y4ODA2MTUyZDIwMmM1ZWY4YzIyMmJiYTU0ZGQ3YmMxMDljYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-02-10T12:18:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-02-10T12:18:52Z"}, "message": "re PR c/19342 (ICE in common_type, at c-typeck.c:490)\n\n\tPR c/19342\n\t* c-typeck.c (common_type): New routine.  Old common_type renamed\n\tto...\n\t(c_common_type): ...this.\n\t(build_conditional_expr, build_binary_op): Use c_common_type instead\n\tof common_type.\n\n\t* gcc.c-torture/execute/20050119-1.c: New test.\n\nFrom-SVN: r94803", "tree": {"sha": "3de2bb26e3aa22fa9445518adfa866f637666dcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3de2bb26e3aa22fa9445518adfa866f637666dcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccf7f8806152d202c5ef8c222bba54dd7bc109cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccf7f8806152d202c5ef8c222bba54dd7bc109cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccf7f8806152d202c5ef8c222bba54dd7bc109cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccf7f8806152d202c5ef8c222bba54dd7bc109cc/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b49900cc9356d771f3ef47ef7ed551f01e5c7fe5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b49900cc9356d771f3ef47ef7ed551f01e5c7fe5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b49900cc9356d771f3ef47ef7ed551f01e5c7fe5"}], "stats": {"total": 75, "additions": 69, "deletions": 6}, "files": [{"sha": "dfef24b7a887beb6173f4bd1ecd2d8fc7290d625", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccf7f8806152d202c5ef8c222bba54dd7bc109cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccf7f8806152d202c5ef8c222bba54dd7bc109cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ccf7f8806152d202c5ef8c222bba54dd7bc109cc", "patch": "@@ -1,3 +1,12 @@\n+2005-02-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/19342\n+\t* c-typeck.c (common_type): New routine.  Old common_type renamed\n+\tto...\n+\t(c_common_type): ...this.\n+\t(build_conditional_expr, build_binary_op): Use c_common_type instead\n+\tof common_type.\n+\n 2005-02-10  Steven Bosscher  <stevenb@suse.de>\n \n \t* doc/md.texi: Replace @samp{length} with @code{length}."}, {"sha": "3a202929e9fc33e2e37b266d34797f4dd43704de", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccf7f8806152d202c5ef8c222bba54dd7bc109cc/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccf7f8806152d202c5ef8c222bba54dd7bc109cc/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=ccf7f8806152d202c5ef8c222bba54dd7bc109cc", "patch": "@@ -470,8 +470,8 @@ common_pointer_type (tree t1, tree t2)\n    This is the type for the result of most arithmetic operations\n    if the operands have the given two types.  */\n \n-tree\n-common_type (tree t1, tree t2)\n+static tree\n+c_common_type (tree t1, tree t2)\n {\n   enum tree_code code1;\n   enum tree_code code2;\n@@ -522,7 +522,7 @@ common_type (tree t1, tree t2)\n     {\n       tree subtype1 = code1 == COMPLEX_TYPE ? TREE_TYPE (t1) : t1;\n       tree subtype2 = code2 == COMPLEX_TYPE ? TREE_TYPE (t2) : t2;\n-      tree subtype = common_type (subtype1, subtype2);\n+      tree subtype = c_common_type (subtype1, subtype2);\n \n       if (code1 == COMPLEX_TYPE && TREE_TYPE (t1) == subtype)\n \treturn t1;\n@@ -592,6 +592,18 @@ common_type (tree t1, tree t2)\n     return t2;\n }\n \f\n+/* Wrapper around c_common_type that is used by c-common.c.  ENUMERAL_TYPEs\n+   are allowed here and are converted to their compatible integer types.  */\n+tree\n+common_type (tree t1, tree t2)\n+{\n+  if (TREE_CODE (t1) == ENUMERAL_TYPE)\n+    t1 = c_common_type_for_size (TYPE_PRECISION (t1), 1);\n+  if (TREE_CODE (t2) == ENUMERAL_TYPE)\n+    t2 = c_common_type_for_size (TYPE_PRECISION (t2), 1);\n+  return c_common_type (t1, t2);\n+}\n+\f\n /* Return 1 if TYPE1 and TYPE2 are compatible types for assignment\n    or various other operations.  Return 2 if they are compatible\n    but a warning may be needed if you use them together.  */\n@@ -2893,7 +2905,7 @@ build_conditional_expr (tree ifexp, tree op1, tree op2)\n            && (code2 == INTEGER_TYPE || code2 == REAL_TYPE\n                || code2 == COMPLEX_TYPE))\n     {\n-      result_type = common_type (type1, type2);\n+      result_type = c_common_type (type1, type2);\n \n       /* If -Wsign-compare, warn here if type1 and type2 have\n \t different signedness.  We'll promote the signed to unsigned\n@@ -7461,7 +7473,7 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n       int none_complex = (code0 != COMPLEX_TYPE && code1 != COMPLEX_TYPE);\n \n       if (shorten || common || short_compare)\n-\tresult_type = common_type (type0, type1);\n+\tresult_type = c_common_type (type0, type1);\n \n       /* For certain operations (which identify themselves by shorten != 0)\n \t if both args were extended from the same smaller type,\n@@ -7519,7 +7531,7 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t      && (unsigned0 || !uns))\n \t    result_type\n \t      = c_common_signed_or_unsigned_type\n-\t      (unsigned0, common_type (TREE_TYPE (arg0), TREE_TYPE (arg1)));\n+\t      (unsigned0, c_common_type (TREE_TYPE (arg0), TREE_TYPE (arg1)));\n \t  else if (TREE_CODE (arg0) == INTEGER_CST\n \t\t   && (unsigned1 || !uns)\n \t\t   && (TYPE_PRECISION (TREE_TYPE (arg1))"}, {"sha": "b73d9472a8d433fa221a0142c067e6bdc14110ac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccf7f8806152d202c5ef8c222bba54dd7bc109cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccf7f8806152d202c5ef8c222bba54dd7bc109cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ccf7f8806152d202c5ef8c222bba54dd7bc109cc", "patch": "@@ -1,3 +1,8 @@\n+2005-02-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/19342\n+\t* gcc.c-torture/execute/20050119-1.c: New test.\n+\n 2005-02-09  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/19811"}, {"sha": "55f33a0656d63b82530b57346a9bfe3d5a4f8667", "filename": "gcc/testsuite/gcc.c-torture/execute/20050119-1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccf7f8806152d202c5ef8c222bba54dd7bc109cc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050119-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccf7f8806152d202c5ef8c222bba54dd7bc109cc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050119-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050119-1.c?ref=ccf7f8806152d202c5ef8c222bba54dd7bc109cc", "patch": "@@ -0,0 +1,37 @@\n+/* PR c/19342 */\n+typedef enum { A, B, C, D } E;\n+\n+struct S {\n+  E __attribute__ ((mode (__byte__))) a;\n+  E __attribute__ ((mode (__byte__))) b;\n+  E __attribute__ ((mode (__byte__))) c;\n+  E __attribute__ ((mode (__byte__))) d;\n+};\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+void\n+foo (struct S *s)\n+{\n+  if (s->a != s->b)\n+    abort ();\n+  if (s->c != C)\n+    abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  struct S s[2];\n+  s[0].a = B;\n+  s[0].b = B;\n+  s[0].c = C;\n+  s[0].d = D;\n+  s[1].a = D;\n+  s[1].b = C;\n+  s[1].c = B;\n+  s[1].d = A;\n+  foo (s);\n+  exit (0);\n+}"}]}