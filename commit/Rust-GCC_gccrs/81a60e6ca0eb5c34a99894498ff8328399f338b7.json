{"sha": "81a60e6ca0eb5c34a99894498ff8328399f338b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFhNjBlNmNhMGViNWMzNGE5OTg5NDQ5OGZmODMyODM5OWYzMzhiNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-03-15T10:18:21Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-03-15T10:18:21Z"}, "message": "add comments\n\nFrom-SVN: r50805", "tree": {"sha": "11521398006c65e3f25600bd6197110990c7bbc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11521398006c65e3f25600bd6197110990c7bbc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81a60e6ca0eb5c34a99894498ff8328399f338b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81a60e6ca0eb5c34a99894498ff8328399f338b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81a60e6ca0eb5c34a99894498ff8328399f338b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81a60e6ca0eb5c34a99894498ff8328399f338b7/comments", "author": null, "committer": null, "parents": [{"sha": "98ef4163bc3552ff03db5c4e2ae7ddf38e404381", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ef4163bc3552ff03db5c4e2ae7ddf38e404381", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98ef4163bc3552ff03db5c4e2ae7ddf38e404381"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "e873f50d8ccaeb479e97a7c74009387e9b86af5e", "filename": "gcc/unwind-dw2.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a60e6ca0eb5c34a99894498ff8328399f338b7/gcc%2Funwind-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a60e6ca0eb5c34a99894498ff8328399f338b7/gcc%2Funwind-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2.c?ref=81a60e6ca0eb5c34a99894498ff8328399f338b7", "patch": "@@ -48,7 +48,9 @@\n #define PRE_GCC3_DWARF_FRAME_REGISTERS DWARF_FRAME_REGISTERS\n #endif\n \n-/* This is the register and unwind state for a particular frame.  */\n+/* This is the register and unwind state for a particular frame.  This\n+   provides the information necessary to unwind up past a frame and return\n+   to its caller.  */\n struct _Unwind_Context\n {\n   void *reg[DWARF_FRAME_REGISTERS+1];\n@@ -889,6 +891,11 @@ execute_cfa_program (const unsigned char *insn_ptr,\n     }\n }\n \f\n+/* Given the _Unwind_Context CONTEXT for a stack frame, look up the FDE for\n+   its caller and decode it into FS.  This function also sets the\n+   args_size and lsda members of CONTEXT, as they are really information\n+   about the caller's frame.  */\n+\n static _Unwind_Reason_Code\n uw_frame_state_for (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n {\n@@ -1083,6 +1090,11 @@ uw_update_context_1 (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n       }\n }\n \n+/* CONTEXT describes the unwind state for a frame, and FS describes the FDE\n+   of its caller.  Update CONTEXT to refer to the caller as well.  Note\n+   that the args_size and lsda members are not updated here, but later in\n+   uw_frame_state_for.  */\n+\n static void\n uw_update_context (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n {"}, {"sha": "0422cb81a03fd96b0d99d57cefd58e1634e7eaf4", "filename": "gcc/unwind.inc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a60e6ca0eb5c34a99894498ff8328399f338b7/gcc%2Funwind.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a60e6ca0eb5c34a99894498ff8328399f338b7/gcc%2Funwind.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind.inc?ref=81a60e6ca0eb5c34a99894498ff8328399f338b7", "patch": "@@ -72,7 +72,6 @@ _Unwind_RaiseException_Phase2(struct _Unwind_Exception *exc,\n   return code;\n }\n \n-\n /* Raise an exception, passing along the given exception object.  */\n \n _Unwind_Reason_Code\n@@ -81,6 +80,7 @@ _Unwind_RaiseException(struct _Unwind_Exception *exc)\n   struct _Unwind_Context this_context, cur_context;\n   _Unwind_Reason_Code code;\n \n+  /* Set up this_context to describe the current stack frame.  */\n   uw_init_context (&this_context);\n   cur_context = this_context;\n \n@@ -90,6 +90,8 @@ _Unwind_RaiseException(struct _Unwind_Exception *exc)\n     {\n       _Unwind_FrameState fs;\n \n+      /* Set up fs to describe the FDE for the caller of cur_context.  The\n+\t first time through the loop, that means __cxa_throw.  */\n       code = uw_frame_state_for (&cur_context, &fs);\n \n       if (code == _URC_END_OF_STACK)\n@@ -112,6 +114,7 @@ _Unwind_RaiseException(struct _Unwind_Exception *exc)\n \t    return _URC_FATAL_PHASE1_ERROR;\n \t}\n \n+      /* Update cur_context to describe the same frame as fs.  */\n       uw_update_context (&cur_context, &fs);\n     }\n \n@@ -144,6 +147,7 @@ _Unwind_ForcedUnwind_Phase2(struct _Unwind_Exception *exc,\n       _Unwind_FrameState fs;\n       int action;\n \n+      /* Set up fs to describe the FDE for the caller of cur_context.  */\n       code = uw_frame_state_for (context, &fs);\n       if (code != _URC_NO_REASON && code != _URC_END_OF_STACK)\n \treturn _URC_FATAL_PHASE2_ERROR;\n@@ -172,6 +176,7 @@ _Unwind_ForcedUnwind_Phase2(struct _Unwind_Exception *exc,\n \t    return _URC_FATAL_PHASE2_ERROR;\n \t}\n \n+      /* Update cur_context to describe the same frame as fs.  */\n       uw_update_context (context, &fs);\n     }\n "}]}