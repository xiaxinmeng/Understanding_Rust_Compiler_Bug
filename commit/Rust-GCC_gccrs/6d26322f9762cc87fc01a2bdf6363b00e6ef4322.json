{"sha": "6d26322f9762cc87fc01a2bdf6363b00e6ef4322", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQyNjMyMmY5NzYyY2M4N2ZjMDFhMmJkZjYzNjNiMDBlNmVmNDMyMg==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2011-12-09T14:10:02Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2011-12-09T14:10:02Z"}, "message": "dse.c (get_stored_val, [...]): Use gen_int_mode.\n\n        * dse.c (get_stored_val, get_call_args): Use gen_int_mode.\n        * expmed.c (expand_divmod): Likewise.\n        * combine.c (simplify_if_then_else): Likewise.\n\nFrom-SVN: r182164", "tree": {"sha": "82a97c75fa399ae7382e551b8b1ef02d1252d0a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82a97c75fa399ae7382e551b8b1ef02d1252d0a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d26322f9762cc87fc01a2bdf6363b00e6ef4322", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d26322f9762cc87fc01a2bdf6363b00e6ef4322", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d26322f9762cc87fc01a2bdf6363b00e6ef4322", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d26322f9762cc87fc01a2bdf6363b00e6ef4322/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4a33ac4a77ac2c57d47017043e1fdc2f13fb3103", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a33ac4a77ac2c57d47017043e1fdc2f13fb3103", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a33ac4a77ac2c57d47017043e1fdc2f13fb3103"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "6d3528e9f652020cd1a6d94a491d0224ec2aa3bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d26322f9762cc87fc01a2bdf6363b00e6ef4322/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d26322f9762cc87fc01a2bdf6363b00e6ef4322/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d26322f9762cc87fc01a2bdf6363b00e6ef4322", "patch": "@@ -15,6 +15,10 @@\n \t* expmed.c (expand_mult_const, expand_divmod): Likewise.\n \t* reload1.c (gen_reload): Likewise.\n \n+\t* dse.c (get_stored_val, get_call_args): Use gen_int_mode.\n+\t* expmed.c (expand_divmod): Likewise.\n+\t* combine.c (simplify_if_then_else): Likewise.\n+\n 2011-12-09  Kai Tietz  <ktietz@redhat.com>\n \n \t* ira-color.c (print_hard_regs_subforest): Use"}, {"sha": "105e778edd9f3459a452967d23e601254c589d55", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d26322f9762cc87fc01a2bdf6363b00e6ef4322/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d26322f9762cc87fc01a2bdf6363b00e6ef4322/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=6d26322f9762cc87fc01a2bdf6363b00e6ef4322", "patch": "@@ -6010,7 +6010,7 @@ simplify_if_then_else (rtx x)\n \t  && exact_log2 (nzb = nonzero_bits (from, GET_MODE (from))) >= 0)\n \t{\n \t  false_code = EQ;\n-\t  false_val = GEN_INT (trunc_int_for_mode (nzb, GET_MODE (from)));\n+\t  false_val = gen_int_mode (nzb, GET_MODE (from));\n \t}\n       else if (true_code == EQ && true_val == const0_rtx\n \t       && (num_sign_bit_copies (from, GET_MODE (from))"}, {"sha": "c4207df08ec2bae2e4de18fb9e559fb4e1be3043", "filename": "gcc/dse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d26322f9762cc87fc01a2bdf6363b00e6ef4322/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d26322f9762cc87fc01a2bdf6363b00e6ef4322/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=6d26322f9762cc87fc01a2bdf6363b00e6ef4322", "patch": "@@ -1950,7 +1950,7 @@ get_stored_val (store_info_t store_info, enum machine_mode read_mode,\n \t      c |= (c << shift);\n \t      shift <<= 1;\n \t    }\n-\t  read_reg = GEN_INT (trunc_int_for_mode (c, store_mode));\n+\t  read_reg = gen_int_mode (c, store_mode);\n \t  read_reg = extract_low_bits (read_mode, store_mode, read_reg);\n \t}\n     }\n@@ -2459,7 +2459,7 @@ get_call_args (rtx call_insn, tree fn, rtx *args, int nargs)\n \t{\n \t  if (!tmp || !CONST_INT_P (tmp))\n \t    return false;\n-\t  tmp = GEN_INT (trunc_int_for_mode (INTVAL (tmp), mode));\n+\t  tmp = gen_int_mode (INTVAL (tmp), mode);\n \t}\n       if (tmp)\n \targs[idx] = tmp;"}, {"sha": "bced96e74d455203e917a0ea655b5f3f36a1b713", "filename": "gcc/expmed.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d26322f9762cc87fc01a2bdf6363b00e6ef4322/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d26322f9762cc87fc01a2bdf6363b00e6ef4322/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=6d26322f9762cc87fc01a2bdf6363b00e6ef4322", "patch": "@@ -4216,10 +4216,9 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t\t\t\t\t<< (HOST_BITS_PER_WIDE_INT - 1)))\n \t\t\t  set_dst_reg_note (insn, REG_EQUAL,\n \t\t\t\t\t    gen_rtx_DIV (compute_mode, op0,\n-\t\t\t\t\t\t\t GEN_INT\n-\t\t\t\t\t\t\t   (trunc_int_for_mode\n-\t\t\t\t\t\t\t     (abs_d,\n-\t\t\t\t\t\t\t      compute_mode))),\n+\t\t\t\t\t\t\t gen_int_mode\n+\t\t\t\t\t\t\t   (abs_d,\n+\t\t\t\t\t\t\t    compute_mode)),\n \t\t\t\t\t    quotient);\n \n \t\t\tquotient = expand_unop (compute_mode, neg_optab,"}]}