{"sha": "40805a12e405901308cf4ac839b0e15e15c9c7a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA4MDVhMTJlNDA1OTAxMzA4Y2Y0YWM4MzliMGUxNWUxNWM5YzdhMQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-12-11T04:16:32Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-12-11T04:16:32Z"}, "message": "re PR c++/25010 (Segmentation fault (infinite recursion in cgraph_clone_inlined_nodes))\n\n\tPR c++/25010\n\t* ipa-inline.c (cgraph_clone_inlined_nodes): Do not assume that\n\tDECL_EXTERNAL functions have no bodies.  Tidy.\n\tPR c++/25010\n\t* g++.dg/opt/inline10.C: New test.\n\nFrom-SVN: r108375", "tree": {"sha": "550fac8da22e222e4f83bafd10f69af38ff31f7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/550fac8da22e222e4f83bafd10f69af38ff31f7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40805a12e405901308cf4ac839b0e15e15c9c7a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40805a12e405901308cf4ac839b0e15e15c9c7a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40805a12e405901308cf4ac839b0e15e15c9c7a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40805a12e405901308cf4ac839b0e15e15c9c7a1/comments", "author": null, "committer": null, "parents": [{"sha": "92aed1cbf42362b47fa6db66122d33278d7a4ea3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92aed1cbf42362b47fa6db66122d33278d7a4ea3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92aed1cbf42362b47fa6db66122d33278d7a4ea3"}], "stats": {"total": 61, "additions": 44, "deletions": 17}, "files": [{"sha": "ceadb23261f0363499dc752b4e213ea872836b10", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40805a12e405901308cf4ac839b0e15e15c9c7a1/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40805a12e405901308cf4ac839b0e15e15c9c7a1/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=40805a12e405901308cf4ac839b0e15e15c9c7a1", "patch": "@@ -115,24 +115,26 @@ cgraph_estimate_size_after_inlining (int times, struct cgraph_node *to,\n void\n cgraph_clone_inlined_nodes (struct cgraph_edge *e, bool duplicate, bool update_original)\n {\n-  struct cgraph_node *n;\n-\n-  /* We may eliminate the need for out-of-line copy to be output.  In that\n-     case just go ahead and re-use it.  */\n-  if (!e->callee->callers->next_caller\n-      && (!e->callee->needed || DECL_EXTERNAL (e->callee->decl))\n-      && duplicate\n-      && flag_unit_at_a_time)\n+  if (duplicate)\n     {\n-      gcc_assert (!e->callee->global.inlined_to);\n-      if (!DECL_EXTERNAL (e->callee->decl))\n-        overall_insns -= e->callee->global.insns, nfunctions_inlined++;\n-      duplicate = 0;\n-    }\n-   else if (duplicate)\n-    {\n-      n = cgraph_clone_node (e->callee, e->count, e->loop_nest, update_original);\n-      cgraph_redirect_edge_callee (e, n);\n+      /* We may eliminate the need for out-of-line copy to be output.\n+\t In that case just go ahead and re-use it.  */\n+      if (!e->callee->callers->next_caller\n+\t  && !e->callee->needed\n+\t  && flag_unit_at_a_time)\n+\t{\n+\t  gcc_assert (!e->callee->global.inlined_to);\n+\t  if (DECL_SAVED_TREE (e->callee->decl))\n+\t    overall_insns -= e->callee->global.insns, nfunctions_inlined++;\n+\t  duplicate = false;\n+\t}\n+      else\n+\t{\n+\t  struct cgraph_node *n;\n+\t  n = cgraph_clone_node (e->callee, e->count, e->loop_nest, \n+\t\t\t\t update_original);\n+\t  cgraph_redirect_edge_callee (e, n);\n+\t}\n     }\n \n   if (e->caller->global.inlined_to)"}, {"sha": "28b6eda6d56b4ea81bc2398ade3c84a7bcf8738a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40805a12e405901308cf4ac839b0e15e15c9c7a1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40805a12e405901308cf4ac839b0e15e15c9c7a1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=40805a12e405901308cf4ac839b0e15e15c9c7a1", "patch": "@@ -1,3 +1,8 @@\n+2005-12-10  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/25010\n+\t* g++.dg/opt/inline10.C: New test.\n+\n 2005-12-11  Steven G. Kargl  <kargls@comcast.net>\n \n \t* gfortran.dg/g77/19981216-0.f: Fix for fortran/25068."}, {"sha": "086a481286a92b9c2ecbc5a12970d41089ad4cc8", "filename": "gcc/testsuite/g++.dg/opt/inline10.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40805a12e405901308cf4ac839b0e15e15c9c7a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Finline10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40805a12e405901308cf4ac839b0e15e15c9c7a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Finline10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Finline10.C?ref=40805a12e405901308cf4ac839b0e15e15c9c7a1", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/25010\n+// { dg-options \"-O2\" }\n+\n+#pragma interface\n+\n+struct T\n+{\n+  T *p;\n+\n+  void baz ()\n+  {\n+    p->baz ();\n+  }\n+};\n+\n+void foo (T *p)\n+{\n+  p->baz ();\n+}\n+"}]}