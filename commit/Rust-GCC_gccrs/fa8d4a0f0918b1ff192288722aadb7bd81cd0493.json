{"sha": "fa8d4a0f0918b1ff192288722aadb7bd81cd0493", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE4ZDRhMGYwOTE4YjFmZjE5MjI4ODcyMmFhZGI3YmQ4MWNkMDQ5Mw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2008-01-23T02:17:00Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2008-01-23T02:17:00Z"}, "message": "bfin-protos.h (WA_RETS, [...]): New macros.\n\n\t* config/bfin/bfin-protos.h (WA_RETS, ENABLE_WA_RETS): New macros.\n\t* config/bfin/bfin.c (bfin_cpus): Add WA_RETS everywhere.\n\t(cputype_selected): New static variable.\n\t(bfin_handle_option): Set it if -mcpu is used.\n\t(override_option): Select default set of workarounds if no cpu type\n\tselected on the command line.\n\t(workaround_rts_anomaly): Only run if ENABLE_WA_RETS.\n\nFrom-SVN: r131752", "tree": {"sha": "4a182638a704bea6a7c068eb81f3eb9c3cc5c784", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a182638a704bea6a7c068eb81f3eb9c3cc5c784"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa8d4a0f0918b1ff192288722aadb7bd81cd0493", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa8d4a0f0918b1ff192288722aadb7bd81cd0493", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa8d4a0f0918b1ff192288722aadb7bd81cd0493", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa8d4a0f0918b1ff192288722aadb7bd81cd0493/comments", "author": null, "committer": null, "parents": [{"sha": "24030e4c48bd0c2c04981f223616484833c310e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24030e4c48bd0c2c04981f223616484833c310e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24030e4c48bd0c2c04981f223616484833c310e2"}], "stats": {"total": 99, "additions": 61, "deletions": 38}, "files": [{"sha": "44e291e5e66a4195692fcc9ce66f1e9afc331bb1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa8d4a0f0918b1ff192288722aadb7bd81cd0493/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa8d4a0f0918b1ff192288722aadb7bd81cd0493/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa8d4a0f0918b1ff192288722aadb7bd81cd0493", "patch": "@@ -1,4 +1,12 @@\n-2008-01-22  Bernd Schmidt  <bernd.schmidt@analog.com>\n+2008-01-23  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\t* config/bfin/bfin-protos.h (WA_RETS, ENABLE_WA_RETS): New macros.\n+\t* config/bfin/bfin.c (bfin_cpus): Add WA_RETS everywhere.\n+\t(cputype_selected): New static variable.\n+\t(bfin_handle_option): Set it if -mcpu is used.\n+\t(override_option): Select default set of workarounds if no cpu type\n+\tselected on the command line.\n+\t(workaround_rts_anomaly): Only run if ENABLE_WA_RETS.\n \n \tFrom  Michael Frysinger  <michael.frysinger@analog.com>\n \t* config/bfin/bfin-protos.h (enum bfin_cpu_type): Add"}, {"sha": "1786f5c36e49329fdeb23e7d0cf791c8a6680e8c", "filename": "gcc/config/bfin/bfin-protos.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa8d4a0f0918b1ff192288722aadb7bd81cd0493/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa8d4a0f0918b1ff192288722aadb7bd81cd0493/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h?ref=fa8d4a0f0918b1ff192288722aadb7bd81cd0493", "patch": "@@ -65,6 +65,11 @@ extern unsigned int bfin_workarounds;\n #define ENABLE_WA_SPECULATIVE_SYNCS \\\n   (bfin_workarounds & WA_SPECULATIVE_SYNCS)\n \n+/* For the anomaly 05-00-0371 */\n+#define WA_RETS 0x00000004\n+#define ENABLE_WA_RETS \\\n+  (bfin_workarounds & WA_RETS)\n+\n \n #define Mmode enum machine_mode\n "}, {"sha": "0a6a9ecdddc3deddf9df2c688bb2c052b5768be8", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 47, "deletions": 37, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa8d4a0f0918b1ff192288722aadb7bd81cd0493/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa8d4a0f0918b1ff192288722aadb7bd81cd0493/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=fa8d4a0f0918b1ff192288722aadb7bd81cd0493", "patch": "@@ -103,6 +103,8 @@ int bfin_si_revision;\n /* The workarounds enabled */\n unsigned int bfin_workarounds = 0;\n \n+static bool cputype_selected = false;\n+\n struct bfin_cpu\n {\n   const char *name;\n@@ -114,97 +116,97 @@ struct bfin_cpu\n struct bfin_cpu bfin_cpus[] =\n {\n   {\"bf522\", BFIN_CPU_BF522, 0x0000,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_RETS},\n \n   {\"bf523\", BFIN_CPU_BF523, 0x0000,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_RETS},\n \n   {\"bf524\", BFIN_CPU_BF524, 0x0000,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_RETS},\n \n   {\"bf525\", BFIN_CPU_BF525, 0x0000,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_RETS},\n \n   {\"bf526\", BFIN_CPU_BF526, 0x0000,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_RETS},\n \n   {\"bf527\", BFIN_CPU_BF527, 0x0000,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_RETS},\n \n   {\"bf531\", BFIN_CPU_BF531, 0x0005,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_RETS},\n   {\"bf531\", BFIN_CPU_BF531, 0x0004,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS},\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS},\n   {\"bf531\", BFIN_CPU_BF531, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS},\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS},\n \n   {\"bf532\", BFIN_CPU_BF532, 0x0005,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_RETS},\n   {\"bf532\", BFIN_CPU_BF532, 0x0004,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS},\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS},\n   {\"bf532\", BFIN_CPU_BF532, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS},\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS},\n \n   {\"bf533\", BFIN_CPU_BF533, 0x0005,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_RETS},\n   {\"bf533\", BFIN_CPU_BF533, 0x0004,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS},\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS},\n   {\"bf533\", BFIN_CPU_BF533, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS},\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS},\n \n   {\"bf534\", BFIN_CPU_BF534, 0x0003,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_RETS},\n   {\"bf534\", BFIN_CPU_BF534, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS},\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS},\n   {\"bf534\", BFIN_CPU_BF534, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS},\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS},\n \n   {\"bf536\", BFIN_CPU_BF536, 0x0003,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_RETS},\n   {\"bf536\", BFIN_CPU_BF536, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS},\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS},\n   {\"bf536\", BFIN_CPU_BF536, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS},\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS},\n \n   {\"bf537\", BFIN_CPU_BF537, 0x0003,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_RETS},\n   {\"bf537\", BFIN_CPU_BF537, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS},\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS},\n   {\"bf537\", BFIN_CPU_BF537, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS},\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS},\n \n   {\"bf538\", BFIN_CPU_BF538, 0x0004,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_RETS},\n   {\"bf538\", BFIN_CPU_BF538, 0x0003,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_RETS},\n \n   {\"bf539\", BFIN_CPU_BF539, 0x0004,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_RETS},\n   {\"bf539\", BFIN_CPU_BF539, 0x0003,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_RETS},\n   {\"bf539\", BFIN_CPU_BF539, 0x0002,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_RETS},\n \n   {\"bf542\", BFIN_CPU_BF542, 0x0000,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_RETS},\n \n   {\"bf544\", BFIN_CPU_BF544, 0x0000,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_RETS},\n \n   {\"bf547\", BFIN_CPU_BF547, 0x0000,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_RETS},\n \n   {\"bf548\", BFIN_CPU_BF548, 0x0000,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_RETS},\n \n   {\"bf549\", BFIN_CPU_BF549, 0x0000,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_RETS},\n \n-  {\"bf561\", BFIN_CPU_BF561, 0x0005, 0},\n+  {\"bf561\", BFIN_CPU_BF561, 0x0005, WA_RETS},\n   {\"bf561\", BFIN_CPU_BF561, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS},\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS},\n   {\"bf561\", BFIN_CPU_BF561, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS},\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS},\n \n   {NULL, 0, 0, 0}\n };\n@@ -2375,6 +2377,8 @@ bfin_handle_option (size_t code, const char *arg, int value)\n \n \tq = arg + strlen (p);\n \n+\tcputype_selected = true;\n+\n \tif (*q == '\\0')\n \t  {\n \t    bfin_si_revision = bfin_cpus[i].si_revision;\n@@ -2455,6 +2459,9 @@ override_options (void)\n   else if (bfin_specld_anomaly == 0)\n     bfin_workarounds &= ~WA_SPECULATIVE_LOADS;\n \n+  if (!cputype_selected)\n+    bfin_workarounds |= WA_RETS;\n+\n   if (TARGET_OMIT_LEAF_FRAME_POINTER)\n     flag_omit_frame_pointer = 1;\n \n@@ -4779,6 +4786,9 @@ bfin_reorg (void)\n   if (! ENABLE_WA_SPECULATIVE_SYNCS)\n     return;\n \n+  if (! ENABLE_WA_RETS)\n+    return;\n+\n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n     {\n       if (JUMP_P (insn)"}]}