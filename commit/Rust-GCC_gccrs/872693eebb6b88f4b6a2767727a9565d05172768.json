{"sha": "872693eebb6b88f4b6a2767727a9565d05172768", "node_id": "C_kwDOANBUbNoAKDg3MjY5M2VlYmI2Yjg4ZjRiNmEyNzY3NzI3YTk1NjVkMDUxNzI3Njg", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-07-28T21:21:29Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-07-28T21:21:29Z"}, "message": "analyzer: new warning: -Wanalyzer-putenv-of-auto-var [PR105893]\n\nThis patch implements a new -fanalyzer warning:\n  -Wanalyzer-putenv-of-auto-var\nwhich complains about stack pointers passed to putenv(3) calls, as\nper SEI CERT C Coding Standard rule POS34-C (\"Do not call putenv() with\na pointer to an automatic variable as the argument\").\n\nFor example, given:\n\n#include <stdio.h>\n#include <stdlib.h>\n\nvoid test_arr (void)\n{\n  char arr[] = \"NAME=VALUE\";\n  putenv (arr);\n}\n\nit emits:\n\ndemo.c: In function \u2018test_arr\u2019:\ndemo.c:7:3: warning: \u2018putenv\u2019 on a pointer to automatic variable \u2018arr\u2019 [POS34-C] [-Wanalyzer-putenv-of-auto-var]\n    7 |   putenv (arr);\n      |   ^~~~~~~~~~~~\n  \u2018test_arr\u2019: event 1\n    |\n    |    7 |   putenv (arr);\n    |      |   ^~~~~~~~~~~~\n    |      |   |\n    |      |   (1) \u2018putenv\u2019 on a pointer to automatic variable \u2018arr\u2019\n    |\ndemo.c:6:8: note: \u2018arr\u2019 declared on stack here\n    6 |   char arr[] = \"NAME=VALUE\";\n      |        ^~~\ndemo.c:7:3: note: perhaps use \u2018setenv\u2019 rather than \u2018putenv\u2019\n    7 |   putenv (arr);\n      |   ^~~~~~~~~~~~\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/105893\n\t* analyzer.opt (Wanalyzer-putenv-of-auto-var): New.\n\t* region-model-impl-calls.cc (class putenv_of_auto_var): New.\n\t(region_model::impl_call_putenv): New.\n\t* region-model.cc (region_model::on_call_pre): Handle putenv.\n\t* region-model.h (region_model::impl_call_putenv): New decl.\n\ngcc/ChangeLog:\n\tPR analyzer/105893\n\t* doc/invoke.texi: Add -Wanalyzer-putenv-of-auto-var.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/105893\n\t* gcc.dg/analyzer/putenv-1.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "902dcc07d5c83ef0124204e7cc5795e684fbaffb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/902dcc07d5c83ef0124204e7cc5795e684fbaffb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/872693eebb6b88f4b6a2767727a9565d05172768", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/872693eebb6b88f4b6a2767727a9565d05172768", "html_url": "https://github.com/Rust-GCC/gccrs/commit/872693eebb6b88f4b6a2767727a9565d05172768", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/872693eebb6b88f4b6a2767727a9565d05172768/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c60338061bf3679f925be12273dc723b3913b75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c60338061bf3679f925be12273dc723b3913b75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c60338061bf3679f925be12273dc723b3913b75"}], "stats": {"total": 251, "additions": 251, "deletions": 0}, "files": [{"sha": "808ff36ac54012815759d5d254f5de99befcf451", "filename": "gcc/analyzer/analyzer.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872693eebb6b88f4b6a2767727a9565d05172768/gcc%2Fanalyzer%2Fanalyzer.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872693eebb6b88f4b6a2767727a9565d05172768/gcc%2Fanalyzer%2Fanalyzer.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.opt?ref=872693eebb6b88f4b6a2767727a9565d05172768", "patch": "@@ -126,6 +126,10 @@ Wanalyzer-null-dereference\n Common Var(warn_analyzer_null_dereference) Init(1) Warning\n Warn about code paths in which a NULL pointer is dereferenced.\n \n+Wanalyzer-putenv-of-auto-var\n+Common Var(warn_analyzer_putenv_of_auto_var) Init(1) Warning\n+Warn about code paths in which an on-stack buffer is passed to putenv.\n+\n Wanalyzer-shift-count-negative\n Common Var(warn_analyzer_shift_count_negative) Init(1) Warning\n Warn about code paths in which a shift with negative count is attempted."}, {"sha": "3f821ff07e1f15401dda6b4748a8e59b07dc44c6", "filename": "gcc/analyzer/region-model-impl-calls.cc", "status": "modified", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872693eebb6b88f4b6a2767727a9565d05172768/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872693eebb6b88f4b6a2767727a9565d05172768/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc?ref=872693eebb6b88f4b6a2767727a9565d05172768", "patch": "@@ -549,6 +549,123 @@ region_model::impl_call_memset (const call_details &cd)\n   fill_region (sized_dest_reg, fill_value_u8);\n }\n \n+/* A subclass of pending_diagnostic for complaining about 'putenv'\n+   called on an auto var.  */\n+\n+class putenv_of_auto_var\n+: public pending_diagnostic_subclass<putenv_of_auto_var>\n+{\n+public:\n+  putenv_of_auto_var (tree fndecl, const region *reg)\n+  : m_fndecl (fndecl), m_reg (reg),\n+    m_var_decl (reg->get_base_region ()->maybe_get_decl ())\n+  {\n+  }\n+\n+  const char *get_kind () const final override\n+  {\n+    return \"putenv_of_auto_var\";\n+  }\n+\n+  bool operator== (const putenv_of_auto_var &other) const\n+  {\n+    return (m_fndecl == other.m_fndecl\n+\t    && m_reg == other.m_reg\n+\t    && same_tree_p (m_var_decl, other.m_var_decl));\n+  }\n+\n+  int get_controlling_option () const final override\n+  {\n+    return OPT_Wanalyzer_putenv_of_auto_var;\n+  }\n+\n+  bool emit (rich_location *rich_loc) final override\n+  {\n+    auto_diagnostic_group d;\n+    diagnostic_metadata m;\n+\n+    /* SEI CERT C Coding Standard: \"POS34-C. Do not call putenv() with a\n+       pointer to an automatic variable as the argument\".  */\n+    diagnostic_metadata::precanned_rule\n+      rule (\"POS34-C\", \"https://wiki.sei.cmu.edu/confluence/x/6NYxBQ\");\n+    m.add_rule (rule);\n+\n+    bool warned;\n+    if (m_var_decl)\n+      warned = warning_meta (rich_loc, m, get_controlling_option (),\n+\t\t\t     \"%qE on a pointer to automatic variable %qE\",\n+\t\t\t     m_fndecl, m_var_decl);\n+    else\n+      warned = warning_meta (rich_loc, m, get_controlling_option (),\n+\t\t\t     \"%qE on a pointer to an on-stack buffer\",\n+\t\t\t     m_fndecl);\n+    if (warned)\n+      {\n+\tif (m_var_decl)\n+\t  inform (DECL_SOURCE_LOCATION (m_var_decl),\n+\t\t  \"%qE declared on stack here\", m_var_decl);\n+\tinform (rich_loc->get_loc (), \"perhaps use %qs rather than %qE\",\n+\t\t\"setenv\", m_fndecl);\n+      }\n+\n+    return warned;\n+  }\n+\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n+  {\n+    if (m_var_decl)\n+      return ev.formatted_print (\"%qE on a pointer to automatic variable %qE\",\n+\t\t\t\t m_fndecl, m_var_decl);\n+    else\n+      return ev.formatted_print (\"%qE on a pointer to an on-stack buffer\",\n+\t\t\t\t m_fndecl);\n+  }\n+\n+  void mark_interesting_stuff (interesting_t *interest) final override\n+  {\n+    if (!m_var_decl)\n+      interest->add_region_creation (m_reg->get_base_region ());\n+  }\n+\n+private:\n+  tree m_fndecl; // non-NULL\n+  const region *m_reg; // non-NULL\n+  tree m_var_decl; // could be NULL\n+};\n+\n+/* Handle the on_call_pre part of \"putenv\".\n+\n+   In theory we could try to model the state of the environment variables\n+   for the process; for now we merely complain about putenv of regions\n+   on the stack.  */\n+\n+void\n+region_model::impl_call_putenv (const call_details &cd)\n+{\n+  tree fndecl = cd.get_fndecl_for_call ();\n+  gcc_assert (fndecl);\n+  region_model_context *ctxt = cd.get_ctxt ();\n+  const svalue *ptr_sval = cd.get_arg_svalue (0);\n+  const region *reg = deref_rvalue (ptr_sval, cd.get_arg_tree (0), ctxt);\n+  m_store.mark_as_escaped (reg);\n+  enum memory_space mem_space = reg->get_memory_space ();\n+  switch (mem_space)\n+    {\n+    default:\n+      gcc_unreachable ();\n+    case MEMSPACE_UNKNOWN:\n+    case MEMSPACE_CODE:\n+    case MEMSPACE_GLOBALS:\n+    case MEMSPACE_HEAP:\n+    case MEMSPACE_READONLY_DATA:\n+      break;\n+    case MEMSPACE_STACK:\n+      if (ctxt)\n+\tctxt->warn (new putenv_of_auto_var (fndecl, reg));\n+      break;\n+    }\n+}\n+\n /* Handle the on_call_pre part of \"operator new\".  */\n \n void"}, {"sha": "a140f4d5088ae1e5ede5216125545426d4e758f0", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872693eebb6b88f4b6a2767727a9565d05172768/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872693eebb6b88f4b6a2767727a9565d05172768/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=872693eebb6b88f4b6a2767727a9565d05172768", "patch": "@@ -1539,6 +1539,12 @@ region_model::on_call_pre (const gcall *call, region_model_context *ctxt,\n \t  impl_call_memset (cd);\n \t  return false;\n \t}\n+      else if (is_named_call_p (callee_fndecl, \"putenv\", call, 1)\n+\t       && POINTER_TYPE_P (cd.get_arg_type (0)))\n+\t{\n+\t  impl_call_putenv (cd);\n+\t  return false;\n+\t}\n       else if (is_named_call_p (callee_fndecl, \"strchr\", call, 2)\n \t       && POINTER_TYPE_P (cd.get_arg_type (0)))\n \t{"}, {"sha": "a9657e0200ad368bcfc91720259eedae0d2d6684", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872693eebb6b88f4b6a2767727a9565d05172768/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872693eebb6b88f4b6a2767727a9565d05172768/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=872693eebb6b88f4b6a2767727a9565d05172768", "patch": "@@ -630,6 +630,7 @@ class region_model\n   void impl_call_malloc (const call_details &cd);\n   void impl_call_memcpy (const call_details &cd);\n   void impl_call_memset (const call_details &cd);\n+  void impl_call_putenv (const call_details &cd);\n   void impl_call_realloc (const call_details &cd);\n   void impl_call_strchr (const call_details &cd);\n   void impl_call_strcpy (const call_details &cd);"}, {"sha": "e8cd60103e4f537d06f5e1018c0feb7f14164e56", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872693eebb6b88f4b6a2767727a9565d05172768/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872693eebb6b88f4b6a2767727a9565d05172768/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=872693eebb6b88f4b6a2767727a9565d05172768", "patch": "@@ -459,6 +459,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wno-analyzer-null-dereference @gol\n -Wno-analyzer-possible-null-argument @gol\n -Wno-analyzer-possible-null-dereference @gol\n+-Wno-analyzer-putenv-of-auto-var @gol\n -Wno-analyzer-shift-count-negative @gol\n -Wno-analyzer-shift-count-overflow @gol\n -Wno-analyzer-stale-setjmp-buffer @gol\n@@ -9761,6 +9762,7 @@ Enabling this option effectively enables the following warnings:\n -Wanalyzer-null-dereference @gol\n -Wanalyzer-possible-null-argument @gol\n -Wanalyzer-possible-null-dereference @gol\n+-Wanalyzer-putenv-of-auto-var @gol\n -Wanalyzer-shift-count-negative @gol\n -Wanalyzer-shift-count-overflow @gol\n -Wanalyzer-stale-setjmp-buffer @gol\n@@ -10017,6 +10019,18 @@ value known to be NULL is dereferenced.\n \n See @uref{https://cwe.mitre.org/data/definitions/476.html, CWE-476: NULL Pointer Dereference}.\n \n+@item -Wno-analyzer-putenv-of-auto-var\n+@opindex Wanalyzer-putenv-of-auto-var\n+@opindex Wno-analyzer-putenv-of-auto-var\n+This warning requires @option{-fanalyzer}, which enables it; use\n+@option{-Wno-analyzer-possible-null-dereference} to disable it.\n+\n+This diagnostic warns for paths through the code in which a\n+call to @code{putenv} is passed a pointer to an automatic variable\n+or an on-stack buffer.\n+\n+See @uref{https://wiki.sei.cmu.edu/confluence/x/6NYxBQ, POS34-C. Do not call putenv() with a pointer to an automatic variable as the argument}.\n+\n @item -Wno-analyzer-shift-count-negative\n @opindex Wanalyzer-shift-count-negative\n @opindex Wno-analyzer-shift-count-negative"}, {"sha": "4c3f0ae2e740609ca938b0d7bd5efbad4c99d0d2", "filename": "gcc/testsuite/gcc.dg/analyzer/putenv-1.c", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872693eebb6b88f4b6a2767727a9565d05172768/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fputenv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872693eebb6b88f4b6a2767727a9565d05172768/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fputenv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fputenv-1.c?ref=872693eebb6b88f4b6a2767727a9565d05172768", "patch": "@@ -0,0 +1,109 @@\n+/* { dg-additional-options \"-Wno-analyzer-null-argument\" } */\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+extern void populate (char *buf);\n+\n+void test_passthrough (char *s)\n+{\n+  putenv (s);\n+}\n+\n+void test_str_lit (void)\n+{\n+  putenv (\"NAME=value\");\n+}\n+\n+/* glibc allows strings without an equal sign.  */\n+\n+void test_no_eq (void)\n+{\n+  putenv (\"NAME\");\n+}\n+\n+void test_empty_string (void)\n+{\n+  putenv (\"\");\n+}\n+\n+void test_NULL (void)\n+{\n+  putenv (NULL); /* possibly -Wanalyzer-null-argument */\n+}\n+\n+void test_auto_buf_name_and_value (const char *name, const char *value)\n+{\n+  char buf[100]; /* { dg-message \"'buf' declared on stack here\" } */\n+  snprintf (buf, sizeof (buf), \"%s=%s\", name, value);\n+  putenv (buf); /* { dg-warning \"'putenv' on a pointer to automatic variable 'buf' \\\\\\[POS34-C\\\\\\]\" \"warning\" } */\n+  /* { dg-message \"perhaps use 'setenv' rather than 'putenv'\" \"setenv suggestion\" { target *-*-* } .-1 } */\n+}\n+\n+void test_auto_buf_value (const char *value)\n+{\n+  char buf[100]; /* { dg-message \"'buf' declared on stack here\" } */\n+  snprintf (buf, sizeof (buf), \"NAME=%s\", value);\n+  putenv (buf); /* { dg-warning \"'putenv' on a pointer to automatic variable 'buf' \\\\\\[POS34-C\\\\\\]\" } */\n+}\n+\n+void test_static_buf (const char *value)\n+{\n+  static char buf[100];\n+  snprintf (buf, sizeof (buf), \"NAME=%s\", value);\n+  putenv (buf);\n+}\n+\n+static char global_buf[1024];\n+\n+void test_global (const char *value)\n+{\n+  snprintf (global_buf, sizeof (global_buf), \"NAME=%s\", value);\n+  putenv (global_buf);\n+}\n+\n+void test_alloca (void)\n+{\n+  char *buf = __builtin_alloca (256); /* { dg-message \"region created on stack here\" } */\n+  populate (buf);\n+  putenv (buf); /* { dg-warning \"'putenv' on a pointer to an on-stack buffer \\\\\\[POS34-C\\\\\\]\" } */\n+}\n+\n+void test_malloc_1 (void)\n+{\n+  char *buf = malloc (1024);\n+  if (!buf)\n+    return;\n+  populate (buf);\n+  putenv (buf);\n+}\n+\n+void test_malloc_2 (void)\n+{\n+  const char *kvstr = \"NAME=value\";\n+  size_t len = __builtin_strlen (kvstr);\n+  char *buf = __builtin_malloc (len + 1);\n+  if (!buf)\n+    return;\n+  __builtin_memcpy (buf, kvstr, len);\n+  buf[len] = '\\0';\n+  putenv (buf); /* { dg-bogus \"leak\" } */\n+}\n+\n+void test_arr (void)\n+{\n+  char arr[] = \"NAME=VALUE\"; /* { dg-message \"'arr' declared on stack here\" } */\n+  putenv (arr); /* { dg-warning \"'putenv' on a pointer to automatic variable 'arr' \\\\\\[POS34-C\\\\\\]\" } */\n+}\n+\n+static void __attribute__((noinline))\n+__analyzer_test_inner (char *kvstr)\n+{\n+  putenv (kvstr); /* { dg-warning \"'putenv' on a pointer to automatic variable 'arr_outer' \\\\\\[POS34-C\\\\\\]\" } */\n+}\n+\n+void test_outer (void)\n+{\n+  char arr_outer[] = \"NAME=VALUE\"; /* { dg-message \"'arr_outer' declared on stack here\" } */\n+  __analyzer_test_inner (arr_outer);\n+}"}]}