{"sha": "4a948703db483c3ba3df67816425d951c0268623", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE5NDg3MDNkYjQ4M2MzYmEzZGY2NzgxNjQyNWQ5NTFjMDI2ODYyMw==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-05-25T08:10:06Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-05-28T08:06:04Z"}, "message": "Fix nonconforming memory_operand for vpmovq{d,w,b}/vpmovd{w,b}/vpmovwb.\n\nAccording to Intel SDM, VPMOVQB xmm1/m16 {k1}{z}, xmm2 has 16-bit\nmemory_operand instead of 128-bit one which existed in current\nimplementation. Also for other vpmov instructions which have\nmemory_operand narrower than 128bits.\n\n2020-05-25  Hongtao Liu  <hongtao.liu@intel.com>\n\ngcc/ChangeLog\n\n\t* config/i386/sse.md (*avx512vl_<code>v2div2qi2_store_1): Rename\n\tfrom *avx512vl_<code>v2div2qi_store and refine memory size of\n\tthe pattern.\n\t(*avx512vl_<code>v2div2qi2_mask_store_1): Ditto.\n\t(*avx512vl_<code><mode>v4qi2_store_1): Ditto.\n\t(*avx512vl_<code><mode>v4qi2_mask_store_1): Ditto.\n\t(*avx512vl_<code><mode>v8qi2_store_1): Ditto.\n\t(*avx512vl_<code><mode>v8qi2_mask_store_1): Ditto.\n\t(*avx512vl_<code><mode>v4hi2_store_1): Ditto.\n\t(*avx512vl_<code><mode>v4hi2_mask_store_1): Ditto.\n\t(*avx512vl_<code>v2div2hi2_store_1): Ditto.\n\t(*avx512vl_<code>v2div2hi2_mask_store_1): Ditto.\n\t(*avx512vl_<code>v2div2si2_store_1): Ditto.\n\t(*avx512vl_<code>v2div2si2_mask_store_1): Ditto.\n\t(*avx512f_<code>v8div16qi2_store_1): Ditto.\n\t(*avx512f_<code>v8div16qi2_mask_store_1): Ditto.\n\t(*avx512vl_<code>v2div2qi2_store_2): New define_insn_and_split.\n\t(*avx512vl_<code>v2div2qi2_mask_store_2): Ditto.\n\t(*avx512vl_<code><mode>v4qi2_store_2): Ditto.\n\t(*avx512vl_<code><mode>v4qi2_mask_store_2): Ditto.\n\t(*avx512vl_<code><mode>v8qi2_store_2): Ditto.\n\t(*avx512vl_<code><mode>v8qi2_mask_store_2): Ditto.\n\t(*avx512vl_<code><mode>v4hi2_store_2): Ditto.\n\t(*avx512vl_<code><mode>v4hi2_mask_store_2): Ditto.\n\t(*avx512vl_<code>v2div2hi2_store_2): Ditto.\n\t(*avx512vl_<code>v2div2hi2_mask_store_2): Ditto.\n\t(*avx512vl_<code>v2div2si2_store_2): Ditto.\n\t(*avx512vl_<code>v2div2si2_mask_store_2): Ditto.\n\t(*avx512f_<code>v8div16qi2_store_2): Ditto.\n\t(*avx512f_<code>v8div16qi2_mask_store_2): Ditto.\n\t* config/i386/i386-builtin-types.def: Adjust builtin type.\n\t* config/i386/i386-expand.c: Ditto.\n\t* config/i386/i386-builtin.def: Adjust builtin.\n\t* config/i386/avx512fintrin.h: Ditto.\n\t* config/i386/avx512vlbwintrin.h: Ditto.\n\t* config/i386/avx512vlintrin.h: Ditto.", "tree": {"sha": "6e867557e7616e224f83fee6452bef7606df80ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e867557e7616e224f83fee6452bef7606df80ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a948703db483c3ba3df67816425d951c0268623", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a948703db483c3ba3df67816425d951c0268623", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a948703db483c3ba3df67816425d951c0268623", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a948703db483c3ba3df67816425d951c0268623/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07d77cc23953335c3539e2a86fc4a052d9845524", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07d77cc23953335c3539e2a86fc4a052d9845524", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07d77cc23953335c3539e2a86fc4a052d9845524"}], "stats": {"total": 704, "additions": 421, "deletions": 283}, "files": [{"sha": "4bcd697387a22d423d73b8e45371e943dbe90c9b", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a948703db483c3ba3df67816425d951c0268623/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a948703db483c3ba3df67816425d951c0268623/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=4a948703db483c3ba3df67816425d951c0268623", "patch": "@@ -5613,7 +5613,8 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_cvtepi64_storeu_epi8 (void * __P, __mmask8 __M, __m512i __A)\n {\n-  __builtin_ia32_pmovqb512mem_mask ((__v16qi *) __P, (__v8di) __A, __M);\n+  __builtin_ia32_pmovqb512mem_mask ((unsigned long long *) __P,\n+\t\t\t\t    (__v8di) __A, __M);\n }\n \n extern __inline __m128i\n@@ -5648,7 +5649,7 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_cvtsepi64_storeu_epi8 (void * __P, __mmask8 __M, __m512i __A)\n {\n-  __builtin_ia32_pmovsqb512mem_mask ((__v16qi *) __P, (__v8di) __A, __M);\n+  __builtin_ia32_pmovsqb512mem_mask ((unsigned long long *) __P, (__v8di) __A, __M);\n }\n \n extern __inline __m128i\n@@ -5683,7 +5684,7 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_cvtusepi64_storeu_epi8 (void * __P, __mmask8 __M, __m512i __A)\n {\n-  __builtin_ia32_pmovusqb512mem_mask ((__v16qi *) __P, (__v8di) __A, __M);\n+  __builtin_ia32_pmovusqb512mem_mask ((unsigned long long *) __P, (__v8di) __A, __M);\n }\n \n extern __inline __m128i"}, {"sha": "cd4275e0781377a611ef9f0121153595114900a2", "filename": "gcc/config/i386/avx512vlbwintrin.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a948703db483c3ba3df67816425d951c0268623/gcc%2Fconfig%2Fi386%2Favx512vlbwintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a948703db483c3ba3df67816425d951c0268623/gcc%2Fconfig%2Fi386%2Favx512vlbwintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vlbwintrin.h?ref=4a948703db483c3ba3df67816425d951c0268623", "patch": "@@ -255,7 +255,7 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cvtsepi16_storeu_epi8 (void * __P, __mmask8 __M,__m128i __A)\n {\n-  __builtin_ia32_pmovswb128mem_mask ((__v8qi *) __P , (__v8hi) __A, __M);\n+  __builtin_ia32_pmovswb128mem_mask ((unsigned long long *) __P , (__v8hi) __A, __M);\n }\n \n extern __inline __m128i\n@@ -325,7 +325,7 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cvtusepi16_storeu_epi8 (void * __P, __mmask8 __M,__m128i __A)\n {\n-  __builtin_ia32_pmovuswb128mem_mask ((__v8qi *) __P , (__v8hi) __A, __M);\n+  __builtin_ia32_pmovuswb128mem_mask ((unsigned long long *) __P , (__v8hi) __A, __M);\n }\n \n extern __inline __m128i\n@@ -4048,7 +4048,7 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cvtepi16_storeu_epi8 (void * __P, __mmask8 __M,__m128i __A)\n {\n-  __builtin_ia32_pmovwb128mem_mask ((__v8qi *) __P , (__v8hi) __A, __M);\n+  __builtin_ia32_pmovwb128mem_mask ((unsigned long long *) __P , (__v8hi) __A, __M);\n }\n \n extern __inline __m128i"}, {"sha": "7abd6018f4fc08283d3be9b93a26f795a658871d", "filename": "gcc/config/i386/avx512vlintrin.h", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a948703db483c3ba3df67816425d951c0268623/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a948703db483c3ba3df67816425d951c0268623/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h?ref=4a948703db483c3ba3df67816425d951c0268623", "patch": "@@ -1485,7 +1485,7 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cvtepi32_storeu_epi8 (void * __P, __mmask8 __M, __m128i __A)\n {\n-  __builtin_ia32_pmovdb128mem_mask ((__v16qi *) __P, (__v4si) __A, __M);\n+  __builtin_ia32_pmovdb128mem_mask ((unsigned int *) __P, (__v4si) __A, __M);\n }\n \n extern __inline __m128i\n@@ -1528,7 +1528,7 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_cvtepi32_storeu_epi8 (void * __P, __mmask8 __M, __m256i __A)\n {\n-  __builtin_ia32_pmovdb256mem_mask ((__v16qi *) __P, (__v8si) __A, __M);\n+  __builtin_ia32_pmovdb256mem_mask ((unsigned long long *) __P, (__v8si) __A, __M);\n }\n \n extern __inline __m128i\n@@ -1555,7 +1555,7 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cvtsepi32_storeu_epi8 (void * __P, __mmask8 __M, __m128i __A)\n {\n-  __builtin_ia32_pmovsdb128mem_mask ((__v16qi *) __P, (__v4si) __A, __M);\n+  __builtin_ia32_pmovsdb128mem_mask ((unsigned int *) __P, (__v4si) __A, __M);\n }\n \n extern __inline __m128i\n@@ -1590,7 +1590,7 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_cvtsepi32_storeu_epi8 (void * __P, __mmask8 __M, __m256i __A)\n {\n-  __builtin_ia32_pmovsdb256mem_mask ((__v16qi *) __P, (__v8si) __A, __M);\n+  __builtin_ia32_pmovsdb256mem_mask ((unsigned long long *) __P, (__v8si) __A, __M);\n }\n \n extern __inline __m128i\n@@ -1625,7 +1625,7 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cvtusepi32_storeu_epi8 (void * __P, __mmask8 __M, __m128i __A)\n {\n-  __builtin_ia32_pmovusdb128mem_mask ((__v16qi *) __P, (__v4si) __A, __M);\n+  __builtin_ia32_pmovusdb128mem_mask ((unsigned int *) __P, (__v4si) __A, __M);\n }\n \n extern __inline __m128i\n@@ -1661,7 +1661,7 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_cvtusepi32_storeu_epi8 (void * __P, __mmask8 __M, __m256i __A)\n {\n-  __builtin_ia32_pmovusdb256mem_mask ((__v16qi*) __P, (__v8si) __A, __M);\n+  __builtin_ia32_pmovusdb256mem_mask ((unsigned long long *) __P, (__v8si) __A, __M);\n }\n \n extern __inline __m128i\n@@ -1697,7 +1697,7 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cvtepi32_storeu_epi16 (void * __P, __mmask8 __M, __m128i __A)\n {\n-  __builtin_ia32_pmovdw128mem_mask ((__v8hi *) __P, (__v4si) __A, __M);\n+  __builtin_ia32_pmovdw128mem_mask ((unsigned long long *) __P, (__v4si) __A, __M);\n }\n \n extern __inline __m128i\n@@ -1767,7 +1767,7 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cvtsepi32_storeu_epi16 (void * __P, __mmask8 __M, __m128i __A)\n {\n-  __builtin_ia32_pmovsdw128mem_mask ((__v8hi *) __P, (__v4si) __A, __M);\n+  __builtin_ia32_pmovsdw128mem_mask ((unsigned long long *) __P, (__v4si) __A, __M);\n }\n \n extern __inline __m128i\n@@ -1838,7 +1838,7 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cvtusepi32_storeu_epi16 (void * __P, __mmask8 __M, __m128i __A)\n {\n-  __builtin_ia32_pmovusdw128mem_mask ((__v8hi *) __P, (__v4si) __A, __M);\n+  __builtin_ia32_pmovusdw128mem_mask ((unsigned long long *) __P, (__v4si) __A, __M);\n }\n \n extern __inline __m128i\n@@ -1908,7 +1908,7 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cvtepi64_storeu_epi8 (void * __P, __mmask8 __M, __m128i __A)\n {\n-  __builtin_ia32_pmovqb128mem_mask ((__v16qi *) __P, (__v2di) __A, __M);\n+  __builtin_ia32_pmovqb128mem_mask ((unsigned short *) __P, (__v2di) __A, __M);\n }\n \n extern __inline __m128i\n@@ -1943,7 +1943,7 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_cvtepi64_storeu_epi8 (void * __P, __mmask8 __M, __m256i __A)\n {\n-  __builtin_ia32_pmovqb256mem_mask ((__v16qi *) __P, (__v4di) __A, __M);\n+  __builtin_ia32_pmovqb256mem_mask ((unsigned int *) __P, (__v4di) __A, __M);\n }\n \n extern __inline __m128i\n@@ -1978,7 +1978,7 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cvtsepi64_storeu_epi8 (void * __P, __mmask8 __M, __m128i __A)\n {\n-  __builtin_ia32_pmovsqb128mem_mask ((__v16qi *) __P, (__v2di) __A, __M);\n+  __builtin_ia32_pmovsqb128mem_mask ((unsigned short *) __P, (__v2di) __A, __M);\n }\n \n extern __inline __m128i\n@@ -2013,7 +2013,7 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_cvtsepi64_storeu_epi8 (void * __P, __mmask8 __M, __m256i __A)\n {\n-  __builtin_ia32_pmovsqb256mem_mask ((__v16qi *) __P, (__v4di) __A, __M);\n+  __builtin_ia32_pmovsqb256mem_mask ((unsigned int *) __P, (__v4di) __A, __M);\n }\n \n extern __inline __m128i\n@@ -2048,7 +2048,7 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cvtusepi64_storeu_epi8 (void * __P, __mmask8 __M, __m128i __A)\n {\n-  __builtin_ia32_pmovusqb128mem_mask ((__v16qi *) __P, (__v2di) __A, __M);\n+  __builtin_ia32_pmovusqb128mem_mask ((unsigned short *) __P, (__v2di) __A, __M);\n }\n \n extern __inline __m128i\n@@ -2084,7 +2084,7 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_cvtusepi64_storeu_epi8 (void * __P, __mmask8 __M, __m256i __A)\n {\n-  __builtin_ia32_pmovusqb256mem_mask ((__v16qi *) __P, (__v4di) __A, __M);\n+  __builtin_ia32_pmovusqb256mem_mask ((unsigned int *) __P, (__v4di) __A, __M);\n }\n \n extern __inline __m128i\n@@ -2120,7 +2120,7 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cvtepi64_storeu_epi16 (void * __P, __mmask8 __M, __m128i __A)\n {\n-  __builtin_ia32_pmovqw128mem_mask ((__v8hi *) __P, (__v2di) __A, __M);\n+  __builtin_ia32_pmovqw128mem_mask ((unsigned int *) __P, (__v2di) __A, __M);\n }\n \n extern __inline __m128i\n@@ -2156,7 +2156,7 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_cvtepi64_storeu_epi16 (void * __P, __mmask8 __M, __m256i __A)\n {\n-  __builtin_ia32_pmovqw256mem_mask ((__v8hi *) __P, (__v4di) __A, __M);\n+  __builtin_ia32_pmovqw256mem_mask ((unsigned long long *) __P, (__v4di) __A, __M);\n }\n \n extern __inline __m128i\n@@ -2191,7 +2191,7 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cvtsepi64_storeu_epi16 (void * __P, __mmask8 __M, __m128i __A)\n {\n-  __builtin_ia32_pmovsqw128mem_mask ((__v8hi *) __P, (__v2di) __A, __M);\n+  __builtin_ia32_pmovsqw128mem_mask ((unsigned int *) __P, (__v2di) __A, __M);\n }\n \n extern __inline __m128i\n@@ -2226,7 +2226,7 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_cvtsepi64_storeu_epi16 (void * __P, __mmask8 __M, __m256i __A)\n {\n-  __builtin_ia32_pmovsqw256mem_mask ((__v8hi *) __P, (__v4di) __A, __M);\n+  __builtin_ia32_pmovsqw256mem_mask ((unsigned long long *) __P, (__v4di) __A, __M);\n }\n \n extern __inline __m128i\n@@ -2261,7 +2261,7 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cvtusepi64_storeu_epi16 (void * __P, __mmask8 __M, __m128i __A)\n {\n-  __builtin_ia32_pmovusqw128mem_mask ((__v8hi *) __P, (__v2di) __A, __M);\n+  __builtin_ia32_pmovusqw128mem_mask ((unsigned int *) __P, (__v2di) __A, __M);\n }\n \n extern __inline __m128i\n@@ -2296,7 +2296,7 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_cvtusepi64_storeu_epi16 (void * __P, __mmask8 __M, __m256i __A)\n {\n-  __builtin_ia32_pmovusqw256mem_mask ((__v8hi *) __P, (__v4di) __A, __M);\n+  __builtin_ia32_pmovusqw256mem_mask ((unsigned long long *) __P, (__v4di) __A, __M);\n }\n \n extern __inline __m128i\n@@ -2331,7 +2331,8 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cvtepi64_storeu_epi32 (void * __P, __mmask8 __M, __m128i __A)\n {\n-  __builtin_ia32_pmovqd128mem_mask ((__v4si *) __P, (__v2di) __A, __M);\n+  __builtin_ia32_pmovqd128mem_mask ((unsigned long long *) __P,\n+\t\t\t\t    (__v2di) __A, __M);\n }\n \n extern __inline __m128i\n@@ -2401,7 +2402,7 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cvtsepi64_storeu_epi32 (void * __P, __mmask8 __M, __m128i __A)\n {\n-  __builtin_ia32_pmovsqd128mem_mask ((__v4si *) __P, (__v2di) __A, __M);\n+  __builtin_ia32_pmovsqd128mem_mask ((unsigned long long *) __P, (__v2di) __A, __M);\n }\n \n extern __inline __m128i\n@@ -2472,7 +2473,7 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cvtusepi64_storeu_epi32 (void * __P, __mmask8 __M, __m128i __A)\n {\n-  __builtin_ia32_pmovusqd128mem_mask ((__v4si *) __P, (__v2di) __A, __M);\n+  __builtin_ia32_pmovusqd128mem_mask ((unsigned long long *) __P, (__v2di) __A, __M);\n }\n \n extern __inline __m128i"}, {"sha": "1adf7c44f4a7af6653b179153f3406c5f2c6667f", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a948703db483c3ba3df67816425d951c0268623/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a948703db483c3ba3df67816425d951c0268623/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=4a948703db483c3ba3df67816425d951c0268623", "patch": "@@ -870,12 +870,12 @@ DEF_FUNCTION_TYPE (V4SF, V4SF, V4SF, INT, V4SF, UQI)\n DEF_FUNCTION_TYPE (VOID, PV8DF, V8DF, UQI)\n DEF_FUNCTION_TYPE (VOID, PV8SI, V8DI, UQI)\n DEF_FUNCTION_TYPE (VOID, PV8HI, V8DI, UQI)\n-DEF_FUNCTION_TYPE (VOID, PV8HI, V4DI, UQI)\n-DEF_FUNCTION_TYPE (VOID, PV8HI, V2DI, UQI)\n+DEF_FUNCTION_TYPE (VOID, PUDI, V4DI, UQI)\n+DEF_FUNCTION_TYPE (VOID, PUSI, V2DI, UQI)\n DEF_FUNCTION_TYPE (VOID, PV4SI, V4DI, UQI)\n-DEF_FUNCTION_TYPE (VOID, PV4SI, V2DI, UQI)\n+DEF_FUNCTION_TYPE (VOID, PUDI, V2DI, UQI)\n DEF_FUNCTION_TYPE (VOID, PV8HI, V8SI, UQI)\n-DEF_FUNCTION_TYPE (VOID, PV8HI, V4SI, UQI)\n+DEF_FUNCTION_TYPE (VOID, PUDI, V4SI, UQI)\n DEF_FUNCTION_TYPE (VOID, PV4DF, V4DF, UQI)\n DEF_FUNCTION_TYPE (VOID, PV2DF, V2DF, UQI)\n DEF_FUNCTION_TYPE (VOID, PV16SF, V16SF, UHI)\n@@ -887,11 +887,11 @@ DEF_FUNCTION_TYPE (VOID, PV2DI, V2DI, UQI)\n DEF_FUNCTION_TYPE (VOID, PV16SI, V16SI, UHI)\n DEF_FUNCTION_TYPE (VOID, PV16HI, V16SI, UHI)\n DEF_FUNCTION_TYPE (VOID, PV16QI, V16SI, UHI)\n-DEF_FUNCTION_TYPE (VOID, PV16QI, V8SI, UQI)\n-DEF_FUNCTION_TYPE (VOID, PV16QI, V4SI, UQI)\n-DEF_FUNCTION_TYPE (VOID, PV16QI, V8DI, UQI)\n-DEF_FUNCTION_TYPE (VOID, PV16QI, V4DI, UQI)\n-DEF_FUNCTION_TYPE (VOID, PV16QI, V2DI, UQI)\n+DEF_FUNCTION_TYPE (VOID, PUDI, V8SI, UQI)\n+DEF_FUNCTION_TYPE (VOID, PUSI, V4SI, UQI)\n+DEF_FUNCTION_TYPE (VOID, PUDI, V8DI, UQI)\n+DEF_FUNCTION_TYPE (VOID, PUSI, V4DI, UQI)\n+DEF_FUNCTION_TYPE (VOID, PUHI, V2DI, UQI)\n DEF_FUNCTION_TYPE (VOID, PV8SI, V8SI, UQI)\n DEF_FUNCTION_TYPE (VOID, PV4SI, V4SI, UQI)\n DEF_FUNCTION_TYPE (VOID, PDOUBLE, V8DF, UQI)\n@@ -1130,7 +1130,7 @@ DEF_FUNCTION_TYPE (VOID, PVOID, QI, V2DI, V2DI, INT)\n DEF_FUNCTION_TYPE (VOID, QI, V8SI, PCVOID, INT, INT)\n DEF_FUNCTION_TYPE (VOID, HI, V16SI, PCVOID, INT, INT)\n DEF_FUNCTION_TYPE (VOID, QI, V8DI, PCVOID, INT, INT)\n-DEF_FUNCTION_TYPE (VOID, PV8QI, V8HI, UQI)\n+DEF_FUNCTION_TYPE (VOID, PUDI, V8HI, UQI)\n DEF_FUNCTION_TYPE (VOID, PV16QI, V16HI, UHI)\n \n DEF_FUNCTION_TYPE_ALIAS (V2DF_FTYPE_V2DF, ROUND)"}, {"sha": "6270068fba1d815a3c37bde2724cbb202923814a", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a948703db483c3ba3df67816425d951c0268623/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a948703db483c3ba3df67816425d951c0268623/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=4a948703db483c3ba3df67816425d951c0268623", "patch": "@@ -244,9 +244,9 @@ BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_truncatev8div8hi2_mask_store\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_us_truncatev16siv16hi2_mask_store, \"__builtin_ia32_pmovusdw512mem_mask\", IX86_BUILTIN_PMOVUSDW512_MEM, UNKNOWN, (int) VOID_FTYPE_PV16HI_V16SI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_ss_truncatev16siv16hi2_mask_store, \"__builtin_ia32_pmovsdw512mem_mask\", IX86_BUILTIN_PMOVSDW512_MEM, UNKNOWN, (int) VOID_FTYPE_PV16HI_V16SI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_truncatev16siv16hi2_mask_store, \"__builtin_ia32_pmovdw512mem_mask\", IX86_BUILTIN_PMOVDW512_MEM, UNKNOWN, (int) VOID_FTYPE_PV16HI_V16SI_UHI)\n-BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_truncatev8div16qi2_mask_store, \"__builtin_ia32_pmovqb512mem_mask\", IX86_BUILTIN_PMOVQB512_MEM, UNKNOWN, (int) VOID_FTYPE_PV16QI_V8DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_us_truncatev8div16qi2_mask_store, \"__builtin_ia32_pmovusqb512mem_mask\", IX86_BUILTIN_PMOVUSQB512_MEM, UNKNOWN, (int) VOID_FTYPE_PV16QI_V8DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_ss_truncatev8div16qi2_mask_store, \"__builtin_ia32_pmovsqb512mem_mask\", IX86_BUILTIN_PMOVSQB512_MEM, UNKNOWN, (int) VOID_FTYPE_PV16QI_V8DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_truncatev8div16qi2_mask_store_2, \"__builtin_ia32_pmovqb512mem_mask\", IX86_BUILTIN_PMOVQB512_MEM, UNKNOWN, (int) VOID_FTYPE_PUDI_V8DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_us_truncatev8div16qi2_mask_store_2, \"__builtin_ia32_pmovusqb512mem_mask\", IX86_BUILTIN_PMOVUSQB512_MEM, UNKNOWN, (int) VOID_FTYPE_PUDI_V8DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_ss_truncatev8div16qi2_mask_store_2, \"__builtin_ia32_pmovsqb512mem_mask\", IX86_BUILTIN_PMOVSQB512_MEM, UNKNOWN, (int) VOID_FTYPE_PUDI_V8DI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_us_truncatev16siv16qi2_mask_store, \"__builtin_ia32_pmovusdb512mem_mask\", IX86_BUILTIN_PMOVUSDB512_MEM, UNKNOWN, (int) VOID_FTYPE_PV16QI_V16SI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_ss_truncatev16siv16qi2_mask_store, \"__builtin_ia32_pmovsdb512mem_mask\", IX86_BUILTIN_PMOVSDB512_MEM, UNKNOWN, (int) VOID_FTYPE_PV16QI_V16SI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_truncatev16siv16qi2_mask_store, \"__builtin_ia32_pmovdb512mem_mask\", IX86_BUILTIN_PMOVDB512_MEM, UNKNOWN, (int) VOID_FTYPE_PV16QI_V16SI_UHI)\n@@ -362,40 +362,40 @@ BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_expandv2di_maskz, \"__built\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_expandv8si_maskz, \"__builtin_ia32_expandloadsi256_maskz\", IX86_BUILTIN_PEXPANDDLOAD256Z, UNKNOWN, (int) V8SI_FTYPE_PCV8SI_V8SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_expandv4si_maskz, \"__builtin_ia32_expandloadsi128_maskz\", IX86_BUILTIN_PEXPANDDLOAD128Z, UNKNOWN, (int) V4SI_FTYPE_PCV4SI_V4SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_truncatev4div4si2_mask_store, \"__builtin_ia32_pmovqd256mem_mask\", IX86_BUILTIN_PMOVQD256_MEM, UNKNOWN, (int) VOID_FTYPE_PV4SI_V4DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_truncatev2div2si2_mask_store, \"__builtin_ia32_pmovqd128mem_mask\", IX86_BUILTIN_PMOVQD128_MEM, UNKNOWN, (int) VOID_FTYPE_PV4SI_V2DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_truncatev2div2si2_mask_store_2, \"__builtin_ia32_pmovqd128mem_mask\", IX86_BUILTIN_PMOVQD128_MEM, UNKNOWN, (int) VOID_FTYPE_PUDI_V2DI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_ss_truncatev4div4si2_mask_store, \"__builtin_ia32_pmovsqd256mem_mask\", IX86_BUILTIN_PMOVSQD256_MEM, UNKNOWN, (int) VOID_FTYPE_PV4SI_V4DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_ss_truncatev2div2si2_mask_store, \"__builtin_ia32_pmovsqd128mem_mask\", IX86_BUILTIN_PMOVSQD128_MEM, UNKNOWN, (int) VOID_FTYPE_PV4SI_V2DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_ss_truncatev2div2si2_mask_store_2, \"__builtin_ia32_pmovsqd128mem_mask\", IX86_BUILTIN_PMOVSQD128_MEM, UNKNOWN, (int) VOID_FTYPE_PUDI_V2DI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_us_truncatev4div4si2_mask_store, \"__builtin_ia32_pmovusqd256mem_mask\", IX86_BUILTIN_PMOVUSQD256_MEM, UNKNOWN, (int) VOID_FTYPE_PV4SI_V4DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_us_truncatev2div2si2_mask_store, \"__builtin_ia32_pmovusqd128mem_mask\", IX86_BUILTIN_PMOVUSQD128_MEM, UNKNOWN, (int) VOID_FTYPE_PV4SI_V2DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_truncatev4div4hi2_mask_store, \"__builtin_ia32_pmovqw256mem_mask\", IX86_BUILTIN_PMOVQW256_MEM, UNKNOWN, (int) VOID_FTYPE_PV8HI_V4DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_truncatev2div2hi2_mask_store, \"__builtin_ia32_pmovqw128mem_mask\", IX86_BUILTIN_PMOVQW128_MEM, UNKNOWN, (int) VOID_FTYPE_PV8HI_V2DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_ss_truncatev4div4hi2_mask_store, \"__builtin_ia32_pmovsqw256mem_mask\", IX86_BUILTIN_PMOVSQW256_MEM, UNKNOWN, (int) VOID_FTYPE_PV8HI_V4DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_ss_truncatev2div2hi2_mask_store, \"__builtin_ia32_pmovsqw128mem_mask\", IX86_BUILTIN_PMOVSQW128_MEM, UNKNOWN, (int) VOID_FTYPE_PV8HI_V2DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_us_truncatev4div4hi2_mask_store, \"__builtin_ia32_pmovusqw256mem_mask\", IX86_BUILTIN_PMOVUSQW256_MEM, UNKNOWN, (int) VOID_FTYPE_PV8HI_V4DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_us_truncatev2div2hi2_mask_store, \"__builtin_ia32_pmovusqw128mem_mask\", IX86_BUILTIN_PMOVUSQW128_MEM, UNKNOWN, (int) VOID_FTYPE_PV8HI_V2DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_truncatev4div4qi2_mask_store, \"__builtin_ia32_pmovqb256mem_mask\", IX86_BUILTIN_PMOVQB256_MEM, UNKNOWN, (int) VOID_FTYPE_PV16QI_V4DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_truncatev2div2qi2_mask_store, \"__builtin_ia32_pmovqb128mem_mask\", IX86_BUILTIN_PMOVQB128_MEM, UNKNOWN, (int) VOID_FTYPE_PV16QI_V2DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_ss_truncatev4div4qi2_mask_store, \"__builtin_ia32_pmovsqb256mem_mask\", IX86_BUILTIN_PMOVSQB256_MEM, UNKNOWN, (int) VOID_FTYPE_PV16QI_V4DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_ss_truncatev2div2qi2_mask_store, \"__builtin_ia32_pmovsqb128mem_mask\", IX86_BUILTIN_PMOVSQB128_MEM, UNKNOWN, (int) VOID_FTYPE_PV16QI_V2DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_us_truncatev4div4qi2_mask_store, \"__builtin_ia32_pmovusqb256mem_mask\", IX86_BUILTIN_PMOVUSQB256_MEM, UNKNOWN, (int) VOID_FTYPE_PV16QI_V4DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_us_truncatev2div2qi2_mask_store, \"__builtin_ia32_pmovusqb128mem_mask\", IX86_BUILTIN_PMOVUSQB128_MEM, UNKNOWN, (int) VOID_FTYPE_PV16QI_V2DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_truncatev8siv8qi2_mask_store, \"__builtin_ia32_pmovdb256mem_mask\", IX86_BUILTIN_PMOVDB256_MEM, UNKNOWN, (int) VOID_FTYPE_PV16QI_V8SI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_truncatev4siv4qi2_mask_store, \"__builtin_ia32_pmovdb128mem_mask\", IX86_BUILTIN_PMOVDB128_MEM, UNKNOWN, (int) VOID_FTYPE_PV16QI_V4SI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_ss_truncatev8siv8qi2_mask_store, \"__builtin_ia32_pmovsdb256mem_mask\", IX86_BUILTIN_PMOVSDB256_MEM, UNKNOWN, (int) VOID_FTYPE_PV16QI_V8SI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_ss_truncatev4siv4qi2_mask_store, \"__builtin_ia32_pmovsdb128mem_mask\", IX86_BUILTIN_PMOVSDB128_MEM, UNKNOWN, (int) VOID_FTYPE_PV16QI_V4SI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_us_truncatev8siv8qi2_mask_store, \"__builtin_ia32_pmovusdb256mem_mask\", IX86_BUILTIN_PMOVUSDB256_MEM, UNKNOWN, (int) VOID_FTYPE_PV16QI_V8SI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_us_truncatev4siv4qi2_mask_store, \"__builtin_ia32_pmovusdb128mem_mask\", IX86_BUILTIN_PMOVUSDB128_MEM, UNKNOWN, (int) VOID_FTYPE_PV16QI_V4SI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_us_truncatev2div2si2_mask_store_2, \"__builtin_ia32_pmovusqd128mem_mask\", IX86_BUILTIN_PMOVUSQD128_MEM, UNKNOWN, (int) VOID_FTYPE_PUDI_V2DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_truncatev4div4hi2_mask_store_2, \"__builtin_ia32_pmovqw256mem_mask\", IX86_BUILTIN_PMOVQW256_MEM, UNKNOWN, (int) VOID_FTYPE_PUDI_V4DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_truncatev2div2hi2_mask_store_2, \"__builtin_ia32_pmovqw128mem_mask\", IX86_BUILTIN_PMOVQW128_MEM, UNKNOWN, (int) VOID_FTYPE_PUSI_V2DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_ss_truncatev4div4hi2_mask_store_2, \"__builtin_ia32_pmovsqw256mem_mask\", IX86_BUILTIN_PMOVSQW256_MEM, UNKNOWN, (int) VOID_FTYPE_PUDI_V4DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_ss_truncatev2div2hi2_mask_store_2, \"__builtin_ia32_pmovsqw128mem_mask\", IX86_BUILTIN_PMOVSQW128_MEM, UNKNOWN, (int) VOID_FTYPE_PUSI_V2DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_us_truncatev4div4hi2_mask_store_2, \"__builtin_ia32_pmovusqw256mem_mask\", IX86_BUILTIN_PMOVUSQW256_MEM, UNKNOWN, (int) VOID_FTYPE_PUDI_V4DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_us_truncatev2div2hi2_mask_store_2, \"__builtin_ia32_pmovusqw128mem_mask\", IX86_BUILTIN_PMOVUSQW128_MEM, UNKNOWN, (int) VOID_FTYPE_PUSI_V2DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_truncatev4div4qi2_mask_store_2, \"__builtin_ia32_pmovqb256mem_mask\", IX86_BUILTIN_PMOVQB256_MEM, UNKNOWN, (int) VOID_FTYPE_PUSI_V4DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_truncatev2div2qi2_mask_store_2, \"__builtin_ia32_pmovqb128mem_mask\", IX86_BUILTIN_PMOVQB128_MEM, UNKNOWN, (int) VOID_FTYPE_PUHI_V2DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_ss_truncatev4div4qi2_mask_store_2, \"__builtin_ia32_pmovsqb256mem_mask\", IX86_BUILTIN_PMOVSQB256_MEM, UNKNOWN, (int) VOID_FTYPE_PUSI_V4DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_ss_truncatev2div2qi2_mask_store_2, \"__builtin_ia32_pmovsqb128mem_mask\", IX86_BUILTIN_PMOVSQB128_MEM, UNKNOWN, (int) VOID_FTYPE_PUHI_V2DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_us_truncatev4div4qi2_mask_store_2, \"__builtin_ia32_pmovusqb256mem_mask\", IX86_BUILTIN_PMOVUSQB256_MEM, UNKNOWN, (int) VOID_FTYPE_PUSI_V4DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_us_truncatev2div2qi2_mask_store_2, \"__builtin_ia32_pmovusqb128mem_mask\", IX86_BUILTIN_PMOVUSQB128_MEM, UNKNOWN, (int) VOID_FTYPE_PUHI_V2DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_truncatev8siv8qi2_mask_store_2, \"__builtin_ia32_pmovdb256mem_mask\", IX86_BUILTIN_PMOVDB256_MEM, UNKNOWN, (int) VOID_FTYPE_PUDI_V8SI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_truncatev4siv4qi2_mask_store_2, \"__builtin_ia32_pmovdb128mem_mask\", IX86_BUILTIN_PMOVDB128_MEM, UNKNOWN, (int) VOID_FTYPE_PUSI_V4SI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_ss_truncatev8siv8qi2_mask_store_2, \"__builtin_ia32_pmovsdb256mem_mask\", IX86_BUILTIN_PMOVSDB256_MEM, UNKNOWN, (int) VOID_FTYPE_PUDI_V8SI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_ss_truncatev4siv4qi2_mask_store_2, \"__builtin_ia32_pmovsdb128mem_mask\", IX86_BUILTIN_PMOVSDB128_MEM, UNKNOWN, (int) VOID_FTYPE_PUSI_V4SI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_us_truncatev8siv8qi2_mask_store_2, \"__builtin_ia32_pmovusdb256mem_mask\", IX86_BUILTIN_PMOVUSDB256_MEM, UNKNOWN, (int) VOID_FTYPE_PUDI_V8SI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_us_truncatev4siv4qi2_mask_store_2, \"__builtin_ia32_pmovusdb128mem_mask\", IX86_BUILTIN_PMOVUSDB128_MEM, UNKNOWN, (int) VOID_FTYPE_PUSI_V4SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_truncatev8siv8hi2_mask_store, \"__builtin_ia32_pmovdw256mem_mask\", IX86_BUILTIN_PMOVDW256_MEM, UNKNOWN, (int) VOID_FTYPE_PV8HI_V8SI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_truncatev4siv4hi2_mask_store, \"__builtin_ia32_pmovdw128mem_mask\", IX86_BUILTIN_PMOVDW128_MEM, UNKNOWN, (int) VOID_FTYPE_PV8HI_V4SI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_truncatev4siv4hi2_mask_store_2, \"__builtin_ia32_pmovdw128mem_mask\", IX86_BUILTIN_PMOVDW128_MEM, UNKNOWN, (int) VOID_FTYPE_PUDI_V4SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_ss_truncatev8siv8hi2_mask_store, \"__builtin_ia32_pmovsdw256mem_mask\", IX86_BUILTIN_PMOVSDW256_MEM, UNKNOWN, (int) VOID_FTYPE_PV8HI_V8SI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_ss_truncatev4siv4hi2_mask_store, \"__builtin_ia32_pmovsdw128mem_mask\", IX86_BUILTIN_PMOVSDW128_MEM, UNKNOWN, (int) VOID_FTYPE_PV8HI_V4SI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_ss_truncatev4siv4hi2_mask_store_2, \"__builtin_ia32_pmovsdw128mem_mask\", IX86_BUILTIN_PMOVSDW128_MEM, UNKNOWN, (int) VOID_FTYPE_PUDI_V4SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_us_truncatev8siv8hi2_mask_store, \"__builtin_ia32_pmovusdw256mem_mask\", IX86_BUILTIN_PMOVUSDW256_MEM, UNKNOWN, (int) VOID_FTYPE_PV8HI_V8SI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_us_truncatev4siv4hi2_mask_store, \"__builtin_ia32_pmovusdw128mem_mask\", IX86_BUILTIN_PMOVUSDW128_MEM, UNKNOWN, (int) VOID_FTYPE_PV8HI_V4SI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512BW | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_truncatev8hiv8qi2_mask_store, \"__builtin_ia32_pmovwb128mem_mask\", IX86_BUILTIN_PMOVWB128_MEM, UNKNOWN, (int) VOID_FTYPE_PV8QI_V8HI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_us_truncatev4siv4hi2_mask_store_2, \"__builtin_ia32_pmovusdw128mem_mask\", IX86_BUILTIN_PMOVUSDW128_MEM, UNKNOWN, (int) VOID_FTYPE_PUDI_V4SI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512BW | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_truncatev8hiv8qi2_mask_store_2, \"__builtin_ia32_pmovwb128mem_mask\", IX86_BUILTIN_PMOVWB128_MEM, UNKNOWN, (int) VOID_FTYPE_PUDI_V8HI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512BW | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_truncatev16hiv16qi2_mask_store, \"__builtin_ia32_pmovwb256mem_mask\", IX86_BUILTIN_PMOVWB256_MEM, UNKNOWN, (int) VOID_FTYPE_PV16QI_V16HI_UHI)\n-BDESC (OPTION_MASK_ISA_AVX512BW | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_ss_truncatev8hiv8qi2_mask_store, \"__builtin_ia32_pmovswb128mem_mask\", IX86_BUILTIN_PMOVSWB128_MEM, UNKNOWN, (int) VOID_FTYPE_PV8QI_V8HI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512BW | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_ss_truncatev8hiv8qi2_mask_store_2, \"__builtin_ia32_pmovswb128mem_mask\", IX86_BUILTIN_PMOVSWB128_MEM, UNKNOWN, (int) VOID_FTYPE_PUDI_V8HI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512BW | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_ss_truncatev16hiv16qi2_mask_store, \"__builtin_ia32_pmovswb256mem_mask\", IX86_BUILTIN_PMOVSWB256_MEM, UNKNOWN, (int) VOID_FTYPE_PV16QI_V16HI_UHI)\n-BDESC (OPTION_MASK_ISA_AVX512BW | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_us_truncatev8hiv8qi2_mask_store, \"__builtin_ia32_pmovuswb128mem_mask\", IX86_BUILTIN_PMOVUSWB128_MEM, UNKNOWN, (int) VOID_FTYPE_PV8QI_V8HI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512BW | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_us_truncatev8hiv8qi2_mask_store_2, \"__builtin_ia32_pmovuswb128mem_mask\", IX86_BUILTIN_PMOVUSWB128_MEM, UNKNOWN, (int) VOID_FTYPE_PUDI_V8HI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512BW | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_us_truncatev16hiv16qi2_mask_store, \"__builtin_ia32_pmovuswb256mem_mask\", IX86_BUILTIN_PMOVUSWB256_MEM, UNKNOWN, (int) VOID_FTYPE_PV16QI_V16HI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512BW, 0, CODE_FOR_avx512bw_us_truncatev32hiv32qi2_mask_store, \"__builtin_ia32_pmovuswb512mem_mask\", IX86_BUILTIN_PMOVUSWB512_MEM, UNKNOWN, (int) VOID_FTYPE_PV32QI_V32HI_USI)\n BDESC (OPTION_MASK_ISA_AVX512BW, 0, CODE_FOR_avx512bw_ss_truncatev32hiv32qi2_mask_store, \"__builtin_ia32_pmovswb512mem_mask\", IX86_BUILTIN_PMOVSWB512_MEM, UNKNOWN, (int) VOID_FTYPE_PV32QI_V32HI_USI)"}, {"sha": "270585decb2cb951d6cc32048d2fb0e22f19b21b", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a948703db483c3ba3df67816425d951c0268623/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a948703db483c3ba3df67816425d951c0268623/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=4a948703db483c3ba3df67816425d951c0268623", "patch": "@@ -10556,18 +10556,18 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n     case VOID_FTYPE_PV8SI_V8DI_UQI:\n     case VOID_FTYPE_PV8HI_V8DI_UQI:\n     case VOID_FTYPE_PV16HI_V16SI_UHI:\n-    case VOID_FTYPE_PV16QI_V8DI_UQI:\n+    case VOID_FTYPE_PUDI_V8DI_UQI:\n     case VOID_FTYPE_PV16QI_V16SI_UHI:\n     case VOID_FTYPE_PV4SI_V4DI_UQI:\n-    case VOID_FTYPE_PV4SI_V2DI_UQI:\n-    case VOID_FTYPE_PV8HI_V4DI_UQI:\n-    case VOID_FTYPE_PV8HI_V2DI_UQI:\n+    case VOID_FTYPE_PUDI_V2DI_UQI:\n+    case VOID_FTYPE_PUDI_V4DI_UQI:\n+    case VOID_FTYPE_PUSI_V2DI_UQI:\n     case VOID_FTYPE_PV8HI_V8SI_UQI:\n-    case VOID_FTYPE_PV8HI_V4SI_UQI:\n-    case VOID_FTYPE_PV16QI_V4DI_UQI:\n-    case VOID_FTYPE_PV16QI_V2DI_UQI:\n-    case VOID_FTYPE_PV16QI_V8SI_UQI:\n-    case VOID_FTYPE_PV16QI_V4SI_UQI:\n+    case VOID_FTYPE_PUDI_V4SI_UQI:\n+    case VOID_FTYPE_PUSI_V4DI_UQI:\n+    case VOID_FTYPE_PUHI_V2DI_UQI:\n+    case VOID_FTYPE_PUDI_V8SI_UQI:\n+    case VOID_FTYPE_PUSI_V4SI_UQI:\n     case VOID_FTYPE_PCHAR_V64QI_UDI:\n     case VOID_FTYPE_PCHAR_V32QI_USI:\n     case VOID_FTYPE_PCHAR_V16QI_UHI:\n@@ -10588,7 +10588,7 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n     case VOID_FTYPE_PFLOAT_V4SF_UQI:\n     case VOID_FTYPE_PV32QI_V32HI_USI:\n     case VOID_FTYPE_PV16QI_V16HI_UHI:\n-    case VOID_FTYPE_PV8QI_V8HI_UQI:\n+    case VOID_FTYPE_PUDI_V8HI_UQI:\n       nargs = 2;\n       klass = store;\n       /* Reserve memory operand for target.  */"}, {"sha": "f2a5a34284d5115a2f49fb80eba17e9645fc1a85", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 339, "deletions": 203, "changes": 542, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a948703db483c3ba3df67816425d951c0268623/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a948703db483c3ba3df67816425d951c0268623/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=4a948703db483c3ba3df67816425d951c0268623", "patch": "@@ -10720,27 +10720,29 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"*avx512vl_<code>v2div2qi2_store\"\n-  [(set (match_operand:V16QI 0 \"memory_operand\" \"=m\")\n-    (vec_concat:V16QI\n-      (any_truncate:V2QI\n-\t      (match_operand:V2DI 1 \"register_operand\" \"v\"))\n-      (vec_select:V14QI\n-        (match_dup 0)\n-        (parallel [(const_int 2) (const_int 3)\n-                   (const_int 4) (const_int 5)\n-                   (const_int 6) (const_int 7)\n-                   (const_int 8) (const_int 9)\n-                   (const_int 10) (const_int 11)\n-                   (const_int 12) (const_int 13)\n-                   (const_int 14) (const_int 15)]))))]\n+(define_insn \"*avx512vl_<code>v2div2qi2_store_1\"\n+  [(set (match_operand:V2QI 0 \"memory_operand\" \"=m\")\n+\t(any_truncate:V2QI\n+\t  (match_operand:V2DI 1 \"register_operand\" \"v\")))]\n   \"TARGET_AVX512VL\"\n-  \"vpmov<trunsuffix>qb\\t{%1, %0|%w0, %1}\"\n+  \"vpmov<trunsuffix>qb\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"memory\" \"store\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn_and_split \"*avx512vl_<code>v2div2qi2_store_2\"\n+  [(set (match_operand:HI 0 \"memory_operand\")\n+\t(subreg:HI\n+\t  (any_truncate:V2QI\n+\t    (match_operand:V2DI 1 \"register_operand\")) 0))]\n+  \"TARGET_AVX512VL && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(any_truncate:V2QI (match_dup 1)))]\n+  \"operands[0] = adjust_address_nv (operands[0], V2QImode, 0);\")\n+\n (define_insn \"avx512vl_<code>v2div2qi2_mask\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n     (vec_concat:V16QI\n@@ -10785,52 +10787,66 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"avx512vl_<code>v2div2qi2_mask_store\"\n-  [(set (match_operand:V16QI 0 \"memory_operand\" \"=m\")\n-    (vec_concat:V16QI\n-      (vec_merge:V2QI\n-        (any_truncate:V2QI\n-          (match_operand:V2DI 1 \"register_operand\" \"v\"))\n-        (vec_select:V2QI\n-          (match_dup 0)\n-          (parallel [(const_int 0) (const_int 1)]))\n-        (match_operand:QI 2 \"register_operand\" \"Yk\"))\n-      (vec_select:V14QI\n-        (match_dup 0)\n-        (parallel [(const_int 2) (const_int 3)\n-                   (const_int 4) (const_int 5)\n-                   (const_int 6) (const_int 7)\n-                   (const_int 8) (const_int 9)\n-                   (const_int 10) (const_int 11)\n-                   (const_int 12) (const_int 13)\n-                   (const_int 14) (const_int 15)]))))]\n+(define_insn \"*avx512vl_<code>v2div2qi2_mask_store_1\"\n+  [(set (match_operand:V2QI 0 \"memory_operand\" \"=m\")\n+\t  (vec_merge:V2QI\n+\t    (any_truncate:V2QI\n+\t      (match_operand:V2DI 1 \"register_operand\" \"v\"))\n+\t    (match_dup 0)\n+\t    (match_operand:QI 2 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512VL\"\n-  \"vpmov<trunsuffix>qb\\t{%1, %0%{%2%}|%w0%{%2%}, %1}\"\n+  \"vpmov<trunsuffix>qb\\t{%1, %0%{%2%}|%0%{%2%}, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"memory\" \"store\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"*avx512vl_<code><mode>v4qi2_store\"\n-  [(set (match_operand:V16QI 0 \"memory_operand\" \"=m\")\n-    (vec_concat:V16QI\n-      (any_truncate:V4QI\n-\t      (match_operand:VI4_128_8_256 1 \"register_operand\" \"v\"))\n-      (vec_select:V12QI\n-        (match_dup 0)\n-        (parallel [(const_int 4) (const_int 5)\n-                   (const_int 6) (const_int 7)\n-                   (const_int 8) (const_int 9)\n-                   (const_int 10) (const_int 11)\n-                   (const_int 12) (const_int 13)\n-                   (const_int 14) (const_int 15)]))))]\n+(define_insn_and_split \"avx512vl_<code>v2div2qi2_mask_store_2\"\n+  [(set (match_operand:HI 0 \"memory_operand\")\n+\t(subreg:HI\n+\t  (vec_merge:V2QI\n+\t    (any_truncate:V2QI\n+\t      (match_operand:V2DI 1 \"register_operand\"))\n+\t    (vec_select:V2QI\n+\t      (subreg:V4QI\n+\t\t(vec_concat:V2HI\n+\t\t  (match_dup 0)\n+\t\t  (const_int 0)) 0)\n+\t      (parallel [(const_int 0) (const_int 1)]))\n+\t    (match_operand:QI 2 \"register_operand\")) 0))]\n+  \"TARGET_AVX512VL && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(vec_merge:V2QI\n+\t  (any_truncate:V2QI (match_dup 1))\n+\t  (match_dup 0)\n+\t  (match_dup 2)))]\n+  \"operands[0] = adjust_address_nv (operands[0], V2QImode, 0);\")\n+\n+(define_insn \"*avx512vl_<code><mode>v4qi2_store_1\"\n+  [(set (match_operand:V4QI 0 \"memory_operand\" \"=m\")\n+\t(any_truncate:V4QI\n+\t  (match_operand:VI4_128_8_256 1 \"register_operand\" \"v\")))]\n   \"TARGET_AVX512VL\"\n-  \"vpmov<trunsuffix><pmov_suff_3>\\t{%1, %0|%k0, %1}\"\n+  \"vpmov<trunsuffix><pmov_suff_3>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"memory\" \"store\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn_and_split \"*avx512vl_<code><mode>v4qi2_store_2\"\n+  [(set (match_operand:SI 0 \"memory_operand\")\n+\t(subreg:SI\n+\t  (any_truncate:V4QI\n+\t    (match_operand:VI4_128_8_256 1 \"register_operand\")) 0))]\n+  \"TARGET_AVX512VL && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(any_truncate:V4QI (match_dup 1)))]\n+ \"operands[0] = adjust_address_nv (operands[0], V4QImode, 0);\")\n+\n (define_insn \"avx512vl_<code><mode>v4qi2_mask\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n     (vec_concat:V16QI\n@@ -10875,53 +10891,70 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"avx512vl_<code><mode>v4qi2_mask_store\"\n-  [(set (match_operand:V16QI 0 \"memory_operand\" \"=m\")\n-    (vec_concat:V16QI\n-      (vec_merge:V4QI\n-        (any_truncate:V4QI\n-          (match_operand:VI4_128_8_256 1 \"register_operand\" \"v\"))\n-        (vec_select:V4QI\n-          (match_dup 0)\n-          (parallel [(const_int 0) (const_int 1)\n-                     (const_int 2) (const_int 3)]))\n-        (match_operand:QI 2 \"register_operand\" \"Yk\"))\n-      (vec_select:V12QI\n-        (match_dup 0)\n-        (parallel [(const_int 4) (const_int 5)\n-                   (const_int 6) (const_int 7)\n-                   (const_int 8) (const_int 9)\n-                   (const_int 10) (const_int 11)\n-                   (const_int 12) (const_int 13)\n-                   (const_int 14) (const_int 15)]))))]\n+(define_insn \"*avx512vl_<code><mode>v4qi2_mask_store_1\"\n+  [(set (match_operand:V4QI 0 \"memory_operand\" \"=m\")\n+\t(vec_merge:V4QI\n+\t  (any_truncate:V4QI\n+\t    (match_operand:VI4_128_8_256 1 \"register_operand\" \"v\"))\n+\t  (match_dup 0)\n+\t  (match_operand:QI 2 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512VL\"\n-  \"vpmov<trunsuffix><pmov_suff_3>\\t{%1, %0%{%2%}|%k0%{%2%}, %1}\"\n+  \"vpmov<trunsuffix><pmov_suff_3>\\t{%1, %0%{%2%}|%0%{%2%}, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"memory\" \"store\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn_and_split \"avx512vl_<code><mode>v4qi2_mask_store_2\"\n+  [(set (match_operand:SI 0 \"memory_operand\")\n+\t(subreg:SI\n+\t  (vec_merge:V4QI\n+\t    (any_truncate:V4QI\n+\t      (match_operand:VI4_128_8_256 1 \"register_operand\"))\n+\t    (vec_select:V4QI\n+\t      (subreg:V8QI\n+\t\t(vec_concat:V2SI\n+\t\t  (match_dup 0)\n+\t\t  (const_int 0)) 0)\n+\t      (parallel [(const_int 0) (const_int 1)\n+\t\t\t (const_int 2) (const_int 3)]))\n+\t    (match_operand:QI 2 \"register_operand\")) 0))]\n+  \"TARGET_AVX512VL && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(vec_merge:V4QI\n+\t  (any_truncate:V4QI (match_dup 1))\n+\t  (match_dup 0)\n+\t  (match_dup 2)))]\n+  \"operands[0] = adjust_address_nv (operands[0], V4QImode, 0);\")\n+\n (define_mode_iterator VI2_128_BW_4_256\n   [(V8HI \"TARGET_AVX512BW\") V8SI])\n \n-(define_insn \"*avx512vl_<code><mode>v8qi2_store\"\n-  [(set (match_operand:V16QI 0 \"memory_operand\" \"=m\")\n-    (vec_concat:V16QI\n-      (any_truncate:V8QI\n-\t      (match_operand:VI2_128_BW_4_256 1 \"register_operand\" \"v\"))\n-      (vec_select:V8QI\n-        (match_dup 0)\n-        (parallel [(const_int 8) (const_int 9)\n-                   (const_int 10) (const_int 11)\n-                   (const_int 12) (const_int 13)\n-                   (const_int 14) (const_int 15)]))))]\n+(define_insn \"*avx512vl_<code><mode>v8qi2_store_1\"\n+  [(set (match_operand:V8QI 0 \"memory_operand\" \"=m\")\n+\t(any_truncate:V8QI\n+\t  (match_operand:VI2_128_BW_4_256 1 \"register_operand\" \"v\")))]\n   \"TARGET_AVX512VL\"\n-  \"vpmov<trunsuffix><pmov_suff_3>\\t{%1, %0|%q0, %1}\"\n+  \"vpmov<trunsuffix><pmov_suff_3>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"memory\" \"store\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn_and_split \"*avx512vl_<code><mode>v8qi2_store_2\"\n+  [(set (match_operand:DI 0 \"memory_operand\" \"=m\")\n+\t(subreg:DI\n+\t  (any_truncate:V8QI\n+\t    (match_operand:VI2_128_BW_4_256 1 \"register_operand\" \"v\")) 0))]\n+  \"TARGET_AVX512VL && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(any_truncate:V8QI (match_dup 1)))]\n+  \"operands[0] = adjust_address_nv (operands[0], V8QImode, 0);\")\n+\n (define_insn \"avx512vl_<code><mode>v8qi2_mask\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n     (vec_concat:V16QI\n@@ -10966,32 +10999,46 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"avx512vl_<code><mode>v8qi2_mask_store\"\n-  [(set (match_operand:V16QI 0 \"memory_operand\" \"=m\")\n-    (vec_concat:V16QI\n-      (vec_merge:V8QI\n-        (any_truncate:V8QI\n-          (match_operand:VI2_128_BW_4_256 1 \"register_operand\" \"v\"))\n-        (vec_select:V8QI\n-          (match_dup 0)\n-          (parallel [(const_int 0) (const_int 1)\n-                     (const_int 2) (const_int 3)\n-                     (const_int 4) (const_int 5)\n-                     (const_int 6) (const_int 7)]))\n-        (match_operand:QI 2 \"register_operand\" \"Yk\"))\n-      (vec_select:V8QI\n-        (match_dup 0)\n-        (parallel [(const_int 8) (const_int 9)\n-                   (const_int 10) (const_int 11)\n-                   (const_int 12) (const_int 13)\n-                   (const_int 14) (const_int 15)]))))]\n+(define_insn \"*avx512vl_<code><mode>v8qi2_mask_store_1\"\n+  [(set (match_operand:V8QI 0 \"memory_operand\" \"=m\")\n+\t(vec_merge:V8QI\n+\t  (any_truncate:V8QI\n+\t    (match_operand:VI2_128_BW_4_256 1 \"register_operand\" \"v\"))\n+\t  (match_dup 0)\n+\t  (match_operand:QI 2 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512VL\"\n-  \"vpmov<trunsuffix><pmov_suff_3>\\t{%1, %0%{%2%}|%q0%{%2%}, %1}\"\n+  \"vpmov<trunsuffix><pmov_suff_3>\\t{%1, %0%{%2%}|%0%{%2%}, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"memory\" \"store\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn_and_split \"avx512vl_<code><mode>v8qi2_mask_store_2\"\n+  [(set (match_operand:DI 0 \"memory_operand\")\n+\t(subreg:DI\n+\t  (vec_merge:V8QI\n+\t    (any_truncate:V8QI\n+\t      (match_operand:VI2_128_BW_4_256 1 \"register_operand\"))\n+\t    (vec_select:V8QI\n+\t      (subreg:V16QI\n+\t\t(vec_concat:V2DI\n+\t\t  (match_dup 0)\n+\t\t  (const_int 0)) 0)\n+\t      (parallel [(const_int 0) (const_int 1)\n+\t\t\t (const_int 2) (const_int 3)\n+\t\t\t (const_int 4) (const_int 5)\n+\t\t\t (const_int 6) (const_int 7)]))\n+\t    (match_operand:QI 2 \"register_operand\")) 0))]\n+  \"TARGET_AVX512VL && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(vec_merge:V8QI\n+\t  (any_truncate:V8QI (match_dup 1))\n+\t  (match_dup 0)\n+\t  (match_dup 2)))]\n+  \"operands[0] = adjust_address_nv (operands[0], V8QImode, 0);\")\n+\n (define_mode_iterator PMOV_SRC_MODE_4 [V4DI V2DI V4SI])\n (define_mode_attr pmov_dst_4\n   [(V4DI \"V4HI\") (V2DI \"V2HI\") (V4SI \"V4HI\")])\n@@ -11026,22 +11073,29 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"*avx512vl_<code><mode>v4hi2_store\"\n-  [(set (match_operand:V8HI 0 \"memory_operand\" \"=m\")\n-    (vec_concat:V8HI\n-      (any_truncate:V4HI\n-\t      (match_operand:VI4_128_8_256 1 \"register_operand\" \"v\"))\n-      (vec_select:V4HI\n-        (match_dup 0)\n-        (parallel [(const_int 4) (const_int 5)\n-                   (const_int 6) (const_int 7)]))))]\n+(define_insn \"*avx512vl_<code><mode>v4hi2_store_1\"\n+  [(set (match_operand:V4HI 0 \"memory_operand\" \"=m\")\n+\t(any_truncate:V4HI\n+\t  (match_operand:VI4_128_8_256 1 \"register_operand\" \"v\")))]\n   \"TARGET_AVX512VL\"\n   \"vpmov<trunsuffix><pmov_suff_4>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"memory\" \"store\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn_and_split \"*avx512vl_<code><mode>v4hi2_store_2\"\n+  [(set (match_operand:DI 0 \"memory_operand\")\n+\t(subreg:DI\n+\t  (any_truncate:V4HI\n+\t    (match_operand:VI4_128_8_256 1 \"register_operand\")) 0))]\n+  \"TARGET_AVX512VL && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(any_truncate:V4HI (match_dup 1)))]\n+  \"operands[0] = adjust_address_nv (operands[0], V4HImode, 0);\")\n+\n (define_insn \"avx512vl_<code><mode>v4hi2_mask\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n     (vec_concat:V8HI\n@@ -11078,21 +11132,13 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"avx512vl_<code><mode>v4hi2_mask_store\"\n-  [(set (match_operand:V8HI 0 \"memory_operand\" \"=m\")\n-    (vec_concat:V8HI\n-      (vec_merge:V4HI\n-        (any_truncate:V4HI\n-          (match_operand:VI4_128_8_256 1 \"register_operand\" \"v\"))\n-        (vec_select:V4HI\n-          (match_dup 0)\n-          (parallel [(const_int 0) (const_int 1)\n-                     (const_int 2) (const_int 3)]))\n-        (match_operand:QI 2 \"register_operand\" \"Yk\"))\n-      (vec_select:V4HI\n-        (match_dup 0)\n-        (parallel [(const_int 4) (const_int 5)\n-                   (const_int 6) (const_int 7)]))))]\n+(define_insn \"*avx512vl_<code><mode>v4hi2_mask_store_1\"\n+  [(set (match_operand:V4HI 0 \"memory_operand\" \"=m\")\n+\t(vec_merge:V4HI\n+\t  (any_truncate:V4HI\n+\t    (match_operand:VI4_128_8_256 1 \"register_operand\" \"v\"))\n+\t  (match_dup 0)\n+\t  (match_operand:QI 2 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512VL\"\n {\n   if (GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) == 4)\n@@ -11104,23 +11150,54 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"*avx512vl_<code>v2div2hi2_store\"\n-  [(set (match_operand:V8HI 0 \"memory_operand\" \"=m\")\n-    (vec_concat:V8HI\n-      (any_truncate:V2HI\n-\t      (match_operand:V2DI 1 \"register_operand\" \"v\"))\n-      (vec_select:V6HI\n-        (match_dup 0)\n-        (parallel [(const_int 2) (const_int 3)\n-                   (const_int 4) (const_int 5)\n-                   (const_int 6) (const_int 7)]))))]\n+(define_insn_and_split \"avx512vl_<code><mode>v4hi2_mask_store_2\"\n+  [(set (match_operand:DI 0 \"memory_operand\")\n+\t(subreg:DI\n+\t  (vec_merge:V4HI\n+\t    (any_truncate:V4HI\n+\t      (match_operand:VI4_128_8_256 1 \"register_operand\"))\n+\t    (vec_select:V4HI\n+\t      (subreg:V8HI\n+\t\t(vec_concat:V2DI\n+\t\t  (match_dup 0)\n+\t\t  (const_int 0)) 0)\n+\t      (parallel [(const_int 0) (const_int 1)\n+\t\t\t (const_int 2) (const_int 3)]))\n+\t    (match_operand:QI 2 \"register_operand\")) 0))]\n+  \"TARGET_AVX512VL && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(vec_merge:V4HI\n+\t  (any_truncate:V4HI (match_dup 1))\n+\t  (match_dup 0)\n+\t  (match_dup 2)))]\n+  \"operands[0] = adjust_address_nv (operands[0], V4HImode, 0);\")\n+\n+\n+(define_insn \"*avx512vl_<code>v2div2hi2_store_1\"\n+  [(set (match_operand:V2HI 0 \"memory_operand\" \"=m\")\n+\t(any_truncate:V2HI\n+\t  (match_operand:V2DI 1 \"register_operand\" \"v\")))]\n   \"TARGET_AVX512VL\"\n   \"vpmov<trunsuffix>qw\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"memory\" \"store\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn_and_split \"*avx512vl_<code>v2div2hi2_store_2\"\n+  [(set (match_operand:SI 0 \"memory_operand\")\n+\t(subreg:SI\n+\t  (any_truncate:V2HI\n+\t    (match_operand:V2DI 1 \"register_operand\")) 0))]\n+  \"TARGET_AVX512VL && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(any_truncate:V2HI (match_dup 1)))]\n+ \"operands[0] = adjust_address_nv (operands[0], V2HImode, 0);\")\n+\n (define_insn \"avx512vl_<code>v2div2hi2_mask\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n     (vec_concat:V8HI\n@@ -11157,28 +11234,43 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"avx512vl_<code>v2div2hi2_mask_store\"\n-  [(set (match_operand:V8HI 0 \"memory_operand\" \"=m\")\n-    (vec_concat:V8HI\n-      (vec_merge:V2HI\n-        (any_truncate:V2HI\n-          (match_operand:V2DI 1 \"register_operand\" \"v\"))\n-        (vec_select:V2HI\n-          (match_dup 0)\n-          (parallel [(const_int 0) (const_int 1)]))\n-        (match_operand:QI 2 \"register_operand\" \"Yk\"))\n-      (vec_select:V6HI\n-        (match_dup 0)\n-        (parallel [(const_int 2) (const_int 3)\n-                   (const_int 4) (const_int 5)\n-                   (const_int 6) (const_int 7)]))))]\n+(define_insn \"*avx512vl_<code>v2div2hi2_mask_store_1\"\n+  [(set (match_operand:V2HI 0 \"memory_operand\" \"=m\")\n+\t(vec_merge:V2HI\n+\t  (any_truncate:V2HI\n+\t    (match_operand:V2DI 1 \"register_operand\" \"v\"))\n+\t  (match_dup 0)\n+\t  (match_operand:QI 2 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512VL\"\n   \"vpmov<trunsuffix>qw\\t{%1, %0%{%2%}|%0%{%2%}, %g1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"memory\" \"store\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn_and_split \"avx512vl_<code>v2div2hi2_mask_store_2\"\n+  [(set (match_operand:SI 0 \"memory_operand\")\n+\t(subreg:SI\n+\t  (vec_merge:V2HI\n+\t    (any_truncate:V2HI\n+\t      (match_operand:V2DI 1 \"register_operand\"))\n+\t    (vec_select:V2HI\n+\t      (subreg:V4HI\n+\t\t(vec_concat:V2SI\n+\t\t  (match_dup 0)\n+\t\t  (const_int 0)) 0)\n+\t      (parallel [(const_int 0) (const_int 1)]))\n+\t    (match_operand:QI 2 \"register_operand\")) 0))]\n+  \"TARGET_AVX512VL && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(vec_merge:V2HI\n+\t  (any_truncate:V2HI (match_dup 1))\n+\t  (match_dup 0)\n+\t  (match_dup 2)))]\n+  \"operands[0] = adjust_address_nv (operands[0], V2HImode, 0);\")\n+\n (define_expand \"truncv2div2si2\"\n   [(set (match_operand:V2SI 0 \"register_operand\")\n \t(truncate:V2SI\n@@ -11204,21 +11296,29 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"*avx512vl_<code>v2div2si2_store\"\n-  [(set (match_operand:V4SI 0 \"memory_operand\" \"=m\")\n-    (vec_concat:V4SI\n-      (any_truncate:V2SI\n-\t      (match_operand:V2DI 1 \"register_operand\" \"v\"))\n-      (vec_select:V2SI\n-        (match_dup 0)\n-        (parallel [(const_int 2) (const_int 3)]))))]\n+(define_insn \"*avx512vl_<code>v2div2si2_store_1\"\n+  [(set (match_operand:V2SI 0 \"memory_operand\" \"=m\")\n+\t(any_truncate:V2SI\n+\t  (match_operand:V2DI 1 \"register_operand\" \"v\")))]\n   \"TARGET_AVX512VL\"\n   \"vpmov<trunsuffix>qd\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"memory\" \"store\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn_and_split \"*avx512vl_<code>v2div2si2_store_2\"\n+  [(set (match_operand:DI 0 \"memory_operand\")\n+\t(subreg:DI\n+\t  (any_truncate:V2SI\n+\t    (match_operand:V2DI 1 \"register_operand\")) 0))]\n+  \"TARGET_AVX512VL && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(any_truncate:V2SI (match_dup 1)))]\n+ \"operands[0] = adjust_address_nv (operands[0], V2SImode, 0);\")\n+\n (define_insn \"avx512vl_<code>v2div2si2_mask\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n     (vec_concat:V4SI\n@@ -11251,26 +11351,43 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"avx512vl_<code>v2div2si2_mask_store\"\n-  [(set (match_operand:V4SI 0 \"memory_operand\" \"=m\")\n-    (vec_concat:V4SI\n-      (vec_merge:V2SI\n-        (any_truncate:V2SI\n-          (match_operand:V2DI 1 \"register_operand\" \"v\"))\n-        (vec_select:V2SI\n-          (match_dup 0)\n-          (parallel [(const_int 0) (const_int 1)]))\n-        (match_operand:QI 2 \"register_operand\" \"Yk\"))\n-      (vec_select:V2SI\n-        (match_dup 0)\n-        (parallel [(const_int 2) (const_int 3)]))))]\n+(define_insn \"*avx512vl_<code>v2div2si2_mask_store_1\"\n+  [(set (match_operand:V2SI 0 \"memory_operand\" \"=m\")\n+\t(vec_merge:V2SI\n+\t  (any_truncate:V2SI\n+\t    (match_operand:V2DI 1 \"register_operand\" \"v\"))\n+\t  (match_dup 0)\n+\t  (match_operand:QI 2 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512VL\"\n-  \"vpmov<trunsuffix>qd\\t{%1, %0%{%2%}|%0%{%2%}, %t1}\"\n+  \"vpmov<trunsuffix>qd\\t{%1, %0%{%2%}|%0%{%2%}, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"memory\" \"store\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn_and_split \"avx512vl_<code>v2div2si2_mask_store_2\"\n+  [(set (match_operand:DI 0 \"memory_operand\")\n+\t(subreg:DI\n+\t  (vec_merge:V2SI\n+\t    (any_truncate:V2SI\n+\t      (match_operand:V2DI 1 \"register_operand\"))\n+\t    (vec_select:V2SI\n+\t      (subreg:V4SI\n+\t\t(vec_concat:V2DI\n+\t\t  (match_dup 0)\n+\t\t  (const_int 0)) 0)\n+\t      (parallel [(const_int 0) (const_int 1)]))\n+\t    (match_operand:QI 2 \"register_operand\")) 0))]\n+  \"TARGET_AVX512VL && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+  \t(vec_merge:V2SI\n+\t  (any_truncate:V2SI (match_dup 1))\n+\t  (match_dup 0)\n+\t  (match_dup 2)))]\n+  \"operands[0] = adjust_address_nv (operands[0], V2SImode, 0);\")\n+\n (define_expand \"truncv8div8qi2\"\n   [(set (match_operand:V8QI 0 \"register_operand\")\n \t(truncate:V8QI\n@@ -11297,24 +11414,29 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"*avx512f_<code>v8div16qi2_store\"\n-  [(set (match_operand:V16QI 0 \"memory_operand\" \"=m\")\n-\t(vec_concat:V16QI\n-\t  (any_truncate:V8QI\n-\t    (match_operand:V8DI 1 \"register_operand\" \"v\"))\n-\t  (vec_select:V8QI\n-\t    (match_dup 0)\n-\t    (parallel [(const_int 8) (const_int 9)\n-\t\t       (const_int 10) (const_int 11)\n-\t\t       (const_int 12) (const_int 13)\n-\t\t       (const_int 14) (const_int 15)]))))]\n+(define_insn \"*avx512f_<code>v8div16qi2_store_1\"\n+  [(set (match_operand:V8QI 0 \"memory_operand\" \"=m\")\n+\t(any_truncate:V8QI\n+\t  (match_operand:V8DI 1 \"register_operand\" \"v\")))]\n   \"TARGET_AVX512F\"\n   \"vpmov<trunsuffix>qb\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"memory\" \"store\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn_and_split \"*avx512f_<code>v8div16qi2_store_2\"\n+  [(set (match_operand:DI 0 \"memory_operand\")\n+\t(subreg:DI\n+\t  (any_truncate:V8QI\n+\t    (match_operand:V8DI 1 \"register_operand\")) 0))]\n+  \"TARGET_AVX512F && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(any_truncate:V8QI (match_dup 1)))]\n+ \"operands[0] = adjust_address_nv (operands[0], V8QImode, 0);\")\n+\n (define_insn \"avx512f_<code>v8div16qi2_mask\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n     (vec_concat:V16QI\n@@ -11359,32 +11481,46 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"avx512f_<code>v8div16qi2_mask_store\"\n-  [(set (match_operand:V16QI 0 \"memory_operand\" \"=m\")\n-    (vec_concat:V16QI\n-      (vec_merge:V8QI\n-        (any_truncate:V8QI\n-          (match_operand:V8DI 1 \"register_operand\" \"v\"))\n-        (vec_select:V8QI\n-          (match_dup 0)\n-          (parallel [(const_int 0) (const_int 1)\n-                     (const_int 2) (const_int 3)\n-                     (const_int 4) (const_int 5)\n-                     (const_int 6) (const_int 7)]))\n-        (match_operand:QI 2 \"register_operand\" \"Yk\"))\n-      (vec_select:V8QI\n-        (match_dup 0)\n-        (parallel [(const_int 8) (const_int 9)\n-                   (const_int 10) (const_int 11)\n-                   (const_int 12) (const_int 13)\n-                   (const_int 14) (const_int 15)]))))]\n+(define_insn \"*avx512f_<code>v8div16qi2_mask_store_1\"\n+  [(set (match_operand:V8QI 0 \"memory_operand\" \"=m\")\n+\t(vec_merge:V8QI\n+\t  (any_truncate:V8QI\n+\t    (match_operand:V8DI 1 \"register_operand\" \"v\"))\n+\t(match_dup 0)\n+\t(match_operand:QI 2 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512F\"\n-  \"vpmov<trunsuffix>qb\\t{%1, %0%{%2%}|%q0%{%2%}, %1}\"\n+  \"vpmov<trunsuffix>qb\\t{%1, %0%{%2%}|%0%{%2%}, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"memory\" \"store\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn_and_split \"avx512f_<code>v8div16qi2_mask_store_2\"\n+  [(set (match_operand:DI 0 \"memory_operand\")\n+\t(subreg:DI\n+\t  (vec_merge:V8QI\n+\t  (any_truncate:V8QI\n+\t    (match_operand:V8DI 1 \"register_operand\"))\n+\t  (vec_select:V8QI\n+\t    (subreg:V16QI\n+\t      (vec_concat:V2DI\n+\t\t(match_dup 0)\n+\t\t(const_int 0)) 0)\n+\t    (parallel [(const_int 0) (const_int 1)\n+\t\t       (const_int 2) (const_int 3)\n+\t\t       (const_int 4) (const_int 5)\n+\t\t       (const_int 6) (const_int 7)]))\n+\t  (match_operand:QI 2 \"register_operand\")) 0))]\n+  \"TARGET_AVX512F && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(vec_merge:V8QI\n+\t  (any_truncate:V8QI (match_dup 1))\n+\t  (match_dup 0)\n+\t  (match_dup 2)))]\n+  \"operands[0] = adjust_address_nv (operands[0], V8QImode, 0);\")\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel integral arithmetic"}]}