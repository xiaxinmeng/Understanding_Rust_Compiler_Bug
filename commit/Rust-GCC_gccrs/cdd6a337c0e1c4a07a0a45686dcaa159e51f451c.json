{"sha": "cdd6a337c0e1c4a07a0a45686dcaa159e51f451c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RkNmEzMzdjMGUxYzRhMDdhMGE0NTY4NmRjYWExNTllNTFmNDUxYw==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-10-29T17:16:46Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-10-29T17:16:46Z"}, "message": "re PR middle-end/11492 (Bogus warning with -Wsign-compare)\n\n2008-10-29  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR 11492\n\t* c-common.c (min_precision): Move to...\n\t* tree.c (tree_int_cst_min_precision): ... to here. Renamed.\n\t* tree.h (tree_int_cst_min_precision): Declare.\n\t* c-common.h (min_precision): Delete declaration.\n\t* fold-const.c (tree_binary_nonnegative_warnv_p): Handle\n\tmultiplication of non-negative integer constants.\n\t* c-decl.c (check_bitfield_type_and_width): Rename min_precision to\n\ttree_int_cst_min_precision.\n\t(finish_enum): Likewise.\ncp/\n\t* class.c (check_bitfield_decl): Rename min_precision to\n\ttree_int_cst_min_precision.\n\t* decl.c (finish_enum): Likewise.\ntestsuite/\n\t* gcc.dg/pr11492.c: New.\n\t* g++.dg/warn/pr11492.C: New.\n\nFrom-SVN: r141434", "tree": {"sha": "42ccc636ef21cba0db86051f05076ac6b24aa628", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42ccc636ef21cba0db86051f05076ac6b24aa628"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c/comments", "author": null, "committer": null, "parents": [{"sha": "20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20ded7a68b10f9c2d1aaa94e89df494bf0ce41a0"}], "stats": {"total": 169, "additions": 121, "deletions": 48}, "files": [{"sha": "dc5ab3be569ae2030794846df60956fb2575fcb8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cdd6a337c0e1c4a07a0a45686dcaa159e51f451c", "patch": "@@ -1,3 +1,16 @@\n+2008-10-29  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR 11492\n+\t* c-common.c (min_precision): Move to...\n+\t* tree.c (tree_int_cst_min_precision): ... to here. Renamed.\n+\t* tree.h (tree_int_cst_min_precision): Declare.\n+\t* c-common.h (min_precision): Delete declaration.\n+\t* fold-const.c (tree_binary_nonnegative_warnv_p): Handle\n+\tmultiplication of non-negative integer constants.\n+\t* c-decl.c (check_bitfield_type_and_width): Rename min_precision to\n+\ttree_int_cst_min_precision.\n+\t(finish_enum): Likewise.\n+\n 2008-10-29  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR middle-end/36578"}, {"sha": "84dea11491b2025342df011ab757cad33723972a", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=cdd6a337c0e1c4a07a0a45686dcaa159e51f451c", "patch": "@@ -2795,34 +2795,6 @@ c_register_builtin_type (tree type, const char* name)\n \n   registered_builtin_types = tree_cons (0, type, registered_builtin_types);\n }\n-\n-\f\n-/* Return the minimum number of bits needed to represent VALUE in a\n-   signed or unsigned type, UNSIGNEDP says which.  */\n-\n-unsigned int\n-min_precision (tree value, int unsignedp)\n-{\n-  int log;\n-\n-  /* If the value is negative, compute its negative minus 1.  The latter\n-     adjustment is because the absolute value of the largest negative value\n-     is one larger than the largest positive value.  This is equivalent to\n-     a bit-wise negation, so use that operation instead.  */\n-\n-  if (tree_int_cst_sgn (value) < 0)\n-    value = fold_build1 (BIT_NOT_EXPR, TREE_TYPE (value), value);\n-\n-  /* Return the number of bits needed, taking into account the fact\n-     that we need one more bit for a signed than unsigned type.  */\n-\n-  if (integer_zerop (value))\n-    log = 0;\n-  else\n-    log = tree_floor_log2 (value);\n-\n-  return log + 1 + !unsignedp;\n-}\n \f\n /* Print an error message for invalid operands to arith operation\n    CODE with TYPE0 for operand 0, and TYPE1 for operand 1."}, {"sha": "dc5da719c9b6bf3a26467e059fcc6314a508a2e0", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=cdd6a337c0e1c4a07a0a45686dcaa159e51f451c", "patch": "@@ -746,7 +746,6 @@ extern tree shorten_binary_op (tree result_type, tree op0, tree op1, bool bitwis\n extern tree shorten_compare (tree *, tree *, tree *, enum tree_code *);\n \n extern tree pointer_int_sum (enum tree_code, tree, tree);\n-extern unsigned int min_precision (tree, int);\n \n /* Add qualifiers to a type, in the fashion for C.  */\n extern tree c_build_qualified_type (tree, int);"}, {"sha": "6f88f62604264191b0729dcfd958f1ab82f49c1a", "filename": "gcc/c-decl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=cdd6a337c0e1c4a07a0a45686dcaa159e51f451c", "patch": "@@ -3869,8 +3869,8 @@ check_bitfield_type_and_width (tree *type, tree *width, const char *orig_name)\n     {\n       struct lang_type *lt = TYPE_LANG_SPECIFIC (*type);\n       if (!lt\n-\t  || w < min_precision (lt->enum_min, TYPE_UNSIGNED (*type))\n-\t  || w < min_precision (lt->enum_max, TYPE_UNSIGNED (*type)))\n+\t  || w < tree_int_cst_min_precision (lt->enum_min, TYPE_UNSIGNED (*type))\n+\t  || w < tree_int_cst_min_precision (lt->enum_max, TYPE_UNSIGNED (*type)))\n \twarning (0, \"%qs is narrower than values of its type\", name);\n     }\n }\n@@ -5866,8 +5866,8 @@ finish_enum (tree enumtype, tree values, tree attributes)\n      that normally we only go as narrow as int - and signed iff any of\n      the values are negative.  */\n   unsign = (tree_int_cst_sgn (minnode) >= 0);\n-  precision = MAX (min_precision (minnode, unsign),\n-\t\t   min_precision (maxnode, unsign));\n+  precision = MAX (tree_int_cst_min_precision (minnode, unsign),\n+\t\t   tree_int_cst_min_precision (maxnode, unsign));\n \n   if (TYPE_PACKED (enumtype) || precision > TYPE_PRECISION (integer_type_node))\n     {"}, {"sha": "8370307aaaa8d267b642d5cebcb80c8cb8e533e9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cdd6a337c0e1c4a07a0a45686dcaa159e51f451c", "patch": "@@ -1,3 +1,10 @@\n+2008-10-29  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR 11492\n+\t* class.c (check_bitfield_decl): Rename min_precision to\n+\ttree_int_cst_min_precision.\n+\t* decl.c (finish_enum): Likewise.\n+\n 2008-10-29  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c++/26997"}, {"sha": "31123aa1ffd40c1aaf8647440bf069a4f4544d10", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=cdd6a337c0e1c4a07a0a45686dcaa159e51f451c", "patch": "@@ -2728,10 +2728,11 @@ check_bitfield_decl (tree field)\n \twarning (0, \"width of %q+D exceeds its type\", field);\n       else if (TREE_CODE (type) == ENUMERAL_TYPE\n \t       && (0 > compare_tree_int (w,\n-\t\t\t\t\t min_precision (TYPE_MIN_VALUE (type),\n-\t\t\t\t\t\t\tTYPE_UNSIGNED (type)))\n+\t\t\t\t\t tree_int_cst_min_precision\n+\t\t\t\t\t (TYPE_MIN_VALUE (type),\n+\t\t\t\t\t  TYPE_UNSIGNED (type)))\n \t\t   ||  0 > compare_tree_int (w,\n-\t\t\t\t\t     min_precision\n+\t\t\t\t\t     tree_int_cst_min_precision\n \t\t\t\t\t     (TYPE_MAX_VALUE (type),\n \t\t\t\t\t      TYPE_UNSIGNED (type)))))\n \twarning (0, \"%q+D is too small to hold all values of %q#T\", field, type);"}, {"sha": "c9cac551a558631a451a4804f2a0558857d944ea", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=cdd6a337c0e1c4a07a0a45686dcaa159e51f451c", "patch": "@@ -10967,11 +10967,11 @@ finish_enum (tree enumtype)\n \n   /* Compute the number of bits require to represent all values of the\n      enumeration.  We must do this before the type of MINNODE and\n-     MAXNODE are transformed, since min_precision relies on the\n-     TREE_TYPE of the value it is passed.  */\n+     MAXNODE are transformed, since tree_int_cst_min_precision relies\n+     on the TREE_TYPE of the value it is passed.  */\n   unsignedp = tree_int_cst_sgn (minnode) >= 0;\n-  lowprec = min_precision (minnode, unsignedp);\n-  highprec = min_precision (maxnode, unsignedp);\n+  lowprec = tree_int_cst_min_precision (minnode, unsignedp);\n+  highprec = tree_int_cst_min_precision (maxnode, unsignedp);\n   precision = MAX (lowprec, highprec);\n \n   if (!fixed_underlying_type_p)"}, {"sha": "1a96c3f77fcf6584d93754a798f7c0a6b30a42f0", "filename": "gcc/fold-const.c", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=cdd6a337c0e1c4a07a0a45686dcaa159e51f451c", "patch": "@@ -14016,15 +14016,38 @@ tree_binary_nonnegative_warnv_p (enum tree_code code, tree type, tree op0,\n       /* zero_extend(x) * zero_extend(y) is non-negative if x and y are\n \t both unsigned and their total bits is shorter than the result.  */\n       if (TREE_CODE (type) == INTEGER_TYPE\n-\t  && TREE_CODE (op0) == NOP_EXPR\n-\t  && TREE_CODE (op1) == NOP_EXPR)\n+\t  && (TREE_CODE (op0) == NOP_EXPR || TREE_CODE (op0) == INTEGER_CST)\n+\t  && (TREE_CODE (op1) == NOP_EXPR || TREE_CODE (op1) == INTEGER_CST))\n \t{\n-\t  tree inner1 = TREE_TYPE (TREE_OPERAND (op0, 0));\n-\t  tree inner2 = TREE_TYPE (TREE_OPERAND (op1, 0));\n-\t  if (TREE_CODE (inner1) == INTEGER_TYPE && TYPE_UNSIGNED (inner1)\n-\t      && TREE_CODE (inner2) == INTEGER_TYPE && TYPE_UNSIGNED (inner2))\n-\t    return TYPE_PRECISION (inner1) + TYPE_PRECISION (inner2)\n-\t\t   < TYPE_PRECISION (type);\n+\t  tree inner0 = (TREE_CODE (op0) == NOP_EXPR) \n+\t    ? TREE_TYPE (TREE_OPERAND (op0, 0))\n+\t    : TREE_TYPE (op0);\n+\t  tree inner1 = (TREE_CODE (op1) == NOP_EXPR) \n+\t    ? TREE_TYPE (TREE_OPERAND (op1, 0))\n+\t    : TREE_TYPE (op1);\n+\n+\t  bool unsigned0 = TYPE_UNSIGNED (inner0);\n+\t  bool unsigned1 = TYPE_UNSIGNED (inner1);\n+\n+\t  if (TREE_CODE (op0) == INTEGER_CST)\n+\t    unsigned0 = unsigned0 || tree_int_cst_sgn (op0) >= 0;\n+\n+\t  if (TREE_CODE (op1) == INTEGER_CST)\n+\t    unsigned1 = unsigned1 || tree_int_cst_sgn (op1) >= 0;\n+\n+\t  if (TREE_CODE (inner0) == INTEGER_TYPE && unsigned0\n+\t      && TREE_CODE (inner1) == INTEGER_TYPE && unsigned1)\n+\t    {\n+\t      unsigned int precision0 = (TREE_CODE (op0) == INTEGER_CST)\n+\t\t? tree_int_cst_min_precision (op0, /*unsignedp=*/true)\n+\t\t: TYPE_PRECISION (inner0);\n+\n+\t      unsigned int precision1 = (TREE_CODE (op1) == INTEGER_CST)\n+\t\t? tree_int_cst_min_precision (op1, /*unsignedp=*/true)\n+\t\t: TYPE_PRECISION (inner1);\n+\n+\t      return precision0 + precision1 < TYPE_PRECISION (type);\n+\t    }\n \t}\n       return false;\n "}, {"sha": "cee6d6ca319e9a68f16fa95c6bccab048dd66b29", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cdd6a337c0e1c4a07a0a45686dcaa159e51f451c", "patch": "@@ -1,3 +1,9 @@\n+2008-10-29  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR 11492\n+\t* gcc.dg/pr11492.c: New.\n+\t* g++.dg/warn/pr11492.C: New.\n+\n 2008-10-29  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR middle-end/36578"}, {"sha": "d23595f2d58dbfbc3d7cc83d7e21b4c260c56018", "filename": "gcc/testsuite/g++.dg/warn/pr11492.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr11492.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr11492.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr11492.C?ref=cdd6a337c0e1c4a07a0a45686dcaa159e51f451c", "patch": "@@ -0,0 +1,12 @@\n+// PR11492 \n+// { dg-do compile }\n+// { dg-options \"-Wsign-compare\" }\n+int main( void )\n+{\n+  unsigned int a;\n+  unsigned char b;\n+  for ( a = 0, b = 2; a > b * 1000; a++ ) /* { dg-bogus \"comparison between signed and unsigned integer\" } */\n+    { ; }\n+\n+  return 0;\n+}"}, {"sha": "9d79f45b92daef6dd1840f6607db533c0dbbb602", "filename": "gcc/testsuite/gcc.dg/pr11492.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr11492.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr11492.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr11492.c?ref=cdd6a337c0e1c4a07a0a45686dcaa159e51f451c", "patch": "@@ -0,0 +1,12 @@\n+/* PR11492 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wsign-compare\" } */\n+int main( void )\n+{\n+  unsigned int a;\n+  unsigned char b;\n+  for ( a = 0, b = 2; a > b * 1000; a++ ) /* { dg-bogus \"comparison between signed and unsigned integer\" } */\n+    { ; }\n+\n+  return 0;\n+}"}, {"sha": "184d247174441a465a88c8dbcdf5812c0da2ee06", "filename": "gcc/tree.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=cdd6a337c0e1c4a07a0a45686dcaa159e51f451c", "patch": "@@ -5035,6 +5035,33 @@ tree_int_cst_sgn (const_tree t)\n     return 1;\n }\n \n+/* Return the minimum number of bits needed to represent VALUE in a\n+   signed or unsigned type, UNSIGNEDP says which.  */\n+\n+unsigned int\n+tree_int_cst_min_precision (tree value, bool unsignedp)\n+{\n+  int log;\n+\n+  /* If the value is negative, compute its negative minus 1.  The latter\n+     adjustment is because the absolute value of the largest negative value\n+     is one larger than the largest positive value.  This is equivalent to\n+     a bit-wise negation, so use that operation instead.  */\n+\n+  if (tree_int_cst_sgn (value) < 0)\n+    value = fold_build1 (BIT_NOT_EXPR, TREE_TYPE (value), value);\n+\n+  /* Return the number of bits needed, taking into account the fact\n+     that we need one more bit for a signed than unsigned type.  */\n+\n+  if (integer_zerop (value))\n+    log = 0;\n+  else\n+    log = tree_floor_log2 (value);\n+\n+  return log + 1 + !unsignedp;\n+}\n+\n /* Compare two constructor-element-type constants.  Return 1 if the lists\n    are known to be equal; otherwise return 0.  */\n "}, {"sha": "d85918fae1ff09ba4d2aae166f88ef4d88d38f39", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=cdd6a337c0e1c4a07a0a45686dcaa159e51f451c", "patch": "@@ -4022,6 +4022,7 @@ extern HOST_WIDE_INT tree_low_cst (const_tree, int);\n extern int tree_int_cst_msb (const_tree);\n extern int tree_int_cst_sgn (const_tree);\n extern int tree_int_cst_sign_bit (const_tree);\n+extern unsigned int tree_int_cst_min_precision (tree, bool);\n extern bool tree_expr_nonnegative_p (tree);\n extern bool tree_expr_nonnegative_warnv_p (tree, bool *);\n extern bool may_negate_without_overflow_p (const_tree);"}]}