{"sha": "ed5786a74537bde38eba66b44fa0aa88b3d2ae89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ1Nzg2YTc0NTM3YmRlMzhlYmE2NmI0NGZhMGFhODhiM2QyYWU4OQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-08-13T08:08:47Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-13T08:08:47Z"}, "message": "[Ada] Build full derivation for private concurrent type\n\nThis extends the processing done for the derivation of private\ndiscriminated types to concurrent types, which is now required because\nthis derivation is no longer redone when a subtype of the derived\nconcurrent type is built.\n\nThis increases the number of entities generated internally in the\ncompiler but this case is sufficiently rare as not to be a real concern.\n\n2019-08-13  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch3.adb (Build_Derived_Concurrent_Type): Add a couple of\n\tlocal variables and use them.  When the derived type fully\n\tconstrains the parent type, rewrite it as a subtype of an\n\timplicit (unconstrained) derived type instead of the other way\n\taround.\n\t(Copy_And_Build): Deal with concurrent types and use predicates.\n\t(Build_Derived_Private_Type): Build the full derivation if\n\tneeded for concurrent types too.\n\t(Build_Derived_Record_Type): Add marker comment.\n\t(Complete_Private_Subtype): Use predicates.\n\ngcc/testsuite/\n\n\t* gnat.dg/discr56.adb, gnat.dg/discr56.ads,\n\tgnat.dg/discr56_pkg1.adb, gnat.dg/discr56_pkg1.ads,\n\tgnat.dg/discr56_pkg2.ads: New testcase.\n\nFrom-SVN: r274359", "tree": {"sha": "9b6a34e92a3d994bf6a889e0c9cbda21432c48c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b6a34e92a3d994bf6a889e0c9cbda21432c48c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed5786a74537bde38eba66b44fa0aa88b3d2ae89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed5786a74537bde38eba66b44fa0aa88b3d2ae89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed5786a74537bde38eba66b44fa0aa88b3d2ae89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed5786a74537bde38eba66b44fa0aa88b3d2ae89/comments", "author": null, "committer": null, "parents": [{"sha": "cffb8f959c237b5af9e94ad4d0188a34acf5d910", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cffb8f959c237b5af9e94ad4d0188a34acf5d910", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cffb8f959c237b5af9e94ad4d0188a34acf5d910"}], "stats": {"total": 156, "additions": 116, "deletions": 40}, "files": [{"sha": "c0c6c53140dd425dd32737d3a9b0051adb5d63d3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5786a74537bde38eba66b44fa0aa88b3d2ae89/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5786a74537bde38eba66b44fa0aa88b3d2ae89/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ed5786a74537bde38eba66b44fa0aa88b3d2ae89", "patch": "@@ -1,3 +1,16 @@\n+2019-08-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch3.adb (Build_Derived_Concurrent_Type): Add a couple of\n+\tlocal variables and use them.  When the derived type fully\n+\tconstrains the parent type, rewrite it as a subtype of an\n+\timplicit (unconstrained) derived type instead of the other way\n+\taround.\n+\t(Copy_And_Build): Deal with concurrent types and use predicates.\n+\t(Build_Derived_Private_Type): Build the full derivation if\n+\tneeded for concurrent types too.\n+\t(Build_Derived_Record_Type): Add marker comment.\n+\t(Complete_Private_Subtype): Use predicates.\n+\n 2019-08-13  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch3.adb (Check_Generic_Ancestor): New subprogram,"}, {"sha": "218aa0c9e07f57343c864bceae7a04ca6ec75a14", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 52, "deletions": 40, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5786a74537bde38eba66b44fa0aa88b3d2ae89/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5786a74537bde38eba66b44fa0aa88b3d2ae89/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=ed5786a74537bde38eba66b44fa0aa88b3d2ae89", "patch": "@@ -6831,7 +6831,9 @@ package body Sem_Ch3 is\n       Parent_Type  : Entity_Id;\n       Derived_Type : Entity_Id)\n    is\n-      Loc : constant Source_Ptr := Sloc (N);\n+      Loc   : constant Source_Ptr := Sloc (N);\n+      Def   : constant Node_Id    := Type_Definition (N);\n+      Indic : constant Node_Id    := Subtype_Indication (Def);\n \n       Corr_Record      : constant Entity_Id := Make_Temporary (Loc, 'C');\n       Corr_Decl        : Node_Id;\n@@ -6842,8 +6844,7 @@ package body Sem_Ch3 is\n       --  this case.\n \n       Constraint_Present : constant Boolean :=\n-                             Nkind (Subtype_Indication (Type_Definition (N))) =\n-                                                          N_Subtype_Indication;\n+                                          Nkind (Indic) = N_Subtype_Indication;\n \n       D_Constraint   : Node_Id;\n       New_Constraint : Elist_Id := No_Elist;\n@@ -6918,36 +6919,50 @@ package body Sem_Ch3 is\n               Expand_To_Stored_Constraint\n                 (Parent_Type,\n                  Build_Discriminant_Constraints\n-                   (Parent_Type,\n-                    Subtype_Indication (Type_Definition (N)), True));\n+                   (Parent_Type, Indic, True));\n          end if;\n \n          End_Scope;\n \n       elsif Constraint_Present then\n \n-         --  Build constrained subtype, copying the constraint, and derive\n-         --  from it to create a derived constrained type.\n+         --  Build an unconstrained derived type and rewrite the derived type\n+         --  as a subtype of this new base type.\n \n          declare\n-            Loc  : constant Source_Ptr := Sloc (N);\n-            Anon : constant Entity_Id :=\n-                     Make_Defining_Identifier (Loc,\n-                       Chars => New_External_Name (Chars (Derived_Type), 'T'));\n-            Decl : Node_Id;\n+            Parent_Base : constant Entity_Id := Base_Type (Parent_Type);\n+            New_Base    : Entity_Id;\n+            New_Decl    : Node_Id;\n+            New_Indic   : Node_Id;\n \n          begin\n-            Decl :=\n+            New_Base :=\n+                     Create_Itype (Ekind (Derived_Type), N, Derived_Type, 'B');\n+\n+            New_Decl :=\n+              Make_Full_Type_Declaration (Loc,\n+                 Defining_Identifier => New_Base,\n+                 Type_Definition     =>\n+                   Make_Derived_Type_Definition (Loc,\n+                     Abstract_Present      => Abstract_Present (Def),\n+                     Limited_Present       => Limited_Present (Def),\n+                     Subtype_Indication    =>\n+                       New_Occurrence_Of (Parent_Base, Loc)));\n+\n+            Mark_Rewrite_Insertion (New_Decl);\n+            Insert_Before (N, New_Decl);\n+            Analyze (New_Decl);\n+\n+            New_Indic :=\n+              Make_Subtype_Indication (Loc,\n+                Subtype_Mark => New_Occurrence_Of (New_Base, Loc),\n+                Constraint   => Relocate_Node (Constraint (Indic)));\n+\n+            Rewrite (N,\n               Make_Subtype_Declaration (Loc,\n-                Defining_Identifier => Anon,\n-                Subtype_Indication =>\n-                  New_Copy_Tree (Subtype_Indication (Type_Definition (N))));\n-            Insert_Before (N, Decl);\n-            Analyze (Decl);\n+                Defining_Identifier => Derived_Type,\n+                Subtype_Indication  => New_Indic));\n \n-            Rewrite (Subtype_Indication (Type_Definition (N)),\n-              New_Occurrence_Of (Anon, Loc));\n-            Set_Analyzed (Derived_Type, False);\n             Analyze (N);\n             return;\n          end;\n@@ -6978,10 +6993,7 @@ package body Sem_Ch3 is\n \n             --  Verify that new discriminants are used to constrain old ones\n \n-            D_Constraint :=\n-              First\n-                (Constraints\n-                  (Constraint (Subtype_Indication (Type_Definition (N)))));\n+            D_Constraint := First (Constraints (Constraint (Indic)));\n \n             Old_Disc := First_Discriminant (Parent_Type);\n \n@@ -7662,14 +7674,15 @@ package body Sem_Ch3 is\n             Full_Parent := Underlying_Full_View (Full_Parent);\n          end if;\n \n-         --  For record, access and most enumeration types, derivation from\n-         --  the full view requires a fully-fledged declaration. In the other\n-         --  cases, just use an itype.\n+         --  For record, concurrent, access and most enumeration types, the\n+         --  derivation from full view requires a fully-fledged declaration.\n+         --  In the other cases, just use an itype.\n \n-         if Ekind (Full_Parent) in Record_Kind\n-           or else Ekind (Full_Parent) in Access_Kind\n+         if Is_Record_Type (Full_Parent)\n+           or else Is_Concurrent_Type (Full_Parent)\n+           or else Is_Access_Type (Full_Parent)\n            or else\n-             (Ekind (Full_Parent) in Enumeration_Kind\n+             (Is_Enumeration_Type (Full_Parent)\n                and then not Is_Standard_Character_Type (Full_Parent)\n                and then not Is_Generic_Type (Root_Type (Full_Parent)))\n          then\n@@ -7698,7 +7711,7 @@ package body Sem_Ch3 is\n             --  is now installed. Subprograms have been derived on the partial\n             --  view, the completion does not derive them anew.\n \n-            if Ekind (Full_Parent) in Record_Kind then\n+            if Is_Record_Type (Full_Parent) then\n \n                --  If parent type is tagged, the completion inherits the proper\n                --  primitive operations.\n@@ -7900,12 +7913,10 @@ package body Sem_Ch3 is\n          --  Build the full derivation if this is not the anonymous derived\n          --  base type created by Build_Derived_Record_Type in the constrained\n          --  case (see point 5. of its head comment) since we build it for the\n-         --  derived subtype. And skip it for synchronized types altogether, as\n-         --  gigi does not use these types directly.\n+         --  derived subtype.\n \n          if Present (Full_View (Parent_Type))\n            and then not Is_Itype (Derived_Type)\n-           and then not Is_Concurrent_Type (Full_View (Parent_Type))\n          then\n             declare\n                Der_Base   : constant Entity_Id := Base_Type (Derived_Type);\n@@ -8652,6 +8663,8 @@ package body Sem_Ch3 is\n          end if;\n       end Check_Generic_Ancestors;\n \n+   --  Start of processing for Build_Derived_Record_Type\n+\n    begin\n       if Ekind (Parent_Type) = E_Record_Type_With_Private\n         and then Present (Full_View (Parent_Type))\n@@ -12265,10 +12278,9 @@ package body Sem_Ch3 is\n       Save_Next_Entity := Next_Entity (Full);\n       Save_Homonym     := Homonym (Priv);\n \n-      if Ekind (Full_Base) in Private_Kind\n-        or else Ekind (Full_Base) in Protected_Kind\n-        or else Ekind (Full_Base) in Record_Kind\n-        or else Ekind (Full_Base) in Task_Kind\n+      if Is_Private_Type (Full_Base)\n+        or else Is_Record_Type (Full_Base)\n+        or else Is_Concurrent_Type (Full_Base)\n       then\n          Copy_Node (Priv, Full);\n \n@@ -12411,7 +12423,7 @@ package body Sem_Ch3 is\n       --  If the full base is itself derived from private, build a congruent\n       --  subtype of its underlying full view, for use by the back end.\n \n-      elsif Ekind (Full_Base) in Private_Kind\n+      elsif Is_Private_Type (Full_Base)\n         and then Present (Underlying_Full_View (Full_Base))\n       then\n          declare"}, {"sha": "5b8ed3aaf7ca2ea463e017a387515bef731de1a8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5786a74537bde38eba66b44fa0aa88b3d2ae89/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5786a74537bde38eba66b44fa0aa88b3d2ae89/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ed5786a74537bde38eba66b44fa0aa88b3d2ae89", "patch": "@@ -1,3 +1,9 @@\n+2019-08-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/discr56.adb, gnat.dg/discr56.ads,\n+\tgnat.dg/discr56_pkg1.adb, gnat.dg/discr56_pkg1.ads,\n+\tgnat.dg/discr56_pkg2.ads: New testcase.\n+\n 2019-08-13  Ed Schonberg  <schonberg@adacore.com>\n \n \t* gnat.dg/tagged4.adb: New testcase."}, {"sha": "dc0ca7f57fac19e2eca57a4ee1bc0f4457f021bc", "filename": "gcc/testsuite/gnat.dg/discr56.adb", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5786a74537bde38eba66b44fa0aa88b3d2ae89/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr56.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5786a74537bde38eba66b44fa0aa88b3d2ae89/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr56.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr56.adb?ref=ed5786a74537bde38eba66b44fa0aa88b3d2ae89", "patch": "@@ -0,0 +1,5 @@\n+--  { dg-do compile }\n+\n+package body Discr56 is\n+  procedure Dummy is null;\n+end Discr56;"}, {"sha": "443f1bdd314bd766310095c5174023695e1ffd4e", "filename": "gcc/testsuite/gnat.dg/discr56.ads", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5786a74537bde38eba66b44fa0aa88b3d2ae89/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr56.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5786a74537bde38eba66b44fa0aa88b3d2ae89/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr56.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr56.ads?ref=ed5786a74537bde38eba66b44fa0aa88b3d2ae89", "patch": "@@ -0,0 +1,9 @@\n+with Discr56_Pkg2;\n+\n+package Discr56 is\n+\n+  Obj : Discr56_Pkg2.Buffer (1);\n+\n+  procedure Dummy;\n+\n+end Discr56;"}, {"sha": "67c329ab75675d06115e781229839c1acc93ee40", "filename": "gcc/testsuite/gnat.dg/discr56_pkg1.adb", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5786a74537bde38eba66b44fa0aa88b3d2ae89/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr56_pkg1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5786a74537bde38eba66b44fa0aa88b3d2ae89/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr56_pkg1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr56_pkg1.adb?ref=ed5786a74537bde38eba66b44fa0aa88b3d2ae89", "patch": "@@ -0,0 +1,6 @@\n+package body Discr56_Pkg1 is\n+\n+   protected body Buffer is\n+   end Buffer;\n+\n+end Discr56_Pkg1;"}, {"sha": "385263263366ccfd4297bff9f7933d468a1f5643", "filename": "gcc/testsuite/gnat.dg/discr56_pkg1.ads", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5786a74537bde38eba66b44fa0aa88b3d2ae89/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr56_pkg1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5786a74537bde38eba66b44fa0aa88b3d2ae89/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr56_pkg1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr56_pkg1.ads?ref=ed5786a74537bde38eba66b44fa0aa88b3d2ae89", "patch": "@@ -0,0 +1,14 @@\n+package Discr56_Pkg1 is\n+\n+   type Buffer (Size : Positive) is limited private;\n+\n+private\n+\n+   type Arr is array (Natural range <>) of Integer;\n+\n+   protected type Buffer (Size : Positive) is\n+   private\n+     Store : Arr (0..Size);\n+   end Buffer;\n+\n+end Discr56_Pkg1;"}, {"sha": "dc94908bb75deb9fe329bded38d03c1b4dd5f4b4", "filename": "gcc/testsuite/gnat.dg/discr56_pkg2.ads", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5786a74537bde38eba66b44fa0aa88b3d2ae89/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr56_pkg2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5786a74537bde38eba66b44fa0aa88b3d2ae89/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr56_pkg2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr56_pkg2.ads?ref=ed5786a74537bde38eba66b44fa0aa88b3d2ae89", "patch": "@@ -0,0 +1,11 @@\n+with Discr56_Pkg1;\n+\n+package Discr56_Pkg2 is\n+\n+   type Buffer (Size : Positive) is limited private;\n+\n+private\n+\n+   type Buffer (Size : Positive) is new Discr56_Pkg1.Buffer (Size);\n+\n+end Discr56_Pkg2;"}]}