{"sha": "72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI3NDRmNjVhMjVkMzZmOWNlZjkyZDM4ODlhZDNmOWNiMmQ0YjgxZQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-09-25T07:13:40Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-09-25T07:13:40Z"}, "message": "Remove unused functions and fields.\n\n2018-09-25  Martin Liska  <mliska@suse.cz>\n\n\t* alias.c (set_dest_equal_p): Remove unused function.\n\t* config/i386/i386.c (def_builtin_pure2): Likewise.\n\t* diagnostic-show-locus.c (class layout): Remove\n\tunused field.\n\t(layout::layout): Likewise here.\n\t* dump-context.h (class temp_dump_context): Likewise.\n\t* dwarf2out.c (add_AT_fde_ref): Remove unused function.\n\t(add_AT_loclistsptr): Likewise.\n\t(add_AT_offset): Likewise.\n\t(get_AT_hi_pc): Likewise.\n\t(is_comdat_die): Likewise.\n\t(type_is_enum): Likewise.\n\t(ceiling): Likewise.\n\t(add_AT_vms_delta): Likewise.\n\t(is_class_die): Likewise.\n\t* edit-context.c (class line_event): Remove unused field.\n\t* graphite-sese-to-poly.c (tree_int_to_gmp): Remove\n\tunused function.\n\t* ipa-cp.c (ipa_get_vr_lat): Likewise.\n\t* lra-constraints.c (ok_for_index_p_nonstrict): Likewise.\n\t(ok_for_base_p_nonstrict): Likewise.\n\t* tree-chrec.c (is_not_constant_evolution): Likewise.\n\t(chrec_fold_poly_cst): Likewise.\n\t* tree-if-conv.c (has_pred_critical_p): Likewise.\n\t* tree-ssa-coalesce.c (print_exprs): Likewise.\n\t* tree-ssa-pre.c (bitmap_set_contains_expr): Likewise.\n\t* tree-ssa-uninit.c (is_and_or_or_p): Likewise.\n\t* tree-vrp.c (value_ranges_intersect_p): Likewise.\n\t(value_range_nonnegative_p): Likewise.\n2018-09-25  Martin Liska  <mliska@suse.cz>\n\n\t* name-lookup.c (namespace_scope_ht_size): Remove\n\tunused function.\n\t* parser.c (cp_lexer_next_token_is_not_keyword): Likewise.\n2018-09-25  Martin Liska  <mliska@suse.cz>\n\n\t* trans.c (remove_suffix): Remove\n\tunused function.\n2018-09-25  Martin Liska  <mliska@suse.cz>\n\n\t* gofrontend/escape.cc (Gogo::analyze_escape): Remove\n\tusage of a parameter.\n\t(Gogo::assign_connectivity): Likewise.\n\t(class Escape_analysis_tag): Likewise.\n\t(Gogo::tag_function): Likewise.\n\t* gofrontend/expressions.cc (Call_expression::do_type): Likewise.\n\t* gofrontend/gogo.h (class Gogo): Likewise.\n\t* gofrontend/types.cc (class Call_multiple_result_type): Likewise.\n\t(Type::make_call_multiple_result_type): Likewise.\n\t* gofrontend/types.h (class Type): Likewise.\n\t* gofrontend/wb.cc (class Check_escape): Likewise.\n\t(Gogo::add_write_barriers): Likewise.\n\nFrom-SVN: r264561", "tree": {"sha": "d13b9e077fd15eb7c7cfa4e50a39bd34ad21be58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d13b9e077fd15eb7c7cfa4e50a39bd34ad21be58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a0464aa0c4a555aae0dbc0ecf586f768cf8cac6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0464aa0c4a555aae0dbc0ecf586f768cf8cac6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0464aa0c4a555aae0dbc0ecf586f768cf8cac6a"}], "stats": {"total": 496, "additions": 76, "deletions": 420}, "files": [{"sha": "f5dcd16a1d4893eb70916a10a44b081314d5c537", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "patch": "@@ -1,3 +1,35 @@\n+2018-09-25  Martin Liska  <mliska@suse.cz>\n+\n+\t* alias.c (set_dest_equal_p): Remove unused function.\n+\t* config/i386/i386.c (def_builtin_pure2): Likewise.\n+\t* diagnostic-show-locus.c (class layout): Remove\n+\tunused field.\n+\t(layout::layout): Likewise here.\n+\t* dump-context.h (class temp_dump_context): Likewise.\n+\t* dwarf2out.c (add_AT_fde_ref): Remove unused function.\n+\t(add_AT_loclistsptr): Likewise.\n+\t(add_AT_offset): Likewise.\n+\t(get_AT_hi_pc): Likewise.\n+\t(is_comdat_die): Likewise.\n+\t(type_is_enum): Likewise.\n+\t(ceiling): Likewise.\n+\t(add_AT_vms_delta): Likewise.\n+\t(is_class_die): Likewise.\n+\t* edit-context.c (class line_event): Remove unused field.\n+\t* graphite-sese-to-poly.c (tree_int_to_gmp): Remove\n+\tunused function.\n+\t* ipa-cp.c (ipa_get_vr_lat): Likewise.\n+\t* lra-constraints.c (ok_for_index_p_nonstrict): Likewise.\n+\t(ok_for_base_p_nonstrict): Likewise.\n+\t* tree-chrec.c (is_not_constant_evolution): Likewise.\n+\t(chrec_fold_poly_cst): Likewise.\n+\t* tree-if-conv.c (has_pred_critical_p): Likewise.\n+\t* tree-ssa-coalesce.c (print_exprs): Likewise.\n+\t* tree-ssa-pre.c (bitmap_set_contains_expr): Likewise.\n+\t* tree-ssa-uninit.c (is_and_or_or_p): Likewise.\n+\t* tree-vrp.c (value_ranges_intersect_p): Likewise.\n+\t(value_range_nonnegative_p): Likewise.\n+\n 2018-09-25  Martin Liska  <mliska@suse.cz>\n \n \t* config/powerpcspe/powerpcspe.c (rs6000_output_function_epilogue):"}, {"sha": "7963ece291a75c551e74e0cbdceb486c0a3a37c9", "filename": "gcc/alias.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "patch": "@@ -3270,15 +3270,6 @@ memory_modified_in_insn_p (const_rtx mem, const_rtx insn)\n   return memory_modified;\n }\n \n-/* Return TRUE if the destination of a set is rtx identical to\n-   ITEM.  */\n-static inline bool\n-set_dest_equal_p (const_rtx set, const_rtx item)\n-{\n-  rtx dest = SET_DEST (set);\n-  return rtx_equal_p (dest, item);\n-}\n-\n /* Initialize the aliasing machinery.  Initialize the REG_KNOWN_VALUE\n    array.  */\n "}, {"sha": "3d76c896d8338688f7ca5cbd07e172d7096bfcfe", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "patch": "@@ -30221,21 +30221,6 @@ def_builtin_const2 (HOST_WIDE_INT mask, const char *name,\n   return decl;\n }\n \n-/* Like def_builtin, but also marks the function decl \"pure\".  */\n-\n-static inline tree\n-def_builtin_pure2 (HOST_WIDE_INT mask, const char *name,\n-\t\t   enum ix86_builtin_func_type tcode, enum ix86_builtins code)\n-{\n-  tree decl = def_builtin2 (mask, name, tcode, code);\n-  if (decl)\n-    DECL_PURE_P (decl) = 1;\n-  else\n-    ix86_builtins_isa[(int) code].pure_p = true;\n-\n-  return decl;\n-}\n-\n /* Add any new builtin functions for a given ISA that may not have been\n    declared.  This saves a bit of space compared to adding all of the\n    declarations to the tree, even if we didn't use them.  */"}, {"sha": "9ce845d20ac1311bae3bcc2a672373010b1580c3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "patch": "@@ -1,3 +1,9 @@\n+2018-09-25  Martin Liska  <mliska@suse.cz>\n+\n+\t* name-lookup.c (namespace_scope_ht_size): Remove\n+\tunused function.\n+\t* parser.c (cp_lexer_next_token_is_not_keyword): Likewise.\n+\n 2018-09-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/85070"}, {"sha": "95d2845dd9110aeae06be7d655470e34a2577507", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "patch": "@@ -3291,21 +3291,6 @@ cp_binding_level_debug (cp_binding_level *scope, int line, const char *action)\n     verbatim (\"%s %s %p %d\\n\", action, desc, (void *) scope, line);\n }\n \n-/* Return the estimated initial size of the hashtable of a NAMESPACE\n-   scope.  */\n-\n-static inline size_t\n-namespace_scope_ht_size (tree ns)\n-{\n-  tree name = DECL_NAME (ns);\n-\n-  return name == std_identifier\n-    ? NAMESPACE_STD_HT_SIZE\n-    : (name == global_identifier\n-       ? GLOBAL_SCOPE_HT_SIZE\n-       : NAMESPACE_ORDINARY_HT_SIZE);\n-}\n-\n /* A chain of binding_level structures awaiting reuse.  */\n \n static GTY((deletable)) cp_binding_level *free_binding_level;"}, {"sha": "6696f174d75565533f796a69c56b25843401a0ef", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "patch": "@@ -922,14 +922,6 @@ cp_lexer_nth_token_is_keyword (cp_lexer* lexer, size_t n, enum rid keyword)\n   return cp_lexer_peek_nth_token (lexer, n)->keyword == keyword;\n }\n \n-/* Return true if the next token is not the indicated KEYWORD.  */\n-\n-static inline bool\n-cp_lexer_next_token_is_not_keyword (cp_lexer* lexer, enum rid keyword)\n-{\n-  return cp_lexer_peek_token (lexer)->keyword != keyword;\n-}\n-\n /* Return true if KEYWORD can start a decl-specifier.  */\n \n bool"}, {"sha": "43a49ea89137504412443f8d38c547db0867d350", "filename": "gcc/diagnostic-show-locus.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fdiagnostic-show-locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fdiagnostic-show-locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-show-locus.c?ref=72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "patch": "@@ -289,7 +289,6 @@ class layout\n  private:\n   diagnostic_context *m_context;\n   pretty_printer *m_pp;\n-  diagnostic_t m_diagnostic_kind;\n   location_t m_primary_loc;\n   expanded_location m_exploc;\n   colorizer m_colorizer;\n@@ -886,7 +885,6 @@ layout::layout (diagnostic_context * context,\n \t\tdiagnostic_t diagnostic_kind)\n : m_context (context),\n   m_pp (context->printer),\n-  m_diagnostic_kind (diagnostic_kind),\n   m_primary_loc (richloc->get_range (0)->m_loc),\n   m_exploc (richloc->get_expanded_location (0)),\n   m_colorizer (context, diagnostic_kind),"}, {"sha": "5b20c15cb8bf912fdc0c1dd498350b6eb1d28874", "filename": "gcc/dump-context.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fdump-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fdump-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdump-context.h?ref=72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "patch": "@@ -147,7 +147,6 @@ class temp_dump_context\n   pretty_printer m_pp;\n   dump_context m_context;\n   dump_context *m_saved;\n-  bool m_saved_flag_remarks;\n };\n \n #endif /* CHECKING_P */"}, {"sha": "66ee839b5cb596bc449e0d5296068d9d74e80b90", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 0, "deletions": 141, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "patch": "@@ -3649,7 +3649,6 @@ static void add_AT_specification (dw_die_ref, dw_die_ref);\n static inline dw_die_ref AT_ref (dw_attr_node *);\n static inline int AT_ref_external (dw_attr_node *);\n static inline void set_AT_ref_external (dw_attr_node *, int);\n-static void add_AT_fde_ref (dw_die_ref, enum dwarf_attribute, unsigned);\n static void add_AT_loc (dw_die_ref, enum dwarf_attribute, dw_loc_descr_ref);\n static inline dw_loc_descr_ref AT_loc (dw_attr_node *);\n static void add_AT_loc_list (dw_die_ref, enum dwarf_attribute,\n@@ -3665,16 +3664,11 @@ static void add_AT_symview (dw_die_ref, enum dwarf_attribute, const char *);\n static void add_AT_lbl_id (dw_die_ref, enum dwarf_attribute, const char *);\n static void add_AT_lineptr (dw_die_ref, enum dwarf_attribute, const char *);\n static void add_AT_macptr (dw_die_ref, enum dwarf_attribute, const char *);\n-static void add_AT_loclistsptr (dw_die_ref, enum dwarf_attribute,\n-\t\t\t\tconst char *);\n-static void add_AT_offset (dw_die_ref, enum dwarf_attribute,\n-\t\t\t   unsigned HOST_WIDE_INT);\n static void add_AT_range_list (dw_die_ref, enum dwarf_attribute,\n                                unsigned long, bool);\n static inline const char *AT_lbl (dw_attr_node *);\n static dw_attr_node *get_AT (dw_die_ref, enum dwarf_attribute);\n static const char *get_AT_low_pc (dw_die_ref);\n-static const char *get_AT_hi_pc (dw_die_ref);\n static const char *get_AT_string (dw_die_ref, enum dwarf_attribute);\n static int get_AT_flag (dw_die_ref, enum dwarf_attribute);\n static unsigned get_AT_unsigned (dw_die_ref, enum dwarf_attribute);\n@@ -3716,7 +3710,6 @@ static int same_dw_val_p (const dw_val_node *, const dw_val_node *, int *);\n static int same_attr_p (dw_attr_node *, dw_attr_node *, int *);\n static int same_die_p (dw_die_ref, dw_die_ref, int *);\n static int is_type_die (dw_die_ref);\n-static int is_comdat_die (dw_die_ref);\n static inline bool is_template_instantiation (dw_die_ref);\n static int is_declaration_die (dw_die_ref);\n static int should_move_die_to_comdat (dw_die_ref);\n@@ -3773,7 +3766,6 @@ static int decl_quals (const_tree);\n static dw_die_ref modified_type_die (tree, int, bool, dw_die_ref);\n static dw_die_ref generic_parameter_die (tree, tree, bool, dw_die_ref);\n static dw_die_ref template_parameter_pack_die (tree, tree, dw_die_ref);\n-static int type_is_enum (const_tree);\n static unsigned int dbx_reg_number (const_rtx);\n static void add_loc_descr_op_piece (dw_loc_descr_ref *, int);\n static dw_loc_descr_ref reg_loc_descriptor (rtx, enum var_init_status);\n@@ -3796,7 +3788,6 @@ static dw_loc_list_ref loc_list_from_tree (tree, int,\n \t\t\t\t\t   struct loc_descr_context *);\n static dw_loc_descr_ref loc_descriptor_from_tree (tree, int,\n \t\t\t\t\t\t  struct loc_descr_context *);\n-static HOST_WIDE_INT ceiling (HOST_WIDE_INT, unsigned int);\n static tree field_type (const_tree);\n static unsigned int simple_type_align_in_bits (const_tree);\n static unsigned int simple_decl_align_in_bits (const_tree);\n@@ -3910,8 +3901,6 @@ static void prune_unused_types (void);\n static int maybe_emit_file (struct dwarf_file_data *fd);\n static inline const char *AT_vms_delta1 (dw_attr_node *);\n static inline const char *AT_vms_delta2 (dw_attr_node *);\n-static inline void add_AT_vms_delta (dw_die_ref, enum dwarf_attribute,\n-\t\t\t\t     const char *, const char *);\n static void append_entry_to_tmpl_value_parm_die_table (dw_die_ref, tree);\n static void gen_remaining_tmpl_value_param_die_attribute (void);\n static bool generic_type_p (tree);\n@@ -4836,20 +4825,6 @@ set_AT_ref_external (dw_attr_node *a, int i)\n   a->dw_attr_val.v.val_die_ref.external = i;\n }\n \n-/* Add an FDE reference attribute value to a DIE.  */\n-\n-static inline void\n-add_AT_fde_ref (dw_die_ref die, enum dwarf_attribute attr_kind, unsigned int targ_fde)\n-{\n-  dw_attr_node attr;\n-\n-  attr.dw_attr = attr_kind;\n-  attr.dw_attr_val.val_class = dw_val_class_fde_ref;\n-  attr.dw_attr_val.val_entry = NULL;\n-  attr.dw_attr_val.v.val_fde_index = targ_fde;\n-  add_dwarf_attr (die, &attr);\n-}\n-\n /* Add a location description attribute value to a DIE.  */\n \n static inline void\n@@ -5160,22 +5135,6 @@ AT_file (dw_attr_node *a)\n   return a->dw_attr_val.v.val_file;\n }\n \n-/* Add a vms delta attribute value to a DIE.  */\n-\n-static inline void\n-add_AT_vms_delta (dw_die_ref die, enum dwarf_attribute attr_kind,\n-\t\t  const char *lbl1, const char *lbl2)\n-{\n-  dw_attr_node attr;\n-\n-  attr.dw_attr = attr_kind;\n-  attr.dw_attr_val.val_class = dw_val_class_vms_delta;\n-  attr.dw_attr_val.val_entry = NULL;\n-  attr.dw_attr_val.v.val_vms_delta.lbl1 = xstrdup (lbl1);\n-  attr.dw_attr_val.v.val_vms_delta.lbl2 = xstrdup (lbl2);\n-  add_dwarf_attr (die, &attr);\n-}\n-\n /* Add a symbolic view identifier attribute value to a DIE.  */\n \n static inline void\n@@ -5226,22 +5185,6 @@ add_AT_lineptr (dw_die_ref die, enum dwarf_attribute attr_kind,\n   add_dwarf_attr (die, &attr);\n }\n \n-/* Add a section offset attribute value to a DIE, an offset into the\n-   debug_loclists section.  */\n-\n-static inline void\n-add_AT_loclistsptr (dw_die_ref die, enum dwarf_attribute attr_kind,\n-\t\t    const char *label)\n-{\n-  dw_attr_node attr;\n-\n-  attr.dw_attr = attr_kind;\n-  attr.dw_attr_val.val_class = dw_val_class_loclistsptr;\n-  attr.dw_attr_val.val_entry = NULL;\n-  attr.dw_attr_val.v.val_lbl_id = xstrdup (label);\n-  add_dwarf_attr (die, &attr);\n-}\n-\n /* Add a section offset attribute value to a DIE, an offset into the\n    debug_macinfo section.  */\n \n@@ -5258,21 +5201,6 @@ add_AT_macptr (dw_die_ref die, enum dwarf_attribute attr_kind,\n   add_dwarf_attr (die, &attr);\n }\n \n-/* Add an offset attribute value to a DIE.  */\n-\n-static inline void\n-add_AT_offset (dw_die_ref die, enum dwarf_attribute attr_kind,\n-\t       unsigned HOST_WIDE_INT offset)\n-{\n-  dw_attr_node attr;\n-\n-  attr.dw_attr = attr_kind;\n-  attr.dw_attr_val.val_class = dw_val_class_offset;\n-  attr.dw_attr_val.val_entry = NULL;\n-  attr.dw_attr_val.v.val_offset = offset;\n-  add_dwarf_attr (die, &attr);\n-}\n-\n /* Add a range_list attribute value to a DIE.  When using\n    dwarf_split_debug_info, address attributes in dies destined for the\n    final executable should be direct references--setting the parameter\n@@ -5383,18 +5311,6 @@ get_AT_low_pc (dw_die_ref die)\n   return a ? AT_lbl (a) : NULL;\n }\n \n-/* Return the \"high pc\" attribute value, typically associated with a subprogram\n-   DIE.  Return null if the \"high pc\" attribute is either not present, or if it\n-   cannot be represented as an assembler label identifier.  */\n-\n-static inline const char *\n-get_AT_hi_pc (dw_die_ref die)\n-{\n-  dw_attr_node *a = get_AT (die, DW_AT_high_pc);\n-\n-  return a ? AT_lbl (a) : NULL;\n-}\n-\n /* Return the value of the string attribute designated by ATTR_KIND, or\n    NULL if it is not present.  */\n \n@@ -7907,36 +7823,6 @@ is_type_die (dw_die_ref die)\n     }\n }\n \n-/* Returns 1 iff C is the sort of DIE that should go into a COMDAT CU.\n-   Basically, we want to choose the bits that are likely to be shared between\n-   compilations (types) and leave out the bits that are specific to individual\n-   compilations (functions).  */\n-\n-static int\n-is_comdat_die (dw_die_ref c)\n-{\n-  /* I think we want to leave base types and __vtbl_ptr_type in the main CU, as\n-     we do for stabs.  The advantage is a greater likelihood of sharing between\n-     objects that don't include headers in the same order (and therefore would\n-     put the base types in a different comdat).  jason 8/28/00 */\n-\n-  if (c->die_tag == DW_TAG_base_type)\n-    return 0;\n-\n-  if (c->die_tag == DW_TAG_pointer_type\n-      || c->die_tag == DW_TAG_reference_type\n-      || c->die_tag == DW_TAG_rvalue_reference_type\n-      || c->die_tag == DW_TAG_const_type\n-      || c->die_tag == DW_TAG_volatile_type)\n-    {\n-      dw_die_ref t = get_AT_ref (c, DW_AT_type);\n-\n-      return t ? is_comdat_die (t) : 0;\n-    }\n-\n-  return is_type_die (c);\n-}\n-\n /* Returns true iff C is a compile-unit DIE.  */\n \n static inline bool\n@@ -7965,15 +7851,6 @@ is_namespace_die (dw_die_ref c)\n   return c && c->die_tag == DW_TAG_namespace;\n }\n \n-/* Returns true iff C is a class or structure DIE.  */\n-\n-static inline bool\n-is_class_die (dw_die_ref c)\n-{\n-  return c && (c->die_tag == DW_TAG_class_type\n-               || c->die_tag == DW_TAG_structure_type);\n-}\n-\n /* Return non-zero if this DIE is a template parameter.  */\n \n static inline bool\n@@ -13703,15 +13580,6 @@ template_parameter_pack_die (tree parm_pack,\n   return die;\n }\n \n-/* Given a pointer to an arbitrary ..._TYPE tree node, return true if it is\n-   an enumerated type.  */\n-\n-static inline int\n-type_is_enum (const_tree type)\n-{\n-  return TREE_CODE (type) == ENUMERAL_TYPE;\n-}\n-\n /* Return the DBX register number described by a given RTL node.  */\n \n static unsigned int\n@@ -18933,15 +18801,6 @@ loc_descriptor_from_tree (tree loc, int want_address,\n   return ret->expr;\n }\n \n-/* Given a value, round it up to the lowest multiple of `boundary'\n-   which is not less than the value itself.  */\n-\n-static inline HOST_WIDE_INT\n-ceiling (HOST_WIDE_INT value, unsigned int boundary)\n-{\n-  return (((value + boundary - 1) / boundary) * boundary);\n-}\n-\n /* Given a pointer to what is assumed to be a FIELD_DECL node, return a\n    pointer to the declared type for the relevant field variable, or return\n    `integer_type_node' if the given node turns out to be an"}, {"sha": "85afc4a2ec7d05425d346d301ef209e3624f7511", "filename": "gcc/edit-context.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fedit-context.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fedit-context.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fedit-context.c?ref=72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "patch": "@@ -182,7 +182,7 @@ class line_event\n {\n  public:\n   line_event (int start, int next, int len) : m_start (start),\n-    m_next (next), m_delta (len - (next - start)) {}\n+    m_delta (len - (next - start)) {}\n \n   int get_effective_column (int orig_column) const\n   {\n@@ -194,7 +194,6 @@ class line_event\n \n  private:\n   int m_start;\n-  int m_next;\n   int m_delta;\n };\n "}, {"sha": "7e1546f93fe71956b3b0f0aedd7e99f964a22c67", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "patch": "@@ -1,3 +1,8 @@\n+2018-09-25  Martin Liska  <mliska@suse.cz>\n+\n+\t* trans.c (remove_suffix): Remove\n+\tunused function.\n+\n 2018-09-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/87397"}, {"sha": "03dc7a284b5631cb4028934261b8edba300b4239", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "patch": "@@ -61,26 +61,6 @@ gfc_advance_chain (tree t, int n)\n   return t;\n }\n \n-\n-/* Strip off a legitimate source ending from the input\n-   string NAME of length LEN.  */\n-\n-static inline void\n-remove_suffix (char *name, int len)\n-{\n-  int i;\n-\n-  for (i = 2; i < 8 && len > i; i++)\n-    {\n-      if (name[len - i] == '.')\n-\t{\n-\t  name[len - i] = '\\0';\n-\t  break;\n-\t}\n-    }\n-}\n-\n-\n /* Creates a variable declaration with a given TYPE.  */\n \n tree"}, {"sha": "afb0a7d601938ea4f32d30af8ec77dd821f9ad91", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "patch": "@@ -1,3 +1,18 @@\n+2018-09-25  Martin Liska  <mliska@suse.cz>\n+\n+\t* gofrontend/escape.cc (Gogo::analyze_escape): Remove\n+\tusage of a parameter.\n+\t(Gogo::assign_connectivity): Likewise.\n+\t(class Escape_analysis_tag): Likewise.\n+\t(Gogo::tag_function): Likewise.\n+\t* gofrontend/expressions.cc (Call_expression::do_type): Likewise.\n+\t* gofrontend/gogo.h (class Gogo): Likewise.\n+\t* gofrontend/types.cc (class Call_multiple_result_type): Likewise.\n+\t(Type::make_call_multiple_result_type): Likewise.\n+\t* gofrontend/types.h (class Type): Likewise.\n+\t* gofrontend/wb.cc (class Check_escape): Likewise.\n+\t(Gogo::add_write_barriers): Likewise.\n+\n 2018-09-20  Allan Sandfeld Jensen  <allan.jensen@qt.io>\n \n \t* gospec.c (lang_specific_driver): Handle -r like -nostdlib."}, {"sha": "d9dcc8993f4e7d492c3217722a6d24ce24b1dfb1", "filename": "gcc/go/gofrontend/escape.cc", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fescape.cc?ref=72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "patch": "@@ -979,7 +979,7 @@ Gogo::analyze_escape()\n       for (std::vector<Named_object*>::iterator fn = stack.begin();\n            fn != stack.end();\n            ++fn)\n-        this->tag_function(context, *fn);\n+\tthis->tag_function(*fn);\n \n       if (this->debug_escape_level() != 0)\n \t{\n@@ -1232,10 +1232,10 @@ Escape_analysis_loop::statement(Block*, size_t*, Statement* s)\n class Escape_analysis_assign : public Traverse\n {\n public:\n-  Escape_analysis_assign(Escape_context* context, Named_object* fn)\n+  Escape_analysis_assign(Escape_context* context)\n     : Traverse(traverse_statements\n \t       | traverse_expressions),\n-      context_(context), fn_(fn)\n+      context_(context)\n   { }\n \n   // Model statements within a function as assignments and flows between nodes.\n@@ -1272,8 +1272,6 @@ class Escape_analysis_assign : public Traverse\n private:\n   // The escape context for this set of functions.\n   Escape_context* context_;\n-  // The current function being analyzed.\n-  Named_object* fn_;\n };\n \n // Helper function to detect self assignment like the following.\n@@ -2703,7 +2701,7 @@ Gogo::assign_connectivity(Escape_context* context, Named_object* fn)\n   int save_depth = context->loop_depth();\n   context->set_loop_depth(1);\n \n-  Escape_analysis_assign ea(context, fn);\n+  Escape_analysis_assign ea(context);\n   Function::Results* res = fn->func_value()->result_variables();\n   if (res != NULL)\n     {\n@@ -3266,17 +3264,13 @@ Gogo::propagate_escape(Escape_context* context, Node* dst)\n class Escape_analysis_tag\n {\n  public:\n-  Escape_analysis_tag(Escape_context* context)\n-    : context_(context)\n+  Escape_analysis_tag()\n   { }\n \n   // Add notes to the function's type about the escape information of its\n   // input parameters.\n   void\n   tag(Named_object* fn);\n-\n- private:\n-  Escape_context* context_;\n };\n \n void\n@@ -3384,9 +3378,9 @@ Escape_analysis_tag::tag(Named_object* fn)\n // retain analysis results across imports.\n \n void\n-Gogo::tag_function(Escape_context* context, Named_object* fn)\n+Gogo::tag_function(Named_object* fn)\n {\n-  Escape_analysis_tag eat(context);\n+  Escape_analysis_tag eat;\n   eat.tag(fn);\n }\n "}, {"sha": "91cc30e30b5e1c715c18c5b3bcdcb707ec7d0c29", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "patch": "@@ -10089,7 +10089,7 @@ Call_expression::do_type()\n   else if (results->size() == 1)\n     ret = results->begin()->type();\n   else\n-    ret = Type::make_call_multiple_result_type(this);\n+    ret = Type::make_call_multiple_result_type();\n \n   this->type_ = ret;\n "}, {"sha": "07d08c2dc602c2ab19ed592124e369f28c5f3dd5", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "patch": "@@ -680,7 +680,7 @@ class Gogo\n   // Add notes about the escape level of a function's input and output\n   // parameters for exporting and importing top level functions. \n   void\n-  tag_function(Escape_context*, Named_object*);\n+  tag_function(Named_object*);\n \n   // Reclaim memory of escape analysis Nodes.\n   void"}, {"sha": "ad0704cc2da0ccafb59f8980b8e014e4c3c3d940", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "patch": "@@ -5466,9 +5466,8 @@ Type::make_nil_type()\n class Call_multiple_result_type : public Type\n {\n  public:\n-  Call_multiple_result_type(Call_expression* call)\n-    : Type(TYPE_CALL_MULTIPLE_RESULT),\n-      call_(call)\n+  Call_multiple_result_type()\n+    : Type(TYPE_CALL_MULTIPLE_RESULT)\n   { }\n \n  protected:\n@@ -5501,18 +5500,14 @@ class Call_multiple_result_type : public Type\n   void\n   do_mangled_name(Gogo*, std::string*) const\n   { go_assert(saw_errors()); }\n-\n- private:\n-  // The expression being called.\n-  Call_expression* call_;\n };\n \n // Make a call result type.\n \n Type*\n-Type::make_call_multiple_result_type(Call_expression* call)\n+Type::make_call_multiple_result_type()\n {\n-  return new Call_multiple_result_type(call);\n+  return new Call_multiple_result_type();\n }\n \n // Class Struct_field."}, {"sha": "85e7c51c302d3ad2187b21858d993a1968108cd4", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "patch": "@@ -511,7 +511,7 @@ class Type\n   make_nil_type();\n \n   static Type*\n-  make_call_multiple_result_type(Call_expression*);\n+  make_call_multiple_result_type();\n \n   static Struct_type*\n   make_struct_type(Struct_field_list* fields, Location);"}, {"sha": "52db71046fe6827dbc8474f6903c8365187b6340", "filename": "gcc/go/gofrontend/wb.cc", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fgo%2Fgofrontend%2Fwb.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fgo%2Fgofrontend%2Fwb.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fwb.cc?ref=72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "patch": "@@ -189,19 +189,15 @@ Mark_address_taken::expression(Expression** pexpr)\n class Check_escape : public Traverse\n {\n  public:\n-  Check_escape(Gogo* gogo)\n-    : Traverse(traverse_expressions | traverse_variables),\n-      gogo_(gogo)\n+  Check_escape()\n+    : Traverse(traverse_expressions | traverse_variables)\n   { }\n \n   int\n   expression(Expression**);\n \n   int\n   variable(Named_object*);\n-\n- private:\n-  Gogo* gogo_;\n };\n \n int\n@@ -621,7 +617,7 @@ Gogo::add_write_barriers()\n     {\n       this->propagate_writebarrierrec();\n \n-      Check_escape chk(this);\n+      Check_escape chk;\n       this->traverse(&chk);\n     }\n "}, {"sha": "69898d4ffd8203a1b0d21fee3a0b9c3b2d76294b", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "patch": "@@ -58,14 +58,6 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"graphite.h\"\n \n-/* Assigns to RES the value of the INTEGER_CST T.  */\n-\n-static inline void\n-tree_int_to_gmp (tree t, mpz_t res)\n-{\n-  wi::to_mpz (wi::to_wide (t), res, TYPE_SIGN (TREE_TYPE (t)));\n-}\n-\n /* Return an isl identifier for the polyhedral basic block PBB.  */\n \n static isl_id *"}, {"sha": "27ae8e0fe27e22ec3ddbd0e149e67798e3add829", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "patch": "@@ -405,16 +405,6 @@ ipa_get_poly_ctx_lat (struct ipa_node_params *info, int i)\n   return &plats->ctxlat;\n }\n \n-/* Return the lattice corresponding to the value range of the Ith formal\n-   parameter of the function described by INFO.  */\n-\n-static inline ipcp_vr_lattice *\n-ipa_get_vr_lat (struct ipa_node_params *info, int i)\n-{\n-  struct ipcp_param_lattices *plats = ipa_get_parm_lattices (info, i);\n-  return &plats->m_value_range;\n-}\n-\n /* Return whether LAT is a lattice with a single constant and without an\n    undefined value.  */\n "}, {"sha": "774d1ff3aaa722d088bdde09ad78095704e98f8f", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "patch": "@@ -630,33 +630,6 @@ get_reload_reg (enum op_type type, machine_mode mode, rtx original,\n }\n \n \f\n-\n-/* The page contains code to extract memory address parts.  */\n-\n-/* Wrapper around REGNO_OK_FOR_INDEX_P, to allow pseudos.  */\n-static inline bool\n-ok_for_index_p_nonstrict (rtx reg)\n-{\n-  unsigned regno = REGNO (reg);\n-\n-  return regno >= FIRST_PSEUDO_REGISTER || REGNO_OK_FOR_INDEX_P (regno);\n-}\n-\n-/* A version of regno_ok_for_base_p for use here, when all pseudos\n-   should count as OK.\tArguments as for regno_ok_for_base_p.  */\n-static inline bool\n-ok_for_base_p_nonstrict (rtx reg, machine_mode mode, addr_space_t as,\n-\t\t\t enum rtx_code outer_code, enum rtx_code index_code)\n-{\n-  unsigned regno = REGNO (reg);\n-\n-  if (regno >= FIRST_PSEUDO_REGISTER)\n-    return true;\n-  return ok_for_base_p_1 (regno, mode, as, outer_code, index_code);\n-}\n-\n-\f\n-\n /* The page contains major code to choose the current insn alternative\n    and generate reloads for it.\t */\n "}, {"sha": "2717b40485b93b3dd668b14b2a6ce80a816065ef", "filename": "gcc/tree-chrec.c", "status": "modified", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Ftree-chrec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Ftree-chrec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.c?ref=72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "patch": "@@ -41,53 +41,6 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Extended folder for chrecs.  */\n \n-/* Determines whether CST is not a constant evolution.  */\n-\n-static inline bool\n-is_not_constant_evolution (const_tree cst)\n-{\n-  return (TREE_CODE (cst) == POLYNOMIAL_CHREC);\n-}\n-\n-/* Fold CODE for a polynomial function and a constant.  */\n-\n-static inline tree\n-chrec_fold_poly_cst (enum tree_code code,\n-\t\t     tree type,\n-\t\t     tree poly,\n-\t\t     tree cst)\n-{\n-  gcc_assert (poly);\n-  gcc_assert (cst);\n-  gcc_assert (TREE_CODE (poly) == POLYNOMIAL_CHREC);\n-  gcc_checking_assert (!is_not_constant_evolution (cst));\n-  gcc_checking_assert (useless_type_conversion_p (type, chrec_type (poly)));\n-\n-  switch (code)\n-    {\n-    case PLUS_EXPR:\n-      return build_polynomial_chrec\n-\t(CHREC_VARIABLE (poly),\n-\t chrec_fold_plus (type, CHREC_LEFT (poly), cst),\n-\t CHREC_RIGHT (poly));\n-\n-    case MINUS_EXPR:\n-      return build_polynomial_chrec\n-\t(CHREC_VARIABLE (poly),\n-\t chrec_fold_minus (type, CHREC_LEFT (poly), cst),\n-\t CHREC_RIGHT (poly));\n-\n-    case MULT_EXPR:\n-      return build_polynomial_chrec\n-\t(CHREC_VARIABLE (poly),\n-\t chrec_fold_multiply (type, CHREC_LEFT (poly), cst),\n-\t chrec_fold_multiply (type, CHREC_RIGHT (poly), cst));\n-\n-    default:\n-      return chrec_dont_know;\n-    }\n-}\n-\n /* Fold the addition of two polynomial functions.  */\n \n static inline tree"}, {"sha": "52aa5756c94d2db0c5c8f2d62cf1892c79ed43ef", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "patch": "@@ -1114,19 +1114,6 @@ all_preds_critical_p (basic_block bb)\n   return true;\n }\n \n-/* Returns true if at least one successor in on critical edge.  */\n-static inline bool\n-has_pred_critical_p (basic_block bb)\n-{\n-  edge e;\n-  edge_iterator ei;\n-\n-  FOR_EACH_EDGE (e, ei, bb->preds)\n-    if (EDGE_COUNT (e->src->succs) > 1)\n-      return true;\n-  return false;\n-}\n-\n /* Return true when BB is if-convertible.  This routine does not check\n    basic block's statements and phis.\n "}, {"sha": "a17c774948208c65b59cc416497ad4b0dc25941c", "filename": "gcc/tree-ssa-coalesce.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Ftree-ssa-coalesce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Ftree-ssa-coalesce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-coalesce.c?ref=72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "patch": "@@ -988,22 +988,6 @@ build_ssa_conflict_graph (tree_live_info_p liveinfo)\n   return graph;\n }\n \n-\n-/* Shortcut routine to print messages to file F of the form:\n-   \"STR1 EXPR1 STR2 EXPR2 STR3.\"  */\n-\n-static inline void\n-print_exprs (FILE *f, const char *str1, tree expr1, const char *str2,\n-\t     tree expr2, const char *str3)\n-{\n-  fprintf (f, \"%s\", str1);\n-  print_generic_expr (f, expr1, TDF_SLIM);\n-  fprintf (f, \"%s\", str2);\n-  print_generic_expr (f, expr2, TDF_SLIM);\n-  fprintf (f, \"%s\", str3);\n-}\n-\n-\n /* Print a failure to coalesce a MUST_COALESCE pair X and Y.  */\n \n static inline void"}, {"sha": "d1b0cc0c26f94421d06a1a98049121fddf1eeaae", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "patch": "@@ -825,12 +825,6 @@ bitmap_set_contains_value (bitmap_set_t set, unsigned int value_id)\n   return bitmap_bit_p (&set->values, value_id);\n }\n \n-static inline bool\n-bitmap_set_contains_expr (bitmap_set_t set, const pre_expr expr)\n-{\n-  return bitmap_bit_p (&set->expressions, get_expression_id (expr));\n-}\n-\n /* Return true if two bitmap sets are equal.  */\n \n static bool"}, {"sha": "d2c50344f71fe4a408a2304fb7e379ecc3d9a164", "filename": "gcc/tree-ssa-uninit.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Ftree-ssa-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Ftree-ssa-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.c?ref=72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "patch": "@@ -1586,16 +1586,6 @@ is_superset_of (pred_chain_union preds1, pred_chain_union preds2)\n   return true;\n }\n \n-/* Returns true if TC is AND or OR.  */\n-\n-static inline bool\n-is_and_or_or_p (enum tree_code tc, tree type)\n-{\n-  return (tc == BIT_IOR_EXPR\n-\t  || (tc == BIT_AND_EXPR\n-\t      && (type == 0 || TREE_CODE (type) == BOOLEAN_TYPE)));\n-}\n-\n /* Returns true if X1 is the negate of X2.  */\n \n static inline bool"}, {"sha": "f95437b304004acbd28382eb4140359644dd1617", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72744f65a25d36f9cef92d3889ad3f9cb2d4b81e/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=72744f65a25d36f9cef92d3889ad3f9cb2d4b81e", "patch": "@@ -844,27 +844,6 @@ value_inside_range (tree val, tree min, tree max)\n }\n \n \n-/* Return true if value ranges VR0 and VR1 have a non-empty\n-   intersection.\n-\n-   Benchmark compile/20001226-1.c compilation time after changing this\n-   function.\n-   */\n-\n-static inline bool\n-value_ranges_intersect_p (const value_range *vr0, const value_range *vr1)\n-{\n-  /* The value ranges do not intersect if the maximum of the first range is\n-     less than the minimum of the second range or vice versa.\n-     When those relations are unknown, we can't do any better.  */\n-  if (operand_less_p (vr0->max, vr1->min) != 0)\n-    return false;\n-  if (operand_less_p (vr1->max, vr0->min) != 0)\n-    return false;\n-  return true;\n-}\n-\n-\n /* Return TRUE if *VR includes the value zero.  */\n \n bool\n@@ -886,23 +865,6 @@ range_includes_zero_p (const value_range *vr)\n   return value_inside_range (zero, vr->min, vr->max) != 0;\n }\n \n-/* Return true if *VR is know to only contain nonnegative values.  */\n-\n-static inline bool\n-value_range_nonnegative_p (const value_range *vr)\n-{\n-  /* Testing for VR_ANTI_RANGE is not useful here as any anti-range\n-     which would return a useful value should be encoded as a \n-     VR_RANGE.  */\n-  if (vr->type == VR_RANGE)\n-    {\n-      int result = compare_values (vr->min, integer_zero_node);\n-      return (result == 0 || result == 1);\n-    }\n-\n-  return false;\n-}\n-\n /* If *VR has a value rante that is a single constant value return that,\n    otherwise return NULL_TREE.  */\n "}]}