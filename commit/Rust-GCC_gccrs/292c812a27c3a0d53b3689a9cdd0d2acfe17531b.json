{"sha": "292c812a27c3a0d53b3689a9cdd0d2acfe17531b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkyYzgxMmEyN2MzYTBkNTNiMzY4OWE5Y2RkMGQyYWNmZTE3NTMxYg==", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2020-10-08T09:02:09Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2020-10-28T11:19:47Z"}, "message": "aarch64: Add vstN_lane_bf16 + vstNq_lane_bf16 intrinsics\n\ngcc/ChangeLog\n\n2020-10-19  Andrea Corallo  <andrea.corallo@arm.com>\n\n\t* config/aarch64/arm_neon.h (__ST2_LANE_FUNC, __ST3_LANE_FUNC)\n\t(__ST4_LANE_FUNC): Rename the macro generating the 'q' variants\n\tinto __ST2Q_LANE_FUNC, __ST2Q_LANE_FUNC, __ST2Q_LANE_FUNC so they\n\tall can be undefed at the and of the file.\n\t(vst2_lane_bf16, vst2q_lane_bf16, vst3_lane_bf16, vst3q_lane_bf16)\n\t(vst4_lane_bf16, vst4q_lane_bf16): Add new intrinsics.\n\ngcc/testsuite/ChangeLog\n\n2020-10-19  Andrea Corallo  <andrea.corallo@arm.com>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h\n\t(hbfloat16_t): Define type.\n\t(CHECK_FP): Make it working for bfloat types.\n\t* gcc.target/aarch64/advsimd-intrinsics/bf16_vstN_lane_1.c: New file.\n\t* gcc.target/aarch64/advsimd-intrinsics/bf16_vstN_lane_2.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vst2_lane_bf16_indices_1.c:\n\tLikewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_bf16_indices_1.c:\n\tLikewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vst3_lane_bf16_indices_1.c:\n\tLikewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_bf16_indices_1.c:\n\tLikewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vst4_lane_bf16_indices_1.c:\n\tLikewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_bf16_indices_1.c:\n\tLikewise.", "tree": {"sha": "97a92166749a4b13d092267d158c4ebfba8ee586", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97a92166749a4b13d092267d158c4ebfba8ee586"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/292c812a27c3a0d53b3689a9cdd0d2acfe17531b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/292c812a27c3a0d53b3689a9cdd0d2acfe17531b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/292c812a27c3a0d53b3689a9cdd0d2acfe17531b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/292c812a27c3a0d53b3689a9cdd0d2acfe17531b/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44e570d9fb01682e24ae53e6004f18a3c2a52493", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44e570d9fb01682e24ae53e6004f18a3c2a52493", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44e570d9fb01682e24ae53e6004f18a3c2a52493"}], "stats": {"total": 489, "additions": 440, "deletions": 49}, "files": [{"sha": "95bfa5ebba21b739ee3c84e3971337646f8881d4", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 62, "deletions": 48, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292c812a27c3a0d53b3689a9cdd0d2acfe17531b/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292c812a27c3a0d53b3689a9cdd0d2acfe17531b/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=292c812a27c3a0d53b3689a9cdd0d2acfe17531b", "patch": "@@ -10926,8 +10926,7 @@ __ST2_LANE_FUNC (uint32x2x2_t, uint32x4x2_t, uint32_t, v2si, v4si, si, u32,\n __ST2_LANE_FUNC (uint64x1x2_t, uint64x2x2_t, uint64_t, di, v2di, di, u64,\n \t\t int64x2_t)\n \n-#undef __ST2_LANE_FUNC\n-#define __ST2_LANE_FUNC(intype, ptrtype, mode, ptr_mode, funcsuffix)\t    \\\n+#define __ST2Q_LANE_FUNC(intype, ptrtype, mode, ptr_mode, funcsuffix)\t    \\\n __extension__ extern __inline void\t\t\t\t\t    \\\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__)) \\\n vst2q_lane_ ## funcsuffix (ptrtype *__ptr,\t\t\t\t    \\\n@@ -10939,20 +10938,20 @@ vst2q_lane_ ## funcsuffix (ptrtype *__ptr,\t\t\t\t    \\\n \t\t\t\t    __ptr, __temp.__o, __c);\t\t    \\\n }\n \n-__ST2_LANE_FUNC (float16x8x2_t, float16_t, v8hf, hf, f16)\n-__ST2_LANE_FUNC (float32x4x2_t, float32_t, v4sf, sf, f32)\n-__ST2_LANE_FUNC (float64x2x2_t, float64_t, v2df, df, f64)\n-__ST2_LANE_FUNC (poly8x16x2_t, poly8_t, v16qi, qi, p8)\n-__ST2_LANE_FUNC (poly16x8x2_t, poly16_t, v8hi, hi, p16)\n-__ST2_LANE_FUNC (poly64x2x2_t, poly64_t, v2di, di, p64)\n-__ST2_LANE_FUNC (int8x16x2_t, int8_t, v16qi, qi, s8)\n-__ST2_LANE_FUNC (int16x8x2_t, int16_t, v8hi, hi, s16)\n-__ST2_LANE_FUNC (int32x4x2_t, int32_t, v4si, si, s32)\n-__ST2_LANE_FUNC (int64x2x2_t, int64_t, v2di, di, s64)\n-__ST2_LANE_FUNC (uint8x16x2_t, uint8_t, v16qi, qi, u8)\n-__ST2_LANE_FUNC (uint16x8x2_t, uint16_t, v8hi, hi, u16)\n-__ST2_LANE_FUNC (uint32x4x2_t, uint32_t, v4si, si, u32)\n-__ST2_LANE_FUNC (uint64x2x2_t, uint64_t, v2di, di, u64)\n+__ST2Q_LANE_FUNC (float16x8x2_t, float16_t, v8hf, hf, f16)\n+__ST2Q_LANE_FUNC (float32x4x2_t, float32_t, v4sf, sf, f32)\n+__ST2Q_LANE_FUNC (float64x2x2_t, float64_t, v2df, df, f64)\n+__ST2Q_LANE_FUNC (poly8x16x2_t, poly8_t, v16qi, qi, p8)\n+__ST2Q_LANE_FUNC (poly16x8x2_t, poly16_t, v8hi, hi, p16)\n+__ST2Q_LANE_FUNC (poly64x2x2_t, poly64_t, v2di, di, p64)\n+__ST2Q_LANE_FUNC (int8x16x2_t, int8_t, v16qi, qi, s8)\n+__ST2Q_LANE_FUNC (int16x8x2_t, int16_t, v8hi, hi, s16)\n+__ST2Q_LANE_FUNC (int32x4x2_t, int32_t, v4si, si, s32)\n+__ST2Q_LANE_FUNC (int64x2x2_t, int64_t, v2di, di, s64)\n+__ST2Q_LANE_FUNC (uint8x16x2_t, uint8_t, v16qi, qi, u8)\n+__ST2Q_LANE_FUNC (uint16x8x2_t, uint16_t, v8hi, hi, u16)\n+__ST2Q_LANE_FUNC (uint32x4x2_t, uint32_t, v4si, si, u32)\n+__ST2Q_LANE_FUNC (uint64x2x2_t, uint64_t, v2di, di, u64)\n \n #define __ST3_LANE_FUNC(intype, largetype, ptrtype, mode,\t\t     \\\n \t\t\tqmode, ptr_mode, funcsuffix, signedtype)\t     \\\n@@ -11011,8 +11010,7 @@ __ST3_LANE_FUNC (uint32x2x3_t, uint32x4x3_t, uint32_t, v2si, v4si, si, u32,\n __ST3_LANE_FUNC (uint64x1x3_t, uint64x2x3_t, uint64_t, di, v2di, di, u64,\n \t\t int64x2_t)\n \n-#undef __ST3_LANE_FUNC\n-#define __ST3_LANE_FUNC(intype, ptrtype, mode, ptr_mode, funcsuffix)\t    \\\n+#define __ST3Q_LANE_FUNC(intype, ptrtype, mode, ptr_mode, funcsuffix)\t    \\\n __extension__ extern __inline void\t\t\t\t\t    \\\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__)) \\\n vst3q_lane_ ## funcsuffix (ptrtype *__ptr,\t\t\t\t    \\\n@@ -11024,20 +11022,20 @@ vst3q_lane_ ## funcsuffix (ptrtype *__ptr,\t\t\t\t    \\\n \t\t\t\t    __ptr, __temp.__o, __c);\t\t    \\\n }\n \n-__ST3_LANE_FUNC (float16x8x3_t, float16_t, v8hf, hf, f16)\n-__ST3_LANE_FUNC (float32x4x3_t, float32_t, v4sf, sf, f32)\n-__ST3_LANE_FUNC (float64x2x3_t, float64_t, v2df, df, f64)\n-__ST3_LANE_FUNC (poly8x16x3_t, poly8_t, v16qi, qi, p8)\n-__ST3_LANE_FUNC (poly16x8x3_t, poly16_t, v8hi, hi, p16)\n-__ST3_LANE_FUNC (poly64x2x3_t, poly64_t, v2di, di, p64)\n-__ST3_LANE_FUNC (int8x16x3_t, int8_t, v16qi, qi, s8)\n-__ST3_LANE_FUNC (int16x8x3_t, int16_t, v8hi, hi, s16)\n-__ST3_LANE_FUNC (int32x4x3_t, int32_t, v4si, si, s32)\n-__ST3_LANE_FUNC (int64x2x3_t, int64_t, v2di, di, s64)\n-__ST3_LANE_FUNC (uint8x16x3_t, uint8_t, v16qi, qi, u8)\n-__ST3_LANE_FUNC (uint16x8x3_t, uint16_t, v8hi, hi, u16)\n-__ST3_LANE_FUNC (uint32x4x3_t, uint32_t, v4si, si, u32)\n-__ST3_LANE_FUNC (uint64x2x3_t, uint64_t, v2di, di, u64)\n+__ST3Q_LANE_FUNC (float16x8x3_t, float16_t, v8hf, hf, f16)\n+__ST3Q_LANE_FUNC (float32x4x3_t, float32_t, v4sf, sf, f32)\n+__ST3Q_LANE_FUNC (float64x2x3_t, float64_t, v2df, df, f64)\n+__ST3Q_LANE_FUNC (poly8x16x3_t, poly8_t, v16qi, qi, p8)\n+__ST3Q_LANE_FUNC (poly16x8x3_t, poly16_t, v8hi, hi, p16)\n+__ST3Q_LANE_FUNC (poly64x2x3_t, poly64_t, v2di, di, p64)\n+__ST3Q_LANE_FUNC (int8x16x3_t, int8_t, v16qi, qi, s8)\n+__ST3Q_LANE_FUNC (int16x8x3_t, int16_t, v8hi, hi, s16)\n+__ST3Q_LANE_FUNC (int32x4x3_t, int32_t, v4si, si, s32)\n+__ST3Q_LANE_FUNC (int64x2x3_t, int64_t, v2di, di, s64)\n+__ST3Q_LANE_FUNC (uint8x16x3_t, uint8_t, v16qi, qi, u8)\n+__ST3Q_LANE_FUNC (uint16x8x3_t, uint16_t, v8hi, hi, u16)\n+__ST3Q_LANE_FUNC (uint32x4x3_t, uint32_t, v4si, si, u32)\n+__ST3Q_LANE_FUNC (uint64x2x3_t, uint64_t, v2di, di, u64)\n \n #define __ST4_LANE_FUNC(intype, largetype, ptrtype, mode,\t\t     \\\n \t\t\tqmode, ptr_mode, funcsuffix, signedtype)\t     \\\n@@ -11101,8 +11099,7 @@ __ST4_LANE_FUNC (uint32x2x4_t, uint32x4x4_t, uint32_t, v2si, v4si, si, u32,\n __ST4_LANE_FUNC (uint64x1x4_t, uint64x2x4_t, uint64_t, di, v2di, di, u64,\n \t\t int64x2_t)\n \n-#undef __ST4_LANE_FUNC\n-#define __ST4_LANE_FUNC(intype, ptrtype, mode, ptr_mode, funcsuffix)\t    \\\n+#define __ST4Q_LANE_FUNC(intype, ptrtype, mode, ptr_mode, funcsuffix)\t    \\\n __extension__ extern __inline void\t\t\t\t\t    \\\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__)) \\\n vst4q_lane_ ## funcsuffix (ptrtype *__ptr,\t\t\t\t    \\\n@@ -11114,20 +11111,20 @@ vst4q_lane_ ## funcsuffix (ptrtype *__ptr,\t\t\t\t    \\\n \t\t\t\t    __ptr, __temp.__o, __c);\t\t    \\\n }\n \n-__ST4_LANE_FUNC (float16x8x4_t, float16_t, v8hf, hf, f16)\n-__ST4_LANE_FUNC (float32x4x4_t, float32_t, v4sf, sf, f32)\n-__ST4_LANE_FUNC (float64x2x4_t, float64_t, v2df, df, f64)\n-__ST4_LANE_FUNC (poly8x16x4_t, poly8_t, v16qi, qi, p8)\n-__ST4_LANE_FUNC (poly16x8x4_t, poly16_t, v8hi, hi, p16)\n-__ST4_LANE_FUNC (poly64x2x4_t, poly64_t, v2di, di, p64)\n-__ST4_LANE_FUNC (int8x16x4_t, int8_t, v16qi, qi, s8)\n-__ST4_LANE_FUNC (int16x8x4_t, int16_t, v8hi, hi, s16)\n-__ST4_LANE_FUNC (int32x4x4_t, int32_t, v4si, si, s32)\n-__ST4_LANE_FUNC (int64x2x4_t, int64_t, v2di, di, s64)\n-__ST4_LANE_FUNC (uint8x16x4_t, uint8_t, v16qi, qi, u8)\n-__ST4_LANE_FUNC (uint16x8x4_t, uint16_t, v8hi, hi, u16)\n-__ST4_LANE_FUNC (uint32x4x4_t, uint32_t, v4si, si, u32)\n-__ST4_LANE_FUNC (uint64x2x4_t, uint64_t, v2di, di, u64)\n+__ST4Q_LANE_FUNC (float16x8x4_t, float16_t, v8hf, hf, f16)\n+__ST4Q_LANE_FUNC (float32x4x4_t, float32_t, v4sf, sf, f32)\n+__ST4Q_LANE_FUNC (float64x2x4_t, float64_t, v2df, df, f64)\n+__ST4Q_LANE_FUNC (poly8x16x4_t, poly8_t, v16qi, qi, p8)\n+__ST4Q_LANE_FUNC (poly16x8x4_t, poly16_t, v8hi, hi, p16)\n+__ST4Q_LANE_FUNC (poly64x2x4_t, poly64_t, v2di, di, p64)\n+__ST4Q_LANE_FUNC (int8x16x4_t, int8_t, v16qi, qi, s8)\n+__ST4Q_LANE_FUNC (int16x8x4_t, int16_t, v8hi, hi, s16)\n+__ST4Q_LANE_FUNC (int32x4x4_t, int32_t, v4si, si, s32)\n+__ST4Q_LANE_FUNC (int64x2x4_t, int64_t, v2di, di, s64)\n+__ST4Q_LANE_FUNC (uint8x16x4_t, uint8_t, v16qi, qi, u8)\n+__ST4Q_LANE_FUNC (uint16x8x4_t, uint16_t, v8hi, hi, u16)\n+__ST4Q_LANE_FUNC (uint32x4x4_t, uint32_t, v4si, si, u32)\n+__ST4Q_LANE_FUNC (uint64x2x4_t, uint64_t, v2di, di, u64)\n \n __extension__ extern __inline int64_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n@@ -35749,6 +35746,17 @@ __LD3Q_LANE_FUNC (bfloat16x8x3_t, bfloat16x8_t, bfloat16_t, v8bf, bf, bf16)\n __LD4_LANE_FUNC (bfloat16x4x4_t, bfloat16x4_t, bfloat16x8x4_t, bfloat16_t, v4bf,\n \t\t v8bf, bf, bf16, bfloat16x8_t)\n __LD4Q_LANE_FUNC (bfloat16x8x4_t, bfloat16x8_t, bfloat16_t, v8bf, bf, bf16)\n+\n+__ST2_LANE_FUNC (bfloat16x4x2_t, bfloat16x8x2_t, bfloat16_t, v4bf, v8bf, bf,\n+\t\t bf16, bfloat16x8_t)\n+__ST2Q_LANE_FUNC (bfloat16x8x2_t, bfloat16_t, v8bf, bf, bf16)\n+__ST3_LANE_FUNC (bfloat16x4x3_t, bfloat16x8x3_t, bfloat16_t, v4bf, v8bf, bf,\n+\t\t bf16, bfloat16x8_t)\n+__ST3Q_LANE_FUNC (bfloat16x8x3_t, bfloat16_t, v8bf, bf, bf16)\n+__ST4_LANE_FUNC (bfloat16x4x4_t, bfloat16x8x4_t, bfloat16_t, v4bf, v8bf, bf,\n+\t\t bf16, bfloat16x8_t)\n+__ST4Q_LANE_FUNC (bfloat16x8x4_t, bfloat16_t, v8bf, bf, bf16)\n+\n #pragma GCC pop_options\n \n /* AdvSIMD 8-bit Integer Matrix Multiply (I8MM) intrinsics.  */\n@@ -35968,5 +35976,11 @@ vaddq_p128 (poly128_t __a, poly128_t __b)\n #undef __LD3Q_LANE_FUNC\n #undef __LD4_LANE_FUNC\n #undef __LD4Q_LANE_FUNC\n+#undef __ST2_LANE_FUNC\n+#undef __ST2Q_LANE_FUNC\n+#undef __ST3_LANE_FUNC\n+#undef __ST3Q_LANE_FUNC\n+#undef __ST4_LANE_FUNC\n+#undef __ST4Q_LANE_FUNC\n \n #endif"}, {"sha": "61fe7e759dcb8cfa77ee35a3c1b5baa055665053", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292c812a27c3a0d53b3689a9cdd0d2acfe17531b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292c812a27c3a0d53b3689a9cdd0d2acfe17531b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h?ref=292c812a27c3a0d53b3689a9cdd0d2acfe17531b", "patch": "@@ -11,6 +11,8 @@ typedef uint16_t hfloat16_t;\n typedef uint32_t hfloat32_t;\n typedef uint64_t hfloat64_t;\n \n+typedef uint16_t hbfloat16_t;\n+\n extern void abort(void);\n extern void *memset(void *, int, size_t);\n extern void *memcpy(void *, const void *, size_t);\n@@ -107,7 +109,7 @@ extern size_t strlen(const char *);\n       {\t\t\t\t\t\t\t\t\t\\\n \tunion fp_operand {\t\t\t\t\t\t\\\n \t  uint##W##_t i;\t\t\t\t\t\t\\\n-\t  float##W##_t f;\t\t\t\t\t\t\\\n+\t  T##W##_t f;\t\t\t\t\t\t\t\\\n \t} tmp_res, tmp_exp;\t\t\t\t\t\t\\\n \ttmp_res.f = VECT_VAR(result, T, W, N)[i];\t\t\t\\\n \ttmp_exp.i = VECT_VAR(EXPECTED, h##T, W, N)[i];\t\t\t\\"}, {"sha": "2c70bb9de9c518afa101d2271a30d13742905b13", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/bf16_vstN_lane_1.c", "status": "added", "additions": 227, "deletions": 0, "changes": 227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292c812a27c3a0d53b3689a9cdd0d2acfe17531b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbf16_vstN_lane_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292c812a27c3a0d53b3689a9cdd0d2acfe17531b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbf16_vstN_lane_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbf16_vstN_lane_1.c?ref=292c812a27c3a0d53b3689a9cdd0d2acfe17531b", "patch": "@@ -0,0 +1,227 @@\n+/* { dg-do run { target { aarch64*-*-* } } } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon }  */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results for vst2, chunk 0.  */\n+VECT_VAR_DECL(expected_st2_0,hbfloat,16,4) [] = { 0xABAB, 0x3210, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_st2_0,hbfloat,16,8) [] = { 0xABAB, 0x3210, 0x0, 0x0,\n+\t\t\t\t\t\t  0x0, 0x0, 0x0, 0x0 };\n+\n+/* Expected results for vst2, chunk 1.  */\n+VECT_VAR_DECL(expected_st2_1,hbfloat,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_st2_1,hbfloat,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t  0x0, 0x0, 0x0, 0x0 };\n+\n+/* Expected results for vst3, chunk 0.  */\n+VECT_VAR_DECL(expected_st3_0,hbfloat,16,4) [] = { 0xABAB, 0x3210, 0xCAFE, 0x0 };\n+VECT_VAR_DECL(expected_st3_0,hbfloat,16,8) [] = { 0xABAB, 0x3210, 0xCAFE, 0x0,\n+\t\t\t\t\t\t  0x0, 0x0, 0x0, 0x0 };\n+\n+/* Expected results for vst3, chunk 1.  */\n+VECT_VAR_DECL(expected_st3_1,hbfloat,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_st3_1,hbfloat,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t 0x0, 0x0, 0x0, 0x0 };\n+\n+/* Expected results for vst3, chunk 2.  */\n+VECT_VAR_DECL(expected_st3_2,hbfloat,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_st3_2,hbfloat,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t  0x0, 0x0, 0x0, 0x0 };\n+\n+/* Expected results for vst4, chunk 0.  */\n+VECT_VAR_DECL(expected_st4_0,hbfloat,16,4) [] =\n+  { 0xABAB, 0x3210, 0xCAFE, 0x1234 };\n+VECT_VAR_DECL(expected_st4_0,hbfloat,16,8) [] =\n+  { 0xABAB, 0x3210, 0xCAFE, 0x1234, 0x0, 0x0, 0x0, 0x0 };\n+\n+/* Expected results for vst4, chunk 1.  */\n+VECT_VAR_DECL(expected_st4_1,hbfloat,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_st4_1,hbfloat,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t  0x0, 0x0, 0x0, 0x0 };\n+\n+/* Expected results for vst4, chunk 2.  */\n+VECT_VAR_DECL(expected_st4_2,hbfloat,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_st4_2,hbfloat,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t          0x0, 0x0, 0x0, 0x0 };\n+\n+/* Expected results for vst4, chunk 3.  */\n+VECT_VAR_DECL(expected_st4_3,hbfloat,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_st4_3,hbfloat,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t  0x0, 0x0, 0x0, 0x0 };\n+\n+typedef union\n+{\n+  bfloat16_t bf16;\n+  uint16_t u16;\n+} bfloat16_u_t;\n+\n+static bfloat16_t result_bfloat16x4[4];\n+static bfloat16_t result_bfloat16x8[8];\n+\n+void exec_vstX_lane (void)\n+{\n+  bfloat16_u_t bfloat16_data[4];\n+  bfloat16_data[0].u16 = 0xABAB;\n+  bfloat16_data[1].u16 = 0x3210;\n+  bfloat16_data[2].u16 = 0xCAFE;\n+  bfloat16_data[3].u16 = 0x1234;\n+\n+  bfloat16_t buffer_vld2_lane_bfloat16x2 [2] =\n+    { bfloat16_data[0].bf16,\n+      bfloat16_data[1].bf16 };\n+  bfloat16_t buffer_vld3_lane_bfloat16x3 [3] =\n+    { bfloat16_data[0].bf16,\n+      bfloat16_data[1].bf16,\n+      bfloat16_data[2].bf16 };\n+  bfloat16_t buffer_vld4_lane_bfloat16x4 [4] =\n+    { bfloat16_data[0].bf16,\n+      bfloat16_data[1].bf16,\n+      bfloat16_data[2].bf16,\n+      bfloat16_data[3].bf16 };\n+\n+  /* In this case, input variables are arrays of vectors.  */\n+#define DECL_VSTX_LANE(T1, W, N, X)\t\t\t\t\t\\\n+  VECT_ARRAY_TYPE(T1, W, N, X) VECT_ARRAY_VAR(vector, T1, W, N, X);\t\\\n+  VECT_ARRAY_TYPE(T1, W, N, X) VECT_ARRAY_VAR(vector_src, T1, W, N, X);\t\\\n+  VECT_VAR_DECL(result_bis_##X, T1, W, N)[X * N]\n+\n+  /* We need to use a temporary result buffer (result_bis), because\n+     the one used for other tests is not large enough. A subset of the\n+     result data is moved from result_bis to result, and it is this\n+     subset which is used to check the actual behavior. The next\n+     macro enables to move another chunk of data from result_bis to\n+     result.  */\n+  /* We also use another extra input buffer (buffer_src), which we\n+     fill with 0xAA, and which it used to load a vector from which we\n+     read a given lane.  */\n+#define TEST_VSTX_LANE(Q, T1, T2, W, N, X, L)\t\t\t\t \\\n+  memset (VECT_VAR(buffer_src, T1, W, N), 0xAA,\t\t\t\t \\\n+\t  sizeof(VECT_VAR(buffer_src, T1, W, N)));\t\t\t \\\n+  memset (VECT_VAR(result_bis_##X, T1, W, N), 0,\t\t\t \\\n+\t  sizeof(VECT_VAR(result_bis_##X, T1, W, N)));\t\t\t \\\n+\t\t\t\t\t\t\t\t\t \\\n+  VECT_ARRAY_VAR(vector_src, T1, W, N, X) =\t\t\t\t \\\n+    vld##X##Q##_##T2##W(VECT_VAR(buffer_src, T1, W, N));\t\t \\\n+\t\t\t\t\t\t\t\t\t \\\n+  VECT_ARRAY_VAR(vector, T1, W, N, X) =\t\t\t\t\t \\\n+    /* Use dedicated init buffer, of size X.  */\t\t\t \\\n+    vld##X##Q##_lane_##T2##W(VECT_VAR(buffer_vld##X##_lane, T1, W, X),\t \\\n+\t\t\t     VECT_ARRAY_VAR(vector_src, T1, W, N, X),\t \\\n+\t\t\t     L);\t\t\t\t\t \\\n+  vst##X##Q##_lane_##T2##W(VECT_VAR(result_bis_##X, T1, W, N),\t\t \\\n+\t\t\t   VECT_ARRAY_VAR(vector, T1, W, N, X),\t\t \\\n+\t\t\t   L);\t\t\t\t\t\t \\\n+  memcpy(VECT_VAR(result, T1, W, N), VECT_VAR(result_bis_##X, T1, W, N), \\\n+\t sizeof(VECT_VAR(result, T1, W, N)));\n+\n+  /* Overwrite \"result\" with the contents of \"result_bis\"[Y].  */\n+#define TEST_EXTRA_CHUNK(T1, W, N, X, Y)\t\t\\\n+  memcpy(VECT_VAR(result, T1, W, N),\t\t\t\\\n+\t &(VECT_VAR(result_bis_##X, T1, W, N)[Y*N]),\t\\\n+\t sizeof(VECT_VAR(result, T1, W, N)));\n+\n+#define DUMMY_ARRAY(V, T, W, N, L) VECT_VAR_DECL(V,T,W,N)[N*L]\n+\n+  DECL_VSTX_LANE(bfloat, 16, 4, 2);\n+  DECL_VSTX_LANE(bfloat, 16, 8, 2);\n+  DECL_VSTX_LANE(bfloat, 16, 4, 3);\n+  DECL_VSTX_LANE(bfloat, 16, 8, 3);\n+  DECL_VSTX_LANE(bfloat, 16, 4, 4);\n+  DECL_VSTX_LANE(bfloat, 16, 8, 4);\n+\n+  DUMMY_ARRAY(buffer_src, bfloat, 16, 4, 4);\n+  DUMMY_ARRAY(buffer_src, bfloat, 16, 8, 4);\n+\n+  /* Check vst2_lane/vst2q_lane.  */\n+  clean_results ();\n+  TEST_VSTX_LANE(, bfloat, bf, 16, 4, 2, 2);\n+  TEST_VSTX_LANE(q, bfloat, bf, 16, 8, 2, 6);\n+\n+#undef CMT\n+#define CMT \" (chunk 0)\"\n+#undef TEST_MSG\n+#define TEST_MSG \"VST2_LANE/VST2Q_LANE\"\n+  CHECK_FP(TEST_MSG, bfloat, 16, 4, PRIx16, expected_st2_0, CMT);\n+  CHECK_FP(TEST_MSG, bfloat, 16, 8, PRIx16, expected_st2_0, CMT);\n+  TEST_EXTRA_CHUNK(bfloat, 16, 4, 2, 1);\n+  TEST_EXTRA_CHUNK(bfloat, 16, 8, 2, 1);\n+\n+#undef CMT\n+#define CMT \" (chunk 1)\"\n+  CHECK_FP(TEST_MSG, bfloat, 16, 4, PRIx16, expected_st2_1, CMT);\n+  CHECK_FP(TEST_MSG, bfloat, 16, 8, PRIx16, expected_st2_1, CMT);\n+\n+  /* Check vst3_lane/vst3q_lane.  */\n+  clean_results ();\n+#undef TEST_MSG\n+#define TEST_MSG \"VST3_LANE/VST3Q_LANE\"\n+  TEST_VSTX_LANE(, bfloat, bf, 16, 4, 3, 2);\n+  TEST_VSTX_LANE(q, bfloat, bf, 16, 8, 3, 6);\n+\n+#undef CMT\n+#define CMT \" (chunk 0)\"\n+  CHECK_FP(TEST_MSG, bfloat, 16, 4, PRIx16, expected_st3_0, CMT);\n+  CHECK_FP(TEST_MSG, bfloat, 16, 8, PRIx16, expected_st3_0, CMT);\n+\n+  TEST_EXTRA_CHUNK(bfloat, 16, 4, 3, 1);\n+  TEST_EXTRA_CHUNK(bfloat, 16, 8, 3, 1);\n+\n+\n+#undef CMT\n+#define CMT \" (chunk 1)\"\n+  CHECK_FP(TEST_MSG, bfloat, 16, 4, PRIx16, expected_st3_1, CMT);\n+  CHECK_FP(TEST_MSG, bfloat, 16, 8, PRIx16, expected_st3_1, CMT);\n+\n+  TEST_EXTRA_CHUNK(bfloat, 16, 4, 3, 2);\n+  TEST_EXTRA_CHUNK(bfloat, 16, 8, 3, 2);\n+\n+#undef CMT\n+#define CMT \" (chunk 2)\"\n+  CHECK_FP(TEST_MSG, bfloat, 16, 4, PRIx16, expected_st3_2, CMT);\n+  CHECK_FP(TEST_MSG, bfloat, 16, 8, PRIx16, expected_st3_2, CMT);\n+\n+  /* Check vst4_lane/vst4q_lane.  */\n+  clean_results ();\n+#undef TEST_MSG\n+#define TEST_MSG \"VST4_LANE/VST4Q_LANE\"\n+  TEST_VSTX_LANE(, bfloat, bf, 16, 4, 4, 2);\n+  TEST_VSTX_LANE(q, bfloat, bf, 16, 8, 4, 6);\n+\n+#undef CMT\n+#define CMT \" (chunk 0)\"\n+  CHECK_FP(TEST_MSG, bfloat, 16, 4, PRIx16, expected_st4_0, CMT);\n+  CHECK_FP(TEST_MSG, bfloat, 16, 8, PRIx16, expected_st4_0, CMT);\n+\n+  TEST_EXTRA_CHUNK(bfloat, 16, 4, 4, 1);\n+  TEST_EXTRA_CHUNK(bfloat, 16, 8, 4, 1);\n+\n+#undef CMT\n+#define CMT \" (chunk 1)\"\n+  CHECK_FP(TEST_MSG, bfloat, 16, 4, PRIx16, expected_st4_1, CMT);\n+  CHECK_FP(TEST_MSG, bfloat, 16, 8, PRIx16, expected_st4_1, CMT);\n+\n+  TEST_EXTRA_CHUNK(bfloat, 16, 4, 4, 2);\n+  TEST_EXTRA_CHUNK(bfloat, 16, 8, 4, 2);\n+\n+#undef CMT\n+#define CMT \" (chunk 2)\"\n+  CHECK_FP(TEST_MSG, bfloat, 16, 4, PRIx16, expected_st4_2, CMT);\n+  CHECK_FP(TEST_MSG, bfloat, 16, 8, PRIx16, expected_st4_2, CMT);\n+\n+  TEST_EXTRA_CHUNK(bfloat, 16, 4, 4, 3);\n+  TEST_EXTRA_CHUNK(bfloat, 16, 8, 4, 3);\n+\n+#undef CMT\n+#define CMT \" (chunk 3)\"\n+  CHECK_FP(TEST_MSG, bfloat, 16, 4, PRIx16, expected_st4_3, CMT);\n+  CHECK_FP(TEST_MSG, bfloat, 16, 8, PRIx16, expected_st4_3, CMT);\n+}\n+\n+int main (void)\n+{\n+  exec_vstX_lane ();\n+  return 0;\n+}"}, {"sha": "f70c34dbd833f01c36d1404887683730ed1f6643", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/bf16_vstN_lane_2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292c812a27c3a0d53b3689a9cdd0d2acfe17531b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbf16_vstN_lane_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292c812a27c3a0d53b3689a9cdd0d2acfe17531b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbf16_vstN_lane_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbf16_vstN_lane_2.c?ref=292c812a27c3a0d53b3689a9cdd0d2acfe17531b", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do assemble { target { aarch64*-*-* } } } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon }  */\n+/* { dg-additional-options \"-O2  --save-temps\" } */\n+\n+#include <arm_neon.h>\n+\n+void\n+test_vst2_lane_bf16 (bfloat16_t *ptr, bfloat16x4x2_t b)\n+{\n+  vst2_lane_bf16 (ptr, b, 2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"st2\\\\t{v2.h - v3.h}\\\\\\[2\\\\\\], \\\\\\[x0\\\\\\]\" 1 } } */\n+\n+void\n+test_vst2q_lane_bf16 (bfloat16_t *ptr, bfloat16x8x2_t b)\n+{\n+  vst2q_lane_bf16 (ptr, b, 2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"st2\\\\t{v0.h - v1.h}\\\\\\[2\\\\\\], \\\\\\[x0\\\\\\]\" 1 } } */\n+\n+void\n+test_vst3_lane_bf16 (bfloat16_t *ptr, bfloat16x4x3_t b)\n+{\n+  vst3_lane_bf16 (ptr, b, 2);\n+}\n+\n+void\n+test_vst3q_lane_bf16 (bfloat16_t *ptr, bfloat16x8x3_t b)\n+{\n+  vst3q_lane_bf16 (ptr, b, 2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"st3\\\\t{v4.h - v6.h}\\\\\\[2\\\\\\], \\\\\\[x0\\\\\\]\" 2 } } */\n+\n+void\n+test_vst4_lane_bf16 (bfloat16_t *ptr, bfloat16x4x4_t b)\n+{\n+  vst4_lane_bf16 (ptr, b, 2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"st4\\\\t{v4.h - v7.h}\\\\\\[2\\\\\\], \\\\\\[x0\\\\\\]\" 1 } } */\n+\n+void\n+test_vst4q_lane_bf16 (bfloat16_t *ptr, bfloat16x8x4_t b)\n+{\n+  vst4q_lane_bf16 (ptr, b, 2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"st4\\\\t{v0.h - v3.h}\\\\\\[2\\\\\\], \\\\\\[x0\\\\\\]\" 1 } } */"}, {"sha": "4579217dbf2ba479e2f0a01784084416c65227cd", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst2_lane_bf16_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292c812a27c3a0d53b3689a9cdd0d2acfe17531b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_bf16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292c812a27c3a0d53b3689a9cdd0d2acfe17531b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_bf16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_bf16_indices_1.c?ref=292c812a27c3a0d53b3689a9cdd0d2acfe17531b", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { aarch64*-*-* } } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon }  */\n+\n+#include <arm_neon.h>\n+\n+void\n+f_vst2_lane_bf16 (bfloat16_t * p, bfloat16x4x2_t v)\n+{\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { target *-*-* } 0 } */\n+  vst2_lane_bf16 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { target *-*-* } 0 } */\n+  vst2_lane_bf16 (p, v, -1);\n+  return;\n+}"}, {"sha": "29b72eae29172cc32f9162398da42c2a3b212d19", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_bf16_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292c812a27c3a0d53b3689a9cdd0d2acfe17531b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_bf16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292c812a27c3a0d53b3689a9cdd0d2acfe17531b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_bf16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_bf16_indices_1.c?ref=292c812a27c3a0d53b3689a9cdd0d2acfe17531b", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { aarch64*-*-* } } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon }  */\n+\n+#include <arm_neon.h>\n+\n+void\n+f_vst2q_lane_bf16 (bfloat16_t * p, bfloat16x8x2_t v)\n+{\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { target *-*-* } 0 } */\n+  vst2q_lane_bf16 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { target *-*-* } 0 } */\n+  vst2q_lane_bf16 (p, v, -1);\n+  return;\n+}"}, {"sha": "ee0117f813aa15288d62c412720204b4629b7bcb", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst3_lane_bf16_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292c812a27c3a0d53b3689a9cdd0d2acfe17531b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_bf16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292c812a27c3a0d53b3689a9cdd0d2acfe17531b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_bf16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_bf16_indices_1.c?ref=292c812a27c3a0d53b3689a9cdd0d2acfe17531b", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { aarch64*-*-* } } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon }  */\n+\n+#include <arm_neon.h>\n+\n+void\n+f_vst3_lane_bf16 (bfloat16_t * p, bfloat16x4x3_t v)\n+{\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { target *-*-* } 0 } */\n+  vst3_lane_bf16 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { target *-*-* } 0 } */\n+  vst3_lane_bf16 (p, v, -1);\n+  return;\n+}"}, {"sha": "ae13a7f7f8dfcdfa041c89006c3964bb40361207", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_bf16_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292c812a27c3a0d53b3689a9cdd0d2acfe17531b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_bf16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292c812a27c3a0d53b3689a9cdd0d2acfe17531b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_bf16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_bf16_indices_1.c?ref=292c812a27c3a0d53b3689a9cdd0d2acfe17531b", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { aarch64*-*-* } } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon }  */\n+\n+#include <arm_neon.h>\n+\n+void\n+f_vst3q_lane_bf16 (bfloat16_t * p, bfloat16x8x3_t v)\n+{\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { target *-*-* } 0 } */\n+  vst3q_lane_bf16 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { target *-*-* } 0 } */\n+  vst3q_lane_bf16 (p, v, -1);\n+  return;\n+}"}, {"sha": "541bd311d53e219d20b29ff7e461b926d8ad67e5", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst4_lane_bf16_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292c812a27c3a0d53b3689a9cdd0d2acfe17531b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_bf16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292c812a27c3a0d53b3689a9cdd0d2acfe17531b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_bf16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_bf16_indices_1.c?ref=292c812a27c3a0d53b3689a9cdd0d2acfe17531b", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { aarch64*-*-* } } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon }  */\n+\n+#include <arm_neon.h>\n+\n+void\n+f_vst4_lane_bf16 (bfloat16_t * p, bfloat16x4x4_t v)\n+{\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { target *-*-* } 0 } */\n+  vst4_lane_bf16 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { target *-*-* } 0 } */\n+  vst4_lane_bf16 (p, v, -1);\n+  return;\n+}"}, {"sha": "f3c42db34ec24e202628a26c74c277499d14afbf", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_bf16_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292c812a27c3a0d53b3689a9cdd0d2acfe17531b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_bf16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292c812a27c3a0d53b3689a9cdd0d2acfe17531b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_bf16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_bf16_indices_1.c?ref=292c812a27c3a0d53b3689a9cdd0d2acfe17531b", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { aarch64*-*-* } } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon }  */\n+\n+#include <arm_neon.h>\n+\n+void\n+f_vst4q_lane_bf16 (bfloat16_t * p, bfloat16x8x4_t v)\n+{\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { target *-*-* } 0 } */\n+  vst4q_lane_bf16 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { target *-*-* } 0 } */\n+  vst4q_lane_bf16 (p, v, -1);\n+  return;\n+}"}]}