{"sha": "895dd027d5dda51a95d242aec8a49a6dfa5db58d", "node_id": "C_kwDOANBUbNoAKDg5NWRkMDI3ZDVkZGE1MWE5NWQyNDJhZWM4YTQ5YTZkZmE1ZGI1OGQ", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-10-05T19:51:30Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-10-07T21:18:16Z"}, "message": "c++: fixes for derived-to-base reference binding [PR107085]\n\nThis PR reports that\n\n  struct Base {};\n  struct Derived : Base {};\n  static_assert(__reference_constructs_from_temporary(Base const&, Derived));\n\ndoesn't pass, which it should: it's just like\n\n  const Base& b(Derived{});\n\nwhere we bind 'b' to the Base subobject of a temporary object of type\nDerived.  The ck_base conversion didn't have ->need_temporary_p set because\nwe didn't need to create a temporary object just for the base, but the whole\nobject is a temporary so we're still binding to a temporary.  Since the\nBase subobject is an xvalue, a new function is introduced.\n\n\tPR c++/107085\n\ngcc/cp/ChangeLog:\n\n\t* call.cc (conv_binds_ref_to_temporary): New.\n\t(ref_conv_binds_directly): Rename to...\n\t(ref_conv_binds_to_temporary): ...this.  Use\n\tconv_binds_ref_to_temporary.\n\t* cp-tree.h (ref_conv_binds_directly): Rename to...\n\t(ref_conv_binds_to_temporary): ...this.\n\t* method.cc (ref_xes_from_temporary): Use ref_conv_binds_to_temporary.\n\t* parser.cc (warn_for_range_copy): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/ext/reference_constructs_from_temporary1.C: Adjust expected\n\tresult.\n\t* g++.dg/ext/reference_converts_from_temporary1.C: Likewise.\n\t* g++.dg/cpp0x/elision4.C: New test.", "tree": {"sha": "8dd6b92061555471a8c532e2f62a2d03bd17acf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8dd6b92061555471a8c532e2f62a2d03bd17acf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/895dd027d5dda51a95d242aec8a49a6dfa5db58d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/895dd027d5dda51a95d242aec8a49a6dfa5db58d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/895dd027d5dda51a95d242aec8a49a6dfa5db58d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/895dd027d5dda51a95d242aec8a49a6dfa5db58d/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f30e9fd33e56a5a721346ea6140722e1b193db42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f30e9fd33e56a5a721346ea6140722e1b193db42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f30e9fd33e56a5a721346ea6140722e1b193db42"}], "stats": {"total": 72, "additions": 60, "deletions": 12}, "files": [{"sha": "7771d80ff316ab06714bb4cab0155574166b1c6c", "filename": "gcc/cp/call.cc", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/895dd027d5dda51a95d242aec8a49a6dfa5db58d/gcc%2Fcp%2Fcall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/895dd027d5dda51a95d242aec8a49a6dfa5db58d/gcc%2Fcp%2Fcall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.cc?ref=895dd027d5dda51a95d242aec8a49a6dfa5db58d", "patch": "@@ -9210,15 +9210,47 @@ conv_binds_ref_to_prvalue (conversion *c)\n   return conv_is_prvalue (next_conversion (c));\n }\n \n-/* Return tristate::TS_TRUE if converting EXPR to a reference type TYPE does\n-   not involve creating a temporary.  Return tristate::TS_FALSE if converting\n-   EXPR to a reference type TYPE binds the reference to a temporary.  If the\n-   conversion is invalid or bad, return tristate::TS_UNKNOWN.  DIRECT_INIT_P\n+/* True iff C is a conversion that binds a reference to a temporary.\n+   This is a superset of conv_binds_ref_to_prvalue: here we're also\n+   interested in xvalues.  */\n+\n+static bool\n+conv_binds_ref_to_temporary (conversion *c)\n+{\n+  if (conv_binds_ref_to_prvalue (c))\n+    return true;\n+  if (c->kind != ck_ref_bind)\n+    return false;\n+  c = next_conversion (c);\n+  /* This is the case for\n+       struct Base {};\n+       struct Derived : Base {};\n+       const Base& b(Derived{});\n+     where we bind 'b' to the Base subobject of a temporary object of type\n+     Derived.  The subobject is an xvalue; the whole object is a prvalue.  */\n+  if (c->kind != ck_base)\n+    return false;\n+  c = next_conversion (c);\n+  if (c->kind == ck_identity && c->u.expr)\n+    {\n+      tree expr = c->u.expr;\n+      while (handled_component_p (expr))\n+\texpr = TREE_OPERAND (expr, 0);\n+      if (TREE_CODE (expr) == TARGET_EXPR)\n+\treturn true;\n+    }\n+  return false;\n+}\n+\n+/* Return tristate::TS_TRUE if converting EXPR to a reference type TYPE binds\n+   the reference to a temporary.  Return tristate::TS_FALSE if converting\n+   EXPR to a reference type TYPE doesn't bind the reference to a temporary.  If\n+   the conversion is invalid or bad, return tristate::TS_UNKNOWN.  DIRECT_INIT_P\n    says whether the conversion should be done in direct- or copy-initialization\n    context.  */\n \n tristate\n-ref_conv_binds_directly (tree type, tree expr, bool direct_init_p /*= false*/)\n+ref_conv_binds_to_temporary (tree type, tree expr, bool direct_init_p/*=false*/)\n {\n   gcc_assert (TYPE_REF_P (type));\n \n@@ -9230,7 +9262,7 @@ ref_conv_binds_directly (tree type, tree expr, bool direct_init_p /*= false*/)\n \t\t\t\t\t  /*c_cast_p=*/false, flags, tf_none);\n   tristate ret (tristate::TS_UNKNOWN);\n   if (conv && !conv->bad_p)\n-    ret = tristate (!conv_binds_ref_to_prvalue (conv));\n+    ret = tristate (conv_binds_ref_to_temporary (conv));\n \n   /* Free all the conversions we allocated.  */\n   obstack_free (&conversion_obstack, p);"}, {"sha": "469eb2fdb251798ebfb7a81b368eb58c2b5247ce", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/895dd027d5dda51a95d242aec8a49a6dfa5db58d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/895dd027d5dda51a95d242aec8a49a6dfa5db58d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=895dd027d5dda51a95d242aec8a49a6dfa5db58d", "patch": "@@ -6534,7 +6534,7 @@ extern bool sufficient_parms_p\t\t\t(const_tree);\n extern tree type_decays_to\t\t\t(tree);\n extern tree extract_call_expr\t\t\t(tree);\n extern tree build_trivial_dtor_call\t\t(tree, bool = false);\n-extern tristate ref_conv_binds_directly\t\t(tree, tree, bool = false);\n+extern tristate ref_conv_binds_to_temporary\t(tree, tree, bool = false);\n extern tree build_user_type_conversion\t\t(tree, tree, int,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree build_new_function_call\t\t(tree, vec<tree, va_gc> **,"}, {"sha": "622e1b9802e38ecac828540d5b74b753ab41a36b", "filename": "gcc/cp/method.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/895dd027d5dda51a95d242aec8a49a6dfa5db58d/gcc%2Fcp%2Fmethod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/895dd027d5dda51a95d242aec8a49a6dfa5db58d/gcc%2Fcp%2Fmethod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.cc?ref=895dd027d5dda51a95d242aec8a49a6dfa5db58d", "patch": "@@ -2233,7 +2233,7 @@ ref_xes_from_temporary (tree to, tree from, bool direct_init_p)\n   tree val = build_stub_object (from);\n   if (!TYPE_REF_P (from) && TREE_CODE (from) != FUNCTION_TYPE)\n     val = CLASS_TYPE_P (from) ? force_rvalue (val, tf_none) : rvalue (val);\n-  return ref_conv_binds_directly (to, val, direct_init_p).is_false ();\n+  return ref_conv_binds_to_temporary (to, val, direct_init_p).is_true ();\n }\n \n /* Worker for is_{,nothrow_}convertible.  Attempt to perform an implicit"}, {"sha": "dc3d17c416cf1c9edaf4a28e55a32a9996473e60", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/895dd027d5dda51a95d242aec8a49a6dfa5db58d/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/895dd027d5dda51a95d242aec8a49a6dfa5db58d/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=895dd027d5dda51a95d242aec8a49a6dfa5db58d", "patch": "@@ -13731,7 +13731,8 @@ warn_for_range_copy (tree decl, tree expr)\n \n   if (TYPE_REF_P (type))\n     {\n-      if (glvalue_p (expr) && ref_conv_binds_directly (type, expr).is_false ())\n+      if (glvalue_p (expr)\n+\t  && ref_conv_binds_to_temporary (type, expr).is_true ())\n \t{\n \t  auto_diagnostic_group d;\n \t  if (warning_at (loc, OPT_Wrange_loop_construct,\n@@ -13762,7 +13763,7 @@ warn_for_range_copy (tree decl, tree expr)\n   /* If we can initialize a reference directly, suggest that to avoid the\n      copy.  */\n   tree rtype = cp_build_reference_type (type, /*rval*/false);\n-  if (ref_conv_binds_directly (rtype, expr).is_true ())\n+  if (ref_conv_binds_to_temporary (rtype, expr).is_false ())\n     {\n       auto_diagnostic_group d;\n       if (warning_at (loc, OPT_Wrange_loop_construct,"}, {"sha": "3cc2e3afa5d3424aa0eed55a30255e7c7d2d3475", "filename": "gcc/testsuite/g++.dg/cpp0x/elision4.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/895dd027d5dda51a95d242aec8a49a6dfa5db58d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Felision4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/895dd027d5dda51a95d242aec8a49a6dfa5db58d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Felision4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Felision4.C?ref=895dd027d5dda51a95d242aec8a49a6dfa5db58d", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/107085\n+// { dg-do compile { target c++11 } }\n+\n+struct X {\n+  X();\n+  X(X&&);\n+};\n+struct Z : X {};\n+X x1 = Z();\n+X x2 = X(Z());\n+\n+struct B { };\n+struct D : B { };\n+B b1 = D();\n+B b2 = B(D());"}, {"sha": "5354b1dc4e6b4c8ae998bb4d7f6a210f2d50af25", "filename": "gcc/testsuite/g++.dg/ext/reference_constructs_from_temporary1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/895dd027d5dda51a95d242aec8a49a6dfa5db58d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Freference_constructs_from_temporary1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/895dd027d5dda51a95d242aec8a49a6dfa5db58d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Freference_constructs_from_temporary1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Freference_constructs_from_temporary1.C?ref=895dd027d5dda51a95d242aec8a49a6dfa5db58d", "patch": "@@ -201,7 +201,7 @@ SA(!__reference_constructs_from_temporary(const int&, H));\n SA(!__reference_constructs_from_temporary(int&&, G2));\n SA(!__reference_constructs_from_temporary(const int&, H2));\n \n-SA(!__reference_constructs_from_temporary(const Base&, Der));\n+SA(__reference_constructs_from_temporary(const Base&, Der));\n \n // This fails because std::is_constructible_v<int&&, id<int[3]>> is false.\n SA(!__reference_constructs_from_temporary(int&&, id<int[3]>));"}, {"sha": "e6c159e9b0057dfb3802544bc0eaa805513d12db", "filename": "gcc/testsuite/g++.dg/ext/reference_converts_from_temporary1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/895dd027d5dda51a95d242aec8a49a6dfa5db58d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Freference_converts_from_temporary1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/895dd027d5dda51a95d242aec8a49a6dfa5db58d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Freference_converts_from_temporary1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Freference_converts_from_temporary1.C?ref=895dd027d5dda51a95d242aec8a49a6dfa5db58d", "patch": "@@ -201,7 +201,7 @@ SA( __reference_converts_from_temporary(const int&, H));\n SA(!__reference_converts_from_temporary(int&&, G2));\n SA(!__reference_converts_from_temporary(const int&, H2));\n \n-SA(!__reference_converts_from_temporary(const Base&, Der));\n+SA(__reference_converts_from_temporary(const Base&, Der));\n \n // This fails because std::is_constructible_v<int&&, id<int[3]>> is false.\n SA(!__reference_converts_from_temporary(int&&, id<int[3]>));"}]}