{"sha": "e7f79e123c1536f13c4fb2196ad08067f0b256fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdmNzllMTIzYzE1MzZmMTNjNGZiMjE5NmFkMDgwNjdmMGIyNTZmYg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2005-12-18T14:01:00Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2005-12-18T14:01:00Z"}, "message": "re PR fortran/25018 (Segfault with simple expression)\n\n2005-12-18  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/25018\n\t*expr.c(check_inquiry): Return FAILURE if there is no symtree to\n\tprovide a name. Error/warning for assumed character length argument\n\tto LEN for an initialization expression, using GFC_GNU_STD. Add an\n\targument to flag that the expression is not restricted.\n\t(check_init_expr): Improve the message for a failing variable.\n\t(gfc_match_init_expr): Call check_enquiry again to make sure that\n\tunsimplified expressions are not causing unnecessary errors.\n\n2005-12-18  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/25018\n\t*gfortran.dg/initialization_1.f90: New test.\n\t*gfortran.dg/enum_5.f90: Change dg-error to new message.\n\t*gfortran.dg/g77/980616-0.f: The same.\n\nFrom-SVN: r108753", "tree": {"sha": "6c71e69c0e04a0262415dfa77065f7d15252abf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c71e69c0e04a0262415dfa77065f7d15252abf8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7f79e123c1536f13c4fb2196ad08067f0b256fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7f79e123c1536f13c4fb2196ad08067f0b256fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7f79e123c1536f13c4fb2196ad08067f0b256fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7f79e123c1536f13c4fb2196ad08067f0b256fb/comments", "author": null, "committer": null, "parents": [{"sha": "ab9a1ff8ee9df7c87c1b1d75ab2424841694cb7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab9a1ff8ee9df7c87c1b1d75ab2424841694cb7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab9a1ff8ee9df7c87c1b1d75ab2424841694cb7b"}], "stats": {"total": 163, "additions": 84, "deletions": 79}, "files": [{"sha": "b2b30097ac75e99c9e8176c56d2eafb2558cb29a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f79e123c1536f13c4fb2196ad08067f0b256fb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f79e123c1536f13c4fb2196ad08067f0b256fb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e7f79e123c1536f13c4fb2196ad08067f0b256fb", "patch": "@@ -1,74 +1,3 @@\n-2005-12-16  Kazu Hirata  <kazu@codesourcery.com>\n-\n-\t* parser.c, pt.c: Fix comment typos.\n-\n-2005-12-13  Petr Machata  <machata@post.cz>\n-\n-\tPR c++/24907\n-\t* parser.c (cp_parser_simple_declaration): Require comma at the\n-\tbeginning of processing second and later declarators, instead of\n-\tallowing the comma at the end of each iteration.\n-\n-2005-12-12  Mark Mitchell  <mark@codesourcery.com>\n-\n-\tPR c++/25300\n-\t* tree.c (build_qualified_name): Return error_mark_node for\n-\terroneous input.\n-\n-2005-12-10  Mark Mitchell  <mark@codesourcery.com>\n-\n-\tPR c++/25337 \n-\t* pt.c (tsubst_copy_and_build): Permit dependent types for the\n-\tobject in a class member access expression.\n-\n-2005-12-10  Terry Laurenzo  <tlaurenzo@gmail.com>\n-\n-\tPR java/9861\n-\t* mangle.c (write_bare_function_type): Mangle return type for\n-\tmethods of Java classes\n-\n-2005-12-08  Th\ufffdodore Papadopoulo <Theodore.Papadopoulo@sophia.inria.fr>\n-\t\n-\t* call.c (build_conditional_expr): Print types in error messages.\n-\t\n-2005-12-07  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n-\n-\t* expr.c (cxx_expand_expr): Call gcc_unreachable instead of abort.\n-\n-2005-12-07  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n-\n-\t* cp-gimplify.c (gimplify_cp_loop): Use fold_build3.\n-\n-2005-12-07  Rafael \ufffdvila de Esp\ufffdndola  <rafael.espindola@gmail.com>\n-\n-\t* Make-lang.in (c++.all.build, c++.install-normal): Remove.\n-\n-2005-12-07  Rafael \ufffdvila de Esp\ufffdndola  <rafael.espindola@gmail.com>\n-\n-\t* Make-lang.in: Remove all dependencies on s-gtype.\n-\n-2005-12-06  Aldy Hernandez  <aldyh@redhat.com>\n-\n-       PR C++/24138\n-        * decl.c (reshape_init_array_1): Handle max_index of -1.\n-\n-2005-12-06  Roger Sayle  <roger@eyesopen.com>\n-\n-\t* typeck.c (build_binary_op): Issue warning if either operand of a\n-\tcomparison operator is a string literal, except for testing equality\n-\tor inequality against NULL.\n-\n-2005-12-06  Roger Sayle  <roger@eyesopen.com>\n-\n-\tPR c++/25263\n-\t* decl.c (compute_array_index_type): Check that itype is an\n-\tINTEGER_CST node before testing/clearing TREE_OVERFLOW.\n-\n-2005-12-05  Daniel Berlin  <dberlin@dberlin.org>\n-\n-\t* ptree.c (cxx_print_decl): Update to check for decl_common\n-\tstructure.\n-\n 2005-12-02  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/24173"}, {"sha": "8dbcc233b448e3a8755ae536fdc30ec11b9b4d89", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f79e123c1536f13c4fb2196ad08067f0b256fb/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f79e123c1536f13c4fb2196ad08067f0b256fb/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e7f79e123c1536f13c4fb2196ad08067f0b256fb", "patch": "@@ -1,3 +1,14 @@\n+2005-12-18  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/25018\n+\t*expr.c(check_inquiry): Return FAILURE if there is no symtree to\n+\tprovide a name. Error/warning for assumed character length argument\n+\tto LEN for an initialization expression, using GFC_GNU_STD. Add an\n+\targument to flag that the expression is not restricted.\n+\t(check_init_expr): Improve the message for a failing variable.\n+\t(gfc_match_init_expr): Call check_enquiry again to make sure that\n+\tunsimplified expressions are not causing unnecessary errors.\n+\n 2005-12-17  Steven G. Kargl  <kargls@comcast.net>\n \t    Tobias Schlueter <tobias.schlueter@physik.uni-muenchen.de>\n "}, {"sha": "c1451e38cb010e4934ad88756f1eab9178da18d2", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f79e123c1536f13c4fb2196ad08067f0b256fb/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f79e123c1536f13c4fb2196ad08067f0b256fb/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=e7f79e123c1536f13c4fb2196ad08067f0b256fb", "patch": "@@ -1365,7 +1365,7 @@ check_intrinsic_op (gfc_expr * e, try (*check_function) (gfc_expr *))\n    this problem here.  */\n \n static try\n-check_inquiry (gfc_expr * e)\n+check_inquiry (gfc_expr * e, int not_restricted)\n {\n   const char *name;\n \n@@ -1379,6 +1379,10 @@ check_inquiry (gfc_expr * e)\n \n   int i;\n \n+  /* An undeclared parameter will get us here (PR25018).  */\n+  if (e->symtree == NULL)\n+    return FAILURE;\n+\n   name = e->symtree->n.sym->name;\n \n   for (i = 0; inquiry_function[i]; i++)\n@@ -1407,6 +1411,15 @@ check_inquiry (gfc_expr * e)\n       e->ts = e->symtree->n.sym->ts;\n     }\n \n+  /* Assumed character length will not reduce to a constant expression\n+     with LEN, as required by the standard.  */\n+  if (i == 4 && not_restricted\n+\t&& e->symtree->n.sym->ts.type == BT_CHARACTER\n+\t&& e->symtree->n.sym->ts.cl->length == NULL)\n+    gfc_notify_std (GFC_STD_GNU, \"assumed character length \"\n+\t\t    \"variable '%s' in constant expression at %L\",\n+\t\t    e->symtree->n.sym->name, &e->where);\n+\n   return SUCCESS;\n }\n \n@@ -1440,7 +1453,7 @@ check_init_expr (gfc_expr * e)\n     case EXPR_FUNCTION:\n       t = SUCCESS;\n \n-      if (check_inquiry (e) != SUCCESS)\n+      if (check_inquiry (e, 1) != SUCCESS)\n \t{\n \t  t = SUCCESS;\n \t  for (ap = e->value.function.actual; ap; ap = ap->next)\n@@ -1478,7 +1491,8 @@ check_init_expr (gfc_expr * e)\n \t  break;\n \t}\n \n-      gfc_error (\"Variable '%s' at %L cannot appear in an initialization \"\n+      gfc_error (\"Parameter '%s' at %L has not been declared or is \"\n+\t\t \"a variable, which does not reduce to a constant \"\n \t\t \"expression\", e->symtree->n.sym->name, &e->where);\n       t = FAILURE;\n       break;\n@@ -1557,8 +1571,14 @@ gfc_match_init_expr (gfc_expr ** result)\n       return MATCH_ERROR;\n     }\n \n-  if (!gfc_is_constant_expr (expr))\n-    gfc_internal_error (\"Initialization expression didn't reduce %C\");\n+  /* Not all inquiry functions are simplified to constant expressions\n+     so it is necessary to call check_inquiry again.  */ \n+  if (!gfc_is_constant_expr (expr)\n+\t&& check_inquiry (expr, 1) == FAILURE)\n+    {\n+      gfc_error (\"Initialization expression didn't reduce %C\");\n+      return MATCH_ERROR;\n+    }\n \n   *result = expr;\n \n@@ -1637,7 +1657,7 @@ static try\n restricted_intrinsic (gfc_expr * e)\n {\n   /* TODO: Check constraints on inquiry functions.  7.1.6.2 (7).  */\n-  if (check_inquiry (e) == SUCCESS)\n+  if (check_inquiry (e, 0) == SUCCESS)\n     return SUCCESS;\n \n   return restricted_args (e->value.function.actual);"}, {"sha": "5ecdf09c40cf72cb1e5a1c039e21ca55e8bbef18", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f79e123c1536f13c4fb2196ad08067f0b256fb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f79e123c1536f13c4fb2196ad08067f0b256fb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e7f79e123c1536f13c4fb2196ad08067f0b256fb", "patch": "@@ -1,3 +1,10 @@\n+2005-12-18  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/25018\n+\t*gfortran.dg/initialization_1.f90: New test.\n+\t*gfortran.dg/enum_5.f90: Change dg-error to new message.\n+\t*gfortran.dg/g77/980616-0.f: The same.\n+\n 2005-12-17  Steven G. Kargl  <kargls@comcast.net>\n \n \t* PR fortran/25458"}, {"sha": "9ff2efa9c5a47690c1119d43853287e7382cb8de", "filename": "gcc/testsuite/gfortran.dg/enum_5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f79e123c1536f13c4fb2196ad08067f0b256fb/gcc%2Ftestsuite%2Fgfortran.dg%2Fenum_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f79e123c1536f13c4fb2196ad08067f0b256fb/gcc%2Ftestsuite%2Fgfortran.dg%2Fenum_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fenum_5.f90?ref=e7f79e123c1536f13c4fb2196ad08067f0b256fb", "patch": "@@ -6,7 +6,7 @@ program main\n   integer :: i = 1\n \n   enum, bind (c)  ! { dg-warning \"New in Fortran 2003\" } \n-    enumerator :: red, black = i  ! { dg-error \"cannot appear\" }\n+    enumerator :: red, black = i  ! { dg-error \"is a variable\" }\n     enumerator :: blue = 1  \n   end enum junk  ! { dg-error \"Syntax error\" }\n "}, {"sha": "069b611eb1494e6210038c7e63f0200f59a509ba", "filename": "gcc/testsuite/gfortran.dg/g77/980616-0.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f79e123c1536f13c4fb2196ad08067f0b256fb/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980616-0.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f79e123c1536f13c4fb2196ad08067f0b256fb/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980616-0.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980616-0.f?ref=e7f79e123c1536f13c4fb2196ad08067f0b256fb", "patch": "@@ -5,6 +5,6 @@\n * Date: Mon, 15 Jun 1998 21:54:32 -0500\n * From: Ian A Watson <WATSON_IAN_A@lilly.com>\n * Subject: Mangler Crash\n-      EQUIVALENCE(I,glerf(P)) ! { dg-error \"cannot appear\"  \"cannot appear\" }\n+      EQUIVALENCE(I,glerf(P)) ! { dg-error \"is a variable\"  \"is a variable\" }\n       COMMON /foo/ glerf(3)\n c { dg-error \"end of file\" \"end of file\" { target *-*-* } 0 }"}, {"sha": "f13145946aad828dbc383ba3cd251613af0b9b57", "filename": "gcc/testsuite/gfortran.dg/initialization_1.f90", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f79e123c1536f13c4fb2196ad08067f0b256fb/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f79e123c1536f13c4fb2196ad08067f0b256fb/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_1.f90?ref=e7f79e123c1536f13c4fb2196ad08067f0b256fb", "patch": "@@ -0,0 +1,38 @@\n+!==================initialization_1.f90======================\n+\n+! { dg-do compile }\n+! Tests fix for PR25018 in which an ICE resulted from using a\n+! variable in a parameter initialization expression. In the course\n+! of developing the fix, various other constraints and limitations\n+! were tested.\n+!\n+! Contributed by Paul Thomas  <pault@gcc.gnu.org>\n+!\n+module const\n+! The next line is the original error\n+  real(8), parameter :: g = - sqrt(2._8) * Gf ! { dg-error \"not been declared or is a variable\" }\n+contains\n+  subroutine foo(ch1, x, y)\n+    character(*)        :: ch1\n+\n+! This is OK because it is a restricted expression.\n+    character(len(ch1)) :: ch2\n+\n+    real(8) :: x (1:2, *)\n+    real(8) :: y (0:,:)\n+\n+! However, this gives a warning because it is an initialization expression.\n+    integer :: l1 = len (ch1)     ! { dg-warning \"assumed character length variable\" }\n+\n+! Dependence on upper bound of final dimension of assumed size array knocks these out.\n+    integer :: m1 = size (x, 2)   ! { dg-error \"not a valid dimension index\" }\n+    integer :: m2(2) = shape (x)  ! { dg-error \"assumed size array\" }\n+\n+! These are warnings because they are gfortran extensions.\n+    integer :: m3 = size (x, 1)   ! { dg-warning \"Evaluation of nonstandard initialization\" }\n+    integer :: m4(2) = shape (z)  ! { dg-warning \"Evaluation of nonstandard initialization\" }\n+\n+! This does not depend on non-constant properties.\n+    real(8) :: big = huge (x)\n+  end subroutine foo  \n+end module const"}]}