{"sha": "1ae44ba2e358541d7d22f99c1ae370b78cbb289d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFlNDRiYTJlMzU4NTQxZDdkMjJmOTljMWFlMzcwYjc4Y2JiMjg5ZA==", "commit": {"author": {"name": "Vincent Celier", "email": "celier@gnat.com", "date": "2004-10-27T13:38:58Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-10-27T13:38:58Z"}, "message": "prj-nmsc.adb (Language_Independent_Check): Do not forbid virtual extension of library projects.\n\n2004-10-26  Vincent Celier  <celier@gnat.com>\n\n\t* prj-nmsc.adb (Language_Independent_Check): Do not forbid virtual\n\textension of library projects.\n\n\t* prj-part.adb: If env var ADA_PROJECT_PATH is not defined, project\n\tpath defaults to \".:<prefix>/lib/gnat\".\n\t(Parse): For an extending all project, allow direct import of a project\n\tthat is virtually extended.\n\n\t* prj-proc.adb (Imported_Or_Extended_Project_From): If a project with\n\tthe specified name is directly imported, return its ID. Otherwise, if\n\tan extension of this project is imported, return the ID of the\n\textension.\n\nFrom-SVN: r89662", "tree": {"sha": "d0e8b5f12fb45a78319041749a5e90564562fc32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0e8b5f12fb45a78319041749a5e90564562fc32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ae44ba2e358541d7d22f99c1ae370b78cbb289d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ae44ba2e358541d7d22f99c1ae370b78cbb289d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ae44ba2e358541d7d22f99c1ae370b78cbb289d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ae44ba2e358541d7d22f99c1ae370b78cbb289d/comments", "author": null, "committer": null, "parents": [{"sha": "813fc7bf1866ee281dfa0be67f08016af9279ffe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/813fc7bf1866ee281dfa0be67f08016af9279ffe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/813fc7bf1866ee281dfa0be67f08016af9279ffe"}], "stats": {"total": 70, "additions": 38, "deletions": 32}, "files": [{"sha": "8bca19c660a3c18bba4021508524241948567052", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ae44ba2e358541d7d22f99c1ae370b78cbb289d/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ae44ba2e358541d7d22f99c1ae370b78cbb289d/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=1ae44ba2e358541d7d22f99c1ae370b78cbb289d", "patch": "@@ -3522,22 +3522,7 @@ package body Prj.Nmsc is\n                   end if;\n \n                   if Lib_Dir.Default then\n-\n-                     --  If the extending project is a virtual project, we\n-                     --  put the error message in the library project that\n-                     --  is extended, rather than in the extending all project.\n-                     --  Of course, we cannot put it in the virtual extending\n-                     --  project, because it has no source.\n-\n-                     if Data.Virtual then\n-                        Error_Msg_Name_1 := Extended_Data.Name;\n-\n-                        Error_Msg\n-                          (Project,\n-                           \"library project % cannot be virtually extended\",\n-                           Extended_Data.Location);\n-\n-                     else\n+                     if not Data.Virtual then\n                         Error_Msg\n                           (Project,\n                            \"a project extending a library project must \" &"}, {"sha": "c09f8fa803aed138c4d3b2fdef71b4fd233f38c4", "filename": "gcc/ada/prj-part.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ae44ba2e358541d7d22f99c1ae370b78cbb289d/gcc%2Fada%2Fprj-part.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ae44ba2e358541d7d22f99c1ae370b78cbb289d/gcc%2Fada%2Fprj-part.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-part.adb?ref=1ae44ba2e358541d7d22f99c1ae370b78cbb289d", "patch": "@@ -33,6 +33,7 @@ with Prj.Com;  use Prj.Com;\n with Prj.Dect;\n with Prj.Err;  use Prj.Err;\n with Scans;    use Scans;\n+with Sdefault;\n with Sinput;   use Sinput;\n with Sinput.P; use Sinput.P;\n with Snames;\n@@ -531,11 +532,6 @@ package body Prj.Part is\n                            Virtual_Hash.Remove (Imported);\n                            Declaration := Project_Declaration_Of (Imported);\n                         end loop;\n-\n-                     elsif Virtual_Hash.Get (Imported) /= Empty_Node then\n-                        Error_Msg\n-                          (\"this project cannot be imported directly\",\n-                           Location_Of (With_Clause));\n                      end if;\n \n                   end if;\n@@ -1708,7 +1704,10 @@ begin\n    --  Initialize Project_Path during package elaboration\n \n    if Prj_Path.all = \"\" then\n-      Project_Path := new String'(\".\");\n+      Project_Path :=\n+        new String'(\".\" & Path_Separator & Sdefault.Search_Dir_Prefix.all &\n+                    \"..\" & Directory_Separator & \"..\" & Directory_Separator &\n+                    \"..\" & Directory_Separator & \"gnat\");\n    else\n       Project_Path := new String'(\".\" & Path_Separator & Prj_Path.all);\n    end if;"}, {"sha": "561c5d43809359989b101ce1fd54492672000def", "filename": "gcc/ada/prj-proc.adb", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ae44ba2e358541d7d22f99c1ae370b78cbb289d/gcc%2Fada%2Fprj-proc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ae44ba2e358541d7d22f99c1ae370b78cbb289d/gcc%2Fada%2Fprj-proc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-proc.adb?ref=1ae44ba2e358541d7d22f99c1ae370b78cbb289d", "patch": "@@ -762,11 +762,13 @@ package body Prj.Proc is\n      (Project   : Project_Id;\n       With_Name : Name_Id) return Project_Id\n    is\n-      Data : constant Project_Data := Projects.Table (Project);\n-      List : Project_List          := Data.Imported_Projects;\n+      Data        : constant Project_Data := Projects.Table (Project);\n+      List        : Project_List          := Data.Imported_Projects;\n+      Result      : Project_Id := No_Project;\n+      Temp_Result : Project_Id := No_Project;\n \n    begin\n-      --  First check if it is the name of a extended project\n+      --  First check if it is the name of an extended project\n \n       if Data.Extends /= No_Project\n         and then Projects.Table (Data.Extends).Name = With_Name\n@@ -776,20 +778,40 @@ package body Prj.Proc is\n       else\n          --  Then check the name of each imported project\n \n-         while List /= Empty_Project_List\n-           and then\n-             Projects.Table\n-               (Project_Lists.Table (List).Project).Name /= With_Name\n+         while List /= Empty_Project_List loop\n+            Result := Project_Lists.Table (List).Project;\n+\n+            --  If the project is directly imported, then returns its ID\n+\n+            if Projects.Table (Result).Name = With_Name then\n+               return Result;\n+            end if;\n+\n+            --  If a project extending the project is imported, then keep\n+            --  this extending project as a possibility. It will be the\n+            --  returned ID if the project is not imported directly.\n+\n+            declare\n+               Proj : Project_Id := Projects.Table (Result).Extends;\n+            begin\n+               while Proj /= No_Project loop\n+                  if Projects.Table (Proj).Name = With_Name then\n+                     Temp_Result := Result;\n+                     exit;\n+                  end if;\n+\n+                  Proj := Projects.Table (Proj).Extends;\n+               end loop;\n+            end;\n \n-         loop\n             List := Project_Lists.Table (List).Next;\n          end loop;\n \n          pragma Assert\n-           (List /= Empty_Project_List,\n+           (Temp_Result /= No_Project,\n            \"project not found\");\n \n-         return Project_Lists.Table (List).Project;\n+         return Temp_Result;\n       end if;\n    end Imported_Or_Extended_Project_From;\n "}]}