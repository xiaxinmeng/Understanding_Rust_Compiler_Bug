{"sha": "199baa71f7a6c8f255afdda03cd3b2644f8f0fcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk5YmFhNzFmN2E2YzhmMjU1YWZkZGEwM2NkM2IyNjQ0ZjhmMGZjZA==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2020-09-18T13:33:11Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2020-09-24T02:10:02Z"}, "message": "[RS6000] PR97107, libgo fails to build for power10\n\nCalls from split-stack code to non-split-stack code need to expand\nmapped stack memory via __morestack.  Even tail calls.\n\n__morestack is quite a surprising function on powerpc in that it calls\nback to its caller, and a tail call will continue running in the\ncontext of extra mapped stack.\n\n\tPR target/97107\n\t* config/rs6000/rs6000-internal.h (struct rs6000_stack): Improve\n\tcalls_p comment.\n\t* config/rs6000/rs6000-logue.c (rs6000_stack_info): Likewise.\n\t(rs6000_expand_split_stack_prologue): Emit the prologue for\n\tfunctions that make a sibling call.", "tree": {"sha": "5a93a33b6d2cc716ddcc5b0ba16bb74839b93b96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a93a33b6d2cc716ddcc5b0ba16bb74839b93b96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/199baa71f7a6c8f255afdda03cd3b2644f8f0fcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/199baa71f7a6c8f255afdda03cd3b2644f8f0fcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/199baa71f7a6c8f255afdda03cd3b2644f8f0fcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/199baa71f7a6c8f255afdda03cd3b2644f8f0fcd/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b828f69519a50e6e2961b62ea552bf89d287199", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b828f69519a50e6e2961b62ea552bf89d287199", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b828f69519a50e6e2961b62ea552bf89d287199"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "32681b6cececee2a5113d8802ce881b725f3a9fd", "filename": "gcc/config/rs6000/rs6000-internal.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199baa71f7a6c8f255afdda03cd3b2644f8f0fcd/gcc%2Fconfig%2Frs6000%2Frs6000-internal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199baa71f7a6c8f255afdda03cd3b2644f8f0fcd/gcc%2Fconfig%2Frs6000%2Frs6000-internal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-internal.h?ref=199baa71f7a6c8f255afdda03cd3b2644f8f0fcd", "patch": "@@ -32,7 +32,7 @@ typedef struct rs6000_stack {\n   int cr_save_p;\t\t/* true if the CR reg needs to be saved */\n   unsigned int vrsave_mask;\t/* mask of vec registers to save */\n   int push_p;\t\t\t/* true if we need to allocate stack space */\n-  int calls_p;\t\t\t/* true if the function makes any calls */\n+  int calls_p;\t\t\t/* true if there are non-sibling calls */\n   int world_save_p;\t\t/* true if we're saving *everything*:\n \t\t\t\t   r13-r31, cr, f14-f31, vrsave, v20-v31  */\n   enum rs6000_abi abi;\t\t/* which ABI to use */"}, {"sha": "d90cd5736e1ad60cbe9f78806ce46f4c299f2bd4", "filename": "gcc/config/rs6000/rs6000-logue.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199baa71f7a6c8f255afdda03cd3b2644f8f0fcd/gcc%2Fconfig%2Frs6000%2Frs6000-logue.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199baa71f7a6c8f255afdda03cd3b2644f8f0fcd/gcc%2Fconfig%2Frs6000%2Frs6000-logue.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-logue.c?ref=199baa71f7a6c8f255afdda03cd3b2644f8f0fcd", "patch": "@@ -714,7 +714,7 @@ rs6000_stack_info (void)\n   info->altivec_size = 16 * (LAST_ALTIVEC_REGNO + 1\n \t\t\t\t - info->first_altivec_reg_save);\n \n-  /* Does this function call anything?  */\n+  /* Does this function call anything (apart from sibling calls)?  */\n   info->calls_p = (!crtl->is_leaf || cfun->machine->ra_needs_full_frame);\n \n   /* Determine if we need to save the condition code registers.  */\n@@ -5479,7 +5479,18 @@ rs6000_expand_split_stack_prologue (void)\n   gcc_assert (flag_split_stack && reload_completed);\n \n   if (!info->push_p)\n-    return;\n+    {\n+      /* We need the -fsplit-stack prologue for functions that make\n+\t tail calls.  Tail calls don't count against crtl->is_leaf.\n+\t Note that we are called inside a sequence.  get_insns will\n+\t just return that (as yet empty) sequence, so instead we\n+\t access the function rtl with get_topmost_sequence.  */\n+      for (insn = get_topmost_sequence ()->first; insn; insn = NEXT_INSN (insn))\n+\tif (CALL_P (insn))\n+\t  break;\n+      if (!insn)\n+\treturn;\n+    }\n \n   if (global_regs[29])\n     {"}]}