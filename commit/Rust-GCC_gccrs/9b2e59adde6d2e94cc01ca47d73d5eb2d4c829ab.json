{"sha": "9b2e59adde6d2e94cc01ca47d73d5eb2d4c829ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIyZTU5YWRkZTZkMmU5NGNjMDFjYTQ3ZDczZDVlYjJkNGM4MjlhYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-27T13:49:28Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-27T13:49:28Z"}, "message": "(can_reverse_comparison_p): Return 1 if -ffast-math.\n\nFrom-SVN: r6336", "tree": {"sha": "c4e96788f86be8677f8b71ef833805cb6afc1a09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4e96788f86be8677f8b71ef833805cb6afc1a09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b2e59adde6d2e94cc01ca47d73d5eb2d4c829ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b2e59adde6d2e94cc01ca47d73d5eb2d4c829ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b2e59adde6d2e94cc01ca47d73d5eb2d4c829ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b2e59adde6d2e94cc01ca47d73d5eb2d4c829ab/comments", "author": null, "committer": null, "parents": [{"sha": "fab446b8c31883fece1b0b2f5ed7b2cfbf48f241", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fab446b8c31883fece1b0b2f5ed7b2cfbf48f241", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fab446b8c31883fece1b0b2f5ed7b2cfbf48f241"}], "stats": {"total": 1, "additions": 1, "deletions": 0}, "files": [{"sha": "b2181a5afec8b861e077d9a1ac4d5b825e41cf1c", "filename": "gcc/jump.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2e59adde6d2e94cc01ca47d73d5eb2d4c829ab/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2e59adde6d2e94cc01ca47d73d5eb2d4c829ab/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=9b2e59adde6d2e94cc01ca47d73d5eb2d4c829ab", "patch": "@@ -2574,6 +2574,7 @@ can_reverse_comparison_p (comparison, insn)\n \t comparison and vice versa, even for floating point.  If no operands\n \t are NaNs, the reversal is valid.  If some operand is a NaN, EQ is\n \t always false and NE is always true, so the reversal is also valid.  */\n+      || flag_fast_math\n       || GET_CODE (comparison) == NE\n       || GET_CODE (comparison) == EQ)\n     return 1;"}]}