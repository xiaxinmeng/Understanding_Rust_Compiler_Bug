{"sha": "0b34dbc0a24864b1674bff7a92fa3cf0f1cbcea1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIzNGRiYzBhMjQ4NjRiMTY3NGJmZjdhOTJmYTNjZjBmMWNiY2VhMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-04T22:42:09Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-04T22:42:09Z"}, "message": "testsuite: Fix up pr25376.c on powerpc64-linux and array-quals-1.c on powerpc-linux [PR98325]\n\nThe following patch fixes the pr25376.c testcase on powerpc64-linux\nand array-quals-1.c on powerpc-linux.\nPreviously it failed like:\nFAIL: gcc.dg/array-quals-1.c scan-assembler-symbol-section symbol ^_?a1\\$ (found a1) has section ^\\\\\\\\.(const|rodata|srodata)|\\\\\\\\[RO\\\\\\\\] (found .sdata)\nFAIL: gcc.dg/array-quals-1.c scan-assembler-symbol-section symbol ^_?b1\\$ (found b1) has section ^\\\\\\\\.(const|rodata|srodata)|\\\\\\\\[RO\\\\\\\\] (found .sdata)\nFAIL: gcc.dg/array-quals-1.c scan-assembler-symbol-section symbol ^_?c1\\$ (found c1) has section ^\\\\\\\\.(const|rodata|srodata)|\\\\\\\\[RO\\\\\\\\] (found .sdata)\nFAIL: gcc.dg/array-quals-1.c scan-assembler-symbol-section symbol ^_?d1\\$ (found d1) has section ^\\\\\\\\.(const|rodata|srodata)|\\\\\\\\[RO\\\\\\\\] (found .sdata)\nFAIL: gcc.dg/array-quals-1.c scan-assembler-symbol-section symbol ^_?p\\$ (found p) has section ^\\\\\\\\.(const|rodata|srodata)|\\\\\\\\[RW\\\\\\\\] (found .sdata)\nFAIL: gcc.dg/array-quals-1.c scan-assembler-symbol-section symbol ^_?p1\\$ (found p1) has section ^\\\\\\\\.(const|rodata|srodata)|\\\\\\\\[RW\\\\\\\\] (found .sdata)\nFAIL: gcc.dg/array-quals-1.c scan-assembler-symbol-section symbol ^_?q\\$ (found q) has section ^\\\\\\\\.(const|rodata|srodata)|\\\\\\\\[RW\\\\\\\\] (found .sdata)\nFAIL: gcc.dg/array-quals-1.c scan-assembler-symbol-section symbol ^_?q1\\$ (found q1) has section ^\\\\\\\\.(const|rodata|srodata)|\\\\\\\\[RW\\\\\\\\] (found .sdata)\nFAIL: gcc.dg/array-quals-1.c scan-assembler-symbol-section symbol ^_?r\\$ (found r) has section ^\\\\\\\\.(const|rodata|srodata)|\\\\\\\\[RW\\\\\\\\] (found .sdata)\nFAIL: gcc.dg/array-quals-1.c scan-assembler-symbol-section symbol ^_?r1\\$ (found r1) has section ^\\\\\\\\.(const|rodata|srodata)|\\\\\\\\[RW\\\\\\\\] (found .sdata)\nFAIL: gcc.dg/array-quals-1.c scan-assembler-symbol-section symbol ^_?s\\$ (found s) has section ^\\\\\\\\.(const|rodata|srodata)|\\\\\\\\[RW\\\\\\\\] (found .sdata)\nFAIL: gcc.dg/array-quals-1.c scan-assembler-symbol-section symbol ^_?s1\\$ (found s1) has section ^\\\\\\\\.(const|rodata|srodata)|\\\\\\\\[RW\\\\\\\\] (found .sdata)\nFAIL: gcc.dg/array-quals-1.c scan-assembler-symbol-section symbol ^_?t\\$ (found t) has section ^\\\\\\\\.(const|rodata|srodata)|\\\\\\\\[RW\\\\\\\\] (found .sdata)\nFAIL: gcc.dg/array-quals-1.c scan-assembler-symbol-section symbol ^_?t1\\$ (found t1) has section ^\\\\\\\\.(const|rodata|srodata)|\\\\\\\\[RW\\\\\\\\] (found .sdata)\nFAIL: gcc.dg/pr25376.c scan-assembler-symbol-section symbol simple\\$ (found .L.simple) has section ^\\\\\\\\.?my_named_section|simple\\\\\\\\[DS\\\\\\\\]|^\\\\\\\\\"\\\\\\\\.opd\\\\\\\\\" (found .opd)\nFAIL: gcc.dg/pr25376.c scan-assembler-symbol-section symbol simple\\$ (found simple) has section ^\\\\\\\\.?my_named_section|simple\\\\\\\\[DS\\\\\\\\]|^\\\\\\\\\"\\\\\\\\.opd\\\\\\\\\" (found .opd)\n\nThe problem with pr25376.c testcase are the ELFv1 function descriptors,\n        .section        my_named_section,\"ax\",@progbits\n        .align 2\n        .globl simple\n        .section        \".opd\",\"aw\"\n        .align 3\nsimple:\n        .quad   .L.simple,.TOC.@tocbase,0\n        .previous\n        .type   simple, @function\n.L.simple:\n\nso the simple symbol is found in the .opd section rather than in the\nmy_named_section the test attempts to verify for that symbol.\nThis patch deals it with two changes, the last two hunks in scanasm.exp\nteach it about the behavior of .previous directive and the first hunk\nfor powerpc if symbol is in .opd section will try section in which the\n.L.symbol label is instead.\n\nThe array-quals-1.c test fails because on powerpc-linux the symbols\nare emitted into .sdata section rather than one of the expected ones.\n\n2021-02-04  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR testsuite/98325\n\t* lib/scanasm.exp (dg-scan-symbol-section): For powerpc*-*-* targets if\n\t$section is .opd, look at .L.$symbol_name's section.\n\t(parse_section_section_of_symbols): Handle .previous directive.\n\t* gcc.dg/array-quals-1.c: Allow .sdata section.", "tree": {"sha": "73eda605aca2afbc7e3722c637dbcad2e9c0a68c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73eda605aca2afbc7e3722c637dbcad2e9c0a68c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b34dbc0a24864b1674bff7a92fa3cf0f1cbcea1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b34dbc0a24864b1674bff7a92fa3cf0f1cbcea1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b34dbc0a24864b1674bff7a92fa3cf0f1cbcea1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b34dbc0a24864b1674bff7a92fa3cf0f1cbcea1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1d56e6a737418b7b48a53b355f588ea14f1b9a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1d56e6a737418b7b48a53b355f588ea14f1b9a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1d56e6a737418b7b48a53b355f588ea14f1b9a9"}], "stats": {"total": 42, "additions": 26, "deletions": 16}, "files": [{"sha": "5d9170ea81e7c9f6360048beb4ba09867a2cad74", "filename": "gcc/testsuite/gcc.dg/array-quals-1.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b34dbc0a24864b1674bff7a92fa3cf0f1cbcea1/gcc%2Ftestsuite%2Fgcc.dg%2Farray-quals-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b34dbc0a24864b1674bff7a92fa3cf0f1cbcea1/gcc%2Ftestsuite%2Fgcc.dg%2Farray-quals-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-quals-1.c?ref=0b34dbc0a24864b1674bff7a92fa3cf0f1cbcea1", "patch": "@@ -8,44 +8,44 @@\n /* { dg-final { scan-assembler-not \"\\\\.data(?!\\\\.rel\\\\.ro)\" { xfail powerpc*-*-aix* mmix-*-* x86_64-*-mingw* } } } */\n /* { dg-final { scan-assembler-symbol-section {^_?a$} {^\\.(const|rodata|srodata)|\\[RO\\]} } } */\n static const int a[2] = { 1, 2 };\n-/* { dg-final { scan-assembler-symbol-section {^_?a1$} {^\\.(const|rodata|srodata)|\\[RO\\]} } } */\n+/* { dg-final { scan-assembler-symbol-section {^_?a1$} {^\\.(const|rodata|srodata|sdata)|\\[RO\\]} } } */\n const int a1[2] = { 1, 2 };\n typedef const int ci;\n /* { dg-final { scan-assembler-symbol-section {^_?b$} {^\\.(const|rodata|srodata)|\\[RO\\]} } } */\n static ci b[2] = { 3, 4 };\n-/* { dg-final { scan-assembler-symbol-section {^_?b1$} {^\\.(const|rodata|srodata)|\\[RO\\]} } } */\n+/* { dg-final { scan-assembler-symbol-section {^_?b1$} {^\\.(const|rodata|srodata|sdata)|\\[RO\\]} } } */\n ci b1[2] = { 3, 4 };\n typedef int ia[2];\n /* { dg-final { scan-assembler-symbol-section {^_?c$} {^\\.(const|rodata|srodata)|\\[RO\\]} } } */\n static const ia c = { 5, 6 };\n-/* { dg-final { scan-assembler-symbol-section {^_?c1$} {^\\.(const|rodata|srodata)|\\[RO\\]} } } */\n+/* { dg-final { scan-assembler-symbol-section {^_?c1$} {^\\.(const|rodata|srodata|sdata)|\\[RO\\]} } } */\n const ia c1 = { 5, 6 };\n typedef const int cia[2];\n /* { dg-final { scan-assembler-symbol-section {^_?d$} {^\\.(const|rodata|srodata)|\\[RO\\]} } } */\n static cia d = { 7, 8 };\n-/* { dg-final { scan-assembler-symbol-section {^_?d1$} {^\\.(const|rodata|srodata)|\\[RO\\]} } } */\n+/* { dg-final { scan-assembler-symbol-section {^_?d1$} {^\\.(const|rodata|srodata|sdata)|\\[RO\\]} } } */\n cia d1 = { 7, 8 };\n /* { dg-final { scan-assembler-symbol-section {^_?e$} {^\\.(const|rodata|srodata)|\\[RO\\]} } } */\n static cia e[2] = { { 1, 2 }, { 3, 4 } };\n-/* { dg-final { scan-assembler-symbol-section {^_?e1$} {^\\.(const|rodata|srodata)|\\[RO\\]} } } */\n+/* { dg-final { scan-assembler-symbol-section {^_?e1$} {^\\.(const|rodata|srodata|sdata)|\\[RO\\]} } } */\n cia e1[2] = { { 1, 2 }, { 3, 4 } };\n-/* { dg-final { scan-assembler-symbol-section {^_?p$} {^\\.(const|rodata|srodata)|\\[RW\\]} } } */\n+/* { dg-final { scan-assembler-symbol-section {^_?p$} {^\\.(const|rodata|srodata|sdata)|\\[RW\\]} } } */\n void *const p = &a;\n-/* { dg-final { scan-assembler-symbol-section {^_?q$} {^\\.(const|rodata|srodata)|\\[RW\\]} } } */\n+/* { dg-final { scan-assembler-symbol-section {^_?q$} {^\\.(const|rodata|srodata|sdata)|\\[RW\\]} } } */\n void *const q = &b;\n-/* { dg-final { scan-assembler-symbol-section {^_?r$} {^\\.(const|rodata|srodata)|\\[RW\\]} } } */\n+/* { dg-final { scan-assembler-symbol-section {^_?r$} {^\\.(const|rodata|srodata|sdata)|\\[RW\\]} } } */\n void *const r = &c;\n-/* { dg-final { scan-assembler-symbol-section {^_?s$} {^\\.(const|rodata|srodata)|\\[RW\\]} } } */\n+/* { dg-final { scan-assembler-symbol-section {^_?s$} {^\\.(const|rodata|srodata|sdata)|\\[RW\\]} } } */\n void *const s = &d;\n-/* { dg-final { scan-assembler-symbol-section {^_?t$} {^\\.(const|rodata|srodata)|\\[RW\\]} } } */\n+/* { dg-final { scan-assembler-symbol-section {^_?t$} {^\\.(const|rodata|srodata|sdata)|\\[RW\\]} } } */\n void *const t = &e;\n-/* { dg-final { scan-assembler-symbol-section {^_?p1$} {^\\.(const|rodata|srodata)|\\[RW\\]} } } */\n+/* { dg-final { scan-assembler-symbol-section {^_?p1$} {^\\.(const|rodata|srodata|sdata)|\\[RW\\]} } } */\n void *const p1 = &a1;\n-/* { dg-final { scan-assembler-symbol-section {^_?q1$} {^\\.(const|rodata|srodata)|\\[RW\\]} } } */\n+/* { dg-final { scan-assembler-symbol-section {^_?q1$} {^\\.(const|rodata|srodata|sdata)|\\[RW\\]} } } */\n void *const q1 = &b1;\n-/* { dg-final { scan-assembler-symbol-section {^_?r1$} {^\\.(const|rodata|srodata)|\\[RW\\]} } } */\n+/* { dg-final { scan-assembler-symbol-section {^_?r1$} {^\\.(const|rodata|srodata|sdata)|\\[RW\\]} } } */\n void *const r1 = &c1;\n-/* { dg-final { scan-assembler-symbol-section {^_?s1$} {^\\.(const|rodata|srodata)|\\[RW\\]} } } */\n+/* { dg-final { scan-assembler-symbol-section {^_?s1$} {^\\.(const|rodata|srodata|sdata)|\\[RW\\]} } } */\n void *const s1 = &d1;\n-/* { dg-final { scan-assembler-symbol-section {^_?t1$} {^\\.(const|rodata|srodata)|\\[RW\\]} } } */\n+/* { dg-final { scan-assembler-symbol-section {^_?t1$} {^\\.(const|rodata|srodata|sdata)|\\[RW\\]} } } */\n void *const t1 = &e1;"}, {"sha": "e7236087a75c193186977bf36be0198d287831ae", "filename": "gcc/testsuite/lib/scanasm.exp", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b34dbc0a24864b1674bff7a92fa3cf0f1cbcea1/gcc%2Ftestsuite%2Flib%2Fscanasm.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b34dbc0a24864b1674bff7a92fa3cf0f1cbcea1/gcc%2Ftestsuite%2Flib%2Fscanasm.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fscanasm.exp?ref=0b34dbc0a24864b1674bff7a92fa3cf0f1cbcea1", "patch": "@@ -275,6 +275,9 @@ proc dg-scan-symbol-section { name testcase output_file orig_args } {\n     foreach symbol_name [lsort [array names section_by_symbol]] {\n         if { [regexp -- $symbol_pattern $symbol_name] } {\n             set section $section_by_symbol($symbol_name)\n+\t    if { [istarget powerpc*-*-*] && $section == \".opd\" } {\n+\t\tset section $section_by_symbol(.L.$symbol_name)\n+\t    }\n             set description \"$testcase $name symbol $printable_symbol_pattern (found $symbol_name) has section $printable_expected_section_pattern\"\n             if { $section == \"\" } {\n                 fail \"$description (no section detected)\"\n@@ -321,13 +324,16 @@ proc parse_section_of_symbols { filename result } {\n \n     set section_pattern {^\\s*(?:(?:\\.section|\\.csect)\\s+(.*)|(\\.const|\\.data|\\.text)\\s*)$}\n     set label_pattern {^(\\S+):$}\n+    set previous_pattern {^\\s*\\.previous\\s*$}\n \n     set fd [open $filename r]\n     set current_section \"\"\n+    set prev_section \"\"\n     while { [gets $fd line] >= 0 } {\n         if { [regexp -- $label_pattern $line dummy symbol_name] } {\n             set up_result($symbol_name) $current_section\n         } elseif { [regexp -- $section_pattern $line dummy section_directive_arguments full_section_directive] } {\n+\t    set prev_section $current_section\n             if { $full_section_directive eq \"\" } {\n                 # Example: .section .text,\"ax\",progbits\n                 # Example: .section \".text\",#alloc,#execinstr,#progbits\n@@ -344,7 +350,11 @@ proc parse_section_of_symbols { filename result } {\n                 # Example: .text\n                 set current_section \"$full_section_directive\"\n             }\n-        }\n+\t} elseif { [regexp -- $previous_pattern $line dummy] } {\n+\t    set sect $prev_section\n+\t    set prev_section $current_section\n+\t    set current_section $sect\n+\t}\n     }\n     close $fd\n }"}]}