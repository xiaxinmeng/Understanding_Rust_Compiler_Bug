{"sha": "83855386c41b78c92f4445e4d0e6397372136c90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM4NTUzODZjNDFiNzhjOTJmNDQ0NWU0ZDBlNjM5NzM3MjEzNmM5MA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2021-03-19T19:49:38Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2021-03-19T19:52:20Z"}, "message": "Add size check to vector-matrix matmul.\n\nIt turns out the library version is much faster for vector-matrix\nmultiplications for large sizes than what inlining can produce.\nUse size checks for switching between this and inlining for\nthat case to.\n\ngcc/fortran/ChangeLog:\n\n\t* frontend-passes.c (inline_limit_check): Add rank_a\n\targument. If a is rank 1, set the second dimension to 1.\n\t(inline_matmul_assign): Pass rank_a argument to inline_limit_check.\n\t(call_external_blas): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/inline_matmul_6.f90: Adjust count for\n\t  _gfortran_matmul.", "tree": {"sha": "cf6d44fe148b30d1ecfaf33d46d20a8dec89e148", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf6d44fe148b30d1ecfaf33d46d20a8dec89e148"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83855386c41b78c92f4445e4d0e6397372136c90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83855386c41b78c92f4445e4d0e6397372136c90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83855386c41b78c92f4445e4d0e6397372136c90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83855386c41b78c92f4445e4d0e6397372136c90/comments", "author": null, "committer": null, "parents": [{"sha": "d81019db099ad95febbb2d4b4afd8cbe95762062", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d81019db099ad95febbb2d4b4afd8cbe95762062", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d81019db099ad95febbb2d4b4afd8cbe95762062"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "7d3eae676321e21ee9c4dce63df13f792aa08257", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83855386c41b78c92f4445e4d0e6397372136c90/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83855386c41b78c92f4445e4d0e6397372136c90/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=83855386c41b78c92f4445e4d0e6397372136c90", "patch": "@@ -3307,24 +3307,36 @@ get_operand (gfc_intrinsic_op op, gfc_expr *e1, gfc_expr *e2)\n    removed by DCE. Only called for rank-two matrices A and B.  */\n \n static gfc_code *\n-inline_limit_check (gfc_expr *a, gfc_expr *b, int limit)\n+inline_limit_check (gfc_expr *a, gfc_expr *b, int limit, int rank_a)\n {\n   gfc_expr *inline_limit;\n   gfc_code *if_1, *if_2, *else_2;\n   gfc_expr *b2, *a2, *a1, *m1, *m2;\n   gfc_typespec ts;\n   gfc_expr *cond;\n \n+  gcc_assert (rank_a == 1 || rank_a == 2);\n+\n   /* Calculation is done in real to avoid integer overflow.  */\n \n   inline_limit = gfc_get_constant_expr (BT_REAL, gfc_default_real_kind,\n \t\t\t\t\t&a->where);\n   mpfr_set_si (inline_limit->value.real, limit, GFC_RND_MODE);\n-  mpfr_pow_ui (inline_limit->value.real, inline_limit->value.real, 3,\n+\n+  /* Set the limit according to the rank.  */\n+  mpfr_pow_ui (inline_limit->value.real, inline_limit->value.real, rank_a + 1,\n \t       GFC_RND_MODE);\n \n   a1 = get_array_inq_function (GFC_ISYM_SIZE, a, 1);\n-  a2 = get_array_inq_function (GFC_ISYM_SIZE, a, 2);\n+\n+  /* For a_rank = 1, must use one as the size of a along the second\n+     dimension as to avoid too much code duplication.  */\n+\n+  if (rank_a == 2)\n+    a2 = get_array_inq_function (GFC_ISYM_SIZE, a, 2);\n+  else\n+    a2 = gfc_get_int_expr (gfc_index_integer_kind, &a->where, 1);\n+\n   b2 = get_array_inq_function (GFC_ISYM_SIZE, b, 2);\n \n   gfc_clear_ts (&ts);\n@@ -4243,11 +4255,13 @@ inline_matmul_assign (gfc_code **c, int *walk_subtrees,\n   /* Take care of the inline flag.  If the limit check evaluates to a\n      constant, dead code elimination will eliminate the unneeded branch.  */\n \n-  if (flag_inline_matmul_limit > 0 && matrix_a->rank == 2\n+  if (flag_inline_matmul_limit > 0\n+      && (matrix_a->rank == 1 || matrix_a->rank == 2)\n       && matrix_b->rank == 2)\n     {\n       if_limit = inline_limit_check (matrix_a, matrix_b,\n-\t\t\t\t     flag_inline_matmul_limit);\n+\t\t\t\t     flag_inline_matmul_limit,\n+\t\t\t\t     matrix_a->rank);\n \n       /* Insert the original statement into the else branch.  */\n       if_limit->block->block->next = co;\n@@ -4757,7 +4771,7 @@ call_external_blas (gfc_code **c, int *walk_subtrees ATTRIBUTE_UNUSED,\n     return 0;\n \n   /* Generate the if statement and hang it into the tree.  */\n-  if_limit = inline_limit_check (matrix_a, matrix_b, flag_blas_matmul_limit);\n+  if_limit = inline_limit_check (matrix_a, matrix_b, flag_blas_matmul_limit, 2);\n   co_next = co->next;\n   (*current_code) = if_limit;\n   co->next = NULL;"}, {"sha": "da717bda017c4886b8ad477cb875985745a0c4e3", "filename": "gcc/testsuite/gfortran.dg/inline_matmul_6.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83855386c41b78c92f4445e4d0e6397372136c90/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83855386c41b78c92f4445e4d0e6397372136c90/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_6.f90?ref=83855386c41b78c92f4445e4d0e6397372136c90", "patch": "@@ -45,4 +45,4 @@ program main\n   if (any(abs(c2 - (/39., -61., 75./)) > 1e-3)) STOP 2\n end program main\n \n-! { dg-final { scan-tree-dump-times \"_gfortran_matmul\" 0 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_matmul\" 1 \"original\" } }"}]}