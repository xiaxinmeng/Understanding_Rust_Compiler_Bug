{"sha": "6366e3e8847af98d4728d55951534769d034d02a", "node_id": "C_kwDOANBUbNoAKDYzNjZlM2U4ODQ3YWY5OGQ0NzI4ZDU1OTUxNTM0NzY5ZDAzNGQwMmE", "commit": {"author": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2022-10-16T16:43:25Z"}, "committer": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2022-10-16T16:43:25Z"}, "message": "Add new constraints for upcoming autoinc fixes\n\nGCC does not allow a the operand of an autoinc addressing mode to\noverlap with another soure operand in the same insn.  This is primarly\nenforced with insn conditions.  However, cases can slip through LRA\nand reload.  To address those scenarios we'll take an idea from the\npdp11 port for describing the restriction in constraints as well.\n\nTo implement that we need register classes and constraints which are\n\"all general purpose hardware registers except r0\".  And similarly for\nr1..r7(sp).\n\nThis patch adds those register classes and constraints, but does not\nyet use them.\n\ngcc/\n\t* config/h8300/constraints.md (Z0..Z7): New register\n\tconstraints.\n\t* config/h8300/h8300.h (reg_class): Add new classes.\n\t(REG_CLASS_NAMES): Similarly.\n\t(REG_CLASS_CONTENTS): Similarly.", "tree": {"sha": "3f95e3a96125948f2535b5e6cd22c85d01dec018", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f95e3a96125948f2535b5e6cd22c85d01dec018"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6366e3e8847af98d4728d55951534769d034d02a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6366e3e8847af98d4728d55951534769d034d02a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6366e3e8847af98d4728d55951534769d034d02a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6366e3e8847af98d4728d55951534769d034d02a/comments", "author": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "709b2160bcd8f6f57c8754c73d40550895339c7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/709b2160bcd8f6f57c8754c73d40550895339c7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/709b2160bcd8f6f57c8754c73d40550895339c7b"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "6eaffc169759a6e59f7a194a2421c63841701429", "filename": "gcc/config/h8300/constraints.md", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6366e3e8847af98d4728d55951534769d034d02a/gcc%2Fconfig%2Fh8300%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6366e3e8847af98d4728d55951534769d034d02a/gcc%2Fconfig%2Fh8300%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fconstraints.md?ref=6366e3e8847af98d4728d55951534769d034d02a", "patch": "@@ -216,3 +216,28 @@\n   (and (match_test \"TARGET_H8300SX\")\n        (match_code \"mem\")\n        (match_test \"CONSTANT_P (XEXP (op, 0))\")))\n+\n+(define_register_constraint \"Z0\" \"NOT_R0_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"Z1\" \"NOT_R1_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"Z2\" \"NOT_R2_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"Z3\" \"NOT_R3_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"Z4\" \"NOT_R4_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"Z5\" \"NOT_R5_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"Z6\" \"NOT_R6_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"Z7\" \"NOT_SP_REGS\"\n+  \"@internal\")\n+"}, {"sha": "45cc4fc77969545d94dcf9edd1c5203b68bf7eb0", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6366e3e8847af98d4728d55951534769d034d02a/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6366e3e8847af98d4728d55951534769d034d02a/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=6366e3e8847af98d4728d55951534769d034d02a", "patch": "@@ -282,6 +282,8 @@ extern const char * const *h8_reg_names;\n \n enum reg_class {\n   NO_REGS, COUNTER_REGS, SOURCE_REGS, DESTINATION_REGS,\n+  NOT_R0_REGS, NOT_R1_REGS, NOT_R2_REGS, NOT_R3_REGS,\n+  NOT_R4_REGS, NOT_R5_REGS, NOT_R6_REGS, NOT_SP_REGS,\n   GENERAL_REGS, MAC_REGS, ALL_REGS, LIM_REG_CLASSES\n };\n \n@@ -291,6 +293,8 @@ enum reg_class {\n \n #define REG_CLASS_NAMES \\\n { \"NO_REGS\", \"COUNTER_REGS\", \"SOURCE_REGS\", \"DESTINATION_REGS\", \\\n+  \"NOT_R0_REGS\", \"NOT_R1_REGS\", \"NOT_R2_REGS\", \"NOT_R3_REGS\", \\\n+  \"NOT_R4_REGS\", \"NOT_R5_REGS\", \"NOT_R6_REGS\", \"NOT_SP_REGS\", \\\n   \"GENERAL_REGS\", \"MAC_REGS\", \"ALL_REGS\", \"LIM_REGS\" }\n \n /* Define which registers fit in which classes.\n@@ -302,6 +306,14 @@ enum reg_class {\n    {0x010},\t\t/* COUNTER_REGS */\t\\\n    {0x020},\t\t/* SOURCE_REGS */\t\\\n    {0x040},\t\t/* DESTINATION_REGS */\t\\\n+   {0x0fe},\t\t/* NOT_R0_REGS */\t\\\n+   {0x0fd},\t\t/* NOT_R1_REGS */\t\\\n+   {0x0fb},\t\t/* NOT_R2_REGS */\t\\\n+   {0x0f7},\t\t/* NOT_R3_REGS */\t\\\n+   {0x0ef},\t\t/* NOT_R4_REGS */\t\\\n+   {0x0df},\t\t/* NOT_R5_REGS */\t\\\n+   {0x0bf},\t\t/* NOT_R6_REGS */\t\\\n+   {0x07f},\t\t/* NOT_SP_REGS */\t\\\n    {0xeff},\t\t/* GENERAL_REGS */\t\\\n    {0x100},\t\t/* MAC_REGS */\t\t\\\n    {0xfff},\t\t/* ALL_REGS\t*/\t\\"}]}