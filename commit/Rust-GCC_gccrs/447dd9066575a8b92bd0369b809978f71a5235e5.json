{"sha": "447dd9066575a8b92bd0369b809978f71a5235e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ3ZGQ5MDY2NTc1YThiOTJiZDAzNjliODA5OTc4ZjcxYTUyMzVlNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-09-10T10:26:08Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-09-10T10:26:08Z"}, "message": "tree-data-ref.h (build_rdg): Drop all parameters but loop.\n\n2013-09-10  Richard Biener  <rguenther@suse.de>\n\n\t* tree-data-ref.h (build_rdg): Drop all parameters but loop.\n\t* tree-data-ref.c (create_rdg_vertices): Collect all data\n\treferences, signal failure to the caller, use data-ref API.\n\t(build_rdg): Compute data references only once.  Maintain\n\tlifetime of data references and data dependences from within\n\tRDG.\n\t(free_rdg): Free dependence relations.\n\t* tree-loop-distribution.c (rdg_flag_uses): Drop weird code\n\tinventing extra dependences.\n\t(distribute_loop): Update for RDG API changes.\n\nFrom-SVN: r202431", "tree": {"sha": "6d55c244219bf63844eb287b02c00ab6e3a421ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d55c244219bf63844eb287b02c00ab6e3a421ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/447dd9066575a8b92bd0369b809978f71a5235e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/447dd9066575a8b92bd0369b809978f71a5235e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/447dd9066575a8b92bd0369b809978f71a5235e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/447dd9066575a8b92bd0369b809978f71a5235e5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f14a732496e916cd10e67f2630ddd1eb77cfa7ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f14a732496e916cd10e67f2630ddd1eb77cfa7ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f14a732496e916cd10e67f2630ddd1eb77cfa7ab"}], "stats": {"total": 152, "additions": 76, "deletions": 76}, "files": [{"sha": "829d60a872e6d73f2f2a5c9012675ff8907c898d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/447dd9066575a8b92bd0369b809978f71a5235e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/447dd9066575a8b92bd0369b809978f71a5235e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=447dd9066575a8b92bd0369b809978f71a5235e5", "patch": "@@ -1,3 +1,16 @@\n+2013-09-10  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-data-ref.h (build_rdg): Drop all parameters but loop.\n+\t* tree-data-ref.c (create_rdg_vertices): Collect all data\n+\treferences, signal failure to the caller, use data-ref API.\n+\t(build_rdg): Compute data references only once.  Maintain\n+\tlifetime of data references and data dependences from within\n+\tRDG.\n+\t(free_rdg): Free dependence relations.\n+\t* tree-loop-distribution.c (rdg_flag_uses): Drop weird code\n+\tinventing extra dependences.\n+\t(distribute_loop): Update for RDG API changes.\n+\n 2013-09-10  Kai Tietz  <ktietz@redhat.com>\n \n \t* doc/invoke.texi (fms-extensions): Document changed"}, {"sha": "ca2cd8b3ad00985aad3a65ea365f63368b2f122d", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 61, "deletions": 36, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/447dd9066575a8b92bd0369b809978f71a5235e5/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/447dd9066575a8b92bd0369b809978f71a5235e5/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=447dd9066575a8b92bd0369b809978f71a5235e5", "patch": "@@ -5062,18 +5062,18 @@ create_rdg_edges (struct graph *rdg, vec<ddr_p> ddrs)\n       create_rdg_edges_for_scalar (rdg, DEF_FROM_PTR (def_p), i);\n }\n \n-/* Build the vertices of the reduced dependence graph RDG.  */\n+/* Build the vertices of the reduced dependence graph RDG.  Return false\n+   if that failed.  */\n \n-static void\n-create_rdg_vertices (struct graph *rdg, vec<gimple> stmts, loop_p loop)\n+static bool\n+create_rdg_vertices (struct graph *rdg, vec<gimple> stmts, loop_p loop,\n+\t\t     vec<data_reference_p> *datarefs)\n {\n-  int i, j;\n+  int i;\n   gimple stmt;\n \n   FOR_EACH_VEC_ELT (stmts, i, stmt)\n     {\n-      vec<data_ref_loc, va_stack> references;\n-      data_ref_loc *ref;\n       struct vertex *v = &(rdg->vertices[i]);\n \n       /* Record statement to vertex mapping.  */\n@@ -5087,22 +5087,20 @@ create_rdg_vertices (struct graph *rdg, vec<gimple> stmts, loop_p loop)\n       if (gimple_code (stmt) == GIMPLE_PHI)\n \tcontinue;\n \n-      vec_stack_alloc (data_ref_loc, references, 2);\n-      get_references_in_stmt (stmt, &references);\n-      FOR_EACH_VEC_ELT (references, j, ref)\n+      unsigned drp = datarefs->length ();\n+      if (!find_data_references_in_stmt (loop, stmt, datarefs))\n+\treturn false;\n+      for (unsigned j = drp; j < datarefs->length (); ++j)\n \t{\n-\t  data_reference_p dr;\n-\t  if (!ref->is_read)\n-\t    RDGV_HAS_MEM_WRITE (v) = true;\n-\t  else\n+\t  data_reference_p dr = (*datarefs)[j];\n+\t  if (DR_IS_READ (dr))\n \t    RDGV_HAS_MEM_READS (v) = true;\n-\t  dr = create_data_ref (loop, loop_containing_stmt (stmt),\n-\t\t\t\t*ref->pos, stmt, ref->is_read);\n-\t  if (dr)\n-\t    RDGV_DATAREFS (v).safe_push (dr);\n+\t  else\n+\t    RDGV_HAS_MEM_WRITE (v) = true;\n+\t  RDGV_DATAREFS (v).safe_push (dr);\n \t}\n-      references.release ();\n     }\n+  return true;\n }\n \n /* Initialize STMTS with all the statements of LOOP.  When\n@@ -5168,25 +5166,46 @@ build_empty_rdg (int n_stmts)\n    scalar dependence.  */\n \n struct graph *\n-build_rdg (struct loop *loop,\n-\t   vec<loop_p> *loop_nest,\n-\t   vec<ddr_p> *dependence_relations,\n-\t   vec<data_reference_p> *datarefs)\n+build_rdg (struct loop *loop)\n {\n-  struct graph *rdg = NULL;\n+  struct graph *rdg;\n+  vec<loop_p> loop_nest;\n+  vec<gimple> stmts;\n+  vec<data_reference_p> datarefs;\n+  vec<ddr_p> dependence_relations;\n \n-  if (compute_data_dependences_for_loop (loop, false, loop_nest, datarefs,\n-\t\t\t\t\t dependence_relations)\n-      && known_dependences_p (*dependence_relations))\n+  loop_nest.create (3);\n+  if (!find_loop_nest (loop, &loop_nest))\n+    {\n+      loop_nest.release ();\n+      return NULL;\n+    }\n+\n+  stmts.create (10);\n+  stmts_from_loop (loop, &stmts);\n+  rdg = build_empty_rdg (stmts.length ());\n+  datarefs.create (10);\n+  if (!create_rdg_vertices (rdg, stmts, loop, &datarefs))\n     {\n-      vec<gimple> stmts;\n-      stmts.create (10);\n-      stmts_from_loop (loop, &stmts);\n-      rdg = build_empty_rdg (stmts.length ());\n-      create_rdg_vertices (rdg, stmts, loop);\n-      create_rdg_edges (rdg, *dependence_relations);\n       stmts.release ();\n+      free_rdg (rdg);\n+      return NULL;\n+    }\n+  stmts.release ();\n+  dependence_relations.create (100);\n+  if (!compute_all_dependences (datarefs, &dependence_relations, loop_nest,\n+\t\t\t\tfalse)\n+      || !known_dependences_p (dependence_relations))\n+    {\n+      loop_nest.release ();\n+      datarefs.release ();\n+      dependence_relations.release ();\n+      free_rdg (rdg);\n+      return NULL;\n     }\n+  loop_nest.release ();\n+  create_rdg_edges (rdg, dependence_relations);\n+  dependence_relations.release ();\n \n   return rdg;\n }\n@@ -5204,11 +5223,17 @@ free_rdg (struct graph *rdg)\n       struct graph_edge *e;\n \n       for (e = v->succ; e; e = e->succ_next)\n-\tfree (e->data);\n+\t{\n+\t  free_dependence_relation (RDGE_RELATION (e));\n+\t  free (e->data);\n+\t}\n \n-      gimple_set_uid (RDGV_STMT (v), -1);\n-      free_data_refs (RDGV_DATAREFS (v));\n-      free (v->data);\n+      if (v->data)\n+\t{\n+\t  gimple_set_uid (RDGV_STMT (v), -1);\n+\t  free_data_refs (RDGV_DATAREFS (v));\n+\t  free (v->data);\n+\t}\n     }\n \n   free_graph (rdg);"}, {"sha": "2bc2adba5e19a3713d28064a629619bc01c1ed2e", "filename": "gcc/tree-data-ref.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/447dd9066575a8b92bd0369b809978f71a5235e5/gcc%2Ftree-data-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/447dd9066575a8b92bd0369b809978f71a5235e5/gcc%2Ftree-data-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.h?ref=447dd9066575a8b92bd0369b809978f71a5235e5", "patch": "@@ -585,11 +585,7 @@ typedef struct rdg_edge\n #define RDGE_LEVEL(E)       ((struct rdg_edge *) ((E)->data))->level\n #define RDGE_RELATION(E)    ((struct rdg_edge *) ((E)->data))->relation\n \n-struct graph *build_rdg (struct loop *,\n-\t\t\t vec<loop_p> *,\n-\t\t\t vec<ddr_p> *,\n-\t\t\t vec<data_reference_p> *);\n-struct graph *build_empty_rdg (int);\n+struct graph *build_rdg (struct loop *);\n void free_rdg (struct graph *);\n \n /* Return the index of the variable VAR in the LOOP_NEST array.  */"}, {"sha": "707a4b28127a28896aab49fc67e5eafa416b865d", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/447dd9066575a8b92bd0369b809978f71a5235e5/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/447dd9066575a8b92bd0369b809978f71a5235e5/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=447dd9066575a8b92bd0369b809978f71a5235e5", "patch": "@@ -635,7 +635,6 @@ static void\n rdg_flag_uses (struct graph *rdg, int u, partition_t partition, bitmap loops,\n \t       bitmap processed)\n {\n-  use_operand_p use_p;\n   struct vertex *x = &(rdg->vertices[u]);\n   gimple stmt = RDGV_STMT (x);\n   struct graph_edge *anti_dep = has_anti_or_output_dependence (x);\n@@ -652,26 +651,6 @@ rdg_flag_uses (struct graph *rdg, int u, partition_t partition, bitmap loops,\n \t\t\t\t       processed);\n     }\n \n-  if (gimple_code (stmt) != GIMPLE_PHI)\n-    {\n-      if ((use_p = gimple_vuse_op (stmt)) != NULL_USE_OPERAND_P)\n-\t{\n-\t  tree use = USE_FROM_PTR (use_p);\n-\n-\t  if (TREE_CODE (use) == SSA_NAME\n-\t      && !SSA_NAME_IS_DEFAULT_DEF (use))\n-\t    {\n-\t      gimple def_stmt = SSA_NAME_DEF_STMT (use);\n-\t      int v = rdg_vertex_for_stmt (rdg, def_stmt);\n-\n-\t      if (v >= 0\n-\t\t  && !already_processed_vertex_p (processed, v))\n-\t\trdg_flag_vertex_and_dependent (rdg, v, partition, loops,\n-\t\t\t\t\t       processed);\n-\t    }\n-\t}\n-    }\n-\n   if (is_gimple_assign (stmt) && has_upstream_mem_writes (u))\n     {\n       tree op0 = gimple_assign_lhs (stmt);\n@@ -1438,25 +1417,15 @@ distribute_loop (struct loop *loop, vec<gimple> stmts)\n   gimple s;\n   unsigned i;\n   vec<int> vertices;\n-  vec<ddr_p> dependence_relations;\n-  vec<data_reference_p> datarefs;\n-  vec<loop_p> loop_nest;\n-\n-  datarefs.create (10);\n-  dependence_relations.create (100);\n-  loop_nest.create (3);\n-  rdg = build_rdg (loop, &loop_nest, &dependence_relations, &datarefs);\n \n+  rdg = build_rdg (loop);\n   if (!rdg)\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file,\n \t\t \"FIXME: Loop %d not distributed: failed to build the RDG.\\n\",\n \t\t loop->num);\n \n-      free_dependence_relations (dependence_relations);\n-      free_data_refs (datarefs);\n-      loop_nest.release ();\n       return res;\n     }\n \n@@ -1482,9 +1451,6 @@ distribute_loop (struct loop *loop, vec<gimple> stmts)\n   res = ldist_gen (loop, rdg, vertices);\n   vertices.release ();\n   free_rdg (rdg);\n-  free_dependence_relations (dependence_relations);\n-  free_data_refs (datarefs);\n-  loop_nest.release ();\n   return res;\n }\n "}]}