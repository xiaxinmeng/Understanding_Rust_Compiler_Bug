{"sha": "717c478953c6ba2bd82e8ffba4b79d17dbf75626", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE3YzQ3ODk1M2M2YmEyYmQ4MmU4ZmZiYTRiNzlkMTdkYmY3NTYyNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-09-15T18:23:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-09-15T18:23:36Z"}, "message": "Makefile.in (dg_target_exps): Remove.\n\ngcc/\n\t* Makefile.in (dg_target_exps): Remove.\n\t(check_gcc_parallelize): Change to just an upper bound number.\n\t(check-%-subtargets): Always print the non-parallelized goals.\n\t(check_p_vars, check_p_comma, check_p_subwork): Remove.\n\t(check_p_count, check_p_numbers0, check_p_numbers1, check_p_numbers2,\n\tcheck_p_numbers3, check_p_numbers4, check_p_numbers5,\n\tcheck_p_numbers6): New variables.\n\t(check_p_numbers): Set to sequence from 1 to 9999.\n\t(check_p_subdirs): Set to sequence from 1 to minimum of\n\t$(check_p_count) and either GCC_TEST_PARALLEL_SLOTS env var if set,\n\tor 128.\n\t(check-%, check-parallel-%): Rewritten so that for parallelized\n\ttesting each job runs all the *.exp files, with\n\tGCC_RUNTEST_PARALLELIZE_DIR set in environment.\ngcc/go/\n\t* Make-lang.in (check_go_parallelize): Change to just an upper bound\n\tnumber.\ngcc/fortran/\n\t* Make-lang.in (check_gfortran_parallelize): Change to just an upper\n\tbound number.\ngcc/cp/\n\t* Make-lang.in (check_g++_parallelize): Change to just an upper bound\n\tnumber.\ngcc/objc/\n\t* Make-lang.in (check_objc_parallelize): Change to just an upper\n\tbound number.\ngcc/ada/\n\t* gcc-interface/Make-lang.in (check_acats_numbers0,\n\tcheck_acats_numbers1, check_acats_numbers2, check_acats_numbers3,\n\tcheck_acats_numbers4, check_acats_numbers5, check_acats_numbers6,\n\tcheck_acats_numbers, check_acats_subdirs): New variables.\n\t(check_acats_targets): Use $(check_acats_subdirs).\n\t(check-acats, check-acats%): Rewritten so that for parallelized\n\ttesting each job runs all the chapters files, with\n\tGCC_RUNTEST_PARALLELIZE_DIR set in environment.  Prepare the support\n\tdirectory sequentially and share it.\n\t(check-acats-subtargets): Always print just check-acats.\ngcc/testsuite/\n\t* lib/gcc-defs.exp (gcc_parallel_test_run_p,\n\tgcc_parallel_test_enable): New procedures.  If\n\tGCC_RUNTEST_PARALLELIZE_DIR is set in environment, override\n\truntest_file_p to invoke also gcc_parallel_test_run_p.\n\t* g++.dg/guality/guality.exp (check_guality): Save/restore\n\ttest_counts array around the body of the procedure.\n\t* gcc.dg/guality/guality.exp (check_guality): Likewise.\n\t* g++.dg/plugin/plugin.exp: Run all the tests serially\n\tby the first parallel runtest encountering it.\n\t* gcc.dg/plugin/plugin.exp: Likewise.\n\t* gcc.misc-tests/matrix1.exp: Likewise.\n\t* gcc.misc-tests/dhry.exp: Likewise.\n\t* gcc.misc-tests/acker1.exp: Likewise.\n\t* gcc.misc-tests/linkage.exp: Likewise.\n\t* gcc.misc-tests/mg.exp: Likewise.\n\t* gcc.misc-tests/mg-2.exp: Likewise.\n\t* gcc.misc-tests/sort2.exp: Likewise.\n\t* gcc.misc-tests/sieve.exp: Likewise.\n\t* gcc.misc-tests/options.exp: Likewise.\n\t* gcc.misc-tests/help.exp: Likewise.\n\t* go.test/go-test.exp (go-gc-tests): Use\n\tgcc_parallel_test_enable {0, 1} around all handling of\n\teach test.\n\t* objc.dg/gnu-encoding/gnu-encoding.exp: Likewise.\n\t* ada/acats/run_all.sh: Parallelize using mkdir inside of\n\ta shared directory.  Avoid forking and expr uses if\n\tshell supports $(()).\nlibstdc++-v3/\n\t* testsuite/Makefile.am (check_p_numbers0, check_p_numbers1,\n\tcheck_p_numbers2, check_p_numbers3, check_p_numbers4,\n\tcheck_p_numbers5, check_p_numbers6, check_p_numbers,\n\tcheck_p_subdirs): New variables.\n\t(check_DEJAGNU_normal_targets): Use check_p_subdirs.\n\t(check-DEJAGNU): Rewritten so that for parallelized\n\ttesting each job runs all the *.exp files, with\n\tGCC_RUNTEST_PARALLELIZE_DIR set in environment.\n\t* testsuite/Makefile.in: Regenerated.\n\t* testsuite/lib/libstdc++.exp (gcc_parallel_test_run_p,\n\tgcc_parallel_test_enable): New procedures.  If\n\tGCC_RUNTEST_PARALLELIZE_DIR is set in environment, override\n\truntest_file_p to invoke also gcc_parallel_test_run_p.\n\t* testsuite/libstdc++-abi/abi.exp: Run all the tests serially\n\tby the first parallel runtest encountering it.  Fix up path\n\tof the extract_symvers script.\n\t* testsuite/libstdc++-xmethods/xmethods.exp: Run all the tests\n\tserially by the first parallel runtest encountering it.  Run\n\tdg-finish even in case of error.\n\nFrom-SVN: r215273", "tree": {"sha": "3944dff95ffdf644d3a6d5436da882fffc5ac544", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3944dff95ffdf644d3a6d5436da882fffc5ac544"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/717c478953c6ba2bd82e8ffba4b79d17dbf75626", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/717c478953c6ba2bd82e8ffba4b79d17dbf75626", "html_url": "https://github.com/Rust-GCC/gccrs/commit/717c478953c6ba2bd82e8ffba4b79d17dbf75626", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/717c478953c6ba2bd82e8ffba4b79d17dbf75626/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "737a4826d093d89963618fe7e0a8a97f3c154909", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/737a4826d093d89963618fe7e0a8a97f3c154909", "html_url": "https://github.com/Rust-GCC/gccrs/commit/737a4826d093d89963618fe7e0a8a97f3c154909"}], "stats": {"total": 898, "additions": 673, "deletions": 225}, "files": [{"sha": "ef25462572a8aec28f605d9ab888c232441f5989", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -1,3 +1,20 @@\n+2014-09-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* Makefile.in (dg_target_exps): Remove.\n+\t(check_gcc_parallelize): Change to just an upper bound number.\n+\t(check-%-subtargets): Always print the non-parallelized goals.\n+\t(check_p_vars, check_p_comma, check_p_subwork): Remove.\n+\t(check_p_count, check_p_numbers0, check_p_numbers1, check_p_numbers2,\n+\tcheck_p_numbers3, check_p_numbers4, check_p_numbers5,\n+\tcheck_p_numbers6): New variables.\n+\t(check_p_numbers): Set to sequence from 1 to 9999.\n+\t(check_p_subdirs): Set to sequence from 1 to minimum of\n+\t$(check_p_count) and either GCC_TEST_PARALLEL_SLOTS env var if set,\n+\tor 128.\n+\t(check-%, check-parallel-%): Rewritten so that for parallelized\n+\ttesting each job runs all the *.exp files, with\n+\tGCC_RUNTEST_PARALLELIZE_DIR set in environment.\n+\n 2014-09-15  David Malcolm  <dmalcolm@redhat.com>\n \n \t* config/arc/arc-protos.h (arc_attr_type): Strengthen param from"}, {"sha": "6f251a517387e51c59f94a4ad6629603021f4a77", "filename": "gcc/Makefile.in", "status": "modified", "additions": 56, "deletions": 89, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -513,34 +513,10 @@ xm_include_list=@xm_include_list@\n xm_defines=@xm_defines@\n lang_checks=\n lang_checks_parallelized=\n-dg_target_exps:=aarch64.exp,alpha.exp,arm.exp,avr.exp,bfin.exp,cris.exp\n-dg_target_exps:=$(dg_target_exps),epiphany.exp,frv.exp,i386.exp,ia64.exp\n-dg_target_exps:=$(dg_target_exps),m68k.exp,microblaze.exp,mips.exp,powerpc.exp\n-dg_target_exps:=$(dg_target_exps),rx.exp,s390.exp,sh.exp,sparc.exp,spu.exp\n-dg_target_exps:=$(dg_target_exps),tic6x.exp,xstormy16.exp\n-# This lists a couple of test files that take most time during check-gcc.\n-# When doing parallelized check-gcc, these can run in parallel with the\n-# remaining tests.  Each word in this variable stands for work for one\n-# make goal and one extra make goal is added to handle all the *.exp\n-# files not handled explicitly already.  If multiple *.exp files\n-# should be run in the same runtest invocation (usually if they aren't\n-# very long running, but still should be split of from the check-parallel-$lang\n-# remaining tests runtest invocation), they should be concatenated with commas.\n-# Note that [a-zA-Z] wildcards need to have []s prefixed with \\ (needed\n-# by tcl) and as the *.exp arguments are mached both as is and with\n-# */ prefixed to it in runtest_file_p, it is usually desirable to include\n-# a subdirectory name.\n-check_gcc_parallelize=execute.exp=execute/2* \\\n-\t\t      execute.exp=execute/\\[013-9a-fA-F\\]* \\\n-\t\t      execute.exp=execute/\\[pP\\]*,dg.exp \\\n-\t\t      execute.exp=execute/\\[g-oq-zG-OQ-Z\\]*,compile.exp=compile/2* \\\n-\t\t      compile.exp=compile/\\[9pP\\]*,builtins.exp \\\n-\t\t      compile.exp=compile/\\[013-8a-oq-zA-OQ-Z\\]* \\\n-\t\t      dg-torture.exp,ieee.exp \\\n-\t\t      vect.exp,unsorted.exp \\\n-\t\t      guality.exp \\\n-\t\t      struct-layout-1.exp,stackalign.exp \\\n-\t\t      $(dg_target_exps)\n+# Upper limit to which it is useful to parallelize this lang target.\n+# It doesn't make sense to try e.g. 128 goals for small testsuites\n+# like objc or go.\n+check_gcc_parallelize=10000\n lang_opt_files=@lang_opt_files@ $(srcdir)/c-family/c.opt $(srcdir)/common.opt\n lang_specs_files=@lang_specs_files@\n lang_tree_files=@lang_tree_files@\n@@ -3631,27 +3607,34 @@ $(filter-out $(lang_checks_parallelized),$(lang_checks)): check-% : site.exp\n \t    export TCL_LIBRARY ; fi ; \\\n \t$(RUNTEST) --tool $* $(RUNTESTFLAGS))\n \n-$(patsubst %,%-subtargets,$(filter-out $(lang_checks_parallelized),$(lang_checks))): check-%-subtargets:\n+$(patsubst %,%-subtargets,$(lang_checks)): check-%-subtargets:\n \t@echo check-$*\n \n check_p_tool=$(firstword $(subst _, ,$*))\n-check_p_vars=$(check_$(check_p_tool)_parallelize)\n+check_p_count=$(check_$(check_p_tool)_parallelize)\n check_p_subno=$(word 2,$(subst _, ,$*))\n-check_p_comma=,\n-check_p_subwork=$(subst $(check_p_comma), ,$(if $(check_p_subno),$(word $(check_p_subno),$(check_p_vars))))\n-check_p_numbers=1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n+check_p_numbers0:=1 2 3 4 5 6 7 8 9\n+check_p_numbers1:=0 $(check_p_numbers0)\n+check_p_numbers2:=$(foreach i,$(check_p_numbers0),$(addprefix $(i),$(check_p_numbers1)))\n+check_p_numbers3:=$(addprefix 0,$(check_p_numbers1)) $(check_p_numbers2)\n+check_p_numbers4:=$(foreach i,$(check_p_numbers0),$(addprefix $(i),$(check_p_numbers3)))\n+check_p_numbers5:=$(addprefix 0,$(check_p_numbers3)) $(check_p_numbers4)\n+check_p_numbers6:=$(foreach i,$(check_p_numbers0),$(addprefix $(i),$(check_p_numbers5)))\n+check_p_numbers:=$(check_p_numbers0) $(check_p_numbers2) $(check_p_numbers4) $(check_p_numbers6)\n check_p_subdir=$(subst _,,$*)\n-check_p_subdirs=$(wordlist 1,$(words $(check_$*_parallelize)),$(check_p_numbers))\n+check_p_subdirs=$(wordlist 1,$(check_p_count),$(wordlist 1, \\\n+\t\t$(if $(GCC_TEST_PARALLEL_SLOTS),$(GCC_TEST_PARALLEL_SLOTS),128), \\\n+\t\t$(check_p_numbers)))\n \n # For parallelized check-% targets, this decides whether parallelization\n # is desirable (if -jN is used and RUNTESTFLAGS doesn't contain anything\n # but optional --target_board or --extra_opts arguments).  If desirable,\n # recursive make is run with check-parallel-$lang{,1,2,3,4,5} etc. goals,\n # which can be executed in parallel, as they are run in separate directories.\n-# check-parallel-$lang{1,2,3,4,5} etc. goals invoke runtest with the longest\n-# running *.exp files from the testsuite, as determined by check_$lang_parallelize\n-# variable.  The check-parallel-$lang goal in that case invokes runtest with\n-# all the remaining *.exp files not handled by the separate goals.\n+# check-parallel-$lang{,1,2,3,4,5} etc. goals invoke runtest with\n+# GCC_RUNTEST_PARALLELIZE_DIR var in the environment and runtest_file_p\n+# dejaGNU procedure is overridden to additionally synchronize through\n+# a $lang-parallel directory which tests will be run by which runtest instance.\n # Afterwards contrib/dg-extract-results.sh is used to merge the sum and log\n # files.  If parallelization isn't desirable, only one recursive make\n # is run with check-parallel-$lang goal and check_$lang_parallelize variable\n@@ -3662,76 +3645,60 @@ check_p_subdirs=$(wordlist 1,$(words $(check_$*_parallelize)),$(check_p_numbers)\n # to lang_checks_parallelized variable and define check_$lang_parallelize\n # variable (see above check_gcc_parallelize description).\n $(lang_checks_parallelized): check-% : site.exp\n-\t@if [ -z \"$(filter-out --target_board=%,$(filter-out --extra_opts%,$(RUNTESTFLAGS)))\" ] \\\n-\t    && [ \"$(filter -j, $(MFLAGS))\" = \"-j\" ]; then \\\n+\t-rm -rf $(TESTSUITEDIR)/$*-parallel\n+\t@if [ \"$(filter -j, $(MFLAGS))\" = \"-j\" ]; then \\\n+\t  test -d $(TESTSUITEDIR) || mkdir $(TESTSUITEDIR) || true; \\\n+\t  test -d $(TESTSUITEDIR)/$*-parallel || mkdir $(TESTSUITEDIR)/$*-parallel || true; \\\n+\t  GCC_RUNTEST_PARALLELIZE_DIR=`${PWD_COMMAND}`/$(TESTSUITEDIR)/$(check_p_tool)-parallel ; \\\n+\t  export GCC_RUNTEST_PARALLELIZE_DIR ; \\\n \t  $(MAKE) TESTSUITEDIR=\"$(TESTSUITEDIR)\" RUNTESTFLAGS=\"$(RUNTESTFLAGS)\" \\\n \t    check-parallel-$* \\\n \t    $(patsubst %,check-parallel-$*_%, $(check_p_subdirs)); \\\n-\t  for file in $(TESTSUITEDIR)/$*/$* \\\n-\t\t      $(patsubst %,$(TESTSUITEDIR)/$*%/$*,$(check_p_subdirs));\\\n+\t  sums= ; logs= ; \\\n+\t  for dir in $(TESTSUITEDIR)/$* \\\n+\t\t     $(patsubst %,$(TESTSUITEDIR)/$*%,$(check_p_subdirs));\\\n \t  do \\\n-\t    mv -f $$file.sum $$file.sum.sep; mv -f $$file.log $$file.log.sep; \\\n+\t    if [ -d $$dir ]; then \\\n+\t      mv -f $$dir/$*.sum $$dir/$*.sum.sep; mv -f $$dir/$*.log $$dir/$*.log.sep; \\\n+\t      sums=\"$$sums $$dir/$*.sum.sep\"; logs=\"$$logs $$dir/$*.log.sep\"; \\\n+\t    fi; \\\n \t  done; \\\n-\t  $(SHELL) $(srcdir)/../contrib/dg-extract-results.sh \\\n-\t    $(TESTSUITEDIR)/$*/$*.sum.sep \\\n-\t    $(patsubst %,$(TESTSUITEDIR)/$*%/$*.sum.sep,$(check_p_subdirs)) \\\n+\t  $(SHELL) $(srcdir)/../contrib/dg-extract-results.sh $$sums \\\n \t    > $(TESTSUITEDIR)/$*/$*.sum; \\\n-\t  $(SHELL) $(srcdir)/../contrib/dg-extract-results.sh -L \\\n-\t    $(TESTSUITEDIR)/$*/$*.log.sep \\\n-\t    $(patsubst %,$(TESTSUITEDIR)/$*%/$*.log.sep,$(check_p_subdirs)) \\\n+\t  $(SHELL) $(srcdir)/../contrib/dg-extract-results.sh -L $$logs \\\n \t    > $(TESTSUITEDIR)/$*/$*.log; \\\n+\t  rm -rf $(TESTSUITEDIR)/$*-parallel || true; \\\n \telse \\\n \t  $(MAKE) TESTSUITEDIR=\"$(TESTSUITEDIR)\" RUNTESTFLAGS=\"$(RUNTESTFLAGS)\" \\\n \t    check_$*_parallelize= check-parallel-$*; \\\n \tfi\n \n-# Just print the parallelized subtargets for those that want to split\n-# the testing across machines.\n-$(patsubst %,%-subtargets,$(lang_checks_parallelized)): check-%-subtargets:\n-\t@echo check-parallel-$* \\\n-\t  $(patsubst %,check-parallel-$*_%, $(check_p_subdirs))\n-\n-# In the if [ -n \"$(check_p_subno)\" ] case runtest should be given the name of\n-# the given *.exp file(s).  See comment above check_gcc_parallelize variable\n-# for details on the content of these variables.\n-#\n-# In the elif [ -n \"$(check_p_vars)\" ] case runtest should be given\n-# names of all the *.exp files for this tool that aren't already handled by\n-# other goals.  First it finds all the *.exp files for this tool, then\n-# prunes those already specified in check_$lang_parallelize or duplicates.\n-#\n-# Otherwise check-$lang isn't parallelized and runtest is invoked just with\n-# the $(RUNTESTFLAGS) arguments.\n check-parallel-% : site.exp\n \t-test -d plugin || mkdir plugin\n \t-test -d $(TESTSUITEDIR) || mkdir $(TESTSUITEDIR)\n \ttest -d $(TESTSUITEDIR)/$(check_p_subdir) || mkdir $(TESTSUITEDIR)/$(check_p_subdir)\n \t-(rootme=`${PWD_COMMAND}`; export rootme; \\\n \tsrcdir=`cd ${srcdir}; ${PWD_COMMAND}` ; export srcdir ; \\\n-\tcd $(TESTSUITEDIR)/$(check_p_subdir); \\\n-\trm -f tmp-site.exp; \\\n-\tsed '/set tmpdir/ s|testsuite$$|$(TESTSUITEDIR)/$(check_p_subdir)|' \\\n+\tif [ -n \"$(check_p_subno)\" ] \\\n+\t   && [ -n \"$$GCC_RUNTEST_PARALLELIZE_DIR\" ] \\\n+\t   && [ -f $(TESTSUITEDIR)/$(check_p_tool)-parallel/finished ]; then \\\n+\t  rm -rf $(TESTSUITEDIR)/$(check_p_subdir); \\\n+\telse \\\n+\t  cd $(TESTSUITEDIR)/$(check_p_subdir); \\\n+\t  rm -f tmp-site.exp; \\\n+\t  sed '/set tmpdir/ s|testsuite$$|$(TESTSUITEDIR)/$(check_p_subdir)|' \\\n \t\t< ../../site.exp > tmp-site.exp; \\\n-\t$(SHELL) $${srcdir}/../move-if-change tmp-site.exp site.exp; \\\n-\tEXPECT=${EXPECT} ; export EXPECT ; \\\n-\tif [ -f $${rootme}/../expect/expect ] ; then  \\\n-\t   TCL_LIBRARY=`cd .. ; cd $${srcdir}/../tcl/library ; ${PWD_COMMAND}` ; \\\n-\t    export TCL_LIBRARY ; fi ; \\\n-\truntestflags= ; \\\n-\tif [ -n \"$(check_p_subno)\" ] ; then \\\n-\t  runtestflags=\"$(check_p_subwork)\"; \\\n-\telif [ -n \"$(check_p_vars)\" ] ; then \\\n-\t  parts=\"`echo ' $(strip $(subst $(check_p_comma), ,$(check_p_vars))) ' \\\n-\t\t  | sed 's/=[^ ]* / /g'`\"; \\\n-\t  for part in `find $$srcdir/testsuite/$(check_p_tool)* -name \\*.exp` ; do \\\n-\t    part=`basename $$part` ; \\\n-\t    case \" $$parts $$runtestflags \" in \\\n-\t      *\" $$part \"*) ;; \\\n-\t      *) runtestflags=\"$$runtestflags $$part\" ;; \\\n-\t    esac ; \\\n-\t  done ; \\\n-\tfi ; \\\n-\t$(RUNTEST) --tool $(check_p_tool) $(RUNTESTFLAGS) $$runtestflags)\n+\t  $(SHELL) $${srcdir}/../move-if-change tmp-site.exp site.exp; \\\n+\t  EXPECT=${EXPECT} ; export EXPECT ; \\\n+\t  if [ -f $${rootme}/../expect/expect ] ; then  \\\n+\t    TCL_LIBRARY=`cd .. ; cd $${srcdir}/../tcl/library ; ${PWD_COMMAND}` ; \\\n+\t    export TCL_LIBRARY ; \\\n+\t  fi ; \\\n+\t  $(RUNTEST) --tool $(check_p_tool) $(RUNTESTFLAGS); \\\n+\t  if [ -n \"$$GCC_RUNTEST_PARALLELIZE_DIR\" ] ; then \\\n+\t    touch $${rootme}/$(TESTSUITEDIR)/$(check_p_tool)-parallel/finished; \\\n+\t  fi ; \\\n+\tfi )\n \n # QMTest targets\n "}, {"sha": "3bb099cdf51a59cc06f1669aed2bcc07b0d23408", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -1,3 +1,16 @@\n+2014-09-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc-interface/Make-lang.in (check_acats_numbers0,\n+\tcheck_acats_numbers1, check_acats_numbers2, check_acats_numbers3,\n+\tcheck_acats_numbers4, check_acats_numbers5, check_acats_numbers6,\n+\tcheck_acats_numbers, check_acats_subdirs): New variables.\n+\t(check_acats_targets): Use $(check_acats_subdirs).\n+\t(check-acats, check-acats%): Rewritten so that for parallelized\n+\ttesting each job runs all the chapters files, with\n+\tGCC_RUNTEST_PARALLELIZE_DIR set in environment.  Prepare the support\n+\tdirectory sequentially and share it.\n+\t(check-acats-subtargets): Always print just check-acats.\n+\n 2014-08-25  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-interface/utils.c (rest_of_subprog_body_compilation): Adjust to"}, {"sha": "e11794f92378eba45d2edb0ff6d9e0a7a61338f1", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 34, "deletions": 13, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -862,43 +862,64 @@ check-ada-subtargets: check-acats-subtargets check-gnat-subtargets\n \n ACATSDIR = $(TESTSUITEDIR)/ada/acats\n \n-check_acats_targets = $(patsubst %,check-acats%, 0 1 2)\n+check_acats_numbers0:=1 2 3 4 5 6 7 8 9\n+check_acats_numbers1:=0 $(check_acats_numbers0)\n+check_acats_numbers2:=$(foreach i,$(check_acats_numbers0),$(addprefix $(i),$(check_acats_numbers1)))\n+check_acats_numbers3:=$(addprefix 0,$(check_acats_numbers1)) $(check_acats_numbers2)\n+check_acats_numbers4:=$(foreach i,$(check_acats_numbers0),$(addprefix $(i),$(check_acats_numbers3)))\n+check_acats_numbers5:=$(addprefix 0,$(check_acats_numbers3)) $(check_acats_numbers4)\n+check_acats_numbers6:=$(foreach i,$(check_acats_numbers0),$(addprefix $(i),$(check_acats_numbers5)))\n+check_acats_numbers:=$(check_acats_numbers0) $(check_acats_numbers2) $(check_acats_numbers4) $(check_acats_numbers6)\n+check_acats_subdirs=$(wordlist 1, \\\n+\t\t    $(if $(GCC_TEST_PARALLEL_SLOTS),$(GCC_TEST_PARALLEL_SLOTS),128), \\\n+\t\t    $(check_acats_numbers))\n+check_acats_targets = $(addprefix check-acats, $(check_acats_subdirs))\n \n check-acats:\n \t@test -d $(ACATSDIR) || mkdir -p $(ACATSDIR); \\\n \trootme=`${PWD_COMMAND}`; export rootme; \\\n \tEXPECT=$(EXPECT); export EXPECT; \\\n \tif [ -z \"$(CHAPTERS)\" ] && [ \"$(filter -j, $(MFLAGS))\" = \"-j\" ]; \\\n \tthen \\\n+\t  rm -rf $(ACATSDIR)-parallel; \\\n+\t  mkdir $(ACATSDIR)-parallel; \\\n+\t  ( testdir=`cd ${srcdir}/${ACATSDIR} && ${PWD_COMMAND}`; \\\n+\t    export testdir; \\\n+\t    cd $(ACATSDIR) && $(SHELL) $${testdir}/run_acats NONE ) \\\n+\t    || exit 1; \\\n+\t  GCC_RUNTEST_PARALLELIZE_DIR=$$rootme/$(ACATSDIR)-parallel; \\\n+\t  export GCC_RUNTEST_PARALLELIZE_DIR; \\\n \t  $(MAKE) $(check_acats_targets); \\\n-\t  for idx in 0 1 2; do \\\n+\t  rm -rf $(ACATSDIR)-parallel; \\\n+\t  acats_sums= ; acats_logs= ; \\\n+\t  for idx in \"\" $(check_acats_subdirs); do \\\n+\t    [ -d $(ACATSDIR)$$idx ] || continue; \\\n \t    mv -f $(ACATSDIR)$$idx/acats.sum $(ACATSDIR)$$idx/acats.sum.sep; \\\n \t    mv -f $(ACATSDIR)$$idx/acats.log $(ACATSDIR)$$idx/acats.log.sep; \\\n+\t    acats_sums=\"$$acats_sums $(ACATSDIR)$$idx/acats.sum.sep\"; \\\n+\t    acats_logs=\"$$acats_logs $(ACATSDIR)$$idx/acats.log.sep\"; \\\n \t  done; \\\n \t  $(SHELL) $(srcdir)/../contrib/dg-extract-results.sh \\\n-\t    $(ACATSDIR)0/acats.sum.sep $(ACATSDIR)1/acats.sum.sep \\\n-\t    $(ACATSDIR)2/acats.sum.sep > $(ACATSDIR)/acats.sum; \\\n+\t    $$acats_sums > $(ACATSDIR)/acats.sum; \\\n \t  $(SHELL) $(srcdir)/../contrib/dg-extract-results.sh -L \\\n-\t    $(ACATSDIR)0/acats.log.sep $(ACATSDIR)1/acats.log.sep \\\n-\t    $(ACATSDIR)2/acats.log.sep > $(ACATSDIR)/acats.log; \\\n+\t    $$acats_logs > $(ACATSDIR)/acats.log; \\\n \t  exit 0; \\\n \tfi; \\\n \ttestdir=`cd ${srcdir}/${ACATSDIR} && ${PWD_COMMAND}`; \\\n \texport testdir; cd $(ACATSDIR) && $(SHELL) $${testdir}/run_acats $(CHAPTERS)\n \n check-acats-subtargets:\n-\t@echo $(check_acats_targets)\n+\t@echo check-acats\n \n # Parallelized check-acats\n $(check_acats_targets): check-acats%:\n+\tif [ -f $$GCC_RUNTEST_PARALLELIZE_DIR/finished ]; then \\\n+\t  rm -rf $(ACATSDIR)$*; exit 0; \\\n+\tfi; \\\n \ttest -d $(ACATSDIR)$* || mkdir -p $(ACATSDIR)$*; \\\n \ttestdir=`cd ${srcdir}/${ACATSDIR} && ${PWD_COMMAND}`; \\\n-\tcase \"$*\" in \\\n-\t  0) chapters=\"`cd $$testdir/tests; echo [a-b]* c[0-4]*`\";; \\\n-\t  1) chapters=\"`cd $$testdir/tests; echo c[5-9ab]*`\";; \\\n-\t  2) chapters=\"`cd $$testdir/tests; echo c[c-z]* [d-z]*`\";; \\\n-\tesac; \\\n-\texport testdir; cd $(ACATSDIR)$* && $(SHELL) $${testdir}/run_acats $$chapters\n+\texport testdir; cd $(ACATSDIR)$* && $(SHELL) $${testdir}/run_acats\n+\ttouch $$GCC_RUNTEST_PARALLELIZE_DIR/finished\n \n .PHONY: check-acats $(check_acats_targets)\n \f"}, {"sha": "fe312364ccc884a05197cd8e0ac90c347047bcb1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -1,3 +1,8 @@\n+2014-09-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* Make-lang.in (check_g++_parallelize): Change to just an upper bound\n+\tnumber.\n+\n 2014-09-13  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/60862"}, {"sha": "36f9583d4b170d2c2533b5a7bffde34db191f2c8", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -156,11 +156,7 @@ check-c++-subtargets : check-g++-subtargets\n lang_checks += check-g++\n lang_checks_parallelized += check-g++\n # For description see comment above check_gcc_parallelize in gcc/Makefile.in.\n-check_g++_parallelize = old-deja.exp \\\n-\tdg.exp=g++.dg/[0-9A-Za-bd-su-z]* \\\n-\tdg.exp=g++.dg/[ct]* \\\n-\tdg.exp=c-c++-common/*,dg-torture.exp\n-\n+check_g++_parallelize = 10000\n #\f\n # Install hooks:\n # cc1plus is installed elsewhere as part of $(COMPILERS)."}, {"sha": "fe5628b827234a64afd7b468244c335a31886ba7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -1,3 +1,8 @@\n+2014-09-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* Make-lang.in (check_gfortran_parallelize): Change to just an upper\n+\tbound number.\n+\n 2014-09-13  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/63252"}, {"sha": "ca0a4e603af3562e57c409fc2b00b0c6ce8307d7", "filename": "gcc/fortran/Make-lang.in", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ffortran%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ffortran%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FMake-lang.in?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -168,12 +168,7 @@ check-fortran-subtargets : check-gfortran-subtargets\n lang_checks += check-gfortran\n lang_checks_parallelized += check-gfortran\n # For description see comment above check_gcc_parallelize in gcc/Makefile.in.\n-check_gfortran_parallelize = dg.exp=gfortran.dg/\\[adAD\\]* \\\n-\t\t\t     dg.exp=gfortran.dg/\\[bcBC\\]* \\\n-\t\t\t     dg.exp=gfortran.dg/\\[nopNOP\\]* \\\n-\t\t\t     dg.exp=gfortran.dg/\\[isuvISUV\\]* \\\n-\t\t\t     dg.exp=gfortran.dg/\\[efhkqrxzEFHKQRXZ\\]* \\\n-\t\t\t     dg.exp=gfortran.dg/\\[0-9gjlmtwyGJLMTWY\\]*\n+check_gfortran_parallelize = 10000\n \n # GFORTRAN documentation.\n GFORTRAN_TEXI = \\"}, {"sha": "06a83f1320f78cc37717cd445701dd76708455be", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -1,3 +1,8 @@\n+2014-09-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* Make-lang.in (check_go_parallelize): Change to just an upper bound\n+\tnumber.\n+\n 2014-09-03  Chris Manghane  <cmang@google.com>\n \n \t* go-gcc.cc (Gcc_backend::implicit_variable): Remove init"}, {"sha": "c68912170568af4ae944de4e7655decf0cc2aafe", "filename": "gcc/go/Make-lang.in", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Fgo%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Fgo%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FMake-lang.in?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -131,11 +131,7 @@ go.srcman: doc/gccgo.1\n \n lang_checks += check-go\n lang_checks_parallelized += check-go\n-check_go_parallelize = go-test.exp=*/test/\\[0-57-9a-bd-hj-qs-zA-Z\\]* \\\n-\t\t       go-test.exp=*/test/c* \\\n-\t\t       go-test.exp=*/test/i* \\\n-\t\t       go-test.exp=*/test/r* \\\n-\t\t       go-test.exp=*/test/6*\n+check_go_parallelize = 10\n \n # Install hooks.\n "}, {"sha": "e0fd501ba82b017f53f853b6786a23ad0695fc10", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -1,3 +1,8 @@\n+2014-09-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* Make-lang.in (check_objc_parallelize): Change to just an upper\n+\tbound number.\n+\n 2014-07-14  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* objc-act.c (objc_common_tree_size): New function."}, {"sha": "73570cd807df6b84554b0d0bc2e2f9f07b6721db", "filename": "gcc/objc/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Fobjc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Fobjc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMake-lang.in?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -96,7 +96,7 @@ lang_checks += check-objc\n # The following allows you to do 'make check-objc -j2'.  The\n # execute.exp tests will be run in parallel with all the other ones.\n lang_checks_parallelized += check-objc\n-check_objc_parallelize = gnu-encoding.exp execute.exp exceptions.exp\n+check_objc_parallelize = 6\n \n #\f\n # Install hooks:"}, {"sha": "d426cd1911680f2cdbec37d1f53a7265bb4c9bed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -1,3 +1,33 @@\n+2014-09-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* lib/gcc-defs.exp (gcc_parallel_test_run_p,\n+\tgcc_parallel_test_enable): New procedures.  If\n+\tGCC_RUNTEST_PARALLELIZE_DIR is set in environment, override\n+\truntest_file_p to invoke also gcc_parallel_test_run_p.\n+\t* g++.dg/guality/guality.exp (check_guality): Save/restore\n+\ttest_counts array around the body of the procedure.\n+\t* gcc.dg/guality/guality.exp (check_guality): Likewise.\n+\t* g++.dg/plugin/plugin.exp: Run all the tests serially\n+\tby the first parallel runtest encountering it.\n+\t* gcc.dg/plugin/plugin.exp: Likewise.\n+\t* gcc.misc-tests/matrix1.exp: Likewise.\n+\t* gcc.misc-tests/dhry.exp: Likewise.\n+\t* gcc.misc-tests/acker1.exp: Likewise.\n+\t* gcc.misc-tests/linkage.exp: Likewise.\n+\t* gcc.misc-tests/mg.exp: Likewise.\n+\t* gcc.misc-tests/mg-2.exp: Likewise.\n+\t* gcc.misc-tests/sort2.exp: Likewise.\n+\t* gcc.misc-tests/sieve.exp: Likewise.\n+\t* gcc.misc-tests/options.exp: Likewise.\n+\t* gcc.misc-tests/help.exp: Likewise.\n+\t* go.test/go-test.exp (go-gc-tests): Use\n+\tgcc_parallel_test_enable {0, 1} around all handling of\n+\teach test.\n+\t* objc.dg/gnu-encoding/gnu-encoding.exp: Likewise.\n+\t* ada/acats/run_all.sh: Parallelize using mkdir inside of\n+\ta shared directory.  Avoid forking and expr uses if\n+\tshell supports $(()).\n+\n 2014-09-14  David Sherwood  <david.sherwood@arm.com>\n \n \t* gcc.target/aarch64/vdup_lane_2.c (force_simd): Emit simd mov."}, {"sha": "a084d6b3354c9d7baf7c233201f8e48eecbb8557", "filename": "gcc/testsuite/ada/acats/run_all.sh", "status": "modified", "additions": 78, "deletions": 9, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fada%2Facats%2Frun_all.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fada%2Facats%2Frun_all.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fada%2Facats%2Frun_all.sh?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -18,6 +18,21 @@ target_run () {\n \n # End of customization section.\n \n+# Perform arithmetic evaluation on the ARGs, and store the result in the\n+# global $as_val. Take advantage of shells that can avoid forks. The arguments\n+# must be portable across $(()) and expr.\n+if (eval \"test \\$(( 1 + 1 )) = 2\") 2>/dev/null; then :\n+  eval 'as_fn_arith ()\n+  {\n+    as_val=$(( $* ))\n+  }'\n+else\n+  as_fn_arith ()\n+  {\n+    as_val=`expr \"$@\" || test $? -eq 1`\n+  }\n+fi # as_fn_arith\n+\n display_noeol () {\n   printf \"$@\"\n   printf \"$@\" >> $dir/acats.sum\n@@ -90,6 +105,18 @@ display `type gnatmake`\n gnatls -v >> $dir/acats.log\n display \"\"\n \n+if [ -n \"$GCC_RUNTEST_PARALLELIZE_DIR\" ]; then\n+  dir_support=$dir/../acats/support\n+\n+  rm -rf $dir/run\n+  mv $dir/tests $dir/tests.$$ 2> /dev/null\n+  rm -rf $dir/tests.$$ &\n+  mkdir -p $dir/run\n+\n+  cp -pr $dir/../acats/tests $dir/\n+else\n+  dir_support=$dir/support\n+\n display \"\t\t=== acats support ===\"\n display_noeol \"Generating support files...\"\n \n@@ -186,6 +213,9 @@ target_gnatmake -c -gnato -gnatE *.adb >> $dir/acats.log 2>&1\n \n display \" done.\"\n display \"\"\n+\n+fi\n+\n display \"\t\t=== acats tests ===\"\n \n if [ $# -eq 0 ]; then\n@@ -197,8 +227,14 @@ fi\n glob_countn=0\n glob_countok=0\n glob_countu=0\n+par_count=0\n+par_countm=0\n+par_last=\n \n for chapter in $chapters; do\n+   # Used to generate support once and finish after that.\n+   [ \"$chapter\" = \"NONE\" ] && continue\n+\n    display Running chapter $chapter ...\n \n    if [ ! -d $dir/tests/$chapter ]; then\n@@ -209,13 +245,43 @@ for chapter in $chapters; do\n \n    cd $dir/tests/$chapter\n    ls *.a *.ada *.adt *.am *.dep 2> /dev/null | sed -e 's/\\(.*\\)\\..*/\\1/g' | \\\n-   cut -c1-7 | sort | uniq | comm -23 - $dir/support/norun.lst \\\n+   cut -c1-7 | sort | uniq | comm -23 - $dir_support/norun.lst \\\n      > $dir/tests/$chapter/${chapter}.lst \n    countn=`wc -l < $dir/tests/$chapter/${chapter}.lst`\n-   glob_countn=`expr $glob_countn + $countn`\n-   counti=0\n+   as_fn_arith $glob_countn + $countn\n+   glob_countn=$as_val\n    for i in `cat $dir/tests/$chapter/${chapter}.lst`; do \n-      counti=`expr $counti + 1`\n+\n+      # If running multiple run_all.sh jobs in parallel, decide\n+      # if we should run this test in the current instance.\n+      if [ -n \"$GCC_RUNTEST_PARALLELIZE_DIR\" ]; then\n+\t case \"$i\" in\n+\t    # Ugh, some tests have inter-test dependencies, those\n+\t    # tests have to be scheduled on the same parallel instance\n+\t    # as previous test.\n+\t    ce2108f | ce2108h | ce3112d) ;;\n+\t    # All others can be hopefully scheduled freely.\n+\t    *)\n+\t       as_fn_arith $par_countm + 1\n+\t       par_countm=$as_val\n+\t       [ $par_countm -eq 10 ] && par_countm=0\n+\t       if [ $par_countm -eq 1 ]; then\n+\t\t  as_fn_arith $par_count + 1\n+\t\t  par_count=$as_val\n+\t\t  if mkdir $GCC_RUNTEST_PARALLELIZE_DIR/$par_count; then\n+\t\t     par_last=1\n+\t\t  else\n+\t\t     par_last=\n+\t\t  fi\n+\t       fi;;\n+\t esac\n+\t if [ -z \"$par_last\" ]; then\n+\t    as_fn_arith $glob_countn - 1\n+\t    glob_countn=$as_val\n+\t    continue\n+\t fi\n+      fi\n+\n       extraflags=\"-gnat95\"\n       grep $i $testdir/overflow.lst > /dev/null 2>&1\n       if [ $? -eq 0 ]; then\n@@ -254,7 +320,7 @@ for chapter in $chapters; do\n       echo \"BUILD $main\" >> $dir/acats.log\n       EXTERNAL_OBJECTS=\"\"\n       case $i in\n-        cxb30*) EXTERNAL_OBJECTS=\"$dir/support/cxb30040.o $dir/support/cxb30060.o $dir/support/cxb30130.o $dir/support/cxb30131.o\";;\n+        cxb30*) EXTERNAL_OBJECTS=\"$dir_support/cxb30040.o $dir_support/cxb30060.o $dir_support/cxb30130.o $dir_support/cxb30131.o\";;\n         ca1020e) rm -f ca1020e_func1.adb ca1020e_func2.adb ca1020e_proc1.adb ca1020e_proc2.adb > /dev/null 2>&1;;\n         ca14028) rm -f ca14028_func2.ads ca14028_func3.ads ca14028_proc1.ads ca14028_proc3.ads > /dev/null 2>&1;;\n       esac\n@@ -265,7 +331,7 @@ for chapter in $chapters; do\n          continue\n       fi\n \n-      target_gnatmake $extraflags -I$dir/support $main >> $dir/acats.log 2>&1\n+      target_gnatmake $extraflags -I$dir_support $main >> $dir/acats.log 2>&1\n       if [ $? -ne 0 ]; then\n          display \"FAIL:\t$i\"\n          failed=\"${failed}${i} \"\n@@ -290,12 +356,15 @@ for chapter in $chapters; do\n             failed=\"${failed}${i} \"\n          else\n             log \"UNSUPPORTED:\t$i\"\n-            glob_countn=`expr $glob_countn - 1`\n-            glob_countu=`expr $glob_countu + 1`\n+            as_fn_arith $glob_countn - 1\n+            glob_countn=$as_val\n+            as_fn_arith $glob_countu + 1\n+            glob_countu=$as_val\n          fi\n       else\n          log \"PASS:\t$i\"\n-         glob_countok=`expr $glob_countok + 1`\n+         as_fn_arith $glob_countok + 1\n+         glob_countok=$as_val\n       fi\n       clean_dir\n    done"}, {"sha": "121522c3515e1aeae9e2f7f17a89107a9feae77d", "filename": "gcc/testsuite/g++.dg/guality/guality.exp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fguality%2Fguality.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fguality%2Fguality.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fguality%2Fguality.exp?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -14,6 +14,11 @@ if { [istarget \"powerpc-ibm-aix*\"] } {\n }\n \n proc check_guality {args} {\n+    # Don't count check_guality as PASS, or FAIL etc., that would make\n+    # the total PASS count dependent on how many parallel runtest invocations\n+    # ran guality.exp.  So save the counts first and restore them afterwards.\n+    global test_counts\n+    array set saved_test_counts [array get test_counts]\n     set result [eval check_compile guality_check executable $args \"-g -O0\"]\n     set lines [lindex $result 0]\n     set output [lindex $result 1]\n@@ -23,6 +28,7 @@ proc check_guality {args} {\n       set ret [string match \"*1 PASS, 0 FAIL, 0 UNRESOLVED*\" $execout]\n     }\n     remote_file build delete $output\n+    array get test_counts [array get saved_test_counts]\n     return $ret\n }\n "}, {"sha": "f3fd8eeeb42fe813dbae5b67539325cd7411eb4e", "filename": "gcc/testsuite/g++.dg/plugin/plugin.exp", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fplugin.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fplugin.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fplugin.exp?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -44,6 +44,15 @@ if $tracelevel then {\n # Load support procs.\n load_lib plugin-support.exp\n \n+# These tests don't run runtest_file_p consistently if it\n+# doesn't return the same values, so disable parallelization\n+# of this *.exp file.  The first parallel runtest to reach\n+# this will run all the tests serially.\n+if ![gcc_parallel_test_run_p plugin] {\n+    return\n+}\n+gcc_parallel_test_enable 0\n+\n # Specify the plugin source file and the associated test files in a list.\n # plugin_test_list={ {plugin1 test1 test2 ...} {plugin2 test1 ...} ... }\n set plugin_test_list [list \\\n@@ -68,3 +77,5 @@ foreach plugin_test $plugin_test_list {\n     set plugin_input_tests [lreplace $plugin_test 0 0]\n     plugin-test-execute $plugin_src $plugin_input_tests\n }\n+\n+gcc_parallel_test_enable 1"}, {"sha": "e21d5f5e1a4fcf614f63990eaa588e6b0758c852", "filename": "gcc/testsuite/gcc.dg/guality/guality.exp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fguality.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fguality.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fguality.exp?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -14,6 +14,11 @@ if { [istarget \"powerpc-ibm-aix*\"] } {\n }\n \n proc check_guality {args} {\n+    # Don't count check_guality as PASS, or FAIL etc., that would make\n+    # the total PASS count dependent on how many parallel runtest invocations\n+    # ran guality.exp.  So save the counts first and restore them afterwards.\n+    global test_counts\n+    array set saved_test_counts [array get test_counts]\n     set result [eval check_compile guality_check executable $args \"-g -O0\"]\n     set lines [lindex $result 0]\n     set output [lindex $result 1]\n@@ -23,6 +28,7 @@ proc check_guality {args} {\n       set ret [string match \"*1 PASS, 0 FAIL, 0 UNRESOLVED*\" $execout]\n     }\n     remote_file build delete $output\n+    array set test_counts [array get saved_test_counts]\n     return $ret\n }\n "}, {"sha": "e4b5f5473ada45891d4f994257707bebe595b784", "filename": "gcc/testsuite/gcc.dg/plugin/plugin.exp", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -44,6 +44,15 @@ if $tracelevel then {\n # Load support procs.\n load_lib plugin-support.exp\n \n+# These tests don't run runtest_file_p consistently if it\n+# doesn't return the same values, so disable parallelization\n+# of this *.exp file.  The first parallel runtest to reach\n+# this will run all the tests serially.\n+if ![gcc_parallel_test_run_p plugin] {\n+    return\n+}\n+gcc_parallel_test_enable 0\n+\n # Specify the plugin source file and the associated test files in a list.\n # plugin_test_list={ {plugin1 test1 test2 ...} {plugin2 test1 ...} ... }\n set plugin_test_list [list \\\n@@ -80,3 +89,5 @@ dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/plugindir*.\\[cSi\\]]] \\\n \n # All done.\n dg-finish\n+\n+gcc_parallel_test_enable 1"}, {"sha": "bb3135955fed840ac276f1456277c6e7d81d07a5", "filename": "gcc/testsuite/gcc.misc-tests/acker1.exp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fgcc.misc-tests%2Facker1.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fgcc.misc-tests%2Facker1.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Facker1.exp?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -20,9 +20,21 @@ if { ![info exists PERF_TEST] || \"$PERF_TEST\" != \"yes\" } {\n }\n \n load_lib mike-gcc.exp\n+load_lib gcc-defs.exp\n+\n+# These tests don't run runtest_file_p consistently if it\n+# doesn't return the same values, so disable parallelization\n+# of this *.exp file.  The first parallel runtest to reach\n+# this will run all the tests serially.\n+if ![gcc_parallel_test_run_p acker1] {\n+    return\n+}\n+gcc_parallel_test_enable 0\n \n prebase\n set actions run\n set compiler_output \"^$\"\n set program_output \"^$\"\n postbase acker1.c $run $groups\n+\n+gcc_parallel_test_enable 1"}, {"sha": "f9406c0e6cac256e3040a94edb7d0d67f0ffb1a7", "filename": "gcc/testsuite/gcc.misc-tests/dhry.exp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fdhry.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fdhry.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fdhry.exp?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -20,9 +20,21 @@ if { ![info exists PERF_TEST] || \"$PERF_TEST\" != \"yes\" } {\n }\n \n load_lib mike-gcc.exp\n+load_lib gcc-defs.exp\n+\n+# These tests don't run runtest_file_p consistently if it\n+# doesn't return the same values, so disable parallelization\n+# of this *.exp file.  The first parallel runtest to reach\n+# this will run all the tests serially.\n+if ![gcc_parallel_test_run_p dhry] {\n+    return\n+}\n+gcc_parallel_test_enable 0\n \n prebase\n set actions run\n set compiler_output \"^$\"\n set program_output \"^$\"\n postbase dhry.c $run $groups\n+\n+gcc_parallel_test_enable 1"}, {"sha": "ec996f91522f07694c8d5a5f24b6e5407f79eacc", "filename": "gcc/testsuite/gcc.misc-tests/help.exp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fhelp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fhelp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fhelp.exp?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -18,6 +18,16 @@\n # documented in --help, and that the various --help* options work.\n \n load_lib options.exp\n+load_lib gcc-defs.exp\n+\n+# These tests don't run runtest_file_p consistently if it\n+# doesn't return the same values, so disable parallelization\n+# of this *.exp file.  The first parallel runtest to reach\n+# this will run all the tests serially.\n+if ![gcc_parallel_test_run_p help] {\n+    return\n+}\n+gcc_parallel_test_enable 0\n \n # Document --version.  Ideally, there should be no undocumented switches\n # in --help.\n@@ -78,3 +88,5 @@ check_for_options c \"--help=joined,^separate\" \"--help=\" \"\" \"\"\n check_for_options c \"--help=joined,undocumented\" \"\" \"\" \"\"\n # Listing only excludes gives empty results.\n check_for_options c \"--help=^joined,^separate\" \"\" \"\" \"\"\n+\n+gcc_parallel_test_enable 1"}, {"sha": "1e0a94b186688a99ac1dd2d0480c501d8c75b812", "filename": "gcc/testsuite/gcc.misc-tests/linkage.exp", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fgcc.misc-tests%2Flinkage.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fgcc.misc-tests%2Flinkage.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Flinkage.exp?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -18,6 +18,17 @@\n # was written by Rob Savoye. (rob@cygnus.com)\n # All the other tests driven by that file have since been moved elsewhere.\n \n+load_lib gcc-defs.exp\n+\n+# These tests don't run runtest_file_p consistently if it\n+# doesn't return the same values, so disable parallelization\n+# of this *.exp file.  The first parallel runtest to reach\n+# this will run all the tests serially.\n+if ![gcc_parallel_test_run_p linkage] {\n+    return\n+}\n+gcc_parallel_test_enable 0\n+\n if { [isnative] && ![is_remote host] } then {\n     set lines [gcc_target_compile \"$srcdir/$subdir/linkage-x.c\" \"linkage-x.o\" object {additional_flags=\"-w\"}]\n     if ![string match \"\" $lines] then {\n@@ -117,3 +128,5 @@ if { [isnative] && ![is_remote host] } then {\n \tfile delete \"linkage-x.o\"\n     }\n }\n+\n+gcc_parallel_test_enable 1"}, {"sha": "dd16a98a47ddd8146b563c760c60d57fc2b4e1ed", "filename": "gcc/testsuite/gcc.misc-tests/matrix1.exp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fmatrix1.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fmatrix1.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fmatrix1.exp?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -20,9 +20,21 @@ if { ![info exists PERF_TEST] || \"$PERF_TEST\" != \"yes\" } {\n }\n \n load_lib mike-gcc.exp\n+load_lib gcc-defs.exp\n+\n+# These tests don't run runtest_file_p consistently if it\n+# doesn't return the same values, so disable parallelization\n+# of this *.exp file.  The first parallel runtest to reach\n+# this will run all the tests serially.\n+if ![gcc_parallel_test_run_p matrix1] {\n+    return\n+}\n+gcc_parallel_test_enable 0\n \n prebase\n set actions run\n set compiler_output \"^$\"\n set program_output \"^$\"\n postbase matrix1.c $run $groups\n+\n+gcc_parallel_test_enable 1"}, {"sha": "63ccce133651b6dd1e91d1a72f90233e9341512c", "filename": "gcc/testsuite/gcc.misc-tests/mg-2.exp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fmg-2.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fmg-2.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fmg-2.exp?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -17,8 +17,20 @@\n # Test the -MG flag with a system header file.\n \n load_lib mike-gcc.exp\n+load_lib gcc-defs.exp\n+\n+# These tests don't run runtest_file_p consistently if it\n+# doesn't return the same values, so disable parallelization\n+# of this *.exp file.  The first parallel runtest to reach\n+# this will run all the tests serially.\n+if ![gcc_parallel_test_run_p mg-2] {\n+    return\n+}\n+gcc_parallel_test_enable 0\n \n prebase\n set actions none-of-the-above\n set compiler_output \"mg-2.o ?: .*mg-2.c \\[ \\\\\\\\\\n\\]*nonexist.h\"\n postbase mg-2.c \"\" \"\" \"-MM -MG\"\n+\n+gcc_parallel_test_enable 1"}, {"sha": "f905bc0e8e0d74712bc81045355e1674aeac2af2", "filename": "gcc/testsuite/gcc.misc-tests/mg.exp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fmg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fmg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fmg.exp?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -17,8 +17,20 @@\n # Test the -MG flag.\n \n load_lib mike-gcc.exp\n+load_lib gcc-defs.exp\n+\n+# These tests don't run runtest_file_p consistently if it\n+# doesn't return the same values, so disable parallelization\n+# of this *.exp file.  The first parallel runtest to reach\n+# this will run all the tests serially.\n+if ![gcc_parallel_test_run_p mg] {\n+    return\n+}\n+gcc_parallel_test_enable 0\n \n prebase\n set actions none-of-the-above\n set compiler_output \"mg.o ?: .*mg.c \\[ \\\\\\\\\\n\\]*nonexist.h\"\n postbase mg.c \"\" \"\" \"-MM -MG\"\n+\n+gcc_parallel_test_enable 1"}, {"sha": "49be839ef981cbb5b2329ed565e3ed8f8646b5ec", "filename": "gcc/testsuite/gcc.misc-tests/options.exp", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fgcc.misc-tests%2Foptions.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fgcc.misc-tests%2Foptions.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Foptions.exp?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -19,6 +19,17 @@\n # match the patterns COMPILER_PATTERN, AS_PATTERN and LD_PATTERN,\n # respectively.\n \n+load_lib gcc-defs.exp\n+\n+# These tests don't run runtest_file_p consistently if it\n+# doesn't return the same values, so disable parallelization\n+# of this *.exp file.  The first parallel runtest to reach\n+# this will run all the tests serially.\n+if ![gcc_parallel_test_run_p options] {\n+    return\n+}\n+gcc_parallel_test_enable 0\n+\n proc check_for_all_options {language gcc_options compiler_pattern as_pattern ld_pattern} {\n     set filename test-[pid]\n     set fd [open $filename.c w]\n@@ -52,3 +63,5 @@ proc check_for_all_options {language gcc_options compiler_pattern as_pattern ld_\n }\n \n check_for_all_options c {--coverage} {-fprofile-arcs -ftest-coverage} {} {-lgcov}\n+\n+gcc_parallel_test_enable 1"}, {"sha": "c7a6593d2b9f4363088d8c6d1c8eee0df9f8ef36", "filename": "gcc/testsuite/gcc.misc-tests/sieve.exp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fsieve.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fsieve.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fsieve.exp?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -20,9 +20,21 @@ if { ![info exists PERF_TEST] || \"$PERF_TEST\" != \"yes\" } {\n }\n \n load_lib mike-gcc.exp\n+load_lib gcc-defs.exp\n+\n+# These tests don't run runtest_file_p consistently if it\n+# doesn't return the same values, so disable parallelization\n+# of this *.exp file.  The first parallel runtest to reach\n+# this will run all the tests serially.\n+if ![gcc_parallel_test_run_p sieve] {\n+    return\n+}\n+gcc_parallel_test_enable 0\n \n prebase\n set actions run\n set compiler_output \"^$\"\n set program_output \"^$\"\n postbase sieve.c $run $groups\n+\n+gcc_parallel_test_enable 1"}, {"sha": "63a5aea1f86a19f2b4a80ba21d3541be649c5055", "filename": "gcc/testsuite/gcc.misc-tests/sort2.exp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fsort2.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fsort2.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fsort2.exp?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -20,9 +20,21 @@ if { ![info exists PERF_TEST] || \"$PERF_TEST\" != \"yes\" } {\n }\n \n load_lib mike-gcc.exp\n+load_lib gcc-defs.exp\n+\n+# These tests don't run runtest_file_p consistently if it\n+# doesn't return the same values, so disable parallelization\n+# of this *.exp file.  The first parallel runtest to reach\n+# this will run all the tests serially.\n+if ![gcc_parallel_test_run_p sort2] {\n+    return\n+}\n+gcc_parallel_test_enable 0\n \n prebase\n set actions run\n set compiler_output \"^$\"\n set program_output \"^$\"\n postbase sort2.c $run $groups\n+\n+gcc_parallel_test_enable 1"}, {"sha": "fd837227d07ce524c91758487b2edaecbf233c7f", "filename": "gcc/testsuite/go.test/go-test.exp", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fgo.test%2Fgo-test.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fgo.test%2Fgo-test.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Fgo-test.exp?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -489,6 +489,12 @@ proc go-gc-tests { } {\n \n \tclose $fd\n \n+\t# runtest_file_p is already run above, and the code below can run\n+\t# runtest_file_p again, make sure everything for this test is\n+\t# performed if the above runtest_file_p decided this runtest\n+\t# instance should execute the test\n+\tgcc_parallel_test_enable 0\n+\n \tset go_compile_args \"\"\n \tset go_execute_args \"\"\n \tif { [regexp \"// run (\\[^|&>2\\].*)\\$\" $test_line match progargs] \\\n@@ -1164,6 +1170,7 @@ proc go-gc-tests { } {\n \tset go_compile_args \"\"\n \tset go_execute_args \"\"\n         set TORTURE_OPTIONS [list { -O2 -g }]\n+\tgcc_parallel_test_enable 1\n     }\n \n     set dg-do-what-default ${saved-dg-do-what-default}"}, {"sha": "cb932382fa741b122c4f0b38fcae27726dffa997", "filename": "gcc/testsuite/lib/gcc-defs.exp", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -188,6 +188,81 @@ if { [info procs runtest_file_p] == \"\" } then {\n     }\n }\n \n+if { [info exists env(GCC_RUNTEST_PARALLELIZE_DIR)] \\\n+     && [info procs runtest_file_p] != [list] \\\n+     && [info procs gcc_parallelize_saved_runtest_file_p] == [list] } then {\n+    global gcc_runtest_parallelize_counter\n+    global gcc_runtest_parallelize_counter_minor\n+    global gcc_runtest_parallelize_enable\n+    global gcc_runtest_parallelize_dir\n+    global gcc_runtest_parallelize_last\n+\n+    set gcc_runtest_parallelize_counter 0\n+    set gcc_runtest_parallelize_counter_minor 0\n+    set gcc_runtest_parallelize_enable 1\n+    set gcc_runtest_parallelize_dir [getenv GCC_RUNTEST_PARALLELIZE_DIR]\n+    set gcc_runtest_parallelize_last 0\n+\n+    proc gcc_parallel_test_run_p { testcase } {\n+\tglobal gcc_runtest_parallelize_counter\n+\tglobal gcc_runtest_parallelize_counter_minor\n+\tglobal gcc_runtest_parallelize_enable\n+\tglobal gcc_runtest_parallelize_dir\n+\tglobal gcc_runtest_parallelize_last\n+\n+\tif { $gcc_runtest_parallelize_enable == 0 } {\n+\t    return 1\n+\t}\n+\n+\t# Only test the filesystem every 10th iteration\n+\tincr gcc_runtest_parallelize_counter_minor\n+\tif { $gcc_runtest_parallelize_counter_minor == 10 } {\n+\t    set gcc_runtest_parallelize_counter_minor 0\n+\t}\n+\tif { $gcc_runtest_parallelize_counter_minor != 1 } {\n+\t    #verbose -log \"gcc_parallel_test_run_p $testcase $gcc_runtest_parallelize_counter $gcc_runtest_parallelize_last\"\n+\t    return $gcc_runtest_parallelize_last\n+\t}\n+\n+\tset path $gcc_runtest_parallelize_dir/$gcc_runtest_parallelize_counter\n+\n+\tif {![catch {open $path {RDWR CREAT EXCL} 0600} fd]} {\n+\t    close $fd\n+\t    set gcc_runtest_parallelize_last 1\n+\t    #verbose -log \"gcc_parallel_test_run_p $testcase $gcc_runtest_parallelize_counter 1\"\n+\t    incr gcc_runtest_parallelize_counter\n+\t    return 1\n+\t}\n+\tset gcc_runtest_parallelize_last 0\n+\t#verbose -log \"gcc_parallel_test_run_p $testcase $gcc_runtest_parallelize_counter 0\"\n+\tincr gcc_runtest_parallelize_counter\n+\treturn 0\n+    }\n+\n+    proc gcc_parallel_test_enable { val } {\n+\tglobal gcc_runtest_parallelize_enable\n+\tset gcc_runtest_parallelize_enable $val\n+    }\n+\n+    rename runtest_file_p gcc_parallelize_saved_runtest_file_p\n+    proc runtest_file_p { runtests testcase } {\n+\tif ![gcc_parallelize_saved_runtest_file_p $runtests $testcase] {\n+\t    return 0\n+\t}\n+\treturn [gcc_parallel_test_run_p $testcase]\n+    }\n+\n+} else {\n+\n+    proc gcc_parallel_test_run_p { testcase } {\n+\treturn 1\n+    }\n+\n+    proc gcc_parallel_test_enable { val } {\n+    }\n+\n+}\n+\n # Like dg-options, but adds to the default options rather than replacing them.\n \n proc dg-additional-options { args } {"}, {"sha": "822bff4def7edab17623c1f02593afd55ea23b4d", "filename": "gcc/testsuite/objc.dg/gnu-encoding/gnu-encoding.exp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-encoding%2Fgnu-encoding.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-encoding%2Fgnu-encoding.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-encoding%2Fgnu-encoding.exp?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -58,7 +58,9 @@ if { $status == 0 } then {\n                 continue\n             }\n \n+\t    gcc_parallel_test_enable 0\n             dg-runtest $src \"\" $DEFAULT_CFLAGS\n+\t    gcc_parallel_test_enable 1\n         }\n     } else {\n         warning \"Could not execute objc.dg/gnu-encoding/struct-layout-encoding-1 generator\""}, {"sha": "2dc5a24d101fd5969bf440fc143882e83908adb2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -1,3 +1,25 @@\n+2014-09-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/Makefile.am (check_p_numbers0, check_p_numbers1,\n+\tcheck_p_numbers2, check_p_numbers3, check_p_numbers4,\n+\tcheck_p_numbers5, check_p_numbers6, check_p_numbers,\n+\tcheck_p_subdirs): New variables.\n+\t(check_DEJAGNU_normal_targets): Use check_p_subdirs.\n+\t(check-DEJAGNU): Rewritten so that for parallelized\n+\ttesting each job runs all the *.exp files, with\n+\tGCC_RUNTEST_PARALLELIZE_DIR set in environment.\n+\t* testsuite/Makefile.in: Regenerated.\n+\t* testsuite/lib/libstdc++.exp (gcc_parallel_test_run_p,\n+\tgcc_parallel_test_enable): New procedures.  If\n+\tGCC_RUNTEST_PARALLELIZE_DIR is set in environment, override\n+\truntest_file_p to invoke also gcc_parallel_test_run_p.\n+\t* testsuite/libstdc++-abi/abi.exp: Run all the tests serially\n+\tby the first parallel runtest encountering it.  Fix up path\n+\tof the extract_symvers script.\n+\t* testsuite/libstdc++-xmethods/xmethods.exp: Run all the tests\n+\tserially by the first parallel runtest encountering it.  Run\n+\tdg-finish even in case of error.\n+\n 2014-09-15  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/regex.h (basic_regex): Rename _Ch_typeraits template"}, {"sha": "e206aba4ce6aff646a15222e9c6d8a0636a92e3c", "filename": "libstdc++-v3/testsuite/Makefile.am", "status": "modified", "additions": 32, "deletions": 48, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -101,74 +101,58 @@ new-abi-baseline:\n \t@test ! -f $*/site.exp || mv $*/site.exp $*/site.bak\n \t@mv $*/site.exp.tmp $*/site.exp\n \n-check_DEJAGNU_normal_targets = $(patsubst %,check-DEJAGNUnormal%,0 1 2 3 4 5 6 7 8 9 10)\n+check_p_numbers0:=1 2 3 4 5 6 7 8 9\n+check_p_numbers1:=0 $(check_p_numbers0)\n+check_p_numbers2:=$(foreach i,$(check_p_numbers0),$(addprefix $(i),$(check_p_numbers1)))\n+check_p_numbers3:=$(addprefix 0,$(check_p_numbers1)) $(check_p_numbers2)\n+check_p_numbers4:=$(foreach i,$(check_p_numbers0),$(addprefix $(i),$(check_p_numbers3)))\n+check_p_numbers5:=$(addprefix 0,$(check_p_numbers3)) $(check_p_numbers4)\n+check_p_numbers6:=$(foreach i,$(check_p_numbers0),$(addprefix $(i),$(check_p_numbers5)))\n+check_p_numbers:=$(check_p_numbers0) $(check_p_numbers2) $(check_p_numbers4) $(check_p_numbers6)\n+check_p_subdirs=$(wordlist 1,$(if $(GCC_TEST_PARALLEL_SLOTS),$(GCC_TEST_PARALLEL_SLOTS),128),$(check_p_numbers))\n+check_DEJAGNU_normal_targets = $(addprefix check-DEJAGNUnormal,$(check_p_subdirs))\n $(check_DEJAGNU_normal_targets): check-DEJAGNUnormal%: normal%/site.exp\n \n # Run the testsuite in normal mode.\n check-DEJAGNU $(check_DEJAGNU_normal_targets): check-DEJAGNU%: site.exp\n \tAR=\"$(AR)\"; export AR; \\\n \tRANLIB=\"$(RANLIB)\"; export RANLIB; \\\n-\tif [ -z \"$*$(filter-out --target_board=%, $(RUNTESTFLAGS))\" ] \\\n-\t    && [ \"$(filter -j, $(MFLAGS))\" = \"-j\" ]; then \\\n+\tif [ -z \"$*\" ] && [ \"$(filter -j, $(MFLAGS))\" = \"-j\" ]; then \\\n+\t  rm -rf normal-parallel || true; \\\n+\t  mkdir normal-parallel; \\\n \t  $(MAKE) $(AM_MAKEFLAGS) $(check_DEJAGNU_normal_targets); \\\n-\t  for idx in 0 1 2 3 4 5 6 7 8 9 10; do \\\n-\t    mv -f normal$$idx/libstdc++.sum normal$$idx/libstdc++.sum.sep; \\\n-\t    mv -f normal$$idx/libstdc++.log normal$$idx/libstdc++.log.sep; \\\n+\t  rm -rf normal-parallel || true; \\\n+\t  for idx in $(check_p_subdirs); do \\\n+\t    if [ -d normal$$idx ]; then \\\n+\t      mv -f normal$$idx/libstdc++.sum normal$$idx/libstdc++.sum.sep; \\\n+\t      mv -f normal$$idx/libstdc++.log normal$$idx/libstdc++.log.sep; \\\n+\t    fi; \\\n \t  done; \\\n-\t  mv -f libstdc++.sum libstdc++.sum.sep; \\\n-\t  mv -f libstdc++.log libstdc++.log.sep; \\\n \t  $(SHELL) $(srcdir)/../../contrib/dg-extract-results.sh \\\n-\t    libstdc++.sum.sep normal[0-9]*/libstdc++.sum.sep > libstdc++.sum; \\\n+\t    normal[0-9]*/libstdc++.sum.sep > libstdc++.sum; \\\n \t  $(SHELL) $(srcdir)/../../contrib/dg-extract-results.sh -L \\\n-\t    libstdc++.log.sep normal[0-9]*/libstdc++.log.sep > libstdc++.log; \\\n+\t    normal[0-9]*/libstdc++.log.sep > libstdc++.log; \\\n \t  exit 0; \\\n \tfi; \\\n \tsrcdir=`$(am__cd) $(srcdir) && pwd`; export srcdir; \\\n \tEXPECT=$(EXPECT); export EXPECT; \\\n \truntest=$(RUNTEST); \\\n \tif [ -z \"$$runtest\" ]; then runtest=runtest; fi; \\\n \ttool=libstdc++; \\\n-\tdirs=; \\\n-\tcase \"$*\" in \\\n-\t  normal0) \\\n-\t    if $(SHELL) -c \"$$runtest --version\" > /dev/null 2>&1; then \\\n-\t      $$runtest $(AM_RUNTESTFLAGS) $(RUNTESTDEFAULTFLAGS) \\\n-\t\t\t$(RUNTESTFLAGS) abi.exp prettyprinters.exp; \\\n-\t    else echo \"WARNING: could not find \\`runtest'\" 1>&2; :;\\\n-\t    fi; \\\n-\t    dirs=\"`cd $$srcdir; echo [013-9][0-9]_*/*`\";; \\\n-\t  normal1) \\\n-\t    dirs=\"`cd $$srcdir; echo [ab]* de* [ep]*/*`\";; \\\n-\t  normal2) \\\n-\t    dirs=\"`cd $$srcdir; echo 2[01]_*/*`\";; \\\n-\t  normal3) \\\n-\t    dirs=\"`cd $$srcdir; echo 22_*/*`\";; \\\n-\t  normal4) \\\n-\t    dirs=\"`cd $$srcdir; echo 23_*/[a-km-tw-z]*`\";; \\\n-\t  normal5) \\\n-\t    dirs=\"`cd $$srcdir; echo 23_*/[luv]*`\";; \\\n-\t  normal6) \\\n-\t    dirs=\"`cd $$srcdir; echo 2[459]_*/*`\";; \\\n-\t  normal7) \\\n-\t    dirs=\"`cd $$srcdir; echo 26_*/* 28_*/[c-z]*`\";; \\\n-\t  normal8) \\\n-\t    dirs=\"`cd $$srcdir; echo 27_*/*`\";; \\\n-\t  normal9) \\\n-\t    dirs=\"`cd $$srcdir; echo 28_*/[ab]*`\";; \\\n-\t  normal10) \\\n-\t    dirs=\"`cd $$srcdir; echo t*/*`\";; \\\n-\tesac; \\\n-\tif [ -n \"$*\" ]; then cd \"$*\"; fi; \\\n+\tif [ -n \"$*\" ]; then \\\n+\t  if [ -f normal-parallel/finished ]; then rm -rf \"$*\"; exit 0; fi; \\\n+\t  GCC_RUNTEST_PARALLELIZE_DIR=`${PWD_COMMAND}`/normal-parallel; \\\n+\t  export GCC_RUNTEST_PARALLELIZE_DIR; \\\n+\t  cd \"$*\"; \\\n+\tfi; \\\n \tif $(SHELL) -c \"$$runtest --version\" > /dev/null 2>&1; then \\\n-\t  if [ -n \"$$dirs\" ]; then \\\n-\t    $$runtest $(AM_RUNTESTFLAGS) $(RUNTESTDEFAULTFLAGS) \\\n-\t\t    $(RUNTESTFLAGS) \\\n-\t\t    \"conformance.exp=`echo $$dirs | sed 's/ /* /g;s/$$/*/'`\"; \\\n-\t  else \\\n-\t    $$runtest $(AM_RUNTESTFLAGS) $(RUNTESTDEFAULTFLAGS) \\\n+\t  $$runtest $(AM_RUNTESTFLAGS) $(RUNTESTDEFAULTFLAGS) \\\n \t\t    $(RUNTESTFLAGS); \\\n+\t  if [ -n \"$*\" ]; then \\\n+\t    touch $$GCC_RUNTEST_PARALLELIZE_DIR/finished; \\\n \t  fi; \\\n-\telse echo \"WARNING: could not find \\`runtest'\" 1>&2; :;\\\n+\telse \\\n+\t  echo \"WARNING: could not find \\`runtest'\" 1>&2; :;\\\n \tfi\n \n check-am:"}, {"sha": "59060b8db0112bf01b64e12f0c635bc07b81f143", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 32, "deletions": 48, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -301,7 +301,16 @@ lists_of_files = \\\n \n extract_symvers = $(glibcxx_builddir)/scripts/extract_symvers\n baseline_subdir := $(shell $(CXX) $(baseline_subdir_switch))\n-check_DEJAGNU_normal_targets = $(patsubst %,check-DEJAGNUnormal%,0 1 2 3 4 5 6 7 8 9 10)\n+check_p_numbers0:=1 2 3 4 5 6 7 8 9\n+check_p_numbers1:=0 $(check_p_numbers0)\n+check_p_numbers2:=$(foreach i,$(check_p_numbers0),$(addprefix $(i),$(check_p_numbers1)))\n+check_p_numbers3:=$(addprefix 0,$(check_p_numbers1)) $(check_p_numbers2)\n+check_p_numbers4:=$(foreach i,$(check_p_numbers0),$(addprefix $(i),$(check_p_numbers3)))\n+check_p_numbers5:=$(addprefix 0,$(check_p_numbers3)) $(check_p_numbers4)\n+check_p_numbers6:=$(foreach i,$(check_p_numbers0),$(addprefix $(i),$(check_p_numbers5)))\n+check_p_numbers:=$(check_p_numbers0) $(check_p_numbers2) $(check_p_numbers4) $(check_p_numbers6)\n+check_p_subdirs=$(wordlist 1,$(if $(GCC_TEST_PARALLEL_SLOTS),$(GCC_TEST_PARALLEL_SLOTS),128),$(check_p_numbers))\n+check_DEJAGNU_normal_targets = $(addprefix check-DEJAGNUnormal,$(check_p_subdirs))\n \n # Runs the testsuite, but in compile only mode.\n # Can be used to test sources with non-GNU FE's at various warning\n@@ -559,67 +568,42 @@ $(check_DEJAGNU_normal_targets): check-DEJAGNUnormal%: normal%/site.exp\n check-DEJAGNU $(check_DEJAGNU_normal_targets): check-DEJAGNU%: site.exp\n \tAR=\"$(AR)\"; export AR; \\\n \tRANLIB=\"$(RANLIB)\"; export RANLIB; \\\n-\tif [ -z \"$*$(filter-out --target_board=%, $(RUNTESTFLAGS))\" ] \\\n-\t    && [ \"$(filter -j, $(MFLAGS))\" = \"-j\" ]; then \\\n+\tif [ -z \"$*\" ] && [ \"$(filter -j, $(MFLAGS))\" = \"-j\" ]; then \\\n+\t  rm -rf normal-parallel || true; \\\n+\t  mkdir normal-parallel; \\\n \t  $(MAKE) $(AM_MAKEFLAGS) $(check_DEJAGNU_normal_targets); \\\n-\t  for idx in 0 1 2 3 4 5 6 7 8 9 10; do \\\n-\t    mv -f normal$$idx/libstdc++.sum normal$$idx/libstdc++.sum.sep; \\\n-\t    mv -f normal$$idx/libstdc++.log normal$$idx/libstdc++.log.sep; \\\n+\t  rm -rf normal-parallel || true; \\\n+\t  for idx in $(check_p_subdirs); do \\\n+\t    if [ -d normal$$idx ]; then \\\n+\t      mv -f normal$$idx/libstdc++.sum normal$$idx/libstdc++.sum.sep; \\\n+\t      mv -f normal$$idx/libstdc++.log normal$$idx/libstdc++.log.sep; \\\n+\t    fi; \\\n \t  done; \\\n-\t  mv -f libstdc++.sum libstdc++.sum.sep; \\\n-\t  mv -f libstdc++.log libstdc++.log.sep; \\\n \t  $(SHELL) $(srcdir)/../../contrib/dg-extract-results.sh \\\n-\t    libstdc++.sum.sep normal[0-9]*/libstdc++.sum.sep > libstdc++.sum; \\\n+\t    normal[0-9]*/libstdc++.sum.sep > libstdc++.sum; \\\n \t  $(SHELL) $(srcdir)/../../contrib/dg-extract-results.sh -L \\\n-\t    libstdc++.log.sep normal[0-9]*/libstdc++.log.sep > libstdc++.log; \\\n+\t    normal[0-9]*/libstdc++.log.sep > libstdc++.log; \\\n \t  exit 0; \\\n \tfi; \\\n \tsrcdir=`$(am__cd) $(srcdir) && pwd`; export srcdir; \\\n \tEXPECT=$(EXPECT); export EXPECT; \\\n \truntest=$(RUNTEST); \\\n \tif [ -z \"$$runtest\" ]; then runtest=runtest; fi; \\\n \ttool=libstdc++; \\\n-\tdirs=; \\\n-\tcase \"$*\" in \\\n-\t  normal0) \\\n-\t    if $(SHELL) -c \"$$runtest --version\" > /dev/null 2>&1; then \\\n-\t      $$runtest $(AM_RUNTESTFLAGS) $(RUNTESTDEFAULTFLAGS) \\\n-\t\t\t$(RUNTESTFLAGS) abi.exp prettyprinters.exp; \\\n-\t    else echo \"WARNING: could not find \\`runtest'\" 1>&2; :;\\\n-\t    fi; \\\n-\t    dirs=\"`cd $$srcdir; echo [013-9][0-9]_*/*`\";; \\\n-\t  normal1) \\\n-\t    dirs=\"`cd $$srcdir; echo [ab]* de* [ep]*/*`\";; \\\n-\t  normal2) \\\n-\t    dirs=\"`cd $$srcdir; echo 2[01]_*/*`\";; \\\n-\t  normal3) \\\n-\t    dirs=\"`cd $$srcdir; echo 22_*/*`\";; \\\n-\t  normal4) \\\n-\t    dirs=\"`cd $$srcdir; echo 23_*/[a-km-tw-z]*`\";; \\\n-\t  normal5) \\\n-\t    dirs=\"`cd $$srcdir; echo 23_*/[luv]*`\";; \\\n-\t  normal6) \\\n-\t    dirs=\"`cd $$srcdir; echo 2[459]_*/*`\";; \\\n-\t  normal7) \\\n-\t    dirs=\"`cd $$srcdir; echo 26_*/* 28_*/[c-z]*`\";; \\\n-\t  normal8) \\\n-\t    dirs=\"`cd $$srcdir; echo 27_*/*`\";; \\\n-\t  normal9) \\\n-\t    dirs=\"`cd $$srcdir; echo 28_*/[ab]*`\";; \\\n-\t  normal10) \\\n-\t    dirs=\"`cd $$srcdir; echo t*/*`\";; \\\n-\tesac; \\\n-\tif [ -n \"$*\" ]; then cd \"$*\"; fi; \\\n+\tif [ -n \"$*\" ]; then \\\n+\t  if [ -f normal-parallel/finished ]; then rm -rf \"$*\"; exit 0; fi; \\\n+\t  GCC_RUNTEST_PARALLELIZE_DIR=`${PWD_COMMAND}`/normal-parallel; \\\n+\t  export GCC_RUNTEST_PARALLELIZE_DIR; \\\n+\t  cd \"$*\"; \\\n+\tfi; \\\n \tif $(SHELL) -c \"$$runtest --version\" > /dev/null 2>&1; then \\\n-\t  if [ -n \"$$dirs\" ]; then \\\n-\t    $$runtest $(AM_RUNTESTFLAGS) $(RUNTESTDEFAULTFLAGS) \\\n-\t\t    $(RUNTESTFLAGS) \\\n-\t\t    \"conformance.exp=`echo $$dirs | sed 's/ /* /g;s/$$/*/'`\"; \\\n-\t  else \\\n-\t    $$runtest $(AM_RUNTESTFLAGS) $(RUNTESTDEFAULTFLAGS) \\\n+\t  $$runtest $(AM_RUNTESTFLAGS) $(RUNTESTDEFAULTFLAGS) \\\n \t\t    $(RUNTESTFLAGS); \\\n+\t  if [ -n \"$*\" ]; then \\\n+\t    touch $$GCC_RUNTEST_PARALLELIZE_DIR/finished; \\\n \t  fi; \\\n-\telse echo \"WARNING: could not find \\`runtest'\" 1>&2; :;\\\n+\telse \\\n+\t  echo \"WARNING: could not find \\`runtest'\" 1>&2; :;\\\n \tfi\n \n check-am:"}, {"sha": "6e22805454918f13caedd756544d91cb56f12e55", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -1823,3 +1823,78 @@ proc check_v3_target_little_endian { } {\n }\n \n set additional_prunes \"\"\n+\n+if { [info exists env(GCC_RUNTEST_PARALLELIZE_DIR)] \\\n+     && [info procs runtest_file_p] != [list] \\\n+     && [info procs gcc_parallelize_saved_runtest_file_p] == [list] } then {\n+    global gcc_runtest_parallelize_counter\n+    global gcc_runtest_parallelize_counter_minor\n+    global gcc_runtest_parallelize_enable\n+    global gcc_runtest_parallelize_dir\n+    global gcc_runtest_parallelize_last\n+\n+    set gcc_runtest_parallelize_counter 0\n+    set gcc_runtest_parallelize_counter_minor 0\n+    set gcc_runtest_parallelize_enable 1\n+    set gcc_runtest_parallelize_dir [getenv GCC_RUNTEST_PARALLELIZE_DIR]\n+    set gcc_runtest_parallelize_last 0\n+\n+    proc gcc_parallel_test_run_p { testcase } {\n+\tglobal gcc_runtest_parallelize_counter\n+\tglobal gcc_runtest_parallelize_counter_minor\n+\tglobal gcc_runtest_parallelize_enable\n+\tglobal gcc_runtest_parallelize_dir\n+\tglobal gcc_runtest_parallelize_last\n+\n+\tif { $gcc_runtest_parallelize_enable == 0 } {\n+\t    return 1\n+\t}\n+\n+\t# Only test the filesystem every 10th iteration\n+\tincr gcc_runtest_parallelize_counter_minor\n+\tif { $gcc_runtest_parallelize_counter_minor == 10 } {\n+\t    set gcc_runtest_parallelize_counter_minor 0\n+\t}\n+\tif { $gcc_runtest_parallelize_counter_minor != 1 } {\n+\t    #verbose -log \"gcc_parallel_test_run_p $testcase $gcc_runtest_parallelize_counter $gcc_runtest_parallelize_last\"\n+\t    return $gcc_runtest_parallelize_last\n+\t}\n+\n+\tset path $gcc_runtest_parallelize_dir/$gcc_runtest_parallelize_counter\n+\n+\tif {![catch {open $path {RDWR CREAT EXCL} 0600} fd]} {\n+\t    close $fd\n+\t    set gcc_runtest_parallelize_last 1\n+\t    #verbose -log \"gcc_parallel_test_run_p $testcase $gcc_runtest_parallelize_counter 1\"\n+\t    incr gcc_runtest_parallelize_counter\n+\t    return 1\n+\t}\n+\tset gcc_runtest_parallelize_last 0\n+\t#verbose -log \"gcc_parallel_test_run_p $testcase $gcc_runtest_parallelize_counter 0\"\n+\tincr gcc_runtest_parallelize_counter\n+\treturn 0\n+    }\n+\n+    proc gcc_parallel_test_enable { val } {\n+\tglobal gcc_runtest_parallelize_enable\n+\tset gcc_runtest_parallelize_enable $val\n+    }\n+\n+    rename runtest_file_p gcc_parallelize_saved_runtest_file_p\n+    proc runtest_file_p { runtests testcase } {\n+\tif ![gcc_parallelize_saved_runtest_file_p $runtests $testcase] {\n+\t    return 0\n+\t}\n+\treturn [gcc_parallel_test_run_p $testcase]\n+    }\n+\n+} else {\n+\n+    proc gcc_parallel_test_run_p { testcase } {\n+\treturn 1\n+    }\n+\n+    proc gcc_parallel_test_enable { val } {\n+    }\n+\n+}"}, {"sha": "ed1886567a6fcceb9db1320573d810f14e380d1e", "filename": "libstdc++-v3/testsuite/libstdc++-abi/abi.exp", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-abi%2Fabi.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-abi%2Fabi.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-abi%2Fabi.exp?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -18,6 +18,12 @@\n # this test. Or, hey, if we don't support this kind of symbol\n # versioning test: don't run it.\n \n+# Only run whole abi.exp in one instance, serially.\n+if ![gcc_parallel_test_run_p abi] {\n+    return\n+}\n+gcc_parallel_test_enable 0\n+\n if { [string match \"*-*-darwin*\" $target_triplet] } {\n     set lib $blddir/src/.libs/libstdc++.dylib\n } else { \n@@ -30,6 +36,7 @@ v3-build_support\n if { (${v3-symver} == 0) || ![info exists baseline_dir] \\\n \t || ![file exists $baseline_dir] \\\n \t || ![file exists $lib] } {\n+    gcc_parallel_test_enable 1\n     return\n }\n \n@@ -42,12 +49,13 @@ if ![file exists $baseline_file] {\n     set baseline_file [file join $baseline_dir \"baseline_symbols.txt\"]\n }\n if ![file exists $baseline_file] {\n+    gcc_parallel_test_enable 1\n     return\n }\n send_log \"Checking $lib against $baseline_file\\n\"\n \n # Figure out what symbols are defined by the active build of the library.\n-remote_exec \"build\" \"$objdir/../scripts/extract_symvers\" \\\n+remote_exec \"build\" \"$blddir/scripts/extract_symvers\" \\\n     [list $lib \"current_symbols.txt\"]\n \n # Build the abi_check program.\n@@ -62,3 +70,5 @@ set result [${tool}_load \"./abi_check\" \\\n \t\t[list \"--check-verbose\" \"current_symbols.txt\" \\\n \t\t     \"baseline_symbols.txt\"]]\n [lindex $result 0] \"libstdc++-abi/abi_check\"\n+\n+gcc_parallel_test_enable 1"}, {"sha": "295e69493e169ee4fd3e18ffed0f75658ddcec0e", "filename": "libstdc++-v3/testsuite/libstdc++-xmethods/xmethods.exp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717c478953c6ba2bd82e8ffba4b79d17dbf75626/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Fxmethods.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717c478953c6ba2bd82e8ffba4b79d17dbf75626/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Fxmethods.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Fxmethods.exp?ref=717c478953c6ba2bd82e8ffba4b79d17dbf75626", "patch": "@@ -16,6 +16,12 @@\n \n load_lib gdb-test.exp\n \n+# Only run whole xmethods.exp in one instance, serially.\n+if ![gcc_parallel_test_run_p xmethods] {\n+    return\n+}\n+gcc_parallel_test_enable 0\n+\n dg-init\n v3-build_support\n \n@@ -30,7 +36,9 @@ if ![info exists ::env(GUALITY_GDB_NAME)] {\n }\n \n if {! [gdb_version_check_xmethods]} {\n+    dg-finish\n     unsupported \"xmethods.exp\"\n+    gcc_parallel_test_enable 1\n     return\n }\n \n@@ -49,3 +57,4 @@ if [info exists guality_gdb_name] {\n }\n \n dg-finish\n+gcc_parallel_test_enable 1"}]}