{"sha": "a295fa90c3b5f2cb0ecc1c15cc44cdf40bf405b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI5NWZhOTBjM2I1ZjJjYjBlY2MxYzE1Y2M0NGNkZjQwYmY0MDViNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-05-25T15:07:02Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-05-25T15:07:02Z"}, "message": "re PR target/53474 (Solaris/x86 bootstrap with Sun as broken: j.e)\n\n\tPR target/53474\n\t* config/i386/i386.c (ix86_print_operand) <case 'O'>: Print '.' here.\n\t<case 'C', case 'c', case 'F', case 'f'>: Print '.' only for C and c.\n\nFrom-SVN: r187885", "tree": {"sha": "e0ac89d83b3cf80fb363eb3cf24e41875a962aa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0ac89d83b3cf80fb363eb3cf24e41875a962aa9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a295fa90c3b5f2cb0ecc1c15cc44cdf40bf405b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a295fa90c3b5f2cb0ecc1c15cc44cdf40bf405b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a295fa90c3b5f2cb0ecc1c15cc44cdf40bf405b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a295fa90c3b5f2cb0ecc1c15cc44cdf40bf405b7/comments", "author": null, "committer": null, "parents": [{"sha": "0ba89f9bb102aaa94308a3a7ec266297fc9825ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ba89f9bb102aaa94308a3a7ec266297fc9825ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ba89f9bb102aaa94308a3a7ec266297fc9825ad"}], "stats": {"total": 57, "additions": 34, "deletions": 23}, "files": [{"sha": "ce680f0c817cb1e0321324d9f3d3274253fc2319", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a295fa90c3b5f2cb0ecc1c15cc44cdf40bf405b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a295fa90c3b5f2cb0ecc1c15cc44cdf40bf405b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a295fa90c3b5f2cb0ecc1c15cc44cdf40bf405b7", "patch": "@@ -1,3 +1,9 @@\n+2012-05-25  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/53474\n+\t* config/i386/i386.c (ix86_print_operand) <case 'O'>: Print '.' here.\n+\t<case 'C', case 'c', case 'F', case 'f'>: Print '.' only for C and c.\n+\n 2012-05-25  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \n \tPR target/53435\n@@ -125,20 +131,24 @@\n \tsymbol_alias_set_t, symbol_alias_set_destroy,\n \tsymbol_alias_set_contains, propagate_aliases_backward): Remove.\n \t* toplev.c (compile_file): Do not call finish_aliases_2\n-\t* cgraphunit.c (cgraph_process_new_functions): Do not call finish_aliases_1.\n+\t* cgraphunit.c (cgraph_process_new_functions): Do not call\n+\tfinish_aliases_1.\n \t(handle_alias_pairs): Output diagnostics about aliases to externals.\n \t(assemble_thunks_and_aliases): Use do_assemble_alias.\n \t(output_weakrefs): Likewise.\n \t(finalize_compilation_unit): Do not call finish_aliases_1.\n-\t* ipa.c (symtab_remove_unreachable_nodes): De not call remove_unreachable_alias_pairs.\n+\t* ipa.c (symtab_remove_unreachable_nodes): De not call\n+\tremove_unreachable_alias_pairs.\n \t* varasm.c (do_assemble_alias): Export.\n-\t(symbol_alias_set_create, symbol_alias_set_destroy, symbol_alias_set_contains,\n-\tsymbol_alias_set_insert, propagate_aliases_forward, propagate_aliases_backward,\n-\tpropagate_aliases_backward, trivially_visible_alias, trivially_defined_alias,\n-\tremove_unreachable_alias_pairs, finish_aliases_1, finish_aliases_2, \n-\tassemble_alias): Remove.\n+\t(symbol_alias_set_create, symbol_alias_set_destroy,\n+\tsymbol_alias_set_contains, symbol_alias_set_insert,\n+\tpropagate_aliases_forward, propagate_aliases_backward,\n+\tpropagate_aliases_backward, trivially_visible_alias,\n+\ttrivially_defined_alias, remove_unreachable_alias_pairs,\n+\tfinish_aliases_1, finish_aliases_2, assemble_alias): Remove.\n \t* output.h (do_assemble_alias): Declare.\n-\t* varpool.c (varpool_remove_unreferenced_decls): Do not call finish_aliases_1.\n+\t* varpool.c (varpool_remove_unreferenced_decls): Do not call\n+\tfinish_aliases_1.\n \n 2012-05-23  Martin Jambor  <mjambor@suse.cz>\n \n@@ -211,15 +221,13 @@\n \t* lto-streamer-in.c (input_cfg): Likewise.\n \t* tree-inline.c (initialize_cfun): Likewise.\n \t* tree-into-ssa.c (rewrite_into_ssa): Likewise.\n-\t* omp-low.c (expand_omp_taskreg): Likewise.  Avoid switching\n-\tcfun.\n+\t* omp-low.c (expand_omp_taskreg): Likewise.  Avoid switching cfun.\n \t* gimple.c (is_gimple_reg): Optimize the SSA_NAME case,\n \tvirtual operands are not registers.\n \n 2012-05-22  Richard Guenther  <rguenther@suse.de>\n \n-\t* tree-cfg.c (verify_gimple_assign_unary): Fix typo in previous\n-\tcommit.\n+\t* tree-cfg.c (verify_gimple_assign_unary): Fix typo in previous commit.\n \n 2012-05-22  Richard Guenther  <rguenther@suse.de>\n \n@@ -231,8 +239,7 @@\n \n \t* tree-flow.h (add_referenced_var_1): Declare.\n \t(add_referenced_var): Define.\n-\t* tree-dfa.c (referenced_var_check_and_insert): Avoid one hash\n-\tlookup.\n+\t* tree-dfa.c (referenced_var_check_and_insert): Avoid one hash lookup.\n \t(add_referenced_var): Rename to ...\n \t(add_referenced_var_1): ... this.  Take struct function argument.\n "}, {"sha": "9e4ada03be4b4b93d9b414ac70b731a5910c3e84", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a295fa90c3b5f2cb0ecc1c15cc44cdf40bf405b7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a295fa90c3b5f2cb0ecc1c15cc44cdf40bf405b7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a295fa90c3b5f2cb0ecc1c15cc44cdf40bf405b7", "patch": "@@ -13931,8 +13931,8 @@ get_some_local_dynamic_name (void)\n    C -- print opcode suffix for set/cmov insn.\n    c -- like C, but print reversed condition\n    F,f -- likewise, but for floating-point.\n-   O -- if HAVE_AS_IX86_CMOV_SUN_SYNTAX, print the opcode suffix for\n-\tthe size of the current operand, otherwise nothing.\n+   O -- if HAVE_AS_IX86_CMOV_SUN_SYNTAX, expand to \"w.\", \"l.\" or \"q.\",\n+\totherwise nothing\n    R -- print the prefix for register names.\n    z -- print the opcode suffix for the size of the current operand.\n    Z -- likewise, with special suffixes for x87 instructions.\n@@ -14061,6 +14061,8 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \t\t(\"invalid operand size for operand code 'O'\");\n \t      return;\n \t    }\n+\n+\t  putc ('.', file);\n #endif\n \t  return;\n \n@@ -14320,20 +14322,21 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \t    }\n \t  return;\n \n-\tcase 'C':\n-\tcase 'c':\n \tcase 'F':\n \tcase 'f':\n+#ifdef HAVE_AS_IX86_CMOV_SUN_SYNTAX\n+\t  if (ASSEMBLER_DIALECT == ASM_ATT)\n+\t    putc ('.', file);\n+#endif\n+\n+\tcase 'C':\n+\tcase 'c':\n \t  if (!COMPARISON_P (x))\n \t    {\n \t      output_operand_lossage (\"operand is not a condition code, \"\n \t\t\t\t      \"invalid operand code '%c'\", code);\n \t      return;\n \t    }\n-#ifdef HAVE_AS_IX86_CMOV_SUN_SYNTAX\n-\t  if (ASSEMBLER_DIALECT == ASM_ATT)\n-\t    putc ('.', file);\n-#endif\n \t  put_condition_code (GET_CODE (x), GET_MODE (XEXP (x, 0)),\n \t\t\t      code == 'c' || code == 'f',\n \t\t\t      code == 'F' || code == 'f',"}, {"sha": "14a6a40d6cee3d1fc0a176a1179177229216a558", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a295fa90c3b5f2cb0ecc1c15cc44cdf40bf405b7/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a295fa90c3b5f2cb0ecc1c15cc44cdf40bf405b7/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=a295fa90c3b5f2cb0ecc1c15cc44cdf40bf405b7", "patch": "@@ -9803,7 +9803,8 @@ grokdeclarator (const cp_declarator *declarator,\n \t       clones.  */\n \t    DECL_ABSTRACT (decl) = 1;\n \t}\n-      else if (constructor_name_p (unqualified_id, current_class_type))\n+      else if (current_class_type\n+\t       && constructor_name_p (unqualified_id, current_class_type))\n \tpermerror (input_location, \"ISO C++ forbids nested type %qD with same name \"\n \t\t   \"as enclosing class\",\n \t\t   unqualified_id);"}]}