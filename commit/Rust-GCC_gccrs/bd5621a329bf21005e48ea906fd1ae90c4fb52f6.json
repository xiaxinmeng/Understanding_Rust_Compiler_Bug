{"sha": "bd5621a329bf21005e48ea906fd1ae90c4fb52f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ1NjIxYTMyOWJmMjEwMDVlNDhlYTkwNmZkMWFlOTBjNGZiNTJmNg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2000-09-08T12:36:11Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2000-09-08T12:36:11Z"}, "message": "recog.c (validate_replace_rtx_1): Fix confusion about equality testing...\n\n\t* recog.c (validate_replace_rtx_1): Fix confusion about equality\n\ttesting; simplify subregs of constants and nested subregs.\n\nFrom-SVN: r36267", "tree": {"sha": "e2a278cc3e6265109c86897d35e6cc457fc07e83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2a278cc3e6265109c86897d35e6cc457fc07e83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd5621a329bf21005e48ea906fd1ae90c4fb52f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd5621a329bf21005e48ea906fd1ae90c4fb52f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd5621a329bf21005e48ea906fd1ae90c4fb52f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd5621a329bf21005e48ea906fd1ae90c4fb52f6/comments", "author": null, "committer": null, "parents": [{"sha": "6b3783de20224d151b998a0ec5bc0033b6c983d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b3783de20224d151b998a0ec5bc0033b6c983d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b3783de20224d151b998a0ec5bc0033b6c983d4"}], "stats": {"total": 71, "additions": 64, "deletions": 7}, "files": [{"sha": "c8a94b5d7959e889c435282a55464885590775e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd5621a329bf21005e48ea906fd1ae90c4fb52f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd5621a329bf21005e48ea906fd1ae90c4fb52f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd5621a329bf21005e48ea906fd1ae90c4fb52f6", "patch": "@@ -1,3 +1,7 @@\n+Fri Sep  8 14:34:56 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n+\n+\t* recog.c (validate_replace_rtx_1): Fix confusion about equality\n+\ttesting; simplify subregs of constants and nested subregs.\n 2000-09-08  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config/sh/sh.md (symPLT_label2reg): Use operand3 for PIC reg."}, {"sha": "7f35c9f542c803d14d733e42f62cb559460ade57", "filename": "gcc/recog.c", "status": "modified", "additions": 60, "deletions": 7, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd5621a329bf21005e48ea906fd1ae90c4fb52f6/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd5621a329bf21005e48ea906fd1ae90c4fb52f6/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=bd5621a329bf21005e48ea906fd1ae90c4fb52f6", "patch": "@@ -482,10 +482,7 @@ validate_replace_rtx_1 (loc, from, to, object)\n \t in that case.  If it fails, substitute in something that we know\n \t won't be recognized.  */\n       if (GET_MODE (to) == VOIDmode\n-\t  && (XEXP (x, 0) == from\n-\t      || (GET_CODE (XEXP (x, 0)) == REG && GET_CODE (from) == REG\n-\t\t  && GET_MODE (XEXP (x, 0)) == GET_MODE (from)\n-\t\t  && REGNO (XEXP (x, 0)) == REGNO (from))))\n+\t  && rtx_equal_p (XEXP (x, 0), from))\n \t{\n \t  rtx new = simplify_unary_operation (code, GET_MODE (x), to,\n \t\t\t\t\t      GET_MODE (from));\n@@ -498,14 +495,69 @@ validate_replace_rtx_1 (loc, from, to, object)\n       break;\n \t\n     case SUBREG:\n+      /* In case we are replacing by constant, attempt to simplify it to non-SUBREG\n+         expression.  We can't do this later, since the information about inner mode\n+         may be lost.  */\n+      if (CONSTANT_P (to) && rtx_equal_p (SUBREG_REG (x), from))\n+        {\n+\t  if (GET_MODE_SIZE (GET_MODE (x)) == UNITS_PER_WORD\n+\t      && GET_MODE_SIZE (GET_MODE (from)) > UNITS_PER_WORD\n+\t      && GET_MODE_CLASS (GET_MODE (x)) == MODE_INT)\n+\t    {\n+\t      rtx temp = operand_subword (to, SUBREG_WORD (x),\n+\t\t\t\t\t  0, GET_MODE (x));\n+\t      if (temp)\n+\t\t{\n+\t\t  validate_change (object, loc, temp, 1);\n+\t\t  return;\n+\t\t}\n+\t    }\n+\t  if (subreg_lowpart_p (x))\n+\t    {\n+\t      rtx new =  gen_lowpart_if_possible (GET_MODE (x), to);\n+\t      if (new)\n+\t\t{\n+\t\t  validate_change (object, loc, new, 1);\n+\t\t  return;\n+\t\t}\n+\t    }\n+\n+\t  /* A paradoxical SUBREG of a VOIDmode constant is the same constant,\n+\t     since we are saying that the high bits don't matter.  */\n+\t  if (GET_MODE (to) == VOIDmode\n+\t      && GET_MODE_SIZE (GET_MODE (x)) > GET_MODE_SIZE (GET_MODE (from)))\n+\t    {\n+\t      validate_change (object, loc, to, 1);\n+\t      return;\n+\t    }\n+        }\n+\n+      /* Changing mode twice with SUBREG => just change it once,\n+\t or not at all if changing back to starting mode.  */\n+      if (GET_CODE (to) == SUBREG\n+\t  && rtx_equal_p (SUBREG_REG (x), from))\n+\t{\n+\t  if (GET_MODE (x) == GET_MODE (SUBREG_REG (to))\n+\t      && SUBREG_WORD (x) == 0 && SUBREG_WORD (to) == 0)\n+\t    {\n+\t      validate_change (object, loc, SUBREG_REG (to), 1);\n+\t      return;\n+\t    }\n+\n+\t  validate_change (object, loc,\n+\t\t\t   gen_rtx_SUBREG (GET_MODE (x), SUBREG_REG (to),\n+\t\t\t\t\t   SUBREG_WORD (x) + SUBREG_WORD (to)), 1);\n+\t  return;\n+\t}\n+\n       /* If we have a SUBREG of a register that we are replacing and we are\n \t replacing it with a MEM, make a new MEM and try replacing the\n \t SUBREG with it.  Don't do this if the MEM has a mode-dependent address\n \t or if we would be widening it.  */\n \n-      if (SUBREG_REG (x) == from\n-\t  && GET_CODE (from) == REG\n+      if (GET_CODE (from) == REG\n \t  && GET_CODE (to) == MEM\n+\t  && rtx_equal_p (SUBREG_REG (x), from)\n \t  && ! mode_dependent_address_p (XEXP (to, 0))\n \t  && ! MEM_VOLATILE_P (to)\n \t  && GET_MODE_SIZE (GET_MODE (x)) <= GET_MODE_SIZE (GET_MODE (to)))\n@@ -533,7 +585,8 @@ validate_replace_rtx_1 (loc, from, to, object)\n \t likely to be an insertion operation; if it was, nothing bad will\n \t happen, we might just fail in some cases).  */\n \n-      if (XEXP (x, 0) == from && GET_CODE (from) == REG && GET_CODE (to) == MEM\n+      if (GET_CODE (from) == REG && GET_CODE (to) == MEM\n+\t  && rtx_equal_p (XEXP (x, 0), from)\n \t  && GET_CODE (XEXP (x, 1)) == CONST_INT\n \t  && GET_CODE (XEXP (x, 2)) == CONST_INT\n \t  && ! mode_dependent_address_p (XEXP (to, 0))"}]}