{"sha": "44b326839d864fc10c459916abcc97f35a9ac3de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRiMzI2ODM5ZDg2NGZjMTBjNDU5OTE2YWJjYzk3ZjM1YTlhYzNkZQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-04-16T12:25:51Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-04-16T12:27:20Z"}, "message": "Make it possible to have different instrumented and feedback builds without copying gcda files around [pr93401]\n\nHi,\nin GCC 8 we changed -fprofile-generate=<path> to use mangled absolute paths in\nthe <path> directory. This was necessary to avoid clashes of files when gcc is\nexecuted from different directories to build different sources of same\nfilename.\n\nHowever this made it difficult to build projects on setups where instrumented\nbuild is done in one directory, feedback build in different and possibly\ntraining happens in yet another directory structure.  This happens i.e. for\nFirefox builds for month or two.\n\nThis patch adds -fprofile-prefix-path that can be used to inform gcc where the\nroot of build directory is and strip it form the gcda filenames.\nThis is similar to exisitng debug-prefix-map but without the map feature since\nit seems useless for profile data.\n\nWe spent quite some time with Maritn Liska discussing options and found no\nbetter solution.  I was looking how this work on LLVM and they produce single\nprofdata file which is then transformed into kind of simple database by\nllvmprofdata tool.  This database keys functions by filename and symbol name.\nIf you arrane two files with same name define static variable with same symbol\nname this gets messedup and result in wrong info. So I think this is not very\ngood solution and preffer the extra option.\n\nBootstrapped/regtested x86_64-linux. I plan to commit it later today if there\nare no complains.\n\nI suppose our manual could have some central section on profile feedback\nexplaining the whole setup at one place.\n\nHonza\n\n\tPR gcov-profile/93401\n\t* common.opt (profile-prefix-path): New option.\n\t* coverae.c: Include diagnostics.h.\n\t(coverage_init): Strip profile prefix path.\n\t* doc/invoke.texi (-fprofile-prefix-path): Document.", "tree": {"sha": "dcee354ce5653457b3fe7d38b2667e36ebb22e76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcee354ce5653457b3fe7d38b2667e36ebb22e76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44b326839d864fc10c459916abcc97f35a9ac3de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44b326839d864fc10c459916abcc97f35a9ac3de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44b326839d864fc10c459916abcc97f35a9ac3de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44b326839d864fc10c459916abcc97f35a9ac3de/comments", "author": null, "committer": null, "parents": [{"sha": "3c3f12e2a7625c9a2f5d74a47dbacb2fd1ae5643", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c3f12e2a7625c9a2f5d74a47dbacb2fd1ae5643", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c3f12e2a7625c9a2f5d74a47dbacb2fd1ae5643"}], "stats": {"total": 44, "additions": 42, "deletions": 2}, "files": [{"sha": "74dbeeb44c6a87cc50362db4d45e5fa196073672", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44b326839d864fc10c459916abcc97f35a9ac3de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44b326839d864fc10c459916abcc97f35a9ac3de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=44b326839d864fc10c459916abcc97f35a9ac3de", "patch": "@@ -3,6 +3,13 @@\n \tPR rtl-optimization/94605\n \t* early-remat.c (early_remat::process_block): Handle insns that\n \tset multiple candidate registers.\n+2020-04-16  Jan Hubicka  <hubicka@ucw.cz>\n+\t\n+\tPR gcov-profile/93401\n+\t* common.opt (profile-prefix-path): New option.\n+\t* coverae.c: Include diagnostics.h.\n+\t(coverage_init): Strip profile prefix path.\n+\t* doc/invoke.texi (-fprofile-prefix-path): Document.\n \n 2020-04-16  Richard Biener  <rguenther@suse.de>\n "}, {"sha": "1e604ba9bb6f6b2b023926b738da4ad82a82a9c2", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44b326839d864fc10c459916abcc97f35a9ac3de/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44b326839d864fc10c459916abcc97f35a9ac3de/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=44b326839d864fc10c459916abcc97f35a9ac3de", "patch": "@@ -2196,6 +2196,10 @@ Enum(profile_update) String(atomic) Value(PROFILE_UPDATE_ATOMIC)\n EnumValue\n Enum(profile_update) String(prefer-atomic) Value(PROFILE_UPDATE_PREFER_ATOMIC)\n \n+fprofile-prefix-path=\n+Common Joined RejectNegative Var(profile_prefix_path)\n+Remove prefix from absolute path before manging name for -fprofile-generate= and -fprofile-use=.\n+\n fprofile-generate\n Common\n Enable common options for generating profile info for profile feedback directed optimizations."}, {"sha": "45c0278f44f883b8d87121ea8ee983660f459107", "filename": "gcc/coverage.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44b326839d864fc10c459916abcc97f35a9ac3de/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44b326839d864fc10c459916abcc97f35a9ac3de/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=44b326839d864fc10c459916abcc97f35a9ac3de", "patch": "@@ -49,6 +49,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"intl.h\"\n #include \"auto-profile.h\"\n #include \"profile.h\"\n+#include \"diagnostic.h\"\n \n #include \"gcov-io.c\"\n \n@@ -1221,6 +1222,19 @@ coverage_init (const char *filename)\n \t  const char *separator = \"/\";\n #endif\n \t  filename = concat (getpwd (), separator, filename, NULL);\n+\t  if (profile_prefix_path)\n+\t    {\n+\t      if (!strncmp (filename, profile_prefix_path,\n+\t\t\t    strlen (profile_prefix_path)))\n+\t\t{\n+\t\t  filename += strlen (profile_prefix_path);\n+\t\t  while (*filename == *separator)\n+\t\t    filename++;\n+\t\t}\n+\t      else\n+\t\twarning (0, \"filename %qs does not start with profile \"\n+\t\t\t \"prefix %qs\", filename, profile_prefix_path);\n+\t    }\n \t  filename = mangle_path (filename);\n \t  len = strlen (filename);\n \t}"}, {"sha": "8b5cd8246a925c44890f7c36b0b0bbba119ea3f1", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44b326839d864fc10c459916abcc97f35a9ac3de/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44b326839d864fc10c459916abcc97f35a9ac3de/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=44b326839d864fc10c459916abcc97f35a9ac3de", "patch": "@@ -549,8 +549,9 @@ Objective-C and Objective-C++ Dialects}.\n @gccoptlist{-p  -pg  -fprofile-arcs  --coverage  -ftest-coverage @gol\n -fprofile-abs-path @gol\n -fprofile-dir=@var{path}  -fprofile-generate  -fprofile-generate=@var{path} @gol\n--fprofile-note=@var{path}  -fprofile-update=@var{method} @gol\n--fprofile-filter-files=@var{regex}  -fprofile-exclude-files=@var{regex} -fprofile-reproducibility @gol\n+-fprofile-note=@var{path} -fprofile-prefix-path=@var{path} @gol\n+-fprofile-update=@var{method} -fprofile-filter-files=@var{regex} @gol\n+-fprofile-exclude-files=@var{regex} -fprofile-reproducibility @gol\n -fsanitize=@var{style}  -fsanitize-recover  -fsanitize-recover=@var{style} @gol\n -fasan-shadow-offset=@var{number}  -fsanitize-sections=@var{s1},@var{s2},... @gol\n -fsanitize-undefined-trap-on-error  -fbounds-check @gol\n@@ -13400,6 +13401,20 @@ If @var{path} is specified, GCC saves @file{.gcno} file into @var{path}\n location.  If you combine the option with multiple source files,\n the @file{.gcno} file will be overwritten.\n \n+@item -fprofile-prefix-path=@var{path}\n+\n+This option can be used in combination with\n+@option{profile-generate=}@var{profile_dir} and\n+@option{profile-use=}@var{profile_dir} to inform GCC where is the base\n+directory of built source tree.  By default @var{profile_dir} will contain\n+files with mangled absolute paths of all object files in the built project.\n+This is not desirable when directory used to build the instrumented binary\n+differs from the directory used to build the binary optimized with profile\n+feedback because the profile data will not be found during the optimized build.\n+In such setups @option{-fprofile-prefix-path=}@var{path} with @var{path}\n+pointing to the base directory of the build can be used to strip the irrelevant\n+part of the path and keep all file names relative to the main build directory.\n+\n @item -fprofile-update=@var{method}\n @opindex fprofile-update\n "}]}