{"sha": "ef5057f84d43d10ff83ab4052142a27675026d89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY1MDU3Zjg0ZDQzZDEwZmY4M2FiNDA1MjE0MmEyNzY3NTAyNmQ4OQ==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1994-05-19T23:14:04Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1994-05-19T23:14:04Z"}, "message": "calls.c (expand_call): Only destroy temps here, if -fshort-temps is given.\n\n        * calls.c (expand_call): Only destroy temps here, if -fshort-temps\n        is given.\n\nFrom-SVN: r7341", "tree": {"sha": "4ad8501dd0199a1c9efcef9839ac373c25a9bdbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ad8501dd0199a1c9efcef9839ac373c25a9bdbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef5057f84d43d10ff83ab4052142a27675026d89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef5057f84d43d10ff83ab4052142a27675026d89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef5057f84d43d10ff83ab4052142a27675026d89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef5057f84d43d10ff83ab4052142a27675026d89/comments", "author": null, "committer": null, "parents": [{"sha": "cb4a4241cf905f2fb120e812a4fbafa9715c0eae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb4a4241cf905f2fb120e812a4fbafa9715c0eae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb4a4241cf905f2fb120e812a4fbafa9715c0eae"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "4b264f882932f8db64e9ec63f9684b2200106c69", "filename": "gcc/calls.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef5057f84d43d10ff83ab4052142a27675026d89/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef5057f84d43d10ff83ab4052142a27675026d89/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=ef5057f84d43d10ff83ab4052142a27675026d89", "patch": "@@ -702,12 +702,16 @@ expand_call (exp, target, ignore)\n       /* If inlining succeeded, return.  */\n       if ((HOST_WIDE_INT) temp != -1)\n \t{\n-\t  /* Perform all cleanups needed for the arguments of this call\n-\t     (i.e. destructors in C++).  It is ok if these destructors\n-\t     clobber RETURN_VALUE_REG, because the only time we care about\n-\t     this is when TARGET is that register.  But in C++, we take\n-\t     care to never return that register directly.  */\n-\t  expand_cleanups_to (old_cleanups);\n+\t  if (flag_short_temps)\n+\t    {\n+\t      /* Perform all cleanups needed for the arguments of this\n+\t\t call (i.e. destructors in C++).  It is ok if these\n+\t\t destructors clobber RETURN_VALUE_REG, because the\n+\t\t only time we care about this is when TARGET is that\n+\t\t register.  But in C++, we take care to never return\n+\t\t that register directly.  */\n+\t      expand_cleanups_to (old_cleanups);\n+\t    }\n \n #ifdef ACCUMULATE_OUTGOING_ARGS\n \t  /* If the outgoing argument list must be preserved, push"}]}