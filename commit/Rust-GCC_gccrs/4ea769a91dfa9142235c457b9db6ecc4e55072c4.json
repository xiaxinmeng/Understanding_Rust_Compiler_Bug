{"sha": "4ea769a91dfa9142235c457b9db6ecc4e55072c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVhNzY5YTkxZGZhOTE0MjIzNWM0NTdiOWRiNmVjYzRlNTUwNzJjNA==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-04-22T12:07:55Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-04-22T12:07:55Z"}, "message": "[Fortran] Truncate warn with OpenMP/OpenACC/!GCC$ (PR94709)\n\nWhile '!$' with -fopenmp unsets too often load_line's seen_comment flag,\nthis only affects <tab> warnings; for trunction warnings, gfc_next_char_literal\nre-handles the directives correctly.  In terms of missed warnings, a directive\nthat is completely in the truncated part is not diagnosted (as it starts\nwith a '!').\n\n        PR fortran/94709\n        * scanner.c (load_line): In fixed form, also treat 'C' as comment and\n        'D'/'d' only with -fd-lines-as-comments. Treat '!$' with -fopenmp,\n        '!$acc' with -fopenacc and '!GCC$' as non-comment to permit <tab>\n        and truncation warnings.\n\n        PR fortran/94709\n        * gfortran.dg/gomp/warn_truncated.f: New.\n        * gfortran.dg/gomp/warn_truncated.f90: New.", "tree": {"sha": "79afc51e7d496f298b7bb7c9a8491b5bd7e06fa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79afc51e7d496f298b7bb7c9a8491b5bd7e06fa6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ea769a91dfa9142235c457b9db6ecc4e55072c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ea769a91dfa9142235c457b9db6ecc4e55072c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ea769a91dfa9142235c457b9db6ecc4e55072c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ea769a91dfa9142235c457b9db6ecc4e55072c4/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a047a32782cfeb7c2265af5b607ac4c51a9f6cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a047a32782cfeb7c2265af5b607ac4c51a9f6cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a047a32782cfeb7c2265af5b607ac4c51a9f6cc"}], "stats": {"total": 105, "additions": 94, "deletions": 11}, "files": [{"sha": "e02815ee246454e38798ad06f207fdc58ef1ed4e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ea769a91dfa9142235c457b9db6ecc4e55072c4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ea769a91dfa9142235c457b9db6ecc4e55072c4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4ea769a91dfa9142235c457b9db6ecc4e55072c4", "patch": "@@ -1,3 +1,11 @@\n+2020-04-22  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/94709\n+\t* scanner.c (load_line): In fixed form, also treat 'C' as comment and\n+\t'D'/'d' only with -fd-lines-as-comments. Treat '!$' with -fopenmp,\n+\t'!$acc' with -fopenacc and '!GCC$' as non-comment to permit <tab>\n+\tand truncation warnings.\n+\n 2020-04-20  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \t* dump-parse-tree.c (show_attr): Add numerous flags, some cleanup."}, {"sha": "6f93508f9341fcee4fcfbd850c4163a521a330fa", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 46, "deletions": 11, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ea769a91dfa9142235c457b9db6ecc4e55072c4/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ea769a91dfa9142235c457b9db6ecc4e55072c4/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=4ea769a91dfa9142235c457b9db6ecc4e55072c4", "patch": "@@ -1755,11 +1755,15 @@ static int\n load_line (FILE *input, gfc_char_t **pbuf, int *pbuflen, const int *first_char)\n {\n   int c, maxlen, i, preprocessor_flag, buflen = *pbuflen;\n-  int trunc_flag = 0, seen_comment = 0;\n-  int seen_printable = 0, seen_ampersand = 0, quoted = ' ';\n-  gfc_char_t *buffer;\n+  int quoted = ' ', comment_ix = -1;\n+  bool seen_comment = false;\n+  bool first_comment = true;\n+  bool trunc_flag = false;\n+  bool seen_printable = false;\n+  bool seen_ampersand = false;\n   bool found_tab = false;\n   bool warned_tabs = false;\n+  gfc_char_t *buffer;\n \n   /* Determine the maximum allowed line length.  */\n   if (gfc_current_form == FORM_FREE)\n@@ -1794,7 +1798,7 @@ load_line (FILE *input, gfc_char_t **pbuf, int *pbuflen, const int *first_char)\n \n   /* In order to not truncate preprocessor lines, we have to\n      remember that this is one.  */\n-  preprocessor_flag = (c == '#' ? 1 : 0);\n+  preprocessor_flag = (c == '#');\n \n   for (;;)\n     {\n@@ -1824,20 +1828,24 @@ load_line (FILE *input, gfc_char_t **pbuf, int *pbuflen, const int *first_char)\n \t{\n \t  if (seen_ampersand)\n \t    {\n-\t      seen_ampersand = 0;\n-\t      seen_printable = 1;\n+\t      seen_ampersand = false;\n+\t      seen_printable = true;\n \t    }\n \t  else\n-\t    seen_ampersand = 1;\n+\t    seen_ampersand = true;\n \t}\n \n       if ((c != '&' && c != '!' && c != ' ') || (c == '!' && !seen_ampersand))\n-\tseen_printable = 1;\n+\tseen_printable = true;\n \n       /* Is this a fixed-form comment?  */\n       if (gfc_current_form == FORM_FIXED && i == 0\n-\t  && (c == '*' || c == 'c' || c == 'd'))\n-\tseen_comment = 1;\n+\t  && (c == '*' || c == 'c' || c == 'C'\n+\t      || (gfc_option.flag_d_lines != -1 && (c == 'd' || c == 'D'))))\n+\t{\n+\t  seen_comment = true;\n+\t  comment_ix = i;\n+\t}\n \n       if (quoted == ' ')\n \t{\n@@ -1849,7 +1857,34 @@ load_line (FILE *input, gfc_char_t **pbuf, int *pbuflen, const int *first_char)\n \n       /* Is this a free-form comment?  */\n       if (c == '!' && quoted == ' ')\n-        seen_comment = 1;\n+\t{\n+\t  if (seen_comment)\n+\t    first_comment = false;\n+\t  seen_comment = true;\n+\t  comment_ix = i;\n+\t}\n+\n+      /* For truncation and tab warnings, set seen_comment to false if one has\n+\t either an OpenMP or OpenACC directive - or a !GCC$ attribute.  If\n+\t OpenMP is enabled, use '!$' as as conditional compilation sentinel\n+\t and OpenMP directive ('!$omp').  */\n+      if (seen_comment && first_comment && flag_openmp && comment_ix + 1 == i\n+\t  && c == '$')\n+\tfirst_comment = seen_comment = false;\n+      if (seen_comment && first_comment && comment_ix + 4 == i)\n+\t{\n+\t  if (((*pbuf)[comment_ix+1] == 'g' || (*pbuf)[comment_ix+1] == 'G')\n+\t      && ((*pbuf)[comment_ix+2] == 'c' || (*pbuf)[comment_ix+2] == 'C')\n+\t      && ((*pbuf)[comment_ix+3] == 'c' || (*pbuf)[comment_ix+3] == 'C')\n+\t      && (*pbuf)[comment_ix+4] == '$')\n+\t    first_comment = seen_comment = false;\n+\t  if (flag_openacc\n+\t      && (*pbuf)[comment_ix+1] == '$'\n+\t      && ((*pbuf)[comment_ix+2] == 'a' || (*pbuf)[comment_ix+2] == 'A')\n+\t      && ((*pbuf)[comment_ix+3] == 'c' || (*pbuf)[comment_ix+3] == 'C')\n+\t      && ((*pbuf)[comment_ix+4] == 'c' || (*pbuf)[comment_ix+4] == 'C'))\n+\t    first_comment = seen_comment = false;\n+\t}\n \n       /* Vendor extension: \"<tab>1\" marks a continuation line.  */\n       if (found_tab)"}, {"sha": "36b2893a208067369c923d1d17e6ad4f51dd30b6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ea769a91dfa9142235c457b9db6ecc4e55072c4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ea769a91dfa9142235c457b9db6ecc4e55072c4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4ea769a91dfa9142235c457b9db6ecc4e55072c4", "patch": "@@ -1,3 +1,9 @@\n+2020-04-22  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/94709\n+\t* gfortran.dg/gomp/warn_truncated.f: New.\n+\t* gfortran.dg/gomp/warn_truncated.f90: New.\n+\n 2020-04-22  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR tree-optimization/94700"}, {"sha": "5b50b8ad843729874fa563f8d60c463e3954386a", "filename": "gcc/testsuite/gfortran.dg/gomp/warn_truncated.f", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ea769a91dfa9142235c457b9db6ecc4e55072c4/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fwarn_truncated.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ea769a91dfa9142235c457b9db6ecc4e55072c4/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fwarn_truncated.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fwarn_truncated.f?ref=4ea769a91dfa9142235c457b9db6ecc4e55072c4", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-Wall\" }\n+!\n+! PR fortran/94709\n+!\n+! Check that 'Line truncated' gets printed as appropriate\n+!\n+c$omp target                                                            ! map()\n+c$omp end target\n+\n+c$omp target                                                            map() ! { dg-warning \"Line truncated\" }\n+c$acc declare                                                           map()\n+ca =                                                                    5\n+c$omp end target\n+       end"}, {"sha": "86d7eb27b3077217af97e36aebfc23f6971a9984", "filename": "gcc/testsuite/gfortran.dg/gomp/warn_truncated.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ea769a91dfa9142235c457b9db6ecc4e55072c4/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fwarn_truncated.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ea769a91dfa9142235c457b9db6ecc4e55072c4/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fwarn_truncated.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fwarn_truncated.f90?ref=4ea769a91dfa9142235c457b9db6ecc4e55072c4", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile }\n+!\n+! PR fortran/94709\n+!\n+! Check that 'Line truncated' gets printed as appropriate\n+!\n+integer i\n+i = 0\n+!$omp target                                                                                                                                        ! map()\n+!$omp end target\n+\n+!$omp target                                                                                                                                        map() ! { dg-error \"Line truncated\" }\n+!$acc kernels                                                                                                                                       copy()\n+!a =                                                                                                                                                 5\n+!$acc end kernels\n+!$omp end target\n+end\n+\n+! { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 }"}]}