{"sha": "7352723b9e9a7f04d68aca3f09386d1a14c87f7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM1MjcyM2I5ZTlhN2YwNGQ2OGFjYTNmMDkzODZkMWExNGM4N2Y3ZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-07-11T08:16:48Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-07-11T08:16:48Z"}, "message": "trans.c (add_decl_expr): Minor tweak.\n\n\t* gcc-interface/trans.c (add_decl_expr): Minor tweak.\n\t* gcc-interface/utils.c (create_var_decl): For an external variable,\n\talso clear TREE_READONLY in LTO mode if the initializer is not a valid\n\tconstant and set DECL_READONLY_ONCE_ELAB instead.\n\nFrom-SVN: r238206", "tree": {"sha": "bc751dc234498dcd1192cf177d53d0f58422dcc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc751dc234498dcd1192cf177d53d0f58422dcc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7352723b9e9a7f04d68aca3f09386d1a14c87f7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7352723b9e9a7f04d68aca3f09386d1a14c87f7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7352723b9e9a7f04d68aca3f09386d1a14c87f7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7352723b9e9a7f04d68aca3f09386d1a14c87f7e/comments", "author": null, "committer": null, "parents": [{"sha": "833c1dbc609404a69b30d7f045b50935c058302b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/833c1dbc609404a69b30d7f045b50935c058302b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/833c1dbc609404a69b30d7f045b50935c058302b"}], "stats": {"total": 44, "additions": 30, "deletions": 14}, "files": [{"sha": "24756a3d570bbd1bcb47ee6cc03d25c0e84a6952", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7352723b9e9a7f04d68aca3f09386d1a14c87f7e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7352723b9e9a7f04d68aca3f09386d1a14c87f7e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7352723b9e9a7f04d68aca3f09386d1a14c87f7e", "patch": "@@ -1,3 +1,10 @@\n+2016-07-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (add_decl_expr): Minor tweak.\n+\t* gcc-interface/utils.c (create_var_decl): For an external variable,\n+\talso clear TREE_READONLY in LTO mode if the initializer is not a valid\n+\tconstant and set DECL_READONLY_ONCE_ELAB instead.\n+\n 2016-07-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/71817"}, {"sha": "9d76fb94a733312497f16d8d98daf15003dadb84", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7352723b9e9a7f04d68aca3f09386d1a14c87f7e/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7352723b9e9a7f04d68aca3f09386d1a14c87f7e/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=7352723b9e9a7f04d68aca3f09386d1a14c87f7e", "patch": "@@ -8012,7 +8012,7 @@ void\n add_decl_expr (tree gnu_decl, Entity_Id gnat_entity)\n {\n   tree type = TREE_TYPE (gnu_decl);\n-  tree gnu_stmt, gnu_init, t;\n+  tree gnu_stmt, gnu_init;\n \n   /* If this is a variable that Gigi is to ignore, we may have been given\n      an ERROR_MARK.  So test for it.  We also might have been given a\n@@ -8059,22 +8059,19 @@ add_decl_expr (tree gnu_decl, Entity_Id gnat_entity)\n \t      && !initializer_constant_valid_p (gnu_init,\n \t\t\t\t\t\tTREE_TYPE (gnu_init)))))\n     {\n-      /* If GNU_DECL has a padded type, convert it to the unpadded\n-\t type so the assignment is done properly.  */\n-      if (TYPE_IS_PADDING_P (type))\n-\tt = convert (TREE_TYPE (TYPE_FIELDS (type)), gnu_decl);\n-      else\n-\tt = gnu_decl;\n-\n-      gnu_stmt = build_binary_op (INIT_EXPR, NULL_TREE, t, gnu_init);\n-\n       DECL_INITIAL (gnu_decl) = NULL_TREE;\n       if (TREE_READONLY (gnu_decl))\n \t{\n \t  TREE_READONLY (gnu_decl) = 0;\n \t  DECL_READONLY_ONCE_ELAB (gnu_decl) = 1;\n \t}\n \n+      /* If GNU_DECL has a padded type, convert it to the unpadded\n+\t type so the assignment is done properly.  */\n+      if (TYPE_IS_PADDING_P (type))\n+\tgnu_decl = convert (TREE_TYPE (TYPE_FIELDS (type)), gnu_decl);\n+\n+      gnu_stmt = build_binary_op (INIT_EXPR, NULL_TREE, gnu_decl, gnu_init);\n       add_stmt_with_node (gnu_stmt, gnat_entity);\n     }\n }"}, {"sha": "3a546ff0af6789a7402a3dae18604ae16fe59131", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7352723b9e9a7f04d68aca3f09386d1a14c87f7e/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7352723b9e9a7f04d68aca3f09386d1a14c87f7e/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=7352723b9e9a7f04d68aca3f09386d1a14c87f7e", "patch": "@@ -2430,8 +2430,9 @@ create_var_decl (tree name, tree asm_name, tree type, tree init,\n      and may be used for scalars in general but not for aggregates.  */\n   tree var_decl\n     = build_decl (input_location,\n-\t\t  (constant_p && const_decl_allowed_p\n-\t\t   && !AGGREGATE_TYPE_P (type)) ? CONST_DECL : VAR_DECL,\n+\t\t  (constant_p\n+\t\t   && const_decl_allowed_p\n+\t\t   && !AGGREGATE_TYPE_P (type) ? CONST_DECL : VAR_DECL),\n \t\t  name, type);\n \n   /* Detect constants created by the front-end to hold 'reference to function\n@@ -2456,9 +2457,20 @@ create_var_decl (tree name, tree asm_name, tree type, tree init,\n      constant initialization and save any variable elaborations for the\n      elaboration routine.  If we are just annotating types, throw away the\n      initialization if it isn't a constant.  */\n-  if ((extern_flag && !constant_p)\n+  if ((extern_flag && init && !constant_p)\n       || (type_annotate_only && init && !TREE_CONSTANT (init)))\n-    init = NULL_TREE;\n+    {\n+      init = NULL_TREE;\n+\n+      /* In LTO mode, also clear TREE_READONLY the same way add_decl_expr\n+\t would do it if the initializer was not thrown away here, as the\n+\t WPA phase requires a consistent view across compilation units.  */\n+      if (const_flag && flag_generate_lto)\n+\t{\n+\t  const_flag = false;\n+\t  DECL_READONLY_ONCE_ELAB (var_decl) = 1;\n+\t}\n+    }\n \n   /* At the global level, a non-constant initializer generates elaboration\n      statements.  Check that such statements are allowed, that is to say,"}]}