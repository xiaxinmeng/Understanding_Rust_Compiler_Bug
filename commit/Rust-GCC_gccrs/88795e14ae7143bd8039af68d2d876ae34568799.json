{"sha": "88795e14ae7143bd8039af68d2d876ae34568799", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg3OTVlMTRhZTcxNDNiZDgwMzlhZjY4ZDJkODc2YWUzNDU2ODc5OQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-09-28T07:00:46Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-09-28T07:32:27Z"}, "message": "Fix bogus alignment warning on address clause\n\nThe compiler gives a bogus alignment warning on an address clause and\na discriminated record type with variable size.\n\ngcc/ada/ChangeLog:\n\t* gcc-interface/decl.c (maybe_saturate_size): Add ALIGN parameter\n\tand round down the result to ALIGN.\n\t(gnat_to_gnu_entity): Adjust calls to maybe_saturate_size.\n\ngcc/testsuite/ChangeLog:\n\t* gnat.dg/addr16.adb: New test.\n\t* gnat.dg/addr16_pkg.ads: New helper.", "tree": {"sha": "f4d3f7ff26499adab0ec12d3f1330f864ac2d704", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4d3f7ff26499adab0ec12d3f1330f864ac2d704"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88795e14ae7143bd8039af68d2d876ae34568799", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88795e14ae7143bd8039af68d2d876ae34568799", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88795e14ae7143bd8039af68d2d876ae34568799", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88795e14ae7143bd8039af68d2d876ae34568799/comments", "author": null, "committer": null, "parents": [{"sha": "dabef758bfe23d847cb1e2de2d0c0a67a53dc56a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dabef758bfe23d847cb1e2de2d0c0a67a53dc56a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dabef758bfe23d847cb1e2de2d0c0a67a53dc56a"}], "stats": {"total": 51, "additions": 43, "deletions": 8}, "files": [{"sha": "cd0a50b2083d5cc96ac80bfc69eccf6111d405a5", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88795e14ae7143bd8039af68d2d876ae34568799/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88795e14ae7143bd8039af68d2d876ae34568799/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=88795e14ae7143bd8039af68d2d876ae34568799", "patch": "@@ -232,7 +232,7 @@ static tree build_position_list (tree, bool, tree, tree, unsigned int, tree);\n static vec<subst_pair> build_subst_list (Entity_Id, Entity_Id, bool);\n static vec<variant_desc> build_variant_list (tree, Node_Id, vec<subst_pair>,\n \t\t\t\t\t     vec<variant_desc>);\n-static tree maybe_saturate_size (tree);\n+static tree maybe_saturate_size (tree, unsigned int align);\n static tree validate_size (Uint, tree, Entity_Id, enum tree_code, bool, bool,\n \t\t\t   const char *, const char *);\n static void set_rm_size (Uint, tree, Entity_Id);\n@@ -4425,7 +4425,12 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t  /* If the size is self-referential, annotate the maximum value\n \t     after saturating it, if need be, to avoid a No_Uint value.  */\n \t  if (CONTAINS_PLACEHOLDER_P (gnu_size))\n-\t    gnu_size = maybe_saturate_size (max_size (gnu_size, true));\n+\t    {\n+\t      const unsigned int align\n+\t\t= UI_To_Int (Alignment (gnat_entity)) * BITS_PER_UNIT;\n+\t      gnu_size\n+\t\t= maybe_saturate_size (max_size (gnu_size, true), align);\n+\t    }\n \n \t  /* If we are just annotating types and the type is tagged, the tag\n \t     and the parent components are not generated by the front-end so\n@@ -4461,7 +4466,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t\t  gnu_size = size_binop (PLUS_EXPR, gnu_size, offset);\n \t\t}\n \n-\t      gnu_size = maybe_saturate_size (round_up (gnu_size, align));\n+\t      gnu_size\n+\t\t= maybe_saturate_size (round_up (gnu_size, align), align);\n \t      Set_Esize (gnat_entity, annotate_value (gnu_size));\n \n \t      /* Tagged types are Strict_Alignment so RM_Size = Esize.  */\n@@ -8946,15 +8952,21 @@ build_variant_list (tree gnu_qual_union_type, Node_Id gnat_variant_part,\n }\n \f\n /* If SIZE has overflowed, return the maximum valid size, which is the upper\n-   bound of the signed sizetype in bits; otherwise return SIZE unmodified.  */\n+   bound of the signed sizetype in bits, rounded down to ALIGN.  Otherwise\n+   return SIZE unmodified.  */\n \n static tree\n-maybe_saturate_size (tree size)\n+maybe_saturate_size (tree size, unsigned int align)\n {\n   if (TREE_CODE (size) == INTEGER_CST && TREE_OVERFLOW (size))\n-    size = size_binop (MULT_EXPR,\n-\t\t       fold_convert (bitsizetype, TYPE_MAX_VALUE (ssizetype)),\n-\t\t       build_int_cst (bitsizetype, BITS_PER_UNIT));\n+    {\n+      size\n+\t= size_binop (MULT_EXPR,\n+\t\t      fold_convert (bitsizetype, TYPE_MAX_VALUE (ssizetype)),\n+\t\t      build_int_cst (bitsizetype, BITS_PER_UNIT));\n+      size = round_down (size, align);\n+    }\n+\n   return size;\n }\n "}, {"sha": "8f09da023fb2ec6842d3b6d82f87b1ec25787694", "filename": "gcc/testsuite/gnat.dg/addr16.adb", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88795e14ae7143bd8039af68d2d876ae34568799/gcc%2Ftestsuite%2Fgnat.dg%2Faddr16.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88795e14ae7143bd8039af68d2d876ae34568799/gcc%2Ftestsuite%2Fgnat.dg%2Faddr16.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faddr16.adb?ref=88795e14ae7143bd8039af68d2d876ae34568799", "patch": "@@ -0,0 +1,14 @@\n+-- { dg-do compile }\n+\n+with Addr16_Pkg; use Addr16_Pkg;\n+\n+procedure Addr16 (R : Rec) is\n+\n+  pragma Unsuppress (Alignment_Check);\n+\n+  B : Integer;\n+  for B'Address use R.A'Address;\n+\n+begin\n+  null;\n+end;"}, {"sha": "9a1b9e3b21bd16231960e0cb2947da85a03d6fb5", "filename": "gcc/testsuite/gnat.dg/addr16_pkg.ads", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88795e14ae7143bd8039af68d2d876ae34568799/gcc%2Ftestsuite%2Fgnat.dg%2Faddr16_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88795e14ae7143bd8039af68d2d876ae34568799/gcc%2Ftestsuite%2Fgnat.dg%2Faddr16_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faddr16_pkg.ads?ref=88795e14ae7143bd8039af68d2d876ae34568799", "patch": "@@ -0,0 +1,9 @@\n+package Addr16_Pkg is\n+\n+  type Arr is array (Positive range <>) of Long_Long_Integer;\n+\n+  type Rec (D : Positive) is record\n+    A : Arr (1 .. D);\n+  end record;\n+\n+end Addr16_Pkg;"}]}