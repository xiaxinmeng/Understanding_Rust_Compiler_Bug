{"sha": "9dd8f36f2310db400fde9ca4b55ebb7791f50ec0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRkOGYzNmYyMzEwZGI0MDBmZGU5Y2E0YjU1ZWJiNzc5MWY1MGVjMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-27T13:18:28Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-27T13:18:28Z"}, "message": "[multiple changes]\n\n2017-04-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_attr.adb (Analyze_Attribute, case 'Image): In Ada2012 the\n\tprefix can be an object reference in which case Obj'Image (X)\n\tcan only be interpreted as an indexing of the parameterless\n\tversion of the attribute.\n\t* par-ch4.adb (P_Name): An attribute reference can be the prefix of\n\tan indexing or a slice operation if the attribute does not require\n\tparameters. In Ada2012 'Image also belongs in this category,\n\tand A'Image (lo .. hi) is legal and must be parsed as a slice.\n\n2017-04-27  Yannick Moy  <moy@adacore.com>\n\n\t* exp_ch4.adb: Minor reformatting.\n\t* gnat1drv.adb (Adjust_Global_Switches): When in GNATprove mode,\n\tdisable the CodePeer and C generation modes. Similar to the\n\topposite actions done in CodePeer mode.\n\nFrom-SVN: r247331", "tree": {"sha": "404e270b875cdc8773a13f7c2cc90acc4e910ddb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/404e270b875cdc8773a13f7c2cc90acc4e910ddb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9dd8f36f2310db400fde9ca4b55ebb7791f50ec0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dd8f36f2310db400fde9ca4b55ebb7791f50ec0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dd8f36f2310db400fde9ca4b55ebb7791f50ec0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dd8f36f2310db400fde9ca4b55ebb7791f50ec0/comments", "author": null, "committer": null, "parents": [{"sha": "7327f5c21ce98b8211801095008e2f024593b79c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7327f5c21ce98b8211801095008e2f024593b79c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7327f5c21ce98b8211801095008e2f024593b79c"}], "stats": {"total": 105, "additions": 90, "deletions": 15}, "files": [{"sha": "6a32381ed3b11d7452b1ba4cccaaccf7a6407795", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd8f36f2310db400fde9ca4b55ebb7791f50ec0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd8f36f2310db400fde9ca4b55ebb7791f50ec0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9dd8f36f2310db400fde9ca4b55ebb7791f50ec0", "patch": "@@ -1,3 +1,21 @@\n+2017-04-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute, case 'Image): In Ada2012 the\n+\tprefix can be an object reference in which case Obj'Image (X)\n+\tcan only be interpreted as an indexing of the parameterless\n+\tversion of the attribute.\n+\t* par-ch4.adb (P_Name): An attribute reference can be the prefix of\n+\tan indexing or a slice operation if the attribute does not require\n+\tparameters. In Ada2012 'Image also belongs in this category,\n+\tand A'Image (lo .. hi) is legal and must be parsed as a slice.\n+\n+2017-04-27  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_ch4.adb: Minor reformatting.\n+\t* gnat1drv.adb (Adjust_Global_Switches): When in GNATprove mode,\n+\tdisable the CodePeer and C generation modes. Similar to the\n+\topposite actions done in CodePeer mode.\n+\n 2017-04-27  Yannick Moy  <moy@adacore.com>\n \n \t* sem_res.adb: Remove duplicate code."}, {"sha": "57691b9f537acb9165c27c8a90682627371e3f0d", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd8f36f2310db400fde9ca4b55ebb7791f50ec0/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd8f36f2310db400fde9ca4b55ebb7791f50ec0/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=9dd8f36f2310db400fde9ca4b55ebb7791f50ec0", "patch": "@@ -13060,7 +13060,7 @@ package body Exp_Ch4 is\n          Result :=\n            Make_Op_Le (Loc,\n              Left_Opnd  => Left,\n-                       Right_Opnd => Right);\n+             Right_Opnd => Right);\n \n       --  X'Length > 1  => X'First < X'Last\n       --  X'Length > n  => X'First + (n = 1) < X'Last"}, {"sha": "14bf6e37fe09c282e6d113e9bb0a7f017eea68bf", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd8f36f2310db400fde9ca4b55ebb7791f50ec0/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd8f36f2310db400fde9ca4b55ebb7791f50ec0/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=9dd8f36f2310db400fde9ca4b55ebb7791f50ec0", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -381,6 +381,22 @@ procedure Gnat1drv is\n \n       if GNATprove_Mode then\n \n+         --  Turn off CodePeer mode (which can be set via e.g. -gnatC or\n+         --  -gnateC), not compatible with GNATprove mode.\n+\n+         CodePeer_Mode := False;\n+         Generate_SCIL := False;\n+\n+         --  Turn off C tree generation, not compatible with GNATprove mode. We\n+         --  do not expect this to happen in normal use, since both modes are\n+         --  enabled by special tools, but it is useful to turn off these flags\n+         --  this way when we are doing GNATprove tests on existing test suites\n+         --  that may have -gnateg set, to avoid the need for special casing.\n+\n+         Modify_Tree_For_C := False;\n+         Generate_C_Code := False;\n+         Unnest_Subprogram_Mode := False;\n+\n          --  Turn off inlining, which would confuse formal verification output\n          --  and gain nothing.\n "}, {"sha": "0e01594dd118d0f3645de1c26f06430c6970db10", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd8f36f2310db400fde9ca4b55ebb7791f50ec0/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd8f36f2310db400fde9ca4b55ebb7791f50ec0/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=9dd8f36f2310db400fde9ca4b55ebb7791f50ec0", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -47,12 +47,11 @@ package body Ch4 is\n       Attribute_Version      => True,\n       Attribute_Type_Key     => True,\n       others                 => False);\n-   --  This map contains True for parameterless attributes that return a\n-   --  string or a type. For those attributes, a left parenthesis after\n-   --  the attribute should not be analyzed as the beginning of a parameters\n-   --  list because it may denote a slice operation (X'Img (1 .. 2)) or\n-   --  a type conversion (X'Class (Y)). The Ada2012 attribute 'Old is in\n-   --  this category.\n+   --  This map contains True for parameterless attributes that return a string\n+   --  or a type. For those attributes, a left parenthesis after the attribute\n+   --  should not be analyzed as the beginning of a parameters list because it\n+   --  may denote a slice operation (X'Img (1 .. 2)) or a type conversion\n+   --  (X'Class (Y)). The Ada 2012 attribute 'Old is in this category.\n \n    --  Note: Loop_Entry is in this list because, although it can take an\n    --  optional argument (the loop name), we can't distinguish that at parse\n@@ -587,8 +586,35 @@ package body Ch4 is\n                         --  Here for normal case (not => for named parameter)\n \n                         else\n-                           Append (Expr, Expressions (Name_Node));\n-                           exit when not Comma_Present;\n+                           --  Special handling for 'Image in Ada 2012, where\n+                           --  the attribute can be parameterless and its value\n+                           --  can be the prefix of a slice. Rewrite name as a\n+                           --  a slice, Expr is its low bound.\n+\n+                           if Token = Tok_Dot_Dot\n+                             and then Attr_Name = Name_Image\n+                             and then Ada_Version >= Ada_2012\n+                           then\n+                              Set_Expressions (Name_Node, No_List);\n+                              Prefix_Node := Name_Node;\n+                              Name_Node :=\n+                                New_Node (N_Slice, Sloc (Prefix_Node));\n+                              Set_Prefix (Name_Node, Prefix_Node);\n+                              Range_Node := New_Node (N_Range, Token_Ptr);\n+                              Set_Low_Bound (Range_Node, Expr);\n+                              Scan; -- past ..\n+                              Expr_Node := P_Expression;\n+                              Check_Simple_Expression (Expr_Node);\n+                              Set_High_Bound (Range_Node, Expr_Node);\n+                              Set_Discrete_Range (Name_Node, Range_Node);\n+                              T_Right_Paren;\n+\n+                              goto Scan_Name_Extension;\n+\n+                           else\n+                              Append (Expr, Expressions (Name_Node));\n+                              exit when not Comma_Present;\n+                           end if;\n                         end if;\n                      end;\n                   end loop;"}, {"sha": "f37b4c3068c0b5746956dd8c2ed9d3f3ccdd1b38", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd8f36f2310db400fde9ca4b55ebb7791f50ec0/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd8f36f2310db400fde9ca4b55ebb7791f50ec0/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=9dd8f36f2310db400fde9ca4b55ebb7791f50ec0", "patch": "@@ -4042,10 +4042,25 @@ package body Sem_Attr is\n            and then Is_Object_Reference (P)\n            and then Is_Scalar_Type (P_Type)\n          then\n-            Rewrite (N,\n-              Make_Attribute_Reference (Loc,\n-                Prefix         => Relocate_Node (P),\n-                Attribute_Name => Name_Img));\n+            if No (Expressions (N)) then\n+               Rewrite (N,\n+                 Make_Attribute_Reference (Loc,\n+                   Prefix         => Relocate_Node (P),\n+                   Attribute_Name => Name_Img));\n+\n+            --  If the attribute reference includes expressions, the\n+            --  only possible interpretation is as an indexing of the\n+            --  parameterless version of 'Image, so rewrite it accordingly.\n+\n+            else\n+               Rewrite (N,\n+                  Make_Indexed_Component (Loc,\n+                     Prefix      =>\n+                       Make_Attribute_Reference (Loc,\n+                         Prefix         => Relocate_Node (P),\n+                         Attribute_Name => Name_Img),\n+                     Expressions => Expressions (N)));\n+            end if;\n             Analyze (N);\n             return;\n "}]}