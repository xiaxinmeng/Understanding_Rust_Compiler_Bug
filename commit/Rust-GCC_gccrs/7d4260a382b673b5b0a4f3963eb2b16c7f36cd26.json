{"sha": "7d4260a382b673b5b0a4f3963eb2b16c7f36cd26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q0MjYwYTM4MmI2NzNiNWIwYTRmMzk2M2ViMmIxNmM3ZjM2Y2QyNg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2009-01-17T02:03:25Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-01-17T02:03:25Z"}, "message": "Makefile.am (sources): Add math_stubs_float.cc.\n\n2009-01-16  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* src/Makefile.am (sources): Add math_stubs_float.cc.\n\t* src/Makefile.in: Regenerate.\n\t* src/math_stubs_float.cc: New, from libmath/stubs.c.\n\nFrom-SVN: r143457", "tree": {"sha": "7e71558e7567f20e7088533613c8223da3834f53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e71558e7567f20e7088533613c8223da3834f53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d4260a382b673b5b0a4f3963eb2b16c7f36cd26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d4260a382b673b5b0a4f3963eb2b16c7f36cd26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d4260a382b673b5b0a4f3963eb2b16c7f36cd26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d4260a382b673b5b0a4f3963eb2b16c7f36cd26/comments", "author": null, "committer": null, "parents": [{"sha": "1cc914fc951e0c1e3ea8d288d18f4dd48d44266f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cc914fc951e0c1e3ea8d288d18f4dd48d44266f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cc914fc951e0c1e3ea8d288d18f4dd48d44266f"}], "stats": {"total": 278, "additions": 258, "deletions": 20}, "files": [{"sha": "30287e8480d7bfbc635c2ecaf174a9aef413e82b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d4260a382b673b5b0a4f3963eb2b16c7f36cd26/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d4260a382b673b5b0a4f3963eb2b16c7f36cd26/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7d4260a382b673b5b0a4f3963eb2b16c7f36cd26", "patch": "@@ -1,3 +1,9 @@\n+2009-01-16  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* src/Makefile.am (sources): Add math_stubs_float.cc.\n+\t* src/Makefile.in: Regenerate.\n+\t* src/math_stubs_float.cc: New, from libmath/stubs.c.\n+\n 2009-01-15  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* src/Makefile.am (sources): Add math_stubs_long_double.cc."}, {"sha": "185ac4d1c52066cede447e516416481ae8314d3f", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d4260a382b673b5b0a4f3963eb2b16c7f36cd26/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d4260a382b673b5b0a4f3963eb2b16c7f36cd26/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=7d4260a382b673b5b0a4f3963eb2b16c7f36cd26", "patch": "@@ -162,6 +162,7 @@ sources = \\\n \tlocale_init.cc \\\n \tlocale_facets.cc \\\n \tlocalename.cc \\\n+\tmath_stubs_float.cc \\\n \tmath_stubs_long_double.cc \\\n \tstdexcept.cc \\\n \tstrstream.cc \\"}, {"sha": "9ee5275198b433fa4404c793264a53d0034d849d", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d4260a382b673b5b0a4f3963eb2b16c7f36cd26/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d4260a382b673b5b0a4f3963eb2b16c7f36cd26/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=7d4260a382b673b5b0a4f3963eb2b16c7f36cd26", "patch": "@@ -79,18 +79,18 @@ am__libstdc___la_SOURCES_DIST = atomic.cc bitmap_allocator.cc \\\n \thash_c++0x.cc globals_io.cc hashtable.cc hashtable_c++0x.cc \\\n \tios.cc ios_failure.cc ios_init.cc ios_locale.cc limits.cc \\\n \tlimits_c++0x.cc list.cc debug_list.cc locale.cc locale_init.cc \\\n-\tlocale_facets.cc localename.cc math_stubs_long_double.cc \\\n-\tstdexcept.cc strstream.cc system_error.cc tree.cc \\\n-\tallocator-inst.cc concept-inst.cc fstream-inst.cc ext-inst.cc \\\n-\tios-inst.cc iostream-inst.cc istream-inst.cc istream.cc \\\n-\tlocale-inst.cc misc-inst.cc ostream-inst.cc sstream-inst.cc \\\n-\tstreambuf-inst.cc streambuf.cc string-inst.cc valarray-inst.cc \\\n-\twlocale-inst.cc wstring-inst.cc mutex.cc condition_variable.cc \\\n-\tchrono.cc thread.cc atomicity.cc codecvt_members.cc \\\n-\tcollate_members.cc ctype_members.cc messages_members.cc \\\n-\tmonetary_members.cc numeric_members.cc time_members.cc \\\n-\tbasic_file.cc c++locale.cc compatibility-ldbl.cc \\\n-\tparallel_list.cc parallel_settings.cc\n+\tlocale_facets.cc localename.cc math_stubs_float.cc \\\n+\tmath_stubs_long_double.cc stdexcept.cc strstream.cc \\\n+\tsystem_error.cc tree.cc allocator-inst.cc concept-inst.cc \\\n+\tfstream-inst.cc ext-inst.cc ios-inst.cc iostream-inst.cc \\\n+\tistream-inst.cc istream.cc locale-inst.cc misc-inst.cc \\\n+\tostream-inst.cc sstream-inst.cc streambuf-inst.cc streambuf.cc \\\n+\tstring-inst.cc valarray-inst.cc wlocale-inst.cc \\\n+\twstring-inst.cc mutex.cc condition_variable.cc chrono.cc \\\n+\tthread.cc atomicity.cc codecvt_members.cc collate_members.cc \\\n+\tctype_members.cc messages_members.cc monetary_members.cc \\\n+\tnumeric_members.cc time_members.cc basic_file.cc c++locale.cc \\\n+\tcompatibility-ldbl.cc parallel_list.cc parallel_settings.cc\n am__objects_1 = atomicity.lo codecvt_members.lo collate_members.lo \\\n \tctype_members.lo messages_members.lo monetary_members.lo \\\n \tnumeric_members.lo time_members.lo\n@@ -105,14 +105,15 @@ am__objects_5 = atomic.lo bitmap_allocator.lo pool_allocator.lo \\\n \tglobals_io.lo hashtable.lo hashtable_c++0x.lo ios.lo \\\n \tios_failure.lo ios_init.lo ios_locale.lo limits.lo \\\n \tlimits_c++0x.lo list.lo debug_list.lo locale.lo locale_init.lo \\\n-\tlocale_facets.lo localename.lo math_stubs_long_double.lo \\\n-\tstdexcept.lo strstream.lo system_error.lo tree.lo \\\n-\tallocator-inst.lo concept-inst.lo fstream-inst.lo ext-inst.lo \\\n-\tios-inst.lo iostream-inst.lo istream-inst.lo istream.lo \\\n-\tlocale-inst.lo misc-inst.lo ostream-inst.lo sstream-inst.lo \\\n-\tstreambuf-inst.lo streambuf.lo string-inst.lo valarray-inst.lo \\\n-\twlocale-inst.lo wstring-inst.lo mutex.lo condition_variable.lo \\\n-\tchrono.lo thread.lo $(am__objects_1) $(am__objects_4)\n+\tlocale_facets.lo localename.lo math_stubs_float.lo \\\n+\tmath_stubs_long_double.lo stdexcept.lo strstream.lo \\\n+\tsystem_error.lo tree.lo allocator-inst.lo concept-inst.lo \\\n+\tfstream-inst.lo ext-inst.lo ios-inst.lo iostream-inst.lo \\\n+\tistream-inst.lo istream.lo locale-inst.lo misc-inst.lo \\\n+\tostream-inst.lo sstream-inst.lo streambuf-inst.lo streambuf.lo \\\n+\tstring-inst.lo valarray-inst.lo wlocale-inst.lo \\\n+\twstring-inst.lo mutex.lo condition_variable.lo chrono.lo \\\n+\tthread.lo $(am__objects_1) $(am__objects_4)\n am_libstdc___la_OBJECTS = $(am__objects_5)\n libstdc___la_OBJECTS = $(am_libstdc___la_OBJECTS)\n DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)\n@@ -412,6 +413,7 @@ sources = \\\n \tlocale_init.cc \\\n \tlocale_facets.cc \\\n \tlocalename.cc \\\n+\tmath_stubs_float.cc \\\n \tmath_stubs_long_double.cc \\\n \tstdexcept.cc \\\n \tstrstream.cc \\"}, {"sha": "f29566d614c089c911de3d252f20bc5f0e79481e", "filename": "libstdc++-v3/src/math_stubs_float.cc", "status": "added", "additions": 229, "deletions": 0, "changes": 229, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d4260a382b673b5b0a4f3963eb2b16c7f36cd26/libstdc%2B%2B-v3%2Fsrc%2Fmath_stubs_float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d4260a382b673b5b0a4f3963eb2b16c7f36cd26/libstdc%2B%2B-v3%2Fsrc%2Fmath_stubs_float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmath_stubs_float.cc?ref=7d4260a382b673b5b0a4f3963eb2b16c7f36cd26", "patch": "@@ -0,0 +1,229 @@\n+// Stub definitions for float math.\n+\n+// Copyright (C) 2001, 2002, 2003, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <cmath>\n+\n+// For targets which do not have support for float versions,\n+// we use the following crude approximations. We keep saying that we'll do\n+// better later, but never do.\n+\n+extern \"C\" \n+{\n+#ifndef _GLIBCXX_HAVE_FABSF\n+  float\n+  fabsf(float x)\n+  {\n+    return (float) fabs(x);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_ACOSF\n+  float\n+  acosf(float x)\n+  {\n+    return (float) acos(x);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_ASINF\n+  float\n+  asinf(float x)\n+  {\n+    return (float) asin(x);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_ATANF\n+  float\n+  atanf(float x)\n+  {\n+    return (float) atan(x);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_ATAN2F\n+  float\n+  atan2f(float x, float y)\n+  {\n+    return (float) atan2(x, y);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_CEILF\n+  float\n+  ceilf(float x)\n+  {\n+    return (float) ceil(x);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_COSF\n+  float\n+  cosf(float x)\n+  {\n+    return (float) cos(x);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_COSHF\n+  float\n+  coshf(float x)\n+  {\n+    return (float) cosh(x);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_EXPF\n+  float\n+  expf(float x)\n+  {\n+    return (float) exp(x);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_FLOORF\n+  float\n+  floorf(float x)\n+  {\n+    return (float) floor(x);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_FMODF\n+  float\n+  fmodf(float x, float y)\n+  {\n+    return (float) fmod(x, y);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_FREXPF\n+  float\n+  frexpf(float x, int *exp)\n+  {\n+    return (float) frexp(x, exp);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_SQRTF\n+  float\n+  sqrtf(float x)\n+  {\n+    return (float) sqrt(x);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_HYPOTF\n+  float\n+  hypotf(float x, float y)\n+  {\n+    float s = fabsf(x) + fabsf(y);\n+    if (s == 0.0F)\n+      return s;\n+    x /= s; y /= s;\n+    return s * sqrtf(x * x + y * y);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_LDEXPF\n+  float\n+  ldexpf(float x, int exp)\n+  {\n+    return (float) ldexp(x, exp);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_LOGF\n+  float\n+  logf(float x)\n+  {\n+    return (float) log(x);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_LOG10F\n+  float\n+  log10f(float x)\n+  {\n+    return (float) log10(x);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_MODFF\n+  float\n+  modff(float x, float *iptr)\n+  {\n+    double result, temp;\n+\n+    result = modf(x, &temp);\n+    *iptr = (float) temp;\n+    return (float) result;\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_POWF\n+  float\n+  powf(float x, float y)\n+  {\n+    return (float) pow(x, y);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_SINF\n+  float\n+  sinf(float x)\n+  {\n+    return (float) sin(x);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_SINHF\n+  float\n+  sinhf(float x)\n+  {\n+    return (float) sinh(x);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_TANF\n+  float\n+  tanf(float x)\n+  {\n+    return (float) tan(x);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_TANHF\n+  float\n+  tanhf(float x)\n+  {\n+    return (float) tanh(x);\n+  }\n+#endif\n+} // extern \"C\""}]}