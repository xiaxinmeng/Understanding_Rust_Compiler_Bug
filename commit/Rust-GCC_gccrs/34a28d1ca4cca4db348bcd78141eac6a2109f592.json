{"sha": "34a28d1ca4cca4db348bcd78141eac6a2109f592", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRhMjhkMWNhNGNjYTRkYjM0OGJjZDc4MTQxZWFjNmEyMTA5ZjU5Mg==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1995-05-18T18:14:51Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1995-05-18T18:14:51Z"}, "message": "Change all TFmode patterns to have XFmode.\n\n(movxf recognizer, frame version): Use movt, ldt, and stt.\n(movxf recognizer, non-frame version): Delete.\n(extenddfxf2): Delete * before f constraint.\n(extendsfxf2): Likewise.\n\nFrom-SVN: r9741", "tree": {"sha": "058c4b467b92b8ea8187fbb7eceffaa2ed2803f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/058c4b467b92b8ea8187fbb7eceffaa2ed2803f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34a28d1ca4cca4db348bcd78141eac6a2109f592", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a28d1ca4cca4db348bcd78141eac6a2109f592", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34a28d1ca4cca4db348bcd78141eac6a2109f592", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a28d1ca4cca4db348bcd78141eac6a2109f592/comments", "author": null, "committer": null, "parents": [{"sha": "0a1379a0306b616bc15c7ede33b1955adbbde8e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a1379a0306b616bc15c7ede33b1955adbbde8e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a1379a0306b616bc15c7ede33b1955adbbde8e7"}], "stats": {"total": 154, "additions": 65, "deletions": 89}, "files": [{"sha": "f530a728882dc0083464ffc29549e1738a7e2ef3", "filename": "gcc/config/i960/i960.md", "status": "modified", "additions": 65, "deletions": 89, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a28d1ca4cca4db348bcd78141eac6a2109f592/gcc%2Fconfig%2Fi960%2Fi960.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a28d1ca4cca4db348bcd78141eac6a2109f592/gcc%2Fconfig%2Fi960%2Fi960.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.md?ref=34a28d1ca4cca4db348bcd78141eac6a2109f592", "patch": "@@ -1918,65 +1918,41 @@\n \f\n ;; Tetra (16 byte) float support.\n \n-(define_insn \"cmptf\"\n+(define_expand \"cmpxf\"\n   [(set (reg:CC 36)\n-\t(compare:CC (match_operand:TF 0 \"register_operand\" \"f\")\n-\t\t    (match_operand:TF 1 \"nonmemory_operand\" \"fG\")))]\n+\t(compare:CC (match_operand:XF 0 \"register_operand\" \"\")\n+\t\t    (match_operand:XF 1 \"nonmemory_operand\" \"\")))]\n   \"TARGET_NUMERICS\"\n-  \"cmpr\t%0,%1\"\n+  \"\n+{\n+  i960_compare_op0 = operands[0];\n+  i960_compare_op1 = operands[1];\n+  DONE;\n+}\")\n+\n+(define_insn \"\"\n+  [(set (reg:CC 36)\n+\t(compare:CC (match_operand:XF 0 \"register_operand\" \"f\")\n+\t\t    (match_operand:XF 1 \"nonmemory_operand\" \"fGH\")))]\n+  \"TARGET_NUMERICS\"\n+  \"cmpr %0,%1\"\n   [(set_attr \"type\" \"fpcc\")])\n \n-(define_expand \"movtf\"\n-  [(set (match_operand:TF 0 \"general_operand\" \"\")\n-\t(match_operand:TF 1 \"fpmove_src_operand\" \"\"))]\n+(define_expand \"movxf\"\n+  [(set (match_operand:XF 0 \"general_operand\" \"\")\n+\t(match_operand:XF 1 \"fpmove_src_operand\" \"\"))]\n   \"\"\n   \"\n {\n-  if (emit_move_sequence (operands, TFmode))\n+  if (emit_move_sequence (operands, XFmode))\n     DONE;\n }\")\n \n (define_insn \"\"\n-  [(set (match_operand:TF 0 \"general_operand\" \"=r,*f,d,d,m,o\")\n-\t(match_operand:TF 1 \"fpmove_src_operand\" \"r,GH,F,m,d,G\"))]\n-  \"(current_function_args_size == 0\n-    && rtx_equal_function_value_matters == 0)\n-   && (register_operand (operands[0], TFmode)\n-       || register_operand (operands[1], TFmode)\n-       || operands[1] == CONST0_RTX (TFmode))\"\n-  \"*\n-{\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      if (FP_REG_P (operands[0]) || FP_REG_P (operands[1]))\n-\treturn \\\"movre\t%1,%0\\\";\n-      else\n-\treturn \\\"movq\t%1,%0\\\";\n-    case 1:\n-      return \\\"movre\t%1,%0\\\";\n-    case 2:\n-      return i960_output_ldconst (operands[0], operands[1]);\n-    case 3:\n-      return \\\"ldq\t%1,%0\\\";\n-    case 4:\n-      return \\\"stq\t%1,%0\\\";\n-    case 5:\n-      operands[1] = adj_offsettable_operand (operands[0], 4);\n-      operands[2] = adj_offsettable_operand (operands[0], 8);\n-      operands[3] = adj_offsettable_operand (operands[0], 12);\n-      return \\\"st\tg14,%0\\;st\tg14,%1\\;st\tg14,%2\\;st\tg14,%3\\\";\n-    }\n-}\"\n-  [(set_attr \"type\" \"move,move,load,fpload,fpstore,fpstore\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:TF 0 \"general_operand\" \"=r,*f,d,d,m\")\n-\t(match_operand:TF 1 \"fpmove_src_operand\" \"r,GH,F,m,d\"))]\n-  \"(current_function_args_size != 0\n-    || rtx_equal_function_value_matters != 0)\n-   && (register_operand (operands[0], TFmode)\n-       || register_operand (operands[1], TFmode))\"\n+  [(set (match_operand:XF 0 \"general_operand\" \"=r,f,d,d,m\")\n+\t(match_operand:XF 1 \"fpmove_src_operand\" \"r,GH,F,m,d\"))]\n+  \"register_operand (operands[0], XFmode)\n+   || register_operand (operands[1], XFmode)\"\n   \"*\n {\n   switch (which_alternative)\n@@ -1991,112 +1967,112 @@\n     case 2:\n       return i960_output_ldconst (operands[0], operands[1]);\n     case 3:\n-      return \\\"ldq\t%1,%0\\\";\n+      return \\\"ldt\t%1,%0\\\";\n     case 4:\n-      return \\\"stq\t%1,%0\\\";\n+      return \\\"stt\t%1,%0\\\";\n     }\n }\"\n   [(set_attr \"type\" \"move,move,load,fpload,fpstore\")])\n \n-(define_insn \"extendsftf2\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=*f,d\")\n-\t(float_extend:TF\n+(define_insn \"extendsfxf2\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f,d\")\n+\t(float_extend:XF\n \t (match_operand:SF 1 \"register_operand\" \"d,f\")))]\n   \"TARGET_NUMERICS\"\n   \"@\n   movr\t%1,%0\n   movre\t%1,%0\"\n   [(set_attr \"type\" \"fpmove\")])\n \n-(define_insn \"extenddftf2\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=*f,d\")\n-\t(float_extend:TF\n+(define_insn \"extenddfxf2\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f,d\")\n+\t(float_extend:XF\n \t (match_operand:DF 1 \"register_operand\" \"d,f\")))]\n   \"TARGET_NUMERICS\"\n   \"@\n   movrl\t%1,%0\n   movre\t%1,%0\"\n   [(set_attr \"type\" \"fpmove\")])\n \n-(define_insn \"trunctfdf2\"\n+(define_insn \"truncxfdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=d\")\n \t(float_truncate:DF\n-\t (match_operand:TF 1 \"register_operand\" \"f\")))]\n+\t (match_operand:XF 1 \"register_operand\" \"f\")))]\n   \"TARGET_NUMERICS\"\n   \"movrl\t%1,%0\"\n   [(set_attr \"type\" \"fpmove\")])\n \n-(define_insn \"trunctfsf2\"\n+(define_insn \"truncxfsf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=d\")\n \t(float_truncate:SF\n-\t (match_operand:TF 1 \"register_operand\" \"f\")))]\n+\t (match_operand:XF 1 \"register_operand\" \"f\")))]\n   \"TARGET_NUMERICS\"\n   \"movr\t%1,%0\"\n   [(set_attr \"type\" \"fpmove\")])\n \n-(define_insn \"floatsitf2\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n-\t(float:TF (match_operand:SI 1 \"register_operand\" \"d\")))]\n+(define_insn \"floatsixf2\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(float:XF (match_operand:SI 1 \"register_operand\" \"d\")))]\n   \"TARGET_NUMERICS\"\n   \"cvtir\t%1,%0\"\n   [(set_attr \"type\" \"fpcvt\")])\n \n-(define_insn \"fix_trunctfsi2\"\n+(define_insn \"fix_truncxfsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(fix:SI (fix:TF (match_operand:TF 1 \"register_operand\" \"f\"))))]\n+\t(fix:SI (fix:XF (match_operand:XF 1 \"register_operand\" \"f\"))))]\n   \"TARGET_NUMERICS\"\n   \"cvtzri\t%1,%0\"\n   [(set_attr \"type\" \"fpcvt\")])\n \n-(define_insn \"fixuns_trunctfsi2\"\n+(define_insn \"fixuns_truncxfsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(unsigned_fix:SI (fix:TF (match_operand:TF 1 \"register_operand\" \"f\"))))]\n+\t(unsigned_fix:SI (fix:XF (match_operand:XF 1 \"register_operand\" \"f\"))))]\n   \"TARGET_NUMERICS\"\n   \"cvtzri\t%1,%0\"\n   [(set_attr \"type\" \"fpcvt\")])\n \n-(define_insn \"addtf3\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n-\t(plus:TF (match_operand:TF 1 \"nonmemory_operand\" \"%fG\")\n-\t\t (match_operand:TF 2 \"nonmemory_operand\" \"fG\")))]\n+(define_insn \"addxf3\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(plus:XF (match_operand:XF 1 \"nonmemory_operand\" \"%fGH\")\n+\t\t (match_operand:XF 2 \"nonmemory_operand\" \"fGH\")))]\n   \"TARGET_NUMERICS\"\n   \"addr\t%1,%2,%0\"\n   [(set_attr \"type\" \"fpadd\")])\n \n-(define_insn \"subtf3\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n-\t(minus:TF (match_operand:TF 1 \"nonmemory_operand\" \"fG\")\n-\t\t  (match_operand:TF 2 \"nonmemory_operand\" \"fG\")))]\n+(define_insn \"subxf3\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(minus:XF (match_operand:XF 1 \"nonmemory_operand\" \"fGH\")\n+\t\t  (match_operand:XF 2 \"nonmemory_operand\" \"fGH\")))]\n   \"TARGET_NUMERICS\"\n   \"subr\t%2,%1,%0\"\n   [(set_attr \"type\" \"fpadd\")])\n \n-(define_insn \"multf3\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n-\t(mult:TF (match_operand:TF 1 \"nonmemory_operand\" \"%fG\")\n-\t\t (match_operand:TF 2 \"nonmemory_operand\" \"fG\")))]\n+(define_insn \"mulxf3\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(mult:XF (match_operand:XF 1 \"nonmemory_operand\" \"%fGH\")\n+\t\t (match_operand:XF 2 \"nonmemory_operand\" \"fGH\")))]\n   \"TARGET_NUMERICS\"\n   \"mulr\t%1,%2,%0\"\n   [(set_attr \"type\" \"fpmul\")])\n \n-(define_insn \"divtf3\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n-\t(div:TF (match_operand:TF 1 \"nonmemory_operand\" \"fG\")\n-\t\t(match_operand:TF 2 \"nonmemory_operand\" \"fG\")))]\n+(define_insn \"divxf3\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(div:XF (match_operand:XF 1 \"nonmemory_operand\" \"fGH\")\n+\t\t(match_operand:XF 2 \"nonmemory_operand\" \"fGH\")))]\n   \"TARGET_NUMERICS\"\n   \"divr\t%2,%1,%0\"\n   [(set_attr \"type\" \"fpdiv\")])\n \n-(define_insn \"negtf2\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n-\t(neg:TF (match_operand:TF 1 \"register_operand\" \"f\")))]\n+(define_insn \"negxf2\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(neg:XF (match_operand:XF 1 \"register_operand\" \"f\")))]\n   \"TARGET_NUMERICS\"\n   \"subr\t%1,0f0.0,%0\"\n   [(set_attr \"type\" \"fpadd\")])\n \n-(define_insn \"abstf2\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n-\t(abs:TF (match_operand:TF 1 \"register_operand\" \"f\")))]\n+(define_insn \"absxf2\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(abs:XF (match_operand:XF 1 \"register_operand\" \"f\")))]\n   \"(TARGET_NUMERICS)\"\n   \"cpysre\t%1,0f0.0,%0\"\n   [(set_attr \"type\" \"fpmove\")])"}]}