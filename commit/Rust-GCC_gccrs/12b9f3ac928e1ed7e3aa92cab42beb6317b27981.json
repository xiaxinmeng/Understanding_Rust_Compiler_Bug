{"sha": "12b9f3ac928e1ed7e3aa92cab42beb6317b27981", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJiOWYzYWM5MjhlMWVkN2UzYWE5MmNhYjQyYmViNjMxN2IyNzk4MQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-10-07T16:48:34Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-10-07T16:48:34Z"}, "message": "invoke.texi (Wsuggest-attribute=cold): Document.\n\n\t* invoke.texi (Wsuggest-attribute=cold): Document.\n\t* common.opt (Wsuggest-attribute=cold): New\n\t* ipa-pure-const.c (warn_function_cold): New function.\n\t* predict.c (compute_function_frequency): Use it.\n\t* predict.h (warn_function_cold): Declare.\n\n\t* gcc.dg/cold-1.c: New testcase.\n\nFrom-SVN: r253513", "tree": {"sha": "52d0be8478f0b04ec8cab8d8483d08112708c62e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52d0be8478f0b04ec8cab8d8483d08112708c62e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12b9f3ac928e1ed7e3aa92cab42beb6317b27981", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12b9f3ac928e1ed7e3aa92cab42beb6317b27981", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12b9f3ac928e1ed7e3aa92cab42beb6317b27981", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12b9f3ac928e1ed7e3aa92cab42beb6317b27981/comments", "author": null, "committer": null, "parents": [{"sha": "59e2f25ee754cc258b55fac759afd6d47d8879d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59e2f25ee754cc258b55fac759afd6d47d8879d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59e2f25ee754cc258b55fac759afd6d47d8879d8"}], "stats": {"total": 80, "additions": 76, "deletions": 4}, "files": [{"sha": "5eea63106debcf7373f49425fe16783dcfd8a1c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12b9f3ac928e1ed7e3aa92cab42beb6317b27981/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12b9f3ac928e1ed7e3aa92cab42beb6317b27981/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12b9f3ac928e1ed7e3aa92cab42beb6317b27981", "patch": "@@ -1,3 +1,11 @@\n+2017-10-07  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* invoke.texi (Wsuggest-attribute=cold): Document.\n+\t* common.opt (Wsuggest-attribute=cold): New\n+\t* ipa-pure-const.c (warn_function_cold): New function.\n+\t* predict.c (compute_function_frequency): Use it.\n+\t* predict.h (warn_function_cold): Declare.\n+\n 2017-10-06  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* tree-switch-conversion.c (do_jump_if_equal, emit_cmp_and_jump_insns):"}, {"sha": "ce8194b58fafc7d6181ec10cd811761c77848006", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12b9f3ac928e1ed7e3aa92cab42beb6317b27981/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12b9f3ac928e1ed7e3aa92cab42beb6317b27981/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=12b9f3ac928e1ed7e3aa92cab42beb6317b27981", "patch": "@@ -721,6 +721,10 @@ Wstrict-overflow=\n Common Joined RejectNegative UInteger Var(warn_strict_overflow) Warning\n Warn about optimizations that assume that signed overflow is undefined.\n \n+Wsuggest-attribute=cold\n+Common Var(warn_suggest_attribute_cold) Warning\n+Warn about functions which might be candidates for __attribute__((cold)).\n+\n Wsuggest-attribute=const\n Common Var(warn_suggest_attribute_const) Warning\n Warn about functions which might be candidates for __attribute__((const))."}, {"sha": "9ad1fb339babe2ce8f45ecac2fa93d7b9ae5fd30", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12b9f3ac928e1ed7e3aa92cab42beb6317b27981/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12b9f3ac928e1ed7e3aa92cab42beb6317b27981/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=12b9f3ac928e1ed7e3aa92cab42beb6317b27981", "patch": "@@ -5201,7 +5201,7 @@ whether to issue a warning.  Similarly to @option{-Wstringop-overflow=3} this\n setting of the option may result in warnings for benign code.\n @end table\n \n-@item -Wsuggest-attribute=@r{[}pure@r{|}const@r{|}noreturn@r{|}format@r{]}\n+@item -Wsuggest-attribute=@r{[}pure@r{|}const@r{|}noreturn@r{|}format@r{|}cold@r{]}\n @opindex Wsuggest-attribute=\n @opindex Wno-suggest-attribute=\n Warn for cases where adding an attribute may be beneficial. The\n@@ -5253,6 +5253,15 @@ might be appropriate for any function that calls a function like\n @code{vprintf} or @code{vscanf}, but this might not always be the\n case, and some functions for which @code{format} attributes are\n appropriate may not be detected.\n+\n+@item -Wsuggest-attribute=cold\n+@opindex Wsuggest-attribute=cold\n+@opindex Wno-suggest-attribute=cold\n+\n+Warn about functions that might be candidates for @code{cold} attribute.  This\n+is based on static detection and generally will only warn about functions which\n+always leads to a call to another @code{cold} function such as wrappers of\n+C++ @code{throw} or fatal error reporting functions leading to @code{abort}.\n @end table\n \n @item -Wsuggest-final-types"}, {"sha": "915423559cb439f8c2bb2eddf50c02e5f9dd9c82", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12b9f3ac928e1ed7e3aa92cab42beb6317b27981/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12b9f3ac928e1ed7e3aa92cab42beb6317b27981/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=12b9f3ac928e1ed7e3aa92cab42beb6317b27981", "patch": "@@ -156,7 +156,8 @@ class pass_ipa_pure_const : public ipa_opt_pass_d\n static bool\n function_always_visible_to_compiler_p (tree decl)\n {\n-  return (!TREE_PUBLIC (decl) || DECL_DECLARED_INLINE_P (decl));\n+  return (!TREE_PUBLIC (decl) || DECL_DECLARED_INLINE_P (decl)\n+\t  || DECL_COMDAT (decl));\n }\n \n /* Emit suggestion about attribute ATTRIB_NAME for DECL.  KNOWN_FINITE\n@@ -232,6 +233,21 @@ warn_function_noreturn (tree decl)\n \t\t\t   true, warned_about, \"noreturn\");\n }\n \n+void\n+warn_function_cold (tree decl)\n+{\n+  tree original_decl = decl;\n+\n+  cgraph_node *node = cgraph_node::get (decl);\n+  if (node->instrumentation_clone)\n+    decl = node->instrumented_version->decl;\n+\n+  static hash_set<tree> *warned_about;\n+  warned_about \n+    = suggest_attribute (OPT_Wsuggest_attribute_cold, original_decl,\n+\t\t\t true, warned_about, \"cold\");\n+}\n+\n /* Return true if we have a function state for NODE.  */\n \n static inline bool\n@@ -1788,6 +1804,7 @@ pass_local_pure_const::execute (function *fun)\n \n   node = cgraph_node::get (current_function_decl);\n   skip = skip_function_for_local_pure_const (node);\n+\n   if (!warn_suggest_attribute_const\n       && !warn_suggest_attribute_pure\n       && skip)"}, {"sha": "e534502aaf58df3f1a14c0c7c3f5473b6654e500", "filename": "gcc/predict.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12b9f3ac928e1ed7e3aa92cab42beb6317b27981/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12b9f3ac928e1ed7e3aa92cab42beb6317b27981/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=12b9f3ac928e1ed7e3aa92cab42beb6317b27981", "patch": "@@ -3613,7 +3613,10 @@ compute_function_frequency (void)\n       if (ENTRY_BLOCK_PTR_FOR_FN (cfun)->count == profile_count::zero ()\n \t  || lookup_attribute (\"cold\", DECL_ATTRIBUTES (current_function_decl))\n \t     != NULL)\n-        node->frequency = NODE_FREQUENCY_UNLIKELY_EXECUTED;\n+\t{\n+          node->frequency = NODE_FREQUENCY_UNLIKELY_EXECUTED;\n+\t  warn_function_cold (current_function_decl);\n+\t}\n       else if (lookup_attribute (\"hot\", DECL_ATTRIBUTES (current_function_decl))\n \t       != NULL)\n         node->frequency = NODE_FREQUENCY_HOT;\n@@ -3632,7 +3635,10 @@ compute_function_frequency (void)\n      Ipa-profile pass will drop functions only called from unlikely\n      functions to unlikely and that is most of what we care about.  */\n   if (!cfun->after_inlining)\n-    node->frequency = NODE_FREQUENCY_UNLIKELY_EXECUTED;\n+    {\n+      node->frequency = NODE_FREQUENCY_UNLIKELY_EXECUTED;\n+      warn_function_cold (current_function_decl);\n+    }\n   FOR_EACH_BB_FN (bb, cfun)\n     {\n       if (maybe_hot_bb_p (cfun, bb))"}, {"sha": "1b73ae28a49203c08a5cde0d884089eb856b926b", "filename": "gcc/predict.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12b9f3ac928e1ed7e3aa92cab42beb6317b27981/gcc%2Fpredict.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12b9f3ac928e1ed7e3aa92cab42beb6317b27981/gcc%2Fpredict.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.h?ref=12b9f3ac928e1ed7e3aa92cab42beb6317b27981", "patch": "@@ -102,4 +102,7 @@ extern void propagate_unlikely_bbs_forward (void);\n \n extern void add_reg_br_prob_note (rtx_insn *, profile_probability);\n \n+/* In ipa-pure-const.c   */\n+extern void warn_function_cold (tree);\n+\n #endif  /* GCC_PREDICT_H */"}, {"sha": "f764028347478ca80492c8d73ed64a198f4709a8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12b9f3ac928e1ed7e3aa92cab42beb6317b27981/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12b9f3ac928e1ed7e3aa92cab42beb6317b27981/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=12b9f3ac928e1ed7e3aa92cab42beb6317b27981", "patch": "@@ -1,3 +1,7 @@\n+2017-10-07  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.dg/cold-1.c: New testcase.\n+\n 2017-10-07  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/80805"}, {"sha": "8ea88dd79a3f751713104dee35e4849138856492", "filename": "gcc/testsuite/gcc.dg/cold-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12b9f3ac928e1ed7e3aa92cab42beb6317b27981/gcc%2Ftestsuite%2Fgcc.dg%2Fcold-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12b9f3ac928e1ed7e3aa92cab42beb6317b27981/gcc%2Ftestsuite%2Fgcc.dg%2Fcold-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcold-1.c?ref=12b9f3ac928e1ed7e3aa92cab42beb6317b27981", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile { target nonpic } } */\n+/* { dg-options \"-O2 -Wsuggest-attribute=cold\" } */\n+\n+extern void do_something_interesting_and_never_return ();\n+\n+int\n+foo1(int a)  \n+{ /* { dg-warning \"cold\" \"detect cold candidate\" { target *-*-* } \"8\" } */ \n+  if (a)\n+    abort ();\n+  else\n+    abort ();\n+}\n+\n+int\n+foo2(int a)  \n+{ \n+  if (a)\n+    do_something_interesting_and_never_return ();\n+  abort ();\n+}"}]}