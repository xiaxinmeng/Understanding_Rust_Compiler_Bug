{"sha": "045685a9b58260227464e28fab7279e1ec35c9f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ1Njg1YTliNTgyNjAyMjc0NjRlMjhmYWI3Mjc5ZTFlYzM1YzlmMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-01-03T21:23:26Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-01-03T21:23:26Z"}, "message": "re PR tree-optimization/31081 (Inliner messes up SSA for abnormals)\n\n\n\tPR tree-optimization/31081\n\t* tree-inline.c (remap_ssa_name): Initialize uninitialized SSA vars to\n\t0 when inlining and not inlining to first basic block.\n\t(remap_decl): When var is initialized to 0, don't set default_def.\n\t(expand_call_inline): Set entry_bb.\n\t* tree-inline.h (copy_body_data): Add entry_bb.\n\nFrom-SVN: r131306", "tree": {"sha": "baa2065a8fa039a4a28761c72e49e0277bdcbdc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/baa2065a8fa039a4a28761c72e49e0277bdcbdc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/045685a9b58260227464e28fab7279e1ec35c9f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/045685a9b58260227464e28fab7279e1ec35c9f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/045685a9b58260227464e28fab7279e1ec35c9f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/045685a9b58260227464e28fab7279e1ec35c9f0/comments", "author": null, "committer": null, "parents": [{"sha": "9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff"}], "stats": {"total": 55, "additions": 48, "deletions": 7}, "files": [{"sha": "08cc05c39c6c6b3cea36459dd050dc969fe5c1e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/045685a9b58260227464e28fab7279e1ec35c9f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/045685a9b58260227464e28fab7279e1ec35c9f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=045685a9b58260227464e28fab7279e1ec35c9f0", "patch": "@@ -1,3 +1,12 @@\n+2008-01-03  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optimization/31081\n+\t* tree-inline.c (remap_ssa_name): Initialize uninitialized SSA vars to\n+\t0 when inlining and not inlining to first basic block.\n+\t(remap_decl): When var is initialized to 0, don't set default_def.\n+\t(expand_call_inline): Set entry_bb.\n+\t* tree-inline.h (copy_body_data): Add entry_bb.\n+\n 2008-01-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/34619"}, {"sha": "65ffd91cb2a309bacbdfe7bb67d85a6e6927af27", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/045685a9b58260227464e28fab7279e1ec35c9f0/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/045685a9b58260227464e28fab7279e1ec35c9f0/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=045685a9b58260227464e28fab7279e1ec35c9f0", "patch": "@@ -186,15 +186,42 @@ remap_ssa_name (tree name, copy_body_data *id)\n     {\n       new = make_ssa_name (new, NULL);\n       insert_decl_map (id, name, new);\n-      if (IS_EMPTY_STMT (SSA_NAME_DEF_STMT (name)))\n-\t{\n-\t  SSA_NAME_DEF_STMT (new) = build_empty_stmt ();\n-\t  if (gimple_default_def (id->src_cfun, SSA_NAME_VAR (name)) == name)\n-\t    set_default_def (SSA_NAME_VAR (new), new);\n-\t}\n       SSA_NAME_OCCURS_IN_ABNORMAL_PHI (new)\n \t= SSA_NAME_OCCURS_IN_ABNORMAL_PHI (name);\n       TREE_TYPE (new) = TREE_TYPE (SSA_NAME_VAR (new));\n+      if (IS_EMPTY_STMT (SSA_NAME_DEF_STMT (name)))\n+\t{\n+\t  /* By inlining function having uninitialized variable, we might\n+\t     extend the lifetime (variable might get reused).  This cause\n+\t     ICE in the case we end up extending lifetime of SSA name across\n+\t     abnormal edge, but also increase register presure.\n+\n+\t     We simply initialize all uninitialized vars by 0 except for case\n+\t     we are inlining to very first BB.  We can avoid this for all\n+\t     BBs that are not withing strongly connected regions of the CFG,\n+\t     but this is bit expensive to test.\n+\t   */\n+\t  if (id->entry_bb && is_gimple_reg (SSA_NAME_VAR (name))\n+\t      && TREE_CODE (SSA_NAME_VAR (name)) != PARM_DECL\n+\t      && (id->entry_bb != EDGE_SUCC (ENTRY_BLOCK_PTR, 0)\n+\t\t  || EDGE_COUNT (id->entry_bb->preds) != 1))\n+\t    {\n+\t      block_stmt_iterator bsi = bsi_last (id->entry_bb);\n+\t      tree init_stmt\n+\t\t  = build_gimple_modify_stmt (new,\n+\t\t\t\t  \t      fold_convert (TREE_TYPE (new),\n+\t\t\t\t\t       \t\t    integer_zero_node));\n+\t      bsi_insert_after (&bsi, init_stmt, BSI_NEW_STMT);\n+\t      SSA_NAME_DEF_STMT (new) = init_stmt;\n+\t      SSA_NAME_IS_DEFAULT_DEF (new) = 0;\n+\t    }\n+\t  else\n+\t    {\n+\t      SSA_NAME_DEF_STMT (new) = build_empty_stmt ();\n+\t      if (gimple_default_def (id->src_cfun, SSA_NAME_VAR (name)) == name)\n+\t        set_default_def (SSA_NAME_VAR (new), new);\n+\t    }\n+\t}\n     }\n   else\n     insert_decl_map (id, name, new);\n@@ -259,7 +286,8 @@ remap_decl (tree decl, copy_body_data *id)\n \t      tree map = remap_ssa_name (def, id);\n \t      /* Watch out RESULT_DECLs whose SSA names map directly\n \t\t to them.  */\n-\t      if (TREE_CODE (map) == SSA_NAME)\n+\t      if (TREE_CODE (map) == SSA_NAME\n+\t\t  && IS_EMPTY_STMT (SSA_NAME_DEF_STMT (map)))\n \t        set_default_def (t, map);\n \t    }\n \t  add_referenced_var (t);\n@@ -2698,6 +2726,7 @@ expand_call_inline (basic_block bb, tree stmt, tree *tp, void *data)\n \n   gcc_assert (!id->src_cfun->after_inlining);\n \n+  id->entry_bb = bb;\n   initialize_inlined_parameters (id, t, fn, bb);\n \n   if (DECL_INITIAL (fn))"}, {"sha": "dbb78d0b4ccb52c8ecea1b5d0ec9984a92514b34", "filename": "gcc/tree-inline.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/045685a9b58260227464e28fab7279e1ec35c9f0/gcc%2Ftree-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/045685a9b58260227464e28fab7279e1ec35c9f0/gcc%2Ftree-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.h?ref=045685a9b58260227464e28fab7279e1ec35c9f0", "patch": "@@ -97,6 +97,9 @@ typedef struct copy_body_data\n \n   /* Statements that might be possibly folded.  */\n   struct pointer_set_t *statements_to_fold;\n+\n+  /* Entry basic block to currently copied body.  */\n+  struct basic_block_def *entry_bb;\n } copy_body_data;\n \n /* Weights of constructions for estimate_num_insns.  */"}]}