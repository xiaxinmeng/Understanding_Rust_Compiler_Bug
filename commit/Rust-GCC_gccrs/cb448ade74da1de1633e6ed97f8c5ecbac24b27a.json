{"sha": "cb448ade74da1de1633e6ed97f8c5ecbac24b27a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I0NDhhZGU3NGRhMWRlMTYzM2U2ZWQ5N2Y4YzVlY2JhYzI0YjI3YQ==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-06-18T16:52:10Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-06-18T21:43:28Z"}, "message": "Calculate a global definition if one has not been registered.\n\nWith poor values gone, Pick up range restrictions from statements\nby folding them with global cache values.\n\n\t* gimple-range-cache.cc (ranger_cache::range_of_def):  Calculate\n\ta range if global is not available.\n\t(ranger_cache::entry_range): Fallback to range_of_def.\n\t* gimple-range-cache.h (range_of_def): Adjust prototype.", "tree": {"sha": "ab676b12f7b13494ec52c40404e9ae28947c4ca5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab676b12f7b13494ec52c40404e9ae28947c4ca5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb448ade74da1de1633e6ed97f8c5ecbac24b27a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb448ade74da1de1633e6ed97f8c5ecbac24b27a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb448ade74da1de1633e6ed97f8c5ecbac24b27a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb448ade74da1de1633e6ed97f8c5ecbac24b27a/comments", "author": null, "committer": null, "parents": [{"sha": "870b674f72d4894b94efa61764fd87ecec29ffde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/870b674f72d4894b94efa61764fd87ecec29ffde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/870b674f72d4894b94efa61764fd87ecec29ffde"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "def604dc149733e91f41cca7a24f650067713895", "filename": "gcc/gimple-range-cache.cc", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb448ade74da1de1633e6ed97f8c5ecbac24b27a/gcc%2Fgimple-range-cache.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb448ade74da1de1633e6ed97f8c5ecbac24b27a/gcc%2Fgimple-range-cache.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.cc?ref=cb448ade74da1de1633e6ed97f8c5ecbac24b27a", "patch": "@@ -824,19 +824,27 @@ ranger_cache::set_global_range (tree name, const irange &r)\n //  of an ssa_name in any given basic block.  Note, this does no additonal\n //  lookups, just accesses the data that is already known.\n \n-// Get the range of NAME when the def occurs in block BB\n+// Get the range of NAME when the def occurs in block BB.  If BB is NULL\n+// get the best global value available.\n \n void\n ranger_cache::range_of_def (irange &r, tree name, basic_block bb)\n {\n   gcc_checking_assert (gimple_range_ssa_p (name));\n-  gcc_checking_assert (bb == gimple_bb (SSA_NAME_DEF_STMT (name)));\n+  gcc_checking_assert (!bb || bb == gimple_bb (SSA_NAME_DEF_STMT (name)));\n \n   // Pick up the best global range available.\n   if (!m_globals.get_global_range (r, name))\n-    r = gimple_range_global (name);\n+    {\n+      // If that fails, try to calculate the range using just global values.\n+      gimple *s = SSA_NAME_DEF_STMT (name);\n+      if (gimple_get_lhs (s) == name)\n+\tfold_range (r, s, get_global_range_query ());\n+      else\n+\tr = gimple_range_global (name);\n+    }\n \n-  if (r.varying_p () && m_non_null.non_null_deref_p (name, bb, false) &&\n+  if (bb && r.varying_p () && m_non_null.non_null_deref_p (name, bb, false) &&\n       !cfun->can_throw_non_call_exceptions)\n     r = range_nonzero (TREE_TYPE (name));\n }\n@@ -853,12 +861,10 @@ ranger_cache::entry_range (irange &r, tree name, basic_block bb)\n     }\n \n   // Look for the on-entry value of name in BB from the cache.\n+  // Otherwise pick up the best available global value.\n   if (!m_on_entry.get_bb_range (r, name, bb))\n-    {\n-      // Try to pick up any known global value.\n-      if (!m_globals.get_global_range (r, name))\n-\tr = gimple_range_global (name);\n-    }\n+    range_of_def (r, name);\n+\n   // Check if pointers have any non-null dereferences.  Non-call\n   // exceptions mean we could throw in the middle of the block, so just\n   // punt for now on those."}, {"sha": "04150ea54a87c6d45ea22a1ad94cabb2547687a2", "filename": "gcc/gimple-range-cache.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb448ade74da1de1633e6ed97f8c5ecbac24b27a/gcc%2Fgimple-range-cache.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb448ade74da1de1633e6ed97f8c5ecbac24b27a/gcc%2Fgimple-range-cache.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.h?ref=cb448ade74da1de1633e6ed97f8c5ecbac24b27a", "patch": "@@ -115,7 +115,7 @@ class ranger_cache : public range_query\n   void fill_block_cache (tree name, basic_block bb, basic_block def_bb);\n   void propagate_cache (tree name);\n \n-  void range_of_def (irange &r, tree name, basic_block bb);\n+  void range_of_def (irange &r, tree name, basic_block bb = NULL);\n   void entry_range (irange &r, tree expr, basic_block bb);\n   void exit_range (irange &r, tree expr, basic_block bb);\n "}]}