{"sha": "922cf99e6df15ecd5cb1b240f7185c475bda4d70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIyY2Y5OWU2ZGYxNWVjZDVjYjFiMjQwZjcxODVjNDc1YmRhNGQ3MA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@rabi.columbia.edu", "date": "1999-03-26T22:55:35Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-03-26T22:55:35Z"}, "message": "Makefile.in (xcpp, cppspec.o): New targets.\n\n        * Makefile.in (xcpp, cppspec.o): New targets.\n        (CPP_INSTALL_NAME): New macro.\n        (install-cpp): Install xcpp.  Use CPP_INSTALL_NAME.\n        (all.build, start.encap): Build xcpp.\n        * cppspec.c: New file, implements argument filtering for a\n        user-visible C preprocessor.\n        * cpp.sh: Removed.\n\nFrom-SVN: r26007", "tree": {"sha": "3037123b5d5c23618167771ee9b4148793a0e0ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3037123b5d5c23618167771ee9b4148793a0e0ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/922cf99e6df15ecd5cb1b240f7185c475bda4d70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/922cf99e6df15ecd5cb1b240f7185c475bda4d70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/922cf99e6df15ecd5cb1b240f7185c475bda4d70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/922cf99e6df15ecd5cb1b240f7185c475bda4d70/comments", "author": null, "committer": null, "parents": [{"sha": "11a86c5688cfcf22c52cf737070a8d3df5a59285", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11a86c5688cfcf22c52cf737070a8d3df5a59285", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11a86c5688cfcf22c52cf737070a8d3df5a59285"}], "stats": {"total": 267, "additions": 257, "deletions": 10}, "files": [{"sha": "0a7843bd6a136fd5539d7046f270322b0808a3f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/922cf99e6df15ecd5cb1b240f7185c475bda4d70/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/922cf99e6df15ecd5cb1b240f7185c475bda4d70/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=922cf99e6df15ecd5cb1b240f7185c475bda4d70", "patch": "@@ -1,3 +1,14 @@\n+1999-03-26 Zack Weinberg  <zack@rabi.columbia.edu>\n+\n+\t* Makefile.in (xcpp, cppspec.o): New targets.\n+\t(CPP_INSTALL_NAME): New macro.\n+\t(install-cpp): Install xcpp.  Use CPP_INSTALL_NAME.\n+\t(all.build, start.encap): Build xcpp.\n+\n+\t* cppspec.c: New file, implements argument filtering for a\n+\tuser-visible C preprocessor.\n+\t* cpp.sh: Removed.\n+\n Fri Mar 26 20:41:46 1999  Jim Wilson  <wilson@cygnus.com>\n \n \t* Makefile.in (stmp-fixinc): Use tooldir instead of gcc_tooldir."}, {"sha": "3d818d4db7aac3abb3188362142d7fb36f71a87c", "filename": "gcc/Makefile.in", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/922cf99e6df15ecd5cb1b240f7185c475bda4d70/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/922cf99e6df15ecd5cb1b240f7185c475bda4d70/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=922cf99e6df15ecd5cb1b240f7185c475bda4d70", "patch": "@@ -473,6 +473,7 @@ HOST_DOPRINT=$(DOPRINT)\n \n # Actual name to use when installing a native compiler.\n GCC_INSTALL_NAME = `t='$(program_transform_name)'; echo gcc | sed -e $$t`\n+CPP_INSTALL_NAME = `t='$(program_transform_name)'; echo cpp | sed -e $$t`\n PROTOIZE_INSTALL_NAME = `t='$(program_transform_name)'; echo protoize | sed -e $$t`\n UNPROTOIZE_INSTALL_NAME = `t='$(program_transform_name)'; echo unprotoize | sed -e $$t`\n GCOV_INSTALL_NAME = `t='$(program_transform_name)'; echo gcov | sed -e $$t`\n@@ -700,7 +701,7 @@ STAGESTUFF = *$(objext) insn-flags.h insn-config.h insn-codes.h \\\n  genconfig$(build_exeext) genpeep$(build_exeext) genattrtab$(build_exeext) \\\n  genattr$(build_exeext) genopinit$(build_exeext) gengenrtl$(build_exeext) \\\n  gencheck$(build_exeext) \\\n- xgcc$(exeext) cc1$(exeext) cpp$(exeext) $(EXTRA_PASSES) \\\n+ xgcc$(exeext) xcpp$(exeext) cc1$(exeext) cpp$(exeext) $(EXTRA_PASSES) \\\n  $(EXTRA_PARTS) $(EXTRA_PROGRAMS) gcc-cross$(exeext) \\\n  $(CCCP)$(exeext) cc1obj$(exeext) enquire$(exeext) \\\n  protoize$(exeext) unprotoize$(exeext) \\\n@@ -836,9 +837,10 @@ all.internal: start.encap rest.encap doc\n all.cross: native gcc-cross specs stmp-headers $(STMP_FIXPROTO) $(LIBGCC) \\\n \t$(LIBGCC1_TEST) $(EXTRA_PARTS) lang.all.cross doc\n # This is what to compile if making gcc with a cross-compiler.\n-all.build: native xgcc$(exeext) $(EXTRA_PARTS) lang.all.build\n+all.build: native xgcc$(exeext) xcpp$(exeext) $(EXTRA_PARTS) lang.all.build\n # This is what must be made before installing GCC and converting libraries.\n-start.encap: native xgcc$(exeext) specs $(LIBGCC1) xlimits.h lang.start.encap\n+start.encap: native xgcc$(exeext) xcpp$(exeext) specs $(LIBGCC1) \\\n+\txlimits.h lang.start.encap\n # These can't be made until after GCC can run.\n rest.encap: stmp-headers $(STMP_FIXPROTO) $(LIBGCC) $(EXTRA_PARTS) lang.rest.encap\n # This is what is made with the host's compiler\n@@ -883,6 +885,16 @@ xgcc$(exeext): gcc.o gccspec.o version.o intl.o prefix.o \\\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ gcc.o gccspec.o intl.o \\\n \t  prefix.o version.o $(EXTRA_GCC_OBJS) $(LIBS)\n \n+# We call this executable `xcpp' rather than `cpp'\n+# since the real preprocessor is named `cpp'.  It too is renamed\n+# when it is installed.\n+# The only difference from xgcc is that it's linked with cppspec.o\n+# instead of gccspec.o.\n+xcpp$(exeext): gcc.o cppspec.o version.o intl.o prefix.o \\\n+   version.o $(LIBDEPS) $(EXTRA_GCC_OBJS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ gcc.o cppspec.o intl.o \\\n+\t  prefix.o version.o $(EXTRA_GCC_OBJS) $(LIBS)\n+\n # Dump a specs file to make -B./ read these specs over installed ones.\n specs: xgcc$(exeext)\n \t$(GCC_FOR_TARGET) -dumpspecs > tmp-specs\n@@ -1398,6 +1410,7 @@ gcc.o: gcc.c $(CONFIG_H) system.h intl.h multilib.h \\\n   -c `echo $(srcdir)/gcc.c | sed 's,^\\./,,'`\n \n gccspec.o: gccspec.c $(CONFIG_H) system.h\n+cppspec.o: cppspec.c $(CONFIG_H) system.h\n \n tree-check.h: s-check ; @true\n s-check : gencheck $(srcdir)/move-if-change\n@@ -2416,12 +2429,12 @@ install-build: force\n install-cross-rest: install-float-h-cross\n \n # Handle cpp installation.\n-install-cpp: cpp.sh\n-\t-rm -f $(bindir)/cpp\n-\t$(INSTALL_PROGRAM) -m 755 cpp.sh $(bindir)/cpp\n+install-cpp: xcpp$(exeext)\n+\t-rm -f $(bindir)/$(CPP_INSTALL_NAME)$(exeext)\n+\t$(INSTALL_PROGRAM) -m 755 xcpp$(exeext) $(bindir)/$(CPP_INSTALL_NAME)$(exeext)\n \tif [ x$(cpp_install_dir) != x ]; then \\\n-\t  rm -f $(prefix)/$(cpp_install_dir)/cpp; \\\n-\t  $(INSTALL_PROGRAM) -m 755 cpp.sh $(prefix)/$(cpp_install_dir)/cpp; \\\n+\t  rm -f $(prefix)/$(cpp_install_dir)/$(CPP_INSTALL_NAME)$(exeext); \\\n+\t  $(INSTALL_PROGRAM) -m 755 xcpp$(exeext) $(prefix)/$(cpp_install_dir)/$(CPP_INSTALL_NAME)$(exeext); \\\n \telse true; fi\n \n uninstall-cpp:"}, {"sha": "b9b6b4317119da80b63832fce793f7852d6b6fc8", "filename": "gcc/cpp.sh", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11a86c5688cfcf22c52cf737070a8d3df5a59285/gcc%2Fcpp.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11a86c5688cfcf22c52cf737070a8d3df5a59285/gcc%2Fcpp.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpp.sh?ref=11a86c5688cfcf22c52cf737070a8d3df5a59285", "patch": "@@ -1,2 +0,0 @@\n-#! /bin/sh\n-exec `gcc -print-prog-name=cpp` ${1+\"$@\"}"}, {"sha": "387b1ce4d1f7fcddc4114b6237a6e3093e3f2f53", "filename": "gcc/cppspec.c", "status": "added", "additions": 225, "deletions": 0, "changes": 225, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/922cf99e6df15ecd5cb1b240f7185c475bda4d70/gcc%2Fcppspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/922cf99e6df15ecd5cb1b240f7185c475bda4d70/gcc%2Fcppspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppspec.c?ref=922cf99e6df15ecd5cb1b240f7185c475bda4d70", "patch": "@@ -0,0 +1,225 @@\n+/* Specific flags and argument handling of the C preprocessor.\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+\n+/* The `cpp' executable installed in $(bindir) and $(cpp_install_dir)\n+   is a customized version of the gcc driver.  It forces -E; -S and -c\n+   are errors.  It defaults to -x c for files with unrecognized\n+   extensions, unless -x options appear in argv, in which case we\n+   assume the user knows what they're doing.  If no explicit input is\n+   mentioned, it will read stdin. */\n+\n+/* Snarfed from gcc.c: */\n+\n+/* This defines which switch letters take arguments.  */\n+\n+#define DEFAULT_SWITCH_TAKES_ARG(CHAR) \\\n+  ((CHAR) == 'D' || (CHAR) == 'U' || (CHAR) == 'o' \\\n+   || (CHAR) == 'e' || (CHAR) == 'T' || (CHAR) == 'u' \\\n+   || (CHAR) == 'I' || (CHAR) == 'm' || (CHAR) == 'x' \\\n+   || (CHAR) == 'L' || (CHAR) == 'A' || (CHAR) == 'V' \\\n+   || (CHAR) == 'B' || (CHAR) == 'b')\n+\n+#ifndef SWITCH_TAKES_ARG\n+#define SWITCH_TAKES_ARG(CHAR) DEFAULT_SWITCH_TAKES_ARG(CHAR)\n+#endif\n+\n+/* This defines which multi-letter switches take arguments.  */\n+\n+#define DEFAULT_WORD_SWITCH_TAKES_ARG(STR)\t\t\\\n+ (!strcmp (STR, \"Tdata\") || !strcmp (STR, \"Ttext\")\t\\\n+  || !strcmp (STR, \"Tbss\") || !strcmp (STR, \"include\")\t\\\n+  || !strcmp (STR, \"imacros\") || !strcmp (STR, \"aux-info\") \\\n+  || !strcmp (STR, \"idirafter\") || !strcmp (STR, \"iprefix\") \\\n+  || !strcmp (STR, \"iwithprefix\") || !strcmp (STR, \"iwithprefixbefore\") \\\n+  || !strcmp (STR, \"isystem\") || !strcmp (STR, \"specs\"))\n+\n+#ifndef WORD_SWITCH_TAKES_ARG\n+#define WORD_SWITCH_TAKES_ARG(STR) DEFAULT_WORD_SWITCH_TAKES_ARG (STR)\n+#endif\n+\n+/* Suffixes for known sorts of input files.  We let gcc.c worry about\n+   which are appropriate preprocessor input.  */\n+static const char *const known_suffixes[] =\n+{\n+  \".c\",  \".C\",   \".s\",   \".S\",   \".m\",\n+  \".cc\", \".cxx\", \".cpp\", \".cp\",  \".c++\",\n+  \".i\",  \".ii\",  \".mi\",  \".o\",   \".a\",\n+  NULL\n+};\n+\n+/* Filter argc and argv before processing by the gcc driver proper. */\n+void\n+lang_specific_driver (errfn, in_argc, in_argv, in_added_libraries)\n+     void (*errfn) PVPROTO((const char *, ...));\n+     int *in_argc;\n+     char ***in_argv;\n+     int *in_added_libraries ATTRIBUTE_UNUSED;\n+{\n+  int argc = *in_argc;\n+  char **argv = *in_argv;\n+  \n+  /* Do we need to read stdin? */\n+  int read_stdin;\n+\n+  /* Do we need to insert -E? */\n+  int need_E;\n+\n+  /* Do we need to fixup files with unrecognized suffixes? */\n+  int need_fixups;\n+\n+  /* Table of input files with unrecognized suffixes. */\n+  char *urs_tab;\n+  int urs_count;\n+  int urs_block;\n+\n+  int i, j, quote;\n+  char **new_argv;\n+  int new_argc;\n+\n+  /* First pass.  If we see an -S or -c, barf.  If we see an input file,\n+     turn off read_stdin, and if it has an unrecognizable suffix, mark\n+     it for fixup. */\n+  urs_tab = xmalloc (argc);\n+  memset (urs_tab, 0, argc);\n+  urs_count = 0;\n+  urs_block = 0;\n+  quote = 0;\n+  read_stdin = 1;\n+  need_E = 1;\n+  need_fixups = 1;\n+  for (i = 1; i < argc; i++)\n+    {\n+      if (quote == 1)\n+\t{\n+\t  quote = 0;\n+\t  continue;\n+\t}\n+      \n+      if (argv[i][0] == '-')\n+\t{\n+\t  if (argv[i][1] == '\\0')\n+\t    read_stdin = 0;\n+\t  else if (argv[i][2] == '\\0')\n+\t    {\n+\t      if (argv[i][1] == 'E')\n+\t\tneed_E = 0;\n+\t      else if (argv[i][1] == 'S' || argv[i][1] == 'c')\n+\t\t{\n+\t\t  (*errfn) (\"`%s' is not a legal option to the preprocessor\",\n+\t\t\t    argv[i]);\n+\t\t  goto done;\n+\t\t}\n+\t      else if (argv[i][1] == 'x')\n+\t\t{\n+\t\t  need_fixups = 0;\n+\t\t  quote = 1;\n+\t\t}\n+\t      else if (SWITCH_TAKES_ARG (argv[i][1]))\n+\t\tquote = 1;\n+\t    }\n+\t  else if (argv[i][1] == 'x')\n+\t    need_fixups = 0;\n+\t  else if (WORD_SWITCH_TAKES_ARG (&argv[i][1]))\n+\t    quote = 1;\n+\t}\n+      else /* not an option */\n+\t{\n+\t  int l = strlen (argv[i]);\n+\t  int known = 0;\n+\t  const char **suff;\n+\t  \n+\t  read_stdin = 0;\n+\t  for (suff = known_suffixes; *suff; suff++)\n+\t    if (!strcmp (*suff, &argv[i][l - strlen(*suff)]))\n+\t      {\n+\t\tknown = 1;\n+\t\tbreak;\n+\t      }\n+\n+\t  if (known)\n+\t    {\n+\t      if (urs_block)\n+\t\t{\n+\t\t  urs_block = 0;\n+\t\t  urs_tab[i] = 2;\n+\t\t  urs_count++;\n+\t\t}\n+\t    }\n+\t  else\n+\t    {\n+\t      if (!urs_block)\n+\t\t{\n+\t\t  urs_block = 1;\n+\t\t  urs_tab[i] = 1;\n+\t\t  urs_count++;\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+  /* If we were given an -E option and an input file, and no input\n+     files have unrecognized suffixes, we can bail early.  */\n+  if (!need_E && !read_stdin && (!need_fixups || urs_count == 0))\n+    goto done;\n+\n+  new_argc = argc + need_E + read_stdin + (need_fixups ? urs_count : 0);\n+  new_argv = xmalloc (new_argc * sizeof(char *));\n+\n+  new_argv[0] = argv[0];\n+  if (need_E)\n+    {\n+      new_argv[1] = \"-E\";\n+      j = 2;\n+    }\n+  else\n+    j = 1;\n+\n+  if (need_fixups)\n+    for (i = 1; i < argc; i++, j++)\n+      {\n+\tif (urs_tab[i])\n+\t  new_argv[j++] = (urs_tab[i] == 1) ? \"-xc\" : \"-xnone\";\n+\n+\tnew_argv[j] = argv[i];\n+      }\n+  else\n+    memcpy (&new_argv[j], &argv[1], (argc - 1)*sizeof (char *));\n+\n+  if (read_stdin)\n+    new_argv[j] = \"-\";\n+\n+  *in_argc = new_argc;\n+  *in_argv = new_argv;\n+\n+done:\n+  free (urs_tab);\n+}\n+\n+/* Called before linking.  Returns 0 on success and -1 on failure. */\n+int lang_specific_pre_link ()\n+{\n+  return 0;  /* Not used for cpp. */\n+}\n+\n+/* Number of extra output files that lang_specific_pre_link may generate. */\n+int lang_specific_extra_outfiles = 0;  /* Not used for cpp. */"}]}