{"sha": "7af7cb515f8ee1af63f7998c2748281263ae6f48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FmN2NiNTE1ZjhlZTFhZjYzZjc5OThjMjc0ODI4MTI2M2FlNmY0OA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-07-04T02:19:35Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-07-04T02:19:35Z"}, "message": "PR tree-optimization/86274 - SEGFAULT when logging std::to_string(NAN)\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/86274\n\t* gimple-ssa-sprintf.c (fmtresult::type_max_digits): Verify\n\tprecondition.\n\t(format_floating): Correct handling of infinities and NaNs.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/86274\n\t* gcc.dg/tree-ssa/builtin-sprintf-9.c: New test.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-1.c: Adjust.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-10.c: Same.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-15.c: Same.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-7.c: Same.\n\t* gcc.dg/tree-ssa/builtin-sprintf.c: Same.\n\t* gcc.dg/tree-ssa/pr83198.c: Same.\n\nFrom-SVN: r262368", "tree": {"sha": "798819af04347e5a75794a0189e84ed327e7e467", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/798819af04347e5a75794a0189e84ed327e7e467"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7af7cb515f8ee1af63f7998c2748281263ae6f48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7af7cb515f8ee1af63f7998c2748281263ae6f48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7af7cb515f8ee1af63f7998c2748281263ae6f48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7af7cb515f8ee1af63f7998c2748281263ae6f48/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "68a8b147efe9b919ace0b05c879697a3314fdca6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68a8b147efe9b919ace0b05c879697a3314fdca6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68a8b147efe9b919ace0b05c879697a3314fdca6"}], "stats": {"total": 615, "additions": 401, "deletions": 214}, "files": [{"sha": "c3ea01452d6f098cddf229861c3926ec8bac6f43", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af7cb515f8ee1af63f7998c2748281263ae6f48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af7cb515f8ee1af63f7998c2748281263ae6f48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7af7cb515f8ee1af63f7998c2748281263ae6f48", "patch": "@@ -1,3 +1,10 @@\n+2018-07-03  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/86274\n+\t* gimple-ssa-sprintf.c (fmtresult::type_max_digits): Verify\n+\tprecondition.\n+\t(format_floating): Correct handling of infinities and NaNs.\n+\n 2018-07-03  Martin Sebor  <msebor@redhat.com>\n \n \t* print-tree.c (print_real_cst): New function."}, {"sha": "bda738de937c6eb6bcae4426bf3173ddd821d202", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 66, "deletions": 28, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af7cb515f8ee1af63f7998c2748281263ae6f48/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af7cb515f8ee1af63f7998c2748281263ae6f48/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=7af7cb515f8ee1af63f7998c2748281263ae6f48", "patch": "@@ -781,15 +781,19 @@ unsigned\n fmtresult::type_max_digits (tree type, int base)\n {\n   unsigned prec = TYPE_PRECISION (type);\n-  if (base == 8)\n-    return (prec + 2) / 3;\n-\n-  if (base == 16)\n-    return prec / 4;\n+  switch (base)\n+    {\n+    case 8:\n+      return (prec + 2) / 3;\n+    case 10:\n+      /* Decimal approximation: yields 3, 5, 10, and 20 for precision\n+\t of 8, 16, 32, and 64 bits.  */\n+      return prec * 301 / 1000 + 1;\n+    case 16:\n+      return prec / 4;\n+    }\n \n-  /* Decimal approximation: yields 3, 5, 10, and 20 for precision\n-     of 8, 16, 32, and 64 bits.  */\n-  return prec * 301 / 1000 + 1;\n+  gcc_unreachable ();\n }\n \n static bool\n@@ -1759,6 +1763,11 @@ format_floating (const directive &dir, const HOST_WIDE_INT prec[2])\n   unsigned flagmin = (1 /* for the first digit */\n \t\t      + (dir.get_flag ('+') | dir.get_flag (' ')));\n \n+  /* The minimum is 3 for \"inf\" and \"nan\" for all specifiers, plus 1\n+     for the plus sign/space with the '+' and ' ' flags, respectively,\n+     unless reduced below.  */\n+  res.range.min = 2 + flagmin;\n+\n   /* When the pound flag is set the decimal point is included in output\n      regardless of precision.  Whether or not a decimal point is included\n      otherwise depends on the specification and precision.  */\n@@ -1775,14 +1784,13 @@ format_floating (const directive &dir, const HOST_WIDE_INT prec[2])\n \telse if (dir.prec[0] > 0)\n \t  minprec = dir.prec[0] + !radix /* decimal point */;\n \n-\tres.range.min = (2 /* 0x */\n-\t\t\t + flagmin\n-\t\t\t + radix\n-\t\t\t + minprec\n-\t\t\t + 3 /* p+0 */);\n+\tres.range.likely = (2 /* 0x */\n+\t\t\t    + flagmin\n+\t\t\t    + radix\n+\t\t\t    + minprec\n+\t\t\t    + 3 /* p+0 */);\n \n \tres.range.max = format_floating_max (type, 'a', prec[1]);\n-\tres.range.likely = res.range.min;\n \n \t/* The unlikely maximum accounts for the longest multibyte\n \t   decimal point character.  */\n@@ -1800,15 +1808,14 @@ format_floating (const directive &dir, const HOST_WIDE_INT prec[2])\n \t   non-zero, decimal point.  */\n \tHOST_WIDE_INT minprec = prec[0] ? prec[0] + !radix : 0;\n \n-\t/* The minimum output is \"[-+]1.234567e+00\" regardless\n+\t/* The likely minimum output is \"[-+]1.234567e+00\" regardless\n \t   of the value of the actual argument.  */\n-\tres.range.min = (flagmin\n-\t\t\t + radix\n-\t\t\t + minprec\n-\t\t\t + 2 /* e+ */ + 2);\n+\tres.range.likely = (flagmin\n+\t\t\t    + radix\n+\t\t\t    + minprec\n+\t\t\t    + 2 /* e+ */ + 2);\n \n \tres.range.max = format_floating_max (type, 'e', prec[1]);\n-\tres.range.likely = res.range.min;\n \n \t/* The unlikely maximum accounts for the longest multibyte\n \t   decimal point character.  */\n@@ -1827,12 +1834,15 @@ format_floating (const directive &dir, const HOST_WIDE_INT prec[2])\n \t   decimal point.  */\n \tHOST_WIDE_INT minprec = prec[0] ? prec[0] + !radix : 0;\n \n-\t/* The lower bound when precision isn't specified is 8 bytes\n-\t   (\"1.23456\" since precision is taken to be 6).  When precision\n-\t   is zero, the lower bound is 1 byte (e.g., \"1\").  Otherwise,\n-\t   when precision is greater than zero, then the lower bound\n-\t   is 2 plus precision (plus flags).  */\n-\tres.range.min = flagmin + radix + minprec;\n+\t/* For finite numbers (i.e., not infinity or NaN) the lower bound\n+\t   when precision isn't specified is 8 bytes (\"1.23456\" since\n+\t   precision is taken to be 6).  When precision is zero, the lower\n+\t   bound is 1 byte (e.g., \"1\").  Otherwise, when precision is greater\n+\t   than zero, then the lower bound is 2 plus precision (plus flags).\n+\t   But in all cases, the lower bound is no greater than 3.  */\n+\tunsigned HOST_WIDE_INT min = flagmin + radix + minprec;\n+\tif (min < res.range.min)\n+\t  res.range.min = min;\n \n \t/* Compute the upper bound for -TYPE_MAX.  */\n \tres.range.max = format_floating_max (type, 'f', prec[1]);\n@@ -1842,7 +1852,7 @@ format_floating (const directive &dir, const HOST_WIDE_INT prec[2])\n \tif (dir.prec[0] < 0 && dir.prec[1] > 0)\n \t  res.range.likely = 3;\n \telse\n-\t  res.range.likely = res.range.min;\n+\t  res.range.likely = min;\n \n \t/* The unlikely maximum accounts for the longest multibyte\n \t   decimal point character.  */\n@@ -1860,7 +1870,9 @@ format_floating (const directive &dir, const HOST_WIDE_INT prec[2])\n \t   the lower bound on the range of bytes (not counting flags\n \t   or width) is 1 plus radix (i.e., either \"0\" or \"0.\" for\n \t   \"%g\" and \"%#g\", respectively, with a zero argument).  */\n-\tres.range.min = flagmin + radix;\n+\tunsigned HOST_WIDE_INT min = flagmin + radix;\n+\tif (min < res.range.min)\n+\t  res.range.min = min;\n \n \tchar spec = 'g';\n \tHOST_WIDE_INT maxprec = dir.prec[1];\n@@ -1992,6 +2004,32 @@ format_floating (const directive &dir, tree arg, vr_values *)\n   const REAL_VALUE_TYPE *rvp = TREE_REAL_CST_PTR (arg);\n   const real_format *rfmt = REAL_MODE_FORMAT (TYPE_MODE (TREE_TYPE (arg)));\n \n+  if (!real_isfinite (rvp))\n+    {\n+      /* The format for Infinity and NaN is \"[-]inf\"/\"[-]infinity\"\n+\t and \"[-]nan\" with the choice being implementation-defined\n+\t but not locale dependent.  */\n+      bool sign = dir.get_flag ('+') || real_isneg (rvp);\n+      res.range.min = 3 + sign;\n+\n+      res.range.likely = res.range.min;\n+      res.range.max = res.range.min;\n+      /* The inlikely maximum is \"[-/+]infinity\" or \"[-/+]nan\".  */\n+      res.range.unlikely = sign + (real_isinf (rvp) ? 8 : 3);\n+\n+      /* The range for infinity and NaN is known unless either width\n+\t or precision is unknown.  Width has the same effect regardless\n+\t of whether the argument is finite.  Precision is either ignored\n+\t (e.g., Glibc) or can have an effect on the short vs long format\n+\t such as inf/infinity (e.g., Solaris).  */\n+      res.knownrange = dir.known_width_and_precision ();\n+\n+      /* Adjust the range for width but ignore precision.  */\n+      res.adjust_for_width_or_precision (dir.width);\n+\n+      return res;\n+    }\n+\n   char fmtstr [40];\n   char *pfmt = fmtstr;\n "}, {"sha": "020bed84961194796097fbfdd0a6610595c44c8a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af7cb515f8ee1af63f7998c2748281263ae6f48/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af7cb515f8ee1af63f7998c2748281263ae6f48/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7af7cb515f8ee1af63f7998c2748281263ae6f48", "patch": "@@ -1,3 +1,14 @@\n+2018-07-03  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/86274\n+\t* gcc.dg/tree-ssa/builtin-sprintf-9.c: New test.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-1.c: Adjust.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-10.c: Same.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-15.c: Same.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-7.c: Same.\n+\t* gcc.dg/tree-ssa/builtin-sprintf.c: Same.\n+\t* gcc.dg/tree-ssa/pr83198.c: Same.\n+\n 2018-07-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/other/locations1.C: New."}, {"sha": "6f8b7a9fb1b70a34404fbce1c910cc4957e860c9", "filename": "gcc/testsuite/gcc.dg/torture/builtin-sprintf.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af7cb515f8ee1af63f7998c2748281263ae6f48/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af7cb515f8ee1af63f7998c2748281263ae6f48/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-sprintf.c?ref=7af7cb515f8ee1af63f7998c2748281263ae6f48", "patch": "@@ -0,0 +1,29 @@\n+/* PR tree-optimization/86274 - SEGFAULT when logging std::to_string(NAN)\n+   { dg-do run }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+#define X        \"0xdeadbeef\"\n+#define nan(x)   __builtin_nan (x)\n+\n+volatile double nan_0 = nan (\"0\");\n+volatile double nan_x = nan (X);\n+\n+int main (void)\n+{\n+  char buf[80];\n+\n+  /* Verify that folded results match those of the library calls.  */\n+  int cst_n_0 = __builtin_sprintf (buf, \"%g\", nan (\"0\"));\n+  int cst_n_x = __builtin_sprintf (buf, \"%g\", nan (X));\n+\n+  int var_n_0 = __builtin_sprintf (buf, \"%g\", nan_0);\n+  int var_n_x = __builtin_sprintf (buf, \"%g\", nan_x);\n+\n+  if (cst_n_0 != var_n_0)\n+    __builtin_abort ();\n+\n+  if (cst_n_x != var_n_x)\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "f035ae4b386a6d5872276ce0f438c97c729b78c2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-9.c", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af7cb515f8ee1af63f7998c2748281263ae6f48/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af7cb515f8ee1af63f7998c2748281263ae6f48/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-9.c?ref=7af7cb515f8ee1af63f7998c2748281263ae6f48", "patch": "@@ -0,0 +1,90 @@\n+/* PR tree-optimization/86274 - SEGFAULT when logging std::to_string(NAN)\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -fdump-tree-optimized\" }  */\n+\n+typedef __SIZE_TYPE__ size_t;\n+extern int sprintf (char*, const char*, ...);\n+extern int snprintf (char*, size_t, const char*, ...);\n+\n+#define CAT(x, y) x ## y\n+#define CONCAT(x, y) CAT (x, y)\n+#define FAILNAME(name) CONCAT (call_ ## name ##_on_line_, __LINE__)\n+\n+#define FAIL(name) do {\t\t\t\t\\\n+    extern void FAILNAME (name) (void);\t\t\\\n+    FAILNAME (name)();\t\t\t\t\\\n+  } while (0)\n+\n+/* Macro to emit a call to funcation named\n+     call_in_true_branch_not_eliminated_on_line_NNN()\n+   for each expression that's expected to fold to false but that\n+   GCC does not fold.  The dg-final scan-tree-dump-time directive\n+   at the bottom of the test verifies that no such call appears\n+   in output.  */\n+#define ELIM(expr)\t\t\t\t\t\t\t\\\n+  if ((expr)) FAIL (in_true_branch_not_eliminated); else (void)0\n+\n+/* Macro to emit a call to a function named\n+     call_made_in_{true,false}_branch_on_line_NNN()\n+   for each call that's expected to be retained.  The dg-final\n+   scan-tree-dump-time directive at the bottom of the test verifies\n+   that the expected number of both kinds of calls appears in output\n+   (a pair for each line with the invocation of the KEEP() macro.  */\n+#define KEEP(expr)\t\t\t\t\\\n+  if (expr)\t\t\t\t\t\\\n+    FAIL (made_in_true_branch);\t\t\t\\\n+  else\t\t\t\t\t\t\\\n+    FAIL (made_in_false_branch)\n+\n+extern void sink (int, ...);\n+#define sink(...) sink (0, __VA_ARGS__)\n+\n+#define WARN(N, expr)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    char a[N];\t\t\t\t\t\\\n+    expr;\t\t\t\t\t\\\n+    sink (a);\t\t\t\t\t\\\n+  } while (0)\n+\n+\n+void test_elim (double x)\n+{\n+  ELIM (snprintf (0, 0, \"%a\", x) < 3);\n+  ELIM (snprintf (0, 0, \"%e\", x) < 3);\n+  ELIM (snprintf (0, 0, \"%f\", x) < 3);\n+  ELIM (snprintf (0, 0, \"%g\", x) < 1);\n+\n+  /* Verify that snprintf knows that NaN cannot result in fewer\n+     than three characters on output.  */\n+  const double nan  = __builtin_nan (\"0\");\n+  ELIM (snprintf (0, 0, \"%a\", nan) < 3);\n+  ELIM (snprintf (0, 0, \"%e\", nan) < 3);\n+  ELIM (snprintf (0, 0, \"%f\", nan) < 3);\n+  ELIM (snprintf (0, 0, \"%g\", nan) < 3);\n+}\n+\n+void test_keep (int p, double x)\n+{\n+  KEEP (snprintf (0, 0, \"%a\", x) == 3);\n+  KEEP (snprintf (0, 0, \"%e\", x) == 3);\n+\n+  KEEP (snprintf (0, 0, \"%f\", x) == 3);\n+  KEEP (snprintf (0, 0, \"%.*f\", p, x) < 3);\n+\n+  KEEP (snprintf (0, 0, \"%g\", x) == 1);\n+  KEEP (snprintf (0, 0, \"%g\", x) == 3);\n+}\n+\n+void test_warn_sprintf_f (double x)\n+{\n+  WARN (4, sprintf (a, \"%a\", x));   /* { dg-warning \"between 3 and 24 bytes\" } */\n+  WARN (4, sprintf (a, \"%e\", x));   /* { dg-warning \"between 3 and 14 bytes\" } */\n+  WARN (4, sprintf (a, \"%f\", x));   /* { dg-warning \"between 3 and 317 bytes\" } */\n+  WARN (4, sprintf (a, \"%g\", x));   /* { dg-warning \"between 1 and 13 bytes\" } */\n+}\n+\n+\n+/* { dg-final { scan-tree-dump-times \"call_in_true_branch_not_eliminated_\" 0 \"optimized\" } }\n+   { dg-final { scan-tree-dump-times \"call_made_in_true_branch_\" 6\" optimized\" } }\n+   { dg-final { scan-tree-dump-times \"call_made_in_false_branch_\" 6 \"optimized\" } }\n+ */"}, {"sha": "3fb3e6df5928f98fa1506e310d89f582f26efc8b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-1.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af7cb515f8ee1af63f7998c2748281263ae6f48/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af7cb515f8ee1af63f7998c2748281263ae6f48/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-1.c?ref=7af7cb515f8ee1af63f7998c2748281263ae6f48", "patch": "@@ -1377,7 +1377,8 @@ void test_sprintf_chk_e_nonconst (int w, int p, double d)\n   T (-1, \"%*.*E\",  w, p, d);\n   T (-1, \"%*.*lE\", w, p, d);\n \n-  T ( 0, \"%E\",          d);           /* { dg-warning \"writing between 12 and 14 bytes into a region of size 0\" } */\n+  /* The least number of bytes %E can produce is 3 for \"inf\" and \"nan\".  */\n+  T ( 0, \"%E\",          d);           /* { dg-warning \"writing between 3 and 14 bytes into a region of size 0\" } */\n   T ( 0, \"%e\",          d);           /* { dg-warning \"into a region\" } */\n   T ( 1, \"%E\",          d);           /* { dg-warning \"into a region\" } */\n   T ( 1, \"%e\",          d);           /* { dg-warning \"into a region\" } */\n@@ -1389,22 +1390,22 @@ void test_sprintf_chk_e_nonconst (int w, int p, double d)\n   T (14, \"%E\",          d);\n   T (14, \"%e\",          d);\n \n-  T ( 0, \"%+E\",         d);           /* { dg-warning \"writing between 13 and 14 bytes into a region of size 0\" } */\n-  T ( 0, \"%-e\",         d);           /* { dg-warning \"writing between 12 and 14 bytes into a region of size 0\" } */\n-  T ( 0, \"% E\",         d);           /* { dg-warning \"writing between 13 and 14 bytes into a region of size 0\" } */\n+  T ( 0, \"%+E\",         d);           /* { dg-warning \"writing between 4 and 14 bytes into a region of size 0\" } */\n+  T ( 0, \"%-e\",         d);           /* { dg-warning \"writing between 3 and 14 bytes into a region of size 0\" } */\n+  T ( 0, \"% E\",         d);           /* { dg-warning \"writing between 4 and 14 bytes into a region of size 0\" } */\n \n-  /* The range of output of \"%.0e\" is between 5 and 7 bytes (not counting\n+  /* The range of output of \"%.0e\" is between 3 and 7 bytes (not counting\n      the terminating NUL.  */\n-  T ( 5, \"%.0e\",        d);           /* { dg-warning \"writing a terminating nul past the end\" } */\n+  T ( 5, \"%.0e\",        d);           /* { dg-warning \"may write a terminating nul past the end\" } */\n   T ( 6, \"%.0e\",        d);           /* 1e+00 */\n \n-  /* The range of output of \"%.1e\" is between 7 and 9 bytes (not counting\n+  /* The range of output of \"%.1e\" is between 3 and 9 bytes (not counting\n      the terminating NUL.  */\n-  T ( 7, \"%.1e\",        d);           /* { dg-warning \"writing a terminating nul past the end\" } */\n+  T ( 7, \"%.1e\",        d);           /* { dg-warning \"may write a terminating nul past the end\" } */\n   T ( 8, \"%.1e\",        d);\n \n-  T ( 0, \"%*e\",      0, d);           /* { dg-warning \"writing between 12 and 14 bytes into a region of size 0\" } */\n-  T ( 0, \"%*e\",      w, d);           /* { dg-warning \"writing 12 or more bytes into a region of size 0|writing between 12 and \\[0-9\\]+ bytes into a region of size 0\" } */\n+  T ( 0, \"%*e\",      0, d);           /* { dg-warning \"writing between 3 and 14 bytes into a region of size 0\" } */\n+  T ( 0, \"%*e\",      w, d);           /* { dg-warning \"writing 3 or more bytes into a region of size 0|writing between 3 and \\[0-9\\]+ bytes into a region of size 0\" } */\n }\n \n void test_sprintf_chk_f_nonconst (double d)"}, {"sha": "82163b28d757ad72a29c5b60c34df95277993efb", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-10.c", "status": "modified", "additions": 100, "deletions": 100, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af7cb515f8ee1af63f7998c2748281263ae6f48/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af7cb515f8ee1af63f7998c2748281263ae6f48/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-10.c?ref=7af7cb515f8ee1af63f7998c2748281263ae6f48", "patch": "@@ -25,85 +25,85 @@ extern void sink (int, void*);\n /* Exercise %a.  */\n void test_a (int w, int p, double x)\n {\n-  T1 (\"%.*a\", 0);     /* { dg-warning \"between 6 and 10 bytes\" } */\n-  T1 (\"%.*a\", 1);     /* { dg-warning \"between 8 and 12 bytes\" } */\n-  T1 (\"%.*a\", 2);     /* { dg-warning \"between 9 and 13 bytes\" } */\n-  T1 (\"%.*a\", 99);    /* { dg-warning \"between 106 and 110 bytes\" } */\n-  T1 (\"%.*a\", 199);   /* { dg-warning \"between 206 and 210 bytes\" } */\n-  T1 (\"%.*a\", 1099);  /* { dg-warning \"between 1106 and 1110 bytes\" } */\n-\n-  T1 (\"%*.a\", 0);     /* { dg-warning \"between 6 and 10 bytes\" } */\n-  T1 (\"%*.a\", 1);     /* { dg-warning \"between 6 and 10 bytes\" } */\n-  T1 (\"%*.a\", 3);     /* { dg-warning \"between 6 and 10 bytes\" } */\n+  T1 (\"%.*a\", 0);     /* { dg-warning \"between 3 and 10 bytes\" } */\n+  T1 (\"%.*a\", 1);     /* { dg-warning \"between 3 and 12 bytes\" } */\n+  T1 (\"%.*a\", 2);     /* { dg-warning \"between 3 and 13 bytes\" } */\n+  T1 (\"%.*a\", 99);    /* { dg-warning \"between 3 and 110 bytes\" } */\n+  T1 (\"%.*a\", 199);   /* { dg-warning \"between 3 and 210 bytes\" } */\n+  T1 (\"%.*a\", 1099);  /* { dg-warning \"between 3 and 1110 bytes\" } */\n+\n+  T1 (\"%*.a\", 0);     /* { dg-warning \"between 3 and 10 bytes\" } */\n+  T1 (\"%*.a\", 1);     /* { dg-warning \"between 3 and 10 bytes\" } */\n+  T1 (\"%*.a\", 3);     /* { dg-warning \"between 3 and 10 bytes\" } */\n   T1 (\"%*.a\", 6);     /* { dg-warning \"between 6 and 10 bytes\" } */\n   T1 (\"%*.a\", 7);     /* { dg-warning \"between 7 and 10 bytes\" } */\n \n-  T1 (\"%*.a\", w);     /* { dg-warning \"writing between 6 and 2147483648 bytes\" } */\n-  T1 (\"%*.0a\", w);    /* { dg-warning \"writing between 6 and 2147483648 bytes\" } */\n-  T1 (\"%*.1a\", w);    /* { dg-warning \"writing between 8 and 2147483648 bytes\" } */\n-  T1 (\"%*.2a\", w);    /* { dg-warning \"writing between 9 and 2147483648 bytes\" } */\n+  T1 (\"%*.a\", w);     /* { dg-warning \"writing between 3 and 2147483648 bytes\" } */\n+  T1 (\"%*.0a\", w);    /* { dg-warning \"writing between 3 and 2147483648 bytes\" } */\n+  T1 (\"%*.1a\", w);    /* { dg-warning \"writing between 3 and 2147483648 bytes\" } */\n+  T1 (\"%*.2a\", w);    /* { dg-warning \"writing between 3 and 2147483648 bytes\" } */\n \n-  T1 (\"%.*a\",  p);    /* { dg-warning \"writing between 6 and 2147483658 bytes\" } */\n-  T1 (\"%1.*a\", p);    /* { dg-warning \"writing between 6 and 2147483658 bytes\" } */\n-  T1 (\"%2.*a\", p);    /* { dg-warning \"writing between 6 and 2147483658 bytes\" } */\n-  T1 (\"%3.*a\", p);    /* { dg-warning \"writing between 6 and 2147483658 bytes\" } */\n+  T1 (\"%.*a\",  p);    /* { dg-warning \"writing between 3 and 2147483658 bytes\" } */\n+  T1 (\"%1.*a\", p);    /* { dg-warning \"writing between 3 and 2147483658 bytes\" } */\n+  T1 (\"%2.*a\", p);    /* { dg-warning \"writing between 3 and 2147483658 bytes\" } */\n+  T1 (\"%3.*a\", p);    /* { dg-warning \"writing between 3 and 2147483658 bytes\" } */\n \n-  T2 (\"%*.*a\", w, p); /* { dg-warning \"writing between 6 and 2147483658 bytes\" } */\n+  T2 (\"%*.*a\", w, p); /* { dg-warning \"writing between 3 and 2147483658 bytes\" } */\n }\n \n /* Exercise %e.  */\n void test_e (int w, int p, double x)\n {\n-  T1 (\"%.*e\", 0);     /* { dg-warning \"between 5 and 7 bytes\" } */\n-  T1 (\"%.*e\", 1);     /* { dg-warning \"between 7 and 9 bytes\" } */\n-  T1 (\"%.*e\", 2);     /* { dg-warning \"between 8 and 10 bytes\" } */\n-  T1 (\"%.*e\", 99);    /* { dg-warning \"between 105 and 107 bytes\" } */\n-  T1 (\"%.*e\", 199);   /* { dg-warning \"between 205 and 207 bytes\" } */\n-  T1 (\"%.*e\", 1099);  /* { dg-warning \"between 1105 and 1107 bytes\" } */\n-\n-  T1 (\"%*.e\", 0);     /* { dg-warning \"between 5 and 7 bytes\" } */\n-  T1 (\"%*.e\", 1);     /* { dg-warning \"between 5 and 7 bytes\" } */\n-  T1 (\"%*.e\", 1);     /* { dg-warning \"between 5 and 7 bytes\" } */\n-  T1 (\"%*.e\", 3);     /* { dg-warning \"between 5 and 7 bytes\" } */\n+  T1 (\"%.*e\", 0);     /* { dg-warning \"between 3 and 7 bytes\" } */\n+  T1 (\"%.*e\", 1);     /* { dg-warning \"between 3 and 9 bytes\" } */\n+  T1 (\"%.*e\", 2);     /* { dg-warning \"between 3 and 10 bytes\" } */\n+  T1 (\"%.*e\", 99);    /* { dg-warning \"between 3 and 107 bytes\" } */\n+  T1 (\"%.*e\", 199);   /* { dg-warning \"between 3 and 207 bytes\" } */\n+  T1 (\"%.*e\", 1099);  /* { dg-warning \"between 3 and 1107 bytes\" } */\n+\n+  T1 (\"%*.e\", 0);     /* { dg-warning \"between 3 and 7 bytes\" } */\n+  T1 (\"%*.e\", 1);     /* { dg-warning \"between 3 and 7 bytes\" } */\n+  T1 (\"%*.e\", 1);     /* { dg-warning \"between 3 and 7 bytes\" } */\n+  T1 (\"%*.e\", 3);     /* { dg-warning \"between 3 and 7 bytes\" } */\n   T1 (\"%*.e\", 6);     /* { dg-warning \"between 6 and 7 bytes\" } */\n   T1 (\"%*.e\", 7);     /* { dg-warning \"writing 7 bytes\" } */\n \n-  T1 (\"%*.e\", w);     /* { dg-warning \"writing between 5 and 2147483648 bytes\" } */\n-  T1 (\"%*.0e\", w);    /* { dg-warning \"writing between 5 and 2147483648 bytes\" } */\n-  T1 (\"%*.1e\", w);    /* { dg-warning \"writing between 7 and 2147483648 bytes\" } */\n-  T1 (\"%*.2e\", w);    /* { dg-warning \"writing between 8 and 2147483648 bytes\" } */\n+  T1 (\"%*.e\", w);     /* { dg-warning \"writing between 3 and 2147483648 bytes\" } */\n+  T1 (\"%*.0e\", w);    /* { dg-warning \"writing between 3 and 2147483648 bytes\" } */\n+  T1 (\"%*.1e\", w);    /* { dg-warning \"writing between 3 and 2147483648 bytes\" } */\n+  T1 (\"%*.2e\", w);    /* { dg-warning \"writing between 3 and 2147483648 bytes\" } */\n \n-  T1 (\"%.*e\",  p);    /* { dg-warning \"writing between 5 and 2147483655 bytes\" } */\n-  T1 (\"%1.*e\", p);    /* { dg-warning \"writing between 5 and 2147483655 bytes\" } */\n-  T1 (\"%2.*e\", p);    /* { dg-warning \"writing between 5 and 2147483655 bytes\" } */\n-  T1 (\"%3.*e\", p);    /* { dg-warning \"writing between 5 and 2147483655 bytes\" } */\n+  T1 (\"%.*e\",  p);    /* { dg-warning \"writing between 3 and 2147483655 bytes\" } */\n+  T1 (\"%1.*e\", p);    /* { dg-warning \"writing between 3 and 2147483655 bytes\" } */\n+  T1 (\"%2.*e\", p);    /* { dg-warning \"writing between 3 and 2147483655 bytes\" } */\n+  T1 (\"%3.*e\", p);    /* { dg-warning \"writing between 3 and 2147483655 bytes\" } */\n \n-  T2 (\"%*.*e\", w, p); /* { dg-warning \"writing between 5 and 2147483655 bytes\" } */\n+  T2 (\"%*.*e\", w, p); /* { dg-warning \"writing between 3 and 2147483655 bytes\" } */\n }\n \n /* Exercise %f.  */\n void test_f (int w, int p, double x)\n {\n   T1 (\"%.*f\", 0);           /* { dg-warning \"between 1 and 310 bytes\" } */\n   T1 (\"%.*f\", 1);           /* { dg-warning \"between 3 and 312 bytes\" } */\n-  T1 (\"%.*f\", 2);           /* { dg-warning \"between 4 and 313 bytes\" } */\n-  T1 (\"%.*f\", 99);          /* { dg-warning \"between 101 and 410 bytes\" } */\n-  T1 (\"%.*f\", 199);         /* { dg-warning \"between 201 and 510 bytes\" } */\n-  T1 (\"%.*f\", 1099);        /* { dg-warning \"between 1101 and 1410 bytes\" } */\n+  T1 (\"%.*f\", 2);           /* { dg-warning \"between 3 and 313 bytes\" } */\n+  T1 (\"%.*f\", 99);          /* { dg-warning \"between 3 and 410 bytes\" } */\n+  T1 (\"%.*f\", 199);         /* { dg-warning \"between 3 and 510 bytes\" } */\n+  T1 (\"%.*f\", 1099);        /* { dg-warning \"between 3 and 1410 bytes\" } */\n \n   T2 (\"%*.*f\", 0, 0);       /* { dg-warning \"between 1 and 310 bytes\" } */\n   T2 (\"%*.*f\", 1, 0);       /* { dg-warning \"between 1 and 310 bytes\" } */\n   T2 (\"%*.*f\", 2, 0);       /* { dg-warning \"between 2 and 310 bytes\" } */\n   T2 (\"%*.*f\", 3, 0);       /* { dg-warning \"between 3 and 310 bytes\" } */\n   T2 (\"%*.*f\", 310, 0);     /* { dg-warning \"writing 310 bytes\" } */\n   T2 (\"%*.*f\", 311, 0);     /* { dg-warning \"writing 311 bytes\" } */\n-  T2 (\"%*.*f\", 312, 312);   /* { dg-warning \"between 314 and 623 bytes\" } */\n-  T2 (\"%*.*f\", 312, 313);   /* { dg-warning \"between 315 and 624 bytes\" } */\n+  T2 (\"%*.*f\", 312, 312);   /* { dg-warning \"between 312 and 623 bytes\" } */\n+  T2 (\"%*.*f\", 312, 313);   /* { dg-warning \"between 312 and 624 bytes\" } */\n \n   T1 (\"%*.f\", w);           /* { dg-warning \"writing between 1 and 2147483648 bytes\" } */\n   T1 (\"%*.0f\", w);          /* { dg-warning \"writing between 1 and 2147483648 bytes\" } */\n   T1 (\"%*.1f\", w);          /* { dg-warning \"writing between 3 and 2147483648 bytes\" } */\n-  T1 (\"%*.2f\", w);          /* { dg-warning \"writing between 4 and 2147483648 bytes\" } */\n+  T1 (\"%*.2f\", w);          /* { dg-warning \"writing between 3 and 2147483648 bytes\" } */\n \n   T1 (\"%.*f\",  p);          /* { dg-warning \"writing between 1 and 2147483958 bytes\" } */\n   T1 (\"%1.*f\", p);          /* { dg-warning \"writing between 1 and 2147483958 bytes\" } */\n@@ -138,94 +138,94 @@ void test_g (double x)\n /* Exercise %a.  */\n void test_a_va (va_list va)\n {\n-  T (\"%.0a\");       /* { dg-warning \"between 6 and 10 bytes\" } */\n-  T (\"%.1a\");       /* { dg-warning \"between 8 and 12 bytes\" } */\n-  T (\"%.2a\");       /* { dg-warning \"between 9 and 13 bytes\" } */\n-  T (\"%.99a\");      /* { dg-warning \"between 106 and 110 bytes\" } */\n-  T (\"%.199a\");     /* { dg-warning \"between 206 and 210 bytes\" } */\n-  T (\"%.1099a\");    /* { dg-warning \"between 1106 and 1110 bytes\" } */\n-\n-  T (\"%0.a\");       /* { dg-warning \"between 6 and 10 bytes\" } */\n-  T (\"%1.a\");       /* { dg-warning \"between 6 and 10 bytes\" } */\n-  T (\"%3.a\");       /* { dg-warning \"between 6 and 10 bytes\" } */\n+  T (\"%.0a\");       /* { dg-warning \"between 3 and 10 bytes\" } */\n+  T (\"%.1a\");       /* { dg-warning \"between 3 and 12 bytes\" } */\n+  T (\"%.2a\");       /* { dg-warning \"between 3 and 13 bytes\" } */\n+  T (\"%.99a\");      /* { dg-warning \"between 3 and 110 bytes\" } */\n+  T (\"%.199a\");     /* { dg-warning \"between 3 and 210 bytes\" } */\n+  T (\"%.1099a\");    /* { dg-warning \"between 3 and 1110 bytes\" } */\n+\n+  T (\"%0.a\");       /* { dg-warning \"between 3 and 10 bytes\" } */\n+  T (\"%1.a\");       /* { dg-warning \"between 3 and 10 bytes\" } */\n+  T (\"%3.a\");       /* { dg-warning \"between 3 and 10 bytes\" } */\n   T (\"%6.a\");       /* { dg-warning \"between 6 and 10 bytes\" } */\n   T (\"%7.a\");       /* { dg-warning \"between 7 and 10 bytes\" } */\n \n-  T (\"%*.a\");       /* { dg-warning \"writing between 6 and 2147483648 bytes\" } */\n-  T (\"%*.0a\");      /* { dg-warning \"writing between 6 and 2147483648 bytes\" } */\n-  T (\"%*.1a\");      /* { dg-warning \"writing between 8 and 2147483648 bytes\" } */\n-  T (\"%*.2a\");      /* { dg-warning \"writing between 9 and 2147483648 bytes\" } */\n+  T (\"%*.a\");       /* { dg-warning \"writing between 3 and 2147483648 bytes\" } */\n+  T (\"%*.0a\");      /* { dg-warning \"writing between 3 and 2147483648 bytes\" } */\n+  T (\"%*.1a\");      /* { dg-warning \"writing between 3 and 2147483648 bytes\" } */\n+  T (\"%*.2a\");      /* { dg-warning \"writing between 3 and 2147483648 bytes\" } */\n \n-  T (\"%.*a\");       /* { dg-warning \"writing between 6 and 2147483658 bytes\" } */\n-  T (\"%1.*a\");      /* { dg-warning \"writing between 6 and 2147483658 bytes\" } */\n-  T (\"%2.*a\");      /* { dg-warning \"writing between 6 and 2147483658 bytes\" } */\n+  T (\"%.*a\");       /* { dg-warning \"writing between 3 and 2147483658 bytes\" } */\n+  T (\"%1.*a\");      /* { dg-warning \"writing between 3 and 2147483658 bytes\" } */\n+  T (\"%2.*a\");      /* { dg-warning \"writing between 3 and 2147483658 bytes\" } */\n   T (\"%6.*a\");      /* { dg-warning \"writing between 6 and 2147483658 bytes\" } */\n   T (\"%9.*a\");      /* { dg-warning \"writing between 9 and 2147483658 bytes\" } */\n \n-  T (\"%*.*a\");      /* { dg-warning \"writing between 6 and 2147483658 bytes\" } */\n+  T (\"%*.*a\");      /* { dg-warning \"writing between 3 and 2147483658 bytes\" } */\n }\n \n /* Exercise %e.  */\n void test_e_va (va_list va)\n {\n-  T (\"%e\");         /* { dg-warning \"between 12 and 14 bytes\" } */\n-  T (\"%+e\");        /* { dg-warning \"between 13 and 14 bytes\" } */\n-  T (\"% e\");        /* { dg-warning \"between 13 and 14 bytes\" } */\n-  T (\"%#e\");        /* { dg-warning \"between 12 and 14 bytes\" } */\n-  T (\"%#+e\");       /* { dg-warning \"between 13 and 14 bytes\" } */\n-  T (\"%# e\");       /* { dg-warning \"between 13 and 14 bytes\" } */\n-\n-  T (\"%.e\");        /* { dg-warning \"between 5 and 7 bytes\" } */\n-  T (\"%.0e\");       /* { dg-warning \"between 5 and 7 bytes\" } */\n-  T (\"%.1e\");       /* { dg-warning \"between 7 and 9 bytes\" } */\n-  T (\"%.2e\");       /* { dg-warning \"between 8 and 10 bytes\" } */\n-  T (\"%.99e\");      /* { dg-warning \"between 105 and 107 bytes\" } */\n-  T (\"%.199e\");     /* { dg-warning \"between 205 and 207 bytes\" } */\n-  T (\"%.1099e\");    /* { dg-warning \"between 1105 and 1107 bytes\" } */\n-\n-  T (\"%0.e\");       /* { dg-warning \"between 5 and 7 bytes\" } */\n-  T (\"%1.e\");       /* { dg-warning \"between 5 and 7 bytes\" } */\n-  T (\"%1.e\");       /* { dg-warning \"between 5 and 7 bytes\" } */\n-  T (\"%3.e\");       /* { dg-warning \"between 5 and 7 bytes\" } */\n+  T (\"%e\");         /* { dg-warning \"between 3 and 14 bytes\" } */\n+  T (\"%+e\");        /* { dg-warning \"between 4 and 14 bytes\" } */\n+  T (\"% e\");        /* { dg-warning \"between 4 and 14 bytes\" } */\n+  T (\"%#e\");        /* { dg-warning \"between 3 and 14 bytes\" } */\n+  T (\"%#+e\");       /* { dg-warning \"between 4 and 14 bytes\" } */\n+  T (\"%# e\");       /* { dg-warning \"between 4 and 14 bytes\" } */\n+\n+  T (\"%.e\");        /* { dg-warning \"between 3 and 7 bytes\" } */\n+  T (\"%.0e\");       /* { dg-warning \"between 3 and 7 bytes\" } */\n+  T (\"%.1e\");       /* { dg-warning \"between 3 and 9 bytes\" } */\n+  T (\"%.2e\");       /* { dg-warning \"between 3 and 10 bytes\" } */\n+  T (\"%.99e\");      /* { dg-warning \"between 3 and 107 bytes\" } */\n+  T (\"%.199e\");     /* { dg-warning \"between 3 and 207 bytes\" } */\n+  T (\"%.1099e\");    /* { dg-warning \"between 3 and 1107 bytes\" } */\n+\n+  T (\"%0.e\");       /* { dg-warning \"between 3 and 7 bytes\" } */\n+  T (\"%1.e\");       /* { dg-warning \"between 3 and 7 bytes\" } */\n+  T (\"%1.e\");       /* { dg-warning \"between 3 and 7 bytes\" } */\n+  T (\"%3.e\");       /* { dg-warning \"between 3 and 7 bytes\" } */\n   T (\"%6.e\");       /* { dg-warning \"between 6 and 7 bytes\" } */\n   T (\"%7.e\");       /* { dg-warning \"writing 7 bytes\" } */\n \n-  T (\"%.*e\");       /* { dg-warning \"writing between 5 and 2147483655 bytes\" } */\n-  T (\"%1.*e\");      /* { dg-warning \"writing between 5 and 2147483655 bytes\" } */\n+  T (\"%.*e\");       /* { dg-warning \"writing between 3 and 2147483655 bytes\" } */\n+  T (\"%1.*e\");      /* { dg-warning \"writing between 3 and 2147483655 bytes\" } */\n   T (\"%6.*e\");      /* { dg-warning \"writing between 6 and 2147483655 bytes\" } */\n   T (\"%9.*e\");      /* { dg-warning \"writing between 9 and 2147483655 bytes\" } */\n \n-  T (\"%*.*e\");      /* { dg-warning \"writing between 5 and 2147483655 bytes\" } */\n+  T (\"%*.*e\");      /* { dg-warning \"writing between 3 and 2147483655 bytes\" } */\n }\n \n /* Exercise %f.  */\n void test_f_va (va_list va)\n {\n-  T (\"%f\");         /* { dg-warning \"between 8 and 317 bytes\" } */\n-  T (\"%+f\");        /* { dg-warning \"between 9 and 317 bytes\" } */\n-  T (\"% f\");        /* { dg-warning \"between 9 and 317 bytes\" } */\n-  T (\"%#f\");        /* { dg-warning \"between 8 and 317 bytes\" } */\n-  T (\"%+f\");        /* { dg-warning \"between 9 and 317 bytes\" } */\n-  T (\"% f\");        /* { dg-warning \"between 9 and 317 bytes\" } */\n-  T (\"%#+f\");       /* { dg-warning \"between 9 and 317 bytes\" } */\n-  T (\"%# f\");       /* { dg-warning \"between 9 and 317 bytes\" } */\n+  T (\"%f\");         /* { dg-warning \"between 3 and 317 bytes\" } */\n+  T (\"%+f\");        /* { dg-warning \"between 4 and 317 bytes\" } */\n+  T (\"% f\");        /* { dg-warning \"between 4 and 317 bytes\" } */\n+  T (\"%#f\");        /* { dg-warning \"between 3 and 317 bytes\" } */\n+  T (\"%+f\");        /* { dg-warning \"between 4 and 317 bytes\" } */\n+  T (\"% f\");        /* { dg-warning \"between 4 and 317 bytes\" } */\n+  T (\"%#+f\");       /* { dg-warning \"between 4 and 317 bytes\" } */\n+  T (\"%# f\");       /* { dg-warning \"between 4 and 317 bytes\" } */\n \n   T (\"%.f\");        /* { dg-warning \"between 1 and 310 bytes\" } */\n   T (\"%.0f\");       /* { dg-warning \"between 1 and 310 bytes\" } */\n   T (\"%.1f\");       /* { dg-warning \"between 3 and 312 bytes\" } */\n-  T (\"%.2f\");       /* { dg-warning \"between 4 and 313 bytes\" } */\n-  T (\"%.99f\");      /* { dg-warning \"between 101 and 410 bytes\" } */\n-  T (\"%.199f\");     /* { dg-warning \"between 201 and 510 bytes\" } */\n-  T (\"%.1099f\");    /* { dg-warning \"between 1101 and 1410 bytes\" } */\n+  T (\"%.2f\");       /* { dg-warning \"between 3 and 313 bytes\" } */\n+  T (\"%.99f\");      /* { dg-warning \"between 3 and 410 bytes\" } */\n+  T (\"%.199f\");     /* { dg-warning \"between 3 and 510 bytes\" } */\n+  T (\"%.1099f\");    /* { dg-warning \"between 3 and 1410 bytes\" } */\n \n   T (\"%0.0f\");      /* { dg-warning \"between 1 and 310 bytes\" } */\n   T (\"%1.0f\");      /* { dg-warning \"between 1 and 310 bytes\" } */\n   T (\"%2.0f\");      /* { dg-warning \"between 2 and 310 bytes\" } */\n   T (\"%3.0f\");      /* { dg-warning \"between 3 and 310 bytes\" } */\n   T (\"%310.0f\");    /* { dg-warning \"writing 310 bytes\" } */\n   T (\"%311.0f\");    /* { dg-warning \"writing 311 bytes\" } */\n-  T (\"%312.312f\");  /* { dg-warning \"between 314 and 623 bytes\" } */\n-  T (\"%312.313f\");  /* { dg-warning \"between 315 and 624 bytes\" } */\n+  T (\"%312.312f\");  /* { dg-warning \"between 312 and 623 bytes\" } */\n+  T (\"%312.313f\");  /* { dg-warning \"between 312 and 624 bytes\" } */\n \n   T (\"%.*f\");       /* { dg-warning \"writing between 1 and 2147483958 bytes\" } */\n   T (\"%1.*f\");      /* { dg-warning \"writing between 1 and 2147483958 bytes\" } */"}, {"sha": "2d0383c9b0c38d0e1713f26d5a0a94d6cd47c699", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-15.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af7cb515f8ee1af63f7998c2748281263ae6f48/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af7cb515f8ee1af63f7998c2748281263ae6f48/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-15.c?ref=7af7cb515f8ee1af63f7998c2748281263ae6f48", "patch": "@@ -71,14 +71,14 @@ void test_unknown_width_floating (int w, double d)\n   T ( 7, \"%*a\", w, d);\n   T (21, \"%*a\", w, 3.141);\n \n-  T (12, \"%*e\",  w, d);    /* { dg-warning \"writing a terminating nul\" } */\n-  T (12, \"%#*e\", w, d);    /* { dg-warning \"writing a terminating nul\" } */\n+  T (12, \"%*e\",  w, d);    /* { dg-warning \"may write a terminating nul\" } */\n+  T (12, \"%#*e\", w, d);    /* { dg-warning \"may write a terminating nul\" } */\n   T (13, \"%*e\",  w, d);\n   T (13, \"%#*e\", w, d);\n   T (13, \"%*e\",  w, 3.141);\n \n-  T ( 8, \"%*f\",  w, d);   /* { dg-warning \"writing a terminating nul\" } */\n-  T ( 8, \"%#*f\", w, d);   /* { dg-warning \"writing a terminating nul\" } */\n+  T ( 8, \"%*f\",  w, d);   /* { dg-warning \"may write a terminating nul\" } */\n+  T ( 8, \"%#*f\", w, d);   /* { dg-warning \"may write a terminating nul\" } */\n   T ( 9, \"%*f\",  w, d);\n   T ( 9, \"%#*f\", w, d);\n   T ( 9, \"%*f\",  w, 3.141);\n@@ -106,20 +106,20 @@ void test_unknown_precision_integer (int p, int i, double d)\n \n void test_unknown_precision_floating (int p, double d)\n {\n-  T ( 0, \"%.*a\", R (-1, 0), d); /* { dg-warning \"between 6 and 24 \" } */\n-  T ( 6, \"%.*a\", R (-1, 0), d); /* { dg-warning \"writing a terminating nul\" } */\n+  T ( 0, \"%.*a\", R (-1, 0), d); /* { dg-warning \"between 3 and 24 \" } */\n+  T ( 6, \"%.*a\", R (-1, 0), d); /* { dg-warning \"may write a terminating nul\" } */\n   T ( 7, \"%.*a\", R (-1, 0), d);\n   T ( 7, \"%.*a\", p, d);\n   T (21, \"%.*a\", p, 3.141);\n \n-  T ( 0, \"%.*e\",  R (-1, 0), d); /* { dg-warning \"between 5 and 14 \" } */\n-  T ( 0, \"%.*e\",  R (-1, 6), d); /* { dg-warning \"between 5 and 14 \" } */\n-  T ( 5, \"%.*e\",  R (-1, 6), d); /* { dg-warning \"writing a terminating nul\" } */\n+  T ( 0, \"%.*e\",  R (-1, 0), d); /* { dg-warning \"between 3 and 14 \" } */\n+  T ( 0, \"%.*e\",  R (-1, 6), d); /* { dg-warning \"between 3 and 14 \" } */\n+  T ( 5, \"%.*e\",  R (-1, 6), d); /* { dg-warning \"may write a terminating nul\" } */\n   T ( 6, \"%.*e\",  R (-1, 6), d);\n-  /* \"%.0e\", 0.0 results in 5 bytes: \"0e+00\"  */\n-  T ( 5, \"%.*e\",  p, d);      /* { dg-warning \"writing a terminating nul\" } */\n-  /* \"%#.0e\", 0.0 results in 6 bytes: \"0.e+00\"  */\n-  T ( 6, \"%#.*e\", p, d);      /* { dg-warning \"writing a terminating nul\" } */\n+  /* \"%.0e\", 0.0 results in 3 or 5 bytes: \"inf\"/\"nan\" or \"0e+00\"  */\n+  T ( 5, \"%.*e\",  p, d);      /* { dg-warning \"may write a terminating nul\" } */\n+  /* \"%#.0e\", 0.0 results in 3 or 6 bytes: \"inf\"/\"nan\" or \"0.e+00\"  */\n+  T ( 6, \"%#.*e\", p, d);      /* { dg-warning \"may write a terminating nul\" } */\n   T ( 6, \"%.*e\",  p, d);\n   T ( 6, \"%.*e\",  p, 3.141);\n   T ( 6, \"%#.*e\", p, 3.141);  /* { dg-warning \"writing a terminating nul\" } */\n@@ -183,10 +183,10 @@ void test_unknown_width_and_precision_floating (int w, int p, double d)\n   T ( 7, \"%*.*a\", w, p, d);\n   T (21, \"%*.*a\", w, p, 3.141);\n \n-  /* \"%0.0e\", 0.0 results in 5 bytes: \"0e+00\"  */\n-  T ( 5, \"%*.*e\",  w, p, d);   /* { dg-warning \"writing a terminating nul\" } */\n-  /* \"%#0.0e\", 0.0 results in 6 bytes: \"0.e+00\"  */\n-  T ( 6, \"%#*.*e\", w, p, d);   /* { dg-warning \"writing a terminating nul\" } */\n+  /* \"%0.0e\", 0.0 results in 3 or 5 bytes: \"inf\"/\"nan\" or \"0e+00\"  */\n+  T ( 5, \"%*.*e\",  w, p, d);   /* { dg-warning \"may write a terminating nul\" } */\n+  /* \"%#0.0e\", 0.0 results in 3 or 6 bytes: \"inf\"/\"nan\" or \"0.e+00\"  */\n+  T ( 6, \"%#*.*e\", w, p, d);   /* { dg-warning \"may write a terminating nul\" } */\n   T ( 6, \"%*.*e\",  w, p, d);\n   T ( 6, \"%*.*e\",  w, p, 3.141);\n   T ( 6, \"%#*.*e\", w, p, 3.141);/* { dg-warning \"writing a terminating nul\" } */"}, {"sha": "0701beb81618f29d1947416cc52a3dc3d251a23d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-7.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af7cb515f8ee1af63f7998c2748281263ae6f48/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af7cb515f8ee1af63f7998c2748281263ae6f48/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-7.c?ref=7af7cb515f8ee1af63f7998c2748281263ae6f48", "patch": "@@ -71,16 +71,16 @@ void test_floating_a_var (double x)\n   T (0, \"%*a\",  INT_MIN, x);     /* { dg-warning \"writing 2147483648 bytes\" } */\n   T (0, \"%*a\",  INT_MAX, x);     /* { dg-warning \"writing 2147483647 bytes\" } */\n \n-  T (0, \"%.*a\", INT_MIN, x);     /* { dg-warning \"writing between 6 and 24 bytes\" } */\n+  T (0, \"%.*a\", INT_MIN, x);     /* { dg-warning \"writing between 3 and 24 bytes\" } */\n \n   /* Expected output is \"0x0.\" followed by INT_MAX digits followed by\n      \"p+\" followed by 1 to four digits, with a byte count in the range\n      [3 + INT_MAX + 2 + 1, 3 + INT_MAX + 2 + 4].  */\n-  T (0, \"%.*a\", INT_MAX, x);     /* { dg-warning \"writing between 2147483654 and 2147483658 bytes\" } */\n+  T (0, \"%.*a\", INT_MAX, x);     /* { dg-warning \"writing between 3 and 2147483658 bytes\" } */\n \n   T (0, \"%*.*a\", INT_MIN, INT_MIN, x);   /* { dg-warning \"writing 2147483648 bytes\" } */\n \n-  T (0, \"%*.*a\", INT_MAX, INT_MAX, x);   /* { dg-warning \"writing between 2147483654 and 2147483658 bytes\" } */\n+  T (0, \"%*.*a\", INT_MAX, INT_MAX, x);   /* { dg-warning \"writing between 2147483647 and 2147483658 bytes\" } */\n }\n \n void test_floating_e_cst (void)\n@@ -102,13 +102,13 @@ void test_floating_e_var (double x)\n   T (0, \"%*e\",  INT_MIN, x);     /* { dg-warning \"writing 2147483648 bytes\" } */\n   T (0, \"%*e\",  INT_MAX, x);     /* { dg-warning \"writing 2147483647 bytes\" } */\n \n-  T (0, \"%.*e\", INT_MIN, x);     /* { dg-warning \"writing between 12 and 14 bytes\" } */\n+  T (0, \"%.*e\", INT_MIN, x);     /* { dg-warning \"writing between 3 and 14 bytes\" } */\n \n-  T (0, \"%.*e\", INT_MAX, x);     /* { dg-warning \"writing between 2147483653 and 2147483655 bytes\" } */\n+  T (0, \"%.*e\", INT_MAX, x);     /* { dg-warning \"writing between 3 and 2147483655 bytes\" } */\n \n   T (0, \"%*.*e\", INT_MIN, INT_MIN, x);   /* { dg-warning \"writing 2147483648 bytes\" } */\n \n-  T (0, \"%*.*e\", INT_MAX, INT_MAX, x);   /* { dg-warning \"writing between 2147483653 and 2147483655 bytes\" } */\n+  T (0, \"%*.*e\", INT_MAX, INT_MAX, x);   /* { dg-warning \"writing between 2147483647 and 2147483655 bytes\" } */\n }\n \n void test_floating_f_cst (void)\n@@ -130,13 +130,13 @@ void test_floating_f_var (double x)\n   T (0, \"%*f\",  INT_MIN, x);     /* { dg-warning \"writing 2147483648 bytes\" } */\n   T (0, \"%*f\",  INT_MAX, x);     /* { dg-warning \"writing 2147483647 bytes\" } */\n \n-  T (0, \"%.*f\", INT_MIN, x);     /* { dg-warning \"writing between 8 and 317 bytes\" } */\n+  T (0, \"%.*f\", INT_MIN, x);     /* { dg-warning \"writing between 3 and 317 bytes\" } */\n \n-  T (0, \"%.*f\", INT_MAX, x);     /* { dg-warning \"writing between 2147483649 and 2147483958 bytes\" } */\n+  T (0, \"%.*f\", INT_MAX, x);     /* { dg-warning \"writing between 3 and 2147483958 bytes\" } */\n \n   T (0, \"%*.*f\", INT_MIN, INT_MIN, x);   /* { dg-warning \"writing 2147483648 bytes\" } */\n \n-  T (0, \"%*.*f\", INT_MAX, INT_MAX, x);   /* { dg-warning \"writing between 2147483649 and 2147483958 bytes\" } */\n+  T (0, \"%*.*f\", INT_MAX, INT_MAX, x);   /* { dg-warning \"writing between 2147483647 and 2147483958 bytes\" } */\n }\n \n void test_floating_g_cst (void)"}, {"sha": "f7e779a1e8d225c1471df91b4bdf11ef8092730b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf.c", "status": "modified", "additions": 54, "deletions": 47, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af7cb515f8ee1af63f7998c2748281263ae6f48/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af7cb515f8ee1af63f7998c2748281263ae6f48/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf.c?ref=7af7cb515f8ee1af63f7998c2748281263ae6f48", "patch": "@@ -479,12 +479,12 @@ test_a_double (double d)\n   RNG (11, 16, 17, \"%.*a\", 4, 6.0); /* 0xc.0000p-1 */\n   RNG (12, 17, 18, \"%.*a\", 5, 7.0); /* 0xe.00000p-1 */\n \t                            /* d is in [ 0, -DBL_MAX ] */\n-  RNG ( 6, 10, 11, \"%.0a\", d);      /* 0x0p+0 ... -0x2p+1023 */\n+  RNG ( 3, 10, 11, \"%.0a\", d);      /* inf/nan or 0x0p+0 ... -0x2p+1023 */\n   /* %a is poorly specified and allows for implementations divergence:\n      some (such as Glibc) trim redundant trailing zeros after decimal\n      point and others (e.g., Solaris) don't.  */\n-  RNG ( 8, 30, 31, \"%.1a\", d);      /* 0x0.0p+0  ... -0x2.0...0p+1023 */\n-  RNG ( 9, 30, 31, \"%.2a\", d);      /* 0x0.00p+0 ... -0x2.00...0p+1023 */\n+  RNG ( 3, 30, 31, \"%.1a\", d);      /* inf or 0x0.0p+0  ... -0x2.0...0p+1023 */\n+  RNG ( 3, 30, 31, \"%.2a\", d);      /* inf or 0x0.00p+0 ... -0x2.00...0p+1023 */\n }\n \n static void __attribute__ ((noinline, noclone))\n@@ -522,29 +522,32 @@ test_e_double (double d)\n   RNG (12, 17, 18, \"%e\",  1.0e-12);\n   RNG (13, 18, 19, \"%e\",  1.0e-123);\n \n-  RNG (12, 19, 20, \"%e\",   d);\n-  RNG ( 5, 11, 12, \"%.e\",  d);\n-  RNG ( 5, 12, 13, \"%.0e\", d);\n-  RNG ( 7, 14, 15, \"%.1e\", d);\n-  RNG ( 8, 15, 16, \"%.2e\", d);\n-  RNG ( 9, 16, 17, \"%.3e\", d);\n-  RNG (10, 17, 18, \"%.4e\", d);\n-  RNG (11, 18, 19, \"%.5e\", d);\n-  RNG (12, 19, 20, \"%.6e\", d);\n-  RNG (13, 20, 21, \"%.7e\", d);\n-\n-  RNG (4006, 4013, 4014, \"%.4000e\", d);\n-\n-  RNG ( 5,  7,  8, \"%.*e\", 0, d);\n-  RNG ( 7, 14, 15, \"%.*e\", 1, d);\n-  RNG ( 8, 15, 16, \"%.*e\", 2, d);\n-  RNG ( 9, 16, 17, \"%.*e\", 3, d);\n-  RNG (10, 17, 18, \"%.*e\", 4, d);\n-  RNG (11, 18, 19, \"%.*e\", 5, d);\n-  RNG (12, 19, 20, \"%.*e\", 6, d);\n-  RNG (13, 20, 21, \"%.*e\", 7, d);\n-\n-  RNG (4006, 4013, 4014, \"%.*e\", 4000, d);\n+  RNG ( 3, 19, 20, \"%e\",   d);\n+  RNG ( 3, 11, 12, \"%.e\",  d);\n+  RNG ( 3, 12, 13, \"%.0e\", d);\n+  RNG ( 3, 14, 15, \"%.1e\", d);\n+  RNG ( 3, 15, 16, \"%.2e\", d);\n+  RNG ( 3, 16, 17, \"%.3e\", d);\n+  RNG ( 3, 17, 18, \"%.4e\", d);\n+  RNG ( 3, 18, 19, \"%.5e\", d);\n+  RNG ( 3, 19, 20, \"%.6e\", d);\n+  RNG ( 3, 20, 21, \"%.7e\", d);\n+\n+  RNG ( 3, 4013, 4014, \"%.4000e\", d);\n+\n+  RNG ( 3,  7,  8, \"%.*e\", 0, d);\n+  RNG ( 3, 14, 15, \"%.*e\", 1, d);\n+  RNG ( 3, 15, 16, \"%.*e\", 2, d);\n+  RNG ( 3, 16, 17, \"%.*e\", 3, d);\n+  RNG ( 3, 17, 18, \"%.*e\", 4, d);\n+  RNG ( 3, 18, 19, \"%.*e\", 5, d);\n+  RNG ( 3, 19, 20, \"%.*e\", 6, d);\n+  RNG ( 3, 20, 21, \"%.*e\", 7, d);\n+\n+  RNG ( 3, 4013, 4014, \"%.*e\",  4000, d);\n+  RNG ( 4, 4013, 4014, \"%+.*e\", 4000, d);\n+  RNG ( 4, 4013, 4014, \"% .*e\", 4000, d);\n+  RNG ( 3, 4013, 4014, \"%#.*e\", 4000, d);\n }\n \n static void __attribute__ ((noinline, noclone))\n@@ -584,26 +587,27 @@ test_e_long_double (long double d)\n   RNG (20, 26, 27, \"%.13Le\",  1.0e-113L);\n \n   /* The following correspond to the double results plus 1 for the upper\n-     bound accounting for the four-digit exponent.  */\n-  RNG (12, 20, 21, \"%Le\", d);    /* 0.000000e+00 ...  -1.189732e+4932 */\n-  RNG ( 5,  8,  9, \"%.Le\", d);\n-  RNG ( 5,  9, 10, \"%.0Le\", d);\n-  RNG ( 7, 15, 16, \"%.1Le\", d);  /* 0.0e+00      ...  -1.2e+4932 */\n-  RNG ( 8, 16, 17, \"%.2Le\", d);  /* 0.00e+00     ...  -1.19e+4932 */\n-  RNG ( 9, 17, 18, \"%.3Le\", d);\n-  RNG (10, 18, 19, \"%.4Le\", d);\n-  RNG (11, 19, 20, \"%.5Le\", d);\n-  RNG (12, 20, 21, \"%.6Le\", d);  /* same as plain \"%Le\" */\n-  RNG (13, 21, 22, \"%.7Le\", d);  /* 0.0000000e+00 ... -1.1897315e+4932 */\n-\n-  RNG ( 5,  9, 10, \"%.*Le\", 0, d);\n-  RNG ( 7, 15, 16, \"%.*Le\", 1, d);\n-  RNG ( 8, 16, 17, \"%.*Le\", 2, d);\n-  RNG ( 9, 17, 18, \"%.*Le\", 3, d);\n-  RNG (10, 18, 19, \"%.*Le\", 4, d);\n-  RNG (11, 19, 20, \"%.*Le\", 5, d);\n-  RNG (12, 20, 21, \"%.*Le\", 6, d);\n-  RNG (13, 21, 22, \"%.*Le\", 7, d);\n+     bound accounting for the four-digit exponent.  The lower bound is\n+     for inf/nan.  */\n+  RNG ( 3, 20, 21, \"%Le\", d);    /* inf or 0.000000e+00 ...  -1.189732e+4932 */\n+  RNG ( 3,  8,  9, \"%.Le\", d);\n+  RNG ( 3,  9, 10, \"%.0Le\", d);\n+  RNG ( 3, 15, 16, \"%.1Le\", d);  /* inf or 0.0e+00      ...  -1.2e+4932 */\n+  RNG ( 3, 16, 17, \"%.2Le\", d);  /* inf or 0.00e+00     ...  -1.19e+4932 */\n+  RNG ( 3, 17, 18, \"%.3Le\", d);\n+  RNG ( 3, 18, 19, \"%.4Le\", d);\n+  RNG ( 3, 19, 20, \"%.5Le\", d);\n+  RNG ( 3, 20, 21, \"%.6Le\", d);  /* same as plain \"%Le\" */\n+  RNG ( 3, 21, 22, \"%.7Le\", d);  /* inf or 0.0000000e+00 ... -1.1897315e+4932 */\n+\n+  RNG ( 3,  9, 10, \"%.*Le\", 0, d);\n+  RNG ( 3, 15, 16, \"%.*Le\", 1, d);\n+  RNG ( 3, 16, 17, \"%.*Le\", 2, d);\n+  RNG ( 3, 17, 18, \"%.*Le\", 3, d);\n+  RNG ( 3, 18, 19, \"%.*Le\", 4, d);\n+  RNG ( 3, 19, 20, \"%.*Le\", 5, d);\n+  RNG ( 3, 20, 21, \"%.*Le\", 6, d);\n+  RNG ( 3, 21, 22, \"%.*Le\", 7, d);\n }\n \n static void __attribute__ ((noinline, noclone))\n@@ -626,7 +630,10 @@ test_f_double (double d)\n   RNG (  8,  13,  14, \"%f\", 1.0e-12);\n   RNG (  8,  13,  14, \"%f\", 1.0e-123);\n \n-  RNG (  8, 322, 323, \"%f\", d);\n+  RNG (  3, 322, 323, \"%f\",  d);\n+  RNG (  4, 322, 323, \"%+f\", d);\n+  RNG (  4, 322, 323, \"% f\", d);\n+  RNG (  3, 322, 323, \"%#f\", d);\n }\n \n static void __attribute__ ((noinline, noclone))"}, {"sha": "cd0423990c74822c3d5b51031c8a36202bb1be29", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr83198.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af7cb515f8ee1af63f7998c2748281263ae6f48/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr83198.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af7cb515f8ee1af63f7998c2748281263ae6f48/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr83198.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr83198.c?ref=7af7cb515f8ee1af63f7998c2748281263ae6f48", "patch": "@@ -7,17 +7,21 @@ void bar (void);\n void link_error (void);\n \n void\n-foo (char *x)\n+foo (char *x, double y)\n {\n+  /* The expected result should not be constant but rather that\n+     of the %f directive with an unknown argument, i.e., at least\n+     [3, 317] (but in reality [3, 322] when taking into account\n+     that the decimal point can be up to MB_LEN_MAX bytes long).  */\n   int a = __builtin_sprintf (x, \"%f\", 1.0Q);\n-  if (a < 8)\n+  if (a < 3)\n     link_error ();\n   if (a > 13)\n     bar ();\n   if (a > 322)\n     link_error ();\n }\n \n-/* Verify we don't optimize return value to [8, 13].  */\n+/* Verify we don't optimize return value to [3, 13].  */\n /* { dg-final { scan-tree-dump-not \"link_error \\\\(\\\\);\" \"optimized\" } } */\n /* { dg-final { scan-tree-dump \"bar \\\\(\\\\);\" \"optimized\" } } */"}]}