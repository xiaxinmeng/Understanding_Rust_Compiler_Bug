{"sha": "f65d32011500ab08d981d3927ca7d151b855861e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY1ZDMyMDExNTAwYWIwOGQ5ODFkMzkyN2NhN2QxNTFiODU1ODYxZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2004-07-01T14:49:29Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-07-01T14:49:29Z"}, "message": "Per Bothner <per@bothner.com > Mohan Embar <gnustuff@thisiscool.com>\n\n\n2004-07-01  Benjamin Kosnik  <bkoz@redhat.com>\n            Per Bothner  <per@bothner.com >\n\t    Mohan Embar  <gnustuff@thisiscool.com>\n\n\tPR libstdc++/16248\n\t* include/bits/concurrence.h (__glibcxx_mutex_type): New.\n\t(__glibcxx_mutex): Encapsulate mutex init function into type for\n\tthreaded configurations without __GTHREAD_MUTEX_INIT.\n\t(lock::lock): Make device member a reference.\n\t(lock::~lock): Same.\n\t* include/ext/pool_allocator.h (__pool_base::_M_get_mutex): Change\n\tto mutex_type.\n\t* src/allocator.cc: Same.\n\nCo-Authored-By: Mohan Embar <gnustuff@thisiscool.com>\nCo-Authored-By: Per Bothner <per@bothner.com>\n\nFrom-SVN: r83985", "tree": {"sha": "84fba1fc51e9a0c4e3e4895babf63448ac87b191", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84fba1fc51e9a0c4e3e4895babf63448ac87b191"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f65d32011500ab08d981d3927ca7d151b855861e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f65d32011500ab08d981d3927ca7d151b855861e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f65d32011500ab08d981d3927ca7d151b855861e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f65d32011500ab08d981d3927ca7d151b855861e/comments", "author": null, "committer": null, "parents": [{"sha": "60ba25bfc1c465184d34bae053b0d47161c20a76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60ba25bfc1c465184d34bae053b0d47161c20a76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60ba25bfc1c465184d34bae053b0d47161c20a76"}], "stats": {"total": 41, "additions": 31, "deletions": 10}, "files": [{"sha": "b645080172b39e001428a5124efb8cb42e938efa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f65d32011500ab08d981d3927ca7d151b855861e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f65d32011500ab08d981d3927ca7d151b855861e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f65d32011500ab08d981d3927ca7d151b855861e", "patch": "@@ -1,3 +1,17 @@\n+2004-07-01  Benjamin Kosnik  <bkoz@redhat.com>\n+            Per Bothner  <per@bothner.com >\n+\t    Mohan Embar  <gnustuff@thisiscool.com>\n+\n+\tPR libstdc++/16248\n+\t* include/bits/concurrence.h (__glibcxx_mutex_type): New.\n+\t(__glibcxx_mutex): Encapsulate mutex init function into type for\n+\tthreaded configurations without __GTHREAD_MUTEX_INIT.\n+\t(lock::lock): Make device member a reference.\n+\t(lock::~lock): Same.\n+\t* include/ext/pool_allocator.h (__pool_base::_M_get_mutex): Change\n+\tto mutex_type.\n+\t* src/allocator.cc: Same.\n+\t\n 2004-06-30  Brad Spencer  <spencer@infointeractive.com>\n \n \t* include/ext/mt_allocator.h: Handle allocations at static"}, {"sha": "7b2fae951c6fa801713333e23375f1e1e649b240", "filename": "libstdc++-v3/include/bits/concurrence.h", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f65d32011500ab08d981d3927ca7d151b855861e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fconcurrence.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f65d32011500ab08d981d3927ca7d151b855861e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fconcurrence.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fconcurrence.h?ref=f65d32011500ab08d981d3927ca7d151b855861e", "patch": "@@ -37,25 +37,30 @@\n #if __GTHREADS\n \n # ifdef __GTHREAD_MUTEX_INIT\n+#  define __glibcxx_mutex_type __gthread_mutex_t\n #  define __glibcxx_mutex_define_initialized(NAME) \\\n __gthread_mutex_t NAME = __GTHREAD_MUTEX_INIT\n #  define __glibcxx_mutex_lock(NAME) \\\n __gthread_mutex_lock(&NAME)\n # else\n // Implies __GTHREAD_MUTEX_INIT_FUNCTION\n+struct __glibcxx_mutex : public __gthread_mutex_t\n+{\n+   __glibcxx_mutex() { __GTHREAD_MUTEX_INIT_FUNCTION(this); }\n+};\n+\n+#  define __glibcxx_mutex_type __glibcxx_mutex\n #  define __glibcxx_mutex_define_initialized(NAME) \\\n-__gthread_mutex_t NAME; \\\n-__gthread_once_t NAME ## _once = __GTHREAD_ONCE_INIT; \\\n-void NAME ## _init() { __GTHREAD_MUTEX_INIT_FUNCTION(&NAME); }\n+__glibcxx_mutex NAME\n # define __glibcxx_mutex_lock(NAME) \\\n-__gthread_once(&NAME ## _once, NAME ## _init); \\\n __gthread_mutex_lock(&NAME)\n # endif\n \n # define __glibcxx_mutex_unlock(NAME) __gthread_mutex_unlock(&NAME)\n \n #else\n \n+# define __glibcxx_mutex_type __gthread_mutex_t\n # define __glibcxx_mutex_define_initialized(NAME) __gthread_mutex_t NAME\n # define __glibcxx_mutex_lock(NAME)\n # define __glibcxx_mutex_unlock(NAME)\n@@ -64,19 +69,21 @@ __gthread_mutex_lock(&NAME)\n \n namespace __gnu_cxx\n {\n+  typedef __glibcxx_mutex_type mutex_type;\n+  \n   class lock\n   {\n     // Externally defined and initialized.\n-    __gthread_mutex_t* device;\n+    mutex_type& device;\n \n   public:\n     // Acquire the mutex here with a constructor call.  This ensures\n     // that it is released in exit or during stack unwinding.\n-    explicit lock(__gthread_mutex_t& name) : device(&name)\n-    { __glibcxx_mutex_lock(*device); }\n+    explicit lock(mutex_type& name) : device(name)\n+    { __glibcxx_mutex_lock(device); }\n \n     ~lock() throw()\n-    { __glibcxx_mutex_unlock(*device); }\n+    { __glibcxx_mutex_unlock(device); }\n \n   private:\n     lock(const lock&);"}, {"sha": "eec79e7070a0e4bc7ec9e14d04683f90411e543f", "filename": "libstdc++-v3/include/ext/pool_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f65d32011500ab08d981d3927ca7d151b855861e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f65d32011500ab08d981d3927ca7d151b855861e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h?ref=f65d32011500ab08d981d3927ca7d151b855861e", "patch": "@@ -100,7 +100,7 @@ namespace __gnu_cxx\n       _Obj* volatile*\n       _M_get_free_list(size_t __bytes);\n     \n-      __gthread_mutex_t&\n+      mutex_type&\n       _M_get_mutex();\n \n       // Returns an object of size __n, and optionally adds to size __n"}, {"sha": "e35aa3eef16f02e338a9823903c759e4219636d8", "filename": "libstdc++-v3/src/allocator.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f65d32011500ab08d981d3927ca7d151b855861e/libstdc%2B%2B-v3%2Fsrc%2Fallocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f65d32011500ab08d981d3927ca7d151b855861e/libstdc%2B%2B-v3%2Fsrc%2Fallocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fallocator.cc?ref=f65d32011500ab08d981d3927ca7d151b855861e", "patch": "@@ -51,7 +51,7 @@ namespace __gnu_cxx\n     return _S_free_list + __i;\n   }\n \n-  __gthread_mutex_t&\n+  mutex_type&\n   __pool_base::_M_get_mutex()\n   { return __gnu_internal::palloc_init_mutex; }\n "}]}