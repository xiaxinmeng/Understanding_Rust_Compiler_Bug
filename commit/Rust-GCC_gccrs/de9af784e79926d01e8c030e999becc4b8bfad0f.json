{"sha": "de9af784e79926d01e8c030e999becc4b8bfad0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU5YWY3ODRlNzk5MjZkMDFlOGMwMzBlOTk5YmVjYzRiOGJmYWQwZg==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-23T09:13:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-23T09:13:59Z"}, "message": "Merge #380\n\n380: Fix issues about block expression evaluation r=philberty a=lrh2000\n\nI've tried my best to split https://github.com/Rust-GCC/gccrs/pull/364. Its core part is here. All unrelated fixes should have been removed and I will make them separate PRs, but this PR still has to contain 2 commits and introduce limited support for the never type.\r\n\r\nhttps://github.com/Rust-GCC/gccrs/blob/935aff52a66a70e1e96f0a6aa7e0ad37eda3f93c/gcc/testsuite/rust.test/compile/deadcode1.rs#L7-L15\r\n\r\nhttps://github.com/Rust-GCC/gccrs/blob/935aff52a66a70e1e96f0a6aa7e0ad37eda3f93c/gcc/testsuite/rust.test/compile/implicit_returns1.rs#L44-L50\r\n\r\nThe reason is that the above two tests failed to pass simultaneously after the first commit. The first test requires the `if/else` expression resolves to `()` but the second test requires the `if/else` expression resolves to `<integer>`. They are conflicted.\r\n\r\nI wonder whether or not this PR is OK, and anyway thanks for your review.\n\nCo-authored-by: lrh2000 <lrh2000@pku.edu.cn>", "tree": {"sha": "eec0947af5d1e9bcbddb29c3b1935136d1948e98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eec0947af5d1e9bcbddb29c3b1935136d1948e98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de9af784e79926d01e8c030e999becc4b8bfad0f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJggo/XCRBK7hj4Ov3rIwAAPOIIAH2pjm0yDjqgPfnzXcqMSmAO\ngyhqrItavuTN22Ts4obd9CcGShlSGd8FGKRnHvUfoiMixPz7mKrYyUcKie6+LRlP\npjOzF/pbpguDy7sYYPeIaUxXHzrWU1TFhmCF12j5iZiOxDvRUq3o0V7QWKBX1LSc\nWY77pYtw86tFa3Z9rltcmstKQ3+rAHZ7LkJGarlWSo6DGnHE2DgTMOAJ3RR00d2g\nkMB/TxdNWBRw20JBpC3umIiLw0QR2w9S0rjqrGRG3MYqAbl9wlFA+SUc2dygKBU/\nGSCIJx7DTCNYMDhSm5Gzq7kP/94VCN7sJflRdsS3p5+DSxfpLgiueYPZAs7DMqU=\n=fkbH\n-----END PGP SIGNATURE-----\n", "payload": "tree eec0947af5d1e9bcbddb29c3b1935136d1948e98\nparent dd3c58b2ce55ce6585916607927c3bca087610c6\nparent 28895c1265e19a3e854040610d8478cfb8768d0a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1619169239 +0000\ncommitter GitHub <noreply@github.com> 1619169239 +0000\n\nMerge #380\n\n380: Fix issues about block expression evaluation r=philberty a=lrh2000\n\nI've tried my best to split https://github.com/Rust-GCC/gccrs/pull/364. Its core part is here. All unrelated fixes should have been removed and I will make them separate PRs, but this PR still has to contain 2 commits and introduce limited support for the never type.\r\n\r\nhttps://github.com/Rust-GCC/gccrs/blob/935aff52a66a70e1e96f0a6aa7e0ad37eda3f93c/gcc/testsuite/rust.test/compile/deadcode1.rs#L7-L15\r\n\r\nhttps://github.com/Rust-GCC/gccrs/blob/935aff52a66a70e1e96f0a6aa7e0ad37eda3f93c/gcc/testsuite/rust.test/compile/implicit_returns1.rs#L44-L50\r\n\r\nThe reason is that the above two tests failed to pass simultaneously after the first commit. The first test requires the `if/else` expression resolves to `()` but the second test requires the `if/else` expression resolves to `<integer>`. They are conflicted.\r\n\r\nI wonder whether or not this PR is OK, and anyway thanks for your review.\n\nCo-authored-by: lrh2000 <lrh2000@pku.edu.cn>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de9af784e79926d01e8c030e999becc4b8bfad0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de9af784e79926d01e8c030e999becc4b8bfad0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de9af784e79926d01e8c030e999becc4b8bfad0f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd3c58b2ce55ce6585916607927c3bca087610c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd3c58b2ce55ce6585916607927c3bca087610c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd3c58b2ce55ce6585916607927c3bca087610c6"}, {"sha": "28895c1265e19a3e854040610d8478cfb8768d0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28895c1265e19a3e854040610d8478cfb8768d0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28895c1265e19a3e854040610d8478cfb8768d0a"}], "stats": {"total": 517, "additions": 421, "deletions": 96}, "files": [{"sha": "eb56b657983c35884a7755a7db86a1c790a62cb0", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -2828,7 +2828,7 @@ class BlockExpr : public ExprWithBlock\n   std::vector<Attribute> outer_attrs;\n   std::vector<Attribute> inner_attrs;\n   std::vector<std::unique_ptr<Stmt> > statements;\n-  std::unique_ptr<ExprWithoutBlock> expr;\n+  std::unique_ptr<Expr> expr;\n   Location locus;\n   bool marked_for_strip = false;\n \n@@ -2842,7 +2842,7 @@ class BlockExpr : public ExprWithBlock\n   bool has_tail_expr () const { return expr != nullptr; }\n \n   BlockExpr (std::vector<std::unique_ptr<Stmt> > block_statements,\n-\t     std::unique_ptr<ExprWithoutBlock> block_expr,\n+\t     std::unique_ptr<Expr> block_expr,\n \t     std::vector<Attribute> inner_attribs,\n \t     std::vector<Attribute> outer_attribs, Location locus)\n     : outer_attrs (std::move (outer_attribs)),\n@@ -2859,7 +2859,7 @@ class BlockExpr : public ExprWithBlock\n   {\n     // guard to protect from null pointer dereference\n     if (other.expr != nullptr)\n-      expr = other.expr->clone_expr_without_block ();\n+      expr = other.expr->clone_expr ();\n \n     statements.reserve (other.statements.size ());\n     for (const auto &e : other.statements)\n@@ -2877,7 +2877,7 @@ class BlockExpr : public ExprWithBlock\n \n     // guard to protect from null pointer dereference\n     if (other.expr != nullptr)\n-      expr = other.expr->clone_expr_without_block ();\n+      expr = other.expr->clone_expr ();\n     else\n       expr = nullptr;\n \n@@ -2929,7 +2929,7 @@ class BlockExpr : public ExprWithBlock\n   std::vector<std::unique_ptr<Stmt> > &get_statements () { return statements; }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n-  std::unique_ptr<ExprWithoutBlock> &get_tail_expr ()\n+  std::unique_ptr<Expr> &get_tail_expr ()\n   {\n     rust_assert (has_tail_expr ());\n     return expr;"}, {"sha": "72946774a1f35167efa596432a03c7f55cdec303", "filename": "gcc/rust/ast/rust-stmt.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Fast%2Frust-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Fast%2Frust-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-stmt.h?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -269,14 +269,17 @@ class ExprStmtWithoutBlock : public ExprStmt\n class ExprStmtWithBlock : public ExprStmt\n {\n   std::unique_ptr<ExprWithBlock> expr;\n+  bool semicolon_followed;\n \n public:\n   std::string as_string () const override;\n \n   std::vector<LetStmt *> locals;\n \n-  ExprStmtWithBlock (std::unique_ptr<ExprWithBlock> expr, Location locus)\n-    : ExprStmt (locus), expr (std::move (expr))\n+  ExprStmtWithBlock (std::unique_ptr<ExprWithBlock> expr, Location locus,\n+\t\t     bool semicolon_followed)\n+    : ExprStmt (locus), expr (std::move (expr)),\n+      semicolon_followed (semicolon_followed)\n   {}\n \n   // Copy constructor with clone\n@@ -318,6 +321,8 @@ class ExprStmtWithBlock : public ExprStmt\n     return expr;\n   }\n \n+  bool is_semicolon_followed () const { return semicolon_followed; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "11e791c065180511d404429820b2be6b5007d6c2", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -501,6 +501,11 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n     translated = compiled_type;\n   }\n \n+  void visit (TyTy::NeverType &) override\n+  {\n+    translated = ctx->get_backend ()->void_type ();\n+  }\n+\n private:\n   TyTyResolveCompile (Context *ctx) : ctx (ctx), translated (nullptr) {}\n "}, {"sha": "ba98ac014529f8aa622f0f6d6631d5db3d6b1304", "filename": "gcc/rust/backend/rust-compile-tyty.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -222,6 +222,11 @@ class TyTyCompile : public TyTy::TyVisitor\n       = backend->named_type (\"str\", raw_str, Linemap::predeclared_location ());\n   }\n \n+  void visit (TyTy::NeverType &) override\n+  {\n+    translated = backend->void_type ();\n+  }\n+\n private:\n   TyTyCompile (::Backend *backend)\n     : backend (backend), translated (nullptr),"}, {"sha": "9375dd021f45ba9eba57a2034ef1f59fdea317af", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -256,7 +256,7 @@ CompileBlock::visit (HIR::BlockExpr &expr)\n \t}\n     }\n \n-  if (expr.has_expr () && expr.tail_expr_reachable ())\n+  if (expr.has_expr ())\n     {\n       // the previous passes will ensure this is a valid return\n       // dead code elimination should remove any bad trailing expressions\n@@ -410,15 +410,14 @@ HIRCompileBase::compile_function_body (\n \t}\n     }\n \n-  if (function_body->has_expr () && function_body->tail_expr_reachable ())\n+  if (function_body->has_expr ())\n     {\n       // the previous passes will ensure this is a valid return\n       // dead code elimination should remove any bad trailing expressions\n       Bexpression *compiled_expr\n \t= CompileExpr::Compile (function_body->expr.get (), ctx);\n-      rust_assert (compiled_expr != nullptr);\n \n-      if (has_return_type)\n+      if (has_return_type && compiled_expr)\n \t{\n \t  std::vector<Bexpression *> retstmts;\n \t  retstmts.push_back (compiled_expr);\n@@ -428,7 +427,7 @@ HIRCompileBase::compile_function_body (\n \t    function_body->get_final_expr ()->get_locus_slow ());\n \t  ctx->add_statement (ret);\n \t}\n-      else\n+      else if (compiled_expr)\n \t{\n \t  Bstatement *final_stmt\n \t    = ctx->get_backend ()->expression_statement (fndecl, compiled_expr);"}, {"sha": "2d3f59d8cf71b390213650f997831163f2da0ac0", "filename": "gcc/rust/hir/rust-ast-lower-stmt.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -59,7 +59,8 @@ class ASTLoweringStmt : public ASTLoweringBase\n     translated\n       = new HIR::ExprStmtWithBlock (mapping,\n \t\t\t\t    std::unique_ptr<HIR::ExprWithBlock> (expr),\n-\t\t\t\t    stmt.get_locus ());\n+\t\t\t\t    stmt.get_locus (),\n+\t\t\t\t    !stmt.is_semicolon_followed ());\n     mappings->insert_location (crate_num, mapping.get_hirid (),\n \t\t\t       stmt.get_locus ());\n     mappings->insert_hir_stmt (crate_num, mapping.get_hirid (), translated);"}, {"sha": "86b10d5b39c95061222b120b548dc04660c4097a", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -90,7 +90,7 @@ ASTLoweringBlock::visit (AST::BlockExpr &expr)\n     return true;\n   });\n \n-  bool tail_reachable = expr.has_tail_expr () && !block_did_terminate;\n+  bool tail_reachable = !block_did_terminate;\n   if (expr.has_tail_expr () && block_did_terminate)\n     {\n       // warning unreachable tail expressions"}, {"sha": "50f1eb81e9190e0139a123ab80ce0b27d52697d6", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -2489,7 +2489,7 @@ class BlockExpr : public ExprWithBlock\n   std::vector<Attribute> inner_attrs;\n \n   std::vector<std::unique_ptr<Stmt> > statements;\n-  std::unique_ptr<ExprWithoutBlock> expr; // inlined from Statements\n+  std::unique_ptr<Expr> expr; // inlined from Statements\n \n   bool tail_reachable;\n   Location locus;\n@@ -2502,11 +2502,11 @@ class BlockExpr : public ExprWithBlock\n   // Returns whether the block contains an expression\n   bool has_expr () const { return expr != nullptr; }\n \n-  bool tail_expr_reachable () const { return tail_reachable; }\n+  bool is_tail_reachable () const { return tail_reachable; }\n \n   BlockExpr (Analysis::NodeMapping mappings,\n \t     std::vector<std::unique_ptr<Stmt> > block_statements,\n-\t     std::unique_ptr<ExprWithoutBlock> block_expr, bool tail_reachable,\n+\t     std::unique_ptr<Expr> block_expr, bool tail_reachable,\n \t     std::vector<Attribute> inner_attribs,\n \t     std::vector<Attribute> outer_attribs, Location locus)\n     : ExprWithBlock (std::move (mappings), std::move (outer_attribs)),\n@@ -2522,7 +2522,7 @@ class BlockExpr : public ExprWithBlock\n   {\n     // guard to protect from null pointer dereference\n     if (other.expr != nullptr)\n-      expr = other.expr->clone_expr_without_block ();\n+      expr = other.expr->clone_expr ();\n \n     statements.reserve (other.statements.size ());\n     for (const auto &e : other.statements)\n@@ -2534,7 +2534,7 @@ class BlockExpr : public ExprWithBlock\n   {\n     ExprWithBlock::operator= (other);\n     // statements = other.statements;\n-    expr = other.expr->clone_expr_without_block ();\n+    expr = other.expr->clone_expr ();\n     inner_attrs = other.inner_attrs;\n     locus = other.locus;\n     // outer_attrs = other.outer_attrs;\n@@ -2580,7 +2580,7 @@ class BlockExpr : public ExprWithBlock\n     return statements[statements.size () - 1]->get_locus_slow ();\n   }\n \n-  std::unique_ptr<ExprWithoutBlock> &get_final_expr () { return expr; }\n+  std::unique_ptr<Expr> &get_final_expr () { return expr; }\n \n   std::vector<std::unique_ptr<Stmt> > &get_statements () { return statements; }\n "}, {"sha": "e34fa7e8d99d7ee1002377319a7663e34fbec31e", "filename": "gcc/rust/hir/tree/rust-hir-stmt.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -193,13 +193,16 @@ class ExprStmtWithoutBlock : public ExprStmt\n class ExprStmtWithBlock : public ExprStmt\n {\n   std::unique_ptr<ExprWithBlock> expr;\n+  bool must_be_unit;\n \n public:\n   std::string as_string () const override;\n \n   ExprStmtWithBlock (Analysis::NodeMapping mappings,\n-\t\t     std::unique_ptr<ExprWithBlock> expr, Location locus)\n-    : ExprStmt (std::move (mappings), locus), expr (std::move (expr))\n+\t\t     std::unique_ptr<ExprWithBlock> expr, Location locus,\n+\t\t     bool must_be_unit)\n+    : ExprStmt (std::move (mappings), locus), expr (std::move (expr)),\n+      must_be_unit (must_be_unit)\n   {}\n \n   // Copy constructor with clone\n@@ -224,6 +227,8 @@ class ExprStmtWithBlock : public ExprStmt\n \n   ExprWithBlock *get_expr () { return expr.get (); }\n \n+  bool is_unit_check_needed () const override { return must_be_unit; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "9bda63a7ddcb59260f251279f88e6d63474175a1", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -723,6 +723,8 @@ class Stmt\n    * methods. */\n   virtual Location get_locus_slow () const { return Location (); }\n \n+  virtual bool is_unit_check_needed () const { return false; }\n+\n   const Analysis::NodeMapping &get_mappings () const { return mappings; }\n \n protected:"}, {"sha": "6d38ace7825c179167c4d4af53de2bb25b541ed9", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 44, "deletions": 17, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -7022,11 +7022,9 @@ Parser<ManagedTokenSource>::parse_expr_stmt (\n     }\n }\n \n-/* Parses a expression statement containing an expression with block.\n- * Disambiguates internally. */\n template <typename ManagedTokenSource>\n-std::unique_ptr<AST::ExprStmtWithBlock>\n-Parser<ManagedTokenSource>::parse_expr_stmt_with_block (\n+std::unique_ptr<AST::ExprWithBlock>\n+Parser<ManagedTokenSource>::parse_expr_with_block (\n   std::vector<AST::Attribute> outer_attrs)\n {\n   std::unique_ptr<AST::ExprWithBlock> expr_parsed = nullptr;\n@@ -7113,9 +7111,23 @@ Parser<ManagedTokenSource>::parse_expr_stmt_with_block (\n       return nullptr;\n     }\n \n+  return expr_parsed;\n+}\n+\n+/* Parses a expression statement containing an expression with block.\n+ * Disambiguates internally. */\n+template <typename ManagedTokenSource>\n+std::unique_ptr<AST::ExprStmtWithBlock>\n+Parser<ManagedTokenSource>::parse_expr_stmt_with_block (\n+  std::vector<AST::Attribute> outer_attrs)\n+{\n+  auto expr_parsed = parse_expr_with_block (std::move (outer_attrs));\n+  auto locus = expr_parsed->get_locus ();\n+\n   // return expr stmt created from expr\n   return std::unique_ptr<AST::ExprStmtWithBlock> (\n-    new AST::ExprStmtWithBlock (std::move (expr_parsed), t->get_locus ()));\n+    new AST::ExprStmtWithBlock (std::move (expr_parsed), locus,\n+\t\t\t\tlexer.peek_token ()->get_id () == SEMICOLON));\n }\n \n /* Parses an expression statement containing an expression without block.\n@@ -7286,7 +7298,7 @@ Parser<ManagedTokenSource>::parse_block_expr (\n \n   // parse statements and expression\n   std::vector<std::unique_ptr<AST::Stmt>> stmts;\n-  std::unique_ptr<AST::ExprWithoutBlock> expr = nullptr;\n+  std::unique_ptr<AST::Expr> expr = nullptr;\n \n   const_TokenPtr t = lexer.peek_token ();\n   while (t->get_id () != RIGHT_CURLY)\n@@ -11438,6 +11450,29 @@ Parser<ManagedTokenSource>::parse_struct_pattern_field_partial (\n     }\n }\n \n+template <typename ManagedTokenSource>\n+ExprOrStmt\n+Parser<ManagedTokenSource>::parse_stmt_or_expr_with_block (\n+  std::vector<AST::Attribute> outer_attrs)\n+{\n+  auto expr = parse_expr_with_block (std::move (outer_attrs));\n+  auto tok = lexer.peek_token ();\n+\n+  // tail expr in a block expr\n+  if (tok->get_id () == RIGHT_CURLY)\n+    return ExprOrStmt (std::move (expr));\n+\n+  // internal block expr must either have semicolons followed, or evaluate to ()\n+  auto locus = expr->get_locus_slow ();\n+  std::unique_ptr<AST::ExprStmtWithBlock> stmt (\n+    new AST::ExprStmtWithBlock (std::move (expr), locus,\n+\t\t\t\ttok->get_id () == SEMICOLON));\n+  if (tok->get_id () == SEMICOLON)\n+    lexer.skip_token ();\n+\n+  return ExprOrStmt (std::move (stmt));\n+}\n+\n /* Parses a statement or expression (depending on whether a trailing semicolon\n  * exists). Useful for block expressions where it cannot be determined through\n  * lookahead whether it is a statement or expression to be parsed. */\n@@ -11508,9 +11543,7 @@ Parser<ManagedTokenSource>::parse_stmt_or_expr_without_block ()\n \t  {\n \t    case LEFT_CURLY: {\n \t      // unsafe block\n-\t      std::unique_ptr<AST::ExprStmtWithBlock> stmt (\n-\t\tparse_expr_stmt_with_block (std::move (outer_attrs)));\n-\t      return ExprOrStmt (std::move (stmt));\n+\t      return parse_stmt_or_expr_with_block (std::move (outer_attrs));\n \t    }\n \t    case TRAIT: {\n \t      // unsafe trait\n@@ -11577,11 +11610,7 @@ Parser<ManagedTokenSource>::parse_stmt_or_expr_without_block ()\n     case MATCH_TOK:\n     case LEFT_CURLY:\n       case ASYNC: {\n-\t// all expressions with block, so cannot be final expr without block in\n-\t// function\n-\tstd::unique_ptr<AST::ExprStmtWithBlock> stmt (\n-\t  parse_expr_stmt_with_block (std::move (outer_attrs)));\n-\treturn ExprOrStmt (std::move (stmt));\n+\treturn parse_stmt_or_expr_with_block (std::move (outer_attrs));\n       }\n       case LIFETIME: {\n \t/* FIXME: are there any expressions without blocks that can have\n@@ -11592,9 +11621,7 @@ Parser<ManagedTokenSource>::parse_stmt_or_expr_without_block ()\n \t    && (t2->get_id () == LOOP || t2->get_id () == WHILE\n \t\t|| t2->get_id () == FOR))\n \t  {\n-\t    std::unique_ptr<AST::ExprStmtWithBlock> stmt (\n-\t      parse_expr_stmt_with_block (std::move (outer_attrs)));\n-\t    return ExprOrStmt (std::move (stmt));\n+\t    return parse_stmt_or_expr_with_block (std::move (outer_attrs));\n \t  }\n \telse\n \t  {"}, {"sha": "47f55ea65cb8756a75a76f2470fd56c1d79ae2be", "filename": "gcc/rust/parse/rust-parse.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Fparse%2Frust-parse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Fparse%2Frust-parse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse.h?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -27,17 +27,15 @@ namespace Rust {\n  * probably take up the same amount of space. */\n struct ExprOrStmt\n {\n-  std::unique_ptr<AST::ExprWithoutBlock> expr;\n+  std::unique_ptr<AST::Expr> expr;\n   std::unique_ptr<AST::Stmt> stmt;\n \n   /* I was going to resist the urge to make this a real class and make it POD,\n    * but construction in steps is too difficult. So it'll just also have a\n    * constructor. */\n \n   // expression constructor\n-  ExprOrStmt (std::unique_ptr<AST::ExprWithoutBlock> expr)\n-    : expr (std::move (expr))\n-  {}\n+  ExprOrStmt (std::unique_ptr<AST::Expr> expr) : expr (std::move (expr)) {}\n \n   // statement constructor\n   ExprOrStmt (std::unique_ptr<AST::Stmt> stmt) : stmt (std::move (stmt)) {}\n@@ -63,9 +61,7 @@ struct ExprOrStmt\n \n private:\n   // private constructor only used for creating error state expr or stmt objects\n-  ExprOrStmt (AST::ExprWithoutBlock *expr, AST::Stmt *stmt)\n-    : expr (expr), stmt (stmt)\n-  {}\n+  ExprOrStmt (AST::Expr *expr, AST::Stmt *stmt) : expr (expr), stmt (stmt) {}\n \n   // make this work: have a disambiguation specifically for known statements\n   // (i.e. ';' and 'let'). then, have a special \"parse expr or stmt\" function\n@@ -487,6 +483,8 @@ template <typename ManagedTokenSource> class Parser\n     ParseRestrictions restrictions = ParseRestrictions ());\n \n   // Expression-related (non-Pratt parsed)\n+  std::unique_ptr<AST::ExprWithBlock>\n+  parse_expr_with_block (std::vector<AST::Attribute> outer_attrs);\n   std::unique_ptr<AST::ExprWithoutBlock>\n   parse_expr_without_block (std::vector<AST::Attribute> outer_attrs\n \t\t\t    = std::vector<AST::Attribute> ());\n@@ -592,6 +590,8 @@ template <typename ManagedTokenSource> class Parser\n   parse_expr_stmt_without_block (std::vector<AST::Attribute> outer_attrs);\n   ExprOrStmt parse_stmt_or_expr_without_block ();\n   ExprOrStmt\n+  parse_stmt_or_expr_with_block (std::vector<AST::Attribute> outer_attrs);\n+  ExprOrStmt\n   parse_macro_invocation_maybe_semi (std::vector<AST::Attribute> outer_attrs);\n   ExprOrStmt\n   parse_path_based_stmt_or_expr (std::vector<AST::Attribute> outer_attrs);"}, {"sha": "4c030c587c6d6e1a1fbd5ec632de118ae1551c5e", "filename": "gcc/rust/typecheck/rust-hir-const-fold.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -183,6 +183,8 @@ class ConstFoldType : public TyTy::TyVisitor\n       = backend->named_type (\"str\", raw_str, Linemap::predeclared_location ());\n   }\n \n+  void visit (TyTy::NeverType &) override { gcc_unreachable (); }\n+\n private:\n   ConstFoldType (::Backend *backend)\n     : backend (backend), translated (backend->error_type ())"}, {"sha": "5643ad6180ce49fe16112c5c689abd45f20d3c9d", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -146,16 +146,15 @@ class TypeCheckExpr : public TypeCheckBase\n \n   void visit (HIR::ReturnExpr &expr) override\n   {\n-    if (!expr.has_return_expr ())\n-      {\n-\tinfered = new TyTy::TupleType (expr.get_mappings ().get_hirid ());\n-\treturn;\n-      }\n-\n     auto fn_return_tyty = context->peek_return_type ();\n     rust_assert (fn_return_tyty != nullptr);\n \n-    auto expr_ty = TypeCheckExpr::Resolve (expr.get_expr (), false);\n+    TyTy::BaseType *expr_ty;\n+    if (expr.has_return_expr ())\n+      expr_ty = TypeCheckExpr::Resolve (expr.get_expr (), false);\n+    else\n+      expr_ty = new TyTy::TupleType (expr.get_mappings ().get_hirid ());\n+\n     if (expr_ty == nullptr)\n       {\n \trust_error_at (expr.get_locus (),\n@@ -167,6 +166,8 @@ class TypeCheckExpr : public TypeCheckBase\n     fn_return_tyty->append_reference (expr_ty->get_ref ());\n     for (auto &ref : infered->get_combined_refs ())\n       fn_return_tyty->append_reference (ref);\n+\n+    infered = new TyTy::NeverType (expr.get_mappings ().get_hirid ());\n   }\n \n   void visit (HIR::CallExpr &expr) override\n@@ -623,17 +624,28 @@ class TypeCheckExpr : public TypeCheckBase\n     auto else_blk_resolved\n       = TypeCheckExpr::Resolve (expr.get_else_block (), inside_loop);\n \n-    infered = if_blk_resolved->unify (else_blk_resolved);\n+    if (if_blk_resolved->get_kind () == TyTy::NEVER)\n+      infered = else_blk_resolved;\n+    else if (else_blk_resolved->get_kind () == TyTy::NEVER)\n+      infered = if_blk_resolved;\n+    else\n+      infered = if_blk_resolved->unify (else_blk_resolved);\n   }\n \n   void visit (HIR::IfExprConseqIf &expr) override\n   {\n     TypeCheckExpr::Resolve (expr.get_if_condition (), false);\n-    auto if_blk = TypeCheckExpr::Resolve (expr.get_if_block (), inside_loop);\n-    auto else_blk\n+    auto if_blk_resolved\n+      = TypeCheckExpr::Resolve (expr.get_if_block (), inside_loop);\n+    auto else_blk_resolved\n       = TypeCheckExpr::Resolve (expr.get_conseq_if_expr (), inside_loop);\n \n-    infered = if_blk->unify (else_blk);\n+    if (if_blk_resolved->get_kind () == TyTy::NEVER)\n+      infered = else_blk_resolved;\n+    else if (else_blk_resolved->get_kind () == TyTy::NEVER)\n+      infered = if_blk_resolved;\n+    else\n+      infered = if_blk_resolved->unify (else_blk_resolved);\n   }\n \n   void visit (HIR::BlockExpr &expr) override;\n@@ -962,7 +974,7 @@ class TypeCheckExpr : public TypeCheckBase\n \tcontext->swap_head_loop_context (unified_ty);\n       }\n \n-    infered = new TyTy::TupleType (expr.get_mappings ().get_hirid ());\n+    infered = new TyTy::NeverType (expr.get_mappings ().get_hirid ());\n   }\n \n   void visit (HIR::ContinueExpr &expr) override\n@@ -974,7 +986,7 @@ class TypeCheckExpr : public TypeCheckBase\n \treturn;\n       }\n \n-    infered = new TyTy::TupleType (expr.get_mappings ().get_hirid ());\n+    infered = new TyTy::NeverType (expr.get_mappings ().get_hirid ());\n   }\n \n   void visit (HIR::BorrowExpr &expr) override"}, {"sha": "1205dceceee42660e91f7b7c84988df294eaa127", "filename": "gcc/rust/typecheck/rust-hir-type-check-item.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -82,7 +82,8 @@ class TypeCheckItem : public TypeCheckBase\n \n     context->pop_return_type ();\n \n-    expected_ret_tyty->unify (block_expr_ty);\n+    if (block_expr_ty->get_kind () != TyTy::NEVER)\n+      expected_ret_tyty->unify (block_expr_ty);\n   }\n \n private:"}, {"sha": "3484eeebdee53e5e1c3d69c6d117f2ad657e6d6f", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 10, "deletions": 23, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -124,44 +124,31 @@ TypeResolution::Resolve (HIR::Crate &crate)\n void\n TypeCheckExpr::visit (HIR::BlockExpr &expr)\n {\n-  TyTy::BaseType *block_tyty\n-    = new TyTy::TupleType (expr.get_mappings ().get_hirid ());\n-\n   expr.iterate_stmts ([&] (HIR::Stmt *s) mutable -> bool {\n-    bool is_final_stmt = expr.is_final_stmt (s);\n-    bool has_final_expr = expr.has_expr () && expr.tail_expr_reachable ();\n-    bool stmt_is_final_expr = is_final_stmt && !has_final_expr;\n-\n     auto resolved = TypeCheckStmt::Resolve (s, inside_loop);\n     if (resolved == nullptr)\n       {\n \trust_error_at (s->get_locus_slow (), \"failure to resolve type\");\n \treturn false;\n       }\n \n-    if (stmt_is_final_expr)\n-      {\n-\tdelete block_tyty;\n-\tblock_tyty = resolved;\n-      }\n-    else if (!resolved->is_unit ())\n+    if (s->is_unit_check_needed () && !resolved->is_unit ())\n       {\n-\trust_error_at (s->get_locus_slow (), \"expected () got %s\",\n-\t\t       resolved->as_string ().c_str ());\n+\tauto unit = new TyTy::TupleType (s->get_mappings ().get_hirid ());\n+\tresolved = unit->unify (resolved);\n       }\n \n     return true;\n   });\n \n   if (expr.has_expr ())\n-    {\n-      delete block_tyty;\n-\n-      block_tyty\n-\t= TypeCheckExpr::Resolve (expr.get_final_expr ().get (), inside_loop);\n-    }\n-\n-  infered = block_tyty->clone ();\n+    infered\n+      = TypeCheckExpr::Resolve (expr.get_final_expr ().get (), inside_loop)\n+\t  ->clone ();\n+  else if (expr.is_tail_reachable ())\n+    infered = new TyTy::TupleType (expr.get_mappings ().get_hirid ());\n+  else\n+    infered = new TyTy::NeverType (expr.get_mappings ().get_hirid ());\n }\n \n // RUST_HIR_TYPE_CHECK_STRUCT_FIELD"}, {"sha": "37a82c41608a278ddec8a8db5a2772d0606dd771", "filename": "gcc/rust/typecheck/rust-substitution-mapper.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -105,6 +105,7 @@ class SubstMapper : public TyTy::TyVisitor\n   void visit (TyTy::ReferenceType &) override { gcc_unreachable (); }\n   void visit (TyTy::ParamType &) override { gcc_unreachable (); }\n   void visit (TyTy::StrType &) override { gcc_unreachable (); }\n+  void visit (TyTy::NeverType &) override { gcc_unreachable (); }\n \n private:\n   SubstMapper (HirId ref, HIR::GenericArgs *generics, Location locus)\n@@ -163,6 +164,7 @@ class SubstMapperInternal : public TyTy::TyVisitor\n   void visit (TyTy::ReferenceType &) override { gcc_unreachable (); }\n   void visit (TyTy::ParamType &) override { gcc_unreachable (); }\n   void visit (TyTy::StrType &) override { gcc_unreachable (); }\n+  void visit (TyTy::NeverType &) override { gcc_unreachable (); }\n \n private:\n   SubstMapperInternal (HirId ref, TyTy::SubstitutionArgumentMappings &mappings)\n@@ -217,6 +219,7 @@ class SubstMapperFromExisting : public TyTy::TyVisitor\n   void visit (TyTy::ReferenceType &) override { gcc_unreachable (); }\n   void visit (TyTy::ParamType &) override { gcc_unreachable (); }\n   void visit (TyTy::StrType &) override { gcc_unreachable (); }\n+  void visit (TyTy::NeverType &) override { gcc_unreachable (); }\n \n private:\n   SubstMapperFromExisting (TyTy::BaseType *concrete, TyTy::BaseType *receiver)\n@@ -264,6 +267,7 @@ class GetUsedSubstArgs : public TyTy::TyVisitor\n   void visit (TyTy::ReferenceType &) override { gcc_unreachable (); }\n   void visit (TyTy::ParamType &) override { gcc_unreachable (); }\n   void visit (TyTy::StrType &) override { gcc_unreachable (); }\n+  void visit (TyTy::NeverType &) override { gcc_unreachable (); }\n \n private:\n   GetUsedSubstArgs () : args (TyTy::SubstitutionArgumentMappings::error ()) {}"}, {"sha": "2ab8abbdfcb101f6c082893b530ead67513d2ac9", "filename": "gcc/rust/typecheck/rust-tycheck-dump.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -107,7 +107,7 @@ class TypeResolverDump : public TypeCheckBase\n       return true;\n     });\n \n-    if (expr.has_expr () && expr.tail_expr_reachable ())\n+    if (expr.has_expr ())\n       {\n \tdump += indent ();\n \texpr.expr->accept_vis (*this);"}, {"sha": "2aba29803d94f06487e4d3356565e9c396c1db8e", "filename": "gcc/rust/typecheck/rust-tyty-call.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -53,6 +53,7 @@ class TypeCheckCallExpr : private TyVisitor\n   void visit (ReferenceType &type) override { gcc_unreachable (); }\n   void visit (ParamType &) override { gcc_unreachable (); }\n   void visit (StrType &) override { gcc_unreachable (); }\n+  void visit (NeverType &) override { gcc_unreachable (); }\n \n   // tuple-structs\n   void visit (ADTType &type) override;\n@@ -100,6 +101,7 @@ class TypeCheckMethodCallExpr : private TyVisitor\n   void visit (ReferenceType &type) override { gcc_unreachable (); }\n   void visit (ParamType &) override { gcc_unreachable (); }\n   void visit (StrType &) override { gcc_unreachable (); }\n+  void visit (NeverType &) override { gcc_unreachable (); }\n \n   // FIXME\n   void visit (FnPtr &type) override { gcc_unreachable (); }"}, {"sha": "1641264fe98ac7a0b876abf35347c6d64eec8d15", "filename": "gcc/rust/typecheck/rust-tyty-cmp.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -84,6 +84,8 @@ class BaseCmp : public TyVisitor\n \n   virtual void visit (StrType &) override { ok = false; }\n \n+  virtual void visit (NeverType &) override { ok = false; }\n+\n protected:\n   BaseCmp (BaseType *base)\n     : mappings (Analysis::Mappings::get ()),\n@@ -815,6 +817,21 @@ class StrCmp : public BaseCmp\n   StrType *base;\n };\n \n+class NeverCmp : public BaseCmp\n+{\n+  using Rust::TyTy::BaseCmp::visit;\n+\n+public:\n+  NeverCmp (NeverType *base) : BaseCmp (base), base (base) {}\n+\n+  void visit (NeverType &type) override { ok = true; }\n+\n+private:\n+  BaseType *get_base () override { return base; }\n+\n+  NeverType *base;\n+};\n+\n } // namespace TyTy\n } // namespace Rust\n "}, {"sha": "06bb33fc6de52c09fdb0b3ec5177db40a0ba8e00", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -296,6 +296,14 @@ class BaseRules : public TyVisitor\n \t\t   type.as_string ().c_str ());\n   }\n \n+  virtual void visit (NeverType &type) override\n+  {\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n+  }\n+\n protected:\n   BaseRules (BaseType *base)\n     : mappings (Analysis::Mappings::get ()),\n@@ -1142,6 +1150,21 @@ class StrRules : public BaseRules\n   StrType *base;\n };\n \n+class NeverRules : public BaseRules\n+{\n+  using Rust::TyTy::BaseRules::visit;\n+\n+public:\n+  NeverRules (NeverType *base) : BaseRules (base), base (base) {}\n+\n+  virtual void visit (NeverType &type) override { resolved = type.clone (); }\n+\n+private:\n+  BaseType *get_base () override { return base; }\n+\n+  NeverType *base;\n+};\n+\n } // namespace TyTy\n } // namespace Rust\n "}, {"sha": "0ed7eef35a652c89a09ac80d7b096c2c8b9189ea", "filename": "gcc/rust/typecheck/rust-tyty-visitor.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -44,6 +44,7 @@ class TyVisitor\n   virtual void visit (ReferenceType &type) = 0;\n   virtual void visit (ParamType &type) = 0;\n   virtual void visit (StrType &type) = 0;\n+  virtual void visit (NeverType &type) = 0;\n };\n \n } // namespace TyTy"}, {"sha": "baa997b000bda418c4c8201b3c1bda316b107cdd", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -1316,6 +1316,38 @@ StrType::is_equal (const BaseType &other) const\n   return get_kind () == other.get_kind ();\n }\n \n+void\n+NeverType::accept_vis (TyVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+std::string\n+NeverType::as_string () const\n+{\n+  return \"!\";\n+}\n+\n+BaseType *\n+NeverType::unify (BaseType *other)\n+{\n+  NeverRules r (this);\n+  return r.unify (other);\n+}\n+\n+bool\n+NeverType::can_eq (BaseType *other)\n+{\n+  NeverCmp r (this);\n+  return r.can_eq (other);\n+}\n+\n+BaseType *\n+NeverType::clone ()\n+{\n+  return new NeverType (get_ref (), get_ty_ref (), get_combined_refs ());\n+}\n+\n // rust-tyty-call.h\n \n void"}, {"sha": "bc4c9c49aa64c6fb9aa2f2cb8c4d6a50b2f35108", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -46,6 +46,7 @@ enum TypeKind\n   FLOAT,\n   USIZE,\n   ISIZE,\n+  NEVER,\n   // there are more to add...\n   ERROR\n };\n@@ -1228,6 +1229,41 @@ class StrType : public BaseType\n   BaseType *clone () final override;\n };\n \n+// https://doc.rust-lang.org/std/primitive.never.html\n+//\n+// Since the `!` type is really complicated and it is even still unstable\n+// in rustc, only fairly limited support for this type is introduced here.\n+// Unification between `!` and ANY other type (including `<T?>`) is simply\n+// not allowed. If it is needed, it should be handled manually. For example,\n+// unifying `!` with other types is very necessary when resolving types of\n+// `if/else` expressions.\n+//\n+// See related discussion at https://github.com/Rust-GCC/gccrs/pull/364\n+class NeverType : public BaseType\n+{\n+public:\n+  NeverType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n+    : BaseType (ref, ref, TypeKind::NEVER, refs)\n+  {}\n+\n+  NeverType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n+    : BaseType (ref, ty_ref, TypeKind::NEVER, refs)\n+  {}\n+\n+  void accept_vis (TyVisitor &vis) override;\n+\n+  std::string as_string () const override;\n+\n+  BaseType *unify (BaseType *other) override;\n+  bool can_eq (BaseType *other) override;\n+\n+  BaseType *clone () final override;\n+\n+  std::string get_name () const override final { return as_string (); }\n+\n+  bool is_unit () const override { return true; }\n+};\n+\n class TypeKindFormat\n {\n public:\n@@ -1283,6 +1319,9 @@ class TypeKindFormat\n       case TypeKind::ISIZE:\n \treturn \"Isize\";\n \n+      case TypeKind::NEVER:\n+\treturn \"Never\";\n+\n       case TypeKind::ERROR:\n \treturn \"ERROR\";\n       }"}, {"sha": "7e164a949bbf21a0bcbc97efb945a599a24d665d", "filename": "gcc/testsuite/rust.test/compile/block_expr5.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fblock_expr5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fblock_expr5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fblock_expr5.rs?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -0,0 +1,40 @@\n+fn foo() -> i32 {\n+    0\n+}\n+\n+fn bar() -> i32 {\n+    foo();\n+    foo()\n+}\n+\n+fn baz() -> i32 {\n+    {\n+        bar();\n+        bar();\n+    }\n+    {\n+        bar();\n+        bar()\n+    };\n+    {\n+        bar();\n+        bar()\n+    }\n+}\n+\n+fn test(ok: i32) -> i32 {\n+    if ok >= 1 {\n+        foo()\n+    } else if ok <= -1 {\n+        bar()\n+    } else {\n+        baz()\n+    }\n+}\n+\n+fn main() {\n+    let a = foo();\n+    let b = bar();\n+    let c = baz();\n+    test(a + b + c);\n+}"}, {"sha": "df1789e7bbe9fba26e464e5f837bbd0e5942009e", "filename": "gcc/testsuite/rust.test/compile/func1.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Ffunc1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Ffunc1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Ffunc1.rs?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -0,0 +1,7 @@\n+fn not_void() -> i32 {\n+    8\n+}\n+\n+fn main() {\n+    not_void();\n+}"}, {"sha": "f7dd556d955b21ee4aab4fd2845662f88852e0f7", "filename": "gcc/testsuite/rust.test/compile/func2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Ffunc2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Ffunc2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Ffunc2.rs?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -0,0 +1,20 @@\n+fn foo() {\n+    8;\n+    8;\n+}\n+\n+fn bar() -> i32 {\n+    8;\n+    8\n+}\n+\n+fn baz() -> i32 {\n+    8;\n+    return 8;\n+}\n+\n+fn main() {\n+    let a = foo(); // { dg-warning \"unused name\" }\n+    let b = bar(); // { dg-warning \"unused name\" }\n+    let c = baz(); // { dg-warning \"unused name\" }\n+}"}, {"sha": "0f15029097dacbe4a57cddace28c8607b1345b3a", "filename": "gcc/testsuite/rust.test/compile/never_type1.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fnever_type1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fnever_type1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fnever_type1.rs?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -0,0 +1,22 @@\n+fn foo() -> i32 {\n+    let c;\n+    let d;\n+\n+    c = if false {\n+        return 1;\n+    } else {\n+        0.0\n+    };\n+\n+    d = if true {\n+        0.0\n+    } else {\n+        return 1;\n+    };\n+\n+    0\n+}\n+\n+fn main() {\n+    foo();\n+}"}, {"sha": "b6aa56cc2e67c1fbee3395f0b755ea7cc6212de4", "filename": "gcc/testsuite/rust.test/compile/stmt_with_block1.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fstmt_with_block1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fstmt_with_block1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fstmt_with_block1.rs?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -0,0 +1,13 @@\n+fn test(x: i32) -> i32 {\n+    if x > 1 { 1 } else { 2 };\n+    if x > 1 { 1; } else { 2; }\n+\n+    { 3; }\n+    { 3 };\n+\n+    { 3 }\n+}\n+\n+fn main() {\n+    let a = test(0); // { dg-warning \"unused name\" }\n+}"}, {"sha": "0564aa1854ba45efe6803a04eb9e36016695357f", "filename": "gcc/testsuite/rust.test/compile/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Funused.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Funused.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Funused.rs?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -14,4 +14,4 @@ fn f() {\n \n fn main() {\n     f();\n-}\n\\ No newline at end of file\n+}"}, {"sha": "33053cf5fbcabf8e70a03481c368b79f694b1054", "filename": "gcc/testsuite/rust.test/xfail_compile/break1.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fbreak1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fbreak1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fbreak1.rs?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -1,7 +1,6 @@\n-// { dg-excess-errors \"Noisy error and debug\" }\n-fn main() { // { dg-error \"expected .... got .<tyty::error>.\" }\n+fn main() {\n     let a;\n     a = 1;\n-    break a; // { dg-error \"cannot `break` outside of a loop\"\n+    break a; // { dg-error \"cannot `break` outside of a loop\" }\n     // { dg-error \"failed to type resolve expression\" \"\" { target { *-*-* } } .-1 }\n }"}, {"sha": "6758a3898e308308d6c41306d8fa89952f8aed6a", "filename": "gcc/testsuite/rust.test/xfail_compile/func1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ffunc1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ffunc1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ffunc1.rs?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -1,4 +1,4 @@\n-fn test(x: i32) -> bool { // { dg-error \"expected .bool. got .<tyty::error>..\" }\n+fn test(x: i32) -> bool {\n     return x + 1; // { dg-error \"expected .bool. got .i32.\" }\n }\n "}, {"sha": "3b2d2b0d773a5080d67fb2bd5622e647964a704d", "filename": "gcc/testsuite/rust.test/xfail_compile/func4.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ffunc4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ffunc4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ffunc4.rs?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -0,0 +1,6 @@\n+fn func() -> i32 { // { dg-error \"expected .i32. got ....\" }\n+}\n+\n+fn main() {\n+    func();\n+}"}, {"sha": "05624f524e9416f857e7529c779d2e04a55e373a", "filename": "gcc/testsuite/rust.test/xfail_compile/func5.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ffunc5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ffunc5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ffunc5.rs?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -0,0 +1,7 @@\n+fn func() -> i32 {\n+    return; // { dg-error \"expected .i32. got ....\" }\n+}\n+\n+fn main() {\n+    func();\n+}"}, {"sha": "973ba80fb8662e01bf365668c4ea9b82c0985ed9", "filename": "gcc/testsuite/rust.test/xfail_compile/implicit_returns_err1.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fimplicit_returns_err1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fimplicit_returns_err1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fimplicit_returns_err1.rs?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -1,7 +1,5 @@\n-// { dg-error \"expected .* got .*\" \"\" { target { *-*-* } } 0 }\n-\n fn test(x: i32) -> i32 {\n-    if x > 1 {\n+    if x > 1 { // { dg-error \"expected .... got .<integer>.\" }\n         1\n     } else {\n         2"}, {"sha": "fb90748871f56a6792b7abf8417ab50a55c4d056", "filename": "gcc/testsuite/rust.test/xfail_compile/implicit_returns_err2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fimplicit_returns_err2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fimplicit_returns_err2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fimplicit_returns_err2.rs?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -1,6 +1,5 @@\n-// { dg-error \"expected .* got .*\" \"\" { target { *-*-* } } 0 }\n-\n fn test(x: i32) -> i32 {\n+    // { dg-error \"expected .i32. got .bool.\" \"\" { target *-*-* } .-1 }\n     return 1;\n     // { dg-warning \"unreachable expression\" \"\" { target *-*-* } .+1 }\n     true"}, {"sha": "37b1c62414c5d6753f87ed2f281889bdfa570f97", "filename": "gcc/testsuite/rust.test/xfail_compile/implicit_returns_err3.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fimplicit_returns_err3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fimplicit_returns_err3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fimplicit_returns_err3.rs?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -1,5 +1,4 @@\n-// { dg-error \"expected .* got .*\" \"\" { target { *-*-* } } 0 }\n-fn test(x: i32) -> i32 {\n+fn test(x: i32) -> i32 { // { dg-error \"expected .i32. got ....\" }\n     if x > 1 {\n         1\n     }"}, {"sha": "59c6a020d4c9cdda492ab8de573efd225d18e6e5", "filename": "gcc/testsuite/rust.test/xfail_compile/implicit_returns_err4.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fimplicit_returns_err4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fimplicit_returns_err4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fimplicit_returns_err4.rs?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -0,0 +1,10 @@\n+fn test(x: bool) -> bool {\n+    // { dg-error \"expected .bool. got ....\" \"\" { target *-*-*} .-1 }\n+    return x;\n+    // { dg-warning \"unreachable expression\" \"\" { target *-*-* } .+1 }\n+    ()\n+}\n+\n+fn main() {\n+    let a = test(true);\n+}"}, {"sha": "52b1283fadfe9624891abaa16d4c2ff1ca2dea6e", "filename": "gcc/testsuite/rust.test/xfail_compile/never_type_err1.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fnever_type_err1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fnever_type_err1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fnever_type_err1.rs?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -0,0 +1,14 @@\n+fn test() {\n+    let a;\n+\n+    // FIXME: Unimplemented features\n+    a = if true { // { dg-error \"expected .T.. got .!.\" }\n+        return;\n+    } else {\n+        return;\n+    };\n+}\n+\n+fn main() {\n+    test();\n+}"}, {"sha": "c94cb828071ff5817448bd85a8a498f0844bd8d4", "filename": "gcc/testsuite/rust.test/xfail_compile/never_type_err2.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fnever_type_err2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fnever_type_err2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fnever_type_err2.rs?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -0,0 +1,4 @@\n+// FIXME: Unimplemented features\n+fn foo() -> ! { // { dg-error \"unresolved type\" }\n+    let a: !; // { dg-error \"unresolved type\" }\n+}"}, {"sha": "8780d0feeac617483e15e8b2e74fee4c5bce4878", "filename": "gcc/testsuite/rust.test/xfail_compile/stmt_with_block_err1.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fstmt_with_block_err1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fstmt_with_block_err1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fstmt_with_block_err1.rs?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -0,0 +1,17 @@\n+fn test(x: i32) -> i32 {\n+    if x > 1 { // { dg-error \"expected .... got .<integer>.\" }\n+        1\n+    } else {\n+        2\n+    }\n+\n+    { // { dg-error \"expected .... got .<integer>.\" }\n+        3\n+    }\n+\n+    3\n+}\n+\n+fn main() {\n+    let a = test(0);\n+}"}, {"sha": "d0cb87d84ed658f8178924ffa2bda5d4684d3841", "filename": "gcc/testsuite/rust.test/xfail_compile/unsafe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Funsafe.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9af784e79926d01e8c030e999becc4b8bfad0f/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Funsafe.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Funsafe.rs?ref=de9af784e79926d01e8c030e999becc4b8bfad0f", "patch": "@@ -1,4 +1,5 @@\n fn main() { // { dg-ice \"#382\" }\n     unsafe {\n     }\n+    ()\n }"}]}