{"sha": "d84572a4009158fe24931e2f8d8a7aa496d8a570", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg0NTcyYTQwMDkxNThmZTI0OTMxZTJmOGQ4YTdhYTQ5NmQ4YTU3MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-06-20T14:39:53Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-06-20T14:39:53Z"}, "message": "re PR c++/43321 ([c++0x] ICE on valid auto)\n\n\tPR c++/43321\n\t* semantics.c (describable_type): Remove.\n\t* cp-tree.h: Likewise.\n\t* decl.c (cp_finish_decl): Don't call it.\n\t* init.c (build_new): Likewise.\n\t* parser.c (cp_parser_omp_for_loop): Likewise.\n\t* pt.c (tsubst_decl): Likewise.\n\t(do_auto_deduction): If we fail in a template, try again\n\tat instantiation time.\n\nFrom-SVN: r175212", "tree": {"sha": "ddd46f42a2c74e5fd3e577ca9e425f8c61baaaf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddd46f42a2c74e5fd3e577ca9e425f8c61baaaf8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d84572a4009158fe24931e2f8d8a7aa496d8a570", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d84572a4009158fe24931e2f8d8a7aa496d8a570", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d84572a4009158fe24931e2f8d8a7aa496d8a570", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d84572a4009158fe24931e2f8d8a7aa496d8a570/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4b7d9ed4a8e049e777252718c4cddb85fece7cde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b7d9ed4a8e049e777252718c4cddb85fece7cde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b7d9ed4a8e049e777252718c4cddb85fece7cde"}], "stats": {"total": 129, "additions": 52, "deletions": 77}, "files": [{"sha": "1746670c520ee8f53ca7f229b1f9614aa97e7fab", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d84572a4009158fe24931e2f8d8a7aa496d8a570/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d84572a4009158fe24931e2f8d8a7aa496d8a570/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d84572a4009158fe24931e2f8d8a7aa496d8a570", "patch": "@@ -1,5 +1,15 @@\n 2011-06-20  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/43321\n+\t* semantics.c (describable_type): Remove.\n+\t* cp-tree.h: Likewise.\n+\t* decl.c (cp_finish_decl): Don't call it.\n+\t* init.c (build_new): Likewise.\n+\t* parser.c (cp_parser_omp_for_loop): Likewise.\n+\t* pt.c (tsubst_decl): Likewise.\n+\t(do_auto_deduction): If we fail in a template, try again\n+\tat instantiation time.\n+\n \tPR c++/43831\n \t* parser.c (cp_parser_lambda_introducer): Complain about redundant\n \tcaptures."}, {"sha": "904e44c77b16076d2232ff30c31d77a27e7c130d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d84572a4009158fe24931e2f8d8a7aa496d8a570/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d84572a4009158fe24931e2f8d8a7aa496d8a570/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d84572a4009158fe24931e2f8d8a7aa496d8a570", "patch": "@@ -5445,7 +5445,6 @@ extern bool cxx_omp_create_clause_info\t\t(tree, tree, bool, bool, bool);\n extern tree baselink_for_fns                    (tree);\n extern void finish_static_assert                (tree, tree, location_t,\n                                                  bool);\n-extern tree describable_type\t\t\t(tree);\n extern tree finish_decltype_type                (tree, bool, tsubst_flags_t);\n extern tree finish_trait_expr\t\t\t(enum cp_trait_kind, tree, tree);\n extern tree build_lambda_expr                   (void);"}, {"sha": "85249f114804b3a33f5960290d576a2501b60243", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d84572a4009158fe24931e2f8d8a7aa496d8a570/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d84572a4009158fe24931e2f8d8a7aa496d8a570/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d84572a4009158fe24931e2f8d8a7aa496d8a570", "patch": "@@ -5944,13 +5944,10 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \td_init = build_x_compound_expr_from_list (d_init, ELK_INIT,\n \t\t\t\t\t\t  tf_warning_or_error);\n       d_init = resolve_nondeduced_context (d_init);\n-      if (describable_type (d_init))\n-\t{\n-\t  type = TREE_TYPE (decl) = do_auto_deduction (type, d_init,\n-\t\t\t\t\t\t       auto_node);\n-\t  if (type == error_mark_node)\n-\t    return;\n-\t}\n+      type = TREE_TYPE (decl) = do_auto_deduction (type, d_init,\n+\t\t\t\t\t\t   auto_node);\n+      if (type == error_mark_node)\n+\treturn;\n     }\n \n   if (!ensure_literal_type_for_constexpr_object (decl))"}, {"sha": "140e064b6599b9645d8a66b3642acd967038591e", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d84572a4009158fe24931e2f8d8a7aa496d8a570/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d84572a4009158fe24931e2f8d8a7aa496d8a570/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=d84572a4009158fe24931e2f8d8a7aa496d8a570", "patch": "@@ -2600,8 +2600,7 @@ build_new (VEC(tree,gc) **placement, tree type, tree nelts,\n \t{\n \t  tree d_init = VEC_index (tree, *init, 0);\n \t  d_init = resolve_nondeduced_context (d_init);\n-\t  if (describable_type (d_init))\n-\t    type = do_auto_deduction (type, d_init, auto_node);\n+\t  type = do_auto_deduction (type, d_init, auto_node);\n \t}\n     }\n "}, {"sha": "856a8a7b67c076dbb6721c203f1548d9d55297e3", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d84572a4009158fe24931e2f8d8a7aa496d8a570/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d84572a4009158fe24931e2f8d8a7aa496d8a570/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=d84572a4009158fe24931e2f8d8a7aa496d8a570", "patch": "@@ -24504,7 +24504,7 @@ cp_parser_omp_for_loop (cp_parser *parser, tree clauses, tree *par_clauses)\n \t\t\t\t\t\t    &is_direct_init,\n \t\t\t\t\t\t    &is_non_constant_init);\n \n-\t\t      if (auto_node && describable_type (init))\n+\t\t      if (auto_node)\n \t\t\t{\n \t\t\t  TREE_TYPE (decl)\n \t\t\t    = do_auto_deduction (TREE_TYPE (decl), init,"}, {"sha": "6f15101d6e921dc9029f659b3b6ec6c44454432a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d84572a4009158fe24931e2f8d8a7aa496d8a570/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d84572a4009158fe24931e2f8d8a7aa496d8a570/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=d84572a4009158fe24931e2f8d8a7aa496d8a570", "patch": "@@ -10122,11 +10122,8 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \t    if (auto_node && init)\n \t      {\n \t\tinit = resolve_nondeduced_context (init);\n-\t\tif (describable_type (init))\n-\t\t  {\n-\t\t    type = do_auto_deduction (type, init, auto_node);\n-\t\t    TREE_TYPE (r) = type;\n-\t\t  }\n+\t\tTREE_TYPE (r) = type\n+\t\t  = do_auto_deduction (type, init, auto_node);\n \t      }\n \t  }\n \telse\n@@ -19302,6 +19299,12 @@ do_auto_deduction (tree type, tree init, tree auto_node)\n   tree decl;\n   int val;\n \n+  if (processing_template_decl\n+      && (TREE_TYPE (init) == NULL_TREE\n+\t  || BRACE_ENCLOSED_INITIALIZER_P (init)))\n+    /* Not enough information to try this yet.  */\n+    return type;\n+\n   /* The name of the object being declared shall not appear in the\n      initializer expression.  */\n   decl = cp_walk_tree_without_duplicates (&init, contains_auto_r, type);\n@@ -19331,6 +19334,9 @@ do_auto_deduction (tree type, tree init, tree auto_node)\n \t\t\t       DEDUCE_CALL, LOOKUP_NORMAL);\n   if (val > 0)\n     {\n+      if (processing_template_decl)\n+\t/* Try again at instantiation time.  */\n+\treturn type;\n       if (type && type != error_mark_node)\n \t/* If type is error_mark_node a diagnostic must have been\n \t   emitted by now.  Also, having a mention to '<type error>'"}, {"sha": "cfe3959462eb56f6c80c93180ca3361c7bab620c", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d84572a4009158fe24931e2f8d8a7aa496d8a570/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d84572a4009158fe24931e2f8d8a7aa496d8a570/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=d84572a4009158fe24931e2f8d8a7aa496d8a570", "patch": "@@ -4803,65 +4803,6 @@ finish_static_assert (tree condition, tree message, location_t location,\n     }\n }\n \f\n-/* Returns the type of EXPR for cases where we can determine it even though\n-   EXPR is a type-dependent expression.  */\n-\n-tree\n-describable_type (tree expr)\n-{\n-  tree type = NULL_TREE;\n-\n-  if (! type_dependent_expression_p (expr)\n-      && ! type_unknown_p (expr))\n-    {\n-      type = unlowered_expr_type (expr);\n-      if (real_lvalue_p (expr))\n-\ttype = build_reference_type (type);\n-    }\n-\n-  if (type)\n-    return type;\n-\n-  switch (TREE_CODE (expr))\n-    {\n-    case VAR_DECL:\n-    case PARM_DECL:\n-    case RESULT_DECL:\n-    case FUNCTION_DECL:\n-      return TREE_TYPE (expr);\n-      break;\n-\n-    case NEW_EXPR:\n-    case CONST_DECL:\n-    case TEMPLATE_PARM_INDEX:\n-    case CAST_EXPR:\n-    case STATIC_CAST_EXPR:\n-    case REINTERPRET_CAST_EXPR:\n-    case CONST_CAST_EXPR:\n-    case DYNAMIC_CAST_EXPR:\n-      type = TREE_TYPE (expr);\n-      break;\n-\n-    case INDIRECT_REF:\n-      {\n-\ttree ptrtype = describable_type (TREE_OPERAND (expr, 0));\n-\tif (ptrtype && POINTER_TYPE_P (ptrtype))\n-\t  type = build_reference_type (TREE_TYPE (ptrtype));\n-      }\n-      break;\n-\n-    default:\n-      if (TREE_CODE_CLASS (TREE_CODE (expr)) == tcc_constant)\n-\ttype = TREE_TYPE (expr);\n-      break;\n-    }\n-\n-  if (type && type_uses_auto (type))\n-    return NULL_TREE;\n-  else\n-    return type;\n-}\n-\n /* Implements the C++0x decltype keyword. Returns the type of EXPR,\n    suitable for use as a type-specifier.\n "}, {"sha": "7af76b1be7614e45a094a71d1fe867fbeaf274c3", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d84572a4009158fe24931e2f8d8a7aa496d8a570/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d84572a4009158fe24931e2f8d8a7aa496d8a570/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=d84572a4009158fe24931e2f8d8a7aa496d8a570", "patch": "@@ -2681,8 +2681,7 @@ build_x_indirect_ref (tree expr, ref_operator errorstring,\n \n   if (processing_template_decl)\n     {\n-      /* Retain the type if we know the operand is a pointer so that\n-\t describable_type doesn't make auto deduction break.  */\n+      /* Retain the type if we know the operand is a pointer.  */\n       if (TREE_TYPE (expr) && POINTER_TYPE_P (TREE_TYPE (expr)))\n \treturn build_min (INDIRECT_REF, TREE_TYPE (TREE_TYPE (expr)), expr);\n       if (type_dependent_expression_p (expr))"}, {"sha": "6bfc81b0838de9167123056072e054d279fcb5e1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d84572a4009158fe24931e2f8d8a7aa496d8a570/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d84572a4009158fe24931e2f8d8a7aa496d8a570/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d84572a4009158fe24931e2f8d8a7aa496d8a570", "patch": "@@ -1,5 +1,8 @@\n 2011-06-20  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/43321\n+\t* g++.dg/cpp0x/auto26.C: New.\n+\n \tPR c++/43831\n \t* g++.dg/cpp0x/lambda/lambda-capture-reduncancy.C: New.\n "}, {"sha": "6e55aa451acddfc02737925d3c2605e502e4e0c7", "filename": "gcc/testsuite/g++.dg/cpp0x/auto26.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d84572a4009158fe24931e2f8d8a7aa496d8a570/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d84572a4009158fe24931e2f8d8a7aa496d8a570/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto26.C?ref=d84572a4009158fe24931e2f8d8a7aa496d8a570", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/43321\n+// { dg-options -std=c++0x }\n+\n+template <class T>\n+void f(T t)\n+{\n+  auto *p = t;\n+}\n+\n+template <class T>\n+void g(const T& tr)\n+{\n+  auto p = *tr;\n+}\n+\n+int main()\n+{\n+  int b;\n+  f(&b);\n+  g(&b);\n+}"}]}