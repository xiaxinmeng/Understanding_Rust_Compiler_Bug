{"sha": "964ef24cd591632a38c3e48154de389470df13df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY0ZWYyNGNkNTkxNjMyYTM4YzNlNDgxNTRkZTM4OTQ3MGRmMTNkZg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-11-04T08:54:42Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-11-04T08:54:42Z"}, "message": "re PR tree-optimization/78185 (Wrong branch optimization with -O1 on x86/x86_64)\n\n2016-11-04  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/78185\n\t* loop-invariant.c (find_exits): Record entering inner\n\tloops as possibly exiting to handle infinite sub-loops.\n\t* tree-ssa-loop-im.c: Include tree-ssa-loop-niter.h.\n\t(fill_always_executed_in_1): Honor infinite child loops.\n\n\t* gcc.dg/pr78185.c: New testcase.\n\nFrom-SVN: r241841", "tree": {"sha": "1b2211b7c396c888eb15aa2da13e53fad2848ab5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b2211b7c396c888eb15aa2da13e53fad2848ab5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/964ef24cd591632a38c3e48154de389470df13df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/964ef24cd591632a38c3e48154de389470df13df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/964ef24cd591632a38c3e48154de389470df13df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/964ef24cd591632a38c3e48154de389470df13df/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b07aafb1ace3bf542acf3884bddf014d0d466ef3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b07aafb1ace3bf542acf3884bddf014d0d466ef3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b07aafb1ace3bf542acf3884bddf014d0d466ef3"}], "stats": {"total": 72, "additions": 63, "deletions": 9}, "files": [{"sha": "8a455c1e1ef9cfb842762e5fa39b95a9f96ed42b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/964ef24cd591632a38c3e48154de389470df13df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/964ef24cd591632a38c3e48154de389470df13df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=964ef24cd591632a38c3e48154de389470df13df", "patch": "@@ -1,3 +1,11 @@\n+2016-11-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/78185\n+\t* loop-invariant.c (find_exits): Record entering inner\n+\tloops as possibly exiting to handle infinite sub-loops.\n+\t* tree-ssa-loop-im.c: Include tree-ssa-loop-niter.h.\n+\t(fill_always_executed_in_1): Honor infinite child loops.\n+\n 2016-11-03  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/78192"}, {"sha": "f617241ef0fc467db19e21c6fce8e7300ac1817b", "filename": "gcc/loop-invariant.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/964ef24cd591632a38c3e48154de389470df13df/gcc%2Floop-invariant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/964ef24cd591632a38c3e48154de389470df13df/gcc%2Floop-invariant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-invariant.c?ref=964ef24cd591632a38c3e48154de389470df13df", "patch": "@@ -598,13 +598,17 @@ find_exits (struct loop *loop, basic_block *body,\n \n \t  FOR_EACH_EDGE (e, ei, body[i]->succs)\n \t    {\n-\t      if (flow_bb_inside_loop_p (loop, e->dest))\n-\t\tcontinue;\n-\n-\t      bitmap_set_bit (may_exit, i);\n-\t      bitmap_set_bit (has_exit, i);\n-\t      outermost_exit = find_common_loop (outermost_exit,\n-\t\t\t\t\t\t e->dest->loop_father);\n+\t      if (! flow_bb_inside_loop_p (loop, e->dest))\n+\t\t{\n+\t\t  bitmap_set_bit (may_exit, i);\n+\t\t  bitmap_set_bit (has_exit, i);\n+\t\t  outermost_exit = find_common_loop (outermost_exit,\n+\t\t\t\t\t\t     e->dest->loop_father);\n+\t\t}\n+\t      /* If we enter a subloop that might never terminate treat\n+\t         it like a possible exit.  */\n+\t      if (flow_loop_nested_p (loop, e->dest->loop_father))\n+\t\tbitmap_set_bit (may_exit, i);\n \t    }\n \t  continue;\n \t}"}, {"sha": "9451ca975cfcb413b887c04ccd0005954a3cc622", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/964ef24cd591632a38c3e48154de389470df13df/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/964ef24cd591632a38c3e48154de389470df13df/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=964ef24cd591632a38c3e48154de389470df13df", "patch": "@@ -1,3 +1,8 @@\n+2016-11-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/78185\n+\t* gcc.dg/pr78185.c: New testcase.\n+\n 2016-10-04  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* g++.dg/debug/dwarf2/ref-3.C: XFAIL AIX."}, {"sha": "405f7489dae05c937352cf58eeb714114ac94e6d", "filename": "gcc/testsuite/gcc.dg/pr78185.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/964ef24cd591632a38c3e48154de389470df13df/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78185.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/964ef24cd591632a38c3e48154de389470df13df/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78185.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78185.c?ref=964ef24cd591632a38c3e48154de389470df13df", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run { target *-*-linux* *-*-gnu* } } */\n+/* { dg-options \"-O\" } */\n+\n+#include <unistd.h>\n+#include <signal.h>\n+#include <stdlib.h>\n+\n+static char var1 = 0L;\n+static char *var2 = &var1;\n+\n+void do_exit (int i)\n+{\n+  exit (0);\n+}\n+\n+int main(void)\n+{\n+  struct sigaction s;\n+  sigemptyset (&s.sa_mask);\n+  s.sa_handler = do_exit;\n+  s.sa_flags = 0;\n+  sigaction (SIGALRM, &s, NULL);\n+  alarm (1);\n+  /* The following loop is infinite, the division by zero should not\n+     be hoisted out of it.  */\n+  for (; (var1 == 0 ? 0 : (100 / var1)) == *var2; );\n+  return 0;\n+}"}, {"sha": "0524e57564f8ddeb7555be1fab15045cc3473ea7", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/964ef24cd591632a38c3e48154de389470df13df/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/964ef24cd591632a38c3e48154de389470df13df/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=964ef24cd591632a38c3e48154de389470df13df", "patch": "@@ -44,6 +44,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"trans-mem.h\"\n #include \"gimple-fold.h\"\n #include \"tree-scalar-evolution.h\"\n+#include \"tree-ssa-loop-niter.h\"\n \n /* TODO:  Support for predicated code motion.  I.e.\n \n@@ -2369,8 +2370,16 @@ fill_always_executed_in_1 (struct loop *loop, sbitmap contains_call)\n \t    break;\n \n \t  FOR_EACH_EDGE (e, ei, bb->succs)\n-\t    if (!flow_bb_inside_loop_p (loop, e->dest))\n-\t      break;\n+\t    {\n+\t      /* If there is an exit from this BB.  */\n+\t      if (!flow_bb_inside_loop_p (loop, e->dest))\n+\t\tbreak;\n+\t      /* Or we enter a possibly non-finite loop.  */\n+\t      if (flow_loop_nested_p (bb->loop_father,\n+\t\t\t\t      e->dest->loop_father)\n+\t\t  && ! finite_loop_p (e->dest->loop_father))\n+\t\tbreak;\n+\t    }\n \t  if (e)\n \t    break;\n "}]}