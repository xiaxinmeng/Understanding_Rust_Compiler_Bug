{"sha": "e78549932d92690dd277938fac358c039a5d210d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc4NTQ5OTMyZDkyNjkwZGQyNzc5MzhmYWMzNThjMDM5YTVkMjEwZA==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2015-08-31T10:37:30Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2015-08-31T10:37:30Z"}, "message": "re PR fortran/47571 (undefined reference to clock_gettime in Linux build of 02/01/2011)\n\n\tPR libfortran/47571\n\t* acinclude.m4 (LIBGFOR_GTHREAD_WEAK): Remove.\n\t(LIBGFOR_CHECK_WEAKREF): New test.\n\t* configure.ac: Call LIBGFOR_CHECK_WEAKREF instead of\n\tLIBGFOR_GTHREAD_WEAK.\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.\n\t* intrinsics/system_clock.c: Use SUPPORTS_WEAKREF instead of\n\tSUPPORTS_WEAK and GTHREAD_USE_WEAK.\n\nFrom-SVN: r227335", "tree": {"sha": "8abc0ef2b196b276af26f60460040f32e81575d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8abc0ef2b196b276af26f60460040f32e81575d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e78549932d92690dd277938fac358c039a5d210d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e78549932d92690dd277938fac358c039a5d210d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e78549932d92690dd277938fac358c039a5d210d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e78549932d92690dd277938fac358c039a5d210d/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ba00e9dba4d8e2113d3347532fe9aff2a293625", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ba00e9dba4d8e2113d3347532fe9aff2a293625", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ba00e9dba4d8e2113d3347532fe9aff2a293625"}], "stats": {"total": 120, "additions": 56, "deletions": 64}, "files": [{"sha": "a6301f1d67d9e7c6758aea42442922a470254a79", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78549932d92690dd277938fac358c039a5d210d/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78549932d92690dd277938fac358c039a5d210d/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=e78549932d92690dd277938fac358c039a5d210d", "patch": "@@ -1,3 +1,15 @@\n+2015-08-31  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR libfortran/47571\n+\t* acinclude.m4 (LIBGFOR_GTHREAD_WEAK): Remove.\n+\t(LIBGFOR_CHECK_WEAKREF): New test.\n+\t* configure.ac: Call LIBGFOR_CHECK_WEAKREF instead of\n+\tLIBGFOR_GTHREAD_WEAK.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* intrinsics/system_clock.c: Use SUPPORTS_WEAKREF instead of\n+\tSUPPORTS_WEAK and GTHREAD_USE_WEAK.\n+\n 2015-08-29 Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/67367"}, {"sha": "fab29e424bf2729a3bef134977604cb9100c7bcf", "filename": "libgfortran/acinclude.m4", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78549932d92690dd277938fac358c039a5d210d/libgfortran%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78549932d92690dd277938fac358c039a5d210d/libgfortran%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Facinclude.m4?ref=e78549932d92690dd277938fac358c039a5d210d", "patch": "@@ -69,27 +69,21 @@ if (foovar > 10) return __sync_add_and_fetch (&foovar, -1);]])],\n \t      [Define to 1 if the target supports __sync_fetch_and_add])\n   fi])\n \n-dnl Check for pragma weak.\n-AC_DEFUN([LIBGFOR_GTHREAD_WEAK], [\n-  AC_CACHE_CHECK([whether pragma weak works],\n-\t\t libgfor_cv_have_pragma_weak, [\n-  gfor_save_CFLAGS=\"$CFLAGS\"\n-  CFLAGS=\"$CFLAGS -Wunknown-pragmas\"\n-  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n-void foo (void);\n-#pragma weak foo\n-]], [[if (foo) foo ();]])],\n-\t\t    libgfor_cv_have_pragma_weak=yes, libgfor_cv_have_pragma_weak=no)])\n-  if test $libgfor_cv_have_pragma_weak = yes; then\n-    AC_DEFINE(SUPPORTS_WEAK, 1,\n-\t      [Define to 1 if the target supports #pragma weak])\n-  fi\n-  case \"$host\" in\n-    *-*-darwin* | *-*-hpux* | *-*-cygwin* | *-*-mingw* | *-*-musl* )\n-      AC_DEFINE(GTHREAD_USE_WEAK, 0,\n-\t\t[Define to 0 if the target shouldn't use #pragma weak])\n-      ;;\n-  esac])\n+dnl Check whether target effectively supports weakref\n+AC_DEFUN([LIBGFOR_CHECK_WEAKREF], [\n+  AC_CACHE_CHECK([whether the target supports weakref],\n+\t\t libgfor_cv_have_weakref, [\n+  save_CFLAGS=\"$CFLAGS\"\n+  CFLAGS=\"$CFLAGS -Wunknown-pragmas -Werror\"\n+  AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n+static int mytoto (int) __attribute__((__weakref__(\"toto\")));\n+]], [[return (mytoto != 0);]])],\n+\t\t libgfor_cv_have_weakref=yes, libgfor_cv_have_weakref=no)\n+  CFLAGS=\"$save_CFLAGS\"])\n+  if test $libgfor_cv_have_weakref = yes; then\n+    AC_DEFINE(SUPPORTS_WEAKREF, 1,\n+\t      [Define to 1 if the target supports weakref])\n+  fi])\n \n dnl Check whether target can unlink a file still open.\n AC_DEFUN([LIBGFOR_CHECK_UNLINK_OPEN_FILE], ["}, {"sha": "cf8237e0f0cf67cdb474213c48afd06b5fb8d08c", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78549932d92690dd277938fac358c039a5d210d/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78549932d92690dd277938fac358c039a5d210d/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=e78549932d92690dd277938fac358c039a5d210d", "patch": "@@ -1,8 +1,5 @@\n /* config.h.in.  Generated from configure.ac by autoheader.  */\n \n-/* Define to 0 if the target shouldn't use #pragma weak */\n-#undef GTHREAD_USE_WEAK\n-\n /* Define to 1 if you have the `access' function. */\n #undef HAVE_ACCESS\n \n@@ -874,8 +871,8 @@\n /* Define to 1 if you have the ANSI C header files. */\n #undef STDC_HEADERS\n \n-/* Define to 1 if the target supports #pragma weak */\n-#undef SUPPORTS_WEAK\n+/* Define to 1 if the target supports weakref */\n+#undef SUPPORTS_WEAKREF\n \n /* Enable extensions on AIX 3, Interix.  */\n #ifndef _ALL_SOURCE"}, {"sha": "12f6f131e61da44063fac2af521ff497d16cc6eb", "filename": "libgfortran/configure", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78549932d92690dd277938fac358c039a5d210d/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78549932d92690dd277938fac358c039a5d210d/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=e78549932d92690dd277938fac358c039a5d210d", "patch": "@@ -25953,51 +25953,48 @@ $as_echo \"#define HAVE_SYNC_FETCH_AND_ADD 1\" >>confdefs.h\n \n   fi\n \n-# Check out #pragma weak.\n+# Check out weakref support.\n \n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether pragma weak works\" >&5\n-$as_echo_n \"checking whether pragma weak works... \" >&6; }\n-if test \"${libgfor_cv_have_pragma_weak+set}\" = set; then :\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether the target supports weakref\" >&5\n+$as_echo_n \"checking whether the target supports weakref... \" >&6; }\n+if test \"${libgfor_cv_have_weakref+set}\" = set; then :\n   $as_echo_n \"(cached) \" >&6\n else\n \n-  gfor_save_CFLAGS=\"$CFLAGS\"\n-  CFLAGS=\"$CFLAGS -Wunknown-pragmas\"\n-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+  save_CFLAGS=\"$CFLAGS\"\n+  CFLAGS=\"$CFLAGS -Wunknown-pragmas -Werror\"\n+  if test x$gcc_no_link = xyes; then\n+  as_fn_error \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n-void foo (void);\n-#pragma weak foo\n+static int mytoto (int) __attribute__((__weakref__(\"toto\")));\n \n int\n main ()\n {\n-if (foo) foo ();\n+return (mytoto != 0);\n   ;\n   return 0;\n }\n _ACEOF\n-if ac_fn_c_try_compile \"$LINENO\"; then :\n-  libgfor_cv_have_pragma_weak=yes\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  libgfor_cv_have_weakref=yes\n else\n-  libgfor_cv_have_pragma_weak=no\n+  libgfor_cv_have_weakref=no\n fi\n-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+  CFLAGS=\"$save_CFLAGS\"\n fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgfor_cv_have_pragma_weak\" >&5\n-$as_echo \"$libgfor_cv_have_pragma_weak\" >&6; }\n-  if test $libgfor_cv_have_pragma_weak = yes; then\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgfor_cv_have_weakref\" >&5\n+$as_echo \"$libgfor_cv_have_weakref\" >&6; }\n+  if test $libgfor_cv_have_weakref = yes; then\n \n-$as_echo \"#define SUPPORTS_WEAK 1\" >>confdefs.h\n+$as_echo \"#define SUPPORTS_WEAKREF 1\" >>confdefs.h\n \n   fi\n-  case \"$host\" in\n-    *-*-darwin* | *-*-hpux* | *-*-cygwin* | *-*-mingw* | *-*-musl* )\n-\n-$as_echo \"#define GTHREAD_USE_WEAK 0\" >>confdefs.h\n-\n-      ;;\n-  esac\n \n # Various other checks on target\n "}, {"sha": "fd963ff11b8a626bebd299ffd72d371b2b101f89", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78549932d92690dd277938fac358c039a5d210d/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78549932d92690dd277938fac358c039a5d210d/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=e78549932d92690dd277938fac358c039a5d210d", "patch": "@@ -595,8 +595,8 @@ LIBGFOR_CHECK_ATTRIBUTE_ALIAS\n # Check out sync builtins support.\n LIBGFOR_CHECK_SYNC_FETCH_AND_ADD\n \n-# Check out #pragma weak.\n-LIBGFOR_GTHREAD_WEAK\n+# Check out weakref support.\n+LIBGFOR_CHECK_WEAKREF\n \n # Various other checks on target\n LIBGFOR_CHECK_UNLINK_OPEN_FILE"}, {"sha": "e36650061ab6c34d3578dfec4033e88a70866880", "filename": "libgfortran/intrinsics/system_clock.c", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78549932d92690dd277938fac358c039a5d210d/libgfortran%2Fintrinsics%2Fsystem_clock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78549932d92690dd277938fac358c039a5d210d/libgfortran%2Fintrinsics%2Fsystem_clock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fsystem_clock.c?ref=e78549932d92690dd277938fac358c039a5d210d", "patch": "@@ -45,16 +45,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n /* Weakref trickery for clock_gettime().  On Glibc <= 2.16,\n    clock_gettime() requires us to link in librt, which also pulls in\n    libpthread.  In order to avoid this by default, only call\n-   clock_gettime() through a weak reference.\n-\n-   Some targets don't support weak undefined references; on these\n-   GTHREAD_USE_WEAK is 0. So we need to define it to 1 on other\n-   targets.  */\n-#ifndef GTHREAD_USE_WEAK\n-#define GTHREAD_USE_WEAK 1\n-#endif\n-\n-#if SUPPORTS_WEAK && GTHREAD_USE_WEAK && defined(HAVE_CLOCK_GETTIME_LIBRT)\n+   clock_gettime() through a weak reference.  */\n+#if SUPPORTS_WEAKREF && defined(HAVE_CLOCK_GETTIME_LIBRT)\n static int weak_gettime (clockid_t, struct timespec *) \n   __attribute__((__weakref__(\"clock_gettime\")));\n #endif\n@@ -90,7 +82,7 @@ gf_gettime_mono (time_t * secs, long * fracsecs, long * tck)\n   *fracsecs = ts.tv_nsec;\n   return err;\n #else\n-#if defined(HAVE_CLOCK_GETTIME_LIBRT) && SUPPORTS_WEAK && GTHREAD_USE_WEAK\n+#if SUPPORTS_WEAKREF && defined(HAVE_CLOCK_GETTIME_LIBRT)\n   if (weak_gettime)\n     {\n       struct timespec ts;"}]}