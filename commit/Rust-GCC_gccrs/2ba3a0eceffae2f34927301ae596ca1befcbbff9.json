{"sha": "2ba3a0eceffae2f34927301ae596ca1befcbbff9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJhM2EwZWNlZmZhZTJmMzQ5MjczMDFhZTU5NmNhMWJlZmNiYmZmOQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-04-11T17:22:33Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-04-11T17:22:33Z"}, "message": "(immed_double_const): Sign-extend constants when they\nhave the most significant bit set for the target.\n\nFrom-SVN: r7027", "tree": {"sha": "cc7e9146578210216d453c72d5ff65467e36a263", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc7e9146578210216d453c72d5ff65467e36a263"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ba3a0eceffae2f34927301ae596ca1befcbbff9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ba3a0eceffae2f34927301ae596ca1befcbbff9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ba3a0eceffae2f34927301ae596ca1befcbbff9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ba3a0eceffae2f34927301ae596ca1befcbbff9/comments", "author": null, "committer": null, "parents": [{"sha": "7373d92d2f7827d896b80e54c4bf9bd8ef6cf978", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7373d92d2f7827d896b80e54c4bf9bd8ef6cf978", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7373d92d2f7827d896b80e54c4bf9bd8ef6cf978"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "a09852acc93dec07caa1ab30ab32054cfa8473b3", "filename": "gcc/varasm.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ba3a0eceffae2f34927301ae596ca1befcbbff9/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ba3a0eceffae2f34927301ae596ca1befcbbff9/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=2ba3a0eceffae2f34927301ae596ca1befcbbff9", "patch": "@@ -1785,6 +1785,19 @@ immed_double_const (i0, i1, mode)\n \t/* We cannot represent this value as a constant.  */\n \tabort ();\n \n+      /* If this would be an entire word for the target, but is not for\n+\t the host, then sign-extend on the host so that the number will look\n+\t the same way on the host that it would on the target.\n+\n+\t For example, when building a 64 bit alpha hosted 32 bit sparc\n+\t targeted compiler, then we want the 32 bit unsigned value -1 to be\n+\t represented as a 64 bit value -1, and not as 0x00000000ffffffff.\n+\t The later confuses the sparc backend.  */\n+\n+      if (BITS_PER_WORD < HOST_BITS_PER_WIDE_INT && BITS_PER_WORD == width\n+\t  && (i0 & ((HOST_WIDE_INT) 1 << (width - 1))))\n+\ti0 |= ((HOST_WIDE_INT) (-1) << width);\n+\n       /* If MODE fits within HOST_BITS_PER_WIDE_INT, always use a CONST_INT.\n \n \t ??? Strictly speaking, this is wrong if we create a CONST_INT"}]}