{"sha": "b406b86cad2330df2973692ae4d3a2e897cb1de3", "node_id": "C_kwDOANBUbNoAKGI0MDZiODZjYWQyMzMwZGYyOTczNjkyYWU0ZDNhMmU4OTdjYjFkZTM", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-07T06:43:05Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T05:58:43Z"}, "message": "RISC-V: Add vwsub.w C++ api TESTS\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vwsub_wv-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwsub_wv-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwsub_wv-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwsub_wv_mu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwsub_wv_mu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwsub_wv_mu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwsub_wv_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwsub_wv_tu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwsub_wv_tu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwsub_wv_tum-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwsub_wv_tum-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwsub_wv_tum-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwsub_wv_tumu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwsub_wv_tumu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwsub_wv_tumu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwsub_wx-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwsub_wx-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwsub_wx-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwsub_wx_mu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwsub_wx_mu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwsub_wx_mu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwsub_wx_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwsub_wx_tu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwsub_wx_tu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwsub_wx_tum-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwsub_wx_tum-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwsub_wx_tum-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwsub_wx_tumu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwsub_wx_tumu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwsub_wx_tumu-3.C: New test.", "tree": {"sha": "7a0bb5741e116b675a083a825f6c18ded8cbaba9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a0bb5741e116b675a083a825f6c18ded8cbaba9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b406b86cad2330df2973692ae4d3a2e897cb1de3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b406b86cad2330df2973692ae4d3a2e897cb1de3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b406b86cad2330df2973692ae4d3a2e897cb1de3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b406b86cad2330df2973692ae4d3a2e897cb1de3/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fca6d1ac50b809a75b8c354cd66e5b044b53179", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fca6d1ac50b809a75b8c354cd66e5b044b53179", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fca6d1ac50b809a75b8c354cd66e5b044b53179"}], "stats": {"total": 3960, "additions": 3960, "deletions": 0}, "files": [{"sha": "73c3f53d8dcd71a9aec2d3444ccf17d54594ada9", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwsub_wv-1.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv-1.C?ref=b406b86cad2330df2973692ae4d3a2e897cb1de3", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wv(vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wv(vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wv(vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wv(vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wv(vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wv(vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wv(vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wv(vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wv(vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wv(vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wv(vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wv(vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wv(vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wv(vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wv(vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vwsub_wv(vbool64_t mask,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wv(vbool32_t mask,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wv(vbool16_t mask,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wv(vbool8_t mask,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wv(vbool4_t mask,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wv(vbool2_t mask,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wv(vbool64_t mask,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wv(vbool32_t mask,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wv(vbool16_t mask,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wv(vbool8_t mask,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wv(vbool4_t mask,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wv(vbool64_t mask,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wv(vbool32_t mask,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wv(vbool16_t mask,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wv(vbool8_t mask,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "1ef2c56fd27e63d1cf0621e7a8a5b9e90652ca1f", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwsub_wv-2.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv-2.C?ref=b406b86cad2330df2973692ae4d3a2e897cb1de3", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wv(vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wv(vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wv(vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wv(vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wv(vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wv(vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wv(vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wv(vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wv(vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wv(vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wv(vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wv(vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wv(vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wv(vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wv(vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vwsub_wv(vbool64_t mask,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wv(vbool32_t mask,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wv(vbool16_t mask,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wv(vbool8_t mask,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wv(vbool4_t mask,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wv(vbool2_t mask,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wv(vbool64_t mask,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wv(vbool32_t mask,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wv(vbool16_t mask,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wv(vbool8_t mask,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wv(vbool4_t mask,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wv(vbool64_t mask,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wv(vbool32_t mask,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wv(vbool16_t mask,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wv(vbool8_t mask,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "3231000a07ffad1e194bbd37d3e60612f9602bab", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwsub_wv-3.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv-3.C?ref=b406b86cad2330df2973692ae4d3a2e897cb1de3", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wv(vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wv(vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wv(vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wv(vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wv(vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wv(vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wv(vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wv(vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wv(vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wv(vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wv(vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wv(vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wv(vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wv(vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wv(vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vwsub_wv(vbool64_t mask,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wv(vbool32_t mask,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wv(vbool16_t mask,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wv(vbool8_t mask,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wv(vbool4_t mask,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wv(vbool2_t mask,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wv(vbool64_t mask,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wv(vbool32_t mask,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wv(vbool16_t mask,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wv(vbool8_t mask,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wv(vbool4_t mask,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wv(vbool64_t mask,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wv(vbool32_t mask,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wv(vbool16_t mask,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wv(vbool8_t mask,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv(mask,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "d637d17eb07213e284041314593fadfb401dff50", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwsub_wv_mu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_mu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_mu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_mu-1.C?ref=b406b86cad2330df2973692ae4d3a2e897cb1de3", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wv_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wv_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wv_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wv_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wv_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wv_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wv_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wv_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wv_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wv_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wv_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wv_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wv_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wv_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wv_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "ef94215b6db0660bb3450c0286c5da540fb508f3", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwsub_wv_mu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_mu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_mu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_mu-2.C?ref=b406b86cad2330df2973692ae4d3a2e897cb1de3", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wv_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wv_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wv_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wv_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wv_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wv_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wv_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wv_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wv_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wv_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wv_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wv_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wv_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wv_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wv_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "1c6f91edab7d16e2a71f0748c7c8c8e1bd821abd", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwsub_wv_mu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_mu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_mu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_mu-3.C?ref=b406b86cad2330df2973692ae4d3a2e897cb1de3", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wv_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wv_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wv_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wv_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wv_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wv_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wv_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wv_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wv_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wv_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wv_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wv_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wv_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wv_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wv_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "d77477e129a567463ffa07cf897e80b51ccd2058", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwsub_wv_tu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_tu-1.C?ref=b406b86cad2330df2973692ae4d3a2e897cb1de3", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wv_tu(vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wv_tu(vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wv_tu(vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wv_tu(vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wv_tu(vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wv_tu(vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wv_tu(vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wv_tu(vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wv_tu(vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wv_tu(vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wv_tu(vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wv_tu(vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wv_tu(vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wv_tu(vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wv_tu(vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "80fe4106ae5ba79c7a2e37078cf825a78aea90d0", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwsub_wv_tu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_tu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_tu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_tu-2.C?ref=b406b86cad2330df2973692ae4d3a2e897cb1de3", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wv_tu(vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wv_tu(vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wv_tu(vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wv_tu(vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wv_tu(vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wv_tu(vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wv_tu(vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wv_tu(vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wv_tu(vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wv_tu(vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wv_tu(vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wv_tu(vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wv_tu(vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wv_tu(vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wv_tu(vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "d557f91de591f64ed836bc9059dea7928f9d4383", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwsub_wv_tu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_tu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_tu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_tu-3.C?ref=b406b86cad2330df2973692ae4d3a2e897cb1de3", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wv_tu(vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wv_tu(vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wv_tu(vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wv_tu(vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wv_tu(vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wv_tu(vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wv_tu(vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wv_tu(vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wv_tu(vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wv_tu(vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wv_tu(vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wv_tu(vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wv_tu(vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wv_tu(vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wv_tu(vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tu(merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "74591889ac26b84db972271b8cdcc3868bb8ebca", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwsub_wv_tum-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_tum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_tum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_tum-1.C?ref=b406b86cad2330df2973692ae4d3a2e897cb1de3", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wv_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wv_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wv_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wv_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wv_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wv_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wv_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wv_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wv_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wv_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wv_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wv_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wv_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wv_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wv_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "e3e9340a6aa79ff8498452af072d7f58d29b82b7", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwsub_wv_tum-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_tum-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_tum-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_tum-2.C?ref=b406b86cad2330df2973692ae4d3a2e897cb1de3", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wv_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wv_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wv_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wv_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wv_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wv_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wv_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wv_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wv_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wv_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wv_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wv_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wv_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wv_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wv_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "41f134f14e5342ad411077245a07ccd1708ed664", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwsub_wv_tum-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_tum-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_tum-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_tum-3.C?ref=b406b86cad2330df2973692ae4d3a2e897cb1de3", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wv_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wv_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wv_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wv_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wv_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wv_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wv_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wv_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wv_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wv_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wv_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wv_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wv_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wv_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wv_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "aee6c23342ef1e07e3399295b0d8dad2f186addc", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwsub_wv_tumu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_tumu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_tumu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_tumu-1.C?ref=b406b86cad2330df2973692ae4d3a2e897cb1de3", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wv_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wv_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wv_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wv_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wv_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wv_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wv_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wv_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wv_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wv_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wv_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wv_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wv_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wv_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wv_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "c9e833a65a4bc8b22264802609750a292f5c1f71", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwsub_wv_tumu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_tumu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_tumu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_tumu-2.C?ref=b406b86cad2330df2973692ae4d3a2e897cb1de3", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wv_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wv_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wv_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wv_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wv_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wv_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wv_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wv_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wv_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wv_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wv_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wv_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wv_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wv_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wv_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "02d72987c3b0cadb8d4f85369e159addf4394722", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwsub_wv_tumu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_tumu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_tumu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wv_tumu-3.C?ref=b406b86cad2330df2973692ae4d3a2e897cb1de3", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wv_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wv_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wv_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wv_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wv_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wv_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wv_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wv_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wv_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wv_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wv_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wv_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wv_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wv_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wv_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wv_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwsub\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "2a09333658e7838f656c55be6e54a062fb3088b2", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwsub_wx-1.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx-1.C?ref=b406b86cad2330df2973692ae4d3a2e897cb1de3", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx(vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx(vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx(vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx(vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx(vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx(vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx(vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx(vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx(vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx(vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx(vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx(vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx(vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx(vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx(vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vwsub_wx(vbool64_t mask,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx(vbool32_t mask,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx(vbool16_t mask,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx(vbool8_t mask,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx(vbool4_t mask,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx(vbool2_t mask,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx(vbool64_t mask,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx(vbool32_t mask,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx(vbool16_t mask,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx(vbool8_t mask,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx(vbool4_t mask,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx(vbool64_t mask,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx(vbool32_t mask,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx(vbool16_t mask,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx(vbool8_t mask,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "d223690df536f207bb5b5b0593e19b0c9e53a332", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwsub_wx-2.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx-2.C?ref=b406b86cad2330df2973692ae4d3a2e897cb1de3", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx(vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx(vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx(vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx(vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx(vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx(vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx(vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx(vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx(vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx(vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx(vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx(vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx(vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx(vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx(vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vwsub_wx(vbool64_t mask,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx(vbool32_t mask,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx(vbool16_t mask,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx(vbool8_t mask,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx(vbool4_t mask,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx(vbool2_t mask,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx(vbool64_t mask,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx(vbool32_t mask,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx(vbool16_t mask,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx(vbool8_t mask,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx(vbool4_t mask,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx(vbool64_t mask,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx(vbool32_t mask,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx(vbool16_t mask,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx(vbool8_t mask,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "45279a394a8941eefe4f4fcb69cd6c04cfcd6d06", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwsub_wx-3.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx-3.C?ref=b406b86cad2330df2973692ae4d3a2e897cb1de3", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx(vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx(vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx(vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx(vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx(vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx(vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx(vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx(vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx(vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx(vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx(vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx(vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx(vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx(vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx(vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(op1,0xAA,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vwsub_wx(vbool64_t mask,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx(vbool32_t mask,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx(vbool16_t mask,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx(vbool8_t mask,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx(vbool4_t mask,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx(vbool2_t mask,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx(vbool64_t mask,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx(vbool32_t mask,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx(vbool16_t mask,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx(vbool8_t mask,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx(vbool4_t mask,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx(vbool64_t mask,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx(vbool32_t mask,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx(vbool16_t mask,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx(vbool8_t mask,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx(mask,op1,0xAA,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "39fd99e18ada4d8dac22a82b98a8779dc49511a5", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwsub_wx_mu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_mu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_mu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_mu-1.C?ref=b406b86cad2330df2973692ae4d3a2e897cb1de3", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "d8e26c0f7d7d78dd8a81778c95c636dec725409b", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwsub_wx_mu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_mu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_mu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_mu-2.C?ref=b406b86cad2330df2973692ae4d3a2e897cb1de3", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "0e361d52e62a78fefd37cdde56d1396337d3c1d9", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwsub_wx_mu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_mu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_mu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_mu-3.C?ref=b406b86cad2330df2973692ae4d3a2e897cb1de3", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "a253bb6dbd27f3bf4fa2e9a6203a7c79aca353a8", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwsub_wx_tu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tu-1.C?ref=b406b86cad2330df2973692ae4d3a2e897cb1de3", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx_tu(vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx_tu(vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx_tu(vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx_tu(vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx_tu(vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx_tu(vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx_tu(vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx_tu(vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx_tu(vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx_tu(vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx_tu(vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx_tu(vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx_tu(vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx_tu(vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx_tu(vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */"}, {"sha": "1eb145ea4efd3fe71b7f1b0199f92920d9d1afcb", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwsub_wx_tu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tu-2.C?ref=b406b86cad2330df2973692ae4d3a2e897cb1de3", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx_tu(vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx_tu(vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx_tu(vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx_tu(vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx_tu(vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx_tu(vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx_tu(vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx_tu(vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx_tu(vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx_tu(vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx_tu(vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx_tu(vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx_tu(vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx_tu(vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx_tu(vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */"}, {"sha": "56b2f3677a760e6ca0788810b34bf5de0b9cc996", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwsub_wx_tu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tu-3.C?ref=b406b86cad2330df2973692ae4d3a2e897cb1de3", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx_tu(vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx_tu(vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx_tu(vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx_tu(vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx_tu(vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx_tu(vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx_tu(vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx_tu(vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx_tu(vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx_tu(vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx_tu(vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx_tu(vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx_tu(vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx_tu(vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx_tu(vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */"}, {"sha": "6d403facaf8b70da6edd314db32ef4dd0c0d5fb8", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwsub_wx_tum-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tum-1.C?ref=b406b86cad2330df2973692ae4d3a2e897cb1de3", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "4f39d244f45daba2a3ffcec9b815dab3538227e0", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwsub_wx_tum-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tum-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tum-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tum-2.C?ref=b406b86cad2330df2973692ae4d3a2e897cb1de3", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "d8df066beb7b53c961e87c3bcaf3620e77a87ceb", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwsub_wx_tum-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tum-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tum-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tum-3.C?ref=b406b86cad2330df2973692ae4d3a2e897cb1de3", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "d08185bdc1da3e1b03db48dca12b541b82e2e0ef", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwsub_wx_tumu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tumu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tumu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tumu-1.C?ref=b406b86cad2330df2973692ae4d3a2e897cb1de3", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "01ab63350719afcf06b184defbb085e627e923c0", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwsub_wx_tumu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tumu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tumu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tumu-2.C?ref=b406b86cad2330df2973692ae4d3a2e897cb1de3", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "9a58c760b6469d843e7187b8b4165f91051ff675", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwsub_wx_tumu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tumu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b406b86cad2330df2973692ae4d3a2e897cb1de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tumu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwsub_wx_tumu-3.C?ref=b406b86cad2330df2973692ae4d3a2e897cb1de3", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwsub_wx_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwsub_wx_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwsub_wx_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwsub_wx_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwsub_wx_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwsub_wx_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwsub_wx_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwsub_wx_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwsub_wx_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwsub_wx_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwsub_wx_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwsub_wx_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwsub_wx_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwsub_wx_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwsub_wx_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwsub_wx_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwsub\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}]}