{"sha": "d143a8907abfc4e4480c67dd127db1596ffd4f9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE0M2E4OTA3YWJmYzRlNDQ4MGM2N2RkMTI3ZGIxNTk2ZmZkNGY5Yw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "crux@pool.informatik.rwth-aachen.de", "date": "1998-10-07T09:50:05Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-10-07T09:50:05Z"}, "message": "jump.c (duplicate_loop_exit_test): Strip REG_WAS_0 notes off all insns we're going to copy.\n\n\t* jump.c (duplicate_loop_exit_test): Strip REG_WAS_0 notes off all\n\tinsns we're going to copy.\n\t* regclass.c (reg_scan_mark_refs): Don't test X for NULL_RTX.\n\nFrom-SVN: r22887", "tree": {"sha": "9893083db6aa42f9eba74e6a249f517dd5cf5d96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9893083db6aa42f9eba74e6a249f517dd5cf5d96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d143a8907abfc4e4480c67dd127db1596ffd4f9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d143a8907abfc4e4480c67dd127db1596ffd4f9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d143a8907abfc4e4480c67dd127db1596ffd4f9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d143a8907abfc4e4480c67dd127db1596ffd4f9c/comments", "author": null, "committer": null, "parents": [{"sha": "237228c033a9e9ee5fb145dbc961a41badcbda92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/237228c033a9e9ee5fb145dbc961a41badcbda92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/237228c033a9e9ee5fb145dbc961a41badcbda92"}], "stats": {"total": 28, "additions": 12, "deletions": 16}, "files": [{"sha": "e176a7e348826233381e0c384774c7697b3072ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d143a8907abfc4e4480c67dd127db1596ffd4f9c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d143a8907abfc4e4480c67dd127db1596ffd4f9c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d143a8907abfc4e4480c67dd127db1596ffd4f9c", "patch": "@@ -21,6 +21,10 @@ Wed Oct  7 02:27:52 1998  Jeffrey A Law  (law@cygnus.com)\n \t\n Wed Oct  7 01:08:43 1998  Bernd Schmidt <crux@Pool.Informatik.RWTH-Aachen.DE>\n \n+\t* jump.c (duplicate_loop_exit_test): Strip REG_WAS_0 notes off all\n+\tinsns we're going to copy.\n+\t* regclass.c (reg_scan_mark_refs): Don't test X for NULL_RTX.\n+\n \t* loop.c (count_one_set): Add prototype.\n \n \t* caller-save.c (restore_referenced_regs): Lose mode argument."}, {"sha": "967981aef44e4d1b57fd87e4b416ee70c33ca13f", "filename": "gcc/jump.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d143a8907abfc4e4480c67dd127db1596ffd4f9c/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d143a8907abfc4e4480c67dd127db1596ffd4f9c/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=d143a8907abfc4e4480c67dd127db1596ffd4f9c", "patch": "@@ -480,12 +480,9 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n \t\t\t\tremove_death (dreg, trial);\n \t\t\t\tbreak;\n \t\t\t      }\n-#ifdef PRESERVE_DEATH_INFO_REGNO_P\n-\t\t\t/* Deleting insn could lose a death-note for SREG\n-\t\t\t   so don't do it if final needs accurate\n-\t\t\t   death-notes.  */\n-\t\t\tif (PRESERVE_DEATH_INFO_REGNO_P (sreg)\n-\t\t\t    && (trial = find_regno_note (insn, REG_DEAD, sreg)))\n+\n+\t\t\t/* Deleting insn could lose a death-note for SREG.  */\n+\t\t\tif ((trial = find_regno_note (insn, REG_DEAD, sreg)))\n \t\t\t  {\n \t\t\t    /* Change this into a USE so that we won't emit\n \t\t\t       code for it, but still can keep the note.  */\n@@ -497,7 +494,6 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n \t\t\t    XEXP (trial, 1) = NULL_RTX;\n \t\t\t  }\n \t\t\telse\n-#endif\n \t\t\t  delete_insn (insn);\n \t\t      }\n \t\t  }\n@@ -2434,8 +2430,7 @@ duplicate_loop_exit_test (loop_start)\n \t has a REG_RETVAL or REG_LIBCALL note (hard to adjust)\n \t is a NOTE_INSN_LOOP_BEG because this means we have a nested loop\n \t is a NOTE_INSN_BLOCK_{BEG,END} because duplicating these notes\n-\t      are not valid\n-\t    \n+\t      is not valid.\n \n      We also do not do this if we find an insn with ASM_OPERANDS.  While\n      this restriction should not be necessary, copying an insn with\n@@ -2480,6 +2475,10 @@ duplicate_loop_exit_test (loop_start)\n \t  break;\n \tcase JUMP_INSN:\n \tcase INSN:\n+\t  /* The code below would grossly mishandle REG_WAS_0 notes,\n+\t     so get rid of them here.  */\n+\t  while ((p = find_reg_note (insn, REG_WAS_0, NULL_RTX)) != 0)\n+\t    remove_note (insn, p);\n \t  if (++num_insns > 20\n \t      || find_reg_note (insn, REG_RETVAL, NULL_RTX)\n \t      || find_reg_note (insn, REG_LIBCALL, NULL_RTX)"}, {"sha": "cd882df5cd1e74b3337d04a9adbeceb67f388fbf", "filename": "gcc/regclass.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d143a8907abfc4e4480c67dd127db1596ffd4f9c/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d143a8907abfc4e4480c67dd127db1596ffd4f9c/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=d143a8907abfc4e4480c67dd127db1596ffd4f9c", "patch": "@@ -1995,13 +1995,6 @@ reg_scan_mark_refs (x, insn, note_flag, min_regno)\n   register rtx dest;\n   register rtx note;\n \n-  /* This can happen when scanning insns referenced by certain notes.\n-\n-     It is unclear if we should be scanning such insns; until someone can\n-     say for sure this seems like the safest fix.  */\n-  if (x == NULL_RTX)\n-    return;\n-\n   code = GET_CODE (x);\n   switch (code)\n     {"}]}