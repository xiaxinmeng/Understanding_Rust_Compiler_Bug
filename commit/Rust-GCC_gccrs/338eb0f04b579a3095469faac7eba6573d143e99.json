{"sha": "338eb0f04b579a3095469faac7eba6573d143e99", "node_id": "C_kwDOANBUbNoAKDMzOGViMGYwNGI1NzlhMzA5NTQ2OWZhYWM3ZWJhNjU3M2QxNDNlOTk", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-01-28T00:16:39Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-01-28T00:16:39Z"}, "message": "Daily bump.", "tree": {"sha": "b0d19dfa596d5b3cc2663117120f2addd4832dad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0d19dfa596d5b3cc2663117120f2addd4832dad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/338eb0f04b579a3095469faac7eba6573d143e99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/338eb0f04b579a3095469faac7eba6573d143e99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/338eb0f04b579a3095469faac7eba6573d143e99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/338eb0f04b579a3095469faac7eba6573d143e99/comments", "author": null, "committer": null, "parents": [{"sha": "97bf709f35af45f9cf2902904d82493efed0d2ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97bf709f35af45f9cf2902904d82493efed0d2ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97bf709f35af45f9cf2902904d82493efed0d2ec"}], "stats": {"total": 504, "additions": 503, "deletions": 1}, "files": [{"sha": "cb5fc505f0b850c0eadf59976e56640d79a04352", "filename": "gcc/ChangeLog", "status": "modified", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338eb0f04b579a3095469faac7eba6573d143e99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338eb0f04b579a3095469faac7eba6573d143e99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=338eb0f04b579a3095469faac7eba6573d143e99", "patch": "@@ -1,3 +1,188 @@\n+2023-01-27  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/96373\n+\t* tree.h (sign_mask_for): Declare.\n+\t* tree.cc (sign_mask_for): New function.\n+\t(signed_or_unsigned_type_for): For vector types, try to use the\n+\trelated_int_vector_mode.\n+\t* genmatch.cc (commutative_op): Handle conditional internal functions.\n+\t* match.pd: Fold an IFN_COND_MUL+copysign into an IFN_COND_XOR+and.\n+\n+2023-01-27  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vectorizer.cc (vector_costs::compare_inside_loop_cost):\n+\tUse the likely minimum VF when bounding the denominators to\n+\tthe estimated number of iterations.\n+\n+2023-01-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR target/55522\n+\t* doc/invoke.texi (-shared): Clarify effect on -ffast-math\n+\tand -Ofast FP environment side-effects.\n+\n+2023-01-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR target/55522\n+\t* config/mips/gnu-user.h (GNU_USER_TARGET_MATHFILE_SPEC):\n+\tDon't add crtfastmath.o for -shared.\n+\n+2023-01-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR target/55522\n+\t* config/ia64/linux.h (ENDFILE_SPEC): Don't add crtfastmath.o\n+\tfor -shared.\n+\n+2023-01-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR target/55522\n+\t* config/alpha/linux.h (ENDFILE_SPEC): Don't add\n+\tcrtfastmath.o for -shared.\n+\n+2023-01-27  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/108306\n+\t* range-op.cc (operator_lshift::fold_range): Return [0, 0] not\n+\tvarying for shifts that are always out of void range.\n+\t(operator_rshift::fold_range): Return [0, 0] not\n+\tvarying for shifts that are always out of void range.\n+\n+2023-01-27  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/108447\n+\t* gimple-range-fold.cc (old_using_range::relation_fold_and_or):\n+\tDo not attempt to fold HONOR_NAN types.\n+\n+2023-01-27  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vector-builtins-shapes.cc (struct loadstore_def):\n+\tRemove _m suffix for \"vop_m\" C++ overloaded API name.\n+\n+2023-01-27  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vector-builtins-bases.cc (BASE): Add vlm/vsm support.\n+\t* config/riscv/riscv-vector-builtins-bases.h: Ditto.\n+\t* config/riscv/riscv-vector-builtins-functions.def (vlm): New define.\n+\t(vsm): Ditto.\n+\t* config/riscv/riscv-vector-builtins-shapes.cc (struct loadstore_def): Add vlm/vsm support.\n+\t* config/riscv/riscv-vector-builtins-types.def (DEF_RVV_B_OPS): Ditto.\n+\t(vbool64_t): Ditto.\n+\t(vbool32_t): Ditto.\n+\t(vbool16_t): Ditto.\n+\t(vbool8_t): Ditto.\n+\t(vbool4_t): Ditto.\n+\t(vbool2_t): Ditto.\n+\t(vbool1_t): Ditto.\n+\t* config/riscv/riscv-vector-builtins.cc (DEF_RVV_B_OPS): Ditto.\n+\t(rvv_arg_type_info::get_tree_type): Ditto.\n+\t(function_expander::use_contiguous_load_insn): Ditto.\n+\t* config/riscv/vector.md (@pred_store<mode>): Ditto.\n+\n+2023-01-27  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vsetvl.cc (vsetvl_insn_p): Add condition to avoid ICE.\n+\t(vsetvl_discard_result_insn_p): New function.\n+\t(reg_killed_by_bb_p): rename to find_reg_killed_by.\n+\t(find_reg_killed_by): New name.\n+\t(get_vl): allow it to be called by more functions.\n+\t(has_vsetvl_killed_avl_p): Add condition.\n+\t(get_avl): allow it to be called by more functions.\n+\t(insn_should_be_added_p): New function.\n+\t(get_all_nonphi_defs): Refine function.\n+\t(get_all_sets): Ditto.\n+\t(get_same_bb_set): New function.\n+\t(any_insn_in_bb_p): Ditto.\n+\t(any_set_in_bb_p): Ditto.\n+\t(get_vl_vtype_info): Add VLMAX forward optimization.\n+\t(source_equal_p): Fix issues.\n+\t(extract_single_source): Refine.\n+\t(avl_info::multiple_source_equal_p): New function.\n+\t(avl_info::operator==): Adjust for final version.\n+\t(vl_vtype_info::operator==): Ditto.\n+\t(vl_vtype_info::same_avl_p): Ditto.\n+\t(vector_insn_info::parse_insn): Ditto.\n+\t(vector_insn_info::available_p): New function.\n+\t(vector_insn_info::merge): Adjust for final version.\n+\t(vector_insn_info::dump): Add hard_empty.\n+\t(pass_vsetvl::hard_empty_block_p): New function.\n+\t(pass_vsetvl::backward_demand_fusion): Adjust for final version.\n+\t(pass_vsetvl::forward_demand_fusion): Ditto.\n+\t(pass_vsetvl::demand_fusion): Ditto.\n+\t(pass_vsetvl::cleanup_illegal_dirty_blocks): New function.\n+\t(pass_vsetvl::compute_local_properties): Adjust for final version.\n+\t(pass_vsetvl::can_refine_vsetvl_p): Ditto.\n+\t(pass_vsetvl::refine_vsetvls): Ditto.\n+\t(pass_vsetvl::commit_vsetvls): Ditto.\n+\t(pass_vsetvl::propagate_avl): New function.\n+\t(pass_vsetvl::lazy_vsetvl): Adjust for new version.\n+\t* config/riscv/riscv-vsetvl.h (enum def_type): New enum.\n+\n+2023-01-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR other/108560\n+\t* doc/extend.texi: Fix up return type of __builtin_va_arg_pack_len\n+\tfrom size_t to int.\n+\n+2023-01-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR ipa/106061\n+\t* cgraph.cc (cgraph_edge::verify_corresponds_to_fndecl): Allow\n+\tredirection of calls to __builtin_trap in addition to redirection\n+\tto __builtin_unreachable.\n+\n+2023-01-27  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vsetvl.cc (before_p): Fix bug.\n+\n+2023-01-27  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vsetvl.cc (gen_vsetvl_pat): Refine function args.\n+\t(emit_vsetvl_insn): Ditto.\n+\n+2023-01-27  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/vector.md: Fix constraints.\n+\n+2023-01-27  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/vector-iterators.md: Add TARGET_MIN_VLEN > 32 predicates.\n+\n+2023-01-27  Patrick Palka  <ppalka@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree-core.h (tree_code_type, tree_code_length): For\n+\tC++17 and later, add inline keyword, otherwise don't define\n+\tthe arrays, but declare extern arrays.\n+\t* tree.cc (tree_code_type, tree_code_length): Define these\n+\tarrays for C++14 and older.\n+\n+2023-01-27  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vsetvl.h: Change it into public.\n+\n+2023-01-27  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-passes.def (INSERT_PASS_BEFORE): Reorder VSETVL\n+\tpass.\n+\n+2023-01-27  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vsetvl.cc (pass_vsetvl::execute): Always call split_all_insns.\n+\n+2023-01-27  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/vector.md: Fix incorrect attributes.\n+\n+2023-01-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR target/55522\n+\t* config/loongarch/gnu-user.h (GNU_USER_TARGET_MATHFILE_SPEC):\n+\tDon't add crtfastmath.o for -shared.\n+\n+2023-01-27  Alexandre Oliva  <oliva@gnu.org>\n+\n+\t* doc/options.texi (option, RejectNegative): Mention that\n+\t-g-started options are also implicitly negatable.\n+\n 2023-01-26  Kito Cheng  <kito.cheng@sifive.com>\n \n \t* config/riscv/riscv-vector-builtins.cc (register_builtin_types):"}, {"sha": "9348a4afb6a06f2085faab1a2593286deff55cd1", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338eb0f04b579a3095469faac7eba6573d143e99/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338eb0f04b579a3095469faac7eba6573d143e99/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=338eb0f04b579a3095469faac7eba6573d143e99", "patch": "@@ -1 +1 @@\n-20230127\n+20230128"}, {"sha": "fd1b72f806790006db43139e675f59bcf2c15f40", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338eb0f04b579a3095469faac7eba6573d143e99/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338eb0f04b579a3095469faac7eba6573d143e99/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=338eb0f04b579a3095469faac7eba6573d143e99", "patch": "@@ -1,3 +1,8 @@\n+2023-01-27  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-parser.cc (c_parser_declaration_or_fndef): Do not allow braces\n+\taround auto initializer.\n+\n 2023-01-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/105593"}, {"sha": "d843a6ca24f8af7bf0501dcb489ff8f98ce7e372", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338eb0f04b579a3095469faac7eba6573d143e99/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338eb0f04b579a3095469faac7eba6573d143e99/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=338eb0f04b579a3095469faac7eba6573d143e99", "patch": "@@ -1,3 +1,8 @@\n+2023-01-27  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/108558\n+\t* trans-openmp.cc (gfc_split_omp_clauses): Handle has_device_addr.\n+\n 2023-01-26  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/108544"}, {"sha": "1f42811f080a590b723fa62b13660e505df4a7cf", "filename": "gcc/m2/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338eb0f04b579a3095469faac7eba6573d143e99/gcc%2Fm2%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338eb0f04b579a3095469faac7eba6573d143e99/gcc%2Fm2%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2FChangeLog?ref=338eb0f04b579a3095469faac7eba6573d143e99", "patch": "@@ -1,3 +1,39 @@\n+2023-01-27  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\t* gm2-compiler/M2Comp.mod:  Import MetaString0.\n+\t(ExamineCompilationUnit): New variable Message.\n+\tCreate and format error string.\n+\t* gm2-compiler/M2LexBuf.mod: New variable SeenEof.\n+\t(GetNonEofToken): New procedure.\n+\t(Init): Set SeenEof to FALSE.\n+\t(GetToken): Use GetNonEofToken instead of calls to\n+\tm2flex.GetToken and GetToken.\n+\t(AddTok): Detect eoftok and set SeenEof.\n+\n+2023-01-27  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\t* gm2-compiler/M2Options.def: Export GetMQ, SetMQ.\n+\t* gm2-compiler/M2Preprocess.mod: (MakeSaveTempsFileName):\n+\tTest NewDir against NIL.  Test Dumpdir against NIL.\n+\tTest GetMD () against NIL.  Test GetMMD () against NIL.\n+\tTest GetMQ () against NIL.  Test GetObj () against NIL.\n+\tTest tempfile against NIL.\n+\t* gm2-compiler/P2SymBuild.def: Export\n+\tBuildNoReturnAttribute.\n+\n+2023-01-27  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR modula2/108555\n+\tPR modula2/108182\n+\tPR modula2/102343\n+\t* gm2-lang.cc (gm2_langhook_option_lang_mask): Do not claim CL_C\n+\tor CL_DRIVER.\n+\t(gm2_langhook_init_options): Handle options that we want to pass\n+\tto the preprocessor.\n+\t* lang-specs.h: Pass -B and -save-temps to regular compile lines.\n+\t* lang.opt: Add C and Driver options that Modula-2 intercepts for\n+\tinternal use. Reorder options into two sections and to collate.\n+\n 2023-01-26  Gaius Mulley  <gaiusmod2@gmail.com>\n \n \t* gm2-compiler/M2GCCDeclare.mod: Import IsProcedureNoReturn."}, {"sha": "dc9bb7cfbca0e771262c1432a15e125fbb47354a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 248, "deletions": 0, "changes": 248, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338eb0f04b579a3095469faac7eba6573d143e99/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338eb0f04b579a3095469faac7eba6573d143e99/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=338eb0f04b579a3095469faac7eba6573d143e99", "patch": "@@ -1,3 +1,251 @@\n+2023-01-27  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\t* gm2/pim/fail/empty.mod: New test.\n+\n+2023-01-27  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c2x-auto-1.c, gcc.dg/c2x-auto-3.c: Expect braces around\n+\tauto initializers to be disallowed.\n+\n+2023-01-27  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-add-pattern-half-float.c:\n+\tRemove XFAIL.\n+\t* gcc.dg/vect/complex/fast-math-complex-add-half-float.c: Fix names\n+\tof dump files.\n+\n+2023-01-27  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/simd/vfma_f64.c: Use a wrapper function\n+\trather than an asm barrier.\n+\t* gcc.target/aarch64/simd/vfms_f64.c: Likewise.\n+\t* gcc.target/aarch64/simd/vmul_f64_1.c: Use a wrapper function\n+\trather than volatile.\n+\t* gcc.target/aarch64/simd/vmul_n_f64_1.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmlalh_laneq_s16_1.c: Use a wrapper\n+\tfunction.  Remove -fno-inline.\n+\t* gcc.target/aarch64/simd/vqdmlals_laneq_s32_1.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmlslh_laneq_s16_1.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmlsls_laneq_s32_1.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmulhh_lane_s16.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmulhh_laneq_s16_1.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmulhs_laneq_s32_1.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqrdmulhh_lane_s16.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqrdmulhh_laneq_s16_1.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqrdmulhs_lane_s32.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqrdmulhs_laneq_s32_1.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmulhs_lane_s32.c: Likewise.\n+\tAllow the scalar form to be used when operating on lane 0.\n+\tAdd a test for lane 1.\n+\n+2023-01-27  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/96373\n+\t* gcc.target/aarch64/sve/cond_xorsign_1.c: New test.\n+\t* gcc.target/aarch64/sve/cond_xorsign_2.c: Likewise.\n+\n+2023-01-27  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/cond_asrd_1.c: Tune for a 256-bit\n+\tvector length.\n+\t* gcc.target/aarch64/sve/cond_cnot_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_cnot_6.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_unary_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_unary_6.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_uxt_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/vcond_4_costly.c: Remove XFAILs.\n+\n+2023-01-27  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/108306\n+\t* gcc.dg/pr108306.c: New.\n+\n+2023-01-27  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/108447\n+\t* gcc.dg/pr108447.c: New.\n+\n+2023-01-27  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-7.c: Fix testcase check.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-8.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvl-18.c: Ditto.\n+\n+2023-01-27  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* g++.target/riscv/rvv/base/vle-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vle_tu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vle_tum-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vle_tumu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vse-1.C: New test.\n+\t* g++.target/riscv/rvv/base/riscv_vector.h: New.\n+\n+2023-01-27  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/base/vse-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vse-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vse-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vse_m-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vse_m-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vse_m-3.c: New test.\n+\n+2023-01-27  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/base/vle-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vle-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vle-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vle_m-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vle_m-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vle_m-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vle_mu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vle_mu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vle_mu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vle_tu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vle_tu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vle_tu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vle_tum-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vle_tum-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vle_tum-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vle_tumu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vle_tumu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vle_tumu-3.c: New test.\n+\n+2023-01-27  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* g++.target/riscv/rvv/base/vsm-1.C: New test.\n+\t* g++.target/riscv/rvv/rvv.exp: New test.\n+\t* gcc.target/riscv/rvv/base/vlm_vsm-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vlm_vsm-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vlm_vsm-3.c: New test.\n+\n+2023-01-27  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-14.c: Adjust for final implementation.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-23.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-30.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-44.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-47.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-50.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-51.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-6.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-65.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-66.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-67.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-68.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-70.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-71.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-9.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-2.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-3.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-4.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_conflict-4.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/imm_conflict-5.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-13.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-13.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-14.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-15.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-16.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-21.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-22.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-23.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-24.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-5.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-6.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-7.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-8.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_conflict-1.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_conflict-6.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-1.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-10.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-11.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-12.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-13.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-14.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-2.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-3.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-4.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-5.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-6.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-7.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-8.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-9.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-10.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-1.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-10.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-11.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-12.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-13.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-14.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-15.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-16.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-2.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-3.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-4.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-5.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-6.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-7.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-8.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-9.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-73.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-74.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-75.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvl-1.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvl-10.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvl-11.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvl-12.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvl-13.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvl-14.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvl-15.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvl-16.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvl-17.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvl-18.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvl-19.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvl-2.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvl-20.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvl-3.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvl-4.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvl-5.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvl-6.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvl-7.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvl-8.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvl-9.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-1.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-10.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-11.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-12.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-13.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-14.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-15.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-16.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-17.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-18.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-19.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-2.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-20.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-3.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-4.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-5.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-6.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-7.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-8.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-9.c: New test.\n+\n+2023-01-27  Xi Ruoyao  <xry111@xry111.site>\n+\n+\t* gcc.dg/pr95115.c (x): Add noipa attribute.\n+\n+2023-01-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR ipa/106061\n+\t* gcc.dg/pr106061.c: New test.\n+\n+2023-01-27  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/declare-variant-10.f90: Update scan-tree's\n+\ttarget selector to handle Windows.\n+\t* gfortran.dg/gomp/declare-variant-11.f90: Likewise.\n+\t* gfortran.dg/gomp/declare-variant-12.f90: Likewise.\n+\n 2023-01-26  Gaius Mulley  <gaiusmod2@gmail.com>\n \n \t* gm2/warnings/returntype/fail/badreturn.mod: New test."}, {"sha": "c5dacc90513dff4c676d415cc48e7042152feec2", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338eb0f04b579a3095469faac7eba6573d143e99/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338eb0f04b579a3095469faac7eba6573d143e99/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=338eb0f04b579a3095469faac7eba6573d143e99", "patch": "@@ -1,3 +1,8 @@\n+2023-01-27  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/108558\n+\t* testsuite/libgomp.fortran/has_device_addr.f90: New test.\n+\n 2023-01-23  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* libgomp.texi (OpenMP 5.0): Set non-rectangular"}, {"sha": "e7ba3fe86d1928d09842586cc6ba56776c3b43ff", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338eb0f04b579a3095469faac7eba6573d143e99/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338eb0f04b579a3095469faac7eba6573d143e99/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=338eb0f04b579a3095469faac7eba6573d143e99", "patch": "@@ -1,3 +1,21 @@\n+2023-01-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/108568\n+\t* testsuite/17_intro/names.cc (__unused): For linux or GNU hurd\n+\tinclude features.h if present and then check __GLIBC__ and\n+\t__GLIBC_MINOR__ macros for glibc prior to 2.19, instead of testing\n+\t__GLIBC_PREREQ which isn't defined yet.\n+\n+2023-01-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++20/tzdb.cc (tzdata_stream): Use constant instead of\n+\tstring literal.\n+\n+2023-01-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/108554\n+\t* testsuite/23_containers/map/modifiers/108554.cc: Use dg-bogus.\n+\n 2023-01-26  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* src/c++20/tzdb.cc (operator>>(istream&, ZoneInfo&)): Allow"}]}