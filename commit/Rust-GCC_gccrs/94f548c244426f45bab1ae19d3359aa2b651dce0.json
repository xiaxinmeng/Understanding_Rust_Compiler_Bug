{"sha": "94f548c244426f45bab1ae19d3359aa2b651dce0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRmNTQ4YzI0NDQyNmY0NWJhYjFhZTE5ZDMzNTlhYTJiNjUxZGNlMA==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-08-03T21:26:10Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-08-03T21:26:10Z"}, "message": "re PR fortran/31202 (Incorrect rounding generated for NINT)\n\n        PR fortran/31202\n\n        * f95-lang.c (gfc_init_builtin_functions): Defin builtins for \n        lround{f,,l} and llround{f,,l}.\n        * trans-intrinsic.c (build_fix_expr): Generate calls to the\n        {l,}round{f,,l} functions.\n\n        * intrinsics/c99_functions.c (roundl,lroundf,lround,lroundl,\n        llroundf,llround,llroundl): New functions.\n        * c99_protos.h (roundl,lroundf,lround,lroundl,llroundf,llround,\n        llroundl): New prototypes.\n        * configure.ac: Check for lroundf, lround, lroundl, llroundf,\n        llround and llroundl.\n        * configure: Regenerate.\n        * Makefile.in: Regenerate.\n        * config.h.in: Regenerate.\n\n        * gfortran.dg/nint_2.f90: New test.\n\nFrom-SVN: r127185", "tree": {"sha": "b3c3360111641d52b502bddd36c0a4ce24d565cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3c3360111641d52b502bddd36c0a4ce24d565cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94f548c244426f45bab1ae19d3359aa2b651dce0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94f548c244426f45bab1ae19d3359aa2b651dce0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94f548c244426f45bab1ae19d3359aa2b651dce0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94f548c244426f45bab1ae19d3359aa2b651dce0/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8db6f5454c392b098080e297de645be106d621af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8db6f5454c392b098080e297de645be106d621af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8db6f5454c392b098080e297de645be106d621af"}], "stats": {"total": 799, "additions": 768, "deletions": 31}, "files": [{"sha": "5d1695bf2e4d13d49ee7e8ed89d3f6d9b08997c0", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f548c244426f45bab1ae19d3359aa2b651dce0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f548c244426f45bab1ae19d3359aa2b651dce0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=94f548c244426f45bab1ae19d3359aa2b651dce0", "patch": "@@ -1,3 +1,11 @@\n+2007-08-03  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/31202\n+\t* f95-lang.c (gfc_init_builtin_functions): Defin builtins for \n+\tlround{f,,l} and llround{f,,l}.\n+\t* trans-intrinsic.c (build_fix_expr): Generate calls to the\n+\t{l,}round{f,,l} functions.\n+\n 2007-08-01  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR libfortran/32954"}, {"sha": "425f4d3fecde7c4002b14d82288dacb9d3fb0349", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f548c244426f45bab1ae19d3359aa2b651dce0/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f548c244426f45bab1ae19d3359aa2b651dce0/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=94f548c244426f45bab1ae19d3359aa2b651dce0", "patch": "@@ -852,7 +852,7 @@ gfc_init_builtin_functions (void)\n   tree func_double_doublep_doublep;\n   tree func_longdouble_longdoublep_longdoublep;\n   tree ftype, ptype;\n-  tree tmp;\n+  tree tmp, type;\n   tree builtin_types[(int) BT_LAST + 1];\n \n   build_builtin_fntypes (mfunc_float, float_type_node);\n@@ -942,6 +942,31 @@ gfc_init_builtin_functions (void)\n   gfc_define_builtin (\"__builtin_fmodf\", mfunc_float[1], \n \t\t      BUILT_IN_FMODF, \"fmodf\", true);\n \n+  /* lround{f,,l} and llround{f,,l} */\n+  type = tree_cons (NULL_TREE, float_type_node, void_list_node);\n+  tmp = build_function_type (long_integer_type_node, type); \n+  gfc_define_builtin (\"__builtin_lroundf\", tmp, BUILT_IN_LROUNDF,\n+\t\t      \"lroundf\", true);\n+  tmp = build_function_type (long_long_integer_type_node, type); \n+  gfc_define_builtin (\"__builtin_llroundf\", tmp, BUILT_IN_LLROUNDF,\n+\t\t      \"llroundf\", true);\n+\n+  type = tree_cons (NULL_TREE, double_type_node, void_list_node);\n+  tmp = build_function_type (long_integer_type_node, type); \n+  gfc_define_builtin (\"__builtin_lround\", tmp, BUILT_IN_LROUND,\n+\t\t      \"lround\", true);\n+  tmp = build_function_type (long_long_integer_type_node, type); \n+  gfc_define_builtin (\"__builtin_llround\", tmp, BUILT_IN_LLROUND,\n+\t\t      \"llround\", true);\n+\n+  type = tree_cons (NULL_TREE, long_double_type_node, void_list_node);\n+  tmp = build_function_type (long_integer_type_node, type); \n+  gfc_define_builtin (\"__builtin_lroundl\", tmp, BUILT_IN_LROUNDL,\n+\t\t      \"lroundl\", true);\n+  tmp = build_function_type (long_long_integer_type_node, type); \n+  gfc_define_builtin (\"__builtin_llroundl\", tmp, BUILT_IN_LLROUNDL,\n+\t\t      \"llroundl\", true);\n+\n   /* These are used to implement the ** operator.  */\n   gfc_define_builtin (\"__builtin_powl\", mfunc_longdouble[1], \n \t\t      BUILT_IN_POWL, \"powl\", true);"}, {"sha": "dc672401b42dd213d2e1e02c196fb25e034033cd", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 49, "deletions": 21, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f548c244426f45bab1ae19d3359aa2b651dce0/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f548c244426f45bab1ae19d3359aa2b651dce0/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=94f548c244426f45bab1ae19d3359aa2b651dce0", "patch": "@@ -25,6 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n+#include \"tm.h\"\n #include \"tree.h\"\n #include \"ggc.h\"\n #include \"toplev.h\"\n@@ -308,34 +309,57 @@ build_fixbound_expr (stmtblock_t * pblock, tree arg, tree type, int up)\n }\n \n \n-/* This is needed because the gcc backend only implements FIX_TRUNC_EXPR\n-   NINT(x) = INT(x + ((x > 0) ? 0.5 : -0.5)).  */\n+/* Round to nearest integer, away from zero.  */\n \n static tree\n-build_round_expr (stmtblock_t * pblock, tree arg, tree type)\n+build_round_expr (tree arg, tree restype)\n {\n   tree tmp;\n-  tree cond;\n-  tree neg;\n-  tree pos;\n   tree argtype;\n-  REAL_VALUE_TYPE r;\n+  tree fn;\n+  bool longlong, convert;\n+  int argprec, resprec;\n \n   argtype = TREE_TYPE (arg);\n-  arg = gfc_evaluate_now (arg, pblock);\n+  argprec = TYPE_PRECISION (argtype);\n+  resprec = TYPE_PRECISION (restype);\n \n-  real_from_string (&r, \"0.5\");\n-  pos = build_real (argtype, r);\n-\n-  real_from_string (&r, \"-0.5\");\n-  neg = build_real (argtype, r);\n+  /* Depending on the type of the result, choose the long int intrinsic\n+     (lround family) or long long intrinsic (llround).  We might also\n+     need to convert the result afterwards.  */\n+  if (resprec <= LONG_TYPE_SIZE)\n+    {\n+      longlong = false;\n+      if (resprec != LONG_TYPE_SIZE)\n+\tconvert = true;\n+      else\n+\tconvert = false;\n+    }\n+  else if (resprec <= LONG_LONG_TYPE_SIZE)\n+    {\n+      longlong = true;\n+      if (resprec != LONG_LONG_TYPE_SIZE)\n+\tconvert = true;\n+      else\n+\tconvert = false;\n+    }\n+  else\n+    gcc_unreachable ();\n \n-  tmp = gfc_build_const (argtype, integer_zero_node);\n-  cond = fold_build2 (GT_EXPR, boolean_type_node, arg, tmp);\n+  /* Now, depending on the argument type, we choose between intrinsics.  */\n+  if (argprec == TYPE_PRECISION (float_type_node))\n+    fn = built_in_decls[longlong ? BUILT_IN_LLROUNDF : BUILT_IN_LROUNDF];\n+  else if (argprec == TYPE_PRECISION (double_type_node))\n+    fn = built_in_decls[longlong ? BUILT_IN_LLROUND : BUILT_IN_LROUND];\n+  else if (argprec == TYPE_PRECISION (long_double_type_node))\n+    fn = built_in_decls[longlong ? BUILT_IN_LLROUNDL : BUILT_IN_LROUNDL];\n+  else\n+    gcc_unreachable ();\n \n-  tmp = fold_build3 (COND_EXPR, argtype, cond, pos, neg);\n-  tmp = fold_build2 (PLUS_EXPR, argtype, arg, tmp);\n-  return fold_build1 (FIX_TRUNC_EXPR, type, tmp);\n+  tmp = build_call_expr (fn, 1, arg);\n+  if (convert)\n+    tmp = fold_convert (restype, tmp);\n+  return tmp;\n }\n \n \n@@ -358,11 +382,15 @@ build_fix_expr (stmtblock_t * pblock, tree arg, tree type,\n       break;\n \n     case RND_ROUND:\n-      return build_round_expr (pblock, arg, type);\n+      return build_round_expr (arg, type);\n+      break;\n \n-    default:\n-      gcc_assert (op == RND_TRUNC);\n+    case RND_TRUNC:\n       return build1 (FIX_TRUNC_EXPR, type, arg);\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n     }\n }\n "}, {"sha": "e548278c3be11bf2ffaa0a0efe9f330ebdb853a4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f548c244426f45bab1ae19d3359aa2b651dce0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f548c244426f45bab1ae19d3359aa2b651dce0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=94f548c244426f45bab1ae19d3359aa2b651dce0", "patch": "@@ -1,3 +1,8 @@\n+2007-08-03  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/31202\n+\t* gfortran.dg/nint_2.f90: New test.\n+\n 2007-08-03  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* gcc.dg/tree-ssa/loop-1.c: Skip on powerpc targets if -mlongcall."}, {"sha": "b993cb45140dc234fd19b8d143d75d80ef069eeb", "filename": "gcc/testsuite/gfortran.dg/nint_2.f90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f548c244426f45bab1ae19d3359aa2b651dce0/gcc%2Ftestsuite%2Fgfortran.dg%2Fnint_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f548c244426f45bab1ae19d3359aa2b651dce0/gcc%2Ftestsuite%2Fgfortran.dg%2Fnint_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnint_2.f90?ref=94f548c244426f45bab1ae19d3359aa2b651dce0", "patch": "@@ -0,0 +1,51 @@\n+! Test that NINT gives right results even in corner cases\n+!\n+! PR 31202\n+! http://gcc.gnu.org/ml/fortran/2005-04/msg00139.html\n+!\n+! { dg-do run }\n+  real(kind=8) :: a\n+  integer(kind=8) :: i1, i2\n+  real :: b\n+  integer :: j1, j2\n+\n+  a = nearest(0.5_8,-1.0_8)\n+  i2 = nint(nearest(0.5_8,-1.0_8))\n+  i1 = nint(a)\n+  if (i1 /= 0 .or. i2 /= 0) call abort\n+\n+  a = 0.5_8\n+  i2 = nint(0.5_8)\n+  i1 = nint(a)\n+  if (i1 /= 1 .or. i2 /= 1) call abort\n+\n+  a = nearest(0.5_8,1.0_8)\n+  i2 = nint(nearest(0.5_8,1.0_8))\n+  i1 = nint(a)\n+  if (i1 /= 1 .or. i2 /= 1) call abort\n+\n+  b = nearest(0.5,-1.0)\n+  j2 = nint(nearest(0.5,-1.0))\n+  j1 = nint(b)\n+  if (j1 /= 0 .or. j2 /= 0) call abort\n+\n+  b = 0.5\n+  j2 = nint(0.5)\n+  j1 = nint(b)\n+  if (j1 /= 1 .or. j2 /= 1) call abort\n+\n+  b = nearest(0.5,1.0)\n+  j2 = nint(nearest(0.5,1.0))\n+  j1 = nint(b)\n+  if (j1 /= 1 .or. j2 /= 1) call abort\n+\n+  a = 4503599627370497.0_8\n+  i1 = nint(a,kind=8)\n+  i2 = nint(4503599627370497.0_8,kind=8)\n+  if (i1 /= i2 .or. i1 /= 4503599627370497_8) call abort\n+\n+  a = -4503599627370497.0_8\n+  i1 = nint(a,kind=8)\n+  i2 = nint(-4503599627370497.0_8,kind=8)\n+  if (i1 /= i2 .or. i1 /= -4503599627370497_8) call abort\n+  end"}, {"sha": "eb03d0ad688ec8266d5c6bbf62944d7833873281", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f548c244426f45bab1ae19d3359aa2b651dce0/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f548c244426f45bab1ae19d3359aa2b651dce0/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=94f548c244426f45bab1ae19d3359aa2b651dce0", "patch": "@@ -1,3 +1,16 @@\n+2007-08-03  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/31202\n+\t* intrinsics/c99_functions.c (roundl,lroundf,lround,lroundl,\n+\tllroundf,llround,llroundl): New functions.\n+\t* c99_protos.h (roundl,lroundf,lround,lroundl,llroundf,llround,\n+\tllroundl): New prototypes.\n+\t* configure.ac: Check for lroundf, lround, lroundl, llroundf,\n+\tllround and llroundl.\n+\t* configure: Regenerate.\n+\t* Makefile.in: Regenerate.\n+\t* config.h.in: Regenerate.\n+\n 2007-07-30  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* libgfortran.h: Include <stdarg.h>."}, {"sha": "9d78ad24823e054b63b959662cb54b660012dd31", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f548c244426f45bab1ae19d3359aa2b651dce0/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f548c244426f45bab1ae19d3359aa2b651dce0/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=94f548c244426f45bab1ae19d3359aa2b651dce0", "patch": "@@ -50,8 +50,8 @@ am__aclocal_m4_deps = $(top_srcdir)/../config/depstand.m4 \\\n \t$(top_srcdir)/../config/multi.m4 \\\n \t$(top_srcdir)/../config/stdint.m4 \\\n \t$(top_srcdir)/../ltoptions.m4 $(top_srcdir)/../ltsugar.m4 \\\n-\t$(top_srcdir)/../ltversion.m4 $(top_srcdir)/acinclude.m4 \\\n-\t$(top_srcdir)/../config/acx.m4 \\\n+\t$(top_srcdir)/../ltversion.m4 $(top_srcdir)/../lt~obsolete.m4 \\\n+\t$(top_srcdir)/acinclude.m4 $(top_srcdir)/../config/acx.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n \t$(top_srcdir)/../libtool.m4 $(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n@@ -343,9 +343,13 @@ SET_MAKE = @SET_MAKE@\n SHELL = @SHELL@\n STRIP = @STRIP@\n VERSION = @VERSION@\n+ac_ct_AR = @ac_ct_AR@\n+ac_ct_AS = @ac_ct_AS@\n ac_ct_CC = @ac_ct_CC@\n ac_ct_DUMPBIN = @ac_ct_DUMPBIN@\n ac_ct_FC = @ac_ct_FC@\n+ac_ct_RANLIB = @ac_ct_RANLIB@\n+ac_ct_STRIP = @ac_ct_STRIP@\n am__fastdepCC_FALSE = @am__fastdepCC_FALSE@\n am__fastdepCC_TRUE = @am__fastdepCC_TRUE@\n am__include = @am__include@\n@@ -362,9 +366,6 @@ build_os = @build_os@\n build_subdir = @build_subdir@\n build_vendor = @build_vendor@\n datadir = @datadir@\n-datarootdir = @datarootdir@\n-docdir = @docdir@\n-dvidir = @dvidir@\n enable_shared = @enable_shared@\n enable_static = @enable_static@\n exec_prefix = @exec_prefix@\n@@ -375,23 +376,19 @@ host_cpu = @host_cpu@\n host_os = @host_os@\n host_subdir = @host_subdir@\n host_vendor = @host_vendor@\n-htmldir = @htmldir@\n includedir = @includedir@\n infodir = @infodir@\n install_sh = @install_sh@\n libdir = @libdir@\n libexecdir = @libexecdir@\n-localedir = @localedir@\n localstatedir = @localstatedir@\n lt_ECHO = @lt_ECHO@\n mandir = @mandir@\n mkdir_p = @mkdir_p@\n multi_basedir = @multi_basedir@\n oldincludedir = @oldincludedir@\n-pdfdir = @pdfdir@\n prefix = @prefix@\n program_transform_name = @program_transform_name@\n-psdir = @psdir@\n sbindir = @sbindir@\n sharedstatedir = @sharedstatedir@\n sysconfdir = @sysconfdir@"}, {"sha": "c4738db51a0bb12b46abb819ac33056615387286", "filename": "libgfortran/c99_protos.h", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f548c244426f45bab1ae19d3359aa2b651dce0/libgfortran%2Fc99_protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f548c244426f45bab1ae19d3359aa2b651dce0/libgfortran%2Fc99_protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fc99_protos.h?ref=94f548c244426f45bab1ae19d3359aa2b651dce0", "patch": "@@ -200,6 +200,43 @@ extern double round(double);\n extern float roundf(float);\n #endif\n \n+#if !defined(HAVE_ROUNDL) && defined(HAVE_CEILL)\n+#define HAVE_ROUNDL 1\n+extern long double roundl(long double);\n+#endif\n+\n+\n+\n+#if !defined(HAVE_LROUNDF) && defined(HAVE_ROUNDF)\n+#define HAVE_LROUNDF 1\n+long int lroundf (float);\n+#endif\n+\n+#if !defined(HAVE_LROUND) && defined(HAVE_ROUND)\n+#define HAVE_LROUND 1\n+long int lround (double);\n+#endif\n+\n+#if !defined(HAVE_LROUNDL) && defined(HAVE_ROUNDL)\n+#define HAVE_LROUNDL 1\n+long int lroundl (long double);\n+#endif\n+\n+#if !defined(HAVE_LLROUNDF) && defined(HAVE_ROUNDF)\n+#define HAVE_LLROUNDF 1\n+long long int llroundf (float);\n+#endif\n+\n+#if !defined(HAVE_LLROUND) && defined(HAVE_ROUND)\n+#define HAVE_LLROUND 1\n+long long int llround (double);\n+#endif\n+\n+#if !defined(HAVE_LLROUNDL) && defined(HAVE_ROUNDL)\n+#define HAVE_LLROUNDL 1\n+long long int llroundl (long double);\n+#endif\n+\n /* Wrappers for systems without the various C99 single precision Bessel\n    functions.  */\n "}, {"sha": "4099c39894ffdc65aa0782bb1954881a368d2403", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f548c244426f45bab1ae19d3359aa2b651dce0/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f548c244426f45bab1ae19d3359aa2b651dce0/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=94f548c244426f45bab1ae19d3359aa2b651dce0", "patch": "@@ -480,6 +480,15 @@\n /* Define to 1 if you have the `link' function. */\n #undef HAVE_LINK\n \n+/* libm includes llround */\n+#undef HAVE_LLROUND\n+\n+/* libm includes llroundf */\n+#undef HAVE_LLROUNDF\n+\n+/* libm includes llroundl */\n+#undef HAVE_LLROUNDL\n+\n /* libm includes log */\n #undef HAVE_LOG\n \n@@ -498,6 +507,15 @@\n /* libm includes logl */\n #undef HAVE_LOGL\n \n+/* libm includes lround */\n+#undef HAVE_LROUND\n+\n+/* libm includes lroundf */\n+#undef HAVE_LROUNDF\n+\n+/* libm includes lroundl */\n+#undef HAVE_LROUNDL\n+\n /* Define to 1 if you have the `lstat' function. */\n #undef HAVE_LSTAT\n "}, {"sha": "b9a0cf5bf4b8799cb8de309dc5ec1a2d8cbe2a62", "filename": "libgfortran/configure", "status": "modified", "additions": 462, "deletions": 0, "changes": 462, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f548c244426f45bab1ae19d3359aa2b651dce0/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f548c244426f45bab1ae19d3359aa2b651dce0/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=94f548c244426f45bab1ae19d3359aa2b651dce0", "patch": "@@ -26314,6 +26314,468 @@ _ACEOF\n \n fi\n \n+echo \"$as_me:$LINENO: checking for lroundf in -lm\" >&5\n+echo $ECHO_N \"checking for lroundf in -lm... $ECHO_C\" >&6\n+if test \"${ac_cv_lib_m_lroundf+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char lroundf ();\n+int\n+main ()\n+{\n+lroundf ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_lib_m_lroundf=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_lib_m_lroundf=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_lib_m_lroundf\" >&5\n+echo \"${ECHO_T}$ac_cv_lib_m_lroundf\" >&6\n+if test $ac_cv_lib_m_lroundf = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_LROUNDF 1\n+_ACEOF\n+\n+fi\n+\n+echo \"$as_me:$LINENO: checking for lround in -lm\" >&5\n+echo $ECHO_N \"checking for lround in -lm... $ECHO_C\" >&6\n+if test \"${ac_cv_lib_m_lround+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char lround ();\n+int\n+main ()\n+{\n+lround ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_lib_m_lround=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_lib_m_lround=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_lib_m_lround\" >&5\n+echo \"${ECHO_T}$ac_cv_lib_m_lround\" >&6\n+if test $ac_cv_lib_m_lround = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_LROUND 1\n+_ACEOF\n+\n+fi\n+\n+echo \"$as_me:$LINENO: checking for lroundl in -lm\" >&5\n+echo $ECHO_N \"checking for lroundl in -lm... $ECHO_C\" >&6\n+if test \"${ac_cv_lib_m_lroundl+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char lroundl ();\n+int\n+main ()\n+{\n+lroundl ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_lib_m_lroundl=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_lib_m_lroundl=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_lib_m_lroundl\" >&5\n+echo \"${ECHO_T}$ac_cv_lib_m_lroundl\" >&6\n+if test $ac_cv_lib_m_lroundl = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_LROUNDL 1\n+_ACEOF\n+\n+fi\n+\n+echo \"$as_me:$LINENO: checking for llroundf in -lm\" >&5\n+echo $ECHO_N \"checking for llroundf in -lm... $ECHO_C\" >&6\n+if test \"${ac_cv_lib_m_llroundf+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char llroundf ();\n+int\n+main ()\n+{\n+llroundf ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_lib_m_llroundf=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_lib_m_llroundf=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_lib_m_llroundf\" >&5\n+echo \"${ECHO_T}$ac_cv_lib_m_llroundf\" >&6\n+if test $ac_cv_lib_m_llroundf = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_LLROUNDF 1\n+_ACEOF\n+\n+fi\n+\n+echo \"$as_me:$LINENO: checking for llround in -lm\" >&5\n+echo $ECHO_N \"checking for llround in -lm... $ECHO_C\" >&6\n+if test \"${ac_cv_lib_m_llround+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char llround ();\n+int\n+main ()\n+{\n+llround ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_lib_m_llround=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_lib_m_llround=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_lib_m_llround\" >&5\n+echo \"${ECHO_T}$ac_cv_lib_m_llround\" >&6\n+if test $ac_cv_lib_m_llround = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_LLROUND 1\n+_ACEOF\n+\n+fi\n+\n+echo \"$as_me:$LINENO: checking for llroundl in -lm\" >&5\n+echo $ECHO_N \"checking for llroundl in -lm... $ECHO_C\" >&6\n+if test \"${ac_cv_lib_m_llroundl+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char llroundl ();\n+int\n+main ()\n+{\n+llroundl ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_lib_m_llroundl=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_lib_m_llroundl=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_lib_m_llroundl\" >&5\n+echo \"${ECHO_T}$ac_cv_lib_m_llroundl\" >&6\n+if test $ac_cv_lib_m_llroundl = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_LLROUNDL 1\n+_ACEOF\n+\n+fi\n+\n echo \"$as_me:$LINENO: checking for scalbnf in -lm\" >&5\n echo $ECHO_N \"checking for scalbnf in -lm... $ECHO_C\" >&6\n if test \"${ac_cv_lib_m_scalbnf+set}\" = set; then"}, {"sha": "8709e16472b8f2b228a3ae6d33921da64662dfd9", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f548c244426f45bab1ae19d3359aa2b651dce0/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f548c244426f45bab1ae19d3359aa2b651dce0/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=94f548c244426f45bab1ae19d3359aa2b651dce0", "patch": "@@ -301,6 +301,12 @@ AC_CHECK_LIB([m],[cpowl],[AC_DEFINE([HAVE_CPOWL],[1],[libm includes cpowl])])\n AC_CHECK_LIB([m],[roundf],[AC_DEFINE([HAVE_ROUNDF],[1],[libm includes roundf])])\n AC_CHECK_LIB([m],[round],[AC_DEFINE([HAVE_ROUND],[1],[libm includes round])])\n AC_CHECK_LIB([m],[roundl],[AC_DEFINE([HAVE_ROUNDL],[1],[libm includes roundl])])\n+AC_CHECK_LIB([m],[lroundf],[AC_DEFINE([HAVE_LROUNDF],[1],[libm includes lroundf])])\n+AC_CHECK_LIB([m],[lround],[AC_DEFINE([HAVE_LROUND],[1],[libm includes lround])])\n+AC_CHECK_LIB([m],[lroundl],[AC_DEFINE([HAVE_LROUNDL],[1],[libm includes lroundl])])\n+AC_CHECK_LIB([m],[llroundf],[AC_DEFINE([HAVE_LLROUNDF],[1],[libm includes llroundf])])\n+AC_CHECK_LIB([m],[llround],[AC_DEFINE([HAVE_LLROUND],[1],[libm includes llround])])\n+AC_CHECK_LIB([m],[llroundl],[AC_DEFINE([HAVE_LLROUNDL],[1],[libm includes llroundl])])\n AC_CHECK_LIB([m],[scalbnf],[AC_DEFINE([HAVE_SCALBNF],[1],[libm includes scalbnf])])\n AC_CHECK_LIB([m],[scalbn],[AC_DEFINE([HAVE_SCALBN],[1],[libm includes scalbn])])\n AC_CHECK_LIB([m],[scalbnl],[AC_DEFINE([HAVE_SCALBNL],[1],[libm includes scalbnl])])"}, {"sha": "e36c5ba73be0ba14904e035db9e55df22d4678b9", "filename": "libgfortran/intrinsics/c99_functions.c", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f548c244426f45bab1ae19d3359aa2b651dce0/libgfortran%2Fintrinsics%2Fc99_functions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f548c244426f45bab1ae19d3359aa2b651dce0/libgfortran%2Fintrinsics%2Fc99_functions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fc99_functions.c?ref=94f548c244426f45bab1ae19d3359aa2b651dce0", "patch": "@@ -500,6 +500,35 @@ powf(float x, float y)\n \n /* Algorithm by Steven G. Kargl.  */\n \n+#if !defined(HAVE_ROUNDL) && defined(HAVE_CEILL)\n+#define HAVE_ROUNDL 1\n+/* Round to nearest integral value.  If the argument is halfway between two\n+   integral values then round away from zero.  */\n+\n+long double\n+roundl(long double x)\n+{\n+   long double t;\n+   if (!isfinite (x))\n+     return (x);\n+\n+   if (x >= 0.0)\n+    {\n+      t = ceill(x);\n+      if (t - x > 0.5)\n+\tt -= 1.0;\n+      return (t);\n+    } \n+   else \n+    {\n+      t = ceill(-x);\n+      if (t + x > 0.5)\n+\tt -= 1.0;\n+      return (-t);\n+    }\n+}\n+#endif\n+\n #ifndef HAVE_ROUND\n #define HAVE_ROUND 1\n /* Round to nearest integral value.  If the argument is halfway between two\n@@ -558,6 +587,64 @@ roundf(float x)\n }\n #endif\n \n+\n+/* lround{f,,l} and llround{f,,l} functions.  */\n+\n+#if !defined(HAVE_LROUNDF) && defined(HAVE_ROUNDF)\n+#define HAVE_LROUNDF 1\n+long int\n+lroundf (float x)\n+{\n+  return (long int) roundf (x);\n+}\n+#endif\n+\n+#if !defined(HAVE_LROUND) && defined(HAVE_ROUND)\n+#define HAVE_LROUND 1\n+long int\n+lround (double x)\n+{\n+  return (long int) round (x);\n+}\n+#endif\n+\n+#if !defined(HAVE_LROUNDL) && defined(HAVE_ROUNDL)\n+#define HAVE_LROUNDL 1\n+long int\n+lroundl (long double x)\n+{\n+  return (long long int) roundl (x);\n+}\n+#endif\n+\n+#if !defined(HAVE_LLROUNDF) && defined(HAVE_ROUNDF)\n+#define HAVE_LLROUNDF 1\n+long long int\n+llroundf (float x)\n+{\n+  return (long long int) roundf (x);\n+}\n+#endif\n+\n+#if !defined(HAVE_LLROUND) && defined(HAVE_ROUND)\n+#define HAVE_LLROUND 1\n+long long int\n+llround (double x)\n+{\n+  return (long long int) round (x);\n+}\n+#endif\n+\n+#if !defined(HAVE_LLROUNDL) && defined(HAVE_ROUNDL)\n+#define HAVE_LLROUNDL 1\n+long long int\n+llroundl (long double x)\n+{\n+  return (long long int) roundl (x);\n+}\n+#endif\n+\n+\n #ifndef HAVE_LOG10L\n #define HAVE_LOG10L 1\n /* log10 function for long double variables. The version provided here"}]}