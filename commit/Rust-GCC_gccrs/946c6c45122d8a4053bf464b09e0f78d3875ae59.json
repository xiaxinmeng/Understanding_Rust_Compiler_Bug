{"sha": "946c6c45122d8a4053bf464b09e0f78d3875ae59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ2YzZjNDUxMjJkOGE0MDUzYmY0NjRiMDllMGY3OGQzODc1YWU1OQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2018-01-11T15:18:04Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2018-01-11T15:18:04Z"}, "message": "[arm][1/3] Add -march=armv8.4-a option\n\nThis patch adds support for the Armv8.4-A architecture [1]\nin the arm backend. This is done through the new\n-march=armv8.4-a option.\n\nWith this patch armv8.4-a is recognised as an argument\nand supports the extensions: simd, fp16, crypto, nocrypto,\nnofp with the familiar meaning of these options.\nWorth noting that there is no dotprod option like in\narmv8.2-a and armv8.3-a because Dot Product support is\nmandatory in Armv8.4-A when simd is available, so when using\n+simd (of fp16 which enables +simd), the +dotprod is implied.\n\nThe various multilib selection makefile fragments are updated\ntoo and the mutlilib.exp test gets a few armv8.4-a combination\ntests.\n\nBootstrapped and tested on arm-none-linux-gnueabihf.\n\nFrom-SVN: r256537", "tree": {"sha": "19c3c56aa8e19c22fede24b78d67af126a74ef84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19c3c56aa8e19c22fede24b78d67af126a74ef84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/946c6c45122d8a4053bf464b09e0f78d3875ae59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/946c6c45122d8a4053bf464b09e0f78d3875ae59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/946c6c45122d8a4053bf464b09e0f78d3875ae59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/946c6c45122d8a4053bf464b09e0f78d3875ae59/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "99eeb64cc4b1f9bf23208e2a49e4b6c40dc7aa0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99eeb64cc4b1f9bf23208e2a49e4b6c40dc7aa0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99eeb64cc4b1f9bf23208e2a49e4b6c40dc7aa0e"}], "stats": {"total": 96, "additions": 89, "deletions": 7}, "files": [{"sha": "6203382d553d728960600cc420cb18cbfe9cea4d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/946c6c45122d8a4053bf464b09e0f78d3875ae59/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/946c6c45122d8a4053bf464b09e0f78d3875ae59/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=946c6c45122d8a4053bf464b09e0f78d3875ae59", "patch": "@@ -1,3 +1,15 @@\n+2017-01-11  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/arm-cpus.in (armv8_4): New feature.\n+\t(ARMv8_4a): New fgroup.\n+\t(armv8.4-a): New arch.\n+\t* config/arm/arm-tables.opt: Regenerate.\n+\t* config/arm/t-aprofile: Add matching rules for -march=armv8.4-a.\n+\t* config/arm/t-arm-elf (all_v8_archs): Add armv8.4-a.\n+\t* config/arm/t-multilib (v8_4_a_simd_variants): New variable.\n+\tAdd matching rules for -march=armv8.4-a and extensions.\n+\t* doc/invoke.texi (ARM Options): Document -march=armv8.4-a.\n+\n 2018-01-11  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/81821"}, {"sha": "2ea407115d0f29bc77ca839bf2bbdd2e13adfd90", "filename": "gcc/config/arm/arm-cpus.in", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/946c6c45122d8a4053bf464b09e0f78d3875ae59/gcc%2Fconfig%2Farm%2Farm-cpus.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/946c6c45122d8a4053bf464b09e0f78d3875ae59/gcc%2Fconfig%2Farm%2Farm-cpus.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpus.in?ref=946c6c45122d8a4053bf464b09e0f78d3875ae59", "patch": "@@ -120,6 +120,9 @@ define feature armv8_2\n # Architecture rel 8.3.\n define feature armv8_3\n \n+# Architecture rel 8.4.\n+define feature armv8_4\n+\n # M-Profile security extensions.\n define feature cmse\n \n@@ -242,6 +245,7 @@ define fgroup ARMv8a      ARMv7ve armv8\n define fgroup ARMv8_1a    ARMv8a crc32 armv8_1\n define fgroup ARMv8_2a    ARMv8_1a armv8_2\n define fgroup ARMv8_3a    ARMv8_2a armv8_3\n+define fgroup ARMv8_4a    ARMv8_3a armv8_4\n define fgroup ARMv8m_base ARMv6m armv8 cmse tdiv\n define fgroup ARMv8m_main ARMv7m armv8 cmse\n define fgroup ARMv8r      ARMv8a\n@@ -597,6 +601,19 @@ begin arch armv8.3-a\n  option dotprod add FP_ARMv8 DOTPROD\n end arch armv8.3-a\n \n+begin arch armv8.4-a\n+ tune for cortex-a53\n+ tune flags CO_PROC\n+ base 8A\n+ profile A\n+ isa ARMv8_4a\n+ option simd add FP_ARMv8 DOTPROD\n+ option fp16 add fp16 FP_ARMv8 DOTPROD\n+ option crypto add FP_ARMv8 CRYPTO DOTPROD\n+ option nocrypto remove ALL_CRYPTO\n+ option nofp remove ALL_FP\n+end arch armv8.4-a\n+\n begin arch armv8-m.base\n  tune for cortex-m23\n  base 8M_BASE"}, {"sha": "60e5065b398f40bf969a53fd063d263908b0818e", "filename": "gcc/config/arm/arm-tables.opt", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/946c6c45122d8a4053bf464b09e0f78d3875ae59/gcc%2Fconfig%2Farm%2Farm-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/946c6c45122d8a4053bf464b09e0f78d3875ae59/gcc%2Fconfig%2Farm%2Farm-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tables.opt?ref=946c6c45122d8a4053bf464b09e0f78d3875ae59", "patch": "@@ -455,19 +455,22 @@ EnumValue\n Enum(arm_arch) String(armv8.3-a) Value(29)\n \n EnumValue\n-Enum(arm_arch) String(armv8-m.base) Value(30)\n+Enum(arm_arch) String(armv8.4-a) Value(30)\n \n EnumValue\n-Enum(arm_arch) String(armv8-m.main) Value(31)\n+Enum(arm_arch) String(armv8-m.base) Value(31)\n \n EnumValue\n-Enum(arm_arch) String(armv8-r) Value(32)\n+Enum(arm_arch) String(armv8-m.main) Value(32)\n \n EnumValue\n-Enum(arm_arch) String(iwmmxt) Value(33)\n+Enum(arm_arch) String(armv8-r) Value(33)\n \n EnumValue\n-Enum(arm_arch) String(iwmmxt2) Value(34)\n+Enum(arm_arch) String(iwmmxt) Value(34)\n+\n+EnumValue\n+Enum(arm_arch) String(iwmmxt2) Value(35)\n \n Enum\n Name(arm_fpu) Type(enum fpu_type)"}, {"sha": "7b55599d42947fea880483bf0a7a62f33bb1a1fb", "filename": "gcc/config/arm/t-aprofile", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/946c6c45122d8a4053bf464b09e0f78d3875ae59/gcc%2Fconfig%2Farm%2Ft-aprofile", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/946c6c45122d8a4053bf464b09e0f78d3875ae59/gcc%2Fconfig%2Farm%2Ft-aprofile", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-aprofile?ref=946c6c45122d8a4053bf464b09e0f78d3875ae59", "patch": "@@ -96,6 +96,13 @@ MULTILIB_MATCHES\t+= $(foreach ARCH, $(v8_2_a_simd_variants), \\\n \t\t\t     march?armv8-a+simd=march?armv8.2-a$(ARCH) \\\n \t\t\t     march?armv8-a+simd=march?armv8.3-a$(ARCH))\n \n+# Baseline v8.4-a: map down to baseline v8-a\n+MULTILIB_MATCHES\t+= march?armv8-a=march?armv8.4-a\n+\n+# Map all v8.4-a SIMD variants to v8-a+simd\n+MULTILIB_MATCHES\t+= $(foreach ARCH, $(v8_4_a_simd_variants), \\\n+\t\t\t     march?armv8-a+simd=march?armv8.4-a$(ARCH))\n+\n # Use Thumb libraries for everything.\n \n MULTILIB_REUSE\t\t+= mthumb/march.armv7-a/mfloat-abi.soft=marm/march.armv7-a/mfloat-abi.soft"}, {"sha": "afc763c99eb2ada12497b16269e021570f4a892e", "filename": "gcc/config/arm/t-arm-elf", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/946c6c45122d8a4053bf464b09e0f78d3875ae59/gcc%2Fconfig%2Farm%2Ft-arm-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/946c6c45122d8a4053bf464b09e0f78d3875ae59/gcc%2Fconfig%2Farm%2Ft-arm-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm-elf?ref=946c6c45122d8a4053bf464b09e0f78d3875ae59", "patch": "@@ -46,7 +46,7 @@ all_early_arch\t:= armv5e armv5tej armv6 armv6j armv6k armv6z armv6kz \\\n \n all_v7_a_r\t:= armv7-a armv7ve armv7-r\n \n-all_v8_archs\t:= armv8-a armv8-a+crc armv8.1-a armv8.2-a armv8.3-a\n+all_v8_archs\t:= armv8-a armv8-a+crc armv8.1-a armv8.2-a armv8.3-a armv8.4-a\n \n # No floating point variants, require thumb1 softfp\n all_nofp_t\t:= armv6-m armv6s-m armv8-m.base"}, {"sha": "c25a83716423fb5e5663ebe2e04b4e46da803b14", "filename": "gcc/config/arm/t-multilib", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/946c6c45122d8a4053bf464b09e0f78d3875ae59/gcc%2Fconfig%2Farm%2Ft-multilib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/946c6c45122d8a4053bf464b09e0f78d3875ae59/gcc%2Fconfig%2Farm%2Ft-multilib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-multilib?ref=946c6c45122d8a4053bf464b09e0f78d3875ae59", "patch": "@@ -69,7 +69,7 @@ v8_a_nosimd_variants\t:= +crc\n v8_a_simd_variants\t:= $(call all_feat_combs, simd crypto)\n v8_1_a_simd_variants\t:= $(call all_feat_combs, simd crypto)\n v8_2_a_simd_variants\t:= $(call all_feat_combs, simd fp16 crypto dotprod)\n-\n+v8_4_a_simd_variants\t:= $(call all_feat_combs, simd fp16 crypto)\n \n ifneq (,$(HAS_APROFILE))\n include $(srcdir)/config/arm/t-aprofile\n@@ -147,6 +147,13 @@ MULTILIB_MATCHES\t+= $(foreach ARCH, $(v8_2_a_simd_variants), \\\n \t\t\t     march?armv7+fp=march?armv8.2-a$(ARCH) \\\n \t\t\t     march?armv7+fp=march?armv8.3-a$(ARCH))\n \n+# Baseline v8.4-a: map down to baseline v8-a\n+MULTILIB_MATCHES\t+= march?armv7=march?armv8.4-a\n+\n+# Map all v8.4-a SIMD variants\n+MULTILIB_MATCHES\t+= $(foreach ARCH, $(v8_4_a_simd_variants), \\\n+\t\t\t     march?armv7+fp=march?armv8.4-a$(ARCH))\n+\n # Use Thumb libraries for everything.\n \n MULTILIB_REUSE\t\t+= mthumb/march.armv7/mfloat-abi.soft=marm/march.armv7/mfloat-abi.soft"}, {"sha": "99c2214fb1b12dba682e0a92dc1b1c8eef7e655c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/946c6c45122d8a4053bf464b09e0f78d3875ae59/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/946c6c45122d8a4053bf464b09e0f78d3875ae59/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=946c6c45122d8a4053bf464b09e0f78d3875ae59", "patch": "@@ -15676,6 +15676,7 @@ Permissible names are:\n @samp{armv6z}, @samp{armv6zk},\n @samp{armv7}, @samp{armv7-a}, @samp{armv7ve}, \n @samp{armv8-a}, @samp{armv8.1-a}, @samp{armv8.2-a}, @samp{armv8.3-a},\n+@samp{armv8.4-a},\n @samp{armv7-r},\n @samp{armv8-r},\n @samp{armv6-m}, @samp{armv6s-m},\n@@ -15897,6 +15898,28 @@ Disable the cryptographic extension.\n Disable the floating-point, Advanced SIMD and cryptographic instructions.\n @end table\n \n+@item armv8.4-a\n+@table @samp\n+@item +fp16\n+The half-precision floating-point data processing instructions.\n+This also enables the Advanced SIMD and floating-point instructions as well\n+as the Dot Product extension.\n+\n+@item +simd\n+The ARMv8.3-A Advanced SIMD and floating-point instructions as well as the\n+Dot Product extension.\n+\n+@item +crypto\n+The cryptographic instructions.  This also enables the Advanced SIMD and\n+floating-point instructions as well as the Dot Product extension.\n+\n+@item +nocrypto\n+Disable the cryptographic extension.\n+\n+@item +nofp\n+Disable the floating-point, Advanced SIMD and cryptographic instructions.\n+@end table\n+\n @item armv7-r\n @table @samp\n @item +fp.sp"}, {"sha": "224bfc581f1cb48e304ea741357379e60169df2a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/946c6c45122d8a4053bf464b09e0f78d3875ae59/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/946c6c45122d8a4053bf464b09e0f78d3875ae59/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=946c6c45122d8a4053bf464b09e0f78d3875ae59", "patch": "@@ -1,3 +1,8 @@\n+2017-01-11  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/arm/multilib.exp: Add some -march=armv8.4-a\n+\tcombination tests.\n+\n 2018-01-11  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/83435"}, {"sha": "88e98260132394f736ac87c34514a5711c350a5b", "filename": "gcc/testsuite/gcc.target/arm/multilib.exp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/946c6c45122d8a4053bf464b09e0f78d3875ae59/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmultilib.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/946c6c45122d8a4053bf464b09e0f78d3875ae59/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmultilib.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmultilib.exp?ref=946c6c45122d8a4053bf464b09e0f78d3875ae59", "patch": "@@ -92,6 +92,14 @@ if {[multilib_config \"aprofile\"] } {\n \t{-march=armv8.3-a+simd+dotprod -mfloat-abi=softfp} \"thumb/v8-a+simd/softfp\"\n \t{-march=armv8.3-a+simd+dotprod+nofp -mfloat-abi=softfp} \"thumb/v8-a/nofp\"\n \t{-march=armv8.3-a+simd+nofp+dotprod -mfloat-abi=softfp} \"thumb/v8-a+simd/softfp\"\n+\t{-march=armv8.4-a+crypto -mfloat-abi=soft} \"thumb/v8-a/nofp\"\n+\t{-march=armv8.4-a+simd+crypto -mfloat-abi=softfp} \"thumb/v8-a+simd/softfp\"\n+\t{-march=armv8.4-a+simd+crypto+nofp -mfloat-abi=softfp} \"thumb/v8-a/nofp\"\n+\t{-march=armv8.4-a+simd+nofp+crypto -mfloat-abi=softfp} \"thumb/v8-a+simd/softfp\"\n+\t{-march=armv8.4-a+fp16 -mfloat-abi=soft} \"thumb/v8-a/nofp\"\n+\t{-march=armv8.4-a+simd+fp16 -mfloat-abi=softfp} \"thumb/v8-a+simd/softfp\"\n+\t{-march=armv8.4-a+simd+fp16+nofp -mfloat-abi=softfp} \"thumb/v8-a/nofp\"\n+\t{-march=armv8.4-a+simd+nofp+fp16 -mfloat-abi=softfp} \"thumb/v8-a+simd/softfp\"\n \t{-mcpu=cortex-a53+crypto -mfloat-abi=hard} \"thumb/v8-a+simd/hard\"\n \t{-mcpu=cortex-a53+nofp -mfloat-abi=softfp} \"thumb/v8-a/nofp\"\n \t{-march=armv8-a+crc -mfloat-abi=hard -mfpu=vfp} \"thumb/v8-a+simd/hard\""}]}