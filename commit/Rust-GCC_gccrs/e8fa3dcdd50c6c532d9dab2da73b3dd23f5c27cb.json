{"sha": "e8fa3dcdd50c6c532d9dab2da73b3dd23f5c27cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThmYTNkY2RkNTBjNmM1MzJkOWRhYjJkYTczYjNkZDIzZjVjMjdjYg==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2014-07-30T12:52:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-30T12:52:44Z"}, "message": "decl.c (gnat_to_gnu_entity): Create a mere scalar constant instead of a reference for a renaming of scalar...\n\n2014-07-30  Pierre-Marie Derodat  <derodat@adacore.com>\n        \n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <object>: Create a\n\tmere scalar constant instead of a reference for a renaming of\n\tscalar literal.\n\t* gcc-interface/utils.c (renaming_from_generic_instantiation_p): New.\n\t* gcc-interface/gigi.h (renaming_from_generic_instantiation_p): New.\n\nFrom-SVN: r213258", "tree": {"sha": "d4f362f89896e39a21c794408b00edd00f0dbd44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4f362f89896e39a21c794408b00edd00f0dbd44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8fa3dcdd50c6c532d9dab2da73b3dd23f5c27cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8fa3dcdd50c6c532d9dab2da73b3dd23f5c27cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8fa3dcdd50c6c532d9dab2da73b3dd23f5c27cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8fa3dcdd50c6c532d9dab2da73b3dd23f5c27cb/comments", "author": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca"}], "stats": {"total": 58, "additions": 52, "deletions": 6}, "files": [{"sha": "0b04cd7417412026653373d928534329423335f9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8fa3dcdd50c6c532d9dab2da73b3dd23f5c27cb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8fa3dcdd50c6c532d9dab2da73b3dd23f5c27cb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e8fa3dcdd50c6c532d9dab2da73b3dd23f5c27cb", "patch": "@@ -1,3 +1,11 @@\n+2014-07-30  Pierre-Marie Derodat  <derodat@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <object>: Create a\n+\tmere scalar constant instead of a reference for a renaming of\n+\tscalar literal.\n+\t* gcc-interface/utils.c (renaming_from_generic_instantiation_p): New.\n+\t* gcc-interface/gigi.h (renaming_from_generic_instantiation_p): New.\n+\n 2014-07-30  Robert Dewar  <dewar@adacore.com>\n \n \t* s-tasuti.adb, s-tasuti.ads, einfo.ads, sem_prag.adb, s-taasde.adb,"}, {"sha": "10eb6cc25382c5ec01fa1ad0f284c7e65b6fc567", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8fa3dcdd50c6c532d9dab2da73b3dd23f5c27cb/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8fa3dcdd50c6c532d9dab2da73b3dd23f5c27cb/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=e8fa3dcdd50c6c532d9dab2da73b3dd23f5c27cb", "patch": "@@ -349,9 +349,12 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t      || Is_Public (gnat_entity));\n \n   /* Get the name of the entity and set up the line number and filename of\n-     the original definition for use in any decl we make.  */\n+     the original definition for use in any decl we make.  Make sure we do not\n+     inherit another source location.  */\n   gnu_entity_name = get_entity_name (gnat_entity);\n-  Sloc_to_locus (Sloc (gnat_entity), &input_location);\n+  if (Sloc (gnat_entity) != No_Location\n+      && !renaming_from_generic_instantiation_p (gnat_entity))\n+    Sloc_to_locus (Sloc (gnat_entity), &input_location);\n \n   /* For cases when we are not defining (i.e., we are referencing from\n      another compilation unit) public entities, show we are at global level\n@@ -1988,7 +1991,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n       maybe_present = true;\n       break;\n \n-      /* Array and String Types and Subtypes\n+      /* Array Types and Subtypes\n \n \t Unconstrained array types are represented by E_Array_Type and\n \t constrained array types are represented by E_Array_Subtype.  There\n@@ -2001,7 +2004,6 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\tNumber_Dimensions  Number of dimensions (an int).\n \t\tFirst_Index\t   Type of first index.  */\n \n-    case E_String_Type:\n     case E_Array_Type:\n       {\n \tconst bool convention_fortran_p\n@@ -2312,7 +2314,6 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n       }\n       break;\n \n-    case E_String_Subtype:\n     case E_Array_Subtype:\n \n       /* This is the actual data type for array variables.  Multidimensional"}, {"sha": "6d83203981d0720d6e2dda9ad5984ed4bf47c87b", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8fa3dcdd50c6c532d9dab2da73b3dd23f5c27cb/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8fa3dcdd50c6c532d9dab2da73b3dd23f5c27cb/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=e8fa3dcdd50c6c532d9dab2da73b3dd23f5c27cb", "patch": "@@ -1017,6 +1017,12 @@ extern int fp_prec_to_size (int prec);\n /* Return the precision of the FP mode with size SIZE.  */\n extern int fp_size_to_prec (int size);\n \n+/* Return whether GNAT_NODE is a defining identifier for a renaming that comes\n+   from the parameter association for the instantiation of a generic.  We do\n+   not want to emit source location for them: the code generated for their\n+   initialization is likely to disturb debugging.  */\n+extern bool renaming_from_generic_instantiation_p (Node_Id gnat_node);\n+\n #ifdef __cplusplus\n extern \"C\" {\n #endif"}, {"sha": "a9afc53f41f54a54bc3f46b6698604097bec3839", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8fa3dcdd50c6c532d9dab2da73b3dd23f5c27cb/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8fa3dcdd50c6c532d9dab2da73b3dd23f5c27cb/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=e8fa3dcdd50c6c532d9dab2da73b3dd23f5c27cb", "patch": "@@ -580,7 +580,7 @@ gnat_pushdecl (tree decl, Node_Id gnat_node)\n   TREE_NO_WARNING (decl) = (No (gnat_node) || Warnings_Off (gnat_node));\n \n   /* Set the location of DECL and emit a declaration for it.  */\n-  if (Present (gnat_node))\n+  if (Present (gnat_node) && !renaming_from_generic_instantiation_p (gnat_node))\n     Sloc_to_locus (Sloc (gnat_node), &DECL_SOURCE_LOCATION (decl));\n \n   add_decl_expr (decl, gnat_node);\n@@ -2550,6 +2550,37 @@ value_factor_p (tree value, HOST_WIDE_INT factor)\n   return false;\n }\n \n+/* Return whether GNAT_NODE is a defining identifier for a renaming that comes\n+   from the parameter association for the instantiation of a generic.  We do\n+   not want to emit source location for them: the code generated for their\n+   initialization is likely to disturb debugging.  */\n+\n+bool\n+renaming_from_generic_instantiation_p (Node_Id gnat_node)\n+{\n+  if (Nkind (gnat_node) != N_Defining_Identifier\n+      || !IN (Ekind (gnat_node), Object_Kind)\n+      || Comes_From_Source (gnat_node)\n+      || !Present (Renamed_Object (gnat_node)))\n+    return false;\n+\n+  /* Get the object declaration of the renamed object, if any and if the\n+     renamed object is a mere identifier.  */\n+  gnat_node = Renamed_Object (gnat_node);\n+  if (Nkind (gnat_node) != N_Identifier)\n+    return false;\n+\n+  gnat_node = Entity (gnat_node);\n+  if (!Present (Parent (gnat_node)))\n+    return false;\n+\n+  gnat_node = Parent (gnat_node);\n+  return\n+   (Present (gnat_node)\n+    && Nkind (gnat_node) == N_Object_Declaration\n+    && Present (Corresponding_Generic_Association (gnat_node)));\n+}\n+\n /* Return VALUE scaled by the biggest power-of-2 factor of EXPR.  */\n \n static unsigned int"}]}