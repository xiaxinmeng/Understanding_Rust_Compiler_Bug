{"sha": "cf0a9c20a41a9758389a8a4399b2578b06170aa3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YwYTljMjBhNDFhOTc1ODM4OWE4YTQzOTliMjU3OGIwNjE3MGFhMw==", "commit": {"author": {"name": "Janis Johnson", "email": "janisjo@codesourcery.com", "date": "2011-06-27T18:38:00Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2011-06-27T18:38:00Z"}, "message": "target-supports.exp (add_options_for_arm_fp16): Renamed from add_options_for_arm_neon_fp16.\n\n\t* lib/target-supports.exp (add_options_for_arm_fp16): Renamed\n\tfrom add_options_for_arm_neon_fp16.\n\t(check_effective_target_arm_fp16_ok_nocache): Renamed from\n\tcheck_effective_target_arm_neon_fp16_ok_nocache.\n\tCheck -mfpu and -mfloat-abi options from current multilib.\n\tDo not require neon support.\n\t(check_effective_target_arm_fp16_ok): Renamed from\n\tcheck_effecitve_target_arm_neon_fp16_ok.\n\t* g++.dg/ext/arm-fp16/arm-fp16-ops-5.C: Use new names for\n\tarm_neon_fp16_ok and arm_fp16.\n\t* g++.dg/ext/arm-fp16/arm-fp16-ops-6.C: Likewise.\n\t* gcc.dg/torture/arm-fp16-ops-5.c: Likewise.\n\t* gcc.dg/torture/arm-fp16-ops-6.c: Likewise.\n\t* gcc.target/arm/fp16-compile-vcvt.c: Likewise.\n\nFrom-SVN: r175545", "tree": {"sha": "dc4e3e4f6d787f6f488f21320ad319899aa98606", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc4e3e4f6d787f6f488f21320ad319899aa98606"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf0a9c20a41a9758389a8a4399b2578b06170aa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf0a9c20a41a9758389a8a4399b2578b06170aa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf0a9c20a41a9758389a8a4399b2578b06170aa3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf0a9c20a41a9758389a8a4399b2578b06170aa3/comments", "author": null, "committer": null, "parents": [{"sha": "563007852e8d19b66ec8c1e42e431efaaa967dc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/563007852e8d19b66ec8c1e42e431efaaa967dc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/563007852e8d19b66ec8c1e42e431efaaa967dc6"}], "stats": {"total": 103, "additions": 64, "deletions": 39}, "files": [{"sha": "d288bcbdd88161a4202a03dfc1e4778758e32285", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0a9c20a41a9758389a8a4399b2578b06170aa3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0a9c20a41a9758389a8a4399b2578b06170aa3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cf0a9c20a41a9758389a8a4399b2578b06170aa3", "patch": "@@ -1,3 +1,20 @@\n+2011-06-27  Janis Johnson  <janisjo@codesourcery.com>\n+\n+\t* lib/target-supports.exp (add_options_for_arm_fp16): Renamed\n+\tfrom add_options_for_arm_neon_fp16.\n+\t(check_effective_target_arm_fp16_ok_nocache): Renamed from\n+\tcheck_effective_target_arm_neon_fp16_ok_nocache.\n+\tCheck -mfpu and -mfloat-abi options from current multilib.\n+\tDo not require neon support.\n+\t(check_effective_target_arm_fp16_ok): Renamed from\n+\tcheck_effecitve_target_arm_neon_fp16_ok.\n+\t* g++.dg/ext/arm-fp16/arm-fp16-ops-5.C: Use new names for\n+\tarm_neon_fp16_ok and arm_fp16.\n+\t* g++.dg/ext/arm-fp16/arm-fp16-ops-6.C: Likewise.\n+\t* gcc.dg/torture/arm-fp16-ops-5.c: Likewise.\n+\t* gcc.dg/torture/arm-fp16-ops-6.c: Likewise.\n+\t* gcc.target/arm/fp16-compile-vcvt.c: Likewise.\n+\n 2011-06-27  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/builtin-assume-aligned-1.c: New test."}, {"sha": "92bc8a9c04ecbe268a5b24dd6d6af1961bcfe4af", "filename": "gcc/testsuite/g++.dg/ext/arm-fp16/arm-fp16-ops-5.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0a9c20a41a9758389a8a4399b2578b06170aa3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0a9c20a41a9758389a8a4399b2578b06170aa3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops-5.C?ref=cf0a9c20a41a9758389a8a4399b2578b06170aa3", "patch": "@@ -1,8 +1,8 @@\n /* Test various operators on __fp16 and mixed __fp16/float operands.  */\n /* { dg-do compile { target arm*-*-* } } */\n-/* { dg-require-effective-target arm_neon_fp16_ok } */\n+/* { dg-require-effective-target arm_fp16_ok } */\n /* { dg-options \"-mfp16-format=ieee\" } */\n-/* { dg-add-options arm_neon_fp16 } */\n+/* { dg-add-options arm_fp16 } */\n \n #include \"arm-fp16-ops.h\"\n "}, {"sha": "ae40b1e864526fad0a9016b50f36fb70381ac242", "filename": "gcc/testsuite/g++.dg/ext/arm-fp16/arm-fp16-ops-6.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0a9c20a41a9758389a8a4399b2578b06170aa3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0a9c20a41a9758389a8a4399b2578b06170aa3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops-6.C?ref=cf0a9c20a41a9758389a8a4399b2578b06170aa3", "patch": "@@ -1,8 +1,8 @@\n /* Test various operators on __fp16 and mixed __fp16/float operands.  */\n /* { dg-do compile { target arm*-*-* } } */\n-/* { dg-require-effective-target arm_neon_fp16_ok } */\n+/* { dg-require-effective-target arm_fp16_ok } */\n /* { dg-options \"-mfp16-format=ieee -ffast-math\" } */\n-/* { dg-add-options arm_neon_fp16 } */\n+/* { dg-add-options arm_fp16 } */\n \n #include \"arm-fp16-ops.h\"\n "}, {"sha": "92bc8a9c04ecbe268a5b24dd6d6af1961bcfe4af", "filename": "gcc/testsuite/gcc.dg/torture/arm-fp16-ops-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0a9c20a41a9758389a8a4399b2578b06170aa3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0a9c20a41a9758389a8a4399b2578b06170aa3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops-5.c?ref=cf0a9c20a41a9758389a8a4399b2578b06170aa3", "patch": "@@ -1,8 +1,8 @@\n /* Test various operators on __fp16 and mixed __fp16/float operands.  */\n /* { dg-do compile { target arm*-*-* } } */\n-/* { dg-require-effective-target arm_neon_fp16_ok } */\n+/* { dg-require-effective-target arm_fp16_ok } */\n /* { dg-options \"-mfp16-format=ieee\" } */\n-/* { dg-add-options arm_neon_fp16 } */\n+/* { dg-add-options arm_fp16 } */\n \n #include \"arm-fp16-ops.h\"\n "}, {"sha": "ae40b1e864526fad0a9016b50f36fb70381ac242", "filename": "gcc/testsuite/gcc.dg/torture/arm-fp16-ops-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0a9c20a41a9758389a8a4399b2578b06170aa3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0a9c20a41a9758389a8a4399b2578b06170aa3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops-6.c?ref=cf0a9c20a41a9758389a8a4399b2578b06170aa3", "patch": "@@ -1,8 +1,8 @@\n /* Test various operators on __fp16 and mixed __fp16/float operands.  */\n /* { dg-do compile { target arm*-*-* } } */\n-/* { dg-require-effective-target arm_neon_fp16_ok } */\n+/* { dg-require-effective-target arm_fp16_ok } */\n /* { dg-options \"-mfp16-format=ieee -ffast-math\" } */\n-/* { dg-add-options arm_neon_fp16 } */\n+/* { dg-add-options arm_fp16 } */\n \n #include \"arm-fp16-ops.h\"\n "}, {"sha": "e40e1a3f9997c3896b2b68577ba0dd8306940f1f", "filename": "gcc/testsuite/gcc.target/arm/fp16-compile-vcvt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0a9c20a41a9758389a8a4399b2578b06170aa3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-vcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0a9c20a41a9758389a8a4399b2578b06170aa3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-vcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-vcvt.c?ref=cf0a9c20a41a9758389a8a4399b2578b06170aa3", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n-/* { dg-require-effective-target arm_neon_fp16_ok } */\n+/* { dg-require-effective-target arm_fp16_ok } */\n /* { dg-options \"-mfp16-format=ieee\" } */\n-/* { dg-add-options arm_neon_fp16 } */\n+/* { dg-add-options arm_fp16 } */\n \n /* Test generation of VFP __fp16 instructions.  */\n "}, {"sha": "8a0e36ff35f0d49471b600eb1f5b3b9225bca2c1", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 37, "deletions": 29, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0a9c20a41a9758389a8a4399b2578b06170aa3/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0a9c20a41a9758389a8a4399b2578b06170aa3/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=cf0a9c20a41a9758389a8a4399b2578b06170aa3", "patch": "@@ -1947,45 +1947,53 @@ proc check_effective_target_arm_neon_ok { } {\n # or -mfloat-abi=hard, but if one is already specified by the\n # multilib, use it.\n \n-proc add_options_for_arm_neon_fp16 { flags } {\n-    if { ! [check_effective_target_arm_neon_fp16_ok] } {\n+proc add_options_for_arm_fp16 { flags } {\n+    if { ! [check_effective_target_arm_fp16_ok] } {\n \treturn \"$flags\"\n     }\n-    global et_arm_neon_fp16_flags\n-    return \"$flags $et_arm_neon_fp16_flags\"\n+    global et_arm_fp16_flags\n+    return \"$flags $et_arm_fp16_flags\"\n }\n \n-# Return 1 if this is an ARM target supporting -mfpu=neon-fp16\n-# -mfloat-abi=softfp or equivalent options.  Skip multilibs that are\n-# incompatible with these options.  Also set et_arm_neon_flags to the\n-# best options to add.\n+# Return 1 if this is an ARM target that can support a VFP fp16 variant.\n+# Skip multilibs that are incompatible with these options and set\n+# et_arm_fp16_flags to the best options to add.\n \n-proc check_effective_target_arm_neon_fp16_ok_nocache { } {\n-    global et_arm_neon_fp16_flags\n-    set et_arm_neon_fp16_flags \"\"\n-    if { [check_effective_target_arm32] } {\n-\tif [check-flags [list \"\" { *-*-* } { \"-mfpu=*\" } { \"-mfpu=neon-fp16*\" } ]] {\n-\t    return 0\n-\t}\n-\t# Always add -mfpu=neon-fp16, since there is no preprocessor\n-\t# macro for FP16 support.\n-\tforeach flags {\"-mfpu=neon-fp16\" \"-mfpu=neon-fp16 -mfloat-abi=softfp\"} {\n-\t    if { [check_no_compiler_messages_nocache arm_neon_fp16_ok object {\n-\t\t#include \"arm_neon.h\"\n-\t\tint dummy;\n-\t    } \"$flags\"] } {\n-\t\tset et_arm_neon_fp16_flags $flags\n-\t\treturn 1\n-\t    }\n-\t}\n+proc check_effective_target_arm_fp16_ok_nocache { } {\n+    global et_arm_fp16_flags\n+    set et_arm_fp16_flags \"\"\n+    if { ! [check_effective_target_arm32] } {\n+\treturn 0;\n+    }\n+    if [check-flags [list \"\" { *-*-* } { \"-mfpu=*\" } { \"-mfpu=*fp16*\" \"-mfpu=*fpv[4-9]*\" \"-mfpu=*fpv[1-9][0-9]*\" } ]] {\n+\t# Multilib flags would override -mfpu.\n+\treturn 0\n+    }\n+    if [check-flags [list \"\" { *-*-* } { \"-mfloat-abi=soft\" } { \"\" } ]] {\n+\t# Must generate floating-point instructions.\n+\treturn 0\n+    }\n+    if [check-flags [list \"\" { *-*-* } { \"-mfpu=*\" } { \"\" } ]] {\n+        # The existing -mfpu value is OK; use it, but add softfp.\n+\tset et_arm_fp16_flags \"-mfloat-abi=softfp\"\n+\treturn 1;\n+    }\n+    # Add -mfpu for a VFP fp16 variant since there is no preprocessor\n+    # macro to check for this support.\n+    set flags \"-mfpu=vfpv4 -mfloat-abi=softfp\"\n+    if { [check_no_compiler_messages_nocache arm_fp16_ok assembly {\n+\tint dummy;\n+    } \"$flags\"] } {\n+\tset et_arm_fp16_flags \"$flags\"\n+\treturn 1\n     }\n \n     return 0\n }\n \n-proc check_effective_target_arm_neon_fp16_ok { } {\n-    return [check_cached_effective_target arm_neon_fp16_ok \\\n-\t\tcheck_effective_target_arm_neon_fp16_ok_nocache]\n+proc check_effective_target_arm_fp16_ok { } {\n+    return [check_cached_effective_target arm_fp16_ok \\\n+\t\tcheck_effective_target_arm_fp16_ok_nocache]\n }\n \n # Return 1 is this is an ARM target where -mthumb causes Thumb-1 to be"}]}