{"sha": "7cdc862eaeeaccd71051b6505a2b93afa4f1bb41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NkYzg2MmVhZWVhY2NkNzEwNTFiNjUwNWEyYjkzYWZhNGYxYmI0MQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-09-22T07:56:44Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-09-22T07:56:44Z"}, "message": "InetAddress.java: Moves around some code, reformats and adds documentation.\n\n2003-09-22  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/InetAddress.java:\n\tMoves around some code, reformats and adds documentation.\n\tNo functional changes.\n\nFrom-SVN: r71649", "tree": {"sha": "09aaabd8c0822a793fff813bd11cc0112ae51a9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09aaabd8c0822a793fff813bd11cc0112ae51a9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cdc862eaeeaccd71051b6505a2b93afa4f1bb41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cdc862eaeeaccd71051b6505a2b93afa4f1bb41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cdc862eaeeaccd71051b6505a2b93afa4f1bb41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cdc862eaeeaccd71051b6505a2b93afa4f1bb41/comments", "author": null, "committer": null, "parents": [{"sha": "af0f185b1b7fcff04b73ce91195439d6df97cb70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af0f185b1b7fcff04b73ce91195439d6df97cb70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af0f185b1b7fcff04b73ce91195439d6df97cb70"}], "stats": {"total": 146, "additions": 93, "deletions": 53}, "files": [{"sha": "a2b745077cf10c5b8651ee47e3ab1164abd62660", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cdc862eaeeaccd71051b6505a2b93afa4f1bb41/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cdc862eaeeaccd71051b6505a2b93afa4f1bb41/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=7cdc862eaeeaccd71051b6505a2b93afa4f1bb41", "patch": "@@ -1,3 +1,9 @@\n+2003-09-22  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/InetAddress.java:\n+\tMoves around some code, reformats and adds documentation.\n+\tNo functional changes.\n+\n 2003-09-22  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/JarURLConnection.java"}, {"sha": "6a841d08a2a742943589cf724612441fc59a39f3", "filename": "libjava/java/net/InetAddress.java", "status": "modified", "additions": 87, "deletions": 53, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cdc862eaeeaccd71051b6505a2b93afa4f1bb41/libjava%2Fjava%2Fnet%2FInetAddress.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cdc862eaeeaccd71051b6505a2b93afa4f1bb41/libjava%2Fjava%2Fnet%2FInetAddress.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FInetAddress.java?ref=7cdc862eaeeaccd71051b6505a2b93afa4f1bb41", "patch": "@@ -70,61 +70,63 @@ public class InetAddress implements Serializable\n {\n   private static final long serialVersionUID = 3286316764910316507L;\n   \n-  // The Serialized Form specifies that an int 'address' is saved/restored.\n-  // This class uses a byte array internally so we'll just do the conversion\n-  // at serialization time and leave the rest of the algorithm as is.\n+  static final byte[] zeros = { 0, 0, 0, 0 };\n+  \n+  /**\n+   * Dummy InetAddress, used to bind socket to any (all) network interfaces.\n+   */\n+  static final InetAddress ANY_IF = new InetAddress (zeros, null);\n+    \n+  private static final byte[] localhostAddress = { 127, 0, 0, 1 };\n+\n+  private static InetAddress localhost = null;\n+\n+  /**\n+   * The Serialized Form specifies that an int 'address' is saved/restored.\n+   * This class uses a byte array internally so we'll just do the conversion\n+   * at serialization time and leave the rest of the algorithm as is.\n+   */\n   private int address;\n+\n+  /**\n+   * An array of octets representing an IP address.\n+   */\n   transient byte[] addr;\n+\n+  /**\n+   * The name of the host for this address.\n+   */\n   String hostName;\n   \n-  // The field 'family' seems to be the AF_ value.\n-  // FIXME: Much of the code in the other java.net classes does not make\n-  // use of this family field.  A better implementation would be to make\n-  // use of getaddrinfo() and have other methods just check the family\n-  // field rather than examining the length of the address each time.\n+  /**\n+   * The field 'family' seems to be the AF_ value.\n+   * FIXME: Much of the code in the other java.net classes does not make\n+   * use of this family field.  A better implementation would be to make\n+   * use of getaddrinfo() and have other methods just check the family\n+   * field rather than examining the length of the address each time.\n+   */\n   int family;\n \n   /**\n-   * Needed for serialization\n+   * Initializes this object's addr instance variable from the passed in\n+   * int array.  Note that this constructor is protected and is called\n+   * only by static methods in this class.\n+   *\n+   * @param ipaddr The IP number of this address as an array of bytes\n    */\n-  private void readResolve () throws ObjectStreamException\n+  InetAddress (byte[] address)\n   {\n-    // FIXME: implement this\n-  }\n-\t  \n-  private void readObject (ObjectInputStream ois)\n-    throws IOException, ClassNotFoundException\n-  {\n-    ois.defaultReadObject ();\n-    addr = new byte [4];\n-    addr [3] = (byte) address;\n-    \n-    for (int i = 2; i >= 0; --i)\n-      addr [i] = (byte) (address >>= 8);\n-    \n-    // Ignore family from serialized data.  Since the saved address is 32 bits\n-    // the deserialized object will have an IPv4 address i.e. AF_INET family.\n-    // FIXME: An alternative is to call the aton method on the deserialized\n-    // hostname to get a new address.  The Serialized Form doc is silent\n-    // on how these fields are used.\n-    family = getFamily (addr);\n-  }\n-\n-  private void writeObject (ObjectOutputStream oos) throws IOException\n-  {\n-    // Build a 32 bit address from the last 4 bytes of a 4 byte IPv4 address\n-    // or a 16 byte IPv6 address.\n-    int len = addr.length;\n-    int i = len - 4;\n-    \n-    for (; i < len; i++)\n-      address = address << 8 | (((int) addr [i]) & 0xFF);\n-    \n-    oos.defaultWriteObject ();\n+    this (address, null);\n   }\n \n-  private static native int getFamily (byte[] address);\n-\n+  /**\n+   * Initializes this object's addr instance variable from the passed in\n+   * int array.  Note that this constructor is protected and is called\n+   * only by static methods in this class.\n+   *\n+   * @param ipaddr The IP number of this address as an array of bytes\n+   * @param hostname The hostname of this IP address.\n+   */\n   InetAddress (byte[] address, String hostname)\n   {\n     addr = address;\n@@ -530,6 +532,8 @@ public static InetAddress getByAddress (String host, byte[] addr)\n   private static native InetAddress[] lookup (String hostname,\n \t\t                              InetAddress addr, boolean all);\n \n+  private static native int getFamily (byte[] address);\n+\n   /**\n    * Determines the IP address of a host, given the host's name.\n    *\n@@ -606,17 +610,8 @@ public static InetAddress[] getAllByName (String hostname)\n     return lookup (hostname, null, true);\n   }\n \n-  static final byte[] zeros = { 0, 0, 0, 0 };\n-  \n-  /* dummy InetAddress, used to bind socket to any (all) network interfaces */\n-  static final InetAddress ANY_IF = new InetAddress (zeros, null);\n-    \n-  private static final byte[] localhostAddress = { 127, 0, 0, 1 };\n-\n   private static native String getLocalHostname ();\n \n-  private static InetAddress localhost = null;\n-\n   /**\n    * Returns the local host\n    *\n@@ -681,4 +676,43 @@ private static synchronized void getLocalHost (SecurityManager s)\n     if (localhost == null)\n       localhost = new InetAddress (localhostAddress, \"localhost\");\n   }\n+\n+  /**\n+   * Needed for serialization\n+   */\n+  private void readResolve () throws ObjectStreamException\n+  {\n+    // FIXME: implement this\n+  }\n+\t  \n+  private void readObject (ObjectInputStream ois)\n+    throws IOException, ClassNotFoundException\n+  {\n+    ois.defaultReadObject ();\n+    addr = new byte [4];\n+    addr [3] = (byte) address;\n+    \n+    for (int i = 2; i >= 0; --i)\n+      addr [i] = (byte) (address >>= 8);\n+    \n+    // Ignore family from serialized data.  Since the saved address is 32 bits\n+    // the deserialized object will have an IPv4 address i.e. AF_INET family.\n+    // FIXME: An alternative is to call the aton method on the deserialized\n+    // hostname to get a new address.  The Serialized Form doc is silent\n+    // on how these fields are used.\n+    family = getFamily (addr);\n+  }\n+\n+  private void writeObject (ObjectOutputStream oos) throws IOException\n+  {\n+    // Build a 32 bit address from the last 4 bytes of a 4 byte IPv4 address\n+    // or a 16 byte IPv6 address.\n+    int len = addr.length;\n+    int i = len - 4;\n+    \n+    for (; i < len; i++)\n+      address = address << 8 | (((int) addr [i]) & 0xFF);\n+    \n+    oos.defaultWriteObject ();\n+  }\n }"}]}