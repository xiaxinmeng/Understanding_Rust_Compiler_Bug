{"sha": "e7d77cf92d5b27a7e85a39b9cbf6562e34848728", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdkNzdjZjkyZDViMjdhN2U4NWEzOWI5Y2JmNjU2MmUzNDg0ODcyOA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2017-10-11T22:40:52Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2017-10-11T22:40:52Z"}, "message": "rs6000: Improve isel\n\nThis removes output_isel.  Instead, the define_insn's now output the\nisel instructions directly.\n\nIt adds a reg_or_zero operand predicate, too, because the reg_or_cint\npredicate is too lax here.  Also use it in the \"reversed\" variants of\nthe instructions.\n\n\n\t* config/rs6000/predicates.md (zero_constant, all_ones_constant):\n\tMove up in file.\n\t(reg_or_cint_operand): Fix comment.\n\t(reg_or_zero_operand): New predicate.\n\t* config/rs6000/rs6000-protos.h (output_isel): Delete.\n\t* config/rs6000/rs6000.c (output_isel): Delete.\n\t* config/rs6000/rs6000.md (isel_signed_<mode>): Use reg_or_zero_operand\n\tinstead of reg_or_cint_operand.  Output instruction directly (not via\n\toutput_isel).\n\t(isel_unsigned_<mode>): Ditto.\n\t(*isel_reversed_signed_<mode>): Use reg_or_zero_operand instead of\n\tgpc_reg_operand.  Add an instruction alternative for this.  Output\n\tinstruction directly.\n\t(*isel_reversed_unsigned_<mode>): Ditto.\n\nFrom-SVN: r253665", "tree": {"sha": "8b8a50a42198cf97bc97905b6466a495a58a9126", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b8a50a42198cf97bc97905b6466a495a58a9126"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7d77cf92d5b27a7e85a39b9cbf6562e34848728", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7d77cf92d5b27a7e85a39b9cbf6562e34848728", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7d77cf92d5b27a7e85a39b9cbf6562e34848728", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7d77cf92d5b27a7e85a39b9cbf6562e34848728/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3ff1b2b0a91e25bf5b6499025a7c336a0b71b75f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ff1b2b0a91e25bf5b6499025a7c336a0b71b75f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ff1b2b0a91e25bf5b6499025a7c336a0b71b75f"}], "stats": {"total": 114, "additions": 57, "deletions": 57}, "files": [{"sha": "bcc39c7b31d566af2624ff98329bbb553404502e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7d77cf92d5b27a7e85a39b9cbf6562e34848728/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7d77cf92d5b27a7e85a39b9cbf6562e34848728/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7d77cf92d5b27a7e85a39b9cbf6562e34848728", "patch": "@@ -1,3 +1,20 @@\n+2017-10-11  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/predicates.md (zero_constant, all_ones_constant):\n+\tMove up in file.\n+\t(reg_or_cint_operand): Fix comment.\n+\t(reg_or_zero_operand): New predicate.\n+\t* config/rs6000/rs6000-protos.h (output_isel): Delete.\n+\t* config/rs6000/rs6000.c (output_isel): Delete.\n+\t* config/rs6000/rs6000.md (isel_signed_<mode>): Use reg_or_zero_operand\n+\tinstead of reg_or_cint_operand.  Output instruction directly (not via\n+\toutput_isel).\n+\t(isel_unsigned_<mode>): Ditto.\n+\t(*isel_reversed_signed_<mode>): Use reg_or_zero_operand instead of\n+\tgpc_reg_operand.  Add an instruction alternative for this.  Output\n+\tinstruction directly.\n+\t(*isel_reversed_unsigned_<mode>): Ditto.\n+\n 2017-10-11  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (ix86_canonicalize_comparison): New function."}, {"sha": "569158f4c355fb81a80d178fbeaa6f3dea47e9dc", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7d77cf92d5b27a7e85a39b9cbf6562e34848728/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7d77cf92d5b27a7e85a39b9cbf6562e34848728/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=e7d77cf92d5b27a7e85a39b9cbf6562e34848728", "patch": "@@ -199,6 +199,16 @@\n   return CA_REGNO_P (REGNO (op));\n })\n \n+;; Return 1 if operand is constant zero (scalars and vectors).\n+(define_predicate \"zero_constant\"\n+  (and (match_code \"const_int,const_double,const_wide_int,const_vector\")\n+       (match_test \"op == CONST0_RTX (mode)\")))\n+\n+;; Return 1 if operand is constant -1 (scalars and vectors).\n+(define_predicate \"all_ones_constant\"\n+  (and (match_code \"const_int,const_double,const_wide_int,const_vector\")\n+       (match_test \"op == CONSTM1_RTX (mode) && !FLOAT_MODE_P (mode)\")))\n+\n ;; Return 1 if op is a signed 5-bit constant integer.\n (define_predicate \"s5bit_cint_operand\"\n   (and (match_code \"const_int\")\n@@ -543,12 +553,16 @@\n     (match_operand 0 \"u_short_cint_operand\")\n     (match_operand 0 \"gpc_reg_operand\")))\n \n-;; Return 1 if op is any constant integer \n-;; or non-special register.\n+;; Return 1 if op is any constant integer or a non-special register.\n (define_predicate \"reg_or_cint_operand\"\n   (ior (match_code \"const_int\")\n        (match_operand 0 \"gpc_reg_operand\")))\n \n+;; Return 1 if op is constant zero or a non-special register.\n+(define_predicate \"reg_or_zero_operand\"\n+  (ior (match_operand 0 \"zero_constant\")\n+       (match_operand 0 \"gpc_reg_operand\")))\n+\n ;; Return 1 if op is a constant integer valid for addition with addis, addi.\n (define_predicate \"add_cint_operand\"\n   (and (match_code \"const_int\")\n@@ -744,16 +758,6 @@\n \t    (and (match_test \"easy_altivec_constant (op, mode)\")\n \t\t (match_test \"vspltis_shifted (op) != 0\")))))\n \n-;; Return 1 if operand is constant zero (scalars and vectors).\n-(define_predicate \"zero_constant\"\n-  (and (match_code \"const_int,const_double,const_wide_int,const_vector\")\n-       (match_test \"op == CONST0_RTX (mode)\")))\n-\n-;; Return 1 if operand is constant -1 (scalars and vectors).\n-(define_predicate \"all_ones_constant\"\n-  (and (match_code \"const_int,const_double,const_wide_int,const_vector\")\n-       (match_test \"op == CONSTM1_RTX (mode) && !FLOAT_MODE_P (mode)\")))\n-\n ;; Return 1 if operand is a vector int register or is either a vector constant\n ;; of all 0 bits of a vector constant of all 1 bits.\n (define_predicate \"vector_int_reg_or_same_bit\""}, {"sha": "db0e692739c9b70f84210e8e1835ad28dc98c636", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7d77cf92d5b27a7e85a39b9cbf6562e34848728/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7d77cf92d5b27a7e85a39b9cbf6562e34848728/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=e7d77cf92d5b27a7e85a39b9cbf6562e34848728", "patch": "@@ -209,7 +209,6 @@ extern void rs6000_emit_epilogue (int);\n extern void rs6000_expand_split_stack_prologue (void);\n extern void rs6000_split_stack_space_check (rtx, rtx);\n extern void rs6000_emit_eh_reg_restore (rtx, rtx);\n-extern const char * output_isel (rtx *);\n extern void rs6000_call_aix (rtx, rtx, rtx, rtx);\n extern void rs6000_sibcall_aix (rtx, rtx, rtx, rtx);\n extern void rs6000_aix_asm_output_dwarf_table_ref (char *);"}, {"sha": "e8684821c9858429bf6366de21772fa798665d20", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7d77cf92d5b27a7e85a39b9cbf6562e34848728/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7d77cf92d5b27a7e85a39b9cbf6562e34848728/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=e7d77cf92d5b27a7e85a39b9cbf6562e34848728", "patch": "@@ -23255,24 +23255,6 @@ rs6000_emit_int_cmove (rtx dest, rtx op, rtx true_cond, rtx false_cond)\n   return 1;\n }\n \n-const char *\n-output_isel (rtx *operands)\n-{\n-  enum rtx_code code;\n-\n-  code = GET_CODE (operands[1]);\n-\n-  if (code == GE || code == GEU || code == LE || code == LEU || code == NE)\n-    {\n-      gcc_assert (GET_CODE (operands[2]) == REG\n-\t\t  && GET_CODE (operands[3]) == REG);\n-      PUT_CODE (operands[1], reverse_condition (code));\n-      return \"isel %0,%3,%2,%j1\";\n-    }\n-\n-  return \"isel %0,%2,%3,%j1\";\n-}\n-\n void\n rs6000_emit_minmax (rtx dest, enum rtx_code code, rtx op0, rtx op1)\n {"}, {"sha": "0a5a652fc3f673d9764c4eaa5987138e08eb507a", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7d77cf92d5b27a7e85a39b9cbf6562e34848728/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7d77cf92d5b27a7e85a39b9cbf6562e34848728/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=e7d77cf92d5b27a7e85a39b9cbf6562e34848728", "patch": "@@ -4938,59 +4938,57 @@\n \t (match_operator 1 \"scc_comparison_operator\"\n \t\t\t [(match_operand:CC 4 \"cc_reg_operand\" \"y,y\")\n \t\t\t  (const_int 0)])\n-\t (match_operand:GPR 2 \"reg_or_cint_operand\" \"O,b\")\n+\t (match_operand:GPR 2 \"reg_or_zero_operand\" \"O,b\")\n \t (match_operand:GPR 3 \"gpc_reg_operand\" \"r,r\")))]\n   \"TARGET_ISEL<sel>\"\n-  \"*\n-{ return output_isel (operands); }\"\n-  [(set_attr \"type\" \"isel\")\n-   (set_attr \"length\" \"4\")])\n+  \"isel %0,%2,%3,%j1\"\n+  [(set_attr \"type\" \"isel\")])\n \n (define_insn \"isel_unsigned_<mode>\"\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r,r\")\n \t(if_then_else:GPR\n \t (match_operator 1 \"scc_comparison_operator\"\n \t\t\t [(match_operand:CCUNS 4 \"cc_reg_operand\" \"y,y\")\n \t\t\t  (const_int 0)])\n-\t (match_operand:GPR 2 \"reg_or_cint_operand\" \"O,b\")\n+\t (match_operand:GPR 2 \"reg_or_zero_operand\" \"O,b\")\n \t (match_operand:GPR 3 \"gpc_reg_operand\" \"r,r\")))]\n   \"TARGET_ISEL<sel>\"\n-  \"*\n-{ return output_isel (operands); }\"\n-  [(set_attr \"type\" \"isel\")\n-   (set_attr \"length\" \"4\")])\n+  \"isel %0,%2,%3,%j1\"\n+  [(set_attr \"type\" \"isel\")])\n \n ;; These patterns can be useful for combine; they let combine know that\n ;; isel can handle reversed comparisons so long as the operands are\n ;; registers.\n \n (define_insn \"*isel_reversed_signed_<mode>\"\n-  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r,r\")\n \t(if_then_else:GPR\n \t (match_operator 1 \"scc_rev_comparison_operator\"\n-\t\t\t [(match_operand:CC 4 \"cc_reg_operand\" \"y\")\n+\t\t\t [(match_operand:CC 4 \"cc_reg_operand\" \"y,y\")\n \t\t\t  (const_int 0)])\n-\t (match_operand:GPR 2 \"gpc_reg_operand\" \"b\")\n-\t (match_operand:GPR 3 \"gpc_reg_operand\" \"b\")))]\n+\t (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r\")\n+\t (match_operand:GPR 3 \"reg_or_zero_operand\" \"O,b\")))]\n   \"TARGET_ISEL<sel>\"\n-  \"*\n-{ return output_isel (operands); }\"\n-  [(set_attr \"type\" \"isel\")\n-   (set_attr \"length\" \"4\")])\n+{\n+  PUT_CODE (operands[1], reverse_condition (GET_CODE (operands[1])));\n+  return \"isel %0,%3,%2,%j1\";\n+}\n+  [(set_attr \"type\" \"isel\")])\n \n (define_insn \"*isel_reversed_unsigned_<mode>\"\n-  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r,r\")\n \t(if_then_else:GPR\n \t (match_operator 1 \"scc_rev_comparison_operator\"\n-\t\t\t [(match_operand:CCUNS 4 \"cc_reg_operand\" \"y\")\n+\t\t\t [(match_operand:CCUNS 4 \"cc_reg_operand\" \"y,y\")\n \t\t\t  (const_int 0)])\n-\t (match_operand:GPR 2 \"gpc_reg_operand\" \"b\")\n-\t (match_operand:GPR 3 \"gpc_reg_operand\" \"b\")))]\n+\t (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r\")\n+\t (match_operand:GPR 3 \"reg_or_zero_operand\" \"O,b\")))]\n   \"TARGET_ISEL<sel>\"\n-  \"*\n-{ return output_isel (operands); }\"\n-  [(set_attr \"type\" \"isel\")\n-   (set_attr \"length\" \"4\")])\n+{\n+  PUT_CODE (operands[1], reverse_condition (GET_CODE (operands[1])));\n+  return \"isel %0,%3,%2,%j1\";\n+}\n+  [(set_attr \"type\" \"isel\")])\n \n ;; Floating point conditional move\n (define_expand \"mov<mode>cc\""}]}