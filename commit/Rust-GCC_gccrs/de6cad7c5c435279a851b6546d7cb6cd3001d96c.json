{"sha": "de6cad7c5c435279a851b6546d7cb6cd3001d96c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU2Y2FkN2M1YzQzNTI3OWE4NTFiNjU0NmQ3Y2I2Y2QzMDAxZDk2Yw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-12-05T10:47:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-12-05T10:47:30Z"}, "message": "[multiple changes]\n\n2012-12-05  Ed Schonberg  <schonberg@adacore.com>\n\n\t* par-ch6.adb (P_Return_Object_Declaration): Do not check for\n\tlegality of Aliased keyword.\n\t* sem_ch6.adb (Analyze_Function_Return): The keyword aliased is\n\tlegal in an extended return statement only if the return type\n\tis immutably limited.\n\n2012-12-05  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_disp.adb (Expand_Interface_Thunk): Simplify\n\tmanagement of controlling formals.  Required to avoid problems\n\twith primitives of internally generated base types associated\n\twith constrained tagged types.\n\nFrom-SVN: r194201", "tree": {"sha": "a3803d5cb1c1dc053ac715509bbad941fda70cba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3803d5cb1c1dc053ac715509bbad941fda70cba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de6cad7c5c435279a851b6546d7cb6cd3001d96c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de6cad7c5c435279a851b6546d7cb6cd3001d96c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de6cad7c5c435279a851b6546d7cb6cd3001d96c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de6cad7c5c435279a851b6546d7cb6cd3001d96c/comments", "author": null, "committer": null, "parents": [{"sha": "ac2b960fcf50ac868ecc2f407e67d7085bf069de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac2b960fcf50ac868ecc2f407e67d7085bf069de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac2b960fcf50ac868ecc2f407e67d7085bf069de"}], "stats": {"total": 48, "additions": 35, "deletions": 13}, "files": [{"sha": "b7da722bfc05870f9540f0bccfeaa8095900b188", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de6cad7c5c435279a851b6546d7cb6cd3001d96c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de6cad7c5c435279a851b6546d7cb6cd3001d96c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=de6cad7c5c435279a851b6546d7cb6cd3001d96c", "patch": "@@ -1,3 +1,18 @@\n+2012-12-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* par-ch6.adb (P_Return_Object_Declaration): Do not check for\n+\tlegality of Aliased keyword.\n+\t* sem_ch6.adb (Analyze_Function_Return): The keyword aliased is\n+\tlegal in an extended return statement only if the return type\n+\tis immutably limited.\n+\n+2012-12-05  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_disp.adb (Expand_Interface_Thunk): Simplify\n+\tmanagement of controlling formals.  Required to avoid problems\n+\twith primitives of internally generated base types associated\n+\twith constrained tagged types.\n+\n 2012-12-05  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_eval.adb: Remove spurious warnings."}, {"sha": "8706b9e64563eafbd7aff39fd5df92932c617e42", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de6cad7c5c435279a851b6546d7cb6cd3001d96c/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de6cad7c5c435279a851b6546d7cb6cd3001d96c/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=de6cad7c5c435279a851b6546d7cb6cd3001d96c", "patch": "@@ -1635,7 +1635,6 @@ package body Exp_Disp is\n       Formals : constant List_Id    := New_List;\n       Target  : constant Entity_Id  := Ultimate_Alias (Prim);\n \n-      Controlling_Typ : Entity_Id;\n       Decl_1          : Node_Id;\n       Decl_2          : Node_Id;\n       Expr            : Node_Id;\n@@ -1713,8 +1712,6 @@ package body Exp_Disp is\n          Next_Formal (Formal);\n       end loop;\n \n-      Controlling_Typ := Find_Dispatching_Type (Target);\n-\n       Target_Formal := First_Formal (Target);\n       Formal        := First (Formals);\n       while Present (Formal) loop\n@@ -1741,7 +1738,7 @@ package body Exp_Disp is\n \n          if Ekind (Target_Formal) = E_In_Parameter\n            and then Ekind (Etype (Target_Formal)) = E_Anonymous_Access_Type\n-           and then Ftyp = Controlling_Typ\n+           and then Is_Controlling_Formal (Target_Formal)\n          then\n             --  Generate:\n             --     type T is access all <<type of the target formal>>\n@@ -1799,7 +1796,7 @@ package body Exp_Disp is\n                 (Defining_Identifier (Decl_2),\n                  New_Reference_To (Defining_Identifier (Decl_1), Loc)));\n \n-         elsif Ftyp = Controlling_Typ then\n+         elsif Is_Controlling_Formal (Target_Formal) then\n \n             --  Generate:\n             --     S1 : Storage_Offset := Storage_Offset!(Formal'Address)"}, {"sha": "6ad3467a5d2883cfcdbaf33415c283553b124f19", "filename": "gcc/ada/par-ch6.adb", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de6cad7c5c435279a851b6546d7cb6cd3001d96c/gcc%2Fada%2Fpar-ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de6cad7c5c435279a851b6546d7cb6cd3001d96c/gcc%2Fada%2Fpar-ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch6.adb?ref=de6cad7c5c435279a851b6546d7cb6cd3001d96c", "patch": "@@ -1721,13 +1721,8 @@ package body Ch6 is\n          Scan; -- past ALIASED\n          Set_Aliased_Present (Decl_Node);\n \n-         if Ada_Version < Ada_2012 then\n-            Error_Msg_SC -- CODEFIX\n-              (\"ALIASED not allowed in extended return in Ada 2012?\");\n-         else\n-            Error_Msg_SC -- CODEFIX\n-              (\"ALIASED not allowed in extended return\");\n-         end if;\n+         --  The restrictions on the use of aliased in an extended return\n+         --  are semantic, not syntactic.\n \n          if Token = Tok_Constant then\n             Scan; -- past CONSTANT"}, {"sha": "cfa709cd9d266e4916c84e131294af3adaaf94c3", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de6cad7c5c435279a851b6546d7cb6cd3001d96c/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de6cad7c5c435279a851b6546d7cb6cd3001d96c/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=de6cad7c5c435279a851b6546d7cb6cd3001d96c", "patch": "@@ -787,6 +787,7 @@ package body Sem_Ch6 is\n \n             Analyze_And_Resolve (Expr, R_Type);\n             Check_Limited_Return (Expr);\n+\n          end if;\n \n          --  RETURN only allowed in SPARK as the last statement in function\n@@ -806,8 +807,9 @@ package body Sem_Ch6 is\n          --  Analyze parts specific to extended_return_statement:\n \n          declare\n-            Obj_Decl : constant Node_Id :=\n+            Obj_Decl    : constant Node_Id :=\n                          Last (Return_Object_Declarations (N));\n+            Has_Aliased : constant Boolean := Aliased_Present (Obj_Decl);\n \n             HSS : constant Node_Id := Handled_Statement_Sequence (N);\n \n@@ -842,6 +844,19 @@ package body Sem_Ch6 is\n             Set_Referenced (Defining_Identifier (Obj_Decl));\n \n             Check_References (Stm_Entity);\n+\n+            --  Check RM 6.5 (5.9/3)\n+\n+            if Has_Aliased then\n+               if Ada_Version < Ada_2012 then\n+                  Error_Msg_N (\"aliased only allowed for limited\"\n+                     & \" return objects in Ada 2012?\", N);\n+\n+               elsif not Is_Immutably_Limited_Type (R_Type) then\n+                  Error_Msg_N (\"aliased only allowed for limited\"\n+                     & \" return objects\", N);\n+               end if;\n+            end if;\n          end;\n       end if;\n "}]}