{"sha": "5a4638841f72e959242e4ce57cb77bbb9335f86b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE0NjM4ODQxZjcyZTk1OTI0MmU0Y2U1N2NiNzdiYmI5MzM1Zjg2Yg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-12-01T01:01:28Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-12-01T01:01:28Z"}, "message": "(CONDITIONAL_REGISTER_USAGE): Correcting indentation.\n\n(MODE_DISP_OK_4, MODE_DISP_OK_8): Move definitions next to uses.\n\nFrom-SVN: r10658", "tree": {"sha": "bade97d0124615bbcec78a03aeaad7de2b7072f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bade97d0124615bbcec78a03aeaad7de2b7072f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a4638841f72e959242e4ce57cb77bbb9335f86b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a4638841f72e959242e4ce57cb77bbb9335f86b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a4638841f72e959242e4ce57cb77bbb9335f86b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a4638841f72e959242e4ce57cb77bbb9335f86b/comments", "author": null, "committer": null, "parents": [{"sha": "eeb531d5878def7fa4c72c7e913686fe7db2fb5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeb531d5878def7fa4c72c7e913686fe7db2fb5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeb531d5878def7fa4c72c7e913686fe7db2fb5b"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "a322a108c764f837c738d755f324a7a79cce696c", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a4638841f72e959242e4ce57cb77bbb9335f86b/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a4638841f72e959242e4ce57cb77bbb9335f86b/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=5a4638841f72e959242e4ce57cb77bbb9335f86b", "patch": "@@ -52,10 +52,10 @@ Boston, MA 02111-1307, USA.  */\n #define CONDITIONAL_REGISTER_USAGE\t\t\t\t\\\n   /* Hitachi saves and restores mac registers on call.  */\t\\\n   if (TARGET_HITACHI)\t\t\t\t\t\t\\\n-   {\t\t\t\t\t\t\t\t\\\n-     call_used_regs[MACH_REG] = 0;\t\t\t\t\\\n-     call_used_regs[MACL_REG] = 0;\t\t\t\t\\\n-  }\n+    {\t\t\t\t\t\t\t\t\\\n+      call_used_regs[MACH_REG] = 0;\t\t\t\t\\\n+      call_used_regs[MACL_REG] = 0;\t\t\t\t\\\n+    }\n \f\n /* ??? Need to write documentation for all SH options and add it to the\n    invoke.texi file.  */\n@@ -800,9 +800,6 @@ extern int current_function_anonymous_args;\n    them unless they have been allocated suitable hard regs.\n    The symbol REG_OK_STRICT causes the latter definition to be used.  */\n \n-#define MODE_DISP_OK_4(X,MODE) ((GET_MODE_SIZE(MODE)==4) && ((unsigned)INTVAL(X)<64) && (!(INTVAL(X) &3)))\n-#define MODE_DISP_OK_8(X,MODE) ((GET_MODE_SIZE(MODE)==8) && ((unsigned)INTVAL(X)<60) && (!(INTVAL(X) &3)))\n-\n #ifndef REG_OK_STRICT\n \n /* Nonzero if X is a hard reg that can be used as a base reg\n@@ -856,6 +853,9 @@ extern int current_function_anonymous_args;\n \n    The other macros defined here are used only in GO_IF_LEGITIMATE_ADDRESS.  */\n \n+#define MODE_DISP_OK_4(X,MODE) ((GET_MODE_SIZE(MODE)==4) && ((unsigned)INTVAL(X)<64) && (!(INTVAL(X) &3)))\n+#define MODE_DISP_OK_8(X,MODE) ((GET_MODE_SIZE(MODE)==8) && ((unsigned)INTVAL(X)<60) && (!(INTVAL(X) &3)))\n+\n #define BASE_REGISTER_RTX_P(X)\t\t\t\t\\\n   ((GET_CODE (X) == REG && REG_OK_FOR_BASE_P (X))\t\\\n    || (GET_CODE (X) == SUBREG\t\t\t\t\\"}]}