{"sha": "8a3789786205376e3ba19fdefadd8937e8ac534e", "node_id": "C_kwDOANBUbNoAKDhhMzc4OTc4NjIwNTM3NmUzYmExOWZkZWZhZGQ4OTM3ZThhYzUzNGU", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-01-26T21:42:57Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-02-01T19:14:12Z"}, "message": "c++: lambda in template default argument [PR103186]\n\nThe problem with this testcase was that since my patch for PR97900 we\nweren't preserving DECL_UID identity for parameters of instantiations of\ntemplated functions, so using those parameters as the keys for the\ndefarg_inst map broke.  I think this was always fragile given the\npossibility of redeclarations, so instead of reverting that change let's\nswitch to keying off the function.\n\nMemory use compiling stdc++.h is not noticeably different.\n\n\tPR c++/103186\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (defarg_inst): Use tree_vec_map_cache_hasher.\n\t(defarg_insts_for): New.\n\t(tsubst_default_argument): Adjust.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/lambda/lambda-defarg10.C: New test.", "tree": {"sha": "1e19312473196efe99eb7723c4e0ef3577b68b4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e19312473196efe99eb7723c4e0ef3577b68b4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a3789786205376e3ba19fdefadd8937e8ac534e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a3789786205376e3ba19fdefadd8937e8ac534e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a3789786205376e3ba19fdefadd8937e8ac534e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a3789786205376e3ba19fdefadd8937e8ac534e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b649071d4b3490aa43c6c2212312ace304c9ff1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b649071d4b3490aa43c6c2212312ace304c9ff1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b649071d4b3490aa43c6c2212312ace304c9ff1c"}], "stats": {"total": 63, "additions": 54, "deletions": 9}, "files": [{"sha": "6e129da1d05386face645a867641365ed964181f", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a3789786205376e3ba19fdefadd8937e8ac534e/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a3789786205376e3ba19fdefadd8937e8ac534e/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=8a3789786205376e3ba19fdefadd8937e8ac534e", "patch": "@@ -13676,7 +13676,28 @@ tsubst_aggr_type (tree t,\n     }\n }\n \n-static GTY((cache)) decl_tree_cache_map *defarg_inst;\n+/* Map from a FUNCTION_DECL to a vec of default argument instantiations,\n+   indexed in reverse order of the parameters.  */\n+\n+static GTY((cache)) hash_table<tree_vec_map_cache_hasher> *defarg_inst;\n+\n+/* Return a reference to the vec* of defarg insts for FN.  */\n+\n+static vec<tree,va_gc> *&\n+defarg_insts_for (tree fn)\n+{\n+  if (!defarg_inst)\n+    defarg_inst = hash_table<tree_vec_map_cache_hasher>::create_ggc (13);\n+  tree_vec_map in = { fn, nullptr };\n+  tree_vec_map **slot\n+    = defarg_inst->find_slot_with_hash (&in, DECL_UID (fn), INSERT);\n+  if (!*slot)\n+    {\n+      *slot = ggc_alloc<tree_vec_map> ();\n+      **slot = in;\n+    }\n+  return (*slot)->to;\n+}\n \n /* Substitute into the default argument ARG (a default argument for\n    FN), which has the indicated TYPE.  */\n@@ -13706,9 +13727,16 @@ tsubst_default_argument (tree fn, int parmnum, tree type, tree arg,\n \n   gcc_assert (same_type_ignoring_top_level_qualifiers_p (type, parmtype));\n \n-  tree *slot;\n-  if (defarg_inst && (slot = defarg_inst->get (parm)))\n-    return *slot;\n+  /* Remember the location of the pointer to the vec rather than the location\n+     of the particular element, in case the vec grows in tsubst_expr.  */\n+  vec<tree,va_gc> *&defs = defarg_insts_for (fn);\n+  /* Index in reverse order to avoid allocating space for initial parameters\n+     that don't have default arguments.  */\n+  unsigned ridx = list_length (parm);\n+  if (vec_safe_length (defs) < ridx)\n+    vec_safe_grow_cleared (defs, ridx);\n+  else if (tree inst = (*defs)[ridx - 1])\n+    return inst;\n \n   /* This default argument came from a template.  Instantiate the\n      default argument here, not in tsubst.  In the case of\n@@ -13753,11 +13781,7 @@ tsubst_default_argument (tree fn, int parmnum, tree type, tree arg,\n   pop_from_top_level ();\n \n   if (arg != error_mark_node && !cp_unevaluated_operand)\n-    {\n-      if (!defarg_inst)\n-\tdefarg_inst = decl_tree_cache_map::create_ggc (37);\n-      defarg_inst->put (parm, arg);\n-    }\n+    (*defs)[ridx - 1] = arg;\n \n   return arg;\n }"}, {"sha": "e08eb4f5e567ae2aa2721fb3ef4919435532ab6f", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-defarg10.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a3789786205376e3ba19fdefadd8937e8ac534e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-defarg10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a3789786205376e3ba19fdefadd8937e8ac534e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-defarg10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-defarg10.C?ref=8a3789786205376e3ba19fdefadd8937e8ac534e", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/103186\n+// { dg-do compile { target c++11 } }\n+\n+struct f\n+{\n+  template<class T1>\n+   f(const T1&){}\n+};\n+\n+\n+template<typename T> class A {\n+public:\n+    void foo(A<T> a, const f& fn = [](){}) { }\n+    void bar(A<T> a) { foo(a); }\n+};\n+int main() {\n+    A<int> a;\n+    a.foo(a);\n+    a.bar(a);\n+    return 0;\n+}"}]}