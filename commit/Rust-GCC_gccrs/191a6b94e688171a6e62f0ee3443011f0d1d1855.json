{"sha": "191a6b94e688171a6e62f0ee3443011f0d1d1855", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkxYTZiOTRlNjg4MTcxYTZlNjJmMGVlMzQ0MzAxMWYwZDFkMTg1NQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-08-12T11:26:39Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-08-12T11:26:39Z"}, "message": "c-decl.c (grokdeclarator): Call error_at instead of error and pass LOC to it.\n\n\t* c-decl.c (grokdeclarator): Call error_at instead of error and pass\n\tLOC to it.\n\nFrom-SVN: r226807", "tree": {"sha": "6e7b99cb5c29a75db6e0cee8754ba665682131c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e7b99cb5c29a75db6e0cee8754ba665682131c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/191a6b94e688171a6e62f0ee3443011f0d1d1855", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/191a6b94e688171a6e62f0ee3443011f0d1d1855", "html_url": "https://github.com/Rust-GCC/gccrs/commit/191a6b94e688171a6e62f0ee3443011f0d1d1855", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/191a6b94e688171a6e62f0ee3443011f0d1d1855/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "93666a7b00af8863117d20e4ba55c2188bfa663e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93666a7b00af8863117d20e4ba55c2188bfa663e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93666a7b00af8863117d20e4ba55c2188bfa663e"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "275d7879fd6fb45ec3da25afd1f147006f01dd13", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191a6b94e688171a6e62f0ee3443011f0d1d1855/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191a6b94e688171a6e62f0ee3443011f0d1d1855/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=191a6b94e688171a6e62f0ee3443011f0d1d1855", "patch": "@@ -1,3 +1,8 @@\n+2015-08-12  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-decl.c (grokdeclarator): Call error_at instead of error and pass\n+\tLOC to it.\n+\n 2015-08-03  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/67088"}, {"sha": "b83c584c701952daa608f1b5cb4f29118a92d136", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191a6b94e688171a6e62f0ee3443011f0d1d1855/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191a6b94e688171a6e62f0ee3443011f0d1d1855/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=191a6b94e688171a6e62f0ee3443011f0d1d1855", "patch": "@@ -6233,9 +6233,9 @@ grokdeclarator (const struct c_declarator *declarator,\n       if (type_quals & TYPE_QUAL_ATOMIC)\n \t{\n \t  if (name)\n-\t    error (\"bit-field %qE has atomic type\", name);\n+\t    error_at (loc, \"bit-field %qE has atomic type\", name);\n \t  else\n-\t    error (\"bit-field has atomic type\");\n+\t    error_at (loc, \"bit-field has atomic type\");\n \t  type_quals &= ~TYPE_QUAL_ATOMIC;\n \t}\n     }"}]}