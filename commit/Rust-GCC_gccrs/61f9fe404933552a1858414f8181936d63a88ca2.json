{"sha": "61f9fe404933552a1858414f8181936d63a88ca2", "node_id": "C_kwDOANBUbNoAKDYxZjlmZTQwNDkzMzU1MmExODU4NDE0ZjgxODE5MzZkNjNhODhjYTI", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2022-12-14T06:57:44Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2022-12-19T09:40:07Z"}, "message": "RISC-V: Change vlmul printing rule\n\nThis patch is preparing patch for the following patch (VSETVL PASS)\nsupport since the current vlmul printing rule is not appropriate\ninformation for VSETVL PASS. I split this fix in a single patch.\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv-v.cc (emit_vlmax_vsetvl): Pass through VLMUL enum\n\tinstead of machine mode.\n\t* config/riscv/riscv-vector-builtins-bases.cc: Ditto.\n\t* config/riscv/riscv.cc (riscv_print_operand): Print LMUL by enum vlmul\n\tinstead of machine mode.", "tree": {"sha": "ec55a2833827c75f741af6653b9fef39a4ea23b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec55a2833827c75f741af6653b9fef39a4ea23b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61f9fe404933552a1858414f8181936d63a88ca2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61f9fe404933552a1858414f8181936d63a88ca2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61f9fe404933552a1858414f8181936d63a88ca2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61f9fe404933552a1858414f8181936d63a88ca2/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b346e77f4d7b482df78f119819b1e06a544ef515", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b346e77f4d7b482df78f119819b1e06a544ef515", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b346e77f4d7b482df78f119819b1e06a544ef515"}], "stats": {"total": 56, "additions": 30, "deletions": 26}, "files": [{"sha": "13ee33938bb6ee83427cafcb8c2c56350642c124", "filename": "gcc/config/riscv/riscv-v.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f9fe404933552a1858414f8181936d63a88ca2/gcc%2Fconfig%2Friscv%2Friscv-v.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f9fe404933552a1858414f8181936d63a88ca2/gcc%2Fconfig%2Friscv%2Friscv-v.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-v.cc?ref=61f9fe404933552a1858414f8181936d63a88ca2", "patch": "@@ -115,7 +115,7 @@ emit_vlmax_vsetvl (machine_mode vmode)\n \n   emit_insn (\n     gen_vsetvl_no_side_effects (Pmode, vl, RVV_VLMAX, gen_int_mode (sew, Pmode),\n-\t\t\t\tgen_int_mode ((unsigned int) vmode, Pmode),\n+\t\t\t\tgen_int_mode (get_vlmul (vmode), Pmode),\n \t\t\t\tconst1_rtx, const1_rtx));\n   return vl;\n }"}, {"sha": "ffeb1b25fbcf4f84fcfc7a55cbc6a86dd39674d3", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f9fe404933552a1858414f8181936d63a88ca2/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f9fe404933552a1858414f8181936d63a88ca2/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc?ref=61f9fe404933552a1858414f8181936d63a88ca2", "patch": "@@ -73,7 +73,7 @@ class vsetvl : public function_base\n \t\t\t gen_int_mode (GET_MODE_BITSIZE (inner_mode), Pmode));\n \n     /* LMUL.  */\n-    e.add_input_operand (Pmode, gen_int_mode ((unsigned int) mode, Pmode));\n+    e.add_input_operand (Pmode, gen_int_mode (get_vlmul (mode), Pmode));\n \n     /* TA.  */\n     e.add_input_operand (Pmode, gen_int_mode (1, Pmode));"}, {"sha": "83e0187c21919b9e0fdd4996ccbdd7a986ad1ac6", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f9fe404933552a1858414f8181936d63a88ca2/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f9fe404933552a1858414f8181936d63a88ca2/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=61f9fe404933552a1858414f8181936d63a88ca2", "patch": "@@ -4256,30 +4256,34 @@ riscv_print_operand (FILE *file, rtx op, int letter)\n \t  }\n \telse if (code == CONST_INT)\n \t  {\n-\t    /* The value in the operand is the unsigned int value\n-\t       converted from (enum machine_mode).\n-\t       This RTX is generated as follows:\n-\n-\t       machine_mode mode = XXXmode;\n-\t       operand = gen_int_mode ((unsigned int)mode, Pmode);\n-\n-\t       So we convert it back into machine_mode and then calculate\n-\t       the LMUL according to GET_MODE_SIZE.  */\n-\n-\t    machine_mode rvv_mode = (machine_mode) UINTVAL (op);\n-\t    /* For rvv mask modes, we can not calculate LMUL simpily according\n-\t       to BYTES_PER_RISCV_VECTOR. When rvv_mode = VNx4BImode.\n-\t       Set SEW = 8, LMUL = 1 by default if TARGET_MIN_VLEN == 32.\n-\t       Set SEW = 8, LMUL = 1 / 2 by default if TARGET_MIN_VLEN > 32.  */\n-\t    bool bool_p = GET_MODE_CLASS (rvv_mode) == MODE_VECTOR_BOOL;\n-\t    poly_int64 m1_size = BYTES_PER_RISCV_VECTOR;\n-\t    poly_int64 rvv_size\n-\t      = bool_p ? GET_MODE_NUNITS (rvv_mode) : GET_MODE_SIZE (rvv_mode);\n-\t    bool fractional_p = known_lt (rvv_size, BYTES_PER_RISCV_VECTOR);\n-\t    unsigned int factor\n-\t      = fractional_p ? exact_div (m1_size, rvv_size).to_constant ()\n-\t\t\t     : exact_div (rvv_size, m1_size).to_constant ();\n-\t    asm_fprintf (file, \"%s%d\", fractional_p ? \"mf\" : \"m\", factor);\n+\t    /* If it is a const_int value, it denotes the VLMUL field enum.  */\n+\t    unsigned int vlmul = UINTVAL (op);\n+\t    switch (vlmul)\n+\t      {\n+\t      case riscv_vector::LMUL_1:\n+\t\tasm_fprintf (file, \"%s\", \"m1\");\n+\t\tbreak;\n+\t      case riscv_vector::LMUL_2:\n+\t\tasm_fprintf (file, \"%s\", \"m2\");\n+\t\tbreak;\n+\t      case riscv_vector::LMUL_4:\n+\t\tasm_fprintf (file, \"%s\", \"m4\");\n+\t\tbreak;\n+\t      case riscv_vector::LMUL_8:\n+\t\tasm_fprintf (file, \"%s\", \"m8\");\n+\t\tbreak;\n+\t      case riscv_vector::LMUL_F8:\n+\t\tasm_fprintf (file, \"%s\", \"mf8\");\n+\t\tbreak;\n+\t      case riscv_vector::LMUL_F4:\n+\t\tasm_fprintf (file, \"%s\", \"mf4\");\n+\t\tbreak;\n+\t      case riscv_vector::LMUL_F2:\n+\t\tasm_fprintf (file, \"%s\", \"mf2\");\n+\t\tbreak;\n+\t      default:\n+\t\tgcc_unreachable ();\n+\t      }\n \t  }\n \telse\n \t  output_operand_lossage (\"invalid vector constant\");"}]}