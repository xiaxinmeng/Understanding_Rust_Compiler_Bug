{"sha": "4c61300f2b243756eb2e8c59997b4675aeb8f37a", "node_id": "C_kwDOANBUbNoAKDRjNjEzMDBmMmIyNDM3NTZlYjJlOGM1OTk5N2I0Njc1YWViOGYzN2E", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-30T00:16:25Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-30T00:16:25Z"}, "message": "Daily bump.", "tree": {"sha": "40ae8eb5faaf2d29fbacfb101ee5d9861e94f67d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40ae8eb5faaf2d29fbacfb101ee5d9861e94f67d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c61300f2b243756eb2e8c59997b4675aeb8f37a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c61300f2b243756eb2e8c59997b4675aeb8f37a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c61300f2b243756eb2e8c59997b4675aeb8f37a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c61300f2b243756eb2e8c59997b4675aeb8f37a/comments", "author": null, "committer": null, "parents": [{"sha": "518bc4ef87eaf9dde8fbc83120a24ac0888c56e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/518bc4ef87eaf9dde8fbc83120a24ac0888c56e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/518bc4ef87eaf9dde8fbc83120a24ac0888c56e0"}], "stats": {"total": 305, "additions": 304, "deletions": 1}, "files": [{"sha": "54167a9c7fa34d825cdc73a657f261c8e3184f77", "filename": "gcc/ChangeLog", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c61300f2b243756eb2e8c59997b4675aeb8f37a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c61300f2b243756eb2e8c59997b4675aeb8f37a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c61300f2b243756eb2e8c59997b4675aeb8f37a", "patch": "@@ -1,3 +1,118 @@\n+2021-10-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* selftest.c (assert_streq): Add newlines when emitting non-equal\n+\tnon-NULL strings.\n+\n+2021-10-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* Makefile.in: Fix syntax for reference to LIBDEPS in\n+\tgengtype link rule.\n+\n+2021-10-29  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n+\n+\t* doc/install.texi: Bump required minimum DejaGnu version.\n+\n+2021-10-29  Aldy Hernandez  <aldyh@redhat.com>\n+\t    Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* value-relation.cc (path_oracle::killing_def): Add a\n+\tself-equivalence so we don't look to the root oracle.\n+\n+2021-10-29  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* passes.def: Replace the pass_thread_jumps before VRP* with\n+\tpass_thread_jumps_full.  Remove all pass_vrp_threader instances.\n+\t* tree-ssa-threadbackward.c (pass_data_thread_jumps_full):\n+\tRemove hyphen from \"thread-full\" name.\n+\n+2021-10-29  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/102983\n+\t* gimple-range-cache.h (propagate_updated_value): Make public.\n+\t* gimple-range.cc (gimple_ranger::range_of_stmt): Propagate exports\n+\twhen processing gcond stmts.\n+\n+2021-10-29  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gimple.c (gimple_call_retslot_flags): New function.\n+\t* gimple.h (gimple_call_retslot_flags): Declare.\n+\t* ipa-modref.c: Include tree-cfg.h.\n+\t(struct escape_entry): Turn parm_index to signed.\n+\t(modref_summary_lto::modref_summary_lto): Add retslot_flags.\n+\t(modref_summary::modref_summary): Initialize retslot_flags.\n+\t(struct modref_summary_lto): Likewise.\n+\t(modref_summary::useful_p): Check retslot_flags.\n+\t(modref_summary_lto::useful_p): Likewise.\n+\t(modref_summary::dump): Dump retslot_flags.\n+\t(modref_summary_lto::dump): Likewise.\n+\t(struct escape_point): Add hidden_args enum.\n+\t(analyze_ssa_name_flags): Ignore return slot return;\n+\tuse gimple_call_retslot_flags.\n+\t(record_escape_points): Break out from ...\n+\t(analyze_parms): ... here; handle retslot_flags.\n+\t(modref_summaries::duplicate): Duplicate retslot_flags.\n+\t(modref_summaries_lto::duplicate): Likewise.\n+\t(modref_write_escape_summary): Stream parm_index as signed.\n+\t(modref_read_escape_summary): Likewise.\n+\t(modref_write): Stream retslot_flags.\n+\t(read_section): Likewise.\n+\t(struct escape_map): Fix typo in comment.\n+\t(update_escape_summary_1): Fix whitespace.\n+\t(ipa_merge_modref_summary_after_inlining): Drop retslot_flags.\n+\t(modref_merge_call_site_flags): Merge retslot_flags.\n+\t* ipa-modref.h (struct modref_summary): Add retslot_flags.\n+\t* tree-ssa-structalias.c (handle_rhs_call): Handle retslot_flags.\n+\n+2021-10-29  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR tree-optimization/102977\n+\t* tree-vect-slp-patterns.c (vect_match_call_p): Remove.\n+\t(vect_detect_pair_op): Add crosslane check.\n+\t(vect_match_call_complex_mla): Remove.\n+\t(class complex_mul_pattern): Update comment.\n+\t(complex_mul_pattern::matches): Update detection.\n+\t(class complex_fma_pattern): Remove.\n+\t(complex_fma_pattern::matches): Remove.\n+\t(complex_fma_pattern::recognize): Remove.\n+\t(complex_fma_pattern::build): Remove.\n+\t(class complex_fms_pattern):  Update comment.\n+\t(complex_fms_pattern::matches): Remove.\n+\t(complex_operations_pattern::recognize): Remove complex_fma_pattern\n+\n+2021-10-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gimple-fold.c (gimple_fold_builtin_memset): Copy over location from\n+\tcall to store.\n+\n+2021-10-29  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\tPR target/102868\n+\t* config/rs6000/rs6000.c (altivec_expand_vec_perm_const): Add\n+\tpatterns match and emit for VSX xxpermdi.\n+\n+2021-10-29  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/102464\n+\t* config/i386/i386-builtin-types.def (V8HF_FTYPE_V8HF): New\n+\tfunction type.\n+\t(V16HF_FTYPE_V16HF): Ditto.\n+\t(V32HF_FTYPE_V32HF): Ditto.\n+\t(V8HF_FTYPE_V8HF_ROUND): Ditto.\n+\t(V16HF_FTYPE_V16HF_ROUND): Ditto.\n+\t(V32HF_FTYPE_V32HF_ROUND): Ditto.\n+\t* config/i386/i386-builtin.def ( IX86_BUILTIN_FLOORPH,\n+\tIX86_BUILTIN_CEILPH, IX86_BUILTIN_TRUNCPH,\n+\tIX86_BUILTIN_FLOORPH256, IX86_BUILTIN_CEILPH256,\n+\tIX86_BUILTIN_TRUNCPH256, IX86_BUILTIN_FLOORPH512,\n+\tIX86_BUILTIN_CEILPH512, IX86_BUILTIN_TRUNCPH512): New builtin.\n+\t* config/i386/i386-builtins.c\n+\t(ix86_builtin_vectorized_function): Enable vectorization for\n+\tHFmode FLOOR/CEIL/TRUNC operation.\n+\t* config/i386/i386-expand.c (ix86_expand_args_builtin): Handle\n+\tnew builtins.\n+\t* config/i386/sse.md (rint<mode>2, nearbyint<mode>2): Extend\n+\tto vector HFmodes.\n+\n 2021-10-28  Aldy Hernandez  <aldyh@redhat.com>\n \t    Andrew MacLeod  <amacleod@redhat.com>\n "}, {"sha": "41c1c08effed9cb24bd2ba5b132171df0c60fd0c", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c61300f2b243756eb2e8c59997b4675aeb8f37a/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c61300f2b243756eb2e8c59997b4675aeb8f37a/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=4c61300f2b243756eb2e8c59997b4675aeb8f37a", "patch": "@@ -1 +1 @@\n-20211029\n+20211030"}, {"sha": "4d46aefc99d3c24efe7277a5833d89cebb4d63cb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c61300f2b243756eb2e8c59997b4675aeb8f37a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c61300f2b243756eb2e8c59997b4675aeb8f37a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4c61300f2b243756eb2e8c59997b4675aeb8f37a", "patch": "@@ -1,3 +1,13 @@\n+2021-10-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102820\n+\t* semantics.c (maybe_zero_constructor_nelts): New function.\n+\t(finish_compound_literal): Implement DR2351 - void{}.\n+\tIf type is cv void and compound_literal has no elements, return\n+\tvoid_node.  If type is cv void and compound_literal might have no\n+\telements after expansion, handle it like other dependent compound\n+\tliterals.\n+\n 2021-10-28  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/102933"}, {"sha": "129fe30a191dbedd78c88eaa6871be70e633a511", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c61300f2b243756eb2e8c59997b4675aeb8f37a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c61300f2b243756eb2e8c59997b4675aeb8f37a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4c61300f2b243756eb2e8c59997b4675aeb8f37a", "patch": "@@ -1,3 +1,8 @@\n+2021-10-29  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n+\n+\t* symbol.c (free_tb_tree): Free type-bound procedure struct.\n+\t(gfc_get_typebound_proc): Use explicit memcpy for clarity.\n+\n 2021-10-27  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n \n \t* intrinsic.h (gfc_check_sum, gfc_resolve_atan2d, gfc_resolve_kill,"}, {"sha": "64c469a6a9d1bdf173b9ad85ea4beadaedcddbd7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c61300f2b243756eb2e8c59997b4675aeb8f37a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c61300f2b243756eb2e8c59997b4675aeb8f37a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4c61300f2b243756eb2e8c59997b4675aeb8f37a", "patch": "@@ -1,3 +1,158 @@\n+2021-10-29  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* g++.dg/vect/pr99149.cc: Update case.\n+\n+2021-10-29  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* c-c++-common/gomp/pragma-1.c: New test.\n+\t* c-c++-common/gomp/pragma-2.c: New test.\n+\n+2021-10-29  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/loop-unswitch-2.c: Adjust for threading changes.\n+\t* gcc.dg/old-style-asm-1.c: Same.\n+\t* gcc.dg/tree-ssa/phi_on_compare-1.c: Same.\n+\t* gcc.dg/tree-ssa/phi_on_compare-2.c: Same.\n+\t* gcc.dg/tree-ssa/phi_on_compare-3.c: Same.\n+\t* gcc.dg/tree-ssa/phi_on_compare-4.c: Same.\n+\t* gcc.dg/tree-ssa/pr20701.c: Same.\n+\t* gcc.dg/tree-ssa/pr21001.c: Same.\n+\t* gcc.dg/tree-ssa/pr21294.c: Same.\n+\t* gcc.dg/tree-ssa/pr21417.c: Same.\n+\t* gcc.dg/tree-ssa/pr21559.c: Same.\n+\t* gcc.dg/tree-ssa/pr21563.c: Same.\n+\t* gcc.dg/tree-ssa/pr49039.c: Same.\n+\t* gcc.dg/tree-ssa/pr59597.c: Same.\n+\t* gcc.dg/tree-ssa/pr61839_1.c: Same.\n+\t* gcc.dg/tree-ssa/pr61839_3.c: Same.\n+\t* gcc.dg/tree-ssa/pr66752-3.c: Same.\n+\t* gcc.dg/tree-ssa/pr68198.c: Same.\n+\t* gcc.dg/tree-ssa/pr77445-2.c: Same.\n+\t* gcc.dg/tree-ssa/pr77445.c: Same.\n+\t* gcc.dg/tree-ssa/ranger-threader-1.c: Same.\n+\t* gcc.dg/tree-ssa/ranger-threader-2.c: Same.\n+\t* gcc.dg/tree-ssa/ranger-threader-4.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-1.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-11.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-12.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-14.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-16.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-2b.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-7.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-thread-14.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-thread-backedge.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-vrp-thread-1.c: Same.\n+\t* gcc.dg/tree-ssa/vrp02.c: Same.\n+\t* gcc.dg/tree-ssa/vrp03.c: Same.\n+\t* gcc.dg/tree-ssa/vrp05.c: Same.\n+\t* gcc.dg/tree-ssa/vrp06.c: Same.\n+\t* gcc.dg/tree-ssa/vrp07.c: Same.\n+\t* gcc.dg/tree-ssa/vrp08.c: Same.\n+\t* gcc.dg/tree-ssa/vrp09.c: Same.\n+\t* gcc.dg/tree-ssa/vrp33.c: Same.\n+\t* gcc.dg/uninit-pred-9_b.c: Same.\n+\t* gcc.dg/uninit-pred-7_a.c: xfail.\n+\n+2021-10-29  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* lib/multiline.exp (_build_multiline_regex): Use a better\n+\tregexp than .* to match up to EOL.\n+\n+2021-10-29  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/pr102983.c: New.\n+\n+2021-10-29  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR tree-optimization/102977\n+\t* gcc.dg/vect/complex/bb-slp-complex-add-pattern-int.c: Updated.\n+\t* gcc.dg/vect/complex/bb-slp-complex-add-pattern-long.c: Updated.\n+\t* gcc.dg/vect/complex/bb-slp-complex-add-pattern-short.c: Updated.\n+\t* gcc.dg/vect/complex/bb-slp-complex-add-pattern-unsigned-int.c:\n+\tUpdated.\n+\t* gcc.dg/vect/complex/bb-slp-complex-add-pattern-unsigned-long.c:\n+\tUpdated.\n+\t* gcc.dg/vect/complex/bb-slp-complex-add-pattern-unsigned-short.c:\n+\tUpdated.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-add-double.c:\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-add-float.c: Updated.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-add-half-float.c:\n+\tUpdated.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-add-pattern-double.c:\n+\tUpdated.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-add-pattern-float.c:\n+\tUpdated.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-add-pattern-half-float.c:\n+\tUpdated.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mla-double.c:\n+\tUpdated.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mla-float.c: Updated.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mla-half-float.c:\n+\tUpdated.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mls-double.c:\n+\tUpdated.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mls-float.c: Updated.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mls-half-float.c:\n+\tUpdated.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mul-double.c: Updated.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mul-float.c: Updated.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mul-half-float.c:\n+\tUpdated.\n+\t* gcc.dg/vect/complex/fast-math-complex-add-double.c: Updated.\n+\t* gcc.dg/vect/complex/fast-math-complex-add-float.c: Updated.\n+\t* gcc.dg/vect/complex/fast-math-complex-add-half-float.c: Updated.\n+\t* gcc.dg/vect/complex/fast-math-complex-add-pattern-double.c: Updated.\n+\t* gcc.dg/vect/complex/fast-math-complex-add-pattern-float.c: Updated.\n+\t* gcc.dg/vect/complex/fast-math-complex-add-pattern-half-float.c:\n+\tUpdated.\n+\t* gcc.dg/vect/complex/fast-math-complex-mla-double.c: Updated.\n+\t* gcc.dg/vect/complex/fast-math-complex-mla-float.c: Updated.\n+\t* gcc.dg/vect/complex/fast-math-complex-mla-half-float.c: Updated.\n+\t* gcc.dg/vect/complex/fast-math-complex-mls-double.c: Updated.\n+\t* gcc.dg/vect/complex/fast-math-complex-mls-float.c: Updated.\n+\t* gcc.dg/vect/complex/fast-math-complex-mls-half-float.c: Updated.\n+\t* gcc.dg/vect/complex/fast-math-complex-mul-double.c: Updated.\n+\t* gcc.dg/vect/complex/fast-math-complex-mul-float.c: Updated.\n+\t* gcc.dg/vect/complex/fast-math-complex-mul-half-float.c: Updated.\n+\t* gcc.dg/vect/complex/vect-complex-add-pattern-byte.c: Updated.\n+\t* gcc.dg/vect/complex/vect-complex-add-pattern-int.c: Updated.\n+\t* gcc.dg/vect/complex/vect-complex-add-pattern-long.c: Updated.\n+\t* gcc.dg/vect/complex/vect-complex-add-pattern-short.c: Updated.\n+\t* gcc.dg/vect/complex/vect-complex-add-pattern-unsigned-byte.c:\n+\tUpdated.\n+\t* gcc.dg/vect/complex/vect-complex-add-pattern-unsigned-int.c:\n+\tUpdated.\n+\t* gcc.dg/vect/complex/vect-complex-add-pattern-unsigned-long.c:\n+\tUpdated.\n+\t* gcc.dg/vect/complex/vect-complex-add-pattern-unsigned-short.c:\n+\tUpdated.\n+\t* gcc.dg/vect/complex/bb-slp-complex-add-pattern-byte.c: Removed.\n+\t* gcc.dg/vect/complex/bb-slp-complex-add-pattern-unsigned-byte.c:\n+\tRemoved.\n+\n+2021-10-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/Wstringop-overflow-62.c: Adjust expected diagnostics.\n+\n+2021-10-29  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/torture/fp-uint64-convert-double-1.c: Add\n+\t-fexcess-precision=standard.\n+\n+2021-10-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102820\n+\t* g++.dg/cpp0x/dr2351.C: New test.\n+\n+2021-10-29  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\tPR target/102868\n+\t* gcc.target/powerpc/pr102868.c: New test.\n+\n+2021-10-29  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr102464-vrndscaleph.c: New test.\n+\n 2021-10-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/102951"}, {"sha": "82e0ecae8bb54fc8f348161ca395318dd9fdcb1c", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c61300f2b243756eb2e8c59997b4675aeb8f37a/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c61300f2b243756eb2e8c59997b4675aeb8f37a/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=4c61300f2b243756eb2e8c59997b4675aeb8f37a", "patch": "@@ -1,3 +1,12 @@\n+2021-10-29  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR c++/102409\n+\t* directives.c (destringize_and_run): Add PRAGMA_OP to the\n+\tCPP_PRAGMA token's flags to mark is as coming from _Pragma.\n+\t* include/cpplib.h (PRAGMA_OP): #define, to be used with token flags.\n+\t* macro.c (collect_args): Only handle CPP_PRAGMA special if PRAGMA_OP\n+\tis set.\n+\n 2021-10-22  Eric Gallager  <egallager@gcc.gnu.org>\n \n \tPR other/102663"}, {"sha": "642497fda417f89e2664a3b5face08c8c91191df", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c61300f2b243756eb2e8c59997b4675aeb8f37a/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c61300f2b243756eb2e8c59997b4675aeb8f37a/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=4c61300f2b243756eb2e8c59997b4675aeb8f37a", "patch": "@@ -1,3 +1,8 @@\n+2021-10-29  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* testsuite/libgomp.graphite/force-parallel-4.c: Adjust for threading changes.\n+\t* testsuite/libgomp.graphite/force-parallel-8.c: Same.\n+\n 2021-10-27  Jakub Jelinek  <jakub@redhat.com>\n \n \t* libgomp.texi (OpenMP 5.0): Mention that Non-rectangular loop nests"}, {"sha": "e1f2d4cbd58c29a7f52205c399e6a198674e3497", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c61300f2b243756eb2e8c59997b4675aeb8f37a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c61300f2b243756eb2e8c59997b4675aeb8f37a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4c61300f2b243756eb2e8c59997b4675aeb8f37a", "patch": "@@ -1,3 +1,7 @@\n+2021-10-29  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/23_containers/stack/deduction.cc: Fix typo.\n+\n 2021-10-26  Martin Sebor  <msebor@redhat.com>\n \n \t* testsuite/21_strings/basic_string/capacity/1.cc: Also suppress"}]}