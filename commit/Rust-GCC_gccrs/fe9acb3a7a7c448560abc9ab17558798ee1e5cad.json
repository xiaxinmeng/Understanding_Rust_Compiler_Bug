{"sha": "fe9acb3a7a7c448560abc9ab17558798ee1e5cad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU5YWNiM2E3YTdjNDQ4NTYwYWJjOWFiMTc1NTg3OThlZTFlNWNhZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-07-14T11:39:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-07-14T11:39:14Z"}, "message": "re PR tree-optimization/66863 (wrong code at -Os and above on x86_64-linux-gnu)\n\n2015-07-14  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/66863\n\t* tree-vrp.c (register_edge_assert_for_2): Properly restrict\n\twhat we record for conversion use stmt lhs inequalities.\n\n\t* gcc.dg/torture/pr66863.c: New testcase.\n\nFrom-SVN: r225768", "tree": {"sha": "58e09f0ce7f9d02b69bacb110bbc45d67acdc4cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58e09f0ce7f9d02b69bacb110bbc45d67acdc4cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe9acb3a7a7c448560abc9ab17558798ee1e5cad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe9acb3a7a7c448560abc9ab17558798ee1e5cad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe9acb3a7a7c448560abc9ab17558798ee1e5cad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe9acb3a7a7c448560abc9ab17558798ee1e5cad/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ec1fa94b7f20c6f8ebaba6f37d8aa1357420d72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ec1fa94b7f20c6f8ebaba6f37d8aa1357420d72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ec1fa94b7f20c6f8ebaba6f37d8aa1357420d72"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "e9773897bc87c17f9de6117feac7428d243d1d5d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe9acb3a7a7c448560abc9ab17558798ee1e5cad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe9acb3a7a7c448560abc9ab17558798ee1e5cad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe9acb3a7a7c448560abc9ab17558798ee1e5cad", "patch": "@@ -1,3 +1,9 @@\n+2015-07-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/66863\n+\t* tree-vrp.c (register_edge_assert_for_2): Properly restrict\n+\twhat we record for conversion use stmt lhs inequalities.\n+\n 2015-07-14  Richard Biener  <rguenther@suse.de>\n \n \t* genmatch.c (dt_node::gen_kids_1): Fix case label indenting."}, {"sha": "198775602a9e1ba4c86c08e28dca4898268e0234", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe9acb3a7a7c448560abc9ab17558798ee1e5cad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe9acb3a7a7c448560abc9ab17558798ee1e5cad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fe9acb3a7a7c448560abc9ab17558798ee1e5cad", "patch": "@@ -1,3 +1,8 @@\n+2015-07-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/66863\n+\t* gcc.dg/torture/pr66863.c: New testcase.\n+\n 2015-07-13  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tPR c++/65186"}, {"sha": "22cb397fc5d8ecdffef013719a38f2434c812d34", "filename": "gcc/testsuite/gcc.dg/torture/pr66863.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe9acb3a7a7c448560abc9ab17558798ee1e5cad/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr66863.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe9acb3a7a7c448560abc9ab17558798ee1e5cad/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr66863.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr66863.c?ref=fe9acb3a7a7c448560abc9ab17558798ee1e5cad", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+\n+int a, b;\n+\n+int\n+fn1 (int p1)\n+{\n+  if (p1 < -2147483647) \n+    return 0;\n+  else \n+    return 1;\n+}\n+\n+int\n+fn2 (int p1, short p2)\n+{\n+  return p2 ? p1 % p2 : 0; \n+}\n+\n+int\n+main ()\n+{\n+  b = fn2 (fn1 (a), a);\n+  return 0;\n+}"}, {"sha": "795b02728aeac7c5709295a9310c1d86b047f81c", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe9acb3a7a7c448560abc9ab17558798ee1e5cad/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe9acb3a7a7c448560abc9ab17558798ee1e5cad/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=fe9acb3a7a7c448560abc9ab17558798ee1e5cad", "patch": "@@ -5381,7 +5381,17 @@ register_edge_assert_for_2 (tree name, edge e, gimple_stmt_iterator bsi,\n \t      cst = int_const_binop (code, val, cst);\n \t    }\n \t  else if (CONVERT_EXPR_CODE_P (code))\n-\t    cst = fold_convert (TREE_TYPE (name2), val);\n+\t    {\n+\t      /* For truncating conversions require that the constant\n+\t         fits in the truncated type if we are going to record\n+\t\t an inequality.  */\n+\t      if (comp_code == NE_EXPR\n+\t\t  && (TYPE_PRECISION (TREE_TYPE (name2))\n+\t\t      < TYPE_PRECISION (TREE_TYPE (name)))\n+\t\t  && ! int_fits_type_p (val, TREE_TYPE (name2)))\n+\t\tcontinue;\n+\t      cst = fold_convert (TREE_TYPE (name2), val);\n+\t    }\n \t  else\n \t    continue;\n "}]}