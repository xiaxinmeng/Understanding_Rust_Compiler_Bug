{"sha": "8395b41e9e5476e0e18f377d2f7f649a14a0c69c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM5NWI0MWU5ZTU0NzZlMGUxOGYzNzdkMmY3ZjY0OWExNGEwYzY5Yw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2010-11-26T14:07:16Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2010-11-26T14:07:16Z"}, "message": "s390.c (print_operand_address): Replace assert with error message.\n\n2010-11-26  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* config/s390/s390.c (print_operand_address): Replace assert with\n\terror message.\n\t(print_operand): Replace assertions, gcc_unreachable and\n\tfatal_insn with error messages.\n\nFrom-SVN: r167177", "tree": {"sha": "8808c4f7cc5a2fc862d2bbde505c3ce0b3d3c634", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8808c4f7cc5a2fc862d2bbde505c3ce0b3d3c634"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8395b41e9e5476e0e18f377d2f7f649a14a0c69c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8395b41e9e5476e0e18f377d2f7f649a14a0c69c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8395b41e9e5476e0e18f377d2f7f649a14a0c69c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8395b41e9e5476e0e18f377d2f7f649a14a0c69c/comments", "author": null, "committer": null, "parents": [{"sha": "1b2bb17149a53bf7af1ede24b1ad431525b093b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b2bb17149a53bf7af1ede24b1ad431525b093b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b2bb17149a53bf7af1ede24b1ad431525b093b8"}], "stats": {"total": 86, "additions": 67, "deletions": 19}, "files": [{"sha": "26694ac4d3e7fcc033bc8d12f604379cff030f6b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8395b41e9e5476e0e18f377d2f7f649a14a0c69c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8395b41e9e5476e0e18f377d2f7f649a14a0c69c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8395b41e9e5476e0e18f377d2f7f649a14a0c69c", "patch": "@@ -1,3 +1,10 @@\n+2010-11-26  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* config/s390/s390.c (print_operand_address): Replace assert with\n+\terror message.\n+\t(print_operand): Replace assertions, gcc_unreachable and\n+\tfatal_insn with error messages.\n+\n 2010-11-26  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/46665"}, {"sha": "25807239e92f78ca4f9564277890acdb5dcef265", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 60, "deletions": 19, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8395b41e9e5476e0e18f377d2f7f649a14a0c69c/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8395b41e9e5476e0e18f377d2f7f649a14a0c69c/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=8395b41e9e5476e0e18f377d2f7f649a14a0c69c", "patch": "@@ -5130,7 +5130,11 @@ print_operand_address (FILE *file, rtx addr)\n \n   if (s390_symref_operand_p (addr, NULL, NULL))\n     {\n-      gcc_assert (TARGET_Z10);\n+      if (!TARGET_Z10)\n+\t{\n+\t  error (\"symbolic memory references are only supported on z10 or later\");\n+\t  return;\n+\t}\n       output_addr_const (file, addr);\n       return;\n     }\n@@ -5197,7 +5201,7 @@ print_operand (FILE *file, rtx x, int code)\n       else if (GET_CODE (x) == GT)\n \tfprintf (file, \"h\");\n       else\n-\tgcc_unreachable ();\n+\terror (\"invalid comparison operator for 'E' output modifier\");\n       return;\n \n     case 'J':\n@@ -5217,7 +5221,7 @@ print_operand (FILE *file, rtx x, int code)\n \t  assemble_name (file, get_some_local_dynamic_name ());\n \t}\n       else\n-\tgcc_unreachable ();\n+\terror (\"invalid reference for 'J' output modifier\");\n       return;\n \n     case 'G':\n@@ -5229,11 +5233,21 @@ print_operand (FILE *file, rtx x, int code)\n         struct s390_address ad;\n \tint ret;\n \n-        gcc_assert (GET_CODE (x) == MEM);\n+\tif (!MEM_P (x))\n+\t  {\n+\t    error (\"memory reference expected for 'O' output modifier\");\n+\t    return;\n+\t  }\n+\n \tret = s390_decompose_address (XEXP (x, 0), &ad);\n-\tgcc_assert (ret);\n-\tgcc_assert (!ad.base || REGNO_OK_FOR_BASE_P (REGNO (ad.base)));\n-\tgcc_assert (!ad.indx);\n+\n+\tif (!ret\n+\t    || (ad.base && !REGNO_OK_FOR_BASE_P (REGNO (ad.base)))\n+\t    || ad.indx)\n+\t  {\n+\t    error (\"invalid address for 'O' output modifier\");\n+\t    return;\n+\t  }\n \n         if (ad.disp)\n           output_addr_const (file, ad.disp);\n@@ -5247,11 +5261,21 @@ print_operand (FILE *file, rtx x, int code)\n         struct s390_address ad;\n \tint ret;\n \n-        gcc_assert (GET_CODE (x) == MEM);\n+\tif (!MEM_P (x))\n+\t  {\n+\t    error (\"memory reference expected for 'R' output modifier\");\n+\t    return;\n+\t  }\n+\n \tret = s390_decompose_address (XEXP (x, 0), &ad);\n-\tgcc_assert (ret);\n-\tgcc_assert (!ad.base || REGNO_OK_FOR_BASE_P (REGNO (ad.base)));\n-\tgcc_assert (!ad.indx);\n+\n+\tif (!ret\n+\t    || (ad.base && !REGNO_OK_FOR_BASE_P (REGNO (ad.base)))\n+\t    || ad.indx)\n+\t  {\n+\t    error (\"invalid address for 'R' output modifier\");\n+\t    return;\n+\t  }\n \n         if (ad.base)\n           fprintf (file, \"%s\", reg_names[REGNO (ad.base)]);\n@@ -5265,11 +5289,20 @@ print_operand (FILE *file, rtx x, int code)\n \tstruct s390_address ad;\n \tint ret;\n \n-        gcc_assert (GET_CODE (x) == MEM);\n+\tif (!MEM_P (x))\n+\t  {\n+\t    error (\"memory reference expected for 'S' output modifier\");\n+\t    return;\n+\t  }\n \tret = s390_decompose_address (XEXP (x, 0), &ad);\n-\tgcc_assert (ret);\n-\tgcc_assert (!ad.base || REGNO_OK_FOR_BASE_P (REGNO (ad.base)));\n-\tgcc_assert (!ad.indx);\n+\n+\tif (!ret\n+\t    || (ad.base && !REGNO_OK_FOR_BASE_P (REGNO (ad.base)))\n+\t    || ad.indx)\n+\t  {\n+\t    error (\"invalid address for 'S' output modifier\");\n+\t    return;\n+\t  }\n \n \tif (ad.disp)\n \t  output_addr_const (file, ad.disp);\n@@ -5287,7 +5320,7 @@ print_operand (FILE *file, rtx x, int code)\n       else if (GET_CODE (x) == MEM)\n \tx = change_address (x, VOIDmode, plus_constant (XEXP (x, 0), 4));\n       else\n-        gcc_unreachable ();\n+\terror (\"register or memory expression expected for 'N' output modifier\");\n       break;\n \n     case 'M':\n@@ -5296,7 +5329,7 @@ print_operand (FILE *file, rtx x, int code)\n       else if (GET_CODE (x) == MEM)\n \tx = change_address (x, VOIDmode, plus_constant (XEXP (x, 0), 8));\n       else\n-        gcc_unreachable ();\n+\terror (\"register or memory expression expected for 'M' output modifier\");\n       break;\n \n     case 'Y':\n@@ -5357,11 +5390,19 @@ print_operand (FILE *file, rtx x, int code)\n       else if (code == 'h')\n         fprintf (file, HOST_WIDE_INT_PRINT_DEC, ((CONST_DOUBLE_LOW (x) & 0xffff) ^ 0x8000) - 0x8000);\n       else\n-        gcc_unreachable ();\n+\t{\n+\t  if (code == 0)\n+\t    error (\"invalid constant - try using an output modifier\");\n+\t  else\n+\t    error (\"invalid constant for output modifier '%c'\", code);\n+\t}\n       break;\n \n     default:\n-      fatal_insn (\"UNKNOWN in print_operand !?\", x);\n+      if (code == 0)\n+\terror (\"invalid expression - try using an output modifier\");\n+      else\n+\terror (\"invalid expression for output modifier '%c'\", code);\n       break;\n     }\n }"}]}