{"sha": "b1c8622e9534e5c614785e80b35c423fe0e454c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFjODYyMmU5NTM0ZTVjNjE0Nzg1ZTgwYjM1YzQyM2ZlMGU0NTRjMQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2010-07-14T11:07:17Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2010-07-14T11:07:17Z"}, "message": "reload.c (find_reloads): Revert code to penalize small register classes that was brought in with the IRA...\n\n\t* reload.c (find_reloads): Revert code to penalize small register\n\tclasses that was brought in with the IRA merge.\n\nFrom-SVN: r162176", "tree": {"sha": "aa503e73d27678c2ab8a1e3545df1211a2fdfec1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa503e73d27678c2ab8a1e3545df1211a2fdfec1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1c8622e9534e5c614785e80b35c423fe0e454c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1c8622e9534e5c614785e80b35c423fe0e454c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1c8622e9534e5c614785e80b35c423fe0e454c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1c8622e9534e5c614785e80b35c423fe0e454c1/comments", "author": null, "committer": null, "parents": [{"sha": "2bd6311dbb9325b80a3b9106fb40b508c393e2d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bd6311dbb9325b80a3b9106fb40b508c393e2d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bd6311dbb9325b80a3b9106fb40b508c393e2d4"}], "stats": {"total": 30, "additions": 6, "deletions": 24}, "files": [{"sha": "2f0795ee213a5ddcb2560bbe720c61b13ba9957c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c8622e9534e5c614785e80b35c423fe0e454c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c8622e9534e5c614785e80b35c423fe0e454c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1c8622e9534e5c614785e80b35c423fe0e454c1", "patch": "@@ -1,3 +1,8 @@\n+2010-07-14  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* reload.c (find_reloads): Revert code to penalize small register\n+\tclasses that was brought in with the IRA merge.\n+\n 2010-07-14  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-ccp.c (fold_const_aggregate_ref): Handle MEM_REF"}, {"sha": "98aaa236200530583095c4013bbc246fd79de0cf", "filename": "gcc/reload.c", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c8622e9534e5c614785e80b35c423fe0e454c1/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c8622e9534e5c614785e80b35c423fe0e454c1/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=b1c8622e9534e5c614785e80b35c423fe0e454c1", "patch": "@@ -2602,7 +2602,6 @@ find_reloads (rtx insn, int replace, int ind_levels, int live_known,\n   char goal_alternative_earlyclobber[MAX_RECOG_OPERANDS];\n   int goal_alternative_swapped;\n   int best;\n-  int best_small_class_operands_num;\n   int commutative;\n   char operands_match[MAX_RECOG_OPERANDS][MAX_RECOG_OPERANDS];\n   rtx substed_operand[MAX_RECOG_OPERANDS];\n@@ -2928,7 +2927,6 @@ find_reloads (rtx insn, int replace, int ind_levels, int live_known,\n      all the operands together against the register constraints.  */\n \n   best = MAX_RECOG_OPERANDS * 2 + 600;\n-  best_small_class_operands_num = 0;\n \n   swapped = 0;\n   goal_alternative_swapped = 0;\n@@ -3715,27 +3713,7 @@ find_reloads (rtx insn, int replace, int ind_levels, int live_known,\n \t record it as the chosen goal for reloading.  */\n       if (! bad)\n \t{\n-\t  bool change_p = false;\n-\t  int small_class_operands_num = 0;\n-\n-\t  if (best >= losers)\n-\t    {\n-\t      for (i = 0; i < noperands; i++)\n-\t\tsmall_class_operands_num\n-\t\t  += SMALL_REGISTER_CLASS_P (this_alternative[i]) ? 1 : 0;\n-\t      if (best > losers\n-\t\t  || (best == losers\n-\t\t      /* If the cost of the reloads is the same,\n-\t\t\t prefer alternative which requires minimal\n-\t\t\t number of small register classes for the\n-\t\t\t operands.  This improves chances of reloads\n-\t\t\t for insn requiring small register\n-\t\t\t classes.  */\n-\t\t      && (small_class_operands_num\n-\t\t\t  < best_small_class_operands_num)))\n-\t\tchange_p = true;\n-\t    }\n-\t  if (change_p)\n+\t  if (best > losers)\n \t    {\n \t      for (i = 0; i < noperands; i++)\n \t\t{\n@@ -3751,7 +3729,6 @@ find_reloads (rtx insn, int replace, int ind_levels, int live_known,\n \t\t}\n \t      goal_alternative_swapped = swapped;\n \t      best = losers;\n-\t      best_small_class_operands_num = small_class_operands_num;\n \t      goal_alternative_number = this_alternative_number;\n \t      goal_earlyclobber = this_earlyclobber;\n \t    }"}]}