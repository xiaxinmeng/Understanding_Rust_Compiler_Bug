{"sha": "39e843e8a7a15d93c6a23ec007e70738505291b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzllODQzZThhN2ExNWQ5M2M2YTIzZWMwMDdlNzA3Mzg1MDUyOTFiMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-05-07T11:26:58Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-05-07T11:26:58Z"}, "message": "double-int.h (rshift): New overload.\n\n2013-05-07  Richard Biener  <rguenther@suse.de>\n\n\t* double-int.h (rshift): New overload.\n\t* double-int.c (rshift): New function.\n\t* tree-ssa-sccvn.c (copy_reference_ops_from_ref): Optimize.\n\t(create_reference_ops_from_ref): Remove.\n\t(vn_reference_insert): Use shared ops for constructing the\n\treference and copy it.\n\nFrom-SVN: r198676", "tree": {"sha": "91a77a6eacde49e871b7513dea7db0186678681a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91a77a6eacde49e871b7513dea7db0186678681a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39e843e8a7a15d93c6a23ec007e70738505291b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39e843e8a7a15d93c6a23ec007e70738505291b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39e843e8a7a15d93c6a23ec007e70738505291b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39e843e8a7a15d93c6a23ec007e70738505291b3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0a1a83cba32006411c4ce4793ca516406489cfae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a1a83cba32006411c4ce4793ca516406489cfae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a1a83cba32006411c4ce4793ca516406489cfae"}], "stats": {"total": 73, "additions": 53, "deletions": 20}, "files": [{"sha": "0dc66003fb4f3f2b56186423bc92defb174ce762", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39e843e8a7a15d93c6a23ec007e70738505291b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39e843e8a7a15d93c6a23ec007e70738505291b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39e843e8a7a15d93c6a23ec007e70738505291b3", "patch": "@@ -1,3 +1,12 @@\n+2013-05-07  Richard Biener  <rguenther@suse.de>\n+\n+\t* double-int.h (rshift): New overload.\n+\t* double-int.c (rshift): New function.\n+\t* tree-ssa-sccvn.c (copy_reference_ops_from_ref): Optimize.\n+\t(create_reference_ops_from_ref): Remove.\n+\t(vn_reference_insert): Use shared ops for constructing the\n+\treference and copy it.\n+\n 2013-05-07  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/57190"}, {"sha": "fe3c096619ab0acce595955d74207279bd33b1dc", "filename": "gcc/double-int.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39e843e8a7a15d93c6a23ec007e70738505291b3/gcc%2Fdouble-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39e843e8a7a15d93c6a23ec007e70738505291b3/gcc%2Fdouble-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.c?ref=39e843e8a7a15d93c6a23ec007e70738505291b3", "patch": "@@ -1116,6 +1116,39 @@ double_int::lshift (HOST_WIDE_INT count) const\n   return ret;\n }\n \n+/* Shift A right by COUNT places.  */\n+\n+double_int\n+double_int::rshift (HOST_WIDE_INT count) const\n+{\n+  double_int ret;\n+\n+  gcc_checking_assert (count >= 0);\n+\n+  if (count >= HOST_BITS_PER_DOUBLE_INT)\n+    {\n+      /* Shifting by the host word size is undefined according to the\n+\t ANSI standard, so we must handle this as a special case.  */\n+      ret.high = 0;\n+      ret.low = 0;\n+    }\n+  else if (count >= HOST_BITS_PER_WIDE_INT)\n+    {\n+      ret.high = 0;\n+      ret.low\n+\t= (unsigned HOST_WIDE_INT) (high >> (count - HOST_BITS_PER_WIDE_INT));\n+    }\n+  else\n+    {\n+      ret.high = high >> count;\n+      ret.low = ((low >> count)\n+\t\t | ((unsigned HOST_WIDE_INT) high\n+\t\t    << (HOST_BITS_PER_WIDE_INT - count - 1) << 1));\n+    }\n+\n+  return ret;\n+}\n+\n /* Shift A left by COUNT places keeping only PREC bits of result.  Shift\n    right if COUNT is negative.  ARITH true specifies arithmetic shifting;\n    otherwise use logical shift.  */"}, {"sha": "8e709e6d415eb0b3367b26fd7dca0c65d780e174", "filename": "gcc/double-int.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39e843e8a7a15d93c6a23ec007e70738505291b3/gcc%2Fdouble-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39e843e8a7a15d93c6a23ec007e70738505291b3/gcc%2Fdouble-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.h?ref=39e843e8a7a15d93c6a23ec007e70738505291b3", "patch": "@@ -130,6 +130,7 @@ struct double_int\n \n   double_int lshift (HOST_WIDE_INT count) const;\n   double_int lshift (HOST_WIDE_INT count, unsigned int prec, bool arith) const;\n+  double_int rshift (HOST_WIDE_INT count) const;\n   double_int rshift (HOST_WIDE_INT count, unsigned int prec, bool arith) const;\n   double_int alshift (HOST_WIDE_INT count, unsigned int prec) const;\n   double_int arshift (HOST_WIDE_INT count, unsigned int prec) const;"}, {"sha": "49d61b0c239647f4ffcd598f1078f0cb5955c1fc", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39e843e8a7a15d93c6a23ec007e70738505291b3/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39e843e8a7a15d93c6a23ec007e70738505291b3/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=39e843e8a7a15d93c6a23ec007e70738505291b3", "patch": "@@ -728,28 +728,30 @@ copy_reference_ops_from_ref (tree ref, vec<vn_reference_op_s> *result)\n     {\n       vn_reference_op_s temp;\n \n+      result->reserve (3);\n+\n       memset (&temp, 0, sizeof (temp));\n       temp.type = TREE_TYPE (ref);\n       temp.opcode = TREE_CODE (ref);\n       temp.op0 = TMR_INDEX (ref);\n       temp.op1 = TMR_STEP (ref);\n       temp.op2 = TMR_OFFSET (ref);\n       temp.off = -1;\n-      result->safe_push (temp);\n+      result->quick_push (temp);\n \n       memset (&temp, 0, sizeof (temp));\n       temp.type = NULL_TREE;\n       temp.opcode = ERROR_MARK;\n       temp.op0 = TMR_INDEX2 (ref);\n       temp.off = -1;\n-      result->safe_push (temp);\n+      result->quick_push (temp);\n \n       memset (&temp, 0, sizeof (temp));\n       temp.type = NULL_TREE;\n       temp.opcode = TREE_CODE (TMR_BASE (ref));\n       temp.op0 = TMR_BASE (ref);\n       temp.off = -1;\n-      result->safe_push (temp);\n+      result->quick_push (temp);\n       return;\n     }\n \n@@ -802,9 +804,8 @@ copy_reference_ops_from_ref (tree ref, vec<vn_reference_op_s> *result)\n \t\t    double_int off\n \t\t      = tree_to_double_int (this_offset)\n \t\t\t+ tree_to_double_int (bit_offset)\n-\t\t\t  .arshift (BITS_PER_UNIT == 8\n-\t\t\t\t    ? 3 : exact_log2 (BITS_PER_UNIT),\n-\t\t\t\t    HOST_BITS_PER_DOUBLE_INT);\n+\t\t\t.rshift (BITS_PER_UNIT == 8\n+\t\t\t\t   ? 3 : exact_log2 (BITS_PER_UNIT));\n \t\t    if (off.fits_shwi ())\n \t\t      temp.off = off.low;\n \t\t  }\n@@ -846,7 +847,7 @@ copy_reference_ops_from_ref (tree ref, vec<vn_reference_op_s> *result)\n \t  temp.off = 0;\n \t  result->safe_push (temp);\n \t  temp.opcode = ADDR_EXPR;\n-\t  temp.op0 = build_fold_addr_expr (ref);\n+\t  temp.op0 = build1 (ADDR_EXPR, TREE_TYPE (temp.op0), ref);\n \t  temp.type = TREE_TYPE (temp.op0);\n \t  temp.off = -1;\n \t  break;\n@@ -1114,18 +1115,6 @@ copy_reference_ops_from_call (gimple call,\n     }\n }\n \n-/* Create a vector of vn_reference_op_s structures from REF, a\n-   REFERENCE_CLASS_P tree.  The vector is not shared. */\n-\n-static vec<vn_reference_op_s> \n-create_reference_ops_from_ref (tree ref)\n-{\n-  vec<vn_reference_op_s> result = vNULL;\n-\n-  copy_reference_ops_from_ref (ref, &result);\n-  return result;\n-}\n-\n /* Create a vector of vn_reference_op_s structures from CALL, a\n    call statement.  The vector is not shared.  */\n \n@@ -2096,14 +2085,15 @@ vn_reference_insert (tree op, tree result, tree vuse, tree vdef)\n {\n   vn_reference_s **slot;\n   vn_reference_t vr1;\n+  bool tem;\n \n   vr1 = (vn_reference_t) pool_alloc (current_info->references_pool);\n   if (TREE_CODE (result) == SSA_NAME)\n     vr1->value_id = VN_INFO (result)->value_id;\n   else\n     vr1->value_id = get_or_alloc_constant_value_id (result);\n   vr1->vuse = vuse ? SSA_VAL (vuse) : NULL_TREE;\n-  vr1->operands = valueize_refs (create_reference_ops_from_ref (op));\n+  vr1->operands = valueize_shared_reference_ops_from_ref (op, &tem).copy ();\n   vr1->type = TREE_TYPE (op);\n   vr1->set = get_alias_set (op);\n   vr1->hashcode = vn_reference_compute_hash (vr1);"}]}