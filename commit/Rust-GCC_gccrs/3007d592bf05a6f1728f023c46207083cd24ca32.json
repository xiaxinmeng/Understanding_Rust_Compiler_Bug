{"sha": "3007d592bf05a6f1728f023c46207083cd24ca32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAwN2Q1OTJiZjA1YTZmMTcyOGYwMjNjNDYyMDcwODNjZDI0Y2EzMg==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@redhat.com", "date": "2001-09-21T00:53:28Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2001-09-21T00:53:28Z"}, "message": "sh-protos.h (sh_pr_n_sets): Declare.\n\n\t* sh-protos.h (sh_pr_n_sets): Declare.\n\t* sh.c (calc_live_regs): If the initial value for PR has been copied,\n\tlook at the copy to determine if PR needs to be saved.\n\tsh_pr_n_sets: New function.\n\t* sh.h (RETURN_ADDR_RTX): Use get_hard_reg_initial_val.\n\t(ALLOCATE_INITIAL_VALUE): Define.\n\n\t* sh.c (initial_elimination_offset):\n\tFix RETURN_ADDRESS_POINTER_REGNUM case.\n\nFrom-SVN: r45717", "tree": {"sha": "75ea44ce54b6aea204eaf8c20fc7eb3b820a104e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75ea44ce54b6aea204eaf8c20fc7eb3b820a104e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3007d592bf05a6f1728f023c46207083cd24ca32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3007d592bf05a6f1728f023c46207083cd24ca32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3007d592bf05a6f1728f023c46207083cd24ca32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3007d592bf05a6f1728f023c46207083cd24ca32/comments", "author": null, "committer": null, "parents": [{"sha": "385b6e2d89aafa6135634bf661b1b559dedc8de8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/385b6e2d89aafa6135634bf661b1b559dedc8de8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/385b6e2d89aafa6135634bf661b1b559dedc8de8"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "6ebf1c6508fc365e6f6327d942248aa0ac94aff2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3007d592bf05a6f1728f023c46207083cd24ca32/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3007d592bf05a6f1728f023c46207083cd24ca32/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3007d592bf05a6f1728f023c46207083cd24ca32", "patch": "@@ -1,3 +1,15 @@\n+Fri Sep 21 01:49:41 2001  J\"orn Rennecke <amylaar@redhat.com>\n+\n+\t* sh-protos.h (sh_pr_n_sets): Declare.\n+\t* sh.c (calc_live_regs): If the initial value for PR has been copied,\n+\tlook at the copy to determine if PR needs to be saved.\n+\tsh_pr_n_sets: New function.\n+\t* sh.h (RETURN_ADDR_RTX): Use get_hard_reg_initial_val.\n+\t(ALLOCATE_INITIAL_VALUE): Define.\n+\n+\t* sh.c (initial_elimination_offset):\n+\tFix RETURN_ADDRESS_POINTER_REGNUM case.\n+\n Fri Sep 21 01:13:56 2001  J\"orn Rennecke <amylaar@redhat.com>\n \n \t* integrate.c (allocate_initial_values): New function."}, {"sha": "a8507ae9ca627e7acca1474217a927ffc4c1c8cc", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3007d592bf05a6f1728f023c46207083cd24ca32/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3007d592bf05a6f1728f023c46207083cd24ca32/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=3007d592bf05a6f1728f023c46207083cd24ca32", "patch": "@@ -119,6 +119,7 @@ extern void sh_expand_epilogue PARAMS ((void));\n extern int sh_need_epilogue PARAMS ((void));\n extern int initial_elimination_offset PARAMS ((int, int));\n extern int fldi_ok PARAMS ((void));\n+extern int sh_pr_n_sets PARAMS ((void));\n \n #ifdef HARD_CONST\n extern void fpscr_set_from_mem PARAMS ((int, HARD_REG_SET));"}, {"sha": "29a657b88fec7efe5f87e0a1699797aa7286956f", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3007d592bf05a6f1728f023c46207083cd24ca32/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3007d592bf05a6f1728f023c46207083cd24ca32/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=3007d592bf05a6f1728f023c46207083cd24ca32", "patch": "@@ -3959,6 +3959,8 @@ calc_live_regs (count_ptr, live_regs_mask2)\n   int live_regs_mask = 0;\n   int count;\n   int interrupt_handler;\n+  rtx pr_initial;\n+  int pr_live;\n \n   if ((lookup_attribute\n        (\"interrupt_handler\",\n@@ -3979,14 +3981,20 @@ calc_live_regs (count_ptr, live_regs_mask2)\n \t  target_flags &= ~FPU_SINGLE_BIT;\n \t  break;\n \t}\n+  pr_initial = has_hard_reg_initial_val (Pmode, PR_REG);\n+  pr_live = (pr_initial\n+\t     ? REGNO (pr_initial) != PR_REG\n+\t     : regs_ever_live[PR_REG]);\n   for (count = 0, reg = FIRST_PSEUDO_REGISTER - 1; reg >= 0; reg--)\n     {\n-      if ((interrupt_handler && ! pragma_trapa)\n+      if (reg == PR_REG\n+\t  ? pr_live\n+\t  : (interrupt_handler && ! pragma_trapa)\n \t  ? (/* Need to save all the regs ever live.  */\n \t     (regs_ever_live[reg]\n \t      || (call_used_regs[reg]\n \t\t  && (! fixed_regs[reg] || reg == MACH_REG || reg == MACL_REG)\n-\t\t  && regs_ever_live[PR_REG]))\n+\t\t  && pr_live))\n \t     && reg != STACK_POINTER_REGNUM && reg != ARG_POINTER_REGNUM\n \t     && reg != RETURN_ADDRESS_POINTER_REGNUM\n \t     && reg != T_REG && reg != GBR_REG && reg != FPSCR_REG)\n@@ -4598,7 +4606,7 @@ initial_elimination_offset (from, to)\n \n   if (from == RETURN_ADDRESS_POINTER_REGNUM\n       && (to == FRAME_POINTER_REGNUM || to == STACK_POINTER_REGNUM))\n-    return UNITS_PER_WORD + total_auto_space;\n+    return total_auto_space;\n \n   abort ();\n }\n@@ -5638,3 +5646,13 @@ sh_adjust_cost (insn, link, dep_insn, cost)\n \n   return cost;\n }\n+\n+/* For use by ALLOCATE_INITIAL_VALUE.  Note that sh.md contains some\n+   'special function' patterns (type sfunc) that clobber pr, but that\n+   do not look like function calls to leaf_function_p.  Hence we must\n+   do this extra check.  */\n+int\n+sh_pr_n_sets ()\n+{\n+  return REG_N_SETS (PR_REG);\n+}"}, {"sha": "5ca89e0a71bc46429b688bf115dd695643f85802", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3007d592bf05a6f1728f023c46207083cd24ca32/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3007d592bf05a6f1728f023c46207083cd24ca32/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=3007d592bf05a6f1728f023c46207083cd24ca32", "patch": "@@ -1293,7 +1293,7 @@ extern int current_function_anonymous_args;\n \n #define RETURN_ADDR_RTX(COUNT, FRAME)\t\\\n   (((COUNT) == 0)\t\t\t\t\\\n-   ? gen_rtx_MEM (Pmode, gen_rtx_REG (Pmode, RETURN_ADDRESS_POINTER_REGNUM)) \\\n+   ? get_hard_reg_initial_val (Pmode, PR_REG) \\\n    : (rtx) 0)\n \f\n /* Generate necessary RTL for __builtin_saveregs().  */\n@@ -2369,4 +2369,11 @@ extern struct rtx_def *fpscr_rtx;\n 1:\t.long\t\" USER_LABEL_PREFIX #func \" - 0b\\n\\\n 2:\")\n \n+#define ALLOCATE_INITIAL_VALUE(hard_reg) \\\n+  (REGNO (hard_reg) == PR_REG \\\n+   ? (current_function_is_leaf && ! sh_pr_n_sets () \\\n+      ? (hard_reg) \\\n+      : gen_rtx_MEM (Pmode, arg_pointer_rtx)) \\\n+   : NULL_RTX)\n+\n #endif /* ! GCC_SH_H */"}]}