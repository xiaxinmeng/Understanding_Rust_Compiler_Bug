{"sha": "ff57c94ea842e90d47db3a483c99b5fe6338c627", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY1N2M5NGVhODQyZTkwZDQ3ZGIzYTQ4M2M5OWI1ZmU2MzM4YzYyNw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-01-30T22:55:19Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-01-30T22:55:19Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r257", "tree": {"sha": "248659271905a0e261fe5e5221742f21dccd71ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/248659271905a0e261fe5e5221742f21dccd71ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff57c94ea842e90d47db3a483c99b5fe6338c627", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff57c94ea842e90d47db3a483c99b5fe6338c627", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff57c94ea842e90d47db3a483c99b5fe6338c627", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff57c94ea842e90d47db3a483c99b5fe6338c627/comments", "author": null, "committer": null, "parents": [{"sha": "5faca12701aed93317cf8aa86adc87bbb0d54d52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5faca12701aed93317cf8aa86adc87bbb0d54d52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5faca12701aed93317cf8aa86adc87bbb0d54d52"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "2b7dd810b797906cde3d1336c8204ffac6a80a40", "filename": "gcc/protoize.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff57c94ea842e90d47db3a483c99b5fe6338c627/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff57c94ea842e90d47db3a483c99b5fe6338c627/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=ff57c94ea842e90d47db3a483c99b5fe6338c627", "patch": "@@ -320,9 +320,7 @@ struct default_include { char *fname; int cplusplus; } include_defaults[]\n #ifdef SYSTEM_INCLUDE_DIR\n     { SYSTEM_INCLUDE_DIR, 0},\n #endif\n-#ifndef NO_STANDARD_INCLUDE_DIR\n     { STANDARD_INCLUDE_DIR, 0},\n-#endif\n #endif /* not CROSS_COMPILE */\n     { 0, 0}\n     };\n@@ -614,8 +612,9 @@ static char * saved_repl_write_ptr;\n static const char *shortpath ();\n \f\n /* Allocate some space, but check that the allocation was successful.  */\n+/* alloca.c uses this, so don't make it static.  */\n \n-static pointer_type\n+pointer_type\n xmalloc (byte_count)\n      size_t byte_count;\n {\n@@ -635,7 +634,7 @@ xmalloc (byte_count)\n \n /* Reallocate some space, but check that the reallocation was successful.  */\n \n-static pointer_type\n+pointer_type\n xrealloc (old_space, byte_count)\n      pointer_type old_space;\n      size_t byte_count;\n@@ -658,7 +657,7 @@ xrealloc (old_space, byte_count)\n    the `const' qualifier from it and also make sure that the pointer value\n    is non-null.  */\n \n-static void\n+void\n xfree (p)\n      const_pointer_type p;\n {\n@@ -1933,7 +1932,7 @@ munge_compile_params (params_list)\n   /* Make a copy of the compile_params in heap space.  */\n \n   compile_params\n-    = (char **) xmalloc (sizeof (char *) * (param_count+1));\n+    = (const char **) xmalloc (sizeof (char *) * (param_count+1));\n   memcpy (compile_params, temp_params, sizeof (char *) * param_count);\n }\n "}]}