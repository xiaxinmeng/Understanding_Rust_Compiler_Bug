{"sha": "d331c5f10d5e6c9f41a24ff7cb7a8c6493790885", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMzMWM1ZjEwZDVlNmM5ZjQxYTI0ZmY3Y2I3YThjNjQ5Mzc5MDg4NQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-02-21T20:47:43Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-02-21T20:47:43Z"}, "message": "PR libstdc++/89416 fix __is_move_insertable trait\n\nThe common base class for __is_move_insertable and __is_copy_insertable\ninstantiates both the copy and move tests, when only one is needed. The\nunneeded one might cause errors outside the immediate context.\n\nThe solution used in this patch is to replace them with alias templates,\nwhich will only be instantiated as needed.\n\n\tPR libstdc++/89416\n\t* include/bits/alloc_traits.h (__is_alloc_insertable_impl): Replace\n\tclass template with class. Replace move and copy member types with\n\tmember alias templates, so they are only instantiated when needed.\n\t(__is_copy_insertable, __is_move_insertable): Adjust base class.\n\t* testsuite/23_containers/vector/modifiers/push_back/89130.cc: Enable\n\ttest for C++11/14/17 as well.\n\t* testsuite/23_containers/vector/modifiers/push_back/89416.cc: New\n\ttest.\n\nFrom-SVN: r269075", "tree": {"sha": "d6fc9993cacf0943455f6d6d497ad7b32d0fdd5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6fc9993cacf0943455f6d6d497ad7b32d0fdd5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d331c5f10d5e6c9f41a24ff7cb7a8c6493790885", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d331c5f10d5e6c9f41a24ff7cb7a8c6493790885", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d331c5f10d5e6c9f41a24ff7cb7a8c6493790885", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d331c5f10d5e6c9f41a24ff7cb7a8c6493790885/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f43044a3d7856c6d8b88c706d1e078268e12f7af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f43044a3d7856c6d8b88c706d1e078268e12f7af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f43044a3d7856c6d8b88c706d1e078268e12f7af"}], "stats": {"total": 102, "additions": 78, "deletions": 24}, "files": [{"sha": "fab28f42079658f6906656b2c08b078c76a756b4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d331c5f10d5e6c9f41a24ff7cb7a8c6493790885/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d331c5f10d5e6c9f41a24ff7cb7a8c6493790885/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d331c5f10d5e6c9f41a24ff7cb7a8c6493790885", "patch": "@@ -1,3 +1,15 @@\n+2019-02-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/89416\n+\t* include/bits/alloc_traits.h (__is_alloc_insertable_impl): Replace\n+\tclass template with class. Replace move and copy member types with\n+\tmember alias templates, so they are only instantiated when needed.\n+\t(__is_copy_insertable, __is_move_insertable): Adjust base class.\n+\t* testsuite/23_containers/vector/modifiers/push_back/89130.cc: Enable\n+\ttest for C++11/14/17 as well.\n+\t* testsuite/23_containers/vector/modifiers/push_back/89416.cc: New\n+\ttest.\n+\n 2019-02-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libstdc++/89402"}, {"sha": "71892cbfaba12f7f2197966cb6b69583ebcba7d5", "filename": "libstdc++-v3/include/bits/alloc_traits.h", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d331c5f10d5e6c9f41a24ff7cb7a8c6493790885/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d331c5f10d5e6c9f41a24ff7cb7a8c6493790885/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h?ref=d331c5f10d5e6c9f41a24ff7cb7a8c6493790885", "patch": "@@ -576,33 +576,32 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __do_alloc_on_swap(__one, __two, __pocs());\n     }\n \n-  template<typename _Alloc>\n-    class __is_alloc_insertable_impl\n-    {\n-      using _Traits = allocator_traits<_Alloc>;\n-      using value_type = typename _Traits::value_type;\n-\n-      template<typename _Up, typename _Tp = __remove_cvref_t<_Up>,\n-\t       typename\n-\t       = decltype(_Traits::construct(std::declval<_Alloc&>(),\n-\t\t\t\t\t     std::declval<_Tp*>(),\n-\t\t\t\t\t     std::declval<_Up>()))>\n-\tstatic true_type\n-\t_M_select(int);\n+  class __is_alloc_insertable_impl\n+  {\n+    template<typename _Alloc, typename _Up,\n+\t     typename _Tp = __remove_cvref_t<_Up>,\n+\t     typename = decltype(allocator_traits<_Alloc>::construct(\n+\t\t   std::declval<_Alloc&>(), std::declval<_Tp*>(),\n+\t\t   std::declval<_Up>()))>\n+      static true_type\n+      _M_select(int);\n+\n+    template<typename, typename>\n+      static false_type\n+      _M_select(...);\n \n-      template<typename _Up>\n-\tstatic false_type\n-\t_M_select(...);\n+  protected:\n+    template<typename _Alloc, typename _Tp = typename _Alloc::value_type>\n+      using copy = decltype(_M_select<_Alloc, const _Tp&>(0));\n \n-    public:\n-      using copy = decltype(_M_select<const value_type&>(0));\n-      using move = decltype(_M_select<value_type>(0));\n-    };\n+    template<typename _Alloc, typename _Tp = typename _Alloc::value_type>\n+      using move = decltype(_M_select<_Alloc, _Tp>(0));\n+  };\n \n   // true if _Alloc::value_type is CopyInsertable into containers using _Alloc\n   template<typename _Alloc>\n     struct __is_copy_insertable\n-    : __is_alloc_insertable_impl<_Alloc>::copy\n+    : __is_alloc_insertable_impl::template copy<_Alloc>\n     { };\n \n   // std::allocator<_Tp> just requires CopyConstructible\n@@ -614,7 +613,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // true if _Alloc::value_type is MoveInsertable into containers using _Alloc\n   template<typename _Alloc>\n     struct __is_move_insertable\n-    : __is_alloc_insertable_impl<_Alloc>::move\n+    : __is_alloc_insertable_impl::template move<_Alloc>\n     { };\n \n   // std::allocator<_Tp> just requires MoveConstructible"}, {"sha": "1a34f3e25d3adb82a1e24181305ee20901bb7d0d", "filename": "libstdc++-v3/testsuite/23_containers/vector/modifiers/push_back/89130.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d331c5f10d5e6c9f41a24ff7cb7a8c6493790885/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fpush_back%2F89130.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d331c5f10d5e6c9f41a24ff7cb7a8c6493790885/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fpush_back%2F89130.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fpush_back%2F89130.cc?ref=d331c5f10d5e6c9f41a24ff7cb7a8c6493790885", "patch": "@@ -15,8 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++2a\" }\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++11 } }\n \n #include <vector>\n "}, {"sha": "b10776118878a67fa8d5ba106011b557b8d988cb", "filename": "libstdc++-v3/testsuite/23_containers/vector/modifiers/push_back/89416.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d331c5f10d5e6c9f41a24ff7cb7a8c6493790885/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fpush_back%2F89416.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d331c5f10d5e6c9f41a24ff7cb7a8c6493790885/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fpush_back%2F89416.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fpush_back%2F89416.cc?ref=d331c5f10d5e6c9f41a24ff7cb7a8c6493790885", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+// PR libstdc++/89416\n+\n+#include <vector>\n+\n+template<typename T>\n+  struct Alloc : std::allocator<T>\n+  {\n+    using std::allocator<T>::allocator;\n+\n+    template<typename U>\n+      struct rebind { using other = Alloc<U>;  };\n+  };\n+\n+struct X\n+{\n+  X(int);\n+  X(X&&);\n+};\n+\n+void test01()\n+{\n+  std::vector<X, Alloc<X>> V;\n+  V.push_back(X(1));\n+  V.emplace_back(1);\n+}"}]}