{"sha": "0e8c2b0d432304242caaf3d6415bdb887431cee5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU4YzJiMGQ0MzIzMDQyNDJjYWFmM2Q2NDE1YmRiODg3NDMxY2VlNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2005-03-14T16:16:15Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2005-03-14T16:16:15Z"}, "message": "re PR target/17688 ([4.1] x87 fops can handle HImodes)\n\n\tPR target/17688\n\t* config/i386/i386.c (x86_use_himode_fiop): New.\n\t(x86_use_simode_fiop): Rename from x86_use_fiop.\n\t* config/i386/i386.h (x86_use_himode_fiop): Declare.\n\t(TARGET_USE_HIMODE_FIOP): New.\n\t(x86_use_simode_fiop): Rename from x86_use_fiop.\n\t(TARGET_USE_SIMODE_FIOP): Rename from TARGET_USE_FIOP.\n\n\t* config/i386/i386.md (X87MODEI12): New mode macro define.\n\t(*cmpfp_<mode>): Rename from *cmpfp_si.  Use X87MODEI12 mode macro\n\tto implement x87 FP compare with HImode input operands.\n\t(*fp_jcc_8<mode>_387, splitter): Rename from *fp_jcc_8_387.\n\tUse X87MODEI12 mode macro to handle HImode input operands.\n\t(*fop_sf_2<mode>_i387, *fop_sf_3<mode>_i387, *fop_df_2<mode>_i387,\n\t*fop_df_3<mode>_i387, *fop_xf_2<mode>_i387, *fop_xf_3<mode>_i387):\n\tRenamed from *fop_sf_2_i387, *fop_sf_3_i387, *fop_df_2_i387,\n\t*fop_df_3_i387, *fop_xf_2_i387, *fop_xf_3_i387. Use X87MODEI12 mode\n\tmacro to implement x87 operators with HImode input operands.\n\t(fop splitters): Use X87MODEI12 mode macro to handle HImode\n\tinput operands.\n\nFrom-SVN: r96437", "tree": {"sha": "91fec9303819d3743f1e7d02eb3524da90d31ef3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91fec9303819d3743f1e7d02eb3524da90d31ef3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e8c2b0d432304242caaf3d6415bdb887431cee5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e8c2b0d432304242caaf3d6415bdb887431cee5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e8c2b0d432304242caaf3d6415bdb887431cee5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e8c2b0d432304242caaf3d6415bdb887431cee5/comments", "author": null, "committer": null, "parents": [{"sha": "e4a31e19d91c3c22eac4e37ceffaaec981d47323", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4a31e19d91c3c22eac4e37ceffaaec981d47323", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4a31e19d91c3c22eac4e37ceffaaec981d47323"}], "stats": {"total": 111, "additions": 70, "deletions": 41}, "files": [{"sha": "04024683b7a53638ae566947ce34f8f45bb4a59a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8c2b0d432304242caaf3d6415bdb887431cee5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8c2b0d432304242caaf3d6415bdb887431cee5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e8c2b0d432304242caaf3d6415bdb887431cee5", "patch": "@@ -1,3 +1,26 @@\n+2005-03-14  Uros Bizjak  <uros@kss-loka.si>\n+\n+\tPR target/17688\n+\t* config/i386/i386.c (x86_use_himode_fiop): New.\n+\t(x86_use_simode_fiop): Rename from x86_use_fiop.\n+\t* config/i386/i386.h (x86_use_himode_fiop): Declare.\n+\t(TARGET_USE_HIMODE_FIOP): New.\n+\t(x86_use_simode_fiop): Rename from x86_use_fiop.\n+\t(TARGET_USE_SIMODE_FIOP): Rename from TARGET_USE_FIOP.\n+\t\n+\t* config/i386/i386.md (X87MODEI12): New mode macro define.\n+\t(*cmpfp_<mode>): Rename from *cmpfp_si.  Use X87MODEI12 mode macro\n+\tto implement x87 FP compare with HImode input operands.\n+\t(*fp_jcc_8<mode>_387, splitter): Rename from *fp_jcc_8_387.\n+\tUse X87MODEI12 mode macro to handle HImode input operands.\n+\t(*fop_sf_2<mode>_i387, *fop_sf_3<mode>_i387, *fop_df_2<mode>_i387,\n+\t*fop_df_3<mode>_i387, *fop_xf_2<mode>_i387, *fop_xf_3<mode>_i387):\n+\tRenamed from *fop_sf_2_i387, *fop_sf_3_i387, *fop_df_2_i387,\n+\t*fop_df_3_i387, *fop_xf_2_i387, *fop_xf_3_i387. Use X87MODEI12 mode\n+\tmacro to implement x87 operators with HImode input operands.\n+\t(fop splitters): Use X87MODEI12 mode macro to handle HImode\n+\tinput operands.\n+\n 2005-03-14  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \t* tree-cfg.c (find_taken_edge_cond_expr): Use zero_p instead of"}, {"sha": "bc311aaf23ab9a7ce71b53dace9a21d111a981f1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8c2b0d432304242caaf3d6415bdb887431cee5/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8c2b0d432304242caaf3d6415bdb887431cee5/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0e8c2b0d432304242caaf3d6415bdb887431cee5", "patch": "@@ -535,7 +535,8 @@ const int x86_branch_hints = 0;\n const int x86_use_sahf = m_PPRO | m_K6 | m_PENT4 | m_NOCONA;\n const int x86_partial_reg_stall = m_PPRO;\n const int x86_use_loop = m_K6;\n-const int x86_use_fiop = ~(m_PPRO | m_ATHLON_K8 | m_PENT);\n+const int x86_use_himode_fiop = m_386 | m_486 | m_K6;\n+const int x86_use_simode_fiop = ~(m_PPRO | m_ATHLON_K8 | m_PENT);\n const int x86_use_mov0 = m_K6;\n const int x86_use_cltd = ~(m_PENT | m_K6);\n const int x86_read_modify_write = ~m_PENT;"}, {"sha": "d5b8c82b9c9ac5383a210a568a95d3b852084f87", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8c2b0d432304242caaf3d6415bdb887431cee5/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8c2b0d432304242caaf3d6415bdb887431cee5/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=0e8c2b0d432304242caaf3d6415bdb887431cee5", "patch": "@@ -232,8 +232,8 @@ extern const int x86_use_leave, x86_push_memory, x86_zero_extend_with_and;\n extern const int x86_use_bit_test, x86_cmove, x86_deep_branch;\n extern const int x86_branch_hints, x86_unroll_strlen;\n extern const int x86_double_with_add, x86_partial_reg_stall, x86_movx;\n-extern const int x86_use_loop, x86_use_fiop, x86_use_mov0;\n-extern const int x86_use_cltd, x86_read_modify_write;\n+extern const int x86_use_loop, x86_use_himode_fiop, x86_use_simode_fiop;\n+extern const int x86_use_mov0, x86_use_cltd, x86_read_modify_write;\n extern const int x86_read_modify, x86_split_long_moves;\n extern const int x86_promote_QImode, x86_single_stringop, x86_fast_prefix;\n extern const int x86_himode_math, x86_qimode_math, x86_promote_qi_regs;\n@@ -265,7 +265,8 @@ extern int x86_prefetch_sse;\n #define TARGET_MOVX (x86_movx & TUNEMASK)\n #define TARGET_PARTIAL_REG_STALL (x86_partial_reg_stall & TUNEMASK)\n #define TARGET_USE_LOOP (x86_use_loop & TUNEMASK)\n-#define TARGET_USE_FIOP (x86_use_fiop & TUNEMASK)\n+#define TARGET_USE_HIMODE_FIOP (x86_use_himode_fiop & TUNEMASK)\n+#define TARGET_USE_SIMODE_FIOP (x86_use_simode_fiop & TUNEMASK)\n #define TARGET_USE_MOV0 (x86_use_mov0 & TUNEMASK)\n #define TARGET_USE_CLTD (x86_use_cltd & TUNEMASK)\n #define TARGET_SPLIT_LONG_MOVES (x86_split_long_moves & TUNEMASK)"}, {"sha": "61904db4b586db0c1326cc880647d67119ccef5b", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 41, "deletions": 37, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8c2b0d432304242caaf3d6415bdb887431cee5/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8c2b0d432304242caaf3d6415bdb887431cee5/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=0e8c2b0d432304242caaf3d6415bdb887431cee5", "patch": "@@ -441,6 +441,9 @@\n (define_asm_attributes\n   [(set_attr \"length\" \"128\")\n    (set_attr \"type\" \"multi\")])\n+\n+;; All integer modes handled by integer x87 operators.\n+(define_mode_macro X87MODEI12 [HI SI])\n \f\n ;; Scheduling descriptions\n \n@@ -895,21 +898,21 @@\n \t   ]\n \t   (const_string \"XF\")))])\n \n-(define_insn \"*cmpfp_si\"\n+(define_insn \"*cmpfp_<mode>\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=a\")\n \t(unspec:HI\n \t  [(compare:CCFP\n \t     (match_operand 1 \"register_operand\" \"f\")\n \t     (match_operator 3 \"float_operator\"\n-\t       [(match_operand:SI 2 \"memory_operand\" \"m\")]))]\n+\t       [(match_operand:X87MODEI12 2 \"memory_operand\" \"m\")]))]\n \t  UNSPEC_FNSTSW))]\n-  \"TARGET_80387 && TARGET_USE_FIOP\n+  \"TARGET_80387 && TARGET_USE_<MODE>MODE_FIOP\n    && FLOAT_MODE_P (GET_MODE (operands[1]))\n    && (GET_MODE (operands [3]) == GET_MODE (operands[1]))\"\n   \"* return output_fp_compare (insn, operands, 0, 0);\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"fp_int_src\" \"true\")\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n ;; FP compares, step 2\n ;; Move the fpsw to ax.\n@@ -12956,23 +12959,23 @@\n    && ix86_fp_jump_nontrivial_p (GET_CODE (operands[0]))\"\n   \"#\")\n \n-;; The order of operands in *fp_jcc_8 is forced by combine in\n+;; The order of operands in *fp_jcc_8_387 is forced by combine in\n ;; simplify_comparison () function. Float operator is treated as RTX_OBJ\n ;; with a precedence over other operators and is always put in the first\n ;; place. Swap condition and operands to match ficom instruction.\n \n-(define_insn \"*fp_jcc_8_387\"\n+(define_insn \"*fp_jcc_8<mode>_387\"\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"comparison_operator\"\n \t\t\t[(match_operator 1 \"float_operator\"\n-\t\t\t   [(match_operand:SI 2 \"nonimmediate_operand\" \"m,?r\")])\n+\t\t\t   [(match_operand:X87MODEI12 2 \"nonimmediate_operand\" \"m,?r\")])\n \t\t\t   (match_operand 3 \"register_operand\" \"f,f\")])\n \t  (label_ref (match_operand 4 \"\" \"\"))\n \t  (pc)))\n    (clobber (reg:CCFP FPSR_REG))\n    (clobber (reg:CCFP FLAGS_REG))\n    (clobber (match_scratch:HI 5 \"=a,a\"))]\n-  \"TARGET_80387 && TARGET_USE_FIOP\n+  \"TARGET_80387 && TARGET_USE_<MODE>MODE_FIOP\n    && FLOAT_MODE_P (GET_MODE (operands[3]))\n    && GET_MODE (operands[1]) == GET_MODE (operands[3])\n    && !ix86_use_fcomi_compare (swap_condition (GET_CODE (operands[0])))\n@@ -13019,7 +13022,7 @@\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"comparison_operator\"\n \t\t\t[(match_operator 1 \"float_operator\"\n-\t\t\t   [(match_operand:SI 2 \"memory_operand\" \"\")])\n+\t\t\t   [(match_operand:X87MODEI12 2 \"memory_operand\" \"\")])\n \t\t\t   (match_operand 3 \"register_operand\" \"\")])\n \t  (match_operand 4 \"\" \"\")\n \t  (match_operand 5 \"\" \"\")))\n@@ -13041,7 +13044,7 @@\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"comparison_operator\"\n \t\t\t[(match_operator 1 \"float_operator\"\n-\t\t\t   [(match_operand:SI 2 \"register_operand\" \"\")])\n+\t\t\t   [(match_operand:X87MODEI12 2 \"register_operand\" \"\")])\n \t\t\t   (match_operand 3 \"register_operand\" \"\")])\n \t  (match_operand 4 \"\" \"\")\n \t  (match_operand 5 \"\" \"\")))\n@@ -14180,14 +14183,13 @@\n               (const_string \"fop\")))\n    (set_attr \"mode\" \"SF\")])\n \n-\n ;; ??? Add SSE splitters for these!\n-(define_insn \"*fop_sf_2_i387\"\n+(define_insn \"*fop_sf_2<mode>_i387\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:SF 3 \"binary_fp_operator\"\n-\t  [(float:SF (match_operand:SI 1 \"nonimmediate_operand\" \"m,?r\"))\n+\t  [(float:SF (match_operand:X87MODEI12 1 \"nonimmediate_operand\" \"m,?r\"))\n \t   (match_operand:SF 2 \"register_operand\" \"0,0\")]))]\n-  \"TARGET_80387 && TARGET_USE_FIOP && !TARGET_SSE_MATH\"\n+  \"TARGET_80387 && TARGET_USE_<MODE>MODE_FIOP && !TARGET_SSE_MATH\"\n   \"* return which_alternative ? \\\"#\\\" : output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:SF 3 \"mult_operator\" \"\") \n@@ -14197,14 +14199,14 @@\n               ]\n               (const_string \"fop\")))\n    (set_attr \"fp_int_src\" \"true\")\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*fop_sf_3_i387\"\n+(define_insn \"*fop_sf_3<mode>_i387\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:SF 3 \"binary_fp_operator\"\n \t  [(match_operand:SF 1 \"register_operand\" \"0,0\")\n-\t   (float:SF (match_operand:SI 2 \"nonimmediate_operand\" \"m,?r\"))]))]\n-  \"TARGET_80387 && TARGET_USE_FIOP && !TARGET_SSE_MATH\"\n+\t   (float:SF (match_operand:X87MODEI12 2 \"nonimmediate_operand\" \"m,?r\"))]))]\n+  \"TARGET_80387 && TARGET_USE_<MODE>MODE_FIOP && !TARGET_SSE_MATH\"\n   \"* return which_alternative ? \\\"#\\\" : output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:SF 3 \"mult_operator\" \"\") \n@@ -14214,7 +14216,7 @@\n               ]\n               (const_string \"fop\")))\n    (set_attr \"fp_int_src\" \"true\")\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*fop_df_comm_mixed\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f#Y,Y#f\")\n@@ -14328,12 +14330,13 @@\n    (set_attr \"mode\" \"DF\")])\n \n ;; ??? Add SSE splitters for these!\n-(define_insn \"*fop_df_2_i387\"\n+(define_insn \"*fop_df_2<mode>_i387\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:DF 3 \"binary_fp_operator\"\n-\t   [(float:DF (match_operand:SI 1 \"nonimmediate_operand\" \"m,?r\"))\n+\t   [(float:DF (match_operand:X87MODEI12 1 \"nonimmediate_operand\" \"m,?r\"))\n \t    (match_operand:DF 2 \"register_operand\" \"0,0\")]))]\n-  \"TARGET_80387 && TARGET_USE_FIOP && !(TARGET_SSE2 && TARGET_SSE_MATH)\"\n+  \"TARGET_80387 && TARGET_USE_<MODE>MODE_FIOP\n+   && !(TARGET_SSE2 && TARGET_SSE_MATH)\"\n   \"* return which_alternative ? \\\"#\\\" : output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:DF 3 \"mult_operator\" \"\") \n@@ -14343,14 +14346,15 @@\n               ]\n               (const_string \"fop\")))\n    (set_attr \"fp_int_src\" \"true\")\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*fop_df_3_i387\"\n+(define_insn \"*fop_df_3<mode>_i387\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:DF 3 \"binary_fp_operator\"\n \t   [(match_operand:DF 1 \"register_operand\" \"0,0\")\n-\t    (float:DF (match_operand:SI 2 \"nonimmediate_operand\" \"m,?r\"))]))]\n-  \"TARGET_80387 && TARGET_USE_FIOP && !(TARGET_SSE2 && TARGET_SSE_MATH)\"\n+\t    (float:DF (match_operand:X87MODEI12 2 \"nonimmediate_operand\" \"m,?r\"))]))]\n+  \"TARGET_80387 && TARGET_USE_<MODE>MODE_FIOP\n+   && !(TARGET_SSE2 && TARGET_SSE_MATH)\"\n   \"* return which_alternative ? \\\"#\\\" : output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:DF 3 \"mult_operator\" \"\") \n@@ -14360,7 +14364,7 @@\n               ]\n               (const_string \"fop\")))\n    (set_attr \"fp_int_src\" \"true\")\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*fop_df_4_i387\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n@@ -14445,12 +14449,12 @@\n               (const_string \"fop\")))\n    (set_attr \"mode\" \"XF\")])\n \n-(define_insn \"*fop_xf_2_i387\"\n+(define_insn \"*fop_xf_2<mode>_i387\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:XF 3 \"binary_fp_operator\"\n-\t   [(float:XF (match_operand:SI 1 \"nonimmediate_operand\" \"m,?r\"))\n+\t   [(float:XF (match_operand:X87MODEI12 1 \"nonimmediate_operand\" \"m,?r\"))\n \t    (match_operand:XF 2 \"register_operand\" \"0,0\")]))]\n-  \"TARGET_80387 && TARGET_USE_FIOP\"\n+  \"TARGET_80387 && TARGET_USE_<MODE>MODE_FIOP\"\n   \"* return which_alternative ? \\\"#\\\" : output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:XF 3 \"mult_operator\" \"\") \n@@ -14460,14 +14464,14 @@\n               ]\n               (const_string \"fop\")))\n    (set_attr \"fp_int_src\" \"true\")\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*fop_xf_3_i387\"\n+(define_insn \"*fop_xf_3<mode>_i387\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t  [(match_operand:XF 1 \"register_operand\" \"0,0\")\n-\t   (float:XF (match_operand:SI 2 \"nonimmediate_operand\" \"m,?r\"))]))]\n-  \"TARGET_80387 && TARGET_USE_FIOP\"\n+\t   (float:XF (match_operand:X87MODEI12 2 \"nonimmediate_operand\" \"m,?r\"))]))]\n+  \"TARGET_80387 && TARGET_USE_<MODE>MODE_FIOP\"\n   \"* return which_alternative ? \\\"#\\\" : output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:XF 3 \"mult_operator\" \"\") \n@@ -14477,7 +14481,7 @@\n               ]\n               (const_string \"fop\")))\n    (set_attr \"fp_int_src\" \"true\")\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*fop_xf_4_i387\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n@@ -14533,7 +14537,7 @@\n (define_split\n   [(set (match_operand 0 \"register_operand\" \"\")\n \t(match_operator 3 \"binary_fp_operator\"\n-\t   [(float (match_operand:SI 1 \"register_operand\" \"\"))\n+\t   [(float (match_operand:X87MODEI12 1 \"register_operand\" \"\"))\n \t    (match_operand 2 \"register_operand\" \"\")]))]\n   \"TARGET_80387 && reload_completed\n    && FLOAT_MODE_P (GET_MODE (operands[0]))\"\n@@ -14554,7 +14558,7 @@\n   [(set (match_operand 0 \"register_operand\" \"\")\n \t(match_operator 3 \"binary_fp_operator\"\n \t   [(match_operand 1 \"register_operand\" \"\")\n-\t    (float (match_operand:SI 2 \"register_operand\" \"\"))]))]\n+\t    (float (match_operand:X87MODEI12 2 \"register_operand\" \"\"))]))]\n   \"TARGET_80387 && reload_completed\n    && FLOAT_MODE_P (GET_MODE (operands[0]))\"\n   [(const_int 0)]"}]}