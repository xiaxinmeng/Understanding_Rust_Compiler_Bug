{"sha": "d73b8f8417ebf6f0bbf64f237fa9db11cfc719f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDczYjhmODQxN2ViZjZmMGJiZjY0ZjIzN2ZhOWRiMTFjZmM3MTlmNA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-05-16T00:02:03Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-05-16T00:02:03Z"}, "message": "compiler: report correct errors for sink methods\n    \n    If somebody writes\n    \n    func (s []int) _() {}\n    \n    we should report an error.  Before this patch we were silently\n    accepting this code, because we didn't report any errors about the\n    receiver if the method was a sink.\n    \n    This patch is unfortunately slightly complex to handle the case of\n    \n    func (x int) _() {}\n    \n    which we can only detect after define_global_names.\n    \n    This fixes blank1.go in the current gc testsuite.\n    \n    Reviewed-on: https://go-review.googlesource.com/43456\n\nFrom-SVN: r248081", "tree": {"sha": "b982f2031b658201fc0d5f049e5eaee1a3e90755", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b982f2031b658201fc0d5f049e5eaee1a3e90755"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d73b8f8417ebf6f0bbf64f237fa9db11cfc719f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d73b8f8417ebf6f0bbf64f237fa9db11cfc719f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d73b8f8417ebf6f0bbf64f237fa9db11cfc719f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d73b8f8417ebf6f0bbf64f237fa9db11cfc719f4/comments", "author": null, "committer": null, "parents": [{"sha": "a5768d38a66fc4136208bc8442a4118df2bd588f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5768d38a66fc4136208bc8442a4118df2bd588f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5768d38a66fc4136208bc8442a4118df2bd588f"}], "stats": {"total": 62, "additions": 59, "deletions": 3}, "files": [{"sha": "fec0e7978d59279cf1797b36ca57ae0801198579", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d73b8f8417ebf6f0bbf64f237fa9db11cfc719f4/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d73b8f8417ebf6f0bbf64f237fa9db11cfc719f4/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=d73b8f8417ebf6f0bbf64f237fa9db11cfc719f4", "patch": "@@ -1,4 +1,4 @@\n-2f21020c9f61b31bd04d5b814aaa27bf976bf07a\n+d3997526dc0710e6b9b727a41184ce1770805794\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "daf2ba4cb0bfa728df34453325a4d945181d2f71", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d73b8f8417ebf6f0bbf64f237fa9db11cfc719f4/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d73b8f8417ebf6f0bbf64f237fa9db11cfc719f4/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=d73b8f8417ebf6f0bbf64f237fa9db11cfc719f4", "patch": "@@ -1786,8 +1786,41 @@ Gogo::start_function(const std::string& name, Function_type* type,\n       char buf[30];\n       snprintf(buf, sizeof buf, \".$sink%d\", sink_count);\n       ++sink_count;\n-      ret = this->package_->bindings()->add_function(buf, NULL, function);\n+      ret = Named_object::make_function(buf, NULL, function);\n       ret->func_value()->set_is_sink();\n+\n+      if (!type->is_method())\n+\tret = this->package_->bindings()->add_named_object(ret);\n+      else if (add_method_to_type)\n+\t{\n+\t  // We should report errors even for sink methods.\n+\t  Type* rtype = type->receiver()->type();\n+\t  // Avoid points_to and deref to avoid getting an error if\n+\t  // the type is not yet defined.\n+\t  if (rtype->classification() == Type::TYPE_POINTER)\n+\t    rtype = rtype->points_to();\n+\t  while (rtype->named_type() != NULL\n+\t\t && rtype->named_type()->is_alias())\n+\t    rtype = rtype->named_type()->real_type()->forwarded();\n+\t  if (rtype->is_error_type())\n+\t    ;\n+\t  else if (rtype->named_type() != NULL)\n+\t    {\n+\t      if (rtype->named_type()->named_object()->package() != NULL)\n+\t\tgo_error_at(type->receiver()->location(),\n+\t\t\t    \"may not define methods on non-local type\");\n+\t    }\n+\t  else if (rtype->forward_declaration_type() != NULL)\n+\t    {\n+\t      // Go ahead and add the method in case we need to report\n+\t      // an error when we see the definition.\n+\t      rtype->forward_declaration_type()->add_existing_method(ret);\n+\t    }\n+\t  else\n+\t    go_error_at(type->receiver()->location(),\n+\t\t\t(\"invalid receiver type \"\n+\t\t\t \"(receiver must be a named type)\"));\n+\t}\n     }\n   else if (!type->is_method())\n     {\n@@ -6985,7 +7018,10 @@ Type_declaration::define_methods(Named_type* nt)\n   for (std::vector<Named_object*>::const_iterator p = this->methods_.begin();\n        p != this->methods_.end();\n        ++p)\n-    nt->add_existing_method(*p);\n+    {\n+      if (!(*p)->func_value()->is_sink())\n+\tnt->add_existing_method(*p);\n+    }\n }\n \n // We are using the type.  Return true if we should issue a warning."}, {"sha": "787a3e3658f0866ee9dbd2b0f4f5c6520a7b030b", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d73b8f8417ebf6f0bbf64f237fa9db11cfc719f4/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d73b8f8417ebf6f0bbf64f237fa9db11cfc719f4/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=d73b8f8417ebf6f0bbf64f237fa9db11cfc719f4", "patch": "@@ -2114,6 +2114,11 @@ class Type_declaration\n   add_method_declaration(const std::string& name, Package*,\n \t\t\t Function_type* type, Location location);\n \n+  // Add an already created object as a method.\n+  void\n+  add_existing_method(Named_object* no)\n+  { this->methods_.push_back(no); }\n+\n   // Return whether any methods were defined.\n   bool\n   has_methods() const;"}, {"sha": "8d542de1b3c24bbe0b602296daffc79b15bc201f", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d73b8f8417ebf6f0bbf64f237fa9db11cfc719f4/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d73b8f8417ebf6f0bbf64f237fa9db11cfc719f4/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=d73b8f8417ebf6f0bbf64f237fa9db11cfc719f4", "patch": "@@ -12210,6 +12210,17 @@ Forward_declaration_type::add_method_declaration(const std::string& name,\n   return td->add_method_declaration(name, package, type, location);\n }\n \n+// Add an already created object as a method.\n+\n+void\n+Forward_declaration_type::add_existing_method(Named_object* nom)\n+{\n+  Named_object* no = this->named_object();\n+  if (no->is_unknown())\n+    no->declare_as_type();\n+  no->type_declaration_value()->add_existing_method(nom);\n+}\n+\n // Traversal.\n \n int"}, {"sha": "bae7fd3a541092889e2d8b749d73f6d3812c0d25", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d73b8f8417ebf6f0bbf64f237fa9db11cfc719f4/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d73b8f8417ebf6f0bbf64f237fa9db11cfc719f4/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=d73b8f8417ebf6f0bbf64f237fa9db11cfc719f4", "patch": "@@ -3379,6 +3379,10 @@ class Forward_declaration_type : public Type\n   add_method_declaration(const std::string& name, Package*, Function_type*,\n \t\t\t Location);\n \n+  // Add an already created object as a method to this type.\n+  void\n+  add_existing_method(Named_object*);\n+\n  protected:\n   int\n   do_traverse(Traverse* traverse);"}]}