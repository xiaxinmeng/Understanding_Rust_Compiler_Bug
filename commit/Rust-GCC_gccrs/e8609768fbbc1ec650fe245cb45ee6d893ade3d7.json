{"sha": "e8609768fbbc1ec650fe245cb45ee6d893ade3d7", "node_id": "C_kwDOANBUbNoAKGU4NjA5NzY4ZmJiYzFlYzY1MGZlMjQ1Y2I0NWVlNmQ4OTNhZGUzZDc", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2022-06-09T18:18:19Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2022-06-14T14:57:36Z"}, "message": "c++: Elide calls to NOP module initializers\n\n\tgcc/cp\n\t* cp-tree.h (fini_modules): Add has_inits parm.\n\t* decl2.cc (c_parse_final_cleanups): Check for\n\tinits, adjust fini_modules flags.\n\t* module.cc (module_state): Rename call_init_p to\n\tactive_init_p.\n\t(module_state::write_config): Write active_init.\n\t(module_state::read_config): Read it.\n\t(module_determine_import_inits): Clear active_init_p\n\tof covered inits.\n\t(late_finish_module): Add has_init parm.  Record it.\n\t(fini_modules): Adjust.\n\n\tgcc/testsuite/\n\t* g++.dg/modules/init-2_a.C: Adjust.\n\t* g++.dg/modules/init-2_c.C: Adjust.\n\t* g++.dg/modules/init-2_d.C: New.", "tree": {"sha": "798f89f4fab1132a892b639ffcbacec44a4ac901", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/798f89f4fab1132a892b639ffcbacec44a4ac901"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8609768fbbc1ec650fe245cb45ee6d893ade3d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8609768fbbc1ec650fe245cb45ee6d893ade3d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8609768fbbc1ec650fe245cb45ee6d893ade3d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8609768fbbc1ec650fe245cb45ee6d893ade3d7/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f6c317b3a16350698f3c9e0accb43a9b4acb4ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f6c317b3a16350698f3c9e0accb43a9b4acb4ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f6c317b3a16350698f3c9e0accb43a9b4acb4ae"}], "stats": {"total": 92, "additions": 60, "deletions": 32}, "files": [{"sha": "2fde4f83b41c16a290dc5f7dfd1d4e063669837b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8609768fbbc1ec650fe245cb45ee6d893ade3d7/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8609768fbbc1ec650fe245cb45ee6d893ade3d7/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=e8609768fbbc1ec650fe245cb45ee6d893ade3d7", "patch": "@@ -7209,7 +7209,7 @@ extern void import_module (module_state *, location_t, bool export_p,\n extern void declare_module (module_state *, location_t, bool export_p,\n \t\t\t    tree attr, cpp_reader *);\n extern void init_modules (cpp_reader *);\n-extern void fini_modules (cpp_reader *, void *cookie);\n+extern void fini_modules (cpp_reader *, void *cookie, bool);\n extern void maybe_check_all_macros (cpp_reader *);\n extern void *finish_module_processing (cpp_reader *);\n extern char const *module_name (unsigned, bool header_ok);"}, {"sha": "a8f3e6e5fbad7e34c18e50be18df7e1c32fa76c0", "filename": "gcc/cp/decl2.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8609768fbbc1ec650fe245cb45ee6d893ade3d7/gcc%2Fcp%2Fdecl2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8609768fbbc1ec650fe245cb45ee6d893ade3d7/gcc%2Fcp%2Fdecl2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.cc?ref=e8609768fbbc1ec650fe245cb45ee6d893ade3d7", "patch": "@@ -5205,7 +5205,8 @@ c_parse_final_cleanups (void)\n   if (c_dialect_objc ())\n     objc_write_global_declarations ();\n \n-  if (module_determine_import_inits ())\n+  bool has_module_inits = module_determine_import_inits ();\n+  if (has_module_inits)\n     {\n       input_location = locus_at_end_of_parsing;\n       tree body = start_partial_init_fini_fn (true, DEFAULT_INIT_PRIORITY,\n@@ -5221,8 +5222,9 @@ c_parse_final_cleanups (void)\n       // Make sure there's a default priority entry.\n       if (!static_init_fini_fns[true])\n \tstatic_init_fini_fns[true] = priority_map_t::create_ggc ();\n-      static_init_fini_fns[true]->get_or_insert (DEFAULT_INIT_PRIORITY);\n-    } \n+      if (static_init_fini_fns[true]->get_or_insert (DEFAULT_INIT_PRIORITY))\n+\thas_module_inits = true;\n+    }\n \n   /* Generate initialization and destruction functions for all\n      priorities for which they are required.  They have C-language\n@@ -5238,7 +5240,7 @@ c_parse_final_cleanups (void)\n       }\n   pop_lang_context ();\n \n-  fini_modules (parse_in, module_cookie);\n+  fini_modules (parse_in, module_cookie, has_module_inits);\n \n   /* Generate any missing aliases.  */\n   maybe_apply_pending_pragma_weaks ();"}, {"sha": "5566c49490ff69b14520a44d5390097a6e7d6a50", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 30, "deletions": 19, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8609768fbbc1ec650fe245cb45ee6d893ade3d7/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8609768fbbc1ec650fe245cb45ee6d893ade3d7/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=e8609768fbbc1ec650fe245cb45ee6d893ade3d7", "patch": "@@ -3439,7 +3439,7 @@ class GTY((chain_next (\"%h.parent\"), for_user)) module_state {\n   bool exported_p : 1;\t/* directness != MD_NONE && exported.  */\n   bool cmi_noted_p : 1; /* We've told the user about the CMI, don't\n \t\t\t   do it again  */\n-  bool call_init_p : 1; /* This module's global initializer needs\n+  bool active_init_p : 1; /* This module's global initializer needs\n \t\t\t   calling.  */\n   bool inform_cmi_p : 1; /* Inform of a read/write.  */\n   bool visited_p : 1;    /* A walk-once flag. */\n@@ -3677,7 +3677,7 @@ module_state::module_state (tree name, module_state *parent, bool partition)\n   exported_p = false;\n \n   cmi_noted_p = false;\n-  call_init_p = false;\n+  active_init_p = false;\n \n   partition_p = partition;\n \n@@ -14393,12 +14393,14 @@ struct module_state_config {\n   unsigned ordinary_locs;\n   unsigned macro_locs;\n   unsigned ordinary_loc_align;\n+  unsigned active_init;\n \n public:\n   module_state_config ()\n     :dialect_str (get_dialect ()),\n      num_imports (0), num_partitions (0), num_entities (0),\n-     ordinary_locs (0), macro_locs (0), ordinary_loc_align (0)\n+     ordinary_locs (0), macro_locs (0), ordinary_loc_align (0),\n+     active_init (0)\n   {\n   }\n \n@@ -17336,7 +17338,9 @@ module_state::write_config (elf_out *to, module_state_config &config,\n \n   cfg.u (config.ordinary_locs);\n   cfg.u (config.macro_locs);\n-  cfg.u (config.ordinary_loc_align);  \n+  cfg.u (config.ordinary_loc_align);\n+\n+  cfg.u (config.active_init);\n \n   /* Now generate CRC, we'll have incorporated the inner CRC because\n      of its serialization above.  */\n@@ -17522,6 +17526,8 @@ module_state::read_config (module_state_config &config)\n   config.macro_locs = cfg.u ();\n   config.ordinary_loc_align = cfg.u ();\n \n+  config.active_init = cfg.u ();\n+\n  done:\n   return cfg.end (from ());\n }\n@@ -17922,6 +17928,9 @@ module_state::read_initial (cpp_reader *reader)\n   if (ok && have_locs && !read_macro_maps ())\n     ok = false;\n \n+  /* Note whether there's an active initializer.  */\n+  active_init_p = !is_header () && bool (config.active_init);\n+\n   gcc_assert (slurp->current == ~0u);\n   return ok;\n }\n@@ -19047,10 +19056,10 @@ module_determine_import_inits ()\n   if (!modules || header_module_p ())\n     return false;\n \n-  /* Determine call_init_p.  We need the same bitmap allocation\n+  /* Prune active_init_p.  We need the same bitmap allocation\n      scheme as for the imports member.  */\n   function_depth++; /* Disable GC.  */\n-  bitmap indirect_imports (BITMAP_GGC_ALLOC ());\n+  bitmap covered_imports (BITMAP_GGC_ALLOC ());\n \n   bool any = false;\n \n@@ -19060,16 +19069,15 @@ module_determine_import_inits ()\n     {\n       module_state *import = (*modules)[ix];\n \n-      if (!import->is_header ()\n-\t  && !bitmap_bit_p (indirect_imports, ix))\n+      if (!import->active_init_p)\n+\t;\n+      else if (bitmap_bit_p (covered_imports, ix))\n+\timport->active_init_p = false;\n+      else\n \t{\n-\t  /* Everything this imports is therefore indirectly\n-\t     imported.  */\n-\t  bitmap_ior_into (indirect_imports, import->imports);\n-\t  /* We don't have to worry about the self-import bit,\n-\t     because of the single pass.  */\n-\n-\t  import->call_init_p = true;\n+\t  /* Everything this imports is therefore handled by its\n+\t     initializer, so doesn't need initializing by us.  */\n+\t  bitmap_ior_into (covered_imports, import->imports);\n \t  any = true;\n \t}\n     }\n@@ -19098,7 +19106,7 @@ module_add_import_initializers ()\n   for (unsigned ix = modules->length (); --ix;)\n     {\n       module_state *import = (*modules)[ix];\n-      if (import->call_init_p)\n+      if (import->active_init_p)\n \t{\n \t  tree name = mangle_module_global_init (ix);\n \t  tree fndecl = build_lang_decl (FUNCTION_DECL, name, fntype);\n@@ -19979,14 +19987,16 @@ finish_module_processing (cpp_reader *reader)\n // the module static initializer is a NOP or not.\n \n static void\n-late_finish_module (cpp_reader *reader, module_processing_cookie *cookie)\n+late_finish_module (cpp_reader *reader,  module_processing_cookie *cookie,\n+\t\t    bool init_fn_non_empty)\n {\n   timevar_start (TV_MODULE_EXPORT);\n \n   module_state *state = (*modules)[0];\n   unsigned n = dump.push (state);\n   state->announce (\"finishing\");\n \n+  cookie->config.active_init = init_fn_non_empty;\n   if (cookie->began)\n     state->write_end (&cookie->out, reader, cookie->config, cookie->crc);\n \n@@ -20029,11 +20039,12 @@ late_finish_module (cpp_reader *reader, module_processing_cookie *cookie)\n }\n \n void\n-fini_modules (cpp_reader *reader, void *cookie)\n+fini_modules (cpp_reader *reader, void *cookie, bool has_inits)\n {\n   if (cookie)\n     late_finish_module (reader,\n-\t\t\tstatic_cast<module_processing_cookie *> (cookie));\n+\t\t\tstatic_cast<module_processing_cookie *> (cookie),\n+\t\t\thas_inits);\n \n   /* We're done with the macro tables now.  */\n   vec_free (macro_exports);"}, {"sha": "c7ec782420de5a7967a25e096e34887702bddaa1", "filename": "gcc/testsuite/g++.dg/modules/init-2_a.C", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8609768fbbc1ec650fe245cb45ee6d893ade3d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Finit-2_a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8609768fbbc1ec650fe245cb45ee6d893ade3d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Finit-2_a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Finit-2_a.C?ref=e8609768fbbc1ec650fe245cb45ee6d893ade3d7", "patch": "@@ -2,6 +2,11 @@\n export module Foo;\n // { dg-module-cmi Foo }\n \n+static int init ()\n+{\n+  return 1;\n+}\n+\n+int var = init ();\n+\n // { dg-final { scan-assembler {_ZGIW3Foo:} } }\n-// But it is empty, and so no idempotency bool\n-// { dg-final { scan-assembler-not {_ZZ9_ZGIW3FooE9__in_chrg} } }"}, {"sha": "2b1315e2892f5577318e6c3808a5f5893db9dd81", "filename": "gcc/testsuite/g++.dg/modules/init-2_c.C", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8609768fbbc1ec650fe245cb45ee6d893ade3d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Finit-2_c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8609768fbbc1ec650fe245cb45ee6d893ade3d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Finit-2_c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Finit-2_c.C?ref=e8609768fbbc1ec650fe245cb45ee6d893ade3d7", "patch": "@@ -1,8 +1,7 @@\n // { dg-additional-options \"-fmodules-ts -fno-inline\" }\n+export module Baz;\n+// { dg-module-cmi Baz }\n \n-import Foo;\n-import Bar;\n-\n-// We know Bar imports Foo, so only call Bar's Global Init\n-// { dg-final { scan-assembler {call[ \\t]+_?_ZGIW3Bar} { target i?86-*-* x86_64-*-* } } }\n-// { dg-final { scan-assembler-not {call[ \\t]+_?_ZGIW3Foo} { target i?86-*-* x86_64-*-* } } }\n+// { dg-final { scan-assembler {_ZGIW3Baz:} } }\n+// But it is empty, and so no idempotency bool\n+// { dg-final { scan-assembler-not {_ZZ9_ZGIW3BazE9__in_chrg} } }"}, {"sha": "d125cfc1c156dae72e1702854a33a3ed02cc422a", "filename": "gcc/testsuite/g++.dg/modules/init-2_d.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8609768fbbc1ec650fe245cb45ee6d893ade3d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Finit-2_d.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8609768fbbc1ec650fe245cb45ee6d893ade3d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Finit-2_d.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Finit-2_d.C?ref=e8609768fbbc1ec650fe245cb45ee6d893ade3d7", "patch": "@@ -0,0 +1,11 @@\n+// { dg-additional-options \"-fmodules-ts -fno-inline\" }\n+\n+import Foo;\n+import Bar;\n+import Baz;\n+\n+// We know Bar imports Foo, so only call Bar's Global Init\n+// { dg-final { scan-assembler {call[ \\t]+_?_ZGIW3Bar} { target i?86-*-* x86_64-*-* } } }\n+// { dg-final { scan-assembler-not {call[ \\t]+_?_ZGIW3Foo} { target i?86-*-* x86_64-*-* } } }\n+// We know Baz has a nop init, so don't call it.\n+// { dg-final { scan-assembler-not {call[ \\t]+_?_ZGIW3Baz} { target i?86-*-* x86_64-*-* } } }"}]}