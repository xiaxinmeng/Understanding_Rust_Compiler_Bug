{"sha": "603eaec49a32f4b409ca8c22e71e6f683c799758", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAzZWFlYzQ5YTMyZjRiNDA5Y2E4YzIyZTcxZTZmNjgzYzc5OTc1OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-06-02T02:28:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-06-02T02:28:19Z"}, "message": "re PR c++/44282 (fastcall is not mangled at all)\n\n\tPR c++/44282\ngcc/cp/\n\t* mangle.c (attr_strcmp): New.\n\t(write_CV_qualifiers_for_type): Also write out attributes that\n\taffect type identity.\n\t(write_type): Strip all attributes after writing qualifiers.\nlibiberty/\n\t* cp-demangle.c (cplus_demangle_type): Handle arguments to vendor\n\textended qualifier.\n\nFrom-SVN: r224007", "tree": {"sha": "1587f66f189daa25f9f3d68dc7bba6b4d6e5e5d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1587f66f189daa25f9f3d68dc7bba6b4d6e5e5d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/603eaec49a32f4b409ca8c22e71e6f683c799758", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/603eaec49a32f4b409ca8c22e71e6f683c799758", "html_url": "https://github.com/Rust-GCC/gccrs/commit/603eaec49a32f4b409ca8c22e71e6f683c799758", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/603eaec49a32f4b409ca8c22e71e6f683c799758/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "459b4d159247eee08f45d826f17291cf2157529f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/459b4d159247eee08f45d826f17291cf2157529f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/459b4d159247eee08f45d826f17291cf2157529f"}], "stats": {"total": 130, "additions": 123, "deletions": 7}, "files": [{"sha": "8996fe3a9e62ef3fabd5e8301d9d9e93a7dfaec4", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603eaec49a32f4b409ca8c22e71e6f683c799758/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603eaec49a32f4b409ca8c22e71e6f683c799758/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=603eaec49a32f4b409ca8c22e71e6f683c799758", "patch": "@@ -894,7 +894,7 @@ c_common_post_options (const char **pfilename)\n   /* Change flag_abi_version to be the actual current ABI level for the\n      benefit of c_cpp_builtins.  */\n   if (flag_abi_version == 0)\n-    flag_abi_version = 8;\n+    flag_abi_version = 9;\n \n   /* Set C++ standard to C++98 if not specified on the command line.  */\n   if (c_dialect_cxx () && cxx_dialect == cxx_unset)"}, {"sha": "32b416a324f8fe7c06b99a2926423b4d88b727f8", "filename": "gcc/common.opt", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603eaec49a32f4b409ca8c22e71e6f683c799758/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603eaec49a32f4b409ca8c22e71e6f683c799758/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=603eaec49a32f4b409ca8c22e71e6f683c799758", "patch": "@@ -836,8 +836,11 @@ Driver Undocumented\n ;\n ; 8: The version of the ABI that corrects the substitution behavior of\n ;    function types with function-cv-qualifiers.\n-;    First selectable in G++ 4.9 and default in G++ 5\n-;    (set in c_common_post_options).\n+;    First selectable in G++ 4.9 and default in G++ 5.\n+;\n+; 9: The version of the ABI that mangles attributes that affect type\n+;    identity, such as ia32 calling convention attributes (stdcall, etc.)\n+;    Default in G++ 6 (set in c_common_post_options).\n ;\n ; Additional positive integers will be assigned as new versions of\n ; the ABI become the default version of the ABI."}, {"sha": "78d779133a6ebe8cea6f114b214c2ae5aef035e2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603eaec49a32f4b409ca8c22e71e6f683c799758/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603eaec49a32f4b409ca8c22e71e6f683c799758/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=603eaec49a32f4b409ca8c22e71e6f683c799758", "patch": "@@ -1,3 +1,11 @@\n+2015-06-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/44282\n+\t* mangle.c (attr_strcmp): New.\n+\t(write_CV_qualifiers_for_type): Also write out attributes that\n+\taffect type identity.\n+\t(write_type): Strip all attributes after writing qualifiers.\n+\n 2015-05-31  Jason Merrill  <jason@redhat.com>\n \n \t* constexpr.c (cxx_eval_indirect_ref): Try folding first."}, {"sha": "8fd06e3c2cd481d22b67374c743bd0652c1506d2", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 68, "deletions": 3, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603eaec49a32f4b409ca8c22e71e6f683c799758/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603eaec49a32f4b409ca8c22e71e6f683c799758/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=603eaec49a32f4b409ca8c22e71e6f683c799758", "patch": "@@ -75,6 +75,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-ref.h\"\n #include \"cgraph.h\"\n #include \"wide-int.h\"\n+#include \"attribs.h\"\n \n /* Debugging support.  */\n \n@@ -1916,11 +1917,15 @@ write_type (tree type)\n        candidates.  */\n     {\n       tree t = TYPE_MAIN_VARIANT (type);\n+      if (TYPE_ATTRIBUTES (t) && !OVERLOAD_TYPE_P (t))\n+\tt = cp_build_type_attribute_variant (t, NULL_TREE);\n+      gcc_assert (t != type);\n       if (TREE_CODE (t) == FUNCTION_TYPE\n \t  || TREE_CODE (t) == METHOD_TYPE)\n \t{\n \t  t = build_ref_qualified_type (t, type_memfn_rqual (type));\n-\t  if (abi_version_at_least (8))\n+\t  if (abi_version_at_least (8)\n+\t      || type == TYPE_MAIN_VARIANT (type))\n \t    /* Avoid adding the unqualified function type as a substitution.  */\n \t    write_function_type (t);\n \t  else\n@@ -2168,6 +2173,20 @@ write_type (tree type)\n     add_substitution (type);\n }\n \n+/* qsort callback for sorting a vector of attribute entries.  */\n+\n+static int\n+attr_strcmp (const void *p1, const void *p2)\n+{\n+  tree a1 = *(const tree*)p1;\n+  tree a2 = *(const tree*)p2;\n+\n+  const attribute_spec *as1 = lookup_attribute_spec (get_attribute_name (a1));\n+  const attribute_spec *as2 = lookup_attribute_spec (get_attribute_name (a2));\n+\n+  return strcmp (as1->name, as2->name);\n+}\n+\n /* Non-terminal <CV-qualifiers> for type nodes.  Returns the number of\n    CV-qualifiers written for TYPE.\n \n@@ -2182,9 +2201,55 @@ write_CV_qualifiers_for_type (const tree type)\n \n        \"In cases where multiple order-insensitive qualifiers are\n        present, they should be ordered 'K' (closest to the base type),\n-       'V', 'r', and 'U' (farthest from the base type) ...\"\n+       'V', 'r', and 'U' (farthest from the base type) ...\"  */\n+\n+  /* Mangle attributes that affect type identity as extended qualifiers.\n+\n+     We mangle them onto the obstack, then copy the result into a string\n+     vector and back up the obstack.  Once we've handled all of them we\n+     sort them and write them out in order.\n+\n+     We don't do this with classes and enums because their attributes\n+     are part of their definitions, not something added on.  */\n+\n+  if (abi_version_at_least (9) && !OVERLOAD_TYPE_P (type))\n+    {\n+      auto_vec<tree> vec;\n+      for (tree a = TYPE_ATTRIBUTES (type); a; a = TREE_CHAIN (a))\n+\t{\n+\t  tree name = get_attribute_name (a);\n+\t  const attribute_spec *as = lookup_attribute_spec (name);\n+\t  if (as && as->affects_type_identity\n+\t      && !is_attribute_p (\"abi_tag\", name))\n+\t    vec.safe_push (a);\n+\t}\n+      vec.qsort (attr_strcmp);\n+      while (!vec.is_empty())\n+\t{\n+\t  tree a = vec.pop();\n+\t  const attribute_spec *as\n+\t    = lookup_attribute_spec (get_attribute_name (a));\n+\n+\t  write_char ('U');\n+\t  write_unsigned_number (strlen (as->name));\n+\t  write_string (as->name);\n+\t  if (TREE_VALUE (a))\n+\t    {\n+\t      write_char ('I');\n+\t      for (tree args = TREE_VALUE (a); args;\n+\t\t   args = TREE_CHAIN (args))\n+\t\t{\n+\t\t  tree arg = TREE_VALUE (args);\n+\t\t  write_template_arg (arg);\n+\t\t}\n+\t      write_char ('E');\n+\t    }\n+\n+\t  ++num_qualifiers;\n+\t}\n+    }\n \n-     Note that we do not use cp_type_quals below; given \"const\n+  /* Note that we do not use cp_type_quals below; given \"const\n      int[3]\", the \"const\" is emitted with the \"int\", not with the\n      array.  */\n   cp_cv_quals quals = TYPE_QUALS (type);"}, {"sha": "35b8769c3d3e771acc4ac028535580f088688bfe", "filename": "gcc/testsuite/g++.dg/abi/macro0.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603eaec49a32f4b409ca8c22e71e6f683c799758/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmacro0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603eaec49a32f4b409ca8c22e71e6f683c799758/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmacro0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmacro0.C?ref=603eaec49a32f4b409ca8c22e71e6f683c799758", "patch": "@@ -1,6 +1,6 @@\n // This testcase will need to be kept in sync with c_common_post_options.\n // { dg-options \"-fabi-version=0\" }\n \n-#if __GXX_ABI_VERSION != 1008\n+#if __GXX_ABI_VERSION != 1009\n #error \"Incorrect value of __GXX_ABI_VERSION\"\n #endif"}, {"sha": "7d4121b5f7304aa3deb40e4234f72b31f0a0168c", "filename": "gcc/testsuite/g++.dg/abi/mangle-regparm.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603eaec49a32f4b409ca8c22e71e6f683c799758/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle-regparm.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603eaec49a32f4b409ca8c22e71e6f683c799758/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle-regparm.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle-regparm.C?ref=603eaec49a32f4b409ca8c22e71e6f683c799758", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do run { target i?86-*-* } }\n+// { dg-final { scan-assembler \"_Z18IndirectExternCallIPU7stdcallU7regparmILi3EEFviiEiEvT_T0_S3_\" } }\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+template <typename F, typename T>\n+void IndirectExternCall(F f, T t1, T t2) {\n+  typedef F (*WrapF)(F);\n+  f (t1, t2);\n+}\n+\n+__attribute__((regparm(3), stdcall))\n+void regparm_func (int i, int j)\n+{\n+  if (i != 24 || j != 42)\n+    __builtin_abort();\n+}\n+\n+void normal_func (int i, int j)\n+{\n+  if (i != 24 || j != 42)\n+    __builtin_abort();\n+}\n+\n+int main()\n+{\n+  IndirectExternCall (regparm_func, 24, 42);\n+  IndirectExternCall (normal_func, 24, 42);\n+}"}, {"sha": "f2b014841aae4b528b348af7c7e467d0f03fc6b8", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603eaec49a32f4b409ca8c22e71e6f683c799758/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603eaec49a32f4b409ca8c22e71e6f683c799758/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=603eaec49a32f4b409ca8c22e71e6f683c799758", "patch": "@@ -1,3 +1,8 @@\n+2015-06-01  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-demangle.c (cplus_demangle_type): Handle arguments to vendor\n+\textended qualifier.\n+\n 2015-05-22  Yunlian Jiang  <yunlian@google.com>\n \n \t* configure.ac: Add AC_GNU_SOURCE."}, {"sha": "2988b6bcb01a3be2108b87c10640c437daf4b068", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603eaec49a32f4b409ca8c22e71e6f683c799758/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603eaec49a32f4b409ca8c22e71e6f683c799758/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=603eaec49a32f4b409ca8c22e71e6f683c799758", "patch": "@@ -2470,6 +2470,9 @@ cplus_demangle_type (struct d_info *di)\n     case 'U':\n       d_advance (di, 1);\n       ret = d_source_name (di);\n+      if (d_peek_char (di) == 'I')\n+\tret = d_make_comp (di, DEMANGLE_COMPONENT_TEMPLATE, ret,\n+\t\t\t   d_template_args (di));\n       ret = d_make_comp (di, DEMANGLE_COMPONENT_VENDOR_TYPE_QUAL,\n \t\t\t cplus_demangle_type (di), ret);\n       break;"}, {"sha": "6ea64aef8591bb1a7104fa87ebd50b3740e1d3d3", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603eaec49a32f4b409ca8c22e71e6f683c799758/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603eaec49a32f4b409ca8c22e71e6f683c799758/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=603eaec49a32f4b409ca8c22e71e6f683c799758", "patch": "@@ -4356,3 +4356,6 @@ _QueueNotification_QueueController__$4PPPPPPPM_A_INotice___Z\n --format=gnu-v3\n _Z1fSsB3fooS_\n f(std::string[abi:foo], std::string[abi:foo])\n+--format=gnu-v3\n+_Z18IndirectExternCallIPU7stdcallU7regparmILi3EEFviiEiEvT_T0_S3_\n+void IndirectExternCall<void ( regparm<3> stdcall*)(int, int), int>(void ( regparm<3> stdcall*)(int, int), int, void ( regparm<3> stdcall*)(int, int))"}]}