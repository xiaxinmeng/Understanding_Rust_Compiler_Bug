{"sha": "575665ff649eb2aac87bad3904b795c988077f30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc1NjY1ZmY2NDllYjJhYWM4N2JhZDM5MDRiNzk1Yzk4ODA3N2YzMA==", "commit": {"author": {"name": "Christopher Jefferson", "email": "caj@cs.york.ac.uk", "date": "2004-10-05T10:28:17Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-10-05T10:28:17Z"}, "message": "stl_algobase.h (iter_swap): delegate to swap via __iter_swap when iterator's value_types are equal.\n\n2004-10-05  Christopher Jefferson  <caj@cs.york.ac.uk>\n\n\t* include/bits/stl_algobase.h (iter_swap): delegate to swap via\n\t__iter_swap when iterator's value_types are equal.\n\t(struct __iter_swap): New.\n\nFrom-SVN: r88549", "tree": {"sha": "529c9760906ca57e7255036f5b9e86c9f2fb7bed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/529c9760906ca57e7255036f5b9e86c9f2fb7bed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/575665ff649eb2aac87bad3904b795c988077f30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/575665ff649eb2aac87bad3904b795c988077f30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/575665ff649eb2aac87bad3904b795c988077f30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/575665ff649eb2aac87bad3904b795c988077f30/comments", "author": null, "committer": null, "parents": [{"sha": "88a6ecb6f2950f8e6644bddc508b2e7ccaf53b06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88a6ecb6f2950f8e6644bddc508b2e7ccaf53b06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88a6ecb6f2950f8e6644bddc508b2e7ccaf53b06"}], "stats": {"total": 84, "additions": 59, "deletions": 25}, "files": [{"sha": "7dd6e7e8cc29665b2285d3a857864c2044083a68", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575665ff649eb2aac87bad3904b795c988077f30/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575665ff649eb2aac87bad3904b795c988077f30/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=575665ff649eb2aac87bad3904b795c988077f30", "patch": "@@ -1,3 +1,9 @@\n+2004-10-05  Christopher Jefferson  <caj@cs.york.ac.uk>\n+\n+\t* include/bits/stl_algobase.h (iter_swap): delegate to swap via\n+\t__iter_swap when iterator's value_types are equal.\n+\t(struct __iter_swap): New.\n+\n 2004-10-04  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* configure.ac (libtool_VERSION): To 6:3:0."}, {"sha": "62578902c051e8df01958bddf9be719400b0b38b", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 53, "deletions": 25, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575665ff649eb2aac87bad3904b795c988077f30/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575665ff649eb2aac87bad3904b795c988077f30/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=575665ff649eb2aac87bad3904b795c988077f30", "patch": "@@ -77,6 +77,57 @@\n \n namespace std\n {\n+\n+  /**\n+   *  @brief Swaps two values.\n+   *  @param  a  A thing of arbitrary type.\n+   *  @param  b  Another thing of arbitrary type.\n+   *  @return   Nothing.\n+   *\n+   *  This is the simple classic generic implementation.  It will work on\n+   *  any type which has a copy constructor and an assignment operator.\n+  */\n+  template<typename _Tp>\n+    inline void\n+    swap(_Tp& __a, _Tp& __b)\n+    {\n+      // concept requirements\n+      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)\n+\n+      const _Tp __tmp = __a;\n+      __a = __b;\n+      __b = __tmp;\n+    }\n+\n+  // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a\n+  // nutshell, we are partially implementing the resolution of DR 187,\n+  // when it's safe, i.e., the value_types are equal.\n+  template<bool _BoolType>\n+    struct __iter_swap\n+    {\n+      template<typename _ForwardIterator1, typename _ForwardIterator2>\n+        static void\n+        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)\n+        {\n+          typedef typename iterator_traits<_ForwardIterator1>::value_type\n+            _ValueType1;\n+          const _ValueType1 __tmp = *__a;\n+          *__a = *__b;\n+          *__b = __tmp; \n+\t}\n+    };\n+\n+  template<>\n+    struct __iter_swap<true>\n+    {\n+      template<typename _ForwardIterator1, typename _ForwardIterator2>\n+        static void \n+        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)\n+        {\n+          swap(*__a, *__b);\n+        }\n+    };\n+\n   /**\n    *  @brief Swaps the contents of two iterators.\n    *  @param  a  An iterator.\n@@ -104,31 +155,8 @@ namespace std\n \t\t\t\t  _ValueType2>)\n       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,\n \t\t\t\t  _ValueType1>)\n-\n-      const _ValueType1 __tmp = *__a;\n-      *__a = *__b;\n-      *__b = __tmp;\n-    }\n-\n-  /**\n-   *  @brief Swaps two values.\n-   *  @param  a  A thing of arbitrary type.\n-   *  @param  b  Another thing of arbitrary type.\n-   *  @return   Nothing.\n-   *\n-   *  This is the simple classic generic implementation.  It will work on\n-   *  any type which has a copy constructor and an assignment operator.\n-  */\n-  template<typename _Tp>\n-    inline void\n-    swap(_Tp& __a, _Tp& __b)\n-    {\n-      // concept requirements\n-      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)\n-\n-      const _Tp __tmp = __a;\n-      __a = __b;\n-      __b = __tmp;\n+      std::__iter_swap<__are_same<_ValueType1, _ValueType2>::_M_type>::\n+\titer_swap(__a, __b);\n     }\n \n   #undef min"}]}