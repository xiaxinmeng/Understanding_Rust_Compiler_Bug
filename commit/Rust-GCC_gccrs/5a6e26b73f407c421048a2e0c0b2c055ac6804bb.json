{"sha": "5a6e26b73f407c421048a2e0c0b2c055ac6804bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE2ZTI2YjczZjQwN2M0MjEwNDhhMmUwYzBiMmMwNTVhYzY4MDRiYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-09-13T14:38:10Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-09-13T14:38:10Z"}, "message": "re PR tree-optimization/37392 (Segfault in verify_ssa: !gimple_nop_p (stmt))\n\n\tPR tree-optimization/37392\n\t* tree-inline.c (remap_gimple_stmt): Do not remap return value.\n\nFrom-SVN: r140342", "tree": {"sha": "92e0245783830687ae1d788955f6f5ad6c2bb591", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92e0245783830687ae1d788955f6f5ad6c2bb591"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a6e26b73f407c421048a2e0c0b2c055ac6804bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a6e26b73f407c421048a2e0c0b2c055ac6804bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a6e26b73f407c421048a2e0c0b2c055ac6804bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a6e26b73f407c421048a2e0c0b2c055ac6804bb/comments", "author": null, "committer": null, "parents": [{"sha": "934cb78a5826cfb0549000d76cd7a05fa5369c03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/934cb78a5826cfb0549000d76cd7a05fa5369c03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/934cb78a5826cfb0549000d76cd7a05fa5369c03"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "1f07adadeb91f2fe0d5af08fe2d309ef5a168d8f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a6e26b73f407c421048a2e0c0b2c055ac6804bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a6e26b73f407c421048a2e0c0b2c055ac6804bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a6e26b73f407c421048a2e0c0b2c055ac6804bb", "patch": "@@ -1,3 +1,8 @@\n+2008-09-13  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optimization/37392\n+\t* tree-inline.c (remap_gimple_stmt): Do not remap return value.\n+\n 2008-09-13  Martin Jambor  <mjambor@suse.cz>\n \t    Jan Hubicka  <jh@suse.cz>\n "}, {"sha": "ebc8b32916b4549f8cff301d3ff8908178179292", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a6e26b73f407c421048a2e0c0b2c055ac6804bb/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a6e26b73f407c421048a2e0c0b2c055ac6804bb/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=5a6e26b73f407c421048a2e0c0b2c055ac6804bb", "patch": "@@ -1029,6 +1029,7 @@ remap_gimple_stmt (gimple stmt, copy_body_data *id)\n   gimple copy = NULL;\n   struct walk_stmt_info wi;\n   tree new_block;\n+  bool skip_first = false;\n \n   /* Begin by recognizing trees that we'll completely rewrite for the\n      inlining context.  Our output for these trees is completely\n@@ -1050,7 +1051,11 @@ remap_gimple_stmt (gimple stmt, copy_body_data *id)\n \t already been set (e.g. a recent \"foo (&result_decl, ...)\");\n \t just toss the entire GIMPLE_RETURN.  */\n       if (retval && TREE_CODE (retval) != RESULT_DECL)\n-\tcopy = gimple_build_assign (id->retvar, retval);\n+        {\n+\t  copy = gimple_build_assign (id->retvar, retval);\n+\t  /* id->retvar is already substituted.  Skip it on later remapping.  */\n+\t  skip_first = true;\n+\t}\n       else\n \treturn gimple_build_nop ();\n     }\n@@ -1216,7 +1221,10 @@ remap_gimple_stmt (gimple stmt, copy_body_data *id)\n   /* Remap all the operands in COPY.  */\n   memset (&wi, 0, sizeof (wi));\n   wi.info = id;\n-  walk_gimple_op (copy, remap_gimple_op_r, &wi); \n+  if (skip_first)\n+    walk_tree (gimple_op_ptr (copy, 1), remap_gimple_op_r, &wi, NULL);\n+  else\n+    walk_gimple_op (copy, remap_gimple_op_r, &wi); \n \n   /* We have to handle EH region remapping of GIMPLE_RESX specially because\n      the region number is not an operand.  */"}]}