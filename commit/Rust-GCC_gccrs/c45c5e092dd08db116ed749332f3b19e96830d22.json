{"sha": "c45c5e092dd08db116ed749332f3b19e96830d22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ1YzVlMDkyZGQwOGRiMTE2ZWQ3NDkzMzJmM2IxOWU5NjgzMGQyMg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-02-23T20:46:18Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-02-23T20:46:18Z"}, "message": "gjavah.c (print_name): In JNI case, correctly quote string.\n\n\t* gjavah.c (print_name): In JNI case, correctly quote string.\n\t(print_method_info): Don't handle overrides in JNI mode.\n\nFrom-SVN: r32124", "tree": {"sha": "b37b5a1811d526e606a007b8b528cbd543f01b3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b37b5a1811d526e606a007b8b528cbd543f01b3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c45c5e092dd08db116ed749332f3b19e96830d22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c45c5e092dd08db116ed749332f3b19e96830d22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c45c5e092dd08db116ed749332f3b19e96830d22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c45c5e092dd08db116ed749332f3b19e96830d22/comments", "author": null, "committer": null, "parents": [{"sha": "9fc336c7e6d480aa219344688a607da4a01eea0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc336c7e6d480aa219344688a607da4a01eea0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fc336c7e6d480aa219344688a607da4a01eea0a"}], "stats": {"total": 80, "additions": 56, "deletions": 24}, "files": [{"sha": "592594e96378eac92d6cb198f820f656a5a545d3", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c45c5e092dd08db116ed749332f3b19e96830d22/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c45c5e092dd08db116ed749332f3b19e96830d22/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=c45c5e092dd08db116ed749332f3b19e96830d22", "patch": "@@ -1,3 +1,8 @@\n+2000-02-23  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* gjavah.c (print_name): In JNI case, correctly quote string.\n+\t(print_method_info): Don't handle overrides in JNI mode.\n+\n 2000-02-22  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n \t* parse.y (init_decl_processing): `_Jv_IsInstanceOf' returned"}, {"sha": "086ee5af044f4ca4493fc27f722ccbea7545609b", "filename": "gcc/java/gjavah.c", "status": "modified", "additions": 51, "deletions": 24, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c45c5e092dd08db116ed749332f3b19e96830d22/gcc%2Fjava%2Fgjavah.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c45c5e092dd08db116ed749332f3b19e96830d22/gcc%2Fjava%2Fgjavah.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgjavah.c?ref=c45c5e092dd08db116ed749332f3b19e96830d22", "patch": "@@ -235,17 +235,6 @@ java_double_finite (d)\n   return (u.l & D_NAN_MASK) != D_NAN_MASK;\n }\n \n-static void\n-DEFUN(print_name, (stream, jcf, name_index),\n-      FILE* stream AND JCF* jcf AND int name_index)\n-{\n-  if (JPOOL_TAG (jcf, name_index) != CONSTANT_Utf8)\n-    fprintf (stream, \"<not a UTF8 constant>\");\n-  else\n-    jcf_print_utf8 (stream, JPOOL_UTF_DATA (jcf, name_index),\n-\t\t    JPOOL_UTF_LENGTH (jcf, name_index));\n-}\n-\n /* Print a character, appropriately mangled for JNI.  */\n \n static void\n@@ -278,6 +267,40 @@ jni_print_char (stream, ch)\n     }\n }\n \n+/* Print a name from the class data.  If the index does not point to a\n+   string, an error results.  */\n+\n+static void\n+DEFUN(print_name, (stream, jcf, name_index),\n+      FILE* stream AND JCF* jcf AND int name_index)\n+{\n+  if (JPOOL_TAG (jcf, name_index) != CONSTANT_Utf8)\n+    {\n+      fprintf (stream, \"<not a UTF8 constant>\");\n+      found_error = 1;\n+    }\n+  else if (! flag_jni)\n+    jcf_print_utf8 (stream, JPOOL_UTF_DATA (jcf, name_index),\n+\t\t    JPOOL_UTF_LENGTH (jcf, name_index));\n+  else\n+    {\n+      /* For JNI we must correctly quote each character.  */\n+      const unsigned char *str = JPOOL_UTF_DATA (jcf, name_index);\n+      int length = JPOOL_UTF_LENGTH (jcf, name_index);\n+      const unsigned char *limit = str + length;\n+      while (str < limit)\n+\t{\n+\t  int ch = UTF8_GET (str, limit);\n+\t  if (ch < 0)\n+\t    {\n+\t      fprintf (stream, \"\\\\<invalid>\");\n+\t      return;\n+\t    }\n+\t  jni_print_char (stream, ch);\n+\t}\n+    }\n+}\n+\n /* Print base name of class.  The base name is everything after the\n    final separator.  */\n \n@@ -648,20 +671,24 @@ DEFUN(print_method_info, (stream, jcf, name_index, sig_index, flags),\n   if (! stream)\n     return;\n \n-  /* We can't generate a method whose name is a C++ reserved word.  We\n-     can't just ignore the function, because that will cause incorrect\n-     code to be generated if the function is virtual (not only for\n-     calls to this function for for other functions after it in the\n-     vtbl).  So we give it a dummy name instead.  */\n-  override = cxx_keyword_subst (str, length);\n-  if (override)\n+  /* We don't worry about overrides in JNI mode.  */\n+  if (! flag_jni)\n     {\n-      /* If the method is static or final, we can safely skip it.  If\n-\t we don't skip it then we'll have problems since the mangling\n-\t will be wrong.  FIXME.  */\n-      if (METHOD_IS_FINAL (jcf->access_flags, flags)\n-\t  || (flags & ACC_STATIC))\n-\treturn;\n+      /* We can't generate a method whose name is a C++ reserved word.\n+\t We can't just ignore the function, because that will cause\n+\t incorrect code to be generated if the function is virtual\n+\t (not only for calls to this function for for other functions\n+\t after it in the vtbl).  So we give it a dummy name instead.  */\n+      override = cxx_keyword_subst (str, length);\n+      if (override)\n+\t{\n+\t  /* If the method is static or final, we can safely skip it.\n+\t     If we don't skip it then we'll have problems since the\n+\t     mangling will be wrong.  FIXME.  */\n+\t  if (METHOD_IS_FINAL (jcf->access_flags, flags)\n+\t      || (flags & ACC_STATIC))\n+\t    return;\n+\t}\n     }\n \n   if (! stubs && ! flag_jni)"}]}