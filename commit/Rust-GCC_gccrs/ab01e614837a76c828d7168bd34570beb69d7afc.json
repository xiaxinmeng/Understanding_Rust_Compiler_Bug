{"sha": "ab01e614837a76c828d7168bd34570beb69d7afc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWIwMWU2MTQ4MzdhNzZjODI4ZDcxNjhiZDM0NTcwYmViNjlkN2FmYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T13:30:02Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T13:30:02Z"}, "message": "[multiple changes]\n\n2014-07-29  Robert Dewar  <dewar@adacore.com>\n\n\t* einfo.adb (Derived_Type_Link): New function\n\t(Set_Derived_Type_Link): New procedure.\n\t(Write_Field31_Name): Output Derived_Type_Link.\n\t* einfo.ads: New field Derived_Type_Link.\n\t* exp_ch6.adb (Expand_Call): Warn if change of representation\n\tneeded on call.\n\t* sem_ch13.adb: Minor addition of ??? comment.\n\t(Rep_Item_Too_Late): Warn on case that is legal but could cause an\n\texpensive implicit conversion.\n\t* sem_ch3.adb (Build_Derived_Type): Set Derived_Type_Link if needed.\n\n2014-07-29  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch3.adb (Build_Init_Procedure): Renamed Local_DF_Id\n\tto DF_Id. Add new local variable DF_Call. Do not perform any\n\telaboration-related checks on the call to the partial finalization\n\troutine within an init proc to avoid generating bogus elaboration\n\twarnings on expansion-related code.\n\t* sem_elab.adb (Check_A_Call): Move constant Access_Case to\n\tthe top level of the routine.  Ensure that Output_Calls takes\n\tinto account flags -gnatel and -gnatwl when emitting warnings\n\tor info messages.\n\t(Check_Internal_Call_Continue): Update the call to Output_Calls.\n\t(Elab_Warning): Moved to the top level of routine Check_A_Call.\n\t(Emit): New routines.\n\t(Output_Calls): Add new formal parameter Check_Elab_Flag along with a\n\tcomment on usage. Output all warnings or info messages only when the\n\tcaller context demands it and the proper elaboration flag is set.\n\n2014-07-29  Yannick Moy  <moy@adacore.com>\n\n\t* sem_attr.adb (Analyze_Attribute/Attribute_Old):\n\tCheck rule about Old appearing in potentially unevaluated\n\texpression everywhere, not only in Post.\n\n2014-07-29  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sem_prag.adb: Update comment.\n\t* a-except.adb, a-except-2005.adb: Minor editing.\n\n2014-07-29  Pierre-Marie Derodat  <derodat@adacore.com>\n\n\t* exp_dbug.adb (Debug_Renaming_Declaration):\n\tDo not create renaming entities for renamings of non-packed\n\tobjects and for exceptions.\n\nFrom-SVN: r213175", "tree": {"sha": "a13d4e97d170aea1ae20a7e9f582a348dce4a2bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a13d4e97d170aea1ae20a7e9f582a348dce4a2bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab01e614837a76c828d7168bd34570beb69d7afc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab01e614837a76c828d7168bd34570beb69d7afc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab01e614837a76c828d7168bd34570beb69d7afc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab01e614837a76c828d7168bd34570beb69d7afc/comments", "author": null, "committer": null, "parents": [{"sha": "a8b346d2ebe5538cf9492d101322620bbd4498d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8b346d2ebe5538cf9492d101322620bbd4498d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8b346d2ebe5538cf9492d101322620bbd4498d9"}], "stats": {"total": 556, "additions": 392, "deletions": 164}, "files": [{"sha": "a04acf4e2a38e650b745fc53e1791971aa1d261d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab01e614837a76c828d7168bd34570beb69d7afc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab01e614837a76c828d7168bd34570beb69d7afc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ab01e614837a76c828d7168bd34570beb69d7afc", "patch": "@@ -1,3 +1,51 @@\n+2014-07-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* einfo.adb (Derived_Type_Link): New function\n+\t(Set_Derived_Type_Link): New procedure.\n+\t(Write_Field31_Name): Output Derived_Type_Link.\n+\t* einfo.ads: New field Derived_Type_Link.\n+\t* exp_ch6.adb (Expand_Call): Warn if change of representation\n+\tneeded on call.\n+\t* sem_ch13.adb: Minor addition of ??? comment.\n+\t(Rep_Item_Too_Late): Warn on case that is legal but could cause an\n+\texpensive implicit conversion.\n+\t* sem_ch3.adb (Build_Derived_Type): Set Derived_Type_Link if needed.\n+\n+2014-07-29  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch3.adb (Build_Init_Procedure): Renamed Local_DF_Id\n+\tto DF_Id. Add new local variable DF_Call. Do not perform any\n+\telaboration-related checks on the call to the partial finalization\n+\troutine within an init proc to avoid generating bogus elaboration\n+\twarnings on expansion-related code.\n+\t* sem_elab.adb (Check_A_Call): Move constant Access_Case to\n+\tthe top level of the routine.  Ensure that Output_Calls takes\n+\tinto account flags -gnatel and -gnatwl when emitting warnings\n+\tor info messages.\n+\t(Check_Internal_Call_Continue): Update the call to Output_Calls.\n+\t(Elab_Warning): Moved to the top level of routine Check_A_Call.\n+\t(Emit): New routines.\n+\t(Output_Calls): Add new formal parameter Check_Elab_Flag along with a\n+\tcomment on usage. Output all warnings or info messages only when the\n+\tcaller context demands it and the proper elaboration flag is set.\n+\n+2014-07-29  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute/Attribute_Old):\n+\tCheck rule about Old appearing in potentially unevaluated\n+\texpression everywhere, not only in Post.\n+\n+2014-07-29  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_prag.adb: Update comment.\n+\t* a-except.adb, a-except-2005.adb: Minor editing.\n+\n+2014-07-29  Pierre-Marie Derodat  <derodat@adacore.com>\n+\n+\t* exp_dbug.adb (Debug_Renaming_Declaration):\n+\tDo not create renaming entities for renamings of non-packed\n+\tobjects and for exceptions.\n+\n 2014-07-29  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch3.adb, sinfo.ads, types.ads, sem_prag.adb, a-except-2005.adb,"}, {"sha": "2cedb8375a79d0072288baf5628f996dd71e1647", "filename": "gcc/ada/a-except-2005.adb", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab01e614837a76c828d7168bd34570beb69d7afc/gcc%2Fada%2Fa-except-2005.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab01e614837a76c828d7168bd34570beb69d7afc/gcc%2Fada%2Fa-except-2005.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.adb?ref=ab01e614837a76c828d7168bd34570beb69d7afc", "patch": "@@ -404,17 +404,6 @@ package body Ada.Exceptions is\n    --  attached. The parameters are the file name and line number in each\n    --  case. The names are defined by Exp_Ch11.Get_RT_Exception_Name.\n \n-   --  Note on ordering of these routines. Normally in the Ada.Exceptions units\n-   --  we don't care about the ordering of entries for Rcheck routines, and\n-   --  the normal approach is to keep them in the same order as declarations\n-   --  in Types.\n-\n-   --  This section is an IMPORTANT EXCEPTION. It is essential that the\n-   --  routines in this section be declared in the same order as the Rmsg_xx\n-   --  constants in the following section. This is required by the .Net runtime\n-   --  which uses the exceptmsg.awk script to generate require exception data,\n-   --  and this script requires and expects that this ordering rule holds.\n-\n    procedure Rcheck_CE_Access_Check\n      (File : System.Address; Line : Integer);\n    procedure Rcheck_CE_Null_Access_Parameter"}, {"sha": "dbde478260b9466e7487fa7f8c44f4cdabc1c14e", "filename": "gcc/ada/a-except.adb", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab01e614837a76c828d7168bd34570beb69d7afc/gcc%2Fada%2Fa-except.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab01e614837a76c828d7168bd34570beb69d7afc/gcc%2Fada%2Fa-except.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except.adb?ref=ab01e614837a76c828d7168bd34570beb69d7afc", "patch": "@@ -360,6 +360,17 @@ package body Ada.Exceptions is\n    --  attached. The parameters are the file name and line number in each\n    --  case. The names are defined by Exp_Ch11.Get_RT_Exception_Name.\n \n+   --  Note on ordering of these routines. Normally in the Ada.Exceptions units\n+   --  we don't care about the ordering of entries for Rcheck routines, and\n+   --  the normal approach is to keep them in the same order as declarations\n+   --  in Types.\n+\n+   --  This section is an IMPORTANT EXCEPTION. It is essential that the\n+   --  routines in this section be declared in the same order as the Rmsg_xx\n+   --  constants in the following section. This is required by the .Net runtime\n+   --  which uses the exceptmsg.awk script to generate require exception data,\n+   --  and this script requires and expects that this ordering rule holds.\n+\n    procedure Rcheck_CE_Access_Check\n      (File : System.Address; Line : Integer);\n    procedure Rcheck_CE_Null_Access_Parameter\n@@ -418,8 +429,6 @@ package body Ada.Exceptions is\n      (File : System.Address; Line : Integer);\n    procedure Rcheck_PE_Potentially_Blocking_Operation\n      (File : System.Address; Line : Integer);\n-   procedure Rcheck_PE_Stream_Operation_Not_Allowed\n-     (File : System.Address; Line : Integer);\n    procedure Rcheck_PE_Stubbed_Subprogram_Called\n      (File : System.Address; Line : Integer);\n    procedure Rcheck_PE_Unchecked_Union_Restriction\n@@ -432,6 +441,8 @@ package body Ada.Exceptions is\n      (File : System.Address; Line : Integer);\n    procedure Rcheck_SE_Object_Too_Large\n      (File : System.Address; Line : Integer);\n+   procedure Rcheck_PE_Stream_Operation_Not_Allowed\n+     (File : System.Address; Line : Integer);\n \n    procedure Rcheck_PE_Finalize_Raised_Exception\n      (File : System.Address; Line : Integer);"}, {"sha": "c815c189c4a0c0260eba2c988fa1bc66a77bdf8a", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab01e614837a76c828d7168bd34570beb69d7afc/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab01e614837a76c828d7168bd34570beb69d7afc/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=ab01e614837a76c828d7168bd34570beb69d7afc", "patch": "@@ -249,6 +249,7 @@ package body Einfo is\n    --    Last_Aggregate_Assignment       Node30\n    --    Static_Initialization           Node30\n \n+   --    Derived_Type_Link               Node31\n    --    Thunk_Entity                    Node31\n \n    --    SPARK_Pragma                    Node32\n@@ -949,6 +950,12 @@ package body Einfo is\n       return Flag14 (Id);\n    end Depends_On_Private;\n \n+   function Derived_Type_Link (Id : E) return E is\n+   begin\n+      pragma Assert (Is_Type (Id));\n+      return Node31 (Base_Type (Id));\n+   end Derived_Type_Link;\n+\n    function Digits_Value (Id : E) return U is\n    begin\n       pragma Assert\n@@ -3682,6 +3689,12 @@ package body Einfo is\n       Set_Flag14 (Id, V);\n    end Set_Depends_On_Private;\n \n+   procedure Set_Derived_Type_Link (Id : E; V : E) is\n+   begin\n+      pragma Assert (Is_Type (Id) and then Is_Base_Type (Id));\n+      Set_Node31 (Id, V);\n+   end Set_Derived_Type_Link;\n+\n    procedure Set_Digits_Value (Id : E; V : U) is\n    begin\n       pragma Assert\n@@ -9596,6 +9609,9 @@ package body Einfo is\n               E_Function                                   =>\n             Write_Str (\"Thunk_Entity\");\n \n+         when Type_Kind                                    =>\n+            Write_Str (\"Derived_Type_Link\");\n+\n          when others                                       =>\n             Write_Str (\"Field31??\");\n       end case;"}, {"sha": "fb64097da80296d5faa6e88bf3bc00c1d79be1bb", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab01e614837a76c828d7168bd34570beb69d7afc/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab01e614837a76c828d7168bd34570beb69d7afc/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=ab01e614837a76c828d7168bd34570beb69d7afc", "patch": "@@ -819,6 +819,28 @@ package Einfo is\n --       Defined in all type entities. Set if the type is private or if it\n --       depends on a private type.\n \n+--    Derived_Type_Link (Node31)\n+--       Defined in all type and subtype entries. Set in a base type if\n+--       a derived type declaration is encountered which derives from\n+--       this base type or one of its subtypes, and there are already\n+--       primitive operations declared. In this case, it references the\n+--       entity for the type declared by the derived type declaration.\n+--       For example:\n+--\n+--          type R is ...\n+--          subtype RS is R ...\n+--          ...\n+--          type G is new RS ...\n+--\n+--       In this case, if primitive operations have been declared for R, at\n+--       the point of declaration of G, then the Derived_Type_Link of R is set\n+--       to point to the entity for G. This is used to generate warnings for\n+--       rep clauses that appear later on for R, which might result in an\n+--       unexpected implicit conversion operation.\n+--\n+--       Note: if there is more than one such derived type, the link will point\n+--       to the last one (this is only used in generating warning messages).\n+\n --    Designated_Type (synthesized)\n --       Applies to access types. Returns the designated type. Differs from\n --       Directly_Designated_Type in that if the access type refers to an\n@@ -5199,6 +5221,7 @@ package Einfo is\n    --    Related_Expression                  (Node24)\n    --    Current_Use_Clause                  (Node27)\n    --    Subprograms_For_Type                (Node29)\n+   --    Derived_Type_Link                   (Node31)\n    --    Linker_Section_Pragma               (Node33)\n \n    --    Depends_On_Private                  (Flag14)\n@@ -6461,6 +6484,7 @@ package Einfo is\n    function Delta_Value                         (Id : E) return R;\n    function Dependent_Instances                 (Id : E) return L;\n    function Depends_On_Private                  (Id : E) return B;\n+   function Derived_Type_Link                   (Id : E) return E;\n    function Digits_Value                        (Id : E) return U;\n    function Direct_Primitive_Operations         (Id : E) return L;\n    function Directly_Designated_Type            (Id : E) return E;\n@@ -7095,6 +7119,7 @@ package Einfo is\n    procedure Set_Delta_Value                     (Id : E; V : R);\n    procedure Set_Dependent_Instances             (Id : E; V : L);\n    procedure Set_Depends_On_Private              (Id : E; V : B := True);\n+   procedure Set_Derived_Type_Link               (Id : E; V : E);\n    procedure Set_Digits_Value                    (Id : E; V : U);\n    procedure Set_Direct_Primitive_Operations     (Id : E; V : L);\n    procedure Set_Directly_Designated_Type        (Id : E; V : E);\n@@ -7841,6 +7866,7 @@ package Einfo is\n    pragma Inline (Delta_Value);\n    pragma Inline (Dependent_Instances);\n    pragma Inline (Depends_On_Private);\n+   pragma Inline (Derived_Type_Link);\n    pragma Inline (Digits_Value);\n    pragma Inline (Direct_Primitive_Operations);\n    pragma Inline (Directly_Designated_Type);\n@@ -8322,6 +8348,7 @@ package Einfo is\n    pragma Inline (Set_Delta_Value);\n    pragma Inline (Set_Dependent_Instances);\n    pragma Inline (Set_Depends_On_Private);\n+   pragma Inline (Set_Derived_Type_Link);\n    pragma Inline (Set_Digits_Value);\n    pragma Inline (Set_Direct_Primitive_Operations);\n    pragma Inline (Set_Directly_Designated_Type);"}, {"sha": "5a6b0f9918b57381734260bfe9ffcb8a90dbd684", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab01e614837a76c828d7168bd34570beb69d7afc/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab01e614837a76c828d7168bd34570beb69d7afc/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=ab01e614837a76c828d7168bd34570beb69d7afc", "patch": "@@ -2596,7 +2596,7 @@ package body Exp_Ch3 is\n          Set_Statements (Handled_Stmt_Node, Body_Stmts);\n \n          --  Generate:\n-         --    Local_DF_Id (_init, C1, ..., CN);\n+         --    Deep_Finalize (_init, C1, ..., CN);\n          --    raise;\n \n          if Counter > 0\n@@ -2605,30 +2605,36 @@ package body Exp_Ch3 is\n            and then not Restriction_Active (No_Exception_Propagation)\n          then\n             declare\n-               Local_DF_Id : Entity_Id;\n+               DF_Call : Node_Id;\n+               DF_Id   : Entity_Id;\n \n             begin\n                --  Create a local version of Deep_Finalize which has indication\n                --  of partial initialization state.\n \n-               Local_DF_Id := Make_Temporary (Loc, 'F');\n+               DF_Id := Make_Temporary (Loc, 'F');\n \n-               Append_To (Decls,\n-                 Make_Local_Deep_Finalize (Rec_Type, Local_DF_Id));\n+               Append_To (Decls, Make_Local_Deep_Finalize (Rec_Type, DF_Id));\n+\n+               DF_Call :=\n+                 Make_Procedure_Call_Statement (Loc,\n+                   Name                   => New_Occurrence_Of (DF_Id, Loc),\n+                   Parameter_Associations => New_List (\n+                     Make_Identifier (Loc, Name_uInit),\n+                     New_Occurrence_Of (Standard_False, Loc)));\n+\n+               --  Do not emit warnings related to the elaboration order when a\n+               --  controlled object is declared before the body of Finalize is\n+               --  seen.\n+\n+               Set_No_Elaboration_Check (DF_Call);\n \n                Set_Exception_Handlers (Handled_Stmt_Node, New_List (\n                  Make_Exception_Handler (Loc,\n                    Exception_Choices => New_List (\n                      Make_Others_Choice (Loc)),\n-\n-                   Statements => New_List (\n-                     Make_Procedure_Call_Statement (Loc,\n-                       Name                   =>\n-                         New_Occurrence_Of (Local_DF_Id, Loc),\n-                       Parameter_Associations => New_List (\n-                         Make_Identifier (Loc, Name_uInit),\n-                         New_Occurrence_Of (Standard_False, Loc))),\n-\n+                   Statements        => New_List (\n+                     DF_Call,\n                      Make_Raise_Statement (Loc)))));\n             end;\n          else"}, {"sha": "2e4ef82aea14d0067c1b1e571a7b308bd50a7557", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab01e614837a76c828d7168bd34570beb69d7afc/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab01e614837a76c828d7168bd34570beb69d7afc/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=ab01e614837a76c828d7168bd34570beb69d7afc", "patch": "@@ -3705,19 +3705,27 @@ package body Exp_Ch6 is\n                         Resolve (Actual, Parent_Typ);\n                      end if;\n \n+                  --  If there is a change of representation, then generate a\n+                  --  warning, and do the change of representation.\n+\n+                  elsif not Same_Representation (Formal_Typ, Parent_Typ) then\n+                     Error_Msg_N\n+                       (\"??change of representation required\", Actual);\n+                     Convert (Actual, Parent_Typ);\n+\n                   --  For array and record types, the parent formal type and\n                   --  derived formal type have different sizes or pragma Pack\n                   --  status.\n \n                   elsif ((Is_Array_Type (Formal_Typ)\n-                            and then Is_Array_Type (Parent_Typ))\n+                           and then Is_Array_Type (Parent_Typ))\n                        or else\n                          (Is_Record_Type (Formal_Typ)\n-                            and then Is_Record_Type (Parent_Typ)))\n+                           and then Is_Record_Type (Parent_Typ)))\n                     and then\n                       (Esize (Formal_Typ) /= Esize (Parent_Typ)\n-                         or else Has_Pragma_Pack (Formal_Typ) /=\n-                                 Has_Pragma_Pack (Parent_Typ))\n+                        or else Has_Pragma_Pack (Formal_Typ) /=\n+                                Has_Pragma_Pack (Parent_Typ))\n                   then\n                      Convert (Actual, Parent_Typ);\n                   end if;"}, {"sha": "5e0d614feaf007fdab7bd8d213e135d2136c8709", "filename": "gcc/ada/exp_dbug.adb", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab01e614837a76c828d7168bd34570beb69d7afc/gcc%2Fada%2Fexp_dbug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab01e614837a76c828d7168bd34570beb69d7afc/gcc%2Fada%2Fexp_dbug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.adb?ref=ab01e614837a76c828d7168bd34570beb69d7afc", "patch": "@@ -306,6 +306,16 @@ package body Exp_Dbug is\n       Obj : Entity_Id;\n       Res : Node_Id;\n \n+      Enable : Boolean := Nkind (N) = N_Package_Renaming_Declaration;\n+      --  By default, we do not generate an encoding for renaming. This is\n+      --  however done (in which case this is set to True) in a few cases:\n+      --    - when a package is renamed,\n+      --    - when the renaming involves a packed array,\n+      --    - when the renaming involves a packed record.\n+\n+      procedure Enable_If_Packed_Array (N : Node_Id);\n+      --  Enable encoding generation if N is a packed array\n+\n       function Output_Subscript (N : Node_Id; S : String) return Boolean;\n       --  Outputs a single subscript value as ?nnn (subscript is compile time\n       --  known value with value nnn) or as ?e (subscript is local constant\n@@ -314,6 +324,21 @@ package body Exp_Dbug is\n       --  output in one of these two forms. The result is prepended to the\n       --  name stored in Name_Buffer.\n \n+      ----------------------------\n+      -- Enable_If_Packed_Array --\n+      ----------------------------\n+\n+      procedure Enable_If_Packed_Array (N : Node_Id) is\n+         T : constant Entity_Id := Etype (N);\n+      begin\n+         Enable :=\n+           (Enable\n+               or else\n+            (Ekind (T) in Array_Kind\n+               and then\n+             Present (Packed_Array_Impl_Type (T))));\n+      end Enable_If_Packed_Array;\n+\n       ----------------------\n       -- Output_Subscript --\n       ----------------------\n@@ -372,6 +397,8 @@ package body Exp_Dbug is\n                exit;\n \n             when N_Selected_Component =>\n+               Enable :=\n+                 Enable or else Is_Packed (Etype (Prefix (Ren)));\n                Prepend_String_To_Buffer\n                  (Get_Name_String (Chars (Selector_Name (Ren))));\n                Prepend_String_To_Buffer (\"XR\");\n@@ -382,6 +409,7 @@ package body Exp_Dbug is\n                   X : Node_Id := Last (Expressions (Ren));\n \n                begin\n+                  Enable_If_Packed_Array (Prefix (Ren));\n                   while Present (X) loop\n                      if not Output_Subscript (X, \"XS\") then\n                         Set_Materialize_Entity (Ent);\n@@ -396,6 +424,7 @@ package body Exp_Dbug is\n \n             when N_Slice =>\n \n+               Enable_If_Packed_Array (Prefix (Ren));\n                Typ := Etype (First_Index (Etype (Nam)));\n \n                if not Output_Subscript (Type_High_Bound (Typ), \"XS\") then\n@@ -422,6 +451,13 @@ package body Exp_Dbug is\n          end case;\n       end loop;\n \n+      --  If we found no reason here to emit an encoding, stop now.\n+\n+      if not Enable then\n+         Set_Materialize_Entity (Ent);\n+         return Empty;\n+      end if;\n+\n       Prepend_String_To_Buffer (\"___XE\");\n \n       --  Include the designation of the form of renaming"}, {"sha": "09ab6075662426ee5c411d9a6ef03deba12bca42", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab01e614837a76c828d7168bd34570beb69d7afc/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab01e614837a76c828d7168bd34570beb69d7afc/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=ab01e614837a76c828d7168bd34570beb69d7afc", "patch": "@@ -4564,25 +4564,11 @@ package body Sem_Attr is\n \n             --  Ensure that the obtained expression is the consequence of a\n             --  contract case as this is the only postcondition-like part of\n-            --  the pragma.\n+            --  the pragma. Otherwise, attribute 'Old appears in the condition\n+            --  of a contract case. Emit an error since this is not a\n+            --  postcondition-like context. (SPARK RM 6.1.3(2))\n \n-            if Expr = Expression (Parent (Expr)) then\n-\n-               --  Warn that a potentially unevaluated prefix is always\n-               --  evaluated when the corresponding consequence is selected.\n-\n-               if Is_Potentially_Unevaluated (P) then\n-                  Error_Msg_Name_1 := Aname;\n-                  Error_Msg_N\n-                    (\"??prefix of attribute % is always evaluated when \"\n-                     & \"related consequence is selected\", P);\n-               end if;\n-\n-            --  Attribute 'Old appears in the condition of a contract case.\n-            --  Emit an error since this is not a postcondition-like context.\n-            --  (SPARK RM 6.1.3(2))\n-\n-            else\n+            if Expr /= Expression (Parent (Expr)) then\n                Error_Attr\n                  (\"attribute % cannot appear in the condition \"\n                   & \"of a contract case\", P);\n@@ -4773,11 +4759,10 @@ package body Sem_Attr is\n               (\"??attribute Old applied to constant has no effect\", P);\n          end if;\n \n-         --  Check that the prefix of 'Old is an entity, when it appears in\n-         --  a postcondition and may be potentially unevaluated (6.1.1 (27/3)).\n+         --  Check that the prefix of 'Old is an entity when it may be\n+         --  potentially unevaluated (6.1.1 (27/3)).\n \n          if Present (Prag)\n-           and then Get_Pragma_Id (Prag) = Pragma_Postcondition\n            and then Is_Potentially_Unevaluated (N)\n            and then not Is_Entity_Name (P)\n          then"}, {"sha": "fc09f6f3d08e10171ca27adbb2eca2d2d1be5b97", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 61, "deletions": 6, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab01e614837a76c828d7168bd34570beb69d7afc/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab01e614837a76c828d7168bd34570beb69d7afc/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=ab01e614837a76c828d7168bd34570beb69d7afc", "patch": "@@ -11074,6 +11074,9 @@ package body Sem_Ch13 is\n       --  Note that neither of the above errors is considered a serious one,\n       --  since the effect is simply that we ignore the representation clause\n       --  in these cases.\n+      --  Is this really true? In any case if we make this change we must\n+      --  document the requirement in the spec of Rep_Item_Too_Late that\n+      --  if True is returned, then the rep item must be completely ignored???\n \n       ----------------------\n       -- No_Type_Rep_Item --\n@@ -11122,8 +11125,10 @@ package body Sem_Ch13 is\n          S := First_Subtype (T);\n \n          if Present (Freeze_Node (S)) then\n-            Error_Msg_NE\n-              (\"??no more representation items for }\", Freeze_Node (S), S);\n+            if not Relaxed_RM_Semantics then\n+               Error_Msg_NE\n+                 (\"??no more representation items for }\", Freeze_Node (S), S);\n+            end if;\n          end if;\n \n          return True;\n@@ -11142,18 +11147,68 @@ package body Sem_Ch13 is\n \n          if Has_Primitive_Operations (Parent_Type) then\n             No_Type_Rep_Item;\n-            Error_Msg_NE\n-              (\"\\parent type & has primitive operations!\", N, Parent_Type);\n+\n+            if not Relaxed_RM_Semantics then\n+               Error_Msg_NE\n+                 (\"\\parent type & has primitive operations!\", N, Parent_Type);\n+            end if;\n+\n             return True;\n \n          elsif Is_By_Reference_Type (Parent_Type) then\n             No_Type_Rep_Item;\n-            Error_Msg_NE\n-              (\"\\parent type & is a by reference type!\", N, Parent_Type);\n+\n+            if not Relaxed_RM_Semantics then\n+               Error_Msg_NE\n+                 (\"\\parent type & is a by reference type!\", N, Parent_Type);\n+            end if;\n+\n             return True;\n          end if;\n       end if;\n \n+      --  No error, but one more warning to consider. The RM (surprisingly)\n+      --  allows this pattern:\n+\n+      --    type S is ...\n+      --    primitive operations for S\n+      --    type R is new S;\n+      --    rep clause for S\n+\n+      --  Meaning that calls on the primitive operations of S for values of\n+      --  type R may require possibly expensive implicit conversion operations.\n+      --  This is not an error, but is worth a warning.\n+\n+      if not Relaxed_RM_Semantics and then Is_Type (T) then\n+         declare\n+            DTL : constant Entity_Id := Derived_Type_Link (Base_Type (T));\n+\n+         begin\n+            if Present (DTL)\n+              and then Has_Primitive_Operations (Base_Type (T))\n+\n+              --  For now, do not generate this warning for the case of aspect\n+              --  specification using Ada 2012 syntax, since we get wrong\n+              --  messages we do not understand. The whole business of derived\n+              --  types and rep items seems a bit confused when aspects are\n+              --  used, since the aspects are not evaluated till freeze time.\n+\n+              and then not From_Aspect_Specification (N)\n+            then\n+               Error_Msg_Sloc := Sloc (DTL);\n+               Error_Msg_N\n+                 (\"representation item for& appears after derived type \"\n+                  & \"declaration#??\", N);\n+               Error_Msg_NE\n+                 (\"\\may result in implicit conversions for primitive \"\n+                  & \"operations of&??\", N, T);\n+               Error_Msg_NE\n+                 (\"\\to change representations when called with arguments \"\n+                  & \"of type&??\", N, DTL);\n+            end if;\n+         end;\n+      end if;\n+\n       --  No error, link item into head of chain of rep items for the entity,\n       --  but avoid chaining if we have an overloadable entity, and the pragma\n       --  is one that can apply to multiple overloaded entities."}, {"sha": "506a4b082e0eadca5e7ced3186c4fe633c8960b5", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab01e614837a76c828d7168bd34570beb69d7afc/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab01e614837a76c828d7168bd34570beb69d7afc/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=ab01e614837a76c828d7168bd34570beb69d7afc", "patch": "@@ -8503,6 +8503,12 @@ package body Sem_Ch3 is\n       Set_Is_Controlled  (Derived_Type, Is_Controlled  (Parent_Type));\n       Set_Is_Tagged_Type (Derived_Type, Is_Tagged_Type (Parent_Type));\n \n+      --  If the parent has primitive routines, set the derived type link\n+\n+      if Has_Primitive_Operations (Parent_Type) then\n+         Set_Derived_Type_Link (Parent_Base, Derived_Type);\n+      end if;\n+\n       --  If the parent type is a private subtype, the convention on the base\n       --  type may be set in the private part, and not propagated to the\n       --  subtype until later, so we obtain the convention from the base type."}, {"sha": "adf5fd123c1214a767eff0c9a6489ee31626049f", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 144, "deletions": 105, "changes": 249, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab01e614837a76c828d7168bd34570beb69d7afc/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab01e614837a76c828d7168bd34570beb69d7afc/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=ab01e614837a76c828d7168bd34570beb69d7afc", "patch": "@@ -263,11 +263,15 @@ package body Sem_Elab is\n    function Is_Finalization_Procedure (Id : Entity_Id) return Boolean;\n    --  Determine whether entity Id denotes a [Deep_]Finalize procedure\n \n-   procedure Output_Calls (N : Node_Id);\n+   procedure Output_Calls\n+     (N               : Node_Id;\n+      Check_Elab_Flag : Boolean);\n    --  Outputs chain of calls stored in the Elab_Call table. The caller has\n    --  already generated the main warning message, so the warnings generated\n    --  are all continuation messages. The argument is the call node at which\n-   --  the messages are to be placed.\n+   --  the messages are to be placed. When Check_Elab_Flag is set, calls are\n+   --  enumerated only when flag Elab_Warning is set for the dynamic case or\n+   --  when flag Elab_Info_Messages is set for the statis case.\n \n    function Same_Elaboration_Scope (Scop1, Scop2 : Entity_Id) return Boolean;\n    --  Given two scopes, determine whether they are the same scope from an\n@@ -497,6 +501,48 @@ package body Sem_Elab is\n       Generate_Warnings : Boolean := True;\n       In_Init_Proc      : Boolean := False)\n    is\n+      Access_Case : constant Boolean := Nkind (N) = N_Attribute_Reference;\n+      --  Indicates if we have Access attribute case\n+\n+      procedure Elab_Warning\n+        (Msg_D : String;\n+         Msg_S : String;\n+         Ent   : Node_Or_Entity_Id);\n+       --  Generate a call to Error_Msg_NE with parameters Msg_D or Msg_S (for\n+       --  dynamic or static elaboration model), N and Ent. Msg_D is a real\n+       --  warning (output if Msg_D is non-null and Elab_Warnings is set),\n+       --  Msg_S is an info message (output if Elab_Info_Messages is set.\n+\n+      ------------------\n+      -- Elab_Warning --\n+      ------------------\n+\n+      procedure Elab_Warning\n+        (Msg_D : String;\n+         Msg_S : String;\n+         Ent   : Node_Or_Entity_Id)\n+      is\n+      begin\n+         --  Dynamic elaboration checks, real warning\n+\n+         if Dynamic_Elaboration_Checks then\n+            if not Access_Case then\n+               if Msg_D /= \"\" and then Elab_Warnings then\n+                  Error_Msg_NE (Msg_D, N, Ent);\n+               end if;\n+            end if;\n+\n+         --  Static elaboration checks, info message\n+\n+         else\n+            if Elab_Info_Messages then\n+               Error_Msg_NE (Msg_S, N, Ent);\n+            end if;\n+         end if;\n+      end Elab_Warning;\n+\n+      --  Local variables\n+\n       Loc  : constant Source_Ptr := Sloc (N);\n       Ent  : Entity_Id;\n       Decl : Node_Id;\n@@ -525,9 +571,6 @@ package body Sem_Elab is\n       Inst_Case : constant Boolean := Nkind (N) in N_Generic_Instantiation;\n       --  Indicates if we have instantiation case\n \n-      Access_Case : constant Boolean := Nkind (N) = N_Attribute_Reference;\n-      --  Indicates if we have Access attribute case\n-\n       Caller_Unit_Internal : Boolean;\n       Callee_Unit_Internal : Boolean;\n \n@@ -544,6 +587,8 @@ package body Sem_Elab is\n       --  warnings on the scope are also suppressed. For the internal case,\n       --  we ignore this flag.\n \n+   --  Start of processing for Check_A_Call\n+\n    begin\n       --  If the call is known to be within a local Suppress Elaboration\n       --  pragma, nothing to check. This can happen in task bodies. But\n@@ -873,101 +918,64 @@ package body Sem_Elab is\n            and then (Elab_Warnings or Elab_Info_Messages)\n            and then Generate_Warnings\n          then\n-            Generate_Elab_Warnings : declare\n-               procedure Elab_Warning\n-                 (Msg_D : String;\n-                  Msg_S : String;\n-                  Ent   : Node_Or_Entity_Id);\n-               --  Generate a call to Error_Msg_NE with parameters Msg_D or\n-               --  Msg_S (for dynamic or static elaboration model), N and Ent.\n-               --  Msg_D is a real warning (output if Msg_D is non-null and\n-               --  Elab_Warnings is set), Msg_S is an info message (output if\n-               --  Elab_Info_Messages is set.\n-\n-               ------------------\n-               -- Elab_Warning --\n-               ------------------\n-\n-               procedure Elab_Warning\n-                 (Msg_D : String;\n-                  Msg_S : String;\n-                  Ent   : Node_Or_Entity_Id)\n-               is\n-               begin\n-                  --  Dynamic elaboration checks, real warning\n-\n-                  if Dynamic_Elaboration_Checks then\n-                     if not Access_Case then\n-                        if Msg_D /= \"\" and then Elab_Warnings then\n-                           Error_Msg_NE (Msg_D, N, Ent);\n-                        end if;\n-                     end if;\n+            --  Instantiation case\n \n-                  --  Static elaboration checks, info message\n-\n-                  else\n-                     if Elab_Info_Messages then\n-                        Error_Msg_NE (Msg_S, N, Ent);\n-                     end if;\n-                  end if;\n-               end Elab_Warning;\n-\n-            --  Start of processing for Generate_Elab_Warnings\n+            if Inst_Case then\n+               Elab_Warning\n+                 (\"instantiation of& may raise Program_Error?l?\",\n+                  \"info: instantiation of& during elaboration?$?\", Ent);\n \n-            begin\n-               --  Instantiation case\n+            --  Indirect call case, info message only in static elaboration\n+            --  case, because the attribute reference itself cannot raise an\n+            --  exception.\n \n-               if Inst_Case then\n-                  Elab_Warning\n-                    (\"instantiation of& may raise Program_Error?l?\",\n-                     \"info: instantiation of& during elaboration?$?\", Ent);\n+            elsif Access_Case then\n+               Elab_Warning\n+                 (\"\", \"info: access to& during elaboration?$?\", Ent);\n \n-               --  Indirect call case, info message only in static elaboration\n-               --  case, because the attribute reference itself cannot raise\n-               --  an exception.\n+            --  Subprogram call case\n \n-               elsif Access_Case then\n+            else\n+               if Nkind (Name (N)) in N_Has_Entity\n+                 and then Is_Init_Proc (Entity (Name (N)))\n+                 and then Comes_From_Source (Ent)\n+               then\n                   Elab_Warning\n-                    (\"\", \"info: access to& during elaboration?$?\", Ent);\n-\n-               --  Subprogram call case\n+                    (\"implicit call to & may raise Program_Error?l?\",\n+                     \"info: implicit call to & during elaboration?$?\",\n+                     Ent);\n \n                else\n-                  if Nkind (Name (N)) in N_Has_Entity\n-                    and then Is_Init_Proc (Entity (Name (N)))\n-                    and then Comes_From_Source (Ent)\n-                  then\n-                     Elab_Warning\n-                       (\"implicit call to & may raise Program_Error?l?\",\n-                        \"info: implicit call to & during elaboration?$?\",\n-                        Ent);\n-\n-                  else\n-                     Elab_Warning\n-                       (\"call to & may raise Program_Error?l?\",\n-                        \"info: call to & during elaboration?$?\",\n-                        Ent);\n-                  end if;\n+                  Elab_Warning\n+                    (\"call to & may raise Program_Error?l?\",\n+                     \"info: call to & during elaboration?$?\",\n+                     Ent);\n                end if;\n+            end if;\n \n-               Error_Msg_Qual_Level := Nat'Last;\n+            Error_Msg_Qual_Level := Nat'Last;\n \n-               if Nkind (N) in N_Subprogram_Instantiation then\n-                  Elab_Warning\n-                    (\"\\missing pragma Elaborate for&?l?\",\n-                     \"\\implicit pragma Elaborate for& generated?$?\",\n-                     W_Scope);\n+            if Nkind (N) in N_Subprogram_Instantiation then\n+               Elab_Warning\n+                 (\"\\missing pragma Elaborate for&?l?\",\n+                  \"\\implicit pragma Elaborate for& generated?$?\",\n+                  W_Scope);\n \n-               else\n-                  Elab_Warning\n-                    (\"\\missing pragma Elaborate_All for&?l?\",\n-                     \"\\implicit pragma Elaborate_All for & generated?$?\",\n-                     W_Scope);\n-               end if;\n-            end Generate_Elab_Warnings;\n+            else\n+               Elab_Warning\n+                 (\"\\missing pragma Elaborate_All for&?l?\",\n+                  \"\\implicit pragma Elaborate_All for & generated?$?\",\n+                  W_Scope);\n+            end if;\n \n             Error_Msg_Qual_Level := 0;\n-            Output_Calls (N);\n+\n+            --  Take into account the flags related to elaboration warning\n+            --  messages when enumerating the various calls involved. This\n+            --  ensures the proper pairing of the main warning and the\n+            --  clarification messages generated by Output_Calls.\n+\n+            Output_Calls (N, Check_Elab_Flag => True);\n \n             --  Set flag to prevent further warnings for same unit unless in\n             --  All_Errors_Mode.\n@@ -2316,7 +2324,12 @@ package body Sem_Elab is\n \n             Error_Msg_N (\"\\Program_Error ]<l<\", N);\n \n-            Output_Calls (N);\n+            --  There is no need to query the elaboration warning message flags\n+            --  because the main message is an error, not a warning, therefore\n+            --  all the clarification messages produces by Output_Calls must be\n+            --  emitted unconditionally.\n+\n+            Output_Calls (N, Check_Elab_Flag => False);\n          end if;\n       end if;\n \n@@ -3053,15 +3066,33 @@ package body Sem_Elab is\n    -- Output_Calls --\n    ------------------\n \n-   procedure Output_Calls (N : Node_Id) is\n-      Ent : Entity_Id;\n+   procedure Output_Calls\n+     (N               : Node_Id;\n+      Check_Elab_Flag : Boolean)\n+   is\n+      function Emit (Flag : Boolean) return Boolean;\n+      --  Determine whether to emit an error message based on the combination\n+      --  of flags Check_Elab_Flag and Flag.\n \n       function Is_Printable_Error_Name (Nm : Name_Id) return Boolean;\n       --  An internal function, used to determine if a name, Nm, is either\n       --  a non-internal name, or is an internal name that is printable\n       --  by the error message circuits (i.e. it has a single upper\n       --  case letter at the end).\n \n+      ----------\n+      -- Emit --\n+      ----------\n+\n+      function Emit (Flag : Boolean) return Boolean is\n+      begin\n+         if Check_Elab_Flag then\n+            return Flag;\n+         else\n+            return True;\n+         end if;\n+      end Emit;\n+\n       -----------------------------\n       -- Is_Printable_Error_Name --\n       -----------------------------\n@@ -3080,6 +3111,10 @@ package body Sem_Elab is\n          end if;\n       end Is_Printable_Error_Name;\n \n+      --  Local variables\n+\n+      Ent : Entity_Id;\n+\n    --  Start of processing for Output_Calls\n \n    begin\n@@ -3091,27 +3126,31 @@ package body Sem_Elab is\n          --  Dynamic elaboration model, warnings controlled by -gnatwl\n \n          if Dynamic_Elaboration_Checks then\n-            if Is_Generic_Unit (Ent) then\n-               Error_Msg_NE (\"\\\\?l?& instantiated #\", N, Ent);\n-            elsif Is_Init_Proc (Ent) then\n-               Error_Msg_N (\"\\\\?l?initialization procedure called #\", N);\n-            elsif Is_Printable_Error_Name (Chars (Ent)) then\n-               Error_Msg_NE (\"\\\\?l?& called #\", N, Ent);\n-            else\n-               Error_Msg_N (\"\\\\?l?called #\", N);\n+            if Emit (Elab_Warnings) then\n+               if Is_Generic_Unit (Ent) then\n+                  Error_Msg_NE (\"\\\\?l?& instantiated #\", N, Ent);\n+               elsif Is_Init_Proc (Ent) then\n+                  Error_Msg_N (\"\\\\?l?initialization procedure called #\", N);\n+               elsif Is_Printable_Error_Name (Chars (Ent)) then\n+                  Error_Msg_NE (\"\\\\?l?& called #\", N, Ent);\n+               else\n+                  Error_Msg_N (\"\\\\?l?called #\", N);\n+               end if;\n             end if;\n \n          --  Static elaboration model, info messages controlled by -gnatel\n \n          else\n-            if Is_Generic_Unit (Ent) then\n-               Error_Msg_NE (\"\\\\?$?& instantiated #\", N, Ent);\n-            elsif Is_Init_Proc (Ent) then\n-               Error_Msg_N (\"\\\\?$?initialization procedure called #\", N);\n-            elsif Is_Printable_Error_Name (Chars (Ent)) then\n-               Error_Msg_NE (\"\\\\?$?& called #\", N, Ent);\n-            else\n-               Error_Msg_N (\"\\\\?$?called #\", N);\n+            if Emit (Elab_Info_Messages) then\n+               if Is_Generic_Unit (Ent) then\n+                  Error_Msg_NE (\"\\\\?$?& instantiated #\", N, Ent);\n+               elsif Is_Init_Proc (Ent) then\n+                  Error_Msg_N (\"\\\\?$?initialization procedure called #\", N);\n+               elsif Is_Printable_Error_Name (Chars (Ent)) then\n+                  Error_Msg_NE (\"\\\\?$?& called #\", N, Ent);\n+               else\n+                  Error_Msg_N (\"\\\\?$?called #\", N);\n+               end if;\n             end if;\n          end if;\n       end loop;"}, {"sha": "16b93ab6d533280d80b0d097bfb78c6736b8ebf8", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab01e614837a76c828d7168bd34570beb69d7afc/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab01e614837a76c828d7168bd34570beb69d7afc/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=ab01e614837a76c828d7168bd34570beb69d7afc", "patch": "@@ -11022,7 +11022,9 @@ package body Sem_Prag is\n \n             --  If Allow_Integer_Address is already set do nothing, otherwise\n             --  calling RTE on RE_Address would cause a crash when loading\n-            --  system.ads.\n+            --  system.ads. ??? same will happen if Allow_Integer_Address is\n+            --  not set actually, to be fixed and then the guard on\n+            --  not Opt.Allow_Integer_Address should be removed.\n \n             if not Opt.Allow_Integer_Address\n               and then Is_Private_Type (RTE (RE_Address))"}]}