{"sha": "5d46ec3db21d8c8926f15a634b2d6570536db5f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ0NmVjM2RiMjFkOGM4OTI2ZjE1YTYzNGIyZDY1NzA1MzZkYjVmMQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2019-09-16T14:11:00Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-11-11T20:44:02Z"}, "message": "CFI-handling : Add a hook to allow target-specific Personality and LSDA indirections.\n\nAt present, the output of .cfi_personality and .cfi_lsda assumes\nELF semantics for indirections.  This isn't suitable for all targets\nand is one blocker to moving Darwin to use .cfi_xxxx.\n\nThe patch adds a target hook that allows non-ELF targets to use\nindirections appropriate to their needs.\n\ngcc/ChangeLog:\n\n\t* config/darwin-protos.h (darwin_make_eh_symbol_indirect): New.\n\t* config/darwin.c (darwin_make_eh_symbol_indirect): New. Use\n\tMach-O semantics for personality and ldsa indirections.\n\t* config/darwin.h (TARGET_ASM_MAKE_EH_SYMBOL_INDIRECT): New.\n\t* doc/tm.texi: Regenerate.\n\t* doc/tm.texi.in: Add TARGET_ASM_MAKE_EH_SYMBOL_INDIRECT hook.\n\t* dwarf2out.c (dwarf2out_do_cfi_startproc): If the target defines\n\ta hook for indirecting personality and ldsa references, use that\n\totherwise default to ELF semantics.\n\t* target.def (make_eh_symbol_indirect): New target hook.", "tree": {"sha": "319e91edab9ba1c12a694b210053af3f339bdb9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/319e91edab9ba1c12a694b210053af3f339bdb9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d46ec3db21d8c8926f15a634b2d6570536db5f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d46ec3db21d8c8926f15a634b2d6570536db5f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d46ec3db21d8c8926f15a634b2d6570536db5f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d46ec3db21d8c8926f15a634b2d6570536db5f1/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9227f81db7a0b38dd14ce4b48ca50c33cf8d5e1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9227f81db7a0b38dd14ce4b48ca50c33cf8d5e1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9227f81db7a0b38dd14ce4b48ca50c33cf8d5e1c"}], "stats": {"total": 45, "additions": 43, "deletions": 2}, "files": [{"sha": "3f222c3bbdc4923d6fb05672d25a3ee56caea57f", "filename": "gcc/config/darwin-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d46ec3db21d8c8926f15a634b2d6570536db5f1/gcc%2Fconfig%2Fdarwin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d46ec3db21d8c8926f15a634b2d6570536db5f1/gcc%2Fconfig%2Fdarwin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-protos.h?ref=5d46ec3db21d8c8926f15a634b2d6570536db5f1", "patch": "@@ -69,6 +69,7 @@ extern void darwin_non_lazy_pcrel (FILE *, rtx);\n \n extern void darwin_emit_unwind_label (FILE *, tree, int, int);\n extern void darwin_emit_except_table_label (FILE *);\n+extern rtx darwin_make_eh_symbol_indirect (rtx, bool);\n \n extern void darwin_pragma_ignore (struct cpp_reader *);\n extern void darwin_pragma_options (struct cpp_reader *);"}, {"sha": "3265e3e6cb70772d7a8ee29740024bbd54a7df10", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d46ec3db21d8c8926f15a634b2d6570536db5f1/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d46ec3db21d8c8926f15a634b2d6570536db5f1/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=5d46ec3db21d8c8926f15a634b2d6570536db5f1", "patch": "@@ -2225,6 +2225,17 @@ darwin_emit_except_table_label (FILE *file)\n   ASM_OUTPUT_LABEL (file, section_start_label);\n }\n \n+rtx\n+darwin_make_eh_symbol_indirect (rtx orig, bool ARG_UNUSED (pubvis))\n+{\n+  if (DARWIN_PPC == 0 && TARGET_64BIT)\n+    return orig;\n+\n+  return gen_rtx_SYMBOL_REF (Pmode,\n+\t\t\t     machopic_indirection_name (orig,\n+\t\t\t\t\t\t\t/*stub_p=*/false));\n+}\n+\n /* Return, and mark as used, the name of the stub for the mcount function.\n    Currently, this is only called by X86 code in the expansion of the\n    FUNCTION_PROFILER macro, when stubs are enabled.  */"}, {"sha": "5a766319cb016c98679e93d0f482cbc9a0e80d2b", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d46ec3db21d8c8926f15a634b2d6570536db5f1/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d46ec3db21d8c8926f15a634b2d6570536db5f1/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=5d46ec3db21d8c8926f15a634b2d6570536db5f1", "patch": "@@ -591,6 +591,9 @@ extern GTY(()) int darwin_ms_struct;\n /* Emit a label to separate the exception table.  */\n #define TARGET_ASM_EMIT_EXCEPT_TABLE_LABEL darwin_emit_except_table_label\n \n+/* Make an EH (personality or LDSA) symbol indirect as needed.  */\n+#define TARGET_ASM_MAKE_EH_SYMBOL_INDIRECT darwin_make_eh_symbol_indirect\n+\n /* Our profiling scheme doesn't LP labels and counter words.  */\n \n #define NO_PROFILE_COUNTERS\t1"}, {"sha": "a783a21f6cf7d4cd07495fc3a2b3bd58295a44c1", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d46ec3db21d8c8926f15a634b2d6570536db5f1/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d46ec3db21d8c8926f15a634b2d6570536db5f1/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=5d46ec3db21d8c8926f15a634b2d6570536db5f1", "patch": "@@ -9560,6 +9560,10 @@ given instruction.  This is only used when @code{TARGET_EXCEPT_UNWIND_INFO}\n returns @code{UI_TARGET}.\n @end deftypefn\n \n+@deftypefn {Target Hook} rtx TARGET_ASM_MAKE_EH_SYMBOL_INDIRECT (rtx @var{origsymbol}, bool @var{pubvis})\n+If necessary, modify personality and LSDA references to handle indirection.  The original symbol is in @code{origsymbol} and if @code{pubvis} is true  the symbol is visible outside the TU.\n+@end deftypefn\n+\n @deftypevr {Target Hook} bool TARGET_ASM_UNWIND_EMIT_BEFORE_INSN\n True if the @code{TARGET_ASM_UNWIND_EMIT} hook should be called before the assembly for @var{insn} has been emitted, false if the hook should be called afterward.\n @end deftypevr"}, {"sha": "897f28962669031f21779847b7c63dab377ed7e2", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d46ec3db21d8c8926f15a634b2d6570536db5f1/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d46ec3db21d8c8926f15a634b2d6570536db5f1/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=5d46ec3db21d8c8926f15a634b2d6570536db5f1", "patch": "@@ -6456,6 +6456,8 @@ the jump-table.\n \n @hook TARGET_ASM_UNWIND_EMIT\n \n+@hook TARGET_ASM_MAKE_EH_SYMBOL_INDIRECT\n+\n @hook TARGET_ASM_UNWIND_EMIT_BEFORE_INSN\n \n @node Exception Region Output"}, {"sha": "bea02f9fbce54a0c5b05dde0148549e312440f1a", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d46ec3db21d8c8926f15a634b2d6570536db5f1/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d46ec3db21d8c8926f15a634b2d6570536db5f1/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=5d46ec3db21d8c8926f15a634b2d6570536db5f1", "patch": "@@ -991,7 +991,12 @@ dwarf2out_do_cfi_startproc (bool second)\n \t in the assembler.  Further, the assembler can't handle any\n \t of the weirder relocation types.  */\n       if (enc & DW_EH_PE_indirect)\n-\tref = dw2_force_const_mem (ref, true);\n+\t{\n+\t  if (targetm.asm_out.make_eh_symbol_indirect != NULL)\n+\t    ref = targetm.asm_out.make_eh_symbol_indirect (ref, true);\n+\t  else\n+\t    ref = dw2_force_const_mem (ref, true);\n+\t}\n \n       fprintf (asm_out_file, \"\\t.cfi_personality %#x,\", enc);\n       output_addr_const (asm_out_file, ref);\n@@ -1009,7 +1014,12 @@ dwarf2out_do_cfi_startproc (bool second)\n       SYMBOL_REF_FLAGS (ref) = SYMBOL_FLAG_LOCAL;\n \n       if (enc & DW_EH_PE_indirect)\n-\tref = dw2_force_const_mem (ref, true);\n+\t{\n+\t  if (targetm.asm_out.make_eh_symbol_indirect != NULL)\n+\t    ref = targetm.asm_out.make_eh_symbol_indirect (ref, true);\n+\t  else\n+\t    ref = dw2_force_const_mem (ref, true);\n+\t}\n \n       fprintf (asm_out_file, \"\\t.cfi_lsda %#x,\", enc);\n       output_addr_const (asm_out_file, ref);"}, {"sha": "71411d8555960b09053253c7527fe11d98bd73ba", "filename": "gcc/target.def", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d46ec3db21d8c8926f15a634b2d6570536db5f1/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d46ec3db21d8c8926f15a634b2d6570536db5f1/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=5d46ec3db21d8c8926f15a634b2d6570536db5f1", "patch": "@@ -185,6 +185,16 @@ DEFHOOK\n  void, (rtx personality),\n  NULL)\n \n+/* If necessary, modify personality and LSDA references to handle\n+   indirection.  This is used when the assembler supports CFI directives.  */\n+DEFHOOK\n+(make_eh_symbol_indirect,\n+ \"If necessary, modify personality and LSDA references to handle indirection.\\\n+  The original symbol is in @code{origsymbol} and if @code{pubvis} is true\\\n+  the symbol is visible outside the TU.\",\n+ rtx, (rtx origsymbol, bool pubvis),\n+ NULL)\n+\n /* Emit any directives required to unwind this instruction.  */\n DEFHOOK\n (unwind_emit,"}]}