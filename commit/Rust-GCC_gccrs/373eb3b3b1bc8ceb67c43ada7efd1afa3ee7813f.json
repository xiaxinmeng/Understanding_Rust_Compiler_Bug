{"sha": "373eb3b3b1bc8ceb67c43ada7efd1afa3ee7813f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzczZWIzYjNiMWJjOGNlYjY3YzQzYWRhN2VmZDFhZmEzZWU3ODEzZg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-12-09T09:07:29Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-12-09T09:07:29Z"}, "message": "dump.c (dequeue_and_dump): Abbreviate `class' as `cls', not `csl'.\n\n\t* dump.c (dequeue_and_dump): Abbreviate `class' as `cls', not\n\t`csl'.\n\n\t* semantics.c (finish_switch_cond): Do conversions here, not ...\n\t* typeck.c (c_expand_start_case): Here.\n\n\t* semantics.c (do_poplevel): Remove unused variable.\n\nFrom-SVN: r30840", "tree": {"sha": "d56bb27a0f31567f3a539e3e352af77e67e1fce3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d56bb27a0f31567f3a539e3e352af77e67e1fce3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/373eb3b3b1bc8ceb67c43ada7efd1afa3ee7813f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/373eb3b3b1bc8ceb67c43ada7efd1afa3ee7813f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/373eb3b3b1bc8ceb67c43ada7efd1afa3ee7813f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/373eb3b3b1bc8ceb67c43ada7efd1afa3ee7813f/comments", "author": null, "committer": null, "parents": [{"sha": "14ddd2a181950ca10a3bb0feecae553fe9a3ab37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14ddd2a181950ca10a3bb0feecae553fe9a3ab37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14ddd2a181950ca10a3bb0feecae553fe9a3ab37"}], "stats": {"total": 70, "additions": 43, "deletions": 27}, "files": [{"sha": "072823f5783fbda8363a4ed3746be01d35ba3cff", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373eb3b3b1bc8ceb67c43ada7efd1afa3ee7813f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373eb3b3b1bc8ceb67c43ada7efd1afa3ee7813f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=373eb3b3b1bc8ceb67c43ada7efd1afa3ee7813f", "patch": "@@ -1,3 +1,13 @@\n+1999-12-09  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* dump.c (dequeue_and_dump): Abbreviate `class' as `cls', not\n+\t`csl'.\n+\n+\t* semantics.c (finish_switch_cond): Do conversions here, not ...\n+\t* typeck.c (c_expand_start_case): Here.\n+\n+\t* semantics.c (do_poplevel): Remove unused variable.\n+\t\n 1999-12-06  Mark Mitchell  <mark@codesourcery.com>\n \n \t* tree.c (walk_tree): Don't recurse into DECL_INITIAL or DECL_SIZE"}, {"sha": "c042f0a26df754efefc2902d4881fb920dc2dfff", "filename": "gcc/cp/dump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373eb3b3b1bc8ceb67c43ada7efd1afa3ee7813f/gcc%2Fcp%2Fdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373eb3b3b1bc8ceb67c43ada7efd1afa3ee7813f/gcc%2Fcp%2Fdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdump.c?ref=373eb3b3b1bc8ceb67c43ada7efd1afa3ee7813f", "patch": "@@ -482,7 +482,7 @@ dequeue_and_dump (di)\n \t{\n \t  dump_string (di, \"ptrmem\");\n \t  dump_child (\"ptd\", TYPE_PTRMEM_POINTED_TO_TYPE (t));\n-\t  dump_child (\"csl\", TYPE_PTRMEM_CLASS_TYPE (t));\n+\t  dump_child (\"cls\", TYPE_PTRMEM_CLASS_TYPE (t));\n \t}\n       else\n \tdump_child (\"ptd\", TREE_TYPE (t));"}, {"sha": "8637e3b670a9fd2b252202b08f25293d7f51d900", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373eb3b3b1bc8ceb67c43ada7efd1afa3ee7813f/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373eb3b3b1bc8ceb67c43ada7efd1afa3ee7813f/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=373eb3b3b1bc8ceb67c43ada7efd1afa3ee7813f", "patch": "@@ -592,7 +592,37 @@ finish_switch_cond (cond, switch_stmt)\n      tree switch_stmt;\n {\n   if (building_stmt_tree ())\n-    FINISH_COND (cond, switch_stmt, SWITCH_COND (switch_stmt));\n+    {\n+      if (!processing_template_decl)\n+\t{\n+\t  /* Convert the condition to an integer or enumeration type.  */\n+\t  cond = build_expr_type_conversion (WANT_INT | WANT_ENUM, cond, 1);\n+\t  if (cond == NULL_TREE)\n+\t    {\n+\t      error (\"switch quantity not an integer\");\n+\t      cond = error_mark_node;\n+\t    }\n+\t  if (cond != error_mark_node)\n+\t    {\n+\t      tree idx;\n+\t      tree type;\n+\t      \n+\t      cond = default_conversion (cond);\n+\t      type = TREE_TYPE (cond);\n+\t      idx = get_unwidened (cond, 0);\n+\t      /* We can't strip a conversion from a signed type to an unsigned,\n+\t\t because if we did, int_fits_type_p would do the wrong thing\n+\t\t when checking case values for being in range,\n+\t\t and it's too hard to do the right thing.  */\n+\t      if (TREE_UNSIGNED (TREE_TYPE (cond)) \n+\t\t  == TREE_UNSIGNED (TREE_TYPE (idx)))\n+\t\tcond = idx;\n+\n+\t      cond = fold (build1 (CLEANUP_POINT_EXPR, type, cond));\n+\t    }\n+\t}\n+      FINISH_COND (cond, switch_stmt, SWITCH_COND (switch_stmt));\n+    }\n   else if (cond != error_mark_node)\n     {\n       emit_line_note (input_filename, lineno);\n@@ -1337,7 +1367,6 @@ do_poplevel ()\n   if (stmts_are_full_exprs_p)\n     {\n       tree scope_stmts;\n-      int keep = kept_level_p ();\n \n       if (building_stmt_tree () && !processing_template_decl)\n \tscope_stmts = add_scope_stmt (/*begin_p=*/0, /*partial_p=*/0);"}, {"sha": "7325653c8002f15bfb3fd36339390a8929d1887f", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373eb3b3b1bc8ceb67c43ada7efd1afa3ee7813f/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373eb3b3b1bc8ceb67c43ada7efd1afa3ee7813f/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=373eb3b3b1bc8ceb67c43ada7efd1afa3ee7813f", "patch": "@@ -6874,30 +6874,7 @@ tree\n c_expand_start_case (exp)\n      tree exp;\n {\n-  tree type, idx;\n-\n-  exp = build_expr_type_conversion (WANT_INT | WANT_ENUM, exp, 1);\n-  if (exp == NULL_TREE)\n-    {\n-      error (\"switch quantity not an integer\");\n-      exp = error_mark_node;\n-    }\n-  if (exp == error_mark_node)\n-    return error_mark_node;\n-\n-  exp = default_conversion (exp);\n-  type = TREE_TYPE (exp);\n-  idx = get_unwidened (exp, 0);\n-  /* We can't strip a conversion from a signed type to an unsigned,\n-     because if we did, int_fits_type_p would do the wrong thing\n-     when checking case values for being in range,\n-     and it's too hard to do the right thing.  */\n-  if (TREE_UNSIGNED (TREE_TYPE (exp)) == TREE_UNSIGNED (TREE_TYPE (idx)))\n-    exp = idx;\n-\n-  expand_start_case\n-    (1, fold (build1 (CLEANUP_POINT_EXPR, TREE_TYPE (exp), exp)),\n-     type, \"switch statement\");\n+  expand_start_case (1, exp, TREE_TYPE (exp), \"switch statement\");\n \n   return exp;\n }"}]}