{"sha": "55a6ba9ff30131802ac5896dfc3807cce3e97e09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTVhNmJhOWZmMzAxMzE4MDJhYzU4OTZkZmMzODA3Y2NlM2U5N2UwOQ==", "commit": {"author": {"name": "John Carr", "email": "jfc@mit.edu", "date": "1998-06-24T13:32:56Z"}, "committer": {"name": "John Carr", "email": "jfc@gcc.gnu.org", "date": "1998-06-24T13:32:56Z"}, "message": "expr.c (get_memory_rtx): New function.\n\n\t* expr.c (get_memory_rtx): New function.\n\t(expand_builtin): Call get_memory_rtx for MEM arguments to builtin\n\tstring functions.\n\t* expmed.c (init_expmed): Initialize all elements of *_cost arrays.\n\nFrom-SVN: r20700", "tree": {"sha": "def34a1d770f2055f440961a60928083abb82ee8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/def34a1d770f2055f440961a60928083abb82ee8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55a6ba9ff30131802ac5896dfc3807cce3e97e09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55a6ba9ff30131802ac5896dfc3807cce3e97e09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55a6ba9ff30131802ac5896dfc3807cce3e97e09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55a6ba9ff30131802ac5896dfc3807cce3e97e09/comments", "author": {"login": "VoxSciurorum", "id": 60116679, "node_id": "MDQ6VXNlcjYwMTE2Njc5", "avatar_url": "https://avatars.githubusercontent.com/u/60116679?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VoxSciurorum", "html_url": "https://github.com/VoxSciurorum", "followers_url": "https://api.github.com/users/VoxSciurorum/followers", "following_url": "https://api.github.com/users/VoxSciurorum/following{/other_user}", "gists_url": "https://api.github.com/users/VoxSciurorum/gists{/gist_id}", "starred_url": "https://api.github.com/users/VoxSciurorum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VoxSciurorum/subscriptions", "organizations_url": "https://api.github.com/users/VoxSciurorum/orgs", "repos_url": "https://api.github.com/users/VoxSciurorum/repos", "events_url": "https://api.github.com/users/VoxSciurorum/events{/privacy}", "received_events_url": "https://api.github.com/users/VoxSciurorum/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "135edcfd71681785d1ff73c619135f7e9de446bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/135edcfd71681785d1ff73c619135f7e9de446bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/135edcfd71681785d1ff73c619135f7e9de446bc"}], "stats": {"total": 118, "additions": 70, "deletions": 48}, "files": [{"sha": "42f24ca98b2b78422a91b8a25f5e60790b8e6d0e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55a6ba9ff30131802ac5896dfc3807cce3e97e09/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55a6ba9ff30131802ac5896dfc3807cce3e97e09/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=55a6ba9ff30131802ac5896dfc3807cce3e97e09", "patch": "@@ -1,3 +1,11 @@\n+Wed Jun 24 16:27:23 1998  John Carr  <jfc@mit.edu>\n+\n+\t* expr.c (get_memory_rtx): New function.\n+\t(expand_builtin): Call get_memory_rtx for MEM arguments to builtin\n+\tstring functions.\n+\n+\t* expmed.c (init_expmed): Initialize all elements of *_cost arrays.\n+\n Wed Jun 24 15:13:01 1998  Dave Brolley  <brolley@cygnus.com>\n \n \t* README.gnat: Add patch for new lang_decode_options interface."}, {"sha": "17a9af7a5826d68241a19e296833426aca3bc593", "filename": "gcc/expmed.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55a6ba9ff30131802ac5896dfc3807cce3e97e09/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55a6ba9ff30131802ac5896dfc3807cce3e97e09/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=55a6ba9ff30131802ac5896dfc3807cce3e97e09", "patch": "@@ -122,7 +122,7 @@ init_expmed ()\n   shift_cost[0] = 0;\n   shiftadd_cost[0] = shiftsub_cost[0] = add_cost;\n \n-  for (m = 1; m < BITS_PER_WORD; m++)\n+  for (m = 1; m < MAX_BITS_PER_WORD; m++)\n     {\n       shift_cost[m] = shiftadd_cost[m] = shiftsub_cost[m] = 32000;\n "}, {"sha": "b429bcc60cf3cc0a5cb2a19f9ae8df073bd72423", "filename": "gcc/expr.c", "status": "modified", "additions": 61, "deletions": 47, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55a6ba9ff30131802ac5896dfc3807cce3e97e09/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55a6ba9ff30131802ac5896dfc3807cce3e97e09/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=55a6ba9ff30131802ac5896dfc3807cce3e97e09", "patch": "@@ -175,6 +175,7 @@ static rtx var_rtx\t\tPROTO((tree));\n static int get_pointer_alignment PROTO((tree, unsigned));\n static tree string_constant\tPROTO((tree, tree *));\n static tree c_strlen\t\tPROTO((tree));\n+static rtx get_memory_rtx\tPROTO((tree));\n static rtx expand_builtin\tPROTO((tree, rtx, rtx,\n \t\t\t\t       enum machine_mode, int));\n static int apply_args_size\tPROTO((void));\n@@ -8021,6 +8022,54 @@ expand_builtin_longjmp (buf_addr, value)\n     }\n }\n \n+static rtx\n+get_memory_rtx (exp)\n+     tree exp;\n+{\n+  rtx mem;\n+  int is_aggregate;\n+\n+  mem = gen_rtx_MEM (BLKmode,\n+\t\t     memory_address (BLKmode,\n+\t\t\t\t     expand_expr (exp, NULL_RTX,\n+\t\t\t\t\t\t  ptr_mode, EXPAND_SUM)));\n+\n+  RTX_UNCHANGING_P (mem) = TREE_READONLY (exp);\n+\n+  /* Figure out the type of the object pointed to.  Set MEM_IN_STRUCT_P\n+     if the value is the address of a structure or if the expression is\n+     cast to a pointer to structure type.  */\n+  is_aggregate = 0;\n+\n+  while (TREE_CODE (exp) == NOP_EXPR)\n+    {\n+      tree cast_type = TREE_TYPE (exp);\n+      if (TREE_CODE (cast_type) == POINTER_TYPE\n+\t  && AGGREGATE_TYPE_P (TREE_TYPE (cast_type)))\n+\t{\n+\t  is_aggregate = 1;\n+\t  break;\n+\t}\n+      exp = TREE_OPERAND (exp, 0);\n+    }\n+\n+  if (is_aggregate == 0)\n+    {\n+      tree type;\n+\n+      if (TREE_CODE (exp) == ADDR_EXPR)\n+\t/* If this is the address of an object, check whether the\n+\t   object is an array.  */\n+\ttype = TREE_TYPE (TREE_OPERAND (exp, 0));\n+      else\n+\ttype = TREE_TYPE (TREE_TYPE (exp));\n+      is_aggregate = AGGREGATE_TYPE_P (type);\n+    }\n+\n+  MEM_IN_STRUCT_P (mem) = is_aggregate;\n+  return mem;\n+}\n+\n \f\n /* Expand an expression EXP that calls a built-in function,\n    with result going to TARGET if that's convenient\n@@ -8675,7 +8724,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t    = get_pointer_alignment (src, BIGGEST_ALIGNMENT) / BITS_PER_UNIT;\n \t  int dest_align\n \t    = get_pointer_alignment (dest, BIGGEST_ALIGNMENT) / BITS_PER_UNIT;\n-\t  rtx dest_rtx, dest_mem, src_mem, src_rtx, dest_addr, len_rtx;\n+\t  rtx dest_mem, src_mem, dest_addr, len_rtx;\n \n \t  /* If either SRC or DEST is not a pointer type, don't do\n \t     this operation in-line.  */\n@@ -8686,39 +8735,24 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t      break;\n \t    }\n \n-\t  dest_rtx = expand_expr (dest, NULL_RTX, ptr_mode, EXPAND_SUM);\n-\t  dest_mem = gen_rtx_MEM (BLKmode,\n-\t\t\t\t  memory_address (BLKmode, dest_rtx));\n-\t  /* There could be a void* cast on top of the object.  */\n-\t  while (TREE_CODE (dest) == NOP_EXPR)\n-\t    dest = TREE_OPERAND (dest, 0);\n-\t  type = TREE_TYPE (TREE_TYPE (dest));\n-\t  MEM_IN_STRUCT_P (dest_mem) = AGGREGATE_TYPE_P (type);\n-\t  src_rtx = expand_expr (src, NULL_RTX, ptr_mode, EXPAND_SUM);\n-\t  src_mem = gen_rtx_MEM (BLKmode,\n-\t\t\t\t memory_address (BLKmode, src_rtx));\n+\t  dest_mem = get_memory_rtx (dest);\n+\t  src_mem = get_memory_rtx (src);\n \t  len_rtx = expand_expr (len, NULL_RTX, VOIDmode, 0);\n \n \t  /* Just copy the rights of SRC to the rights of DEST.  */\n \t  if (flag_check_memory_usage)\n \t    emit_library_call (chkr_copy_bitmap_libfunc, 1, VOIDmode, 3,\n-\t\t\t       dest_rtx, ptr_mode,\n-\t\t\t       src_rtx, ptr_mode,\n+\t\t\t       XEXP (dest_mem, 0), ptr_mode,\n+\t\t\t       XEXP (src_mem, 0), ptr_mode,\n \t\t\t       len_rtx, TYPE_MODE (sizetype));\n \n-\t  /* There could be a void* cast on top of the object.  */\n-\t  while (TREE_CODE (src) == NOP_EXPR)\n-\t    src = TREE_OPERAND (src, 0);\n-\t  type = TREE_TYPE (TREE_TYPE (src));\n-\t  MEM_IN_STRUCT_P (src_mem) = AGGREGATE_TYPE_P (type);\n-\n \t  /* Copy word part most expediently.  */\n \t  dest_addr\n \t    = emit_block_move (dest_mem, src_mem, len_rtx,\n \t\t\t       MIN (src_align, dest_align));\n \n \t  if (dest_addr == 0)\n-\t    dest_addr = force_operand (dest_rtx, NULL_RTX);\n+\t    dest_addr = force_operand (XEXP (dest_mem, 0), NULL_RTX);\n \n \t  return dest_addr;\n \t}\n@@ -8749,7 +8783,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \n \t  int dest_align\n \t    = get_pointer_alignment (dest, BIGGEST_ALIGNMENT) / BITS_PER_UNIT;\n-\t  rtx dest_rtx, dest_mem, dest_addr, len_rtx;\n+\t  rtx dest_mem, dest_addr, len_rtx;\n \n \t  /* If DEST is not a pointer type, don't do this \n \t     operation in-line.  */\n@@ -8775,34 +8809,21 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t  if (GET_CODE (len_rtx) != CONST_INT)\n \t    break;\n \n-\t  dest_rtx = expand_expr (dest, NULL_RTX, ptr_mode, EXPAND_SUM);\n-\t  dest_mem = gen_rtx_MEM (BLKmode,\n-\t\t\t\t  memory_address (BLKmode, dest_rtx));\n+\t  dest_mem = get_memory_rtx (dest);\n \t   \n \t  /* Just check DST is writable and mark it as readable.  */\n \t  if (flag_check_memory_usage)\n \t    emit_library_call (chkr_check_addr_libfunc, 1, VOIDmode, 3,\n-\t\t\t       dest_rtx, ptr_mode,\n+\t\t\t       XEXP (dest_mem, 0), ptr_mode,\n \t\t\t       len_rtx, TYPE_MODE (sizetype),\n \t\t\t       GEN_INT (MEMORY_USE_WO),\n \t\t\t       TYPE_MODE (integer_type_node));\n \n-\t  /* There could be a void* cast on top of the object.  */\n-\t  while (TREE_CODE (dest) == NOP_EXPR)\n-\t    dest = TREE_OPERAND (dest, 0);\n-\n-\t  if (TREE_CODE (dest) == ADDR_EXPR)\n-\t    /* If this is the address of an object, check whether the\n-\t       object is an array.  */\n-\t    type = TREE_TYPE (TREE_OPERAND (dest, 0));\n-\t  else\n-\t    type = TREE_TYPE (TREE_TYPE (dest));\n-\t  MEM_IN_STRUCT_P (dest_mem) = AGGREGATE_TYPE_P (type);\n \n \t  dest_addr = clear_storage (dest_mem, len_rtx, dest_align);\n \n \t  if (dest_addr == 0)\n-\t    dest_addr = force_operand (dest_rtx, NULL_RTX);\n+\t    dest_addr = force_operand (XEXP (dest_mem, 0), NULL_RTX);\n \n \t  return dest_addr;\n \t}\n@@ -8914,15 +8935,8 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t       && REGNO (result) >= FIRST_PSEUDO_REGISTER))\n \t  result = gen_reg_rtx (insn_mode);\n \n-\temit_insn (gen_cmpstrsi (result,\n-\t\t\t\t gen_rtx_MEM (BLKmode,\n-\t\t\t\t\t      expand_expr (arg1, NULL_RTX,\n-\t\t\t\t\t\t\t   ptr_mode,\n-\t\t\t\t\t\t\t   EXPAND_NORMAL)),\n-\t\t\t\t gen_rtx_MEM (BLKmode,\n-\t\t\t\t\t      expand_expr (arg2, NULL_RTX,\n-\t\t\t\t\t\t\t   ptr_mode,\n-\t\t\t\t\t\t\t   EXPAND_NORMAL)),\n+\temit_insn (gen_cmpstrsi (result, get_memory_rtx (arg1),\n+\t\t\t\t get_memory_rtx (arg2),\n \t\t\t\t expand_expr (len, NULL_RTX, VOIDmode, 0),\n \t\t\t\t GEN_INT (MIN (arg1_align, arg2_align))));\n "}]}