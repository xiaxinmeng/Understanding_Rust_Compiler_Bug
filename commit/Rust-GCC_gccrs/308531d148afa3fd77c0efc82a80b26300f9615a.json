{"sha": "308531d148afa3fd77c0efc82a80b26300f9615a", "node_id": "C_kwDOANBUbNoAKDMwODUzMWQxNDhhZmEzZmQ3N2MwZWZjODJhODBiMjYzMDBmOTYxNWE", "commit": {"author": {"name": "Stafford Horne", "email": "shorne@gmail.com", "date": "2021-10-27T21:54:05Z"}, "committer": {"name": "Stafford Horne", "email": "shorne@gmail.com", "date": "2021-10-28T20:31:38Z"}, "message": "or1k: Add return address argument to _mcount call\n\nThis fixes an issue in the glibc port I am working on where the build\nfails due to the warning:\n\n  error: calling \u2018__builtin_return_address\u2019 with a nonzero argument is unsafe [-Werror=frame-address]\n\nThis is due to how the current implementation of _mcount in glibc uses\n__builtin_return_address with a count argument of 1.\n\nFix that by passing the value of LR_REGNUM to the _mcount function,\neffectivtly providing the value _mcount is after.\n\nThis is an ABI change, but I think it's OK because the glibc port for\nor1k is not yet upstreamed.  Also, I think just adding an argument\nshould not break anything anyway.\n\ngcc/ChangeLog:\n\n\t* config/or1k/or1k.h (PROFILE_HOOK): Add return address argument\n\tto _mcount.", "tree": {"sha": "30d637161691dd33fee4ee2d2a0a7c3e2f87878f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30d637161691dd33fee4ee2d2a0a7c3e2f87878f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/308531d148afa3fd77c0efc82a80b26300f9615a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/308531d148afa3fd77c0efc82a80b26300f9615a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/308531d148afa3fd77c0efc82a80b26300f9615a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/308531d148afa3fd77c0efc82a80b26300f9615a/comments", "author": {"login": "stffrdhrn", "id": 2404255, "node_id": "MDQ6VXNlcjI0MDQyNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/2404255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stffrdhrn", "html_url": "https://github.com/stffrdhrn", "followers_url": "https://api.github.com/users/stffrdhrn/followers", "following_url": "https://api.github.com/users/stffrdhrn/following{/other_user}", "gists_url": "https://api.github.com/users/stffrdhrn/gists{/gist_id}", "starred_url": "https://api.github.com/users/stffrdhrn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stffrdhrn/subscriptions", "organizations_url": "https://api.github.com/users/stffrdhrn/orgs", "repos_url": "https://api.github.com/users/stffrdhrn/repos", "events_url": "https://api.github.com/users/stffrdhrn/events{/privacy}", "received_events_url": "https://api.github.com/users/stffrdhrn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "stffrdhrn", "id": 2404255, "node_id": "MDQ6VXNlcjI0MDQyNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/2404255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stffrdhrn", "html_url": "https://github.com/stffrdhrn", "followers_url": "https://api.github.com/users/stffrdhrn/followers", "following_url": "https://api.github.com/users/stffrdhrn/following{/other_user}", "gists_url": "https://api.github.com/users/stffrdhrn/gists{/gist_id}", "starred_url": "https://api.github.com/users/stffrdhrn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stffrdhrn/subscriptions", "organizations_url": "https://api.github.com/users/stffrdhrn/orgs", "repos_url": "https://api.github.com/users/stffrdhrn/repos", "events_url": "https://api.github.com/users/stffrdhrn/events{/privacy}", "received_events_url": "https://api.github.com/users/stffrdhrn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6123b998b185572abac7d7224b34f03955bb91a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6123b998b185572abac7d7224b34f03955bb91a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6123b998b185572abac7d7224b34f03955bb91a2"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "8a529f4c67c96aa679da6b83a4f39bb9d8327c8f", "filename": "gcc/config/or1k/or1k.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/308531d148afa3fd77c0efc82a80b26300f9615a/gcc%2Fconfig%2For1k%2For1k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/308531d148afa3fd77c0efc82a80b26300f9615a/gcc%2Fconfig%2For1k%2For1k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2For1k%2For1k.h?ref=308531d148afa3fd77c0efc82a80b26300f9615a", "patch": "@@ -394,9 +394,10 @@ do {                                                    \\\n    profiling a function entry.  */\n #define PROFILE_HOOK(LABEL)\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    rtx fun;\t\t\t\t\t\t\t\t\\\n+    rtx fun, ra;\t\t\t\t\t\t\t\\\n+    ra = get_hard_reg_initial_val (Pmode, LR_REGNUM);\t\t\t\\\n     fun = gen_rtx_SYMBOL_REF (Pmode, \"_mcount\");\t\t\t\\\n-    emit_library_call (fun, LCT_NORMAL, VOIDmode);\t\t\t\\\n+    emit_library_call (fun, LCT_NORMAL, VOIDmode, ra, Pmode);\t\t\\\n   }\n \n /* All the work is done in PROFILE_HOOK, but this is still required.  */"}]}