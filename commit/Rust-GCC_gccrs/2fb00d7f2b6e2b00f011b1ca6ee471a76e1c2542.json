{"sha": "2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZiMDBkN2YyYjZlMmIwMGYwMTFiMWNhNmVlNDcxYTc2ZTFjMjU0Mg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-02-03T05:15:46Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-02-03T05:15:46Z"}, "message": "combine.c (simplify_set): Use gen_rtx_fmt_e instead of gen_rtx.\n\n\tgcc/\n\t* combine.c (simplify_set): Use gen_rtx_fmt_e instead of\n\tgen_rtx.\n\t* emit-rtl.c (init_emit_once): Use gen_rtx_PC and gen_rtx_CC0\n\tinstead of gen_rtx.\n\t* reload1.c (init_elim_table): Use gen_rtx_fmt_e instead of\n\tgen_rtx.\n\t* config/ns32k/ns32k.md (udivmodhi4): Use gen_rtx_IOR and\n\tgen_rtx_ASHIFT instead of gen_rtx.\n\t(udivmodqi4): Likewise.\n\n\tada/\n\t* ada/trans.c (gigi): Use gen_rtx_SYMBOL_REF instead of\n\tgen_rtx.\n\n\tf/\n\t* com.c (ffecom_member_phase2_): Use gen_rtx_MEM instead of\n\tgen_rtx.\n\nFrom-SVN: r77159", "tree": {"sha": "815ba2fac08ede335bba5d3548df20425649e20e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/815ba2fac08ede335bba5d3548df20425649e20e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542/comments", "author": null, "committer": null, "parents": [{"sha": "b0dccb002204bff9f017d83584f3a516e703825e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0dccb002204bff9f017d83584f3a516e703825e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0dccb002204bff9f017d83584f3a516e703825e"}], "stats": {"total": 64, "additions": 44, "deletions": 20}, "files": [{"sha": "c440da33089ee777bec3185cf3fb51bcd88151bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542", "patch": "@@ -1,3 +1,15 @@\n+2004-02-03  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* combine.c (simplify_set): Use gen_rtx_fmt_e instead of\n+\tgen_rtx.\n+\t* emit-rtl.c (init_emit_once): Use gen_rtx_PC and gen_rtx_CC0\n+\tinstead of gen_rtx.\n+\t* reload1.c (init_elim_table): Use gen_rtx_fmt_e instead of\n+\tgen_rtx.\n+\t* config/ns32k/ns32k.md (udivmodhi4): Use gen_rtx_IOR and\n+\tgen_rtx_ASHIFT instead of gen_rtx.\n+\t(udivmodqi4): Likewise.\n+\n 2004-02-02  Richard Henderson  <rth@redhat.com>\n \n         PR target/13789"}, {"sha": "b69ba8622bcde767753528a98bcb0bdfd696e3a4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542", "patch": "@@ -1,3 +1,8 @@\n+2004-02-03  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* ada/trans.c (gigi): Use gen_rtx_SYMBOL_REF instead of\n+\tgen_rtx.\n+\n 2004-02-02  Arnaud Charlet  <charlet@gnat.com>\n \n \t* Makefile.in: Remove setting of THREADSLIB on mips o32, unneeded."}, {"sha": "d11742df3e45bcd5bf510df59c84b40e2cd05da0", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542", "patch": "@@ -186,7 +186,7 @@ gigi (Node_Id gnat_root,\n \n   /* Enable GNAT stack checking method if needed */\n   if (!Stack_Check_Probes_On_Target)\n-    set_stack_check_libfunc (gen_rtx (SYMBOL_REF, Pmode, \"_gnat_stack_check\"));\n+    set_stack_check_libfunc (gen_rtx_SYMBOL_REF (Pmode, \"_gnat_stack_check\"));\n \n   /* Save the type we made for integer as the type for Standard.Integer.\n      Then make the rest of the standard types.  Note that some of these"}, {"sha": "14cd64b1e697351fd98a726f0fe0981b0711fee5", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542", "patch": "@@ -5200,8 +5200,8 @@ simplify_set (rtx x)\n       && GET_CODE (SUBREG_REG (src)) == MEM)\n     {\n       SUBST (SET_SRC (x),\n-\t     gen_rtx (LOAD_EXTEND_OP (GET_MODE (SUBREG_REG (src))),\n-\t\t      GET_MODE (src), SUBREG_REG (src)));\n+\t     gen_rtx_fmt_e (LOAD_EXTEND_OP (GET_MODE (SUBREG_REG (src))),\n+\t\t\t    GET_MODE (src), SUBREG_REG (src)));\n \n       src = SET_SRC (x);\n     }"}, {"sha": "987625d95ccc82ce1d303940f25cff9c4ef2bfce", "filename": "gcc/config/ns32k/ns32k.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542/gcc%2Fconfig%2Fns32k%2Fns32k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542/gcc%2Fconfig%2Fns32k%2Fns32k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.md?ref=2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542", "patch": "@@ -1322,8 +1322,8 @@\n ;;\t\t\t         REG_NOTES (first));\n ;;    REG_NOTES (last) = gen_rtx_INSN_LIST (REG_RETVAL, first,\n ;;                                gen_rtx_EXPR_LIST (REG_EQUAL,\n-;;                       gen_rtx(IOR, DImode, moddi,\n-;;                               gen_rtx(ASHIFT, DImode, divdi, GEN_INT(32))),\n+;;                       gen_rtx_IOR (DImode, moddi,\n+;;                                    gen_rtx_ASHIFT (DImode, divdi, GEN_INT(32))),\n ;;                       REG_NOTES (last)));\n ;;  }\n ;;\n@@ -1379,8 +1379,8 @@\n ;;\t\t\t         REG_NOTES (first));\n ;;    REG_NOTES (last) = gen_rtx_INSN_LIST (REG_RETVAL, first,\n ;;                                gen_rtx_EXPR_LIST (REG_EQUAL,\n-;;                       gen_rtx(IOR, DImode, moddi,\n-;;                               gen_rtx(ASHIFT, DImode, divdi, GEN_INT(32))),\n+;;                       gen_rtx_IOR (DImode, moddi,\n+;;                                    gen_rtx_ASHIFT (DImode, divdi, GEN_INT(32))),\n ;;                       REG_NOTES (last)));\n ;;  }\n ;;"}, {"sha": "3deefe8218fcd34006d695e57a627e1966f1ca5c", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542", "patch": "@@ -5355,8 +5355,8 @@ init_emit_once (int line_numbers)\n      This must be done at runtime because the register number field\n      is in a union and some compilers can't initialize unions.  */\n \n-  pc_rtx = gen_rtx (PC, VOIDmode);\n-  cc0_rtx = gen_rtx (CC0, VOIDmode);\n+  pc_rtx = gen_rtx_PC (VOIDmode);\n+  cc0_rtx = gen_rtx_CC0 (VOIDmode);\n   stack_pointer_rtx = gen_raw_REG (Pmode, STACK_POINTER_REGNUM);\n   frame_pointer_rtx = gen_raw_REG (Pmode, FRAME_POINTER_REGNUM);\n   if (hard_frame_pointer_rtx == 0)"}, {"sha": "2677242a6a24c20e488450f24cf5f4ca891a5c9a", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542", "patch": "@@ -1,3 +1,8 @@\n+2004-02-03  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* com.c (ffecom_member_phase2_): Use gen_rtx_MEM instead of\n+\tgen_rtx.\n+\n 2004-01-30  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* Make-lang.in (doc/g77.dvi): Use $(abs_docdir). "}, {"sha": "5309b84f4d2af1f200113b7c4280163c9b2871e5", "filename": "gcc/f/com.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542", "patch": "@@ -1,5 +1,5 @@\n /* com.c -- Implementation File (module.c template V1.0)\n-   Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+   Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n    Free Software Foundation, Inc.\n    Contributed by James Craig Burley.\n \n@@ -6906,11 +6906,11 @@ ffecom_member_phase2_ (ffestorag mst, ffestorag st)\n   TREE_USED (t) = 1;\n \n   SET_DECL_RTL (t,\n-\t\tgen_rtx (MEM, TYPE_MODE (type),\n-\t\t\t plus_constant (XEXP (DECL_RTL (mt), 0),\n-\t\t\t\t\tffestorag_modulo (mst)\n-\t\t\t\t\t+ ffestorag_offset (st)\n-\t\t\t\t\t- ffestorag_offset (mst))));\n+\t\tgen_rtx_MEM (TYPE_MODE (type),\n+\t\t\t     plus_constant (XEXP (DECL_RTL (mt), 0),\n+\t\t\t\t\t    ffestorag_modulo (mst)\n+\t\t\t\t\t    + ffestorag_offset (st)\n+\t\t\t\t\t    - ffestorag_offset (mst))));\n \n   t = start_decl (t, FALSE);\n "}, {"sha": "c24f4ac7be0c3408a2f2c2a6d7fc508f2279037f", "filename": "gcc/reload1.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542", "patch": "@@ -3477,7 +3477,7 @@ init_elim_table (void)\n #endif\n \n   /* Count the number of eliminable registers and build the FROM and TO\n-     REG rtx's.  Note that code in gen_rtx will cause, e.g.,\n+     REG rtx's.  Note that code in gen_rtx_REG will cause, e.g.,\n      gen_rtx_REG (Pmode, STACK_POINTER_REGNUM) to equal stack_pointer_rtx.\n      We depend on this.  */\n   for (ep = reg_eliminate; ep < &reg_eliminate[NUM_ELIMINABLE_REGS]; ep++)\n@@ -3932,8 +3932,9 @@ reload_as_needed (int live_known)\n \t\t\t  if (n == 1)\n \t\t\t    {\n \t\t\t      n = validate_replace_rtx (reload_reg,\n-\t\t\t\t\t\t\tgen_rtx (code, mode,\n-\t\t\t\t\t\t\t\t reload_reg),\n+\t\t\t\t\t\t\tgen_rtx_fmt_e (code,\n+\t\t\t\t\t\t\t\t       mode,\n+\t\t\t\t\t\t\t\t       reload_reg),\n \t\t\t\t\t\t\tp);\n \n \t\t\t      /* We must also verify that the constraints\n@@ -3948,8 +3949,9 @@ reload_as_needed (int live_known)\n \t\t\t\t undo the replacement.  */\n \t\t\t      if (!n)\n \t\t\t\t{\n-\t\t\t\t  validate_replace_rtx (gen_rtx (code, mode,\n-\t\t\t\t\t\t\t\t reload_reg),\n+\t\t\t\t  validate_replace_rtx (gen_rtx_fmt_e (code,\n+\t\t\t\t\t\t\t\t       mode,\n+\t\t\t\t\t\t\t\t       reload_reg),\n \t\t\t\t\t\t\treload_reg, p);\n \t\t\t\t  break;\n \t\t\t\t}"}]}