{"sha": "a895a2b8a98464a019e6407e71769eb8aed99013", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg5NWEyYjhhOTg0NjRhMDE5ZTY0MDdlNzE3NjllYjhhZWQ5OTAxMw==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2013-09-23T15:13:39Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2013-09-23T15:13:39Z"}, "message": "gimple-pretty-print.c (dump_ssaname_info): New function.\n\n2013-09-23  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\tgcc/\n\t* gimple-pretty-print.c (dump_ssaname_info): New function.\n\t(dump_gimple_phi): Call it.\n\t(pp_gimple_stmt_1): Likewise.\n\t* tree-core.h (tree_ssa_name): New union ssa_name_info_type field.\n\t(range_info_def): Declare.\n\t* tree-pretty-print.c (pp_double_int): New function.\n\t(dump_generic_node): Call it.\n\t* tree-pretty-print.h (pp_double_int): Declare.\n\t* tree-ssa-alias.c (dump_alias_info): Check pointer type.\n\t* tree-ssanames.h (range_info_def): New structure.\n\t(value_range_type): Move definition here.\n\t(set_range_info, value_range_type, duplicate_ssa_name_range_info):\n\tDeclare.\n\t* tree-ssanames.c (make_ssa_name_fn): Check pointer type at\n\tinitialization.\n\t(set_range_info): New function.\n\t(get_range_info): Likewise.\n\t(duplicate_ssa_name_range_info): Likewise.\n\t(duplicate_ssa_name_fn): Check pointer type and call\n\tduplicate_ssa_name_range_info.\n\t* tree-ssa-copy.c (fini_copy_prop): Likewise.\n\t* tree-vrp.c (value_range_type): Remove definition, now in\n\ttree-ssanames.h.\n\t(vrp_finalize): Call set_range_info to update value range of\n\tSSA_NAMEs.\n\t* tree.h (SSA_NAME_PTR_INFO): Macro changed to access via union.\n\t(SSA_NAME_RANGE_INFO): New macro.\n\nFrom-SVN: r202831", "tree": {"sha": "f8aeebb9d4ef8b224568c677be438c4daa431b63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8aeebb9d4ef8b224568c677be438c4daa431b63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a895a2b8a98464a019e6407e71769eb8aed99013", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a895a2b8a98464a019e6407e71769eb8aed99013", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a895a2b8a98464a019e6407e71769eb8aed99013", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a895a2b8a98464a019e6407e71769eb8aed99013/comments", "author": null, "committer": null, "parents": [{"sha": "984af6ac7579a3bc589401cf6d8651e98d0e9eb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/984af6ac7579a3bc589401cf6d8651e98d0e9eb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/984af6ac7579a3bc589401cf6d8651e98d0e9eb7"}], "stats": {"total": 363, "additions": 293, "deletions": 70}, "files": [{"sha": "026a560fff07e7de8276cce6655fdf0bc06e38d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a895a2b8a98464a019e6407e71769eb8aed99013/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a895a2b8a98464a019e6407e71769eb8aed99013/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a895a2b8a98464a019e6407e71769eb8aed99013", "patch": "@@ -1,3 +1,33 @@\n+2013-09-23  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\t* gimple-pretty-print.c (dump_ssaname_info): New function.\n+\t(dump_gimple_phi): Call it.\n+\t(pp_gimple_stmt_1): Likewise.\n+\t* tree-core.h (tree_ssa_name): New union ssa_name_info_type field.\n+\t(range_info_def): Declare.\n+\t* tree-pretty-print.c (pp_double_int): New function.\n+\t(dump_generic_node): Call it.\n+\t* tree-pretty-print.h (pp_double_int): Declare.\n+\t* tree-ssa-alias.c (dump_alias_info): Check pointer type.\n+\t* tree-ssanames.h (range_info_def): New structure.\n+\t(value_range_type): Move definition here.\n+\t(set_range_info, value_range_type, duplicate_ssa_name_range_info):\n+\tDeclare.\n+\t* tree-ssanames.c (make_ssa_name_fn): Check pointer type at\n+\tinitialization.\n+\t(set_range_info): New function.\n+\t(get_range_info): Likewise.\n+\t(duplicate_ssa_name_range_info): Likewise.\n+\t(duplicate_ssa_name_fn): Check pointer type and call\n+\tduplicate_ssa_name_range_info.\n+\t* tree-ssa-copy.c (fini_copy_prop): Likewise.\n+\t* tree-vrp.c (value_range_type): Remove definition, now in\n+\ttree-ssanames.h.\n+\t(vrp_finalize): Call set_range_info to update value range of\n+\tSSA_NAMEs.\n+\t* tree.h (SSA_NAME_PTR_INFO): Macro changed to access via union.\n+\t(SSA_NAME_RANGE_INFO): New macro.\n+\n 2013-09-23  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/58464\n@@ -27,7 +57,6 @@\n \t(aarch64_expand_epilogue): Likewise.\n \t(aarch64_legitimize_reload_address): Likewise.\n \n->>>>>>> .r202824\n 2013-09-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gimplify.c (gimplify_asm_expr): Reset the TREE_CHAIN of clobbers to"}, {"sha": "bc01bea167ed729fa6e5940f482dd063fa7a937a", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 46, "deletions": 32, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a895a2b8a98464a019e6407e71769eb8aed99013/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a895a2b8a98464a019e6407e71769eb8aed99013/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=a895a2b8a98464a019e6407e71769eb8aed99013", "patch": "@@ -1600,23 +1600,20 @@ dump_gimple_asm (pretty_printer *buffer, gimple gs, int spc, int flags)\n     }\n }\n \n-\n-/* Dump a PHI node PHI.  BUFFER, SPC and FLAGS are as in pp_gimple_stmt_1.\n-   The caller is responsible for calling pp_flush on BUFFER to finalize\n-   pretty printer.  */\n+/* Dump ptr_info and range_info for NODE on pretty_printer BUFFER with\n+   SPC spaces of indent.  */\n \n static void\n-dump_gimple_phi (pretty_printer *buffer, gimple phi, int spc, int flags)\n+dump_ssaname_info (pretty_printer *buffer, tree node, int spc)\n {\n-  size_t i;\n-  tree lhs = gimple_phi_result (phi);\n+  if (TREE_CODE (node) != SSA_NAME)\n+    return;\n \n-  if (flags & TDF_ALIAS\n-      && POINTER_TYPE_P (TREE_TYPE (lhs))\n-      && SSA_NAME_PTR_INFO (lhs))\n+  if (POINTER_TYPE_P (TREE_TYPE (node))\n+      && SSA_NAME_PTR_INFO (node))\n     {\n       unsigned int align, misalign;\n-      struct ptr_info_def *pi = SSA_NAME_PTR_INFO (lhs);\n+      struct ptr_info_def *pi = SSA_NAME_PTR_INFO (node);\n       pp_string (buffer, \"PT = \");\n       pp_points_to_solution (buffer, &pi->pt);\n       newline_and_indent (buffer, spc);\n@@ -1628,6 +1625,41 @@ dump_gimple_phi (pretty_printer *buffer, gimple phi, int spc, int flags)\n       pp_string (buffer, \"# \");\n     }\n \n+  if (!POINTER_TYPE_P (TREE_TYPE (node))\n+      && SSA_NAME_RANGE_INFO (node))\n+    {\n+      double_int min, max;\n+      value_range_type range_type = get_range_info (node, &min, &max);\n+\n+      if (range_type == VR_VARYING)\n+        pp_printf (buffer, \"# RANGE  VR_VARYING\");\n+      else if (range_type == VR_RANGE || range_type == VR_ANTI_RANGE)\n+        {\n+          pp_printf (buffer, \"# RANGE \");\n+          pp_printf (buffer, \"%s[\", range_type == VR_RANGE ? \"\" : \"~\");\n+          pp_double_int (buffer, min, TYPE_UNSIGNED (TREE_TYPE (node)));\n+          pp_printf (buffer, \", \");\n+          pp_double_int (buffer, max, TYPE_UNSIGNED (TREE_TYPE (node)));\n+          pp_printf (buffer, \"]\");\n+          newline_and_indent (buffer, spc);\n+        }\n+    }\n+}\n+\n+\n+/* Dump a PHI node PHI.  BUFFER, SPC and FLAGS are as in pp_gimple_stmt_1.\n+   The caller is responsible for calling pp_flush on BUFFER to finalize\n+   pretty printer.  */\n+\n+static void\n+dump_gimple_phi (pretty_printer *buffer, gimple phi, int spc, int flags)\n+{\n+  size_t i;\n+  tree lhs = gimple_phi_result (phi);\n+\n+  if (flags & TDF_ALIAS)\n+    dump_ssaname_info (buffer, lhs, spc);\n+\n   if (flags & TDF_RAW)\n       dump_gimple_fmt (buffer, spc, flags, \"%G <%T, \", phi,\n                        gimple_phi_result (phi));\n@@ -1908,27 +1940,9 @@ pp_gimple_stmt_1 (pretty_printer *buffer, gimple gs, int spc, int flags)\n       && gimple_has_mem_ops (gs))\n     dump_gimple_mem_ops (buffer, gs, spc, flags);\n \n-  if ((flags & TDF_ALIAS)\n-      && gimple_has_lhs (gs))\n-    {\n-      tree lhs = gimple_get_lhs (gs);\n-      if (TREE_CODE (lhs) == SSA_NAME\n-\t  && POINTER_TYPE_P (TREE_TYPE (lhs))\n-\t  && SSA_NAME_PTR_INFO (lhs))\n-\t{\n-\t  unsigned int align, misalign;\n-\t  struct ptr_info_def *pi = SSA_NAME_PTR_INFO (lhs);\n-\t  pp_string (buffer, \"# PT = \");\n-\t  pp_points_to_solution (buffer, &pi->pt);\n-\t  newline_and_indent (buffer, spc);\n-\t  if (get_ptr_info_alignment (pi, &align, &misalign))\n-\t    {\n-\t      pp_printf (buffer, \"# ALIGN = %u, MISALIGN = %u\",\n-\t\t\t align, misalign);\n-\t      newline_and_indent (buffer, spc);\n-\t    }\n-\t}\n-    }\n+  if (gimple_has_lhs (gs)\n+      && (flags & TDF_ALIAS))\n+    dump_ssaname_info (buffer, gimple_get_lhs (gs), spc);\n \n   switch (gimple_code (gs))\n     {"}, {"sha": "2acc379c813b3a7b72233b9aade6a490de1d2fc1", "filename": "gcc/tree-core.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a895a2b8a98464a019e6407e71769eb8aed99013/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a895a2b8a98464a019e6407e71769eb8aed99013/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=a895a2b8a98464a019e6407e71769eb8aed99013", "patch": "@@ -43,6 +43,7 @@ struct function;\n struct real_value;\n struct fixed_value;\n struct ptr_info_def;\n+struct range_info_def;\n struct die_struct;\n struct pointer_set_t;\n \n@@ -1050,8 +1051,14 @@ struct GTY(()) tree_ssa_name {\n   /* Statement that defines this SSA name.  */\n   gimple def_stmt;\n \n-  /* Pointer attributes used for alias analysis.  */\n-  struct ptr_info_def *ptr_info;\n+  /* Value range information.  */\n+  union ssa_name_info_type {\n+    /* Pointer attributes used for alias analysis.  */\n+    struct GTY ((tag (\"0\"))) ptr_info_def *ptr_info;\n+    /* Value range attributes used for zero/sign extension elimination.  */\n+    struct GTY ((tag (\"1\"))) range_info_def *range_info;\n+  } GTY ((desc (\"%1.typed.type ?\" \\\n+                \"!POINTER_TYPE_P (TREE_TYPE ((tree)&%1)) : 2\"))) info;\n \n   /* Immediate uses list for this SSA_NAME.  */\n   struct ssa_use_operand_d imm_uses;"}, {"sha": "a5f9a71339baa43c526e265f75df5e3113771aaa", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a895a2b8a98464a019e6407e71769eb8aed99013/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a895a2b8a98464a019e6407e71769eb8aed99013/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=a895a2b8a98464a019e6407e71769eb8aed99013", "patch": "@@ -1062,29 +1062,9 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t  pp_wide_integer (buffer, TREE_INT_CST_LOW (node));\n \t  pp_string (buffer, \"B\"); /* pseudo-unit */\n \t}\n-      else if (host_integerp (node, 0))\n-\tpp_wide_integer (buffer, TREE_INT_CST_LOW (node));\n-      else if (host_integerp (node, 1))\n-\tpp_unsigned_wide_integer (buffer, TREE_INT_CST_LOW (node));\n       else\n-\t{\n-\t  tree val = node;\n-\t  unsigned HOST_WIDE_INT low = TREE_INT_CST_LOW (val);\n-\t  HOST_WIDE_INT high = TREE_INT_CST_HIGH (val);\n-\n-\t  if (tree_int_cst_sgn (val) < 0)\n-\t    {\n-\t      pp_minus (buffer);\n-\t      high = ~high + !low;\n-\t      low = -low;\n-\t    }\n-\t  /* Would \"%x%0*x\" or \"%x%*0x\" get zero-padding on all\n-\t     systems?  */\n-\t  sprintf (pp_buffer (buffer)->digit_buffer,\n-\t\t   HOST_WIDE_INT_PRINT_DOUBLE_HEX,\n-\t\t   (unsigned HOST_WIDE_INT) high, low);\n-\t  pp_string (buffer, pp_buffer (buffer)->digit_buffer);\n-\t}\n+        pp_double_int (buffer, tree_to_double_int (node),\n+                       TYPE_UNSIGNED (TREE_TYPE (node)));\n       break;\n \n     case REAL_CST:\n@@ -3196,3 +3176,31 @@ dump_function_header (FILE *dump_file, tree fdecl, int flags)\n   else\n     fprintf (dump_file, \")\\n\\n\");\n }\n+\n+/* Dump double_int D to pretty_printer PP.  UNS is true\n+   if D is unsigned and false otherwise.  */\n+void\n+pp_double_int (pretty_printer *pp, double_int d, bool uns)\n+{\n+  if (d.fits_shwi ())\n+    pp_wide_integer (pp, d.low);\n+  else if (d.fits_uhwi ())\n+    pp_unsigned_wide_integer (pp, d.low);\n+  else\n+    {\n+      unsigned HOST_WIDE_INT low = d.low;\n+      HOST_WIDE_INT high = d.high;\n+      if (!uns && d.is_negative ())\n+        {\n+          pp_minus (pp);\n+          high = ~high + !low;\n+          low = -low;\n+        }\n+      /* Would \"%x%0*x\" or \"%x%*0x\" get zero-padding on all\n+         systems?  */\n+      sprintf (pp_buffer (pp)->digit_buffer,\n+               HOST_WIDE_INT_PRINT_DOUBLE_HEX,\n+               (unsigned HOST_WIDE_INT) high, low);\n+      pp_string (pp, pp_buffer (pp)->digit_buffer);\n+    }\n+}"}, {"sha": "ec421fa938f9eae6bd882226b28be5db43b50ec2", "filename": "gcc/tree-pretty-print.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a895a2b8a98464a019e6407e71769eb8aed99013/gcc%2Ftree-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a895a2b8a98464a019e6407e71769eb8aed99013/gcc%2Ftree-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.h?ref=a895a2b8a98464a019e6407e71769eb8aed99013", "patch": "@@ -23,6 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_TREE_PRETTY_PRINT_H\n \n #include \"pretty-print.h\"\n+#include \"double-int.h\"\n \n #define pp_unsupported_tree(PP, T)                         \\\n   pp_verbatim (PP, \"#%qs not supported by %s#\", \\\n@@ -46,6 +47,7 @@ extern void debug_generic_stmt (tree);\n extern void debug_tree_chain (tree);\n extern void percent_K_format (text_info *);\n extern void dump_function_header (FILE *, tree, int);\n+extern void pp_double_int (pretty_printer *pp, double_int d, bool uns);\n /* In c-pretty-print.c  */\n extern void debug_c_tree (tree);\n "}, {"sha": "0ef74016808acc3f8919ccb3c8669ea3bbe87453", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a895a2b8a98464a019e6407e71769eb8aed99013/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a895a2b8a98464a019e6407e71769eb8aed99013/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=a895a2b8a98464a019e6407e71769eb8aed99013", "patch": "@@ -404,6 +404,7 @@ dump_alias_info (FILE *file)\n       struct ptr_info_def *pi;\n \n       if (ptr == NULL_TREE\n+          || !POINTER_TYPE_P (TREE_TYPE (ptr))\n \t  || SSA_NAME_IN_FREE_LIST (ptr))\n \tcontinue;\n "}, {"sha": "25a43ff0ddd3379542b93a8ecb09e4073c8621e2", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a895a2b8a98464a019e6407e71769eb8aed99013/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a895a2b8a98464a019e6407e71769eb8aed99013/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=a895a2b8a98464a019e6407e71769eb8aed99013", "patch": "@@ -767,11 +767,19 @@ fini_copy_prop (void)\n \t of the representative to the first solution we find if\n \t it doesn't have one already.  */\n       if (copy_of[i].value != var\n-\t  && TREE_CODE (copy_of[i].value) == SSA_NAME\n-\t  && POINTER_TYPE_P (TREE_TYPE (var))\n-\t  && SSA_NAME_PTR_INFO (var)\n-\t  && !SSA_NAME_PTR_INFO (copy_of[i].value))\n-\tduplicate_ssa_name_ptr_info (copy_of[i].value, SSA_NAME_PTR_INFO (var));\n+          && TREE_CODE (copy_of[i].value) == SSA_NAME)\n+        {\n+          if (POINTER_TYPE_P (TREE_TYPE (var))\n+              && SSA_NAME_PTR_INFO (var)\n+              && !SSA_NAME_PTR_INFO (copy_of[i].value))\n+            duplicate_ssa_name_ptr_info (copy_of[i].value,\n+                                         SSA_NAME_PTR_INFO (var));\n+          else if (!POINTER_TYPE_P (TREE_TYPE (var))\n+                   && SSA_NAME_RANGE_INFO (var)\n+                   && !SSA_NAME_RANGE_INFO (copy_of[i].value))\n+            duplicate_ssa_name_range_info (copy_of[i].value,\n+                                           SSA_NAME_RANGE_INFO (var));\n+        }\n     }\n \n   /* Don't do DCE if SCEV is initialized.  It would destroy the scev cache.  */"}, {"sha": "1a70f16345b45f1a4fe3a5674b8a032922d441cc", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 94, "deletions": 4, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a895a2b8a98464a019e6407e71769eb8aed99013/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a895a2b8a98464a019e6407e71769eb8aed99013/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=a895a2b8a98464a019e6407e71769eb8aed99013", "patch": "@@ -154,7 +154,11 @@ make_ssa_name_fn (struct function *fn, tree var, gimple stmt)\n       SET_SSA_NAME_VAR_OR_IDENTIFIER (t, var);\n     }\n   SSA_NAME_DEF_STMT (t) = stmt;\n-  SSA_NAME_PTR_INFO (t) = NULL;\n+  if (POINTER_TYPE_P (TREE_TYPE (t)))\n+    SSA_NAME_PTR_INFO (t) = NULL;\n+  else\n+    SSA_NAME_RANGE_INFO (t) = NULL;\n+\n   SSA_NAME_IN_FREE_LIST (t) = 0;\n   SSA_NAME_IS_DEFAULT_DEF (t) = 0;\n   imm = &(SSA_NAME_IMM_USE_NODE (t));\n@@ -166,6 +170,62 @@ make_ssa_name_fn (struct function *fn, tree var, gimple stmt)\n   return t;\n }\n \n+/* Store range information MIN, and MAX to tree ssa_name NAME.  */\n+\n+void\n+set_range_info (tree name, double_int min, double_int max)\n+{\n+  gcc_assert (!POINTER_TYPE_P (TREE_TYPE (name)));\n+  range_info_def *ri = SSA_NAME_RANGE_INFO (name);\n+\n+  /* Allocate if not available.  */\n+  if (ri == NULL)\n+    {\n+      ri = ggc_alloc_cleared_range_info_def ();\n+      SSA_NAME_RANGE_INFO (name) = ri;\n+    }\n+\n+  /* Set the values.  */\n+  ri->min = min;\n+  ri->max = max;\n+}\n+\n+\n+/* Gets range information MIN, MAX and returns enum value_range_type\n+   corresponding to tree ssa_name NAME.  enum value_range_type returned\n+   is used to determine if MIN and MAX are valid values.  */\n+\n+enum value_range_type\n+get_range_info (tree name, double_int *min, double_int *max)\n+{\n+  enum value_range_type range_type;\n+  gcc_assert (!POINTER_TYPE_P (TREE_TYPE (name)));\n+  gcc_assert (min && max);\n+  range_info_def *ri = SSA_NAME_RANGE_INFO (name);\n+\n+  /* Return VR_VARYING for SSA_NAMEs with NULL RANGE_INFO or SSA_NAMEs\n+     with integral types width > 2 * HOST_BITS_PER_WIDE_INT precision.  */\n+  if (!ri || (GET_MODE_PRECISION (TYPE_MODE (TREE_TYPE (name)))\n+              > 2 * HOST_BITS_PER_WIDE_INT))\n+    return VR_VARYING;\n+\n+  /* If min > max, it is VR_ANTI_RANGE.  */\n+  if (ri->min.cmp (ri->max, TYPE_UNSIGNED (TREE_TYPE (name))) == 1)\n+    {\n+      /* VR_ANTI_RANGE ~[min, max] is encoded as [max + 1, min - 1].  */\n+      range_type = VR_ANTI_RANGE;\n+      *min = ri->max + double_int_one;\n+      *max = ri->min - double_int_one;\n+    }\n+  else\n+  {\n+    /* Otherwise (when min <= max), it is VR_RANGE.  */\n+    range_type = VR_RANGE;\n+    *min = ri->min;\n+    *max = ri->max;\n+  }\n+  return range_type;\n+}\n \n /* We no longer need the SSA_NAME expression VAR, release it so that\n    it may be reused.\n@@ -362,6 +422,26 @@ duplicate_ssa_name_ptr_info (tree name, struct ptr_info_def *ptr_info)\n   SSA_NAME_PTR_INFO (name) = new_ptr_info;\n }\n \n+/* Creates a duplicate of the range_info_def at RANGE_INFO for use by\n+   the SSA name NAME.  */\n+void\n+duplicate_ssa_name_range_info (tree name, struct range_info_def *range_info)\n+{\n+  struct range_info_def *new_range_info;\n+\n+  gcc_assert (!POINTER_TYPE_P (TREE_TYPE (name)));\n+  gcc_assert (!SSA_NAME_RANGE_INFO (name));\n+\n+  if (!range_info)\n+    return;\n+\n+  new_range_info = ggc_alloc_range_info_def ();\n+  *new_range_info = *range_info;\n+\n+  SSA_NAME_RANGE_INFO (name) = new_range_info;\n+}\n+\n+\n \n /* Creates a duplicate of a ssa name NAME tobe defined by statement STMT\n    in function FN.  */\n@@ -370,10 +450,20 @@ tree\n duplicate_ssa_name_fn (struct function *fn, tree name, gimple stmt)\n {\n   tree new_name = copy_ssa_name_fn (fn, name, stmt);\n-  struct ptr_info_def *old_ptr_info = SSA_NAME_PTR_INFO (name);\n+  if (POINTER_TYPE_P (TREE_TYPE (name)))\n+    {\n+      struct ptr_info_def *old_ptr_info = SSA_NAME_PTR_INFO (name);\n+\n+      if (old_ptr_info)\n+        duplicate_ssa_name_ptr_info (new_name, old_ptr_info);\n+    }\n+  else\n+    {\n+      struct range_info_def *old_range_info = SSA_NAME_RANGE_INFO (name);\n \n-  if (old_ptr_info)\n-    duplicate_ssa_name_ptr_info (new_name, old_ptr_info);\n+      if (old_range_info)\n+        duplicate_ssa_name_range_info (new_name, old_range_info);\n+    }\n \n   return new_name;\n }"}, {"sha": "5239bc3027cf2c9441e35d3e76d457b53aff5f15", "filename": "gcc/tree-ssanames.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a895a2b8a98464a019e6407e71769eb8aed99013/gcc%2Ftree-ssanames.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a895a2b8a98464a019e6407e71769eb8aed99013/gcc%2Ftree-ssanames.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.h?ref=a895a2b8a98464a019e6407e71769eb8aed99013", "patch": "@@ -45,6 +45,15 @@ struct GTY(()) ptr_info_def\n   unsigned int misalign;\n };\n \n+/* Value range information for SSA_NAMEs representing non-pointer variables.  */\n+\n+struct GTY (()) range_info_def {\n+  /* Minimum for value range.  */\n+  double_int min;\n+  /* Maximum for value range.  */\n+  double_int max;\n+};\n+\n \n #define SSANAMES(fun) (fun)->gimple_df->ssa_names\n #define MODIFIED_NORETURN_CALLS(fun) (fun)->gimple_df->modified_noreturn_calls\n@@ -54,6 +63,15 @@ struct GTY(()) ptr_info_def\n #define ssa_name(i) ((*cfun->gimple_df->ssa_names)[(i)])\n \n \n+/* Type of value ranges.  See value_range_d In tree-vrp.c for a\n+   description of these types.  */\n+enum value_range_type { VR_UNDEFINED, VR_RANGE, VR_ANTI_RANGE, VR_VARYING };\n+\n+/* Sets the value range to SSA.  */\n+extern void set_range_info (tree ssa, double_int min, double_int max);\n+/* Gets the value range from SSA.  */\n+extern enum value_range_type  get_range_info (tree name, double_int *min,\n+                                              double_int *max);\n extern void init_ssanames (struct function *, int);\n extern void fini_ssanames (void);\n extern void ssanames_print_statistics (void);\n@@ -71,6 +89,7 @@ extern struct ptr_info_def *get_ptr_info (tree);\n extern tree copy_ssa_name_fn (struct function *, tree, gimple);\n extern void duplicate_ssa_name_ptr_info (tree, struct ptr_info_def *);\n extern tree duplicate_ssa_name_fn (struct function *, tree, gimple);\n+extern void duplicate_ssa_name_range_info (tree, struct range_info_def *);\n extern void release_defs (gimple);\n extern void replace_ssa_name_symbol (tree, tree);\n "}, {"sha": "e44d85d1bd528def0f1f45216960cba36846153c", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a895a2b8a98464a019e6407e71769eb8aed99013/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a895a2b8a98464a019e6407e71769eb8aed99013/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=a895a2b8a98464a019e6407e71769eb8aed99013", "patch": "@@ -41,9 +41,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"optabs.h\"\n \n \n-/* Type of value ranges.  See value_range_d for a description of these\n-   types.  */\n-enum value_range_type { VR_UNDEFINED, VR_RANGE, VR_ANTI_RANGE, VR_VARYING };\n \n /* Range of values that can be associated with an SSA_NAME after VRP\n    has executed.  */\n@@ -9452,6 +9449,50 @@ vrp_finalize (void)\n      the datastructures built by VRP.  */\n   identify_jump_threads ();\n \n+  /* Set value range to non pointer SSA_NAMEs.  */\n+  for (i  = 0; i < num_vr_values; i++)\n+   if (vr_value[i])\n+    {\n+      tree name = ssa_name (i);\n+\n+      if (POINTER_TYPE_P (TREE_TYPE (name))\n+          || (vr_value[i]->type == VR_VARYING)\n+          || (vr_value[i]->type == VR_UNDEFINED))\n+        continue;\n+\n+      if ((TREE_CODE (vr_value[i]->min) == INTEGER_CST)\n+          && (TREE_CODE (vr_value[i]->max) == INTEGER_CST))\n+        {\n+          if (vr_value[i]->type == VR_RANGE)\n+            set_range_info (name,\n+                            tree_to_double_int (vr_value[i]->min),\n+                            tree_to_double_int (vr_value[i]->max));\n+          else if (vr_value[i]->type == VR_ANTI_RANGE)\n+            {\n+              /* VR_ANTI_RANGE ~[min, max] is encoded compactly as\n+                 [max + 1, min - 1] without additional attributes.\n+                 When min value > max value, we know that it is\n+                 VR_ANTI_RANGE; it is VR_RANGE otherwise.  */\n+\n+\t      /* ~[0,0] anti-range is represented as\n+                 range.  */\n+              if (TYPE_UNSIGNED (TREE_TYPE (name))\n+                  && integer_zerop (vr_value[i]->min)\n+                  && integer_zerop (vr_value[i]->max))\n+                set_range_info (name,\n+                                double_int_one,\n+                                double_int::max_value\n+                                (TYPE_PRECISION (TREE_TYPE (name)), true));\n+              else\n+                set_range_info (name,\n+                                tree_to_double_int (vr_value[i]->max)\n+                                + double_int_one,\n+                                tree_to_double_int (vr_value[i]->min)\n+                                - double_int_one);\n+            }\n+        }\n+    }\n+\n   /* Free allocated memory.  */\n   for (i = 0; i < num_vr_values; i++)\n     if (vr_value[i])"}, {"sha": "d68b284a3213a2c44d824c864021ffe65e11b4ca", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a895a2b8a98464a019e6407e71769eb8aed99013/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a895a2b8a98464a019e6407e71769eb8aed99013/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a895a2b8a98464a019e6407e71769eb8aed99013", "patch": "@@ -1336,7 +1336,11 @@ extern void protected_set_expr_location (tree, location_t);\n \n /* Attributes for SSA_NAMEs for pointer-type variables.  */\n #define SSA_NAME_PTR_INFO(N) \\\n-    SSA_NAME_CHECK (N)->ssa_name.ptr_info\n+   SSA_NAME_CHECK (N)->ssa_name.info.ptr_info\n+\n+/* Value range info attributes for SSA_NAMEs of non pointer-type variables.  */\n+#define SSA_NAME_RANGE_INFO(N) \\\n+    SSA_NAME_CHECK (N)->ssa_name.info.range_info\n \n /* Return the immediate_use information for an SSA_NAME. */\n #define SSA_NAME_IMM_USE_NODE(NODE) SSA_NAME_CHECK (NODE)->ssa_name.imm_uses"}]}