{"sha": "d3719ee2c078a1518c9e21efae0cf438d4ffb8d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM3MTllZTJjMDc4YTE1MThjOWUyMWVmYWUwY2Y0MzhkNGZmYjhkNg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2018-01-24T23:36:29Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2018-01-24T23:36:29Z"}, "message": "Fix m68k-linux-gnu libgcc build for ColdFire (PR target/68467).\n\nPR target/68467 is libgcc failing to build for m68k-linux-gnu\nconfigured for ColdFire.\n\nJeff has an analysis in the PR identifying the problem as resulting\nfrom the callers of libcalls with 1-byte or 2-byte arguments wanting\nto push just 1 or 2 bytes on the stack, while the libcall\nimplementations have the normal C ABI and expect 4-byte arguments.\nFor normal C functions, I believe the TARGET_PROMOTE_PROTOTYPES\ndefinition would ensure such arguments get passed as 4-byte, but that\ndoes not apply for libcalls.\n\nThis patch fixes the issue by defining TARGET_PROMOTE_FUNCTION_MODE\nfor m68k.  The definition is conservative, only applying promotions in\nthe case of arguments to libcalls; otherwise it returns the unpromoted\ntype, which I believe matches what the default implementation of the\nhook would have done on m68k.\n\nI have tested that this fixes the libgcc build for ColdFire, and, in\nconjunction with one glibc patch, this enables glibc to build cleanly\nfor ColdFire and to pass the compilation parts of the glibc testsuite\nexcept for one test unrelated to this patch (while glibc and the\ncompilation parts of the testsuite continue to build OK for\nnon-ColdFire m68k, as expected).  I have *not* run any GCC tests for\nthis patch, or any execution tests for m68k.\n\n\tPR target/68467\n\t* config/m68k/m68k.c (m68k_promote_function_mode): New function.\n\t(TARGET_PROMOTE_FUNCTION_MODE): New macro.\n\nFrom-SVN: r257032", "tree": {"sha": "78006b330fd44f5969627c5072238fcce69394a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78006b330fd44f5969627c5072238fcce69394a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3719ee2c078a1518c9e21efae0cf438d4ffb8d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3719ee2c078a1518c9e21efae0cf438d4ffb8d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3719ee2c078a1518c9e21efae0cf438d4ffb8d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3719ee2c078a1518c9e21efae0cf438d4ffb8d6/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e77d9b130abdd5878557d34839e1b159a7f68ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e77d9b130abdd5878557d34839e1b159a7f68ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e77d9b130abdd5878557d34839e1b159a7f68ef"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "c46bc6d6f9daa796b1186d8764bfe1eb4c86b2f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3719ee2c078a1518c9e21efae0cf438d4ffb8d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3719ee2c078a1518c9e21efae0cf438d4ffb8d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d3719ee2c078a1518c9e21efae0cf438d4ffb8d6", "patch": "@@ -1,3 +1,9 @@\n+2018-01-24  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR target/68467\n+\t* config/m68k/m68k.c (m68k_promote_function_mode): New function.\n+\t(TARGET_PROMOTE_FUNCTION_MODE): New macro.\n+\n 2017-01-08  Jeff Law  <law@redhat.com>\n \n \tPR target/83994"}, {"sha": "495a80b759e3b76142f235e674c71ef5d67a7fc7", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3719ee2c078a1518c9e21efae0cf438d4ffb8d6/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3719ee2c078a1518c9e21efae0cf438d4ffb8d6/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=d3719ee2c078a1518c9e21efae0cf438d4ffb8d6", "patch": "@@ -192,6 +192,8 @@ m68k_excess_precision (enum excess_precision_type);\n static unsigned int m68k_hard_regno_nregs (unsigned int, machine_mode);\n static bool m68k_hard_regno_mode_ok (unsigned int, machine_mode);\n static bool m68k_modes_tieable_p (machine_mode, machine_mode);\n+static machine_mode m68k_promote_function_mode (const_tree, machine_mode,\n+\t\t\t\t\t\tint *, const_tree, int);\n \f\n /* Initialize the GCC target structure.  */\n \n@@ -347,6 +349,9 @@ static bool m68k_modes_tieable_p (machine_mode, machine_mode);\n #undef TARGET_MODES_TIEABLE_P\n #define TARGET_MODES_TIEABLE_P m68k_modes_tieable_p\n \n+#undef TARGET_PROMOTE_FUNCTION_MODE\n+#define TARGET_PROMOTE_FUNCTION_MODE m68k_promote_function_mode\n+\n static const struct attribute_spec m68k_attribute_table[] =\n {\n   /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n@@ -6621,4 +6626,20 @@ m68k_push_rounding (poly_int64 bytes)\n   return (bytes + 1) & ~1;\n }\n \n+/* Implement TARGET_PROMOTE_FUNCTION_MODE.  */\n+\n+static machine_mode\n+m68k_promote_function_mode (const_tree type, machine_mode mode,\n+                            int *punsignedp ATTRIBUTE_UNUSED,\n+                            const_tree fntype ATTRIBUTE_UNUSED,\n+                            int for_return)\n+{\n+  /* Promote libcall arguments narrower than int to match the normal C\n+     ABI (for which promotions are handled via\n+     TARGET_PROMOTE_PROTOTYPES).  */\n+  if (type == NULL_TREE && !for_return && (mode == QImode || mode == HImode))\n+    return SImode;\n+  return mode;\n+}\n+\n #include \"gt-m68k.h\""}]}