{"sha": "461fc4de6a0434d7fc8c3ef53b25a4e51db69829", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYxZmM0ZGU2YTA0MzRkN2ZjOGMzZWY1M2IyNWE0ZTUxZGI2OTgyOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-03-28T06:11:49Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-03-28T06:11:49Z"}, "message": "Remove flag_new_exceptions.\n\nFrom-SVN: r40908", "tree": {"sha": "ddab9a99591592a2df4dd53a7d6cc6f6165da1cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddab9a99591592a2df4dd53a7d6cc6f6165da1cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/461fc4de6a0434d7fc8c3ef53b25a4e51db69829", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/461fc4de6a0434d7fc8c3ef53b25a4e51db69829", "html_url": "https://github.com/Rust-GCC/gccrs/commit/461fc4de6a0434d7fc8c3ef53b25a4e51db69829", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/461fc4de6a0434d7fc8c3ef53b25a4e51db69829/comments", "author": null, "committer": null, "parents": [{"sha": "662795a85f138c84aa9505ba731cf5fd25dd24eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/662795a85f138c84aa9505ba731cf5fd25dd24eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/662795a85f138c84aa9505ba731cf5fd25dd24eb"}], "stats": {"total": 42, "additions": 16, "deletions": 26}, "files": [{"sha": "15a9dd295adb59b70b396e10e2bad435f62b1ab8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/461fc4de6a0434d7fc8c3ef53b25a4e51db69829/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/461fc4de6a0434d7fc8c3ef53b25a4e51db69829/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=461fc4de6a0434d7fc8c3ef53b25a4e51db69829", "patch": "@@ -23,6 +23,11 @@\n \t* combine.c (distribute_notes) [REG_EH_REGION]: If non-call\n \texceptions, put the note on the trapping instruction.\n \n+\t* flags.h (flag_new_exceptions): Remove.\n+\t* toplev.c: Don't set it.\n+\t* final.c: Don't check it.\n+\t* except.c: Provide stub definition.\n+\n 2001-03-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* configure.in: Don't check for bcopy."}, {"sha": "04e3af7715422ed48ed7951584efecb494157d5b", "filename": "gcc/except.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/461fc4de6a0434d7fc8c3ef53b25a4e51db69829/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/461fc4de6a0434d7fc8c3ef53b25a4e51db69829/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=461fc4de6a0434d7fc8c3ef53b25a4e51db69829", "patch": "@@ -409,6 +409,13 @@ Boston, MA 02111-1307, USA.  */\n #include \"ggc.h\"\n #include \"tm_p.h\"\n \n+/* ??? Temporary hack before this entire file is replaced.  */\n+#ifdef IA64_UNWIND_INFO\n+#define flag_new_exceptions 0\n+#else\n+#define flag_new_exceptions 1\n+#endif\n+\n /* One to enable asynchronous exception support.  */\n \n int flag_non_call_exceptions = 0;"}, {"sha": "7b65a02ce71c6439787085f4e0198f5fdc2163bc", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/461fc4de6a0434d7fc8c3ef53b25a4e51db69829/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/461fc4de6a0434d7fc8c3ef53b25a4e51db69829/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=461fc4de6a0434d7fc8c3ef53b25a4e51db69829", "patch": "@@ -2129,8 +2129,6 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \t  if (! USING_SJLJ_EXCEPTIONS)\n \t    {\n \t      ASM_OUTPUT_INTERNAL_LABEL (file, \"LEHB\", NOTE_EH_HANDLER (insn));\n-\t      if (! flag_new_exceptions)\n-\t\tadd_eh_table_entry (NOTE_EH_HANDLER (insn));\n #ifdef ASM_OUTPUT_EH_REGION_BEG\n \t      ASM_OUTPUT_EH_REGION_BEG (file, NOTE_EH_HANDLER (insn));\n #endif\n@@ -2141,8 +2139,7 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \t  if (! USING_SJLJ_EXCEPTIONS)\n \t    {\n \t      ASM_OUTPUT_INTERNAL_LABEL (file, \"LEHE\", NOTE_EH_HANDLER (insn));\n-\t      if (flag_new_exceptions)\n-\t\tadd_eh_table_entry (NOTE_EH_HANDLER (insn));\n+\t      add_eh_table_entry (NOTE_EH_HANDLER (insn));\n #ifdef ASM_OUTPUT_EH_REGION_END\n \t      ASM_OUTPUT_EH_REGION_END (file, NOTE_EH_HANDLER (insn));\n #endif"}, {"sha": "24254a3fc3624e66b4e5d4f2ae5e78358c49c635", "filename": "gcc/flags.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/461fc4de6a0434d7fc8c3ef53b25a4e51db69829/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/461fc4de6a0434d7fc8c3ef53b25a4e51db69829/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=461fc4de6a0434d7fc8c3ef53b25a4e51db69829", "patch": "@@ -453,11 +453,6 @@ extern int flag_pic;\n \n extern int flag_exceptions;\n \n-/* Nonzero means use the new model for exception handling. Replaces \n-   -DNEW_EH_MODEL as a compile option. */\n-\n-extern int flag_new_exceptions;\n-\n /* Nonzero means generate frame unwind info table when supported */\n \n extern int flag_unwind_tables;"}, {"sha": "c114c6c15b1cd8e7dcc2193f0814f2eebf84e6ee", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/461fc4de6a0434d7fc8c3ef53b25a4e51db69829/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/461fc4de6a0434d7fc8c3ef53b25a4e51db69829/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=461fc4de6a0434d7fc8c3ef53b25a4e51db69829", "patch": "@@ -3,6 +3,9 @@\n \t* expr.c, parse.h: Use USING_SJLJ_EXCEPTIONS instead of\n \texceptions_via_longjmp.\n \n+\t* lang.c (flag_new_exceptions): Don't declare it.\n+\t(java_init_options): Or set it.\n+\n 2001-03-27  Richard Henderson  <rth@redhat.com>\n \n \t* decl.c (end_java_method): Rename asynchronous_exceptions to"}, {"sha": "982f4513fe754ea7fb02ada1e5e3bea87a10ed17", "filename": "gcc/java/lang.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/461fc4de6a0434d7fc8c3ef53b25a4e51db69829/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/461fc4de6a0434d7fc8c3ef53b25a4e51db69829/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=461fc4de6a0434d7fc8c3ef53b25a4e51db69829", "patch": "@@ -152,7 +152,6 @@ int flag_force_classes_archive_check;\n \n /* From gcc/flags.h, and indicates if exceptions are turned on or not.  */\n \n-extern int flag_new_exceptions;\n extern int flag_exceptions;\n \n /* Table of language-dependent -f options.\n@@ -704,7 +703,6 @@ void lang_init_source (level)\n static void\n java_init_options ()\n {\n-  flag_new_exceptions = 1;\n   flag_bounds_check = 1;\n }\n "}, {"sha": "573b6b660a62fcf1727bbb7348a13b84d9dfed65", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/461fc4de6a0434d7fc8c3ef53b25a4e51db69829/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/461fc4de6a0434d7fc8c3ef53b25a4e51db69829/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=461fc4de6a0434d7fc8c3ef53b25a4e51db69829", "patch": "@@ -723,11 +723,6 @@ int flag_pic;\n \n int flag_exceptions;\n \n-/* Nonzero means use the new model for exception handling. Replaces\n-   -DNEW_EH_MODEL as a compile option.  */\n-\n-int flag_new_exceptions = 1;\n-\n /* Nonzero means generate frame unwind info table when supported.  */\n \n int flag_unwind_tables = 0;\n@@ -1077,8 +1072,6 @@ lang_independent_options f_options[] =\n   {\"PIC\", &flag_pic, 2, \"\"},\n   {\"exceptions\", &flag_exceptions, 1,\n    \"Enable exception handling\" },\n-  {\"new-exceptions\", &flag_new_exceptions, 1,\n-   \"Use the new model for exception handling\" },\n   {\"unwind-tables\", &flag_unwind_tables, 1,\n     \"Just generate unwind tables for exception handling\" },\n   {\"non-call-exceptions\", &flag_non_call_exceptions, 1,\n@@ -4875,14 +4868,6 @@ toplev_main (argc, argv)\n   OVERRIDE_OPTIONS;\n #endif\n \n-  /* Since each function gets its own handler data, we can't support the\n-     new model currently, since it depend on a specific rethrow label\n-     which is declared at the front of the table, and we can only\n-     have one such symbol in a file.  */\n-#ifdef IA64_UNWIND_INFO\n-  flag_new_exceptions = 0;\n-#endif\n-\n   /* Set up the align_*_log variables, defaulting them to 1 if they\n      were still unset.  */\n   if (align_loops <= 0) align_loops = 1;"}]}