{"sha": "e55b80f5f41b471d59b8f2c9e04c09bc22771541", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU1YjgwZjVmNDFiNDcxZDU5YjhmMmM5ZTA0YzA5YmMyMjc3MTU0MQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2015-05-17T20:14:53Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2015-05-17T20:14:53Z"}, "message": "unordered_map.h (unordered_map, [...]): Add missing constructors.\n\n2015-05-17  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/unordered_map.h (unordered_map, unordered_multimap): Add\n\tmissing constructors.\n\t* include/bits/unordered_set.h (unordered_set, unordered_multiset):\n\tLikewise.\n\t* include/debug/unordered_map (unordered_map, unordered_multimap): Add\n\tmissing constructors.\n\t* include/debug/unordered_set (unordered_set, unordered_multiset):\n\tLikewise.\n\t* include/profile/unordered_map (unordered_map, unordered_multimap): Add\n\tmissing constructors.\n\t* include/profile/unordered_set (unordered_set, unordered_multiset):\n\tLikewise.\n\t* testsuite/23_containers/unordered_map/cons/66055.cc: Add constructor\n\tinvocations.\n\t* testsuite/23_containers/unordered_multimap/cons/66055.cc: Likewise.\n\t* testsuite/23_containers/unordered_multiset/cons/66055.cc: Likewise.\n\t* testsuite/23_containers/unordered_set/cons/66055.cc: Likewise.\n\nFrom-SVN: r223273", "tree": {"sha": "4126b860593e0b022173b1006b90e2603f42b320", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4126b860593e0b022173b1006b90e2603f42b320"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e55b80f5f41b471d59b8f2c9e04c09bc22771541", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e55b80f5f41b471d59b8f2c9e04c09bc22771541", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e55b80f5f41b471d59b8f2c9e04c09bc22771541", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e55b80f5f41b471d59b8f2c9e04c09bc22771541/comments", "author": null, "committer": null, "parents": [{"sha": "8c7bcf951d60dfb897089bc182d01d0cf4664e97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c7bcf951d60dfb897089bc182d01d0cf4664e97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c7bcf951d60dfb897089bc182d01d0cf4664e97"}], "stats": {"total": 534, "additions": 470, "deletions": 64}, "files": [{"sha": "c8f14d004697f4868b9090472cfbab707fc94fda", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e55b80f5f41b471d59b8f2c9e04c09bc22771541/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e55b80f5f41b471d59b8f2c9e04c09bc22771541/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e55b80f5f41b471d59b8f2c9e04c09bc22771541", "patch": "@@ -1,3 +1,23 @@\n+2015-05-17  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/unordered_map.h (unordered_map, unordered_multimap): Add\n+\tmissing constructors.\n+\t* include/bits/unordered_set.h (unordered_set, unordered_multiset):\n+\tLikewise.\n+\t* include/debug/unordered_map (unordered_map, unordered_multimap): Add\n+\tmissing constructors.\n+\t* include/debug/unordered_set (unordered_set, unordered_multiset):\n+\tLikewise.\n+\t* include/profile/unordered_map (unordered_map, unordered_multimap): Add\n+\tmissing constructors.\n+\t* include/profile/unordered_set (unordered_set, unordered_multiset):\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_map/cons/66055.cc: Add constructor\n+\tinvocations.\n+\t* testsuite/23_containers/unordered_multimap/cons/66055.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multiset/cons/66055.cc: Likewise.\n+\t* testsuite/23_containers/unordered_set/cons/66055.cc: Likewise.\n+\n 2015-05-15  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* src/filesystem/ops.cc (stat_type): Define alias for struct stat and"}, {"sha": "3c434abb6aa88f059a324b20434b296be8646e23", "filename": "libstdc++-v3/include/bits/unordered_map.h", "status": "modified", "additions": 85, "deletions": 32, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e55b80f5f41b471d59b8f2c9e04c09bc22771541/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e55b80f5f41b471d59b8f2c9e04c09bc22771541/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h?ref=e55b80f5f41b471d59b8f2c9e04c09bc22771541", "patch": "@@ -146,17 +146,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       : _M_h(__n, __hf, __eql, __a)\n       { }\n \n-      unordered_map(size_type __n, const allocator_type& __a)\n-      : _M_h(__n, hasher(), key_equal(), __a)\n-      { }\n-\n-      explicit\n-      unordered_map(size_type __n,\n-\t\t    const hasher& __hf,\n-\t\t    const allocator_type& __a)\n-      : _M_h(__n, __hf, key_equal(), __a)\n-      { }\n-\n       /**\n        *  @brief  Builds an %unordered_map from a range.\n        *  @param  __first  An input iterator.\n@@ -201,7 +190,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       unordered_map(const unordered_map& __umap,\n \t\t    const allocator_type& __a)\n-\t: _M_h(__umap._M_h, __a)\n+      : _M_h(__umap._M_h, __a)\n       { }\n \n       /*\n@@ -211,7 +200,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       unordered_map(unordered_map&& __umap,\n \t\t    const allocator_type& __a)\n-\t: _M_h(std::move(__umap._M_h), __a)\n+      : _M_h(std::move(__umap._M_h), __a)\n       { }\n \n       /**\n@@ -230,7 +219,42 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t    const hasher& __hf = hasher(),\n \t\t    const key_equal& __eql = key_equal(),\n \t\t    const allocator_type& __a = allocator_type())\n-\t: _M_h(__l, __n, __hf, __eql, __a)\n+      : _M_h(__l, __n, __hf, __eql, __a)\n+      { }\n+\n+      unordered_map(size_type __n, const allocator_type& __a)\n+      : unordered_map(__n, hasher(), key_equal(), __a)\n+      { }\n+\n+      unordered_map(size_type __n, const hasher& __hf,\n+\t\t    const allocator_type& __a)\n+      : unordered_map(__n, __hf, key_equal(), __a)\n+      { }\n+\n+      template<typename _InputIterator>\n+\tunordered_map(_InputIterator __first, _InputIterator __last,\n+\t\t      size_type __n,\n+\t\t      const allocator_type& __a)\n+\t: unordered_map(__first, __last, __n, hasher(), key_equal(), __a)\n+\t{ }\n+\n+      template<typename _InputIterator>\n+\tunordered_map(_InputIterator __first, _InputIterator __last,\n+\t\t      size_type __n, const hasher& __hf,\n+\t\t      const allocator_type& __a)\n+\t  : unordered_map(__first, __last, __n, __hf, key_equal(), __a)\n+\t{ }\n+\n+      unordered_map(initializer_list<value_type> __l,\n+\t\t    size_type __n,\n+\t\t    const allocator_type& __a)\n+      : unordered_map(__l, __n, hasher(), key_equal(), __a)\n+      { }\n+\n+      unordered_map(initializer_list<value_type> __l,\n+\t\t    size_type __n, const hasher& __hf,\n+\t\t    const allocator_type& __a)\n+      : unordered_map(__l, __n, __hf, key_equal(), __a)\n       { }\n \n       /// Copy assignment operator.\n@@ -331,7 +355,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       // modifiers.\n \n       /**\n-       *  @brief Attempts to build and insert a std::pair into the %unordered_map.\n+       *  @brief Attempts to build and insert a std::pair into the\n+       *  %unordered_map.\n        *\n        *  @param __args  Arguments used to generate a new pair instance (see\n        *\t        std::piecewise_contruct for passing arguments to each\n@@ -355,7 +380,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t{ return _M_h.emplace(std::forward<_Args>(__args)...); }\n \n       /**\n-       *  @brief Attempts to build and insert a std::pair into the %unordered_map.\n+       *  @brief Attempts to build and insert a std::pair into the\n+       *  %unordered_map.\n        *\n        *  @param  __pos  An iterator that serves as a hint as to where the pair\n        *                should be inserted.\n@@ -546,7 +572,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @param  __x  An %unordered_map of the same element and allocator\n        *  types.\n        *\n-       *  This exchanges the elements between two %unordered_map in constant time.\n+       *  This exchanges the elements between two %unordered_map in constant\n+       *  time.\n        *  Note that the global std::swap() function is specialized such that\n        *  std::swap(m1,m2) will feed to this function.\n        */\n@@ -872,16 +899,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       : _M_h(__n, __hf, __eql, __a)\n       { }\n \n-      unordered_multimap(size_type __n, const allocator_type& __a)\n-      : _M_h(__n, hasher(), key_equal(), __a)\n-      { }\n-\n-      unordered_multimap(size_type __n,\n-\t\t\t const hasher& __hf,\n-\t\t\t const allocator_type& __a)\n-      : _M_h(__n, __hf, key_equal(), __a)\n-      { }\n-\n       /**\n        *  @brief  Builds an %unordered_multimap from a range.\n        *  @param  __first An input iterator.\n@@ -916,7 +933,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       explicit\n       unordered_multimap(const allocator_type& __a)\n-\t: _M_h(__a)\n+      : _M_h(__a)\n       { }\n \n       /*\n@@ -926,7 +943,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       unordered_multimap(const unordered_multimap& __ummap,\n \t\t\t const allocator_type& __a)\n-\t: _M_h(__ummap._M_h, __a)\n+      : _M_h(__ummap._M_h, __a)\n       { }\n \n       /*\n@@ -936,7 +953,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       unordered_multimap(unordered_multimap&& __ummap,\n \t\t\t const allocator_type& __a)\n-\t: _M_h(std::move(__ummap._M_h), __a)\n+      : _M_h(std::move(__ummap._M_h), __a)\n       { }\n \n       /**\n@@ -955,7 +972,42 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t\t const hasher& __hf = hasher(),\n \t\t\t const key_equal& __eql = key_equal(),\n \t\t\t const allocator_type& __a = allocator_type())\n-\t: _M_h(__l, __n, __hf, __eql, __a)\n+      : _M_h(__l, __n, __hf, __eql, __a)\n+      { }\n+\n+      unordered_multimap(size_type __n, const allocator_type& __a)\n+      : unordered_multimap(__n, hasher(), key_equal(), __a)\n+      { }\n+\n+      unordered_multimap(size_type __n, const hasher& __hf,\n+\t\t\t const allocator_type& __a)\n+      : unordered_multimap(__n, __hf, key_equal(), __a)\n+      { }\n+\n+      template<typename _InputIterator>\n+\tunordered_multimap(_InputIterator __first, _InputIterator __last,\n+\t\t\t   size_type __n,\n+\t\t\t   const allocator_type& __a)\n+\t: unordered_multimap(__first, __last, __n, hasher(), key_equal(), __a)\n+\t{ }\n+\n+      template<typename _InputIterator>\n+\tunordered_multimap(_InputIterator __first, _InputIterator __last,\n+\t\t\t   size_type __n, const hasher& __hf,\n+\t\t\t   const allocator_type& __a)\n+\t: unordered_multimap(__first, __last, __n, __hf, key_equal(), __a)\n+\t{ }\n+\n+      unordered_multimap(initializer_list<value_type> __l,\n+\t\t\t size_type __n,\n+\t\t\t const allocator_type& __a)\n+      : unordered_multimap(__l, __n, hasher(), key_equal(), __a)\n+      { }\n+\n+      unordered_multimap(initializer_list<value_type> __l,\n+\t\t\t size_type __n, const hasher& __hf,\n+\t\t\t const allocator_type& __a)\n+      : unordered_multimap(__l, __n, __hf, key_equal(), __a)\n       { }\n \n       /// Copy assignment operator.\n@@ -1076,7 +1128,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t{ return _M_h.emplace(std::forward<_Args>(__args)...); }\n \n       /**\n-       *  @brief Attempts to build and insert a std::pair into the %unordered_multimap.\n+       *  @brief Attempts to build and insert a std::pair into the\n+       *  %unordered_multimap.\n        *\n        *  @param  __pos  An iterator that serves as a hint as to where the pair\n        *                should be inserted."}, {"sha": "664d97ef27a4e2773e2d123cc01b0252753b74db", "filename": "libstdc++-v3/include/bits/unordered_set.h", "status": "modified", "additions": 82, "deletions": 32, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e55b80f5f41b471d59b8f2c9e04c09bc22771541/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e55b80f5f41b471d59b8f2c9e04c09bc22771541/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h?ref=e55b80f5f41b471d59b8f2c9e04c09bc22771541", "patch": "@@ -140,16 +140,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       : _M_h(__n, __hf, __eql, __a)\n       { }\n \n-      unordered_set(size_type __n, const allocator_type& __a)\n-      : _M_h(__n, hasher(), key_equal(), __a)\n-      { }\n-\n-      unordered_set(size_type __n,\n-                    const hasher& __hf,\n-                    const allocator_type& __a)\n-      : unordered_set(__n, __hf, key_equal(), __a)\n-      { }\n-\n       /**\n        *  @brief  Builds an %unordered_set from a range.\n        *  @param  __first  An input iterator.\n@@ -184,7 +174,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       explicit\n       unordered_set(const allocator_type& __a)\n-\t: _M_h(__a)\n+      : _M_h(__a)\n       { }\n \n       /*\n@@ -194,7 +184,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       unordered_set(const unordered_set& __uset,\n \t\t    const allocator_type& __a)\n-\t: _M_h(__uset._M_h, __a)\n+      : _M_h(__uset._M_h, __a)\n       { }\n \n       /*\n@@ -204,7 +194,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       unordered_set(unordered_set&& __uset,\n \t\t    const allocator_type& __a)\n-\t: _M_h(std::move(__uset._M_h), __a)\n+      : _M_h(std::move(__uset._M_h), __a)\n       { }\n \n       /**\n@@ -223,7 +213,42 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t    const hasher& __hf = hasher(),\n \t\t    const key_equal& __eql = key_equal(),\n \t\t    const allocator_type& __a = allocator_type())\n-\t: _M_h(__l, __n, __hf, __eql, __a)\n+      : _M_h(__l, __n, __hf, __eql, __a)\n+      { }\n+\n+      unordered_set(size_type __n, const allocator_type& __a)\n+      : unordered_set(__n, hasher(), key_equal(), __a)\n+      { }\n+\n+      unordered_set(size_type __n, const hasher& __hf,\n+\t\t    const allocator_type& __a)\n+      : unordered_set(__n, __hf, key_equal(), __a)\n+      { }\n+\n+      template<typename _InputIterator>\n+\tunordered_set(_InputIterator __first, _InputIterator __last,\n+\t\t      size_type __n,\n+\t\t      const allocator_type& __a)\n+\t: unordered_set(__first, __last, __n, hasher(), key_equal(), __a)\n+\t{ }\n+\n+      template<typename _InputIterator>\n+\tunordered_set(_InputIterator __first, _InputIterator __last,\n+\t\t      size_type __n, const hasher& __hf,\n+\t\t      const allocator_type& __a)\n+\t: unordered_set(__first, __last, __n, __hf, key_equal(), __a)\n+\t{ }\n+\n+      unordered_set(initializer_list<value_type> __l,\n+\t\t    size_type __n,\n+\t\t    const allocator_type& __a)\n+      : unordered_set(__l, __n, hasher(), key_equal(), __a)\n+      { }\n+\n+      unordered_set(initializer_list<value_type> __l,\n+\t\t    size_type __n, const hasher& __hf,\n+\t\t    const allocator_type& __a)\n+      : unordered_set(__l, __n, __hf, key_equal(), __a)\n       { }\n \n       /// Copy assignment operator.\n@@ -712,8 +737,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename _Value1, typename _Hash1, typename _Pred1,\n \t       typename _Alloc1>\n         friend bool\n-      operator==(const unordered_set<_Value1, _Hash1, _Pred1, _Alloc1>&,\n-\t\t const unordered_set<_Value1, _Hash1, _Pred1, _Alloc1>&);\n+        operator==(const unordered_set<_Value1, _Hash1, _Pred1, _Alloc1>&,\n+\t\t   const unordered_set<_Value1, _Hash1, _Pred1, _Alloc1>&);\n     };\n \n   /**\n@@ -789,16 +814,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       : _M_h(__n, __hf, __eql, __a)\n       { }\n \n-      unordered_multiset(size_type __n, const allocator_type& __a)\n-      : _M_h(__n, hasher(), key_equal(), __a)\n-      { }\n-\n-      unordered_multiset(size_type __n,\n-\t\t\t const hasher& __hf,\n-\t\t\t const allocator_type& __a)\n-      : _M_h(__n, __hf, key_equal(), __a)\n-      { }\n-\n       /**\n        *  @brief  Builds an %unordered_multiset from a range.\n        *  @param  __first  An input iterator.\n@@ -843,7 +858,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t\t const hasher& __hf = hasher(),\n \t\t\t const key_equal& __eql = key_equal(),\n \t\t\t const allocator_type& __a = allocator_type())\n-\t: _M_h(__l, __n, __hf, __eql, __a)\n+      : _M_h(__l, __n, __hf, __eql, __a)\n       { }\n \n       /// Copy assignment operator.\n@@ -860,7 +875,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       explicit\n       unordered_multiset(const allocator_type& __a)\n-\t: _M_h(__a)\n+      : _M_h(__a)\n       { }\n \n       /*\n@@ -870,7 +885,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       unordered_multiset(const unordered_multiset& __umset,\n \t\t\t const allocator_type& __a)\n-\t: _M_h(__umset._M_h, __a)\n+      : _M_h(__umset._M_h, __a)\n       { }\n \n       /*\n@@ -880,7 +895,42 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       unordered_multiset(unordered_multiset&& __umset,\n \t\t\t const allocator_type& __a)\n-\t: _M_h(std::move(__umset._M_h), __a)\n+      : _M_h(std::move(__umset._M_h), __a)\n+      { }\n+\n+      unordered_multiset(size_type __n, const allocator_type& __a)\n+      : unordered_multiset(__n, hasher(), key_equal(), __a)\n+      { }\n+\n+      unordered_multiset(size_type __n, const hasher& __hf,\n+\t\t\t const allocator_type& __a)\n+      : unordered_multiset(__n, __hf, key_equal(), __a)\n+      { }\n+\n+      template<typename _InputIterator>\n+\tunordered_multiset(_InputIterator __first, _InputIterator __last,\n+\t\t\t   size_type __n,\n+\t\t\t   const allocator_type& __a)\n+\t: unordered_multiset(__first, __last, __n, hasher(), key_equal(), __a)\n+\t{ }\n+\n+      template<typename _InputIterator>\n+\tunordered_multiset(_InputIterator __first, _InputIterator __last,\n+\t\t\t   size_type __n, const hasher& __hf,\n+\t\t\t   const allocator_type& __a)\n+\t: unordered_multiset(__first, __last, __n, __hf, key_equal(), __a)\n+\t{ }\n+\n+      unordered_multiset(initializer_list<value_type> __l,\n+\t\t\t size_type __n,\n+\t\t\t const allocator_type& __a)\n+      : unordered_multiset(__l, __n, hasher(), key_equal(), __a)\n+      { }\n+\n+      unordered_multiset(initializer_list<value_type> __l,\n+\t\t\t size_type __n, const hasher& __hf,\n+\t\t\t const allocator_type& __a)\n+      : unordered_multiset(__l, __n, __hf, key_equal(), __a)\n       { }\n \n       /**\n@@ -891,8 +941,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  in the initializer list @a __l.\n        *\n        *  Note that the assignment completely changes the %unordered_multiset\n-       *  and that the resulting %unordered_set's size is the same as the number\n-       *  of elements assigned.  Old data may be lost.\n+       *  and that the resulting %unordered_multiset's size is the same as the\n+       *  number of elements assigned. Old data may be lost.\n        */\n       unordered_multiset&\n       operator=(initializer_list<value_type> __l)"}, {"sha": "3f46641d678f1d5469ffbce6587947bbc2dd745e", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e55b80f5f41b471d59b8f2c9e04c09bc22771541/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e55b80f5f41b471d59b8f2c9e04c09bc22771541/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=e55b80f5f41b471d59b8f2c9e04c09bc22771541", "patch": "@@ -129,6 +129,44 @@ namespace __debug\n \t\t    const allocator_type& __a = allocator_type())\n       : _Base(__l, __n, __hf, __eql, __a) { }\n \n+      unordered_map(size_type __n, const allocator_type& __a)\n+      : unordered_map(__n, hasher(), key_equal(), __a)\n+      { }\n+\n+      unordered_map(size_type __n,\n+\t\t    const hasher& __hf,\n+\t\t    const allocator_type& __a)\n+      : unordered_map(__n, __hf, key_equal(), __a)\n+      { }\n+\n+      template<typename _InputIterator>\n+\tunordered_map(_InputIterator __first, _InputIterator __last,\n+\t\t      size_type __n,\n+\t\t      const allocator_type& __a)\n+\t  : unordered_map(__first, __last, __n, hasher(), key_equal(), __a)\n+\t{ }\n+\n+      template<typename _InputIterator>\n+\tunordered_map(_InputIterator __first, _InputIterator __last,\n+\t\t      size_type __n,\n+\t\t      const hasher& __hf,\n+\t\t      const allocator_type& __a)\n+\t  : unordered_map(__first, __last, __n, __hf, key_equal(), __a)\n+\t{ }\n+\n+      unordered_map(initializer_list<value_type> __l,\n+\t\t    size_type __n,\n+\t\t    const allocator_type& __a)\n+\t: unordered_map(__l, __n, hasher(), key_equal(), __a)\n+      { }\n+\n+      unordered_map(initializer_list<value_type> __l,\n+\t\t    size_type __n,\n+\t\t    const hasher& __hf,\n+\t\t    const allocator_type& __a)\n+\t: unordered_map(__l, __n, __hf, key_equal(), __a)\n+      { }\n+\n       ~unordered_map() = default;\n \n       unordered_map&\n@@ -544,6 +582,41 @@ namespace __debug\n \t\t\t const allocator_type& __a = allocator_type())\n       : _Base(__l, __n, __hf, __eql, __a) { }\n \n+      unordered_multimap(size_type __n, const allocator_type& __a)\n+      : unordered_multimap(__n, hasher(), key_equal(), __a)\n+      { }\n+\n+      unordered_multimap(size_type __n, const hasher& __hf,\n+\t\t\t const allocator_type& __a)\n+      : unordered_multimap(__n, __hf, key_equal(), __a)\n+      { }\n+\n+      template<typename _InputIterator>\n+\tunordered_multimap(_InputIterator __first, _InputIterator __last,\n+\t\t\t   size_type __n,\n+\t\t\t   const allocator_type& __a)\n+\t  : unordered_multimap(__first, __last, __n, hasher(), key_equal(), __a)\n+\t{ }\n+\n+      template<typename _InputIterator>\n+\tunordered_multimap(_InputIterator __first, _InputIterator __last,\n+\t\t\t   size_type __n, const hasher& __hf,\n+\t\t\t   const allocator_type& __a)\n+\t  : unordered_multimap(__first, __last, __n, __hf, key_equal(), __a)\n+\t{ }\n+\n+      unordered_multimap(initializer_list<value_type> __l,\n+\t\t\t size_type __n,\n+\t\t\t const allocator_type& __a)\n+\t: unordered_multimap(__l, __n, hasher(), key_equal(), __a)\n+      { }\n+\n+      unordered_multimap(initializer_list<value_type> __l,\n+\t\t\t size_type __n, const hasher& __hf,\n+\t\t\t const allocator_type& __a)\n+\t: unordered_multimap(__l, __n, __hf, key_equal(), __a)\n+      { }\n+\n       ~unordered_multimap() = default;\n \n       unordered_multimap&"}, {"sha": "10a9c270ed0bff61f7296eba8fc555d1669204d7", "filename": "libstdc++-v3/include/debug/unordered_set", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e55b80f5f41b471d59b8f2c9e04c09bc22771541/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e55b80f5f41b471d59b8f2c9e04c09bc22771541/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set?ref=e55b80f5f41b471d59b8f2c9e04c09bc22771541", "patch": "@@ -129,6 +129,41 @@ namespace __debug\n \t\t    const allocator_type& __a = allocator_type())\n       : _Base(__l, __n, __hf, __eql, __a) { }\n \n+      unordered_set(size_type __n, const allocator_type& __a)\n+\t: unordered_set(__n, hasher(), key_equal(), __a)\n+      { }\n+\n+      unordered_set(size_type __n, const hasher& __hf,\n+\t\t    const allocator_type& __a)\n+\t: unordered_set(__n, __hf, key_equal(), __a)\n+      { }\n+\n+      template<typename _InputIterator>\n+\tunordered_set(_InputIterator __first, _InputIterator __last,\n+\t\t      size_type __n,\n+\t\t      const allocator_type& __a)\n+\t  : unordered_set(__first, __last, __n, hasher(), key_equal(), __a)\n+\t{ }\n+\n+      template<typename _InputIterator>\n+\tunordered_set(_InputIterator __first, _InputIterator __last,\n+\t\t      size_type __n, const hasher& __hf,\n+\t\t      const allocator_type& __a)\n+\t  : unordered_set(__first, __last, __n, __hf, key_equal(), __a)\n+\t{ }\n+\n+      unordered_set(initializer_list<value_type> __l,\n+\t\t    size_type __n,\n+\t\t    const allocator_type& __a)\n+\t: unordered_set(__l, __n, hasher(), key_equal(), __a)\n+      { }\n+\n+      unordered_set(initializer_list<value_type> __l,\n+\t\t    size_type __n, const hasher& __hf,\n+\t\t    const allocator_type& __a)\n+\t: unordered_set(__l, __n, __hf, key_equal(), __a)\n+      { }\n+\n       ~unordered_set() = default;\n \n       unordered_set&\n@@ -540,6 +575,41 @@ namespace __debug\n \t\t\t const allocator_type& __a = allocator_type())\n       : _Base(__l, __n, __hf, __eql, __a) { }\n \n+      unordered_multiset(size_type __n, const allocator_type& __a)\n+\t: unordered_multiset(__n, hasher(), key_equal(), __a)\n+      { }\n+\n+      unordered_multiset(size_type __n, const hasher& __hf,\n+\t\t\t const allocator_type& __a)\n+\t: unordered_multiset(__n, __hf, key_equal(), __a)\n+      { }\n+\n+      template<typename _InputIterator>\n+\tunordered_multiset(_InputIterator __first, _InputIterator __last,\n+\t\t\t   size_type __n,\n+\t\t\t   const allocator_type& __a)\n+\t  : unordered_multiset(__first, __last, __n, hasher(), key_equal(), __a)\n+\t{ }\n+\n+      template<typename _InputIterator>\n+\tunordered_multiset(_InputIterator __first, _InputIterator __last,\n+\t\t\t   size_type __n, const hasher& __hf,\n+\t\t\t   const allocator_type& __a)\n+\t  : unordered_multiset(__first, __last, __n, __hf, key_equal(), __a)\n+\t{ }\n+\n+      unordered_multiset(initializer_list<value_type> __l,\n+\t\t\t size_type __n,\n+\t\t\t const allocator_type& __a)\n+\t: unordered_multiset(__l, __n, hasher(), key_equal(), __a)\n+      { }\n+\n+      unordered_multiset(initializer_list<value_type> __l,\n+\t\t\t size_type __n, const hasher& __hf,\n+\t\t\t const allocator_type& __a)\n+\t: unordered_multiset(__l, __n, __hf, key_equal(), __a)\n+      { }\n+\n       ~unordered_multiset() = default;\n \n       unordered_multiset&"}, {"sha": "480fabad172671ee14416e64755940374f0b3762", "filename": "libstdc++-v3/include/profile/unordered_map", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e55b80f5f41b471d59b8f2c9e04c09bc22771541/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e55b80f5f41b471d59b8f2c9e04c09bc22771541/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map?ref=e55b80f5f41b471d59b8f2c9e04c09bc22771541", "patch": "@@ -119,6 +119,41 @@ namespace __profile\n \t\t    const allocator_type& __a = allocator_type())\n       : _Base(__l, __n, __hf, __eql, __a) { }\n \n+      unordered_map(size_type __n, const allocator_type& __a)\n+      : unordered_map(__n, hasher(), key_equal(), __a)\n+      { }\n+\n+      unordered_map(size_type __n, const hasher& __hf,\n+\t\t    const allocator_type& __a)\n+      : unordered_map(__n, __hf, key_equal(), __a)\n+      { }\n+\n+      template<typename _InputIterator>\n+\tunordered_map(_InputIterator __first, _InputIterator __last,\n+\t\t      size_type __n,\n+\t\t      const allocator_type& __a)\n+\t  : unordered_map(__first, __last, __n, hasher(), key_equal(), __a)\n+\t{ }\n+\n+      template<typename _InputIterator>\n+\tunordered_map(_InputIterator __first, _InputIterator __last,\n+\t\t      size_type __n, const hasher& __hf,\n+\t\t      const allocator_type& __a)\n+\t  : unordered_map(__first, __last, __n, __hf, key_equal(), __a)\n+\t{ }\n+\n+      unordered_map(initializer_list<value_type> __l,\n+\t\t    size_type __n,\n+\t\t    const allocator_type& __a)\n+\t: unordered_map(__l, __n, hasher(), key_equal(), __a)\n+      { }\n+\n+      unordered_map(initializer_list<value_type> __l,\n+\t\t    size_type __n, const hasher& __hf,\n+\t\t    const allocator_type& __a)\n+\t: unordered_map(__l, __n, __hf, key_equal(), __a)\n+      { }\n+\n       unordered_map&\n       operator=(const unordered_map&) = default;\n \n@@ -361,6 +396,41 @@ namespace __profile\n \t\t\t const allocator_type& __a = allocator_type())\n       : _Base(__l, __n, __hf, __eql, __a) { }\n \n+      unordered_multimap(size_type __n, const allocator_type& __a)\n+      : unordered_multimap(__n, hasher(), key_equal(), __a)\n+      { }\n+\n+      unordered_multimap(size_type __n, const hasher& __hf,\n+\t\t\t const allocator_type& __a)\n+      : unordered_multimap(__n, __hf, key_equal(), __a)\n+      { }\n+\n+      template<typename _InputIterator>\n+\tunordered_multimap(_InputIterator __first, _InputIterator __last,\n+\t\t\t   size_type __n,\n+\t\t\t   const allocator_type& __a)\n+\t  : unordered_multimap(__first, __last, __n, hasher(), key_equal(), __a)\n+\t{ }\n+\n+      template<typename _InputIterator>\n+\tunordered_multimap(_InputIterator __first, _InputIterator __last,\n+\t\t\t   size_type __n, const hasher& __hf,\n+\t\t\t   const allocator_type& __a)\n+\t  : unordered_multimap(__first, __last, __n, __hf, key_equal(), __a)\n+\t{ }\n+\n+      unordered_multimap(initializer_list<value_type> __l,\n+\t\t\t size_type __n,\n+\t\t\t const allocator_type& __a)\n+\t: unordered_multimap(__l, __n, hasher(), key_equal(), __a)\n+      { }\n+\n+      unordered_multimap(initializer_list<value_type> __l,\n+\t\t\t size_type __n, const hasher& __hf,\n+\t\t\t const allocator_type& __a)\n+\t: unordered_multimap(__l, __n, __hf, key_equal(), __a)\n+      { }\n+\n       unordered_multimap&\n       operator=(const unordered_multimap&) = default;\n "}, {"sha": "15950b9f4715a3727e56fe63c685fff9e85ee46d", "filename": "libstdc++-v3/include/profile/unordered_set", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e55b80f5f41b471d59b8f2c9e04c09bc22771541/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e55b80f5f41b471d59b8f2c9e04c09bc22771541/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set?ref=e55b80f5f41b471d59b8f2c9e04c09bc22771541", "patch": "@@ -125,6 +125,41 @@ namespace __profile\n       : _Base(__l, __n, __hf, __eql, __a)\n       { }\n \n+      unordered_set(size_type __n, const allocator_type& __a)\n+\t: unordered_set(__n, hasher(), key_equal(), __a)\n+      { }\n+\n+      unordered_set(size_type __n, const hasher& __hf,\n+\t\t    const allocator_type& __a)\n+\t: unordered_set(__n, __hf, key_equal(), __a)\n+      { }\n+\n+      template<typename _InputIterator>\n+\tunordered_set(_InputIterator __first, _InputIterator __last,\n+\t\t      size_type __n,\n+\t\t      const allocator_type& __a)\n+\t  : unordered_set(__first, __last, __n, hasher(), key_equal(), __a)\n+\t{ }\n+\n+      template<typename _InputIterator>\n+\tunordered_set(_InputIterator __first, _InputIterator __last,\n+\t\t      size_type __n, const hasher& __hf,\n+\t\t      const allocator_type& __a)\n+\t  : unordered_set(__first, __last, __n, __hf, key_equal(), __a)\n+\t{ }\n+\n+      unordered_set(initializer_list<value_type> __l,\n+\t\t    size_type __n,\n+\t\t    const allocator_type& __a)\n+\t: unordered_set(__l, __n, hasher(), key_equal(), __a)\n+      { }\n+\n+      unordered_set(initializer_list<value_type> __l,\n+\t\t    size_type __n, const hasher& __hf,\n+\t\t    const allocator_type& __a)\n+\t: unordered_set(__l, __n, __hf, key_equal(), __a)\n+      { }\n+\n       unordered_set&\n       operator=(const unordered_set&) = default;\n \n@@ -346,6 +381,41 @@ namespace __profile\n \t: _Base(__l, __n, __hf, __eql, __a)\n       { }\n \n+      unordered_multiset(size_type __n, const allocator_type& __a)\n+\t: unordered_multiset(__n, hasher(), key_equal(), __a)\n+      { }\n+\n+      unordered_multiset(size_type __n, const hasher& __hf,\n+\t\t\t const allocator_type& __a)\n+\t: unordered_multiset(__n, __hf, key_equal(), __a)\n+      { }\n+\n+      template<typename _InputIterator>\n+\tunordered_multiset(_InputIterator __first, _InputIterator __last,\n+\t\t\t   size_type __n,\n+\t\t\t   const allocator_type& __a)\n+\t  : unordered_multiset(__first, __last, __n, hasher(), key_equal(), __a)\n+\t{ }\n+\n+      template<typename _InputIterator>\n+\tunordered_multiset(_InputIterator __first, _InputIterator __last,\n+\t\t\t   size_type __n, const hasher& __hf,\n+\t\t\t   const allocator_type& __a)\n+\t  : unordered_multiset(__first, __last, __n, __hf, key_equal(), __a)\n+\t{ }\n+\n+      unordered_multiset(initializer_list<value_type> __l,\n+\t\t\t size_type __n,\n+\t\t\t const allocator_type& __a)\n+\t: unordered_multiset(__l, __n, hasher(), key_equal(), __a)\n+      { }\n+\n+      unordered_multiset(initializer_list<value_type> __l,\n+\t\t\t size_type __n, const hasher& __hf,\n+\t\t\t const allocator_type& __a)\n+\t: unordered_multiset(__l, __n, __hf, key_equal(), __a)\n+      { }\n+\n       unordered_multiset&\n       operator=(const unordered_multiset&) = default;\n "}]}