{"sha": "2e5e346da2c4c6dea5b514894fc0bbcaf4bd3d99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU1ZTM0NmRhMmM0YzZkZWE1YjUxNDg5NGZjMGJiY2FmNGJkM2Q5OQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2011-01-10T16:48:42Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2011-01-10T16:48:42Z"}, "message": "re PR tree-optimization/47141 (segfault)\n\n\t* PR tree-optimization/47141\n\t* ipa-split.c (split_function): Handle case where we are returning a\n\tvalue and the return block has a virtual operand phi.\n\n\t* gcc.c-torture/compile/pr47141.c: New test.\n\nApproved by richie in IRC\n\nFrom-SVN: r168634", "tree": {"sha": "3414c4dc8a1eecc61ab246c7126be1ca6fb775d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3414c4dc8a1eecc61ab246c7126be1ca6fb775d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e5e346da2c4c6dea5b514894fc0bbcaf4bd3d99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e5e346da2c4c6dea5b514894fc0bbcaf4bd3d99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e5e346da2c4c6dea5b514894fc0bbcaf4bd3d99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e5e346da2c4c6dea5b514894fc0bbcaf4bd3d99/comments", "author": null, "committer": null, "parents": [{"sha": "cf9712ccc092e054e2a48d78c275b709700a0032", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf9712ccc092e054e2a48d78c275b709700a0032", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf9712ccc092e054e2a48d78c275b709700a0032"}], "stats": {"total": 52, "additions": 45, "deletions": 7}, "files": [{"sha": "b4446d6546c376d16465532d13c3afb3510338e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e5e346da2c4c6dea5b514894fc0bbcaf4bd3d99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e5e346da2c4c6dea5b514894fc0bbcaf4bd3d99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e5e346da2c4c6dea5b514894fc0bbcaf4bd3d99", "patch": "@@ -1,3 +1,9 @@\n+2011-01-10  Jeff Law  <law@redhat.com>\n+\n+\t* PR tree-optimization/47141\n+\t* ipa-split.c (split_function): Handle case where we are\n+\treturning a value and the return block has a virtual operand phi.\n+\n 2011-01-10  Jan Hubicka  <jh@suse.cz>\n \n \tPR tree-optimization/47234 "}, {"sha": "ef6467b4e0114462af0617bf5aed253d85ee9b55", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e5e346da2c4c6dea5b514894fc0bbcaf4bd3d99/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e5e346da2c4c6dea5b514894fc0bbcaf4bd3d99/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=2e5e346da2c4c6dea5b514894fc0bbcaf4bd3d99", "patch": "@@ -1016,20 +1016,31 @@ split_function (struct split_point *split_point)\n       e->probability = REG_BR_PROB_BASE;\n       e->count = new_return_bb->count;\n       bitmap_set_bit (split_point->split_bbs, new_return_bb->index);\n-      /* We change CFG in a way tree-inline is not able to compensate on while\n-\t updating PHIs.  There are only virtuals in return_bb, so recompute\n-\t them.  */\n+    }\n+  /* When we pass around the value, use existing return block.  */\n+  else\n+    bitmap_set_bit (split_point->split_bbs, return_bb->index);\n+\n+  /* If RETURN_BB has virtual operand PHIs, they must be removed and the\n+     virtual operand marked for renaming as we change the CFG in a way that\n+     tree-inline is not able to compensate for. \n+\n+     Note this can happen whether or not we have a return value.  If we have\n+     a return value, then RETURN_BB may have PHIs for real operands too.  */\n+  if (return_bb != EXIT_BLOCK_PTR)\n+    {\n       for (gsi = gsi_start_phis (return_bb); !gsi_end_p (gsi);)\n \t{\n \t  gimple stmt = gsi_stmt (gsi);\n-\t  gcc_assert (!is_gimple_reg (gimple_phi_result (stmt)));\n+\t  if (is_gimple_reg (gimple_phi_result (stmt)))\n+\t    {\n+\t      gsi_next (&gsi);\n+\t      continue;\n+\t    }\n \t  mark_virtual_phi_result_for_renaming (stmt);\n \t  remove_phi_node (&gsi, true);\n \t}\n     }\n-  /* When we pass aorund the value, use existing return block.  */\n-  else\n-    bitmap_set_bit (split_point->split_bbs, return_bb->index);\n \n   /* Now create the actual clone.  */\n   rebuild_cgraph_edges ();"}, {"sha": "1b0d6f59b97bfd64c85209cc2051eb29dfdd41b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e5e346da2c4c6dea5b514894fc0bbcaf4bd3d99/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e5e346da2c4c6dea5b514894fc0bbcaf4bd3d99/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2e5e346da2c4c6dea5b514894fc0bbcaf4bd3d99", "patch": "@@ -1,3 +1,8 @@\n+2011-01-10  Jeff Law <law@redhat.com>\n+\n+\t* PR tree-optimization/47141\n+\t* gcc.c-torture/compile/pr47141.c: New test.\n+\n 2011-01-10  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR testsuite/46230"}, {"sha": "875e0fdd1c22ac4b70bc9d1fbfb858d5748f17ad", "filename": "gcc/testsuite/gcc.c-torture/compile/pr47141.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e5e346da2c4c6dea5b514894fc0bbcaf4bd3d99/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr47141.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e5e346da2c4c6dea5b514894fc0bbcaf4bd3d99/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr47141.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr47141.c?ref=2e5e346da2c4c6dea5b514894fc0bbcaf4bd3d99", "patch": "@@ -0,0 +1,16 @@\n+int\n+foo (__UINTPTR_TYPE__ x)\n+{\n+  int a = 6;\n+  int *b = &a;\n+  if (x)\n+    for (a = 0; a; a++)\n+      ;\n+  return a;\n+}\n+\n+void\n+bar (void)\n+{\n+  foo ((__UINTPTR_TYPE__) foo);\n+}"}]}