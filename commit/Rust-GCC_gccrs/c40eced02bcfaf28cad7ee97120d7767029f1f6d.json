{"sha": "c40eced02bcfaf28cad7ee97120d7767029f1f6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQwZWNlZDAyYmNmYWYyOGNhZDdlZTk3MTIwZDc3NjcwMjlmMWY2ZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-03-13T12:15:06Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-03-13T12:15:06Z"}, "message": "re PR tree-optimization/56608 (SLP seems to produce incorrect value with -ffast-math)\n\n2013-03-13  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/56608\n\t* tree-vect-slp.c (vect_schedule_slp): Do not remove scalar\n\tcalls when vectorizing basic-blocks.\n\n\t* gcc.dg/vect/fast-math-bb-slp-call-3.c: New testcase.\n\nFrom-SVN: r196632", "tree": {"sha": "0a65db66bff99bc90eccf076a4a59308f90f93f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a65db66bff99bc90eccf076a4a59308f90f93f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c40eced02bcfaf28cad7ee97120d7767029f1f6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c40eced02bcfaf28cad7ee97120d7767029f1f6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c40eced02bcfaf28cad7ee97120d7767029f1f6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c40eced02bcfaf28cad7ee97120d7767029f1f6d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "15ff4345c4be1bb0de1766f58607fbe74325ec87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15ff4345c4be1bb0de1766f58607fbe74325ec87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15ff4345c4be1bb0de1766f58607fbe74325ec87"}], "stats": {"total": 89, "additions": 88, "deletions": 1}, "files": [{"sha": "6a6d57268d4cb16093139b646b38a05419b680da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c40eced02bcfaf28cad7ee97120d7767029f1f6d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c40eced02bcfaf28cad7ee97120d7767029f1f6d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c40eced02bcfaf28cad7ee97120d7767029f1f6d", "patch": "@@ -1,3 +1,9 @@\n+2013-03-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56608\n+\t* tree-vect-slp.c (vect_schedule_slp): Do not remove scalar\n+\tcalls when vectorizing basic-blocks.\n+\n 2013-03-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR plugins/45078"}, {"sha": "c08f340019b93fdba395f354b6da45f40a684c90", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c40eced02bcfaf28cad7ee97120d7767029f1f6d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c40eced02bcfaf28cad7ee97120d7767029f1f6d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c40eced02bcfaf28cad7ee97120d7767029f1f6d", "patch": "@@ -1,3 +1,8 @@\n+2013-03-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56608\n+\t* gcc.dg/vect/fast-math-bb-slp-call-3.c: New testcase.\n+\n 2013-03-13  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/56611"}, {"sha": "5878d418f50c945934ea2c40edaab7a3554e131b", "filename": "gcc/testsuite/gcc.dg/vect/fast-math-bb-slp-call-3.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c40eced02bcfaf28cad7ee97120d7767029f1f6d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-bb-slp-call-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c40eced02bcfaf28cad7ee97120d7767029f1f6d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-bb-slp-call-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-bb-slp-call-3.c?ref=c40eced02bcfaf28cad7ee97120d7767029f1f6d", "patch": "@@ -0,0 +1,68 @@\n+#include <stdlib.h>\n+#include <math.h>\n+\n+#define MIN(a, b) (((a) < (b)) ? (a) : (b))\n+#define MAX(a, b) (((a) > (b)) ? (a) : (b))\n+\n+typedef struct {\n+    int initialHeight, initialWidth;\n+    int rotatedHeight, rotatedWidth;\n+    int autoCropHeight, autoCropWidth;\n+} ufraw_data;\n+\n+void __attribute__((noinline,noclone))\n+ufraw_test(ufraw_data *uf)\n+{\n+  int iWidth = uf->initialWidth;\n+  int iHeight = uf->initialHeight;\n+  double aspectRatio = ((double)iWidth) / iHeight;\n+  double midX = iWidth / 2.0 - 0.5;\n+  double midY = iHeight / 2.0 - 0.5;\n+  double maxX = 0, maxY = 0;\n+  double minX = 999999, minY = 999999;\n+  double lastX = 0, lastY = 0, area = 0;\n+  double scale;\n+  int i;\n+  for (i = 0; i < iWidth + iHeight - 1; i++)\n+    {\n+      int x, y;\n+      if (i < iWidth) { // Trace the left border of the image\n+\t  x = i;\n+\t  y = 0;\n+      } else { // Trace the bottom border of the image\n+\t  x = iWidth - 1;\n+\t  y = i - iWidth + 1;\n+      }\n+      double srcX = x - midX;\n+      double srcY = y - midY;\n+      // A digital planimeter:\n+      area += srcY * lastX - srcX * lastY;\n+      lastX = srcX;\n+      lastY = srcY;\n+      maxX = MAX(maxX, fabs(srcX));\n+      maxY = MAX(maxY, fabs(srcY));\n+      if (fabs(srcX / srcY) > aspectRatio)\n+\tminX = MIN(minX, fabs(srcX));\n+      else\n+\tminY = MIN(minY, fabs(srcY));\n+    }\n+  scale = sqrt((iWidth - 1) * (iHeight - 1) / area);\n+  uf->rotatedWidth = MIN(ceil(2 * maxX + 1.0) * scale, 2 * iWidth);\n+  uf->rotatedHeight = MIN(ceil(2 * maxY + 1.0) * scale, 2 * iHeight);\n+  uf->autoCropWidth = MIN(floor(2 * minX) * scale, 2 * iWidth);\n+  uf->autoCropHeight = MIN(floor(2 * minY) * scale, 2 * iHeight);\n+  if (uf->autoCropWidth != 3)\n+    abort ();\n+}\n+\n+int main()\n+{\n+  ufraw_data uf_data;\n+  ufraw_data *uf = &uf_data;\n+  uf->initialWidth = 4;\n+  uf->initialHeight = 5;\n+  ufraw_test(uf);\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"slp\" } } */"}, {"sha": "e184326c3b593132785ca446e9ceb98825671e6e", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c40eced02bcfaf28cad7ee97120d7767029f1f6d/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c40eced02bcfaf28cad7ee97120d7767029f1f6d/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=c40eced02bcfaf28cad7ee97120d7767029f1f6d", "patch": "@@ -3181,7 +3181,15 @@ vect_schedule_slp (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo)\n       unsigned int j;\n       gimple_stmt_iterator gsi;\n \n-      vect_remove_slp_scalar_calls (root);\n+      /* Remove scalar call stmts.  Do not do this for basic-block\n+\t vectorization as not all uses may be vectorized.\n+\t ???  Why should this be necessary?  DCE should be able to\n+\t remove the stmts itself.\n+\t ???  For BB vectorization we can as well remove scalar\n+\t stmts starting from the SLP tree root if they have no\n+\t uses.  */\n+      if (loop_vinfo)\n+\tvect_remove_slp_scalar_calls (root);\n \n       for (j = 0; SLP_TREE_SCALAR_STMTS (root).iterate (j, &store)\n                   && j < SLP_INSTANCE_GROUP_SIZE (instance); j++)"}]}