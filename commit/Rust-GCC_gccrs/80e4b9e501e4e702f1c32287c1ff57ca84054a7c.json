{"sha": "80e4b9e501e4e702f1c32287c1ff57ca84054a7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBlNGI5ZTUwMWU0ZTcwMmYxYzMyMjg3YzFmZjU3Y2E4NDA1NGE3Yw==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2011-06-07T19:37:35Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2011-06-07T19:37:35Z"}, "message": "In libobjc/: 2011-06-07 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn libobjc/:\n2011-06-07  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\tRemoved the Traditional Objective-C runtime public API.\n\t* Makefile.in (OBJC_DEPRECATED_H): Variable removed.\n\t(install-headers): Do not create the objc/deprecated directory and\n\tdo not install the deprecated headers.\n\t(OBJC_H): Removed encoding.h and objc-api.h.\n\t* Object.m: Removed all methods with the exception of -class and\n\t-isEqual:.  Updated includes.  ([-class]): Use Modern API.\n\t* objc/Object.h: Do not include deprecated/Object.h.\n\t* objc/deprecated/Object.h: Removed.\n\t* linking.m (__objc_linking): Call [Object class] instead of\n\t[Object name].\n\t* Protocol.m: Removed all methods with the exception of -isEqual:.\n\tUpdated includes.\n\t* objc/Protocol.h: Do not include deprecated/Protocol.h.\n\t* objc/deprecated/Protocol.h: Removed.\n\t* objc/deprecated/struct_objc_symtab.h: Removed.\n\t* objc/deprecated/struct_objc_module.h: Removed.\n\t* objc/deprecated/struct_objc_ivar.h: Removed.\n\t* objc/deprecated/struct_objc_ivar_list.h: Removed.\n\t* objc/deprecated/struct_objc_method.h: Removed.\n\t* objc/deprecated/struct_objc_method_list.h: Removed.\n\t* objc/deprecated/struct_objc_protocol_list.h: Removed.\n\t* objc/deprecated/struct_objc_category.h: Removed.\n\t* objc/deprecated/MetaClass.h: Removed.\n\t* objc/deprecated/objc_msg_sendv.h: Removed.  \n\t* objc/deprecated/README: Removed.\n\t* objc/deprecated/struct_objc_class.h: Removed.\n\t* objc/deprecated/struct_objc_protocol.h: Removed.\n\t* objc/deprecated/struct_objc_selector.h: Removed.\n\t* objc/encoding.h: Removed.\n\t* objc/message.h (struct objc_super): Removed the definition for\n\tthe Traditional Objective-C runtime API.\n\t* objc/objc.h: Do not include objc/objc-decls.h.\n\tdeprecated/struct_objc_selector.h, deprecated/MetaClass.h,\n\tdeprecated/struct_objc_class.h, deprecated/struct_objc_protocol.h\n\tand deprecated/objc_msg_sendv.h.  Uncommented new definition of\n\tProtocol *.\n\t* objc/objc-api.h: Removed.\n\t* objc/runtime.h: Updated comments.  Removed check to detect\n\tconcurrent usage of Traditional and Modern APIs.\n\t* objc-private/module-abi-8.h: Always define struct objc_class and\n\tstruct objc_protocol.  (struct objc_protocol_list): Changed type\n\tof 'list' argument from 'Protocol *' to 'struct objc_protocol *'.\n\t(class_get_instance_size): Added.\n\t* objc-private/protocols.h (__objc_protocols_add_protocol): Take a\n\t'struct objc_protocol *' as argument, not a 'Protocol *'.\n\t* objc-private/runtime.h: Updated comments.\n\t* objc-private/selector.h (struct objc_selector, sel_eq): Added.\n\t* class.c: Include objc-private/selector.h.\n\t(objc_get_meta_class): Return a Class instead of a MetaClass.\n\t* encoding.c (method_get_next_argument): Removed.\n\t(method_get_first_argument): Removed.\n\t(method_get_nth_argument): Removed.\n\t* gc.c: Include objc/runtime.h instead of objc/encoding.h.\n\tInclude objc-private/module-abi-8.h and ctype.h.\n\t* protocols.c (__objc_protocols_add_protocol): Take a 'struct\n\tobjc_protocl *' as argument, not a 'Protocol *'.\n\t(class_addProtocol): Added casts to 'struct objc_protocol *' and\n\t'Protocol *'.\n\t(class_copyProtocolList): Likewise.\n\t(protocol_conformsToProtocol): Likewise.\n\t(protocol_copyProtocolList): Likewise.\n\t* sarray.c: Include objc-private/module-abi-8.h.\n\t* sendmsg.c (method_get_next_argument): Removed.\n\t(method_get_first_argument): Removed.\n\t(method_get_nth_argument): Removed.\n\t(objc_msg_sendv): Removed.\n\t(arglist_t, retval_t): New.  (class_get_class_method): Take a\n\t'Class', not 'MetaClass', argument.\n\t* thr.c: Include module-abi-8.h.\n\nFrom-SVN: r174765", "tree": {"sha": "d40a3876f7d42510a372e2033d14443ddb800f2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d40a3876f7d42510a372e2033d14443ddb800f2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80e4b9e501e4e702f1c32287c1ff57ca84054a7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80e4b9e501e4e702f1c32287c1ff57ca84054a7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80e4b9e501e4e702f1c32287c1ff57ca84054a7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bb5b1f5e7379c42894fb935ec746ca67caf8521d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb5b1f5e7379c42894fb935ec746ca67caf8521d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb5b1f5e7379c42894fb935ec746ca67caf8521d"}], "stats": {"total": 1502, "additions": 134, "deletions": 1368}, "files": [{"sha": "d4532f984f1d7b13a4019a8f17a68a810220dd53", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=80e4b9e501e4e702f1c32287c1ff57ca84054a7c", "patch": "@@ -1,3 +1,76 @@\n+2011-06-07  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tRemoved the Traditional Objective-C runtime public API.\n+\t* Makefile.in (OBJC_DEPRECATED_H): Variable removed.\n+\t(install-headers): Do not create the objc/deprecated directory and\n+\tdo not install the deprecated headers.\n+\t(OBJC_H): Removed encoding.h and objc-api.h.\n+\t* Object.m: Removed all methods with the exception of -class and\n+\t-isEqual:.  Updated includes.  ([-class]): Use Modern API.\n+\t* objc/Object.h: Do not include deprecated/Object.h.\n+\t* objc/deprecated/Object.h: Removed.\n+\t* linking.m (__objc_linking): Call [Object class] instead of\n+\t[Object name].\n+\t* Protocol.m: Removed all methods with the exception of -isEqual:.\n+\tUpdated includes.\n+\t* objc/Protocol.h: Do not include deprecated/Protocol.h.\n+\t* objc/deprecated/Protocol.h: Removed.\n+\t* objc/deprecated/struct_objc_symtab.h: Removed.\n+\t* objc/deprecated/struct_objc_module.h: Removed.\n+\t* objc/deprecated/struct_objc_ivar.h: Removed.\n+\t* objc/deprecated/struct_objc_ivar_list.h: Removed.\n+\t* objc/deprecated/struct_objc_method.h: Removed.\n+\t* objc/deprecated/struct_objc_method_list.h: Removed.\n+\t* objc/deprecated/struct_objc_protocol_list.h: Removed.\n+\t* objc/deprecated/struct_objc_category.h: Removed.\n+\t* objc/deprecated/MetaClass.h: Removed.\n+\t* objc/deprecated/objc_msg_sendv.h: Removed.  \n+\t* objc/deprecated/README: Removed.\n+\t* objc/deprecated/struct_objc_class.h: Removed.\n+\t* objc/deprecated/struct_objc_protocol.h: Removed.\n+\t* objc/deprecated/struct_objc_selector.h: Removed.\n+\t* objc/encoding.h: Removed.\n+\t* objc/message.h (struct objc_super): Removed the definition for\n+\tthe Traditional Objective-C runtime API.\n+\t* objc/objc.h: Do not include objc/objc-decls.h.\n+\tdeprecated/struct_objc_selector.h, deprecated/MetaClass.h,\n+\tdeprecated/struct_objc_class.h, deprecated/struct_objc_protocol.h\n+\tand deprecated/objc_msg_sendv.h.  Uncommented new definition of\n+\tProtocol *.\n+\t* objc/objc-api.h: Removed.\n+\t* objc/runtime.h: Updated comments.  Removed check to detect\n+\tconcurrent usage of Traditional and Modern APIs.\n+\t* objc-private/module-abi-8.h: Always define struct objc_class and\n+\tstruct objc_protocol.  (struct objc_protocol_list): Changed type\n+\tof 'list' argument from 'Protocol *' to 'struct objc_protocol *'.\n+\t(class_get_instance_size): Added.\n+\t* objc-private/protocols.h (__objc_protocols_add_protocol): Take a\n+\t'struct objc_protocol *' as argument, not a 'Protocol *'.\n+\t* objc-private/runtime.h: Updated comments.\n+\t* objc-private/selector.h (struct objc_selector, sel_eq): Added.\n+\t* class.c: Include objc-private/selector.h.\n+\t(objc_get_meta_class): Return a Class instead of a MetaClass.\n+\t* encoding.c (method_get_next_argument): Removed.\n+\t(method_get_first_argument): Removed.\n+\t(method_get_nth_argument): Removed.\n+\t* gc.c: Include objc/runtime.h instead of objc/encoding.h.\n+\tInclude objc-private/module-abi-8.h and ctype.h.\n+\t* protocols.c (__objc_protocols_add_protocol): Take a 'struct\n+\tobjc_protocl *' as argument, not a 'Protocol *'.\n+\t(class_addProtocol): Added casts to 'struct objc_protocol *' and\n+\t'Protocol *'.\n+\t(class_copyProtocolList): Likewise.\n+\t(protocol_conformsToProtocol): Likewise.\n+\t(protocol_copyProtocolList): Likewise.\n+\t* sarray.c: Include objc-private/module-abi-8.h.\n+\t* sendmsg.c (method_get_next_argument): Removed.\n+\t(method_get_first_argument): Removed.\n+\t(method_get_nth_argument): Removed.\n+\t(objc_msg_sendv): Removed.\n+\t(arglist_t, retval_t): New.  (class_get_class_method): Take a\n+\t'Class', not 'MetaClass', argument.\n+\t* thr.c: Include module-abi-8.h.\n+\t\n 2011-06-03  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* Makefile.in (OBJC_DEPRECATED_H): Removed struct_objc_static_instances.h"}, {"sha": "02443327058132aa0b24b4e99227bd371c2778f5", "filename": "libobjc/Makefile.in", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FMakefile.in?ref=80e4b9e501e4e702f1c32287c1ff57ca84054a7c", "patch": "@@ -117,32 +117,11 @@ OBJC_H = \\\n   NXConstStr.h \\\n   Object.h \\\n   Protocol.h \\\n-  encoding.h \\\n   message.h \\\n-  objc-api.h \\\n   objc-decls.h \\\n   runtime.h \\\n   thr.h\n \n-# User-visible header files containing deprecated APIs, from the\n-# objc/deprecated directory\n-OBJC_DEPRECATED_H = \\\n-  MetaClass.h \\\n-  Object.h \\\n-  Protocol.h \\\n-  objc_msg_sendv.h \\\n-  struct_objc_category.h \\\n-  struct_objc_class.h \\\n-  struct_objc_ivar.h \\\n-  struct_objc_ivar_list.h \\\n-  struct_objc_method.h \\\n-  struct_objc_method_list.h \\\n-  struct_objc_module.h \\\n-  struct_objc_protocol.h \\\n-  struct_objc_protocol_list.h \\\n-  struct_objc_selector.h \\\n-  struct_objc_symtab.h\n-\n # Objective-C source files to compile\n OBJC_SOURCE_FILES = \\\n    NXConstStr.m \\\n@@ -345,11 +324,6 @@ install-headers:\n \t  realfile=$(srcdir)/objc/$${file}; \\\n \t  $(INSTALL_DATA) $${realfile} $(DESTDIR)$(libsubdir)/$(includedirname)/objc; \\\n \tdone\n-\t$(multi_basedir)/mkinstalldirs $(DESTDIR)$(libsubdir)/$(includedirname)/objc/deprecated\n-\tfor file in $(OBJC_DEPRECATED_H); do \\\n-\t  realfile=$(srcdir)/objc/deprecated/$${file}; \\\n-\t  $(INSTALL_DATA) $${realfile} $(DESTDIR)$(libsubdir)/$(includedirname)/objc/deprecated; \\\n-\tdone\n \n check uninstall install-strip dist installcheck installdirs:\n "}, {"sha": "552acb037fac571518154dfeda76f764731ad67b", "filename": "libobjc/Object.m", "status": "modified", "additions": 2, "deletions": 247, "changes": 249, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2FObject.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2FObject.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FObject.m?ref=80e4b9e501e4e702f1c32287c1ff57ca84054a7c", "patch": "@@ -24,18 +24,14 @@\n <http://www.gnu.org/licenses/>.  */\n \n #include \"objc-private/common.h\"\n-#include <stdarg.h>\n-#include <string.h> /* For strcmp.  */\n-#include <errno.h>\n #include \"objc/Object.h\"\n-#include \"objc/Protocol.h\"\n-#include \"objc/objc-api.h\"\n+#include \"objc/runtime.h\"\n \n @implementation Object\n \n - (Class)class\n {\n-  return object_get_class (self);\n+  return object_getClass (self);\n }\n \n - (BOOL)isEqual: (id)anObject\n@@ -44,244 +40,3 @@ - (BOOL)isEqual: (id)anObject\n }\n \n @end\n-\n-/* The following methods were deprecated in GCC 4.6.0 and will be\n-   removed in the next GCC release.  */\n-@implementation Object (Deprecated)\n-\n-+ initialize\n-{\n-  return self;\n-}\n-\n-- init\n-{\n-  return self;\n-}\n-\n-+ new\n-{\n-  return [[self alloc] init];\n-}\n-\n-+ alloc\n-{\n-  return class_create_instance(self);\n-}\n-\n-- free\n-{\n-  return object_dispose(self);\n-}\n-\n-- copy\n-{\n-  return [[self shallowCopy] deepen];\n-}\n-\n-- shallowCopy\n-{\n-  return object_copy(self);\n-}\n-\n-- deepen\n-{\n-  return self;\n-}\n-\n-- deepCopy\n-{\n-  return [self copy];\n-}\n-\n-- (Class)superClass\n-{\n-  return object_get_super_class(self);\n-}\n-\n-- (MetaClass)metaClass\n-{\n-  return object_get_meta_class(self);\n-}\n-\n-- (const char *)name\n-{\n-  return object_get_class_name(self);\n-}\n-\n-- self\n-{\n-  return self;\n-}\n-\n-- (unsigned int)hash\n-{\n-  return (size_t)self;\n-}\n-\n-- (int)compare:(id)anotherObject;\n-{\n-  if ([self isEqual:anotherObject])\n-    return 0;\n-  // Ordering objects by their address is pretty useless, \n-  // so subclasses should override this is some useful way.\n-  else if ((id)self > anotherObject)\n-    return 1;\n-  else \n-    return -1;\n-}\n-\n-- (BOOL)isMetaClass\n-{\n-  return NO;\n-}\n-\n-- (BOOL)isClass\n-{\n-  return object_is_class(self);\n-}\n-\n-- (BOOL)isInstance\n-{\n-  return object_is_instance(self);\n-}\n-\n-- (BOOL)isKindOf:(Class)aClassObject\n-{\n-  Class class;\n-\n-  for (class = self->isa; class!=Nil; class = class_get_super_class(class))\n-    if (class==aClassObject)\n-      return YES;\n-  return NO;\n-}\n-\n-- (BOOL)isMemberOf:(Class)aClassObject\n-{\n-  return self->isa==aClassObject;\n-}\n-\n-- (BOOL)isKindOfClassNamed:(const char *)aClassName\n-{\n-  Class class;\n-\n-  if (aClassName!=NULL)\n-    for (class = self->isa; class!=Nil; class = class_get_super_class(class))\n-      if (!strcmp(class_get_class_name(class), aClassName))\n-        return YES;\n-  return NO;\n-}\n-\n-- (BOOL)isMemberOfClassNamed:(const char *)aClassName\n-{\n-  return ((aClassName!=NULL)\n-          &&!strcmp(class_get_class_name(self->isa), aClassName));\n-}\n-\n-+ (BOOL)instancesRespondTo:(SEL)aSel\n-{\n-  return class_get_instance_method(self, aSel) != (Method_t)0;\n-}\n-\n-- (BOOL)respondsTo:(SEL)aSel\n-{\n-  return ((object_is_instance(self)\n-           ?class_get_instance_method(self->isa, aSel)\n-           :class_get_class_method(self->isa, aSel)) != (Method_t)0);\n-}\n-\n-+ (IMP)instanceMethodFor:(SEL)aSel\n-{\n-  return method_get_imp(class_get_instance_method(self, aSel));\n-}\n-\n-// Indicates if the receiving class or instance conforms to the given protocol\n-// not usually overridden by subclasses\n-//\n-// Modified 9/5/94 to always search the class object's protocol list, rather\n-// than the meta class.\n-\n-+ (BOOL) conformsTo: (Protocol*)aProtocol\n-{\n-  size_t i;\n-  struct objc_protocol_list* proto_list;\n-  id parent;\n-\n-  for (proto_list = ((Class)self)->protocols;\n-       proto_list; proto_list = proto_list->next)\n-    {\n-      for (i=0; i < proto_list->count; i++)\n-      {\n-        if ([proto_list->list[i] conformsTo: aProtocol])\n-          return YES;\n-      }\n-    }\n-\n-  if ((parent = [self superClass]))\n-    return [parent conformsTo: aProtocol];\n-  else\n-    return NO;\n-}\n-\n-- (BOOL) conformsTo: (Protocol*)aProtocol\n-{\n-  return [[self class] conformsTo:aProtocol];\n-}\n-\n-- (IMP)methodFor:(SEL)aSel\n-{\n-  return (method_get_imp(object_is_instance(self)\n-                         ?class_get_instance_method(self->isa, aSel)\n-                         :class_get_class_method(self->isa, aSel)));\n-}\n-\n-+ (struct objc_method_description *)descriptionForInstanceMethod:(SEL)aSel\n-{\n-  return ((struct objc_method_description *)\n-           class_get_instance_method(self, aSel));\n-}\n-\n-- (struct objc_method_description *)descriptionForMethod:(SEL)aSel\n-{\n-  return ((struct objc_method_description *)\n-           (object_is_instance(self)\n-            ?class_get_instance_method(self->isa, aSel)\n-            :class_get_class_method(self->isa, aSel)));\n-}\n-\n-- (retval_t)performv:(SEL)aSel :(arglist_t)argFrame\n-{\n-  return objc_msg_sendv(self, aSel, argFrame);\n-}\n-\n-+ poseAs:(Class)aClassObject\n-{\n-  return class_pose_as(self, aClassObject);\n-}\n-\n-- (Class)transmuteClassTo:(Class)aClassObject\n-{\n-  if (object_is_instance(self))\n-    if (class_is_class(aClassObject))\n-      if (class_get_instance_size(aClassObject)==class_get_instance_size(isa))\n-        if ([self isKindOf:aClassObject])\n-          {\n-            Class old_isa = isa;\n-            isa = aClassObject;\n-            return old_isa;\n-          }\n-  return nil;\n-}\n-\n-+ (int)version\n-{\n-  return class_get_version(self);\n-}\n-\n-+ setVersion:(int)aVersion\n-{\n-  class_set_version(self, aVersion);\n-  return self;\n-}\n-\n-@end"}, {"sha": "400f2a2087bc7628307201f35bdb0b906f4fe3d8", "filename": "libobjc/Protocol.m", "status": "modified", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2FProtocol.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2FProtocol.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FProtocol.m?ref=80e4b9e501e4e702f1c32287c1ff57ca84054a7c", "patch": "@@ -24,7 +24,6 @@\n \n #include \"objc-private/common.h\"\n #include \"objc/runtime.h\"\n-#include \"objc-private/module-abi-8.h\"\n #include \"objc/Protocol.h\"\n \n @implementation Protocol\n@@ -33,88 +32,3 @@ - (BOOL) isEqual: (id)obj\n   return protocol_isEqual (self, obj);\n }\n @end\n-\n-@implementation Protocol (Deprecated)\n-\n-- (const char *)name\n-{\n-  return protocol_name;\n-}\n-\n-- (BOOL) conformsTo: (Protocol *)aProtocolObject\n-{\n-  return protocol_conformsToProtocol (self, aProtocolObject);\n-}\n-\n-- (struct objc_method_description *) descriptionForInstanceMethod:(SEL)aSel\n-{\n-  int i;\n-  struct objc_protocol_list* proto_list;\n-  struct objc_method_description *result;\n-\n-  if (instance_methods)\n-    for (i = 0; i < instance_methods->count; i++)\n-      {\n-\tif (sel_isEqual (instance_methods->list[i].name, aSel))\n-\t  return &(instance_methods->list[i]);\n-      }\n-\n-  for (proto_list = protocol_list; proto_list; proto_list = proto_list->next)\n-    {\n-      size_t j;\n-      for (j=0; j < proto_list->count; j++)\n-\t{\n-\t  if ((result = [proto_list->list[j]\n-\t\t\t\t   descriptionForInstanceMethod: aSel]))\n-\t    return result;\n-\t}\n-    }\n-\n-  return NULL;\n-}\n-\n-- (struct objc_method_description *) descriptionForClassMethod:(SEL)aSel;\n-{\n-  int i;\n-  struct objc_protocol_list* proto_list;\n-  struct objc_method_description *result;\n-\n-  if (class_methods)\n-    for (i = 0; i < class_methods->count; i++)\n-      {\n-\tif (sel_isEqual (class_methods->list[i].name, aSel))\n-\t  return &(class_methods->list[i]);\n-      }\n-\n-  for (proto_list = protocol_list; proto_list; proto_list = proto_list->next)\n-    {\n-      size_t j;\n-      for (j=0; j < proto_list->count; j++)\n-\t{\n-\t  if ((result = [proto_list->list[j]\n-\t\t\t\t   descriptionForClassMethod: aSel]))\n-\t    return result;\n-\t}\n-    }\n-\n-  return NULL;\n-}\n-\n-- (unsigned) hash\n-{\n-  /* Compute a hash of the protocol_name; use the same hash algorithm\n-     that we use for class names; protocol names and class names are\n-     somewhat similar types of string spaces.  */\n-  int hash = 0, index;\n-  \n-  for (index = 0; protocol_name[index] != '\\0'; index++)\n-    {\n-      hash = (hash << 4) ^ (hash >> 28) ^ protocol_name[index];\n-    }\n-\n-  hash = (hash ^ (hash >> 10) ^ (hash >> 20));\n-\n-  return hash;\n-}\n-\n-@end"}, {"sha": "5f01a175df826aa1fc5eabb780a75ccc49bec03c", "filename": "libobjc/class.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fclass.c?ref=80e4b9e501e4e702f1c32287c1ff57ca84054a7c", "patch": "@@ -92,6 +92,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"objc-private/module-abi-8.h\"  /* For CLS_ISCLASS and similar.  */\n #include \"objc-private/runtime.h\"       /* the kitchen sink */\n #include \"objc-private/sarray.h\"        /* For sarray_put_at_safe.  */\n+#include \"objc-private/selector.h\"      /* For sarray_put_at_safe.  */\n #include <string.h>                     /* For memset */\n \n /* We use a table which maps a class name to the corresponding class\n@@ -801,7 +802,7 @@ objc_get_class (const char *name)\n   return 0;\n }\n \n-MetaClass\n+Class\n objc_get_meta_class (const char *name)\n {\n   return objc_get_class (name)->class_pointer;"}, {"sha": "d392193f707d8b36fe828b058150c5d735e29272", "filename": "libobjc/encoding.c", "status": "modified", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fencoding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fencoding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fencoding.c?ref=80e4b9e501e4e702f1c32287c1ff57ca84054a7c", "patch": "@@ -1009,82 +1009,6 @@ method_get_sizeof_arguments (struct objc_method *mth)\n   return atoi (type);\n }\n \n-/*\n-  Return a pointer to the next argument of ARGFRAME.  type points to\n-  the last argument.  Typical use of this look like:\n-\n-  {\n-    char *datum, *type;\n-    for (datum = method_get_first_argument (method, argframe, &type);\n-         datum; datum = method_get_next_argument (argframe, &type))\n-      {\n-        unsigned flags = objc_get_type_qualifiers (type);\n-        type = objc_skip_type_qualifiers (type);\n-\tif (*type != _C_PTR)\n-          [portal encodeData: datum ofType: type];\n-\telse\n-\t  {\n-\t    if ((flags & _F_IN) == _F_IN)\n-              [portal encodeData: *(char **) datum ofType: ++type];\n-\t  }\n-      }\n-  }\n-*/\n-char *\n-method_get_next_argument (arglist_t argframe, const char **type)\n-{\n-  const char *t = objc_skip_argspec (*type);\n-\n-  if (*t == '\\0')\n-    return 0;\n-\n-  *type = t;\n-  t = objc_skip_typespec (t);\n-\n-  if (*t == '+')\n-    return argframe->arg_regs + atoi (++t);\n-  else\n-    return argframe->arg_ptr + atoi (t);\n-}\n-\n-/* Return a pointer to the value of the first argument of the method\n-   described in M with the given argumentframe ARGFRAME.  The type\n-   is returned in TYPE.  type must be passed to successive calls of\n-   method_get_next_argument.  */\n-char *\n-method_get_first_argument (struct objc_method *m,\n-\t\t\t   arglist_t argframe,\n-\t\t\t   const char **type)\n-{\n-  *type = m->method_types;\n-  return method_get_next_argument (argframe, type);\n-}\n-\n-/* Return a pointer to the ARGth argument of the method\n-   M from the frame ARGFRAME.  The type of the argument\n-   is returned in the value-result argument TYPE.  */\n-char *\n-method_get_nth_argument (struct objc_method *m,\n-\t\t\t arglist_t argframe, int arg,\n-\t\t\t const char **type)\n-{\n-  const char *t = objc_skip_argspec (m->method_types);\n-\n-  if (arg > method_get_number_of_arguments (m))\n-    return 0;\n-\n-  while (arg--)\n-    t = objc_skip_argspec (t);\n-\n-  *type = t;\n-  t = objc_skip_typespec (t);\n-\n-  if (*t == '+')\n-    return argframe->arg_regs + atoi (++t);\n-  else\n-    return argframe->arg_ptr + atoi (t);\n-}\n-\n unsigned\n objc_get_type_qualifiers (const char *type)\n {"}, {"sha": "9b117dcfdf6ebff8372cfa4051c1e35509205844", "filename": "libobjc/gc.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fgc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fgc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fgc.c?ref=80e4b9e501e4e702f1c32287c1ff57ca84054a7c", "patch": "@@ -31,9 +31,11 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #include \"tconfig.h\"\n #include <assert.h>\n+#include <ctype.h> /* For isdigit.  */\n #include <string.h>\n #include <stdlib.h>\n-#include \"objc/encoding.h\"\n+#include \"objc/runtime.h\"\n+#include \"objc-private/module-abi-8.h\"\n \n #include <gc.h>\n #include <limits.h>"}, {"sha": "cf28e569657bddec63a9be6dbaba8778246c812e", "filename": "libobjc/linking.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Flinking.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Flinking.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Flinking.m?ref=80e4b9e501e4e702f1c32287c1ff57ca84054a7c", "patch": "@@ -31,6 +31,6 @@ Contributed by Ovidiu Predescu (ovidiu@net-community.com).\n \n void __objc_linking (void)\n {\n-  [Object name];\n+  [Object class];\n }\n "}, {"sha": "40934521199b2aaa5ab01d706c5f4a14d81562a6", "filename": "libobjc/objc-private/module-abi-8.h", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fobjc-private%2Fmodule-abi-8.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fobjc-private%2Fmodule-abi-8.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc-private%2Fmodule-abi-8.h?ref=80e4b9e501e4e702f1c32287c1ff57ca84054a7c", "patch": "@@ -149,34 +149,30 @@ struct objc_method_list\n \t\t\t\t\t     structure. */\n };\n \n-/* Currently defined in Protocol.m (that definition should go away\n-   once we include this file).  Note that a 'struct\n-   objc_method_description' as embedded inside a Protocol uses the\n-   same trick as a 'struct objc_method': the method_name is a 'char *'\n-   according to the compiler, who puts the method name as a string in\n-   there.  At runtime, the selectors need to be registered, and the\n-   method_name then becomes a SEL.  */\n+/* Note that a 'struct objc_method_description' as embedded inside a\n+   Protocol uses the same trick as a 'struct objc_method': the\n+   method_name is a 'char *' according to the compiler, who puts the\n+   method name as a string in there.  At runtime, the selectors need\n+   to be registered, and the method_name then becomes a SEL.  */\n struct objc_method_description_list\n {\n   int count;\n   struct objc_method_description list[1];\n };\n \n-/* Currently defined by objc/objc.h.  */\n-/*\n struct objc_protocol {\n   struct objc_class* class_pointer;\n   char *protocol_name;\n   struct objc_protocol_list *protocol_list;\n   struct objc_method_description_list *instance_methods, *class_methods; \n };\n-*/\n+\n \n struct objc_protocol_list\n {\n   struct objc_protocol_list *next;\n   size_t count;\n-  Protocol *list[1];\n+  struct objc_protocol *list[1];\n };\n \n /*\n@@ -189,7 +185,6 @@ struct objc_protocol_list\n   some members change type. The compiler generates \"char* const\" and\n   places a string in the following member variables: super_class.\n */\n-#ifndef __objc_STRUCT_OBJC_CLASS_defined\n struct objc_class {\n   struct objc_class*  class_pointer;    /* Pointer to the class's meta\n \t\t\t\t\t   class. */\n@@ -232,7 +227,6 @@ struct objc_class {\n   struct objc_protocol_list *protocols; /* Protocols conformed to */\n   void* gc_object_type;\n };\n-#endif /* __objc_STRUCT_OBJC_CLASS_defined */\n \n /* This is used to assure consistent access to the info field of \n    classes.  */\n@@ -283,6 +277,11 @@ struct objc_class {\n      (cls)->info >>= (HOST_BITS_PER_LONG/2); \\\n      __CLS_SETINFO(cls, (((unsigned long)num) << (HOST_BITS_PER_LONG/2))); })\n \n+static inline long\n+class_get_instance_size(Class _class)\n+{\n+  return CLS_ISCLASS(_class)?_class->instance_size:0;\n+}\n \n /* The compiler generates one of these structures for each category.\n    A class may have many categories and contain both instance and"}, {"sha": "3219ff28935f7be301a522b180bcecacea1bb202", "filename": "libobjc/objc-private/protocols.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fobjc-private%2Fprotocols.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fobjc-private%2Fprotocols.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc-private%2Fprotocols.h?ref=80e4b9e501e4e702f1c32287c1ff57ca84054a7c", "patch": "@@ -33,6 +33,6 @@ __objc_protocols_init (void);\n    protocols by name, which allows objc_getProtocol(name) to be\n    implemented efficiently.  */\n void\n-__objc_protocols_add_protocol (const char *name, Protocol *object);\n+__objc_protocols_add_protocol (const char *name, struct objc_protocol *object);\n \n #endif /* not __objc_private_protocols_INCLUDE_GNU */"}, {"sha": "bd11392ebec56651423948d914ffa5308922b6e0", "filename": "libobjc/objc-private/runtime.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fobjc-private%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fobjc-private%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc-private%2Fruntime.h?ref=80e4b9e501e4e702f1c32287c1ff57ca84054a7c", "patch": "@@ -32,10 +32,7 @@ The original list was:\n #include \"objc/hash.h\"\n #include \"objc/objc-list.h\"\n \n-but can almost certainly be shrinked down.\n-\n-Note that you can use this file both with objc/objc-api.h and with\n-objc/runtime.h.  */\n+but can almost certainly be shrinked down.  */\n \n #ifndef __objc_private_runtime_INCLUDE_GNU\n #define __objc_private_runtime_INCLUDE_GNU"}, {"sha": "1832a79a72ebf97f7fe6ed4d2cc7386fca4a057b", "filename": "libobjc/objc-private/selector.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fobjc-private%2Fselector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fobjc-private%2Fselector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc-private%2Fselector.h?ref=80e4b9e501e4e702f1c32287c1ff57ca84054a7c", "patch": "@@ -28,6 +28,25 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n /* Private runtime functions that may go away or be rewritten or\n    replaced.  */\n \n+/*\n+** Definition of a selector.  Selectors themselves are not unique, but\n+** the sel_id is a unique identifier.\n+*/\n+struct objc_selector\n+{\n+  void *sel_id;\n+  const char *sel_types;\n+};\n+\n+inline static BOOL\n+sel_eq (SEL s1, SEL s2)\n+{\n+  if (s1 == 0 || s2 == 0)\n+    return s1 == s2;\n+  else\n+    return s1->sel_id == s2->sel_id;\n+}\n+\n /* Number of selectors stored in each of the selector tables.  */\n extern unsigned int __objc_selector_max_index;\n "}, {"sha": "e2fa926e7b5471880b4888dd265ebd37514ffeab", "filename": "libobjc/objc/Object.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fobjc%2FObject.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fobjc%2FObject.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2FObject.h?ref=80e4b9e501e4e702f1c32287c1ff57ca84054a7c", "patch": "@@ -55,10 +55,6 @@ extern \"C\" {\n - (BOOL)isEqual: (id)anObject;\n @end\n \n-/* All of the following includes were deprecated in GCC 4.6 and will\n-   be removed in the next release.  */\n-#include \"deprecated/Object.h\"\n-\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "f2b7b789630d44ce749168128463057676c61c1d", "filename": "libobjc/objc/Protocol.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fobjc%2FProtocol.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fobjc%2FProtocol.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2FProtocol.h?ref=80e4b9e501e4e702f1c32287c1ff57ca84054a7c", "patch": "@@ -47,8 +47,6 @@ extern \"C\" {\n      protocol_getMethodDescription()\n */\n \n-#include \"deprecated/Protocol.h\"\n-\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "01597782c57b3f4ad7a7f2cdccd23685ac0fdedf", "filename": "libobjc/objc/deprecated/MetaClass.h", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2FMetaClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2FMetaClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2FMetaClass.h?ref=bb5b1f5e7379c42894fb935ec746ca67caf8521d", "patch": "@@ -1 +0,0 @@\n-typedef struct objc_class *MetaClass;"}, {"sha": "d7924e0476137f4a88926dba6e604d8673ff75ce", "filename": "libobjc/objc/deprecated/Object.h", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2FObject.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2FObject.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2FObject.h?ref=bb5b1f5e7379c42894fb935ec746ca67caf8521d", "patch": "@@ -1,63 +0,0 @@\n-/* The following methods were deprecated in GCC 4.6.0 and will be\n-   removed in the next GCC release.  */\n-@interface Object (Deprecated)\n-/* Initializing classes and instances */\n-+ initialize;\n-- init;\n-\n-/* Creating, freeing, and copying instances */\n-+ new;\n-+ alloc;\n-- free;\n-- copy;\n-- shallowCopy;\n-- deepen;\n-- deepCopy;\n-\n-/* Identifying classes */\n-- (Class)superClass;\n-- (MetaClass)metaClass;\n-- (const char *)name;\n-\n-/* Identifying and comparing objects */\n-- self;\n-- (unsigned int)hash;\n-- (int)compare:(id)anotherObject;\n-\n-/* Testing object type */\n-- (BOOL)isMetaClass;\n-- (BOOL)isClass;\n-- (BOOL)isInstance;\n-\n-/* Testing inheritance relationships */\n-- (BOOL)isKindOf:(Class)aClassObject;\n-- (BOOL)isMemberOf:(Class)aClassObject;\n-- (BOOL)isKindOfClassNamed:(const char *)aClassName;\n-- (BOOL)isMemberOfClassNamed:(const char *)aClassName;\n-\n-/* Testing class functionality */\n-+ (BOOL)instancesRespondTo:(SEL)aSel;\n-- (BOOL)respondsTo:(SEL)aSel;\n-\n-/* Testing protocol conformance */\n-- (BOOL)conformsTo:(Protocol*)aProtocol;\n-\n-/* Introspection */\n-+ (IMP)instanceMethodFor:(SEL)aSel;\n-- (IMP)methodFor:(SEL)aSel;\n-+ (struct objc_method_description *)descriptionForInstanceMethod:(SEL)aSel;\n-- (struct objc_method_description *)descriptionForMethod:(SEL)aSel;\n-\n-/* Forwarding */\n-- (retval_t)performv:(SEL)aSel :(arglist_t)argFrame;\n-\n-/* Posing */\n-+ poseAs:(Class)aClassObject;\n-- (Class)transmuteClassTo:(Class)aClassObject;\n-\n-/* Archiving */\n-+ (int)version;\n-+ setVersion:(int)aVersion;\n-\n-@end\n-"}, {"sha": "7a77f51a0ddf55d6738e041b3c00de3c2b266fca", "filename": "libobjc/objc/deprecated/Protocol.h", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2FProtocol.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2FProtocol.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2FProtocol.h?ref=bb5b1f5e7379c42894fb935ec746ca67caf8521d", "patch": "@@ -1,13 +0,0 @@\n-/* The following methods were deprecated in GCC 4.6.0 and will be\n-   removed in the next GCC release.  */\n-@interface Protocol (Deprecated)\n-/* Obtaining attributes intrinsic to the protocol */\n-- (const char *)name;\n-\n-/* Testing protocol conformance */\n-- (BOOL) conformsTo: (Protocol *)aProtocolObject;\n-\n-/* Looking up information specific to a protocol */\n-- (struct objc_method_description *) descriptionForInstanceMethod:(SEL)aSel;\n-- (struct objc_method_description *) descriptionForClassMethod:(SEL)aSel;\n-@end"}, {"sha": "3f105196e631fb22498b0a3c48cb1d1bcc98783f", "filename": "libobjc/objc/deprecated/README", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2FREADME?ref=bb5b1f5e7379c42894fb935ec746ca67caf8521d", "patch": "@@ -1,11 +0,0 @@\n-This directory contains declarations and features that are deprecated\n-and that will be removed in future versions of the compiler.\n-\n-Note that files in this directory are not really usable headers on\n-their own - they shouldn't be included directly by end users.  They\n-are header fragments containing deprecated APIs that are still\n-included (until removed) from the real headers in objc/.\n-\n-Files in this directory should not #include any other objc header.\n-Any include that they need should be done in the real objc/ headers\n-before including these fragments."}, {"sha": "825d9a7661223cb6142233ec50f3db912661e8a5", "filename": "libobjc/objc/deprecated/objc_msg_sendv.h", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2Fobjc_msg_sendv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2Fobjc_msg_sendv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2Fobjc_msg_sendv.h?ref=bb5b1f5e7379c42894fb935ec746ca67caf8521d", "patch": "@@ -1,12 +0,0 @@\n-/* The following types and functions are provided only for\n-   backwards-compatibility and should not be used in new code.  They\n-   were deprecated in GCC 4.6 and will be removed in the next\n-   release.  */\n-typedef void* retval_t;\t\t/* return value */\n-typedef void(*apply_t)(void);\t/* function pointer */\n-typedef union arglist {\n-  char *arg_ptr;\n-  char arg_regs[sizeof (char*)];\n-} *arglist_t;\t\t        /* argument frame */\n-\n-objc_EXPORT retval_t objc_msg_sendv(id, SEL, arglist_t);"}, {"sha": "6de3980a905cc478ce621b9570721273a11dfdcd", "filename": "libobjc/objc/deprecated/struct_objc_category.h", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_category.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_category.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_category.h?ref=bb5b1f5e7379c42894fb935ec746ca67caf8521d", "patch": "@@ -1,21 +0,0 @@\n-/*\n-** The compiler generates one of these structures for each category.  A class\n-** may have many categories and contain both instance and factory methods.  \n-*/\n-struct objc_category {\n-  const char*   category_name;                /* Name of the category.  Name\n-                                                contained in the () of the\n-                                                category definition. */\n-  const char*   class_name;                   /* Name of the class to which\n-                                                the category belongs. */\n-  MethodList_t  instance_methods;             /* Linked list of instance\n-                                                methods defined in the \n-                                                category. NULL indicates no\n-                                                instance methods defined. */\n-  MethodList_t  class_methods;                /* Linked list of factory \n-                                                methods defined in the\n-                                                category.  NULL indicates no\n-                                                class methods defined. */\n-  struct objc_protocol_list *protocols;\t      /* List of Protocols \n-\t\t\t\t\t         conformed to */\n-};"}, {"sha": "07927feb69d7679568cdf711e2c4324330bbf356", "filename": "libobjc/objc/deprecated/struct_objc_class.h", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_class.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_class.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_class.h?ref=bb5b1f5e7379c42894fb935ec746ca67caf8521d", "patch": "@@ -1,56 +0,0 @@\n-/* This structure used to be public, but is now private to the runtime.  */\n-#define __objc_STRUCT_OBJC_CLASS_defined\n-\n-/*\n-** The compiler generates one of these structures for each class.  \n-** \n-** This structure is the definition for classes. \n-** \n-** This structure is generated by the compiler in the executable and used by\n-** the run-time during normal messaging operations.  Therefore some members\n-** change type. The compiler generates \"char* const\" and places a string in\n-** the following member variables:  super_class. \n-*/\n-struct objc_class {     \n-  MetaClass           class_pointer;          /* Pointer to the class's\n-                                                meta class. */\n-  struct objc_class*  super_class;            /* Pointer to the super \n-                                                class. NULL for class \n-                                                Object. */\n-  const char*         name;                   /* Name of the class. */\n-  long                version;                /* Unknown. */\n-  unsigned long       info;                   /* Bit mask.  See class masks \n-                                                defined above. */\n-  long                instance_size;          /* Size in bytes of the class.  \n-                                                The sum of the class \n-\t\t\t\t\t\tdefinition and all super \n-\t\t\t\t\t\tclass definitions. */\n-#ifdef _WIN64\n-  /* We pad the structure manually to prevent warning when -Wpadded\n-     is used.  The compiler automatically pads the structures that it\n-     generates, so this manually padded structure still matches the one\n-     generated by the compiler, but if we don't pad manually, -Wpadded\n-     detects that padding is being added and generates annoying warnings.\n-     This hack is necessary as on LLP64 targets sizeof (long) isn't equal\n-     to sizeof (void *).  */\n-  long pad;\n-#endif\n-  struct objc_ivar_list* ivars;               /* Pointer to a structure that\n-                                                describes the instance \n-                                                variables in the class\n-                                                definition.  NULL indicates\n-                                                no instance variables.  Does\n-                                                not include super class\n-                                                variables. */\n-  struct objc_method_list*  methods;          /* Linked list of instance\n-                                                methods defined for the \n-                                                class. */\n-  struct sarray *    dtable;                  /* Pointer to instance \n-\t\t\t\t\t         method dispatch table. */  \n-  struct objc_class* subclass_list;           /* Subclasses */\n-  struct objc_class* sibling_class;\n-\n-  struct objc_protocol_list *protocols;\t      /* Protocols conformed to */\n-  void* gc_object_type;\n-};\n-"}, {"sha": "57170ad1160328cd0e4e3afb257cd4f4d48718cb", "filename": "libobjc/objc/deprecated/struct_objc_ivar.h", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_ivar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_ivar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_ivar.h?ref=bb5b1f5e7379c42894fb935ec746ca67caf8521d", "patch": "@@ -1,15 +0,0 @@\n-/*\n-** The compiler generates one of these structures for a class that has\n-** instance variables defined in its specification. \n-*/\n-typedef struct objc_ivar {\n-    const char* ivar_name;                      /* Name of the instance\n-                                                  variable as entered in the\n-                                                  class definition. */\n-    const char* ivar_type;                      /* Description of the Ivar's\n-                                                  type.  Useful for \n-                                                  debuggers. */\n-    int        ivar_offset;                    /* Byte offset from the base \n-                                                  address of the instance \n-                                                  structure to the variable. */\n-} *Ivar_t;"}, {"sha": "8f5051fb9675f601ee4822da1196c5d822479770", "filename": "libobjc/objc/deprecated/struct_objc_ivar_list.h", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_ivar_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_ivar_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_ivar_list.h?ref=bb5b1f5e7379c42894fb935ec746ca67caf8521d", "patch": "@@ -1,10 +0,0 @@\n-typedef struct objc_ivar_list {\n-  int   ivar_count;                             /* Number of structures (Ivar) \n-                                                  contained in the list.  One\n-                                                  structure per instance \n-                                                  variable defined in the\n-                                                  class. */\n-  struct objc_ivar ivar_list[1];               /* Variable length \n-                                                  structure. */\n-} IvarList, *IvarList_t;\n-"}, {"sha": "af83c07b6ff68cbd95e30df34820fa864c38804c", "filename": "libobjc/objc/deprecated/struct_objc_method.h", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_method.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_method.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_method.h?ref=bb5b1f5e7379c42894fb935ec746ca67caf8521d", "patch": "@@ -1,22 +0,0 @@\n-/*\n-** The compiler generates one (or more) of these structures for a class that\n-** has methods defined in its specification. \n-** \n-** The implementation of a class can be broken into separate pieces in a file\n-** and categories can break them across modules. To handle this problem is a\n-** singly linked list of methods. \n-*/\n-struct objc_method {\n-  SEL         method_name;                  /* This variable is the method's \n-                                               name.  It is a char*. \n-                                               The unique integer passed to \n-                                               objc_msg_send is a char* too.  \n-                                               It is compared against \n-                                               method_name using strcmp. */\n-  const char* method_types;                 /* Description of the method's\n-                                               parameter list.  Useful for\n-                                               debuggers. */\n-  IMP         method_imp;                   /* Address of the method in the \n-                                               executable. */\n-};\n-"}, {"sha": "5156cabbf2d263aec5c3d4719fb88f7d63da2d13", "filename": "libobjc/objc/deprecated/struct_objc_method_list.h", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_method_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_method_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_method_list.h?ref=bb5b1f5e7379c42894fb935ec746ca67caf8521d", "patch": "@@ -1,9 +0,0 @@\n-typedef struct objc_method_list {\n-  struct objc_method_list*  method_next;    /* This variable is used to link \n-                                               a method list to another.  It \n-                                               is a singly linked list. */\n-  int            method_count;              /* Number of methods defined in \n-                                               this structure. */\n-  Method method_list[1];                    /* Variable length \n-                                               structure. */\n-} MethodList, *MethodList_t;"}, {"sha": "57950851faef632efe0fc396fb3f02ec04758744", "filename": "libobjc/objc/deprecated/struct_objc_module.h", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_module.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_module.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_module.h?ref=bb5b1f5e7379c42894fb935ec746ca67caf8521d", "patch": "@@ -1,24 +0,0 @@\n-/*\n-** The compiler generates one of these structures for each module that\n-** composes the executable (eg main.m).  \n-** \n-** This data structure is the root of the definition tree for the module.  \n-** \n-** A collect program runs between ld stages and creates a ObjC ctor array. \n-** That array holds a pointer to each module structure of the executable. \n-*/\n-typedef struct objc_module {\n-  unsigned long version; /* Version of the Module data structure.  */\n-  unsigned long size;    /* sizeof(Module) according to the compiler -\n-\t\t\t    only used to sanity check that it matches\n-\t\t\t    sizeof(Module) according to the\n-\t\t\t    runtime.  */\n-  const char* name;      /* Name of the file used to compile the\n-\t\t\t    module - not set by modern compilers for\n-\t\t\t    security reasons.  */\n-  Symtab_t    symtab;    /* Pointer to the Symtab of the module.  The\n-\t\t\t    Symtab holds an array of pointers to the\n-\t\t\t    classes and categories defined in the\n-\t\t\t    module. */\n-} Module, *Module_t;\n-"}, {"sha": "5344e3f5493c27cd5f0a2a0db6d8f6d0e76373d9", "filename": "libobjc/objc/deprecated/struct_objc_protocol.h", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_protocol.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_protocol.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_protocol.h?ref=bb5b1f5e7379c42894fb935ec746ca67caf8521d", "patch": "@@ -1,6 +0,0 @@\n-typedef struct objc_protocol {\n-  struct objc_class* class_pointer;\n-  char *protocol_name;\n-  struct objc_protocol_list *protocol_list;\n-  struct objc_method_description_list *instance_methods, *class_methods; \n-} Protocol;"}, {"sha": "5e5788b503977691b37ef609a270a53abb23633c", "filename": "libobjc/objc/deprecated/struct_objc_protocol_list.h", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_protocol_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_protocol_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_protocol_list.h?ref=bb5b1f5e7379c42894fb935ec746ca67caf8521d", "patch": "@@ -1,5 +0,0 @@\n-struct objc_protocol_list {\n-  struct objc_protocol_list *next;\n-  size_t count;\n-  Protocol *list[1];\n-};"}, {"sha": "34aaf0d8b4ed614287d5bbdc7249856f0a659a08", "filename": "libobjc/objc/deprecated/struct_objc_selector.h", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_selector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_selector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_selector.h?ref=bb5b1f5e7379c42894fb935ec746ca67caf8521d", "patch": "@@ -1,20 +0,0 @@\n-/* This struct used to be public, but is now private to the runtime.  */\n-\n-/*\n-** Definition of a selector.  Selectors themselves are not unique, but\n-** the sel_id is a unique identifier.\n-*/\n-struct objc_selector\n-{\n-  void *sel_id;\n-  const char *sel_types;\n-};\n-\n-inline static BOOL\n-sel_eq (SEL s1, SEL s2)\n-{\n-  if (s1 == 0 || s2 == 0)\n-    return s1 == s2;\n-  else\n-    return s1->sel_id == s2->sel_id;\n-}"}, {"sha": "75bb27f1b5583894d9e4bd33f4b9bd4036034271", "filename": "libobjc/objc/deprecated/struct_objc_symtab.h", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_symtab.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_symtab.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_symtab.h?ref=bb5b1f5e7379c42894fb935ec746ca67caf8521d", "patch": "@@ -1,26 +0,0 @@\n-/* Whereas a Module (defined further down) is the root (typically) of a file,\n-   a Symtab is the root of the class and category definitions within the\n-   module.  \n-   \n-   A Symtab contains a variable length array of pointers to classes and\n-   categories  defined in the module.   */\n-typedef struct objc_symtab {\n-  unsigned long sel_ref_cnt;  /* Unused (always set to 0). */\n-  SEL      refs;              /* The table of selectors referenced in\n-                                 this module.  This is terminated by a\n-                                 selector with NULL sel_id and NULL\n-                                 sel_types.  */\n-  unsigned short cls_def_cnt;                   /* Number of classes compiled\n-                                                  (defined) in the module. */\n-  unsigned short cat_def_cnt;                   /* Number of categories \n-                                                  compiled (defined) in the \n-                                                  module. */\n-\n-  void      *defs[1];                           /* Variable array of pointers.\n-                                                  cls_def_cnt of type Class \n-                                                  followed by cat_def_cnt of\n-                                                  type Category_t, followed\n-\t\t\t\t\t\t  by a NULL terminated array\n-\t\t\t\t\t\t  of objc_static_instances. */\n-} Symtab,   *Symtab_t;\n-"}, {"sha": "7852466b82472baf41b6fe01375ba637f686fecc", "filename": "libobjc/objc/encoding.h", "status": "removed", "additions": 0, "deletions": 117, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fencoding.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fencoding.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fencoding.h?ref=bb5b1f5e7379c42894fb935ec746ca67caf8521d", "patch": "@@ -1,117 +0,0 @@\n-/* Encoding of types for Objective C.\n-   Copyright (C) 1993, 1997, 2002, 2004, 2009, 2010\n-   Free Software Foundation, Inc.\n-\n-Author: Kresten Krab Thorup\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-\n-#ifndef __encoding_INCLUDE_GNU\n-#define __encoding_INCLUDE_GNU\n-\n-/* This file is to be used with the \"traditional\" GNU Objective-C\n-   Runtime API (the one declared in objc/objc-api.h).  If you are\n-   using the \"modern\" GNU Objective-C Runtime API, then the useful\n-   functions from this file are declared in objc/runtime.h.  */\n-\n-#include \"objc-api.h\"\n-#include <ctype.h>\n-\n-#ifdef __cplusplus\n-extern \"C\" {\n-#endif /* __cplusplus */\n-\n-/* The following are used in encode strings to describe some\n-   qualifiers of method and ivar types.  */\n-#define _C_CONST\t'r'\n-#define _C_IN\t\t'n'\n-#define _C_INOUT\t'N'\n-#define _C_OUT      \t'o'\n-#define _C_BYCOPY\t'O'\n-#define _C_BYREF\t'R'\n-#define _C_ONEWAY\t'V'\n-#define _C_GCINVISIBLE\t'|'\n-\n-/* The same when used as flags.  */\n-#define _F_CONST\t0x01\n-#define _F_IN\t\t0x01\n-#define _F_OUT\t\t0x02\n-#define _F_INOUT\t0x03\n-#define _F_BYCOPY\t0x04\n-#define _F_BYREF\t0x08\n-#define _F_ONEWAY\t0x10\n-#define _F_GCINVISIBLE\t0x20\n-\n-int objc_sizeof_type (const char *type);\n-int objc_alignof_type (const char *type);\n-int objc_aligned_size (const char *type);\n-int objc_promoted_size (const char *type);\n-\n-const char *objc_skip_type_qualifiers (const char *type);\n-const char *objc_skip_typespec (const char *type);\n-const char *objc_skip_offset (const char *type);\n-const char *objc_skip_argspec (const char *type);\n-unsigned objc_get_type_qualifiers (const char *type);\n-\n-/* The following functions are replaced, in the modern API, by\n-   method_getNumberOfArguments(), method_getArgumentType().  */\n-int method_get_number_of_arguments (struct objc_method *);\n-int method_get_sizeof_arguments (struct objc_method *);\n-\n-/* The following functions are deprecated and they use arglist_t which\n-   is deprecated.  */\n-char *method_get_first_argument (struct objc_method *,\n-\t\t\t\t arglist_t argframe, \n-\t\t\t\t const char **type);\n-char *method_get_next_argument (arglist_t argframe, \n-\t\t\t\tconst char **type);\n-char *method_get_nth_argument (struct objc_method *m, \n-\t\t\t       arglist_t argframe,\n-\t\t\t       int arg, \n-\t\t\t       const char **type);\n-\n-struct objc_struct_layout\n-{\n-  const char *original_type;\n-  const char *type;\n-  const char *prev_type;\n-  unsigned int record_size;\n-  unsigned int record_align;\n-};\n-\n-void objc_layout_structure (const char *type,\n-                            struct objc_struct_layout *layout);\n-BOOL  objc_layout_structure_next_member (struct objc_struct_layout *layout);\n-void objc_layout_finish_structure (struct objc_struct_layout *layout,\n-                                   unsigned int *size,\n-                                   unsigned int *align);\n-void objc_layout_structure_get_info (struct objc_struct_layout *layout,\n-                                     unsigned int *offset,\n-                                     unsigned int *align,\n-                                     const char **type);\n-\n-#ifdef __cplusplus\n-}\n-#endif /* __cplusplus */\n-\n-#endif /* __encoding_INCLUDE_GNU */"}, {"sha": "92b52633aa2e9dce2adcde0defbc4950fde9a3cf", "filename": "libobjc/objc/message.h", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fobjc%2Fmessage.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fobjc%2Fmessage.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fmessage.h?ref=80e4b9e501e4e702f1c32287c1ff57ca84054a7c", "patch": "@@ -92,33 +92,12 @@ objc_EXPORT IMP objc_msg_lookup (id receiver, SEL op);\n    The compiler generates one of these structures and passes it to\n    objc_msg_lookup_super() when a [super method] call is compiled.  */\n \n-/* In the traditional API, the super class field is called 'class' in\n-   Objective-C and 'super_class' in Objective-C++.  In the new API\n-   (objc/runtime.h) it is always called 'super_class'.  We detect the\n-   \"traditional API\" by the fact that the objc/objc-api.h header\n-   include guards are defined, which means objc/objc-api.h has been\n-   included.  This works because objc/message.h does not exist in the\n-   Traditional API and is only read because objc-api.h itself includes\n-   it.  */\n-#ifdef __objc_api_INCLUDE_GNU\n-/* Traditional API.  */\n-typedef struct objc_super\n-{\n-  id    self;       /* Id of the object sending the message. */\n-#ifdef __cplusplus\n-  Class super_class;\n-#else\n-  Class class;        /* Object's super class. */\n-#endif\n-} Super, *Super_t;\n-#else\n /* Modern API.  */\n struct objc_super\n {\n   id    self;        /* The receiver of the message.  */\n   Class super_class; /* The superclass of the receiver.  */\n };\n-#endif\n \n /* This is used by the compiler instead of objc_msg_lookup () when\n    compiling a call to 'super', such as [super method].  This requires"}, {"sha": "e6f6e26600d27c8fa8a31a4589c261cb2251f58d", "filename": "libobjc/objc/objc-api.h", "status": "removed", "additions": 0, "deletions": 394, "changes": 394, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fobjc-api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5b1f5e7379c42894fb935ec746ca67caf8521d/libobjc%2Fobjc%2Fobjc-api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fobjc-api.h?ref=bb5b1f5e7379c42894fb935ec746ca67caf8521d", "patch": "@@ -1,394 +0,0 @@\n-/* GNU Objective-C Runtime API - Traditional API\n-   Copyright (C) 1993, 1995, 1996, 1997, 2001, 2002, 2003, 2004, 2005,\n-   2007, 2009, 2010 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it\n-under the terms of the GNU General Public License as published by the\n-Free Software Foundation; either version 3, or (at your option) any\n-later version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT\n-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n-License for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#ifndef __objc_api_INCLUDE_GNU\n-#define __objc_api_INCLUDE_GNU\n-\n-/* This file declares the \"traditional\" GNU Objective-C Runtime API.\n-   It is the API supported by older versions of the GNU Objective-C\n-   Runtime.  Include this file to use it.\n-\n-   This API is being replaced by the \"modern\" GNU Objective-C Runtime\n-   API, which is declared in objc/runtime.h.  The \"modern\" API is very\n-   similar to the API used by the modern Apple/NeXT runtime.\n-\n-   The last version of GCC supporting the traditional API is GCC 4.6.\n-   This file will not exist in later versions of GCC.\n-\n-   Because the two APIs have some conflicting definitions (in\n-   particular, Method and Category are defined differently) you should\n-   include either objc/objc-api.h (to use the traditional GNU\n-   Objective-C Runtime API) or objc/runtime.h (to use the modern GNU\n-   Objective-C Runtime API), but not both.  */\n-#ifdef __objc_runtime_INCLUDE_GNU\n-# error You can not include both objc/objc-api.h and objc/runtime.h.  Include objc/objc-api.h for the traditional GNU Objective-C Runtime API and objc/runtime.h for the modern one.\n-#endif\n-\n-/* TODO: A deprecation warning any time the file is included ? */\n-\n-#include \"objc.h\"\n-#include \"thr.h\"\n-#include \"objc-decls.h\"\n-#include <stdio.h>\n-#include <stdarg.h>\n-\n-#ifdef __cplusplus\n-extern \"C\" {\n-#endif /* __cplusplus */\n-\n-/* Method descriptor returned by introspective Object methods.\n-   This is really just the first part of the more complete objc_method\n-   structure defined below and used internally by the runtime.  */\n-struct objc_method_description\n-{\n-    SEL name;\t\t\t/* this is a selector, not a string */\n-    char *types;\t\t/* type encoding */\n-};\n-\n-/* The following are used in encode strings to describe the type of\n-   Ivars and Methods.  */\n-#define _C_ID       '@'\n-#define _C_CLASS    '#'\n-#define _C_SEL      ':'\n-#define _C_CHR      'c'\n-#define _C_UCHR     'C'\n-#define _C_SHT      's'\n-#define _C_USHT     'S'\n-#define _C_INT      'i'\n-#define _C_UINT     'I'\n-#define _C_LNG      'l'\n-#define _C_ULNG     'L'\n-#define _C_LNG_LNG  'q'\n-#define _C_ULNG_LNG 'Q'\n-#define _C_FLT      'f'\n-#define _C_DBL      'd'\n-#define _C_LNG_DBL  'D'\n-#define _C_BFLD     'b'\n-#define _C_BOOL     'B'\n-#define _C_VOID     'v'\n-#define _C_UNDEF    '?'\n-#define _C_PTR      '^'\n-#define _C_CHARPTR  '*'\n-#define _C_ARY_B    '['\n-#define _C_ARY_E    ']'\n-#define _C_UNION_B  '('\n-#define _C_UNION_E  ')'\n-#define _C_STRUCT_B '{'\n-#define _C_STRUCT_E '}'\n-#define _C_VECTOR   '!'\n-#define _C_COMPLEX  'j'\n-\n-/* _C_ATOM is never generated by the compiler.  You can treat it as\n-   equivalent to \"*\".  */\n-#define _C_ATOM     '%'\n-\n-#include \"deprecated/struct_objc_symtab.h\"\n-#include \"deprecated/struct_objc_module.h\"\n-#include \"deprecated/struct_objc_ivar.h\"\n-#include \"deprecated/struct_objc_ivar_list.h\"\n-#include \"deprecated/struct_objc_method.h\"\n-typedef struct objc_method Method, *Method_t;\n-\n-#include \"deprecated/struct_objc_method_list.h\"\n-#include \"deprecated/struct_objc_protocol_list.h\"\n-\n-/*\n-** This is used to assure consistent access to the info field of \n-** classes\n-*/\n-#ifndef HOST_BITS_PER_LONG\n-#define HOST_BITS_PER_LONG  (sizeof(long)*8)\n-#endif \n-\n-#define __CLS_INFO(cls) ((cls)->info)\n-#define __CLS_ISINFO(cls, mask) ((__CLS_INFO(cls)&mask)==mask)\n-#define __CLS_SETINFO(cls, mask) (__CLS_INFO(cls) |= mask)\n-\n-/* The structure is of type MetaClass */\n-#define _CLS_META 0x2L\n-#define CLS_ISMETA(cls) ((cls)&&__CLS_ISINFO(cls, _CLS_META))\n-\n-\n-/* The structure is of type Class */\n-#define _CLS_CLASS 0x1L\n-#define CLS_ISCLASS(cls) ((cls)&&__CLS_ISINFO(cls, _CLS_CLASS))\n-\n-/*\n-** The class is initialized within the runtime.  This means that \n-** it has had correct super and sublinks assigned\n-*/\n-#define _CLS_RESOLV 0x8L\n-#define CLS_ISRESOLV(cls) __CLS_ISINFO(cls, _CLS_RESOLV)\n-#define CLS_SETRESOLV(cls) __CLS_SETINFO(cls, _CLS_RESOLV)\n-\n-/*\n-** The class has been send a +initialize message or a such is not \n-** defined for this class\n-*/\n-#define _CLS_INITIALIZED 0x04L\n-#define CLS_ISINITIALIZED(cls) __CLS_ISINFO(cls, _CLS_INITIALIZED)\n-#define CLS_SETINITIALIZED(cls) __CLS_SETINFO(cls, _CLS_INITIALIZED)\n-\n-/*\n-** The class number of this class.  This must be the same for both the \n-** class and its meta class object\n-*/\n-#define CLS_GETNUMBER(cls) (__CLS_INFO(cls) >> (HOST_BITS_PER_LONG/2))\n-#define CLS_SETNUMBER(cls, num) \\\n-  ({ (cls)->info <<= (HOST_BITS_PER_LONG/2); \\\n-     (cls)->info >>= (HOST_BITS_PER_LONG/2); \\\n-     __CLS_SETINFO(cls, (((unsigned long)num) << (HOST_BITS_PER_LONG/2))); })\n-\n-#include \"deprecated/struct_objc_category.h\"\n-\n-typedef struct objc_category Category, *Category_t;\n-\n-/* We include message.h for compatibility with the old objc-api.h\n-   which included the declarations currently in message.h.  The\n-   Apple/NeXT runtime does not do this and only includes message.h in\n-   objc-runtime.h.  It does not matter that much since most of the\n-   definitions in message.h are runtime-specific.  */\n-#include \"message.h\"\n-\n-/*\n-** This is a hook which is called by objc_lookup_class and\n-** objc_get_class if the runtime is not able to find the class.\n-** This may e.g. try to load in the class using dynamic loading.\n-** The function is guaranteed to be passed a non-NULL name string.\n-** In the Modern API, this is replaced by\n-** objc_setGetUnknownClassHandler ().\n-*/\n-objc_EXPORT Class (*_objc_lookup_class)(const char *name);\n-\n-/*\n-** This is a hook which is called by __objc_exec_class every time a class\n-** or a category is loaded into the runtime.  This may e.g. help a\n-** dynamic loader determine the classes that have been loaded when\n-** an object file is dynamically linked in.\n-*/\n-objc_EXPORT void (*_objc_load_callback)(Class _class, Category* category);\n-\n-/*\n-  Standard functions for memory allocation and disposal.  Users should\n-  use these functions in their ObjC programs so that they work so that\n-  they work properly with garbage collectors.\n-*/\n-objc_EXPORT void *\n-objc_malloc(size_t size);\n-\n-/* FIXME: Shouldn't the following be called objc_malloc_atomic ?  The\n-   GC function is GC_malloc_atomic() which makes sense.\n- */\n-objc_EXPORT void *\n-objc_atomic_malloc(size_t size);\n-\n-objc_EXPORT void *\n-objc_realloc(void *mem, size_t size);\n-\n-objc_EXPORT void *\n-objc_calloc(size_t nelem, size_t size);\n-\n-objc_EXPORT void\n-objc_free(void *mem);\n-\n-objc_EXPORT Method_t class_get_class_method(MetaClass _class, SEL aSel);\n-\n-objc_EXPORT Method_t class_get_instance_method(Class _class, SEL aSel);\n-\n-objc_EXPORT Class class_pose_as(Class impostor, Class superclass);\n-\n-objc_EXPORT Class objc_get_class(const char *name);\n-\n-objc_EXPORT Class objc_lookup_class(const char *name);\n-\n-objc_EXPORT Class objc_next_class(void **enum_state);\n-\n-objc_EXPORT const char *sel_get_name(SEL selector);\n-\n-objc_EXPORT const char *sel_get_type(SEL selector);\n-\n-objc_EXPORT SEL sel_get_uid(const char *name);\n-\n-objc_EXPORT SEL sel_get_any_uid(const char *name);\n-\n-objc_EXPORT SEL sel_get_any_typed_uid(const char *name);\n-\n-objc_EXPORT SEL sel_get_typed_uid(const char *name, const char*);\n-\n-objc_EXPORT SEL sel_register_name(const char *name);\n-\n-objc_EXPORT SEL sel_register_typed_name(const char *name, const char*type);\n-\n-\n-objc_EXPORT BOOL sel_is_mapped (SEL aSel);\n-\n-extern id class_create_instance(Class _class);\n-\n-static inline const char *\n-class_get_class_name(Class _class)\n-{\n-  return CLS_ISCLASS(_class)?_class->name:((_class==Nil)?\"Nil\":0);\n-}\n-\n-static inline long\n-class_get_instance_size(Class _class)\n-{\n-  return CLS_ISCLASS(_class)?_class->instance_size:0;\n-}\n-\n-static inline MetaClass\n-class_get_meta_class(Class _class)\n-{\n-  return CLS_ISCLASS(_class)?_class->class_pointer:Nil;\n-}\n-\n-static inline Class\n-class_get_super_class(Class _class)\n-{\n-  return CLS_ISCLASS(_class)?_class->super_class:Nil;\n-}\n-\n-static inline int\n-class_get_version(Class _class)\n-{\n-  return CLS_ISCLASS(_class)?_class->version:-1;\n-}\n-\n-static inline BOOL\n-class_is_class(Class _class)\n-{\n-  return CLS_ISCLASS(_class);\n-}\n-\n-static inline BOOL\n-class_is_meta_class(Class _class)\n-{\n-  return CLS_ISMETA(_class);\n-}\n-\n-\n-static inline void\n-class_set_version(Class _class, long version)\n-{\n-  if (CLS_ISCLASS(_class))\n-    _class->version = version;\n-}\n-\n-static inline void *\n-class_get_gc_object_type (Class _class)\n-{\n-  return CLS_ISCLASS(_class) ? _class->gc_object_type : NULL;\n-}\n-\n-/* Mark the instance variable as innaccessible to the garbage collector */\n-extern void class_ivar_set_gcinvisible (Class _class,\n-\t\t\t\t\tconst char* ivarname,\n-\t\t\t\t\tBOOL gcInvisible);\n-\n-objc_EXPORT IMP method_get_imp(Method_t method);\n-\n-objc_EXPORT IMP get_imp (Class _class, SEL sel);\n-\n-/* object_copy used to take a single argument in the traditional GNU\n-   Objective-C Runtime API (the one declared here), but takes 2 in the\n-   modern API (implemented in the actual runtime).  Define the old\n-   object_copy in terms of the new one.  */\n-objc_EXPORT id object_copy (id object, size_t size);\n-#define object_copy(X) (object_copy ((X), 0))\n-\n-objc_EXPORT id object_dispose(id object);\n-\n-static inline Class\n-object_get_class(id object)\n-{\n-  return ((object!=nil)\n-\t  ? (CLS_ISCLASS(object->class_pointer)\n-\t     ? object->class_pointer\n-\t     : (CLS_ISMETA(object->class_pointer)\n-\t\t? (Class)object\n-\t\t: Nil))\n-\t  : Nil);\n-}\n-\n-static inline const char *\n-object_get_class_name(id object)\n-{\n-  return ((object!=nil)?(CLS_ISCLASS(object->class_pointer)\n-                         ?object->class_pointer->name\n-                         :((Class)object)->name)\n-                       :\"Nil\");\n-}\n-\n-static inline MetaClass\n-object_get_meta_class(id object)\n-{\n-  return ((object!=nil)?(CLS_ISCLASS(object->class_pointer)\n-                         ?object->class_pointer->class_pointer\n-                         :(CLS_ISMETA(object->class_pointer)\n-                           ?object->class_pointer\n-                           :Nil))\n-                       :Nil);\n-}\n-\n-static inline Class\n-object_get_super_class\n-(id object)\n-{\n-  return ((object!=nil)?(CLS_ISCLASS(object->class_pointer)\n-                         ?object->class_pointer->super_class\n-                         :(CLS_ISMETA(object->class_pointer)\n-                           ?((Class)object)->super_class\n-                           :Nil))\n-                       :Nil);\n-}\n-\n-static inline BOOL\n-object_is_class (id object)\n-{\n-  return ((object != nil)  &&  CLS_ISMETA (object->class_pointer));\n-}\n- \n-static inline BOOL\n-object_is_instance (id object)\n-{\n-  return ((object != nil)  &&  CLS_ISCLASS (object->class_pointer));\n-}\n-\n-static inline BOOL\n-object_is_meta_class (id object)\n-{\n-  return ((object != nil)\n-\t  &&  !object_is_instance (object)  \n-\t  &&  !object_is_class (object));\n-}\n-\n-#ifdef __cplusplus\n-}\n-#endif /* __cplusplus */\n-\n-#endif /* not __objc_api_INCLUDE_GNU */\n-\n-\n-"}, {"sha": "c0d58e1cd112f8f615509a6c14b4a42b1410ba6d", "filename": "libobjc/objc/objc.h", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fobjc%2Fobjc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fobjc%2Fobjc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fobjc.h?ref=80e4b9e501e4e702f1c32287c1ff57ca84054a7c", "patch": "@@ -36,11 +36,6 @@ extern \"C\" {\n \n #include <stddef.h>\n \n-/* objc-decls.h is included because deprecated/objc_msg_sendv.h needs\n-   it.  When that goes away, the include of objc-decls.h should be\n-   removed.  */\n-#include \"objc-decls.h\"\n-\n /* The current version of the GNU Objective-C Runtime library in\n    compressed ISO date format.  This should be updated any time a new\n    version is released with changes to the public API (there is no\n@@ -76,15 +71,12 @@ typedef unsigned char  BOOL;\n    selector and know that the class implements it, you can use it to\n    call the method for an object in the class.  */\n typedef const struct objc_selector *SEL;\n-#include \"deprecated/struct_objc_selector.h\"\n \n /* A Class is a class (in the object-oriented sense).  In Objective-C\n    there is the complication that each Class is an object itself, and\n    so belongs to a class too.  This class that a class belongs to is\n    called its 'meta class'.  */\n typedef struct objc_class *Class;\n-#include \"deprecated/MetaClass.h\"\n-#include \"deprecated/struct_objc_class.h\"\n \n /* An 'id' is an object of an unknown class.  The way the object data\n    is stored inside the object is private and what you see here is\n@@ -140,18 +132,11 @@ typedef id (*IMP)(id, SEL, ...);\n      there is no reason to even define a 'struct objc_protocol'.  As\n      all the structure details will be hidden, a Protocol basically is\n      simply an object (as it should be).  */\n-  /* typedef struct objc_object Protocol; */\n-  #include \"deprecated/struct_objc_protocol.h\"\n+  typedef struct objc_object Protocol;\n #else /* __OBJC__ */\n   @class Protocol;\n #endif \n \n-/* Deprecated include - here temporarily, for backwards-compatibility\n-   as reval_t, apply_t, arglist_t and objc_msg_lookup() used to be\n-   defined here.  objc_msg_lookup() is now defined in message.h,\n-   included by objc-api.h or runtime.h.  */\n-#include \"deprecated/objc_msg_sendv.h\"\n-\n /* Compatibility note: the Apple/NeXT runtime defines sel_getName(),\n    sel_registerName(), object_getClassName(), object_getIndexedIvars()\n    in this file while the GNU runtime defines them in runtime.h."}, {"sha": "ab9926e9b6d6887b24b25ba2f64a4fbd0e458f6f", "filename": "libobjc/objc/runtime.h", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fobjc%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fobjc%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fruntime.h?ref=80e4b9e501e4e702f1c32287c1ff57ca84054a7c", "patch": "@@ -28,23 +28,13 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n /*\n   This file declares the \"modern\" GNU Objective-C Runtime API.\n-  Include this file to use it.\n-\n-  This API is replacing the \"traditional\" GNU Objective-C Runtime API\n-  (declared in objc/objc-api.h) which is the one supported by older\n-  versions of the GNU Objective-C Runtime.  The \"modern\" API is very\n-  similar to the API used by the modern Apple/NeXT runtime.\n-\n-  Because the two APIs have some conflicting definitions (in\n-  particular, Method and Category are defined differently) you should\n-  include either objc/objc-api.h (to use the traditional GNU\n-  Objective-C Runtime API) or objc/runtime.h (to use the modern GNU\n-  Objective-C Runtime API), but not both.\n-*/\n-#ifdef __objc_api_INCLUDE_GNU\n-# error You can not include both objc/objc-api.h and objc/runtime.h.  Include objc/objc-api.h for the traditional GNU Objective-C Runtime API and objc/runtime.h for the modern one.\n-#endif\n \n+  This API replaced the \"traditional\" GNU Objective-C Runtime API\n+  (which used to be declared in objc/objc-api.h) which is the one\n+  supported by older versions of the GNU Objective-C Runtime.  The\n+  \"modern\" API is very similar to the API used by the modern\n+  Apple/NeXT runtime.\n+*/\n #include \"objc.h\"\n #include \"objc-decls.h\"\n "}, {"sha": "a02f2cd999e23af5df5e71786dc5cb9491b0e997", "filename": "libobjc/protocols.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fprotocols.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fprotocols.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fprotocols.c?ref=80e4b9e501e4e702f1c32287c1ff57ca84054a7c", "patch": "@@ -55,7 +55,7 @@ __objc_protocols_init (void)\n \n /* Add a protocol to the hashtable.  */\n void\n-__objc_protocols_add_protocol (const char *name, Protocol *object)\n+__objc_protocols_add_protocol (const char *name, struct objc_protocol *object)\n {\n   objc_mutex_lock (__protocols_hashtable_lock);\n \n@@ -153,7 +153,7 @@ class_addProtocol (Class class_, Protocol *protocol)\n   /* Create the objc_protocol_list.  */\n   protocols = malloc (sizeof (struct objc_protocol_list));\n   protocols->count = 1;\n-  protocols->list[0] = protocol;\n+  protocols->list[0] = (struct objc_protocol *)protocol;\n \n   /* Attach it to the list of class protocols.  */\n   protocols->next = class_->protocols;\n@@ -189,8 +189,8 @@ class_conformsToProtocol (Class class_, Protocol *protocol)\n       size_t i;\n       for (i = 0; i < proto_list->count; i++)\n \t{\n-\t  if (proto_list->list[i] == protocol\n-\t      || protocol_conformsToProtocol (proto_list->list[i],\n+\t  if (proto_list->list[i] == (struct objc_protocol *)protocol\n+\t      || protocol_conformsToProtocol ((Protocol *)proto_list->list[i],\n \t\t\t\t\t      protocol))\n \t    {\n \t      objc_mutex_unlock (__objc_runtime_mutex);\n@@ -246,7 +246,7 @@ class_copyProtocolList (Class class_, unsigned int *numberOfReturnedProtocols)\n \t  size_t j;\n \t  for (j = 0; j < proto_list->count; j++)\n \t    {\n-\t      returnValue[i] = proto_list->list[j];\n+\t      returnValue[i] = (Protocol *)proto_list->list[j];\n \t      i++;\n \t    }\n \t  proto_list = proto_list->next;\n@@ -294,7 +294,7 @@ protocol_conformsToProtocol (Protocol *protocol, Protocol *anotherProtocol)\n       \n       for (i = 0; i < proto_list->count; i++)\n \t{\n-\t  if (protocol_conformsToProtocol (proto_list->list[i], anotherProtocol))\n+\t  if (protocol_conformsToProtocol ((Protocol *)proto_list->list[i], anotherProtocol))\n \t    return YES;\n \t}\n       proto_list = proto_list->next;\n@@ -541,7 +541,7 @@ Protocol **protocol_copyProtocolList (Protocol *protocol, unsigned int *numberOf\n \t  size_t j;\n \t  for (j = 0; j < proto_list->count; j++)\n \t    {\n-\t      returnValue[i] = proto_list->list[j];\n+\t      returnValue[i] = (Protocol *)proto_list->list[j];\n \t      i++;\n \t    }\n \t  proto_list = proto_list->next;"}, {"sha": "f58c416a22dc6e792178005e855e126c557c79b1", "filename": "libobjc/sarray.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fsarray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fsarray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fsarray.c?ref=80e4b9e501e4e702f1c32287c1ff57ca84054a7c", "patch": "@@ -27,6 +27,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"objc-private/sarray.h\"\n #include \"objc/runtime.h\" /* For objc_malloc */\n #include \"objc/thr.h\"     /* For objc_mutex_lock */\n+#include \"objc-private/module-abi-8.h\"\n #include \"objc-private/runtime.h\"\n #include <stdio.h>\n #include <string.h> /* For memset */"}, {"sha": "61ca3b3f12ff2d4db9dc5c5b89fc46ef20e676b1", "filename": "libobjc/sendmsg.c", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fsendmsg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fsendmsg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fsendmsg.c?ref=80e4b9e501e4e702f1c32287c1ff57ca84054a7c", "patch": "@@ -469,29 +469,9 @@ objc_msg_lookup_super (struct objc_super *super, SEL sel)\n     return (IMP)nil_method;\n }\n \n-/* Temporarily defined here until objc_msg_sendv() goes away.  */\n-char *method_get_first_argument (struct objc_method *,\n-\t\t\t\t arglist_t argframe, \n-\t\t\t\t const char **type);\n-char *method_get_next_argument (arglist_t argframe, \n-\t\t\t\tconst char **type);\n-int method_get_sizeof_arguments (struct objc_method *);\n-\n struct objc_method *\n class_get_instance_method (Class class, SEL op);\n \n-retval_t\n-objc_msg_sendv (id object, SEL op, arglist_t arg_frame)\n-{\n-  struct objc_method *m = class_get_instance_method (object->class_pointer, op);\n-  const char *type;\n-  *((id *) method_get_first_argument (m, arg_frame, &type)) = object;\n-  *((SEL *) method_get_next_argument (arg_frame, &type)) = op;\n-  return __builtin_apply ((apply_t) m->method_imp, \n-\t\t\t  arg_frame,\n-\t\t\t  method_get_sizeof_arguments (m));\n-}\n-\n void\n __objc_init_dispatch_tables ()\n {\n@@ -671,7 +651,7 @@ class_get_instance_method (Class class, SEL op)\n }\n \n struct objc_method *\n-class_get_class_method (MetaClass class, SEL op)\n+class_get_class_method (Class class, SEL op)\n {\n   return search_for_method_in_hierarchy (class, op);\n }\n@@ -883,6 +863,9 @@ search_for_method_in_list (struct objc_method_list * list, SEL op)\n   return NULL;\n }\n \n+typedef void * retval_t;\n+typedef void * arglist_t;\n+\n static retval_t __objc_forward (id object, SEL sel, arglist_t args);\n \n /* Forwarding pointers/integers through the normal registers.  */"}, {"sha": "095b9403a47ce1c91fb337066616fc885fd2e8d7", "filename": "libobjc/thr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fthr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e4b9e501e4e702f1c32287c1ff57ca84054a7c/libobjc%2Fthr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fthr.c?ref=80e4b9e501e4e702f1c32287c1ff57ca84054a7c", "patch": "@@ -40,6 +40,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"objc/thr.h\"\n #include \"objc/message.h\" /* For objc_msg_lookup().  */\n #include \"objc/runtime.h\"\n+#include \"objc-private/module-abi-8.h\"\n #include \"objc-private/runtime.h\"\n #include <gthr.h>\n "}]}