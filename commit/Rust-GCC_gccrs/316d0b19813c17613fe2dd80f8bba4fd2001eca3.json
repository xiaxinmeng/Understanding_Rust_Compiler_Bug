{"sha": "316d0b19813c17613fe2dd80f8bba4fd2001eca3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE2ZDBiMTk4MTNjMTc2MTNmZTJkZDgwZjhiYmE0ZmQyMDAxZWNhMw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2003-11-27T05:20:11Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2003-11-27T05:20:11Z"}, "message": "re PR middle-end/8028 (__builtin_apply() passes wrong arguments)\n\n\tPR middle-end/8028\n\tPR middle-end/9890\n\tPR middle-end/11151\n\tPR middle-end/12210\n\tPR middle-end/12503\n\tPR middle-end/12692\n\t* builtins.c (expand_builtin_apply): Use virtual_outgoing_args_rtx\n\tas the base address to copy the memory arguments to.\n\nFrom-SVN: r73976", "tree": {"sha": "946c3c7c87e191ddb13beb07b342cb71173d930b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/946c3c7c87e191ddb13beb07b342cb71173d930b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/316d0b19813c17613fe2dd80f8bba4fd2001eca3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/316d0b19813c17613fe2dd80f8bba4fd2001eca3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/316d0b19813c17613fe2dd80f8bba4fd2001eca3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/316d0b19813c17613fe2dd80f8bba4fd2001eca3/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "27f0f55216eeea3cc81612ecbc235d7704382a77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27f0f55216eeea3cc81612ecbc235d7704382a77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27f0f55216eeea3cc81612ecbc235d7704382a77"}], "stats": {"total": 70, "additions": 64, "deletions": 6}, "files": [{"sha": "f68c34b8c57811a2db678148c931cc3313dbae6c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316d0b19813c17613fe2dd80f8bba4fd2001eca3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316d0b19813c17613fe2dd80f8bba4fd2001eca3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=316d0b19813c17613fe2dd80f8bba4fd2001eca3", "patch": "@@ -1,3 +1,14 @@\n+2003-11-27  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR middle-end/8028\n+\tPR middle-end/9890\n+\tPR middle-end/11151\n+\tPR middle-end/12210\n+\tPR middle-end/12503\n+\tPR middle-end/12692\n+\t* builtins.c (expand_builtin_apply): Use virtual_outgoing_args_rtx\n+\tas the base address to copy the memory arguments to.\n+\n 2003-11-26  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \t* config/i386/cygming.h (ASM_OUTPUT_DEF_FROM_DECLS): Declare"}, {"sha": "a48c5af9a5437787c761ff85e54ab410f3f616ac", "filename": "gcc/builtins.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316d0b19813c17613fe2dd80f8bba4fd2001eca3/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316d0b19813c17613fe2dd80f8bba4fd2001eca3/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=316d0b19813c17613fe2dd80f8bba4fd2001eca3", "patch": "@@ -1219,12 +1219,16 @@ expand_builtin_apply (rtx function, rtx arguments, rtx argsize)\n #endif\n     emit_stack_save (SAVE_BLOCK, &old_stack_level, NULL_RTX);\n \n-  /* Push a block of memory onto the stack to store the memory arguments.\n-     Save the address in a register, and copy the memory arguments.  ??? I\n-     haven't figured out how the calling convention macros effect this,\n-     but it's likely that the source and/or destination addresses in\n-     the block copy will need updating in machine specific ways.  */\n-  dest = allocate_dynamic_stack_space (argsize, 0, BITS_PER_UNIT);\n+  /* Allocate a block of memory onto the stack and copy the memory\n+     arguments to the outgoing arguments address.  */\n+  allocate_dynamic_stack_space (argsize, 0, BITS_PER_UNIT);\n+  dest = virtual_outgoing_args_rtx;\n+#ifndef STACK_GROWS_DOWNWARD\n+  if (GET_CODE (argsize) == CONST_INT)\n+    dest = plus_constant (dest, -INTVAL (argsize));\n+  else\n+    dest = gen_rtx_PLUS (Pmode, dest, negate_rtx (Pmode, argsize));\n+#endif\n   dest = gen_rtx_MEM (BLKmode, dest);\n   set_mem_align (dest, PARM_BOUNDARY);\n   src = gen_rtx_MEM (BLKmode, incoming_args);"}, {"sha": "20faca0c1f57c830f7596f9d047790cdf8c8aff4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316d0b19813c17613fe2dd80f8bba4fd2001eca3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316d0b19813c17613fe2dd80f8bba4fd2001eca3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=316d0b19813c17613fe2dd80f8bba4fd2001eca3", "patch": "@@ -1,3 +1,7 @@\n+2003-11-27  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gcc.dg/builtin-apply2.c: New test.\n+\n 2003-11-26  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* gcc.c-torture/compile/20031023-4.c: Don't XFAIL on SPARC64."}, {"sha": "56b27a1dd17e14de6b78c0fca2df4b67cfb7ffae", "filename": "gcc/testsuite/gcc.dg/builtin-apply2.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316d0b19813c17613fe2dd80f8bba4fd2001eca3/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-apply2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316d0b19813c17613fe2dd80f8bba4fd2001eca3/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-apply2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-apply2.c?ref=316d0b19813c17613fe2dd80f8bba4fd2001eca3", "patch": "@@ -0,0 +1,39 @@\n+/* PR target/12503 */\n+/* Origin: <pierre.nguyen-tuong@asim.lip6.fr> */\n+\n+/* Verify that __builtin_apply behaves correctly on targets\n+   with pre-pushed arguments (e.g. SPARC).  */\n+\n+/* { dg-do run } */\n+   \n+\n+#define INTEGER_ARG  5\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+extern void abort(void);\n+\n+void foo(char *name, double d, double e, double f, int g)\n+{\n+  if (g != INTEGER_ARG)\n+    abort();\n+}\n+\n+void bar(char *name, ...)\n+{\n+  size_t size;\n+  void *arguments;\n+\n+  size = sizeof(char *) + 3 * sizeof(double) + sizeof(int);\n+\n+  arguments = __builtin_apply_args();\n+\n+  __builtin_apply(foo, arguments, size);\n+}\n+\n+int main(void)\n+{\n+  bar(\"eeee\", 5.444567, 8.90765, 4.567789, INTEGER_ARG);\n+\n+  return 0;\n+}"}]}