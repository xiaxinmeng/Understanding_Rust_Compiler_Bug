{"sha": "1ab1f3502038323f6f5cd8c16c0ac1b1416e3545", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFiMWYzNTAyMDM4MzIzZjZmNWNkOGMxNmMwYWMxYjE0MTZlMzU0NQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-07-20T13:48:38Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-07-20T13:48:38Z"}, "message": "Reduce memory consumption for push/pop_access_scope.\n\nI was seeing memory consumption issues on the concepts-cxx2a\nbranch. push_scope was, surprisingly, at the top of -fmem-report, and\npush_access_scope was pretty high.  Fixing them was pretty simple.\n\n\t* name-lookup.c (leave_scope): Do add class levels other than\n\tprevious_class_level to free_binding_level.\n\t(invalidate_class_lookup_cache): Move from class.c, add to\n\tfree_binding_level.\n\t* pt.c (saved_access_scope): Change from list to vec.\n\nFrom-SVN: r273622", "tree": {"sha": "2728d6a496766f5f19f687cb4c31bd09a0435041", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2728d6a496766f5f19f687cb4c31bd09a0435041"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ab1f3502038323f6f5cd8c16c0ac1b1416e3545", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ab1f3502038323f6f5cd8c16c0ac1b1416e3545", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ab1f3502038323f6f5cd8c16c0ac1b1416e3545", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ab1f3502038323f6f5cd8c16c0ac1b1416e3545/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "554a530ff81870098572832eed8ca00b3593bb41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/554a530ff81870098572832eed8ca00b3593bb41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/554a530ff81870098572832eed8ca00b3593bb41"}], "stats": {"total": 43, "additions": 25, "deletions": 18}, "files": [{"sha": "0c6a7de94d92e214abea716b4653d951bd93364d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab1f3502038323f6f5cd8c16c0ac1b1416e3545/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab1f3502038323f6f5cd8c16c0ac1b1416e3545/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1ab1f3502038323f6f5cd8c16c0ac1b1416e3545", "patch": "@@ -1,3 +1,12 @@\n+2019-07-20  Jason Merrill  <jason@redhat.com>\n+\n+\tReduce memory consumption for push/pop_access_scope.\n+\t* name-lookup.c (leave_scope): Do add class levels other than\n+\tprevious_class_level to free_binding_level.\n+\t(invalidate_class_lookup_cache): Move from class.c, add to\n+\tfree_binding_level.\n+\t* pt.c (saved_access_scope): Change from list to vec.\n+\n 2019-07-20  Jakub Jelinek  <jakub@redhat.com>\n \n \t* cp-tree.h (OMP_FOR_GIMPLIFYING_P): Use OMP_LOOPING_CHECK"}, {"sha": "b61152c7e72f03f7ca1c6597e7dc257ffac4f39f", "filename": "gcc/cp/class.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab1f3502038323f6f5cd8c16c0ac1b1416e3545/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab1f3502038323f6f5cd8c16c0ac1b1416e3545/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=1ab1f3502038323f6f5cd8c16c0ac1b1416e3545", "patch": "@@ -7588,16 +7588,6 @@ pushclass (tree type)\n     restore_class_cache ();\n }\n \n-/* When we exit a toplevel class scope, we save its binding level so\n-   that we can restore it quickly.  Here, we've entered some other\n-   class, so we must invalidate our cache.  */\n-\n-void\n-invalidate_class_lookup_cache (void)\n-{\n-  previous_class_level = NULL;\n-}\n-\n /* Get out of the current class scope. If we were in a class scope\n    previously, that is the one popped to.  */\n "}, {"sha": "9f278220df30537c164664d7d414178041c2f3a9", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab1f3502038323f6f5cd8c16c0ac1b1416e3545/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab1f3502038323f6f5cd8c16c0ac1b1416e3545/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=1ab1f3502038323f6f5cd8c16c0ac1b1416e3545", "patch": "@@ -3392,7 +3392,7 @@ leave_scope (void)\n      namespace.  For classes, we cache some binding levels.  For other\n      scopes, we just make the structure available for reuse.  */\n   if (scope->kind != sk_namespace\n-      && scope->kind != sk_class)\n+      && scope != previous_class_level)\n     {\n       scope->level_chain = free_binding_level;\n       gcc_assert (!ENABLE_SCOPE_CHECKING\n@@ -3420,6 +3420,18 @@ leave_scope (void)\n   return current_binding_level;\n }\n \n+/* When we exit a toplevel class scope, we save its binding level so\n+   that we can restore it quickly.  Here, we've entered some other\n+   class, so we must invalidate our cache.  */\n+\n+void\n+invalidate_class_lookup_cache (void)\n+{\n+  previous_class_level->level_chain = free_binding_level;\n+  free_binding_level = previous_class_level;\n+  previous_class_level = NULL;\n+}\n+\n static void\n resume_scope (cp_binding_level* b)\n {"}, {"sha": "deaac576468052bfa94d1386fc48342e5ef8543d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab1f3502038323f6f5cd8c16c0ac1b1416e3545/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab1f3502038323f6f5cd8c16c0ac1b1416e3545/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1ab1f3502038323f6f5cd8c16c0ac1b1416e3545", "patch": "@@ -67,7 +67,7 @@ static vec<int> inline_parm_levels;\n \n static GTY(()) struct tinst_level *current_tinst_level;\n \n-static GTY(()) tree saved_access_scope;\n+static GTY(()) vec<tree, va_gc> *saved_access_scope;\n \n /* Live only within one (recursive) call to tsubst_expr.  We use\n    this to pass the statement expression node from the STMT_EXPR\n@@ -247,8 +247,7 @@ push_access_scope (tree t)\n \n   if (TREE_CODE (t) == FUNCTION_DECL)\n     {\n-      saved_access_scope = tree_cons\n-\t(NULL_TREE, current_function_decl, saved_access_scope);\n+      vec_safe_push (saved_access_scope, current_function_decl);\n       current_function_decl = t;\n     }\n }\n@@ -260,10 +259,7 @@ static void\n pop_access_scope (tree t)\n {\n   if (TREE_CODE (t) == FUNCTION_DECL)\n-    {\n-      current_function_decl = TREE_VALUE (saved_access_scope);\n-      saved_access_scope = TREE_CHAIN (saved_access_scope);\n-    }\n+    current_function_decl = saved_access_scope->pop();\n \n   if (DECL_FRIEND_CONTEXT (t) || DECL_CLASS_SCOPE_P (t))\n     pop_nested_class ();"}]}