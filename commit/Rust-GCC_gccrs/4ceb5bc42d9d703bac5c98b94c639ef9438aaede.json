{"sha": "4ceb5bc42d9d703bac5c98b94c639ef9438aaede", "node_id": "C_kwDOANBUbNoAKDRjZWI1YmM0MmQ5ZDcwM2JhYzVjOThiOTRjNjM5ZWY5NDM4YWFlZGU", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-23T09:12:09Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-23T11:53:51Z"}, "message": "libstdc++: Enable constexpr std::bitset for debug mode\n\nWe already disable all debug mode checks for C++11 and later, so we can\neasily make everything constexpr. This fixes the FAIL results for the\nnew tests when using -D_GLIBCXX_DEBUG.\n\nAlso fix some other tests failing with non-default test flags.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/debug/bitset (__debug::bitset): Add constexpr to all\n\tmember functions.\n\t(operator&, operator|, operator^): Add inline and constexpr.\n\t(operator>>, operator<<): Add inline.\n\t* testsuite/20_util/bitset/access/constexpr.cc: Only check using\n\tconstexpr std::string for the cxx11 ABI.\n\t* testsuite/20_util/bitset/cons/constexpr_c++23.cc: Likewise.\n\t* testsuite/20_util/headers/bitset/synopsis.cc: Check constexpr\n\tfor C++23.", "tree": {"sha": "f5fcf629cfb511aff8652a031e5f53bdabfa3da7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5fcf629cfb511aff8652a031e5f53bdabfa3da7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ceb5bc42d9d703bac5c98b94c639ef9438aaede", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ceb5bc42d9d703bac5c98b94c639ef9438aaede", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ceb5bc42d9d703bac5c98b94c639ef9438aaede", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ceb5bc42d9d703bac5c98b94c639ef9438aaede/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffb03fa12850df3a4f53435d5f20ff122c83732a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffb03fa12850df3a4f53435d5f20ff122c83732a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffb03fa12850df3a4f53435d5f20ff122c83732a"}], "stats": {"total": 56, "additions": 51, "deletions": 5}, "files": [{"sha": "9335fe441a334580182bd2ca71117173b086ede6", "filename": "libstdc++-v3/include/debug/bitset", "status": "modified", "additions": 38, "deletions": 5, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ceb5bc42d9d703bac5c98b94c639ef9438aaede/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ceb5bc42d9d703bac5c98b94c639ef9438aaede/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset?ref=4ceb5bc42d9d703bac5c98b94c639ef9438aaede", "patch": "@@ -141,6 +141,7 @@ namespace __debug\n       : _Base(__val) { }\n \n       template<typename _CharT, typename _Traits, typename _Alloc>\n+\t_GLIBCXX23_CONSTEXPR\n         explicit\n         bitset(const std::basic_string<_CharT, _Traits, _Alloc>& __str,\n \t       typename std::basic_string<_CharT, _Traits, _Alloc>::size_type\n@@ -152,6 +153,7 @@ namespace __debug\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 396. what are characters zero and one.\n       template<class _CharT, class _Traits, class _Alloc>\n+\t_GLIBCXX23_CONSTEXPR\n \tbitset(const std::basic_string<_CharT, _Traits, _Alloc>& __str,\n \t       typename std::basic_string<_CharT, _Traits, _Alloc>::size_type\n \t       __pos,\n@@ -160,10 +162,12 @@ namespace __debug\n \t       _CharT __zero, _CharT __one = _CharT('1'))\n \t: _Base(__str, __pos, __n, __zero, __one) { }\n \n+      _GLIBCXX23_CONSTEXPR\n       bitset(const _Base& __x) : _Base(__x) { }\n \n #if __cplusplus >= 201103L\n       template<typename _CharT>\n+\t_GLIBCXX23_CONSTEXPR\n         explicit\n         bitset(const _CharT* __str,\n \t       typename std::basic_string<_CharT>::size_type __n\n@@ -173,41 +177,47 @@ namespace __debug\n #endif\n \n       // 23.3.5.2 bitset operations:\n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>&\n       operator&=(const bitset<_Nb>& __rhs) _GLIBCXX_NOEXCEPT\n       {\n \t_M_base() &= __rhs;\n \treturn *this;\n       }\n \n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>&\n       operator|=(const bitset<_Nb>& __rhs) _GLIBCXX_NOEXCEPT\n       {\n \t_M_base() |= __rhs;\n \treturn *this;\n       }\n \n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>&\n       operator^=(const bitset<_Nb>& __rhs) _GLIBCXX_NOEXCEPT\n       {\n \t_M_base() ^= __rhs;\n \treturn *this;\n       }\n \n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>&\n       operator<<=(size_t __pos) _GLIBCXX_NOEXCEPT\n       {\n \t_M_base() <<= __pos;\n \treturn *this;\n       }\n \n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>&\n       operator>>=(size_t __pos) _GLIBCXX_NOEXCEPT\n       {\n \t_M_base() >>= __pos;\n \treturn *this;\n       }\n \n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>&\n       set() _GLIBCXX_NOEXCEPT\n       {\n@@ -217,38 +227,44 @@ namespace __debug\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 186. bitset::set() second parameter should be bool\n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>&\n       set(size_t __pos, bool __val = true)\n       {\n \t_Base::set(__pos, __val);\n \treturn *this;\n       }\n \n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>&\n       reset() _GLIBCXX_NOEXCEPT\n       {\n \t_Base::reset();\n \treturn *this;\n       }\n \n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>&\n       reset(size_t __pos)\n       {\n \t_Base::reset(__pos);\n \treturn *this;\n       }\n \n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>\n       operator~() const _GLIBCXX_NOEXCEPT\n       { return bitset(~_M_base()); }\n \n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>&\n       flip() _GLIBCXX_NOEXCEPT\n       {\n \t_Base::flip();\n \treturn *this;\n       }\n \n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>&\n       flip(size_t __pos)\n       {\n@@ -259,6 +275,7 @@ namespace __debug\n       // element access:\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 11. Bitset minor problems\n+      _GLIBCXX23_CONSTEXPR\n       reference\n       operator[](size_t __pos)\n       {\n@@ -288,13 +305,15 @@ namespace __debug\n #endif\n \n       template <typename _CharT, typename _Traits, typename _Alloc>\n+\t_GLIBCXX23_CONSTEXPR\n         std::basic_string<_CharT, _Traits, _Alloc>\n         to_string() const\n         { return _M_base().template to_string<_CharT, _Traits, _Alloc>(); }\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 396. what are characters zero and one.\n       template<class _CharT, class _Traits, class _Alloc>\n+\t_GLIBCXX23_CONSTEXPR\n \tstd::basic_string<_CharT, _Traits, _Alloc>\n \tto_string(_CharT __zero, _CharT __one = _CharT('1')) const\n \t{\n@@ -305,19 +324,22 @@ namespace __debug\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 434. bitset::to_string() hard to use.\n       template<typename _CharT, typename _Traits>\n+\t_GLIBCXX23_CONSTEXPR\n         std::basic_string<_CharT, _Traits, std::allocator<_CharT> >\n         to_string() const\n         { return to_string<_CharT, _Traits, std::allocator<_CharT> >(); }\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 853. to_string needs updating with zero and one.\n       template<class _CharT, class _Traits>\n+\t_GLIBCXX23_CONSTEXPR\n \tstd::basic_string<_CharT, _Traits, std::allocator<_CharT> >\n \tto_string(_CharT __zero, _CharT __one = _CharT('1')) const\n \t{ return to_string<_CharT, _Traits,\n \t                   std::allocator<_CharT> >(__zero, __one); }\n \n       template<typename _CharT>\n+\t_GLIBCXX23_CONSTEXPR\n         std::basic_string<_CharT, std::char_traits<_CharT>,\n                           std::allocator<_CharT> >\n         to_string() const\n@@ -327,6 +349,7 @@ namespace __debug\n         }\n \n       template<class _CharT>\n+\t_GLIBCXX23_CONSTEXPR\n \tstd::basic_string<_CharT, std::char_traits<_CharT>,\n \t                  std::allocator<_CharT> >\n \tto_string(_CharT __zero, _CharT __one = _CharT('1')) const\n@@ -335,12 +358,14 @@ namespace __debug\n \t                   std::allocator<_CharT> >(__zero, __one);\n \t}\n \n+      _GLIBCXX23_CONSTEXPR\n       std::basic_string<char, std::char_traits<char>, std::allocator<char> >\n       to_string() const\n       {\n \treturn to_string<char,std::char_traits<char>,std::allocator<char> >();\n       }\n \n+      _GLIBCXX23_CONSTEXPR\n       std::basic_string<char, std::char_traits<char>, std::allocator<char> >\n       to_string(char __zero, char __one = '1') const\n       {\n@@ -351,6 +376,7 @@ namespace __debug\n       using _Base::count;\n       using _Base::size;\n \n+      _GLIBCXX23_CONSTEXPR\n       bool\n       operator==(const bitset<_Nb>& __rhs) const _GLIBCXX_NOEXCEPT\n       { return _M_base() == __rhs._M_base(); }\n@@ -366,45 +392,52 @@ namespace __debug\n       using _Base::any;\n       using _Base::none;\n \n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>\n       operator<<(size_t __pos) const _GLIBCXX_NOEXCEPT\n       { return bitset<_Nb>(_M_base() << __pos); }\n \n+      _GLIBCXX23_CONSTEXPR\n       bitset<_Nb>\n       operator>>(size_t __pos) const _GLIBCXX_NOEXCEPT\n       { return bitset<_Nb>(_M_base() >> __pos); }\n \n+      _GLIBCXX23_CONSTEXPR\n       _Base& \n       _M_base() _GLIBCXX_NOEXCEPT\n       { return *this; }\n \n+      _GLIBCXX23_CONSTEXPR\n       const _Base&\n       _M_base() const _GLIBCXX_NOEXCEPT\n       { return *this; }\n     };\n \n   template<size_t _Nb>\n-    bitset<_Nb>\n+    _GLIBCXX23_CONSTEXPR\n+    inline bitset<_Nb>\n     operator&(const bitset<_Nb>& __x, const bitset<_Nb>& __y) _GLIBCXX_NOEXCEPT\n     { return bitset<_Nb>(__x) &= __y; }\n \n   template<size_t _Nb>\n-    bitset<_Nb>\n+    _GLIBCXX23_CONSTEXPR\n+    inline bitset<_Nb>\n     operator|(const bitset<_Nb>& __x, const bitset<_Nb>& __y) _GLIBCXX_NOEXCEPT\n     { return bitset<_Nb>(__x) |= __y; }\n \n   template<size_t _Nb>\n-    bitset<_Nb>\n+    _GLIBCXX23_CONSTEXPR\n+    inline bitset<_Nb>\n     operator^(const bitset<_Nb>& __x, const bitset<_Nb>& __y) _GLIBCXX_NOEXCEPT\n     { return bitset<_Nb>(__x) ^= __y; }\n \n   template<typename _CharT, typename _Traits, size_t _Nb>\n-    std::basic_istream<_CharT, _Traits>&\n+    inline std::basic_istream<_CharT, _Traits>&\n     operator>>(std::basic_istream<_CharT, _Traits>& __is, bitset<_Nb>& __x)\n     { return __is >> __x._M_base(); }\n \n   template<typename _CharT, typename _Traits, size_t _Nb>\n-    std::basic_ostream<_CharT, _Traits>&\n+    inline std::basic_ostream<_CharT, _Traits>&\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n \t       const bitset<_Nb>& __x)\n     { return __os << __x._M_base(); }"}, {"sha": "53bb07f9498fc56571299bedc99cdc7a72801500", "filename": "libstdc++-v3/testsuite/20_util/bitset/access/constexpr.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ceb5bc42d9d703bac5c98b94c639ef9438aaede/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbitset%2Faccess%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ceb5bc42d9d703bac5c98b94c639ef9438aaede/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbitset%2Faccess%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbitset%2Faccess%2Fconstexpr.cc?ref=4ceb5bc42d9d703bac5c98b94c639ef9438aaede", "patch": "@@ -27,6 +27,7 @@ test_indexing()\n \n static_assert( test_indexing() );\n \n+#if _GLIBCXX_USE_CXX11_ABI\n constexpr bool\n test_to_string()\n {\n@@ -35,6 +36,7 @@ test_to_string()\n }\n \n static_assert( test_to_string() );\n+#endif\n \n constexpr bool\n test_to_ulong()"}, {"sha": "532fc9dc4d578ac27395cdc28e5aed98cd99c015", "filename": "libstdc++-v3/testsuite/20_util/bitset/cons/constexpr_c++23.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ceb5bc42d9d703bac5c98b94c639ef9438aaede/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbitset%2Fcons%2Fconstexpr_c%2B%2B23.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ceb5bc42d9d703bac5c98b94c639ef9438aaede/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbitset%2Fcons%2Fconstexpr_c%2B%2B23.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbitset%2Fcons%2Fconstexpr_c%2B%2B23.cc?ref=4ceb5bc42d9d703bac5c98b94c639ef9438aaede", "patch": "@@ -24,6 +24,7 @@ constexpr bool test_ntbs()\n \n static_assert( test_ntbs() );\n \n+#if _GLIBCXX_USE_CXX11_ABI\n constexpr bool test_string()\n {\n   using S = std::string;\n@@ -51,3 +52,4 @@ constexpr bool test_wstring()\n }\n \n static_assert( test_wstring() );\n+#endif"}, {"sha": "ed5604b6b2291e1b14f86a0d40ba024989330f83", "filename": "libstdc++-v3/testsuite/20_util/headers/bitset/synopsis.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ceb5bc42d9d703bac5c98b94c639ef9438aaede/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fbitset%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ceb5bc42d9d703bac5c98b94c639ef9438aaede/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fbitset%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fbitset%2Fsynopsis.cc?ref=4ceb5bc42d9d703bac5c98b94c639ef9438aaede", "patch": "@@ -27,17 +27,26 @@\n # define NOTHROW\n #endif\n \n+#if __cplusplus > 202002L\n+# define CONSTEXPR constexpr\n+#else\n+# define CONSTEXPR\n+#endif\n+\n namespace std {\n   template <size_t N> class bitset;\n \n   // 23.3.5.3 bitset operations:\n   template <size_t N>\n+    CONSTEXPR\n     bitset<N> operator&(const bitset<N>&, const bitset<N>&) NOTHROW;\n \n   template <size_t N>\n+    CONSTEXPR\n     bitset<N> operator|(const bitset<N>&, const bitset<N>&) NOTHROW;\n \n   template <size_t N>\n+    CONSTEXPR\n     bitset<N> operator^(const bitset<N>&, const bitset<N>&) NOTHROW;\n \n   template <class charT, class traits, size_t N>"}]}