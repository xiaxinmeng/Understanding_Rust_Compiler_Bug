{"sha": "e82407b5bb381e6940f8d4f1a4c218146acc1524", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgyNDA3YjViYjM4MWU2OTQwZjhkNGYxYTRjMjE4MTQ2YWNjMTUyNA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2003-12-01T07:15:31Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2003-12-01T07:15:31Z"}, "message": "re PR middle-end/7847 (pragma pack / attribute(packed): unaligned access to packed structure)\n\n\tPR middle-end/7847\n\t* expr.c (expand_expr) [normal_inner_ref]: When 'offset' is non-zero,\n\tdo not recheck that 'op0' is a MEM.  Move comment.  When testing for\n\tunaligned objects, take also into account the alignment of 'op0' and\n\t'mode1' if 'op0' is a MEM.\n\nFrom-SVN: r74092", "tree": {"sha": "43fd149070ddd68f998f0fbe7e3aa7ebea4728aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43fd149070ddd68f998f0fbe7e3aa7ebea4728aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e82407b5bb381e6940f8d4f1a4c218146acc1524", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e82407b5bb381e6940f8d4f1a4c218146acc1524", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e82407b5bb381e6940f8d4f1a4c218146acc1524", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e82407b5bb381e6940f8d4f1a4c218146acc1524/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a668c6adec09839b44d2ae6c1046a2e100e10936", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a668c6adec09839b44d2ae6c1046a2e100e10936", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a668c6adec09839b44d2ae6c1046a2e100e10936"}], "stats": {"total": 73, "additions": 68, "deletions": 5}, "files": [{"sha": "d109cebb45457560f8f28354b9546ac7d8a36e4d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e82407b5bb381e6940f8d4f1a4c218146acc1524/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e82407b5bb381e6940f8d4f1a4c218146acc1524/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e82407b5bb381e6940f8d4f1a4c218146acc1524", "patch": "@@ -1,3 +1,11 @@\n+2003-12-01  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR middle-end/7847\n+\t* expr.c (expand_expr) [normal_inner_ref]: When 'offset' is non-zero,\n+\tdo not recheck that 'op0' is a MEM.  Move comment.  When testing for\n+\tunaligned objects, take also into account the alignment of 'op0' and\n+\t'mode1' if 'op0' is a MEM.\n+\n 2003-12-01 Gabriel Dos Reis <gdr@integrable-solutions.net>\n \n \t* doc/c-tree.texi (Function Bodies): Update HANDLER documentation."}, {"sha": "c01378515f644e3dd7c35fe41901cb7915994852", "filename": "gcc/expr.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e82407b5bb381e6940f8d4f1a4c218146acc1524/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e82407b5bb381e6940f8d4f1a4c218146acc1524/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=e82407b5bb381e6940f8d4f1a4c218146acc1524", "patch": "@@ -7153,10 +7153,9 @@ expand_expr (tree exp, rtx target, enum machine_mode tmode,\n \t      offset_rtx = convert_to_mode (ptr_mode, offset_rtx, 0);\n #endif\n \n-\t    /* A constant address in OP0 can have VOIDmode, we must not try\n-\t       to call force_reg for that case.  Avoid that case.  */\n-\t    if (GET_CODE (op0) == MEM\n-\t\t&& GET_MODE (op0) == BLKmode\n+\t    if (GET_MODE (op0) == BLKmode\n+\t\t/* A constant address in OP0 can have VOIDmode, we must\n+\t\t   not try to call force_reg in that case.  */\n \t\t&& GET_MODE (XEXP (op0, 0)) != VOIDmode\n \t\t&& bitsize != 0\n \t\t&& (bitpos % bitsize) == 0\n@@ -7213,7 +7212,10 @@ expand_expr (tree exp, rtx target, enum machine_mode tmode,\n \t       fetch it as a bit field.  */\n \t    || (mode1 != BLKmode\n \t\t&& (((TYPE_ALIGN (TREE_TYPE (tem)) < GET_MODE_ALIGNMENT (mode)\n-\t\t      || (bitpos % GET_MODE_ALIGNMENT (mode) != 0))\n+\t\t      || (bitpos % GET_MODE_ALIGNMENT (mode) != 0)\n+\t\t      || (GET_CODE (op0) == MEM\n+\t\t\t  && (MEM_ALIGN (op0) < GET_MODE_ALIGNMENT (mode1)\n+\t\t\t      || (bitpos % GET_MODE_ALIGNMENT (mode1) != 0))))\n \t\t     && ((modifier == EXPAND_CONST_ADDRESS\n \t\t\t  || modifier == EXPAND_INITIALIZER)\n \t\t\t ? STRICT_ALIGNMENT"}, {"sha": "417272fdf708418d489392e9af793d65dd141db8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e82407b5bb381e6940f8d4f1a4c218146acc1524/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e82407b5bb381e6940f8d4f1a4c218146acc1524/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e82407b5bb381e6940f8d4f1a4c218146acc1524", "patch": "@@ -1,3 +1,7 @@\n+2003-12-01  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gcc.dg/unaligned-1.c: New test.\n+\n 2003-11-30  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/9849"}, {"sha": "5df1b37e3634293458753488f54add93d181555a", "filename": "gcc/testsuite/gcc.dg/unaligned-1.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e82407b5bb381e6940f8d4f1a4c218146acc1524/gcc%2Ftestsuite%2Fgcc.dg%2Funaligned-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e82407b5bb381e6940f8d4f1a4c218146acc1524/gcc%2Ftestsuite%2Fgcc.dg%2Funaligned-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funaligned-1.c?ref=e82407b5bb381e6940f8d4f1a4c218146acc1524", "patch": "@@ -0,0 +1,49 @@\n+/* PR middle-end/7847 */\n+/* Originator: <jk@tools.de> */\n+/* { dg-do run } */\n+\n+/* This used to fail on SPARC at runtime because of\n+   an unaligned memory access.  */\n+\n+typedef char int8_t;\n+typedef short int16_t;\n+typedef int int32_t;\n+typedef unsigned char uint8_t;\n+typedef unsigned short uint16_t;\n+typedef unsigned int uint32_t;\n+\n+typedef struct {\n+    uint32_t address;\n+    uint16_t size;\n+} __attribute__ ((packed)) sml_agl_data_t;\n+\n+typedef struct {\n+  sml_agl_data_t data[9];\n+} __attribute__ ((packed)) sml_agli_t;\n+\n+typedef struct {\n+  sml_agli_t sml_agli;\n+} __attribute__ ((packed)) dsi_t;\n+\n+typedef struct {\n+  int a;\n+  dsi_t dsi_pack;\n+} dvd_priv_t;\n+\n+int dvd_read_sector(dvd_priv_t *d, unsigned char* data)\n+{\n+  int i, skip=0;\n+\n+  for (i=0; i < 9; i++)\n+    if ((skip=d->dsi_pack.sml_agli.data[i].address) != 0)\n+      break;\n+\n+  return skip;\n+}\n+\n+int main(void)\n+{\n+  static dvd_priv_t dvd_priv;\n+  dvd_read_sector(&dvd_priv, 0);\n+  return 0;\n+}"}]}