{"sha": "9f54ba8f7dfb00d834893a746db141a409778ad9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY1NGJhOGY3ZGZiMDBkODM0ODkzYTc0NmRiMTQxYTQwOTc3OGFkOQ==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2019-03-06T10:45:51Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2019-03-06T10:45:51Z"}, "message": "[ARC] Fix logic set UNALIGNED_ACCESS\n\ngcc/\nxxxx-xx-xx  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc-c.def (__ARC_UNALIGNED__): Set it on\n\tunaligned_access variable.\n\t* config/arc/arc.c (arc_override_options): Set unaligned access\n\tdefault on for HS CPUs.\n\t* config/arc/arc.h (STRICT_ALIGNMENT): Fix logic.\n\nFrom-SVN: r269417", "tree": {"sha": "6014d029848146d70216ca5462aea848b1881345", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6014d029848146d70216ca5462aea848b1881345"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f54ba8f7dfb00d834893a746db141a409778ad9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f54ba8f7dfb00d834893a746db141a409778ad9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f54ba8f7dfb00d834893a746db141a409778ad9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f54ba8f7dfb00d834893a746db141a409778ad9/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3050b357660bf0425e0ac63c22960d2ec3af4572", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3050b357660bf0425e0ac63c22960d2ec3af4572", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3050b357660bf0425e0ac63c22960d2ec3af4572"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "3408e67b2c53488134bb2112826f5d5a9167baaf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f54ba8f7dfb00d834893a746db141a409778ad9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f54ba8f7dfb00d834893a746db141a409778ad9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f54ba8f7dfb00d834893a746db141a409778ad9", "patch": "@@ -1,3 +1,11 @@\n+2019-03-06  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc-c.def (__ARC_UNALIGNED__): Set it on\n+\tunaligned_access variable.\n+\t* config/arc/arc.c (arc_override_options): Set unaligned access\n+\tdefault on for HS CPUs.\n+\t* config/arc/arc.h (STRICT_ALIGNMENT): Fix logic.\n+\n 2019-03-06  Martin Liska  <mliska@suse.cz>\n \n \tPR gcov-profile/89577"}, {"sha": "9472b48aa7bc186638e3719a5a01924eb3cd92d6", "filename": "gcc/config/arc/arc-c.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f54ba8f7dfb00d834893a746db141a409778ad9/gcc%2Fconfig%2Farc%2Farc-c.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f54ba8f7dfb00d834893a746db141a409778ad9/gcc%2Fconfig%2Farc%2Farc-c.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-c.def?ref=9f54ba8f7dfb00d834893a746db141a409778ad9", "patch": "@@ -29,7 +29,7 @@ ARC_C_DEF (\"__ARC_MUL64__\",\tTARGET_MUL64_SET)\n ARC_C_DEF (\"__ARC_MUL32BY16__\", TARGET_MULMAC_32BY16_SET)\n ARC_C_DEF (\"__ARC_SIMD__\",\tTARGET_SIMD_SET)\n ARC_C_DEF (\"__ARC_RF16__\",\tTARGET_RF16)\n-ARC_C_DEF (\"__ARC_UNALIGNED__\", !STRICT_ALIGNMENT)\n+ARC_C_DEF (\"__ARC_UNALIGNED__\", unaligned_access)\n \n ARC_C_DEF (\"__ARC_BARREL_SHIFTER__\", TARGET_BARREL_SHIFTER)\n "}, {"sha": "3b8c29981b9a98ce0370093e1624a0a62027f2d5", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f54ba8f7dfb00d834893a746db141a409778ad9/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f54ba8f7dfb00d834893a746db141a409778ad9/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=9f54ba8f7dfb00d834893a746db141a409778ad9", "patch": "@@ -1313,6 +1313,10 @@ arc_override_options (void)\n   if (TARGET_LONG_CALLS_SET)\n     target_flags &= ~MASK_MILLICODE_THUNK_SET;\n \n+  /* Set unaligned to all HS cpus.  */\n+  if (!global_options_set.x_unaligned_access && TARGET_HS)\n+    unaligned_access = 1;\n+\n   /* These need to be done at start up.  It's convenient to do them here.  */\n   arc_init ();\n }"}, {"sha": "894eb39460006feb9c54fa1e1b99bc24163e3f91", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f54ba8f7dfb00d834893a746db141a409778ad9/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f54ba8f7dfb00d834893a746db141a409778ad9/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=9f54ba8f7dfb00d834893a746db141a409778ad9", "patch": "@@ -285,7 +285,7 @@ if (GET_MODE_CLASS (MODE) == MODE_INT\t\t\\\n /* On the ARC the lower address bits are masked to 0 as necessary.  The chip\n    won't croak when given an unaligned address, but the insn will still fail\n    to produce the correct result.  */\n-#define STRICT_ALIGNMENT (!unaligned_access && !TARGET_HS)\n+#define STRICT_ALIGNMENT (!unaligned_access)\n \n /* Layout of source language data types.  */\n "}]}