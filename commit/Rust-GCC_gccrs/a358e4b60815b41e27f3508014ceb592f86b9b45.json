{"sha": "a358e4b60815b41e27f3508014ceb592f86b9b45", "node_id": "C_kwDOANBUbNoAKGEzNThlNGI2MDgxNWI0MWUyN2YzNTA4MDE0Y2ViNTkyZjg2YjliNDU", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-04-14T13:52:00Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-04-14T22:42:34Z"}, "message": "analyzer: fix escaping of pointer arithmetic [PR105264]\n\nPR analyzer/105264 reports that the analyzer can fail to treat\n(PTR + IDX) and PTR[IDX] as referring to the same memory under\nsome situations.\n\nThere are various ways in which this can happen when IDX is a\nsymbolic value, due to having several ways in which such memory\nregions can be referred to symbolically.  I attempted to fix this by\nbeing smarter when folding svalues and regions, but this fix\nseems too fiddly to attempt in stage 4.\n\nInstead, this less ambitious patch fixes a false positive from\n-Wanalyzer-use-of-uninitialized-value by making the analyzer's escape\nanalysis smarter, so that it treats *PTR as escaping when\n(PTR + OFFSET) is passed to an external function, and thus\nit treats *PTR as possibly-initialized (the \"passing &PTR[IDX]\" case\nwas already working).\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/105264\n\t* region-model-reachability.cc (reachable_regions::handle_parm):\n\tUse maybe_get_deref_base_region rather than just region_svalue, to\n\thandle pointer arithmetic also.\n\t* svalue.cc (svalue::maybe_get_deref_base_region): New.\n\t* svalue.h (svalue::maybe_get_deref_base_region): New decl.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/105264\n\t* gcc.dg/analyzer/torture/symbolic-10.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "cd2325b0d8fb044595e2689284b3d83fc38b4d7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd2325b0d8fb044595e2689284b3d83fc38b4d7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a358e4b60815b41e27f3508014ceb592f86b9b45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a358e4b60815b41e27f3508014ceb592f86b9b45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a358e4b60815b41e27f3508014ceb592f86b9b45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a358e4b60815b41e27f3508014ceb592f86b9b45/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af27d545dc6132dcd67d1ee854372ea9cfd2a225", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af27d545dc6132dcd67d1ee854372ea9cfd2a225", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af27d545dc6132dcd67d1ee854372ea9cfd2a225"}], "stats": {"total": 92, "additions": 86, "deletions": 6}, "files": [{"sha": "12d09c3e500de2f3062a55384e2c3ea090fc72c8", "filename": "gcc/analyzer/region-model-reachability.cc", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a358e4b60815b41e27f3508014ceb592f86b9b45/gcc%2Fanalyzer%2Fregion-model-reachability.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a358e4b60815b41e27f3508014ceb592f86b9b45/gcc%2Fanalyzer%2Fregion-model-reachability.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-reachability.cc?ref=a358e4b60815b41e27f3508014ceb592f86b9b45", "patch": "@@ -252,12 +252,8 @@ reachable_regions::handle_parm (const svalue *sval, tree param_type)\n     m_mutable_svals.add (sval);\n   else\n     m_reachable_svals.add (sval);\n-  if (const region_svalue *parm_ptr\n-      = sval->dyn_cast_region_svalue ())\n-    {\n-      const region *pointee_reg = parm_ptr->get_pointee ();\n-      add (pointee_reg, is_mutable);\n-    }\n+  if (const region *base_reg = sval->maybe_get_deref_base_region ())\n+    add (base_reg, is_mutable);\n   /* Treat all svalues within a compound_svalue as reachable.  */\n   if (const compound_svalue *compound_sval\n       = sval->dyn_cast_compound_svalue ())"}, {"sha": "a1403f0fbefe320d687731833fe54d33bd36aadd", "filename": "gcc/analyzer/svalue.cc", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a358e4b60815b41e27f3508014ceb592f86b9b45/gcc%2Fanalyzer%2Fsvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a358e4b60815b41e27f3508014ceb592f86b9b45/gcc%2Fanalyzer%2Fsvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsvalue.cc?ref=a358e4b60815b41e27f3508014ceb592f86b9b45", "patch": "@@ -651,6 +651,48 @@ svalue::all_zeroes_p () const\n   return false;\n }\n \n+/* If this svalue is a pointer, attempt to determine the base region it points\n+   to.  Return NULL on any problems.  */\n+\n+const region *\n+svalue::maybe_get_deref_base_region () const\n+{\n+  const svalue *iter = this;\n+  while (1)\n+    {\n+      switch (iter->get_kind ())\n+\t{\n+\tdefault:\n+\t  return NULL;\n+\n+\tcase SK_REGION:\n+\t  {\n+\t    const region_svalue *region_sval\n+\t      = as_a <const region_svalue *> (iter);\n+\t    return region_sval->get_pointee ()->get_base_region ();\n+\t  }\n+\n+\tcase SK_BINOP:\n+\t  {\n+\t    const binop_svalue *binop_sval\n+\t      = as_a <const binop_svalue *> (iter);\n+\t    switch (binop_sval->get_op ())\n+\t      {\n+\t      case POINTER_PLUS_EXPR:\n+\t\t/* If we have a symbolic value expressing pointer arithmetic,\n+\t\t   use the LHS.  */\n+\t\titer = binop_sval->get_arg0 ();\n+\t\tcontinue;\n+\n+\t      default:\n+\t\treturn NULL;\n+\t      }\n+\t    return NULL;\n+\t  }\n+\t}\n+    }\n+}\n+\n /* class region_svalue : public svalue.  */\n \n /* Implementation of svalue::dump_to_pp vfunc for region_svalue.  */"}, {"sha": "29ea2ee64085f9991692d369fad2adca0c7ad1d7", "filename": "gcc/analyzer/svalue.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a358e4b60815b41e27f3508014ceb592f86b9b45/gcc%2Fanalyzer%2Fsvalue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a358e4b60815b41e27f3508014ceb592f86b9b45/gcc%2Fanalyzer%2Fsvalue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsvalue.h?ref=a358e4b60815b41e27f3508014ceb592f86b9b45", "patch": "@@ -175,6 +175,8 @@ class svalue\n      per-type and thus it's meaningless for them to \"have state\".  */\n   virtual bool can_have_associated_state_p () const { return true; }\n \n+  const region *maybe_get_deref_base_region () const;\n+\n  protected:\n   svalue (complexity c, tree type)\n   : m_complexity (c), m_type (type)"}, {"sha": "b2f3a8a1d86b727e559a1eda85061196a6c55d96", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/symbolic-10.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a358e4b60815b41e27f3508014ceb592f86b9b45/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fsymbolic-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a358e4b60815b41e27f3508014ceb592f86b9b45/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fsymbolic-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fsymbolic-10.c?ref=a358e4b60815b41e27f3508014ceb592f86b9b45", "patch": "@@ -0,0 +1,40 @@\n+/* Verify that -fanalyzer considers that mmfs escapes when passing either:\n+     *(mmfs + i)\n+   and\n+     (&mmfs[i])\n+   to an external function (for symbolic i).  */\n+\n+typedef struct s_mmfile {\n+  char *ptr;\n+  long size;\n+} mmfile_t;\n+\n+void init_mmfile(mmfile_t *ptr);\n+\n+long test__init_via_ptr_arith__read_via_array_idx(int i)\n+{\n+  mmfile_t mmfs[3];\n+  init_mmfile(mmfs + i);\n+  return mmfs[i].size; /* { dg-bogus \"uninit\" } */\n+}\n+\n+long test__init_via_array_idx__read_via_ptr_arith(int i)\n+{\n+  mmfile_t mmfs[3];\n+  init_mmfile(&mmfs[i]);\n+  return (mmfs + i)->size; /* { dg-bogus \"uninit\" } */\n+}\n+\n+long test__ptr_arith_for_both(int i)\n+{\n+  mmfile_t mmfs[3];\n+  init_mmfile(mmfs + i);\n+  return (mmfs + i)->size; /* { dg-bogus \"uninit\" } */\n+}\n+\n+long test__array_idx_for_both(int i)\n+{\n+  mmfile_t mmfs[3];\n+  init_mmfile(&mmfs[i]);\n+  return mmfs[i].size; /* { dg-bogus \"uninit\" } */\n+}"}]}