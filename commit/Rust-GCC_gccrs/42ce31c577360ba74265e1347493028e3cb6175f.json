{"sha": "42ce31c577360ba74265e1347493028e3cb6175f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJjZTMxYzU3NzM2MGJhNzQyNjVlMTM0NzQ5MzAyOGUzY2I2MTc1Zg==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2018-03-03T19:59:54Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2018-03-03T19:59:54Z"}, "message": "re PR fortran/66128 (ICE for some intrinsics with zero sized array parameter)\n\n2018-03-03  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/66128\n\t* gfortran.dg/zero_sized_8.f90: Really commit new test.\n\nFrom-SVN: r258224", "tree": {"sha": "584ed6d2fd4667464b03694fc9597c374a880412", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/584ed6d2fd4667464b03694fc9597c374a880412"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42ce31c577360ba74265e1347493028e3cb6175f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42ce31c577360ba74265e1347493028e3cb6175f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42ce31c577360ba74265e1347493028e3cb6175f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42ce31c577360ba74265e1347493028e3cb6175f/comments", "author": null, "committer": null, "parents": [{"sha": "94e6b5e5a65e83b71a1a3f736dd7e0e9f460af9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94e6b5e5a65e83b71a1a3f736dd7e0e9f460af9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94e6b5e5a65e83b71a1a3f736dd7e0e9f460af9c"}], "stats": {"total": 52, "additions": 51, "deletions": 1}, "files": [{"sha": "45b72e5037f656893c46153da5b9bd2f07088e68", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42ce31c577360ba74265e1347493028e3cb6175f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42ce31c577360ba74265e1347493028e3cb6175f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=42ce31c577360ba74265e1347493028e3cb6175f", "patch": "@@ -1,7 +1,7 @@\n 2018-03-03  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/66128\n-\t* gfortran.dg/zero_sized_8.f90: New test.\n+\t* gfortran.dg/zero_sized_8.f90: Really commit New test.\n \n 2018-03-03  Steven G. Kargl  <kargl@gcc.gnu.org>\n "}, {"sha": "6faea88968d6ef399df10f34d712a37a26b4980e", "filename": "gcc/testsuite/gfortran.dg/zero_sized_8.f90", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42ce31c577360ba74265e1347493028e3cb6175f/gcc%2Ftestsuite%2Fgfortran.dg%2Fzero_sized_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42ce31c577360ba74265e1347493028e3cb6175f/gcc%2Ftestsuite%2Fgfortran.dg%2Fzero_sized_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fzero_sized_8.f90?ref=42ce31c577360ba74265e1347493028e3cb6175f", "patch": "@@ -0,0 +1,50 @@\n+! { dg-do run }\n+program p\n+   complex, parameter :: a(0) = 0\n+   real, parameter :: x(0) = 0\n+   integer, parameter :: z(0) = 0\n+   if (any(z > 0) .neqv. .false.)         stop 1\n+   if (all(z > 0) .neqv. .true.)          stop 2\n+   if (count(z > 0) /= 0)                 stop 3\n+   if (kind(count(z > 0, kind=1)) /= 1)   stop 4\n+   if (iall(z) /= not(int(0, kind(z))))   stop 5\n+   if (iany(z) /= 0)                      stop 6\n+   if (iparity(z) /= 0)                   stop 7\n+   if (maxval(z) /= -huge(0) - 1)         stop 8\n+   if (maxval(x) /= -huge(x))             stop 9\n+   if (minval(z) /= huge(0))              stop 10\n+   if (minval(x) /= huge(x))              stop 11\n+   if (norm2(x) /= 0)                     stop 12\n+   if (real(product(a)) /= 1 .and. aimag(product(a)) /= 0) stop 13\n+   if (product(x) /= 1)                   stop 14\n+   if (product(z) /= 1)                   stop 15\n+   if (real(sum(a)) /= 0 .and. aimag(sum(a)) /= 0) stop 13\n+   if (sum(x) /= 0)                       stop 14\n+   if (sum(z) /= 0)                       stop 15\n+   call q\n+end\n+\n+subroutine q\n+   complex, parameter :: a(0) = 0\n+   real, parameter :: x(3,4,0) = 0\n+   integer, parameter :: z(3,4,0) = 0\n+   if (any(z > 0) .neqv. .false.)         stop 101\n+   if (all(z > 0) .neqv. .true.)          stop 102\n+   if (count(z > 0) /= 0)                 stop 103\n+   if (kind(count(z > 0, kind=1)) /= 1)   stop 104\n+   if (iall(z) /= not(int(0, kind(z))))   stop 105\n+   if (iany(z) /= 0)                      stop 106\n+   if (iparity(z) /= 0)                   stop 107\n+   if (maxval(z) /= -huge(0) - 1)         stop 108\n+   if (maxval(x) /= -huge(x))             stop 109\n+   if (minval(z) /= huge(0))              stop 110\n+   if (minval(x) /= huge(x))              stop 111\n+   if (norm2(x) /= 0)                     stop 112\n+   if (real(product(a)) /= 1 .and. aimag(product(a)) /= 0) stop 113\n+   if (product(x) /= 1)                   stop 114\n+   if (product(z) /= 1)                   stop 115\n+   if (real(sum(a)) /= 0 .and. aimag(sum(a)) /= 0) stop 13\n+   if (sum(x) /= 0)                   stop 14\n+   if (sum(z) /= 0)                   stop 15\n+end\n+! { dg-prune-output \"symmetric range implied by Standard\" }"}]}