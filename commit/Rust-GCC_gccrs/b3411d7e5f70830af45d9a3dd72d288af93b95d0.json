{"sha": "b3411d7e5f70830af45d9a3dd72d288af93b95d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM0MTFkN2U1ZjcwODMwYWY0NWQ5YTNkZDcyZDI4OGFmOTNiOTVkMA==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2003-03-20T23:02:54Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2003-03-20T23:02:54Z"}, "message": "2003-03-20  Daniel Berlin  <dberlin@dberlin.org>\n\tMerge changes from new-regalloc-branch\n\n\tFrom Michael Matz  <matz@suse.de>\n\t* df.c (df_ref_record_1): Move init of loc to safe point.\n\tOnly recurse on interesting things in parallels.\n\tHandle CLASS_CANNOT_CHANGE_MODE smarter.\n\t(df_uses_record): Ditto.\n\n\t* df.h (DF_REF_MEM_OK): New enum member, used to mark ref's which\n\tit's already okay to use memory operands in (IE doesn't require\n\tadding another insn or anything).\n\nFrom-SVN: r64629", "tree": {"sha": "dad7e79390d01f10787cd677e498cf80c07d1887", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dad7e79390d01f10787cd677e498cf80c07d1887"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3411d7e5f70830af45d9a3dd72d288af93b95d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3411d7e5f70830af45d9a3dd72d288af93b95d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3411d7e5f70830af45d9a3dd72d288af93b95d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3411d7e5f70830af45d9a3dd72d288af93b95d0/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "05d482b95f2382ff2b4eb2450f0b447aa09662cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05d482b95f2382ff2b4eb2450f0b447aa09662cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05d482b95f2382ff2b4eb2450f0b447aa09662cd"}], "stats": {"total": 54, "additions": 48, "deletions": 6}, "files": [{"sha": "5584548360c2e31a17bdf8714ba7bc39381a96f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3411d7e5f70830af45d9a3dd72d288af93b95d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3411d7e5f70830af45d9a3dd72d288af93b95d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b3411d7e5f70830af45d9a3dd72d288af93b95d0", "patch": "@@ -1,3 +1,16 @@\n+2003-03-20  Daniel Berlin  <dberlin@dberlin.org>\n+\tMerge changes from new-regalloc-branch \n+\n+\tFrom Michael Matz  <matz@suse.de>\n+\t* df.c (df_ref_record_1): Move init of loc to safe point.\n+\tOnly recurse on interesting things in parallels.\n+\tHandle CLASS_CANNOT_CHANGE_MODE smarter.\n+\t(df_uses_record): Ditto.\n+\t\n+\t* df.h (DF_REF_MEM_OK): New enum member, used to mark ref's which\n+\tit's already okay to use memory operands in (IE doesn't require\n+\tadding another insn or anything).\n+\n 2003-03-20  Richard Henderson  <rth@redhat.com>\n \n \tPR middle-end/6348"}, {"sha": "23a7ce02f7f9098ab816729caf3658c930f70f8e", "filename": "gcc/df.c", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3411d7e5f70830af45d9a3dd72d288af93b95d0/gcc%2Fdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3411d7e5f70830af45d9a3dd72d288af93b95d0/gcc%2Fdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.c?ref=b3411d7e5f70830af45d9a3dd72d288af93b95d0", "patch": "@@ -906,23 +906,38 @@ df_def_record_1 (df, x, bb, insn)\n      basic_block bb;\n      rtx insn;\n {\n-  rtx *loc = &SET_DEST (x);\n-  rtx dst = *loc;\n+  rtx *loc;\n+  rtx dst;\n   enum df_ref_flags flags = 0;\n \n+ /* We may recursivly call ourselves on EXPR_LIST when dealing with PARALLEL\n+     construct.  */  \n+  if (GET_CODE (x) == EXPR_LIST || GET_CODE (x) == CLOBBER)\n+    loc = &XEXP (x, 0);\n+  else\n+    loc = &SET_DEST (x);\n+  dst = *loc;\n+\n   /* Some targets place small structures in registers for\n      return values of functions.  */\n   if (GET_CODE (dst) == PARALLEL && GET_MODE (dst) == BLKmode)\n     {\n       int i;\n \n       for (i = XVECLEN (dst, 0) - 1; i >= 0; i--)\n-\tdf_def_record_1 (df, XVECEXP (dst, 0, i), bb, insn);\n+\t{\n+\t  rtx temp = XVECEXP (dst, 0, i);\n+\t  if (GET_CODE (temp) == EXPR_LIST || GET_CODE (temp) == CLOBBER\n+\t      || GET_CODE (temp) == SET)\n+\t    df_def_record_1 (df, temp, bb, insn);\n+\t}\n       return;\n     }\n \n #ifdef CLASS_CANNOT_CHANGE_MODE\n-  if (GET_CODE (dst) == SUBREG)\n+  if (GET_CODE (dst) == SUBREG\n+      && CLASS_CANNOT_CHANGE_MODE_P (GET_MODE (dst),\n+\t\t\t\t     GET_MODE (SUBREG_REG (dst))))\n     flags |= DF_REF_MODE_CHANGE;\n #endif\n \n@@ -942,7 +957,9 @@ df_def_record_1 (df, x, bb, insn)\n \t  dst = *loc;\n \t}\n #ifdef CLASS_CANNOT_CHANGE_MODE\n-      if (GET_CODE (dst) == SUBREG)\n+      if (GET_CODE (dst) == SUBREG\n+\t  && CLASS_CANNOT_CHANGE_MODE_P (GET_MODE (dst),\n+\t\t\t\t         GET_MODE (SUBREG_REG (dst))))\n         flags |= DF_REF_MODE_CHANGE;\n #endif\n       loc = &XEXP (dst, 0);\n@@ -1042,6 +1059,8 @@ df_uses_record (df, loc, ref_type, bb, insn, flags)\n \t  return;\n \t}\n #ifdef CLASS_CANNOT_CHANGE_MODE\n+      if (CLASS_CANNOT_CHANGE_MODE_P (GET_MODE (x),\n+\t\t\t\t      GET_MODE (SUBREG_REG (x))))\n       flags |= DF_REF_MODE_CHANGE;\n #endif\n \n@@ -1067,6 +1086,8 @@ df_uses_record (df, loc, ref_type, bb, insn, flags)\n \t\t{\n \t\t  use_flags = DF_REF_READ_WRITE;\n #ifdef CLASS_CANNOT_CHANGE_MODE\n+\t\t  if (CLASS_CANNOT_CHANGE_MODE_P (GET_MODE (dst),\n+\t\t\t\t\t\t  GET_MODE (SUBREG_REG (dst))))\n \t\t  use_flags |= DF_REF_MODE_CHANGE;\n #endif\n \t\t  df_uses_record (df, &SUBREG_REG (dst), DF_REF_REG_USE, bb,\n@@ -1091,6 +1112,8 @@ df_uses_record (df, loc, ref_type, bb, insn, flags)\n \t\tabort ();\n \t      use_flags = DF_REF_READ_WRITE;\n #ifdef CLASS_CANNOT_CHANGE_MODE\n+\t      if (CLASS_CANNOT_CHANGE_MODE_P (GET_MODE (dst),\n+\t\t\t\t\t      GET_MODE (SUBREG_REG (dst))))\n \t      use_flags |= DF_REF_MODE_CHANGE;\n #endif\n \t      df_uses_record (df, &SUBREG_REG (dst), DF_REF_REG_USE, bb,\n@@ -2142,6 +2165,7 @@ df_analyse_1 (df, blocks, flags, update)\n     {\n       df_reg_info_compute (df, df->all_blocks);\n     }\n+  \n   free (df->dfs_order);\n   free (df->rc_order);\n   free (df->rts_order);"}, {"sha": "fa8aab4557cbf36a1af61e9f9cbf0967075f4298", "filename": "gcc/df.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3411d7e5f70830af45d9a3dd72d288af93b95d0/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3411d7e5f70830af45d9a3dd72d288af93b95d0/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=b3411d7e5f70830af45d9a3dd72d288af93b95d0", "patch": "@@ -63,7 +63,12 @@ enum df_ref_flags\n     /* This flag is set, if we stripped the subreg from the reference.\n        In this case we must make conservative guesses, at what the\n        outer mode was.  */\n-    DF_REF_STRIPPED = 4\n+    DF_REF_STRIPPED = 4,\n+\n+    /* This flag is set during register allocation if it's okay for\n+    the reference's INSN to have one of its operands replaced with a\n+    memory reference.  */\n+    DF_REF_MEM_OK = 8\n   };\n \n "}]}