{"sha": "f0a8f6bcb0c491db71fb791e2f5999595a44116e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBhOGY2YmNiMGM0OTFkYjcxZmI3OTFlMmY1OTk5NTk1YTQ0MTE2ZQ==", "commit": {"author": {"name": "Steve Ellcey", "email": "sellcey@marvell.com", "date": "2019-04-11T18:02:41Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2019-04-11T18:02:41Z"}, "message": "re PR rtl-optimization/87763 (aarch64 target testcases fail after r265398)\n\n2018-04-11  Steve Ellcey  <sellcey@marvell.com>\n\n\tPR rtl-optimization/87763\n\t* config/aarch64/aarch64.md (*aarch64_bfi<GPI:mode>4_noshift_alt):\n\tNew Instruction.\n\nFrom-SVN: r270288", "tree": {"sha": "484f83287e54e3cf5248f9216e39fadb2a35201f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/484f83287e54e3cf5248f9216e39fadb2a35201f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0a8f6bcb0c491db71fb791e2f5999595a44116e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0a8f6bcb0c491db71fb791e2f5999595a44116e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0a8f6bcb0c491db71fb791e2f5999595a44116e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0a8f6bcb0c491db71fb791e2f5999595a44116e/comments", "author": null, "committer": null, "parents": [{"sha": "cd7ffd8a9382c78725f3c09b317bdb4739d3654b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd7ffd8a9382c78725f3c09b317bdb4739d3654b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd7ffd8a9382c78725f3c09b317bdb4739d3654b"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "970bdf8a4f54f2ead60ace479d97afd1c2b4b8b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a8f6bcb0c491db71fb791e2f5999595a44116e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a8f6bcb0c491db71fb791e2f5999595a44116e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f0a8f6bcb0c491db71fb791e2f5999595a44116e", "patch": "@@ -1,3 +1,9 @@\n+2018-04-11  Steve Ellcey  <sellcey@marvell.com>\n+\n+\tPR rtl-optimization/87763\n+\t* config/aarch64/aarch64.md (*aarch64_bfi<GPI:mode>4_noshift_alt):\n+\tNew Instruction.\n+\n 2019-04-11  Tom de Vries  <tdevries@suse.de>\n \n \t* doc/extend.texi (@node Statement Exprs): Note variable shadowing at"}, {"sha": "5a1894063a1ed2db1cc947c9c449d48808ed96ae", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a8f6bcb0c491db71fb791e2f5999595a44116e/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a8f6bcb0c491db71fb791e2f5999595a44116e/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=f0a8f6bcb0c491db71fb791e2f5999595a44116e", "patch": "@@ -5565,7 +5565,8 @@\n )\n \n ;; Like *aarch64_bfi<GPI:mode>5_shift but with no shifting, we are just\n-;; copying the least significant bits of OP3 to OP0.\n+;; copying the least significant bits of OP3 to OP0.  We need two versions\n+;; of the instruction to handle different checks on the constant values.\n \n (define_insn \"*aarch64_bfi<GPI:mode>4_noshift\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n@@ -5579,6 +5580,18 @@\n   [(set_attr \"type\" \"bfm\")]\n )\n \n+(define_insn \"*aarch64_bfi<GPI:mode>4_noshift_alt\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+        (ior:GPI (and:GPI (match_operand:GPI 3 \"register_operand\" \"r\")\n+                          (match_operand:GPI 4 \"const_int_operand\" \"n\"))\n+                 (and:GPI (match_operand:GPI 1 \"register_operand\" \"0\")\n+                          (match_operand:GPI 2 \"const_int_operand\" \"n\"))))]\n+  \"aarch64_masks_and_shift_for_bfi_p (<MODE>mode, UINTVAL (operands[2]), 0,\n+\t\t\t\t      UINTVAL (operands[4]))\"\n+  \"bfi\\t%<GPI:w>0, %<GPI:w>3, 0, %P4\"\n+  [(set_attr \"type\" \"bfm\")]\n+)\n+\n (define_insn \"*extr_insv_lower_reg<mode>\"\n   [(set (zero_extract:GPI (match_operand:GPI 0 \"register_operand\" \"+r\")\n \t\t\t  (match_operand 1 \"const_int_operand\" \"n\")"}]}