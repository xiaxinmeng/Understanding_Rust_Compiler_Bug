{"sha": "fb263f821cdab4e9237c4a321f959ac9e3704686", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIyNjNmODIxY2RhYjRlOTIzN2M0YTMyMWY5NTlhYzllMzcwNDY4Ng==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2007-07-08T22:20:04Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2007-07-08T22:20:04Z"}, "message": "re PR fortran/32217 (segfaults (at runtime) on UNPACK with zero-sized arrays)\n\n2007-07-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR libfortran/32217\n\t* intrinsics/unpack_generic.c:  If the destination array is\n\tempty, return early.\n\n2007-07-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR libfortran/32217\n\t* gfortran.dg/unpack_zerosize_1.f90:  New test case.\n\nFrom-SVN: r126469", "tree": {"sha": "7c64d364be9be5b9dbf562d41d56660dc24c195d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c64d364be9be5b9dbf562d41d56660dc24c195d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb263f821cdab4e9237c4a321f959ac9e3704686", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb263f821cdab4e9237c4a321f959ac9e3704686", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb263f821cdab4e9237c4a321f959ac9e3704686", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb263f821cdab4e9237c4a321f959ac9e3704686/comments", "author": null, "committer": null, "parents": [{"sha": "3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bed9dd0236405001fc0aeccf7fa37b1ff4ecc9f"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "4f24f50eb4848a240badc02037c41ea2a0ec5717", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb263f821cdab4e9237c4a321f959ac9e3704686/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb263f821cdab4e9237c4a321f959ac9e3704686/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fb263f821cdab4e9237c4a321f959ac9e3704686", "patch": "@@ -1,3 +1,8 @@\n+2007-07-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR libfortran/32217\n+\t* gfortran.dg/unpack_zerosize_1.f90:  New test case.\n+\n 2007-07-08  Daniel Franke  <franke.daniel@gmail.com>\n \n \tPR fortran/17711"}, {"sha": "8a41f5d9de1aa1265daea309a02de579d8c179cb", "filename": "gcc/testsuite/gfortran.dg/unpack_zerosize_1.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb263f821cdab4e9237c4a321f959ac9e3704686/gcc%2Ftestsuite%2Fgfortran.dg%2Funpack_zerosize_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb263f821cdab4e9237c4a321f959ac9e3704686/gcc%2Ftestsuite%2Fgfortran.dg%2Funpack_zerosize_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Funpack_zerosize_1.f90?ref=fb263f821cdab4e9237c4a321f959ac9e3704686", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do run }\n+! PR 32217 - unpack used to crash at runtime with a zero-sized\n+!            array.  Test case submitted by Jaroslav Hajek.\n+program bug_report\n+  implicit none\n+  integer,parameter:: rp = kind(1.d0),na = 6\n+  real(rp),allocatable:: hhe(:,:,:),hhc(:,:,:),dv(:)\n+  integer:: nhh,ndv\n+  nhh = 0\n+  allocate(hhe(nhh,2,2))\n+  ndv = 2*na + count(hhe /= 0)\n+  allocate(hhc(nhh,2,2),dv(ndv))\n+  hhc = unpack(dv(2*na+1:),hhe /= 0._rp,0._rp)\n+end program bug_report"}, {"sha": "0b9239d1e0a57028b9b853ae0f35eb24649f3a00", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb263f821cdab4e9237c4a321f959ac9e3704686/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb263f821cdab4e9237c4a321f959ac9e3704686/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=fb263f821cdab4e9237c4a321f959ac9e3704686", "patch": "@@ -1,3 +1,9 @@\n+2007-07-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR libfortran/32217\n+\t* intrinsics/unpack_generic.c:  If the destination array is\n+\tempty, return early.\n+\n 2007-07-05  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* aclocal.m4: Regenerated."}, {"sha": "b349f0d60fd0efcb4ce071b2a0f57cc4528a640f", "filename": "libgfortran/intrinsics/unpack_generic.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb263f821cdab4e9237c4a321f959ac9e3704686/libgfortran%2Fintrinsics%2Funpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb263f821cdab4e9237c4a321f959ac9e3704686/libgfortran%2Fintrinsics%2Funpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Funpack_generic.c?ref=fb263f821cdab4e9237c4a321f959ac9e3704686", "patch": "@@ -61,6 +61,9 @@ unpack_internal (gfc_array_char *ret, const gfc_array_char *vector,\n   index_type n;\n   index_type dim;\n \n+  int empty;\n+\n+  empty = 0;\n   if (ret->data == NULL)\n     {\n       /* The front end has signalled that we need to populate the\n@@ -74,6 +77,7 @@ unpack_internal (gfc_array_char *ret, const gfc_array_char *vector,\n \t  ret->dim[n].lbound = 0;\n \t  ret->dim[n].ubound = mask->dim[n].ubound - mask->dim[n].lbound;\n \t  extent[n] = ret->dim[n].ubound + 1;\n+\t  empty = empty || extent[n] <= 0;\n \t  rstride[n] = ret->dim[n].stride * size;\n \t  fstride[n] = field->dim[n].stride * fsize;\n \t  mstride[n] = mask->dim[n].stride;\n@@ -89,13 +93,18 @@ unpack_internal (gfc_array_char *ret, const gfc_array_char *vector,\n \t{\n \t  count[n] = 0;\n \t  extent[n] = ret->dim[n].ubound + 1 - ret->dim[n].lbound;\n+\t  empty = empty || extent[n] <= 0;\n \t  rstride[n] = ret->dim[n].stride * size;\n \t  fstride[n] = field->dim[n].stride * fsize;\n \t  mstride[n] = mask->dim[n].stride;\n \t}\n       if (rstride[0] == 0)\n \trstride[0] = size;\n     }\n+\n+  if (empty)\n+    return;\n+\n   if (fstride[0] == 0)\n     fstride[0] = fsize;\n   if (mstride[0] == 0)"}]}