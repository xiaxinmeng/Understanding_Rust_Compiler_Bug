{"sha": "48f657953fe5f90218003c93feafdb3158e6d3d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhmNjU3OTUzZmU1ZjkwMjE4MDAzYzkzZmVhZmRiMzE1OGU2ZDNkMg==", "commit": {"author": {"name": "Jiufu Guo", "email": "guojiufu@linux.ibm.com", "date": "2019-11-11T06:30:38Z"}, "committer": {"name": "Jiufu Guo", "email": "guojiufu@gcc.gnu.org", "date": "2019-11-11T06:30:38Z"}, "message": "rs6000: Refine small loop unroll in loop_unroll_adjust hook\n\nIn this patch, loop unroll adjust hook is introduced for powerpc.  We\ncan do target related heuristic adjustment in this hook.  In this patch,\n-funroll-loops is enabled for small loops at O2 and above with an option\n-munroll-small-loops to guard the small loops unrolling, and it works\nfine with -flto.\n\n\ngcc/\n2019-11-11  Jiufu Guo  <guojiufu@linux.ibm.com>\n\n\tPR tree-optimization/88760\n\t* gcc/config/rs6000/rs6000.opt (-munroll-only-small-loops): New option.\n\t* gcc/common/config/rs6000/rs6000-common.c\n\t(rs6000_option_optimization_table) [OPT_LEVELS_2_PLUS_SPEED_ONLY]:\n\tTurn on -funroll-loops and -munroll-only-small-loops.\n\t[OPT_LEVELS_ALL]: Turn off -fweb and -frename-registers.\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Remove\n\tset of PARAM_MAX_UNROLL_TIMES and PARAM_MAX_UNROLLED_INSNS.\n\tTurn off -munroll-only-small-loops for explicit -funroll-loops.\n\t(TARGET_LOOP_UNROLL_ADJUST): Add loop unroll adjust hook.\n\t(rs6000_loop_unroll_adjust): Define it.  Use -munroll-only-small-loops.\n\ngcc.testsuite/\n2019-11-11  Jiufu Guo  <guojiufu@linux.ibm.com>\n\n\tPR tree-optimization/88760\n\t* gcc.dg/pr59643.c: Update back to r277550.\n\nFrom-SVN: r278034", "tree": {"sha": "9723a1ee3ec29985e19ff7b9bd0b48b9bfb5892e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9723a1ee3ec29985e19ff7b9bd0b48b9bfb5892e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48f657953fe5f90218003c93feafdb3158e6d3d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48f657953fe5f90218003c93feafdb3158e6d3d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48f657953fe5f90218003c93feafdb3158e6d3d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48f657953fe5f90218003c93feafdb3158e6d3d2/comments", "author": null, "committer": null, "parents": [{"sha": "103cba80bd84f0f3c7e644783e1fb7154d07f522", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/103cba80bd84f0f3c7e644783e1fb7154d07f522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/103cba80bd84f0f3c7e644783e1fb7154d07f522"}], "stats": {"total": 82, "additions": 59, "deletions": 23}, "files": [{"sha": "96efa4224bd741c53fe4fd446f662abeb14fafa6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48f657953fe5f90218003c93feafdb3158e6d3d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48f657953fe5f90218003c93feafdb3158e6d3d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48f657953fe5f90218003c93feafdb3158e6d3d2", "patch": "@@ -1,3 +1,17 @@\n+2019-11-11  Jiufu Guo  <guojiufu@linux.ibm.com>\n+\n+\tPR tree-optimization/88760\n+\t* gcc/config/rs6000/rs6000.opt (-munroll-only-small-loops): New option.\n+\t* gcc/common/config/rs6000/rs6000-common.c\n+\t(rs6000_option_optimization_table) [OPT_LEVELS_2_PLUS_SPEED_ONLY]:\n+\tTurn on -funroll-loops and -munroll-only-small-loops.\n+\t[OPT_LEVELS_ALL]: Turn off -fweb and -frename-registers.\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Remove\n+\tset of PARAM_MAX_UNROLL_TIMES and PARAM_MAX_UNROLLED_INSNS.\n+\tTurn off -munroll-only-small-loops for explicit -funroll-loops.\n+\t(TARGET_LOOP_UNROLL_ADJUST): Add loop unroll adjust hook.\n+\t(rs6000_loop_unroll_adjust): Define it.  Use -munroll-only-small-loops.\n+\n 2019-11-11  Kewen Lin  <linkw@gcc.gnu.org>\n \n \t* config/rs6000/rs6000.c (rs6000_builtin_vectorization_cost):"}, {"sha": "9dc7ae87f434fdfad5190bb423801420e3fa6b7f", "filename": "gcc/common/config/rs6000/rs6000-common.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48f657953fe5f90218003c93feafdb3158e6d3d2/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48f657953fe5f90218003c93feafdb3158e6d3d2/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c?ref=48f657953fe5f90218003c93feafdb3158e6d3d2", "patch": "@@ -35,7 +35,14 @@ static const struct default_options rs6000_option_optimization_table[] =\n     { OPT_LEVELS_ALL, OPT_fsplit_wide_types_early, NULL, 1 },\n     /* Enable -fsched-pressure for first pass instruction scheduling.  */\n     { OPT_LEVELS_1_PLUS, OPT_fsched_pressure, NULL, 1 },\n-    { OPT_LEVELS_2_PLUS, OPT_funroll_loops, NULL, 1 },\n+    /* Enable -munroll-only-small-loops with -funroll-loops to unroll small\n+       loops at -O2 and above by default.  */\n+    { OPT_LEVELS_2_PLUS_SPEED_ONLY, OPT_funroll_loops, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS_SPEED_ONLY, OPT_munroll_only_small_loops, NULL, 1 },\n+    /* -fweb and -frename-registers are useless in general for rs6000,\n+       turn them off.  */\n+    { OPT_LEVELS_ALL, OPT_fweb, NULL, 0 },\n+    { OPT_LEVELS_ALL, OPT_frename_registers, NULL, 0 },\n     { OPT_LEVELS_NONE, 0, NULL, 0 }\n   };\n "}, {"sha": "5f776f87e4948fe9e366a880c5cfeeb3382c23a0", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48f657953fe5f90218003c93feafdb3158e6d3d2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48f657953fe5f90218003c93feafdb3158e6d3d2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=48f657953fe5f90218003c93feafdb3158e6d3d2", "patch": "@@ -1428,6 +1428,9 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #undef TARGET_VECTORIZE_DESTROY_COST_DATA\n #define TARGET_VECTORIZE_DESTROY_COST_DATA rs6000_destroy_cost_data\n \n+#undef TARGET_LOOP_UNROLL_ADJUST\n+#define TARGET_LOOP_UNROLL_ADJUST rs6000_loop_unroll_adjust\n+\n #undef TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS rs6000_init_builtins\n #undef TARGET_BUILTIN_DECL\n@@ -4540,25 +4543,12 @@ rs6000_option_override_internal (bool global_init_p)\n \t\t\t     global_options.x_param_values,\n \t\t\t     global_options_set.x_param_values);\n \n-      /* unroll very small loops 2 time if no -funroll-loops.  */\n-      if (!global_options_set.x_flag_unroll_loops\n-\t  && !global_options_set.x_flag_unroll_all_loops)\n-\t{\n-\t  maybe_set_param_value (PARAM_MAX_UNROLL_TIMES, 2,\n-\t\t\t\t global_options.x_param_values,\n-\t\t\t\t global_options_set.x_param_values);\n-\n-\t  maybe_set_param_value (PARAM_MAX_UNROLLED_INSNS, 20,\n-\t\t\t\t global_options.x_param_values,\n-\t\t\t\t global_options_set.x_param_values);\n-\n-\t  /* If fweb or frename-registers are not specificed in command-line,\n-\t     do not turn them on implicitly.  */\n-\t  if (!global_options_set.x_flag_web)\n-\t    global_options.x_flag_web = 0;\n-\t  if (!global_options_set.x_flag_rename_registers)\n-\t    global_options.x_flag_rename_registers = 0;\n-\t}\n+      /* Explicit -funroll-loops turns -munroll-only-small-loops off.  */\n+      if (((global_options_set.x_flag_unroll_loops && flag_unroll_loops)\n+\t   || (global_options_set.x_flag_unroll_all_loops\n+\t       && flag_unroll_all_loops))\n+\t  && !global_options_set.x_unroll_only_small_loops)\n+\tunroll_only_small_loops = 0;\n \n       /* If using typedef char *va_list, signal that\n \t __builtin_va_start (&ap, 0) can be optimized to\n@@ -5105,6 +5095,25 @@ rs6000_destroy_cost_data (void *data)\n   free (data);\n }\n \n+/* Implement targetm.loop_unroll_adjust.  */\n+\n+static unsigned\n+rs6000_loop_unroll_adjust (unsigned nunroll, struct loop *loop)\n+{\n+   if (unroll_only_small_loops)\n+    {\n+      /* TODO: This is hardcoded to 10 right now.  It can be refined, for\n+\t example we may want to unroll very small loops more times (4 perhaps).\n+\t We also should use a PARAM for this.  */\n+      if (loop->ninsns <= 10)\n+\treturn MIN (2, nunroll);\n+      else\n+\treturn 0;\n+    }\n+\n+  return nunroll;\n+}\n+\n /* Handler for the Mathematical Acceleration Subsystem (mass) interface to a\n    library with vectorized intrinsics.  */\n "}, {"sha": "387d3cfd37714532eadd1abb747d008df300622a", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48f657953fe5f90218003c93feafdb3158e6d3d2/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48f657953fe5f90218003c93feafdb3158e6d3d2/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=48f657953fe5f90218003c93feafdb3158e6d3d2", "patch": "@@ -501,6 +501,10 @@ moptimize-swaps\n Target Undocumented Var(rs6000_optimize_swaps) Init(1) Save\n Analyze and remove doubleword swaps from VSX computations.\n \n+munroll-only-small-loops\n+Target Undocumented Var(unroll_only_small_loops) Init(0) Save\n+; Use conservative small loop unrolling.\n+\n mpower9-misc\n Target Undocumented Report Mask(P9_MISC) Var(rs6000_isa_flags)\n Use certain scalar instructions added in ISA 3.0."}, {"sha": "cc60856a6a6377c1b861786da7129ba4569edbee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48f657953fe5f90218003c93feafdb3158e6d3d2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48f657953fe5f90218003c93feafdb3158e6d3d2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=48f657953fe5f90218003c93feafdb3158e6d3d2", "patch": "@@ -1,3 +1,8 @@\n+2019-11-11  Jiufu Guo  <guojiufu@linux.ibm.com>\n+\n+\tPR tree-optimization/88760\n+\t* gcc.dg/pr59643.c: Update back to r277550.\n+\n 2019-11-10  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/92123"}, {"sha": "de78d604bb200d27844963106043990bb9b65e9b", "filename": "gcc/testsuite/gcc.dg/pr59643.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48f657953fe5f90218003c93feafdb3158e6d3d2/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59643.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48f657953fe5f90218003c93feafdb3158e6d3d2/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59643.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59643.c?ref=48f657953fe5f90218003c93feafdb3158e6d3d2", "patch": "@@ -1,9 +1,6 @@\n /* PR tree-optimization/59643 */\n /* { dg-do compile } */\n /* { dg-options \"-O3 -fdump-tree-pcom-details\" } */\n-/* { dg-additional-options \"--param max-unrolled-insns=400\" { target { powerpc*-*-* } } } */\n-/* Implicit threashold of max-unrolled-insn on ppc at O3 is too small for the\n-   loop of this case.  */\n \n void\n foo (double *a, double *b, double *c, double d, double e, int n)"}]}