{"sha": "3ea64aad06a2b32739028bae03b9b9a5691d2d30", "node_id": "C_kwDOANBUbNoAKDNlYTY0YWFkMDZhMmIzMjczOTAyOGJhZTAzYjliOWE1NjkxZDJkMzA", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-03-10T19:55:27Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-03-15T12:44:42Z"}, "message": "c++: passing one ttp to another [PR108179]\n\nI kept trying to improve our choice of how many levels of outer_args to add,\nwhen really the problem was that outer_args are for PARM and for this\nreverse deduction we should be adding the outer arguments for ARG.\n\nI spent quite a while trying to get DECL_CONTEXT set consistently on\ntemplate template parameters that have gone through\nreduce_template_parm_level before I realized I could just use\ncurrent_scope().\n\n\tPR c++/108179\n\tPR c++/104107\n\tPR c++/95036\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (coerce_template_template_parms): Use args from\n\tDECL_CONTEXT (arg_tmpl) instead of outer_args.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/template/ttp35.C: New test.", "tree": {"sha": "d8b6869075ae97c994c340195dafd0b146ce550f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8b6869075ae97c994c340195dafd0b146ce550f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ea64aad06a2b32739028bae03b9b9a5691d2d30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ea64aad06a2b32739028bae03b9b9a5691d2d30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ea64aad06a2b32739028bae03b9b9a5691d2d30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ea64aad06a2b32739028bae03b9b9a5691d2d30/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ccbf162511b896672a72934c3cafd37a42d6438", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ccbf162511b896672a72934c3cafd37a42d6438", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ccbf162511b896672a72934c3cafd37a42d6438"}], "stats": {"total": 41, "additions": 25, "deletions": 16}, "files": [{"sha": "ddbd73371b997a6d9b9be78a5a5fb57488d71949", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ea64aad06a2b32739028bae03b9b9a5691d2d30/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ea64aad06a2b32739028bae03b9b9a5691d2d30/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=3ea64aad06a2b32739028bae03b9b9a5691d2d30", "patch": "@@ -8110,22 +8110,24 @@ coerce_template_template_parms (tree parm_tmpl,\n \n       tree pargs = template_parms_level_to_args (parm_parms);\n \n-      /* PARM, and thus the context in which we are passing ARG to it, may be\n-\t at a deeper level than ARG; when trying to coerce to ARG_PARMS, we\n-\t want to provide the right number of levels, so we reduce the number of\n-\t levels in OUTER_ARGS before prepending them.  This is most important\n-\t when ARG is a namespace-scope template, as in alias-decl-ttp2.C.\n-\n-\t ARG might also be deeper than PARM (ttp23).  In that case, we include\n-\t all of OUTER_ARGS.  The missing levels seem potentially problematic,\n-\t but I can't come up with a testcase that breaks.  */\n-      if (int arg_outer_levs = TMPL_PARMS_DEPTH (arg_parms_full) - 1)\n-\t{\n-\t  auto x = make_temp_override (TREE_VEC_LENGTH (outer_args));\n-\t  if (TMPL_ARGS_DEPTH (outer_args) > arg_outer_levs)\n-\t    TREE_VEC_LENGTH (outer_args) = arg_outer_levs;\n-\t  pargs = add_to_template_args (outer_args, pargs);\n-\t}\n+      /* PARM and ARG might be at different template depths, and we want to\n+\t pass the right additional levels of args when coercing PARGS to\n+\t ARG_PARMS in case we need to do any substitution into non-type\n+\t template parameter types.\n+\n+\t OUTER_ARGS are not the right outer levels in this case, as they are\n+\t the args we're building up for PARM, and for the coercion we want the\n+\t args for ARG.  If DECL_CONTEXT isn't set for a template template\n+\t parameter, we can assume that it's in the current scope.  In that case\n+\t we might end up adding more levels than needed, but that shouldn't be\n+\t a problem; any args we need to refer to are at the right level.  */\n+      tree ctx = DECL_CONTEXT (arg_tmpl);\n+      if (!ctx && DECL_TEMPLATE_TEMPLATE_PARM_P (arg_tmpl))\n+\tctx = current_scope ();\n+      tree scope_args = NULL_TREE;\n+      if (tree tinfo = get_template_info (ctx))\n+\tscope_args = TI_ARGS (tinfo);\n+      pargs = add_to_template_args (scope_args, pargs);\n \n       pargs = coerce_template_parms (arg_parms, pargs, NULL_TREE, tf_none);\n       if (pargs != error_mark_node)"}, {"sha": "4847ea46ae1820fa49523e499dff72842b3dee17", "filename": "gcc/testsuite/g++.dg/template/ttp35.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ea64aad06a2b32739028bae03b9b9a5691d2d30/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp35.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ea64aad06a2b32739028bae03b9b9a5691d2d30/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp35.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp35.C?ref=3ea64aad06a2b32739028bae03b9b9a5691d2d30", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/108179\n+\n+template <class T, T X, template <T> class F>\n+struct Foo {};\n+\n+template <class T0, class T1, T1 X, template <T1> class F>\n+void f(Foo<T1, X, F>) {}"}]}