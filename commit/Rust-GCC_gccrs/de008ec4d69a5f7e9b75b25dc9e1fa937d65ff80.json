{"sha": "de008ec4d69a5f7e9b75b25dc9e1fa937d65ff80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGUwMDhlYzRkNjlhNWY3ZTliNzViMjVkYzllMWZhOTM3ZDY1ZmY4MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-03-30T13:29:28Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-03-30T13:29:28Z"}, "message": "re PR target/80206 (ICE in extract_insn, at recog.c:2327)\n\n\tPR target/80206\n\t* config/i386/sse.md\n\t(<extract_type>_vextract<shuffletype><extract_suf>_mask): Use\n\tregister as dest whenever it is a MEM not rtx_equal_p to the\n\tcorresponding dup operand, and when forcing into reg move the\n\treg into the memory afterwards.\n\t(<extract_type_2>_vextract<shuffletype><extract_suf_2>_mask):\n\tLikewise.  Use <ssehalfvecmode> instead of <ssequartermode>\n\tfor the force_reg mode.\n\t(avx512vl_vextractf128<mode>): Use register as dest either\n\talways when a MEM, or when it is a MEM not rtx_equal_p to the\n\tcorresponding dup operand, or even not when it is a CONST_VECTOR\n\tdepending on the mode and lo vs. hi.\n\t(avx512dq_vextract<shuffletype>64x2_1_maskm): Remove extraneous\n\tparens.\n\t(avx512f_vextract<shuffletype>32x4_1_maskm): Likewise.\n\t(<mask_codefor>avx512dq_vextract<shuffletype>64x2_1<mask_name>):\n\tLikewise.  Require that operands[2] is even.\n\t(<mask_codefor>avx512f_vextract<shuffletype>32x4_1<mask_name>):\n\tRemove extraneous parens.  Require that operands[2] is a multiple\n\tof 4.\n\t(vec_extract_lo_<mode><mask_name>): Don't bother testing if\n\toperands[0] is a MEM if <mask_applied>, the predicates/constraints\n\tdisallow memory then.\n\n\t* gcc.target/i386/pr80206.c: New test.\n\nFrom-SVN: r246588", "tree": {"sha": "114d4d3f583ede4b3fc8714edacc3ca6328e9971", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/114d4d3f583ede4b3fc8714edacc3ca6328e9971"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de008ec4d69a5f7e9b75b25dc9e1fa937d65ff80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de008ec4d69a5f7e9b75b25dc9e1fa937d65ff80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de008ec4d69a5f7e9b75b25dc9e1fa937d65ff80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de008ec4d69a5f7e9b75b25dc9e1fa937d65ff80/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "28c024077899ff4bad1fbce2d38fa8b5709272ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28c024077899ff4bad1fbce2d38fa8b5709272ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28c024077899ff4bad1fbce2d38fa8b5709272ef"}], "stats": {"total": 119, "additions": 93, "deletions": 26}, "files": [{"sha": "99256af1cff2f597cf3cf41d04a96ed812f3fadd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de008ec4d69a5f7e9b75b25dc9e1fa937d65ff80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de008ec4d69a5f7e9b75b25dc9e1fa937d65ff80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de008ec4d69a5f7e9b75b25dc9e1fa937d65ff80", "patch": "@@ -1,3 +1,30 @@\n+2017-03-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/80206\n+\t* config/i386/sse.md\n+\t(<extract_type>_vextract<shuffletype><extract_suf>_mask): Use\n+\tregister as dest whenever it is a MEM not rtx_equal_p to the\n+\tcorresponding dup operand, and when forcing into reg move the\n+\treg into the memory afterwards.\n+\t(<extract_type_2>_vextract<shuffletype><extract_suf_2>_mask):\n+\tLikewise.  Use <ssehalfvecmode> instead of <ssequartermode>\n+\tfor the force_reg mode.\n+\t(avx512vl_vextractf128<mode>): Use register as dest either\n+\talways when a MEM, or when it is a MEM not rtx_equal_p to the\n+\tcorresponding dup operand, or even not when it is a CONST_VECTOR\n+\tdepending on the mode and lo vs. hi.\n+\t(avx512dq_vextract<shuffletype>64x2_1_maskm): Remove extraneous\n+\tparens.\n+\t(avx512f_vextract<shuffletype>32x4_1_maskm): Likewise.\n+\t(<mask_codefor>avx512dq_vextract<shuffletype>64x2_1<mask_name>):\n+\tLikewise.  Require that operands[2] is even.\n+\t(<mask_codefor>avx512f_vextract<shuffletype>32x4_1<mask_name>):\n+\tRemove extraneous parens.  Require that operands[2] is a multiple\n+\tof 4.\n+\t(vec_extract_lo_<mode><mask_name>): Don't bother testing if\n+\toperands[0] is a MEM if <mask_applied>, the predicates/constraints\n+\tdisallow memory then.\n+\n 2017-03-30  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/77498"}, {"sha": "0ea06c5aa533894a3589089d4d4b52f739837935", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 47, "deletions": 26, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de008ec4d69a5f7e9b75b25dc9e1fa937d65ff80/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de008ec4d69a5f7e9b75b25dc9e1fa937d65ff80/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=de008ec4d69a5f7e9b75b25dc9e1fa937d65ff80", "patch": "@@ -7135,19 +7135,22 @@\n {\n   int mask;\n   mask = INTVAL (operands[2]);\n+  rtx dest = operands[0];\n \n-  if (MEM_P (operands[0]) && GET_CODE (operands[3]) == CONST_VECTOR)\n-    operands[0] = force_reg (<ssequartermode>mode, operands[0]);\n+  if (MEM_P (operands[0]) && !rtx_equal_p (operands[0], operands[3]))\n+    dest = gen_reg_rtx (<ssequartermode>mode);\n \n   if (<MODE>mode == V16SImode || <MODE>mode == V16SFmode)\n-    emit_insn (gen_avx512f_vextract<shuffletype>32x4_1_mask (operands[0],\n+    emit_insn (gen_avx512f_vextract<shuffletype>32x4_1_mask (dest,\n         operands[1], GEN_INT (mask * 4), GEN_INT (mask * 4 + 1),\n \tGEN_INT (mask * 4 + 2), GEN_INT (mask * 4 + 3), operands[3],\n \toperands[4]));\n   else\n-    emit_insn (gen_avx512dq_vextract<shuffletype>64x2_1_mask (operands[0],\n+    emit_insn (gen_avx512dq_vextract<shuffletype>64x2_1_mask (dest,\n         operands[1], GEN_INT (mask * 2), GEN_INT (mask * 2 + 1), operands[3],\n \toperands[4]));\n+  if (dest != operands[0])\n+    emit_move_insn (operands[0], dest);\n   DONE;\n })\n \n@@ -7161,8 +7164,8 @@\n \t  (match_operand:<ssequartermode> 4 \"memory_operand\" \"0\")\n \t  (match_operand:QI 5 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512DQ\n-   && (INTVAL (operands[2]) % 2 == 0)\n-   && (INTVAL (operands[2]) == INTVAL (operands[3]) - 1)\n+   && INTVAL (operands[2]) % 2 == 0\n+   && INTVAL (operands[2]) == INTVAL (operands[3]) - 1\n    && rtx_equal_p (operands[4], operands[0])\"\n {\n   operands[2] = GEN_INT ((INTVAL (operands[2])) >> 1);\n@@ -7187,13 +7190,13 @@\n \t  (match_operand:<ssequartermode> 6 \"memory_operand\" \"0\")\n \t  (match_operand:QI 7 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512F\n-   && ((INTVAL (operands[2]) % 4 == 0)\n-       && INTVAL (operands[2]) == (INTVAL (operands[3]) - 1)\n-       && INTVAL (operands[3]) == (INTVAL (operands[4]) - 1)\n-       && INTVAL (operands[4]) == (INTVAL (operands[5]) - 1))\n+   && INTVAL (operands[2]) % 4 == 0\n+   && INTVAL (operands[2]) == INTVAL (operands[3]) - 1\n+   && INTVAL (operands[3]) == INTVAL (operands[4]) - 1\n+   && INTVAL (operands[4]) == INTVAL (operands[5]) - 1\n    && rtx_equal_p (operands[6], operands[0])\"\n {\n-  operands[2] = GEN_INT ((INTVAL (operands[2])) >> 2);\n+  operands[2] = GEN_INT (INTVAL (operands[2]) >> 2);\n   return \"vextract<shuffletype>32x4\\t{%2, %1, %0%{%7%}|%0%{%7%}, %1, %2}\";\n }\n   [(set_attr \"type\" \"sselog\")\n@@ -7209,9 +7212,11 @@\n \t  (match_operand:V8FI 1 \"register_operand\" \"v\")\n \t  (parallel [(match_operand 2  \"const_0_to_7_operand\")\n             (match_operand 3  \"const_0_to_7_operand\")])))]\n-  \"TARGET_AVX512DQ && (INTVAL (operands[2]) == INTVAL (operands[3]) - 1)\"\n+  \"TARGET_AVX512DQ\n+   && INTVAL (operands[2]) % 2 == 0\n+   && INTVAL (operands[2]) == INTVAL (operands[3]) - 1\"\n {\n-  operands[2] = GEN_INT ((INTVAL (operands[2])) >> 1);\n+  operands[2] = GEN_INT (INTVAL (operands[2]) >> 1);\n   return \"vextract<shuffletype>64x2\\t{%2, %1, %0<mask_operand4>|%0<mask_operand4>, %1, %2}\";\n }\n   [(set_attr \"type\" \"sselog1\")\n@@ -7229,11 +7234,12 @@\n             (match_operand 4  \"const_0_to_15_operand\")\n             (match_operand 5  \"const_0_to_15_operand\")])))]\n   \"TARGET_AVX512F\n-   && (INTVAL (operands[2]) == (INTVAL (operands[3]) - 1)\n-       && INTVAL (operands[3]) == (INTVAL (operands[4]) - 1)\n-       && INTVAL (operands[4]) == (INTVAL (operands[5]) - 1))\"\n+   && INTVAL (operands[2]) % 4 == 0\n+   && INTVAL (operands[2]) == INTVAL (operands[3]) - 1\n+   && INTVAL (operands[3]) == INTVAL (operands[4]) - 1\n+   && INTVAL (operands[4]) == INTVAL (operands[5]) - 1\"\n {\n-  operands[2] = GEN_INT ((INTVAL (operands[2])) >> 2);\n+  operands[2] = GEN_INT (INTVAL (operands[2]) >> 2);\n   return \"vextract<shuffletype>32x4\\t{%2, %1, %0<mask_operand6>|%0<mask_operand6>, %1, %2}\";\n }\n   [(set_attr \"type\" \"sselog1\")\n@@ -7260,9 +7266,10 @@\n   \"TARGET_AVX512F\"\n {\n   rtx (*insn)(rtx, rtx, rtx, rtx);\n+  rtx dest = operands[0];\n \n-  if (MEM_P (operands[0]) && GET_CODE (operands[3]) == CONST_VECTOR)\n-    operands[0] = force_reg (<ssequartermode>mode, operands[0]);\n+  if (MEM_P (dest) && !rtx_equal_p (dest, operands[3]))\n+    dest = gen_reg_rtx (<ssehalfvecmode>mode);\n \n   switch (INTVAL (operands[2]))\n     {\n@@ -7276,7 +7283,9 @@\n       gcc_unreachable ();\n     }\n \n-  emit_insn (insn (operands[0], operands[1], operands[3], operands[4]));\n+  emit_insn (insn (dest, operands[1], operands[3], operands[4]));\n+  if (dest != operands[0])\n+    emit_move_insn (operands[0], dest);\n   DONE;\n })\n \n@@ -7317,7 +7326,8 @@\n \t  (match_operand:V8FI 1 \"nonimmediate_operand\" \"v,m\")\n \t  (parallel [(const_int 0) (const_int 1)\n             (const_int 2) (const_int 3)])))]\n-  \"TARGET_AVX512F && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"TARGET_AVX512F\n+   && (<mask_applied> || !(MEM_P (operands[0]) && MEM_P (operands[1])))\"\n {\n   if (<mask_applied> || !TARGET_AVX512VL)\n     return \"vextract<shuffletype>64x4\\t{$0x0, %1, %0<mask_operand2>|%0<mask_operand2>, %1, 0x0}\";\n@@ -7411,10 +7421,19 @@\n   \"TARGET_AVX512DQ && TARGET_AVX512VL\"\n {\n   rtx (*insn)(rtx, rtx, rtx, rtx);\n-\n-  if (MEM_P (operands[0]) && GET_CODE (operands[3]) == CONST_VECTOR)\n-    operands[0] = force_reg (<ssehalfvecmode>mode, operands[0]);\n-\n+  rtx dest = operands[0];\n+\n+  if (MEM_P (dest)\n+      && (GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) == 4\n+\t  /* For V8S[IF]mode there are maskm insns with =m and 0\n+\t     constraints.  */\n+\t  ? !rtx_equal_p (dest, operands[3])\n+\t  /* For V4D[IF]mode, hi insns don't allow memory, and\n+\t     lo insns have =m and 0C constraints.  */\n+\t  : (operands[2] != const0_rtx\n+\t     || (!rtx_equal_p (dest, operands[3])\n+\t\t && GET_CODE (operands[3]) != CONST_VECTOR))))\n+    dest = gen_reg_rtx (<ssehalfvecmode>mode);\n   switch (INTVAL (operands[2]))\n     {\n     case 0:\n@@ -7427,7 +7446,9 @@\n       gcc_unreachable ();\n     }\n \n-  emit_insn (insn (operands[0], operands[1], operands[3], operands[4]));\n+  emit_insn (insn (dest, operands[1], operands[3], operands[4]));\n+  if (dest != operands[0])\n+    emit_move_insn (operands[0], dest);\n   DONE;\n })\n "}, {"sha": "c1b6566033a00eb0531f068c30b0074d1d07ca0c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de008ec4d69a5f7e9b75b25dc9e1fa937d65ff80/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de008ec4d69a5f7e9b75b25dc9e1fa937d65ff80/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=de008ec4d69a5f7e9b75b25dc9e1fa937d65ff80", "patch": "@@ -1,3 +1,8 @@\n+2017-03-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/80206\n+\t* gcc.target/i386/pr80206.c: New test.\n+\n 2017-03-30  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/77498"}, {"sha": "dafa9a6cd7deb7d5ed7b7160bbdba00fe74ef29f", "filename": "gcc/testsuite/gcc.target/i386/pr80206.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de008ec4d69a5f7e9b75b25dc9e1fa937d65ff80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr80206.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de008ec4d69a5f7e9b75b25dc9e1fa937d65ff80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr80206.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr80206.c?ref=de008ec4d69a5f7e9b75b25dc9e1fa937d65ff80", "patch": "@@ -0,0 +1,14 @@\n+/* PR target/80206 */\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -ffloat-store\" } */\n+\n+#include <immintrin.h>\n+\n+__m512d a;\n+__m256d b;\n+\n+void\n+foo (__m256d *p)\n+{\n+  *p = _mm512_mask_extractf64x4_pd (b, 1, a, 1);\n+}"}]}