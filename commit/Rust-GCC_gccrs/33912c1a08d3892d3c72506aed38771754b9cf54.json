{"sha": "33912c1a08d3892d3c72506aed38771754b9cf54", "node_id": "C_kwDOANBUbNoAKDMzOTEyYzFhMDhkMzg5MmQzYzcyNTA2YWVkMzg3NzE3NTRiOWNmNTQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-06-30T15:52:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-30T15:52:01Z"}, "message": "Merge #1336\n\n1336: Resolve const generic parameters r=CohenArthur a=CohenArthur\n\nFixes #1319.\r\n\r\nThis can only resolve the simpler test cases: Anything that is ambiguous is ignored and does not get resolved. This will be fixed very soon :)\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "de1e4342203a3567c8a719c8d689a3a097abc71a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de1e4342203a3567c8a719c8d689a3a097abc71a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33912c1a08d3892d3c72506aed38771754b9cf54", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJivcahCRBK7hj4Ov3rIwAAOBMIACi8op/HIVFZOs//EVZAqYBJ\nPXnWtsM5Kcto+GoMTijfc1/ZofRCIus3IB8JH4lksrFp6+H0qdxN2NhQbFlvw6Wm\nQ/RN/IVr/H9pApSB98DkCSytEiAhZkUpwA5GhzftXhcVjDkjG5mtXvUerKSW2whX\nYG/FU/KkQTHxSKC2gadg4cQfWbekIaxB36ZK+4e8N8F4lVKnNJfH9R9aum8bcXSL\nuIk+HkQGpF1HZkoNn5uTYqf7xHxlkAleReK2Sku0hMgoFjX8LWdNlvG0uB7KQN0I\n5X63/CxUKZPgGApo1QeVCtjYbXb4gdF1OUC/y80q5nXV0XMHVU6XTJmzo9jSHgU=\n=c7bA\n-----END PGP SIGNATURE-----\n", "payload": "tree de1e4342203a3567c8a719c8d689a3a097abc71a\nparent 81abc8623cb75fa18315c65e94c5965ec36fdb54\nparent 93f63a94d4389f31d5b225ad220ebea5f7288fb7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1656604321 +0000\ncommitter GitHub <noreply@github.com> 1656604321 +0000\n\nMerge #1336\n\n1336: Resolve const generic parameters r=CohenArthur a=CohenArthur\n\nFixes #1319.\r\n\r\nThis can only resolve the simpler test cases: Anything that is ambiguous is ignored and does not get resolved. This will be fixed very soon :)\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33912c1a08d3892d3c72506aed38771754b9cf54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33912c1a08d3892d3c72506aed38771754b9cf54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33912c1a08d3892d3c72506aed38771754b9cf54/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81abc8623cb75fa18315c65e94c5965ec36fdb54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81abc8623cb75fa18315c65e94c5965ec36fdb54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81abc8623cb75fa18315c65e94c5965ec36fdb54"}, {"sha": "93f63a94d4389f31d5b225ad220ebea5f7288fb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93f63a94d4389f31d5b225ad220ebea5f7288fb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93f63a94d4389f31d5b225ad220ebea5f7288fb7"}], "stats": {"total": 332, "additions": 161, "deletions": 171}, "files": [{"sha": "d98a7cfeedb5e9277756e1a4a5d03dc7e2a114ea", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33912c1a08d3892d3c72506aed38771754b9cf54/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33912c1a08d3892d3c72506aed38771754b9cf54/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=33912c1a08d3892d3c72506aed38771754b9cf54", "patch": "@@ -2365,8 +2365,8 @@ ConstGenericParam::as_string () const\n   std::string str (\"ConstGenericParam: \");\n   str += \"const \" + name + \": \" + type->as_string ();\n \n-  if (default_value)\n-    str += \" = \" + default_value->as_string ();\n+  if (has_default_value ())\n+    str += \" = \" + get_default_value ().as_string ();\n \n   return str;\n }"}, {"sha": "461a2460f8f5f5566c2c87d89250930d9e027717", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33912c1a08d3892d3c72506aed38771754b9cf54/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33912c1a08d3892d3c72506aed38771754b9cf54/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=33912c1a08d3892d3c72506aed38771754b9cf54", "patch": "@@ -1344,75 +1344,6 @@ class LifetimeParam : public GenericParam\n   }\n };\n \n-/**\n- * Representation of const generic parameters\n- */\n-class ConstGenericParam : public GenericParam\n-{\n-  /* Name of the parameter */\n-  Identifier name;\n-\n-  /* Mandatory type of the const parameter - a null pointer is an error */\n-  std::unique_ptr<AST::Type> type;\n-\n-  /**\n-   * Default value for the const generic parameter - nullptr indicates a lack\n-   * of default value, not an error, as these errors are reported during\n-   * parsing.\n-   */\n-  std::unique_ptr<AST::Expr> default_value;\n-\n-  Attribute outer_attr;\n-  Location locus;\n-\n-public:\n-  ConstGenericParam (Identifier name, std::unique_ptr<AST::Type> type,\n-\t\t     std::unique_ptr<AST::Expr> default_value,\n-\t\t     Attribute outer_attr, Location locus)\n-    : name (name), type (std::move (type)),\n-      default_value (std::move (default_value)), outer_attr (outer_attr),\n-      locus (locus)\n-  {}\n-\n-  ConstGenericParam (const ConstGenericParam &other)\n-    : GenericParam (), name (other.name), type (other.type->clone_type ()),\n-      outer_attr (other.outer_attr), locus (other.locus)\n-  {\n-    if (other.default_value)\n-      default_value = other.default_value->clone_expr ();\n-  }\n-\n-  bool has_type () { return type != nullptr; }\n-  bool has_default_value () { return default_value != nullptr; }\n-\n-  const Identifier &get_name () const { return name; }\n-\n-  std::unique_ptr<AST::Type> &get_type ()\n-  {\n-    rust_assert (has_type ());\n-\n-    return type;\n-  }\n-\n-  std::unique_ptr<AST::Expr> &get_default_value () { return default_value; }\n-\n-  std::string as_string () const override;\n-\n-  void accept_vis (ASTVisitor &vis) override;\n-\n-  Location get_locus () const override final { return locus; }\n-\n-  Kind get_kind () const override final { return Kind::Const; }\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  ConstGenericParam *clone_generic_param_impl () const override\n-  {\n-    return new ConstGenericParam (*this);\n-  }\n-};\n-\n // A macro item AST node - abstract base class\n class MacroItem : public Item\n {"}, {"sha": "36f1c0478cb2ff724593596125876aa650c782e2", "filename": "gcc/rust/ast/rust-path.h", "status": "modified", "additions": 76, "deletions": 1, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33912c1a08d3892d3c72506aed38771754b9cf54/gcc%2Frust%2Fast%2Frust-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33912c1a08d3892d3c72506aed38771754b9cf54/gcc%2Frust%2Fast%2Frust-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-path.h?ref=33912c1a08d3892d3c72506aed38771754b9cf54", "patch": "@@ -191,7 +191,12 @@ class ConstGenericArg\n \n   Kind get_kind () const { return kind; }\n \n-  std::unique_ptr<AST::Expr> &get_expression () { return expression; }\n+  const std::unique_ptr<AST::Expr> &get_expression () const\n+  {\n+    rust_assert (kind == Kind::Clear);\n+\n+    return expression;\n+  }\n \n   std::string as_string () const\n   {\n@@ -241,6 +246,76 @@ class ConstGenericArg\n   Location locus;\n };\n \n+/**\n+ * Representation of const generic parameters\n+ */\n+class ConstGenericParam : public GenericParam\n+{\n+  /* Name of the parameter */\n+  Identifier name;\n+\n+  /* Mandatory type of the const parameter - a null pointer is an error */\n+  std::unique_ptr<AST::Type> type;\n+\n+  /**\n+   * Default value for the const generic parameter\n+   */\n+  ConstGenericArg default_value;\n+\n+  Attribute outer_attr;\n+  Location locus;\n+\n+public:\n+  ConstGenericParam (Identifier name, std::unique_ptr<AST::Type> type,\n+\t\t     ConstGenericArg default_value, Attribute outer_attr,\n+\t\t     Location locus)\n+    : name (name), type (std::move (type)),\n+      default_value (std::move (default_value)), outer_attr (outer_attr),\n+      locus (locus)\n+  {}\n+\n+  ConstGenericParam (const ConstGenericParam &other)\n+    : GenericParam (), name (other.name), type (other.type->clone_type ()),\n+      default_value (other.default_value), outer_attr (other.outer_attr),\n+      locus (other.locus)\n+  {}\n+\n+  bool has_type () const { return type != nullptr; }\n+  bool has_default_value () const { return !default_value.is_error (); }\n+\n+  const Identifier &get_name () const { return name; }\n+\n+  std::unique_ptr<AST::Type> &get_type ()\n+  {\n+    rust_assert (has_type ());\n+\n+    return type;\n+  }\n+\n+  const ConstGenericArg &get_default_value () const\n+  {\n+    rust_assert (has_default_value ());\n+\n+    return default_value;\n+  }\n+\n+  std::string as_string () const override;\n+\n+  void accept_vis (ASTVisitor &vis) override;\n+\n+  Location get_locus () const override final { return locus; }\n+\n+  Kind get_kind () const override final { return Kind::Const; }\n+\n+protected:\n+  /* Use covariance to implement clone function as returning this object rather\n+   * than base */\n+  ConstGenericParam *clone_generic_param_impl () const override\n+  {\n+    return new ConstGenericParam (*this);\n+  }\n+};\n+\n // Generic arguments allowed in each path expression segment - inline?\n struct GenericArgs\n {"}, {"sha": "2bcf0ee23c4a8e07e79f905d625104295f2a3efc", "filename": "gcc/rust/hir/rust-ast-lower-type.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33912c1a08d3892d3c72506aed38771754b9cf54/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33912c1a08d3892d3c72506aed38771754b9cf54/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h?ref=33912c1a08d3892d3c72506aed38771754b9cf54", "patch": "@@ -376,10 +376,14 @@ class ASTLowerGenericParam : public ASTLoweringBase\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n     auto type = ASTLoweringType::translate (param.get_type ().get ());\n-    auto default_expr\n-      = param.has_default_value ()\n-\t  ? ASTLoweringExpr::translate (param.get_default_value ().get ())\n-\t  : nullptr;\n+    // FIXME: Arthur: Remove the second guard once we disambiguate in the\n+    // resolveer\n+    HIR::Expr *default_expr = nullptr;\n+    if (param.has_default_value ()\n+\t&& param.get_default_value ().get_kind ()\n+\t     == AST::ConstGenericArg::Kind::Clear)\n+      default_expr = ASTLoweringExpr::translate (\n+\tparam.get_default_value ().get_expression ().get ());\n \n     translated\n       = new HIR::ConstGenericParam (param.get_name (),"}, {"sha": "6a1a3a586931aa4ed1523f2c43228ce8fad9f138", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33912c1a08d3892d3c72506aed38771754b9cf54/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33912c1a08d3892d3c72506aed38771754b9cf54/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=33912c1a08d3892d3c72506aed38771754b9cf54", "patch": "@@ -2901,7 +2901,7 @@ Parser<ManagedTokenSource>::parse_generic_param (EndTokenPred is_end_token)\n \n \tparam = std::unique_ptr<AST::ConstGenericParam> (\n \t  new AST::ConstGenericParam (name_token->get_str (), std::move (type),\n-\t\t\t\t      nullptr, std::move (outer_attrs),\n+\t\t\t\t      default_expr, std::move (outer_attrs),\n \t\t\t\t      token->get_locus ()));\n \n \tbreak;"}, {"sha": "62518b6a40322423414a37b3fff881720985bee6", "filename": "gcc/rust/resolve/rust-ast-resolve-item.cc", "status": "modified", "additions": 29, "deletions": 66, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33912c1a08d3892d3c72506aed38771754b9cf54/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33912c1a08d3892d3c72506aed38771754b9cf54/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc?ref=33912c1a08d3892d3c72506aed38771754b9cf54", "patch": "@@ -73,10 +73,8 @@ ResolveTraitItems::visit (AST::TraitItemFunc &func)\n \n   AST::TraitFunctionDecl &function = func.get_trait_function_decl ();\n   if (function.has_generics ())\n-    {\n-      for (auto &generic : function.get_generic_params ())\n-\tResolveGenericParam::go (generic.get ());\n-    }\n+    for (auto &generic : function.get_generic_params ())\n+      ResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n \n   if (function.has_return_type ())\n     ResolveType::go (function.get_return_type ().get ());\n@@ -122,10 +120,8 @@ ResolveTraitItems::visit (AST::TraitItemMethod &func)\n \n   AST::TraitMethodDecl &function = func.get_trait_method_decl ();\n   if (function.has_generics ())\n-    {\n-      for (auto &generic : function.get_generic_params ())\n-\tResolveGenericParam::go (generic.get ());\n-    }\n+    for (auto &generic : function.get_generic_params ())\n+      ResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n \n   if (function.has_return_type ())\n     ResolveType::go (function.get_return_type ().get ());\n@@ -210,10 +206,8 @@ ResolveItem::visit (AST::TypeAlias &alias)\n   resolver->get_type_scope ().push (scope_node_id);\n \n   if (alias.has_generics ())\n-    {\n-      for (auto &generic : alias.get_generic_params ())\n-\tResolveGenericParam::go (generic.get ());\n-    }\n+    for (auto &generic : alias.get_generic_params ())\n+      ResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n \n   if (alias.has_where_clause ())\n     ResolveWhereClause::Resolve (alias.get_where_clause ());\n@@ -274,12 +268,8 @@ ResolveItem::visit (AST::TupleStruct &struct_decl)\n   resolver->get_type_scope ().push (scope_node_id);\n \n   if (struct_decl.has_generics ())\n-    {\n-      for (auto &generic : struct_decl.get_generic_params ())\n-\t{\n-\t  ResolveGenericParam::go (generic.get ());\n-\t}\n-    }\n+    for (auto &generic : struct_decl.get_generic_params ())\n+      ResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n \n   if (struct_decl.has_where_clause ())\n     ResolveWhereClause::Resolve (struct_decl.get_where_clause ());\n@@ -313,12 +303,8 @@ ResolveItem::visit (AST::Enum &enum_decl)\n   resolver->get_type_scope ().push (scope_node_id);\n \n   if (enum_decl.has_generics ())\n-    {\n-      for (auto &generic : enum_decl.get_generic_params ())\n-\t{\n-\t  ResolveGenericParam::go (generic.get ());\n-\t}\n-    }\n+    for (auto &generic : enum_decl.get_generic_params ())\n+      ResolveGenericParam::go (generic.get (), prefix, cpath);\n \n   if (enum_decl.has_where_clause ())\n     ResolveWhereClause::Resolve (enum_decl.get_where_clause ());\n@@ -411,12 +397,8 @@ ResolveItem::visit (AST::StructStruct &struct_decl)\n   resolver->get_type_scope ().push (scope_node_id);\n \n   if (struct_decl.has_generics ())\n-    {\n-      for (auto &generic : struct_decl.get_generic_params ())\n-\t{\n-\t  ResolveGenericParam::go (generic.get ());\n-\t}\n-    }\n+    for (auto &generic : struct_decl.get_generic_params ())\n+      ResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n \n   if (struct_decl.has_where_clause ())\n     ResolveWhereClause::Resolve (struct_decl.get_where_clause ());\n@@ -450,12 +432,8 @@ ResolveItem::visit (AST::Union &union_decl)\n   resolver->get_type_scope ().push (scope_node_id);\n \n   if (union_decl.has_generics ())\n-    {\n-      for (auto &generic : union_decl.get_generic_params ())\n-\t{\n-\t  ResolveGenericParam::go (generic.get ());\n-\t}\n-    }\n+    for (auto &generic : union_decl.get_generic_params ())\n+      ResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n \n   if (union_decl.has_where_clause ())\n     ResolveWhereClause::Resolve (union_decl.get_where_clause ());\n@@ -523,10 +501,8 @@ ResolveItem::visit (AST::Function &function)\n   resolver->push_new_label_rib (resolver->get_type_scope ().peek ());\n \n   if (function.has_generics ())\n-    {\n-      for (auto &generic : function.get_generic_params ())\n-\tResolveGenericParam::go (generic.get ());\n-    }\n+    for (auto &generic : function.get_generic_params ())\n+      ResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n \n   // resolve any where clause items\n   if (function.has_where_clause ())\n@@ -566,12 +542,8 @@ ResolveItem::visit (AST::InherentImpl &impl_block)\n   resolve_visibility (impl_block.get_visibility ());\n \n   if (impl_block.has_generics ())\n-    {\n-      for (auto &generic : impl_block.get_generic_params ())\n-\t{\n-\t  ResolveGenericParam::go (generic.get ());\n-\t}\n-    }\n+    for (auto &generic : impl_block.get_generic_params ())\n+      ResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n \n   // resolve any where clause items\n   if (impl_block.has_where_clause ())\n@@ -657,10 +629,8 @@ ResolveItem::visit (AST::Method &method)\n   resolver->push_new_label_rib (resolver->get_type_scope ().peek ());\n \n   if (method.has_generics ())\n-    {\n-      for (auto &generic : method.get_generic_params ())\n-\tResolveGenericParam::go (generic.get ());\n-    }\n+    for (auto &generic : method.get_generic_params ())\n+      ResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n \n   // resolve any where clause items\n   if (method.has_where_clause ())\n@@ -719,12 +689,8 @@ ResolveItem::visit (AST::TraitImpl &impl_block)\n   resolver->push_new_type_rib (resolver->get_type_scope ().peek ());\n \n   if (impl_block.has_generics ())\n-    {\n-      for (auto &generic : impl_block.get_generic_params ())\n-\t{\n-\t  ResolveGenericParam::go (generic.get ());\n-\t}\n-    }\n+    for (auto &generic : impl_block.get_generic_params ())\n+      ResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n \n   // resolve any where clause items\n   if (impl_block.has_where_clause ())\n@@ -836,9 +802,7 @@ ResolveItem::visit (AST::Trait &trait)\n   CanonicalPath Self = CanonicalPath::get_big_self (trait.get_node_id ());\n \n   for (auto &generic : trait.get_generic_params ())\n-    {\n-      ResolveGenericParam::go (generic.get ());\n-    }\n+    ResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n \n   // Self is an implicit TypeParam so lets mark it as such\n   resolver->get_type_scope ().append_reference_for_def (\n@@ -900,7 +864,7 @@ ResolveItem::resolve_impl_item (AST::InherentImplItem *item,\n void\n ResolveItem::resolve_extern_item (AST::ExternalItem *item)\n {\n-  ResolveExternItem::go (item);\n+  ResolveExternItem::go (item, prefix, canonical_prefix);\n }\n \n static void\n@@ -1070,9 +1034,10 @@ ResolveImplItems::visit (AST::TypeAlias &alias)\n }\n \n void\n-ResolveExternItem::go (AST::ExternalItem *item)\n+ResolveExternItem::go (AST::ExternalItem *item, const CanonicalPath &prefix,\n+\t\t       const CanonicalPath &canonical_prefix)\n {\n-  ResolveExternItem resolver;\n+  ResolveExternItem resolver (prefix, canonical_prefix);\n   item->accept_vis (resolver);\n }\n \n@@ -1092,10 +1057,8 @@ ResolveExternItem::visit (AST::ExternalFunctionItem &function)\n \n   // resolve the generics\n   if (function.has_generics ())\n-    {\n-      for (auto &generic : function.get_generic_params ())\n-\tResolveGenericParam::go (generic.get ());\n-    }\n+    for (auto &generic : function.get_generic_params ())\n+      ResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n \n   if (function.has_return_type ())\n     ResolveType::go (function.get_return_type ().get ());"}, {"sha": "ce521f057f6846bc7247cee3967c97f238854d63", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33912c1a08d3892d3c72506aed38771754b9cf54/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33912c1a08d3892d3c72506aed38771754b9cf54/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=33912c1a08d3892d3c72506aed38771754b9cf54", "patch": "@@ -118,13 +118,20 @@ class ResolveExternItem : public ResolverBase\n   using Rust::Resolver::ResolverBase::visit;\n \n public:\n-  static void go (AST::ExternalItem *item);\n+  static void go (AST::ExternalItem *item, const CanonicalPath &prefix,\n+\t\t  const CanonicalPath &canonical_prefix);\n \n   void visit (AST::ExternalFunctionItem &function) override;\n   void visit (AST::ExternalStaticItem &item) override;\n \n private:\n-  ResolveExternItem () : ResolverBase () {}\n+  ResolveExternItem (const CanonicalPath &prefix,\n+\t\t     const CanonicalPath &canonical_prefix)\n+    : ResolverBase (), prefix (prefix), canonical_prefix (canonical_prefix)\n+  {}\n+\n+  const CanonicalPath &prefix;\n+  const CanonicalPath &canonical_prefix;\n };\n \n } // namespace Resolver"}, {"sha": "1ce3df0891c5c278532862f9d830e8800351392d", "filename": "gcc/rust/resolve/rust-ast-resolve-stmt.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33912c1a08d3892d3c72506aed38771754b9cf54/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33912c1a08d3892d3c72506aed38771754b9cf54/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.cc?ref=33912c1a08d3892d3c72506aed38771754b9cf54", "patch": "@@ -30,7 +30,7 @@ ResolveStmt::visit (AST::ExternBlock &extern_block)\n     {\n       ResolveToplevelExternItem::go (item.get (),\n \t\t\t\t     CanonicalPath::create_empty ());\n-      ResolveExternItem::go (item.get ());\n+      ResolveExternItem::go (item.get (), prefix, canonical_prefix);\n     }\n }\n "}, {"sha": "8867845521177fd8c11833deec745a216f0919d7", "filename": "gcc/rust/resolve/rust-ast-resolve-stmt.h", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33912c1a08d3892d3c72506aed38771754b9cf54/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33912c1a08d3892d3c72506aed38771754b9cf54/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h?ref=33912c1a08d3892d3c72506aed38771754b9cf54", "patch": "@@ -111,9 +111,7 @@ class ResolveStmt : public ResolverBase\n     if (struct_decl.has_generics ())\n       {\n \tfor (auto &generic : struct_decl.get_generic_params ())\n-\t  {\n-\t    ResolveGenericParam::go (generic.get ());\n-\t  }\n+\t  ResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n       }\n \n     for (AST::TupleField &field : struct_decl.get_fields ())\n@@ -145,9 +143,7 @@ class ResolveStmt : public ResolverBase\n     if (enum_decl.has_generics ())\n       {\n \tfor (auto &generic : enum_decl.get_generic_params ())\n-\t  {\n-\t    ResolveGenericParam::go (generic.get ());\n-\t  }\n+\t  ResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n       }\n \n     for (auto &variant : enum_decl.get_variants ())\n@@ -271,9 +267,7 @@ class ResolveStmt : public ResolverBase\n     if (struct_decl.has_generics ())\n       {\n \tfor (auto &generic : struct_decl.get_generic_params ())\n-\t  {\n-\t    ResolveGenericParam::go (generic.get ());\n-\t  }\n+\t  ResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n       }\n \n     for (AST::StructField &field : struct_decl.get_fields ())\n@@ -308,12 +302,8 @@ class ResolveStmt : public ResolverBase\n     resolver->get_type_scope ().push (scope_node_id);\n \n     if (union_decl.has_generics ())\n-      {\n-\tfor (auto &generic : union_decl.get_generic_params ())\n-\t  {\n-\t    ResolveGenericParam::go (generic.get ());\n-\t  }\n-      }\n+      for (auto &generic : union_decl.get_generic_params ())\n+\tResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n \n     for (AST::StructField &field : union_decl.get_variants ())\n       {\n@@ -352,10 +342,8 @@ class ResolveStmt : public ResolverBase\n     resolver->push_new_label_rib (resolver->get_type_scope ().peek ());\n \n     if (function.has_generics ())\n-      {\n-\tfor (auto &generic : function.get_generic_params ())\n-\t  ResolveGenericParam::go (generic.get ());\n-      }\n+      for (auto &generic : function.get_generic_params ())\n+\tResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n \n     if (function.has_return_type ())\n       ResolveType::go (function.get_return_type ().get ());"}, {"sha": "946cdd4db1870b6e9510e731ef560ceacc1eebb6", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33912c1a08d3892d3c72506aed38771754b9cf54/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33912c1a08d3892d3c72506aed38771754b9cf54/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=33912c1a08d3892d3c72506aed38771754b9cf54", "patch": "@@ -20,6 +20,7 @@\n #define RUST_AST_RESOLVE_TYPE_H\n \n #include \"rust-ast-resolve-base.h\"\n+#include \"rust-ast-resolve-expr.h\"\n #include \"rust-ast-full.h\"\n \n namespace Rust {\n@@ -146,17 +147,23 @@ class ResolveGenericParam : public ResolverBase\n   using Rust::Resolver::ResolverBase::visit;\n \n public:\n-  static NodeId go (AST::GenericParam *param)\n+  static NodeId go (AST::GenericParam *param, const CanonicalPath &prefix,\n+\t\t    const CanonicalPath &canonical_prefix)\n   {\n-    ResolveGenericParam resolver;\n+    ResolveGenericParam resolver (prefix, canonical_prefix);\n     param->accept_vis (resolver);\n     return resolver.resolved_node;\n   }\n \n-  void visit (AST::ConstGenericParam &) override\n+  void visit (AST::ConstGenericParam &param) override\n   {\n-    // For now do not do anything and accept everything.\n-    // FIXME: This needs to change soon!\n+    ResolveType::go (param.get_type ().get ());\n+\n+    if (param.has_default_value ())\n+      ResolveExpr::go (param.get_default_value ().get_expression ().get (),\n+\t\t       prefix, canonical_prefix);\n+\n+    ok = true;\n   }\n \n   void visit (AST::TypeParam &param) override\n@@ -188,7 +195,15 @@ class ResolveGenericParam : public ResolverBase\n   }\n \n private:\n-  ResolveGenericParam () : ResolverBase () {}\n+  ResolveGenericParam (const CanonicalPath &prefix,\n+\t\t       const CanonicalPath &canonical_prefix)\n+    : ResolverBase (), ok (false), prefix (prefix),\n+      canonical_prefix (canonical_prefix)\n+  {}\n+\n+  bool ok;\n+  const CanonicalPath &prefix;\n+  const CanonicalPath &canonical_prefix;\n };\n \n class ResolveWhereClause : public ResolverBase"}, {"sha": "8a3754da433fe66105cc909db88783c5618df637", "filename": "gcc/testsuite/rust/compile/const_generics_4.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33912c1a08d3892d3c72506aed38771754b9cf54/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33912c1a08d3892d3c72506aed38771754b9cf54/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_4.rs?ref=33912c1a08d3892d3c72506aed38771754b9cf54", "patch": "@@ -0,0 +1,7 @@\n+// { dg-additional-options \"-w\" }\n+\n+const P: usize = 14;\n+\n+struct Foo<const N: usize = { M }>; // { dg-error \"failed to find name: M\" }\n+struct Bar<const N: usize = { P }>;\n+struct Baz<const N: NotAType = { P }>; // { dg-error \"failed to resolve TypePath: NotAType in this scope\" }"}]}