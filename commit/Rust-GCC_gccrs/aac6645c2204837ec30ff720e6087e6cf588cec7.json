{"sha": "aac6645c2204837ec30ff720e6087e6cf588cec7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFjNjY0NWMyMjA0ODM3ZWMzMGZmNzIwZTYwODdlNmNmNTg4Y2VjNw==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-07-22T06:34:47Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:19Z"}, "message": "Added provisional SPARC target hook", "tree": {"sha": "a6c5945c5ab9363c2fa739259dade4d676c8c41d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6c5945c5ab9363c2fa739259dade4d676c8c41d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aac6645c2204837ec30ff720e6087e6cf588cec7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aac6645c2204837ec30ff720e6087e6cf588cec7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aac6645c2204837ec30ff720e6087e6cf588cec7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aac6645c2204837ec30ff720e6087e6cf588cec7/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a058ca33b0440aee5f89c92f3ebbfb762f19e86e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a058ca33b0440aee5f89c92f3ebbfb762f19e86e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a058ca33b0440aee5f89c92f3ebbfb762f19e86e"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "d1dfa79849533527dc4f436eae38d796d20d9ebf", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac6645c2204837ec30ff720e6087e6cf588cec7/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac6645c2204837ec30ff720e6087e6cf588cec7/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=aac6645c2204837ec30ff720e6087e6cf588cec7", "patch": "@@ -570,6 +570,7 @@ sparc*-*-*)\n \tc_target_objs=\"sparc-c.o\"\n \tcxx_target_objs=\"sparc-c.o\"\n \td_target_objs=\"sparc-d.o\"\n+\trust_target_objs=\"sparc-rust.o\"\n \textra_headers=\"visintrin.h\"\n \t;;\n s390*-*-*)"}, {"sha": "43d642e7b1654bca1b17e79a72d7b19acd63f470", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac6645c2204837ec30ff720e6087e6cf588cec7/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac6645c2204837ec30ff720e6087e6cf588cec7/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=aac6645c2204837ec30ff720e6087e6cf588cec7", "patch": "@@ -114,4 +114,7 @@ extern rtl_opt_pass *make_pass_work_around_errata (gcc::context *);\n /* Routines implemented in sparc-d.c  */\n extern void sparc_d_target_versions (void);\n \n+/* Routines implemented in sparc-rust.c  */\n+extern void sparc_rust_target_cpu_info (void);\n+\n #endif /* __SPARC_PROTOS_H__ */"}, {"sha": "867612e328c72514320fb20515a02e4bb6e4f4c4", "filename": "gcc/config/sparc/sparc-rust.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac6645c2204837ec30ff720e6087e6cf588cec7/gcc%2Fconfig%2Fsparc%2Fsparc-rust.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac6645c2204837ec30ff720e6087e6cf588cec7/gcc%2Fconfig%2Fsparc%2Fsparc-rust.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-rust.c?ref=aac6645c2204837ec30ff720e6087e6cf588cec7", "patch": "@@ -0,0 +1,64 @@\n+/* Subroutines for the Rust front end for the SPARC architecture.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tm_p.h\"\n+#include \"rust/rust-target.h\"\n+#include \"rust/rust-target-def.h\"\n+\n+/* Implement TARGET_RUST_CPU_INFO for SPARC targets.  */\n+\n+void sparc_rust_target_cpu_info(void) {\n+    if (TARGET_64BIT)\n+        rust_add_target_info(\"target_arch\", \"sparc64\");\n+    else \n+        rust_add_target_info(\"target_arch\", \"sparc\");\n+\n+    // names based on llvm \n+    /* TODO: try to isolate soft-mul-div feature (software emulation for integer multiply and divide) \n+     * if doable? does gcc even support this? */\n+    if (!(TARGET_FSMULD))\n+        rust_add_target_info(\"target_arch\", \"no-fsmuld\");\n+    // TODO: add \"no-fmuls\" (fmuls instruction) option if can find in gcc\n+    if (TARGET_V9)\n+        rust_add_target_info(\"target_feature\", \"v9\");\n+    if (TARGET_DEPRECATED_V8_INSNS)\n+        rust_add_target_info(\"target_feature\", \"deprecated-v8\");\n+    if (TARGET_VIS)\n+        rust_add_target_info(\"target_feature\", \"vis\");\n+    if (TARGET_VIS2)\n+        rust_add_target_info(\"target_feature\", \"vis2\");\n+    if (TARGET_VIS3)\n+        rust_add_target_info(\"target_feature\", \"vis3\");\n+    if (TARGET_LEON) // TODO: does this mean just leon or also allow leon v3?\n+        rust_add_target_info(\"target_feature\", \"leon\");\n+    // TODO: add \"leonpwrpsr\" (PWRPSR instruction) option if can find in gcc\n+    if (TARGET_HARD_QUAD)\n+        rust_add_target_info(\"target_feature\", \"hard-quad-float\");\n+    if (TARGET_POPC)\n+        rust_add_target_info(\"target_feature\", \"popc\");\n+    if (!(TARGET_FPU))\n+        rust_add_target_info(\"target_feature\", \"soft-float\");\n+    /* TODO: add \"hasumacsmac\" (UMAC and SMAC insns), \"hasleoncasa\" (CASA insns), \n+     * \"insertnopload\" (LEON3 fix), \"detectroundchange\" (LEON3 fix), \"fixallfdivsqrt\" (LEON fix), \n+     * \"leoncyclecounter\" if in gcc */\n+\n+    // TODO: maybe add features in gcc that seem to have no llvm equivalent\n+}"}, {"sha": "75268e50e0ef36c262ed485842a060ae73f571bd", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac6645c2204837ec30ff720e6087e6cf588cec7/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac6645c2204837ec30ff720e6087e6cf588cec7/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=aac6645c2204837ec30ff720e6087e6cf588cec7", "patch": "@@ -30,6 +30,9 @@ along with GCC; see the file COPYING3.  If not see\n /* Target CPU versions for D.  */\n #define TARGET_D_CPU_VERSIONS sparc_d_target_versions\n \n+/* Target CPU info for Rust.  */\n+#define TARGET_RUST_CPU_INFO sparc_rust_target_cpu_info\n+\n /* Specify this in a cover file to provide bi-architecture (32/64) support.  */\n /* #define SPARC_BI_ARCH */\n "}, {"sha": "33bc02f68020a3d1594bae4c2ee0ecad2dadb02f", "filename": "gcc/config/sparc/t-sparc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac6645c2204837ec30ff720e6087e6cf588cec7/gcc%2Fconfig%2Fsparc%2Ft-sparc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac6645c2204837ec30ff720e6087e6cf588cec7/gcc%2Fconfig%2Fsparc%2Ft-sparc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ft-sparc?ref=aac6645c2204837ec30ff720e6087e6cf588cec7", "patch": "@@ -27,3 +27,7 @@ sparc-c.o: $(srcdir)/config/sparc/sparc-c.c\n sparc-d.o: $(srcdir)/config/sparc/sparc-d.c\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n+\n+sparc-rust.o: $(srcdir)/config/sparc/sparc-rust.c \\\n+  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}]}