{"sha": "f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRkYmY5MzZjNzdiNjM4YzNlNjFhMjJjYmM0ZjQ1ZjhhZTBjMGQ4Nw==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2003-08-01T23:07:04Z"}, "committer": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2003-08-01T23:07:04Z"}, "message": "fixfixes.c, [...]: ANSIfy function prototypes and defintions.\n\n\t* fixinc/fixfixes.c, fixinc/fixlib.c, fixinc/fixlib.h,\n\tfixinc/fixtests.c, fixinc/procopen.c, fixinc/server.c,\n\tfixinc/server.h, fixinc/fixincl.c: ANSIfy function prototypes\n\tand defintions.\n\nAdd missed (?!) ChangeLog entry from previous commit earlier today:\n\t* fixinc/inclhack.def (broken_cabs): Make matching more generous.\n\t* fixinc/fixincl.x: Regenerate.\n\t* fixinc/tests/base/math.h: Regenerate to match test_text change.\n\nFrom-SVN: r70078", "tree": {"sha": "f06e481c77f0e34114e323d2ed676853d80a181b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f06e481c77f0e34114e323d2ed676853d80a181b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87/comments", "author": null, "committer": null, "parents": [{"sha": "c76becbdce5b2e59546bd576dc72326801d1bda1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c76becbdce5b2e59546bd576dc72326801d1bda1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c76becbdce5b2e59546bd576dc72326801d1bda1"}], "stats": {"total": 247, "additions": 85, "deletions": 162}, "files": [{"sha": "3122423a9553fcd8078844a8c526dbd42feac938", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87", "patch": "@@ -1,3 +1,14 @@\n+2003-08-01  Nathanael Nerode  <neroden@gcc.gnu.org>\n+\n+\t* fixinc/fixfixes.c, fixinc/fixlib.c, fixinc/fixlib.h,\n+\tfixinc/fixtests.c, fixinc/procopen.c, fixinc/server.c,\n+\tfixinc/server.h, fixinc/fixincl.c: ANSIfy function prototypes\n+\tand defintions.\n+\n+\t* fixinc/inclhack.def (broken_cabs): Make matching more generous.\n+\t* fixinc/fixincl.x: Regenerate.\n+\t* fixinc/tests/base/math.h: Regenerate to match test_text change.\n+\n 2003-08-01  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* ggc-common.c (gt_pch_restore): Case MAP_FAILED to void *."}, {"sha": "a8901ffdf0f865ab491d540d6c470d73fd9cb1d8", "filename": "gcc/fixinc/fixfixes.c", "status": "modified", "additions": 10, "deletions": 25, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87/gcc%2Ffixinc%2Ffixfixes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87/gcc%2Ffixinc%2Ffixfixes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixfixes.c?ref=f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87", "patch": "@@ -59,7 +59,7 @@ Boston, MA 02111-1307, USA.  */\n \n tSCC zNeedsArg[] = \"fixincl error:  `%s' needs %s argument (c_fix_arg[%d])\\n\";\n \n-typedef void t_fix_proc PARAMS ((const char *, const char *, tFixDesc *));\n+typedef void t_fix_proc (const char *, const char *, tFixDesc *) ;\n typedef struct {\n     const char*  fix_name;\n     t_fix_proc*  fix_proc;\n@@ -74,12 +74,10 @@ typedef struct {\n   _FT_( \"gnu_type\",         gnu_type_fix )\n \n \n-#define FIX_PROC_HEAD( fix )\t\t\t\t\t\t\\\n-static void fix PARAMS ((const char *, const char *, tFixDesc *));\t\\\n-static void fix ( filname, text, p_fixd )\t\t\t\t\\\n-    const char* filname ATTRIBUTE_UNUSED;\t\t\t\t\\\n-    const char* text ATTRIBUTE_UNUSED;\t\t\t\t\t\\\n-    tFixDesc* p_fixd ATTRIBUTE_UNUSED;\n+#define FIX_PROC_HEAD( fix )\t\\\n+static void fix (const char* filname ATTRIBUTE_UNUSED , \\\n+                 const char* text ATTRIBUTE_UNUSED , \\\n+                 tFixDesc* p_fixd ATTRIBUTE_UNUSED )\n \n #ifdef NEED_PRINT_QUOTE\n /*\n@@ -89,9 +87,7 @@ static void fix ( filname, text, p_fixd )\t\t\t\t\\\n  *  We are not doing a correctness syntax check here.\n  */\n static char*\n-print_quote( q, text )\n-  char  q;\n-  char* text;\n+print_quote(char q, char* text )\n {\n   fputc( q, stdout );\n \n@@ -131,11 +127,8 @@ print_quote( q, text )\n  *  this thing can be encountered countless times during a compile\n  *  and not cause even a warning.\n  */\n-static const char *emit_gnu_type PARAMS ((const char *, regmatch_t *));\n static const char*\n-emit_gnu_type ( text, rm )\n-  const char* text;\n-  regmatch_t* rm;\n+emit_gnu_type (const char* text, regmatch_t* rm )\n {\n   char z_TYPE[ 64 ];\n   char z_type[ 64 ];\n@@ -182,12 +175,8 @@ typedef __%s_TYPE__ %s_t;\\n\\\n  *  '%' characters in other contexts and all other characters are\n  *  copied out verbatim.\n  */\n-static void format_write PARAMS ((tCC *, tCC *, regmatch_t[]));\n static void\n-format_write (format, text, av)\n-     tCC* format;\n-     tCC* text;\n-     regmatch_t av[];\n+format_write (tCC* format, tCC* text, regmatch_t av[] )\n {\n   int c;\n \n@@ -710,9 +699,7 @@ FIX_PROC_HEAD( gnu_type_fix )\n \n */\n void\n-apply_fix( p_fixd, filname )\n-  tFixDesc* p_fixd;\n-  tCC* filname;\n+apply_fix( tFixDesc* p_fixd, tCC* filname )\n {\n #define _FT_(n,p) { n, p },\n   static fix_entry_t fix_table[] = { FIXUP_TABLE { NULL, NULL }};\n@@ -748,9 +735,7 @@ tSCC z_reopen[] =\n \"FS error %d (%s) reopening %s as std%s\\n\";\n \n int\n-main( argc, argv )\n-  int     argc;\n-  char**  argv;\n+main( int argc, char** argv )\n {\n   tFixDesc* pFix;\n   char* pz_tmptmp;"}, {"sha": "2d24c17237cef90ef10964f1836c6d7f41d4f6e0", "filename": "gcc/fixinc/fixincl.c", "status": "modified", "additions": 31, "deletions": 63, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87/gcc%2Ffixinc%2Ffixincl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87/gcc%2Ffixinc%2Ffixincl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.c?ref=f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87", "patch": "@@ -94,11 +94,11 @@ const char incl_quote_pat[] = \"^[ \\t]*#[ \\t]*include[ \\t]*\\\"[^/]\";\n tSCC z_fork_err[] = \"Error %d (%s) starting filter process for %s\\n\";\n regex_t incl_quote_re;\n \n-static void do_version   PARAMS((void)) ATTRIBUTE_NORETURN;\n-char *load_file   PARAMS((const char *));\n-void run_compiles PARAMS((void));\n-void initialize   PARAMS((int argc,char** argv));\n-void process      PARAMS((void));\n+static void do_version (void) ATTRIBUTE_NORETURN;\n+char *load_file (const char *);\n+void run_compiles (void);\n+void initialize (int argc, char** argv);\n+void process (void);\n \n /*  External Source Code */\n \n@@ -108,11 +108,9 @@ void process      PARAMS((void));\n  *\n  *  MAIN ROUTINE\n  */\n-extern int main PARAMS ((int, char **));\n+extern int main (int, char **);\n int\n-main (argc, argv)\n-     int argc;\n-     char **argv;\n+main (int argc, char** argv)\n {\n   char *file_name_buf;\n \n@@ -191,7 +189,7 @@ Altering  %5d of them\\n\";\n \n \n static void\n-do_version ()\n+do_version (void)\n {\n   static const char zFmt[] = \"echo '%s'\";\n   char zBuf[ 1024 ];\n@@ -214,9 +212,7 @@ do_version ()\n /* * * * * * * * * * * * */\n \n void\n-initialize ( argc, argv )\n-  int argc;\n-  char** argv;\n+initialize ( int argc, char** argv )\n {\n   static const char var_not_found[] =\n #ifndef __STDC__\n@@ -335,8 +331,7 @@ ENV_TABLE\n    result is the NUL terminated contents of the file.  The file\n    is presumed to be an ASCII text file containing no NULs.  */\n char *\n-load_file ( fname )\n-    const char* fname;\n+load_file ( const char* fname )\n {\n   struct stat stbf;\n   char* res;\n@@ -389,10 +384,8 @@ load_file ( fname )\n   return res;\n }\n \n-static int machine_matches PARAMS ((tFixDesc *));\n static int\n-machine_matches( p_fixd )\n-  tFixDesc *p_fixd;\n+machine_matches( tFixDesc* p_fixd )\n         {\n # ifndef SEPARATE_FIX_PROC\n           tSCC case_fmt[] = \"case %s in\\n\";     /*  9 bytes, plus string */\n@@ -484,7 +477,7 @@ machine_matches( p_fixd )\n    run_compiles   run all the regexp compiles for all the fixes once.\n    */\n void\n-run_compiles ()\n+run_compiles (void)\n {\n   tFixDesc *p_fixd = fixDescList;\n   int fix_ct = FIX_COUNT;\n@@ -561,9 +554,8 @@ run_compiles ()\n #endif\n \n \n-static FILE *create_file PARAMS ((void));\n static FILE *\n-create_file ()\n+create_file (void)\n {\n   int fd;\n   FILE *pf;\n@@ -626,11 +618,8 @@ create_file ()\n   Result: APPLY_FIX or SKIP_FIX, depending on the result of the\n           shell script we run.  */\n #ifndef SEPARATE_FIX_PROC\n-static int test_test PARAMS ((tTestDesc *, char *));\n static int\n-test_test (p_test, pz_test_file)\n-     tTestDesc *p_test;\n-     char*      pz_test_file;\n+test_test (tTestDesc* p_test, char* pz_test_file)\n {\n   tSCC cmd_fmt[] =\n \"file=%s\\n\\\n@@ -682,11 +671,8 @@ fi\";\n   The caller may choose to reverse meaning if the sense of the test\n   is inverted.  */\n \n-static int egrep_test PARAMS ((char *, tTestDesc *));\n static int\n-egrep_test (pz_data, p_test)\n-     char *pz_data;\n-     tTestDesc *p_test;\n+egrep_test (char* pz_data, tTestDesc* p_test)\n {\n #ifdef DEBUG\n   if (p_test->p_test_regex == 0)\n@@ -705,12 +691,10 @@ egrep_test (pz_data, p_test)\n   the file name.  If we emit the name, our invoking shell will try\n   to copy a non-existing file into the destination directory.  */\n \n-static int quoted_file_exists PARAMS ((const char *, const char *, const char *));\n static int\n-quoted_file_exists (pz_src_path, pz_file_path, pz_file)\n-     const char *pz_src_path;\n-     const char *pz_file_path;\n-     const char *pz_file;\n+quoted_file_exists (const char* pz_src_path,\n+                    const char* pz_file_path, \n+                    const char* pz_file)\n {\n   char z[ MAXPATHLEN ];\n   char* pz;\n@@ -757,12 +741,10 @@ quoted_file_exists (pz_src_path, pz_file_path, pz_file)\n            for interpretation by the invoking shell  */\n \n \n-static void extract_quoted_files PARAMS ((char *, const char *, regmatch_t *));\n static void\n-extract_quoted_files (pz_data, pz_fixed_file, p_re_match)\n-     char *pz_data;\n-     const char *pz_fixed_file;\n-     regmatch_t *p_re_match;\n+extract_quoted_files (char* pz_data, \n+                      const char* pz_fixed_file,\n+                      regmatch_t* p_re_match)\n {\n   char *pz_dir_end = strrchr (pz_fixed_file, '/');\n   char *pz_incl_quot = pz_data;\n@@ -819,11 +801,8 @@ extract_quoted_files (pz_data, pz_fixed_file, p_re_match)\n     Somebody wrote a *_fix subroutine that we must call.\n     */\n #ifndef SEPARATE_FIX_PROC\n-static int internal_fix PARAMS ((int, tFixDesc *));\n static int\n-internal_fix (read_fd, p_fixd)\n-  int read_fd;\n-  tFixDesc* p_fixd;\n+internal_fix (int read_fd, tFixDesc* p_fixd)\n {\n   int fd[2];\n \n@@ -890,11 +869,10 @@ internal_fix (read_fd, p_fixd)\n \n #ifdef SEPARATE_FIX_PROC\n static void\n-fix_with_system (p_fixd, pz_fix_file, pz_file_source, pz_temp_file)\n-  tFixDesc* p_fixd;\n-  tCC* pz_fix_file;\n-  tCC* pz_file_source;\n-  tCC* pz_temp_file;\n+fix_with_system (tFixDesc* p_fixd,\n+                 tCC* pz_fix_file,\n+                 tCC* pz_file_source,\n+                 tCC* pz_temp_file)\n {\n   char*  pz_cmd;\n   char*  pz_scan;\n@@ -1040,12 +1018,8 @@ fix_with_system (p_fixd, pz_fix_file, pz_file_source, pz_temp_file)\n     for stdout.  */\n \n #else /* is *NOT* SEPARATE_FIX_PROC */\n-static int start_fixer PARAMS ((int, tFixDesc *, char *));\n static int\n-start_fixer (read_fd, p_fixd, pz_fix_file)\n-  int read_fd;\n-  tFixDesc* p_fixd;\n-  char* pz_fix_file;\n+start_fixer (int read_fd, tFixDesc* p_fixd, char* pz_fix_file)\n {\n   tCC* pz_cmd_save;\n   char* pz_cmd;\n@@ -1114,10 +1088,8 @@ start_fixer (read_fd, p_fixd, pz_fix_file)\n    Input:  the original text of the file and the file's name\n    Result: none.  A new file may or may not be created.  */\n \n-static t_bool fix_applies PARAMS ((tFixDesc *));\n static t_bool\n-fix_applies (p_fixd)\n-  tFixDesc *p_fixd;\n+fix_applies (tFixDesc* p_fixd)\n {\n   const char *pz_fname = pz_curr_file;\n   const char *pz_scan = p_fixd->file_list;\n@@ -1229,10 +1201,8 @@ fix_applies (p_fixd)\n \n    Write out a replacement file  */\n \n-static void write_replacement PARAMS ((tFixDesc *));\n static void\n-write_replacement (p_fixd)\n-  tFixDesc *p_fixd;\n+write_replacement (tFixDesc* p_fixd)\n {\n    const char* pz_text = p_fixd->patch_args[0];\n \n@@ -1256,10 +1226,8 @@ write_replacement (p_fixd)\n     the matched text and then copy any remaining data from the\n     output of the filter chain.\n     */\n-static void test_for_changes PARAMS ((int));\n static void\n-test_for_changes (read_fd)\n-  int read_fd;\n+test_for_changes (int read_fd)\n {\n   FILE *in_fp = fdopen (read_fd, \"r\");\n   FILE *out_fp = (FILE *) NULL;\n@@ -1330,7 +1298,7 @@ test_for_changes (read_fd)\n    Result: none.  A new file may or may not be created.  */\n \n void\n-process ()\n+process (void)\n {\n   tFixDesc *p_fixd = fixDescList;\n   int todo_ct = FIX_COUNT;"}, {"sha": "99d04cc5531e630198de2b986419176868c7a134", "filename": "gcc/fixinc/fixlib.c", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87/gcc%2Ffixinc%2Ffixlib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87/gcc%2Ffixinc%2Ffixlib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixlib.c?ref=f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87", "patch": "@@ -32,8 +32,7 @@ Boston, MA 02111-1307, USA.  */\n    is presumed to be an ASCII text file containing no NULs.  */\n \n char *\n-load_file_data (fp)\n-     FILE* fp;\n+load_file_data (FILE* fp)\n {\n   char *pz_data = (char*)NULL;\n   int    space_left = -1;  /* allow for terminating NUL */\n@@ -81,9 +80,7 @@ load_file_data (fp)\n \n #ifdef IS_CXX_HEADER_NEEDED\n t_bool\n-is_cxx_header (fname, text)\n-     tCC *fname;\n-     tCC *text;\n+is_cxx_header (tCC* fname, tCC* text)\n {\n   /*  First, check to see if the file is in a C++ directory */\n   for (;;)\n@@ -147,9 +144,7 @@ template[ \\t]*<|\\\n  *  We are not doing a correctness syntax check here.\n  */\n tCC*\n-skip_quote( q, text )\n-  char  q;\n-  char* text;\n+skip_quote(char q, char* text )\n {\n   for (;;)\n     {\n@@ -188,12 +183,7 @@ skip_quote( q, text )\n    REG_EXTENDED|REG_NEWLINE produces identical regex syntax/semantics\n    to egrep (verified from 4.4BSD Programmer's Reference Manual).  */\n void\n-compile_re( pat, re, match, e1, e2 )\n-     tCC *pat;\n-     regex_t *re;\n-     int match;\n-     tCC *e1;\n-     tCC *e2;\n+compile_re( tCC* pat, regex_t* re, int match, tCC* e1, tCC* e2 )\n {\n   tSCC z_bad_comp[] = \"fixincl ERROR:  cannot compile %s regex for %s\\n\\\n \\texpr = `%s'\\n\\terror %s\\n\";\n@@ -228,10 +218,7 @@ static regex_t mn_name_re;\n static int mn_compiled = 0;\n \n void\n-mn_get_regexps( label_re, name_re, who )\n-     regex_t **label_re;\n-     regex_t **name_re;\n-     tCC *who;\n+mn_get_regexps(regex_t** label_re, regex_t** name_re, tCC* who )\n {\n   if (! mn_compiled)\n     {\n@@ -248,10 +235,7 @@ mn_get_regexps( label_re, name_re, who )\n #ifdef SEPARATE_FIX_PROC\n \n char*\n-make_raw_shell_str( pz_d, pz_s, smax )\n-  char*       pz_d;\n-  tCC*        pz_s;\n-  size_t      smax;\n+make_raw_shell_str( char* pz_d, tCC* pz_s, size_t smax )\n {\n   tSCC zQ[] = \"'\\\\''\";\n   size_t     dtaSize;"}, {"sha": "25e97d48ba13470e67759b7f9f3018ae69fd8a9f", "filename": "gcc/fixinc/fixlib.h", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87/gcc%2Ffixinc%2Ffixlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87/gcc%2Ffixinc%2Ffixlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixlib.h?ref=f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87", "patch": "@@ -199,31 +199,27 @@ extern int gnu_type_map_ct;\n /*\n  *  Exported procedures\n  */\n-char * load_file_data PARAMS(( FILE* fp ));\n+char * load_file_data ( FILE* fp );\n \n #ifdef IS_CXX_HEADER_NEEDED\n-t_bool is_cxx_header  PARAMS(( tCC* filename, tCC* filetext ));\n+t_bool is_cxx_header ( tCC* filename, tCC* filetext );\n #endif /* IS_CXX_HEADER_NEEDED */\n \n #ifdef SKIP_QUOTE_NEEDED\n-tCC*   skip_quote  PARAMS(( char  q, char* text ));\n+tCC*   skip_quote ( char  q, char* text );\n #endif\n \n-void   compile_re  PARAMS(( tCC* pat, regex_t* re, int match,\n-                            tCC *e1, tCC *e2 ));\n+void   compile_re ( tCC* pat, regex_t* re, int match, tCC *e1, tCC *e2 );\n \n-void   apply_fix   PARAMS(( tFixDesc* p_fixd, tCC* filname ));\n+void   apply_fix ( tFixDesc* p_fixd, tCC* filname );\n apply_fix_p_t\n-       run_test    PARAMS(( tCC* t_name, tCC* f_name, tCC* text ));\n+       run_test ( tCC* t_name, tCC* f_name, tCC* text );\n \n #ifdef SEPARATE_FIX_PROC\n-char*  make_raw_shell_str\n-                   PARAMS(( char* pz_d, tCC* pz_s, size_t smax ));\n+char*  make_raw_shell_str ( char* pz_d, tCC* pz_s, size_t smax );\n #endif\n \n #ifdef MN_NAME_PAT\n-void   mn_get_regexps\n-                   PARAMS(( regex_t** label_re, regex_t** name_re,\n-                            tCC *who ));\n+void   mn_get_regexps ( regex_t** label_re, regex_t** name_re, tCC *who );\n #endif\n #endif /* ! GCC_FIXLIB_H */"}, {"sha": "33ea65208f98265d231087616b69ce27bfa82e32", "filename": "gcc/fixinc/fixtests.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87/gcc%2Ffixinc%2Ffixtests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87/gcc%2Ffixinc%2Ffixtests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixtests.c?ref=f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87", "patch": "@@ -51,7 +51,7 @@ Boston, MA 02111-1307, USA.  */\n ENV_TABLE\n #undef _ENV_\n \n-typedef apply_fix_p_t t_test_proc PARAMS(( tCC* file, tCC* text ));\n+typedef apply_fix_p_t t_test_proc ( tCC* file, tCC* text );\n \n typedef struct {\n     tCC*         test_name;\n@@ -62,12 +62,9 @@ typedef struct {\n   _FT_( \"machine_name\",     machine_name_test )\t\t\t\t\\\n   _FT_( \"stdc_0_in_system_headers\",    stdc_0_in_system_headers_test )\n \n-#define TEST_FOR_FIX_PROC_HEAD( test )\t\t\t\t\\\n-static apply_fix_p_t test PARAMS(( tCC* file, tCC* text ));\t\\\n-static apply_fix_p_t test ( fname, text )\t\t\t\\\n-    tCC* fname ATTRIBUTE_UNUSED;\t\t\t\t\\\n-    tCC* text ATTRIBUTE_UNUSED;\n-\n+#define TEST_FOR_FIX_PROC_HEAD( test ) \\\n+static apply_fix_p_t test ( tCC* fname ATTRIBUTE_UNUSED, \\\n+                            tCC* text  ATTRIBUTE_UNUSED )\n \n TEST_FOR_FIX_PROC_HEAD( machine_name_test )\n {\n@@ -139,10 +136,7 @@ TEST_FOR_FIX_PROC_HEAD( stdc_0_in_system_headers_test )\n \n */\n apply_fix_p_t\n-run_test( tname, fname, text )\n-  tCC* tname;\n-  tCC* fname;\n-  tCC* text;\n+run_test( tCC* tname, tCC* fname, tCC* text )\n {\n #define _FT_(n,p) { n, p },\n   static test_entry_t test_table[] = { FIX_TEST_TABLE { NULL, NULL }};"}, {"sha": "6fdb24fec7e00cbe974f7bb00be3851098f3f0d6", "filename": "gcc/fixinc/procopen.c", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87/gcc%2Ffixinc%2Fprocopen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87/gcc%2Ffixinc%2Fprocopen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fprocopen.c?ref=f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87", "patch": "@@ -62,10 +62,7 @@ STATIC const char* def_args[] =\n  *  to store the child's process id.\n  */\n int\n-chain_open (stdin_fd, pp_args, p_child)\n-     int stdin_fd;\n-     tCC **pp_args;\n-     pid_t *p_child;\n+chain_open (int stdin_fd, tCC** pp_args, pid_t* p_child)\n {\n   t_fd_pair stdout_pair;\n   pid_t ch_id;\n@@ -182,9 +179,7 @@ chain_open (stdin_fd, pp_args, p_child)\n  *  The return value is the process id of the created process.\n  */\n pid_t\n-proc2_open (p_pair, pp_args)\n-     t_fd_pair *p_pair;\n-     tCC **pp_args;\n+proc2_open (t_fd_pair* p_pair, tCC** pp_args)\n {\n   pid_t ch_id;\n \n@@ -209,9 +204,7 @@ proc2_open (p_pair, pp_args)\n  *  \"fdopen(3)\"-ed into file pointers instead.\n  */\n pid_t\n-proc2_fopen (pf_pair, pp_args)\n-     t_pf_pair *pf_pair;\n-     tCC **pp_args;\n+proc2_fopen (t_pf_pair* pf_pair, tCC** pp_args)\n {\n   t_fd_pair fd_pair;\n   pid_t ch_id = proc2_open (&fd_pair, pp_args);"}, {"sha": "902fda1507264bdc0b17354d88ce1773722ab071", "filename": "gcc/fixinc/server.c", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87/gcc%2Ffixinc%2Fserver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87/gcc%2Ffixinc%2Fserver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fserver.c?ref=f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87", "patch": "@@ -73,10 +73,8 @@ tSCC* p_cur_dir = (char *) NULL;\n  *  The read data are stored in a malloc-ed string that is truncated\n  *  to size at the end.  Input is assumed to be an ASCII string.\n  */\n-static char *load_data PARAMS ((FILE *));\n static char *\n-load_data (fp)\n-     FILE *fp;\n+load_data (FILE* fp)\n {\n   char *pz_text;\n   size_t text_size;\n@@ -137,7 +135,7 @@ load_data (fp)\n  *  pipes to it and from it, finally NULL out the file pointers\n  */\n void\n-close_server ()\n+close_server (void)\n {\n   if (  (server_id != NULLPROCESS)\n      && (server_master_pid == getpid ()))\n@@ -157,10 +155,8 @@ close_server ()\n  *  to our server, and also that if the server dies, we do not\n  *  die from a sigpipe problem.\n  */\n-static void sig_handler PARAMS ((int));\n static void\n-sig_handler (signo)\n-     int signo ATTRIBUTE_UNUSED;\n+sig_handler (int signo ATTRIBUTE_UNUSED)\n {\n #ifdef DEBUG\n   /* FIXME: this is illegal to do in a signal handler.  */\n@@ -178,9 +174,8 @@ sig_handler (signo)\n  *  Also establishes the current directory to give to the\n  *  server process at the start of every server command.\n  */\n-static void server_setup PARAMS ((void));\n static void\n-server_setup ()\n+server_setup (void)\n {\n   static int atexit_done = 0;\n   char buff [MAXPATHLEN + 1];\n@@ -213,9 +208,8 @@ server_setup ()\n  *  override with $CONFIG_SHELL, so we do the same.\n  */\n \n-static const char *find_shell PARAMS ((void));\n static const char *\n-find_shell ()\n+find_shell (void)\n {\n   char * shell = getenv (\"CONFIG_SHELL\");\n   if (shell)\n@@ -245,8 +239,7 @@ find_shell ()\n  *     \"ShElL-OuTpUt-HaS-bEeN-cOmPlEtEd\"\n  */\n char *\n-run_shell (pz_cmd)\n-     const char *pz_cmd;\n+run_shell (const char* pz_cmd)\n {\n   tSCC zNoServer[] = \"Server not running, cannot run:\\n%s\\n\\n\";\n   t_bool retry = BOOL_TRUE;"}, {"sha": "30de054e411bfaf68004faf955fa6215ba0a5674", "filename": "gcc/fixinc/server.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87/gcc%2Ffixinc%2Fserver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87/gcc%2Ffixinc%2Fserver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fserver.h?ref=f4dbf936c77b638c3e61a22cbc4f45f8ae0c0d87", "patch": "@@ -65,11 +65,10 @@ typedef struct\n   FILE *pf_write;\t\t/* parent write fp */\n } t_pf_pair;\n \n-char *run_shell   PARAMS (( const char *pzCmd));\n-pid_t proc2_fopen PARAMS (( t_pf_pair * p_pair, tCC ** pp_args));\n-pid_t proc2_open  PARAMS (( t_fd_pair * p_pair, tCC ** pp_args));\n-int   chain_open  PARAMS (( int in_fd, tCC ** pp_args,\n-                            pid_t * p_child));\n-void close_server PARAMS (( void ));\n+char* run_shell( const char* pzCmd );\n+pid_t proc2_fopen( t_pf_pair* p_pair, tCC** pp_args );\n+pid_t proc2_open( t_fd_pair* p_pair, tCC** pp_args );\n+int   chain_open( int in_fd, tCC** pp_args, pid_t* p_child );\n+void close_server( void );\n \n #endif /* ! GCC_SERVER_H */"}]}