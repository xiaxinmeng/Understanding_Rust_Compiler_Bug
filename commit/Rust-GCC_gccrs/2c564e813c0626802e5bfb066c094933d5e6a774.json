{"sha": "2c564e813c0626802e5bfb066c094933d5e6a774", "node_id": "C_kwDOANBUbNoAKDJjNTY0ZTgxM2MwNjI2ODAyZTViZmIwNjZjMDk0OTMzZDVlNmE3NzQ", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-15T13:49:21Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-15T17:26:53Z"}, "message": "libstdc++: Make non-propagating-cache fully constexpr [PR101263]\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/101263\n\t* include/std/ranges (__cached): New wrapper struct.\n\t(__non_propagating_cache): Use __cached for contained value.\n\t(__non_propagating_cache::_M_emplace_deref): Add constexpr. Use\n\tstd::construct_at instead of placement new.\n\t* testsuite/std/ranges/adaptors/join.cc: Check constexpr works.", "tree": {"sha": "e295fdfa0a8b4f083c8ad86dbde42484747a0ea6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e295fdfa0a8b4f083c8ad86dbde42484747a0ea6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c564e813c0626802e5bfb066c094933d5e6a774", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c564e813c0626802e5bfb066c094933d5e6a774", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c564e813c0626802e5bfb066c094933d5e6a774", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c564e813c0626802e5bfb066c094933d5e6a774/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad820b0bb5f8342a8db2831d1f15c103583a3ba0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad820b0bb5f8342a8db2831d1f15c103583a3ba0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad820b0bb5f8342a8db2831d1f15c103583a3ba0"}], "stats": {"total": 55, "additions": 46, "deletions": 9}, "files": [{"sha": "b8de400dfbbcb7e0cc9218228c2cb2115799a6fb", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c564e813c0626802e5bfb066c094933d5e6a774/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c564e813c0626802e5bfb066c094933d5e6a774/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=2c564e813c0626802e5bfb066c094933d5e6a774", "patch": "@@ -1159,9 +1159,34 @@ namespace views::__adaptor\n \t// (such as join_view::_M_inner).\n       };\n \n+    template<typename _Tp>\n+      struct __cached\n+      {\n+\tstruct _Deref_t { };\n+\tstatic constexpr _Deref_t __deref{};\n+\n+\t// Initialize _M_t directly from the result of dereferencing __i.\n+\t// This avoids any unwanted temporary materialization that would\n+\t// occur if *__i was bound to a reference before initializing _M_t.\n+\ttemplate<typename _Iter>\n+\t  constexpr explicit\n+\t  __cached(_Deref_t, _Iter&& __i)\n+\t  : _M_t(*__i)\n+\t  { }\n+\n+\ttemplate<typename... _Args>\n+\t  constexpr explicit\n+\t  __cached(_Args&&... __args)\n+\t  : _M_t(std::forward<_Args>(__args)...)\n+\t  { }\n+\n+\t_Tp _M_t;\n+      };\n+\n     template<typename _Tp>\n       requires is_object_v<_Tp>\n-      struct __non_propagating_cache<_Tp> : protected _Optional_base<_Tp>\n+      struct __non_propagating_cache<_Tp>\n+      : protected _Optional_base<__cached<_Tp>>\n       {\n \t__non_propagating_cache() = default;\n \n@@ -1205,23 +1230,22 @@ namespace views::__adaptor\n \n \tconstexpr _Tp&\n \toperator*() noexcept\n-\t{ return this->_M_get(); }\n+\t{ return this->_M_get()._M_t; }\n \n \tconstexpr const _Tp&\n \toperator*() const noexcept\n-\t{ return this->_M_get(); }\n+\t{ return this->_M_get()._M_t; }\n \n \ttemplate<typename _Iter>\n-\t  _Tp&\n+\t  constexpr _Tp&\n \t  _M_emplace_deref(const _Iter& __i)\n \t  {\n \t    this->_M_reset();\n-\t    // Using _Optional_base::_M_construct to initialize from '*__i'\n-\t    // would incur an extra move due to the indirection, so we instead\n-\t    // use placement new directly.\n-\t    ::new ((void *) std::__addressof(this->_M_payload._M_payload)) _Tp(*__i);\n+\t    // Use the special constructor of __cached<_Tp> that does *__i.\n+\t    std::construct_at(std::__addressof(this->_M_payload._M_payload),\n+\t\t\t      std::in_place, __cached<_Tp>::__deref, __i);\n \t    this->_M_payload._M_engaged = true;\n-\t    return this->_M_get();\n+\t    return **this;\n \t  }\n       };\n "}, {"sha": "1ec42381ad2ed669224341fc52e9c515a032041d", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/join.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c564e813c0626802e5bfb066c094933d5e6a774/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fjoin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c564e813c0626802e5bfb066c094933d5e6a774/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fjoin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fjoin.cc?ref=2c564e813c0626802e5bfb066c094933d5e6a774", "patch": "@@ -193,6 +193,18 @@ test11()\n     ;\n }\n \n+void\n+test12()\n+{\n+  // PR libstdc++/101263\n+  constexpr auto b = [] {\n+    auto r = std::views::iota(0, 5)\n+      | std::views::lazy_split(0)\n+      | std::views::join;\n+    return r.begin() != r.end();\n+  }();\n+}\n+\n int\n main()\n {\n@@ -207,4 +219,5 @@ main()\n   test09();\n   test10();\n   test11();\n+  test12();\n }"}]}