{"sha": "9a171fcd88071fae1b38a1832c47219f0997b71d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWExNzFmY2Q4ODA3MWZhZTFiMzhhMTgzMmM0NzIxOWYwOTk3YjcxZA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2002-05-30T12:07:10Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2002-05-30T12:07:10Z"}, "message": "rs6000.c (rs6000_expand_unop_builtin): Return const0_rtx instead of NULL_RTX when in error.\n\n2002-05-30  Aldy Hernandez  <aldyh@redhat.com>\n\n        * config/rs6000/rs6000.c (rs6000_expand_unop_builtin): Return\n        const0_rtx instead of NULL_RTX when in error.\n        (altivec_expand_abs_builtin): Same.\n        (rs6000_expand_binop_builtin): Same.\n        (altivec_expand_predicate_builtin): Same.\n        (altivec_expand_stv_builtin): Same.\n        (rs6000_expand_ternop_builtin): Same.\n        (altivec_expand_builtin): Same.\n\nFrom-SVN: r54054", "tree": {"sha": "9919662268d05a76fe35e3829c706264914d69a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9919662268d05a76fe35e3829c706264914d69a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a171fcd88071fae1b38a1832c47219f0997b71d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a171fcd88071fae1b38a1832c47219f0997b71d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a171fcd88071fae1b38a1832c47219f0997b71d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a171fcd88071fae1b38a1832c47219f0997b71d/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "62a35e6088788bae63480d381be74e5493e39df4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62a35e6088788bae63480d381be74e5493e39df4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62a35e6088788bae63480d381be74e5493e39df4"}], "stats": {"total": 39, "additions": 25, "deletions": 14}, "files": [{"sha": "655842206bd5ac018354a8374d1d9cf01c4613cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a171fcd88071fae1b38a1832c47219f0997b71d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a171fcd88071fae1b38a1832c47219f0997b71d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a171fcd88071fae1b38a1832c47219f0997b71d", "patch": "@@ -1,3 +1,14 @@\n+2002-05-30  Aldy Hernandez  <aldyh@redhat.com>\n+\n+        * config/rs6000/rs6000.c (rs6000_expand_unop_builtin): Return\n+        const0_rtx instead of NULL_RTX when in error.\n+        (altivec_expand_abs_builtin): Same.\n+        (rs6000_expand_binop_builtin): Same.\n+        (altivec_expand_predicate_builtin): Same.\n+        (altivec_expand_stv_builtin): Same.\n+        (rs6000_expand_ternop_builtin): Same.\n+        (altivec_expand_builtin): Same.\n+\n 2002-05-29  David S. Miller  <davem@redhat.com>\n \n \t* rtl.h (clear_emit_caches): Delete."}, {"sha": "350c4f939e3437b78e5046cff2dc7e4cb6c96797", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a171fcd88071fae1b38a1832c47219f0997b71d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a171fcd88071fae1b38a1832c47219f0997b71d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=9a171fcd88071fae1b38a1832c47219f0997b71d", "patch": "@@ -3580,7 +3580,7 @@ rs6000_expand_unop_builtin (icode, arglist, target)\n \n   /* If we got invalid arguments bail out before generating bad rtl.  */\n   if (arg0 == error_mark_node)\n-    return NULL_RTX;\n+    return const0_rtx;\n \n   switch (icode)\n     {\n@@ -3593,7 +3593,7 @@ rs6000_expand_unop_builtin (icode, arglist, target)\n \t  || INTVAL (op0) < -0x1f)\n \t{\n \t  error (\"argument 1 must be a 5-bit signed literal\");\n-\t  return NULL_RTX;\n+\t  return const0_rtx;\n \t}\n       break;\n     default:\n@@ -3630,7 +3630,7 @@ altivec_expand_abs_builtin (icode, arglist, target)\n \n   /* If we have invalid arguments, bail out before generating bad rtl.  */\n   if (arg0 == error_mark_node)\n-    return NULL_RTX;\n+    return const0_rtx;\n \n   if (target == 0\n       || GET_MODE (target) != tmode\n@@ -3668,7 +3668,7 @@ rs6000_expand_binop_builtin (icode, arglist, target)\n \n   /* If we got invalid arguments bail out before generating bad rtl.  */\n   if (arg0 == error_mark_node || arg1 == error_mark_node)\n-    return NULL_RTX;\n+    return const0_rtx;\n \n   switch (icode)\n     {\n@@ -3684,7 +3684,7 @@ rs6000_expand_binop_builtin (icode, arglist, target)\n \t  || TREE_INT_CST_LOW (arg1) & ~0x1f)\n \t{\n \t  error (\"argument 2 must be a 5-bit unsigned literal\");\n-\t  return NULL_RTX;\n+\t  return const0_rtx;\n \t}\n       break;\n     default:\n@@ -3730,7 +3730,7 @@ altivec_expand_predicate_builtin (icode, opcode, arglist, target)\n   if (TREE_CODE (cr6_form) != INTEGER_CST)\n     {\n       error (\"argument 1 of __builtin_altivec_predicate must be a constant\");\n-      return NULL_RTX;\n+      return const0_rtx;\n     }\n   else\n     cr6_form_int = TREE_INT_CST_LOW (cr6_form);\n@@ -3740,7 +3740,7 @@ altivec_expand_predicate_builtin (icode, opcode, arglist, target)\n \n   /* If we have invalid arguments, bail out before generating bad rtl.  */\n   if (arg0 == error_mark_node || arg1 == error_mark_node)\n-    return NULL_RTX;\n+    return const0_rtx;\n \n   if (target == 0\n       || GET_MODE (target) != tmode\n@@ -3810,7 +3810,7 @@ altivec_expand_stv_builtin (icode, arglist)\n   if (arg0 == error_mark_node\n       || arg1 == error_mark_node\n       || arg2 == error_mark_node)\n-    return NULL_RTX;\n+    return const0_rtx;\n \n   if (! (*insn_data[icode].operand[2].predicate) (op0, mode2))\n     op0 = copy_to_mode_reg (mode2, op0);\n@@ -3847,7 +3847,7 @@ rs6000_expand_ternop_builtin (icode, arglist, target)\n   if (arg0 == error_mark_node\n       || arg1 == error_mark_node\n       || arg2 == error_mark_node)\n-    return NULL_RTX;\n+    return const0_rtx;\n \n   switch (icode)\n     {\n@@ -4104,7 +4104,7 @@ altivec_expand_builtin (exp, target, expandedp)\n \n       /* If we got invalid arguments bail out before generating bad rtl.  */\n       if (arg0 == error_mark_node)\n-\treturn NULL_RTX;\n+\treturn const0_rtx;\n \n       if (! (*insn_data[icode].operand[0].predicate) (op0, mode0))\n \top0 = copy_to_mode_reg (mode0, op0);\n@@ -4126,13 +4126,13 @@ altivec_expand_builtin (exp, target, expandedp)\n \n       /* If we got invalid arguments bail out before generating bad rtl.  */\n       if (arg0 == error_mark_node)\n-\treturn NULL_RTX;\n+\treturn const0_rtx;\n \n       if (TREE_CODE (arg0) != INTEGER_CST\n \t  || TREE_INT_CST_LOW (arg0) & ~0x3)\n \t{\n \t  error (\"argument to dss must be a 2-bit unsigned literal\");\n-\t  return NULL_RTX;\n+\t  return const0_rtx;\n \t}\n \n       if (! (*insn_data[icode].operand[0].predicate) (op0, mode0))\n@@ -4161,13 +4161,13 @@ altivec_expand_builtin (exp, target, expandedp)\n \tif (arg0 == error_mark_node\n \t    || arg1 == error_mark_node\n \t    || arg2 == error_mark_node)\n-\t  return NULL_RTX;\n+\t  return const0_rtx;\n \n       if (TREE_CODE (arg2) != INTEGER_CST\n \t  || TREE_INT_CST_LOW (arg2) & ~0x3)\n \t{\n \t  error (\"argument to `%s' must be a 2-bit unsigned literal\", d->name);\n-\t  return NULL_RTX;\n+\t  return const0_rtx;\n \t}\n \n \tif (! (*insn_data[d->icode].operand[0].predicate) (op0, mode0))"}]}