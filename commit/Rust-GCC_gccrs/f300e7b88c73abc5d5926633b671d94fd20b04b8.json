{"sha": "f300e7b88c73abc5d5926633b671d94fd20b04b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMwMGU3Yjg4YzczYWJjNWQ1OTI2NjMzYjY3MWQ5NGZkMjBiMDRiOA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-02-05T17:21:07Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-02-05T17:21:07Z"}, "message": "lto-cgraph.c (asm_nodes_output): Make global.\n\n\t* lto-cgraph.c (asm_nodes_output): Make global.\n\t* lto-wrapper.c (run_gcc): Pass down paralelizm to WPA.\n\t* gcc.c (AS_NEEDS_DASH_FOR_PIPED_INPUT): Allow WPA\n\tparameter\n\t(driver_handle_option): Handle OPT_fwpa.\n\n\t* lto.c (lto_parallelism): New static var.\n\t(do_stream_out, wait_for_child, stream_out): New static functions.\n\t(lto_wpa_write_files): Add support for parallel streaming.\n\t(do_whole_program_analysis): Set parallelism.\n\t* lang.opt (fwpa): Add parameter.\n\t* lto-lang.c (lto_handle_option): Handle flag_wpa.\n\t(lto_init): Update use of flag_wpa.\n\t* lto-streamer.h (asm_nodes_output): Declare.\n\nFrom-SVN: r207515", "tree": {"sha": "8f49e8a93fe079885ddefa97205d08a6b140ccf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f49e8a93fe079885ddefa97205d08a6b140ccf3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f300e7b88c73abc5d5926633b671d94fd20b04b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f300e7b88c73abc5d5926633b671d94fd20b04b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f300e7b88c73abc5d5926633b671d94fd20b04b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f300e7b88c73abc5d5926633b671d94fd20b04b8/comments", "author": null, "committer": null, "parents": [{"sha": "77897429538d438730072459c93c37bae3850761", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77897429538d438730072459c93c37bae3850761", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77897429538d438730072459c93c37bae3850761"}], "stats": {"total": 190, "additions": 168, "deletions": 22}, "files": [{"sha": "9f3902de34f97d099d35611eb200080876072d92", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f300e7b88c73abc5d5926633b671d94fd20b04b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f300e7b88c73abc5d5926633b671d94fd20b04b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f300e7b88c73abc5d5926633b671d94fd20b04b8", "patch": "@@ -1,3 +1,11 @@\n+2014-02-05  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* lto-cgraph.c (asm_nodes_output): Make global.\n+\t* lto-wrapper.c (run_gcc): Pass down paralelizm to WPA.\n+\t* gcc.c (AS_NEEDS_DASH_FOR_PIPED_INPUT): Allow WPA\n+\tparameter\n+\t(driver_handle_option): Handle OPT_fwpa.\n+\n 2014-02-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR ipa/59947"}, {"sha": "9f76f89a4507172413da80273593bbbe75864e3b", "filename": "gcc/gcc.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f300e7b88c73abc5d5926633b671d94fd20b04b8/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f300e7b88c73abc5d5926633b671d94fd20b04b8/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=f300e7b88c73abc5d5926633b671d94fd20b04b8", "patch": "@@ -888,12 +888,12 @@ static const char *asm_options =\n \n static const char *invoke_as =\n #ifdef AS_NEEDS_DASH_FOR_PIPED_INPUT\n-\"%{!fwpa:\\\n+\"%{!fwpa*:\\\n    %{fcompare-debug=*|fdump-final-insns=*:%:compare-debug-dump-opt()}\\\n    %{!S:-o %|.s |\\n as %(asm_options) %|.s %A }\\\n   }\";\n #else\n-\"%{!fwpa:\\\n+\"%{!fwpa*:\\\n    %{fcompare-debug=*|fdump-final-insns=*:%:compare-debug-dump-opt()}\\\n    %{!S:-o %|.s |\\n as %(asm_options) %m.s %A }\\\n   }\";\n@@ -3651,6 +3651,10 @@ driver_handle_option (struct gcc_options *opts,\n       validated = true;\n       break;\n \n+    case OPT_fwpa:\n+      flag_wpa = \"\";\n+      break;\n+\n     default:\n       /* Various driver options need no special processing at this\n \t point, having been handled in a prescan above or being"}, {"sha": "e772072864a958e062e2ccd265810a7b25f18ee3", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f300e7b88c73abc5d5926633b671d94fd20b04b8/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f300e7b88c73abc5d5926633b671d94fd20b04b8/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=f300e7b88c73abc5d5926633b671d94fd20b04b8", "patch": "@@ -53,6 +53,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"pass_manager.h\"\n #include \"ipa-utils.h\"\n \n+/* True when asm nodes has been output.  */\n+bool asm_nodes_output = false;\n+\n static void output_cgraph_opt_summary (void);\n static void input_cgraph_opt_summary (vec<symtab_node *>  nodes);\n \n@@ -890,7 +893,6 @@ output_symtab (void)\n   lto_symtab_encoder_iterator lsei;\n   int i, n_nodes;\n   lto_symtab_encoder_t encoder;\n-  static bool asm_nodes_output = false;\n \n   if (flag_wpa)\n     output_cgraph_opt_summary ();"}, {"sha": "5798a81f95808cba07d98fd3f74035cb9f26f68a", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f300e7b88c73abc5d5926633b671d94fd20b04b8/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f300e7b88c73abc5d5926633b671d94fd20b04b8/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=f300e7b88c73abc5d5926633b671d94fd20b04b8", "patch": "@@ -745,7 +745,16 @@ run_gcc (unsigned argc, char *argv[])\n       tmp += list_option_len;\n       strcpy (tmp, ltrans_output_file);\n \n-      obstack_ptr_grow (&argv_obstack, \"-fwpa\");\n+      if (jobserver)\n+\tobstack_ptr_grow (&argv_obstack, xstrdup (\"-fwpa=jobserver\"));\n+      else if (parallel > 1)\n+\t{\n+\t  char buf[256];\n+\t  sprintf (buf, \"-fwpa=%i\", parallel);\n+\t  obstack_ptr_grow (&argv_obstack, xstrdup (buf));\n+\t}\n+      else\n+        obstack_ptr_grow (&argv_obstack, \"-fwpa\");\n     }\n \n   /* Append the input objects and possible preceding arguments.  */"}, {"sha": "454d9cd765e3fe198a3623da1988e23f5c946023", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f300e7b88c73abc5d5926633b671d94fd20b04b8/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f300e7b88c73abc5d5926633b671d94fd20b04b8/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=f300e7b88c73abc5d5926633b671d94fd20b04b8", "patch": "@@ -1,3 +1,14 @@\n+2014-02-05  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* lto.c (lto_parallelism): New static var.\n+\t(do_stream_out, wait_for_child, stream_out): New static functions.\n+\t(lto_wpa_write_files): Add support for parallel streaming.\n+\t(do_whole_program_analysis): Set parallelism.\n+\t* lang.opt (fwpa): Add parameter.\n+\t* lto-lang.c (lto_handle_option): Handle flag_wpa.\n+\t(lto_init): Update use of flag_wpa.\n+\t* lto-streamer.h (asm_nodes_output): Declare.\n+\n 2014-02-05  Richard Biener  <rguenther@suse.de>\n \n \t* lto.h (lto_global_var_decls): Remove."}, {"sha": "07a119574036133c74bdb035aa0ddbc772434eec", "filename": "gcc/lto/lang.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f300e7b88c73abc5d5926633b671d94fd20b04b8/gcc%2Flto%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f300e7b88c73abc5d5926633b671d94fd20b04b8/gcc%2Flto%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flang.opt?ref=f300e7b88c73abc5d5926633b671d94fd20b04b8", "patch": "@@ -33,9 +33,13 @@ LTO Joined Var(ltrans_output_list)\n Specify a file to which a list of files output by LTRANS is written.\n \n fwpa\n-LTO Driver Report Var(flag_wpa)\n+LTO Driver Report\n Run the link-time optimizer in whole program analysis (WPA) mode.\n \n+fwpa=\n+LTO Driver RejectNegative Joined Var(flag_wpa)\n+Whole program analysis (WPA) mode with number of parallel jobs specified.\n+\n fresolution=\n LTO Joined\n The resolution file"}, {"sha": "4d6d0f5ffd9d388e96da0fca3b659085939bc073", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f300e7b88c73abc5d5926633b671d94fd20b04b8/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f300e7b88c73abc5d5926633b671d94fd20b04b8/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=f300e7b88c73abc5d5926633b671d94fd20b04b8", "patch": "@@ -749,6 +749,10 @@ lto_handle_option (size_t scode, const char *arg,\n       warn_psabi = value;\n       break;\n \n+    case OPT_fwpa:\n+      flag_wpa = value ? \"\" : NULL;\n+      break;\n+\n     default:\n       break;\n     }\n@@ -1157,7 +1161,7 @@ static bool\n lto_init (void)\n {\n   /* We need to generate LTO if running in WPA mode.  */\n-  flag_generate_lto = flag_wpa;\n+  flag_generate_lto = (flag_wpa != NULL);\n \n   /* Create the basic integer types.  */\n   build_common_tree_nodes (flag_signed_char, /*short_double=*/false);"}, {"sha": "fb81f3132f19f58b29c853e6fafdc23031e5cf76", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 120, "deletions": 16, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f300e7b88c73abc5d5926633b671d94fd20b04b8/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f300e7b88c73abc5d5926633b671d94fd20b04b8/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=f300e7b88c73abc5d5926633b671d94fd20b04b8", "patch": "@@ -51,6 +51,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"pass_manager.h\"\n \n \n+/* Number of parallel tasks to run, -1 if we want to use GNU Make jobserver.  */\n+static int lto_parallelism;\n+\n static GTY(()) tree first_personality_decl;\n \n /* Returns a hash code for P.  */\n@@ -2437,25 +2440,114 @@ cmp_partitions_order (const void *a, const void *b)\n   return orderb - ordera;\n }\n \n+/* Actually stream out ENCODER into TEMP_FILENAME.  */\n+\n+static void\n+do_stream_out (char *temp_filename, lto_symtab_encoder_t encoder)\n+{\n+  lto_file *file = lto_obj_file_open (temp_filename, true);\n+  if (!file)\n+    fatal_error (\"lto_obj_file_open() failed\");\n+  lto_set_current_out_file (file);\n+\n+  ipa_write_optimization_summaries (encoder);\n+\n+  lto_set_current_out_file (NULL);\n+  lto_obj_file_close (file);\n+  free (file);\n+}\n+\n+/* Wait for forked process and signal errors.  */\n+#ifdef HAVE_WORKING_FORK\n+static void\n+wait_for_child ()\n+{\n+  int status;\n+  do\n+    {\n+      int w = waitpid(0, &status, WUNTRACED | WCONTINUED);\n+      if (w == -1)\n+\tfatal_error (\"waitpid failed\");\n+\n+      if (WIFEXITED (status) && WEXITSTATUS (status))\n+\tfatal_error (\"streaming subprocess failed\");\n+      else if (WIFSIGNALED (status))\n+\tfatal_error (\"streaming subprocess was killed by signal\");\n+    }\n+  while (!WIFEXITED(status) && !WIFSIGNALED(status));\n+}\n+#endif\n+\n+/* Stream out ENCODER into TEMP_FILENAME\n+   Fork if that seems to help.  */\n+\n+static void\n+stream_out (char *temp_filename, lto_symtab_encoder_t encoder, bool last)\n+{\n+#ifdef HAVE_WORKING_FORK\n+  static int nruns;\n+\n+  if (!lto_parallelism || lto_parallelism == 1)\n+    {\n+      do_stream_out (temp_filename, encoder);\n+      return;\n+    }\n+\n+  /* Do not run more than LTO_PARALLELISM streamings\n+     FIXME: we ignore limits on jobserver.  */\n+  if (lto_parallelism > 0 && nruns >= lto_parallelism)\n+    {\n+      wait_for_child ();\n+      nruns --;\n+    }\n+  /* If this is not the last parallel partition, execute new\n+     streaming process.  */\n+  if (!last)\n+    {\n+      pid_t cpid = fork ();\n+\n+      if (!cpid)\n+\t{\n+\t  setproctitle (\"lto1-wpa-streaming\");\n+\t  do_stream_out (temp_filename, encoder);\n+\t  exit (0);\n+\t}\n+      /* Fork failed; lets do the job ourseleves.  */\n+      else if (cpid == -1)\n+        do_stream_out (temp_filename, encoder);\n+      else\n+\tnruns++;\n+    }\n+  /* Last partition; stream it and wait for all children to die.  */\n+  else\n+    {\n+      int i;\n+      do_stream_out (temp_filename, encoder);\n+      for (i = 0; i < nruns; i++)\n+\twait_for_child ();\n+    }\n+  asm_nodes_output = true;\n+#else\n+  do_stream_out (temp_filename, encoder);\n+#endif\n+}\n+\n /* Write all output files in WPA mode and the file with the list of\n    LTRANS units.  */\n \n static void\n lto_wpa_write_files (void)\n {\n   unsigned i, n_sets;\n-  lto_file *file;\n   ltrans_partition part;\n   FILE *ltrans_output_list_stream;\n   char *temp_filename;\n+  vec <char *>temp_filenames = vNULL;\n   size_t blen;\n \n   /* Open the LTRANS output list.  */\n   if (!ltrans_output_list)\n     fatal_error (\"no LTRANS output list filename provided\");\n-  ltrans_output_list_stream = fopen (ltrans_output_list, \"w\");\n-  if (ltrans_output_list_stream == NULL)\n-    fatal_error (\"opening LTRANS output list %s: %m\", ltrans_output_list);\n \n   timevar_push (TV_WHOPR_WPA);\n \n@@ -2494,14 +2586,10 @@ lto_wpa_write_files (void)\n \n   for (i = 0; i < n_sets; i++)\n     {\n-      size_t len;\n       ltrans_partition part = ltrans_partitions[i];\n \n       /* Write all the nodes in SET.  */\n       sprintf (temp_filename + blen, \"%u.o\", i);\n-      file = lto_obj_file_open (temp_filename, true);\n-      if (!file)\n-\tfatal_error (\"lto_obj_file_open() failed\");\n \n       if (!quiet_flag)\n \tfprintf (stderr, \" %s (%s %i insns)\", temp_filename, part->name, part->insns);\n@@ -2543,21 +2631,25 @@ lto_wpa_write_files (void)\n \t}\n       gcc_checking_assert (lto_symtab_encoder_size (part->encoder) || !i);\n \n-      lto_set_current_out_file (file);\n-\n-      ipa_write_optimization_summaries (part->encoder);\n+      stream_out (temp_filename, part->encoder, i == n_sets - 1);\n \n-      lto_set_current_out_file (NULL);\n-      lto_obj_file_close (file);\n-      free (file);\n       part->encoder = NULL;\n \n-      len = strlen (temp_filename);\n-      if (fwrite (temp_filename, 1, len, ltrans_output_list_stream) < len\n+      temp_filenames.safe_push (xstrdup (temp_filename));\n+    }\n+  ltrans_output_list_stream = fopen (ltrans_output_list, \"w\");\n+  if (ltrans_output_list_stream == NULL)\n+    fatal_error (\"opening LTRANS output list %s: %m\", ltrans_output_list);\n+  for (i = 0; i < n_sets; i++)\n+    {\n+      unsigned int len = strlen (temp_filenames[i]);\n+      if (fwrite (temp_filenames[i], 1, len, ltrans_output_list_stream) < len\n \t  || fwrite (\"\\n\", 1, 1, ltrans_output_list_stream) < 1)\n \tfatal_error (\"writing to LTRANS output list %s: %m\",\n \t\t     ltrans_output_list);\n+     free (temp_filenames[i]);\n     }\n+  temp_filenames.release();\n \n   lto_stats.num_output_files += n_sets;\n \n@@ -3113,6 +3205,18 @@ do_whole_program_analysis (void)\n {\n   symtab_node *node;\n \n+  lto_parallelism = 1;\n+\n+  /* TODO: jobserver communicatoin is not supported, yet.  */\n+  if (!strcmp (flag_wpa, \"jobserver\"))\n+    lto_parallelism = -1;\n+  else\n+    {\n+      lto_parallelism = atoi (flag_wpa);\n+      if (lto_parallelism <= 0)\n+\tlto_parallelism = 0;\n+    }\n+\n   timevar_start (TV_PHASE_OPT_GEN);\n \n   /* Note that since we are in WPA mode, materialize_cgraph will not"}]}