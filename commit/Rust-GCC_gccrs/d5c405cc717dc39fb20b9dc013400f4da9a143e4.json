{"sha": "d5c405cc717dc39fb20b9dc013400f4da9a143e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVjNDA1Y2M3MTdkYzM5ZmIyMGI5ZGMwMTM0MDBmNGRhOWExNDNlNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-05-30T22:02:30Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-05-30T22:02:30Z"}, "message": "std_complex.h (log(const complex<_Tp>&)): When _GLIBCXX_USE_C99_COMPLEX, forward to __builtin_clog/clogf/clogl.\n\n2005-05-30  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/std/std_complex.h (log(const complex<_Tp>&)): When\n\t_GLIBCXX_USE_C99_COMPLEX, forward to __builtin_clog/clogf/clogl.\n\nFrom-SVN: r100376", "tree": {"sha": "57ba37df114b40ae6ef22d404832e6410268cfdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57ba37df114b40ae6ef22d404832e6410268cfdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5c405cc717dc39fb20b9dc013400f4da9a143e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5c405cc717dc39fb20b9dc013400f4da9a143e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5c405cc717dc39fb20b9dc013400f4da9a143e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5c405cc717dc39fb20b9dc013400f4da9a143e4/comments", "author": null, "committer": null, "parents": [{"sha": "7f177cf707633d9eafbd184d107bbc002a791277", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f177cf707633d9eafbd184d107bbc002a791277", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f177cf707633d9eafbd184d107bbc002a791277"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "31357005d8938833cda25e3878b363dbe6e36466", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c405cc717dc39fb20b9dc013400f4da9a143e4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c405cc717dc39fb20b9dc013400f4da9a143e4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d5c405cc717dc39fb20b9dc013400f4da9a143e4", "patch": "@@ -1,3 +1,8 @@\n+2005-05-30  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/std/std_complex.h (log(const complex<_Tp>&)): When\n+\t_GLIBCXX_USE_C99_COMPLEX, forward to __builtin_clog/clogf/clogl.\n+\n 2005-05-28  Paolo Carlini  <pcarlini@suse.de>\n \n \tRevert:"}, {"sha": "80020756789637d83e91d60e12e18aa0f2c15786", "filename": "libstdc++-v3/include/std/std_complex.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c405cc717dc39fb20b9dc013400f4da9a143e4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_complex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c405cc717dc39fb20b9dc013400f4da9a143e4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_complex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_complex.h?ref=d5c405cc717dc39fb20b9dc013400f4da9a143e4", "patch": "@@ -749,7 +749,7 @@ namespace std\n     __complex_log(const complex<_Tp>& __z)\n     { return complex<_Tp>(log(std::abs(__z)), std::arg(__z)); }\n \n-  /*\n+#if _GLIBCXX_USE_C99_COMPLEX\n   inline __complex__ float\n   __complex_log(__complex__ float __z) { return __builtin_clogf(__z); }\n \n@@ -758,14 +758,16 @@ namespace std\n \n   inline __complex__ long double\n   __complex_log(const __complex__ long double& __z)\n-  { return __builtin_clogl(__z); } */\n+  { return __builtin_clogl(__z); }\n \n-  // FIXME: Currently we don't use built-ins for log() because of some\n-  //        obscure user name-space issues.  So, we use the generic version\n-  //        which is why we don't use __z.__rep() in the call below.\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    log(const complex<_Tp>& __z) { return __complex_log(__z.__rep()); }\n+#else\n   template<typename _Tp>\n     inline complex<_Tp>\n     log(const complex<_Tp>& __z) { return __complex_log(__z); }\n+#endif\n \n   template<typename _Tp>\n     inline complex<_Tp>"}]}