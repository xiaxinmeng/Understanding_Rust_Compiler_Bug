{"sha": "0de1e4a6aac5ec9ed06c2c99b9a5fd8344e6870c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRlMWU0YTZhYWM1ZWM5ZWQwNmMyYzk5YjlhNWZkODM0NGU2ODcwYw==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2013-04-28T13:32:59Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2013-04-28T13:32:59Z"}, "message": "re PR fortran/57071 (Optimize  (-1)**k  to 1 - 2 * mod(K, 2))\n\n2013-04-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/57071\n\t* frontend-passes (optimize_power):  New function.\n\t(optimize_op):  Use it.\n\n2013-04-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/57071\n\t* gfortran.dg/power_3.f90:  New test.\n\t* gfortran.dg/power_4.f90:  New test.\n\nFrom-SVN: r198369", "tree": {"sha": "9dcedc944d204b5d8180eb0caf4e8ac6ac8898cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dcedc944d204b5d8180eb0caf4e8ac6ac8898cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0de1e4a6aac5ec9ed06c2c99b9a5fd8344e6870c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0de1e4a6aac5ec9ed06c2c99b9a5fd8344e6870c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0de1e4a6aac5ec9ed06c2c99b9a5fd8344e6870c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0de1e4a6aac5ec9ed06c2c99b9a5fd8344e6870c/comments", "author": null, "committer": null, "parents": [{"sha": "d872e4aa7018fe79f1199e52bbcae0070128a561", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d872e4aa7018fe79f1199e52bbcae0070128a561", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d872e4aa7018fe79f1199e52bbcae0070128a561"}], "stats": {"total": 142, "additions": 142, "deletions": 0}, "files": [{"sha": "9debee4adc5b0dfa0ef4c51ce641f91f681ea1f2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0de1e4a6aac5ec9ed06c2c99b9a5fd8344e6870c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0de1e4a6aac5ec9ed06c2c99b9a5fd8344e6870c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0de1e4a6aac5ec9ed06c2c99b9a5fd8344e6870c", "patch": "@@ -1,3 +1,9 @@\n+2013-04-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/57071\n+\t* frontend-passes (optimize_power):  New function.\n+\t(optimize_op):  Use it.\n+\n 2013-04-25  Janne Blomqvist  <jb@gcc.gnu.org>\n \n         PR bootstrap/57028"}, {"sha": "63efb9f919c122c7e48d57c2520e369f35ba1903", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0de1e4a6aac5ec9ed06c2c99b9a5fd8344e6870c/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0de1e4a6aac5ec9ed06c2c99b9a5fd8344e6870c/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=0de1e4a6aac5ec9ed06c2c99b9a5fd8344e6870c", "patch": "@@ -1091,6 +1091,65 @@ combine_array_constructor (gfc_expr *e)\n   return true;\n }\n \n+/* Change (-1)**k into 1-ishift(iand(k,1),1) and\n+ 2**k into ishift(1,k) */\n+\n+static bool\n+optimize_power (gfc_expr *e)\n+{\n+  gfc_expr *op1, *op2;\n+  gfc_expr *iand, *ishft;\n+\n+  if (e->ts.type != BT_INTEGER)\n+    return false;\n+\n+  op1 = e->value.op.op1;\n+\n+  if (op1 == NULL || op1->expr_type != EXPR_CONSTANT)\n+    return false;\n+\n+  if (mpz_cmp_si (op1->value.integer, -1L) == 0)\n+    {\n+      gfc_free_expr (op1);\n+\n+      op2 = e->value.op.op2;\n+\n+      if (op2 == NULL)\n+\treturn false;\n+\n+      iand = gfc_build_intrinsic_call (current_ns, GFC_ISYM_IAND,\n+\t\t\t\t       \"_internal_iand\", e->where, 2, op2,\n+\t\t\t\t       gfc_get_int_expr (e->ts.kind,\n+\t\t\t\t\t\t\t &e->where, 1));\n+\t\t\t\t   \n+      ishft = gfc_build_intrinsic_call (current_ns, GFC_ISYM_ISHFT,\n+\t\t\t\t\t\"_internal_ishft\", e->where, 2, iand,\n+\t\t\t\t\tgfc_get_int_expr (e->ts.kind,\n+\t\t\t\t\t\t\t  &e->where, 1));\n+\n+      e->value.op.op = INTRINSIC_MINUS;\n+      e->value.op.op1 = gfc_get_int_expr (e->ts.kind, &e->where, 1);\n+      e->value.op.op2 = ishft;\n+      return true;\n+    }\n+  else if (mpz_cmp_si (op1->value.integer, 2L) == 0)\n+    {\n+      gfc_free_expr (op1);\n+\n+      op2 = e->value.op.op2;\n+      if (op2 == NULL)\n+\treturn false;\n+\n+      ishft = gfc_build_intrinsic_call (current_ns, GFC_ISYM_ISHFT,\n+\t\t\t\t\t\"_internal_ishft\", e->where, 2,\n+\t\t\t\t\tgfc_get_int_expr (e->ts.kind,\n+\t\t\t\t\t\t\t  &e->where, 1),\n+\t\t\t\t\top2);\n+      *e = *ishft;\n+      return true;\n+    }\n+  return false;\n+}\n \n /* Recursive optimization of operators.  */\n \n@@ -1152,6 +1211,10 @@ optimize_op (gfc_expr *e)\n     case INTRINSIC_DIVIDE:\n       return combine_array_constructor (e) || changed;\n \n+    case INTRINSIC_POWER:\n+      return optimize_power (e);\n+      break;\n+\n     default:\n       break;\n     }"}, {"sha": "41b155c8ce182f628c5e8653106373f79a09a796", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0de1e4a6aac5ec9ed06c2c99b9a5fd8344e6870c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0de1e4a6aac5ec9ed06c2c99b9a5fd8344e6870c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0de1e4a6aac5ec9ed06c2c99b9a5fd8344e6870c", "patch": "@@ -1,3 +1,9 @@\n+2013-04-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/57071\n+\t* frontend-passes (optimize_power):  New function.\n+\t(optimize_op):  Use it.\n+\n 2013-04-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/56866"}, {"sha": "381c5d31859d228cd38ae2e8b9a584d3336da1c8", "filename": "gcc/testsuite/gfortran.dg/power_3.f90", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0de1e4a6aac5ec9ed06c2c99b9a5fd8344e6870c/gcc%2Ftestsuite%2Fgfortran.dg%2Fpower_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0de1e4a6aac5ec9ed06c2c99b9a5fd8344e6870c/gcc%2Ftestsuite%2Fgfortran.dg%2Fpower_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpower_3.f90?ref=0de1e4a6aac5ec9ed06c2c99b9a5fd8344e6870c", "patch": "@@ -0,0 +1,38 @@\n+! { dg-do run }\n+! { dg-options \"-ffrontend-optimize -fdump-tree-original\" }\n+! PR 57071 - Check that (-1)**k is transformed into 1-2*iand(k,1).\n+program main\n+  implicit none\n+  integer, parameter :: n = 3\n+  integer(kind=8), dimension(-n:n) :: a, b\n+  integer, dimension(-n:n) :: c, d, e\n+  integer :: m\n+  integer :: i, v\n+  integer (kind=2) :: i2\n+\n+  m = n\n+  v = -1\n+  ! Test in scalar expressions\n+  do i=-n,n\n+     if (v**i /= (-1)**i) call abort\n+  end do\n+\n+  ! Test in array constructors\n+  a(-m:m) = [ ((-1)**i, i= -m, m) ]\n+  b(-m:m) = [ (   v**i, i= -m, m) ]\n+  if (any(a .ne. b)) call abort\n+\n+  ! Test in array expressions\n+  c = [ ( i, i = -n , n ) ]\n+  d = (-1)**c\n+  e = v**c\n+  if (any(d .ne. e)) call abort\n+\n+  ! Test in different kind expressions\n+  do i2=-n,n\n+     if (v**i2 /= (-1)**i2) call abort\n+  end do\n+\n+end program main\n+! { dg-final { scan-tree-dump-times \"_gfortran_pow_i4_i4\" 4 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "1d5325966492030c274bafe66496c03113a8fc5e", "filename": "gcc/testsuite/gfortran.dg/power_4.f90", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0de1e4a6aac5ec9ed06c2c99b9a5fd8344e6870c/gcc%2Ftestsuite%2Fgfortran.dg%2Fpower_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0de1e4a6aac5ec9ed06c2c99b9a5fd8344e6870c/gcc%2Ftestsuite%2Fgfortran.dg%2Fpower_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpower_4.f90?ref=0de1e4a6aac5ec9ed06c2c99b9a5fd8344e6870c", "patch": "@@ -0,0 +1,29 @@\n+! { dg-do run }\n+! { dg-options \"-ffrontend-optimize -fdump-tree-original\" }\n+! PR 57071 - Check that 2**k is transformed into ishift(1,k).\n+program main\n+  implicit none\n+  integer :: i,m,v\n+  integer, parameter :: n=30\n+  integer, dimension(-n:n) :: a,b,c,d,e\n+  m = n\n+\n+  v = 2\n+  ! Test scalar expressions.\n+  do i=-n,n\n+     if (2**i /= v**i) call abort\n+  end do\n+\n+  ! Test array constructors\n+  b = [(2**i,i=-m,m)]\n+  c = [(v**i,i=-m,m)]\n+  if (any(b /= c)) call abort\n+\n+  ! Test array expressions\n+  a = [(i,i=-m,m)]\n+  d = 2**a\n+  e = v**a\n+  if (any(d /= e)) call abort\n+end program main\n+! { dg-final { scan-tree-dump-times \"_gfortran_pow_i4_i4\" 3 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}