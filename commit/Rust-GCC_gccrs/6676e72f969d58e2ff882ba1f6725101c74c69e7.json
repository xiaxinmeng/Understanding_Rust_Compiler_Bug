{"sha": "6676e72f969d58e2ff882ba1f6725101c74c69e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY3NmU3MmY5NjlkNThlMmZmODgyYmExZjY3MjUxMDFjNzRjNjllNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-10-07T12:26:47Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-10-07T12:26:47Z"}, "message": "(safe_from_p): If EXP has a variable size, assume safe.\n\n(preexpand_calls): Don't preexpand a call that returns a variable-sized object.\n\nFrom-SVN: r8234", "tree": {"sha": "de7ddb0483abd3c9748d2b0acdec22b37687d3c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de7ddb0483abd3c9748d2b0acdec22b37687d3c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6676e72f969d58e2ff882ba1f6725101c74c69e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6676e72f969d58e2ff882ba1f6725101c74c69e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6676e72f969d58e2ff882ba1f6725101c74c69e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6676e72f969d58e2ff882ba1f6725101c74c69e7/comments", "author": null, "committer": null, "parents": [{"sha": "fef0509b3d6c7b4d0960718505b1651b3eb32b78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fef0509b3d6c7b4d0960718505b1651b3eb32b78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fef0509b3d6c7b4d0960718505b1651b3eb32b78"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "f3aa69faabdbd7576b3633f6efa68b6b8f0b2397", "filename": "gcc/expr.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6676e72f969d58e2ff882ba1f6725101c74c69e7/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6676e72f969d58e2ff882ba1f6725101c74c69e7/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=6676e72f969d58e2ff882ba1f6725101c74c69e7", "patch": "@@ -3527,7 +3527,13 @@ safe_from_p (x, exp)\n   rtx exp_rtl = 0;\n   int i, nops;\n \n-  if (x == 0)\n+  if (x == 0\n+      /* If EXP has varying size, we MUST use a target since we currently\n+\t have no way of allocating temporaries of variable size.  So we\n+\t assume here that something at a higher level has prevented a\n+\t clash.  This is somewhat bogus, but the best we can do.  */\n+      || (TREE_TYPE (exp) != 0 &&\n+\t  TREE_CODE (TYPE_SIZE (TREE_TYPE (exp))) != INTEGER_CST))\n     return 1;\n \n   /* If this is a subreg of a hard register, declare it unsafe, otherwise,\n@@ -8316,7 +8322,9 @@ preexpand_calls (exp)\n       /* Do nothing to built-in functions.  */\n       if (TREE_CODE (TREE_OPERAND (exp, 0)) != ADDR_EXPR\n \t  || TREE_CODE (TREE_OPERAND (TREE_OPERAND (exp, 0), 0)) != FUNCTION_DECL\n-\t  || ! DECL_BUILT_IN (TREE_OPERAND (TREE_OPERAND (exp, 0), 0)))\n+\t  || ! DECL_BUILT_IN (TREE_OPERAND (TREE_OPERAND (exp, 0), 0))\n+\t  /* Do nothing if the call returns a variable-sized object.  */\n+\t  || TREE_CODE (TYPE_SIZE (TREE_TYPE(exp))) != INTEGER_CST)\n \tCALL_EXPR_RTL (exp) = expand_call (exp, NULL_RTX, 0);\n       return;\n "}]}