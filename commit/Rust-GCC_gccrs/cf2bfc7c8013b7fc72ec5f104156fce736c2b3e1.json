{"sha": "cf2bfc7c8013b7fc72ec5f104156fce736c2b3e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YyYmZjN2M4MDEzYjdmYzcyZWM1ZjEwNDE1NmZjZTczNmMyYjNlMQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-07-06T00:04:48Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-07-06T00:38:53Z"}, "message": "cris: New peephole2 movulsr + test-case.\n\nCombine likes to change a zero-extension / and + shift as seen\nin the test-case source to a logical shift followed by an and of\nthe shifted mask, like:\n lsrq 1,r0\n and.d 0x7f,r0\n\nThis was observed in the hot loop of coremark crcu16 and crcu32,\nwhen doing other changes affecting instruction selection.  While\nfixable by other means (like instruction costs or combine\npatches), I wanted to break this out from those \"other means\".\nThe similarity to extant peephole optimizations is not\ndeliberate.\n\nI noticed some paths to other peephole2 test-cases have changed\ndue to moves and renaming, so I updated them.\n\ngcc:\n\t* config/cris/cris.md (movulsr): New peephole2.\n\ngcc/testsuite:\n\t* gcc.target/cris/peep2-movulsr.c: New test.", "tree": {"sha": "323b9532fb34772c52e7ef90070a1792d69136b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/323b9532fb34772c52e7ef90070a1792d69136b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf2bfc7c8013b7fc72ec5f104156fce736c2b3e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf2bfc7c8013b7fc72ec5f104156fce736c2b3e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf2bfc7c8013b7fc72ec5f104156fce736c2b3e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf2bfc7c8013b7fc72ec5f104156fce736c2b3e1/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e98f060280b48328e9e7f5912d63d52c3ed6814", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e98f060280b48328e9e7f5912d63d52c3ed6814", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e98f060280b48328e9e7f5912d63d52c3ed6814"}], "stats": {"total": 64, "additions": 60, "deletions": 4}, "files": [{"sha": "c36a5402be3c354429964e1c27719dc372191265", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 41, "deletions": 4, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf2bfc7c8013b7fc72ec5f104156fce736c2b3e1/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf2bfc7c8013b7fc72ec5f104156fce736c2b3e1/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=cf2bfc7c8013b7fc72ec5f104156fce736c2b3e1", "patch": "@@ -2515,8 +2515,45 @@\n \n ;; We have trouble with and:s and shifts.  Maybe something is broken in\n ;; gcc?  Or it could just be that bit-field insn expansion is a bit\n-;; suboptimal when not having extzv insns.\n-;; Testcase for the following four peepholes: gcc.dg/cris-peep2-xsrand.c\n+;; suboptimal when not having extzv insns.  Or combine being over-eager\n+;; to canonicalize to \"and\", and ignorant on the benefits of the right\n+;; mixture of \"and\" and \"zero-extend\".\n+\n+;; Testcase for the following peephole: gcc.target/cris/peep2-movulsr.c\n+\n+;; Where equivalent and where the \"and\" argument doesn't fit \"andq\" but\n+;; is 16 bits or smaller, replace the \"and\" with a zero-extend preceding\n+;; the shift.  A zero-extend is shorter and faster than \"and\" with a\n+;; 32-bit argument.\n+\n+(define_peephole2 ; movulsr\n+  [(parallel\n+    [(set (match_operand:SI 0 \"register_operand\")\n+\t  (lshiftrt:SI (match_dup 0)\n+\t\t       (match_operand:SI 1 \"const_int_operand\")))\n+     (clobber (reg:CC CRIS_CC0_REGNUM))])\n+   (parallel\n+    [(set (match_dup 0)\n+\t  (and:SI (match_dup 0)\n+\t\t  (match_operand 2 \"const_int_operand\")))\n+     (clobber (reg:CC CRIS_CC0_REGNUM))])]\n+  \"INTVAL (operands[2]) > 31 && INTVAL (operands[2]) <= 0xffff\n+   && (((INTVAL (operands[2]) <= 0xff ? 0xff : 0xffff) >> INTVAL (operands[1]))\n+       == INTVAL (operands[2]))\"\n+  [(parallel\n+    ;; The zero-extend is expressed as an \"and\", only because that's easier\n+    ;; than messing with zero-extend of a subreg.\n+    [(set (match_dup 0) (and:SI (match_dup 0) (match_dup 3)))\n+     (clobber (reg:CC CRIS_CC0_REGNUM))])\n+   (parallel\n+    [(set (match_dup 0) (lshiftrt:SI (match_dup 0) (match_dup 1)))\n+     (clobber (reg:CC CRIS_CC0_REGNUM))])]\n+{\n+  operands[3]\n+    = INTVAL (operands[2]) <= 0xff ? GEN_INT (0xff) :  GEN_INT (0xffff);\n+})\n+\n+;; Testcase for the following four peepholes: gcc.target/cris/peep2-xsrand.c\n \n (define_peephole2 ; asrandb\n   [(parallel\n@@ -2635,7 +2672,7 @@\n ;;   move.d reg_or_mem,reg_32\n ;;   and.d const_32__65535,reg_32\n ;; Fix it with these two peephole2's.\n-;; Testcases: gcc.dg/cris-peep2-andu1.c gcc.dg/cris-peep2-andu2.c\n+;; Testcases: gcc.target/cris/peep2-andu1.c gcc.target/cris/peep2-andu2.c\n \n (define_peephole2 ; andu\n   [(parallel\n@@ -2679,7 +2716,7 @@\n \t\t\t\t\t\t? QImode : amode)));\n })\n \n-;; Since r186861, gcc.dg/cris-peep2-andu2.c trigs this pattern, with which\n+;; Since r186861, gcc.target/cris/peep2-andu2.c trigs this pattern, with which\n ;; we fix up e.g.:\n ;;  movu.b 254,$r9.\n ;;  and.d $r10,$r9"}, {"sha": "a19afce39827712305d88d5e5caa19d2180b4407", "filename": "gcc/testsuite/gcc.target/cris/peep2-movulsr.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf2bfc7c8013b7fc72ec5f104156fce736c2b3e1/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpeep2-movulsr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf2bfc7c8013b7fc72ec5f104156fce736c2b3e1/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpeep2-movulsr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpeep2-movulsr.c?ref=cf2bfc7c8013b7fc72ec5f104156fce736c2b3e1", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-final { scan-assembler \"movu.w \" } } */\n+/* { dg-final { scan-assembler \"movu.b \" } } */\n+/* { dg-final { scan-assembler-not \"and.. \" } } */\n+/* { dg-options \"-O2\" } */\n+\n+/* Test the \"movulsrb\", \"movulsrw\" peephole2:s trivially.  */\n+\n+unsigned int\n+movulsrb (unsigned int x)\n+{\n+  return (x & 255) >> 1;\n+}\n+\n+unsigned int\n+movulsrw (unsigned int x)\n+{\n+  return (x & 65535) >> 4;\n+}"}]}