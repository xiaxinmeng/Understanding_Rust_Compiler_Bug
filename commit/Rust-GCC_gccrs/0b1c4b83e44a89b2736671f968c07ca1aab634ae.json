{"sha": "0b1c4b83e44a89b2736671f968c07ca1aab634ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIxYzRiODNlNDRhODliMjczNjY3MWY5NjhjMDdjYTFhYWI2MzRhZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-11-29T22:16:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-11-29T22:16:37Z"}, "message": "re PR target/88152 (optimize SSE & AVX char compares with subsequent movmskb)\n\n\tPR target/88152\n\t* config/i386/sse.md (*<sse>_movmsk<ssemodesuffix><avxsizesuffix>_lt,\n\t*<sse>_movmsk<ssemodesuffix><avxsizesuffix>_zext_lt,\n\t*<sse>_movmsk<ssemodesuffix><avxsizesuffix>_shift,\n\t*<sse>_movmsk<ssemodesuffix><avxsizesuffix>_zext_shift,\n\t*<sse2_avx2>_pmovmskb_lt, *<sse2_avx2>_pmovmskb_zext_lt): New\n\tdefine_insn_and_split patterns.\n\n\t* g++.target/i386/pr88152.C: New test.\n\nFrom-SVN: r266649", "tree": {"sha": "b218b1a7ff49487c2edc78347432a8583c1a19b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b218b1a7ff49487c2edc78347432a8583c1a19b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b1c4b83e44a89b2736671f968c07ca1aab634ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b1c4b83e44a89b2736671f968c07ca1aab634ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b1c4b83e44a89b2736671f968c07ca1aab634ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b1c4b83e44a89b2736671f968c07ca1aab634ae/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fb9e6a4bf8fb2a6aee9fd5c2dd0d0f4c842cf9f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb9e6a4bf8fb2a6aee9fd5c2dd0d0f4c842cf9f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb9e6a4bf8fb2a6aee9fd5c2dd0d0f4c842cf9f1"}], "stats": {"total": 172, "additions": 172, "deletions": 0}, "files": [{"sha": "7075f34f566bb7785198389bd4604e555d45499e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b1c4b83e44a89b2736671f968c07ca1aab634ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b1c4b83e44a89b2736671f968c07ca1aab634ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b1c4b83e44a89b2736671f968c07ca1aab634ae", "patch": "@@ -1,5 +1,13 @@\n 2018-11-29  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/88152\n+\t* config/i386/sse.md (*<sse>_movmsk<ssemodesuffix><avxsizesuffix>_lt,\n+\t*<sse>_movmsk<ssemodesuffix><avxsizesuffix>_zext_lt,\n+\t*<sse>_movmsk<ssemodesuffix><avxsizesuffix>_shift,\n+\t*<sse>_movmsk<ssemodesuffix><avxsizesuffix>_zext_shift,\n+\t*<sse2_avx2>_pmovmskb_lt, *<sse2_avx2>_pmovmskb_zext_lt): New\n+\tdefine_insn_and_split patterns.\n+\n \tPR target/54700\n \t* config/i386/sse.md\n \t(*<sse4_1>_blendv<ssemodesuffix><avxsizesuffix>_lt,"}, {"sha": "e2cae71d44a1e7d6f20736e59a279b2f9f1acde5", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b1c4b83e44a89b2736671f968c07ca1aab634ae/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b1c4b83e44a89b2736671f968c07ca1aab634ae/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=0b1c4b83e44a89b2736671f968c07ca1aab634ae", "patch": "@@ -14653,6 +14653,78 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn_and_split \"*<sse>_movmsk<ssemodesuffix><avxsizesuffix>_lt\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI\n+\t  [(lt:VF_128_256\n+\t     (match_operand:<sseintvecmode> 1 \"register_operand\" \"x\")\n+\t     (match_operand:<sseintvecmode> 2 \"const0_operand\" \"C\"))]\n+\t  UNSPEC_MOVMSK))]\n+  \"TARGET_SSE\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0)\n+\t(unspec:SI [(match_dup 1)] UNSPEC_MOVMSK))]\n+  \"operands[1] = gen_lowpart (<MODE>mode, operands[1]);\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn_and_split \"*<sse>_movmsk<ssemodesuffix><avxsizesuffix>_zext_lt\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (unspec:SI\n+\t    [(lt:VF_128_256\n+\t       (match_operand:<sseintvecmode> 1 \"register_operand\" \"x\")\n+\t       (match_operand:<sseintvecmode> 2 \"const0_operand\" \"C\"))]\n+\t    UNSPEC_MOVMSK)))]\n+  \"TARGET_64BIT && TARGET_SSE\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0)\n+\t(zero_extend:DI (unspec:SI [(match_dup 1)] UNSPEC_MOVMSK)))]\n+  \"operands[1] = gen_lowpart (<MODE>mode, operands[1]);\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn_and_split \"*<sse>_movmsk<ssemodesuffix><avxsizesuffix>_shift\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI\n+\t  [(subreg:VF_128_256\n+\t     (ashiftrt:<sseintvecmode>\n+\t       (match_operand:<sseintvecmode> 1 \"register_operand\" \"x\")\n+\t       (match_operand:QI 2 \"const_int_operand\" \"n\")) 0)]\n+\t  UNSPEC_MOVMSK))]\n+  \"TARGET_SSE\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0)\n+\t(unspec:SI [(match_dup 1)] UNSPEC_MOVMSK))]\n+  \"operands[1] = gen_lowpart (<MODE>mode, operands[1]);\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn_and_split \"*<sse>_movmsk<ssemodesuffix><avxsizesuffix>_zext_shift\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (unspec:SI\n+\t    [(subreg:VF_128_256\n+\t       (ashiftrt:<sseintvecmode>\n+\t\t (match_operand:<sseintvecmode> 1 \"register_operand\" \"x\")\n+\t       (match_operand:QI 2 \"const_int_operand\" \"n\")) 0)]\n+\t    UNSPEC_MOVMSK)))]\n+  \"TARGET_64BIT && TARGET_SSE\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0)\n+\t(zero_extend:DI (unspec:SI [(match_dup 1)] UNSPEC_MOVMSK)))]\n+  \"operands[1] = gen_lowpart (<MODE>mode, operands[1]);\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"<sse2_avx2>_pmovmskb\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(unspec:SI\n@@ -14686,6 +14758,49 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn_and_split \"*<sse2_avx2>_pmovmskb_lt\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI\n+\t  [(lt:VI1_AVX2 (match_operand:VI1_AVX2 1 \"register_operand\" \"x\")\n+\t\t\t(match_operand:VI1_AVX2 2 \"const0_operand\" \"C\"))]\n+\t  UNSPEC_MOVMSK))]\n+  \"TARGET_SSE2\"\n+  \"#\"\n+  \"\"\n+  [(set (match_dup 0)\n+\t(unspec:SI [(match_dup 1)] UNSPEC_MOVMSK))]\n+  \"\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set (attr \"prefix_data16\")\n+     (if_then_else\n+       (match_test \"TARGET_AVX\")\n+     (const_string \"*\")\n+     (const_string \"1\")))\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn_and_split \"*<sse2_avx2>_pmovmskb_zext_lt\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (unspec:SI\n+\t    [(lt:VI1_AVX2 (match_operand:VI1_AVX2 1 \"register_operand\" \"x\")\n+\t\t\t  (match_operand:VI1_AVX2 2 \"const0_operand\" \"C\"))]\n+\t    UNSPEC_MOVMSK)))]\n+  \"TARGET_64BIT && TARGET_SSE2\"\n+  \"#\"\n+  \"\"\n+  [(set (match_dup 0)\n+\t(zero_extend:DI (unspec:SI [(match_dup 1)] UNSPEC_MOVMSK)))]\n+  \"\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set (attr \"prefix_data16\")\n+     (if_then_else\n+       (match_test \"TARGET_AVX\")\n+     (const_string \"*\")\n+     (const_string \"1\")))\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_expand \"sse2_maskmovdqu\"\n   [(set (match_operand:V16QI 0 \"memory_operand\")\n \t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\")"}, {"sha": "aae3c61c126301d5e50bc7be6c6fcb569482efbb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b1c4b83e44a89b2736671f968c07ca1aab634ae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b1c4b83e44a89b2736671f968c07ca1aab634ae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0b1c4b83e44a89b2736671f968c07ca1aab634ae", "patch": "@@ -1,3 +1,8 @@\n+2018-11-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/88152\n+\t* g++.target/i386/pr88152.C: New test.\n+\n 2018-11-29  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* gcc.target/i386/pr34256.c: Adjust the number of expected moves."}, {"sha": "9f1659b75868c7172a796d8960259a20f0bb3906", "filename": "gcc/testsuite/g++.target/i386/pr88152.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b1c4b83e44a89b2736671f968c07ca1aab634ae/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr88152.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b1c4b83e44a89b2736671f968c07ca1aab634ae/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr88152.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr88152.C?ref=0b1c4b83e44a89b2736671f968c07ca1aab634ae", "patch": "@@ -0,0 +1,44 @@\n+// PR target/88152\n+// { dg-do compile }\n+// { dg-options \"-O2 -mavx2 -std=c++11\" }\n+// { dg-final { scan-assembler-times \"vpmovmskb\\[^\\n\\r]*xmm\" 6 } }\n+// { dg-final { scan-assembler-times \"vpmovmskb\\[^\\n\\r]*ymm\" 6 } }\n+// { dg-final { scan-assembler-times \"vmovmskps\\[^\\n\\r]*xmm\" 4 } }\n+// { dg-final { scan-assembler-times \"vmovmskps\\[^\\n\\r]*ymm\" 4 } }\n+// { dg-final { scan-assembler-times \"vmovmskpd\\[^\\n\\r]*xmm\" 4 } }\n+// { dg-final { scan-assembler-times \"vmovmskpd\\[^\\n\\r]*ymm\" 4 } }\n+// { dg-final { scan-assembler-not \"vpcmpgt|vpcmpeq|vpsra\" } }\n+\n+#include <x86intrin.h>\n+\n+template <typename T, size_t N>\n+using V [[gnu::vector_size(N)]] = T;\n+\n+int f0 (V<unsigned char, 16> a) { return _mm_movemask_epi8 (reinterpret_cast<__m128i> (a > 0x7f)); }\n+long int f1 (V<unsigned char, 16> a) { return (unsigned) _mm_movemask_epi8 (reinterpret_cast<__m128i> (a >= 0x80)); }\n+long int f2 (V<signed char, 16> a) { return (unsigned) _mm_movemask_epi8 (reinterpret_cast<__m128i> (a < 0)); }\n+int f3 (V<signed char, 16> a) { return _mm_movemask_epi8 (reinterpret_cast<__m128i> (a <= -1)); }\n+int f4 (V<char, 16> a) { return _mm_movemask_epi8 (reinterpret_cast<__m128i> (a < 0)); }\n+long int f5 (V<char, 16> a) { return (unsigned) _mm_movemask_epi8 (reinterpret_cast<__m128i> (a <= -1)); }\n+int f6 (V<unsigned int, 16> a) { return _mm_movemask_ps (reinterpret_cast<__m128> (a > __INT_MAX__)); }\n+int f7 (V<unsigned int, 16> a) { return _mm_movemask_ps (reinterpret_cast<__m128> (a >= 1U + __INT_MAX__)); }\n+int f8 (V<int, 16> a) { return _mm_movemask_ps (reinterpret_cast<__m128> (a < 0)); }\n+int f9 (V<int, 16> a) { return _mm_movemask_ps (reinterpret_cast<__m128> (a <= -1)); }\n+int f10 (V<unsigned long long, 16> a) { return _mm_movemask_pd (reinterpret_cast<__m128d> (a > __LONG_LONG_MAX__)); }\n+int f11 (V<unsigned long long, 16> a) { return _mm_movemask_pd (reinterpret_cast<__m128d> (a >= 1ULL + __LONG_LONG_MAX__)); }\n+long int f12 (V<long long, 16> a) { return (unsigned) _mm_movemask_pd (reinterpret_cast<__m128d> (a < 0)); }\n+int f13 (V<long long, 16> a) { return _mm_movemask_pd (reinterpret_cast<__m128d> (a <= -1)); }\n+int f14 (V<unsigned char, 32> a) { return _mm256_movemask_epi8 (reinterpret_cast<__m256i> (a > 0x7f)); }\n+int f15 (V<unsigned char, 32> a) { return _mm256_movemask_epi8 (reinterpret_cast<__m256i> (a >= 0x80)); }\n+long int f16 (V<signed char, 32> a) { return (unsigned) _mm256_movemask_epi8 (reinterpret_cast<__m256i> (a < 0)); }\n+int f17 (V<signed char, 32> a) { return _mm256_movemask_epi8 (reinterpret_cast<__m256i> (a <= -1)); }\n+int f18 (V<char, 32> a) { return _mm256_movemask_epi8 (reinterpret_cast<__m256i> (a < 0)); }\n+int f19 (V<char, 32> a) { return _mm256_movemask_epi8 (reinterpret_cast<__m256i> (a <= -1)); }\n+long int f20 (V<unsigned int, 32> a) { return (unsigned) _mm256_movemask_ps (reinterpret_cast<__m256> (a > __INT_MAX__)); }\n+int f21 (V<unsigned int, 32> a) { return _mm256_movemask_ps (reinterpret_cast<__m256> (a >= 1U + __INT_MAX__)); }\n+int f22 (V<int, 32> a) { return _mm256_movemask_ps (reinterpret_cast<__m256> (a < 0)); }\n+int f23 (V<int, 32> a) { return _mm256_movemask_ps (reinterpret_cast<__m256> (a <= -1)); }\n+int f24 (V<unsigned long long, 32> a) { return _mm256_movemask_pd (reinterpret_cast<__m256d> (a > __LONG_LONG_MAX__)); }\n+int f25 (V<unsigned long long, 32> a) { return _mm256_movemask_pd (reinterpret_cast<__m256d> (a >= 1ULL + __LONG_LONG_MAX__)); }\n+int f26 (V<long long, 32> a) { return _mm256_movemask_pd (reinterpret_cast<__m256d> (a < 0)); }\n+long int f27 (V<long long, 32> a) { return (unsigned) _mm256_movemask_pd (reinterpret_cast<__m256d> (a <= -1)); }"}]}