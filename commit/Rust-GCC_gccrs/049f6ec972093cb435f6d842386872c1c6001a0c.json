{"sha": "049f6ec972093cb435f6d842386872c1c6001a0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ5ZjZlYzk3MjA5M2NiNDM1ZjZkODQyMzg2ODcyYzFjNjAwMWEwYw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-02-02T17:42:00Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-02-02T17:42:00Z"}, "message": "gcc.c (init_gcc_specs): New function.\n\n\t* gcc.c (init_gcc_specs): New function.  Make -shared-libgcc\n\tthe default when building a shared object.\n\t(init_spec): Use it.\n\t* testsuite/lib/g++.exp: Include the directory where libgcc\n\tis located to the LD_LIBRARY_PATH list.\n\t* inovke.texi (-shared-libgcc): Document the cases in which\n\n\t* Make-lang.in (g++spec.o): Add DRIVER_DEFINES to the list\n\tof macros used when compiling g++spec.c.\n\t* g++spec.c (lang_specific_driver): Link with the shared\n\tlibgcc by default.\n\nFrom-SVN: r39408", "tree": {"sha": "3e8cc7d5d1480250560533db491107be11d42779", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e8cc7d5d1480250560533db491107be11d42779"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/049f6ec972093cb435f6d842386872c1c6001a0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/049f6ec972093cb435f6d842386872c1c6001a0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/049f6ec972093cb435f6d842386872c1c6001a0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/049f6ec972093cb435f6d842386872c1c6001a0c/comments", "author": null, "committer": null, "parents": [{"sha": "483b9fd0fe4e0da56b15a09be666c2012169274d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/483b9fd0fe4e0da56b15a09be666c2012169274d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/483b9fd0fe4e0da56b15a09be666c2012169274d"}], "stats": {"total": 106, "additions": 90, "deletions": 16}, "files": [{"sha": "5c53c0803dd782fa41e697544c32149aed802d9d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049f6ec972093cb435f6d842386872c1c6001a0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049f6ec972093cb435f6d842386872c1c6001a0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=049f6ec972093cb435f6d842386872c1c6001a0c", "patch": "@@ -1,3 +1,13 @@\n+2001-02-02  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* gcc.c (init_gcc_specs): New function.  Make -shared-libgcc \n+\tthe default when building a shared object.\n+\t(init_spec): Use it.\n+\t* testsuite/lib/g++.exp: Include the directory where libgcc\n+\tis located to the LD_LIBRARY_PATH list.\n+\t* inovke.texi (-shared-libgcc): Document the cases in which\n+\tGCC defaults to using the shared libgcc.\n+\t\n 2001-02-02  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config/fp-bit.h (MAX_USI_INT, MAX_SI_INT): Don't assume"}, {"sha": "12486a40b33973add23c5244a7377eaf63080389", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049f6ec972093cb435f6d842386872c1c6001a0c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049f6ec972093cb435f6d842386872c1c6001a0c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=049f6ec972093cb435f6d842386872c1c6001a0c", "patch": "@@ -1,3 +1,10 @@\n+2001-02-02  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* Make-lang.in (g++spec.o): Add DRIVER_DEFINES to the list\n+\tof macros used when compiling g++spec.c.\n+\t* g++spec.c (lang_specific_driver): Link with the shared\n+\tlibgcc by default.\n+\n 2001-01-29  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* decl2.c (build_expr_from_tree), lex.c (make_pointer_declarator,"}, {"sha": "c1fe09bab34585031ebb83d076f321e11a088f1a", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049f6ec972093cb435f6d842386872c1c6001a0c/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049f6ec972093cb435f6d842386872c1c6001a0c/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=049f6ec972093cb435f6d842386872c1c6001a0c", "patch": "@@ -61,7 +61,8 @@ C++ c++: cc1plus$(exeext)\n .PHONY: C++ c++\n \n g++spec.o: $(srcdir)/cp/g++spec.c system.h $(GCC_H) $(CONFIG_H)\n-\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/cp/g++spec.c\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(DRIVER_DEFINES) \\\n+\t\t$(INCLUDES) $(srcdir)/cp/g++spec.c\n \n $(INTL_TARGETS): $(srcdir)/cp/parse.c\n "}, {"sha": "fec6434351d5adbddc5496eb3140d9fcc1903073", "filename": "gcc/cp/g++spec.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049f6ec972093cb435f6d842386872c1c6001a0c/gcc%2Fcp%2Fg%2B%2Bspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049f6ec972093cb435f6d842386872c1c6001a0c/gcc%2Fcp%2Fg%2B%2Bspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fg%2B%2Bspec.c?ref=049f6ec972093cb435f6d842386872c1c6001a0c", "patch": "@@ -1,5 +1,5 @@\n /* Specific flags and argument handling of the C++ front-end.\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -82,6 +82,9 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n   /* By default, we throw on the math library if we have one.  */\n   int need_math = (MATH_LIBRARY[0] != '\\0');\n \n+  /* True if we should add -shared-libgcc to the command-line.  */\n+  int shared_libgcc = 1;\n+\n   /* The total number of arguments with the new stuff.  */\n   int argc;\n \n@@ -160,6 +163,9 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n \t      library = 0;\n \t      added -= 2;\n \t    }\n+\t  else if (strcmp (argv[i], \"-static-libgcc\") == 0 \n+\t\t   || strcmp (argv[i], \"-static\") == 0)\n+\t    shared_libgcc = 0;\n \t  else\n \t    /* Pass other options through.  */\n \t    continue;\n@@ -197,8 +203,14 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n       return;\n     }\n \n+  /* There's no point adding -shared-libgcc if we don't have a shared\n+     libgcc.  */\n+#ifndef ENABLE_SHARED_LIBGCC\n+  shared_libgcc = 0;\n+#endif\n+\n   /* Make sure to have room for the trailing NULL argument.  */\n-  num_args = argc + added + need_math + 1;\n+  num_args = argc + added + need_math + shared_libgcc + 1;\n   arglist = (const char **) xmalloc (num_args * sizeof (char *));\n \n   i = 0;\n@@ -258,6 +270,8 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n     }\n   if (saw_libc)\n     arglist[j++] = saw_libc;\n+  if (shared_libgcc)\n+    arglist[j++] = \"-shared-libgcc\";\n \n   arglist[j] = NULL;\n "}, {"sha": "9a7a9419d699631606bc563b193b0043c336f2ea", "filename": "gcc/gcc.c", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049f6ec972093cb435f6d842386872c1c6001a0c/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049f6ec972093cb435f6d842386872c1c6001a0c/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=049f6ec972093cb435f6d842386872c1c6001a0c", "patch": "@@ -268,6 +268,9 @@ static int execute\t\t\tPARAMS ((void));\n static void clear_args\t\t\tPARAMS ((void));\n static void fatal_error\t\t\tPARAMS ((int));\n static void set_input\t\t\tPARAMS ((const char *));\n+static void init_gcc_specs              PARAMS ((struct obstack *,\n+\t\t\t\t\t\t const char *,\n+\t\t\t\t\t\t const char *));\n \f\n /* Specs are strings containing lines, each of which (if not blank)\n is made up of a program name, and arguments separated by spaces.\n@@ -1252,6 +1255,35 @@ static struct spec_list *extra_specs = (struct spec_list *) 0;\n \n static struct spec_list *specs = (struct spec_list *) 0;\n \f\n+/* Add appropriate libgcc specs to OBSTACK, taking into account\n+   various permutations of -shared-libgcc, -shared, and such.  */\n+\n+static void\n+init_gcc_specs (obstack, shared_name, static_name)\n+     struct obstack *obstack;\n+     const char *shared_name;\n+     const char *static_name;\n+{\n+  char buffer[128];\n+\n+  /* If we see -shared-libgcc, then use the shared version.  */\n+  sprintf (buffer, \"%%{shared-libgcc:%s}\", shared_name);\n+  obstack_grow (obstack, buffer, strlen (buffer));\n+  /* If we see -static-libgcc, then use the shared version.  */\n+  sprintf (buffer, \"%%{static-libgcc:%s}\", static_name);\n+  obstack_grow (obstack, buffer, strlen (buffer));\n+  /* Otherwise, if we see -shared, then use the shared version.  */\n+  sprintf (buffer,\n+\t   \"%%{!shared-libgcc:%%{!static-libgcc:%%{shared:%s}}}\", \n+\t   shared_name);\n+  obstack_grow (obstack, buffer, strlen (buffer));\n+  /* Otherwise, use the static version.  */\n+  sprintf (buffer, \n+\t   \"%%{!shared-libgcc:%%{!static-libgcc:%%{!shared:%s}}}\", \n+\t   static_name);\n+  obstack_grow (obstack, buffer, strlen (buffer));\n+}\n+\n /* Initialize the specs lookup routines.  */\n \n static void\n@@ -1326,28 +1358,31 @@ init_spec ()\n        when given the proper command line arguments.  */\n     while (*p)\n       {\n-\tconst char *r;\n         if (in_sep && *p == '-' && strncmp (p, \"-lgcc\", 5) == 0)\n \t  {\n+\t    init_gcc_specs (&obstack,\n #ifdef NO_SHARED_LIBGCC_MULTILIB\n-\t    r = \"%{shared-libgcc:-lgcc_s}%{!shared-libgcc:-lgcc}\";\n+\t\t\t    \"-lgcc_s\"\n #else\n-\t    r = \"%{shared-libgcc:-lgcc_s%M}%{!shared-libgcc:-lgcc}\";\n+\t\t\t    \"-lgcc_s%M\"\n #endif\n-\t    obstack_grow (&obstack, r, strlen(r));\n+\t\t\t    ,\n+\t\t\t    \"-lgcc\");\n \t    p += 5;\n \t    in_sep = 0;\n \t  }\n \telse if (in_sep && *p == 'l' && strncmp (p, \"libgcc.a%s\", 10) == 0)\n \t  {\n \t    /* Ug.  We don't know shared library extensions.  Hope that\n \t       systems that use this form don't do shared libraries.  */\n+\t    init_gcc_specs (&obstack,\n #ifdef NO_SHARED_LIBGCC_MULTILIB\n-\t    r = \"%{shared-libgcc:-lgcc_s}%{!shared-libgcc:libgcc.a%s}\";\n+\t\t\t    \"-lgcc_s\"\n #else\n-\t    r = \"%{shared-libgcc:-lgcc_s%M}%{!shared-libgcc:libgcc.a%s}\";\n+\t\t\t    \"-lgcc_s%M\"\n #endif\n-\t    obstack_grow (&obstack, r, strlen(r));\n+\t\t\t    ,\n+\t\t\t    \"libgcc.a%s\");\n \t    p += 10;\n \t    in_sep = 0;\n \t  }"}, {"sha": "e1614919267a4213629709ea9f98880af7aedcca", "filename": "gcc/invoke.texi", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049f6ec972093cb435f6d842386872c1c6001a0c/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049f6ec972093cb435f6d842386872c1c6001a0c/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=049f6ec972093cb435f6d842386872c1c6001a0c", "patch": "@@ -3688,11 +3688,16 @@ of these is when the application wishes to throw and catch exceptions\n across different shared libraries.  In that case, each of the libraries\n as well as the application itself should use the shared @file{libgcc}.\n \n-At present the GCC driver makes no attempt to recognize the situations\n-in which the shared @file{libgcc} should be used, and defaults to using\n-the static @file{libgcc} always.  This will likely change in the future,\n-at which time @samp{-static-libgcc} becomes useful as a means for \n-overriding GCC's choice.\n+Therefore, whenever you specify the @samp{-shared} option, the GCC\n+driver automatically adds @samp{-shared-libgcc}, unless you explicitly\n+specify @samp{-static-libgcc}.  The G++ driver automatically adds\n+@samp{-shared-libgcc} when you build a main executable as well because\n+for C++ programs that is typically the right thing to do.\n+(Exception-handling will not work reliably otherwise.)\n+\n+However, when linking a main executable written in C, you must\n+explicitly say @samp{-shared-libgcc} if you want to use the shared\n+@file{libgcc}.\n \n @item -symbolic\n Bind references to global symbols when building a shared object.  Warn"}, {"sha": "640cd403ca33c64090bfd42a239622f24a99eb4c", "filename": "gcc/testsuite/lib/g++.exp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049f6ec972093cb435f6d842386872c1c6001a0c/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049f6ec972093cb435f6d842386872c1c6001a0c/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp?ref=049f6ec972093cb435f6d842386872c1c6001a0c", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 2000 Free Software Foundation, Inc.\n+# Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 2000, 2001 Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -97,6 +97,7 @@ proc g++_include_flags { args } {\n }\n \n proc g++_link_flags { args } {\n+    global rootme\n     global srcdir\n     global ld_library_path\n \n@@ -127,6 +128,7 @@ proc g++_link_flags { args } {\n       if [file exists \"${gccpath}/librx/librx.a\"] {\n           append flags \"-L${gccpath}/librx \"\n       }\n+      append ld_library_path \":${rootme}\"\n     } else {\n       global tool_root_dir;\n "}]}