{"sha": "c1153c1987ba906a8763a0c0de49fe2e6b3937f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzExNTNjMTk4N2JhOTA2YTg3NjNhMGMwZGU0OWZlMmU2YjM5MzdmMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-08-06T14:26:18Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-08-06T14:26:18Z"}, "message": "re PR c++/67130 (ICE: tree check: expected identifier_node, have template_decl in write_unqualified_id, at cp/mangle.c:1218)\n\n\tPR c++/67130\n\tPR c++/67131\n\tPR c++/66260\n\t* mangle.c (write_expression) [TEMPLATE_ID_EXPR]: Handle variable\n\ttemplates.\n\t* pt.c (tsubst_copy_and_build): Check for argument substitution\n\tfailure.\n\nFrom-SVN: r226676", "tree": {"sha": "acf5d40bd4846ad508391330ae43ab576f5f31b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acf5d40bd4846ad508391330ae43ab576f5f31b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1153c1987ba906a8763a0c0de49fe2e6b3937f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1153c1987ba906a8763a0c0de49fe2e6b3937f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1153c1987ba906a8763a0c0de49fe2e6b3937f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1153c1987ba906a8763a0c0de49fe2e6b3937f0/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "47486460a94e656b9c4da3e8f9dc3be8c0b9e657", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47486460a94e656b9c4da3e8f9dc3be8c0b9e657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47486460a94e656b9c4da3e8f9dc3be8c0b9e657"}], "stats": {"total": 68, "additions": 67, "deletions": 1}, "files": [{"sha": "e8d45dc7ce6cd155e315e72049301673abcacbb3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1153c1987ba906a8763a0c0de49fe2e6b3937f0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1153c1987ba906a8763a0c0de49fe2e6b3937f0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c1153c1987ba906a8763a0c0de49fe2e6b3937f0", "patch": "@@ -1,3 +1,13 @@\n+2015-08-06  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/67130\n+\tPR c++/67131\n+\tPR c++/66260\n+\t* mangle.c (write_expression) [TEMPLATE_ID_EXPR]: Handle variable\n+\ttemplates.\n+\t* pt.c (tsubst_copy_and_build): Check for argument substitution\n+\tfailure.\n+\n 2015-08-05  Jason Merrill  <jason@redhat.com>\n \n \t* pt.c (determine_specialization): Print candidates after 'no"}, {"sha": "4518f20cc8eed8ff95c5a4ee899dfe5a6a75656e", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1153c1987ba906a8763a0c0de49fe2e6b3937f0/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1153c1987ba906a8763a0c0de49fe2e6b3937f0/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=c1153c1987ba906a8763a0c0de49fe2e6b3937f0", "patch": "@@ -2822,7 +2822,9 @@ write_expression (tree expr)\n     {\n       tree fn = TREE_OPERAND (expr, 0);\n       if (is_overloaded_fn (fn))\n-\tfn = DECL_NAME (get_first_fn (fn));\n+\tfn = get_first_fn (fn);\n+      if (DECL_P (fn))\n+\tfn = DECL_NAME (fn);\n       if (IDENTIFIER_OPNAME_P (fn))\n \twrite_string (\"on\");\n       write_unqualified_id (fn);"}, {"sha": "c3bafd3d37ccda358ce21222663eb4d83b59e206", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1153c1987ba906a8763a0c0de49fe2e6b3937f0/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1153c1987ba906a8763a0c0de49fe2e6b3937f0/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c1153c1987ba906a8763a0c0de49fe2e6b3937f0", "patch": "@@ -14752,6 +14752,8 @@ tsubst_copy_and_build (tree t,\n \n \tif (targs)\n \t  targs = tsubst_template_args (targs, args, complain, in_decl);\n+\tif (targs == error_mark_node)\n+\t  return error_mark_node;\n \n \tif (variable_template_p (templ))\n \t  {"}, {"sha": "a43149d9b557dc4a789c13a440b2bed237b56356", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ42.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1153c1987ba906a8763a0c0de49fe2e6b3937f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ42.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1153c1987ba906a8763a0c0de49fe2e6b3937f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ42.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ42.C?ref=c1153c1987ba906a8763a0c0de49fe2e6b3937f0", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/67131\n+// { dg-do compile { target c++14 } }\n+\n+template <typename T> typename T::_ type;\n+template <template <typename...> class> struct A;\n+template <template <typename> class f> A<f> metafunction;\n+namespace detail {\n+template <typename> struct _decltype;\n+}\n+template <template <typename...> class F> struct A {\n+  template <typename... T>\n+  auto operator()() -> decltype(type<F<detail::_decltype<T>...>>);\n+};\n+template <typename F> auto valid_call(F f) -> decltype(f());\n+constexpr auto valid_call(...) { return 0; }\n+template <typename> struct no_type;\n+static_assert(!valid_call(metafunction<no_type>),\"\"); // { dg-error \"\" }"}, {"sha": "414802fd6c7944cc3d5a6ae1a2f29379be2fc2e6", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ43.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1153c1987ba906a8763a0c0de49fe2e6b3937f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ43.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1153c1987ba906a8763a0c0de49fe2e6b3937f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ43.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ43.C?ref=c1153c1987ba906a8763a0c0de49fe2e6b3937f0", "patch": "@@ -0,0 +1,35 @@\n+// PR c++/67130\n+// { dg-do compile { target c++14 } }\n+\n+namespace std {\n+template <typename> struct __success_type;\n+template <typename> void declval();\n+template <typename> class decay {\n+public:\n+  typedef int type;\n+};\n+template <typename...> struct common_type;\n+struct A {\n+  template <typename, typename _Up>\n+  static __success_type<typename decay<decltype(declval<_Up>)>::type> _S_test;\n+};\n+template <typename _Tp, typename _Up> struct __common_type_impl : A {\n+  typedef decltype(_S_test<_Tp, _Up>) type;\n+};\n+template <typename _Tp, typename _Up>\n+struct common_type<_Tp, _Up> : __common_type_impl<_Tp, _Up> {};\n+}\n+template <typename> struct B { struct _; };\n+template <typename T> typename B<T>::_ type;\n+template <template <typename...> class> struct C;\n+template <template <typename...> class f> C<f> metafunction;\n+template <typename T> struct B<T>::_ {};\n+namespace detail {\n+template <typename> struct _decltype;\n+}\n+template <template <typename...> class F> struct C {\n+  template <typename... T>\n+  auto operator()(T...)\n+      -> decltype(type<typename F<detail::_decltype<T>...>::type>);\n+};\n+auto common_type = metafunction<std::common_type>(0, 0);"}]}