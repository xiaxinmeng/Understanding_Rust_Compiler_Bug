{"sha": "c4792bd1de0621932a47fb86aca09fafafdb2972", "node_id": "C_kwDOANBUbNoAKGM0NzkyYmQxZGUwNjIxOTMyYTQ3ZmI4NmFjYTA5ZmFmYWZkYjI5NzI", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-03-23T20:50:09Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-03-23T21:38:29Z"}, "message": "c++: constexpr PMF conversion [PR105996]\n\nHere, we were calling build_reinterpret_cast regardless of whether there was\nactually a cast, and that now sets REINTERPRET_CAST_P.  But that\noptimization seems dodgy anyway, as it involves NOP_EXPR from one\nRECORD_TYPE to another and we try to reserve NOP_EXPR for fundamental types.\nAnd the generated code seems the same, so let's drop it.  And also strip\nlocation wrappers.\n\n\tPR c++/105996\n\ngcc/cp/ChangeLog:\n\n\t* typeck.cc (build_ptrmemfunc): Drop 0-offset optimization\n\tand location wrappers.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/constexpr-pmf3.C: New test.", "tree": {"sha": "f6d57832dfe5d9b6f4f015331245cecac41c42bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6d57832dfe5d9b6f4f015331245cecac41c42bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4792bd1de0621932a47fb86aca09fafafdb2972", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4792bd1de0621932a47fb86aca09fafafdb2972", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4792bd1de0621932a47fb86aca09fafafdb2972", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4792bd1de0621932a47fb86aca09fafafdb2972/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fbeff66684d95417646aaa22d0a8f1ec9786299", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fbeff66684d95417646aaa22d0a8f1ec9786299", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fbeff66684d95417646aaa22d0a8f1ec9786299"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "8b60cbbc167077a141729c5992f76849464bd6a2", "filename": "gcc/cp/typeck.cc", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4792bd1de0621932a47fb86aca09fafafdb2972/gcc%2Fcp%2Ftypeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4792bd1de0621932a47fb86aca09fafafdb2972/gcc%2Fcp%2Ftypeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.cc?ref=c4792bd1de0621932a47fb86aca09fafafdb2972", "patch": "@@ -9960,18 +9960,15 @@ build_ptrmemfunc (tree type, tree pfn, int force, bool c_cast_p,\n       if (n == error_mark_node)\n \treturn error_mark_node;\n \n+      STRIP_ANY_LOCATION_WRAPPER (pfn);\n+\n       /* We don't have to do any conversion to convert a\n \t pointer-to-member to its own type.  But, we don't want to\n \t just return a PTRMEM_CST if there's an explicit cast; that\n \t cast should make the expression an invalid template argument.  */\n-      if (TREE_CODE (pfn) != PTRMEM_CST)\n-\t{\n-\t  if (same_type_p (to_type, pfn_type))\n-\t    return pfn;\n-\t  else if (integer_zerop (n) && TREE_CODE (pfn) != CONSTRUCTOR)\n-\t    return build_reinterpret_cast (input_location, to_type, pfn, \n-                                           complain);\n-\t}\n+      if (TREE_CODE (pfn) != PTRMEM_CST\n+\t  && same_type_p (to_type, pfn_type))\n+\treturn pfn;\n \n       if (TREE_SIDE_EFFECTS (pfn))\n \tpfn = save_expr (pfn);"}, {"sha": "14daea312b7a8c23aef0d6c579611e12767dc13a", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-pmf3.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4792bd1de0621932a47fb86aca09fafafdb2972/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-pmf3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4792bd1de0621932a47fb86aca09fafafdb2972/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-pmf3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-pmf3.C?ref=c4792bd1de0621932a47fb86aca09fafafdb2972", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/105996\n+// { dg-do compile { target c++11 } }\n+\n+struct A {\n+  void CB() {}\n+};\n+struct B : public A { };\n+\n+using APMF = void (A::*)();\n+using BPMF = void (B::*)();\n+\n+constexpr APMF foo () { return &A::CB; };\n+static constexpr BPMF b = foo();"}]}