{"sha": "2b75b3b6a4ddc0d65a84a0cc4b00c47ae70e52c0", "node_id": "C_kwDOANBUbNoAKDJiNzViM2I2YTRkZGMwZDY1YTg0YTBjYzRiMDBjNDdhZTcwZTUyYzA", "commit": {"author": {"name": "Tim Lange", "email": "mail@tim-lange.me", "date": "2022-08-12T08:26:14Z"}, "committer": {"name": "Tim Lange", "email": "mail@tim-lange.me", "date": "2022-08-12T08:37:26Z"}, "message": "analyzer: consider that realloc could shrink the buffer [PR106539]\n\nThis patch adds the \"shrinks buffer\" case to the success_with_move\nmodelling of realloc.\n\nRegression-tested on Linux x86-64, further ran the analyzer tests with\nthe -m32 option.\n\n2022-08-11  Tim Lange  <mail@tim-lange.me>\n\ngcc/analyzer/ChangeLog:\n\n\tPR analyzer/106539\n\t* region-model-impl-calls.cc (region_model::impl_call_realloc):\n\tUse the result of get_copied_size as the size for the\n\tsized_regions in realloc.\n\t(success_with_move::get_copied_size): New function.\n\ngcc/testsuite/ChangeLog:\n\n\tPR analyzer/106539\n\t* gcc.dg/analyzer/pr106539.c: New test.\n\t* gcc.dg/analyzer/realloc-5.c: New test.", "tree": {"sha": "7781fbbb7f03c5e253ef55313521fdae98dcc935", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7781fbbb7f03c5e253ef55313521fdae98dcc935"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b75b3b6a4ddc0d65a84a0cc4b00c47ae70e52c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b75b3b6a4ddc0d65a84a0cc4b00c47ae70e52c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b75b3b6a4ddc0d65a84a0cc4b00c47ae70e52c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b75b3b6a4ddc0d65a84a0cc4b00c47ae70e52c0/comments", "author": {"login": "timll", "id": 10032775, "node_id": "MDQ6VXNlcjEwMDMyNzc1", "avatar_url": "https://avatars.githubusercontent.com/u/10032775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timll", "html_url": "https://github.com/timll", "followers_url": "https://api.github.com/users/timll/followers", "following_url": "https://api.github.com/users/timll/following{/other_user}", "gists_url": "https://api.github.com/users/timll/gists{/gist_id}", "starred_url": "https://api.github.com/users/timll/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timll/subscriptions", "organizations_url": "https://api.github.com/users/timll/orgs", "repos_url": "https://api.github.com/users/timll/repos", "events_url": "https://api.github.com/users/timll/events{/privacy}", "received_events_url": "https://api.github.com/users/timll/received_events", "type": "User", "site_admin": false}, "committer": {"login": "timll", "id": 10032775, "node_id": "MDQ6VXNlcjEwMDMyNzc1", "avatar_url": "https://avatars.githubusercontent.com/u/10032775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timll", "html_url": "https://github.com/timll", "followers_url": "https://api.github.com/users/timll/followers", "following_url": "https://api.github.com/users/timll/following{/other_user}", "gists_url": "https://api.github.com/users/timll/gists{/gist_id}", "starred_url": "https://api.github.com/users/timll/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timll/subscriptions", "organizations_url": "https://api.github.com/users/timll/orgs", "repos_url": "https://api.github.com/users/timll/repos", "events_url": "https://api.github.com/users/timll/events{/privacy}", "received_events_url": "https://api.github.com/users/timll/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1595794f804ed3e925dcdf5f21b7fa762c74ca15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1595794f804ed3e925dcdf5f21b7fa762c74ca15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1595794f804ed3e925dcdf5f21b7fa762c74ca15"}], "stats": {"total": 107, "additions": 101, "deletions": 6}, "files": [{"sha": "8eebd122d42d7d9982fffd7de537ed5700d34aa5", "filename": "gcc/analyzer/region-model-impl-calls.cc", "status": "modified", "additions": 42, "deletions": 6, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b75b3b6a4ddc0d65a84a0cc4b00c47ae70e52c0/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b75b3b6a4ddc0d65a84a0cc4b00c47ae70e52c0/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc?ref=2b75b3b6a4ddc0d65a84a0cc4b00c47ae70e52c0", "patch": "@@ -849,15 +849,17 @@ region_model::impl_call_realloc (const call_details &cd)\n \t  const svalue *old_size_sval = model->get_dynamic_extents (freed_reg);\n \t  if (old_size_sval)\n \t    {\n-\t      const region *sized_old_reg\n+\t      const svalue *copied_size_sval\n+\t\t= get_copied_size (old_size_sval, new_size_sval);\n+\t      const region *copied_old_reg\n \t\t= model->m_mgr->get_sized_region (freed_reg, NULL,\n-\t\t\t\t\t\t  old_size_sval);\n+\t\t\t\t\t\t  copied_size_sval);\n \t      const svalue *buffer_content_sval\n-\t\t= model->get_store_value (sized_old_reg, cd.get_ctxt ());\n-\t      const region *sized_new_reg\n+\t\t= model->get_store_value (copied_old_reg, cd.get_ctxt ());\n+\t      const region *copied_new_reg\n \t\t= model->m_mgr->get_sized_region (new_reg, NULL,\n-\t\t\t\t\t\t  old_size_sval);\n-\t      model->set_value (sized_new_reg, buffer_content_sval,\n+\t\t\t\t\t\t  copied_size_sval);\n+\t      model->set_value (copied_new_reg, buffer_content_sval,\n \t\t\t\tcd.get_ctxt ());\n \t    }\n \t  else\n@@ -891,6 +893,40 @@ region_model::impl_call_realloc (const call_details &cd)\n       else\n \treturn true;\n     }\n+\n+  private:\n+    /* Return the lesser of OLD_SIZE_SVAL and NEW_SIZE_SVAL.\n+       If either one is symbolic, the symbolic svalue is returned.  */\n+    const svalue *get_copied_size (const svalue *old_size_sval,\n+\t\t\t\t   const svalue *new_size_sval) const\n+    {\n+      tree old_size_cst = old_size_sval->maybe_get_constant ();\n+      tree new_size_cst = new_size_sval->maybe_get_constant ();\n+\n+      if (old_size_cst && new_size_cst)\n+\t{\n+\t  /* Both are constants and comparable.  */\n+\t  tree cmp = fold_binary (LT_EXPR, boolean_type_node,\n+\t\t\t\t  old_size_cst, new_size_cst);\n+\n+\t  if (cmp == boolean_true_node)\n+\t    return old_size_sval;\n+\t  else\n+\t    return new_size_sval;\n+\t}\n+      else if (new_size_cst)\n+\t{\n+\t  /* OLD_SIZE_SVAL is symbolic, so return that.  */\n+\t  return old_size_sval;\n+\t}\n+      else\n+\t{\n+\t  /* NEW_SIZE_SVAL is symbolic or both are symbolic.\n+\t     Return NEW_SIZE_SVAL, because implementations of realloc\n+\t     probably only moves the buffer if the new size is larger.  */\n+\t  return new_size_sval;\n+\t}\n+    }\n   };\n \n   /* Body of region_model::impl_call_realloc.  */"}, {"sha": "fd270868e36252e53df37dc5ac211338e96c5cb2", "filename": "gcc/testsuite/gcc.dg/analyzer/pr106539.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b75b3b6a4ddc0d65a84a0cc4b00c47ae70e52c0/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr106539.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b75b3b6a4ddc0d65a84a0cc4b00c47ae70e52c0/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr106539.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr106539.c?ref=2b75b3b6a4ddc0d65a84a0cc4b00c47ae70e52c0", "patch": "@@ -0,0 +1,15 @@\n+#include <stdlib.h>\n+\n+void *test (void)\n+{\n+  void **p = (void **)malloc (sizeof (void *) * 2);\n+  if (!p)\n+    return NULL;\n+  p[0] = malloc(10);\n+  p[1] = malloc(20); /* { dg-message \"allocated here\" }  */\n+  void *q = realloc (p, sizeof (void *)); /* { dg-message \"when 'realloc' succeeds, moving buffer\" } */\n+  if (!q)\n+  /* { dg-warning \"leak of '<unknown>'\" \"leak of unknown\" { target *-*-* } .-1 } */\n+    return p;\n+  return q;\n+}"}, {"sha": "433c513d7f5ce470a061827b9436697b8da04b66", "filename": "gcc/testsuite/gcc.dg/analyzer/realloc-5.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b75b3b6a4ddc0d65a84a0cc4b00c47ae70e52c0/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Frealloc-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b75b3b6a4ddc0d65a84a0cc4b00c47ae70e52c0/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Frealloc-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Frealloc-5.c?ref=2b75b3b6a4ddc0d65a84a0cc4b00c47ae70e52c0", "patch": "@@ -0,0 +1,44 @@\n+#include \"analyzer-decls.h\"\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+#define NULL ((void *)0)\n+\n+extern void *malloc (size_t __size)\n+  __attribute__ ((__nothrow__ , __leaf__))\n+  __attribute__ ((__malloc__))\n+  __attribute__ ((__alloc_size__ (1)));\n+extern void *realloc (void *__ptr, size_t __size)\n+  __attribute__ ((__nothrow__ , __leaf__))\n+  __attribute__ ((__warn_unused_result__))\n+  __attribute__ ((__alloc_size__ (2)));\n+extern void free (void *__ptr)\n+  __attribute__ ((__nothrow__ , __leaf__));\n+extern void *memset (void *__ptr, int __value, size_t __size);\n+\n+/* realloc where the region shrinks on success_with_move.  */\n+\n+void test_1 ()\n+{\n+  char *p = malloc (16);\n+  if (!p)\n+    return;\n+  memset (p, 1, 16);\n+\n+  char *q = realloc (p, 8);\n+  if (!q)\n+    {\n+      free (p);\n+      return;\n+    }\n+  else if (p != q)\n+    {\n+      __analyzer_dump_capacity (q); /* { dg-warning \"capacity: '\\\\(\\[^\\n\\r\\]*\\\\)8'\" } */\n+      __analyzer_eval (q[8] == 1); /* { dg-line eval } */\n+    \n+      /* { dg-warning \"UNKNOWN\" \"warning\" { target *-*-* } eval } */\n+      /* { dg-warning \"use of uninitialized value\" \"warning\" { target *-*-* } eval } */\n+    }\n+\n+  free (q);\n+}"}]}