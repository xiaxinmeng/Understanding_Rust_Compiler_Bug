{"sha": "01486c14135646ea011dfa2c3a1dfbf59abbe436", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE0ODZjMTQxMzU2NDZlYTAxMWRmYTJjM2ExZGZiZjU5YWJiZTQzNg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-04-15T13:59:04Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-04-17T15:45:43Z"}, "message": "Remove fatal error\n\nThis fatal error stops the compiler in its tracks and will mean the Typed\nHIR dump will not occur limiting how much we can debug errors/bugs in the\ncompiler.\n\nFixes #327", "tree": {"sha": "6f78ef05ebc4c7a4cd453c21043c33fb11d5e139", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f78ef05ebc4c7a4cd453c21043c33fb11d5e139"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01486c14135646ea011dfa2c3a1dfbf59abbe436", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01486c14135646ea011dfa2c3a1dfbf59abbe436", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01486c14135646ea011dfa2c3a1dfbf59abbe436", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01486c14135646ea011dfa2c3a1dfbf59abbe436/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed651fcdec170456f7460703edbd0ca5901f0026", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed651fcdec170456f7460703edbd0ca5901f0026", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed651fcdec170456f7460703edbd0ca5901f0026"}], "stats": {"total": 24, "additions": 6, "deletions": 18}, "files": [{"sha": "6b6eed07df894367131beceabcdfa9dd8aeed195", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01486c14135646ea011dfa2c3a1dfbf59abbe436/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01486c14135646ea011dfa2c3a1dfbf59abbe436/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=01486c14135646ea011dfa2c3a1dfbf59abbe436", "patch": "@@ -290,11 +290,7 @@ class TypeCheckExpr : public TypeCheckBase\n \n     auto result = lhs->unify (rhs);\n     if (result->get_kind () == TyTy::TypeKind::ERROR)\n-      {\n-\trust_error_at (expr.get_locus (),\n-\t\t       \"type resolution failure in AssignmentExpr\");\n-\treturn;\n-      }\n+      return;\n \n     // in the case of declare first for an ADT Type:\n     //"}, {"sha": "e0e7adcd75c601c2106caa4a5f1245a9b15768f4", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01486c14135646ea011dfa2c3a1dfbf59abbe436/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01486c14135646ea011dfa2c3a1dfbf59abbe436/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=01486c14135646ea011dfa2c3a1dfbf59abbe436", "patch": "@@ -76,11 +76,7 @@ class TypeCheckStmt : public TypeCheckBase\n       {\n \tauto unified_ty = specified_ty->unify (init_expr_ty);\n \tif (unified_ty->get_kind () == TyTy::TypeKind::ERROR)\n-\t  {\n-\t    rust_fatal_error (stmt.get_locus (),\n-\t\t\t      \"failure in setting up let stmt type\");\n-\t    return;\n-\t  }\n+\t  return;\n \n \tcontext->insert_type (stmt.get_mappings (), unified_ty);\n       }"}, {"sha": "714a6be7afb55713d39105b393a7ed67dddc4ec8", "filename": "gcc/testsuite/rust.test/xfail_compile/arrays1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01486c14135646ea011dfa2c3a1dfbf59abbe436/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Farrays1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01486c14135646ea011dfa2c3a1dfbf59abbe436/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Farrays1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Farrays1.rs?ref=01486c14135646ea011dfa2c3a1dfbf59abbe436", "patch": "@@ -1,5 +1,4 @@\n fn main() {\n     let xs: [i32; 5] = [1, 2, 3, 4, 5];\n     let a: bool = xs[0]; // { dg-error \"expected .bool. got .i32.\" }\n-    // { dg-error \"failure in setting up let stmt type\" \"\" { target { *-*-* } } .-1 }\n }"}, {"sha": "31ae1e230945dc2e5fe7e4a4d0a088216d4cd41a", "filename": "gcc/testsuite/rust.test/xfail_compile/arrays2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01486c14135646ea011dfa2c3a1dfbf59abbe436/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Farrays2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01486c14135646ea011dfa2c3a1dfbf59abbe436/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Farrays2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Farrays2.rs?ref=01486c14135646ea011dfa2c3a1dfbf59abbe436", "patch": "@@ -1,5 +1,4 @@\n fn main() {\n     let array: [i32; 5] = [1, 2, 3]; // { dg-error \"mismatch in array capacity\" }\n-    // { dg-error \"expected ..i32:5.. got ..i32:3..\" \"\" { target { *-*-* } } .-1 }\n-    // { dg-error \"failure in setting up let stmt type\" \"\" { target { *-*-* } } .-2 }\n+                                     // { dg-error \"expected ..i32:5.. got ..i32:3..\" \"\" { target { *-*-* } } .-1 }\n }"}, {"sha": "93de439704fde9ecaeba299915fb34f32b67be16", "filename": "gcc/testsuite/rust.test/xfail_compile/bad_type1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01486c14135646ea011dfa2c3a1dfbf59abbe436/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fbad_type1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01486c14135646ea011dfa2c3a1dfbf59abbe436/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fbad_type1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fbad_type1.rs?ref=01486c14135646ea011dfa2c3a1dfbf59abbe436", "patch": "@@ -1,4 +1,3 @@\n fn main() {\n     let logical: bool = 123; // { dg-error \"expected .bool. got .<integer>.\" }\n-    // { dg-error \"failure in setting up let stmt type\" \"\" { target { *-*-* } } .-1 }\n }"}, {"sha": "7042099b4593b73646ffd5763077a6e057f33d91", "filename": "gcc/testsuite/rust.test/xfail_compile/generics1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01486c14135646ea011dfa2c3a1dfbf59abbe436/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01486c14135646ea011dfa2c3a1dfbf59abbe436/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics1.rs?ref=01486c14135646ea011dfa2c3a1dfbf59abbe436", "patch": "@@ -6,6 +6,6 @@ fn main() {\n     let a2: GenericStruct<i8>;\n     a2 = GenericStruct::<_>(1, 456);\n \n-    let b2: i32 = a2.0; // { dg-error \"failure in setting up let stmt type\" }\n+    let b2: i32 = a2.0;\n     let c2: usize = a2.1;\n }"}, {"sha": "eb53c2415eeb118b5c0670adfb1196bc09a8392f", "filename": "gcc/testsuite/rust.test/xfail_compile/generics2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01486c14135646ea011dfa2c3a1dfbf59abbe436/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01486c14135646ea011dfa2c3a1dfbf59abbe436/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics2.rs?ref=01486c14135646ea011dfa2c3a1dfbf59abbe436", "patch": "@@ -6,6 +6,6 @@ fn main() {\n     let a2: GenericStruct<i8>;\n     a2 = GenericStruct(1, 456);\n \n-    let b2: i32 = a2.0; // { dg-error \"failure in setting up let stmt type\" }\n+    let b2: i32 = a2.0;\n     let c2: usize = a2.1;\n }"}, {"sha": "bc49a656356c4a31cd26a40bc75411330c26a841", "filename": "gcc/testsuite/rust.test/xfail_compile/generics3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01486c14135646ea011dfa2c3a1dfbf59abbe436/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01486c14135646ea011dfa2c3a1dfbf59abbe436/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics3.rs?ref=01486c14135646ea011dfa2c3a1dfbf59abbe436", "patch": "@@ -5,6 +5,6 @@ fn main() {\n     let a2;\n     a2 = GenericStruct::<i8>(1, 456);\n \n-    let b2: i32 = a2.0; // { dg-error \"failure in setting up let stmt type\" }\n+    let b2: i32 = a2.0;\n     let c2: usize = a2.1;\n }"}, {"sha": "84179b137272a5d2c9c07fffad0cf799cb198574", "filename": "gcc/testsuite/rust.test/xfail_compile/tuple1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01486c14135646ea011dfa2c3a1dfbf59abbe436/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ftuple1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01486c14135646ea011dfa2c3a1dfbf59abbe436/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ftuple1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ftuple1.rs?ref=01486c14135646ea011dfa2c3a1dfbf59abbe436", "patch": "@@ -1,4 +1,3 @@\n-// { dg-excess-errors \"Noisy error and debug\" }\n fn main() {\n     let a: (i32, bool) = (123, 123); // { dg-error \"expected .bool. got .<integer>.\" }\n     let b;"}]}