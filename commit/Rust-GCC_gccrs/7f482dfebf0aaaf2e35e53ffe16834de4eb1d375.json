{"sha": "7f482dfebf0aaaf2e35e53ffe16834de4eb1d375", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y0ODJkZmViZjBhYWFmMmUzNWU1M2ZmZTE2ODM0ZGU0ZWIxZDM3NQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-06-12T10:31:04Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-06-12T10:31:04Z"}, "message": "re PR rtl-optimization/32293 (internal compiler error: in do_SUBST, at combine.c:502)\n\n\tPR rtl-optimization/32293\n\t* combine.c (simplify_if_then_else): Truncate return from\n\tnonzero_bits() to correct mode.\n\ntestsuite/ChangeLog:\n\t\n\tPR rtl-optimization/32293\n\t* gcc.dg/pr32293.c: New test.\n\nFrom-SVN: r125643", "tree": {"sha": "3362e42dd7a91d98b073c7106e0c583ff2c036c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3362e42dd7a91d98b073c7106e0c583ff2c036c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f482dfebf0aaaf2e35e53ffe16834de4eb1d375", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f482dfebf0aaaf2e35e53ffe16834de4eb1d375", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f482dfebf0aaaf2e35e53ffe16834de4eb1d375", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f482dfebf0aaaf2e35e53ffe16834de4eb1d375/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9883e373fc9bbdf33e1913f184f3768835b88f88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9883e373fc9bbdf33e1913f184f3768835b88f88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9883e373fc9bbdf33e1913f184f3768835b88f88"}], "stats": {"total": 82, "additions": 80, "deletions": 2}, "files": [{"sha": "1125e95cc16f0baff456bcdf1af0a93c4969de72", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f482dfebf0aaaf2e35e53ffe16834de4eb1d375/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f482dfebf0aaaf2e35e53ffe16834de4eb1d375/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f482dfebf0aaaf2e35e53ffe16834de4eb1d375", "patch": "@@ -1,3 +1,9 @@\n+2007-06-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR rtl-optimization/32293\n+\t* combine.c (simplify_if_then_else): Truncate return from\n+\tnonzero_bits() to correct mode.\n+\n 2007-06-12  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* fold-const (fold_binary) [RDIV_EXPR]: Also optimize a/cbrt(b/c)"}, {"sha": "6fbf81680495891bc45be8e0367871e038db068a", "filename": "gcc/combine.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f482dfebf0aaaf2e35e53ffe16834de4eb1d375/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f482dfebf0aaaf2e35e53ffe16834de4eb1d375/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=7f482dfebf0aaaf2e35e53ffe16834de4eb1d375", "patch": "@@ -5210,11 +5210,17 @@ simplify_if_then_else (rtx x)\n \n       if (true_code == EQ && true_val == const0_rtx\n \t  && exact_log2 (nzb = nonzero_bits (from, GET_MODE (from))) >= 0)\n-\tfalse_code = EQ, false_val = GEN_INT (nzb);\n+\t{\n+\t  false_code = EQ;\n+\t  false_val = GEN_INT (trunc_int_for_mode (nzb, GET_MODE (from)));\n+\t}\n       else if (true_code == EQ && true_val == const0_rtx\n \t       && (num_sign_bit_copies (from, GET_MODE (from))\n \t\t   == GET_MODE_BITSIZE (GET_MODE (from))))\n-\tfalse_code = EQ, false_val = constm1_rtx;\n+\t{\n+\t  false_code = EQ;\n+\t  false_val = constm1_rtx;\n+\t}\n \n       /* Now simplify an arm if we know the value of the register in the\n \t branch and it is used in the arm.  Be careful due to the potential"}, {"sha": "756ac4cfc78d8c3af38a1eeacf380e1419193cac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f482dfebf0aaaf2e35e53ffe16834de4eb1d375/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f482dfebf0aaaf2e35e53ffe16834de4eb1d375/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7f482dfebf0aaaf2e35e53ffe16834de4eb1d375", "patch": "@@ -1,3 +1,8 @@\n+2007-06-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR rtl-optimization/32293\n+\t* gcc.dg/pr32293.c: New test.\n+\n 2007-06-12  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.dg/builtins-11.c: Also check folding of a/cbrt(b/c)."}, {"sha": "fb1268ba1d676dc16cf0a70494a30b5bcf394a1b", "filename": "gcc/testsuite/gcc.dg/pr32293.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f482dfebf0aaaf2e35e53ffe16834de4eb1d375/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32293.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f482dfebf0aaaf2e35e53ffe16834de4eb1d375/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32293.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32293.c?ref=7f482dfebf0aaaf2e35e53ffe16834de4eb1d375", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+unsigned int _IDEC_glbround;\n+unsigned int _IDEC_glbflags;\n+typedef unsigned UINT32;\n+typedef signed SINT32;\n+typedef unsigned long long UINT64;\n+typedef signed long long SINT64;\n+typedef\n+__attribute__ ((aligned(16)))\n+     struct {\n+       UINT64 w[2];\n+     } UINT128;\n+\n+static __inline UINT64\n+unpack_BID128 (UINT64 * psign_x, int *pexponent_x,\n+        UINT128 * pcoefficient_x, UINT128 * px) {\n+  UINT128 coeff;\n+  UINT64 ex;\n+  *psign_x = (px->w[1]) & 0x8000000000000000ull;\n+  ex = (px->w[1]) >> 49;\n+  *pexponent_x = ((int) ex) & 0x3fff;\n+  return coeff.w[0] | coeff.w[1];\n+}\n+\n+static __inline UINT32\n+get_BID32 (UINT32 sgn, int expon, UINT64 coeff, int rmode,\n+    unsigned *fpsc) {\n+  UINT32 r;\n+\n+  if (((unsigned) expon) > 191) {\n+      r = sgn | 0x78000000ul;\n+      switch (rmode) {\n+      case 0x00002:\n+        if (sgn)\n+          r = sgn | 0x77f8967f;\n+      }\n+      return r;\n+  }\n+  r = expon;\n+  return r;\n+}\n+\n+UINT32\n+bid128_to_bid32 (UINT128 x)\n+{\n+  UINT128 *px;\n+  UINT128 CX;\n+  UINT64 sign_x;\n+  UINT32 res;\n+  int exponent_x = 0;\n+  px = &x;\n+  if (!unpack_BID128 (&sign_x, &exponent_x, &CX, px)) {\n+      return(res);\n+  }\n+  res = get_BID32 ((UINT32) (sign_x >> 32),\n+        exponent_x, CX.w[0], _IDEC_glbround, &_IDEC_glbflags);\n+  return(res);;\n+}\n+"}]}