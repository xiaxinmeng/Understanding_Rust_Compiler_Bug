{"sha": "60e8b9f0d18271ca2cb46f1b732ba4328eacf6b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBlOGI5ZjBkMTgyNzFjYTJjYjQ2ZjFiNzMyYmE0MzI4ZWFjZjZiNA==", "commit": {"author": {"name": "Graham Stott", "email": "grahams@redhat.com", "date": "2002-01-16T09:24:00Z"}, "committer": {"name": "Graham Stott", "email": "grahams@gcc.gnu.org", "date": "2002-01-16T09:24:00Z"}, "message": "calls.c (try_to_integrate): Use \"(size_t)\" intermediate cast and when casting an integer literal to \"rtx\"...\n\n\n        * calls.c (try_to_integrate): Use \"(size_t)\" intermediate\n        cast and when casting an integer literal to \"rtx\" pointer.\n        (expand_call): Likewise.\n        * flow.c (try_pre_increment): Likewise.\n        (find_use_as_address): Likewise.\n        * integrate.c (expand_iline_function): Likewise.\n        * regmove.c (try_auto_increment): Likewise.\n\nFrom-SVN: r48906", "tree": {"sha": "062eb3cbbdeafb4362c9901f3c838edaf78c63b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/062eb3cbbdeafb4362c9901f3c838edaf78c63b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60e8b9f0d18271ca2cb46f1b732ba4328eacf6b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60e8b9f0d18271ca2cb46f1b732ba4328eacf6b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60e8b9f0d18271ca2cb46f1b732ba4328eacf6b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60e8b9f0d18271ca2cb46f1b732ba4328eacf6b4/comments", "author": null, "committer": null, "parents": [{"sha": "7b25b076d2982bb836a35a985bcb47aec7ac17bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b25b076d2982bb836a35a985bcb47aec7ac17bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b25b076d2982bb836a35a985bcb47aec7ac17bc"}], "stats": {"total": 36, "additions": 23, "deletions": 13}, "files": [{"sha": "afc3ec461ecad0b0bd45d3f232676e6c387c55ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60e8b9f0d18271ca2cb46f1b732ba4328eacf6b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60e8b9f0d18271ca2cb46f1b732ba4328eacf6b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=60e8b9f0d18271ca2cb46f1b732ba4328eacf6b4", "patch": "@@ -1,3 +1,13 @@\n+2002-01-26  Graham Stott  <grahams@redhat.com>\n+\n+\t* calls.c (try_to_integrate): Use \"(size_t)\" intermediate\n+\tcast and when casting an integer literal to \"rtx\" pointer.\n+\t(expand_call): Likewise.\n+\t* flow.c (try_pre_increment): Likewise.\n+\t(find_use_as_address): Likewise.\n+\t* integrate.c (expand_iline_function): Likewise.\n+\t* regmove.c (try_auto_increment): Likewise.\n+\n 2002-01-26  Graham Stott  <grahams@redhat.com>\n \n \t* sched-rgn.c (passed): Use sbitmap_free."}, {"sha": "3d4540d6094a974ea0f3a4325fb1ff5320c09f37", "filename": "gcc/calls.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60e8b9f0d18271ca2cb46f1b732ba4328eacf6b4/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60e8b9f0d18271ca2cb46f1b732ba4328eacf6b4/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=60e8b9f0d18271ca2cb46f1b732ba4328eacf6b4", "patch": "@@ -1822,7 +1822,7 @@ try_to_integrate (fndecl, actparms, target, ignore, type, structure_value_addr)\n   timevar_pop (TV_INTEGRATION);\n \n   /* If inlining succeeded, return.  */\n-  if (temp != (rtx) (HOST_WIDE_INT) - 1)\n+  if (temp != (rtx) (size_t) - 1)\n     {\n       if (ACCUMULATE_OUTGOING_ARGS)\n \t{\n@@ -1902,7 +1902,7 @@ try_to_integrate (fndecl, actparms, target, ignore, type, structure_value_addr)\n       warning (\"called from here\");\n     }\n   mark_addressable (fndecl);\n-  return (rtx) (HOST_WIDE_INT) - 1;\n+  return (rtx) (size_t) - 1;\n }\n \n /* We need to pop PENDING_STACK_ADJUST bytes.  But, if the arguments\n@@ -2285,7 +2285,7 @@ expand_call (exp, target, ignore)\n       rtx temp = try_to_integrate (fndecl, actparms, target,\n \t\t\t\t   ignore, TREE_TYPE (exp),\n \t\t\t\t   structure_value_addr);\n-      if (temp != (rtx) (HOST_WIDE_INT) - 1)\n+      if (temp != (rtx) (size_t) - 1)\n \treturn temp;\n     }\n "}, {"sha": "96bc865c5bfe53864c5562f22f60a335ca9a6eee", "filename": "gcc/flow.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60e8b9f0d18271ca2cb46f1b732ba4328eacf6b4/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60e8b9f0d18271ca2cb46f1b732ba4328eacf6b4/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=60e8b9f0d18271ca2cb46f1b732ba4328eacf6b4", "patch": "@@ -3974,13 +3974,13 @@ try_pre_increment (insn, reg, amount)\n   use = 0;\n   if (pre_ok)\n     use = find_use_as_address (PATTERN (insn), reg, 0);\n-  if (post_ok && (use == 0 || use == (rtx) 1))\n+  if (post_ok && (use == 0 || use == (rtx) (size_t) 1))\n     {\n       use = find_use_as_address (PATTERN (insn), reg, -amount);\n       do_post = 1;\n     }\n \n-  if (use == 0 || use == (rtx) 1)\n+  if (use == 0 || use == (rtx) (size_t) 1)\n     return 0;\n \n   if (GET_MODE_SIZE (GET_MODE (use)) != (amount > 0 ? amount : - amount))\n@@ -4008,7 +4008,7 @@ try_pre_increment (insn, reg, amount)\n \n    If such an address does not appear, return 0.\n    If REG appears more than once, or is used other than in such an address,\n-   return (rtx)1.  */\n+   return (rtx) 1.  */\n \n rtx\n find_use_as_address (x, reg, plusconst)\n@@ -4036,11 +4036,11 @@ find_use_as_address (x, reg, plusconst)\n       /* If REG occurs inside a MEM used in a bit-field reference,\n \t that is unacceptable.  */\n       if (find_use_as_address (XEXP (x, 0), reg, 0) != 0)\n-\treturn (rtx) (HOST_WIDE_INT) 1;\n+\treturn (rtx) (size_t) 1;\n     }\n \n   if (x == reg)\n-    return (rtx) (HOST_WIDE_INT) 1;\n+    return (rtx) (size_t) 1;\n \n   for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n     {\n@@ -4050,7 +4050,7 @@ find_use_as_address (x, reg, plusconst)\n \t  if (value == 0)\n \t    value = tem;\n \t  else if (tem != 0)\n-\t    return (rtx) (HOST_WIDE_INT) 1;\n+\t    return (rtx) (size_t) 1;\n \t}\n       else if (fmt[i] == 'E')\n \t{\n@@ -4061,7 +4061,7 @@ find_use_as_address (x, reg, plusconst)\n \t      if (value == 0)\n \t\tvalue = tem;\n \t      else if (tem != 0)\n-\t\treturn (rtx) (HOST_WIDE_INT) 1;\n+\t\treturn (rtx) (size_t) 1;\n \t    }\n \t}\n     }"}, {"sha": "b1fecc4788d4126c54abbe13807f0c46b2e654ca", "filename": "gcc/integrate.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60e8b9f0d18271ca2cb46f1b732ba4328eacf6b4/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60e8b9f0d18271ca2cb46f1b732ba4328eacf6b4/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=60e8b9f0d18271ca2cb46f1b732ba4328eacf6b4", "patch": "@@ -698,7 +698,7 @@ expand_inline_function (fndecl, parms, target, ignore, type,\n       enum machine_mode mode;\n \n       if (actual == 0)\n-\treturn (rtx) (HOST_WIDE_INT) -1;\n+\treturn (rtx) (size_t) -1;\n \n       arg = TREE_VALUE (actual);\n       mode = TYPE_MODE (DECL_ARG_TYPE (formal));\n@@ -711,7 +711,7 @@ expand_inline_function (fndecl, parms, target, ignore, type,\n \t  || (mode == BLKmode\n \t      && (TYPE_MAIN_VARIANT (TREE_TYPE (arg))\n \t\t  != TYPE_MAIN_VARIANT (TREE_TYPE (formal)))))\n-\treturn (rtx) (HOST_WIDE_INT) -1;\n+\treturn (rtx) (size_t) -1;\n     }\n \n   /* Extra arguments are valid, but will be ignored below, so we must"}, {"sha": "9530128721aacc986565aab7f84e910e548780d7", "filename": "gcc/regmove.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60e8b9f0d18271ca2cb46f1b732ba4328eacf6b4/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60e8b9f0d18271ca2cb46f1b732ba4328eacf6b4/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=60e8b9f0d18271ca2cb46f1b732ba4328eacf6b4", "patch": "@@ -111,7 +111,7 @@ try_auto_increment (insn, inc_insn, inc_insn_set, reg, increment, pre)\n       /* Can't use the size of SET_SRC, we might have something like\n \t (sign_extend:SI (mem:QI ...  */\n       rtx use = find_use_as_address (pset, reg, 0);\n-      if (use != 0 && use != (rtx) 1)\n+      if (use != 0 && use != (rtx) (size_t) 1)\n \t{\n \t  int size = GET_MODE_SIZE (GET_MODE (use));\n \t  if (0"}]}