{"sha": "c03cfe1eee37ec8369d85559af885a697149205a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAzY2ZlMWVlZTM3ZWM4MzY5ZDg1NTU5YWY4ODVhNjk3MTQ5MjA1YQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-07-10T22:01:44Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-07-10T22:01:44Z"}, "message": "re PR target/53911 ([SH] Improve displacement addressing)\n\n\tPR target/53911\n\t* config/sh/sh.md: Remove displacement addresssing related splits.\n\nFrom-SVN: r189416", "tree": {"sha": "adf36b3400263000e929c91b2167a2b8f415dc10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adf36b3400263000e929c91b2167a2b8f415dc10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c03cfe1eee37ec8369d85559af885a697149205a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c03cfe1eee37ec8369d85559af885a697149205a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c03cfe1eee37ec8369d85559af885a697149205a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c03cfe1eee37ec8369d85559af885a697149205a/comments", "author": null, "committer": null, "parents": [{"sha": "87e2a8fd39ac34b507dcadad62008ea3b5b6a735", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87e2a8fd39ac34b507dcadad62008ea3b5b6a735", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87e2a8fd39ac34b507dcadad62008ea3b5b6a735"}], "stats": {"total": 62, "additions": 5, "deletions": 57}, "files": [{"sha": "937eaa4ec7a646916639c6795a652888e4d05ca0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03cfe1eee37ec8369d85559af885a697149205a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03cfe1eee37ec8369d85559af885a697149205a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c03cfe1eee37ec8369d85559af885a697149205a", "patch": "@@ -1,3 +1,8 @@\n+2012-07-10  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/53911\n+\t* config/sh/sh.md: Remove displacement addresssing related splits.\n+\n 2012-07-10  Xinliang David Li  <davidxl@google.com>\n \n \t* doc/invoke.texi: New option documented."}, {"sha": "b5add4be0f3ac8b23ea83207556c56b7474ee730", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03cfe1eee37ec8369d85559af885a697149205a/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03cfe1eee37ec8369d85559af885a697149205a/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=c03cfe1eee37ec8369d85559af885a697149205a", "patch": "@@ -6683,63 +6683,6 @@ label:\n     FAIL;\n })\n \n-;; If a base address generated by LEGITIMIZE_ADDRESS for SImode is\n-;; used only once, let combine add in the index again.\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(match_operand:SI 1 \"\" \"\"))\n-   (clobber (match_operand 2 \"register_operand\" \"\"))]\n-  \"TARGET_SH1 && ! reload_in_progress && ! reload_completed\n-   && ALLOW_INDEXED_ADDRESS\"\n-  [(use (reg:SI R0_REG))]\n-{\n-  rtx addr, reg, const_int;\n-\n-  if (!MEM_P (operands[1]))\n-    FAIL;\n-  addr = XEXP (operands[1], 0);\n-  if (GET_CODE (addr) != PLUS)\n-    FAIL;\n-  reg = XEXP (addr, 0);\n-  const_int = XEXP (addr, 1);\n-  if (! (BASE_REGISTER_RTX_P (reg) && INDEX_REGISTER_RTX_P (operands[2])\n-\t && CONST_INT_P (const_int)))\n-    FAIL;\n-  emit_move_insn (operands[2], const_int);\n-  emit_move_insn (operands[0],\n-\t\t  change_address (operands[1], VOIDmode,\n-\t\t\t\t  gen_rtx_PLUS (SImode, reg, operands[2])));\n-  DONE;\n-})\n-\n-(define_split\n-  [(set (match_operand:SI 1 \"\" \"\")\n-\t(match_operand:SI 0 \"register_operand\" \"\"))\n-   (clobber (match_operand 2 \"register_operand\" \"\"))]\n-  \"TARGET_SH1 && ! reload_in_progress && ! reload_completed\n-   && ALLOW_INDEXED_ADDRESS\"\n-  [(use (reg:SI R0_REG))]\n-{\n-  rtx addr, reg, const_int;\n-\n-  if (!MEM_P (operands[1]))\n-    FAIL;\n-  addr = XEXP (operands[1], 0);\n-  if (GET_CODE (addr) != PLUS)\n-    FAIL;\n-  reg = XEXP (addr, 0);\n-  const_int = XEXP (addr, 1);\n-  if (! (BASE_REGISTER_RTX_P (reg) && INDEX_REGISTER_RTX_P (operands[2])\n-\t && CONST_INT_P (const_int)))\n-    FAIL;\n-  emit_move_insn (operands[2], const_int);\n-  emit_move_insn (change_address (operands[1], VOIDmode,\n-\t\t\t\t  gen_rtx_PLUS (SImode, reg, operands[2])),\n-\t\t  operands[0]);\n-  DONE;\n-})\n-\n (define_expand \"movdf\"\n   [(set (match_operand:DF 0 \"general_movdst_operand\" \"\")\n \t(match_operand:DF 1 \"general_movsrc_operand\" \"\"))]"}]}