{"sha": "9e822269364f5268b2bdc82530fd6c871f47b1bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU4MjIyNjkzNjRmNTI2OGIyYmRjODI1MzBmZDZjODcxZjQ3YjFiYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-09-14T15:25:57Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-09-14T15:25:57Z"}, "message": "Store VECTOR_CST_NELTS directly in tree_node\n\nPreviously VECTOR_CST_NELTS (t) read the number of elements from\nTYPE_VECTOR_SUBPARTS (TREE_TYPE (t)).  There were two ways of handling\nthis with variable TYPE_VECTOR_SUBPARTS: either forcibly convert the\nnumber to a constant (which is doable) or store the number directly\nin the VECTOR_CST.  The latter seemed better, since it involves less\npointer chasing and since the tree_node u field is otherwise unused\nfor VECTOR_CST.  It would still be easy to switch to the former in\nfuture if we need to free up the field for someting else.\n\nThe patch also changes various bits of VECTOR_CST code to use\nVECTOR_CST_NELTS instead of TYPE_VECTOR_SUBPARTS when iterating\nover VECTOR_CST_ELTs.  Also, when the two are checked for equality,\nthe patch prefers to read VECTOR_CST_NELTS (which must be constant)\nand check against TYPE_VECTOR_SUBPARTS, instead of the other way\naround.\n\n2017-09-14  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* tree-core.h (tree_base::u): Add an \"nelts\" field.\n\t(tree_vector): Use VECTOR_CST_NELTS as the length.\n\t* tree.c (tree_size): Likewise.\n\t(make_vector): Initialize VECTOR_CST_NELTS.\n\t* tree.h (VECTOR_CST_NELTS): Use the u.nelts field.\n\t* cfgexpand.c (expand_debug_expr): Use VECTOR_CST_NELTS instead of\n\tTYPE_VECTOR_SUBPARTS.\n\t* expr.c (const_vector_mask_from_tree): Consistently use \"units\"\n\tas the number of units, setting it from VECTOR_CST_NELTS.\n\t(const_vector_from_tree): Likewise.\n\t* fold-const.c (negate_expr_p): Use VECTOR_CST_NELTS instead of\n\tTYPE_VECTOR_SUBPARTS for the number of elements in a VECTOR_CST.\n\t(fold_negate_expr_1): Likewise.\n\t(fold_convert_const): Likewise.\n\t(const_binop): Likewise.  Differentiate the number of output and\n\tinput elements.\n\t(const_unop): Likewise.\n\t(fold_ternary_loc): Use VECTOR_CST_NELTS for the number of elements\n\tin a VECTOR_CST, asserting that it is the same as TYPE_VECTOR_SUBPARTS\n\tin cases that did the opposite.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r252758", "tree": {"sha": "c7de33f186c199c790259d0bdb8d0d743b5309da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7de33f186c199c790259d0bdb8d0d743b5309da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e822269364f5268b2bdc82530fd6c871f47b1bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e822269364f5268b2bdc82530fd6c871f47b1bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e822269364f5268b2bdc82530fd6c871f47b1bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e822269364f5268b2bdc82530fd6c871f47b1bc/comments", "author": null, "committer": null, "parents": [{"sha": "2a94be35291a8564154cd213f73b7e302e3f3b80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a94be35291a8564154cd213f73b7e302e3f3b80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a94be35291a8564154cd213f73b7e302e3f3b80"}], "stats": {"total": 133, "additions": 84, "deletions": 49}, "files": [{"sha": "fb9c448efafc541a02fc3c5dc2b06a59d835504a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e822269364f5268b2bdc82530fd6c871f47b1bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e822269364f5268b2bdc82530fd6c871f47b1bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e822269364f5268b2bdc82530fd6c871f47b1bc", "patch": "@@ -1,3 +1,28 @@\n+2017-09-14  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* tree-core.h (tree_base::u): Add an \"nelts\" field.\n+\t(tree_vector): Use VECTOR_CST_NELTS as the length.\n+\t* tree.c (tree_size): Likewise.\n+\t(make_vector): Initialize VECTOR_CST_NELTS.\n+\t* tree.h (VECTOR_CST_NELTS): Use the u.nelts field.\n+\t* cfgexpand.c (expand_debug_expr): Use VECTOR_CST_NELTS instead of\n+\tTYPE_VECTOR_SUBPARTS.\n+\t* expr.c (const_vector_mask_from_tree): Consistently use \"units\"\n+\tas the number of units, setting it from VECTOR_CST_NELTS.\n+\t(const_vector_from_tree): Likewise.\n+\t* fold-const.c (negate_expr_p): Use VECTOR_CST_NELTS instead of\n+\tTYPE_VECTOR_SUBPARTS for the number of elements in a VECTOR_CST.\n+\t(fold_negate_expr_1): Likewise.\n+\t(fold_convert_const): Likewise.\n+\t(const_binop): Likewise.  Differentiate the number of output and\n+\tinput elements.\n+\t(const_unop): Likewise.\n+\t(fold_ternary_loc): Use VECTOR_CST_NELTS for the number of elements\n+\tin a VECTOR_CST, asserting that it is the same as TYPE_VECTOR_SUBPARTS\n+\tin cases that did the opposite.\n+\n 2017-09-14  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-sccvn.c (visit_phi): Merge undefined values similar"}, {"sha": "bd3312eb3baa0a218b45852199e2108ab4c4df96", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e822269364f5268b2bdc82530fd6c871f47b1bc/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e822269364f5268b2bdc82530fd6c871f47b1bc/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=9e822269364f5268b2bdc82530fd6c871f47b1bc", "patch": "@@ -4921,12 +4921,12 @@ expand_debug_expr (tree exp)\n \n     case VECTOR_CST:\n       {\n-\tunsigned i;\n+\tunsigned i, nelts;\n \n-\top0 = gen_rtx_CONCATN\n-\t  (mode, rtvec_alloc (TYPE_VECTOR_SUBPARTS (TREE_TYPE (exp))));\n+\tnelts = VECTOR_CST_NELTS (exp);\n+\top0 = gen_rtx_CONCATN (mode, rtvec_alloc (nelts));\n \n-\tfor (i = 0; i < VECTOR_CST_NELTS (exp); ++i)\n+\tfor (i = 0; i < nelts; ++i)\n \t  {\n \t    op1 = expand_debug_expr (VECTOR_CST_ELT (exp, i));\n \t    if (!op1)"}, {"sha": "a9689a6fd52987705c584029683fe6c47f50a4c3", "filename": "gcc/expr.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e822269364f5268b2bdc82530fd6c871f47b1bc/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e822269364f5268b2bdc82530fd6c871f47b1bc/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=9e822269364f5268b2bdc82530fd6c871f47b1bc", "patch": "@@ -11700,18 +11700,17 @@ static rtx\n const_vector_mask_from_tree (tree exp)\n {\n   rtvec v;\n-  unsigned i;\n-  int units;\n+  unsigned i, units;\n   tree elt;\n   machine_mode inner, mode;\n \n   mode = TYPE_MODE (TREE_TYPE (exp));\n-  units = GET_MODE_NUNITS (mode);\n+  units = VECTOR_CST_NELTS (exp);\n   inner = GET_MODE_INNER (mode);\n \n   v = rtvec_alloc (units);\n \n-  for (i = 0; i < VECTOR_CST_NELTS (exp); ++i)\n+  for (i = 0; i < units; ++i)\n     {\n       elt = VECTOR_CST_ELT (exp, i);\n \n@@ -11756,8 +11755,7 @@ static rtx\n const_vector_from_tree (tree exp)\n {\n   rtvec v;\n-  unsigned i;\n-  int units;\n+  unsigned i, units;\n   tree elt;\n   machine_mode inner, mode;\n \n@@ -11769,12 +11767,12 @@ const_vector_from_tree (tree exp)\n   if (VECTOR_BOOLEAN_TYPE_P (TREE_TYPE (exp)))\n     return const_vector_mask_from_tree (exp);\n \n-  units = GET_MODE_NUNITS (mode);\n+  units = VECTOR_CST_NELTS (exp);\n   inner = GET_MODE_INNER (mode);\n \n   v = rtvec_alloc (units);\n \n-  for (i = 0; i < VECTOR_CST_NELTS (exp); ++i)\n+  for (i = 0; i < units; ++i)\n     {\n       elt = VECTOR_CST_ELT (exp, i);\n "}, {"sha": "66e7cc7b189fa3a3f8865582f232f2258198e2db", "filename": "gcc/fold-const.c", "status": "modified", "additions": 42, "deletions": 34, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e822269364f5268b2bdc82530fd6c871f47b1bc/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e822269364f5268b2bdc82530fd6c871f47b1bc/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=9e822269364f5268b2bdc82530fd6c871f47b1bc", "patch": "@@ -410,7 +410,7 @@ negate_expr_p (tree t)\n \tif (FLOAT_TYPE_P (TREE_TYPE (type)) || TYPE_OVERFLOW_WRAPS (type))\n \t  return true;\n \n-\tint count = TYPE_VECTOR_SUBPARTS (type), i;\n+\tint count = VECTOR_CST_NELTS (t), i;\n \n \tfor (i = 0; i < count; i++)\n \t  if (!negate_expr_p (VECTOR_CST_ELT (t, i)))\n@@ -564,7 +564,7 @@ fold_negate_expr_1 (location_t loc, tree t)\n \n     case VECTOR_CST:\n       {\n-\tint count = TYPE_VECTOR_SUBPARTS (type), i;\n+\tint count = VECTOR_CST_NELTS (t), i;\n \ttree *elts = XALLOCAVEC (tree, count);\n \n \tfor (i = 0; i < count; i++)\n@@ -1413,7 +1413,7 @@ const_binop (enum tree_code code, tree arg1, tree arg2)\n       && TREE_CODE (arg2) == VECTOR_CST)\n     {\n       tree type = TREE_TYPE (arg1);\n-      int count = TYPE_VECTOR_SUBPARTS (type), i;\n+      int count = VECTOR_CST_NELTS (arg1), i;\n       tree *elts = XALLOCAVEC (tree, count);\n \n       for (i = 0; i < count; i++)\n@@ -1437,7 +1437,7 @@ const_binop (enum tree_code code, tree arg1, tree arg2)\n       && TREE_CODE (arg2) == INTEGER_CST)\n     {\n       tree type = TREE_TYPE (arg1);\n-      int count = TYPE_VECTOR_SUBPARTS (type), i;\n+      int count = VECTOR_CST_NELTS (arg1), i;\n       tree *elts = XALLOCAVEC (tree, count);\n \n       for (i = 0; i < count; i++)\n@@ -1481,21 +1481,24 @@ const_binop (enum tree_code code, tree type, tree arg1, tree arg2)\n     case VEC_PACK_TRUNC_EXPR:\n     case VEC_PACK_FIX_TRUNC_EXPR:\n       {\n-\tunsigned int nelts = TYPE_VECTOR_SUBPARTS (type), i;\n \ttree *elts;\n+\tunsigned int out_nelts, in_nelts, i;\n \n-\tgcc_assert (TYPE_VECTOR_SUBPARTS (TREE_TYPE (arg1)) == nelts / 2\n-\t\t    && TYPE_VECTOR_SUBPARTS (TREE_TYPE (arg2)) == nelts / 2);\n \tif (TREE_CODE (arg1) != VECTOR_CST\n \t    || TREE_CODE (arg2) != VECTOR_CST)\n \t  return NULL_TREE;\n \n-\telts = XALLOCAVEC (tree, nelts);\n+\tin_nelts = VECTOR_CST_NELTS (arg1);\n+\tout_nelts = in_nelts * 2;\n+\tgcc_assert (in_nelts == VECTOR_CST_NELTS (arg2)\n+\t\t    && out_nelts == TYPE_VECTOR_SUBPARTS (type));\n+\n+\telts = XALLOCAVEC (tree, out_nelts);\n \tif (!vec_cst_ctor_to_array (arg1, elts)\n-\t    || !vec_cst_ctor_to_array (arg2, elts + nelts / 2))\n+\t    || !vec_cst_ctor_to_array (arg2, elts + in_nelts))\n \t  return NULL_TREE;\n \n-\tfor (i = 0; i < nelts; i++)\n+\tfor (i = 0; i < out_nelts; i++)\n \t  {\n \t    elts[i] = fold_convert_const (code == VEC_PACK_TRUNC_EXPR\n \t\t\t\t\t  ? NOP_EXPR : FIX_TRUNC_EXPR,\n@@ -1512,33 +1515,35 @@ const_binop (enum tree_code code, tree type, tree arg1, tree arg2)\n     case VEC_WIDEN_MULT_EVEN_EXPR:\n     case VEC_WIDEN_MULT_ODD_EXPR:\n       {\n-\tunsigned int nelts = TYPE_VECTOR_SUBPARTS (type);\n-\tunsigned int out, ofs, scale;\n+\tunsigned int out_nelts, in_nelts, out, ofs, scale;\n \ttree *elts;\n \n-\tgcc_assert (TYPE_VECTOR_SUBPARTS (TREE_TYPE (arg1)) == nelts * 2\n-\t\t    && TYPE_VECTOR_SUBPARTS (TREE_TYPE (arg2)) == nelts * 2);\n \tif (TREE_CODE (arg1) != VECTOR_CST || TREE_CODE (arg2) != VECTOR_CST)\n \t  return NULL_TREE;\n \n-\telts = XALLOCAVEC (tree, nelts * 4);\n+\tin_nelts = VECTOR_CST_NELTS (arg1);\n+\tout_nelts = in_nelts / 2;\n+\tgcc_assert (in_nelts == VECTOR_CST_NELTS (arg2)\n+\t\t    && out_nelts == TYPE_VECTOR_SUBPARTS (type));\n+\n+\telts = XALLOCAVEC (tree, in_nelts * 2);\n \tif (!vec_cst_ctor_to_array (arg1, elts)\n-\t    || !vec_cst_ctor_to_array (arg2, elts + nelts * 2))\n+\t    || !vec_cst_ctor_to_array (arg2, elts + in_nelts))\n \t  return NULL_TREE;\n \n \tif (code == VEC_WIDEN_MULT_LO_EXPR)\n-\t  scale = 0, ofs = BYTES_BIG_ENDIAN ? nelts : 0;\n+\t  scale = 0, ofs = BYTES_BIG_ENDIAN ? out_nelts : 0;\n \telse if (code == VEC_WIDEN_MULT_HI_EXPR)\n-\t  scale = 0, ofs = BYTES_BIG_ENDIAN ? 0 : nelts;\n+\t  scale = 0, ofs = BYTES_BIG_ENDIAN ? 0 : out_nelts;\n \telse if (code == VEC_WIDEN_MULT_EVEN_EXPR)\n \t  scale = 1, ofs = 0;\n \telse /* if (code == VEC_WIDEN_MULT_ODD_EXPR) */\n \t  scale = 1, ofs = 1;\n \n-\tfor (out = 0; out < nelts; out++)\n+\tfor (out = 0; out < out_nelts; out++)\n \t  {\n \t    unsigned int in1 = (out << scale) + ofs;\n-\t    unsigned int in2 = in1 + nelts * 2;\n+\t    unsigned int in2 = in1 + in_nelts;\n \t    tree t1, t2;\n \n \t    t1 = fold_convert_const (NOP_EXPR, TREE_TYPE (type), elts[in1]);\n@@ -1671,28 +1676,31 @@ const_unop (enum tree_code code, tree type, tree arg0)\n     case VEC_UNPACK_FLOAT_LO_EXPR:\n     case VEC_UNPACK_FLOAT_HI_EXPR:\n       {\n-\tunsigned int nelts = TYPE_VECTOR_SUBPARTS (type), i;\n+\tunsigned int out_nelts, in_nelts, i;\n \ttree *elts;\n \tenum tree_code subcode;\n \n-\tgcc_assert (TYPE_VECTOR_SUBPARTS (TREE_TYPE (arg0)) == nelts * 2);\n \tif (TREE_CODE (arg0) != VECTOR_CST)\n \t  return NULL_TREE;\n \n-\telts = XALLOCAVEC (tree, nelts * 2);\n+\tin_nelts = VECTOR_CST_NELTS (arg0);\n+\tout_nelts = in_nelts / 2;\n+\tgcc_assert (out_nelts == TYPE_VECTOR_SUBPARTS (type));\n+\n+\telts = XALLOCAVEC (tree, in_nelts);\n \tif (!vec_cst_ctor_to_array (arg0, elts))\n \t  return NULL_TREE;\n \n \tif ((!BYTES_BIG_ENDIAN) ^ (code == VEC_UNPACK_LO_EXPR\n \t\t\t\t   || code == VEC_UNPACK_FLOAT_LO_EXPR))\n-\t  elts += nelts;\n+\t  elts += out_nelts;\n \n \tif (code == VEC_UNPACK_LO_EXPR || code == VEC_UNPACK_HI_EXPR)\n \t  subcode = NOP_EXPR;\n \telse\n \t  subcode = FLOAT_EXPR;\n \n-\tfor (i = 0; i < nelts; i++)\n+\tfor (i = 0; i < out_nelts; i++)\n \t  {\n \t    elts[i] = fold_convert_const (subcode, TREE_TYPE (type), elts[i]);\n \t    if (elts[i] == NULL_TREE || !CONSTANT_CLASS_P (elts[i]))\n@@ -1712,7 +1720,7 @@ const_unop (enum tree_code code, tree type, tree arg0)\n \n \tif (TREE_CODE (arg0) != VECTOR_CST)\n \t  return NULL_TREE;\n-        nelts = TYPE_VECTOR_SUBPARTS (TREE_TYPE (arg0));\n+\tnelts = VECTOR_CST_NELTS (arg0);\n \n \telts = XALLOCAVEC (tree, nelts);\n \tif (!vec_cst_ctor_to_array (arg0, elts))\n@@ -2153,7 +2161,7 @@ fold_convert_const (enum tree_code code, tree type, tree arg1)\n       if (TREE_CODE (arg1) == VECTOR_CST\n \t  && TYPE_VECTOR_SUBPARTS (type) == VECTOR_CST_NELTS (arg1))\n \t{\n-\t  int len = TYPE_VECTOR_SUBPARTS (type);\n+\t  int len = VECTOR_CST_NELTS (arg1);\n \t  tree elttype = TREE_TYPE (type);\n \t  tree *v = XALLOCAVEC (tree, len);\n \t  for (int i = 0; i < len; ++i)\n@@ -11311,9 +11319,9 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \t      && (TREE_CODE (arg2) == VECTOR_CST\n \t\t  || TREE_CODE (arg2) == CONSTRUCTOR))\n \t    {\n-\t      unsigned int nelts = TYPE_VECTOR_SUBPARTS (type), i;\n+\t      unsigned int nelts = VECTOR_CST_NELTS (arg0), i;\n \t      unsigned char *sel = XALLOCAVEC (unsigned char, nelts);\n-\t      gcc_assert (nelts == VECTOR_CST_NELTS (arg0));\n+\t      gcc_assert (nelts == TYPE_VECTOR_SUBPARTS (type));\n \t      for (i = 0; i < nelts; i++)\n \t\t{\n \t\t  tree val = VECTOR_CST_ELT (arg0, i);\n@@ -11642,7 +11650,7 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n     case VEC_PERM_EXPR:\n       if (TREE_CODE (arg2) == VECTOR_CST)\n \t{\n-\t  unsigned int nelts = TYPE_VECTOR_SUBPARTS (type), i, mask, mask2;\n+\t  unsigned int nelts = VECTOR_CST_NELTS (arg2), i, mask, mask2;\n \t  unsigned char *sel = XALLOCAVEC (unsigned char, 2 * nelts);\n \t  unsigned char *sel2 = sel + nelts;\n \t  bool need_mask_canon = false;\n@@ -11655,7 +11663,7 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \n \t  mask2 = 2 * nelts - 1;\n \t  mask = single_arg ? (nelts - 1) : mask2;\n-\t  gcc_assert (nelts == VECTOR_CST_NELTS (arg2));\n+\t  gcc_assert (nelts == TYPE_VECTOR_SUBPARTS (type));\n \t  for (i = 0; i < nelts; i++)\n \t    {\n \t      tree val = VECTOR_CST_ELT (arg2, i);\n@@ -11766,9 +11774,9 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \t\treturn arg0;\n \t      else\n \t\t{\n-\t\t  tree *elts = XALLOCAVEC (tree, TYPE_VECTOR_SUBPARTS (type));\n-\t\t  memcpy (elts, VECTOR_CST_ELTS (arg0),\n-\t\t\t  sizeof (tree) * TYPE_VECTOR_SUBPARTS (type));\n+\t\t  unsigned int nelts = VECTOR_CST_NELTS (arg0);\n+\t\t  tree *elts = XALLOCAVEC (tree, nelts);\n+\t\t  memcpy (elts, VECTOR_CST_ELTS (arg0), sizeof (tree) * nelts);\n \t\t  elts[k] = arg1;\n \t\t  return build_vector (type, elts);\n \t\t}"}, {"sha": "b34080e25754b4d00d1a4c3f3967d3d0be5e4562", "filename": "gcc/tree-core.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e822269364f5268b2bdc82530fd6c871f47b1bc/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e822269364f5268b2bdc82530fd6c871f47b1bc/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=9e822269364f5268b2bdc82530fd6c871f47b1bc", "patch": "@@ -975,6 +975,9 @@ struct GTY(()) tree_base {\n     /* VEC length.  This field is only used with TREE_VEC.  */\n     int length;\n \n+    /* Number of elements.  This field is only used with VECTOR_CST.  */\n+    unsigned int nelts;\n+\n     /* SSA version number.  This field is only used with SSA_NAME.  */\n     unsigned int version;\n \n@@ -1326,7 +1329,7 @@ struct GTY(()) tree_complex {\n \n struct GTY(()) tree_vector {\n   struct tree_typed typed;\n-  tree GTY ((length (\"TYPE_VECTOR_SUBPARTS (TREE_TYPE ((tree)&%h))\"))) elts[1];\n+  tree GTY ((length (\"VECTOR_CST_NELTS ((tree) &%h)\"))) elts[1];\n };\n \n struct GTY(()) tree_identifier {"}, {"sha": "0f505c2db01758590a2ad16cbf258f33e7552348", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e822269364f5268b2bdc82530fd6c871f47b1bc/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e822269364f5268b2bdc82530fd6c871f47b1bc/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=9e822269364f5268b2bdc82530fd6c871f47b1bc", "patch": "@@ -873,7 +873,7 @@ tree_size (const_tree node)\n \n     case VECTOR_CST:\n       return (sizeof (struct tree_vector)\n-\t      + (TYPE_VECTOR_SUBPARTS (TREE_TYPE (node)) - 1) * sizeof (tree));\n+\t      + (VECTOR_CST_NELTS (node) - 1) * sizeof (tree));\n \n     case STRING_CST:\n       return TREE_STRING_LENGTH (node) + offsetof (struct tree_string, str) + 1;\n@@ -1696,6 +1696,7 @@ make_vector (unsigned len MEM_STAT_DECL)\n \n   TREE_SET_CODE (t, VECTOR_CST);\n   TREE_CONSTANT (t) = 1;\n+  VECTOR_CST_NELTS (t) = len;\n \n   return t;\n }"}, {"sha": "490c3b6e51dbcb77fe0d97db346b45b9da5e5084", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e822269364f5268b2bdc82530fd6c871f47b1bc/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e822269364f5268b2bdc82530fd6c871f47b1bc/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=9e822269364f5268b2bdc82530fd6c871f47b1bc", "patch": "@@ -1026,7 +1026,7 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n #define TREE_IMAGPART(NODE) (COMPLEX_CST_CHECK (NODE)->complex.imag)\n \n /* In a VECTOR_CST node.  */\n-#define VECTOR_CST_NELTS(NODE) (TYPE_VECTOR_SUBPARTS (TREE_TYPE (NODE)))\n+#define VECTOR_CST_NELTS(NODE) (VECTOR_CST_CHECK (NODE)->base.u.nelts)\n #define VECTOR_CST_ELTS(NODE) (VECTOR_CST_CHECK (NODE)->vector.elts)\n #define VECTOR_CST_ELT(NODE,IDX) (VECTOR_CST_CHECK (NODE)->vector.elts[IDX])\n "}]}