{"sha": "25b6bfea5f14da53116f2d3efe2446de89b9bc03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjViNmJmZWE1ZjE0ZGE1MzExNmYyZDNlZmUyNDQ2ZGU4OWI5YmMwMw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-01T00:16:41Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-01T00:16:41Z"}, "message": "Daily bump.", "tree": {"sha": "23d9a15e979c8cafd9b9637c8640fe56edcf2e73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23d9a15e979c8cafd9b9637c8640fe56edcf2e73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25b6bfea5f14da53116f2d3efe2446de89b9bc03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25b6bfea5f14da53116f2d3efe2446de89b9bc03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25b6bfea5f14da53116f2d3efe2446de89b9bc03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25b6bfea5f14da53116f2d3efe2446de89b9bc03/comments", "author": null, "committer": null, "parents": [{"sha": "6963c3b9ed1308bf5d2d8877956e56fec92853a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6963c3b9ed1308bf5d2d8877956e56fec92853a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6963c3b9ed1308bf5d2d8877956e56fec92853a7"}], "stats": {"total": 489, "additions": 488, "deletions": 1}, "files": [{"sha": "f1939078c68bd7738665c097a443b4eb60583b8d", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b6bfea5f14da53116f2d3efe2446de89b9bc03/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b6bfea5f14da53116f2d3efe2446de89b9bc03/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=25b6bfea5f14da53116f2d3efe2446de89b9bc03", "patch": "@@ -1,3 +1,7 @@\n+2021-06-30  Xi Ruoyao  <xry111@mengyan1223.wang>\n+\n+\t* MAINTAINERS (Write After Approval): Add myself.\n+\n 2021-06-25  Matthias Kretz  <m.kretz@gsi.de>\n \n \t* MAINTAINERS: Add myself for write after approval and DCO"}, {"sha": "c6960fc5f804206c06759aa878ce9ddc1706874a", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b6bfea5f14da53116f2d3efe2446de89b9bc03/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b6bfea5f14da53116f2d3efe2446de89b9bc03/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=25b6bfea5f14da53116f2d3efe2446de89b9bc03", "patch": "@@ -1,3 +1,12 @@\n+2021-06-30  Xi Ruoyao  <xry111@mengyan1223.wang>\n+\n+\tPR other/91085\n+\t* fixfixes.c (check_has_inc): New static function.\n+\t  (machine_name_fix): Don't replace header names in\n+\t  __has_include(...).\n+\t* inclhack.def (machine_name): Adjust test.\n+\t* tests/base/testing.h: Update.\n+\n 2020-12-14  Ilya Leoshkevich  <iii@linux.ibm.com>\n \n \t* fixincl.x: Rerun genfixes."}, {"sha": "0b2c08f75d01c7f80baaeb88adc2344a5603c8b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b6bfea5f14da53116f2d3efe2446de89b9bc03/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b6bfea5f14da53116f2d3efe2446de89b9bc03/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25b6bfea5f14da53116f2d3efe2446de89b9bc03", "patch": "@@ -1,3 +1,112 @@\n+2021-06-30  Hafiz Abid Qadeer  <abidh@codesourcery.com>\n+\n+\t* config/gcn/gcn.c: Include dwarf2.h.\n+\t(gcn_addr_space_debug): New function.\n+\t(TARGET_ADDR_SPACE_DEBUG): New hook.\n+\n+2021-06-30  Hafiz Abid Qadeer  <abidh@codesourcery.com>\n+\n+\t* common/config/gcn/gcn-common.c\n+\t(gcn_option_optimization_table): Change OPT_fomit_frame_pointer to -O3.\n+\t* config/gcn/gcn.c (gcn_expand_prologue): Prefer the frame pointer\n+\twhen emitting CFI.\n+\t(gcn_expand_prologue): Prefer the frame pointer when emitting CFI.\n+\t(gcn_frame_pointer_rqd): New function.\n+\t(TARGET_FRAME_POINTER_REQUIRED): New hook.\n+\n+2021-06-30  Hafiz Abid Qadeer  <abidh@codesourcery.com>\n+\n+\t* config/gcn/gcn.c (move_callee_saved_registers): Emit CFI notes for\n+\tprologue register saves.\n+\t(gcn_debug_unwind_info): Use UI_DWARF2.\n+\t(gcn_dwarf_register_number): Map DWARF_LINK_REGISTER to DWARF PC.\n+\t(gcn_dwarf_register_span): DWARF_LINK_REGISTER doesn't span.\n+\t* config/gcn/gcn.h: (DWARF_FRAME_RETURN_COLUMN): New define.\n+\t(DWARF_LINK_REGISTER): New define.\n+\t(FIRST_PSEUDO_REGISTER): Increment.\n+\t(FIXED_REGISTERS): Add entry for DWARF_LINK_REGISTER.\n+\t(CALL_USED_REGISTERS): Likewise.\n+\t(REGISTER_NAMES): Likewise.\n+\n+2021-06-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101267\n+\t* tree-vect-stmts.c (vect_check_scalar_mask): Adjust\n+\tAPI and use SLP compatible interface of vect_is_simple_use.\n+\tReject not vectorized SLP defs for callers that do not support\n+\tthat.\n+\t(vect_check_store_rhs): Handle masked stores and pass down\n+\tthe appropriate operator index.\n+\t(vectorizable_call): Adjust.\n+\t(vectorizable_store): Likewise.\n+\t(vectorizable_load): Likewise.  Handle SLP pecularity of\n+\tmasked loads.\n+\t(vect_is_simple_use): Remove special-casing of masked stores.\n+\n+2021-06-30  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* common.opt (foffload): Remove help as Driver only.\n+\t* gcc.c (display_help): Add -foffload.\n+\n+2021-06-30  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gcc.c (close_at_file, execute): Replace alloca by XALLOCAVEC.\n+\t(check_offload_target_name): Fix splitting OFFLOAD_TARGETS into\n+\ta candidate list; better inform no offload target is configured\n+\tand fix hint extraction when passed target is not '\\0' at [len].\n+\t* common.opt (foffload): Add tailing '.'.\n+\t(foffload-options): Likewise; fix flag name in the help string.\n+\n+2021-06-30  prathamesh.kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR target/66791\n+\t* config/arm/arm_neon.h: Move vabs intrinsics before vcage_f32.\n+\t(vcage_f32): Gate comparison on __FAST_MATH__.\n+\t(vcageq_f32): Likewise.\n+\t(vcale_f32): Likewise.\n+\t(vcaleq_f32): Likewise.\n+\t(vcagt_f32): Likewise.\n+\t(vcagtq_f32): Likewise.\n+\t(vcalt_f32): Likewise.\n+\t(vcaltq_f32): Likewise.\n+\t(vcage_f16): Likewise.\n+\t(vcageq_f16): Likewise.\n+\t(vcale_f16): Likewise.\n+\t(vcaleq_f16): Likewise.\n+\t(vcagt_f16): Likewise.\n+\t(vcagtq_f16): Likewise.\n+\t(vcalt_f16): Likewise.\n+\t(vcaltq_f16): Likewise.\n+\n+2021-06-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101264\n+\t* tree-vect-slp.c (vect_optimize_slp): Propagate the\n+\tcomputed perm_in to all \"any\" permute successors\n+\twe cannot de-duplicate immediately.\n+\n+2021-06-30  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/101248\n+\t* config/i386/sse.md\n+\t(avx512f_sfixupimm<mode><sd_maskz_name><round_saeonly_name>):\n+\tRefined to ..\n+\t(avx512f_sfixupimm<mode><maskz_scalar_name><round_saeonly_name>):\n+\tthis.\n+\t(avx512f_sfixupimm<mode>_mask<round_saeonly_name>\"): Refined.\n+\t* config/i386/subst.md (maskz_scalar): New define_subst.\n+\t(maskz_scalar_name): New subst_attr.\n+\t(maskz_scalar_op5): Ditto.\n+\t(round_saeonly_maskz_scalar_op5): Ditto.\n+\t(round_saeonly_maskz_scalar_operand5): Ditto.\n+\n+2021-06-30  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_xcoff_section_type_flags):\n+\tIncrease code CSECT alignment to at least 32 bytes.\n+\t* config/rs6000/xcoff.h (TEXT_SECTION_ASM_OP): Add 32 byte\n+\talignment designation.\n+\n 2021-06-29  Sergei Trofimovich  <siarheit@google.com>\n \n \t* doc/generic.texi: Fix s/net yet/not yet/ typo."}, {"sha": "8d2a207dbc70a71ddcefaed6c8f73b31eef593b5", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b6bfea5f14da53116f2d3efe2446de89b9bc03/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b6bfea5f14da53116f2d3efe2446de89b9bc03/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=25b6bfea5f14da53116f2d3efe2446de89b9bc03", "patch": "@@ -1 +1 @@\n-20210630\n+20210701"}, {"sha": "bb9f4d3252ff6b50c7eea66b68ab847ca5318bb7", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b6bfea5f14da53116f2d3efe2446de89b9bc03/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b6bfea5f14da53116f2d3efe2446de89b9bc03/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=25b6bfea5f14da53116f2d3efe2446de89b9bc03", "patch": "@@ -1,3 +1,240 @@\n+2021-06-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/95006\n+\t* analyzer.h (class repeated_svalue): New forward decl.\n+\t(class bits_within_svalue): New forward decl.\n+\t(class sized_region): New forward decl.\n+\t(get_field_at_bit_offset): New forward decl.\n+\t* engine.cc (exploded_graph::get_or_create_node): Validate the\n+\tmerged state.\n+\t(exploded_graph::maybe_process_run_of_before_supernode_enodes):\n+\tValidate the states at each stage.\n+\t* program-state.cc (program_state::validate): Validate\n+\tm_region_model.\n+\t* region-model-impl-calls.cc (region_model::impl_call_memset):\n+\tReplace special-case logic for handling constant sizes with\n+\ta call to fill_region of a sized_region with the given fill value.\n+\t* region-model-manager.cc (maybe_undo_optimize_bit_field_compare):\n+\tDrop DK_direct.\n+\t(region_model_manager::maybe_fold_sub_svalue):  Fold element-based\n+\tsubregions of an initial value into initial values of an element.\n+\tFold subvalues of repeated svalues.\n+\t(region_model_manager::maybe_fold_repeated_svalue): New.\n+\t(region_model_manager::get_or_create_repeated_svalue): New.\n+\t(get_bit_range_for_field): New.\n+\t(get_byte_range_for_field): New.\n+\t(get_field_at_byte_range): New.\n+\t(region_model_manager::maybe_fold_bits_within_svalue): New.\n+\t(region_model_manager::get_or_create_bits_within): New.\n+\t(region_model_manager::get_sized_region): New.\n+\t(region_model_manager::log_stats): Update for addition of\n+\tm_repeated_values_map, m_bits_within_values_map, and\n+\tm_sized_regions.\n+\t* region-model.cc (region_model::validate): New.\n+\t(region_model::on_assignment): Drop enum binding_kind.\n+\t(region_model::get_initial_value_for_global): Likewise.\n+\t(region_model::get_rvalue_for_bits): Replace body with call to\n+\tget_or_create_bits_within.\n+\t(region_model::get_capacity): Handle RK_SIZED.\n+\t(region_model::set_value): Drop enum binding_kind.\n+\t(region_model::fill_region): New.\n+\t(region_model::get_representative_path_var_1): Handle RK_SIZED.\n+\t* region-model.h (visitor::visit_repeated_svalue): New.\n+\t(visitor::visit_bits_within_svalue): New.\n+\t(region_model_manager::get_or_create_repeated_svalue): New decl.\n+\t(region_model_manager::get_or_create_bits_within): New decl.\n+\t(region_model_manager::get_sized_region): New decl.\n+\t(region_model_manager::maybe_fold_repeated_svalue): New decl.\n+\t(region_model_manager::maybe_fold_bits_within_svalue): New decl.\n+\t(region_model_manager::repeated_values_map_t): New typedef.\n+\t(region_model_manager::m_repeated_values_map): New field.\n+\t(region_model_manager::bits_within_values_map_t): New typedef.\n+\t(region_model_manager::m_bits_within_values_map): New field.\n+\t(region_model_manager::m_sized_regions): New field.\n+\t(region_model::fill_region): New decl.\n+\t* region.cc (region::get_base_region): Handle RK_SIZED.\n+\t(region::base_region_p): Likewise.\n+\t(region::get_byte_size_sval): New.\n+\t(get_field_at_bit_offset): Make non-static.\n+\t(region::calc_offset): Move implementation of cases to\n+\tget_relative_concrete_offset vfunc implementations.  Handle\n+\tRK_SIZED.\n+\t(region::get_relative_concrete_offset): New.\n+\t(decl_region::get_svalue_for_initializer): Drop enum binding_kind.\n+\t(field_region::get_relative_concrete_offset): New, from\n+\tregion::calc_offset.\n+\t(element_region::get_relative_concrete_offset): Likewise.\n+\t(offset_region::get_relative_concrete_offset): Likewise.\n+\t(sized_region::accept): New.\n+\t(sized_region::dump_to_pp): New.\n+\t(sized_region::get_byte_size): New.\n+\t(sized_region::get_bit_size): New.\n+\t* region.h (enum region_kind): Add RK_SIZED.\n+\t(region::dyn_cast_sized_region): New.\n+\t(region::get_byte_size): Make virtual.\n+\t(region::get_bit_size): Likewise.\n+\t(region::get_byte_size_sval): New decl.\n+\t(region::get_relative_concrete_offset): New decl.\n+\t(field_region::get_relative_concrete_offset): New decl.\n+\t(element_region::get_relative_concrete_offset): Likewise.\n+\t(offset_region::get_relative_concrete_offset): Likewise.\n+\t(class sized_region): New.\n+\t* store.cc (binding_kind_to_string): Delete.\n+\t(binding_key::make): Drop enum binding_kind.\n+\t(binding_key::dump_to_pp): Delete.\n+\t(binding_key::cmp_ptrs): Drop enum binding_kind.\n+\t(bit_range::contains_p): New.\n+\t(byte_range::dump): New.\n+\t(byte_range::contains_p): New.\n+\t(byte_range::cmp): New.\n+\t(concrete_binding::dump_to_pp): Drop enum binding_kind.\n+\t(concrete_binding::cmp_ptr_ptr): Likewise.\n+\t(symbolic_binding::dump_to_pp): Likewise.\n+\t(symbolic_binding::cmp_ptr_ptr): Likewise.\n+\t(binding_map::apply_ctor_val_to_range): Likewise.\n+\t(binding_map::apply_ctor_pair_to_child_region): Likewise.\n+\t(binding_map::get_overlapping_bindings): New.\n+\t(binding_map::remove_overlapping_bindings): New.\n+\t(binding_cluster::validate): New.\n+\t(binding_cluster::bind): Drop enum binding_kind.\n+\t(binding_cluster::bind_compound_sval): Likewise.\n+\t(binding_cluster::purge_region): Likewise.\n+\t(binding_cluster::zero_fill_region): Reimplement in terms of...\n+\t(binding_cluster::fill_region): New.\n+\t(binding_cluster::mark_region_as_unknown): Drop enum binding_kind.\n+\t(binding_cluster::get_binding): Likewise.\n+\t(binding_cluster::get_binding_recursive): Likewise.\n+\t(binding_cluster::get_any_binding): Likewise.\n+\t(binding_cluster::maybe_get_compound_binding): Reimplement.\n+\t(binding_cluster::get_overlapping_bindings): Delete.\n+\t(binding_cluster::remove_overlapping_bindings): Reimplement in\n+\tterms of binding_map::remove_overlapping_bindings.\n+\t(binding_cluster::can_merge_p): Update for removal of\n+\tenum binding_kind.\n+\t(binding_cluster::on_unknown_fncall): Drop enum binding_kind.\n+\t(binding_cluster::maybe_get_simple_value): Likewise.\n+\t(store_manager::get_concrete_binding): Likewise.\n+\t(store_manager::get_symbolic_binding): Likewise.\n+\t(store::validate): New.\n+\t(store::set_value): Drop enum binding_kind.\n+\t(store::zero_fill_region): Reimplement in terms of...\n+\t(store::fill_region): New.\n+\t(selftest::test_binding_key_overlap): Drop enum binding_kind.\n+\t* store.h (enum binding_kind): Delete.\n+\t(binding_kind_to_string): Delete decl.\n+\t(binding_key::make): Drop enum binding_kind.\n+\t(binding_key::dump_to_pp): Make pure virtual.\n+\t(binding_key::get_kind): Delete.\n+\t(binding_key::mark_deleted): Delete.\n+\t(binding_key::mark_empty): Delete.\n+\t(binding_key::is_deleted): Delete.\n+\t(binding_key::is_empty): Delete.\n+\t(binding_key::binding_key): Delete.\n+\t(binding_key::impl_hash): Delete.\n+\t(binding_key::impl_eq): Delete.\n+\t(binding_key::m_kind): Delete.\n+\t(bit_range::get_last_bit_offset): New.\n+\t(bit_range::contains_p): New.\n+\t(byte_range::contains_p): New.\n+\t(byte_range::operator==): New.\n+\t(byte_range::get_start_byte_offset): New.\n+\t(byte_range::get_next_byte_offset): New.\n+\t(byte_range::get_last_byte_offset): New.\n+\t(byte_range::as_bit_range): New.\n+\t(byte_range::cmp): New.\n+\t(concrete_binding::concrete_binding): Drop enum binding_kind.\n+\t(concrete_binding::hash): Likewise.\n+\t(concrete_binding::operator==): Likewise.\n+\t(concrete_binding::mark_deleted): New.\n+\t(concrete_binding::mark_empty): New.\n+\t(concrete_binding::is_deleted): New.\n+\t(concrete_binding::is_empty): New.\n+\t(default_hash_traits<ana::concrete_binding>::empty_zero_p): Make false.\n+\t(symbolic_binding::symbolic_binding): Drop enum binding_kind.\n+\t(symbolic_binding::hash): Likewise.\n+\t(symbolic_binding::operator==): Likewise.\n+\t(symbolic_binding::mark_deleted): New.\n+\t(symbolic_binding::mark_empty): New.\n+\t(symbolic_binding::is_deleted): New.\n+\t(symbolic_binding::is_empty): New.\n+\t(binding_map::remove_overlapping_bindings): New decl.\n+\t(binding_map::get_overlapping_bindings): New decl.\n+\t(binding_cluster::validate): New decl.\n+\t(binding_cluster::bind): Drop enum binding_kind.\n+\t(binding_cluster::fill_region): New decl.\n+\t(binding_cluster::get_binding): Drop enum binding_kind.\n+\t(binding_cluster::get_binding_recursive): Likewise.\n+\t(binding_cluster::get_overlapping_bindings): Delete.\n+\t(store::validate): New decl.\n+\t(store::set_value): Drop enum binding_kind.\n+\t(store::fill_region): New decl.\n+\t(store_manager::get_concrete_binding): Drop enum binding_kind.\n+\t(store_manager::get_symbolic_binding): Likewise.\n+\t* svalue.cc (svalue::cmp_ptr): Handle SK_REPEATED and\n+\tSK_BITS_WITHIN.\n+\t(svalue::extract_bit_range): New.\n+\t(svalue::maybe_fold_bits_within): New.\n+\t(constant_svalue::maybe_fold_bits_within): New.\n+\t(unknown_svalue::maybe_fold_bits_within): New.\n+\t(unaryop_svalue::maybe_fold_bits_within): New.\n+\t(repeated_svalue::repeated_svalue): New.\n+\t(repeated_svalue::dump_to_pp): New.\n+\t(repeated_svalue::accept): New.\n+\t(repeated_svalue::all_zeroes_p): New.\n+\t(repeated_svalue::maybe_fold_bits_within): New.\n+\t(bits_within_svalue::bits_within_svalue): New.\n+\t(bits_within_svalue::dump_to_pp): New.\n+\t(bits_within_svalue::maybe_fold_bits_within): New.\n+\t(bits_within_svalue::accept): New.\n+\t(bits_within_svalue::implicitly_live_p): New.\n+\t(compound_svalue::maybe_fold_bits_within): New.\n+\t* svalue.h (enum svalue_kind): Add SK_REPEATED and SK_BITS_WITHIN.\n+\t(svalue::dyn_cast_repeated_svalue): New.\n+\t(svalue::dyn_cast_bits_within_svalue): New.\n+\t(svalue::extract_bit_range): New decl.\n+\t(svalue::maybe_fold_bits_within): New vfunc decl.\n+\t(region_svalue::key_t::mark_empty): Use 2 rather than NULL_TREE.\n+\t(region_svalue::key_t::is_empty): Likewise.\n+\t(default_hash_traits<region_svalue::key_t>::empty_zero_p): Make false.\n+\t(constant_svalue::maybe_fold_bits_within): New.\n+\t(unknown_svalue::maybe_fold_bits_within): New.\n+\t(poisoned_svalue::key_t::mark_empty): Use 2 rather than NULL_TREE.\n+\t(poisoned_svalue::key_t::is_empty): Likewise.\n+\t(default_hash_traits<poisoned_svalue::key_t>::empty_zero_p): Make\n+\tfalse.\n+\t(setjmp_svalue::key_t::mark_empty): Use 2 rather than NULL_TREE.\n+\t(setjmp_svalue::key_t::is_empty): Likewise.\n+\t(default_hash_traits<setjmp_svalue::key_t>::empty_zero_p): Make\n+\tfalse.\n+\t(unaryop_svalue::key_t::mark_empty): Use 2 rather than NULL_TREE.\n+\t(unaryop_svalue::key_t::is_empty): Likewise.\n+\t(unaryop_svalue::maybe_fold_bits_within): New.\n+\t(default_hash_traits<unaryop_svalue::key_t>::empty_zero_p): Make\n+\tfalse.\n+\t(binop_svalue::key_t::mark_empty): Use 2 rather than NULL_TREE.\n+\t(binop_svalue::key_t::is_empty): Likewise.\n+\t(default_hash_traits<binop_svalue::key_t>::empty_zero_p): Make\n+\tfalse.\n+\t(sub_svalue::key_t::mark_empty): Use 2 rather than NULL_TREE.\n+\t(sub_svalue::key_t::is_empty): Likewise.\n+\t(default_hash_traits<sub_svalue::key_t>::empty_zero_p): Make\n+\tfalse.\n+\t(class repeated_svalue): New.\n+\t(is_a_helper <const repeated_svalue *>::test): New.\n+\t(struct default_hash_traits<repeated_svalue::key_t>): New.\n+\t(class bits_within_svalue): New.\n+\t(is_a_helper <const bits_within_svalue *>::test): New.\n+\t(struct default_hash_traits<bits_within_svalue::key_t>): New.\n+\t(widening_svalue::key_t::mark_empty): Use 2 rather than NULL_TREE.\n+\t(widening_svalue::key_t::is_empty): Likewise.\n+\t(default_hash_traits<widening_svalue::key_t>::empty_zero_p): Make\n+\tfalse.\n+\t(compound_svalue::key_t::mark_empty): Use 2 rather than NULL_TREE.\n+\t(compound_svalue::key_t::is_empty): Likewise.\n+\t(compound_svalue::maybe_fold_bits_within): New.\n+\t(default_hash_traits<compound_svalue::key_t>::empty_zero_p): Make\n+\tfalse.\n+\n 2021-06-28  David Malcolm  <dmalcolm@redhat.com>\n \n \t* analyzer.h (byte_offset_t): New typedef."}, {"sha": "d861f29d436ff0ce128d8858cb9aead2320dd57b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b6bfea5f14da53116f2d3efe2446de89b9bc03/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b6bfea5f14da53116f2d3efe2446de89b9bc03/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=25b6bfea5f14da53116f2d3efe2446de89b9bc03", "patch": "@@ -1,3 +1,19 @@\n+2021-06-30  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* constraint.cc (get_normalized_constraints_from_decl): Use\n+\tpush_access_scope_guard instead of push_nested_class_guard.\n+\t* cp-tree.h (struct push_nested_class_guard): Replace with ...\n+\t(struct push_access_scope_guard): ... this.\n+\t* pt.c (push_access_scope): When the argument corresponds to\n+\ta class type, push the class instead of its context.\n+\t(pop_access_scope): Adjust accordingly.\n+\n+2021-06-30  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/100975\n+\tDR 2397\n+\t* decl.c (create_array_type_for_decl): Allow array of auto.\n+\n 2021-06-29  Jason Merrill  <jason@redhat.com>\n \n \t* pt.c (instantiate_decl): Only consider partial specializations of"}, {"sha": "c14ff6e73c668a86f9e677670abfe87040002578", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b6bfea5f14da53116f2d3efe2446de89b9bc03/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b6bfea5f14da53116f2d3efe2446de89b9bc03/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=25b6bfea5f14da53116f2d3efe2446de89b9bc03", "patch": "@@ -1,3 +1,68 @@\n+2021-06-30  Indu Bhagat  <indu.bhagat@oracle.com>\n+\n+\t* gcc.dg/debug/ctf/ctf-skip-types-4.c: Add dg-add-options float64 and\n+\tfloat64x.\n+\n+2021-06-30  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/float128-minmax.c: Adjust expected code for\n+\tpower10.\n+\t* lib/target-supports.exp (check_effective_target_has_arch_pwr10):\n+\tNew.\n+\n+2021-06-30  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* g++.dg/cpp2a/concepts-access2.C: New test.\n+\n+2021-06-30  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/100975\n+\tDR 2397\n+\t* g++.dg/cpp0x/auto24.C: Remove dg-error.\n+\t* g++.dg/cpp0x/auto3.C: Adjust dg-error.\n+\t* g++.dg/cpp0x/auto42.C: Likewise.\n+\t* g++.dg/cpp0x/initlist75.C: Likewise.\n+\t* g++.dg/cpp0x/initlist80.C: Likewise.\n+\t* g++.dg/diagnostic/auto1.C: Remove dg-error.\n+\t* g++.dg/cpp23/auto-array.C: New test.\n+\n+2021-06-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101267\n+\t* gfortran.dg/pr101267.f90: New testcase.\n+\n+2021-06-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/95006\n+\t* gcc.dg/analyzer/clobbers-1.c: New test.\n+\t* gcc.dg/analyzer/clobbers-2.c: New test.\n+\t* gcc.dg/analyzer/data-model-1.c (test_26): Mark xfail as fixed.\n+\t(test_28): Likewise.\n+\t(test_52): Likewise.  Add coverage for end of buffer.\n+\t* gcc.dg/analyzer/explode-1.c: Add leak warning.\n+\t* gcc.dg/analyzer/memset-1.c (test_3): Mark xfail as fixed.\n+\t(test_4): Use char.  Mark xfail as fixed.\n+\t(test_6b): New.\n+\t(test_7): Mark xfail as fixed.  Add coverage for start of buffer.\n+\t(test_8): New.\n+\t(test_9): New.\n+\t* gcc.dg/analyzer/memset-CVE-2017-18549-1.c: New test.\n+\t* gcc.dg/analyzer/symbolic-8.c: New test.\n+\n+2021-06-30  Christophe Lyon  <christophe.lyon@foss.st.com>\n+\n+\t* gcc.dg/debug/ctf/ctf-skip-types-2.c: Add dg-add-options float16.\n+\n+2021-06-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101264\n+\t* gfortran.dg/pr101264.f90: New testcase.\n+\n+2021-06-30  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/101248\n+\t* gcc.target/i386/pr101248.c: New test.\n+\n 2021-06-29  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* gcc.dg/pr101254.c: New."}, {"sha": "0143d429eb881ece9481cc95b73a84aa66f1af40", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b6bfea5f14da53116f2d3efe2446de89b9bc03/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b6bfea5f14da53116f2d3efe2446de89b9bc03/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=25b6bfea5f14da53116f2d3efe2446de89b9bc03", "patch": "@@ -1,3 +1,8 @@\n+2021-06-30  Gerald Pfeifer  <gerald@pfeifer.com>\n+\n+\t* make-temp-file.c (usrtmp): Remove.\n+\t(choose_tmpdir): Remove use of usrtmp.\n+\n 2021-06-28  Indu Bhagat  <indu.bhagat@oracle.com>\n \n \t* simple-object.c (handle_lto_debug_sections): Copy over .BTF section."}, {"sha": "d7887e52b9617c4472d0734415f98aa03e2e3cc6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b6bfea5f14da53116f2d3efe2446de89b9bc03/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b6bfea5f14da53116f2d3efe2446de89b9bc03/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=25b6bfea5f14da53116f2d3efe2446de89b9bc03", "patch": "@@ -1,3 +1,45 @@\n+2021-06-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/101258\n+\t* doc/doxygen/user.cfg.in (INPUT): Add <experimental/simd>.\n+\t(COLS_IN_ALPHA_INDEX): Remove obsolete tag.\n+\t(PREDEFINED): Add/fix some more macros that need to be expanded.\n+\t* include/bits/random.h: Stop Doxygen from documenting internal\n+\timplementation details.\n+\t* include/bits/random.tcc: Likewise.\n+\t* include/bits/this_thread_sleep.h: Fix @file name.\n+\t* include/experimental/bits/simd.h: Add to Doxygen group. Do not\n+\tdocument internal implementation details.\n+\t* include/experimental/bits/simd_detail.h: Do not document\n+\tinternal implementation details.\n+\t* include/experimental/simd: Define Doxygen groups.\n+\t* include/experimental/type_traits: Improve documentation for\n+\tthe header file. Define groups. Use @since commands.\n+\t* include/std/scoped_allocator (scoped_allocator_adaptor): Move\n+\tdeclaration before undocumented region.\n+\t* include/std/type_traits (true_type, false_type): Use using\n+\tdeclaration instead of typedef.\n+\t(is_invocable_v, is_nothrow_invocable_v, is_invocable_r_v)\n+\t(is_nothrow_invocable_r_v): Move definitions next to other C++17\n+\tvariable templates.\n+\tDo not document internal implementation details. Move misplaced\n+\tgroup-end command. Define group for variable templates.\n+\t* include/std/variant: Do not document internal implementation\n+\tdetails.\n+\t* testsuite/26_numerics/random/pr60037-neg.cc: Adjust dg-error\n+\tline number.\n+\n+2021-06-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/simd: Do not define anything pre-C++17.\n+\n+2021-06-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/random.tcc [__cpp_inline_variables]: Remove\n+\tredundant definitions of static constexpr member variables.\n+\t* testsuite/26_numerics/random/pr60037-neg.cc: Adjust dg-error\n+\tline number.\n+\n 2021-06-28  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/streambuf.tcc (__copy_streambufs_eof): Remove"}]}