{"sha": "cdcb5f261ea31ae5e27aa618a643765a6f9873d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RjYjVmMjYxZWEzMWFlNWUyN2FhNjE4YTY0Mzc2NWE2Zjk4NzNkOA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2010-08-04T23:57:56Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2010-08-04T23:57:56Z"}, "message": "Simplify logic saving the int registers in the prologue.\n\nFrom-SVN: r162884", "tree": {"sha": "f985932a784977ac26068061cf5f7a514218eb37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f985932a784977ac26068061cf5f7a514218eb37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdcb5f261ea31ae5e27aa618a643765a6f9873d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdcb5f261ea31ae5e27aa618a643765a6f9873d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdcb5f261ea31ae5e27aa618a643765a6f9873d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdcb5f261ea31ae5e27aa618a643765a6f9873d8/comments", "author": null, "committer": null, "parents": [{"sha": "9bf40564e1a7c92ad0faa23f2c00d088ac0959d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bf40564e1a7c92ad0faa23f2c00d088ac0959d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bf40564e1a7c92ad0faa23f2c00d088ac0959d3"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "1d0a11666263394c8d550d6e2857b14ef4b04700", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcb5f261ea31ae5e27aa618a643765a6f9873d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcb5f261ea31ae5e27aa618a643765a6f9873d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cdcb5f261ea31ae5e27aa618a643765a6f9873d8", "patch": "@@ -1,5 +1,8 @@\n 2010-08-04  Richard Henderson  <rth@redhat.com>\n \n+\t* config/i386/i386.c (ix86_expand_prologue): Simplify logic\n+\tsaving the int registers.\n+\n \t* dwarf2out.c: Remove most of the DWARF2_DEBUGGING_INFO\n \tand DWARF2_UNWIND_INFO conditional compilation.\n "}, {"sha": "4be3bfc5157e6f438ded3e41da994b05adc0247e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcb5f261ea31ae5e27aa618a643765a6f9873d8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcb5f261ea31ae5e27aa618a643765a6f9873d8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=cdcb5f261ea31ae5e27aa618a643765a6f9873d8", "patch": "@@ -9194,6 +9194,7 @@ ix86_expand_prologue (void)\n   struct ix86_frame frame;\n   HOST_WIDE_INT allocate;\n   int gen_frame_pointer = frame_pointer_needed;\n+  bool int_registers_saved = false;\n \n   ix86_finalize_stack_realign_flags ();\n \n@@ -9347,7 +9348,10 @@ ix86_expand_prologue (void)\n   allocate = frame.to_allocate + frame.nsseregs * 16 + frame.padding0;\n \n   if (!frame.save_regs_using_mov)\n-    ix86_emit_save_regs ();\n+    {\n+      ix86_emit_save_regs ();\n+      int_registers_saved = true;\n+    }\n   else\n     allocate += frame.nregs * UNITS_PER_WORD;\n \n@@ -9356,7 +9360,7 @@ ix86_expand_prologue (void)\n   if (flag_stack_check == STATIC_BUILTIN_STACK_CHECK)\n     {\n       /* We expect the registers to be saved when probes are used.  */\n-      gcc_assert (!frame.save_regs_using_mov);\n+      gcc_assert (int_registers_saved);\n \n       if (STACK_CHECK_MOVING_SP)\n \t{\n@@ -9382,13 +9386,17 @@ ix86_expand_prologue (void)\n      avoid doing this if I am going to have to probe the stack since\n      at least on x86_64 the stack probe can turn into a call that clobbers\n      a red zone location */\n-  if (!TARGET_64BIT_MS_ABI && TARGET_RED_ZONE && frame.save_regs_using_mov\n+  if (!int_registers_saved\n+      && (TARGET_RED_ZONE && !TARGET_64BIT_MS_ABI)\n       && (! TARGET_STACK_PROBE || allocate < CHECK_STACK_LIMIT))\n-    ix86_emit_save_regs_using_mov ((frame_pointer_needed\n-\t\t\t\t     && !crtl->stack_realign_needed)\n-                                   ? hard_frame_pointer_rtx\n-\t\t\t\t   : stack_pointer_rtx,\n-\t\t\t\t   -frame.nregs * UNITS_PER_WORD);\n+    {\n+      ix86_emit_save_regs_using_mov ((frame_pointer_needed\n+\t\t\t\t      && !crtl->stack_realign_needed)\n+                                     ? hard_frame_pointer_rtx\n+\t\t\t\t     : stack_pointer_rtx,\n+\t\t\t\t     -frame.nregs * UNITS_PER_WORD);\n+      int_registers_saved = true;\n+    }\n \n   if (allocate == 0)\n     ;\n@@ -9439,9 +9447,7 @@ ix86_expand_prologue (void)\n \t}\n     }\n \n-  if (frame.save_regs_using_mov\n-      && !(!TARGET_64BIT_MS_ABI && TARGET_RED_ZONE\n-         && (! TARGET_STACK_PROBE || allocate < CHECK_STACK_LIMIT)))\n+  if (!int_registers_saved)\n     {\n       if (!frame_pointer_needed\n \t  || !(frame.to_allocate + frame.padding0)"}]}