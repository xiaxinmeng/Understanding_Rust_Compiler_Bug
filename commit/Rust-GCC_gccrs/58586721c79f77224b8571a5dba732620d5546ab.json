{"sha": "58586721c79f77224b8571a5dba732620d5546ab", "node_id": "C_kwDOANBUbNoAKDU4NTg2NzIxYzc5Zjc3MjI0Yjg1NzFhNWRiYTczMjYyMGQ1NTQ2YWI", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-07T03:46:53Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-09T01:50:46Z"}, "message": "c++: friend implicit template instantiation [PR91618]\n\nThis rule that for a friend with a qualified name we try to find a\nmatching template was already in C++98, but it seems we never implemented\nit, and nobody reported it until 2019.\n\nThis patch sets DECL_IMPLICIT_INSTANTIATION to signal to\ncheck_explicit_specialization that we want to find a template, like\ngrokfndecl already did for explicit template args.  check_classfn also needs\nto call it, as check_classfn is called after the call to\ncheck_explicit_specialization in grokfndecl, whereas the call to\nset_decl_namespace comes sooner.  This inconsistency is inelegant, but safer\nat this point in the release cycle; I'll unify them in stage 1.\n\n\tPR c++/91618\n\tPR c++/96604\n\ngcc/cp/ChangeLog:\n\n\t* name-lookup.cc (set_decl_namespace): Set\n\tDECL_IMPLICIT_INSTANTIATION if no non-template match.\n\t* pt.cc (check_explicit_specialization): Check it.\n\t* decl2.cc (check_classfn): Call it.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/friend7.C: Remove xfail.\n\t* g++.dg/template/friend72.C: New test.\n\t* g++.dg/template/friend72a.C: New test.\n\t* g++.dg/template/friend73.C: New test.", "tree": {"sha": "f6d8b7e5f5c980c13ff8c6c92e4c65693839de2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6d8b7e5f5c980c13ff8c6c92e4c65693839de2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58586721c79f77224b8571a5dba732620d5546ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58586721c79f77224b8571a5dba732620d5546ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58586721c79f77224b8571a5dba732620d5546ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58586721c79f77224b8571a5dba732620d5546ab/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "405eda0d34b69fb6ee12ba6ed0f69c2c2411d8ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/405eda0d34b69fb6ee12ba6ed0f69c2c2411d8ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/405eda0d34b69fb6ee12ba6ed0f69c2c2411d8ee"}], "stats": {"total": 78, "additions": 75, "deletions": 3}, "files": [{"sha": "c780702572d5bcdb4ccff0f4d6a9482c97ffa19c", "filename": "gcc/cp/decl2.cc", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58586721c79f77224b8571a5dba732620d5546ab/gcc%2Fcp%2Fdecl2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58586721c79f77224b8571a5dba732620d5546ab/gcc%2Fcp%2Fdecl2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.cc?ref=58586721c79f77224b8571a5dba732620d5546ab", "patch": "@@ -734,11 +734,15 @@ check_classfn (tree ctype, tree function, tree template_parms)\n   tree pushed_scope = push_scope (ctype);\n   tree matched = NULL_TREE;\n   tree fns = get_class_binding (ctype, DECL_NAME (function));\n-  \n+  bool saw_template = false;\n+\n   for (ovl_iterator iter (fns); !matched && iter; ++iter)\n     {\n       tree fndecl = *iter;\n \n+      if (TREE_CODE (fndecl) == TEMPLATE_DECL)\n+\tsaw_template = true;\n+\n       /* A member template definition only matches a member template\n \t declaration.  */\n       if (is_template != (TREE_CODE (fndecl) == TEMPLATE_DECL))\n@@ -788,6 +792,23 @@ check_classfn (tree ctype, tree function, tree template_parms)\n \tmatched = fndecl;\n     }\n \n+  if (!matched && !is_template && saw_template\n+      && !processing_template_decl && DECL_UNIQUE_FRIEND_P (function))\n+    {\n+      /* \"[if no non-template match is found,] each remaining function template\n+\t is replaced with the specialization chosen by deduction from the\n+\t friend declaration or discarded if deduction fails.\"\n+\n+\t So ask check_explicit_specialization to find a matching template.  */\n+      SET_DECL_IMPLICIT_INSTANTIATION (function);\n+      tree spec = check_explicit_specialization (DECL_NAME (function),\n+\t\t\t\t\t\t function, /* tcount */0,\n+\t\t\t\t\t\t /* friend flag */4,\n+\t\t\t\t\t\t /* attrlist */NULL_TREE);\n+      if (spec != error_mark_node)\n+\tmatched = spec;\n+    }\n+\n   if (!matched)\n     {\n       if (!COMPLETE_TYPE_P (ctype))"}, {"sha": "118da0950af4d1ea4a21549dbb81aca1d94c91b5", "filename": "gcc/cp/name-lookup.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58586721c79f77224b8571a5dba732620d5546ab/gcc%2Fcp%2Fname-lookup.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58586721c79f77224b8571a5dba732620d5546ab/gcc%2Fcp%2Fname-lookup.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.cc?ref=58586721c79f77224b8571a5dba732620d5546ab", "patch": "@@ -5898,6 +5898,7 @@ set_decl_namespace (tree decl, tree scope, bool friendp)\n \n   tree found = NULL_TREE;\n   bool hidden_p = false;\n+  bool saw_template = false;\n \n   for (lkp_iterator iter (old); iter; ++iter)\n     {\n@@ -5922,6 +5923,20 @@ set_decl_namespace (tree decl, tree scope, bool friendp)\n \t  found = ofn;\n \t  hidden_p = iter.hidden_p ();\n \t}\n+      else if (TREE_CODE (decl) == FUNCTION_DECL\n+\t       && TREE_CODE (ofn) == TEMPLATE_DECL)\n+\tsaw_template = true;\n+    }\n+\n+  if (!found && friendp && saw_template)\n+    {\n+      /* \"[if no non-template match is found,] each remaining function template\n+\t is replaced with the specialization chosen by deduction from the\n+\t friend declaration or discarded if deduction fails.\"\n+\n+\t So tell check_explicit_specialization to look for a match.  */\n+      SET_DECL_IMPLICIT_INSTANTIATION (decl);\n+      return;\n     }\n \n   if (found)"}, {"sha": "78519562953b757ba71e7e28ea52081e52f11fe2", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58586721c79f77224b8571a5dba732620d5546ab/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58586721c79f77224b8571a5dba732620d5546ab/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=58586721c79f77224b8571a5dba732620d5546ab", "patch": "@@ -2863,7 +2863,9 @@ check_explicit_specialization (tree declarator,\n \t  specialization = 1;\n \t  SET_DECL_TEMPLATE_SPECIALIZATION (decl);\n \t}\n-      else if (TREE_CODE (declarator) == TEMPLATE_ID_EXPR)\n+      else if (TREE_CODE (declarator) == TEMPLATE_ID_EXPR\n+\t       || (DECL_LANG_SPECIFIC (decl)\n+\t\t   && DECL_IMPLICIT_INSTANTIATION (decl)))\n \t{\n \t  if (is_friend)\n \t    /* This could be something like:"}, {"sha": "4d0961c0397ed0bef834f4fc540059465e162d58", "filename": "gcc/testsuite/g++.dg/cpp0x/friend7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58586721c79f77224b8571a5dba732620d5546ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffriend7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58586721c79f77224b8571a5dba732620d5546ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffriend7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffriend7.C?ref=58586721c79f77224b8571a5dba732620d5546ab", "patch": "@@ -21,7 +21,7 @@ struct S {\n   friend class __attribute__((deprecated)) N3;\n   [[deprecated]] friend void foo<>(int, int); // { dg-warning \"attribute ignored\" }\n   [[deprecated]] friend void ::foo(int, int); // { dg-warning \"attribute ignored\" }\n-  // { dg-bogus \"should have\" \"PR100339\" { xfail *-*-* } .-1 }\n+  // { dg-bogus \"should have\" \"PR100339\" }\n };\n \n template<typename T>"}, {"sha": "b499909076d358088ba1f0be2b64bb8d54789aed", "filename": "gcc/testsuite/g++.dg/template/friend72.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58586721c79f77224b8571a5dba732620d5546ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend72.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58586721c79f77224b8571a5dba732620d5546ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend72.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend72.C?ref=58586721c79f77224b8571a5dba732620d5546ab", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/91618\n+// { dg-do link }\n+\n+template <class T> int f(T t)\n+{ return t.i; }\n+\n+class A {\n+  friend int ::f(A);\n+  int i;\n+};\n+\n+int main()\n+{\n+  f(A()); // link error, trying to call non-template function\n+}"}, {"sha": "ef6834aae2d006695bcbd72f2d03598004340ccd", "filename": "gcc/testsuite/g++.dg/template/friend72a.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58586721c79f77224b8571a5dba732620d5546ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend72a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58586721c79f77224b8571a5dba732620d5546ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend72a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend72a.C?ref=58586721c79f77224b8571a5dba732620d5546ab", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/91618\n+\n+template <class T> int f(T t, int)\n+{ return t.i; }\n+\n+class A {\n+  friend int ::f(A);\t\t// { dg-error \"\" }\n+  int i;\n+};\n+\n+int main()\n+{\n+  f(A());\t\t\t// { dg-error \"no match\" }\n+}"}, {"sha": "d009ec7a9907993602f17fddf14462ade71ad327", "filename": "gcc/testsuite/g++.dg/template/friend73.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58586721c79f77224b8571a5dba732620d5546ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend73.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58586721c79f77224b8571a5dba732620d5546ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend73.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend73.C?ref=58586721c79f77224b8571a5dba732620d5546ab", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/96604\n+\n+struct A { template<typename T> operator T(); };\n+struct X {};\n+struct B { friend A::operator X(); };"}]}