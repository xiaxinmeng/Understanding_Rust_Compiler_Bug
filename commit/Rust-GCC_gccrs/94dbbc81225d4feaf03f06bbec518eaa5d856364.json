{"sha": "94dbbc81225d4feaf03f06bbec518eaa5d856364", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRkYmJjODEyMjVkNGZlYWYwM2YwNmJiZWM1MThlYWE1ZDg1NjM2NA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-07-05T20:03:25Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-07-05T20:03:25Z"}, "message": "ChangeLog: Fix whitespace.\n\n\t* ChangeLog: Fix whitespace.\n\t* testsuite/ChangeLog: Ditto.\n\nFrom-SVN: r161850", "tree": {"sha": "43bed61e60e23521359bcb61bfbaae0992bd30dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43bed61e60e23521359bcb61bfbaae0992bd30dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94dbbc81225d4feaf03f06bbec518eaa5d856364", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94dbbc81225d4feaf03f06bbec518eaa5d856364", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94dbbc81225d4feaf03f06bbec518eaa5d856364", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94dbbc81225d4feaf03f06bbec518eaa5d856364/comments", "author": null, "committer": null, "parents": [{"sha": "938650d8fddb878f623e315f0b7fd94b217efa96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/938650d8fddb878f623e315f0b7fd94b217efa96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/938650d8fddb878f623e315f0b7fd94b217efa96"}], "stats": {"total": 130, "additions": 58, "deletions": 72}, "files": [{"sha": "ca62ed00740cc51df1c951a82a8893861d479ac1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 53, "deletions": 67, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94dbbc81225d4feaf03f06bbec518eaa5d856364/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94dbbc81225d4feaf03f06bbec518eaa5d856364/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=94dbbc81225d4feaf03f06bbec518eaa5d856364", "patch": "@@ -58,8 +58,7 @@\n \t* tree.h (reference_alias_ptr_type): Declare.\n \t* tree-ssa-loop-ivopts.c (copy_ref_info): Restructure to\n \tallow non-TARGET_MEM_REF new refs.\n-\t(rewrite_use_address): Pass old alias pointer type to\n-\tcreate_mem_ref.\n+\t(rewrite_use_address): Pass old alias pointer type to create_mem_ref.\n \t* tree-ssa-address.c (create_mem_ref_raw): Get alias pointer type.\n \tBuild a MEM_REF instead of a TARGET_MEM_REF if possible.\n \t(create_mem_ref): Get alias pointer type.  Adjust calls to\n@@ -110,8 +109,8 @@\n \t(addsi3_carryin_alt2_<optab>): Renamed from addsi3_carryin_alt2.\n \tOperands 1 and 2 are commutative.  Parametrize using LTUGEU.\n \t(addsi3_carryin_alt1, addsi3_carryin_alt3): Remove.\n-\t(subsi3_compare): Renamed from subsi3_compare0_c.  Change CC_NOTB to\n-\tCC.\n+\t(subsi3_compare): Renamed from subsi3_compare0_c.\n+\tChange CC_NOTB to CC.\n \t(arm_subsi3_insn): Allow constants for operand 0.\n \t(compare_scc peephole for eq case): New.\n \t(compare_scc splitters): Change CC_NOTB to CC.\n@@ -170,7 +169,7 @@\n \t* tree-vect-loop.c (vect_get_single_scalar_iteraion_cost): Skip\n \tstatements that are not vectorized.\n \t* tree-vect-stmts.c (vect_get_load_cost): Update the value stored\n-\tin INSIDE_COST.\t\n+\tin INSIDE_COST.\n \n 2010-07-05  Mikael Pettersson  <mikpe@it.uu.se>\n \n@@ -189,8 +188,7 @@\n \t(<u>divmodqi4): Likewise.\n \t(divmodqi4): New.\n \t(udivmodqi4): Likewise.\n-\t(divmodhiqi3): Change div/mod to HImode and extend operand 2 to\n-\tHImode.\n+\t(divmodhiqi3): Change div/mod to HImode and extend operand 2 to HImode.\n \t(udivmodhiqi3): Likewise.\n \n 2010-07-04  Jan Hubicka  <jh@suse.cz>\n@@ -199,8 +197,8 @@\n \n 2010-07-04  Jan Hubicka  <jh@suse.cz>\n \n-        * cgraphunit.c (init_cgraph): Only initialize dump file if it is not\n-\talready initialized.\n+\t* cgraphunit.c (init_cgraph): Only initialize dump file if it\n+\tis not already initialized.\n \n 2010-07-04  Richard Sandiford  <rdsandiford@googlemail.com>\n \n@@ -345,7 +343,7 @@\n 2010-07-04  Ira Rosen  <irar@il.ibm.com>\n \t    Revital Eres  <eres@il.ibm.com>\n \n-\t* doc/tm.texi.in (TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST): \n+\t* doc/tm.texi.in (TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST):\n \tDocument new arguments.\n \t* doc/tm.texi: Regenerate.\n \t* targhooks.c (default_builtin_vectorization_cost): Add new arguments.\n@@ -362,7 +360,7 @@\n \tmacro for its access.\n \t(VECT_MAX_COST): Define.\n \t(vect_get_load_cost): Declare.\n-\t(vect_get_store_cost, vect_get_known_peeling_cost, \n+\t(vect_get_store_cost, vect_get_known_peeling_cost,\n \tvect_get_single_scalar_iteraion_cost): Likewise.\n \t(vect_supportable_dr_alignment): Add new argument.\n \t* tree-vect-loop.c (new_loop_vec_info): Initialize peeling hash table\n@@ -373,13 +371,13 @@\n \tvect_analyze_slp. Fix indentation.\n \t(vect_get_single_scalar_iteraion_cost): New function.\n \t(vect_get_known_peeling_cost): Likewise.\n-\t(vect_estimate_min_profitable_iters): Rename byte_misalign to npeel. \n-\tCall vect_get_single_scalar_iteraion_cost instead of cost_for_stmt per \n+\t(vect_estimate_min_profitable_iters): Rename byte_misalign to npeel.\n+\tCall vect_get_single_scalar_iteraion_cost instead of cost_for_stmt per\n \tstatement. Move outside cost calculation inside unknown peeling case.\n \tCall vect_get_known_peeling_cost for known amount of peeling.\n \t* tree-vect-data-refs.c (vect_compute_data_ref_alignment): Add data\n \treference to the print message of forced alignment.\n-\t(vect_verify_datarefs_alignment): Update call to \n+\t(vect_verify_datarefs_alignment): Update call to\n \tvect_supportable_dr_alignment.\n \t(vect_get_data_access_cost): New function.\n \t(vect_peeling_hash, vect_peeling_hash_eq, vect_peeling_hash_insert,\n@@ -391,26 +389,25 @@\n \tcheck if stores are preferred or if peeling is worthy.\n \t(vect_find_same_alignment_drs): Analyze pairs of loads too.\n \t(vect_supportable_dr_alignment): Add new argument and check aligned\n-\taccesses according to it. \n+\taccesses according to it.\n \t* tree-vect-stmts.c (vect_get_stmt_cost): New function.\n-\t(cost_for_stmt): Call vect_get_stmt_cost. \n+\t(cost_for_stmt): Call vect_get_stmt_cost.\n \t(vect_model_simple_cost): Likewise.\n-\t(vect_model_store_cost): Call vect_get_stmt_cost. Call \n+\t(vect_model_store_cost): Call vect_get_stmt_cost. Call\n \tvect_get_store_cost to calculate the cost of the statement.\n \t(vect_get_store_cost): New function.\n-\t(vect_model_load_cost): Call vect_get_stmt_cost. Call \n+\t(vect_model_load_cost): Call vect_get_stmt_cost. Call\n \tvect_get_load_cost to calculate the cost of the statement.\n \t(vect_get_load_cost): New function.\n \t(vectorizable_store): Update call to vect_supportable_dr_alignment.\n \t(vectorizable_load): Likewise.\n-\t* config/spu/spu.c (spu_builtin_vectorization_cost): Add new\n-\targuments. \n+\t* config/spu/spu.c (spu_builtin_vectorization_cost): Add new arguments.\n \t* config/i386/i386.c (ix86_builtin_vectorization_cost): Add new\n \targuments. Handle unaligned store.\n \t* config/rs6000/rs6000.c (rs6000_builtin_vectorization_cost): New.\n \t(rs6000_builtin_support_vector_misalignment): Return true for word and\n \tdouble word alignments for VSX.\n-\t* tree-vect-slp.c (vect_build_slp_tree): Update calls to \n+\t* tree-vect-slp.c (vect_build_slp_tree): Update calls to\n \tvect_supportable_dr_alignment and builtin_vectorization_cost.\n \n 2010-07-03  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n@@ -472,8 +469,7 @@\n \t* config/arm/vfp.md (*push_multi_vfp): Use vfp_register_operand\n \tas predicate for operand 1 and remove its constraint.\n \t* config/arm/predicates.md (vfp_register_operand): New.\n-\t* config/arm/arm.md (*push_multi): Remove the constraint of\n-\toperand 1.\n+\t* config/arm/arm.md (*push_multi): Remove the constraint of operand 1.\n \t(*push_fp_multi): Likewise.\n \n 2010-07-03  Eric Botcazou  <ebotcazou@adacore.com>\n@@ -527,8 +523,8 @@\n \t(mul<mode>3add<mode>_neon, mul<mode>3neg<mode>add<mode>_neon)\n \t(reduc_splus_<mode>, reduc_smin_<mode>, reduc_smax_<mode>): Disable\n \tfor NEON float modes when flag_unsafe_math_optimizations is false.\n-\t(quad_halves_<code>v4sf): Only enable if flag_unsafe_math_optimizations\n-\tis true.\n+\t(quad_halves_<code>v4sf): Only enable if\n+\tflag_unsafe_math_optimizations is true.\n \t* doc/invoke.texi (ARM Options): Add note about floating point\n \tvectorization requiring -funsafe-math-optimizations.\n \n@@ -563,7 +559,7 @@\n \n \t* ipa-split.c (split_function): For aggregate values, set the return\n \tslot optimization bit.  When passing DECL_BY_REFERENCE, produce\n- \t*<retval> = fncall.part ()\n+ \t*<retval> = fncall.part ().\n \t(execute_split_functions): Do not care about DECL_BY_REFERENCE.\n \n 2010-07-02  Sandra Loosemore  <sandra@codesourcery.com>\n@@ -587,7 +583,7 @@\n \t* config/arm/predicates.md (imm_for_neon_logic_operand):\n \tRequire TARGET_NEON.\n \t(imm_for_neon_inv_logic_operand): Likewise.\n-\t* config/arm/arm.md (define_split for logical_binary_operator): \n+\t* config/arm/arm.md (define_split for logical_binary_operator):\n \tDisable for NEON registers.\n \t(anddi3): Add new define_expand, and rename the insn.  Disable\n \tthis insn for NEON, where anddi3_neon now applies.\n@@ -847,8 +843,7 @@\n \n \tPR target/44732\n \t* config/ia64/ia64.c (ia64_register_move_cost): Remove stray '{'.\n-\n-\t* config/ia64/ia64.c (ia64_register_move_cost): Fix argument types.\n+\tFix argument types.\n \n 2010-07-01  Bernd Schmidt  <bernds@codesourcery.com>\n \n@@ -1009,8 +1004,7 @@\n \tRemove old union trick.  Initialize constant offsets.\n \t(ao_ref_init_from_vn_reference): Likewise.  Do not handle\n \tINDIRECT_REF.  Init base_alias_set properly.\n-\t(vn_reference_lookup_3): Replace INDIRECT_REF handling with\n-\tMEM_REF.\n+\t(vn_reference_lookup_3): Replace INDIRECT_REF handling with MEM_REF.\n \t(vn_reference_fold_indirect): Adjust for MEM_REFs.\n \t(valueize_refs): Fold MEM_REFs.  Re-evaluate constant offset\n \tfor ARRAY_REFs.\n@@ -1026,8 +1020,7 @@\n \tbother about volatile qualifiers on pointers.\n \t(fold_const_aggregate_ref): Handle MEM_REF, do not handle INDIRECT_REF.\n \t* tree-ssa-loop-ivopts.c\n-\t* tree-ssa-loop-ivopts.c (determine_base_object): Adjust\n-\tfor MEM_REF.\n+\t* tree-ssa-loop-ivopts.c (determine_base_object): Adjust for MEM_REF.\n \t(strip_offset_1): Likewise.\n \t(find_interesting_uses_address): Replace INDIRECT_REF handling with\n \tMEM_REF handling.\n@@ -1062,7 +1055,6 @@\n \tfor ARRAY_REFs.  Properly handle reference lookups that\n \trequire a bit re-interpretation.\n \t(can_PRE_operation): Do not handle INDIRECT_REF.  Handle MEM_REF.\n-\t* tree-sra.c\n \t* tree-sra.c (build_access_from_expr_1): Handle MEM_REF.\n \t(build_ref_for_offset_1): Remove.\n \t(build_ref_for_offset): Build MEM_REFs.\n@@ -1076,8 +1068,7 @@\n \tMEM_REF handling.\n \t(sra_ipa_modify_expr): Remove INDIRECT_REF handling.\n \tUse mem_ref_offset.  Remove bogus folding.\n-\t(build_access_from_expr_1): Properly handle MEM_REF for\n-\tnon IPA-SRA.\n+\t(build_access_from_expr_1): Properly handle MEM_REF for non IPA-SRA.\n \t(make_fancy_name_1): Add support for MEM_REF.\n \t* tree-predcom.c (ref_at_iteration): Handle MEM_REFs.\n \t* tree-mudflap.c (mf_xform_derefs_1): Adjust for MEM_REF.\n@@ -1100,7 +1091,7 @@\n \t(create_nesting_tree): Allocate it.\n \t(convert_local_reference_op): Insert to be folded mem-refs.\n \t(fold_mem_refs): New function.\n-\t(finalize_nesting_tree_1): Perform defered folding of mem-refs \n+\t(finalize_nesting_tree_1): Perform defered folding of mem-refs\n \t(free_nesting_tree): Free the pointer-set.\n \t* tree-vect-stmts.c (vectorizable_store): Adjust for MEM_REF.\n \t(vectorizable_load): Likewise.\n@@ -1235,8 +1226,7 @@\n \t* toplev.h (_fatal_insn_not_found, _fatal_insn): Move declarations\n \tto rtl.h.\n \t(error_for_asm,\twarning_for_asm): Move declarations to rtl-error.h.\n-\t* rtl.h (_fatal_insn_not_found, _fatal_insn): Move declarations\n-\there.\n+\t* rtl.h (_fatal_insn_not_found, _fatal_insn): Move declarations here.\n \t* rtl-error.h: New.\n \t* regrename.c: Do not include toplev.h. Include rtl-error.h.\n \t* rtl-error.c: Likewise.\n@@ -1319,15 +1309,13 @@\n \t(flags_needed_for_conditional): New function.\n \t(flags_from_mode): New function.\n \t(rx_compare_redundant): New function - scans backwards through\n-\tinsn list to find out if condition flags are already set\n-\tcorrectly.\n+\tinsn list to find out if condition flags are already set correctly.\n \t(TARGET_CC_MODES_COMPATIBLE): Define.\n \t* config/rx/rx-protos.h (rx_compare_redundant): Prototype.\n \n \t* config/rx/rx.h (BRANCH_COST): Define.\n \t(REGISTER_MOVE_COST): Define.\n-\t* config/rx/predicates (rx_source_operand): Allow all constant\n-\ttypes.\n+\t* config/rx/predicates (rx_source_operand): Allow all constant types.\n \t* config/rx/rx.md (addsi3): Add alternative for swapped operands.\n \t(tstsi4): New pattern.\n \t* config/rx/rx.c (rx_memory_move_cost): Define.\n@@ -1517,8 +1505,8 @@\n \t* predict.h (rebuild_frequencies): Declare.\n \t* tree-inline.c (copy_cfg_body): Compute properly count & frequency of\n \tentry block and edge reaching new_entry.\n-\t(tree_function_versioning): When doing partial cloning, rebuild frequencies\n-\twhen done.\n+\t(tree_function_versioning): When doing partial cloning, rebuild\n+\tfrequencies when done.\n \t* passes.c (execute_function_todo): Use rebild_frequencies.\n \n 2010-06-29  Richard Guenther  <rguenther@suse.de>\n@@ -1704,8 +1692,8 @@\n 2010-06-28  Jan Hubicka  <jh@suse.cz>\n \n \tPR tree-optimization/44357\n-\t* ipa-inline.c (add_new_edges_to_heap): Do not add edges to uninlinable\n-\tfunctions.\n+\t* ipa-inline.c (add_new_edges_to_heap): Do not add edges to\n+\tuninlinable functions.\n \n 2010-06-28  Philipp Tomsich  <philipp.tomsich@theobroma-systems.com>\n \n@@ -1717,7 +1705,7 @@\n \t* config/rs6000/rs6000.md (cpu): Add titan.  Include \"titan.md\".\n \t* config/rs6000/titan.md: New file.\n \t* doc/invoke.texi (RS/6000 and PowerPC Options): Document -mcpu=titan.\n-\t\n+\n 2010-06-28  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* tree-browser.c (TB_history_stack): Convert to a VEC.\n@@ -1751,22 +1739,22 @@\n \n 2010-06-28  Bingfeng Mei  <bmei@broadcom.com>\n \n-        * cgraph.h (struct varpool_node): new used_from_object_file flag.\n-        (struct cgraph_local_info): new used_from_object_file flag.\n-        * cgraph.c (dump_cgraph_node): dump used_from_object_file flag.\n-        (cgraph_clone_node): initialize used_from_object_file.\n-        (cgraph_create_virtual_clone): initialize used_from_object_file.\n-        * lto-symbtab.c (lto_symtab_merge_decls_1): Set\n-        used_from_object_file flags for symbols of LDPR_PREVAILING_DEF\n-        when compiling with -fwhole-program.\n-        (lto_symtab_resolve_symbols) Use LDPR_PREVAILING_DEF_IRONLY for\n+\t* cgraph.h (struct varpool_node): new used_from_object_file flag.\n+\t(struct cgraph_local_info): new used_from_object_file flag.\n+\t* cgraph.c (dump_cgraph_node): dump used_from_object_file flag.\n+\t(cgraph_clone_node): initialize used_from_object_file.\n+\t(cgraph_create_virtual_clone): initialize used_from_object_file.\n+\t* lto-symbtab.c (lto_symtab_merge_decls_1): Set\n+\tused_from_object_file flags for symbols of LDPR_PREVAILING_DEF\n+\twhen compiling with -fwhole-program.\n+\t(lto_symtab_resolve_symbols) Use LDPR_PREVAILING_DEF_IRONLY for\n \tinternal resolver.\n-        * ipa.c (function_and_variable_visibility): Set externally_visible\n-        flag of varpool_node if used_from_object_file flag is set.\n-        (cgraph_externally_visible_p): check used_from_object_file flag.\n-        * doc/invoke.texi (-fwhole-program option): Change description of\n-        externally_visible attribute accordingly.\n-        * doc/extend.texi (externally_visible): Ditto.\n+\t* ipa.c (function_and_variable_visibility): Set externally_visible\n+\tflag of varpool_node if used_from_object_file flag is set.\n+\t(cgraph_externally_visible_p): check used_from_object_file flag.\n+\t* doc/invoke.texi (-fwhole-program option): Change description of\n+\texternally_visible attribute accordingly.\n+\t* doc/extend.texi (externally_visible): Ditto.\n \n 2010-06-27  Jan Hubicka  <jh@suse.cz>\n \n@@ -1878,8 +1866,7 @@\n \t(visit_bb): Handle PHIs correctly.\n \t* tree-inline.c (copy_phis_for_bb): Be able to copy\n \tPHI from entry edge.\n-\t(copy_cfg_body): Produce edge from entry BB before copying\n-\tPHIs.\n+\t(copy_cfg_body): Produce edge from entry BB before copying PHIs.\n \n 2010-06-26  Richard Guenther  <rguenther@suse.de>\n \n@@ -2082,8 +2069,7 @@\n \n \t* config/pa/pa.h (MODIFY_TARGET_NAME): Remove.\n \t* doc/tm.texi (MODIFY_TARGET_NAME): Don't document.\n-\t* gcc.c (enum add_del, struct modify_target, modify_target):\n-\tRemove.\n+\t* gcc.c (enum add_del, struct modify_target, modify_target): Remove.\n \t(process_command): Remove code conditional on MODIFY_TARGET_NAME.\n \t* system.h (MODIFY_TARGET_NAME): Poison.\n "}, {"sha": "0828a6ddb75db2d1b586deec0319a83d1ecfb3ec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94dbbc81225d4feaf03f06bbec518eaa5d856364/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94dbbc81225d4feaf03f06bbec518eaa5d856364/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=94dbbc81225d4feaf03f06bbec518eaa5d856364", "patch": "@@ -64,15 +64,15 @@\n \tmisaligned stores.\n \t* gcc.dg/vect/vect-60.c, gcc.dg/vect/vect-56.c, gcc.dg/vect/vect-93.c,\n \tgcc.dg/vect/vect-96.c: Likewise.\n-\t* gcc.dg/vect/vect-109.c: Expect vectorization only on targets that\t\n-\tthat support misaligned stores. Change the number of expected \n+\t* gcc.dg/vect/vect-109.c: Expect vectorization only on targets that\n+\tthat support misaligned stores. Change the number of expected\n \tmisaligned accesses.\n \t* gcc.dg/vect/vect-peel-1.c: New test.\n-\t* gcc.dg/vect/vect-peel-2.c, gcc.dg/vect/vect-peel-3.c, \n+\t* gcc.dg/vect/vect-peel-2.c, gcc.dg/vect/vect-peel-3.c,\n \tgcc.dg/vect/vect-peel-4.c: Likewise.\n-\t* gcc.dg/vect/vect-multitypes-1.c: Change the test to make it \n+\t* gcc.dg/vect/vect-multitypes-1.c: Change the test to make it\n \tvectorizable on all targets that support realignment.\n-\t* gcc.dg/vect/vect-multitypes-4.c: Likewise. \t\n+\t* gcc.dg/vect/vect-multitypes-4.c: Likewise.\n \n 2010-07-03  H.J. Lu  <hongjiu.lu@intel.com>\n "}]}