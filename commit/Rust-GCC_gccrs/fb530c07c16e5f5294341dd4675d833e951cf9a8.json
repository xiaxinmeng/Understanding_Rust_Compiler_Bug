{"sha": "fb530c07c16e5f5294341dd4675d833e951cf9a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI1MzBjMDdjMTZlNWY1Mjk0MzQxZGQ0Njc1ZDgzM2U5NTFjZjlhOA==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2001-09-11T00:20:23Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2001-09-11T00:20:23Z"}, "message": "dbxout.c (dbxout_parms): Fix typo in comment.\n\n\t* dbxout.c (dbxout_parms): Fix typo in comment.\n\t* unroll.c (loop_find_equiv_value): Ditto.\n\t* toplev.c (rest_of_compilation): Ditto.\n\t* loop.c (scan_loop): Ditto.\n\t(scan_loop): Ditto.\n\t* dwarf2out.c (struct dw_fde_struct): Ditto.\n\nFrom-SVN: r45531", "tree": {"sha": "dd9f563a9189153b8e7a2d3d71c2577e726d60f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd9f563a9189153b8e7a2d3d71c2577e726d60f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb530c07c16e5f5294341dd4675d833e951cf9a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb530c07c16e5f5294341dd4675d833e951cf9a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb530c07c16e5f5294341dd4675d833e951cf9a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb530c07c16e5f5294341dd4675d833e951cf9a8/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f280fdf44d1a1ef5f03d9429ff0b4704ac585765", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f280fdf44d1a1ef5f03d9429ff0b4704ac585765", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f280fdf44d1a1ef5f03d9429ff0b4704ac585765"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "943377cdad18ad52deab6a889508569bbf95eeef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb530c07c16e5f5294341dd4675d833e951cf9a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb530c07c16e5f5294341dd4675d833e951cf9a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb530c07c16e5f5294341dd4675d833e951cf9a8", "patch": "@@ -1,3 +1,12 @@\n+2001-09-11  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* dbxout.c (dbxout_parms): Fix typo in comment.\n+\t* unroll.c (loop_find_equiv_value): Ditto.\n+\t* toplev.c (rest_of_compilation): Ditto.\n+\t* loop.c (scan_loop): Ditto.\n+\t(scan_loop): Ditto.\n+\t* dwarf2out.c (struct dw_fde_struct): Ditto.\n+\n 2001-09-10  Zack Weinberg  <zackw@panix.com>\n \n \t* cpplex.c (parse_identifier): Fast-path optimize.  Avoid"}, {"sha": "4e7f70da7118a97d6ca8376432b678341f569c83", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb530c07c16e5f5294341dd4675d833e951cf9a8/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb530c07c16e5f5294341dd4675d833e951cf9a8/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=fb530c07c16e5f5294341dd4675d833e951cf9a8", "patch": "@@ -2450,7 +2450,7 @@ dbxout_parms (parms)\n \t       passing a float to an unprototyped function, gcc will store a\n \t       double on the stack, but if we emit a stab saying the type is a\n \t       float, then gdb will only read in a single value, and this will\n-\t       produce an erropneous value.  */\n+\t       produce an erroneous value.  */\n  \t    dbxout_type (DECL_ARG_TYPE (parms), 0);\n \t    current_sym_value = DEBUGGER_ARG_OFFSET (current_sym_value, addr);\n \t    dbxout_finish_symbol (parms);"}, {"sha": "739e62970247a954bc6c5636ea12a71caba86787", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb530c07c16e5f5294341dd4675d833e951cf9a8/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb530c07c16e5f5294341dd4675d833e951cf9a8/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=fb530c07c16e5f5294341dd4675d833e951cf9a8", "patch": "@@ -155,7 +155,7 @@ typedef struct cfa_loc\n \n /* All call frame descriptions (FDE's) in the GCC generated DWARF\n    refer to a single Common Information Entry (CIE), defined at\n-   the beginning of the .debug_frame section.  This used of a single\n+   the beginning of the .debug_frame section.  This use of a single\n    CIE obviates the need to keep track of multiple CIE's\n    in the DWARF generation routines below.  */\n "}, {"sha": "e20e0592ca16048b9edaf98fe9ea9a3c1f1b8eb0", "filename": "gcc/loop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb530c07c16e5f5294341dd4675d833e951cf9a8/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb530c07c16e5f5294341dd4675d833e951cf9a8/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=fb530c07c16e5f5294341dd4675d833e951cf9a8", "patch": "@@ -727,7 +727,7 @@ scan_loop (loop, flags)\n \t\t      something after this point in the loop might\n \t\t      depend on its value before the set).  */\n \t\t   ! reg_in_basic_block_p (p, SET_DEST (set))\n-\t\t   /* And the set is not guaranteed to be executed one\n+\t\t   /* And the set is not guaranteed to be executed once\n \t\t      the loop starts, or the value before the set is\n \t\t      needed before the set occurs...\n \n@@ -963,7 +963,7 @@ scan_loop (loop, flags)\n \t\t  beginning, don't set maybe_never for that.  This must be an\n \t\t  unconditional jump, otherwise the code at the top of the\n \t\t  loop might never be executed.  Unconditional jumps are\n-\t\t  followed a by barrier then loop end.  */\n+\t\t  followed by a barrier then the loop_end.  */\n                && ! (GET_CODE (p) == JUMP_INSN && JUMP_LABEL (p) == loop->top\n \t\t     && NEXT_INSN (NEXT_INSN (p)) == loop_end\n \t\t     && any_uncondjump_p (p)))"}, {"sha": "087a13a2cd8f8a7f37f652a7445f47d97b71abd0", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb530c07c16e5f5294341dd4675d833e951cf9a8/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb530c07c16e5f5294341dd4675d833e951cf9a8/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=fb530c07c16e5f5294341dd4675d833e951cf9a8", "patch": "@@ -2827,7 +2827,7 @@ rest_of_compilation (decl)\n   unshare_all_rtl (current_function_decl, insns);\n \n #ifdef SETJMP_VIA_SAVE_AREA\n-  /* This must be performed before virutal register instantiation.  */\n+  /* This must be performed before virtual register instantiation.  */\n   if (current_function_calls_alloca)\n     optimize_save_area_alloca (insns);\n #endif"}, {"sha": "bf0c607dffc70618bd4cbef6ac081af0e08547b1", "filename": "gcc/unroll.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb530c07c16e5f5294341dd4675d833e951cf9a8/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb530c07c16e5f5294341dd4675d833e951cf9a8/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=fb530c07c16e5f5294341dd4675d833e951cf9a8", "patch": "@@ -3352,7 +3352,7 @@ final_giv_value (loop, v)\n   return 0;\n }\n \n-/* Look back before LOOP->START for then insn that sets REG and return\n+/* Look back before LOOP->START for the insn that sets REG and return\n    the equivalent constant if there is a REG_EQUAL note otherwise just\n    the SET_SRC of REG.  */\n "}]}