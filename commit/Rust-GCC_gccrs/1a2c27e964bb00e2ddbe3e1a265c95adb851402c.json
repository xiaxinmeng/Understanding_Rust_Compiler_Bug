{"sha": "1a2c27e964bb00e2ddbe3e1a265c95adb851402c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWEyYzI3ZTk2NGJiMDBlMmRkYmUzZTFhMjY1Yzk1YWRiODUxNDAyYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-01-11T18:47:28Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-01-11T18:47:28Z"}, "message": "tree.h (build_function_decl_skip_args): Add boolean parameter.\n\n\t* tree.h (build_function_decl_skip_args): Add boolean parameter.\n\t(build_function_type_skip_args): Delete.\n\t* tree.c (build_function_type_skip_args): Make static and add\n\tSKIP_RETURN parameter.  Fix thinko in the handling of variants.\n\t(build_function_decl_skip_args): Add SKIP_RETURN parameter and\n\tpass it to build_function_type_skip_args.\n\t* cgraph.h (cgraph_function_versioning): Add boolean parameter.\n\t(tree_function_versioning): Likewise.\n\t* cgraph.c (cgraph_create_virtual_clone): Adjust call to\n\tbuild_function_decl_skip_args.\n\t* cgraphunit.c (cgraph_function_versioning): Add SKIP_RETURN parameter\n\tand pass it to build_function_decl_skip_args/tree_function_versioning.\n\t(cgraph_materialize_clone): Adjust call to tree_function_versioning.\n\t* ipa-inline-transform.c (save_inline_function_body): Likewise.\n\t* trans-mem.c (ipa_tm_create_version): Likewise.\n\t* tree-sra.c (modify_function): Ditto for cgraph_function_versioning.\n\t* tree-inline.c (declare_return_variable): Remove always-true test.\n\t(tree_function_versioning): Add SKIP_RETURN parameter.  If the function\n\treturns non-void and SKIP_RETURN, create a void-typed RESULT_DECL.\n\t* ipa-split.c (split_function): Skip the return value for the split\n\tpart if it doesn't return.\n\nFrom-SVN: r183102", "tree": {"sha": "f3e48a68df89c7419d086f7a678f0af82c975f18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3e48a68df89c7419d086f7a678f0af82c975f18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a2c27e964bb00e2ddbe3e1a265c95adb851402c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a2c27e964bb00e2ddbe3e1a265c95adb851402c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a2c27e964bb00e2ddbe3e1a265c95adb851402c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/comments", "author": null, "committer": null, "parents": [{"sha": "b2e25729e5a4b93e4c022815f19a43e4ae01f11e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2e25729e5a4b93e4c022815f19a43e4ae01f11e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2e25729e5a4b93e4c022815f19a43e4ae01f11e"}], "stats": {"total": 205, "additions": 171, "deletions": 34}, "files": [{"sha": "bc8e97a023dff86a0fe7f761f3c1c184b32b0df4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a2c27e964bb00e2ddbe3e1a265c95adb851402c", "patch": "@@ -1,3 +1,27 @@\n+2012-01-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree.h (build_function_decl_skip_args): Add boolean parameter.\n+\t(build_function_type_skip_args): Delete.\n+\t* tree.c (build_function_type_skip_args): Make static and add\n+\tSKIP_RETURN parameter.  Fix thinko in the handling of variants.\n+\t(build_function_decl_skip_args): Add SKIP_RETURN parameter and\n+\tpass it to build_function_type_skip_args.\n+\t* cgraph.h (cgraph_function_versioning): Add boolean parameter.\n+\t(tree_function_versioning): Likewise.\n+\t* cgraph.c (cgraph_create_virtual_clone): Adjust call to\n+\tbuild_function_decl_skip_args.\n+\t* cgraphunit.c (cgraph_function_versioning): Add SKIP_RETURN parameter\n+\tand pass it to build_function_decl_skip_args/tree_function_versioning.\n+\t(cgraph_materialize_clone): Adjust call to tree_function_versioning.\n+\t* ipa-inline-transform.c (save_inline_function_body): Likewise.\n+\t* trans-mem.c (ipa_tm_create_version): Likewise.\n+\t* tree-sra.c (modify_function): Ditto for cgraph_function_versioning.\n+\t* tree-inline.c (declare_return_variable): Remove always-true test.\n+\t(tree_function_versioning): Add SKIP_RETURN parameter.  If the function\n+\treturns non-void and SKIP_RETURN, create a void-typed RESULT_DECL.\n+\t* ipa-split.c (split_function): Skip the return value for the split\n+\tpart if it doesn't return.\n+\n 2012-01-11  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR tree-optimization/49642"}, {"sha": "9cc36903a8c5c6b982d08dd7798f960c620e3c45", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=1a2c27e964bb00e2ddbe3e1a265c95adb851402c", "patch": "@@ -2246,7 +2246,7 @@ cgraph_create_virtual_clone (struct cgraph_node *old_node,\n   if (!args_to_skip)\n     new_decl = copy_node (old_decl);\n   else\n-    new_decl = build_function_decl_skip_args (old_decl, args_to_skip);\n+    new_decl = build_function_decl_skip_args (old_decl, args_to_skip, false);\n   DECL_STRUCT_FUNCTION (new_decl) = NULL;\n \n   /* Generate a new name for the new version. */"}, {"sha": "191364ca37728c0ed6ff2d672d67243efcee04be", "filename": "gcc/cgraph.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=1a2c27e964bb00e2ddbe3e1a265c95adb851402c", "patch": "@@ -580,10 +580,10 @@ struct cgraph_node * cgraph_copy_node_for_versioning (struct cgraph_node *,\n struct cgraph_node *cgraph_function_versioning (struct cgraph_node *,\n \t\t\t\t\t\tVEC(cgraph_edge_p,heap)*,\n \t\t\t\t\t\tVEC(ipa_replace_map_p,gc)*,\n-\t\t\t\t\t\tbitmap, bitmap, basic_block,\n-\t\t\t\t\t\tconst char *);\n-void tree_function_versioning (tree, tree, VEC (ipa_replace_map_p,gc)*, bool, bitmap,\n-\t\t\t       bitmap, basic_block);\n+\t\t\t\t\t\tbitmap, bool, bitmap,\n+\t\t\t\t\t\tbasic_block, const char *);\n+void tree_function_versioning (tree, tree, VEC (ipa_replace_map_p,gc)*,\n+\t\t\t       bool, bitmap, bool, bitmap, basic_block);\n void record_references_in_initializer (tree, bool);\n bool cgraph_process_new_functions (void);\n void cgraph_process_same_body_aliases (void);"}, {"sha": "6ea40ce4e52eb773d9121734dc136a298393cf65", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=1a2c27e964bb00e2ddbe3e1a265c95adb851402c", "patch": "@@ -2333,17 +2333,21 @@ cgraph_copy_node_for_versioning (struct cgraph_node *old_version,\n     TREE_MAP is a mapping of tree nodes we want to replace with\n     new ones (according to results of prior analysis).\n     OLD_VERSION_NODE is the node that is versioned.\n-    It returns the new version's cgraph node.\n+\n     If non-NULL ARGS_TO_SKIP determine function parameters to remove\n     from new version.\n+    If SKIP_RETURN is true, the new version will return void.\n     If non-NULL BLOCK_TO_COPY determine what basic blocks to copy.\n-    If non_NULL NEW_ENTRY determine new entry BB of the clone.  */\n+    If non_NULL NEW_ENTRY determine new entry BB of the clone.\n+\n+    Return the new version's cgraph node.  */\n \n struct cgraph_node *\n cgraph_function_versioning (struct cgraph_node *old_version_node,\n \t\t\t    VEC(cgraph_edge_p,heap) *redirect_callers,\n \t\t\t    VEC (ipa_replace_map_p,gc)* tree_map,\n \t\t\t    bitmap args_to_skip,\n+\t\t\t    bool skip_return,\n \t\t\t    bitmap bbs_to_copy,\n \t\t\t    basic_block new_entry_block,\n \t\t\t    const char *clone_name)\n@@ -2357,12 +2361,12 @@ cgraph_function_versioning (struct cgraph_node *old_version_node,\n \n   gcc_assert (old_version_node->local.can_change_signature || !args_to_skip);\n \n-  /* Make a new FUNCTION_DECL tree node for the\n-     new version. */\n-  if (!args_to_skip)\n+  /* Make a new FUNCTION_DECL tree node for the new version. */\n+  if (!args_to_skip && !skip_return)\n     new_decl = copy_node (old_decl);\n   else\n-    new_decl = build_function_decl_skip_args (old_decl, args_to_skip);\n+    new_decl\n+      = build_function_decl_skip_args (old_decl, args_to_skip, skip_return);\n \n   /* Generate a new name for the new version. */\n   DECL_NAME (new_decl) = clone_function_name (old_decl, clone_name);\n@@ -2381,7 +2385,7 @@ cgraph_function_versioning (struct cgraph_node *old_version_node,\n \n   /* Copy the OLD_VERSION_NODE function tree to the new version.  */\n   tree_function_versioning (old_decl, new_decl, tree_map, false, args_to_skip,\n-\t\t\t    bbs_to_copy, new_entry_block);\n+\t\t\t    skip_return, bbs_to_copy, new_entry_block);\n \n   /* Update the new version's properties.\n      Make The new version visible only within this translation unit.  Make sure\n@@ -2412,7 +2416,8 @@ cgraph_materialize_clone (struct cgraph_node *node)\n   /* Copy the OLD_VERSION_NODE function tree to the new version.  */\n   tree_function_versioning (node->clone_of->decl, node->decl,\n   \t\t\t    node->clone.tree_map, true,\n-\t\t\t    node->clone.args_to_skip, NULL, NULL);\n+\t\t\t    node->clone.args_to_skip, false,\n+\t\t\t    NULL, NULL);\n   if (cgraph_dump_file)\n     {\n       dump_function_to_file (node->clone_of->decl, cgraph_dump_file, dump_flags);"}, {"sha": "8196a137f05316cd3957cd6a66c33120120acc8a", "filename": "gcc/ipa-inline-transform.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Fipa-inline-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Fipa-inline-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-transform.c?ref=1a2c27e964bb00e2ddbe3e1a265c95adb851402c", "patch": "@@ -324,7 +324,7 @@ save_inline_function_body (struct cgraph_node *node)\n \n   /* Copy the OLD_VERSION_NODE function tree to the new version.  */\n   tree_function_versioning (node->decl, first_clone->decl, NULL, true, NULL,\n-\t\t\t    NULL, NULL);\n+\t\t\t    false, NULL, NULL);\n \n   /* The function will be short lived and removed after we inline all the clones,\n      but make it internal so we won't confuse ourself.  */"}, {"sha": "09e04af5b886dd4121e6f2fb57a2164b1c2ace19", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=1a2c27e964bb00e2ddbe3e1a265c95adb851402c", "patch": "@@ -1191,6 +1191,7 @@ split_function (struct split_point *split_point)\n   /* Now create the actual clone.  */\n   rebuild_cgraph_edges ();\n   node = cgraph_function_versioning (cur_node, NULL, NULL, args_to_skip,\n+\t\t\t\t     !split_part_return_p,\n \t\t\t\t     split_point->split_bbs,\n \t\t\t\t     split_point->entry_bb, \"part\");\n   /* For usual cloning it is enough to clear builtin only when signature"}, {"sha": "9724f759a67585ecf55e6eebd614c95ca18b0a35", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1a2c27e964bb00e2ddbe3e1a265c95adb851402c", "patch": "@@ -1,3 +1,9 @@\n+2012-01-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/opt23.ad[sb]: New test.\n+\t* gnat.dg/opt23_pkg.ad[sb]: New helper.\n+\t* gnat.dg/opt24.ad[sb]: New test.\n+\n 2012-01-11  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR tree-optimization/49642"}, {"sha": "e658630a69204953daed80da7237c0a3158cd126", "filename": "gcc/testsuite/gnat.dg/opt23.adb", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Ftestsuite%2Fgnat.dg%2Fopt23.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Ftestsuite%2Fgnat.dg%2Fopt23.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt23.adb?ref=1a2c27e964bb00e2ddbe3e1a265c95adb851402c", "patch": "@@ -0,0 +1,16 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O2 -gnatn\" }\n+\n+package body Opt23 is\n+\n+   procedure Proc (Driver : Rec) is\n+      R : Path;\n+   begin\n+      for I in Driver.Step'Range loop\n+         R := Get (Driver, 1, Driver.Step (I));\n+         R := Get (Driver, 2, Driver.Step (I));\n+         R := Get (Driver, 3, Driver.Step (I));\n+      end loop;\n+   end;\n+\n+end Opt23;"}, {"sha": "86d1ce65acc539ae4335f4c0bf8a2af2f33214fd", "filename": "gcc/testsuite/gnat.dg/opt23.ads", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Ftestsuite%2Fgnat.dg%2Fopt23.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Ftestsuite%2Fgnat.dg%2Fopt23.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt23.ads?ref=1a2c27e964bb00e2ddbe3e1a265c95adb851402c", "patch": "@@ -0,0 +1,7 @@\n+with Opt23_Pkg; use Opt23_Pkg;\n+\n+package Opt23 is\n+\n+    procedure Proc (Driver : Rec);\n+\n+end Opt23;"}, {"sha": "8a647d507c927d3355c45b3e70d0f26637beb3ed", "filename": "gcc/testsuite/gnat.dg/opt23_pkg.adb", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Ftestsuite%2Fgnat.dg%2Fopt23_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Ftestsuite%2Fgnat.dg%2Fopt23_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt23_pkg.adb?ref=1a2c27e964bb00e2ddbe3e1a265c95adb851402c", "patch": "@@ -0,0 +1,8 @@\n+package body Opt23_Pkg is\n+\n+   function Get (R : Rec; I : Positive; M : Natural) return Path is\n+   begin\n+      return R.Val (I) (M);\n+   end;\n+\n+end Opt23_Pkg;"}, {"sha": "b4e5f0ebd6e19c15a9aec8d889bf72d7651382fd", "filename": "gcc/testsuite/gnat.dg/opt23_pkg.ads", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Ftestsuite%2Fgnat.dg%2Fopt23_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Ftestsuite%2Fgnat.dg%2Fopt23_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt23_pkg.ads?ref=1a2c27e964bb00e2ddbe3e1a265c95adb851402c", "patch": "@@ -0,0 +1,23 @@\n+package Opt23_Pkg is\n+\n+   function N return Positive;\n+   pragma Import (Ada, N);\n+\n+   type Path is array(1 .. N) of Long_Float;\n+   type Path_Vector is array (Positive range <>) of Path;\n+   type Path_Vector_P is access all Path_Vector;\n+   type Path_Vector_PV is array(Positive range <>) of Path_Vector_P;\n+   type Path_Vector_P2 is access all Path_Vector_PV;\n+\n+   type Vector is array (Positive range <>) of Natural;\n+   type Vector_Access is access Vector;\n+\n+   type Rec is record\n+      Val  : Path_Vector_P2;\n+      Step : Vector_Access;\n+   end record;\n+\n+   function Get (R : Rec; I : Positive; M : Natural) return Path;\n+   pragma Inline (Get);\n+\n+end Opt23_Pkg;"}, {"sha": "47d7343e99970c5486fa732cd4c0ae78ea83d829", "filename": "gcc/testsuite/gnat.dg/opt24.adb", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Ftestsuite%2Fgnat.dg%2Fopt24.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Ftestsuite%2Fgnat.dg%2Fopt24.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt24.adb?ref=1a2c27e964bb00e2ddbe3e1a265c95adb851402c", "patch": "@@ -0,0 +1,15 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O2 -gnatn\" }\n+\n+package body Opt24 is\n+\n+   procedure Proc (Driver : Rec) is\n+      R : Path;\n+   begin\n+      for I in Driver.Step'Range loop\n+         R := Get (Driver, 1, Driver.Step (I));\n+         R := Get (Driver, 2, Driver.Step (I));\n+      end loop;\n+   end;\n+\n+end Opt24;"}, {"sha": "093d2d7ed1a3f181d9014d8d0e55089643de575e", "filename": "gcc/testsuite/gnat.dg/opt24.ads", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Ftestsuite%2Fgnat.dg%2Fopt24.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Ftestsuite%2Fgnat.dg%2Fopt24.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt24.ads?ref=1a2c27e964bb00e2ddbe3e1a265c95adb851402c", "patch": "@@ -0,0 +1,7 @@\n+with Opt23_Pkg; use Opt23_Pkg;\n+\n+package Opt24 is\n+\n+    procedure Proc (Driver : Rec);\n+\n+end Opt24;"}, {"sha": "db1c2ec36bc4f68b0a3a3e1d713bfb64fbb18530", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=1a2c27e964bb00e2ddbe3e1a265c95adb851402c", "patch": "@@ -4311,7 +4311,7 @@ ipa_tm_create_version (struct cgraph_node *old_node)\n \t  DECL_WEAK (new_decl) = 0;\n \t}\n \n-      tree_function_versioning (old_decl, new_decl, NULL, false, NULL,\n+      tree_function_versioning (old_decl, new_decl, NULL, false, NULL, false,\n \t\t\t\tNULL, NULL);\n     }\n "}, {"sha": "a0398903834c91738363a1e84f33216f8e01bcc6", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=1a2c27e964bb00e2ddbe3e1a265c95adb851402c", "patch": "@@ -2809,9 +2809,8 @@ declare_return_variable (copy_body_data *id, tree return_slot, tree modify_dest,\n   else\n     caller_type = TREE_TYPE (TREE_TYPE (callee));\n \n-  /* We don't need to do anything for functions that don't return\n-     anything.  */\n-  if (!result || VOID_TYPE_P (callee_type))\n+  /* We don't need to do anything for functions that don't return anything.  */\n+  if (VOID_TYPE_P (callee_type))\n     return NULL_TREE;\n \n   /* If there was a return slot, then the return value is the\n@@ -5040,14 +5039,16 @@ update_clone_info (copy_body_data * id)\n \n    If non-NULL ARGS_TO_SKIP determine function parameters to remove\n    from new version.\n+   If SKIP_RETURN is true, the new version will return void.\n    If non-NULL BLOCK_TO_COPY determine what basic blocks to copy.\n    If non_NULL NEW_ENTRY determine new entry BB of the clone.\n */\n void\n tree_function_versioning (tree old_decl, tree new_decl,\n \t\t\t  VEC(ipa_replace_map_p,gc)* tree_map,\n \t\t\t  bool update_clones, bitmap args_to_skip,\n-\t\t\t  bitmap blocks_to_copy, basic_block new_entry)\n+\t\t\t  bool skip_return, bitmap blocks_to_copy,\n+\t\t\t  basic_block new_entry)\n {\n   struct cgraph_node *old_version_node;\n   struct cgraph_node *new_version_node;\n@@ -5200,7 +5201,18 @@ tree_function_versioning (tree old_decl, tree new_decl,\n     /* Add local vars.  */\n     add_local_variables (DECL_STRUCT_FUNCTION (old_decl), cfun, &id, false);\n \n-  if (DECL_RESULT (old_decl) != NULL_TREE)\n+  if (VOID_TYPE_P (TREE_TYPE (DECL_RESULT (old_decl))))\n+    ;\n+  else if (skip_return)\n+    {\n+      DECL_RESULT (new_decl)\n+\t= build_decl (DECL_SOURCE_LOCATION (DECL_RESULT (old_decl)),\n+\t\t      RESULT_DECL, NULL_TREE, void_type_node);\n+      DECL_CONTEXT (DECL_RESULT (new_decl)) = new_decl;\n+      cfun->returns_struct = 0;\n+      cfun->returns_pcc_struct = 0;\n+    }\n+  else\n     {\n       tree old_name;\n       DECL_RESULT (new_decl) = remap_decl (DECL_RESULT (old_decl), &id);"}, {"sha": "9c2d13875d9666e8331c673d76217cf1dbd159e1", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=1a2c27e964bb00e2ddbe3e1a265c95adb851402c", "patch": "@@ -4700,7 +4700,7 @@ modify_function (struct cgraph_node *node, ipa_parm_adjustment_vec adjustments)\n   current_function_decl = NULL_TREE;\n \n   new_node = cgraph_function_versioning (node, redirect_callers, NULL, NULL,\n-\t\t\t\t\t NULL, NULL, \"isra\");\n+\t\t\t\t\t false, NULL, NULL, \"isra\");\n   current_function_decl = new_node->decl;\n   push_cfun (DECL_STRUCT_FUNCTION (new_node->decl));\n "}, {"sha": "ec78616bd63b63b002eb2aa2300aeaaeae9db13a", "filename": "gcc/tree.c", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=1a2c27e964bb00e2ddbe3e1a265c95adb851402c", "patch": "@@ -7567,10 +7567,12 @@ build_function_type (tree value_type, tree arg_types)\n   return t;\n }\n \n-/* Build variant of function type ORIG_TYPE skipping ARGS_TO_SKIP.  */\n+/* Build variant of function type ORIG_TYPE skipping ARGS_TO_SKIP and the\n+   return value if SKIP_RETURN is true.  */\n \n-tree\n-build_function_type_skip_args (tree orig_type, bitmap args_to_skip)\n+static tree\n+build_function_type_skip_args (tree orig_type, bitmap args_to_skip,\n+\t\t\t       bool skip_return)\n {\n   tree new_type = NULL;\n   tree args, new_args = NULL, t;\n@@ -7579,7 +7581,7 @@ build_function_type_skip_args (tree orig_type, bitmap args_to_skip)\n \n   for (args = TYPE_ARG_TYPES (orig_type); args && args != void_list_node;\n        args = TREE_CHAIN (args), i++)\n-    if (!bitmap_bit_p (args_to_skip, i))\n+    if (!args_to_skip || !bitmap_bit_p (args_to_skip, i))\n       new_args = tree_cons (NULL_TREE, TREE_VALUE (args), new_args);\n \n   new_reversed = nreverse (new_args);\n@@ -7597,6 +7599,7 @@ build_function_type_skip_args (tree orig_type, bitmap args_to_skip)\n      When we are asked to remove it, we need to build new FUNCTION_TYPE\n      instead.  */\n   if (TREE_CODE (orig_type) != METHOD_TYPE\n+      || !args_to_skip\n       || !bitmap_bit_p (args_to_skip, 0))\n     {\n       new_type = build_distinct_type_copy (orig_type);\n@@ -7610,11 +7613,15 @@ build_function_type_skip_args (tree orig_type, bitmap args_to_skip)\n       TYPE_CONTEXT (new_type) = TYPE_CONTEXT (orig_type);\n     }\n \n+  if (skip_return)\n+    TREE_TYPE (new_type) = void_type_node;\n+\n   /* This is a new type, not a copy of an old type.  Need to reassociate\n      variants.  We can handle everything except the main variant lazily.  */\n   t = TYPE_MAIN_VARIANT (orig_type);\n-  if (orig_type != t)\n+  if (t != orig_type)\n     {\n+      t = build_function_type_skip_args (t, args_to_skip, skip_return);\n       TYPE_MAIN_VARIANT (new_type) = t;\n       TYPE_NEXT_VARIANT (new_type) = TYPE_NEXT_VARIANT (t);\n       TYPE_NEXT_VARIANT (t) = new_type;\n@@ -7624,33 +7631,40 @@ build_function_type_skip_args (tree orig_type, bitmap args_to_skip)\n       TYPE_MAIN_VARIANT (new_type) = new_type;\n       TYPE_NEXT_VARIANT (new_type) = NULL;\n     }\n+\n   return new_type;\n }\n \n-/* Build variant of function type ORIG_TYPE skipping ARGS_TO_SKIP.\n+/* Build variant of function decl ORIG_DECL skipping ARGS_TO_SKIP and the\n+   return value if SKIP_RETURN is true.\n \n    Arguments from DECL_ARGUMENTS list can't be removed now, since they are\n    linked by TREE_CHAIN directly.  The caller is responsible for eliminating\n    them when they are being duplicated (i.e. copy_arguments_for_versioning).  */\n \n tree\n-build_function_decl_skip_args (tree orig_decl, bitmap args_to_skip)\n+build_function_decl_skip_args (tree orig_decl, bitmap args_to_skip,\n+\t\t\t       bool skip_return)\n {\n   tree new_decl = copy_node (orig_decl);\n   tree new_type;\n \n   new_type = TREE_TYPE (orig_decl);\n-  if (prototype_p (new_type))\n-    new_type = build_function_type_skip_args (new_type, args_to_skip);\n+  if (prototype_p (new_type)\n+      || (skip_return && !VOID_TYPE_P (TREE_TYPE (new_type))))\n+    new_type\n+      = build_function_type_skip_args (new_type, args_to_skip, skip_return);\n   TREE_TYPE (new_decl) = new_type;\n \n   /* For declarations setting DECL_VINDEX (i.e. methods)\n      we expect first argument to be THIS pointer.   */\n-  if (bitmap_bit_p (args_to_skip, 0))\n+  if (args_to_skip && bitmap_bit_p (args_to_skip, 0))\n     DECL_VINDEX (new_decl) = NULL_TREE;\n \n   /* When signature changes, we need to clear builtin info.  */\n-  if (DECL_BUILT_IN (new_decl) && !bitmap_empty_p (args_to_skip))\n+  if (DECL_BUILT_IN (new_decl)\n+      && args_to_skip\n+      && !bitmap_empty_p (args_to_skip))\n     {\n       DECL_BUILT_IN_CLASS (new_decl) = NOT_BUILT_IN;\n       DECL_FUNCTION_CODE (new_decl) = (enum built_in_function) 0;"}, {"sha": "3f9fdbceb3fa910ae667cd04174a8830a18819db", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2c27e964bb00e2ddbe3e1a265c95adb851402c/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=1a2c27e964bb00e2ddbe3e1a265c95adb851402c", "patch": "@@ -4386,8 +4386,7 @@ extern tree build_nonshared_array_type (tree, tree);\n extern tree build_array_type_nelts (tree, unsigned HOST_WIDE_INT);\n extern tree build_function_type (tree, tree);\n extern tree build_function_type_list (tree, ...);\n-extern tree build_function_type_skip_args (tree, bitmap);\n-extern tree build_function_decl_skip_args (tree, bitmap);\n+extern tree build_function_decl_skip_args (tree, bitmap, bool);\n extern tree build_varargs_function_type_list (tree, ...);\n extern tree build_function_type_array (tree, int, tree *);\n extern tree build_varargs_function_type_array (tree, int, tree *);"}]}