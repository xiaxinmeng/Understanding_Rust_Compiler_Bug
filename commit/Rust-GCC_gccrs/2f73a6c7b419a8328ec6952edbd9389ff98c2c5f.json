{"sha": "2f73a6c7b419a8328ec6952edbd9389ff98c2c5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY3M2E2YzdiNDE5YTgzMjhlYzY5NTJlZGJkOTM4OWZmOThjMmM1Zg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2014-11-03T13:40:50Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2014-11-03T13:40:50Z"}, "message": "Implement TARGET_ATOMIC_ASSIGN_EXPAND_FENV for powerpc*-*-linux* soft-float and e500.\n\nThis patch implements support for TARGET_ATOMIC_ASSIGN_EXPAND_FENV for\npowerpc*-*-linux* soft-float and e500, provided GCC is configured for\nglibc 2.19 or later on the target.\n\nNew functions __atomic_feholdexcept, __atomic_feclearexcept and\n__atomic_feupdateenv were added (to libc) in that glibc version (for\npowerpc soft-float / e500 only) in order to support this part of C11.\nFor soft-float, libc functions are needed because the floating-point\nexception state is in TLS variables in libc that aren't directly\naccessible outside of glibc.  For e500, they are also needed because\nof the prctl syscalls involved in controlling trapping for exceptions\nand informing the kernel when certain exception flags have been\ncleared.  The actual implementation in GCC is a straightforward matter\nof calling those functions.\n\nTested with no regressions for cross to powerpc-linux-gnu\n(soft-float); the c11-atomic-exec-5.c results go from FAIL to PASS.\n\n\t* configure.ac (TARGET_GLIBC_MAJOR, TARGET_GLIBC_MINOR): Define\n\tmacros.\n\t* configure, config.h.in: Regenerate.\n\t* config/rs6000/linux.h [TARGET_GLIBC_MAJOR > 2 ||\n\t(TARGET_GLIBC_MAJOR == 2 && TARGET_GLIBC_MINOR >= 19)]\n\t(RS6000_GLIBC_ATOMIC_FENV): New macro.\n\t* config/rs6000/linux64.h [TARGET_GLIBC_MAJOR > 2 ||\n\t(TARGET_GLIBC_MAJOR == 2 && TARGET_GLIBC_MINOR >= 19)]\n\t(RS6000_GLIBC_ATOMIC_FENV): New macro.\n\t* config/rs6000/rs6000.c (atomic_hold_decl, atomic_clear_decl)\n\t(atomic_update_decl): New static variables.\n\t(rs6000_atomic_assign_expand_fenv) [RS6000_GLIBC_ATOMIC_FENV]:\n\tGenerate calls to __atomic_feholdexcept, __atomic_feclearexcept\n\tand __atomic_feupdateenv for soft-float and no-FPRs.\n\nFrom-SVN: r217040", "tree": {"sha": "2289bcbdf0aad0c814107fac1ac50541cfa47070", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2289bcbdf0aad0c814107fac1ac50541cfa47070"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f73a6c7b419a8328ec6952edbd9389ff98c2c5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f73a6c7b419a8328ec6952edbd9389ff98c2c5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f73a6c7b419a8328ec6952edbd9389ff98c2c5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f73a6c7b419a8328ec6952edbd9389ff98c2c5f/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3582e541c61d1ae2f859d1c83ba6559fd5eccfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3582e541c61d1ae2f859d1c83ba6559fd5eccfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3582e541c61d1ae2f859d1c83ba6559fd5eccfb"}], "stats": {"total": 123, "additions": 118, "deletions": 5}, "files": [{"sha": "e709e113c1cb83f4a5308690274059ed37ebadef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f73a6c7b419a8328ec6952edbd9389ff98c2c5f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f73a6c7b419a8328ec6952edbd9389ff98c2c5f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f73a6c7b419a8328ec6952edbd9389ff98c2c5f", "patch": "@@ -1,3 +1,20 @@\n+2014-11-03  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* configure.ac (TARGET_GLIBC_MAJOR, TARGET_GLIBC_MINOR): Define\n+\tmacros.\n+\t* configure, config.h.in: Regenerate.\n+\t* config/rs6000/linux.h [TARGET_GLIBC_MAJOR > 2 ||\n+\t(TARGET_GLIBC_MAJOR == 2 && TARGET_GLIBC_MINOR >= 19)]\n+\t(RS6000_GLIBC_ATOMIC_FENV): New macro.\n+\t* config/rs6000/linux64.h [TARGET_GLIBC_MAJOR > 2 ||\n+\t(TARGET_GLIBC_MAJOR == 2 && TARGET_GLIBC_MINOR >= 19)]\n+\t(RS6000_GLIBC_ATOMIC_FENV): New macro.\n+\t* config/rs6000/rs6000.c (atomic_hold_decl, atomic_clear_decl)\n+\t(atomic_update_decl): New static variables.\n+\t(rs6000_atomic_assign_expand_fenv) [RS6000_GLIBC_ATOMIC_FENV]:\n+\tGenerate calls to __atomic_feholdexcept, __atomic_feclearexcept\n+\tand __atomic_feupdateenv for soft-float and no-FPRs.\n+\n 2014-11-03  Richard Biener  <rguenther@suse.de>\n \n \t* match.pd: Add two abs patterns.  Announce tree_expr_nonnegative_p."}, {"sha": "c4f9164ef7fae1815449c8d8425efba0356b4677", "filename": "gcc/config.in", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f73a6c7b419a8328ec6952edbd9389ff98c2c5f/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f73a6c7b419a8328ec6952edbd9389ff98c2c5f/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=2f73a6c7b419a8328ec6952edbd9389ff98c2c5f", "patch": "@@ -1699,16 +1699,19 @@\n #undef HAVE_WORKING_VFORK\n #endif\n \n-/* Define if isl is in use. */\n-#ifndef USED_FOR_TARGET\n-#undef HAVE_isl\n-#endif\n \n /* Define if cloog is in use. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_cloog\n #endif\n \n+\n+/* Define if isl is in use. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_isl\n+#endif\n+\n+\n /* Define if F_SETLKW supported by fcntl. */\n #ifndef USED_FOR_TARGET\n #undef HOST_HAS_F_SETLKW\n@@ -1882,6 +1885,18 @@\n /* Define if your target C library provides the `dl_iterate_phdr' function. */\n #undef TARGET_DL_ITERATE_PHDR\n \n+/* GNU C Library major version number used on the target, or 0. */\n+#ifndef USED_FOR_TARGET\n+#undef TARGET_GLIBC_MAJOR\n+#endif\n+\n+\n+/* GNU C Library minor version number used on the target, or 0. */\n+#ifndef USED_FOR_TARGET\n+#undef TARGET_GLIBC_MINOR\n+#endif\n+\n+\n /* Define if your target C library provides stack protector support */\n #ifndef USED_FOR_TARGET\n #undef TARGET_LIBC_PROVIDES_SSP"}, {"sha": "5067df6659d7981647501f513ae084336bfb5ae8", "filename": "gcc/config/rs6000/linux.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f73a6c7b419a8328ec6952edbd9389ff98c2c5f/gcc%2Fconfig%2Frs6000%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f73a6c7b419a8328ec6952edbd9389ff98c2c5f/gcc%2Fconfig%2Frs6000%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux.h?ref=2f73a6c7b419a8328ec6952edbd9389ff98c2c5f", "patch": "@@ -127,3 +127,10 @@\n #undef TARGET_FLOAT_EXCEPTIONS_ROUNDING_SUPPORTED_P\n #define TARGET_FLOAT_EXCEPTIONS_ROUNDING_SUPPORTED_P \\\n   rs6000_linux_float_exceptions_rounding_supported_p\n+\n+/* Support for TARGET_ATOMIC_ASSIGN_EXPAND_FENV without FPRs depends\n+   on glibc 2.19 or greater.  */\n+#if TARGET_GLIBC_MAJOR > 2 \\\n+  || (TARGET_GLIBC_MAJOR == 2 && TARGET_GLIBC_MINOR >= 19)\n+#define RS6000_GLIBC_ATOMIC_FENV 1\n+#endif"}, {"sha": "5f74ed3429a19dd60eb60423b8e9f0be73c3de40", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f73a6c7b419a8328ec6952edbd9389ff98c2c5f/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f73a6c7b419a8328ec6952edbd9389ff98c2c5f/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=2f73a6c7b419a8328ec6952edbd9389ff98c2c5f", "patch": "@@ -557,3 +557,10 @@ extern int dot_symbols;\n #undef TARGET_FLOAT_EXCEPTIONS_ROUNDING_SUPPORTED_P\n #define TARGET_FLOAT_EXCEPTIONS_ROUNDING_SUPPORTED_P \\\n   rs6000_linux_float_exceptions_rounding_supported_p\n+\n+/* Support for TARGET_ATOMIC_ASSIGN_EXPAND_FENV without FPRs depends\n+   on glibc 2.19 or greater.  */\n+#if TARGET_GLIBC_MAJOR > 2 \\\n+  || (TARGET_GLIBC_MAJOR == 2 && TARGET_GLIBC_MINOR >= 19)\n+#define RS6000_GLIBC_ATOMIC_FENV 1\n+#endif"}, {"sha": "719878c1f84e00bacb28ce45ff27e9604fa5bf2e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f73a6c7b419a8328ec6952edbd9389ff98c2c5f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f73a6c7b419a8328ec6952edbd9389ff98c2c5f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=2f73a6c7b419a8328ec6952edbd9389ff98c2c5f", "patch": "@@ -34590,13 +34590,66 @@ make_pass_analyze_swaps (gcc::context *ctxt)\n   return new pass_analyze_swaps (ctxt);\n }\n \n+/* Function declarations for rs6000_atomic_assign_expand_fenv.  */\n+static tree atomic_hold_decl, atomic_clear_decl, atomic_update_decl;\n+\n /* Implement TARGET_ATOMIC_ASSIGN_EXPAND_FENV hook.  */\n \n static void\n rs6000_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n {\n   if (!TARGET_HARD_FLOAT || !TARGET_FPRS)\n-    return;\n+    {\n+#ifdef RS6000_GLIBC_ATOMIC_FENV\n+      if (atomic_hold_decl == NULL_TREE)\n+\t{\n+\t  atomic_hold_decl\n+\t    = build_decl (BUILTINS_LOCATION, FUNCTION_DECL,\n+\t\t\t  get_identifier (\"__atomic_feholdexcept\"),\n+\t\t\t  build_function_type_list (void_type_node,\n+\t\t\t\t\t\t    double_ptr_type_node,\n+\t\t\t\t\t\t    NULL_TREE));\n+\t  TREE_PUBLIC (atomic_hold_decl) = 1;\n+\t  DECL_EXTERNAL (atomic_hold_decl) = 1;\n+\t}\n+\n+      if (atomic_clear_decl == NULL_TREE)\n+\t{\n+\t  atomic_clear_decl\n+\t    = build_decl (BUILTINS_LOCATION, FUNCTION_DECL,\n+\t\t\t  get_identifier (\"__atomic_feclearexcept\"),\n+\t\t\t  build_function_type_list (void_type_node,\n+\t\t\t\t\t\t    NULL_TREE));\n+\t  TREE_PUBLIC (atomic_clear_decl) = 1;\n+\t  DECL_EXTERNAL (atomic_clear_decl) = 1;\n+\t}\n+\n+      tree const_double = build_qualified_type (double_type_node,\n+\t\t\t\t\t\tTYPE_QUAL_CONST);\n+      tree const_double_ptr = build_pointer_type (const_double);\n+      if (atomic_update_decl == NULL_TREE)\n+\t{\n+\t  atomic_update_decl\n+\t    = build_decl (BUILTINS_LOCATION, FUNCTION_DECL,\n+\t\t\t  get_identifier (\"__atomic_feupdateenv\"),\n+\t\t\t  build_function_type_list (void_type_node,\n+\t\t\t\t\t\t    const_double_ptr,\n+\t\t\t\t\t\t    NULL_TREE));\n+\t  TREE_PUBLIC (atomic_update_decl) = 1;\n+\t  DECL_EXTERNAL (atomic_update_decl) = 1;\n+\t}\n+\n+      tree fenv_var = create_tmp_var (double_type_node, NULL);\n+      mark_addressable (fenv_var);\n+      tree fenv_addr = build1 (ADDR_EXPR, double_ptr_type_node, fenv_var);\n+\n+      *hold = build_call_expr (atomic_hold_decl, 1, fenv_addr);\n+      *clear = build_call_expr (atomic_clear_decl, 0);\n+      *update = build_call_expr (atomic_update_decl, 1,\n+\t\t\t\t fold_convert (const_double_ptr, fenv_addr));\n+#endif\n+      return;\n+    }\n \n   tree mffs = rs6000_builtin_decls[RS6000_BUILTIN_MFFS];\n   tree mtfsf = rs6000_builtin_decls[RS6000_BUILTIN_MTFSF];"}, {"sha": "40b2a87082b47f74bb855a4d9a0b74d5f6a00fd2", "filename": "gcc/configure", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f73a6c7b419a8328ec6952edbd9389ff98c2c5f/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f73a6c7b419a8328ec6952edbd9389ff98c2c5f/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=2f73a6c7b419a8328ec6952edbd9389ff98c2c5f", "patch": "@@ -26700,6 +26700,16 @@ fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibc_version_major.$glibc_version_minor\" >&5\n $as_echo \"$glibc_version_major.$glibc_version_minor\" >&6; }\n \n+cat >>confdefs.h <<_ACEOF\n+#define TARGET_GLIBC_MAJOR $glibc_version_major\n+_ACEOF\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define TARGET_GLIBC_MINOR $glibc_version_minor\n+_ACEOF\n+\n+\n # Check whether --enable-gnu-unique-object was given.\n if test \"${enable_gnu_unique_object+set}\" = set; then :\n   enableval=$enable_gnu_unique_object; case $enable_gnu_unique_object in"}, {"sha": "dc14b457a5b169f1d853c1828d87643ae9d80f38", "filename": "gcc/configure.ac", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f73a6c7b419a8328ec6952edbd9389ff98c2c5f/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f73a6c7b419a8328ec6952edbd9389ff98c2c5f/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=2f73a6c7b419a8328ec6952edbd9389ff98c2c5f", "patch": "@@ -4503,6 +4503,10 @@ glibc_version_minor=0\n   glibc_version_minor=`echo \"$glibc_version_minor_define\" | sed -e 's/.*__GLIBC_MINOR__[ \t]*//'`\n fi]])\n AC_MSG_RESULT([$glibc_version_major.$glibc_version_minor])\n+AC_DEFINE_UNQUOTED([TARGET_GLIBC_MAJOR], [$glibc_version_major],\n+[GNU C Library major version number used on the target, or 0.])\n+AC_DEFINE_UNQUOTED([TARGET_GLIBC_MINOR], [$glibc_version_minor],\n+[GNU C Library minor version number used on the target, or 0.])\n \n AC_ARG_ENABLE(gnu-unique-object,\n  [AS_HELP_STRING([--enable-gnu-unique-object],"}]}