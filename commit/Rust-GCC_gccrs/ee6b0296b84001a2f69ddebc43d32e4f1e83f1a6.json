{"sha": "ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU2YjAyOTZiODQwMDFhMmY2OWRkZWJjNDNkMzJlNGYxZTgzZjFhNg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-06-14T17:33:32Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-06-14T17:33:32Z"}, "message": "tree.h (init_function_start): Remove filename and line paramters.\n\n\t* tree.h (init_function_start): Remove filename and line paramters.\n\t* function.c (init_function_start): Remove filename and line\n\tparameters. Use DECL_SOURCE_LOCATION.\n\t* c-decl.c (store_parm_decls): Adjust init_function_start call.\n\t(c_expand_body_1): Likewise.\n\t* coverage.c (create_coverage): Likewise.\n\n\t* ada/utils.c (begin_subprog_body): Adjust init_function_start\n\tcall.\n\n\t* cp/decl.c (start_function): Adjust init_function_start call.\n\t* cp/method.c (use_thunk): Likewise.\n\t* cp/semantics.c (genrtl_start_function): Likewise.\n\n\t* f/com.c (stor_parm_decls): Adjust init_function_start call.\n\n\t* java/class.c (emit_register_classes): Adjust init_function_start\n\tcall.\n\t* java/decl.c (complete_start_java_method): Likewise.\n\t* java/resource.c (write_resource_constructor): Likewise.\n\n\t* objc/objc-act.c (build_tmp_function_decl): Set line number to\n\tzero.\n\t(hack_method_prototype): Adjust init_function_start call.\n\n\t* treelang/treetree.c (tree_code_create_function_initial): Adjust\n\tinit_function_start call.\n\nFrom-SVN: r67953", "tree": {"sha": "3a642a41fe4a4649fb76618134dd1dd6cab8d451", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a642a41fe4a4649fb76618134dd1dd6cab8d451"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/comments", "author": null, "committer": null, "parents": [{"sha": "2fbe6bc2ba00c56ea66269ba842278764bd89c8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fbe6bc2ba00c56ea66269ba842278764bd89c8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fbe6bc2ba00c56ea66269ba842278764bd89c8e"}], "stats": {"total": 94, "additions": 67, "deletions": 27}, "files": [{"sha": "dc46038be07d9ee6b0a050ea9e98a2a5878c4440", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6", "patch": "@@ -1,3 +1,15 @@\n+2003-06-14  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* tree.h (init_function_start): Remove filename and line paramters.\n+\t* function.c (init_function_start): Remove filename and line\n+\tparameters. Use DECL_SOURCE_LOCATION.\n+\t* c-decl.c (store_parm_decls): Adjust init_function_start call.\n+\t(c_expand_body_1): Likewise.\n+\t* coverage.c (create_coverage): Likewise.\n+\t* objc/objc-act.c (build_tmp_function_decl): Set line number to\n+\tzero.\n+\t(hack_method_prototype): Adjust init_function_start call.\n+\n 2003-06-14  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/3724"}, {"sha": "740f535e0c7d5539481fe90af98185cc1568f7ec", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6", "patch": "@@ -1,3 +1,7 @@\n+2003-06-14  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* utils.c (begin_subprog_body): Adjust init_function_start call.\n+\n 2003-06-14  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* Make-lang.in: Update to use options.c and options.h."}, {"sha": "5eeca2b68285081c240be8c262c98fb62fa34203", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6", "patch": "@@ -1774,7 +1774,7 @@ begin_subprog_body (subprog_decl)\n   /* Store back the PARM_DECL nodes. They appear in the right order. */\n   DECL_ARGUMENTS (subprog_decl) = getdecls ();\n \n-  init_function_start (subprog_decl, input_filename, input_line);\n+  init_function_start (subprog_decl);\n   expand_function_start (subprog_decl, 0);\n \n   /* If this function is `main', emit a call to `__main'"}, {"sha": "cc818d861d0aab0754ca28668cf45638869c25db", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6", "patch": "@@ -6163,7 +6163,7 @@ store_parm_decls ()\n   gen_aux_info_record (fndecl, 1, 0, prototype);\n \n   /* Initialize the RTL code for the function.  */\n-  init_function_start (fndecl, input_filename, input_line);\n+  init_function_start (fndecl);\n \n   /* Begin the statement tree for this function.  */\n   begin_stmt_tree (&DECL_SAVED_TREE (current_function_decl));\n@@ -6422,7 +6422,7 @@ c_expand_body_1 (fndecl, nested_p)\n   /* Initialize the RTL code for the function.  */\n   current_function_decl = fndecl;\n   input_location = DECL_SOURCE_LOCATION (fndecl);\n-  init_function_start (fndecl, input_filename, DECL_SOURCE_LINE (fndecl));\n+  init_function_start (fndecl);\n \n   /* This function is being processed in whole-function mode.  */\n   cfun->x_whole_function_mode_p = 1;"}, {"sha": "49cf14a26893aea8295298c2705bc8141cb54944", "filename": "gcc/coverage.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6", "patch": "@@ -857,7 +857,7 @@ create_coverage ()\n   current_function_decl = ctor;\n   DECL_INITIAL (ctor) = error_mark_node;\n   make_decl_rtl (ctor, NULL);\n-  init_function_start (ctor, input_filename, input_line);\n+  init_function_start (ctor);\n   (*lang_hooks.decls.pushlevel) (0);\n   expand_function_start (ctor, 0);\n "}, {"sha": "11c73b9b786a7cd9c2ee83abdb376b60c6c1b822", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6", "patch": "@@ -1,3 +1,9 @@\n+2003-06-14  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* decl.c (start_function): Adjust init_function_start call.\n+\t* method.c (use_thunk): Likewise.\n+\t* semantics.c (genrtl_start_function): Likewise.\n+\n 2003-06-14  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* Make-lang.in: Remove c-options.o."}, {"sha": "454e1ef901e7fa4d57d8d94bd3116b64b77c93ca", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6", "patch": "@@ -13471,7 +13471,7 @@ start_function (tree declspecs, tree declarator, tree attrs, int flags)\n      CFUN set up, and our per-function variables initialized.\n      FIXME factor out the non-RTL stuff.  */\n   bl = current_binding_level;\n-  init_function_start (decl1, input_filename, input_line);\n+  init_function_start (decl1);\n   current_binding_level = bl;\n \n   /* Even though we're inside a function body, we still don't want to"}, {"sha": "ef801aceb19fd3d5332afaa67a10bee7b16d8c3b", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6", "patch": "@@ -429,7 +429,7 @@ use_thunk (tree thunk_fndecl, bool emit_p)\n       DECL_RESULT (thunk_fndecl)\n \t= build_decl (RESULT_DECL, 0, integer_type_node);\n       fnname = XSTR (XEXP (DECL_RTL (thunk_fndecl), 0), 0);\n-      init_function_start (thunk_fndecl, input_filename, input_line);\n+      init_function_start (thunk_fndecl);\n       current_function_is_thunk = 1;\n       assemble_start_function (thunk_fndecl, fnname);\n "}, {"sha": "31f942424378b1167edeea0e27f73e73019e66b1", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6", "patch": "@@ -2539,7 +2539,7 @@ genrtl_start_function (fn)\n   /* Tell everybody what function we're processing.  */\n   current_function_decl = fn;\n   /* Get the RTL machinery going for this function.  */\n-  init_function_start (fn, DECL_SOURCE_FILE (fn), DECL_SOURCE_LINE (fn));\n+  init_function_start (fn);\n   /* Let everybody know that we're expanding this function, not doing\n      semantic analysis.  */\n   expanding_p = 1;"}, {"sha": "ab62160ad137a6c664f9c1360302880ab74fd292", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6", "patch": "@@ -1,3 +1,7 @@\n+Sat Jun 14 18:13:00 2003  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* com.c (stor_parm_decls): Adjust init_function_start call.\n+\n Sat Jun 14 13:25:00 2003  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* Make-lang.in: Update to use options.c and options.h."}, {"sha": "aec7ce33722dcda0ec22f0fa5f2fad6705fd30dd", "filename": "gcc/f/com.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6", "patch": "@@ -13884,11 +13884,9 @@ store_parm_decls (int is_main_program UNUSED)\n   DECL_ARGUMENTS (fndecl) = storedecls (nreverse (getdecls ()));\n \n   /* Initialize the RTL code for the function.  */\n-\n-  init_function_start (fndecl, input_filename, input_line);\n+  init_function_start (fndecl);\n \n   /* Set up parameters and prepare for return, for the function.  */\n-\n   expand_function_start (fndecl, 0);\n }\n "}, {"sha": "84cfd6ede27d19cb81e07e0ebc38e40cfd443c47", "filename": "gcc/function.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6", "patch": "@@ -6522,10 +6522,8 @@ init_dummy_function_start ()\n    of the function.  */\n \n void\n-init_function_start (subr, filename, line)\n+init_function_start (subr)\n      tree subr;\n-     const char *filename;\n-     int line;\n {\n   prepare_function_start ();\n \n@@ -6541,11 +6539,12 @@ init_function_start (subr, filename, line)\n   /* Within function body, compute a type's size as soon it is laid out.  */\n   immediate_size_expand++;\n \n-  /* Prevent ever trying to delete the first instruction of a function.\n-     Also tell final how to output a linenum before the function prologue.\n-     Note linenums could be missing, e.g. when compiling a Java .class file.  */\n-  if (line > 0)\n-    emit_line_note (filename, line);\n+  /* Prevent ever trying to delete the first instruction of a\n+     function.  Also tell final how to output a linenum before the\n+     function prologue.  Note linenums could be missing, e.g. when\n+     compiling a Java .class file.  */\n+  if (DECL_SOURCE_LINE (subr))\n+    emit_line_note (DECL_SOURCE_FILE (subr), DECL_SOURCE_LINE (subr));\n \n   /* Make sure first insn is a note even if we don't want linenums.\n      This makes sure the first insn will never be deleted."}, {"sha": "0fdaa9dd890d9e80e032a7d541b0aa42e00d2e74", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6", "patch": "@@ -1,3 +1,10 @@\n+2003-06-14  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* class.c (emit_register_classes): Adjust init_function_start\n+\tcall.\n+\t* decl.c (complete_start_java_method): Likewise.\n+\t* resource.c (write_resource_constructor): Likewise.\n+\n 2003-06-14  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* Make-lang.in: Update to use options.c and options.h."}, {"sha": "fe00f78f9a36bda76f24af81d52b6dcdf8157e10", "filename": "gcc/java/class.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6", "patch": "@@ -2003,6 +2003,7 @@ emit_register_classes (void)\n       \n       init_decl = build_decl (FUNCTION_DECL, init_name, init_type);\n       SET_DECL_ASSEMBLER_NAME (init_decl, init_name);\n+      DECL_SOURCE_LINE (init_decl) = 0;\n       TREE_STATIC (init_decl) = 1;\n       current_function_decl = init_decl;\n       DECL_RESULT (init_decl) = build_decl (RESULT_DECL, NULL_TREE,\n@@ -2017,7 +2018,7 @@ emit_register_classes (void)\n \n       pushlevel (0);\n       make_decl_rtl (init_decl, NULL);\n-      init_function_start (init_decl, input_filename, 0);\n+      init_function_start (init_decl);\n       expand_function_start (init_decl, 0);\n \n       /* Do not allow the function to be deferred.  */"}, {"sha": "7d5507cd8ed71117caea99492d63e44b52250f69", "filename": "gcc/java/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6", "patch": "@@ -1670,7 +1670,7 @@ complete_start_java_method (tree fndecl)\n   if (! flag_emit_class_files)\n     {\n       /* Initialize the RTL code for the function.  */\n-      init_function_start (fndecl, input_filename, input_line);\n+      init_function_start (fndecl);\n \n       /* Set up parameters and prepare for return, for the function.  */\n       expand_function_start (fndecl, 0);"}, {"sha": "a1de225c6080aaf6560b78ee14e44e82e60e2918", "filename": "gcc/java/resource.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Fjava%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Fjava%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fresource.c?ref=ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6", "patch": "@@ -113,6 +113,7 @@ write_resource_constructor (void)\n   init_type = build_function_type (void_type_node, end_params_node);\n \n   init_decl = build_decl (FUNCTION_DECL, init_name, init_type);\n+  DECL_SOURCE_LINE (init_decl) = 0;\n   SET_DECL_ASSEMBLER_NAME (init_decl, init_name);\n   TREE_STATIC (init_decl) = 1;\n   current_function_decl = init_decl;\n@@ -125,7 +126,7 @@ write_resource_constructor (void)\n \n   pushlevel (0);\n   make_decl_rtl (init_decl, NULL);\n-  init_function_start (init_decl, input_filename, 0);\n+  init_function_start (init_decl);\n   expand_function_start (init_decl, 0);\n \n   /* Write out entries in the same order in which they were defined.  */"}, {"sha": "3a654e6ed13ef85c036a21bcf028bd2aa8df381d", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6", "patch": "@@ -2932,7 +2932,8 @@ build_tmp_function_decl ()\n {\n   tree decl_specs, expr_decl, parms;\n   char buffer[80];\n-\n+  tree tmp_decl;\n+  \n   /* struct objc_object *objc_xxx (id, SEL, ...); */\n   pushlevel (0);\n   decl_specs = build_tree_list (NULL_TREE, objc_object_reference);\n@@ -2956,7 +2957,10 @@ build_tmp_function_decl ()\n   expr_decl = build_nt (CALL_EXPR, get_identifier (buffer), parms, NULL_TREE);\n   expr_decl = build1 (INDIRECT_REF, NULL_TREE, expr_decl);\n \n-  return define_decl (expr_decl, decl_specs);\n+  tmp_decl = define_decl (expr_decl, decl_specs);\n+  DECL_SOURCE_LINE (tmp_decl) = 0;\n+  \n+  return tmp_decl;\n }\n \n /* Generate the prototypes for protocol methods.  This is used to\n@@ -3007,7 +3011,7 @@ hack_method_prototype (nst_methods, tmp_decl)\n   for (parm = DECL_ARGUMENTS (tmp_decl); parm; parm = TREE_CHAIN (parm))\n     DECL_CONTEXT (parm) = tmp_decl;\n \n-  init_function_start (tmp_decl, \"objc-act\", 0);\n+  init_function_start (tmp_decl);\n \n   /* Typically called from expand_function_start for function definitions.  */\n   assign_parms (tmp_decl);"}, {"sha": "51d0f2c5d540b915c7207446a35d1856f186343e", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6", "patch": "@@ -2829,7 +2829,7 @@ extern void expand_main_function\tPARAMS ((void));\n extern void init_dummy_function_start\tPARAMS ((void));\n extern void expand_dummy_function_end\tPARAMS ((void));\n extern void init_function_for_compilation\tPARAMS ((void));\n-extern void init_function_start\t\tPARAMS ((tree, const char *, int));\n+extern void init_function_start\t\tPARAMS ((tree));\n extern void assign_parms\t\tPARAMS ((tree));\n extern void put_var_into_stack\t\tPARAMS ((tree, int));\n extern void flush_addressof\t\tPARAMS ((tree));"}, {"sha": "73c502ba168aa2b1d69c4c6d4171d86b86a14983", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6", "patch": "@@ -1,3 +1,8 @@\n+2003-06-14  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* treetree.c (tree_code_create_function_initial): Adjust\n+\tinit_function_start call.\n+\n 2003-06-14  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* Make-lang.in: Update to use options.c and options.h."}, {"sha": "bbc0c3fa66db0c933355907e1c73e722c065a13a", "filename": "gcc/treelang/treetree.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Ftreelang%2Ftreetree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6/gcc%2Ftreelang%2Ftreetree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.c?ref=ee6b0296b84001a2f69ddebc43d32e4f1e83f1a6", "patch": "@@ -382,8 +382,7 @@ tree_code_create_function_initial (tree prev_saved,\n      execute this?  */\n   make_decl_rtl (fn_decl, NULL);\n \n-  /* Use filename/lineno from above.  */\n-  init_function_start (fn_decl, loc.file, loc.line);\n+  init_function_start (fn_decl);\n \n   /* Create rtl for startup code of function, such as saving registers.  */\n "}]}