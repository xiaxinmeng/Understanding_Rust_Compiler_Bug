{"sha": "e040f9bd4b37dfffcb5197c0b6307313846d9e6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA0MGY5YmQ0YjM3ZGZmZmNiNTE5N2MwYjYzMDczMTM4NDZkOWU2Yg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2016-07-22T15:40:51Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2016-07-22T15:40:51Z"}, "message": "PR c/71560 - union compound literal initializes wrong union field\n\ngcc/ChangeLog:\n\t* doc/extend.texi (Compound Literals): Correct and clarify.\n\t(Cast to Union): Same.\n\nFrom-SVN: r238651", "tree": {"sha": "c0d40b181bd089b6f628f350c4233c94887aa3d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0d40b181bd089b6f628f350c4233c94887aa3d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e040f9bd4b37dfffcb5197c0b6307313846d9e6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e040f9bd4b37dfffcb5197c0b6307313846d9e6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e040f9bd4b37dfffcb5197c0b6307313846d9e6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e040f9bd4b37dfffcb5197c0b6307313846d9e6b/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1610d41097ba3b0f4b0df99ddcadcc46a0b5a549", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1610d41097ba3b0f4b0df99ddcadcc46a0b5a549", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1610d41097ba3b0f4b0df99ddcadcc46a0b5a549"}], "stats": {"total": 88, "additions": 50, "deletions": 38}, "files": [{"sha": "deeaac15b5289d470235f8bd9d0db63c9c0c40aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e040f9bd4b37dfffcb5197c0b6307313846d9e6b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e040f9bd4b37dfffcb5197c0b6307313846d9e6b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e040f9bd4b37dfffcb5197c0b6307313846d9e6b", "patch": "@@ -1,3 +1,9 @@\n+2016-07-22 Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/71560\n+\t* doc/extend.texi (Compound Literals): Correct and clarify.\n+\t(Cast to Union): Same.\n+\n 2016-07-22  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* config/rs6000/rs6000.c (rs6000_option_override_internal): Add"}, {"sha": "5c822657cfbb3e3faf007c26a3333f4fa45a54d0", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 44, "deletions": 38, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e040f9bd4b37dfffcb5197c0b6307313846d9e6b/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e040f9bd4b37dfffcb5197c0b6307313846d9e6b/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=e040f9bd4b37dfffcb5197c0b6307313846d9e6b", "patch": "@@ -1868,15 +1868,16 @@ foo (float f, float g)\n @cindex compound literals\n @c The GNU C name for what C99 calls compound literals was \"constructor expressions\".\n \n-ISO C99 supports compound literals.  A compound literal looks like\n-a cast containing an initializer.  Its value is an object of the\n-type specified in the cast, containing the elements specified in\n-the initializer; it is an lvalue.  As an extension, GCC supports\n-compound literals in C90 mode and in C++, though the semantics are\n-somewhat different in C++.\n+A compound literal looks like a cast of a brace-enclosed aggregate\n+initializer list.  Its value is an object of the type specified in\n+the cast, containing the elements specified in the initializer.\n+Unlike the result of a cast, a compound literal is an lvalue.  ISO\n+C99 and later support compound literals.  As an extension, GCC\n+supports compound literals also in C90 mode and in C++, although\n+as explained below, the C++ semantics are somewhat different.\n \n-Usually, the specified type is a structure.  Assume that\n-@code{struct foo} and @code{structure} are declared as shown:\n+Usually, the specified type of a compound literal is a structure.  Assume\n+that @code{struct foo} and @code{structure} are declared as shown:\n \n @smallexample\n struct foo @{int a; char b[2];@} structure;\n@@ -1901,7 +1902,7 @@ This is equivalent to writing the following:\n \n You can also construct an array, though this is dangerous in C++, as\n explained below.  If all the elements of the compound literal are\n-(made up of) simple constant expressions, suitable for use in\n+(made up of) simple constant expressions suitable for use in\n initializers of objects of static storage duration, then the compound\n literal can be coerced to a pointer to its first element and used in\n such an initializer, as shown here:\n@@ -1910,18 +1911,23 @@ such an initializer, as shown here:\n char **foo = (char *[]) @{ \"x\", \"y\", \"z\" @};\n @end smallexample\n \n-Compound literals for scalar types and union types are\n-also allowed, but then the compound literal is equivalent\n-to a cast.\n+Compound literals for scalar types and union types are also allowed.  In\n+the following example the variable @code{i} is initialized to the value\n+@code{2}, the result of incrementing the unnamed object created by\n+the compound literal.\n+\n+@smallexample\n+int i = ++(int) @{ 1 @};\n+@end smallexample\n \n As a GNU extension, GCC allows initialization of objects with static storage\n-duration by compound literals (which is not possible in ISO C99, because\n+duration by compound literals (which is not possible in ISO C99 because\n the initializer is not a constant).\n-It is handled as if the object is initialized only with the bracket\n-enclosed list if the types of the compound literal and the object match.\n-The initializer list of the compound literal must be constant.\n+It is handled as if the object were initialized only with the brace-enclosed\n+list if the types of the compound literal and the object match.\n+The elements of the compound literal must be constant.\n If the object being initialized has array type of unknown size, the size is\n-determined by compound literal size.\n+determined by the size of the compound literal.\n \n @smallexample\n static struct foo x = (struct foo) @{1, 'a', 'b'@};\n@@ -1939,22 +1945,21 @@ static int z[] = @{1, 0, 0@};\n \n In C, a compound literal designates an unnamed object with static or\n automatic storage duration.  In C++, a compound literal designates a\n-temporary object, which only lives until the end of its\n-full-expression.  As a result, well-defined C code that takes the\n-address of a subobject of a compound literal can be undefined in C++,\n-so the C++ compiler rejects the conversion of a temporary array to a pointer.\n-For instance, if the array compound literal example above appeared\n-inside a function, any subsequent use of @samp{foo} in C++ has\n-undefined behavior because the lifetime of the array ends after the\n-declaration of @samp{foo}.  \n-\n-As an optimization, the C++ compiler sometimes gives array compound\n-literals longer lifetimes: when the array either appears outside a\n-function or has const-qualified type.  If @samp{foo} and its\n-initializer had elements of @samp{char *const} type rather than\n-@samp{char *}, or if @samp{foo} were a global variable, the array\n-would have static storage duration.  But it is probably safest just to\n-avoid the use of array compound literals in code compiled as C++.\n+temporary object that only lives until the end of its full-expression.\n+As a result, well-defined C code that takes the address of a subobject\n+of a compound literal can be undefined in C++, so G++ rejects\n+the conversion of a temporary array to a pointer.  For instance, if\n+the array compound literal example above appeared inside a function,\n+any subsequent use of @code{foo} in C++ would have undefined behavior\n+because the lifetime of the array ends after the declaration of @code{foo}.\n+\n+As an optimization, G++ sometimes gives array compound literals longer\n+lifetimes: when the array either appears outside a function or has\n+a @code{const}-qualified type.  If @code{foo} and its initializer had\n+elements of type @code{char *const} rather than code{char *}, or if\n+@code{foo} were a global variable, the array would have static storage\n+duration.  But it is probably safest just to avoid the use of array\n+compound literals in C++ code.\n \n @node Designated Inits\n @section Designated Initializers\n@@ -2145,11 +2150,12 @@ case 1...5:\n @cindex cast to a union\n @cindex union, casting to a\n \n-A cast to union type is similar to other casts, except that the type\n-specified is a union type.  You can specify the type either with\n-@code{union @var{tag}} or with a typedef name.  A cast to union is actually\n-a constructor, not a cast, and hence does not yield an lvalue like\n-normal casts.  (@xref{Compound Literals}.)\n+A cast to union type looks similar to other casts, except that the type\n+specified is a union type.  You can specify the type either with the\n+@code{union} keyword or with a @code{typedef} name that refers to\n+a union.  A cast to a union actually creates a compound literal and\n+yields an lvalue, not an rvalue like true casts do.\n+(@xref{Compound Literals}.)\n \n The types that may be cast to the union type are those of the members\n of the union.  Thus, given the following union and variables:"}]}