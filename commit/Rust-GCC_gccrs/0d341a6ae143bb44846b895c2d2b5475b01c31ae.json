{"sha": "0d341a6ae143bb44846b895c2d2b5475b01c31ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQzNDFhNmFlMTQzYmI0NDg0NmI4OTVjMmQyYjU0NzViMDFjMzFhZQ==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2005-05-05T15:12:01Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2005-05-05T15:12:01Z"}, "message": "arm-g2.c: Use effective-target arm32.\n\n2005-05-05  Paul Brook  <paul@codesourcery.com>\n\n\t* gcc.dg/arm-g2.c: Use effective-target arm32.\n\t* gcc.dg/arm-mmx-1.c: Ditto.\n\t* gcc.dg/arm-scd42-2.c: Ditto.\n\t* gcc.dg/arm-vfp1.c: Ditto.\n\t* lib/target-supports.exp (check_effective_target_arm32): New\n\tfunction.\n\nFrom-SVN: r99269", "tree": {"sha": "d7582ce3abd4f2e4bdb91f62893600666f41125f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7582ce3abd4f2e4bdb91f62893600666f41125f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d341a6ae143bb44846b895c2d2b5475b01c31ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d341a6ae143bb44846b895c2d2b5475b01c31ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d341a6ae143bb44846b895c2d2b5475b01c31ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d341a6ae143bb44846b895c2d2b5475b01c31ae/comments", "author": null, "committer": null, "parents": [{"sha": "c9392a2bf8ea86907553d8788c0cc9cb215b5a20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9392a2bf8ea86907553d8788c0cc9cb215b5a20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9392a2bf8ea86907553d8788c0cc9cb215b5a20"}], "stats": {"total": 66, "additions": 57, "deletions": 9}, "files": [{"sha": "dfd22381ba04334615df3aff18cf087954585c95", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d341a6ae143bb44846b895c2d2b5475b01c31ae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d341a6ae143bb44846b895c2d2b5475b01c31ae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0d341a6ae143bb44846b895c2d2b5475b01c31ae", "patch": "@@ -1,3 +1,12 @@\n+2005-05-05  Paul Brook  <paul@codesourcery.com>\n+\n+\t* gcc.dg/arm-g2.c: Use effective-target arm32.\n+\t* gcc.dg/arm-mmx-1.c: Ditto.\n+\t* gcc.dg/arm-scd42-2.c: Ditto.\n+\t* gcc.dg/arm-vfp1.c: Ditto.\n+\t* lib/target-supports.exp (check_effective_target_arm32): New\n+\tfunction.\n+\n 2005-05-04  Thomas Koenig  <Thomas.Koenig@online.de>\n \n \tPR libfortran/21354"}, {"sha": "a15b280cc107b632e4cb23a7cfbf98085447e530", "filename": "gcc/testsuite/gcc.dg/arm-g2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d341a6ae143bb44846b895c2d2b5475b01c31ae/gcc%2Ftestsuite%2Fgcc.dg%2Farm-g2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d341a6ae143bb44846b895c2d2b5475b01c31ae/gcc%2Ftestsuite%2Fgcc.dg%2Farm-g2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farm-g2.c?ref=0d341a6ae143bb44846b895c2d2b5475b01c31ae", "patch": "@@ -1,6 +1,7 @@\n /* Verify that hardware multiply is preferred on XScale. */\n-/* { dg-do compile { target xscale*-*-* } } */\n+/* { dg-do compile } */\n /* { dg-options \"-mcpu=xscale -O2\" } */\n+/* { dg-require-effective-target arm32 } */\n \n /* Brett Gaines' test case. */\n unsigned BCPL(unsigned) __attribute__ ((naked));\n@@ -15,5 +16,4 @@ unsigned BCPL(unsigned seed)\n     return seed * 2147001325U + 715136305U;\n }\n \n-/* We want to suppress running for -mthumb but not for -mthumb-interwork. */\n-/* { dg-final { global compiler_flags; if ![string match \"*-mthumb *\" $compiler_flags] { scan-assembler \"mla\\[ \t].*\" } } } */\n+/* { dg-final { scan-assembler \"mla\\[ \t].*\" } } */"}, {"sha": "7514a994420af2a839ed33102b7f774892af582a", "filename": "gcc/testsuite/gcc.dg/arm-mmx-1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d341a6ae143bb44846b895c2d2b5475b01c31ae/gcc%2Ftestsuite%2Fgcc.dg%2Farm-mmx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d341a6ae143bb44846b895c2d2b5475b01c31ae/gcc%2Ftestsuite%2Fgcc.dg%2Farm-mmx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farm-mmx-1.c?ref=0d341a6ae143bb44846b895c2d2b5475b01c31ae", "patch": "@@ -1,8 +1,9 @@\n /* Verify that if IP is saved to ensure stack alignment, we don't load\n    it into sp.  */\n-/* { dg-do compile { target arm*-*-* strongarm*-*-* xscale*-*-*} } */\n+/* { dg-do compile } */\n /* { dg-options \"-O -mno-apcs-frame -mcpu=iwmmxt -mabi=iwmmxt\" } */\n-/* { dg-final { global compiler_flags; if ![string match \"*-mthumb *\" $compiler_flags] { scan-assembler \"ldmfd\\[ \t]sp!.*ip,\\[ ]*pc\" } } } */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-final { scan-assembler \"ldmfd\\[ \t]sp!.*ip,\\[ ]*pc\" } } */\n \n /* This function uses all the call-saved registers, namely r4, r5, r6,\n    r7, r8, r9, sl, fp.  Since we also save lr, that leaves an odd"}, {"sha": "1c257c173b6d532ce03449331db739b7b49d4c0f", "filename": "gcc/testsuite/gcc.dg/arm-scd42-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d341a6ae143bb44846b895c2d2b5475b01c31ae/gcc%2Ftestsuite%2Fgcc.dg%2Farm-scd42-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d341a6ae143bb44846b895c2d2b5475b01c31ae/gcc%2Ftestsuite%2Fgcc.dg%2Farm-scd42-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farm-scd42-2.c?ref=0d341a6ae143bb44846b895c2d2b5475b01c31ae", "patch": "@@ -1,6 +1,7 @@\n /* Verify that mov is preferred on XScale for loading a 2 byte constant. */\n-/* { dg-do compile { target xscale-*-* } } */\n+/* { dg-do compile } */\n /* { dg-options \"-mcpu=xscale -O\" } */\n+/* { dg-require-effective-target arm32 } */\n \n unsigned load2(void) __attribute__ ((naked));\n unsigned load2(void)\n@@ -13,5 +14,4 @@ unsigned load2(void)\n     return 273;\n }\n \n-/* We want to suppress running for -mthumb but not for -mthumb-interwork. */\n-/* { dg-final { global compiler_flags; if ![string match \"*-mthumb *\" $compiler_flags] { scan-assembler \"mov\\[ \t].*272\" } } } */\n+/* { dg-final { scan-assembler \"mov\\[ \t].*272\" } } */"}, {"sha": "5898e8027e62c935bde4d4806465fe502e663279", "filename": "gcc/testsuite/gcc.dg/arm-vfp1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d341a6ae143bb44846b895c2d2b5475b01c31ae/gcc%2Ftestsuite%2Fgcc.dg%2Farm-vfp1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d341a6ae143bb44846b895c2d2b5475b01c31ae/gcc%2Ftestsuite%2Fgcc.dg%2Farm-vfp1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farm-vfp1.c?ref=0d341a6ae143bb44846b895c2d2b5475b01c31ae", "patch": "@@ -1,5 +1,6 @@\n-/* { dg-do compile { target arm*-*-* } } */\n+/* { dg-do compile } */\n /* { dg-options \"-O2 -mfpu=vfp -mfloat-abi=softfp\" } */\n+/* { dg-require-effective-target arm32 } */\n \n extern float fabsf (float);\n extern float sqrtf (float);"}, {"sha": "6d47ece07f082397c4f497509437b86e8c18350d", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d341a6ae143bb44846b895c2d2b5475b01c31ae/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d341a6ae143bb44846b895c2d2b5475b01c31ae/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=0d341a6ae143bb44846b895c2d2b5475b01c31ae", "patch": "@@ -698,6 +698,43 @@ proc check_effective_target_vect_int { } {\n     return $et_vect_int_saved\n }\n \n+# Return 1 is this is an arm target using 32-bit instructions\n+proc check_effective_target_arm32 { } {\n+    global et_arm32_saved\n+    global et_arm32_target_name\n+    global compiler_flags\n+\n+    if { ![info exists et_arm32_target_name] } {\n+\tset et_arm32_target_name \"\"\n+    }\n+\n+    # If the target has changed since we set the cached value, clear it.\n+    set current_target [current_target_name]\n+    if { $current_target != $et_arm32_target_name } {\n+\tverbose \"check_effective_target_arm32: `$et_arm32_target_name' `$current_target'\" 2\n+\tset et_arm32_target_name $current_target\n+\tif { [info exists et_arm32_saved] } {\n+\t    verbose \"check_effective_target_arm32: removing cached result\" 2\n+\t    unset et_arm32_saved\n+\t}\n+    }\n+\n+    if [info exists et_arm32_saved] {\n+\tverbose \"check-effective_target_arm32: using cached result\" 2\n+    } else {\n+\tset et_arm32_saved 0\n+\tif { [istarget arm-*-*]\n+\t      || [istarget strongarm*-*-*]\n+\t      || [istarget xscale-*-*] } {\n+\t    if ![string match \"*-mthumb *\" $compiler_flags] {\n+\t\tset et_arm32_saved 1\n+\t    }\n+\t}\n+    }\n+    verbose \"check_effective_target_arm32: returning $et_arm32_saved\" 2\n+    return $et_arm32_saved\n+}\n+\n # Return 1 if the target supports hardware vector shift operation.\n \n proc check_effective_target_vect_shift { } {"}]}