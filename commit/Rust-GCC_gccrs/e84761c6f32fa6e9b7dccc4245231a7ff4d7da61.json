{"sha": "e84761c6f32fa6e9b7dccc4245231a7ff4d7da61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg0NzYxYzZmMzJmYTZlOWI3ZGNjYzQyNDUyMzFhN2ZmNGQ3ZGE2MQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-09-29T00:16:30Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-09-29T00:16:30Z"}, "message": "Daily bump.", "tree": {"sha": "aebf026778eb3e5adb7f390cf70a09f78acb00cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aebf026778eb3e5adb7f390cf70a09f78acb00cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e84761c6f32fa6e9b7dccc4245231a7ff4d7da61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e84761c6f32fa6e9b7dccc4245231a7ff4d7da61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e84761c6f32fa6e9b7dccc4245231a7ff4d7da61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e84761c6f32fa6e9b7dccc4245231a7ff4d7da61/comments", "author": null, "committer": null, "parents": [{"sha": "c0ed6afef7897f32dc199da9a5430664fcbb61bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0ed6afef7897f32dc199da9a5430664fcbb61bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0ed6afef7897f32dc199da9a5430664fcbb61bb"}], "stats": {"total": 255, "additions": 254, "deletions": 1}, "files": [{"sha": "a2c395bfb84616631d6094d0b087e1bf3256c81c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e84761c6f32fa6e9b7dccc4245231a7ff4d7da61/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e84761c6f32fa6e9b7dccc4245231a7ff4d7da61/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e84761c6f32fa6e9b7dccc4245231a7ff4d7da61", "patch": "@@ -1,3 +1,70 @@\n+2020-09-28  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.h (class irange): Add irange_allocator friend.\n+\t(class irange_allocator): New.\n+\n+2020-09-28  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR middle-end/96390\n+\t* omp-offload.c (omp_discover_declare_target_tgt_fn_r): Handle\n+\talias nodes.\n+\n+2020-09-28  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\t* config/rs6000/smmintrin.h (_mm_insert_epi8): New.\n+\t(_mm_insert_epi32): New.\n+\t(_mm_insert_epi64): New.\n+\n+2020-09-28  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* common/config/i386/i386-common.c (OPTION_MASK_ISA2_AMX_TILE_SET,\n+\tOPTION_MASK_ISA2_AMX_INT8_SET, OPTION_MASK_ISA2_AMX_BF16_SET,\n+\tOPTION_MASK_ISA2_AMX_TILE_UNSET, OPTION_MASK_ISA2_AMX_INT8_UNSET,\n+\tOPTION_MASK_ISA2_AMX_BF16_UNSET, OPTION_MASK_ISA2_XSAVE_UNSET):\n+\tNew marcos.\n+\t(ix86_handle_option): Hanlde -mamx-tile, -mamx-int8, -mamx-bf16.\n+\t* common/config/i386/i386-cpuinfo.h (processor_types): Add\n+\tFEATURE_AMX_TILE, FEATURE_AMX_INT8, FEATURE_AMX_BF16.\n+\t* common/config/i386/cpuinfo.h (XSTATE_TILECFG,\n+\tXSTATE_TILEDATA, XCR_AMX_ENABLED_MASK): New macro.\n+\t(get_available_features): Enable AMX features only if\n+\ttheir states are suoorited by OSXSAVE.\n+\t* common/config/i386/i386-isas.h: Add ISA_NAME_TABLE_ENTRY\n+\tfor amx-tile, amx-int8, amx-bf16.\n+\t* config.gcc: Add amxtileintrin.h, amxint8intrin.h,\n+\tamxbf16intrin.h to extra headers.\n+\t* config/i386/amxbf16intrin.h: New file.\n+\t* config/i386/amxint8intrin.h: Ditto.\n+\t* config/i386/amxtileintrin.h: Ditto.\n+\t* config/i386/cpuid.h (bit_AMX_BF16, bit_AMX_TILE, bit_AMX_INT8):\n+\tNew macro.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Define\n+\t__AMX_TILE__, __AMX_INT8__, AMX_BF16__.\n+\t* config/i386/i386-options.c (ix86_target_string): Add\n+\t-mamx-tile, -mamx-int8, -mamx-bf16.\n+\t(ix86_option_override_internal): Handle AMX-TILE,\n+\tAMX-INT8, AMX-BF16.\n+\t* config/i386/i386.h (TARGET_AMX_TILE, TARGET_AMX_TILE_P,\n+\tTARGET_AMX_INT8, TARGET_AMX_INT8_P, TARGET_AMX_BF16_P,\n+\tPTA_AMX_TILE, PTA_AMX_INT8, PTA_AMX_BF16): New macros.\n+\t* config/i386/i386.opt: Add -mamx-tile, -mamx-int8, -mamx-bf16.\n+\t* config/i386/immintrin.h: Include amxtileintrin.h,\n+\tamxint8intrin.h, amxbf16intrin.h.\n+\t* doc/invoke.texi: Document -mamx-tile, -mamx-int8, -mamx-bf16.\n+\t* doc/extend.texi: Document amx-tile, amx-int8, amx-bf16.\n+\t* doc/sourcebuild.texi ((Effective-Target Keywords, Other\n+\thardware attributes): Document amx_int8, amx_tile, amx_bf16.\n+\n+2020-09-28  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c\n+\t(aarch64_general_expand_builtin): Do not alter value on a\n+\tforce_reg returned rtx.\n+\n+2020-09-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-eh.c (lower_try_finally_dup_block): Revert latest change.\n+\n 2020-09-27  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-modref.c (modref_summary::useful_p): Fix testing of stores."}, {"sha": "91db4fb59293b482d19098bce31b78d9f2f88891", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e84761c6f32fa6e9b7dccc4245231a7ff4d7da61/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e84761c6f32fa6e9b7dccc4245231a7ff4d7da61/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=e84761c6f32fa6e9b7dccc4245231a7ff4d7da61", "patch": "@@ -1 +1 @@\n-20200928\n+20200929"}, {"sha": "d6e7b4c660fb4eede4f8474754216a1b13fe3cd9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e84761c6f32fa6e9b7dccc4245231a7ff4d7da61/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e84761c6f32fa6e9b7dccc4245231a7ff4d7da61/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e84761c6f32fa6e9b7dccc4245231a7ff4d7da61", "patch": "@@ -1,3 +1,14 @@\n+2020-09-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (Subprogram_Body_to_gnu): Set the end locus\n+\tof body and declaration earlier.\n+\n+2020-09-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (maybe_saturate_size): Add ALIGN parameter\n+\tand round down the result to ALIGN.\n+\t(gnat_to_gnu_entity): Adjust calls to maybe_saturate_size.\n+\n 2020-09-14  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc-interface/trans.c (gigi): Adjust build_optimization_node"}, {"sha": "458fdaed800097c0e534f5f7b20b12bab14dd3f4", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e84761c6f32fa6e9b7dccc4245231a7ff4d7da61/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e84761c6f32fa6e9b7dccc4245231a7ff4d7da61/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=e84761c6f32fa6e9b7dccc4245231a7ff4d7da61", "patch": "@@ -1,3 +1,28 @@\n+2020-09-28  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* region-model.h (binop_svalue::dyn_cast_binop_svalue): Remove\n+\tredundant \"virtual\".  Add FINAL OVERRIDE.\n+\t(widening_svalue::dyn_cast_widening_svalue): Add FINAL OVERRIDE.\n+\t(compound_svalue::dyn_cast_compound_svalue): Likewise.\n+\t(conjured_svalue::dyn_cast_conjured_svalue): Likewise.\n+\n+2020-09-28  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* diagnostic-manager.cc (null_assignment_sm_context::m_visitor):\n+\tRemove unused field.\n+\n+2020-09-28  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/97233\n+\t* analyzer.cc (is_longjmp_call_p): Require the initial argument\n+\tto be a pointer.\n+\t* engine.cc (exploded_node::on_longjmp): Likewise.\n+\n+2020-09-28  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* program-state.cc (sm_state_map::print): Update check\n+\tfor m_global_state being the start state.\n+\n 2020-09-26  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/96646"}, {"sha": "faa78970ad7e73395fdd78b5e66de96c83aaf38d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e84761c6f32fa6e9b7dccc4245231a7ff4d7da61/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e84761c6f32fa6e9b7dccc4245231a7ff4d7da61/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e84761c6f32fa6e9b7dccc4245231a7ff4d7da61", "patch": "@@ -1,3 +1,23 @@\n+2020-09-28  Mark Eggleston  <markeggleston@gcc.gnu.org>\n+\n+\tRevert:\n+\t2020-09-27  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\t\t    Mark Eggleston  <markeggleston@gcc.gnu.org>\n+\n+\tPR fortran/95614\n+\t* decl.c (gfc_get_common): Use gfc_match_common_name instead\n+\tof match_common_name.\n+\t* decl.c (gfc_bind_idents): Use gfc_match_common_name instead\n+\tof match_common_name.\n+\t* match.c : Rename match_common_name to gfc_match_common_name.\n+\t* match.c (gfc_match_common): Use gfc_match_common_name instead\n+\tof match_common_name.\n+\t* match.h : Rename match_common_name to gfc_match_common_name.\n+\t* resolve.c (resolve_common_vars): Check each symbol in a\n+\tcommon block has a global symbol.  If there is a global symbol\n+\tissue an error if the symbol type is known as is not a common\n+\tblock name.\n+\n 2020-09-27  Steven G. Kargl  <kargl@gcc.gnu.org>\n \t    Mark Eggleston  <markeggleston@gcc.gnu.org>\n "}, {"sha": "dc8ccbb9047221a017cac1973d58ebab4e46a9a3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e84761c6f32fa6e9b7dccc4245231a7ff4d7da61/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e84761c6f32fa6e9b7dccc4245231a7ff4d7da61/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e84761c6f32fa6e9b7dccc4245231a7ff4d7da61", "patch": "@@ -1,3 +1,56 @@\n+2020-09-28  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/97233\n+\t* gcc.dg/analyzer/pr97233.c: New test.\n+\n+2020-09-28  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\t* gcc.target/powerpc/sse4_1-pinsrb.c: New test.\n+\t* gcc.target/powerpc/sse4_1-pinsrd.c: New test.\n+\t* gcc.target/powerpc/sse4_1-pinsrq.c: New test.\n+\n+2020-09-28  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_amx_tile,\n+\tcheck_effective_target_amx_int8,\n+\tcheck_effective_target_amx_bf16): New proc.\n+\t* g++.dg/other/i386-2.C: Add -mamx-tile, -mamx-int8, -mamx-bf16.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\t* gcc.target/i386/sse-12.c: Ditto.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Ditto.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/funcspec-56.inc: Add new target attribute.\n+\t* gcc.target/i386/amx-check.h: New header file.\n+\t* gcc.target/i386/amxbf16-asmatt-1.c: New test.\n+\t* gcc.target/i386/amxint8-asmatt-1.c: New test.\n+\t* gcc.target/i386/amxtile-asmatt-1.c: Ditto.\n+\t* gcc.target/i386/amxbf16-asmintel-1.c: Ditto.\n+\t* gcc.target/i386/amxint8-asmintel-1.c: Ditto.\n+\t* gcc.target/i386/amxtile-asmintel-1.c: Ditto.\n+\t* gcc.target/i386/amxbf16-dpbf16ps-2.c: Ditto.\n+\t* gcc.target/i386/amxint8-dpbssd-2.c: Ditto.\n+\t* gcc.target/i386/amxint8-dpbsud-2.c: Ditto.\n+\t* gcc.target/i386/amxint8-dpbusd-2.c: Ditto.\n+\t* gcc.target/i386/amxint8-dpbuud-2.c: Ditto.\n+\t* gcc.target/i386/amxtile-2.c: Ditto.\n+\n+2020-09-28  Mark Eggleston  <markeggleston@gcc.gnu.org>\n+\n+\tRevert:\n+\t2020-09-28  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\t\t    Mark Eggleston  <markeggleston@gcc.gnu.org>\n+\n+\tPR fortran/95614\n+\t* gfortran.dg/pr95614_1.f90: New test.\n+\t* gfortran.dg/pr95614_2.f90: New test.\n+\n+2020-09-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/addr16.adb: New test.\n+\t* gnat.dg/addr16_pkg.ads: New helper.\n+\n 2020-09-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/97073"}, {"sha": "79837b302da8b8e0356cf84326e6fdf7fdfc3241", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e84761c6f32fa6e9b7dccc4245231a7ff4d7da61/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e84761c6f32fa6e9b7dccc4245231a7ff4d7da61/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=e84761c6f32fa6e9b7dccc4245231a7ff4d7da61", "patch": "@@ -1,3 +1,17 @@\n+2020-09-28  Ian Lance Taylor  <iant@golang.org>\n+\n+\tPR libbacktrace/97082\n+\t* Makefile.am (check_DATA): Add mtest.dSYM if USE_DSYMUTIL.\n+\t* Makefile.in: Regenerate.\n+\n+2020-09-28  Ian Lance Taylor  <iant@golang.org>\n+\n+\tPR libbacktrace/97227\n+\t* configure.ac (USE_DSYMUTIL): Define instead of HAVE_DSYMUTIL.\n+\t* Makefile.am: Change all uses of HAVE_DSYMUTIL to USE_DSYMUTIL.\n+\t* configure: Regenerate.\n+\t* Makefile.in: Regenerate.\n+\n 2020-09-23  Ian Lance Taylor  <iant@golang.org>\n \n \t* dwarf.c (report_inlined_functions): Handle PC == -1 and PC =="}, {"sha": "afdc229418a33e17b55b48b256ec891a889f5c91", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e84761c6f32fa6e9b7dccc4245231a7ff4d7da61/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e84761c6f32fa6e9b7dccc4245231a7ff4d7da61/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=e84761c6f32fa6e9b7dccc4245231a7ff4d7da61", "patch": "@@ -1,3 +1,8 @@\n+2020-09-28  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/libgcc-softfp.ver: New file.\n+\t* config/aarch64/t-softfp (SHLIB_MAPFILES): Add it.\n+\n 2020-09-27  Clement Chigot  <clement.chigot@atos.net>\n \n \t* config/rs6000/t-slibgcc-aix: Use $(AR) without -X32_64."}, {"sha": "f3986e1a0eed8ceac4f7354d6b8c822b6d094b47", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e84761c6f32fa6e9b7dccc4245231a7ff4d7da61/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e84761c6f32fa6e9b7dccc4245231a7ff4d7da61/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=e84761c6f32fa6e9b7dccc4245231a7ff4d7da61", "patch": "@@ -1,3 +1,22 @@\n+2020-09-28  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* m4/unpack.m4 (unpack0_'rtype_code`,\n+\tunpack1_'rtype_code`): Move 'rstride[0]' initialization outside\n+\tconditional branch to silence -Wmaybe-uninitialized.\n+\t* generated/unpack_c10.c: Regenerate.\n+\t* generated/unpack_c16.c: Regenerate.\n+\t* generated/unpack_c4.c: Regenerate.\n+\t* generated/unpack_c8.c: Regenerate.\n+\t* generated/unpack_i1.c: Regenerate.\n+\t* generated/unpack_i16.c: Regenerate.\n+\t* generated/unpack_i2.c: Regenerate.\n+\t* generated/unpack_i4.c: Regenerate.\n+\t* generated/unpack_i8.c: Regenerate.\n+\t* generated/unpack_r10.c: Regenerate.\n+\t* generated/unpack_r16.c: Regenerate.\n+\t* generated/unpack_r4.c: Regenerate.\n+\t* generated/unpack_r8.c: Regenerate.\n+\n 2020-09-27  Clement Chigot  <clement.chigot@atos.net>\n \n \t* config/t-aix: Use $(AR) without -X32_64."}, {"sha": "4fcdb53e2ed236fe6e482db261ce1a9aa0e29dac", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e84761c6f32fa6e9b7dccc4245231a7ff4d7da61/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e84761c6f32fa6e9b7dccc4245231a7ff4d7da61/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=e84761c6f32fa6e9b7dccc4245231a7ff4d7da61", "patch": "@@ -1,3 +1,9 @@\n+2020-09-28  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR middle-end/96390\n+\t* testsuite/libgomp.c++/pr96390.C: New test.\n+\t* testsuite/libgomp.c-c++-common/pr96390.c: New test.\n+\n 2020-09-27  Clement Chigot  <clement.chigot@atos.net>\n \n \t* config/t-aix: Use $(AR) without -X32_64."}, {"sha": "e6e394fa6b38da11764fa2988911a97e935dbfc6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e84761c6f32fa6e9b7dccc4245231a7ff4d7da61/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e84761c6f32fa6e9b7dccc4245231a7ff4d7da61/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e84761c6f32fa6e9b7dccc4245231a7ff4d7da61", "patch": "@@ -1,3 +1,36 @@\n+2020-09-28  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (filter_view): Declare the data member\n+\t_M_base last instead of first, and adjust constructors' member\n+\tinitializer lists accordingly.\n+\t(transform_view): Likewise.\n+\t(take_view): Likewise.\n+\t(take_while_view): Likewise.\n+\t(drop_view): Likewise.\n+\t(drop_while_view): Likewise.\n+\t(join_view): Likewise.\n+\t(split_view): Likewise (and tweak nearby formatting).\n+\t(reverse_view): Likewise.\n+\t* testsuite/std/ranges/adaptors/sizeof.cc: Update expected\n+\tsizes.\n+\n+2020-09-28  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* testsuite/std/ranges/adaptors/sizeof.cc: New test.\n+\n+2020-09-28  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/ranges_util.h (subrange::_M_end): Give it\n+\t[[no_unique_address]].\n+\t* testsuite/std/ranges/subrange/sizeof.cc: New test.\n+\n+2020-09-28  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (iota_view::_M_bound): Give it\n+\t[[no_unique_address]].\n+\t* testsuite/std/ranges/iota/iota_view.cc: Check that an\n+\tunbounded iota_view has minimal size.\n+\n 2020-09-27  Clement Chigot  <clement.chigot@atos.net>\n \n \t* config/os/aix/t-aix: Use $(AR) without -X32_64."}]}