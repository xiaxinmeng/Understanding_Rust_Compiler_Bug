{"sha": "8e34d92ef29a175b84cc7f5185db43656ae762bb", "node_id": "C_kwDOANBUbNoAKDhlMzRkOTJlZjI5YTE3NWI4NGNjN2Y1MTg1ZGI0MzY1NmFlNzYyYmI", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-08-04T16:22:59Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-08-04T18:21:59Z"}, "message": "Loop over intersected bitmaps.\n\ncompute_ranges_in_block loops over the import list and then checks the\nsame bit in exports.  It is nmore efficent to loop over the intersection\nof the 2 bitmaps.\n\n\tPR tree-optimization/106514\n\t* gimple-range-path.cc (path_range_query::compute_ranges_in_block):\n\tUse EXECUTE_IF_AND_IN_BITMAP to loop over 2 bitmaps.", "tree": {"sha": "9159427d7bddc6f0df5b8fee131e442027b8e017", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9159427d7bddc6f0df5b8fee131e442027b8e017"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e34d92ef29a175b84cc7f5185db43656ae762bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e34d92ef29a175b84cc7f5185db43656ae762bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e34d92ef29a175b84cc7f5185db43656ae762bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e34d92ef29a175b84cc7f5185db43656ae762bb/comments", "author": null, "committer": null, "parents": [{"sha": "be58bf98e98bb431ed26ca8be84586075fe8be82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be58bf98e98bb431ed26ca8be84586075fe8be82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be58bf98e98bb431ed26ca8be84586075fe8be82"}], "stats": {"total": 40, "additions": 18, "deletions": 22}, "files": [{"sha": "43e7526b6fc4e1a32676546810a1a8a911d3571d", "filename": "gcc/gimple-range-path.cc", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e34d92ef29a175b84cc7f5185db43656ae762bb/gcc%2Fgimple-range-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e34d92ef29a175b84cc7f5185db43656ae762bb/gcc%2Fgimple-range-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.cc?ref=8e34d92ef29a175b84cc7f5185db43656ae762bb", "patch": "@@ -479,32 +479,28 @@ path_range_query::compute_ranges_in_block (basic_block bb)\n       p->set_root_oracle (nullptr);\n     }\n \n-  EXECUTE_IF_SET_IN_BITMAP (m_imports, 0, i, bi)\n+  gori_compute &g = m_ranger->gori ();\n+  bitmap exports = g.exports (bb);\n+  EXECUTE_IF_AND_IN_BITMAP (m_imports, exports, 0, i, bi)\n     {\n       tree name = ssa_name (i);\n-      gori_compute &g = m_ranger->gori ();\n-      bitmap exports = g.exports (bb);\n-\n-      if (bitmap_bit_p (exports, i))\n+      Value_Range r (TREE_TYPE (name));\n+      if (g.outgoing_edge_range_p (r, e, name, *this))\n \t{\n-\t  Value_Range r (TREE_TYPE (name));\n-\t  if (g.outgoing_edge_range_p (r, e, name, *this))\n+\t  Value_Range cached_range (TREE_TYPE (name));\n+\t  if (get_cache (cached_range, name))\n+\t    r.intersect (cached_range);\n+\n+\t  set_cache (r, name);\n+\t  if (DEBUG_SOLVER)\n \t    {\n-\t      Value_Range cached_range (TREE_TYPE (name));\n-\t      if (get_cache (cached_range, name))\n-\t\tr.intersect (cached_range);\n-\n-\t      set_cache (r, name);\n-\t      if (DEBUG_SOLVER)\n-\t\t{\n-\t\t  fprintf (dump_file, \"outgoing_edge_range_p for \");\n-\t\t  print_generic_expr (dump_file, name, TDF_SLIM);\n-\t\t  fprintf (dump_file, \" on edge %d->%d \",\n-\t\t\t   e->src->index, e->dest->index);\n-\t\t  fprintf (dump_file, \"is \");\n-\t\t  r.dump (dump_file);\n-\t\t  fprintf (dump_file, \"\\n\");\n-\t\t}\n+\t      fprintf (dump_file, \"outgoing_edge_range_p for \");\n+\t      print_generic_expr (dump_file, name, TDF_SLIM);\n+\t      fprintf (dump_file, \" on edge %d->%d \",\n+\t\t       e->src->index, e->dest->index);\n+\t      fprintf (dump_file, \"is \");\n+\t      r.dump (dump_file);\n+\t      fprintf (dump_file, \"\\n\");\n \t    }\n \t}\n     }"}]}