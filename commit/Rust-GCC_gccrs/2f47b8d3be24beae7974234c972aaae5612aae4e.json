{"sha": "2f47b8d3be24beae7974234c972aaae5612aae4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY0N2I4ZDNiZTI0YmVhZTc5NzQyMzRjOTcyYWFhZTU2MTJhYWU0ZQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-10-19T14:59:00Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-10-19T14:59:00Z"}, "message": "re PR target/50447 ([avr] Better support of AND, OR, XOR and PLUS with constant integers for 16- and 32-bit values)\n\n\tPR target/50447\n\t* config/avr/avr.md (cc): New alternative out_plus_noclobber.\n\t(adjust_len): Ditto.\n\t(addhi3): Don't pipe through short; use gen_int_mode instead.\n\tPrior to reload, expand to gen_addhi3_clobber.\n\t(*addhi3): Use avr_out_plus_noclobber if applicable, use\n\tout_plus_noclobber in cc and adjust_len attribute.\n\t(addhi3_clobber): 2 new RTL peepholes.\n\t(addhi3_clobber): New insn.\n\t* config/avr/avr-protos.h: (avr_out_plus_noclobber): New prototype.\n\t* config/avr/avr.c (avr_out_plus_noclobber): New function.\n\t(notice_update_cc): Handle CC_OUT_PLUS_NOCLOBBER.\n\t(avr_out_plus_1): Tweak if only MSB is +/-1 and other bytes are 0.\n\tSet cc0 to set_zn for adiw on 16-bit values.\n\t(adjust_insn_length): Handle ADJUST_LEN_OUT_PLUS_NOCLOBBER.\n\t(expand_epilogue): No need to add 0 to frame_pointer_rtx.\n\nFrom-SVN: r180193", "tree": {"sha": "7616f34c079ed92da41678645c99eca03752a6aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7616f34c079ed92da41678645c99eca03752a6aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f47b8d3be24beae7974234c972aaae5612aae4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f47b8d3be24beae7974234c972aaae5612aae4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f47b8d3be24beae7974234c972aaae5612aae4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f47b8d3be24beae7974234c972aaae5612aae4e/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd46054a5f6243d441fc1564de173a858ea4e3d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd46054a5f6243d441fc1564de173a858ea4e3d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd46054a5f6243d441fc1564de173a858ea4e3d4"}], "stats": {"total": 186, "additions": 152, "deletions": 34}, "files": [{"sha": "c77d7e88fd622a53dc43b75a66f394ed8b0e4281", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f47b8d3be24beae7974234c972aaae5612aae4e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f47b8d3be24beae7974234c972aaae5612aae4e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f47b8d3be24beae7974234c972aaae5612aae4e", "patch": "@@ -1,3 +1,22 @@\n+2011-10-19  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/50447\n+\t* config/avr/avr.md (cc): New alternative out_plus_noclobber.\n+\t(adjust_len): Ditto.\n+\t(addhi3): Don't pipe through short; use gen_int_mode instead.\n+\tPrior to reload, expand to gen_addhi3_clobber.\n+\t(*addhi3): Use avr_out_plus_noclobber if applicable, use\n+\tout_plus_noclobber in cc and adjust_len attribute.\n+\t(addhi3_clobber): 2 new RTL peepholes.\n+\t(addhi3_clobber): New insn.\n+\t* config/avr/avr-protos.h: (avr_out_plus_noclobber): New prototype.\n+\t* config/avr/avr.c (avr_out_plus_noclobber): New function.\n+\t(notice_update_cc): Handle CC_OUT_PLUS_NOCLOBBER.\n+\t(avr_out_plus_1): Tweak if only MSB is +/-1 and other bytes are 0.\n+\tSet cc0 to set_zn for adiw on 16-bit values.\n+\t(adjust_insn_length): Handle ADJUST_LEN_OUT_PLUS_NOCLOBBER.\n+\t(expand_epilogue): No need to add 0 to frame_pointer_rtx.\n+\n 2011-10-19  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/50780"}, {"sha": "dd8ba3a33189f1309adff6c322f3173cd076237e", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f47b8d3be24beae7974234c972aaae5612aae4e/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f47b8d3be24beae7974234c972aaae5612aae4e/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=2f47b8d3be24beae7974234c972aaae5612aae4e", "patch": "@@ -83,6 +83,7 @@ extern void avr_output_addr_vec_elt (FILE *stream, int value);\n extern const char *avr_out_sbxx_branch (rtx insn, rtx operands[]);\n extern const char* avr_out_bitop (rtx, rtx*, int*);\n extern const char* avr_out_plus (rtx*, int*, int*);\n+extern const char* avr_out_plus_noclobber (rtx*, int*, int*);\n extern const char* avr_out_addto_sp (rtx*, int*);\n extern bool avr_popcount_each_byte (rtx, int, int);\n "}, {"sha": "94bc30af3d90448aa736b2bb20791cbe2a5e2a00", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 41, "deletions": 5, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f47b8d3be24beae7974234c972aaae5612aae4e/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f47b8d3be24beae7974234c972aaae5612aae4e/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=2f47b8d3be24beae7974234c972aaae5612aae4e", "patch": "@@ -1051,9 +1051,10 @@ expand_epilogue (bool sibcall_p)\n       if (frame_pointer_needed)\n \t{\n           /*  Get rid of frame.  */\n-\t  emit_move_insn(frame_pointer_rtx,\n-                         gen_rtx_PLUS (HImode, frame_pointer_rtx,\n-                                       gen_int_mode (size, HImode)));\n+          if (size)\n+            emit_move_insn (frame_pointer_rtx,\n+                            gen_rtx_PLUS (HImode, frame_pointer_rtx,\n+                                          gen_int_mode (size, HImode)));\n \t}\n       else\n \t{\n@@ -1682,14 +1683,19 @@ notice_update_cc (rtx body ATTRIBUTE_UNUSED, rtx insn)\n       break;\n \n     case CC_OUT_PLUS:\n+    case CC_OUT_PLUS_NOCLOBBER:\n       {\n         rtx *op = recog_data.operand;\n         int len_dummy, icc;\n         \n         /* Extract insn's operands.  */\n         extract_constrain_insn_cached (insn);\n+\n+        if (CC_OUT_PLUS == cc)\n+          avr_out_plus (op, &len_dummy, &icc);\n+        else\n+          avr_out_plus_noclobber (op, &len_dummy, &icc);\n         \n-        avr_out_plus (op, &len_dummy, &icc);\n         cc = (enum attr_cc) icc;\n         \n         break;\n@@ -4773,7 +4779,8 @@ avr_out_plus_1 (rtx *xop, int *plen, enum rtx_code code, int *pcc)\n   /* Value to add.  There are two ways to add VAL: R += VAL and R -= -VAL.  */\n   rtx xval = xop[2];\n \n-  /* Addition does not set cc0 in a usable way.  */\n+  /* Except in the case of ADIW with 16-bit register (see below)\n+     addition does not set cc0 in a usable way.  */\n   \n   *pcc = (MINUS == code) ? CC_SET_CZN : CC_CLOBBER;\n \n@@ -4821,6 +4828,9 @@ avr_out_plus_1 (rtx *xop, int *plen, enum rtx_code code, int *pcc)\n                   started = true;\n                   avr_asm_len (code == PLUS ? \"adiw %0,%1\" : \"sbiw %0,%1\",\n                                op, plen, 1);\n+\n+                  if (n_bytes == 2 && PLUS == code)\n+                      *pcc = CC_SET_ZN;\n                 }\n \n               i++;\n@@ -4836,6 +4846,14 @@ avr_out_plus_1 (rtx *xop, int *plen, enum rtx_code code, int *pcc)\n                          op, plen, 1);\n           continue;\n         }\n+      else if ((val8 == 1 || val8 == 0xff)\n+               && !started\n+               && i == n_bytes - 1)\n+      {\n+          avr_asm_len ((code == PLUS) ^ (val8 == 1) ? \"dec %0\" : \"inc %0\",\n+                       op, plen, 1);\n+          break;\n+      }\n \n       switch (code)\n         {\n@@ -4924,6 +4942,22 @@ avr_out_plus (rtx *xop, int *plen, int *pcc)\n }\n \n \n+/* Same as above but XOP has just 3 entries.\n+   Supply a dummy 4th operand.  */\n+\n+const char*\n+avr_out_plus_noclobber (rtx *xop, int *plen, int *pcc)\n+{\n+  rtx op[4];\n+\n+  op[0] = xop[0];\n+  op[1] = xop[1];\n+  op[2] = xop[2];\n+  op[3] = NULL_RTX;\n+\n+  return avr_out_plus (op, plen, pcc);\n+}\n+\n /* Output bit operation (IOR, AND, XOR) with register XOP[0] and compile\n    time constant XOP[2]:\n \n@@ -5308,6 +5342,8 @@ adjust_insn_length (rtx insn, int len)\n     case ADJUST_LEN_OUT_BITOP: avr_out_bitop (insn, op, &len); break;\n       \n     case ADJUST_LEN_OUT_PLUS: avr_out_plus (op, &len, NULL); break;\n+    case ADJUST_LEN_OUT_PLUS_NOCLOBBER:\n+      avr_out_plus_noclobber (op, &len, NULL); break;\n \n     case ADJUST_LEN_ADDTO_SP: avr_out_addto_sp (op, &len); break;\n       "}, {"sha": "35d4bdc1717212c52ba1c1f2815a2f10e1b06c78", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 91, "deletions": 29, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f47b8d3be24beae7974234c972aaae5612aae4e/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f47b8d3be24beae7974234c972aaae5612aae4e/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=2f47b8d3be24beae7974234c972aaae5612aae4e", "patch": "@@ -78,7 +78,7 @@\n   \n ;; Condition code settings.\n (define_attr \"cc\" \"none,set_czn,set_zn,set_n,compare,clobber,\n-                   out_plus\"\n+                   out_plus, out_plus_noclobber\"\n   (const_string \"none\"))\n \n (define_attr \"type\" \"branch,branch1,arith,xcall\"\n@@ -125,7 +125,8 @@\n ;; Otherwise do special processing depending on the attribute.\n \n (define_attr \"adjust_len\"\n-  \"out_bitop, out_plus, addto_sp, tsthi, tstsi, compare, call,\n+  \"out_bitop, out_plus, out_plus_noclobber, addto_sp,\n+   tsthi, tstsi, compare, call,\n    mov8, mov16, mov32, reload_in16, reload_in32,\n    ashlqi, ashrqi, lshrqi,\n    ashlhi, ashrhi, lshrhi,\n@@ -759,14 +760,22 @@\n \t(plus:HI (match_operand:HI 1 \"register_operand\" \"\")\n \t\t (match_operand:HI 2 \"nonmemory_operand\" \"\")))]\n   \"\"\n-  \"\n-{\n-  if (GET_CODE (operands[2]) == CONST_INT)\n-    {\n-      short tmp = INTVAL (operands[2]);\n-      operands[2] = GEN_INT(tmp);\n-    }\n-}\")\n+  {\n+    if (CONST_INT_P (operands[2]))\n+      {\n+        operands[2] = gen_int_mode (INTVAL (operands[2]), HImode);\n+\n+        if (can_create_pseudo_p()\n+            && !stack_register_operand (operands[0], HImode)\n+            && !stack_register_operand (operands[1], HImode)\n+            && !d_register_operand (operands[0], HImode)\n+            && !d_register_operand (operands[1], HImode))\n+          {\n+            emit_insn (gen_addhi3_clobber (operands[0], operands[1], operands[2]));\n+            DONE;\n+          }\n+      }\n+  })\n \n \n (define_insn \"*addhi3_zero_extend\"\n@@ -803,20 +812,77 @@\n    (set_attr \"adjust_len\" \"addto_sp\")])\n \n (define_insn \"*addhi3\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,!w,!w,d,r,r\")\n- \t(plus:HI\n- \t (match_operand:HI 1 \"register_operand\" \"%0,0,0,0,0,0\")\n- \t (match_operand:HI 2 \"nonmemory_operand\" \"r,I,J,i,P,N\")))]\n+  [(set (match_operand:HI 0 \"register_operand\"          \"=r,d,d\")\n+        (plus:HI (match_operand:HI 1 \"register_operand\" \"%0,0,0\")\n+                 (match_operand:HI 2 \"nonmemory_operand\" \"r,s,n\")))]\n   \"\"\n-  \"@\n- \tadd %A0,%A2\\;adc %B0,%B2\n- \tadiw %A0,%2\n- \tsbiw %A0,%n2\n- \tsubi %A0,lo8(-(%2))\\;sbci %B0,hi8(-(%2))\n- \tsec\\;adc %A0,__zero_reg__\\;adc %B0,__zero_reg__\n- \tsec\\;sbc %A0,__zero_reg__\\;sbc %B0,__zero_reg__\"\n-  [(set_attr \"length\" \"2,1,1,2,3,3\")\n-   (set_attr \"cc\" \"set_n,set_czn,set_czn,set_czn,set_n,set_n\")])\n+  {\n+    static const char * const asm_code[] =\n+      {\n+        \"add %A0,%A2\\;adc %B0,%B2\",\n+        \"subi %A0,lo8(-(%2))\\;sbci %B0,hi8(-(%2))\",\n+        \"\"\n+      };\n+\n+    if (*asm_code[which_alternative])\n+      return asm_code[which_alternative];\n+\n+    return avr_out_plus_noclobber (operands, NULL, NULL);\n+  }\n+  [(set_attr \"length\" \"2,2,2\")\n+   (set_attr \"adjust_len\" \"*,*,out_plus_noclobber\")\n+   (set_attr \"cc\" \"set_n,set_czn,out_plus_noclobber\")])\n+\n+;; Adding a constant to NO_LD_REGS might have lead to a reload of\n+;; that constant to LD_REGS.  We don't add a scratch to *addhi3\n+;; itself because that insn is special to reload.\n+\n+(define_peephole2 ; addhi3_clobber\n+  [(set (match_operand:HI 0 \"d_register_operand\" \"\")\n+        (match_operand:HI 1 \"const_int_operand\" \"\"))\n+   (set (match_operand:HI 2 \"l_register_operand\" \"\")\n+        (plus:HI (match_dup 2)\n+                 (match_dup 0)))]\n+  \"peep2_reg_dead_p (2, operands[0])\"\n+  [(parallel [(set (match_dup 2)\n+                   (plus:HI (match_dup 2)\n+                            (match_dup 1)))\n+              (clobber (match_dup 3))])]\n+  {\n+    operands[3] = simplify_gen_subreg (QImode, operands[0], HImode, 0);\n+  })\n+\n+;; Same, but with reload to NO_LD_REGS\n+;; Combine *reload_inhi with *addhi3\n+\n+(define_peephole2 ; addhi3_clobber\n+  [(parallel [(set (match_operand:HI 0 \"l_register_operand\" \"\")\n+                   (match_operand:HI 1 \"const_int_operand\" \"\"))\n+              (clobber (match_operand:QI 2 \"d_register_operand\" \"\"))])\n+   (set (match_operand:HI 3 \"l_register_operand\" \"\")\n+        (plus:HI (match_dup 3)\n+                 (match_dup 0)))]\n+  \"peep2_reg_dead_p (2, operands[0])\"\n+  [(parallel [(set (match_dup 3)\n+                   (plus:HI (match_dup 3)\n+                            (match_dup 1)))\n+              (clobber (match_dup 2))])])\n+\n+(define_insn \"addhi3_clobber\"\n+  [(set (match_operand:HI 0 \"register_operand\"           \"=d,l\")\n+        (plus:HI (match_operand:HI 1 \"register_operand\"  \"%0,0\")\n+                 (match_operand:HI 2 \"const_int_operand\"  \"n,n\")))\n+   (clobber (match_scratch:QI 3                          \"=X,&d\"))]\n+  \"\"\n+  {\n+    gcc_assert (REGNO (operands[0]) == REGNO (operands[1]));\n+    \n+    return avr_out_plus (operands, NULL, NULL);\n+  }\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"adjust_len\" \"out_plus\")\n+   (set_attr \"cc\" \"out_plus\")])\n+\n \n (define_insn \"addsi3\"\n   [(set (match_operand:SI 0 \"register_operand\"          \"=r,d ,d,r\")\n@@ -3606,12 +3672,8 @@\n                       (if_then_else (match_test \"!AVR_HAVE_JMP_CALL\")\n                                     (const_int 1)\n                                     (const_int 2))\n-                      (if_then_else (and (ge (minus (pc)\n-                                                    (match_dup 0))\n-                                             (const_int -2047))\n-                                         (le (minus (pc)\n-                                                    (match_dup 0))\n-                                             (const_int 2047)))\n+                      (if_then_else (and (ge (minus (pc) (match_dup 0)) (const_int -2047))\n+                                         (le (minus (pc) (match_dup 0)) (const_int 2047)))\n                                     (const_int 1)\n                                     (const_int 2))))\n    (set_attr \"cc\" \"none\")])"}]}