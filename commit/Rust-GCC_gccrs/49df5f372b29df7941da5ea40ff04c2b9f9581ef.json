{"sha": "49df5f372b29df7941da5ea40ff04c2b9f9581ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDlkZjVmMzcyYjI5ZGY3OTQxZGE1ZWE0MGZmMDRjMmI5Zjk1ODFlZg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-06T00:24:40Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-06T00:24:40Z"}, "message": "(main): Handle -U before -D (and -A).\n\n(rescan): If traditional, recognize # only at bol.\n\n(main) [VMS]: Use .obj, not .o, in dependencies output.\n\n(do_include): Delete unreachable goto after '\"' case.\n\n(do_xifdef): Skip all kinds of whitespace, in bof test.\n\nFrom-SVN: r2333", "tree": {"sha": "3e785ec32cf448491cec9cbd40eb7bf53e5e54e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e785ec32cf448491cec9cbd40eb7bf53e5e54e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49df5f372b29df7941da5ea40ff04c2b9f9581ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49df5f372b29df7941da5ea40ff04c2b9f9581ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49df5f372b29df7941da5ea40ff04c2b9f9581ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49df5f372b29df7941da5ea40ff04c2b9f9581ef/comments", "author": null, "committer": null, "parents": [{"sha": "7a0347fff32015826a7da2704442a80979f43e10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a0347fff32015826a7da2704442a80979f43e10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a0347fff32015826a7da2704442a80979f43e10"}], "stats": {"total": 79, "additions": 39, "deletions": 40}, "files": [{"sha": "5e055bed6d07ec88fd3bfd4122d456698eae8597", "filename": "gcc/cccp.c", "status": "modified", "additions": 39, "deletions": 40, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49df5f372b29df7941da5ea40ff04c2b9f9581ef/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49df5f372b29df7941da5ea40ff04c2b9f9581ef/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=49df5f372b29df7941da5ea40ff04c2b9f9581ef", "patch": "@@ -1447,6 +1447,14 @@ main (argc, argv)\n \n   /* Now handle the command line options.  */\n \n+  /* Do undefines specified with -U.  */\n+  for (i = 1; i < argc; i++)\n+    if (pend_undefs[i]) {\n+      if (debug_output)\n+        output_line_command (fp, &outbuf, 0, same_file);\n+      make_undef (pend_undefs[i], &outbuf);\n+    }\n+\n   /* Do assertions specified with -A.  */\n   for (i = 1; i < argc; i++)\n     if (pend_assertions[i])\n@@ -1460,14 +1468,6 @@ main (argc, argv)\n       make_definition (pend_defs[i], &outbuf);\n     }\n \n-  /* Do undefines specified with -U.  */\n-  for (i = 1; i < argc; i++)\n-    if (pend_undefs[i]) {\n-      if (debug_output)\n-        output_line_command (fp, &outbuf, 0, same_file);\n-      make_undef (pend_undefs[i], &outbuf);\n-    }\n-\n   done_initializing = 1;\n \n   { /* read the appropriate environment variable and if it exists\n@@ -1697,7 +1697,11 @@ main (argc, argv)\n       else\n \tdeps_output (p, 0);\n       /* Supply our own suffix.  */\n+#ifndef VMS\n       deps_output (\".o : \", 0);\n+#else\n+      deps_output (\".obj : \", 0);\n+#endif\n       deps_output (in_fname, 0);\n       deps_output (\" \", 0);\n     }\n@@ -2270,23 +2274,25 @@ do { ip = &instack[indepth];\t\t\\\n \t   and backslash-newlines, and see if we reach this #.\n \t   If not, this # is not special.  */\n \tbp = beg_of_line;\n-\twhile (1) {\n-\t  if (is_hor_space[*bp])\n-\t    bp++;\n-\t  else if (*bp == '\\\\' && bp[1] == '\\n')\n-\t    bp += 2;\n-\t  else if (*bp == '/' && bp[1] == '*') {\n-\t    bp += 2;\n-\t    while (!(*bp == '*' && bp[1] == '/'))\n+\t/* If -traditional, require # to be at beginning of line.  */\n+\tif (!traditional)\n+\t  while (1) {\n+\t    if (is_hor_space[*bp])\n \t      bp++;\n-\t    bp += 2;\n-\t  }\n-\t  else if ((cplusplus || objc) && *bp == '/' && bp[1] == '/') {\n-\t    bp += 2;\n-\t    while (*bp++ != '\\n') ;\n+\t    else if (*bp == '\\\\' && bp[1] == '\\n')\n+\t      bp += 2;\n+\t    else if (*bp == '/' && bp[1] == '*') {\n+\t      bp += 2;\n+\t      while (!(*bp == '*' && bp[1] == '/'))\n+\t\tbp++;\n+\t      bp += 2;\n+\t    }\n+\t    else if ((cplusplus || objc) && *bp == '/' && bp[1] == '/') {\n+\t      bp += 2;\n+\t      while (*bp++ != '\\n') ;\n+\t    }\n+\t    else break;\n \t  }\n-\t  else break;\n-\t}\n \tif (bp + 1 != ibp)\n \t  goto randomchar;\n       }\n@@ -3735,7 +3741,6 @@ do_include (buf, limit, op, keyword)\n \t}\n       break;\n     }\n-    goto fail;\n \n   case '<':\n     fend = fbeg;\n@@ -6082,22 +6087,16 @@ do_xifdef (buf, limit, op, keyword)\n     U_CHAR *p = ip->buf;\n     while (p != directive_start) {\n       char c = *p++;\n-      switch (c) {\n-      case ' ':\n-      case '\\t':\n-      case '\\n':\n-\tbreak;\n-      case '/':\n-\tif (p != ip->bufp && *p == '*') {\n-\t  /* Skip this comment.  */\n-\t  int junk;\n-\t  U_CHAR *save_bufp = ip->bufp;\n-\t  ip->bufp = p + 1;\n-\t  p = skip_to_end_of_comment (ip, &junk, 1);\n-\t  ip->bufp = save_bufp;\n-\t}\n-\tbreak;\n-      default:\n+      if (is_space[c])\n+\t;\n+      else if (c == '/' && p != ip->bufp && *p == '*') {\n+\t/* Skip this comment.  */\n+\tint junk;\n+\tU_CHAR *save_bufp = ip->bufp;\n+\tip->bufp = p + 1;\n+\tp = skip_to_end_of_comment (ip, &junk, 1);\n+\tip->bufp = save_bufp;\n+      } else {\n \tgoto fail;\n       }\n     }"}]}