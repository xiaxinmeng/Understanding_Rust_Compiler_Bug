{"sha": "ae273ffac99cb75d832a11a83fd63291bb74cbdc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWUyNzNmZmFjOTljYjc1ZDgzMmExMWE4M2ZkNjMyOTFiYjc0Y2JkYw==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-02-10T10:33:33Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-02-10T18:10:57Z"}, "message": "Support Break without label and expression\n\nThis reuses GENERICS LOOP_EXPR and EXIT_EXPR to implement the infinite\nloop.\n\nAddresses: #106 #108", "tree": {"sha": "a3d9a44ebe75c96fac728c8f4ed3d0796664ed29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3d9a44ebe75c96fac728c8f4ed3d0796664ed29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae273ffac99cb75d832a11a83fd63291bb74cbdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae273ffac99cb75d832a11a83fd63291bb74cbdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae273ffac99cb75d832a11a83fd63291bb74cbdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae273ffac99cb75d832a11a83fd63291bb74cbdc/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "016c40bedc7e3f53e2c413895f77c0d9f723eb3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/016c40bedc7e3f53e2c413895f77c0d9f723eb3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/016c40bedc7e3f53e2c413895f77c0d9f723eb3c"}], "stats": {"total": 326, "additions": 262, "deletions": 64}, "files": [{"sha": "b61c8c30f1450553203439fbbfbee06a416cba43", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=ae273ffac99cb75d832a11a83fd63291bb74cbdc", "patch": "@@ -1139,11 +1139,14 @@ class Lifetime : public TypeParamBound\n \n   Location locus;\n \n+  NodeId node_id;\n+\n public:\n   // Constructor\n   Lifetime (LifetimeType type, std::string name = std::string (),\n \t    Location locus = Location ())\n-    : lifetime_type (type), lifetime_name (std::move (name)), locus (locus)\n+    : lifetime_type (type), lifetime_name (std::move (name)), locus (locus),\n+      node_id (Analysis::Mappings::get ()->get_next_node_id ())\n   {}\n \n   // Creates an \"error\" lifetime.\n@@ -1159,6 +1162,14 @@ class Lifetime : public TypeParamBound\n \n   void accept_vis (ASTVisitor &vis) override;\n \n+  LifetimeType get_lifetime_type () { return lifetime_type; }\n+\n+  Location get_locus () { return locus; }\n+\n+  std::string get_lifetime_name () const { return lifetime_name; }\n+\n+  NodeId get_node_id () const { return node_id; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "52e3abc4ee200567f662d1c28e6ba98479d57242", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=ae273ffac99cb75d832a11a83fd63291bb74cbdc", "patch": "@@ -3103,6 +3103,8 @@ class BreakExpr : public ExprWithoutBlock\n     return break_expr;\n   }\n \n+  Lifetime &get_label () { return label; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -3670,11 +3672,14 @@ class LoopLabel /*: public Node*/\n   Lifetime label; // or type LIFETIME_OR_LABEL\n   Location locus;\n \n+  NodeId node_id;\n+\n public:\n   std::string as_string () const;\n \n   LoopLabel (Lifetime loop_label, Location locus = Location ())\n-    : label (std::move (loop_label)), locus (locus)\n+    : label (std::move (loop_label)), locus (locus),\n+      node_id (Analysis::Mappings::get ()->get_next_node_id ())\n   {}\n \n   // Returns whether the LoopLabel is in an error state.\n@@ -3684,6 +3689,10 @@ class LoopLabel /*: public Node*/\n   static LoopLabel error () { return LoopLabel (Lifetime::error ()); }\n \n   Location get_locus () const { return locus; }\n+\n+  Lifetime &get_lifetime () { return label; }\n+\n+  NodeId get_node_id () const { return node_id; }\n };\n \n // Base loop expression AST node - aka LoopExpr\n@@ -3743,6 +3752,8 @@ class BaseLoopExpr : public ExprWithBlock\n public:\n   bool has_loop_label () const { return !loop_label.is_error (); }\n \n+  LoopLabel &get_loop_label () { return loop_label; }\n+\n   Location get_locus () const { return locus; }\n   Location get_locus_slow () const override { return get_locus (); }\n "}, {"sha": "92cb3928dc015ae414d495eb370e7ccea0e50490", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=ae273ffac99cb75d832a11a83fd63291bb74cbdc", "patch": "@@ -582,21 +582,25 @@ class CompileExpr : public HIRCompileBase\n \n   void visit (HIR::LoopExpr &expr)\n   {\n-    // loop_start:\n-    //      <loop_body>\n-    //   goto loop_start;\n     fncontext fnctx = ctx->peek_fn ();\n-    Blabel *loop_start\n-      = ctx->get_backend ()->label (fnctx.fndecl, \"\", expr.get_locus ());\n-    Bstatement *label_decl_stmt\n-      = ctx->get_backend ()->label_definition_statement (loop_start);\n-    ctx->add_statement (label_decl_stmt);\n-\n-    translated = CompileExpr::Compile (expr.get_loop_block ().get (), ctx);\n+    Bblock *code_block\n+      = CompileBlock::compile (expr.get_loop_block ().get (), ctx, nullptr);\n+    Bexpression *loop_expr\n+      = ctx->get_backend ()->loop_expression (code_block, expr.get_locus ());\n+    Bstatement *loop_stmt\n+      = ctx->get_backend ()->expression_statement (fnctx.fndecl, loop_expr);\n+    ctx->add_statement (loop_stmt);\n+  }\n \n-    Bstatement *goto_loop_start_stmt\n-      = ctx->get_backend ()->goto_statement (loop_start, Location ());\n-    ctx->add_statement (goto_loop_start_stmt);\n+  void visit (HIR::BreakExpr &expr)\n+  {\n+    fncontext fnctx = ctx->peek_fn ();\n+    Bexpression *exit_expr = ctx->get_backend ()->exit_expression (\n+      ctx->get_backend ()->boolean_constant_expression (true),\n+      expr.get_locus ());\n+    Bstatement *break_stmt\n+      = ctx->get_backend ()->expression_statement (fnctx.fndecl, exit_expr);\n+    ctx->add_statement (break_stmt);\n   }\n \n private:"}, {"sha": "dd87d4528da079899dddb25a0a6ddb78384df06e", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=ae273ffac99cb75d832a11a83fd63291bb74cbdc", "patch": "@@ -236,23 +236,28 @@ CompileBlock::visit (HIR::BlockExpr &expr)\n       // the previous passes will ensure this is a valid return\n       // dead code elimination should remove any bad trailing expressions\n       Bexpression *compiled_expr = CompileExpr::Compile (expr.expr.get (), ctx);\n-      rust_assert (compiled_expr != nullptr);\n-\n-      if (result == nullptr)\n-\t{\n-\t  Bstatement *final_stmt\n-\t    = ctx->get_backend ()->expression_statement (fnctx.fndecl,\n-\t\t\t\t\t\t\t compiled_expr);\n-\t  ctx->add_statement (final_stmt);\n-\t}\n-      else\n+      if (compiled_expr != nullptr)\n \t{\n-\t  Bexpression *result_reference = ctx->get_backend ()->var_expression (\n-\t    result, expr.get_final_expr ()->get_locus_slow ());\n-\n-\t  Bstatement *assignment = ctx->get_backend ()->assignment_statement (\n-\t    fnctx.fndecl, result_reference, compiled_expr, expr.get_locus ());\n-\t  ctx->add_statement (assignment);\n+\t  if (result == nullptr)\n+\t    {\n+\t      Bstatement *final_stmt\n+\t\t= ctx->get_backend ()->expression_statement (fnctx.fndecl,\n+\t\t\t\t\t\t\t     compiled_expr);\n+\t      ctx->add_statement (final_stmt);\n+\t    }\n+\t  else\n+\t    {\n+\t      Bexpression *result_reference\n+\t\t= ctx->get_backend ()->var_expression (\n+\t\t  result, expr.get_final_expr ()->get_locus_slow ());\n+\n+\t      Bstatement *assignment\n+\t\t= ctx->get_backend ()->assignment_statement (fnctx.fndecl,\n+\t\t\t\t\t\t\t     result_reference,\n+\t\t\t\t\t\t\t     compiled_expr,\n+\t\t\t\t\t\t\t     expr.get_locus ());\n+\t      ctx->add_statement (assignment);\n+\t    }\n \t}\n     }\n "}, {"sha": "95d93d0d13ca72dbfa31587c896ba49b2c0e04bc", "filename": "gcc/rust/hir/rust-ast-lower-base.h", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h?ref=ae273ffac99cb75d832a11a83fd63291bb74cbdc", "patch": "@@ -243,6 +243,43 @@ class ASTLoweringBase : public AST::ASTVisitor\n   ASTLoweringBase () : mappings (Analysis::Mappings::get ()) {}\n \n   Analysis::Mappings *mappings;\n+\n+  HIR::Lifetime lower_lifetime (AST::Lifetime &lifetime)\n+  {\n+    HIR::Lifetime::LifetimeType type = HIR::Lifetime::LifetimeType::NAMED;\n+    switch (lifetime.get_lifetime_type ())\n+      {\n+      case AST::Lifetime::LifetimeType::NAMED:\n+\ttype = HIR::Lifetime::LifetimeType::NAMED;\n+\tbreak;\n+      case AST::Lifetime::LifetimeType::STATIC:\n+\ttype = HIR::Lifetime::LifetimeType::STATIC;\n+\tbreak;\n+      case AST::Lifetime::LifetimeType::WILDCARD:\n+\ttype = HIR::Lifetime::LifetimeType::WILDCARD;\n+\tbreak;\n+      }\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, lifetime.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\n+    return HIR::Lifetime (mapping, type, lifetime.get_lifetime_name (),\n+\t\t\t  lifetime.get_locus ());\n+  }\n+\n+  HIR::LoopLabel lower_loop_label (AST::LoopLabel &loop_label)\n+  {\n+    HIR::Lifetime life = lower_lifetime (loop_label.get_lifetime ());\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, loop_label.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\n+    return HIR::LoopLabel (mapping, std::move (life), loop_label.get_locus ());\n+  }\n };\n \n } // namespace HIR"}, {"sha": "c945042e96f2d79fe02a9e941aade3c8d07981a9", "filename": "gcc/rust/hir/rust-ast-lower-block.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h?ref=ae273ffac99cb75d832a11a83fd63291bb74cbdc", "patch": "@@ -141,6 +141,8 @@ class ASTLoweringExprWithBlock : public ASTLoweringBase\n       = ASTLoweringBlock::translate (expr.get_loop_block ().get (),\n \t\t\t\t     &terminated);\n \n+    HIR::LoopLabel loop_label = lower_loop_label (expr.get_loop_label ());\n+\n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n@@ -149,7 +151,7 @@ class ASTLoweringExprWithBlock : public ASTLoweringBase\n     translated\n       = new HIR::LoopExpr (mapping,\n \t\t\t   std::unique_ptr<HIR::BlockExpr> (loop_block),\n-\t\t\t   expr.get_locus (), HIR::LoopLabel::error (),\n+\t\t\t   expr.get_locus (), std::move (loop_label),\n \t\t\t   std::move (outer_attribs));\n   }\n "}, {"sha": "e10448fea6a853450900de06d59e152abcac7a89", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=ae273ffac99cb75d832a11a83fd63291bb74cbdc", "patch": "@@ -74,8 +74,6 @@ class ASTLowerPathInExpression : public ASTLoweringBase\n     return compiler.translated;\n   }\n \n-  ~ASTLowerPathInExpression () {}\n-\n   void visit (AST::PathInExpression &expr)\n   {\n     std::vector<HIR::PathExprSegment> path_segments;\n@@ -702,9 +700,30 @@ class ASTLoweringExpr : public ASTLoweringBase\n     translated = ASTLoweringExprWithBlock::translate (&expr, &terminated);\n   }\n \n+  void visit (AST::BreakExpr &expr)\n+  {\n+    std::vector<HIR::Attribute> outer_attribs;\n+    HIR::Lifetime break_label = lower_lifetime (expr.get_label ());\n+    HIR::Expr *break_expr\n+      = expr.has_break_expr ()\n+\t  ? ASTLoweringExpr::translate (expr.get_break_expr ().get ())\n+\t  : nullptr;\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\n+    translated = new HIR::BreakExpr (mapping, expr.get_locus (),\n+\t\t\t\t     std ::move (break_label),\n+\t\t\t\t     std::unique_ptr<HIR::Expr> (break_expr),\n+\t\t\t\t     std::move (outer_attribs));\n+  }\n+\n private:\n   ASTLoweringExpr ()\n-    : translated (nullptr), translated_array_elems (nullptr), terminated (false)\n+    : ASTLoweringBase (), translated (nullptr),\n+      translated_array_elems (nullptr), terminated (false)\n   {}\n \n   HIR::Expr *translated;"}, {"sha": "fe884bb9d8dd6313797bdd4c5c6da06132660544", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=ae273ffac99cb75d832a11a83fd63291bb74cbdc", "patch": "@@ -2712,8 +2712,7 @@ class ContinueExpr : public ExprWithoutBlock\n   bool has_label () const { return !label.is_error (); }\n \n   // Constructor for a ContinueExpr with a label.\n-  ContinueExpr (Analysis::NodeMapping mappings, Location locus,\n-\t\tLifetime label = Lifetime::error (),\n+  ContinueExpr (Analysis::NodeMapping mappings, Location locus, Lifetime label,\n \t\tstd::vector<Attribute> outer_attribs\n \t\t= std::vector<Attribute> ())\n     : ExprWithoutBlock (std::move (mappings), std::move (outer_attribs)),\n@@ -2765,7 +2764,7 @@ class BreakExpr : public ExprWithoutBlock\n \n   // Constructor for a break expression\n   BreakExpr (Analysis::NodeMapping mappings, Location locus,\n-\t     Lifetime break_label = Lifetime::error (),\n+\t     Lifetime break_label,\n \t     std::unique_ptr<Expr> expr_in_break = nullptr,\n \t     std::vector<Attribute> outer_attribs = std::vector<Attribute> ())\n     : ExprWithoutBlock (std::move (mappings), std::move (outer_attribs)),\n@@ -2803,6 +2802,10 @@ class BreakExpr : public ExprWithoutBlock\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  Lifetime &get_label () { return label; }\n+\n+  std::unique_ptr<Expr> &get_expr () { return break_expr; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -3266,20 +3269,21 @@ class LoopLabel /*: public Node*/\n \n   Location locus;\n \n+  Analysis::NodeMapping mappings;\n+\n public:\n   std::string as_string () const;\n \n-  LoopLabel (Lifetime loop_label, Location locus = Location ())\n-    : label (std::move (loop_label)), locus (locus)\n+  LoopLabel (Analysis::NodeMapping mapping, Lifetime loop_label, Location locus)\n+    : label (std::move (loop_label)), locus (locus), mappings (mapping)\n   {}\n \n   // Returns whether the LoopLabel is in an error state.\n   bool is_error () const { return label.is_error (); }\n \n-  // Creates an error state LoopLabel.\n-  static LoopLabel error () { return LoopLabel (Lifetime::error ()); }\n-\n   Location get_locus () const { return locus; }\n+\n+  Analysis::NodeMapping &get_mappings () { return mappings; }\n };\n \n // Base loop expression HIR node - aka LoopExpr\n@@ -3299,7 +3303,7 @@ class BaseLoopExpr : public ExprWithBlock\n   // Constructor for BaseLoopExpr\n   BaseLoopExpr (Analysis::NodeMapping mappings,\n \t\tstd::unique_ptr<BlockExpr> loop_block, Location locus,\n-\t\tLoopLabel loop_label = LoopLabel::error (),\n+\t\tLoopLabel loop_label,\n \t\tstd::vector<Attribute> outer_attribs\n \t\t= std::vector<Attribute> ())\n     : ExprWithBlock (std::move (mappings), std::move (outer_attribs)),\n@@ -3347,7 +3351,7 @@ class LoopExpr : public BaseLoopExpr\n   // Constructor for LoopExpr\n   LoopExpr (Analysis::NodeMapping mappings,\n \t    std::unique_ptr<BlockExpr> loop_block, Location locus,\n-\t    LoopLabel loop_label = LoopLabel::error (),\n+\t    LoopLabel loop_label,\n \t    std::vector<Attribute> outer_attribs = std::vector<Attribute> ())\n     : BaseLoopExpr (std::move (mappings), std::move (loop_block), locus,\n \t\t    std::move (loop_label), std::move (outer_attribs))\n@@ -3380,7 +3384,7 @@ class WhileLoopExpr : public BaseLoopExpr\n   WhileLoopExpr (Analysis::NodeMapping mappings,\n \t\t std::unique_ptr<Expr> loop_condition,\n \t\t std::unique_ptr<BlockExpr> loop_block, Location locus,\n-\t\t LoopLabel loop_label = LoopLabel::error (),\n+\t\t LoopLabel loop_label,\n \t\t std::vector<Attribute> outer_attribs\n \t\t = std::vector<Attribute> ())\n     : BaseLoopExpr (std::move (mappings), std::move (loop_block), locus,\n@@ -3442,7 +3446,7 @@ class WhileLetLoopExpr : public BaseLoopExpr\n \t\t    std::vector<std::unique_ptr<Pattern> > match_arm_patterns,\n \t\t    std::unique_ptr<Expr> condition,\n \t\t    std::unique_ptr<BlockExpr> loop_block, Location locus,\n-\t\t    LoopLabel loop_label = LoopLabel::error (),\n+\t\t    LoopLabel loop_label,\n \t\t    std::vector<Attribute> outer_attribs\n \t\t    = std::vector<Attribute> ())\n     : BaseLoopExpr (std::move (mappings), std::move (loop_block), locus,\n@@ -3515,7 +3519,7 @@ class ForLoopExpr : public BaseLoopExpr\n \t       std::unique_ptr<Pattern> loop_pattern,\n \t       std::unique_ptr<Expr> iterator_expr,\n \t       std::unique_ptr<BlockExpr> loop_body, Location locus,\n-\t       LoopLabel loop_label = LoopLabel::error (),\n+\t       LoopLabel loop_label,\n \t       std::vector<Attribute> outer_attribs = std::vector<Attribute> ())\n     : BaseLoopExpr (std::move (mappings), std::move (loop_body), locus,\n \t\t    std::move (loop_label), std::move (outer_attribs)),"}, {"sha": "c0d6d0f14642295e86cebb481b8f30e16e9a46a9", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=ae273ffac99cb75d832a11a83fd63291bb74cbdc", "patch": "@@ -324,7 +324,8 @@ struct SelfParam\n   // Type-based self parameter (not ref, no lifetime)\n   SelfParam (Analysis::NodeMapping mappings, std::unique_ptr<Type> type,\n \t     bool is_mut, Location locus)\n-    : has_ref (false), is_mut (is_mut), lifetime (Lifetime::error ()),\n+    : has_ref (false), is_mut (is_mut),\n+      lifetime (Lifetime (mappings, Lifetime::LifetimeType::NAMED, \"\", locus)),\n       type (std::move (type)), locus (locus), mappings (mappings)\n   {}\n "}, {"sha": "746e3e2070ae5136b76bb763e94286dbd24616c5", "filename": "gcc/rust/hir/tree/rust-hir-type.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h?ref=ae273ffac99cb75d832a11a83fd63291bb74cbdc", "patch": "@@ -531,7 +531,7 @@ class ReferenceType : public TypeNoBounds\n   // Constructor\n   ReferenceType (Analysis::NodeMapping mappings, bool is_mut,\n \t\t std::unique_ptr<TypeNoBounds> type_no_bounds, Location locus,\n-\t\t Lifetime lifetime = Lifetime::error ())\n+\t\t Lifetime lifetime)\n     : TypeNoBounds (mappings), lifetime (std::move (lifetime)),\n       has_mut (is_mut), type (std::move (type_no_bounds)), locus (locus)\n   {}"}, {"sha": "1567215ea17e4dded1c34fde2fdd76d1c6baf4af", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=ae273ffac99cb75d832a11a83fd63291bb74cbdc", "patch": "@@ -1060,16 +1060,16 @@ class Lifetime : public TypeParamBound\n \n   Location locus;\n \n+  Analysis::NodeMapping mappings;\n+\n public:\n   // Constructor\n-  Lifetime (LifetimeType type, std::string name = std::string (),\n-\t    Location locus = Location ())\n-    : lifetime_type (type), lifetime_name (std::move (name)), locus (locus)\n+  Lifetime (Analysis::NodeMapping mapping, LifetimeType type, std::string name,\n+\t    Location locus)\n+    : lifetime_type (type), lifetime_name (std::move (name)), locus (locus),\n+      mappings (mapping)\n   {}\n \n-  // Creates an \"error\" lifetime.\n-  static Lifetime error () { return Lifetime (NAMED, std::string (\"\")); }\n-\n   // Returns true if the lifetime is in an error state.\n   bool is_error () const\n   {\n@@ -1080,6 +1080,14 @@ class Lifetime : public TypeParamBound\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  std::string get_name () const { return lifetime_name; }\n+\n+  LifetimeType get_lifetime_type () const { return lifetime_type; }\n+\n+  Location get_locus () const { return locus; }\n+\n+  Analysis::NodeMapping get_mappings () const { return mappings; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -1133,12 +1141,6 @@ class LifetimeParam : public GenericParam\n   // Returns whether the lifetime param has an outer attribute.\n   bool has_outer_attribute () const { return !outer_attr.is_empty (); }\n \n-  // Creates an error state lifetime param.\n-  static LifetimeParam create_error ()\n-  {\n-    return LifetimeParam (Lifetime::error ());\n-  }\n-\n   // Returns whether the lifetime param is in an error state.\n   bool is_error () const { return lifetime.is_error (); }\n "}, {"sha": "9cfa04d59a075de3983eb3aa5bb7227281efff45", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.h", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h?ref=ae273ffac99cb75d832a11a83fd63291bb74cbdc", "patch": "@@ -243,9 +243,60 @@ class ResolveExpr : public ResolverBase\n \n   void visit (AST::LoopExpr &expr)\n   {\n+    if (expr.has_loop_label ())\n+      {\n+\tauto label = expr.get_loop_label ();\n+\tif (label.get_lifetime ().get_lifetime_type ()\n+\t    != AST::Lifetime::LifetimeType::NAMED)\n+\t  {\n+\t    rust_error_at (label.get_locus (),\n+\t\t\t   \"Labels must be a named lifetime value\");\n+\t    return;\n+\t  }\n+\n+\tauto label_name = label.get_lifetime ().get_lifetime_name ();\n+\tauto label_lifetime_node_id = label.get_lifetime ().get_node_id ();\n+\tresolver->get_label_scope ().insert (\n+\t  label_name, label_lifetime_node_id, label.get_locus (), false,\n+\t  [&] (std::string, NodeId, Location locus) -> void {\n+\t    rust_error_at (label.get_locus (),\n+\t\t\t   \"label redefined multiple times\");\n+\t    rust_error_at (locus, \"was defined here\");\n+\t  });\n+\tresolver->insert_new_definition (label_lifetime_node_id,\n+\t\t\t\t\t Definition{label_lifetime_node_id,\n+\t\t\t\t\t\t    label.get_node_id ()});\n+      }\n     ResolveExpr::go (expr.get_loop_block ().get (), expr.get_node_id ());\n   }\n \n+  void visit (AST::BreakExpr &expr)\n+  {\n+    if (expr.has_label ())\n+      {\n+\tauto label = expr.get_label ();\n+\tif (label.get_lifetime_type () != AST::Lifetime::LifetimeType::NAMED)\n+\t  {\n+\t    rust_error_at (label.get_locus (),\n+\t\t\t   \"Labels must be a named lifetime value\");\n+\t    return;\n+\t  }\n+\n+\tNodeId resolved_node = UNKNOWN_NODEID;\n+\tif (!resolver->get_label_scope ().lookup (label.get_lifetime_name (),\n+\t\t\t\t\t\t  &resolved_node))\n+\t  {\n+\t    rust_error_at (expr.get_label ().get_locus (),\n+\t\t\t   \"failed to resolve label\");\n+\t    return;\n+\t  }\n+\tresolver->insert_resolved_label (label.get_node_id (), resolved_node);\n+      }\n+\n+    if (expr.has_break_expr ())\n+      ResolveExpr::go (expr.get_break_expr ().get (), expr.get_node_id ());\n+  }\n+\n private:\n   ResolveExpr (NodeId parent) : ResolverBase (parent) {}\n };"}, {"sha": "213d14168edddb40b89aa9408b53bda8fd5ef6b3", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=ae273ffac99cb75d832a11a83fd63291bb74cbdc", "patch": "@@ -252,7 +252,7 @@ Resolver::insert_resolved_label (NodeId refId, NodeId defId)\n   auto it = resolved_labels.find (refId);\n   rust_assert (it == resolved_labels.end ());\n \n-  resolved_types[refId] = defId;\n+  resolved_labels[refId] = defId;\n   get_label_scope ().append_reference_for_def (refId, defId);\n }\n "}, {"sha": "50e8728fd48bae873d0d9ed2cf3714dd61ca3aba", "filename": "gcc/rust/rust-backend.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Frust-backend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Frust-backend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-backend.h?ref=ae273ffac99cb75d832a11a83fd63291bb74cbdc", "patch": "@@ -425,6 +425,12 @@ class Backend\n \t\t\t\t    Location)\n     = 0;\n \n+  // infinite loop expressions\n+  virtual Bexpression *loop_expression (Bblock *body, Location);\n+\n+  // exit expressions\n+  virtual Bexpression *exit_expression (Bexpression *condition, Location);\n+\n   // Create a switch statement where the case values are constants.\n   // CASES and STATEMENTS must have the same number of entries.  If\n   // VALUE matches any of the list in CASES[i], which will all be"}, {"sha": "82ebb988a0ff569ee2c77b9e62da2e2a88863c6d", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=ae273ffac99cb75d832a11a83fd63291bb74cbdc", "patch": "@@ -326,6 +326,10 @@ class Gcc_backend : public Backend\n \t\t\t\t\t   Bstatement *except_stmt,\n \t\t\t\t\t   Bstatement *finally_stmt, Location);\n \n+  Bexpression *loop_expression (Bblock *body, Location);\n+\n+  Bexpression *exit_expression (Bexpression *condition, Location);\n+\n   // Blocks.\n \n   Bblock *block (Bfunction *, Bblock *, const std::vector<Bvariable *> &,\n@@ -2201,6 +2205,25 @@ Gcc_backend::if_statement (Bfunction *, Bexpression *condition,\n   return this->make_statement (ret);\n }\n \n+// Loops\n+\n+Bexpression *\n+Gcc_backend::loop_expression (Bblock *body, Location locus)\n+{\n+  tree loop_expr_tree = fold_build1_loc (locus.gcc_location (), LOOP_EXPR,\n+\t\t\t\t\t void_type_node, body->get_tree ());\n+  return this->make_expression (loop_expr_tree);\n+}\n+\n+Bexpression *\n+Gcc_backend::exit_expression (Bexpression *condition, Location locus)\n+{\n+  tree cond_tree = condition->get_tree ();\n+  tree exit_expr_tree = fold_build1_loc (locus.gcc_location (), EXIT_EXPR,\n+\t\t\t\t\t void_type_node, cond_tree);\n+  return this->make_expression (exit_expr_tree);\n+}\n+\n // Switch.\n \n Bstatement *"}, {"sha": "9fe6e4fbd3c2d62030ad3b6ba4abb169df00ea76", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=ae273ffac99cb75d832a11a83fd63291bb74cbdc", "patch": "@@ -39,7 +39,8 @@ class TypeCheckExpr : public TypeCheckBase\n \n     if (resolver.infered == nullptr)\n       {\n-\trust_error_at (expr->get_locus_slow (), \"failed to resolve expression\");\n+\trust_error_at (expr->get_locus_slow (),\n+\t\t       \"failed to type resolve expression\");\n \treturn new TyTy::ErrorType (expr->get_mappings ().get_hirid ());\n       }\n \n@@ -746,6 +747,13 @@ class TypeCheckExpr : public TypeCheckBase\n     infered = TypeCheckExpr::Resolve (expr.get_loop_block ().get ());\n   }\n \n+  void visit (HIR::BreakExpr &expr)\n+  {\n+    infered = expr.has_break_expr ()\n+\t\t? TypeCheckExpr::Resolve (expr.get_expr ().get ())\n+\t\t: new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n+  }\n+\n private:\n   TypeCheckExpr ()\n     : TypeCheckBase (), infered (nullptr), infered_array_elems (nullptr)"}, {"sha": "3de3ea819472fd710926f040b2c4dbb31786db72", "filename": "gcc/testsuite/rust.test/compilable/loop2.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Floop2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae273ffac99cb75d832a11a83fd63291bb74cbdc/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Floop2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Floop2.rs?ref=ae273ffac99cb75d832a11a83fd63291bb74cbdc", "patch": "@@ -0,0 +1,14 @@\n+fn main() {\n+    let mut a = 1;\n+    let mut b = 1;\n+\n+    // first number in Fibonacci sequence over 10:\n+    loop {\n+        if b > 10 {\n+            break;\n+        }\n+        let c = a + b;\n+        a = b;\n+        b = c;\n+    }\n+}"}]}