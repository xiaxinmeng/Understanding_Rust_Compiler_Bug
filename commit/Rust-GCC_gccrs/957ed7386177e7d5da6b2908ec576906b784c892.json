{"sha": "957ed7386177e7d5da6b2908ec576906b784c892", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU3ZWQ3Mzg2MTc3ZTdkNWRhNmIyOTA4ZWM1NzY5MDZiNzg0Yzg5Mg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2019-06-14T16:24:56Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2019-06-14T16:24:56Z"}, "message": "Update preferred_stack_boundary only when expanding function call\n\nlocate_and_pad_parm is called when expanding function call from\ninitialize_argument_information and when generating function body\nfrom assign_parm_find_entry_rtl:\n\n  /* Remember if the outgoing parameter requires extra alignment on the\n     calling function side.  */\n  if (crtl->stack_alignment_needed < boundary)\n    crtl->stack_alignment_needed = boundary;\n  if (crtl->preferred_stack_boundary < boundary)\n    crtl->preferred_stack_boundary = boundary;\n\nstack_alignment_needed and preferred_stack_boundary should be updated\nonly when expanding function call, not when generating function body.\n\nAdd update_stack_alignment_for_call to update stack alignment when\noutgoing parameter is passed in the stack.\n\ngcc/\n\n\tPR rtl-optimization/90765\n\t* calls.c (update_stack_alignment_for_call): New function.\n\t(expand_call): Call update_stack_alignment_for_call when\n\toutgoing parameter is passed in the stack.\n\t(emit_library_call_value_1): Likewise.\n\t* function.c (locate_and_pad_parm): Don't update\n\tstack_alignment_needed and preferred_stack_boundary.\n\ngcc/testsuite/\n\n\tPR rtl-optimization/90765\n\t* gcc.target/i386/pr90765-1.c: New test.\n\t* gcc.target/i386/pr90765-2.c: Likewise.\n\nFrom-SVN: r272296", "tree": {"sha": "35f27a49da3ff03bcfef1dce5de62f8d966ed6d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35f27a49da3ff03bcfef1dce5de62f8d966ed6d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/957ed7386177e7d5da6b2908ec576906b784c892", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/957ed7386177e7d5da6b2908ec576906b784c892", "html_url": "https://github.com/Rust-GCC/gccrs/commit/957ed7386177e7d5da6b2908ec576906b784c892", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/957ed7386177e7d5da6b2908ec576906b784c892/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "84d38abbc982db405cfe7a45ed53c64745da5511", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84d38abbc982db405cfe7a45ed53c64745da5511", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84d38abbc982db405cfe7a45ed53c64745da5511"}], "stats": {"total": 79, "additions": 71, "deletions": 8}, "files": [{"sha": "de1753ea05e41e11dc8a269b2f5fe321871c2dcc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957ed7386177e7d5da6b2908ec576906b784c892/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957ed7386177e7d5da6b2908ec576906b784c892/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=957ed7386177e7d5da6b2908ec576906b784c892", "patch": "@@ -1,4 +1,14 @@\n-2019-06-14  Hongtao Liu  <hongtao.liu@intel.com>\n+2019-06-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR rtl-optimization/90765\n+\t* calls.c (update_stack_alignment_for_call): New function.\n+\t(expand_call): Call update_stack_alignment_for_call when\n+\toutgoing parameter is passed in the stack.\n+\t(emit_library_call_value_1): Likewise.\n+\t* function.c (locate_and_pad_parm): Don't update\n+\tstack_alignment_needed and preferred_stack_boundary.\n+\n+2019-06-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/90877\n \t* config/i386/i386-features.c"}, {"sha": "6ab138e7bb04b21a385cd9095fc014165b8753b5", "filename": "gcc/calls.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957ed7386177e7d5da6b2908ec576906b784c892/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957ed7386177e7d5da6b2908ec576906b784c892/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=957ed7386177e7d5da6b2908ec576906b784c892", "patch": "@@ -3226,6 +3226,19 @@ can_implement_as_sibling_call_p (tree exp,\n   return true;\n }\n \n+/* Update stack alignment when the parameter is passed in the stack\n+   since the outgoing parameter requires extra alignment on the calling\n+   function side. */\n+\n+static void\n+update_stack_alignment_for_call (struct locate_and_pad_arg_data *locate)\n+{\n+  if (crtl->stack_alignment_needed < locate->boundary)\n+    crtl->stack_alignment_needed = locate->boundary;\n+  if (crtl->preferred_stack_boundary < locate->boundary)\n+    crtl->preferred_stack_boundary = locate->boundary;\n+}\n+\n /* Generate all the code for a CALL_EXPR exp\n    and return an rtx for its value.\n    Store the value in TARGET (specified as an rtx) if convenient.\n@@ -3703,6 +3716,12 @@ expand_call (tree exp, rtx target, int ignore)\n   /* Ensure current function's preferred stack boundary is at least\n      what we need.  Stack alignment may also increase preferred stack\n      boundary.  */\n+  for (i = 0; i < num_actuals; i++)\n+    if (reg_parm_stack_space > 0\n+\t|| args[i].reg == 0\n+\t|| args[i].partial != 0\n+\t|| args[i].pass_on_stack)\n+      update_stack_alignment_for_call (&args[i].locate);\n   if (crtl->preferred_stack_boundary < preferred_stack_boundary)\n     crtl->preferred_stack_boundary = preferred_stack_boundary;\n   else\n@@ -4961,6 +4980,12 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n       targetm.calls.function_arg_advance (args_so_far, mode, (tree) 0, true);\n     }\n \n+  for (int i = 0; i < nargs; i++)\n+    if (reg_parm_stack_space > 0\n+\t|| argvec[i].reg == 0\n+\t|| argvec[i].partial != 0)\n+      update_stack_alignment_for_call (&argvec[i].locate);\n+\n   /* If this machine requires an external definition for library\n      functions, write one out.  */\n   assemble_external_libcall (fun);"}, {"sha": "45b65dc0fd2f18e0925e729fc10291c3c25169d9", "filename": "gcc/function.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957ed7386177e7d5da6b2908ec576906b784c892/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957ed7386177e7d5da6b2908ec576906b784c892/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=957ed7386177e7d5da6b2908ec576906b784c892", "patch": "@@ -4021,13 +4021,6 @@ locate_and_pad_parm (machine_mode passed_mode, tree type, int in_regs,\n \t}\n     }\n \n-  /* Remember if the outgoing parameter requires extra alignment on the\n-     calling function side.  */\n-  if (crtl->stack_alignment_needed < boundary)\n-    crtl->stack_alignment_needed = boundary;\n-  if (crtl->preferred_stack_boundary < boundary)\n-    crtl->preferred_stack_boundary = boundary;\n-\n   if (ARGS_GROW_DOWNWARD)\n     {\n       locate->slot_offset.constant = -initial_offset_ptr->constant;"}, {"sha": "3d64fb04d10a1a325e9a3f511532555cdc782303", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957ed7386177e7d5da6b2908ec576906b784c892/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957ed7386177e7d5da6b2908ec576906b784c892/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=957ed7386177e7d5da6b2908ec576906b784c892", "patch": "@@ -1,3 +1,9 @@\n+2019-06-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR rtl-optimization/90765\n+\t* gcc.target/i386/pr90765-1.c: New test.\n+\t* gcc.target/i386/pr90765-2.c: Likewise.\n+\n 2019-06-14  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/90884 - stray note with -Wctor-dtor-privacy."}, {"sha": "178c3ff8054eb5f5b8cff19caf0facfaaaca9fc2", "filename": "gcc/testsuite/gcc.target/i386/pr90765-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957ed7386177e7d5da6b2908ec576906b784c892/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90765-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957ed7386177e7d5da6b2908ec576906b784c892/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90765-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90765-1.c?ref=957ed7386177e7d5da6b2908ec576906b784c892", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-not \"and\\[lq\\]?\\[\\\\t \\]*\\\\$-64,\\[\\\\t \\]*%\\[re\\]?sp\" } } */\n+\n+typedef int __v16si __attribute__ ((__vector_size__ (64)));\n+\n+void\n+foo (__v16si x, int i0, int i1, int i2, int i3, int i4, int i5, __v16si *p)\n+{\n+  *p = x;\n+}"}, {"sha": "45cf1f03747b318ec98c707900fbf629574b35c9", "filename": "gcc/testsuite/gcc.target/i386/pr90765-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957ed7386177e7d5da6b2908ec576906b784c892/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90765-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957ed7386177e7d5da6b2908ec576906b784c892/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90765-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90765-2.c?ref=957ed7386177e7d5da6b2908ec576906b784c892", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler \"and\\[lq\\]?\\[\\\\t \\]*\\\\$-64,\\[\\\\t \\]*%\\[re\\]?sp\" } } */\n+/* { dg-skip-if \"\" { x86_64-*-mingw* } } */\n+\n+typedef int __v16si __attribute__ ((__vector_size__ (64)));\n+\n+extern void foo (__v16si, __v16si, __v16si, __v16si, __v16si, __v16si,\n+\t\t __v16si, __v16si, __v16si, int, int, int, int, int,\n+\t\t int, __v16si *);\n+\n+extern __v16si x, y;\n+\n+void\n+bar (void)\n+{\n+  foo (x, x, x, x, x, x, x, x, x, 0, 1, 2, 3, 4, 5, &y);\n+}"}]}