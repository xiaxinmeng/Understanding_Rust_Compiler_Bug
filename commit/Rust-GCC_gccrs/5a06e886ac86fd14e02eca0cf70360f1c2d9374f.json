{"sha": "5a06e886ac86fd14e02eca0cf70360f1c2d9374f", "node_id": "C_kwDOANBUbNoAKDVhMDZlODg2YWM4NmZkMTRlMDJlY2EwY2Y3MDM2MGYxYzJkOTM3NGY", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-05-16T14:14:46Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-06-02T09:06:41Z"}, "message": "[Ada] Build static dispatch tables always at the end of declarative part\n\nThe static dispatch tables of library-level tagged types are either built\non the first object declaration or at the end of the declarative part of\nthe package spec or body. There is no real need for the former case, and\nthe tables are not built for other constructs that freeze (tagged) types.\n\nTherefore this change removes the former case, thus causing the tables to\nbe always built at the end of the declarative part; that's orthogonal to\nfreezing and the tagged types are still frozen at the appropriate place.\n\nMoreover, it wraps the code in the Actions list of a freeze node (like\nfor the nonstatic case) so that it is considered elaboration code by the\nprocessing done in Sem_Elab and does not disturb it.\n\nNo functional changes.\n\ngcc/ada/\n\n\t* exp_ch3.adb (Expand_Freeze_Record_Type): Adjust comment.\n\t(Expand_N_Object_Declaration): Do not build static dispatch tables.\n\t* exp_disp.adb (Make_And_Insert_Dispatch_Table): New procedure.\n\t(Build_Static_Dispatch_Tables): Call it to build the dispatch tables\n\tand wrap them in the Actions list of a freeze node.", "tree": {"sha": "8c68561bb5169f50eac157f08f854c70321b82c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c68561bb5169f50eac157f08f854c70321b82c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a06e886ac86fd14e02eca0cf70360f1c2d9374f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a06e886ac86fd14e02eca0cf70360f1c2d9374f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a06e886ac86fd14e02eca0cf70360f1c2d9374f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a06e886ac86fd14e02eca0cf70360f1c2d9374f/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57b522c58a03d66f7acd9f4acc7614626aad3280", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57b522c58a03d66f7acd9f4acc7614626aad3280", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57b522c58a03d66f7acd9f4acc7614626aad3280"}], "stats": {"total": 64, "additions": 28, "deletions": 36}, "files": [{"sha": "2f74208c40114fea412cc7bf12ae708bbf8027de", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 1, "deletions": 32, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a06e886ac86fd14e02eca0cf70360f1c2d9374f/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a06e886ac86fd14e02eca0cf70360f1c2d9374f/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=5a06e886ac86fd14e02eca0cf70360f1c2d9374f", "patch": "@@ -5763,7 +5763,7 @@ package body Exp_Ch3 is\n \n                --  Generate dispatch table of locally defined tagged type.\n                --  Dispatch tables of library level tagged types are built\n-               --  later (see Analyze_Declarations).\n+               --  later (see Build_Static_Dispatch_Tables).\n \n                if not Building_Static_DT (Typ) then\n                   Append_Freeze_Actions (Typ, Make_DT (Typ));\n@@ -6907,37 +6907,6 @@ package body Exp_Ch3 is\n          return;\n       end if;\n \n-      --  First we do special processing for objects of a tagged type where\n-      --  this is the point at which the type is frozen. The creation of the\n-      --  dispatch table and the initialization procedure have to be deferred\n-      --  to this point, since we reference previously declared primitive\n-      --  subprograms.\n-\n-      --  Force construction of dispatch tables of library level tagged types\n-\n-      if Tagged_Type_Expansion\n-        and then Building_Static_Dispatch_Tables\n-        and then Is_Library_Level_Entity (Def_Id)\n-        and then Is_Library_Level_Tagged_Type (Base_Typ)\n-        and then Ekind (Base_Typ) in E_Record_Type\n-                                   | E_Protected_Type\n-                                   | E_Task_Type\n-        and then not Has_Dispatch_Table (Base_Typ)\n-      then\n-         declare\n-            New_Nodes : List_Id := No_List;\n-\n-         begin\n-            if Is_Concurrent_Type (Base_Typ) then\n-               New_Nodes := Make_DT (Corresponding_Record_Type (Base_Typ));\n-            else\n-               New_Nodes := Make_DT (Base_Typ);\n-            end if;\n-\n-            Insert_List_Before (N, New_Nodes);\n-         end;\n-      end if;\n-\n       --  Make shared memory routines for shared passive variable\n \n       if Is_Shared_Passive (Def_Id) then"}, {"sha": "f16cfdca948276282d5e9cc94b54b3501ad2e7af", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a06e886ac86fd14e02eca0cf70360f1c2d9374f/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a06e886ac86fd14e02eca0cf70360f1c2d9374f/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=5a06e886ac86fd14e02eca0cf70360f1c2d9374f", "patch": "@@ -358,6 +358,12 @@ package body Exp_Disp is\n       procedure Build_Package_Dispatch_Tables (N : Node_Id);\n       --  Build static dispatch tables associated with package declaration N\n \n+      procedure Make_And_Insert_Dispatch_Table (Typ : Entity_Id);\n+      --  Build the dispatch table of the tagged type Typ and insert it at the\n+      --  end of Target_List after wrapping it in the Actions list of a freeze\n+      --  node, so that it is skipped by Sem_Elab (Expand_Freeze_Record_Type\n+      --  does the same for nonstatic dispatch tables).\n+\n       ---------------------------\n       -- Build_Dispatch_Tables --\n       ---------------------------\n@@ -410,8 +416,7 @@ package body Exp_Disp is\n                then\n                   null;\n                else\n-                  Insert_List_After_And_Analyze (Last (Target_List),\n-                    Make_DT (Defining_Entity (D)));\n+                  Make_And_Insert_Dispatch_Table (Defining_Entity (D));\n                end if;\n \n             --  Handle private types of library level tagged types. We must\n@@ -434,8 +439,7 @@ package body Exp_Disp is\n                     and then not Is_Concurrent_Type (E2)\n                   then\n                      Exchange_Declarations (E1);\n-                     Insert_List_After_And_Analyze (Last (Target_List),\n-                       Make_DT (E1));\n+                     Make_And_Insert_Dispatch_Table (E1);\n                      Exchange_Declarations (E2);\n                   end if;\n                end;\n@@ -469,6 +473,25 @@ package body Exp_Disp is\n          Pop_Scope;\n       end Build_Package_Dispatch_Tables;\n \n+      ------------------------------------\n+      -- Make_And_Insert_Dispatch_Table --\n+      ------------------------------------\n+\n+      procedure Make_And_Insert_Dispatch_Table (Typ : Entity_Id) is\n+         F_Typ : constant Entity_Id := Create_Itype (E_Class_Wide_Type, Typ);\n+         --  The code generator discards freeze nodes of CW types after\n+         --  evaluating their side effects, so create an artificial one.\n+\n+         F_Nod : constant Node_Id := Make_Freeze_Entity (Sloc (Typ));\n+\n+      begin\n+         Set_Is_Frozen (F_Typ);\n+         Set_Entity    (F_Nod, F_Typ);\n+         Set_Actions   (F_Nod, Make_DT (Typ));\n+\n+         Insert_After_And_Analyze (Last (Target_List), F_Nod);\n+      end Make_And_Insert_Dispatch_Table;\n+\n    --  Start of processing for Build_Static_Dispatch_Tables\n \n    begin"}]}