{"sha": "3bfdb124af2ec89d718bfb95824c5f03ec057060", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JmZGIxMjRhZjJlYzg5ZDcxOGJmYjk1ODI0YzVmMDNlYzA1NzA2MA==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-12-22T15:01:02Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-12-22T15:01:02Z"}, "message": "ipa-reference.c (get_reference_vars_info_from_cgraph): Use function_ann.\n\n2005-12-22  Daniel Berlin  <dberlin@dberlin.org>\n\t   \n\t* ipa-reference.c (get_reference_vars_info_from_cgraph): Use \n\tfunction_ann.\n\t(get_local_reference_vars_info): Ditto.\n\t(get_global_reference_vars_info): Ditto.\n\t(analyze_function): Ditto.\n\t(clean_function): Ditto.\n\t* tree-dfa.c (create_function_ann): New function.\n\t* tree-flow-inline.h (var_ann): FUNCTION_DECL's don't have\n\tvar_ann.\n\t(function_ann): New.\n\t(get_function_ann): Ditto.\n\t* tree-flow.h (tree_ann_type): Add FUNCTION_ANN.\n\t(struct var_ann_d): Move reference_vars_info to function annotation.\n\t(struct function_ann_d): New.\n\t(union tree_ann_d): Add function_ann.\n\nFrom-SVN: r108950", "tree": {"sha": "d35b07b258135f64556be040612caee313e68554", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d35b07b258135f64556be040612caee313e68554"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bfdb124af2ec89d718bfb95824c5f03ec057060", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bfdb124af2ec89d718bfb95824c5f03ec057060", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bfdb124af2ec89d718bfb95824c5f03ec057060", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bfdb124af2ec89d718bfb95824c5f03ec057060/comments", "author": null, "committer": null, "parents": [{"sha": "1052bd544ead1ce3d9d4e43cb3d90fb40a84a890", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1052bd544ead1ce3d9d4e43cb3d90fb40a84a890", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1052bd544ead1ce3d9d4e43cb3d90fb40a84a890"}], "stats": {"total": 76, "additions": 64, "deletions": 12}, "files": [{"sha": "ec8d3b8e5951536dc75245f437b0bc01cd2ea1e0", "filename": "gcc/ipa-reference.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bfdb124af2ec89d718bfb95824c5f03ec057060/gcc%2Fipa-reference.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bfdb124af2ec89d718bfb95824c5f03ec057060/gcc%2Fipa-reference.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-reference.c?ref=3bfdb124af2ec89d718bfb95824c5f03ec057060", "patch": "@@ -111,15 +111,15 @@ tree memory_identifier_string;\n static inline ipa_reference_vars_info_t\n get_reference_vars_info_from_cgraph (struct cgraph_node * node)\n {\n-  return get_var_ann (node->decl)->reference_vars_info;\n+  return get_function_ann (node->decl)->reference_vars_info;\n }\n \n /* Get a bitmap that contains all of the locally referenced static\n    variables for function FN.  */\n static ipa_reference_local_vars_info_t\n get_local_reference_vars_info (tree fn) \n {\n-  ipa_reference_vars_info_t info = get_var_ann (fn)->reference_vars_info;\n+  ipa_reference_vars_info_t info = get_function_ann (fn)->reference_vars_info;\n \n   if (info)\n     return info->local;\n@@ -134,7 +134,7 @@ get_local_reference_vars_info (tree fn)\n static ipa_reference_global_vars_info_t\n get_global_reference_vars_info (tree fn) \n {\n-  ipa_reference_vars_info_t info = get_var_ann (fn)->reference_vars_info;\n+  ipa_reference_vars_info_t info = get_function_ann (fn)->reference_vars_info;\n \n   if (info)\n     return info->global;\n@@ -790,7 +790,7 @@ analyze_function (struct cgraph_node *fn)\n   tree decl = fn->decl;\n \n   /* Add the info to the tree's annotation.  */\n-  get_var_ann (fn->decl)->reference_vars_info = info;\n+  get_function_ann (fn->decl)->reference_vars_info = info;\n \n   info->local = l;\n   l->statics_read = BITMAP_ALLOC (&ipa_obstack);\n@@ -874,8 +874,8 @@ clean_function (struct cgraph_node *fn)\n     }\n \n   \n-  free (get_var_ann (fn->decl)->reference_vars_info);\n-  get_var_ann (fn->decl)->reference_vars_info = NULL;\n+  free (get_function_ann (fn->decl)->reference_vars_info);\n+  get_function_ann (fn->decl)->reference_vars_info = NULL;\n }\n \n \f"}, {"sha": "5af9753d5c683b2bc582098f69d74f1133204a7c", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bfdb124af2ec89d718bfb95824c5f03ec057060/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bfdb124af2ec89d718bfb95824c5f03ec057060/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=3bfdb124af2ec89d718bfb95824c5f03ec057060", "patch": "@@ -167,6 +167,26 @@ create_var_ann (tree t)\n   return ann;\n }\n \n+/* Create a new annotation for a FUNCTION_DECL node T.  */\n+\n+function_ann_t\n+create_function_ann (tree t)\n+{\n+  function_ann_t ann;\n+\n+  gcc_assert (t);\n+  gcc_assert (TREE_CODE (t) == FUNCTION_DECL);\n+  gcc_assert (!t->common.ann || t->common.ann->common.type == FUNCTION_ANN);\n+\n+  ann = ggc_alloc (sizeof (*ann));\n+  memset ((void *) ann, 0, sizeof (*ann));\n+\n+  ann->common.type = FUNCTION_ANN;\n+\n+  t->common.ann = (tree_ann_t) ann;\n+\n+  return ann;\n+}\n \n /* Create a new annotation for a statement node T.  */\n "}, {"sha": "94e19720f7be48e1e2b047b8db65353648e5bd52", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bfdb124af2ec89d718bfb95824c5f03ec057060/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bfdb124af2ec89d718bfb95824c5f03ec057060/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=3bfdb124af2ec89d718bfb95824c5f03ec057060", "patch": "@@ -126,6 +126,7 @@ var_ann (tree t)\n {\n   gcc_assert (t);\n   gcc_assert (DECL_P (t));\n+  gcc_assert (TREE_CODE (t) != FUNCTION_DECL);\n   gcc_assert (!t->common.ann || t->common.ann->common.type == VAR_ANN);\n \n   return (var_ann_t) t->common.ann;\n@@ -140,6 +141,27 @@ get_var_ann (tree var)\n   return (ann) ? ann : create_var_ann (var);\n }\n \n+/* Return the function annotation for T, which must be a FUNCTION_DECL node.\n+   Return NULL if the function annotation doesn't already exist.  */\n+static inline function_ann_t\n+function_ann (tree t)\n+{\n+  gcc_assert (t);\n+  gcc_assert (TREE_CODE (t) == FUNCTION_DECL);\n+  gcc_assert (!t->common.ann || t->common.ann->common.type == FUNCTION_ANN);\n+\n+  return (function_ann_t) t->common.ann;\n+}\n+\n+/* Return the function annotation for T, which must be a FUNCTION_DECL node.\n+   Create the function annotation if it doesn't exist.  */\n+static inline function_ann_t\n+get_function_ann (tree var)\n+{\n+  function_ann_t ann = function_ann (var);\n+  return (ann) ? ann : create_function_ann (var);\n+}\n+\n /* Return the statement annotation for T, which must be a statement\n    node.  Return NULL if the statement annotation doesn't exist.  */\n static inline stmt_ann_t"}, {"sha": "a507ced434a28700aa4ac56b5584e297ff8bba50", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bfdb124af2ec89d718bfb95824c5f03ec057060/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bfdb124af2ec89d718bfb95824c5f03ec057060/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=3bfdb124af2ec89d718bfb95824c5f03ec057060", "patch": "@@ -98,7 +98,7 @@ struct ptr_info_def GTY(())\n /*---------------------------------------------------------------------------\n \t\t   Tree annotations stored in tree_common.ann\n ---------------------------------------------------------------------------*/\n-enum tree_ann_type { TREE_ANN_COMMON, VAR_ANN, STMT_ANN };\n+enum tree_ann_type { TREE_ANN_COMMON, VAR_ANN, FUNCTION_ANN, STMT_ANN };\n \n struct tree_ann_common_d GTY(())\n {\n@@ -209,16 +209,21 @@ struct var_ann_d GTY(())\n      current version of this variable (an SSA_NAME).  */\n   tree current_def;\n   \n-  /* Pointer to the structure that contains the sets of global\n-     variables modified by function calls.  This field is only used\n-     for FUNCTION_DECLs.  */\n-  ipa_reference_vars_info_t GTY ((skip)) reference_vars_info;\n \n   /* If this variable is a structure, this fields holds a list of\n      symbols representing each of the fields of the structure.  */\n   subvar_t subvars;\n };\n \n+struct function_ann_d GTY(())\n+{\n+  struct tree_ann_common_d common;\n+\n+  /* Pointer to the structure that contains the sets of global\n+     variables modified by function calls.  This field is only used\n+     for FUNCTION_DECLs.  */\n+  ipa_reference_vars_info_t GTY ((skip)) reference_vars_info;\n+};\n \n typedef struct immediate_use_iterator_d\n {\n@@ -287,20 +292,24 @@ struct stmt_ann_d GTY(())\n union tree_ann_d GTY((desc (\"ann_type ((tree_ann_t)&%h)\")))\n {\n   struct tree_ann_common_d GTY((tag (\"TREE_ANN_COMMON\"))) common;\n-  struct var_ann_d GTY((tag (\"VAR_ANN\"))) decl;\n+  struct var_ann_d GTY((tag (\"VAR_ANN\"))) vdecl;\n+  struct function_ann_d GTY((tag (\"FUNCTION_ANN\"))) fdecl;\n   struct stmt_ann_d GTY((tag (\"STMT_ANN\"))) stmt;\n };\n \n extern GTY(()) VEC(tree,gc) *modified_noreturn_calls;\n \n typedef union tree_ann_d *tree_ann_t;\n typedef struct var_ann_d *var_ann_t;\n+typedef struct function_ann_d *function_ann_t;\n typedef struct stmt_ann_d *stmt_ann_t;\n \n static inline tree_ann_t tree_ann (tree);\n static inline tree_ann_t get_tree_ann (tree);\n static inline var_ann_t var_ann (tree);\n static inline var_ann_t get_var_ann (tree);\n+static inline function_ann_t function_ann (tree);\n+static inline function_ann_t get_function_ann (tree);\n static inline stmt_ann_t stmt_ann (tree);\n static inline stmt_ann_t get_stmt_ann (tree);\n static inline enum tree_ann_type ann_type (tree_ann_t);\n@@ -533,6 +542,7 @@ extern void dump_generic_bb (FILE *, basic_block, int, int);\n \n /* In tree-dfa.c  */\n extern var_ann_t create_var_ann (tree);\n+extern function_ann_t create_function_ann (tree);\n extern stmt_ann_t create_stmt_ann (tree);\n extern tree_ann_t create_tree_ann (tree);\n extern void dump_dfa_stats (FILE *);"}]}