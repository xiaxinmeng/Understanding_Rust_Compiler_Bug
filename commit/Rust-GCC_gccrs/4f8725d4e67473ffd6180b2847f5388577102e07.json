{"sha": "4f8725d4e67473ffd6180b2847f5388577102e07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY4NzI1ZDRlNjc0NzNmZmQ2MTgwYjI4NDdmNTM4ODU3NzEwMmUwNw==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2005-10-26T11:02:00Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2005-10-26T11:02:00Z"}, "message": "re PR fortran/15586 (gfortran should support i18n in its compiler messages)\n\n\tPR fortran/15586\n\t* resolve.c (resolve_symbol): Remove the use of whynot, so that\n\terror messages are not built from pieces.\n\nFrom-SVN: r105921", "tree": {"sha": "666f5b59e516ab12761f5a6e194195476a509a26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/666f5b59e516ab12761f5a6e194195476a509a26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f8725d4e67473ffd6180b2847f5388577102e07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f8725d4e67473ffd6180b2847f5388577102e07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f8725d4e67473ffd6180b2847f5388577102e07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f8725d4e67473ffd6180b2847f5388577102e07/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "694a2f6ea681d5e14af695d1c1848a1bd223d69c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/694a2f6ea681d5e14af695d1c1848a1bd223d69c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/694a2f6ea681d5e14af695d1c1848a1bd223d69c"}], "stats": {"total": 50, "additions": 32, "deletions": 18}, "files": [{"sha": "3632e9eb8b093f1015fce144bcef531109a97442", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8725d4e67473ffd6180b2847f5388577102e07/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8725d4e67473ffd6180b2847f5388577102e07/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4f8725d4e67473ffd6180b2847f5388577102e07", "patch": "@@ -1,3 +1,9 @@\n+2005-10-26  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR fortran/15586\n+\t* resolve.c (resolve_symbol): Remove the use of whynot, so that\n+\terror messages are not built from pieces.\n+\n 2005-10-26  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/24158"}, {"sha": "f6fb2b0f8386a72a935fad8b1731ffea0b53177b", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8725d4e67473ffd6180b2847f5388577102e07/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8725d4e67473ffd6180b2847f5388577102e07/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=4f8725d4e67473ffd6180b2847f5388577102e07", "patch": "@@ -4181,8 +4181,7 @@ resolve_symbol (gfc_symbol * sym)\n   /* Zero if we are checking a formal namespace.  */\n   static int formal_ns_flag = 1;\n   int formal_ns_save, check_constant, mp_flag;\n-  int i;\n-  const char *whynot;\n+  int i, flag;\n   gfc_namelist *nl;\n   gfc_symtree * symtree;\n   gfc_symtree * this_symtree;\n@@ -4463,17 +4462,10 @@ resolve_symbol (gfc_symbol * sym)\n     {\n     case FL_VARIABLE:\n       /* Can the sybol have an initializer?  */\n-      whynot = NULL;\n-      if (sym->attr.allocatable)\n-\twhynot = _(\"Allocatable\");\n-      else if (sym->attr.external)\n-\twhynot = _(\"External\");\n-      else if (sym->attr.dummy)\n-\twhynot = _(\"Dummy\");\n-      else if (sym->attr.intrinsic)\n-\twhynot = _(\"Intrinsic\");\n-      else if (sym->attr.result)\n-\twhynot = _(\"Function Result\");\n+      flag = 0;\n+      if (sym->attr.allocatable || sym->attr.external || sym->attr.dummy\n+\t  || sym->attr.intrinsic || sym->attr.result)\n+\tflag = 1;\n       else if (sym->attr.dimension && !sym->attr.pointer)\n \t{\n \t  /* Don't allow initialization of automatic arrays.  */\n@@ -4484,22 +4476,38 @@ resolve_symbol (gfc_symbol * sym)\n \t\t  || sym->as->upper[i] == NULL\n \t\t  || sym->as->upper[i]->expr_type != EXPR_CONSTANT)\n \t\t{\n-\t\t  whynot = _(\"Automatic array\");\n+\t\t  flag = 1;\n \t\t  break;\n \t\t}\n \t    }\n \t}\n \n       /* Reject illegal initializers.  */\n-      if (sym->value && whynot)\n+      if (sym->value && flag)\n \t{\n-\t  gfc_error (\"%s '%s' at %L cannot have an initializer\",\n-\t\t     whynot, sym->name, &sym->declared_at);\n+\t  if (sym->attr.allocatable)\n+\t    gfc_error (\"Allocatable '%s' at %L cannot have an initializer\",\n+\t\t       sym->name, &sym->declared_at);\n+\t  else if (sym->attr.external)\n+\t    gfc_error (\"External '%s' at %L cannot have an initializer\",\n+\t\t       sym->name, &sym->declared_at);\n+\t  else if (sym->attr.dummy)\n+\t    gfc_error (\"Dummy '%s' at %L cannot have an initializer\",\n+\t\t       sym->name, &sym->declared_at);\n+\t  else if (sym->attr.intrinsic)\n+\t    gfc_error (\"Intrinsic '%s' at %L cannot have an initializer\",\n+\t\t       sym->name, &sym->declared_at);\n+\t  else if (sym->attr.result)\n+\t    gfc_error (\"Function result '%s' at %L cannot have an initializer\",\n+\t\t       sym->name, &sym->declared_at);\n+\t  else\n+\t    gfc_error (\"Automatic array '%s' at %L cannot have an initializer\",\n+\t\t       sym->name, &sym->declared_at);\n \t  return;\n \t}\n \n       /* Assign default initializer.  */\n-      if (sym->ts.type == BT_DERIVED && !(sym->value || whynot)\n+      if (sym->ts.type == BT_DERIVED && !(sym->value || flag)\n           && !sym->attr.pointer)\n \tsym->value = gfc_default_initializer (&sym->ts);\n       break;"}]}