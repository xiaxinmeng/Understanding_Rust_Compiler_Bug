{"sha": "c8c5cb99dedcbeca5018458cb76bd95479aa2d50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhjNWNiOTlkZWRjYmVjYTUwMTg0NThjYjc2YmQ5NTQ3OWFhMmQ1MA==", "commit": {"author": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1995-12-16T03:06:03Z"}, "committer": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1995-12-16T03:06:03Z"}, "message": "(override_options): Add -mcpu and -misa support\n\nFrom-SVN: r10741", "tree": {"sha": "7d6a185f062fb3e906dd1a766e38fc4471897854", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d6a185f062fb3e906dd1a766e38fc4471897854"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8c5cb99dedcbeca5018458cb76bd95479aa2d50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8c5cb99dedcbeca5018458cb76bd95479aa2d50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8c5cb99dedcbeca5018458cb76bd95479aa2d50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8c5cb99dedcbeca5018458cb76bd95479aa2d50/comments", "author": null, "committer": null, "parents": [{"sha": "241e1a89ac6d89bf869d82fac96c6fe1759edec7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/241e1a89ac6d89bf869d82fac96c6fe1759edec7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/241e1a89ac6d89bf869d82fac96c6fe1759edec7"}], "stats": {"total": 79, "additions": 73, "deletions": 6}, "files": [{"sha": "8243c30b2d9f28d66989608c71421773a60d9237", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 73, "deletions": 6, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c5cb99dedcbeca5018458cb76bd95479aa2d50/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c5cb99dedcbeca5018458cb76bd95479aa2d50/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c8c5cb99dedcbeca5018458cb76bd95479aa2d50", "patch": "@@ -80,6 +80,16 @@ struct rtx_def *i386_compare_op0 = NULL_RTX;\n struct rtx_def *i386_compare_op1 = NULL_RTX;\n struct rtx_def *(*i386_compare_gen)(), *(*i386_compare_gen_eq)();\n \n+/* which cpu are we scheduling for */\n+enum processor_type ix86_cpu;\n+\n+/* which instruction set architecture to use.  */\n+int ix86_isa;\n+\n+/* Strings to hold which cpu and instruction set architecture  to use.  */\n+char *ix86_cpu_string;\t\t/* for -mcpu=<xxx> */\n+char *ix86_isa_string;\t\t/* for -misa=<xxx> */\n+\n /* Register allocation order */\n char *i386_reg_alloc_order;\n static char regs_allocated[FIRST_PSEUDO_REGISTER];\n@@ -110,10 +120,27 @@ int i386_align_funcs;\t\t\t\t/* power of two alignment for functions */\n void\n override_options ()\n {\n-  int ch, i, regno;\n+  int ch, i, j, regno;\n   char *p;\n   int def_align;\n \n+  static struct ptt\n+    {\n+      char *name;\t\t/* Canonical processor name.  */\n+      enum processor_type processor; /* Processor type enum value.  */\n+      int target_enable;\t/* Target flags to enable.  */\n+      int target_disable;\t/* Target flags to disable.  */\n+    } processor_target_table[]\n+      = {{PROCESSOR_COMMON_STRING, PROCESSOR_COMMON, 0, 0},\n+\t   {PROCESSOR_I386_STRING, PROCESSOR_I386, 0, 0},\n+\t   {PROCESSOR_I486_STRING, PROCESSOR_I486, 0, 0},\n+\t   {PROCESSOR_I586_STRING, PROCESSOR_PENTIUM, 0, 0},\n+\t   {PROCESSOR_PENTIUM_STRING, PROCESSOR_PENTIUM, 0, 0},\n+\t   {PROCESSOR_I686_STRING, PROCESSOR_PENTIUMPRO, 0, 0},\n+\t   {PROCESSOR_PENTIUMPRO_STRING, PROCESSOR_PENTIUMPRO, 0, 0}};\n+\n+  int ptt_size = sizeof (processor_target_table) / sizeof (struct ptt);\n+\n #ifdef SUBTARGET_OVERRIDE_OPTIONS\n   SUBTARGET_OVERRIDE_OPTIONS;\n #endif\n@@ -143,6 +170,46 @@ override_options ()\n \t}\n     }\n \n+  /* Get the architectural level.  */\n+  if (ix86_isa_string == (char *)0)\n+      ix86_isa_string = PROCESSOR_DEFAULT_STRING;\n+\n+  for (i = 0; i < ptt_size; i++)\n+    if (! strcmp (ix86_isa_string, processor_target_table[i].name))\n+      {\n+\tix86_isa = processor_target_table[i].processor;\n+\tbreak;\n+      }\n+\n+  if (i == ptt_size)\n+    {\n+      error (\"bad value (%s) for -misa= switch\", ix86_isa_string);\n+      ix86_isa_string = PROCESSOR_DEFAULT_STRING;\n+      ix86_isa = PROCESSOR_DEFAULT;\n+    }\n+\n+  if (ix86_cpu_string == (char *)0)\n+    ix86_cpu_string = PROCESSOR_DEFAULT_STRING;\n+\n+  for (j = 0; j < ptt_size; j++)\n+    if (! strcmp (ix86_cpu_string, processor_target_table[j].name))\n+      {\n+\tix86_cpu = processor_target_table[j].processor;\n+\tif (i > j)\n+\t  error (\"-mcpu=%s does not support -misa=%s\", ix86_cpu_string, ix86_isa_string);\n+\n+\ttarget_flags |= processor_target_table[j].target_enable;\n+\ttarget_flags &= ~processor_target_table[j].target_disable;\n+\tbreak;\n+      }\n+\n+  if (j == ptt_size)\n+    {\n+      error (\"bad value (%s) for -mcpu= switch\", ix86_cpu_string);\n+      ix86_cpu_string = PROCESSOR_DEFAULT_STRING;\n+      ix86_cpu = PROCESSOR_DEFAULT;\n+    }\n+\n   /* Validate -mregparm= value */\n   if (i386_regparm_string)\n     {\n@@ -151,7 +218,7 @@ override_options ()\n \tfatal (\"-mregparm=%d is not between 0 and %d\", i386_regparm, REGPARM_MAX);\n     }\n \n-  def_align = (TARGET_386) ? 2 : 4;\n+  def_align = (TARGET_386_ALIGNMENT) ? 2 : 4;\n \n   /* Validate -malign-loops= value, or provide default */\n   if (i386_align_loops_string)\n@@ -1612,16 +1679,16 @@ function_epilogue (file, size)\n \n   if (frame_pointer_needed)\n     {\n-      /* On i486, mov & pop is faster than \"leave\". */\n+      /* If not an i386, mov & pop is faster than \"leave\". */\n \n-      if (!TARGET_386)\n+      if (TARGET_LEAVE)\n+\toutput_asm_insn (\"leave\", xops);\n+      else\n \t{\n \t  xops[0] = frame_pointer_rtx;\n \t  output_asm_insn (AS2 (mov%L2,%0,%2), xops);\n \t  output_asm_insn (\"pop%L0 %0\", xops);\n \t}\n-      else\n-\toutput_asm_insn (\"leave\", xops);\n     }\n   else if (size)\n     {"}]}