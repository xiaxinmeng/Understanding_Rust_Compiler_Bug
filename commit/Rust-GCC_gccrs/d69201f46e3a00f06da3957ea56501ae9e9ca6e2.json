{"sha": "d69201f46e3a00f06da3957ea56501ae9e9ca6e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY5MjAxZjQ2ZTNhMDBmMDZkYTM5NTdlYTU2NTAxYWU5ZTljYTZlMg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-10-21T20:38:29Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-10-21T20:38:29Z"}, "message": "Cipher.java, [...]: Import cleanup.\n\n2004-10-21  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/crypto/Cipher.java,\n\tjavax/crypto/EncryptedPrivateKeyInfo.java,\n\tjavax/crypto/ExemptionMechanism.java,\n\tjavax/crypto/KeyAgreement.java,\n\tjavax/crypto/KeyGenerator.java,\n\tjavax/crypto/Mac.java,\n\tjavax/crypto/SecretKeyFactory.java,\n\tjavax/crypto/SecretKeyFactorySpi.java,\n\tjavax/crypto/spec/SecretKeySpec.java:\n\tImport cleanup.\n\nFrom-SVN: r89398", "tree": {"sha": "b187a3b6e36cfada2319777171865fcc6e125dda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b187a3b6e36cfada2319777171865fcc6e125dda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d69201f46e3a00f06da3957ea56501ae9e9ca6e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d69201f46e3a00f06da3957ea56501ae9e9ca6e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d69201f46e3a00f06da3957ea56501ae9e9ca6e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d69201f46e3a00f06da3957ea56501ae9e9ca6e2/comments", "author": null, "committer": null, "parents": [{"sha": "78fe42c391823366611caab754d28c7aed5609c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78fe42c391823366611caab754d28c7aed5609c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78fe42c391823366611caab754d28c7aed5609c4"}], "stats": {"total": 54, "additions": 30, "deletions": 24}, "files": [{"sha": "86dfe20f6cff46bcd24f50acaefc77a2346c9c5c", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d69201f46e3a00f06da3957ea56501ae9e9ca6e2/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d69201f46e3a00f06da3957ea56501ae9e9ca6e2/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=d69201f46e3a00f06da3957ea56501ae9e9ca6e2", "patch": "@@ -1,3 +1,16 @@\n+2004-10-21  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/crypto/Cipher.java,\n+\tjavax/crypto/EncryptedPrivateKeyInfo.java,\n+\tjavax/crypto/ExemptionMechanism.java,\n+\tjavax/crypto/KeyAgreement.java,\n+\tjavax/crypto/KeyGenerator.java,\n+\tjavax/crypto/Mac.java,\n+\tjavax/crypto/SecretKeyFactory.java,\n+\tjavax/crypto/SecretKeyFactorySpi.java,\n+\tjavax/crypto/spec/SecretKeySpec.java:\n+\tImport cleanup.\n+\n 2004-10-21  Michael Koch  <konqueror@gmx.de>\n \n \t* java/security/AlgorithmParameterGenerator.java,"}, {"sha": "2e2d28f7ff4c6ad9b454a5aa3cd242537616ace8", "filename": "libjava/javax/crypto/Cipher.java", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d69201f46e3a00f06da3957ea56501ae9e9ca6e2/libjava%2Fjavax%2Fcrypto%2FCipher.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d69201f46e3a00f06da3957ea56501ae9e9ca6e2/libjava%2Fjavax%2Fcrypto%2FCipher.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fcrypto%2FCipher.java?ref=d69201f46e3a00f06da3957ea56501ae9e9ca6e2", "patch": "@@ -38,6 +38,8 @@\n \n package javax.crypto;\n \n+import gnu.java.security.Engine;\n+\n import java.security.AlgorithmParameters;\n import java.security.InvalidAlgorithmParameterException;\n import java.security.InvalidKeyException;\n@@ -50,11 +52,8 @@\n import java.security.cert.Certificate;\n import java.security.cert.X509Certificate;\n import java.security.spec.AlgorithmParameterSpec;\n-\n import java.util.StringTokenizer;\n \n-import gnu.java.security.Engine;\n-\n /**\n  * <p>This class implements a cryptographic cipher for transforming\n  * data.</p>"}, {"sha": "2d565f1189e3b24842a50b2db3223b3728fae231", "filename": "libjava/javax/crypto/EncryptedPrivateKeyInfo.java", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d69201f46e3a00f06da3957ea56501ae9e9ca6e2/libjava%2Fjavax%2Fcrypto%2FEncryptedPrivateKeyInfo.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d69201f46e3a00f06da3957ea56501ae9e9ca6e2/libjava%2Fjavax%2Fcrypto%2FEncryptedPrivateKeyInfo.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fcrypto%2FEncryptedPrivateKeyInfo.java?ref=d69201f46e3a00f06da3957ea56501ae9e9ca6e2", "patch": "@@ -44,14 +44,12 @@\n import gnu.java.security.der.DERValue;\n \n import java.io.IOException;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n import java.security.AlgorithmParameters;\n import java.security.NoSuchAlgorithmException;\n import java.security.spec.InvalidKeySpecException;\n import java.security.spec.PKCS8EncodedKeySpec;\n+import java.util.ArrayList;\n+import java.util.List;\n \n /**\n  * An implementation of the <code>EncryptedPrivateKeyInfo</code> ASN.1"}, {"sha": "2b2091e15056652f1e99bf18c3f70a914faacf5d", "filename": "libjava/javax/crypto/ExemptionMechanism.java", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d69201f46e3a00f06da3957ea56501ae9e9ca6e2/libjava%2Fjavax%2Fcrypto%2FExemptionMechanism.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d69201f46e3a00f06da3957ea56501ae9e9ca6e2/libjava%2Fjavax%2Fcrypto%2FExemptionMechanism.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fcrypto%2FExemptionMechanism.java?ref=d69201f46e3a00f06da3957ea56501ae9e9ca6e2", "patch": "@@ -38,8 +38,9 @@\n \n package javax.crypto;\n \n-import java.lang.reflect.InvocationTargetException;\n+import gnu.java.security.Engine;\n \n+import java.lang.reflect.InvocationTargetException;\n import java.security.AlgorithmParameters;\n import java.security.InvalidAlgorithmParameterException;\n import java.security.InvalidKeyException;\n@@ -50,8 +51,6 @@\n import java.security.Security;\n import java.security.spec.AlgorithmParameterSpec;\n \n-import gnu.java.security.Engine;\n-\n /**\n  * An exemption mechanism, which will conditionally allow cryptography\n  * where it is not normally allowed, implements things such as <i>key"}, {"sha": "884e0f918e607383a893ae13b0ef630bb0b7aaf8", "filename": "libjava/javax/crypto/KeyAgreement.java", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d69201f46e3a00f06da3957ea56501ae9e9ca6e2/libjava%2Fjavax%2Fcrypto%2FKeyAgreement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d69201f46e3a00f06da3957ea56501ae9e9ca6e2/libjava%2Fjavax%2Fcrypto%2FKeyAgreement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fcrypto%2FKeyAgreement.java?ref=d69201f46e3a00f06da3957ea56501ae9e9ca6e2", "patch": "@@ -38,8 +38,9 @@\n \n package javax.crypto;\n \n-import java.lang.reflect.InvocationTargetException;\n+import gnu.java.security.Engine;\n \n+import java.lang.reflect.InvocationTargetException;\n import java.security.InvalidAlgorithmParameterException;\n import java.security.InvalidKeyException;\n import java.security.Key;\n@@ -50,8 +51,6 @@\n import java.security.Security;\n import java.security.spec.AlgorithmParameterSpec;\n \n-import gnu.java.security.Engine;\n-\n /**\n  * Key agreement is a method in which two or more parties may agree on a\n  * secret key for symmetric cryptography or message authentication"}, {"sha": "3deda21fe2c843c5887e5f169ab3d69af2d4f714", "filename": "libjava/javax/crypto/KeyGenerator.java", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d69201f46e3a00f06da3957ea56501ae9e9ca6e2/libjava%2Fjavax%2Fcrypto%2FKeyGenerator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d69201f46e3a00f06da3957ea56501ae9e9ca6e2/libjava%2Fjavax%2Fcrypto%2FKeyGenerator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fcrypto%2FKeyGenerator.java?ref=d69201f46e3a00f06da3957ea56501ae9e9ca6e2", "patch": "@@ -38,8 +38,9 @@\n \n package javax.crypto;\n \n-import java.lang.reflect.InvocationTargetException;\n+import gnu.java.security.Engine;\n \n+import java.lang.reflect.InvocationTargetException;\n import java.security.InvalidAlgorithmParameterException;\n import java.security.NoSuchAlgorithmException;\n import java.security.NoSuchProviderException;\n@@ -48,8 +49,6 @@\n import java.security.Security;\n import java.security.spec.AlgorithmParameterSpec;\n \n-import gnu.java.security.Engine;\n-\n /**\n  * A generic producer of keys for symmetric cryptography. The keys\n  * returned may be simple wrappers around byte arrays, or, if the"}, {"sha": "301ec327e4006552457696545fd4ae4c7735a390", "filename": "libjava/javax/crypto/Mac.java", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d69201f46e3a00f06da3957ea56501ae9e9ca6e2/libjava%2Fjavax%2Fcrypto%2FMac.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d69201f46e3a00f06da3957ea56501ae9e9ca6e2/libjava%2Fjavax%2Fcrypto%2FMac.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fcrypto%2FMac.java?ref=d69201f46e3a00f06da3957ea56501ae9e9ca6e2", "patch": "@@ -38,8 +38,9 @@\n \n package javax.crypto;\n \n-import java.lang.reflect.InvocationTargetException;\n+import gnu.java.security.Engine;\n \n+import java.lang.reflect.InvocationTargetException;\n import java.security.InvalidAlgorithmParameterException;\n import java.security.InvalidKeyException;\n import java.security.Key;\n@@ -49,8 +50,6 @@\n import java.security.Security;\n import java.security.spec.AlgorithmParameterSpec;\n \n-import gnu.java.security.Engine;\n-\n /**\n  * This class implements a \"message authentication code\" (MAC), a method\n  * to ensure the integrity of data transmitted between two parties who"}, {"sha": "d543c57c7e2c1b6869f9f7774689d631810c8faf", "filename": "libjava/javax/crypto/SecretKeyFactory.java", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d69201f46e3a00f06da3957ea56501ae9e9ca6e2/libjava%2Fjavax%2Fcrypto%2FSecretKeyFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d69201f46e3a00f06da3957ea56501ae9e9ca6e2/libjava%2Fjavax%2Fcrypto%2FSecretKeyFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fcrypto%2FSecretKeyFactory.java?ref=d69201f46e3a00f06da3957ea56501ae9e9ca6e2", "patch": "@@ -38,17 +38,16 @@\n \n package javax.crypto;\n \n-import java.lang.reflect.InvocationTargetException;\n+import gnu.java.security.Engine;\n \n+import java.lang.reflect.InvocationTargetException;\n import java.security.InvalidKeyException;\n import java.security.NoSuchAlgorithmException;\n import java.security.NoSuchProviderException;\n import java.security.Provider;\n import java.security.Security;\n-import java.security.spec.KeySpec;\n import java.security.spec.InvalidKeySpecException;\n-\n-import gnu.java.security.Engine;\n+import java.security.spec.KeySpec;\n \n /**\n  * A secret key factory translates {@link SecretKey} objects to and from"}, {"sha": "41c8152706a9cd4e1d0c77dc56bd2915594a9420", "filename": "libjava/javax/crypto/SecretKeyFactorySpi.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d69201f46e3a00f06da3957ea56501ae9e9ca6e2/libjava%2Fjavax%2Fcrypto%2FSecretKeyFactorySpi.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d69201f46e3a00f06da3957ea56501ae9e9ca6e2/libjava%2Fjavax%2Fcrypto%2FSecretKeyFactorySpi.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fcrypto%2FSecretKeyFactorySpi.java?ref=d69201f46e3a00f06da3957ea56501ae9e9ca6e2", "patch": "@@ -39,8 +39,8 @@\n package javax.crypto;\n \n import java.security.InvalidKeyException;\n-import java.security.spec.KeySpec;\n import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.KeySpec;\n \n /**\n  * The <i>Service Provider Interface</i> (<b>SPI</b>) for the {@link"}, {"sha": "63c696840bf074a1601bb8cd3808bda9950ccbf7", "filename": "libjava/javax/crypto/spec/SecretKeySpec.java", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d69201f46e3a00f06da3957ea56501ae9e9ca6e2/libjava%2Fjavax%2Fcrypto%2Fspec%2FSecretKeySpec.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d69201f46e3a00f06da3957ea56501ae9e9ca6e2/libjava%2Fjavax%2Fcrypto%2Fspec%2FSecretKeySpec.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fcrypto%2Fspec%2FSecretKeySpec.java?ref=d69201f46e3a00f06da3957ea56501ae9e9ca6e2", "patch": "@@ -39,6 +39,7 @@\n package javax.crypto.spec;\n \n import java.security.spec.KeySpec;\n+\n import javax.crypto.SecretKey;\n \n /**"}]}