{"sha": "b97af562b574697a4fff7fb8c69f579c01e70dec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk3YWY1NjJiNTc0Njk3YTRmZmY3ZmI4YzY5ZjU3OWMwMWU3MGRlYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-03-10T15:39:51Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-03-10T15:50:32Z"}, "message": "c++: Propagate assembler name from local-externs [PR 99508]\n\nThis is another place where our one-true-decl representation breaks\ndown.  The fix here propagates the assembly name to the ns-scope\nalias.  that fixes the reported problem but changes the behaviour when\nthe user has explicitly declared the entity in its namespace.\nHowever, we didn't handle that case 'correctly' anyway before.\nPreviously we'd also ignore the explicitly specified assembler name,\nnow we propagate it.  It's not clear to me what the desired semantics\nwould be in decorating just one of the local extern declarations this\nway.  I don't think we can really do better without propagating this\naliasing property into the middle end (which is also needed for some\nconstexpr handling, see PR97306).  I tried that before and it turned\ninto a rat-hole.\n\n\tPR c++/99508\n\tgcc/cp/\n\t* decl.c (make_rtl_for_nonlocal_decl): Propagate local-extern's\n\tassembler name to the ns alias.\n\tgcc/testsuite/\n\t* g++.dg/ext/pr99508.C: New.", "tree": {"sha": "973d4ef30fad75988a0b0906c98c72742ecc7c6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/973d4ef30fad75988a0b0906c98c72742ecc7c6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b97af562b574697a4fff7fb8c69f579c01e70dec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b97af562b574697a4fff7fb8c69f579c01e70dec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b97af562b574697a4fff7fb8c69f579c01e70dec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b97af562b574697a4fff7fb8c69f579c01e70dec/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47cca0288d06bd851e5801d13bbee7d9374b685d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47cca0288d06bd851e5801d13bbee7d9374b685d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47cca0288d06bd851e5801d13bbee7d9374b685d"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "9c7f6e59bbb78a5fed1699d075662c6b4e1a0ef9", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97af562b574697a4fff7fb8c69f579c01e70dec/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97af562b574697a4fff7fb8c69f579c01e70dec/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b97af562b574697a4fff7fb8c69f579c01e70dec", "patch": "@@ -7157,6 +7157,13 @@ make_rtl_for_nonlocal_decl (tree decl, tree init, const char* asmspec)\n \t      && fndecl_built_in_p (decl, BUILT_IN_NORMAL))\n \t    set_builtin_user_assembler_name (decl, asmspec);\n \t  set_user_assembler_name (decl, asmspec);\n+\t  if (DECL_LOCAL_DECL_P (decl))\n+\t    if (auto ns_decl = DECL_LOCAL_DECL_ALIAS (decl))\n+\t      /* We have to propagate the name to the ns-alias.\n+\t\t This is horrible, as we're affecting a\n+\t\t possibly-shared decl.  Again, a one-true-decl\n+\t\t model breaks down.  */\n+\t      set_user_assembler_name (ns_decl, asmspec);\n \t}\n     }\n "}, {"sha": "201a287bf6144b6327a177ee53b85b555fcbec11", "filename": "gcc/testsuite/g++.dg/ext/pr99508.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97af562b574697a4fff7fb8c69f579c01e70dec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr99508.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97af562b574697a4fff7fb8c69f579c01e70dec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr99508.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr99508.C?ref=b97af562b574697a4fff7fb8c69f579c01e70dec", "patch": "@@ -0,0 +1,20 @@\n+// PR 99508, local exerns with aliased names\n+// { dg-do link }\n+int foo()\n+{\n+  void bar() asm (\"bar_assembler\");\n+  extern unsigned buzz asm(\"buzz_assembler\");\n+  bar();\n+  return buzz;\n+}\n+\n+void ALIASbar () asm (\"bar_assembler\");\n+void ALIASbar ()\n+{\n+}\n+\n+unsigned ALIASbuz asm (\"buzz_assembler\") = 5;\n+\n+int main ()\n+{\n+}"}]}