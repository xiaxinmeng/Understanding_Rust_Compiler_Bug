{"sha": "ae606c28453655b0bd999c9cc1c7800c214a6ac8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU2MDZjMjg0NTM2NTViMGJkOTk5YzljYzFjNzgwMGMyMTRhNmFjOA==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2012-03-13T11:28:25Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-03-13T11:28:25Z"}, "message": "re PR target/52488 (avr-*:  internal compiler error: in extract_insn, at recog.c:2123)\n\n\tPR target/52488\n\t* config/avr/avr.c (avr_prologue_setup_frame): Cut down stack\n\toffset (size) to a value the insns can deal with.\n\t(expand_epilogue): Ditto.\n\nFrom-SVN: r185329", "tree": {"sha": "3a117bbd43fed7de52223cdc601a30b781e4620d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a117bbd43fed7de52223cdc601a30b781e4620d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae606c28453655b0bd999c9cc1c7800c214a6ac8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae606c28453655b0bd999c9cc1c7800c214a6ac8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae606c28453655b0bd999c9cc1c7800c214a6ac8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae606c28453655b0bd999c9cc1c7800c214a6ac8/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0a6e3f70ada6957540ae9c57c255338cebe54d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0a6e3f70ada6957540ae9c57c255338cebe54d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0a6e3f70ada6957540ae9c57c255338cebe54d3"}], "stats": {"total": 49, "additions": 45, "deletions": 4}, "files": [{"sha": "34d49a2705a65e6a15391daa0fff684d2382241d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae606c28453655b0bd999c9cc1c7800c214a6ac8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae606c28453655b0bd999c9cc1c7800c214a6ac8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae606c28453655b0bd999c9cc1c7800c214a6ac8", "patch": "@@ -1,3 +1,10 @@\n+2012-03-13  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/52488\n+\t* config/avr/avr.c (avr_prologue_setup_frame): Cut down stack\n+\toffset (size) to a value the insns can deal with.\n+\t(expand_epilogue): Ditto.\n+\n 2012-03-13  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n \n \t* config/arm/neon.ml (ops): Fixup expected instructions for"}, {"sha": "d65dd4f0c24d9d3a5f0007d9bab42da60b9485d1", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae606c28453655b0bd999c9cc1c7800c214a6ac8/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae606c28453655b0bd999c9cc1c7800c214a6ac8/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=ae606c28453655b0bd999c9cc1c7800c214a6ac8", "patch": "@@ -827,7 +827,11 @@ avr_prologue_setup_frame (HOST_WIDE_INT size, HARD_REG_SET set)\n   bool isr_p = cfun->machine->is_interrupt || cfun->machine->is_signal;\n   int live_seq = sequent_regs_live ();\n \n+  HOST_WIDE_INT size_max\n+    = (HOST_WIDE_INT) GET_MODE_MASK (AVR_HAVE_8BIT_SP ? QImode : Pmode);\n+\n   bool minimize = (TARGET_CALL_PROLOGUES\n+                   && size < size_max\n                    && live_seq\n                    && !isr_p\n                    && !cfun->machine->is_OS_task\n@@ -933,6 +937,7 @@ avr_prologue_setup_frame (HOST_WIDE_INT size, HARD_REG_SET set)\n               leaf function and thus X has already been saved.  */\n               \n           int irq_state = -1;\n+          HOST_WIDE_INT size_cfa = size;\n           rtx fp_plus_insns, fp, my_fp;\n \n           gcc_assert (frame_pointer_needed\n@@ -951,6 +956,27 @@ avr_prologue_setup_frame (HOST_WIDE_INT size, HARD_REG_SET set)\n               my_fp = all_regs_rtx[FRAME_POINTER_REGNUM];\n             }\n \n+          /* Cut down size and avoid size = 0 so that we don't run\n+             into ICE like PR52488 in the remainder.  */\n+\n+          if (size > size_max)\n+            {\n+              /* Don't error so that insane code from newlib still compiles\n+                 and does not break building newlib.  As PR51345 is implemented\n+                 now, there are multilib variants with -mtiny-stack.\n+                 \n+                 If user wants sanity checks he can use -Wstack-usage=\n+                 or similar options.\n+\n+                 For CFA we emit the original, non-saturated size so that\n+                 the generic machinery is aware of the real stack usage and\n+                 will print the above diagnostic as expected.  */\n+              \n+              size = size_max;\n+            }\n+\n+          size = trunc_int_for_mode (size, GET_MODE (my_fp));\n+          \n           /************  Method 1: Adjust frame pointer  ************/\n           \n           start_sequence ();\n@@ -975,7 +1001,7 @@ avr_prologue_setup_frame (HOST_WIDE_INT size, HARD_REG_SET set)\n               RTX_FRAME_RELATED_P (insn) = 1;\n               add_reg_note (insn, REG_CFA_ADJUST_CFA,\n                             gen_rtx_SET (VOIDmode, fp,\n-                                         plus_constant (fp, -size)));\n+                                         plus_constant (fp, -size_cfa)));\n             }\n           \n           /* Copy to stack pointer.  Note that since we've already\n@@ -1003,7 +1029,7 @@ avr_prologue_setup_frame (HOST_WIDE_INT size, HARD_REG_SET set)\n               add_reg_note (insn, REG_CFA_ADJUST_CFA,\n                             gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n                                          plus_constant (stack_pointer_rtx,\n-                                                        -size)));\n+                                                        -size_cfa)));\n             }\n           \n           fp_plus_insns = get_insns ();\n@@ -1026,7 +1052,7 @@ avr_prologue_setup_frame (HOST_WIDE_INT size, HARD_REG_SET set)\n               add_reg_note (insn, REG_CFA_ADJUST_CFA,\n                             gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n                                          plus_constant (stack_pointer_rtx,\n-                                                        -size)));\n+                                                        -size_cfa)));\n               if (frame_pointer_needed)\n                 {\n                   insn = emit_move_insn (fp, stack_pointer_rtx);\n@@ -1048,7 +1074,7 @@ avr_prologue_setup_frame (HOST_WIDE_INT size, HARD_REG_SET set)\n               emit_insn (fp_plus_insns);\n             }\n \n-          cfun->machine->stack_usage += size;\n+          cfun->machine->stack_usage += size_cfa;\n         } /* !minimize && size != 0 */\n     } /* !minimize */\n }\n@@ -1261,6 +1287,7 @@ expand_epilogue (bool sibcall_p)\n       int irq_state = -1;\n       rtx fp, my_fp;\n       rtx fp_plus_insns;\n+      HOST_WIDE_INT size_max;\n \n       gcc_assert (frame_pointer_needed\n                   || !isr_p\n@@ -1277,6 +1304,13 @@ expand_epilogue (bool sibcall_p)\n                   \n           my_fp = all_regs_rtx[FRAME_POINTER_REGNUM];\n         }\n+\n+      /* For rationale see comment in prologue generation.  */\n+\n+      size_max = (HOST_WIDE_INT) GET_MODE_MASK (GET_MODE (my_fp));\n+      if (size > size_max)\n+        size = size_max;\n+      size = trunc_int_for_mode (size, GET_MODE (my_fp));\n               \n       /********** Method 1: Adjust fp register  **********/\n               "}]}