{"sha": "e88a55ab6919346e0afe79bfd13f84ecf9634889", "node_id": "C_kwDOANBUbNoAKGU4OGE1NWFiNjkxOTM0NmUwYWZlNzliZmQxM2Y4NGVjZjk2MzQ4ODk", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-07-28T08:06:30Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-07-29T16:18:54Z"}, "message": "testsuite: Calls to printf are unsafe", "tree": {"sha": "9eaa38b9fe22220fad0990321eeedd2bf31abbee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9eaa38b9fe22220fad0990321eeedd2bf31abbee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e88a55ab6919346e0afe79bfd13f84ecf9634889", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e88a55ab6919346e0afe79bfd13f84ecf9634889", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e88a55ab6919346e0afe79bfd13f84ecf9634889", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e88a55ab6919346e0afe79bfd13f84ecf9634889/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df0dd17b89aaa16f19b3c72f4d49275757b7ea47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df0dd17b89aaa16f19b3c72f4d49275757b7ea47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df0dd17b89aaa16f19b3c72f4d49275757b7ea47"}], "stats": {"total": 422, "additions": 260, "deletions": 162}, "files": [{"sha": "9fa5222d61f5dd81eacade8d17fd26d5e00b1622", "filename": "gcc/testsuite/rust/execute/torture/builtin_macro_cfg.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_cfg.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_cfg.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_cfg.rs?ref=e88a55ab6919346e0afe79bfd13f84ecf9634889", "patch": "@@ -9,10 +9,14 @@ extern \"C\" {\n }\n \n fn print(s: &str) {\n-    printf(\"%s\\n\" as *const str as *const i8, s as *const str as *const i8);\n+    unsafe {\n+        printf(\n+            \"%s\\n\" as *const str as *const i8,\n+            s as *const str as *const i8,\n+        );\n+    }\n }\n \n-\n fn main() -> i32 {\n     let cfg = cfg!(A);\n     if cfg {"}, {"sha": "555d49caf606303e0a3939212d367b816fc08090", "filename": "gcc/testsuite/rust/execute/torture/builtin_macro_concat.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_concat.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_concat.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_concat.rs?ref=e88a55ab6919346e0afe79bfd13f84ecf9634889", "patch": "@@ -8,7 +8,12 @@ extern \"C\" {\n }\n \n fn print(s: &str) {\n-    printf(\"%s\\n\" as *const str as *const i8, s as *const str as *const i8);\n+    unsafe {\n+        printf(\n+            \"%s\\n\" as *const str as *const i8,\n+            s as *const str as *const i8,\n+        );\n+    }\n }\n \n fn main() -> i32 {"}, {"sha": "211ddfc26f207349361e04edef2cd4da74c55dbd", "filename": "gcc/testsuite/rust/execute/torture/builtin_macro_env.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_env.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_env.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_env.rs?ref=e88a55ab6919346e0afe79bfd13f84ecf9634889", "patch": "@@ -10,7 +10,12 @@ extern \"C\" {\n }\n \n fn print(s: &str) {\n-    printf(\"%s\\n\" as *const str as *const i8, s as *const str as *const i8);\n+    unsafe {\n+        printf(\n+            \"%s\\n\" as *const str as *const i8,\n+            s as *const str as *const i8,\n+        );\n+    }\n }\n \n fn main() -> i32 {"}, {"sha": "49da09300a0265332438d68f4af4563be195cfe5", "filename": "gcc/testsuite/rust/execute/torture/builtin_macro_include_bytes.rs", "status": "modified", "additions": 31, "deletions": 29, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_include_bytes.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_include_bytes.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_include_bytes.rs?ref=e88a55ab6919346e0afe79bfd13f84ecf9634889", "patch": "@@ -1,7 +1,7 @@\n // { dg-output \"104\\n33\\n1\\n\" }\n \n macro_rules! include_bytes {\n-  () => {{}};\n+    () => {{}};\n }\n \n extern \"C\" {\n@@ -10,35 +10,37 @@ extern \"C\" {\n \n fn print_int(value: i32) {\n     let s = \"%d\\n\\0\" as *const str as *const i8;\n-    printf(s, value);\n+    unsafe {\n+        printf(s, value);\n+    }\n }\n \n fn main() -> i32 {\n-  let bytes = include_bytes! (\"include.txt\");\n-\n-  print_int (bytes[0] as i32);\n-  print_int (bytes[14] as i32);\n-\n-  let the_bytes = b\"hello, include!\\n\";\n-\n-  let x = bytes[0] == the_bytes[0]\n-    && bytes[1] == the_bytes [1]\n-    && bytes[2] == the_bytes [2]\n-    && bytes[3] == the_bytes [3]\n-    && bytes[4] == the_bytes [4]\n-    && bytes[5] == the_bytes [5]\n-    && bytes[6] == the_bytes [6]\n-    && bytes[7] == the_bytes [7]\n-    && bytes[8] == the_bytes [8]\n-    && bytes[9] == the_bytes [9]\n-    && bytes[10] == the_bytes [10]\n-    && bytes[11] == the_bytes [11]\n-    && bytes[12] == the_bytes [12]\n-    && bytes[13] == the_bytes [13]\n-    && bytes[14] == the_bytes [14]\n-    && bytes[15] == the_bytes [15];\n-\n-  print_int (x as i32);\n-\n-  0\n+    let bytes = include_bytes!(\"include.txt\");\n+\n+    print_int(bytes[0] as i32);\n+    print_int(bytes[14] as i32);\n+\n+    let the_bytes = b\"hello, include!\\n\";\n+\n+    let x = bytes[0] == the_bytes[0]\n+        && bytes[1] == the_bytes[1]\n+        && bytes[2] == the_bytes[2]\n+        && bytes[3] == the_bytes[3]\n+        && bytes[4] == the_bytes[4]\n+        && bytes[5] == the_bytes[5]\n+        && bytes[6] == the_bytes[6]\n+        && bytes[7] == the_bytes[7]\n+        && bytes[8] == the_bytes[8]\n+        && bytes[9] == the_bytes[9]\n+        && bytes[10] == the_bytes[10]\n+        && bytes[11] == the_bytes[11]\n+        && bytes[12] == the_bytes[12]\n+        && bytes[13] == the_bytes[13]\n+        && bytes[14] == the_bytes[14]\n+        && bytes[15] == the_bytes[15];\n+\n+    print_int(x as i32);\n+\n+    0\n }"}, {"sha": "334b9c6f17e908543b9867b4ba354a316faef8f0", "filename": "gcc/testsuite/rust/execute/torture/builtin_macro_include_str.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_include_str.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_include_str.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_include_str.rs?ref=e88a55ab6919346e0afe79bfd13f84ecf9634889", "patch": "@@ -1,23 +1,27 @@\n // { dg-output \"hello, include!\\n\" }\n \n macro_rules! include_str {\n-  () => {{}};\n+    () => {{}};\n }\n \n extern \"C\" {\n     fn printf(fmt: *const i8, ...);\n }\n \n fn print(s: &str) {\n-  printf(\"%s\" as *const str as *const i8, s as *const str as *const i8);\n+    unsafe {\n+        printf(\n+            \"%s\" as *const str as *const i8,\n+            s as *const str as *const i8,\n+        );\n+    }\n }\n \n-\n fn main() -> i32 {\n-  // include_str! (and include_bytes!) allow for an optional trailing comma.\n-  let my_str = include_str! (\"include.txt\",);\n+    // include_str! (and include_bytes!) allow for an optional trailing comma.\n+    let my_str = include_str!(\"include.txt\",);\n \n-  print (my_str);\n+    print(my_str);\n \n-  0\n+    0\n }"}, {"sha": "6153bf5968cd3116402ee986d34850a80007cbeb", "filename": "gcc/testsuite/rust/execute/torture/builtin_macro_line.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_line.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_line.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_line.rs?ref=e88a55ab6919346e0afe79bfd13f84ecf9634889", "patch": "@@ -1,10 +1,12 @@\n-// { dg-output \"15\\n18\\n\" }\n+// { dg-output \"17\\n20\\n\" }\n extern \"C\" {\n     fn printf(fmt: *const i8, ...);\n }\n \n fn print(s: u32) {\n-    printf(\"%u\\n\\0\" as *const str as *const i8, s);\n+    unsafe {\n+        printf(\"%u\\n\\0\" as *const str as *const i8, s);\n+    }\n }\n \n macro_rules! line {"}, {"sha": "6f52c37150ffc39fab9ed22b179e3e2f3c78b672", "filename": "gcc/testsuite/rust/execute/torture/builtin_macros1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macros1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macros1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macros1.rs?ref=e88a55ab6919346e0afe79bfd13f84ecf9634889", "patch": "@@ -8,7 +8,9 @@ extern \"C\" {\n }\n \n fn print(s: &str) {\n-    printf(\"%s\\n\\0\" as *const str as *const i8, s);\n+    unsafe {\n+        printf(\"%s\\n\\0\" as *const str as *const i8, s);\n+    }\n }\n \n fn main() -> i32 {"}, {"sha": "6c0facb3d6aa3b22aa7c8b5bcbfac7734819e2e2", "filename": "gcc/testsuite/rust/execute/torture/builtin_macros3.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macros3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macros3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macros3.rs?ref=e88a55ab6919346e0afe79bfd13f84ecf9634889", "patch": "@@ -8,7 +8,9 @@ extern \"C\" {\n }\n \n fn print(s: u32) {\n-    printf(\"%u\\n\\0\" as *const str as *const i8, s);\n+    unsafe {\n+        printf(\"%u\\n\\0\" as *const str as *const i8, s);\n+    }\n }\n \n fn main() -> i32 {\n@@ -21,4 +23,5 @@ fn main() -> i32 {\n     print(c1);\n \n     0\n-}\n\\ No newline at end of file\n+}\n+"}, {"sha": "155a440ee04c7e225803b39e4aa5875937688894", "filename": "gcc/testsuite/rust/execute/torture/macros10.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros10.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros10.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros10.rs?ref=e88a55ab6919346e0afe79bfd13f84ecf9634889", "patch": "@@ -5,7 +5,9 @@ extern \"C\" {\n \n fn print_int(value: i32) {\n     let s = \"%d\\n\\0\" as *const str as *const i8;\n-    printf(s, value);\n+    unsafe {\n+        printf(s, value);\n+    }\n }\n \n macro_rules! add_exprs {"}, {"sha": "d310dff9ba85dbf2c43370942a3c5d45f5533a5b", "filename": "gcc/testsuite/rust/execute/torture/macros12.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros12.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros12.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros12.rs?ref=e88a55ab6919346e0afe79bfd13f84ecf9634889", "patch": "@@ -5,7 +5,9 @@ extern \"C\" {\n \n fn print_int(value: i32) {\n     let s = \"%d\\n\\0\" as *const str as *const i8;\n-    printf(s, value);\n+    unsafe {\n+        printf(s, value);\n+    }\n }\n \n macro_rules! add_exprs {"}, {"sha": "afb20264625e953b4f875e59d4cf7277e242acef", "filename": "gcc/testsuite/rust/execute/torture/macros13.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros13.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros13.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros13.rs?ref=e88a55ab6919346e0afe79bfd13f84ecf9634889", "patch": "@@ -5,7 +5,9 @@ extern \"C\" {\n \n fn print_int(value: i32) {\n     let s = \"%d\\n\\0\" as *const str as *const i8;\n-    printf(s, value);\n+    unsafe {\n+        printf(s, value);\n+    }\n }\n \n macro_rules! add_exprs {"}, {"sha": "00656546d4c5254fa1856f7d296e0d8536c8881a", "filename": "gcc/testsuite/rust/execute/torture/macros14.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros14.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros14.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros14.rs?ref=e88a55ab6919346e0afe79bfd13f84ecf9634889", "patch": "@@ -5,7 +5,9 @@ extern \"C\" {\n \n fn print_int(value: i32) {\n     let s = \"%d\\n\\0\" as *const str as *const i8;\n-    printf(s, value);\n+    unsafe {\n+        printf(s, value);\n+    }\n }\n \n macro_rules! add_exprs {"}, {"sha": "3f291ace98ed77703b9ffa1a8a678f0583cd21e2", "filename": "gcc/testsuite/rust/execute/torture/macros22.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros22.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros22.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros22.rs?ref=e88a55ab6919346e0afe79bfd13f84ecf9634889", "patch": "@@ -1,9 +1,11 @@\n // { dg-output \"1\\n2\\nNaN\\n3\\n\" }\n \n macro_rules! print_num {\n-    ($l:literal) => {\n-        printf(\"%d\\n\\0\" as *const str as *const i8, $l);\n-    };\n+    ($l:literal) => {{\n+        unsafe {\n+            printf(\"%d\\n\\0\" as *const str as *const i8, $l);\n+        }\n+    }};\n }\n \n extern \"C\" {\n@@ -15,7 +17,9 @@ fn main() -> i32 {\n     print_num!(1);\n     print_num!(2);\n \n-    printf(\"NaN\\n\\0\" as *const str as *const i8);\n+    unsafe {\n+        printf(\"NaN\\n\\0\" as *const str as *const i8);\n+    }\n \n     print_num!(3);\n "}, {"sha": "506d660d6aa14b3beab0ea737842a4bd709fa9d9", "filename": "gcc/testsuite/rust/execute/torture/macros29.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros29.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros29.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros29.rs?ref=e88a55ab6919346e0afe79bfd13f84ecf9634889", "patch": "@@ -1,21 +1,23 @@\n // { dg-output \"1\\n\" }\n macro_rules! concat {\n-  () => {{}};\n+    () => {{}};\n }\n \n extern \"C\" {\n-  fn printf(fmt: *const i8, ...);\n+    fn printf(fmt: *const i8, ...);\n }\n \n fn print(s: u32) {\n-  printf(\"%u\\n\\0\" as *const str as *const i8, s);\n+    unsafe {\n+        printf(\"%u\\n\\0\" as *const str as *const i8, s);\n+    }\n }\n \n-fn main () -> i32 {\n-  let res = concat!(\"test2\") == \"test3\";\n-  if !res {\n-    print(1);\n-  }\n+fn main() -> i32 {\n+    let res = concat!(\"test2\") == \"test3\";\n+    if !res {\n+        print(1);\n+    }\n \n-  0\n+    0\n }"}, {"sha": "8f54b05be7d22f83db218d3df4f6105939de38f7", "filename": "gcc/testsuite/rust/execute/torture/macros30.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros30.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros30.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros30.rs?ref=e88a55ab6919346e0afe79bfd13f84ecf9634889", "patch": "@@ -1,22 +1,24 @@\n // { dg-output \"1\\n\" }\n macro_rules! concat {\n-  () => {{}};\n+    () => {{}};\n }\n \n extern \"C\" {\n-  fn printf(fmt: *const i8, ...);\n+    fn printf(fmt: *const i8, ...);\n }\n \n fn print(s: u32) {\n-  printf(\"%u\\n\\0\" as *const str as *const i8, s);\n+    unsafe {\n+        printf(\"%u\\n\\0\" as *const str as *const i8, s);\n+    }\n }\n \n-fn main () -> i32 {\n-  let mut x = concat!(\"x\");\n-  x = concat!(\"y\");\n-  if x == \"y\" {\n-    print(1);\n-  }\n+fn main() -> i32 {\n+    let mut x = concat!(\"x\");\n+    x = concat!(\"y\");\n+    if x == \"y\" {\n+        print(1);\n+    }\n \n-  0\n+    0\n }"}, {"sha": "6ad6d7e3c9978ad50f3c683c311ff30081bb5d63", "filename": "gcc/testsuite/rust/execute/torture/macros31.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros31.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros31.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros31.rs?ref=e88a55ab6919346e0afe79bfd13f84ecf9634889", "patch": "@@ -9,10 +9,14 @@ extern \"C\" {\n }\n \n fn print(s: &str) {\n-    printf(\"%s\\n\" as *const str as *const i8, s as *const str as *const i8);\n+    unsafe {\n+        printf(\n+            \"%s\\n\" as *const str as *const i8,\n+            s as *const str as *const i8,\n+        );\n+    }\n }\n \n-\n fn main() -> i32 {\n     let cfg = cfg!(A) || cfg!(B);\n     if cfg {"}, {"sha": "101dbb5857141d3a675c342a601264bbcf3cbd24", "filename": "gcc/testsuite/rust/execute/torture/match_bool1.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_bool1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_bool1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_bool1.rs?ref=e88a55ab6919346e0afe79bfd13f84ecf9634889", "patch": "@@ -4,41 +4,46 @@ extern \"C\" {\n     fn printf(s: *const i8, ...);\n }\n \n-fn foo (x: bool) -> i32 {\n+fn foo(x: bool) -> i32 {\n     match x {\n-        true => { return 182; },\n-        false => { return 55; },\n+        true => {\n+            return 182;\n+        }\n+        false => {\n+            return 55;\n+        }\n     }\n }\n \n-fn bar (y: i32) {\n-\n+fn bar(y: i32) {\n     match y < 100 {\n         true => {\n             let a = \"%i is less than 100\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n \n-            printf (c, y);\n+            unsafe {\n+                printf(c, y);\n+            }\n         }\n         _ => {\n             let a = \"%i is more than 100\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n \n-            printf (c, y);\n+            unsafe {\n+                printf(c, y);\n+            }\n         }\n     }\n }\n \n+fn main() -> i32 {\n+    let a = foo(true);\n+    let b = foo(false);\n \n-fn main () -> i32 {\n-\n-    let a = foo (true);\n-    let b = foo (false);\n-\n-    bar (a);\n-    bar (b);\n+    bar(a);\n+    bar(b);\n \n     0\n }"}, {"sha": "3546cfb9d8b203bd5265b7ae9ff8674d37d1c044", "filename": "gcc/testsuite/rust/execute/torture/match_byte1.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_byte1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_byte1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_byte1.rs?ref=e88a55ab6919346e0afe79bfd13f84ecf9634889", "patch": "@@ -4,46 +4,53 @@ extern \"C\" {\n     fn printf(s: *const i8, ...);\n }\n \n-fn foo (x: u8) {\n+fn foo(x: u8) {\n     match x {\n         b'a' => {\n             let a = \"a\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n \n         b'\\x07' => {\n             let a = \"seven\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n \n         b'\\'' => {\n             let a = \"quote\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n \n         _ => {\n             let a = \"else\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n     }\n }\n \n-fn main () -> i32 {\n-\n+fn main() -> i32 {\n     let x: u8 = 7;\n \n-    foo (b'a');\n-    foo (x);\n-    foo (b'\\'');\n-    foo (b'\\\\');\n+    foo(b'a');\n+    foo(x);\n+    foo(b'\\'');\n+    foo(b'\\\\');\n \n     0\n }"}, {"sha": "fa65876a9077af2723f4d5df0384118d86ddc7e0", "filename": "gcc/testsuite/rust/execute/torture/match_char1.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_char1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_char1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_char1.rs?ref=e88a55ab6919346e0afe79bfd13f84ecf9634889", "patch": "@@ -4,46 +4,53 @@ extern \"C\" {\n     fn printf(s: *const i8, ...);\n }\n \n-fn foo (x: char) {\n+fn foo(x: char) {\n     match x {\n         'a' => {\n             let a = \"amazing\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n \n         'c' => {\n             let a = \"compiler\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n \n         'p' => {\n             let a = \"productivity\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n \n         _ => {\n             let a = \"wildcard\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n     }\n }\n \n-fn main () -> i32 {\n-\n+fn main() -> i32 {\n     let p = 'p';\n \n-    foo ('a');\n-    foo ('b');\n-    foo ('c');\n-    foo (p);\n+    foo('a');\n+    foo('b');\n+    foo('c');\n+    foo(p);\n \n     0\n }"}, {"sha": "209429added14d06cf297a2fd1a3521f81c2e720", "filename": "gcc/testsuite/rust/execute/torture/match_int1.rs", "status": "modified", "additions": 37, "deletions": 22, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_int1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_int1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_int1.rs?ref=e88a55ab6919346e0afe79bfd13f84ecf9634889", "patch": "@@ -4,91 +4,106 @@ extern \"C\" {\n     fn printf(s: *const i8, ...);\n }\n \n-fn foo_i32 (x: i32) {\n+fn foo_i32(x: i32) {\n     match x {\n         15 => {\n             let a = \"fifteen!\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n \n         _ => {\n             let a = \"other!\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n     }\n }\n \n-fn foo_isize (x: isize) {\n+fn foo_isize(x: isize) {\n     match x {\n         15 => {\n             let a = \"fifteen!\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n \n         _ => {\n             let a = \"other!\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n     }\n }\n \n-fn foo_u32 (x: u32) {\n+fn foo_u32(x: u32) {\n     match x {\n         15 => {\n             let a = \"fifteen!\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n \n         _ => {\n             let a = \"other!\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n     }\n }\n \n-fn foo_usize (x: usize) {\n+fn foo_usize(x: usize) {\n     match x {\n         15 => {\n             let a = \"fifteen!\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n \n         _ => {\n             let a = \"other!\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n     }\n }\n \n-\n-fn main () -> i32 {\n+fn main() -> i32 {\n     let x = -2;\n-    foo_i32 (x);\n-    foo_i32 (334);\n-    foo_isize (-4768);\n-    foo_isize (15);\n+    foo_i32(x);\n+    foo_i32(334);\n+    foo_isize(-4768);\n+    foo_isize(15);\n \n     let y = 127;\n-    foo_u32 (15);\n-    foo_u32 (y);\n-    foo_usize (2394);\n-    foo_usize (15);\n+    foo_u32(15);\n+    foo_u32(y);\n+    foo_usize(2394);\n+    foo_usize(15);\n \n     0\n }"}, {"sha": "bb6aee946f6fefce0ba92ac16233e35cb5b51c62", "filename": "gcc/testsuite/rust/execute/torture/match_loop1.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_loop1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_loop1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_loop1.rs?ref=e88a55ab6919346e0afe79bfd13f84ecf9634889", "patch": "@@ -7,10 +7,10 @@ extern \"C\" {\n enum E {\n     One,\n     Two,\n-    Other\n+    Other,\n }\n \n-fn foo () {\n+fn foo() {\n     let mut x = E::One;\n \n     loop {\n@@ -19,33 +19,38 @@ fn foo () {\n                 let a = \"E::One\\n\\0\";\n                 let b = a as *const str;\n                 let c = b as *const i8;\n-                printf (c);\n+                unsafe {\n+                    printf(c);\n+                }\n \n                 x = E::Two;\n             }\n             E::Two => {\n                 let a = \"E::Two\\n\\0\";\n                 let b = a as *const str;\n                 let c = b as *const i8;\n-                printf (c);\n+                unsafe {\n+                    printf(c);\n+                }\n \n                 x = E::Other;\n             }\n             _ => {\n                 let a = \"break!\\n\\0\";\n                 let b = a as *const str;\n                 let c = b as *const i8;\n-                printf (c);\n+                unsafe {\n+                    printf(c);\n+                }\n \n                 break;\n             }\n         }\n     }\n }\n \n-\n-fn main () -> i32 {\n-    foo ();\n+fn main() -> i32 {\n+    foo();\n \n     0\n }"}, {"sha": "82e9e34a989c7ecdafbb300c8053b835a86a8bec", "filename": "gcc/testsuite/rust/execute/torture/match_range1.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_range1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_range1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_range1.rs?ref=e88a55ab6919346e0afe79bfd13f84ecf9634889", "patch": "@@ -6,29 +6,32 @@ extern \"C\" {\n \n const END_RANGE: i32 = 15;\n \n-fn foo (x: i32) {\n+fn foo(x: i32) {\n     match x {\n         0..=END_RANGE => {\n             let a = \"zero to END_RANGE\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n \n         _ => {\n             let a = \"else\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n     }\n }\n \n-fn main () -> i32 {\n-\n-    foo (11);\n-    foo (15);\n-    foo (21);\n+fn main() -> i32 {\n+    foo(11);\n+    foo(15);\n+    foo(21);\n \n     0\n }"}, {"sha": "8153f9e1c7ecc171d1ef456801dbd8148019d583", "filename": "gcc/testsuite/rust/execute/torture/match_range2.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_range2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_range2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_range2.rs?ref=e88a55ab6919346e0afe79bfd13f84ecf9634889", "patch": "@@ -7,34 +7,39 @@ extern \"C\" {\n const BIG_A: char = 'A';\n const BIG_Z: char = 'Z';\n \n-fn bar (x: char) {\n+fn bar(x: char) {\n     match x {\n-\n         'a'..='z' => {\n             let a = \"lowercase\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n         BIG_A..=BIG_Z => {\n             let a = \"uppercase\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n         _ => {\n             let a = \"other\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n     }\n }\n \n-fn main () -> i32 {\n-    bar ('b');\n-    bar ('X');\n-    bar ('!');\n+fn main() -> i32 {\n+    bar('b');\n+    bar('X');\n+    bar('!');\n \n     0\n }"}, {"sha": "cb61cc0847c05e10bcbab3a3b90617ff9a3a5c29", "filename": "gcc/testsuite/rust/execute/torture/match_tuple1.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_tuple1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88a55ab6919346e0afe79bfd13f84ecf9634889/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_tuple1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_tuple1.rs?ref=e88a55ab6919346e0afe79bfd13f84ecf9634889", "patch": "@@ -30,12 +30,16 @@ fn inspect(f: Foo, g: u8) -> i32 {\n     return 25;\n }\n \n-fn main () -> i32 {\n-    let x = inspect (Foo::B, 2);\n-    let y = inspect (Foo::B, 1);\n+fn main() -> i32 {\n+    let x = inspect(Foo::B, 2);\n+    let y = inspect(Foo::B, 1);\n \n-    printf (\"x:%d\\n\" as *const str as *const i8, x);\n-    printf (\"y:%d\\n\" as *const str as *const i8, y);\n+    unsafe {\n+        printf(\"x:%d\\n\" as *const str as *const i8, x);\n+    }\n+    unsafe {\n+        printf(\"y:%d\\n\" as *const str as *const i8, y);\n+    }\n \n     y - x - 5\n }"}]}