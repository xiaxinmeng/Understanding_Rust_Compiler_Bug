{"sha": "bae56bbbeab4b32d034a8e24ba5a41ddc19facbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFlNTZiYmJlYWI0YjMyZDAzNGE4ZTI0YmE1YTQxZGRjMTlmYWNiZA==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2014-03-11T16:21:33Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2014-03-11T16:21:33Z"}, "message": "Fix arc_predicate_delay_insns ICE suring qt build:\n\n        * config/arc/arc.c (conditionalize_nonjump): New function, broken\n        out of:\n        (arc_ifcvt) .\n        (arc_predicate_delay_insns): Use it.\n\nFrom-SVN: r208488", "tree": {"sha": "2248f4c052f3a53eed7187892779a5ab0f367fd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2248f4c052f3a53eed7187892779a5ab0f367fd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bae56bbbeab4b32d034a8e24ba5a41ddc19facbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bae56bbbeab4b32d034a8e24ba5a41ddc19facbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bae56bbbeab4b32d034a8e24ba5a41ddc19facbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bae56bbbeab4b32d034a8e24ba5a41ddc19facbd/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "167ba5b9dc22350d5fec46299769a4030b5cde4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/167ba5b9dc22350d5fec46299769a4030b5cde4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/167ba5b9dc22350d5fec46299769a4030b5cde4a"}], "stats": {"total": 114, "additions": 60, "deletions": 54}, "files": [{"sha": "d1b7a502361697ef087387e30719a453d2af58dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae56bbbeab4b32d034a8e24ba5a41ddc19facbd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae56bbbeab4b32d034a8e24ba5a41ddc19facbd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bae56bbbeab4b32d034a8e24ba5a41ddc19facbd", "patch": "@@ -1,3 +1,10 @@\n+2014-03-11  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\t* config/arc/arc.c (conditionalize_nonjump): New function, broken\n+\tout of:\n+\t(arc_ifcvt) .\n+\t(arc_predicate_delay_insns): Use it.\n+\n 2014-03-11  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \t* config/arc/predicates.md (extend_operand): During/after reload,"}, {"sha": "d84da6f67bf7ce3b8a8290d3e07eae123b1e3cd0", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 53, "deletions": 54, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae56bbbeab4b32d034a8e24ba5a41ddc19facbd/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae56bbbeab4b32d034a8e24ba5a41ddc19facbd/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=bae56bbbeab4b32d034a8e24ba5a41ddc19facbd", "patch": "@@ -8171,6 +8171,50 @@ arc_get_ccfsm_cond (struct arc_ccfsm *statep, bool reverse)\n \t\t\t copy_rtx (XEXP (cond, 0)), copy_rtx (XEXP (cond, 1)));\n }\n \n+/* Return version of PAT conditionalized with COND, which is part of INSN.\n+   ANNULLED indicates if INSN is an annulled delay-slot insn.\n+   Register further changes if necessary.  */\n+static rtx\n+conditionalize_nonjump (rtx pat, rtx cond, rtx insn, bool annulled)\n+{\n+  /* For commutative operators, we generally prefer to have\n+     the first source match the destination.  */\n+  if (GET_CODE (pat) == SET)\n+    {\n+      rtx src = SET_SRC (pat);\n+\n+      if (COMMUTATIVE_P (src))\n+\t{\n+\t  rtx src0 = XEXP (src, 0);\n+\t  rtx src1 = XEXP (src, 1);\n+\t  rtx dst = SET_DEST (pat);\n+\n+\t  if (rtx_equal_p (src1, dst) && !rtx_equal_p (src0, dst)\n+\t      /* Leave add_n alone - the canonical form is to\n+\t\t have the complex summand first.  */\n+\t      && REG_P (src0))\n+\t    pat = gen_rtx_SET (VOIDmode, dst,\n+\t\t\t       gen_rtx_fmt_ee (GET_CODE (src), GET_MODE (src),\n+\t\t\t\t\t       src1, src0));\n+\t}\n+    }\n+\n+  /* dwarf2out.c:dwarf2out_frame_debug_expr doesn't know\n+     what to do with COND_EXEC.  */\n+  if (RTX_FRAME_RELATED_P (insn))\n+    {\n+      /* If this is the delay slot insn of an anulled branch,\n+\t dwarf2out.c:scan_trace understands the anulling semantics\n+\t without the COND_EXEC.  */\n+      gcc_assert (annulled);\n+      rtx note = alloc_reg_note (REG_FRAME_RELATED_EXPR, pat,\n+\t\t\t\t REG_NOTES (insn));\n+      validate_change (insn, &REG_NOTES (insn), note, 1);\n+    }\n+  pat = gen_rtx_COND_EXEC (VOIDmode, cond, pat);\n+  return pat;\n+}\n+\n /* Use the ccfsm machinery to do if conversion.  */\n \n static unsigned\n@@ -8255,6 +8299,7 @@ arc_ifcvt (void)\n \t  /* Conditionalized insn.  */\n \n \t  rtx prev, pprev, *patp, pat, cond;\n+\t  bool annulled; annulled = false;\n \n \t  /* If this is a delay slot insn in a non-annulled branch,\n \t     don't conditionalize it.  N.B., this should be fine for\n@@ -8264,9 +8309,12 @@ arc_ifcvt (void)\n \t  prev = PREV_INSN (insn);\n \t  pprev = PREV_INSN (prev);\n \t  if (pprev && NEXT_INSN (NEXT_INSN (pprev)) == NEXT_INSN (insn)\n-\t      && JUMP_P (prev) && get_attr_cond (prev) == COND_USE\n-\t      && !INSN_ANNULLED_BRANCH_P (prev))\n-\t    break;\n+\t      && JUMP_P (prev) && get_attr_cond (prev) == COND_USE)\n+\t    {\n+\t      if (!INSN_ANNULLED_BRANCH_P (prev))\n+\t\tbreak;\n+\t      annulled = true;\n+\t    }\n \n \t  patp = &PATTERN (insn);\n \t  pat = *patp;\n@@ -8276,45 +8324,7 @@ arc_ifcvt (void)\n \t      /* ??? don't conditionalize if all side effects are dead\n \t\t in the not-execute case.  */\n \n-\t      /* For commutative operators, we generally prefer to have\n-\t\t the first source match the destination.  */\n-\t      if (GET_CODE (pat) == SET)\n-\t\t{\n-\t\t  rtx src = SET_SRC (pat);\n-\n-\t\t  if (COMMUTATIVE_P (src))\n-\t\t    {\n-\t\t      rtx src0 = XEXP (src, 0);\n-\t\t      rtx src1 = XEXP (src, 1);\n-\t\t      rtx dst = SET_DEST (pat);\n-\n-\t\t      if (rtx_equal_p (src1, dst) && !rtx_equal_p (src0, dst)\n-\t\t\t  /* Leave add_n alone - the canonical form is to\n-\t\t\t     have the complex summand first.  */\n-\t\t\t  && REG_P (src0))\n-\t\t\tpat = gen_rtx_SET (VOIDmode, dst,\n-\t\t\t\t\t   gen_rtx_fmt_ee (GET_CODE (src),\n-\t\t\t\t\t\t\t   GET_MODE (src),\n-\t\t\t\t\t\t\t   src1, src0));\n-\t\t    }\n-\t\t}\n-\n-\t      /* dwarf2out.c:dwarf2out_frame_debug_expr doesn't know\n-\t\t what to do with COND_EXEC.  */\n-\t      if (RTX_FRAME_RELATED_P (insn))\n-\t\t{\n-\t\t  /* If this is the delay slot insn of an anulled branch,\n-\t\t     dwarf2out.c:scan_trace understands the anulling semantics\n-\t\t     without the COND_EXEC.  */\n-\t\t  gcc_assert\n-\t\t   (pprev && NEXT_INSN (NEXT_INSN (pprev)) == NEXT_INSN (insn)\n-\t\t    && JUMP_P (prev) && get_attr_cond (prev) == COND_USE\n-\t\t    && INSN_ANNULLED_BRANCH_P (prev));\n-\t\t  rtx note = alloc_reg_note (REG_FRAME_RELATED_EXPR, pat,\n-\t\t\t\t\t     REG_NOTES (insn));\n-\t\t  validate_change (insn, &REG_NOTES (insn), note, 1);\n-\t\t}\n-\t      pat = gen_rtx_COND_EXEC (VOIDmode, cond, pat);\n+\t      pat = conditionalize_nonjump (pat, cond, insn, annulled);\n \t    }\n \t  else if (simplejump_p (insn))\n \t    {\n@@ -8397,18 +8407,7 @@ arc_predicate_delay_insns (void)\n \tcond = copy_rtx (cond);\n       patp = &PATTERN (dlay);\n       pat = *patp;\n-      /* dwarf2out.c:dwarf2out_frame_debug_expr doesn't know\n-\t what to do with COND_EXEC.  */\n-      if (RTX_FRAME_RELATED_P (dlay))\n-\t{\n-\t  /* As this is the delay slot insn of an anulled branch,\n-\t     dwarf2out.c:scan_trace understands the anulling semantics\n-\t     without the COND_EXEC.  */\n-\t  rtx note = alloc_reg_note (REG_FRAME_RELATED_EXPR, pat,\n-\t\t\t\t     REG_NOTES (dlay));\n-\t  validate_change (dlay, &REG_NOTES (dlay), note, 1);\n-\t}\n-      pat = gen_rtx_COND_EXEC (VOIDmode, cond, pat);\n+      pat = conditionalize_nonjump (pat, cond, insn, true);\n       validate_change (dlay, patp, pat, 1);\n       if (!apply_change_group ())\n \tgcc_unreachable ();"}]}