{"sha": "6737ba67d5250258aa08fa779ddac32f8bca6dfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjczN2JhNjdkNTI1MDI1OGFhMDhmYTc3OWRkYWMzMmY4YmNhNmRmYg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@c2micro.com", "date": "2005-01-27T14:36:17Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2005-01-27T14:36:17Z"}, "message": "re PR middle-end/19583 (Incorrect diagnostic: control may reach end of non-void function '...' being inlined)\n\n\tPR middle-end/19583\n\t* gimple-low.c (try_catch_may_fallthru): New static function.\n\t(block_may_fallthru): Handle TRY_CATCH_EXPR.\n\t* tree-inline.c (expand_call_inline): Don't warn about reaching\n\tthe end of a non-void function being inlined if the function uses\n\ta return slot.\n\nFrom-SVN: r94323", "tree": {"sha": "c04e5a0433039c3cd49001e6fc91f301c7470db5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c04e5a0433039c3cd49001e6fc91f301c7470db5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6737ba67d5250258aa08fa779ddac32f8bca6dfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6737ba67d5250258aa08fa779ddac32f8bca6dfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6737ba67d5250258aa08fa779ddac32f8bca6dfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6737ba67d5250258aa08fa779ddac32f8bca6dfb/comments", "author": null, "committer": null, "parents": [{"sha": "9d72d99675ced5b9f02313c05f01de2a8d03b8d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d72d99675ced5b9f02313c05f01de2a8d03b8d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d72d99675ced5b9f02313c05f01de2a8d03b8d8"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "02cf5fef9aa38c78ebffcb3075e73afe109452ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6737ba67d5250258aa08fa779ddac32f8bca6dfb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6737ba67d5250258aa08fa779ddac32f8bca6dfb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6737ba67d5250258aa08fa779ddac32f8bca6dfb", "patch": "@@ -1,3 +1,12 @@\n+2005-01-27  Ian Lance Taylor  <ian@c2micro.com>\n+\n+\tPR middle-end/19583\n+\t* gimple-low.c (try_catch_may_fallthru): New static function.\n+\t(block_may_fallthru): Handle TRY_CATCH_EXPR.\n+\t* tree-inline.c (expand_call_inline): Don't warn about reaching\n+\tthe end of a non-void function being inlined if the function uses\n+\ta return slot.\n+\n 2005-01-27  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/i386.h (CALL_USED_REGISTERS): Fix comment pastos."}, {"sha": "5165a9a788bc5be528c76b3049f1aa7effade274", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6737ba67d5250258aa08fa779ddac32f8bca6dfb/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6737ba67d5250258aa08fa779ddac32f8bca6dfb/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=6737ba67d5250258aa08fa779ddac32f8bca6dfb", "patch": "@@ -263,6 +263,53 @@ lower_bind_expr (tree_stmt_iterator *tsi, struct lower_data *data)\n   tsi_delink (tsi);\n }\n \n+/* Try to determine whether a TRY_CATCH expression can fall through.\n+   This is a subroutine of block_may_fallthru.  */\n+\n+static bool\n+try_catch_may_fallthru (tree stmt)\n+{\n+  tree_stmt_iterator i;\n+\n+  /* If the TRY block can fall through, the whole TRY_CATCH can\n+     fall through.  */\n+  if (block_may_fallthru (TREE_OPERAND (stmt, 0)))\n+    return true;\n+\n+  i = tsi_start (TREE_OPERAND (stmt, 1));\n+  switch (TREE_CODE (tsi_stmt (i)))\n+    {\n+    case CATCH_EXPR:\n+      /* We expect to see a sequence of CATCH_EXPR trees, each with a\n+\t catch expression and a body.  The whole TRY_CATCH may fall\n+\t through iff any of the catch bodies falls through.  */\n+      for (; !tsi_end_p (i); tsi_next (&i))\n+\t{\n+\t  if (block_may_fallthru (CATCH_BODY (tsi_stmt (i))))\n+\t    return true;\n+\t}\n+      return false;\n+\n+    case EH_FILTER_EXPR:\n+      /* If the exception does not match EH_FILTER_TYPES, we will\n+\t execute EH_FILTER_FAILURE, and we will fall through if that\n+\t falls through.  If the exception does match EH_FILTER_TYPES,\n+\t we will fall through.  We don't know which exceptions may be\n+\t generated, so we just check for EH_FILTER_TYPES being NULL,\n+\t in which case we know that that the exception does not\n+\t match.  */\n+      return (EH_FILTER_TYPES (tsi_stmt (i)) != NULL\n+\t      || block_may_fallthru (EH_FILTER_FAILURE (tsi_stmt (i))));\n+\n+    default:\n+      /* This case represents statements to be executed when an\n+\t exception occurs.  Those statements are implicitly followed\n+\t by a RESX_EXPR to resume execution after the exception.  So\n+\t in this case the TRY_CATCH never falls through.  */\n+      return false;\n+    }\n+}\n+\n /* Try to determine if we can fall out of the bottom of BLOCK.  This guess\n    need not be 100% accurate; simply be conservative and return true if we\n    don't know.  This is used only to avoid stupidly generating extra code.\n@@ -297,6 +344,9 @@ block_may_fallthru (tree block)\n     case BIND_EXPR:\n       return block_may_fallthru (BIND_EXPR_BODY (stmt));\n \n+    case TRY_CATCH_EXPR:\n+      return try_catch_may_fallthru (stmt);\n+\n     case TRY_FINALLY_EXPR:\n       return block_may_fallthru (TREE_OPERAND (stmt, 1));\n "}, {"sha": "120bab0fb21e4932f93b58b40b8593236a8add9e", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6737ba67d5250258aa08fa779ddac32f8bca6dfb/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6737ba67d5250258aa08fa779ddac32f8bca6dfb/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=6737ba67d5250258aa08fa779ddac32f8bca6dfb", "patch": "@@ -1616,9 +1616,13 @@ expand_call_inline (tree *tp, int *walk_subtrees, void *data)\n     id->current_node = edge->callee;\n     copy = copy_body (id);\n \n+    /* If the function uses a return slot, then it may legitimately\n+       fall through while still returning a value, so we have to skip\n+       the warning here.  */\n     if (warn_return_type\n \t&& !TREE_NO_WARNING (fn)\n \t&& !VOID_TYPE_P (TREE_TYPE (TREE_TYPE (fn)))\n+\t&& return_slot_addr == NULL_TREE\n \t&& block_may_fallthru (copy))\n       {\n \twarning (\"control may reach end of non-void function %qD being inlined\","}]}