{"sha": "79f3658a243933ec102cf7c8d2e702645020169e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzlmMzY1OGEyNDM5MzNlYzEwMmNmN2M4ZDJlNzAyNjQ1MDIwMTY5ZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2012-03-19T13:09:44Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-03-19T13:09:44Z"}, "message": "i386.c (ix86_expand_prologue): Use Pmode mode consistently.\n\n\t* config/i386/i386.c (ix86_expand_prologue) <CM_LARGE_PIC>: Use Pmode\n\tmode consistently.  Use ix86_gen_add3.  Assert that Pmode == DImode.\n\t(ix86_expand_split_stack_prologue): Use ix86_gen_add3.\n\t(ix86_split_long_move): Ditto.\n\t(legitimize_tls_address): Use ix86_gen_sub3.\n\t(construct_plt_address): Assert that Pmode == DImode.\n\nFrom-SVN: r185520", "tree": {"sha": "903d73a0086395ca9678278f2a67b82532131b3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/903d73a0086395ca9678278f2a67b82532131b3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79f3658a243933ec102cf7c8d2e702645020169e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79f3658a243933ec102cf7c8d2e702645020169e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79f3658a243933ec102cf7c8d2e702645020169e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79f3658a243933ec102cf7c8d2e702645020169e/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a1b60e499f968e348d3465db67786e2571e8ed96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1b60e499f968e348d3465db67786e2571e8ed96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1b60e499f968e348d3465db67786e2571e8ed96"}], "stats": {"total": 47, "additions": 32, "deletions": 15}, "files": [{"sha": "477fbc00dc2b2c04c222555470111f9082f3d0d0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79f3658a243933ec102cf7c8d2e702645020169e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79f3658a243933ec102cf7c8d2e702645020169e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=79f3658a243933ec102cf7c8d2e702645020169e", "patch": "@@ -1,3 +1,12 @@\n+2012-03-19  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_expand_prologue) <CM_LARGE_PIC>: Use Pmode\n+\tmode consistently.  Use ix86_gen_add3.  Assert that Pmode == DImode.\n+\t(ix86_expand_split_stack_prologue): Use ix86_gen_add3.\n+\t(ix86_split_long_move): Ditto.\n+\t(legitimize_tls_address): Use ix86_gen_sub3.\n+\t(construct_plt_address): Assert that Pmode == DImode.\n+\n 2012-03-18  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md: Remove empty predicates and/or constraints."}, {"sha": "9aa5ee755de1bd8aacf05f47b09288db147142b3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79f3658a243933ec102cf7c8d2e702645020169e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79f3658a243933ec102cf7c8d2e702645020169e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=79f3658a243933ec102cf7c8d2e702645020169e", "patch": "@@ -10458,15 +10458,19 @@ ix86_expand_prologue (void)\n \t{\n \t  if (ix86_cmodel == CM_LARGE_PIC)\n \t    {\n-              rtx tmp_reg = gen_rtx_REG (DImode, R11_REG);\n-\t      rtx label = gen_label_rtx ();\n+\t      rtx label, tmp_reg;\n+\n+\t      gcc_assert (Pmode == DImode);\n+\t      label = gen_label_rtx ();\n \t      emit_label (label);\n \t      LABEL_PRESERVE_P (label) = 1;\n+\t      tmp_reg = gen_rtx_REG (Pmode, R11_REG);\n \t      gcc_assert (REGNO (pic_offset_table_rtx) != REGNO (tmp_reg));\n-\t      insn = emit_insn (gen_set_rip_rex64 (pic_offset_table_rtx, label));\n+\t      insn = emit_insn (gen_set_rip_rex64 (pic_offset_table_rtx,\n+\t\t\t\t\t\t   label));\n \t      insn = emit_insn (gen_set_got_offset_rex64 (tmp_reg, label));\n-\t      insn = emit_insn (gen_adddi3 (pic_offset_table_rtx,\n-\t\t\t\t\t    pic_offset_table_rtx, tmp_reg));\n+\t      insn = emit_insn (ix86_gen_add3 (pic_offset_table_rtx,\n+\t\t\t\t\t       pic_offset_table_rtx, tmp_reg));\n \t    }\n \t  else\n             insn = emit_insn (gen_set_got_rex64 (pic_offset_table_rtx));\n@@ -11196,8 +11200,8 @@ ix86_expand_split_stack_prologue (void)\n       else\n \t{\n \t  emit_move_insn (scratch_reg, offset);\n-\t  emit_insn (gen_adddi3 (scratch_reg, scratch_reg,\n-\t\t\t\t stack_pointer_rtx));\n+\t  emit_insn (ix86_gen_add3 (scratch_reg, scratch_reg,\n+\t\t\t\t    stack_pointer_rtx));\n \t}\n       current = scratch_reg;\n     }\n@@ -11244,6 +11248,7 @@ ix86_expand_split_stack_prologue (void)\n \t{\n \t  HOST_WIDE_INT argval;\n \n+\t  gcc_assert (Pmode == DImode);\n \t  /* When using the large model we need to load the address\n \t     into a register, and we've run out of registers.  So we\n \t     switch to a different calling convention, and we call a\n@@ -11266,7 +11271,7 @@ ix86_expand_split_stack_prologue (void)\n \t      LABEL_PRESERVE_P (label) = 1;\n \t      emit_insn (gen_set_rip_rex64 (reg10, label));\n \t      emit_insn (gen_set_got_offset_rex64 (reg11, label));\n-\t      emit_insn (gen_adddi3 (reg10, reg10, reg11));\n+\t      emit_insn (ix86_gen_add3 (reg10, reg10, reg11));\n \t      x = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, split_stack_fn_large),\n \t\t\t\t  UNSPEC_GOT);\n \t      x = gen_rtx_CONST (Pmode, x);\n@@ -12722,7 +12727,7 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n \t{\n \t  base = get_thread_pointer (true);\n \t  dest = gen_reg_rtx (Pmode);\n-\t  emit_insn (gen_subsi3 (dest, base, off));\n+\t  emit_insn (ix86_gen_sub3 (dest, base, off));\n \t}\n       break;\n \n@@ -12743,7 +12748,7 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n \t{\n \t  base = get_thread_pointer (true);\n \t  dest = gen_reg_rtx (Pmode);\n-\t  emit_insn (gen_subsi3 (dest, base, off));\n+\t  emit_insn (ix86_gen_sub3 (dest, base, off));\n \t}\n       break;\n \n@@ -20626,8 +20631,8 @@ ix86_split_long_move (rtx operands[])\n \t  if (nparts == 3)\n \t    {\n \t      if (TARGET_128BIT_LONG_DOUBLE && mode == XFmode)\n-                emit_insn (gen_addsi3 (stack_pointer_rtx,\n-\t\t\t\t       stack_pointer_rtx, GEN_INT (-4)));\n+                emit_insn (ix86_gen_add3 (stack_pointer_rtx,\n+\t\t\t\t\t  stack_pointer_rtx, GEN_INT (-4)));\n \t      emit_move_insn (part[0][2], part[1][2]);\n \t    }\n \t  else if (nparts == 4)\n@@ -22975,14 +22980,17 @@ ix86_expand_strlen (rtx out, rtx src, rtx eoschar, rtx align)\n rtx\n construct_plt_address (rtx symbol)\n {\n-  rtx tmp = gen_reg_rtx (Pmode);\n-  rtx unspec = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, symbol), UNSPEC_PLTOFF);\n+  rtx tmp, unspec;\n \n   gcc_assert (GET_CODE (symbol) == SYMBOL_REF);\n   gcc_assert (ix86_cmodel == CM_LARGE_PIC);\n+  gcc_assert (Pmode == DImode);\n+\n+  tmp = gen_reg_rtx (Pmode);\n+  unspec = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, symbol), UNSPEC_PLTOFF);\n \n   emit_move_insn (tmp, gen_rtx_CONST (Pmode, unspec));\n-  emit_insn (gen_adddi3 (tmp, tmp, pic_offset_table_rtx));\n+  emit_insn (ix86_gen_add3 (tmp, tmp, pic_offset_table_rtx));\n   return tmp;\n }\n "}]}