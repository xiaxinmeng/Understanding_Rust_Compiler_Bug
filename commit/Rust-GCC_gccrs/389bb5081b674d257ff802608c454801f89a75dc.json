{"sha": "389bb5081b674d257ff802608c454801f89a75dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg5YmI1MDgxYjY3NGQyNTdmZjgwMjYwOGM0NTQ4MDFmODlhNzVkYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-12T13:19:22Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-12T13:19:22Z"}, "message": "(main): Combine tests of single-character suffixes.\n\n(deps_output): Different second parameter: SPACER determines meaning of first\nargument (target, dependency, literal text).\nWrap output correctly.\n\nFrom-SVN: r6224", "tree": {"sha": "d19e22828424c10b2129a9a0de234f031582ff0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d19e22828424c10b2129a9a0de234f031582ff0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/389bb5081b674d257ff802608c454801f89a75dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/389bb5081b674d257ff802608c454801f89a75dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/389bb5081b674d257ff802608c454801f89a75dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/389bb5081b674d257ff802608c454801f89a75dc/comments", "author": null, "committer": null, "parents": [{"sha": "af493865052a8f8a4e33e690717fcaeb30a7e5e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af493865052a8f8a4e33e690717fcaeb30a7e5e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af493865052a8f8a4e33e690717fcaeb30a7e5e8"}], "stats": {"total": 103, "additions": 53, "deletions": 50}, "files": [{"sha": "a73b625878c2bb8fa05c31a2d211c5cd1feeda34", "filename": "gcc/cccp.c", "status": "modified", "additions": 53, "deletions": 50, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/389bb5081b674d257ff802608c454801f89a75dc/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/389bb5081b674d257ff802608c454801f89a75dc/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=389bb5081b674d257ff802608c454801f89a75dc", "patch": "@@ -1865,51 +1865,50 @@ main (argc, argv)\n     deps_column = 0;\n \n     if (deps_target) {\n-      deps_output (deps_target, 0);\n-      deps_output (\":\", 0);\n-    } else if (*in_fname == 0)\n-      deps_output (\"-: \", 0);\n-    else {\n+      deps_output (deps_target, ':');\n+    } else if (*in_fname == 0) {\n+      deps_output (\"-\", ':');\n+    } else {\n+      char *p, *q;\n       int len;\n-      char *p = in_fname;\n-      char *p1 = p;\n-      /* Discard all directory prefixes from P.  */\n-      while (*p1) {\n-\tif (*p1 == '/')\n-\t  p = p1 + 1;\n-\tp1++;\n-      }\n+\n+      /* Discard all directory prefixes from filename.  */\n+      if ((q = rindex (in_fname, '/')) != NULL)\n+\t++q;\n+      else\n+\tq = in_fname;\n+\n+      /* Copy remainder to mungable area.  */\n+      p = alloca (strlen(q) + 8);\n+      strcpy (p, q);\n+\n       /* Output P, but remove known suffixes.  */\n       len = strlen (p);\n-      if (p[len - 2] == '.' && p[len - 1] == 'c')\n-\tdeps_output (p, len - 2);\n-      else if (p[len - 2] == '.' && p[len - 1] == 'C')\n-\tdeps_output (p, len - 2);\n-      else if (p[len - 3] == '.'\n+      q = p + len;\n+      if (len >= 2\n+\t  && p[len - 2] == '.'\n+\t  && index(\"cCsSm\", p[len - 1]))\n+\tq = p + (len - 2);\n+      else if (len >= 3\n+\t       && p[len - 3] == '.'\n \t       && p[len - 2] == 'c'\n \t       && p[len - 1] == 'c')\n-\tdeps_output (p, len - 3);\n-      else if (p[len - 4] == '.'\n+\tq = p + (len - 3);\n+      else if (len >= 4\n+\t       && p[len - 4] == '.'\n \t       && p[len - 3] == 'c'\n \t       && p[len - 2] == 'x'\n \t       && p[len - 1] == 'x')\n-\tdeps_output (p, len - 4);\n-      else if (p[len - 2] == '.' && p[len - 1] == 's')\n-\tdeps_output (p, len - 2);\n-      else if (p[len - 2] == '.' && p[len - 1] == 'S')\n-\tdeps_output (p, len - 2);\n-      else if (p[len - 2] == '.' && p[len - 1] == 'm')\n-\tdeps_output (p, len - 2);\n-      else\n-\tdeps_output (p, 0);\n+\tq = p + (len - 4);\n+\n       /* Supply our own suffix.  */\n #ifndef VMS\n-      deps_output (\".o : \", 0);\n+      strcpy (q, \".o\");\n #else\n-      deps_output (\".obj : \", 0);\n+      strcpy (q, \".obj\");\n #endif\n-      deps_output (in_fname, 0);\n-      deps_output (\" \", 0);\n+\n+      deps_output (p, ':');\n     }\n   }\n \n@@ -4170,11 +4169,8 @@ do_include (buf, limit, op, keyword)\n       ptr->fname = savestring (fname);\n \n       /* For -M, add this file to the dependencies.  */\n-      if (print_deps > (angle_brackets || (system_include_depth > 0))) {\n-\tdeps_output (\"\", 0);\n-\tdeps_output (fname, 0);\n-\tdeps_output (\" \", 0);\n-      }\n+      if (print_deps > (angle_brackets || (system_include_depth > 0)))\n+\tdeps_output (fname, ' ');\n     }   \n \n     /* Handle -H option.  */\n@@ -8925,34 +8921,41 @@ append_include_chain (first, last)\n \f\n /* Add output to `deps_buffer' for the -M switch.\n    STRING points to the text to be output.\n-   SIZE is the number of bytes, or 0 meaning output until a null.\n-   Outputting the empty string breaks the line if it is long enough.  */\n+   SPACER is ':' for targets, ' ' for dependencies, zero for text\n+   to be inserted literally.  */\n \n static void\n-deps_output (string, size)\n+deps_output (string, spacer)\n      char *string;\n-     unsigned size;\n+     int spacer;\n {\n+  int size = strlen (string);\n+\n   if (size == 0)\n-    size = strlen (string);\n+    return;\n \n #ifndef MAX_OUTPUT_COLUMNS\n-#define MAX_OUTPUT_COLUMNS 75\n+#define MAX_OUTPUT_COLUMNS 72\n #endif\n-  if (size == 0 && deps_column != 0\n-      && size + deps_column > MAX_OUTPUT_COLUMNS) {\n-    deps_output (\"\\\\\\n  \", 0);\n+  if (spacer\n+      && deps_column > 0\n+      && (deps_column + size) > MAX_OUTPUT_COLUMNS)\n+  {\n+    deps_output (\" \\\\\\n  \", 0);\n     deps_column = 0;\n   }\n \n-  if (deps_size + size + 1 > deps_allocated_size) {\n-    deps_allocated_size = deps_size + size + 50;\n-    deps_allocated_size *= 2;\n+  if (deps_size + size + 8 > deps_allocated_size) {\n+    deps_allocated_size = (deps_size + size + 50) * 2;\n     deps_buffer = (char *) xrealloc (deps_buffer, deps_allocated_size);\n   }\n+  if (spacer == ' ' && deps_column > 0)\n+    deps_buffer[deps_size++] = ' ';\n   bcopy (string, &deps_buffer[deps_size], size);\n   deps_size += size;\n   deps_column += size;\n+  if (spacer == ':')\n+    deps_buffer[deps_size++] = ':';\n   deps_buffer[deps_size] = 0;\n }\n \f"}]}