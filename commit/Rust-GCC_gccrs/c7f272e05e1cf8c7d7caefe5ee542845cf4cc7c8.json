{"sha": "c7f272e05e1cf8c7d7caefe5ee542845cf4cc7c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdmMjcyZTA1ZTFjZjhjN2Q3Y2FlZmU1ZWU1NDI4NDVjZjRjYzdjOA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-11-29T02:47:42Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-11-30T20:10:26Z"}, "message": "compiler: use correct assignment order for type assertions\n\nFor \"a, b := v.(T)\" we must set a before b.\n\nFor golang/go#13433\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/273906", "tree": {"sha": "4e0c0ac7ef80f00d23e04e1b35c53052f80446af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e0c0ac7ef80f00d23e04e1b35c53052f80446af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7f272e05e1cf8c7d7caefe5ee542845cf4cc7c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7f272e05e1cf8c7d7caefe5ee542845cf4cc7c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7f272e05e1cf8c7d7caefe5ee542845cf4cc7c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7f272e05e1cf8c7d7caefe5ee542845cf4cc7c8/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d8fea8a57068a0c5f0c1df766679a25f4272481", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d8fea8a57068a0c5f0c1df766679a25f4272481", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d8fea8a57068a0c5f0c1df766679a25f4272481"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "e2fc0b5560b3d30b315a65fdd36cd43b240b37d0", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f272e05e1cf8c7d7caefe5ee542845cf4cc7c8/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f272e05e1cf8c7d7caefe5ee542845cf4cc7c8/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=c7f272e05e1cf8c7d7caefe5ee542845cf4cc7c8", "patch": "@@ -1,4 +1,4 @@\n-af683486b4de5503b2b6d9ae974a2ab1eeb92290\n+213abeedc85ed638a878f9457e422897fda3a111\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "25e25364ceed193958395339a438d6f306555d2e", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f272e05e1cf8c7d7caefe5ee542845cf4cc7c8/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f272e05e1cf8c7d7caefe5ee542845cf4cc7c8/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=c7f272e05e1cf8c7d7caefe5ee542845cf4cc7c8", "patch": "@@ -1985,18 +1985,42 @@ Tuple_type_guard_assignment_statement::lower_to_object_type(\n \t\t\t\t\t\t\t    NULL, loc);\n   b->add_statement(val_temp);\n \n-  // ok = CODE(type_descriptor, expr, &val_temp)\n+  // var ok_temp bool\n+  Temporary_statement* ok_temp = NULL;\n+  if (!this->ok_->is_sink_expression())\n+    {\n+      ok_temp = Statement::make_temporary(this->ok_->type(),\n+\t\t\t\t\t  NULL, loc);\n+      b->add_statement(ok_temp);\n+    }\n+\n+  // ok_temp = CODE(type_descriptor, expr, &val_temp)\n   Expression* p1 = Expression::make_type_descriptor(this->type_, loc);\n   Expression* ref = Expression::make_temporary_reference(val_temp, loc);\n   Expression* p3 = Expression::make_unary(OPERATOR_AND, ref, loc);\n   Expression* call = Runtime::make_call(code, loc, 3, p1, this->expr_, p3);\n-  Statement* s = Statement::make_assignment(this->ok_, call, loc);\n+  Statement* s;\n+  if (ok_temp == NULL)\n+    s = Statement::make_statement(call, true);\n+  else\n+    {\n+      Expression* ok_ref = Expression::make_temporary_reference(ok_temp, loc);\n+      s = Statement::make_assignment(ok_ref, call, loc);\n+    }\n   b->add_statement(s);\n \n   // val = val_temp\n   ref = Expression::make_temporary_reference(val_temp, loc);\n   s = Statement::make_assignment(this->val_, ref, loc);\n   b->add_statement(s);\n+\n+  // ok = ok_temp\n+  if (ok_temp != NULL)\n+    {\n+      ref = Expression::make_temporary_reference(ok_temp, loc);\n+      s = Statement::make_assignment(this->ok_, ref, loc);\n+      b->add_statement(s);\n+    }\n }\n \n // Dump the AST representation for a tuple type guard statement."}]}