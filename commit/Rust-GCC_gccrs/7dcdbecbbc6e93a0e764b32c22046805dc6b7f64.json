{"sha": "7dcdbecbbc6e93a0e764b32c22046805dc6b7f64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RjZGJlY2JiYzZlOTNhMGU3NjRiMzJjMjIwNDY4MDVkYzZiN2Y2NA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-09-16T01:10:26Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-09-16T01:10:26Z"}, "message": "(macroexpand): Don't output another error message if have\nalready output error message returned from macarg.\n\nFrom-SVN: r2132", "tree": {"sha": "a81c01d94aeb86e29e587fd91a9f42ca4b196365", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a81c01d94aeb86e29e587fd91a9f42ca4b196365"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7dcdbecbbc6e93a0e764b32c22046805dc6b7f64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dcdbecbbc6e93a0e764b32c22046805dc6b7f64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dcdbecbbc6e93a0e764b32c22046805dc6b7f64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dcdbecbbc6e93a0e764b32c22046805dc6b7f64/comments", "author": null, "committer": null, "parents": [{"sha": "c47851ddce30de5239c96f1a2ce4466efefb6ea6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c47851ddce30de5239c96f1a2ce4466efefb6ea6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c47851ddce30de5239c96f1a2ce4466efefb6ea6"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "c22bddc72d1bf05047b81e9f3b3a9eb204597642", "filename": "gcc/cccp.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dcdbecbbc6e93a0e764b32c22046805dc6b7f64/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dcdbecbbc6e93a0e764b32c22046805dc6b7f64/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=7dcdbecbbc6e93a0e764b32c22046805dc6b7f64", "patch": "@@ -6919,24 +6919,31 @@ macroexpand (hp, op)\n \ti = 0;\n     }\n \n+    /* Don't output an error message if we have already output one for\n+       a parse error above.  */\n     rest_zero = 0;\n-    if (nargs == 0 && i > 0)\n-      error (\"arguments given to macro `%s'\", hp->name);\n-    else if (i < nargs) {\n+    if (nargs == 0 && i > 0) {\n+      if (! parse_error)\n+\terror (\"arguments given to macro `%s'\", hp->name);\n+    } else if (i < nargs) {\n       /* traditional C allows foo() if foo wants one argument.  */\n       if (nargs == 1 && i == 0 && traditional)\n \t;\n       /* the rest args token is allowed to absorb 0 tokens */\n       else if (i == nargs - 1 && defn->rest_args)\n \trest_zero = 1;\n+      else if (parse_error)\n+\t;\n       else if (i == 0)\n \terror (\"macro `%s' used without args\", hp->name);\n       else if (i == 1)\n \terror (\"macro `%s' used with just one arg\", hp->name);\n       else\n \terror (\"macro `%s' used with only %d args\", hp->name, i);\n-    } else if (i > nargs)\n-      error (\"macro `%s' used with too many (%d) args\", hp->name, i);\n+    } else if (i > nargs) {\n+      if (! parse_error)\n+\terror (\"macro `%s' used with too many (%d) args\", hp->name, i);\n+    }\n \n     /* Swallow the closeparen.  */\n     ++instack[indepth].bufp;"}]}