{"sha": "c0985d4ed8bc79ad6cafed12f7fa3089d13879ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA5ODVkNGVkOGJjNzlhZDZjYWZlZDEyZjdmYTMwODlkMTM4NzlhZQ==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2009-06-23T10:15:47Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-06-23T10:15:47Z"}, "message": "sem_attr.adb: Add with and use clauses for Sem_Ch10.\n\n2009-06-23  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_attr.adb: Add with and use clauses for Sem_Ch10.\n\t(Check_Not_Incomplete_Type): Minor reformatting. Retrieve the root type\n\twhen dealing with class-wide types. Detect a legal shadow entity and\n\tretrieve its non-limited view.\n\n\t* sem_ch10.adb (Has_With_Clause): Move the spec and body of the\n\tsubprogram to top package level from Intall_Limited_Withed_Unit.\n\t(Install_Limited_Withed_Unit): Remove spec and body of Has_With_Clause.\n\tAdd check which prevents the installation of a limited view if the\n\tnon-limited view is already visible through a with clause.\n\t(Is_Legal_Shadow_Entity_In_Body): New routine. Detect a residual, but\n\tlegal shadow entity which may occur in subprogram formals of anonymous\n\taccess type.\n\n\t* sem_ch10.ads (Is_Legal_Shadow_Entity_In_Body): New routine.\n\n\t* sem_ch3.adb (Access_Definition): Remove the propagation of flag\n\tFrom_With_Type from the designated type to the generated anonymous\n\taccess type. Remove associated comment.\n\n\t* sem_res.adb Add with and use clauses for Sem_Ch10.\n\t(Full_Designated_Type): Detect a legal shadow entity and retrieve its\n\tnon-limited view. Since the shadow entity may replace a regular\n\tincomplete type, return the available full view.\n\nFrom-SVN: r148844", "tree": {"sha": "c2323c664483500ace95513d11d3ccfe251a282a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2323c664483500ace95513d11d3ccfe251a282a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0985d4ed8bc79ad6cafed12f7fa3089d13879ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0985d4ed8bc79ad6cafed12f7fa3089d13879ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0985d4ed8bc79ad6cafed12f7fa3089d13879ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0985d4ed8bc79ad6cafed12f7fa3089d13879ae/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0d354370f2e1b51efcf45c9241cabd0c7873b977", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d354370f2e1b51efcf45c9241cabd0c7873b977", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d354370f2e1b51efcf45c9241cabd0c7873b977"}], "stats": {"total": 226, "additions": 145, "deletions": 81}, "files": [{"sha": "d0c9c6ce1c942777db4bba3a7c12be38392453a0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0985d4ed8bc79ad6cafed12f7fa3089d13879ae/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0985d4ed8bc79ad6cafed12f7fa3089d13879ae/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c0985d4ed8bc79ad6cafed12f7fa3089d13879ae", "patch": "@@ -1,3 +1,30 @@\n+2009-06-23  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_attr.adb: Add with and use clauses for Sem_Ch10.\n+\t(Check_Not_Incomplete_Type): Minor reformatting. Retrieve the root type\n+\twhen dealing with class-wide types. Detect a legal shadow entity and\n+\tretrieve its non-limited view.\n+\n+\t* sem_ch10.adb (Has_With_Clause): Move the spec and body of the\n+\tsubprogram to top package level from Intall_Limited_Withed_Unit.\n+\t(Install_Limited_Withed_Unit): Remove spec and body of Has_With_Clause.\n+\tAdd check which prevents the installation of a limited view if the\n+\tnon-limited view is already visible through a with clause.\n+\t(Is_Legal_Shadow_Entity_In_Body): New routine. Detect a residual, but\n+\tlegal shadow entity which may occur in subprogram formals of anonymous\n+\taccess type.\n+\n+\t* sem_ch10.ads (Is_Legal_Shadow_Entity_In_Body): New routine.\n+\n+\t* sem_ch3.adb (Access_Definition): Remove the propagation of flag\n+\tFrom_With_Type from the designated type to the generated anonymous\n+\taccess type. Remove associated comment.\n+\n+\t* sem_res.adb Add with and use clauses for Sem_Ch10.\n+\t(Full_Designated_Type): Detect a legal shadow entity and retrieve its\n+\tnon-limited view. Since the shadow entity may replace a regular\n+\tincomplete type, return the available full view.\n+\n 2009-06-23  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch10.adb (Remove_Limited_With_Clause): Clean up code that handles"}, {"sha": "bc68b86b4b843f244bd2d9aa6842d841c510d1aa", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0985d4ed8bc79ad6cafed12f7fa3089d13879ae/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0985d4ed8bc79ad6cafed12f7fa3089d13879ae/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=c0985d4ed8bc79ad6cafed12f7fa3089d13879ae", "patch": "@@ -51,6 +51,7 @@ with Sem_Aux;  use Sem_Aux;\n with Sem_Cat;  use Sem_Cat;\n with Sem_Ch6;  use Sem_Ch6;\n with Sem_Ch8;  use Sem_Ch8;\n+with Sem_Ch10; use Sem_Ch10;\n with Sem_Dist; use Sem_Dist;\n with Sem_Elim; use Sem_Elim;\n with Sem_Eval; use Sem_Eval;\n@@ -1345,15 +1346,32 @@ package body Sem_Attr is\n                E := Prefix (E);\n             end loop;\n \n-            if From_With_Type (Etype (E)) then\n+            Typ := Etype (E);\n+\n+            if From_With_Type (Typ) then\n                Error_Attr_P\n                  (\"prefix of % attribute cannot be an incomplete type\");\n \n             else\n-               if Is_Access_Type (Etype (E)) then\n-                  Typ := Directly_Designated_Type (Etype (E));\n-               else\n-                  Typ := Etype (E);\n+               if Is_Access_Type (Typ) then\n+                  Typ := Directly_Designated_Type (Typ);\n+               end if;\n+\n+               if Is_Class_Wide_Type (Typ) then\n+                  Typ := Root_Type (Typ);\n+               end if;\n+\n+               --  A legal use of a shadow entity occurs only when the unit\n+               --  where the non-limited view resides is imported via a regular\n+               --  with clause in the current body. Such references to shadow\n+               --  entities may occur in subprogram formals.\n+\n+               if Is_Incomplete_Type (Typ)\n+                 and then From_With_Type (Typ)\n+                 and then Present (Non_Limited_View (Typ))\n+                 and then Is_Legal_Shadow_Entity_In_Body (Typ)\n+               then\n+                  Typ := Non_Limited_View (Typ);\n                end if;\n \n                if Ekind (Typ) = E_Incomplete_Type"}, {"sha": "72a0c67fb3825e3c592075f813caaad421880e94", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 72, "deletions": 57, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0985d4ed8bc79ad6cafed12f7fa3089d13879ae/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0985d4ed8bc79ad6cafed12f7fa3089d13879ae/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=c0985d4ed8bc79ad6cafed12f7fa3089d13879ae", "patch": "@@ -108,6 +108,13 @@ package body Sem_Ch10 is\n    --  has not yet been rewritten as a package declaration, and the entity has\n    --  to be retrieved from the Instance_Spec of the unit.\n \n+   function Has_With_Clause\n+     (C_Unit     : Node_Id;\n+      Pack       : Entity_Id;\n+      Is_Limited : Boolean := False) return Boolean;\n+   --  Determine whether compilation unit C_Unit contains a with clause for\n+   --  package Pack. Use flag Is_Limited to designate desired clause kind.\n+\n    procedure Implicit_With_On_Parent (Child_Unit : Node_Id; N : Node_Id);\n    --  If the main unit is a child unit, implicit withs are also added for\n    --  all its ancestors.\n@@ -2802,6 +2809,49 @@ package body Sem_Ch10 is\n       end if;\n    end Get_Parent_Entity;\n \n+   ---------------------\n+   -- Has_With_Clause --\n+   ---------------------\n+\n+   function Has_With_Clause\n+     (C_Unit     : Node_Id;\n+      Pack       : Entity_Id;\n+      Is_Limited : Boolean := False) return Boolean\n+   is\n+      Item : Node_Id;\n+      Nam  : Entity_Id;\n+\n+   begin\n+      if Present (Context_Items (C_Unit)) then\n+         Item := First (Context_Items (C_Unit));\n+         while Present (Item) loop\n+            if Nkind (Item) = N_With_Clause then\n+\n+               --  Retrieve the entity of the imported compilation unit\n+\n+               if Nkind (Name (Item)) = N_Selected_Component then\n+                  Nam := Entity (Selector_Name (Name (Item)));\n+               else\n+                  Nam := Entity (Name (Item));\n+               end if;\n+\n+               if Nam = Pack\n+                 and then\n+                   ((Is_Limited and then Limited_Present (Item))\n+                       or else\n+                    (not Is_Limited and then not Limited_Present (Item)))\n+               then\n+                  return True;\n+               end if;\n+            end if;\n+\n+            Next (Item);\n+         end loop;\n+      end if;\n+\n+      return False;\n+   end Has_With_Clause;\n+\n    -----------------------------\n    -- Implicit_With_On_Parent --\n    -----------------------------\n@@ -3558,12 +3608,6 @@ package body Sem_Ch10 is\n                   Install_Limited_Withed_Unit (Item);\n                end if;\n             end if;\n-\n-         --  All items other than Limited_With clauses are ignored (they were\n-         --  installed separately early on by Install_Context_Clause).\n-\n-         else\n-            null;\n          end if;\n \n          Next (Item);\n@@ -3913,14 +3957,6 @@ package body Sem_Ch10 is\n       --  Determine whether any package in the ancestor chain starting with\n       --  C_Unit has a limited with clause for package Pack.\n \n-      function Has_With_Clause\n-        (C_Unit     : Node_Id;\n-         Pack       : Entity_Id;\n-         Is_Limited : Boolean := False) return Boolean;\n-      --  Determine whether compilation unit C_Unit contains a with clause\n-      --  for package Pack. Use flag Is_Limited to designate desired clause\n-      --  kind. This is a subsidiary routine to Has_Limited_With_Clause.\n-\n       function Is_Visible_Through_Renamings (P : Entity_Id) return Boolean;\n       --  Check if some package installed though normal with-clauses has a\n       --  renaming declaration of package P. AARM 10.1.2(21/2).\n@@ -4253,49 +4289,6 @@ package body Sem_Ch10 is\n          return False;\n       end Has_Limited_With_Clause;\n \n-      ---------------------\n-      -- Has_With_Clause --\n-      ---------------------\n-\n-      function Has_With_Clause\n-        (C_Unit     : Node_Id;\n-         Pack       : Entity_Id;\n-         Is_Limited : Boolean := False) return Boolean\n-      is\n-         Item : Node_Id;\n-         Nam  : Entity_Id;\n-\n-      begin\n-         if Present (Context_Items (C_Unit)) then\n-            Item := First (Context_Items (C_Unit));\n-            while Present (Item) loop\n-               if Nkind (Item) = N_With_Clause then\n-\n-                  --  Retrieve the entity of the imported compilation unit\n-\n-                  if Nkind (Name (Item)) = N_Selected_Component then\n-                     Nam := Entity (Selector_Name (Name (Item)));\n-                  else\n-                     Nam := Entity (Name (Item));\n-                  end if;\n-\n-                  if Nam = Pack\n-                    and then\n-                      ((Is_Limited and then Limited_Present (Item))\n-                          or else\n-                       (not Is_Limited and then not Limited_Present (Item)))\n-                  then\n-                     return True;\n-                  end if;\n-               end if;\n-\n-               Next (Item);\n-            end loop;\n-         end if;\n-\n-         return False;\n-      end Has_With_Clause;\n-\n       ----------------------------------\n       -- Is_Visible_Through_Renamings --\n       ----------------------------------\n@@ -4423,6 +4416,15 @@ package body Sem_Ch10 is\n          P := Defining_Identifier (P);\n       end if;\n \n+      --  Do not install the limited-view if the context of the unit is already\n+      --  available through a regular with clause.\n+\n+      if Nkind (Unit (Cunit (Current_Sem_Unit))) = N_Package_Body\n+        and then Has_With_Clause (Cunit (Current_Sem_Unit), P)\n+      then\n+         return;\n+      end if;\n+\n       --  Do not install the limited-view if the full-view is already visible\n       --  through renaming declarations.\n \n@@ -4907,6 +4909,19 @@ package body Sem_Ch10 is\n         and then Present (Parent_Spec (Lib_Unit));\n    end Is_Child_Spec;\n \n+   ------------------------------------\n+   -- Is_Legal_Shadow_Entity_In_Body --\n+   ------------------------------------\n+\n+   function Is_Legal_Shadow_Entity_In_Body (T : Entity_Id) return Boolean is\n+      C_Unit : constant Node_Id := Cunit (Current_Sem_Unit);\n+\n+   begin\n+      return Nkind (Unit (C_Unit)) = N_Package_Body\n+        and then Has_With_Clause (C_Unit,\n+                   Cunit_Entity (Get_Source_Unit (Non_Limited_View (T))));\n+   end Is_Legal_Shadow_Entity_In_Body;\n+\n    -----------------------\n    -- Load_Needed_Body --\n    -----------------------"}, {"sha": "9bf19edbf5987a90a573e549f6ef6360a370c8b0", "filename": "gcc/ada/sem_ch10.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0985d4ed8bc79ad6cafed12f7fa3089d13879ae/gcc%2Fada%2Fsem_ch10.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0985d4ed8bc79ad6cafed12f7fa3089d13879ae/gcc%2Fada%2Fsem_ch10.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.ads?ref=c0985d4ed8bc79ad6cafed12f7fa3089d13879ae", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -43,6 +43,11 @@ package Sem_Ch10 is\n    --  its private part, compiling a private child unit, or compiling the\n    --  private declarations of a public child unit.\n \n+   function Is_Legal_Shadow_Entity_In_Body (T : Entity_Id) return Boolean;\n+   --  Assuming that type T is an incomplete type coming from a limited with\n+   --  view, determine whether the package where T resides is imported through\n+   --  a regular with clause in the current package body.\n+\n    procedure Remove_Context (N : Node_Id);\n    --  Removes the entities from the context clause of the given compilation\n    --  unit from the visibility chains. This is done on exit from a unit as"}, {"sha": "7479d75acfa2f7f1bca73519fcfb4928e4a5df1b", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0985d4ed8bc79ad6cafed12f7fa3089d13879ae/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0985d4ed8bc79ad6cafed12f7fa3089d13879ae/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=c0985d4ed8bc79ad6cafed12f7fa3089d13879ae", "patch": "@@ -840,8 +840,8 @@ package body Sem_Ch3 is\n       Desig_Type := Entity (Subtype_Mark (N));\n \n       Set_Directly_Designated_Type\n-                             (Anon_Type, Desig_Type);\n-      Set_Etype              (Anon_Type, Anon_Type);\n+                (Anon_Type, Desig_Type);\n+      Set_Etype (Anon_Type, Anon_Type);\n \n       --  Make sure the anonymous access type has size and alignment fields\n       --  set, as required by gigi. This is necessary in the case of the\n@@ -873,11 +873,6 @@ package body Sem_Ch3 is\n \n       Set_Is_Public (Anon_Type, Is_Public (Scope (Anon_Type)));\n \n-      --  Ada 2005 (AI-50217): Propagate the attribute that indicates that the\n-      --  designated type comes from the limited view.\n-\n-      Set_From_With_Type (Anon_Type, From_With_Type (Desig_Type));\n-\n       --  Ada 2005 (AI-231): Propagate the access-constant attribute\n \n       Set_Is_Access_Constant (Anon_Type, Constant_Present (N));\n@@ -960,7 +955,7 @@ package body Sem_Ch3 is\n       --  introduce semantic dependencies.\n \n       elsif Nkind (Related_Nod) = N_Function_Specification\n-        and then not From_With_Type (Anon_Type)\n+        and then not From_With_Type (Desig_Type)\n       then\n          if Present (Enclosing_Prot_Type) then\n             Build_Itype_Reference (Anon_Type, Parent (Enclosing_Prot_Type));\n@@ -12046,11 +12041,10 @@ package body Sem_Ch3 is\n       elsif Chars (Parent_Subp) = Name_Op_Eq\n         and then Is_Dispatching_Operation (Parent_Subp)\n         and then Etype (Parent_Subp) = Standard_Boolean\n+        and then not Is_Limited_Type (Etype (First_Formal (Parent_Subp)))\n         and then\n-          not Is_Limited_Type (Etype (First_Formal (Parent_Subp)))\n-        and then\n-          Etype (First_Formal (Parent_Subp))\n-          = Etype (Next_Formal (First_Formal (Parent_Subp)))\n+          Etype (First_Formal (Parent_Subp)) =\n+            Etype (Next_Formal (First_Formal (Parent_Subp)))\n       then\n          Set_Derived_Name;\n "}, {"sha": "e2c6103b1aacec465feb3e475b38547f2beb05ee", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0985d4ed8bc79ad6cafed12f7fa3089d13879ae/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0985d4ed8bc79ad6cafed12f7fa3089d13879ae/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=c0985d4ed8bc79ad6cafed12f7fa3089d13879ae", "patch": "@@ -57,6 +57,7 @@ with Sem_Cat;  use Sem_Cat;\n with Sem_Ch4;  use Sem_Ch4;\n with Sem_Ch6;  use Sem_Ch6;\n with Sem_Ch8;  use Sem_Ch8;\n+with Sem_Ch10; use Sem_Ch10;\n with Sem_Ch13; use Sem_Ch13;\n with Sem_Disp; use Sem_Disp;\n with Sem_Dist; use Sem_Dist;\n@@ -9619,16 +9620,20 @@ package body Sem_Res is\n             --------------------------\n \n             function Full_Designated_Type (T : Entity_Id) return Entity_Id is\n-               Desig : constant Entity_Id := Designated_Type (T);\n+               Desig : Entity_Id := Designated_Type (T);\n+\n             begin\n-               if From_With_Type (Desig)\n-                 and then Is_Incomplete_Type (Desig)\n+               --  Detect a legal use of a shadow entity\n+\n+               if Is_Incomplete_Type (Desig)\n+                 and then From_With_Type (Desig)\n                  and then Present (Non_Limited_View (Desig))\n+                 and then Is_Legal_Shadow_Entity_In_Body (Desig)\n                then\n-                  return Non_Limited_View (Desig);\n-               else\n-                  return Desig;\n+                  Desig := Non_Limited_View (Desig);\n                end if;\n+\n+               return Available_View (Desig);\n             end Full_Designated_Type;\n \n             --  Local Declarations"}]}