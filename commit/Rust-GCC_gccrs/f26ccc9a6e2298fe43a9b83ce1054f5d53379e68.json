{"sha": "f26ccc9a6e2298fe43a9b83ce1054f5d53379e68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI2Y2NjOWE2ZTIyOThmZTQzYTliODNjZTEwNTRmNWQ1MzM3OWU2OA==", "commit": {"author": {"name": "Nala Ginrut", "email": "mulei@gnu.org", "date": "2020-05-18T12:45:37Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:14Z"}, "message": "Add rust-type-resolution", "tree": {"sha": "1e1e73e84aeb738e8430989fd8144127407ada17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e1e73e84aeb738e8430989fd8144127407ada17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f26ccc9a6e2298fe43a9b83ce1054f5d53379e68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f26ccc9a6e2298fe43a9b83ce1054f5d53379e68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f26ccc9a6e2298fe43a9b83ce1054f5d53379e68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f26ccc9a6e2298fe43a9b83ce1054f5d53379e68/comments", "author": {"login": "NalaGinrut", "id": 19734, "node_id": "MDQ6VXNlcjE5NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/19734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NalaGinrut", "html_url": "https://github.com/NalaGinrut", "followers_url": "https://api.github.com/users/NalaGinrut/followers", "following_url": "https://api.github.com/users/NalaGinrut/following{/other_user}", "gists_url": "https://api.github.com/users/NalaGinrut/gists{/gist_id}", "starred_url": "https://api.github.com/users/NalaGinrut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NalaGinrut/subscriptions", "organizations_url": "https://api.github.com/users/NalaGinrut/orgs", "repos_url": "https://api.github.com/users/NalaGinrut/repos", "events_url": "https://api.github.com/users/NalaGinrut/events{/privacy}", "received_events_url": "https://api.github.com/users/NalaGinrut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de950d07f42ccf2d5c0d5d8399414840f22c80ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de950d07f42ccf2d5c0d5d8399414840f22c80ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de950d07f42ccf2d5c0d5d8399414840f22c80ba"}], "stats": {"total": 1089, "additions": 1089, "deletions": 0}, "files": [{"sha": "f56a9eb1aad8db18d2020391147f84c9fdd59294", "filename": "gcc/rust/analysis/rust-type-resolution.cc", "status": "added", "additions": 863, "deletions": 0, "changes": 863, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f26ccc9a6e2298fe43a9b83ce1054f5d53379e68/gcc%2Frust%2Fanalysis%2Frust-type-resolution.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f26ccc9a6e2298fe43a9b83ce1054f5d53379e68/gcc%2Frust%2Fanalysis%2Frust-type-resolution.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-type-resolution.cc?ref=f26ccc9a6e2298fe43a9b83ce1054f5d53379e68", "patch": "@@ -0,0 +1,863 @@\n+#include \"rust-type-resolution.h\"\n+#include \"rust-diagnostics.h\"\n+\n+#define ADD_BUILTIN_TYPE(_X, _S)                                               \\\n+  do                                                                           \\\n+    {                                                                          \\\n+      AST::PathIdentSegment seg (_X);                                          \\\n+      auto typePath = ::std::unique_ptr<AST::TypePathSegment> (                \\\n+\tnew AST::TypePathSegment (::std::move (seg), false,                    \\\n+\t\t\t\t  Linemap::unknown_location ()));              \\\n+      ::std::vector< ::std::unique_ptr<AST::TypePathSegment> > segs;           \\\n+      segs.push_back (::std::move (typePath));                                 \\\n+      auto bType = new AST::TypePath (::std::move (segs),                      \\\n+\t\t\t\t      Linemap::unknown_location (), false);    \\\n+      _S.Insert (_X, bType);                                                   \\\n+    }                                                                          \\\n+  while (0)\n+\n+namespace Rust {\n+namespace Analysis {\n+\n+TypeResolution::TypeResolution (AST::Crate &crate, TopLevelScan &toplevel)\n+  : Resolution (crate, toplevel)\n+{\n+  // push all builtin types - this is probably too basic for future needs\n+  ADD_BUILTIN_TYPE (\"u8\", typeScope);\n+  ADD_BUILTIN_TYPE (\"u16\", typeScope);\n+  ADD_BUILTIN_TYPE (\"u32\", typeScope);\n+  ADD_BUILTIN_TYPE (\"u64\", typeScope);\n+\n+  ADD_BUILTIN_TYPE (\"i8\", typeScope);\n+  ADD_BUILTIN_TYPE (\"i16\", typeScope);\n+  ADD_BUILTIN_TYPE (\"i32\", typeScope);\n+  ADD_BUILTIN_TYPE (\"i64\", typeScope);\n+\n+  ADD_BUILTIN_TYPE (\"f32\", typeScope);\n+  ADD_BUILTIN_TYPE (\"f64\", typeScope);\n+\n+  ADD_BUILTIN_TYPE (\"char\", typeScope);\n+  ADD_BUILTIN_TYPE (\"str\", typeScope);\n+  ADD_BUILTIN_TYPE (\"bool\", typeScope);\n+}\n+\n+TypeResolution::~TypeResolution ()\n+{\n+  typeScope.Pop ();\n+  scope.Pop ();\n+}\n+\n+bool\n+TypeResolution::Resolve (AST::Crate &crate, TopLevelScan &toplevel)\n+{\n+  TypeResolution resolver (crate, toplevel);\n+  return resolver.go ();\n+}\n+\n+bool\n+TypeResolution::go ()\n+{\n+  for (auto &item : crate.items)\n+    item->accept_vis (*this);\n+\n+  return true;\n+}\n+\n+bool\n+TypeResolution::typesAreCompatible (AST::Type *lhs, AST::Type *rhs,\n+\t\t\t\t    Location locus)\n+{\n+  lhs->accept_vis (*this);\n+  rhs->accept_vis (*this);\n+\n+  auto rhsTypeStr = typeComparisonBuffer.back ();\n+  typeComparisonBuffer.pop_back ();\n+  auto lhsTypeStr = typeComparisonBuffer.back ();\n+  typeComparisonBuffer.pop_back ();\n+\n+  // FIXME this needs to handle the cases of an i8 going into an i32 which is\n+  // compatible\n+  if (lhsTypeStr.compare (rhsTypeStr))\n+    {\n+      rust_error_at (locus, \"E0308: expected: %s, found %s\",\n+\t\t     lhsTypeStr.c_str (), rhsTypeStr.c_str ());\n+      return false;\n+    }\n+\n+  return true;\n+}\n+\n+void\n+TypeResolution::visit (AST::Token &tok)\n+{}\n+\n+void\n+TypeResolution::visit (AST::DelimTokenTree &delim_tok_tree)\n+{}\n+\n+void\n+TypeResolution::visit (AST::AttrInputMetaItemContainer &input)\n+{}\n+\n+void\n+TypeResolution::visit (AST::IdentifierExpr &ident_expr)\n+{\n+  AST::Type *type = NULL;\n+  bool ok = scope.Lookup (ident_expr.ident, &type);\n+  if (!ok)\n+    {\n+      rust_error_at (ident_expr.locus, \"unknown identifier\");\n+      return;\n+    }\n+\n+  typeBuffer.push_back (type);\n+}\n+\n+void\n+TypeResolution::visit (AST::Lifetime &lifetime)\n+{}\n+\n+void\n+TypeResolution::visit (AST::LifetimeParam &lifetime_param)\n+{}\n+\n+void\n+TypeResolution::visit (AST::MacroInvocationSemi &macro)\n+{}\n+\n+// rust-path.h\n+void\n+TypeResolution::visit (AST::PathInExpression &path)\n+{\n+  printf (\"PathInExpression: %s\\n\", path.as_string ().c_str ());\n+}\n+\n+void\n+TypeResolution::visit (AST::TypePathSegment &segment)\n+{}\n+void\n+TypeResolution::visit (AST::TypePathSegmentGeneric &segment)\n+{}\n+\n+void\n+TypeResolution::visit (AST::TypePathSegmentFunction &segment)\n+{}\n+\n+void\n+TypeResolution::visit (AST::TypePath &path)\n+{\n+  // this may not be robust enough for type comparisons but lets try it for now\n+  typeComparisonBuffer.push_back (path.as_string ());\n+}\n+\n+void\n+TypeResolution::visit (AST::QualifiedPathInExpression &path)\n+{\n+  typeComparisonBuffer.push_back (path.as_string ());\n+}\n+\n+void\n+TypeResolution::visit (AST::QualifiedPathInType &path)\n+{\n+  typeComparisonBuffer.push_back (path.as_string ());\n+}\n+\n+// rust-expr.h\n+void\n+TypeResolution::visit (AST::LiteralExpr &expr)\n+{\n+  std::string type;\n+  switch (expr.literal.get_lit_type ())\n+    {\n+    case AST::Literal::CHAR:\n+      type = \"char\";\n+      break;\n+\n+    case AST::Literal::STRING:\n+    case AST::Literal::RAW_STRING:\n+      type = \"str\";\n+      break;\n+\n+    case AST::Literal::BOOL:\n+      type = \"bool\";\n+      break;\n+\n+    case AST::Literal::BYTE:\n+      type = \"u8\";\n+      break;\n+\n+      // FIXME these are not always going to be the case\n+      // eg: suffix on the value can change the type\n+    case AST::Literal::FLOAT:\n+      type = \"f32\";\n+      break;\n+\n+    case AST::Literal::INT:\n+      type = \"i32\";\n+      break;\n+\n+    case AST::Literal::BYTE_STRING:\n+    case AST::Literal::RAW_BYTE_STRING:\n+      // FIXME\n+      break;\n+    }\n+\n+  if (type.empty ())\n+    {\n+      rust_error_at (expr.locus, \"unknown literal: %s\",\n+\t\t     expr.literal.as_string ().c_str ());\n+      return;\n+    }\n+\n+  AST::Type *val = NULL;\n+  bool ok = typeScope.Lookup (type, &val);\n+  if (ok)\n+    typeBuffer.push_back (val);\n+  else\n+    rust_error_at (expr.locus, \"unknown literal type: %s\", type.c_str ());\n+}\n+\n+void\n+TypeResolution::visit (AST::AttrInputLiteral &attr_input)\n+{}\n+\n+void\n+TypeResolution::visit (AST::MetaItemLitExpr &meta_item)\n+{}\n+\n+void\n+TypeResolution::visit (AST::MetaItemPathLit &meta_item)\n+{}\n+\n+void\n+TypeResolution::visit (AST::BorrowExpr &expr)\n+{}\n+void\n+TypeResolution::visit (AST::DereferenceExpr &expr)\n+{}\n+void\n+TypeResolution::visit (AST::ErrorPropagationExpr &expr)\n+{}\n+void\n+TypeResolution::visit (AST::NegationExpr &expr)\n+{}\n+\n+void\n+TypeResolution::visit (AST::ArithmeticOrLogicalExpr &expr)\n+{\n+  size_t before;\n+  before = typeBuffer.size ();\n+  expr.visit_lhs (*this);\n+  if (typeBuffer.size () <= before)\n+    {\n+      rust_error_at (expr.locus, \"unable to determine lhs type\");\n+      return;\n+    }\n+\n+  auto lhsType = typeBuffer.back ();\n+  typeBuffer.pop_back ();\n+\n+  before = typeBuffer.size ();\n+  expr.visit_rhs (*this);\n+  if (typeBuffer.size () <= before)\n+    {\n+      rust_error_at (expr.locus, \"unable to determine rhs type\");\n+      return;\n+    }\n+\n+  auto rhsType = typeBuffer.back ();\n+  // not poping because we will be checking they match and the\n+  // scope will require knowledge of the type\n+\n+  // do the lhsType and the rhsType match\n+  typesAreCompatible (lhsType, rhsType, expr.right_expr->get_locus_slow ());\n+}\n+\n+void\n+TypeResolution::visit (AST::ComparisonExpr &expr)\n+{}\n+\n+void\n+TypeResolution::visit (AST::LazyBooleanExpr &expr)\n+{}\n+\n+void\n+TypeResolution::visit (AST::TypeCastExpr &expr)\n+{}\n+\n+void\n+TypeResolution::visit (AST::AssignmentExpr &expr)\n+{\n+  size_t before;\n+  before = typeBuffer.size ();\n+  expr.visit_lhs (*this);\n+  if (typeBuffer.size () <= before)\n+    {\n+      rust_error_at (expr.locus, \"unable to determine lhs type\");\n+      return;\n+    }\n+\n+  auto lhsType = typeBuffer.back ();\n+  typeBuffer.pop_back ();\n+\n+  before = typeBuffer.size ();\n+  expr.visit_rhs (*this);\n+  if (typeBuffer.size () <= before)\n+    {\n+      rust_error_at (expr.locus, \"unable to determine rhs type\");\n+      return;\n+    }\n+\n+  auto rhsType = typeBuffer.back ();\n+  // not poping because we will be checking they match and the\n+  // scope will require knowledge of the type\n+\n+  // do the lhsType and the rhsType match\n+  if (!typesAreCompatible (lhsType, rhsType,\n+\t\t\t   expr.right_expr->get_locus_slow ()))\n+    return;\n+\n+  // is the lhs mutable?\n+}\n+\n+void\n+TypeResolution::visit (AST::CompoundAssignmentExpr &expr)\n+{}\n+\n+void\n+TypeResolution::visit (AST::GroupedExpr &expr)\n+{}\n+// void TypeResolution::visit(ArrayElems& elems) {}\n+void\n+TypeResolution::visit (AST::ArrayElemsValues &elems)\n+{}\n+void\n+TypeResolution::visit (AST::ArrayElemsCopied &elems)\n+{}\n+void\n+TypeResolution::visit (AST::ArrayExpr &expr)\n+{}\n+void\n+TypeResolution::visit (AST::ArrayIndexExpr &expr)\n+{}\n+void\n+TypeResolution::visit (AST::TupleExpr &expr)\n+{}\n+void\n+TypeResolution::visit (AST::TupleIndexExpr &expr)\n+{}\n+void\n+TypeResolution::visit (AST::StructExprStruct &expr)\n+{}\n+// void TypeResolution::visit(StructExprField& field) {}\n+void\n+TypeResolution::visit (AST::StructExprFieldIdentifier &field)\n+{}\n+void\n+TypeResolution::visit (AST::StructExprFieldIdentifierValue &field)\n+{}\n+void\n+TypeResolution::visit (AST::StructExprFieldIndexValue &field)\n+{}\n+void\n+TypeResolution::visit (AST::StructExprStructFields &expr)\n+{}\n+void\n+TypeResolution::visit (AST::StructExprStructBase &expr)\n+{}\n+void\n+TypeResolution::visit (AST::StructExprTuple &expr)\n+{}\n+void\n+TypeResolution::visit (AST::StructExprUnit &expr)\n+{}\n+// void TypeResolution::visit(EnumExprField& field) {}\n+void\n+TypeResolution::visit (AST::EnumExprFieldIdentifier &field)\n+{}\n+void\n+TypeResolution::visit (AST::EnumExprFieldIdentifierValue &field)\n+{}\n+void\n+TypeResolution::visit (AST::EnumExprFieldIndexValue &field)\n+{}\n+void\n+TypeResolution::visit (AST::EnumExprStruct &expr)\n+{}\n+void\n+TypeResolution::visit (AST::EnumExprTuple &expr)\n+{}\n+void\n+TypeResolution::visit (AST::EnumExprFieldless &expr)\n+{}\n+\n+void\n+TypeResolution::visit (AST::CallExpr &expr)\n+{\n+  printf (\"CallExpr: %s\\n\", expr.as_string ().c_str ());\n+}\n+\n+void\n+TypeResolution::visit (AST::MethodCallExpr &expr)\n+{}\n+void\n+TypeResolution::visit (AST::FieldAccessExpr &expr)\n+{}\n+void\n+TypeResolution::visit (AST::ClosureExprInner &expr)\n+{}\n+void\n+TypeResolution::visit (AST::BlockExpr &expr)\n+{}\n+void\n+TypeResolution::visit (AST::ClosureExprInnerTyped &expr)\n+{}\n+void\n+TypeResolution::visit (AST::ContinueExpr &expr)\n+{}\n+void\n+TypeResolution::visit (AST::BreakExpr &expr)\n+{}\n+void\n+TypeResolution::visit (AST::RangeFromToExpr &expr)\n+{}\n+void\n+TypeResolution::visit (AST::RangeFromExpr &expr)\n+{}\n+void\n+TypeResolution::visit (AST::RangeToExpr &expr)\n+{}\n+void\n+TypeResolution::visit (AST::RangeFullExpr &expr)\n+{}\n+void\n+TypeResolution::visit (AST::RangeFromToInclExpr &expr)\n+{}\n+void\n+TypeResolution::visit (AST::RangeToInclExpr &expr)\n+{}\n+void\n+TypeResolution::visit (AST::ReturnExpr &expr)\n+{}\n+void\n+TypeResolution::visit (AST::UnsafeBlockExpr &expr)\n+{}\n+void\n+TypeResolution::visit (AST::LoopExpr &expr)\n+{}\n+void\n+TypeResolution::visit (AST::WhileLoopExpr &expr)\n+{}\n+void\n+TypeResolution::visit (AST::WhileLetLoopExpr &expr)\n+{}\n+void\n+TypeResolution::visit (AST::ForLoopExpr &expr)\n+{}\n+void\n+TypeResolution::visit (AST::IfExpr &expr)\n+{}\n+void\n+TypeResolution::visit (AST::IfExprConseqElse &expr)\n+{}\n+void\n+TypeResolution::visit (AST::IfExprConseqIf &expr)\n+{}\n+void\n+TypeResolution::visit (AST::IfExprConseqIfLet &expr)\n+{}\n+void\n+TypeResolution::visit (AST::IfLetExpr &expr)\n+{}\n+void\n+TypeResolution::visit (AST::IfLetExprConseqElse &expr)\n+{}\n+void\n+TypeResolution::visit (AST::IfLetExprConseqIf &expr)\n+{}\n+void\n+TypeResolution::visit (AST::IfLetExprConseqIfLet &expr)\n+{}\n+// void TypeResolution::visit(MatchCase& match_case) {}\n+void\n+TypeResolution::visit (AST::MatchCaseBlockExpr &match_case)\n+{}\n+void\n+TypeResolution::visit (AST::MatchCaseExpr &match_case)\n+{}\n+void\n+TypeResolution::visit (AST::MatchExpr &expr)\n+{}\n+void\n+TypeResolution::visit (AST::AwaitExpr &expr)\n+{}\n+void\n+TypeResolution::visit (AST::AsyncBlockExpr &expr)\n+{}\n+\n+// rust-item.h\n+void\n+TypeResolution::visit (AST::TypeParam &param)\n+{}\n+// void TypeResolution::visit(WhereClauseItem& item) {}\n+void\n+TypeResolution::visit (AST::LifetimeWhereClauseItem &item)\n+{}\n+void\n+TypeResolution::visit (AST::TypeBoundWhereClauseItem &item)\n+{}\n+void\n+TypeResolution::visit (AST::Method &method)\n+{}\n+void\n+TypeResolution::visit (AST::ModuleBodied &module)\n+{}\n+void\n+TypeResolution::visit (AST::ModuleNoBody &module)\n+{}\n+void\n+TypeResolution::visit (AST::ExternCrate &crate)\n+{}\n+// void TypeResolution::visit(UseTree& use_tree) {}\n+void\n+TypeResolution::visit (AST::UseTreeGlob &use_tree)\n+{}\n+void\n+TypeResolution::visit (AST::UseTreeList &use_tree)\n+{}\n+void\n+TypeResolution::visit (AST::UseTreeRebind &use_tree)\n+{}\n+void\n+TypeResolution::visit (AST::UseDeclaration &use_decl)\n+{}\n+\n+void\n+TypeResolution::visit (AST::Function &function)\n+{\n+  // always emit the function with return type in the event of nil return type\n+  // its  a marker for a void function\n+  scope.Insert (function.function_name, function.return_type.get ());\n+\n+  scope.Push ();\n+  for (auto &param : function.function_params)\n+    {\n+      auto before = letPatternBuffer.size ();\n+      param.param_name->accept_vis (*this);\n+      if (letPatternBuffer.size () <= before)\n+\t{\n+\t  rust_error_at (param.locus, \"failed to analyse parameter name\");\n+\t  return;\n+\t}\n+\n+      auto paramName = letPatternBuffer.back ();\n+      letPatternBuffer.pop_back ();\n+      scope.Insert (paramName.variable_ident, param.type.get ());\n+    }\n+\n+  // walk the expression body\n+  for (auto &stmt : function.function_body->statements)\n+    {\n+      stmt->accept_vis (*this);\n+    }\n+\n+  scope.Pop ();\n+}\n+\n+void\n+TypeResolution::visit (AST::TypeAlias &type_alias)\n+{}\n+void\n+TypeResolution::visit (AST::StructStruct &struct_item)\n+{}\n+void\n+TypeResolution::visit (AST::TupleStruct &tuple_struct)\n+{}\n+void\n+TypeResolution::visit (AST::EnumItem &item)\n+{}\n+void\n+TypeResolution::visit (AST::EnumItemTuple &item)\n+{}\n+void\n+TypeResolution::visit (AST::EnumItemStruct &item)\n+{}\n+void\n+TypeResolution::visit (AST::EnumItemDiscriminant &item)\n+{}\n+void\n+TypeResolution::visit (AST::Enum &enum_item)\n+{}\n+void\n+TypeResolution::visit (AST::Union &union_item)\n+{}\n+\n+void\n+TypeResolution::visit (AST::ConstantItem &const_item)\n+{\n+  printf (\"ConstantItem: %s\\n\", const_item.as_string ().c_str ());\n+}\n+\n+void\n+TypeResolution::visit (AST::StaticItem &static_item)\n+{}\n+void\n+TypeResolution::visit (AST::TraitItemFunc &item)\n+{}\n+void\n+TypeResolution::visit (AST::TraitItemMethod &item)\n+{}\n+void\n+TypeResolution::visit (AST::TraitItemConst &item)\n+{}\n+void\n+TypeResolution::visit (AST::TraitItemType &item)\n+{}\n+void\n+TypeResolution::visit (AST::Trait &trait)\n+{}\n+void\n+TypeResolution::visit (AST::InherentImpl &impl)\n+{}\n+void\n+TypeResolution::visit (AST::TraitImpl &impl)\n+{}\n+// void TypeResolution::visit(ExternalItem& item) {}\n+void\n+TypeResolution::visit (AST::ExternalStaticItem &item)\n+{}\n+void\n+TypeResolution::visit (AST::ExternalFunctionItem &item)\n+{}\n+void\n+TypeResolution::visit (AST::ExternBlock &block)\n+{}\n+\n+// rust-macro.h\n+void\n+TypeResolution::visit (AST::MacroMatchFragment &match)\n+{}\n+void\n+TypeResolution::visit (AST::MacroMatchRepetition &match)\n+{}\n+void\n+TypeResolution::visit (AST::MacroMatcher &matcher)\n+{}\n+void\n+TypeResolution::visit (AST::MacroRulesDefinition &rules_def)\n+{}\n+void\n+TypeResolution::visit (AST::MacroInvocation &macro_invoc)\n+{}\n+void\n+TypeResolution::visit (AST::MetaItemPath &meta_item)\n+{}\n+void\n+TypeResolution::visit (AST::MetaItemSeq &meta_item)\n+{}\n+void\n+TypeResolution::visit (AST::MetaWord &meta_item)\n+{}\n+void\n+TypeResolution::visit (AST::MetaNameValueStr &meta_item)\n+{}\n+void\n+TypeResolution::visit (AST::MetaListPaths &meta_item)\n+{}\n+void\n+TypeResolution::visit (AST::MetaListNameValueStr &meta_item)\n+{}\n+\n+// rust-pattern.h\n+void\n+TypeResolution::visit (AST::LiteralPattern &pattern)\n+{\n+  printf (\"LiteralPattern: %s\\n\", pattern.as_string ().c_str ());\n+}\n+\n+void\n+TypeResolution::visit (AST::IdentifierPattern &pattern)\n+{\n+  letPatternBuffer.push_back (pattern);\n+}\n+\n+void\n+TypeResolution::visit (AST::WildcardPattern &pattern)\n+{}\n+// void TypeResolution::visit(RangePatternBound& bound) {}\n+void\n+TypeResolution::visit (AST::RangePatternBoundLiteral &bound)\n+{}\n+void\n+TypeResolution::visit (AST::RangePatternBoundPath &bound)\n+{}\n+void\n+TypeResolution::visit (AST::RangePatternBoundQualPath &bound)\n+{}\n+void\n+TypeResolution::visit (AST::RangePattern &pattern)\n+{}\n+void\n+TypeResolution::visit (AST::ReferencePattern &pattern)\n+{}\n+// void TypeResolution::visit(StructPatternField& field) {}\n+void\n+TypeResolution::visit (AST::StructPatternFieldTuplePat &field)\n+{}\n+void\n+TypeResolution::visit (AST::StructPatternFieldIdentPat &field)\n+{}\n+void\n+TypeResolution::visit (AST::StructPatternFieldIdent &field)\n+{}\n+void\n+TypeResolution::visit (AST::StructPattern &pattern)\n+{}\n+// void TypeResolution::visit(TupleStructItems& tuple_items) {}\n+void\n+TypeResolution::visit (AST::TupleStructItemsNoRange &tuple_items)\n+{}\n+void\n+TypeResolution::visit (AST::TupleStructItemsRange &tuple_items)\n+{}\n+void\n+TypeResolution::visit (AST::TupleStructPattern &pattern)\n+{}\n+// void TypeResolution::visit(TuplePatternItems& tuple_items) {}\n+void\n+TypeResolution::visit (AST::TuplePatternItemsMultiple &tuple_items)\n+{}\n+void\n+TypeResolution::visit (AST::TuplePatternItemsRanged &tuple_items)\n+{}\n+void\n+TypeResolution::visit (AST::TuplePattern &pattern)\n+{}\n+void\n+TypeResolution::visit (AST::GroupedPattern &pattern)\n+{}\n+void\n+TypeResolution::visit (AST::SlicePattern &pattern)\n+{}\n+\n+// rust-stmt.h\n+void\n+TypeResolution::visit (AST::EmptyStmt &stmt)\n+{}\n+\n+void\n+TypeResolution::visit (AST::LetStmt &stmt)\n+{\n+  if (!stmt.has_init_expr () && !stmt.has_type ())\n+    {\n+      rust_error_at (stmt.locus,\n+\t\t     \"E0282: type annotations or init expression needed\");\n+      return;\n+    }\n+\n+  AST::Type *inferedType = NULL;\n+  if (stmt.has_init_expr ())\n+    {\n+      stmt.init_expr->accept_vis (*this);\n+\n+      if (typeBuffer.empty ())\n+\t{\n+\t  rust_error_at (\n+\t    stmt.init_expr->get_locus_slow (),\n+\t    \"unable to determine type for declaration from init expr\");\n+\t  return;\n+\t}\n+\n+      inferedType = typeBuffer.back ();\n+      typeBuffer.pop_back ();\n+    }\n+\n+  if (stmt.has_type () && stmt.has_init_expr ())\n+    {\n+      if (!typesAreCompatible (stmt.type.get (), inferedType,\n+\t\t\t       stmt.init_expr->get_locus_slow ()))\n+\t{\n+\t  return;\n+\t}\n+    }\n+  else if (stmt.has_type () && !stmt.has_init_expr ())\n+    {\n+      inferedType = stmt.type.get ();\n+    }\n+\n+  // TODO check we know what the type is in the scope requires the builtins to\n+  // be defined at the constructor\n+\n+  // ensure the decl has the type set for compilation later on\n+  if (!stmt.has_type ())\n+    {\n+      stmt.inferedType = inferedType;\n+    }\n+\n+  // get all the names part of this declaration and add the types to the scope\n+  stmt.variables_pattern->accept_vis (*this);\n+  for (auto it = letPatternBuffer.begin (); it != letPatternBuffer.end (); it++)\n+    {\n+      scope.Insert (it->variable_ident, inferedType);\n+    }\n+  letPatternBuffer.clear ();\n+}\n+\n+void\n+TypeResolution::visit (AST::ExprStmtWithoutBlock &stmt)\n+{\n+  stmt.expr->accept_vis (*this);\n+}\n+\n+void\n+TypeResolution::visit (AST::ExprStmtWithBlock &stmt)\n+{}\n+\n+// rust-type.h\n+void\n+TypeResolution::visit (AST::TraitBound &bound)\n+{}\n+\n+void\n+TypeResolution::visit (AST::ImplTraitType &type)\n+{}\n+\n+void\n+TypeResolution::visit (AST::TraitObjectType &type)\n+{}\n+void\n+TypeResolution::visit (AST::ParenthesisedType &type)\n+{}\n+void\n+TypeResolution::visit (AST::ImplTraitTypeOneBound &type)\n+{}\n+void\n+TypeResolution::visit (AST::TraitObjectTypeOneBound &type)\n+{}\n+void\n+TypeResolution::visit (AST::TupleType &type)\n+{}\n+void\n+TypeResolution::visit (AST::NeverType &type)\n+{}\n+void\n+TypeResolution::visit (AST::RawPointerType &type)\n+{}\n+void\n+TypeResolution::visit (AST::ReferenceType &type)\n+{}\n+void\n+TypeResolution::visit (AST::ArrayType &type)\n+{}\n+void\n+TypeResolution::visit (AST::SliceType &type)\n+{}\n+void\n+TypeResolution::visit (AST::InferredType &type)\n+{}\n+void\n+TypeResolution::visit (AST::BareFunctionType &type)\n+{}\n+\n+} // namespace Analysis\n+} // namespace Rust"}, {"sha": "5f8120ce5b1b50e3dae9bac180ca0b17a66779dc", "filename": "gcc/rust/analysis/rust-type-resolution.h", "status": "added", "additions": 226, "deletions": 0, "changes": 226, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f26ccc9a6e2298fe43a9b83ce1054f5d53379e68/gcc%2Frust%2Fanalysis%2Frust-type-resolution.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f26ccc9a6e2298fe43a9b83ce1054f5d53379e68/gcc%2Frust%2Fanalysis%2Frust-type-resolution.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-type-resolution.h?ref=f26ccc9a6e2298fe43a9b83ce1054f5d53379e68", "patch": "@@ -0,0 +1,226 @@\n+#pragma once\n+\n+#include \"rust-resolution.h\"\n+\n+namespace Rust {\n+namespace Analysis {\n+\n+class TypeResolution : public Resolution\n+{\n+public:\n+  ~TypeResolution ();\n+  static bool Resolve (AST::Crate &crate, TopLevelScan &toplevel);\n+\n+  // visitor impl\n+  // rust-ast.h\n+  //  void visit(AttrInput& attr_input);\n+  //  void visit(TokenTree& token_tree);\n+  //  void visit(MacroMatch& macro_match);\n+  void visit (AST::Token &tok) override;\n+  void visit (AST::DelimTokenTree &delim_tok_tree) override;\n+  void visit (AST::AttrInputMetaItemContainer &input) override;\n+  //  void visit(MetaItem& meta_item) override;\n+  //  void vsit(Stmt& stmt) override;\n+  //  void visit(Expr& expr) override;\n+  void visit (AST::IdentifierExpr &ident_expr) override;\n+  //  void visit(Pattern& pattern) override;\n+  //  void visit(Type& type) override;\n+  //  void visit(TypeParamBound& type_param_bound) override;\n+  void visit (AST::Lifetime &lifetime) override;\n+  //  void visit(GenericParam& generic_param) override;\n+  void visit (AST::LifetimeParam &lifetime_param) override;\n+  //  void visit(TraitItem& trait_item) override;\n+  //  void visit(InherentImplItem& inherent_impl_item) override;\n+  //  void visit(TraitImplItem& trait_impl_item) override;\n+  void visit (AST::MacroInvocationSemi &macro) override;\n+\n+  // rust-path.h\n+  void visit (AST::PathInExpression &path) override;\n+  void visit (AST::TypePathSegment &segment) override;\n+  void visit (AST::TypePathSegmentGeneric &segment) override;\n+  void visit (AST::TypePathSegmentFunction &segment) override;\n+  void visit (AST::TypePath &path) override;\n+  void visit (AST::QualifiedPathInExpression &path) override;\n+  void visit (AST::QualifiedPathInType &path) override;\n+\n+  // rust-expr.h\n+  void visit (AST::LiteralExpr &expr) override;\n+  void visit (AST::AttrInputLiteral &attr_input) override;\n+  void visit (AST::MetaItemLitExpr &meta_item) override;\n+  void visit (AST::MetaItemPathLit &meta_item) override;\n+  void visit (AST::BorrowExpr &expr) override;\n+  void visit (AST::DereferenceExpr &expr) override;\n+  void visit (AST::ErrorPropagationExpr &expr) override;\n+  void visit (AST::NegationExpr &expr) override;\n+  void visit (AST::ArithmeticOrLogicalExpr &expr) override;\n+  void visit (AST::ComparisonExpr &expr) override;\n+  void visit (AST::LazyBooleanExpr &expr) override;\n+  void visit (AST::TypeCastExpr &expr) override;\n+  void visit (AST::AssignmentExpr &expr) override;\n+  void visit (AST::CompoundAssignmentExpr &expr) override;\n+  void visit (AST::GroupedExpr &expr) override;\n+  //  void visit(ArrayElems& elems) override;\n+  void visit (AST::ArrayElemsValues &elems) override;\n+  void visit (AST::ArrayElemsCopied &elems) override;\n+  void visit (AST::ArrayExpr &expr) override;\n+  void visit (AST::ArrayIndexExpr &expr) override;\n+  void visit (AST::TupleExpr &expr) override;\n+  void visit (AST::TupleIndexExpr &expr) override;\n+  void visit (AST::StructExprStruct &expr) override;\n+  //  void visit(StructExprField& field) override;\n+  void visit (AST::StructExprFieldIdentifier &field) override;\n+  void visit (AST::StructExprFieldIdentifierValue &field) override;\n+  void visit (AST::StructExprFieldIndexValue &field) override;\n+  void visit (AST::StructExprStructFields &expr) override;\n+  void visit (AST::StructExprStructBase &expr) override;\n+  void visit (AST::StructExprTuple &expr) override;\n+  void visit (AST::StructExprUnit &expr) override;\n+  //  void visit(EnumExprField& field) override;\n+  void visit (AST::EnumExprFieldIdentifier &field) override;\n+  void visit (AST::EnumExprFieldIdentifierValue &field) override;\n+  void visit (AST::EnumExprFieldIndexValue &field) override;\n+  void visit (AST::EnumExprStruct &expr) override;\n+  void visit (AST::EnumExprTuple &expr) override;\n+  void visit (AST::EnumExprFieldless &expr) override;\n+  void visit (AST::CallExpr &expr) override;\n+  void visit (AST::MethodCallExpr &expr) override;\n+  void visit (AST::FieldAccessExpr &expr) override;\n+  void visit (AST::ClosureExprInner &expr) override;\n+  void visit (AST::BlockExpr &expr) override;\n+  void visit (AST::ClosureExprInnerTyped &expr) override;\n+  void visit (AST::ContinueExpr &expr) override;\n+  void visit (AST::BreakExpr &expr) override;\n+  void visit (AST::RangeFromToExpr &expr) override;\n+  void visit (AST::RangeFromExpr &expr) override;\n+  void visit (AST::RangeToExpr &expr) override;\n+  void visit (AST::RangeFullExpr &expr) override;\n+  void visit (AST::RangeFromToInclExpr &expr) override;\n+  void visit (AST::RangeToInclExpr &expr) override;\n+  void visit (AST::ReturnExpr &expr) override;\n+  void visit (AST::UnsafeBlockExpr &expr) override;\n+  void visit (AST::LoopExpr &expr) override;\n+  void visit (AST::WhileLoopExpr &expr) override;\n+  void visit (AST::WhileLetLoopExpr &expr) override;\n+  void visit (AST::ForLoopExpr &expr) override;\n+  void visit (AST::IfExpr &expr) override;\n+  void visit (AST::IfExprConseqElse &expr) override;\n+  void visit (AST::IfExprConseqIf &expr) override;\n+  void visit (AST::IfExprConseqIfLet &expr) override;\n+  void visit (AST::IfLetExpr &expr) override;\n+  void visit (AST::IfLetExprConseqElse &expr) override;\n+  void visit (AST::IfLetExprConseqIf &expr) override;\n+  void visit (AST::IfLetExprConseqIfLet &expr) override;\n+  //  void visit(MatchCase& match_case) override;\n+  void visit (AST::MatchCaseBlockExpr &match_case) override;\n+  void visit (AST::MatchCaseExpr &match_case) override;\n+  void visit (AST::MatchExpr &expr) override;\n+  void visit (AST::AwaitExpr &expr) override;\n+  void visit (AST::AsyncBlockExpr &expr) override;\n+\n+  // rust-item.h\n+  void visit (AST::TypeParam &param) override;\n+  //  void visit(WhereClauseItem& item) override;\n+  void visit (AST::LifetimeWhereClauseItem &item) override;\n+  void visit (AST::TypeBoundWhereClauseItem &item) override;\n+  void visit (AST::Method &method) override;\n+  void visit (AST::ModuleBodied &module) override;\n+  void visit (AST::ModuleNoBody &module) override;\n+  void visit (AST::ExternCrate &crate) override;\n+  //  void visit(UseTree& use_tree) override;\n+  void visit (AST::UseTreeGlob &use_tree) override;\n+  void visit (AST::UseTreeList &use_tree) override;\n+  void visit (AST::UseTreeRebind &use_tree) override;\n+  void visit (AST::UseDeclaration &use_decl) override;\n+  void visit (AST::Function &function) override;\n+  void visit (AST::TypeAlias &type_alias) override;\n+  void visit (AST::StructStruct &struct_item) override;\n+  void visit (AST::TupleStruct &tuple_struct) override;\n+  void visit (AST::EnumItem &item) override;\n+  void visit (AST::EnumItemTuple &item) override;\n+  void visit (AST::EnumItemStruct &item) override;\n+  void visit (AST::EnumItemDiscriminant &item) override;\n+  void visit (AST::Enum &enum_item) override;\n+  void visit (AST::Union &union_item) override;\n+  void visit (AST::ConstantItem &const_item) override;\n+  void visit (AST::StaticItem &static_item) override;\n+  void visit (AST::TraitItemFunc &item) override;\n+  void visit (AST::TraitItemMethod &item) override;\n+  void visit (AST::TraitItemConst &item) override;\n+  void visit (AST::TraitItemType &item) override;\n+  void visit (AST::Trait &trait) override;\n+  void visit (AST::InherentImpl &impl) override;\n+  void visit (AST::TraitImpl &impl) override;\n+  //  void visit(ExternalItem& item) override;\n+  void visit (AST::ExternalStaticItem &item) override;\n+  void visit (AST::ExternalFunctionItem &item) override;\n+  void visit (AST::ExternBlock &block) override;\n+\n+  // rust-macro.h\n+  void visit (AST::MacroMatchFragment &match) override;\n+  void visit (AST::MacroMatchRepetition &match) override;\n+  void visit (AST::MacroMatcher &matcher) override;\n+  void visit (AST::MacroRulesDefinition &rules_def) override;\n+  void visit (AST::MacroInvocation &macro_invoc) override;\n+  void visit (AST::MetaItemPath &meta_item) override;\n+  void visit (AST::MetaItemSeq &meta_item) override;\n+  void visit (AST::MetaWord &meta_item) override;\n+  void visit (AST::MetaNameValueStr &meta_item) override;\n+  void visit (AST::MetaListPaths &meta_item) override;\n+  void visit (AST::MetaListNameValueStr &meta_item) override;\n+\n+  // rust-pattern.h\n+  void visit (AST::LiteralPattern &pattern) override;\n+  void visit (AST::IdentifierPattern &pattern) override;\n+  void visit (AST::WildcardPattern &pattern) override;\n+  //  void visit(RangePatternBound& bound) override;\n+  void visit (AST::RangePatternBoundLiteral &bound) override;\n+  void visit (AST::RangePatternBoundPath &bound) override;\n+  void visit (AST::RangePatternBoundQualPath &bound) override;\n+  void visit (AST::RangePattern &pattern) override;\n+  void visit (AST::ReferencePattern &pattern) override;\n+  //  void visit(StructPatternField& field) override;\n+  void visit (AST::StructPatternFieldTuplePat &field) override;\n+  void visit (AST::StructPatternFieldIdentPat &field) override;\n+  void visit (AST::StructPatternFieldIdent &field) override;\n+  void visit (AST::StructPattern &pattern) override;\n+  //  void visit(TupleStructItems& tuple_items) override;\n+  void visit (AST::TupleStructItemsNoRange &tuple_items) override;\n+  void visit (AST::TupleStructItemsRange &tuple_items) override;\n+  void visit (AST::TupleStructPattern &pattern) override;\n+  //  void visit(TuplePatternItems& tuple_items) override;\n+  void visit (AST::TuplePatternItemsMultiple &tuple_items) override;\n+  void visit (AST::TuplePatternItemsRanged &tuple_items) override;\n+  void visit (AST::TuplePattern &pattern) override;\n+  void visit (AST::GroupedPattern &pattern) override;\n+  void visit (AST::SlicePattern &pattern) override;\n+\n+  // rust-stmt.h\n+  void visit (AST::EmptyStmt &stmt) override;\n+  void visit (AST::LetStmt &stmt) override;\n+  void visit (AST::ExprStmtWithoutBlock &stmt) override;\n+  void visit (AST::ExprStmtWithBlock &stmt) override;\n+\n+  // rust-type.h\n+  void visit (AST::TraitBound &bound) override;\n+  void visit (AST::ImplTraitType &type) override;\n+  void visit (AST::TraitObjectType &type) override;\n+  void visit (AST::ParenthesisedType &type) override;\n+  void visit (AST::ImplTraitTypeOneBound &type) override;\n+  void visit (AST::TraitObjectTypeOneBound &type) override;\n+  void visit (AST::TupleType &type) override;\n+  void visit (AST::NeverType &type) override;\n+  void visit (AST::RawPointerType &type) override;\n+  void visit (AST::ReferenceType &type) override;\n+  void visit (AST::ArrayType &type) override;\n+  void visit (AST::SliceType &type) override;\n+  void visit (AST::InferredType &type) override;\n+  void visit (AST::BareFunctionType &type) override;\n+\n+private:\n+  TypeResolution (AST::Crate &crate, TopLevelScan &toplevel);\n+  bool go () override;\n+  bool typesAreCompatible (AST::Type *lhs, AST::Type *rhs, Location locus);\n+};\n+\n+} // namespace Analysis\n+} // namespace Rust"}]}