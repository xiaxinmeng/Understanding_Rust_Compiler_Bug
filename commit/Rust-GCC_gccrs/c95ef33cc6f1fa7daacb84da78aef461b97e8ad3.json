{"sha": "c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk1ZWYzM2NjNmYxZmE3ZGFhY2I4NGRhNzhhZWY0NjFiOTdlOGFkMw==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2008-09-17T23:23:11Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2008-09-17T23:23:11Z"}, "message": "re PR testsuite/25241 ([C++] DejaGNU does not distinguish between errors and warnings)\n\n\tPR testsuite/25241\n\t* g++.old-deja/g++.brendan/crash7.C: Remove \"error\" or \"warning\" from\n\tmessage for dg-error/dg-warning.\n\t* g++.old-deja/g++.jason/crash11.C: Ditto.\n\t* g++.old-deja/g++.oliva/template1.C: Ditto.\n\t* g++.old-deja/g++.benjamin/tem03.C: Ditto.\n\t* g++.dg/rtti/no-rtti.C: Ditto.\n\t* g++.dg/cpp/pedantic-errors.C: Ditto.\n\t* g++.dg/cpp/string-2.C: Ditto.\n\t* g++.dg/ext/fpreg1.C: Ditto.\n\t* g++.dg/ext/altivec-types-1.C: Ditto.\n\t* g++.dg/warn/write-strings-default.C: Ditto.\n\t* g++.dg/warn/Wvla-2.C: Ditto.\n\t* g++.dg/warn/register-var-1.C: Ditto.\n\t* g++.dg/warn/deprecated-3.C: Ditto.\n\t* g++.dg/warn/pr30551-2.C: Ditto.\n\t* g++.dg/warn/overflow-warn-1.C: Ditto.\n\t* g++.dg/warn/pr30551.C: Ditto.\n\t* g++.dg/warn/pointer-integer-comparison.C: Ditto.\n\t* g++.dg/warn/pr12242.C: Ditto.\n\t* g++.dg/warn/write-strings.C: Ditto.\n\t* g++.dg/warn/overflow-warn-3.C: Ditto.\n\t* g++.dg/warn/overflow-warn-4.C: Ditto.\n\t* g++.dg/warn/overflow-warn-6.C: Ditto.\n\t* g++.dg/parse/crash43.C: Ditto.\n\t* g++.dg/parse/crash44.C: Ditto.\n\t* g++.dg/parse/offsetof8.C: Ditto.\n\t* g++.dg/gomp/pr35158.C: Ditto.\n\t* g++.dg/template/crash81.C: Ditto.\n\nFrom-SVN: r140437", "tree": {"sha": "49864ad0d4ee80db68e3bc2a074c839cf7866dea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49864ad0d4ee80db68e3bc2a074c839cf7866dea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/comments", "author": null, "committer": null, "parents": [{"sha": "116a365bd48cadc0ee03ebdd43fc85c1002b4367", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/116a365bd48cadc0ee03ebdd43fc85c1002b4367", "html_url": "https://github.com/Rust-GCC/gccrs/commit/116a365bd48cadc0ee03ebdd43fc85c1002b4367"}], "stats": {"total": 396, "additions": 215, "deletions": 181}, "files": [{"sha": "8e83278184745ee39ae9df5f44f464fbcd109d95", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "patch": "@@ -1,3 +1,35 @@\n+2008-09-17  Janis Johnson  <janis187@us.ibm.com>\n+\n+\tPR testsuite/25241\n+\t* g++.old-deja/g++.brendan/crash7.C: Remove \"error\" or \"warning\" from\n+\tmessage for dg-error/dg-warning.\n+\t* g++.old-deja/g++.jason/crash11.C: Ditto.\n+\t* g++.old-deja/g++.oliva/template1.C: Ditto.\n+\t* g++.old-deja/g++.benjamin/tem03.C: Ditto.\n+\t* g++.dg/rtti/no-rtti.C: Ditto.\n+\t* g++.dg/cpp/pedantic-errors.C: Ditto.\n+\t* g++.dg/cpp/string-2.C: Ditto.\n+\t* g++.dg/ext/fpreg1.C: Ditto.\n+\t* g++.dg/ext/altivec-types-1.C: Ditto.\n+\t* g++.dg/warn/write-strings-default.C: Ditto.\n+\t* g++.dg/warn/Wvla-2.C: Ditto.\n+\t* g++.dg/warn/register-var-1.C: Ditto.\n+\t* g++.dg/warn/deprecated-3.C: Ditto.\n+\t* g++.dg/warn/pr30551-2.C: Ditto.\n+\t* g++.dg/warn/overflow-warn-1.C: Ditto.\n+\t* g++.dg/warn/pr30551.C: Ditto.\n+\t* g++.dg/warn/pointer-integer-comparison.C: Ditto.\n+\t* g++.dg/warn/pr12242.C: Ditto.\n+\t* g++.dg/warn/write-strings.C: Ditto.\n+\t* g++.dg/warn/overflow-warn-3.C: Ditto.\n+\t* g++.dg/warn/overflow-warn-4.C: Ditto.\n+\t* g++.dg/warn/overflow-warn-6.C: Ditto.\n+\t* g++.dg/parse/crash43.C: Ditto.\n+\t* g++.dg/parse/crash44.C: Ditto.\n+\t* g++.dg/parse/offsetof8.C: Ditto.\n+\t* g++.dg/gomp/pr35158.C: Ditto.\n+\t* g++.dg/template/crash81.C: Ditto.\n+\n 2008-09-18  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/37274"}, {"sha": "0c6045af8d1487369cc725a890dfeae615148369", "filename": "gcc/testsuite/g++.dg/cpp/pedantic-errors.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fpedantic-errors.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fpedantic-errors.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fpedantic-errors.C?ref=c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "patch": "@@ -2,4 +2,4 @@\n /* { dg-options \"-std=c++98 -pedantic-errors\" } */\n \n #if 1   \n-#endif 1 /* { dg-error \"error: extra tokens at end of #endif directive\" } */\n+#endif 1 /* { dg-error \"extra tokens at end of #endif directive\" } */"}, {"sha": "f7148623152868f636587b3a9039f33bf56be47c", "filename": "gcc/testsuite/g++.dg/cpp/string-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fstring-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fstring-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fstring-2.C?ref=c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "patch": "@@ -3,4 +3,4 @@\n // { dg-do compile }\n // { dg-options \"\" }\n \n-const char *s = \"\\q\"; // { dg-warning \"warning: unknown escape sequence\" }\n+const char *s = \"\\q\"; // { dg-warning \"unknown escape sequence\" }"}, {"sha": "d322e5ebe97645d582bbbe7944c80382449e44e8", "filename": "gcc/testsuite/g++.dg/ext/altivec-types-1.C", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-types-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-types-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-types-1.C?ref=c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "patch": "@@ -68,21 +68,21 @@ __vector __complex unsigned long long v_cull; /* { dg-error \"AltiVec types\" \"\" }\n /* These should be rejected because the component types are invalid.  We\n    don't care about the actual error messages here.  */\n \n-__vector __bool unsigned char vbuc;\t/* { dg-error \"error\" \"\" } */\n-__vector __bool signed char vbsc;\t/* { dg-error \"error\" \"\" } */\n-__vector __bool unsigned short vbuh;\t/* { dg-error \"error\" \"\" } */\n-__vector __bool signed short vbsh;\t/* { dg-error \"error\" \"\" } */\n-__vector __bool unsigned int vbui;\t/* { dg-error \"error\" \"\" } */\n-__vector __bool signed int vbsi;\t/* { dg-error \"error\" \"\" } */\n-__vector __bool unsigned vbuj;\t\t/* { dg-error \"error\" \"\" } */\n-__vector __bool signed vbsj;\t\t/* { dg-error \"error\" \"\" } */\n-__vector signed float vsf;\t\t/* { dg-error \"error\" \"\" } */\n-__vector unsigned float vuf;\t\t/* { dg-error \"error\" \"\" } */\n-__vector short float vsf;\t\t/* { dg-error \"error\" \"\" } */\n-__vector signed double vsd;\t\t/* { dg-error \"error\" \"\" } */\n-__vector unsigned double vud;\t\t/* { dg-error \"error\" \"\" } */\n-__vector short double vsd;\t\t/* { dg-error \"error\" \"\" } */\n-__vector __bool float vbf;\t\t/* { dg-error \"error\" \"\" } */\n-__vector __bool double vbd;\t\t/* { dg-error \"error\" \"\" } */\n-__vector __bool short float blf;\t/* { dg-error \"error\" \"\" } */\n-__vector __bool short double vlbd;\t/* { dg-error \"error\" \"\" } */\n+__vector __bool unsigned char vbuc;\t/* { dg-error \"\" \"\" } */\n+__vector __bool signed char vbsc;\t/* { dg-error \"\" \"\" } */\n+__vector __bool unsigned short vbuh;\t/* { dg-error \"\" \"\" } */\n+__vector __bool signed short vbsh;\t/* { dg-error \"\" \"\" } */\n+__vector __bool unsigned int vbui;\t/* { dg-error \"\" \"\" } */\n+__vector __bool signed int vbsi;\t/* { dg-error \"\" \"\" } */\n+__vector __bool unsigned vbuj;\t\t/* { dg-error \"\" \"\" } */\n+__vector __bool signed vbsj;\t\t/* { dg-error \"\" \"\" } */\n+__vector signed float vsf;\t\t/* { dg-error \"\" \"\" } */\n+__vector unsigned float vuf;\t\t/* { dg-error \"\" \"\" } */\n+__vector short float vsf;\t\t/* { dg-error \"\" \"\" } */\n+__vector signed double vsd;\t\t/* { dg-error \"\" \"\" } */\n+__vector unsigned double vud;\t\t/* { dg-error \"\" \"\" } */\n+__vector short double vsd;\t\t/* { dg-error \"\" \"\" } */\n+__vector __bool float vbf;\t\t/* { dg-error \"\" \"\" } */\n+__vector __bool double vbd;\t\t/* { dg-error \"\" \"\" } */\n+__vector __bool short float blf;\t/* { dg-error \"\" \"\" } */\n+__vector __bool short double vlbd;\t/* { dg-error \"\" \"\" } */"}, {"sha": "c5170a4a4b6404e60f1e8485c8a968be2658ad4b", "filename": "gcc/testsuite/g++.dg/ext/fpreg1.C", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ffpreg1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ffpreg1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ffpreg1.C?ref=c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "patch": "@@ -8,7 +8,7 @@ double d;\n // Default initialized __fpreg is OK.\n __fpreg fpreg, fpreg2;\n // But explicitly zero-initialized is an invalid conversion.\n-__fpreg fi = 0; // { dg-error \"error: invalid conversion to '__fpreg'\" }\n+__fpreg fi = 0; // { dg-error \"invalid conversion to '__fpreg'\" }\n \n __fpreg f0 (__fpreg);\n int f1 (__float80);\n@@ -36,47 +36,47 @@ f (void)\n   d = sizeof (fpreg);\n   (void)(fpreg, fpreg);\n   // Invalid operations.\n-  ++fpreg; // { dg-error \"error: invalid operation on '__fpreg'\" }\n-  --fpreg; // { dg-error \"error: invalid operation on '__fpreg'\" }\n-  fpreg++; // { dg-error \"error: invalid operation on '__fpreg'\" }\n-  fpreg--; // { dg-error \"error: invalid operation on '__fpreg'\" }\n-  fpreg = -fpreg; // { dg-error \"error: invalid operation on '__fpreg'\" }\n-  fpreg = ~fpreg; // { dg-error \"error: invalid operation on '__fpreg'\" }\n-  d = !fpreg; // { dg-error \"error: invalid operation on '__fpreg'\" }\n-  d = *fpreg; // { dg-error \"error: invalid type argument\" }\n-  if (fpreg) // { dg-error \"error: invalid conversion from '__fpreg'\" }\n+  ++fpreg; // { dg-error \"invalid operation on '__fpreg'\" }\n+  --fpreg; // { dg-error \"invalid operation on '__fpreg'\" }\n+  fpreg++; // { dg-error \"invalid operation on '__fpreg'\" }\n+  fpreg--; // { dg-error \"invalid operation on '__fpreg'\" }\n+  fpreg = -fpreg; // { dg-error \"invalid operation on '__fpreg'\" }\n+  fpreg = ~fpreg; // { dg-error \"invalid operation on '__fpreg'\" }\n+  d = !fpreg; // { dg-error \"invalid operation on '__fpreg'\" }\n+  d = *fpreg; // { dg-error \"invalid type argument\" }\n+  if (fpreg) // { dg-error \"invalid conversion from '__fpreg'\" }\n     return;\n-  d = fpreg; // { dg-error \"error: invalid conversion from '__fpreg'\" }\n-  d = (double) fpreg; // { dg-error \"error: invalid conversion from '__fpreg'\" }\n-  fpreg = (__fpreg) d; // { dg-error \"error: invalid conversion to '__fpreg'\" }\n-  fpreg = fpreg * fpreg; // { dg-error \"error: invalid operation on '__fpreg'\" }\n-  fpreg = fpreg / fpreg; // { dg-error \"error: invalid operation on '__fpreg'\" }\n-  fpreg = fpreg % fpreg; // { dg-error \"error: invalid operation on '__fpreg'\" }\n-  fpreg = fpreg + fpreg; // { dg-error \"error: invalid operation on '__fpreg'\" }\n-  fpreg = fpreg - fpreg; // { dg-error \"error: invalid operation on '__fpreg'\" }\n-  fpreg = fpreg << fpreg; // { dg-error \"error: invalid operation on '__fpreg'\" }\n-  fpreg = fpreg >> fpreg; // { dg-error \"error: invalid operation on '__fpreg'\" }\n-  d = fpreg < fpreg; // { dg-error \"error: invalid operation on '__fpreg'\" }\n-  d = fpreg > fpreg; // { dg-error \"error: invalid operation on '__fpreg'\" }\n-  d = fpreg <= fpreg; // { dg-error \"error: invalid operation on '__fpreg'\" }\n-  d = fpreg >= fpreg; // { dg-error \"error: invalid operation on '__fpreg'\" }\n-  d = fpreg == fpreg; // { dg-error \"error: invalid operation on '__fpreg'\" }\n-  d = fpreg != fpreg; // { dg-error \"error: invalid operation on '__fpreg'\" }\n-  d = fpreg & fpreg; // { dg-error \"error: invalid operation on '__fpreg'\" }\n-  d = fpreg ^ fpreg; // { dg-error \"error: invalid operation on '__fpreg'\" }\n-  d = fpreg | fpreg; // { dg-error \"error: invalid operation on '__fpreg'\" }\n-  d = fpreg && fpreg; // { dg-error \"error: invalid operation on '__fpreg'\" }\n-  d = fpreg || fpreg; // { dg-error \"error: invalid operation on '__fpreg'\" }\n-  d = (fpreg ? 1 : 2); // { dg-error \"error: invalid conversion from '__fpreg'\" }\n-  fpreg = (d ? fpreg : d); // { dg-error \"error: invalid conversion to '__fpreg'\" }\n-  fpreg *= fpreg; // { dg-error \"error: invalid operation on '__fpreg'|in evaluation\" }\n-  fpreg /= fpreg; // { dg-error \"error: invalid operation on '__fpreg'|in evaluation\" }\n-  fpreg %= fpreg; // { dg-error \"error: invalid operation on '__fpreg'|in evaluation\" }\n-  fpreg += fpreg; // { dg-error \"error: invalid operation on '__fpreg'|in evaluation\" }\n-  fpreg -= fpreg; // { dg-error \"error: invalid operation on '__fpreg'|in evaluation\" }\n-  fpreg <<= fpreg; // { dg-error \"error: invalid operation on '__fpreg'|in evaluation\" }\n-  fpreg >>= fpreg; // { dg-error \"error: invalid operation on '__fpreg'|in evaluation\" }\n-  fpreg &= fpreg; // { dg-error \"error: invalid operation on '__fpreg'|in evaluation\" }\n-  fpreg ^= fpreg; // { dg-error \"error: invalid operation on '__fpreg'|in evaluation\" }\n-  fpreg |= fpreg; // { dg-error \"error: invalid operation on '__fpreg'|in evaluation\" }\n+  d = fpreg; // { dg-error \"invalid conversion from '__fpreg'\" }\n+  d = (double) fpreg; // { dg-error \"invalid conversion from '__fpreg'\" }\n+  fpreg = (__fpreg) d; // { dg-error \"invalid conversion to '__fpreg'\" }\n+  fpreg = fpreg * fpreg; // { dg-error \"invalid operation on '__fpreg'\" }\n+  fpreg = fpreg / fpreg; // { dg-error \"invalid operation on '__fpreg'\" }\n+  fpreg = fpreg % fpreg; // { dg-error \"invalid operation on '__fpreg'\" }\n+  fpreg = fpreg + fpreg; // { dg-error \"invalid operation on '__fpreg'\" }\n+  fpreg = fpreg - fpreg; // { dg-error \"invalid operation on '__fpreg'\" }\n+  fpreg = fpreg << fpreg; // { dg-error \"invalid operation on '__fpreg'\" }\n+  fpreg = fpreg >> fpreg; // { dg-error \"invalid operation on '__fpreg'\" }\n+  d = fpreg < fpreg; // { dg-error \"invalid operation on '__fpreg'\" }\n+  d = fpreg > fpreg; // { dg-error \"invalid operation on '__fpreg'\" }\n+  d = fpreg <= fpreg; // { dg-error \"invalid operation on '__fpreg'\" }\n+  d = fpreg >= fpreg; // { dg-error \"invalid operation on '__fpreg'\" }\n+  d = fpreg == fpreg; // { dg-error \"invalid operation on '__fpreg'\" }\n+  d = fpreg != fpreg; // { dg-error \"invalid operation on '__fpreg'\" }\n+  d = fpreg & fpreg; // { dg-error \"invalid operation on '__fpreg'\" }\n+  d = fpreg ^ fpreg; // { dg-error \"invalid operation on '__fpreg'\" }\n+  d = fpreg | fpreg; // { dg-error \"invalid operation on '__fpreg'\" }\n+  d = fpreg && fpreg; // { dg-error \"invalid operation on '__fpreg'\" }\n+  d = fpreg || fpreg; // { dg-error \"invalid operation on '__fpreg'\" }\n+  d = (fpreg ? 1 : 2); // { dg-error \"invalid conversion from '__fpreg'\" }\n+  fpreg = (d ? fpreg : d); // { dg-error \"invalid conversion to '__fpreg'\" }\n+  fpreg *= fpreg; // { dg-error \"invalid operation on '__fpreg'|in evaluation\" }\n+  fpreg /= fpreg; // { dg-error \"invalid operation on '__fpreg'|in evaluation\" }\n+  fpreg %= fpreg; // { dg-error \"invalid operation on '__fpreg'|in evaluation\" }\n+  fpreg += fpreg; // { dg-error \"invalid operation on '__fpreg'|in evaluation\" }\n+  fpreg -= fpreg; // { dg-error \"invalid operation on '__fpreg'|in evaluation\" }\n+  fpreg <<= fpreg; // { dg-error \"invalid operation on '__fpreg'|in evaluation\" }\n+  fpreg >>= fpreg; // { dg-error \"invalid operation on '__fpreg'|in evaluation\" }\n+  fpreg &= fpreg; // { dg-error \"invalid operation on '__fpreg'|in evaluation\" }\n+  fpreg ^= fpreg; // { dg-error \"invalid operation on '__fpreg'|in evaluation\" }\n+  fpreg |= fpreg; // { dg-error \"invalid operation on '__fpreg'|in evaluation\" }\n }"}, {"sha": "9577cd236fcd4199e355b39f83cfb318de9beb70", "filename": "gcc/testsuite/g++.dg/gomp/pr35158.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr35158.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr35158.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr35158.C?ref=c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "patch": "@@ -5,7 +5,7 @@\n int main(int argc, char *argv[])\n {\n #pragma omp parallel for\n-  for (int i(0) ; // { dg-error \"error: parenthesized initialization is not allowed in OpenMP 'for' loop\" }\n+  for (int i(0) ; // { dg-error \"parenthesized initialization is not allowed in OpenMP 'for' loop\" }\n        i < 10 ; \n        i++) \n     ;"}, {"sha": "ff073cf46adf6e39f457cfd15bd3f87548450990", "filename": "gcc/testsuite/g++.dg/parse/crash43.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash43.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash43.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash43.C?ref=c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "patch": "@@ -4,6 +4,6 @@ namespace N\n {\n   void foo()\n   {\n-    extern int i = 0; // { dg-error \"error: 'i' has both 'extern' and initializer\" }\n+    extern int i = 0; // { dg-error \"'i' has both 'extern' and initializer\" }\n   }\n }"}, {"sha": "41947b7d14faf44f59f1df5202060c4de35aa818", "filename": "gcc/testsuite/g++.dg/parse/crash44.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash44.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash44.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash44.C?ref=c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "patch": "@@ -8,7 +8,7 @@ struct test {\n \n int main(void) {\n   struct test foo = {\n-    once: PTHREAD_ONCE_INITIALIZER // { dg-error \"error: 'PTHREAD_ONCE_INITIALIZER' was not declared in this scope\" }\n+    once: PTHREAD_ONCE_INITIALIZER // { dg-error \"'PTHREAD_ONCE_INITIALIZER' was not declared in this scope\" }\n   };\n \n   return 0;"}, {"sha": "e613ddcbb9af5062ab93fc2177bc0383b6bd28c5", "filename": "gcc/testsuite/g++.dg/parse/offsetof8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Foffsetof8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Foffsetof8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Foffsetof8.C?ref=c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "patch": "@@ -12,5 +12,5 @@ struct B\n \n void foo()\n {\n-  __builtin_offsetof(B, a[0]); /* { dg-error \"error: cannot apply 'offsetof' when 'operator\\\\\\[\\\\\\]' is overloaded\" } */\n+  __builtin_offsetof(B, a[0]); /* { dg-error \"cannot apply 'offsetof' when 'operator\\\\\\[\\\\\\]' is overloaded\" } */\n }"}, {"sha": "fdf2e60527411303cfac57551e87b804f917b19a", "filename": "gcc/testsuite/g++.dg/rtti/no-rtti.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fno-rtti.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fno-rtti.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fno-rtti.C?ref=c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "patch": "@@ -14,5 +14,5 @@ A* f();\n \n int main()\n {\n-   B* b = dynamic_cast<B*>(f()); // { dg-error \"error: \" }\n+   B* b = dynamic_cast<B*>(f()); // { dg-error \"\" }\n }"}, {"sha": "849470a5e88ef47833bb943931c1202da6b59668", "filename": "gcc/testsuite/g++.dg/template/crash81.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash81.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash81.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash81.C?ref=c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "patch": "@@ -2,5 +2,7 @@\n \n struct A\n {\n-  template<T::X> struct X; // { dg-error \"error: 'T' has not been declared|error: declaration of 'template<int X> struct A::X'|error:  shadows template parm 'int X'\" }\n+  template<T::X> struct X; // { dg-error \"'T' has not been declared\" \"T\" }\n+  // { dg-error \"declaration of 'template<int X> struct A::X'\" \"A::X\" { target *-*-* } 5 }\n+  // { dg-error \"shadows template parm 'int X'\" \"shadow\" { target *-*-* } 5 }\n };"}, {"sha": "ba83ac1a9f2358d6ae6c7b4efe051ec612b9b1f4", "filename": "gcc/testsuite/g++.dg/warn/Wvla-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvla-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvla-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvla-2.C?ref=c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "patch": "@@ -3,5 +3,5 @@\n \n void func (int i)\n {\n-  int array[i]; /* { dg-error \"error: ISO C.* forbids variable.* array 'array'\" } */\n+  int array[i]; /* { dg-error \"ISO C.* forbids variable.* array 'array'\" } */\n }"}, {"sha": "8b4378c410b8f0e61c76bddfab2c94e7002faafc", "filename": "gcc/testsuite/g++.dg/warn/deprecated-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated-3.C?ref=c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "patch": "@@ -10,5 +10,5 @@ struct Foo\n void g(void)\n {\n   Foo f;\n-  (int)f; // { dg-warning \"warning: 'Foo::operator int\\\\(\\\\)' is deprecated \\\\(declared at\" }\n+  (int)f; // { dg-warning \"'Foo::operator int\\\\(\\\\)' is deprecated \\\\(declared at\" }\n }"}, {"sha": "78f4348c8c06c8c5206b41b54bdf9f1034c19de1", "filename": "gcc/testsuite/g++.dg/warn/overflow-warn-1.C", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-1.C?ref=c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "patch": "@@ -12,45 +12,45 @@ enum e {\n   /* Overflow in an unevaluated part of an expression is OK (example\n      in the standard).  */\n   E2 = 2 || 1 / 0, /* { dg-bogus \"warning: division by zero\" \"\" { xfail *-*-* } 14 } */\n-  E3 = 1 / 0, /* { dg-warning \"warning: division by zero\" } */\n-  /* { dg-error \"error: enumerator value for 'E3' is not an integer constant\" \"enum error\" { target *-*-* } 15 } */\n+  E3 = 1 / 0, /* { dg-warning \"division by zero\" } */\n+  /* { dg-error \"enumerator value for 'E3' is not an integer constant\" \"enum error\" { target *-*-* } 15 } */\n   /* But as in DR#031, the 1/0 in an evaluated subexpression means the\n      whole expression violates the constraints.  */\n-  E4 = 0 * (1 / 0), /* { dg-warning \"warning: division by zero\" } */\n-  /* { dg-error \"error: enumerator value for 'E4' is not an integer constant\" \"enum error\" { xfail *-*-* } 19 } */\n-  E5 = INT_MAX + 1, /* { dg-warning \"warning: integer overflow in expression\" } */\n+  E4 = 0 * (1 / 0), /* { dg-warning \"division by zero\" } */\n+  /* { dg-error \"enumerator value for 'E4' is not an integer constant\" \"enum error\" { xfail *-*-* } 19 } */\n+  E5 = INT_MAX + 1, /* { dg-warning \"integer overflow in expression\" } */\n   /* Again, overflow in evaluated subexpression.  */\n-  E6 = 0 * (INT_MAX + 1), /* { dg-warning \"warning: integer overflow in expression\" } */\n+  E6 = 0 * (INT_MAX + 1), /* { dg-warning \"integer overflow in expression\" } */\n   /* A cast does not constitute overflow in conversion.  */\n   E7 = (char) INT_MAX\n };\n \n struct s {\n   int a;\n-  int : 0 * (1 / 0); /* { dg-warning \"warning: division by zero\" } */\n-  int : 0 * (INT_MAX + 1); /* { dg-warning \"warning: integer overflow in expression\" } */\n+  int : 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n+  int : 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n };\n \n void\n f (void)\n {\n   /* This expression is not required to be a constant expression, so\n      it should just involve undefined behavior at runtime.  */\n-  int c = INT_MAX + 1; /* { dg-warning \"warning: integer overflow in expression\" } */\n+  int c = INT_MAX + 1; /* { dg-warning \"integer overflow in expression\" } */\n }\n \n /* This expression is neither required to be constant.  */\n-static int sc = INT_MAX + 1; /* { dg-warning \"warning: integer overflow in expression\" } */\n+static int sc = INT_MAX + 1; /* { dg-warning \"integer overflow in expression\" } */\n \n \n // Test for overflow in null pointer constant.  \n void *n = 0;\n /* The first two of these involve overflow, so are not null pointer\n    constants.  The third has the overflow in an unevaluated\n    subexpression, so is a null pointer constant.  */\n-void *p = 0 * (INT_MAX + 1); /* { dg-warning \"warning: integer overflow in expression\" } */\n+void *p = 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n /* { dg-error \"invalid conversion from 'int' to 'void\" \"null\" { target *-*-* } 51 } */\n-void *q = 0 * (1 / 0); /* { dg-warning \"warning: division by zero\" } */\n+void *q = 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n /* { dg-error \"invalid conversion from 'int' to 'void*'\" \"null\" { xfail *-*-* } 53 } */\n void *r = (1 ? 0 : INT_MAX+1); /* { dg-bogus \"integer overflow in expression\" \"\" { xfail *-*-* } 55 } */\n \n@@ -59,23 +59,23 @@ g (int i)\n {\n   switch (i)\n     {\n-    case 0 * (1/0): /* { dg-warning \"warning: division by zero\" } */\n+    case 0 * (1/0): /* { dg-warning \"division by zero\" } */\n       ;\n-    case 1 + 0 * (INT_MAX + 1): /* { dg-warning \"warning: integer overflow in expression\" } */\n+    case 1 + 0 * (INT_MAX + 1): /* { dg-warning \"integer overflow in expression\" } */\n       ;\n     }\n }\n \n int\n h (void)\n {\n-  return INT_MAX + 1; /* { dg-warning \"warning: integer overflow in expression\" } */\n+  return INT_MAX + 1; /* { dg-warning \"integer overflow in expression\" } */\n }\n \n int\n h1 (void)\n {\n-  return INT_MAX + 1 - INT_MAX; /* { dg-warning \"warning: integer overflow in expression\" } */\n+  return INT_MAX + 1 - INT_MAX; /* { dg-warning \"integer overflow in expression\" } */\n }\n \n void fuc (unsigned char);\n@@ -85,14 +85,14 @@ void\n h2 (void)\n {\n   fsc (SCHAR_MAX + 1);\n-  fsc (SCHAR_MIN - 1); /* { dg-warning \"warning: overflow in implicit constant conversion\" } */\n+  fsc (SCHAR_MIN - 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n   fsc (UCHAR_MAX);\n-  fsc (UCHAR_MAX + 1); /* { dg-warning \"warning: overflow in implicit constant conversion\" } */\n+  fsc (UCHAR_MAX + 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n   fuc (-1);\n-  fuc (UCHAR_MAX + 1); /* { dg-warning \"warning: large integer implicitly truncated to unsigned type\" } */\n+  fuc (UCHAR_MAX + 1); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n   fuc (SCHAR_MIN);\n-  fuc (SCHAR_MIN - 1); /* { dg-warning \"warning: large integer implicitly truncated to unsigned type\" } */\n-  fuc (-UCHAR_MAX); /* { dg-warning \"warning: large integer implicitly truncated to unsigned type\" } */\n+  fuc (SCHAR_MIN - 1); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n+  fuc (-UCHAR_MAX); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n }\n \n void fui (unsigned int);"}, {"sha": "fa45eebac30d7ff40382a8bd6b36952e2e26a86a", "filename": "gcc/testsuite/g++.dg/warn/overflow-warn-3.C", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-3.C?ref=c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "patch": "@@ -12,76 +12,76 @@ enum e {\n   /* Overflow in an unevaluated part of an expression is OK (example\n      in the standard).  */\n   E2 = 2 || 1 / 0, /* { dg-bogus \"warning: division by zero\" \"\" { xfail *-*-* } 14 } */\n-  E3 = 1 / 0, /* { dg-warning \"warning: division by zero\" } */\n-  /* { dg-error \"error: enumerator value for 'E3' is not an integer constant\" \"enum error\" { target *-*-* } 15 } */\n+  E3 = 1 / 0, /* { dg-warning \"division by zero\" } */\n+  /* { dg-error \"enumerator value for 'E3' is not an integer constant\" \"enum error\" { target *-*-* } 15 } */\n   /* But as in DR#031, the 1/0 in an evaluated subexpression means the\n      whole expression violates the constraints.  */\n-  E4 = 0 * (1 / 0), /* { dg-warning \"warning: division by zero\" } */\n-  /* { dg-error \"error: enumerator value for 'E4' is not an integer constant\" \"enum error\" { xfail *-*-* } 19 } */\n-  E5 = INT_MAX + 1, /* { dg-warning \"warning: integer overflow in expression\" } */\n-  /* { dg-warning \"warning: overflow in constant expression\" \"constant\" { target *-*-* } 21 } */\n+  E4 = 0 * (1 / 0), /* { dg-warning \"division by zero\" } */\n+  /* { dg-error \"enumerator value for 'E4' is not an integer constant\" \"enum error\" { xfail *-*-* } 19 } */\n+  E5 = INT_MAX + 1, /* { dg-warning \"integer overflow in expression\" } */\n+  /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } 21 } */\n   /* Again, overflow in evaluated subexpression.  */\n-  E6 = 0 * (INT_MAX + 1), /* { dg-warning \"warning: integer overflow in expression\" } */\n-  /* { dg-warning \"warning: overflow in constant expression\" \"constant\" { target *-*-* } 24 } */\n+  E6 = 0 * (INT_MAX + 1), /* { dg-warning \"integer overflow in expression\" } */\n+  /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } 24 } */\n   /* A cast does not constitute overflow in conversion.  */\n   E7 = (char) INT_MAX\n };\n \n struct s {\n   int a;\n-  int : 0 * (1 / 0); /* { dg-warning \"warning: division by zero\" } */\n-  int : 0 * (INT_MAX + 1); /* { dg-warning \"warning: integer overflow in expression\" } */\n-  /* { dg-warning \"warning: overflow in constant expression\" \"constant\" { target *-*-* } 33 } */\n+  int : 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n+  int : 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n+  /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } 33 } */\n };\n \n void\n f (void)\n {\n   /* This expression is not required to be a constant expression, so\n      it should just involve undefined behavior at runtime.  */\n-  int c = INT_MAX + 1; /* { dg-warning \"warning: integer overflow in expression\" } */\n+  int c = INT_MAX + 1; /* { dg-warning \"integer overflow in expression\" } */\n \n }\n \n /* This expression is neither required to be constant.  */\n-static int sc = INT_MAX + 1; /* { dg-warning \"warning: integer overflow in expression\" } */\n+static int sc = INT_MAX + 1; /* { dg-warning \"integer overflow in expression\" } */\n \n \n // Test for overflow in null pointer constant.  \n void *n = 0;\n /* The first two of these involve overflow, so are not null pointer\n    constants.  The third has the overflow in an unevaluated\n    subexpression, so is a null pointer constant.  */\n-void *p = 0 * (INT_MAX + 1); /* { dg-warning \"warning: integer overflow in expression\" } */\n-/* { dg-error \"invalid conversion from 'int' to 'void\" \"null\" { target *-*-* } 55 } */\n+void *p = 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n+/* { dg-warning \"invalid conversion from 'int' to 'void\" \"null\" { target *-*-* } 55 } */\n \n-void *q = 0 * (1 / 0); /* { dg-warning \"warning: division by zero\" } */\n-/* { dg-error \"invalid conversion from 'int' to 'void*'\" \"null\" { xfail *-*-* } 58 } */\n+void *q = 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n+/* { dg-warning \"invalid conversion from 'int' to 'void*'\" \"null\" { xfail *-*-* } 58 } */\n void *r = (1 ? 0 : INT_MAX+1); /* { dg-bogus \"integer overflow in expression\" \"\" { xfail *-*-* } 60 } */\n \n void\n g (int i)\n {\n   switch (i)\n     {\n-    case 0 * (1/0): /* { dg-warning \"warning: division by zero\" } */\n+    case 0 * (1/0): /* { dg-warning \"division by zero\" } */\n       ;\n-    case 1 + 0 * (INT_MAX + 1): /* { dg-warning \"warning: integer overflow in expression\" } */\n-      /* { dg-warning \"warning: overflow in constant expression\" \"constant\" { target *-*-* } 69 } */\n+    case 1 + 0 * (INT_MAX + 1): /* { dg-warning \"integer overflow in expression\" } */\n+      /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } 69 } */\n       ;\n     }\n }\n \n int\n h (void)\n {\n-  return INT_MAX + 1; /* { dg-warning \"warning: integer overflow in expression\" } */\n+  return INT_MAX + 1; /* { dg-warning \"integer overflow in expression\" } */\n }\n \n int\n h1 (void)\n {\n-  return INT_MAX + 1 - INT_MAX; /* { dg-warning \"warning: integer overflow in expression\" } */\n+  return INT_MAX + 1 - INT_MAX; /* { dg-warning \"integer overflow in expression\" } */\n }\n \n void fuc (unsigned char);\n@@ -90,15 +90,15 @@ void fsc (signed char);\n void\n h2 (void)\n {\n-  fsc (SCHAR_MAX + 1); /* { dg-warning \"warning: overflow in implicit constant conversion\" } */\n-  fsc (SCHAR_MIN - 1); /* { dg-warning \"warning: overflow in implicit constant conversion\" } */\n-  fsc (UCHAR_MAX); /* { dg-warning \"warning: overflow in implicit constant conversion\" } */\n-  fsc (UCHAR_MAX + 1); /* { dg-warning \"warning: overflow in implicit constant conversion\" } */\n+  fsc (SCHAR_MAX + 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  fsc (SCHAR_MIN - 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  fsc (UCHAR_MAX); /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  fsc (UCHAR_MAX + 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n   fuc (-1);\n-  fuc (UCHAR_MAX + 1); /* { dg-warning \"warning: large integer implicitly truncated to unsigned type\" } */\n+  fuc (UCHAR_MAX + 1); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n   fuc (SCHAR_MIN);\n-  fuc (SCHAR_MIN - 1); /* { dg-warning \"warning: large integer implicitly truncated to unsigned type\" } */\n-  fuc (-UCHAR_MAX); /* { dg-warning \"warning: large integer implicitly truncated to unsigned type\" } */\n+  fuc (SCHAR_MIN - 1); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n+  fuc (-UCHAR_MAX); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n }\n \n void fui (unsigned int);"}, {"sha": "ae06a80a7cef9f611c88084d0e872fed2e2d4c4f", "filename": "gcc/testsuite/g++.dg/warn/overflow-warn-4.C", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-4.C?ref=c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "patch": "@@ -12,50 +12,50 @@ enum e {\n   /* Overflow in an unevaluated part of an expression is OK (example\n      in the standard).  */\n   E2 = 2 || 1 / 0, /* { dg-bogus \"warning: division by zero\" \"\" { xfail *-*-* } 14 } */\n-  E3 = 1 / 0, /* { dg-warning \"warning: division by zero\" } */\n-  /* { dg-error \"error: enumerator value for 'E3' is not an integer constant\" \"enum error\" { target *-*-* } 15 } */\n+  E3 = 1 / 0, /* { dg-warning \"division by zero\" } */\n+  /* { dg-error \"enumerator value for 'E3' is not an integer constant\" \"enum error\" { target *-*-* } 15 } */\n   /* But as in DR#031, the 1/0 in an evaluated subexpression means the\n      whole expression violates the constraints.  */\n-  E4 = 0 * (1 / 0), /* { dg-warning \"warning: division by zero\" } */\n-  /* { dg-error \"error: enumerator value for 'E4' is not an integer constant\" \"enum error\" { xfail *-*-* } 19 } */\n-  E5 = INT_MAX + 1, /* { dg-warning \"warning: integer overflow in expression\" } */\n-  /* { dg-error \"error: overflow in constant expression\" \"constant\" { target *-*-* } 21 } */\n+  E4 = 0 * (1 / 0), /* { dg-warning \"division by zero\" } */\n+  /* { dg-error \"enumerator value for 'E4' is not an integer constant\" \"enum error\" { xfail *-*-* } 19 } */\n+  E5 = INT_MAX + 1, /* { dg-warning \"integer overflow in expression\" } */\n+  /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } 21 } */\n   /* Again, overflow in evaluated subexpression.  */\n-  E6 = 0 * (INT_MAX + 1), /* { dg-warning \"warning: integer overflow in expression\" } */\n-  /* { dg-error \"error: overflow in constant expression\" \"constant\" { target *-*-* } 24 } */\n+  E6 = 0 * (INT_MAX + 1), /* { dg-warning \"integer overflow in expression\" } */\n+  /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } 24 } */\n   /* A cast does not constitute overflow in conversion.  */\n   E7 = (char) INT_MAX\n };\n \n struct s {\n   int a;\n-  int : 0 * (1 / 0); /* { dg-warning \"warning: division by zero\" } */\n-  int : 0 * (INT_MAX + 1); /* { dg-warning \"warning: integer overflow in expression\" } */\n-  /* { dg-error \"error: overflow in constant expression\" \"constant\" { target *-*-* } 33 } */\n+  int : 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n+  int : 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n+  /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } 33 } */\n };\n \n void\n f (void)\n {\n   /* This expression is not required to be a constant expression, so\n      it should just involve undefined behavior at runtime.  */\n-  int c = INT_MAX + 1; /* { dg-warning \"warning: integer overflow in expression\" } */\n+  int c = INT_MAX + 1; /* { dg-warning \"integer overflow in expression\" } */\n \n }\n \n /* This expression is neither required to be constant.  */\n-static int sc = INT_MAX + 1; /* { dg-warning \"warning: integer overflow in expression\" } */\n+static int sc = INT_MAX + 1; /* { dg-warning \"integer overflow in expression\" } */\n \n \n // Test for overflow in null pointer constant.  \n void *n = 0;\n /* The first two of these involve overflow, so are not null pointer\n    constants.  The third has the overflow in an unevaluated\n    subexpression, so is a null pointer constant.  */\n-void *p = 0 * (INT_MAX + 1); /* { dg-warning \"warning: integer overflow in expression\" } */\n+void *p = 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n /* { dg-error \"invalid conversion from 'int' to 'void\" \"null\" { target *-*-* } 55 } */\n \n-void *q = 0 * (1 / 0); /* { dg-warning \"warning: division by zero\" } */\n+void *q = 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n /* { dg-error \"invalid conversion from 'int' to 'void*'\" \"null\" { xfail *-*-* } 58 } */\n void *r = (1 ? 0 : INT_MAX+1); /* { dg-bogus \"integer overflow in expression\" \"\" { xfail *-*-* } 60 } */\n \n@@ -64,24 +64,24 @@ g (int i)\n {\n   switch (i)\n     {\n-    case 0 * (1/0): /* { dg-warning \"warning: division by zero\" } */\n+    case 0 * (1/0): /* { dg-warning \"division by zero\" } */\n       ;\n-    case 1 + 0 * (INT_MAX + 1): /* { dg-warning \"warning: integer overflow in expression\" } */\n-      /* { dg-error \"error: overflow in constant expression\" \"constant\" { target *-*-* } 69 } */\n+    case 1 + 0 * (INT_MAX + 1): /* { dg-warning \"integer overflow in expression\" } */\n+      /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } 69 } */\n       ;\n     }\n }\n \n int\n h (void)\n {\n-  return INT_MAX + 1; /* { dg-warning \"warning: integer overflow in expression\" } */\n+  return INT_MAX + 1; /* { dg-warning \"integer overflow in expression\" } */\n }\n \n int\n h1 (void)\n {\n-  return INT_MAX + 1 - INT_MAX; /* { dg-warning \"warning: integer overflow in expression\" } */\n+  return INT_MAX + 1 - INT_MAX; /* { dg-warning \"integer overflow in expression\" } */\n }\n \n void fuc (unsigned char);\n@@ -90,15 +90,15 @@ void fsc (signed char);\n void\n h2 (void)\n {\n-  fsc (SCHAR_MAX + 1); /* { dg-warning \"warning: overflow in implicit constant conversion\" } */\n-  fsc (SCHAR_MIN - 1); /* { dg-warning \"warning: overflow in implicit constant conversion\" } */\n-  fsc (UCHAR_MAX); /* { dg-warning \"warning: overflow in implicit constant conversion\" } */\n-  fsc (UCHAR_MAX + 1); /* { dg-warning \"warning: overflow in implicit constant conversion\" } */\n+  fsc (SCHAR_MAX + 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  fsc (SCHAR_MIN - 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  fsc (UCHAR_MAX); /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  fsc (UCHAR_MAX + 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n   fuc (-1);\n-  fuc (UCHAR_MAX + 1); /* { dg-warning \"warning: large integer implicitly truncated to unsigned type\" } */\n+  fuc (UCHAR_MAX + 1); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n   fuc (SCHAR_MIN);\n-  fuc (SCHAR_MIN - 1); /* { dg-warning \"warning: large integer implicitly truncated to unsigned type\" } */\n-  fuc (-UCHAR_MAX); /* { dg-warning \"warning: large integer implicitly truncated to unsigned type\" } */\n+  fuc (SCHAR_MIN - 1); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n+  fuc (-UCHAR_MAX); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n }\n \n void fui (unsigned int);"}, {"sha": "6c7a28b3c546d35a218b78163780c30ef762f456", "filename": "gcc/testsuite/g++.dg/warn/overflow-warn-6.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-6.C?ref=c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "patch": "@@ -7,12 +7,12 @@\n int \n h1 (int x)\n {\n-  return x * (0 * (INT_MAX + 1)); /* { dg-warning \"warning: integer overflow in expression\" } */\n+  return x * (0 * (INT_MAX + 1)); /* { dg-warning \"integer overflow in expression\" } */\n }\n \n int \n h2 (int x)\n {\n-  return ((INT_MAX + 1) * 0) * x; /* { dg-warning \"warning: integer overflow in expression\" } */\n+  return ((INT_MAX + 1) * 0) * x; /* { dg-warning \"integer overflow in expression\" } */\n }\n "}, {"sha": "c6b75a7fc125a82fae30c89ef4715559461f681e", "filename": "gcc/testsuite/g++.dg/warn/pointer-integer-comparison.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpointer-integer-comparison.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpointer-integer-comparison.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpointer-integer-comparison.C?ref=c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "patch": "@@ -3,24 +3,24 @@\n \n int foo (int i, void *p)\n {\n-  if (i == p) // { dg-warning \"warning: ISO C.. forbids comparison between pointer and integer\" }\n+  if (i == p) // { dg-warning \"ISO C.. forbids comparison between pointer and integer\" }\n     return 0;\n-  else if (i != p) // { dg-warning \"warning: ISO C.. forbids comparison between pointer and integer\" }\n+  else if (i != p) // { dg-warning \"ISO C.. forbids comparison between pointer and integer\" }\n     return 1;\n }\n \n int bar (int i, void *p)\n {\n-  if (i < p) // { dg-warning \"warning: ISO C.. forbids comparison between pointer and integer\" }\n+  if (i < p) // { dg-warning \"ISO C.. forbids comparison between pointer and integer\" }\n     return 0;\n-  else if (i >= p) // { dg-warning \"warning: ISO C.. forbids comparison between pointer and integer\" }\n+  else if (i >= p) // { dg-warning \"ISO C.. forbids comparison between pointer and integer\" }\n     return 1;\n }\n \n int baz (int i, void *p)\n {\n-  if (i <= p) // { dg-warning \"warning: ISO C.. forbids comparison between pointer and integer\" }\n+  if (i <= p) // { dg-warning \"ISO C.. forbids comparison between pointer and integer\" }\n     return 0;\n-  else if (i > p) // { dg-warning \"warning: ISO C.. forbids comparison between pointer and integer\" }\n+  else if (i > p) // { dg-warning \"ISO C.. forbids comparison between pointer and integer\" }\n     return 1;\n }"}, {"sha": "e858c5405dcbae2d48ca01fb8a598266392608a0", "filename": "gcc/testsuite/g++.dg/warn/pr12242.C", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr12242.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr12242.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr12242.C?ref=c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "patch": "@@ -10,33 +10,33 @@ void example ()\n   X x;\n   Y y;\n   \n-  x = 10;  // { dg-warning \"warning: invalid conversion from .int. to .X.\" }\n-           // { dg-warning \"warning:\\[^\\n\\]*unspecified\" \"\" { target *-*-* } 13 }\n-  x = 1;   // { dg-warning \"warning: invalid conversion from .int. to .X.\" }\n-  x = C;   // { dg-error \"error: cannot convert .Y. to .X. in assignment\" }  \n-  x = D;   // { dg-error \"error: cannot convert .Y. to .X. in assignment\" }  \n-  y = A;   // { dg-error \"error: cannot convert .X. to .Y. in assignment\" }  \n-  x = y;   // { dg-error \"error: cannot convert .Y. to .X. in assignment\" }  \n-  x = i;   // { dg-warning \"warning: invalid conversion from .int. to .X.\"  }\n+  x = 10;  // { dg-warning \"invalid conversion from .int. to .X.\" }\n+           // { dg-warning \"unspecified\" \"\" { target *-*-* } 13 }\n+  x = 1;   // { dg-warning \"invalid conversion from .int. to .X.\" }\n+  x = C;   // { dg-error \"cannot convert .Y. to .X. in assignment\" }  \n+  x = D;   // { dg-error \"cannot convert .Y. to .X. in assignment\" }  \n+  y = A;   // { dg-error \"cannot convert .X. to .Y. in assignment\" }  \n+  x = y;   // { dg-error \"cannot convert .Y. to .X. in assignment\" }  \n+  x = i;   // { dg-warning \"invalid conversion from .int. to .X.\"  }\n }\n \n void foo () \n {\n-  X a = static_cast<X> (10); // { dg-warning \"warning:\\[^\\n\\]*unspecified\" }\n+  X a = static_cast<X> (10); // { dg-warning \"unspecified\" }\n   X b = static_cast<X> (0);\n   X c = static_cast<X> (1);\n-  X d = static_cast<X> (2); // { dg-warning \"warning:\\[^\\n\\]*unspecified\" }\n+  X d = static_cast<X> (2); // { dg-warning \"unspecified\" }\n   X f = static_cast<X> ((int)A);\n   X g = static_cast<X> (B);\n   X h = static_cast<X> (C);\n-  X e = static_cast<X> (D); // { dg-warning \"warning\\[^\\n\\]*unspecified\" }\n+  X e = static_cast<X> (D); // { dg-warning \"unspecified\" }\n }\n \n enum QEvent { x = 42 }; \n  \n int bar()\n { \n-  QEvent x = ( QEvent ) 42000; // { dg-warning \"warning\\[^\\n\\]*unspecified\" }\n+  QEvent x = ( QEvent ) 42000; // { dg-warning \"unspecified\" }\n   return ( int ) x; \n }\n \n@@ -51,7 +51,7 @@ void baz() {\n \tW(three), \n \tW(3), \n \tZ(four), \n-\tZ(4) // { dg-warning \"warning\\[^\\n\\]*unspecified\" }\n+\tZ(4) // { dg-warning \"unspecified\" }\n \t);\n }\n "}, {"sha": "8334746a575d1337cb0227cf173d212549444f9f", "filename": "gcc/testsuite/g++.dg/warn/pr30551-2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr30551-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr30551-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr30551-2.C?ref=c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "patch": "@@ -2,5 +2,5 @@\n // { dg-do compile }\n // { dg-options \"-pedantic-errors\" }\n // { dg-skip-if \"-Wmain not enabled with -pedantic on SPU\" { spu-*-* } } \n-int main(char a) {} /* { dg-error \"error: first argument of .*main.* should be .int.\" } */\n-/* { dg-error \"error: .*main.* takes only zero or two arguments\" \"\" { target *-*-* } 5 } */ \n+int main(char a) {} /* { dg-error \"first argument of .*main.* should be .int.\" } */\n+/* { dg-error \"main.* takes only zero or two arguments\" \"\" { target *-*-* } 5 } */ "}, {"sha": "6d7f662c17e09364921f0d42096e52b7a299c83f", "filename": "gcc/testsuite/g++.dg/warn/pr30551.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr30551.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr30551.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr30551.C?ref=c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "patch": "@@ -2,5 +2,5 @@\n // { dg-do compile }\n // { dg-options \"\" }\n // { dg-skip-if \"-Wmain not enabled on SPU\" { spu-*-* } } \n-int main(char a) {} /* { dg-warning \"warning: first argument of .*main.* should be .int.\" } */\n-/* { dg-warning \"warning: .*main.* takes only zero or two arguments\" \"\" { target *-*-* } 5 } */ \n+int main(char a) {} /* { dg-warning \"first argument of .*main.* should be .int.\" } */\n+/* { dg-warning \"main.* takes only zero or two arguments\" \"\" { target *-*-* } 5 } */ "}, {"sha": "6cbd23e2c9398f6120f4af64afb368539752278f", "filename": "gcc/testsuite/g++.dg/warn/register-var-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fregister-var-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fregister-var-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fregister-var-1.C?ref=c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "patch": "@@ -10,5 +10,5 @@ void g(int *);\n void f(void) \n { \n   register int x __asm (\"eax\");\n-  g(&x);\t/* { dg-error \"error: address of explicit register variable\" } */\n+  g(&x);\t/* { dg-error \"address of explicit register variable\" } */\n } "}, {"sha": "ee6b217185c193886b2c6e0561714b1cb474a1fb", "filename": "gcc/testsuite/g++.dg/warn/write-strings-default.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fwrite-strings-default.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fwrite-strings-default.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fwrite-strings-default.C?ref=c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "patch": "@@ -3,5 +3,5 @@\n \n int main()\n {\n-   char* p = \"Asgaard\";         // { dg-warning \"warning:.*deprecated.*\" }\n+   char* p = \"Asgaard\";         // { dg-warning \"deprecated\" }\n }"}, {"sha": "73c814909835254e280cd080a879c0480519ee15", "filename": "gcc/testsuite/g++.dg/warn/write-strings.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fwrite-strings.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fwrite-strings.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fwrite-strings.C?ref=c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "patch": "@@ -3,5 +3,5 @@\n \n int main()\n {\n-   char* p = \"Asgaard\";         // { dg-warning \"warning:.*deprecated.*\" }\n+   char* p = \"Asgaard\";         // { dg-warning \"deprecated\" }\n }"}, {"sha": "fb9830e689d937e6089c902e6298b45ecf44a65b", "filename": "gcc/testsuite/g++.old-deja/g++.benjamin/tem03.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Ftem03.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Ftem03.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Ftem03.C?ref=c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "patch": "@@ -83,7 +83,7 @@ public:\n template <class T10, int i> struct Xfour {// { dg-error \"\" } .*\n   int T10; // { dg-error \"\" } .*\n   void f(){\n-    char T10; // { dg-error \"error: declaration of 'char T10'\" }\n+    char T10; // { dg-error \"declaration of 'char T10'\" }\n   }\n };\n \n@@ -123,7 +123,7 @@ public:\n   template <class U>\n   friend bool fooy(U u);\n \n-  template <class T161> // { dg-error \"error: declaration of 'class T161'\" }\n+  template <class T161> // { dg-error \"declaration of 'class T161'\" }\n   friend bool foo(T161 u)\n     {\n       Xseven<T161, 5, int> obj;"}, {"sha": "44339ea2c7fab0eb6e325585c4ca8157650a6c55", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash7.C?ref=c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "patch": "@@ -44,5 +44,5 @@ void Sort<Comp>::sort (Vector<Comp::T> &v)// { dg-error \"\" } use of bad T\n void\n f (Vector<int> &vi)\n {\n-  Sort<Comparator<int> >::sort (vi); // { dg-error \"error: 'sort' is not a member of 'Sort<Comparator<int> >'\" }\n+  Sort<Comparator<int> >::sort (vi); // { dg-error \"'sort' is not a member of 'Sort<Comparator<int> >'\" }\n }"}, {"sha": "1883e175a6a294a83a6159524f0f860e7384b793", "filename": "gcc/testsuite/g++.old-deja/g++.jason/crash11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcrash11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcrash11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcrash11.C?ref=c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "patch": "@@ -6,4 +6,4 @@ struct A {\n };\n const char foo[] = \"bar\";\n const A a = { foo };\n-extern const A* ap = &a; //{ dg-warning \"warning: 'ap' initialized and declared 'extern'\" }\n+extern const A* ap = &a; //{ dg-warning \"'ap' initialized and declared 'extern'\" }"}, {"sha": "ce394961804d20f2ca994ae8c15e569c681ce138", "filename": "gcc/testsuite/g++.old-deja/g++.oliva/template1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Ftemplate1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ef33cc6f1fa7daacb84da78aef461b97e8ad3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Ftemplate1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Ftemplate1.C?ref=c95ef33cc6f1fa7daacb84da78aef461b97e8ad3", "patch": "@@ -7,7 +7,7 @@\n \n \n template<int P = 0> struct foo {\n-  static void bar(double (*)[dim]) {} // { dg-error \"\" } dim not declared\n+  static void bar(double (*)[dim]) {} // { dg-error \"'dim' was not declared\" } \n };\n \n void bar() {"}]}