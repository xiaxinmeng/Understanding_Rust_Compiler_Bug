{"sha": "926a822f2b78aad8c5891d0d902841209600fe99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI2YTgyMmYyYjc4YWFkOGM1ODkxZDBkOTAyODQxMjA5NjAwZmU5OQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-10-22T15:44:44Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-10-22T15:44:44Z"}, "message": "c-pch.c (struct c_pch_validity): Add pch_init field.\n\n\t* c-pch.c (struct c_pch_validity): Add pch_init field.\n\t(pch_init): Set it.\n\t(c_common_valid_pch): Check it.\n\t(get_ident): Bump the PCH version number.\n\nFrom-SVN: r72804", "tree": {"sha": "1a6dbe5bea06865aae3d1b5d46785e906be278b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a6dbe5bea06865aae3d1b5d46785e906be278b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/926a822f2b78aad8c5891d0d902841209600fe99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/926a822f2b78aad8c5891d0d902841209600fe99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/926a822f2b78aad8c5891d0d902841209600fe99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/926a822f2b78aad8c5891d0d902841209600fe99/comments", "author": null, "committer": null, "parents": [{"sha": "57d01e696f51a8761f0feb35e82f93f37f341b0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57d01e696f51a8761f0feb35e82f93f37f341b0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57d01e696f51a8761f0feb35e82f93f37f341b0f"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "580c3d01da143ab2c098a96ba9689945c287025d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/926a822f2b78aad8c5891d0d902841209600fe99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/926a822f2b78aad8c5891d0d902841209600fe99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=926a822f2b78aad8c5891d0d902841209600fe99", "patch": "@@ -1,3 +1,10 @@\n+2003-10-22  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* c-pch.c (struct c_pch_validity): Add pch_init field.\n+\t(pch_init): Set it.\n+\t(c_common_valid_pch): Check it.\n+\t(get_ident): Bump the PCH version number.\n+\n 2003-10-22  David Taylor <dtaylor@emc.com>\n \n \tPR debug/12500"}, {"sha": "f7830b2ba279cb6ae864d454686f4f7a0d9c62da", "filename": "gcc/c-pch.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/926a822f2b78aad8c5891d0d902841209600fe99/gcc%2Fc-pch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/926a822f2b78aad8c5891d0d902841209600fe99/gcc%2Fc-pch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pch.c?ref=926a822f2b78aad8c5891d0d902841209600fe99", "patch": "@@ -48,6 +48,7 @@ struct c_pch_validity\n   unsigned char target_machine_length;\n   unsigned char version_length;\n   unsigned char debug_info_type;\n+  void (*pch_init) (void);\n };\n \n struct c_pch_header \n@@ -113,6 +114,7 @@ pch_init (void)\n   v.version_length = strlen (version_string);\n   \n   v.debug_info_type = write_symbols;\n+  v.pch_init = &pch_init;\n   if (fwrite (get_ident(), IDENT_LENGTH, 1, f) != 1\n       || fwrite (&v, sizeof (v), 1, f) != 1\n       || fwrite (host_machine, v.host_machine_length, 1, f) != 1\n@@ -285,6 +287,18 @@ c_common_valid_pch (cpp_reader *pfile, const char *name, int fd)\n       return 2;\n     }\n \n+  /* If the text segment was not loaded at the same address as it was\n+     when the PCH file was created, function pointers loaded from the\n+     PCH will not be valid.  We could in theory remap all the function\n+     pointers, but no support for that exists at present.  */\n+  if (v.pch_init != &pch_init)\n+    {\n+      if (cpp_get_options (pfile)->warn_invalid_pch)\n+\tcpp_error (pfile, DL_WARNING, \n+\t\t   \"%s: had text segment at different address\", name);\n+      return 2;\n+    }\n+\n   /* Check the preprocessor macros are the same as when the PCH was\n      generated.  */\n   "}]}