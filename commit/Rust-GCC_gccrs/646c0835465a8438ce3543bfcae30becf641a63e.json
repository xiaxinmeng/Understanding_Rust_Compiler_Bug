{"sha": "646c0835465a8438ce3543bfcae30becf641a63e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ2YzA4MzU0NjVhODQzOGNlMzU0M2JmY2FlMzBiZWNmNjQxYTYzZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2005-11-28T10:34:30Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-11-28T10:34:30Z"}, "message": "re PR c++/21166 (g++ gives error on reference to packed structure elements)\n\n.:\tPR c++/21166\n\t* c-decl.c (finish_struct):  Only set DECL_PACKED on a field\n\twhen its natural alignment is > BITS_PER_UNIT.\n\t* stor-layout.c (finalize_type_size): Revert my patch of 2005-08-08.\n\t* c-common.c (handle_packed_attribute): Ignore packing on a field\n\twhose type is naturally char aligned.\ncp:\n\tPR c++/21166\n\t* class.c (check_field_decls): Only set DECL_PACKED on a field\n\twhen its natural alignment is > BITS_PER_UNIT.\n\nFrom-SVN: r107599", "tree": {"sha": "7e925b64a93bd395a2f07912807080dfbe0ecd38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e925b64a93bd395a2f07912807080dfbe0ecd38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/646c0835465a8438ce3543bfcae30becf641a63e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/646c0835465a8438ce3543bfcae30becf641a63e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/646c0835465a8438ce3543bfcae30becf641a63e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/646c0835465a8438ce3543bfcae30becf641a63e/comments", "author": null, "committer": null, "parents": [{"sha": "bbee4b64682d27f5ea99df3654e3e1b139443e0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbee4b64682d27f5ea99df3654e3e1b139443e0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbee4b64682d27f5ea99df3654e3e1b139443e0e"}], "stats": {"total": 46, "additions": 29, "deletions": 17}, "files": [{"sha": "35d08ba1185a287f1daddd99f842bccecc5e4f6a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/646c0835465a8438ce3543bfcae30becf641a63e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/646c0835465a8438ce3543bfcae30becf641a63e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=646c0835465a8438ce3543bfcae30becf641a63e", "patch": "@@ -1,3 +1,12 @@\n+2005-11-28  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/21166\n+\t* c-decl.c (finish_struct):  Only set DECL_PACKED on a field\n+\twhen its natural alignment is > BITS_PER_UNIT.\n+\t* stor-layout.c (finalize_type_size): Revert my patch of 2005-08-08.\n+\t* c-common.c (handle_packed_attribute): Ignore packing on a field\n+\twhose type is naturally char aligned.\n+\n 2005-11-28  Richard Guenther  <rguenther@suse.de>\n \n \t* c-common.c (strict_aliasing_warning): Handle all"}, {"sha": "43c147b306867d802bcb0dd4d765696f5e380a50", "filename": "gcc/c-common.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/646c0835465a8438ce3543bfcae30becf641a63e/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/646c0835465a8438ce3543bfcae30becf641a63e/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=646c0835465a8438ce3543bfcae30becf641a63e", "patch": "@@ -4065,17 +4065,23 @@ handle_packed_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \n \t     struct Foo {\n \t       struct Foo const *ptr; // creates a variant w/o packed flag\n-\t       } __ attribute__((packed)); // packs it now.\n-\t  */\n+\t     } __ attribute__((packed)); // packs it now.\n+\t   */\n \t  tree probe;\n \n \t  for (probe = *node; probe; probe = TYPE_NEXT_VARIANT (probe))\n \t    TYPE_PACKED (probe) = 1;\n \t}\n-\n     }\n   else if (TREE_CODE (*node) == FIELD_DECL)\n-    DECL_PACKED (*node) = 1;\n+    {\n+      if (TYPE_ALIGN (TREE_TYPE (*node)) <= BITS_PER_UNIT)\n+\twarning (OPT_Wattributes,\n+\t\t \"%qE attribute ignored for field of type %qT\",\n+\t\t name, TREE_TYPE (*node));\n+      else\n+\tDECL_PACKED (*node) = 1;\n+    }\n   /* We can't set DECL_PACKED for a VAR_DECL, because the bit is\n      used for DECL_REGISTER.  It wouldn't mean anything anyway.\n      We can't set DECL_PACKED on the type of a TYPE_DECL, because"}, {"sha": "44e03abacdcc8fcd7b536fd8774e17f77bc02de5", "filename": "gcc/c-decl.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/646c0835465a8438ce3543bfcae30becf641a63e/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/646c0835465a8438ce3543bfcae30becf641a63e/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=646c0835465a8438ce3543bfcae30becf641a63e", "patch": "@@ -5326,7 +5326,9 @@ finish_struct (tree t, tree fieldlist, tree attributes)\n   for (x = fieldlist; x; x = TREE_CHAIN (x))\n     {\n       DECL_CONTEXT (x) = t;\n-      DECL_PACKED (x) |= TYPE_PACKED (t);\n+\n+      if (TYPE_PACKED (t) && TYPE_ALIGN (TREE_TYPE (x)) > BITS_PER_UNIT)\n+\tDECL_PACKED (x) = 1;\n \n       /* If any field is const, the structure type is pseudo-const.  */\n       if (TREE_READONLY (x))"}, {"sha": "785c926e6574cf7e81e8ff46a715820373bb9127", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/646c0835465a8438ce3543bfcae30becf641a63e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/646c0835465a8438ce3543bfcae30becf641a63e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=646c0835465a8438ce3543bfcae30becf641a63e", "patch": "@@ -1,3 +1,9 @@\n+2005-11-28  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/21166\n+\t* class.c (check_field_decls): Only set DECL_PACKED on a field\n+\twhen its natural alignment is > BITS_PER_UNIT.\n+\n 2005-11-27  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/24979"}, {"sha": "647b7cb67b99c6d8a98b5c071d13831f2b8bddc5", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/646c0835465a8438ce3543bfcae30becf641a63e/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/646c0835465a8438ce3543bfcae30becf641a63e/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=646c0835465a8438ce3543bfcae30becf641a63e", "patch": "@@ -2801,7 +2801,7 @@ check_field_decls (tree t, tree *access_decls,\n \t\t  (0,\n \t\t   \"ignoring packed attribute on unpacked non-POD field %q+#D\",\n \t\t   x);\n-\t      else\n+\t      else if (TYPE_ALIGN (TREE_TYPE (x)) > BITS_PER_UNIT)\n \t\tDECL_PACKED (x) = 1;\n \t    }\n "}, {"sha": "54ab5ac14a505cbb42a1d19b7dd025f3f24a0c65", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/646c0835465a8438ce3543bfcae30becf641a63e/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/646c0835465a8438ce3543bfcae30becf641a63e/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=646c0835465a8438ce3543bfcae30becf641a63e", "patch": "@@ -1495,8 +1495,6 @@ finalize_type_size (tree type)\n void\n finish_record_layout (record_layout_info rli, int free_p)\n {\n-  tree field;\n-  \n   /* Compute the final size.  */\n   finalize_record_size (rli);\n \n@@ -1506,15 +1504,6 @@ finish_record_layout (record_layout_info rli, int free_p)\n   /* Perform any last tweaks to the TYPE_SIZE, etc.  */\n   finalize_type_size (rli->t);\n \n-  /* We might be able to clear DECL_PACKED on any members that happen\n-     to be suitably aligned (not forgetting the alignment of the type\n-     itself).  */\n-  for (field = TYPE_FIELDS (rli->t); field; field = TREE_CHAIN (field))\n-    if (TREE_CODE (field) == FIELD_DECL && DECL_PACKED (field)\n-\t&& DECL_OFFSET_ALIGN (field) >= TYPE_ALIGN (TREE_TYPE (field))\n-\t&& TYPE_ALIGN (rli->t) >= TYPE_ALIGN (TREE_TYPE (field)))\n-      DECL_PACKED (field) = 0;\n-  \n   /* Lay out any static members.  This is done now because their type\n      may use the record's type.  */\n   while (rli->pending_statics)"}]}