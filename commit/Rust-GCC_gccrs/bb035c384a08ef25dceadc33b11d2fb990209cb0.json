{"sha": "bb035c384a08ef25dceadc33b11d2fb990209cb0", "node_id": "C_kwDOANBUbNoAKGJiMDM1YzM4NGEwOGVmMjVkY2VhZGMzM2IxMWQyZmI5OTAyMDljYjA", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-03-29T14:57:56Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-03-30T13:43:04Z"}, "message": "gccrs: fix ICE with bad match arm type\n\nWe expect to get some kind of ADT or Tuple type when computing this kind of\nmatch arms this adds a new diagnostic to check for this case instead of\nan assertion.\n\nFixes #2029\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-hir-type-check-expr.cc (TypeCheckExpr::visit): return early on bad type\n\t* typecheck/rust-hir-type-check-pattern.cc (TypeCheckPattern::TypeCheckPattern):\n\tremove assertion in favor of check\n\t(TypeCheckPattern::visit): likewise\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/issue-2029.rs: New test.\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "0895ebf57ed4628e1c267e8f4c73d7888df24044", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0895ebf57ed4628e1c267e8f4c73d7888df24044"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb035c384a08ef25dceadc33b11d2fb990209cb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb035c384a08ef25dceadc33b11d2fb990209cb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb035c384a08ef25dceadc33b11d2fb990209cb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb035c384a08ef25dceadc33b11d2fb990209cb0/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "649833b71ae3594e697f8ef91d5d4e09375627ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/649833b71ae3594e697f8ef91d5d4e09375627ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/649833b71ae3594e697f8ef91d5d4e09375627ce"}], "stats": {"total": 43, "additions": 34, "deletions": 9}, "files": [{"sha": "912e0740f7f3be3d5c5643b5734f593238eb6305", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb035c384a08ef25dceadc33b11d2fb990209cb0/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb035c384a08ef25dceadc33b11d2fb990209cb0/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc?ref=bb035c384a08ef25dceadc33b11d2fb990209cb0", "patch": "@@ -1381,6 +1381,8 @@ TypeCheckExpr::visit (HIR::MatchExpr &expr)\n \t{\n \t  TyTy::BaseType *kase_arm_ty\n \t    = TypeCheckPattern::Resolve (pattern.get (), scrutinee_tyty);\n+\t  if (kase_arm_ty->get_kind () == TyTy ::TypeKind::ERROR)\n+\t    return;\n \n \t  TyTy::BaseType *checked_kase = unify_site (\n \t    expr.get_mappings ().get_hirid (),"}, {"sha": "5c8fd9a38af6a0b9113520da910148616cac87f2", "filename": "gcc/rust/typecheck/rust-hir-type-check-pattern.cc", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb035c384a08ef25dceadc33b11d2fb990209cb0/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb035c384a08ef25dceadc33b11d2fb990209cb0/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc?ref=bb035c384a08ef25dceadc33b11d2fb990209cb0", "patch": "@@ -24,7 +24,7 @@ namespace Rust {\n namespace Resolver {\n \n TypeCheckPattern::TypeCheckPattern (TyTy::BaseType *parent)\n-  : TypeCheckBase (), parent (parent), infered (nullptr)\n+  : TypeCheckBase (), parent (parent), infered (new TyTy::ErrorType (0))\n {}\n \n TyTy::BaseType *\n@@ -50,11 +50,16 @@ TypeCheckPattern::visit (HIR::PathInExpression &pattern)\n void\n TypeCheckPattern::visit (HIR::TupleStructPattern &pattern)\n {\n-  infered = TypeCheckExpr::Resolve (&pattern.get_path ());\n-  if (infered->get_kind () == TyTy::TypeKind::ERROR)\n-    return;\n+  TyTy::BaseType *pattern_ty = TypeCheckExpr::Resolve (&pattern.get_path ());\n+  if (pattern_ty->get_kind () != TyTy::TypeKind::ADT)\n+    {\n+      rust_error_at (pattern.get_locus (),\n+\t\t     \"expected tuple struct/variant, found: %s\",\n+\t\t     pattern_ty->get_name ().c_str ());\n+      return;\n+    }\n \n-  rust_assert (infered->get_kind () == TyTy::TypeKind::ADT);\n+  infered = pattern_ty;\n   TyTy::ADTType *adt = static_cast<TyTy::ADTType *> (infered);\n   rust_assert (adt->number_of_variants () > 0);\n \n@@ -137,11 +142,16 @@ TypeCheckPattern::visit (HIR::TupleStructPattern &pattern)\n void\n TypeCheckPattern::visit (HIR::StructPattern &pattern)\n {\n-  infered = TypeCheckExpr::Resolve (&pattern.get_path ());\n-  if (infered->get_kind () == TyTy::TypeKind::ERROR)\n-    return;\n+  TyTy::BaseType *pattern_ty = TypeCheckExpr::Resolve (&pattern.get_path ());\n+  if (pattern_ty->get_kind () != TyTy::TypeKind::ADT)\n+    {\n+      rust_error_at (pattern.get_locus (),\n+\t\t     \"expected tuple struct/variant, found: %s\",\n+\t\t     pattern_ty->get_name ().c_str ());\n+      return;\n+    }\n \n-  rust_assert (infered->get_kind () == TyTy::TypeKind::ADT);\n+  infered = pattern_ty;\n   TyTy::ADTType *adt = static_cast<TyTy::ADTType *> (infered);\n   rust_assert (adt->number_of_variants () > 0);\n "}, {"sha": "80af228925627965f9e93a42b73724d0a2d1e59b", "filename": "gcc/testsuite/rust/compile/issue-2029.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb035c384a08ef25dceadc33b11d2fb990209cb0/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2029.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb035c384a08ef25dceadc33b11d2fb990209cb0/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2029.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2029.rs?ref=bb035c384a08ef25dceadc33b11d2fb990209cb0", "patch": "@@ -0,0 +1,13 @@\n+struct Foo(bool);\n+fn foo(_: usize) -> Foo {\n+    Foo(false)\n+}\n+\n+fn main() {\n+    match Foo(true) {\n+        // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-1 }\n+        foo(x)\n+        // { dg-error \"expected tuple struct/variant, found\" \"\" { target *-*-* } .-1 }\n+        => ()\n+    }\n+}"}]}