{"sha": "2937079664a6145b45cc217f2fe4bafa83027bdd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkzNzA3OTY2NGE2MTQ1YjQ1Y2MyMTdmMmZlNGJhZmE4MzAyN2JkZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-08-02T11:01:38Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-08-02T11:01:38Z"}, "message": "cp-tree.h (pushclass): Remove unneeded parameter.\n\ncp:\n\t* cp-tree.h (pushclass): Remove unneeded parameter.\n\t* class.c (pushclass): Remove unneeded MODIFY parm. Adjust.\n\t(push_nested_class): Adjust pushclass call.\n\t* pt.c (instantiate_class_template): Likewise.\n\t* semantics.c (begin_class_definition): Likewise.\n\nFrom-SVN: r70101", "tree": {"sha": "d649cf4d58c4a450497eb8d7c3879a43bc3e2139", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d649cf4d58c4a450497eb8d7c3879a43bc3e2139"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2937079664a6145b45cc217f2fe4bafa83027bdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2937079664a6145b45cc217f2fe4bafa83027bdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2937079664a6145b45cc217f2fe4bafa83027bdd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2937079664a6145b45cc217f2fe4bafa83027bdd/comments", "author": null, "committer": null, "parents": [{"sha": "50612a04e59e7e68cd2ecedf34e9bad1ec2b5827", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50612a04e59e7e68cd2ecedf34e9bad1ec2b5827", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50612a04e59e7e68cd2ecedf34e9bad1ec2b5827"}], "stats": {"total": 78, "additions": 35, "deletions": 43}, "files": [{"sha": "4a5f939491720aba4e9f3e2a664f75221892e784", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2937079664a6145b45cc217f2fe4bafa83027bdd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2937079664a6145b45cc217f2fe4bafa83027bdd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2937079664a6145b45cc217f2fe4bafa83027bdd", "patch": "@@ -1,3 +1,11 @@\n+2003-08-02  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* cp-tree.h (pushclass): Remove unneeded parameter.\n+\t* class.c (pushclass): Remove unneeded MODIFY parm. Adjust.\n+\t(push_nested_class): Adjust pushclass call.\n+\t* pt.c (instantiate_class_template): Likewise.\n+\t* semantics.c (begin_class_definition): Likewise.\n+\n 2003-08-01  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* typeck2.c (add_exception_specifier): Use 'bool' where appropriate."}, {"sha": "a85b11274c8dddfc504dd4c192859741bd3068cf", "filename": "gcc/cp/class.c", "status": "modified", "additions": 24, "deletions": 40, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2937079664a6145b45cc217f2fe4bafa83027bdd/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2937079664a6145b45cc217f2fe4bafa83027bdd/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=2937079664a6145b45cc217f2fe4bafa83027bdd", "patch": "@@ -5395,19 +5395,6 @@ init_class_processing (void)\n /* Set global variables CURRENT_CLASS_NAME and CURRENT_CLASS_TYPE as\n    appropriate for TYPE.\n \n-   If MODIFY is 1, we set IDENTIFIER_CLASS_VALUE's of names\n-   which can be seen locally to the class.  They are shadowed by\n-   any subsequent local declaration (including parameter names).\n-\n-   If MODIFY is 2, we set IDENTIFIER_CLASS_VALUE's of names\n-   which have static meaning (i.e., static members, static\n-   member functions, enum declarations, etc).\n-\n-   If MODIFY is 3, we set IDENTIFIER_CLASS_VALUE of names\n-   which can be seen locally to the class (as in 1), but\n-   know that we are doing this for declaration purposes\n-   (i.e. friend foo::bar (int)).\n-\n    So that we may avoid calls to lookup_name, we cache the _TYPE\n    nodes of local TYPE_DECLs in the TREE_TYPE field of the name.\n \n@@ -5420,7 +5407,7 @@ init_class_processing (void)\n    that name becomes `error_mark_node'.  */\n \n void\n-pushclass (tree type, bool modify)\n+pushclass (tree type)\n {\n   type = TYPE_MAIN_VARIANT (type);\n \n@@ -5464,39 +5451,36 @@ pushclass (tree type, bool modify)\n \n   /* If we're about to enter a nested class, clear\n      IDENTIFIER_CLASS_VALUE for the enclosing classes.  */\n-  if (modify && current_class_depth > 1)\n+  if (current_class_depth > 1)\n     clear_identifier_class_values ();\n \n   pushlevel_class ();\n \n-  if (modify)\n+  if (type != previous_class_type || current_class_depth > 1)\n+    push_class_decls (type);\n+  else\n     {\n-      if (type != previous_class_type || current_class_depth > 1)\n-\tpush_class_decls (type);\n-      else\n-\t{\n-\t  tree item;\n-\n-\t  /* We are re-entering the same class we just left, so we\n-\t     don't have to search the whole inheritance matrix to find\n-\t     all the decls to bind again.  Instead, we install the\n-\t     cached class_shadowed list, and walk through it binding\n-\t     names and setting up IDENTIFIER_TYPE_VALUEs.  */\n-\t  set_class_shadows (previous_class_values);\n-\t  for (item = previous_class_values; item; item = TREE_CHAIN (item))\n-\t    {\n-\t      tree id = TREE_PURPOSE (item);\n-\t      tree decl = TREE_TYPE (item);\n+      tree item;\n \n-\t      push_class_binding (id, decl);\n-\t      if (TREE_CODE (decl) == TYPE_DECL)\n-\t\tset_identifier_type_value (id, TREE_TYPE (decl));\n-\t    }\n-\t  unuse_fields (type);\n+      /* We are re-entering the same class we just left, so we don't\n+\t have to search the whole inheritance matrix to find all the\n+\t decls to bind again.  Instead, we install the cached\n+\t class_shadowed list, and walk through it binding names and\n+\t setting up IDENTIFIER_TYPE_VALUEs.  */\n+      set_class_shadows (previous_class_values);\n+      for (item = previous_class_values; item; item = TREE_CHAIN (item))\n+\t{\n+\t  tree id = TREE_PURPOSE (item);\n+\t  tree decl = TREE_TYPE (item);\n+\t  \n+\t  push_class_binding (id, decl);\n+\t  if (TREE_CODE (decl) == TYPE_DECL)\n+\t    set_identifier_type_value (id, TREE_TYPE (decl));\n \t}\n-\n-      cxx_remember_type_decls (CLASSTYPE_NESTED_UTDS (type));\n+      unuse_fields (type);\n     }\n+  \n+  cxx_remember_type_decls (CLASSTYPE_NESTED_UTDS (type));\n }\n \n /* When we exit a toplevel class scope, we save the\n@@ -5598,7 +5582,7 @@ push_nested_class (tree type)\n \n   if (context && CLASS_TYPE_P (context))\n     push_nested_class (context);\n-  pushclass (type, true);\n+  pushclass (type);\n }\n \n /* Undoes a push_nested_class call.  */"}, {"sha": "1e84a53d0b86798569edb7d7abdcad413f1415fb", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2937079664a6145b45cc217f2fe4bafa83027bdd/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2937079664a6145b45cc217f2fe4bafa83027bdd/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2937079664a6145b45cc217f2fe4bafa83027bdd", "patch": "@@ -3582,7 +3582,7 @@ extern void finish_struct_1\t\t\t(tree);\n extern int resolves_to_fixed_type_p\t\t(tree, int *);\n extern void init_class_processing\t\t(void);\n extern int is_empty_class\t\t\t(tree);\n-extern void pushclass\t\t\t\t(tree, bool);\n+extern void pushclass\t\t\t\t(tree);\n extern void popclass\t\t\t\t(void);\n extern void push_nested_class\t\t\t(tree);\n extern void pop_nested_class\t\t\t(void);"}, {"sha": "35c13670c7c20dff5722b95a0cae157bdd8f7b0f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2937079664a6145b45cc217f2fe4bafa83027bdd/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2937079664a6145b45cc217f2fe4bafa83027bdd/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=2937079664a6145b45cc217f2fe4bafa83027bdd", "patch": "@@ -5225,7 +5225,7 @@ instantiate_class_template (tree type)\n      correctly.  This is precisely analogous to what we do in\n      begin_class_definition when defining an ordinary non-template\n      class.  */\n-  pushclass (type, true);\n+  pushclass (type);\n \n   /* Now members are processed in the order of declaration.  */\n   for (member = CLASSTYPE_DECL_LIST (pattern);"}, {"sha": "11f5ff045d3bd478ee0f2db23bdab8f853fa5317", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2937079664a6145b45cc217f2fe4bafa83027bdd/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2937079664a6145b45cc217f2fe4bafa83027bdd/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=2937079664a6145b45cc217f2fe4bafa83027bdd", "patch": "@@ -2025,7 +2025,7 @@ begin_class_definition (tree t)\n       pushtag (TYPE_IDENTIFIER (t), t, 0);\n     }\n   maybe_process_partial_specialization (t);\n-  pushclass (t, true);\n+  pushclass (t);\n   TYPE_BEING_DEFINED (t) = 1;\n   TYPE_PACKED (t) = flag_pack_struct;\n   /* Reset the interface data, at the earliest possible"}]}