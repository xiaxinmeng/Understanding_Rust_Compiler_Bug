{"sha": "6a720599bb2e3ea01142d51ad61d8c589fa8c1fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE3MjA1OTliYjJlM2VhMDExNDJkNTFhZDYxZDhjNTg5ZmE4YzFmZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2005-02-14T16:07:16Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2005-02-14T16:07:16Z"}, "message": "re-apply fold_indirect_ref patch\n\nFrom-SVN: r95024", "tree": {"sha": "0cb67f26899659bf3d6034329e825c218036d372", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cb67f26899659bf3d6034329e825c218036d372"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a720599bb2e3ea01142d51ad61d8c589fa8c1fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a720599bb2e3ea01142d51ad61d8c589fa8c1fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a720599bb2e3ea01142d51ad61d8c589fa8c1fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a720599bb2e3ea01142d51ad61d8c589fa8c1fe/comments", "author": null, "committer": null, "parents": [{"sha": "0c86d709079008af4d219d9078065ff6e1661a14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c86d709079008af4d219d9078065ff6e1661a14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c86d709079008af4d219d9078065ff6e1661a14"}], "stats": {"total": 75, "additions": 55, "deletions": 20}, "files": [{"sha": "50289f2a2902d31cacf9c8e12dbf8e1b94d9dd25", "filename": "gcc/ChangeLog", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a720599bb2e3ea01142d51ad61d8c589fa8c1fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a720599bb2e3ea01142d51ad61d8c589fa8c1fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a720599bb2e3ea01142d51ad61d8c589fa8c1fe", "patch": "@@ -63,7 +63,6 @@\n 2005-02-13  Jason Merrill  <jason@redhat.com>\n \n \t[reverted temporarily]\n-\n \tPR mudflap/19319\n \t* gimplify.c (gimplify_modify_expr_rhs) [CALL_EXPR]: Make return\n \tslot explicit."}, {"sha": "03285ec523b17ecc6a245c047329f0fd4a7eec6f", "filename": "gcc/fold-const.c", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a720599bb2e3ea01142d51ad61d8c589fa8c1fe/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a720599bb2e3ea01142d51ad61d8c589fa8c1fe/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=6a720599bb2e3ea01142d51ad61d8c589fa8c1fe", "patch": "@@ -11214,17 +11214,21 @@ build_fold_addr_expr (tree t)\n   return build_fold_addr_expr_with_type (t, build_pointer_type (TREE_TYPE (t)));\n }\n \n-/* Builds an expression for an indirection through T, simplifying some\n-   cases.  */\n+/* Given a pointer value T, return a simplified version of an indirection\n+   through T, or NULL_TREE if no simplification is possible.  */\n \n-tree\n-build_fold_indirect_ref (tree t)\n+static tree\n+fold_indirect_ref_1 (tree t)\n {\n   tree type = TREE_TYPE (TREE_TYPE (t));\n   tree sub = t;\n   tree subtype;\n \n   STRIP_NOPS (sub);\n+  subtype = TREE_TYPE (sub);\n+  if (!POINTER_TYPE_P (subtype))\n+    return NULL_TREE;\n+\n   if (TREE_CODE (sub) == ADDR_EXPR)\n     {\n       tree op = TREE_OPERAND (sub, 0);\n@@ -11239,15 +11243,41 @@ build_fold_indirect_ref (tree t)\n     }\n \n   /* *(foo *)fooarrptr => (*fooarrptr)[0] */\n-  subtype = TREE_TYPE (sub);\n   if (TREE_CODE (TREE_TYPE (subtype)) == ARRAY_TYPE\n       && lang_hooks.types_compatible_p (type, TREE_TYPE (TREE_TYPE (subtype))))\n     {\n       sub = build_fold_indirect_ref (sub);\n       return build4 (ARRAY_REF, type, sub, size_zero_node, NULL_TREE, NULL_TREE);\n     }\n \n-  return build1 (INDIRECT_REF, type, t);\n+  return NULL_TREE;\n+}\n+\n+/* Builds an expression for an indirection through T, simplifying some\n+   cases.  */\n+\n+tree\n+build_fold_indirect_ref (tree t)\n+{\n+  tree sub = fold_indirect_ref_1 (t);\n+\n+  if (sub)\n+    return sub;\n+  else\n+    return build1 (INDIRECT_REF, TREE_TYPE (TREE_TYPE (t)), t);\n+}\n+\n+/* Given an INDIRECT_REF T, return either T or a simplified version.  */\n+\n+tree\n+fold_indirect_ref (tree t)\n+{\n+  tree sub = fold_indirect_ref_1 (TREE_OPERAND (t, 0));\n+\n+  if (sub)\n+    return sub;\n+  else\n+    return t;\n }\n \n /* Strip non-trapping, non-side-effecting tree nodes from an expression"}, {"sha": "d461d776ee83da0072ce94c577e349ba00cc4fcd", "filename": "gcc/gimplify.c", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a720599bb2e3ea01142d51ad61d8c589fa8c1fe/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a720599bb2e3ea01142d51ad61d8c589fa8c1fe/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=6a720599bb2e3ea01142d51ad61d8c589fa8c1fe", "patch": "@@ -1433,8 +1433,15 @@ gimplify_compound_lval (tree *expr_p, tree *pre_p,\n   VARRAY_GENERIC_PTR_NOGC_INIT (stack, 10, \"stack\");\n \n   /* We can handle anything that get_inner_reference can deal with.  */\n-  for (p = expr_p; handled_component_p (*p); p = &TREE_OPERAND (*p, 0))\n-    VARRAY_PUSH_GENERIC_PTR_NOGC (stack, *p);\n+  for (p = expr_p; ; p = &TREE_OPERAND (*p, 0))\n+    {\n+      /* Fold INDIRECT_REFs now to turn them into ARRAY_REFs.  */\n+      if (TREE_CODE (*p) == INDIRECT_REF)\n+\t*p = fold_indirect_ref (*p);\n+      if (!handled_component_p (*p))\n+\tbreak;\n+      VARRAY_PUSH_GENERIC_PTR_NOGC (stack, *p);\n+    }\n \n   gcc_assert (VARRAY_ACTIVE_SIZE (stack));\n \n@@ -2845,16 +2852,10 @@ gimplify_modify_expr_rhs (tree *expr_p, tree *from_p, tree *to_p, tree *pre_p,\n \t     This kind of code arises in C++ when an object is bound\n \t     to a const reference, and if \"x\" is a TARGET_EXPR we want\n \t     to take advantage of the optimization below.  */\n-\t  tree pointer;\n-\n-\t  pointer = TREE_OPERAND (*from_p, 0);\n-\t  STRIP_NOPS (pointer);\n-\t  if (TREE_CODE (pointer) == ADDR_EXPR\n-\t      && (lang_hooks.types_compatible_p \n-\t\t  (TREE_TYPE (TREE_OPERAND (pointer, 0)),\n-\t\t   TREE_TYPE (*from_p))))\n+\t  tree t = fold_indirect_ref (*from_p);\n+\t  if (t != *from_p)\n \t    {\n-\t      *from_p = TREE_OPERAND (pointer, 0); \n+\t      *from_p = t;\n \t      ret = GS_OK;\n \t    }\n \t  else\n@@ -3544,7 +3545,7 @@ gimplify_target_expr (tree *expr_p, tree *pre_p, tree *post_p)\n \t  ret = GS_OK;\n           if (TREE_CODE (init) == BIND_EXPR)\n \t    gimplify_bind_expr (&init, temp, pre_p);\n-          if (init != temp)\n+\t  if (init != temp)\n \t    {\n \t      init = build (MODIFY_EXPR, void_type_node, temp, init);\n \t      ret = gimplify_expr (&init, pre_p, post_p, is_gimple_stmt,\n@@ -3795,9 +3796,13 @@ gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p,\n \t  recalculate_side_effects (*expr_p);\n \t  break;\n \n+\tcase INDIRECT_REF:\n+\t  *expr_p = fold_indirect_ref (*expr_p);\n+\t  if (*expr_p != save_expr)\n+\t    break;\n+\t  /* else fall through.  */\n \tcase ALIGN_INDIRECT_REF:\n \tcase MISALIGNED_INDIRECT_REF:\n-\tcase INDIRECT_REF:\n \t  ret = gimplify_expr (&TREE_OPERAND (*expr_p, 0), pre_p, post_p,\n \t\t\t       is_gimple_reg, fb_rvalue);\n \t  recalculate_side_effects (*expr_p);"}, {"sha": "62e9bb332bbc5556b2a184017e826d9b6d42541c", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a720599bb2e3ea01142d51ad61d8c589fa8c1fe/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a720599bb2e3ea01142d51ad61d8c589fa8c1fe/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6a720599bb2e3ea01142d51ad61d8c589fa8c1fe", "patch": "@@ -3546,6 +3546,7 @@ extern tree fold_build_cleanup_point_expr (tree type, tree expr);\n extern tree fold_strip_sign_ops (tree);\n extern tree build_fold_addr_expr_with_type (tree, tree);\n extern tree build_fold_indirect_ref (tree);\n+extern tree fold_indirect_ref (tree);\n extern tree constant_boolean_node (int, tree);\n extern tree build_low_bits_mask (tree, unsigned);\n "}]}