{"sha": "ef8d5ac08b5e60f35c52087d88c0235c8ce6b65b", "node_id": "C_kwDOANBUbNoAKGVmOGQ1YWMwOGI1ZTYwZjM1YzUyMDg3ZDg4YzAyMzVjOGNlNmI2NWI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-03-25T10:28:28Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-05-04T15:24:56Z"}, "message": "libstdc++: Simplify std::array accessors [PR104719]\n\nThis removes the __array_traits::_S_ref and __array_traits::_S_ptr\naccessors, which only exist to make the special case of std::array<T, 0>\nsyntactically well-formed.\n\nBy changing the empty type used as the std::array<T, 0>::_M_elems data\nmember to support operator[] and conversion to a pointer, we can write\ncode using the natural syntax. The indirection through _S_ref and\n_S_ptr is removed for the common case, and a function call is only used\nfor the special case of zero-size arrays.\n\nThe invalid member access for zero-sized arrays is changed to use\n__builtin_trap() instead of a null dereference. This guarantees a\nruntime error if it ever gets called, instead of undefined behaviour\nthat is likely to get optimized out as unreachable.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/104719\n\t* include/std/array (__array_traits::_S_ref): Remove.\n\t(__array_traits::_S_ptr): Remove.\n\t(__array_traits<T, 0>::_Type): Define operator[] and operator T*\n\tto provide an array-like API.\n\t(array::_AT_Type): Remove public typeef.\n\t(array::operator[], array::at, array::front, array::back): Use\n\tindex operator to access _M_elems instead of _S_ref.\n\t(array::data): Use implicit conversion from _M_elems to pointer.\n\t(swap(array&, array&)): Use __enable_if_t helper.\n\t(get<I>): Use index operator to access _M_elems.\n\t* testsuite/23_containers/array/tuple_interface/get_neg.cc:\n\tAdjust dg-error line numbers.", "tree": {"sha": "3fc9436691a09e050ad8890048b56c23c2a751bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fc9436691a09e050ad8890048b56c23c2a751bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef8d5ac08b5e60f35c52087d88c0235c8ce6b65b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef8d5ac08b5e60f35c52087d88c0235c8ce6b65b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef8d5ac08b5e60f35c52087d88c0235c8ce6b65b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef8d5ac08b5e60f35c52087d88c0235c8ce6b65b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c6a4beeed572f9e235f881e00ad8c63b6bcc9df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6a4beeed572f9e235f881e00ad8c63b6bcc9df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c6a4beeed572f9e235f881e00ad8c63b6bcc9df"}], "stats": {"total": 86, "additions": 38, "deletions": 48}, "files": [{"sha": "d1daffee425498468b8a4bb615533d085818e846", "filename": "libstdc++-v3/include/std/array", "status": "modified", "additions": 35, "deletions": 45, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8d5ac08b5e60f35c52087d88c0235c8ce6b65b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8d5ac08b5e60f35c52087d88c0235c8ce6b65b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=ef8d5ac08b5e60f35c52087d88c0235c8ce6b65b", "patch": "@@ -49,36 +49,31 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  template<typename _Tp, std::size_t _Nm>\n+  template<typename _Tp, size_t _Nm>\n     struct __array_traits\n     {\n-      typedef _Tp _Type[_Nm];\n-      typedef __is_swappable<_Tp> _Is_swappable;\n-      typedef __is_nothrow_swappable<_Tp> _Is_nothrow_swappable;\n-\n-      static constexpr _Tp&\n-      _S_ref(const _Type& __t, std::size_t __n) noexcept\n-      { return const_cast<_Tp&>(__t[__n]); }\n-\n-      static constexpr _Tp*\n-      _S_ptr(const _Type& __t) noexcept\n-      { return const_cast<_Tp*>(__t); }\n+      using _Type = _Tp[_Nm];\n+      using _Is_swappable = __is_swappable<_Tp>;\n+      using _Is_nothrow_swappable = __is_nothrow_swappable<_Tp>;\n     };\n \n  template<typename _Tp>\n    struct __array_traits<_Tp, 0>\n    {\n-     struct _Type { };\n-     typedef true_type _Is_swappable;\n-     typedef true_type _Is_nothrow_swappable;\n-\n-     static constexpr _Tp&\n-     _S_ref(const _Type&, std::size_t) noexcept\n-     { return *static_cast<_Tp*>(nullptr); }\n-\n-     static constexpr _Tp*\n-     _S_ptr(const _Type&) noexcept\n-     { return nullptr; }\n+     // Empty type used instead of _Tp[0] for std::array<_Tp, 0>.\n+     struct _Type\n+     {\n+       // Indexing is undefined.\n+       __attribute__((__always_inline__,__artificial__,__noreturn__))\n+       _Tp& operator[](size_t) const noexcept { __builtin_trap(); }\n+\n+       // Conversion to a pointer produces a null pointer.\n+       __attribute__((__always_inline__,__artificial__))\n+       operator _Tp*() const noexcept { return nullptr; }\n+     };\n+\n+     using _Is_swappable = true_type;\n+     using _Is_nothrow_swappable = true_type;\n    };\n \n   /**\n@@ -111,8 +106,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef std::reverse_iterator<const_iterator>   const_reverse_iterator;\n \n       // Support for zero-sized arrays mandatory.\n-      typedef __array_traits<_Tp, _Nm> _AT_Type;\n-      typename _AT_Type::_Type                         _M_elems;\n+      typename __array_traits<_Tp, _Nm>::_Type        _M_elems;\n \n       // No explicit construct/copy/destroy for aggregate type.\n \n@@ -123,7 +117,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       _GLIBCXX20_CONSTEXPR void\n       swap(array& __other)\n-      noexcept(_AT_Type::_Is_nothrow_swappable::value)\n+      noexcept(__array_traits<_Tp, _Nm>::_Is_nothrow_swappable::value)\n       { std::swap_ranges(begin(), end(), __other.begin()); }\n \n       // Iterators.\n@@ -206,7 +200,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator[](size_type __n) noexcept\n       {\n \t__glibcxx_requires_subscript(__n);\n-\treturn _AT_Type::_S_ref(_M_elems, __n);\n+\treturn _M_elems[__n];\n       }\n \n       [[__nodiscard__]]\n@@ -216,7 +210,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201402L\n \t__glibcxx_requires_subscript(__n);\n #endif\n-\treturn _AT_Type::_S_ref(_M_elems, __n);\n+\treturn _M_elems[__n];\n       }\n \n       _GLIBCXX17_CONSTEXPR reference\n@@ -226,27 +220,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  std::__throw_out_of_range_fmt(__N(\"array::at: __n (which is %zu) \"\n \t\t\t\t\t    \">= _Nm (which is %zu)\"),\n \t\t\t\t\t__n, _Nm);\n-\treturn _AT_Type::_S_ref(_M_elems, __n);\n+\treturn _M_elems[__n];\n       }\n \n       constexpr const_reference\n       at(size_type __n) const\n       {\n \t// Result of conditional expression must be an lvalue so use\n \t// boolean ? lvalue : (throw-expr, lvalue)\n-\treturn __n < _Nm ? _AT_Type::_S_ref(_M_elems, __n)\n+\treturn __n < _Nm ? _M_elems[__n]\n \t  : (std::__throw_out_of_range_fmt(__N(\"array::at: __n (which is %zu) \"\n \t\t\t\t\t       \">= _Nm (which is %zu)\"),\n \t\t\t\t\t   __n, _Nm),\n-\t     _AT_Type::_S_ref(_M_elems, 0));\n+\t     _M_elems[__n]);\n       }\n \n       [[__nodiscard__]]\n       _GLIBCXX17_CONSTEXPR reference\n       front() noexcept\n       {\n \t__glibcxx_requires_nonempty();\n-\treturn *begin();\n+\treturn _M_elems[0];\n       }\n \n       [[__nodiscard__]]\n@@ -256,15 +250,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201402L\n \t__glibcxx_requires_nonempty();\n #endif\n-\treturn _AT_Type::_S_ref(_M_elems, 0);\n+\treturn _M_elems[0];\n       }\n \n       [[__nodiscard__]]\n       _GLIBCXX17_CONSTEXPR reference\n       back() noexcept\n       {\n \t__glibcxx_requires_nonempty();\n-\treturn _Nm ? *(end() - 1) : *end();\n+\treturn _M_elems[_Nm - 1];\n       }\n \n       [[__nodiscard__]]\n@@ -274,19 +268,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201402L\n \t__glibcxx_requires_nonempty();\n #endif\n-\treturn _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)\n- \t           : _AT_Type::_S_ref(_M_elems, 0);\n+\treturn _M_elems[_Nm - 1];\n       }\n \n       [[__gnu__::__const__, __nodiscard__]]\n       _GLIBCXX17_CONSTEXPR pointer\n       data() noexcept\n-      { return _AT_Type::_S_ptr(_M_elems); }\n+      { return _M_elems; }\n \n       [[__nodiscard__]]\n       _GLIBCXX17_CONSTEXPR const_pointer\n       data() const noexcept\n-      { return _AT_Type::_S_ptr(_M_elems); }\n+      { return _M_elems; }\n     };\n \n #if __cpp_deduction_guides >= 201606\n@@ -371,9 +364,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline\n #if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11\n     // Constrained free swap overload, see p0185r1\n-    typename enable_if<\n-      __array_traits<_Tp, _Nm>::_Is_swappable::value\n-    >::type\n+    __enable_if_t<__array_traits<_Tp, _Nm>::_Is_swappable::value>\n #else\n     void\n #endif\n@@ -383,8 +374,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11\n   template<typename _Tp, std::size_t _Nm>\n-    typename enable_if<\n-      !__array_traits<_Tp, _Nm>::_Is_swappable::value>::type\n+    __enable_if_t<!__array_traits<_Tp, _Nm>::_Is_swappable::value>\n     swap(array<_Tp, _Nm>&, array<_Tp, _Nm>&) = delete;\n #endif\n \n@@ -394,7 +384,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     get(array<_Tp, _Nm>& __arr) noexcept\n     {\n       static_assert(_Int < _Nm, \"array index is within bounds\");\n-      return __array_traits<_Tp, _Nm>::_S_ref(__arr._M_elems, _Int);\n+      return __arr._M_elems[_Int];\n     }\n \n   template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n@@ -412,7 +402,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     get(const array<_Tp, _Nm>& __arr) noexcept\n     {\n       static_assert(_Int < _Nm, \"array index is within bounds\");\n-      return __array_traits<_Tp, _Nm>::_S_ref(__arr._M_elems, _Int);\n+      return __arr._M_elems[_Int];\n     }\n \n   template<std::size_t _Int, typename _Tp, std::size_t _Nm>"}, {"sha": "b97149474c9e7f24424e1da54528c9f1cdaeeeb8", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/get_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8d5ac08b5e60f35c52087d88c0235c8ce6b65b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8d5ac08b5e60f35c52087d88c0235c8ce6b65b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc?ref=ef8d5ac08b5e60f35c52087d88c0235c8ce6b65b", "patch": "@@ -26,6 +26,6 @@ int n1 = std::get<1>(a);\n int n2 = std::get<1>(std::move(a));\n int n3 = std::get<1>(ca);\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 396 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 405 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 414 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 386 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 395 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 404 }"}]}