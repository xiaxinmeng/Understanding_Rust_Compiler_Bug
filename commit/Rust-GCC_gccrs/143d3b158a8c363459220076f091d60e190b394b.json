{"sha": "143d3b158a8c363459220076f091d60e190b394b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQzZDNiMTU4YThjMzYzNDU5MjIwMDc2ZjA5MWQ2MGUxOTBiMzk0Yg==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2019-01-17T12:06:04Z"}, "committer": {"name": "Tamar Christina", "email": "tnfchris@gcc.gnu.org", "date": "2019-01-17T12:06:04Z"}, "message": "Rename stack-clash protection CFA register to avoid clash\n\ngcc/ChangeLog:\n\n\tPR target/88851\n\t* config/aarch64/aarch64.md (STACK_CLASH_SVE_CFA_REGNUM): New.\n\t* config/aarch64/aarch64.c (aarch64_allocate_and_probe_stack_space): Use\n\tit and document registers.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/88851\n\t* gcc.target/aarch64/stack-check-cfa-3.c: Update test.\n\nFrom-SVN: r268017", "tree": {"sha": "053acc256eaca0a2b1c29612eab6a6e3653f6044", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/053acc256eaca0a2b1c29612eab6a6e3653f6044"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/143d3b158a8c363459220076f091d60e190b394b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/143d3b158a8c363459220076f091d60e190b394b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/143d3b158a8c363459220076f091d60e190b394b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/143d3b158a8c363459220076f091d60e190b394b/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e32fc4499f863fe0fa81767d11f40ad2f1ab1668", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e32fc4499f863fe0fa81767d11f40ad2f1ab1668", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e32fc4499f863fe0fa81767d11f40ad2f1ab1668"}], "stats": {"total": 52, "additions": 40, "deletions": 12}, "files": [{"sha": "8d426fe59a4b22ea0b230d707ce13267f93fc1c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/143d3b158a8c363459220076f091d60e190b394b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/143d3b158a8c363459220076f091d60e190b394b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=143d3b158a8c363459220076f091d60e190b394b", "patch": "@@ -1,3 +1,10 @@\n+2019-01-17  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/88851\n+\t* config/aarch64/aarch64.md (STACK_CLASH_SVE_CFA_REGNUM): New.\n+\t* config/aarch64/aarch64.c (aarch64_allocate_and_probe_stack_space): Use\n+\tit and document registers.\n+\n 2019-01-17  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.c (ares_tunings): Define."}, {"sha": "2010864d9e925b21e2533cb7dc7419910aedf1cd", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/143d3b158a8c363459220076f091d60e190b394b/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/143d3b158a8c363459220076f091d60e190b394b/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=143d3b158a8c363459220076f091d60e190b394b", "patch": "@@ -5343,11 +5343,11 @@ aarch64_allocate_and_probe_stack_space (rtx temp1, rtx temp2,\n \t{\n \t  /* This is done to provide unwinding information for the stack\n \t     adjustments we're about to do, however to prevent the optimizers\n-\t     from removing the R15 move and leaving the CFA note (which would be\n+\t     from removing the R11 move and leaving the CFA note (which would be\n \t     very wrong) we tie the old and new stack pointer together.\n \t     The tie will expand to nothing but the optimizers will not touch\n \t     the instruction.  */\n-\t  rtx stack_ptr_copy = gen_rtx_REG (Pmode, R15_REGNUM);\n+\t  rtx stack_ptr_copy = gen_rtx_REG (Pmode, STACK_CLASH_SVE_CFA_REGNUM);\n \t  emit_move_insn (stack_ptr_copy, stack_pointer_rtx);\n \t  emit_insn (gen_stack_tie (stack_ptr_copy, stack_pointer_rtx));\n \n@@ -5574,7 +5574,19 @@ aarch64_add_cfa_expression (rtx_insn *insn, unsigned int reg,\n    to the stack we track as implicit probes are the FP/LR stores.\n \n    For outgoing arguments we probe if the size is larger than 1KB, such that\n-   the ABI specified buffer is maintained for the next callee.  */\n+   the ABI specified buffer is maintained for the next callee.\n+\n+   The following registers are reserved during frame layout and should not be\n+   used for any other purpose:\n+\n+   - r11: Used by stack clash protection when SVE is enabled.\n+   - r12(EP0) and r13(EP1): Used as temporaries for stack adjustment.\n+   - r14 and r15: Used for speculation tracking.\n+   - r16(IP0), r17(IP1): Used by indirect tailcalls.\n+   - r30(LR), r29(FP): Used by standard frame layout.\n+\n+   These registers must be avoided in frame layout related code unless the\n+   explicit intention is to interact with one of the features listed above.  */\n \n /* Generate the prologue instructions for entry into a function.\n    Establish the stack frame by decreasing the stack pointer with a"}, {"sha": "522c7748443cb2ed9d3a744d8e2c7a04f323f61f", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/143d3b158a8c363459220076f091d60e190b394b/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/143d3b158a8c363459220076f091d60e190b394b/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=143d3b158a8c363459220076f091d60e190b394b", "patch": "@@ -35,15 +35,10 @@\n     (R11_REGNUM\t\t11)\n     (R12_REGNUM\t\t12)\n     (R13_REGNUM\t\t13)\n-    ;; Scratch registers for prologue/epilogue use.\n-    (EP0_REGNUM\t\t12)\n-    (EP1_REGNUM\t\t13)\n     (R14_REGNUM\t\t14)\n     (R15_REGNUM\t\t15)\n     (R16_REGNUM\t\t16)\n-    (IP0_REGNUM\t\t16)\n     (R17_REGNUM\t\t17)\n-    (IP1_REGNUM\t\t17)\n     (R18_REGNUM\t\t18)\n     (R19_REGNUM\t\t19)\n     (R20_REGNUM\t\t20)\n@@ -57,7 +52,6 @@\n     (R28_REGNUM\t\t28)\n     (R29_REGNUM\t\t29)\n     (R30_REGNUM\t\t30)\n-    (LR_REGNUM\t\t30)\n     (SP_REGNUM\t\t31)\n     (V0_REGNUM\t\t32)\n     (V1_REGNUM\t\t33)\n@@ -113,10 +107,20 @@\n     (P13_REGNUM\t\t81)\n     (P14_REGNUM\t\t82)\n     (P15_REGNUM\t\t83)\n+    ;; Scratch register used by stack clash protection to calculate\n+    ;; SVE CFA offsets during probing.\n+    (STACK_CLASH_SVE_CFA_REGNUM 11)\n+    ;; Scratch registers for prologue/epilogue use.\n+    (EP0_REGNUM         12)\n+    (EP1_REGNUM         13)\n     ;; A couple of call-clobbered registers that we need to reserve when\n     ;; tracking speculation this is not ABI, so is subject to change.\n-    (SPECULATION_TRACKER_REGNUM 15)\n     (SPECULATION_SCRATCH_REGNUM 14)\n+    (SPECULATION_TRACKER_REGNUM 15)\n+    ;; Scratch registers used in frame layout.\n+    (IP0_REGNUM         16)\n+    (IP1_REGNUM         17)\n+    (LR_REGNUM          30)\n   ]\n )\n "}, {"sha": "632da85dfbebdbbdeea72b85c86a5bcd12671d3b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/143d3b158a8c363459220076f091d60e190b394b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/143d3b158a8c363459220076f091d60e190b394b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=143d3b158a8c363459220076f091d60e190b394b", "patch": "@@ -1,3 +1,8 @@\n+2019-01-17  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/88851\n+\t* gcc.target/aarch64/stack-check-cfa-3.c: Update test.\n+\n 2019-01-17  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/86610"}, {"sha": "c4b7bb601c442a981ca309d0c3e8f29341b9b466", "filename": "gcc/testsuite/gcc.target/aarch64/stack-check-cfa-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/143d3b158a8c363459220076f091d60e190b394b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstack-check-cfa-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/143d3b158a8c363459220076f091d60e190b394b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstack-check-cfa-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstack-check-cfa-3.c?ref=143d3b158a8c363459220076f091d60e190b394b", "patch": "@@ -8,6 +8,6 @@\n    need to make sure we can unwind correctly before the frame is set up.  So\n    check that we're emitting r15 with a copy of sp an setting the CFA there.  */\n \n-/* { dg-final { scan-assembler-times {mov\\tx15, sp} 1 } } */\n-/* { dg-final { scan-assembler-times {\\.cfi_def_cfa_register 15} 1 } } */\n+/* { dg-final { scan-assembler-times {mov\\tx11, sp} 1 } } */\n+/* { dg-final { scan-assembler-times {\\.cfi_def_cfa_register 11} 1 } } */\n /* { dg-final { scan-assembler-times {\\.cfi_escape 0xf,0xc,0x8f,0,0x92,0x2e,0,.*} 1 } } */"}]}