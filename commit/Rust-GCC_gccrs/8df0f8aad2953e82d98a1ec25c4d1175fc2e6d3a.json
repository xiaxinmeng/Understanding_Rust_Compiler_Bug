{"sha": "8df0f8aad2953e82d98a1ec25c4d1175fc2e6d3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRmMGY4YWFkMjk1M2U4MmQ5OGExZWMyNWM0ZDExNzVmYzJlNmQzYQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-01-20T23:19:12Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-01-20T23:19:12Z"}, "message": "[ARM/AArch64][testsuite] Add vtrn tests. Refactor vzup and vzip tests.\n\n2015-01-20  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vshuffle.inc: New file.\n\t* gcc.target/aarch64/advsimd-intrinsics/vtrn.c: New file.\n\t* gcc.target/aarch64/advsimd-intrinsics/vuzp.c: Use code from\n\tvshuffle.inc.\n\t* gcc.target/aarch64/advsimd-intrinsics/vzip.c: Use code from\n\tvshuffle.inc.\n\nFrom-SVN: r219919", "tree": {"sha": "af91516e24e2568207f5fb0466c5a2aa1c55ef52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af91516e24e2568207f5fb0466c5a2aa1c55ef52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8df0f8aad2953e82d98a1ec25c4d1175fc2e6d3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8df0f8aad2953e82d98a1ec25c4d1175fc2e6d3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8df0f8aad2953e82d98a1ec25c4d1175fc2e6d3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8df0f8aad2953e82d98a1ec25c4d1175fc2e6d3a/comments", "author": null, "committer": null, "parents": [{"sha": "1a1345f4e8f64340586a3ee612be2f634a0faae6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a1345f4e8f64340586a3ee612be2f634a0faae6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a1345f4e8f64340586a3ee612be2f634a0faae6"}], "stats": {"total": 525, "additions": 243, "deletions": 282}, "files": [{"sha": "dd76a3d3d575ca45b266db551dba65818b4ee230", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df0f8aad2953e82d98a1ec25c4d1175fc2e6d3a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df0f8aad2953e82d98a1ec25c4d1175fc2e6d3a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8df0f8aad2953e82d98a1ec25c4d1175fc2e6d3a", "patch": "@@ -1,3 +1,12 @@\n+2015-01-20  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vshuffle.inc: New file.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vtrn.c: New file.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vuzp.c: Use code from\n+\tvshuffle.inc.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vzip.c: Use code from\n+\tvshuffle.inc.\n+\n 2015-01-20  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vmlX_lane.inc: New file."}, {"sha": "928f338eb52c4ddbe6689da5e7b5daa2cebca9a8", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vshuffle.inc", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df0f8aad2953e82d98a1ec25c4d1175fc2e6d3a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshuffle.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df0f8aad2953e82d98a1ec25c4d1175fc2e6d3a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshuffle.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshuffle.inc?ref=8df0f8aad2953e82d98a1ec25c4d1175fc2e6d3a", "patch": "@@ -0,0 +1,139 @@\n+#define FNNAME1(NAME) exec_ ## NAME\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+void FNNAME (INSN_NAME) (void)\n+{\n+  /* In this case, output variables are arrays of vectors.  */\n+#define DECL_VSHUFFLE(T1, W, N)\t\t\t\t\t\t\\\n+  VECT_ARRAY_TYPE(T1, W, N, 2) VECT_ARRAY_VAR(result_vec, T1, W, N, 2);\t\\\n+  VECT_VAR_DECL(result_bis, T1, W, N)[2 * N]\n+\n+  /* We need to use a temporary result buffer (result_bis), because\n+     the one used for other tests is not large enough. A subset of the\n+     result data is moved from result_bis to result, and it is this\n+     subset which is used to check the actual behaviour. The next\n+     macro enables to move another chunk of data from result_bis to\n+     result.  */\n+#define TEST_VSHUFFLE(INSN, Q, T1, T2, W, N)\t\t\t\t\\\n+  VECT_ARRAY_VAR(result_vec, T1, W, N, 2) =\t\t\t\t\\\n+    INSN##Q##_##T2##W(VECT_VAR(vector1, T1, W, N),\t\t\t\\\n+\t\t      VECT_VAR(vector2, T1, W, N));\t\t\t\\\n+  vst2##Q##_##T2##W(VECT_VAR(result_bis, T1, W, N),\t\t\t\\\n+\t\t    VECT_ARRAY_VAR(result_vec, T1, W, N, 2));\t\t\\\n+  memcpy(VECT_VAR(result, T1, W, N), VECT_VAR(result_bis, T1, W, N),\t\\\n+\t sizeof(VECT_VAR(result, T1, W, N)));\n+\n+  /* Overwrite \"result\" with the contents of \"result_bis\"[X].  */\n+#define TEST_EXTRA_CHUNK(T1, W, N, X)\t\t\t\t\t\\\n+  memcpy(VECT_VAR(result, T1, W, N), &(VECT_VAR(result_bis, T1, W, N)[X*N]), \\\n+\t sizeof(VECT_VAR(result, T1, W, N)));\n+\n+  DECL_VARIABLE_ALL_VARIANTS(vector1);\n+  DECL_VARIABLE_ALL_VARIANTS(vector2);\n+\n+  /* We don't need 64 bits variants.  */\n+#define DECL_ALL_VSHUFFLE()\t\t\t\t\\\n+  DECL_VSHUFFLE(int, 8, 8);\t\t\t\t\\\n+  DECL_VSHUFFLE(int, 16, 4);\t\t\t\t\\\n+  DECL_VSHUFFLE(int, 32, 2);\t\t\t\t\\\n+  DECL_VSHUFFLE(uint, 8, 8);\t\t\t\t\\\n+  DECL_VSHUFFLE(uint, 16, 4);\t\t\t\t\\\n+  DECL_VSHUFFLE(uint, 32, 2);\t\t\t\t\\\n+  DECL_VSHUFFLE(poly, 8, 8);\t\t\t\t\\\n+  DECL_VSHUFFLE(poly, 16, 4);\t\t\t\t\\\n+  DECL_VSHUFFLE(float, 32, 2);\t\t\t\t\\\n+  DECL_VSHUFFLE(int, 8, 16);\t\t\t\t\\\n+  DECL_VSHUFFLE(int, 16, 8);\t\t\t\t\\\n+  DECL_VSHUFFLE(int, 32, 4);\t\t\t\t\\\n+  DECL_VSHUFFLE(uint, 8, 16);\t\t\t\t\\\n+  DECL_VSHUFFLE(uint, 16, 8);\t\t\t\t\\\n+  DECL_VSHUFFLE(uint, 32, 4);\t\t\t\t\\\n+  DECL_VSHUFFLE(poly, 8, 16);\t\t\t\t\\\n+  DECL_VSHUFFLE(poly, 16, 8);\t\t\t\t\\\n+  DECL_VSHUFFLE(float, 32, 4)\n+\n+  DECL_ALL_VSHUFFLE();\n+\n+  /* Initialize input \"vector\" from \"buffer\".  */\n+  TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector1, buffer);\n+  VLOAD(vector1, buffer, , float, f, 32, 2);\n+  VLOAD(vector1, buffer, q, float, f, 32, 4);\n+\n+  /* Choose arbitrary initialization values.  */\n+  VDUP(vector2, , int, s, 8, 8, 0x11);\n+  VDUP(vector2, , int, s, 16, 4, 0x22);\n+  VDUP(vector2, , int, s, 32, 2, 0x33);\n+  VDUP(vector2, , uint, u, 8, 8, 0x55);\n+  VDUP(vector2, , uint, u, 16, 4, 0x66);\n+  VDUP(vector2, , uint, u, 32, 2, 0x77);\n+  VDUP(vector2, , poly, p, 8, 8, 0x55);\n+  VDUP(vector2, , poly, p, 16, 4, 0x66);\n+  VDUP(vector2, , float, f, 32, 2, 33.6f);\n+\n+  VDUP(vector2, q, int, s, 8, 16, 0x11);\n+  VDUP(vector2, q, int, s, 16, 8, 0x22);\n+  VDUP(vector2, q, int, s, 32, 4, 0x33);\n+  VDUP(vector2, q, uint, u, 8, 16, 0x55);\n+  VDUP(vector2, q, uint, u, 16, 8, 0x66);\n+  VDUP(vector2, q, uint, u, 32, 4, 0x77);\n+  VDUP(vector2, q, poly, p, 8, 16, 0x55);\n+  VDUP(vector2, q, poly, p, 16, 8, 0x66);\n+  VDUP(vector2, q, float, f, 32, 4, 33.8f);\n+  \n+#define TEST_ALL_VSHUFFLE(INSN)\t\t\t\t\\\n+  TEST_VSHUFFLE(INSN, , int, s, 8, 8);\t\t\t\\\n+  TEST_VSHUFFLE(INSN, , int, s, 16, 4);\t\t\t\\\n+  TEST_VSHUFFLE(INSN, , int, s, 32, 2);\t\t\t\\\n+  TEST_VSHUFFLE(INSN, , uint, u, 8, 8);\t\t\t\\\n+  TEST_VSHUFFLE(INSN, , uint, u, 16, 4);\t\t\\\n+  TEST_VSHUFFLE(INSN, , uint, u, 32, 2);\t\t\\\n+  TEST_VSHUFFLE(INSN, , poly, p, 8, 8);\t\t\t\\\n+  TEST_VSHUFFLE(INSN, , poly, p, 16, 4);\t\t\\\n+  TEST_VSHUFFLE(INSN, , float, f, 32, 2);\t\t\\\n+  TEST_VSHUFFLE(INSN, q, int, s, 8, 16);\t\t\\\n+  TEST_VSHUFFLE(INSN, q, int, s, 16, 8);\t\t\\\n+  TEST_VSHUFFLE(INSN, q, int, s, 32, 4);\t\t\\\n+  TEST_VSHUFFLE(INSN, q, uint, u, 8, 16);\t\t\\\n+  TEST_VSHUFFLE(INSN, q, uint, u, 16, 8);\t\t\\\n+  TEST_VSHUFFLE(INSN, q, uint, u, 32, 4);\t\t\\\n+  TEST_VSHUFFLE(INSN, q, poly, p, 8, 16);\t\t\\\n+  TEST_VSHUFFLE(INSN, q, poly, p, 16, 8);\t\t\\\n+  TEST_VSHUFFLE(INSN, q, float, f, 32, 4)\n+\n+#define TEST_ALL_EXTRA_CHUNKS()\t\t\t\\\n+  TEST_EXTRA_CHUNK(int, 8, 8, 1);\t\t\\\n+  TEST_EXTRA_CHUNK(int, 16, 4, 1);\t\t\\\n+  TEST_EXTRA_CHUNK(int, 32, 2, 1);\t\t\\\n+  TEST_EXTRA_CHUNK(uint, 8, 8, 1);\t\t\\\n+  TEST_EXTRA_CHUNK(uint, 16, 4, 1);\t\t\\\n+  TEST_EXTRA_CHUNK(uint, 32, 2, 1);\t\t\\\n+  TEST_EXTRA_CHUNK(poly, 8, 8, 1);\t\t\\\n+  TEST_EXTRA_CHUNK(poly, 16, 4, 1);\t\t\\\n+  TEST_EXTRA_CHUNK(float, 32, 2, 1);\t\t\\\n+  TEST_EXTRA_CHUNK(int, 8, 16, 1);\t\t\\\n+  TEST_EXTRA_CHUNK(int, 16, 8, 1);\t\t\\\n+  TEST_EXTRA_CHUNK(int, 32, 4, 1);\t\t\\\n+  TEST_EXTRA_CHUNK(uint, 8, 16, 1);\t\t\\\n+  TEST_EXTRA_CHUNK(uint, 16, 8, 1);\t\t\\\n+  TEST_EXTRA_CHUNK(uint, 32, 4, 1);\t\t\\\n+  TEST_EXTRA_CHUNK(poly, 8, 16, 1);\t\t\\\n+  TEST_EXTRA_CHUNK(poly, 16, 8, 1);\t\t\\\n+  TEST_EXTRA_CHUNK(float, 32, 4, 1)\n+\n+  clean_results ();\n+\n+  /* Execute the tests.  */\n+  TEST_ALL_VSHUFFLE(INSN_NAME);\n+\n+  CHECK_RESULTS_NAMED (TEST_MSG, expected0, \"(chunk 0)\");\n+\n+  TEST_ALL_EXTRA_CHUNKS();\n+  CHECK_RESULTS_NAMED (TEST_MSG, expected1, \"(chunk 1)\");\n+}\n+\n+int main (void)\n+{\n+  FNNAME (INSN_NAME) ();\n+\n+  return 0;\n+}"}, {"sha": "be18c0f4b3aa2bfda0dd97623be58f52a3637c89", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vtrn.c", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df0f8aad2953e82d98a1ec25c4d1175fc2e6d3a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvtrn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df0f8aad2953e82d98a1ec25c4d1175fc2e6d3a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvtrn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvtrn.c?ref=8df0f8aad2953e82d98a1ec25c4d1175fc2e6d3a", "patch": "@@ -0,0 +1,93 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results splitted in several chunks.  */\n+/* Chunk 0.  */\n+VECT_VAR_DECL(expected0,int,8,8) [] = { 0xf0, 0xf1, 0x11, 0x11,\n+\t\t\t\t\t0xf2, 0xf3, 0x11, 0x11 };\n+VECT_VAR_DECL(expected0,int,16,4) [] = { 0xfff0, 0xfff1, 0x22, 0x22 };\n+VECT_VAR_DECL(expected0,int,32,2) [] = { 0xfffffff0, 0xfffffff1 };\n+VECT_VAR_DECL(expected0,int,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected0,uint,8,8) [] = { 0xf0, 0xf1, 0x55, 0x55,\n+\t\t\t\t\t 0xf2, 0xf3, 0x55, 0x55 };\n+VECT_VAR_DECL(expected0,uint,16,4) [] = { 0xfff0, 0xfff1, 0x66, 0x66 };\n+VECT_VAR_DECL(expected0,uint,32,2) [] = { 0xfffffff0, 0xfffffff1 };\n+VECT_VAR_DECL(expected0,uint,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected0,poly,8,8) [] = { 0xf0, 0xf1, 0x55, 0x55,\n+\t\t\t\t\t 0xf2, 0xf3, 0x55, 0x55 };\n+VECT_VAR_DECL(expected0,poly,16,4) [] = { 0xfff0, 0xfff1, 0x66, 0x66 };\n+VECT_VAR_DECL(expected0,hfloat,32,2) [] = { 0xc1800000, 0xc1700000 };\n+VECT_VAR_DECL(expected0,int,8,16) [] = { 0xf0, 0xf1, 0x11, 0x11,\n+\t\t\t\t\t 0xf2, 0xf3, 0x11, 0x11,\n+\t\t\t\t\t 0xf4, 0xf5, 0x11, 0x11,\n+\t\t\t\t\t 0xf6, 0xf7, 0x11, 0x11 };\n+VECT_VAR_DECL(expected0,int,16,8) [] = { 0xfff0, 0xfff1, 0x22, 0x22,\n+\t\t\t\t\t 0xfff2, 0xfff3, 0x22, 0x22 };\n+VECT_VAR_DECL(expected0,int,32,4) [] = { 0xfffffff0, 0xfffffff1, 0x33, 0x33 };\n+VECT_VAR_DECL(expected0,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t 0x3333333333333333 };\n+VECT_VAR_DECL(expected0,uint,8,16) [] = { 0xf0, 0xf1, 0x55, 0x55,\n+\t\t\t\t\t  0xf2, 0xf3, 0x55, 0x55,\n+\t\t\t\t\t  0xf4, 0xf5, 0x55, 0x55,\n+\t\t\t\t\t  0xf6, 0xf7, 0x55, 0x55 };\n+VECT_VAR_DECL(expected0,uint,16,8) [] = { 0xfff0, 0xfff1, 0x66, 0x66,\n+\t\t\t\t\t  0xfff2, 0xfff3, 0x66, 0x66 };\n+VECT_VAR_DECL(expected0,uint,32,4) [] = { 0xfffffff0, 0xfffffff1, 0x77, 0x77 };\n+VECT_VAR_DECL(expected0,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t  0x3333333333333333 };\n+VECT_VAR_DECL(expected0,poly,8,16) [] = { 0xf0, 0xf1, 0x55, 0x55,\n+\t\t\t\t\t  0xf2, 0xf3, 0x55, 0x55,\n+\t\t\t\t\t  0xf4, 0xf5, 0x55, 0x55,\n+\t\t\t\t\t  0xf6, 0xf7, 0x55, 0x55 };\n+VECT_VAR_DECL(expected0,poly,16,8) [] = { 0xfff0, 0xfff1, 0x66, 0x66,\n+\t\t\t\t\t  0xfff2, 0xfff3, 0x66, 0x66 };\n+VECT_VAR_DECL(expected0,hfloat,32,4) [] = { 0xc1800000, 0xc1700000,\n+\t\t\t\t\t    0x42073333, 0x42073333 };\n+\n+/* Chunk 1.  */\n+VECT_VAR_DECL(expected1,int,8,8) [] = { 0xf4, 0xf5, 0x11, 0x11,\n+\t\t\t\t\t0xf6, 0xf7, 0x11, 0x11 };\n+VECT_VAR_DECL(expected1,int,16,4) [] = { 0xfff2, 0xfff3, 0x22, 0x22 };\n+VECT_VAR_DECL(expected1,int,32,2) [] = { 0x33, 0x33 };\n+VECT_VAR_DECL(expected1,int,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected1,uint,8,8) [] = { 0xf4, 0xf5, 0x55, 0x55,\n+\t\t\t\t\t 0xf6, 0xf7, 0x55, 0x55 };\n+VECT_VAR_DECL(expected1,uint,16,4) [] = { 0xfff2, 0xfff3, 0x66, 0x66 };\n+VECT_VAR_DECL(expected1,uint,32,2) [] = { 0x77, 0x77 };\n+VECT_VAR_DECL(expected1,uint,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected1,poly,8,8) [] = { 0xf4, 0xf5, 0x55, 0x55,\n+\t\t\t\t\t 0xf6, 0xf7, 0x55, 0x55 };\n+VECT_VAR_DECL(expected1,poly,16,4) [] = { 0xfff2, 0xfff3, 0x66, 0x66 };\n+VECT_VAR_DECL(expected1,hfloat,32,2) [] = { 0x42066666, 0x42066666 };\n+VECT_VAR_DECL(expected1,int,8,16) [] = { 0xf8, 0xf9, 0x11, 0x11,\n+\t\t\t\t\t 0xfa, 0xfb, 0x11, 0x11,\n+\t\t\t\t\t 0xfc, 0xfd, 0x11, 0x11,\n+\t\t\t\t\t 0xfe, 0xff, 0x11, 0x11 };\n+VECT_VAR_DECL(expected1,int,16,8) [] = { 0xfff4, 0xfff5, 0x22, 0x22,\n+\t\t\t\t\t 0xfff6, 0xfff7, 0x22, 0x22 };\n+VECT_VAR_DECL(expected1,int,32,4) [] = { 0xfffffff2, 0xfffffff3, 0x33, 0x33 };\n+VECT_VAR_DECL(expected1,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t 0x3333333333333333 };\n+VECT_VAR_DECL(expected1,uint,8,16) [] = { 0xf8, 0xf9, 0x55, 0x55,\n+\t\t\t\t\t  0xfa, 0xfb, 0x55, 0x55,\n+\t\t\t\t\t  0xfc, 0xfd, 0x55, 0x55,\n+\t\t\t\t\t  0xfe, 0xff, 0x55, 0x55 };\n+VECT_VAR_DECL(expected1,uint,16,8) [] = { 0xfff4, 0xfff5, 0x66, 0x66,\n+\t\t\t\t\t  0xfff6, 0xfff7, 0x66, 0x66 };\n+VECT_VAR_DECL(expected1,uint,32,4) [] = { 0xfffffff2, 0xfffffff3, 0x77, 0x77 };\n+VECT_VAR_DECL(expected1,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t  0x3333333333333333 };\n+VECT_VAR_DECL(expected1,poly,8,16) [] = { 0xf8, 0xf9, 0x55, 0x55,\n+\t\t\t\t\t  0xfa, 0xfb, 0x55, 0x55,\n+\t\t\t\t\t  0xfc, 0xfd, 0x55, 0x55,\n+\t\t\t\t\t  0xfe, 0xff, 0x55, 0x55 };\n+VECT_VAR_DECL(expected1,poly,16,8) [] = { 0xfff4, 0xfff5, 0x66, 0x66,\n+\t\t\t\t\t  0xfff6, 0xfff7, 0x66, 0x66 };\n+VECT_VAR_DECL(expected1,hfloat,32,4) [] = { 0xc1600000, 0xc1500000,\n+\t\t\t\t\t    0x42073333, 0x42073333 };\n+\n+#define INSN_NAME vtrn\n+#define TEST_MSG \"VTRN/VTRNQ\"\n+\n+#include \"vshuffle.inc\""}, {"sha": "ec9ded361584acc05f5aece9aa9fc1df257b2b7e", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vuzp.c", "status": "modified", "additions": 1, "deletions": 141, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df0f8aad2953e82d98a1ec25c4d1175fc2e6d3a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvuzp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df0f8aad2953e82d98a1ec25c4d1175fc2e6d3a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvuzp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvuzp.c?ref=8df0f8aad2953e82d98a1ec25c4d1175fc2e6d3a", "patch": "@@ -99,147 +99,7 @@ VECT_VAR_DECL(expected1,poly,16,8) [] = { 0x66, 0x66, 0x66, 0x66,\n VECT_VAR_DECL(expected1,hfloat,32,4) [] = { 0x42073333, 0x42073333,\n \t\t\t\t\t    0x42073333, 0x42073333 };\n \n-#ifndef INSN_NAME\n #define INSN_NAME vuzp\n #define TEST_MSG \"VUZP/VUZPQ\"\n-#endif\n \n-#define FNNAME1(NAME) exec_ ## NAME\n-#define FNNAME(NAME) FNNAME1(NAME)\n-\n-void FNNAME (INSN_NAME) (void)\n-{\n-  /* In this case, output variables are arrays of vectors.  */\n-#define DECL_VUZP(T1, W, N)\t\t\t\t\t\t\\\n-  VECT_ARRAY_TYPE(T1, W, N, 2) VECT_ARRAY_VAR(result_vec, T1, W, N, 2);\t\\\n-  VECT_VAR_DECL(result_bis, T1, W, N)[2 * N]\n-\n-  /* We need to use a temporary result buffer (result_bis), because\n-     the one used for other tests is not large enough. A subset of the\n-     result data is moved from result_bis to result, and it is this\n-     subset which is used to check the actual behaviour. The next\n-     macro enables to move another chunk of data from result_bis to\n-     result.  */\n-#define TEST_VUZP(INSN, Q, T1, T2, W, N)\t\t\t\t\\\n-  VECT_ARRAY_VAR(result_vec, T1, W, N, 2) =\t\t\t\t\\\n-    INSN##Q##_##T2##W(VECT_VAR(vector1, T1, W, N),\t\t\t\\\n-\t\t      VECT_VAR(vector2, T1, W, N));\t\t\t\\\n-  vst2##Q##_##T2##W(VECT_VAR(result_bis, T1, W, N),\t\t\t\\\n-\t\t    VECT_ARRAY_VAR(result_vec, T1, W, N, 2));\t\t\\\n-  memcpy(VECT_VAR(result, T1, W, N), VECT_VAR(result_bis, T1, W, N),\t\\\n-\t sizeof(VECT_VAR(result, T1, W, N)));\n-\n-  /* Overwrite \"result\" with the contents of \"result_bis\"[X].  */\n-#define TEST_EXTRA_CHUNK(T1, W, N, X)\t\t\t\t\t\\\n-  memcpy(VECT_VAR(result, T1, W, N), &(VECT_VAR(result_bis, T1, W, N)[X*N]), \\\n-\t sizeof(VECT_VAR(result, T1, W, N)));\n-\n-  DECL_VARIABLE_ALL_VARIANTS(vector1);\n-  DECL_VARIABLE_ALL_VARIANTS(vector2);\n-\n-  /* We don't need 64 bits variants.  */\n-#define DECL_ALL_VUZP()\t\t\t\t\\\n-  DECL_VUZP(int, 8, 8);\t\t\t\t\\\n-  DECL_VUZP(int, 16, 4);\t\t\t\\\n-  DECL_VUZP(int, 32, 2);\t\t\t\\\n-  DECL_VUZP(uint, 8, 8);\t\t\t\\\n-  DECL_VUZP(uint, 16, 4);\t\t\t\\\n-  DECL_VUZP(uint, 32, 2);\t\t\t\\\n-  DECL_VUZP(poly, 8, 8);\t\t\t\\\n-  DECL_VUZP(poly, 16, 4);\t\t\t\\\n-  DECL_VUZP(float, 32, 2);\t\t\t\\\n-  DECL_VUZP(int, 8, 16);\t\t\t\\\n-  DECL_VUZP(int, 16, 8);\t\t\t\\\n-  DECL_VUZP(int, 32, 4);\t\t\t\\\n-  DECL_VUZP(uint, 8, 16);\t\t\t\\\n-  DECL_VUZP(uint, 16, 8);\t\t\t\\\n-  DECL_VUZP(uint, 32, 4);\t\t\t\\\n-  DECL_VUZP(poly, 8, 16);\t\t\t\\\n-  DECL_VUZP(poly, 16, 8);\t\t\t\\\n-  DECL_VUZP(float, 32, 4)\n-\n-  DECL_ALL_VUZP();\n-\n-  /* Initialize input \"vector\" from \"buffer\".  */\n-  TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector1, buffer);\n-  VLOAD(vector1, buffer, , float, f, 32, 2);\n-  VLOAD(vector1, buffer, q, float, f, 32, 4);\n-\n-  /* Choose arbitrary initialization values.  */\n-  VDUP(vector2, , int, s, 8, 8, 0x11);\n-  VDUP(vector2, , int, s, 16, 4, 0x22);\n-  VDUP(vector2, , int, s, 32, 2, 0x33);\n-  VDUP(vector2, , uint, u, 8, 8, 0x55);\n-  VDUP(vector2, , uint, u, 16, 4, 0x66);\n-  VDUP(vector2, , uint, u, 32, 2, 0x77);\n-  VDUP(vector2, , poly, p, 8, 8, 0x55);\n-  VDUP(vector2, , poly, p, 16, 4, 0x66);\n-  VDUP(vector2, , float, f, 32, 2, 33.6f);\n-\n-  VDUP(vector2, q, int, s, 8, 16, 0x11);\n-  VDUP(vector2, q, int, s, 16, 8, 0x22);\n-  VDUP(vector2, q, int, s, 32, 4, 0x33);\n-  VDUP(vector2, q, uint, u, 8, 16, 0x55);\n-  VDUP(vector2, q, uint, u, 16, 8, 0x66);\n-  VDUP(vector2, q, uint, u, 32, 4, 0x77);\n-  VDUP(vector2, q, poly, p, 8, 16, 0x55);\n-  VDUP(vector2, q, poly, p, 16, 8, 0x66);\n-  VDUP(vector2, q, float, f, 32, 4, 33.8f);\n-\n-#define TEST_ALL_VUZP(INSN)\t\t\t\\\n-  TEST_VUZP(INSN, , int, s, 8, 8);\t\t\\\n-  TEST_VUZP(INSN, , int, s, 16, 4);\t\t\\\n-  TEST_VUZP(INSN, , int, s, 32, 2);\t\t\\\n-  TEST_VUZP(INSN, , uint, u, 8, 8);\t\t\\\n-  TEST_VUZP(INSN, , uint, u, 16, 4);\t\t\\\n-  TEST_VUZP(INSN, , uint, u, 32, 2);\t\t\\\n-  TEST_VUZP(INSN, , poly, p, 8, 8);\t\t\\\n-  TEST_VUZP(INSN, , poly, p, 16, 4);\t\t\\\n-  TEST_VUZP(INSN, , float, f, 32, 2);\t\t\\\n-  TEST_VUZP(INSN, q, int, s, 8, 16);\t\t\\\n-  TEST_VUZP(INSN, q, int, s, 16, 8);\t\t\\\n-  TEST_VUZP(INSN, q, int, s, 32, 4);\t\t\\\n-  TEST_VUZP(INSN, q, uint, u, 8, 16);\t\t\\\n-  TEST_VUZP(INSN, q, uint, u, 16, 8);\t\t\\\n-  TEST_VUZP(INSN, q, uint, u, 32, 4);\t\t\\\n-  TEST_VUZP(INSN, q, poly, p, 8, 16);\t\t\\\n-  TEST_VUZP(INSN, q, poly, p, 16, 8);\t\t\\\n-  TEST_VUZP(INSN, q, float, f, 32, 4)\n-\n-#define TEST_ALL_EXTRA_CHUNKS()\t\t\t\\\n-  TEST_EXTRA_CHUNK(int, 8, 8, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(int, 16, 4, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(int, 32, 2, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(uint, 8, 8, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(uint, 16, 4, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(uint, 32, 2, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(poly, 8, 8, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(poly, 16, 4, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(float, 32, 2, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(int, 8, 16, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(int, 16, 8, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(int, 32, 4, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(uint, 8, 16, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(uint, 16, 8, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(uint, 32, 4, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(poly, 8, 16, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(poly, 16, 8, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(float, 32, 4, 1)\n-\n-  clean_results ();\n-\n-  /* Execute the tests.  */\n-  TEST_ALL_VUZP(INSN_NAME);\n-\n-  CHECK_RESULTS_NAMED (TEST_MSG, expected0, \"(chunk 0)\");\n-\n-  TEST_ALL_EXTRA_CHUNKS();\n-  CHECK_RESULTS_NAMED (TEST_MSG, expected1, \"(chunk 1)\");\n-}\n-\n-int main (void)\n-{\n-  FNNAME (INSN_NAME) ();\n-\n-  return 0;\n-}\n+#include \"vshuffle.inc\""}, {"sha": "05faa8a8c6c73c9a30eba273edee82bae58367cc", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vzip.c", "status": "modified", "additions": 1, "deletions": 141, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df0f8aad2953e82d98a1ec25c4d1175fc2e6d3a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvzip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df0f8aad2953e82d98a1ec25c4d1175fc2e6d3a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvzip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvzip.c?ref=8df0f8aad2953e82d98a1ec25c4d1175fc2e6d3a", "patch": "@@ -97,147 +97,7 @@ VECT_VAR_DECL(expected1,poly,16,8) [] = { 0xfff2, 0xfff6, 0x66, 0x66,\n VECT_VAR_DECL(expected1,hfloat,32,4) [] = { 0xc1700000, 0xc1500000,\n \t\t\t\t\t    0x42073333, 0x42073333 };\n \n-#ifndef INSN_NAME\n #define INSN_NAME vzip\n #define TEST_MSG \"VZIP/VZIPQ\"\n-#endif\n \n-#define FNNAME1(NAME) exec_ ## NAME\n-#define FNNAME(NAME) FNNAME1(NAME)\n-\n-void FNNAME (INSN_NAME) (void)\n-{\n-  /* In this case, output variables are arrays of vectors.  */\n-#define DECL_VZIP(T1, W, N)\t\t\t\t\t\t\\\n-  VECT_ARRAY_TYPE(T1, W, N, 2) VECT_ARRAY_VAR(result_vec, T1, W, N, 2);\t\\\n-  VECT_VAR_DECL(result_bis, T1, W, N)[2 * N]\n-\n-  /* We need to use a temporary result buffer (result_bis), because\n-     the one used for other tests is not large enough. A subset of the\n-     result data is moved from result_bis to result, and it is this\n-     subset which is used to check the actual behaviour. The next\n-     macro enables to move another chunk of data from result_bis to\n-     result.  */\n-#define TEST_VZIP(INSN, Q, T1, T2, W, N)\t\t\t\t\\\n-  VECT_ARRAY_VAR(result_vec, T1, W, N, 2) =\t\t\t\t\\\n-    INSN##Q##_##T2##W(VECT_VAR(vector1, T1, W, N),\t\t\t\\\n-\t\t      VECT_VAR(vector2, T1, W, N));\t\t\t\\\n-  vst2##Q##_##T2##W(VECT_VAR(result_bis, T1, W, N),\t\t\t\\\n-\t\t    VECT_ARRAY_VAR(result_vec, T1, W, N, 2));\t\t\\\n-  memcpy(VECT_VAR(result, T1, W, N), VECT_VAR(result_bis, T1, W, N),\t\\\n-\t sizeof(VECT_VAR(result, T1, W, N)));\n-\n-  /* Overwrite \"result\" with the contents of \"result_bis\"[X].  */\n-#define TEST_EXTRA_CHUNK(T1, W, N, X)\t\t\t\t\t\\\n-  memcpy(VECT_VAR(result, T1, W, N), &(VECT_VAR(result_bis, T1, W, N)[X*N]), \\\n-\t sizeof(VECT_VAR(result, T1, W, N)));\n-\n-  DECL_VARIABLE_ALL_VARIANTS(vector1);\n-  DECL_VARIABLE_ALL_VARIANTS(vector2);\n-\n-  /* We don't need 64 bits variants.  */\n-#define DECL_ALL_VZIP()\t\t\t\t\\\n-  DECL_VZIP(int, 8, 8);\t\t\t\t\\\n-  DECL_VZIP(int, 16, 4);\t\t\t\\\n-  DECL_VZIP(int, 32, 2);\t\t\t\\\n-  DECL_VZIP(uint, 8, 8);\t\t\t\\\n-  DECL_VZIP(uint, 16, 4);\t\t\t\\\n-  DECL_VZIP(uint, 32, 2);\t\t\t\\\n-  DECL_VZIP(poly, 8, 8);\t\t\t\\\n-  DECL_VZIP(poly, 16, 4);\t\t\t\\\n-  DECL_VZIP(float, 32, 2);\t\t\t\\\n-  DECL_VZIP(int, 8, 16);\t\t\t\\\n-  DECL_VZIP(int, 16, 8);\t\t\t\\\n-  DECL_VZIP(int, 32, 4);\t\t\t\\\n-  DECL_VZIP(uint, 8, 16);\t\t\t\\\n-  DECL_VZIP(uint, 16, 8);\t\t\t\\\n-  DECL_VZIP(uint, 32, 4);\t\t\t\\\n-  DECL_VZIP(poly, 8, 16);\t\t\t\\\n-  DECL_VZIP(poly, 16, 8);\t\t\t\\\n-  DECL_VZIP(float, 32, 4)\n-\n-  DECL_ALL_VZIP();\n-\n-  /* Initialize input \"vector\" from \"buffer\".  */\n-  TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector1, buffer);\n-  VLOAD(vector1, buffer, , float, f, 32, 2);\n-  VLOAD(vector1, buffer, q, float, f, 32, 4);\n-\n-  /* Choose arbitrary initialization values.  */\n-  VDUP(vector2, , int, s, 8, 8, 0x11);\n-  VDUP(vector2, , int, s, 16, 4, 0x22);\n-  VDUP(vector2, , int, s, 32, 2, 0x33);\n-  VDUP(vector2, , uint, u, 8, 8, 0x55);\n-  VDUP(vector2, , uint, u, 16, 4, 0x66);\n-  VDUP(vector2, , uint, u, 32, 2, 0x77);\n-  VDUP(vector2, , poly, p, 8, 8, 0x55);\n-  VDUP(vector2, , poly, p, 16, 4, 0x66);\n-  VDUP(vector2, , float, f, 32, 2, 33.6f);\n-\n-  VDUP(vector2, q, int, s, 8, 16, 0x11);\n-  VDUP(vector2, q, int, s, 16, 8, 0x22);\n-  VDUP(vector2, q, int, s, 32, 4, 0x33);\n-  VDUP(vector2, q, uint, u, 8, 16, 0x55);\n-  VDUP(vector2, q, uint, u, 16, 8, 0x66);\n-  VDUP(vector2, q, uint, u, 32, 4, 0x77);\n-  VDUP(vector2, q, poly, p, 8, 16, 0x55);\n-  VDUP(vector2, q, poly, p, 16, 8, 0x66);\n-  VDUP(vector2, q, float, f, 32, 4, 33.8f);\n-\n-#define TEST_ALL_VZIP(INSN)\t\t\t\\\n-  TEST_VZIP(INSN, , int, s, 8, 8);\t\t\\\n-  TEST_VZIP(INSN, , int, s, 16, 4);\t\t\\\n-  TEST_VZIP(INSN, , int, s, 32, 2);\t\t\\\n-  TEST_VZIP(INSN, , uint, u, 8, 8);\t\t\\\n-  TEST_VZIP(INSN, , uint, u, 16, 4);\t\t\\\n-  TEST_VZIP(INSN, , uint, u, 32, 2);\t\t\\\n-  TEST_VZIP(INSN, , poly, p, 8, 8);\t\t\\\n-  TEST_VZIP(INSN, , poly, p, 16, 4);\t\t\\\n-  TEST_VZIP(INSN, , float, f, 32, 2);\t\t\\\n-  TEST_VZIP(INSN, q, int, s, 8, 16);\t\t\\\n-  TEST_VZIP(INSN, q, int, s, 16, 8);\t\t\\\n-  TEST_VZIP(INSN, q, int, s, 32, 4);\t\t\\\n-  TEST_VZIP(INSN, q, uint, u, 8, 16);\t\t\\\n-  TEST_VZIP(INSN, q, uint, u, 16, 8);\t\t\\\n-  TEST_VZIP(INSN, q, uint, u, 32, 4);\t\t\\\n-  TEST_VZIP(INSN, q, poly, p, 8, 16);\t\t\\\n-  TEST_VZIP(INSN, q, poly, p, 16, 8);\t\t\\\n-  TEST_VZIP(INSN, q, float, f, 32, 4)\n-\n-#define TEST_ALL_EXTRA_CHUNKS()\t\t\t\\\n-  TEST_EXTRA_CHUNK(int, 8, 8, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(int, 16, 4, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(int, 32, 2, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(uint, 8, 8, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(uint, 16, 4, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(uint, 32, 2, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(poly, 8, 8, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(poly, 16, 4, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(float, 32, 2, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(int, 8, 16, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(int, 16, 8, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(int, 32, 4, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(uint, 8, 16, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(uint, 16, 8, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(uint, 32, 4, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(poly, 8, 16, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(poly, 16, 8, 1);\t\t\\\n-  TEST_EXTRA_CHUNK(float, 32, 4, 1)\n-\n-  clean_results ();\n-\n-  /* Execute the tests.  */\n-  TEST_ALL_VZIP(INSN_NAME);\n-\n-  CHECK_RESULTS_NAMED (TEST_MSG, expected0, \"(chunk 0)\");\n-\n-  TEST_ALL_EXTRA_CHUNKS();\n-  CHECK_RESULTS_NAMED (TEST_MSG, expected1, \"(chunk 1)\");\n-}\n-\n-int main (void)\n-{\n-  FNNAME (INSN_NAME) ();\n-\n-  return 0;\n-}\n+#include \"vshuffle.inc\""}]}