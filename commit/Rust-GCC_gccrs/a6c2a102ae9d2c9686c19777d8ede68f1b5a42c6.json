{"sha": "a6c2a102ae9d2c9686c19777d8ede68f1b5a42c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZjMmExMDJhZTlkMmM5Njg2YzE5Nzc3ZDhlZGU2OGYxYjVhNDJjNg==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@mhpcc.edu", "date": "1998-08-16T11:07:25Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1998-08-16T11:07:25Z"}, "message": "rs6000.c (rs6000_stack_info): Use if == 0 for sizes.\n\n        * rs6000.c (rs6000_stack_info): Use if == 0 for sizes.\n        (output_epilog): Use if != 0 for offset.\n        (rs6000_fatal_bad_address): Prepare for Intl.\n        * rs6000.h (rs6000_fatal_bad_address): Declare.\n        * rs6000.md (movsfcc, movdfcc): Use else if.\n        (elf_high): Use {liu|lis}.\n        (elf_low): Use {cal|la}.  Remove %a template from old mnemonics.\n        (movsi): Use rs6000_fatal_bad_address.\n\nFrom-SVN: r21766", "tree": {"sha": "ef776e17fc56b8c9fda887c1b1fc3757c26fd923", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef776e17fc56b8c9fda887c1b1fc3757c26fd923"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6c2a102ae9d2c9686c19777d8ede68f1b5a42c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6c2a102ae9d2c9686c19777d8ede68f1b5a42c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6c2a102ae9d2c9686c19777d8ede68f1b5a42c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6c2a102ae9d2c9686c19777d8ede68f1b5a42c6/comments", "author": null, "committer": null, "parents": [{"sha": "8ec82f87f37e49d9b5c95f680428613d3a709b39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ec82f87f37e49d9b5c95f680428613d3a709b39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ec82f87f37e49d9b5c95f680428613d3a709b39"}], "stats": {"total": 50, "additions": 35, "deletions": 15}, "files": [{"sha": "8f7fbfeb1e6950eef52a52f8cfd7b69e6953437b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6c2a102ae9d2c9686c19777d8ede68f1b5a42c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6c2a102ae9d2c9686c19777d8ede68f1b5a42c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6c2a102ae9d2c9686c19777d8ede68f1b5a42c6", "patch": "@@ -1,3 +1,14 @@\n+Sun Aug 16 13:52:00 1998  David Edelsohn  <edelsohn@mhpcc.edu>\n+\n+\t* rs6000.c (rs6000_stack_info): Use if == 0 for sizes.\n+\t(output_epilog): Use if != 0 for offset.\n+\t(rs6000_fatal_bad_address): Prepare for Intl.\n+\t* rs6000.h (rs6000_fatal_bad_address): Declare.\n+\t* rs6000.md (movsfcc, movdfcc): Use else if.\n+\t(elf_high): Use {liu|lis}.\n+\t(elf_low): Use {cal|la}.  Remove %a template from old mnemonics.\n+\t(movsi): Use rs6000_fatal_bad_address.\n+\t\n Sun Aug 16 01:53:21 1998  Richard Henderson  <rth@cygnus.com>\n \n \t* reload.c (find_equiv_reg): Reject equivalences separated"}, {"sha": "cb40c184365113257010294ec4dc18bb0320ed2c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6c2a102ae9d2c9686c19777d8ede68f1b5a42c6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6c2a102ae9d2c9686c19777d8ede68f1b5a42c6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a6c2a102ae9d2c9686c19777d8ede68f1b5a42c6", "patch": "@@ -3520,10 +3520,10 @@ rs6000_stack_info ()\n     info_ptr->fpmem_offset = 0;  \n \n   /* Zero offsets if we're not saving those registers */\n-  if (!info_ptr->fp_size)\n+  if (info_ptr->fp_size == 0)\n     info_ptr->fp_save_offset = 0;\n \n-  if (!info_ptr->gp_size)\n+  if (info_ptr->gp_size == 0)\n     info_ptr->gp_save_offset = 0;\n \n   if (!info_ptr->lr_save_p)\n@@ -4148,8 +4148,9 @@ output_epilog (file, size)\n \t\t     + (regs_ever_live[71] != 0) * 0x10\n \t\t     + (regs_ever_live[72] != 0) * 0x8, reg_names[12]);\n \n-      /* If this is V.4, unwind the stack pointer after all of the loads have been done */\n-      if (sp_offset)\n+      /* If this is V.4, unwind the stack pointer after all of the loads\n+\t have been done */\n+      if (sp_offset != 0)\n \tasm_fprintf (file, \"\\t{cal|la} %s,%d(%s)\\n\",\n \t\t     reg_names[1], sp_offset, reg_names[1]);\n       else if (sp_reg != 1)\n@@ -5285,3 +5286,10 @@ rs6000_encode_section_info (decl)\n }\n \n #endif /* USING_SVR4_H */\n+\f\n+void\n+rs6000_fatal_bad_address (op)\n+  rtx op;\n+{\n+  fatal_insn (\"bad address\", op);\n+}"}, {"sha": "ae38d9972658856de18b1d5ae7279da61ac7b24e", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6c2a102ae9d2c9686c19777d8ede68f1b5a42c6/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6c2a102ae9d2c9686c19777d8ede68f1b5a42c6/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=a6c2a102ae9d2c9686c19777d8ede68f1b5a42c6", "patch": "@@ -3260,6 +3260,7 @@ extern struct rtx_def *rs6000_longcall_ref ();\n extern int function_arg_padding ();\n extern void toc_section ();\n extern void private_data_section ();\n+extern void rs6000_fatal_bad_address ();\n \n /* See nonlocal_goto_receiver for when this must be set.  */\n "}, {"sha": "eb46a0fe16924a984d846857f534d2f3b4f5281e", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6c2a102ae9d2c9686c19777d8ede68f1b5a42c6/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6c2a102ae9d2c9686c19777d8ede68f1b5a42c6/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=a6c2a102ae9d2c9686c19777d8ede68f1b5a42c6", "patch": "@@ -3312,7 +3312,7 @@\n \t  emit_insn (gen_negdf2 (temp, temp));\n \t  emit_insn (gen_fseldfsf4 (operands[0], temp, operands[0], operands[3]));\n \t}\n-      if (code == NE)\n+      else if (code == NE)\n \t{\n \t  emit_insn (gen_negdf2 (temp, temp));\n \t  emit_insn (gen_fseldfsf4 (operands[0], temp, operands[3], operands[0]));\n@@ -3328,7 +3328,7 @@\n \t  emit_insn (gen_negsf2 (temp, temp));\n \t  emit_insn (gen_fselsfsf4 (operands[0], temp, operands[0], operands[3]));\n \t}\n-      if (code == NE)\n+      else if (code == NE)\n \t{\n \t  emit_insn (gen_negsf2 (temp, temp));\n \t  emit_insn (gen_fselsfsf4 (operands[0], temp, operands[3], operands[0]));\n@@ -3559,7 +3559,7 @@\n \t  emit_insn (gen_negdf2 (temp, temp));\n \t  emit_insn (gen_fseldfdf4 (operands[0], temp, operands[0], operands[3]));\n \t}\n-      if (code == NE)\n+      else if (code == NE)\n \t{\n \t  emit_insn (gen_negdf2 (temp, temp));\n \t  emit_insn (gen_fseldfdf4 (operands[0], temp, operands[3], operands[0]));\n@@ -3575,7 +3575,7 @@\n \t  emit_insn (gen_negsf2 (temp, temp));\n \t  emit_insn (gen_fselsfdf4 (operands[0], temp, operands[0], operands[3]));\n \t}\n-      if (code == NE)\n+      else if (code == NE)\n \t{\n \t  emit_insn (gen_negsf2 (temp, temp));\n \t  emit_insn (gen_fselsfdf4 (operands[0], temp, operands[3], operands[0]));\n@@ -5302,14 +5302,14 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=b\")\n \t(high:SI (match_operand 1 \"\" \"\")))]\n   \"TARGET_ELF && !TARGET_64BIT\"\n-  \"{cau|addis} %0,0,%1@ha\")\n+  \"{liu|lis} %0,%1@ha\")\n \n (define_insn \"elf_low\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(lo_sum:SI (match_operand:SI 1 \"register_operand\" \"b\")\n \t\t   (match_operand 2 \"\" \"\")))]\n    \"TARGET_ELF && !TARGET_64BIT\"\n-   \"{cal %0,%a2@l(%1)|addi %0,%1,%2@l}\")\n+   \"{cal|la} %0,%2@l(%1)\")\n \n ;; Set up a register with a value from the GOT table\n \n@@ -5464,7 +5464,7 @@\n \t  DONE;\n \t}\n       else\n-\tfatal_insn (\\\"bad address\\\", operands[1]);\n+\trs6000_fatal_bad_address (operands[1]);\n     }\n \n   if ((!TARGET_WINDOWS_NT || DEFAULT_ABI != ABI_NT)\n@@ -5954,7 +5954,7 @@\n   switch (which_alternative)\n     {\n     default:\n-      abort();\n+      abort ();\n     case 0:\n       /* We normally copy the low-numbered register first.  However, if\n \t the first register operand 0 is the same as the second register of\n@@ -6001,7 +6001,7 @@\n   switch (which_alternative)\n     {\n     default:\n-      abort();\n+      abort ();\n     case 0:\n       /* We normally copy the low-numbered register first.  However, if\n \t the first register operand 0 is the same as the second register of\n@@ -6145,7 +6145,7 @@\n   switch (which_alternative)\n     {\n     default:\n-      abort();\n+      abort ();\n     case 0:\n       /* We normally copy the low-numbered register first.  However, if\n \t the first register operand 0 is the same as the second register of\n@@ -6514,7 +6514,7 @@\n   switch (which_alternative)\n     {\n     default:\n-      abort();\n+      abort ();\n     case 0:\n       /* We normally copy the low-numbered register first.  However, if\n \t the first register operand 0 is the same as the second register of"}]}