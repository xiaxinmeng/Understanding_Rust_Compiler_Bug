{"sha": "401581b6eb93369a5e60c05e9f13d072ba23cff4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAxNTgxYjZlYjkzMzY5YTVlNjBjMDVlOWYxM2QwNzJiYTIzY2ZmNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-30T11:17:12Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-30T11:17:12Z"}, "message": "[49/77] Simplify nonzero/num_sign_bits hooks\n\nThe two implementations of the reg_nonzero_bits and reg_num_sign_bits\nhooks ignored the \"known_x\", \"known_mode\" and \"known_ret\" arguments,\nso this patch removes them.  It adds a new scalar_int_mode parameter\nthat specifies the mode of \"x\".  (This mode might be different from\n\"mode\", which is the mode in which \"x\" is used.)\n\n2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* rtl.h (rtl_hooks::reg_nonzero_bits): Add a scalar_int_mode\n\tparameter for the mode of \"x\".  Remove the \"known_x\", \"known_mode\"\n\tand \"known_ret\" arguments.  Change the type of the mode argument\n\tto scalar_int_mode.\n\t(rtl_hooks:reg_num_sign_bit_copies): Likewise.\n\t* combine.c (reg_nonzero_bits_for_combine): Update accordingly.\n\t(reg_num_sign_bit_copies_for_combine): Likewise.\n\t* rtlanal.c (nonzero_bits1): Likewise.\n\t(num_sign_bit_copies1): Likewise.\n\t* rtlhooks-def.h (reg_nonzero_bits_general): Likewise.\n\t(reg_num_sign_bit_copies_general): Likewise.\n\t* rtlhooks.c (reg_num_sign_bit_copies_general): Likewise.\n\t(reg_nonzero_bits_general): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r251501", "tree": {"sha": "6f33c3a098eadeec40ab3a1d2b8e5a10578f856d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f33c3a098eadeec40ab3a1d2b8e5a10578f856d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/401581b6eb93369a5e60c05e9f13d072ba23cff4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/401581b6eb93369a5e60c05e9f13d072ba23cff4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/401581b6eb93369a5e60c05e9f13d072ba23cff4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/401581b6eb93369a5e60c05e9f13d072ba23cff4/comments", "author": null, "committer": null, "parents": [{"sha": "f8265fb8e8e12c92eab0393488824bfb788ebfff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8265fb8e8e12c92eab0393488824bfb788ebfff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8265fb8e8e12c92eab0393488824bfb788ebfff"}], "stats": {"total": 105, "additions": 52, "deletions": 53}, "files": [{"sha": "23648780ce4a9d554cbe8c519f2c93faed5971cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/401581b6eb93369a5e60c05e9f13d072ba23cff4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/401581b6eb93369a5e60c05e9f13d072ba23cff4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=401581b6eb93369a5e60c05e9f13d072ba23cff4", "patch": "@@ -1,3 +1,21 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* rtl.h (rtl_hooks::reg_nonzero_bits): Add a scalar_int_mode\n+\tparameter for the mode of \"x\".  Remove the \"known_x\", \"known_mode\"\n+\tand \"known_ret\" arguments.  Change the type of the mode argument\n+\tto scalar_int_mode.\n+\t(rtl_hooks:reg_num_sign_bit_copies): Likewise.\n+\t* combine.c (reg_nonzero_bits_for_combine): Update accordingly.\n+\t(reg_num_sign_bit_copies_for_combine): Likewise.\n+\t* rtlanal.c (nonzero_bits1): Likewise.\n+\t(num_sign_bit_copies1): Likewise.\n+\t* rtlhooks-def.h (reg_nonzero_bits_general): Likewise.\n+\t(reg_num_sign_bit_copies_general): Likewise.\n+\t* rtlhooks.c (reg_num_sign_bit_copies_general): Likewise.\n+\t(reg_nonzero_bits_general): Likewise.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "85a2f50bca6254938ad33741737d9e406acfd05a", "filename": "gcc/combine.c", "status": "modified", "additions": 18, "deletions": 25, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/401581b6eb93369a5e60c05e9f13d072ba23cff4/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/401581b6eb93369a5e60c05e9f13d072ba23cff4/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=401581b6eb93369a5e60c05e9f13d072ba23cff4", "patch": "@@ -414,13 +414,12 @@ static struct undobuf undobuf;\n \n static int n_occurrences;\n \n-static rtx reg_nonzero_bits_for_combine (const_rtx, machine_mode, const_rtx,\n-\t\t\t\t\t machine_mode,\n-\t\t\t\t\t unsigned HOST_WIDE_INT,\n+static rtx reg_nonzero_bits_for_combine (const_rtx, scalar_int_mode,\n+\t\t\t\t\t scalar_int_mode,\n \t\t\t\t\t unsigned HOST_WIDE_INT *);\n-static rtx reg_num_sign_bit_copies_for_combine (const_rtx, machine_mode, const_rtx,\n-\t\t\t\t\t\tmachine_mode,\n-\t\t\t\t\t\tunsigned int, unsigned int *);\n+static rtx reg_num_sign_bit_copies_for_combine (const_rtx, scalar_int_mode,\n+\t\t\t\t\t\tscalar_int_mode,\n+\t\t\t\t\t\tunsigned int *);\n static void do_SUBST (rtx *, rtx);\n static void do_SUBST_INT (int *, int);\n static void init_reg_last (void);\n@@ -10035,17 +10034,15 @@ simplify_and_const_int (rtx x, scalar_int_mode mode, rtx varop,\n   return x;\n }\n \f\n-/* Given a REG, X, compute which bits in X can be nonzero.\n+/* Given a REG X of mode XMODE, compute which bits in X can be nonzero.\n    We don't care about bits outside of those defined in MODE.\n \n    For most X this is simply GET_MODE_MASK (GET_MODE (MODE)), but if X is\n    a shift, AND, or zero_extract, we can do better.  */\n \n static rtx\n-reg_nonzero_bits_for_combine (const_rtx x, machine_mode mode,\n-\t\t\t      const_rtx known_x ATTRIBUTE_UNUSED,\n-\t\t\t      machine_mode known_mode ATTRIBUTE_UNUSED,\n-\t\t\t      unsigned HOST_WIDE_INT known_ret ATTRIBUTE_UNUSED,\n+reg_nonzero_bits_for_combine (const_rtx x, scalar_int_mode xmode,\n+\t\t\t      scalar_int_mode mode,\n \t\t\t      unsigned HOST_WIDE_INT *nonzero)\n {\n   rtx tem;\n@@ -10086,8 +10083,7 @@ reg_nonzero_bits_for_combine (const_rtx x, machine_mode mode,\n   if (tem)\n     {\n       if (SHORT_IMMEDIATES_SIGN_EXTEND)\n-\ttem = sign_extend_short_imm (tem, GET_MODE (x),\n-\t\t\t\t     GET_MODE_PRECISION (mode));\n+\ttem = sign_extend_short_imm (tem, xmode, GET_MODE_PRECISION (mode));\n \n       return tem;\n     }\n@@ -10096,27 +10092,24 @@ reg_nonzero_bits_for_combine (const_rtx x, machine_mode mode,\n     {\n       unsigned HOST_WIDE_INT mask = rsp->nonzero_bits;\n \n-      if (GET_MODE_PRECISION (GET_MODE (x)) < GET_MODE_PRECISION (mode))\n+      if (GET_MODE_PRECISION (xmode) < GET_MODE_PRECISION (mode))\n \t/* We don't know anything about the upper bits.  */\n-\tmask |= GET_MODE_MASK (mode) ^ GET_MODE_MASK (GET_MODE (x));\n+\tmask |= GET_MODE_MASK (mode) ^ GET_MODE_MASK (xmode);\n \n       *nonzero &= mask;\n     }\n \n   return NULL;\n }\n \n-/* Return the number of bits at the high-order end of X that are known to\n-   be equal to the sign bit.  X will be used in mode MODE; if MODE is\n-   VOIDmode, X will be used in its own mode.  The returned value  will always\n-   be between 1 and the number of bits in MODE.  */\n+/* Given a reg X of mode XMODE, return the number of bits at the high-order\n+   end of X that are known to be equal to the sign bit.  X will be used\n+   in mode MODE; the returned value will always be between 1 and the\n+   number of bits in MODE.  */\n \n static rtx\n-reg_num_sign_bit_copies_for_combine (const_rtx x, machine_mode mode,\n-\t\t\t\t     const_rtx known_x ATTRIBUTE_UNUSED,\n-\t\t\t\t     machine_mode known_mode\n-\t\t\t\t     ATTRIBUTE_UNUSED,\n-\t\t\t\t     unsigned int known_ret ATTRIBUTE_UNUSED,\n+reg_num_sign_bit_copies_for_combine (const_rtx x, scalar_int_mode xmode,\n+\t\t\t\t     scalar_int_mode mode,\n \t\t\t\t     unsigned int *result)\n {\n   rtx tem;\n@@ -10145,7 +10138,7 @@ reg_num_sign_bit_copies_for_combine (const_rtx x, machine_mode mode,\n     return tem;\n \n   if (nonzero_sign_valid && rsp->sign_bit_copies != 0\n-      && GET_MODE_PRECISION (GET_MODE (x)) == GET_MODE_PRECISION (mode))\n+      && GET_MODE_PRECISION (xmode) == GET_MODE_PRECISION (mode))\n     *result = rsp->sign_bit_copies;\n \n   return NULL;"}, {"sha": "9e16b9b179fca39a9db459b55475948e7fc9d09a", "filename": "gcc/rtl.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/401581b6eb93369a5e60c05e9f13d072ba23cff4/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/401581b6eb93369a5e60c05e9f13d072ba23cff4/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=401581b6eb93369a5e60c05e9f13d072ba23cff4", "patch": "@@ -3779,10 +3779,10 @@ struct rtl_hooks\n {\n   rtx (*gen_lowpart) (machine_mode, rtx);\n   rtx (*gen_lowpart_no_emit) (machine_mode, rtx);\n-  rtx (*reg_nonzero_bits) (const_rtx, machine_mode, const_rtx, machine_mode,\n-\t\t\t   unsigned HOST_WIDE_INT, unsigned HOST_WIDE_INT *);\n-  rtx (*reg_num_sign_bit_copies) (const_rtx, machine_mode, const_rtx, machine_mode,\n-\t\t\t\t  unsigned int, unsigned int *);\n+  rtx (*reg_nonzero_bits) (const_rtx, scalar_int_mode, scalar_int_mode,\n+\t\t\t   unsigned HOST_WIDE_INT *);\n+  rtx (*reg_num_sign_bit_copies) (const_rtx, scalar_int_mode, scalar_int_mode,\n+\t\t\t\t  unsigned int *);\n   bool (*reg_truncated_to_mode) (machine_mode, const_rtx);\n \n   /* Whenever you add entries here, make sure you adjust rtlhooks-def.h.  */"}, {"sha": "3066ae20c4d4da3a6e640eadfd3339446156d798", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/401581b6eb93369a5e60c05e9f13d072ba23cff4/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/401581b6eb93369a5e60c05e9f13d072ba23cff4/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=401581b6eb93369a5e60c05e9f13d072ba23cff4", "patch": "@@ -4449,9 +4449,8 @@ nonzero_bits1 (const_rtx x, scalar_int_mode mode, const_rtx known_x,\n \n       {\n \tunsigned HOST_WIDE_INT nonzero_for_hook = nonzero;\n-\trtx new_rtx = rtl_hooks.reg_nonzero_bits (x, mode, known_x,\n-\t\t\t\t\t      known_mode, known_ret,\n-\t\t\t\t\t      &nonzero_for_hook);\n+\trtx new_rtx = rtl_hooks.reg_nonzero_bits (x, xmode, mode,\n+\t\t\t\t\t\t  &nonzero_for_hook);\n \n \tif (new_rtx)\n \t  nonzero_for_hook &= cached_nonzero_bits (new_rtx, mode, known_x,\n@@ -4943,9 +4942,8 @@ num_sign_bit_copies1 (const_rtx x, scalar_int_mode mode, const_rtx known_x,\n \n       {\n \tunsigned int copies_for_hook = 1, copies = 1;\n-\trtx new_rtx = rtl_hooks.reg_num_sign_bit_copies (x, mode, known_x,\n-\t\t\t\t\t\t     known_mode, known_ret,\n-\t\t\t\t\t\t     &copies_for_hook);\n+\trtx new_rtx = rtl_hooks.reg_num_sign_bit_copies (x, xmode, mode,\n+\t\t\t\t\t\t\t &copies_for_hook);\n \n \tif (new_rtx)\n \t  copies = cached_num_sign_bit_copies (new_rtx, mode, known_x,"}, {"sha": "afc5c02f0e16becef4d4e2691f9cd114f36c2146", "filename": "gcc/rtlhooks-def.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/401581b6eb93369a5e60c05e9f13d072ba23cff4/gcc%2Frtlhooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/401581b6eb93369a5e60c05e9f13d072ba23cff4/gcc%2Frtlhooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlhooks-def.h?ref=401581b6eb93369a5e60c05e9f13d072ba23cff4", "patch": "@@ -38,13 +38,11 @@ along with GCC; see the file COPYING3.  If not see\n }\n \n extern rtx gen_lowpart_general (machine_mode, rtx);\n-extern rtx reg_nonzero_bits_general (const_rtx, machine_mode, const_rtx,\n-\t\t\t\t     machine_mode,\n-\t\t\t\t     unsigned HOST_WIDE_INT,\n+extern rtx reg_nonzero_bits_general (const_rtx, scalar_int_mode,\n+\t\t\t\t     scalar_int_mode,\n \t\t\t\t     unsigned HOST_WIDE_INT *);\n-extern rtx reg_num_sign_bit_copies_general (const_rtx, machine_mode, const_rtx,\n-\t\t\t\t\t    machine_mode,\n-\t\t\t\t\t    unsigned int, unsigned int *);\n+extern rtx reg_num_sign_bit_copies_general (const_rtx, scalar_int_mode,\n+\t\t\t\t\t    scalar_int_mode, unsigned int *);\n extern bool reg_truncated_to_mode_general (machine_mode, const_rtx);\n \n #endif /* GCC_RTL_HOOKS_DEF_H */"}, {"sha": "b008b15e78ec4a13d6d8979b4743538c80e482e3", "filename": "gcc/rtlhooks.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/401581b6eb93369a5e60c05e9f13d072ba23cff4/gcc%2Frtlhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/401581b6eb93369a5e60c05e9f13d072ba23cff4/gcc%2Frtlhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlhooks.c?ref=401581b6eb93369a5e60c05e9f13d072ba23cff4", "patch": "@@ -86,23 +86,15 @@ gen_lowpart_general (machine_mode mode, rtx x)\n }\n \n rtx\n-reg_num_sign_bit_copies_general (const_rtx x ATTRIBUTE_UNUSED,\n-\t\t\t\t machine_mode mode ATTRIBUTE_UNUSED,\n-                                 const_rtx known_x ATTRIBUTE_UNUSED,\n-\t\t\t\t machine_mode known_mode ATTRIBUTE_UNUSED,\n-                                 unsigned int known_ret ATTRIBUTE_UNUSED,\n-                                 unsigned int *result ATTRIBUTE_UNUSED)\n+reg_num_sign_bit_copies_general (const_rtx, scalar_int_mode, scalar_int_mode,\n+\t\t\t\t unsigned int *)\n {\n   return NULL;\n }\n \n rtx\n-reg_nonzero_bits_general (const_rtx x ATTRIBUTE_UNUSED,\n-\t\t\t  machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\t  const_rtx known_x ATTRIBUTE_UNUSED,\n-                          machine_mode known_mode ATTRIBUTE_UNUSED,\n-                          unsigned HOST_WIDE_INT known_ret ATTRIBUTE_UNUSED,\n-                          unsigned HOST_WIDE_INT *nonzero ATTRIBUTE_UNUSED)\n+reg_nonzero_bits_general (const_rtx, scalar_int_mode, scalar_int_mode,\n+\t\t\t  unsigned HOST_WIDE_INT *)\n {\n   return NULL;\n }"}]}