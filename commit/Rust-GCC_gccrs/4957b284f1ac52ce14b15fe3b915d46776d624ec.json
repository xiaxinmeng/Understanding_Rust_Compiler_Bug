{"sha": "4957b284f1ac52ce14b15fe3b915d46776d624ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk1N2IyODRmMWFjNTJjZTE0YjE1ZmUzYjkxNWQ0Njc3NmQ2MjRlYw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-07-26T14:02:05Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-07-26T14:02:05Z"}, "message": "Modify some library internals to work without <stdint.h>\n\nstd::__detail::__clp2 used uint_fast32_t and uint_fast64_t without\nchecking _GLIBCXX_USE_C99_STDINT_TR1 which was a potential bug. A\nsimpler implementation based on the new std::__ceil2 code performs\nbetter and doesn't depend on <stdint.h> types.\n\nstd::align and other C++11 functions in <memory> where unnecessarily\nmissing when _GLIBCXX_USE_C99_STDINT_TR1 was not defined.\n\n\t* include/bits/hashtable_policy.h (__detail::__clp2): Use faster\n\timplementation that doesn't depend on <stdint.h> types.\n\t* include/std/memory (align) [!_GLIBCXX_USE_C99_STDINT_TR1]: Use\n\tstd::size_t when std::uintptr_t is not usable.\n\t[!_GLIBCXX_USE_C99_STDINT_TR1] (pointer_safety, declare_reachable)\n\t(undeclare_reachable, declare_no_pointers, undeclare_no_pointers):\n\tDefine independent of _GLIBCXX_USE_C99_STDINT_TR1.\n\nFrom-SVN: r263003", "tree": {"sha": "c660dc5850b246f90c589c6f332a70c8e3c86214", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c660dc5850b246f90c589c6f332a70c8e3c86214"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4957b284f1ac52ce14b15fe3b915d46776d624ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4957b284f1ac52ce14b15fe3b915d46776d624ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4957b284f1ac52ce14b15fe3b915d46776d624ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4957b284f1ac52ce14b15fe3b915d46776d624ec/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "612c9c702e2c9ebf0058d659d57371605c2e0020", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/612c9c702e2c9ebf0058d659d57371605c2e0020", "html_url": "https://github.com/Rust-GCC/gccrs/commit/612c9c702e2c9ebf0058d659d57371605c2e0020"}], "stats": {"total": 45, "additions": 23, "deletions": 22}, "files": [{"sha": "66ee23d1fc78352f1a942d1935cac0c4ab9b57b3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4957b284f1ac52ce14b15fe3b915d46776d624ec/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4957b284f1ac52ce14b15fe3b915d46776d624ec/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4957b284f1ac52ce14b15fe3b915d46776d624ec", "patch": "@@ -1,5 +1,13 @@\n 2018-07-26  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/hashtable_policy.h (__detail::__clp2): Use faster\n+\timplementation that doesn't depend on <stdint.h> types.\n+\t* include/std/memory (align) [!_GLIBCXX_USE_C99_STDINT_TR1]: Use\n+\tstd::size_t when std::uintptr_t is not usable.\n+\t[!_GLIBCXX_USE_C99_STDINT_TR1] (pointer_safety, declare_reachable)\n+\t(undeclare_reachable, declare_no_pointers, undeclare_no_pointers):\n+\tDefine independent of _GLIBCXX_USE_C99_STDINT_TR1.\n+\n \t* include/bits/basic_string.h [!_GLIBCXX_USE_C99_STDINT_TR1]\n \t(hash<u16string>, hash<u32string>): Remove dependency on\n \t_GLIBCXX_USE_C99_STDINT_TR1."}, {"sha": "d7497711071bc02278dcb4fcbfbe79f7968bfb38", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4957b284f1ac52ce14b15fe3b915d46776d624ec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4957b284f1ac52ce14b15fe3b915d46776d624ec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=4957b284f1ac52ce14b15fe3b915d46776d624ec", "patch": "@@ -32,7 +32,7 @@\n #define _HASHTABLE_POLICY_H 1\n \n #include <tuple>\t\t// for std::tuple, std::forward_as_tuple\n-#include <cstdint>\t\t// for std::uint_fast64_t\n+#include <limits>\t\t// for std::numeric_limits\n #include <bits/stl_algobase.h>\t// for std::min.\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -504,27 +504,15 @@ namespace __detail\n     { return __num & (__den - 1); }\n   };\n \n-  /// Compute closest power of 2.\n-  _GLIBCXX14_CONSTEXPR\n+  /// Compute closest power of 2 not less than __n\n   inline std::size_t\n   __clp2(std::size_t __n) noexcept\n   {\n-#if __SIZEOF_SIZE_T__ >= 8\n-    std::uint_fast64_t __x = __n;\n-#else\n-    std::uint_fast32_t __x = __n;\n-#endif\n-    // Algorithm from Hacker's Delight, Figure 3-3.\n-    __x = __x - 1;\n-    __x = __x | (__x >> 1);\n-    __x = __x | (__x >> 2);\n-    __x = __x | (__x >> 4);\n-    __x = __x | (__x >> 8);\n-    __x = __x | (__x >>16);\n-#if __SIZEOF_SIZE_T__ >= 8\n-    __x = __x | (__x >>32);\n-#endif\n-    return __x + 1;\n+    // Equivalent to return __n ? std::ceil2(__n) : 0;\n+    if (__n < 2)\n+      return __n;\n+    return 1ul << (numeric_limits<unsigned long>::digits\n+\t\t    - __builtin_clzl(__n - 1ul));\n   }\n \n   /// Rehash policy providing power of 2 bucket numbers. Avoids modulo"}, {"sha": "9689540fb817cc6b9c35cb3c1180522cf97d50d9", "filename": "libstdc++-v3/include/std/memory", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4957b284f1ac52ce14b15fe3b915d46776d624ec/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4957b284f1ac52ce14b15fe3b915d46776d624ec/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory?ref=4957b284f1ac52ce14b15fe3b915d46776d624ec", "patch": "@@ -88,8 +88,7 @@\n #endif\n \n #if __cplusplus >= 201103L\n-#  include <cstdint>\n-#  ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+#include <cstdint>\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -113,7 +112,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n inline void*\n align(size_t __align, size_t __size, void*& __ptr, size_t& __space) noexcept\n {\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n   const auto __intptr = reinterpret_cast<uintptr_t>(__ptr);\n+#else\n+  // Cannot use std::uintptr_t so assume that std::size_t can be used instead.\n+  static_assert(sizeof(size_t) >= sizeof(void*),\n+      \"std::size_t must be a suitable substitute for std::uintptr_t\");\n+  const auto __intptr = reinterpret_cast<unsigned long long>(__ptr);\n+#endif\n   const auto __aligned = (__intptr - 1u + __align) & -__align;\n   const auto __diff = __aligned - __intptr;\n   if ((__size + __diff) > __space)\n@@ -147,7 +153,6 @@ get_pointer_safety() noexcept { return pointer_safety::relaxed; }\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n-#endif // _GLIBCXX_USE_C99_STDINT_TR1\n #endif // C++11\n \n #endif /* _GLIBCXX_MEMORY */"}]}