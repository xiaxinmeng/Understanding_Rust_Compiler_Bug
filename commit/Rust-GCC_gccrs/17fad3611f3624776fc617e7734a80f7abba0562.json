{"sha": "17fad3611f3624776fc617e7734a80f7abba0562", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdmYWQzNjExZjM2MjQ3NzZmYzYxN2U3NzM0YTgwZjdhYmJhMDU2Mg==", "commit": {"author": {"name": "Andy Hutchinson", "email": "hutchinsonandy@gcc.gnu.org", "date": "2009-12-24T20:32:38Z"}, "committer": {"name": "Andy Hutchinson", "email": "hutchinsonandy@gcc.gnu.org", "date": "2009-12-24T20:32:38Z"}, "message": "re PR target/42457 (AVR fails to build with other than C family languages)\n\n2009-12-24  Andy Hutchinson  <hutchinsonandy@gcc.gnu.org>\n\n\tPR target/42457\n\t* config/avr/avr.c (avr_extra_arch_macro): Remove static.\n\t(avr_cpu_cpp_builtins): Remove.\n\t* config/avr/avr.h (avr_extra_arch_macro): Add prototype.\n\t* config/avr/avr-c.c: New File.\n\t(avr_cpu_cpp_builtins) : Add.\n\t* config/avr/t-avr: Add make information for avr-c.\n\t* config.gcc (avr-*-*): Include avr-c.o as c and cpp object.\n\nFrom-SVN: r155460", "tree": {"sha": "f3766a748d40c25efaa5e5b03771c0e217cd6996", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3766a748d40c25efaa5e5b03771c0e217cd6996"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17fad3611f3624776fc617e7734a80f7abba0562", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17fad3611f3624776fc617e7734a80f7abba0562", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17fad3611f3624776fc617e7734a80f7abba0562", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17fad3611f3624776fc617e7734a80f7abba0562/comments", "author": null, "committer": null, "parents": [{"sha": "846428f11f50136baccab7c761e8f3e9793a4bda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/846428f11f50136baccab7c761e8f3e9793a4bda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/846428f11f50136baccab7c761e8f3e9793a4bda"}], "stats": {"total": 165, "additions": 111, "deletions": 54}, "files": [{"sha": "e0a5ae34d388fe6a9f12fc2d6df2225b8c94b849", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17fad3611f3624776fc617e7734a80f7abba0562/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17fad3611f3624776fc617e7734a80f7abba0562/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17fad3611f3624776fc617e7734a80f7abba0562", "patch": "@@ -1,3 +1,14 @@\n+2009-12-24  Andy Hutchinson  <hutchinsonandy@gcc.gnu.org>\n+\n+\tPR target/42457\n+\t* config/avr/avr.c (avr_extra_arch_macro): Remove static.\n+\t(avr_cpu_cpp_builtins): Remove.\n+\t* config/avr/avr.h (avr_extra_arch_macro): Add prototype.\n+\t* config/avr/avr-c.c: New File.\n+\t(avr_cpu_cpp_builtins) : Add.\n+\t* config/avr/t-avr: Add make information for avr-c.\n+\t* config.gcc (avr-*-*): Include avr-c.o as c and cpp object. \n+\n 2009-12-24  Andy Hutchinson  <hutchinsonandy@gcc.gnu.org>\n \n \tPR target/35013, 27192"}, {"sha": "59fa4d78d9c3e7731043e76132e226f8a47b239a", "filename": "gcc/config.gcc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17fad3611f3624776fc617e7734a80f7abba0562/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17fad3611f3624776fc617e7734a80f7abba0562/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=17fad3611f3624776fc617e7734a80f7abba0562", "patch": "@@ -266,6 +266,11 @@ arm*-*-*)\n \tc_target_objs=\"arm-c.o\"\n \tcxx_target_objs=\"arm-c.o\"\n \t;;\n+avr-*-*)\n+\tcpu_type=avr\n+\tc_target_objs=\"avr-c.o\"\n+\tcxx_target_objs=\"avr-c.o\"\n+\t;;\n bfin*-*)\n \tcpu_type=bfin\n \t;;"}, {"sha": "05c94962f950e31008dfd24b0dbe5c7d26a30b8a", "filename": "gcc/config/avr/avr-c.c", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17fad3611f3624776fc617e7734a80f7abba0562/gcc%2Fconfig%2Favr%2Favr-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17fad3611f3624776fc617e7734a80f7abba0562/gcc%2Fconfig%2Favr%2Favr-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-c.c?ref=17fad3611f3624776fc617e7734a80f7abba0562", "patch": "@@ -0,0 +1,85 @@\n+/* Copyright (C) 2009\r\n+   Free Software Foundation, Inc.\r\n+   Contributed by Anatoly Sokolov (aesok@post.ru)\r\n+\r\n+   This file is part of GCC.\r\n+\r\n+   GCC is free software; you can redistribute it and/or modify\r\n+   it under the terms of the GNU General Public License as published by\r\n+   the Free Software Foundation; either version 3, or (at your option)\r\n+   any later version.\r\n+   \r\n+   GCC is distributed in the hope that it will be useful,\r\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n+   GNU General Public License for more details.\r\n+   \r\n+   You should have received a copy of the GNU General Public License\r\n+   along with GCC; see the file COPYING3.  If not see\r\n+   <http://www.gnu.org/licenses/>.  */\r\n+\r\n+\r\n+#include \"config.h\"\r\n+#include \"system.h\"\r\n+#include \"coretypes.h\"\r\n+#include \"tm.h\"\r\n+#include \"tm_p.h\"\r\n+#include \"regs.h\"\r\n+#include \"c-common.h\"\r\n+\r\n+\r\n+/* Not included in avr.c since this requires C front end.  */\r\n+\r\n+/* Worker function for TARGET_CPU_CPP_BUILTINS.  */\r\n+\r\n+void\r\n+avr_cpu_cpp_builtins (struct cpp_reader *pfile)\r\n+{\r\n+  builtin_define_std (\"AVR\");\r\n+\r\n+  if (avr_current_arch->macro)\r\n+    cpp_define (pfile, avr_current_arch->macro);\r\n+  if (avr_extra_arch_macro)\r\n+    cpp_define (pfile, avr_extra_arch_macro);\r\n+  if (avr_current_arch->have_elpm)\r\n+    cpp_define (pfile, \"__AVR_HAVE_RAMPZ__\");\r\n+  if (avr_current_arch->have_elpm)\r\n+    cpp_define (pfile, \"__AVR_HAVE_ELPM__\");\r\n+  if (avr_current_arch->have_elpmx)\r\n+    cpp_define (pfile, \"__AVR_HAVE_ELPMX__\");\r\n+  if (avr_current_arch->have_movw_lpmx)\r\n+    {\r\n+      cpp_define (pfile, \"__AVR_HAVE_MOVW__\");\r\n+      cpp_define (pfile, \"__AVR_HAVE_LPMX__\");\r\n+    }\r\n+  if (avr_current_arch->asm_only)\r\n+    cpp_define (pfile, \"__AVR_ASM_ONLY__\");\r\n+  if (avr_current_arch->have_mul)\r\n+    {\r\n+      cpp_define (pfile, \"__AVR_ENHANCED__\");\r\n+      cpp_define (pfile, \"__AVR_HAVE_MUL__\");\r\n+    }\r\n+  if (avr_current_arch->have_jmp_call)\r\n+    {\r\n+      cpp_define (pfile, \"__AVR_MEGA__\");\r\n+      cpp_define (pfile, \"__AVR_HAVE_JMP_CALL__\");\r\n+    }\r\n+  if (avr_current_arch->have_eijmp_eicall)\r\n+    {\r\n+      cpp_define (pfile, \"__AVR_HAVE_EIJMP_EICALL__\");\r\n+      cpp_define (pfile, \"__AVR_3_BYTE_PC__\");\r\n+    }\r\n+  else\r\n+    {\r\n+      cpp_define (pfile, \"__AVR_2_BYTE_PC__\");\r\n+    }\r\n+\r\n+  if (avr_current_device->short_sp)\r\n+    cpp_define (pfile, \"__AVR_HAVE_8BIT_SP__\");\r\n+  else\r\n+    cpp_define (pfile, \"__AVR_HAVE_16BIT_SP__\");\r\n+\r\n+  if (TARGET_NO_INTERRUPTS)\r\n+    cpp_define (pfile, \"__NO_INTERRUPTS__\");\r\n+}\r\n+\r"}, {"sha": "83ee0efe0ccad0a4bbf1ff1c5b3a3c10f8d7261f", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 1, "deletions": 54, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17fad3611f3624776fc617e7734a80f7abba0562/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17fad3611f3624776fc617e7734a80f7abba0562/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=17fad3611f3624776fc617e7734a80f7abba0562", "patch": "@@ -105,7 +105,7 @@ static GTY(()) rtx zero_reg_rtx;\n static const char *const avr_regnames[] = REGISTER_NAMES;\n \n /* Preprocessor macros to define depending on MCU type.  */\n-static const char *avr_extra_arch_macro;\n+const char *avr_extra_arch_macro;\n \n /* Current architecture.  */\n const struct base_arch_s *avr_current_arch;\n@@ -223,59 +223,6 @@ avr_override_options (void)\n   init_machine_status = avr_init_machine_status;\n }\n \n-/* Worker function for TARGET_CPU_CPP_BUILTINS.  */\n-\n-void\n-avr_cpu_cpp_builtins (struct cpp_reader *pfile)\n-{\n-  builtin_define_std (\"AVR\");\n-\n-  if (avr_current_arch->macro)\n-    cpp_define (pfile, avr_current_arch->macro);\n-  if (avr_extra_arch_macro)\n-    cpp_define (pfile, avr_extra_arch_macro);\n-  if (avr_current_arch->have_elpm)\n-    cpp_define (pfile, \"__AVR_HAVE_RAMPZ__\");\n-  if (avr_current_arch->have_elpm)\n-    cpp_define (pfile, \"__AVR_HAVE_ELPM__\");\n-  if (avr_current_arch->have_elpmx)\n-    cpp_define (pfile, \"__AVR_HAVE_ELPMX__\");\n-  if (avr_current_arch->have_movw_lpmx)\n-    {\n-      cpp_define (pfile, \"__AVR_HAVE_MOVW__\");\n-      cpp_define (pfile, \"__AVR_HAVE_LPMX__\");\n-    }\n-  if (avr_current_arch->asm_only)\n-    cpp_define (pfile, \"__AVR_ASM_ONLY__\");\n-  if (avr_current_arch->have_mul)\n-    {\n-      cpp_define (pfile, \"__AVR_ENHANCED__\");\n-      cpp_define (pfile, \"__AVR_HAVE_MUL__\");\n-    }\n-  if (avr_current_arch->have_jmp_call)\n-    {\n-      cpp_define (pfile, \"__AVR_MEGA__\");\n-      cpp_define (pfile, \"__AVR_HAVE_JMP_CALL__\");\n-    }\n-  if (avr_current_arch->have_eijmp_eicall)\n-    {\n-      cpp_define (pfile, \"__AVR_HAVE_EIJMP_EICALL__\");\n-      cpp_define (pfile, \"__AVR_3_BYTE_PC__\");\n-    }\n-  else\n-    {\n-      cpp_define (pfile, \"__AVR_2_BYTE_PC__\");\n-    }\n-\n-  if (avr_current_device->short_sp)\n-    cpp_define (pfile, \"__AVR_HAVE_8BIT_SP__\");\n-  else\n-    cpp_define (pfile, \"__AVR_HAVE_16BIT_SP__\");\n-\n-  if (TARGET_NO_INTERRUPTS)\n-    cpp_define (pfile, \"__NO_INTERRUPTS__\");\n-}\n-\n /*  return register class from register number.  */\n \n static const enum reg_class reg_class_tab[]={"}, {"sha": "265c16155f3cb936c16f357c43c8f17981366dc1", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17fad3611f3624776fc617e7734a80f7abba0562/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17fad3611f3624776fc617e7734a80f7abba0562/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=17fad3611f3624776fc617e7734a80f7abba0562", "patch": "@@ -97,6 +97,8 @@ struct mcu_type_s {\n   const char *const library_name; \n };\n \n+/* Preprocessor macros to define depending on MCU type.  */\n+extern const char *avr_extra_arch_macro;\n extern const struct base_arch_s *avr_current_arch;\n extern const struct mcu_type_s *avr_current_device;\n extern const struct mcu_type_s avr_mcu_types[];"}, {"sha": "91d1fe86fbc8d05024bba291864113b2e0a06411", "filename": "gcc/config/avr/t-avr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17fad3611f3624776fc617e7734a80f7abba0562/gcc%2Fconfig%2Favr%2Ft-avr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17fad3611f3624776fc617e7734a80f7abba0562/gcc%2Fconfig%2Favr%2Ft-avr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Ft-avr?ref=17fad3611f3624776fc617e7734a80f7abba0562", "patch": "@@ -24,6 +24,13 @@ driver-avr.o: $(srcdir)/config/avr/driver-avr.c \\\n avr-devices.o: $(srcdir)/config/avr/avr-devices.c \\\n   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n+\t\n+\n+avr-c.o: $(srcdir)/config/avr/avr-c.c \\\n+  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n+\t\n+\n \n LIB1ASMSRC = avr/libgcc.S\n LIB1ASMFUNCS = \\"}]}