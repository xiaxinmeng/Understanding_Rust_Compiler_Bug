{"sha": "dc086e21e4bba1d558f0c9b0abb7800c762f8401", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGMwODZlMjFlNGJiYTFkNTU4ZjBjOWIwYWJiNzgwMGM3NjJmODQwMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-02-19T02:06:13Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-02-19T02:06:13Z"}, "message": "(const_umulsi3_highpart): Disable for TARGET_M68060.\n\n(ftruncdf2, ftruncsf2, muldf3, mulsidi3): Likewise.\n(smulsi3_highpart, umulsi3_highpart, umulsidi3): Likewise.\n\nFrom-SVN: r11296", "tree": {"sha": "054f621734815ba6e4896ce974222607320d82aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/054f621734815ba6e4896ce974222607320d82aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc086e21e4bba1d558f0c9b0abb7800c762f8401", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc086e21e4bba1d558f0c9b0abb7800c762f8401", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc086e21e4bba1d558f0c9b0abb7800c762f8401", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc086e21e4bba1d558f0c9b0abb7800c762f8401/comments", "author": null, "committer": null, "parents": [{"sha": "30e6bc63382eaec95dbb4b50050f514c3ac99467", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30e6bc63382eaec95dbb4b50050f514c3ac99467", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30e6bc63382eaec95dbb4b50050f514c3ac99467"}], "stats": {"total": 40, "additions": 25, "deletions": 15}, "files": [{"sha": "bfe5e5808975aa2afc80470d9c665c107f11eaec", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc086e21e4bba1d558f0c9b0abb7800c762f8401/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc086e21e4bba1d558f0c9b0abb7800c762f8401/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=dc086e21e4bba1d558f0c9b0abb7800c762f8401", "patch": "@@ -92,6 +92,16 @@\n ;;- into play by defining \"%$\" and \"%&\" to expand to \"s\" and \"d\" rather\n ;;- than \"\".\n \n+;;- Information about 68060 port.\n+\n+;;- The 68060 executes all 68030 and 68881/2 instructions, but some must\n+;;- be emulated in software by the OS.  It is faster to avoid these \n+;;- instructions and issue a library call rather than trapping into \n+;;- the kernel.  The affected instructions are: divs.l <ea>,Dr:Dq;\n+;;- divu.l <ea>,Dr:Dq; muls.l <ea>,Dr:Dq; mulu.l <ea>,Dr:Dq, fintrz;\n+;;- and fscale.  The TARGET_68060 flag turns the use of the opcodes \n+;;- off.\n+\n \n ;;- \t\tFPA port explanation:\n \n@@ -1919,7 +1929,7 @@\n (define_insn \"ftruncdf2\"\n   [(set (match_operand:DF 0 \"general_operand\" \"=f\")\n \t(fix:DF (match_operand:DF 1 \"general_operand\" \"fFm\")))]\n-  \"TARGET_68881 && !TARGET_68040\"\n+  \"TARGET_68881 && !TARGET_68040 && !TARGET_68060\"\n   \"*\n {\n   if (FP_REG_P (operands[1]))\n@@ -1930,7 +1940,7 @@\n (define_insn \"ftruncsf2\"\n   [(set (match_operand:SF 0 \"general_operand\" \"=f\")\n \t(fix:SF (match_operand:SF 1 \"general_operand\" \"dfFm\")))]\n-  \"TARGET_68881 && !TARGET_68040\"\n+  \"TARGET_68881 && !TARGET_68040 && !TARGET_68060\"\n   \"*\n {\n   if (FP_REG_P (operands[1]))\n@@ -2975,7 +2985,7 @@\n \t  (truncate:SI (lshiftrt:DI (mult:DI (zero_extend:DI (match_dup 1))\n \t\t\t\t\t     (zero_extend:DI (match_dup 2)))\n \t\t\t\t    (const_int 32))))])]\n-  \"TARGET_68020\"\n+  \"TARGET_68020 && !TARGET_68060\"\n   \"\")\n \n (define_insn \"\"\n@@ -2986,7 +2996,7 @@\n \t(truncate:SI (lshiftrt:DI (mult:DI (zero_extend:DI (match_dup 1))\n \t\t\t\t\t   (zero_extend:DI (match_dup 2)))\n \t\t\t\t  (const_int 32))))]\n-  \"TARGET_68020\"\n+  \"TARGET_68020 && !TARGET_68060\"\n   \"mulu%.l %2,%3:%0\")\n \n ; Match immediate case.  For 2.4 only match things < 2^31.\n@@ -3001,7 +3011,7 @@\n \t(truncate:SI (lshiftrt:DI (mult:DI (zero_extend:DI (match_dup 1))\n \t\t\t\t\t   (match_dup 2))\n \t\t\t\t  (const_int 32))))]\n-  \"TARGET_68020\n+  \"TARGET_68020 && !TARGET_68060\n    && (unsigned) INTVAL (operands[2]) <= 0x7fffffff\"\n   \"mulu%.l %2,%3:%0\")\n \n@@ -3014,7 +3024,7 @@\n \t  (truncate:SI (lshiftrt:DI (mult:DI (sign_extend:DI (match_dup 1))\n \t\t\t\t\t     (sign_extend:DI (match_dup 2)))\n \t\t\t\t    (const_int 32))))])]\n-  \"TARGET_68020\"\n+  \"TARGET_68020 && !TARGET_68060\"\n   \"\")\n \n (define_insn \"\"\n@@ -3025,7 +3035,7 @@\n \t(truncate:SI (lshiftrt:DI (mult:DI (sign_extend:DI (match_dup 1))\n \t\t\t\t\t   (sign_extend:DI (match_dup 2)))\n \t\t\t\t  (const_int 32))))]\n-  \"TARGET_68020\"\n+  \"TARGET_68020 && !TARGET_68060\"\n   \"muls%.l %2,%3:%0\")\n \n (define_insn \"\"\n@@ -3036,7 +3046,7 @@\n \t(truncate:SI (lshiftrt:DI (mult:DI (sign_extend:DI (match_dup 1))\n \t\t\t\t\t   (match_dup 2))\n \t\t\t\t  (const_int 32))))]\n-  \"TARGET_68020\n+  \"TARGET_68020 && !TARGET_68060\n    /* This test is a noop on 32 bit machines,\n       but important for a cross-compiler hosted on 64-bit machines.  */\n    && INTVAL (operands[2]) <= 0x7fffffff\n@@ -3052,7 +3062,7 @@\n \t\t     (zero_extend:DI (match_operand:SI 2 \"general_operand\" \"\")))\n \t    (const_int 32))))\n      (clobber (match_dup 3))])]\n-  \"TARGET_68020\"\n+  \"TARGET_68020 && !TARGET_68060\"\n   \"\n {\n   operands[3] = gen_reg_rtx (SImode);\n@@ -3076,7 +3086,7 @@\n \t\t   (zero_extend:DI (match_operand:SI 3 \"nonimmediate_operand\" \"dm\")))\n \t  (const_int 32))))\n    (clobber (match_operand:SI 1 \"register_operand\" \"=d\"))]\n-  \"TARGET_68020\"\n+  \"TARGET_68020 && !TARGET_68060\"\n   \"mulu%.l %3,%0:%1\")\n \n (define_insn \"const_umulsi3_highpart\"\n@@ -3087,7 +3097,7 @@\n \t\t   (match_operand 3 \"const_uint32_operand\" \"\"))\n \t  (const_int 32))))\n    (clobber (match_operand:SI 1 \"register_operand\" \"=d\"))]\n-  \"TARGET_68020\"\n+  \"TARGET_68020 && !TARGET_68060\"\n   \"mulu%.l %3,%0:%1\")\n \n (define_expand \"smulsi3_highpart\"\n@@ -3099,7 +3109,7 @@\n \t\t     (sign_extend:DI (match_operand:SI 2 \"general_operand\" \"\")))\n \t    (const_int 32))))\n      (clobber (match_dup 3))])]\n-  \"TARGET_68020\"\n+  \"TARGET_68020 && !TARGET_68060\"\n   \"\n {\n   operands[3] = gen_reg_rtx (SImode);\n@@ -3123,7 +3133,7 @@\n \t\t   (sign_extend:DI (match_operand:SI 3 \"nonimmediate_operand\" \"dm\")))\n \t  (const_int 32))))\n    (clobber (match_operand:SI 1 \"register_operand\" \"=d\"))]\n-  \"TARGET_68020\"\n+  \"TARGET_68020 && !TARGET_68060\"\n   \"muls%.l %3,%0:%1\")\n \n (define_insn \"const_smulsi3_highpart\"\n@@ -3134,7 +3144,7 @@\n \t\t   (match_operand 3 \"const_sint32_operand\" \"\"))\n \t  (const_int 32))))\n    (clobber (match_operand:SI 1 \"register_operand\" \"=d\"))]\n-  \"TARGET_68020\"\n+  \"TARGET_68020 && !TARGET_68060\"\n   \"muls%.l %3,%0:%1\")\n \n (define_expand \"muldf3\"\n@@ -3191,7 +3201,7 @@\n   \"*\n {\n   if (GET_CODE (operands[2]) == CONST_DOUBLE\n-      && floating_exact_log2 (operands[2]) && !TARGET_68040)\n+      && floating_exact_log2 (operands[2]) && !TARGET_68040 && !TARGET_68060)\n     {\n       int i = floating_exact_log2 (operands[2]);\n       operands[2] = gen_rtx (CONST_INT, VOIDmode, i);"}]}