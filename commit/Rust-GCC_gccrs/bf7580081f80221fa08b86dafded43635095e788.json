{"sha": "bf7580081f80221fa08b86dafded43635095e788", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY3NTgwMDgxZjgwMjIxZmEwOGI4NmRhZmRlZDQzNjM1MDk1ZTc4OA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-04-23T07:33:43Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-04-23T07:33:43Z"}, "message": "alpha.c (alpha_legitimize_reload_address): Add cast to enum type.\n\n\t* config/alpha/alpha.c (alpha_legitimize_reload_address): Add cast to\n\tenum type.\n\t(alpha_rtx_costs): Ditto.\n\t(emit_unlikely_jump): Use add_reg_note.\n\t(emit_frame_store_1): Ditto.\n\t(alpha_expand_prologue): Ditto.\n\t(alpha_expand_builtin): Change 0 to EXPAND_NORMAL in function call.\n\t* config/alpha/alpha.c (Unicos/Mk address splitter): Use add_reg_note.\n\nFrom-SVN: r146637", "tree": {"sha": "cea575414ea0175ba361d467b825ba799393e39e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cea575414ea0175ba361d467b825ba799393e39e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf7580081f80221fa08b86dafded43635095e788", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf7580081f80221fa08b86dafded43635095e788", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf7580081f80221fa08b86dafded43635095e788", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf7580081f80221fa08b86dafded43635095e788/comments", "author": null, "committer": null, "parents": [{"sha": "7323a100f3abb75b17073405c56e6d7edf6f5524", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7323a100f3abb75b17073405c56e6d7edf6f5524", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7323a100f3abb75b17073405c56e6d7edf6f5524"}], "stats": {"total": 65, "additions": 35, "deletions": 30}, "files": [{"sha": "c4e78f515448e32a720c2eabce960c0f1b24246a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf7580081f80221fa08b86dafded43635095e788/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf7580081f80221fa08b86dafded43635095e788/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf7580081f80221fa08b86dafded43635095e788", "patch": "@@ -1,3 +1,14 @@\n+2009-04-23  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha.c (alpha_legitimize_reload_address): Add cast to\n+\tenum type.\n+\t(alpha_rtx_costs): Ditto.\n+\t(emit_unlikely_jump): Use add_reg_note.\n+\t(emit_frame_store_1): Ditto.\n+\t(alpha_expand_prologue): Ditto.\n+\t(alpha_expand_builtin): Change 0 to EXPAND_NORMAL in function call.\n+\t* config/alpha/alpha.c (Unicos/Mk address splitter): Use add_reg_note.\n+\n 2009-04-23  Nick Clifton  <nickc@redhat.com>\n \n \t* config/v850/v850.md (epilogue): Remove suppressed code.\n@@ -102,16 +113,15 @@\n \t* varasm.c: Likewise.\n \t* varray.h: Likewise.\n \t* vec.h: Likewise.\n-\t* coretypes.h: Do not define GTY macro if it is already\n-\tdefined.\n+\t* coretypes.h: Do not define GTY macro if it is already defined.\n \t* doc/gty.texi: Update GTY documentation to new syntax.\n \t* gengtype-lex.l: Enforce attribute-like syntax for GTY\n \tannotations on structs.\n \t* gengtype-parse.c: Likewise.\n \n 2009-04-22  Mark Heffernan  <meheff@google.com>\n \n-       * gcc.c (LINK_COMMAND_SPEC): Link with gcov with -fprofile-generate=.\n+\t* gcc.c (LINK_COMMAND_SPEC): Link with gcov with -fprofile-generate=.\n \n 2009-04-22  Kazu Hirata  <kazu@codesourcery.com>\n \n@@ -127,8 +137,7 @@\n 2009-04-22  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* Makefile.in: Update dependencies.\n-\t* errors.c (warning): Remove unused parameter 'opt'. Returns\n-\t'void'.\n+\t* errors.c (warning): Remove unused parameter 'opt'. Returns 'void'.\n \t* errors.h: Remove bogus comment about compatibility.\n \t(warning): Update declaration.\n \t* genautomata.c: Update all calls to warning."}, {"sha": "8597e662f4493e0486395aafb5e8b52c3538d4a1", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf7580081f80221fa08b86dafded43635095e788/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf7580081f80221fa08b86dafded43635095e788/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=bf7580081f80221fa08b86dafded43635095e788", "patch": "@@ -1223,7 +1223,7 @@ alpha_legitimize_reload_address (rtx x,\n     {\n       push_reload (XEXP (x, 0), NULL_RTX, &XEXP (x, 0), NULL,\n \t\t   BASE_REG_CLASS, GET_MODE (x), VOIDmode, 0, 0,\n-\t\t   opnum, type);\n+\t\t   opnum, (enum reload_type) type);\n       return x;\n     }\n \n@@ -1254,7 +1254,7 @@ alpha_legitimize_reload_address (rtx x,\n \n       push_reload (XEXP (x, 0), NULL_RTX, &XEXP (x, 0), NULL,\n \t\t   BASE_REG_CLASS, GET_MODE (x), VOIDmode, 0, 0,\n-\t\t   opnum, type);\n+\t\t   opnum, (enum reload_type) type);\n       return x;\n     }\n \n@@ -1333,8 +1333,11 @@ alpha_rtx_costs (rtx x, int code, int outer_code, int *total,\n       else if (GET_CODE (XEXP (x, 0)) == MULT\n \t       && const48_operand (XEXP (XEXP (x, 0), 1), VOIDmode))\n \t{\n-\t  *total = (rtx_cost (XEXP (XEXP (x, 0), 0), outer_code, speed)\n-\t\t    + rtx_cost (XEXP (x, 1), outer_code, speed) + COSTS_N_INSNS (1));\n+\t  *total = (rtx_cost (XEXP (XEXP (x, 0), 0),\n+\t\t\t      (enum rtx_code) outer_code, speed)\n+\t\t    + rtx_cost (XEXP (x, 1),\n+\t\t\t\t(enum rtx_code) outer_code, speed)\n+\t\t    + COSTS_N_INSNS (1));\n \t  return true;\n \t}\n       return false;\n@@ -4390,7 +4393,7 @@ emit_unlikely_jump (rtx cond, rtx label)\n \n   x = gen_rtx_IF_THEN_ELSE (VOIDmode, cond, label, pc_rtx);\n   x = emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, x));\n-  REG_NOTES (x) = gen_rtx_EXPR_LIST (REG_BR_PROB, very_unlikely, NULL_RTX);\n+  add_reg_note (x, REG_BR_PROB, very_unlikely);\n }\n \n /* A subroutine of the atomic operation splitters.  Emit a load-locked\n@@ -6579,7 +6582,7 @@ alpha_expand_builtin (tree exp, rtx target,\n \n       insn_op = &insn_data[icode].operand[arity + nonvoid];\n \n-      op[arity] = expand_expr (arg, NULL_RTX, insn_op->mode, 0);\n+      op[arity] = expand_expr (arg, NULL_RTX, insn_op->mode, EXPAND_NORMAL);\n \n       if (!(*insn_op->predicate) (op[arity], insn_op->mode))\n \top[arity] = copy_to_mode_reg (insn_op->mode, op[arity]);\n@@ -7456,10 +7459,8 @@ emit_frame_store_1 (rtx value, rtx base_reg, HOST_WIDE_INT frame_bias,\n \t  mem = gen_rtx_MEM (DImode, addr);\n \t}\n \n-      REG_NOTES (insn)\n-\t= gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR,\n-\t\t\t     gen_rtx_SET (VOIDmode, mem, frame_reg),\n-\t\t\t     REG_NOTES (insn));\n+      add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n+\t\t    gen_rtx_SET (VOIDmode, mem, frame_reg));\n     }\n }\n \n@@ -7637,14 +7638,12 @@ alpha_expand_prologue (void)\n          possibly intuit through the loop above.  So we invent this\n          note it looks at instead.  */\n       RTX_FRAME_RELATED_P (seq) = 1;\n-      REG_NOTES (seq)\n-        = gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR,\n-\t\t\t     gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n-\t\t\t       gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n-\t\t\t\t\t     GEN_INT (TARGET_ABI_UNICOSMK\n-\t\t\t\t\t\t      ? -frame_size + 64\n-\t\t\t\t\t\t      : -frame_size))),\n-\t\t\t     REG_NOTES (seq));\n+      add_reg_note (seq, REG_FRAME_RELATED_EXPR,\n+\t\t    gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t\t\t\t gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n+\t\t\t\t\t       GEN_INT (TARGET_ABI_UNICOSMK\n+\t\t\t\t\t\t\t? -frame_size + 64\n+\t\t\t\t\t\t\t: -frame_size))));\n     }\n \n   if (!TARGET_ABI_UNICOSMK)"}, {"sha": "486551a9aeec4ee59b910888b9f8b1e1211e31ed", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf7580081f80221fa08b86dafded43635095e788/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf7580081f80221fa08b86dafded43635095e788/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=bf7580081f80221fa08b86dafded43635095e788", "patch": "@@ -5402,12 +5402,9 @@\n       rtx label;\n \n       label = XEXP (operands[1], 0);\n-      REG_NOTES (insn1) = gen_rtx_EXPR_LIST (REG_LABEL_OPERAND, label,\n-\t\t\t\t\t     REG_NOTES (insn1));\n-      REG_NOTES (insn2) = gen_rtx_EXPR_LIST (REG_LABEL_OPERAND, label,\n-\t\t\t\t\t     REG_NOTES (insn2));\n-      REG_NOTES (insn3) = gen_rtx_EXPR_LIST (REG_LABEL_OPERAND, label,\n-\t\t\t\t\t     REG_NOTES (insn3));\n+      add_reg_note (insn1, REG_LABEL_OPERAND, label);\n+      add_reg_note (insn2, REG_LABEL_OPERAND, label);\n+      add_reg_note (insn3, REG_LABEL_OPERAND, label);\n       LABEL_NUSES (label) += 3;\n     }\n   DONE;"}, {"sha": "63d3d3b6966d2f9749d6104b46ca3a9bfd685283", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf7580081f80221fa08b86dafded43635095e788/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf7580081f80221fa08b86dafded43635095e788/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf7580081f80221fa08b86dafded43635095e788", "patch": "@@ -21,7 +21,7 @@\n \n 2009-04-22  Mark Heffernan  <meheff@google.com>\n \n-       * gcc.dg/profile-generate-3.c: New test.\n+\t* gcc.dg/profile-generate-3.c: New test.\n \n 2009-04-22  Jan Hubicka  <jh@suse.cz>\n "}]}