{"sha": "6c43852a18da03b2132f1fcf1390b59840b3db03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM0Mzg1MmExOGRhMDNiMjEzMmYxZmNmMTM5MGI1OTg0MGIzZGIwMw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-09-10T16:48:47Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-09-10T16:48:47Z"}, "message": "re PR libstdc++/37455 (Code bloat for ostream.widen('\\n'))\n\n2008-09-10  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/37455\n\t* include/bits/locale_facets.h (ctype<char>::_M_narrow_init,\n\tctype<char>::_M_widen_init): Don't define inline.\n\t* config/locale/darwin/ctype_members.cc: ... define here.\n\t* config/locale/gnu/ctype_members.cc: ... likewise.\n\t* config/locale/generic/ctype_members.cc: ... likewise.\n\t* config/abi/pre/gnu.ver: Export.\n\nFrom-SVN: r140238", "tree": {"sha": "516af585d2fc207465e1a71a6aa8ad2f3807d8c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/516af585d2fc207465e1a71a6aa8ad2f3807d8c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c43852a18da03b2132f1fcf1390b59840b3db03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c43852a18da03b2132f1fcf1390b59840b3db03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c43852a18da03b2132f1fcf1390b59840b3db03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c43852a18da03b2132f1fcf1390b59840b3db03/comments", "author": null, "committer": null, "parents": [{"sha": "b554826c78baa683c38238bed50beaa7dd4e5b87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b554826c78baa683c38238bed50beaa7dd4e5b87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b554826c78baa683c38238bed50beaa7dd4e5b87"}], "stats": {"total": 178, "additions": 140, "deletions": 38}, "files": [{"sha": "b3ef9c0b46abee9895d4bd316c29602065e9e03c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c43852a18da03b2132f1fcf1390b59840b3db03/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c43852a18da03b2132f1fcf1390b59840b3db03/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6c43852a18da03b2132f1fcf1390b59840b3db03", "patch": "@@ -1,3 +1,13 @@\n+2008-09-10  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/37455\n+\t* include/bits/locale_facets.h (ctype<char>::_M_narrow_init,\n+\tctype<char>::_M_widen_init): Don't define inline.\n+\t* config/locale/darwin/ctype_members.cc: ... define here.\n+\t* config/locale/gnu/ctype_members.cc: ... likewise.\n+\t* config/locale/generic/ctype_members.cc: ... likewise.\n+\t* config/abi/pre/gnu.ver: Export.\n+\n 2008-09-09  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* doc/xml/manual/abi.xml: Update for new releases."}, {"sha": "a3529baac9b0698dbcb9eaa49eef85b4f68774be", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c43852a18da03b2132f1fcf1390b59840b3db03/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c43852a18da03b2132f1fcf1390b59840b3db03/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=6c43852a18da03b2132f1fcf1390b59840b3db03", "patch": "@@ -950,6 +950,10 @@ GLIBCXX_3.4.11 {\n     _ZNSbIwSt11char_traitsIwESaIwEEaSESt16initializer_listIwE;\n     _ZNSbIwSt11char_traitsIwESaIwEEpLESt16initializer_listIwE;\n \n+    # ctype<char>::_M_narrow_init and _M_widen_init\n+    _ZNKSt5ctypeIcE14_M_narrow_initEv;\n+    _ZNKSt5ctypeIcE13_M_widen_initEv;\n+\n } GLIBCXX_3.4.10;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "f839971469a7cb9a027f69c8d96b65b62fd5b30b", "filename": "libstdc++-v3/config/locale/darwin/ctype_members.cc", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c43852a18da03b2132f1fcf1390b59840b3db03/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdarwin%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c43852a18da03b2132f1fcf1390b59840b3db03/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdarwin%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdarwin%2Fctype_members.cc?ref=6c43852a18da03b2132f1fcf1390b59840b3db03", "patch": "@@ -42,6 +42,47 @@\n \n namespace std\n {\n+  // Fill in the narrowing cache and flag whether all values are\n+  // valid or not.  _M_narrow_ok is set to 2 if memcpy can't\n+  // be used.\n+  void\n+  ctype<char>::\n+  _M_narrow_init() const\n+  {\n+    char __tmp[sizeof(_M_narrow)];\n+    for (size_t __i = 0; __i < sizeof(_M_narrow); ++__i)\n+      __tmp[__i] = __i;\n+    do_narrow(__tmp, __tmp + sizeof(__tmp), 0, _M_narrow);\n+    \n+    _M_narrow_ok = 1;\n+    if (__builtin_memcmp(__tmp, _M_narrow, sizeof(_M_narrow)))\n+      _M_narrow_ok = 2;\n+    else\n+      {\n+\t// Deal with the special case of zero: renarrow with a\n+\t// different default and compare.\n+\tchar __c;\n+\tdo_narrow(__tmp, __tmp + 1, 1, &__c);\n+\tif (__c == 1)\n+\t  _M_narrow_ok = 2;\n+      }\n+  }\n+\n+  void\n+  ctype<char>::\n+  _M_widen_init() const\n+  {\n+    char __tmp[sizeof(_M_widen)];\n+    for (size_t __i = 0; __i < sizeof(_M_widen); ++__i)\n+      __tmp[__i] = __i;\n+    do_widen(__tmp, __tmp + sizeof(__tmp), _M_widen);\n+    \n+    _M_widen_ok = 1;\n+    // Set _M_widen_ok to 2 if memcpy can't be used.\n+    if (__builtin_memcmp(__tmp, _M_widen, sizeof(_M_widen)))\n+      _M_widen_ok = 2;\n+  }\n+\n   // NB: The other ctype<char> specializations are in src/locale.cc and\n   // various /config/os/* files.\n "}, {"sha": "036f685d0e78e7a683ac62f988df6377eb8f120b", "filename": "libstdc++-v3/config/locale/generic/ctype_members.cc", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c43852a18da03b2132f1fcf1390b59840b3db03/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c43852a18da03b2132f1fcf1390b59840b3db03/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc?ref=6c43852a18da03b2132f1fcf1390b59840b3db03", "patch": "@@ -41,6 +41,47 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n+  // Fill in the narrowing cache and flag whether all values are\n+  // valid or not.  _M_narrow_ok is set to 2 if memcpy can't\n+  // be used.\n+  void\n+  ctype<char>::\n+  _M_narrow_init() const\n+  {\n+    char __tmp[sizeof(_M_narrow)];\n+    for (size_t __i = 0; __i < sizeof(_M_narrow); ++__i)\n+      __tmp[__i] = __i;\n+    do_narrow(__tmp, __tmp + sizeof(__tmp), 0, _M_narrow);\n+    \n+    _M_narrow_ok = 1;\n+    if (__builtin_memcmp(__tmp, _M_narrow, sizeof(_M_narrow)))\n+      _M_narrow_ok = 2;\n+    else\n+      {\n+\t// Deal with the special case of zero: renarrow with a\n+\t// different default and compare.\n+\tchar __c;\n+\tdo_narrow(__tmp, __tmp + 1, 1, &__c);\n+\tif (__c == 1)\n+\t  _M_narrow_ok = 2;\n+      }\n+  }\n+\n+  void\n+  ctype<char>::\n+  _M_widen_init() const\n+  {\n+    char __tmp[sizeof(_M_widen)];\n+    for (size_t __i = 0; __i < sizeof(_M_widen); ++__i)\n+      __tmp[__i] = __i;\n+    do_widen(__tmp, __tmp + sizeof(__tmp), _M_widen);\n+    \n+    _M_widen_ok = 1;\n+    // Set _M_widen_ok to 2 if memcpy can't be used.\n+    if (__builtin_memcmp(__tmp, _M_widen, sizeof(_M_widen)))\n+      _M_widen_ok = 2;\n+  }\n+\n   // NB: The other ctype<char> specializations are in src/locale.cc and\n   // various /config/os/* files.\n   ctype_byname<char>::ctype_byname(const char* __s, size_t __refs)"}, {"sha": "f12433976983c2b6941c2f8cea7653299902d791", "filename": "libstdc++-v3/config/locale/gnu/ctype_members.cc", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c43852a18da03b2132f1fcf1390b59840b3db03/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c43852a18da03b2132f1fcf1390b59840b3db03/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc?ref=6c43852a18da03b2132f1fcf1390b59840b3db03", "patch": "@@ -40,6 +40,47 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n+  // Fill in the narrowing cache and flag whether all values are\n+  // valid or not.  _M_narrow_ok is set to 2 if memcpy can't\n+  // be used.\n+  void\n+  ctype<char>::\n+  _M_narrow_init() const\n+  {\n+    char __tmp[sizeof(_M_narrow)];\n+    for (size_t __i = 0; __i < sizeof(_M_narrow); ++__i)\n+      __tmp[__i] = __i;\n+    do_narrow(__tmp, __tmp + sizeof(__tmp), 0, _M_narrow);\n+    \n+    _M_narrow_ok = 1;\n+    if (__builtin_memcmp(__tmp, _M_narrow, sizeof(_M_narrow)))\n+      _M_narrow_ok = 2;\n+    else\n+      {\n+\t// Deal with the special case of zero: renarrow with a\n+\t// different default and compare.\n+\tchar __c;\n+\tdo_narrow(__tmp, __tmp + 1, 1, &__c);\n+\tif (__c == 1)\n+\t  _M_narrow_ok = 2;\n+      }\n+  }\n+\n+  void\n+  ctype<char>::\n+  _M_widen_init() const\n+  {\n+    char __tmp[sizeof(_M_widen)];\n+    for (size_t __i = 0; __i < sizeof(_M_widen); ++__i)\n+      __tmp[__i] = __i;\n+    do_widen(__tmp, __tmp + sizeof(__tmp), _M_widen);\n+    \n+    _M_widen_ok = 1;\n+    // Set _M_widen_ok to 2 if memcpy can't be used.\n+    if (__builtin_memcmp(__tmp, _M_widen, sizeof(_M_widen)))\n+      _M_widen_ok = 2;\n+  }\n+\n   // NB: The other ctype<char> specializations are in src/locale.cc and\n   // various /config/os/* files.\n   ctype_byname<char>::ctype_byname(const char* __s, size_t __refs)"}, {"sha": "340d21d7e048cb48308ee0f3b8b338cbf7f54985", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 3, "deletions": 38, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c43852a18da03b2132f1fcf1390b59840b3db03/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c43852a18da03b2132f1fcf1390b59840b3db03/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=6c43852a18da03b2132f1fcf1390b59840b3db03", "patch": "@@ -1,7 +1,7 @@\n // Locale support -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007\n+// 2006, 2007, 2008\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -1161,43 +1161,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       }\n \n     private:\n-\n-      void _M_widen_init() const\n-      {\n-\tchar __tmp[sizeof(_M_widen)];\n-\tfor (size_t __i = 0; __i < sizeof(_M_widen); ++__i)\n-\t  __tmp[__i] = __i;\n-\tdo_widen(__tmp, __tmp + sizeof(__tmp), _M_widen);\n-\n-\t_M_widen_ok = 1;\n-\t// Set _M_widen_ok to 2 if memcpy can't be used.\n-\tif (__builtin_memcmp(__tmp, _M_widen, sizeof(_M_widen)))\n-\t  _M_widen_ok = 2;\n-      }\n-\n-      // Fill in the narrowing cache and flag whether all values are\n-      // valid or not.  _M_narrow_ok is set to 2 if memcpy can't\n-      // be used.\n-      void _M_narrow_init() const\n-      {\n-\tchar __tmp[sizeof(_M_narrow)];\n-\tfor (size_t __i = 0; __i < sizeof(_M_narrow); ++__i)\n-\t  __tmp[__i] = __i;\n-\tdo_narrow(__tmp, __tmp + sizeof(__tmp), 0, _M_narrow);\n-\n-\t_M_narrow_ok = 1;\n-\tif (__builtin_memcmp(__tmp, _M_narrow, sizeof(_M_narrow)))\n-\t  _M_narrow_ok = 2;\n-\telse\n-\t  {\n-\t    // Deal with the special case of zero: renarrow with a\n-\t    // different default and compare.\n-\t    char __c;\n-\t    do_narrow(__tmp, __tmp + 1, 1, &__c);\n-\t    if (__c == 1)\n-\t      _M_narrow_ok = 2;\n-\t  }\n-      }\n+      void _M_narrow_init() const;\n+      void _M_widen_init() const;\n     };\n \n   template<>"}]}