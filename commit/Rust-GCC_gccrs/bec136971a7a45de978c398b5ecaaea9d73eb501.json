{"sha": "bec136971a7a45de978c398b5ecaaea9d73eb501", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVjMTM2OTcxYTdhNDVkZTk3OGMzOThiNWVjYWFlYTlkNzNlYjUwMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-01-31T10:56:30Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-05T12:17:40Z"}, "message": "[Ada] Fix assertion failure on double rederivation of private type\n\n2020-06-05  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch3.adb (Available_Full_View): New function returning\n\teither the full or the underlying full view.\n\t(Build_Full_Derivation): Add guard for the full view.\n\t(Copy_And_Build): Retrieve the underlying full view, if any,\n\talso if deriving a completion.\n\t(Build_Derived_Private_Type): Use Available_Full_View throughout\n\tto decide whether a full derivation must be done.", "tree": {"sha": "5ee620569a7ddf4590c8a6c25ee9a3f1bf256571", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ee620569a7ddf4590c8a6c25ee9a3f1bf256571"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bec136971a7a45de978c398b5ecaaea9d73eb501", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bec136971a7a45de978c398b5ecaaea9d73eb501", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bec136971a7a45de978c398b5ecaaea9d73eb501", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bec136971a7a45de978c398b5ecaaea9d73eb501/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0fd1b9c9d906f9693bb4e7d56a37ec5adf4bc0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0fd1b9c9d906f9693bb4e7d56a37ec5adf4bc0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0fd1b9c9d906f9693bb4e7d56a37ec5adf4bc0a"}], "stats": {"total": 64, "additions": 45, "deletions": 19}, "files": [{"sha": "9523493b55be86251304ea3bd5e991b192fc5d7b", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 45, "deletions": 19, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec136971a7a45de978c398b5ecaaea9d73eb501/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec136971a7a45de978c398b5ecaaea9d73eb501/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=bec136971a7a45de978c398b5ecaaea9d73eb501", "patch": "@@ -7612,13 +7612,43 @@ package body Sem_Ch3 is\n       Full_Der  : Entity_Id           := New_Copy (Derived_Type);\n       Full_P    : Entity_Id;\n \n+      function Available_Full_View (Typ : Entity_Id) return Entity_Id;\n+      --  Return the Full_View or Underlying_Full_View of Typ, whichever is\n+      --  present (they cannot be both present for the same type), or Empty.\n+\n       procedure Build_Full_Derivation;\n       --  Build full derivation, i.e. derive from the full view\n \n       procedure Copy_And_Build;\n       --  Copy derived type declaration, replace parent with its full view,\n       --  and build derivation\n \n+      -------------------------\n+      -- Available_Full_View --\n+      -------------------------\n+\n+      function Available_Full_View (Typ : Entity_Id) return Entity_Id is\n+      begin\n+         if Present (Full_View (Typ)) then\n+            return Full_View (Typ);\n+\n+         elsif Present (Underlying_Full_View (Typ)) then\n+\n+            --  We should be called on a type with an underlying full view\n+            --  only by means of the recursive call made in Copy_And_Build\n+            --  through the first call to Build_Derived_Type, or else if\n+            --  the parent scope is being analyzed because we are deriving\n+            --  a completion.\n+\n+            pragma Assert (Is_Completion or else In_Private_Part (Par_Scope));\n+\n+            return Underlying_Full_View (Typ);\n+\n+         else\n+            return Empty;\n+         end if;\n+      end Available_Full_View;\n+\n       ---------------------------\n       -- Build_Full_Derivation --\n       ---------------------------\n@@ -7638,7 +7668,9 @@ package body Sem_Ch3 is\n          --  part of a child unit. In that case retrieve the full view of\n          --  the parent momentarily.\n \n-         elsif not In_Same_Source_Unit (N, Parent_Type) then\n+         elsif not In_Same_Source_Unit (N, Parent_Type)\n+           and then Present (Full_View (Parent_Type))\n+         then\n             Full_P := Full_View (Parent_Type);\n             Exchange_Declarations (Parent_Type);\n             Copy_And_Build;\n@@ -7674,11 +7706,13 @@ package body Sem_Ch3 is\n          --  completion, i.e. to build the underlying full view of the type,\n          --  then use this underlying full view. We cannot do that if this\n          --  is not a completion, i.e. to build the full view of the type,\n-         --  because this would break the privacy status of the parent.\n+         --  because this would break the privacy of the parent type, except\n+         --  if the parent scope is being analyzed because we are deriving a\n+         --  completion.\n \n          if Is_Private_Type (Full_Parent)\n            and then Present (Underlying_Full_View (Full_Parent))\n-           and then Is_Completion\n+           and then (Is_Completion or else In_Private_Part (Par_Scope))\n          then\n             Full_Parent := Underlying_Full_View (Full_Parent);\n          end if;\n@@ -7929,9 +7963,7 @@ package body Sem_Ch3 is\n          --  case (see point 5. of its head comment) since we build it for the\n          --  derived subtype.\n \n-         if (Present (Full_View (Parent_Type))\n-             or else (Present (Underlying_Full_View (Parent_Type))\n-                       and then Is_Completion))\n+         if Present (Available_Full_View (Parent_Type))\n            and then not Is_Itype (Derived_Type)\n          then\n             declare\n@@ -7983,14 +8015,8 @@ package body Sem_Ch3 is\n             end;\n          end if;\n \n-      elsif (Present (Full_View (Parent_Type))\n-              and then\n-             Has_Discriminants (Full_View (Parent_Type)))\n-        or else (Present (Underlying_Full_View (Parent_Type))\n-                  and then\n-                 Has_Discriminants (Underlying_Full_View (Parent_Type))\n-                  and then\n-                 Is_Completion)\n+      elsif Present (Available_Full_View (Parent_Type))\n+        and then Has_Discriminants (Available_Full_View (Parent_Type))\n       then\n          if Has_Unknown_Discriminants (Parent_Type)\n            and then Nkind (Subtype_Indication (Type_Definition (N))) =\n@@ -8027,7 +8053,7 @@ package body Sem_Ch3 is\n \n          Set_Stored_Constraint (Derived_Type, No_Elist);\n          Set_Is_Constrained\n-           (Derived_Type, Is_Constrained (Full_View (Parent_Type)));\n+           (Derived_Type, Is_Constrained (Available_Full_View (Parent_Type)));\n \n       else\n          --  Untagged type, No discriminants on either view\n@@ -8040,8 +8066,8 @@ package body Sem_Ch3 is\n          end if;\n \n          if Present (Discriminant_Specifications (N))\n-           and then Present (Full_View (Parent_Type))\n-           and then not Is_Tagged_Type (Full_View (Parent_Type))\n+           and then Present (Available_Full_View (Parent_Type))\n+           and then not Is_Tagged_Type (Available_Full_View (Parent_Type))\n          then\n             Error_Msg_N (\"cannot add discriminants to untagged type\", N);\n          end if;\n@@ -8074,8 +8100,8 @@ package body Sem_Ch3 is\n          --  tagged, this mechanism will not work because we cannot derive from\n          --  the tagged full view unless we have an extension.\n \n-         if Present (Full_View (Parent_Type))\n-           and then not Is_Tagged_Type (Full_View (Parent_Type))\n+         if Present (Available_Full_View (Parent_Type))\n+           and then not Is_Tagged_Type (Available_Full_View (Parent_Type))\n            and then not Error_Posted (N)\n          then\n             Build_Full_Derivation;"}]}