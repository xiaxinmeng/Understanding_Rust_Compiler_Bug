{"sha": "24219d389088db7eb34f492e89643a5246ec12a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQyMTlkMzg5MDg4ZGI3ZWIzNGY0OTJlODk2NDNhNTI0NmVjMTJhNQ==", "commit": {"author": {"name": "Tristan Gingold", "email": "gingold@adacore.com", "date": "2012-03-12T14:23:03Z"}, "committer": {"name": "Tristan Gingold", "email": "gingold@gcc.gnu.org", "date": "2012-03-12T14:23:03Z"}, "message": "2012-03-12  Tristan Gingold  <gingold@adacore.com>\n\n\t* inclhack.def (vms_use_quoted_include,vms_add_missing_braces)\n\t(vms_do_not_redeclare_hostalias, vms_decc_builtin)\n\t(vms_no_64bit_getopt, vms_forward_declare_struct)\n\t(vms_use_fast_setjmp): New fixes.\n\t* fixincl.x: Regenerate.\n\t* tests/base/rtldef/string.h: Update.\n\t* tests/base/rtldef/if.h, tests/base/rtldef/resolv.h,\n\t* tests/base/rtldef/setjmp.h, tests/base/rtldef/signal.h,\n\t* tests/base/rtldef/stdio.h, tests/base/rtldef/wait.h: New files.\n\nFrom-SVN: r185230", "tree": {"sha": "ee4cda9111a43f3915ac816d9575da013601c050", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee4cda9111a43f3915ac816d9575da013601c050"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24219d389088db7eb34f492e89643a5246ec12a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24219d389088db7eb34f492e89643a5246ec12a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24219d389088db7eb34f492e89643a5246ec12a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24219d389088db7eb34f492e89643a5246ec12a5/comments", "author": {"login": "gingold-adacore", "id": 16334725, "node_id": "MDQ6VXNlcjE2MzM0NzI1", "avatar_url": "https://avatars.githubusercontent.com/u/16334725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gingold-adacore", "html_url": "https://github.com/gingold-adacore", "followers_url": "https://api.github.com/users/gingold-adacore/followers", "following_url": "https://api.github.com/users/gingold-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/gingold-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/gingold-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gingold-adacore/subscriptions", "organizations_url": "https://api.github.com/users/gingold-adacore/orgs", "repos_url": "https://api.github.com/users/gingold-adacore/repos", "events_url": "https://api.github.com/users/gingold-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/gingold-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "21fa2faf26529ce8b1265a8d02409a727df35221", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21fa2faf26529ce8b1265a8d02409a727df35221", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21fa2faf26529ce8b1265a8d02409a727df35221"}], "stats": {"total": 553, "additions": 548, "deletions": 5}, "files": [{"sha": "d37b5efa1002d29e6e8685d6c108c9a64d5a4b24", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24219d389088db7eb34f492e89643a5246ec12a5/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24219d389088db7eb34f492e89643a5246ec12a5/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=24219d389088db7eb34f492e89643a5246ec12a5", "patch": "@@ -1,3 +1,15 @@\n+2012-03-12  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* inclhack.def (vms_use_quoted_include,vms_add_missing_braces)\n+\t(vms_do_not_redeclare_hostalias, vms_decc_builtin)\n+\t(vms_no_64bit_getopt, vms_forward_declare_struct)\n+\t(vms_use_fast_setjmp): New fixes.\n+\t* fixincl.x: Regenerate.\n+\t* tests/base/rtldef/string.h: Update.\n+\t* tests/base/rtldef/if.h, tests/base/rtldef/resolv.h,\n+\t* tests/base/rtldef/setjmp.h, tests/base/rtldef/signal.h,\n+\t* tests/base/rtldef/stdio.h, tests/base/rtldef/wait.h: New files.\n+\n 2012-01-11  Bruce Korb <bkorb@gnu.org>\n \t    Steven G. Kargl  <kargl@gcc.gnu.org>\n \t    Andreas Tobler  <andreast@fgznet.ch>"}, {"sha": "eca464678e432a0a4b19b548df6f374b4f9a7037", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 313, "deletions": 5, "changes": 318, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24219d389088db7eb34f492e89643a5246ec12a5/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24219d389088db7eb34f492e89643a5246ec12a5/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=24219d389088db7eb34f492e89643a5246ec12a5", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  January  9, 2012 at 11:55:38 PM by AutoGen 5.12\n+ * It has been AutoGen-ed  March 12, 2012 at 10:19:44 AM by AutoGen 5.11.1\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Mon Jan  9 23:55:38 CET 2012\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Mon Mar 12 10:19:44 CET 2012\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 223 fixup descriptions.\n+ * This file contains 230 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -8672,6 +8672,272 @@ static const char* apzVms_Disable_Decc_String_BuiltinsPatch[] = {\n     \"#if !defined(__VAX) && !defined(__GNUC__)\\n\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Vms_Use_Quoted_Include fix\n+ */\n+tSCC zVms_Use_Quoted_IncludeName[] =\n+     \"vms_use_quoted_include\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zVms_Use_Quoted_IncludeList[] =\n+  \"rtldef/wait.h\\0starlet_c/pthread.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzVms_Use_Quoted_IncludeMachs[] = {\n+        \"*-*-*vms*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zVms_Use_Quoted_IncludeSelect0[] =\n+       \"(#[ \\t]*include[ \\t]+)<(resource|builtins)\\\\.h>\";\n+\n+#define    VMS_USE_QUOTED_INCLUDE_TEST_CT  1\n+static tTestDesc aVms_Use_Quoted_IncludeTests[] = {\n+  { TT_EGREP,    zVms_Use_Quoted_IncludeSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Vms_Use_Quoted_Include\n+ */\n+static const char* apzVms_Use_Quoted_IncludePatch[] = {\n+    \"format\",\n+    \"%1<sys/%2.h>\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Vms_Add_Missing_Braces fix\n+ */\n+tSCC zVms_Add_Missing_BracesName[] =\n+     \"vms_add_missing_braces\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zVms_Add_Missing_BracesList[] =\n+  \"rtldef/signal.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzVms_Add_Missing_BracesMachs[] = {\n+        \"*-*-*vms*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zVms_Add_Missing_BracesSelect0[] =\n+       \"(_SIG_[A-Z]+_SET[ \\t]+= \\\\{)(0x[0F]+, 0x[0F]+)\";\n+\n+#define    VMS_ADD_MISSING_BRACES_TEST_CT  1\n+static tTestDesc aVms_Add_Missing_BracesTests[] = {\n+  { TT_EGREP,    zVms_Add_Missing_BracesSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Vms_Add_Missing_Braces\n+ */\n+static const char* apzVms_Add_Missing_BracesPatch[] = {\n+    \"format\",\n+    \"%1 {%2} \",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Vms_Do_Not_Redeclare_Hostalias fix\n+ */\n+tSCC zVms_Do_Not_Redeclare_HostaliasName[] =\n+     \"vms_do_not_redeclare_hostalias\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zVms_Do_Not_Redeclare_HostaliasList[] =\n+  \"rtldef/resolv.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzVms_Do_Not_Redeclare_HostaliasMachs[] = {\n+        \"*-*-*vms*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zVms_Do_Not_Redeclare_HostaliasSelect0[] =\n+       \"(void[ \\t]+fp_nquery \\\\(const u_char \\\\*, int, FILE \\\\*\\\\);)\\n\\\n+(__char_ptr32[ \\t]+hostalias \\\\(const char \\\\*\\\\);)\";\n+\n+#define    VMS_DO_NOT_REDECLARE_HOSTALIAS_TEST_CT  1\n+static tTestDesc aVms_Do_Not_Redeclare_HostaliasTests[] = {\n+  { TT_EGREP,    zVms_Do_Not_Redeclare_HostaliasSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Vms_Do_Not_Redeclare_Hostalias\n+ */\n+static const char* apzVms_Do_Not_Redeclare_HostaliasPatch[] = {\n+    \"format\",\n+    \"%1\\n\\\n+/* %2 */\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Vms_Decc_Builtin fix\n+ */\n+tSCC zVms_Decc_BuiltinName[] =\n+     \"vms_decc_builtin\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zVms_Decc_BuiltinList[] =\n+  \"rtldef/string.h\\0rtldef/time.h\\0rtldef/strings.h\\0rtldef/socket.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzVms_Decc_BuiltinMachs[] = {\n+        \"*-*-*vms*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zVms_Decc_BuiltinSelect0[] =\n+       \"(__MEMSET|__MEMMOVE|__MEMCPY|__STRLEN|__STRCPY)\";\n+\n+#define    VMS_DECC_BUILTIN_TEST_CT  1\n+static tTestDesc aVms_Decc_BuiltinTests[] = {\n+  { TT_EGREP,    zVms_Decc_BuiltinSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Vms_Decc_Builtin\n+ */\n+static const char* apzVms_Decc_BuiltinPatch[] = { sed_cmd_z,\n+    \"-e\", \"s@__MEMSET@memset@\",\n+    \"-e\", \"s@__MEMMOVE@memmove@\",\n+    \"-e\", \"s@__MEMCPY@memcpy@\",\n+    \"-e\", \"s@__STRLEN@strlen@\",\n+    \"-e\", \"s@__STRCPY@strcpy@\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Vms_No_64bit_Getopt fix\n+ */\n+tSCC zVms_No_64bit_GetoptName[] =\n+     \"vms_no_64bit_getopt\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zVms_No_64bit_GetoptList[] =\n+  \"rtldef/stdio.h\\0rtldef/unistd.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzVms_No_64bit_GetoptMachs[] = {\n+        \"*-*-*vms*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zVms_No_64bit_GetoptSelect0[] =\n+       \"^[ \\t]*(extern[ \\t]*)?(int[ \\t]*(getopt|optind|opterr|optopt)|(char \\\\*optarg))([ \\t]*\\\\(.*\\\\))?;\\n\";\n+\n+#define    VMS_NO_64BIT_GETOPT_TEST_CT  1\n+static tTestDesc aVms_No_64bit_GetoptTests[] = {\n+  { TT_EGREP,    zVms_No_64bit_GetoptSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Vms_No_64bit_Getopt\n+ */\n+static const char* apzVms_No_64bit_GetoptPatch[] = {\n+    \"format\",\n+    \"#if __INITIAL_POINTER_SIZE != 64 /* getopt is short ptr only.  */\\n\\\n+%0#endif\\n\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Vms_Forward_Declare_Struct fix\n+ */\n+tSCC zVms_Forward_Declare_StructName[] =\n+     \"vms_forward_declare_struct\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zVms_Forward_Declare_StructList[] =\n+  \"rtldef/if.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzVms_Forward_Declare_StructMachs[] = {\n+        \"*-*-*vms*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zVms_Forward_Declare_StructSelect0[] =\n+       \"(/\\\\* forward decls for C\\\\+\\\\+ \\\\*/\\n\\\n+)#ifdef __cplusplus\\n\";\n+\n+#define    VMS_FORWARD_DECLARE_STRUCT_TEST_CT  1\n+static tTestDesc aVms_Forward_Declare_StructTests[] = {\n+  { TT_EGREP,    zVms_Forward_Declare_StructSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Vms_Forward_Declare_Struct\n+ */\n+static const char* apzVms_Forward_Declare_StructPatch[] = {\n+    \"format\",\n+    \"%1#if defined (__cplusplus) || defined (__GNUC__)\\n\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Vms_Use_Fast_Setjmp fix\n+ */\n+tSCC zVms_Use_Fast_SetjmpName[] =\n+     \"vms_use_fast_setjmp\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zVms_Use_Fast_SetjmpList[] =\n+  \"rtldef/setjmp.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzVms_Use_Fast_SetjmpMachs[] = {\n+        \"*-*-*vms*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zVms_Use_Fast_SetjmpSelect0[] =\n+       \"(#[ \\t]*if[ \\t]*defined\\\\(__FAST_SETJMP\\\\)[ \\t]*\\\\|\\\\|)\";\n+\n+#define    VMS_USE_FAST_SETJMP_TEST_CT  1\n+static tTestDesc aVms_Use_Fast_SetjmpTests[] = {\n+  { TT_EGREP,    zVms_Use_Fast_SetjmpSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Vms_Use_Fast_Setjmp\n+ */\n+static const char* apzVms_Use_Fast_SetjmpPatch[] = {\n+    \"format\",\n+    \"%0 defined (__GNUC__) ||\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Void_Null fix\n@@ -9069,9 +9335,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          265\n+#define REGEX_COUNT          272\n #define MACH_LIST_SIZE_LIMIT 181\n-#define FIX_COUNT            223\n+#define FIX_COUNT            230\n \n /*\n  *  Enumerate the fixes\n@@ -9291,6 +9557,13 @@ typedef enum {\n     VMS_DEFINE_CAN_USE_EXTERN_PREFIX_FIXIDX,\n     VMS_USE_PRAGMA_EXTERN_MODEL_FIXIDX,\n     VMS_DISABLE_DECC_STRING_BUILTINS_FIXIDX,\n+    VMS_USE_QUOTED_INCLUDE_FIXIDX,\n+    VMS_ADD_MISSING_BRACES_FIXIDX,\n+    VMS_DO_NOT_REDECLARE_HOSTALIAS_FIXIDX,\n+    VMS_DECC_BUILTIN_FIXIDX,\n+    VMS_NO_64BIT_GETOPT_FIXIDX,\n+    VMS_FORWARD_DECLARE_STRUCT_FIXIDX,\n+    VMS_USE_FAST_SETJMP_FIXIDX,\n     VOID_NULL_FIXIDX,\n     VXWORKS_GCC_PROBLEM_FIXIDX,\n     VXWORKS_NEEDS_VXTYPES_FIXIDX,\n@@ -10373,6 +10646,41 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      VMS_DISABLE_DECC_STRING_BUILTINS_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aVms_Disable_Decc_String_BuiltinsTests,   apzVms_Disable_Decc_String_BuiltinsPatch, 0 },\n \n+  {  zVms_Use_Quoted_IncludeName,    zVms_Use_Quoted_IncludeList,\n+     apzVms_Use_Quoted_IncludeMachs,\n+     VMS_USE_QUOTED_INCLUDE_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aVms_Use_Quoted_IncludeTests,   apzVms_Use_Quoted_IncludePatch, 0 },\n+\n+  {  zVms_Add_Missing_BracesName,    zVms_Add_Missing_BracesList,\n+     apzVms_Add_Missing_BracesMachs,\n+     VMS_ADD_MISSING_BRACES_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aVms_Add_Missing_BracesTests,   apzVms_Add_Missing_BracesPatch, 0 },\n+\n+  {  zVms_Do_Not_Redeclare_HostaliasName,    zVms_Do_Not_Redeclare_HostaliasList,\n+     apzVms_Do_Not_Redeclare_HostaliasMachs,\n+     VMS_DO_NOT_REDECLARE_HOSTALIAS_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aVms_Do_Not_Redeclare_HostaliasTests,   apzVms_Do_Not_Redeclare_HostaliasPatch, 0 },\n+\n+  {  zVms_Decc_BuiltinName,    zVms_Decc_BuiltinList,\n+     apzVms_Decc_BuiltinMachs,\n+     VMS_DECC_BUILTIN_TEST_CT, FD_MACH_ONLY,\n+     aVms_Decc_BuiltinTests,   apzVms_Decc_BuiltinPatch, 0 },\n+\n+  {  zVms_No_64bit_GetoptName,    zVms_No_64bit_GetoptList,\n+     apzVms_No_64bit_GetoptMachs,\n+     VMS_NO_64BIT_GETOPT_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aVms_No_64bit_GetoptTests,   apzVms_No_64bit_GetoptPatch, 0 },\n+\n+  {  zVms_Forward_Declare_StructName,    zVms_Forward_Declare_StructList,\n+     apzVms_Forward_Declare_StructMachs,\n+     VMS_FORWARD_DECLARE_STRUCT_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aVms_Forward_Declare_StructTests,   apzVms_Forward_Declare_StructPatch, 0 },\n+\n+  {  zVms_Use_Fast_SetjmpName,    zVms_Use_Fast_SetjmpList,\n+     apzVms_Use_Fast_SetjmpMachs,\n+     VMS_USE_FAST_SETJMP_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aVms_Use_Fast_SetjmpTests,   apzVms_Use_Fast_SetjmpPatch, 0 },\n+\n   {  zVoid_NullName,    zVoid_NullList,\n      apzVoid_NullMachs,\n      VOID_NULL_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "1a5cd8d234e46c464fea3f5ba440957a13f1c3ff", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24219d389088db7eb34f492e89643a5246ec12a5/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24219d389088db7eb34f492e89643a5246ec12a5/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=24219d389088db7eb34f492e89643a5246ec12a5", "patch": "@@ -4610,6 +4610,129 @@ fix = {\n     test_text = \"#if !defined(__VAX)\\n\";\n };\n \n+/*\n+ * On VMS, change <resource.h> to <sys/resource.h> to avoid a\n+ * conflict while building gcc.  Likewise for <builtins.h>\n+ */\n+fix = {\n+    hackname  = vms_use_quoted_include;\n+    select    = \"(#[ \\t]*include[ \\t]+)<(resource|builtins)\\\\.h>\";\n+    mach      = \"*-*-*vms*\";\n+    files     = rtldef/wait.h, starlet_c/pthread.h;\n+    c_fix     = format;\n+\n+    c_fix_arg = '%1<sys/%2.h>';\n+\n+    test_text = \"#   include <resource.h>\";\n+};\n+\n+/*\n+ * On VMS, add missing braces around sigset_t constants.\n+ */\n+fix = {\n+    hackname  = vms_add_missing_braces;\n+    select    = \"(_SIG_[A-Z]+_SET[ \\t]+= \\\\{)(0x[0F]+, 0x[0F]+)\";\n+    mach      = \"*-*-*vms*\";\n+    files     = \"rtldef/signal.h\";\n+    c_fix     = format;\n+\n+    c_fix_arg = '%1 {%2} ';\n+\n+    test_text = \"static const __sigset_t _SIG_EMPTY_SET  = \"\n+                \"{0x00000000, 0x00000000},\\n\"\n+                \" _SIG_FULL_SET   = {0xFFFFFFFF, 0xFFFFFFFF};\\n\";\n+};\n+\n+/*\n+ * On VMS, fix incompatible redeclaration of hostalias.\n+ */\n+fix = {\n+    hackname  = vms_do_not_redeclare_hostalias;\n+    select    = \"(void[ \\t]+fp_nquery \\\\(const u_char \\\\*, int, FILE \\\\*\\\\);)\\n\"\n+                \"(__char_ptr32[ \\t]+hostalias \\\\(const char \\\\*\\\\);)\";\n+    mach      = \"*-*-*vms*\";\n+    files     = \"rtldef/resolv.h\";\n+    c_fix     = format;\n+\n+    c_fix_arg = \"%1\\n\"\n+                \"/* %2 */\";\n+\n+    test_text = \"void\t\tfp_nquery (const u_char *, int, FILE *);\\n\"\n+                \"__char_ptr32\thostalias (const char *);\\n\";\n+};\n+\n+/*\n+ * On VMS, some DEC-C builtins are directly used.\n+ */\n+fix = {\n+    hackname  = vms_decc_builtin;\n+    select    = \"(__MEMSET|__MEMMOVE|__MEMCPY|__STRLEN|__STRCPY)\";\n+    mach      = \"*-*-*vms*\";\n+    files     = rtldef/string.h, rtldef/time.h, rtldef/strings.h,\n+                rtldef/socket.h;\n+    sed       = \"s@__MEMSET@memset@\";\n+    sed       = \"s@__MEMMOVE@memmove@\";\n+    sed       = \"s@__MEMCPY@memcpy@\";\n+    sed       = \"s@__STRLEN@strlen@\";\n+    sed       = \"s@__STRCPY@strcpy@\";\n+\n+    test_text = \"define FD_ZERO(__p) __MEMSET((__p), 0, sizeof(*(__p)))\\n\";\n+};\n+\n+/*\n+ * On VMS, do not declare getopt and al if pointers are 64 bit.\n+ */\n+fix = {\n+    hackname  = vms_no_64bit_getopt;\n+    select    = \"^[ \\t]*(extern[ \\t]*)?(int[ \\t]*(getopt|optind|opterr|optopt)|(char \\\\*optarg))([ \\t]*\\\\(.*\\\\))?;\\n\";\n+    /*    select    = \"^[ \\t](extern[ \\t))?(int[ \\t](getopt|optind|opterr|optopt))|(char *optarg).*;\\n\"; */\n+    mach      = \"*-*-*vms*\";\n+    files     = rtldef/stdio.h, rtldef/unistd.h;\n+    c_fix     = format;\n+\n+    c_fix_arg = \"#if __INITIAL_POINTER_SIZE != 64 /* getopt is short ptr only.  */\\n\"\n+                \"%0\"\n+                \"#endif\\n\";\n+\n+    test_text = \"int getopt (int, char * const [], const char *);\";\n+};\n+\n+/*\n+ * On VMS, forward declare structure before referencing them in prototypes.\n+ */\n+fix = {\n+    hackname  = vms_forward_declare_struct;\n+    select    = \"(/\\\\* forward decls for C\\\\+\\\\+ \\\\*/\\n)\"\n+                \"#ifdef __cplusplus\\n\";\n+    mach      = \"*-*-*vms*\";\n+    files     = rtldef/if.h;\n+    c_fix     = format;\n+\n+    c_fix_arg = \"%1\"\n+                \"#if defined (__cplusplus) || defined (__GNUC__)\\n\";\n+\n+    test_text = \"/* forward decls for C++ */\\n\"\n+                \"#ifdef __cplusplus\\n\"\n+                \"struct foo;\\n\"\n+                \"#endif\\n\";\n+};\n+\n+/*\n+ * On VMS, force the use of fast setjmp, as the normal setjmp uses conditions\n+ * which is not yet fully supported by gcc.\n+ */\n+fix = {\n+    hackname  = vms_use_fast_setjmp;\n+    select    = \"(#[ \\t]*if[ \\t]*defined\\\\(__FAST_SETJMP\\\\)[ \\t]*\\\\|\\\\|)\";\n+    mach      = \"*-*-*vms*\";\n+    files     = rtldef/setjmp.h;\n+    c_fix     = format;\n+\n+    c_fix_arg = \"%0 defined (__GNUC__) ||\";\n+\n+    test_text = \"#   if defined(__FAST_SETJMP) || defined(__UNIX_SETJMP)\";\n+};\n+\n /*\n  *  AIX and Interix headers define NULL to be cast to a void pointer,\n  *  which is illegal in ANSI C++."}, {"sha": "836ff2733d141883a4f01785b92eb48c4b9d0377", "filename": "fixincludes/tests/base/rtldef/if.h", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24219d389088db7eb34f492e89643a5246ec12a5/fixincludes%2Ftests%2Fbase%2Frtldef%2Fif.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24219d389088db7eb34f492e89643a5246ec12a5/fixincludes%2Ftests%2Fbase%2Frtldef%2Fif.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Frtldef%2Fif.h?ref=24219d389088db7eb34f492e89643a5246ec12a5", "patch": "@@ -0,0 +1,18 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/rtldef/if.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( VMS_FORWARD_DECLARE_STRUCT_CHECK )\n+/* forward decls for C++ */\n+#if defined (__cplusplus) || defined (__GNUC__)\n+struct foo;\n+#endif\n+\n+#endif  /* VMS_FORWARD_DECLARE_STRUCT_CHECK */"}, {"sha": "0b5b2483ca1eb4c178ccbaac82873b97505a43eb", "filename": "fixincludes/tests/base/rtldef/resolv.h", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24219d389088db7eb34f492e89643a5246ec12a5/fixincludes%2Ftests%2Fbase%2Frtldef%2Fresolv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24219d389088db7eb34f492e89643a5246ec12a5/fixincludes%2Ftests%2Fbase%2Frtldef%2Fresolv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Frtldef%2Fresolv.h?ref=24219d389088db7eb34f492e89643a5246ec12a5", "patch": "@@ -0,0 +1,16 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/rtldef/resolv.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( VMS_DO_NOT_REDECLARE_HOSTALIAS_CHECK )\n+void\t\tfp_nquery (const u_char *, int, FILE *);\n+/* __char_ptr32\thostalias (const char *); */\n+\n+#endif  /* VMS_DO_NOT_REDECLARE_HOSTALIAS_CHECK */"}, {"sha": "5414efc54e902a09826413094306787a3e68bf5c", "filename": "fixincludes/tests/base/rtldef/setjmp.h", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24219d389088db7eb34f492e89643a5246ec12a5/fixincludes%2Ftests%2Fbase%2Frtldef%2Fsetjmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24219d389088db7eb34f492e89643a5246ec12a5/fixincludes%2Ftests%2Fbase%2Frtldef%2Fsetjmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Frtldef%2Fsetjmp.h?ref=24219d389088db7eb34f492e89643a5246ec12a5", "patch": "@@ -0,0 +1,14 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/rtldef/setjmp.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( VMS_USE_FAST_SETJMP_CHECK )\n+#   if defined(__FAST_SETJMP) || defined (__GNUC__) || defined(__UNIX_SETJMP)\n+#endif  /* VMS_USE_FAST_SETJMP_CHECK */"}, {"sha": "3b5a2b8639d7b2daad250288a0f907867cab9ac2", "filename": "fixincludes/tests/base/rtldef/signal.h", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24219d389088db7eb34f492e89643a5246ec12a5/fixincludes%2Ftests%2Fbase%2Frtldef%2Fsignal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24219d389088db7eb34f492e89643a5246ec12a5/fixincludes%2Ftests%2Fbase%2Frtldef%2Fsignal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Frtldef%2Fsignal.h?ref=24219d389088db7eb34f492e89643a5246ec12a5", "patch": "@@ -0,0 +1,16 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/rtldef/signal.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( VMS_ADD_MISSING_BRACES_CHECK )\n+static const __sigset_t _SIG_EMPTY_SET  = { {0x00000000, 0x00000000} },\n+ _SIG_FULL_SET   = { {0xFFFFFFFF, 0xFFFFFFFF} };\n+\n+#endif  /* VMS_ADD_MISSING_BRACES_CHECK */"}, {"sha": "4835d0fe0d4383e96d0707862668bec13cb3699f", "filename": "fixincludes/tests/base/rtldef/stdio.h", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24219d389088db7eb34f492e89643a5246ec12a5/fixincludes%2Ftests%2Fbase%2Frtldef%2Fstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24219d389088db7eb34f492e89643a5246ec12a5/fixincludes%2Ftests%2Fbase%2Frtldef%2Fstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Frtldef%2Fstdio.h?ref=24219d389088db7eb34f492e89643a5246ec12a5", "patch": "@@ -0,0 +1,16 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/rtldef/stdio.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( VMS_NO_64BIT_GETOPT_CHECK )\n+#if __INITIAL_POINTER_SIZE != 64 /* getopt is short ptr only.  */\n+int getopt (int, char * const [], const char *);\n+#endif\n+#endif  /* VMS_NO_64BIT_GETOPT_CHECK */"}, {"sha": "6249b0c6732e1139bb47069419ef139c90e459f7", "filename": "fixincludes/tests/base/rtldef/string.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24219d389088db7eb34f492e89643a5246ec12a5/fixincludes%2Ftests%2Fbase%2Frtldef%2Fstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24219d389088db7eb34f492e89643a5246ec12a5/fixincludes%2Ftests%2Fbase%2Frtldef%2Fstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Frtldef%2Fstring.h?ref=24219d389088db7eb34f492e89643a5246ec12a5", "patch": "@@ -13,3 +13,9 @@\n #if !defined(__VAX) && !defined(__GNUC__)\n \n #endif  /* VMS_DISABLE_DECC_STRING_BUILTINS_CHECK */\n+\n+\n+#if defined( VMS_DECC_BUILTIN_CHECK )\n+define FD_ZERO(__p) memset((__p), 0, sizeof(*(__p)))\n+\n+#endif  /* VMS_DECC_BUILTIN_CHECK */"}, {"sha": "0587834f13a262db8032085c3cd79e3e2a5d060c", "filename": "fixincludes/tests/base/rtldef/wait.h", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24219d389088db7eb34f492e89643a5246ec12a5/fixincludes%2Ftests%2Fbase%2Frtldef%2Fwait.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24219d389088db7eb34f492e89643a5246ec12a5/fixincludes%2Ftests%2Fbase%2Frtldef%2Fwait.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Frtldef%2Fwait.h?ref=24219d389088db7eb34f492e89643a5246ec12a5", "patch": "@@ -0,0 +1,14 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/rtldef/wait.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( VMS_USE_QUOTED_INCLUDE_CHECK )\n+#   include <sys/resource.h>\n+#endif  /* VMS_USE_QUOTED_INCLUDE_CHECK */"}]}