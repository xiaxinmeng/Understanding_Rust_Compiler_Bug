{"sha": "b1dc4a20a797ed2718fb2ba3431753ce84db86b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFkYzRhMjBhNzk3ZWQyNzE4ZmIyYmEzNDMxNzUzY2U4NGRiODZiMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-11-17T18:49:10Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-11-17T18:49:10Z"}, "message": "Replace match.pd DEFINE_MATH_FNs with auto-generated lists\n\nThis patch autogenerates the operator lists for maths functions\nlike SQRT, adding an additional entry for internal functions.\nE.g.:\n\n        (define_operator_list SQRT\n            BUILT_IN_SQRTF\n            BUILT_IN_SQRT\n            BUILT_IN_SQRTL\n            IFN_SQRT)\n\nand:\n\n        (define_operator_list CABS\n            BUILT_IN_CABSF\n            BUILT_IN_CABS\n            BUILT_IN_CABSL\n            null)\n\n(since there's no internal function for CABS).\n\nTested on x86_64-linux-gnu, aarch64-linux-gnu and arm-linux-gnueabi.\n\ngcc/\n\t* Makefile.in (MOSTLYCLEANFILES): Add cfn-operators.pd.\n\t(generated_files): Likewise.\n\t(s-cfn-operators, cfn-operators.pd): New rules.\n\t(s-match): Depend on cfn-operators.pd.\n\t* gencfn-macros.c: Expand comment to describe -o behavior.\n\t(print_define_operator_list): New function.\n\t(main): Accept -o.  Call print_define_operator_list.\n\t* genmatch.c (main): Add the current directory to the include path.\n\t* match.pd (DEFINE_MATH_FN): Delete.  Include cfn-operators.pd\n\tinstead.\n\nFrom-SVN: r230486", "tree": {"sha": "f6a69b77920259ec90eb2b68484d7e14ca6135ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6a69b77920259ec90eb2b68484d7e14ca6135ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1dc4a20a797ed2718fb2ba3431753ce84db86b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1dc4a20a797ed2718fb2ba3431753ce84db86b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1dc4a20a797ed2718fb2ba3431753ce84db86b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1dc4a20a797ed2718fb2ba3431753ce84db86b2/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fa74b47a8c825cbdde6f97591befb474b739006f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa74b47a8c825cbdde6f97591befb474b739006f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa74b47a8c825cbdde6f97591befb474b739006f"}], "stats": {"total": 127, "additions": 79, "deletions": 48}, "files": [{"sha": "cc6f7959ea4f2825f35df993302cc2a9c5be7eb7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1dc4a20a797ed2718fb2ba3431753ce84db86b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1dc4a20a797ed2718fb2ba3431753ce84db86b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1dc4a20a797ed2718fb2ba3431753ce84db86b2", "patch": "@@ -1,3 +1,16 @@\n+2015-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* Makefile.in (MOSTLYCLEANFILES): Add cfn-operators.pd.\n+\t(generated_files): Likewise.\n+\t(s-cfn-operators, cfn-operators.pd): New rules.\n+\t(s-match): Depend on cfn-operators.pd.\n+\t* gencfn-macros.c: Expand comment to describe -o behavior.\n+\t(print_define_operator_list): New function.\n+\t(main): Accept -o.  Call print_define_operator_list.\n+\t* genmatch.c (main): Add the current directory to the include path.\n+\t* match.pd (DEFINE_MATH_FN): Delete.  Include cfn-operators.pd\n+\tinstead.\n+\n 2015-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* doc/match-and-simplify.texi: Document the \"null\" identifier."}, {"sha": "0fd8d99d3af1c6f9bb7ba8cb0ce6d0ab4c1a26d3", "filename": "gcc/Makefile.in", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1dc4a20a797ed2718fb2ba3431753ce84db86b2/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1dc4a20a797ed2718fb2ba3431753ce84db86b2/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=b1dc4a20a797ed2718fb2ba3431753ce84db86b2", "patch": "@@ -1570,7 +1570,7 @@ MOSTLYCLEANFILES = insn-flags.h insn-config.h insn-codes.h \\\n  tm-preds.h tm-constrs.h checksum-options gimple-match.c generic-match.c \\\n  tree-check.h min-insn-modes.c insn-modes.c insn-modes.h \\\n  genrtl.h gt-*.h gtype-*.h gtype-desc.c gtyp-input.list \\\n- case-cfn-macros.h \\\n+ case-cfn-macros.h cfn-operators.pd \\\n  xgcc$(exeext) cpp$(exeext) $(FULL_DRIVER_NAME) \\\n  $(EXTRA_PROGRAMS) gcc-cross$(exeext) \\\n  $(SPECS) collect2$(exeext) gcc-ar$(exeext) gcc-nm$(exeext) \\\n@@ -2256,6 +2256,14 @@ s-case-cfn-macros: build/gencfn-macros$(build_exeext)\n \t$(STAMP) s-case-cfn-macros\n case-cfn-macros.h: s-case-cfn-macros; @true\n \n+s-cfn-operators: build/gencfn-macros$(build_exeext)\n+\t$(RUN_GEN) build/gencfn-macros$(build_exeext) -o \\\n+\t  > tmp-cfn-operators.pd\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-cfn-operators.pd \\\n+\t  cfn-operators.pd\n+\t$(STAMP) s-cfn-operators\n+cfn-operators.pd: s-cfn-operators; @true\n+\n target-hooks-def.h: s-target-hooks-def-h; @true\n # make sure that when we build info files, the used tm.texi is up to date.\n $(srcdir)/doc/tm.texi: s-tm-texi; @true\n@@ -2322,7 +2330,7 @@ s-tm-texi: build/genhooks$(build_exeext) $(srcdir)/doc/tm.texi.in\n gimple-match.c: s-match gimple-match-head.c ; @true\n generic-match.c: s-match generic-match-head.c ; @true\n \n-s-match: build/genmatch$(build_exeext) $(srcdir)/match.pd\n+s-match: build/genmatch$(build_exeext) $(srcdir)/match.pd cfn-operators.pd\n \t$(RUN_GEN) build/genmatch$(build_exeext) --gimple $(srcdir)/match.pd \\\n \t    > tmp-gimple-match.c\n \t$(RUN_GEN) build/genmatch$(build_exeext) --generic $(srcdir)/match.pd \\\n@@ -2443,7 +2451,8 @@ generated_files = config.h tm.h $(TM_P_H) $(TM_H) multilib.h \\\n        $(ALL_GTFILES_H) gtype-desc.c gtype-desc.h gcov-iov.h \\\n        options.h target-hooks-def.h insn-opinit.h \\\n        common/common-target-hooks-def.h pass-instances.def \\\n-       c-family/c-target-hooks-def.h params.list case-cfn-macros.h\n+       c-family/c-target-hooks-def.h params.list case-cfn-macros.h \\\n+       cfn-operators.pd\n \n #\f\n # How to compile object files to run on the build machine."}, {"sha": "401c429606c08c2ac88feb15c137e387edd451de", "filename": "gcc/gencfn-macros.c", "status": "modified", "additions": 46, "deletions": 4, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1dc4a20a797ed2718fb2ba3431753ce84db86b2/gcc%2Fgencfn-macros.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1dc4a20a797ed2718fb2ba3431753ce84db86b2/gcc%2Fgencfn-macros.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencfn-macros.c?ref=b1dc4a20a797ed2718fb2ba3431753ce84db86b2", "patch": "@@ -40,7 +40,27 @@ along with GCC; see the file COPYING3.  If not see\n       case CFN_BUILT_IN_SQRTL:\n       case CFN_SQRT:\n \n-   The macros for groups with no internal function drop the last line.  */\n+   The macros for groups with no internal function drop the last line.\n+\n+   When run with -o, the generator prints a similar list of\n+   define_operator_list directives, for use by match.pd.  Each operator\n+   list starts with the built-in functions, in order of ascending type width.\n+   This is followed by an entry for the internal function, or \"null\" if there\n+   is no internal function for the group.  For example:\n+\n+     (define_operator_list SQRT\n+\t BUILT_IN_SQRTF\n+\t BUILT_IN_SQRT\n+\t BUILT_IN_SQRTL\n+\t IFN_SQRT)\n+\n+   and:\n+\n+     (define_operator_list CABS\n+\t BUILT_IN_CABSF\n+\t BUILT_IN_CABS\n+\t BUILT_IN_CABSL\n+\t null)  */\n \n #include \"bconfig.h\"\n #include \"system.h\"\n@@ -89,6 +109,23 @@ print_case_cfn (const char *name, bool internal_p,\n   printf (\"\\n\");\n }\n \n+/* Print an operator list for all combined functions related to NAME,\n+   with the null-terminated list of suffixes in SUFFIXES.  INTERNAL_P\n+   says whether CFN_<NAME> also exists.  */\n+\n+static void\n+print_define_operator_list (const char *name, bool internal_p,\n+\t\t\t    const char *const *suffixes)\n+{\n+  printf (\"(define_operator_list %s\\n\", name);\n+  for (unsigned int i = 0; suffixes[i]; ++i)\n+    printf (\"    BUILT_IN_%s%s\\n\", name, suffixes[i]);\n+  if (internal_p)\n+    printf (\"    IFN_%s)\\n\", name);\n+  else\n+    printf (\"    null)\\n\");\n+}\n+\n const char *const builtin_names[] = {\n #define DEF_BUILTIN(ENUM, N, C, T, LT, B, F, NA, AT, IM, COND) \\\n   #ENUM,\n@@ -126,9 +163,10 @@ main (int argc, char **argv)\n   progname = argv[0];\n   if (argc != 2\n       || argv[1][0] != '-'\n-      || argv[1][1] != 'c'\n+      || !strchr (\"co\", argv[1][1])\n       || argv[1][2])\n-    fatal (\"usage: %s -c > file\", progname);\n+    fatal (\"usage: %s [-c|-o] > file\", progname);\n+  int type = argv[1][1];\n \n   /* Collect the set of built-in and internal functions.  */\n   string_set builtins;\n@@ -165,7 +203,11 @@ main (int argc, char **argv)\n \t    if (is_group (&builtins, root, suffix_lists[j]))\n \t      {\n \t\tbool internal_p = internal_fns.contains (root);\n-\t\tprint_case_cfn (root, internal_p, suffix_lists[j]);\n+\t\tif (type == 'c')\n+\t\t  print_case_cfn (root, internal_p, suffix_lists[j]);\n+\t\telse\n+\t\t  print_define_operator_list (root, internal_p,\n+\t\t\t\t\t      suffix_lists[j]);\n \t      }\n \t}\n     }"}, {"sha": "3a20a48b49774fec8b0d6250a396aefffcbea22e", "filename": "gcc/genmatch.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1dc4a20a797ed2718fb2ba3431753ce84db86b2/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1dc4a20a797ed2718fb2ba3431753ce84db86b2/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=b1dc4a20a797ed2718fb2ba3431753ce84db86b2", "patch": "@@ -4638,6 +4638,13 @@ main (int argc, char **argv)\n   cpp_callbacks *cb = cpp_get_callbacks (r);\n   cb->error = error_cb;\n \n+  /* Add the build directory to the #include \"\" search path.  */\n+  cpp_dir *dir = XCNEW (cpp_dir);\n+  dir->name = getpwd ();\n+  if (!dir->name)\n+    dir->name = ASTRDUP (\".\");\n+  cpp_set_include_chains (r, dir, NULL, false);\n+\n   if (!cpp_read_main_file (r, input))\n     return 1;\n   cpp_define (r, gimple ? \"GIMPLE=1\": \"GENERIC=1\");"}, {"sha": "e86cc8b6efbde5ebb7d3a203018c0f4a22cf8f38", "filename": "gcc/match.pd", "status": "modified", "additions": 1, "deletions": 41, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1dc4a20a797ed2718fb2ba3431753ce84db86b2/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1dc4a20a797ed2718fb2ba3431753ce84db86b2/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=b1dc4a20a797ed2718fb2ba3431753ce84db86b2", "patch": "@@ -47,10 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n (define_operator_list simple_comparison         lt   le   eq ne ge   gt)\n (define_operator_list swapped_simple_comparison gt   ge   eq ne le   lt)\n \n-/* Define an operand list for math function FN, with float, double and\n-   long double variants (in that order).  */\n-#define DEFINE_MATH_FN(FN) \\\n-  (define_operator_list FN BUILT_IN_##FN##F BUILT_IN_##FN BUILT_IN_##FN##L)\n+#include \"cfn-operators.pd\"\n \n /* Define operand lists for math rounding functions {,i,l,ll}FN,\n    where the versions prefixed with \"i\" return an int, those prefixed with\n@@ -62,10 +59,6 @@ along with GCC; see the file COPYING3.  If not see\n      X<FN> for all double functions, in the same order\n      X<FN>L for all long double functions, in the same order.  */\n #define DEFINE_INT_AND_FLOAT_ROUND_FN(FN) \\\n-  DEFINE_MATH_FN (FN) \\\n-  DEFINE_MATH_FN (I##FN) \\\n-  DEFINE_MATH_FN (L##FN) \\\n-  DEFINE_MATH_FN (LL##FN) \\\n   (define_operator_list X##FN##F BUILT_IN_I##FN##F \\\n \t\t\t\t BUILT_IN_L##FN##F \\\n \t\t\t\t BUILT_IN_LL##FN##F) \\\n@@ -76,39 +69,6 @@ along with GCC; see the file COPYING3.  If not see\n \t\t\t\t BUILT_IN_L##FN##L \\\n \t\t\t\t BUILT_IN_LL##FN##L)\n \n-DEFINE_MATH_FN (LOG)\n-DEFINE_MATH_FN (EXP)\n-DEFINE_MATH_FN (LOG2)\n-DEFINE_MATH_FN (EXP2)\n-DEFINE_MATH_FN (LOG10)\n-DEFINE_MATH_FN (EXP10)\n-DEFINE_MATH_FN (POW)\n-DEFINE_MATH_FN (POW10)\n-DEFINE_MATH_FN (POWI)\n-DEFINE_MATH_FN (SQRT)\n-DEFINE_MATH_FN (CBRT)\n-DEFINE_MATH_FN (SIN)\n-DEFINE_MATH_FN (COS)\n-DEFINE_MATH_FN (TAN)\n-DEFINE_MATH_FN (ATAN)\n-DEFINE_MATH_FN (COSH)\n-DEFINE_MATH_FN (CEXP)\n-DEFINE_MATH_FN (CEXPI)\n-DEFINE_MATH_FN (CPROJ)\n-DEFINE_MATH_FN (CCOS)\n-DEFINE_MATH_FN (CCOSH)\n-DEFINE_MATH_FN (HYPOT)\n-DEFINE_MATH_FN (COPYSIGN)\n-DEFINE_MATH_FN (CABS)\n-DEFINE_MATH_FN (TRUNC)\n-DEFINE_MATH_FN (NEARBYINT)\n-DEFINE_MATH_FN (SIGNBIT)\n-DEFINE_MATH_FN (FMIN)\n-DEFINE_MATH_FN (FMAX)\n-DEFINE_MATH_FN (LDEXP)\n-DEFINE_MATH_FN (SCALBN)\n-DEFINE_MATH_FN (SCALBLN)\n-\n DEFINE_INT_AND_FLOAT_ROUND_FN (FLOOR)\n DEFINE_INT_AND_FLOAT_ROUND_FN (CEIL)\n DEFINE_INT_AND_FLOAT_ROUND_FN (ROUND)"}]}