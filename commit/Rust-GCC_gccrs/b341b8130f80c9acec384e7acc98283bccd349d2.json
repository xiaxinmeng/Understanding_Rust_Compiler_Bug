{"sha": "b341b8130f80c9acec384e7acc98283bccd349d2", "node_id": "C_kwDOANBUbNoAKGIzNDFiODEzMGY4MGM5YWNlYzM4NGU3YWNjOTgyODNiY2NkMzQ5ZDI", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2022-04-26T13:21:00Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-30T08:29:03Z"}, "message": "[Ada] Deconstruct deferred references\n\nWhile cleaning up and modifying code for unreferenced warnings we\nremoved all calls to Defer_Reference, which was the only routine that\npopulated the Deferred_References table. Consequently, all the code\nrelated to this table became dead.\n\ngcc/ada/\n\n\t* lib-xref.ads (Deferred_Reference_Entry, Defer_Reference,\n\tProcess_Deferred_References, Has_Deferred_Reference): Remove\n\tclient API.\n\t* lib-xref.adb (Deferred_References, Defer_Reference,\n\tHas_Deferred_Reference, Process_Deferred_References): Remove\n\timplementation.\n\t* frontend.adb, sem_ch11.adb, sem_ch5.adb, sem_res.adb,\n\tsem_util.adb, sem_warn.adb: Remove uses of Deferred_References.", "tree": {"sha": "877fa8247a83be3f169c3d130028151e802b1598", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/877fa8247a83be3f169c3d130028151e802b1598"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b341b8130f80c9acec384e7acc98283bccd349d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b341b8130f80c9acec384e7acc98283bccd349d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b341b8130f80c9acec384e7acc98283bccd349d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b341b8130f80c9acec384e7acc98283bccd349d2/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a91be29578fa466376cd482d3abed5eb20685b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a91be29578fa466376cd482d3abed5eb20685b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a91be29578fa466376cd482d3abed5eb20685b4"}], "stats": {"total": 142, "additions": 4, "deletions": 138}, "files": [{"sha": "12c91b11d9a76dcc0e9d5337932213b54b06cacf", "filename": "gcc/ada/frontend.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b341b8130f80c9acec384e7acc98283bccd349d2/gcc%2Fada%2Ffrontend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b341b8130f80c9acec384e7acc98283bccd349d2/gcc%2Fada%2Ffrontend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffrontend.adb?ref=b341b8130f80c9acec384e7acc98283bccd349d2", "patch": "@@ -38,7 +38,6 @@ with Ghost;          use Ghost;\n with Inline;         use Inline;\n with Lib;            use Lib;\n with Lib.Load;       use Lib.Load;\n-with Lib.Xref;\n with Live;           use Live;\n with Namet;          use Namet;\n with Nlists;         use Nlists;\n@@ -481,7 +480,6 @@ begin\n \n             --  Output waiting warning messages\n \n-            Lib.Xref.Process_Deferred_References;\n             Sem_Warn.Output_Non_Modified_In_Out_Warnings;\n             Sem_Warn.Output_Unreferenced_Messages;\n             Sem_Warn.Check_Unused_Withs;"}, {"sha": "a4ff69a723f3a9775fdca95aa1d3f42ecdbd33ae", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b341b8130f80c9acec384e7acc98283bccd349d2/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b341b8130f80c9acec384e7acc98283bccd349d2/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=b341b8130f80c9acec384e7acc98283bccd349d2", "patch": "@@ -57,14 +57,6 @@ package body Lib.Xref is\n    -- Declarations --\n    ------------------\n \n-   package Deferred_References is new Table.Table (\n-     Table_Component_Type => Deferred_Reference_Entry,\n-     Table_Index_Type     => Int,\n-     Table_Low_Bound      => 0,\n-     Table_Initial        => 512,\n-     Table_Increment      => 200,\n-     Table_Name           => \"Name_Deferred_References\");\n-\n    --  The Xref table is used to record references. The Loc field is set\n    --  to No_Location for a definition entry.\n \n@@ -211,21 +203,6 @@ package body Lib.Xref is\n       end if;\n    end Add_Entry;\n \n-   ---------------------\n-   -- Defer_Reference --\n-   ---------------------\n-\n-   procedure Defer_Reference (Deferred_Reference : Deferred_Reference_Entry) is\n-   begin\n-      --  If Get_Ignore_Errors, then we are in Preanalyze_Without_Errors, and\n-      --  we should not record cross references, because that will cause\n-      --  duplicates when we call Analyze.\n-\n-      if not Get_Ignore_Errors then\n-         Deferred_References.Append (Deferred_Reference);\n-      end if;\n-   end Defer_Reference;\n-\n    -----------\n    -- Equal --\n    -----------\n@@ -1291,21 +1268,6 @@ package body Lib.Xref is\n       return E;\n    end Get_Key;\n \n-   ----------------------------\n-   -- Has_Deferred_Reference --\n-   ----------------------------\n-\n-   function Has_Deferred_Reference (Ent : Entity_Id) return Boolean is\n-   begin\n-      for J in Deferred_References.First .. Deferred_References.Last loop\n-         if Deferred_References.Table (J).E = Ent then\n-            return True;\n-         end if;\n-      end loop;\n-\n-      return False;\n-   end Has_Deferred_Reference;\n-\n    ----------\n    -- Hash --\n    ----------\n@@ -2753,33 +2715,6 @@ package body Lib.Xref is\n       end Output_Refs;\n    end Output_References;\n \n-   ---------------------------------\n-   -- Process_Deferred_References --\n-   ---------------------------------\n-\n-   procedure Process_Deferred_References is\n-   begin\n-      for J in Deferred_References.First .. Deferred_References.Last loop\n-         declare\n-            D : Deferred_Reference_Entry renames Deferred_References.Table (J);\n-\n-         begin\n-            case Known_To_Be_Assigned (D.N) is\n-               when True =>\n-                  Generate_Reference (D.E, D.N, 'm');\n-\n-               when False =>\n-                  Generate_Reference (D.E, D.N, 'r');\n-\n-            end case;\n-         end;\n-      end loop;\n-\n-      --  Clear processed entries from table\n-\n-      Deferred_References.Init;\n-   end Process_Deferred_References;\n-\n --  Start of elaboration for Lib.Xref\n \n begin"}, {"sha": "977446ad0e4e1f59af37c35cb387fb862604c6ca", "filename": "gcc/ada/lib-xref.ads", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b341b8130f80c9acec384e7acc98283bccd349d2/gcc%2Fada%2Flib-xref.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b341b8130f80c9acec384e7acc98283bccd349d2/gcc%2Fada%2Flib-xref.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.ads?ref=b341b8130f80c9acec384e7acc98283bccd349d2", "patch": "@@ -578,40 +578,6 @@ package Lib.Xref is\n    --  Export at line 4, that its body is exported to C, and that the link name\n    --  as given in the pragma is \"here\".\n \n-   -------------------------\n-   -- Deferred_References --\n-   -------------------------\n-\n-   --  Normally we generate references as we go along, but as discussed in\n-   --  Sem_Util.Is_LHS, and Sem_Ch8.Find_Direct_Name/Find_Selected_Component,\n-   --  we have one case where that is tricky, which is when we have something\n-   --  like X.A := 3, where we don't know until we know the type of X whether\n-   --  this is a reference (if X is an access type, so what we really have is\n-   --  X.all.A := 3) or a modification, where X is not an access type.\n-\n-   --  What we do in such cases is to gather nodes, where we would have liked\n-   --  to call Generate_Reference but we couldn't because we didn't know enough\n-   --  into a table, then we deal with generating references later on when we\n-   --  have sufficient information to do it right.\n-\n-   type Deferred_Reference_Entry is record\n-      E : Entity_Id;\n-      N : Node_Id;\n-   end record;\n-   --  One entry, E, N are as required for Generate_Reference call\n-\n-   procedure Defer_Reference (Deferred_Reference : Deferred_Reference_Entry);\n-   --  Add one entry to the deferred reference table\n-\n-   procedure Process_Deferred_References;\n-   --  This procedure is called from Frontend to process these table entries.\n-   --  It is also called from Sem_Warn.\n-\n-   function Has_Deferred_Reference (Ent : Entity_Id) return Boolean;\n-   --  Determine whether arbitrary entity Ent has a pending reference in order\n-   --  to suppress premature warnings about useless assignments. See comments\n-   --  in Analyze_Assignment in sem_ch5.adb.\n-\n    -----------------------------\n    -- SPARK Xrefs Information --\n    -----------------------------"}, {"sha": "a15fd09f6c7bb35c0a94276138498db00725f83b", "filename": "gcc/ada/sem_ch11.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b341b8130f80c9acec384e7acc98283bccd349d2/gcc%2Fada%2Fsem_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b341b8130f80c9acec384e7acc98283bccd349d2/gcc%2Fada%2Fsem_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch11.adb?ref=b341b8130f80c9acec384e7acc98283bccd349d2", "patch": "@@ -432,8 +432,7 @@ package body Sem_Ch11 is\n       --  If the current scope is a subprogram, entry or task body or declare\n       --  block then this is the right place to check for hanging useless\n       --  assignments from the statement sequence. Skip this in the body of a\n-      --  postcondition, since in that case there are no source references, and\n-      --  we need to preserve deferred references from the enclosing scope.\n+      --  postcondition, since in that case there are no source references.\n \n       if (Is_Subprogram_Or_Entry (Current_Scope)\n            and then Chars (Current_Scope) /= Name_uPostconditions)"}, {"sha": "66315ad385e420c48fc6a019e4a76449fc49bc98", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b341b8130f80c9acec384e7acc98283bccd349d2/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b341b8130f80c9acec384e7acc98283bccd349d2/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=b341b8130f80c9acec384e7acc98283bccd349d2", "patch": "@@ -1207,21 +1207,12 @@ package body Sem_Ch5 is\n                --  There may have been a previous reference to a component of\n                --  the variable, which in general removes the Last_Assignment\n                --  field of the variable to indicate a relevant use of the\n-               --  previous assignment. However, if the assignment is to a\n-               --  subcomponent the reference may not have registered, because\n-               --  it is not possible to determine whether the context is an\n-               --  assignment. In those cases we generate a Deferred_Reference,\n-               --  to be used at the end of compilation to generate the right\n-               --  kind of reference, and we suppress a potential warning for\n-               --  a useless assignment, which might be premature. This may\n-               --  lose a warning in rare cases, but seems preferable to a\n-               --  misleading warning.\n+               --  previous assignment.\n \n                if Warn_On_Modified_Unread\n                  and then Is_Assignable (Ent)\n                  and then Comes_From_Source (N)\n                  and then In_Extended_Main_Source_Unit (Ent)\n-                 and then not Has_Deferred_Reference (Ent)\n                  and then not Has_Target_Names (N)\n                then\n                   Warn_On_Useless_Assignment (Ent, N);"}, {"sha": "4ffb64c5ec718b98788dd05e0f2ccc2374b9c362", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b341b8130f80c9acec384e7acc98283bccd349d2/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b341b8130f80c9acec384e7acc98283bccd349d2/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=b341b8130f80c9acec384e7acc98283bccd349d2", "patch": "@@ -11211,22 +11211,6 @@ package body Sem_Res is\n \n       else\n          T := Etype (P);\n-\n-         --  If the prefix is an entity it may have a deferred reference set\n-         --  during analysis of the selected component. After resolution we\n-         --  can transform it into a proper reference. This prevents spurious\n-         --  warnings on useless assignments when the same selected component\n-         --  is the actual for an out parameter in a subsequent call.\n-\n-         if Is_Entity_Name (P)\n-           and then Has_Deferred_Reference (Entity (P))\n-         then\n-            if Known_To_Be_Assigned (N) then\n-               Generate_Reference (Entity (P), P, 'm');\n-            else\n-               Generate_Reference (Entity (P), P, 'r');\n-            end if;\n-         end if;\n       end if;\n \n       --  Set flag for expander if discriminant check required on a component"}, {"sha": "1d527bc02e69ec623c3caae6fffeeb2d88ea83e9", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b341b8130f80c9acec384e7acc98283bccd349d2/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b341b8130f80c9acec384e7acc98283bccd349d2/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=b341b8130f80c9acec384e7acc98283bccd349d2", "patch": "@@ -9309,8 +9309,8 @@ package body Sem_Util is\n                   return;\n \n                --  An actual that is the prefix in a prefixed call may have\n-               --  been rewritten in the call, after the deferred reference\n-               --  was collected. Check if sloc and kinds and names match.\n+               --  been rewritten in the call. Check if sloc and kinds and\n+               --  names match.\n \n                elsif Sloc (Actual) = Sloc (N)\n                  and then Nkind (Actual) = N_Identifier"}, {"sha": "1bc248ce00e0a82197ac2fbd2d48596b34987098", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b341b8130f80c9acec384e7acc98283bccd349d2/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b341b8130f80c9acec384e7acc98283bccd349d2/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=b341b8130f80c9acec384e7acc98283bccd349d2", "patch": "@@ -31,7 +31,6 @@ with Einfo.Utils;    use Einfo.Utils;\n with Errout;         use Errout;\n with Exp_Code;       use Exp_Code;\n with Lib;            use Lib;\n-with Lib.Xref;       use Lib.Xref;\n with Namet;          use Namet;\n with Nlists;         use Nlists;\n with Opt;            use Opt;\n@@ -1132,8 +1131,6 @@ package body Sem_Warn is\n    --  Start of processing for Check_References\n \n    begin\n-      Process_Deferred_References;\n-\n       --  No messages if warnings are suppressed, or if we have detected any\n       --  real errors so far (this last check avoids junk messages resulting\n       --  from errors, e.g. a subunit that is not loaded).\n@@ -2762,8 +2759,6 @@ package body Sem_Warn is\n          return;\n       end if;\n \n-      Process_Deferred_References;\n-\n       --  Flag any unused with clauses. For a subunit, check only the units\n       --  in its context, not those of the parent, which may be needed by other\n       --  subunits. We will get the full warnings when we compile the parent,\n@@ -4703,8 +4698,6 @@ package body Sem_Warn is\n       Ent : Entity_Id;\n \n    begin\n-      Process_Deferred_References;\n-\n       if Warn_On_Modified_Unread\n         and then In_Extended_Main_Source_Unit (E)\n       then"}]}