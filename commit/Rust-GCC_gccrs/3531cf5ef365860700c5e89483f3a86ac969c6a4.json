{"sha": "3531cf5ef365860700c5e89483f3a86ac969c6a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUzMWNmNWVmMzY1ODYwNzAwYzVlODk0ODNmM2E4NmFjOTY5YzZhNA==", "commit": {"author": {"name": "David Krauss", "email": "potswa@mac.com", "date": "2010-09-22T19:40:43Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-09-22T19:40:43Z"}, "message": "re PR libstdc++/45628 (std::fstream::tellg invalidates I/O buffer)\n\n2010-09-22  David Krauss  <potswa@mac.com>\n\n\tPR libstdc++/45628\n\t* include/bits/fstream.tcc (basic_filebuf::underflow): Add state\n\ttransition to avoid modality requiring seekoff(0,ios::cur).\n\t(basic_filebuf::pbackfail): Likewise.\n\t(basic_filebuf::overflow): Likewise.\n\t(basic_filebuf::_M_seek): Avoid minor unnecessary conversion.\n\t(basic_filebuf::seekoff): Remove code to _M_get_ext_pos; make\n\t(0, ios::cur) a special case preserving buffer contents.\n\t(basic_filebuf::_M_get_ext_pos): New function to obtain status\n\tabout codecvt extern_t buffer for overflow and seekoff.\n\t* include/std/fstream (basic_filebuf::_M_get_ext_pos): Likewise.\n\t* config/abi/pre/gnu.ver: Export new symbols.\n\t* testsuite/27_io/basic_filebuf/seekoff/char/45628-1.cc: New,\n\tverifies that seekoff(0, ios::cur) preserves buffers.\n\t* testsuite/27_io/basic_filebuf/seekoff/char/45628-2.cc: Likewise.\n\tfor codecvt case. More lenient as it may still flush put area.\n\t* testsuite/27_io/basic_filebuf/seekoff/char/4.cc: Modify to\n\tcheck that seekoff is not required between read and write.\n\t* testsuite/27_io/basic_filebuf/seekoff/wchar_t/4.cc: Likewise.\n\t* testsuite/27_io/basic_filebuf/sync/wchar_t/1.cc: Remove.\n\t* testsuite/27_io/basic_filebuf/sync/wchar_t/1.cc: Likewise.\n\t* testsuite/util/testsuite_character.h (codecvt::do_length): Comply\n\twith 22.2.1.5.2/10 \"Returns ... the LARGEST value in the range...\"\n\nFrom-SVN: r164529", "tree": {"sha": "a04325d2591098556af14addef9debb056684968", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a04325d2591098556af14addef9debb056684968"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3531cf5ef365860700c5e89483f3a86ac969c6a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3531cf5ef365860700c5e89483f3a86ac969c6a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3531cf5ef365860700c5e89483f3a86ac969c6a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3531cf5ef365860700c5e89483f3a86ac969c6a4/comments", "author": null, "committer": null, "parents": [{"sha": "5d64ee190c8875dec5f15c0287a425a1e62041a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d64ee190c8875dec5f15c0287a425a1e62041a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d64ee190c8875dec5f15c0287a425a1e62041a9"}], "stats": {"total": 470, "additions": 329, "deletions": 141}, "files": [{"sha": "551b23f0f03c409b27ecb9222cc2a25deffcc736", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3531cf5ef365860700c5e89483f3a86ac969c6a4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3531cf5ef365860700c5e89483f3a86ac969c6a4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3531cf5ef365860700c5e89483f3a86ac969c6a4", "patch": "@@ -1,3 +1,29 @@\n+2010-09-22  David Krauss  <potswa@mac.com>\n+\n+\tPR libstdc++/45628\n+\t* include/bits/fstream.tcc (basic_filebuf::underflow): Add state\n+\ttransition to avoid modality requiring seekoff(0,ios::cur).\n+\t(basic_filebuf::pbackfail): Likewise.\n+\t(basic_filebuf::overflow): Likewise.\n+\t(basic_filebuf::_M_seek): Avoid minor unnecessary conversion.\n+\t(basic_filebuf::seekoff): Remove code to _M_get_ext_pos; make\n+\t(0, ios::cur) a special case preserving buffer contents.\n+\t(basic_filebuf::_M_get_ext_pos): New function to obtain status\n+\tabout codecvt extern_t buffer for overflow and seekoff.\n+\t* include/std/fstream (basic_filebuf::_M_get_ext_pos): Likewise.\n+\t* config/abi/pre/gnu.ver: Export new symbols.\n+\t* testsuite/27_io/basic_filebuf/seekoff/char/45628-1.cc: New,\n+\tverifies that seekoff(0, ios::cur) preserves buffers.\n+\t* testsuite/27_io/basic_filebuf/seekoff/char/45628-2.cc: Likewise.\n+\tfor codecvt case. More lenient as it may still flush put area.\n+\t* testsuite/27_io/basic_filebuf/seekoff/char/4.cc: Modify to\n+\tcheck that seekoff is not required between read and write.\n+\t* testsuite/27_io/basic_filebuf/seekoff/wchar_t/4.cc: Likewise.\n+\t* testsuite/27_io/basic_filebuf/sync/wchar_t/1.cc: Remove.\n+\t* testsuite/27_io/basic_filebuf/sync/wchar_t/1.cc: Likewise.\n+\t* testsuite/util/testsuite_character.h (codecvt::do_length): Comply\n+\twith 22.2.1.5.2/10 \"Returns ... the LARGEST value in the range...\"\n+\n 2010-09-22  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/functional_hash.h (__hash_base): Add."}, {"sha": "4981ca9074086df3950e8c9c7156934e6100885c", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3531cf5ef365860700c5e89483f3a86ac969c6a4/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3531cf5ef365860700c5e89483f3a86ac969c6a4/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=3531cf5ef365860700c5e89483f3a86ac969c6a4", "patch": "@@ -332,7 +332,13 @@ GLIBCXX_3.4 {\n     # std::basic_filebuf\n     _ZNSt13basic_filebufI[cw]St11char_traitsI[cw]EEC*;\n     _ZNSt13basic_filebufI[cw]St11char_traitsI[cw]EED*;\n-    _ZNSt13basic_filebufI[cw]St11char_traitsI[cw]EE[0-3]*;\n+    _ZNSt13basic_filebufI[cw]St11char_traitsI[cw]EE0*;\n+    _ZNSt13basic_filebufI[cw]St11char_traitsI[cw]EE13*;\n+    _ZNSt13basic_filebufI[cw]St11char_traitsI[cw]EE15*;\n+    _ZNSt13basic_filebufI[cw]St11char_traitsI[cw]EE16*;\n+    _ZNSt13basic_filebufI[cw]St11char_traitsI[cw]EE19*;\n+    _ZNSt13basic_filebufI[cw]St11char_traitsI[cw]EE2*;\n+    _ZNSt13basic_filebufI[cw]St11char_traitsI[cw]EE3*;\n     _ZNSt13basic_filebufI[cw]St11char_traitsI[cw]EE4openEPKc*;\n     _ZNSt13basic_filebufI[cw]St11char_traitsI[cw]EE4sync*;\n     _ZNSt13basic_filebufI[cw]St11char_traitsI[cw]EE[5-9]*;\n@@ -1178,6 +1184,9 @@ GLIBCXX_3.4.15 {\n     _ZNSbIwSt11char_traitsIwESaIwEE4backEv;\n     _ZNKSbIwSt11char_traitsIwESaIwEE4backEv;\n \n+    # basic_filebuf::_M_get_ext_pos\n+    _ZNSt13basic_filebufI[cw]St11char_traitsI[cw]EE14_M_get_ext_pos*;\n+\n } GLIBCXX_3.4.14;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "2f661ebd23e99c379b6a57041002f1050c9d23f0", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 76, "deletions": 24, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3531cf5ef365860700c5e89483f3a86ac969c6a4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3531cf5ef365860700c5e89483f3a86ac969c6a4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=3531cf5ef365860700c5e89483f3a86ac969c6a4", "patch": "@@ -1,7 +1,7 @@\n // File based streams -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,\n-// 2007, 2008, 2009\n+// 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -205,8 +205,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       int_type __ret = traits_type::eof();\n       const bool __testin = _M_mode & ios_base::in;\n-      if (__testin && !_M_writing)\n+      if (__testin)\n \t{\n+         if (_M_writing)\n+           {\n+             __ret = overflow();\n+             if (__ret == traits_type::eof())\n+               return __ret;\n+             _M_set_buffer(-1);\n+             _M_writing = false;\n+           }\n \t  // Check for pback madness, and if so switch back to the\n \t  // normal buffers and jet outta here before expensive\n \t  // fileops happen...\n@@ -357,8 +365,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       int_type __ret = traits_type::eof();\n       const bool __testin = _M_mode & ios_base::in;\n-      if (__testin && !_M_writing)\n+      if (__testin)\n \t{\n+         if (_M_writing)\n+           {\n+             __ret = overflow();\n+             if (__ret == traits_type::eof())\n+               return __ret;\n+             _M_set_buffer(-1);\n+             _M_writing = false;\n+           }\n \t  // Remember whether the pback buffer is active, otherwise below\n \t  // we may try to store in it a second char (libstdc++/9761).\n \t  const bool __testpb = _M_pback_init;\n@@ -410,8 +426,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       int_type __ret = traits_type::eof();\n       const bool __testeof = traits_type::eq_int_type(__c, __ret);\n       const bool __testout = _M_mode & ios_base::out;\n-      if (__testout && !_M_reading)\n+      if (__testout)\n \t{\n+          if (_M_reading)\n+            {\n+              _M_destroy_pback();\n+              const int __gptr_off = _M_get_ext_pos(_M_state_last);\n+              if (_M_seek(__gptr_off, ios_base::cur, _M_state_last)\n+                  == pos_type(off_type(-1)))\n+                return __ret;\n+            }\n \t  if (this->pbase() < this->pptr())\n \t    {\n \t      // If appropriate, append the overflow char.\n@@ -691,12 +715,20 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       if (__width < 0)\n \t__width = 0;\n \n-      pos_type __ret =  pos_type(off_type(-1));\n+      pos_type __ret = pos_type(off_type(-1));\n       const bool __testfail = __off != 0 && __width <= 0;\n       if (this->is_open() && !__testfail)\n \t{\n+\t  // tellg and tellp queries do not affect any state, unless\n+\t  // ! always_noconv and the put sequence is not empty.\n+\t  // In that case, determining the position requires converting the\n+\t  // put sequence. That doesn't use ext_buf, so requires a flush.\n+\t  bool __no_movement = __way == ios_base::cur && __off == 0\n+\t    && (!_M_writing || _M_codecvt->always_noconv());\n+\n \t  // Ditch any pback buffers to avoid confusion.\n-\t  _M_destroy_pback();\n+\t  if (!__no_movement)\n+\t    _M_destroy_pback();\n \n \t  // Correct state at destination. Note that this is the correct\n \t  // state for the current position during output, because\n@@ -707,24 +739,23 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  off_type __computed_off = __off * __width;\n \t  if (_M_reading && __way == ios_base::cur)\n \t    {\n-\t      if (_M_codecvt->always_noconv())\n-\t\t__computed_off += this->gptr() - this->egptr();\n-\t      else\n+\t      __state = _M_state_last;\n+\t      __computed_off += _M_get_ext_pos(__state);\n+\t    }\n+\t  if (!__no_movement)\n+\t    __ret = _M_seek(__computed_off, __way, __state);\n+\t  else\n+\t    {\n+\t      if (_M_writing)\n+\t\t__computed_off = this->pptr() - this->pbase();\n+\t      \n+ \t      off_type __file_off = _M_file.seekoff(0, ios_base::cur);\n+ \t      if (__file_off != off_type(-1))\n \t\t{\n-\t\t  // Calculate offset from _M_ext_buf that corresponds\n-\t\t  // to gptr(). Note: uses _M_state_last, which\n-\t\t  // corresponds to eback().\n-\t\t  const int __gptr_off =\n-\t\t    _M_codecvt->length(_M_state_last, _M_ext_buf, _M_ext_next,\n-\t\t\t\t       this->gptr() - this->eback());\n-\t\t  __computed_off += _M_ext_buf + __gptr_off - _M_ext_end;\n-\n-\t\t  // _M_state_last is modified by codecvt::length() so\n-\t\t  // it now corresponds to gptr().\n-\t\t  __state = _M_state_last;\n+\t\t  __ret = __file_off + __computed_off;\n+\t\t  __ret.state(__state);\n \t\t}\n \t    }\n-\t  __ret = _M_seek(__computed_off, __way, __state);\n \t}\n       return __ret;\n     }\n@@ -756,21 +787,42 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       pos_type __ret = pos_type(off_type(-1));\n       if (_M_terminate_output())\n \t{\n-\t  // Returns pos_type(off_type(-1)) in case of failure.\n-\t  __ret = pos_type(_M_file.seekoff(__off, __way));\n-\t  if (__ret != pos_type(off_type(-1)))\n+\t  off_type __file_off = _M_file.seekoff(__off, __way);\n+\t  if (__file_off != off_type(-1))\n \t    {\n \t      _M_reading = false;\n \t      _M_writing = false;\n \t      _M_ext_next = _M_ext_end = _M_ext_buf;\n \t      _M_set_buffer(-1);\n \t      _M_state_cur = __state;\n+\t      __ret = __file_off;\n \t      __ret.state(_M_state_cur);\n \t    }\n \t}\n       return __ret;\n     }\n \n+  // Returns the distance from the end of the ext buffer to the point\n+  // corresponding to gptr(). This is a negative value. Updates __state\n+  // from eback() correspondence to gptr().\n+  template<typename _CharT, typename _Traits>\n+    int basic_filebuf<_CharT, _Traits>::\n+    _M_get_ext_pos(__state_type& __state)\n+    {\n+      if (_M_codecvt->always_noconv())\n+        return this->gptr() - this->egptr();\n+      else\n+        {\n+          // Calculate offset from _M_ext_buf that corresponds to\n+          // gptr(). Precondition: __state == _M_state_last, which\n+          // corresponds to eback().\n+          const int __gptr_off =\n+            _M_codecvt->length(__state, _M_ext_buf, _M_ext_next,\n+                               this->gptr() - this->eback());\n+          return _M_ext_buf + __gptr_off - _M_ext_end;\n+        }\n+    }\n+    \n   template<typename _CharT, typename _Traits>\n     bool\n     basic_filebuf<_CharT, _Traits>::"}, {"sha": "0ffd33d31862e666daffe72b17f78aae3a13595e", "filename": "libstdc++-v3/include/std/fstream", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3531cf5ef365860700c5e89483f3a86ac969c6a4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3531cf5ef365860700c5e89483f3a86ac969c6a4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream?ref=3531cf5ef365860700c5e89483f3a86ac969c6a4", "patch": "@@ -351,9 +351,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       seekpos(pos_type __pos,\n \t      ios_base::openmode __mode = ios_base::in | ios_base::out);\n \n-      // Common code for seekoff and seekpos\n+      // Common code for seekoff, seekpos, and overflow\n       pos_type\n       _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state);\n+      \n+      int\n+      _M_get_ext_pos(__state_type &__state);\n \n       virtual int\n       sync();"}, {"sha": "6e40a89aa6035d676774823dab312692ba11da04", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/45628-2.cc", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3531cf5ef365860700c5e89483f3a86ac969c6a4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F45628-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3531cf5ef365860700c5e89483f3a86ac969c6a4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F45628-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F45628-2.cc?ref=3531cf5ef365860700c5e89483f3a86ac969c6a4", "patch": "@@ -0,0 +1,103 @@\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-require-fileio \"\" }\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n+\n+const char name_01[] = \"tmp_seekoff_45628.tst\";\n+\n+unsigned underflows, overflows;\n+\n+class my_filebuf\n+: public std::basic_filebuf<__gnu_test::pod_uchar>\n+{\n+  virtual int_type\n+  underflow()\n+  {\n+    ++underflows;\n+    return std::basic_filebuf<__gnu_test::pod_uchar>::underflow();\n+  }\n+  virtual int_type\n+  overflow(int_type c)\n+  {\n+    ++overflows;\n+    return std::basic_filebuf<__gnu_test::pod_uchar>::overflow(c);\n+  }\n+};\n+\n+// libstdc++/45628\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  using __gnu_test::pod_uchar;\n+  std::locale loc(std::locale::classic(),\n+\t     new std::codecvt<my_filebuf::traits_type::char_type, char,\n+\t     my_filebuf::traits_type::state_type>);\n+\n+  my_filebuf::pos_type opos[3], ipos[3];\n+  my_filebuf q;\n+  q.pubimbue(loc);\n+   \n+  q.open(name_01, std::ios_base::in | std::ios_base::out \n+\t | std::ios_base::trunc); \n+\n+  q.sputc(pod_uchar::from<char>('a'));\n+  opos[0] = q.pubseekoff(0, std::ios_base::cur);\n+  q.sputc(pod_uchar::from<char>('b'));\n+  opos[1] = q.pubseekoff(0, std::ios_base::cur);\n+  q.sputc(pod_uchar::from<char>('c'));\n+  opos[2] = q.pubseekoff(0, std::ios_base::cur);\n+\n+  VERIFY( overflows <= 9 ); // pubseekoff calls overflow twice if converting.\n+  // NB: checking opos==ipos is not very rigorous as long as it flushes, since\n+  // all positions will be at initial state.\n+  q.pubseekoff(0, std::ios_base::beg);\n+\n+  q.sbumpc();\n+  VERIFY( underflows == 1 );\n+\n+  ipos[0] = q.pubseekoff(0, std::ios_base::cur);\n+  VERIFY( ipos[0] == opos[0] );\n+  q.sbumpc();\n+  ipos[1] = q.pubseekoff(0, std::ios_base::cur);\n+  VERIFY( ipos[1] == opos[1] );\n+  q.sbumpc();\n+  ipos[2] = q.pubseekoff(0, std::ios_base::cur);\n+  VERIFY( ipos[2] == opos[2] );\n+\n+  VERIFY( underflows == 1 ); // pubseekoff never flushes get area\n+  \n+  // Bonus test: check automatic mode switches.\n+  q.sputc(pod_uchar::from<char>('d'));\n+  \n+  q.pubseekpos( ipos[1] );\n+  q.sputc(pod_uchar::from<char>('e'));\n+  \n+  VERIFY( my_filebuf::traits_type::eq(\n+\t\t\tmy_filebuf::traits_type::to_char_type(q.sgetc()),\n+\t\t\tpod_uchar::from<char>('d')) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "fe21b3a88e2af07008a5dcd1a15a0add118fe9eb", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/char/4.cc", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3531cf5ef365860700c5e89483f3a86ac969c6a4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3531cf5ef365860700c5e89483f3a86ac969c6a4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F4.cc?ref=3531cf5ef365860700c5e89483f3a86ac969c6a4", "patch": "@@ -31,7 +31,7 @@ void test01()\n   typedef filebuf::pos_type pos_type;\n   const char name[] = \"tmp_seekoff-4.tst\";\n \n-  const size_t size = 10;\n+  const size_t size = 12;\n   char buf[size];\n   streamsize n;\n \n@@ -46,7 +46,7 @@ void test01()\n   VERIFY( n == 3 );\n   VERIFY( !memcmp(buf, \"abc\", 3) );\n \n-  fb.pubseekoff(0, ios_base::cur);\n+  // Check read => write without pubseekoff(0, ios_base::cur)\n \n   n = fb.sputn(\"ef\", 2);\n   VERIFY( n == 2 );\n@@ -58,9 +58,17 @@ void test01()\n   VERIFY( !memcmp(buf, \"abcef\", 5) );\n \n   fb.pubseekoff(0, ios_base::beg);\n-  n = fb.sputn(\"ghijkl\", 6);\n-  VERIFY( n == 6 );\n+  n = fb.sputn(\"gh\", 2);\n+  VERIFY( n == 2 );\n+  \n+  // Check write => read without pubseekoff(0, ios_base::cur)\n+\n+  n = fb.sgetn( buf, 3 );\n+  VERIFY( !memcmp(buf, \"cef\", 3) );\n \n+  n = fb.sputn(\"ijkl\", 4);\n+  VERIFY( n == 4 );\n+  \n   fb.pubseekoff(0, ios_base::beg);\n   n = fb.sgetn(buf, 2);\n   VERIFY( n == 2 );\n@@ -72,8 +80,8 @@ void test01()\n \n   fb.pubseekoff(0, ios_base::beg);\n   n = fb.sgetn(buf, size);\n-  VERIFY( n == 9 );\n-  VERIFY( !memcmp(buf, \"ghijklmno\", 9) );\n+  VERIFY( n == 12 );\n+  VERIFY( !memcmp(buf, \"ghcefijklmno\", 12) );\n \n   fb.close();\n }"}, {"sha": "a80a338765695a3bc46f872e455e05f35c139fc3", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/char/45628-1.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3531cf5ef365860700c5e89483f3a86ac969c6a4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F45628-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3531cf5ef365860700c5e89483f3a86ac969c6a4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F45628-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F45628-1.cc?ref=3531cf5ef365860700c5e89483f3a86ac969c6a4", "patch": "@@ -0,0 +1,79 @@\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-require-fileio \"\" }\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+const char name_01[] = \"tmp_seekoff_45628.tst\";\n+\n+unsigned underflows, overflows;\n+\n+class my_filebuf\n+: public std::filebuf\n+{\n+  virtual int_type\n+  underflow()\n+  {\n+    ++underflows;\n+    return std::filebuf::underflow();\n+  }\n+  virtual int_type\n+  overflow(int_type c)\n+  {\n+    ++overflows;\n+    return std::filebuf::overflow(c);\n+  }\n+};\n+\n+// libstdc++/45628\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  my_filebuf q;\n+  q.open(name_01, std::ios_base::in | std::ios_base::out \n+\t | std::ios_base::trunc); \n+\n+  q.sputc('a');\n+  q.pubseekoff(0, std::ios_base::cur);\n+  q.sputc('b');\n+  q.pubseekoff(0, std::ios_base::cur);\n+  q.sputc('c');\n+  q.pubseekoff(0, std::ios_base::cur);\n+\n+  VERIFY( overflows <= 1 ); // only initial sputc allowed to overflow\n+  q.pubseekoff(0, std::ios_base::beg);\n+\n+  q.sbumpc();\n+  VERIFY( underflows == 1 );\n+\n+  q.pubseekoff(0, std::ios_base::cur);\n+  q.sbumpc();\n+  q.pubseekoff(0, std::ios_base::cur);\n+  q.sbumpc();\n+  q.pubseekoff(0, std::ios_base::cur);\n+\n+  VERIFY( underflows == 1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a6bba98ba8477c9d046a98419e8b39a2a9e6c1b4", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/wchar_t/4.cc", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3531cf5ef365860700c5e89483f3a86ac969c6a4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3531cf5ef365860700c5e89483f3a86ac969c6a4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F4.cc?ref=3531cf5ef365860700c5e89483f3a86ac969c6a4", "patch": "@@ -31,7 +31,7 @@ void test01()\n   typedef wfilebuf::pos_type pos_type;\n   const char name[] = \"tmp_seekoff-4.tst\";\n \n-  const size_t size = 10;\n+  const size_t size = 12;\n   wchar_t buf[size];\n   streamsize n;\n \n@@ -46,7 +46,7 @@ void test01()\n   VERIFY( n == 3 );\n   VERIFY( !wmemcmp(buf, L\"abc\", 3) );\n \n-  fb.pubseekoff(0, ios_base::cur);\n+  // Check read => write without pubseekoff(0, ios_base::cur)\n \n   n = fb.sputn(L\"ef\", 2);\n   VERIFY( n == 2 );\n@@ -58,8 +58,16 @@ void test01()\n   VERIFY( !wmemcmp(buf, L\"abcef\", 5) );\n \n   fb.pubseekoff(0, ios_base::beg);\n-  n = fb.sputn(L\"ghijkl\", 6);\n-  VERIFY( n == 6 );\n+  n = fb.sputn(L\"gh\", 2);\n+  VERIFY( n == 2 );\n+  \n+  // Check write => read without pubseekoff(0, ios_base::cur)\n+\n+  n = fb.sgetn( buf, 3 );\n+  VERIFY( !memcmp(buf, L\"cef\", 3) );\n+\n+  n = fb.sputn(L\"ijkl\", 4);\n+  VERIFY( n == 4 );\n \n   fb.pubseekoff(0, ios_base::beg);\n   n = fb.sgetn(buf, 2);\n@@ -72,8 +80,8 @@ void test01()\n \n   fb.pubseekoff(0, ios_base::beg);\n   n = fb.sgetn(buf, size);\n-  VERIFY( n == 9 );\n-  VERIFY( !wmemcmp(buf, L\"ghijklmno\", 9) );\n+  VERIFY( n == 12 );\n+  VERIFY( !wmemcmp(buf, L\"ghcefijklmno\", 12) );\n \n   fb.close();\n }"}, {"sha": "0a11c43f39770cd1021f4f5310bbadafd5dc7b34", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sync/char/1.cc", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d64ee190c8875dec5f15c0287a425a1e62041a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsync%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d64ee190c8875dec5f15c0287a425a1e62041a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsync%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsync%2Fchar%2F1.cc?ref=5d64ee190c8875dec5f15c0287a425a1e62041a9", "patch": "@@ -1,51 +0,0 @@\n-// Copyright (C) 2003, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 27.8.1.4 Overridden virtual functions\n-\n-#include <fstream>\n-#include <testsuite_hooks.h>\n-\n-void test01()\n-{\n-  using namespace std;\n-\n-  bool test __attribute__((unused)) = true;\n-  const char* name = \"tmp_sync_1\";\n-\n-  filebuf fb;\n-\n-  fb.open(name, ios_base::in | ios_base::out | ios_base::trunc);\n-  fb.sputn(\"abc\", 3);\n-\n-  fb.pubseekoff(0, ios_base::beg);\n-  fb.sputc('1');\n-\n-  // Sync can't be used to switch from write mode to read mode.\n-  fb.pubsync();\n-\n-  filebuf::int_type c = fb.sbumpc();\n-  VERIFY( c == filebuf::traits_type::eof() );\n-\n-  fb.close();\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "a64f4558d9fe7c3bbb69eacde418a15e8ded5a3b", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sync/wchar_t/1.cc", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d64ee190c8875dec5f15c0287a425a1e62041a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsync%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d64ee190c8875dec5f15c0287a425a1e62041a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsync%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsync%2Fwchar_t%2F1.cc?ref=5d64ee190c8875dec5f15c0287a425a1e62041a9", "patch": "@@ -1,51 +0,0 @@\n-// Copyright (C) 2003, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 27.8.1.4 Overridden virtual functions\n-\n-#include <fstream>\n-#include <testsuite_hooks.h>\n-\n-void test01()\n-{\n-  using namespace std;\n-\n-  bool test __attribute__((unused)) = true;\n-  const char* name = \"tmp_sync_1\";\n-\n-  wfilebuf fb;\n-\n-  fb.open(name, ios_base::in | ios_base::out | ios_base::trunc);\n-  fb.sputn(L\"abc\", 3);\n-\n-  fb.pubseekoff(0, ios_base::beg);\n-  fb.sputc(L'1');\n-\n-  // Sync can't be used to switch from write mode to read mode.\n-  fb.pubsync();\n-\n-  wfilebuf::int_type c = fb.sbumpc();\n-  VERIFY( c == wfilebuf::traits_type::eof() );\n-\n-  fb.close();\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "ceda1f5125e09b13df91feccbbbe4c73523598cc", "filename": "libstdc++-v3/testsuite/util/testsuite_character.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3531cf5ef365860700c5e89483f3a86ac969c6a4/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_character.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3531cf5ef365860700c5e89483f3a86ac969c6a4/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_character.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_character.h?ref=3531cf5ef365860700c5e89483f3a86ac969c6a4", "patch": "@@ -294,7 +294,7 @@ namespace std\n \t\tconst extern_type* end, size_t max) const\n       {\n \tconst extern_type* beg = from;\n-\twhile (from < end && max)\n+\twhile (from < end)\n \t  {\n \t    unsigned char c = *from;\n \t    if (c & 0xc0)\n@@ -304,6 +304,8 @@ namespace std\n \t\t++from;\n \t\tcontinue;\n \t      }\n+\t    \n+\t    if (max == 0) break;\n \n \t    unsigned char tmp;\n \t    if (state.value & 0x8)"}]}