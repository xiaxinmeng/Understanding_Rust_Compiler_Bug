{"sha": "fd3f89a9a2b60953c698eb5431716f2e3ad4db5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQzZjg5YTlhMmI2MDk1M2M2OThlYjU0MzE3MTZmMmUzYWQ0ZGI1YQ==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1992-09-26T22:36:47Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1992-09-26T22:36:47Z"}, "message": "(comment before extendhisi2): Remove the lie.\n\n(zero_extendhisi2): Rewrite to work if op0 == op1.  Use\ngen_lowpart in preparation code.\n(extendqisi2, extendhisi2): Likewise.\n(extendqihi2): Expand.\n(restorehi): Rewrite for correctness, efficiency, and\nclarity. Avoid generating insns involving truncate.  Generate\nneeded pseudos in preparation statements.\n(storehi): Likewise.\n(storeinthi): Likewise.\n(movhi): Call gen_storehi, gen_restorehi, gen_storeinthi according\ntheir new definitions.  Use force_reg to put address in register.\n\nFrom-SVN: r2255", "tree": {"sha": "11f5129583f0a233b6d7cbc5b7be569e1f336461", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11f5129583f0a233b6d7cbc5b7be569e1f336461"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd3f89a9a2b60953c698eb5431716f2e3ad4db5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd3f89a9a2b60953c698eb5431716f2e3ad4db5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd3f89a9a2b60953c698eb5431716f2e3ad4db5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd3f89a9a2b60953c698eb5431716f2e3ad4db5a/comments", "author": null, "committer": null, "parents": [{"sha": "57cdc6c2fe981621e3ce2cbceefeba5663b579c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57cdc6c2fe981621e3ce2cbceefeba5663b579c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57cdc6c2fe981621e3ce2cbceefeba5663b579c3"}], "stats": {"total": 384, "additions": 173, "deletions": 211}, "files": [{"sha": "ef27cc5dd8a0b17a600c16e541c3c1b672b28fb9", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 173, "deletions": 211, "changes": 384, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd3f89a9a2b60953c698eb5431716f2e3ad4db5a/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd3f89a9a2b60953c698eb5431716f2e3ad4db5a/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=fd3f89a9a2b60953c698eb5431716f2e3ad4db5a", "patch": "@@ -41,8 +41,8 @@\n \n (define_insn \"addsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-        (plus:SI (match_operand:SI 1 \"register_operand\" \"r,r\")\n-                 (match_operand:SI 2 \"general_operand\" \"r,n\")))]\n+\t(plus:SI (match_operand:SI 1 \"register_operand\" \"r,r\")\n+\t\t (match_operand:SI 2 \"general_operand\" \"r,n\")))]\n   \"\"\n   \"*\n   switch (which_alternative)\n@@ -56,17 +56,17 @@\n \n (define_insn \"addsf3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-        (plus:SF (match_operand:SF 1 \"register_operand\" \"f\")\n-                 (match_operand:SF 2 \"fpu_rhs_operand\" \"fG\")))]\n+\t(plus:SF (match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t (match_operand:SF 2 \"fpu_rhs_operand\" \"fG\")))]\n   \"\"\n   \"*\n   return (arm_output_asm_insn (\\\"adfs\\\\t%0, %1, %2\\\", operands));\n \")\n \n (define_insn \"adddf3\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-        (plus:DF (match_operand:DF 1 \"register_operand\" \"f\")\n-                 (match_operand:DF 2 \"fpu_rhs_operand\" \"fG\")))]\n+\t(plus:DF (match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t (match_operand:DF 2 \"fpu_rhs_operand\" \"fG\")))]\n   \"\"\n   \"*\n   return (arm_output_asm_insn (\\\"adfd\\\\t%0, %1, %2\\\", operands));\n@@ -84,8 +84,8 @@\n \n (define_insn \"subsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r\")\n-        (minus:SI (match_operand:SI 1 \"arm_rhs_operand\" \"r,r,I\")\n-                  (match_operand:SI 2 \"general_operand\" \"r,n,r\")))]\n+\t(minus:SI (match_operand:SI 1 \"arm_rhs_operand\" \"r,r,I\")\n+\t\t  (match_operand:SI 2 \"general_operand\" \"r,n,r\")))]\n   \"\"\n   \"*\n   switch (which_alternative)\n@@ -102,8 +102,8 @@\n \n (define_insn \"subsf3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n-        (minus:SF (match_operand:SF 1 \"fpu_rhs_operand\" \"f,G\")\n-                  (match_operand:SF 2 \"fpu_rhs_operand\" \"fG,f\")))]\n+\t(minus:SF (match_operand:SF 1 \"fpu_rhs_operand\" \"f,G\")\n+\t\t  (match_operand:SF 2 \"fpu_rhs_operand\" \"fG,f\")))]\n   \"\"\n   \"*\n   switch (which_alternative)\n@@ -117,7 +117,7 @@\n \n (define_insn \"subdf3\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n-        (minus:DF (match_operand:DF 1 \"fpu_rhs_operand\" \"f,G\")\n+\t(minus:DF (match_operand:DF 1 \"fpu_rhs_operand\" \"f,G\")\n       (match_operand:DF 2 \"fpu_rhs_operand\" \"fG,f\")))]\n   \"\"\n   \"*\n@@ -135,8 +135,8 @@\n ;; The `&' is too strict, but at least generates correct code.\n (define_insn \"mulsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&r\")\n-        (mult:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n-                 (match_operand:SI 2 \"register_operand\" \"r\")))]\n+\t(mult:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n+\t\t (match_operand:SI 2 \"register_operand\" \"r\")))]\n   \"\"\n   \"*\n   if (REGNO (operands[0]) == REGNO (operands[1]))\n@@ -149,10 +149,10 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&r\")\n-        (plus:SI\n-          (mult:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n-                   (match_operand:SI 2 \"register_operand\" \"r\"))\n-          (match_operand:SI 3 \"register_operand\" \"r\")))]\n+\t(plus:SI\n+\t  (mult:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n+\t\t   (match_operand:SI 2 \"register_operand\" \"r\"))\n+\t  (match_operand:SI 3 \"register_operand\" \"r\")))]\n   \"\"\n   \"*\n   if (REGNO (operands[0]) == REGNO (operands[1]))\n@@ -163,10 +163,10 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&r\")\n-        (plus:SI\n-          (match_operand:SI 3 \"register_operand\" \"r\")\n-          (mult:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n-                   (match_operand:SI 2 \"register_operand\" \"r\"))))]\n+\t(plus:SI\n+\t  (match_operand:SI 3 \"register_operand\" \"r\")\n+\t  (mult:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n+\t\t   (match_operand:SI 2 \"register_operand\" \"r\"))))]\n   \"\"\n   \"*\n   if (REGNO (operands[0]) == REGNO (operands[1]))\n@@ -177,15 +177,15 @@\n \n (define_insn \"mulsf3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-        (mult:SF (match_operand:SF 1 \"register_operand\" \"f\")\n-                 (match_operand:SF 2 \"fpu_rhs_operand\" \"fG\")))]\n+\t(mult:SF (match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t (match_operand:SF 2 \"fpu_rhs_operand\" \"fG\")))]\n   \"\"\n   \"*return (arm_output_asm_insn (\\\"mufs\\\\t%0, %1, %2\\\", operands));\")\n \n (define_insn \"muldf3\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-        (mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n-                 (match_operand:DF 2 \"fpu_rhs_operand\" \"fG\")))]\n+\t(mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t (match_operand:DF 2 \"fpu_rhs_operand\" \"fG\")))]\n   \"\"\n   \"*\n   return (arm_output_asm_insn (\\\"mufd\\\\t%0, %1, %2\\\", operands));\n@@ -195,8 +195,8 @@\n \n (define_insn \"divsf3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n-        (div:SF (match_operand:SF 1 \"fpu_rhs_operand\" \"f,G\")\n-                (match_operand:SF 2 \"fpu_rhs_operand\" \"fG,f\")))]\n+\t(div:SF (match_operand:SF 1 \"fpu_rhs_operand\" \"f,G\")\n+\t\t(match_operand:SF 2 \"fpu_rhs_operand\" \"fG,f\")))]\n   \"\"\n   \"*\n   switch (which_alternative)\n@@ -210,8 +210,8 @@\n \n (define_insn \"divdf3\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n-        (div:DF (match_operand:DF 1 \"fpu_rhs_operand\" \"f,G\")\n-                (match_operand:DF 2 \"fpu_rhs_operand\" \"fG,f\")))]\n+\t(div:DF (match_operand:DF 1 \"fpu_rhs_operand\" \"f,G\")\n+\t\t(match_operand:DF 2 \"fpu_rhs_operand\" \"fG,f\")))]\n   \"\"\n   \"*\n   switch (which_alternative)\n@@ -227,17 +227,17 @@\n \n (define_insn \"modsf3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-        (mod:SF (match_operand:SF 1 \"register_operand\" \"f\")\n-                (match_operand:SF 2 \"fpu_rhs_operand\" \"fG\")))]\n+\t(mod:SF (match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t(match_operand:SF 2 \"fpu_rhs_operand\" \"fG\")))]\n   \"\"\n   \"*\n   return (arm_output_asm_insn (\\\"rmfs\\\\t%0, %1, %2\\\", operands));\n \")\n \n (define_insn \"moddf3\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-        (mod:DF (match_operand:DF 1 \"register_operand\" \"f\")\n-                (match_operand:DF 2 \"fpu_rhs_operand\" \"fG\")))]\n+\t(mod:DF (match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t(match_operand:DF 2 \"fpu_rhs_operand\" \"fG\")))]\n   \"\"\n   \"*\n   return (arm_output_asm_insn (\\\"rmfd\\\\t%0, %1, %2\\\", operands));\n@@ -257,17 +257,17 @@\n \n (define_insn \"andsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (and:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-                (match_operand:SI 2 \"arm_rhs_operand\" \"rI\")))]\n+\t(and:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t(match_operand:SI 2 \"arm_rhs_operand\" \"rI\")))]\n   \"\"\n   \"*\n   return (arm_output_asm_insn (\\\"and\\\\t%0, %1, %2\\\", operands));\n \")\n \n (define_insn \"andcbsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (and:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-                (not:SI (match_operand:SI 2 \"arm_rhs_operand\" \"rI\"))))]\n+\t(and:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t(not:SI (match_operand:SI 2 \"arm_rhs_operand\" \"rI\"))))]\n   \"\"\n   \"*\n   return (arm_output_asm_insn (\\\"bic\\\\t%0, %1, %2\\\", operands));\n@@ -285,8 +285,8 @@\n \n (define_insn \"iorsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-        (ior:SI (match_operand:SI 1 \"register_operand\" \"r,r\")\n-                (match_operand:SI 2 \"nonmemory_operand\" \"r,n\")))]\n+\t(ior:SI (match_operand:SI 1 \"register_operand\" \"r,r\")\n+\t\t(match_operand:SI 2 \"nonmemory_operand\" \"r,n\")))]\n   \"\"\n   \"*\n   switch (which_alternative)\n@@ -302,8 +302,8 @@\n \n (define_insn \"xorsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-        (xor:SI (match_operand:SI 1 \"register_operand\" \"r,r\")\n-                (match_operand:SI 2 \"nonmemory_operand\" \"r,n\")))]\n+\t(xor:SI (match_operand:SI 1 \"register_operand\" \"r,r\")\n+\t\t(match_operand:SI 2 \"nonmemory_operand\" \"r,n\")))]\n   \"\"\n   \"*\n   switch (which_alternative)\n@@ -313,25 +313,25 @@\n     case 1:\n       return (output_multi_immediate (operands,\n \t\t\t\t      \\\"eor\\\\t%0, %1, %2\\\", \\\"eor\\\\t%0, %0, %2\\\",\n-\t\t                      2, INTVAL (operands[2])));\n+\t\t\t\t      2, INTVAL (operands[2])));\n     }\n \")\n \f\n ;; Shift and rotation insns\n \n (define_insn \"ashlsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-                   (match_operand:SI 2 \"general_operand\" \"rn\")))]\n+\t(ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t   (match_operand:SI 2 \"general_operand\" \"rn\")))]\n   \"\"\n   \"*\n   return (output_shifted_move (ASHIFT, operands));\n \")\n \n (define_insn \"ashrsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-                     (match_operand:SI 2 \"general_operand\" \"rn\")))]\n+\t(ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t     (match_operand:SI 2 \"general_operand\" \"rn\")))]\n   \"\"\n   \"*\n   return (output_shifted_move (ASHIFTRT, operands));\n@@ -342,17 +342,17 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (lshift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-                   (match_operand:SI 2 \"general_operand\" \"rn\")))]\n+\t(lshift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t   (match_operand:SI 2 \"general_operand\" \"rn\")))]\n   \"\"\n   \"*\n   return (output_shifted_move (LSHIFT, operands));\n \")\n \n (define_insn \"lshrsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-                     (match_operand:SI 2 \"general_operand\" \"rn\")))]\n+\t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t     (match_operand:SI 2 \"general_operand\" \"rn\")))]\n   \"\"\n   \"*\n   return (output_shifted_move (LSHIFTRT, operands));\n@@ -362,8 +362,8 @@\n \n (define_insn \"rotrsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-        (rotatert:SI (match_operand:SI 1 \"register_operand\" \"r,r\")\n-                     (match_operand:SI 2 \"general_operand\" \"r,n\")))]\n+\t(rotatert:SI (match_operand:SI 1 \"register_operand\" \"r,r\")\n+\t\t     (match_operand:SI 2 \"general_operand\" \"r,n\")))]\n   \"\"\n   \"*\n   switch (which_alternative)\n@@ -372,7 +372,7 @@\n       return (arm_output_asm_insn (\\\"mov\\\\t%0, %1,ror %2\\\", operands));\n     case 1:\n       if (INTVAL(operands[2]) > 31)\n-        operands[2] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[2]) % 32);\n+\toperands[2] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[2]) % 32);\n       return (arm_output_asm_insn (\\\"mov\\\\t%0, %1,ror%2\\\", operands));\n     }\n \")\n@@ -381,7 +381,7 @@\n \n (define_insn \"negdi2\"\n   [(set (match_operand:DI 0 \"di_operand\" \"=r\")\n-        (neg:DI (match_operand:DI 1 \"di_operand\" \"r\")))]\n+\t(neg:DI (match_operand:DI 1 \"di_operand\" \"r\")))]\n   \"\"\n   \"*\n   arm_output_asm_insn (\\\"rsb\\\\t%0, %1, #0\\\", operands);\n@@ -390,63 +390,63 @@\n \n (define_insn \"negsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (neg:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n+\t(neg:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n   \"\"\n   \"*\n   return (arm_output_asm_insn (\\\"rsb\\\\t%0, %1, #0\\\", operands));\n \")\n \n (define_insn \"negsf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-        (neg:SF (match_operand:SF 1 \"register_operand\" \"f\")))]\n+\t(neg:SF (match_operand:SF 1 \"register_operand\" \"f\")))]\n   \"\"\n   \"*\n   return (arm_output_asm_insn (\\\"mnfs\\\\t%0, %1\\\", operands));\n \")\n \n (define_insn \"negdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-        (neg:DF (match_operand:DF 1 \"register_operand\" \"f\")))]\n+\t(neg:DF (match_operand:DF 1 \"register_operand\" \"f\")))]\n   \"\"\n   \"*\n   return (arm_output_asm_insn (\\\"mnfd\\\\t%0, %1\\\", operands));\n \")\n \n (define_insn \"abssf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-         (abs:SF (match_operand:SF 1 \"register_operand\" \"f\")))]\n+\t (abs:SF (match_operand:SF 1 \"register_operand\" \"f\")))]\n   \"\"\n   \"*\n   return (arm_output_asm_insn (\\\"abss\\\\t%0, %1\\\", operands));\n \")\n \n (define_insn \"absdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-        (abs:DF (match_operand:DF 1 \"register_operand\" \"f\")))]\n+\t(abs:DF (match_operand:DF 1 \"register_operand\" \"f\")))]\n   \"\"\n   \"*\n   return (arm_output_asm_insn (\\\"absd\\\\t%0, %1\\\", operands));\n \")\n \n (define_insn \"sqrtsf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-        (sqrt:SF (match_operand:SF 1 \"register_operand\" \"f\")))]\n+\t(sqrt:SF (match_operand:SF 1 \"register_operand\" \"f\")))]\n   \"\"\n   \"*\n   return (arm_output_asm_insn (\\\"sqts\\\\t%0, %1\\\", operands));\n \")\n \n (define_insn \"sqrtdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-        (sqrt:DF (match_operand:DF 1 \"register_operand\" \"f\")))]\n+\t(sqrt:DF (match_operand:DF 1 \"register_operand\" \"f\")))]\n   \"\"\n   \"*\n   return (arm_output_asm_insn (\\\"sqtd\\\\t%0, %1\\\", operands));\n \")\n \n (define_insn \"one_cmplsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (not:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n+\t(not:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n   \"\"\n   \"*\n   return (arm_output_asm_insn (\\\"mvn\\\\t%0, %1\\\", operands));\n@@ -456,15 +456,15 @@\n \n (define_insn \"floatsisf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-        (float:SF (match_operand:SI 1 \"register_operand\" \"r\")))]\n+\t(float:SF (match_operand:SI 1 \"register_operand\" \"r\")))]\n   \"\"\n   \"*\n   return (arm_output_asm_insn (\\\"flts\\\\t%0, %1\\\", operands));\n \")\n \n (define_insn \"floatsidf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-        (float:DF (match_operand:SI 1 \"register_operand\" \"r\")))]\n+\t(float:DF (match_operand:SI 1 \"register_operand\" \"r\")))]\n   \"\"\n   \"*\n   return (arm_output_asm_insn (\\\"fltd\\\\t%0, %1\\\", operands));\n@@ -474,8 +474,8 @@\n \n (define_insn \"truncdfsf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-        (float_truncate:SF\n-            (match_operand:DF 1 \"register_operand\" \"f\")))]\n+\t(float_truncate:SF\n+\t (match_operand:DF 1 \"register_operand\" \"f\")))]\n   \"\"\n   \"*\n   return (arm_output_asm_insn (\\\"mvfs\\\\t%0, %1\\\", operands));\n@@ -484,23 +484,20 @@\n ;; Zero extension instructions.\n \n (define_expand \"zero_extendhisi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+  [(set (match_dup 2)\n \t(ashift:SI (match_operand:HI 1 \"register_operand\" \"\")\n \t\t   (const_int 16)))\n-   (set (match_dup 0)\n-\t(lshiftrt:SI (match_dup 0) (const_int 16)))]\n+   (set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(lshiftrt:SI (match_dup 2)\n+\t\t     (const_int 16)))]\n   \"\"\n   \"\n-  if (GET_CODE (operands[1]) == SUBREG)\n-      operands[1] = gen_rtx (SUBREG, SImode, SUBREG_REG (operands[1]),\n-                             SUBREG_WORD (operands[1]));\n-  else\n-      operands[1] = gen_rtx (SUBREG, SImode, operands[1], 0);\n-\")\n+{ operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[2] = gen_reg_rtx (SImode); }\")\n \n (define_insn \"zero_extendqihi2\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-        (zero_extend:HI\n+\t(zero_extend:HI\n \t (match_operand:QI 1 \"register_operand\" \"r\")))]\n   \"\"\n   \"*\n@@ -509,7 +506,7 @@\n \n (define_insn \"zero_extendqisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-        (zero_extend:SI\n+\t(zero_extend:SI\n \t (match_operand:QI 1 \"nonimmediate_operand\" \"r,m\")))]\n   \"\"\n   \"*\n@@ -522,55 +519,46 @@\n     }\n \")\n \n-;; Note that the ones starting from HImode come before those for QImode so\n-;; that a constant operand will match HImode, not QImode.\n-\n (define_expand \"extendhisi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+  [(set (match_dup 2)\n \t(ashift:SI (match_operand:HI 1 \"register_operand\" \"\")\n \t\t   (const_int 16)))\n-   (set (match_dup 0)\n-\t(ashiftrt:SI (match_dup 0) (const_int 16)))]\n+   (set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(ashiftrt:SI (match_dup 2)\n+\t\t     (const_int 16)))]\n   \"\"\n   \"\n-  if (GET_CODE (operands[1]) == SUBREG)\n-      operands[1] = gen_rtx (SUBREG, SImode, SUBREG_REG (operands[1]),\n-                             SUBREG_WORD (operands[1]));\n-  else\n-      operands[1] = gen_rtx (SUBREG, SImode, operands[1], 0);\n-\")\n-\n-;; XXX Is this ever used?\n+{ operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[2] = gen_reg_rtx (SImode); }\")\n \n-(define_insn \"extendqihi2\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:SI\n-\t (match_operand:QI 1 \"register_operand\" \"r\")))]\n+(define_expand \"extendqihi2\"\n+  [(set (match_dup 2)\n+\t(ashift:SI (match_operand:QI 1 \"register_operand\" \"\")\n+\t\t   (const_int 24)))\n+   (set (match_operand:HI 0 \"register_operand\" \"\")\n+\t(ashiftrt:SI (match_dup 2)\n+\t\t     (const_int 24)))]\n   \"\"\n-  \"*\n-  arm_output_asm_insn (\\\"mov\\\\t%0, %1, lsl#24\\\\t@ extendqihi\\\", operands);\n-  return (arm_output_asm_insn (\\\"mov\\\\t%0, %0, asr#24\\\", operands));\n-\")\n-\n+  \"\n+{ operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[2] = gen_reg_rtx (SImode); }\")\n \n (define_expand \"extendqisi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+  [(set (match_dup 2)\n \t(ashift:SI (match_operand:QI 1 \"register_operand\" \"\")\n \t\t   (const_int 24)))\n-   (set (match_dup 0)\n-\t(ashiftrt:SI (match_dup 0) (const_int 24)))]\n+   (set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(ashiftrt:SI (match_dup 2)\n+\t\t     (const_int 24)))]\n   \"\"\n   \"\n-  if (GET_CODE (operands[1]) == SUBREG)\n-      operands[1] = gen_rtx (SUBREG, SImode, SUBREG_REG (operands[1]),\n-                             SUBREG_WORD(operands[1]));\n-  else\n-      operands[1] = gen_rtx (SUBREG, SImode, operands[1], 0);\n-\")\n+{ operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[2] = gen_reg_rtx (SImode); }\")\n \n (define_insn \"extendsfdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-        (float_extend:DF (match_operand:SF 1 \"register_operand\" \"f\")))]\n+\t(float_extend:DF (match_operand:SF 1 \"register_operand\" \"f\")))]\n   \"\"\n   \"*\n   return (arm_output_asm_insn (\\\"mvfd\\\\t%0, %1\\\", operands));\n@@ -638,15 +626,15 @@\n \n (define_insn \"movdi\"\n   [(set (match_operand:DI 0 \"di_operand\" \"=r,r,r,o,r\")\n-        (match_operand:DI 1 \"di_operand\" \"r,n,o,r,F\"))]\n+\t(match_operand:DI 1 \"di_operand\" \"r,n,o,r,F\"))]\n   \"\"\n   \"*\n   return (output_move_double (operands));\n \")\n \n (define_insn \"movsi\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=r,r,r,m\")\n-        (match_operand:SI 1 \"general_operand\"  \"r,n,m,r\"))]\n+\t(match_operand:SI 1 \"general_operand\"  \"r,n,m,r\"))]\n   \"\"\n   \"*\n   switch (which_alternative)\n@@ -657,10 +645,10 @@\n       return (output_mov_immediate (operands));\n     case 2:\n       if (GET_CODE (XEXP (operands[1], 0)) == SYMBOL_REF\n-          &&  CONSTANT_POOL_ADDRESS_P (XEXP (operands[1], 0)))\n+\t  &&  CONSTANT_POOL_ADDRESS_P (XEXP (operands[1], 0)))\n \treturn (arm_output_llc (operands));\n       else\n-        return (arm_output_asm_insn (\\\"ldr\\\\t%0, %1\\\", operands));\n+\treturn (arm_output_asm_insn (\\\"ldr\\\\t%0, %1\\\", operands));\n     case 3:\n       return (arm_output_asm_insn (\\\"str\\\\t%1, %0\\\", operands));\n     }\n@@ -698,79 +686,61 @@\n ;; storehi is not allowed.\n \n (define_expand \"restorehi\"\n-  [(set (mem:QI (match_operand:SI 1 \"address_operand\" \"\"))\n-\t(truncate:QI (match_operand:HI 0 \"register_operand\" \"\")))\n-   (set (reg:HI 10)\n-\t(ashiftrt:HI (match_dup 0) (const_int 8)))\n+  [(set (mem:QI (match_operand 1 \"\" \"\"))\n+\t(match_dup 2))\n+   (set (reg:SI 10)\n+\t(ashiftrt:SI (match_operand 0 \"\" \"\") (const_int 8)))\n    (set (mem:QI (plus:SI (match_dup 1) (const_int 1)))\n-\t(truncate:QI (reg:HI 10)))]\n-  \"\" \"\")\n+\t(reg:QI 10))]\n+  \"\"\n+  \"\n+{\n+  operands[2] = gen_lowpart (QImode, operands[0]);\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+}\")\n \n ;; Subroutine to store a half word from a register into memory.\n ;; Operand 0 is the source register (HImode)\n-;; Operand 1 is the destination address (SImode)\n-;; Operand 2 is a temporary (SImode).\n-;; Operand 3 is a temporary (SImode).\n-;; Operand 4 is a temporary (SImode).\n+;; Operand 1 is the destination address in a register (SImode)\n \n (define_expand \"storehi\"\n-  [;; compute the address into a register\n-   (set (match_operand:SI 2 \"register_operand\" \"\")\n-        (match_operand:SI 1 \"address_operand\" \"\"))\n-   ;; get the half word into a full word register\n-   (set (match_operand:SI 3 \"register_operand\" \"\")\n-        (match_operand:HI 0 \"register_operand\" \"\"))\n-   ;; store the low byte\n-   (set (mem:QI (match_dup 2))\n-        (truncate:QI (match_dup 3)))\n+  [;; store the low byte\n+   (set (mem:QI (match_operand 1 \"\" \"\")) (match_dup 3))\n    ;; extract the high byte\n-   (set (match_operand:SI 4 \"register_operand\" \"\")\n-        (ashiftrt:SI (match_dup 3) (const_int 8)))\n+   (set (match_dup 2)\n+\t(ashiftrt:SI (match_operand 0 \"\" \"\") (const_int 8)))\n    ;; store the high byte\n-   (set (mem:QI (plus (match_dup 2) (const_int 1)))\n-        (truncate:QI (match_dup 4)))]\n+   (set (mem:QI (plus (match_dup 1) (const_int 1)))\n+\t(subreg:QI (match_dup 2) 0))]\t;explicit subreg safe\n   \"\"\n   \"\n+{ operands[3] = gen_lowpart (QImode, operands[0]);\n   operands[0] = gen_lowpart (SImode, operands[0]);\n-\")\n+  operands[2] = gen_reg_rtx (SImode); }\")\n \n ;; Subroutine to store a half word integer constant into memory.\n ;; Operand 0 is the constant\n-;; Operand 1 is the destination address (SImode)\n-;; Operand 2 is a temporary (SImode).\n-;; Operand 3 is a temporary (QImode).\n-;; Operand 4 is a temporary (QImode).\n-;; Operand 5 is a local CONST_INT.\n+;; Operand 1 is the destination address in a register (SImode)\n \n (define_expand \"storeinthi\"\n-  [;; compute the address into a register\n-   (set (match_operand:SI 2 \"register_operand\" \"\")\n-        (match_operand:SI 1 \"address_operand\" \"\"))\n-   ;; load the low byte\n-   (set (match_operand:QI 3 \"register_operand\" \"\")\n-        (match_operand:SI 0 \"\" \"\"))\n-   ;; store the low byte\n-   (set (mem:QI (match_dup 2))\n-        (match_dup 3))\n-   ;; load the high byte\n-   (set (match_operand:QI 4 \"register_operand\" \"\")\n-        (match_dup 5))\n+  [;; store the low byte\n+   (set (mem:QI (match_operand 1 \"\" \"\")) (match_operand 0 \"\" \"\"))\n    ;; store the high byte\n-   (set (mem:QI (plus (match_dup 2) (const_int 1)))\n-        (match_dup 4))]\n+   (set (mem:QI (plus (match_dup 1) (const_int 1)))\n+\t(match_dup 2))]\n   \"\"\n   \"\n     {\n-      int value = INTVAL(operands[0]);\n+      int value = INTVAL (operands[0]);\n \n-      operands[0] = gen_rtx(CONST_INT, VOIDmode, value & 255);\n-      operands[5] = gen_rtx(CONST_INT, VOIDmode,(value>>8) & 255);\n+      operands[0] = force_reg (QImode, gen_rtx (CONST_INT, VOIDmode, value & 255));\n+      operands[2] = force_reg (QImode, gen_rtx (CONST_INT, VOIDmode,(value>>8) & 255));\n     }\n \")\n \n (define_expand \"movhi\"\n   [(set (match_operand:HI 0 \"general_operand\" \"\")\n-        (match_operand:HI 1 \"general_operand\" \"\"))]\n+\t(match_operand:HI 1 \"general_operand\" \"\"))]\n   \"\"\n   \"\n {\n@@ -787,22 +757,15 @@\n     {\n       if (GET_CODE (operands[0]) == MEM)\n \t{\n-\t  if (GET_CODE (operands[1]) == MEM)\n-\t    operands[1] = copy_to_reg (operands[1]);\n-\n \t  if (GET_CODE (operands[1]) == CONST_INT)\n \t    {\n-\t      insn = gen_storeinthi (operands[1], XEXP (operands[0], 0),\n-\t\t\t\t     gen_reg_rtx (SImode),\n-\t\t\t\t     gen_reg_rtx (QImode),\n-\t\t\t\t     gen_reg_rtx (QImode));\n+\t      insn = gen_storeinthi (operands[1], force_reg (SImode, XEXP (operands[0], 0)));\n \t    }\n \t  else\n \t    {\n-\t      insn = gen_storehi (operands[1], XEXP (operands[0], 0),\n-\t\t\t\t  gen_reg_rtx (SImode),\n-\t\t\t\t  gen_reg_rtx (SImode),\n-\t\t\t\t  gen_reg_rtx (SImode));\n+\t      if (GET_CODE (operands[1]) == MEM)\n+\t\toperands[1] = copy_to_reg (operands[1]);\n+\t      insn = gen_storehi (operands[1], force_reg (SImode, XEXP (operands[0], 0)));\n \t    }\n \t}\n #if 0\n@@ -824,7 +787,7 @@\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"general_operand\" \"=r,r,r,m\")\n-        (match_operand:HI 1 \"general_operand\"  \"r,n,m,r\"))]\n+\t(match_operand:HI 1 \"general_operand\"  \"r,n,m,r\"))]\n   \"\"\n   \"*\n   switch (which_alternative)\n@@ -838,7 +801,7 @@\n \n (define_insn \"movqi\"\n   [(set (match_operand:QI 0 \"general_operand\" \"=r,r,r,m\")\n-        (match_operand:QI 1 \"general_operand\" \"r,n,m,r\"))]\n+\t(match_operand:QI 1 \"general_operand\" \"r,n,m,r\"))]\n   \"\"\n   \"*\n   switch (which_alternative)\n@@ -852,12 +815,11 @@\n     case 3:\n       return (arm_output_asm_insn (\\\"strb\\\\t%1, %0\\\", operands));\n     }\n-  \n \")\n \n (define_insn \"movsf\"\n   [(set (match_operand:SF 0 \"general_operand\" \"=f,f,m,f,r,r\")\n-        (match_operand:SF 1 \"general_operand\" \"fG,m,f,r,f,r\"))]\n+\t(match_operand:SF 1 \"general_operand\" \"fG,m,f,r,f,r\"))]\n   \"\"\n   \"*\n   switch (which_alternative)\n@@ -881,7 +843,7 @@\n \n (define_insn \"movdf\"\n   [(set (match_operand:DF 0 \"general_operand\" \"=f,f,m,f,r,r\")\n-        (match_operand:DF 1 \"general_operand\" \"fG,m,f,r,f,r\"))]\n+\t(match_operand:DF 1 \"general_operand\" \"fG,m,f,r,f,r\"))]\n   \"\"\n   \"*\n   switch (which_alternative)\n@@ -899,7 +861,7 @@\n \n (define_insn \"cmpsi\"\n   [(set (cc0)\n-        (compare (match_operand:SI 0 \"register_operand\" \"r\")\n+\t(compare (match_operand:SI 0 \"register_operand\" \"r\")\n \t\t (match_operand:SI 1 \"arm_rhs_operand\" \"rI\")))]\n   \"\"\n   \"*\n@@ -915,16 +877,16 @@\n \n (define_insn \"\"\n   [(set (cc0)\n-        (compare (match_operand:SI 0 \"register_operand\" \"r\")\n-                 (neg:SI (match_operand:SI 1 \"arm_rhs_operand\" \"rI\"))))]\n+\t(compare (match_operand:SI 0 \"register_operand\" \"r\")\n+\t\t (neg:SI (match_operand:SI 1 \"arm_rhs_operand\" \"rI\"))))]\n   \"\"\n   \"*\n   return (arm_output_asm_insn (\\\"cmn\\\\t%0, %1\\\", operands));\n \")\n \n (define_insn \"cmpsf\"\n   [(set (cc0)\n-        (compare (match_operand:SF 0 \"register_operand\" \"f\")\n+\t(compare (match_operand:SF 0 \"register_operand\" \"f\")\n \t\t (match_operand:SF 1 \"fpu_rhs_operand\" \"fG\")))]\n   \"\"\n   \"*\n@@ -933,7 +895,7 @@\n \n (define_insn \"cmpdf\"\n   [(set (cc0)\n-        (compare (match_operand:DF 0 \"register_operand\" \"f\")\n+\t(compare (match_operand:DF 0 \"register_operand\" \"f\")\n \t\t (match_operand:DF 1 \"fpu_rhs_operand\" \"fG\")))]\n   \"\"\n   \"*\n@@ -944,7 +906,7 @@\n \n (define_insn \"beq\"\n   [(set (pc)\n-        (if_then_else (eq (cc0) (const_int 0))\n+\t(if_then_else (eq (cc0) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n@@ -954,7 +916,7 @@\n \n (define_insn \"bne\"\n   [(set (pc)\n-        (if_then_else (ne (cc0) (const_int 0))\n+\t(if_then_else (ne (cc0) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n@@ -964,7 +926,7 @@\n \n (define_insn \"bgt\"\n   [(set (pc)\n-        (if_then_else (gt (cc0) (const_int 0))\n+\t(if_then_else (gt (cc0) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n@@ -974,7 +936,7 @@\n \n (define_insn \"ble\"\n   [(set (pc)\n-        (if_then_else (le (cc0) (const_int 0))\n+\t(if_then_else (le (cc0) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n@@ -984,7 +946,7 @@\n \n (define_insn \"bge\"\n   [(set (pc)\n-        (if_then_else (ge (cc0) (const_int 0))\n+\t(if_then_else (ge (cc0) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n@@ -994,7 +956,7 @@\n \n (define_insn \"blt\"\n   [(set (pc)\n-        (if_then_else (lt (cc0) (const_int 0))\n+\t(if_then_else (lt (cc0) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n@@ -1004,7 +966,7 @@\n \n (define_insn \"bgtu\"\n   [(set (pc)\n-        (if_then_else (gtu (cc0) (const_int 0))\n+\t(if_then_else (gtu (cc0) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n@@ -1014,7 +976,7 @@\n \n (define_insn \"bleu\"\n   [(set (pc)\n-        (if_then_else (leu (cc0) (const_int 0))\n+\t(if_then_else (leu (cc0) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n@@ -1024,7 +986,7 @@\n \n (define_insn \"bgeu\"\n   [(set (pc)\n-        (if_then_else (geu (cc0) (const_int 0))\n+\t(if_then_else (geu (cc0) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n@@ -1034,7 +996,7 @@\n \n (define_insn \"bltu\"\n   [(set (pc)\n-        (if_then_else (ltu (cc0) (const_int 0))\n+\t(if_then_else (ltu (cc0) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n@@ -1046,7 +1008,7 @@\n \n (define_insn \"\"\n   [(set (pc)\n-        (if_then_else (eq (cc0) (const_int 0))\n+\t(if_then_else (eq (cc0) (const_int 0))\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n@@ -1056,7 +1018,7 @@\n \n (define_insn \"\"\n   [(set (pc)\n-        (if_then_else (ne (cc0) (const_int 0))\n+\t(if_then_else (ne (cc0) (const_int 0))\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n@@ -1066,7 +1028,7 @@\n \n (define_insn \"\"\n   [(set (pc)\n-        (if_then_else (gt (cc0) (const_int 0))\n+\t(if_then_else (gt (cc0) (const_int 0))\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n@@ -1076,7 +1038,7 @@\n \n (define_insn \"\"\n   [(set (pc)\n-        (if_then_else (le (cc0) (const_int 0))\n+\t(if_then_else (le (cc0) (const_int 0))\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n@@ -1086,7 +1048,7 @@\n \n (define_insn \"\"\n   [(set (pc)\n-        (if_then_else (ge (cc0) (const_int 0))\n+\t(if_then_else (ge (cc0) (const_int 0))\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n@@ -1096,7 +1058,7 @@\n \n (define_insn \"\"\n   [(set (pc)\n-        (if_then_else (lt (cc0) (const_int 0))\n+\t(if_then_else (lt (cc0) (const_int 0))\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n@@ -1106,7 +1068,7 @@\n \n (define_insn \"\"\n   [(set (pc)\n-        (if_then_else (gtu (cc0) (const_int 0))\n+\t(if_then_else (gtu (cc0) (const_int 0))\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n@@ -1116,7 +1078,7 @@\n \n (define_insn \"\"\n   [(set (pc)\n-        (if_then_else (leu (cc0) (const_int 0))\n+\t(if_then_else (leu (cc0) (const_int 0))\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n@@ -1126,7 +1088,7 @@\n \n (define_insn \"\"\n   [(set (pc)\n-        (if_then_else (geu (cc0) (const_int 0))\n+\t(if_then_else (geu (cc0) (const_int 0))\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n@@ -1136,7 +1098,7 @@\n \n (define_insn \"\"\n   [(set (pc)\n-        (if_then_else (ltu (cc0) (const_int 0))\n+\t(if_then_else (ltu (cc0) (const_int 0))\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n@@ -1149,15 +1111,15 @@\n \n (define_insn \"jump\"\n   [(set (pc)\n-        (label_ref (match_operand 0 \"\" \"\")))]\n+\t(label_ref (match_operand 0 \"\" \"\")))]\n   \"\"\n   \"*\n   return (arm_output_asm_insn (\\\"b\\\\t%l0\\\", operands));\n \")\n \n (define_insn \"call\"\n   [(call (match_operand 0 \"memory_operand\" \"m\")\n-         (match_operand 1 \"general_operand\" \"g\"))\n+\t (match_operand 1 \"general_operand\" \"g\"))\n    (clobber (reg:SI 14))]\n   \"\"\n   \"*\n@@ -1166,8 +1128,8 @@\n \n (define_insn \"call_value\"\n   [(set (match_operand 0 \"\" \"=rf\")\n-        (call (match_operand 1 \"memory_operand\" \"m\")\n-        (match_operand 2 \"general_operand\" \"g\")))\n+\t(call (match_operand 1 \"memory_operand\" \"m\")\n+\t(match_operand 2 \"general_operand\" \"g\")))\n    (clobber (reg:SI 14))]\n   \"\"\n   \"*\n@@ -1179,7 +1141,7 @@\n \n (define_insn \"\"\n   [(call (mem:SI (match_operand:SI 0 \"\" \"i\"))\n-         (match_operand:SI 1 \"general_operand\" \"g\"))\n+\t (match_operand:SI 1 \"general_operand\" \"g\"))\n    (clobber (reg:SI 14))]\n   \"GET_CODE (operands[0]) == SYMBOL_REF\"\n   \"*\n@@ -1188,8 +1150,8 @@\n \n (define_insn \"\"\n   [(set (match_operand 0 \"register_operand\" \"=rf\")\n-        (call (mem:SI (match_operand:SI 1 \"\" \"i\"))\n-        (match_operand:SI 2 \"general_operand\" \"g\")))\n+\t(call (mem:SI (match_operand:SI 1 \"\" \"i\"))\n+\t(match_operand:SI 2 \"general_operand\" \"g\")))\n    (clobber (reg:SI 14))]\n   \"GET_CODE(operands[1]) == SYMBOL_REF\"\n   \"*\n@@ -1198,7 +1160,7 @@\n \n (define_insn \"tablejump\"\n   [(set (pc)\n-        (match_operand:SI 0 \"register_operand\" \"r\"))\n+\t(match_operand:SI 0 \"register_operand\" \"r\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"\"\n   \"*\n@@ -1207,7 +1169,7 @@\n \n (define_insn \"indirect_jump\"\n   [(set (pc)\n-        (match_operand:SI 0 \"register_operand\" \"r\"))]\n+\t(match_operand:SI 0 \"register_operand\" \"r\"))]\n   \"\"\n   \"*\n   return (arm_output_asm_insn (\\\"mov\\\\tpc, %0\\\\t@ indirect jump\\\", operands));"}]}