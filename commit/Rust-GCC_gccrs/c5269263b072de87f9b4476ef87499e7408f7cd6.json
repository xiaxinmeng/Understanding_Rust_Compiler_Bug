{"sha": "c5269263b072de87f9b4476ef87499e7408f7cd6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUyNjkyNjNiMDcyZGU4N2Y5YjQ0NzZlZjg3NDk5ZTc0MDhmN2NkNg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-01-11T19:38:52Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-01-11T19:38:52Z"}, "message": "Add some reproducers for issues found developing the location-wrappers patch\n\ngcc/testsuite/ChangeLog:\n\tPR c++/43486\n\t* g++.dg/wrappers: New subdirectory.\n\t* g++.dg/wrappers/README: New file.\n\t* g++.dg/wrappers/alloc.C: New test case.\n\t* g++.dg/wrappers/cow-istream-string.C: New test case.\n\t* g++.dg/wrappers/cp-stdlib.C: New test case.\n\t* g++.dg/wrappers/sanitizer_coverage_libcdep_new.C: New test case.\n\t* g++.dg/wrappers/wrapper-around-type-pack-expansion.C: New test\n\tcase.\n\nFrom-SVN: r256552", "tree": {"sha": "b69305e7dcb637ed312054620d3eeb764ca65c5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b69305e7dcb637ed312054620d3eeb764ca65c5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5269263b072de87f9b4476ef87499e7408f7cd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5269263b072de87f9b4476ef87499e7408f7cd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5269263b072de87f9b4476ef87499e7408f7cd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5269263b072de87f9b4476ef87499e7408f7cd6/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e2c0d088881e0c8e3ed27bba082187d091631421", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2c0d088881e0c8e3ed27bba082187d091631421", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2c0d088881e0c8e3ed27bba082187d091631421"}], "stats": {"total": 261, "additions": 261, "deletions": 0}, "files": [{"sha": "1ba529d00cdda1c40c9ea0391c11651f5d06effa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5269263b072de87f9b4476ef87499e7408f7cd6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5269263b072de87f9b4476ef87499e7408f7cd6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c5269263b072de87f9b4476ef87499e7408f7cd6", "patch": "@@ -1,3 +1,15 @@\n+2018-01-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/43486\n+\t* g++.dg/wrappers: New subdirectory.\n+\t* g++.dg/wrappers/README: New file.\n+\t* g++.dg/wrappers/alloc.C: New test case.\n+\t* g++.dg/wrappers/cow-istream-string.C: New test case.\n+\t* g++.dg/wrappers/cp-stdlib.C: New test case.\n+\t* g++.dg/wrappers/sanitizer_coverage_libcdep_new.C: New test case.\n+\t* g++.dg/wrappers/wrapper-around-type-pack-expansion.C: New test\n+\tcase.\n+\n 2018-01-11  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR middle-end/83718"}, {"sha": "9cba9701d12347e894963d18b4e9e324be6fd3e5", "filename": "gcc/testsuite/g++.dg/wrappers/README", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5269263b072de87f9b4476ef87499e7408f7cd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5269263b072de87f9b4476ef87499e7408f7cd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2FREADME?ref=c5269263b072de87f9b4476ef87499e7408f7cd6", "patch": "@@ -0,0 +1,2 @@\n+This directory contains reproducers for issues seen when adding location\n+wrapper nodes to the C++ frontend (ICEs and behavior changes)."}, {"sha": "e004470dbe9cff24c36377ca2271cb9b1929285f", "filename": "gcc/testsuite/g++.dg/wrappers/alloc.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5269263b072de87f9b4476ef87499e7408f7cd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2Falloc.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5269263b072de87f9b4476ef87499e7408f7cd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2Falloc.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2Falloc.C?ref=c5269263b072de87f9b4476ef87499e7408f7cd6", "patch": "@@ -0,0 +1,43 @@\n+// { dg-do compile { target c++11 } }\n+\n+template<typename _Default, typename _AlwaysVoid, template<typename...> class _Op, typename... _Args>\n+struct __detector\n+{\n+  using type = _Op<_Args...>;\n+};\n+template<typename _Default, template<typename...> class _Op, typename... _Args>\n+using __detected_or = __detector<_Default, void, _Op, _Args...>;\n+template<typename _Default, template<typename...> class _Op, typename... _Args>\n+using __detected_or_t = typename __detected_or<_Default, _Op, _Args...>::type;\n+template<typename _Alloc>\n+struct allocator_traits {\n+  template<typename _Tp>\n+  using __pointer = typename _Tp::pointer;\n+  using pointer = __detected_or_t<typename _Alloc::value_type*, __pointer, _Alloc>;\n+};\n+template<typename _Storage_policy>\n+struct _Pointer_adapter {\n+  typedef typename _Storage_policy::element_type element_type;\n+  typedef element_type& reference;\n+};\n+template<typename _Tp>\n+inline _Tp* addressof(_Tp& __r); // { dg-warning \"used but never defined\" }\n+template<typename _Alloc>\n+struct __allocated_ptr {\n+  __allocated_ptr()\n+  {\n+    using pointer = typename allocator_traits<_Alloc>::pointer;\n+    typename _Pointer_adapter<pointer>::reference __r = *(int*)0;\n+    addressof(__r);\n+  }\n+};\n+template<typename _Tp>\n+struct _Std_pointer_impl {\n+  typedef _Tp element_type;\n+};\n+template<typename Tp>\n+struct CustomPointerAlloc {\n+  typedef Tp value_type;\n+  typedef _Pointer_adapter<_Std_pointer_impl<Tp>> pointer;\n+};\n+__allocated_ptr<CustomPointerAlloc<int>> __guard_ptr;"}, {"sha": "23b0585c11178152e782eaffb30f8b0b42e8a397", "filename": "gcc/testsuite/g++.dg/wrappers/cow-istream-string.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5269263b072de87f9b4476ef87499e7408f7cd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2Fcow-istream-string.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5269263b072de87f9b4476ef87499e7408f7cd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2Fcow-istream-string.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2Fcow-istream-string.C?ref=c5269263b072de87f9b4476ef87499e7408f7cd6", "patch": "@@ -0,0 +1,15 @@\n+template<typename _CharT>\n+struct basic_string {\n+  static const _CharT _S_terminal;\n+  static void assign(const _CharT& __c2);\n+  void _M_set_length_and_sharable() {\n+    assign(_S_terminal);\n+  }\n+};\n+\n+template<typename _CharT>\n+const _CharT basic_string<_CharT>::_S_terminal = _CharT();\n+\n+void getline(basic_string<char>& __str) {\n+  __str._M_set_length_and_sharable();\n+}"}, {"sha": "d29585f48a31480ccaa43ca7c900103bc10961cc", "filename": "gcc/testsuite/g++.dg/wrappers/cp-stdlib.C", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5269263b072de87f9b4476ef87499e7408f7cd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2Fcp-stdlib.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5269263b072de87f9b4476ef87499e7408f7cd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2Fcp-stdlib.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2Fcp-stdlib.C?ref=c5269263b072de87f9b4476ef87499e7408f7cd6", "patch": "@@ -0,0 +1,117 @@\n+/* At one time this triggered ICEs with location wrapper nodes,\n+   apparently requiring error-recovery (hence the various syntax\n+   errors in this file.  */\n+\n+// { dg-excess-errors \"expected to be full of errors, but not an ICE\" }\n+\n+namespace std\n+{\n+  inline namespace __cxx11 __attribute__((__abi_tag__ (\"cxx11\"))) { }\n+}\n+namespace __gnu_cxx __attribute__ ((__visibility__ (\"default\")))\n+{\n+  template<typename _Tp>\n+    class new_allocator\n+    {\n+      typedef _Tp value_type;\n+    };\n+}\n+namespace std\n+{\n+  template<typename _Tp>\n+    using __allocator_base = __gnu_cxx::new_allocator<_Tp>;\n+}\n+namespace std __attribute__ ((__visibility__ (\"default\")))\n+{\n+    {\n+    };\n+  template<typename _Tp>\n+    class allocator : public __allocator_base<_Tp>\n+    {\n+    };\n+  template<typename _Alloc>\n+    struct allocator_traits : __allocator_traits_base\n+    {\n+    };\n+  template<typename _Tp>\n+    struct allocator_traits<allocator<_Tp>>\n+    {\n+      using allocator_type = allocator<_Tp>;\n+      template<typename _Up>\n+ using rebind_alloc = allocator<_Up>;\n+      allocate(allocator_type& __a, size_type __n)\n+    };\n+}\n+namespace __gnu_cxx __attribute__ ((__visibility__ (\"default\")))\n+{\n+template<typename _Alloc, typename = typename _Alloc::value_type>\n+  struct __alloc_traits\n+  : std::allocator_traits<_Alloc>\n+  {\n+    typedef std::allocator_traits<_Alloc> _Base_type;\n+    template<typename _Tp>\n+      struct rebind\n+      { typedef typename _Base_type::template rebind_alloc<_Tp> other; };\n+  };\n+{\n+    {\n+ }\n+ }\n+    }\n+    {\n+ {\n+    }\n+}\n+namespace std __attribute__ ((__visibility__ (\"default\")))\n+{\n+    struct char_traits;\n+namespace __cxx11 {\n+  template<typename _CharT, typename _Traits = char_traits<_CharT>,\n+           typename _Alloc = allocator<_CharT> >\n+    class basic_string;\n+    }\n+}\n+namespace std __attribute__ ((__visibility__ (\"default\")))\n+{\n+namespace __cxx11 {\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    class basic_string\n+    {\n+      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template\n+ rebind<_CharT>::other _Char_alloc_type;\n+      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;\n+    public:\n+      {\n+   {\n+   }\n+      }\n+      operator=(const basic_string& __str)\n+      {\n+   {\n+       {\n+    {\n+      const auto __len = __str.size();\n+      auto __alloc = __str._M_get_allocator();\n+      auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1);\n+    }\n+       }\n+   }\n+      }\n+      {\n+      }\n+      size() const noexcept\n+     }\n+namespace filesystem\n+{\n+  class path\n+  {\n+    typedef char value_type;\n+    typedef std::basic_string<value_type> string_type;\n+      {\n+    }\n+    string_type _M_pathname;\n+  };\n+  class directory_entry\n+  {\n+    void assign(const filesystem::path& __p) { _M_path = __p; }\n+    filesystem::path _M_path;"}, {"sha": "2be140b1b49db2e428db1b66ef75f56f73d6eb12", "filename": "gcc/testsuite/g++.dg/wrappers/sanitizer_coverage_libcdep_new.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5269263b072de87f9b4476ef87499e7408f7cd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2Fsanitizer_coverage_libcdep_new.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5269263b072de87f9b4476ef87499e7408f7cd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2Fsanitizer_coverage_libcdep_new.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2Fsanitizer_coverage_libcdep_new.C?ref=c5269263b072de87f9b4476ef87499e7408f7cd6", "patch": "@@ -0,0 +1,22 @@\n+namespace __sanitizer {\n+\n+enum FileAccessMode {\n+  RdOnly,\n+  WrOnly,\n+  RdWr\n+};\n+\n+int OpenFile(const char *filename, int mode,\n+\t     int *errno_p);\n+}\n+\n+using namespace __sanitizer;\n+\n+namespace __sancov {\n+\n+static int OpenFile(const char* path) {\n+  int err;\n+  int fd = OpenFile(path, WrOnly, &err);\n+  return fd;\n+}\n+}"}, {"sha": "5072d1ad59d2bc717f63c1fa0062a7e3b915e8b8", "filename": "gcc/testsuite/g++.dg/wrappers/wrapper-around-type-pack-expansion.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5269263b072de87f9b4476ef87499e7408f7cd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2Fwrapper-around-type-pack-expansion.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5269263b072de87f9b4476ef87499e7408f7cd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2Fwrapper-around-type-pack-expansion.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2Fwrapper-around-type-pack-expansion.C?ref=c5269263b072de87f9b4476ef87499e7408f7cd6", "patch": "@@ -0,0 +1,50 @@\n+// { dg-do compile { target c++11 } }\n+\n+typedef long unsigned int size_t;\n+\n+template<typename _Tp>\n+struct remove_reference {};\n+\n+template<typename _Tp>\n+constexpr _Tp&&\n+forward(typename remove_reference<_Tp>::type& __t) noexcept\n+{\n+}\n+\n+struct __allocator_traits_base {\n+  template<typename _Tp, typename _Up, typename = void>\n+  struct __rebind\n+  {\n+    using type = typename _Tp::template rebind<_Up>::other;\n+  };\n+};\n+\n+template<typename _Alloc, typename _Up>\n+using __alloc_rebind = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;\n+\n+template<typename _Alloc>  struct allocator_traits {\n+  template<typename _Tp>  using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;\n+  template<typename _Tp, typename... _Args>\n+  static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)\n+    -> decltype(_S_construct(__a, __p, forward<_Args>(__args)...))  {   }\n+};\n+\n+template<typename _Alloc, typename = typename _Alloc::value_type>\n+struct __alloc_traits    : allocator_traits<_Alloc>    {\n+  typedef allocator_traits<_Alloc> _Base_type;\n+  template<typename _Tp>       struct rebind       {   typedef typename _Base_type::template rebind_alloc<_Tp> other;   };\n+};\n+\n+template<typename _Tp>     class allocator {\n+  typedef _Tp value_type;\n+  template<typename _Tp1>  struct rebind  {   typedef allocator<_Tp1> other;   };\n+};\n+\n+template<typename _CharT, typename _Alloc>\n+class basic_string {\n+  typedef typename __alloc_traits<_Alloc>::template rebind<_CharT>::other _Char_alloc_type;\n+};\n+\n+template<size_t _Nw>  struct _Base_bitset {\n+  static void foo (basic_string<char, allocator<char> >) {}\n+};"}]}