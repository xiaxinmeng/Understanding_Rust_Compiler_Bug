{"sha": "7e73a3cb5c0cd975ef41e21dbbcdc4668182a151", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U3M2EzY2I1YzBjZDk3NWVmNDFlMjFkYmJjZGM0NjY4MTgyYTE1MQ==", "commit": {"author": {"name": "Brooks Moses", "email": "brooks.moses@codesourcery.com", "date": "2007-05-04T21:07:22Z"}, "committer": {"name": "Brooks Moses", "email": "brooks@gcc.gnu.org", "date": "2007-05-04T21:07:22Z"}, "message": "intrinsic.texi (CMPLX): Document result kind.\n\n* intrinsic.texi (CMPLX): Document result kind.\n(COMPLEX): Add documentation.\n\nFrom-SVN: r124448", "tree": {"sha": "f0b98e4f1ba2d0de188d247e0a84cab3facd11b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0b98e4f1ba2d0de188d247e0a84cab3facd11b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e73a3cb5c0cd975ef41e21dbbcdc4668182a151", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e73a3cb5c0cd975ef41e21dbbcdc4668182a151", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e73a3cb5c0cd975ef41e21dbbcdc4668182a151", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e73a3cb5c0cd975ef41e21dbbcdc4668182a151/comments", "author": null, "committer": null, "parents": [{"sha": "ddd3985ef531626ad904f1f2b7d72a07d72b6cd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddd3985ef531626ad904f1f2b7d72a07d72b6cd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddd3985ef531626ad904f1f2b7d72a07d72b6cd5"}], "stats": {"total": 65, "additions": 64, "deletions": 1}, "files": [{"sha": "71b388fe8fca0e268df4f09e938bc5c734b981df", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e73a3cb5c0cd975ef41e21dbbcdc4668182a151/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e73a3cb5c0cd975ef41e21dbbcdc4668182a151/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7e73a3cb5c0cd975ef41e21dbbcdc4668182a151", "patch": "@@ -1,3 +1,8 @@\n+2007-05-04  Brooks Moses  <brooks.moses@codesourcery.com>\n+\n+\t* intrinsic.texi (CMPLX): Document result kind.\n+\t(COMPLEX): Add documentation.\n+\n 2007-05-04  Daniel Franke  <franke.daniel@gmail.com>\n \n \tPR fortran/31760"}, {"sha": "7ee368361246519f3876610ff94f791edfe6d99e", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e73a3cb5c0cd975ef41e21dbbcdc4668182a151/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e73a3cb5c0cd975ef41e21dbbcdc4668182a151/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=7e73a3cb5c0cd975ef41e21dbbcdc4668182a151", "patch": "@@ -76,6 +76,7 @@ Some basic guidelines for editing this document:\n * @code{CHMOD}:         CHMOD,     Change access permissions of files\n * @code{CMPLX}:         CMPLX,     Complex conversion function\n * @code{COMMAND_ARGUMENT_COUNT}: COMMAND_ARGUMENT_COUNT, Get number of command line arguments\n+* @code{COMPLEX}:       COMPLEX,   Complex conversion function\n * @code{CONJG}:         CONJG,     Complex conjugate function\n * @code{COS}:           COS,       Cosine function\n * @code{COSH}:          COSH,      Hyperbolic cosine function\n@@ -2083,7 +2084,10 @@ Elemental function\n @end multitable\n \n @item @emph{Return value}:\n-The return value is of type @code{COMPLEX(*)}\n+The return value is of @code{COMPLEX} type, with a kind equal to\n+@var{KIND} if it is specified.  If @var{KIND} is not specified, the\n+result is of the default @code{COMPLEX} kind, regardless of the kinds of\n+@var{X} and @var{Y}. \n \n @item @emph{Example}:\n @smallexample\n@@ -2095,6 +2099,9 @@ program test_cmplx\n     print *, z, cmplx(x)\n end program test_cmplx\n @end smallexample\n+\n+@item @emph{See also}:\n+@ref{COMPLEX}\n @end table\n \n \n@@ -2143,6 +2150,57 @@ end program test_command_argument_count\n \n \n \n+@node COMPLEX\n+@section @code{COMPLEX} --- Complex conversion function\n+@fnindex COMPLEX\n+@cindex complex numbers, conversion to\n+@cindex conversion, to complex\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{COMPLEX(X, Y)} returns a complex number where @var{X} is converted\n+to the real component and @var{Y} is converted to the imaginary\n+component.\n+\n+@item @emph{Standard}:\n+GNU extension\n+\n+@item @emph{Class}:\n+Elemental function\n+\n+@item @emph{Syntax}:\n+@code{RESULT = COMPLEX(X, Y)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .70\n+@item @var{X} @tab The type may be @code{INTEGER(*)} or @code{REAL(*)}.\n+@item @var{Y} @tab The type may be @code{INTEGER(*)} or @code{REAL(*)}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+If @var{X} and @var{Y} are both of @code{INTEGER} type, then the return\n+value is of default @code{COMPLEX} type.\n+\n+If @var{X} and @var{Y} are of @code{REAL} type, or one is of @code{REAL}\n+type and one is of @code{INTEGER} type, then the return value is of\n+@code{COMPLEX} type with a kind equal to that of the @code{REAL}\n+argument with the highest precision.  \n+\n+@item @emph{Example}:\n+@smallexample\n+program test_complex\n+    integer :: i = 42\n+    real :: x = 3.14\n+    print *, complex(i, x)\n+end program test_complex\n+@end smallexample\n+\n+@item @emph{See also}:\n+@ref{CMPLX}\n+@end table\n+\n+\n+\n @node CONJG\n @section @code{CONJG} --- Complex conjugate function \n @fnindex CONJG"}]}