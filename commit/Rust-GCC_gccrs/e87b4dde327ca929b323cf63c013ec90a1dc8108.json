{"sha": "e87b4dde327ca929b323cf63c013ec90a1dc8108", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg3YjRkZGUzMjdjYTkyOWIzMjNjZjYzYzAxM2VjOTBhMWRjODEwOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-05-31T18:06:39Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-05-31T18:06:39Z"}, "message": "re PR c++/44870 ([C++0x] error when calling function with rvalue argument inside template)\n\n\tPR c++/44870\n\t* tree.c (lvalue_kind): Recurse on NON_DEPENDENT_EXPR.  Handle\n\tARROW_EXPR, TYPEID_EXPR, and arbitrary class-valued expressions.\n\t(build_min_non_dep): Preserve reference refs.\n\t(build_min_non_dep_call_vec): Likewise\n\nFrom-SVN: r174499", "tree": {"sha": "e2ab9d1734e09c9e6a22e38a3ca145f2f51d55ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2ab9d1734e09c9e6a22e38a3ca145f2f51d55ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e87b4dde327ca929b323cf63c013ec90a1dc8108", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e87b4dde327ca929b323cf63c013ec90a1dc8108", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e87b4dde327ca929b323cf63c013ec90a1dc8108", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e87b4dde327ca929b323cf63c013ec90a1dc8108/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5cc93ee0999f3dcea86b3b58623a85ec8f96c48a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cc93ee0999f3dcea86b3b58623a85ec8f96c48a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cc93ee0999f3dcea86b3b58623a85ec8f96c48a"}], "stats": {"total": 52, "additions": 43, "deletions": 9}, "files": [{"sha": "10a1d776df906baf34e444ace710ea4056ec5c9a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e87b4dde327ca929b323cf63c013ec90a1dc8108/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e87b4dde327ca929b323cf63c013ec90a1dc8108/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e87b4dde327ca929b323cf63c013ec90a1dc8108", "patch": "@@ -1,3 +1,11 @@\n+2011-05-31  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/44870\n+\t* tree.c (lvalue_kind): Recurse on NON_DEPENDENT_EXPR.  Handle\n+\tARROW_EXPR, TYPEID_EXPR, and arbitrary class-valued expressions.\n+\t(build_min_non_dep): Preserve reference refs.\n+\t(build_min_non_dep_call_vec): Likewise\n+\n 2011-05-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/49223"}, {"sha": "11e195ea5819eba73eebefe1e4862087edb511ae", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e87b4dde327ca929b323cf63c013ec90a1dc8108/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e87b4dde327ca929b323cf63c013ec90a1dc8108/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=e87b4dde327ca929b323cf63c013ec90a1dc8108", "patch": "@@ -139,6 +139,7 @@ lvalue_kind (const_tree ref)\n \t  && DECL_IN_AGGR_P (ref))\n \treturn clk_none;\n     case INDIRECT_REF:\n+    case ARROW_EXPR:\n     case ARRAY_REF:\n     case PARM_DECL:\n     case RESULT_DECL:\n@@ -170,6 +171,7 @@ lvalue_kind (const_tree ref)\n       break;\n \n     case MODIFY_EXPR:\n+    case TYPEID_EXPR:\n       return clk_ordinary;\n \n     case COMPOUND_EXPR:\n@@ -182,7 +184,9 @@ lvalue_kind (const_tree ref)\n       return (CLASS_TYPE_P (TREE_TYPE (ref)) ? clk_class : clk_none);\n \n     case CALL_EXPR:\n-      /* Any class-valued call would be wrapped in a TARGET_EXPR.  */\n+      /* We can see calls outside of TARGET_EXPR in templates.  */\n+      if (CLASS_TYPE_P (TREE_TYPE (ref)))\n+\treturn clk_class;\n       return clk_none;\n \n     case FUNCTION_DECL:\n@@ -199,14 +203,16 @@ lvalue_kind (const_tree ref)\n       return lvalue_kind (BASELINK_FUNCTIONS (CONST_CAST_TREE (ref)));\n \n     case NON_DEPENDENT_EXPR:\n-      /* We must consider NON_DEPENDENT_EXPRs to be lvalues so that\n-\t things like \"&E\" where \"E\" is an expression with a\n-\t non-dependent type work. It is safe to be lenient because an\n-\t error will be issued when the template is instantiated if \"E\"\n-\t is not an lvalue.  */\n-      return clk_ordinary;\n+      /* We used to just return clk_ordinary for NON_DEPENDENT_EXPR because\n+\t it was safe enough for C++98, but in C++0x lvalues don't bind to\n+\t rvalue references, so we get bogus errors (c++/44870).  */\n+      return lvalue_kind (TREE_OPERAND (ref, 0));\n \n     default:\n+      if (!TREE_TYPE (ref))\n+\treturn clk_none;\n+      if (CLASS_TYPE_P (TREE_TYPE (ref)))\n+\treturn clk_class;\n       break;\n     }\n \n@@ -1985,6 +1991,9 @@ build_min_non_dep (enum tree_code code, tree non_dep, ...)\n \n   va_start (p, non_dep);\n \n+  if (REFERENCE_REF_P (non_dep))\n+    non_dep = TREE_OPERAND (non_dep, 0);\n+\n   t = make_node (code);\n   length = TREE_CODE_LENGTH (code);\n   TREE_TYPE (t) = TREE_TYPE (non_dep);\n@@ -2002,7 +2011,7 @@ build_min_non_dep (enum tree_code code, tree non_dep, ...)\n     COMPOUND_EXPR_OVERLOADED (t) = 1;\n \n   va_end (p);\n-  return t;\n+  return convert_from_reference (t);\n }\n \n /* Similar to `build_nt_call_vec', but for template definitions of\n@@ -2013,9 +2022,11 @@ tree\n build_min_non_dep_call_vec (tree non_dep, tree fn, VEC(tree,gc) *argvec)\n {\n   tree t = build_nt_call_vec (fn, argvec);\n+  if (REFERENCE_REF_P (non_dep))\n+    non_dep = TREE_OPERAND (non_dep, 0);\n   TREE_TYPE (t) = TREE_TYPE (non_dep);\n   TREE_SIDE_EFFECTS (t) = TREE_SIDE_EFFECTS (non_dep);\n-  return t;\n+  return convert_from_reference (t);\n }\n \n tree"}, {"sha": "5767d0972d5a7fdea1b6e6055b4f0c2e1be0cf41", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e87b4dde327ca929b323cf63c013ec90a1dc8108/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e87b4dde327ca929b323cf63c013ec90a1dc8108/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e87b4dde327ca929b323cf63c013ec90a1dc8108", "patch": "@@ -1,3 +1,7 @@\n+2011-05-31  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/rv-template1.C: New.\n+\n 2011-05-31  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/49235"}, {"sha": "11f53bd1c0a526e9ba8f731dce32d85bfb61aa0f", "filename": "gcc/testsuite/g++.dg/cpp0x/rv-template1.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e87b4dde327ca929b323cf63c013ec90a1dc8108/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-template1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e87b4dde327ca929b323cf63c013ec90a1dc8108/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-template1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-template1.C?ref=e87b4dde327ca929b323cf63c013ec90a1dc8108", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/44870\n+// { dg-options -std=c++0x }\n+\n+void foo(int&& data);\n+\n+template <typename T>\n+void bar(T t)\n+{ foo(int()); }\n+\n+void baz()\n+{ bar(0); }"}]}