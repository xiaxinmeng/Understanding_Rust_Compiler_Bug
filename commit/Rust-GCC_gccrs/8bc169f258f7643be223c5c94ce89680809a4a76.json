{"sha": "8bc169f258f7643be223c5c94ce89680809a4a76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJjMTY5ZjI1OGY3NjQzYmUyMjNjNWM5NGNlODk2ODA4MDlhNGE3Ng==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1993-09-24T19:38:20Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1993-09-24T19:38:20Z"}, "message": "cse.c: (FIXED_REGNO_P): HARD_FRAME_POINTER_REGNUM is fixed.\n\n* cse.c: (FIXED_REGNO_P): HARD_FRAME_POINTER_REGNUM is fixed.\n(CHEAP_REG): HARD_FRAME_POINTER_REGNUM is cheap.\n(FIXED_BASE_PLUS): Allow hard frame pointer as base.\n(NONZERO_BASE_PLUS_P): Likewise.\n(cannon_hash, case REG): Add HARD_FRAME_POINTER_REGNUM to list of\nspecial registers for SMALL_REGISTER_CLASSES.\n(find_best_addr): Addresses containing HARD_FRAME_POINTER_REGNUM\ncannot be replaced.\n(cse_main): value in HARD_FRAME_POINTER_REGNUM is preserved across calls.\n\nFrom-SVN: r5451", "tree": {"sha": "80957b8659fd617e686cfdb11670437dbe5b301e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80957b8659fd617e686cfdb11670437dbe5b301e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bc169f258f7643be223c5c94ce89680809a4a76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bc169f258f7643be223c5c94ce89680809a4a76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bc169f258f7643be223c5c94ce89680809a4a76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bc169f258f7643be223c5c94ce89680809a4a76/comments", "author": null, "committer": null, "parents": [{"sha": "6d7096b078685292f6914a35847f4c61b9321df1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d7096b078685292f6914a35847f4c61b9321df1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d7096b078685292f6914a35847f4c61b9321df1"}], "stats": {"total": 33, "additions": 22, "deletions": 11}, "files": [{"sha": "36d518d7edf920f77edc9279b2d82a83274bf62a", "filename": "gcc/cse.c", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc169f258f7643be223c5c94ce89680809a4a76/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc169f258f7643be223c5c94ce89680809a4a76/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=8bc169f258f7643be223c5c94ce89680809a4a76", "patch": "@@ -440,11 +440,13 @@ struct table_elt\n    but not if it is an overlapping register.  */\n #ifdef OVERLAPPING_REGNO_P\n #define FIXED_REGNO_P(N)  \\\n-  (((N) == FRAME_POINTER_REGNUM || fixed_regs[N])\t\\\n+  (((N) == FRAME_POINTER_REGNUM || (N) == HARD_FRAME_POINTER_REGNUM \\\n+    || fixed_regs[N])\t  \\\n    && ! OVERLAPPING_REGNO_P ((N)))\n #else\n #define FIXED_REGNO_P(N)  \\\n-  ((N) == FRAME_POINTER_REGNUM || fixed_regs[N])\n+  ((N) == FRAME_POINTER_REGNUM || (N) == HARD_FRAME_POINTER_REGNUM \\\n+   || fixed_regs[N])\n #endif\n \n /* Compute cost of X, as stored in the `cost' field of a table_elt.  Fixed\n@@ -453,10 +455,10 @@ struct table_elt\n    a cost of 2.  Aside from these special cases, call `rtx_cost'.  */\n \n #define CHEAP_REG(N) \\\n-  ((N) == FRAME_POINTER_REGNUM || (N) == STACK_POINTER_REGNUM \\\n-   || (N) == ARG_POINTER_REGNUM\t\t\t\t\\\n-   || ((N) >= FIRST_VIRTUAL_REGISTER && (N) <= LAST_VIRTUAL_REGISTER) \\\n-   || ((N) < FIRST_PSEUDO_REGISTER\t\t\t\\\n+  ((N) == FRAME_POINTER_REGNUM || (N) == HARD_FRAME_POINTER_REGNUM \t\\\n+   || (N) == STACK_POINTER_REGNUM || (N) == ARG_POINTER_REGNUM\t     \t\\\n+   || ((N) >= FIRST_VIRTUAL_REGISTER && (N) <= LAST_VIRTUAL_REGISTER) \t\\\n+   || ((N) < FIRST_PSEUDO_REGISTER\t\t\t\t\t\\\n        && FIXED_REGNO_P (N) && REGNO_REG_CLASS (N) != NO_REGS))\n \n #define COST(X)\t\t\t\t\t\t\\\n@@ -554,11 +556,13 @@ struct cse_basic_block_data {\n    by integrate.c, which is called before virtual register instantiation.  */\n \n #define FIXED_BASE_PLUS_P(X)\t\t\t\t\t\\\n-  ((X) == frame_pointer_rtx || (X) == arg_pointer_rtx\t\t\\\n+  ((X) == frame_pointer_rtx || (X) == hard_frame_pointer_rtx\t\\\n+   || (X) == arg_pointer_rtx\t\t\t\t\t\\\n    || (X) == virtual_stack_vars_rtx\t\t\t\t\\\n    || (X) == virtual_incoming_args_rtx\t\t\t\t\\\n    || (GET_CODE (X) == PLUS && GET_CODE (XEXP (X, 1)) == CONST_INT \\\n        && (XEXP (X, 0) == frame_pointer_rtx\t\t\t\\\n+\t   || XEXP (X, 0) == hard_frame_pointer_rtx\t\t\\\n \t   || XEXP (X, 0) == arg_pointer_rtx\t\t\t\\\n \t   || XEXP (X, 0) == virtual_stack_vars_rtx\t\t\\\n \t   || XEXP (X, 0) == virtual_incoming_args_rtx)))\n@@ -570,11 +574,12 @@ struct cse_basic_block_data {\n    the i960, the arg pointer is zero when it is unused.  */\n \n #define NONZERO_BASE_PLUS_P(X)\t\t\t\t\t\\\n-  ((X) == frame_pointer_rtx\t\t\t\t\t\\\n+  ((X) == frame_pointer_rtx || (X) == hard_frame_pointer_rtx\t\\\n    || (X) == virtual_stack_vars_rtx\t\t\t\t\\\n    || (X) == virtual_incoming_args_rtx\t\t\t\t\\\n    || (GET_CODE (X) == PLUS && GET_CODE (XEXP (X, 1)) == CONST_INT \\\n        && (XEXP (X, 0) == frame_pointer_rtx\t\t\t\\\n+\t   || XEXP (X, 0) == hard_frame_pointer_rtx\t\t\\\n \t   || XEXP (X, 0) == arg_pointer_rtx\t\t\t\\\n \t   || XEXP (X, 0) == virtual_stack_vars_rtx\t\t\\\n \t   || XEXP (X, 0) == virtual_incoming_args_rtx))\t\\\n@@ -1839,6 +1844,7 @@ canon_hash (x, mode)\n #ifdef SMALL_REGISTER_CLASSES\n \t\t|| (! fixed_regs[regno]\n \t\t    && regno != FRAME_POINTER_REGNUM\n+\t\t    && regno != HARD_FRAME_POINTER_REGNUM\n \t\t    && regno != ARG_POINTER_REGNUM\n \t\t    && regno != STACK_POINTER_REGNUM)\n #endif\n@@ -2510,10 +2516,12 @@ find_best_addr (insn, loc)\n        && GET_CODE (XEXP (addr, 0)) == REG\n        && GET_CODE (XEXP (addr, 1)) == CONST_INT\n        && (regno = REGNO (XEXP (addr, 0)),\n-\t   regno == FRAME_POINTER_REGNUM || regno == ARG_POINTER_REGNUM))\n+\t   regno == FRAME_POINTER_REGNUM || regno == HARD_FRAME_POINTER_REGNUM\n+\t   || regno == ARG_POINTER_REGNUM))\n       || (GET_CODE (addr) == REG\n-\t  && (regno = REGNO (addr),\n-\t      regno == FRAME_POINTER_REGNUM || regno == ARG_POINTER_REGNUM))\n+\t  && (regno = REGNO (addr), regno == FRAME_POINTER_REGNUM\n+\t      || regno == HARD_FRAME_POINTER_REGNUM\n+\t      || regno == ARG_POINTER_REGNUM))\n       || CONSTANT_ADDRESS_P (addr))\n     return;\n \n@@ -7805,6 +7813,9 @@ cse_main (f, nregs, after_loop, file)\n \n \t && i != STACK_POINTER_REGNUM\n \t && i != FRAME_POINTER_REGNUM\n+#if HARD_FRAME_POINTER_REGNUM != FRAME_POINTER_REGNUM\n+\t && i != HARD_FRAME_POINTER_REGNUM\n+#endif\n #if ARG_POINTER_REGNUM != FRAME_POINTER_REGNUM\n \t && ! (i == ARG_POINTER_REGNUM && fixed_regs[i])\n #endif"}]}