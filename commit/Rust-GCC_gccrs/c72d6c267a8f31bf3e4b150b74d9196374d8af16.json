{"sha": "c72d6c267a8f31bf3e4b150b74d9196374d8af16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzcyZDZjMjY3YThmMzFiZjNlNGIxNTBiNzRkOTE5NjM3NGQ4YWYxNg==", "commit": {"author": {"name": "Hartmut Penner", "email": "hpenner@de.ibm.com", "date": "2004-01-20T16:51:07Z"}, "committer": {"name": "Hartmut Penner", "email": "hpenner@gcc.gnu.org", "date": "2004-01-20T16:51:07Z"}, "message": "* gcc/config/rs6000/rs6000.c (function_arg) Handle\n        vector register special in function without prototype.\n        (function_arg_advance): Vector parameters get always\n        GPRs allocated for the linux64 target.\n\nFrom-SVN: r76211", "tree": {"sha": "973d3db7e1b2f1afe73ca8da8591c896f6af103f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/973d3db7e1b2f1afe73ca8da8591c896f6af103f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c72d6c267a8f31bf3e4b150b74d9196374d8af16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c72d6c267a8f31bf3e4b150b74d9196374d8af16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c72d6c267a8f31bf3e4b150b74d9196374d8af16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c72d6c267a8f31bf3e4b150b74d9196374d8af16/comments", "author": null, "committer": null, "parents": [{"sha": "1bec19ccf7462019c3dc0987c818d8f7c55c5674", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bec19ccf7462019c3dc0987c818d8f7c55c5674", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bec19ccf7462019c3dc0987c818d8f7c55c5674"}], "stats": {"total": 44, "additions": 39, "deletions": 5}, "files": [{"sha": "2a47a1bfb45fe0546423d0f80348fef810f510ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c72d6c267a8f31bf3e4b150b74d9196374d8af16/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c72d6c267a8f31bf3e4b150b74d9196374d8af16/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c72d6c267a8f31bf3e4b150b74d9196374d8af16", "patch": "@@ -1,3 +1,10 @@\n+2004-01-20  Hartmut Penner  <hpenner@de.ibm.com>\n+\n+\t* gcc/config/rs6000/rs6000.c (function_arg) Handle \n+\tvector register special in function without prototype.\n+\t(function_arg_advance): Vector parameters get always\n+\tGPRs allocated for the linux64 target.\n+\n 2004-01-20  Kazuhiro Inaoka  <inaoka.kazuhiro@renesas.com>\n \n \t* config/m32r/m32r.h (TARGET_M32R2). Test for TARGET_M32R2_MASK"}, {"sha": "5b079acbf2742ccedabd378458be3033bb78400d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c72d6c267a8f31bf3e4b150b74d9196374d8af16/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c72d6c267a8f31bf3e4b150b74d9196374d8af16/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c72d6c267a8f31bf3e4b150b74d9196374d8af16", "patch": "@@ -3941,10 +3941,12 @@ function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n       if (USE_ALTIVEC_FOR_ARG_P (cum, mode, type, named))\n \tcum->vregno++;\n       \n-      /* In variable-argument functions, vector arguments get GPRs allocated\n-\t even if they are going to be passed in a vector register.  */\n-      if (cum->stdarg && DEFAULT_ABI != ABI_V4)\n-\t{\n+      /* PowerPC64 Linux and AIX allocates GPRs for a vector argument\n+\t even if it is going to be passed in a vector register.  \n+\t Darwin does the same for variable-argument functions.  */\n+      if ((DEFAULT_ABI == ABI_AIX && TARGET_64BIT)\n+\t\t   || (cum->stdarg && DEFAULT_ABI != ABI_V4))\n+        {\n \t  int align;\n \t  \n \t  /* Vector parameters must be 16-byte aligned.  This places\n@@ -4248,7 +4250,32 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n     }\n \n   if (USE_ALTIVEC_FOR_ARG_P (cum, mode, type, named))\n-    return gen_rtx_REG (mode, cum->vregno);\n+    if (TARGET_64BIT && ! cum->prototype)\n+      {\n+       /* Vector parameters get passed in vector register\n+          and also in GPRs or memory, in absence of prototype.  */\n+       int align_words;\n+       rtx slot;\n+       align_words = (cum->words + 1) & ~1;\n+\n+       if (align_words >= GP_ARG_NUM_REG)\n+         {\n+           slot = NULL_RTX;\n+         }\n+       else\n+         {\n+           slot = gen_rtx_REG (mode, GP_ARG_MIN_REG + align_words);\n+         }\n+       return gen_rtx_PARALLEL (mode,\n+                gen_rtvec (2,\n+                           gen_rtx_EXPR_LIST (VOIDmode,\n+                                              slot, const0_rtx),\n+                           gen_rtx_EXPR_LIST (VOIDmode,\n+                                              gen_rtx_REG (mode, cum->vregno),\n+                                              const0_rtx)));\n+      }\n+    else\n+      return gen_rtx_REG (mode, cum->vregno);\n   else if (TARGET_ALTIVEC_ABI && ALTIVEC_VECTOR_MODE (mode))\n     {\n       if (named || abi == ABI_V4)"}]}