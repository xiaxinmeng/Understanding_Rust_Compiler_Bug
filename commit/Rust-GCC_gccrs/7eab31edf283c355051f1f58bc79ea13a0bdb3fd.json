{"sha": "7eab31edf283c355051f1f58bc79ea13a0bdb3fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VhYjMxZWRmMjgzYzM1NTA1MWYxZjU4YmM3OWVhMTNhMGJkYjNmZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-05-20T17:01:35Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-05-20T17:01:35Z"}, "message": "tree-ssa-dom.c (hashable_expr_equal_p): Also compare the EH region of calls to pure functions that can throw an exception.\n\n\t* tree-ssa-dom.c (hashable_expr_equal_p) <EXPR_CALL>: Also compare the\n\tEH region of calls to pure functions that can throw an exception.\n\t* tree-ssa-sccvn.c (vn_reference_eq): Remove duplicated test.\n\t(copy_reference_ops_from_call): Also copy the EH region of the call if\n\tit can throw an exception.\n\nFrom-SVN: r210649", "tree": {"sha": "ea01704fc2a9e703217c6f711a0256643c25e1aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea01704fc2a9e703217c6f711a0256643c25e1aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7eab31edf283c355051f1f58bc79ea13a0bdb3fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eab31edf283c355051f1f58bc79ea13a0bdb3fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7eab31edf283c355051f1f58bc79ea13a0bdb3fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eab31edf283c355051f1f58bc79ea13a0bdb3fd/comments", "author": null, "committer": null, "parents": [{"sha": "467fc67c47287a490d649ffe03ce8ae432c27a71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/467fc67c47287a490d649ffe03ce8ae432c27a71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/467fc67c47287a490d649ffe03ce8ae432c27a71"}], "stats": {"total": 98, "additions": 94, "deletions": 4}, "files": [{"sha": "2ee681aa1cc91191cc11074f59e68d6e28a84ab4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eab31edf283c355051f1f58bc79ea13a0bdb3fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eab31edf283c355051f1f58bc79ea13a0bdb3fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7eab31edf283c355051f1f58bc79ea13a0bdb3fd", "patch": "@@ -1,3 +1,11 @@\n+2014-05-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-ssa-dom.c (hashable_expr_equal_p) <EXPR_CALL>: Also compare the\n+\tEH region of calls to pure functions that can throw an exception.\n+\t* tree-ssa-sccvn.c (vn_reference_eq): Remove duplicated test.\n+\t(copy_reference_ops_from_call): Also copy the EH region of the call if\n+\tit can throw an exception.\n+\n 2014-05-20  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* simplify-rtx.c (simplify_binary_operation_1): Optimize case of"}, {"sha": "cdb3d87ea3074d58fcc29e57c20eb0215088958d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eab31edf283c355051f1f58bc79ea13a0bdb3fd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eab31edf283c355051f1f58bc79ea13a0bdb3fd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7eab31edf283c355051f1f58bc79ea13a0bdb3fd", "patch": "@@ -1,3 +1,9 @@\n+2014-05-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/opt35.adb: New test.\n+\t* gnat.dg/opt36.adb: Likewise.\n+\t* gnat.dg/opt35_pkg.ad[sb]: New helper.\n+\n 2014-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/60373"}, {"sha": "b0defe07ca6ab0b8d34f2e80c8abc7d57a70534f", "filename": "gcc/testsuite/gnat.dg/opt35.adb", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eab31edf283c355051f1f58bc79ea13a0bdb3fd/gcc%2Ftestsuite%2Fgnat.dg%2Fopt35.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eab31edf283c355051f1f58bc79ea13a0bdb3fd/gcc%2Ftestsuite%2Fgnat.dg%2Fopt35.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt35.adb?ref=7eab31edf283c355051f1f58bc79ea13a0bdb3fd", "patch": "@@ -0,0 +1,25 @@\n+-- { dg-do run }\n+-- { dg-options \"-O\" }\n+\n+with Opt35_Pkg; use Opt35_Pkg;\n+\n+procedure Opt35 is\n+  I : Integer := -1;\n+  N : Natural := 0;\n+begin\n+  begin\n+    I := F(0);\n+  exception\n+    when E => N := N + 1;\n+  end;\n+\n+  begin\n+    I := I + F(0);\n+  exception\n+    when E => N := N + 1;\n+  end;\n+\n+  if N /= 2 or I = 0 then\n+    raise Program_Error;\n+  end if;\n+end;"}, {"sha": "8e868c49d975cfe4f937f10487b4365c94122edb", "filename": "gcc/testsuite/gnat.dg/opt35_pkg.adb", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eab31edf283c355051f1f58bc79ea13a0bdb3fd/gcc%2Ftestsuite%2Fgnat.dg%2Fopt35_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eab31edf283c355051f1f58bc79ea13a0bdb3fd/gcc%2Ftestsuite%2Fgnat.dg%2Fopt35_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt35_pkg.adb?ref=7eab31edf283c355051f1f58bc79ea13a0bdb3fd", "patch": "@@ -0,0 +1,11 @@\n+package body Opt35_Pkg is\n+\n+  function F (I : Integer) return Integer is\n+  begin\n+    if I = 0 then\n+       raise E;\n+    end if;\n+    return -I;\n+  end;\n+\n+end Opt35_Pkg;"}, {"sha": "3fcd3f341d8c8e314fcdd48ce8e5d524690e1f29", "filename": "gcc/testsuite/gnat.dg/opt35_pkg.ads", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eab31edf283c355051f1f58bc79ea13a0bdb3fd/gcc%2Ftestsuite%2Fgnat.dg%2Fopt35_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eab31edf283c355051f1f58bc79ea13a0bdb3fd/gcc%2Ftestsuite%2Fgnat.dg%2Fopt35_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt35_pkg.ads?ref=7eab31edf283c355051f1f58bc79ea13a0bdb3fd", "patch": "@@ -0,0 +1,9 @@\n+package Opt35_Pkg is\n+\n+  pragma Pure;\n+\n+  E : Exception;\n+\n+  function F (I : Integer) return Integer;\n+\n+end Opt35_Pkg;"}, {"sha": "137db768319b55b5306411ae6ad5d9b94c10b0f1", "filename": "gcc/testsuite/gnat.dg/opt36.adb", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eab31edf283c355051f1f58bc79ea13a0bdb3fd/gcc%2Ftestsuite%2Fgnat.dg%2Fopt36.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eab31edf283c355051f1f58bc79ea13a0bdb3fd/gcc%2Ftestsuite%2Fgnat.dg%2Fopt36.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt36.adb?ref=7eab31edf283c355051f1f58bc79ea13a0bdb3fd", "patch": "@@ -0,0 +1,23 @@\n+-- { dg-do run }\n+-- { dg-options \"-O2\" }\n+\n+with Opt35_Pkg; use Opt35_Pkg;\n+\n+procedure Opt36 is\n+  I : Integer := -1;\n+  N : Natural := 0;\n+begin\n+  loop\n+     begin\n+       I := I + 1;\n+       I := I + F(0);\n+     exception\n+       when E => N := N + 1;\n+     end;\n+     exit when I = 1;\n+  end loop;\n+\n+  if N /= 2 or I = 0 then\n+    raise Program_Error;\n+  end if;\n+end;"}, {"sha": "c980dfd85e61e97922d11ab2264d7a7de480fc2f", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eab31edf283c355051f1f58bc79ea13a0bdb3fd/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eab31edf283c355051f1f58bc79ea13a0bdb3fd/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=7eab31edf283c355051f1f58bc79ea13a0bdb3fd", "patch": "@@ -522,6 +522,14 @@ hashable_expr_equal_p (const struct hashable_expr *expr0,\n                                  expr1->ops.call.args[i], 0))\n             return false;\n \n+\tif (stmt_could_throw_p (expr0->ops.call.fn_from))\n+\t  {\n+\t    int lp0 = lookup_stmt_eh_lp (expr0->ops.call.fn_from);\n+\t    int lp1 = lookup_stmt_eh_lp (expr1->ops.call.fn_from);\n+\t    if ((lp0 > 0 || lp1 > 0) && lp0 != lp1)\n+\t      return false;\n+\t  }\n+\n         return true;\n       }\n "}, {"sha": "77dcad9e578dd51c84a1c18d046394b811d4bd17", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eab31edf283c355051f1f58bc79ea13a0bdb3fd/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eab31edf283c355051f1f58bc79ea13a0bdb3fd/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=7eab31edf283c355051f1f58bc79ea13a0bdb3fd", "patch": "@@ -663,9 +663,6 @@ vn_reference_eq (const_vn_reference_t const vr1, const_vn_reference_t const vr2)\n {\n   unsigned i, j;\n \n-  if (vr1->hashcode != vr2->hashcode)\n-    return false;\n-\n   /* Early out if this is not a hash collision.  */\n   if (vr1->hashcode != vr2->hashcode)\n     return false;\n@@ -1125,6 +1122,7 @@ copy_reference_ops_from_call (gimple call,\n   vn_reference_op_s temp;\n   unsigned i;\n   tree lhs = gimple_call_lhs (call);\n+  int lr;\n \n   /* If 2 calls have a different non-ssa lhs, vdef value numbers should be\n      different.  By adding the lhs here in the vector, we ensure that the\n@@ -1139,12 +1137,14 @@ copy_reference_ops_from_call (gimple call,\n       result->safe_push (temp);\n     }\n \n-  /* Copy the type, opcode, function being called and static chain.  */\n+  /* Copy the type, opcode, function, static chain and EH region, if any.  */\n   memset (&temp, 0, sizeof (temp));\n   temp.type = gimple_call_return_type (call);\n   temp.opcode = CALL_EXPR;\n   temp.op0 = gimple_call_fn (call);\n   temp.op1 = gimple_call_chain (call);\n+  if (stmt_could_throw_p (call) && (lr = lookup_stmt_eh_lp (call)) > 0)\n+    temp.op2 = size_int (lr);\n   temp.off = -1;\n   result->safe_push (temp);\n "}]}