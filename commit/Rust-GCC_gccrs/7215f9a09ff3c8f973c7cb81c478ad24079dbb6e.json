{"sha": "7215f9a09ff3c8f973c7cb81c478ad24079dbb6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzIxNWY5YTA5ZmYzYzhmOTczYzdjYjgxYzQ3OGFkMjQwNzlkYmI2ZQ==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1995-03-24T22:18:53Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1995-03-24T22:18:53Z"}, "message": "60th Cygnus<->FSF merge\n\nFrom-SVN: r9230", "tree": {"sha": "2ac93d9dc0099266297ee6a1f0175f9dcebc731b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ac93d9dc0099266297ee6a1f0175f9dcebc731b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7215f9a09ff3c8f973c7cb81c478ad24079dbb6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7215f9a09ff3c8f973c7cb81c478ad24079dbb6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7215f9a09ff3c8f973c7cb81c478ad24079dbb6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7215f9a09ff3c8f973c7cb81c478ad24079dbb6e/comments", "author": null, "committer": null, "parents": [{"sha": "e4a3429b5644a5ccd2239a1a29199cfbe793de79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4a3429b5644a5ccd2239a1a29199cfbe793de79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4a3429b5644a5ccd2239a1a29199cfbe793de79"}], "stats": {"total": 169, "additions": 126, "deletions": 43}, "files": [{"sha": "dc5ee6941dc1460ea17f61ac9c47c3e5ee52f286", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7215f9a09ff3c8f973c7cb81c478ad24079dbb6e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7215f9a09ff3c8f973c7cb81c478ad24079dbb6e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7215f9a09ff3c8f973c7cb81c478ad24079dbb6e", "patch": "@@ -1,3 +1,44 @@\n+Fri Mar 24 12:11:24 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n+\n+\t* decl.c (duplicate_decls): Propagate DECL_ABSTRACT_VIRTUAL_P.\n+\n+\t* pt.c (push_tinst_level): Complain if template instantiation depth\n+\tis greater than max_tinst_depth.\n+\n+\t* typeck.c (common_type): Assume that we can call common_type to\n+\tunify the target type of a pointer.\n+\n+Thu Mar 23 00:48:44 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n+\n+\t* decl2.c (finish_file): Don't synthesize methods at\n+\tfinish_vtable_prevardecl time.  Do synthesize methods that are not\n+\tused, but are public and not external.\n+\n+\t* cvt.c (build_type_conversion): Only give an error if for_sure.\n+\n+\t* typeck.c (comp_target_types): Only support pointer conversions if\n+\tnptrs > 0.\n+\n+Wed Mar 22 19:30:15 1995  Brendan Kehoe  (brendan@lisa.cygnus.com)\n+\n+\t* init.c (build_new): Catch use of an initializer list where it\n+\tshouldn't be.\n+\n+Wed Mar 22 16:21:07 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n+\n+\t* init.c (build_new): Wrap alloc_expr in an RTL_EXPR if nelts is\n+\tnon-constant.\n+\n+\t* decl2.c: temp_name_counter is now public.\n+\n+\t* decl.c (struct cp_function): Add temp_name_counter field.\n+\t(push_cp_function_context): Save it.\n+\t(pop_cp_function_context): Restore it.\n+\n+\t* typeck.c (common_type): Handle unifying function types, and unify\n+\tunmatched things to void* with a compiler_error, rather than\n+\tsilently like before.\n+\n Wed Mar 22 15:10:34 1995  Mike Stump  <mrs@cygnus.com>\n \n \t* decl2.c (finish_prevtable_vardecl, finish_vtable_vardecl): Revert"}, {"sha": "89f59149ab5cab20df0761a96c1065999cffd8d6", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7215f9a09ff3c8f973c7cb81c478ad24079dbb6e/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7215f9a09ff3c8f973c7cb81c478ad24079dbb6e/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=7215f9a09ff3c8f973c7cb81c478ad24079dbb6e", "patch": "@@ -1560,10 +1560,13 @@ build_type_conversion (code, xtype, expr, for_sure)\n \t{\n \t  if (winner)\n \t    {\n-\t      cp_error (\"ambiguous conversion from `%T' to `%T'\", basetype,\n-\t\t\txtype);\n-\t      cp_error (\"  candidate conversions include `%T' and `%T'\",\n-\t\t\tTREE_VALUE (winner), TREE_VALUE (conv));\n+\t      if (for_sure)\n+\t\t{\n+\t\t  cp_error (\"ambiguous conversion from `%T' to `%T'\", basetype,\n+\t\t\t    xtype);\n+\t\t  cp_error (\"  candidate conversions include `%T' and `%T'\",\n+\t\t\t    TREE_VALUE (winner), TREE_VALUE (conv));\n+\t\t}\n \t      return NULL_TREE;\n \t    }\n \t  else"}, {"sha": "15bb2e070a0dc3564a98275724d8bc410be9fd36", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7215f9a09ff3c8f973c7cb81c478ad24079dbb6e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7215f9a09ff3c8f973c7cb81c478ad24079dbb6e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7215f9a09ff3c8f973c7cb81c478ad24079dbb6e", "patch": "@@ -2356,6 +2356,7 @@ duplicate_decls (newdecl, olddecl)\n \tDECL_PENDING_INLINE_INFO (newdecl) = DECL_PENDING_INLINE_INFO (olddecl);\n       DECL_STATIC_CONSTRUCTOR (newdecl) |= DECL_STATIC_CONSTRUCTOR (olddecl);\n       DECL_STATIC_DESTRUCTOR (newdecl) |= DECL_STATIC_DESTRUCTOR (olddecl);\n+      DECL_ABSTRACT_VIRTUAL_P (newdecl) |= DECL_ABSTRACT_VIRTUAL_P (olddecl);\n     }\n \n   /* Deal with C++: must preserve virtual function table size.  */\n@@ -12216,6 +12217,7 @@ struct cp_function\n   int assigns_this;\n   int just_assigned_this;\n   int parms_stored;\n+  int temp_name_counter;\n   tree named_labels;\n   tree shadowed_labels;\n   tree ctor_label;\n@@ -12229,6 +12231,8 @@ struct cp_function\n \n struct cp_function *cp_function_chain;\n \n+extern int temp_name_counter;\n+\n /* Save and reinitialize the variables\n    used during compilation of a C++ function.  */\n \n@@ -12259,6 +12263,7 @@ push_cp_function_context (context)\n   p->result_rtx = original_result_rtx;\n   p->base_init_insns = base_init_insns;\n   p->protect_list = protect_list;\n+  p->temp_name_counter = temp_name_counter;\n }\n \n /* Restore the variables used during compilation of a C++ function.  */\n@@ -12306,6 +12311,7 @@ pop_cp_function_context (context)\n   current_function_parms_stored = p->parms_stored;\n   original_result_rtx = p->result_rtx;\n   base_init_insns = p->base_init_insns;\n+  temp_name_counter = p->temp_name_counter;\n \n   free (p);\n }"}, {"sha": "55ad97e0269dc44e179682a7244db371f36355d8", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7215f9a09ff3c8f973c7cb81c478ad24079dbb6e/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7215f9a09ff3c8f973c7cb81c478ad24079dbb6e/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=7215f9a09ff3c8f973c7cb81c478ad24079dbb6e", "patch": "@@ -55,7 +55,7 @@ static tree saved_inlines;\n /* Used to help generate temporary names which are unique within\n    a function.  Reset to 0 by start_function.  */\n \n-static int temp_name_counter;\n+int temp_name_counter;\n \n /* Same, but not reset.  Local temp variables and global temp variables\n    can have the same name.  */\n@@ -2861,16 +2861,6 @@ finish_file ()\n   /* Walk to mark the inline functions we need, then output them so\n      that we can pick up any other tdecls that those routines need. */\n   walk_vtables ((void (*)())0, finish_prevtable_vardecl);\n-  for (vars = saved_inlines; vars; vars = TREE_CHAIN (vars))\n-    {\n-      tree decl = TREE_VALUE (vars);\n-\n-      if (DECL_ARTIFICIAL (decl)\n-\t  && ! DECL_INITIAL (decl)\n-\t  && (TREE_USED (decl) || ! DECL_EXTERNAL (decl)))\n-\tsynthesize_method (decl);\n-    }\n-  walk_vtables ((void (*)())0, finish_prevtable_vardecl);\n \n   if (needs_cleaning == 0)\n     goto mess_up;\n@@ -3103,7 +3093,8 @@ finish_file ()\n \n \t    if (DECL_ARTIFICIAL (decl) && ! DECL_INITIAL (decl))\n \t      {\n-\t\tif (TREE_USED (decl))\n+\t\tif (TREE_USED (decl)\n+\t\t    || (TREE_PUBLIC (decl) && ! DECL_EXTERNAL (decl)))\n \t\t  synthesize_method (decl);\n \t\telse\n \t\t  {"}, {"sha": "8dfbc31b4dcb7c4bf5d737cc5f19351da16e6f08", "filename": "gcc/cp/init.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7215f9a09ff3c8f973c7cb81c478ad24079dbb6e/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7215f9a09ff3c8f973c7cb81c478ad24079dbb6e/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=7215f9a09ff3c8f973c7cb81c478ad24079dbb6e", "patch": "@@ -3091,6 +3091,11 @@ build_new (placement, decl, init, use_global_new)\n \n \t  if (TREE_CHAIN (init) != NULL_TREE)\n \t    pedwarn (\"initializer list being treated as compound expression\");\n+\t  else if (TREE_CODE (init) == CONSTRUCTOR)\n+\t    {\n+\t      pedwarn (\"initializer list appears where operand should be used\");\n+\t      init = TREE_OPERAND (init, 1);\n+\t    }\n \t  init = build_compound_expr (init);\n \n \t  init = convert_for_initialization (deref, type, init, LOOKUP_NORMAL,\n@@ -3150,6 +3155,29 @@ build_new (placement, decl, init, use_global_new)\n \t     can't easily know the latter, just do it always.  */\n \t  tree xval = make_node (RTL_EXPR);\n \n+\t  /* If we want to check the value of the allocation expression,\n+             and the number of elements in the array is not a constant, we\n+             *must* expand the SAVE_EXPR for nelts in alloc_expr before we\n+             expand it in the actual initalization.  So we need to build up\n+             an RTL_EXPR for alloc_expr.  Sigh.  */\n+\t  if (alloc_expr && ! TREE_CONSTANT (nelts))\n+\t    {\n+\t      tree xval = make_node (RTL_EXPR);\n+\t      rtx rtxval;\n+\t      TREE_TYPE (xval) = TREE_TYPE (alloc_expr);\n+\t      do_pending_stack_adjust ();\n+\t      start_sequence_for_rtl_expr (xval);\n+\t      emit_note (0, -1);\n+\t      rtxval = expand_expr (alloc_expr, NULL, VOIDmode, 0);\n+\t      do_pending_stack_adjust ();\n+\t      TREE_SIDE_EFFECTS (xval) = 1;\n+\t      RTL_EXPR_SEQUENCE (xval) = get_insns ();\n+\t      end_sequence ();\n+\t      RTL_EXPR_RTL (xval) = rtxval;\n+\t      TREE_TYPE (xval) = TREE_TYPE (alloc_expr);\n+\t      alloc_expr = xval;\n+\t    }\n+\n \t  TREE_TYPE (xval) = TREE_TYPE (rval);\n \t  do_pending_stack_adjust ();\n \t  start_sequence_for_rtl_expr (xval);"}, {"sha": "ce5e4f8515dfbe63575e82877725a3831030bdbc", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7215f9a09ff3c8f973c7cb81c478ad24079dbb6e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7215f9a09ff3c8f973c7cb81c478ad24079dbb6e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7215f9a09ff3c8f973c7cb81c478ad24079dbb6e", "patch": "@@ -924,16 +924,26 @@ instantiate_member_templates (classname)\n     }\n }\n \n-struct tinst_level *current_tinst_level = 0;\n-struct tinst_level *free_tinst_level = 0;\n+static struct tinst_level *current_tinst_level = 0;\n+static struct tinst_level *free_tinst_level = 0;\n+static int tinst_depth = 0;\n+int max_tinst_depth = 17;\n \n-void\n+int\n push_tinst_level (name)\n      tree name;\n {\n   struct tinst_level *new;\n   tree global = IDENTIFIER_GLOBAL_VALUE (name);\n \n+  if (tinst_depth >= max_tinst_depth)\n+    {\n+      error (\"template instantiation depth exceeds maximum of %d\",\n+\t     max_tinst_depth);\n+      cp_error (\"  instantiating `%D'\", name);\n+      return 0;\n+    }\n+\n   if (free_tinst_level)\n     {\n       new = free_tinst_level;\n@@ -955,6 +965,8 @@ push_tinst_level (name)\n     }\n   new->next = current_tinst_level;\n   current_tinst_level = new;\n+  ++tinst_depth;\n+  return 1;\n }\n \n void\n@@ -965,6 +977,7 @@ pop_tinst_level ()\n   current_tinst_level = old->next;\n   old->next = free_tinst_level;\n   free_tinst_level = old;\n+  --tinst_depth;\n }\n \n struct tinst_level *\n@@ -1040,9 +1053,8 @@ instantiate_class_template (classname, setup_parse)\n \n   push_to_top_level ();\n   template_info = DECL_TEMPLATE_INFO (t1);\n-  if (setup_parse)\n+  if (setup_parse && push_tinst_level (classname))\n     {\n-      push_tinst_level (classname);\n       push_template_decls (DECL_TEMPLATE_PARMS (TREE_PURPOSE (template)),\n \t\t\t   TREE_VALUE (template), 0);\n       set_current_level_tags_transparency (1);"}, {"sha": "b8cf9680912159a00117493fe57fbe67ea2d222d", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7215f9a09ff3c8f973c7cb81c478ad24079dbb6e/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7215f9a09ff3c8f973c7cb81c478ad24079dbb6e/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=7215f9a09ff3c8f973c7cb81c478ad24079dbb6e", "patch": "@@ -379,13 +379,10 @@ common_type (t1, t2)\n \n \tif (tt1 == tt2)\n \t  target = tt1;\n-\telse if ((IS_AGGR_TYPE_CODE (TREE_CODE (tt1))\n-\t\t  || TREE_CODE (tt1) == OFFSET_TYPE\n-\t\t  || TREE_CODE (tt1) == METHOD_TYPE)\n-\t\t && TREE_CODE (tt2) == TREE_CODE (tt1))\n-\t  target = common_type (tt1, tt2);\n-\telse\n+\telse if (tt1 == void_type_node || tt2 == void_type_node)\n \t  target = void_type_node;\n+\telse\n+\t  target = common_type (tt1, tt2);\n \n \ttarget = cp_build_type_variant (target, constp, volatilep);\n \tif (code1 == POINTER_TYPE)\n@@ -775,27 +772,32 @@ comp_target_types (ttl, ttr, nptrs)\n   if (ttl == ttr)\n     return 1;\n \n-  if (TREE_CODE (ttl) == VOID_TYPE\n-      && TREE_CODE (ttr) != FUNCTION_TYPE\n-      && TREE_CODE (ttr) != METHOD_TYPE\n-      && TREE_CODE (ttr) != OFFSET_TYPE)\n-    return 1;\n-  if (TREE_CODE (ttr) == VOID_TYPE\n-      && TREE_CODE (ttl) != FUNCTION_TYPE\n-      && TREE_CODE (ttl) != METHOD_TYPE\n-      && TREE_CODE (ttl) != OFFSET_TYPE)\n-    return -1;\n-  \n   if (TREE_CODE (ttr) != TREE_CODE (ttl))\n     return 0;\n \n   if (TREE_CODE (ttr) == POINTER_TYPE)\n     {\n-      if (TREE_CODE (TREE_TYPE (ttl)) == POINTER_TYPE\n-\t  || TREE_CODE (TREE_TYPE (ttl)) == ARRAY_TYPE)\n-\treturn comp_ptr_ttypes (TREE_TYPE (ttl), TREE_TYPE (ttr));\n-      else\n-\treturn comp_target_types (TREE_TYPE (ttl), TREE_TYPE (ttr), nptrs - 1);\n+      ttl = TREE_TYPE (ttl);\n+      ttr = TREE_TYPE (ttr);\n+\n+      if (nptrs > 0)\n+\t{\n+\t  if (TREE_CODE (ttl) == POINTER_TYPE\n+\t      || TREE_CODE (ttl) == ARRAY_TYPE)\n+\t    return comp_ptr_ttypes (ttl, ttr);\n+\t  else if (TREE_CODE (ttl) == VOID_TYPE\n+\t\t   && TREE_CODE (ttr) != FUNCTION_TYPE\n+\t\t   && TREE_CODE (ttr) != METHOD_TYPE\n+\t\t   && TREE_CODE (ttr) != OFFSET_TYPE)\n+\t    return 1;\n+\t  else if (TREE_CODE (ttr) == VOID_TYPE\n+\t\t   && TREE_CODE (ttl) != FUNCTION_TYPE\n+\t\t   && TREE_CODE (ttl) != METHOD_TYPE\n+\t\t   && TREE_CODE (ttl) != OFFSET_TYPE)\n+\t    return -1;\n+\t}\n+\n+      return comp_target_types (ttl, ttr, nptrs - 1);\n     }\n \n   if (TREE_CODE (ttr) == REFERENCE_TYPE)"}]}