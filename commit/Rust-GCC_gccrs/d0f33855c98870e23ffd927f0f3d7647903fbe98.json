{"sha": "d0f33855c98870e23ffd927f0f3d7647903fbe98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBmMzM4NTVjOTg4NzBlMjNmZmQ5MjdmMGYzZDc2NDc5MDNmYmU5OA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2014-01-02T17:27:11Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2014-01-02T17:27:11Z"}, "message": "re PR fortran/59654 ([OOP] Broken function table with complex OO use case)\n\n2014-01-02  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/59654\n\t* resolve.c (resolve_typebound_procedures): No need to create the vtab\n\there.\n\n2014-01-02  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/59654\n\t* gfortran.dg/dynamic_dispatch_12.f90: New.\n\nFrom-SVN: r206281", "tree": {"sha": "6a36ad0fc0ba9c807be3826e1bcf4c8a1f4bcee4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a36ad0fc0ba9c807be3826e1bcf4c8a1f4bcee4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0f33855c98870e23ffd927f0f3d7647903fbe98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0f33855c98870e23ffd927f0f3d7647903fbe98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0f33855c98870e23ffd927f0f3d7647903fbe98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0f33855c98870e23ffd927f0f3d7647903fbe98/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2898d2049428bfa070de658f55b2b3590b5419e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2898d2049428bfa070de658f55b2b3590b5419e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2898d2049428bfa070de658f55b2b3590b5419e5"}], "stats": {"total": 4247, "additions": 2167, "deletions": 2080}, "files": [{"sha": "e78d6b65f67a10560d5525a4eb590ef6166a9bc8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 2077, "changes": 2082, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0f33855c98870e23ffd927f0f3d7647903fbe98/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0f33855c98870e23ffd927f0f3d7647903fbe98/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d0f33855c98870e23ffd927f0f3d7647903fbe98", "patch": "@@ -1,2082 +1,10 @@\n-2013-12-30  Janus Weil  <janus@gcc.gnu.org>\n+2014-01-02  Janus Weil  <janus@gcc.gnu.org>\n \n-\tPR fortran/58998\n-\t* resolve.c (resolve_symbol): Check that symbol is not only flavorless\n-\tbut also untyped.\n-\n-2013-12-29  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/59612\n-\t* dump-parse-tree.c (show_typespec): Check for charlen.\n-\t* invoke.texi: Fix documentation of -fdump-fortran-optimized and\n-\t-fdump-parse-tree.\n-\n-2013-12-18  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/59493\n-\t* gfortran.h (gfc_find_intrinsic_vtab): Removed prototype.\n-\t(gfc_find_vtab): New prototype.\n-\t* class.c (gfc_find_intrinsic_vtab): Rename to 'find_intrinsic_vtab' and\n-\tmake static. Minor modifications.\n-\t(gfc_find_vtab): New function.\n-\t(gfc_class_initializer): Use new function 'gfc_find_vtab'.\n-\t* check.c (gfc_check_move_alloc): Ditto.\n-\t* expr.c (gfc_check_pointer_assign): Ditto.\n-\t* interface.c (compare_actual_formal): Ditto.\n-\t* resolve.c (resolve_allocate_expr, resolve_select_type): Ditto.\n-\t* trans-expr.c (gfc_conv_intrinsic_to_class, gfc_trans_class_assign):\n-\tDitto.\n-\t* trans-intrinsic.c (conv_intrinsic_move_alloc): Ditto.\n-\t* trans-stmt.c (gfc_trans_allocate): Ditto.\n-\n-2013-12-16  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/54949\n-\t* symbol.c (check_conflict): Forbid abstract procedure pointers.\n-\t(gfc_add_abstract): Check for attribute conflicts.\n-\n-2013-12-16  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR libgomp/59337\n-\t* openmp.c (resolve_omp_atomic): Adjust error message.\n-\n-2013-12-15  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/59493\n-\t* class.c (gfc_find_intrinsic_vtab): Handle BT_CLASS.\n-\n-2013-12-14  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/59502\n-\t* primary.c (gfc_match_varspec): Check for 'class_ok'.\n-\n-2013-12-14  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/59450\n-\t* module.c (mio_expr): Handle type-bound function expressions.\n-\n-2013-12-12  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/59440\n-\t* trans-decl.c (generate_namelist_decl): Ensure debug DIE\n-\tis created by setting DECL_IGNORED_P to 0.\n-\n-2013-12-11  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/58916\n-\t* resolve.c (conformable_arrays): Treat scalar 'e2'.\n-\t(resolve_allocate_expr): Check rank also for unlimited-polymorphic\n-\tvariables.\n-\n-2013-12-10  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/35831\n-\t* interface.c (check_dummy_characteristics): Add checks for several\n-\tattributes.\n-\n-2013-12-10  Janus Weil  <janus@gcc.gnu.org>\n-\n-\t* gfortran.texi: Add possible kind values (and default) for\n-\tDOUBLE PRECISION.\n-\t* invoke.texi: Correct documentation of -fdefault-integer-8,\n-\t-fdefault-real-8 and -fdefault-double-8.\n-\n-2013-12-10  Janus Weil  <janus@gcc.gnu.org>\n-\n-\t* gfortran.texi: Modify documentation of kind type parameters.\n-\t* invoke.texi: Extend documentation of -fdefault-integer-8 and\n-\t-fdefault-real-8.\n-\n-2013-12-10  Janus Weil  <janus@gcc.gnu.org>\n-\n-\t* invoke.texi: Add -freal-4-real-16. Rearrange kind promotion options.\n-\n-2013-12-08  Tobias Burnus  <burnus@net-b.de>\n-\t    Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/58099\n-\tPR fortran/58676\n-\tPR fortran/41724\n-\t* resolve.c (gfc_resolve_intrinsic): Set elemental/pure.\n-\t(resolve_fl_procedure): Reject pure dummy procedures/procedure\n-\tpointers.\n-\t(gfc_explicit_interface_required): Don't require a\n-\tmatch of ELEMENTAL for intrinsics.\n-\n-2013-12-07  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/59414\n-\t* resolve.c (resolve_specific_f0): Handle CLASS-valued functions.\n-\n-2013-12-04  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR debug/37132\n-\t* trans-decl.c (generate_namelist_decl, create_module_nml_decl):\n-\tNew static functions.\n-\t(gfc_generate_module_vars, generate_local_vars): Call them.\n-\t(gfc_trans_use_stmts): Handle namelists for debug genertion.\n-\n-2013-12-01  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/57354\n-\t* trans-array.c (gfc_conv_resolve_dependencies): For other than\n-\tSS_SECTION, do a dependency check if the lhs is liable to be\n-\treallocated.\n-\n-2013-12-01  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/58410\n-\t* trans-array.c (gfc_alloc_allocatable_for_assignment): Do not\n-\tuse the array bounds of an unallocated array but set its size\n-\tto zero instead.\n-\n-2013-12-01  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/34547\n-\t* resolve.c (resolve_transfer): EXPR_NULL is always in an\n-\tinvalid context in a transfer statement.\n-\n-2013-11-28  Sergey Ostanevich  <sergos.gnu@gmail.com>\n-\n-\t* lang.opt (Wopenmp-simd): New.\n-\n-2013-11-25  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/59143\n-\t* interface.c (get_expr_storage_size): Handle array-valued type-bound\n-\tprocedures.\n-\n-2013-11-24  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\t* scanner.c (gfc_open_intrinsic_module): Remove function.\n-\t* gfortran.h (gfc_open_intrinsic_module): Remove prototype.\n-\n-2013-11-23  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/59228\n-\t* interface.c (compare_parameter): Check for array spec.\n-\n-2013-11-22  Andrew MacLeod  <amacleod@redhat.com>\n-\n-\t* trans.c: Add required include files from gimple.h.\n-\t* trans-expr.c: Likewise\n-\t* trans-openmp.c: Likewise\n-\n-2013-11-22  David Malcolm  <dmalcolm@redhat.com>\n-\n-\t* trans.c (trans_runtime_error_vararg): Remove use of input_line\n-\tmacro.\n-\n-2013-11-17  Andrew MacLeod  <amacleod@redhat.com>\n-\n-\t* fortran/trans-intrinsic.c: Include tree-nested.h.\n-\n-2013-11-14  Andrew MacLeod  <amacleod@redhat.com>\n-\n-\t* trans-expr.c: Include only gimplify.h and gimple.h as needed.\n-\t* trans-openmp.c: Likewise.\n-\n-2013-11-14  Diego Novillo  <dnovillo@google.com>\n-\n-\t* decl.c: Include stringpool.h.\n-\t* iresolve.c: Include stringpool.h.\n-\t* match.c: Include stringpool.h.\n-\t* module.c: Include stringpool.h.\n-\t* target-memory.c: Include stor-layout.h.\n-\t* trans-common.c: Include stringpool.h.\n-\tInclude stor-layout.h.\n-\tInclude varasm.h.\n-\t* trans-const.c: Include stor-layout.h.\n-\t* trans-decl.c: Include stringpool.h.\n-\tInclude stor-layout.h.\n-\tInclude varasm.h.\n-\tInclude attribs.h.\n-\t* trans-expr.c: Include stringpool.h.\n-\t* trans-intrinsic.c: Include stringpool.h.\n-\tInclude tree-nested.h.\n-\tInclude stor-layout.h.\n-\t* trans-io.c: Include stringpool.h.\n-\tInclude stor-layout.h.\n-\t* trans-openmp.c: Include stringpool.h.\n-\t* trans-stmt.c: Include stringpool.h.\n-\t* trans-types.c: Include stor-layout.h.\n-\tInclude stringpool.h.\n-\t* trans.c: Include stringpool.h.\n-\n-2013-11-12  Andrew MacLeod  <amacleod@redhat.com>\n-\n-\t* f95-lang.c: Don't include gimple.h.\n-\t* trans-array.c: Include gimple-expr.h instead of gimple.h.\n-\t* trans.c: Likewise.\n-\t* trans-decl.c: Likewise.\n-\t* trans-expr.c: Include gimplify.h.\n-\t* trans-openmp.c: Likewise.\n-\n-2013-11-07  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/58471\n-\t* primary.c (gfc_expr_attr): Check for result symbol.\n-\n-2013-11-06  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\t* gfortran.texi: Fix typo.\n-\n-2013-11-05  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* lang.opt (-Wdate-time): New option\n-\t* cpp.c (gfc_cpp_option_data): Add warn_date_time.\n-\t(gfc_cpp_init_options, gfc_cpp_handle_option,\n-\tgfc_cpp_post_options): Handle it and pass on to libcpp.\n-\n-2013-11-05  Steven G. Kargl <kargl@gcc.gnu.org>\n-\n-\tPR fortran/58989\n-\t* check.c (gfc_check_reshape): ensure that shape is a constant\n-\texpression.\n-\n-2013-11-05  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* lang.opt (fopenmp-simd): New option.\n-\t* gfortran.h (gfc_option_t): Add gfc_flag_openmp_simd.\n-\t* options.c (gfc_handle_option): Handle it.\n-\n-2013-11-04  Ian Lance Taylor  <iant@google.com>\n-\n-\t* f95-lang.c (ATTR_LEAF_LIST): Define.\n-\n-2013-11-04  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/58771\n-\t* trans-io.c (transfer_expr): If the backend_decl for a derived\n-\ttype is missing, build it with gfc_typenode_for_spec.\n-\n-2013-11-04  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/57445\n-\t* trans-expr.c (gfc_conv_class_to_class): Remove spurious\n-\tassert.\n-\n-2013-10-29  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/44350\n-\t* parse.c (parse_spec): Add C1116 constraint\n-\tcheck for BLOCK DATA.\n-\n-2013-10-29  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/58793\n-\t* trans-types.c (gfc_typenode_for_spec): Add typenode for\n-\tBT_HOLLERITH. Note that the length is incorrect but unusable.\n-\n-\tPR fortran/58858\n-\t* target-memory.c (gfc_element_size): Add element sizes for\n-\tBT_VOID and BT_ASSUMED, using gfc_typenode_for_spec.\n-\n-2013-10-24  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/44646\n-\t* trans-stmt.c (struct forall_info): Add do_concurrent field.\n-\t(gfc_trans_forall_1): Set it for do concurrent.\n-\t(gfc_trans_forall_loop): Mark those as annot_expr_ivdep_kind.\n-\n-2013-10-23  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/58793\n-\t* interface.c (compare_parameter): Reject passing TYPE(*)\n-\tto CLASS(*).\n-\n-2013-10-22  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran 57893\n-\t* class.c : Include target-memory.h.\n-\t(gfc_find_intrinsic_vtab) Build a minimal expression so that\n-\tgfc_element_size can be used to obtain the storage size, rather\n-\tthat the kind value.\n-\n-2013-10-21  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/58803\n-\t* decl.c (match_ppc_decl): Prevent later\n-\tdouble free.\n-\n-2013-10-17  Andrew MacLeod  <amacleod@redhat.com>\n-\n-\t* trans-openmp.c: Include omp-low.h.\n-\n-2013-10-16  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/58652\n-\t* interface.c (compare_parameter): Accept passing CLASS(*)\n-\tto CLASS(*).\n-\n-2013-10-16  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* intrinsic.texi (OpenMP Modules): Update to OpenMPv4.\n-\tDocument omp_proc_bind_kind.\n-\n-2013-10-15  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/58652\n-\t* trans-intrinsic.c (conv_intrinsic_move_alloc): Fix handling\n-\tof CLASS(*) variables.\n-\n-2013-10-14  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/58658\n-\t* expr.c (gfc_check_vardef_context): Fix pointer diagnostic\n-\tfor CLASS(*).\n-\n-2013-10-11  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* trans-openmp.c (gfc_omp_clause_default_ctor,\n-\tgfc_omp_clause_dtor): Return NULL for OMP_CLAUSE_REDUCTION.\n-\t* f95-lang.c (ATTR_NULL, DEF_FUNCTION_TYPE_8): Define.\n-\t* types.def (DEF_FUNCTION_TYPE_8): Document.\n-\t(BT_FN_VOID_OMPFN_PTR_UINT,\n-\tBT_FN_VOID_OMPFN_PTR_UINT_LONG_LONG_LONG,\n-\tBT_FN_VOID_OMPFN_PTR_UINT_LONG_LONG_LONG_LONG,\n-\tBT_FN_VOID_OMPFN_PTR_OMPCPYFN_LONG_LONG_BOOL_UINT): Remove.\n-\t(BT_FN_VOID_OMPFN_PTR_UINT_UINT_UINT,\n-\tBT_FN_VOID_OMPFN_PTR_UINT_LONG_LONG_LONG_UINT,\n-\tBT_FN_VOID_OMPFN_PTR_UINT_LONG_LONG_LONG_LONG_UINT,\n-\tBT_FN_BOOL_INT, BT_FN_BOOL_INT_BOOL, BT_FN_VOID_UINT_UINT,\n-\tBT_FN_VOID_INT_PTR_SIZE_PTR_PTR_PTR,\n-\tBT_FN_VOID_INT_OMPFN_PTR_SIZE_PTR_PTR_PTR,\n-\tBT_FN_VOID_OMPFN_PTR_OMPCPYFN_LONG_LONG_BOOL_UINT_PTR): New.\n-\n-2013-10-10  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/58226\n-\t* options.c (gfc_get_option_string): Handle zero arg case.\n-\n-2013-10-02  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/58593\n-\t* trans-expr.c (gfc_conv_string_tmp): Fix obtaining\n-\tthe byte size of a single character.\n-\n-2013-10-01  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/58579\n-\t* trans-expr.c (gfc_conv_string_tmp): Correctly obtain\n-\tthe byte size of a single character.\n-\n-2013-09-27  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\t* intrinsic.texi (DATE_AND_TIME): Fix example.\n-\n-2013-09-25  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/58436\n-\t* class.c (generate_finalization_wrapper): Handle CLASS(*).\n-\n-2013-09-25  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/57697\n-\tPR fortran/58469\n-\t* resolve.c (generate_component_assignments): Avoid double free\n-\tat runtime and freeing a still-being used expr.\n-\n-2013-09-25  Tom Tromey  <tromey@redhat.com>\n-\n-\t* Make-lang.in (fortran_OBJS): Use fortran/gfortranspec.o.\n-\t(gfortranspec.o): Remove.\n-\t(CFLAGS-fortran/gfortranspec.o): New variable.\n-\t(GFORTRAN_D_OBJS): Update.\n-\t($(F95_PARSER_OBJS), fortran/openmp.o, GFORTRAN_TRANS_DEPS)\n-\t(fortran/f95-lang.o, fortran/scanner.o, fortran/convert.o)\n-\t(fortran/frontend-passes.o, fortran/trans.o, fortran/trans-decl.o)\n-\t(fortran/trans-types, fortran/trans-const.o, fortran/trans-expr.o)\n-\t(fortran/trans-stmt.o, fortran/trans-openmp.o, fortran/trans-io.o)\n-\t(fortran/trans-array.o, fortran/trans-intrinsic.o)\n-\t(fortran/dependency.o, fortran/trans-common.o, fortran/resolve.o)\n-\t(fortran/data.o, fortran/options.o, fortran/cpp.o)\n-\t(fortran/scanner.o, fortran/module.o): Remove.\n-\n-2013-09-25  Tom Tromey  <tromey@redhat.com>\n-\n-\t* Make-lang.in (gfortranspec.o): Don't use subshell.\n-\n-2013-09-23  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/58355\n-\t* decl.c (check_extended_derived_type): Prevent segfault, modify error\n-\tmessage.\n-\n-2013-09-20  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/58099\n-\t* expr.c (gfc_check_pointer_assign): Remove second call to\n-\t'gfc_compare_interfaces' with swapped arguments.\n-\t* interface.c (gfc_compare_interfaces): Symmetrize the call to\n-\t'check_result_characteristics' by calling it with swapped arguments.\n-\n-2013-09-18  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* expr.c (gfc_check_assign_symbol): Free lvalue.ref.\n-\n-2013-09-18  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/43366\n-\t* primary.c (gfc_variable_attr): Also handle codimension.\n-\t* resolve.c (resolve_ordinary_assign): Add invalid-diagnostic for\n-\tpolymorphic assignment.\n-\n-2013-09-16  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/58356\n-\t* class.c (generate_finalization_wrapper): Init proc_tree if\n-\tnot yet resolved.\n-\n-2013-09-16  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/57697\n-\t* resolve.c (generate_component_assignments): Correctly handle the\n-\tcase that the LHS is not allocated.\n-\n-2013-09-15  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/57697\n-\t* resolve.c (generate_component_assignments): Handle unallocated\n-\tLHS with defined assignment of components.\n-\n-2013-09-12  Brooks Moses  <bmoses@google.com>\n-\n-\tPR driver/42955\n-\t* Make-lang.in: Do not install driver binaries in $(target)/bin.\n-\n-2013-09-09  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* invoke.texi (Error and Warning Options): Add hyphen.\n-\n-2013-09-02  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/PR56519\n-\t* gfortran.h:  Declare gfc_do_concurrent_flag as extern.\n-\t* resolve.c:  Rename do_concurrent_flag to gfc_do_concurrent_flag\n-\tand make non-static.\n-\t(resolve_function):  Use gfc_do_concurrent_flag instead of\n-\tdo_concurrent_flag.\n-\t(pure_subroutine):  Likewise.\n-\t(resolve_code):  Likewise.\n-\t(resolve_types):  Likewise.\n-\t* intrinsic.c (gfc_intrinsic_sub_interface):  Raise error for\n-\tnon-pure intrinsic subroutines within DO CONCURRENT.\n-\n-2013-08-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/52243\n-\t* trans-expr.c (is_runtime_conformable):  New function.\n-\t* gfc_trans_assignment_1:  Use it.\n-\n-2013-08-26  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/58146\n-\t* array.c (gfc_ref_dimen_size):  If possible, use\n-\tgfc_dep_difference to calculate array refrence\n-\tsizes.  Fall back to integer code otherwise.\n-\t* dependency.c (discard_nops).  Move up.\n-\tAlso discarde widening integer conversions.\n-\t(gfc_dep_compare_expr):  Use discard_nops.\n-\n-2013-08-23  Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\tPR fortran/57798\n-\t* trans-array.c (gfc_conv_ss_startstride, set_loop_bounds,\n-\tgfc_set_delta): Generate preliminary code before the outermost loop.\n-\n-2013-08-23  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/57843\n-\t* interface.c (gfc_extend_assign): Look for type-bound assignment\n-\tprocedures before non-typebound.\n-\n-2013-08-23  Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\t* trans-array.c (gfc_conv_section_startstride): Move &loop->pre access\n-\tto the callers.\n-\t(gfc_conv_ss_startstride, gfc_conv_expr_descriptor): Update callers.\n-\n-2013-08-22  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/58185\n-\t* match.c (copy_ts_from_selector_to_associate): Only build class\n-\tcontainer for polymorphic selector. Some cleanup.\n-\n-2013-08-20  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/53655\n-\t* trans-decl.c (generate_local_decl): Check if type has any components.\n-\n-2013-08-19  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/46271\n-\t* openmp.c (resolve_omp_clauses): Bugfix for procedure pointers.\n-\n-2013-08-12  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/56666\n-\t* gfortran.h (gfc_option_t):  Add warn_zerotrip.\n-\t* invoke.texi (-Wzerotrip):  Document option.\n-\t* lang.opt (Wzerotrip):  Add.\n-\t* options.c (gfc_init_options):  Initialize warn_zerotrip.\n-\t(set_Wall): Add handling of warn_zerotrip.\n-\t(gfc_handle_option):  Handle OPT_Wzerotrip.\n-\t* resolve.c (gfc_resolve_iterator): Honor\n-\tgfc_option.warn_zerotrip; update error message to show\n-\thow to suppress the warning.\n-\n-2013-08-09  Janus Weil  <janus@gcc.gnu.org>\n-\n-\t* gfortran.h (gfc_get_code): Modified prototype.\n-\t* class.c (finalize_component, finalization_scalarizer,\n-\tfinalization_get_offset, finalizer_insert_packed_call,\n-\tgenerate_finalization_wrapper, gfc_find_derived_vtab,\n-\tgfc_find_intrinsic_vtab): Use 'gfc_get_code'.\n-\t* io.c (match_io_iterator, match_io_element, terminate_io, get_io_list,\n-\tgfc_match_inquire): Call 'gfc_get_code' with argument.\n-\t* match.c (match_simple_forall, gfc_match_forall, gfc_match_goto,\n-\tgfc_match_nullify, gfc_match_call, match_simple_where, gfc_match_where):\n-\tDitto.\n-\t* parse.c (new_level): Ditto.\n-\t(add_statement): Use XCNEW.\n-\t* resolve.c (resolve_entries, resolve_allocate_expr,\n-\tresolve_select_type, build_assignment, build_init_assign): Call\n-\t'gfc_get_code' with argument.\n-\t* st.c (gfc_get_code): Add argument 'op'.\n-\t* trans-expr.c (gfc_trans_class_array_init_assign): Call 'gfc_get_code'\n-\twith argument.\n-\t* trans-stmt.c (gfc_trans_allocate): Ditto.\n-\n-2013-08-09  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/58058\n-\t* trans-intrinsic.c (gfc_conv_intrinsic_transfer): Free the temporary\n-\tstring, if necessary.\n-\n-2013-08-06  Martin Jambor  <mjambor@suse.cz>\n-\n-\tPR fortran/57987\n-\t* trans-decl.c (gfc_generate_function_code): Never call\n-\tcgraph_finalize_function on nested functions.\n-\n-2013-08-06  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/57306\n-\t* class.c (gfc_class_null_initializer): Rename to\n-\t'gfc_class_initializer'. Treat non-NULL init-exprs.\n-\t* gfortran.h (gfc_class_null_initializer): Update prototype.\n-\t* trans-decl.c (gfc_get_symbol_decl): Treat class variables.\n-\t* trans-expr.c (gfc_conv_initializer): Ditto.\n-\t(gfc_trans_subcomponent_assign): Renamed gfc_class_null_initializer.\n-\n-2013-07-30  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/57530\n-\t* symbol.c (gfc_type_compatible): A type is type compatible with\n-\ta class if both have the same declared type.\n-\t* interface.c (compare_type): Reject CLASS/TYPE even if they\n-\tare type compatible.\n-\n-2013-07-30  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/57530\n-\t* trans-expr.c (gfc_trans_class_assign): Handle CLASS array\n-\tfunctions.\n-\t(gfc_trans_pointer_assign): Ditto and support pointer assignment of\n-\ta polymorphic var to a nonpolymorphic var.\n-\n-2013-07-22  Po Chang  <pchang9@cs.wisc.edu>\n-\n-\t* match.c (gfc_match_call): Exit loop after setting i.\n-\n-\t* resolve.c (resolve_variable): Exit loop after setting seen.\n-\n-\t* expr.c (gfc_check_pointer_assign): Exit loop after setting warn.\n-\n-\t* trans-array.c (set_loop_bounds): Exit loop after setting\n-\tnonoptional_arr.\n-\n-\t* trans-io.c (gfc_trans_transfer): Exit loop after setting seen_vector.\n-\n-2013-07-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/58009\n-\t* expr.c (gfc_check_vardef_context):  Check for same values in\n-\tvector expression subscripts.\n-\n-2013-07-27  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/57991\n-\t* interface.c (check_some_aliasing): Also warn for intent OUT/OUT.\n-\n-2013-07-27  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/57285\n-\t* check.c (dim_rank_check): Re-enable this check for CLASS arrays.\n-\n-2013-07-25  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/57966\n-\t* resolve.c (resolve_typebound_function): Make sure the declared type,\n-\tincluding its type-bound procedures, is resolved before resolving the\n-\tactual type-bound call.\n-\n-2013-07-25  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/57639\n-\t* interface.c (compare_parameter): Check for class_ok.\n-\t* simplify.c (gfc_simplify_same_type_as): Ditto.\n-\n-2013-07-23   Ond\u0159ej B\u00edlka  <neleai@seznam.cz>\n-\n-\t* decl.c: Fix comment typos.\n-\t* interface.c: Likewise.\n-\t* trans-array.c: Likewise.\n-\t* trans.c: Likewise.\n-\n-2013-07-22  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/57906\n-\tPR fortran/52052\n-\t* class.c (gfc_build_class_symbol): Set coarray_comp.\n-\t* trans-array.c (structure_alloc_comps): For coarrays,\n-\tdirectly use the data pointer address.\n-\n-2013-07-22  Chang  <pchang9@cs.wisc.edu>\n-\n-\t* trans-decl.c (gfc_build_dummy_array_decl): Exit loop after\n-\tsetting PACKED_PARTIAL.\n-\n-2013-07-22  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* trans-array.c (gfc_array_allocate): Correct memory-leak patch.\n-\n-2013-07-22  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* trans-array.c (gfc_array_allocate,\n-\tgfc_trans_deferred_array): Plug memory leak.\n-\n-2013-07-21  Ond\u0159ej B\u00edlka  <neleai@seznam.cz>\n-\n-\t* trans-decl.c: Fix comment typos.\n-\t* trans-expr.c: Ditto.\n-\n-2013-07-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/56937\n-\t* dependency.c (gfc_dep_resolver):  Treat identical\n-\tarray subscripts as identical; don't unconditionally\n-\treturn a dependency if an array subscript is found.\n-\n-2013-07-21  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/35862\n-\t* libgfortran.h (GFC_FPE_DOWNWARD, GFC_FPE_TONEAREST,\n-\tGFC_FPE_TOWARDZERO, GFC_FPE_UPWARD): New defines.\n-\n-2013-07-21  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/57894\n-\t* check.c (min_max_args): Add keyword= check.\n-\n-2013-07-17  Mikael Morin  <mikael@gcc.gnu.org>\n-\t    Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/57895\n-\t* match.c (gfc_match_name): Ensure that the error\n-\tmessage regarding -fdollar-ok gets printed.\n-\t(gfc_match_common): Avoid multiple freeing.\n-\n-2013-07-16  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/57912\n-\t* trans-expr.c (gfc_trans_scalar_assign): Correct if\n-\tcondition for caf realloc.\n-\n-2013-07-15  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* trans-array.h (gfc_deallocate_alloc_comp_no_caf,\n-\tgfc_reassign_alloc_comp_caf): New prototype.\n-\t* trans-array.c (enum): Add DEALLOCATE_ALLOC_COMP_NO_CAF\n-\tand COPY_ALLOC_COMP_CAF.\n-\t(structure_alloc_comps): Handle it.\n-\t(gfc_reassign_alloc_comp_caf,\n-\tgfc_deallocate_alloc_comp_no_caf): New function.\n-\t(gfc_alloc_allocatable_for_assignment): Call it.\n-\t* trans-expr.c (gfc_trans_scalar_assign,\n-\tgfc_trans_arrayfunc_assign, gfc_trans_assignment_1): Ditto.\n-\t* parse.c (parse_derived): Correctly set coarray_comp.\n-\t* resolve.c (resolve_symbol): Improve error wording.\n-\n-2013-07-15  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/37336\n-\t* trans.c (gfc_add_comp_finalizer_call): New function.\n-\t* trans.h (gfc_add_comp_finalizer_call): New prototype.\n-\t* trans-array.c (structure_alloc_comps): Call it.\n-\n-2013-07-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\t    Tobias Burnus  <burnus@gcc.gnu.org>\n-\n-\tPR fortran/52669\n-\t* trans-decl.c (gfc_finish_var_decl):  Move setting of\n-\tPRIVATE for a module variable if the module has a private\n-\tdefault or -fmodule-private is given to...\n-\t(gfc_create_module_variable): here. Optionally\n-\twarn about private module variable which is not used.\n-\n-2013-07-08  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/57834\n-\t* check.c (is_c_interoperable): Add special case for c_f_pointer.\n-\t(explicit-size, gfc_check_c_f_pointer, gfc_check_c_loc): Update\n-\tcall.\n-\n-2013-07-08  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/50554\n-\t* io.c (match_inquire_element): Add missing do-var check.\n-\n-2013-07-08  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/57785\n-\t* simplify.c (compute_dot_product): Complex conjugate for\n-\tdot_product.\n-\t(gfc_simplify_dot_product, gfc_simplify_matmul): Update call.\n-\n-2013-07-08  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/57469\n-\t* trans-decl.c (generate_local_decl): Don't warn that\n-\ta dummy is unused, when it is in a namelist.\n-\n-2013-07-01  Dominique d'Humieres  <dominiq@lps.ens.fr>\n-\n-\tPR fortran/54788\n-\t* array.c (spec_size): handle the case as==NULL.\n-\n-2013-06-26  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/29800\n-\t* trans-array.c (gfc_conv_array_ref): Improve out-of-bounds\n-\tdiagnostic message.\n-\t* trans-array.c (gfc_conv_array_ref): Update prototype.\n-\t* trans-expr.c (gfc_conv_variable): Update call.\n-\n-2013-06-24  Steven G. Kargl  <sgk@troutmask.apl.washington.edu>\n-\t    Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\t    Dominique d'Humieres  <dominiq@lps.ens.fr>\n-\n-\tPR fortran/52413\n-\t* simplify.c (gfc_simplify_fraction): Fix the sign of negative values.\n-\n-2013-06-21  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/37336\n-\t* trans-array.c (gfc_trans_deferred_array): Call the\n-\tfinalizer for nonallocatable local variables.\n-\t* trans-decl.c (gfc_get_symbol_decl): Add local\n-\tfinalizable vars to the deferred list.\n-\t(gfc_trans_deferred_vars): Call gfc_trans_deferred_array\n-\tfor those.\n-\n-2013-06-21  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* trans-array.c (gfc_alloc_allocatable_for_assignment): Allocate\n-\tat least one byte.\n-\t* trans-expr.c (alloc_scalar_allocatable_for_assignment): Ditto.\n-\n-2013-06-20  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* resolve.c (get_temp_from_expr): Don't set FL_VARIABLE twice.\n-\n-2013-06-17  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* gfortran.h (gfc_option_t): Add fpe_summary.\n-\t* gfortran.texi (_gfortran_set_options): Update.\n-\t* invoke.texi (-ffpe-summary): Add doc.\n-\t* lang.opt (ffpe-summary): Add flag.\n-\t* options.c (gfc_init_options, gfc_handle_option): Handle it.\n-\t(gfc_handle_fpe_option): Renamed from gfc_handle_fpe_trap_option,\n-\talso handle fpe_summary.\n-\t* trans-decl.c (create_main_function): Update\n-\t_gfortran_set_options call.\n-\n-2013-06-15  Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\tPR fortran/49074\n-\tPR fortran/56136\n-\t* dependency.c (gfc_check_argument_var_dependency): Return 0 in the\n-\tarray constructor case.\n-\n-2013-06-14  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/57508\n-\t* resolve.c (get_temp_from_expr): Don't copy function\n-\tresult attributes to temporary.\n-\n-2013-06-14  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/57596\n-\t* trans-decl.c (gfc_trans_deferred_vars): Honor OPTIONAL\n-\tfor nullify and deferred-strings' length variable.\n-\n-2013-06-13  Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\tPR fortran/49074\n-\t* trans-expr.c (gfc_conv_variable): Don't walk the reference chain.\n-\tHandle NULL array references.\n-\t(gfc_conv_procedure_call): Remove code handling NULL array references.\n-\n-2013-06-11  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/57535\n-\t* trans-array.c (build_class_array_ref): Fix ICE for\n-\tfunction result variables.\n-\n-2013-06-08  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/37336\n-\t* trans-decl.c (init_intent_out_dt): Call finalizer\n-\twhen appropriate.\n-\n-2013-06-08  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/57553\n-\t* simplify.c (gfc_simplify_storage_size): Handle literal\n-\tstrings.\n-\t* trans-intrinsic.c (gfc_conv_intrinsic_storage_size):\n-\tAdd missing fold_convert.\n-\n-2013-06-07  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/57549\n-\t* array.c (gfc_match_array_constructor): Call\n-\tgfc_match_type_spec instead of gfc_match_decl_type_spec.\n-\t* match.c (gfc_match_type_spec): Renamed from match_type_spec.\n-\t(gfc_match_type_is, gfc_match_allocate): Update call.\n-\t* match.h (gfc_match_type_spec): Add prototype.\n-\n-2013-06-07  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/57556\n-\t* trans.c (gfc_build_final_call): Init block before use.\n-\n-2013-06-06  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/57542\n-\t* trans.c (gfc_build_final_call): Add se.pre to the block\n-\tand modify the assert.\n-\n-2013-06-04  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/37336\n-\t* trans.h (gfc_build_final_call): Remove prototype.\n-\t(gfc_add_finalizer_call): Add prototype.\n-\t* trans-array.c (gfc_trans_dealloc_allocated): Support finalization.\n-\t(structure_alloc_comps): Update caller.\n-\t(gfc_trans_deferred_array): Call finalizer.\n-\t* trans-array.h (gfc_trans_dealloc_allocated): Update prototype.\n-\t* trans-decl.c (gfc_trans_deferred_vars): Don't deallocate/finalize\n-\tvariables of the main program.\n-\t* trans-expr.c (gfc_conv_procedure_call): Support finalization.\n-\t* trans-openmp.c (gfc_omp_clause_dtor,\n-\tgfc_trans_omp_array_reduction): Update calls.\n-\t* trans-stmt.c (gfc_trans_deallocate): Avoid double deallocation\n-\tof alloc components.\n-\t* trans.c (gfc_add_finalizer_call): New function.\n-\t(gfc_deallocate_with_status,\n-\tgfc_deallocate_scalar_with_status): Call it\n-\t(gfc_build_final_call): Fix handling of scalar coarrays,\n-\tmove up in the file and make static.\n-\n-2013-06-01  Janus Weil  <janus@gcc.gnu.org>\n-\t    Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\t* error.c (get_terminal_width): Only limit the width if we're\n-\toutputting to a terminal. Try to determine width via ioctl.\n-\n-2013-06-01  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* decl.c (add_global_entry): Take locus.\n-\t(gfc_match_entry): Update call.\n-\t(gfc_match_end): Better error location.\n-\t* parse.c (parse_block_data, parse_module, add_global_procedure,\n-\tadd_global_program): Use better locus data.\n-\n-2013-05-31  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/57456\n-\t* trans-array.c (gfc_array_init_size): Use passed type spec,\n-\twhen available.\n-\t(gfc_array_allocate): Pass typespec on.\n-\t* trans-array.h (gfc_array_allocate): Update prototype.\n-\t* trans-stmt.c (gfc_trans_allocate): Pass typespec on.\n-\n-2013-05-31  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/54190\n-\tPR fortran/57217\n-\t* gfortran.h (gfc_terminal_width): Remove prototype.\n-\t* error.c (get_terminal_width): Moved here from misc.c. Renamed.\n-\tTry to determine terminal width from environment variable.\n-\t* interface.c (compare_type, compare_rank): New functions. Fix assumed\n-\ttype/rank handling.\n-\t(compare_type_rank, check_dummy_characteristics,\n-\tcheck_result_characteristics, gfc_compare_interfaces): Use them.\n-\t(symbol_rank): Slightly modified and moved.\n-\t* misc.c (gfc_terminal_width): Moved to error.c.\n-\n-2013-05-30  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/54189\n-\t* resolve.c (check_assumed_size_reference): Check for e->ref.\n-\n-2013-05-30  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/57458\n-\t* interface.c (compare_parameter): Update C1239/C1240 constraint\n-\tcheck for assumed-rank/TS29113.\n-\n-2013-05-29  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/37336\n-\t* class.c (finalize_component): Fix coarray array refs.\n-\t(generate_finalization_wrapper): Only gfc_convert_type_warn\n-\twhen the kind value is different.\n-\t(gfc_find_intrinsic_vtab): _copy's dst is now intent(inout).\n-\t(gfc_find_derived_vtab): Ditto. Enable finalization-wrapper\n-\tgeneration.\n-\t* module.c (MOD_VERSION): Bump.\n-\t(gfc_dump_module, gfc_use_module): Remove empty line in .mod.\n-\t* trans-array.c (gfc_conv_descriptor_token): Accept nonrestricted\n-\tvoid pointer.\n-\t(gfc_array_allocate, structure_alloc_comps): Don't nullify for\n-\tBT_CLASS allocations.\n-\t* trans-stmt.c (gfc_trans_allocate): Ditto.\n-\n-2013-05-29  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/37336\n-\t* resolve.c (gfc_resolve_finalizers): Remove not implemented error.\n-\n-2013-05-28  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* trans-expr.c (gfc_conv_procedure_call): Deallocate\n-\tpolymorphic arrays for allocatable intent(out) dummies.\n-\t(gfc_reset_vptr): New function, moved from trans-stmt.c\n-\tand extended.\n-\t* trans-stmt.c (reset_vptr): Remove.\n-\t(gfc_trans_deallocate): Update calls.\n-\t* trans.h (gfc_reset_vptr): New prototype.\n-\n-2013-05-28  Dominique d'Humieres  <dominiq@lps.ens.fr>\n-\n-\tPR fortran/57435\n-\t* module.c (check_for_ambiguous): Avoid null pointer deref.\n-\n-2013-05-28  Janus Weil  <janus@gcc.gnu.org>\n-\t    Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/57217\n-\t* interface.c (check_dummy_characteristics): Symmetrize type check.\n-\n-2013-05-27  Bud Davis  <jmdavis@link.com>\n-\n-\tPR fortran/50405\n-\t* resolve.c (resolve_formal_arglist): Detect error when an argument\n-\thas the same name as the function.\n-\n-2013-05-27  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* expr.c (gfc_build_intrinsic_call): Make symbol as attr.artificial.\n-\t* intrinsic.c (gfc_is_intrinsic): Disable std check for those.\n-\n-2013-05-22  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* resolve.c (get_temp_from_expr): Change mangling to\n-\tstart always with a _.\n-\n-2013-05-22  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* resolve.c (get_temp_from_expr): Fix temp var mangling.\n-\n-2013-05-22  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/57364\n-\t* resolve.c (get_temp_from_expr): Commit created sym.\n-\n-2013-05-22  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/57338\n-\t* intrinsic.c (do_check): Move some checks to ...\n-\t(do_ts29113_check): ... this new function.\n-\t(check_specific, gfc_intrinsic_sub_interface): Call it.\n-\n-2013-05-22  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\t* intrinsic.texi (RANDOM_SEED): Improve example.\n-\n-2013-05-21  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/57035\n-\t* intrinsic.c (do_check): Add constraint check for\n-\tNO_ARG_CHECK, assumed rank and assumed type.\n-\t* gfortran.texi (NO_ARG_CHECK): Minor wording change,\n-\tallow PRESENT intrinsic.\n-\n-2013-05-20  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/48858\n-\tPR fortran/55465\n-\t* decl.c (add_global_entry): Add sym_name.\n-\t* parse.c (add_global_procedure): Ditto.\n-\t* resolve.c (resolve_bind_c_derived_types): Handle multiple decl for\n-\ta procedure.\n-\t(resolve_global_procedure): Handle gsym->ns pointing to a module.\n-\t* trans-decl.c (gfc_get_extern_function_decl): Ditto.\n-\n-2013-05-20  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/48858\n-\t* decl.c (add_global_entry): Use nonbinding name\n-\tonly for F2003 or if no binding label exists.\n-\t(gfc_match_entry): Update calls.\n-\t* parse.c (gfc_global_used): Improve error message.\n-\t(add_global_procedure): Use nonbinding name\n-\tonly for F2003 or if no binding label exists.\n-\t(gfc_parse_file): Update call.\n-\t* resolve.c (resolve_global_procedure): Use binding\n-\tname when available.\n-\t* trans-decl.c (gfc_get_extern_function_decl): Ditto.\n-\n-2013-05-20  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/48858\n-\t* decl.c (gfc_match_bind_c_stmt): Add gfc_notify_std.\n-\t* match.c (gfc_match_common): Don't add commons to gsym.\n-\t* resolve.c (resolve_common_blocks): Add to gsym and\n-\tadd checks.\n-\t(resolve_bind_c_comms): Remove.\n-\t(resolve_types): Remove call to the latter.\n-\t* trans-common.c (gfc_common_ns): Remove static var.\n-\t(gfc_map_of_all_commons): Add static var.\n-\t(build_common_decl): Correctly handle binding label.\n-\n-2013-05-16  Jason Merrill  <jason@redhat.com>\n-\n-\t* Make-lang.in (f951$(exeext)): Use link mutex.\n-\n-2013-05-05  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* resolve.c (conformable_arrays): Avoid segfault\n-\twhen ar.start[i] == NULL.\n-\n-2013-05-05  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/57141\n-\t* decl.c (gfc_match_null): Permit use-associated\n-\tNULL intrinsic.\n-\n-2013-05-04  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* decl.c (gfc_verify_c_interop_param): Permit allocatable\n-\tand pointer with -std=f2008ts.\n-\n-2013-05-02  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/57142\n-\t* simplify.c (gfc_simplify_size): Renamed from\n-\tsimplify_size; fix kind=8 handling.\n-\t(gfc_simplify_size): New function.\n-\t(gfc_simplify_shape): Add range check.\n-\t* resolve.c (resolve_function): Fix handling\n-\tfor ISYM_SIZE.\n-\n-2013-05-01  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* frontend-passes.c (optimize_power):  Fix typo\n-\tin comment.\n-\n-2013-04-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/57071\n-\t* frontend-passes.c (optimize_power):  Simplify\n-\t1**k to 1.\n-\n-2013-04-28  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/57114\n-\t* intrinsic.texi (RANK): Correct syntax description and\n-\texpected result.\n-\n-2013-04-28  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/57093\n-\t* trans-types.c (gfc_get_element_type): Fix handling\n-\tof scalar coarrays of type character.\n-\t* intrinsic.texi (PACK): Add missing \")\".\n-\n-2013-04-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/57071\n-\t* frontend-passes (optimize_power):  New function.\n-\t(optimize_op):  Use it.\n-\n-2013-04-25  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR bootstrap/57028\n-\t* Make-lang.in (f951): Link in ZLIB.\n-\t(CFLAGS-fortran/module.o): Add zlib include directory.\n-\n-2013-04-22  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/53685\n-\tPR fortran/57022\n-\t* check.c (gfc_calculate_transfer_sizes): Fix for array-valued SOURCE\n-\texpressions.\n-\t* simplify.c (gfc_simplify_sizeof,gfc_simplify_storage_size): Get rid\n-\tof special treatment for EXPR_ARRAY.\n-\t* target-memory.h (gfc_element_size): New prototype.\n-\t* target-memory.c (size_array): Remove.\n-\t(gfc_element_size): New function.\n-\t(gfc_target_expr_size): Modified to always return the full size of the\n-\texpression.\n-\n-2013-04-20  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/56907\n-\t* trans-intrinsic.c (conv_isocbinding_function): Don't pack array\n-\tpassed to C_LOC\n-\n-2013-04-19  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\t    Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\tPR fortran/56872\n-\t* frontend-passes.c (copy_walk_reduction_arg): Change argument type\n-\tto gfc_constructor.  If it has an iterator, wrap the copy of its\n-\texpression in an array constructor with that iterator.  Don't special\n-\tcase function expressions.\n-\t(callback_reduction): Update caller.  Don't return early if there is\n-\tan iterator.\n-\n-2013-04-18  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* expr.c (find_array_element): Don't copy expr.\n-\t* data.c (create_character_initializer): Free expr.\n-\t* frontend-passes.c (combine_array_constructor): Ditto.\n-\t* match.c (match_typebound_call, gfc_match_select_type): Ditto.\n-\t* resolve.c (resolve_typebound_function): Free gfc_ref.\n-\n-2013-04-18  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/56994\n-\t* invoke.texi (NEAREST): S argument is not optional.\n-\n-2013-04-17  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/56814\n-\t* interface.c (check_result_characteristics): Get result from interface\n-\tif present.\n-\n-2013-04-17  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR fortran/40958\n-\t* scanner.h: New file.\n-\t* Make-lang.in: Dependencies on scanner.h.\n-\t* scanner.c (gfc_directorylist): Move to scanner.h.\n-\t* module.c: Don't include md5.h, include scanner.h and zlib.h.\n-\t(MOD_VERSION): Add comment about backwards compatibility.\n-\t(module_fp): Change type to gzFile.\n-\t(ctx): Remove.\n-\t(gzopen_included_file_1): New function.\n-\t(gzopen_included_file): New function.\n-\t(gzopen_intrinsic_module): New function.\n-\t(write_char): Use gzputc.\n-\t(read_crc32_from_module_file): New function.\n-\t(read_md5_from_module_file): Remove.\n-\t(gfc_dump_module): Use gz* functions instead of stdio, check gzip\n-\tcrc32 instead of md5.\n-\t(read_module_to_tmpbuf): Use gz* functions instead of stdio.\n-\t(gfc_use_module): Use gz* functions.\n-\n-2013-04-16  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/39505\n-\t* decl.c (ext_attr_list): Add EXT_ATTR_NO_ARG_CHECK.\n-\t* gfortran.h (ext_attr_id_t): Ditto.\n-\t* gfortran.texi (GNU Fortran Compiler Directives):\n-\tDocument it.\n-\t* interface.c (compare_type_rank): Ignore rank for NO_ARG_CHECK.\n-\t(compare_parameter): Ditto - and regard as unlimited polymorphic.\n-\t* resolve.c (resolve_symbol, resolve_variable): Add same constraint\n-\tchecks as for TYPE(*); turn dummy to TYPE(*),dimension(*).\n-\t(gfc_explicit_interface_required): Require explicit interface\n-\tfor NO_ARG_CHECK.\n-\n-2013-04-16  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/56968\n-\t* expr.c (gfc_check_pointer_assign): Handle generic functions returning\n-\tprocedure pointers.\n-\n-2013-04-16  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/56969\n-\t* intrinsic.c (gfc_intrinsic_func_interface): Don't set\n-\tmodule name to \"(intrinsic)\" for intrinsics from intrinsic\n-\tmodules.\n-\n-2013-04-15  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* intrinsic.texi (SYSTEM_CLOCK): Recommend kind=8.\n-\n-2013-04-15  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR fortran/56919\n-\t* intrinsics.texi (SYSTEM_CLOCK): Update documentation.\n-\n-2013-04-15  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* class.c (gfc_find_intrinsic_vtab): Removed unused var.\n-\t* dependency.c (check_data_pointer_types): Fix check.\n-\t* frontend-passes.c (check_data_pointer_types): Remove\n-\tsuperfluous statement.\n-\t* parse.c (decode_omp_directive): Add missing break.\n-\t* resolve.c (resolve_typebound_subroutine: Free variable.\n-\t* trans-decl.c (create_function_arglist): Correct condition.\n-\n-2013-04-14  Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\tPR fortran/56816\n-\t* match.c (gfc_match_select_type): Add syntax error. Move namespace\n-\tallocation and cleanup...\n-\t* parse.c (decode_statement): ... here.\n-\n-2013-04-13  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/55959\n-\t* expr.c (gfc_simplify_expr): Branch is not unreachable.\n-\n-2013-04-12  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/56266\n-\t* primary.c (gfc_match_varspec): Turn gcc_assert into MATCH_ERROR.\n-\n-2013-04-12  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/56929\n-\t* trans-array.c (duplicate_allocatable): Fix handling\n-\tof scalar coarrays.\n-\n-2013-04-12  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/56261\n-\t* gfortran.h (gfc_explicit_interface_required): New prototype.\n-\t* expr.c (gfc_check_pointer_assign): Check if an explicit interface is\n-\trequired in a proc-ptr assignment.\n-\t* interface.c (check_result_characteristics): Extra check.\n-\t* resolve.c (gfc_explicit_interface_required): New function.\n-\t(resolve_global_procedure): Use new function\n-\t'gfc_explicit_interface_required'. Do a full interface check.\n-\n-2013-04-12  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/56845\n-\t* trans-decl.c (gfc_trans_deferred_vars): Restrict\n-\tstatic CLASS init to SAVE and -fno-automatic.\n-\n-2013-04-12  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/56845\n-\t* trans-decl.c (gfc_trans_deferred_vars): Set _vptr for\n-\tallocatable static BT_CLASS.\n-\t* trans-expr.c (gfc_class_set_static_fields): New function.\n-\t* trans.h (gfc_class_set_static_fields): New prototype.\n-\n-2013-04-11  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\t* gfortran.h: Remove enum gfc_try, replace gfc_try with bool type.\n-\t* arith.c: Replace gfc_try with bool type.\n-\t* array.c: Likewise.\n-\t* check.c: Likewise.\n-\t* class.c: Likewise.\n-\t* cpp.c: Likewise.\n-\t* cpp.h: Likewise.\n-\t* data.c: Likewise.\n-\t* data.h: Likewise.\n-\t* decl.c: Likewise.\n-\t* error.c: Likewise.\n-\t* expr.c: Likewise.\n-\t* f95-lang.c: Likewise.\n-\t* interface.c: Likewise.\n-\t* intrinsic.c: Likewise.\n-\t* intrinsic.h: Likewise.\n-\t* io.c: Likewise.\n-\t* match.c: Likewise.\n-\t* match.h: Likewise.\n-\t* module.c: Likewise.\n-\t* openmp.c: Likewise.\n-\t* parse.c: Likewise.\n-\t* parse.h: Likewise.\n-\t* primary.c: Likewise.\n-\t* resolve.c: Likewise.\n-\t* scanner.c: Likewise.\n-\t* simplify.c: Likewise.\n-\t* symbol.c: Likewise.\n-\t* trans-intrinsic.c: Likewise.\n-\t* trans-openmp.c: Likewise.\n-\t* trans-stmt.c: Likewise.\n-\t* trans-types.c: Likewise.\n-\n-2013-04-09  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* gfortran.texi (KIND Type Parameters,\n-\tInternal representation of LOGICAL variables): Add crossrefs.\n-\t(Intrinsic Types): Mention issues with _Bool interop.\n-\t(Naming and argument-passing conventions): New section.\n-\n-2013-04-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/56782\n-\t* frontend-passes.c (callback_reduction):  Don't do\n-\tany simplification if there is only a single element\n-\twhich has an iterator.\n-\n-2013-04-07  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/56849\n-\t* iresolve.c (gfc_resolve_reshape): Set shape also\n-\twith order=.\n-\n-2013-04-04  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/40881\n-\t* match.c (gfc_match_return): Remove standard notification.\n-\t* primary.c (gfc_match_actual_arglist): Add standard notification.\n-\n-2013-04-04  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/50269\n-\t* gcc/fortran/check.c (is_c_interoperable,\n-\tgfc_check_c_loc): Correct c_loc array checking\n-\tfor Fortran 2003 and Fortran 2008.\n-\n-2013-04-03  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/56284\n-\tPR fortran/40881\n-\t* decl.c (gfc_match_formal_arglist): Warn about alternate-return\n-\targuments.\n-\t* interface.c (check_dummy_characteristics): Return if symbols are NULL.\n-\n-2013-04-01  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/56500\n-\t* symbol.c (gfc_set_default_type): Build class container for\n-\tIMPLICIT CLASS.\n-\n-2013-03-31  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* class.c (finalization_scalarizer, finalizer_insert_packed_call,\n-\tgenerate_finalization_wrapper): Avoid segfault with absent SIZE=\n-\targument to TRANSFER and use correct result kind for SIZE.\n-\t* intrinsic.c (gfc_isym_id_by_intmod): Also handle ids of\n-\tnonmodules.\n-\t* trans.c (gfc_build_final_call): Handle coarrays.\n-\n-2013-03-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* trans-expr.c (build_memcmp_call):  New function.\n-\t(gfc_build_compare_string):  If the strings\n-\tcompared have constant and equal lengths and\n-\tthe strings are kind=1, or, for kind=4 strings,\n-\tthe test is for (in)equality, use memcmp().\n-\n-2013-03-29  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/35203\n-\t* trans-decl.c (create_function_arglist): Pass hidden argument\n-\tfor passed-by-value optional+value dummies.\n-\t* trans-expr.c (gfc_conv_expr_present,\n-\tgfc_conv_procedure_call): Handle those.\n-\n-2013-03-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/45159\n-\t* gfortran.h (gfc_dep_difference):  Add prototype.\n-\t* dependency.c (discard_nops):  New function.\n-\t(gfc_dep_difference):  New function.\n-\t(check_section_vs_section):  Use gfc_dep_difference\n-\tto calculate the difference of starting indices.\n-\t* trans-expr.c (gfc_conv_substring):  Use\n-\tgfc_dep_difference to calculate the length of\n-\tsubstrings where possible.\n-\n-2013-03-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/55806\n-\t* frontend-passes.c (optimize_code):  Keep track of\n-\tcurrent code to make code insertion possible.\n-\t(combine_array_constructor):  New function.\n-\t(optimize_op):  Call it.\n-\n-2013-03-27  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/56650\n-\tPR fortran/36437\n-\t* check.c (gfc_check_sizeof, gfc_check_c_sizeof,\n-\tgfc_check_storage_size): Update checks.\n-\t* intrinsic.texi (SIZEOF): Correct class.\n-\t* intrinsic.h (gfc_simplify_sizeof,\n-\tgfc_simplify_storage_size): New prototypes.\n-\t* intrinsic.c (add_functions): Use them.\n-\t* simplify.c (gfc_simplify_sizeof,\n-\tgfc_simplify_storage_size): New functions.\n-\n-2013-03-27  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR fortran/25708\n-\t* module.c (module_locus): Use long for position.\n-\t(module_content): New variable.\n-\t(module_pos): Likewise.\n-\t(prev_character): Remove.\n-\t(bad_module): Free data instead of closing mod file.\n-\t(set_module_locus): Use module_pos.\n-\t(get_module_locus): Likewise.\n-\t(module_char): use buffer rather than stdio file.\n-\t(module_unget_char): Likewise.\n-\t(read_module_to_tmpbuf): New function.\n-\t(gfc_use_module): Call read_module_to_tmpbuf.\n-\n-2013-03-26  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/56649\n-\t* simplify.c (gfc_simplify_merge): Simplify more.\n-\n-2013-03-25  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/38536\n-\tPR fortran/38813\n-\tPR fortran/38894\n-\tPR fortran/39288\n-\tPR fortran/40963\n-\tPR fortran/45824\n-\tPR fortran/47023\n-\tPR fortran/47034\n-\tPR fortran/49023\n-\tPR fortran/50269\n-\tPR fortran/50612\n-\tPR fortran/52426\n-\tPR fortran/54263\n-\tPR fortran/55343\n-\tPR fortran/55444\n-\tPR fortran/55574\n-\tPR fortran/56079\n-\tPR fortran/56378\n-\t* check.c (gfc_var_strlen): Properly handle 0-sized string.\n-\t(gfc_check_c_sizeof): Use is_c_interoperable, add checks.\n-\t(is_c_interoperable, gfc_check_c_associated, gfc_check_c_f_pointer,\n-\tgfc_check_c_f_procpointer, gfc_check_c_funloc, gfc_check_c_loc): New\n-\tfunctions.\n-\t* expr.c (check_inquiry): Add c_sizeof, compiler_version and\n-\tcompiler_options.\n-\t(gfc_check_pointer_assign): Refine function result check.\n-\tgfortran.h (gfc_isym_id): Add GFC_ISYM_C_ASSOCIATED,\n-\tGFC_ISYM_C_F_POINTER, GFC_ISYM_C_F_PROCPOINTER, GFC_ISYM_C_FUNLOC,\n-\tGFC_ISYM_C_LOC.\n-\t(iso_fortran_env_symbol, iso_c_binding_symbol): Handle\n-\tNAMED_SUBROUTINE.\n-\t(generate_isocbinding_symbol): Update prototype.\n-\t(get_iso_c_sym): Remove.\n-\t(gfc_isym_id_by_intmod, gfc_isym_id_by_intmod_sym): New prototypes.\n-\t* intrinsic.c (gfc_intrinsic_subroutine_by_id): New function.\n-\t(gfc_intrinsic_sub_interface): Use it.\n-\t(add_functions, add_subroutines): Add missing C-binding intrinsics.\n-\t(gfc_intrinsic_func_interface): Add special case for c_loc.\n-\tgfc_isym_id_by_intmod, gfc_isym_id_by_intmod_sym): New functions.\n-\t(gfc_intrinsic_func_interface, gfc_intrinsic_sub_interface): Use them.\n-\t* intrinsic.h (gfc_check_c_associated, gfc_check_c_f_pointer,\n-\tgfc_check_c_f_procpointer, gfc_check_c_funloc, gfc_check_c_loc,\n-\tgfc_resolve_c_loc, gfc_resolve_c_funloc): New prototypes.\n-\t* iresolve.c (gfc_resolve_c_loc, gfc_resolve_c_funloc): New\n-\tfunctions.\n-\t* iso-c-binding.def: Split PROCEDURE into NAMED_SUBROUTINE and\n-\tNAMED_FUNCTION.\n-\t* iso-fortran-env.def: Add NAMED_SUBROUTINE for completeness.\n-\t* module.c (create_intrinsic_function): Support subroutines and\n-\tderived-type results.\n-\t(use_iso_fortran_env_module): Update calls.\n-\t(import_iso_c_binding_module): Ditto; update calls to\n-\tgenerate_isocbinding_symbol.\n-\t* resolve.c (find_arglists): Skip for intrinsic symbols.\n-\t(gfc_resolve_intrinsic): Find intrinsic subs via id.\n-\t(is_scalar_expr_ptr, gfc_iso_c_func_interface,\n-\tset_name_and_label, gfc_iso_c_sub_interface): Remove.\n-\t(resolve_function, resolve_specific_s0): Remove calls to those.\n-\t(resolve_structure_cons): Fix handling.\n-\t* symbol.c (gen_special_c_interop_ptr): Update c_ptr/c_funptr\n-\tgeneration.\n-\t(gen_cptr_param, gen_fptr_param, gen_shape_param,\n-\tbuild_formal_args, get_iso_c_sym): Remove.\n-\t(std_for_isocbinding_symbol): Handle NAMED_SUBROUTINE.\n-\t(generate_isocbinding_symbol): Support hidden symbols and\n-\tusing c_ptr/c_funptr symtrees for nullptr defs.\n-\t* target-memory.c (gfc_target_encode_expr): Fix handling\n-\tof c_ptr/c_funptr.\n-\t* trans-expr.c (conv_isocbinding_procedure): Remove.\n-\t(gfc_conv_procedure_call): Remove call to it.\n-\t(gfc_trans_subcomponent_assign, gfc_conv_expr): Update handling\n-\tof c_ptr/c_funptr.\n-\t* trans-intrinsic.c (conv_isocbinding_function,\n-\tconv_isocbinding_subroutine): New.\n-\t(gfc_conv_intrinsic_function, gfc_conv_intrinsic_subroutine):\n-\tCall them.\n-\t* trans-io.c (transfer_expr): Fix handling of c_ptr/c_funptr.\n-\t* trans-types.c (gfc_typenode_for_spec,\n-\tgfc_get_derived_type): Ditto.\n-\t(gfc_init_c_interop_kinds): Handle NAMED_SUBROUTINE.\n-\n-2013-03-18  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* gfortran.h (gfc_option_t): Remove flag_whole_file.\n-\t* invoke.texi (-fno-whole-file): Remove.\n-\t* lang.opt (fwhole-file): Change to Ignore.\n-\t* options.c (gfc_init_options, gfc_post_options,\n-\tgfc_handle_option): Remove !flag_whole_file handling\n-\t* parse.c (resolve_all_program_units, translate_all_program_units,\n-\tgfc_parse_file): Ditto.\n-\t* resolve.c (resolve_global_procedure): Ditto.\n-\t* trans-decl.c (gfc_get_symbol_decl, gfc_get_extern_function_decl,\n-\tgfc_create_module_variable): Ditto.\n-\t* trans-types.c (gfc_get_derived_type): Ditto.\n-\n-2013-03-15  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/56615\n-\t* trans-intrinsic.c (gfc_conv_intrinsic_transfer): Pack arrays\n-\tif they are not simply contiguous.\n-\n-2013-03-11  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* gfortran.texi (STRUCTURE and RECORD): State more clearly how\n-\tto convert them into derived types.\n-\n-2013-03-10  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/56575\n-\t* expr.c (gfc_default_initializer): Check that a class declared\n-\ttype has any components.\n-\t* resolve.c (resolve_fl_derived0): On failing the test for C437\n-\tset the type to BT_UNKNOWN to prevent repeat error messages.\n-\n-2013-03-03  Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\tPR fortran/56477\n-\t* expr.c (gfc_check_pointer_assign): Avoid NULL pointer dereference.\n-\n-2013-03-03  Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\tPR fortran/54730\n-\t* array.c (gfc_match_array_constructor): Set a checkpoint before\n-\tmatching a typespec.  Drop it on success, restore it otherwise.\n-\n-2013-03-03  Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\tPR fortran/54730\n-\t* gfortran.h (struct gfc_undo_change_set): New field 'previous'.\n-\t(gfc_new_undo_checkpoint, gfc_drop_last_undo_checkpoint,\n-\tgfc_restore_last_undo_checkpoint): New prototypes.\n-\t* symbol.c (default_undo_chgset_var): Update initialization.\n-\t(single_undo_checkpoint_p, gfc_new_undo_checkpoint,\n-\tfree_undo_change_set_data, pop_undo_change_set,\n-\tgfc_drop_last_undo_checkpoint, enforce_single_undo_checkpoint):\n-\tNew functions.\n-\t(save_symbol_data): Handle multiple change sets.  Make sure old_symbol\n-\tfield's previous value is not overwritten.  Clear gfc_new field.\n-\t(restore_old_symbol): Restore previous old_symbol field.\n-\t(gfc_restore_last_undo_checkpoint): New function, using body renamed\n-\tfrom gfc_undo_symbols.  Restore the previous change set as current one.\n-\t(gfc_undo_symbols): New body.\n-\t(gfc_commit_symbols, gfc_commit_symbol, gfc_enforce_clean_symbol_state):\n-\tCall enforce_single_undo_checkpoint.\n-\t(gfc_symbol_done_2): Ditto.  Free change set data.\n-\n-2013-03-03  Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\t* symbol.c (restore_old_symbol): Fix thinko.\n-\n-2013-03-03  Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\t* symbol.c (gfc_undo_symbols): Move code...\n-\t(restore_old_symbol): ... here as a new function.\n-\n-2013-03-03  Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\t* Make-lang.in (F95_PARSER_OBJS): Add dependency to vec.h.\n-\t* gfortran.h: Include vec.h.\n-\t(gfc_undo_change_set): New struct.\n-\t* symbol.c (tentative_tbp): Remove struct.\n-\t(changed_syms, tentative_tbp_list): Remove variables.\n-\t(default_undo_chgset_var, latest_undo_chgset): New variables.\n-\t(save_symbol_data, gfc_get_sym_tree, gfc_undo_symbols,\n-\tgfc_commit_symbols, gfc_commit_symbol,\n-\tgfc_enforce_clean_symbol_state, gfc_get_typebound_proc):\n-\tUse latest_undo_chgset instead of changed_syms and tentative_tbp_list.\n-\n-2013-03-01  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/56491\n-\t* iresolve.c (resolve_bound): Use gfc_get_string instead of xstrdup.\n-\t* symbol.c (free_components): Free proc-pointer components.\n-\n-2013-03-01  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* trans-decl.c (gfc_trans_deferred_vars): Free expr after use.\n-\t* trans-io.c (build_dt): Ditto.\n-\n-2013-02-24  Joseph Myers  <joseph@codesourcery.com>\n-\n-\t* resolve.c (generate_component_assignments): Don't use UTF-8\n-\tligature in diagnostic.\n-\n-2013-02-21  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/56385\n-\t* trans-array.c (structure_alloc_comps): Handle procedure-pointer\n-\tcomponents with allocatable result.\n-\n-2013-02-21  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/56416\n-\t* gfortran.texi (Part II: Language Reference, Extensions,\n-\tNon-Fortran Main Program): Sort @menu to match actual section order.\n-\t* intrinsic.texi (Intrinsic Procedures): Ditto.\n-\t(C_F_POINTER, PRECISION): Move to the alphabetically correct place.\n-\n-2013-02-15  Tobias Burnus  <burnus@net-b.de>\n-\t    Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\tPR fortran/56318\n-\t* simplify.c (gfc_simplify_matmul): Fix result shape\n-\tand matmul result.\n-\n-2013-02-15  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/53818\n-\t* resolve.c (apply_default_init_local): Don't create an\n-\tinitializer for a result variable.\n-\n-2013-02-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/56224\n-\t* gfortran.h (gfc_add_include_path):  Add boolean argument\n-\tfor warn.\n-\t* scanner.c (gfc_add_include_path):  Pass along warn argument\n-\tto add_path_to_list.\n-\t* options.c (gfc_post_options):  Add true warn argument to\n-\tgfc_add_include_path.\n-\t(gfc_handle_module_path_options):  Likewise.\n-\t(gfc_handle_option): Also gfc_add_include_path for intrinsic\n-\tmodules, without warning.\n-\n-2013-02-14  Paul Thomas  <pault@gcc.gnu.org>\n-\t    Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR testsuite/56138\n-\t* trans-decl.c (gfc_get_symbol_decl): Fix deferred-length\n-\tresults for functions without extra result variable.\n-\n-\tRevert:\n-\t2013-01-30  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/56138\n-\t* trans-decl.c (gfc_trans_deferred_vars): Fix deferred-length\n-\tresults for functions without extra result variable.\n-\n-2013-02-12  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/46952\n-\t* resolve.c (resolve_call): Do not check deferred procedures for\n-\trecursiveness.\n-\n-2013-02-09  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/55362\n-\t* check.c (array_check): It is an error if a procedure is\n-\tpassed.\n-\n-2013-02-08  Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\tPR fortran/54107\n-\t* trans-types.c (gfc_get_function_type): Change a NULL backend_decl\n-\tto error_mark_node on entry.  Detect recursive types.  Build a variadic\n-\tprocedure type if the type is recursive.  Restore the initial\n-\tbackend_decl.\n-\n-2013-02-07  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/54339\n-\t* gfortran.texi (Standards): Mention TS29113.\n-\t(Varying Length Character): Mention deferred-length\n-\tstrings.\n-\t(Fortran 2003 Status): Add unlimited polymorphic.\n-\t(TS 29113 Status): Add TYPE(*) and DIMENSION(..).\n-\t(C Interop): Update the section about TS29113.\n-\n-2013-02-06  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/55789\n-\t* trans-array.c (trans_array_constructor): Remove condition\n-\t'dynamic' = true if the loop ubound is a VAR_DECL.\n-\n-2013-02-04  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/56008\n-\tPR fortran/47517\n-\t* trans-array.c (gfc_alloc_allocatable_for_assignment): Save\n-\tthe lhs descriptor before it is modified for reallocation. Use\n-\tit to deallocate allocatable components in the reallocation\n-\tblock.  Nullify allocatable components for newly (re)allocated\n-\tarrays.\n-\n-2013-02-04  Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\tPR fortran/54195\n-\t* resolve.c (resolve_typebound_procedures): Recurse through\n-\tresolve_symbol.\n-\n-2013-02-04  Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\tPR fortran/54107\n-\tPR fortran/54195\n-\t* gfortran.h (struct gfc_symbol): New field 'resolved'.\n-\t* resolve.c (resolve_fl_var_and_proc): Don't skip result symbols.\n-\t(resolve_symbol): Skip duplicate calls.  Don't check the current\n-\tnamespace.\n-\n-2013-02-02  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/50627\n-\tPR fortran/56054\n-\t* decl.c (gfc_match_end):  Remove half-ready namespace\n-\tfrom parent if the end of a block is missing.\n-\t* parse.c (parse_module):  Do not put namespace into\n-\tgsymbol on error.\n-\n-2013-01-30  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/56138\n-\t* trans-decl.c (gfc_trans_deferred_vars): Fix deferred-length\n-\tresults for functions without extra result variable.\n-\n-2013-01-29  Janus Weil  <janus@gcc.gnu.org>\n-\t    Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\tPR fortran/54107\n-\t* gfortran.h (gfc_component): Delete members 'formal' and 'formal_ns'.\n-\t(gfc_copy_formal_args,gfc_copy_formal_args_ppc,gfc_expr_replace_symbols,\n-\tgfc_expr_replace_comp): Delete.\n-\t(gfc_sym_get_dummy_args): New prototype.\n-\t* dependency.c (gfc_check_fncall_dependency): Use\n-\t'gfc_sym_get_dummy_args'.\n-\t* expr.c (gfc_is_constant_expr): Ditto.\n-\t(replace_symbol,gfc_expr_replace_symbols,replace_comp,\n-\tgfc_expr_replace_comp): Deleted.\n-\t* frontend-passes.c (doloop_code,do_function): Use\n-\t'gfc_sym_get_dummy_args'.\n-\t* interface.c (gfc_check_operator_interface,gfc_compare_interfaces,\n-\tgfc_procedure_use,gfc_ppc_use,gfc_arglist_matches_symbol,\n-\tgfc_check_typebound_override): Ditto.\n-\t* module.c (MOD_VERSION): Bump module version.\n-\t(mio_component): Do not read/write 'formal' and 'formal_ns'.\n-\t* resolve.c (resolve_procedure_interface,resolve_fl_derived0): Do not\n-\tcopy formal args, but just keep a pointer to the interface.\n-\t(resolve_function,resolve_call,resolve_typebound_generic_call,\n-\tresolve_ppc_call,resolve_expr_ppc,generate_component_assignments,\n-\tresolve_fl_procedure,gfc_resolve_finalizers,check_generic_tbp_ambiguity,\n-\tresolve_typebound_procedure,check_uop_procedure): Use\n-\t'gfc_sym_get_dummy_args'.\n-\t* symbol.c (free_components): Do not free 'formal' and 'formal_ns'.\n-\t(gfc_copy_formal_args,gfc_copy_formal_args_ppc): Deleted.\n-\t(gfc_sym_get_dummy_args): New function.\n-\t* trans-array.c (get_array_charlen,gfc_walk_elemental_function_args):\n-\tUse 'gfc_sym_get_dummy_args'.\n-\t* trans-decl.c (build_function_decl,create_function_arglist,\n-\tbuild_entry_thunks,init_intent_out_dt,gfc_trans_deferred_vars,\n-\tadd_argument_checking): Ditto.\n-\t* trans-expr.c (gfc_map_fcn_formal_to_actual,gfc_conv_procedure_call,\n-\tgfc_conv_statement_function): Ditto.\n-\t* trans-stmt.c (gfc_conv_elemental_dependencies): Ditto.\n-\t* trans-types.c (create_fn_spec,gfc_get_function_type): Ditto.\n-\n-2013-01-28  Tobias Burnus  <burnus@net-b.de>\n-\t    Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\tPR fortran/53537\n-\t* symbol.c (gfc_find_sym_tree): Don't look for the symbol outside an\n-\tinterface block.\n-\t(gfc_get_ha_symtree): Let gfc_find_sym_tree lookup the parent namespace.\n-\t* decl.c (gfc_match_data_decl): Ditto.\n-\t(variable_decl): Remove undeclared type error.\n-\t(gfc_match_import): Use renamed instead of original name.\n-\n-2013-01-27  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/55984\n-\tPR fortran/56047\n-\t* gfortran.h : Add associate_var to symbol_attr.\n-\t* resolve.c (resolve_assoc_var): Set associate_var attribute.\n-\tIf the target class_ok is set, set it for the associate\n-\tvariable.\n-\t* check.c (allocatable_check): Associate variables should not\n-\thave the allocatable attribute even if their symbols do.\n-\t* class.c (gfc_build_class_symbol): Symbols with associate_var\n-\tset will always have a good class container.\n-\n-2013-01-23  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/56081\n-\t* resolve.c (resolve_select): Add argument 'select_type', reject\n-\tnon-scalar expressions.\n-\t(resolve_select_type,resolve_code): Pass new argument to\n-\t'resolve_select'.\n-\n-2013-01-23  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/56052\n-\t* trans-decl.c (gfc_get_symbol_decl): Set DECL_ARTIFICIAL\n-\tand DECL_IGNORED_P on select_type_temporary and don't set\n-\tDECL_BY_REFERENCE.\n-\n-2013-01-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/55919\n-\t* scanner.c (add_path_to_list): Copy path to temporary and strip\n-\ttrailing directory separators before calling stat().\n-\n-2013-01-17  Richard Biener  <rguenther@suse.de>\n-\n-\t* trans-stmt.c (gfc_trans_do): Conditionally compute countm1\n-\tdependent on sign of step, avoids repeated evaluation of\n-\tstep sign test.  Avoid undefined overflow issues by using unsigned\n-\tarithmetic.\n-\n-2013-01-16  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/55983\n-\t* class.c (find_typebound_proc_uop): Check for f2k_derived instead of\n-\tasserting it.\n-\n-2013-01-16  Jakub Jelinek  <jakub@redhat.com>\n-\t    Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR driver/55884\n-\t* lang.opt (fintrinsic-modules-path): Don't accept Joined.\n-\t(fintrinsic-modules-path=): New.\n-\t* options.c (gfc_handle_option, gfc_get_option_string,\n-\tgfc_get_option_string): Handle the latter.\n-\n-2013-01-16  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/52865\n-\t* trans-stmt.c (gfc_trans_do): Put countm1-- before conditional\n-\tand use value of countm1 before the decrement in the condition.\n-\n-2013-01-15  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/54286\n-\t* expr.c (gfc_check_pointer_assign): Check for presence of\n-\t's2' before using it.\n-\n-2013-01-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/55806\n-\t* frontend-passes.c (optimize_reduction):  New function,\n-\tincluding prototype.\n-\t(callback_reduction):  Likewise.\n-\t(gfc_run_passes):  Also run optimize_reduction.\n-\t(copy_walk_reduction_arg):  New function.\n-\t(dummy_code_callback):  New function.\n-\n-2013-01-13  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/55935\n-\t* trans-expr.c (gfc_conv_structure): Call\n-\tunshare_expr_without_location on the ctor elements.\n-\n-2013-01-13  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/54286\n-\t* expr.c (gfc_check_pointer_assign): Ensure that both lvalue\n-\tand rvalue interfaces are presented to gfc_compare_interfaces.\n-\tSimplify references to interface names by using the symbols\n-\tthemselves. Call gfc_compare_interfaces with s1 and s2 inter-\n-\tchanged to overcome the asymmetry of this function. Do not\n-\trepeat the check for the presence of s1 and s2.\n-\n-2013-01-12  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/55072\n-\t* trans-array.c (gfc_conv_array_parameter): No packing was done for\n-\tfull arrays of derived type.\n-\n-2013-01-08  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/55868\n-\t* class.c (get_unique_type_string): Change $tar to STAR and\n-\treplace sprintf by strcpy where there is no formatting.\n-\t* decl.c (gfc_match_decl_type_spec): Change $tar to STAR.\n-\n-2013-01-09  Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\tPR fortran/47203\n-\t* module.c (check_for_ambiguous): Get the current program unit using\n-\tgfc_current_ns.\n-\n-2013-01-09  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/55758\n-\t* resolve.c (resolve_symbol): Reject non-C_Bool logicals\n-\tin BIND(C) procedures with -std=f*.\n-\n-2013-01-08  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/55618\n-\t* trans-expr.c (gfc_conv_procedure_call): Dereference scalar\n-\tcharacter function arguments to elemental procedures in\n-\tscalarization loops.\n-\n-2013-01-07  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/55763\n-\t* gfortran.h (gfc_check_assign_symbol): Update prototype.\n-\t* decl.c (add_init_expr_to_sym, do_parm): Update call.\n-\t* expr.c (gfc_check_assign_symbol): Handle BT_CLASS and\n-\timprove error location; support components.\n-\t(gfc_check_pointer_assign): Handle component assignments.\n-\t* resolve.c (resolve_fl_derived0): Call gfc_check_assign_symbol.\n-\t(resolve_values): Update call.\n-\t(resolve_structure_cons): Avoid double diagnostic.\n-\n-2013-01-07  Tobias Burnus  <burnus@net-b.de>\n-\t    Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/55852\n-\t* expr.c (gfc_build_intrinsic_call): Avoid clashes\n-\twith user's procedures.\n-\t* gfortran.h (gfc_build_intrinsic_call): Update prototype.\n-\t* simplify.c (gfc_simplify_size): Update call.\n-\t* class.c (finalization_scalarizer, finalization_get_offset,\n-\tfinalizer_insert_packed_call, generate_finalization_wrapper):\n-\tClean up by using gfc_build_intrinsic_call.\n-\n-2013-01-07  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/55763\n-\t* resolve.c (resolve_select_type): Reject intrinsic types for\n-\ta non-unlimited-polymorphic selector.\n-\n-2013-01-06  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/53876\n-\tPR fortran/54990\n-\tPR fortran/54992\n-\t* trans-array.c (build_array_ref): Check the TYPE_CANONICAL\n-\tto see if it is GFC_CLASS_TYPE_P.\n-\t* trans-expr.c (gfc_get_vptr_from_expr): The same.\n-\t(gfc_conv_class_to_class): If the types are not the same,\n-\tcast parmese->expr to the type of ctree.\n-\t* trans-types.c (gfc_get_derived_type): GFC_CLASS_TYPE_P of\n-\tCLASS components must be set.\n-\n-2013-01-06  Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\tPR fortran/42769\n-\tPR fortran/45836\n-\tPR fortran/45900\n-\t* module.c (read_module): Don't reuse local symtree if the associated\n-\tsymbol isn't exactly the one wanted.  Don't reuse local symtree if it is\n-\tambiguous.\n-\t* resolve.c (resolve_call): Use symtree's name instead of symbol's to\n-\tlookup the symtree.\n-\n-2013-01-05  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\t    Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\tPR fortran/55827\n-\t* class.c (gfc_fix_class_refs): Adapt ts initialization for the case\n-\te->symtree == NULL.\n-\t* trans-expr.c (gfc_conv_function_expr): Init sym earlier. Use it.\n-\n-2013-01-05  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* class.c (finalize_component): Used passed offset expr.\n-\t(finalization_get_offset): New static function.\n-\t(finalizer_insert_packed_call, generate_finalization_wrapper): Use it\n-\tto handle noncontiguous arrays.\n-\n-2013-01-04  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* trans.c (gfc_build_final_call): New function.\n-\t* trans.h (gfc_build_final_call, gfc_conv_scalar_to_descriptor):\n-\tNew function prototypes.\n-\t* trans-expr.c (gfc_conv_scalar_to_descriptor): Renamed from\n-\tconv_scalar_to_descriptor, removed static attribute.\n-\t(gfc_conv_procedure_call): Honor renaming.\n-\n-2013-01-04  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* intrinsic.c (add_functions): New internal intrinsic\n-\tfunction GFC_PREFIX (\"stride\").\n-\t* gfortran.h (gfc_isym_id): Add GFC_ISYM_STRIDE.\n-\t* intrinsic.h (gfc_resolve_stride): New prototypes.\n-\t* iresolve.c (gfc_resolve_stride): New function.\n-\t* trans-intrinsic.c (conv_intrinsic_stride): New static\n-\tfunction.\n-\t(gfc_conv_intrinsic_function): Use it.\n-\n-2013-01-04  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* class.c (gfc_find_intrinsic_vtab): Add _final\n-\tcomponent.\n-\t* decl.c (gfc_match_null): Remove superfluous\n-\tvariadic argument to gfc_match.\n-\n-2013-01-04  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/55172\n-\t* match.c (copy_ts_from_selector_to_associate): Remove call to\n-\tgfc_resolve_expr and replace it with explicit setting of the\n-\tarray reference type.\n-\t* resolve.c (resolve_select_type): It is an error if the\n-\tselector is coindexed.\n-\n-2013-01-04  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/55763\n-\t* decl.c (gfc_match_null): Parse and reject MOLD.\n-\n-2013-01-04  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/55854\n-\tPR fortran/55763\n-\t* class.c (gfc_class_null_initializer): Fix finding the vtab.\n-\t(gfc_find_intrinsic_vtab): Use BT_VOID for some components.\n-\n-2013-01-03  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/55855\n-\t* expr.c (gfc_check_assign): Use 'gfc_expr_attr' to evaluate attributes\n-\tof rvalue. Correct hyphenation in error message.\n-\n-2013-01-03  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* gfortranspec.c (lang_specific_driver): Update copyright notice\n-\tdates.\n+\tPR fortran/59654\n+\t* resolve.c (resolve_typebound_procedures): No need to create the vtab\n+\there.\n \f\n-Copyright (C) 2013 Free Software Foundation, Inc.\n+Copyright (C) 2014 Free Software Foundation, Inc.\n \n Copying and distribution of this file, with or without modification,\n are permitted in any medium without royalty provided the copyright"}, {"sha": "6c7cea7c4a406d4a22eb528cb92a5c51a2165e56", "filename": "gcc/fortran/ChangeLog-2013", "status": "added", "additions": 2083, "deletions": 0, "changes": 2083, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0f33855c98870e23ffd927f0f3d7647903fbe98/gcc%2Ffortran%2FChangeLog-2013", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0f33855c98870e23ffd927f0f3d7647903fbe98/gcc%2Ffortran%2FChangeLog-2013", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog-2013?ref=d0f33855c98870e23ffd927f0f3d7647903fbe98", "patch": "@@ -0,0 +1,2083 @@\n+2013-12-30  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/58998\n+\t* resolve.c (resolve_symbol): Check that symbol is not only flavorless\n+\tbut also untyped.\n+\n+2013-12-29  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/59612\n+\t* dump-parse-tree.c (show_typespec): Check for charlen.\n+\t* invoke.texi: Fix documentation of -fdump-fortran-optimized and\n+\t-fdump-parse-tree.\n+\n+2013-12-18  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/59493\n+\t* gfortran.h (gfc_find_intrinsic_vtab): Removed prototype.\n+\t(gfc_find_vtab): New prototype.\n+\t* class.c (gfc_find_intrinsic_vtab): Rename to 'find_intrinsic_vtab' and\n+\tmake static. Minor modifications.\n+\t(gfc_find_vtab): New function.\n+\t(gfc_class_initializer): Use new function 'gfc_find_vtab'.\n+\t* check.c (gfc_check_move_alloc): Ditto.\n+\t* expr.c (gfc_check_pointer_assign): Ditto.\n+\t* interface.c (compare_actual_formal): Ditto.\n+\t* resolve.c (resolve_allocate_expr, resolve_select_type): Ditto.\n+\t* trans-expr.c (gfc_conv_intrinsic_to_class, gfc_trans_class_assign):\n+\tDitto.\n+\t* trans-intrinsic.c (conv_intrinsic_move_alloc): Ditto.\n+\t* trans-stmt.c (gfc_trans_allocate): Ditto.\n+\n+2013-12-16  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/54949\n+\t* symbol.c (check_conflict): Forbid abstract procedure pointers.\n+\t(gfc_add_abstract): Check for attribute conflicts.\n+\n+2013-12-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libgomp/59337\n+\t* openmp.c (resolve_omp_atomic): Adjust error message.\n+\n+2013-12-15  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/59493\n+\t* class.c (gfc_find_intrinsic_vtab): Handle BT_CLASS.\n+\n+2013-12-14  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/59502\n+\t* primary.c (gfc_match_varspec): Check for 'class_ok'.\n+\n+2013-12-14  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/59450\n+\t* module.c (mio_expr): Handle type-bound function expressions.\n+\n+2013-12-12  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/59440\n+\t* trans-decl.c (generate_namelist_decl): Ensure debug DIE\n+\tis created by setting DECL_IGNORED_P to 0.\n+\n+2013-12-11  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/58916\n+\t* resolve.c (conformable_arrays): Treat scalar 'e2'.\n+\t(resolve_allocate_expr): Check rank also for unlimited-polymorphic\n+\tvariables.\n+\n+2013-12-10  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/35831\n+\t* interface.c (check_dummy_characteristics): Add checks for several\n+\tattributes.\n+\n+2013-12-10  Janus Weil  <janus@gcc.gnu.org>\n+\n+\t* gfortran.texi: Add possible kind values (and default) for\n+\tDOUBLE PRECISION.\n+\t* invoke.texi: Correct documentation of -fdefault-integer-8,\n+\t-fdefault-real-8 and -fdefault-double-8.\n+\n+2013-12-10  Janus Weil  <janus@gcc.gnu.org>\n+\n+\t* gfortran.texi: Modify documentation of kind type parameters.\n+\t* invoke.texi: Extend documentation of -fdefault-integer-8 and\n+\t-fdefault-real-8.\n+\n+2013-12-10  Janus Weil  <janus@gcc.gnu.org>\n+\n+\t* invoke.texi: Add -freal-4-real-16. Rearrange kind promotion options.\n+\n+2013-12-08  Tobias Burnus  <burnus@net-b.de>\n+\t    Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/58099\n+\tPR fortran/58676\n+\tPR fortran/41724\n+\t* resolve.c (gfc_resolve_intrinsic): Set elemental/pure.\n+\t(resolve_fl_procedure): Reject pure dummy procedures/procedure\n+\tpointers.\n+\t(gfc_explicit_interface_required): Don't require a\n+\tmatch of ELEMENTAL for intrinsics.\n+\n+2013-12-07  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/59414\n+\t* resolve.c (resolve_specific_f0): Handle CLASS-valued functions.\n+\n+2013-12-04  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR debug/37132\n+\t* trans-decl.c (generate_namelist_decl, create_module_nml_decl):\n+\tNew static functions.\n+\t(gfc_generate_module_vars, generate_local_vars): Call them.\n+\t(gfc_trans_use_stmts): Handle namelists for debug genertion.\n+\n+2013-12-01  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/57354\n+\t* trans-array.c (gfc_conv_resolve_dependencies): For other than\n+\tSS_SECTION, do a dependency check if the lhs is liable to be\n+\treallocated.\n+\n+2013-12-01  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/58410\n+\t* trans-array.c (gfc_alloc_allocatable_for_assignment): Do not\n+\tuse the array bounds of an unallocated array but set its size\n+\tto zero instead.\n+\n+2013-12-01  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/34547\n+\t* resolve.c (resolve_transfer): EXPR_NULL is always in an\n+\tinvalid context in a transfer statement.\n+\n+2013-11-28  Sergey Ostanevich  <sergos.gnu@gmail.com>\n+\n+\t* lang.opt (Wopenmp-simd): New.\n+\n+2013-11-25  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/59143\n+\t* interface.c (get_expr_storage_size): Handle array-valued type-bound\n+\tprocedures.\n+\n+2013-11-24  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* scanner.c (gfc_open_intrinsic_module): Remove function.\n+\t* gfortran.h (gfc_open_intrinsic_module): Remove prototype.\n+\n+2013-11-23  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/59228\n+\t* interface.c (compare_parameter): Check for array spec.\n+\n+2013-11-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* trans.c: Add required include files from gimple.h.\n+\t* trans-expr.c: Likewise\n+\t* trans-openmp.c: Likewise\n+\n+2013-11-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* trans.c (trans_runtime_error_vararg): Remove use of input_line\n+\tmacro.\n+\n+2013-11-17  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* fortran/trans-intrinsic.c: Include tree-nested.h.\n+\n+2013-11-14  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* trans-expr.c: Include only gimplify.h and gimple.h as needed.\n+\t* trans-openmp.c: Likewise.\n+\n+2013-11-14  Diego Novillo  <dnovillo@google.com>\n+\n+\t* decl.c: Include stringpool.h.\n+\t* iresolve.c: Include stringpool.h.\n+\t* match.c: Include stringpool.h.\n+\t* module.c: Include stringpool.h.\n+\t* target-memory.c: Include stor-layout.h.\n+\t* trans-common.c: Include stringpool.h.\n+\tInclude stor-layout.h.\n+\tInclude varasm.h.\n+\t* trans-const.c: Include stor-layout.h.\n+\t* trans-decl.c: Include stringpool.h.\n+\tInclude stor-layout.h.\n+\tInclude varasm.h.\n+\tInclude attribs.h.\n+\t* trans-expr.c: Include stringpool.h.\n+\t* trans-intrinsic.c: Include stringpool.h.\n+\tInclude tree-nested.h.\n+\tInclude stor-layout.h.\n+\t* trans-io.c: Include stringpool.h.\n+\tInclude stor-layout.h.\n+\t* trans-openmp.c: Include stringpool.h.\n+\t* trans-stmt.c: Include stringpool.h.\n+\t* trans-types.c: Include stor-layout.h.\n+\tInclude stringpool.h.\n+\t* trans.c: Include stringpool.h.\n+\n+2013-11-12  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* f95-lang.c: Don't include gimple.h.\n+\t* trans-array.c: Include gimple-expr.h instead of gimple.h.\n+\t* trans.c: Likewise.\n+\t* trans-decl.c: Likewise.\n+\t* trans-expr.c: Include gimplify.h.\n+\t* trans-openmp.c: Likewise.\n+\n+2013-11-07  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/58471\n+\t* primary.c (gfc_expr_attr): Check for result symbol.\n+\n+2013-11-06  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* gfortran.texi: Fix typo.\n+\n+2013-11-05  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* lang.opt (-Wdate-time): New option\n+\t* cpp.c (gfc_cpp_option_data): Add warn_date_time.\n+\t(gfc_cpp_init_options, gfc_cpp_handle_option,\n+\tgfc_cpp_post_options): Handle it and pass on to libcpp.\n+\n+2013-11-05  Steven G. Kargl <kargl@gcc.gnu.org>\n+\n+\tPR fortran/58989\n+\t* check.c (gfc_check_reshape): ensure that shape is a constant\n+\texpression.\n+\n+2013-11-05  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* lang.opt (fopenmp-simd): New option.\n+\t* gfortran.h (gfc_option_t): Add gfc_flag_openmp_simd.\n+\t* options.c (gfc_handle_option): Handle it.\n+\n+2013-11-04  Ian Lance Taylor  <iant@google.com>\n+\n+\t* f95-lang.c (ATTR_LEAF_LIST): Define.\n+\n+2013-11-04  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/58771\n+\t* trans-io.c (transfer_expr): If the backend_decl for a derived\n+\ttype is missing, build it with gfc_typenode_for_spec.\n+\n+2013-11-04  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/57445\n+\t* trans-expr.c (gfc_conv_class_to_class): Remove spurious\n+\tassert.\n+\n+2013-10-29  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/44350\n+\t* parse.c (parse_spec): Add C1116 constraint\n+\tcheck for BLOCK DATA.\n+\n+2013-10-29  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/58793\n+\t* trans-types.c (gfc_typenode_for_spec): Add typenode for\n+\tBT_HOLLERITH. Note that the length is incorrect but unusable.\n+\n+\tPR fortran/58858\n+\t* target-memory.c (gfc_element_size): Add element sizes for\n+\tBT_VOID and BT_ASSUMED, using gfc_typenode_for_spec.\n+\n+2013-10-24  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/44646\n+\t* trans-stmt.c (struct forall_info): Add do_concurrent field.\n+\t(gfc_trans_forall_1): Set it for do concurrent.\n+\t(gfc_trans_forall_loop): Mark those as annot_expr_ivdep_kind.\n+\n+2013-10-23  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/58793\n+\t* interface.c (compare_parameter): Reject passing TYPE(*)\n+\tto CLASS(*).\n+\n+2013-10-22  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran 57893\n+\t* class.c : Include target-memory.h.\n+\t(gfc_find_intrinsic_vtab) Build a minimal expression so that\n+\tgfc_element_size can be used to obtain the storage size, rather\n+\tthat the kind value.\n+\n+2013-10-21  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/58803\n+\t* decl.c (match_ppc_decl): Prevent later\n+\tdouble free.\n+\n+2013-10-17  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* trans-openmp.c: Include omp-low.h.\n+\n+2013-10-16  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/58652\n+\t* interface.c (compare_parameter): Accept passing CLASS(*)\n+\tto CLASS(*).\n+\n+2013-10-16  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* intrinsic.texi (OpenMP Modules): Update to OpenMPv4.\n+\tDocument omp_proc_bind_kind.\n+\n+2013-10-15  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/58652\n+\t* trans-intrinsic.c (conv_intrinsic_move_alloc): Fix handling\n+\tof CLASS(*) variables.\n+\n+2013-10-14  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/58658\n+\t* expr.c (gfc_check_vardef_context): Fix pointer diagnostic\n+\tfor CLASS(*).\n+\n+2013-10-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* trans-openmp.c (gfc_omp_clause_default_ctor,\n+\tgfc_omp_clause_dtor): Return NULL for OMP_CLAUSE_REDUCTION.\n+\t* f95-lang.c (ATTR_NULL, DEF_FUNCTION_TYPE_8): Define.\n+\t* types.def (DEF_FUNCTION_TYPE_8): Document.\n+\t(BT_FN_VOID_OMPFN_PTR_UINT,\n+\tBT_FN_VOID_OMPFN_PTR_UINT_LONG_LONG_LONG,\n+\tBT_FN_VOID_OMPFN_PTR_UINT_LONG_LONG_LONG_LONG,\n+\tBT_FN_VOID_OMPFN_PTR_OMPCPYFN_LONG_LONG_BOOL_UINT): Remove.\n+\t(BT_FN_VOID_OMPFN_PTR_UINT_UINT_UINT,\n+\tBT_FN_VOID_OMPFN_PTR_UINT_LONG_LONG_LONG_UINT,\n+\tBT_FN_VOID_OMPFN_PTR_UINT_LONG_LONG_LONG_LONG_UINT,\n+\tBT_FN_BOOL_INT, BT_FN_BOOL_INT_BOOL, BT_FN_VOID_UINT_UINT,\n+\tBT_FN_VOID_INT_PTR_SIZE_PTR_PTR_PTR,\n+\tBT_FN_VOID_INT_OMPFN_PTR_SIZE_PTR_PTR_PTR,\n+\tBT_FN_VOID_OMPFN_PTR_OMPCPYFN_LONG_LONG_BOOL_UINT_PTR): New.\n+\n+2013-10-10  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/58226\n+\t* options.c (gfc_get_option_string): Handle zero arg case.\n+\n+2013-10-02  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/58593\n+\t* trans-expr.c (gfc_conv_string_tmp): Fix obtaining\n+\tthe byte size of a single character.\n+\n+2013-10-01  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/58579\n+\t* trans-expr.c (gfc_conv_string_tmp): Correctly obtain\n+\tthe byte size of a single character.\n+\n+2013-09-27  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* intrinsic.texi (DATE_AND_TIME): Fix example.\n+\n+2013-09-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/58436\n+\t* class.c (generate_finalization_wrapper): Handle CLASS(*).\n+\n+2013-09-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57697\n+\tPR fortran/58469\n+\t* resolve.c (generate_component_assignments): Avoid double free\n+\tat runtime and freeing a still-being used expr.\n+\n+2013-09-25  Tom Tromey  <tromey@redhat.com>\n+\n+\t* Make-lang.in (fortran_OBJS): Use fortran/gfortranspec.o.\n+\t(gfortranspec.o): Remove.\n+\t(CFLAGS-fortran/gfortranspec.o): New variable.\n+\t(GFORTRAN_D_OBJS): Update.\n+\t($(F95_PARSER_OBJS), fortran/openmp.o, GFORTRAN_TRANS_DEPS)\n+\t(fortran/f95-lang.o, fortran/scanner.o, fortran/convert.o)\n+\t(fortran/frontend-passes.o, fortran/trans.o, fortran/trans-decl.o)\n+\t(fortran/trans-types, fortran/trans-const.o, fortran/trans-expr.o)\n+\t(fortran/trans-stmt.o, fortran/trans-openmp.o, fortran/trans-io.o)\n+\t(fortran/trans-array.o, fortran/trans-intrinsic.o)\n+\t(fortran/dependency.o, fortran/trans-common.o, fortran/resolve.o)\n+\t(fortran/data.o, fortran/options.o, fortran/cpp.o)\n+\t(fortran/scanner.o, fortran/module.o): Remove.\n+\n+2013-09-25  Tom Tromey  <tromey@redhat.com>\n+\n+\t* Make-lang.in (gfortranspec.o): Don't use subshell.\n+\n+2013-09-23  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/58355\n+\t* decl.c (check_extended_derived_type): Prevent segfault, modify error\n+\tmessage.\n+\n+2013-09-20  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/58099\n+\t* expr.c (gfc_check_pointer_assign): Remove second call to\n+\t'gfc_compare_interfaces' with swapped arguments.\n+\t* interface.c (gfc_compare_interfaces): Symmetrize the call to\n+\t'check_result_characteristics' by calling it with swapped arguments.\n+\n+2013-09-18  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* expr.c (gfc_check_assign_symbol): Free lvalue.ref.\n+\n+2013-09-18  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/43366\n+\t* primary.c (gfc_variable_attr): Also handle codimension.\n+\t* resolve.c (resolve_ordinary_assign): Add invalid-diagnostic for\n+\tpolymorphic assignment.\n+\n+2013-09-16  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/58356\n+\t* class.c (generate_finalization_wrapper): Init proc_tree if\n+\tnot yet resolved.\n+\n+2013-09-16  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57697\n+\t* resolve.c (generate_component_assignments): Correctly handle the\n+\tcase that the LHS is not allocated.\n+\n+2013-09-15  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57697\n+\t* resolve.c (generate_component_assignments): Handle unallocated\n+\tLHS with defined assignment of components.\n+\n+2013-09-12  Brooks Moses  <bmoses@google.com>\n+\n+\tPR driver/42955\n+\t* Make-lang.in: Do not install driver binaries in $(target)/bin.\n+\n+2013-09-09  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* invoke.texi (Error and Warning Options): Add hyphen.\n+\n+2013-09-02  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/PR56519\n+\t* gfortran.h:  Declare gfc_do_concurrent_flag as extern.\n+\t* resolve.c:  Rename do_concurrent_flag to gfc_do_concurrent_flag\n+\tand make non-static.\n+\t(resolve_function):  Use gfc_do_concurrent_flag instead of\n+\tdo_concurrent_flag.\n+\t(pure_subroutine):  Likewise.\n+\t(resolve_code):  Likewise.\n+\t(resolve_types):  Likewise.\n+\t* intrinsic.c (gfc_intrinsic_sub_interface):  Raise error for\n+\tnon-pure intrinsic subroutines within DO CONCURRENT.\n+\n+2013-08-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/52243\n+\t* trans-expr.c (is_runtime_conformable):  New function.\n+\t* gfc_trans_assignment_1:  Use it.\n+\n+2013-08-26  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/58146\n+\t* array.c (gfc_ref_dimen_size):  If possible, use\n+\tgfc_dep_difference to calculate array refrence\n+\tsizes.  Fall back to integer code otherwise.\n+\t* dependency.c (discard_nops).  Move up.\n+\tAlso discarde widening integer conversions.\n+\t(gfc_dep_compare_expr):  Use discard_nops.\n+\n+2013-08-23  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/57798\n+\t* trans-array.c (gfc_conv_ss_startstride, set_loop_bounds,\n+\tgfc_set_delta): Generate preliminary code before the outermost loop.\n+\n+2013-08-23  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/57843\n+\t* interface.c (gfc_extend_assign): Look for type-bound assignment\n+\tprocedures before non-typebound.\n+\n+2013-08-23  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* trans-array.c (gfc_conv_section_startstride): Move &loop->pre access\n+\tto the callers.\n+\t(gfc_conv_ss_startstride, gfc_conv_expr_descriptor): Update callers.\n+\n+2013-08-22  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/58185\n+\t* match.c (copy_ts_from_selector_to_associate): Only build class\n+\tcontainer for polymorphic selector. Some cleanup.\n+\n+2013-08-20  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/53655\n+\t* trans-decl.c (generate_local_decl): Check if type has any components.\n+\n+2013-08-19  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/46271\n+\t* openmp.c (resolve_omp_clauses): Bugfix for procedure pointers.\n+\n+2013-08-12  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/56666\n+\t* gfortran.h (gfc_option_t):  Add warn_zerotrip.\n+\t* invoke.texi (-Wzerotrip):  Document option.\n+\t* lang.opt (Wzerotrip):  Add.\n+\t* options.c (gfc_init_options):  Initialize warn_zerotrip.\n+\t(set_Wall): Add handling of warn_zerotrip.\n+\t(gfc_handle_option):  Handle OPT_Wzerotrip.\n+\t* resolve.c (gfc_resolve_iterator): Honor\n+\tgfc_option.warn_zerotrip; update error message to show\n+\thow to suppress the warning.\n+\n+2013-08-09  Janus Weil  <janus@gcc.gnu.org>\n+\n+\t* gfortran.h (gfc_get_code): Modified prototype.\n+\t* class.c (finalize_component, finalization_scalarizer,\n+\tfinalization_get_offset, finalizer_insert_packed_call,\n+\tgenerate_finalization_wrapper, gfc_find_derived_vtab,\n+\tgfc_find_intrinsic_vtab): Use 'gfc_get_code'.\n+\t* io.c (match_io_iterator, match_io_element, terminate_io, get_io_list,\n+\tgfc_match_inquire): Call 'gfc_get_code' with argument.\n+\t* match.c (match_simple_forall, gfc_match_forall, gfc_match_goto,\n+\tgfc_match_nullify, gfc_match_call, match_simple_where, gfc_match_where):\n+\tDitto.\n+\t* parse.c (new_level): Ditto.\n+\t(add_statement): Use XCNEW.\n+\t* resolve.c (resolve_entries, resolve_allocate_expr,\n+\tresolve_select_type, build_assignment, build_init_assign): Call\n+\t'gfc_get_code' with argument.\n+\t* st.c (gfc_get_code): Add argument 'op'.\n+\t* trans-expr.c (gfc_trans_class_array_init_assign): Call 'gfc_get_code'\n+\twith argument.\n+\t* trans-stmt.c (gfc_trans_allocate): Ditto.\n+\n+2013-08-09  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/58058\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_transfer): Free the temporary\n+\tstring, if necessary.\n+\n+2013-08-06  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR fortran/57987\n+\t* trans-decl.c (gfc_generate_function_code): Never call\n+\tcgraph_finalize_function on nested functions.\n+\n+2013-08-06  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/57306\n+\t* class.c (gfc_class_null_initializer): Rename to\n+\t'gfc_class_initializer'. Treat non-NULL init-exprs.\n+\t* gfortran.h (gfc_class_null_initializer): Update prototype.\n+\t* trans-decl.c (gfc_get_symbol_decl): Treat class variables.\n+\t* trans-expr.c (gfc_conv_initializer): Ditto.\n+\t(gfc_trans_subcomponent_assign): Renamed gfc_class_null_initializer.\n+\n+2013-07-30  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57530\n+\t* symbol.c (gfc_type_compatible): A type is type compatible with\n+\ta class if both have the same declared type.\n+\t* interface.c (compare_type): Reject CLASS/TYPE even if they\n+\tare type compatible.\n+\n+2013-07-30  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57530\n+\t* trans-expr.c (gfc_trans_class_assign): Handle CLASS array\n+\tfunctions.\n+\t(gfc_trans_pointer_assign): Ditto and support pointer assignment of\n+\ta polymorphic var to a nonpolymorphic var.\n+\n+2013-07-22  Po Chang  <pchang9@cs.wisc.edu>\n+\n+\t* match.c (gfc_match_call): Exit loop after setting i.\n+\n+\t* resolve.c (resolve_variable): Exit loop after setting seen.\n+\n+\t* expr.c (gfc_check_pointer_assign): Exit loop after setting warn.\n+\n+\t* trans-array.c (set_loop_bounds): Exit loop after setting\n+\tnonoptional_arr.\n+\n+\t* trans-io.c (gfc_trans_transfer): Exit loop after setting seen_vector.\n+\n+2013-07-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/58009\n+\t* expr.c (gfc_check_vardef_context):  Check for same values in\n+\tvector expression subscripts.\n+\n+2013-07-27  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57991\n+\t* interface.c (check_some_aliasing): Also warn for intent OUT/OUT.\n+\n+2013-07-27  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/57285\n+\t* check.c (dim_rank_check): Re-enable this check for CLASS arrays.\n+\n+2013-07-25  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/57966\n+\t* resolve.c (resolve_typebound_function): Make sure the declared type,\n+\tincluding its type-bound procedures, is resolved before resolving the\n+\tactual type-bound call.\n+\n+2013-07-25  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/57639\n+\t* interface.c (compare_parameter): Check for class_ok.\n+\t* simplify.c (gfc_simplify_same_type_as): Ditto.\n+\n+2013-07-23   Ond\u0159ej B\u00edlka  <neleai@seznam.cz>\n+\n+\t* decl.c: Fix comment typos.\n+\t* interface.c: Likewise.\n+\t* trans-array.c: Likewise.\n+\t* trans.c: Likewise.\n+\n+2013-07-22  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57906\n+\tPR fortran/52052\n+\t* class.c (gfc_build_class_symbol): Set coarray_comp.\n+\t* trans-array.c (structure_alloc_comps): For coarrays,\n+\tdirectly use the data pointer address.\n+\n+2013-07-22  Chang  <pchang9@cs.wisc.edu>\n+\n+\t* trans-decl.c (gfc_build_dummy_array_decl): Exit loop after\n+\tsetting PACKED_PARTIAL.\n+\n+2013-07-22  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans-array.c (gfc_array_allocate): Correct memory-leak patch.\n+\n+2013-07-22  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans-array.c (gfc_array_allocate,\n+\tgfc_trans_deferred_array): Plug memory leak.\n+\n+2013-07-21  Ond\u0159ej B\u00edlka  <neleai@seznam.cz>\n+\n+\t* trans-decl.c: Fix comment typos.\n+\t* trans-expr.c: Ditto.\n+\n+2013-07-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/56937\n+\t* dependency.c (gfc_dep_resolver):  Treat identical\n+\tarray subscripts as identical; don't unconditionally\n+\treturn a dependency if an array subscript is found.\n+\n+2013-07-21  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/35862\n+\t* libgfortran.h (GFC_FPE_DOWNWARD, GFC_FPE_TONEAREST,\n+\tGFC_FPE_TOWARDZERO, GFC_FPE_UPWARD): New defines.\n+\n+2013-07-21  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57894\n+\t* check.c (min_max_args): Add keyword= check.\n+\n+2013-07-17  Mikael Morin  <mikael@gcc.gnu.org>\n+\t    Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57895\n+\t* match.c (gfc_match_name): Ensure that the error\n+\tmessage regarding -fdollar-ok gets printed.\n+\t(gfc_match_common): Avoid multiple freeing.\n+\n+2013-07-16  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57912\n+\t* trans-expr.c (gfc_trans_scalar_assign): Correct if\n+\tcondition for caf realloc.\n+\n+2013-07-15  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans-array.h (gfc_deallocate_alloc_comp_no_caf,\n+\tgfc_reassign_alloc_comp_caf): New prototype.\n+\t* trans-array.c (enum): Add DEALLOCATE_ALLOC_COMP_NO_CAF\n+\tand COPY_ALLOC_COMP_CAF.\n+\t(structure_alloc_comps): Handle it.\n+\t(gfc_reassign_alloc_comp_caf,\n+\tgfc_deallocate_alloc_comp_no_caf): New function.\n+\t(gfc_alloc_allocatable_for_assignment): Call it.\n+\t* trans-expr.c (gfc_trans_scalar_assign,\n+\tgfc_trans_arrayfunc_assign, gfc_trans_assignment_1): Ditto.\n+\t* parse.c (parse_derived): Correctly set coarray_comp.\n+\t* resolve.c (resolve_symbol): Improve error wording.\n+\n+2013-07-15  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/37336\n+\t* trans.c (gfc_add_comp_finalizer_call): New function.\n+\t* trans.h (gfc_add_comp_finalizer_call): New prototype.\n+\t* trans-array.c (structure_alloc_comps): Call it.\n+\n+2013-07-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\t    Tobias Burnus  <burnus@gcc.gnu.org>\n+\n+\tPR fortran/52669\n+\t* trans-decl.c (gfc_finish_var_decl):  Move setting of\n+\tPRIVATE for a module variable if the module has a private\n+\tdefault or -fmodule-private is given to...\n+\t(gfc_create_module_variable): here. Optionally\n+\twarn about private module variable which is not used.\n+\n+2013-07-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57834\n+\t* check.c (is_c_interoperable): Add special case for c_f_pointer.\n+\t(explicit-size, gfc_check_c_f_pointer, gfc_check_c_loc): Update\n+\tcall.\n+\n+2013-07-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/50554\n+\t* io.c (match_inquire_element): Add missing do-var check.\n+\n+2013-07-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57785\n+\t* simplify.c (compute_dot_product): Complex conjugate for\n+\tdot_product.\n+\t(gfc_simplify_dot_product, gfc_simplify_matmul): Update call.\n+\n+2013-07-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57469\n+\t* trans-decl.c (generate_local_decl): Don't warn that\n+\ta dummy is unused, when it is in a namelist.\n+\n+2013-07-01  Dominique d'Humieres  <dominiq@lps.ens.fr>\n+\n+\tPR fortran/54788\n+\t* array.c (spec_size): handle the case as==NULL.\n+\n+2013-06-26  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/29800\n+\t* trans-array.c (gfc_conv_array_ref): Improve out-of-bounds\n+\tdiagnostic message.\n+\t* trans-array.c (gfc_conv_array_ref): Update prototype.\n+\t* trans-expr.c (gfc_conv_variable): Update call.\n+\n+2013-06-24  Steven G. Kargl  <sgk@troutmask.apl.washington.edu>\n+\t    Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\t    Dominique d'Humieres  <dominiq@lps.ens.fr>\n+\n+\tPR fortran/52413\n+\t* simplify.c (gfc_simplify_fraction): Fix the sign of negative values.\n+\n+2013-06-21  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/37336\n+\t* trans-array.c (gfc_trans_deferred_array): Call the\n+\tfinalizer for nonallocatable local variables.\n+\t* trans-decl.c (gfc_get_symbol_decl): Add local\n+\tfinalizable vars to the deferred list.\n+\t(gfc_trans_deferred_vars): Call gfc_trans_deferred_array\n+\tfor those.\n+\n+2013-06-21  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans-array.c (gfc_alloc_allocatable_for_assignment): Allocate\n+\tat least one byte.\n+\t* trans-expr.c (alloc_scalar_allocatable_for_assignment): Ditto.\n+\n+2013-06-20  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* resolve.c (get_temp_from_expr): Don't set FL_VARIABLE twice.\n+\n+2013-06-17  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.h (gfc_option_t): Add fpe_summary.\n+\t* gfortran.texi (_gfortran_set_options): Update.\n+\t* invoke.texi (-ffpe-summary): Add doc.\n+\t* lang.opt (ffpe-summary): Add flag.\n+\t* options.c (gfc_init_options, gfc_handle_option): Handle it.\n+\t(gfc_handle_fpe_option): Renamed from gfc_handle_fpe_trap_option,\n+\talso handle fpe_summary.\n+\t* trans-decl.c (create_main_function): Update\n+\t_gfortran_set_options call.\n+\n+2013-06-15  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/49074\n+\tPR fortran/56136\n+\t* dependency.c (gfc_check_argument_var_dependency): Return 0 in the\n+\tarray constructor case.\n+\n+2013-06-14  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57508\n+\t* resolve.c (get_temp_from_expr): Don't copy function\n+\tresult attributes to temporary.\n+\n+2013-06-14  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57596\n+\t* trans-decl.c (gfc_trans_deferred_vars): Honor OPTIONAL\n+\tfor nullify and deferred-strings' length variable.\n+\n+2013-06-13  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/49074\n+\t* trans-expr.c (gfc_conv_variable): Don't walk the reference chain.\n+\tHandle NULL array references.\n+\t(gfc_conv_procedure_call): Remove code handling NULL array references.\n+\n+2013-06-11  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57535\n+\t* trans-array.c (build_class_array_ref): Fix ICE for\n+\tfunction result variables.\n+\n+2013-06-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/37336\n+\t* trans-decl.c (init_intent_out_dt): Call finalizer\n+\twhen appropriate.\n+\n+2013-06-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57553\n+\t* simplify.c (gfc_simplify_storage_size): Handle literal\n+\tstrings.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_storage_size):\n+\tAdd missing fold_convert.\n+\n+2013-06-07  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57549\n+\t* array.c (gfc_match_array_constructor): Call\n+\tgfc_match_type_spec instead of gfc_match_decl_type_spec.\n+\t* match.c (gfc_match_type_spec): Renamed from match_type_spec.\n+\t(gfc_match_type_is, gfc_match_allocate): Update call.\n+\t* match.h (gfc_match_type_spec): Add prototype.\n+\n+2013-06-07  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57556\n+\t* trans.c (gfc_build_final_call): Init block before use.\n+\n+2013-06-06  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57542\n+\t* trans.c (gfc_build_final_call): Add se.pre to the block\n+\tand modify the assert.\n+\n+2013-06-04  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/37336\n+\t* trans.h (gfc_build_final_call): Remove prototype.\n+\t(gfc_add_finalizer_call): Add prototype.\n+\t* trans-array.c (gfc_trans_dealloc_allocated): Support finalization.\n+\t(structure_alloc_comps): Update caller.\n+\t(gfc_trans_deferred_array): Call finalizer.\n+\t* trans-array.h (gfc_trans_dealloc_allocated): Update prototype.\n+\t* trans-decl.c (gfc_trans_deferred_vars): Don't deallocate/finalize\n+\tvariables of the main program.\n+\t* trans-expr.c (gfc_conv_procedure_call): Support finalization.\n+\t* trans-openmp.c (gfc_omp_clause_dtor,\n+\tgfc_trans_omp_array_reduction): Update calls.\n+\t* trans-stmt.c (gfc_trans_deallocate): Avoid double deallocation\n+\tof alloc components.\n+\t* trans.c (gfc_add_finalizer_call): New function.\n+\t(gfc_deallocate_with_status,\n+\tgfc_deallocate_scalar_with_status): Call it\n+\t(gfc_build_final_call): Fix handling of scalar coarrays,\n+\tmove up in the file and make static.\n+\n+2013-06-01  Janus Weil  <janus@gcc.gnu.org>\n+\t    Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* error.c (get_terminal_width): Only limit the width if we're\n+\toutputting to a terminal. Try to determine width via ioctl.\n+\n+2013-06-01  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* decl.c (add_global_entry): Take locus.\n+\t(gfc_match_entry): Update call.\n+\t(gfc_match_end): Better error location.\n+\t* parse.c (parse_block_data, parse_module, add_global_procedure,\n+\tadd_global_program): Use better locus data.\n+\n+2013-05-31  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57456\n+\t* trans-array.c (gfc_array_init_size): Use passed type spec,\n+\twhen available.\n+\t(gfc_array_allocate): Pass typespec on.\n+\t* trans-array.h (gfc_array_allocate): Update prototype.\n+\t* trans-stmt.c (gfc_trans_allocate): Pass typespec on.\n+\n+2013-05-31  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/54190\n+\tPR fortran/57217\n+\t* gfortran.h (gfc_terminal_width): Remove prototype.\n+\t* error.c (get_terminal_width): Moved here from misc.c. Renamed.\n+\tTry to determine terminal width from environment variable.\n+\t* interface.c (compare_type, compare_rank): New functions. Fix assumed\n+\ttype/rank handling.\n+\t(compare_type_rank, check_dummy_characteristics,\n+\tcheck_result_characteristics, gfc_compare_interfaces): Use them.\n+\t(symbol_rank): Slightly modified and moved.\n+\t* misc.c (gfc_terminal_width): Moved to error.c.\n+\n+2013-05-30  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/54189\n+\t* resolve.c (check_assumed_size_reference): Check for e->ref.\n+\n+2013-05-30  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57458\n+\t* interface.c (compare_parameter): Update C1239/C1240 constraint\n+\tcheck for assumed-rank/TS29113.\n+\n+2013-05-29  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/37336\n+\t* class.c (finalize_component): Fix coarray array refs.\n+\t(generate_finalization_wrapper): Only gfc_convert_type_warn\n+\twhen the kind value is different.\n+\t(gfc_find_intrinsic_vtab): _copy's dst is now intent(inout).\n+\t(gfc_find_derived_vtab): Ditto. Enable finalization-wrapper\n+\tgeneration.\n+\t* module.c (MOD_VERSION): Bump.\n+\t(gfc_dump_module, gfc_use_module): Remove empty line in .mod.\n+\t* trans-array.c (gfc_conv_descriptor_token): Accept nonrestricted\n+\tvoid pointer.\n+\t(gfc_array_allocate, structure_alloc_comps): Don't nullify for\n+\tBT_CLASS allocations.\n+\t* trans-stmt.c (gfc_trans_allocate): Ditto.\n+\n+2013-05-29  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/37336\n+\t* resolve.c (gfc_resolve_finalizers): Remove not implemented error.\n+\n+2013-05-28  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans-expr.c (gfc_conv_procedure_call): Deallocate\n+\tpolymorphic arrays for allocatable intent(out) dummies.\n+\t(gfc_reset_vptr): New function, moved from trans-stmt.c\n+\tand extended.\n+\t* trans-stmt.c (reset_vptr): Remove.\n+\t(gfc_trans_deallocate): Update calls.\n+\t* trans.h (gfc_reset_vptr): New prototype.\n+\n+2013-05-28  Dominique d'Humieres  <dominiq@lps.ens.fr>\n+\n+\tPR fortran/57435\n+\t* module.c (check_for_ambiguous): Avoid null pointer deref.\n+\n+2013-05-28  Janus Weil  <janus@gcc.gnu.org>\n+\t    Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57217\n+\t* interface.c (check_dummy_characteristics): Symmetrize type check.\n+\n+2013-05-27  Bud Davis  <jmdavis@link.com>\n+\n+\tPR fortran/50405\n+\t* resolve.c (resolve_formal_arglist): Detect error when an argument\n+\thas the same name as the function.\n+\n+2013-05-27  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* expr.c (gfc_build_intrinsic_call): Make symbol as attr.artificial.\n+\t* intrinsic.c (gfc_is_intrinsic): Disable std check for those.\n+\n+2013-05-22  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* resolve.c (get_temp_from_expr): Change mangling to\n+\tstart always with a _.\n+\n+2013-05-22  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* resolve.c (get_temp_from_expr): Fix temp var mangling.\n+\n+2013-05-22  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57364\n+\t* resolve.c (get_temp_from_expr): Commit created sym.\n+\n+2013-05-22  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57338\n+\t* intrinsic.c (do_check): Move some checks to ...\n+\t(do_ts29113_check): ... this new function.\n+\t(check_specific, gfc_intrinsic_sub_interface): Call it.\n+\n+2013-05-22  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* intrinsic.texi (RANDOM_SEED): Improve example.\n+\n+2013-05-21  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57035\n+\t* intrinsic.c (do_check): Add constraint check for\n+\tNO_ARG_CHECK, assumed rank and assumed type.\n+\t* gfortran.texi (NO_ARG_CHECK): Minor wording change,\n+\tallow PRESENT intrinsic.\n+\n+2013-05-20  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/48858\n+\tPR fortran/55465\n+\t* decl.c (add_global_entry): Add sym_name.\n+\t* parse.c (add_global_procedure): Ditto.\n+\t* resolve.c (resolve_bind_c_derived_types): Handle multiple decl for\n+\ta procedure.\n+\t(resolve_global_procedure): Handle gsym->ns pointing to a module.\n+\t* trans-decl.c (gfc_get_extern_function_decl): Ditto.\n+\n+2013-05-20  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/48858\n+\t* decl.c (add_global_entry): Use nonbinding name\n+\tonly for F2003 or if no binding label exists.\n+\t(gfc_match_entry): Update calls.\n+\t* parse.c (gfc_global_used): Improve error message.\n+\t(add_global_procedure): Use nonbinding name\n+\tonly for F2003 or if no binding label exists.\n+\t(gfc_parse_file): Update call.\n+\t* resolve.c (resolve_global_procedure): Use binding\n+\tname when available.\n+\t* trans-decl.c (gfc_get_extern_function_decl): Ditto.\n+\n+2013-05-20  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/48858\n+\t* decl.c (gfc_match_bind_c_stmt): Add gfc_notify_std.\n+\t* match.c (gfc_match_common): Don't add commons to gsym.\n+\t* resolve.c (resolve_common_blocks): Add to gsym and\n+\tadd checks.\n+\t(resolve_bind_c_comms): Remove.\n+\t(resolve_types): Remove call to the latter.\n+\t* trans-common.c (gfc_common_ns): Remove static var.\n+\t(gfc_map_of_all_commons): Add static var.\n+\t(build_common_decl): Correctly handle binding label.\n+\n+2013-05-16  Jason Merrill  <jason@redhat.com>\n+\n+\t* Make-lang.in (f951$(exeext)): Use link mutex.\n+\n+2013-05-05  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* resolve.c (conformable_arrays): Avoid segfault\n+\twhen ar.start[i] == NULL.\n+\n+2013-05-05  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57141\n+\t* decl.c (gfc_match_null): Permit use-associated\n+\tNULL intrinsic.\n+\n+2013-05-04  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* decl.c (gfc_verify_c_interop_param): Permit allocatable\n+\tand pointer with -std=f2008ts.\n+\n+2013-05-02  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57142\n+\t* simplify.c (gfc_simplify_size): Renamed from\n+\tsimplify_size; fix kind=8 handling.\n+\t(gfc_simplify_size): New function.\n+\t(gfc_simplify_shape): Add range check.\n+\t* resolve.c (resolve_function): Fix handling\n+\tfor ISYM_SIZE.\n+\n+2013-05-01  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* frontend-passes.c (optimize_power):  Fix typo\n+\tin comment.\n+\n+2013-04-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/57071\n+\t* frontend-passes.c (optimize_power):  Simplify\n+\t1**k to 1.\n+\n+2013-04-28  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57114\n+\t* intrinsic.texi (RANK): Correct syntax description and\n+\texpected result.\n+\n+2013-04-28  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57093\n+\t* trans-types.c (gfc_get_element_type): Fix handling\n+\tof scalar coarrays of type character.\n+\t* intrinsic.texi (PACK): Add missing \")\".\n+\n+2013-04-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/57071\n+\t* frontend-passes (optimize_power):  New function.\n+\t(optimize_op):  Use it.\n+\n+2013-04-25  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR bootstrap/57028\n+\t* Make-lang.in (f951): Link in ZLIB.\n+\t(CFLAGS-fortran/module.o): Add zlib include directory.\n+\n+2013-04-22  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/53685\n+\tPR fortran/57022\n+\t* check.c (gfc_calculate_transfer_sizes): Fix for array-valued SOURCE\n+\texpressions.\n+\t* simplify.c (gfc_simplify_sizeof,gfc_simplify_storage_size): Get rid\n+\tof special treatment for EXPR_ARRAY.\n+\t* target-memory.h (gfc_element_size): New prototype.\n+\t* target-memory.c (size_array): Remove.\n+\t(gfc_element_size): New function.\n+\t(gfc_target_expr_size): Modified to always return the full size of the\n+\texpression.\n+\n+2013-04-20  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/56907\n+\t* trans-intrinsic.c (conv_isocbinding_function): Don't pack array\n+\tpassed to C_LOC\n+\n+2013-04-19  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\t    Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/56872\n+\t* frontend-passes.c (copy_walk_reduction_arg): Change argument type\n+\tto gfc_constructor.  If it has an iterator, wrap the copy of its\n+\texpression in an array constructor with that iterator.  Don't special\n+\tcase function expressions.\n+\t(callback_reduction): Update caller.  Don't return early if there is\n+\tan iterator.\n+\n+2013-04-18  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* expr.c (find_array_element): Don't copy expr.\n+\t* data.c (create_character_initializer): Free expr.\n+\t* frontend-passes.c (combine_array_constructor): Ditto.\n+\t* match.c (match_typebound_call, gfc_match_select_type): Ditto.\n+\t* resolve.c (resolve_typebound_function): Free gfc_ref.\n+\n+2013-04-18  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/56994\n+\t* invoke.texi (NEAREST): S argument is not optional.\n+\n+2013-04-17  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/56814\n+\t* interface.c (check_result_characteristics): Get result from interface\n+\tif present.\n+\n+2013-04-17  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR fortran/40958\n+\t* scanner.h: New file.\n+\t* Make-lang.in: Dependencies on scanner.h.\n+\t* scanner.c (gfc_directorylist): Move to scanner.h.\n+\t* module.c: Don't include md5.h, include scanner.h and zlib.h.\n+\t(MOD_VERSION): Add comment about backwards compatibility.\n+\t(module_fp): Change type to gzFile.\n+\t(ctx): Remove.\n+\t(gzopen_included_file_1): New function.\n+\t(gzopen_included_file): New function.\n+\t(gzopen_intrinsic_module): New function.\n+\t(write_char): Use gzputc.\n+\t(read_crc32_from_module_file): New function.\n+\t(read_md5_from_module_file): Remove.\n+\t(gfc_dump_module): Use gz* functions instead of stdio, check gzip\n+\tcrc32 instead of md5.\n+\t(read_module_to_tmpbuf): Use gz* functions instead of stdio.\n+\t(gfc_use_module): Use gz* functions.\n+\n+2013-04-16  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/39505\n+\t* decl.c (ext_attr_list): Add EXT_ATTR_NO_ARG_CHECK.\n+\t* gfortran.h (ext_attr_id_t): Ditto.\n+\t* gfortran.texi (GNU Fortran Compiler Directives):\n+\tDocument it.\n+\t* interface.c (compare_type_rank): Ignore rank for NO_ARG_CHECK.\n+\t(compare_parameter): Ditto - and regard as unlimited polymorphic.\n+\t* resolve.c (resolve_symbol, resolve_variable): Add same constraint\n+\tchecks as for TYPE(*); turn dummy to TYPE(*),dimension(*).\n+\t(gfc_explicit_interface_required): Require explicit interface\n+\tfor NO_ARG_CHECK.\n+\n+2013-04-16  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/56968\n+\t* expr.c (gfc_check_pointer_assign): Handle generic functions returning\n+\tprocedure pointers.\n+\n+2013-04-16  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/56969\n+\t* intrinsic.c (gfc_intrinsic_func_interface): Don't set\n+\tmodule name to \"(intrinsic)\" for intrinsics from intrinsic\n+\tmodules.\n+\n+2013-04-15  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* intrinsic.texi (SYSTEM_CLOCK): Recommend kind=8.\n+\n+2013-04-15  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR fortran/56919\n+\t* intrinsics.texi (SYSTEM_CLOCK): Update documentation.\n+\n+2013-04-15  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* class.c (gfc_find_intrinsic_vtab): Removed unused var.\n+\t* dependency.c (check_data_pointer_types): Fix check.\n+\t* frontend-passes.c (check_data_pointer_types): Remove\n+\tsuperfluous statement.\n+\t* parse.c (decode_omp_directive): Add missing break.\n+\t* resolve.c (resolve_typebound_subroutine: Free variable.\n+\t* trans-decl.c (create_function_arglist): Correct condition.\n+\n+2013-04-14  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/56816\n+\t* match.c (gfc_match_select_type): Add syntax error. Move namespace\n+\tallocation and cleanup...\n+\t* parse.c (decode_statement): ... here.\n+\n+2013-04-13  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/55959\n+\t* expr.c (gfc_simplify_expr): Branch is not unreachable.\n+\n+2013-04-12  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/56266\n+\t* primary.c (gfc_match_varspec): Turn gcc_assert into MATCH_ERROR.\n+\n+2013-04-12  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/56929\n+\t* trans-array.c (duplicate_allocatable): Fix handling\n+\tof scalar coarrays.\n+\n+2013-04-12  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/56261\n+\t* gfortran.h (gfc_explicit_interface_required): New prototype.\n+\t* expr.c (gfc_check_pointer_assign): Check if an explicit interface is\n+\trequired in a proc-ptr assignment.\n+\t* interface.c (check_result_characteristics): Extra check.\n+\t* resolve.c (gfc_explicit_interface_required): New function.\n+\t(resolve_global_procedure): Use new function\n+\t'gfc_explicit_interface_required'. Do a full interface check.\n+\n+2013-04-12  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/56845\n+\t* trans-decl.c (gfc_trans_deferred_vars): Restrict\n+\tstatic CLASS init to SAVE and -fno-automatic.\n+\n+2013-04-12  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/56845\n+\t* trans-decl.c (gfc_trans_deferred_vars): Set _vptr for\n+\tallocatable static BT_CLASS.\n+\t* trans-expr.c (gfc_class_set_static_fields): New function.\n+\t* trans.h (gfc_class_set_static_fields): New prototype.\n+\n+2013-04-11  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* gfortran.h: Remove enum gfc_try, replace gfc_try with bool type.\n+\t* arith.c: Replace gfc_try with bool type.\n+\t* array.c: Likewise.\n+\t* check.c: Likewise.\n+\t* class.c: Likewise.\n+\t* cpp.c: Likewise.\n+\t* cpp.h: Likewise.\n+\t* data.c: Likewise.\n+\t* data.h: Likewise.\n+\t* decl.c: Likewise.\n+\t* error.c: Likewise.\n+\t* expr.c: Likewise.\n+\t* f95-lang.c: Likewise.\n+\t* interface.c: Likewise.\n+\t* intrinsic.c: Likewise.\n+\t* intrinsic.h: Likewise.\n+\t* io.c: Likewise.\n+\t* match.c: Likewise.\n+\t* match.h: Likewise.\n+\t* module.c: Likewise.\n+\t* openmp.c: Likewise.\n+\t* parse.c: Likewise.\n+\t* parse.h: Likewise.\n+\t* primary.c: Likewise.\n+\t* resolve.c: Likewise.\n+\t* scanner.c: Likewise.\n+\t* simplify.c: Likewise.\n+\t* symbol.c: Likewise.\n+\t* trans-intrinsic.c: Likewise.\n+\t* trans-openmp.c: Likewise.\n+\t* trans-stmt.c: Likewise.\n+\t* trans-types.c: Likewise.\n+\n+2013-04-09  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.texi (KIND Type Parameters,\n+\tInternal representation of LOGICAL variables): Add crossrefs.\n+\t(Intrinsic Types): Mention issues with _Bool interop.\n+\t(Naming and argument-passing conventions): New section.\n+\n+2013-04-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/56782\n+\t* frontend-passes.c (callback_reduction):  Don't do\n+\tany simplification if there is only a single element\n+\twhich has an iterator.\n+\n+2013-04-07  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/56849\n+\t* iresolve.c (gfc_resolve_reshape): Set shape also\n+\twith order=.\n+\n+2013-04-04  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/40881\n+\t* match.c (gfc_match_return): Remove standard notification.\n+\t* primary.c (gfc_match_actual_arglist): Add standard notification.\n+\n+2013-04-04  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/50269\n+\t* gcc/fortran/check.c (is_c_interoperable,\n+\tgfc_check_c_loc): Correct c_loc array checking\n+\tfor Fortran 2003 and Fortran 2008.\n+\n+2013-04-03  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/56284\n+\tPR fortran/40881\n+\t* decl.c (gfc_match_formal_arglist): Warn about alternate-return\n+\targuments.\n+\t* interface.c (check_dummy_characteristics): Return if symbols are NULL.\n+\n+2013-04-01  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/56500\n+\t* symbol.c (gfc_set_default_type): Build class container for\n+\tIMPLICIT CLASS.\n+\n+2013-03-31  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* class.c (finalization_scalarizer, finalizer_insert_packed_call,\n+\tgenerate_finalization_wrapper): Avoid segfault with absent SIZE=\n+\targument to TRANSFER and use correct result kind for SIZE.\n+\t* intrinsic.c (gfc_isym_id_by_intmod): Also handle ids of\n+\tnonmodules.\n+\t* trans.c (gfc_build_final_call): Handle coarrays.\n+\n+2013-03-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* trans-expr.c (build_memcmp_call):  New function.\n+\t(gfc_build_compare_string):  If the strings\n+\tcompared have constant and equal lengths and\n+\tthe strings are kind=1, or, for kind=4 strings,\n+\tthe test is for (in)equality, use memcmp().\n+\n+2013-03-29  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/35203\n+\t* trans-decl.c (create_function_arglist): Pass hidden argument\n+\tfor passed-by-value optional+value dummies.\n+\t* trans-expr.c (gfc_conv_expr_present,\n+\tgfc_conv_procedure_call): Handle those.\n+\n+2013-03-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/45159\n+\t* gfortran.h (gfc_dep_difference):  Add prototype.\n+\t* dependency.c (discard_nops):  New function.\n+\t(gfc_dep_difference):  New function.\n+\t(check_section_vs_section):  Use gfc_dep_difference\n+\tto calculate the difference of starting indices.\n+\t* trans-expr.c (gfc_conv_substring):  Use\n+\tgfc_dep_difference to calculate the length of\n+\tsubstrings where possible.\n+\n+2013-03-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/55806\n+\t* frontend-passes.c (optimize_code):  Keep track of\n+\tcurrent code to make code insertion possible.\n+\t(combine_array_constructor):  New function.\n+\t(optimize_op):  Call it.\n+\n+2013-03-27  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/56650\n+\tPR fortran/36437\n+\t* check.c (gfc_check_sizeof, gfc_check_c_sizeof,\n+\tgfc_check_storage_size): Update checks.\n+\t* intrinsic.texi (SIZEOF): Correct class.\n+\t* intrinsic.h (gfc_simplify_sizeof,\n+\tgfc_simplify_storage_size): New prototypes.\n+\t* intrinsic.c (add_functions): Use them.\n+\t* simplify.c (gfc_simplify_sizeof,\n+\tgfc_simplify_storage_size): New functions.\n+\n+2013-03-27  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR fortran/25708\n+\t* module.c (module_locus): Use long for position.\n+\t(module_content): New variable.\n+\t(module_pos): Likewise.\n+\t(prev_character): Remove.\n+\t(bad_module): Free data instead of closing mod file.\n+\t(set_module_locus): Use module_pos.\n+\t(get_module_locus): Likewise.\n+\t(module_char): use buffer rather than stdio file.\n+\t(module_unget_char): Likewise.\n+\t(read_module_to_tmpbuf): New function.\n+\t(gfc_use_module): Call read_module_to_tmpbuf.\n+\n+2013-03-26  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/56649\n+\t* simplify.c (gfc_simplify_merge): Simplify more.\n+\n+2013-03-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/38536\n+\tPR fortran/38813\n+\tPR fortran/38894\n+\tPR fortran/39288\n+\tPR fortran/40963\n+\tPR fortran/45824\n+\tPR fortran/47023\n+\tPR fortran/47034\n+\tPR fortran/49023\n+\tPR fortran/50269\n+\tPR fortran/50612\n+\tPR fortran/52426\n+\tPR fortran/54263\n+\tPR fortran/55343\n+\tPR fortran/55444\n+\tPR fortran/55574\n+\tPR fortran/56079\n+\tPR fortran/56378\n+\t* check.c (gfc_var_strlen): Properly handle 0-sized string.\n+\t(gfc_check_c_sizeof): Use is_c_interoperable, add checks.\n+\t(is_c_interoperable, gfc_check_c_associated, gfc_check_c_f_pointer,\n+\tgfc_check_c_f_procpointer, gfc_check_c_funloc, gfc_check_c_loc): New\n+\tfunctions.\n+\t* expr.c (check_inquiry): Add c_sizeof, compiler_version and\n+\tcompiler_options.\n+\t(gfc_check_pointer_assign): Refine function result check.\n+\tgfortran.h (gfc_isym_id): Add GFC_ISYM_C_ASSOCIATED,\n+\tGFC_ISYM_C_F_POINTER, GFC_ISYM_C_F_PROCPOINTER, GFC_ISYM_C_FUNLOC,\n+\tGFC_ISYM_C_LOC.\n+\t(iso_fortran_env_symbol, iso_c_binding_symbol): Handle\n+\tNAMED_SUBROUTINE.\n+\t(generate_isocbinding_symbol): Update prototype.\n+\t(get_iso_c_sym): Remove.\n+\t(gfc_isym_id_by_intmod, gfc_isym_id_by_intmod_sym): New prototypes.\n+\t* intrinsic.c (gfc_intrinsic_subroutine_by_id): New function.\n+\t(gfc_intrinsic_sub_interface): Use it.\n+\t(add_functions, add_subroutines): Add missing C-binding intrinsics.\n+\t(gfc_intrinsic_func_interface): Add special case for c_loc.\n+\tgfc_isym_id_by_intmod, gfc_isym_id_by_intmod_sym): New functions.\n+\t(gfc_intrinsic_func_interface, gfc_intrinsic_sub_interface): Use them.\n+\t* intrinsic.h (gfc_check_c_associated, gfc_check_c_f_pointer,\n+\tgfc_check_c_f_procpointer, gfc_check_c_funloc, gfc_check_c_loc,\n+\tgfc_resolve_c_loc, gfc_resolve_c_funloc): New prototypes.\n+\t* iresolve.c (gfc_resolve_c_loc, gfc_resolve_c_funloc): New\n+\tfunctions.\n+\t* iso-c-binding.def: Split PROCEDURE into NAMED_SUBROUTINE and\n+\tNAMED_FUNCTION.\n+\t* iso-fortran-env.def: Add NAMED_SUBROUTINE for completeness.\n+\t* module.c (create_intrinsic_function): Support subroutines and\n+\tderived-type results.\n+\t(use_iso_fortran_env_module): Update calls.\n+\t(import_iso_c_binding_module): Ditto; update calls to\n+\tgenerate_isocbinding_symbol.\n+\t* resolve.c (find_arglists): Skip for intrinsic symbols.\n+\t(gfc_resolve_intrinsic): Find intrinsic subs via id.\n+\t(is_scalar_expr_ptr, gfc_iso_c_func_interface,\n+\tset_name_and_label, gfc_iso_c_sub_interface): Remove.\n+\t(resolve_function, resolve_specific_s0): Remove calls to those.\n+\t(resolve_structure_cons): Fix handling.\n+\t* symbol.c (gen_special_c_interop_ptr): Update c_ptr/c_funptr\n+\tgeneration.\n+\t(gen_cptr_param, gen_fptr_param, gen_shape_param,\n+\tbuild_formal_args, get_iso_c_sym): Remove.\n+\t(std_for_isocbinding_symbol): Handle NAMED_SUBROUTINE.\n+\t(generate_isocbinding_symbol): Support hidden symbols and\n+\tusing c_ptr/c_funptr symtrees for nullptr defs.\n+\t* target-memory.c (gfc_target_encode_expr): Fix handling\n+\tof c_ptr/c_funptr.\n+\t* trans-expr.c (conv_isocbinding_procedure): Remove.\n+\t(gfc_conv_procedure_call): Remove call to it.\n+\t(gfc_trans_subcomponent_assign, gfc_conv_expr): Update handling\n+\tof c_ptr/c_funptr.\n+\t* trans-intrinsic.c (conv_isocbinding_function,\n+\tconv_isocbinding_subroutine): New.\n+\t(gfc_conv_intrinsic_function, gfc_conv_intrinsic_subroutine):\n+\tCall them.\n+\t* trans-io.c (transfer_expr): Fix handling of c_ptr/c_funptr.\n+\t* trans-types.c (gfc_typenode_for_spec,\n+\tgfc_get_derived_type): Ditto.\n+\t(gfc_init_c_interop_kinds): Handle NAMED_SUBROUTINE.\n+\n+2013-03-18  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.h (gfc_option_t): Remove flag_whole_file.\n+\t* invoke.texi (-fno-whole-file): Remove.\n+\t* lang.opt (fwhole-file): Change to Ignore.\n+\t* options.c (gfc_init_options, gfc_post_options,\n+\tgfc_handle_option): Remove !flag_whole_file handling\n+\t* parse.c (resolve_all_program_units, translate_all_program_units,\n+\tgfc_parse_file): Ditto.\n+\t* resolve.c (resolve_global_procedure): Ditto.\n+\t* trans-decl.c (gfc_get_symbol_decl, gfc_get_extern_function_decl,\n+\tgfc_create_module_variable): Ditto.\n+\t* trans-types.c (gfc_get_derived_type): Ditto.\n+\n+2013-03-15  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/56615\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_transfer): Pack arrays\n+\tif they are not simply contiguous.\n+\n+2013-03-11  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.texi (STRUCTURE and RECORD): State more clearly how\n+\tto convert them into derived types.\n+\n+2013-03-10  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/56575\n+\t* expr.c (gfc_default_initializer): Check that a class declared\n+\ttype has any components.\n+\t* resolve.c (resolve_fl_derived0): On failing the test for C437\n+\tset the type to BT_UNKNOWN to prevent repeat error messages.\n+\n+2013-03-03  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/56477\n+\t* expr.c (gfc_check_pointer_assign): Avoid NULL pointer dereference.\n+\n+2013-03-03  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/54730\n+\t* array.c (gfc_match_array_constructor): Set a checkpoint before\n+\tmatching a typespec.  Drop it on success, restore it otherwise.\n+\n+2013-03-03  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/54730\n+\t* gfortran.h (struct gfc_undo_change_set): New field 'previous'.\n+\t(gfc_new_undo_checkpoint, gfc_drop_last_undo_checkpoint,\n+\tgfc_restore_last_undo_checkpoint): New prototypes.\n+\t* symbol.c (default_undo_chgset_var): Update initialization.\n+\t(single_undo_checkpoint_p, gfc_new_undo_checkpoint,\n+\tfree_undo_change_set_data, pop_undo_change_set,\n+\tgfc_drop_last_undo_checkpoint, enforce_single_undo_checkpoint):\n+\tNew functions.\n+\t(save_symbol_data): Handle multiple change sets.  Make sure old_symbol\n+\tfield's previous value is not overwritten.  Clear gfc_new field.\n+\t(restore_old_symbol): Restore previous old_symbol field.\n+\t(gfc_restore_last_undo_checkpoint): New function, using body renamed\n+\tfrom gfc_undo_symbols.  Restore the previous change set as current one.\n+\t(gfc_undo_symbols): New body.\n+\t(gfc_commit_symbols, gfc_commit_symbol, gfc_enforce_clean_symbol_state):\n+\tCall enforce_single_undo_checkpoint.\n+\t(gfc_symbol_done_2): Ditto.  Free change set data.\n+\n+2013-03-03  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* symbol.c (restore_old_symbol): Fix thinko.\n+\n+2013-03-03  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* symbol.c (gfc_undo_symbols): Move code...\n+\t(restore_old_symbol): ... here as a new function.\n+\n+2013-03-03  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* Make-lang.in (F95_PARSER_OBJS): Add dependency to vec.h.\n+\t* gfortran.h: Include vec.h.\n+\t(gfc_undo_change_set): New struct.\n+\t* symbol.c (tentative_tbp): Remove struct.\n+\t(changed_syms, tentative_tbp_list): Remove variables.\n+\t(default_undo_chgset_var, latest_undo_chgset): New variables.\n+\t(save_symbol_data, gfc_get_sym_tree, gfc_undo_symbols,\n+\tgfc_commit_symbols, gfc_commit_symbol,\n+\tgfc_enforce_clean_symbol_state, gfc_get_typebound_proc):\n+\tUse latest_undo_chgset instead of changed_syms and tentative_tbp_list.\n+\n+2013-03-01  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/56491\n+\t* iresolve.c (resolve_bound): Use gfc_get_string instead of xstrdup.\n+\t* symbol.c (free_components): Free proc-pointer components.\n+\n+2013-03-01  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans-decl.c (gfc_trans_deferred_vars): Free expr after use.\n+\t* trans-io.c (build_dt): Ditto.\n+\n+2013-02-24  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* resolve.c (generate_component_assignments): Don't use UTF-8\n+\tligature in diagnostic.\n+\n+2013-02-21  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/56385\n+\t* trans-array.c (structure_alloc_comps): Handle procedure-pointer\n+\tcomponents with allocatable result.\n+\n+2013-02-21  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/56416\n+\t* gfortran.texi (Part II: Language Reference, Extensions,\n+\tNon-Fortran Main Program): Sort @menu to match actual section order.\n+\t* intrinsic.texi (Intrinsic Procedures): Ditto.\n+\t(C_F_POINTER, PRECISION): Move to the alphabetically correct place.\n+\n+2013-02-15  Tobias Burnus  <burnus@net-b.de>\n+\t    Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/56318\n+\t* simplify.c (gfc_simplify_matmul): Fix result shape\n+\tand matmul result.\n+\n+2013-02-15  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/53818\n+\t* resolve.c (apply_default_init_local): Don't create an\n+\tinitializer for a result variable.\n+\n+2013-02-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/56224\n+\t* gfortran.h (gfc_add_include_path):  Add boolean argument\n+\tfor warn.\n+\t* scanner.c (gfc_add_include_path):  Pass along warn argument\n+\tto add_path_to_list.\n+\t* options.c (gfc_post_options):  Add true warn argument to\n+\tgfc_add_include_path.\n+\t(gfc_handle_module_path_options):  Likewise.\n+\t(gfc_handle_option): Also gfc_add_include_path for intrinsic\n+\tmodules, without warning.\n+\n+2013-02-14  Paul Thomas  <pault@gcc.gnu.org>\n+\t    Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR testsuite/56138\n+\t* trans-decl.c (gfc_get_symbol_decl): Fix deferred-length\n+\tresults for functions without extra result variable.\n+\n+\tRevert:\n+\t2013-01-30  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/56138\n+\t* trans-decl.c (gfc_trans_deferred_vars): Fix deferred-length\n+\tresults for functions without extra result variable.\n+\n+2013-02-12  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/46952\n+\t* resolve.c (resolve_call): Do not check deferred procedures for\n+\trecursiveness.\n+\n+2013-02-09  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/55362\n+\t* check.c (array_check): It is an error if a procedure is\n+\tpassed.\n+\n+2013-02-08  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/54107\n+\t* trans-types.c (gfc_get_function_type): Change a NULL backend_decl\n+\tto error_mark_node on entry.  Detect recursive types.  Build a variadic\n+\tprocedure type if the type is recursive.  Restore the initial\n+\tbackend_decl.\n+\n+2013-02-07  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/54339\n+\t* gfortran.texi (Standards): Mention TS29113.\n+\t(Varying Length Character): Mention deferred-length\n+\tstrings.\n+\t(Fortran 2003 Status): Add unlimited polymorphic.\n+\t(TS 29113 Status): Add TYPE(*) and DIMENSION(..).\n+\t(C Interop): Update the section about TS29113.\n+\n+2013-02-06  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/55789\n+\t* trans-array.c (trans_array_constructor): Remove condition\n+\t'dynamic' = true if the loop ubound is a VAR_DECL.\n+\n+2013-02-04  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/56008\n+\tPR fortran/47517\n+\t* trans-array.c (gfc_alloc_allocatable_for_assignment): Save\n+\tthe lhs descriptor before it is modified for reallocation. Use\n+\tit to deallocate allocatable components in the reallocation\n+\tblock.  Nullify allocatable components for newly (re)allocated\n+\tarrays.\n+\n+2013-02-04  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/54195\n+\t* resolve.c (resolve_typebound_procedures): Recurse through\n+\tresolve_symbol.\n+\n+2013-02-04  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/54107\n+\tPR fortran/54195\n+\t* gfortran.h (struct gfc_symbol): New field 'resolved'.\n+\t* resolve.c (resolve_fl_var_and_proc): Don't skip result symbols.\n+\t(resolve_symbol): Skip duplicate calls.  Don't check the current\n+\tnamespace.\n+\n+2013-02-02  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/50627\n+\tPR fortran/56054\n+\t* decl.c (gfc_match_end):  Remove half-ready namespace\n+\tfrom parent if the end of a block is missing.\n+\t* parse.c (parse_module):  Do not put namespace into\n+\tgsymbol on error.\n+\n+2013-01-30  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/56138\n+\t* trans-decl.c (gfc_trans_deferred_vars): Fix deferred-length\n+\tresults for functions without extra result variable.\n+\n+2013-01-29  Janus Weil  <janus@gcc.gnu.org>\n+\t    Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/54107\n+\t* gfortran.h (gfc_component): Delete members 'formal' and 'formal_ns'.\n+\t(gfc_copy_formal_args,gfc_copy_formal_args_ppc,gfc_expr_replace_symbols,\n+\tgfc_expr_replace_comp): Delete.\n+\t(gfc_sym_get_dummy_args): New prototype.\n+\t* dependency.c (gfc_check_fncall_dependency): Use\n+\t'gfc_sym_get_dummy_args'.\n+\t* expr.c (gfc_is_constant_expr): Ditto.\n+\t(replace_symbol,gfc_expr_replace_symbols,replace_comp,\n+\tgfc_expr_replace_comp): Deleted.\n+\t* frontend-passes.c (doloop_code,do_function): Use\n+\t'gfc_sym_get_dummy_args'.\n+\t* interface.c (gfc_check_operator_interface,gfc_compare_interfaces,\n+\tgfc_procedure_use,gfc_ppc_use,gfc_arglist_matches_symbol,\n+\tgfc_check_typebound_override): Ditto.\n+\t* module.c (MOD_VERSION): Bump module version.\n+\t(mio_component): Do not read/write 'formal' and 'formal_ns'.\n+\t* resolve.c (resolve_procedure_interface,resolve_fl_derived0): Do not\n+\tcopy formal args, but just keep a pointer to the interface.\n+\t(resolve_function,resolve_call,resolve_typebound_generic_call,\n+\tresolve_ppc_call,resolve_expr_ppc,generate_component_assignments,\n+\tresolve_fl_procedure,gfc_resolve_finalizers,check_generic_tbp_ambiguity,\n+\tresolve_typebound_procedure,check_uop_procedure): Use\n+\t'gfc_sym_get_dummy_args'.\n+\t* symbol.c (free_components): Do not free 'formal' and 'formal_ns'.\n+\t(gfc_copy_formal_args,gfc_copy_formal_args_ppc): Deleted.\n+\t(gfc_sym_get_dummy_args): New function.\n+\t* trans-array.c (get_array_charlen,gfc_walk_elemental_function_args):\n+\tUse 'gfc_sym_get_dummy_args'.\n+\t* trans-decl.c (build_function_decl,create_function_arglist,\n+\tbuild_entry_thunks,init_intent_out_dt,gfc_trans_deferred_vars,\n+\tadd_argument_checking): Ditto.\n+\t* trans-expr.c (gfc_map_fcn_formal_to_actual,gfc_conv_procedure_call,\n+\tgfc_conv_statement_function): Ditto.\n+\t* trans-stmt.c (gfc_conv_elemental_dependencies): Ditto.\n+\t* trans-types.c (create_fn_spec,gfc_get_function_type): Ditto.\n+\n+2013-01-28  Tobias Burnus  <burnus@net-b.de>\n+\t    Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/53537\n+\t* symbol.c (gfc_find_sym_tree): Don't look for the symbol outside an\n+\tinterface block.\n+\t(gfc_get_ha_symtree): Let gfc_find_sym_tree lookup the parent namespace.\n+\t* decl.c (gfc_match_data_decl): Ditto.\n+\t(variable_decl): Remove undeclared type error.\n+\t(gfc_match_import): Use renamed instead of original name.\n+\n+2013-01-27  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/55984\n+\tPR fortran/56047\n+\t* gfortran.h : Add associate_var to symbol_attr.\n+\t* resolve.c (resolve_assoc_var): Set associate_var attribute.\n+\tIf the target class_ok is set, set it for the associate\n+\tvariable.\n+\t* check.c (allocatable_check): Associate variables should not\n+\thave the allocatable attribute even if their symbols do.\n+\t* class.c (gfc_build_class_symbol): Symbols with associate_var\n+\tset will always have a good class container.\n+\n+2013-01-23  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/56081\n+\t* resolve.c (resolve_select): Add argument 'select_type', reject\n+\tnon-scalar expressions.\n+\t(resolve_select_type,resolve_code): Pass new argument to\n+\t'resolve_select'.\n+\n+2013-01-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/56052\n+\t* trans-decl.c (gfc_get_symbol_decl): Set DECL_ARTIFICIAL\n+\tand DECL_IGNORED_P on select_type_temporary and don't set\n+\tDECL_BY_REFERENCE.\n+\n+2013-01-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/55919\n+\t* scanner.c (add_path_to_list): Copy path to temporary and strip\n+\ttrailing directory separators before calling stat().\n+\n+2013-01-17  Richard Biener  <rguenther@suse.de>\n+\n+\t* trans-stmt.c (gfc_trans_do): Conditionally compute countm1\n+\tdependent on sign of step, avoids repeated evaluation of\n+\tstep sign test.  Avoid undefined overflow issues by using unsigned\n+\tarithmetic.\n+\n+2013-01-16  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/55983\n+\t* class.c (find_typebound_proc_uop): Check for f2k_derived instead of\n+\tasserting it.\n+\n+2013-01-16  Jakub Jelinek  <jakub@redhat.com>\n+\t    Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR driver/55884\n+\t* lang.opt (fintrinsic-modules-path): Don't accept Joined.\n+\t(fintrinsic-modules-path=): New.\n+\t* options.c (gfc_handle_option, gfc_get_option_string,\n+\tgfc_get_option_string): Handle the latter.\n+\n+2013-01-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/52865\n+\t* trans-stmt.c (gfc_trans_do): Put countm1-- before conditional\n+\tand use value of countm1 before the decrement in the condition.\n+\n+2013-01-15  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/54286\n+\t* expr.c (gfc_check_pointer_assign): Check for presence of\n+\t's2' before using it.\n+\n+2013-01-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/55806\n+\t* frontend-passes.c (optimize_reduction):  New function,\n+\tincluding prototype.\n+\t(callback_reduction):  Likewise.\n+\t(gfc_run_passes):  Also run optimize_reduction.\n+\t(copy_walk_reduction_arg):  New function.\n+\t(dummy_code_callback):  New function.\n+\n+2013-01-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/55935\n+\t* trans-expr.c (gfc_conv_structure): Call\n+\tunshare_expr_without_location on the ctor elements.\n+\n+2013-01-13  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/54286\n+\t* expr.c (gfc_check_pointer_assign): Ensure that both lvalue\n+\tand rvalue interfaces are presented to gfc_compare_interfaces.\n+\tSimplify references to interface names by using the symbols\n+\tthemselves. Call gfc_compare_interfaces with s1 and s2 inter-\n+\tchanged to overcome the asymmetry of this function. Do not\n+\trepeat the check for the presence of s1 and s2.\n+\n+2013-01-12  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/55072\n+\t* trans-array.c (gfc_conv_array_parameter): No packing was done for\n+\tfull arrays of derived type.\n+\n+2013-01-08  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/55868\n+\t* class.c (get_unique_type_string): Change $tar to STAR and\n+\treplace sprintf by strcpy where there is no formatting.\n+\t* decl.c (gfc_match_decl_type_spec): Change $tar to STAR.\n+\n+2013-01-09  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/47203\n+\t* module.c (check_for_ambiguous): Get the current program unit using\n+\tgfc_current_ns.\n+\n+2013-01-09  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/55758\n+\t* resolve.c (resolve_symbol): Reject non-C_Bool logicals\n+\tin BIND(C) procedures with -std=f*.\n+\n+2013-01-08  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/55618\n+\t* trans-expr.c (gfc_conv_procedure_call): Dereference scalar\n+\tcharacter function arguments to elemental procedures in\n+\tscalarization loops.\n+\n+2013-01-07  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/55763\n+\t* gfortran.h (gfc_check_assign_symbol): Update prototype.\n+\t* decl.c (add_init_expr_to_sym, do_parm): Update call.\n+\t* expr.c (gfc_check_assign_symbol): Handle BT_CLASS and\n+\timprove error location; support components.\n+\t(gfc_check_pointer_assign): Handle component assignments.\n+\t* resolve.c (resolve_fl_derived0): Call gfc_check_assign_symbol.\n+\t(resolve_values): Update call.\n+\t(resolve_structure_cons): Avoid double diagnostic.\n+\n+2013-01-07  Tobias Burnus  <burnus@net-b.de>\n+\t    Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/55852\n+\t* expr.c (gfc_build_intrinsic_call): Avoid clashes\n+\twith user's procedures.\n+\t* gfortran.h (gfc_build_intrinsic_call): Update prototype.\n+\t* simplify.c (gfc_simplify_size): Update call.\n+\t* class.c (finalization_scalarizer, finalization_get_offset,\n+\tfinalizer_insert_packed_call, generate_finalization_wrapper):\n+\tClean up by using gfc_build_intrinsic_call.\n+\n+2013-01-07  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/55763\n+\t* resolve.c (resolve_select_type): Reject intrinsic types for\n+\ta non-unlimited-polymorphic selector.\n+\n+2013-01-06  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/53876\n+\tPR fortran/54990\n+\tPR fortran/54992\n+\t* trans-array.c (build_array_ref): Check the TYPE_CANONICAL\n+\tto see if it is GFC_CLASS_TYPE_P.\n+\t* trans-expr.c (gfc_get_vptr_from_expr): The same.\n+\t(gfc_conv_class_to_class): If the types are not the same,\n+\tcast parmese->expr to the type of ctree.\n+\t* trans-types.c (gfc_get_derived_type): GFC_CLASS_TYPE_P of\n+\tCLASS components must be set.\n+\n+2013-01-06  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/42769\n+\tPR fortran/45836\n+\tPR fortran/45900\n+\t* module.c (read_module): Don't reuse local symtree if the associated\n+\tsymbol isn't exactly the one wanted.  Don't reuse local symtree if it is\n+\tambiguous.\n+\t* resolve.c (resolve_call): Use symtree's name instead of symbol's to\n+\tlookup the symtree.\n+\n+2013-01-05  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\t    Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/55827\n+\t* class.c (gfc_fix_class_refs): Adapt ts initialization for the case\n+\te->symtree == NULL.\n+\t* trans-expr.c (gfc_conv_function_expr): Init sym earlier. Use it.\n+\n+2013-01-05  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* class.c (finalize_component): Used passed offset expr.\n+\t(finalization_get_offset): New static function.\n+\t(finalizer_insert_packed_call, generate_finalization_wrapper): Use it\n+\tto handle noncontiguous arrays.\n+\n+2013-01-04  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans.c (gfc_build_final_call): New function.\n+\t* trans.h (gfc_build_final_call, gfc_conv_scalar_to_descriptor):\n+\tNew function prototypes.\n+\t* trans-expr.c (gfc_conv_scalar_to_descriptor): Renamed from\n+\tconv_scalar_to_descriptor, removed static attribute.\n+\t(gfc_conv_procedure_call): Honor renaming.\n+\n+2013-01-04  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* intrinsic.c (add_functions): New internal intrinsic\n+\tfunction GFC_PREFIX (\"stride\").\n+\t* gfortran.h (gfc_isym_id): Add GFC_ISYM_STRIDE.\n+\t* intrinsic.h (gfc_resolve_stride): New prototypes.\n+\t* iresolve.c (gfc_resolve_stride): New function.\n+\t* trans-intrinsic.c (conv_intrinsic_stride): New static\n+\tfunction.\n+\t(gfc_conv_intrinsic_function): Use it.\n+\n+2013-01-04  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* class.c (gfc_find_intrinsic_vtab): Add _final\n+\tcomponent.\n+\t* decl.c (gfc_match_null): Remove superfluous\n+\tvariadic argument to gfc_match.\n+\n+2013-01-04  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/55172\n+\t* match.c (copy_ts_from_selector_to_associate): Remove call to\n+\tgfc_resolve_expr and replace it with explicit setting of the\n+\tarray reference type.\n+\t* resolve.c (resolve_select_type): It is an error if the\n+\tselector is coindexed.\n+\n+2013-01-04  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/55763\n+\t* decl.c (gfc_match_null): Parse and reject MOLD.\n+\n+2013-01-04  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/55854\n+\tPR fortran/55763\n+\t* class.c (gfc_class_null_initializer): Fix finding the vtab.\n+\t(gfc_find_intrinsic_vtab): Use BT_VOID for some components.\n+\n+2013-01-03  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/55855\n+\t* expr.c (gfc_check_assign): Use 'gfc_expr_attr' to evaluate attributes\n+\tof rvalue. Correct hyphenation in error message.\n+\n+2013-01-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gfortranspec.c (lang_specific_driver): Update copyright notice\n+\tdates.\n+\f\n+Copyright (C) 2013 Free Software Foundation, Inc.\n+\n+Copying and distribution of this file, with or without modification,\n+are permitted in any medium without royalty provided the copyright\n+notice and this notice are preserved."}, {"sha": "6151d73827ef911b1711addc8a593f7219d62838", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0f33855c98870e23ffd927f0f3d7647903fbe98/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0f33855c98870e23ffd927f0f3d7647903fbe98/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=d0f33855c98870e23ffd927f0f3d7647903fbe98", "patch": "@@ -11903,9 +11903,6 @@ resolve_typebound_procedures (gfc_symbol* derived)\n   resolve_bindings_derived = derived;\n   resolve_bindings_result = true;\n \n-  /* Make sure the vtab has been generated.  */\n-  gfc_find_derived_vtab (derived);\n-\n   if (derived->f2k_derived->tb_sym_root)\n     gfc_traverse_symtree (derived->f2k_derived->tb_sym_root,\n \t\t\t  &resolve_typebound_procedure);"}, {"sha": "17ea414fc7697366953c3782557ebcb6ae9fd6b6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0f33855c98870e23ffd927f0f3d7647903fbe98/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0f33855c98870e23ffd927f0f3d7647903fbe98/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d0f33855c98870e23ffd927f0f3d7647903fbe98", "patch": "@@ -1,3 +1,8 @@\n+2014-01-02  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/59654\n+\t* gfortran.dg/dynamic_dispatch_12.f90: New.\n+\n 2014-01-01  Jakub Jelinek  <jakub@redhat.com>\n \n \t* lib/target-supports.exp (check_effective_target_avx512f): Make sure"}, {"sha": "d37e1f6a9b5aa2a71bcffeb1d689f917d4f7cd4b", "filename": "gcc/testsuite/gfortran.dg/dynamic_dispatch_12.f90", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0f33855c98870e23ffd927f0f3d7647903fbe98/gcc%2Ftestsuite%2Fgfortran.dg%2Fdynamic_dispatch_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0f33855c98870e23ffd927f0f3d7647903fbe98/gcc%2Ftestsuite%2Fgfortran.dg%2Fdynamic_dispatch_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdynamic_dispatch_12.f90?ref=d0f33855c98870e23ffd927f0f3d7647903fbe98", "patch": "@@ -0,0 +1,74 @@\n+! { dg-do run }\n+!\n+! PR 59654: [4.8/4.9 Regression] [OOP] Broken function table with complex OO use case\n+!\n+! Contributed by Thomas Clune <Thomas.L.Clune@nasa.gov>\n+\n+module TestResult_mod\n+  implicit none\n+\n+  type TestResult\n+    integer :: numRun = 0\n+  contains\n+    procedure :: run\n+    procedure, nopass :: getNumRun\n+  end type\n+\n+contains\n+\n+  subroutine run (this)\n+    class (TestResult) :: this\n+    this%numRun = this%numRun + 1\n+  end subroutine\n+\n+  subroutine getNumRun()\n+   end subroutine\n+\n+end module\n+\n+\n+module BaseTestRunner_mod\n+  implicit none\n+\n+  type :: BaseTestRunner\n+  contains\n+    procedure, nopass :: norun\n+  end type\n+\n+contains\n+\n+  function norun () result(result)\n+    use TestResult_mod, only: TestResult\n+    type (TestResult) :: result\n+  end function\n+\n+end module\n+\n+\n+module TestRunner_mod\n+  use BaseTestRunner_mod, only: BaseTestRunner\n+  implicit none\n+end module\n+\n+\n+program main\n+  use TestRunner_mod, only: BaseTestRunner\n+  use TestResult_mod, only: TestResult\n+  implicit none\n+\n+  type (TestResult) :: result\n+\n+  call runtest (result)\n+  \n+contains\n+\n+  subroutine runtest (result)\n+    use TestResult_mod, only: TestResult\n+    class (TestResult) :: result\n+    call result%run()\n+    if (result%numRun /= 1) call abort()\n+  end subroutine\n+\n+end\n+\n+! { dg-final { cleanup-modules \"TestResult_mod BaseTestRunner_mod TestRunner_mod\" } }"}]}