{"sha": "d1c3b58718a703958d4f1756e5adf0ed7d0c32e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFjM2I1ODcxOGE3MDM5NThkNGYxNzU2ZTVhZGYwZWQ3ZDBjMzJlNQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-05-05T21:34:17Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-05-05T21:34:17Z"}, "message": "i386.md (sat_plusminus): New.\n\n2008-05-05  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config/i386/i386.md (sat_plusminus): New.\n\t(plusminus_insn): Likewise.\n\t(plusminus_mnemonic): Likewise.\n\t(addsub): Removed.\n\t(comm): Add ss_plus, us_plus, ss_minus and us_minus.\n\t(*<addsub><mode>3_cc_overflow): Renamed to ...\n\t(*<plusminus_insn><mode>3_cc_overflow): This.\n\t(*<addsub>si3_zext_cc_overflow): Renamed to ...\n\t(*<plusminus_insn>si3_zext_cc_overflow): This.\n\n\t* gcc/config/i386/sse.md (<addsub><mode>3): Renamed to ...\n\t(<plusminus_insn><mode>3): This.\n\t(*<addsub><mode>3): Renamed to ...\n\t(*<plusminus_insn><mode>3): This.\n\t(<sse>_vm<addsub><mode>3): Renamed to ...\n\t(<sse>_vm<plusminus_insn><mode>3): This.\n\t(sse3_h<addsub>v4sf3): Renamed to ...\n\t(sse3_h<plusminus_insn>v4sf3): This.\n\t(sse3_h<addsub>v2df3): Renamed to ...\n\t(sse3_h<plusminus_insn>v2df3): This.\n\t(<plusminus_insn><mode>3): New.\n\t(*<plusminus_insn><mode>3): Likewise.\n\t(sse2_<plusminus_insn><mode>3): Likewise.\n\t(add<mode>): Removed.\n\t(*add<mode>3): Likewise.\n\t(sse2_ssadd<mode>3): Likewise.\n\t(sse2_usadd<mode>3): Likewise.\n\t(sub<mode>3): Likewise.\n\t(*sub<mode>3): Likewise.\n\t(sse2_sssub<mode>3): Likewise.\n\t(sse2_ussub<mode>3): Likewise.\n\nFrom-SVN: r134957", "tree": {"sha": "2447af368a76883cbecda34d741fc75a7eab10a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2447af368a76883cbecda34d741fc75a7eab10a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1c3b58718a703958d4f1756e5adf0ed7d0c32e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1c3b58718a703958d4f1756e5adf0ed7d0c32e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1c3b58718a703958d4f1756e5adf0ed7d0c32e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1c3b58718a703958d4f1756e5adf0ed7d0c32e5/comments", "author": null, "committer": null, "parents": [{"sha": "33437ca004897edeb4c9ab3dabd585e33bb78326", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33437ca004897edeb4c9ab3dabd585e33bb78326", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33437ca004897edeb4c9ab3dabd585e33bb78326"}], "stats": {"total": 174, "additions": 84, "deletions": 90}, "files": [{"sha": "c9771d2327fb4afd4cdab6cac1db3988c0a1106e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c3b58718a703958d4f1756e5adf0ed7d0c32e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c3b58718a703958d4f1756e5adf0ed7d0c32e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1c3b58718a703958d4f1756e5adf0ed7d0c32e5", "patch": "@@ -1,14 +1,48 @@\n+2008-05-05  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386.md (sat_plusminus): New.\n+\t(plusminus_insn): Likewise.\n+\t(plusminus_mnemonic): Likewise.\n+\t(addsub): Removed.\n+\t(comm): Add ss_plus, us_plus, ss_minus and us_minus.\n+\t(*<addsub><mode>3_cc_overflow): Renamed to ...\n+\t(*<plusminus_insn><mode>3_cc_overflow): This.\n+\t(*<addsub>si3_zext_cc_overflow): Renamed to ...\n+\t(*<plusminus_insn>si3_zext_cc_overflow): This.\n+\n+\t* gcc/config/i386/sse.md (<addsub><mode>3): Renamed to ...\n+\t(<plusminus_insn><mode>3): This.\n+\t(*<addsub><mode>3): Renamed to ...\n+\t(*<plusminus_insn><mode>3): This.\n+\t(<sse>_vm<addsub><mode>3): Renamed to ...\n+\t(<sse>_vm<plusminus_insn><mode>3): This.\n+\t(sse3_h<addsub>v4sf3): Renamed to ...\n+\t(sse3_h<plusminus_insn>v4sf3): This.\n+\t(sse3_h<addsub>v2df3): Renamed to ...\n+\t(sse3_h<plusminus_insn>v2df3): This.\n+\t(<plusminus_insn><mode>3): New.\n+\t(*<plusminus_insn><mode>3): Likewise.\n+\t(sse2_<plusminus_insn><mode>3): Likewise.\n+\t(add<mode>): Removed.\n+\t(*add<mode>3): Likewise.\n+\t(sse2_ssadd<mode>3): Likewise.\n+\t(sse2_usadd<mode>3): Likewise.\n+\t(sub<mode>3): Likewise.\n+\t(*sub<mode>3): Likewise.\n+\t(sse2_sssub<mode>3): Likewise.\n+\t(sse2_ussub<mode>3): Likewise.\n+\n 2008-05-05  Benjamin Kosnik  <bkoz@redhat.com>\n \n-        * gthr-single.h: Add in required interface elements as per gthr.h.\n-        Add stub types for __gthread_key_t, __gthread_once_t. Add defines\n-        for __GTHREAD_ONCE_INIT, __GTHREAD_RECURSIVE_MUTEX_INIT.\n-        Generalize UNUSED macro. \n-        (__gthread_once): Add.\n-        (__gthread_key_create): Add.\n-        (__gthread_key_delete): Add.    \n-        (__gthread_getspecific): Add.\n-        (__gthread_setspecific): Add.      \n+\t* gthr-single.h: Add in required interface elements as per gthr.h.\n+\tAdd stub types for __gthread_key_t, __gthread_once_t. Add defines\n+\tfor __GTHREAD_ONCE_INIT, __GTHREAD_RECURSIVE_MUTEX_INIT.\n+\tGeneralize UNUSED macro. \n+\t(__gthread_once): Add.\n+\t(__gthread_key_create): Add.\n+\t(__gthread_key_delete): Add.    \n+\t(__gthread_getspecific): Add.\n+\t(__gthread_setspecific): Add.      \n \t\n 2008-05-05  Andrew Pinski  <Andrew.Pinski@playstation.sony.com>\n "}, {"sha": "b5e9082ceec734793bd957c3e851803d94102ae0", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c3b58718a703958d4f1756e5adf0ed7d0c32e5/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c3b58718a703958d4f1756e5adf0ed7d0c32e5/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=d1c3b58718a703958d4f1756e5adf0ed7d0c32e5", "patch": "@@ -535,11 +535,21 @@\n \n (define_code_iterator plusminus [plus minus])\n \n-;; Base name for define_insn and insn mnemonic.\n-(define_code_attr addsub [(plus \"add\") (minus \"sub\")])\n+(define_code_iterator sat_plusminus [ss_plus us_plus ss_minus us_minus])\n+\n+;; Base name for define_insn\n+(define_code_attr plusminus_insn\n+  [(plus \"add\") (ss_plus \"ssadd\") (us_plus \"usadd\")\n+   (minus \"sub\") (ss_minus \"sssub\") (us_minus \"ussub\")])\n+\n+;; Base name for insn mnemonic.\n+(define_code_attr plusminus_mnemonic\n+  [(plus \"add\") (ss_plus \"adds\") (us_plus \"addus\")\n+   (minus \"sub\") (ss_minus \"subs\") (us_minus \"subus\")])\n \n ;; Mark commutative operators as such in constraints.\n-(define_code_attr comm [(plus \"%\") (minus \"\")])\n+(define_code_attr comm [(plus \"%\") (ss_plus \"%\") (us_plus \"%\")\n+\t\t\t(minus \"\") (ss_minus \"\") (us_minus \"\")])\n \n ;; Mapping of signed max and min\n (define_code_iterator smaxmin [smax smin])\n@@ -5582,7 +5592,7 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"*<addsub><mode>3_cc_overflow\"\n+(define_insn \"*<plusminus_insn><mode>3_cc_overflow\"\n   [(set (reg:CCC FLAGS_REG)\n \t(compare:CCC\n \t    (plusminus:SWI\n@@ -5592,7 +5602,7 @@\n    (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m,<r>\")\n \t(plusminus:SWI (match_dup 1) (match_dup 2)))]\n   \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"<addsub>{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n+  \"<plusminus_mnemonic>{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -5619,7 +5629,7 @@\n   [(set_attr \"type\" \"icmp\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*<addsub>si3_zext_cc_overflow\"\n+(define_insn \"*<plusminus_insn>si3_zext_cc_overflow\"\n   [(set (reg:CCC FLAGS_REG)\n \t(compare:CCC\n \t    (plusminus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"<comm>0\")\n@@ -5628,7 +5638,7 @@\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI (plusminus:SI (match_dup 1) (match_dup 2))))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (<CODE>, SImode, operands)\"\n-  \"<addsub>{l}\\t{%2, %k0|%k0, %2}\"\n+  \"<plusminus_mnemonic>{l}\\t{%2, %k0|%k0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"SI\")])\n "}, {"sha": "a6c7a07de492c0b54837e52d3c889d8831dea29d", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 24, "deletions": 74, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c3b58718a703958d4f1756e5adf0ed7d0c32e5/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c3b58718a703958d4f1756e5adf0ed7d0c32e5/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=d1c3b58718a703958d4f1756e5adf0ed7d0c32e5", "patch": "@@ -302,26 +302,26 @@\n   \"SSE_VEC_FLOAT_MODE_P (<MODE>mode)\"\n   \"ix86_expand_fp_absneg_operator (<CODE>, <MODE>mode, operands); DONE;\")\n \n-(define_expand \"<addsub><mode>3\"\n+(define_expand \"<plusminus_insn><mode>3\"\n   [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"\")\n \t(plusminus:SSEMODEF2P\n \t  (match_operand:SSEMODEF2P 1 \"nonimmediate_operand\" \"\")\n \t  (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"\")))]\n   \"SSE_VEC_FLOAT_MODE_P (<MODE>mode)\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n-(define_insn \"*<addsub><mode>3\"\n+(define_insn \"*<plusminus_insn><mode>3\"\n   [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"=x\")\n \t(plusminus:SSEMODEF2P\n \t  (match_operand:SSEMODEF2P 1 \"nonimmediate_operand\" \"<comm>0\")\n \t  (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"xm\")))]\n   \"SSE_VEC_FLOAT_MODE_P (<MODE>mode)\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"<addsub>p<ssemodesuffixf2c>\\t{%2, %0|%0, %2}\"\n+  \"<plusminus_mnemonic>p<ssemodesuffixf2c>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseadd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"<sse>_vm<addsub><mode>3\"\n+(define_insn \"<sse>_vm<plusminus_insn><mode>3\"\n   [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"=x\")\n \t(vec_merge:SSEMODEF2P\n \t  (plusminus:SSEMODEF2P\n@@ -331,7 +331,7 @@\n \t  (const_int 1)))]\n   \"SSE_VEC_FLOAT_MODE_P (<MODE>mode)\n    && ix86_binary_operator_ok (<CODE>, V4SFmode, operands)\"\n-  \"<addsub>s<ssemodesuffixf2c>\\t{%2, %0|%0, %2}\"\n+  \"<plusminus_mnemonic>s<ssemodesuffixf2c>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseadd\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n@@ -615,7 +615,7 @@\n   [(set_attr \"type\" \"sseadd\")\n    (set_attr \"mode\" \"V2DF\")])\n \n-(define_insn \"sse3_h<addsub>v4sf3\"\n+(define_insn \"sse3_h<plusminus_insn>v4sf3\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n \t(vec_concat:V4SF\n \t  (vec_concat:V2SF\n@@ -637,12 +637,12 @@\n \t      (vec_select:SF (match_dup 2) (parallel [(const_int 2)]))\n \t      (vec_select:SF (match_dup 2) (parallel [(const_int 3)]))))))]\n   \"TARGET_SSE3\"\n-  \"h<addsub>ps\\t{%2, %0|%0, %2}\"\n+  \"h<plusminus_mnemonic>ps\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseadd\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"mode\" \"V4SF\")])\n \n-(define_insn \"sse3_h<addsub>v2df3\"\n+(define_insn \"sse3_h<plusminus_insn>v2df3\"\n   [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n \t(vec_concat:V2DF\n \t  (plusminus:DF\n@@ -656,7 +656,7 @@\n \t      (parallel [(const_int 0)]))\n \t    (vec_select:DF (match_dup 2) (parallel [(const_int 1)])))))]\n   \"TARGET_SSE3\"\n-  \"h<addsub>pd\\t{%2, %0|%0, %2}\"\n+  \"h<plusminus_mnemonic>pd\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseadd\")\n    (set_attr \"mode\" \"V2DF\")])\n \n@@ -2722,82 +2722,32 @@\n   \"TARGET_SSE2\"\n   \"operands[2] = force_reg (<MODE>mode, CONST0_RTX (<MODE>mode));\")\n \n-(define_expand \"add<mode>3\"\n+(define_expand \"<plusminus_insn><mode>3\"\n   [(set (match_operand:SSEMODEI 0 \"register_operand\" \"\")\n-\t(plus:SSEMODEI (match_operand:SSEMODEI 1 \"nonimmediate_operand\" \"\")\n-\t\t       (match_operand:SSEMODEI 2 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_SSE2\"\n-  \"ix86_fixup_binary_operands_no_copy (PLUS, <MODE>mode, operands);\")\n-\n-(define_insn \"*add<mode>3\"\n-  [(set (match_operand:SSEMODEI 0 \"register_operand\" \"=x\")\n-\t(plus:SSEMODEI\n-\t  (match_operand:SSEMODEI 1 \"nonimmediate_operand\" \"%0\")\n-\t  (match_operand:SSEMODEI 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE2 && ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n-  \"padd<ssevecsize>\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sseiadd\")\n-   (set_attr \"prefix_data16\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse2_ssadd<mode>3\"\n-  [(set (match_operand:SSEMODE12 0 \"register_operand\" \"=x\")\n-\t(ss_plus:SSEMODE12\n-\t  (match_operand:SSEMODE12 1 \"nonimmediate_operand\" \"%0\")\n-\t  (match_operand:SSEMODE12 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE2 && ix86_binary_operator_ok (SS_PLUS, <MODE>mode, operands)\"\n-  \"padds<ssevecsize>\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sseiadd\")\n-   (set_attr \"prefix_data16\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse2_usadd<mode>3\"\n-  [(set (match_operand:SSEMODE12 0 \"register_operand\" \"=x\")\n-\t(us_plus:SSEMODE12\n-\t  (match_operand:SSEMODE12 1 \"nonimmediate_operand\" \"%0\")\n-\t  (match_operand:SSEMODE12 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE2 && ix86_binary_operator_ok (US_PLUS, <MODE>mode, operands)\"\n-  \"paddus<ssevecsize>\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sseiadd\")\n-   (set_attr \"prefix_data16\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_expand \"sub<mode>3\"\n-  [(set (match_operand:SSEMODEI 0 \"register_operand\" \"\")\n-\t(minus:SSEMODEI (match_operand:SSEMODEI 1 \"register_operand\" \"\")\n-\t\t\t(match_operand:SSEMODEI 2 \"nonimmediate_operand\" \"\")))]\n+\t(plusminus:SSEMODEI\n+\t  (match_operand:SSEMODEI 1 \"nonimmediate_operand\" \"\")\n+\t  (match_operand:SSEMODEI 2 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_SSE2\"\n-  \"ix86_fixup_binary_operands_no_copy (MINUS, <MODE>mode, operands);\")\n+  \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n-(define_insn \"*sub<mode>3\"\n+(define_insn \"*<plusminus_insn><mode>3\"\n   [(set (match_operand:SSEMODEI 0 \"register_operand\" \"=x\")\n-\t(minus:SSEMODEI\n-\t  (match_operand:SSEMODEI 1 \"register_operand\" \"0\")\n+\t(plusminus:SSEMODEI\n+\t  (match_operand:SSEMODEI 1 \"nonimmediate_operand\" \"<comm>0\")\n \t  (match_operand:SSEMODEI 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE2\"\n-  \"psub<ssevecsize>\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sseiadd\")\n-   (set_attr \"prefix_data16\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse2_sssub<mode>3\"\n-  [(set (match_operand:SSEMODE12 0 \"register_operand\" \"=x\")\n-\t(ss_minus:SSEMODE12\n-\t  (match_operand:SSEMODE12 1 \"register_operand\" \"0\")\n-\t  (match_operand:SSEMODE12 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE2\"\n-  \"psubs<ssevecsize>\\t{%2, %0|%0, %2}\"\n+  \"TARGET_SSE2 && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+  \"p<plusminus_mnemonic><ssevecsize>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"sse2_ussub<mode>3\"\n+(define_insn \"sse2_<plusminus_insn><mode>3\"\n   [(set (match_operand:SSEMODE12 0 \"register_operand\" \"=x\")\n-\t(us_minus:SSEMODE12\n-\t  (match_operand:SSEMODE12 1 \"register_operand\" \"0\")\n+\t(sat_plusminus:SSEMODE12\n+\t  (match_operand:SSEMODE12 1 \"nonimmediate_operand\" \"<comm>0\")\n \t  (match_operand:SSEMODE12 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE2\"\n-  \"psubus<ssevecsize>\\t{%2, %0|%0, %2}\"\n+  \"TARGET_SSE2 && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+  \"p<sat_plusminus_mnemonic><ssevecsize>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])"}]}