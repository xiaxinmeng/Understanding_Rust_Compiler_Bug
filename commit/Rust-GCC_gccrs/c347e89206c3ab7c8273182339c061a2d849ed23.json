{"sha": "c347e89206c3ab7c8273182339c061a2d849ed23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM0N2U4OTIwNmMzYWI3YzgyNzMxODIzMzljMDYxYTJkODQ5ZWQyMw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-01-24T19:19:26Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-01-24T19:19:26Z"}, "message": "atomicity.h (__compare_and_swap): Remove.\n\n\t* config/os/aix/bits/atomicity.h (__compare_and_swap): Remove.\n\t(__always_swap): Likewise.\n\nFrom-SVN: r39243", "tree": {"sha": "8a87b629a0e3a4ef9cd4df4d8d08253ed6798a00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a87b629a0e3a4ef9cd4df4d8d08253ed6798a00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c347e89206c3ab7c8273182339c061a2d849ed23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c347e89206c3ab7c8273182339c061a2d849ed23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c347e89206c3ab7c8273182339c061a2d849ed23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c347e89206c3ab7c8273182339c061a2d849ed23/comments", "author": null, "committer": null, "parents": [{"sha": "4cfc604201d08c88f367657652cabbcf9203b298", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cfc604201d08c88f367657652cabbcf9203b298", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cfc604201d08c88f367657652cabbcf9203b298"}], "stats": {"total": 46, "additions": 14, "deletions": 32}, "files": [{"sha": "fdd1cff456635032b79ab624e21a4b5d0750a514", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c347e89206c3ab7c8273182339c061a2d849ed23/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c347e89206c3ab7c8273182339c061a2d849ed23/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c347e89206c3ab7c8273182339c061a2d849ed23", "patch": "@@ -1,3 +1,8 @@\n+2001-01-24  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* config/os/aix/bits/atomicity.h (__compare_and_swap): Remove.\n+\t(__always_swap): Likewise.\n+\n 2001-01-23  Chris Demetriou  <cgd@broadcom.com>\n \n \t* libsupc++/exception_support.cc (__terminate_func): Remove"}, {"sha": "fa8350ab8f721db805e78166b076c63bc5a3f134", "filename": "libstdc++-v3/config/os/aix/bits/atomicity.h", "status": "modified", "additions": 9, "deletions": 32, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c347e89206c3ab7c8273182339c061a2d849ed23/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fbits%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c347e89206c3ab7c8273182339c061a2d849ed23/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fbits%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fbits%2Fatomicity.h?ref=c347e89206c3ab7c8273182339c061a2d849ed23", "patch": "@@ -1,5 +1,5 @@\n /* Low-level functions for atomic operations.  AIX version.\n-   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n \n    The GNU C Library is free software; you can redistribute it and/or\n@@ -20,7 +20,14 @@\n #ifndef _BITS_ATOMICITY_H\n #define _BITS_ATOMICITY_H       1\n \n-/* Should this be type long so 64-bit word in 64-bit mode?  */\n+/* We cannot use the cpu/powerpc/bits/atomicity.h inline assembly\n+   definitions for these operations since they depend on operations\n+   that are not available on the original POWER architecture.  AIX\n+   still runs on the POWER architecture, so it would be incorrect to\n+   assume the existence of these instructions.  */\n+\n+/* This should match the type pointed to by atomic_p in\n+   <sys/atomic_op.h>.  */\n typedef int _Atomic_word;\n \n #include <sys/atomic_op.h>\n@@ -39,34 +46,4 @@ __atomic_add (atomic_p __mem, int __val)\n   (void) fetch_and_add (__mem, __val);\n }\n \n-static inline int\n-__attribute__ ((unused))\n-__compare_and_swap (atomic_l __p, long int __oldval, long int __newval)\n-{\n-  return compare_and_swaplp (__p, &__oldval, __newval);\n-}\n-\n-static inline long\n-__attribute__ ((unused))\n-__always_swap (atomic_l __p, long int __newval)\n-{\n-  long __val = *__p;\n-\n-  while (! compare_and_swaplp (__p, &__val, __newval))\n-    /* EMPTY */;\n-\n-  return __val;\n-}\n-\n-static inline int\n-__attribute__ ((unused))\n-__test_and_set (atomic_l __p, long int __newval)\n-{\n-  long __val = 0;\n-\n-  (void) compare_and_swaplp (__p, &__val, __newval);\n-\n-  return __val;\n-}\n-\n #endif /* atomicity.h */"}]}