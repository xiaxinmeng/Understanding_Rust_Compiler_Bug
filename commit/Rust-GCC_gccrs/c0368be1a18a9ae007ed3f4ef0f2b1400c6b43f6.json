{"sha": "c0368be1a18a9ae007ed3f4ef0f2b1400c6b43f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAzNjhiZTFhMThhOWFlMDA3ZWQzZjRlZjBmMmIxNDAwYzZiNDNmNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2018-05-30T08:56:12Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-30T08:56:12Z"}, "message": "[Ada] Move special flags for Ada runtime files from Makefile.in to Makefile.rtl\n\n2018-05-30  Arnaud Charlet  <charlet@adacore.com>\n\ngcc/ada/\n\n\t* gcc-interface/Makefile.in: Move special flags for Ada runtime files\n\tfrom here...\n\t* Makefile.rtl: ... to here.  Update comments.  Protect call to\n\t\"GCC_FOR_TARGET\" in case target_os isn't defined.\n\nFrom-SVN: r260922", "tree": {"sha": "9abb1cc5d5dde7895a87965bbe8172271bbcc840", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9abb1cc5d5dde7895a87965bbe8172271bbcc840"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0368be1a18a9ae007ed3f4ef0f2b1400c6b43f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0368be1a18a9ae007ed3f4ef0f2b1400c6b43f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0368be1a18a9ae007ed3f4ef0f2b1400c6b43f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0368be1a18a9ae007ed3f4ef0f2b1400c6b43f6/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c667752e4ce7aba64f59f30a8c6e60c48fa525f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c667752e4ce7aba64f59f30a8c6e60c48fa525f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c667752e4ce7aba64f59f30a8c6e60c48fa525f4"}], "stats": {"total": 135, "additions": 73, "deletions": 62}, "files": [{"sha": "3f1f04503cdb861ff953efd331c371e15cb3167e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0368be1a18a9ae007ed3f4ef0f2b1400c6b43f6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0368be1a18a9ae007ed3f4ef0f2b1400c6b43f6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c0368be1a18a9ae007ed3f4ef0f2b1400c6b43f6", "patch": "@@ -1,3 +1,10 @@\n+2018-05-30  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gcc-interface/Makefile.in: Move special flags for Ada runtime files\n+\tfrom here...\n+\t* Makefile.rtl: ... to here.  Update comments.  Protect call to\n+\t\"GCC_FOR_TARGET\" in case target_os isn't defined.\n+\n 2018-05-30  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gcc-interface/Makefile.in: Move target pair settings from here..."}, {"sha": "34988c8591a657484666ce0639012dc12464fb10", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 66, "deletions": 8, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0368be1a18a9ae007ed3f4ef0f2b1400c6b43f6/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0368be1a18a9ae007ed3f4ef0f2b1400c6b43f6/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=c0368be1a18a9ae007ed3f4ef0f2b1400c6b43f6", "patch": "@@ -1852,13 +1852,15 @@ ifeq ($(strip $(filter-out ibm aix%,$(target_vendor) $(target_os))),)\n   $(ATOMICS_BUILTINS_TARGET_PAIRS) \\\n   system.ads<libgnat/system-aix.ads\n \n-  ifeq ($(findstring ppc64, \\\n-\t  $(shell $(GCC_FOR_TARGET) $(GNATLIBCFLAGS) \\\n-\t\t   -print-multi-os-directory)), \\\n-\tppc64)\n-    TOOLS_TARGET_PAIRS = indepsw.adb<indepsw-aix.adb\n-  else\n-    TOOLS_TARGET_PAIRS = indepsw.adb<indepsw-gnu.adb\n+  ifneq ($(target_os),)\n+    ifeq ($(findstring ppc64, \\\n+\t    $(shell $(GCC_FOR_TARGET) $(GNATLIBCFLAGS) \\\n+\t\t     -print-multi-os-directory)), \\\n+\t  ppc64)\n+      TOOLS_TARGET_PAIRS = indepsw.adb<indepsw-aix.adb\n+    else\n+      TOOLS_TARGET_PAIRS = indepsw.adb<indepsw-gnu.adb\n+    endif\n   endif\n \n   EXTRA_GNATRTL_NONTASKING_OBJS += $(TRASYM_DWARF_UNIX_OBJS)\n@@ -2580,7 +2582,7 @@ endif\n \n # LIBGNAT_SRCS is the list of all C files (including headers) of the runtime\n # library.  LIBGNAT_OBJS is the list of object files for libgnat.\n-# thread.c is special as put into GNATRTL_TASKING_OBJS by Makefile.rtl\n+# thread.c is special as put into GNATRTL_TASKING_OBJS\n LIBGNAT_OBJS = adadecode.o adaint.o argv.o aux-io.o \t\t\t\\\n   cal.o cio.o cstreams.o ctrl_c.o\t\t\t\t\t\\\n   env.o errno.o exit.o expect.o final.o rtfinal.o rtinit.o\t\t\\\n@@ -2673,3 +2675,59 @@ setup-rts: force\n \t          $(LN_S) $(GNAT_SRC)/$(word 2,$(subst <, ,$(PAIR))) \\\n \t                $(RTSDIR)/$(word 1,$(subst <, ,$(PAIR)));)\n \n+# Special flags\n+\n+# force no sibling call optimization on s-traceb.o so the number of stack\n+# frames to be skipped when computing a call chain is not modified by\n+# optimization. We don't want inlining, either.\n+\n+s-traceb.o  : s-traceb.adb s-traceb.ads\n+\t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) $(NO_INLINE_ADAFLAGS) \\\n+\t      $(NO_SIBLING_ADAFLAGS) $(ADA_INCLUDES) $< $(OUTPUT_OPTION)\n+\n+# compile s-tasdeb.o without optimization and with debug info so that it is\n+# always possible to set conditional breakpoints on tasks.\n+\n+s-tasdeb.o  : s-tasdeb.adb s-tasdeb.ads\n+\t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) -O0 $(ADA_INCLUDES) \\\n+\t      $< $(OUTPUT_OPTION)\n+\n+# force no function reordering on a-except.o because of the exclusion bounds\n+# mechanism (see the source file for more detailed information).\n+# force debugging information on a-except.o so that it is always\n+# possible to set conditional breakpoints on exceptions.\n+# use -O1 otherwise gdb isn't able to get a full backtrace on mips targets.\n+\n+a-except.o  : a-except.adb a-except.ads\n+\t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) $(NO_INLINE_ADAFLAGS) \\\n+\t      $(NO_REORDER_ADAFLAGS) -O1 $(ADA_INCLUDES) $< $(OUTPUT_OPTION)\n+\n+# compile s-excdeb.o without optimization and with debug info to let the\n+# debugger set breakpoints and inspect subprogram parameters on exception\n+# related events.\n+\n+s-excdeb.o  : s-excdeb.adb s-excdeb.ads s-except.ads\n+\t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) -O0 $(ADA_INCLUDES) \\\n+\t      $< $(OUTPUT_OPTION)\n+\n+# force debugging information on s-assert.o so that it is always\n+# possible to set breakpoint on assert failures.\n+\n+s-assert.o  : s-assert.adb s-assert.ads\n+\t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) $(ADA_INCLUDES) \\\n+\t      $< $(OUTPUT_OPTION)\n+\n+# force debugging information on a-tags.o so that the debugger can find\n+# the description of Ada.Tags.Type_Specific_Data.\n+\n+a-tags.o  : a-tags.adb a-tags.ads\n+\t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) $(ADA_INCLUDES) \\\n+\t      $< $(OUTPUT_OPTION)\n+\n+# force no sibling call optimization on s-memory.o to avoid turning the\n+# tail recursion in Alloc into a loop that confuses branch prediction.\n+\n+s-memory.o  : s-memory.adb s-memory.ads\n+\t$(CC) -c $(ALL_ADAFLAGS) $(NO_SIBLING_ADAFLAGS) $(ADA_INCLUDES) \\\n+\t      $< $(OUTPUT_OPTION)\n+"}, {"sha": "9a52e6d8edbc22ed692c31986f7cc20bff3c205e", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0368be1a18a9ae007ed3f4ef0f2b1400c6b43f6/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0368be1a18a9ae007ed3f4ef0f2b1400c6b43f6/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=c0368be1a18a9ae007ed3f4ef0f2b1400c6b43f6", "patch": "@@ -881,60 +881,6 @@ ADA_RTL_OBJ_DIR = $(libsubdir)/adalib\n \n # Special flags\n \n-# force no sibling call optimization on s-traceb.o so the number of stack\n-# frames to be skipped when computing a call chain is not modified by\n-# optimization. We don't want inlining, either.\n-\n-s-traceb.o  : s-traceb.adb s-traceb.ads\n-\t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) $(NO_INLINE_ADAFLAGS) \\\n-\t      $(NO_SIBLING_ADAFLAGS) $(ADA_INCLUDES) $< $(OUTPUT_OPTION)\n-\n-# compile s-tasdeb.o without optimization and with debug info so that it is\n-# always possible to set conditional breakpoints on tasks.\n-\n-s-tasdeb.o  : s-tasdeb.adb s-tasdeb.ads\n-\t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) -O0 $(ADA_INCLUDES) \\\n-\t      $< $(OUTPUT_OPTION)\n-\n-# force no function reordering on a-except.o because of the exclusion bounds\n-# mechanism (see the source file for more detailed information).\n-# force debugging information on a-except.o so that it is always\n-# possible to set conditional breakpoints on exceptions.\n-# use -O1 otherwise gdb isn't able to get a full backtrace on mips targets.\n-\n-a-except.o  : a-except.adb a-except.ads\n-\t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) $(NO_INLINE_ADAFLAGS) \\\n-\t      $(NO_REORDER_ADAFLAGS) -O1 $(ADA_INCLUDES) $< $(OUTPUT_OPTION)\n-\n-# compile s-excdeb.o without optimization and with debug info to let the\n-# debugger set breakpoints and inspect subprogram parameters on exception\n-# related events.\n-\n-s-excdeb.o  : s-excdeb.adb s-excdeb.ads s-except.ads\n-\t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) -O0 $(ADA_INCLUDES) \\\n-\t      $< $(OUTPUT_OPTION)\n-\n-# force debugging information on s-assert.o so that it is always\n-# possible to set breakpoint on assert failures.\n-\n-s-assert.o  : s-assert.adb s-assert.ads\n-\t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) $(ADA_INCLUDES) \\\n-\t      $< $(OUTPUT_OPTION)\n-\n-# force debugging information on a-tags.o so that the debugger can find\n-# the description of Ada.Tags.Type_Specific_Data.\n-\n-a-tags.o  : a-tags.adb a-tags.ads\n-\t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) $(ADA_INCLUDES) \\\n-\t      $< $(OUTPUT_OPTION)\n-\n-# force no sibling call optimization on s-memory.o to avoid turning the\n-# tail recursion in Alloc into a loop that confuses branch prediction.\n-\n-s-memory.o  : s-memory.adb s-memory.ads\n-\t$(CC) -c $(ALL_ADAFLAGS) $(NO_SIBLING_ADAFLAGS) $(ADA_INCLUDES) \\\n-\t      $< $(OUTPUT_OPTION)\n-\n # need to keep the frame pointer in tracebak.o to pop the stack properly on\n # some targets.\n "}]}