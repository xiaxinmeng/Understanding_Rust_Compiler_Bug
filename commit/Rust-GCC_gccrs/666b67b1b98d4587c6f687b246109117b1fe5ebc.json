{"sha": "666b67b1b98d4587c6f687b246109117b1fe5ebc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY2YjY3YjFiOThkNDU4N2M2ZjY4N2IyNDYxMDkxMTdiMWZlNWViYw==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-12-15T19:30:08Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-12-15T19:30:08Z"}, "message": "avr-protos.h (print_operand): Remove.\n\n\t* config/avr/avr-protos.h (print_operand): Remove.\n\t(print_operand_address): Remove.\n\t* config/avr/avr.h (PRINT_OPERAND): Remove.\n\t(PRINT_OPERAND_ADDRESS): Remove.\n\t(PRINT_OPERAND_PUNCT_VALID_P): Remove.\n\t* config/avr/avr.c (TARGET_PRINT_OPERAND): New hook define.\n\t(TARGET_PRINT_OPERAND_ADDRESS): New hook define.\n\t(TARGET_PRINT_OPERAND_PUNCT_VALID_P): New hook define.\n\t(print_operand_address): Rename to...\n\t(avr_print_operand_address): ...this and make static.\n\t(print_operand): Rename to...\n\t(avr_print_operand): ...this and make static.\n\t(avr_print_operand_punct_valid_p): New static function.\n\nFrom-SVN: r182386", "tree": {"sha": "1cc265052379354348cff421af470f833a61fe88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cc265052379354348cff421af470f833a61fe88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/666b67b1b98d4587c6f687b246109117b1fe5ebc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/666b67b1b98d4587c6f687b246109117b1fe5ebc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/666b67b1b98d4587c6f687b246109117b1fe5ebc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/666b67b1b98d4587c6f687b246109117b1fe5ebc/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "faf81b1a183e3a29f6360e52b622fe0d5717b09b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faf81b1a183e3a29f6360e52b622fe0d5717b09b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faf81b1a183e3a29f6360e52b622fe0d5717b09b"}], "stats": {"total": 67, "additions": 47, "deletions": 20}, "files": [{"sha": "a2b238beb8c80e6072eb0e9808225517575fb36b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666b67b1b98d4587c6f687b246109117b1fe5ebc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666b67b1b98d4587c6f687b246109117b1fe5ebc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=666b67b1b98d4587c6f687b246109117b1fe5ebc", "patch": "@@ -1,3 +1,19 @@\n+2011-12-15  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/avr-protos.h (print_operand): Remove.\n+\t(print_operand_address): Remove.\n+\t* config/avr/avr.h (PRINT_OPERAND): Remove.\n+\t(PRINT_OPERAND_ADDRESS): Remove.\n+\t(PRINT_OPERAND_PUNCT_VALID_P): Remove.\n+\t* config/avr/avr.c (TARGET_PRINT_OPERAND): New hook define.\n+\t(TARGET_PRINT_OPERAND_ADDRESS): New hook define.\n+\t(TARGET_PRINT_OPERAND_PUNCT_VALID_P): New hook define.\n+\t(print_operand_address): Rename to...\n+\t(avr_print_operand_address): ...this and make static.\n+\t(print_operand): Rename to...\n+\t(avr_print_operand): ...this and make static.\n+\t(avr_print_operand_punct_valid_p): New static function.\n+\n 2011-12-15  Andreas Tobler  <andreast@fgznet.ch>\n \n \t* config/i386/freebsd.h (TARGET_ASM_FILE_END): Define."}, {"sha": "123045181c9e40835af10cdf7e3638bd42229957", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666b67b1b98d4587c6f687b246109117b1fe5ebc/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666b67b1b98d4587c6f687b246109117b1fe5ebc/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=666b67b1b98d4587c6f687b246109117b1fe5ebc", "patch": "@@ -101,8 +101,6 @@ extern const char* output_reload_inhi (rtx*, rtx, int*);\n extern const char* output_reload_insisf (rtx*, rtx, int*);\n extern const char* avr_out_reload_inpsi (rtx*, rtx, int*);\n extern void notice_update_cc (rtx body, rtx insn);\n-extern void print_operand (FILE *file, rtx x, int code);\n-extern void print_operand_address (FILE *file, rtx addr);\n extern int reg_unused_after (rtx insn, rtx reg);\n extern int _reg_unused_after (rtx insn, rtx reg);\n extern int avr_jump_mode (rtx x, rtx insn);"}, {"sha": "2493638aaec05cf2251c7030bd3c86fcb2364223", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666b67b1b98d4587c6f687b246109117b1fe5ebc/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666b67b1b98d4587c6f687b246109117b1fe5ebc/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=666b67b1b98d4587c6f687b246109117b1fe5ebc", "patch": "@@ -289,6 +289,13 @@ bool avr_need_copy_data_p = false;\n #undef TARGET_ADDR_SPACE_LEGITIMIZE_ADDRESS\n #define TARGET_ADDR_SPACE_LEGITIMIZE_ADDRESS avr_addr_space_legitimize_address\n \n+#undef  TARGET_PRINT_OPERAND\n+#define TARGET_PRINT_OPERAND avr_print_operand\n+#undef  TARGET_PRINT_OPERAND_ADDRESS\n+#define TARGET_PRINT_OPERAND_ADDRESS avr_print_operand_address\n+#undef  TARGET_PRINT_OPERAND_PUNCT_VALID_P\n+#define TARGET_PRINT_OPERAND_PUNCT_VALID_P avr_print_operand_punct_valid_p\n+\n \f\n \n /* Custom function to replace string prefix.\n@@ -1733,10 +1740,12 @@ cond_string (enum rtx_code code)\n   return \"\";\n }\n \n+\n+/* Implement `TARGET_PRINT_OPERAND_ADDRESS'.  */\n /* Output ADDR to FILE as address.  */\n \n-void\n-print_operand_address (FILE *file, rtx addr)\n+static void\n+avr_print_operand_address (FILE *file, rtx addr)\n {\n   switch (GET_CODE (addr))\n     {\n@@ -1791,11 +1800,21 @@ print_operand_address (FILE *file, rtx addr)\n }\n \n \n+/* Implement `TARGET_PRINT_OPERAND_PUNCT_VALID_P'.  */\n+\n+static bool\n+avr_print_operand_punct_valid_p (unsigned char code)\n+{\n+  return code == '~' || code == '!';\n+}\n+\n+\n+/* Implement `TARGET_PRINT_OPERAND'.  */\n /* Output X as assembler operand to file FILE.\n    For a description of supported %-codes, see top of avr.md.  */\n \n-void\n-print_operand (FILE *file, rtx x, int code)\n+static void\n+avr_print_operand (FILE *file, rtx x, int code)\n {\n   int abcd = 0;\n \n@@ -1889,36 +1908,36 @@ print_operand (FILE *file, rtx x, int code)\n \t}\n       else if (code == 'i')\n         {\n-          print_operand (file, addr, 'i');\n+          avr_print_operand (file, addr, 'i');\n         }\n       else if (code == 'o')\n \t{\n \t  if (GET_CODE (addr) != PLUS)\n \t    fatal_insn (\"bad address, not (reg+disp):\", addr);\n \n-\t  print_operand (file, XEXP (addr, 1), 0);\n+\t  avr_print_operand (file, XEXP (addr, 1), 0);\n \t}\n       else if (code == 'p' || code == 'r')\n         {\n           if (GET_CODE (addr) != POST_INC && GET_CODE (addr) != PRE_DEC)\n             fatal_insn (\"bad address, not post_inc or pre_dec:\", addr);\n           \n           if (code == 'p')\n-            print_operand_address (file, XEXP (addr, 0));  /* X, Y, Z */\n+            avr_print_operand_address (file, XEXP (addr, 0));  /* X, Y, Z */\n           else\n-            print_operand (file, XEXP (addr, 0), 0);  /* r26, r28, r30 */\n+            avr_print_operand (file, XEXP (addr, 0), 0);  /* r26, r28, r30 */\n         }\n       else if (GET_CODE (addr) == PLUS)\n \t{\n-\t  print_operand_address (file, XEXP (addr,0));\n+\t  avr_print_operand_address (file, XEXP (addr,0));\n \t  if (REGNO (XEXP (addr, 0)) == REG_X)\n \t    fatal_insn (\"internal compiler error.  Bad address:\"\n \t\t\t,addr);\n \t  fputc ('+', file);\n-\t  print_operand (file, XEXP (addr,1), code);\n+\t  avr_print_operand (file, XEXP (addr,1), code);\n \t}\n       else\n-\tprint_operand_address (file, addr);\n+\tavr_print_operand_address (file, addr);\n     }\n   else if (code == 'i')\n     {\n@@ -1954,7 +1973,7 @@ print_operand (FILE *file, rtx x, int code)\n   else if (code == 'k')\n     fputs (cond_string (reverse_condition (GET_CODE (x))), file);\n   else\n-    print_operand_address (file, x);\n+    avr_print_operand_address (file, x);\n }\n \n /* Update the condition code in the INSN.  */"}, {"sha": "33017ba74bd25a9b88e5e2e39d8e2600f3b152c7", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666b67b1b98d4587c6f687b246109117b1fe5ebc/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666b67b1b98d4587c6f687b246109117b1fe5ebc/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=666b67b1b98d4587c6f687b246109117b1fe5ebc", "patch": "@@ -497,12 +497,6 @@ typedef struct avr_args {\n \n #define FINAL_PRESCAN_INSN(insn, operand, nop) final_prescan_insn (insn, operand,nop)\n \n-#define PRINT_OPERAND(STREAM, X, CODE) print_operand (STREAM, X, CODE)\n-\n-#define PRINT_OPERAND_PUNCT_VALID_P(CODE) ((CODE) == '~' || (CODE) == '!')\n-\n-#define PRINT_OPERAND_ADDRESS(STREAM, X) print_operand_address(STREAM, X)\n-\n #define ASM_OUTPUT_REG_PUSH(STREAM, REGNO)\t\\\n {\t\t\t\t\t\t\\\n   gcc_assert (REGNO < 32);\t\t\t\\"}]}