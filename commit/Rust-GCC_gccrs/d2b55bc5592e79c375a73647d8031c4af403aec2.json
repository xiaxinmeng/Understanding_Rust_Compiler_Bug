{"sha": "d2b55bc5592e79c375a73647d8031c4af403aec2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJiNTViYzU1OTJlNzljMzc1YTczNjQ3ZDgwMzFjNGFmNDAzYWVjMg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2004-12-21T01:01:08Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2004-12-21T01:01:08Z"}, "message": "jar.exp (gcj_jar_interpret): Updated.\n\n\t* testsuite/libjava.jar/jar.exp (gcj_jar_interpret): Updated.\n\t* testsuite/libjava.verify/verify.exp (gcj_verify_run): Updated.\n\t* testsuite/libjava.jni/jni.exp (gcj_jni_test_one): Updated.\n\t* testsuite/lib/libjava.exp (libjava_find_spec): Don't use\n\tget_multilibs.\n\t(libjava_find_gij): Likewise.  Changed return result if gij not\n\tfound.\n\t(test_libjava_from_javac): Updated.\n\nFrom-SVN: r92446", "tree": {"sha": "920eb8f33e0b95a1a95c23cc88d9a8c8c2d866aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/920eb8f33e0b95a1a95c23cc88d9a8c8c2d866aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2b55bc5592e79c375a73647d8031c4af403aec2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2b55bc5592e79c375a73647d8031c4af403aec2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2b55bc5592e79c375a73647d8031c4af403aec2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2b55bc5592e79c375a73647d8031c4af403aec2/comments", "author": null, "committer": null, "parents": [{"sha": "90d8362105e5fcdbb0e8da463f3315c344e8d2b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90d8362105e5fcdbb0e8da463f3315c344e8d2b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90d8362105e5fcdbb0e8da463f3315c344e8d2b3"}], "stats": {"total": 53, "additions": 26, "deletions": 27}, "files": [{"sha": "48a36b6c56ef145984422007b9b416fba0d15047", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2b55bc5592e79c375a73647d8031c4af403aec2/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2b55bc5592e79c375a73647d8031c4af403aec2/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=d2b55bc5592e79c375a73647d8031c4af403aec2", "patch": "@@ -1,5 +1,14 @@\n 2004-12-20  Tom Tromey  <tromey@redhat.com>\n \n+\t* testsuite/libjava.jar/jar.exp (gcj_jar_interpret): Updated.\n+\t* testsuite/libjava.verify/verify.exp (gcj_verify_run): Updated.\n+\t* testsuite/libjava.jni/jni.exp (gcj_jni_test_one): Updated.\n+\t* testsuite/lib/libjava.exp (libjava_find_spec): Don't use\n+\tget_multilibs.\n+\t(libjava_find_gij): Likewise.  Changed return result if gij not\n+\tfound.\n+\t(test_libjava_from_javac): Updated.\n+\n \tPR java/15001\n \t* testsuite/libjava.jni/iface.c: New file.\n \t* testsuite/libjava.jni/iface.out: New file."}, {"sha": "71fffc53860df5767d4a1d5ded208c258778c61e", "filename": "libjava/testsuite/lib/libjava.exp", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2b55bc5592e79c375a73647d8031c4af403aec2/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2b55bc5592e79c375a73647d8031c4af403aec2/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flib%2Flibjava.exp?ref=d2b55bc5592e79c375a73647d8031c4af403aec2", "patch": "@@ -270,28 +270,17 @@ proc libjava_find_lib {dir name} {\n # is used with -B.\n proc libjava_find_spec {} {\n     global objdir\n-    set gp [get_multilibs]\n-\n-    if {[file exists $gp/libjava/libgcj.spec]} then {\n-\treturn \"$gp/libjava/\"\n-    }\n     return \"$objdir/../\"\n }\n \n-# Find `gij'.\n+# Find `gij'.  Return empty string if not found.\n proc libjava_find_gij {} {\n-    global base_dir\n-    set gp [get_multilibs]\n-    if {$gp != \"\"} {\n-\tset file $gp/libjava/gij\n-    } else {\n-\tset file $base_dir/../gij\n-    }\n+    global base_dir objdir\n \n-    if {[file exists $file]} {\n-\treturn $file\n+    if {! [file exists $objdir/../gij]} {\n+\treturn \"\"\n     }\n-    return gij\n+    return $objdir/../gij\n }\n \n # Remove a bunch of files.\n@@ -814,9 +803,9 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n     # We purposely ignore errors here; we still want to run the other\n     # appropriate tests.\n     set gij [libjava_find_gij]\n-    # libjava_find_gij will return `gij' if it couldn't find the\n+    # libjava_find_gij will return \"\" if it couldn't find the\n     # program; in this case we want to skip the test.\n-    if {$INTERPRETER == \"yes\" && $gij != \"gij\"} {\n+    if {$INTERPRETER == \"yes\" && $gij != \"\"} {\n \tlibjava_invoke $errname \"gij test\" opts $gij \\\n \t  $inpfile $resultfile \"\" $main_name\n     }"}, {"sha": "65565832e79a4764b009042d8cebfcc2916fd349", "filename": "libjava/testsuite/libjava.jar/jar.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2b55bc5592e79c375a73647d8031c4af403aec2/libjava%2Ftestsuite%2Flibjava.jar%2Fjar.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2b55bc5592e79c375a73647d8031c4af403aec2/libjava%2Ftestsuite%2Flibjava.jar%2Fjar.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jar%2Fjar.exp?ref=d2b55bc5592e79c375a73647d8031c4af403aec2", "patch": "@@ -20,9 +20,9 @@ proc gcj_jar_interpret {jarfile} {\n   global INTERPRETER srcdir\n \n   set gij [libjava_find_gij]\n-  # libjava_find_gij will return `gij' if it couldn't find the\n+  # libjava_find_gij will return \"\" if it couldn't find the\n   # program; in this case we want to skip the test.\n-  if {$INTERPRETER != \"yes\" || $gij == \"gij\"} {\n+  if {$INTERPRETER != \"yes\" || $gij == \"\"} {\n     untested \"$jarfile execution - gij test\"\n     untested \"$jarfile output - gij test\"\n     return"}, {"sha": "cbd90ca28cb7a47659d8653d7cf030045bbaac28", "filename": "libjava/testsuite/libjava.jni/jni.exp", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2b55bc5592e79c375a73647d8031c4af403aec2/libjava%2Ftestsuite%2Flibjava.jni%2Fjni.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2b55bc5592e79c375a73647d8031c4af403aec2/libjava%2Ftestsuite%2Flibjava.jni%2Fjni.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jni%2Fjni.exp?ref=d2b55bc5592e79c375a73647d8031c4af403aec2", "patch": "@@ -165,17 +165,18 @@ proc gcj_jni_test_one {file} {\n   # appropriate tests.\n   set errname [file rootname [file tail $file]]\n   set gij [libjava_find_gij]\n-  # libjava_find_gij will return `gij' if it couldn't find the\n+  # libjava_find_gij will return \"\" if it couldn't find the\n   # program; in this case we want to skip the test.\n   # If the libraries are not installed yet, we have to pass them via\n   # cxxldlibflags to libjava_invoke.\n-    if {$INTERPRETER == \"yes\" && $gij != \"gij\"} {\n-\tlibjava_invoke $errname \"gij test\" opts $gij \\\n-\t    \"\" $resultfile $cxxldlibflags $main\n+  if {$INTERPRETER == \"yes\" && $gij != \"\"} {\n+    libjava_invoke $errname \"gij test\" opts $gij \\\n+      \"\" $resultfile $cxxldlibflags $main\n   }\n \n   # When we succeed we remove all our clutter.\n-  eval gcj_cleanup [glob -nocomplain -- ${main}.*] [list $main lib${main}.${so_extension}]\n+  eval gcj_cleanup [glob -nocomplain -- ${main}.*] \\\n+    [list $main lib${main}.${so_extension}]\n \n   return 1\n }"}, {"sha": "4abdc18acff3d9e72879c61c99185e4a268bf9c4", "filename": "libjava/testsuite/libjava.verify/verify.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2b55bc5592e79c375a73647d8031c4af403aec2/libjava%2Ftestsuite%2Flibjava.verify%2Fverify.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2b55bc5592e79c375a73647d8031c4af403aec2/libjava%2Ftestsuite%2Flibjava.verify%2Fverify.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.verify%2Fverify.exp?ref=d2b55bc5592e79c375a73647d8031c4af403aec2", "patch": "@@ -61,9 +61,9 @@ proc gcj_verify_run {} {\n \n   set gij [libjava_find_gij] \n   set interpret 1\n-  # libjava_find_gij will return `gij' if it couldn't find the\n+  # libjava_find_gij will return \"\" if it couldn't find the\n   # program; in this case we want to skip the test.\n-  if {$INTERPRETER != \"yes\" || $gij == \"gij\"} {\n+  if {$INTERPRETER != \"yes\" || $gij == \"\"} {\n     set interpret 0\n   }\n "}]}