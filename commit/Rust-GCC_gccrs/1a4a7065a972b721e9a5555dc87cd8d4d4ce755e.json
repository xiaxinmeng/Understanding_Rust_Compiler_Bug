{"sha": "1a4a7065a972b721e9a5555dc87cd8d4d4ce755e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE0YTcwNjVhOTcyYjcyMWU5YTU1NTVkYzg3Y2Q4ZDRkNGNlNzU1ZQ==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@apple.com", "date": "2004-03-06T00:26:42Z"}, "committer": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2004-03-06T00:26:42Z"}, "message": "objc-act.c (synth_module_prologue): Const-qualify objc_selector type if using the GNU runtime...\n\n[gcc/ChangeLog]\n2004-03-05  Ziemowit Laski  <zlaski@apple.com>\n\n        * objc/objc-act.c (synth_module_prologue): Const-qualify\n        objc_selector type if using the GNU runtime; fix generated\n        signatures for objc_msg_lookup and objc_msg_lookup_super\n        to match what GNU ObjC headers provide; reformat and clean up.\n        (synth_self_and_ucmd_args): Use previously constructed (and\n        hence possibly const-qualified) objc_selector type.\n\nFrom-SVN: r79004", "tree": {"sha": "ff73b7fc6878ffdc02820b5d57cdf40321b0b64c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff73b7fc6878ffdc02820b5d57cdf40321b0b64c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a4a7065a972b721e9a5555dc87cd8d4d4ce755e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a4a7065a972b721e9a5555dc87cd8d4d4ce755e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a4a7065a972b721e9a5555dc87cd8d4d4ce755e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a4a7065a972b721e9a5555dc87cd8d4d4ce755e/comments", "author": null, "committer": null, "parents": [{"sha": "ddb3d624da6d00974ae74afe5d99a02165418b9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddb3d624da6d00974ae74afe5d99a02165418b9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddb3d624da6d00974ae74afe5d99a02165418b9f"}], "stats": {"total": 166, "additions": 78, "deletions": 88}, "files": [{"sha": "9200bbd2c8cd63a77ee39ff0397caac18808c0e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a4a7065a972b721e9a5555dc87cd8d4d4ce755e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a4a7065a972b721e9a5555dc87cd8d4d4ce755e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a4a7065a972b721e9a5555dc87cd8d4d4ce755e", "patch": "@@ -1,3 +1,12 @@\n+2004-03-05  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* objc/objc-act.c (synth_module_prologue): Const-qualify\n+\tobjc_selector type if using the GNU runtime; fix generated\n+\tsignatures for objc_msg_lookup and objc_msg_lookup_super\n+\tto match what GNU ObjC headers provide; reformat and clean up.\n+\t(synth_self_and_ucmd_args): Use previously constructed (and\n+\thence possibly const-qualified) objc_selector type.\n+\n 2004-03-05  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* doc/tm.texi (HARD_REGNO_RENAME_OK): Document."}, {"sha": "1d76cc4d98959392f8019c4eed4f4116fbf59bdd", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 69, "deletions": 88, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a4a7065a972b721e9a5555dc87cd8d4d4ce755e/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a4a7065a972b721e9a5555dc87cd8d4d4ce755e/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=1a4a7065a972b721e9a5555dc87cd8d4d4ce755e", "patch": "@@ -1159,117 +1159,100 @@ synth_module_prologue (void)\n \n   /* Declare type of selector-objects that represent an operation name.  */\n \n-  /* `struct objc_selector *' */\n-  selector_type\n-    = build_pointer_type (xref_tag (RECORD_TYPE,\n-\t\t\t\t    get_identifier (TAG_SELECTOR)));\n+  if (flag_next_runtime)\n+    /* `struct objc_selector *' */\n+    selector_type\n+      = build_pointer_type (xref_tag (RECORD_TYPE,\n+\t\t\t\t      get_identifier (TAG_SELECTOR)));\n+  else\n+    /* `const struct objc_selector *' */\n+    selector_type\n+      = build_pointer_type\n+\t(build_qualified_type (xref_tag (RECORD_TYPE,\n+\t\t\t\t\t get_identifier (TAG_SELECTOR)),\n+\t\t\t       TYPE_QUAL_CONST));\n \n-  /* Forward declare type, or else the prototype for msgSendSuper will\n-     complain.  */\n+  /* Declare receiver type used for dispatching messages to 'super'.  */\n \n   /* `struct objc_super *' */\n   super_type = build_pointer_type (xref_tag (RECORD_TYPE,\n \t\t\t\t\t  get_identifier (TAG_SUPER)));\n \n-\n-  /* id objc_msgSend (id, SEL, ...); */\n-\n-  temp_type\n-    = build_function_type (id_type,\n-\t\t\t   tree_cons (NULL_TREE, id_type,\n-\t\t\t\t      tree_cons (NULL_TREE, selector_type,\n-\t\t\t\t\t\t NULL_TREE)));\n-\n-  if (! flag_next_runtime)\n+  if (flag_next_runtime)\n     {\n-      umsg_decl = build_decl (FUNCTION_DECL,\n-\t\t\t      get_identifier (TAG_MSGSEND), temp_type);\n-      DECL_EXTERNAL (umsg_decl) = 1;\n-      TREE_PUBLIC (umsg_decl) = 1;\n-      DECL_INLINE (umsg_decl) = 1;\n-      DECL_ARTIFICIAL (umsg_decl) = 1;\n+      /* NB: In order to call one of the ..._stret (struct-returning)\n+      functions, the function *MUST* first be cast to a signature that\n+      corresponds to the actual ObjC method being invoked.  This is\n+      what is done by the build_objc_method_call() routine below.  */\n \n-      make_decl_rtl (umsg_decl, NULL);\n-      pushdecl (umsg_decl);\n-    }\n-  else\n-    {\n+      /* id objc_msgSend (id, SEL, ...); */\n+      /* id objc_msgSendNonNil (id, SEL, ...); */\n+      /* id objc_msgSend_stret (id, SEL, ...); */\n+      /* id objc_msgSendNonNil_stret (id, SEL, ...); */\n+      temp_type\n+\t= build_function_type (id_type,\n+\t\t\t       tree_cons (NULL_TREE, id_type,\n+\t\t\t\t\t  tree_cons (NULL_TREE, selector_type,\n+\t\t\t\t\t\t     NULL_TREE)));\n       umsg_decl = builtin_function (TAG_MSGSEND,\n \t\t\t\t    temp_type, 0, NOT_BUILT_IN,\n \t\t\t\t    NULL, NULL_TREE);\n-      /* id objc_msgSendNonNil (id, SEL, ...); */\n       umsg_nonnil_decl = builtin_function (TAG_MSGSEND_NONNIL,\n \t\t\t\t\t   temp_type, 0, NOT_BUILT_IN,\n \t\t\t\t\t   NULL, NULL_TREE);\n-    }\n-\n-  /* id objc_msgSendSuper (struct objc_super *, SEL, ...); */\n-\n-  temp_type\n-    = build_function_type (id_type,\n-\t\t\t   tree_cons (NULL_TREE, super_type,\n-\t\t\t\t      tree_cons (NULL_TREE, selector_type,\n-\t\t\t\t\t\t NULL_TREE)));\n-\n-  umsg_super_decl = builtin_function (TAG_MSGSENDSUPER,\n-\t\t\t\t      temp_type, 0, NOT_BUILT_IN,\n-\t\t\t\t      NULL, NULL_TREE);\n-\n-  /* The NeXT runtime defines the following additional entry points,\n-     used for dispatching calls to methods returning structs:\n-\n-     #if defined(__cplusplus)\n-       id objc_msgSend_stret(id self, SEL op, ...);\n-       id objc_msgSendSuper_stret(struct objc_super *super, SEL op, ...);\n-     #else\n-       void objc_msgSend_stret(void * stretAddr, id self, SEL op, ...);\n-       void objc_msgSendSuper_stret(void * stretAddr, struct objc_super *super,\n-\t\t\t\t    SEL op, ...);\n-     #endif\n-\n-     struct objc_return_struct objc_msgSendNonNil_stret(id self, SEL op, ...);\n-\n-     These prototypes appear in <objc/objc-runtime.h>; however, they\n-     CANNOT BE USED DIRECTLY.  In order to call one of the ..._stret\n-     functions, the function must first be cast to a signature that\n-     corresponds to the actual ObjC method being invoked.  This is\n-     what is done by the build_objc_method_call() routine below.  */\n-\n-  if (flag_next_runtime)\n-    {\n-      tree objc_return_struct_type\n-\t= xref_tag (RECORD_TYPE,\n-\t\t    get_identifier (TAG_RETURN_STRUCT));\n-\n-      tree stret_temp_type\n-\t= build_function_type (id_type,\n-\t\t\t       tree_cons (NULL_TREE, id_type,\n-\t\t\t\t\t  tree_cons (NULL_TREE, selector_type,\n-\t\t\t\t\t\t     NULL_TREE)));\n-\n       umsg_stret_decl = builtin_function (TAG_MSGSEND_STRET,\n-\t\t\t\t\t  stret_temp_type, 0, NOT_BUILT_IN,\n+\t\t\t\t\t  temp_type, 0, NOT_BUILT_IN,\n \t\t\t\t\t  NULL, NULL_TREE);\n-      stret_temp_type\n-\t= build_function_type (objc_return_struct_type,\n-\t\t\t       tree_cons (NULL_TREE, id_type,\n-\t\t\t\t\t  tree_cons (NULL_TREE, selector_type,\n-\t\t\t\t\t\t     NULL_TREE)));\n-\n       umsg_nonnil_stret_decl = builtin_function (TAG_MSGSEND_NONNIL_STRET,\n-\t\t\t\t\t\t stret_temp_type, 0, NOT_BUILT_IN,\n+\t\t\t\t\t\t temp_type, 0, NOT_BUILT_IN,\n \t\t\t\t\t\t NULL, NULL_TREE);\n \n-      stret_temp_type\n+      /* id objc_msgSendSuper (struct objc_super *, SEL, ...); */\n+      /* id objc_msgSendSuper_stret (struct objc_super *, SEL, ...); */\n+      temp_type\n \t= build_function_type (id_type,\n \t\t\t       tree_cons (NULL_TREE, super_type,\n \t\t\t\t\t  tree_cons (NULL_TREE, selector_type,\n \t\t\t\t\t\t     NULL_TREE)));\n-\n+      umsg_super_decl = builtin_function (TAG_MSGSENDSUPER,\n+\t\t\t\t\t  temp_type, 0, NOT_BUILT_IN,\n+\t\t\t\t\t  NULL, NULL_TREE);\n       umsg_super_stret_decl = builtin_function (TAG_MSGSENDSUPER_STRET,\n-\t\t\t\t\t\tstret_temp_type, 0, NOT_BUILT_IN, 0,\n+\t\t\t\t\t\ttemp_type, 0, NOT_BUILT_IN, 0,\n \t\t\t\t\t\tNULL_TREE);\n     }\n+  else\n+    {\n+      /* GNU runtime messenger entry points.  */\n+\n+      /* typedef id (*IMP)(id, SEL, ...); */\n+      tree IMP_type\n+\t= build_pointer_type\n+\t  (build_function_type (id_type,      \n+\t\t\t\ttree_cons (NULL_TREE, id_type,      \n+\t\t\t\t\t   tree_cons (NULL_TREE, selector_type,      \n+\t\t\t\t\t\t      NULL_TREE))));      \n+\n+      /* IMP objc_msg_lookup (id, SEL); */\n+      temp_type\n+        = build_function_type (IMP_type,\n+                               tree_cons (NULL_TREE, id_type,\n+                                          tree_cons (NULL_TREE, selector_type,\n+                                                     OBJC_VOID_AT_END)));\n+      umsg_decl = builtin_function (TAG_MSGSEND,\n+\t\t\t\t    temp_type, 0, NOT_BUILT_IN,\n+\t\t\t\t    NULL, NULL_TREE);\n+\n+      /* IMP objc_msg_lookup_super (struct objc_super *, SEL); */\n+      temp_type\n+        = build_function_type (IMP_type,\n+                               tree_cons (NULL_TREE, super_type,\n+                                          tree_cons (NULL_TREE, selector_type,\n+                                                     OBJC_VOID_AT_END)));\n+      umsg_super_decl = builtin_function (TAG_MSGSENDSUPER,\n+\t\t\t\t\t  temp_type, 0, NOT_BUILT_IN,\n+\t\t\t\t\t  NULL, NULL_TREE);\n+    }\n \n   /* id objc_getClass (const char *); */\n \n@@ -7538,9 +7521,7 @@ synth_self_and_ucmd_args (void)\n \t\t\t\t    build1 (INDIRECT_REF, NULL_TREE, self_id)),\n \t\t   unused_list));\n \n-  decl_specs = build_tree_list (NULL_TREE,\n-\t\t\t\txref_tag (RECORD_TYPE,\n-\t\t\t\t\t  get_identifier (TAG_SELECTOR)));\n+  decl_specs = build_tree_list (NULL_TREE, TREE_TYPE (selector_type));\n   push_parm_decl (build_tree_list\n \t\t  (build_tree_list (decl_specs,\n \t\t\t\t    build1 (INDIRECT_REF, NULL_TREE, ucmd_id)),"}]}