{"sha": "ebbe3f29518854c36574adbd4fa82fd56fa64056", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJiZTNmMjk1MTg4NTRjMzY1NzRhZGJkNGZhODJmZDU2ZmE2NDA1Ng==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-30T12:39:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-30T13:29:57Z"}, "message": "tree-optimization/98064 - fix BB SLP live lane extract wrt LC SSA\n\nThis avoids breaking LC SSA when SLP codegen pulled an out-of-loop\ndef into a loop when merging with in-loop defs for an external def.\n\n2020-11-30  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/98064\n\t* tree-vect-loop.c (vectorizable_live_operation): Avoid\n\tbreaking LC SSA for BB vectorization.\n\n\t* g++.dg/vect/pr98064.cc: New testcase.", "tree": {"sha": "94cf39775563bbeaf504bf34ca9b268a08450dd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94cf39775563bbeaf504bf34ca9b268a08450dd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebbe3f29518854c36574adbd4fa82fd56fa64056", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebbe3f29518854c36574adbd4fa82fd56fa64056", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebbe3f29518854c36574adbd4fa82fd56fa64056", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebbe3f29518854c36574adbd4fa82fd56fa64056/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e5c644fb62e3e1757cf74fe8a14873d5e8ba53e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e5c644fb62e3e1757cf74fe8a14873d5e8ba53e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e5c644fb62e3e1757cf74fe8a14873d5e8ba53e"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "74043ce77250f5989bd5021dbc26bc731b6d3322", "filename": "gcc/testsuite/g++.dg/vect/pr98064.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebbe3f29518854c36574adbd4fa82fd56fa64056/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr98064.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebbe3f29518854c36574adbd4fa82fd56fa64056/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr98064.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr98064.cc?ref=ebbe3f29518854c36574adbd4fa82fd56fa64056", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do compile }\n+// { dg-additional-options \"-O3\" }\n+\n+const long long &min(const long long &__a, long long &__b) {\n+  if (__b < __a)\n+    return __b;\n+  return __a;\n+}\n+extern long var_2;\n+extern int var_3, var_8;\n+extern long long var_5;\n+extern unsigned short arr_353[];\n+extern short arr_362[];\n+extern int arr_518[];\n+void test() {\n+    for (char d = 0; d < 013; d += 4) {\n+        for (char e = 0; e < 11; e++)\n+            arr_353[e] = var_2 | min((long long)7, var_5);\n+        for (int f = var_5; f; f += 4)\n+            for (short g = var_8; g; g++)\n+                arr_362[g] = 0;\n+    }\n+    for (short h = 5; (short)var_2; h += 5)\n+        arr_518[h] = 0;\n+}"}, {"sha": "c8b4dc3a0c30ac20e6e0926b791c47f49b2f0445", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebbe3f29518854c36574adbd4fa82fd56fa64056/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebbe3f29518854c36574adbd4fa82fd56fa64056/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=ebbe3f29518854c36574adbd4fa82fd56fa64056", "patch": "@@ -8743,6 +8743,24 @@ vectorizable_live_operation (vec_info *vinfo,\n \t\t\t\t   \"def\\n\");\n \t\tcontinue;\n \t      }\n+\t    /* ???  It can also happen that we end up pulling a def into\n+\t       a loop where replacing out-of-loop uses would require\n+\t       a new LC SSA PHI node.  Retain the original scalar in\n+\t       those cases as well.  PR98064.  */\n+\t    if (TREE_CODE (new_tree) == SSA_NAME\n+\t\t&& !SSA_NAME_IS_DEFAULT_DEF (new_tree)\n+\t\t&& (gimple_bb (use_stmt)->loop_father\n+\t\t    != gimple_bb (vec_stmt)->loop_father)\n+\t\t&& !flow_loop_nested_p (gimple_bb (vec_stmt)->loop_father,\n+\t\t\t\t\tgimple_bb (use_stmt)->loop_father))\n+\t      {\n+\t\tif (dump_enabled_p ())\n+\t\t  dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t\t   \"Using original scalar computation for \"\n+\t\t\t\t   \"live lane because there is an out-of-loop \"\n+\t\t\t\t   \"definition for it\\n\");\n+\t\tcontinue;\n+\t      }\n \t    FOR_EACH_IMM_USE_ON_STMT (use_p, imm_iter)\n \t      SET_USE (use_p, new_tree);\n \t    update_stmt (use_stmt);"}]}