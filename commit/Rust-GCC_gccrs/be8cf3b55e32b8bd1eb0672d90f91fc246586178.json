{"sha": "be8cf3b55e32b8bd1eb0672d90f91fc246586178", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU4Y2YzYjU1ZTMyYjhiZDFlYjA2NzJkOTBmOTFmYzI0NjU4NjE3OA==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-10-24T02:44:03Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-10-24T02:44:03Z"}, "message": "In gcc/cp/: 2010-10-24 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/cp/:\n2010-10-24  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        Removed Objective-C++ specific replacement of cxx_printable_name.\n        * cp-objcp-common.h: Added LANG_HOOKS_DECL_PRINTABLE_NAME, set\n        to cxx_printable_name for both C++ and Objective-C++.\n        * cp-lang.h: Removed LANG_HOOKS_DECL_PRINTABLE_NAME.\n\n        * error.c (dump_decl): For Objective-C++, call\n        objc_maybe_printable_name here ...\n        * tree.c (cxx_printable_name_internal): ... instead of here.\n        \nIn gcc/objcp/:\n2010-10-24  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * objcp-lang.c (LANG_HOOKS_DECL_PRINTABLE_NAME): Do not define.\n\nIn gcc/objc/:\n2010-10-24  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * objc-act.c (objc_build_keyword_decl): Updated comments.  Do not\n        emit a warning that method parameter attributes are unimplemented.\n        Instead, store them into DECL_ATTRIBUTES of the KEYWORD_DECL.\n        (start_method_def): Copy attributes from each KEYWORD_DECL into\n        the corresponding PARM_DECL.\n        (objc_warn_deprecated_use): Removed.\n        (build_objc_method_call): Call warn_deprecated_use, not\n        objc_warn_deprecated_use.\n        (objc_maybe_printable_name): Do not try to get the identifier name\n        of DECLs that we don't recognize.  Immediately return NULL for them.\n        (objc_printable_name): Removed C++-specific case, which is no\n        longer used.  Updated comments.\n        \nIn gcc/testsuite/:\n2010-10-24  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * objc.dg/attributes/method-attribute-2.m: Updated test.  Method\n        parameter attributes are now supported.\n        * obj-c++.dg/attributes/method-attribute-2.m: Same change.\n        * objc.dg/attributes/parameter-attribute-1.m: New test.\n        * objc.dg/attributes/parameter-attribute-2.m: New test. \n        * obj-c++.dg/attributes/parameter-attribute-1.m: New test.\n        * obj-c++.dg/attributes/parameter-attribute-2.m: New test.\n\nFrom-SVN: r165896", "tree": {"sha": "6f572fa5e31169bf082050d6386b94fe8af760ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f572fa5e31169bf082050d6386b94fe8af760ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be8cf3b55e32b8bd1eb0672d90f91fc246586178", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be8cf3b55e32b8bd1eb0672d90f91fc246586178", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be8cf3b55e32b8bd1eb0672d90f91fc246586178", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be8cf3b55e32b8bd1eb0672d90f91fc246586178/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b98058c521ec1910609e15ccb064aca07ce16ba0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b98058c521ec1910609e15ccb064aca07ce16ba0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b98058c521ec1910609e15ccb064aca07ce16ba0"}], "stats": {"total": 396, "additions": 305, "deletions": 91}, "files": [{"sha": "6145e01a774d3a20921b7f8bf254950840d0fa69", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=be8cf3b55e32b8bd1eb0672d90f91fc246586178", "patch": "@@ -1,3 +1,14 @@\n+2010-10-24  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tRemoved Objective-C++ specific replacement of cxx_printable_name.\n+\t* cp-objcp-common.h: Added LANG_HOOKS_DECL_PRINTABLE_NAME, set\n+\tto cxx_printable_name for both C++ and Objective-C++.\n+\t* cp-lang.h: Removed LANG_HOOKS_DECL_PRINTABLE_NAME.\n+\n+\t* error.c (dump_decl): For Objective-C++, call\n+\tobjc_maybe_printable_name here ...\n+\t* tree.c (cxx_printable_name_internal): ... instead of here.\n+\t\n 2010-10-23  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* tree.c (cxx_printable_name_internal): In Objective-C++, call"}, {"sha": "9665ba0e1076b88372fdfe90153bf7425572e4ce", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=be8cf3b55e32b8bd1eb0672d90f91fc246586178", "patch": "@@ -72,8 +72,6 @@ static tree cp_eh_personality (void);\n \tfunction_parameter_expanded_from_pack_p\n #undef LANG_HOOKS_GET_GENERIC_FUNCTION_DECL\n #define LANG_HOOKS_GET_GENERIC_FUNCTION_DECL get_function_template_decl\n-#undef LANG_HOOKS_DECL_PRINTABLE_NAME\n-#define LANG_HOOKS_DECL_PRINTABLE_NAME\tcxx_printable_name\n #undef LANG_HOOKS_DWARF_NAME\n #define LANG_HOOKS_DWARF_NAME cxx_dwarf_name\n #undef LANG_HOOKS_INIT_TS"}, {"sha": "38da59e0014988a4e85a261532eaf94880980b58", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=be8cf3b55e32b8bd1eb0672d90f91fc246586178", "patch": "@@ -69,6 +69,8 @@ extern bool cp_function_decl_explicit_p (tree decl);\n #define LANG_HOOKS_PRINT_STATISTICS cxx_print_statistics\n #undef LANG_HOOKS_PRINT_XNODE\n #define LANG_HOOKS_PRINT_XNODE cxx_print_xnode\n+#undef LANG_HOOKS_DECL_PRINTABLE_NAME\n+#define LANG_HOOKS_DECL_PRINTABLE_NAME\tcxx_printable_name\n #undef LANG_HOOKS_PRINT_DECL\n #define LANG_HOOKS_PRINT_DECL cxx_print_decl\n #undef LANG_HOOKS_PRINT_TYPE"}, {"sha": "588cbe8e794eaae4b7aa5c19a348c72f87a4b5ba", "filename": "gcc/cp/error.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=be8cf3b55e32b8bd1eb0672d90f91fc246586178", "patch": "@@ -896,6 +896,18 @@ dump_decl (tree t, int flags)\n   if (t == NULL_TREE)\n     return;\n \n+  /* If doing Objective-C++, give Objective-C a chance to demangle\n+     Objective-C method names.  */\n+  if (c_dialect_objc ())\n+    {\n+      const char *demangled = objc_maybe_printable_name (t, flags);\n+      if (demangled)\n+\t{\n+\t  pp_string (cxx_pp, demangled);\n+\t  return;\n+\t}\n+    }\n+\n   switch (TREE_CODE (t))\n     {\n     case TYPE_DECL:"}, {"sha": "b8f76b02a1823582e0a61f95991f5ab18149f01f", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=be8cf3b55e32b8bd1eb0672d90f91fc246586178", "patch": "@@ -1409,15 +1409,6 @@ cxx_printable_name_internal (tree decl, int v, bool translate)\n   static int ring_counter;\n   int i;\n \n-  /* If doing Objective-C++, give Objective-C a chance to demangle\n-     Objective-C method names.  */\n-  if (c_dialect_objc ())\n-    {\n-      const char *demangled = objc_maybe_printable_name (decl, v);\n-      if (demangled)\n-\treturn demangled;\n-    }\n-\n   /* Only cache functions.  */\n   if (v < 2\n       || TREE_CODE (decl) != FUNCTION_DECL"}, {"sha": "9e79359eae8f596dfb772a8481e167a3ca75deba", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=be8cf3b55e32b8bd1eb0672d90f91fc246586178", "patch": "@@ -1,3 +1,18 @@\n+2010-10-24  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc-act.c (objc_build_keyword_decl): Updated comments.  Do not\n+\temit a warning that method parameter attributes are unimplemented.\n+\tInstead, store them into DECL_ATTRIBUTES of the KEYWORD_DECL.\n+\t(start_method_def): Copy attributes from each KEYWORD_DECL into\n+\tthe corresponding PARM_DECL.\n+\t(objc_warn_deprecated_use): Removed.\n+\t(build_objc_method_call): Call warn_deprecated_use, not\n+\tobjc_warn_deprecated_use.\n+\t(objc_maybe_printable_name): Do not try to get the identifier name\n+\tof DECLs that we don't recognize.  Immediately return NULL for them.\n+\t(objc_printable_name): Removed C++-specific case, which is no\n+\tlonger used.  Updated comments.\n+\t\n 2010-10-23  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc-act.c (OBJC_GEN_METHOD_LABEL): Updated comments."}, {"sha": "242fe174d758c748fe76be59823d5ff4f3b202ed", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 53, "deletions": 70, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=be8cf3b55e32b8bd1eb0672d90f91fc246586178", "patch": "@@ -555,30 +555,6 @@ generate_struct_by_value_array (void)\n   exit (0);\n }\n \n-/* FIXME: We need to intercept calls to warn_deprecated_use, since that \n-   ultimately calls warning () with a \"qD\" formatter for decls.  The 'D' \n-   formatter does not handle ObjC-specific decls (in ObjC++).  For now, we\n-   interpose a switch to the  default handler which simply prints the decl\n-   identifier.  \n-   Eventually, we should handle this within the objc{,p}/ code.  */\n-\n-static void\n-objc_warn_deprecated_use (tree depitem, tree attr)\n-{\n-  if (DECL_P (depitem))\n-    {\n-      static bool (*sav_printer) (pretty_printer *, text_info *, const char *,\n-\t\t\t\t  int, bool, bool, bool) = NULL ;\n-      if (sav_printer == NULL)\n-\tsav_printer = diagnostic_format_decoder (global_dc) ;\n-      diagnostic_format_decoder (global_dc) = &default_tree_printer;\n-      warn_deprecated_use (depitem, attr);\n-      diagnostic_format_decoder (global_dc) = sav_printer;\n-    }\n-  else\n-    warn_deprecated_use (depitem, attr);\n-}\n-\n bool\n objc_init (void)\n {\n@@ -6546,36 +6522,44 @@ adjust_type_for_id_default (tree type)\n   return type;\n }\n \n-/*   Usage:\n-\t\tkeyworddecl:\n-\t\t\tselector ':' '(' typename ')' identifier\n+/* Return a KEYWORD_DECL built using the specified key_name, arg_type,\n+   arg_name and attributes. (TODO: Rename KEYWORD_DECL to\n+   OBJC_METHOD_PARM_DECL ?)\n+\n+   A KEYWORD_DECL is a tree representing the declaration of a\n+   parameter of an Objective-C method.  It is produced when parsing a\n+   fragment of Objective-C method declaration of the form\n \n-     Purpose:\n-\t\tTransform an Objective-C keyword argument into\n-\t\tthe C equivalent parameter declarator.\n+   keyworddecl:\n+     selector ':' '(' typename ')' identifier\n \n-     In:\tkey_name, an \"identifier_node\" (optional).\n-\t\targ_type, a  \"tree_list\" (optional).\n-\t\targ_name, an \"identifier_node\".\n-\t\tattributes, a optional tree containing param attributes.\n+   For example, take the Objective-C method\n \n-     Note:\tIt would be really nice to strongly type the preceding\n-\t\targuments in the function prototype; however, then I\n-\t\tcould not use the \"accessor\" macros defined in \"tree.h\".\n+   -(NSString *)pathForResource:(NSString *)resource ofType:(NSString *)type; \n \n-     Out:\tan instance of \"keyword_decl\".  */\n+   the two fragments \"pathForResource:(NSString *)resource\" and\n+   \"ofType:(NSString *)type\" will generate a KEYWORD_DECL each.  The\n+   KEYWORD_DECL stores the 'key_name' (eg, identifier for\n+   \"pathForResource\"), the 'arg_type' (eg, tree representing a\n+   NSString *), the 'arg_name' (eg identifier for \"resource\") and\n+   potentially some attributes (for example, a tree representing\n+   __attribute__ ((unused)) if such an attribute was attached to a\n+   certain parameter).  You can access this information using the\n+   TREE_TYPE (for arg_type), KEYWORD_ARG_NAME (for arg_name),\n+   KEYWORD_KEY_NAME (for key_name), DECL_ATTRIBUTES (for attributes).\n \n+   'key_name' is an identifier node (and is optional as you can omit\n+   it in Objective-C methods).\n+   'arg_type' is a tree list (and is optional too if no parameter type\n+   was specified).\n+   'arg_name' is an identifier node and is required.\n+   'attributes' is an optional tree containing parameter attributes.  */\n tree\n objc_build_keyword_decl (tree key_name, tree arg_type, \n \t\t\t tree arg_name, tree attributes)\n {\n   tree keyword_decl;\n \n-  if (attributes)\n-    warning_at (input_location, OPT_Wattributes, \n-\t\t\"method parameter attributes are not available in this \"\n-\t\t\"version of the compiler, (ignored)\");\n-\n   /* If no type is specified, default to \"id\".  */\n   arg_type = adjust_type_for_id_default (arg_type);\n \n@@ -6584,6 +6568,7 @@ objc_build_keyword_decl (tree key_name, tree arg_type,\n   TREE_TYPE (keyword_decl) = arg_type;\n   KEYWORD_ARG_NAME (keyword_decl) = arg_name;\n   KEYWORD_KEY_NAME (keyword_decl) = key_name;\n+  DECL_ATTRIBUTES (keyword_decl) = attributes;\n \n   return keyword_decl;\n }\n@@ -7278,7 +7263,7 @@ build_objc_method_call (location_t loc, int super_flag, tree method_prototype,\n   sender_cast = build_pointer_type (ftype);\n \n   if (method_prototype && TREE_DEPRECATED (method_prototype))\n-    objc_warn_deprecated_use (method_prototype, NULL_TREE);\n+    warn_deprecated_use (method_prototype, NULL_TREE);\n \n   lookup_object = build_c_cast (loc, rcv_p, lookup_object);\n \n@@ -9918,10 +9903,13 @@ start_method_def (tree method)\n   parmlist = METHOD_SEL_ARGS (method);\n   while (parmlist)\n     {\n-      tree type = TREE_VALUE (TREE_TYPE (parmlist)), parm;\n+      /* parmlist is a KEYWORD_DECL.  */\n+      tree type = TREE_VALUE (TREE_TYPE (parmlist));\n+      tree parm;\n \n       parm = build_decl (input_location,\n \t\t\t PARM_DECL, KEYWORD_ARG_NAME (parmlist), type);\n+      decl_attributes (&parm, DECL_ATTRIBUTES (parmlist), 0);\n       objc_push_parm (parm);\n       parmlist = DECL_CHAIN (parmlist);\n     }\n@@ -10083,7 +10071,6 @@ objc_start_function (tree name, tree type, tree attrs,\n #else\n   current_function_returns_value = 0;  /* Assume, until we see it does.  */\n   current_function_returns_null = 0;\n-\n   decl_attributes (&fndecl, attrs, 0);\n   announce_function (fndecl);\n   DECL_INITIAL (fndecl) = error_mark_node;\n@@ -10766,26 +10753,25 @@ objc_demangle (const char *mangled)\n const char *\n objc_maybe_printable_name (tree decl, int v ATTRIBUTE_UNUSED)\n {\n-  const char *decl_name = IDENTIFIER_POINTER (DECL_NAME (decl));  \n-\n   switch (TREE_CODE (decl))\n     {\n     case FUNCTION_DECL:\n-      return objc_demangle (decl_name);\n+      return objc_demangle (IDENTIFIER_POINTER (DECL_NAME (decl)));\n       break;\n-      /* This unusual case (INSTANCE_METHOD_DECL and\n-\t CLASS_METHOD_DECL) seems to happen only in ObjC++ and to be a\n-\t by-product of the method attribute changes.  It would be nice\n-\t to be able to print \"-[NSObject autorelease] is deprecated\",\n-\t but to do that, we'd need to store the class and method name\n-\t in the method decl, which we currently don't do.  For now,\n-\t just return the name of the method.  We don't return NULL,\n-\t because that may trigger further attempts to pretty-print the\n-\t decl in C/C++, but they wouldn't know how to pretty-print\n-\t it.  */\n+\n+      /* The following happens when we are printing a deprecation\n+\t warning for a method.  The warn_deprecation() will end up\n+\t trying to print the decl for INSTANCE_METHOD_DECL or\n+\t CLASS_METHOD_DECL.  It would be nice to be able to print\n+\t \"-[NSObject autorelease] is deprecated\", but to do that, we'd\n+\t need to store the class and method name in the method decl,\n+\t which we currently don't do.  For now, just return the name\n+\t of the method.  We don't return NULL, because that may\n+\t trigger further attempts to pretty-print the decl in C/C++,\n+\t but they wouldn't know how to pretty-print it.  */\n     case INSTANCE_METHOD_DECL:\n     case CLASS_METHOD_DECL:\n-      return decl_name;\n+      return IDENTIFIER_POINTER (DECL_NAME (decl));\n       break;\n     default:\n       return NULL;\n@@ -10794,9 +10780,12 @@ objc_maybe_printable_name (tree decl, int v ATTRIBUTE_UNUSED)\n }\n \n /* Return a printable name for 'decl'.  This first tries\n-   objc_maybe_printable_name(), and if that fails, it hands it back to\n-   C/C++.  'v' is the verbosity level, as this is a\n-   LANG_HOOKS_DECL_PRINTABLE_NAME.  */\n+   objc_maybe_printable_name(), and if that fails, it returns the name\n+   in the decl.  This is used as LANG_HOOKS_DECL_PRINTABLE_NAME for\n+   Objective-C; in Objective-C++, setting the hook is not enough\n+   because lots of C++ Front-End code calls cxx_printable_name,\n+   dump_decl and other C++ functions directly.  So instead we have\n+   modified dump_decl to call objc_maybe_printable_name directly.  */\n const char *\n objc_printable_name (tree decl, int v)\n {\n@@ -10805,13 +10794,7 @@ objc_printable_name (tree decl, int v)\n   if (demangled_name != NULL)\n     return demangled_name;\n   else\n-    {\n-#ifdef OBJCPLUS\n-      return cxx_printable_name (decl, v);\n-#else\n-      return IDENTIFIER_POINTER (DECL_NAME (decl));\n-#endif\n-    }\n+    return IDENTIFIER_POINTER (DECL_NAME (decl));\n }\n \n static void"}, {"sha": "d59aa26a5cc961b19e66e07dbc86eae29b756427", "filename": "gcc/objcp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Fobjcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Fobjcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2FChangeLog?ref=be8cf3b55e32b8bd1eb0672d90f91fc246586178", "patch": "@@ -1,3 +1,7 @@\n+2010-10-24  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objcp-lang.c (LANG_HOOKS_DECL_PRINTABLE_NAME): Do not define.\n+\n 2010-10-20  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objcp-lang.c (finish_file): Removed."}, {"sha": "cb148d00d1e3246f7c68322148d63d89316a3ed5", "filename": "gcc/objcp/objcp-lang.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Fobjcp%2Fobjcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Fobjcp%2Fobjcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2Fobjcp-lang.c?ref=be8cf3b55e32b8bd1eb0672d90f91fc246586178", "patch": "@@ -43,8 +43,6 @@ static tree objcxx_eh_personality (void);\n #define LANG_HOOKS_NAME \"GNU Objective-C++\"\n #undef LANG_HOOKS_INIT\n #define LANG_HOOKS_INIT objc_init\n-#undef LANG_HOOKS_DECL_PRINTABLE_NAME\n-#define LANG_HOOKS_DECL_PRINTABLE_NAME\tobjc_printable_name\n #undef LANG_HOOKS_GIMPLIFY_EXPR \n #define LANG_HOOKS_GIMPLIFY_EXPR objc_gimplify_expr\n #undef LANG_HOOKS_INIT_TS"}, {"sha": "ade1d2cdac99b9a4bba3f6a7ae8d884ccd57e366", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=be8cf3b55e32b8bd1eb0672d90f91fc246586178", "patch": "@@ -1,3 +1,13 @@\n+2010-10-24  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc.dg/attributes/method-attribute-2.m: Updated test.  Method\n+\tparameter attributes are now supported.\n+\t* obj-c++.dg/attributes/method-attribute-2.m: Same change.\n+\t* objc.dg/attributes/parameter-attribute-1.m: New test.\n+\t* objc.dg/attributes/parameter-attribute-2.m: New test.\t\n+\t* obj-c++.dg/attributes/parameter-attribute-1.m: New test.\n+\t* obj-c++.dg/attributes/parameter-attribute-2.m: New test.\t\n+\t\n 2010-10-23  Iain Sandoe  <iains@gcc.gnu.org>\n \n \tBased on the CFString implementation in FSF apple/trunk branch."}, {"sha": "f9a184cdf411fdd96e7b294065a033140f6b318d", "filename": "gcc/testsuite/obj-c++.dg/attributes/method-attribute-2.mm", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-attribute-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-attribute-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-attribute-2.mm?ref=be8cf3b55e32b8bd1eb0672d90f91fc246586178", "patch": "@@ -9,15 +9,15 @@ @interface obj : Object {\n } \n - (int) depmth __attribute__((deprecated)); \n - (int) depmtharg:(int) iarg __attribute__((deprecated)); \n-- (int) unusedarg:(int) __attribute__((unused)) uarg ;  /* { dg-warning \"method parameter attributes are not available in this version\" } */\n-- (int) depunusedarg:(int) __attribute__((unused)) uarg __attribute__((deprecated)) ; /* { dg-warning \"method parameter attributes are not available in this version\" } */\n+- (int) unusedarg:(int) __attribute__((unused)) uarg ;\n+- (int) depunusedarg:(int) __attribute__((unused)) uarg __attribute__((deprecated)) ;\n @end\n \n @implementation obj\n - (int) depmth __attribute__((deprecated)) { return var; }  \n - (int) depmtharg:(int) iarg { return var + iarg ; }\n-- (int) unusedarg:(int) __attribute__((unused)) uarg { return var; }  /* { dg-warning \"method parameter attributes are not available in this version\" } */\n-- (int) depunusedarg:(int) __attribute__((unused)) uarg { return var; } /* { dg-warning \"method parameter attributes are not available in this version\" } */\n+- (int) unusedarg:(int) __attribute__((unused)) uarg { return var; }\n+- (int) depunusedarg:(int) __attribute__((unused)) uarg { return var; }\n @end \n \n int foo (void)"}, {"sha": "a4ba25943ca968b340373080381c8900c5c9f714", "filename": "gcc/testsuite/obj-c++.dg/attributes/parameter-attribute-1.mm", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fparameter-attribute-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fparameter-attribute-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fparameter-attribute-1.mm?ref=be8cf3b55e32b8bd1eb0672d90f91fc246586178", "patch": "@@ -0,0 +1,45 @@\n+/* Test __attribute__((unused)) for an Objective-C method parameter.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wunused-parameter\" } */\n+\n+#include <objc/objc.h>\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+}\n+- (id) method1: (id) argument1;\n+- (id) method2: (id) __attribute__((unused)) argument1;\n+- (id) method3: (id) __attribute__((unused)) argument1\n+   andArgument: (id) argument2;\n+- (id) method4: (id) __attribute__((unused)) argument1\n+   andArgument: (id) __attribute__((unused)) argument2;\n+- (id) method5: (id) argument1\n+   andArgument: (id) __attribute__ ((unused)) argument2;\n+@end\n+\n+@implementation MyRootClass\n+- (id) method1: (id) argument1  /* { dg-warning \"unused parameter .argument1.\" } */\n+{\n+  return nil;\n+}\n+- (id) method2: (id) __attribute__((unused)) argument1\n+{\n+  return nil;\n+}\n+- (id) method3: (id) __attribute__((unused)) argument1\n+   andArgument: (id) argument2 /* { dg-warning \"unused parameter .argument2.\" } */\n+{\n+  return nil;\n+}\n+- (id) method4: (id) __attribute__((unused)) argument1\n+   andArgument: (id) __attribute__((unused)) argument2\n+{\n+  return nil;\n+}\n+- (id) method5: (id) argument1\n+   andArgument: (id) __attribute__ ((unused)) argument2 /* { dg-warning \"unused parameter .argument1.\" } */\n+{\n+  return nil;\n+}\n+@end"}, {"sha": "3908faf99d92679d89968c20a7956484ed934d0e", "filename": "gcc/testsuite/obj-c++.dg/attributes/parameter-attribute-2.mm", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fparameter-attribute-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fparameter-attribute-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fparameter-attribute-2.mm?ref=be8cf3b55e32b8bd1eb0672d90f91fc246586178", "patch": "@@ -0,0 +1,25 @@\n+/* Test that we get warnings for unrecognized attributes.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+}\n+/* TODO: Emit warnings in the @interface as well.  Currently we only emit\n+   them in @implementation.  */\n++ (id) method1: (id) __attribute__ ((xxxxx)) argument1;\n++ (id) method2: (id) __attribute__ ((noinline)) argument1;\n+@end\n+\n+@implementation MyRootClass\n++ (id) method1: (id) __attribute__ ((xxxxx)) argument1  /* { dg-warning \".xxxxx. attribute directive ignored\" } */\n+{\n+  return argument1;\n+}\n++ (id) method2: (id) __attribute__ ((noinline)) argument1 /* { dg-warning \".noinline. attribute ignored\" } */\n+{\n+  return argument1;\n+}\n+@end"}, {"sha": "8fbb11e201425fd0653f138e7b6cd5b8aaaf76a7", "filename": "gcc/testsuite/obj-c++.dg/attributes/unused-parameter-1.mm", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Funused-parameter-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Funused-parameter-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Funused-parameter-1.mm?ref=be8cf3b55e32b8bd1eb0672d90f91fc246586178", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+}\n+- (id) method1: (id) argument1;\n+- (id) method2: (id) __attribute__((unused)) argument1;\n+- (id) method3: (id) __attribute__((unused)) argument1\n+   andArgument: (id) argument2;\n+- (id) method4: (id) __attribute__((unused)) argument1\n+   andArgument: (id) __attribute__((unused)) argument2;\n+- (id) method5: (id) argument1\n+   andArgument: (id) __attribute__ ((unused)) argument2;\n+- (id) method6: (id) argument1\n+   andArgument: (id) argument2;\n+@end\n+\n+@implementation MyRootClass\n+- (id) method1: (id) argument1\n+{\n+  return nil;\n+}\n+- (id) method2: (id) __attribute__((unused)) argument1\n+{\n+  return nil;\n+}\n+- (id) method3: (id) __attribute__((unused)) argument1\n+   andArgument: (id) argument2\n+{\n+  return nil;\n+}\n+- (id) method4: (id) __attribute__((unused)) argument1\n+   andArgument: (id) __attribute__((unused)) argument2\n+{\n+  return nil;\n+}\n+- (id) method5: (id) argument1\n+   andArgument: (id) __attribute__ ((unused)) argument2\n+{\n+  return nil;\n+}\n+- (id) method6: (id) argument1\n+   andArgument: (id) argument2\n+{\n+  return nil;\n+}\n+@end"}, {"sha": "f9a184cdf411fdd96e7b294065a033140f6b318d", "filename": "gcc/testsuite/objc.dg/attributes/method-attribute-2.m", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-attribute-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-attribute-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-attribute-2.m?ref=be8cf3b55e32b8bd1eb0672d90f91fc246586178", "patch": "@@ -9,15 +9,15 @@ @interface obj : Object {\n } \n - (int) depmth __attribute__((deprecated)); \n - (int) depmtharg:(int) iarg __attribute__((deprecated)); \n-- (int) unusedarg:(int) __attribute__((unused)) uarg ;  /* { dg-warning \"method parameter attributes are not available in this version\" } */\n-- (int) depunusedarg:(int) __attribute__((unused)) uarg __attribute__((deprecated)) ; /* { dg-warning \"method parameter attributes are not available in this version\" } */\n+- (int) unusedarg:(int) __attribute__((unused)) uarg ;\n+- (int) depunusedarg:(int) __attribute__((unused)) uarg __attribute__((deprecated)) ;\n @end\n \n @implementation obj\n - (int) depmth __attribute__((deprecated)) { return var; }  \n - (int) depmtharg:(int) iarg { return var + iarg ; }\n-- (int) unusedarg:(int) __attribute__((unused)) uarg { return var; }  /* { dg-warning \"method parameter attributes are not available in this version\" } */\n-- (int) depunusedarg:(int) __attribute__((unused)) uarg { return var; } /* { dg-warning \"method parameter attributes are not available in this version\" } */\n+- (int) unusedarg:(int) __attribute__((unused)) uarg { return var; }\n+- (int) depunusedarg:(int) __attribute__((unused)) uarg { return var; }\n @end \n \n int foo (void)"}, {"sha": "8263df66db972630c51c4e24b74dca4299fbc2ab", "filename": "gcc/testsuite/objc.dg/attributes/parameter-attribute-1.m", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fparameter-attribute-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fparameter-attribute-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fparameter-attribute-1.m?ref=be8cf3b55e32b8bd1eb0672d90f91fc246586178", "patch": "@@ -0,0 +1,45 @@\n+/* Test __attribute__((unused)) for an Objective-C method parameter.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wunused-parameter\" } */\n+\n+#include <objc/objc.h>\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+}\n+- (id) method1: (id) argument1;\n+- (id) method2: (id) __attribute__((unused)) argument1;\n+- (id) method3: (id) __attribute__((unused)) argument1\n+   andArgument: (id) argument2;\n+- (id) method4: (id) __attribute__((unused)) argument1\n+   andArgument: (id) __attribute__((unused)) argument2;\n+- (id) method5: (id) argument1\n+   andArgument: (id) __attribute__ ((unused)) argument2;\n+@end\n+\n+@implementation MyRootClass\n+- (id) method1: (id) argument1\n+{ /* { dg-warning \"unused parameter .argument1.\" } */\n+  return nil;\n+}\n+- (id) method2: (id) __attribute__((unused)) argument1\n+{\n+  return nil;\n+}\n+- (id) method3: (id) __attribute__((unused)) argument1\n+   andArgument: (id) argument2\n+{ /* { dg-warning \"unused parameter .argument2.\" } */\n+  return nil;\n+}\n+- (id) method4: (id) __attribute__((unused)) argument1\n+   andArgument: (id) __attribute__((unused)) argument2\n+{\n+  return nil;\n+}\n+- (id) method5: (id) argument1\n+   andArgument: (id) __attribute__ ((unused)) argument2\n+{ /* { dg-warning \"unused parameter .argument1.\" } */\n+  return nil;\n+}\n+@end"}, {"sha": "99c5a308b8cbcf8b6086b2bcb6eca53c47a4f82b", "filename": "gcc/testsuite/objc.dg/attributes/parameter-attribute-2.m", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fparameter-attribute-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8cf3b55e32b8bd1eb0672d90f91fc246586178/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fparameter-attribute-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fparameter-attribute-2.m?ref=be8cf3b55e32b8bd1eb0672d90f91fc246586178", "patch": "@@ -0,0 +1,25 @@\n+/* Test that we get warnings for unrecognized attributes.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+}\n+/* TODO: Emit warnings in the @interface as well.  Currently we only emit\n+   them in @implementation.  */\n++ (id) method1: (id) __attribute__ ((xxxxx)) argument1;\n++ (id) method2: (id) __attribute__ ((noinline)) argument1;\n+@end\n+\n+@implementation MyRootClass\n++ (id) method1: (id) __attribute__ ((xxxxx)) argument1\n+{  /* { dg-warning \".xxxxx. attribute directive ignored\" } */\n+  return argument1;\n+}\n++ (id) method2: (id) __attribute__ ((noinline)) argument1\n+{ /* { dg-warning \".noinline. attribute ignored\" } */\n+  return argument1;\n+}\n+@end"}]}