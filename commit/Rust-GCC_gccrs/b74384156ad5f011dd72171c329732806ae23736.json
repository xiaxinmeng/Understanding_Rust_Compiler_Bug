{"sha": "b74384156ad5f011dd72171c329732806ae23736", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc0Mzg0MTU2YWQ1ZjAxMWRkNzIxNzFjMzI5NzMyODA2YWUyMzczNg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-11-13T14:20:04Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-11-13T14:20:04Z"}, "message": "c-parse.in (ends_in_label): Remove from %union and %type.\n\n\t* c-parse.in (ends_in_label): Remove from %union and %type.\n\t(decls, stmts, lineno_stmt_or_labels, xstmts,\n\tlineno_stmt_or_label, stmt_or_label): Remove.\n\t(stmts_and_decls, lineno_stmt_decl_or_labels_ending_stmt,\n\tlineno_stmt_decl_or_labels_ending_decl,\n\tlineno_stmt_decl_or_labels_ending_label,\n\tlineno_stmt_decl_or_labels_ending_error,\n\tlineno_stmt_decl_or_labels, compstmt_contents_nonempty,\n\tlineno_stmt, lineno_label): New.\n\t(compstmt_nostart): Use compstmt_contents_nonempty.\n\ntestsuite:\n\t* gcc.dg/c99-mixdecl-1.c, gcc.dg/c90-mixdecl-1.c: New tests.\n\nFrom-SVN: r37429", "tree": {"sha": "2eac56e1517f787b5e2a6759c18bb2bfd56e6a5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2eac56e1517f787b5e2a6759c18bb2bfd56e6a5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b74384156ad5f011dd72171c329732806ae23736", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b74384156ad5f011dd72171c329732806ae23736", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b74384156ad5f011dd72171c329732806ae23736", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b74384156ad5f011dd72171c329732806ae23736/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19552aa5728591fdd2913ef54422e869af46852e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19552aa5728591fdd2913ef54422e869af46852e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19552aa5728591fdd2913ef54422e869af46852e"}], "stats": {"total": 158, "additions": 113, "deletions": 45}, "files": [{"sha": "9335c5ea3244b69ee9b86894807e8a045d3d9e39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74384156ad5f011dd72171c329732806ae23736/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74384156ad5f011dd72171c329732806ae23736/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b74384156ad5f011dd72171c329732806ae23736", "patch": "@@ -1,3 +1,16 @@\n+2000-11-13  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-parse.in (ends_in_label): Remove from %union and %type.\n+\t(decls, stmts, lineno_stmt_or_labels, xstmts,\n+\tlineno_stmt_or_label, stmt_or_label): Remove.\n+\t(stmts_and_decls, lineno_stmt_decl_or_labels_ending_stmt,\n+\tlineno_stmt_decl_or_labels_ending_decl,\n+\tlineno_stmt_decl_or_labels_ending_label,\n+\tlineno_stmt_decl_or_labels_ending_error,\n+\tlineno_stmt_decl_or_labels, compstmt_contents_nonempty,\n+\tlineno_stmt, lineno_label): New.\n+\t(compstmt_nostart): Use compstmt_contents_nonempty.\n+\n 2000-11-13  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* c-common.c (boolean_increment): New function."}, {"sha": "0f3d2ab5bef05755c51cbf6a69b053396272b841", "filename": "gcc/c-parse.in", "status": "modified", "additions": 58, "deletions": 45, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74384156ad5f011dd72171c329732806ae23736/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74384156ad5f011dd72171c329732806ae23736/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=b74384156ad5f011dd72171c329732806ae23736", "patch": "@@ -79,7 +79,7 @@ end ifc\n %start program\n \n %union {long itype; tree ttype; enum tree_code code;\n-\tconst char *filename; int lineno; int ends_in_label; }\n+\tconst char *filename; int lineno; }\n \n /* All identifiers that are not reserved words\n    and are not declared typedefs in the current block */\n@@ -194,8 +194,6 @@ end ifc\n \n %type <itype> setspecs\n \n-%type <ends_in_label> lineno_stmt_or_label lineno_stmt_or_labels stmt_or_label\n-\n %type <filename> save_filename\n %type <lineno> save_lineno\n \f\n@@ -824,13 +822,6 @@ lineno_decl:\n \t\t{ }\n \t;\n \n-decls:\n-\tlineno_decl\n-\t| errstmt\n-\t| decls lineno_decl\n-\t| lineno_decl errstmt\n-\t;\n-\n /* records the type and storage class specs to use for processing\n    the declarators that follow.\n    Maintains a stack of outer-level values of current_declspecs,\n@@ -1582,29 +1573,58 @@ absdcl1:  /* a nonempty absolute declarator */\n \t\t{ $$ = $3; }\n \t;\n \n-/* at least one statement, the first of which parses without error.  */\n-/* stmts is used only after decls, so an invalid first statement\n-   is actually regarded as an invalid decl and part of the decls.  */\n+/* A nonempty series of declarations and statements (possibly followed by\n+   some labels) that can form the body of a compound statement.\n+   NOTE: we don't allow labels on declarations; this might seem like a\n+   natural extension, but there would be a conflict between attributes\n+   on the label and prefix attributes on the declaration.  */\n \n-stmts:\n-\tlineno_stmt_or_labels\n+stmts_and_decls:\n+\t  lineno_stmt_decl_or_labels_ending_stmt\n+\t| lineno_stmt_decl_or_labels_ending_decl\n+\t| lineno_stmt_decl_or_labels_ending_label\n \t\t{\n-\t\t  if (pedantic && $1)\n+\t\t  if (pedantic)\n \t\t    pedwarn (\"ISO C forbids label at end of compound statement\");\n \t\t}\n+\t| lineno_stmt_decl_or_labels_ending_error\n \t;\n \n-lineno_stmt_or_labels:\n-\t  lineno_stmt_or_label\n-\t| lineno_stmt_or_labels lineno_stmt_or_label\n-\t\t{ $$ = $2; }\n-\t| lineno_stmt_or_labels errstmt\n-\t\t{ $$ = 0; }\n+lineno_stmt_decl_or_labels_ending_stmt:\n+\t  lineno_stmt\n+\t| lineno_stmt_decl_or_labels_ending_stmt lineno_stmt\n+\t| lineno_stmt_decl_or_labels_ending_decl lineno_stmt\n+\t| lineno_stmt_decl_or_labels_ending_label lineno_stmt\n+\t| lineno_stmt_decl_or_labels_ending_error lineno_stmt\n \t;\n \n-xstmts:\n-\t/* empty */\n-\t| stmts\n+lineno_stmt_decl_or_labels_ending_decl:\n+\t  lineno_decl\n+\t| lineno_stmt_decl_or_labels_ending_stmt lineno_decl\n+\t\t{ if (pedantic && !flag_isoc99)\n+\t\t    pedwarn (\"ISO C89 forbids mixed declarations and code\"); }\n+\t| lineno_stmt_decl_or_labels_ending_decl lineno_decl\n+\t| lineno_stmt_decl_or_labels_ending_error lineno_decl\n+\t;\n+\n+lineno_stmt_decl_or_labels_ending_label:\n+\t  lineno_label\n+\t| lineno_stmt_decl_or_labels_ending_stmt lineno_label\n+\t| lineno_stmt_decl_or_labels_ending_decl lineno_label\n+\t| lineno_stmt_decl_or_labels_ending_label lineno_label\n+\t| lineno_stmt_decl_or_labels_ending_error lineno_label\n+\t;\n+\n+lineno_stmt_decl_or_labels_ending_error:\n+\terrstmt\n+\t| lineno_stmt_decl_or_labels errstmt\n+\t;\n+\n+lineno_stmt_decl_or_labels:\n+\t  lineno_stmt_decl_or_labels_ending_stmt\n+\t| lineno_stmt_decl_or_labels_ending_decl\n+\t| lineno_stmt_decl_or_labels_ending_label\n+\t| lineno_stmt_decl_or_labels_ending_error\n \t;\n \n errstmt:  error ';'\n@@ -1697,23 +1717,18 @@ compstmt_start: '{' { compstmt_count++;\n \n compstmt_nostart: '}'\n \t\t{ $$ = convert (void_type_node, integer_zero_node); }\n-\t| pushlevel maybe_label_decls decls xstmts '}' poplevel\n-\t\t{ $$ = poplevel (1, 1, 0); \n-\t\t  SCOPE_STMT_BLOCK (TREE_PURPOSE ($6)) \n-\t\t    = SCOPE_STMT_BLOCK (TREE_VALUE ($6))\n-\t\t    = $$; }\n-\t| pushlevel maybe_label_decls error '}' poplevel\n-\t\t{ $$ = poplevel (kept_level_p (), 0, 0); \n-\t\t  SCOPE_STMT_BLOCK (TREE_PURPOSE ($5)) \n-\t\t    = SCOPE_STMT_BLOCK (TREE_VALUE ($5))\n-\t\t    = $$; }\n-\t| pushlevel maybe_label_decls stmts '}' poplevel\n-\t\t{ $$ = poplevel (kept_level_p (), 0, 0); \n+\t| pushlevel maybe_label_decls compstmt_contents_nonempty '}' poplevel\n+\t\t{ $$ = poplevel (kept_level_p (), 1, 0); \n \t\t  SCOPE_STMT_BLOCK (TREE_PURPOSE ($5)) \n \t\t    = SCOPE_STMT_BLOCK (TREE_VALUE ($5))\n \t\t    = $$; }\n \t;\n \n+compstmt_contents_nonempty:\n+\t  stmts_and_decls\n+\t| error\n+\t;\n+\n compstmt_primary_start:\n \t'(' '{'\n \t\t{ if (current_function_decl == 0)\n@@ -1807,16 +1822,14 @@ c99_block_lineno_labeled_stmt:\n \t\t    RECHAIN_STMTS ($1, COMPOUND_BODY ($1)); }\n \t;\n \n-lineno_stmt_or_label:\n-\t  save_filename save_lineno stmt_or_label\n-\t\t{ $$ = $3; }\n+lineno_stmt:\n+\t  save_filename save_lineno stmt\n+\t\t{ }\n \t;\n \n-stmt_or_label:\n-\t  stmt\n-\t\t{ $$ = 0; }\n-\t| label\n-\t\t{ $$ = 1; }\n+lineno_label:\n+\t  save_filename save_lineno label\n+\t\t{ }\n \t;\n \n select_or_iter_stmt:"}, {"sha": "2ef27022f3c1cad94f3f3bf4ba76dcbea190b568", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74384156ad5f011dd72171c329732806ae23736/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74384156ad5f011dd72171c329732806ae23736/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b74384156ad5f011dd72171c329732806ae23736", "patch": "@@ -1,3 +1,7 @@\n+2000-11-13  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/c99-mixdecl-1.c, gcc.dg/c90-mixdecl-1.c: New tests.\n+\n 2000-11-13  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gcc.dg/c99-bool-1.c: New test."}, {"sha": "b07ab2674855d01cda1d3ae2c3283c160ea5d13b", "filename": "gcc/testsuite/gcc.dg/c90-mixdecl-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74384156ad5f011dd72171c329732806ae23736/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-mixdecl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74384156ad5f011dd72171c329732806ae23736/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-mixdecl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-mixdecl-1.c?ref=b74384156ad5f011dd72171c329732806ae23736", "patch": "@@ -0,0 +1,13 @@\n+/* Test for C99 mixed declarations and code: not in C90.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n+\n+void\n+foo (void)\n+{\n+  int i;\n+  i = 0;\n+  int j; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+  /* { dg-error \"mix|parse\" \"mixed declarations and code not in C90\" { target *-*-* } 11 } */\n+}"}, {"sha": "cfedad44c8a580f08de152d5d37d0b4f709a35ca", "filename": "gcc/testsuite/gcc.dg/c99-mixdecl-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74384156ad5f011dd72171c329732806ae23736/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-mixdecl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74384156ad5f011dd72171c329732806ae23736/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-mixdecl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-mixdecl-1.c?ref=b74384156ad5f011dd72171c329732806ae23736", "patch": "@@ -0,0 +1,25 @@\n+/* Test for C99 mixed declarations and code.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do run } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main (void)\n+{\n+  int i = 0;\n+  if (i != 0)\n+    abort ();\n+  i++;\n+  if (i != 1)\n+    abort ();\n+  int j = i;\n+  if (j != 1)\n+    abort ();\n+  struct foo { int i0; } k = { 4 };\n+  if (k.i0 != 4)\n+    abort ();\n+  exit (0);\n+}"}]}