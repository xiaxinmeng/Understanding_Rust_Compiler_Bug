{"sha": "2075b05db6dbd95bd334cd9a8f1bc085aef642aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA3NWIwNWRiNmRiZDk1YmQzMzRjZDlhOGYxYmMwODVhZWY2NDJhYQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2004-11-20T11:21:55Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2004-11-20T11:21:55Z"}, "message": "arm.c (arm_override_options): Use arm_ld_sched rather than testing a bit in tune_flags.\n\n* arm.c (arm_override_options): Use arm_ld_sched rather than testing\na bit in tune_flags.\n(const_double_needs_minipool): Likewise.  Split most of the code out\ninto ...\n(arm_const_double_inline_cost): ... new function here.\n* arm-protos.h (arm_const_double_inline_cost): Add prototype.\n* arm.h (EXTRA_CONSTRAINT_STR_ARM): Add D[abc] constraints for double-\nword constants of length 2, 3 and 4 insns respectively.\n(CONSTRAINT_LEN): The 'D' prefix is a 2-letter constraint.\n* arm.md (arm_movdi, movdf_soft_insn): Add alternatives for D[abc]\nconstraints.  Set insn lenghts accordingly.\n\nFrom-SVN: r90962", "tree": {"sha": "d507dbbe8977ece1767492a24c84daef2fcbcf24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d507dbbe8977ece1767492a24c84daef2fcbcf24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2075b05db6dbd95bd334cd9a8f1bc085aef642aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2075b05db6dbd95bd334cd9a8f1bc085aef642aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2075b05db6dbd95bd334cd9a8f1bc085aef642aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2075b05db6dbd95bd334cd9a8f1bc085aef642aa/comments", "author": null, "committer": null, "parents": [{"sha": "9eaf7da0942407021382e5d0e6a251017c0e698c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eaf7da0942407021382e5d0e6a251017c0e698c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eaf7da0942407021382e5d0e6a251017c0e698c"}], "stats": {"total": 112, "additions": 74, "deletions": 38}, "files": [{"sha": "361a03111c81704e3b15ba81b988c44d158b6317", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2075b05db6dbd95bd334cd9a8f1bc085aef642aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2075b05db6dbd95bd334cd9a8f1bc085aef642aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2075b05db6dbd95bd334cd9a8f1bc085aef642aa", "patch": "@@ -1,3 +1,17 @@\n+2004-11-20  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.c (arm_override_options): Use arm_ld_sched rather than testing\n+\ta bit in tune_flags.\n+\t(const_double_needs_minipool): Likewise.  Split most of the code out\n+\tinto ...\n+\t(arm_const_double_inline_cost): ... new function here.\n+\t* arm-protos.h (arm_const_double_inline_cost): Add prototype.\n+\t* arm.h (EXTRA_CONSTRAINT_STR_ARM): Add D[abc] constraints for double-\n+\tword constants of length 2, 3 and 4 insns respectively.\n+\t(CONSTRAINT_LEN): The 'D' prefix is a 2-letter constraint.\n+\t* arm.md (arm_movdi, movdf_soft_insn): Add alternatives for D[abc]\n+\tconstraints.  Set insn lenghts accordingly.\n+\n 2004-11-19  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* basic-block.h (edge_def): Add dest_idx."}, {"sha": "c46ce8273dbeaf18c1b09e2a3194c02bb31d66e9", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2075b05db6dbd95bd334cd9a8f1bc085aef642aa/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2075b05db6dbd95bd334cd9a8f1bc085aef642aa/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=2075b05db6dbd95bd334cd9a8f1bc085aef642aa", "patch": "@@ -89,6 +89,7 @@ extern rtx arm_gen_compare_reg (RTX_CODE, rtx, rtx);\n extern rtx arm_gen_return_addr_mask (void);\n extern void arm_reload_in_hi (rtx *);\n extern void arm_reload_out_hi (rtx *);\n+extern int arm_const_double_inline_cost (rtx);\n extern const char *fp_immediate_constant (rtx);\n extern const char *output_call (rtx *);\n extern const char *output_call_mem (rtx *);"}, {"sha": "066761362d99b3b0488fc1a999f31070fc67bb5c", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2075b05db6dbd95bd334cd9a8f1bc085aef642aa/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2075b05db6dbd95bd334cd9a8f1bc085aef642aa/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=2075b05db6dbd95bd334cd9a8f1bc085aef642aa", "patch": "@@ -1163,7 +1163,7 @@ arm_override_options (void)\n       /* For processors with load scheduling, it never costs more than\n          2 cycles to load a constant, and the load scheduler may well\n \t reduce that to 1.  */\n-      if (tune_flags & FL_LDSCHED)\n+      if (arm_ld_sched)\n         arm_constant_limit = 1;\n \n       /* On XScale the longer latency of a load makes it more difficult\n@@ -7258,43 +7258,52 @@ push_minipool_fix (rtx insn, HOST_WIDE_INT address, rtx *loc,\n   minipool_fix_tail = fix;\n }\n \n-/* Determine if a CONST_DOUBLE should be pushed to the minipool */\n-static bool\n-const_double_needs_minipool (rtx val)\n+/* Return the cost of synthesising the const_double VAL inline.\n+   Returns the number of insns needed, or 99 if we don't know how to\n+   do it.  */\n+int\n+arm_const_double_inline_cost (rtx val)\n {\n   long parts[2];\n-\n-  /* thumb only knows to load a CONST_DOUBLE from memory at the moment */\n-  if (TARGET_THUMB)\n-    return true;\n-\n+  \n   if (GET_MODE (val) == DFmode)\n     {\n       REAL_VALUE_TYPE r;\n       if (!TARGET_SOFT_FLOAT)\n-\treturn true;\n+\treturn 99;\n       REAL_VALUE_FROM_CONST_DOUBLE (r, val);\n       REAL_VALUE_TO_TARGET_DOUBLE (r, parts);\n     }\n   else if (GET_MODE (val) != VOIDmode)\n-    return true;\n+    return 99;\n   else\n     {\n       parts[0] = CONST_DOUBLE_LOW (val);\n       parts[1] = CONST_DOUBLE_HIGH (val);\n     }\n \n+  return (arm_gen_constant (SET, SImode, NULL_RTX, parts[0],\n+\t\t\t    NULL_RTX, NULL_RTX, 0, 0)\n+\t  + arm_gen_constant (SET, SImode, NULL_RTX, parts[1],\n+\t\t\t      NULL_RTX, NULL_RTX, 0, 0));\n+}\n+\n+/* Determine if a CONST_DOUBLE should be pushed to the minipool */\n+static bool\n+const_double_needs_minipool (rtx val)\n+{\n+  /* thumb only knows to load a CONST_DOUBLE from memory at the moment */\n+  if (TARGET_THUMB)\n+    return true;\n+\n   /* Don't push anything to the minipool if a CONST_DOUBLE can be built with\n      a few ALU insns directly. On balance, the optimum is likely to be around\n      3 insns, except when there are no load delay slots where it should be 4.\n      When optimizing for size, a limit of 3 allows saving at least one word\n      except for cases where a single minipool entry could be shared more than\n      2 times which is rather unlikely to outweight the overall savings. */\n-  return (  arm_gen_constant (SET, SImode, NULL_RTX, parts[0],\n-\t\t\t      NULL_RTX, NULL_RTX, 0, 0)\n-\t  + arm_gen_constant (SET, SImode, NULL_RTX, parts[1],\n-\t\t\t      NULL_RTX, NULL_RTX, 0, 0)\n-\t  > ((optimize_size || (tune_flags & FL_LDSCHED)) ? 3 : 4));\n+  return (arm_const_double_inline_cost (val)\n+\t  > ((optimize_size || arm_ld_sched) ? 3 : 4));\n }\n \n /* Scan INSN and note any of its operands that need fixing."}, {"sha": "b09905aed879bff3d0c182e0c8b4480757c62eb6", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2075b05db6dbd95bd334cd9a8f1bc085aef642aa/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2075b05db6dbd95bd334cd9a8f1bc085aef642aa/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=2075b05db6dbd95bd334cd9a8f1bc085aef642aa", "patch": "@@ -1309,27 +1309,39 @@ enum reg_class\n    `S' means any symbol that has the SYMBOL_REF_FLAG set or a CONSTANT_POOL\n    address.  This means that the symbol is in the text segment and can be\n    accessed without using a load.\n+   'D' Prefixes a number of const_double operands where:\n+   'Da' is a constant that takes two ARM insns to load.\n+   'Db' takes three ARM insns.\n+   'Dc' takes four ARM insns, if we allow that in this compilation.\n    'U' Prefixes an extended memory constraint where:\n    'Uv' is an address valid for VFP load/store insns.\n    'Uy' is an address valid for iwmmxt load/store insns.\n    'Uq' is an address valid for ldrsb.  */\n \n-#define EXTRA_CONSTRAINT_STR_ARM(OP, C, STR)\t\t\t\\\n-  (((C) == 'Q') ? (GET_CODE (OP) == MEM\t\t\t\t\\\n-\t\t && GET_CODE (XEXP (OP, 0)) == REG) :\t\t\\\n-   ((C) == 'R') ? (GET_CODE (OP) == MEM\t\t\t\t\\\n-\t\t   && GET_CODE (XEXP (OP, 0)) == SYMBOL_REF\t\\\n-\t\t   && CONSTANT_POOL_ADDRESS_P (XEXP (OP, 0))) :\t\\\n-   ((C) == 'S') ? (optimize > 0 && CONSTANT_ADDRESS_P (OP)) :\t\\\n-   ((C) == 'T') ? cirrus_memory_offset (OP) :\t\t\t\\\n+#define EXTRA_CONSTRAINT_STR_ARM(OP, C, STR)\t\t\t\t\\\n+  (((C) == 'D') ? (GET_CODE (OP) == CONST_DOUBLE\t\t\t\\\n+\t\t   && (((STR)[1] == 'a'\t\t\t\t\t\\\n+\t\t\t&& arm_const_double_inline_cost (OP) == 2)\t\\\n+\t\t       || ((STR)[1] == 'b'\t\t\t\t\\\n+\t\t\t   && arm_const_double_inline_cost (OP) == 3)\t\\\n+\t\t       || ((STR)[1] == 'c'\t\t\t\t\\\n+\t\t\t   && arm_const_double_inline_cost (OP) == 4\t\\\n+\t\t\t   && !(optimize_size || arm_ld_sched)))) :\t\\\n+   ((C) == 'Q') ? (GET_CODE (OP) == MEM\t\t\t\t\t\\\n+\t\t && GET_CODE (XEXP (OP, 0)) == REG) :\t\t\t\\\n+   ((C) == 'R') ? (GET_CODE (OP) == MEM\t\t\t\t\t\\\n+\t\t   && GET_CODE (XEXP (OP, 0)) == SYMBOL_REF\t\t\\\n+\t\t   && CONSTANT_POOL_ADDRESS_P (XEXP (OP, 0))) :\t\t\\\n+   ((C) == 'S') ? (optimize > 0 && CONSTANT_ADDRESS_P (OP)) :\t\t\\\n+   ((C) == 'T') ? cirrus_memory_offset (OP) :\t\t\t\t\\\n    ((C) == 'U' && (STR)[1] == 'v') ? arm_coproc_mem_operand (OP, FALSE) : \\\n    ((C) == 'U' && (STR)[1] == 'y') ? arm_coproc_mem_operand (OP, TRUE) : \\\n-   ((C) == 'U' && (STR)[1] == 'q')\t\t\t\t\\\n-    ? arm_extendqisi_mem_op (OP, GET_MODE (OP))\t\t\t\\\n-      : 0)\n+   ((C) == 'U' && (STR)[1] == 'q')\t\t\t\t\t\\\n+    ? arm_extendqisi_mem_op (OP, GET_MODE (OP))\t\t\t\t\\\n+   : 0)\n \n #define CONSTRAINT_LEN(C,STR)\t\t\t\t\\\n-  ((C) == 'U' ? 2 : DEFAULT_CONSTRAINT_LEN (C, STR))\n+  (((C) == 'U' || (C) == 'D') ? 2 : DEFAULT_CONSTRAINT_LEN (C, STR))\n \n #define EXTRA_CONSTRAINT_THUMB(X, C)\t\t\t\t\t\\\n   ((C) == 'Q' ? (GET_CODE (X) == MEM\t\t\t\t\t\\"}, {"sha": "f464aa44d07f898227bc09d4617a65c921678d13", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2075b05db6dbd95bd334cd9a8f1bc085aef642aa/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2075b05db6dbd95bd334cd9a8f1bc085aef642aa/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=2075b05db6dbd95bd334cd9a8f1bc085aef642aa", "patch": "@@ -4156,18 +4156,18 @@\n )\n \n (define_insn \"*arm_movdi\"\n-  [(set (match_operand:DI 0 \"nonimmediate_di_operand\" \"=r, r ,m\")\n-\t(match_operand:DI 1 \"di_operand\"              \"rIK,mi,r\"))]\n+  [(set (match_operand:DI 0 \"nonimmediate_di_operand\" \"=r,   r, r, r, m\")\n+\t(match_operand:DI 1 \"di_operand\"              \"rIKDa,Db,Dc,mi,r\"))]\n   \"TARGET_ARM\n   && !(TARGET_HARD_FLOAT && (TARGET_MAVERICK || TARGET_VFP))\n   && !TARGET_IWMMXT\"\n   \"*\n   return (output_move_double (operands));\n   \"\n-  [(set_attr \"length\" \"8\")\n-   (set_attr \"type\" \"*,load2,store2\")\n-   (set_attr \"pool_range\" \"*,1020,*\")\n-   (set_attr \"neg_pool_range\" \"*,1008,*\")]\n+  [(set_attr \"length\" \"8,12,16,8,8\")\n+   (set_attr \"type\" \"*,*,*,load2,store2\")\n+   (set_attr \"pool_range\" \"*,*,*,1020,*\")\n+   (set_attr \"neg_pool_range\" \"*,*,*,1008,*\")]\n )\n \n ;; We can't actually do base+index doubleword loads if the index and\n@@ -5165,13 +5165,13 @@\n )\n \n (define_insn \"*movdf_soft_insn\"\n-  [(set (match_operand:DF 0 \"nonimmediate_soft_df_operand\" \"=r,r,m\")\n-\t(match_operand:DF 1 \"soft_df_operand\" \"r,mF,r\"))]\n+  [(set (match_operand:DF 0 \"nonimmediate_soft_df_operand\" \"=r,r,r,r,m\")\n+\t(match_operand:DF 1 \"soft_df_operand\" \"rDa,Db,Dc,mF,r\"))]\n   \"TARGET_ARM && TARGET_SOFT_FLOAT\n   \"\n   \"* return output_move_double (operands);\"\n-  [(set_attr \"length\" \"8,8,8\")\n-   (set_attr \"type\" \"*,load2,store2\")\n+  [(set_attr \"length\" \"8,12,16,8,8\")\n+   (set_attr \"type\" \"*,*,*,load2,store2\")\n    (set_attr \"pool_range\" \"1020\")\n    (set_attr \"neg_pool_range\" \"1008\")]\n )"}]}