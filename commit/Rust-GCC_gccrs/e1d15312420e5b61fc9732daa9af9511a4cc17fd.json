{"sha": "e1d15312420e5b61fc9732daa9af9511a4cc17fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFkMTUzMTI0MjBlNWI2MWZjOTczMmRhYTlhZjk1MTFhNGNjMTdmZA==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2013-08-06T18:00:36Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2013-08-06T18:00:36Z"}, "message": "re PR tree-optimization/57539 (ice in ipa_edge_duplication_hook)\n\n2013-08-06  Martin Jambor  <mjambor@suse.cz>\n\ntestsuite/\n\tPR tree-optimization/57539\n\t* gcc.dg/ipa/pr57539.c: New test.\n\nFrom-SVN: r201540", "tree": {"sha": "36819500ad8e16c3042f51c27e6ed4646741d11c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36819500ad8e16c3042f51c27e6ed4646741d11c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1d15312420e5b61fc9732daa9af9511a4cc17fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1d15312420e5b61fc9732daa9af9511a4cc17fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1d15312420e5b61fc9732daa9af9511a4cc17fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1d15312420e5b61fc9732daa9af9511a4cc17fd/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "062a1b36f7e45772a7819643852f5df8a688a060", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/062a1b36f7e45772a7819643852f5df8a688a060", "html_url": "https://github.com/Rust-GCC/gccrs/commit/062a1b36f7e45772a7819643852f5df8a688a060"}], "stats": {"total": 223, "additions": 223, "deletions": 0}, "files": [{"sha": "0b1c1e8082f39368817e383090b8fcbc8675eeef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d15312420e5b61fc9732daa9af9511a4cc17fd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d15312420e5b61fc9732daa9af9511a4cc17fd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e1d15312420e5b61fc9732daa9af9511a4cc17fd", "patch": "@@ -1,3 +1,8 @@\n+2013-08-06  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/57539\n+\t* gcc.dg/ipa/pr57539.c: New test.\n+\n 2013-08-06  Martin Jambor  <mjambor@suse.cz>\n \t    Bernd Edlinger <bernd.edlinger@hotmail.de>\n "}, {"sha": "e02018eb872135f1f16169e8288b9f6dd60aaf3f", "filename": "gcc/testsuite/gcc.dg/ipa/pr57539.c", "status": "added", "additions": 218, "deletions": 0, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d15312420e5b61fc9732daa9af9511a4cc17fd/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr57539.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d15312420e5b61fc9732daa9af9511a4cc17fd/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr57539.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr57539.c?ref=e1d15312420e5b61fc9732daa9af9511a4cc17fd", "patch": "@@ -0,0 +1,218 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+typedef long unsigned int size_t;\n+typedef struct\n+{\n+}\n+box;\n+typedef struct\n+{\n+}\n+textpara_t;\n+typedef struct _dtlink_s Dtlink_t;\n+typedef struct _dtdisc_s Dtdisc_t;\n+typedef struct _dtmethod_s Dtmethod_t;\n+typedef struct _dt_s Dt_t;\n+typedef void *(*Dtmemory_f) (Dt_t *, void *, size_t, Dtdisc_t *);\n+typedef void *(*Dtsearch_f) (Dt_t *, void *, int);\n+typedef void *(*Dtmake_f) (Dt_t *, void *, Dtdisc_t *);\n+typedef void (*Dtfree_f) (Dt_t *, void *, Dtdisc_t *);\n+typedef int (*Dtcompar_f) (Dt_t *, void *, void *, Dtdisc_t *);\n+typedef unsigned int (*Dthash_f) (Dt_t *, void *, Dtdisc_t *);\n+typedef int (*Dtevent_f) (Dt_t *, int, void *, Dtdisc_t *);\n+struct _dtlink_s\n+{\n+  Dtlink_t *right;\n+};\n+struct _dtdisc_s\n+{\n+  int key;\n+  int size;\n+  int link;\n+  Dtmake_f makef;\n+  Dtfree_f freef;\n+  Dtcompar_f comparf;\n+  Dthash_f hashf;\n+  Dtmemory_f memoryf;\n+  Dtevent_f eventf;\n+};\n+struct _dt_s\n+{\n+  Dtsearch_f searchf;\n+};\n+extern Dtmethod_t *Dtobag;\n+extern Dt_t *dtopen (Dtdisc_t *, Dtmethod_t *);\n+extern Dtlink_t *dtflatten (Dt_t *);\n+typedef struct Agobj_s Agobj_t;\n+typedef struct Agraph_s Agraph_t;\n+typedef struct Agnode_s Agnode_t;\n+typedef struct Agedge_s Agedge_t;\n+typedef struct Agdesc_s Agdesc_t;\n+typedef struct Agdisc_s Agdisc_t;\n+typedef struct Agrec_s Agrec_t;\n+struct Agobj_s\n+{\n+  Agrec_t *data;\n+};\n+struct Agdesc_s\n+{\n+};\n+extern Agraph_t *agopen (char *name, Agdesc_t desc, Agdisc_t * disc);\n+extern Agnode_t *agfstnode (Agraph_t * g);\n+extern Agnode_t *agnxtnode (Agraph_t * g, Agnode_t * n);\n+extern Agedge_t *agedge (Agraph_t * g, Agnode_t * t, Agnode_t * h, char *name,\n+\t\t\t int createflag);\n+extern Agedge_t *agfstout (Agraph_t * g, Agnode_t * n);\n+extern Agedge_t *agnxtout (Agraph_t * g, Agedge_t * e);\n+extern Agdesc_t Agdirected, Agstrictdirected, Agundirected,\n+  Agstrictundirected;\n+typedef struct Agraph_s graph_t;\n+typedef struct Agnode_s node_t;\n+typedef struct Agedge_s edge_t;\n+typedef union inside_t\n+{\n+  unsigned short minlen;\n+}\n+Agedgeinfo_t;\n+extern void *gmalloc (size_t);\n+typedef enum\n+{ AM_NONE, AM_VOR, AM_SCALE, AM_NSCALE, AM_SCALEXY, AM_PUSH, AM_PUSHPULL,\n+    AM_ORTHO, AM_ORTHO_YX, AM_ORTHOXY, AM_ORTHOYX, AM_PORTHO, AM_PORTHO_YX,\n+    AM_PORTHOXY, AM_PORTHOYX, AM_COMPRESS, AM_VPSC, AM_IPSEP, AM_PRISM }\n+adjust_mode;\n+typedef struct nitem\n+{\n+  Dtlink_t link;\n+  int val;\n+  node_t *cnode;\n+  box bb;\n+}\n+nitem;\n+typedef int (*distfn) (box *, box *);\n+typedef int (*intersectfn) (nitem *, nitem *);\n+static int\n+cmpitem (Dt_t * d, int *p1, int *p2, Dtdisc_t * disc)\n+{\n+}\n+static Dtdisc_t constr =\n+  { __builtin_offsetof (nitem, val), sizeof (int), __builtin_offsetof (nitem,\n+\t\t\t\t\t\t\t\t       link),\n+((Dtmake_f) 0), ((Dtfree_f) 0), (Dtcompar_f) cmpitem, ((Dthash_f) 0), ((Dtmemory_f) 0),\n+((Dtevent_f) 0) };\n+static int\n+distX (box * b1, box * b2)\n+{\n+}\n+\n+static int\n+intersectY0 (nitem * p, nitem * q)\n+{\n+}\n+\n+static int\n+intersectY (nitem * p, nitem * q)\n+{\n+}\n+\n+static void\n+mapGraphs (graph_t * g, graph_t * cg, distfn dist)\n+{\n+  node_t *n;\n+  edge_t *e;\n+  edge_t *ce;\n+  node_t *t;\n+  node_t *h;\n+  nitem *tp;\n+  nitem *hp;\n+  int delta;\n+  for (n = agfstnode (g); n; n = agnxtnode (g, n))\n+    {\n+      for (e = agfstout (g, n); e; e = agnxtout (g, e))\n+\t{\n+\t  delta = dist (&tp->bb, &hp->bb);\n+\t  ce = agedge (cg, t, h, ((void *) 0), 1);\n+\t  if ((((Agedgeinfo_t *) (((Agobj_t *) (ce))->data))->minlen) < delta)\n+\t    {\n+\t      if ((((Agedgeinfo_t *) (((Agobj_t *) (ce))->data))->minlen) ==\n+\t\t  0.0)\n+\t\t{\n+\t\t}\n+\t    }\n+\t}\n+    }\n+}\n+\n+static graph_t *\n+mkNConstraintG (graph_t * g, Dt_t * list, intersectfn intersect, distfn dist)\n+{\n+  nitem *p;\n+  nitem *nxp;\n+  edge_t *e;\n+  graph_t *cg = agopen (\"cg\", Agstrictdirected, ((Agdisc_t *) 0));\n+  for (p = (nitem *) dtflatten (list); p;\n+       p = (nitem *) (((Dtlink_t *) ((Dtlink_t *) p))->right))\n+    {\n+      for (nxp = (nitem *) (((Dtlink_t *) ((Dtlink_t *) p))->right); nxp;\n+\t   nxp = (nitem *) (((Dtlink_t *) ((Dtlink_t *) nxp))->right))\n+\t{\n+\t  if (intersect (p, nxp))\n+\t    {\n+\t      e = agedge (cg, p->cnode, nxp->cnode, ((void *) 0), 1);\n+\t    }\n+  }} for (p = (nitem *) dtflatten (list); p;\n+\t    p = (nitem *) (((Dtlink_t *) ((Dtlink_t *) p))->right))\n+    {\n+    }\n+}\n+\n+static graph_t *\n+mkConstraintG (graph_t * g, Dt_t * list, intersectfn intersect, distfn dist)\n+{\n+  graph_t *vg;\n+  graph_t *cg = agopen (\"cg\", Agstrictdirected, ((Agdisc_t *) 0));\n+  mapGraphs (vg, cg, dist);\n+}\n+\n+static void\n+constrainX (graph_t * g, nitem * nlist, int nnodes, intersectfn ifn,\n+\t    int ortho)\n+{\n+  Dt_t *list = dtopen (&constr, Dtobag);\n+  nitem *p = nlist;\n+  graph_t *cg;\n+  int i;\n+  for (i = 0; i < nnodes; i++)\n+    {\n+      (*(((Dt_t *) (list))->searchf)) ((list), (void *) (p), 0000001);\n+      p++;\n+  } if (ortho)\n+    cg = mkConstraintG (g, list, ifn, distX);\n+  else\n+    cg = mkNConstraintG (g, list, ifn, distX);\n+}\n+\n+int\n+cAdjust (graph_t * g, int mode)\n+{\n+  int ret, i, nnodes = agnnodes (g);\n+  nitem *nlist = (nitem *) gmalloc ((nnodes) * sizeof (nitem));\n+  node_t *n;\n+  for (n = agfstnode (g); n; n = agnxtnode (g, n))\n+    {\n+    }\n+  if (overlaps (nlist, nnodes))\n+    {\n+      switch ((adjust_mode) mode)\n+\t{\n+\tcase AM_ORTHOXY:\n+\t  constrainX (g, nlist, nnodes, intersectY, 1);\n+\tcase AM_ORTHO:\n+\t  constrainX (g, nlist, nnodes, intersectY0, 1);\n+\t  constrainX (g, nlist, nnodes, intersectY, 1);\n+\tcase AM_PORTHO:\n+\tdefault:\n+\t  constrainX (g, nlist, nnodes, intersectY0, 0);\n+\t}\n+    }\n+}"}]}