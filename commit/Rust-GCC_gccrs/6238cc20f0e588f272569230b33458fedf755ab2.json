{"sha": "6238cc20f0e588f272569230b33458fedf755ab2", "node_id": "C_kwDOANBUbNoAKDYyMzhjYzIwZjBlNTg4ZjI3MjU2OTIzMGIzMzQ1OGZlZGY3NTVhYjI", "commit": {"author": {"name": "Lewis Hyatt", "email": "lhyatt@gmail.com", "date": "2022-11-01T21:50:27Z"}, "committer": {"name": "Lewis Hyatt", "email": "lhyatt@gmail.com", "date": "2022-11-15T15:50:23Z"}, "message": "diagnostics: Fix macro tracking for ad-hoc locations\n\nThe result of linemap_resolve_location() can be an ad-hoc location, if that is\nwhat was stored in a relevant macro map.  maybe_unwind_expanded_macro_loc()\ndid not previously handle this case, causing it to print the wrong tracking\ninformation for an example such as the new testcase macro-trace-1.c.  Fix that\nby checking for ad-hoc locations where needed.\n\ngcc/ChangeLog:\n\n\t* tree-diagnostic.cc (maybe_unwind_expanded_macro_loc): Handle ad-hoc\n\tlocation in return value of linemap_resolve_location().\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/cpp/macro-trace-1.c: New test.", "tree": {"sha": "300f206677cf5b7b0739d258452779dd8c188f1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/300f206677cf5b7b0739d258452779dd8c188f1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6238cc20f0e588f272569230b33458fedf755ab2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6238cc20f0e588f272569230b33458fedf755ab2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6238cc20f0e588f272569230b33458fedf755ab2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6238cc20f0e588f272569230b33458fedf755ab2/comments", "author": null, "committer": null, "parents": [{"sha": "3037f11fb86eda234a27ab26748958f71a805005", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3037f11fb86eda234a27ab26748958f71a805005", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3037f11fb86eda234a27ab26748958f71a805005"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "34cfbb3dad3bba4cec4911b91cb616868cc09cf4", "filename": "gcc/testsuite/c-c++-common/cpp/macro-trace-1.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6238cc20f0e588f272569230b33458fedf755ab2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fmacro-trace-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6238cc20f0e588f272569230b33458fedf755ab2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fmacro-trace-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fmacro-trace-1.c?ref=6238cc20f0e588f272569230b33458fedf755ab2", "patch": "@@ -0,0 +1,4 @@\n+/* This token is long enough to require an ad-hoc location. Make sure that\n+   the macro trace still prints properly.  */\n+#define X \"0123456789012345678901234567689\" /* { dg-error {expected .* before string constant} } */\n+X /* { dg-note {in expansion of macro 'X'} } */"}, {"sha": "5cf3a1c17d23b185bae3fdb3f0c7e7ecc29bfb30", "filename": "gcc/tree-diagnostic.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6238cc20f0e588f272569230b33458fedf755ab2/gcc%2Ftree-diagnostic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6238cc20f0e588f272569230b33458fedf755ab2/gcc%2Ftree-diagnostic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-diagnostic.cc?ref=6238cc20f0e588f272569230b33458fedf755ab2", "patch": "@@ -190,14 +190,17 @@ maybe_unwind_expanded_macro_loc (diagnostic_context *context,\n         location_t l = \n           linemap_resolve_location (line_table, resolved_def_loc,\n                                     LRK_SPELLING_LOCATION,  &m);\n-        if (l < RESERVED_LOCATION_COUNT || LINEMAP_SYSP (m))\n+\tlocation_t l0 = l;\n+\tif (IS_ADHOC_LOC (l0))\n+\t  l0 = get_location_from_adhoc_loc (line_table, l0);\n+\tif (l0 < RESERVED_LOCATION_COUNT || LINEMAP_SYSP (m))\n           continue;\n         \n \t/* We need to print the context of the macro definition only\n \t   when the locus of the first displayed diagnostic (displayed\n \t   before this trace) was inside the definition of the\n \t   macro.  */\n-        int resolved_def_loc_line = SOURCE_LINE (m, l);\n+\tconst int resolved_def_loc_line = SOURCE_LINE (m, l0);\n         if (ix == 0 && saved_location_line != resolved_def_loc_line)\n           {\n             diagnostic_append_note (context, resolved_def_loc, "}]}