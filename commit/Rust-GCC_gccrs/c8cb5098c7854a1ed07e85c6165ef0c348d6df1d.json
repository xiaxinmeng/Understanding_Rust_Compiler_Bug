{"sha": "c8cb5098c7854a1ed07e85c6165ef0c348d6df1d", "node_id": "C_kwDOANBUbNoAKGM4Y2I1MDk4Yzc4NTRhMWVkMDdlODVjNjE2NWVmMGMzNDhkNmRmMWQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-23T11:03:55Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-23T11:03:55Z"}, "message": "warn-recursion: Don't warn for __builtin_calls in gnu_inline extern inline functions [PR104633]\n\nThe first two testcases show different ways how e.g. the glibc\n_FORTIFY_SOURCE wrappers are implemented, and on Winfinite-recursion-3.c\nthe new -Winfinite-recursion warning emits a false positive warning.\n\nIt is a false positive because when a builtin with 2 names is called\nthrough the __builtin_ name (but not all builtins have a name prefixed\nexactly like that) from extern inline function with gnu_inline semantics,\nit doesn't mean the compiler will ever attempt to use the user inline\nwrapper for the call, the __builtin_ just does what the builtin function\nis expected to do and either expands into some compiler generated code,\nor if the compiler decides to emit a call it will use an actual definition\nof the function, but that is not the extern inline gnu_inline function\nwhich is never emitted out of line.\nCompared to that, in Winfinite-recursion-5.c the extern inline gnu_inline\nwrapper calls the builtin by the same name as the function's name and in\nthat case it is infinite recursion, we actuall try to inline the recursive\ncall and also error because the recursion is infinite during inlining;\nwithout always_inline we wouldn't error but it is still infinite recursion,\nthe user has no control on how many recursive calls we actually inline.\n\n2022-02-22  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c/104633\n\t* gimple-warn-recursion.cc (pass_warn_recursion::find_function_exit):\n\tDon't warn about calls to corresponding builtin from extern inline\n\tgnu_inline wrappers.\n\n\t* gcc.dg/Winfinite-recursion-3.c: New test.\n\t* gcc.dg/Winfinite-recursion-4.c: New test.\n\t* gcc.dg/Winfinite-recursion-5.c: New test.", "tree": {"sha": "68479c8aa737f8ac5c32c6dc1deef31b7d608ce5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68479c8aa737f8ac5c32c6dc1deef31b7d608ce5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8cb5098c7854a1ed07e85c6165ef0c348d6df1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8cb5098c7854a1ed07e85c6165ef0c348d6df1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8cb5098c7854a1ed07e85c6165ef0c348d6df1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8cb5098c7854a1ed07e85c6165ef0c348d6df1d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06770148711226ba243b964451dfa8816d5d23e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06770148711226ba243b964451dfa8816d5d23e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06770148711226ba243b964451dfa8816d5d23e5"}], "stats": {"total": 77, "additions": 72, "deletions": 5}, "files": [{"sha": "91a3cdbacd4cf14d1abf11e2a31102ec1c91c91c", "filename": "gcc/gimple-warn-recursion.cc", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cb5098c7854a1ed07e85c6165ef0c348d6df1d/gcc%2Fgimple-warn-recursion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cb5098c7854a1ed07e85c6165ef0c348d6df1d/gcc%2Fgimple-warn-recursion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-warn-recursion.cc?ref=c8cb5098c7854a1ed07e85c6165ef0c348d6df1d", "patch": "@@ -112,13 +112,25 @@ pass_warn_recursion::find_function_exit (basic_block bb)\n \t  if (!strcmp (name, \"siglongjmp\"))\n \t    return true;\n \n-\t  if (m_built_in && gimple_call_builtin_p (stmt, BUILT_IN_NORMAL)\n+\t  if (m_built_in\n+\t      && gimple_call_builtin_p (stmt, BUILT_IN_NORMAL)\n \t      && m_built_in == DECL_FUNCTION_CODE (fndecl))\n \t    {\n-\t      /* The call is being made from the definition of a built-in\n-\t\t (e.g., in a replacement of one) to itself.  */\n-\t      m_calls->safe_push (stmt);\n-\t      return false;\n+\t      const char *cname\n+\t\t= IDENTIFIER_POINTER (DECL_NAME (current_function_decl));\n+\t      /* Don't warn about gnu_inline extern inline function\n+\t\t like strcpy calling __builtin_strcpy, that is fine,\n+\t\t if some call is made (the builtin isn't expanded inline),\n+\t\t a call is made to the external definition.  */\n+\t      if (!(DECL_DECLARED_INLINE_P (current_function_decl)\n+\t\t    && DECL_EXTERNAL (current_function_decl))\n+\t\t  || strcmp (name, cname) == 0)\n+\t\t{\n+\t\t  /* The call is being made from the definition of a built-in\n+\t\t     (e.g., in a replacement of one) to itself.  */\n+\t\t  m_calls->safe_push (stmt);\n+\t\t  return false;\n+\t\t}\n \t    }\n \t}\n "}, {"sha": "9205422041ed847cccb1947ee7a07a9d5f1102a6", "filename": "gcc/testsuite/gcc.dg/Winfinite-recursion-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cb5098c7854a1ed07e85c6165ef0c348d6df1d/gcc%2Ftestsuite%2Fgcc.dg%2FWinfinite-recursion-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cb5098c7854a1ed07e85c6165ef0c348d6df1d/gcc%2Ftestsuite%2Fgcc.dg%2FWinfinite-recursion-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWinfinite-recursion-3.c?ref=c8cb5098c7854a1ed07e85c6165ef0c348d6df1d", "patch": "@@ -0,0 +1,18 @@\n+/* PR c/104633 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Winfinite-recursion\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+int memcmp (const void *, const void *, size_t);\n+\n+extern inline __attribute__((always_inline, gnu_inline)) int\n+memcmp (const void *p, const void *q, size_t size)\t/* { dg-bogus \"infinite recursion detected\" } */\n+{\n+  return __builtin_memcmp (p, q, size);\t\t\t/* { dg-bogus \"recursive call\" } */\n+}\n+\n+int\n+foo (const void *p, const void *q, size_t size)\n+{\n+  return memcmp (p, q, size);\n+}"}, {"sha": "e9a2bb675d1976ee520d228f1bde79e76aa11662", "filename": "gcc/testsuite/gcc.dg/Winfinite-recursion-4.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cb5098c7854a1ed07e85c6165ef0c348d6df1d/gcc%2Ftestsuite%2Fgcc.dg%2FWinfinite-recursion-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cb5098c7854a1ed07e85c6165ef0c348d6df1d/gcc%2Ftestsuite%2Fgcc.dg%2FWinfinite-recursion-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWinfinite-recursion-4.c?ref=c8cb5098c7854a1ed07e85c6165ef0c348d6df1d", "patch": "@@ -0,0 +1,19 @@\n+/* PR c/104633 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Winfinite-recursion\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+int memcmp (const void *, const void *, size_t);\n+__typeof (memcmp) __memcmp_alias __asm (\"memcmp\");\n+\n+extern inline __attribute__((always_inline, gnu_inline)) int\n+memcmp (const void *p, const void *q, size_t size)\t/* { dg-bogus \"infinite recursion detected\" } */\n+{\n+  return __memcmp_alias (p, q, size);\t\t\t/* { dg-bogus \"recursive call\" } */\n+}\n+\n+int\n+foo (const void *p, const void *q, size_t size)\n+{\n+  return memcmp (p, q, size);\n+}"}, {"sha": "1c3d1b48f941bec704e5bf376d5ffbc7aceebab6", "filename": "gcc/testsuite/gcc.dg/Winfinite-recursion-5.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cb5098c7854a1ed07e85c6165ef0c348d6df1d/gcc%2Ftestsuite%2Fgcc.dg%2FWinfinite-recursion-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cb5098c7854a1ed07e85c6165ef0c348d6df1d/gcc%2Ftestsuite%2Fgcc.dg%2FWinfinite-recursion-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWinfinite-recursion-5.c?ref=c8cb5098c7854a1ed07e85c6165ef0c348d6df1d", "patch": "@@ -0,0 +1,18 @@\n+/* PR c/104633 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Winfinite-recursion\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+int memcmp (const void *, const void *, size_t);\n+\n+extern inline __attribute__((always_inline, gnu_inline)) int\n+memcmp (const void *p, const void *q, size_t size)\t/* { dg-warning \"infinite recursion detected\" } */\n+{\t\t\t\t\t\t\t/* { dg-error \"inlining failed in call to\" \"\" { target *-*-* } .-1 } */\n+  return memcmp (p, q, size);\t\t\t\t/* { dg-message \"recursive call\" } */\n+}\t\t\t\t\t\t\t/* { dg-message \"called from here\" \"\" { target *-*-* } .-1 } */\n+\n+int\n+foo (const void *p, const void *q, size_t size)\n+{\n+  return memcmp (p, q, size);\n+}"}]}