{"sha": "80d7f5d32237ffb207f232a6f4d5a25bff681ef1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBkN2Y1ZDMyMjM3ZmZiMjA3ZjIzMmE2ZjRkNWEyNWJmZjY4MWVmMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-11-05T07:46:03Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-11-05T07:46:03Z"}, "message": "decl.c (omp_declare_variant_finalize_one): Call declare_simd_adjust_this not just on the context...\n\n\t* decl.c (omp_declare_variant_finalize_one): Call\n\tdeclare_simd_adjust_this not just on the context, but also on the\n\tvariant-id expression for methods.  Don't call\n\tcp_get_callee_fndecl_nofold, call cp_get_callee and only if it is\n\tsafe cp_get_fndecl_from_callee.  Don't try to print as %qD\n\tNULL in diagnostics.\n\t* pt.c (tsubst_attribute): Handle \"omp declare variant base\"\n\tattribute.\n\t(tsubst_function_decl): Call omp_declare_variant_finalize\n\tif there are any \"omp declare variant base\" attributes left.\n\n\t* g++.dg/gomp/declare-variant-7.C: New test.\n\t* g++.dg/gomp/declare-variant-8.C: New test.\n\nFrom-SVN: r277814", "tree": {"sha": "20b5ccf88623daa64bbcd8ed163202c8695e8733", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20b5ccf88623daa64bbcd8ed163202c8695e8733"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80d7f5d32237ffb207f232a6f4d5a25bff681ef1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80d7f5d32237ffb207f232a6f4d5a25bff681ef1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80d7f5d32237ffb207f232a6f4d5a25bff681ef1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80d7f5d32237ffb207f232a6f4d5a25bff681ef1/comments", "author": null, "committer": null, "parents": [{"sha": "2b13f5a622305877357be223d2a4a11c5ad1d499", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b13f5a622305877357be223d2a4a11c5ad1d499", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b13f5a622305877357be223d2a4a11c5ad1d499"}], "stats": {"total": 209, "additions": 204, "deletions": 5}, "files": [{"sha": "9b16121c503d3010da396948514a4897bbe78969", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80d7f5d32237ffb207f232a6f4d5a25bff681ef1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80d7f5d32237ffb207f232a6f4d5a25bff681ef1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=80d7f5d32237ffb207f232a6f4d5a25bff681ef1", "patch": "@@ -1,7 +1,20 @@\n+2019-11-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* decl.c (omp_declare_variant_finalize_one): Call\n+\tdeclare_simd_adjust_this not just on the context, but also on the\n+\tvariant-id expression for methods.  Don't call\n+\tcp_get_callee_fndecl_nofold, call cp_get_callee and only if it is\n+\tsafe cp_get_fndecl_from_callee.  Don't try to print as %qD\n+\tNULL in diagnostics.\n+\t* pt.c (tsubst_attribute): Handle \"omp declare variant base\"\n+\tattribute.\n+\t(tsubst_function_decl): Call omp_declare_variant_finalize\n+\tif there are any \"omp declare variant base\" attributes left.\n+\n 2019-11-04  Kamlesh Kumar  <kamleshbhalui@gmail.com>\n \n \tPR c++/91979 - mangling nullptr expression\n-\t* cp/mangle.c (write_template_arg_literal): Handle nullptr\n+\t* mangle.c (write_template_arg_literal): Handle nullptr\n \tmangling.\n \n 2019-11-04  Jason Merrill  <jason@redhat.com>"}, {"sha": "07112aad092561f2d1c334bffefad9bf34e7203d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80d7f5d32237ffb207f232a6f4d5a25bff681ef1/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80d7f5d32237ffb207f232a6f4d5a25bff681ef1/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=80d7f5d32237ffb207f232a6f4d5a25bff681ef1", "patch": "@@ -7099,8 +7099,12 @@ static bool\n omp_declare_variant_finalize_one (tree decl, tree attr)\n {\n   if (TREE_CODE (TREE_TYPE (decl)) == METHOD_TYPE)\n-    walk_tree (&TREE_VALUE (TREE_VALUE (attr)), declare_simd_adjust_this,\n-\t       DECL_ARGUMENTS (decl), NULL);\n+    {\n+      walk_tree (&TREE_VALUE (TREE_VALUE (attr)), declare_simd_adjust_this,\n+\t\t DECL_ARGUMENTS (decl), NULL);\n+      walk_tree (&TREE_PURPOSE (TREE_VALUE (attr)), declare_simd_adjust_this,\n+\t\t DECL_ARGUMENTS (decl), NULL);\n+    }\n \n   tree ctx = TREE_VALUE (TREE_VALUE (attr));\n   tree simd = omp_get_context_selector (ctx, \"construct\", \"simd\");\n@@ -7179,7 +7183,16 @@ omp_declare_variant_finalize_one (tree decl, tree attr)\n   if (variant == error_mark_node && !processing_template_decl)\n     return true;\n \n-  variant = cp_get_callee_fndecl_nofold (variant);\n+  variant = cp_get_callee (variant);\n+  if (variant)\n+    {\n+      if (TREE_CODE (variant) == FUNCTION_DECL)\n+\t;\n+      else if (TREE_TYPE (variant) && INDIRECT_TYPE_P (TREE_TYPE (variant)))\n+\tvariant = cp_get_fndecl_from_callee (variant, false);\n+      else\n+\tvariant = NULL_TREE;\n+    }\n \n   input_location = save_loc;\n \n@@ -7211,7 +7224,7 @@ omp_declare_variant_finalize_one (tree decl, tree attr)\n     }\n   else if (!processing_template_decl)\n     {\n-      error_at (varid_loc, \"could not find variant %qD declaration\", variant);\n+      error_at (varid_loc, \"could not find variant declaration\");\n       return true;\n     }\n "}, {"sha": "172d3d869fbfa0c8867f5e62e09413efe5a85983", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80d7f5d32237ffb207f232a6f4d5a25bff681ef1/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80d7f5d32237ffb207f232a6f4d5a25bff681ef1/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=80d7f5d32237ffb207f232a6f4d5a25bff681ef1", "patch": "@@ -11119,6 +11119,76 @@ tsubst_attribute (tree t, tree *decl_p, tree args,\n       else\n \tval = NULL_TREE;\n     }\n+  else if (flag_openmp\n+\t   && is_attribute_p (\"omp declare variant base\",\n+\t\t\t      get_attribute_name (t)))\n+    {\n+      ++cp_unevaluated_operand;\n+      tree varid\n+\t= tsubst_expr (TREE_PURPOSE (val), args, complain,\n+\t\t       in_decl, /*integral_constant_expression_p=*/false);\n+      --cp_unevaluated_operand;\n+      tree chain = TREE_CHAIN (val);\n+      location_t match_loc = cp_expr_loc_or_input_loc (TREE_PURPOSE (chain));\n+      tree ctx = copy_list (TREE_VALUE (val));\n+      tree simd = get_identifier (\"simd\");\n+      tree score = get_identifier (\" score\");\n+      tree condition = get_identifier (\"condition\");\n+      for (tree t1 = ctx; t1; t1 = TREE_CHAIN (t1))\n+\t{\n+\t  const char *set = IDENTIFIER_POINTER (TREE_PURPOSE (t1));\n+\t  TREE_VALUE (t1) = copy_list (TREE_VALUE (t1));\n+\t  for (tree t2 = TREE_VALUE (t1); t2; t2 = TREE_CHAIN (t2))\n+\t    {\n+\t      if (TREE_PURPOSE (t2) == simd && set[0] == 'c')\n+\t\t{\n+\t\t  tree clauses = TREE_VALUE (t2);\n+\t\t  clauses = tsubst_omp_clauses (clauses,\n+\t\t\t\t\t\tC_ORT_OMP_DECLARE_SIMD, args,\n+\t\t\t\t\t\tcomplain, in_decl);\n+\t\t  c_omp_declare_simd_clauses_to_decls (*decl_p, clauses);\n+\t\t  clauses = finish_omp_clauses (clauses, C_ORT_OMP_DECLARE_SIMD);\n+\t\t  TREE_VALUE (t2) = clauses;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  TREE_VALUE (t2) = copy_list (TREE_VALUE (t2));\n+\t\t  for (tree t3 = TREE_VALUE (t2); t3; t3 = TREE_CHAIN (t3))\n+\t\t    if (TREE_VALUE (t3))\n+\t\t      {\n+\t\t\tbool allow_string\n+\t\t\t  = ((TREE_PURPOSE (t2) != condition || set[0] != 'u')\n+\t\t\t     && TREE_PURPOSE (t3) != score);\n+\t\t\tif (TREE_CODE (t3) == STRING_CST && allow_string)\n+\t\t\t  continue;\n+\t\t\ttree v = TREE_VALUE (t3);\n+\t\t\tv = tsubst_expr (v, args, complain, in_decl, true);\n+\t\t\tv = fold_non_dependent_expr (v);\n+\t\t\tif (!INTEGRAL_TYPE_P (TREE_TYPE (v))\n+\t\t\t    || !tree_fits_shwi_p (v))\n+\t\t\t  {\n+\t\t\t    location_t loc\n+\t\t\t      = cp_expr_loc_or_loc (TREE_VALUE (t3),\n+\t\t\t\t\t\t    match_loc);\n+\t\t\t    if (TREE_PURPOSE (t3) == score)\n+\t\t\t      error_at (loc, \"score argument must be \"\n+\t\t\t\t\t     \"constant integer expression\");\n+\t\t\t    else if (allow_string)\n+\t\t\t      error_at (loc, \"property must be constant \"\n+\t\t\t\t\t     \"integer expression or string \"\n+\t\t\t\t\t     \"literal\");\n+\t\t\t    else\n+\t\t\t      error_at (loc, \"property must be constant \"\n+\t\t\t\t\t     \"integer expression\");\n+\t\t\t    return NULL_TREE;\n+\t\t\t  }\n+\t\t\tTREE_VALUE (t3) = v;\n+\t\t      }\n+\t\t}\n+\t    }\n+\t}\n+      val = tree_cons (varid, ctx, chain);\n+    }\n   /* If the first attribute argument is an identifier, don't\n      pass it through tsubst.  Attributes like mode, format,\n      cleanup and several target specific attributes expect it\n@@ -13579,6 +13649,11 @@ tsubst_function_decl (tree t, tree args, tsubst_flags_t complain,\n \n   apply_late_template_attributes (&r, DECL_ATTRIBUTES (r), 0,\n \t\t\t\t  args, complain, in_decl);\n+  if (flag_openmp)\n+    if (tree attr = lookup_attribute (\"omp declare variant base\",\n+\t\t\t\t      DECL_ATTRIBUTES (r)))\n+      omp_declare_variant_finalize (r, attr);\n+\n   return r;\n }\n "}, {"sha": "cdb6b31286a97a0a10b4135352d620392bb6dcd3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80d7f5d32237ffb207f232a6f4d5a25bff681ef1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80d7f5d32237ffb207f232a6f4d5a25bff681ef1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=80d7f5d32237ffb207f232a6f4d5a25bff681ef1", "patch": "@@ -1,3 +1,8 @@\n+2019-11-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/gomp/declare-variant-7.C: New test.\n+\t* g++.dg/gomp/declare-variant-8.C: New test.\n+\n 2019-11-04  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR testsuite/92302"}, {"sha": "4a3e831bc29e842083e2babf189b4a0736f07aa2", "filename": "gcc/testsuite/g++.dg/gomp/declare-variant-7.C", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80d7f5d32237ffb207f232a6f4d5a25bff681ef1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-variant-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80d7f5d32237ffb207f232a6f4d5a25bff681ef1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-variant-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-variant-7.C?ref=80d7f5d32237ffb207f232a6f4d5a25bff681ef1", "patch": "@@ -0,0 +1,75 @@\n+// Test parsing of #pragma omp declare variant\n+// { dg-do compile }\n+// { dg-additional-options \"-fdump-tree-gimple\" }\n+\n+void f01 ();\n+#pragma omp declare variant (f01) match (user={condition(1)},device={arch(x86_64)})\n+template <int N>\n+void f02 ();\n+void f03 ();\n+#pragma omp declare variant (f03) match (user={condition(score(N+2):N)})\n+template <int N>\n+void f04 ();\n+template <int N>\n+void f05 ();\n+#pragma omp declare variant (f05<N>) match (user={condition((T)N)},implementation={vendor(gnu)})\n+template <int N, typename T>\n+void f06 ();\n+void f07 ();\n+#pragma omp declare variant (f07) match (user={condition(score(N+2):N)})\n+template <int N>\n+void f08 ();\n+template <int N>\n+void f09 ();\n+#pragma omp declare variant (f09<N>) match (user={condition((T) N)})\n+template <int N, typename T>\n+void f10 ();\n+template <int N>\n+struct S\n+{\n+  template <typename T>\n+  void f11 (T) {}\n+  #pragma omp declare variant (f11<T>) match (user={condition(score(N):N)})\n+  template <typename T>\n+  void f12 (T) {}\n+  template <typename T>\n+  void f13 (T);\n+  #pragma omp declare variant (f13<T>) match (user={condition(score(N):N)})\n+  template <typename T>\n+  void f14 (T);\n+  int s;\n+};\n+template <int N>\n+struct T\n+{\n+  template <typename T>\n+  void f15 (T) {}\n+  #pragma omp declare variant (f15<T>) match (user={condition(score(N):N)})\n+  template <typename T>\n+  void f16 (T) {}\n+  template <typename T>\n+  void f17 (T);\n+  #pragma omp declare variant (f17<T>) match (user={condition(score(N):N)})\n+  template <typename T>\n+  void f18 (T);\n+  int t;\n+};\n+\n+void\n+test ()\n+{\n+  f02<1> ();\t// { dg-final { scan-tree-dump-times \"f01 \\\\\\(\\\\\\);\" 1 \"gimple\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } }\n+\t\t// { dg-final { scan-tree-dump-times \"f02<1> \\\\\\(\\\\\\);\" 1 \"gimple\" { target { { i?86-*-* x86_64-*-* } && { ! lp64 } } } } }\n+\t\t// { dg-final { scan-tree-dump-times \"f02<1> \\\\\\(\\\\\\);\" 1 \"gimple\" { target { ! { i?86-*-* x86_64-*-* } } } } }\n+  f04<1> ();\t\t// { dg-final { scan-tree-dump-times \"f03 \\\\\\(\\\\\\);\" 1 \"gimple\" } }\n+  f06<1, long> ();\t// { dg-final { scan-tree-dump-times \"f05<1> \\\\\\(\\\\\\);\" 1 \"gimple\" } }\n+  f08<0> ();\t\t// { dg-final { scan-tree-dump-times \"f08<0> \\\\\\(\\\\\\);\" 1 \"gimple\" } }\n+  f10<0, short int> ();\t// { dg-final { scan-tree-dump-times \"f10<0, short int> \\\\\\(\\\\\\);\" 1 \"gimple\" } }\n+  S<1> s;\n+  s.f12 (0);\t\t// { dg-final { scan-tree-dump-times \"S<1>::f11<int> \\\\\\(&s, 0\\\\\\);\" 1 \"gimple\" } }\n+  s.f12 (0.0);\t\t// { dg-final { scan-tree-dump-times \"S<1>::f11<double> \\\\\\(&s, 0.0\\\\\\);\" 1 \"gimple\" } }\n+  s.f14 (0LL);\t\t// { dg-final { scan-tree-dump-times \"S<1>::f13<long long int> \\\\\\(&s, 0\\\\\\);\" 1 \"gimple\" } }\n+  T<0> t;\n+  t.f16 (s);\t\t// { dg-final { scan-tree-dump-times \"T<0>::f16<S<1> > \\\\\\(&t, s\\\\\\);\" 1 \"gimple\" } }\n+  t.f18 (s);\t\t// { dg-final { scan-tree-dump-times \"T<0>::f18<S<1> > \\\\\\(&t, s\\\\\\);\" 1 \"gimple\" } }\n+}"}, {"sha": "f72d862250ab4334bda0afe96c4fccd928620043", "filename": "gcc/testsuite/g++.dg/gomp/declare-variant-8.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80d7f5d32237ffb207f232a6f4d5a25bff681ef1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-variant-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80d7f5d32237ffb207f232a6f4d5a25bff681ef1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-variant-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-variant-8.C?ref=80d7f5d32237ffb207f232a6f4d5a25bff681ef1", "patch": "@@ -0,0 +1,18 @@\n+// Test parsing of #pragma omp declare variant\n+// { dg-do compile }\n+\n+void f01 ();\n+#pragma omp declare variant (f01) match (user={condition((T) 1)})\t// { dg-error \"property must be constant integer expression\" }\n+template <typename T>\n+void f02 ();\n+void f03 ();\n+#pragma omp declare variant (f03) match (user={condition(score((T) 1):1)})\t// { dg-error \"score argument must be constant integer expression\" }\n+template <typename T>\n+void f04 ();\n+\n+void\n+test ()\n+{\n+  f02 <double> ();\n+  f04 <float> ();\n+}"}]}