{"sha": "f9a12f7b8fd56359f1eee124309fc783f83466b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjlhMTJmN2I4ZmQ1NjM1OWYxZWVlMTI0MzA5ZmM3ODNmODM0NjZiNQ==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2015-07-01T17:42:20Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2015-07-01T17:42:20Z"}, "message": "linux-atomic.c (__kernel_cmpxchg): Reorder arguments to better match light-weight syscall argument order.\n\n\t* config/pa/linux-atomic.c (__kernel_cmpxchg): Reorder arguments to\n\tbetter match light-weight syscall argument order.\n\t(__kernel_cmpxchg2): Likewise.\n\tAdjust callers.\n\nFrom-SVN: r225267", "tree": {"sha": "e148d13c4316a0d91e7774e8f892b894303cd8e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e148d13c4316a0d91e7774e8f892b894303cd8e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9a12f7b8fd56359f1eee124309fc783f83466b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9a12f7b8fd56359f1eee124309fc783f83466b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9a12f7b8fd56359f1eee124309fc783f83466b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9a12f7b8fd56359f1eee124309fc783f83466b5/comments", "author": null, "committer": null, "parents": [{"sha": "5747290f51626242079a83651beb4a981b53d268", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5747290f51626242079a83651beb4a981b53d268", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5747290f51626242079a83651beb4a981b53d268"}], "stats": {"total": 59, "additions": 33, "deletions": 26}, "files": [{"sha": "be1fbab2cb62b6e28580eba799822f4d494530b3", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a12f7b8fd56359f1eee124309fc783f83466b5/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a12f7b8fd56359f1eee124309fc783f83466b5/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=f9a12f7b8fd56359f1eee124309fc783f83466b5", "patch": "@@ -1,3 +1,10 @@\n+2015-07-01  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* config/pa/linux-atomic.c (__kernel_cmpxchg): Reorder arguments to\n+\tbetter match light-weight syscall argument order.\n+\t(__kernel_cmpxchg2): Likewise.\n+\tAdjust callers.\n+\n 2015-06-30  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config.host: Support i[34567]86-*-elfiamcu target."}, {"sha": "750cb8b13c122291522b356777948dd90498e317", "filename": "libgcc/config/pa/linux-atomic.c", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a12f7b8fd56359f1eee124309fc783f83466b5/libgcc%2Fconfig%2Fpa%2Flinux-atomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a12f7b8fd56359f1eee124309fc783f83466b5/libgcc%2Fconfig%2Fpa%2Flinux-atomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fpa%2Flinux-atomic.c?ref=f9a12f7b8fd56359f1eee124309fc783f83466b5", "patch": "@@ -46,18 +46,17 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n /* Kernel helper for compare-and-exchange a 32-bit value.  */\n static inline long\n-__kernel_cmpxchg (int oldval, int newval, int *mem)\n+__kernel_cmpxchg (int *mem, int oldval, int newval)\n {\n   register unsigned long lws_mem asm(\"r26\") = (unsigned long) (mem);\n-  register long lws_ret   asm(\"r28\");\n-  register long lws_errno asm(\"r21\");\n   register int lws_old asm(\"r25\") = oldval;\n   register int lws_new asm(\"r24\") = newval;\n+  register long lws_ret   asm(\"r28\");\n+  register long lws_errno asm(\"r21\");\n   asm volatile (\t\"ble\t0xb0(%%sr2, %%r0)\t\\n\\t\"\n-\t\t\t\"ldi\t%5, %%r20\t\t\\n\\t\"\n-\t: \"=r\" (lws_ret), \"=r\" (lws_errno), \"=r\" (lws_mem),\n-\t  \"=r\" (lws_old), \"=r\" (lws_new)\n-\t: \"i\" (LWS_CAS), \"2\" (lws_mem), \"3\" (lws_old), \"4\" (lws_new)\n+\t\t\t\"ldi\t%2, %%r20\t\t\\n\\t\"\n+\t: \"=r\" (lws_ret), \"=r\" (lws_errno)\n+\t: \"i\" (LWS_CAS), \"r\" (lws_mem), \"r\" (lws_old), \"r\" (lws_new)\n \t: \"r1\", \"r20\", \"r22\", \"r23\", \"r29\", \"r31\", \"memory\"\n   );\n   if (__builtin_expect (lws_errno == -EFAULT || lws_errno == -ENOSYS, 0))\n@@ -73,19 +72,20 @@ __kernel_cmpxchg (int oldval, int newval, int *mem)\n }\n \n static inline long\n-__kernel_cmpxchg2 (const void *oldval, const void *newval, void *mem,\n+__kernel_cmpxchg2 (void *mem, const void *oldval, const void *newval,\n \t\t   int val_size)\n {\n   register unsigned long lws_mem asm(\"r26\") = (unsigned long) (mem);\n-  register long lws_ret   asm(\"r28\");\n-  register long lws_errno asm(\"r21\");\n   register unsigned long lws_old asm(\"r25\") = (unsigned long) oldval;\n   register unsigned long lws_new asm(\"r24\") = (unsigned long) newval;\n   register int lws_size asm(\"r23\") = val_size;\n+  register long lws_ret   asm(\"r28\");\n+  register long lws_errno asm(\"r21\");\n   asm volatile (\t\"ble\t0xb0(%%sr2, %%r0)\t\\n\\t\"\n-\t\t\t\"ldi\t%2, %%r20\t\t\\n\\t\"\n-\t: \"=r\" (lws_ret), \"=r\" (lws_errno)\n-\t: \"i\" (2), \"r\" (lws_mem), \"r\" (lws_old), \"r\" (lws_new), \"r\" (lws_size)\n+\t\t\t\"ldi\t%6, %%r20\t\t\\n\\t\"\n+\t: \"=r\" (lws_ret), \"=r\" (lws_errno), \"+r\" (lws_mem),\n+\t  \"+r\" (lws_old), \"+r\" (lws_new), \"+r\" (lws_size)\n+\t: \"i\" (2)\n \t: \"r1\", \"r20\", \"r22\", \"r29\", \"r31\", \"fr4\", \"memory\"\n   );\n   if (__builtin_expect (lws_errno == -EFAULT || lws_errno == -ENOSYS, 0))\n@@ -116,7 +116,7 @@ __kernel_cmpxchg2 (const void *oldval, const void *newval, void *mem,\n     do {\t\t\t\t\t\t\t\t\\\n       tmp = __atomic_load_n (ptr, __ATOMIC_SEQ_CST);\t\t\t\\\n       newval = PFX_OP (tmp INF_OP val);\t\t\t\t\t\\\n-      failure = __kernel_cmpxchg2 (&tmp, &newval, ptr, INDEX);\t\t\\\n+      failure = __kernel_cmpxchg2 (ptr, &tmp, &newval, INDEX);\t\t\\\n     } while (failure != 0);\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     return tmp;\t\t\t\t\t\t\t\t\\\n@@ -146,7 +146,7 @@ FETCH_AND_OP_2 (nand, ~, &, signed char, 1, 0)\n     do {\t\t\t\t\t\t\t\t\\\n       tmp = __atomic_load_n (ptr, __ATOMIC_SEQ_CST);\t\t\t\\\n       newval = PFX_OP (tmp INF_OP val);\t\t\t\t\t\\\n-      failure = __kernel_cmpxchg2 (&tmp, &newval, ptr, INDEX);\t\t\\\n+      failure = __kernel_cmpxchg2 (ptr, &tmp, &newval, INDEX);\t\t\\\n     } while (failure != 0);\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     return PFX_OP (tmp INF_OP val);\t\t\t\t\t\\\n@@ -174,7 +174,7 @@ OP_AND_FETCH_2 (nand, ~, &, signed char, 1, 0)\n \t\t\t\t\t\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\t\\\n       tmp = __atomic_load_n (ptr, __ATOMIC_SEQ_CST);\t\t\t\\\n-      failure = __kernel_cmpxchg (tmp, PFX_OP (tmp INF_OP val), ptr);\t\\\n+      failure = __kernel_cmpxchg (ptr, tmp, PFX_OP (tmp INF_OP val));\t\\\n     } while (failure != 0);\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     return tmp;\t\t\t\t\t\t\t\t\\\n@@ -195,7 +195,7 @@ FETCH_AND_OP_WORD (nand, ~, &)\n \t\t\t\t\t\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\t\\\n       tmp = __atomic_load_n (ptr, __ATOMIC_SEQ_CST);\t\t\t\\\n-      failure = __kernel_cmpxchg (tmp, PFX_OP (tmp INF_OP val), ptr);\t\\\n+      failure = __kernel_cmpxchg (ptr, tmp, PFX_OP (tmp INF_OP val));\t\\\n     } while (failure != 0);\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     return PFX_OP (tmp INF_OP val);\t\t\t\t\t\\\n@@ -225,7 +225,7 @@ typedef unsigned char bool;\n \tif (__builtin_expect (oldval != actual_oldval, 0))\t\t\\\n \t  return actual_oldval;\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-\tfail = __kernel_cmpxchg2 (&actual_oldval, &newval, ptr, INDEX);\t\\\n+\tfail = __kernel_cmpxchg2 (ptr, &actual_oldval, &newval, INDEX);\t\\\n \t\t\t\t\t\t\t\t\t\\\n \tif (__builtin_expect (!fail, 1))\t\t\t\t\\\n \t  return actual_oldval;\t\t\t\t\t\t\\\n@@ -236,7 +236,7 @@ typedef unsigned char bool;\n   __sync_bool_compare_and_swap_##WIDTH (TYPE *ptr, TYPE oldval,\t\t\\\n \t\t\t\t\tTYPE newval)\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    int failure = __kernel_cmpxchg2 (&oldval, &newval, ptr, INDEX);\t\\\n+    int failure = __kernel_cmpxchg2 (ptr, &oldval, &newval, INDEX);\t\\\n     return (failure != 0);\t\t\t\t\t\t\\\n   }\n \n@@ -255,7 +255,7 @@ __sync_val_compare_and_swap_4 (int *ptr, int oldval, int newval)\n       if (__builtin_expect (oldval != actual_oldval, 0))\n \treturn actual_oldval;\n \n-      fail = __kernel_cmpxchg (actual_oldval, newval, ptr);\n+      fail = __kernel_cmpxchg (ptr, actual_oldval, newval);\n   \n       if (__builtin_expect (!fail, 1))\n \treturn actual_oldval;\n@@ -265,7 +265,7 @@ __sync_val_compare_and_swap_4 (int *ptr, int oldval, int newval)\n bool HIDDEN\n __sync_bool_compare_and_swap_4 (int *ptr, int oldval, int newval)\n {\n-  int failure = __kernel_cmpxchg (oldval, newval, ptr);\n+  int failure = __kernel_cmpxchg (ptr, oldval, newval);\n   return (failure == 0);\n }\n \n@@ -278,7 +278,7 @@ TYPE HIDDEN\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\t\\\n       oldval = __atomic_load_n (ptr, __ATOMIC_SEQ_CST);\t\t\t\\\n-      failure = __kernel_cmpxchg2 (&oldval, &val, ptr, INDEX);\t\t\\\n+      failure = __kernel_cmpxchg2 (ptr, &oldval, &val, INDEX);\t\t\\\n     } while (failure != 0);\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     return oldval;\t\t\t\t\t\t\t\\\n@@ -294,7 +294,7 @@ __sync_lock_test_and_set_4 (int *ptr, int val)\n \n   do {\n     oldval = __atomic_load_n (ptr, __ATOMIC_SEQ_CST);\n-    failure = __kernel_cmpxchg (oldval, val, ptr);\n+    failure = __kernel_cmpxchg (ptr, oldval, val);\n   } while (failure != 0);\n \n   return oldval;\n@@ -308,7 +308,7 @@ __sync_lock_test_and_set_4 (int *ptr, int val)\n \t\t\t\t\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\\\n       oldval = __atomic_load_n (ptr, __ATOMIC_SEQ_CST);\t\t\\\n-      failure = __kernel_cmpxchg2 (&oldval, &zero, ptr, INDEX);\t\\\n+      failure = __kernel_cmpxchg2 (ptr, &oldval, &zero, INDEX);\t\\\n     } while (failure != 0);\t\t\t\t\t\\\n   }\n \n@@ -321,7 +321,7 @@ __sync_lock_release_4 (int *ptr)\n   int failure, oldval;\n \n   do {\n-    oldval = *ptr;\n-    failure = __kernel_cmpxchg (oldval, 0, ptr);\n+    oldval = __atomic_load_n (ptr, __ATOMIC_SEQ_CST);\n+    failure = __kernel_cmpxchg (ptr, oldval, 0);\n   } while (failure != 0);\n }"}]}