{"sha": "c7fe68f3652ceefaf297611d1e64c8d9da43ad93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdmZTY4ZjM2NTJjZWVmYWYyOTc2MTFkMWU2NGM4ZDlkYTQzYWQ5Mw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-08T20:45:22Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-08T20:45:22Z"}, "message": "libstdc++: Fix elements_view::operator* and operator[] [LWG 3502]\n\nWhile we're modifying elements_view, this also implements the one-line\nresolution of LWG 3492.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (__detail::__returnable_element): New\n\tconcept.\n\t(elements_view): Use this concept in its constraints.  Add\n\tmissing private access specifier.\n\t(elements_view::_S_get_element): Define as per LWG 3502.\n\t(elements_view::operator*, elements_view::operator[]): Use\n\t_S_get_element.\n\t(elements_view::operator++): Remove unnecessary constraint\n\tas per LWG 3492.\n\t* testsuite/std/ranges/adaptors/elements.cc (test05): New test.", "tree": {"sha": "7994ac53a4b58616cc7793a8f3f69c824670ce5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7994ac53a4b58616cc7793a8f3f69c824670ce5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7fe68f3652ceefaf297611d1e64c8d9da43ad93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7fe68f3652ceefaf297611d1e64c8d9da43ad93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7fe68f3652ceefaf297611d1e64c8d9da43ad93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7fe68f3652ceefaf297611d1e64c8d9da43ad93/comments", "author": null, "committer": null, "parents": [{"sha": "be8d5f99f50cf282c21632e60fe1d8857bb5a554", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be8d5f99f50cf282c21632e60fe1d8857bb5a554", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be8d5f99f50cf282c21632e60fe1d8857bb5a554"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "cfcbcaba06552642c44560136aa5c3526ee3e0ba", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7fe68f3652ceefaf297611d1e64c8d9da43ad93/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7fe68f3652ceefaf297611d1e64c8d9da43ad93/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=c7fe68f3652ceefaf297611d1e64c8d9da43ad93", "patch": "@@ -3234,13 +3234,18 @@ namespace views::__adaptor\n \t{ std::get<_Nm>(__t) }\n \t  -> convertible_to<const tuple_element_t<_Nm, _Tp>&>;\n       };\n+\n+    template<typename _Tp, size_t _Nm>\n+      concept __returnable_element\n+\t= is_reference_v<_Tp> || move_constructible<tuple_element_t<_Nm, _Tp>>;\n   }\n \n   template<input_range _Vp, size_t _Nm>\n     requires view<_Vp>\n       && __detail::__has_tuple_element<range_value_t<_Vp>, _Nm>\n       && __detail::__has_tuple_element<remove_reference_t<range_reference_t<_Vp>>,\n \t\t\t\t       _Nm>\n+      && __detail::__returnable_element<range_reference_t<_Vp>, _Nm>\n     class elements_view : public view_interface<elements_view<_Vp, _Nm>>\n     {\n     public:\n@@ -3298,10 +3303,23 @@ namespace views::__adaptor\n       template<bool _Const>\n \tstruct _Iterator\n \t{\n+\tprivate:\n \t  using _Base = __detail::__maybe_const_t<_Const, _Vp>;\n \n \t  iterator_t<_Base> _M_current = iterator_t<_Base>();\n \n+\t  static constexpr decltype(auto)\n+\t  _S_get_element(const iterator_t<_Base>& __i)\n+\t  {\n+\t    if constexpr (is_reference_v<range_reference_t<_Base>>)\n+\t      return std::get<_Nm>(*__i);\n+\t    else\n+\t      {\n+\t\tusing _Et = remove_cv_t<tuple_element_t<_Nm, range_reference_t<_Base>>>;\n+\t\treturn static_cast<_Et>(std::get<_Nm>(*__i));\n+\t      }\n+\t  }\n+\n \t  friend _Iterator<!_Const>;\n \n \tpublic:\n@@ -3334,8 +3352,8 @@ namespace views::__adaptor\n \t  { return std::move(_M_current); }\n \n \t  constexpr decltype(auto)\n-\t    operator*() const\n-\t  { return std::get<_Nm>(*_M_current); }\n+\t  operator*() const\n+\t  { return _S_get_element(_M_current); }\n \n \t  constexpr _Iterator&\n \t  operator++()\n@@ -3345,7 +3363,7 @@ namespace views::__adaptor\n \t  }\n \n \t  constexpr void\n-\t  operator++(int) requires (!forward_range<_Base>)\n+\t  operator++(int)\n \t  { ++_M_current; }\n \n \t  constexpr _Iterator\n@@ -3390,7 +3408,7 @@ namespace views::__adaptor\n \t  constexpr decltype(auto)\n \t  operator[](difference_type __n) const\n \t    requires random_access_range<_Base>\n-\t  { return std::get<_Nm>(*(_M_current + __n)); }\n+\t  { return _S_get_element(_M_current + __n); }\n \n \t  friend constexpr bool\n \t  operator==(const _Iterator& __x, const _Iterator& __y)"}, {"sha": "134afd6a8732b73f8e67778fc50e040cd6b11bb4", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/elements.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7fe68f3652ceefaf297611d1e64c8d9da43ad93/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Felements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7fe68f3652ceefaf297611d1e64c8d9da43ad93/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Felements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Felements.cc?ref=c7fe68f3652ceefaf297611d1e64c8d9da43ad93", "patch": "@@ -100,11 +100,27 @@ test04()\n   static_assert(!requires { 0 | elements; });\n }\n \n+void\n+test05()\n+{\n+  // LWG 3502\n+  std::vector<int> vec = {42};\n+  auto r1 = vec\n+    | views::transform([](auto c) { return std::make_tuple(c, c); })\n+    | views::keys;\n+  VERIFY( ranges::equal(r1, (int[]){42}) );\n+\n+  std::tuple<int, int> a[] = {{1,2},{3,4}};\n+  auto r2 = a | views::keys;\n+  VERIFY( r2[0] == 1 && r2[1] == 3 );\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n   test03();\n   test04();\n+  test05();\n }"}]}