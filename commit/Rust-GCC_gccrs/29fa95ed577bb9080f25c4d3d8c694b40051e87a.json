{"sha": "29fa95ed577bb9080f25c4d3d8c694b40051e87a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlmYTk1ZWQ1NzdiYjkwODBmMjVjNGQzZDhjNjk0YjQwMDUxZTg3YQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2011-01-13T13:41:03Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2011-01-13T13:41:03Z"}, "message": "re PR rtl-optimization/39077 (GCSE-optimization causes enormous binary size increase (~20 times !))\n\n\t* PR rtl-optimization/39077\n\t* doc/invoke.texi (max-gcse-insertion-ratio): Document.\n\t* params.h (MAX_GCSE_INSERTION_RATIO): Define.\n\t* params.def (PARAM_MAX_GCSE_INSERTION_RATIO): Define.\n\t* lcm.c (pre_edge_lcm): Properly initialize output sbitmaps.\n\t* gcse.c (prune_insertions_deletions): New function.\n\t(compute_pre_data): Use it.\n\nFrom-SVN: r168747", "tree": {"sha": "63481903a2a1e2fc61101558fa5703b5c7af933d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63481903a2a1e2fc61101558fa5703b5c7af933d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29fa95ed577bb9080f25c4d3d8c694b40051e87a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29fa95ed577bb9080f25c4d3d8c694b40051e87a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29fa95ed577bb9080f25c4d3d8c694b40051e87a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29fa95ed577bb9080f25c4d3d8c694b40051e87a/comments", "author": null, "committer": null, "parents": [{"sha": "71d12276670423b5a6bc35ba79feb481feed7c31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71d12276670423b5a6bc35ba79feb481feed7c31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71d12276670423b5a6bc35ba79feb481feed7c31"}], "stats": {"total": 109, "additions": 104, "deletions": 5}, "files": [{"sha": "e91f54e8cfeb89380c76131274a3d6f15238b784", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29fa95ed577bb9080f25c4d3d8c694b40051e87a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29fa95ed577bb9080f25c4d3d8c694b40051e87a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29fa95ed577bb9080f25c4d3d8c694b40051e87a", "patch": "@@ -1,3 +1,13 @@\n+2011-01-13  Jeff Law  <law@redhat.com>\n+\n+\t* PR rtl-optimization/39077\n+\t* doc/invoke.texi (max-gcse-insertion-ratio): Document.\n+\t* params.h (MAX_GCSE_INSERTION_RATIO): Define.\n+\t* params.def (PARAM_MAX_GCSE_INSERTION_RATIO): Define.\n+\t* lcm.c (pre_edge_lcm): Properly initialize output sbitmaps.\n+\t* gcse.c (prune_insertions_deletions): New function.\n+\t(compute_pre_data): Use it.\n+\n 2011-01-13  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR debug/PR46973"}, {"sha": "0a1625f241acef31020a93a32bdb2811219c0bfb", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29fa95ed577bb9080f25c4d3d8c694b40051e87a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29fa95ed577bb9080f25c4d3d8c694b40051e87a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=29fa95ed577bb9080f25c4d3d8c694b40051e87a", "patch": "@@ -1,5 +1,5 @@\n @c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-@c 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+@c 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n @c Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n@@ -8227,6 +8227,11 @@ order to perform the global common subexpression elimination\n optimization.  If more memory than specified is required, the\n optimization will not be done.\n \n+@item max-gcse-insertion-ratio\n+If the ratio of expression insertions to deletions is larger than this value\n+for any expression, then RTL PRE will insert or remove the expression and thus\n+leave partially redundant computations in the instruction stream.  The default value is 20.\n+\n @item max-pending-list-length\n The maximum number of pending dependencies scheduling will allow\n before flushing the current state and starting over.  Large functions"}, {"sha": "a0f51aa09b4c6582e66d1412b89236c115aa4a74", "filename": "gcc/gcse.c", "status": "modified", "additions": 73, "deletions": 1, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29fa95ed577bb9080f25c4d3d8c694b40051e87a/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29fa95ed577bb9080f25c4d3d8c694b40051e87a/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=29fa95ed577bb9080f25c4d3d8c694b40051e87a", "patch": "@@ -1,7 +1,7 @@\n /* Global common subexpression elimination/Partial redundancy elimination\n    and global constant/copy propagation for GNU compiler.\n    Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-   2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n+   2006, 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -3396,6 +3396,75 @@ prune_expressions (bool pre_p)\n   sbitmap_free (prune_exprs);\n }\n \n+/* It may be necessary to insert a large number of insns on edges to\n+   make the existing occurrences of expressions fully redundant.  This\n+   routine examines the set of insertions and deletions and if the ratio\n+   of insertions to deletions is too high for a particular expression, then\n+   the expression is removed from the insertion/deletion sets. \n+\n+   N_ELEMS is the number of elements in the hash table.  */\n+\n+static void\n+prune_insertions_deletions (int n_elems)\n+{\n+  sbitmap_iterator sbi;\n+  sbitmap prune_exprs;\n+\n+  /* We always use I to iterate over blocks/edges and J to iterate over\n+     expressions.  */\n+  unsigned int i, j;\n+\n+  /* Counts for the number of times an expression needs to be inserted and\n+     number of times an expression can be removed as a result.  */\n+  int *insertions = GCNEWVEC (int, n_elems);\n+  int *deletions = GCNEWVEC (int, n_elems);\n+\n+  /* Set of expressions which require too many insertions relative to\n+     the number of deletions achieved.  We will prune these out of the\n+     insertion/deletion sets.  */\n+  prune_exprs = sbitmap_alloc (n_elems);\n+  sbitmap_zero (prune_exprs);\n+\n+  /* Iterate over the edges counting the number of times each expression\n+     needs to be inserted.  */\n+  for (i = 0; i < (unsigned) n_edges; i++)\n+    {\n+      EXECUTE_IF_SET_IN_SBITMAP (pre_insert_map[i], 0, j, sbi)\n+\tinsertions[j]++;\n+    }\n+\n+  /* Similarly for deletions, but those occur in blocks rather than on\n+     edges.  */\n+  for (i = 0; i < (unsigned) last_basic_block; i++)\n+    {\n+      EXECUTE_IF_SET_IN_SBITMAP (pre_delete_map[i], 0, j, sbi)\n+\tdeletions[j]++;\n+    }\n+\n+  /* Now that we have accurate counts, iterate over the elements in the\n+     hash table and see if any need too many insertions relative to the\n+     number of evaluations that can be removed.  If so, mark them in\n+     PRUNE_EXPRS.  */\n+  for (j = 0; j < (unsigned) n_elems; j++)\n+    if (deletions[j]\n+\t&& ((unsigned) insertions[j] / deletions[j]) > MAX_GCSE_INSERTION_RATIO)\n+      SET_BIT (prune_exprs, j);\n+\n+  /* Now prune PRE_INSERT_MAP and PRE_DELETE_MAP based on PRUNE_EXPRS.  */\n+  EXECUTE_IF_SET_IN_SBITMAP (prune_exprs, 0, j, sbi)\n+    {\n+      for (i = 0; i < (unsigned) n_edges; i++)\n+\tRESET_BIT (pre_insert_map[i], j);\n+\n+      for (i = 0; i < (unsigned) last_basic_block; i++)\n+\tRESET_BIT (pre_delete_map[i], j);\n+    }\n+\n+  sbitmap_free (prune_exprs);\n+  free (insertions);\n+  free (deletions);\n+}\n+\n /* Top level routine to do the dataflow analysis needed by PRE.  */\n \n static void\n@@ -3424,6 +3493,8 @@ compute_pre_data (void)\n   antloc = NULL;\n   sbitmap_vector_free (ae_kill);\n   ae_kill = NULL;\n+\n+  prune_insertions_deletions (expr_hash_table.n_elems);\n }\n \f\n /* PRE utilities */\n@@ -5368,3 +5439,4 @@ struct rtl_opt_pass pass_rtl_hoist =\n };\n \n #include \"gt-gcse.h\"\n+"}, {"sha": "61c67e04ae7a5f0fe760bd9d572d48fe1b169c71", "filename": "gcc/lcm.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29fa95ed577bb9080f25c4d3d8c694b40051e87a/gcc%2Flcm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29fa95ed577bb9080f25c4d3d8c694b40051e87a/gcc%2Flcm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flcm.c?ref=29fa95ed577bb9080f25c4d3d8c694b40051e87a", "patch": "@@ -1,6 +1,6 @@\n /* Generic partial redundancy elimination with lazy code motion support.\n    Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008,\n-   2010 Free Software Foundation, Inc.\n+   2010, 2011 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -451,6 +451,8 @@ pre_edge_lcm (int n_exprs, sbitmap *transp,\n \n   *insert = sbitmap_vector_alloc (num_edges, n_exprs);\n   *del = sbitmap_vector_alloc (last_basic_block, n_exprs);\n+  sbitmap_vector_zero (*insert, num_edges);\n+  sbitmap_vector_zero (*del, last_basic_block);\n   compute_insert_delete (edge_list, antloc, later, laterin, *insert, *del);\n \n   sbitmap_vector_free (laterin);"}, {"sha": "96dc858cf82d52767100667610ea0bf713039c34", "filename": "gcc/params.def", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29fa95ed577bb9080f25c4d3d8c694b40051e87a/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29fa95ed577bb9080f25c4d3d8c694b40051e87a/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=29fa95ed577bb9080f25c4d3d8c694b40051e87a", "patch": "@@ -1,5 +1,6 @@\n /* params.def - Run-time parameters.\n-   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+   2011\n    Free Software Foundation, Inc.\n    Written by Mark Mitchell <mark@codesourcery.com>.\n \n@@ -214,6 +215,13 @@ DEFPARAM(PARAM_MAX_GCSE_MEMORY,\n \t \"The maximum amount of memory to be allocated by GCSE\",\n \t 50 * 1024 * 1024, 0, 0)\n \n+/* The GCSE optimization of an expression will avoided if the ratio of\n+   insertions to deletions is greater than this value.  */\n+DEFPARAM(PARAM_MAX_GCSE_INSERTION_RATIO,\n+\t \"max-gcse-insertion-ratio\",\n+\t \"The maximum ratio of insertions to deletions of expressions in GCSE\",\n+\t 20, 0, 0)\n+\n /* This is the threshold ratio when to perform partial redundancy\n    elimination after reload. We perform partial redundancy elimination\n    when the following holds:"}, {"sha": "e36a5ea3406391d61972ccafd291567d305dbaed", "filename": "gcc/params.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29fa95ed577bb9080f25c4d3d8c694b40051e87a/gcc%2Fparams.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29fa95ed577bb9080f25c4d3d8c694b40051e87a/gcc%2Fparams.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.h?ref=29fa95ed577bb9080f25c4d3d8c694b40051e87a", "patch": "@@ -1,5 +1,5 @@\n /* params.h - Run-time parameters.\n-   Copyright (C) 2001, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n+   Copyright (C) 2001, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Written by Mark Mitchell <mark@codesourcery.com>.\n \n@@ -142,6 +142,8 @@ extern void init_param_values (int *params);\n   PARAM_VALUE (PARAM_MAX_PENDING_LIST_LENGTH)\n #define MAX_GCSE_MEMORY \\\n   ((size_t) PARAM_VALUE (PARAM_MAX_GCSE_MEMORY))\n+#define MAX_GCSE_INSERTION_RATIO \\\n+  ((size_t) PARAM_VALUE (PARAM_MAX_GCSE_INSERTION_RATIO))\n #define GCSE_AFTER_RELOAD_PARTIAL_FRACTION \\\n   PARAM_VALUE (PARAM_GCSE_AFTER_RELOAD_PARTIAL_FRACTION)\n #define GCSE_AFTER_RELOAD_CRITICAL_FRACTION \\"}]}