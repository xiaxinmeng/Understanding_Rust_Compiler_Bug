{"sha": "e401db7bfd8cf86d3833805a81b1252884eb1c9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQwMWRiN2JmZDhjZjg2ZDM4MzM4MDVhODFiMTI1Mjg4NGViMWM5ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-08T14:44:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-08T14:44:10Z"}, "message": "i386: Fix up X87_ENABLE_{FLOAT,ARITH} in conditions [PR94440]\n\nThe documentation says\n     For a named pattern, the condition may not depend on the data in\n     the insn being matched, but only the target-machine-type flags.\nThe i386 backend violates that by using flag_excess_precision and\nflag_unsafe_math_optimizations in the conditions too, which is bad\nwhen optimize attribute or pragmas are used.  The problem is that the\nmiddle-end caches the enabled conditions for the optabs for a particular\nswitchable target, but multiple functions can share the same\nTARGET_OPTION_NODE, but have different TREE_OPTIMIZATION_NODE with different\nflag_excess_precision or flag_unsafe_math_optimizations, so the enabled\nconditions then match only one of those.\n\nI think best would be to just have a single options node for both the\ngeneric and target options, then such problems wouldn't exist, but that\nwould be very risky at this point and quite large change.\n\nSo, instead the following patch just shadows flag_excess_precision and\nflag_unsafe_math_optimizations values for uses in the instruction conditions\nin TargetVariable and during set_cfun artificially creates new\nTARGET_OPTION_NODE if flag_excess_precision and/or\nflag_unsafe_math_optimizations change from what is recorded in their\nTARGET_OPTION_NODE.  The target nodes are hashed, so worst case we can get 4\ntimes as many target option nodes if one would for each unique target option\ntry all the flag_excess_precision and flag_unsafe_math_optimizations values.\n\n2020-12-08  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/94440\n\t* config/i386/i386.opt (ix86_excess_precision,\n\tix86_unsafe_math_optimizations): New TargetVariables.\n\t* config/i386/i386.h (X87_ENABLE_ARITH, X87_ENABLE_FLOAT): Use\n\tix86_unsafe_math_optimizations instead of\n\tflag_unsafe_math_optimizations and ix86_excess_precision instead of\n\tflag_excess_precision.\n\t* config/i386/i386.c (ix86_excess_precision): Rename to ...\n\t(ix86_get_excess_precision): ... this.\n\t(TARGET_C_EXCESS_PRECISION): Define to ix86_get_excess_precision.\n\t* config/i386/i386-options.c (ix86_valid_target_attribute_tree,\n\tix86_option_override_internal): Update ix86_unsafe_math_optimization\n\tfrom flag_unsafe_math_optimizations and ix86_excess_precision\n\tfrom flag_excess_precision when constructing target option nodes.\n\t(ix86_set_current_function): If flag_unsafe_math_optimizations\n\tor flag_excess_precision is different from the one recorded\n\tin TARGET_OPTION_NODE, create a new target option node for the\n\tcurrent function and switch to that.", "tree": {"sha": "107c5ffc77038f58a8a955bd8dfeee421a9cc547", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/107c5ffc77038f58a8a955bd8dfeee421a9cc547"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e401db7bfd8cf86d3833805a81b1252884eb1c9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e401db7bfd8cf86d3833805a81b1252884eb1c9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e401db7bfd8cf86d3833805a81b1252884eb1c9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e401db7bfd8cf86d3833805a81b1252884eb1c9d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bd4fecbea3b3da9befe24906f699d63fb28ed71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bd4fecbea3b3da9befe24906f699d63fb28ed71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bd4fecbea3b3da9befe24906f699d63fb28ed71"}], "stats": {"total": 103, "additions": 95, "deletions": 8}, "files": [{"sha": "70b5f09c62d4b92f64ca5f3f740f44ad571e3ef1", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e401db7bfd8cf86d3833805a81b1252884eb1c9d/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e401db7bfd8cf86d3833805a81b1252884eb1c9d/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=e401db7bfd8cf86d3833805a81b1252884eb1c9d", "patch": "@@ -1374,6 +1374,14 @@ ix86_valid_target_attribute_tree (tree fndecl, tree args,\n       /* Add any builtin functions with the new isa if any.  */\n       ix86_add_new_builtins (opts->x_ix86_isa_flags, opts->x_ix86_isa_flags2);\n \n+      enum excess_precision orig_ix86_excess_precision\n+\t= opts->x_ix86_excess_precision;\n+      bool orig_ix86_unsafe_math_optimizations\n+\t= opts->x_ix86_unsafe_math_optimizations;\n+      opts->x_ix86_excess_precision = opts->x_flag_excess_precision;\n+      opts->x_ix86_unsafe_math_optimizations\n+\t= opts->x_flag_unsafe_math_optimizations;\n+\n       /* Save the current options unless we are validating options for\n \t #pragma.  */\n       t = build_target_option_node (opts, opts_set);\n@@ -1382,6 +1390,9 @@ ix86_valid_target_attribute_tree (tree fndecl, tree args,\n       opts->x_ix86_tune_string = orig_tune_string;\n       opts_set->x_ix86_fpmath = orig_fpmath_set;\n       opts_set->x_prefer_vector_width_type = orig_pvw_set;\n+      opts->x_ix86_excess_precision = orig_ix86_excess_precision;\n+      opts->x_ix86_unsafe_math_optimizations\n+\t= orig_ix86_unsafe_math_optimizations;\n \n       release_options_strings (option_strings);\n     }\n@@ -3019,8 +3030,14 @@ ix86_option_override_internal (bool main_args_p,\n   /* Save the initial options in case the user does function specific\n      options.  */\n   if (main_args_p)\n-    target_option_default_node = target_option_current_node\n-      = build_target_option_node (opts, opts_set);\n+    {\n+      opts->x_ix86_excess_precision\n+\t= opts->x_flag_excess_precision;\n+      opts->x_ix86_unsafe_math_optimizations\n+\t= opts->x_flag_unsafe_math_optimizations;\n+      target_option_default_node = target_option_current_node\n+        = build_target_option_node (opts, opts_set);\n+    }\n \n   if (opts->x_flag_cf_protection != CF_NONE)\n     opts->x_flag_cf_protection\n@@ -3326,6 +3343,24 @@ ix86_set_current_function (tree fndecl)\n       else\n \tTREE_TARGET_GLOBALS (new_tree) = save_target_globals_default_opts ();\n     }\n+  else if (flag_unsafe_math_optimizations\n+\t   != TREE_TARGET_OPTION (new_tree)->x_ix86_unsafe_math_optimizations\n+\t   || (flag_excess_precision\n+\t       != TREE_TARGET_OPTION (new_tree)->x_ix86_excess_precision))\n+    {\n+      cl_target_option_restore (&global_options, &global_options_set,\n+\t\t\t\tTREE_TARGET_OPTION (new_tree));\n+      ix86_excess_precision = flag_excess_precision;\n+      ix86_unsafe_math_optimizations = flag_unsafe_math_optimizations;\n+      DECL_FUNCTION_SPECIFIC_TARGET (fndecl) = new_tree\n+\t= build_target_option_node (&global_options, &global_options_set);\n+      if (TREE_TARGET_GLOBALS (new_tree))\n+\trestore_target_globals (TREE_TARGET_GLOBALS (new_tree));\n+      else if (new_tree == target_option_default_node)\n+\trestore_target_globals (&default_target_globals);\n+      else\n+\tTREE_TARGET_GLOBALS (new_tree) = save_target_globals_default_opts ();\n+    }\n   ix86_previous_fndecl = fndecl;\n \n   static bool prev_no_caller_saved_registers;"}, {"sha": "54b7e103ba2f9b8b79d49c1fc34773bb8383f4d9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e401db7bfd8cf86d3833805a81b1252884eb1c9d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e401db7bfd8cf86d3833805a81b1252884eb1c9d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e401db7bfd8cf86d3833805a81b1252884eb1c9d", "patch": "@@ -23001,7 +23001,7 @@ ix86_init_libfuncs (void)\n    apparently at random.  */\n \n static enum flt_eval_method\n-ix86_excess_precision (enum excess_precision_type type)\n+ix86_get_excess_precision (enum excess_precision_type type)\n {\n   switch (type)\n     {\n@@ -23527,7 +23527,7 @@ ix86_run_selftests (void)\n #define TARGET_MD_ASM_ADJUST ix86_md_asm_adjust\n \n #undef TARGET_C_EXCESS_PRECISION\n-#define TARGET_C_EXCESS_PRECISION ix86_excess_precision\n+#define TARGET_C_EXCESS_PRECISION ix86_get_excess_precision\n #undef TARGET_PROMOTE_PROTOTYPES\n #define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_true\n #undef TARGET_SETUP_INCOMING_VARARGS"}, {"sha": "d157d30ec17968351473805cedab9a4f3b5be1a3", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e401db7bfd8cf86d3833805a81b1252884eb1c9d/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e401db7bfd8cf86d3833805a81b1252884eb1c9d/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=e401db7bfd8cf86d3833805a81b1252884eb1c9d", "patch": "@@ -829,15 +829,15 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    SFmode, DFmode and XFmode) in the current excess precision\n    configuration.  */\n #define X87_ENABLE_ARITH(MODE)\t\t\t\t\\\n-  (flag_unsafe_math_optimizations\t\t\t\\\n-   || flag_excess_precision == EXCESS_PRECISION_FAST\t\\\n+  (ix86_unsafe_math_optimizations\t\t\t\\\n+   || ix86_excess_precision == EXCESS_PRECISION_FAST\t\\\n    || (MODE) == XFmode)\n \n /* Likewise, whether to allow direct conversions from integer mode\n    IMODE (HImode, SImode or DImode) to MODE.  */\n #define X87_ENABLE_FLOAT(MODE, IMODE)\t\t\t\\\n-  (flag_unsafe_math_optimizations\t\t\t\\\n-   || flag_excess_precision == EXCESS_PRECISION_FAST\t\\\n+  (ix86_unsafe_math_optimizations\t\t\t\\\n+   || ix86_excess_precision == EXCESS_PRECISION_FAST\t\\\n    || (MODE) == XFmode\t\t\t\t\t\\\n    || ((MODE) == DFmode && (IMODE) == SImode)\t\t\\\n    || (IMODE) == HImode)"}, {"sha": "e38baee81fcf874673b9edfcc873960ee9b771cd", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e401db7bfd8cf86d3833805a81b1252884eb1c9d/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e401db7bfd8cf86d3833805a81b1252884eb1c9d/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=e401db7bfd8cf86d3833805a81b1252884eb1c9d", "patch": "@@ -49,6 +49,16 @@ int recip_mask_explicit\n TargetSave\n int x_recip_mask_explicit\n \n+;; A copy of flag_excess_precision as a target variable that should\n+;; force a different DECL_FUNCTION_SPECIFIC_TARGET upon\n+;; flag_excess_precision changes.\n+TargetVariable\n+enum excess_precision ix86_excess_precision = EXCESS_PRECISION_DEFAULT\n+\n+;; Similarly for flag_unsafe_math_optimizations.\n+TargetVariable\n+bool ix86_unsafe_math_optimizations = false\n+\n ;; Definitions to add to the cl_target_option structure\n ;; -march= processor\n TargetSave"}, {"sha": "c18b16b4acb6b0fa888de81ce85d3e5da9abde1d", "filename": "gcc/testsuite/gcc.target/i386/pr94440-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e401db7bfd8cf86d3833805a81b1252884eb1c9d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94440-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e401db7bfd8cf86d3833805a81b1252884eb1c9d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94440-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94440-1.c?ref=e401db7bfd8cf86d3833805a81b1252884eb1c9d", "patch": "@@ -0,0 +1,23 @@\n+/* PR target/94440 */\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-mfpmath=sse,387 -msse2 -Ofast -fexcess-precision=standard -fno-graphite --param=scev-max-expr-size=0\" } */\n+\n+int b;\n+double c, d;\n+\n+void\n+foo (void)\n+{\n+  int i;\n+  for (i = 0; i < b; i++)\n+    c += i;\n+}\n+\n+int __attribute__((optimize(1)))\n+main ()\n+{\n+  double a[9];\n+  int i;\n+  for (i = 0; i < 9; i++)\n+    d += a[i];\n+}"}, {"sha": "3ac78e0eff18346d03990f33d3bd9ac2e11d3bcf", "filename": "gcc/testsuite/gcc.target/i386/pr94440-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e401db7bfd8cf86d3833805a81b1252884eb1c9d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94440-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e401db7bfd8cf86d3833805a81b1252884eb1c9d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94440-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94440-2.c?ref=e401db7bfd8cf86d3833805a81b1252884eb1c9d", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/94440 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -msse2 -ffast-math\" } */\n+\n+double a;\n+int b;\n+long double c;\n+\n+void\n+foo (void)\n+{\n+  float d = (double)(long double)b;\n+}\n+\n+__attribute__((optimize(\"O0\"))) void\n+bar (void)\n+{\n+  a = c;\n+}"}]}