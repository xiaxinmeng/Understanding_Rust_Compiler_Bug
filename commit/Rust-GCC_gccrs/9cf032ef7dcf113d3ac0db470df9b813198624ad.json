{"sha": "9cf032ef7dcf113d3ac0db470df9b813198624ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNmMDMyZWY3ZGNmMTEzZDNhYzBkYjQ3MGRmOWI4MTMxOTg2MjRhZA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2009-11-30T15:00:17Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-11-30T15:00:17Z"}, "message": "sem_prag.adb, [...]: Minor reformatting.\n\n2009-11-30  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_prag.adb, s-sechas.ads, s-sechas.adb: Minor reformatting.\n\nFrom-SVN: r154816", "tree": {"sha": "57f8ebbde09bec6fcb9fcd9bde27a54b718eab72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57f8ebbde09bec6fcb9fcd9bde27a54b718eab72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cf032ef7dcf113d3ac0db470df9b813198624ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cf032ef7dcf113d3ac0db470df9b813198624ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cf032ef7dcf113d3ac0db470df9b813198624ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cf032ef7dcf113d3ac0db470df9b813198624ad/comments", "author": null, "committer": null, "parents": [{"sha": "9fe2f33eb2083f4786d350e131131612067f0649", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fe2f33eb2083f4786d350e131131612067f0649", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fe2f33eb2083f4786d350e131131612067f0649"}], "stats": {"total": 76, "additions": 41, "deletions": 35}, "files": [{"sha": "9a3556c6afe0d498211b40ab842487f6f4f21586", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cf032ef7dcf113d3ac0db470df9b813198624ad/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cf032ef7dcf113d3ac0db470df9b813198624ad/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9cf032ef7dcf113d3ac0db470df9b813198624ad", "patch": "@@ -1,3 +1,7 @@\n+2009-11-30  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_prag.adb, s-sechas.ads, s-sechas.adb: Minor reformatting.\n+\n 2009-11-30  Gary Dismukes  <dismukes@adacore.com>\n \n \t* sem_prag.adb (Process_Convention): Change formal E to Ent. In the"}, {"sha": "0b1fab3980765d4087e5b05099e9ce495b6af280", "filename": "gcc/ada/s-sechas.adb", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cf032ef7dcf113d3ac0db470df9b813198624ad/gcc%2Fada%2Fs-sechas.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cf032ef7dcf113d3ac0db470df9b813198624ad/gcc%2Fada%2Fs-sechas.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-sechas.adb?ref=9cf032ef7dcf113d3ac0db470df9b813198624ad", "patch": "@@ -79,8 +79,10 @@ package body System.Secure_Hashes is\n       Buf_String : String (M.Buffer'Range);\n       for Buf_String'Address use M.Buffer'Address;\n       pragma Import (Ada, Buf_String);\n+\n       Length : constant Natural :=\n-                  Natural'Min (M.Block_Length - M.Last, S'Last - First + 1);\n+                 Natural'Min (M.Block_Length - M.Last, S'Last - First + 1);\n+\n    begin\n       pragma Assert (Length > 0);\n \n@@ -162,21 +164,13 @@ package body System.Secure_Hashes is\n          end return;\n       end Digest;\n \n-      ------------\n-      -- Digest --\n-      ------------\n-\n       function Digest (S : String) return Message_Digest is\n          C : Context;\n       begin\n          Update (C, S);\n          return Digest (C);\n       end Digest;\n \n-      ------------\n-      -- Digest --\n-      ------------\n-\n       function Digest (A : Stream_Element_Array) return Message_Digest is\n          C : Context;\n       begin\n@@ -215,27 +209,31 @@ package body System.Secure_Hashes is\n          declare\n             Pad : String (1 .. 1 + Zeroes + Size_Length) :=\n                     (1 => Character'Val (128), others => ASCII.NUL);\n-            Index : Natural;\n+\n+            Index       : Natural;\n             First_Index : Natural;\n+\n          begin\n-            First_Index := (if Hash_Bit_Order = Low_Order_First then\n-                              Pad'Last - Size_Length + 1\n-                            else\n-                              Pad'Last);\n+            First_Index := (if Hash_Bit_Order = Low_Order_First\n+                            then Pad'Last - Size_Length + 1\n+                            else Pad'Last);\n \n             Index := First_Index;\n             while Message_Length > 0 loop\n                if Index = First_Index then\n+\n                   --  Message_Length is in bytes, but we need to store it as\n                   --  a bit count).\n \n                   Pad (Index) := Character'Val\n                                    (Shift_Left (Message_Length and 16#1f#, 3));\n                   Message_Length := Shift_Right (Message_Length, 5);\n+\n                else\n                   Pad (Index) := Character'Val (Message_Length and 16#ff#);\n                   Message_Length := Shift_Right (Message_Length, 8);\n                end if;\n+\n                Index := Index +\n                           (if Hash_Bit_Order = Low_Order_First then 1 else -1);\n             end loop;\n@@ -258,6 +256,7 @@ package body System.Secure_Hashes is\n          Fill_Buffer : Fill_Buffer_Access)\n       is\n          Last : Natural := S'First - 1;\n+\n       begin\n          C.M_State.Length := C.M_State.Length + S'Length;\n \n@@ -305,8 +304,8 @@ package body System.Secure_Hashes is\n          Update\n            (C, S,\n             (if System.Default_Bit_Order /= Low_Order_First\n-               then Fill_Buffer_Swap'Access\n-               else Fill_Buffer_Copy'Access));\n+             then Fill_Buffer_Swap'Access\n+             else Fill_Buffer_Copy'Access));\n       end Wide_Update;\n \n       -----------------\n@@ -334,12 +333,13 @@ package body System.Secure_Hashes is\n \n       procedure To_Hash (H : State; H_Bits : out Stream_Element_Array) is\n          Hash_Words : constant Natural := H'Size / Word'Size;\n-         Result : State (1 .. Hash_Words) :=\n-                    H (H'Last - Hash_Words + 1 .. H'Last);\n+         Result     : State (1 .. Hash_Words) :=\n+                        H (H'Last - Hash_Words + 1 .. H'Last);\n \n          R_SEA : Stream_Element_Array (1 .. Result'Size / 8);\n          for R_SEA'Address use Result'Address;\n          pragma Import (Ada, R_SEA);\n+\n       begin\n          if System.Default_Bit_Order /= Hash_Bit_Order then\n             for J in Result'Range loop"}, {"sha": "33330836e122a1579dc2f243d364f39b95b3dffc", "filename": "gcc/ada/s-sechas.ads", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cf032ef7dcf113d3ac0db470df9b813198624ad/gcc%2Fada%2Fs-sechas.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cf032ef7dcf113d3ac0db470df9b813198624ad/gcc%2Fada%2Fs-sechas.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-sechas.ads?ref=9cf032ef7dcf113d3ac0db470df9b813198624ad", "patch": "@@ -43,12 +43,11 @@ package System.Secure_Hashes is\n    --  Secure hash functions use a string buffer that is also accessed as an\n    --  array of words, which may require up to 64 bit alignment.\n \n-   --  The function-independent part of processing state:\n-   --  A buffer of data being accumulated until a complete block is ready for\n-   --  hashing.\n+   --  The function-independent part of processing state: A buffer of data\n+   --  being accumulated until a complete block is ready for hashing.\n \n    type Message_State (Block_Length : Natural) is record\n-      Last   : Natural := 0;\n+      Last : Natural := 0;\n       --  Index of last used element in Buffer\n \n       Length : Interfaces.Unsigned_64 := 0;\n@@ -59,6 +58,7 @@ package System.Secure_Hashes is\n    end record;\n \n    --  The function-specific part of processing state:\n+\n    --  Each hash function maintains an internal state as an array of words,\n    --  which is ultimately converted to a stream representation with the\n    --  appropriate bit order.\n@@ -92,13 +92,13 @@ package System.Secure_Hashes is\n    --  instance of this generic package.\n \n    generic\n-      Block_Words    : Natural;\n+      Block_Words : Natural;\n       --  Number of words in each block\n \n-      State_Words    : Natural;\n+      State_Words : Natural;\n       --  Number of words in internal state\n \n-      Hash_Words     : Natural;\n+      Hash_Words : Natural;\n       --  Number of words in the final hash (must be no greater than\n       --  State_Words).\n \n@@ -132,21 +132,22 @@ package System.Secure_Hashes is\n       procedure Update      (C : in out Context; Input : String);\n       procedure Wide_Update (C : in out Context; Input : Wide_String);\n       procedure Update\n-        (C : in out Context; Input : Ada.Streams.Stream_Element_Array);\n-      --  Update C to process the given input. Successive calls to\n-      --  Update are equivalent to a single call with the concatenation\n-      --  of the inputs. For the Wide_String version, each Wide_Character is\n-      --  processed low order byte first.\n+        (C     : in out Context;\n+         Input : Ada.Streams.Stream_Element_Array);\n+      --  Update C to process the given input. Successive calls to Update are\n+      --  equivalent to a single call with the concatenation of the inputs. For\n+      --  the Wide_String version, each Wide_Character is processed low order\n+      --  byte first.\n \n       Word_Length : constant Natural := Hash_State.Word'Size / 8;\n       Hash_Length : constant Natural := Hash_Words * Word_Length;\n \n       subtype Message_Digest is String (1 .. 2 * Hash_Length);\n-      --  The fixed-length string returned by Digest, providing the\n-      --  hash in hexadecimal representation.\n+      --  The fixed-length string returned by Digest, providing the hash in\n+      --  hexadecimal representation.\n \n-      function Digest      (C  : Context)     return Message_Digest;\n-      --  Return the hash for the data accumulated with C in hexadecimal\n+      function Digest (C : Context) return Message_Digest;\n+      --  Return hash for the data accumulated with C in hexadecimal\n       --  representation.\n \n       function Digest      (S : String)      return Message_Digest;"}, {"sha": "f88c6bd788ab843371af3cb95aa19780bc6c7ab8", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cf032ef7dcf113d3ac0db470df9b813198624ad/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cf032ef7dcf113d3ac0db470df9b813198624ad/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=9cf032ef7dcf113d3ac0db470df9b813198624ad", "patch": "@@ -597,7 +597,8 @@ package body Sem_Prag is\n       --  Common processing for Compile_Time_Error and Compile_Time_Warning\n \n       procedure Process_Convention\n-        (C : out Convention_Id; Ent : out Entity_Id);\n+        (C   : out Convention_Id;\n+         Ent : out Entity_Id);\n       --  Common processing for Convention, Interface, Import and Export.\n       --  Checks first two arguments of pragma, and sets the appropriate\n       --  convention value in the specified entity or entities. On return"}]}