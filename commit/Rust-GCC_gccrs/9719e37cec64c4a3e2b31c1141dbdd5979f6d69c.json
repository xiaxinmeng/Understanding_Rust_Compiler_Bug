{"sha": "9719e37cec64c4a3e2b31c1141dbdd5979f6d69c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTcxOWUzN2NlYzY0YzRhM2UyYjMxYzExNDFkYmRkNTk3OWY2ZDY5Yw==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-01-23T14:37:09Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-01-23T14:37:09Z"}, "message": "FileLockImpl.java: Fixed filename in copyright.\n\n2004-01-23  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/nio/FileLockImpl.java:\n\tFixed filename in copyright.\n\t(released): Removed.\n\t(finalize): New method.\n\t* gnu/java/nio/natFileLockImpl.cc\n\t(releaseImpl): Implemented.\n\t* java/nio/channels/FileChannelImpl.java:\n\tReworked imports.\n\t(lock): Implemented.\n\t(lockImpl): New method.\n\t(tryLock): Implemented.\n\t(tryLockImpl): New method.\n\t* java/nio/channels/natFileChannelImpl.cc\n\t(lockImpl): New method.\n\t(tryLockImpl): New method.\n\nFrom-SVN: r76422", "tree": {"sha": "c95fa932096fa9adbd0bc90d83618970a3f84572", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c95fa932096fa9adbd0bc90d83618970a3f84572"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9719e37cec64c4a3e2b31c1141dbdd5979f6d69c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9719e37cec64c4a3e2b31c1141dbdd5979f6d69c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9719e37cec64c4a3e2b31c1141dbdd5979f6d69c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9719e37cec64c4a3e2b31c1141dbdd5979f6d69c/comments", "author": null, "committer": null, "parents": [{"sha": "ca1d829f319a0919f6543933cd7f561e3ae5bf64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca1d829f319a0919f6543933cd7f561e3ae5bf64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca1d829f319a0919f6543933cd7f561e3ae5bf64"}], "stats": {"total": 96, "additions": 86, "deletions": 10}, "files": [{"sha": "578a308d8dab84a77b1abb58e9316e4f8943fde8", "filename": "libjava/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9719e37cec64c4a3e2b31c1141dbdd5979f6d69c/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9719e37cec64c4a3e2b31c1141dbdd5979f6d69c/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=9719e37cec64c4a3e2b31c1141dbdd5979f6d69c", "patch": "@@ -1,3 +1,21 @@\n+2004-01-23  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/FileLockImpl.java:\n+\tFixed filename in copyright.\n+\t(released): Removed.\n+\t(finalize): New method.\n+\t* gnu/java/nio/natFileLockImpl.cc\n+\t(releaseImpl): Implemented.\n+\t* java/nio/channels/FileChannelImpl.java:\n+\tReworked imports.\n+\t(lock): Implemented.\n+\t(lockImpl): New method.\n+\t(tryLock): Implemented.\n+\t(tryLockImpl): New method.\n+\t* java/nio/channels/natFileChannelImpl.cc\n+\t(lockImpl): New method.\n+\t(tryLockImpl): New method.\n+\n 2004-01-23  Michael Koch  <konqueror@gmx.de>\n \n \t* java/io/FileDescriptor.java"}, {"sha": "b621bd2a539ba66308e649b5bfc04ea3f4c1675e", "filename": "libjava/gnu/java/nio/FileLockImpl.java", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9719e37cec64c4a3e2b31c1141dbdd5979f6d69c/libjava%2Fgnu%2Fjava%2Fnio%2FFileLockImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9719e37cec64c4a3e2b31c1141dbdd5979f6d69c/libjava%2Fgnu%2Fjava%2Fnio%2FFileLockImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FFileLockImpl.java?ref=9719e37cec64c4a3e2b31c1141dbdd5979f6d69c", "patch": "@@ -1,5 +1,5 @@\n-/* FileChannelImpl.java -- \n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+/* FileLockImpl.java -- \n+   Copyright (C) 2002, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -60,14 +60,24 @@ public class FileLockImpl extends FileLock\n   }\n   \n   private FileDescriptor fd;\n-  private boolean released;\n   \n   public FileLockImpl (FileDescriptor fd, FileChannel channel, long position,\n                        long size, boolean shared)\n   {\n     super (channel, position, size, shared);\n     this.fd = fd;\n-    this.released = false;\n+  }\n+\n+  public void finalize()\n+  {\n+    try\n+      {\n+\trelease();\n+      }\n+    catch (IOException e)\n+      {\n+\t// Ignore this.\n+      }\n   }\n   \n   public boolean isValid ()"}, {"sha": "d3d01a12df3261ac426427eca01ad1169a4d9bd3", "filename": "libjava/gnu/java/nio/natFileLockImpl.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9719e37cec64c4a3e2b31c1141dbdd5979f6d69c/libjava%2Fgnu%2Fjava%2Fnio%2FnatFileLockImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9719e37cec64c4a3e2b31c1141dbdd5979f6d69c/libjava%2Fgnu%2Fjava%2Fnio%2FnatFileLockImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FnatFileLockImpl.cc?ref=9719e37cec64c4a3e2b31c1141dbdd5979f6d69c", "patch": "@@ -20,6 +20,5 @@ details.  */\n void\n gnu::java::nio::FileLockImpl::releaseImpl ()\n {\n-  throw new ::java::io::IOException\n-    (JvNewStringUTF (\"releaseImpl not implemented\"));\n+  fd->unlock(position(), size());\n }"}, {"sha": "ea2526e7002f6c80564a419b64a0e45ece7ae1e1", "filename": "libjava/java/nio/channels/FileChannelImpl.java", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9719e37cec64c4a3e2b31c1141dbdd5979f6d69c/libjava%2Fjava%2Fnio%2Fchannels%2FFileChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9719e37cec64c4a3e2b31c1141dbdd5979f6d69c/libjava%2Fjava%2Fnio%2Fchannels%2FFileChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FFileChannelImpl.java?ref=9719e37cec64c4a3e2b31c1141dbdd5979f6d69c", "patch": "@@ -38,6 +38,9 @@\n \n package java.nio.channels;\n \n+import gnu.classpath.Configuration;\n+import gnu.gcj.RawData;\n+import gnu.java.nio.FileLockImpl;\n import java.io.EOFException;\n import java.io.FileDescriptor;\n import java.io.FileInputStream;\n@@ -47,8 +50,6 @@\n import java.nio.ByteBuffer;\n import java.nio.MappedByteBuffer;\n import java.nio.MappedByteBufferImpl;\n-import gnu.classpath.Configuration;\n-import gnu.gcj.RawData;\n \n /**\n  * This file is not user visible !\n@@ -354,8 +355,22 @@ public FileLock lock (long position, long size, boolean shared)\n         file_obj instanceof FileInputStream)\n       throw new NonWritableChannelException ();\n \t\n-    throw new Error (\"Not implemented\");\n+    boolean completed = false;\n+    \n+    try\n+      {\n+\tbegin();\n+        lockImpl(position, size, shared);\n+\tcompleted = true;\n+\treturn new FileLockImpl(fd, this, position, size, shared);\n+      }\n+    finally\n+      {\n+\tend(completed);\n+      }\n   }\n+\n+  private native void lockImpl(long position, long size, boolean shared);\n   \n   public FileLock tryLock (long position, long size, boolean shared)\n     throws IOException\n@@ -367,9 +382,27 @@ public FileLock tryLock (long position, long size, boolean shared)\n     if (!isOpen ())\n       throw new ClosedChannelException ();\n \n-    throw new Error (\"Not implemented\");\n+    if (! tryLockImpl(position, size, shared))\n+      return null;\n+\n+    boolean completed = false;\n+\n+    try\n+      {\n+\tboolean lockable = tryLockImpl(position, size, shared);\n+\tcompleted = true;\n+\treturn (lockable\n+\t\t? new FileLockImpl(fd, this, position, size, shared)\n+\t\t: null);\n+      }\n+    finally\n+      {\n+\tend(completed);\n+      }\n   }\n \n+  private native boolean tryLockImpl(long position, long size, boolean shared);\n+  \n   public long position ()\n     throws IOException\n   {"}, {"sha": "56828a46604c1da25c6354f80501a387cb16dd81", "filename": "libjava/java/nio/channels/natFileChannelImpl.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9719e37cec64c4a3e2b31c1141dbdd5979f6d69c/libjava%2Fjava%2Fnio%2Fchannels%2FnatFileChannelImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9719e37cec64c4a3e2b31c1141dbdd5979f6d69c/libjava%2Fjava%2Fnio%2Fchannels%2FnatFileChannelImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FnatFileChannelImpl.cc?ref=9719e37cec64c4a3e2b31c1141dbdd5979f6d69c", "patch": "@@ -25,11 +25,13 @@ details.  */\n #endif\n \n #include <gnu/gcj/RawData.h>\n+#include <gnu/java/nio/FileLockImpl.h>\n #include <java/io/FileDescriptor.h>\n #include <java/io/IOException.h>\n #include <java/nio/ByteBuffer.h>\n #include <java/nio/channels/FileChannel.h>\n #include <java/nio/channels/FileChannelImpl.h>\n+#include <java/nio/channels/FileLock.h>\n \n jlong\n java::nio::channels::FileChannelImpl::size ()\n@@ -92,3 +94,17 @@ java::nio::channels::FileChannelImpl::nio_msync (gnu::gcj::RawData* /*map_addres\n {\n   throw new ::java::io::IOException (JvNewStringUTF (\"msync not implemented\"));\n }\n+\n+void\n+java::nio::channels::FileChannelImpl::lockImpl(jlong position, jlong size, jboolean shared)\n+{\n+  // FIXME: shared is unused, write is always true.\n+  fd->lock(position, size, true);\n+}\n+\n+jboolean\n+java::nio::channels::FileChannelImpl::tryLockImpl(jlong position, jlong size, jboolean shared)\n+{\n+  // FIXME: shared is unused, write is always true.\n+  return fd->tryLock(position, size, true);\n+}"}]}