{"sha": "4458909a806825bc9a74b69e14c7fb88a551b800", "node_id": "C_kwDOANBUbNoAKDQ0NTg5MDlhODA2ODI1YmM5YTc0YjY5ZTE0YzdmYjg4YTU1MWI4MDA", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2021-11-22T12:53:56Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-01-06T17:11:32Z"}, "message": "[Ada] Removal of technical debt\n\ngcc/ada/\n\n\t* exp_ch6.adb (Add_Simple_Call_By_Copy_Code): Add comments\n\tregarding special handling of components which depend on\n\tdiscriminants.\n\t* exp_dist.adb (Build_From_Any_Function): Add Real_Rep actual\n\tfor calls to Has_Stream_Attribute_Definition.\n\t(Build_To_Any_Function): Likewise.\n\t(Build_TypeCode_Function): Likewise.\n\t* freeze.adb (Freeze_Entity): Add missing comment for Test_E.\n\t* libgnat/s-utf_32.adb: Remove disabled warning comments and\n\ttemporarily inserted pragma warnings.  Remove very old (2006 and\n\t2012) comments about bootstrapping older versions.\n\t* par.adb (P_Identifier): Add new parameter Force_Msg.\n\t* par-ch2.adb (P_Identifier): Restructure and clean up function.\n\t* par-ch3.adb (P_Defining_Identifier): Remove code duplication\n\tfor parsing identifiers.\n\t* sem_attr.adb (Stream_Attribute_Available): Add missing\n\tcomments and add Real_Rep actual for calls to\n\tHas_Stream_Attribute_Definition.\n\t* sem_cat.adb (Has_Read_Write_Attribute): Add Real_Rep actual\n\tfor calls to Has_Stream_Attribute_Definition.\n\t(Has_Stream_Attribute_Definition): Remove local Real_Rep and fix\n\trecursive calls. Add default value for Real_Rep.\n\t* sem_cat.ads (Has_Stream_Attribute_Definition): Add new out\n\tparameter \"Real_Rep\".\n\t* sem_type.adb (Add_Entry): Add condition to avoid passing\n\tnon-function calls to Function_Interp_Has_Abstract_Op.\n\t(Function_Interp_Has_Abstract_Op): Add missing comments and\n\tremove check for Is_Overloadable.\n\t* sem_util.adb (Derivation_Too_Early_To_Inherit): Remove\n\tduplicated code.", "tree": {"sha": "70dedcc038494ce0cdd8e31da5fb2b456d1cbec9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70dedcc038494ce0cdd8e31da5fb2b456d1cbec9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4458909a806825bc9a74b69e14c7fb88a551b800", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4458909a806825bc9a74b69e14c7fb88a551b800", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4458909a806825bc9a74b69e14c7fb88a551b800", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4458909a806825bc9a74b69e14c7fb88a551b800/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfbb8de66079be551f08cdab38cafa766bb29e78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfbb8de66079be551f08cdab38cafa766bb29e78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfbb8de66079be551f08cdab38cafa766bb29e78"}], "stats": {"total": 243, "additions": 111, "deletions": 132}, "files": [{"sha": "c18d8389e102bc10106122b146d4150672fcf595", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4458909a806825bc9a74b69e14c7fb88a551b800/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4458909a806825bc9a74b69e14c7fb88a551b800/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=4458909a806825bc9a74b69e14c7fb88a551b800", "patch": "@@ -1899,7 +1899,7 @@ package body Exp_Ch6 is\n \n          Reset_Packed_Prefix;\n \n-         Temp := Make_Temporary (Loc, 'T', Actual);\n+         Temp   := Make_Temporary (Loc, 'T', Actual);\n          Incod  := Relocate_Node (Actual);\n          Outcod := New_Copy_Tree (Incod);\n \n@@ -1921,7 +1921,10 @@ package body Exp_Ch6 is\n \n          elsif Inside_Init_Proc then\n \n-            --  Could use a comment here to match comment below ???\n+            --  Skip using the actual as the expression in Decl if we are in\n+            --  an init proc and it is not a component which depends on a\n+            --  discriminant, because, in this case, we need to use the actual\n+            --  type of the component instead.\n \n             if Nkind (Actual) /= N_Selected_Component\n               or else\n@@ -1930,8 +1933,9 @@ package body Exp_Ch6 is\n             then\n                Incod := Empty;\n \n-            --  Otherwise, keep the component in order to generate the proper\n-            --  actual subtype, that depends on enclosing discriminants.\n+            --  Otherwise, keep the component so we can generate the proper\n+            --  actual subtype - since the subtype depends on enclosing\n+            --  discriminants.\n \n             else\n                null;"}, {"sha": "f6066500d980c35ef80d289299c71a70761eb48e", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4458909a806825bc9a74b69e14c7fb88a551b800/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4458909a806825bc9a74b69e14c7fb88a551b800/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=4458909a806825bc9a74b69e14c7fb88a551b800", "patch": "@@ -8600,6 +8600,8 @@ package body Exp_Dist is\n \n             Use_Opaque_Representation : Boolean;\n \n+            Real_Rep : Node_Id;\n+\n          begin\n             --  For a derived type, we can't go past the base type (to the\n             --  parent type) here, because that would cause the attribute's\n@@ -8634,10 +8636,10 @@ package body Exp_Dist is\n             Use_Opaque_Representation := False;\n \n             if Has_Stream_Attribute_Definition\n-                 (Typ, TSS_Stream_Output, At_Any_Place => True)\n+                 (Typ, TSS_Stream_Output, Real_Rep, At_Any_Place => True)\n               or else\n                Has_Stream_Attribute_Definition\n-                 (Typ, TSS_Stream_Write, At_Any_Place => True)\n+                 (Typ, TSS_Stream_Write, Real_Rep, At_Any_Place => True)\n             then\n                --  If user-defined stream attributes are specified for this\n                --  type, use them and transmit data as an opaque sequence of\n@@ -9438,6 +9440,8 @@ package body Exp_Dist is\n             --  When True, use stream attributes and represent type as an\n             --  opaque sequence of bytes.\n \n+            Real_Rep : Node_Id;\n+\n          begin\n             --  For a derived type, we can't go past the base type (to the\n             --  parent type) here, because that would cause the attribute's\n@@ -9492,10 +9496,10 @@ package body Exp_Dist is\n             Use_Opaque_Representation := False;\n \n             if Has_Stream_Attribute_Definition\n-                 (Typ, TSS_Stream_Output, At_Any_Place => True)\n+                 (Typ, TSS_Stream_Output, Real_Rep, At_Any_Place => True)\n               or else\n                Has_Stream_Attribute_Definition\n-                 (Typ, TSS_Stream_Write,  At_Any_Place => True)\n+                 (Typ, TSS_Stream_Write, Real_Rep, At_Any_Place => True)\n             then\n                --  If user-defined stream attributes are specified for this\n                --  type, use them and transmit data as an opaque sequence of\n@@ -10624,6 +10628,8 @@ package body Exp_Dist is\n             Type_Name_Str    : String_Id;\n             Type_Repo_Id_Str : String_Id;\n \n+            Real_Rep : Node_Id;\n+\n          --  Start of processing for Build_TypeCode_Function\n \n          begin\n@@ -10657,10 +10663,10 @@ package body Exp_Dist is\n               (Type_Name_Str, Type_Repo_Id_Str, Parameters);\n \n             if Has_Stream_Attribute_Definition\n-                 (Typ, TSS_Stream_Output, At_Any_Place => True)\n+                 (Typ, TSS_Stream_Output, Real_Rep, At_Any_Place => True)\n               or else\n                Has_Stream_Attribute_Definition\n-                 (Typ, TSS_Stream_Write, At_Any_Place => True)\n+                 (Typ, TSS_Stream_Write, Real_Rep, At_Any_Place => True)\n             then\n                --  If user-defined stream attributes are specified for this\n                --  type, use them and transmit data as an opaque sequence of"}, {"sha": "32a82fb7933b38287826b2c6a79defd6901d478c", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4458909a806825bc9a74b69e14c7fb88a551b800/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4458909a806825bc9a74b69e14c7fb88a551b800/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=4458909a806825bc9a74b69e14c7fb88a551b800", "patch": "@@ -2711,7 +2711,11 @@ package body Freeze is\n       --  List of freezing actions, left at No_List if none\n \n       Test_E : Entity_Id := E;\n-      --  This could use a comment ???\n+      --  A local temporary used to test if freezing is necessary for E, since\n+      --  its value can be set to something other than E in certain cases. For\n+      --  example, E cannot be used directly in cases such as when it is an\n+      --  Itype defined within a record - since it is the location of record\n+      --  which matters.\n \n       procedure Add_To_Result (Fnod : Node_Id);\n       --  Add freeze action Fnod to list Result"}, {"sha": "18eb5716ad9d80843da3fb6bdd46f0c533b3cca7", "filename": "gcc/ada/libgnat/s-utf_32.adb", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4458909a806825bc9a74b69e14c7fb88a551b800/gcc%2Fada%2Flibgnat%2Fs-utf_32.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4458909a806825bc9a74b69e14c7fb88a551b800/gcc%2Fada%2Flibgnat%2Fs-utf_32.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-utf_32.adb?ref=4458909a806825bc9a74b69e14c7fb88a551b800", "patch": "@@ -29,16 +29,13 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-pragma Style_Checks (Off);\n---  Allow long lines in this unit. Note this could be more specific, but we\n---  keep this simple form because of bootstrap constraints ???\n+pragma Style_Checks (\"M512\");\n+--  Allow long lines in this unit\n \n---  pragma Warnings (Off, \"non-static constant in preelaborated unit\");\n---  We need this to be pure, and the three constants in question are not a\n---  real problem, they are completely known at compile time. This pragma\n---  is commented out for now, because we still want to be able to bootstrap\n---  with old versions of the compiler that did not support this form. We\n---  have added additional pragma Warnings (Off/On) for now ???\n+pragma Warnings (Off, \"non-static constant in preelaborated unit\");\n+--  We need package to be pure, and multiple constants in this unit will\n+--  trigger the \"non-static\" warning - so ignore this since they are known at\n+--  compile time and not a real problem for us.\n \n package body System.UTF_32 is\n \n@@ -1856,9 +1853,6 @@ package body System.UTF_32 is\n      (16#F0000#, 16#FFFFD#),  -- (Co)  <Plane 15 Private Use, First> .. <Plane 15 Private Use, Last>\n      (16#100000#, 16#10FFFD#));  -- (Co)  <Plane 16 Private Use, First> .. <Plane 16 Private Use, Last>\n \n-   pragma Warnings (Off);\n-   --  Temporary, until pragma at start can be activated ???\n-\n    --  The following array is parallel to the Unicode_Ranges table above. For\n    --  each entry in the Unicode_Ranges table, there is a corresponding entry\n    --  in the following table indicating the corresponding unicode category.\n@@ -6506,9 +6500,6 @@ package body System.UTF_32 is\n      (16#1FBF0#, 16#1FBF9#),   -- SEGMENTED DIGIT ZERO..SEGMENTED DIGIT NINE\n      (16#2F800#, 16#2FA1D#));  -- CJK COMPATIBILITY IDEOGRAPH-2F800..CJK COMPATIBILITY IDEOGRAPH-2FA1D\n \n-   pragma Warnings (On);\n-   --  Temporary until pragma Warnings at start can be activated ???\n-\n    type Decomposition_Mapping is record\n       Item               : UTF_32;\n       First_Char_Mapping : UTF_32;\n@@ -12312,7 +12303,7 @@ package body System.UTF_32 is\n       return C = Nd;\n    end Is_UTF_32_Digit;\n \n-    ----------------------\n+   ----------------------\n    -- Is_UTF_32_Letter --\n    ----------------------\n "}, {"sha": "69cc135f76f43a4fc6171c18478e8df15161e164", "filename": "gcc/ada/par-ch2.adb", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4458909a806825bc9a74b69e14c7fb88a551b800/gcc%2Fada%2Fpar-ch2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4458909a806825bc9a74b69e14c7fb88a551b800/gcc%2Fada%2Fpar-ch2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch2.adb?ref=4458909a806825bc9a74b69e14c7fb88a551b800", "patch": "@@ -62,35 +62,40 @@ package body Ch2 is\n \n    --  Error recovery: can raise Error_Resync (cannot return Error)\n \n-   function P_Identifier (C : Id_Check := None) return Node_Id is\n+   function P_Identifier\n+     (C         : Id_Check := None;\n+      Force_Msg : Boolean  := False)\n+     return Node_Id\n+   is\n       Ident_Node : Node_Id;\n \n    begin\n       --  All set if we do indeed have an identifier\n \n-      --  Code duplication, see Par_Ch3.P_Defining_Identifier???\n-\n       if Token = Tok_Identifier then\n          Check_Future_Keyword;\n-         Ident_Node := Token_Node;\n-         Scan; -- past Identifier\n-         return Ident_Node;\n \n       --  If we have a reserved identifier, manufacture an identifier with\n       --  a corresponding name after posting an appropriate error message\n \n       elsif Is_Reserved_Identifier (C) then\n-         Scan_Reserved_Identifier (Force_Msg => False);\n-         Ident_Node := Token_Node;\n-         Scan; -- past the node\n-         return Ident_Node;\n+         Scan_Reserved_Identifier (Force_Msg => Force_Msg);\n \n       --  Otherwise we have junk that cannot be interpreted as an identifier\n \n       else\n          T_Identifier; -- to give message\n          raise Error_Resync;\n       end if;\n+\n+      if Style_Check then\n+         Style.Check_Defining_Identifier_Casing;\n+      end if;\n+\n+      Ident_Node := Token_Node;\n+      Scan; -- past the identifier\n+\n+      return Ident_Node;\n    end P_Identifier;\n \n    --------------------------"}, {"sha": "d4cfd5559b58d421c4cbd05f41547648c35bcb6b", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4458909a806825bc9a74b69e14c7fb88a551b800/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4458909a806825bc9a74b69e14c7fb88a551b800/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=4458909a806825bc9a74b69e14c7fb88a551b800", "patch": "@@ -209,39 +209,9 @@ package body Ch3 is\n    --  Error recovery: can raise Error_Resync\n \n    function P_Defining_Identifier (C : Id_Check := None) return Node_Id is\n-      Ident_Node : Node_Id;\n+      Ident_Node : Node_Id := P_Identifier (C, True);\n \n    begin\n-      --  Scan out the identifier. Note that this code is essentially identical\n-      --  to P_Identifier, except that in the call to Scan_Reserved_Identifier\n-      --  we set Force_Msg to True, since we want at least one message for each\n-      --  separate declaration (but not use) of a reserved identifier.\n-\n-      --  Duplication should be removed, common code should be factored???\n-\n-      if Token = Tok_Identifier then\n-         Check_Future_Keyword;\n-\n-      --  If we have a reserved identifier, manufacture an identifier with\n-      --  a corresponding name after posting an appropriate error message\n-\n-      elsif Is_Reserved_Identifier (C) then\n-         Scan_Reserved_Identifier (Force_Msg => True);\n-\n-      --  Otherwise we have junk that cannot be interpreted as an identifier\n-\n-      else\n-         T_Identifier; -- to give message\n-         raise Error_Resync;\n-      end if;\n-\n-      if Style_Check then\n-         Style.Check_Defining_Identifier_Casing;\n-      end if;\n-\n-      Ident_Node := Token_Node;\n-      Scan; -- past the identifier\n-\n       --  If we already have a defining identifier, clean it out and make\n       --  a new clean identifier. This situation arises in some error cases\n       --  and we need to fix it."}, {"sha": "c577d283c42823780ddacf682ddfc36a448a571c", "filename": "gcc/ada/par.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4458909a806825bc9a74b69e14c7fb88a551b800/gcc%2Fada%2Fpar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4458909a806825bc9a74b69e14c7fb88a551b800/gcc%2Fada%2Fpar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.adb?ref=4458909a806825bc9a74b69e14c7fb88a551b800", "patch": "@@ -649,10 +649,16 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n       --  procedure more than once for the same pragma. All parse-time pragma\n       --  handling must be prepared to handle such multiple calls correctly.\n \n-      function P_Identifier (C : Id_Check := None) return Node_Id;\n+      function P_Identifier\n+        (C         : Id_Check := None;\n+         Force_Msg : Boolean  := False) return Node_Id;\n       --  Scans out an identifier. The parameter C determines the treatment\n       --  of reserved identifiers. See declaration of Id_Check for details.\n \n+      --  An appropriate error message, pointing to the token, is also issued\n+      --  if either this is the first occurrence of misuse of this identifier,\n+      --  or if Force_Msg is True.\n+\n       function P_Pragmas_Opt return List_Id;\n       --  This function scans for a sequence of pragmas in other than a\n       --  declaration sequence or statement sequence context. All pragmas"}, {"sha": "2cd8c1403003c9d447cd7d5b0bf68d515c936ff8", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4458909a806825bc9a74b69e14c7fb88a551b800/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4458909a806825bc9a74b69e14c7fb88a551b800/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=4458909a806825bc9a74b69e14c7fb88a551b800", "patch": "@@ -12555,27 +12555,38 @@ package body Sem_Attr is\n    is\n       Etyp : Entity_Id := Typ;\n \n+      Real_Rep : Node_Id;\n+\n    --  Start of processing for Stream_Attribute_Available\n \n    begin\n-      --  We need some comments in this body ???\n+      --  Test if the attribute is specified directly on the type\n \n-      if Has_Stream_Attribute_Definition (Typ, Nam) then\n+      if Has_Stream_Attribute_Definition (Typ, Nam, Real_Rep) then\n          return True;\n       end if;\n \n+      --  We assume class-wide types have stream attributes\n+      --  when they are not limited. Otherwise we recurse on the\n+      --  parent type.\n+\n       if Is_Class_Wide_Type (Typ) then\n          return not Is_Limited_Type (Typ)\n            or else Stream_Attribute_Available (Etype (Typ), Nam);\n       end if;\n \n+      --  Non-class-wide abstract types cannot have Input streams\n+      --  specified.\n+\n       if Nam = TSS_Stream_Input\n         and then Is_Abstract_Type (Typ)\n         and then not Is_Class_Wide_Type (Typ)\n       then\n          return False;\n       end if;\n \n+      --  Otherwise, nonlimited types have stream attributes\n+\n       if not (Is_Limited_Type (Typ)\n         or else (Present (Partial_View)\n                    and then Is_Limited_Type (Partial_View)))\n@@ -12587,13 +12598,13 @@ package body Sem_Attr is\n \n       if Nam = TSS_Stream_Input\n         and then Ada_Version >= Ada_2005\n-        and then Stream_Attribute_Available (Etyp, TSS_Stream_Read)\n+        and then Stream_Attribute_Available (Etyp, TSS_Stream_Read, Real_Rep)\n       then\n          return True;\n \n       elsif Nam = TSS_Stream_Output\n         and then Ada_Version >= Ada_2005\n-        and then Stream_Attribute_Available (Etyp, TSS_Stream_Write)\n+        and then Stream_Attribute_Available (Etyp, TSS_Stream_Write, Real_Rep)\n       then\n          return True;\n       end if;\n@@ -12607,7 +12618,7 @@ package body Sem_Attr is\n          begin\n             Etyp := Etype (Etyp);\n \n-            if Has_Stream_Attribute_Definition (Etyp, Nam) then\n+            if Has_Stream_Attribute_Definition (Etyp, Nam, Real_Rep) then\n                if not Derivation_Too_Early_To_Inherit (Derived_Type, Nam) then\n                   return True;\n                end if;"}, {"sha": "bf03e8a1b200dc9a895bd3db8aed2cb7e1d5e0ab", "filename": "gcc/ada/sem_cat.adb", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4458909a806825bc9a74b69e14c7fb88a551b800/gcc%2Fada%2Fsem_cat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4458909a806825bc9a74b69e14c7fb88a551b800/gcc%2Fada%2Fsem_cat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.adb?ref=4458909a806825bc9a74b69e14c7fb88a551b800", "patch": "@@ -432,12 +432,13 @@ package body Sem_Cat is\n    -------------------------------\n \n    function Has_Read_Write_Attributes (E : Entity_Id) return Boolean is\n+      Real_Rep : Node_Id;\n    begin\n       return True\n         and then Has_Stream_Attribute_Definition\n-                   (E, TSS_Stream_Read,  At_Any_Place => True)\n+                   (E, TSS_Stream_Read, Real_Rep, At_Any_Place => True)\n         and then Has_Stream_Attribute_Definition\n-                   (E, TSS_Stream_Write, At_Any_Place => True);\n+                   (E, TSS_Stream_Write, Real_Rep, At_Any_Place => True);\n    end Has_Read_Write_Attributes;\n \n    -------------------------------------\n@@ -447,18 +448,11 @@ package body Sem_Cat is\n    function Has_Stream_Attribute_Definition\n      (Typ          : Entity_Id;\n       Nam          : TSS_Name_Type;\n+      Real_Rep     : out Node_Id;\n       At_Any_Place : Boolean := False) return Boolean\n    is\n       Rep_Item : Node_Id;\n \n-      Real_Rep : Node_Id;\n-      --  The stream operation may be specified by an attribute definition\n-      --  clause in the source, or by an aspect that generates such an\n-      --  attribute definition. For an aspect, the generated attribute\n-      --  definition may be placed at the freeze point of the full view of\n-      --  the type, but the aspect specification makes the operation visible\n-      --  to a client wherever the partial view is visible.\n-\n    begin\n       --  We start from the declaration node and then loop until the end of\n       --  the list until we find the requested attribute definition clause.\n@@ -467,6 +461,8 @@ package body Sem_Cat is\n       --  inserted by the expander at the point where the clause occurs),\n       --  unless At_Any_Place is true.\n \n+      Real_Rep := Empty;\n+\n       Rep_Item := First_Rep_Item (Typ);\n       while Present (Rep_Item) loop\n          Real_Rep := Rep_Item;\n@@ -511,7 +507,7 @@ package body Sem_Cat is\n         and then Present (Full_View (Typ))\n       then\n          return Has_Stream_Attribute_Definition\n-            (Underlying_Type (Typ), Nam, At_Any_Place);\n+                  (Underlying_Type (Typ), Nam, Real_Rep, At_Any_Place);\n \n       --  Otherwise, if At_Any_Place is true, return True if the attribute is\n       --  available at any place; if it is false, return True only if the"}, {"sha": "3b3600646d9599c07c4b0e9ed8f143e745d46323", "filename": "gcc/ada/sem_cat.ads", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4458909a806825bc9a74b69e14c7fb88a551b800/gcc%2Fada%2Fsem_cat.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4458909a806825bc9a74b69e14c7fb88a551b800/gcc%2Fada%2Fsem_cat.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.ads?ref=4458909a806825bc9a74b69e14c7fb88a551b800", "patch": "@@ -43,6 +43,7 @@ package Sem_Cat is\n    function Has_Stream_Attribute_Definition\n      (Typ          : Entity_Id;\n       Nam          : TSS_Name_Type;\n+      Real_Rep     : out Node_Id;\n       At_Any_Place : Boolean := False) return Boolean;\n    --  True when there is a attribute definition clause specifying attribute\n    --  Nam for Typ. In Ada 2005 mode, returns True only when the attribute\n@@ -54,6 +55,14 @@ package Sem_Cat is\n    --  specific type, excluding inherited definitions, the flags\n    --  Has_Specified_Stream_* can be used instead).\n \n+   --  The stream operation may be specified by an attribute definition\n+   --  clause in the source, or by an aspect that generates such an\n+   --  attribute definition. For an aspect, the generated attribute\n+   --  definition may be placed at the freeze point of the full view of\n+   --  the type, but the aspect specification makes the operation visible\n+   --  to a client wherever the partial view is visible. This real\n+   --  representation is returned in the Real_Rep parameter.\n+\n    function In_Preelaborated_Unit return Boolean;\n    --  Determines if the current scope is within a preelaborated compilation\n    --  unit, that is one to which one of the pragmas Preelaborate, Pure,"}, {"sha": "cbb00fd47639799a97367ac909605ca24173a6ff", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4458909a806825bc9a74b69e14c7fb88a551b800/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4458909a806825bc9a74b69e14c7fb88a551b800/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=4458909a806825bc9a74b69e14c7fb88a551b800", "patch": "@@ -235,7 +235,9 @@ package body Sem_Type is\n          if Ada_Version >= Ada_2005 then\n             if Nkind (N) in N_Binary_Op then\n                Abstr_Op := Binary_Op_Interp_Has_Abstract_Op (N, Name);\n-            elsif Nkind (N) = N_Function_Call then\n+            elsif Nkind (N) = N_Function_Call\n+              and then Ekind (Name) = E_Function\n+            then\n                Abstr_Op := Function_Interp_Has_Abstract_Op (N, Name);\n             end if;\n          end if;\n@@ -2357,19 +2359,24 @@ package body Sem_Type is\n       Form_Parm : Node_Id;\n \n    begin\n-      --  Why is check on E needed below ???\n-      --  In any case this para needs comments ???\n+      if Is_Overloaded (N) then\n+         --  Move through the formals and actuals of the call to\n+         --  determine if an abstract interpretation exists.\n \n-      if Is_Overloaded (N) and then Is_Overloadable (E) then\n          Act_Parm  := First_Actual (N);\n          Form_Parm := First_Formal (E);\n          while Present (Act_Parm) and then Present (Form_Parm) loop\n             Act := Act_Parm;\n \n+            --  Extract the actual from a parameter association\n+\n             if Nkind (Act) = N_Parameter_Association then\n                Act := Explicit_Actual_Parameter (Act);\n             end if;\n \n+            --  Use the actual and the type of its correponding formal to test\n+            --  for an abstract interpretation and return it when found.\n+\n             Abstr_Op := Has_Abstract_Op (Act, Etype (Form_Parm));\n \n             if Present (Abstr_Op) then\n@@ -2381,6 +2388,8 @@ package body Sem_Type is\n          end loop;\n       end if;\n \n+      --  Otherwise, return empty\n+\n       return Empty;\n    end Function_Interp_Has_Abstract_Op;\n "}, {"sha": "5c05e844e40fec006795e9a9b038a88fd522deec", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 11, "deletions": 43, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4458909a806825bc9a74b69e14c7fb88a551b800/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4458909a806825bc9a74b69e14c7fb88a551b800/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=4458909a806825bc9a74b69e14c7fb88a551b800", "patch": "@@ -7705,62 +7705,30 @@ package body Sem_Util is\n \n    function Derivation_Too_Early_To_Inherit\n      (Typ : Entity_Id; Streaming_Op : TSS_Name_Type) return Boolean is\n+\n       Btyp        : constant Entity_Id := Implementation_Base_Type (Typ);\n       Parent_Type : Entity_Id;\n+\n+      Real_Rep : Node_Id;\n+\n+   --  Start of processing for Derivation_Too_Early_To_Inherit\n+\n    begin\n       if Is_Derived_Type (Btyp) then\n          Parent_Type := Implementation_Base_Type (Etype (Btyp));\n          pragma Assert (Parent_Type /= Btyp);\n+\n          if Has_Stream_Attribute_Definition\n-              (Parent_Type, Streaming_Op)\n+              (Parent_Type, Streaming_Op, Real_Rep => Real_Rep)\n+\n            and then In_Same_Extended_Unit (Btyp, Parent_Type)\n            and then Instantiation (Get_Source_File_Index (Sloc (Btyp))) =\n                     Instantiation (Get_Source_File_Index (Sloc (Parent_Type)))\n          then\n-            declare\n-               --  ??? Avoid code duplication here with\n-               --  Sem_Cat.Has_Stream_Attribute_Definition by introducing a\n-               --  new function to be called from both places?\n-\n-               Rep_Item : Node_Id := First_Rep_Item (Parent_Type);\n-               Real_Rep : Node_Id;\n-               Found    : Boolean := False;\n-            begin\n-               while Present (Rep_Item) loop\n-                  Real_Rep := Rep_Item;\n-\n-                  if Nkind (Rep_Item) = N_Aspect_Specification then\n-                     Real_Rep := Aspect_Rep_Item (Rep_Item);\n-                  end if;\n-\n-                  if Nkind (Real_Rep) = N_Attribute_Definition_Clause then\n-                     case Chars (Real_Rep) is\n-                        when Name_Read =>\n-                           Found := Streaming_Op = TSS_Stream_Read;\n-\n-                        when Name_Write =>\n-                           Found := Streaming_Op = TSS_Stream_Write;\n-\n-                        when Name_Input =>\n-                           Found := Streaming_Op = TSS_Stream_Input;\n-\n-                        when Name_Output =>\n-                           Found := Streaming_Op = TSS_Stream_Output;\n-\n-                        when others =>\n-                           null;\n-                     end case;\n-                  end if;\n-\n-                  if Found then\n-                     return Earlier_In_Extended_Unit (Btyp, Real_Rep);\n-                  end if;\n-\n-                  Next_Rep_Item (Rep_Item);\n-               end loop;\n-            end;\n+            return Earlier_In_Extended_Unit (Btyp, Real_Rep);\n          end if;\n       end if;\n+\n       return False;\n    end Derivation_Too_Early_To_Inherit;\n "}]}