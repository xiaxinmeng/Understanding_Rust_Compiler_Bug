{"sha": "f841b68397bb8b15ea570a7a86c5414f62cc9774", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg0MWI2ODM5N2JiOGIxNWVhNTcwYTdhODZjNTQxNGY2MmNjOTc3NA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2012-10-16T20:32:45Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2012-10-16T20:32:45Z"}, "message": "2012-10-16  Tom de Vries  <tom@codesourcery.com>\n\n\t* expr.c (move_by_pieces, move_by_pieces_ninsns, can_store_by_pieces)\n\t(store_by_pieces_1): Don't enter loop when no more data is left.\n\nFrom-SVN: r192514", "tree": {"sha": "48512b7be16b93e76a8180a2cb924564b49d714a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48512b7be16b93e76a8180a2cb924564b49d714a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f841b68397bb8b15ea570a7a86c5414f62cc9774", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f841b68397bb8b15ea570a7a86c5414f62cc9774", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f841b68397bb8b15ea570a7a86c5414f62cc9774", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f841b68397bb8b15ea570a7a86c5414f62cc9774/comments", "author": null, "committer": null, "parents": [{"sha": "7181e991b54aaee6a21afb372611523a09a0dc00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7181e991b54aaee6a21afb372611523a09a0dc00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7181e991b54aaee6a21afb372611523a09a0dc00"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "14b817d840c4a4e0b9fb788907277e3ba2a79c27", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f841b68397bb8b15ea570a7a86c5414f62cc9774/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f841b68397bb8b15ea570a7a86c5414f62cc9774/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f841b68397bb8b15ea570a7a86c5414f62cc9774", "patch": "@@ -1,3 +1,8 @@\n+2012-10-16  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* expr.c (move_by_pieces, move_by_pieces_ninsns, can_store_by_pieces)\n+\t(store_by_pieces_1): Don't enter loop when no more data is left.\n+\n 2012-10-16  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \t* loop-doloop.c (doloop_modify): Pass doloop_end pattern to"}, {"sha": "8fa19fd5ce131394bbf3a8cab5dd326d77d8d9e0", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f841b68397bb8b15ea570a7a86c5414f62cc9774/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f841b68397bb8b15ea570a7a86c5414f62cc9774/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=f841b68397bb8b15ea570a7a86c5414f62cc9774", "patch": "@@ -966,7 +966,7 @@ move_by_pieces (rtx to, rtx from, unsigned HOST_WIDE_INT len,\n   /* First move what we can in the largest integer mode, then go to\n      successively smaller modes.  */\n \n-  while (max_size > 1)\n+  while (max_size > 1 && data.len > 0)\n     {\n       enum machine_mode mode = widest_int_mode_for_size (max_size);\n \n@@ -1026,7 +1026,7 @@ move_by_pieces_ninsns (unsigned HOST_WIDE_INT l, unsigned int align,\n \n   align = alignment_for_piecewise_move (MOVE_MAX_PIECES, align);\n \n-  while (max_size > 1)\n+  while (max_size > 1 && l > 0)\n     {\n       enum machine_mode mode;\n       enum insn_code icode;\n@@ -2417,7 +2417,7 @@ can_store_by_pieces (unsigned HOST_WIDE_INT len,\n     {\n       l = len;\n       max_size = STORE_MAX_PIECES + 1;\n-      while (max_size > 1)\n+      while (max_size > 1 && l > 0)\n \t{\n \t  mode = widest_int_mode_for_size (max_size);\n \n@@ -2612,7 +2612,7 @@ store_by_pieces_1 (struct store_by_pieces_d *data ATTRIBUTE_UNUSED,\n   /* First store what we can in the largest integer mode, then go to\n      successively smaller modes.  */\n \n-  while (max_size > 1)\n+  while (max_size > 1 && data->len > 0)\n     {\n       enum machine_mode mode = widest_int_mode_for_size (max_size);\n "}]}