{"sha": "3dd1cc4a05f57e0d65435a055d532e699c574403", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RkMWNjNGEwNWY1N2UwZDY1NDM1YTA1NWQ1MzJlNjk5YzU3NDQwMw==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2020-03-30T14:16:49Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-15T08:04:22Z"}, "message": "[Ada] Put_Image: Implement for private types with full real type\n\n2020-06-15  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* exp_imgv.adb (Expand_Image_Attribute): Allow private types.\n\tPut_Image generates Image for numeric types, and private types\n\twhose full type is numeric. This requires the Conversion_OK flag\n\tfor integer and floating-point types. For fixed point, we need\n\tthe extra conversion.\n\t* exp_put_image.adb (Build_Elementary_Put_Image_Call): Remove\n\tspecial handling of real types.\n\t(Enable_Put_Image): Enable for reals.", "tree": {"sha": "b2bcf466855c7cb10058d6022de07f2f8e57d620", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2bcf466855c7cb10058d6022de07f2f8e57d620"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dd1cc4a05f57e0d65435a055d532e699c574403", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dd1cc4a05f57e0d65435a055d532e699c574403", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dd1cc4a05f57e0d65435a055d532e699c574403", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dd1cc4a05f57e0d65435a055d532e699c574403/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb72521915b1f109b3b65aa384005c2527f76c31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb72521915b1f109b3b65aa384005c2527f76c31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb72521915b1f109b3b65aa384005c2527f76c31"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "bae292c79582f65f1ee9862818af88f6a61fb201", "filename": "gcc/ada/exp_imgv.adb", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd1cc4a05f57e0d65435a055d532e699c574403/gcc%2Fada%2Fexp_imgv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd1cc4a05f57e0d65435a055d532e699c574403/gcc%2Fada%2Fexp_imgv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_imgv.adb?ref=3dd1cc4a05f57e0d65435a055d532e699c574403", "patch": "@@ -640,8 +640,31 @@ package body Exp_Imgv is\n              Prefix         => New_Occurrence_Of (Ptyp, Loc),\n              Expressions    => New_List (Expr)));\n \n+      --  AI12-0020: Ada 2020 allows 'Image for all types, including private\n+      --  types. If the full type is not a fixed-point type, then it is enough\n+      --  to set the Conversion_OK flag. However, that would not work for\n+      --  fixed-point types, because that flag changes the run-time semantics\n+      --  of fixed-point type conversions; therefore, we must first convert to\n+      --  Rtyp, and then to Tent.\n+\n       else\n-         Arg_List := New_List (Convert_To (Tent, Expr));\n+         declare\n+            Conv : Node_Id;\n+         begin\n+            if Ada_Version >= Ada_2020\n+              and then Is_Private_Type (Etype (Expr))\n+            then\n+               if Is_Fixed_Point_Type (Rtyp) then\n+                  Conv := Convert_To (Tent, OK_Convert_To (Rtyp, Expr));\n+               else\n+                  Conv := OK_Convert_To (Tent, Expr);\n+               end if;\n+            else\n+               Conv := Convert_To (Tent, Expr);\n+            end if;\n+\n+            Arg_List := New_List (Conv);\n+         end;\n       end if;\n \n       --  Append Snn, Pnn arguments"}, {"sha": "763323fd6930fc0c0b1f30470ec39962d7da603c", "filename": "gcc/ada/exp_put_image.adb", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd1cc4a05f57e0d65435a055d532e699c574403/gcc%2Fada%2Fexp_put_image.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd1cc4a05f57e0d65435a055d532e699c574403/gcc%2Fada%2Fexp_put_image.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_put_image.adb?ref=3dd1cc4a05f57e0d65435a055d532e699c574403", "patch": "@@ -345,10 +345,6 @@ package body Exp_Put_Image is\n          --\n          --  Note that this is putting a leading space for reals.\n \n-         if Is_Real_Type (U_Type) then\n-            return Build_Unknown_Put_Image_Call (N);\n-         end if;\n-\n          declare\n             Image : constant Node_Id :=\n               Make_Attribute_Reference (Loc,\n@@ -831,17 +827,13 @@ package body Exp_Put_Image is\n       --\n       --  Put_Image on tagged types triggers some bugs.\n       --\n-      --  Put_Image doesn't work for private types whose full type is real.\n-      --  Disable for all real types, for simplicity.\n-      --\n       --  Put_Image doesn't work for access-to-protected types, because of\n       --  confusion over their size. Disable for all access-to-subprogram\n       --  types, just in case.\n \n       if Is_Remote_Types (Scope (Typ))\n         or else (Is_Tagged_Type (Typ) and then In_Predefined_Unit (Typ))\n         or else (Is_Tagged_Type (Typ) and then not Tagged_Put_Image_Enabled)\n-        or else Is_Real_Type (Typ)\n         or else Is_Access_Subprogram_Type (Typ)\n       then\n          return False;"}]}