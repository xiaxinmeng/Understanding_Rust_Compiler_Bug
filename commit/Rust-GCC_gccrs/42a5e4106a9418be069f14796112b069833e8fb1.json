{"sha": "42a5e4106a9418be069f14796112b069833e8fb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJhNWU0MTA2YTk0MThiZTA2OWYxNDc5NjExMmIwNjk4MzNlOGZiMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-06-06T10:03:14Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-06-06T10:03:14Z"}, "message": "decl.c (Gigi_Equivalent_Type): Make sure equivalent types are present before returning them.\n\n\t* gcc-interface/decl.c (Gigi_Equivalent_Type): Make sure equivalent\n\ttypes are present before returning them.  Remove final assertion.\n\t(gnat_to_gnu_entity) <E_Access_Protected_Subprogram_Type>: Adjust to\n\tabove change.\n\t<E_Protected_Type>: Likewise.\n\nFrom-SVN: r237130", "tree": {"sha": "efc4ba3cae55863c40aeb0f4a0ccf5e96a83e8df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efc4ba3cae55863c40aeb0f4a0ccf5e96a83e8df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42a5e4106a9418be069f14796112b069833e8fb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42a5e4106a9418be069f14796112b069833e8fb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42a5e4106a9418be069f14796112b069833e8fb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42a5e4106a9418be069f14796112b069833e8fb1/comments", "author": null, "committer": null, "parents": [{"sha": "f8a9b81f106b8e37893d643f93458195702c6c98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8a9b81f106b8e37893d643f93458195702c6c98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8a9b81f106b8e37893d643f93458195702c6c98"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "20edf04ee223752e24c9e54601f71f0d99d8f01f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42a5e4106a9418be069f14796112b069833e8fb1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42a5e4106a9418be069f14796112b069833e8fb1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=42a5e4106a9418be069f14796112b069833e8fb1", "patch": "@@ -1,3 +1,11 @@\n+2016-06-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (Gigi_Equivalent_Type): Make sure equivalent\n+\ttypes are present before returning them.  Remove final assertion.\n+\t(gnat_to_gnu_entity) <E_Access_Protected_Subprogram_Type>: Adjust to\n+\tabove change.\n+\t<E_Protected_Type>: Likewise.\n+\n 2016-06-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (elaborate_all_entities_for_package): Also do"}, {"sha": "45878a7c6357debf8a9503506c563b4386d6cefb", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42a5e4106a9418be069f14796112b069833e8fb1/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42a5e4106a9418be069f14796112b069833e8fb1/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=42a5e4106a9418be069f14796112b069833e8fb1", "patch": "@@ -4009,9 +4009,12 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \n     case E_Access_Protected_Subprogram_Type:\n     case E_Anonymous_Access_Protected_Subprogram_Type:\n-      /* The run-time representation is the equivalent type.  */\n-      if (type_annotate_only && No (gnat_equiv_type))\n+      /* If we are just annotating types and have no equivalent record type,\n+\t just return ptr_void_type.  */\n+      if (type_annotate_only && gnat_equiv_type == gnat_entity)\n \tgnu_type = ptr_type_node;\n+\n+      /* The run-time representation is the equivalent type.  */\n       else\n \t{\n \t  gnu_type = gnat_to_gnu_type (gnat_equiv_type);\n@@ -4377,7 +4380,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t just return void_type, except for root types that have discriminants\n \t because the discriminants will very likely be used in the declarative\n \t part of the associated body so they need to be translated.  */\n-      if (type_annotate_only && No (gnat_equiv_type))\n+      if (type_annotate_only && gnat_equiv_type == gnat_entity)\n \t{\n \t  if (Has_Discriminants (gnat_entity)\n \t      && Root_Type (gnat_entity) == gnat_entity)\n@@ -5143,26 +5146,26 @@ Gigi_Equivalent_Type (Entity_Id gnat_entity)\n \n     case E_Access_Protected_Subprogram_Type:\n     case E_Anonymous_Access_Protected_Subprogram_Type:\n-      gnat_equiv = Equivalent_Type (gnat_entity);\n+      if (Present (Equivalent_Type (gnat_entity)))\n+\tgnat_equiv = Equivalent_Type (gnat_entity);\n       break;\n \n     case E_Class_Wide_Type:\n       gnat_equiv = Root_Type (gnat_entity);\n       break;\n \n-    case E_Task_Type:\n-    case E_Task_Subtype:\n     case E_Protected_Type:\n     case E_Protected_Subtype:\n-      gnat_equiv = Corresponding_Record_Type (gnat_entity);\n+    case E_Task_Type:\n+    case E_Task_Subtype:\n+      if (Present (Corresponding_Record_Type (gnat_entity)))\n+\tgnat_equiv = Corresponding_Record_Type (gnat_entity);\n       break;\n \n     default:\n       break;\n     }\n \n-  gcc_assert (Present (gnat_equiv) || type_annotate_only);\n-\n   return gnat_equiv;\n }\n "}]}