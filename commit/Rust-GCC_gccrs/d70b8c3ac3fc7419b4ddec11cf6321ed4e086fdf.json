{"sha": "d70b8c3ac3fc7419b4ddec11cf6321ed4e086fdf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDcwYjhjM2FjM2ZjNzQxOWI0ZGRlYzExY2Y2MzIxZWQ0ZTA4NmZkZg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2004-11-24T10:06:54Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2004-11-24T10:06:54Z"}, "message": "re PR c++/16882 (overloading confused by const vector arguments)\n\n2004-11-24  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR c++/16882\n\n\t* tree.c (make_vector_type): Move qualifiers to the vector type,\n\tuse the inner type's main variant and build a main variant for\n\tthe vector type if necessary.\n\t(type_hash_eq): Check a vector type's TYPE_VECTOR_SUBPARTS.\n\ncp:\n2004-11-24  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR c++/16882\n\n\t* call.c (standard_conversion): Move check for conversions between\n\tvector pointers...\n\t* typeck.c (ptr_reasonably_similar): ... here.\n\ntestsuite:\n2004-11-24  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR c++/16882\n\n\t* g++.dg/conversion/simd1.C: New test.\n\nFrom-SVN: r91142", "tree": {"sha": "0c12974a411269c0d5ba5e09d0d63e06d3cd121e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c12974a411269c0d5ba5e09d0d63e06d3cd121e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d70b8c3ac3fc7419b4ddec11cf6321ed4e086fdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d70b8c3ac3fc7419b4ddec11cf6321ed4e086fdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d70b8c3ac3fc7419b4ddec11cf6321ed4e086fdf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d70b8c3ac3fc7419b4ddec11cf6321ed4e086fdf/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b38cd28c43ada6c2e1529b0f71cb598662d8f77c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b38cd28c43ada6c2e1529b0f71cb598662d8f77c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b38cd28c43ada6c2e1529b0f71cb598662d8f77c"}], "stats": {"total": 73, "additions": 66, "deletions": 7}, "files": [{"sha": "4ca7cf5996bec619417e675edbc18c0025f4fe0f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d70b8c3ac3fc7419b4ddec11cf6321ed4e086fdf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d70b8c3ac3fc7419b4ddec11cf6321ed4e086fdf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d70b8c3ac3fc7419b4ddec11cf6321ed4e086fdf", "patch": "@@ -1,3 +1,12 @@\n+2004-11-24  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR c++/16882\n+\n+\t* tree.c (make_vector_type): Move qualifiers to the vector type,\n+\tuse the inner type's main variant and build a main variant for\n+\tthe vector type if necessary.\n+\t(type_hash_eq): Check a vector type's TYPE_VECTOR_SUBPARTS.\n+\n 2004-11-24  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* target.h (late_rtl_prologue_epilogue): Remove."}, {"sha": "4f9c1d89bf49e792adb90653b3ee6968ce1786a4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d70b8c3ac3fc7419b4ddec11cf6321ed4e086fdf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d70b8c3ac3fc7419b4ddec11cf6321ed4e086fdf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d70b8c3ac3fc7419b4ddec11cf6321ed4e086fdf", "patch": "@@ -1,3 +1,11 @@\n+2004-11-24  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR c++/16882\n+\n+\t* call.c (standard_conversion): Move check for conversions between\n+\tvector pointers...\n+\t* typeck.c (ptr_reasonably_similar): ... here.\n+\n 2004-11-23  Ben Elliston  <bje@au.ibm.com>\n \n \t* cp-tree.h (context_as_string): Remove extern."}, {"sha": "c67b16f2537ba91f10d9c378219e36b350cf229d", "filename": "gcc/cp/call.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d70b8c3ac3fc7419b4ddec11cf6321ed4e086fdf/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d70b8c3ac3fc7419b4ddec11cf6321ed4e086fdf/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=d70b8c3ac3fc7419b4ddec11cf6321ed4e086fdf", "patch": "@@ -652,11 +652,6 @@ standard_conversion (tree to, tree from, tree expr)\n   if ((tcode == POINTER_TYPE || TYPE_PTR_TO_MEMBER_P (to))\n       && expr && null_ptr_cst_p (expr))\n     conv = build_conv (ck_std, to, conv);\n-  else if (tcode == POINTER_TYPE && fcode == POINTER_TYPE\n-\t   && TREE_CODE (TREE_TYPE (to)) == VECTOR_TYPE\n-\t   && TREE_CODE (TREE_TYPE (from)) == VECTOR_TYPE\n-\t   && vector_types_convertible_p (TREE_TYPE (to), TREE_TYPE (from)))\n-    conv = build_conv (ck_std, to, conv);\n   else if ((tcode == INTEGER_TYPE && fcode == POINTER_TYPE)\n \t   || (tcode == POINTER_TYPE && fcode == INTEGER_TYPE))\n     {"}, {"sha": "60f03c97387f047a25c14e1307a9798421fe5f66", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d70b8c3ac3fc7419b4ddec11cf6321ed4e086fdf/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d70b8c3ac3fc7419b4ddec11cf6321ed4e086fdf/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=d70b8c3ac3fc7419b4ddec11cf6321ed4e086fdf", "patch": "@@ -6425,6 +6425,10 @@ ptr_reasonably_similar (tree to, tree from)\n \t\t\tCOMPARE_BASE | COMPARE_DERIVED))\n \tcontinue;\n \n+      if (TREE_CODE (to) == VECTOR_TYPE\n+\t  && vector_types_convertible_p (to, from))\n+\treturn 1;\n+\n       if (TREE_CODE (to) == INTEGER_TYPE\n \t  && TYPE_PRECISION (to) == TYPE_PRECISION (from))\n \treturn 1;"}, {"sha": "6c75fd8d9ae1d37215d56ab3d49a65659632af2a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d70b8c3ac3fc7419b4ddec11cf6321ed4e086fdf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d70b8c3ac3fc7419b4ddec11cf6321ed4e086fdf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d70b8c3ac3fc7419b4ddec11cf6321ed4e086fdf", "patch": "@@ -1,3 +1,9 @@\n+2004-11-24  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR c++/16882\n+\n+\t* g++.dg/conversion/simd1.C: New test.\n+\n 2004-11-23  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* lib/target-libpath.exp: New file defining set_ld_library_path_env_vars"}, {"sha": "a1ae3a7eae9b5333231ecbe985ffa00b4e40a8da", "filename": "gcc/testsuite/g++.dg/conversion/simd1.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d70b8c3ac3fc7419b4ddec11cf6321ed4e086fdf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fsimd1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d70b8c3ac3fc7419b4ddec11cf6321ed4e086fdf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fsimd1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fsimd1.C?ref=d70b8c3ac3fc7419b4ddec11cf6321ed4e086fdf", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+\n+/* Test overload resolution of vector types.\n+   From Janis Johnson and Paolo Bonzini, based on PR/16882 */\n+\n+#define vector __attribute__((vector_size(16)))\n+\n+vector signed int vld (int a1, const vector signed int *a2) { return *a2; } /* { dg-error \"near match\" } */\n+vector signed short vld (int a1, const vector signed short *a2) { return *a2; } /* { dg-error \"near match\" } */\n+\n+extern int i;\n+extern vector signed short vss;\n+extern vector signed char *vscp;\n+extern vector signed short *vssp;\n+extern const vector signed short *cvssp;\n+\n+void foo ()\n+{\n+  vss = vld(i, vscp);        /* { dg-error \"no match\" } */\n+  vss = vld(i, vssp);\n+  vss = vld(i, cvssp);\n+}"}, {"sha": "643f1def6e4dcd5199a76688c6535593dbc86c34", "filename": "gcc/tree.c", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d70b8c3ac3fc7419b4ddec11cf6321ed4e086fdf/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d70b8c3ac3fc7419b4ddec11cf6321ed4e086fdf/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=d70b8c3ac3fc7419b4ddec11cf6321ed4e086fdf", "patch": "@@ -3437,11 +3437,13 @@ type_hash_eq (const void *va, const void *vb)\n     {\n     case VOID_TYPE:\n     case COMPLEX_TYPE:\n-    case VECTOR_TYPE:\n     case POINTER_TYPE:\n     case REFERENCE_TYPE:\n       return 1;\n \n+    case VECTOR_TYPE:\n+      return TYPE_VECTOR_SUBPARTS (a->type) == TYPE_VECTOR_SUBPARTS (b->type);\n+\n     case ENUMERAL_TYPE:\n       if (TYPE_VALUES (a->type) != TYPE_VALUES (b->type)\n \t  && !(TYPE_VALUES (a->type)\n@@ -5542,9 +5544,12 @@ make_vector_type (tree innertype, int nunits, enum machine_mode mode)\n {\n   tree t = make_node (VECTOR_TYPE);\n \n-  TREE_TYPE (t) = innertype;\n+  TREE_TYPE (t) = TYPE_MAIN_VARIANT (innertype);\n   TYPE_VECTOR_SUBPARTS (t) = nunits;\n   TYPE_MODE (t) = mode;\n+  TYPE_READONLY (t) = TYPE_READONLY (innertype);\n+  TYPE_VOLATILE (t) = TYPE_VOLATILE (innertype);\n+\n   layout_type (t);\n \n   {\n@@ -5563,6 +5568,16 @@ make_vector_type (tree innertype, int nunits, enum machine_mode mode)\n     TYPE_UID (rt) = TYPE_UID (t);\n   }\n \n+  /* Build our main variant, based on the main variant of the inner type.  */\n+  if (TYPE_MAIN_VARIANT (innertype) != innertype)\n+    {\n+      tree innertype_main_variant = TYPE_MAIN_VARIANT (innertype);\n+      unsigned int hash = TYPE_HASH (innertype_main_variant);\n+      TYPE_MAIN_VARIANT (t)\n+        = type_hash_canon (hash, make_vector_type (innertype_main_variant,\n+\t\t\t\t\t\t   nunits, mode));\n+    }\n+\n   return t;\n }\n "}]}