{"sha": "0a83f1a441d7aaadecb368c237b6ee70bd7b91d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE4M2YxYTQ0MWQ3YWFhZGVjYjM2OGMyMzdiNmVlNzBiZDdiOTFkNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-11-08T12:30:47Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-11-08T12:30:47Z"}, "message": "re PR target/92095 (internal error with -O1 -mcpu=niagara2 -fPIE)\n\n\tPR target/92095\n\t* config/sparc/sparc-protos.h (output_load_pcrel_sym): Declare.\n\t* config/sparc/sparc.c (sparc_cannot_force_const_mem): Revert latest\n \tchange.\n\t(got_helper_needed): New static variable.\n\t(output_load_pcrel_sym): New function.\n\t(get_pc_thunk_name): Remove after inlining...\n\t(load_got_register): ...here.  Rework the initialization of the GOT\n\tregister and of the GOT helper.\n\t(save_local_or_in_reg_p): Test the REGNO of the GOT register.\n\t(sparc_file_end): Test got_helper_needed to decide whether the GOT\n\thelper must be emitted.  Use output_asm_insn instead of fprintf.\n\t(sparc_init_pic_reg): In PIC mode, always initialize the PIC register\n\tif optimization is enabled.\n\t* config/sparc/sparc.md (load_pcrel_sym<P:mode>): Emit the assembly\n\tby calling output_load_pcrel_sym.\n\nFrom-SVN: r277966", "tree": {"sha": "8ec541b0850c5eae665b6acdf4fde17f16a30d4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ec541b0850c5eae665b6acdf4fde17f16a30d4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a83f1a441d7aaadecb368c237b6ee70bd7b91d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a83f1a441d7aaadecb368c237b6ee70bd7b91d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a83f1a441d7aaadecb368c237b6ee70bd7b91d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a83f1a441d7aaadecb368c237b6ee70bd7b91d6/comments", "author": null, "committer": null, "parents": [{"sha": "93ace3af2c44fa019f5141243be198fb2233c7f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93ace3af2c44fa019f5141243be198fb2233c7f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93ace3af2c44fa019f5141243be198fb2233c7f8"}], "stats": {"total": 173, "additions": 120, "deletions": 53}, "files": [{"sha": "a2f30cf8aec38efb9bed11053e98ea8618096866", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a83f1a441d7aaadecb368c237b6ee70bd7b91d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a83f1a441d7aaadecb368c237b6ee70bd7b91d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a83f1a441d7aaadecb368c237b6ee70bd7b91d6", "patch": "@@ -1,3 +1,22 @@\n+2019-11-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/92095\n+\t* config/sparc/sparc-protos.h (output_load_pcrel_sym): Declare.\n+\t* config/sparc/sparc.c (sparc_cannot_force_const_mem): Revert latest\n+ \tchange.\n+\t(got_helper_needed): New static variable.\n+\t(output_load_pcrel_sym): New function.\n+\t(get_pc_thunk_name): Remove after inlining...\n+\t(load_got_register): ...here.  Rework the initialization of the GOT\n+\tregister and of the GOT helper.\n+\t(save_local_or_in_reg_p): Test the REGNO of the GOT register.\n+\t(sparc_file_end): Test got_helper_needed to decide whether the GOT\n+\thelper must be emitted.  Use output_asm_insn instead of fprintf.\n+\t(sparc_init_pic_reg): In PIC mode, always initialize the PIC register\n+\tif optimization is enabled.\n+\t* config/sparc/sparc.md (load_pcrel_sym<P:mode>): Emit the assembly\n+\tby calling output_load_pcrel_sym.\n+\n 2019-11-08  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-sra.c (create_access): Delay disqualifying the base"}, {"sha": "ef1adb69ede3fe8a84cb485122210efe0875ffd5", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a83f1a441d7aaadecb368c237b6ee70bd7b91d6/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a83f1a441d7aaadecb368c237b6ee70bd7b91d6/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=0a83f1a441d7aaadecb368c237b6ee70bd7b91d6", "patch": "@@ -69,6 +69,7 @@ extern void sparc_split_reg_mem (rtx, rtx, machine_mode);\n extern void sparc_split_mem_reg (rtx, rtx, machine_mode);\n extern int sparc_split_reg_reg_legitimate (rtx, rtx);\n extern void sparc_split_reg_reg (rtx, rtx, machine_mode);\n+extern const char *output_load_pcrel_sym (rtx *);\n extern const char *output_ubranch (rtx, rtx_insn *);\n extern const char *output_cbranch (rtx, rtx, int, int, int, rtx_insn *);\n extern const char *output_return (rtx_insn *);"}, {"sha": "75b3d4ef499dedacbebcdcc3a3048a756cf25dfb", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 75, "deletions": 46, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a83f1a441d7aaadecb368c237b6ee70bd7b91d6/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a83f1a441d7aaadecb368c237b6ee70bd7b91d6/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=0a83f1a441d7aaadecb368c237b6ee70bd7b91d6", "patch": "@@ -4201,13 +4201,6 @@ eligible_for_sibcall_delay (rtx_insn *trial)\n static bool\n sparc_cannot_force_const_mem (machine_mode mode, rtx x)\n {\n-  /* After IRA has run in PIC mode, it is too late to put anything into the\n-     constant pool if the PIC register hasn't already been initialized.  */\n-  if ((lra_in_progress || reload_in_progress)\n-      && flag_pic\n-      && !crtl->uses_pic_offset_table)\n-    return true;\n-\n   switch (GET_CODE (x))\n     {\n     case CONST_INT:\n@@ -4243,9 +4236,11 @@ sparc_cannot_force_const_mem (machine_mode mode, rtx x)\n }\n \f\n /* Global Offset Table support.  */\n-static GTY(()) rtx got_helper_rtx = NULL_RTX;\n-static GTY(()) rtx got_register_rtx = NULL_RTX;\n static GTY(()) rtx got_symbol_rtx = NULL_RTX;\n+static GTY(()) rtx got_register_rtx = NULL_RTX;\n+static GTY(()) rtx got_helper_rtx = NULL_RTX;\n+\n+static GTY(()) bool got_helper_needed = false;\n \n /* Return the SYMBOL_REF for the Global Offset Table.  */\n \n@@ -4258,27 +4253,6 @@ sparc_got (void)\n   return got_symbol_rtx;\n }\n \n-#ifdef HAVE_GAS_HIDDEN\n-# define USE_HIDDEN_LINKONCE 1\n-#else\n-# define USE_HIDDEN_LINKONCE 0\n-#endif\n-\n-static void\n-get_pc_thunk_name (char name[32], unsigned int regno)\n-{\n-  const char *reg_name = reg_names[regno];\n-\n-  /* Skip the leading '%' as that cannot be used in a\n-     symbol name.  */\n-  reg_name += 1;\n-\n-  if (USE_HIDDEN_LINKONCE)\n-    sprintf (name, \"__sparc_get_pc_thunk.%s\", reg_name);\n-  else\n-    ASM_GENERATE_INTERNAL_LABEL (name, \"LADDPC\", regno);\n-}\n-\n /* Wrapper around the load_pcrel_sym{si,di} patterns.  */\n \n static rtx\n@@ -4298,30 +4272,78 @@ gen_load_pcrel_sym (rtx op0, rtx op1, rtx op2)\n   return insn;\n }\n \n+/* Output the load_pcrel_sym{si,di} patterns.  */\n+\n+const char *\n+output_load_pcrel_sym (rtx *operands)\n+{\n+  if (flag_delayed_branch)\n+    {\n+      output_asm_insn (\"sethi\\t%%hi(%a1-4), %0\", operands);\n+      output_asm_insn (\"call\\t%a2\", operands);\n+      output_asm_insn (\" add\\t%0, %%lo(%a1+4), %0\", operands);\n+    }\n+  else\n+    {\n+      output_asm_insn (\"sethi\\t%%hi(%a1-8), %0\", operands);\n+      output_asm_insn (\"add\\t%0, %%lo(%a1-4), %0\", operands);\n+      output_asm_insn (\"call\\t%a2\", operands);\n+      output_asm_insn (\" nop\", NULL);\n+    }\n+\n+  if (operands[2] == got_helper_rtx)\n+    got_helper_needed = true;\n+\n+  return \"\";\n+}\n+\n+#ifdef HAVE_GAS_HIDDEN\n+# define USE_HIDDEN_LINKONCE 1\n+#else\n+# define USE_HIDDEN_LINKONCE 0\n+#endif\n+\n /* Emit code to load the GOT register.  */\n \n void\n load_got_register (void)\n {\n-  if (!got_register_rtx)\n-    got_register_rtx = gen_rtx_REG (Pmode, GLOBAL_OFFSET_TABLE_REGNUM);\n+  rtx insn;\n \n   if (TARGET_VXWORKS_RTP)\n-    emit_insn (gen_vxworks_load_got ());\n+    {\n+      if (!got_register_rtx)\n+\tgot_register_rtx = pic_offset_table_rtx;\n+\n+      insn = gen_vxworks_load_got ();\n+    }\n   else\n     {\n+      if (!got_register_rtx)\n+\tgot_register_rtx = gen_rtx_REG (Pmode, GLOBAL_OFFSET_TABLE_REGNUM);\n+\n       /* The GOT symbol is subject to a PC-relative relocation so we need a\n \t helper function to add the PC value and thus get the final value.  */\n       if (!got_helper_rtx)\n \t{\n \t  char name[32];\n-\t  get_pc_thunk_name (name, GLOBAL_OFFSET_TABLE_REGNUM);\n+\n+\t  /* Skip the leading '%' as that cannot be used in a symbol name.  */\n+\t  if (USE_HIDDEN_LINKONCE)\n+\t    sprintf (name, \"__sparc_get_pc_thunk.%s\",\n+\t\t     reg_names[REGNO (got_register_rtx)] + 1);\n+\t  else\n+\t    ASM_GENERATE_INTERNAL_LABEL (name, \"LADDPC\",\n+\t\t\t\t\t REGNO (got_register_rtx));\n+\n \t  got_helper_rtx = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (name));\n \t}\n \n-      emit_insn (gen_load_pcrel_sym (got_register_rtx, sparc_got (),\n-\t\t\t\t     got_helper_rtx));\n+      insn\n+\t= gen_load_pcrel_sym (got_register_rtx, sparc_got (), got_helper_rtx);\n     }\n+\n+  emit_insn (insn);\n }\n \n /* Ensure that we are not using patterns that are not OK with PIC.  */\n@@ -5486,7 +5508,7 @@ save_local_or_in_reg_p (unsigned int regno, int leaf_function)\n     return true;\n \n   /* GOT register (%l7) if needed.  */\n-  if (regno == GLOBAL_OFFSET_TABLE_REGNUM && got_register_rtx)\n+  if (got_register_rtx && regno == REGNO (got_register_rtx))\n     return true;\n \n   /* If the function accesses prior frames, the frame pointer and the return\n@@ -12529,10 +12551,9 @@ static void\n sparc_file_end (void)\n {\n   /* If we need to emit the special GOT helper function, do so now.  */\n-  if (got_helper_rtx)\n+  if (got_helper_needed)\n     {\n       const char *name = XSTR (got_helper_rtx, 0);\n-      const char *reg_name = reg_names[GLOBAL_OFFSET_TABLE_REGNUM];\n #ifdef DWARF2_UNWIND_INFO\n       bool do_cfi;\n #endif\n@@ -12569,17 +12590,22 @@ sparc_file_end (void)\n #ifdef DWARF2_UNWIND_INFO\n       do_cfi = dwarf2out_do_cfi_asm ();\n       if (do_cfi)\n-\tfprintf (asm_out_file, \"\\t.cfi_startproc\\n\");\n+\toutput_asm_insn (\".cfi_startproc\", NULL);\n #endif\n       if (flag_delayed_branch)\n-\tfprintf (asm_out_file, \"\\tjmp\\t%%o7+8\\n\\t add\\t%%o7, %s, %s\\n\",\n-\t\t reg_name, reg_name);\n+\t{\n+\t  output_asm_insn (\"jmp\\t%%o7+8\", NULL);\n+\t  output_asm_insn (\" add\\t%%o7, %0, %0\", &got_register_rtx);\n+\t}\n       else\n-\tfprintf (asm_out_file, \"\\tadd\\t%%o7, %s, %s\\n\\tjmp\\t%%o7+8\\n\\t nop\\n\",\n-\t\t reg_name, reg_name);\n+\t{\n+\t  output_asm_insn (\"add\\t%%o7, %0, %0\", &got_register_rtx);\n+\t  output_asm_insn (\"jmp\\t%%o7+8\", NULL);\n+\t  output_asm_insn (\" nop\", NULL);\n+\t}\n #ifdef DWARF2_UNWIND_INFO\n       if (do_cfi)\n-\tfprintf (asm_out_file, \"\\t.cfi_endproc\\n\");\n+\toutput_asm_insn (\".cfi_endproc\", NULL);\n #endif\n     }\n \n@@ -13074,7 +13100,10 @@ sparc_init_pic_reg (void)\n   edge entry_edge;\n   rtx_insn *seq;\n \n-  if (!crtl->uses_pic_offset_table)\n+  /* In PIC mode, we need to always initialize the PIC register if optimization\n+     is enabled, because we are called from IRA and LRA may later force things\n+     to the constant pool for optimization purposes.  */\n+  if (!flag_pic || (!crtl->uses_pic_offset_table && !optimize))\n     return;\n \n   start_sequence ();"}, {"sha": "0a6e27ffa83beb30eb39e76a949fd40dca80d09e", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a83f1a441d7aaadecb368c237b6ee70bd7b91d6/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a83f1a441d7aaadecb368c237b6ee70bd7b91d6/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=0a83f1a441d7aaadecb368c237b6ee70bd7b91d6", "patch": "@@ -1604,10 +1604,7 @@\n    (clobber (reg:P O7_REG))]\n   \"REGNO (operands[0]) == INTVAL (operands[3])\"\n {\n-  if (flag_delayed_branch)\n-    return \"sethi\\t%%hi(%a1-4), %0\\n\\tcall\\t%a2\\n\\t add\\t%0, %%lo(%a1+4), %0\";\n-  else\n-    return \"sethi\\t%%hi(%a1-8), %0\\n\\tadd\\t%0, %%lo(%a1-4), %0\\n\\tcall\\t%a2\\n\\t nop\";\n+  return output_load_pcrel_sym (operands);\n }\n   [(set (attr \"type\") (const_string \"multi\"))\n    (set (attr \"length\")"}, {"sha": "286e6e16e46fecb909c4bcaa885bd3fda612d9d5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a83f1a441d7aaadecb368c237b6ee70bd7b91d6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a83f1a441d7aaadecb368c237b6ee70bd7b91d6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0a83f1a441d7aaadecb368c237b6ee70bd7b91d6", "patch": "@@ -1,3 +1,10 @@\n+2019-11-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.c-torture/compile/20191108-1.c: New test.\n+\t* gcc.target/sparc/overflow-3.c: Add -fno-pie to the options.\n+\t* gcc.target/sparc/overflow-4.c: Likewise.\n+\t* gcc.target/sparc/overflow-5.c: Likewise.\n+\n 2019-11-08  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/acle/general/inline_2.c: New test."}, {"sha": "7929751bb06065d4d89a98617aea74ed5a11f83b", "filename": "gcc/testsuite/gcc.c-torture/compile/20191108-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a83f1a441d7aaadecb368c237b6ee70bd7b91d6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20191108-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a83f1a441d7aaadecb368c237b6ee70bd7b91d6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20191108-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20191108-1.c?ref=0a83f1a441d7aaadecb368c237b6ee70bd7b91d6", "patch": "@@ -0,0 +1,14 @@\n+/* PR target/92095 */\n+/* Testcase by Sergei Trofimovich <slyfox@inbox.ru> */\n+\n+typedef union {\n+  double a;\n+  int b[2];\n+} c;\n+\n+double d(int e)\n+{\n+  c f;\n+  (&f)->b[0] = 15728640;\n+  return e ? -(&f)->a : (&f)->a;\n+}"}, {"sha": "52d6ab2b68895b4faa61c6e9803ba1859a516af2", "filename": "gcc/testsuite/gcc.target/sparc/overflow-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a83f1a441d7aaadecb368c237b6ee70bd7b91d6/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Foverflow-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a83f1a441d7aaadecb368c237b6ee70bd7b91d6/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Foverflow-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Foverflow-3.c?ref=0a83f1a441d7aaadecb368c237b6ee70bd7b91d6", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O\" } */\n+/* { dg-options \"-O -fno-pie\" } */\n \n #include <stdbool.h>\n #include <stdint.h>"}, {"sha": "c6121b958c3fe8310fb59790220ef81d02bdaeea", "filename": "gcc/testsuite/gcc.target/sparc/overflow-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a83f1a441d7aaadecb368c237b6ee70bd7b91d6/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Foverflow-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a83f1a441d7aaadecb368c237b6ee70bd7b91d6/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Foverflow-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Foverflow-4.c?ref=0a83f1a441d7aaadecb368c237b6ee70bd7b91d6", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O -mno-vis3 -mno-vis4\" } */\n+/* { dg-options \"-O -fno-pie -mno-vis3 -mno-vis4\" } */\n \n #include <stdbool.h>\n #include <stdint.h>"}, {"sha": "f00283f6e7b0777d35f0b3e26e89d729921531a9", "filename": "gcc/testsuite/gcc.target/sparc/overflow-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a83f1a441d7aaadecb368c237b6ee70bd7b91d6/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Foverflow-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a83f1a441d7aaadecb368c237b6ee70bd7b91d6/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Foverflow-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Foverflow-5.c?ref=0a83f1a441d7aaadecb368c237b6ee70bd7b91d6", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O -mvis3\" } */\n+/* { dg-options \"-O -fno-pie -mvis3\" } */\n \n #include <stdbool.h>\n #include <stdint.h>"}]}