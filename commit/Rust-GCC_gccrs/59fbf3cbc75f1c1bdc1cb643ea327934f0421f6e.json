{"sha": "59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlmYmYzY2JjNzVmMWMxYmRjMWNiNjQzZWEzMjc5MzRmMDQyMWY2ZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2007-01-12T09:28:34Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-01-12T09:28:34Z"}, "message": "200x-xx-xx Nathan Sidwell <nathan@codesourcery.com> Richard Sandiford...\n\ngcc/\n200x-xx-xx  Nathan Sidwell  <nathan@codesourcery.com>\n\t    Richard Sandiford  <richard@codesourcery.com>\n\t    Julian Brown  <julian@codesourcery.com>\n\n\t* config.gcc (m68k-*-aout*, m68k-*-coff*, m68020-*-elf*, m68k-*-elf*)\n\t(m68k-*-uclinux*, m68k-*-linux*, m68k-*-rtems*): Set default_m68k_cpu\n\tto the configuration's default CPU.\n\t(m68010-*-netbsdelf*, m68k*-*-netbsdelf*, m68k*-*-openbsd*): Likewise.\n\tRemove default masks.\n\t(m680[012]0-*-*): Set the default with_cpu to the first part of\n\tthe target name.\n\t(m68k*-*-*): Set the default with_cpu to m$default_m68k_cpu.\n\t(m68k*-*-linux): Extend the --with-cpu handling to...\n\t(m680[012]0-*-*, m68k*-*-*): ...these configurations.  Allow m68000\n\tand m68010.  Don't set target_cpu_default2.\n\t* doc/install.texi: Document --with-cpu for m68k.\n\t* config/m68k/m68k.h (OPTION_DEFAULT_SPECS): Define.\n\t* config/m68k/m68k-none.h (TARGET_CPU_DEFAULT, M68K_CPU_m68k)\n\t(M68K_CPU_m68000, M68K_CPU_m68010, M68K_CPU_m68020, M68K_CPU_m68030)\n\t(M68K_CPU_m68040, M68K_CPU_m68302, M68K_CPU_m68332, TARGET_DEFAULT)\n\t(ASM_CPU_DEFAULT_SPEC, CC1_CPU_DEFAULT_SPEC): Delete.\n\t(ASM_SPEC): Remove use of %(asm_cpu_default).\n\t(EXTRA_SPECS, SUBTARGET_EXTRA_SPECS, MULTILIB_DEFAULTS): Delete.\n\t* config/m68k/linux.h (TARGET_DEFAULT): Delete.\n\t(CPP_SPEC): Merge definitions.  Do not handle __HAVE_68881__ here.\n\t* config/m68k/netbsd-elf.h (TARGET_OS_CPP_BUILTINS): Define\n\t__HAVE_FPU__ if TARGET_HARD_FLOAT.\n\t(TARGET_DEFAULT): Delete.\n\t(EXTRA_SPECS): Delete cpp_cpu_default_spec, cpp_cpu_spec,\n\tcpp_fpu_spec, asm_default_spec and netbsd_cpp_spec.\n\t(CPP_CPU_SPEC): Delete.\n\t(TARGET_VERSION): Merge definitions, using TARGET_68010 to pick\n\tthe appropriate string.\n\t(CPP_CPU_DEFAULT_SPEC, ASM_DEFAULT_SPEC, CPP_FPU_SPEC): Delete.\n\t(CPP_SPEC): Define to NETBSD_CPP_SPEC.\n\t(ASM_SPEC): Don't use %(asm_default_spec).\n\t* config/m68k/m68k.c (TARGET_DEFAULT_TARGET_FLAGS): Remove\n\tTARGET_DEFAULT and add MASK_68881.\n\t* config/m68k/m68k.md: Remove mention of TARGET_DEFAULT from comments.\n\nCo-Authored-By: Julian Brown <julian@codesourcery.com>\nCo-Authored-By: Richard Sandiford <richard@codesourcery.com>\n\nFrom-SVN: r120711", "tree": {"sha": "e90a6b8a6cdc2f46eeece94ec50f52b43ce0a1d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e90a6b8a6cdc2f46eeece94ec50f52b43ce0a1d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e/comments", "author": null, "committer": null, "parents": [{"sha": "3197c4892e63fc15402ade12fe9d10db38a5272a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3197c4892e63fc15402ade12fe9d10db38a5272a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3197c4892e63fc15402ade12fe9d10db38a5272a"}], "stats": {"total": 284, "additions": 89, "deletions": 195}, "files": [{"sha": "e1167f1b9d92d30c7ce1012f275d42c4764dc303", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e", "patch": "@@ -1,3 +1,43 @@\n+2007-01-12  Nathan Sidwell  <nathan@codesourcery.com>\n+\t    Richard Sandiford  <richard@codesourcery.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n+\n+\t* config.gcc (m68k-*-aout*, m68k-*-coff*, m68020-*-elf*, m68k-*-elf*)\n+\t(m68k-*-uclinux*, m68k-*-linux*, m68k-*-rtems*): Set default_m68k_cpu\n+\tto the configuration's default CPU.\n+\t(m68010-*-netbsdelf*, m68k*-*-netbsdelf*, m68k*-*-openbsd*): Likewise.\n+\tRemove default masks.\n+\t(m680[012]0-*-*): Set the default with_cpu to the first part of\n+\tthe target name.\n+\t(m68k*-*-*): Set the default with_cpu to m$default_m68k_cpu.\n+\t(m68k*-*-linux): Extend the --with-cpu handling to...\n+\t(m680[012]0-*-*, m68k*-*-*): ...these configurations.  Allow m68000\n+\tand m68010.  Don't set target_cpu_default2.\n+\t* doc/install.texi: Document --with-cpu for m68k.\n+\t* config/m68k/m68k.h (OPTION_DEFAULT_SPECS): Define.\n+\t* config/m68k/m68k-none.h (TARGET_CPU_DEFAULT, M68K_CPU_m68k)\n+\t(M68K_CPU_m68000, M68K_CPU_m68010, M68K_CPU_m68020, M68K_CPU_m68030)\n+\t(M68K_CPU_m68040, M68K_CPU_m68302, M68K_CPU_m68332, TARGET_DEFAULT)\n+\t(ASM_CPU_DEFAULT_SPEC, CC1_CPU_DEFAULT_SPEC): Delete.\n+\t(ASM_SPEC): Remove use of %(asm_cpu_default).\n+\t(EXTRA_SPECS, SUBTARGET_EXTRA_SPECS, MULTILIB_DEFAULTS): Delete.\n+\t* config/m68k/linux.h (TARGET_DEFAULT): Delete.\n+\t(CPP_SPEC): Merge definitions.  Do not handle __HAVE_68881__ here.\n+\t* config/m68k/netbsd-elf.h (TARGET_OS_CPP_BUILTINS): Define\n+\t__HAVE_FPU__ if TARGET_HARD_FLOAT.\n+\t(TARGET_DEFAULT): Delete.\n+\t(EXTRA_SPECS): Delete cpp_cpu_default_spec, cpp_cpu_spec,\n+\tcpp_fpu_spec, asm_default_spec and netbsd_cpp_spec.\n+\t(CPP_CPU_SPEC): Delete.\n+\t(TARGET_VERSION): Merge definitions, using TARGET_68010 to pick\n+\tthe appropriate string.\n+\t(CPP_CPU_DEFAULT_SPEC, ASM_DEFAULT_SPEC, CPP_FPU_SPEC): Delete.\n+\t(CPP_SPEC): Define to NETBSD_CPP_SPEC.\n+\t(ASM_SPEC): Don't use %(asm_default_spec).\n+\t* config/m68k/m68k.c (TARGET_DEFAULT_TARGET_FLAGS): Remove\n+\tTARGET_DEFAULT and add MASK_68881.\n+\t* config/m68k/m68k.md: Remove mention of TARGET_DEFAULT from comments.\n+\n 2007-01-12  Richard Sandiford  <richard@codesourcery.com>\n \n \t* config.gcc (m68010-*-netbsdelf*): Add MASK_68010."}, {"sha": "17a69dc47078c2b21c69974232b14dcbae9322a3", "filename": "gcc/config.gcc", "status": "modified", "additions": 20, "deletions": 43, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e", "patch": "@@ -1478,42 +1478,40 @@ m68hc12-*-*|m6812-*-*)\n \tuse_fixproto=yes\n         ;;\n m68k-*-aout*)\n+\tdefault_m68k_cpu=68020\n \ttmake_file=m68k/t-m68kbare\n \ttm_file=\"m68k/m68k.h m68k/m68k-none.h m68k/m68kemb.h m68k/m68k-aout.h libgloss.h\"\n \t;;\n m68k-*-coff*)\n+\tdefault_m68k_cpu=68020\n \ttmake_file=m68k/t-m68kbare\n \ttm_defines=\"${tm_defines} MOTOROLA USE_GAS\"\n \ttm_file=\"m68k/m68k.h m68k/m68k-none.h m68k/m68kemb.h dbxcoff.h m68k/coff.h dbx.h\"\n \tuse_fixproto=yes\n \t;;\n m68020-*-elf* | m68k-*-elf*)\n+\tdefault_m68k_cpu=68020\n \ttm_file=\"m68k/m68k.h m68k/m68k-none.h m68k/m68kelf.h dbxelf.h elfos.h m68k/m68kemb.h m68k/m68020-elf.h\"\n \ttm_defines=\"${tm_defines} MOTOROLA USE_GAS\"\n \ttmake_file=m68k/t-m68kelf\n \textra_parts=\"crtbegin.o crtend.o\"\n \t;;\n m68010-*-netbsdelf* | m68k*-*-netbsdelf*)\n+\tdefault_m68k_cpu=68020\n \ttm_file=\"${tm_file} dbxelf.h elfos.h netbsd.h netbsd-elf.h m68k/netbsd-elf.h\"\n \ttm_defines=\"${tm_defines} MOTOROLA USE_GAS\"\n-\tcase ${target} in\n-\tm68010*)\n-\t\ttarget_cpu_default=\"MASK_68010\"\n-\t\t;;\n-\t*)\n-\t\ttarget_cpu_default=\"MASK_68020|MASK_68010|MASK_68881|MASK_BITFIELD\"\n-\t\t;;\n-\tesac\n \t;;\n m68k*-*-openbsd*)\n+\tdefault_m68k_cpu=68020\n \t# needed to unconfuse gdb\n-\ttm_defines=\"${tm_defines} OBSD_OLD_GAS TARGET_DEFAULT=(MASK_68020|MASK_68010|MASK_68881|MASK_BITFIELD)\"\n+\ttm_defines=\"${tm_defines} OBSD_OLD_GAS\"\n \ttm_file=\"m68k/m68k.h openbsd.h m68k/openbsd.h\"\n \ttmake_file=\"t-libc-ok t-openbsd m68k/t-openbsd\"\n \t# we need collect2 until our bug is fixed...\n \tuse_collect2=yes\n \t;;\n m68k-*-uclinux*)\t\t# Motorola m68k/ColdFire running uClinux with uClibc\n+\tdefault_m68k_cpu=68020\n \ttm_file=\"m68k/m68k.h m68k/m68k-none.h m68k/m68kelf.h dbxelf.h elfos.h m68k/uclinux.h\"\n  \ttm_defines=\"${tm_defines} MOTOROLA USE_GAS\"\n \ttmake_file=m68k/t-uclinux\n@@ -1522,6 +1520,7 @@ m68k-*-uclinux*)\t\t# Motorola m68k/ColdFire running uClinux with uClibc\n m68k-*-linux*)\t\t# Motorola m68k's running GNU/Linux\n \t\t\t\t# with ELF format using glibc 2\n \t\t\t\t# aka the GNU/Linux C library 6.\n+\tdefault_m68k_cpu=68020\n \ttm_file=\"m68k/m68k.h dbxelf.h elfos.h svr4.h linux.h m68k/linux.h\"\n \textra_options=\"${extra_options} m68k/ieee.opt\"\n \ttm_defines=\"${tm_defines} MOTOROLA USE_GAS\"\n@@ -1532,6 +1531,7 @@ m68k-*-linux*)\t\t# Motorola m68k's running GNU/Linux\n \tfi\n \t;;\n m68k-*-rtems*)\n+\tdefault_m68k_cpu=68020\n \ttmake_file=\"m68k/t-m68kbare m68k/t-crtstuff t-rtems m68k/t-rtems\"\n \ttm_file=\"m68k/m68k.h m68k/m68k-none.h m68k/m68kelf.h dbxelf.h elfos.h m68k/m68kemb.h m68k/m68020-elf.h m68k/rtemself.h rtems.h\"\n \ttm_defines=\"${tm_defines} MOTOROLA USE_GAS\"\n@@ -2625,6 +2625,12 @@ if test x$with_cpu = x ; then\n     frv550-*-*linux*)\n       with_cpu=fr550\n       ;;\n+    m680[012]0-*-*)\n+      with_cpu=`echo ${target} | sed 's/-.*$//'`\n+      ;;\n+    m68k*-*-*)\n+      with_cpu=m${default_m68k_cpu}\n+      ;;\n     sparc*-*-*)\n       with_cpu=\"`echo ${target} | sed 's/-.*$//'`\"\n       ;;\n@@ -2773,15 +2779,17 @@ case \"${target}\" in\n \t\tesac\n \t\t;;\n \n-\tm68k*-linux*)\n+\tm680[012]0-*-* | m68k*-*-*)\n \t\tsupported_defaults=\"cpu\"\n+\n+\t\t# We always have a $with_cpu setting here.\n \t\tcase \"$with_cpu\" in\n-\t\t\"\" | \"m68020\" | \"m68030\" | \"m68040\" | \"m68060\" | \"m68020-40\" | \"m68020-60\")\n+\t\t\"m68000\" | \"m68010\" | \"m68020\" | \"m68030\" | \"m68040\" | \"m68060\" | \"m68020-40\" | \"m68020-60\")\n \t\t\t# OK\n \t\t\t;;\n \t\t*)\n \t\t\techo \"Unknown CPU used in --with-cpu=$with_cpu, known values:\"  1>&2\n-\t\t\techo \"m68020 m68030 m68040 m68060 m68020-40 m68020-60\" 1>&2\n+\t\t\techo \"m68000 m68010 m68020 m68030 m68040 m68060 m68020-40 m68020-60\" 1>&2\n \t\t\texit 1\n \t\t\t;;\n \t\tesac\n@@ -3033,37 +3041,6 @@ case ${target} in\n \t\tfi\n \t\t;;\n \n-\tm68k*-linux*)\n-\t\tcase \"x$with_cpu\" in\n-\t\tx)\n-\t\t\t# The most generic\n-\t\t\ttarget_cpu_default2=\"(MASK_68020|MASK_68010|MASK_68881|MASK_BITFIELD)\"\n-\t\t\t;;\n-\t\txm68020)\n-\t\t\ttarget_cpu_default2=\"(MASK_68020|MASK_68010|MASK_68881|MASK_BITFIELD)\"\n-\t\t\t;;\n-\t\txm68030)\n-\t\t\ttarget_cpu_default2=\"(MASK_68030|MASK_68020|MASK_68010|MASK_68881|MASK_BITFIELD)\"\n-\t\t\t;;\n-\t\txm68040)\n-\t\t\ttarget_cpu_default2=\"(MASK_68040|MASK_68040_ONLY|MASK_68020|MASK_68010|MASK_68881|MASK_BITFIELD)\"\n-\t\t\t;;\n-\t\txm68060)\n-\t\t\ttarget_cpu_default2=\"(MASK_68060|MASK_68040_ONLY|MASK_68020|MASK_68010|MASK_68881|MASK_BITFIELD)\"\n-\t\t\t;;\n-\t\txm68020-40)\n-\t\t\ttarget_cpu_default2=\"(MASK_BITFIELD|MASK_68881|MASK_68020|MASK_68010|MASK_68040)\"\n-\t\t\t;;\n-\t\txm68020-60)\n-\t\t\ttarget_cpu_default2=\"(MASK_BITFIELD|MASK_68881|MASK_68020|MASK_68010|MASK_68040|MASK_68060)\"\n-\t\t\t;;\n-\t\t*)\n-\t\t\techo \"Unknown CPU used in --with-cpu=$with_cpu\"  1>&2\n-\t\t\texit 1\n-\t\t\t;;\n-\t\tesac\n-\t\t;;\n-\n \thppa*-*-* | parisc*-*-*)\n \t\ttarget_cpu_default2=\"MASK_BIG_SWITCH\"\n \t\tif test x$gas = xyes"}, {"sha": "eacc7fe338deb825d88ac1d2ac4c3276217f58d6", "filename": "gcc/config/m68k/linux.h", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e/gcc%2Fconfig%2Fm68k%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e/gcc%2Fconfig%2Fm68k%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flinux.h?ref=59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e", "patch": "@@ -23,15 +23,6 @@ Boston, MA 02110-1301, USA.  */\n #undef TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (68k GNU/Linux with ELF)\");\n \n-/* Default target comes from config.gcc.  */\n-\n-#undef TARGET_DEFAULT\n-#ifdef TARGET_CPU_DEFAULT\n-#define TARGET_DEFAULT TARGET_CPU_DEFAULT\n-#else\n-#define TARGET_DEFAULT (MASK_BITFIELD|MASK_68881|MASK_68010|MASK_68020)\n-#endif\n-\n /* for 68k machines this only needs to be TRUE for the 68000 */\n \n #undef STRICT_ALIGNMENT\n@@ -92,13 +83,7 @@ Boston, MA 02110-1301, USA.  */\n   while (0)\n \n #undef CPP_SPEC\n-#if TARGET_DEFAULT & MASK_68881\n-#define CPP_SPEC \\\n-  \"%{!msoft-float:-D__HAVE_68881__} %{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n-#else\n-#define CPP_SPEC \\\n-  \"%{m68881:-D__HAVE_68881__} %{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n-#endif\n+#define CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n \n /* We override the ASM_SPEC from svr4.h because we must pass -m68040 down\n    to the assembler.  */"}, {"sha": "b30fb948f7ce04964a06d895012e89cb15a586a4", "filename": "gcc/config/m68k/m68k-none.h", "status": "modified", "additions": 1, "deletions": 96, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e/gcc%2Fconfig%2Fm68k%2Fm68k-none.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e/gcc%2Fconfig%2Fm68k%2Fm68k-none.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-none.h?ref=59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e", "patch": "@@ -18,70 +18,11 @@ along with GCC; see the file COPYING.  If not, write to\n the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n Boston, MA 02110-1301, USA.  */\n \n-/* Default to m68k (m68020).  */\n-#ifndef TARGET_CPU_DEFAULT\n-#define TARGET_CPU_DEFAULT M68K_CPU_m68k\n-#endif\n-\n-/* These are values set by the configure script in TARGET_CPU_DEFAULT.\n-   They are (sequential integer + (desired value for TARGET_DEFAULT) << 4).  */\n-#define M68K_CPU_m68k\t(0 + ((MASK_68020|MASK_68010|MASK_68881|MASK_BITFIELD)<<4))\n-#define M68K_CPU_m68000 (1 + (0 << 4))\n-#define M68K_CPU_m68010 (1 + (MASK_68010 << 4))\n-#define M68K_CPU_m68020 (2 + ((MASK_68020|MASK_68010|MASK_68881|MASK_BITFIELD) << 4))\n-#define M68K_CPU_m68030 (3 + ((MASK_68030|MASK_68020|MASK_68010|MASK_68881|MASK_BITFIELD) << 4))\n-#define M68K_CPU_m68040 (4 + ((MASK_68040_ONLY|MASK_68020|MASK_68010|MASK_68881|MASK_BITFIELD) << 4))\n-#define M68K_CPU_m68302 (5 + (0 << 4))\n-#define M68K_CPU_m68332 (6 + ((MASK_68020|MASK_68010) << 4))\n-\n-/* This is tested for below, so if target wants to override this, it\n-   just set this first in cover file.  */\n-#ifndef TARGET_DEFAULT\n-#define TARGET_DEFAULT (TARGET_CPU_DEFAULT >> 4)\n-#endif\n-\f\n-/* Defaults for the various specs below.\n-   These are collected here so we only test TARGET_CPU_DEFAULT once.  */\n-/* ??? CC1_CPU_DEFAULT_SPEC was copied over from the earlier version of\n-   this file.  However, it's not used anywhere here because it doesn't\n-   seem to be necessary.  */\n-#if TARGET_CPU_DEFAULT == M68K_CPU_m68k || TARGET_CPU_DEFAULT == M68K_CPU_m68020\n-#define ASM_CPU_DEFAULT_SPEC \"-mc68020\"\n-#define CC1_CPU_DEFAULT_SPEC \"-m68020\"\n-#else\n-#if TARGET_CPU_DEFAULT == M68K_CPU_m68000\n-#define ASM_CPU_DEFAULT_SPEC \"-mc68000\"\n-#define CC1_CPU_DEFAULT_SPEC \"-m68000\"\n-#else\n-#if TARGET_CPU_DEFAULT == M68K_CPU_m68030\n-#define ASM_CPU_DEFAULT_SPEC \"-mc68030\"\n-#define CC1_CPU_DEFAULT_SPEC \"-m68030\"\n-#else\n-#if TARGET_CPU_DEFAULT == M68K_CPU_m68040\n-#define ASM_CPU_DEFAULT_SPEC \"-mc68040\"\n-#define CC1_CPU_DEFAULT_SPEC \"-m68040\"\n-#else\n-#if TARGET_CPU_DEFAULT == M68K_CPU_m68302\n-#define ASM_CPU_DEFAULT_SPEC \"-mc68302\"\n-#define CC1_CPU_DEFAULT_SPEC \"-m68302\"\n-#else\n-#if TARGET_CPU_DEFAULT == M68K_CPU_m68332\n-#define ASM_CPU_DEFAULT_SPEC \"-mc68332\"\n-#define CC1_CPU_DEFAULT_SPEC \"-m68332\"\n-#else\n-Unrecognized value in TARGET_CPU_DEFAULT.\n-#endif\n-#endif\n-#endif\n-#endif\n-#endif\n-#endif\n-\n /* Pass flags to gas indicating which type of processor we have.  */\n \n #undef ASM_SPEC\n #define ASM_SPEC \"\\\n-%{m68851}%{mno-68851}%{m68881}%{mno-68881}%{msoft-float:-mno-68881} %{m68000}%{m68302}%{mc68000}%{m68010}%{m68020}%{mc68020}%{m68030}%{m68040}%{m68020-40:-mc68040} %{m68020-60:-mc68040} %{m68060}%{mcpu32}%{m68332}%{m5200}%{m5206e}%{m528x}%{m5307}%{m5407}%{mcfv4e}%{!mc68000:%{!m68000:%{!m68302:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68020-60:%{!m68060:%{!mcpu32:%{!m68332:%{!m5200:%{!m5206e:%{!m528x:%{!m5307:%{!m5407:%{!mcfv4e:%(asm_cpu_default)}}}}}}}}}}}}}}}}}}} \\\n+%{m68851}%{mno-68851}%{m68881}%{mno-68881}%{msoft-float:-mno-68881} %{m68000}%{m68302}%{mc68000}%{m68010}%{m68020}%{mc68020}%{m68030}%{m68040}%{m68020-40:-mc68040} %{m68020-60:-mc68040} %{m68060}%{mcpu32}%{m68332}%{m5200}%{m5206e}%{m528x}%{m5307}%{m5407}%{mcfv4e} \\\n %{fPIC:--pcrel} %{fpic:--pcrel} %{msep-data:--pcrel} %{mid-shared-library:--pcrel} \\\n \"\n \n@@ -92,40 +33,4 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n #undef CC1_SPEC\n #define CC1_SPEC \"\"\n \n-/* This macro defines names of additional specifications to put in the specs\n-   that can be used in various specifications like CC1_SPEC.  Its definition\n-   is an initializer with a subgrouping for each command option.\n-\n-   Each subgrouping contains a string constant, that defines the\n-   specification name, and a string constant that used by the GCC driver\n-   program.\n-\n-   Do not define this macro if it does not need to do anything.  */\n-\n-#define EXTRA_SPECS\t\t\t\t\t\\\n-  { \"asm_cpu_default\",\tASM_CPU_DEFAULT_SPEC },\t\t\\\n-  { \"cc1_cpu_default\",\tCC1_CPU_DEFAULT_SPEC },\t\t\\\n-  SUBTARGET_EXTRA_SPECS\n-\n #define CPP_SUBTARGET_SPEC \"\"\n-#define SUBTARGET_EXTRA_SPECS\n-\f\n-/* Avoid building multilib libraries for the defaults.\n-   For targets not handled here, just build the full set of multilibs.\n-   The default is m68k 99.9% of the time anyway.  */\n-\n-#if TARGET_CPU_DEFAULT == M68K_CPU_m68k || TARGET_CPU_DEFAULT == M68K_CPU_m68020\n-#if TARGET_DEFAULT & MASK_68881\n-#define MULTILIB_DEFAULTS { \"m68020\", \"m68881\" }\n-#else\n-#define MULTILIB_DEFAULTS { \"m68020\", \"msoft-float\" }\n-#endif\n-#endif\n-\n-#if TARGET_CPU_DEFAULT == M68K_CPU_m68000 || TARGET_CPU_DEFAULT == M68K_CPU_m68302\n-#if TARGET_DEFAULT & MASK_68881\n-#define MULTILIB_DEFAULTS { \"m68000\", \"m68881\" }\n-#else\n-#define MULTILIB_DEFAULTS { \"m68000\", \"msoft-float\" }\n-#endif\n-#endif"}, {"sha": "81ad31be0cbfcafba6b049fe57fa20b413726e45", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e", "patch": "@@ -176,7 +176,7 @@ int m68k_last_compare_had_fp_operands;\n #define TARGET_ASM_FILE_START_APP_OFF true\n \n #undef TARGET_DEFAULT_TARGET_FLAGS\n-#define TARGET_DEFAULT_TARGET_FLAGS (TARGET_DEFAULT | MASK_STRICT_ALIGNMENT)\n+#define TARGET_DEFAULT_TARGET_FLAGS (MASK_STRICT_ALIGNMENT|MASK_68881)\n #undef TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION m68k_handle_option\n "}, {"sha": "5b017e4dca5d915d546b1c5281f67684d9a6f52e", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e", "patch": "@@ -32,6 +32,13 @@ Boston, MA 02110-1301, USA.  */\n # define MOTOROLA 0  /* Use the MIT assembly syntax.  */\n #endif\n \n+/* Handle --with-cpu default option from configure script.  */\n+#define OPTION_DEFAULT_SPECS\t\t\t\t\t\t\\\n+  { \"cpu\",   \"%{!mc68000:%{!m68000:%{!m68302:%{!m68010:%{!mc68020:%{!m68020:\\\n+%{!m68030:%{!m68040:%{!m68020-40:%{!m68020-60:%{!m68060:%{!mcpu32:\\\n+%{!m68332:%{!m5200:%{!m5206e:%{!m528x:%{!m5307:%{!m5407:%{!mcfv4e:\\\n+-%(VALUE)}}}}}}}}}}}}}}}}}}}\" },\n+\n /* Note that some other tm.h files include this one and then override\n    many of the definitions that relate to assembler syntax.  */\n "}, {"sha": "41ba5e0c8e8929b960cc64524fad75d6b37978b2", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e", "patch": "@@ -90,8 +90,7 @@\n ;;- issues of excess precision accumulating in the extended registers.\n ;;- By default, GCC does not use these instructions, since such code will\n ;;- not run on an '030.  To use these instructions, use the -m68040-only\n-;;- switch.  By changing TARGET_DEFAULT to include TARGET_68040_ONLY,\n-;;- you can make these instructions the default.\n+;;- switch.\n \n ;;- These new instructions aren't directly in the md.  They are brought\n ;;- into play by defining \"%$\" and \"%&\" to expand to \"s\" and \"d\" rather"}, {"sha": "73673fd02bd4c8edfe7f3baa7232e4c7cfc72491", "filename": "gcc/config/m68k/netbsd-elf.h", "status": "modified", "additions": 10, "deletions": 35, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h?ref=59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e", "patch": "@@ -31,14 +31,11 @@ Boston, MA 02110-1301, USA.  */\n       builtin_define (\"__m68k__\");\t\t\\\n       builtin_define (\"__SVR4_ABI__\");\t\t\\\n       builtin_define (\"__motorola__\");\t\t\\\n+      if (TARGET_HARD_FLOAT)\t\t\t\\\n+\tbuiltin_define (\"__HAVE_FPU__\");\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-/* Default target comes from config.gcc */\n-#undef TARGET_DEFAULT\n-#define TARGET_DEFAULT TARGET_CPU_DEFAULT\n-\n-\n /* Don't try using XFmode on the 68010.  */ \n #undef LONG_DOUBLE_TYPE_SIZE\n #define LONG_DOUBLE_TYPE_SIZE (TARGET_68020 ? 80 : 64)\n@@ -50,54 +47,32 @@ Boston, MA 02110-1301, USA.  */\n #endif\n \n #define EXTRA_SPECS \\\n-  { \"cpp_cpu_default_spec\", CPP_CPU_DEFAULT_SPEC }, \\\n-  { \"cpp_cpu_spec\",         CPP_CPU_SPEC }, \\\n-  { \"cpp_fpu_spec\",         CPP_FPU_SPEC }, \\\n-  { \"asm_default_spec\",     ASM_DEFAULT_SPEC }, \\\n-  { \"netbsd_cpp_spec\",      NETBSD_CPP_SPEC }, \\\n   { \"netbsd_entry_point\",   NETBSD_ENTRY_POINT },\n \n \n-#define CPP_CPU_SPEC \\\n-  \"%(cpp_cpu_default_spec)\"\n-\n-\n #undef TARGET_VERSION\n-#if TARGET_DEFAULT & MASK_68020\n-#define TARGET_VERSION fprintf (stderr, \" (NetBSD/m68k ELF)\");\n-#define CPP_CPU_DEFAULT_SPEC \"%{!m680*:-D__mc68020__}\"\n-#define ASM_DEFAULT_SPEC \"%{!m680*:-m68020}\"\n-#else\n-#define TARGET_VERSION fprintf (stderr, \" (NetBSD/68010 ELF)\");\n-#define CPP_CPU_DEFAULT_SPEC \"%{!m680*:-D__mc68010__}\"\n-#define ASM_DEFAULT_SPEC \"%{!m680*:-m68010}\"\n-#endif\n-\n-\n-#if TARGET_DEFAULT & MASK_68881\n-#define CPP_FPU_SPEC \"%{!msoft-float:-D__HAVE_68881__ -D__HAVE_FPU__}\"\n-#else\n-#define CPP_FPU_SPEC \"%{m68881:-D__HAVE_68881__ -D__HAVE_FPU__}\"\n-#endif\n+#define TARGET_VERSION\t\t\t\\\n+  fprintf (stderr,\t\t\t\\\n+\t   TARGET_68010\t\t\t\\\n+\t   ? \" (NetBSD/68010 ELF)\"\t\\\n+\t   : \" (NetBSD/m68k ELF)\");\n \n \n /* Provide a CPP_SPEC appropriate for NetBSD m68k targets.  Currently we\n    deal with the GCC option '-posix', as well as an indication as to\n    whether or not use of the FPU is allowed.  */\n \n #undef CPP_SPEC\n-#define CPP_SPEC \\\n-  \"%(netbsd_cpp_spec) %(cpp_cpu_spec) %(cpp_fpu_spec)\"\n+#define CPP_SPEC NETBSD_CPP_SPEC\n \n \n /* Provide an ASM_SPEC appropriate for NetBSD m68k ELF targets.  We pass\n    on some CPU options, as well as PIC code generation options.  */\n \n #undef ASM_SPEC\n #define ASM_SPEC \\\n-  \"%(asm_default_spec) \\\n-    %{m68010} %{m68020} %{m68030} %{m68040} %{m68060} \\\n-    %{fpic|fpie:-k} %{fPIC|fPIE:-k -K}\"\n+  \"%{m68010} %{m68020} %{m68030} %{m68040} %{m68060} \\\n+   %{fpic|fpie:-k} %{fPIC|fPIE:-k -K}\"\n \n #define AS_NEEDS_DASH_FOR_PIPED_INPUT\n "}, {"sha": "427f638729618096b184afbbd52784018e30acbd", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=59fbf3cbc75f1c1bdc1cb643ea327934f0421f6e", "patch": "@@ -994,8 +994,8 @@ This is an alias for @option{--enable-tls=no}.\n @item --with-cpu=@var{cpu}\n Specify which cpu variant the compiler should generate code for by default.\n @var{cpu} will be used as the default value of the @option{-mcpu=} switch.\n-This option is only supported on some targets, including ARM, i386, PowerPC,\n-and SPARC@.\n+This option is only supported on some targets, including ARM, i386, M68k,\n+PowerPC, and SPARC@.\n \n @item --with-schedule=@var{cpu}\n @itemx --with-arch=@var{cpu}\n@@ -3389,6 +3389,12 @@ applications.  There are no standard Unix configurations.\n @html\n <hr />\n @end html\n+@heading @anchor{m68k-*-*}m68k-*-*\n+You can specify a default target using @option{--with-cpu=@var{target}}.\n+The recognized values for @var{target} are: @samp{m68000}, @samp{m68010},\n+@samp{m68020}, @samp{m68030}, @samp{m68040}, @samp{m68060}, @samp{m68020-40}\n+and @samp{m68020-60}.\n+\n @heading @anchor{m68k-hp-hpux}m68k-hp-hpux\n HP 9000 series 300 or 400 running HP-UX@.  HP-UX version 8.0 has a bug in\n the assembler that prevents compilation of GCC@.  This"}]}