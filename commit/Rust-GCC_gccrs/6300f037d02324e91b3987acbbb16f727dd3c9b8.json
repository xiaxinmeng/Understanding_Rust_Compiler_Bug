{"sha": "6300f037d02324e91b3987acbbb16f727dd3c9b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMwMGYwMzdkMDIzMjRlOTFiMzk4N2FjYmJiMTZmNzI3ZGQzYzliOA==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2006-11-08T02:24:26Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2006-11-08T02:24:26Z"}, "message": "libgcc2.c (__bswapdi2): Rename from bswapDI2.\n\n2006-11-07  Eric Christopher  <echristo@apple.com>\n\n        * libgcc2.c (__bswapdi2): Rename from bswapDI2.\n        (__bswapsi2): Ditto.\n        * libgcc2.h: Remove transformation of bswap routines.\n        * config/i386/i386.md (bswapsi2): New.\n        (bswapdi2): Ditto.\n\n2006-11-07  Eric Christopher  <echristo@apple.com>\n\n        * gcc.target/i386/builtin-bswap-1.c: Rewrite for 64-bit.\n        Test using scan-assembler-not.\n\nFrom-SVN: r118576", "tree": {"sha": "82f13b53e251f3bce20f50735420afe5774f3ac6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82f13b53e251f3bce20f50735420afe5774f3ac6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6300f037d02324e91b3987acbbb16f727dd3c9b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6300f037d02324e91b3987acbbb16f727dd3c9b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6300f037d02324e91b3987acbbb16f727dd3c9b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6300f037d02324e91b3987acbbb16f727dd3c9b8/comments", "author": null, "committer": null, "parents": [{"sha": "701640b1f922739a7ed526891a49aba5a696f504", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/701640b1f922739a7ed526891a49aba5a696f504", "html_url": "https://github.com/Rust-GCC/gccrs/commit/701640b1f922739a7ed526891a49aba5a696f504"}], "stats": {"total": 623, "additions": 328, "deletions": 295}, "files": [{"sha": "ec098898221a2d8f71ef8d431da01df6f064508e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6300f037d02324e91b3987acbbb16f727dd3c9b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6300f037d02324e91b3987acbbb16f727dd3c9b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6300f037d02324e91b3987acbbb16f727dd3c9b8", "patch": "@@ -1,3 +1,11 @@\n+2006-11-07  Eric Christopher  <echristo@apple.com>\n+\n+\t* libgcc2.c (__bswapdi2): Rename from bswapDI2.\n+\t(__bswapsi2): Ditto.\n+\t* libgcc2.h: Remove transformation of bswap routines.\n+\t* config/i386/i386.md (bswapsi2): New.\n+\t(bswapdi2): Ditto.\n+\n 2006-11-07  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-common.c (c_common_attributes): Add gnu_inline attribyte.\n@@ -14,7 +22,7 @@\n \n 2006-11-06  Anatoly Sokolov <aesok@post.ru>\n \n-\t* config/avr/avr-protos.h (mask_one_bit_p, const_int_pow2_p): Remove \n+\t* config/avr/avr-protos.h (mask_one_bit_p, const_int_pow2_p): Remove\n \tprototype.\n \t* config/avr/avr.c (mask_one_bit_p, const_int_pow2_p): Remove.\n \t(output_movhi, ashlhi3_out, ashlsi3_out, ashrhi3_out, ashrsi3_out,\n@@ -50,9 +58,9 @@\n \n \t* gcc.c (process_command): Treat -b as normal switch if its argument\n \thas no dash.\n-\t\n+\n 2006-11-07  David Ung  <davidu@mips.com>\n-\t\n+\n \t* config/mips/mips.h (ISA_HAS_PREFETCHX): Add ISA_MIPS32R2 to the\n \tlist.\n "}, {"sha": "b3a026a132cd838c6ec7174260defe7fda3b6cd4", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 287, "deletions": 269, "changes": 556, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6300f037d02324e91b3987acbbb16f727dd3c9b8/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6300f037d02324e91b3987acbbb16f727dd3c9b8/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=6300f037d02324e91b3987acbbb16f727dd3c9b8", "patch": "@@ -278,14 +278,14 @@\n     (const_int 0)))\n \n ;; Set when string REP prefix is used.\n-(define_attr \"prefix_rep\" \"\" \n+(define_attr \"prefix_rep\" \"\"\n   (if_then_else (and (eq_attr \"unit\" \"sse\") (eq_attr \"mode\" \"SF,DF\"))\n     (const_int 1)\n     (const_int 0)))\n \n ;; Set when 0f opcode prefix is used.\n (define_attr \"prefix_0f\" \"\"\n-  (if_then_else \n+  (if_then_else\n     (ior (eq_attr \"type\" \"imovx,setcc,icmov\")\n \t (eq_attr \"unit\" \"sse,mmx\"))\n     (const_int 1)\n@@ -460,7 +460,7 @@\n \n ;; All x87 floating point modes\n (define_mode_macro X87MODEF [SF DF XF])\n- \n+\n ;; All integer modes handled by x87 fisttp operator.\n (define_mode_macro X87MODEI [HI SI DI])\n \n@@ -469,7 +469,7 @@\n \n ;; All SSE floating point modes\n (define_mode_macro SSEMODEF [SF DF])\n- \n+\n ;; All integer modes handled by SSE cvtts?2si* operators.\n (define_mode_macro SSEMODEI24 [SI DI])\n \n@@ -1085,7 +1085,7 @@\n ;; Push/pop instructions.  They are separate since autoinc/dec is not a\n ;; general_operand.\n ;;\n-;; %%% We don't use a post-inc memory reference because x86 is not a \n+;; %%% We don't use a post-inc memory reference because x86 is not a\n ;; general AUTO_INC_DEC host, which impacts how it is treated in flow.\n ;; Changing this impacts compiler performance on other non-AUTO_INC_DEC\n ;; targets without our curiosities, and it is just as easy to represent\n@@ -1147,7 +1147,7 @@\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"mode\" \"SI\")\n    (set_attr \"length_immediate\" \"0\")])\n- \n+\n (define_insn \"*movsi_or\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(match_operand:SI 1 \"immediate_operand\" \"i\"))\n@@ -2289,7 +2289,7 @@\n    && (reload_in_progress || reload_completed\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n        || GET_CODE (operands[1]) != CONST_DOUBLE\n-       || memory_operand (operands[0], SFmode))\" \n+       || memory_operand (operands[0], SFmode))\"\n {\n   switch (which_alternative)\n     {\n@@ -2349,7 +2349,7 @@\n \t\t   (const_string \"V4SF\"))\n \t       /* For architectures resolving dependencies on\n \t\t  whole SSE registers use APS move to break dependency\n-\t\t  chains, otherwise use short move to avoid extra work. \n+\t\t  chains, otherwise use short move to avoid extra work.\n \n \t\t  Do the same for architectures resolving dependencies on\n \t\t  the parts.  While in DF mode it is better to always handle\n@@ -2457,7 +2457,7 @@\n    && (reload_in_progress || reload_completed\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n        || GET_CODE (operands[1]) != CONST_DOUBLE\n-       || memory_operand (operands[0], DFmode))\" \n+       || memory_operand (operands[0], DFmode))\"\n {\n   switch (which_alternative)\n     {\n@@ -2577,7 +2577,7 @@\n    && (reload_in_progress || reload_completed\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n        || GET_CODE (operands[1]) != CONST_DOUBLE\n-       || memory_operand (operands[0], DFmode))\" \n+       || memory_operand (operands[0], DFmode))\"\n {\n   switch (which_alternative)\n     {\n@@ -2693,10 +2693,10 @@\n \t(match_operand:DF 1 \"general_operand\" \"\"))]\n   \"reload_completed\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n-   && ! (ANY_FP_REG_P (operands[0]) || \n+   && ! (ANY_FP_REG_P (operands[0]) ||\n \t (GET_CODE (operands[0]) == SUBREG\n \t  && ANY_FP_REG_P (SUBREG_REG (operands[0]))))\n-   && ! (ANY_FP_REG_P (operands[1]) || \n+   && ! (ANY_FP_REG_P (operands[1]) ||\n \t (GET_CODE (operands[1]) == SUBREG\n \t  && ANY_FP_REG_P (SUBREG_REG (operands[1]))))\"\n   [(const_int 0)]\n@@ -2789,7 +2789,7 @@\n    && (reload_in_progress || reload_completed\n        || standard_80387_constant_p (operands[1])\n        || GET_CODE (operands[1]) != CONST_DOUBLE\n-       || memory_operand (operands[0], XFmode))\" \n+       || memory_operand (operands[0], XFmode))\"\n {\n   switch (which_alternative)\n     {\n@@ -2824,7 +2824,7 @@\n    && (reload_in_progress || reload_completed\n        || standard_80387_constant_p (operands[1])\n        || GET_CODE (operands[1]) != CONST_DOUBLE\n-       || memory_operand (operands[0], XFmode))\" \n+       || memory_operand (operands[0], XFmode))\"\n {\n   switch (which_alternative)\n     {\n@@ -2858,10 +2858,10 @@\n   \"reload_completed\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n    && GET_MODE (operands[0]) == XFmode\n-   && ! (ANY_FP_REG_P (operands[0]) || \n+   && ! (ANY_FP_REG_P (operands[0]) ||\n \t (GET_CODE (operands[0]) == SUBREG\n \t  && ANY_FP_REG_P (SUBREG_REG (operands[0]))))\n-   && ! (ANY_FP_REG_P (operands[1]) || \n+   && ! (ANY_FP_REG_P (operands[1]) ||\n \t (GET_CODE (operands[1]) == SUBREG\n \t  && ANY_FP_REG_P (SUBREG_REG (operands[1]))))\"\n   [(const_int 0)]\n@@ -3076,7 +3076,7 @@\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n \t(zero_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"reload_completed \n+  \"reload_completed\n    && (!TARGET_ZERO_EXTEND_WITH_AND || optimize_size)\n    && (!REG_P (operands[1]) || ANY_QI_REG_P (operands[1]))\"\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n@@ -3146,7 +3146,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"reload_completed \n+  \"reload_completed\n    && (!TARGET_ZERO_EXTEND_WITH_AND || optimize_size)\n    && (!REG_P (operands[1]) || ANY_QI_REG_P (operands[1]))\"\n   [(set (match_dup 0)\n@@ -3223,7 +3223,7 @@\n   [(set (match_dup 4) (const_int 0))]\n   \"split_di (&operands[0], 1, &operands[3], &operands[4]);\")\n \n-(define_split \n+(define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(zero_extend:DI (match_operand:SI 1 \"register_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -3232,7 +3232,7 @@\n   [(set (match_dup 4) (const_int 0))]\n   \"split_di (&operands[0], 1, &operands[3], &operands[4]);\")\n \n-(define_split \n+(define_split\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n \t(zero_extend:DI (match_operand:SI 1 \"general_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -3311,7 +3311,7 @@\n     (set_attr \"mode\" \"DI\")])\n \n ;; Extend to memory case when source register does die.\n-(define_split \n+(define_split\n   [(set (match_operand:DI 0 \"memory_operand\" \"\")\n \t(sign_extend:DI (match_operand:SI 1 \"register_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))\n@@ -3326,7 +3326,7 @@\n   \"split_di (&operands[0], 1, &operands[3], &operands[4]);\")\n \n ;; Extend to memory case when source register does not die.\n-(define_split \n+(define_split\n   [(set (match_operand:DI 0 \"memory_operand\" \"\")\n \t(sign_extend:DI (match_operand:SI 1 \"register_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))\n@@ -3356,7 +3356,7 @@\n \n ;; Extend to register case.  Optimize case where source and destination\n ;; registers match and cases where we can use cltd.\n-(define_split \n+(define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(sign_extend:DI (match_operand:SI 1 \"register_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))\n@@ -3485,7 +3485,7 @@\n ;; These are all no-ops in the model used for the 80387.  So just\n ;; emit moves.\n \n-;; %%% Kill these when call knows how to work out a DFmode push earlier. \n+;; %%% Kill these when call knows how to work out a DFmode push earlier.\n (define_insn \"*dummy_extendsfdf2\"\n   [(set (match_operand:DF 0 \"push_operand\" \"=<\")\n \t(float_extend:DF (match_operand:SF 1 \"nonimmediate_operand\" \"fY\")))]\n@@ -4371,7 +4371,7 @@\n    (set_attr \"i387_cw\" \"trunc\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_split \n+(define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(fix:DI (match_operand 1 \"register_operand\" \"\")))\n    (use (match_operand:HI 2 \"memory_operand\" \"\"))\n@@ -4386,7 +4386,7 @@\n    (set (match_dup 0) (match_dup 4))]\n   \"\")\n \n-(define_split \n+(define_split\n   [(set (match_operand:DI 0 \"memory_operand\" \"\")\n \t(fix:DI (match_operand 1 \"register_operand\" \"\")))\n    (use (match_operand:HI 2 \"memory_operand\" \"\"))\n@@ -4427,7 +4427,7 @@\n    (set_attr \"i387_cw\" \"trunc\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_split \n+(define_split\n   [(set (match_operand:X87MODEI12 0 \"register_operand\" \"\")\n \t(fix:X87MODEI12 (match_operand 1 \"register_operand\" \"\")))\n    (use (match_operand:HI 2 \"memory_operand\" \"\"))\n@@ -4440,7 +4440,7 @@\n    (set (match_dup 0) (match_dup 4))]\n   \"\")\n \n-(define_split \n+(define_split\n   [(set (match_operand:X87MODEI12 0 \"memory_operand\" \"\")\n \t(fix:X87MODEI12 (match_operand 1 \"register_operand\" \"\")))\n    (use (match_operand:HI 2 \"memory_operand\" \"\"))\n@@ -4910,7 +4910,7 @@\n \n (define_insn \"*addsi3_carry_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t  (zero_extend:DI \n+\t  (zero_extend:DI\n \t    (plus:SI (plus:SI (match_operand:SI 3 \"ix86_carry_flag_operator\" \"\")\n \t\t\t      (match_operand:SI 1 \"nonimmediate_operand\" \"%0\"))\n \t\t     (match_operand:SI 2 \"general_operand\" \"rim\"))))\n@@ -5219,7 +5219,7 @@\n \t(compare\n \t  (plus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t   (match_operand:DI 2 \"x86_64_general_operand\" \"rme,re\"))\n-\t  (const_int 0)))\t\t\t\n+\t  (const_int 0)))\n    (set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,rm\")\n \t(plus:DI (match_dup 1) (match_dup 2)))]\n   \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n@@ -5366,7 +5366,7 @@\n \t(compare\n \t  (plus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0\")\n \t\t   (match_operand:DI 2 \"x86_64_general_operand\" \"rme\"))\n-\t  (const_int 0)))\t\t\t\n+\t  (const_int 0)))\n    (clobber (match_scratch:DI 0 \"=r\"))]\n   \"TARGET_64BIT\n    && ix86_match_ccmode (insn, CCGOCmode)\n@@ -5565,7 +5565,7 @@\n \t(compare\n \t  (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t   (match_operand:SI 2 \"general_operand\" \"rmni,rni\"))\n-\t  (const_int 0)))\t\t\t\n+\t  (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,rm\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n@@ -5613,7 +5613,7 @@\n \t(compare\n \t  (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")\n \t\t   (match_operand:SI 2 \"general_operand\" \"rmni\"))\n-\t  (const_int 0)))\t\t\t\n+\t  (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI (plus:SI (match_dup 1) (match_dup 2))))]\n   \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n@@ -5791,7 +5791,7 @@\n \t(compare\n \t  (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")\n \t\t   (match_operand:SI 2 \"general_operand\" \"rmni\"))\n-\t  (const_int 0)))\t\t\t\n+\t  (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\n@@ -5931,7 +5931,7 @@\n \t(compare\n \t  (plus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t   (match_operand:HI 2 \"general_operand\" \"rmni,rni\"))\n-\t  (const_int 0)))\t\t\t\n+\t  (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,rm\")\n \t(plus:HI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n@@ -6051,7 +6051,7 @@\n \t(compare\n \t  (plus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0\")\n \t\t   (match_operand:HI 2 \"general_operand\" \"rmni\"))\n-\t  (const_int 0)))\t\t\t\n+\t  (const_int 0)))\n    (clobber (match_scratch:HI 0 \"=r\"))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n@@ -7421,7 +7421,7 @@\n  \t\t(match_operand:DF 2 \"nonimmediate_operand\" \"\")))]\n    \"TARGET_80387 || (TARGET_SSE2 && TARGET_SSE_MATH)\"\n    \"\")\n- \n+\n (define_expand \"divsf3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"\")\n \t(div:SF (match_operand:SF 1 \"register_operand\" \"\")\n@@ -8099,7 +8099,7 @@\n \t    gcc_assert (INTVAL (operands[2]) == 0xffff);\n \t    mode = HImode;\n \t  }\n-\t\n+\n \toperands[1] = gen_lowpart (mode, operands[1]);\n \tif (mode == QImode)\n \t  return \"movz{bq|x}\\t{%1,%0|%0, %1}\";\n@@ -8164,7 +8164,7 @@\n \t    gcc_assert (INTVAL (operands[2]) == 0xffff);\n \t    mode = HImode;\n \t  }\n-\t\n+\n \toperands[1] = gen_lowpart (mode, operands[1]);\n \tif (mode == QImode)\n \t  return \"movz{bl|x}\\t{%1,%0|%0, %1}\";\n@@ -8208,7 +8208,7 @@\n   [(parallel [(set (zero_extract:SI (match_dup 0)\n \t\t\t\t    (const_int 8)\n \t\t\t\t    (const_int 8))\n-\t\t   (xor:SI \n+\t\t   (xor:SI\n \t\t     (zero_extract:SI (match_dup 0)\n \t\t\t\t      (const_int 8)\n \t\t\t\t      (const_int 8))\n@@ -8396,7 +8396,7 @@\n   [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n-\t(and:SI \n+\t(and:SI\n \t  (zero_extract:SI\n \t    (match_operand 1 \"ext_register_operand\" \"0\")\n \t    (const_int 8)\n@@ -8425,7 +8425,7 @@\n    (set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n-\t(and:SI \n+\t(and:SI\n \t  (zero_extract:SI\n \t    (match_dup 1)\n \t    (const_int 8)\n@@ -8441,7 +8441,7 @@\n   [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n-\t(and:SI \n+\t(and:SI\n \t  (zero_extract:SI\n \t    (match_operand 1 \"ext_register_operand\" \"0\")\n \t    (const_int 8)\n@@ -8459,7 +8459,7 @@\n   [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n-\t(and:SI \n+\t(and:SI\n \t  (zero_extract:SI\n \t    (match_operand 1 \"ext_register_operand\" \"0\")\n \t    (const_int 8)\n@@ -8802,7 +8802,7 @@\n   [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n-\t(ior:SI \n+\t(ior:SI\n \t  (zero_extract:SI\n \t    (match_operand 1 \"ext_register_operand\" \"0\")\n \t    (const_int 8)\n@@ -8819,7 +8819,7 @@\n   [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n-\t(ior:SI \n+\t(ior:SI\n \t  (zero_extract:SI\n \t    (match_operand 1 \"ext_register_operand\" \"0\")\n \t    (const_int 8)\n@@ -8838,7 +8838,7 @@\n   [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n-\t(ior:SI \n+\t(ior:SI\n \t  (zero_extract:SI\n \t    (match_operand 1 \"ext_register_operand\" \"0\")\n \t    (const_int 8)\n@@ -8857,7 +8857,7 @@\n   [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n-\t(ior:SI \n+\t(ior:SI\n \t  (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"0\")\n \t  \t\t   (const_int 8)\n \t\t\t   (const_int 8))\n@@ -9140,7 +9140,7 @@\n   [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n-\t(xor:SI \n+\t(xor:SI\n \t  (zero_extract:SI\n \t    (match_operand 1 \"ext_register_operand\" \"0\")\n \t    (const_int 8)\n@@ -9157,7 +9157,7 @@\n   [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n-\t(xor:SI \n+\t(xor:SI\n \t  (zero_extract:SI\n \t    (match_operand 1 \"ext_register_operand\" \"0\")\n \t    (const_int 8)\n@@ -9176,7 +9176,7 @@\n   [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n-\t(xor:SI \n+\t(xor:SI\n \t  (zero_extract:SI\n \t    (match_operand 1 \"ext_register_operand\" \"0\")\n \t    (const_int 8)\n@@ -9195,7 +9195,7 @@\n   [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n-\t(xor:SI \n+\t(xor:SI\n \t  (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"0\")\n \t  \t\t   (const_int 8)\n \t\t\t   (const_int 8))\n@@ -9263,7 +9263,7 @@\n    (set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n-\t(xor:SI \n+\t(xor:SI\n \t  (zero_extract:SI (match_dup 1) (const_int 8) (const_int 8))\n \t  (match_dup 2)))]\n   \"!TARGET_64BIT && ix86_match_ccmode (insn, CCNOmode)\"\n@@ -9284,7 +9284,7 @@\n    (set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n-\t(xor:SI \n+\t(xor:SI\n \t  (zero_extract:SI (match_dup 1) (const_int 8) (const_int 8))\n \t  (match_dup 2)))]\n   \"TARGET_64BIT && ix86_match_ccmode (insn, CCNOmode)\"\n@@ -9306,7 +9306,7 @@\n      (set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"\")\n \t\t\t   (const_int 8)\n \t\t\t   (const_int 8))\n-\t  (xor:SI \n+\t  (xor:SI\n \t    (zero_extract:SI (match_dup 1) (const_int 8) (const_int 8))\n \t    (match_dup 2)))])]\n   \"\"\n@@ -9805,7 +9805,7 @@\n   enum machine_mode mode = GET_MODE (operands[0]);\n   enum machine_mode vmode = GET_MODE (operands[2]);\n   rtx tmp;\n-  \n+\n   operands[0] = simplify_gen_subreg (vmode, operands[0], mode, 0);\n   operands[1] = simplify_gen_subreg (vmode, operands[1], mode, 0);\n   if (operands_match_p (operands[0], operands[2]))\n@@ -9829,7 +9829,7 @@\n   \"reload_completed\"\n   [(parallel [(set (match_dup 0) (match_dup 1))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-{ \n+{\n   rtx tmp;\n   operands[0] = gen_lowpart (SImode, operands[0]);\n   if (GET_CODE (operands[1]) == ABS)\n@@ -9936,7 +9936,7 @@\n   operands[1] = tmp;\n })\n \n-;; Conditionalize these after reload. If they match before reload, we \n+;; Conditionalize these after reload. If they match before reload, we\n ;; lose the clobber and ability to use integer instructions.\n \n (define_insn \"*negsf2_1\"\n@@ -11350,8 +11350,8 @@\n    && (TARGET_SHIFT1 || optimize_size)\"\n   \"sar{q}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\") \n-     (if_then_else (match_operand:DI 0 \"register_operand\" \"\") \n+   (set (attr \"length\")\n+     (if_then_else (match_operand:DI 0 \"register_operand\" \"\")\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -11383,8 +11383,8 @@\n    && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\"\n   \"sar{q}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\") \n-     (if_then_else (match_operand:DI 0 \"register_operand\" \"\") \n+   (set (attr \"length\")\n+     (if_then_else (match_operand:DI 0 \"register_operand\" \"\")\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -11563,8 +11563,8 @@\n    && (TARGET_SHIFT1 || optimize_size)\"\n   \"sar{l}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\") \n-     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+   (set (attr \"length\")\n+     (if_then_else (match_operand:SI 0 \"register_operand\" \"\")\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -11619,8 +11619,8 @@\n    && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"sar{l}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\") \n-     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+   (set (attr \"length\")\n+     (if_then_else (match_operand:SI 0 \"register_operand\" \"\")\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -11720,8 +11720,8 @@\n    && (TARGET_SHIFT1 || optimize_size)\"\n   \"sar{w}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\") \n-     (if_then_else (match_operand 0 \"register_operand\" \"\") \n+   (set (attr \"length\")\n+     (if_then_else (match_operand 0 \"register_operand\" \"\")\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -11753,8 +11753,8 @@\n    && ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\"\n   \"sar{w}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\") \n-     (if_then_else (match_operand 0 \"register_operand\" \"\") \n+   (set (attr \"length\")\n+     (if_then_else (match_operand 0 \"register_operand\" \"\")\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -11823,8 +11823,8 @@\n    && (TARGET_SHIFT1 || optimize_size)\"\n   \"sar{b}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\") \n-     (if_then_else (match_operand 0 \"register_operand\" \"\") \n+   (set (attr \"length\")\n+     (if_then_else (match_operand 0 \"register_operand\" \"\")\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -11838,8 +11838,8 @@\n    && (TARGET_SHIFT1 || optimize_size)\"\n   \"sar{b}\\t%0\"\n   [(set_attr \"type\" \"ishift1\")\n-   (set (attr \"length\") \n-     (if_then_else (match_operand 0 \"register_operand\" \"\") \n+   (set (attr \"length\")\n+     (if_then_else (match_operand 0 \"register_operand\" \"\")\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -11884,8 +11884,8 @@\n    && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n   \"sar{b}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\") \n-     (if_then_else (match_operand 0 \"register_operand\" \"\") \n+   (set (attr \"length\")\n+     (if_then_else (match_operand 0 \"register_operand\" \"\")\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -11977,7 +11977,7 @@\n   \"#\"\n   [(set_attr \"type\" \"multi\")])\n \n-(define_split \n+(define_split\n   [(set (match_operand:TI 0 \"register_operand\" \"\")\n \t(lshiftrt:TI (match_operand:TI 1 \"register_operand\" \"\")\n \t\t     (match_operand:QI 2 \"register_operand\" \"\")))\n@@ -11987,7 +11987,7 @@\n   [(const_int 0)]\n   \"ix86_split_lshr (operands, operands[3], TImode); DONE;\")\n \n-(define_split \n+(define_split\n   [(set (match_operand:TI 0 \"register_operand\" \"\")\n \t(lshiftrt:TI (match_operand:TI 1 \"register_operand\" \"\")\n \t\t     (match_operand:QI 2 \"immediate_operand\" \"\")))\n@@ -12012,8 +12012,8 @@\n    && (TARGET_SHIFT1 || optimize_size)\"\n   \"shr{q}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\") \n-     (if_then_else (match_operand:DI 0 \"register_operand\" \"\") \n+   (set (attr \"length\")\n+     (if_then_else (match_operand:DI 0 \"register_operand\" \"\")\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -12045,8 +12045,8 @@\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{q}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\") \n-     (if_then_else (match_operand:DI 0 \"register_operand\" \"\") \n+   (set (attr \"length\")\n+     (if_then_else (match_operand:DI 0 \"register_operand\" \"\")\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -12121,7 +12121,7 @@\n   [(const_int 0)]\n   \"ix86_split_lshr (operands, operands[3], DImode); DONE;\")\n \n-(define_split \n+(define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t     (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n@@ -12148,8 +12148,8 @@\n    && (TARGET_SHIFT1 || optimize_size)\"\n   \"shr{l}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\") \n-     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+   (set (attr \"length\")\n+     (if_then_else (match_operand:SI 0 \"register_operand\" \"\")\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -12205,8 +12205,8 @@\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{l}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\") \n-     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+   (set (attr \"length\")\n+     (if_then_else (match_operand:SI 0 \"register_operand\" \"\")\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -12306,8 +12306,8 @@\n    && (TARGET_SHIFT1 || optimize_size)\"\n   \"shr{w}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\") \n-     (if_then_else (match_operand 0 \"register_operand\" \"\") \n+   (set (attr \"length\")\n+     (if_then_else (match_operand 0 \"register_operand\" \"\")\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -12339,8 +12339,8 @@\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{w}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\") \n-     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+   (set (attr \"length\")\n+     (if_then_else (match_operand:SI 0 \"register_operand\" \"\")\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -12409,8 +12409,8 @@\n    && (TARGET_SHIFT1 || optimize_size)\"\n   \"shr{b}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\") \n-     (if_then_else (match_operand 0 \"register_operand\" \"\") \n+   (set (attr \"length\")\n+     (if_then_else (match_operand 0 \"register_operand\" \"\")\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -12423,8 +12423,8 @@\n    && (TARGET_SHIFT1 || optimize_size)\"\n   \"shr{b}\\t%0\"\n   [(set_attr \"type\" \"ishift1\")\n-   (set (attr \"length\") \n-     (if_then_else (match_operand 0 \"register_operand\" \"\") \n+   (set (attr \"length\")\n+     (if_then_else (match_operand 0 \"register_operand\" \"\")\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -12469,8 +12469,8 @@\n    && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\"\n   \"shr{b}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\") \n-     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+   (set (attr \"length\")\n+     (if_then_else (match_operand:SI 0 \"register_operand\" \"\")\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -12543,15 +12543,15 @@\n })\n \n ;; Implement rotation using two double-precision shift instructions\n-;; and a scratch register.   \n+;; and a scratch register.\n (define_insn_and_split \"ix86_rotldi3\"\n  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n        (rotate:DI (match_operand:DI 1 \"register_operand\" \"0\")\n                   (match_operand:QI 2 \"const_1_to_31_operand\" \"I\")))\n   (clobber (reg:CC FLAGS_REG))\n   (clobber (match_scratch:SI 3 \"=&r\"))]\n  \"!TARGET_64BIT\"\n- \"\" \n+ \"\"\n  \"&& reload_completed\"\n  [(set (match_dup 3) (match_dup 4))\n   (parallel\n@@ -12567,7 +12567,7 @@\n                               (minus:QI (const_int 32) (match_dup 2)))))\n     (clobber (reg:CC FLAGS_REG))])]\n  \"split_di (operands, 1, operands + 4, operands + 5);\")\n- \n+\n (define_insn \"*rotlsi3_1_one_bit_rex64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(rotate:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n@@ -12577,8 +12577,8 @@\n    && (TARGET_SHIFT1 || optimize_size)\"\n   \"rol{q}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n-   (set (attr \"length\") \n-     (if_then_else (match_operand:DI 0 \"register_operand\" \"\") \n+   (set (attr \"length\")\n+     (if_then_else (match_operand:DI 0 \"register_operand\" \"\")\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -12611,8 +12611,8 @@\n    && (TARGET_SHIFT1 || optimize_size)\"\n   \"rol{l}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n-   (set (attr \"length\") \n-     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+   (set (attr \"length\")\n+     (if_then_else (match_operand:SI 0 \"register_operand\" \"\")\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -12670,8 +12670,8 @@\n    && (TARGET_SHIFT1 || optimize_size)\"\n   \"rol{w}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n-   (set (attr \"length\") \n-     (if_then_else (match_operand 0 \"register_operand\" \"\") \n+   (set (attr \"length\")\n+     (if_then_else (match_operand 0 \"register_operand\" \"\")\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -12704,8 +12704,8 @@\n    && (TARGET_SHIFT1 || optimize_size)\"\n   \"rol{b}\\t%0\"\n   [(set_attr \"type\" \"rotate1\")\n-   (set (attr \"length\") \n-     (if_then_else (match_operand 0 \"register_operand\" \"\") \n+   (set (attr \"length\")\n+     (if_then_else (match_operand 0 \"register_operand\" \"\")\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -12718,8 +12718,8 @@\n    && (TARGET_SHIFT1 || optimize_size)\"\n   \"rol{b}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n-   (set (attr \"length\") \n-     (if_then_else (match_operand 0 \"register_operand\" \"\") \n+   (set (attr \"length\")\n+     (if_then_else (match_operand 0 \"register_operand\" \"\")\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -12765,9 +12765,9 @@\n   emit_insn (gen_ix86_rotrdi3 (operands[0], operands[1], operands[2]));\n   DONE;\n })\n-  \n+\n ;; Implement rotation using two double-precision shift instructions\n-;; and a scratch register.   \n+;; and a scratch register.\n (define_insn_and_split \"ix86_rotrdi3\"\n  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n        (rotatert:DI (match_operand:DI 1 \"register_operand\" \"0\")\n@@ -12801,8 +12801,8 @@\n    && (TARGET_SHIFT1 || optimize_size)\"\n   \"ror{q}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n-   (set (attr \"length\") \n-     (if_then_else (match_operand:DI 0 \"register_operand\" \"\") \n+   (set (attr \"length\")\n+     (if_then_else (match_operand:DI 0 \"register_operand\" \"\")\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -12835,8 +12835,8 @@\n    && (TARGET_SHIFT1 || optimize_size)\"\n   \"ror{l}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n-   (set (attr \"length\") \n-     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+   (set (attr \"length\")\n+     (if_then_else (match_operand:SI 0 \"register_operand\" \"\")\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -12850,8 +12850,8 @@\n    && (TARGET_SHIFT1 || optimize_size)\"\n   \"ror{l}\\t%k0\"\n   [(set_attr \"type\" \"rotate\")\n-   (set (attr \"length\") \n-     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+   (set (attr \"length\")\n+     (if_then_else (match_operand:SI 0 \"register_operand\" \"\")\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -12897,8 +12897,8 @@\n    && (TARGET_SHIFT1 || optimize_size)\"\n   \"ror{w}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n-   (set (attr \"length\") \n-     (if_then_else (match_operand 0 \"register_operand\" \"\") \n+   (set (attr \"length\")\n+     (if_then_else (match_operand 0 \"register_operand\" \"\")\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -12931,8 +12931,8 @@\n    && (TARGET_SHIFT1 || optimize_size)\"\n   \"ror{b}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n-   (set (attr \"length\") \n-     (if_then_else (match_operand 0 \"register_operand\" \"\") \n+   (set (attr \"length\")\n+     (if_then_else (match_operand 0 \"register_operand\" \"\")\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -12945,8 +12945,8 @@\n    && (TARGET_SHIFT1 || optimize_size)\"\n   \"ror{b}\\t%0\"\n   [(set_attr \"type\" \"rotate1\")\n-   (set (attr \"length\") \n-     (if_then_else (match_operand 0 \"register_operand\" \"\") \n+   (set (attr \"length\")\n+     (if_then_else (match_operand 0 \"register_operand\" \"\")\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -13313,14 +13313,14 @@\n    (set_attr \"mode\" \"QI\")])\n \n ;; In general it is not safe to assume too much about CCmode registers,\n-;; so simplify-rtx stops when it sees a second one.  Under certain \n+;; so simplify-rtx stops when it sees a second one.  Under certain\n ;; conditions this is safe on x86, so help combine not create\n ;;\n ;;\tseta\t%al\n ;;\ttestb\t%al, %al\n ;;\tsete\t%al\n \n-(define_split \n+(define_split\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n \t(ne:QI (match_operator 1 \"ix86_comparison_operator\"\n \t         [(reg FLAGS_REG) (const_int 0)])\n@@ -13331,7 +13331,7 @@\n   PUT_MODE (operands[1], QImode);\n })\n \n-(define_split \n+(define_split\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"\"))\n \t(ne:QI (match_operator 1 \"ix86_comparison_operator\"\n \t         [(reg FLAGS_REG) (const_int 0)])\n@@ -13342,7 +13342,7 @@\n   PUT_MODE (operands[1], QImode);\n })\n \n-(define_split \n+(define_split\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n \t(eq:QI (match_operator 1 \"ix86_comparison_operator\"\n \t         [(reg FLAGS_REG) (const_int 0)])\n@@ -13362,7 +13362,7 @@\n     FAIL;\n })\n \n-(define_split \n+(define_split\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"\"))\n \t(eq:QI (match_operator 1 \"ix86_comparison_operator\"\n \t         [(reg FLAGS_REG) (const_int 0)])\n@@ -13594,14 +13594,14 @@\n \t     (const_int 6)))])\n \n ;; In general it is not safe to assume too much about CCmode registers,\n-;; so simplify-rtx stops when it sees a second one.  Under certain \n+;; so simplify-rtx stops when it sees a second one.  Under certain\n ;; conditions this is safe on x86, so help combine not create\n ;;\n ;;\tseta\t%al\n ;;\ttestb\t%al, %al\n ;;\tje\tLfoo\n \n-(define_split \n+(define_split\n   [(set (pc)\n \t(if_then_else (ne (match_operator 0 \"ix86_comparison_operator\"\n \t\t\t\t      [(reg FLAGS_REG) (const_int 0)])\n@@ -13616,8 +13616,8 @@\n {\n   PUT_MODE (operands[0], VOIDmode);\n })\n-  \n-(define_split \n+\n+(define_split\n   [(set (pc)\n \t(if_then_else (eq (match_operator 0 \"ix86_comparison_operator\"\n \t\t\t\t      [(reg FLAGS_REG) (const_int 0)])\n@@ -14092,7 +14092,7 @@\n     return \"call\\t%P0\";\n }\n   [(set_attr \"type\" \"call\")])\n-  \n+\n (define_insn \"*call_pop_1\"\n   [(call (mem:QI (match_operand:SI 0 \"call_insn_operand\" \"rsm\"))\n \t (match_operand:SI 1 \"\" \"\"))\n@@ -14428,7 +14428,7 @@\n })\n \n (define_insn_and_split \"eh_return_si\"\n-  [(set (pc) \n+  [(set (pc)\n         (unspec [(match_operand:SI 0 \"register_operand\" \"c\")]\n \t         UNSPEC_EH_RETURN))]\n   \"!TARGET_64BIT\"\n@@ -14438,7 +14438,7 @@\n   \"ix86_expand_epilogue (2); DONE;\")\n \n (define_insn_and_split \"eh_return_di\"\n-  [(set (pc) \n+  [(set (pc)\n         (unspec [(match_operand:DI 0 \"register_operand\" \"c\")]\n \t         UNSPEC_EH_RETURN))]\n   \"TARGET_64BIT\"\n@@ -14465,15 +14465,15 @@\n \f\n (define_expand \"ffssi2\"\n   [(parallel\n-     [(set (match_operand:SI 0 \"register_operand\" \"\") \n+     [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t   (ffs:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))\n       (clobber (match_scratch:SI 2 \"\"))\n       (clobber (reg:CC FLAGS_REG))])]\n   \"\"\n   \"\")\n \n (define_insn_and_split \"*ffs_cmove\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\") \n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(ffs:SI (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")))\n    (clobber (match_scratch:SI 2 \"=&r\"))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -14492,7 +14492,7 @@\n   \"\")\n \n (define_insn_and_split \"*ffs_no_cmove\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r\") \n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r\")\n \t(ffs:SI (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")))\n    (clobber (match_scratch:SI 2 \"=&q\"))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -14526,15 +14526,15 @@\n \n (define_expand \"ffsdi2\"\n   [(parallel\n-     [(set (match_operand:DI 0 \"register_operand\" \"\") \n+     [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t   (ffs:DI (match_operand:DI 1 \"nonimmediate_operand\" \"\")))\n       (clobber (match_scratch:DI 2 \"\"))\n       (clobber (reg:CC FLAGS_REG))])]\n   \"TARGET_64BIT && TARGET_CMOVE\"\n   \"\")\n \n (define_insn_and_split \"*ffs_rex64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\") \n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ffs:DI (match_operand:DI 1 \"nonimmediate_operand\" \"rm\")))\n    (clobber (match_scratch:DI 2 \"=&r\"))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -14600,6 +14600,24 @@\n   \"bsr{l}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"prefix_0f\" \"1\")])\n \n+(define_insn \"bswapsi2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(bswap:SI (match_operand:SI 1 \"register_operand\" \"0\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_BSWAP\"\n+  \"bswap\\t%k0\"\n+  [(set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"length\" \"2\")])\n+\n+(define_insn \"bswapdi2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(bswap:DI (match_operand:DI 1 \"register_operand\" \"0\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT && TARGET_BSWAP\"\n+  \"bswap\\t%0\"\n+  [(set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"length\" \"3\")])\n+\n (define_expand \"clzdi2\"\n   [(parallel\n      [(set (match_operand:DI 0 \"register_operand\" \"\")\n@@ -15012,12 +15030,12 @@\n    && COMMUTATIVE_ARITH_P (operands[3])\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n+  [(set (attr \"type\")\n \t(if_then_else (eq_attr \"alternative\" \"1\")\n-\t   (if_then_else (match_operand:SF 3 \"mult_operator\" \"\") \n+\t   (if_then_else (match_operand:SF 3 \"mult_operator\" \"\")\n \t      (const_string \"ssemul\")\n \t      (const_string \"sseadd\"))\n-\t   (if_then_else (match_operand:SF 3 \"mult_operator\" \"\") \n+\t   (if_then_else (match_operand:SF 3 \"mult_operator\" \"\")\n \t      (const_string \"fmul\")\n \t      (const_string \"fop\"))))\n    (set_attr \"mode\" \"SF\")])\n@@ -15031,8 +15049,8 @@\n    && COMMUTATIVE_ARITH_P (operands[3])\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (if_then_else (match_operand:SF 3 \"mult_operator\" \"\") \n+  [(set (attr \"type\")\n+        (if_then_else (match_operand:SF 3 \"mult_operator\" \"\")\n \t   (const_string \"ssemul\")\n \t   (const_string \"sseadd\")))\n    (set_attr \"mode\" \"SF\")])\n@@ -15046,8 +15064,8 @@\n    && COMMUTATIVE_ARITH_P (operands[3])\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-\t(if_then_else (match_operand:SF 3 \"mult_operator\" \"\") \n+  [(set (attr \"type\")\n+\t(if_then_else (match_operand:SF 3 \"mult_operator\" \"\")\n \t   (const_string \"fmul\")\n \t   (const_string \"fop\")))\n    (set_attr \"mode\" \"SF\")])\n@@ -15061,7 +15079,7 @@\n    && !COMMUTATIVE_ARITH_P (operands[3])\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n+  [(set (attr \"type\")\n         (cond [(and (eq_attr \"alternative\" \"2\")\n \t            (match_operand:SF 3 \"mult_operator\" \"\"))\n                  (const_string \"ssemul\")\n@@ -15070,9 +15088,9 @@\n                  (const_string \"ssediv\")\n \t       (eq_attr \"alternative\" \"2\")\n                  (const_string \"sseadd\")\n-\t       (match_operand:SF 3 \"mult_operator\" \"\") \n+\t       (match_operand:SF 3 \"mult_operator\" \"\")\n                  (const_string \"fmul\")\n-               (match_operand:SF 3 \"div_operator\" \"\") \n+               (match_operand:SF 3 \"div_operator\" \"\")\n                  (const_string \"fdiv\")\n               ]\n               (const_string \"fop\")))\n@@ -15086,7 +15104,7 @@\n   \"TARGET_SSE_MATH\n    && !COMMUTATIVE_ARITH_P (operands[3])\"\n   \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n+  [(set (attr \"type\")\n         (cond [(match_operand:SF 3 \"mult_operator\" \"\")\n                  (const_string \"ssemul\")\n \t       (match_operand:SF 3 \"div_operator\" \"\")\n@@ -15105,10 +15123,10 @@\n    && !COMMUTATIVE_ARITH_P (operands[3])\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (cond [(match_operand:SF 3 \"mult_operator\" \"\") \n+  [(set (attr \"type\")\n+        (cond [(match_operand:SF 3 \"mult_operator\" \"\")\n                  (const_string \"fmul\")\n-               (match_operand:SF 3 \"div_operator\" \"\") \n+               (match_operand:SF 3 \"div_operator\" \"\")\n                  (const_string \"fdiv\")\n               ]\n               (const_string \"fop\")))\n@@ -15122,10 +15140,10 @@\n \t   (match_operand:SF 2 \"register_operand\" \"0,0\")]))]\n   \"TARGET_80387 && TARGET_USE_<MODE>MODE_FIOP && !TARGET_SSE_MATH\"\n   \"* return which_alternative ? \\\"#\\\" : output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (cond [(match_operand:SF 3 \"mult_operator\" \"\") \n+  [(set (attr \"type\")\n+        (cond [(match_operand:SF 3 \"mult_operator\" \"\")\n                  (const_string \"fmul\")\n-               (match_operand:SF 3 \"div_operator\" \"\") \n+               (match_operand:SF 3 \"div_operator\" \"\")\n                  (const_string \"fdiv\")\n               ]\n               (const_string \"fop\")))\n@@ -15139,10 +15157,10 @@\n \t   (float:SF (match_operand:X87MODEI12 2 \"nonimmediate_operand\" \"m,?r\"))]))]\n   \"TARGET_80387 && TARGET_USE_<MODE>MODE_FIOP && !TARGET_SSE_MATH\"\n   \"* return which_alternative ? \\\"#\\\" : output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (cond [(match_operand:SF 3 \"mult_operator\" \"\") \n+  [(set (attr \"type\")\n+        (cond [(match_operand:SF 3 \"mult_operator\" \"\")\n                  (const_string \"fmul\")\n-               (match_operand:SF 3 \"div_operator\" \"\") \n+               (match_operand:SF 3 \"div_operator\" \"\")\n                  (const_string \"fdiv\")\n               ]\n               (const_string \"fop\")))\n@@ -15158,12 +15176,12 @@\n    && COMMUTATIVE_ARITH_P (operands[3])\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n+  [(set (attr \"type\")\n \t(if_then_else (eq_attr \"alternative\" \"1\")\n-\t   (if_then_else (match_operand:DF 3 \"mult_operator\" \"\") \n+\t   (if_then_else (match_operand:DF 3 \"mult_operator\" \"\")\n \t      (const_string \"ssemul\")\n \t      (const_string \"sseadd\"))\n-\t   (if_then_else (match_operand:DF 3 \"mult_operator\" \"\") \n+\t   (if_then_else (match_operand:DF 3 \"mult_operator\" \"\")\n \t      (const_string \"fmul\")\n \t      (const_string \"fop\"))))\n    (set_attr \"mode\" \"DF\")])\n@@ -15177,8 +15195,8 @@\n    && COMMUTATIVE_ARITH_P (operands[3])\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (if_then_else (match_operand:DF 3 \"mult_operator\" \"\") \n+  [(set (attr \"type\")\n+        (if_then_else (match_operand:DF 3 \"mult_operator\" \"\")\n \t   (const_string \"ssemul\")\n \t   (const_string \"sseadd\")))\n    (set_attr \"mode\" \"DF\")])\n@@ -15192,8 +15210,8 @@\n    && COMMUTATIVE_ARITH_P (operands[3])\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-\t(if_then_else (match_operand:DF 3 \"mult_operator\" \"\") \n+  [(set (attr \"type\")\n+\t(if_then_else (match_operand:DF 3 \"mult_operator\" \"\")\n \t   (const_string \"fmul\")\n \t   (const_string \"fop\")))\n    (set_attr \"mode\" \"DF\")])\n@@ -15207,7 +15225,7 @@\n    && !COMMUTATIVE_ARITH_P (operands[3])\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n+  [(set (attr \"type\")\n         (cond [(and (eq_attr \"alternative\" \"2\")\n \t            (match_operand:DF 3 \"mult_operator\" \"\"))\n                  (const_string \"ssemul\")\n@@ -15216,9 +15234,9 @@\n                  (const_string \"ssediv\")\n \t       (eq_attr \"alternative\" \"2\")\n                  (const_string \"sseadd\")\n-\t       (match_operand:DF 3 \"mult_operator\" \"\") \n+\t       (match_operand:DF 3 \"mult_operator\" \"\")\n                  (const_string \"fmul\")\n-               (match_operand:DF 3 \"div_operator\" \"\") \n+               (match_operand:DF 3 \"div_operator\" \"\")\n                  (const_string \"fdiv\")\n               ]\n               (const_string \"fop\")))\n@@ -15233,7 +15251,7 @@\n    && !COMMUTATIVE_ARITH_P (operands[3])\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set_attr \"mode\" \"DF\")\n-   (set (attr \"type\") \n+   (set (attr \"type\")\n         (cond [(match_operand:DF 3 \"mult_operator\" \"\")\n                  (const_string \"ssemul\")\n \t       (match_operand:DF 3 \"div_operator\" \"\")\n@@ -15251,8 +15269,8 @@\n    && !COMMUTATIVE_ARITH_P (operands[3])\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (cond [(match_operand:DF 3 \"mult_operator\" \"\") \n+  [(set (attr \"type\")\n+        (cond [(match_operand:DF 3 \"mult_operator\" \"\")\n                  (const_string \"fmul\")\n                (match_operand:DF 3 \"div_operator\" \"\")\n                  (const_string \"fdiv\")\n@@ -15269,10 +15287,10 @@\n   \"TARGET_80387 && TARGET_USE_<MODE>MODE_FIOP\n    && !(TARGET_SSE2 && TARGET_SSE_MATH)\"\n   \"* return which_alternative ? \\\"#\\\" : output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (cond [(match_operand:DF 3 \"mult_operator\" \"\") \n+  [(set (attr \"type\")\n+        (cond [(match_operand:DF 3 \"mult_operator\" \"\")\n                  (const_string \"fmul\")\n-               (match_operand:DF 3 \"div_operator\" \"\") \n+               (match_operand:DF 3 \"div_operator\" \"\")\n                  (const_string \"fdiv\")\n               ]\n               (const_string \"fop\")))\n@@ -15287,10 +15305,10 @@\n   \"TARGET_80387 && TARGET_USE_<MODE>MODE_FIOP\n    && !(TARGET_SSE2 && TARGET_SSE_MATH)\"\n   \"* return which_alternative ? \\\"#\\\" : output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (cond [(match_operand:DF 3 \"mult_operator\" \"\") \n+  [(set (attr \"type\")\n+        (cond [(match_operand:DF 3 \"mult_operator\" \"\")\n                  (const_string \"fmul\")\n-               (match_operand:DF 3 \"div_operator\" \"\") \n+               (match_operand:DF 3 \"div_operator\" \"\")\n                  (const_string \"fdiv\")\n               ]\n               (const_string \"fop\")))\n@@ -15305,10 +15323,10 @@\n   \"TARGET_80387 && !(TARGET_SSE2 && TARGET_SSE_MATH)\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (cond [(match_operand:DF 3 \"mult_operator\" \"\") \n+  [(set (attr \"type\")\n+        (cond [(match_operand:DF 3 \"mult_operator\" \"\")\n                  (const_string \"fmul\")\n-               (match_operand:DF 3 \"div_operator\" \"\") \n+               (match_operand:DF 3 \"div_operator\" \"\")\n                  (const_string \"fdiv\")\n               ]\n               (const_string \"fop\")))\n@@ -15322,10 +15340,10 @@\n \t    (match_operand:SF 2 \"nonimmediate_operand\" \"fm,0\"))]))]\n   \"TARGET_80387 && !(TARGET_SSE2 && TARGET_SSE_MATH)\"\n   \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (cond [(match_operand:DF 3 \"mult_operator\" \"\") \n+  [(set (attr \"type\")\n+        (cond [(match_operand:DF 3 \"mult_operator\" \"\")\n                  (const_string \"fmul\")\n-               (match_operand:DF 3 \"div_operator\" \"\") \n+               (match_operand:DF 3 \"div_operator\" \"\")\n                  (const_string \"fdiv\")\n               ]\n               (const_string \"fop\")))\n@@ -15340,10 +15358,10 @@\n \t    (match_operand:SF 2 \"nonimmediate_operand\" \"fm,0\"))]))]\n   \"TARGET_80387 && !(TARGET_SSE2 && TARGET_SSE_MATH)\"\n   \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (cond [(match_operand:DF 3 \"mult_operator\" \"\") \n+  [(set (attr \"type\")\n+        (cond [(match_operand:DF 3 \"mult_operator\" \"\")\n                  (const_string \"fmul\")\n-               (match_operand:DF 3 \"div_operator\" \"\") \n+               (match_operand:DF 3 \"div_operator\" \"\")\n                  (const_string \"fdiv\")\n               ]\n               (const_string \"fop\")))\n@@ -15357,8 +15375,8 @@\n   \"TARGET_80387\n    && COMMUTATIVE_ARITH_P (operands[3])\"\n   \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (if_then_else (match_operand:XF 3 \"mult_operator\" \"\") \n+  [(set (attr \"type\")\n+        (if_then_else (match_operand:XF 3 \"mult_operator\" \"\")\n            (const_string \"fmul\")\n            (const_string \"fop\")))\n    (set_attr \"mode\" \"XF\")])\n@@ -15371,10 +15389,10 @@\n   \"TARGET_80387\n    && !COMMUTATIVE_ARITH_P (operands[3])\"\n   \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (cond [(match_operand:XF 3 \"mult_operator\" \"\") \n+  [(set (attr \"type\")\n+        (cond [(match_operand:XF 3 \"mult_operator\" \"\")\n                  (const_string \"fmul\")\n-               (match_operand:XF 3 \"div_operator\" \"\") \n+               (match_operand:XF 3 \"div_operator\" \"\")\n                  (const_string \"fdiv\")\n               ]\n               (const_string \"fop\")))\n@@ -15387,10 +15405,10 @@\n \t    (match_operand:XF 2 \"register_operand\" \"0,0\")]))]\n   \"TARGET_80387 && TARGET_USE_<MODE>MODE_FIOP\"\n   \"* return which_alternative ? \\\"#\\\" : output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (cond [(match_operand:XF 3 \"mult_operator\" \"\") \n+  [(set (attr \"type\")\n+        (cond [(match_operand:XF 3 \"mult_operator\" \"\")\n                  (const_string \"fmul\")\n-               (match_operand:XF 3 \"div_operator\" \"\") \n+               (match_operand:XF 3 \"div_operator\" \"\")\n                  (const_string \"fdiv\")\n               ]\n               (const_string \"fop\")))\n@@ -15404,10 +15422,10 @@\n \t   (float:XF (match_operand:X87MODEI12 2 \"nonimmediate_operand\" \"m,?r\"))]))]\n   \"TARGET_80387 && TARGET_USE_<MODE>MODE_FIOP\"\n   \"* return which_alternative ? \\\"#\\\" : output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (cond [(match_operand:XF 3 \"mult_operator\" \"\") \n+  [(set (attr \"type\")\n+        (cond [(match_operand:XF 3 \"mult_operator\" \"\")\n                  (const_string \"fmul\")\n-               (match_operand:XF 3 \"div_operator\" \"\") \n+               (match_operand:XF 3 \"div_operator\" \"\")\n                  (const_string \"fdiv\")\n               ]\n               (const_string \"fop\")))\n@@ -15421,10 +15439,10 @@\n \t    (match_operand:XF 2 \"register_operand\" \"0,f\")]))]\n   \"TARGET_80387\"\n   \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (cond [(match_operand:XF 3 \"mult_operator\" \"\") \n+  [(set (attr \"type\")\n+        (cond [(match_operand:XF 3 \"mult_operator\" \"\")\n                  (const_string \"fmul\")\n-               (match_operand:XF 3 \"div_operator\" \"\") \n+               (match_operand:XF 3 \"div_operator\" \"\")\n                  (const_string \"fdiv\")\n               ]\n               (const_string \"fop\")))\n@@ -15438,10 +15456,10 @@\n \t    (match_operand 2 \"nonimmediate_operand\" \"fm,0\"))]))]\n   \"TARGET_80387\"\n   \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (cond [(match_operand:XF 3 \"mult_operator\" \"\") \n+  [(set (attr \"type\")\n+        (cond [(match_operand:XF 3 \"mult_operator\" \"\")\n                  (const_string \"fmul\")\n-               (match_operand:XF 3 \"div_operator\" \"\") \n+               (match_operand:XF 3 \"div_operator\" \"\")\n                  (const_string \"fdiv\")\n               ]\n               (const_string \"fop\")))\n@@ -15456,10 +15474,10 @@\n \t    (match_operand 2 \"nonimmediate_operand\" \"fm,0\"))]))]\n   \"TARGET_80387\"\n   \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (cond [(match_operand:XF 3 \"mult_operator\" \"\") \n+  [(set (attr \"type\")\n+        (cond [(match_operand:XF 3 \"mult_operator\" \"\")\n                  (const_string \"fmul\")\n-               (match_operand:XF 3 \"div_operator\" \"\") \n+               (match_operand:XF 3 \"div_operator\" \"\")\n                  (const_string \"fdiv\")\n               ]\n               (const_string \"fop\")))\n@@ -15473,7 +15491,7 @@\n   \"TARGET_80387 && reload_completed\n    && FLOAT_MODE_P (GET_MODE (operands[0]))\"\n   [(const_int 0)]\n-{ \n+{\n   operands[4] = ix86_force_to_memory (GET_MODE (operands[1]), operands[1]);\n   operands[4] = gen_rtx_FLOAT (GET_MODE (operands[0]), operands[4]);\n   emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n@@ -15868,7 +15886,7 @@\n    (set_attr \"mode\" \"XF\")])\n \n ;; With sincos pattern defined, sin and cos builtin function will be\n-;; expanded to sincos pattern with one of its outputs left unused. \n+;; expanded to sincos pattern with one of its outputs left unused.\n ;; Cse pass  will detected, if two sincos patterns can be combined,\n ;; otherwise sincos pattern will be split back to sin or cos pattern,\n ;; depending on the unused output.\n@@ -17312,7 +17330,7 @@\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_split \n+(define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(unspec:DI [(match_operand:XF 1 \"register_operand\" \"\")]\n \t UNSPEC_FIST))\n@@ -17324,7 +17342,7 @@\n    (set (match_dup 0) (match_dup 2))]\n   \"\")\n \n-(define_split \n+(define_split\n   [(set (match_operand:DI 0 \"memory_operand\" \"\")\n \t(unspec:DI [(match_operand:XF 1 \"register_operand\" \"\")]\n \t UNSPEC_FIST))\n@@ -17372,7 +17390,7 @@\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_split \n+(define_split\n   [(set (match_operand:X87MODEI12 0 \"register_operand\" \"\")\n \t(unspec:X87MODEI12 [(match_operand:XF 1 \"register_operand\" \"\")]\n \t UNSPEC_FIST))\n@@ -17383,7 +17401,7 @@\n    (set (match_dup 0) (match_dup 2))]\n   \"\")\n \n-(define_split \n+(define_split\n   [(set (match_operand:X87MODEI12 0 \"memory_operand\" \"\")\n \t(unspec:X87MODEI12 [(match_operand:XF 1 \"register_operand\" \"\")]\n \t UNSPEC_FIST))\n@@ -17603,7 +17621,7 @@\n    (set_attr \"i387_cw\" \"floor\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_split \n+(define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(unspec:DI [(match_operand:XF 1 \"register_operand\" \"\")]\n \t UNSPEC_FIST_FLOOR))\n@@ -17619,7 +17637,7 @@\n    (set (match_dup 0) (match_dup 4))]\n   \"\")\n \n-(define_split \n+(define_split\n   [(set (match_operand:DI 0 \"memory_operand\" \"\")\n \t(unspec:DI [(match_operand:XF 1 \"register_operand\" \"\")]\n \t UNSPEC_FIST_FLOOR))\n@@ -17661,7 +17679,7 @@\n    (set_attr \"i387_cw\" \"floor\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_split \n+(define_split\n   [(set (match_operand:X87MODEI12 0 \"register_operand\" \"\")\n \t(unspec:X87MODEI12 [(match_operand:XF 1 \"register_operand\" \"\")]\n \t UNSPEC_FIST_FLOOR))\n@@ -17676,7 +17694,7 @@\n    (set (match_dup 0) (match_dup 4))]\n   \"\")\n \n-(define_split \n+(define_split\n   [(set (match_operand:X87MODEI12 0 \"memory_operand\" \"\")\n \t(unspec:X87MODEI12 [(match_operand:XF 1 \"register_operand\" \"\")]\n \t UNSPEC_FIST_FLOOR))\n@@ -17889,7 +17907,7 @@\n    (set_attr \"i387_cw\" \"ceil\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_split \n+(define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(unspec:DI [(match_operand:XF 1 \"register_operand\" \"\")]\n \t UNSPEC_FIST_CEIL))\n@@ -17905,7 +17923,7 @@\n    (set (match_dup 0) (match_dup 4))]\n   \"\")\n \n-(define_split \n+(define_split\n   [(set (match_operand:DI 0 \"memory_operand\" \"\")\n \t(unspec:DI [(match_operand:XF 1 \"register_operand\" \"\")]\n \t UNSPEC_FIST_CEIL))\n@@ -17947,7 +17965,7 @@\n    (set_attr \"i387_cw\" \"ceil\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_split \n+(define_split\n   [(set (match_operand:X87MODEI12 0 \"register_operand\" \"\")\n \t(unspec:X87MODEI12 [(match_operand:XF 1 \"register_operand\" \"\")]\n \t UNSPEC_FIST_CEIL))\n@@ -17962,7 +17980,7 @@\n    (set (match_dup 0) (match_dup 4))]\n   \"\")\n \n-(define_split \n+(define_split\n   [(set (match_operand:X87MODEI12 0 \"memory_operand\" \"\")\n \t(unspec:X87MODEI12 [(match_operand:XF 1 \"register_operand\" \"\")]\n \t UNSPEC_FIST_CEIL))\n@@ -18399,11 +18417,11 @@\n \n (define_insn \"*rep_movdi_rex64\"\n   [(set (match_operand:DI 2 \"register_operand\" \"=c\") (const_int 0))\n-   (set (match_operand:DI 0 \"register_operand\" \"=D\") \n+   (set (match_operand:DI 0 \"register_operand\" \"=D\")\n         (plus:DI (ashift:DI (match_operand:DI 5 \"register_operand\" \"2\")\n \t\t\t    (const_int 3))\n \t\t (match_operand:DI 3 \"register_operand\" \"0\")))\n-   (set (match_operand:DI 1 \"register_operand\" \"=S\") \n+   (set (match_operand:DI 1 \"register_operand\" \"=S\")\n         (plus:DI (ashift:DI (match_dup 5) (const_int 3))\n \t\t (match_operand:DI 4 \"register_operand\" \"1\")))\n    (set (mem:BLK (match_dup 3))\n@@ -18419,11 +18437,11 @@\n \n (define_insn \"*rep_movsi\"\n   [(set (match_operand:SI 2 \"register_operand\" \"=c\") (const_int 0))\n-   (set (match_operand:SI 0 \"register_operand\" \"=D\") \n+   (set (match_operand:SI 0 \"register_operand\" \"=D\")\n         (plus:SI (ashift:SI (match_operand:SI 5 \"register_operand\" \"2\")\n \t\t\t    (const_int 2))\n \t\t (match_operand:SI 3 \"register_operand\" \"0\")))\n-   (set (match_operand:SI 1 \"register_operand\" \"=S\") \n+   (set (match_operand:SI 1 \"register_operand\" \"=S\")\n         (plus:SI (ashift:SI (match_dup 5) (const_int 2))\n \t\t (match_operand:SI 4 \"register_operand\" \"1\")))\n    (set (mem:BLK (match_dup 3))\n@@ -18439,11 +18457,11 @@\n \n (define_insn \"*rep_movsi_rex64\"\n   [(set (match_operand:DI 2 \"register_operand\" \"=c\") (const_int 0))\n-   (set (match_operand:DI 0 \"register_operand\" \"=D\") \n+   (set (match_operand:DI 0 \"register_operand\" \"=D\")\n         (plus:DI (ashift:DI (match_operand:DI 5 \"register_operand\" \"2\")\n \t\t\t    (const_int 2))\n \t\t (match_operand:DI 3 \"register_operand\" \"0\")))\n-   (set (match_operand:DI 1 \"register_operand\" \"=S\") \n+   (set (match_operand:DI 1 \"register_operand\" \"=S\")\n         (plus:DI (ashift:DI (match_dup 5) (const_int 2))\n \t\t (match_operand:DI 4 \"register_operand\" \"1\")))\n    (set (mem:BLK (match_dup 3))\n@@ -18459,10 +18477,10 @@\n \n (define_insn \"*rep_movqi\"\n   [(set (match_operand:SI 2 \"register_operand\" \"=c\") (const_int 0))\n-   (set (match_operand:SI 0 \"register_operand\" \"=D\") \n+   (set (match_operand:SI 0 \"register_operand\" \"=D\")\n         (plus:SI (match_operand:SI 3 \"register_operand\" \"0\")\n \t\t (match_operand:SI 5 \"register_operand\" \"2\")))\n-   (set (match_operand:SI 1 \"register_operand\" \"=S\") \n+   (set (match_operand:SI 1 \"register_operand\" \"=S\")\n         (plus:SI (match_operand:SI 4 \"register_operand\" \"1\") (match_dup 5)))\n    (set (mem:BLK (match_dup 3))\n \t(mem:BLK (match_dup 4)))\n@@ -18477,10 +18495,10 @@\n \n (define_insn \"*rep_movqi_rex64\"\n   [(set (match_operand:DI 2 \"register_operand\" \"=c\") (const_int 0))\n-   (set (match_operand:DI 0 \"register_operand\" \"=D\") \n+   (set (match_operand:DI 0 \"register_operand\" \"=D\")\n         (plus:DI (match_operand:DI 3 \"register_operand\" \"0\")\n \t\t (match_operand:DI 5 \"register_operand\" \"2\")))\n-   (set (match_operand:DI 1 \"register_operand\" \"=S\") \n+   (set (match_operand:DI 1 \"register_operand\" \"=S\")\n         (plus:DI (match_operand:DI 4 \"register_operand\" \"1\") (match_dup 5)))\n    (set (mem:BLK (match_dup 3))\n \t(mem:BLK (match_dup 4)))\n@@ -18667,7 +18685,7 @@\n \n (define_insn \"*rep_stosdi_rex64\"\n   [(set (match_operand:DI 1 \"register_operand\" \"=c\") (const_int 0))\n-   (set (match_operand:DI 0 \"register_operand\" \"=D\") \n+   (set (match_operand:DI 0 \"register_operand\" \"=D\")\n         (plus:DI (ashift:DI (match_operand:DI 4 \"register_operand\" \"1\")\n \t\t\t    (const_int 3))\n \t\t (match_operand:DI 3 \"register_operand\" \"0\")))\n@@ -18685,7 +18703,7 @@\n \n (define_insn \"*rep_stossi\"\n   [(set (match_operand:SI 1 \"register_operand\" \"=c\") (const_int 0))\n-   (set (match_operand:SI 0 \"register_operand\" \"=D\") \n+   (set (match_operand:SI 0 \"register_operand\" \"=D\")\n         (plus:SI (ashift:SI (match_operand:SI 4 \"register_operand\" \"1\")\n \t\t\t    (const_int 2))\n \t\t (match_operand:SI 3 \"register_operand\" \"0\")))\n@@ -18703,7 +18721,7 @@\n \n (define_insn \"*rep_stossi_rex64\"\n   [(set (match_operand:DI 1 \"register_operand\" \"=c\") (const_int 0))\n-   (set (match_operand:DI 0 \"register_operand\" \"=D\") \n+   (set (match_operand:DI 0 \"register_operand\" \"=D\")\n         (plus:DI (ashift:DI (match_operand:DI 4 \"register_operand\" \"1\")\n \t\t\t    (const_int 2))\n \t\t (match_operand:DI 3 \"register_operand\" \"0\")))\n@@ -18721,7 +18739,7 @@\n \n (define_insn \"*rep_stosqi\"\n   [(set (match_operand:SI 1 \"register_operand\" \"=c\") (const_int 0))\n-   (set (match_operand:SI 0 \"register_operand\" \"=D\") \n+   (set (match_operand:SI 0 \"register_operand\" \"=D\")\n         (plus:SI (match_operand:SI 3 \"register_operand\" \"0\")\n \t\t (match_operand:SI 4 \"register_operand\" \"1\")))\n    (set (mem:BLK (match_dup 3))\n@@ -18738,7 +18756,7 @@\n \n (define_insn \"*rep_stosqi_rex64\"\n   [(set (match_operand:DI 1 \"register_operand\" \"=c\") (const_int 0))\n-   (set (match_operand:DI 0 \"register_operand\" \"=D\") \n+   (set (match_operand:DI 0 \"register_operand\" \"=D\")\n         (plus:DI (match_operand:DI 3 \"register_operand\" \"0\")\n \t\t (match_operand:DI 4 \"register_operand\" \"1\")))\n    (set (mem:BLK (match_dup 3))\n@@ -19114,7 +19132,7 @@\n \n (define_insn \"*movdicc_c_rex64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(if_then_else:DI (match_operator 1 \"ix86_comparison_operator\" \n+\t(if_then_else:DI (match_operator 1 \"ix86_comparison_operator\"\n \t\t\t\t[(reg FLAGS_REG) (const_int 0)])\n \t\t      (match_operand:DI 2 \"nonimmediate_operand\" \"rm,0\")\n \t\t      (match_operand:DI 3 \"nonimmediate_operand\" \"0,rm\")))]\n@@ -19157,7 +19175,7 @@\n \n (define_insn \"*movsicc_noc\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(if_then_else:SI (match_operator 1 \"ix86_comparison_operator\" \n+\t(if_then_else:SI (match_operator 1 \"ix86_comparison_operator\"\n \t\t\t\t[(reg FLAGS_REG) (const_int 0)])\n \t\t      (match_operand:SI 2 \"nonimmediate_operand\" \"rm,0\")\n \t\t      (match_operand:SI 3 \"nonimmediate_operand\" \"0,rm\")))]\n@@ -19179,7 +19197,7 @@\n \n (define_insn \"*movhicc_noc\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n-\t(if_then_else:HI (match_operator 1 \"ix86_comparison_operator\" \n+\t(if_then_else:HI (match_operator 1 \"ix86_comparison_operator\"\n \t\t\t\t[(reg FLAGS_REG) (const_int 0)])\n \t\t      (match_operand:HI 2 \"nonimmediate_operand\" \"rm,0\")\n \t\t      (match_operand:HI 3 \"nonimmediate_operand\" \"0,rm\")))]\n@@ -19201,7 +19219,7 @@\n \n (define_insn_and_split \"*movqicc_noc\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n-\t(if_then_else:QI (match_operator 1 \"ix86_comparison_operator\" \n+\t(if_then_else:QI (match_operator 1 \"ix86_comparison_operator\"\n \t\t\t\t[(match_operand 4 \"flags_reg_operand\" \"\")\n \t\t\t\t (const_int 0)])\n \t\t      (match_operand:QI 2 \"register_operand\" \"r,0\")\n@@ -19229,7 +19247,7 @@\n \n (define_insn \"*movsfcc_1_387\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f,f,r,r\")\n-\t(if_then_else:SF (match_operator 1 \"fcmov_comparison_operator\" \n+\t(if_then_else:SF (match_operator 1 \"fcmov_comparison_operator\"\n \t\t\t\t[(reg FLAGS_REG) (const_int 0)])\n \t\t      (match_operand:SF 2 \"nonimmediate_operand\" \"f,0,rm,0\")\n \t\t      (match_operand:SF 3 \"nonimmediate_operand\" \"0,f,0,rm\")))]\n@@ -19253,7 +19271,7 @@\n \n (define_insn \"*movdfcc_1\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f,&r,&r\")\n-\t(if_then_else:DF (match_operator 1 \"fcmov_comparison_operator\" \n+\t(if_then_else:DF (match_operator 1 \"fcmov_comparison_operator\"\n \t\t\t\t[(reg FLAGS_REG) (const_int 0)])\n \t\t      (match_operand:DF 2 \"nonimmediate_operand\" \"f,0,rm,0\")\n \t\t      (match_operand:DF 3 \"nonimmediate_operand\" \"0,f,0,rm\")))]\n@@ -19269,7 +19287,7 @@\n \n (define_insn \"*movdfcc_1_rex64\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f,r,r\")\n-\t(if_then_else:DF (match_operator 1 \"fcmov_comparison_operator\" \n+\t(if_then_else:DF (match_operator 1 \"fcmov_comparison_operator\"\n \t\t\t\t[(reg FLAGS_REG) (const_int 0)])\n \t\t      (match_operand:DF 2 \"nonimmediate_operand\" \"f,0,rm,0\")\n \t\t      (match_operand:DF 3 \"nonimmediate_operand\" \"0,f,0,rm\")))]\n@@ -19285,7 +19303,7 @@\n \n (define_split\n   [(set (match_operand:DF 0 \"register_and_not_any_fp_reg_operand\" \"\")\n-\t(if_then_else:DF (match_operator 1 \"fcmov_comparison_operator\" \n+\t(if_then_else:DF (match_operator 1 \"fcmov_comparison_operator\"\n \t\t\t\t[(match_operand 4 \"flags_reg_operand\" \"\")\n \t\t\t\t (const_int 0)])\n \t\t      (match_operand:DF 2 \"nonimmediate_operand\" \"\")\n@@ -19313,7 +19331,7 @@\n \n (define_insn \"*movxfcc_1\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n-\t(if_then_else:XF (match_operator 1 \"fcmov_comparison_operator\" \n+\t(if_then_else:XF (match_operator 1 \"fcmov_comparison_operator\"\n \t\t\t\t[(reg FLAGS_REG) (const_int 0)])\n \t\t      (match_operand:XF 2 \"register_operand\" \"f,0\")\n \t\t      (match_operand:XF 3 \"register_operand\" \"0,f\")))]\n@@ -19475,7 +19493,7 @@\n \n ;; This pattern exists to put a dependency on all ebp-based memory accesses.\n ;; Otherwise there will be nothing to keep\n-;; \n+;;\n ;; [(set (reg ebp) (reg esp))]\n ;; [(set (reg esp) (plus (reg esp) (const_int -160000)))\n ;;  (clobber (eflags)]\n@@ -19667,7 +19685,7 @@\n       && INTVAL (operands[1]) < CHECK_STACK_LIMIT)\n     emit_insn (gen_subsi3 (stack_pointer_rtx, stack_pointer_rtx,\n \t\t\t   operands[1]));\n-  else \n+  else\n #endif\n     emit_insn (gen_allocate_stack_worker (copy_to_mode_reg (SImode,\n \t\t\t\t\t\t\t    operands[1])));\n@@ -19707,12 +19725,12 @@\n \t    (match_operand 2 \"aligned_operand\" \"\")]))\n    (clobber (reg:CC FLAGS_REG))]\n   \"! TARGET_PARTIAL_REG_STALL && reload_completed\n-   && ((GET_MODE (operands[0]) == HImode \n+   && ((GET_MODE (operands[0]) == HImode\n \t&& ((!optimize_size && !TARGET_FAST_PREFIX)\n             /* ??? next two lines just !satisfies_constraint_K (...) */\n \t    || GET_CODE (operands[2]) != CONST_INT\n \t    || satisfies_constraint_K (operands[2])))\n-       || (GET_MODE (operands[0]) == QImode \n+       || (GET_MODE (operands[0]) == QImode\n \t   && (TARGET_PROMOTE_QImode || optimize_size)))\"\n   [(parallel [(set (match_dup 0)\n \t\t   (match_op_dup 3 [(match_dup 1) (match_dup 2)]))\n@@ -19785,7 +19803,7 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"! TARGET_PARTIAL_REG_STALL && reload_completed\n    && (GET_MODE (operands[0]) == HImode\n-       || (GET_MODE (operands[0]) == QImode \n+       || (GET_MODE (operands[0]) == QImode\n \t   && (TARGET_PROMOTE_QImode || optimize_size)))\"\n   [(parallel [(set (match_dup 0)\n \t\t   (neg:SI (match_dup 1)))\n@@ -19798,29 +19816,29 @@\n \t(not (match_operand 1 \"register_operand\" \"\")))]\n   \"! TARGET_PARTIAL_REG_STALL && reload_completed\n    && (GET_MODE (operands[0]) == HImode\n-       || (GET_MODE (operands[0]) == QImode \n+       || (GET_MODE (operands[0]) == QImode\n \t   && (TARGET_PROMOTE_QImode || optimize_size)))\"\n   [(set (match_dup 0)\n \t(not:SI (match_dup 1)))]\n   \"operands[0] = gen_lowpart (SImode, operands[0]);\n    operands[1] = gen_lowpart (SImode, operands[1]);\")\n \n-(define_split \n+(define_split\n   [(set (match_operand 0 \"register_operand\" \"\")\n-\t(if_then_else (match_operator 1 \"comparison_operator\" \n+\t(if_then_else (match_operator 1 \"comparison_operator\"\n \t\t\t\t[(reg FLAGS_REG) (const_int 0)])\n \t\t      (match_operand 2 \"register_operand\" \"\")\n \t\t      (match_operand 3 \"register_operand\" \"\")))]\n   \"! TARGET_PARTIAL_REG_STALL && TARGET_CMOVE\n    && (GET_MODE (operands[0]) == HImode\n-       || (GET_MODE (operands[0]) == QImode \n+       || (GET_MODE (operands[0]) == QImode\n \t   && (TARGET_PROMOTE_QImode || optimize_size)))\"\n   [(set (match_dup 0)\n \t(if_then_else:SI (match_dup 1) (match_dup 2) (match_dup 3)))]\n   \"operands[0] = gen_lowpart (SImode, operands[0]);\n    operands[2] = gen_lowpart (SImode, operands[2]);\n    operands[3] = gen_lowpart (SImode, operands[3]);\")\n-\t\t\t\n+\n \f\n ;; RTL Peephole optimizations, run before sched2.  These primarily look to\n ;; transform a complex memory operation into two memory to register operations.\n@@ -19965,7 +19983,7 @@\n    (set (match_dup 0) (match_op_dup 1 [(match_dup 3) (const_int 0)]))]\n   \"\")\n \n-;; NOT is not pairable on Pentium, while XOR is, but one byte longer. \n+;; NOT is not pairable on Pentium, while XOR is, but one byte longer.\n ;; Don't split NOTs with a displacement operand, because resulting XOR\n ;; will not be pairable anyway.\n ;;\n@@ -19981,7 +19999,7 @@\n \t(not:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))]\n   \"!optimize_size\n    && peep2_regno_dead_p (0, FLAGS_REG)\n-   && ((TARGET_PENTIUM \n+   && ((TARGET_PENTIUM\n         && (GET_CODE (operands[0]) != MEM\n             || !memory_displacement_operand (operands[0], SImode)))\n        || (TARGET_K6 && long_memory_operand (operands[0], SImode)))\"\n@@ -19995,7 +20013,7 @@\n \t(not:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")))]\n   \"!optimize_size\n    && peep2_regno_dead_p (0, FLAGS_REG)\n-   && ((TARGET_PENTIUM \n+   && ((TARGET_PENTIUM\n         && (GET_CODE (operands[0]) != MEM\n             || !memory_displacement_operand (operands[0], HImode)))\n        || (TARGET_K6 && long_memory_operand (operands[0], HImode)))\"\n@@ -20009,7 +20027,7 @@\n \t(not:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))]\n   \"!optimize_size\n    && peep2_regno_dead_p (0, FLAGS_REG)\n-   && ((TARGET_PENTIUM \n+   && ((TARGET_PENTIUM\n         && (GET_CODE (operands[0]) != MEM\n             || !memory_displacement_operand (operands[0], QImode)))\n        || (TARGET_K6 && long_memory_operand (operands[0], QImode)))\"\n@@ -20090,7 +20108,7 @@\n \t      (set (zero_extract:SI (match_dup 2)\n \t\t\t\t    (const_int 8)\n \t\t\t\t    (const_int 8))\n-\t\t   (and:SI \n+\t\t   (and:SI\n \t\t     (zero_extract:SI\n \t\t       (match_dup 2)\n \t\t       (const_int 8)\n@@ -20192,7 +20210,7 @@\n   [(set (match_operand 0 \"register_operand\" \"\")\n \t(const_int -1))]\n   \"(GET_MODE (operands[0]) == HImode\n-    || GET_MODE (operands[0]) == SImode \n+    || GET_MODE (operands[0]) == SImode\n     || (GET_MODE (operands[0]) == DImode && TARGET_64BIT))\n    && (optimize_size || TARGET_PENTIUM)\n    && peep2_regno_dead_p (0, FLAGS_REG)\"\n@@ -20548,7 +20566,7 @@\n           (mult:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n                    (match_operand:SI 2 \"const_int_operand\" \"\")))\n      (clobber (reg:CC FLAGS_REG))])]\n-  \"!optimize_size \n+  \"!optimize_size\n    && (INTVAL (operands[2]) == 3\n        || INTVAL (operands[2]) == 5\n        || INTVAL (operands[2]) == 9)\"\n@@ -20580,7 +20598,7 @@\n                    (match_operand:DI 2 \"const_int_operand\" \"\")))\n      (clobber (reg:CC FLAGS_REG))])]\n   \"TARGET_64BIT\n-   && !optimize_size \n+   && !optimize_size\n    && (INTVAL (operands[2]) == 3\n        || INTVAL (operands[2]) == 5\n        || INTVAL (operands[2]) == 9)\"\n@@ -20711,7 +20729,7 @@\n    && ((!TARGET_PARTIAL_REG_STALL\n \t&& (GET_MODE (operands[0]) == QImode\n \t    || GET_MODE (operands[0]) == HImode))\n-       || GET_MODE (operands[0]) == SImode \n+       || GET_MODE (operands[0]) == SImode\n        || (TARGET_64BIT && GET_MODE (operands[0]) == DImode))\n    /* We reorder load and the shift.  */\n    && !rtx_equal_p (operands[1], operands[3])\n@@ -20860,7 +20878,7 @@\n   [(set_attr \"type\" \"callv\")])\n \f\n ;; We used to use \"int $5\", in honor of #BR which maps to interrupt vector 5.\n-;; That, however, is usually mapped by the OS to SIGSEGV, which is often \n+;; That, however, is usually mapped by the OS to SIGSEGV, which is often\n ;; caught for use by garbage collectors and the like.  Using an insn that\n ;; maps to SIGILL makes it more likely the program will rightfully die.\n ;; Keeping with tradition, \"6\" is in honor of #UD.\n@@ -20968,7 +20986,7 @@\n   int locality = INTVAL (operands[1]);\n   gcc_assert (locality >= 0 && locality <= 3);\n \n-  return patterns[locality];  \n+  return patterns[locality];\n }\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"memory\" \"none\")])\n@@ -20986,7 +21004,7 @@\n   int locality = INTVAL (operands[1]);\n   gcc_assert (locality >= 0 && locality <= 3);\n \n-  return patterns[locality];  \n+  return patterns[locality];\n }\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"memory\" \"none\")])"}, {"sha": "bc50ab6b74f83b077941794b59972486730c4de2", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6300f037d02324e91b3987acbbb16f727dd3c9b8/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6300f037d02324e91b3987acbbb16f727dd3c9b8/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=6300f037d02324e91b3987acbbb16f727dd3c9b8", "patch": "@@ -494,7 +494,7 @@ __ashrdi3 (DWtype u, word_type b)\n \f\n #ifdef L_bswapsi2\n UWtype\n-__bswapSI2 (UWtype u)\n+__bswapsi2 (UWtype u)\n {\n   return ((((u) & 0xff000000) >> 24)\n \t  | (((u) & 0x00ff0000) >>  8)\n@@ -504,7 +504,7 @@ __bswapSI2 (UWtype u)\n #endif\n #ifdef L_bswapdi2\n UDWtype\n-__bswapDI2 (UDWtype u)\n+__bswapdi2 (UDWtype u)\n {\n   return ((((u) & 0xff00000000000000ull) >> 56)\n \t  | (((u) & 0x00ff000000000000ull) >> 40)\n@@ -1886,7 +1886,7 @@ CONCAT3(__div,MODE,3) (MTYPE a, MTYPE b, MTYPE c, MTYPE d)\n {\n   MTYPE denom, ratio, x, y;\n \n-  /* ??? We can get better behavior from logarithmic scaling instead of \n+  /* ??? We can get better behavior from logarithmic scaling instead of\n      the division.  But that would mean starting to link libgcc against\n      libm.  We could implement something akin to ldexp/frexp as gcc builtins\n      fairly easily...  */"}, {"sha": "d15ab8d9dadfe5bfea8b4ee9fa8f52442441661a", "filename": "gcc/libgcc2.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6300f037d02324e91b3987acbbb16f727dd3c9b8/gcc%2Flibgcc2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6300f037d02324e91b3987acbbb16f727dd3c9b8/gcc%2Flibgcc2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.h?ref=6300f037d02324e91b3987acbbb16f727dd3c9b8", "patch": "@@ -304,13 +304,11 @@ typedef int word_type __attribute__ ((mode (__word__)));\n #define __ctzSI2\t__NW(ctz,2)\n #define __popcountSI2\t__NW(popcount,2)\n #define __paritySI2\t__NW(parity,2)\n-#define __bswapSI2\t__NW(bswap,2)\n #define __ffsDI2\t__NDW(ffs,2)\n #define __clzDI2\t__NDW(clz,2)\n #define __ctzDI2\t__NDW(ctz,2)\n #define __popcountDI2\t__NDW(popcount,2)\n #define __parityDI2\t__NDW(parity,2)\n-#define __bswapDI2\t__NDW(bswap,2)\n \n extern DWtype __muldi3 (DWtype, DWtype);\n extern DWtype __divdi3 (DWtype, DWtype);\n@@ -347,13 +345,13 @@ extern Wtype __addvSI3 (Wtype, Wtype);\n extern Wtype __subvSI3 (Wtype, Wtype);\n extern Wtype __mulvSI3 (Wtype, Wtype);\n extern Wtype __negvSI2 (Wtype);\n-extern UWtype __bswapSI2 (UWtype);\n+extern UWtype __bswapsi2 (UWtype);\n extern DWtype __absvDI2 (DWtype);\n extern DWtype __addvDI3 (DWtype, DWtype);\n extern DWtype __subvDI3 (DWtype, DWtype);\n extern DWtype __mulvDI3 (DWtype, DWtype);\n extern DWtype __negvDI2 (DWtype);\n-extern UDWtype __bswapDI2 (UDWtype);\n+extern UDWtype __bswapdi2 (UDWtype);\n \n #ifdef COMPAT_SIMODE_TRAPPING_ARITHMETIC\n extern SItype __absvsi2 (SItype);"}, {"sha": "4459c08a4727dbf1a3c15d395adab5fbb64481c7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6300f037d02324e91b3987acbbb16f727dd3c9b8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6300f037d02324e91b3987acbbb16f727dd3c9b8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6300f037d02324e91b3987acbbb16f727dd3c9b8", "patch": "@@ -1,3 +1,8 @@\n+2006-11-07  Eric Christopher  <echristo@apple.com>\n+\n+\t* gcc.target/i386/builtin-bswap-1.c: Rewrite for 64-bit.\n+\tTest using scan-assembler-not.\n+\n 2006-11-07  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/inline-17.c: New test.\n@@ -216,7 +221,7 @@\n \n \tPR fortran/29641\n \t* gfortran.dg/used_types_11.f90: New test.\n-\t\n+\n 2006-10-30  Dirk Mueller  <dmueller@suse.de>\n \n \t* g++.old-deja/g++.pt/eichin01a.C (main): Fix prototype.\n@@ -305,7 +310,7 @@\n 2006-10-28  Tobias Burnus  <burnus@net-b.de>\n \n \tPR libgfortran/24313\n-\t* gfortran.dg/csqrt_2.f: Remove xfail *-*-linux-gnu. \n+\t* gfortran.dg/csqrt_2.f: Remove xfail *-*-linux-gnu.\n \n 2006-10-29  Kazu Hirata  <kazu@codesourcery.com>\n \n@@ -332,9 +337,9 @@\n \n 2006-10-28  Tobias Burnus  <burnus@net-b.de>\n \n-\tPR fortran/28224 \n+\tPR fortran/28224\n \t* gfortran.dg/io_constraints_2.f90: Use -std=f95.\n-\t* gfortran.dg/namelist_internal.f90: New test. \n+\t* gfortran.dg/namelist_internal.f90: New test.\n \n 2006-10-28  Tobias Burnus  <burnus@net-b.de>\n \n@@ -358,7 +363,7 @@\n \t* gcc.dg/builtins-44.c: Likewise.\n \t* gcc.dg/builtins-45.c: Likewise.\n \t* gcc.dg/pr28796-2.c: Likewise.\n-\t* gcc.dg/unordered-3.c: Likewise.\t\n+\t* gcc.dg/unordered-3.c: Likewise.\n \n 2006-10-27  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n@@ -416,7 +421,7 @@\n \n \t* gcc.dg/torture/builtin-math-2.c: Add checks for asin, acos,\n \tacosh and atanh.\n-\t\n+\n \t* gcc.dg/torture/builtin-math-3.c (TESTIT): Append 'F' and 'L'\n \tfloating point modifiers to arguments passed to float and long\n \tdouble functions respectively.  Update all callers to use floating\n@@ -517,11 +522,11 @@\n \t* gcc.dg/torture/pr26898-2.c: Likewise.\n \n 2006-10-20  Lee Millward  <lee.millward@codesourcery.com>\n-        \n+\n         PR c++/28053\n         * g++.dg/parse/bitfield1.C: Adjust error markers.\n-        * g++.dg/parse/bitfield2.C: New test. \n-\t\n+        * g++.dg/parse/bitfield2.C: New test.\n+\n 2006-10-20  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* gcc.dg/tree-ssa/ivopts-2.c: Match final candidates line only.\n@@ -563,7 +568,7 @@\n \n \tPR c++/27952\n \t* g++.dg/inherit/virtual1.C: New test.\n-\t\n+\n 2006-10-17  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/28261\n@@ -573,7 +578,7 @@\n \n \tPR c++/29039\n \t* g++.dg/init/ctor8.C: New test.\n-\t\n+\n 2006-10-17  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/27270"}, {"sha": "9926e18188b9573aec6c44ac7dd7ba952f843fc5", "filename": "gcc/testsuite/gcc.target/i386/builtin-bswap-1.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6300f037d02324e91b3987acbbb16f727dd3c9b8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin-bswap-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6300f037d02324e91b3987acbbb16f727dd3c9b8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin-bswap-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin-bswap-1.c?ref=6300f037d02324e91b3987acbbb16f727dd3c9b8", "patch": "@@ -1,12 +1,16 @@\n /* { dg-do compile } */\n-/* { dg-options \"-march=i486\" } */\n-/* { dg-final { scan-assembler \"bswap\" } } */\n+/* { dg-options \"-march=nocona\" } */\n+/* { dg-final { scan-assembler-not \"builtin_bswap\" } } */\n \n-int foo (int a)\n+long foo (long a)\n {\n-  int b;\n+  long b;\n \n-  b = __builtin_bswap (a);\n+#if __LP64__\n+  b = __builtin_bswap64 (a);\n+#else\n+  b = __builtin_bswap32 (a);\n+#endif\n \n   return b;\n }"}]}