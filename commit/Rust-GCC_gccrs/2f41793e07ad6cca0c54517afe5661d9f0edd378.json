{"sha": "2f41793e07ad6cca0c54517afe5661d9f0edd378", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY0MTc5M2UwN2FkNmNjYTBjNTQ1MTdhZmU1NjYxZDlmMGVkZDM3OA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-06-11T23:57:10Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-06-11T23:57:10Z"}, "message": "* i386.md (addqi_1_slp, subqi_1_slp\n\t(andqi_ext0, testqi_ext0): Remove unnecesary check.\n\t(addhi*, addqi*): Simplify \"dec\" condition.\n\t(testsi to testqi splitters): Remove TARGET_PROMOTE_QImode check.\n\t(and, or, xor to QImode splitters): New.\n\t(iorqi_ext*): New.\n\t(xorqi_ext_0): New.\n\t(xorqi_ext_1): Rename to xorqi_ext_2; bring to sync with and versions.\n\t(andqi_ext_1_rex64): New.\n\t(ashrqi*_slp): New.\n\t(ashlqi*_slp): New.\n\t(lshlqi*_slp): New.\n\t(rotrqi3*_slp): New.\n\t(rotlqi3*_slp): New.\n\nFrom-SVN: r54537", "tree": {"sha": "1059c67a38e83315d1ed11b1299d7b1117f69465", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1059c67a38e83315d1ed11b1299d7b1117f69465"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f41793e07ad6cca0c54517afe5661d9f0edd378", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f41793e07ad6cca0c54517afe5661d9f0edd378", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f41793e07ad6cca0c54517afe5661d9f0edd378", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f41793e07ad6cca0c54517afe5661d9f0edd378/comments", "author": null, "committer": null, "parents": [{"sha": "c8eb2bc070962e4f48f8382abf9a857dc8947323", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8eb2bc070962e4f48f8382abf9a857dc8947323", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8eb2bc070962e4f48f8382abf9a857dc8947323"}], "stats": {"total": 484, "additions": 446, "deletions": 38}, "files": [{"sha": "d5f7f831a1ffd0b36d756f579242d5bb29206765", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f41793e07ad6cca0c54517afe5661d9f0edd378/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f41793e07ad6cca0c54517afe5661d9f0edd378/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f41793e07ad6cca0c54517afe5661d9f0edd378", "patch": "@@ -1,3 +1,20 @@\n+Wed Jun 12 01:50:28 CEST 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.md (addqi_1_slp, subqi_1_slp\n+\t(andqi_ext0, testqi_ext0): Remove unnecesary check.\n+\t(addhi*, addqi*): Simplify \"dec\" condition.\n+\t(testsi to testqi splitters): Remove TARGET_PROMOTE_QImode check.\n+\t(and, or, xor to QImode splitters): New.\n+\t(iorqi_ext*): New.\n+\t(xorqi_ext_0): New.\n+\t(xorqi_ext_1): Rename to xorqi_ext_2; bring to sync with and versions.\n+\t(andqi_ext_1_rex64): New.\n+\t(ashrqi*_slp): New.\n+\t(ashlqi*_slp): New.\n+\t(lshlqi*_slp): New.\n+\t(rotrqi3*_slp): New.\n+\t(rotlqi3*_slp): New.\n+\n 2002-06-11  Geoffrey Keating  <geoffk@redhat.com>\n \n \t* config.gcc (powerpc*-*-*, rs6000-*-*-*): Don't bother including"}, {"sha": "df0f11707ea444b5759701196989bb1dcda0b181", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 429, "deletions": 38, "changes": 467, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f41793e07ad6cca0c54517afe5661d9f0edd378/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f41793e07ad6cca0c54517afe5661d9f0edd378/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=2f41793e07ad6cca0c54517afe5661d9f0edd378", "patch": "@@ -5705,9 +5705,7 @@\n     case TYPE_INCDEC:\n       if (operands[2] == const1_rtx)\n \treturn \"inc{w}\\t%0\";\n-      else if (operands[2] == constm1_rtx\n-\t       || (GET_CODE (operands[2]) == CONST_INT\n-\t\t   && INTVAL (operands[2]) == 65535))\n+      else if (operands[2] == constm1_rtx)\n \treturn \"dec{w}\\t%0\";\n       abort();\n \n@@ -5746,9 +5744,7 @@\n     case TYPE_INCDEC:\n       if (operands[2] == const1_rtx)\n \treturn \"inc{w}\\t%0\";\n-      else if (operands[2] == constm1_rtx\n-\t       || (GET_CODE (operands[2]) == CONST_INT\n-\t\t   && INTVAL (operands[2]) == 65535))\n+      else if (operands[2] == constm1_rtx)\n \treturn \"dec{w}\\t%0\";\n       abort();\n \n@@ -5788,9 +5784,7 @@\n     case TYPE_INCDEC:\n       if (operands[2] == const1_rtx)\n \treturn \"inc{w}\\t%0\";\n-      else if (operands[2] == constm1_rtx\n-\t       || (GET_CODE (operands[2]) == CONST_INT\n-\t\t   && INTVAL (operands[2]) == 65535))\n+      else if (operands[2] == constm1_rtx)\n \treturn \"dec{w}\\t%0\";\n       abort();\n \n@@ -5827,9 +5821,7 @@\n     case TYPE_INCDEC:\n       if (operands[2] == const1_rtx)\n \treturn \"inc{w}\\t%0\";\n-      else if (operands[2] == constm1_rtx\n-\t       || (GET_CODE (operands[2]) == CONST_INT\n-\t\t   && INTVAL (operands[2]) == 65535))\n+      else if (operands[2] == constm1_rtx)\n \treturn \"dec{w}\\t%0\";\n       abort();\n \n@@ -5865,9 +5857,7 @@\n   switch (get_attr_type (insn))\n     {\n     case TYPE_INCDEC:\n-      if (operands[2] == constm1_rtx\n-\t  || (GET_CODE (operands[2]) == CONST_INT\n-\t      && INTVAL (operands[2]) == 65535))\n+      if (operands[2] == constm1_rtx)\n         return \"inc{w}\\t%0\";\n       else if (operands[2] == const1_rtx)\n         return \"dec{w}\\t%0\";\n@@ -5909,9 +5899,7 @@\n     case TYPE_INCDEC:\n       if (operands[2] == const1_rtx)\n \treturn \"inc{w}\\t%0\";\n-      else if (operands[2] == constm1_rtx\n-\t       || (GET_CODE (operands[2]) == CONST_INT\n-\t\t   && INTVAL (operands[2]) == 65535))\n+      else if (operands[2] == constm1_rtx)\n \treturn \"dec{w}\\t%0\";\n       abort();\n \n@@ -5960,9 +5948,7 @@\n     case TYPE_INCDEC:\n       if (operands[2] == const1_rtx)\n \treturn widen ? \"inc{l}\\t%k0\" : \"inc{b}\\t%0\";\n-      else if (operands[2] == constm1_rtx\n-\t       || (GET_CODE (operands[2]) == CONST_INT\n-\t\t   && INTVAL (operands[2]) == 255))\n+      else if (operands[2] == constm1_rtx)\n \treturn widen ? \"dec{l}\\t%k0\" : \"dec{b}\\t%0\";\n       abort();\n \n@@ -6008,9 +5994,7 @@\n     case TYPE_INCDEC:\n       if (operands[2] == const1_rtx)\n \treturn widen ? \"inc{l}\\t%k0\" : \"inc{b}\\t%0\";\n-      else if (operands[2] == constm1_rtx\n-\t       || (GET_CODE (operands[2]) == CONST_INT\n-\t\t   && INTVAL (operands[2]) == 255))\n+      else if (operands[2] == constm1_rtx)\n \treturn widen ? \"dec{l}\\t%k0\" : \"dec{b}\\t%0\";\n       abort();\n \n@@ -6040,6 +6024,40 @@\n \t(const_string \"alu\")))\n    (set_attr \"mode\" \"QI,QI,SI\")])\n \n+(define_insn \"*addqi_1_slp\"\n+  [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm,q\"))\n+\t(plus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0\")\n+\t\t (match_operand:QI 2 \"general_operand\" \"qn,qnm\")))\n+   (clobber (reg:CC 17))]\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n+   && ix86_binary_operator_ok (PLUS, QImode, operands)\"\n+{\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_INCDEC:\n+      if (operands[2] == const1_rtx)\n+\treturn \"inc{b}\\t%0\";\n+      else if (operands[2] == constm1_rtx)\n+\treturn \"dec{b}\\t%0\";\n+      abort();\n+\n+    default:\n+      /* Make things pretty and `subl $4,%eax' rather than `addl $-4, %eax'.  */\n+      if (GET_CODE (operands[2]) == CONST_INT\n+\t  && INTVAL (operands[2]) < 0)\n+\t{\n+\t  operands[2] = GEN_INT (-INTVAL (operands[2]));\n+\t  return \"sub{b}\\t{%2, %0|%0, %2}\";\n+\t}\n+      return \"add{b}\\t{%2, %0|%0, %2}\";\n+    }\n+}\n+  [(set (attr \"type\")\n+     (if_then_else (match_operand:QI 2 \"incdec_operand\" \"\")\n+\t(const_string \"incdec\")\n+\t(const_string \"alu\")))\n+   (set_attr \"mode\" \"QI\")])\n+\n (define_insn \"*addqi_2\"\n   [(set (reg 17)\n \t(compare\n@@ -6571,6 +6589,17 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"QI\")])\n \n+(define_insn \"*subqi_1_slp\"\n+  [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm,q\"))\n+\t(minus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")\n+\t\t  (match_operand:QI 2 \"general_operand\" \"qn,qmn\")))\n+   (clobber (reg:CC 17))]\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n+   && ix86_binary_operator_ok (MINUS, QImode, operands)\"\n+  \"sub{b}\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"mode\" \"QI\")])\n+\n (define_insn \"*subqi_2\"\n   [(set (reg 17)\n \t(compare\n@@ -7567,8 +7596,7 @@\n \t      (const_int 8))\n \t    (match_operand 1 \"const_int_operand\" \"n\"))\n \t  (const_int 0)))]\n-  \"(unsigned HOST_WIDE_INT) INTVAL (operands[1]) <= 0xff\n-   && ix86_match_ccmode (insn, CCNOmode)\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\"\n   \"test{b}\\t{%1, %h0|%h0, %1}\"\n   [(set_attr \"type\" \"test\")\n    (set_attr \"mode\" \"QI\")\n@@ -7720,8 +7748,7 @@\n \t  (and (match_operand 0 \"register_operand\" \"\")\n \t       (match_operand 1 \"const_int_operand\" \"\"))\n \t  (const_int 0)))]\n-   \"(!TARGET_PROMOTE_QImode || optimize_size)\n-    && reload_completed\n+   \"reload_completed\n     && QI_REG_P (operands[0])\n     && ((ix86_match_ccmode (insn, CCZmode)\n     \t && !(INTVAL (operands[1]) & ~(255 << 8)))\n@@ -7742,8 +7769,7 @@\n \t  (and (match_operand 0 \"nonimmediate_operand\" \"\")\n \t       (match_operand 1 \"const_int_operand\" \"\"))\n \t  (const_int 0)))]\n-   \"(!TARGET_PROMOTE_QImode || optimize_size)\n-    && reload_completed\n+   \"reload_completed\n     && (!REG_P (operands[0]) || ANY_QI_REG_P (operands[0]))\n     && ((ix86_match_ccmode (insn, CCZmode)\n \t && !(INTVAL (operands[1]) & ~255))\n@@ -8027,7 +8053,7 @@\n \t(and:QI (match_dup 0)\n \t\t(match_operand:QI 1 \"general_operand\" \"qi,qmi\")))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"! TARGET_PARTIAL_REG_STALL || optimize_size\"\n   \"and{b}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"mode\" \"QI\")])\n@@ -8063,7 +8089,8 @@\n \t\t (const_int 0)))\n    (set (strict_low_part (match_dup 0))\n \t(and:QI (match_dup 0) (match_dup 1)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\"\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n+   && ix86_match_ccmode (insn, CCNOmode)\"\n   \"and{b}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"mode\" \"QI\")])\n@@ -8083,7 +8110,7 @@\n \t    (const_int 8))\n \t  (match_operand 2 \"const_int_operand\" \"n\")))\n    (clobber (reg:CC 17))]\n-  \"(unsigned HOST_WIDE_INT)INTVAL (operands[2]) <= 0xff\"\n+  \"\"\n   \"and{b}\\t{%2, %h0|%h0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"length_immediate\" \"1\")\n@@ -8111,8 +8138,7 @@\n \t    (const_int 8)\n \t    (const_int 8))\n \t  (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n-   && (unsigned HOST_WIDE_INT)INTVAL (operands[2]) <= 0xff\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\"\n   \"and{b}\\t{%2, %h0|%h0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"length_immediate\" \"1\")\n@@ -8173,6 +8199,51 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"length_immediate\" \"0\")\n    (set_attr \"mode\" \"QI\")])\n+\n+;; Convert wide AND instructions with immediate operand to shorter QImode\n+;; equivalents when possible.\n+;; Don't do the splitting with memory operands, since it intoduces risc\n+;; of memory mismatch stalls.  We may want to do the splitting for optimizing\n+;; for size, but that can (should?) be handled by generic code instead.\n+(define_split\n+  [(set (match_operand 0 \"register_operand\" \"\")\n+\t(and (match_operand 1 \"register_operand\" \"\")\n+\t     (match_operand 2 \"const_int_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+   \"reload_completed\n+    && QI_REG_P (operands[0])\n+    && (!TARGET_PARTIAL_REG_STALL || optimize_size)\n+    && !(~INTVAL (operands[2]) & ~(255 << 8))\n+    && GET_MODE (operands[0]) != QImode\"\n+  [(parallel [(set (zero_extract:SI (match_dup 0) (const_int 8) (const_int 8))\n+\t\t   (and:SI (zero_extract:SI (match_dup 1)\n+\t\t\t\t\t    (const_int 8) (const_int 8))\n+\t\t\t   (match_dup 2)))\n+\t      (clobber (reg:CC 17))])]\n+  \"operands[0] = gen_lowpart (SImode, operands[0]);\n+   operands[1] = gen_lowpart (SImode, operands[1]);\n+   operands[2] = gen_int_mode ((INTVAL (operands[2]) >> 8) & 0xff, SImode);\")\n+\n+;; Since AND can be encoded with sign extended immediate, this is only\n+;; profitable when 7th bit is not set.\n+(define_split\n+  [(set (match_operand 0 \"register_operand\" \"\")\n+\t(and (match_operand 1 \"general_operand\" \"\")\n+\t     (match_operand 2 \"const_int_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+   \"reload_completed\n+    && ANY_QI_REG_P (operands[0])\n+    && (!TARGET_PARTIAL_REG_STALL || optimize_size)\n+    && !(~INTVAL (operands[2]) & ~255)\n+    && !(INTVAL (operands[2]) & 128)\n+    && GET_MODE (operands[0]) != QImode\"\n+  [(parallel [(set (strict_low_part (match_dup 0))\n+\t\t   (and:QI (match_dup 1)\n+\t\t\t   (match_dup 2)))\n+\t      (clobber (reg:CC 17))])]\n+  \"operands[0] = gen_lowpart (QImode, operands[0]);\n+   operands[1] = gen_lowpart (QImode, operands[1]);\n+   operands[2] = gen_lowpart (QImode, operands[2]);\")\n \f\n ;; Logical inclusive OR instructions\n \n@@ -8389,7 +8460,7 @@\n \t(ior:QI (match_dup 0)\n \t\t(match_operand:QI 1 \"general_operand\" \"qmi,qi\")))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"! TARGET_PARTIAL_REG_STALL || optimize_size\"\n   \"or{b}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"mode\" \"QI\")])\n@@ -8414,7 +8485,8 @@\n \t\t (const_int 0)))\n    (set (strict_low_part (match_dup 0))\n \t(ior:QI (match_dup 0) (match_dup 1)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\"\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n+   && ix86_match_ccmode (insn, CCNOmode)\"\n   \"or{b}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"mode\" \"QI\")])\n@@ -8431,6 +8503,118 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"QI\")])\n \n+(define_insn \"iorqi_ext_0\"\n+  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n+\t\t\t (const_int 8)\n+\t\t\t (const_int 8))\n+\t(ior:SI \n+\t  (zero_extract:SI\n+\t    (match_operand 1 \"ext_register_operand\" \"0\")\n+\t    (const_int 8)\n+\t    (const_int 8))\n+\t  (match_operand 2 \"const_int_operand\" \"n\")))\n+   (clobber (reg:CC 17))]\n+  \"(!TARGET_PARTIAL_REG_STALL || optimize_size)\"\n+  \"or{b}\\t{%2, %h0|%h0, %2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"mode\" \"QI\")])\n+\n+(define_insn \"*iorqi_ext_1\"\n+  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n+\t\t\t (const_int 8)\n+\t\t\t (const_int 8))\n+\t(ior:SI \n+\t  (zero_extract:SI\n+\t    (match_operand 1 \"ext_register_operand\" \"0\")\n+\t    (const_int 8)\n+\t    (const_int 8))\n+\t  (zero_extend:SI\n+\t    (match_operand:QI 2 \"general_operand\" \"Qm\"))))\n+   (clobber (reg:CC 17))]\n+  \"!TARGET_64BIT\n+   && (!TARGET_PARTIAL_REG_STALL || optimize_size)\"\n+  \"or{b}\\t{%2, %h0|%h0, %2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"QI\")])\n+\n+(define_insn \"*iorqi_ext_1_rex64\"\n+  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n+\t\t\t (const_int 8)\n+\t\t\t (const_int 8))\n+\t(ior:SI \n+\t  (zero_extract:SI\n+\t    (match_operand 1 \"ext_register_operand\" \"0\")\n+\t    (const_int 8)\n+\t    (const_int 8))\n+\t  (zero_extend:SI\n+\t    (match_operand 2 \"ext_register_operand\" \"Q\"))))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_64BIT\n+   && (!TARGET_PARTIAL_REG_STALL || optimize_size)\"\n+  \"or{b}\\t{%2, %h0|%h0, %2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"QI\")])\n+\n+(define_insn \"*iorqi_ext_2\"\n+  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n+\t\t\t (const_int 8)\n+\t\t\t (const_int 8))\n+\t(ior:SI \n+\t  (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"0\")\n+\t  \t\t   (const_int 8)\n+\t\t\t   (const_int 8))\n+\t  (zero_extract:SI (match_operand 2 \"ext_register_operand\" \"Q\")\n+\t  \t\t   (const_int 8)\n+\t\t\t   (const_int 8))))\n+   (clobber (reg:CC 17))]\n+  \"(!TARGET_PARTIAL_REG_STALL || optimize_size)\"\n+  \"ior{b}\\t{%h2, %h0|%h0, %h2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"QI\")])\n+\n+(define_split\n+  [(set (match_operand 0 \"register_operand\" \"\")\n+\t(ior (match_operand 1 \"register_operand\" \"\")\n+\t     (match_operand 2 \"const_int_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+   \"reload_completed\n+    && QI_REG_P (operands[0])\n+    && (!TARGET_PARTIAL_REG_STALL || optimize_size)\n+    && !(INTVAL (operands[2]) & ~(255 << 8))\n+    && GET_MODE (operands[0]) != QImode\"\n+  [(parallel [(set (zero_extract:SI (match_dup 0) (const_int 8) (const_int 8))\n+\t\t   (ior:SI (zero_extract:SI (match_dup 1)\n+\t\t\t\t\t    (const_int 8) (const_int 8))\n+\t\t\t   (match_dup 2)))\n+\t      (clobber (reg:CC 17))])]\n+  \"operands[0] = gen_lowpart (SImode, operands[0]);\n+   operands[1] = gen_lowpart (SImode, operands[1]);\n+   operands[2] = gen_int_mode ((INTVAL (operands[2]) >> 8) & 0xff, SImode);\")\n+\n+;; Since OR can be encoded with sign extended immediate, this is only\n+;; profitable when 7th bit is set.\n+(define_split\n+  [(set (match_operand 0 \"register_operand\" \"\")\n+\t(ior (match_operand 1 \"general_operand\" \"\")\n+\t     (match_operand 2 \"const_int_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+   \"reload_completed\n+    && ANY_QI_REG_P (operands[0])\n+    && (!TARGET_PARTIAL_REG_STALL || optimize_size)\n+    && !(INTVAL (operands[2]) & ~255)\n+    && (INTVAL (operands[2]) & 128)\n+    && GET_MODE (operands[0]) != QImode\"\n+  [(parallel [(set (strict_low_part (match_dup 0))\n+\t\t   (ior:QI (match_dup 1)\n+\t\t\t   (match_dup 2)))\n+\t      (clobber (reg:CC 17))])]\n+  \"operands[0] = gen_lowpart (QImode, operands[0]);\n+   operands[1] = gen_lowpart (QImode, operands[1]);\n+   operands[2] = gen_lowpart (QImode, operands[2]);\")\n \f\n ;; Logical XOR instructions\n \n@@ -8646,7 +8830,62 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"QI,QI,SI\")])\n \n+(define_insn \"xorqi_ext_0\"\n+  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n+\t\t\t (const_int 8)\n+\t\t\t (const_int 8))\n+\t(xor:SI \n+\t  (zero_extract:SI\n+\t    (match_operand 1 \"ext_register_operand\" \"0\")\n+\t    (const_int 8)\n+\t    (const_int 8))\n+\t  (match_operand 2 \"const_int_operand\" \"n\")))\n+   (clobber (reg:CC 17))]\n+  \"(!TARGET_PARTIAL_REG_STALL || optimize_size)\"\n+  \"xor{b}\\t{%2, %h0|%h0, %2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"mode\" \"QI\")])\n+\n (define_insn \"*xorqi_ext_1\"\n+  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n+\t\t\t (const_int 8)\n+\t\t\t (const_int 8))\n+\t(xor:SI \n+\t  (zero_extract:SI\n+\t    (match_operand 1 \"ext_register_operand\" \"0\")\n+\t    (const_int 8)\n+\t    (const_int 8))\n+\t  (zero_extend:SI\n+\t    (match_operand:QI 2 \"general_operand\" \"Qm\"))))\n+   (clobber (reg:CC 17))]\n+  \"!TARGET_64BIT\n+   && (!TARGET_PARTIAL_REG_STALL || optimize_size)\"\n+  \"xor{b}\\t{%2, %h0|%h0, %2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"QI\")])\n+\n+(define_insn \"*xorqi_ext_1_rex64\"\n+  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n+\t\t\t (const_int 8)\n+\t\t\t (const_int 8))\n+\t(xor:SI \n+\t  (zero_extract:SI\n+\t    (match_operand 1 \"ext_register_operand\" \"0\")\n+\t    (const_int 8)\n+\t    (const_int 8))\n+\t  (zero_extend:SI\n+\t    (match_operand 2 \"ext_register_operand\" \"Q\"))))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_64BIT\n+   && (!TARGET_PARTIAL_REG_STALL || optimize_size)\"\n+  \"xor{b}\\t{%2, %h0|%h0, %2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"QI\")])\n+\n+(define_insn \"*xorqi_ext_2\"\n   [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n@@ -8658,7 +8897,7 @@\n \t  \t\t   (const_int 8)\n \t\t\t   (const_int 8))))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"(!TARGET_PARTIAL_REG_STALL || optimize_size)\"\n   \"xor{b}\\t{%h2, %h0|%h0, %h2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"length_immediate\" \"0\")\n@@ -8752,6 +8991,46 @@\n \t    (match_dup 2)))])]\n   \"\"\n   \"\")\n+\n+(define_split\n+  [(set (match_operand 0 \"register_operand\" \"\")\n+\t(xor (match_operand 1 \"register_operand\" \"\")\n+\t     (match_operand 2 \"const_int_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+   \"reload_completed\n+    && QI_REG_P (operands[0])\n+    && (!TARGET_PARTIAL_REG_STALL || optimize_size)\n+    && !(INTVAL (operands[2]) & ~(255 << 8))\n+    && GET_MODE (operands[0]) != QImode\"\n+  [(parallel [(set (zero_extract:SI (match_dup 0) (const_int 8) (const_int 8))\n+\t\t   (xor:SI (zero_extract:SI (match_dup 1)\n+\t\t\t\t\t    (const_int 8) (const_int 8))\n+\t\t\t   (match_dup 2)))\n+\t      (clobber (reg:CC 17))])]\n+  \"operands[0] = gen_lowpart (SImode, operands[0]);\n+   operands[1] = gen_lowpart (SImode, operands[1]);\n+   operands[2] = gen_int_mode ((INTVAL (operands[2]) >> 8) & 0xff, SImode);\")\n+\n+;; Since XOR can be encoded with sign extended immediate, this is only\n+;; profitable when 7th bit is set.\n+(define_split\n+  [(set (match_operand 0 \"register_operand\" \"\")\n+\t(xor (match_operand 1 \"general_operand\" \"\")\n+\t     (match_operand 2 \"const_int_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+   \"reload_completed\n+    && ANY_QI_REG_P (operands[0])\n+    && (!TARGET_PARTIAL_REG_STALL || optimize_size)\n+    && !(INTVAL (operands[2]) & ~255)\n+    && (INTVAL (operands[2]) & 128)\n+    && GET_MODE (operands[0]) != QImode\"\n+  [(parallel [(set (strict_low_part (match_dup 0))\n+\t\t   (xor:QI (match_dup 1)\n+\t\t\t   (match_dup 2)))\n+\t      (clobber (reg:CC 17))])]\n+  \"operands[0] = gen_lowpart (QImode, operands[0]);\n+   operands[1] = gen_lowpart (QImode, operands[1]);\n+   operands[2] = gen_lowpart (QImode, operands[2]);\")\n \f\n ;; Negation instructions\n \n@@ -11175,6 +11454,21 @@\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n+(define_insn \"*ashrqi3_1_one_bit_slp\"\n+  [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm\"))\n+\t(ashiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n+\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\n+   && (! TARGET_PARTIAL_REG_STALL || optimize_size)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+  \"sar{b}\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set (attr \"length\") \n+     (if_then_else (match_operand 0 \"register_operand\" \"\") \n+\t(const_string \"2\")\n+\t(const_string \"*\")))])\n+\n (define_insn \"*ashrqi3_1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,qm\")\n \t(ashiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")\n@@ -11187,6 +11481,19 @@\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"QI\")])\n \n+(define_insn \"*ashrqi3_1_slp\"\n+  [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm,qm\"))\n+\t(ashiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")\n+\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"I,c\")))\n+   (clobber (reg:CC 17))]\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n+   && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n+  \"@\n+   sar{b}\\t{%2, %0|%0, %2}\n+   sar{b}\\t{%b2, %0|%0, %b2}\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"mode\" \"QI\")])\n+\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n@@ -11566,6 +11873,21 @@\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n+(define_insn \"*lshrqi3_1_one_bit_slp\"\n+  [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm\"))\n+\t(lshiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n+\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n+   && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+  \"shr{b}\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set (attr \"length\") \n+     (if_then_else (match_operand 0 \"register_operand\" \"\") \n+\t(const_string \"2\")\n+\t(const_string \"*\")))])\n+\n (define_insn \"*lshrqi3_1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,qm\")\n \t(lshiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")\n@@ -11578,6 +11900,19 @@\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"QI\")])\n \n+(define_insn \"*lshrqi3_1_slp\"\n+  [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm,qm\"))\n+\t(lshiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")\n+\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"I,c\")))\n+   (clobber (reg:CC 17))]\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n+   && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\"\n+  \"@\n+   shr{b}\\t{%2, %0|%0, %2}\n+   shr{b}\\t{%b2, %0|%0, %b2}\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"mode\" \"QI\")])\n+\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n@@ -11753,6 +12088,21 @@\n   \"TARGET_QIMODE_MATH\"\n   \"ix86_expand_binary_operator (ROTATE, QImode, operands); DONE;\")\n \n+(define_insn \"*rotlqi3_1_one_bit_slp\"\n+  [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm\"))\n+\t(rotate:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n+\t\t   (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n+   && ix86_binary_operator_ok (ROTATE, QImode, operands)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+  \"rol{b}\\t%0\"\n+  [(set_attr \"type\" \"rotate\")\n+   (set (attr \"length\") \n+     (if_then_else (match_operand 0 \"register_operand\" \"\") \n+\t(const_string \"2\")\n+\t(const_string \"*\")))])\n+\n (define_insn \"*rotlqi3_1_one_bit\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(rotate:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n@@ -11767,6 +12117,19 @@\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n+(define_insn \"*rotlqi3_1_slp\"\n+  [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm,qm\"))\n+\t(rotate:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")\n+\t\t   (match_operand:QI 2 \"nonmemory_operand\" \"I,c\")))\n+   (clobber (reg:CC 17))]\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n+   && ix86_binary_operator_ok (ROTATE, QImode, operands)\"\n+  \"@\n+   rol{b}\\t{%2, %0|%0, %2}\n+   rol{b}\\t{%b2, %0|%0, %b2}\"\n+  [(set_attr \"type\" \"rotate\")\n+   (set_attr \"mode\" \"QI\")])\n+\n (define_insn \"*rotlqi3_1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,qm\")\n \t(rotate:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")\n@@ -11931,6 +12294,21 @@\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n+(define_insn \"*rotrqi3_1_one_bit_slp\"\n+  [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm\"))\n+\t(rotatert:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n+\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n+   && ix86_binary_operator_ok (ROTATERT, QImode, operands)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+  \"ror{b}\\t%0\"\n+  [(set_attr \"type\" \"rotate\")\n+   (set (attr \"length\") \n+     (if_then_else (match_operand 0 \"register_operand\" \"\") \n+\t(const_string \"2\")\n+\t(const_string \"*\")))])\n+\n (define_insn \"*rotrqi3_1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,qm\")\n \t(rotatert:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")\n@@ -11942,6 +12320,19 @@\n    ror{b}\\t{%b2, %0|%0, %b2}\"\n   [(set_attr \"type\" \"rotate\")\n    (set_attr \"mode\" \"QI\")])\n+\n+(define_insn \"*rotrqi3_1_slp\"\n+  [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm,qm\"))\n+\t(rotatert:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")\n+\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"I,c\")))\n+   (clobber (reg:CC 17))]\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n+   && ix86_binary_operator_ok (ROTATERT, QImode, operands)\"\n+  \"@\n+   ror{b}\\t{%2, %0|%0, %2}\n+   ror{b}\\t{%b2, %0|%0, %b2}\"\n+  [(set_attr \"type\" \"rotate\")\n+   (set_attr \"mode\" \"QI\")])\n \f\n ;; Bit set / bit test instructions\n "}]}