{"sha": "436c4a210e8ff936063579dab3641632c06c8a7d", "node_id": "C_kwDOANBUbNoAKDQzNmM0YTIxMGU4ZmY5MzYwNjM1NzlkYWIzNjQxNjMyYzA2YzhhN2Q", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-10-17T07:10:03Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-10-21T09:27:27Z"}, "message": "Add 'gcc.dg/tree-ssa/pr107195-3.c' [PR107195]\n\n... to display optimization performed as of recent\ncommit r13-3217-gc4d15dddf6b9eacb36f535807ad2ee364af46e04\n\"[PR107195] Set range to zero when nonzero mask is 0\".\n\n\tPR tree-optimization/107195\n\tgcc/testsuite/\n\t* gcc.dg/tree-ssa/pr107195-3.c: New.", "tree": {"sha": "591f48d52e09164c663125bbfe317e4ce9c5d01e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/591f48d52e09164c663125bbfe317e4ce9c5d01e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/436c4a210e8ff936063579dab3641632c06c8a7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/436c4a210e8ff936063579dab3641632c06c8a7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/436c4a210e8ff936063579dab3641632c06c8a7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/436c4a210e8ff936063579dab3641632c06c8a7d/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09f9814dc02c161ed78604c6df70b19b596f7524", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09f9814dc02c161ed78604c6df70b19b596f7524", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09f9814dc02c161ed78604c6df70b19b596f7524"}], "stats": {"total": 112, "additions": 112, "deletions": 0}, "files": [{"sha": "eba4218b3c91decdd79d98ef2829b3bea75cab7c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr107195-3.c", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/436c4a210e8ff936063579dab3641632c06c8a7d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr107195-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/436c4a210e8ff936063579dab3641632c06c8a7d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr107195-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr107195-3.c?ref=436c4a210e8ff936063579dab3641632c06c8a7d", "patch": "@@ -0,0 +1,112 @@\n+/* Inspired by 'libgomp.oacc-c-c++-common/nvptx-sese-1.c'.  */\n+\n+/* { dg-additional-options -O1 } */\n+/* { dg-additional-options -fdump-tree-dom3-raw } */\n+\n+\n+extern int\n+__attribute__((const))\n+foo1 (int);\n+\n+int f1 (int r)\n+{\n+  if (foo1 (r)) /* If this first 'if' holds...  */\n+    r *= 2; /* ..., 'r' now has a zero-value lower-most bit...  */\n+\n+  if (r & 1) /* ..., so this second 'if' can never hold...  */\n+    { /* ..., so this is unreachable.  */\n+      /* In constrast, if the first 'if' does not hold ('foo1 (r) == 0'), the\n+\t second 'if' may hold, but we know ('foo1' being 'const') that\n+\t 'foo1 (r) == 0', so don't have to re-evaluate it here: */\n+      r += foo1 (r);\n+    }\n+\n+  return r;\n+}\n+/* Thus, if optimizing, we only ever expect one call of 'foo1'.\n+   { dg-final { scan-tree-dump-times {gimple_call <foo1,} 1 dom3 } } */\n+\n+\n+extern int\n+__attribute__((const))\n+foo2 (int);\n+\n+int f2 (int r)\n+{\n+  if (foo2 (r))\n+    r *= 8;\n+\n+  if (r & 7)\n+    r += foo2 (r);\n+\n+  return r;\n+}\n+/* { dg-final { scan-tree-dump-times {gimple_call <foo2,} 1 dom3 } } */\n+\n+\n+extern int\n+__attribute__((const))\n+foo3 (int);\n+\n+int f3 (int r)\n+{\n+  if (foo3 (r))\n+    r <<= 4;\n+\n+  if ((r & 64) && ((r & 8) || (r & 4) || (r & 2) || (r & 1)))\n+    r += foo3 (r);\n+\n+  return r;\n+}\n+/* { dg-final { scan-tree-dump-times {gimple_call <foo3,} 1 dom3 } } */\n+\n+\n+extern int\n+__attribute__((const))\n+foo4 (int);\n+\n+int f4 (int r)\n+{\n+  if (foo4 (r))\n+    r *= 8;\n+\n+  if ((r >> 1) & 2)\n+    r += foo4 (r);\n+\n+  return r;\n+}\n+/* { dg-final { scan-tree-dump-times {gimple_call <foo4,} 1 dom3 } } */\n+\n+\n+extern int\n+__attribute__((const))\n+foo5 (int);\n+\n+int f5 (int r) /* Works for both 'signed' and 'unsigned'.  */\n+{\n+  if (foo5 (r))\n+    r *= 2;\n+\n+  if ((r % 2) != 0)\n+    r += foo5 (r);\n+\n+  return r;\n+}\n+/* { dg-final { scan-tree-dump-times {gimple_call <foo5,} 1 dom3 } } */\n+\n+\n+extern int\n+__attribute__((const))\n+foo6 (int);\n+\n+int f6 (unsigned int r) /* 'unsigned' is important here.  */\n+{\n+  if (foo6 (r))\n+    r *= 2;\n+\n+  if ((r % 2) == 1)\n+    r += foo6 (r);\n+\n+  return r;\n+}\n+/* { dg-final { scan-tree-dump-times {gimple_call <foo6,} 1 dom3 } } */"}]}