{"sha": "16545b0a6745babc7ed872f27da205148574b2af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY1NDViMGE2NzQ1YmFiYzdlZDg3MmYyN2RhMjA1MTQ4NTc0YjJhZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-11-26T16:19:51Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-11-26T16:19:51Z"}, "message": "(truthvalue_conversion): Add declaration.\n\nFrom-SVN: r10585", "tree": {"sha": "ce3abff7592061259fe127e4fd7554d75c762db8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce3abff7592061259fe127e4fd7554d75c762db8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16545b0a6745babc7ed872f27da205148574b2af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16545b0a6745babc7ed872f27da205148574b2af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16545b0a6745babc7ed872f27da205148574b2af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16545b0a6745babc7ed872f27da205148574b2af/comments", "author": null, "committer": null, "parents": [{"sha": "576fad63427b970d3043ff08f5833b4acf53b001", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/576fad63427b970d3043ff08f5833b4acf53b001", "html_url": "https://github.com/Rust-GCC/gccrs/commit/576fad63427b970d3043ff08f5833b4acf53b001"}], "stats": {"total": 1, "additions": 1, "deletions": 0}, "files": [{"sha": "2d307a2af67fca9b5eb0ab8c44b23f849f819870", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16545b0a6745babc7ed872f27da205148574b2af/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16545b0a6745babc7ed872f27da205148574b2af/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=16545b0a6745babc7ed872f27da205148574b2af", "patch": "@@ -191,6 +191,7 @@ static rtx compare\t\tPROTO((tree, enum rtx_code, enum rtx_code));\n static rtx do_store_flag\tPROTO((tree, rtx, enum machine_mode, int));\n static tree defer_cleanups_to\tPROTO((tree));\n extern void (*interim_eh_hook)\tPROTO((tree));\n+extern tree truthvalue_conversion       PROTO((tree));\n \n /* Record for each mode whether we can move a register directly to or\n    from an object of that mode in memory.  If we can't, we won't try"}]}