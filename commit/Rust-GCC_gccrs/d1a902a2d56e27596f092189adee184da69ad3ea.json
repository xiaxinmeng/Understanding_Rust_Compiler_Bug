{"sha": "d1a902a2d56e27596f092189adee184da69ad3ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFhOTAyYTJkNTZlMjc1OTZmMDkyMTg5YWRlZTE4NGRhNjlhZDNlYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-05-30T15:09:40Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-05-30T15:09:40Z"}, "message": "re PR c++/60992 (ICE in tsubst_copy, at cp/pt.c:12637)\n\n\tPR c++/60992\n\t* pt.c (tsubst_init): Split out from...\n\t(tsubst_expr) [DECL_EXPR]: Here.\n\t(tsubst_copy) [VAR_DECL]: Use it.\n\t* semantics.c (finish_id_expression): Return the decl for static/const.\n\nFrom-SVN: r211084", "tree": {"sha": "1b58c907a8d9915d5c59be98bbf9e8aaebb3902f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b58c907a8d9915d5c59be98bbf9e8aaebb3902f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1a902a2d56e27596f092189adee184da69ad3ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1a902a2d56e27596f092189adee184da69ad3ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1a902a2d56e27596f092189adee184da69ad3ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1a902a2d56e27596f092189adee184da69ad3ea/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7480a39b770374d5355c60804dd8cc99a8a65a83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7480a39b770374d5355c60804dd8cc99a8a65a83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7480a39b770374d5355c60804dd8cc99a8a65a83"}], "stats": {"total": 104, "additions": 71, "deletions": 33}, "files": [{"sha": "b3138014f4486d91965ea17a88474f8e4ed0c6e5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1a902a2d56e27596f092189adee184da69ad3ea/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1a902a2d56e27596f092189adee184da69ad3ea/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d1a902a2d56e27596f092189adee184da69ad3ea", "patch": "@@ -1,3 +1,11 @@\n+2014-05-30  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/60992\n+\t* pt.c (tsubst_init): Split out from...\n+\t(tsubst_expr) [DECL_EXPR]: Here.\n+\t(tsubst_copy) [VAR_DECL]: Use it.\n+\t* semantics.c (finish_id_expression): Return the decl for static/const.\n+\n 2014-05-28  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/47202"}, {"sha": "a24e0443c9ffb014ef4c995ad89d46fe7b18af5a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 58, "deletions": 23, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1a902a2d56e27596f092189adee184da69ad3ea/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1a902a2d56e27596f092189adee184da69ad3ea/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=d1a902a2d56e27596f092189adee184da69ad3ea", "patch": "@@ -12513,6 +12513,37 @@ tsubst_qualified_id (tree qualified_id, tree args,\n   return expr;\n }\n \n+/* tsubst the initializer for a VAR_DECL.  INIT is the unsubstituted\n+   initializer, DECL is the substituted VAR_DECL.  Other arguments are as\n+   for tsubst.  */\n+\n+static tree\n+tsubst_init (tree init, tree decl, tree args,\n+\t     tsubst_flags_t complain, tree in_decl)\n+{\n+  if (!init)\n+    return NULL_TREE;\n+\n+  init = tsubst_expr (init, args, complain, in_decl, false);\n+\n+  if (!init)\n+    {\n+      /* If we had an initializer but it\n+\t instantiated to nothing,\n+\t value-initialize the object.  This will\n+\t only occur when the initializer was a\n+\t pack expansion where the parameter packs\n+\t used in that expansion were of length\n+\t zero.  */\n+      init = build_value_init (TREE_TYPE (decl),\n+\t\t\t       complain);\n+      if (TREE_CODE (init) == AGGR_INIT_EXPR)\n+\tinit = get_target_expr_sfinae (init, complain);\n+    }\n+\n+  return init;\n+}\n+\n /* Like tsubst, but deals with expressions.  This function just replaces\n    template parms; to finish processing the resultant expression, use\n    tsubst_copy_and_build or tsubst_expr.  */\n@@ -12670,11 +12701,34 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t\t     local static or constant.  Building a new VAR_DECL\n \t\t     should be OK in all those cases.  */\n \t\t  r = tsubst_decl (t, args, complain);\n-\t\t  if (decl_constant_var_p (r))\n-\t\t    /* A use of a local constant must decay to its value.  */\n-\t\t    return integral_constant_value (r);\n+\t\t  if (decl_maybe_constant_var_p (r))\n+\t\t    {\n+\t\t      /* We can't call cp_finish_decl, so handle the\n+\t\t\t initializer by hand.  */\n+\t\t      tree init = tsubst_init (DECL_INITIAL (t), r, args,\n+\t\t\t\t\t       complain, in_decl);\n+\t\t      if (!processing_template_decl)\n+\t\t\tinit = maybe_constant_init (init);\n+\t\t      if (processing_template_decl\n+\t\t\t  ? potential_constant_expression (init)\n+\t\t\t  : reduced_constant_expression_p (init))\n+\t\t\tDECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (r)\n+\t\t\t  = TREE_CONSTANT (r) = true;\n+\t\t      DECL_INITIAL (r) = init;\n+\t\t    }\n \t\t  gcc_assert (cp_unevaluated_operand || TREE_STATIC (r)\n+\t\t\t      || decl_constant_var_p (r)\n \t\t\t      || errorcount || sorrycount);\n+\t\t  if (!processing_template_decl)\n+\t\t    {\n+\t\t      if (TREE_STATIC (r))\n+\t\t\trest_of_decl_compilation (r, toplevel_bindings_p (),\n+\t\t\t\t\t\t  at_eof);\n+\t\t      else if (decl_constant_var_p (r))\n+\t\t\t/* A use of a local constant decays to its value.\n+\t\t\t   FIXME update for core DR 696.  */\n+\t\t\treturn integral_constant_value (r);\n+\t\t    }\n \t\t  return r;\n \t\t}\n \t    }\n@@ -13544,26 +13598,7 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \t\t\tinit = cp_fname_init (name, &TREE_TYPE (decl));\n \t\t      }\n \t\t    else\n-\t\t      {\n-\t\t\ttree t = RECUR (init);\n-\n-\t\t\tif (init && !t)\n-\t\t\t  {\n-\t\t\t    /* If we had an initializer but it\n-\t\t\t       instantiated to nothing,\n-\t\t\t       value-initialize the object.  This will\n-\t\t\t       only occur when the initializer was a\n-\t\t\t       pack expansion where the parameter packs\n-\t\t\t       used in that expansion were of length\n-\t\t\t       zero.  */\n-\t\t\t    init = build_value_init (TREE_TYPE (decl),\n-\t\t\t\t\t\t     complain);\n-\t\t\t    if (TREE_CODE (init) == AGGR_INIT_EXPR)\n-\t\t\t      init = get_target_expr_sfinae (init, complain);\n-\t\t\t  }\n-\t\t\telse\n-\t\t\t  init = t;\n-\t\t      }\n+\t\t      init = tsubst_init (init, decl, args, complain, in_decl);\n \n \t\t    if (VAR_P (decl))\n \t\t      const_init = (DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P"}, {"sha": "396a893bd57ea9039afdf5d976cd870867ee03de", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1a902a2d56e27596f092189adee184da69ad3ea/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1a902a2d56e27596f092189adee184da69ad3ea/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=d1a902a2d56e27596f092189adee184da69ad3ea", "patch": "@@ -3166,12 +3166,7 @@ finish_id_expression (tree id_expression,\n       else if (TREE_STATIC (decl)\n \t       /* It's not a use (3.2) if we're in an unevaluated context.  */\n \t       || cp_unevaluated_operand)\n-\t{\n-\t  if (processing_template_decl)\n-\t    /* For a use of an outer static/unevaluated var, return the id\n-\t       so that we'll look it up again in the instantiation.  */\n-\t    return id_expression;\n-\t}\n+\t/* OK */;\n       else\n \t{\n \t  tree context = DECL_CONTEXT (decl);\n@@ -3190,13 +3185,13 @@ finish_id_expression (tree id_expression,\n \t     the complexity of the problem\"\n \n \t     FIXME update for final resolution of core issue 696.  */\n-\t  if (decl_constant_var_p (decl))\n+\t  if (decl_maybe_constant_var_p (decl))\n \t    {\n \t      if (processing_template_decl)\n \t\t/* In a template, the constant value may not be in a usable\n-\t\t   form, so look it up again at instantiation time.  */\n-\t\treturn id_expression;\n-\t      else\n+\t\t   form, so wait until instantiation time.  */\n+\t\treturn decl;\n+\t      else if (decl_constant_var_p (decl))\n \t\treturn integral_constant_value (decl);\n \t    }\n "}]}