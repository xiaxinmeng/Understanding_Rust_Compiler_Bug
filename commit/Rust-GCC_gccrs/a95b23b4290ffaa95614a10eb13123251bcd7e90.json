{"sha": "a95b23b4290ffaa95614a10eb13123251bcd7e90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk1YjIzYjQyOTBmZmFhOTU2MTRhMTBlYjEzMTIzMjUxYmNkN2U5MA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2011-05-27T10:47:48Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2011-05-27T10:47:48Z"}, "message": "haifa-sched.c (sched_scan_info): Remove.\n\n\t* haifa-sched.c (sched_scan_info): Remove.\n\t(schedule_block): Call sched_extend_luids rather than sched_init_luids\n\twith NULL args.\n\t(extend_bb, init_bb, extend_insn, init_insn, init_insns_in_bb):\n\tRemove functions.\n\t(sched_scan): Remove.\n\t(sched_extend_luids): Renamed from luids_extend_insn and no longer\n\tstatic.  All callers changed.\n\t(sched_init_insn_luid): Renamed from luids_init_insn and no longer\n\tstatic.  All callers changed.\n\t(sched_init_luids): Remove all arguments except the first.  All\n\tcallers changed.  Don't use sched_scan.\n\t(haifa_init_h_i_d): Likewise.\n\t(haifa_init_insn): Call sched_extend_luids and sched_init_insn_luid\n\tmanually rather than using sched_init_luids.  Likewise with\n\textend_h_i_d, init_h_i_d and haifa_init_h_i_d.\n\t* sel-sched.c (sel_region_target_finish): Call sched_extend_luids\n\trather than sched_init_luids with NULL args.\n\t* sel-sched-ir.c (new_insns): Remove variable.\n\t(sched_scan): New static function, previously in haifa-sched.c.  Remove\n\tall arguments but the first two; all callers changed.\n\t(sel_init_new_insn): Call sched_extend_luids and sched_init_insn_luid\n\trather than sched_init_luids.\n\t(sel_init_bbs): Remove second argument.  All callers changed.\n\t(sel_add_bb): Call sched_extend_luids rather than sched_init_luids\n\twith NULL arguments.\n\t(create_insn_rtx_from_pattern): Likewise.\n\t* sel-sched-ir.h (sel_init_bbs): Adjust declaration.\n\t* sched-int.h (sched_init_luids, haifa_init_h_i_d): Likewise.\n\t(sched_init_insn_luid, sched_extend_luids): Declare.\n\t(sched_scan_info_def, sched_scan_info, sched_scan): Remove\n\tdeclarations.\n\nFrom-SVN: r174327", "tree": {"sha": "bd7ae2e68beab28e466d425df5b2ef2fcb55a8e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd7ae2e68beab28e466d425df5b2ef2fcb55a8e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a95b23b4290ffaa95614a10eb13123251bcd7e90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a95b23b4290ffaa95614a10eb13123251bcd7e90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a95b23b4290ffaa95614a10eb13123251bcd7e90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a95b23b4290ffaa95614a10eb13123251bcd7e90/comments", "author": null, "committer": null, "parents": [{"sha": "f8f972fc7e218a881005b41501692426c41d3a11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8f972fc7e218a881005b41501692426c41d3a11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8f972fc7e218a881005b41501692426c41d3a11"}], "stats": {"total": 307, "additions": 137, "deletions": 170}, "files": [{"sha": "957443583c8742807e0546c62545c718ba752d4f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a95b23b4290ffaa95614a10eb13123251bcd7e90/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a95b23b4290ffaa95614a10eb13123251bcd7e90/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a95b23b4290ffaa95614a10eb13123251bcd7e90", "patch": "@@ -1,3 +1,38 @@\n+2011-05-27  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* haifa-sched.c (sched_scan_info): Remove.\n+\t(schedule_block): Call sched_extend_luids rather than sched_init_luids\n+\twith NULL args.\n+\t(extend_bb, init_bb, extend_insn, init_insn, init_insns_in_bb):\n+\tRemove functions.\n+\t(sched_scan): Remove.\n+\t(sched_extend_luids): Renamed from luids_extend_insn and no longer\n+\tstatic.  All callers changed.\n+\t(sched_init_insn_luid): Renamed from luids_init_insn and no longer\n+\tstatic.  All callers changed.\n+\t(sched_init_luids): Remove all arguments except the first.  All\n+\tcallers changed.  Don't use sched_scan.\n+\t(haifa_init_h_i_d): Likewise.\n+\t(haifa_init_insn): Call sched_extend_luids and sched_init_insn_luid\n+\tmanually rather than using sched_init_luids.  Likewise with\n+\textend_h_i_d, init_h_i_d and haifa_init_h_i_d.\n+\t* sel-sched.c (sel_region_target_finish): Call sched_extend_luids\n+\trather than sched_init_luids with NULL args.\n+\t* sel-sched-ir.c (new_insns): Remove variable.\n+\t(sched_scan): New static function, previously in haifa-sched.c.  Remove\n+\tall arguments but the first two; all callers changed.\n+\t(sel_init_new_insn): Call sched_extend_luids and sched_init_insn_luid\n+\trather than sched_init_luids.\n+\t(sel_init_bbs): Remove second argument.  All callers changed.\n+\t(sel_add_bb): Call sched_extend_luids rather than sched_init_luids\n+\twith NULL arguments.\n+\t(create_insn_rtx_from_pattern): Likewise.\n+\t* sel-sched-ir.h (sel_init_bbs): Adjust declaration.\n+\t* sched-int.h (sched_init_luids, haifa_init_h_i_d): Likewise.\n+\t(sched_init_insn_luid, sched_extend_luids): Declare.\n+\t(sched_scan_info_def, sched_scan_info, sched_scan): Remove\n+\tdeclarations.\n+\n 2011-05-27  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/49177"}, {"sha": "0cb329077bb3219246aa62c573a3ccf67d9158eb", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 33, "deletions": 125, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a95b23b4290ffaa95614a10eb13123251bcd7e90/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a95b23b4290ffaa95614a10eb13123251bcd7e90/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=a95b23b4290ffaa95614a10eb13123251bcd7e90", "patch": "@@ -332,8 +332,6 @@ const struct common_sched_info_def haifa_common_sched_info =\n     SCHED_PASS_UNKNOWN /* sched_pass_id */\n   };\n \n-const struct sched_scan_info_def *sched_scan_info;\n-\n /* Mapping from instruction UID to its Logical UID.  */\n VEC (int, heap) *sched_luids = NULL;\n \n@@ -3336,7 +3334,7 @@ schedule_block (basic_block *target_bb)\n \t in its md_finish () hook.  These new insns don't have any data\n \t initialized and to identify them we extend h_i_d so that they'll\n \t get zero luids.  */\n-      sched_init_luids (NULL, NULL, NULL, NULL);\n+      sched_extend_luids ();\n     }\n \n   if (sched_verbose)\n@@ -3544,10 +3542,10 @@ haifa_sched_init (void)\n \n     FOR_EACH_BB (bb)\n       VEC_quick_push (basic_block, bbs, bb);\n-    sched_init_luids (bbs, NULL, NULL, NULL);\n+    sched_init_luids (bbs);\n     sched_deps_init (true);\n     sched_extend_target ();\n-    haifa_init_h_i_d (bbs, NULL, NULL, NULL);\n+    haifa_init_h_i_d (bbs);\n \n     VEC_free (basic_block, heap, bbs);\n   }\n@@ -5335,114 +5333,18 @@ check_cfg (rtx head, rtx tail)\n \n #endif /* ENABLE_CHECKING */\n \n-/* Extend per basic block data structures.  */\n-static void\n-extend_bb (void)\n-{\n-  if (sched_scan_info->extend_bb)\n-    sched_scan_info->extend_bb ();\n-}\n-\n-/* Init data for BB.  */\n-static void\n-init_bb (basic_block bb)\n-{\n-  if (sched_scan_info->init_bb)\n-    sched_scan_info->init_bb (bb);\n-}\n-\n-/* Extend per insn data structures.  */\n-static void\n-extend_insn (void)\n-{\n-  if (sched_scan_info->extend_insn)\n-    sched_scan_info->extend_insn ();\n-}\n-\n-/* Init data structures for INSN.  */\n-static void\n-init_insn (rtx insn)\n-{\n-  if (sched_scan_info->init_insn)\n-    sched_scan_info->init_insn (insn);\n-}\n-\n-/* Init all insns in BB.  */\n-static void\n-init_insns_in_bb (basic_block bb)\n-{\n-  rtx insn;\n-\n-  FOR_BB_INSNS (bb, insn)\n-    init_insn (insn);\n-}\n-\n-/* A driver function to add a set of basic blocks (BBS),\n-   a single basic block (BB), a set of insns (INSNS) or a single insn (INSN)\n-   to the scheduling region.  */\n-void\n-sched_scan (const struct sched_scan_info_def *ssi,\n-\t    bb_vec_t bbs, basic_block bb, insn_vec_t insns, rtx insn)\n-{\n-  sched_scan_info = ssi;\n-\n-  if (bbs != NULL || bb != NULL)\n-    {\n-      extend_bb ();\n-\n-      if (bbs != NULL)\n-\t{\n-\t  unsigned i;\n-\t  basic_block x;\n-\n-\t  FOR_EACH_VEC_ELT (basic_block, bbs, i, x)\n-\t    init_bb (x);\n-\t}\n-\n-      if (bb != NULL)\n-\tinit_bb (bb);\n-    }\n-\n-  extend_insn ();\n-\n-  if (bbs != NULL)\n-    {\n-      unsigned i;\n-      basic_block x;\n-\n-      FOR_EACH_VEC_ELT (basic_block, bbs, i, x)\n-\tinit_insns_in_bb (x);\n-    }\n-\n-  if (bb != NULL)\n-    init_insns_in_bb (bb);\n-\n-  if (insns != NULL)\n-    {\n-      unsigned i;\n-      rtx x;\n-\n-      FOR_EACH_VEC_ELT (rtx, insns, i, x)\n-\tinit_insn (x);\n-    }\n-\n-  if (insn != NULL)\n-    init_insn (insn);\n-}\n-\n-\n /* Extend data structures for logical insn UID.  */\n-static void\n-luids_extend_insn (void)\n+void\n+sched_extend_luids (void)\n {\n   int new_luids_max_uid = get_max_uid () + 1;\n \n   VEC_safe_grow_cleared (int, heap, sched_luids, new_luids_max_uid);\n }\n \n /* Initialize LUID for INSN.  */\n-static void\n-luids_init_insn (rtx insn)\n+void\n+sched_init_insn_luid (rtx insn)\n {\n   int i = INSN_P (insn) ? 1 : common_sched_info->luid_for_non_insn (insn);\n   int luid;\n@@ -5458,21 +5360,23 @@ luids_init_insn (rtx insn)\n   SET_INSN_LUID (insn, luid);\n }\n \n-/* Initialize luids for BBS, BB, INSNS and INSN.\n+/* Initialize luids for BBS.\n    The hook common_sched_info->luid_for_non_insn () is used to determine\n    if notes, labels, etc. need luids.  */\n void\n-sched_init_luids (bb_vec_t bbs, basic_block bb, insn_vec_t insns, rtx insn)\n+sched_init_luids (bb_vec_t bbs)\n {\n-  const struct sched_scan_info_def ssi =\n+  int i;\n+  basic_block bb;\n+\n+  sched_extend_luids ();\n+  FOR_EACH_VEC_ELT (basic_block, bbs, i, bb)\n     {\n-      NULL, /* extend_bb */\n-      NULL, /* init_bb */\n-      luids_extend_insn, /* extend_insn */\n-      luids_init_insn /* init_insn */\n-    };\n+      rtx insn;\n \n-  sched_scan (&ssi, bbs, bb, insns, insn);\n+      FOR_BB_INSNS (bb, insn)\n+\tsched_init_insn_luid (insn);\n+    }\n }\n \n /* Free LUIDs.  */\n@@ -5529,19 +5433,21 @@ init_h_i_d (rtx insn)\n     }\n }\n \n-/* Initialize haifa_insn_data for BBS, BB, INSNS and INSN.  */\n+/* Initialize haifa_insn_data for BBS.  */\n void\n-haifa_init_h_i_d (bb_vec_t bbs, basic_block bb, insn_vec_t insns, rtx insn)\n+haifa_init_h_i_d (bb_vec_t bbs)\n {\n-  const struct sched_scan_info_def ssi =\n+  int i;\n+  basic_block bb;\n+\n+  extend_h_i_d ();\n+  FOR_EACH_VEC_ELT (basic_block, bbs, i, bb)\n     {\n-      NULL, /* extend_bb */\n-      NULL, /* init_bb */\n-      extend_h_i_d, /* extend_insn */\n-      init_h_i_d /* init_insn */\n-    };\n+      rtx insn;\n \n-  sched_scan (&ssi, bbs, bb, insns, insn);\n+      FOR_BB_INSNS (bb, insn)\n+\tinit_h_i_d (insn);\n+    }\n }\n \n /* Finalize haifa_insn_data.  */\n@@ -5570,10 +5476,12 @@ haifa_init_insn (rtx insn)\n {\n   gcc_assert (insn != NULL);\n \n-  sched_init_luids (NULL, NULL, NULL, insn);\n+  sched_extend_luids ();\n+  sched_init_insn_luid (insn);\n   sched_extend_target ();\n   sched_deps_init (false);\n-  haifa_init_h_i_d (NULL, NULL, NULL, insn);\n+  extend_h_i_d ();\n+  init_h_i_d (insn);\n \n   if (adding_bb_to_current_region_p)\n     {"}, {"sha": "a18f8461e7148ccab466baf69cf15b0ff673c02d", "filename": "gcc/sched-int.h", "status": "modified", "additions": 5, "deletions": 29, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a95b23b4290ffaa95614a10eb13123251bcd7e90/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a95b23b4290ffaa95614a10eb13123251bcd7e90/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=a95b23b4290ffaa95614a10eb13123251bcd7e90", "patch": "@@ -39,42 +39,18 @@ enum sched_pass_id_t { SCHED_PASS_UNKNOWN, SCHED_RGN_PASS, SCHED_EBB_PASS,\n \n typedef VEC (basic_block, heap) *bb_vec_t;\n typedef VEC (rtx, heap) *insn_vec_t;\n-typedef VEC(rtx, heap) *rtx_vec_t;\n-\n-struct sched_scan_info_def\n-{\n-  /* This hook notifies scheduler frontend to extend its internal per basic\n-     block data structures.  This hook should be called once before a series of\n-     calls to bb_init ().  */\n-  void (*extend_bb) (void);\n-\n-  /* This hook makes scheduler frontend to initialize its internal data\n-     structures for the passed basic block.  */\n-  void (*init_bb) (basic_block);\n-\n-  /* This hook notifies scheduler frontend to extend its internal per insn data\n-     structures.  This hook should be called once before a series of calls to\n-     insn_init ().  */\n-  void (*extend_insn) (void);\n-\n-  /* This hook makes scheduler frontend to initialize its internal data\n-     structures for the passed insn.  */\n-  void (*init_insn) (rtx);\n-};\n-\n-extern const struct sched_scan_info_def *sched_scan_info;\n-\n-extern void sched_scan (const struct sched_scan_info_def *,\n-\t\t\tbb_vec_t, basic_block, insn_vec_t, rtx);\n+typedef VEC (rtx, heap) *rtx_vec_t;\n \n extern void sched_init_bbs (void);\n \n-extern void sched_init_luids (bb_vec_t, basic_block, insn_vec_t, rtx);\n+extern void sched_extend_luids (void);\n+extern void sched_init_insn_luid (rtx);\n+extern void sched_init_luids (bb_vec_t);\n extern void sched_finish_luids (void);\n \n extern void sched_extend_target (void);\n \n-extern void haifa_init_h_i_d (bb_vec_t, basic_block, insn_vec_t, rtx);\n+extern void haifa_init_h_i_d (bb_vec_t);\n extern void haifa_finish_h_i_d (void);\n \n /* Hooks that are common to all the schedulers.  */"}, {"sha": "de7629afa06c495fd8c0f89a113f8c9174ffc9cd", "filename": "gcc/sel-sched-ir.c", "status": "modified", "additions": 59, "deletions": 11, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a95b23b4290ffaa95614a10eb13123251bcd7e90/gcc%2Fsel-sched-ir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a95b23b4290ffaa95614a10eb13123251bcd7e90/gcc%2Fsel-sched-ir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.c?ref=a95b23b4290ffaa95614a10eb13123251bcd7e90", "patch": "@@ -2720,6 +2720,54 @@ deps_init_id (idata_t id, insn_t insn, bool force_unique_p)\n }\n \n \f\n+struct sched_scan_info_def\n+{\n+  /* This hook notifies scheduler frontend to extend its internal per basic\n+     block data structures.  This hook should be called once before a series of\n+     calls to bb_init ().  */\n+  void (*extend_bb) (void);\n+\n+  /* This hook makes scheduler frontend to initialize its internal data\n+     structures for the passed basic block.  */\n+  void (*init_bb) (basic_block);\n+\n+  /* This hook notifies scheduler frontend to extend its internal per insn data\n+     structures.  This hook should be called once before a series of calls to\n+     insn_init ().  */\n+  void (*extend_insn) (void);\n+\n+  /* This hook makes scheduler frontend to initialize its internal data\n+     structures for the passed insn.  */\n+  void (*init_insn) (rtx);\n+};\n+\n+/* A driver function to add a set of basic blocks (BBS) to the\n+   scheduling region.  */\n+static void\n+sched_scan (const struct sched_scan_info_def *ssi, bb_vec_t bbs)\n+{\n+  unsigned i;\n+  basic_block bb;\n+\n+  if (ssi->extend_bb)\n+    ssi->extend_bb ();\n+\n+  if (ssi->init_bb)\n+    FOR_EACH_VEC_ELT (basic_block, bbs, i, bb)\n+      ssi->init_bb (bb);\n+\n+  if (ssi->extend_insn)\n+    ssi->extend_insn ();\n+\n+  if (ssi->init_insn)\n+    FOR_EACH_VEC_ELT (basic_block, bbs, i, bb)\n+      {\n+\trtx insn;\n+\n+\tFOR_BB_INSNS (bb, insn)\n+\t  ssi->init_insn (insn);\n+      }\n+}\n \n /* Implement hooks for collecting fundamental insn properties like if insn is\n    an ASM or is within a SCHED_GROUP.  */\n@@ -2944,7 +2992,7 @@ sel_init_global_and_expr (bb_vec_t bbs)\n       init_global_and_expr_for_insn /* init_insn */\n     };\n \n-  sched_scan (&ssi, bbs, NULL, NULL, NULL);\n+  sched_scan (&ssi, bbs);\n }\n \n /* Finalize region-scope data structures for basic blocks.  */\n@@ -3001,7 +3049,7 @@ sel_finish_global_and_expr (void)\n \t  finish_global_and_expr_insn /* init_insn */\n \t};\n \n-      sched_scan (&ssi, bbs, NULL, NULL, NULL);\n+      sched_scan (&ssi, bbs);\n     }\n \n     VEC_free (basic_block, heap, bbs);\n@@ -3990,9 +4038,6 @@ finish_region_bb_info (void)\n /* Data for each insn in current region.  */\n VEC (sel_insn_data_def, heap) *s_i_d = NULL;\n \n-/* A vector for the insns we've emitted.  */\n-static insn_vec_t new_insns = NULL;\n-\n /* Extend data structures for insns from current region.  */\n static void\n extend_insn_data (void)\n@@ -4131,7 +4176,10 @@ sel_init_new_insn (insn_t insn, int flags)\n     }\n \n   if (flags & INSN_INIT_TODO_LUID)\n-    sched_init_luids (NULL, NULL, NULL, insn);\n+    {\n+      sched_extend_luids ();\n+      sched_init_insn_luid (insn);\n+    }\n \n   if (flags & INSN_INIT_TODO_SSID)\n     {\n@@ -4473,7 +4521,7 @@ init_bb (basic_block bb)\n }\n \n void\n-sel_init_bbs (bb_vec_t bbs, basic_block bb)\n+sel_init_bbs (bb_vec_t bbs)\n {\n   const struct sched_scan_info_def ssi =\n     {\n@@ -4483,7 +4531,7 @@ sel_init_bbs (bb_vec_t bbs, basic_block bb)\n       NULL /* init_insn */\n     };\n \n-  sched_scan (&ssi, bbs, bb, new_insns, NULL);\n+  sched_scan (&ssi, bbs);\n }\n \n /* Restore notes for the whole region.  */\n@@ -5040,9 +5088,9 @@ static void\n sel_add_bb (basic_block bb)\n {\n   /* Extend luids so that new notes will receive zero luids.  */\n-  sched_init_luids (NULL, NULL, NULL, NULL);\n+  sched_extend_luids ();\n   sched_init_bbs ();\n-  sel_init_bbs (last_added_blocks, NULL);\n+  sel_init_bbs (last_added_blocks);\n \n   /* When bb is passed explicitly, the vector should contain\n      the only element that equals to bb; otherwise, the vector\n@@ -5583,7 +5631,7 @@ create_insn_rtx_from_pattern (rtx pattern, rtx label)\n \n   end_sequence ();\n \n-  sched_init_luids (NULL, NULL, NULL, NULL);\n+  sched_extend_luids ();\n   sched_extend_target ();\n   sched_deps_init (false);\n "}, {"sha": "838c0d197736710da53fb5e30c04e8c6ce2aaf8a", "filename": "gcc/sel-sched-ir.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a95b23b4290ffaa95614a10eb13123251bcd7e90/gcc%2Fsel-sched-ir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a95b23b4290ffaa95614a10eb13123251bcd7e90/gcc%2Fsel-sched-ir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.h?ref=a95b23b4290ffaa95614a10eb13123251bcd7e90", "patch": "@@ -1602,7 +1602,7 @@ extern bool sel_bb_empty_p (basic_block);\n extern bool in_current_region_p (basic_block);\n extern basic_block fallthru_bb_of_jump (rtx);\n \n-extern void sel_init_bbs (bb_vec_t, basic_block);\n+extern void sel_init_bbs (bb_vec_t);\n extern void sel_finish_bbs (void);\n \n extern struct succs_info * compute_succs_info (insn_t, short);"}, {"sha": "3f22a3cb6a99a2005af4422e6896d5762b6d7aba", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a95b23b4290ffaa95614a10eb13123251bcd7e90/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a95b23b4290ffaa95614a10eb13123251bcd7e90/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=a95b23b4290ffaa95614a10eb13123251bcd7e90", "patch": "@@ -6868,7 +6868,7 @@ sel_region_init (int rgn)\n   for (i = 0; i < current_nr_blocks; i++)\n     VEC_quick_push (basic_block, bbs, BASIC_BLOCK (BB_TO_BLOCK (i)));\n \n-  sel_init_bbs (bbs, NULL);\n+  sel_init_bbs (bbs);\n \n   if (flag_sel_sched_pipelining)\n     setup_current_loop_nest (rgn, &bbs);\n@@ -6877,13 +6877,13 @@ sel_region_init (int rgn)\n \n   /* Initialize luids and dependence analysis which both sel-sched and haifa\n      need.  */\n-  sched_init_luids (bbs, NULL, NULL, NULL);\n+  sched_init_luids (bbs);\n   sched_deps_init (false);\n \n   /* Initialize haifa data.  */\n   rgn_setup_sched_infos ();\n   sel_set_sched_flags ();\n-  haifa_init_h_i_d (bbs, NULL, NULL, NULL);\n+  haifa_init_h_i_d (bbs);\n \n   sel_compute_priorities (rgn);\n   init_deps_global ();\n@@ -7215,7 +7215,7 @@ sel_region_target_finish (bool reset_sched_cycles_p)\n \n \t  /* Extend luids so that insns generated by the target will\n \t     get zero luid.  */\n-\t  sched_init_luids (NULL, NULL, NULL, NULL);\n+\t  sched_extend_luids ();\n \t}\n     }\n "}]}