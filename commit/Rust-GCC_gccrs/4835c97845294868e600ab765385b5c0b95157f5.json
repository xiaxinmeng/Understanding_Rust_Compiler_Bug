{"sha": "4835c97845294868e600ab765385b5c0b95157f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgzNWM5Nzg0NTI5NDg2OGU2MDBhYjc2NTM4NWI1YzBiOTUxNTdmNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-10-08T16:54:37Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-10-08T16:54:37Z"}, "message": "Move sqrt and cbrt simplifications to match.pd\n\nThis patch moves the sqrt and cbrt simplification rules to match.pd.\nbuiltins.c now only does the constant folding.\n\nBootstrapped & regression-tested on x86_64-linux-gnu.\n\ngcc/\n\t* builtins.c (fold_builtin_sqrt, fold_builtin_cbrt): Delete.\n\t(fold_builtin_1): Update accordingly.  Handle constant arguments here.\n\t* match.pd: Add rules previously handled by fold_builtin_sqrt\n\tand fold_builtin_cbrt.\n\ngcc/testsuite/\n\t* gcc.dg/builtins-47.c: Test the optimized dump instead.\n\nFrom-SVN: r228616", "tree": {"sha": "19778f9222f6c9f4a0ef4c2ad38bf8ab576baaf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19778f9222f6c9f4a0ef4c2ad38bf8ab576baaf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4835c97845294868e600ab765385b5c0b95157f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4835c97845294868e600ab765385b5c0b95157f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4835c97845294868e600ab765385b5c0b95157f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4835c97845294868e600ab765385b5c0b95157f5/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "68e57f040c6330eb853551622d458a67d6f9e572", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e57f040c6330eb853551622d458a67d6f9e572", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68e57f040c6330eb853551622d458a67d6f9e572"}], "stats": {"total": 207, "additions": 61, "deletions": 146}, "files": [{"sha": "b22f928415ca24da2d3d27f58962b7ad3815c48f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4835c97845294868e600ab765385b5c0b95157f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4835c97845294868e600ab765385b5c0b95157f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4835c97845294868e600ab765385b5c0b95157f5", "patch": "@@ -1,3 +1,10 @@\n+2015-10-08  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* builtins.c (fold_builtin_sqrt, fold_builtin_cbrt): Delete.\n+\t(fold_builtin_1): Update accordingly.  Handle constant arguments here.\n+\t* match.pd: Add rules previously handled by fold_builtin_sqrt\n+\tand fold_builtin_cbrt.\n+\n 2015-10-08  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* params.def (PARAM_MAX_SSA_NAME_QUERY_DEPTH): New param."}, {"sha": "643eeef21061e559bb42078e534af429a6156b4d", "filename": "gcc/builtins.c", "status": "modified", "additions": 6, "deletions": 143, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4835c97845294868e600ab765385b5c0b95157f5/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4835c97845294868e600ab765385b5c0b95157f5/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=4835c97845294868e600ab765385b5c0b95157f5", "patch": "@@ -158,8 +158,6 @@ static bool integer_valued_real_p (tree);\n static tree fold_trunc_transparent_mathfn (location_t, tree, tree);\n static rtx expand_builtin_fabs (tree, rtx, rtx);\n static rtx expand_builtin_signbit (tree, rtx);\n-static tree fold_builtin_sqrt (location_t, tree, tree);\n-static tree fold_builtin_cbrt (location_t, tree, tree);\n static tree fold_builtin_pow (location_t, tree, tree, tree, tree);\n static tree fold_builtin_powi (location_t, tree, tree, tree, tree);\n static tree fold_builtin_cos (location_t, tree, tree, tree);\n@@ -7706,145 +7704,6 @@ fold_builtin_cproj (location_t loc, tree arg, tree type)\n   return NULL_TREE;\n }\n \n-/* Fold a builtin function call to sqrt, sqrtf, or sqrtl with argument ARG.\n-   Return NULL_TREE if no simplification can be made.  */\n-\n-static tree\n-fold_builtin_sqrt (location_t loc, tree arg, tree type)\n-{\n-\n-  enum built_in_function fcode;\n-  tree res;\n-\n-  if (!validate_arg (arg, REAL_TYPE))\n-    return NULL_TREE;\n-\n-  /* Calculate the result when the argument is a constant.  */\n-  if ((res = do_mpfr_arg1 (arg, type, mpfr_sqrt, &dconst0, NULL, true)))\n-    return res;\n-\n-  /* Optimize sqrt(expN(x)) = expN(x*0.5).  */\n-  fcode = builtin_mathfn_code (arg);\n-  if (flag_unsafe_math_optimizations && BUILTIN_EXPONENT_P (fcode))\n-    {\n-      tree expfn = TREE_OPERAND (CALL_EXPR_FN (arg), 0);\n-      arg = fold_build2_loc (loc, MULT_EXPR, type,\n-\t\t\t CALL_EXPR_ARG (arg, 0),\n-\t\t\t build_real (type, dconsthalf));\n-      return build_call_expr_loc (loc, expfn, 1, arg);\n-    }\n-\n-  /* Optimize sqrt(Nroot(x)) -> pow(x,1/(2*N)).  */\n-  if (flag_unsafe_math_optimizations && BUILTIN_ROOT_P (fcode))\n-    {\n-      tree powfn = mathfn_built_in (type, BUILT_IN_POW);\n-\n-      if (powfn)\n-\t{\n-\t  tree arg0 = CALL_EXPR_ARG (arg, 0);\n-\t  tree arg1 = (BUILTIN_SQRT_P (fcode)\n-\t\t       ? build_real (type, dconst_quarter ())\n-\t\t       : build_real_truncate (type, dconst_sixth ()));\n-\t  return build_call_expr_loc (loc, powfn, 2, arg0, arg1);\n-\t}\n-    }\n-\n-  /* Optimize sqrt(pow(x,y)) = pow(|x|,y*0.5).  */\n-  if (flag_unsafe_math_optimizations\n-      && (fcode == BUILT_IN_POW\n-\t  || fcode == BUILT_IN_POWF\n-\t  || fcode == BUILT_IN_POWL))\n-    {\n-      tree powfn = TREE_OPERAND (CALL_EXPR_FN (arg), 0);\n-      tree arg0 = CALL_EXPR_ARG (arg, 0);\n-      tree arg1 = CALL_EXPR_ARG (arg, 1);\n-      tree narg1;\n-      if (!tree_expr_nonnegative_p (arg0))\n-\targ0 = build1 (ABS_EXPR, type, arg0);\n-      narg1 = fold_build2_loc (loc, MULT_EXPR, type, arg1,\n-\t\t\t   build_real (type, dconsthalf));\n-      return build_call_expr_loc (loc, powfn, 2, arg0, narg1);\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n-/* Fold a builtin function call to cbrt, cbrtf, or cbrtl with argument ARG.\n-   Return NULL_TREE if no simplification can be made.  */\n-\n-static tree\n-fold_builtin_cbrt (location_t loc, tree arg, tree type)\n-{\n-  const enum built_in_function fcode = builtin_mathfn_code (arg);\n-  tree res;\n-\n-  if (!validate_arg (arg, REAL_TYPE))\n-    return NULL_TREE;\n-\n-  /* Calculate the result when the argument is a constant.  */\n-  if ((res = do_mpfr_arg1 (arg, type, mpfr_cbrt, NULL, NULL, 0)))\n-    return res;\n-\n-  if (flag_unsafe_math_optimizations)\n-    {\n-      /* Optimize cbrt(expN(x)) -> expN(x/3).  */\n-      if (BUILTIN_EXPONENT_P (fcode))\n-\t{\n-\t  tree expfn = TREE_OPERAND (CALL_EXPR_FN (arg), 0);\n-\t  arg = fold_build2_loc (loc, MULT_EXPR, type,\n-\t\t\t\t CALL_EXPR_ARG (arg, 0),\n-\t\t\t\t build_real_truncate (type, dconst_third ()));\n-\t  return build_call_expr_loc (loc, expfn, 1, arg);\n-\t}\n-\n-      /* Optimize cbrt(sqrt(x)) -> pow(x,1/6).  */\n-      if (BUILTIN_SQRT_P (fcode))\n-\t{\n-\t  tree powfn = mathfn_built_in (type, BUILT_IN_POW);\n-\n-\t  if (powfn)\n-\t    {\n-\t      tree arg0 = CALL_EXPR_ARG (arg, 0);\n-\t      tree tree_root = build_real_truncate (type, dconst_sixth ());\n-\t      return build_call_expr_loc (loc, powfn, 2, arg0, tree_root);\n-\t    }\n-\t}\n-\n-      /* Optimize cbrt(cbrt(x)) -> pow(x,1/9) iff x is nonnegative.  */\n-      if (BUILTIN_CBRT_P (fcode))\n-\t{\n-\t  tree arg0 = CALL_EXPR_ARG (arg, 0);\n-\t  if (tree_expr_nonnegative_p (arg0))\n-\t    {\n-\t      tree powfn = mathfn_built_in (type, BUILT_IN_POW);\n-\n-\t      if (powfn)\n-\t\t{\n-\t\t  tree tree_root = build_real_truncate (type, dconst_ninth ());\n-\t\t  return build_call_expr_loc (loc, powfn, 2, arg0, tree_root);\n-\t\t}\n-\t    }\n-\t}\n-\n-      /* Optimize cbrt(pow(x,y)) -> pow(x,y/3) iff x is nonnegative.  */\n-      if (fcode == BUILT_IN_POW\n-          || fcode == BUILT_IN_POWF\n-\t  || fcode == BUILT_IN_POWL)\n-\t{\n-\t  tree arg00 = CALL_EXPR_ARG (arg, 0);\n-\t  tree arg01 = CALL_EXPR_ARG (arg, 1);\n-\t  if (tree_expr_nonnegative_p (arg00))\n-\t    {\n-\t      tree powfn = TREE_OPERAND (CALL_EXPR_FN (arg), 0);\n-\t      tree c = build_real_truncate (type, dconst_third ());\n-\t      tree narg01 = fold_build2_loc (loc, MULT_EXPR, type, arg01, c);\n-\t      return build_call_expr_loc (loc, powfn, 2, arg00, narg01);\n-\t    }\n-\t}\n-    }\n-  return NULL_TREE;\n-}\n-\n /* Fold function call to builtin cos, cosf, or cosl with argument ARG.\n    TYPE is the type of the return value.  Return NULL_TREE if no\n    simplification can be made.  */\n@@ -9940,10 +9799,14 @@ fold_builtin_1 (location_t loc, tree fndecl, tree arg0)\n       return fold_builtin_carg (loc, arg0, type);\n \n     CASE_FLT_FN (BUILT_IN_SQRT):\n-      return fold_builtin_sqrt (loc, arg0, type);\n+      if (validate_arg (arg0, REAL_TYPE))\n+\treturn do_mpfr_arg1 (arg0, type, mpfr_sqrt, &dconst0, NULL, true);\n+      break;\n \n     CASE_FLT_FN (BUILT_IN_CBRT):\n-      return fold_builtin_cbrt (loc, arg0, type);\n+      if (validate_arg (arg0, REAL_TYPE))\n+\treturn do_mpfr_arg1 (arg0, type, mpfr_cbrt, NULL, NULL, 0);\n+      break;\n \n     CASE_FLT_FN (BUILT_IN_ASIN):\n       if (validate_arg (arg0, REAL_TYPE))"}, {"sha": "b87c43641b2fd62972926a95908248ed6bd2d260", "filename": "gcc/match.pd", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4835c97845294868e600ab765385b5c0b95157f5/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4835c97845294868e600ab765385b5c0b95157f5/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=4835c97845294868e600ab765385b5c0b95157f5", "patch": "@@ -2309,3 +2309,44 @@ along with GCC; see the file COPYING3.  If not see\n     (with { tree utype = unsigned_type_for (TREE_TYPE (@0)); }\n      (convert (bit_and (op (convert:utype @0) (convert:utype @1))\n \t       (convert:utype @4))))))))\n+\n+(if (flag_unsafe_math_optimizations)\n+ (for sqrts (SQRT)\n+      cbrts (CBRT)\n+      exps (EXP EXP2 EXP10 POW10)\n+  /* sqrt(expN(x)) -> expN(x*0.5).  */\n+  (simplify\n+   (sqrts (exps @0))\n+   (exps (mult @0 { build_real (type, dconsthalf); })))\n+  /* cbrt(expN(x)) -> expN(x/3).  */\n+  (simplify\n+   (cbrts (exps @0))\n+   (exps (mult @0 { build_real_truncate (type, dconst_third ()); }))))\n+\n+ (for sqrts (SQRT)\n+      cbrts (CBRT)\n+      pows (POW)\n+  /* sqrt(sqrt(x)) -> pow(x,1/4).  */\n+  (simplify\n+   (sqrts (sqrts @0))\n+   (pows @0 { build_real (type, dconst_quarter ()); }))\n+  /* sqrt(cbrt(x)) -> pow(x,1/6).  */\n+  (simplify\n+   (sqrts (cbrts @0))\n+   (pows @0 { build_real_truncate (type, dconst_sixth ()); }))\n+  /* cbrt(sqrt(x)) -> pow(x,1/6).  */\n+  (simplify\n+   (cbrts (sqrts @0))\n+   (pows @0 { build_real_truncate (type, dconst_sixth ()); }))\n+  /* cbrt(cbrt(x)) -> pow(x,1/9), iff x is nonnegative.  */\n+  (simplify\n+   (cbrts (cbrts tree_expr_nonnegative_p@0))\n+   (pows @0 { build_real_truncate (type, dconst_ninth ()); }))\n+  /* sqrt(pow(x,y)) -> pow(|x|,y*0.5).  */\n+  (simplify\n+   (sqrts (pows @0 @1))\n+   (pows (abs @0) (mult @1 { build_real (type, dconsthalf); })))\n+  /* cbrt(pow(x,y)) -> pow(x,y/3), iff x is nonnegative.  */\n+  (simplify\n+   (cbrts (pows tree_expr_nonnegative_p@0 @1))\n+   (pows @0 (mult @1 { build_real_truncate (type, dconst_third ()); })))))"}, {"sha": "378f8cda26f7b95a970ed4e1a2051c636be38da7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4835c97845294868e600ab765385b5c0b95157f5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4835c97845294868e600ab765385b5c0b95157f5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4835c97845294868e600ab765385b5c0b95157f5", "patch": "@@ -1,3 +1,7 @@\n+2015-10-08  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/builtins-47.c: Test the optimized dump instead.\n+\n 2015-10-08  Yuri Rumyantsev  <ysrumyan@gmail.com>\n \n \t* gcc.dg/vect/vect-outer-simd-3.c: New test."}, {"sha": "fbe9d21a2685c0350e7913b2f4871d1df7e4af62", "filename": "gcc/testsuite/gcc.dg/builtins-47.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4835c97845294868e600ab765385b5c0b95157f5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-47.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4835c97845294868e600ab765385b5c0b95157f5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-47.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-47.c?ref=4835c97845294868e600ab765385b5c0b95157f5", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O -ffast-math -fdump-tree-gimple\" } */\n+/* { dg-options \"-O -ffast-math -fdump-tree-optimized\" } */\n \n extern double sqrt (double);\n extern double pow (double, double);\n@@ -15,5 +15,5 @@ int main ()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"sqrt\" 0 \"gimple\" } } */\n-/* { dg-final { scan-tree-dump-times \"pow\" 0 \"gimple\" } } */\n+/* { dg-final { scan-tree-dump-times \"sqrt\" 0 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"pow\" 0 \"optimized\" } } */"}]}