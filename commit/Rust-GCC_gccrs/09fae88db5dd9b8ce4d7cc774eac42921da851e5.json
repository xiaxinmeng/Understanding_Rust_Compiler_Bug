{"sha": "09fae88db5dd9b8ce4d7cc774eac42921da851e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDlmYWU4OGRiNWRkOWI4Y2U0ZDdjYzc3NGVhYzQyOTIxZGE4NTFlNQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2011-08-29T12:54:55Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2011-08-29T12:54:55Z"}, "message": "Handle different versions of Solaris 8 <iso/math_iso.h>, <iso/stdlib_iso.h>\n\n\t* acinclude.m4 (GLIBCXX_CHECK_MATH_PROTO)\n\t(GLIBCXX_CHECK_STDLIB_PROTO): New tests.\n\t* configure.ac (GLIBCXX_CHECK_MATH_PROTO)\n\t(GLIBCXX_CHECK_STDLIB_PROTO): Call them.\n\t* configure: Regenerate.\n\t* config.h.in: Regenerate.\n\t* config/os/solaris/solaris2.8/os_defines.h\n\t(__CORRECT_ISO_CPP_MATH_H_PROTO2): Don't define.\n\t* config/os/solaris/solaris2.9: Remove.\n\t* configure.host (solaris2.8): Merge with ...\n\t(solaris2.9, solaris2.1[0-9]): ... this.\n\tAlways use os/solaris/solaris2.8.\n\nFrom-SVN: r178217", "tree": {"sha": "c2d29549438148e93e2c263f449f91e969dad163", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2d29549438148e93e2c263f449f91e969dad163"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09fae88db5dd9b8ce4d7cc774eac42921da851e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09fae88db5dd9b8ce4d7cc774eac42921da851e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09fae88db5dd9b8ce4d7cc774eac42921da851e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09fae88db5dd9b8ce4d7cc774eac42921da851e5/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "25ebc085581bdd410ccb6d8be688c9775eb642d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25ebc085581bdd410ccb6d8be688c9775eb642d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25ebc085581bdd410ccb6d8be688c9775eb642d9"}], "stats": {"total": 536, "additions": 254, "deletions": 282}, "files": [{"sha": "bc745b6924e378171f9e6eb94dac3d28a3a85d27", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09fae88db5dd9b8ce4d7cc774eac42921da851e5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09fae88db5dd9b8ce4d7cc774eac42921da851e5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=09fae88db5dd9b8ce4d7cc774eac42921da851e5", "patch": "@@ -1,3 +1,18 @@\n+2011-08-29  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* acinclude.m4 (GLIBCXX_CHECK_MATH_PROTO)\n+\t(GLIBCXX_CHECK_STDLIB_PROTO): New tests.\n+\t* configure.ac (GLIBCXX_CHECK_MATH_PROTO)\n+\t(GLIBCXX_CHECK_STDLIB_PROTO): Call them.\n+\t* configure: Regenerate.\n+\t* config.h.in: Regenerate.\n+\t* config/os/solaris/solaris2.8/os_defines.h\n+\t(__CORRECT_ISO_CPP_MATH_H_PROTO2): Don't define.\n+\t* config/os/solaris/solaris2.9: Remove.\n+\t* configure.host (solaris2.8): Merge with ...\n+\t(solaris2.9, solaris2.1[0-9]): ... this.\n+\tAlways use os/solaris/solaris2.8.\n+\n 2011-08-28  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/move.h (swap(_Tp(&)[_Nm], _Tp(&)[_Nm])): Remove"}, {"sha": "44ae98469a743d6529e775a35d18931c0d89a5cb", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09fae88db5dd9b8ce4d7cc774eac42921da851e5/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09fae88db5dd9b8ce4d7cc774eac42921da851e5/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=09fae88db5dd9b8ce4d7cc774eac42921da851e5", "patch": "@@ -1692,6 +1692,100 @@ AC_DEFUN([GLIBCXX_COMPUTE_STDIO_INTEGER_CONSTANTS], [\n \t\t     [Define to the value of the SEEK_END integer constant.])\n ])\n \n+dnl\n+dnl Check whether required C++ overloads are present in <math.h>.\n+dnl\n+\n+AC_DEFUN([GLIBCXX_CHECK_MATH_PROTO], [\n+\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+\n+  case \"$host\" in\n+    *-*-solaris2.*)\n+      # Solaris 8 FCS only had an overload for double std::abs(double) in\n+      # <iso/math_iso.h>.  Patches 111721-04 (SPARC) and 112757-01 (x86)\n+      # introduced the full set also found from Solaris 9 onwards.\n+      AC_MSG_CHECKING([for float std::abs(float) overload])\n+      AC_CACHE_VAL(glibcxx_cv_abs_float, [\n+\tAC_COMPILE_IFELSE([AC_LANG_SOURCE(\n+\t  [#include <math.h>\n+\t   namespace std {\n+\t     inline float abs(float __x)\n+\t     {  return __builtin_fabsf(__x); }\n+\t   }\n+\t])],\n+        [glibcxx_cv_abs_float=no],\n+        [glibcxx_cv_abs_float=yes]\n+      )])\n+\n+      # autoheader cannot handle indented templates.\n+      AH_VERBATIM([__CORRECT_ISO_CPP_MATH_H_PROTO1],\n+        [/* Define if all C++ overloads are available in <math.h>.  */\n+#if __cplusplus >= 199711L\n+#undef __CORRECT_ISO_CPP_MATH_H_PROTO1\n+#endif])\n+      AH_VERBATIM([__CORRECT_ISO_CPP_MATH_H_PROTO2],\n+        [/* Define if only double std::abs(double) is available in <math.h>.  */\n+#if __cplusplus >= 199711L\n+#undef __CORRECT_ISO_CPP_MATH_H_PROTO2\n+#endif])\n+\n+      if test $glibcxx_cv_abs_float = yes; then\n+        AC_DEFINE(__CORRECT_ISO_CPP_MATH_H_PROTO1)\n+      else\n+        AC_DEFINE(__CORRECT_ISO_CPP_MATH_H_PROTO2)\n+      fi\n+      AC_MSG_RESULT($glibcxx_cv_abs_float)\n+      ;;\n+  esac\n+\n+  AC_LANG_RESTORE\n+])\n+\n+dnl\n+dnl Check whether required C++ overloads are present in <stdlib.h>.\n+dnl\n+\n+AC_DEFUN([GLIBCXX_CHECK_STDLIB_PROTO], [\n+\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+\n+  case \"$host\" in\n+    *-*-solaris2.*)\n+      # Solaris 8 FCS lacked the overloads for long std::abs(long) and\n+      # ldiv_t std::div(long, long) in <iso/stdlib_iso.h>.  Patches 109607-02\n+      # (SPARC) and 109608-02 (x86) introduced them.\n+      AC_MSG_CHECKING([for long std::abs(long) overload])\n+      AC_CACHE_VAL(glibcxx_cv_abs_long, [\n+\tAC_COMPILE_IFELSE([AC_LANG_SOURCE(\n+\t  [#include <stdlib.h>\n+\t   namespace std {\n+\t     inline long\n+\t     abs(long __i) { return labs(__i); }\n+\t   }\n+        ])],\n+        [glibcxx_cv_abs_long=no],\n+        [glibcxx_cv_abs_long=yes]\n+      )])\n+\n+      # autoheader cannot handle indented templates.\n+      AH_VERBATIM([__CORRECT_ISO_CPP_STDLIB_H_PROTO],\n+        [/* Define if all C++ overloads are available in <stdlib.h>.  */\n+#if __cplusplus >= 199711L\n+#undef __CORRECT_ISO_CPP_STDLIB_H_PROTO\n+#endif])\n+      if test $glibcxx_cv_abs_long = yes; then\n+        AC_DEFINE(__CORRECT_ISO_CPP_STDLIB_H_PROTO, 1)\n+      fi\n+      AC_MSG_RESULT($glibcxx_cv_abs_long)\n+      ;;\n+  esac\n+\n+  AC_LANG_RESTORE\n+])\n+\n dnl\n dnl Check whether macros, etc are present for <system_error>\n dnl"}, {"sha": "837e2c7d082d844f6ede9f00f0ca40bd5faa1f84", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09fae88db5dd9b8ce4d7cc774eac42921da851e5/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09fae88db5dd9b8ce4d7cc774eac42921da851e5/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=09fae88db5dd9b8ce4d7cc774eac42921da851e5", "patch": "@@ -826,6 +826,21 @@\n /* Define to 1 if mutex_timedlock is available. */\n #undef _GTHREAD_USE_MUTEX_TIMEDLOCK\n \n+/* Define if all C++ overloads are available in <math.h>.  */\n+#if __cplusplus >= 199711L\n+#undef __CORRECT_ISO_CPP_MATH_H_PROTO1\n+#endif\n+\n+/* Define if only double std::abs(double) is available in <math.h>.  */\n+#if __cplusplus >= 199711L\n+#undef __CORRECT_ISO_CPP_MATH_H_PROTO2\n+#endif\n+\n+/* Define if all C++ overloads are available in <stdlib.h>.  */\n+#if __cplusplus >= 199711L\n+#undef __CORRECT_ISO_CPP_STDLIB_H_PROTO\n+#endif\n+\n #if defined (HAVE__ACOSF) && ! defined (HAVE_ACOSF)\n # define HAVE_ACOSF 1\n # define acosf _acosf"}, {"sha": "82c1ec18efdfa391483c315118d021ff59eebe23", "filename": "libstdc++-v3/config/os/solaris/solaris2.8/os_defines.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09fae88db5dd9b8ce4d7cc774eac42921da851e5/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.8%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09fae88db5dd9b8ce4d7cc774eac42921da851e5/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.8%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.8%2Fos_defines.h?ref=09fae88db5dd9b8ce4d7cc774eac42921da851e5", "patch": "@@ -1,4 +1,4 @@\n-// Specific definitions for Solaris 8  -*- C++ -*-\n+// Specific definitions for Solaris 8+  -*- C++ -*-\n \n // Copyright (C) 2000, 2002, 2005, 2009, 2011 Free Software Foundation, Inc.\n //\n@@ -28,9 +28,12 @@\n // System-specific #define, typedefs, corrections, etc, go here.  This\n // file will come before all others.\n \n-// FIXME: Autoconf if possible.\n #if __cplusplus >= 199711L\n-#define __CORRECT_ISO_CPP_MATH_H_PROTO2\n+// Overloads in <iso/math_iso.h> and <iso/stdlib_iso.h> changed with\n+// Solaris 8 patches.  Since <bits/c++config.h> includes\n+// <bits/os_defines.h> before configure results,\n+// __CORRECT_ISO_CPP_MATH_H_PROTO[12] and __CORRECT_ISO_CPP_STDLIB_H_PROTO\n+// must be defined via acinclude.m4.\n #define __CORRECT_ISO_CPP_STRING_H_PROTO\n #define __CORRECT_ISO_CPP_WCHAR_H_PROTO\n #endif"}, {"sha": "1ae3874a6dbb1f7d2279f577225b27501b3a7fcb", "filename": "libstdc++-v3/config/os/solaris/solaris2.9/ctype_base.h", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ebc085581bdd410ccb6d8be688c9775eb642d9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ebc085581bdd410ccb6d8be688c9775eb642d9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fctype_base.h?ref=25ebc085581bdd410ccb6d8be688c9775eb642d9", "patch": "@@ -1,60 +0,0 @@\n-// Locale support -*- C++ -*-\n-\n-// Copyright (C) 1997, 1998, 1999, 2000, 2003, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-//\n-// ISO C++ 14882: 22.1  Locales\n-//\n-  \n-// Information as gleaned from /usr/include/ctype.h. Looks like this\n-// only works with solaris2.7 and solaris2.8. Thanks for not changing\n-// things, sun engineers!\n-\n-namespace std _GLIBCXX_VISIBILITY(default)\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n-  /// @brief  Base class for ctype.\n-  struct ctype_base\n-  {\n-    // Non-standard typedefs.\n-    typedef int* \t\t__to_type;\n-\n-    // NB: Offsets into ctype<char>::_M_table force a particular size\n-    // on the mask type. Because of this, we don't use an enum.\n-    typedef unsigned int \tmask;   \n-    static const mask upper    \t= _ISUPPER;\n-    static const mask lower \t= _ISLOWER;\n-    static const mask alpha \t= _ISALPHA;\n-    static const mask digit \t= _ISDIGIT;\n-    static const mask xdigit \t= _ISXDIGIT;\n-    static const mask space \t= _ISSPACE;\n-    static const mask print \t= _ISPRINT;\n-    static const mask graph \t= _ISALPHA | _ISDIGIT | _ISPUNCT;\n-    static const mask cntrl \t= _ISCNTRL;\n-    static const mask punct \t= _ISPUNCT;\n-    static const mask alnum \t= _ISALPHA | _ISDIGIT;\n-  };\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace"}, {"sha": "d3519429a015b7edd7bb7b0390c1da659b23b8ef", "filename": "libstdc++-v3/config/os/solaris/solaris2.9/ctype_configure_char.cc", "status": "removed", "additions": 0, "deletions": 99, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ebc085581bdd410ccb6d8be688c9775eb642d9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fctype_configure_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ebc085581bdd410ccb6d8be688c9775eb642d9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fctype_configure_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fctype_configure_char.cc?ref=25ebc085581bdd410ccb6d8be688c9775eb642d9", "patch": "@@ -1,99 +0,0 @@\n-// Locale support -*- C++ -*-\n-\n-// Copyright (C) 2011 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-/** @file ctype_configure_char.cc */\n-\n-//\n-// ISO C++ 14882: 22.1  Locales\n-//\n-\n-#include <locale>\n-#include <cstdlib>\n-#include <cstring>\n-\n-namespace std _GLIBCXX_VISIBILITY(default)\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n-// Information as gleaned from /usr/include/ctype.h\n-  \n-  const ctype_base::mask* \n-  ctype<char>::classic_table() throw()\n-  { return __ctype_mask; }\n-\n-  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n-\t\t     size_t __refs)\n-  : facet(__refs), _M_del(__table != 0 && __del), \n-  _M_toupper(__trans_upper), _M_tolower(__trans_lower),\n-  _M_table(__table ? __table : classic_table()) \n-  { \n-    memset(_M_widen, 0, sizeof(_M_widen));\n-    _M_widen_ok = 0;\n-    memset(_M_narrow, 0, sizeof(_M_narrow));\n-    _M_narrow_ok = 0;\n-  }\n-\n-  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n-  : facet(__refs), _M_del(__table != 0 && __del), \n-  _M_toupper(__trans_upper), _M_tolower(__trans_lower),\n-  _M_table(__table ? __table : classic_table()) \n-  { \n-    memset(_M_widen, 0, sizeof(_M_widen));\n-    _M_widen_ok = 0;\n-    memset(_M_narrow, 0, sizeof(_M_narrow));\n-    _M_narrow_ok = 0;\n-  }\n-\n-  char\n-  ctype<char>::do_toupper(char __c) const\n-  { return _M_toupper[static_cast<unsigned char>(__c)]; }\n-\n-  const char*\n-  ctype<char>::do_toupper(char* __low, const char* __high) const\n-  {\n-    while (__low < __high)\n-      {\n-\t*__low = _M_toupper[static_cast<unsigned char>(*__low)];\n-\t++__low;\n-      }\n-    return __high;\n-  }\n-\n-  char\n-  ctype<char>::do_tolower(char __c) const\n-  { return _M_tolower[static_cast<unsigned char>(__c)]; }\n-\n-  const char* \n-  ctype<char>::do_tolower(char* __low, const char* __high) const\n-  {\n-    while (__low < __high)\n-      {\n-\t*__low = _M_tolower[static_cast<unsigned char>(*__low)];\n-\t++__low;\n-      }\n-    return __high;\n-  }\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace"}, {"sha": "d6b8df484611c77e0cfdc617745d59cae6e82746", "filename": "libstdc++-v3/config/os/solaris/solaris2.9/ctype_inline.h", "status": "removed", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ebc085581bdd410ccb6d8be688c9775eb642d9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ebc085581bdd410ccb6d8be688c9775eb642d9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fctype_inline.h?ref=25ebc085581bdd410ccb6d8be688c9775eb642d9", "patch": "@@ -1,76 +0,0 @@\n-// Locale support -*- C++ -*-\n-\n-// Copyright (C) 2000, 2002, 2009, 2010 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-  \n-/** @file bits/ctype_inline.h\n- *  This is an internal header file, included by other library headers.\n- *  Do not attempt to use it directly. @headername{locale}\n- */\n-\n-//\n-// ISO C++ 14882: 22.1  Locales\n-//\n-\n-// ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n-// functions go in ctype.cc\n-  \n-namespace std _GLIBCXX_VISIBILITY(default)\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n-  bool\n-  ctype<char>::\n-  is(mask __m, char __c) const\n-  { return _M_table[static_cast<unsigned char>(__c)] & __m; }\n-\n-  const char*\n-  ctype<char>::\n-  is(const char* __low, const char* __high, mask* __vec) const\n-  {\n-    while (__low < __high)\n-      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];\n-    return __high;\n-  }\n-\n-  const char*\n-  ctype<char>::\n-  scan_is(mask __m, const char* __low, const char* __high) const\n-  {\n-    while (__low < __high \n-\t   && !(_M_table[static_cast<unsigned char>(*__low)] & __m))\n-      ++__low;\n-    return __low;\n-  }\n-\n-  const char*\n-  ctype<char>::\n-  scan_not(mask __m, const char* __low, const char* __high) const\n-  {\n-    while (__low < __high \n-\t   && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)\n-      ++__low;\n-    return __low;\n-  }\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace"}, {"sha": "bf84f6152454c2cef3197aa9e7d131f205c95b63", "filename": "libstdc++-v3/config/os/solaris/solaris2.9/os_defines.h", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ebc085581bdd410ccb6d8be688c9775eb642d9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ebc085581bdd410ccb6d8be688c9775eb642d9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fos_defines.h?ref=25ebc085581bdd410ccb6d8be688c9775eb642d9", "patch": "@@ -1,40 +0,0 @@\n-// Specific definitions for Solaris 9+  -*- C++ -*-\n-\n-// Copyright (C) 2000, 2002, 2005, 2009, 2011 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-#ifndef _GLIBCXX_OS_DEFINES\n-#define _GLIBCXX_OS_DEFINES 1\n-\n-// System-specific #define, typedefs, corrections, etc, go here.  This\n-// file will come before all others.\n-\n-// FIXME: Autoconf if possible.\n-#if __cplusplus >= 199711L\n-#define __CORRECT_ISO_CPP_MATH_H_PROTO1\n-#define __CORRECT_ISO_CPP_STDLIB_H_PROTO\n-#define __CORRECT_ISO_CPP_STRING_H_PROTO\n-#define __CORRECT_ISO_CPP_WCHAR_H_PROTO\n-#endif\n-\n-#endif\n-"}, {"sha": "dab2637f24ffb36079a398c0ca9ff81c33b8e90b", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09fae88db5dd9b8ce4d7cc774eac42921da851e5/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09fae88db5dd9b8ce4d7cc774eac42921da851e5/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=09fae88db5dd9b8ce4d7cc774eac42921da851e5", "patch": "@@ -17188,6 +17188,127 @@ $as_echo \"$enable_extern_template\" >&6; }\n # Checks for operating systems support that doesn't require linking.\n \n \n+\n+  ac_ext=cpp\n+ac_cpp='$CXXCPP $CPPFLAGS'\n+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n+\n+\n+  case \"$host\" in\n+    *-*-solaris2.*)\n+      # Solaris 8 FCS only had an overload for double std::abs(double) in\n+      # <iso/math_iso.h>.  Patches 111721-04 (SPARC) and 112757-01 (x86)\n+      # introduced the full set also found from Solaris 9 onwards.\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for float std::abs(float) overload\" >&5\n+$as_echo_n \"checking for float std::abs(float) overload... \" >&6; }\n+      if test \"${glibcxx_cv_abs_float+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+\tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <math.h>\n+\t   namespace std {\n+\t     inline float abs(float __x)\n+\t     {  return __builtin_fabsf(__x); }\n+\t   }\n+\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_abs_float=no\n+else\n+  glibcxx_cv_abs_float=yes\n+\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+\n+\n+      # autoheader cannot handle indented templates.\n+\n+\n+\n+      if test $glibcxx_cv_abs_float = yes; then\n+        $as_echo \"#define __CORRECT_ISO_CPP_MATH_H_PROTO1 1\" >>confdefs.h\n+\n+      else\n+        $as_echo \"#define __CORRECT_ISO_CPP_MATH_H_PROTO2 1\" >>confdefs.h\n+\n+      fi\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_abs_float\" >&5\n+$as_echo \"$glibcxx_cv_abs_float\" >&6; }\n+      ;;\n+  esac\n+\n+  ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n+\n+\n+\n+\n+  ac_ext=cpp\n+ac_cpp='$CXXCPP $CPPFLAGS'\n+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n+\n+\n+  case \"$host\" in\n+    *-*-solaris2.*)\n+      # Solaris 8 FCS lacked the overloads for long std::abs(long) and\n+      # ldiv_t std::div(long, long) in <iso/stdlib_iso.h>.  Patches 109607-02\n+      # (SPARC) and 109608-02 (x86) introduced them.\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for long std::abs(long) overload\" >&5\n+$as_echo_n \"checking for long std::abs(long) overload... \" >&6; }\n+      if test \"${glibcxx_cv_abs_long+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+\tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <stdlib.h>\n+\t   namespace std {\n+\t     inline long\n+\t     abs(long __i) { return labs(__i); }\n+\t   }\n+\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_abs_long=no\n+else\n+  glibcxx_cv_abs_long=yes\n+\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+\n+\n+      # autoheader cannot handle indented templates.\n+\n+      if test $glibcxx_cv_abs_long = yes; then\n+        $as_echo \"#define __CORRECT_ISO_CPP_STDLIB_H_PROTO 1\" >>confdefs.h\n+\n+      fi\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_abs_long\" >&5\n+$as_echo \"$glibcxx_cv_abs_long\" >&6; }\n+      ;;\n+  esac\n+\n+  ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n+\n+\n+\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for EOWNERDEAD\" >&5\n $as_echo_n \"checking for EOWNERDEAD... \" >&6; }\n if test \"${glibcxx_cv_system_error1+set}\" = set; then :"}, {"sha": "6e7fea656bcdc253e86b6edb38d5099c154cbd17", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09fae88db5dd9b8ce4d7cc774eac42921da851e5/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09fae88db5dd9b8ce4d7cc774eac42921da851e5/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=09fae88db5dd9b8ce4d7cc774eac42921da851e5", "patch": "@@ -135,6 +135,8 @@ GLIBCXX_ENABLE_FULLY_DYNAMIC_STRING([no])\n GLIBCXX_ENABLE_EXTERN_TEMPLATE([yes])\n \n # Checks for operating systems support that doesn't require linking.\n+GLIBCXX_CHECK_MATH_PROTO\n+GLIBCXX_CHECK_STDLIB_PROTO\n GLIBCXX_CHECK_SYSTEM_ERROR\n \n # For the streamoff typedef."}, {"sha": "799cec2f412f6a269b9451b3aef789bf0f2ec838", "filename": "libstdc++-v3/configure.host", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09fae88db5dd9b8ce4d7cc774eac42921da851e5/libstdc%2B%2B-v3%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09fae88db5dd9b8ce4d7cc774eac42921da851e5/libstdc%2B%2B-v3%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.host?ref=09fae88db5dd9b8ce4d7cc774eac42921da851e5", "patch": "@@ -284,12 +284,9 @@ case \"${host_os}\" in\n     echo \"Please specify the full version of Solaris, ie. solaris2.9 \" 1>&2\n     exit 1\n     ;;\n-  solaris2.8)\n+  solaris2.[89] | solaris2.1[0-9])\n     os_include_dir=\"os/solaris/solaris2.8\"\n     ;;\n-  solaris2.9 | solaris2.1[0-9])\n-    os_include_dir=\"os/solaris/solaris2.9\"\n-    ;;\n   tpf)\n     os_include_dir=\"os/tpf\"\n     ;;"}]}