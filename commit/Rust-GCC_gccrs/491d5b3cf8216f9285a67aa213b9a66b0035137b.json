{"sha": "491d5b3cf8216f9285a67aa213b9a66b0035137b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDkxZDViM2NmODIxNmY5Mjg1YTY3YWEyMTNiOWE2NmIwMDM1MTM3Yg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-01-18T20:09:10Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-03-01T19:37:09Z"}, "message": "dwarf2unwind : Force the CFA after remember/restore pairs [44107/48097].\n\nThis address one of the more long-standing and serious regressions\nfor Darwin.  GCC emits unwind code by default on the assumption that\nthe unwinder will be (of have the same capability) as the one in the\ncurrent libgcc_s.  For Darwin platforms, this is not the case - some\nof them are based on the libgcc_s from GCC-4.2.1 and some are using\nthe unwinder provided by libunwind (part of the LLVM project). The\nlatter implementation has gradually adopted a section that deals with\nGNU unwind.\n\nThe most serious problem for some of the platform versions is in\nhandling DW_CFA_remember/restore_state pairs.  The DWARF description\ntalks about these in terms of saving/restoring register rows; this is\nwhat GCC originally did (and is what the unwinders do for the Darwin\nversions based on libgcc_s).\n\nHowever, in r118068, this was changed so that not only the registers\nbut also the current frame address expression were saved.  The unwind\ncode assumes that the unwinder will do this; some of Darwin's unwinders\ndo not, leading to lockups etc.  To date, the only solution has been\nto replace the system libgcc_s with a newer one which is not a viable\nsolution for many end-users (since that means overwritting the one\nprovided with the system installation).\n\nThe fix here provides a target hook that allows the target to specify\nthat the CFA should be reinstated after a DW_CFA_restore.  This fixes\nthe issue (and also the closed WONTFIX of 44107).\n\n(As a matter of record, it also fixes reported Java issues if\n backported to GCC-5).\n\ngcc/ChangeLog:\n\n\tPR target/44107\n\tPR target/48097\n\t* config/darwin-protos.h (darwin_should_restore_cfa_state): New.\n\t* config/darwin.c (darwin_should_restore_cfa_state): New.\n\t* config/darwin.h (TARGET_ASM_SHOULD_RESTORE_CFA_STATE): New.\n\t* doc/tm.texi: Regenerated.\n\t* doc/tm.texi.in: Document TARGET_ASM_SHOULD_RESTORE_CFA_STATE.\n\t* dwarf2cfi.c (connect_traces): If the target requests, restore\n\tthe CFA expression after a DW_CFA_restore.\n\t* target.def (TARGET_ASM_SHOULD_RESTORE_CFA_STATE): New hook.", "tree": {"sha": "121a08ea63f1e22a97b0bf645de5432c8fe40c2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/121a08ea63f1e22a97b0bf645de5432c8fe40c2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/491d5b3cf8216f9285a67aa213b9a66b0035137b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/491d5b3cf8216f9285a67aa213b9a66b0035137b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/491d5b3cf8216f9285a67aa213b9a66b0035137b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/491d5b3cf8216f9285a67aa213b9a66b0035137b/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ed0a92f6cfc647e2ad8ceaa1e5709545c915465", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ed0a92f6cfc647e2ad8ceaa1e5709545c915465", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ed0a92f6cfc647e2ad8ceaa1e5709545c915465"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "f5ef82456aa067be1e5b89b32ee60dc4322db616", "filename": "gcc/config/darwin-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/491d5b3cf8216f9285a67aa213b9a66b0035137b/gcc%2Fconfig%2Fdarwin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/491d5b3cf8216f9285a67aa213b9a66b0035137b/gcc%2Fconfig%2Fdarwin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-protos.h?ref=491d5b3cf8216f9285a67aa213b9a66b0035137b", "patch": "@@ -70,6 +70,7 @@ extern void darwin_non_lazy_pcrel (FILE *, rtx);\n extern void darwin_emit_unwind_label (FILE *, tree, int, int);\n extern void darwin_emit_except_table_label (FILE *);\n extern rtx darwin_make_eh_symbol_indirect (rtx, bool);\n+extern bool darwin_should_restore_cfa_state (void);\n \n extern void darwin_pragma_ignore (struct cpp_reader *);\n extern void darwin_pragma_options (struct cpp_reader *);"}, {"sha": "e2e60bbf1b25977981bb34a65e33df75dfb4d219", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/491d5b3cf8216f9285a67aa213b9a66b0035137b/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/491d5b3cf8216f9285a67aa213b9a66b0035137b/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=491d5b3cf8216f9285a67aa213b9a66b0035137b", "patch": "@@ -2236,6 +2236,16 @@ darwin_make_eh_symbol_indirect (rtx orig, bool ARG_UNUSED (pubvis))\n \t\t\t\t\t\t\t/*stub_p=*/false));\n }\n \n+/* The unwinders in earlier Darwin versions are based on an old version\n+   of libgcc_s and need current frame address stateto be reset after a\n+   DW_CFA_restore_state recovers the register values.  */\n+\n+bool\n+darwin_should_restore_cfa_state (void)\n+{\n+  return generating_for_darwin_version <= 10;\n+}\n+\n /* Return, and mark as used, the name of the stub for the mcount function.\n    Currently, this is only called by X86 code in the expansion of the\n    FUNCTION_PROFILER macro, when stubs are enabled.  */"}, {"sha": "d2b2c141c8ed924b52ecf4eacf0075f1877491a7", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/491d5b3cf8216f9285a67aa213b9a66b0035137b/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/491d5b3cf8216f9285a67aa213b9a66b0035137b/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=491d5b3cf8216f9285a67aa213b9a66b0035137b", "patch": "@@ -614,6 +614,11 @@ extern GTY(()) int darwin_ms_struct;\n /* Make an EH (personality or LDSA) symbol indirect as needed.  */\n #define TARGET_ASM_MAKE_EH_SYMBOL_INDIRECT darwin_make_eh_symbol_indirect\n \n+/* Some of Darwin's unwinders need current frame address state to be reset\n+   after a DW_CFA_restore_state recovers the register values.  */\n+#undef TARGET_ASM_SHOULD_RESTORE_CFA_STATE\n+#define TARGET_ASM_SHOULD_RESTORE_CFA_STATE darwin_should_restore_cfa_state\n+\n /* Our profiling scheme doesn't LP labels and counter words.  */\n \n #define NO_PROFILE_COUNTERS\t1"}, {"sha": "a25ca6c78b5c132b3a651246cbea0dd45d500521", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/491d5b3cf8216f9285a67aa213b9a66b0035137b/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/491d5b3cf8216f9285a67aa213b9a66b0035137b/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=491d5b3cf8216f9285a67aa213b9a66b0035137b", "patch": "@@ -9551,6 +9551,10 @@ If necessary, modify personality and LSDA references to handle indirection.  The\n True if the @code{TARGET_ASM_UNWIND_EMIT} hook should be called before the assembly for @var{insn} has been emitted, false if the hook should be called afterward.\n @end deftypevr\n \n+@deftypefn {Target Hook} bool TARGET_ASM_SHOULD_RESTORE_CFA_STATE (void)\n+For DWARF-based unwind frames, two CFI instructions provide for save and restore of register state.  GCC maintains the current frame address (CFA) separately from the register bank but the unwinder in libgcc preserves this state along with the registers (and this is expected by the code that writes the unwind frames).  This hook allows the target to specify that the CFA data is not saved/restored along with the registers by the target unwinder so that suitable additional instructions should be emitted to restore it.\n+@end deftypefn\n+\n @node Exception Region Output\n @subsection Assembler Commands for Exception Regions\n "}, {"sha": "bf724dc093cb5320f47c736f64cb8d3f999ece60", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/491d5b3cf8216f9285a67aa213b9a66b0035137b/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/491d5b3cf8216f9285a67aa213b9a66b0035137b/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=491d5b3cf8216f9285a67aa213b9a66b0035137b", "patch": "@@ -6462,6 +6462,8 @@ the jump-table.\n \n @hook TARGET_ASM_UNWIND_EMIT_BEFORE_INSN\n \n+@hook TARGET_ASM_SHOULD_RESTORE_CFA_STATE\n+\n @node Exception Region Output\n @subsection Assembler Commands for Exception Regions\n "}, {"sha": "2fa9f325360f74a2717b7dae2dbae6cca47163cf", "filename": "gcc/dwarf2cfi.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/491d5b3cf8216f9285a67aa213b9a66b0035137b/gcc%2Fdwarf2cfi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/491d5b3cf8216f9285a67aa213b9a66b0035137b/gcc%2Fdwarf2cfi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.c?ref=491d5b3cf8216f9285a67aa213b9a66b0035137b", "patch": "@@ -2848,6 +2848,12 @@ connect_traces (void)\n \t      cfi->dw_cfi_opc = DW_CFA_restore_state;\n \t      add_cfi (cfi);\n \n+\t      /* If the target unwinder does not save the CFA as part of the\n+\t\t register state, we need to restore it separately.  */\n+\t      if (targetm.asm_out.should_restore_cfa_state ()\n+\t\t  && (cfi = def_cfa_0 (&old_row->cfa, &ti->beg_row->cfa)))\n+\t\tadd_cfi (cfi);\n+\n \t      old_row = prev_ti->beg_row;\n \t    }\n \t  /* Otherwise, we'll simply change state from the previous end.  */"}, {"sha": "d9e151bb129b7f2a6ab11bf30109e8c9bca67234", "filename": "gcc/target.def", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/491d5b3cf8216f9285a67aa213b9a66b0035137b/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/491d5b3cf8216f9285a67aa213b9a66b0035137b/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=491d5b3cf8216f9285a67aa213b9a66b0035137b", "patch": "@@ -211,6 +211,20 @@ DEFHOOKPOD\n  be called afterward.\",\n  bool, true)\n \n+/* Return true if the target needs extra instructions to restore the current\n+   frame address after a DW_CFA_restore_state opcode.  */\n+DEFHOOK\n+(should_restore_cfa_state,\n+ \"For DWARF-based unwind frames, two CFI instructions provide for save and\\\n+ restore of register state.  GCC maintains the current frame address (CFA)\\\n+ separately from the register bank but the unwinder in libgcc preserves this\\\n+ state along with the registers (and this is expected by the code that writes\\\n+ the unwind frames).  This hook allows the target to specify that the CFA data\\\n+ is not saved/restored along with the registers by the target unwinder so that\\\n+ suitable additional instructions should be emitted to restore it.\",\n+ bool, (void),\n+ hook_bool_void_false)\n+\n /* Generate an internal label.\n    For now this is just a wrapper for ASM_GENERATE_INTERNAL_LABEL.  */\n DEFHOOK_UNDOC"}]}