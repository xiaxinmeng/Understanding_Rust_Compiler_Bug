{"sha": "e5206274848085463852802030a773f82a224b00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUyMDYyNzQ4NDgwODU0NjM4NTI4MDIwMzBhNzczZjgyYTIyNGIwMA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-04-20T15:31:30Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-04-20T15:31:30Z"}, "message": "tree-ssa-phiopt.c (tree_ssa_phi_opt): Update calls to conditional_replacement...\n\n\t* tree-ssa-phiopt.c (tree_ssa_phi_opt): Update calls to\n\tconditional_replacement, value_replacement, abs_replacement,\n\tminmax_replacement.\n\t(replace_phi_edge_with_variable): Remove argument BB.\n\t(conditional_replacement, value_replacement,\n\tminmax_replacement, abs_replacement): Remove argument PHI_BB.\n\tUpdate a call to replace_phi_edge_with_variable.\n\nFrom-SVN: r98461", "tree": {"sha": "1d9fb9111fe724185b65076dea6e772fe4a48ee3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d9fb9111fe724185b65076dea6e772fe4a48ee3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5206274848085463852802030a773f82a224b00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5206274848085463852802030a773f82a224b00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5206274848085463852802030a773f82a224b00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5206274848085463852802030a773f82a224b00/comments", "author": null, "committer": null, "parents": [{"sha": "687b527d75fed234ded60206c1b42a74f8e7fb39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/687b527d75fed234ded60206c1b42a74f8e7fb39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/687b527d75fed234ded60206c1b42a74f8e7fb39"}], "stats": {"total": 48, "additions": 29, "deletions": 19}, "files": [{"sha": "e54067d5d90c76bb4a481e14ddad6b84096b56f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5206274848085463852802030a773f82a224b00/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5206274848085463852802030a773f82a224b00/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5206274848085463852802030a773f82a224b00", "patch": "@@ -1,3 +1,13 @@\n+2005-04-20  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-ssa-phiopt.c (tree_ssa_phi_opt): Update calls to\n+\tconditional_replacement, value_replacement, abs_replacement,\n+\tminmax_replacement.\n+\t(replace_phi_edge_with_variable): Remove argument BB.\n+\t(conditional_replacement, value_replacement,\n+\tminmax_replacement, abs_replacement): Remove argument PHI_BB.\n+\tUpdate a call to replace_phi_edge_with_variable.\n+\n 2005-04-20  Michael Matz  <matz@suse.de>\n \n \tPR20973"}, {"sha": "61491808dd6e8fde90258b6bfc7f49ae5ade9410", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5206274848085463852802030a773f82a224b00/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5206274848085463852802030a773f82a224b00/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=e5206274848085463852802030a773f82a224b00", "patch": "@@ -37,16 +37,15 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"langhooks.h\"\n \n static void tree_ssa_phiopt (void);\n-static bool conditional_replacement (basic_block, basic_block, basic_block,\n+static bool conditional_replacement (basic_block, basic_block,\n \t\t\t\t     edge, edge, tree, tree, tree);\n-static bool value_replacement (basic_block, basic_block, basic_block,\n+static bool value_replacement (basic_block, basic_block,\n \t\t\t       edge, edge, tree, tree, tree);\n-static bool minmax_replacement (basic_block, basic_block, basic_block,\n+static bool minmax_replacement (basic_block, basic_block,\n \t\t\t\tedge, edge, tree, tree, tree);\n-static bool abs_replacement (basic_block, basic_block, basic_block,\n+static bool abs_replacement (basic_block, basic_block,\n \t\t\t     edge, edge, tree, tree, tree);\n-static void replace_phi_edge_with_variable (basic_block, basic_block, edge,\n-\t\t\t\t\t    tree, tree);\n+static void replace_phi_edge_with_variable (basic_block, edge, tree, tree);\n static basic_block *blocks_in_phiopt_order (void);\n \n /* This pass tries to replaces an if-then-else block with an\n@@ -227,14 +226,14 @@ tree_ssa_phiopt (void)\n       gcc_assert (arg0 != NULL && arg1 != NULL);\n \n       /* Do the replacement of conditional if it can be done.  */\n-      if (conditional_replacement (bb, bb1, bb2, e1, e2, phi, arg0, arg1))\n+      if (conditional_replacement (bb, bb1, e1, e2, phi, arg0, arg1))\n \t;\n-      else if (value_replacement (bb, bb1, bb2, e1, e2, phi, arg0, arg1))\n+      else if (value_replacement (bb, bb1, e1, e2, phi, arg0, arg1))\n \t;\n-      else if (abs_replacement (bb, bb1, bb2, e1, e2, phi, arg0, arg1))\n+      else if (abs_replacement (bb, bb1, e1, e2, phi, arg0, arg1))\n \t;\n       else\n-\tminmax_replacement (bb, bb1, bb2, e1, e2, phi, arg0, arg1);\n+\tminmax_replacement (bb, bb1, e1, e2, phi, arg0, arg1);\n     }\n \n   free (bb_order);\n@@ -317,9 +316,10 @@ empty_block_p (basic_block bb)\n    is known to have two edges, one of which must reach BB).  */\n \n static void\n-replace_phi_edge_with_variable (basic_block cond_block, basic_block bb,\n+replace_phi_edge_with_variable (basic_block cond_block,\n \t\t\t\tedge e, tree phi, tree new)\n {\n+  basic_block bb = bb_for_stmt (phi);\n   basic_block block_to_remove;\n   block_stmt_iterator bsi;\n \n@@ -363,7 +363,7 @@ replace_phi_edge_with_variable (basic_block cond_block, basic_block bb,\n \n static bool\n conditional_replacement (basic_block cond_bb, basic_block middle_bb,\n-\t\t\t basic_block phi_bb, edge e0, edge e1, tree phi,\n+\t\t\t edge e0, edge e1, tree phi,\n \t\t\t tree arg0, tree arg1)\n {\n   tree result;\n@@ -495,7 +495,7 @@ conditional_replacement (basic_block cond_bb, basic_block middle_bb,\n \n   SSA_NAME_DEF_STMT (new_var1) = new;\n \n-  replace_phi_edge_with_variable (cond_bb, phi_bb, e1, phi, new_var1);\n+  replace_phi_edge_with_variable (cond_bb, e1, phi, new_var1);\n \n   /* Note that we optimized this PHI.  */\n   return true;\n@@ -509,7 +509,7 @@ conditional_replacement (basic_block cond_bb, basic_block middle_bb,\n \n static bool\n value_replacement (basic_block cond_bb, basic_block middle_bb,\n-\t\t   basic_block phi_bb, edge e0, edge e1, tree phi,\n+\t\t   edge e0, edge e1, tree phi,\n \t\t   tree arg0, tree arg1)\n {\n   tree cond;\n@@ -571,7 +571,7 @@ value_replacement (basic_block cond_bb, basic_block middle_bb,\n       else\n \targ = arg1;\n \n-      replace_phi_edge_with_variable (cond_bb, phi_bb, e1, phi, arg);\n+      replace_phi_edge_with_variable (cond_bb, e1, phi, arg);\n \n       /* Note that we optimized this PHI.  */\n       return true;\n@@ -587,7 +587,7 @@ value_replacement (basic_block cond_bb, basic_block middle_bb,\n \n static bool\n minmax_replacement (basic_block cond_bb, basic_block middle_bb,\n-\t\t    basic_block phi_bb, edge e0, edge e1, tree phi,\n+\t\t    edge e0, edge e1, tree phi,\n \t\t    tree arg0, tree arg1)\n {\n   tree result, type;\n@@ -826,7 +826,7 @@ minmax_replacement (basic_block cond_bb, basic_block middle_bb,\n   bsi = bsi_last (cond_bb);\n   bsi_insert_before (&bsi, new, BSI_NEW_STMT);\n \n-  replace_phi_edge_with_variable (cond_bb, phi_bb, e1, phi, result);\n+  replace_phi_edge_with_variable (cond_bb, e1, phi, result);\n   return true;\n }\n \n@@ -838,7 +838,7 @@ minmax_replacement (basic_block cond_bb, basic_block middle_bb,\n \n static bool\n abs_replacement (basic_block cond_bb, basic_block middle_bb,\n-\t\t basic_block phi_bb, edge e0 ATTRIBUTE_UNUSED, edge e1,\n+\t\t edge e0 ATTRIBUTE_UNUSED, edge e1,\n \t\t tree phi, tree arg0, tree arg1)\n {\n   tree result;\n@@ -947,7 +947,7 @@ abs_replacement (basic_block cond_bb, basic_block middle_bb,\n     }\n \n   SSA_NAME_DEF_STMT (result) = new;\n-  replace_phi_edge_with_variable (cond_bb, phi_bb, e1, phi, result);\n+  replace_phi_edge_with_variable (cond_bb, e1, phi, result);\n \n   /* Note that we optimized this PHI.  */\n   return true;"}]}