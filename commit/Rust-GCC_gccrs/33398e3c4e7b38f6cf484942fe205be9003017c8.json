{"sha": "33398e3c4e7b38f6cf484942fe205be9003017c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzMzOThlM2M0ZTdiMzhmNmNmNDg0OTQyZmUyMDViZTkwMDMwMTdjOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-16T13:11:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-16T13:11:18Z"}, "message": "[multiple changes]\n\n2015-10-16  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Build_Predicate_Functions): The expression for\n\tthe predicate is side-effect free if it does not contain any\n\tvariable references.\n\n2015-10-16  Bob Duff  <duff@adacore.com>\n\n\t* a-convec.adb (\"=\"): Previous version depended\n\ton \"=\" composing, but that doesn't quite work -- we want the \"=\"\n\toperator passed in to the generic. So we need a loop after all.\n\n2015-10-16  Yannick Moy  <moy@adacore.com>\n\n\t* sem_util.adb (Is_Object_Reference): Attribute 'Loop_Entry produces\n\tan object.\n\t* sem_ch6.adb: Minor fix in comment.\n\nFrom-SVN: r228897", "tree": {"sha": "98aa8486ef3f76ece26106e0adea46d66b8e4c44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98aa8486ef3f76ece26106e0adea46d66b8e4c44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33398e3c4e7b38f6cf484942fe205be9003017c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33398e3c4e7b38f6cf484942fe205be9003017c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33398e3c4e7b38f6cf484942fe205be9003017c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33398e3c4e7b38f6cf484942fe205be9003017c8/comments", "author": null, "committer": null, "parents": [{"sha": "2a738b3469af68a64477662c051424b9a089ce62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a738b3469af68a64477662c051424b9a089ce62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a738b3469af68a64477662c051424b9a089ce62"}], "stats": {"total": 67, "additions": 45, "deletions": 22}, "files": [{"sha": "47c186cd77c2dba17134f9ec0cd4f4f058ff9ef3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33398e3c4e7b38f6cf484942fe205be9003017c8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33398e3c4e7b38f6cf484942fe205be9003017c8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=33398e3c4e7b38f6cf484942fe205be9003017c8", "patch": "@@ -1,3 +1,21 @@\n+2015-10-16  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Build_Predicate_Functions): The expression for\n+\tthe predicate is side-effect free if it does not contain any\n+\tvariable references.\n+\n+2015-10-16  Bob Duff  <duff@adacore.com>\n+\n+\t* a-convec.adb (\"=\"): Previous version depended\n+\ton \"=\" composing, but that doesn't quite work -- we want the \"=\"\n+\toperator passed in to the generic. So we need a loop after all.\n+\n+2015-10-16  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_util.adb (Is_Object_Reference): Attribute 'Loop_Entry produces\n+\tan object.\n+\t* sem_ch6.adb: Minor fix in comment.\n+\n 2015-10-16  Bob Duff  <duff@adacore.com>\n \n \t* a-contai.ads: Add two check names: Container_Checks and"}, {"sha": "b6440f9f58b98e4079de3c28b60b400840705e37", "filename": "gcc/ada/a-convec.adb", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33398e3c4e7b38f6cf484942fe205be9003017c8/gcc%2Fada%2Fa-convec.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33398e3c4e7b38f6cf484942fe205be9003017c8/gcc%2Fada%2Fa-convec.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-convec.adb?ref=33398e3c4e7b38f6cf484942fe205be9003017c8", "patch": "@@ -100,20 +100,23 @@ package body Ada.Containers.Vectors is\n    ---------\n \n    overriding function \"=\" (Left, Right : Vector) return Boolean is\n-   begin\n       --  Per AI05-0022, the container implementation is required to detect\n       --  element tampering by a generic actual subprogram.\n \n-      declare\n-         Lock_Left : With_Lock (Left.TC'Unrestricted_Access);\n-         Lock_Right : With_Lock (Right.TC'Unrestricted_Access);\n-         Left_Valid : Elements_Array renames\n-           Left.Elements.EA (Index_Type'First .. Left.Last);\n-         Right_Valid : Elements_Array renames\n-           Right.Elements.EA (Index_Type'First .. Right.Last);\n-      begin\n-         return Left_Valid = Right_Valid;\n-      end;\n+      Lock_Left : With_Lock (Left.TC'Unrestricted_Access);\n+      Lock_Right : With_Lock (Right.TC'Unrestricted_Access);\n+   begin\n+      if Left.Last /= Right.Last then\n+         return False;\n+      end if;\n+\n+      for J in Index_Type range Index_Type'First .. Left.Last loop\n+         if Left.Elements.EA (J) /= Right.Elements.EA (J) then\n+            return False;\n+         end if;\n+      end loop;\n+\n+      return True;\n    end \"=\";\n \n    ------------"}, {"sha": "b820f4ddcc7e19dca22e41cb2fa21c3669caf7b9", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33398e3c4e7b38f6cf484942fe205be9003017c8/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33398e3c4e7b38f6cf484942fe205be9003017c8/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=33398e3c4e7b38f6cf484942fe205be9003017c8", "patch": "@@ -8706,12 +8706,12 @@ package body Sem_Ch13 is\n             --  Static predicate functions are always side-effect free, and\n             --  in most cases dynamic predicate functions are as well. Mark\n             --  them as such whenever possible, so redundant predicate checks\n-            --  can be optimized.\n-\n-            --  Shouldn't Variable_Ref be True for Side_Effect_Free call ???\n+            --  can be optimized. If there is a variable reference within the\n+            --  expression, the function is not pure.\n \n             if Expander_Active then\n-               Set_Is_Pure (SId, Side_Effect_Free (Expr));\n+               Set_Is_Pure (SId,\n+                 Side_Effect_Free (Expr, Variable_Ref => True));\n                Set_Is_Inlined (SId);\n             end if;\n          end;"}, {"sha": "2151cf8b998ab9a0cd12b8dc31c7e804295f73bd", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33398e3c4e7b38f6cf484942fe205be9003017c8/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33398e3c4e7b38f6cf484942fe205be9003017c8/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=33398e3c4e7b38f6cf484942fe205be9003017c8", "patch": "@@ -2341,13 +2341,12 @@ package body Sem_Ch6 is\n          Item  : Node_Id;\n \n       begin\n-         --  Check for unanalyzed aspects in the body that will generate a\n-         --  contract.\n+         --  Check for aspects that may generate a contract\n \n          if Present (Aspect_Specifications (N)) then\n             Item := First (Aspect_Specifications (N));\n             while Present (Item) loop\n-               if Is_Contract_Annotation (Item) then\n+               if Is_Subprogram_Contract_Annotation (Item) then\n                   return True;\n                end if;\n \n@@ -2361,7 +2360,7 @@ package body Sem_Ch6 is\n             Item := First (Decls);\n             while Present (Item) loop\n                if Nkind (Item) = N_Pragma\n-                 and then Is_Contract_Annotation (Item)\n+                 and then Is_Subprogram_Contract_Annotation (Item)\n                then\n                   return True;\n                end if;"}, {"sha": "d5a798043fc2c78690a479a6e9632d0b7d893145", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33398e3c4e7b38f6cf484942fe205be9003017c8/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33398e3c4e7b38f6cf484942fe205be9003017c8/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=33398e3c4e7b38f6cf484942fe205be9003017c8", "patch": "@@ -12101,12 +12101,15 @@ package body Sem_Util is\n             when N_Function_Call =>\n                return Etype (N) /= Standard_Void_Type;\n \n-            --  Attributes 'Input, 'Old and 'Result produce objects\n+            --  Attributes 'Input, 'Loop_Entry, 'Old and 'Result produce\n+            --  objects.\n \n             when N_Attribute_Reference =>\n                return\n-                 Nam_In\n-                   (Attribute_Name (N), Name_Input, Name_Old, Name_Result);\n+                 Nam_In (Attribute_Name (N), Name_Input,\n+                                             Name_Loop_Entry,\n+                                             Name_Old,\n+                                             Name_Result);\n \n             when N_Selected_Component =>\n                return"}]}