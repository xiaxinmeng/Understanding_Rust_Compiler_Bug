{"sha": "56b8325e5b1c5237547295a1d1b58bba91adac5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZiODMyNWU1YjFjNTIzNzU0NzI5NWExZDFiNThiYmE5MWFkYWM1YQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-12-20T17:45:41Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-12-20T17:45:41Z"}, "message": "re PR java/3417 (Downcast on integral types.)\n\n\tFix for PR java/3417:\n\t* parse.y (patch_assignment): Added special processing for\n\t`return'.\n\t(patch_return): Don't convert booleans to integers, and don't\n\tspecial-case `null'.\n\nFrom-SVN: r48208", "tree": {"sha": "f0980b19ce3c384cbedaa0f02606745a4c8b12b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0980b19ce3c384cbedaa0f02606745a4c8b12b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56b8325e5b1c5237547295a1d1b58bba91adac5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b8325e5b1c5237547295a1d1b58bba91adac5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56b8325e5b1c5237547295a1d1b58bba91adac5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b8325e5b1c5237547295a1d1b58bba91adac5a/comments", "author": null, "committer": null, "parents": [{"sha": "82af613ff3d8b809dc30ab61b1e6183039e36567", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82af613ff3d8b809dc30ab61b1e6183039e36567", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82af613ff3d8b809dc30ab61b1e6183039e36567"}], "stats": {"total": 39, "additions": 25, "deletions": 14}, "files": [{"sha": "9c738dcb23ab76864b271bea6ba28578653a1936", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b8325e5b1c5237547295a1d1b58bba91adac5a/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b8325e5b1c5237547295a1d1b58bba91adac5a/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=56b8325e5b1c5237547295a1d1b58bba91adac5a", "patch": "@@ -1,3 +1,11 @@\n+2001-12-20  Tom Tromey  <tromey@redhat.com>\n+\n+\tFix for PR java/3417:\n+\t* parse.y (patch_assignment): Added special processing for\n+\t`return'.\n+\t(patch_return): Don't convert booleans to integers, and don't\n+\tspecial-case `null'.\n+\n 2001-12-20  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* config-lang.in (diff_excludes): Remove."}, {"sha": "47fcd7352bf1503b818fb53683832647fc04553b", "filename": "gcc/java/parse.y", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b8325e5b1c5237547295a1d1b58bba91adac5a/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b8325e5b1c5237547295a1d1b58bba91adac5a/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=56b8325e5b1c5237547295a1d1b58bba91adac5a", "patch": "@@ -12526,6 +12526,7 @@ patch_assignment (node, wfl_op1)\n   tree lhs_type = NULL_TREE, rhs_type, new_rhs = NULL_TREE;\n   int error_found = 0;\n   int lvalue_from_array = 0;\n+  int is_return = 0;\n \n   EXPR_WFL_LINECOL (wfl_operator) = EXPR_WFL_LINECOL (node);\n \n@@ -12546,7 +12547,15 @@ patch_assignment (node, wfl_op1)\n     lhs_type = TREE_TYPE (lvalue);\n   /* Or a function return slot */\n   else if (TREE_CODE (lvalue) == RESULT_DECL)\n-    lhs_type = TREE_TYPE (lvalue);\n+    {\n+      /* If the return type is an integral type, then we create the\n+\t RESULT_DECL with a promoted type, but we need to do these\n+\t checks against the unpromoted type to ensure type safety.  So\n+\t here we look at the real type, not the type of the decl we\n+\t are modifying.  */\n+      lhs_type = TREE_TYPE (TREE_TYPE (current_function_decl));\n+      is_return = 1;\n+    }\n   /* Otherwise, we might want to try to write into an optimized static\n      final, this is an of a different nature, reported further on. */\n   else if (TREE_CODE (wfl_op1) == EXPR_WITH_FILE_LOCATION\n@@ -12561,6 +12570,7 @@ patch_assignment (node, wfl_op1)\n     }\n \n   rhs_type = TREE_TYPE (rhs);\n+\n   /* 5.1 Try the assignment conversion for builtin type. */\n   new_rhs = try_builtin_assignconv (wfl_op1, lhs_type, rhs);\n \n@@ -12598,7 +12608,7 @@ patch_assignment (node, wfl_op1)\n \t  wfl = wfl_operator;\n \t  if (COMPOUND_ASSIGN_P (TREE_OPERAND (node, 1)))\n \t    strcpy (operation, \"assignment\");\n-\t  else if (TREE_CODE (TREE_OPERAND (node, 0)) == RESULT_DECL)\n+\t  else if (is_return)\n \t    strcpy (operation, \"`return'\");\n \t  else\n \t    strcpy (operation, \"`='\");\n@@ -12618,6 +12628,11 @@ patch_assignment (node, wfl_op1)\n   if (error_found)\n     return error_mark_node;\n \n+  /* If we're processing a `return' statement, promote the actual type\n+     to the promoted type.  */\n+  if (is_return)\n+    new_rhs = convert (TREE_TYPE (lvalue), new_rhs);\n+\n   /* 10.10: Array Store Exception runtime check */\n   if (!flag_emit_class_files\n       && !flag_emit_xref\n@@ -14646,18 +14661,6 @@ patch_return (node)\n       tree exp = java_complete_tree (return_exp);\n       tree modify, patched;\n \n-      /* If the function returned value and EXP are booleans, EXP has\n-      to be converted into the type of DECL_RESULT, which is integer\n-      (see complete_start_java_method) */\n-      if (TREE_TYPE (exp) == boolean_type_node &&\n-\t  TREE_TYPE (TREE_TYPE (meth)) == boolean_type_node)\n-\texp = convert_to_integer (TREE_TYPE (DECL_RESULT (meth)), exp);\n-\n-      /* `null' can be assigned to a function returning a reference */\n-      if (JREFERENCE_TYPE_P (TREE_TYPE (TREE_TYPE (meth))) &&\n-\t  exp == null_pointer_node)\n-\texp = build_null_of_type (TREE_TYPE (TREE_TYPE (meth)));\n-\n       if ((patched = patch_string (exp)))\n \texp = patched;\n       "}]}