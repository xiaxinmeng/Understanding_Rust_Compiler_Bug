{"sha": "96735c06181e71c4b0f87a63f92c290f31ab4541", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY3MzVjMDYxODFlNzFjNGIwZjg3YTYzZjkyYzI5MGYzMWFiNDU0MQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-25T10:53:48Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-25T10:53:48Z"}, "message": "(C_DECL_ANTICIPATED): New macro.\n\nFrom-SVN: r1286", "tree": {"sha": "b3daa4c81da91778793cca5106697e7c71f4d2ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3daa4c81da91778793cca5106697e7c71f4d2ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96735c06181e71c4b0f87a63f92c290f31ab4541", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96735c06181e71c4b0f87a63f92c290f31ab4541", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96735c06181e71c4b0f87a63f92c290f31ab4541", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96735c06181e71c4b0f87a63f92c290f31ab4541/comments", "author": null, "committer": null, "parents": [{"sha": "6b19af32d6217c742bc1d32c600532505736a025", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b19af32d6217c742bc1d32c600532505736a025", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b19af32d6217c742bc1d32c600532505736a025"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "46b5650cf69295a0c0ba3b23d5b837047661f0df", "filename": "gcc/c-tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96735c06181e71c4b0f87a63f92c290f31ab4541/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96735c06181e71c4b0f87a63f92c290f31ab4541/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=96735c06181e71c4b0f87a63f92c290f31ab4541", "patch": "@@ -91,6 +91,11 @@ struct lang_type\n /* Record whether a typedef for type `int' was actually `signed int'.  */\n #define C_TYPEDEF_EXPLICITLY_SIGNED(exp) DECL_LANG_FLAG_1 ((exp))\n \n+/* Nonzero for a declaration of a built in function if there has been no\n+   occasion that would declare the function in ordinary C.\n+   Using the function draws a pedantic warning in this case.  */\n+#define C_DECL_ANTICIPATED(exp) DECL_LANG_FLAG_3 ((exp))\n+\n /* For FUNCTION_TYPE, a hidden list of types of arguments.  The same as\n    TYPE_ARG_TYPES for functions with prototypes, but created for functions\n    without prototypes.  */"}]}