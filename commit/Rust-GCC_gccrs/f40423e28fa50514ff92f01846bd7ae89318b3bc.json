{"sha": "f40423e28fa50514ff92f01846bd7ae89318b3bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQwNDIzZTI4ZmE1MDUxNGZmOTJmMDE4NDZiZDdhZTg5MzE4YjNiYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2013-08-08T18:42:21Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2013-08-08T18:42:21Z"}, "message": "re PR rtl-optimization/58079 (internal compiler error: in do_SUBST, at combine.c:711)\n\ngcc/\n\tPR rtl-optimization/58079\n\t* combine.c (combine_simplify_rtx): Avoid using SUBST if\n\tsimplify_comparison has widened a comparison with an integer.\n\ngcc/testsuite/\n\t* gcc.dg/torture/pr58079.c: New test.\n\nFrom-SVN: r201609", "tree": {"sha": "da52318ec63d85be2410eb5e67acd9e1c0c74225", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da52318ec63d85be2410eb5e67acd9e1c0c74225"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f40423e28fa50514ff92f01846bd7ae89318b3bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f40423e28fa50514ff92f01846bd7ae89318b3bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f40423e28fa50514ff92f01846bd7ae89318b3bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f40423e28fa50514ff92f01846bd7ae89318b3bc/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d0595b65c9461d9f13f88b383f8dcef017c6c374", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0595b65c9461d9f13f88b383f8dcef017c6c374", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0595b65c9461d9f13f88b383f8dcef017c6c374"}], "stats": {"total": 128, "additions": 126, "deletions": 2}, "files": [{"sha": "8b4d41ffb013f23a3660d29e78148a3e485f22fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f40423e28fa50514ff92f01846bd7ae89318b3bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f40423e28fa50514ff92f01846bd7ae89318b3bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f40423e28fa50514ff92f01846bd7ae89318b3bc", "patch": "@@ -1,3 +1,9 @@\n+2013-08-08  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tPR rtl-optimization/58079\n+\t* combine.c (combine_simplify_rtx): Avoid using SUBST if\n+\tsimplify_comparison has widened a comparison with an integer.\n+\n 2013-08-08  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/neon.md (movmisalign<mode>): Disable when we"}, {"sha": "29dfd15cc9f3ddc1386074f34499a33a82c7787c", "filename": "gcc/combine.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f40423e28fa50514ff92f01846bd7ae89318b3bc/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f40423e28fa50514ff92f01846bd7ae89318b3bc/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=f40423e28fa50514ff92f01846bd7ae89318b3bc", "patch": "@@ -5803,8 +5803,15 @@ combine_simplify_rtx (rtx x, enum machine_mode op0_mode, int in_dest,\n \t\treturn x;\n \t    }\n \n-\t  /* If the code changed, return a whole new comparison.  */\n-\t  if (new_code != code)\n+\t  /* If the code changed, return a whole new comparison.\n+\t     We also need to avoid using SUBST in cases where\n+\t     simplify_comparison has widened a comparison with a CONST_INT,\n+\t     since in that case the wider CONST_INT may fail the sanity\n+\t     checks in do_SUBST.  */\n+\t  if (new_code != code\n+\t      || (CONST_INT_P (op1)\n+\t\t  && GET_MODE (op0) != GET_MODE (XEXP (x, 0))\n+\t\t  && GET_MODE (op0) != GET_MODE (XEXP (x, 1))))\n \t    return gen_rtx_fmt_ee (new_code, mode, op0, op1);\n \n \t  /* Otherwise, keep this operation, but maybe change its operands."}, {"sha": "d86db3082a990417f4fff72fb0d524525bc755ea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f40423e28fa50514ff92f01846bd7ae89318b3bc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f40423e28fa50514ff92f01846bd7ae89318b3bc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f40423e28fa50514ff92f01846bd7ae89318b3bc", "patch": "@@ -1,3 +1,7 @@\n+2013-08-08  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* gcc.dg/torture/pr58079.c: New test.\n+\n 2013-08-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/warn9.adb: New test."}, {"sha": "99a30181f1edbf44017616ba165c6b5803ee2149", "filename": "gcc/testsuite/gcc.dg/torture/pr58079.c", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f40423e28fa50514ff92f01846bd7ae89318b3bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58079.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f40423e28fa50514ff92f01846bd7ae89318b3bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58079.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58079.c?ref=f40423e28fa50514ff92f01846bd7ae89318b3bc", "patch": "@@ -0,0 +1,107 @@\n+/* { dg-options \"-mlong-calls\" { target mips*-*-* } } */\n+\n+typedef unsigned char u8;\n+typedef unsigned short u16;\n+typedef unsigned int __kernel_size_t;\n+typedef __kernel_size_t size_t;\n+struct list_head {\n+ struct list_head *next;\n+};\n+\n+struct dmx_ts_feed {\n+ int is_filtering;\n+};\n+struct dmx_section_feed {\n+ u16 secbufp;\n+ u16 seclen;\n+ u16 tsfeedp;\n+};\n+\n+typedef int (*dmx_ts_cb) (\n+\tconst u8 * buffer1,\n+      size_t buffer1_length,\n+      const u8 * buffer2,\n+      size_t buffer2_length\n+);\n+\n+struct dvb_demux_feed {\n+ union {\n+  struct dmx_ts_feed ts;\n+  struct dmx_section_feed sec;\n+ } feed;\n+ union {\n+  dmx_ts_cb ts;\n+ } cb;\n+ int type;\n+ u16 pid;\n+ int ts_type;\n+ struct list_head list_head;\n+};\n+\n+struct dvb_demux {\n+ int (*stop_feed)(struct dvb_demux_feed *feed);\n+ struct list_head feed_list;\n+};\n+\n+\n+static\n+inline\n+__attribute__((always_inline))\n+u8\n+payload(const u8 *tsp)\n+{\n+ if (tsp[3] & 0x20) {\n+   return 184 - 1 - tsp[4];\n+ }\n+ return 184;\n+}\n+\n+static\n+inline\n+__attribute__((always_inline))\n+int\n+dvb_dmx_swfilter_payload(struct dvb_demux_feed *feed, const u8 *buf)\n+{\n+ int count = payload(buf);\n+ int p;\n+ if (count == 0)\n+  return -1;\n+ return feed->cb.ts(&buf[p], count, ((void *)0), 0);\n+}\n+\n+static\n+inline\n+__attribute__((always_inline))\n+void\n+dvb_dmx_swfilter_packet_type(struct dvb_demux_feed *feed, const u8 *buf)\n+{\n+ switch (feed->type) {\n+ case 0:\n+  if (feed->ts_type & 1) {\n+    dvb_dmx_swfilter_payload(feed, buf);\n+  }\n+  if (dvb_dmx_swfilter_section_packet(feed, buf) < 0)\n+   feed->feed.sec.seclen = feed->feed.sec.secbufp = 0;\n+ }\n+}\n+\n+static\n+void\n+dvb_dmx_swfilter_packet(struct dvb_demux *demux, const u8 *buf)\n+{\n+ struct dvb_demux_feed *feed;\n+ int dvr_done = 0;\n+\n+ for (feed = ({ const typeof( ((typeof(*feed) *)0)->list_head ) *__mptr = ((&demux->feed_list)->next); (typeof(*feed) *)( (char *)__mptr - __builtin_offsetof(typeof(*feed),list_head) );}); __builtin_prefetch(feed->list_head.next), &feed->list_head != (&demux->feed_list); feed = ({ const typeof( ((typeof(*feed) *)0)->list_head ) *__mptr = (feed->list_head.next); (typeof(*feed) *)( (char *)__mptr - __builtin_offsetof(typeof(*feed),list_head) );})) {\n+  if (((((feed)->type == 0) && ((feed)->feed.ts.is_filtering) && (((feed)->ts_type & (1 | 8)) == 1))) && (dvr_done++))\n+   dvb_dmx_swfilter_packet_type(feed, buf);\n+  else if (feed->pid == 0x2000)\n+   feed->cb.ts(buf, 188, ((void *)0), 0);\n+ }\n+}\n+void dvb_dmx_swfilter_packets(struct dvb_demux *demux, const u8 *buf, size_t count)\n+{\n+ while (count--) {\n+   dvb_dmx_swfilter_packet(demux, buf);\n+ }\n+}"}]}