{"sha": "6579b1563b4c373ab3567646fffd5acc029edfb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU3OWIxNTYzYjRjMzczYWIzNTY3NjQ2ZmZmZDVhY2MwMjllZGZiMQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2017-03-09T22:41:34Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2017-03-09T22:41:34Z"}, "message": "rs6000.c (rs6000_gen_le_vsx_permute): Use rotate instead of vec_select for V1TImode.\n\n2017-03-09  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000.c (rs6000_gen_le_vsx_permute): Use rotate\n\tinstead of vec_select for V1TImode.\n\t* conifg/rs6000/vsx.md (VSX_LE): Remove mode iterator that is no\n\tlonger needed.\n\t(VSX_LE_128): Add V1TI to this mode iterator.\n\t(*vsx_le_perm_load_<mode>): Change to use VSX_D mode iterator.\n\t(*vsx_le_perm_store_<mode>): Likewise.\n\t(pre-reload splitter for VSX stores): Likewise.\n\t(post-reload splitter for VSX stores): Likewise.\n\t(*vsx_xxpermdi2_le_<mode>): Likewise.\n\t(*vsx_lxvd2x2_le_<mode>): Likewise.\n\t(*vsx_stxvd2x2_le_<mode>): Likewise.\n\nFrom-SVN: r246015", "tree": {"sha": "ed1c04173e805d53a8e0f0801cb7ccc1c7a8167e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed1c04173e805d53a8e0f0801cb7ccc1c7a8167e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6579b1563b4c373ab3567646fffd5acc029edfb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6579b1563b4c373ab3567646fffd5acc029edfb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6579b1563b4c373ab3567646fffd5acc029edfb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6579b1563b4c373ab3567646fffd5acc029edfb1/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4a23a464f825337e5b205dcf4283868ad2cf3eb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a23a464f825337e5b205dcf4283868ad2cf3eb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a23a464f825337e5b205dcf4283868ad2cf3eb9"}], "stats": {"total": 60, "additions": 36, "deletions": 24}, "files": [{"sha": "83bf26eaeabde513a150d2405a29eeb8b854b809", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6579b1563b4c373ab3567646fffd5acc029edfb1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6579b1563b4c373ab3567646fffd5acc029edfb1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6579b1563b4c373ab3567646fffd5acc029edfb1", "patch": "@@ -1,3 +1,18 @@\n+2017-03-09  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_gen_le_vsx_permute): Use rotate\n+\tinstead of vec_select for V1TImode.\n+\t* conifg/rs6000/vsx.md (VSX_LE): Remove mode iterator that is no\n+\tlonger needed.\n+\t(VSX_LE_128): Add V1TI to this mode iterator.\n+\t(*vsx_le_perm_load_<mode>): Change to use VSX_D mode iterator.\n+\t(*vsx_le_perm_store_<mode>): Likewise.\n+\t(pre-reload splitter for VSX stores): Likewise.\n+\t(post-reload splitter for VSX stores): Likewise.\n+\t(*vsx_xxpermdi2_le_<mode>): Likewise.\n+\t(*vsx_lxvd2x2_le_<mode>): Likewise.\n+\t(*vsx_stxvd2x2_le_<mode>): Likewise.\n+\n 2017-03-09  Michael Eager  <eager@eagercon.com>\n \n \tCorrect failures with --enable-checking=yes,rtl.\n@@ -7,7 +22,7 @@\n \ttest for const0_rtx.\n \t* config/microblaze/microblaze.md (ashlsi3_byone, ashrsi3_byone,\n \tlshrsi3_byone): Replace INTVAL with test for const1_rtx.\n-\t\n+\n 2017-03-09  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/79977"}, {"sha": "e528bdf8973b4f3d6c40fba076afff7bfaec2e69", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6579b1563b4c373ab3567646fffd5acc029edfb1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6579b1563b4c373ab3567646fffd5acc029edfb1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=6579b1563b4c373ab3567646fffd5acc029edfb1", "patch": "@@ -10420,7 +10420,7 @@ rs6000_gen_le_vsx_permute (rtx source, machine_mode mode)\n {\n   /* Use ROTATE instead of VEC_SELECT on IEEE 128-bit floating point, and\n      128-bit integers if they are allowed in VSX registers.  */\n-  if (FLOAT128_VECTOR_P (mode) || mode == TImode)\n+  if (FLOAT128_VECTOR_P (mode) || mode == TImode || mode == V1TImode)\n     return gen_rtx_ROTATE (mode, source, GEN_INT (64));\n   else\n     {"}, {"sha": "01b55e616b731bab429cc02dedc100c0687457b7", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6579b1563b4c373ab3567646fffd5acc029edfb1/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6579b1563b4c373ab3567646fffd5acc029edfb1/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=6579b1563b4c373ab3567646fffd5acc029edfb1", "patch": "@@ -27,15 +27,12 @@\n ;; Iterator for the 2 64-bit vector types\n (define_mode_iterator VSX_D [V2DF V2DI])\n \n-;; Iterator for the 2 64-bit vector types + 128-bit types that are loaded with\n-;; lxvd2x to properly handle swapping words on little endian\n-(define_mode_iterator VSX_LE [V2DF V2DI V1TI])\n-\n ;; Mode iterator to handle swapping words on little endian for the 128-bit\n ;; types that goes in a single vector register.\n (define_mode_iterator VSX_LE_128 [(KF   \"FLOAT128_VECTOR_P (KFmode)\")\n \t\t\t\t  (TF   \"FLOAT128_VECTOR_P (TFmode)\")\n-\t\t\t\t  (TI\t\"TARGET_VSX_TIMODE\")])\n+\t\t\t\t  (TI\t\"TARGET_VSX_TIMODE\")\n+\t\t\t\t  V1TI])\n \n ;; Iterator for the 2 32-bit vector types\n (define_mode_iterator VSX_W [V4SF V4SI])\n@@ -387,8 +384,8 @@\n ;; The patterns for LE permuted loads and stores come before the general\n ;; VSX moves so they match first.\n (define_insn_and_split \"*vsx_le_perm_load_<mode>\"\n-  [(set (match_operand:VSX_LE 0 \"vsx_register_operand\" \"=<VSa>\")\n-        (match_operand:VSX_LE 1 \"memory_operand\" \"Z\"))]\n+  [(set (match_operand:VSX_D 0 \"vsx_register_operand\" \"=<VSa>\")\n+        (match_operand:VSX_D 1 \"memory_operand\" \"Z\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   \"#\"\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n@@ -501,16 +498,16 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"*vsx_le_perm_store_<mode>\"\n-  [(set (match_operand:VSX_LE 0 \"memory_operand\" \"=Z\")\n-        (match_operand:VSX_LE 1 \"vsx_register_operand\" \"+<VSa>\"))]\n+  [(set (match_operand:VSX_D 0 \"memory_operand\" \"=Z\")\n+        (match_operand:VSX_D 1 \"vsx_register_operand\" \"+<VSa>\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   \"#\"\n   [(set_attr \"type\" \"vecstore\")\n    (set_attr \"length\" \"12\")])\n \n (define_split\n-  [(set (match_operand:VSX_LE 0 \"memory_operand\" \"\")\n-        (match_operand:VSX_LE 1 \"vsx_register_operand\" \"\"))]\n+  [(set (match_operand:VSX_D 0 \"memory_operand\" \"\")\n+        (match_operand:VSX_D 1 \"vsx_register_operand\" \"\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR && !reload_completed\"\n   [(set (match_dup 2)\n         (vec_select:<MODE>\n@@ -528,8 +525,8 @@\n ;; The post-reload split requires that we re-permute the source\n ;; register in case it is still live.\n (define_split\n-  [(set (match_operand:VSX_LE 0 \"memory_operand\" \"\")\n-        (match_operand:VSX_LE 1 \"vsx_register_operand\" \"\"))]\n+  [(set (match_operand:VSX_D 0 \"memory_operand\" \"\")\n+        (match_operand:VSX_D 1 \"vsx_register_operand\" \"\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR && reload_completed\"\n   [(set (match_dup 1)\n         (vec_select:<MODE>\n@@ -2061,9 +2058,9 @@\n ;; xxpermdi for little endian loads and stores.  We need several of\n ;; these since the form of the PARALLEL differs by mode.\n (define_insn \"*vsx_xxpermdi2_le_<mode>\"\n-  [(set (match_operand:VSX_LE 0 \"vsx_register_operand\" \"=<VSa>\")\n-        (vec_select:VSX_LE\n-          (match_operand:VSX_LE 1 \"vsx_register_operand\" \"<VSa>\")\n+  [(set (match_operand:VSX_D 0 \"vsx_register_operand\" \"=<VSa>\")\n+        (vec_select:VSX_D\n+          (match_operand:VSX_D 1 \"vsx_register_operand\" \"<VSa>\")\n           (parallel [(const_int 1) (const_int 0)])))]\n   \"!BYTES_BIG_ENDIAN && VECTOR_MEM_VSX_P (<MODE>mode)\"\n   \"xxpermdi %x0,%x1,%x1,2\"\n@@ -2110,9 +2107,9 @@\n ;; lxvd2x for little endian loads.  We need several of\n ;; these since the form of the PARALLEL differs by mode.\n (define_insn \"*vsx_lxvd2x2_le_<mode>\"\n-  [(set (match_operand:VSX_LE 0 \"vsx_register_operand\" \"=<VSa>\")\n-        (vec_select:VSX_LE\n-          (match_operand:VSX_LE 1 \"memory_operand\" \"Z\")\n+  [(set (match_operand:VSX_D 0 \"vsx_register_operand\" \"=<VSa>\")\n+        (vec_select:VSX_D\n+          (match_operand:VSX_D 1 \"memory_operand\" \"Z\")\n           (parallel [(const_int 1) (const_int 0)])))]\n   \"!BYTES_BIG_ENDIAN && VECTOR_MEM_VSX_P (<MODE>mode) && !TARGET_P9_VECTOR\"\n   \"lxvd2x %x0,%y1\"\n@@ -2159,9 +2156,9 @@\n ;; stxvd2x for little endian stores.  We need several of\n ;; these since the form of the PARALLEL differs by mode.\n (define_insn \"*vsx_stxvd2x2_le_<mode>\"\n-  [(set (match_operand:VSX_LE 0 \"memory_operand\" \"=Z\")\n-        (vec_select:VSX_LE\n-          (match_operand:VSX_LE 1 \"vsx_register_operand\" \"<VSa>\")\n+  [(set (match_operand:VSX_D 0 \"memory_operand\" \"=Z\")\n+        (vec_select:VSX_D\n+          (match_operand:VSX_D 1 \"vsx_register_operand\" \"<VSa>\")\n           (parallel [(const_int 1) (const_int 0)])))]\n   \"!BYTES_BIG_ENDIAN && VECTOR_MEM_VSX_P (<MODE>mode) && !TARGET_P9_VECTOR\"\n   \"stxvd2x %x1,%y0\""}]}