{"sha": "b850be9d50210da752443e730723285bbd1b7c96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg1MGJlOWQ1MDIxMGRhNzUyNDQzZTczMDcyMzI4NWJiZDFiN2M5Ng==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-05-24T23:29:19Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-05-24T23:29:19Z"}, "message": "re PR libstdc++/49151 ([C++0x][constexpr] chrono::duration has incorrect non-member operator semantics)\n\n2011-05-24  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/49151\n\t* include/std/chrono (operator+, operator-, operator*, operator/,\n\toperator&): Implement LWG 2020 [WP]; specify constexpr.\n\t* testsuite/20_util/duration/arithmetic/dr2020.cc: New.\n\nFrom-SVN: r174150", "tree": {"sha": "c4d004bbe77dcf9366cdceb284257616b3ae489d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4d004bbe77dcf9366cdceb284257616b3ae489d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b850be9d50210da752443e730723285bbd1b7c96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b850be9d50210da752443e730723285bbd1b7c96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b850be9d50210da752443e730723285bbd1b7c96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b850be9d50210da752443e730723285bbd1b7c96/comments", "author": null, "committer": null, "parents": [{"sha": "24d1bbc7b5ea8655be7fa40a462a417cac8e8ecd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24d1bbc7b5ea8655be7fa40a462a417cac8e8ecd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24d1bbc7b5ea8655be7fa40a462a417cac8e8ecd"}], "stats": {"total": 128, "additions": 103, "deletions": 25}, "files": [{"sha": "3480c8ab7df4b88f7a9fb5f298235b898cec3334", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b850be9d50210da752443e730723285bbd1b7c96/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b850be9d50210da752443e730723285bbd1b7c96/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b850be9d50210da752443e730723285bbd1b7c96", "patch": "@@ -1,3 +1,10 @@\n+2011-05-24  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/49151\n+\t* include/std/chrono (operator+, operator-, operator*, operator/,\n+\toperator&): Implement LWG 2020 [WP]; specify constexpr.\n+\t* testsuite/20_util/duration/arithmetic/dr2020.cc: New.\n+\n 2011-05-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/49141"}, {"sha": "86e6e0019e1138eb45206aa1593c7d8abeb050b7", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 30, "deletions": 25, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b850be9d50210da752443e730723285bbd1b7c96/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b850be9d50210da752443e730723285bbd1b7c96/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=b850be9d50210da752443e730723285bbd1b7c96", "patch": "@@ -352,28 +352,28 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n     template<typename _Rep1, typename _Period1,\n \t     typename _Rep2, typename _Period2>\n-      inline typename common_type<duration<_Rep1, _Period1>,\n-\t\t\t\t  duration<_Rep2, _Period2>>::type\n+      inline constexpr typename common_type<duration<_Rep1, _Period1>,\n+\t\t\t\t\t    duration<_Rep2, _Period2>>::type\n       operator+(const duration<_Rep1, _Period1>& __lhs,\n \t\tconst duration<_Rep2, _Period2>& __rhs)\n       {\n \ttypedef duration<_Rep1, _Period1>\t\t\t__dur1;\n \ttypedef duration<_Rep2, _Period2>\t\t\t__dur2;\n-\ttypedef typename common_type<__dur1,__dur2>::type\t__ct;\n-\treturn __ct(__lhs) += __rhs;\n+\ttypedef typename common_type<__dur1,__dur2>::type\t__cd;\n+\treturn __cd(__cd(__lhs).count() + __cd(__rhs).count());\n       }\n \n     template<typename _Rep1, typename _Period1,\n \t     typename _Rep2, typename _Period2>\n-      inline typename common_type<duration<_Rep1, _Period1>,\n-\t\t\t\t  duration<_Rep2, _Period2>>::type\n+      inline constexpr typename common_type<duration<_Rep1, _Period1>,\n+\t\t\t\t\t    duration<_Rep2, _Period2>>::type\n       operator-(const duration<_Rep1, _Period1>& __lhs,\n \t\tconst duration<_Rep2, _Period2>& __rhs)\n       {\n \ttypedef duration<_Rep1, _Period1>\t\t\t__dur1;\n \ttypedef duration<_Rep2, _Period2>\t\t\t__dur2;\n-\ttypedef typename common_type<__dur1,__dur2>::type\t__ct;\n-\treturn __ct(__lhs) -= __rhs;\n+\ttypedef typename common_type<__dur1,__dur2>::type\t__cd;\n+\treturn __cd(__cd(__lhs).count() - __cd(__rhs).count());\n       }\n \n     template<typename _Rep1, typename _Rep2, bool =\n@@ -386,60 +386,65 @@ _GLIBCXX_END_NAMESPACE_VERSION\n       { typedef typename common_type<_Rep1, _Rep2>::type type; };\n \n     template<typename _Rep1, typename _Period, typename _Rep2>\n-      inline duration<typename __common_rep_type<_Rep1, _Rep2>::type, _Period>\n+      inline constexpr\n+      duration<typename __common_rep_type<_Rep1, _Rep2>::type, _Period>\n       operator*(const duration<_Rep1, _Period>& __d, const _Rep2& __s)\n       {\n-\ttypedef typename common_type<_Rep1, _Rep2>::type \t__cr;\n-\treturn duration<__cr, _Period>(__d) *= __s;\n+\ttypedef duration<typename common_type<_Rep1, _Rep2>::type, _Period>\n+\t  __cd;\n+\treturn __cd(__cd(__d).count() * __s);\n       }\n \n     template<typename _Rep1, typename _Period, typename _Rep2>\n-      inline duration<typename __common_rep_type<_Rep2, _Rep1>::type, _Period>\n+      inline constexpr\n+      duration<typename __common_rep_type<_Rep2, _Rep1>::type, _Period>\n       operator*(const _Rep1& __s, const duration<_Rep2, _Period>& __d)\n       { return __d * __s; }\n \n     template<typename _Rep1, typename _Period, typename _Rep2>\n-      inline duration<typename __common_rep_type<_Rep1, typename\n+      inline constexpr duration<typename __common_rep_type<_Rep1, typename\n \tenable_if<!__is_duration<_Rep2>::value, _Rep2>::type>::type, _Period>\n       operator/(const duration<_Rep1, _Period>& __d, const _Rep2& __s)\n       {\n-\ttypedef typename common_type<_Rep1, _Rep2>::type \t__cr;\n-\treturn duration<__cr, _Period>(__d) /= __s;\n+\ttypedef duration<typename common_type<_Rep1, _Rep2>::type, _Period>\n+\t  __cd;\n+\treturn __cd(__cd(__d).count() / __s);\n       }\n \n      template<typename _Rep1, typename _Period1,\n \t      typename _Rep2, typename _Period2>\n-      inline typename common_type<_Rep1, _Rep2>::type\n+      inline constexpr typename common_type<_Rep1, _Rep2>::type\n       operator/(const duration<_Rep1, _Period1>& __lhs,\n \t\tconst duration<_Rep2, _Period2>& __rhs)\n       {\n \ttypedef duration<_Rep1, _Period1>\t\t\t__dur1;\n \ttypedef duration<_Rep2, _Period2>\t\t\t__dur2;\n-\ttypedef typename common_type<__dur1,__dur2>::type\t__ct;\n-\treturn __ct(__lhs).count() / __ct(__rhs).count();\n+\ttypedef typename common_type<__dur1,__dur2>::type\t__cd;\n+\treturn __cd(__lhs).count() / __cd(__rhs).count();\n       }\n \n     // DR 934.\n     template<typename _Rep1, typename _Period, typename _Rep2>\n-      inline duration<typename __common_rep_type<_Rep1, typename\n+      inline constexpr duration<typename __common_rep_type<_Rep1, typename\n \tenable_if<!__is_duration<_Rep2>::value, _Rep2>::type>::type, _Period>\n       operator%(const duration<_Rep1, _Period>& __d, const _Rep2& __s)\n       {\n-\ttypedef typename common_type<_Rep1, _Rep2>::type \t__cr;\n-\treturn duration<__cr, _Period>(__d) %= __s;\n+\ttypedef duration<typename common_type<_Rep1, _Rep2>::type, _Period>\n+\t  __cd;\n+\treturn __cd(__cd(__d).count() % __s);\n       }\n \n      template<typename _Rep1, typename _Period1,\n \t      typename _Rep2, typename _Period2>\n-      inline typename common_type<duration<_Rep1, _Period1>,\n-\t\t\t\t  duration<_Rep2, _Period2>>::type\n+      inline constexpr typename common_type<duration<_Rep1, _Period1>,\n+\t\t\t\t\t    duration<_Rep2, _Period2>>::type\n       operator%(const duration<_Rep1, _Period1>& __lhs,\n \t\tconst duration<_Rep2, _Period2>& __rhs)\n       {\n \ttypedef duration<_Rep1, _Period1>\t\t\t__dur1;\n \ttypedef duration<_Rep2, _Period2>\t\t\t__dur2;\n-\ttypedef typename common_type<__dur1,__dur2>::type\t__ct;\n-\treturn __ct(__lhs) %= __rhs;\n+\ttypedef typename common_type<__dur1,__dur2>::type\t__cd;\n+\treturn __cd(__cd(__lhs).count() % __cd(__rhs).count());\n       }\n \n     // comparisons"}, {"sha": "29945aeb7649885ea614733a175a2bd9a85a60e0", "filename": "libstdc++-v3/testsuite/20_util/duration/arithmetic/dr2020.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b850be9d50210da752443e730723285bbd1b7c96/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Farithmetic%2Fdr2020.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b850be9d50210da752443e730723285bbd1b7c96/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Farithmetic%2Fdr2020.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Farithmetic%2Fdr2020.cc?ref=b850be9d50210da752443e730723285bbd1b7c96", "patch": "@@ -0,0 +1,66 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+\n+// Copyright (C) 2011 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 20.11.5 Class template duration [time.duration]\n+\n+#include <chrono>\n+#include <testsuite_hooks.h>\n+\n+// DR 2020\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std::chrono;\n+\n+  constexpr duration<int> d0(12);\n+  constexpr duration<int> d1(3);\n+  constexpr int i = 5;\n+\n+  constexpr auto d2 = d0 + d1;\n+  VERIFY( d2.count() == 15 );\n+\n+  constexpr auto d3 = d0 - d1;\n+  VERIFY( d3.count() == 9 );\n+\n+  constexpr auto d4 = d0 * 5;\n+  VERIFY( d4.count() == 60 );\n+\n+  constexpr auto d5 = i * d0;\n+  VERIFY( d5.count() == 60 );\n+\n+  constexpr auto d6 = d0 % i;\n+  VERIFY( d6.count() == 2 );\n+\n+  constexpr auto j = d0 % d1;\n+  VERIFY( j.count() == 0 );\n+\n+  constexpr auto d7 = d0 / i;\n+  VERIFY( d7.count() == 2 );\n+\n+  constexpr auto k = d0 / d1;\n+  VERIFY( k == 4 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}]}