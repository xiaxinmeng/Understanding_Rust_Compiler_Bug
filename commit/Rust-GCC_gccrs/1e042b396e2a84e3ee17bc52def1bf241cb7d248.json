{"sha": "1e042b396e2a84e3ee17bc52def1bf241cb7d248", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUwNDJiMzk2ZTJhODRlM2VlMTdiYzUyZGVmMWJmMjQxY2I3ZDI0OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-02-07T15:31:30Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-02-07T19:20:46Z"}, "message": "c++: Fix use of local in constexpr if.\n\nextract_local_specs wasn't finding the mention of 'an' as a template\nargument because we weren't walking into template arguments.  So here I\nchanged cp_walk_subtrees to do so--only walking into template arguments in\nthe spelling of the type or expression, not any hidden behind typedefs.  The\nchange to use typedef_variant_p avoids looking through typedefs spelled with\n'typedef' as well as those spelled with 'using'.  And then I removed some\nnow-redundant code for walking into template arguments in a couple of\nwalk_tree callbacks.\n\n\tPR c++/92654\n\t* tree.c (cp_walk_subtrees): Walk into type template arguments.\n\t* cp-tree.h (TYPE_TEMPLATE_INFO_MAYBE_ALIAS): Use typedef_variant_p\n\tinstead of TYPE_ALIAS_P.\n\t* pt.c (push_template_decl_real): Likewise.\n\t(find_parameter_packs_r): Likewise.  Remove dead code.\n\t* error.c (find_typenames_r): Remove dead code.", "tree": {"sha": "4bedd89b18a63e06634d0705233eac45ce1c1244", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bedd89b18a63e06634d0705233eac45ce1c1244"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e042b396e2a84e3ee17bc52def1bf241cb7d248", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e042b396e2a84e3ee17bc52def1bf241cb7d248", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e042b396e2a84e3ee17bc52def1bf241cb7d248", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e042b396e2a84e3ee17bc52def1bf241cb7d248/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8dd2446f597e6d1581414a9c02ff329285181a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8dd2446f597e6d1581414a9c02ff329285181a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8dd2446f597e6d1581414a9c02ff329285181a9"}], "stats": {"total": 75, "additions": 35, "deletions": 40}, "files": [{"sha": "580b7665c679c0c3b2887f46da244d3be781bbd6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e042b396e2a84e3ee17bc52def1bf241cb7d248/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e042b396e2a84e3ee17bc52def1bf241cb7d248/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1e042b396e2a84e3ee17bc52def1bf241cb7d248", "patch": "@@ -1,3 +1,13 @@\n+2020-02-06  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/92654\n+\t* tree.c (cp_walk_subtrees): Walk into type template arguments.\n+\t* cp-tree.h (TYPE_TEMPLATE_INFO_MAYBE_ALIAS): Use typedef_variant_p\n+\tinstead of TYPE_ALIAS_P.\n+\t* pt.c (push_template_decl_real): Likewise.\n+\t(find_parameter_packs_r): Likewise.  Remove dead code.\n+\t* error.c (find_typenames_r): Remove dead code.\n+\n 2020-02-06  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/92517"}, {"sha": "c46d1e92b3b0fbcc4f3cbf1d6e97657f6644c96e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e042b396e2a84e3ee17bc52def1bf241cb7d248/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e042b396e2a84e3ee17bc52def1bf241cb7d248/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1e042b396e2a84e3ee17bc52def1bf241cb7d248", "patch": "@@ -3482,7 +3482,7 @@ struct GTY(()) lang_decl {\n    for the alias template (if any).  Otherwise behave as\n    TYPE_TEMPLATE_INFO.  */\n #define TYPE_TEMPLATE_INFO_MAYBE_ALIAS(NODE)\t\t\t\t\\\n-  (TYPE_ALIAS_P (NODE)\t\t\t\t\t\t\t\\\n+  (typedef_variant_p (NODE)\t\t\t\t\t\t\\\n    ? TYPE_ALIAS_TEMPLATE_INFO (NODE)\t\t\t\t\t\\\n    : TYPE_TEMPLATE_INFO (NODE))\n "}, {"sha": "ab8638fbaec638cfaacb08edb78aa4e12bd31178", "filename": "gcc/cp/error.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e042b396e2a84e3ee17bc52def1bf241cb7d248/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e042b396e2a84e3ee17bc52def1bf241cb7d248/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=1e042b396e2a84e3ee17bc52def1bf241cb7d248", "patch": "@@ -1526,12 +1526,6 @@ find_typenames_r (tree *tp, int *walk_subtrees, void *data)\n   if (mv && (mv == *tp || !d->p_set->add (mv)))\n     vec_safe_push (d->typenames, mv);\n \n-  /* Search into class template arguments, which cp_walk_subtrees\n-     doesn't do.  */\n-  if (CLASS_TYPE_P (*tp) && CLASSTYPE_TEMPLATE_INFO (*tp))\n-    cp_walk_tree (&CLASSTYPE_TI_ARGS (*tp), find_typenames_r,\n-\t\t  data, d->p_set);\n-\n   return NULL_TREE;\n }\n "}, {"sha": "2fb52caa5d44c85d6a52124d35dd8d1b390724ac", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 33, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e042b396e2a84e3ee17bc52def1bf241cb7d248/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e042b396e2a84e3ee17bc52def1bf241cb7d248/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1e042b396e2a84e3ee17bc52def1bf241cb7d248", "patch": "@@ -3818,9 +3818,12 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n     (struct find_parameter_pack_data*)data;\n   bool parameter_pack_p = false;\n \n-  /* Handle type aliases/typedefs.  */\n-  if (TYPE_ALIAS_P (t))\n+  /* Don't look through typedefs; we are interested in whether a\n+     parameter pack is actually written in the expression/type we're\n+     looking at, not the target type.  */\n+  if (TYPE_P (t) && typedef_variant_p (t))\n     {\n+      /* But do look at arguments for an alias template.  */\n       if (tree tinfo = TYPE_ALIAS_TEMPLATE_INFO (t))\n \tcp_walk_tree (&TI_ARGS (tinfo),\n \t\t      &find_parameter_packs_r,\n@@ -3903,27 +3906,13 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n \t\t  &find_parameter_packs_r, ppd, ppd->visited);\n \n   /* This switch statement will return immediately if we don't find a\n-     parameter pack.  */\n+     parameter pack.  ??? Should some of these be in cp_walk_subtrees?  */\n   switch (TREE_CODE (t))\n     {\n-    case TEMPLATE_PARM_INDEX:\n-      return NULL_TREE;\n-\n     case BOUND_TEMPLATE_TEMPLATE_PARM:\n       /* Check the template itself.  */\n       cp_walk_tree (&TREE_TYPE (TYPE_TI_TEMPLATE (t)),\n \t\t    &find_parameter_packs_r, ppd, ppd->visited);\n-      /* Check the template arguments.  */\n-      cp_walk_tree (&TYPE_TI_ARGS (t), &find_parameter_packs_r, ppd,\n-\t\t    ppd->visited);\n-      *walk_subtrees = 0;\n-      return NULL_TREE;\n-\n-    case TEMPLATE_TYPE_PARM:\n-    case TEMPLATE_TEMPLATE_PARM:\n-      return NULL_TREE;\n-\n-    case PARM_DECL:\n       return NULL_TREE;\n \n     case DECL_EXPR:\n@@ -3932,20 +3921,6 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n \t*walk_subtrees = 0;\n       return NULL_TREE;\n \n-    case RECORD_TYPE:\n-      if (TYPE_PTRMEMFUNC_P (t))\n-\treturn NULL_TREE;\n-      /* Fall through.  */\n-\n-    case UNION_TYPE:\n-    case ENUMERAL_TYPE:\n-      if (TYPE_TEMPLATE_INFO (t))\n-\tcp_walk_tree (&TYPE_TI_ARGS (t),\n-\t\t      &find_parameter_packs_r, ppd, ppd->visited);\n-\n-      *walk_subtrees = 0;\n-      return NULL_TREE;\n-\n     case TEMPLATE_DECL:\n       if (!DECL_TEMPLATE_TEMPLATE_PARM_P (t))\n \treturn NULL_TREE;\n@@ -5794,8 +5769,7 @@ push_template_decl_real (tree decl, bool is_friend)\n       if (check_for_bare_parameter_packs (TYPE_RAISES_EXCEPTIONS (type)))\n \tTYPE_RAISES_EXCEPTIONS (type) = NULL_TREE;\n     }\n-  else if (check_for_bare_parameter_packs ((TREE_CODE (decl) == TYPE_DECL\n-\t\t\t\t\t    && TYPE_DECL_ALIAS_P (decl))\n+  else if (check_for_bare_parameter_packs (is_typedef_decl (decl)\n \t\t\t\t\t   ? DECL_ORIGINAL_TYPE (decl)\n \t\t\t\t\t   : TREE_TYPE (decl)))\n     {"}, {"sha": "fda630790a242e75c5fdbb323bc124782caf52cb", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e042b396e2a84e3ee17bc52def1bf241cb7d248/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e042b396e2a84e3ee17bc52def1bf241cb7d248/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=1e042b396e2a84e3ee17bc52def1bf241cb7d248", "patch": "@@ -4918,6 +4918,11 @@ cp_walk_subtrees (tree *tp, int *walk_subtrees_p, walk_tree_fn func,\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n+  if (TYPE_P (*tp))\n+    /* Walk into template args without looking through typedefs.  */\n+    if (tree ti = TYPE_TEMPLATE_INFO_MAYBE_ALIAS (*tp))\n+      WALK_SUBTREE (TI_ARGS (ti));\n+\n   /* Not one of the easy cases.  We must explicitly go through the\n      children.  */\n   result = NULL_TREE;"}, {"sha": "fb26ac716d4f892750d735272a90606e0e55ab64", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if-lambda2.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e042b396e2a84e3ee17bc52def1bf241cb7d248/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if-lambda2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e042b396e2a84e3ee17bc52def1bf241cb7d248/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if-lambda2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if-lambda2.C?ref=1e042b396e2a84e3ee17bc52def1bf241cb7d248", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/92654\n+// { dg-do compile { target c++17 } }\n+\n+template <unsigned long> struct C;\n+template <auto I>\n+void am() {\n+  [](auto an)\n+     {\n+       if constexpr (C<an>::ap) ; // { dg-error \"constant\" }\n+     }(42);\n+}\n+void fn() { am<42>(); }"}]}