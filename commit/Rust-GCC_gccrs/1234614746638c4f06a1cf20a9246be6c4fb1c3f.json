{"sha": "1234614746638c4f06a1cf20a9246be6c4fb1c3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIzNDYxNDc0NjYzOGM0ZjA2YTFjZjIwYTkyNDZiZTZjNGZiMWMzZg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-05-26T08:48:02Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-05-26T08:48:02Z"}, "message": "tree-vect-data-refs.c (vect_create_data_ref_ptr): Remove redundant calls to merge_alias_info.\n\n2009-05-26  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-vect-data-refs.c (vect_create_data_ref_ptr): Remove\n\tredundant calls to merge_alias_info.\n\t(bump_vector_ptr): Likewise.\n\t* tree-ssa-copy.c (merge_alias_info): Remove.\n\t(replace_exp_1): Remove call to merge_alias_info.\n\t(propagate_tree_value): Likewise.\n\t(fini_copy_prop): Propagate points-to info.\n\t* tree-flow.h (merge_alias_info): Remove.\n\nFrom-SVN: r147863", "tree": {"sha": "d96fe16a8faa95bb1511b20663dcf3a21a2aa7c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d96fe16a8faa95bb1511b20663dcf3a21a2aa7c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1234614746638c4f06a1cf20a9246be6c4fb1c3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1234614746638c4f06a1cf20a9246be6c4fb1c3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1234614746638c4f06a1cf20a9246be6c4fb1c3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1234614746638c4f06a1cf20a9246be6c4fb1c3f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "807d5e6fe104252a150525625c7730cec1921e00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/807d5e6fe104252a150525625c7730cec1921e00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/807d5e6fe104252a150525625c7730cec1921e00"}], "stats": {"total": 87, "additions": 31, "deletions": 56}, "files": [{"sha": "c8f9c8466dcdce955b68001dccbdfc19a5e3800d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1234614746638c4f06a1cf20a9246be6c4fb1c3f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1234614746638c4f06a1cf20a9246be6c4fb1c3f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1234614746638c4f06a1cf20a9246be6c4fb1c3f", "patch": "@@ -1,3 +1,14 @@\n+2009-05-26  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-vect-data-refs.c (vect_create_data_ref_ptr): Remove\n+\tredundant calls to merge_alias_info.\n+\t(bump_vector_ptr): Likewise.\n+\t* tree-ssa-copy.c (merge_alias_info): Remove.\n+\t(replace_exp_1): Remove call to merge_alias_info.\n+\t(propagate_tree_value): Likewise.\n+\t(fini_copy_prop): Propagate points-to info.\n+\t* tree-flow.h (merge_alias_info): Remove.\n+\n 2009-05-07  Hariharan Sandanagobalane <hariharan@picochip.com>\n \n \t* config/picochip/picochip.C (PARAM_INLINE_CALL_COST): Remove."}, {"sha": "4b0130a44ebef20bae259c3b3b8108f550169869", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1234614746638c4f06a1cf20a9246be6c4fb1c3f/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1234614746638c4f06a1cf20a9246be6c4fb1c3f/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=1234614746638c4f06a1cf20a9246be6c4fb1c3f", "patch": "@@ -679,7 +679,6 @@ int loop_depth_of_name (tree);\n tree degenerate_phi_result (gimple);\n \n /* In tree-ssa-copy.c  */\n-extern void merge_alias_info (tree, tree);\n extern void propagate_value (use_operand_p, tree);\n extern void propagate_tree_value (tree *, tree);\n extern void propagate_tree_value_into_stmt (gimple_stmt_iterator *, tree);"}, {"sha": "bbfc977fa94a46f332d7d7cb407a68206f88649c", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 20, "deletions": 50, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1234614746638c4f06a1cf20a9246be6c4fb1c3f/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1234614746638c4f06a1cf20a9246be6c4fb1c3f/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=1234614746638c4f06a1cf20a9246be6c4fb1c3f", "patch": "@@ -151,44 +151,6 @@ may_propagate_copy_into_asm (tree dest)\n }\n \n \n-/* Given two SSA_NAMEs pointers ORIG and NEW such that we are copy\n-   propagating NEW into ORIG, consolidate aliasing information so that\n-   they both share the same memory tags.  */\n-\n-void\n-merge_alias_info (tree orig_name, tree new_name)\n-{\n-  gcc_assert (POINTER_TYPE_P (TREE_TYPE (orig_name))\n-\t      && POINTER_TYPE_P (TREE_TYPE (new_name)));\n-\n-#if defined ENABLE_CHECKING\n-  gcc_assert (useless_type_conversion_p (TREE_TYPE (orig_name),\n-\t\t\t\t\t TREE_TYPE (new_name)));\n-#endif\n-\n-  /* Check that flow-sensitive information is compatible.  Notice that\n-     we may not merge flow-sensitive information here.  This function\n-     is called when propagating equivalences dictated by the IL, like\n-     a copy operation P_i = Q_j, and from equivalences dictated by\n-     control-flow, like if (P_i == Q_j).\n-     \n-     In the former case, P_i and Q_j are equivalent in every block\n-     dominated by the assignment, so their flow-sensitive information\n-     is always the same.  However, in the latter case, the pointers\n-     P_i and Q_j are only equivalent in one of the sub-graphs out of\n-     the predicate, so their flow-sensitive information is not the\n-     same in every block dominated by the predicate.\n-\n-     Since we cannot distinguish one case from another in this\n-     function, we cannot merge flow-sensitive information by\n-     intersecting.  Instead the only thing we can do is to _not_\n-     merge flow-sensitive information.\n-\n-     ???  At some point we should enhance this machinery to distinguish\n-     both cases in the caller.  */\n-}\n-\n-\n /* Common code for propagate_value and replace_exp.\n \n    Replace use operand OP_P with VAL.  FOR_PROPAGATION indicates if the\n@@ -208,11 +170,7 @@ replace_exp_1 (use_operand_p op_p, tree val,\n #endif\n \n   if (TREE_CODE (val) == SSA_NAME)\n-    {\n-      if (TREE_CODE (op) == SSA_NAME && POINTER_TYPE_P (TREE_TYPE (op)))\n-\tmerge_alias_info (op, val);\n-      SET_USE (op_p, val);\n-    }\n+    SET_USE (op_p, val);\n   else\n     SET_USE (op_p, unsave_expr_now (val));\n }\n@@ -262,11 +220,7 @@ propagate_tree_value (tree *op_p, tree val)\n #endif\n \n   if (TREE_CODE (val) == SSA_NAME)\n-    {\n-      if (*op_p && TREE_CODE (*op_p) == SSA_NAME && POINTER_TYPE_P (TREE_TYPE (*op_p)))\n-\tmerge_alias_info (*op_p, val);\n-      *op_p = val;\n-    }\n+    *op_p = val;\n   else\n     *op_p = unsave_expr_now (val);\n }\n@@ -872,8 +826,24 @@ fini_copy_prop (void)\n   for (i = 1; i < num_ssa_names; i++)\n     {\n       tree var = ssa_name (i);\n-      if (var && copy_of[i].value && copy_of[i].value != var)\n-\ttmp[i].value = get_last_copy_of (var);\n+      if (!var\n+\t  || !copy_of[i].value\n+\t  || copy_of[i].value == var)\n+\tcontinue;\n+\n+      tmp[i].value = get_last_copy_of (var);\n+\n+      /* In theory the points-to solution of all members of the\n+         copy chain is their intersection.  For now we do not bother\n+\t to compute this but only make sure we do not lose points-to\n+\t information completely by setting the points-to solution\n+\t of the representative to the first solution we find if\n+\t it doesn't have one already.  */\n+      if (tmp[i].value != var\n+\t  && POINTER_TYPE_P (TREE_TYPE (var))\n+\t  && SSA_NAME_PTR_INFO (var)\n+\t  && !SSA_NAME_PTR_INFO (tmp[i].value))\n+\tduplicate_ssa_name_ptr_info (tmp[i].value, SSA_NAME_PTR_INFO (var));\n     }\n \n   substitute_and_fold (tmp, false);"}, {"sha": "0116ddf723f3801c0f1dd3eaf601b48b3b57dc3d", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1234614746638c4f06a1cf20a9246be6c4fb1c3f/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1234614746638c4f06a1cf20a9246be6c4fb1c3f/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=1234614746638c4f06a1cf20a9246be6c4fb1c3f", "patch": "@@ -2497,8 +2497,6 @@ vect_create_data_ref_ptr (gimple stmt, struct loop *at_loop,\n \t  duplicate_ssa_name_ptr_info (indx_before_incr, DR_PTR_INFO (dr));\n \t  duplicate_ssa_name_ptr_info (indx_after_incr, DR_PTR_INFO (dr));\n \t}\n-      merge_alias_info (vect_ptr_init, indx_before_incr);\n-      merge_alias_info (vect_ptr_init, indx_after_incr);\n       if (ptr_incr)\n \t*ptr_incr = incr;\n \n@@ -2529,8 +2527,6 @@ vect_create_data_ref_ptr (gimple stmt, struct loop *at_loop,\n \t  duplicate_ssa_name_ptr_info (indx_before_incr, DR_PTR_INFO (dr));\n \t  duplicate_ssa_name_ptr_info (indx_after_incr, DR_PTR_INFO (dr));\n \t}\n-      merge_alias_info (vect_ptr_init, indx_before_incr);\n-      merge_alias_info (vect_ptr_init, indx_after_incr);\n       if (ptr_incr)\n \t*ptr_incr = incr;\n \n@@ -2601,7 +2597,6 @@ bump_vector_ptr (tree dataref_ptr, gimple ptr_incr, gimple_stmt_iterator *gsi,\n   /* Copy the points-to information if it exists. */\n   if (DR_PTR_INFO (dr))\n     duplicate_ssa_name_ptr_info (new_dataref_ptr, DR_PTR_INFO (dr));\n-  merge_alias_info (new_dataref_ptr, dataref_ptr);\n \n   if (!ptr_incr)\n     return new_dataref_ptr;"}]}