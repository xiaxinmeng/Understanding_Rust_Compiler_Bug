{"sha": "3ac5f7de34bdd82f3e4a8b3977749e9e1ce0a269", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FjNWY3ZGUzNGJkZDgyZjNlNGE4YjM5Nzc3NDllOWUxY2UwYTI2OQ==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2018-07-16T14:10:32Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-07-16T14:10:32Z"}, "message": "[Ada] Code cleanup on functions inlining\n\nThis patch is preventive: it improves checks on inline functions that\nreturn unconstrained type. It does not change the functionality of\nthe compiler.\n\n2018-07-16  Javier Miranda  <miranda@adacore.com>\n\ngcc/ada/\n\n\t* inline.adb (Build_Body_To_Inline): Minor code reorganization that\n\tensures that calls to function Has_Single_Return() pass a decorated\n\ttree.\n\t(Has_Single_Return.Check_Return): Peform checks on entities (instead on\n\trelying on their characters).\n\nFrom-SVN: r262708", "tree": {"sha": "c2073bacc76e24f2a8e4e10903d3bb746b4df873", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2073bacc76e24f2a8e4e10903d3bb746b4df873"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ac5f7de34bdd82f3e4a8b3977749e9e1ce0a269", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ac5f7de34bdd82f3e4a8b3977749e9e1ce0a269", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ac5f7de34bdd82f3e4a8b3977749e9e1ce0a269", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ac5f7de34bdd82f3e4a8b3977749e9e1ce0a269/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a3b7645bffbaf3dadf1f9cfccd93c6fba3e0834d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3b7645bffbaf3dadf1f9cfccd93c6fba3e0834d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3b7645bffbaf3dadf1f9cfccd93c6fba3e0834d"}], "stats": {"total": 89, "additions": 53, "deletions": 36}, "files": [{"sha": "163118f502731998241c237fd7bd5f38c11f2849", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac5f7de34bdd82f3e4a8b3977749e9e1ce0a269/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac5f7de34bdd82f3e4a8b3977749e9e1ce0a269/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3ac5f7de34bdd82f3e4a8b3977749e9e1ce0a269", "patch": "@@ -1,3 +1,11 @@\n+2018-07-16  Javier Miranda  <miranda@adacore.com>\n+\n+\t* inline.adb (Build_Body_To_Inline): Minor code reorganization that\n+\tensures that calls to function Has_Single_Return() pass a decorated\n+\ttree.\n+\t(Has_Single_Return.Check_Return): Peform checks on entities (instead on\n+\trelying on their characters).\n+\n 2018-07-16  Javier Miranda  <miranda@adacore.com>\n \n \t* exp_ch5.adb (Expand_Iterator_Loop_Over_Array): Code cleanup. Required"}, {"sha": "df7fdb9e893f7e5a80fc083e63a9f5aa2eb35d30", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 45, "deletions": 36, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac5f7de34bdd82f3e4a8b3977749e9e1ce0a269/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac5f7de34bdd82f3e4a8b3977749e9e1ce0a269/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=3ac5f7de34bdd82f3e4a8b3977749e9e1ce0a269", "patch": "@@ -1085,33 +1085,9 @@ package body Inline is\n          Cannot_Inline (\"cannot inline & (multiple returns)?\", N, Spec_Id);\n          return;\n \n-      --  Functions that return unconstrained composite types require\n-      --  secondary stack handling, and cannot currently be inlined, unless\n-      --  all return statements return a local variable that is the first\n-      --  local declaration in the body.\n-\n-      elsif Ekind (Spec_Id) = E_Function\n-        and then not Is_Scalar_Type (Etype (Spec_Id))\n-        and then not Is_Access_Type (Etype (Spec_Id))\n-        and then not Is_Constrained (Etype (Spec_Id))\n-      then\n-         if not Has_Single_Return (N)\n-\n-           --  Skip inlining if the function returns an unconstrained type\n-           --  using an extended return statement, since this part of the\n-           --  new inlining model is not yet supported by the current\n-           --  implementation. ???\n-\n-           or else (Returns_Unconstrained_Type (Spec_Id)\n-                     and then Has_Extended_Return)\n-         then\n-            Cannot_Inline\n-              (\"cannot inline & (unconstrained return type)?\", N, Spec_Id);\n-            return;\n-         end if;\n-\n-      --  Ditto for functions that return controlled types, where controlled\n-      --  actions interfere in complex ways with inlining.\n+      --  Functions that return controlled types cannot currently be inlined\n+      --  because they require secondary stack handling; controlled actions\n+      --  may also interfere in complex ways with inlining.\n \n       elsif Ekind (Spec_Id) = E_Function\n         and then Needs_Finalization (Etype (Spec_Id))\n@@ -1234,10 +1210,37 @@ package body Inline is\n          Restore_Env;\n       end if;\n \n+      --  Functions that return unconstrained composite types require\n+      --  secondary stack handling, and cannot currently be inlined, unless\n+      --  all return statements return a local variable that is the first\n+      --  local declaration in the body. We had to delay this check until\n+      --  the body of the function is analyzed since Has_Single_Return()\n+      --  requires a minimum decoration.\n+\n+      if Ekind (Spec_Id) = E_Function\n+        and then not Is_Scalar_Type (Etype (Spec_Id))\n+        and then not Is_Access_Type (Etype (Spec_Id))\n+        and then not Is_Constrained (Etype (Spec_Id))\n+      then\n+         if not Has_Single_Return (Body_To_Analyze)\n+\n+           --  Skip inlining if the function returns an unconstrained type\n+           --  using an extended return statement, since this part of the\n+           --  new inlining model is not yet supported by the current\n+           --  implementation. ???\n+\n+           or else (Returns_Unconstrained_Type (Spec_Id)\n+                     and then Has_Extended_Return)\n+         then\n+            Cannot_Inline\n+              (\"cannot inline & (unconstrained return type)?\", N, Spec_Id);\n+            return;\n+         end if;\n+\n       --  If secondary stack is used, there is no point in inlining. We have\n       --  already issued the warning in this case, so nothing to do.\n \n-      if Uses_Secondary_Stack (Body_To_Analyze) then\n+      elsif Uses_Secondary_Stack (Body_To_Analyze) then\n          return;\n       end if;\n \n@@ -3904,17 +3907,23 @@ package body Inline is\n             if Present (Expression (N))\n               and then Is_Entity_Name (Expression (N))\n             then\n+               pragma Assert (Present (Entity (Expression (N))));\n+\n                if No (Return_Statement) then\n                   Return_Statement := N;\n                   return OK;\n \n-               elsif Chars (Expression (N)) =\n-                     Chars (Expression (Return_Statement))\n-               then\n-                  return OK;\n-\n                else\n-                  return Abandon;\n+                  pragma Assert\n+                    (Present (Entity (Expression (Return_Statement))));\n+\n+                  if Entity (Expression (N)) =\n+                       Entity (Expression (Return_Statement))\n+                  then\n+                     return OK;\n+                  else\n+                     return Abandon;\n+                  end if;\n                end if;\n \n             --  A return statement within an extended return is a noop\n@@ -3963,8 +3972,8 @@ package body Inline is\n       else\n          return Present (Declarations (N))\n            and then Present (First (Declarations (N)))\n-           and then Chars (Expression (Return_Statement)) =\n-                    Chars (Defining_Identifier (First (Declarations (N))));\n+           and then Entity (Expression (Return_Statement)) =\n+                    Defining_Identifier (First (Declarations (N)));\n       end if;\n    end Has_Single_Return;\n "}]}