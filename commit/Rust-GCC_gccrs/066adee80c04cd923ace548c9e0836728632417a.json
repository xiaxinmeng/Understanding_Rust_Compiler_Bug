{"sha": "066adee80c04cd923ace548c9e0836728632417a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY2YWRlZTgwYzA0Y2Q5MjNhY2U1NDhjOWUwODM2NzI4NjMyNDE3YQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-03-28T06:57:54Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-03-28T06:57:54Z"}, "message": "cilk-plus-dg.exp: New.\n\n2014-03-28  Tobias Burnus  <burnus@net-b.de>\n\n        * lib/cilk-plus-dg.exp: New.\n        * g++.dg/cilk-plus/cilk-plus.exp: Use it.\n        * gcc.dg/cilk-plus/cilk-plus.exp: Use it.\n\nFrom-SVN: r208889", "tree": {"sha": "304c1783eae708a6dfc6b3a0a60f40ed83bbfa49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/304c1783eae708a6dfc6b3a0a60f40ed83bbfa49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/066adee80c04cd923ace548c9e0836728632417a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/066adee80c04cd923ace548c9e0836728632417a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/066adee80c04cd923ace548c9e0836728632417a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/066adee80c04cd923ace548c9e0836728632417a/comments", "author": null, "committer": null, "parents": [{"sha": "3700e94730ea1cc5fe9db522607d6a23b3667a55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3700e94730ea1cc5fe9db522607d6a23b3667a55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3700e94730ea1cc5fe9db522607d6a23b3667a55"}], "stats": {"total": 277, "additions": 186, "deletions": 91}, "files": [{"sha": "37ff3b12c622f53bd35aa9b0a715df50bb61f249", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/066adee80c04cd923ace548c9e0836728632417a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/066adee80c04cd923ace548c9e0836728632417a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=066adee80c04cd923ace548c9e0836728632417a", "patch": "@@ -1,4 +1,10 @@\n-2014-04-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+2014-03-28  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* lib/cilk-plus-dg.exp: New.\n+\t* g++.dg/cilk-plus/cilk-plus.exp: Use it.\n+\t* gcc.dg/cilk-plus/cilk-plus.exp: Use it.\n+\n+2014-03-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/60522\n \t* gfortran.dg/where_4.f90:  New test case."}, {"sha": "0cb6539cb094b7083a830037bf504bc22732a2d1", "filename": "gcc/testsuite/g++.dg/cilk-plus/cilk-plus.exp", "status": "modified", "additions": 41, "deletions": 48, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/066adee80c04cd923ace548c9e0836728632417a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2Fcilk-plus.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/066adee80c04cd923ace548c9e0836728632417a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2Fcilk-plus.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2Fcilk-plus.exp?ref=066adee80c04cd923ace548c9e0836728632417a", "patch": "@@ -17,62 +17,55 @@\n # Written by Balaji V. Iyer <balaji.v.iyer@intel.com>\n \n load_lib g++-dg.exp\n+load_lib cilk-plus-dg.exp\n \n if { ![check_effective_target_cilkplus] } {\n     return;\n }\n \n-set library_var [get_multilibs]\n-# Pointing the ld_library_path to the Cilk Runtime library binaries.\n-append ld_library_path \":${library_var}/libcilkrts/.libs\"\n-set_ld_library_path_env_vars\n-\n-global TEST_EXTRA_LIBS\n-set TEST_EXTRA_LIBS \"-L${library_var}/libcilkrts/.libs\"\n-\n dg-init\n-# Run the tests that are shared with C.\n-g++-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/PS/*.c]] \"\"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/SE/*.c]] \"-O3\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/SE/*.c]] \" \" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/SE/*.c]] \"-g -O2\" \" \"\n-# Run the C++ only tests.\n-g++-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C]] \"\"\n-dg-finish\n+if [cilkplus_init] {\n+    # Run the tests that are shared with C.\n+    g++-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/PS/*.c]] \"\"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/SE/*.c]] \"-O3\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/SE/*.c]] \" \" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/SE/*.c]] \"-g -O2\" \" \"\n+    # Run the C++ only tests.\n+    g++-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C]] \"\"\n \n-dg-init\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -fcilkplus\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -O1 -fcilkplus\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -O2 -ftree-vectorize -fcilkplus\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -O3 -fcilkplus\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -g -fcilkplus\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -g -O1 -fcilkplus\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -g -O2 -ftree-vectorize -fcilkplus\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -g -O3 -fcilkplus\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -O3 -ftree-vectorize -fcilkplus -g\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -fcilkplus\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -O1 -fcilkplus\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -O2 -ftree-vectorize -fcilkplus\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -O3 -fcilkplus\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -g -fcilkplus\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -g -O1 -fcilkplus\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -g -O2 -ftree-vectorize -fcilkplus\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -g -O3 -fcilkplus\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -O3 -ftree-vectorize -fcilkplus -g\" \" \"\n \n-dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/AN/*.cc]] \" -fcilkplus\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/AN/*.cc]] \" -O0 -fcilkplus\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/AN/*.cc]] \" -O1 -fcilkplus\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/AN/*.cc]] \" -O2 -ftree-vectorize -fcilkplus\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/AN/*.cc]] \" -O3 -fcilkplus\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/AN/*.cc]] \" -g -fcilkplus\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/AN/*.cc]] \" -g -O0 -fcilkplus\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/AN/*.cc]] \" -g -O1 -fcilkplus\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/AN/*.cc]] \" -g -O2 -ftree-vectorize -fcilkplus\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/AN/*.cc]] \" -g -O3 -fcilkplus\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/AN/*.cc]] \" -O3 -ftree-vectorize -fcilkplus -g\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/AN/*.cc]] \" -fcilkplus\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/AN/*.cc]] \" -O0 -fcilkplus\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/AN/*.cc]] \" -O1 -fcilkplus\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/AN/*.cc]] \" -O2 -ftree-vectorize -fcilkplus\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/AN/*.cc]] \" -O3 -fcilkplus\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/AN/*.cc]] \" -g -fcilkplus\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/AN/*.cc]] \" -g -O0 -fcilkplus\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/AN/*.cc]] \" -g -O1 -fcilkplus\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/AN/*.cc]] \" -g -O2 -ftree-vectorize -fcilkplus\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/AN/*.cc]] \" -g -O3 -fcilkplus\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/AN/*.cc]] \" -O3 -ftree-vectorize -fcilkplus -g\" \" \"\n \n-if { [check_libcilkrts_available] } {\n-    dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/CK/*.cc]] \" -O1 -fcilkplus\" \" \"\n-    dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/CK/*.cc]] \" -O3 -fcilkplus\" \" \"\n-    dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/CK/*.cc]] \" -g -fcilkplus\" \" \"\n-    dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/CK/*.cc]] \" -g -O2 -fcilkplus\" \" \"\n+    if { [check_libcilkrts_available] } {\n+        dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/CK/*.cc]] \" -O1 -fcilkplus\" \" \"\n+        dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/CK/*.cc]] \" -O3 -fcilkplus\" \" \"\n+        dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/CK/*.cc]] \" -g -fcilkplus\" \" \"\n+        dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/CK/*.cc]] \" -g -O2 -fcilkplus\" \" \"\n \n-    dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -O1\" \" \"\n-    dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -O3\" \" \"\n-    dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -g\" \" \"\n-    dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -g -O2\" \" \"\n-  }\n+        dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -O1\" \" \"\n+        dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -O3\" \" \"\n+        dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -g\" \" \"\n+        dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -g -O2\" \" \"\n+    }\n+}\n+cilkplus_finish\n dg-finish\n-unset TEST_EXTRA_LIBS"}, {"sha": "63cfb0e8145037f19f9a347fb4caa503b4daf8d8", "filename": "gcc/testsuite/gcc.dg/cilk-plus/cilk-plus.exp", "status": "modified", "additions": 34, "deletions": 42, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/066adee80c04cd923ace548c9e0836728632417a/gcc%2Ftestsuite%2Fgcc.dg%2Fcilk-plus%2Fcilk-plus.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/066adee80c04cd923ace548c9e0836728632417a/gcc%2Ftestsuite%2Fgcc.dg%2Fcilk-plus%2Fcilk-plus.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcilk-plus%2Fcilk-plus.exp?ref=066adee80c04cd923ace548c9e0836728632417a", "patch": "@@ -19,53 +19,45 @@\n \n load_lib gcc-dg.exp\n load_lib lto.exp\n+load_lib cilk-plus-dg.exp\n \n if { ![check_effective_target_cilkplus] } {\n     return;\n }\n \n-set library_var [get_multilibs]\n-# Pointing the ld_library_path to the Cilk Runtime library binaries. \n-append ld_library_path \":${library_var}/libcilkrts/.libs\"\n-set_ld_library_path_env_vars\n-\n-global TEST_EXTRA_LIBS\n-set TEST_EXTRA_LIBS \"-L${library_var}/libcilkrts/.libs\"\n-\n dg-init\n-\n-# Run the tests that are shared with C++.\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/PS/*.c]] \" -ftree-vectorize -fcilkplus -std=c99\" \" \"\n-# Run the C-only tests.\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.c]] \\\n-\t\"-ftree-vectorize -fcilkplus -std=c99\" \" \"\n-\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -fcilkplus\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -O1 -fcilkplus\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -O2 -fcilkplus\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -O3 -fcilkplus\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -g -fcilkplus\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -g -O2 -ftree-vectorize -fcilkplus\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -fcilkplus -std=c99\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -fcilkplus -O2 -std=c99\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -fcilkplus -O3 -std=c99\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -fcilkplus -g -O0 -std=c99\" \" \"\n-\n-if { [check_libcilkrts_available] } {\n-  dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -g \" \" \"\n-  dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -O1 \" \" \"\n-  dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -O2 -std=c99 \" \" \"\n-  dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -O2 -ftree-vectorize \" \" \"\n-  dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -O3 -g \" \" \"\n-  if { [check_effective_target_lto] } {\n-    dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -O3 -flto -g \" \" \"\n-  }\n+if [cilkplus_init] {\n+    # Run the tests that are shared with C++.\n+    dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/PS/*.c]] \" -ftree-vectorize -fcilkplus -std=c99\" \" \"\n+    # Run the C-only tests.\n+    dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.c]] \\\n+        \t\"-ftree-vectorize -fcilkplus -std=c99\" \" \"\n+\n+    dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -fcilkplus\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -O1 -fcilkplus\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -O2 -fcilkplus\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -O3 -fcilkplus\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -g -fcilkplus\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -g -O2 -ftree-vectorize -fcilkplus\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -fcilkplus -std=c99\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -fcilkplus -O2 -std=c99\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -fcilkplus -O3 -std=c99\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -fcilkplus -g -O0 -std=c99\" \" \"\n+\n+    if { [check_libcilkrts_available] } {\n+        dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -g \" \" \"\n+        dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -O1 \" \" \"\n+        dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -O2 -std=c99 \" \" \"\n+        dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -O2 -ftree-vectorize \" \" \"\n+        dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -O3 -g \" \" \"\n+        if { [check_effective_target_lto] } {\n+            dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -O3 -flto -g \" \" \"\n+        }\n+    }\n+\n+    dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/SE/*.c]] \" -g\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/SE/*.c]] \" -O3 -std=c99\" \" \"\n+    dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/SE/*.c]] \" -O3 -g\" \" \"\n }\n-\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/SE/*.c]] \" -g\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/SE/*.c]] \" -O3 -std=c99\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/SE/*.c]] \" -O3 -g\" \" \"\n-\n+cilkplus_finish\n dg-finish\n-\n-unset TEST_EXTRA_LIBS"}, {"sha": "bfb4b71de4cb081947e542eb72c60ed693dd1572", "filename": "gcc/testsuite/lib/cilk-plus-dg.exp", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/066adee80c04cd923ace548c9e0836728632417a/gcc%2Ftestsuite%2Flib%2Fcilk-plus-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/066adee80c04cd923ace548c9e0836728632417a/gcc%2Ftestsuite%2Flib%2Fcilk-plus-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fcilk-plus-dg.exp?ref=066adee80c04cd923ace548c9e0836728632417a", "patch": "@@ -0,0 +1,104 @@\n+# Copyright (C) 2014 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+#\n+# cilkplus_link_flags -- compute library path and flags to find libcilkrts.\n+# (originally from g++.exp)\n+#\n+\n+proc cilkplus_link_flags { paths } {\n+    global srcdir\n+    global ld_library_path\n+    global shlib_ext\n+\n+    set gccpath ${paths}\n+    set flags \"\"\n+\n+    set shlib_ext [get_shlib_extension]\n+\n+    if { $gccpath != \"\" } {\n+      if { [file exists \"${gccpath}/libcilkrts/.libs/libcilkrts.a\"]\n+\t   || [file exists \"${gccpath}/libcilkrts/.libs/libcilkrts.${shlib_ext}\"] } {\n+\t  append flags \" -B${gccpath}/libcilkrts/ \"\n+\t  append flags \" -L${gccpath}/libcilkrts/.libs\"\n+\t  append ld_library_path \":${gccpath}/libcilkrts/.libs\"\n+      }\n+    } else {\n+      global tool_root_dir\n+\n+      set libcilkrts [lookfor_file ${tool_root_dir} libcilkrts]\n+      if { $libcilkrts != \"\" } {\n+\t  append flags \"-L${libcilkrts} \"\n+\t  append ld_library_path \":${libcilkrts}\"\n+      }\n+    }\n+\n+    set_ld_library_path_env_vars\n+\n+    return \"$flags\"\n+}\n+\n+#\n+# cilkplus_init -- called at the start of each subdir of tests\n+#\n+\n+proc cilkplus_init { args } {\n+    global TEST_ALWAYS_FLAGS\n+    global ALWAYS_CXXFLAGS\n+    global TOOL_OPTIONS\n+    global cilkplus_saved_TEST_ALWAYS_FLAGS\n+\n+    set link_flags \"\"\n+    if ![is_remote host] {\n+\tif [info exists TOOL_OPTIONS] {\n+\t    set link_flags \"[cilkplus_link_flags [get_multilibs ${TOOL_OPTIONS}]]\"\n+\t} else {\n+\t    set link_flags \"[cilkplus_link_flags [get_multilibs]]\"\n+\t}\n+    }\n+\n+    if [info exists TEST_ALWAYS_FLAGS] {\n+\tset cilkplus_saved_TEST_ALWAYS_FLAGS $TEST_ALWAYS_FLAGS\n+    }\n+    if [info exists ALWAYS_CXXFLAGS] {\n+\tset ALWAYS_CXXFLAGS [concat \"{ldflags=$link_flags}\" $ALWAYS_CXXFLAGS]\n+    } else {\n+\tif [info exists TEST_ALWAYS_FLAGS] {\n+\t    set TEST_ALWAYS_FLAGS \"$link_flags $TEST_ALWAYS_FLAGS\"\n+\t} else {\n+\t    set TEST_ALWAYS_FLAGS \"$link_flags\"\n+\t}\n+    }\n+    if { $link_flags != \"\" } {\n+\treturn 1\n+    }\n+    return 0\n+}\n+\n+#\n+# cilkplus_finish -- called at the end of each subdir of tests\n+#\n+\n+proc cilkplus_finish { args } {\n+    global TEST_ALWAYS_FLAGS\n+    global cilkplus_saved_TEST_ALWAYS_FLAGS\n+\n+    if [info exists cilkplus_saved_TEST_ALWAYS_FLAGS] {\n+\tset TEST_ALWAYS_FLAGS $cilkplus_saved_TEST_ALWAYS_FLAGS\n+    } else {\n+\tunset TEST_ALWAYS_FLAGS\n+    }\n+}"}]}