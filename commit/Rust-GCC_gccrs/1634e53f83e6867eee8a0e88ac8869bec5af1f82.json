{"sha": "1634e53f83e6867eee8a0e88ac8869bec5af1f82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYzNGU1M2Y4M2U2ODY3ZWVlOGEwZTg4YWM4ODY5YmVjNWFmMWY4Mg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2013-05-02T16:29:14Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-05-02T16:29:14Z"}, "message": "re PR fortran/57142 (SIZE/SHAPE overflow despite kind=8)\n\n2013-05-02  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/57142\n        * simplify.c (gfc_simplify_size): Renamed from\n        simplify_size; fix kind=8 handling.\n        (gfc_simplify_size): New function.\n        (gfc_simplify_shape): Add range check.\n        * resolve.c (resolve_function): Fix handling\n        for ISYM_SIZE.\n\n2013-05-02  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/57142\n        * gfortran.dg/size_kind_2.f90: New.\n        * gfortran.dg/size_kind_3.f90: New.\n\nFrom-SVN: r198549", "tree": {"sha": "dcebcda3ff1e099bc1aa359f0760d729e1c1f185", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcebcda3ff1e099bc1aa359f0760d729e1c1f185"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1634e53f83e6867eee8a0e88ac8869bec5af1f82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1634e53f83e6867eee8a0e88ac8869bec5af1f82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1634e53f83e6867eee8a0e88ac8869bec5af1f82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1634e53f83e6867eee8a0e88ac8869bec5af1f82/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9f8e7a96c2d45daf5ee6e0ce9a1cbe4c80cbf96b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f8e7a96c2d45daf5ee6e0ce9a1cbe4c80cbf96b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f8e7a96c2d45daf5ee6e0ce9a1cbe4c80cbf96b"}], "stats": {"total": 119, "additions": 96, "deletions": 23}, "files": [{"sha": "c523473f2f4c21f7d3b1e49526a6c2fb09e5e12c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1634e53f83e6867eee8a0e88ac8869bec5af1f82/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1634e53f83e6867eee8a0e88ac8869bec5af1f82/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1634e53f83e6867eee8a0e88ac8869bec5af1f82", "patch": "@@ -1,3 +1,13 @@\n+2013-05-02  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57142\n+\t* simplify.c (gfc_simplify_size): Renamed from\n+\tsimplify_size; fix kind=8 handling.\n+\t(gfc_simplify_size): New function.\n+\t(gfc_simplify_shape): Add range check.\n+\t* resolve.c (resolve_function): Fix handling\n+\tfor ISYM_SIZE.\n+\n 2013-05-01  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \t* frontend-passes.c (optimize_power):  Fix typo"}, {"sha": "2860e4127b5c5d21ae17989b7be9e22bbf7f09d8", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1634e53f83e6867eee8a0e88ac8869bec5af1f82/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1634e53f83e6867eee8a0e88ac8869bec5af1f82/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=1634e53f83e6867eee8a0e88ac8869bec5af1f82", "patch": "@@ -2861,6 +2861,7 @@ resolve_function (gfc_expr *expr)\n       for (arg = expr->value.function.actual; arg; arg = arg->next)\n \t{\n \t  if ((GENERIC_ID == GFC_ISYM_UBOUND || GENERIC_ID == GFC_ISYM_SIZE)\n+\t      && arg == expr->value.function.actual\n \t      && arg->next != NULL && arg->next->expr)\n \t    {\n \t      if (arg->next->expr->expr_type != EXPR_CONSTANT)"}, {"sha": "815043b2e1197269b3b51e86f39fe681926f31d9", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 51, "deletions": 23, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1634e53f83e6867eee8a0e88ac8869bec5af1f82/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1634e53f83e6867eee8a0e88ac8869bec5af1f82/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=1634e53f83e6867eee8a0e88ac8869bec5af1f82", "patch": "@@ -33,6 +33,8 @@ along with GCC; see the file COPYING3.  If not see\n \n gfc_expr gfc_bad_expr;\n \n+static gfc_expr *simplify_size (gfc_expr *, gfc_expr *, int);\n+\n \n /* Note that 'simplification' is not just transforming expressions.\n    For functions that are not simplified at compile time, range\n@@ -3248,7 +3250,7 @@ simplify_bound_dim (gfc_expr *array, gfc_expr *kind, int d, int upper,\n \t  gfc_expr* dim = result;\n \t  mpz_set_si (dim->value.integer, d);\n \n-\t  result = gfc_simplify_size (array, dim, kind);\n+\t  result = simplify_size (array, dim, k);\n \t  gfc_free_expr (dim);\n \t  if (!result)\n \t    goto returnNull;\n@@ -5538,15 +5540,12 @@ gfc_simplify_shape (gfc_expr *source, gfc_expr *kind)\n       e = gfc_get_constant_expr (BT_INTEGER, k, &source->where);\n \n       if (t)\n-\t{\n-\t  mpz_set (e->value.integer, shape[n]);\n-\t  mpz_clear (shape[n]);\n-\t}\n+\tmpz_set (e->value.integer, shape[n]);\n       else\n \t{\n \t  mpz_set_ui (e->value.integer, n + 1);\n \n-\t  f = gfc_simplify_size (source, e, NULL);\n+\t  f = simplify_size (source, e, k);\n \t  gfc_free_expr (e);\n \t  if (f == NULL)\n \t    {\n@@ -5557,23 +5556,30 @@ gfc_simplify_shape (gfc_expr *source, gfc_expr *kind)\n \t    e = f;\n \t}\n \n+      if (e == &gfc_bad_expr || range_check (e, \"SHAPE\") == &gfc_bad_expr)\n+\t{\n+\t  gfc_free_expr (result);\n+\t  if (t)\n+\t    gfc_clear_shape (shape, source->rank);\n+\t  return &gfc_bad_expr;\n+\t}\n+\n       gfc_constructor_append_expr (&result->value.constructor, e, NULL);\n     }\n \n+  if (t)\n+    gfc_clear_shape (shape, source->rank);\n+\n   return result;\n }\n \n \n-gfc_expr *\n-gfc_simplify_size (gfc_expr *array, gfc_expr *dim, gfc_expr *kind)\n+static gfc_expr *\n+simplify_size (gfc_expr *array, gfc_expr *dim, int k)\n {\n   mpz_t size;\n   gfc_expr *return_value;\n   int d;\n-  int k = get_kind (BT_INTEGER, kind, \"SIZE\", gfc_default_integer_kind);\n-\n-  if (k == -1)\n-    return &gfc_bad_expr;\n \n   /* For unary operations, the size of the result is given by the size\n      of the operand.  For binary ones, it's the size of the first operand\n@@ -5603,7 +5609,7 @@ gfc_simplify_size (gfc_expr *array, gfc_expr *dim, gfc_expr *kind)\n \t      replacement = array->value.op.op1;\n \t    else\n \t      {\n-\t\tsimplified = gfc_simplify_size (array->value.op.op1, dim, kind);\n+\t\tsimplified = simplify_size (array->value.op.op1, dim, k);\n \t\tif (simplified)\n \t\t  return simplified;\n \n@@ -5613,18 +5619,20 @@ gfc_simplify_size (gfc_expr *array, gfc_expr *dim, gfc_expr *kind)\n \t}\n \n       /* Try to reduce it directly if possible.  */\n-      simplified = gfc_simplify_size (replacement, dim, kind);\n+      simplified = simplify_size (replacement, dim, k);\n \n       /* Otherwise, we build a new SIZE call.  This is hopefully at least\n \t simpler than the original one.  */\n       if (!simplified)\n-\tsimplified = gfc_build_intrinsic_call (gfc_current_ns,\n-\t\t\t\t\t       GFC_ISYM_SIZE, \"size\",\n-\t\t\t\t\t       array->where, 3,\n-\t\t\t\t\t       gfc_copy_expr (replacement),\n-\t\t\t\t\t       gfc_copy_expr (dim),\n-\t\t\t\t\t       gfc_copy_expr (kind));\n-\n+\t{\n+\t  gfc_expr *kind = gfc_get_int_expr (gfc_default_integer_kind, NULL, k);\n+\t  simplified = gfc_build_intrinsic_call (gfc_current_ns,\n+\t\t\t\t\t\t GFC_ISYM_SIZE, \"size\",\n+\t\t\t\t\t\t array->where, 3,\n+\t\t\t\t\t\t gfc_copy_expr (replacement),\n+\t\t\t\t\t\t gfc_copy_expr (dim),\n+\t\t\t\t\t\t kind);\n+\t}\n       return simplified;\n     }\n \n@@ -5643,12 +5651,31 @@ gfc_simplify_size (gfc_expr *array, gfc_expr *dim, gfc_expr *kind)\n \treturn NULL;\n     }\n \n-  return_value = gfc_get_int_expr (k, &array->where, mpz_get_si (size));\n+  return_value = gfc_get_constant_expr (BT_INTEGER, k, &array->where);\n+  mpz_set (return_value->value.integer, size);\n   mpz_clear (size);\n+\n   return return_value;\n }\n \n \n+gfc_expr *\n+gfc_simplify_size (gfc_expr *array, gfc_expr *dim, gfc_expr *kind)\n+{\n+  gfc_expr *result;\n+  int k = get_kind (BT_INTEGER, kind, \"SIZE\", gfc_default_integer_kind);\n+\n+  if (k == -1)\n+    return &gfc_bad_expr;\n+\n+  result = simplify_size (array, dim, k);\n+  if (result == NULL || result == &gfc_bad_expr)\n+    return result;\n+\n+  return range_check (result, \"SIZE\");\n+}\n+\n+\n /* SIZEOF and C_SIZEOF return the size in bytes of an array element\n    multiplied by the array size.  */\n \n@@ -5705,7 +5732,8 @@ gfc_simplify_storage_size (gfc_expr *x,\n   mpz_set_si (result->value.integer, gfc_element_size (x));\n \n   mpz_mul_ui (result->value.integer, result->value.integer, BITS_PER_UNIT);\n-  return result;\n+\n+  return range_check (result, \"STORAGE_SIZE\");\n }\n \n "}, {"sha": "c8dc18990ac33224976d5b31da662d81a7a6f2e1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1634e53f83e6867eee8a0e88ac8869bec5af1f82/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1634e53f83e6867eee8a0e88ac8869bec5af1f82/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1634e53f83e6867eee8a0e88ac8869bec5af1f82", "patch": "@@ -1,3 +1,9 @@\n+2013-05-02  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57142\n+\t* gfortran.dg/size_kind_2.f90: New.\n+\t* gfortran.dg/size_kind_3.f90: New.\n+\n 2013-05-02  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/57140"}, {"sha": "002221c5b34d698431d592619c8cd57736cfa270", "filename": "gcc/testsuite/gfortran.dg/size_kind_2.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1634e53f83e6867eee8a0e88ac8869bec5af1f82/gcc%2Ftestsuite%2Fgfortran.dg%2Fsize_kind_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1634e53f83e6867eee8a0e88ac8869bec5af1f82/gcc%2Ftestsuite%2Fgfortran.dg%2Fsize_kind_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsize_kind_2.f90?ref=1634e53f83e6867eee8a0e88ac8869bec5af1f82", "patch": "@@ -0,0 +1,17 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! PR fortran/57142\n+!\n+integer :: B(huge(1)+3_8,2_8)\n+integer(8) :: var1(2), var2, var3\n+\n+var1 = shape(B,kind=8)\n+var2 = size(B,kind=8)\n+var3 = size(B,dim=1,kind=8)\n+end\n+\n+! { dg-final { scan-tree-dump \"static integer.kind=8. A..\\\\\\[2\\\\\\] = \\\\\\{2147483650, 2\\\\\\};\" \"original\" } }\n+! { dg-final { scan-tree-dump \"var2 = 4294967300;\" \"original\" } }\n+! { dg-final { scan-tree-dump \"var3 = 2147483650;\" \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "ae57bd9a157664328f25e5cd9180ced24e402b88", "filename": "gcc/testsuite/gfortran.dg/size_kind_3.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1634e53f83e6867eee8a0e88ac8869bec5af1f82/gcc%2Ftestsuite%2Fgfortran.dg%2Fsize_kind_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1634e53f83e6867eee8a0e88ac8869bec5af1f82/gcc%2Ftestsuite%2Fgfortran.dg%2Fsize_kind_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsize_kind_3.f90?ref=1634e53f83e6867eee8a0e88ac8869bec5af1f82", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+!\n+! PR fortran/57142\n+!\n+integer :: B(huge(1)+3_8,2_8)\n+integer(8) :: var1(2), var2, var3\n+\n+var1 = shape(B) ! { dg-error \"SHAPE overflows its kind\" }\n+var2 = size(B) ! { dg-error \"SIZE overflows its kind\" }\n+var3 = size(B,dim=1) ! { dg-error \"SIZE overflows its kind\" }\n+end"}]}