{"sha": "dcfef7d48a2efbf578d586e894863136d8cae6de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNmZWY3ZDQ4YTJlZmJmNTc4ZDU4NmU4OTQ4NjMxMzZkOGNhZTZkZQ==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2007-04-17T18:47:19Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2007-04-17T18:47:19Z"}, "message": "trans-types.h (gfc_packed): New enum.\n\n* trans-types.h (gfc_packed): New enum.\n(gfc_get_nodesc_array_type): Change prototype to use new enum.\n* trans-types.c (gfc_get_nodesc_array): Use gfc_packed for\nargument packed.  Adapt all references to values accordingly.\n(gfc_sym_type): Use enum values in call to gfc_get_nodesc_array.\n(gfc_get_derived_type): Likewise.\n* trans-array.c (gfc_build_constant_array_constructor): Likewise.\n* trans-expr.c (gfc_get_interface_mapping_charlen): Changed packed\nargument to type gfc_packed.\n(gfc_add_interface_mapping): Use enum values in call to\ngfc_get_interface_mapping.\n* trans-decl.c (gfc_build_dummy_array_decl): Adapt to use enum\nvalues when determining packing.\n\nFrom-SVN: r123924", "tree": {"sha": "5dd769b03ed06d8ac44f5aeeb8ee9d71d96d0b73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5dd769b03ed06d8ac44f5aeeb8ee9d71d96d0b73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcfef7d48a2efbf578d586e894863136d8cae6de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcfef7d48a2efbf578d586e894863136d8cae6de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcfef7d48a2efbf578d586e894863136d8cae6de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcfef7d48a2efbf578d586e894863136d8cae6de/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f01ec37df9e2d75b027fa7fb2bc8738a5c6f580c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f01ec37df9e2d75b027fa7fb2bc8738a5c6f580c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f01ec37df9e2d75b027fa7fb2bc8738a5c6f580c"}], "stats": {"total": 79, "additions": 49, "deletions": 30}, "files": [{"sha": "91bfe3062ce780d7a2b0177d4220cfac60f9e451", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfef7d48a2efbf578d586e894863136d8cae6de/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfef7d48a2efbf578d586e894863136d8cae6de/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=dcfef7d48a2efbf578d586e894863136d8cae6de", "patch": "@@ -1,5 +1,19 @@\n 2007-04-17  Tobias Schl\ufffdter  <tobi@gcc.gnu.org>\n \n+\t* trans-types.h (gfc_packed): New enum.\n+\t(gfc_get_nodesc_array_type): Change prototype to use new enum.\n+\t* trans-types.c (gfc_get_nodesc_array): Use gfc_packed for\n+\targument packed.  Adapt all references to values accordingly.\n+\t(gfc_sym_type): Use enum values in call to gfc_get_nodesc_array.\n+\t(gfc_get_derived_type): Likewise.\n+\t* trans-array.c (gfc_build_constant_array_constructor): Likewise.\n+\t* trans-expr.c (gfc_get_interface_mapping_charlen): Changed packed\n+\targument to type gfc_packed.\n+\t(gfc_add_interface_mapping): Use enum values in call to\n+\tgfc_get_interface_mapping.\n+\t* trans-decl.c (gfc_build_dummy_array_decl): Adapt to use enum\n+\tvalues when determining packing.\n+\n \t* arith.h: Update copyright years.\n \t* dependency.h: Likewise.\n \t* gfortran.h: Likewise."}, {"sha": "b6a2ac029634c87425c36a188f4c2edd95b09228", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfef7d48a2efbf578d586e894863136d8cae6de/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfef7d48a2efbf578d586e894863136d8cae6de/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=dcfef7d48a2efbf578d586e894863136d8cae6de", "patch": "@@ -1493,7 +1493,7 @@ gfc_build_constant_array_constructor (gfc_expr * expr, tree type)\n \tas.upper[i] = gfc_int_expr (tmp - 1);\n       }\n \n-  tmptype = gfc_get_nodesc_array_type (type, &as, 3);\n+  tmptype = gfc_get_nodesc_array_type (type, &as, PACKED_STATIC);\n \n   init = build_constructor_from_list (tmptype, nreverse (list));\n "}, {"sha": "ccf46852761f723936f6376b1251e78dc89b96e2", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfef7d48a2efbf578d586e894863136d8cae6de/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfef7d48a2efbf578d586e894863136d8cae6de/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=dcfef7d48a2efbf578d586e894863136d8cae6de", "patch": "@@ -664,7 +664,7 @@ gfc_build_dummy_array_decl (gfc_symbol * sym, tree dummy)\n   tree type;\n   gfc_array_spec *as;\n   char *name;\n-  int packed;\n+  gfc_packed packed;\n   int n;\n   bool known_size;\n \n@@ -697,28 +697,28 @@ gfc_build_dummy_array_decl (gfc_symbol * sym, tree dummy)\n     {\n       /* Create a descriptorless array pointer.  */\n       as = sym->as;\n-      packed = 0;\n+      packed = PACKED_NO;\n       if (!gfc_option.flag_repack_arrays)\n \t{\n \t  if (as->type == AS_ASSUMED_SIZE)\n-\t    packed = 2;\n+\t    packed = PACKED_FULL;\n \t}\n       else\n \t{\n \t  if (as->type == AS_EXPLICIT)\n \t    {\n-\t      packed = 2;\n+\t      packed = PACKED_FULL;\n \t      for (n = 0; n < as->rank; n++)\n \t\t{\n \t\t  if (!(as->upper[n]\n \t\t\t&& as->lower[n]\n \t\t\t&& as->upper[n]->expr_type == EXPR_CONSTANT\n \t\t\t&& as->lower[n]->expr_type == EXPR_CONSTANT))\n-\t\t    packed = 1;\n+\t\t    packed = PACKED_PARTIAL;\n \t\t}\n \t    }\n \t  else\n-\t    packed = 1;\n+\t    packed = PACKED_PARTIAL;\n \t}\n \n       type = gfc_typenode_for_spec (&sym->ts);\n@@ -732,7 +732,7 @@ gfc_build_dummy_array_decl (gfc_symbol * sym, tree dummy)\n       DECL_ARTIFICIAL (sym->backend_decl) = 1;\n       sym->backend_decl = NULL_TREE;\n       type = gfc_sym_type (sym);\n-      packed = 2;\n+      packed = PACKED_FULL;\n     }\n \n   ASM_FORMAT_PRIVATE_NAME (name, IDENTIFIER_POINTER (DECL_NAME (dummy)), 0);\n@@ -747,16 +747,10 @@ gfc_build_dummy_array_decl (gfc_symbol * sym, tree dummy)\n      frontend bugs.  */\n   gcc_assert (sym->as->type != AS_DEFERRED);\n \n-  switch (packed)\n-    {\n-    case 1:\n-      GFC_DECL_PARTIAL_PACKED_ARRAY (decl) = 1;\n-      break;\n-\n-    case 2:\n-      GFC_DECL_PACKED_ARRAY (decl) = 1;\n-      break;\n-    }\n+  if (packed == PACKED_PARTIAL)\n+    GFC_DECL_PARTIAL_PACKED_ARRAY (decl) = 1;\n+  else if (packed == PACKED_FULL)\n+    GFC_DECL_PACKED_ARRAY (decl) = 1;\n \n   gfc_build_qualified_array (decl, sym);\n "}, {"sha": "498cc718790ddb572a065f8e52904d299184b6c4", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfef7d48a2efbf578d586e894863136d8cae6de/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfef7d48a2efbf578d586e894863136d8cae6de/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=dcfef7d48a2efbf578d586e894863136d8cae6de", "patch": "@@ -1348,7 +1348,7 @@ gfc_get_interface_mapping_charlen (gfc_interface_mapping * mapping,\n \n static tree\n gfc_get_interface_mapping_array (stmtblock_t * block, gfc_symbol * sym,\n-\t\t\t\t int packed, tree data)\n+\t\t\t\t gfc_packed packed, tree data)\n {\n   tree type;\n   tree var;\n@@ -1500,14 +1500,16 @@ gfc_add_interface_mapping (gfc_interface_mapping * mapping,\n \n       /* Create the replacement variable.  */\n       tmp = gfc_conv_descriptor_data_get (desc);\n-      value = gfc_get_interface_mapping_array (&se->pre, sym, 0, tmp);\n+      value = gfc_get_interface_mapping_array (&se->pre, sym,\n+\t\t\t\t\t       PACKED_NO, tmp);\n \n       /* Use DESC to work out the upper bounds, strides and offset.  */\n       gfc_set_interface_mapping_bounds (&se->pre, TREE_TYPE (value), desc);\n     }\n   else\n     /* Otherwise we have a packed array.  */\n-    value = gfc_get_interface_mapping_array (&se->pre, sym, 2, se->expr);\n+    value = gfc_get_interface_mapping_array (&se->pre, sym,\n+\t\t\t\t\t     PACKED_FULL, se->expr);\n \n   new_sym->backend_decl = value;\n }"}, {"sha": "c31b732101a66b0fb42bdcb76595ce99e2adf873", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfef7d48a2efbf578d586e894863136d8cae6de/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfef7d48a2efbf578d586e894863136d8cae6de/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=dcfef7d48a2efbf578d586e894863136d8cae6de", "patch": "@@ -1006,11 +1006,11 @@ gfc_get_dtype (tree type)\n }\n \n \n-/* Build an array type for use without a descriptor.  Valid values of packed\n-   are 0=no, 1=partial, 2=full, 3=static.  */\n+/* Build an array type for use without a descriptor, packed according\n+   to the value of PACKED.  */\n \n tree\n-gfc_get_nodesc_array_type (tree etype, gfc_array_spec * as, int packed)\n+gfc_get_nodesc_array_type (tree etype, gfc_array_spec * as, gfc_packed packed)\n {\n   tree range;\n   tree type;\n@@ -1036,7 +1036,7 @@ gfc_get_nodesc_array_type (tree etype, gfc_array_spec * as, int packed)\n   TYPE_LANG_SPECIFIC (type) = (struct lang_type *)\n     ggc_alloc_cleared (sizeof (struct lang_type));\n \n-  known_stride = (packed != 0);\n+  known_stride = (packed != PACKED_NO);\n   known_offset = 1;\n   for (n = 0; n < as->rank; n++)\n     {\n@@ -1092,7 +1092,7 @@ gfc_get_nodesc_array_type (tree etype, gfc_array_spec * as, int packed)\n         }\n \n       /* Only the first stride is known for partial packed arrays.  */\n-      if (packed < 2)\n+      if (packed == PACKED_NO || packed == PACKED_PARTIAL)\n         known_stride = 0;\n     }\n \n@@ -1140,7 +1140,7 @@ gfc_get_nodesc_array_type (tree etype, gfc_array_spec * as, int packed)\n   mpz_clear (stride);\n   mpz_clear (delta);\n \n-  if (packed < 3 || !known_stride)\n+  if (packed != PACKED_STATIC || !known_stride)\n     {\n       /* For dummy arrays and automatic (heap allocated) arrays we\n \t want a pointer to the array.  */\n@@ -1350,7 +1350,8 @@ gfc_sym_type (gfc_symbol * sym)\n \t      || sym->ts.cl->backend_decl)\n \t    {\n \t      type = gfc_get_nodesc_array_type (type, sym->as,\n-\t\t\t\t\t\tbyref ? 2 : 3);\n+\t\t\t\t\t\tbyref ? PACKED_FULL\n+\t\t\t\t\t\t      : PACKED_STATIC);\n \t      byref = 0;\n \t    }\n         }\n@@ -1538,7 +1539,8 @@ gfc_get_derived_type (gfc_symbol * derived)\n \t      field_type = gfc_build_array_type (field_type, c->as);\n \t    }\n \t  else\n-\t    field_type = gfc_get_nodesc_array_type (field_type, c->as, 3);\n+\t    field_type = gfc_get_nodesc_array_type (field_type, c->as,\n+\t\t\t\t\t\t    PACKED_STATIC);\n \t}\n       else if (c->pointer)\n \tfield_type = build_pointer_type (field_type);"}, {"sha": "c39c375ad17411984c25002145ab36d680f30323", "filename": "gcc/fortran/trans-types.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfef7d48a2efbf578d586e894863136d8cae6de/gcc%2Ffortran%2Ftrans-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfef7d48a2efbf578d586e894863136d8cae6de/gcc%2Ffortran%2Ftrans-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.h?ref=dcfef7d48a2efbf578d586e894863136d8cae6de", "patch": "@@ -54,6 +54,13 @@ extern GTY(()) tree pchar_type_node;\n    and runtime library.  */\n extern GTY(()) tree gfc_charlen_type_node;\n \n+typedef enum {\n+  PACKED_NO = 0,\n+  PACKED_PARTIAL,\n+  PACKED_FULL,\n+  PACKED_STATIC\n+} gfc_packed;\n+\n /* be-function.c */\n void gfc_convert_function_code (gfc_namespace *);\n \n@@ -80,7 +87,7 @@ tree gfc_signed_type (tree);\n \n tree gfc_get_element_type (tree);\n tree gfc_get_array_type_bounds (tree, int, tree *, tree *, int);\n-tree gfc_get_nodesc_array_type (tree, gfc_array_spec *, int);\n+tree gfc_get_nodesc_array_type (tree, gfc_array_spec *, gfc_packed);\n \n /* Add a field of given name and type to a UNION_TYPE or RECORD_TYPE.  */\n tree gfc_add_field_to_struct (tree *, tree, tree, tree);"}]}