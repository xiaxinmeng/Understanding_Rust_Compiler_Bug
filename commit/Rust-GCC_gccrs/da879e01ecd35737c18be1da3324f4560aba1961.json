{"sha": "da879e01ecd35737c18be1da3324f4560aba1961", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE4NzllMDFlY2QzNTczN2MxOGJlMWRhMzMyNGY0NTYwYWJhMTk2MQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-04-15T21:49:30Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-04-15T21:51:00Z"}, "message": "Propagate type attribute when merging extern declarations at local scope.\n\nResolves:\nPR c/99420 - bogus -Warray-parameter on a function redeclaration in function scope\nPR c/99972 - missing -Wunused-result on a call to a locally redeclared warn_unused_result function\n\ngcc/c/ChangeLog:\n\n\tPR c/99420\n\tPR c/99972\n\t* c-decl.c (pushdecl): Always propagate type attribute.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c/99420\n\tPR c/99972\n\t* gcc.dg/Warray-parameter-9.c: New test.\n\t* gcc.dg/Wnonnull-6.c: New test.\n\t* gcc.dg/Wreturn-type3.c: New test.\n\t* gcc.dg/Wunused-result.c: New test.\n\t* gcc.dg/attr-noreturn.c: New test.\n\t* gcc.dg/attr-returns-nonnull.c: New test.", "tree": {"sha": "f51df9e8918cf84bc287bbdd0e7f4b9300da023f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f51df9e8918cf84bc287bbdd0e7f4b9300da023f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da879e01ecd35737c18be1da3324f4560aba1961", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da879e01ecd35737c18be1da3324f4560aba1961", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da879e01ecd35737c18be1da3324f4560aba1961", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da879e01ecd35737c18be1da3324f4560aba1961/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58fe131b91007793c0f12f5fe6cab3f1a017d0fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58fe131b91007793c0f12f5fe6cab3f1a017d0fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58fe131b91007793c0f12f5fe6cab3f1a017d0fa"}], "stats": {"total": 382, "additions": 377, "deletions": 5}, "files": [{"sha": "3ea4708c5075d9274601a0676f86a6900a9345b0", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da879e01ecd35737c18be1da3324f4560aba1961/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da879e01ecd35737c18be1da3324f4560aba1961/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=da879e01ecd35737c18be1da3324f4560aba1961", "patch": "@@ -3263,11 +3263,10 @@ pushdecl (tree x)\n \t  else\n \t    thistype = type;\n \t  b->u.type = TREE_TYPE (b->decl);\n-\t  if (TREE_CODE (b->decl) == FUNCTION_DECL\n-\t      && fndecl_built_in_p (b->decl))\n-\t    thistype\n-\t      = build_type_attribute_variant (thistype,\n-\t\t\t\t\t      TYPE_ATTRIBUTES (b->u.type));\n+\t  /* Propagate the type attributes to the decl.  */\n+\t  thistype\n+\t    = build_type_attribute_variant (thistype,\n+\t\t\t\t\t    TYPE_ATTRIBUTES (b->u.type));\n \t  TREE_TYPE (b->decl) = thistype;\n \t  bind (name, b->decl, scope, /*invisible=*/false, /*nested=*/true,\n \t\tlocus);"}, {"sha": "b5d3d963c8852a7fb3f014eaf9ea9586a5de7c25", "filename": "gcc/testsuite/gcc.dg/Warray-parameter-9.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da879e01ecd35737c18be1da3324f4560aba1961/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-parameter-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da879e01ecd35737c18be1da3324f4560aba1961/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-parameter-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-parameter-9.c?ref=da879e01ecd35737c18be1da3324f4560aba1961", "patch": "@@ -0,0 +1,54 @@\n+/* PR c/99420 - bogus -Warray-parameter on a function redeclaration\n+   in function scope\n+   { dg-do compile }\n+   { dg-options \"-Wall\" } */\n+\n+extern int a1[1], a2[2], a3[3], a4[4];\n+\n+void fa1 (int [1]);     // { dg-message \"previously declared as 'int\\\\\\[1]'\" }\n+void fa1 (int [1]);\n+\n+\n+void nested_decl (void)\n+{\n+  void fa2 (int [2]);\n+\n+  fa2 (a1);             // { dg-warning \"\\\\\\[-Warray-bounds|-Wstringop-overflow\" }\n+  fa2 (a2);\n+  fa2 (a3);\n+\n+  void fa3 (int [3]);\n+\n+  fa3 (a2);             // { dg-warning \"\\\\\\[-Warray-bounds|-Wstringop-overflow\" }\n+  fa3 (a3);\n+}\n+\n+\n+void nested_redecl (void)\n+{\n+  void fa1 (int [2]);   // { dg-warning \"argument 1 of type 'int\\\\\\[2]' with mismatched bound\" }\n+\n+  fa1 (a1 + 1);         // { dg-warning \"\\\\\\[-Warray-bounds|-Wstringop-overflow\" }\n+  fa1 (a1);\n+\n+  void fa2 (int [2]);   // { dg-bogus \"\\\\\\[-Warray-parameter\" }\n+\n+  fa2 (a1);             // { dg-warning \"\\\\\\[-Warray-bounds|-Wstringop-overflow\" }\n+  fa2 (a2);\n+  fa2 (a3);\n+\n+  void fa3 (int [3]);   // { dg-bogus \"\\\\\\[-Warray-parameter\" }\n+\n+  fa3 (a2);             // { dg-warning \"\\\\\\[-Warray-bounds|-Wstringop-overflow\" }\n+  fa3 (a3);\n+\n+  void fa4 (int [4]);\n+}\n+\n+void fa4 (int [5]);     // { dg-warning \"\\\\\\[-Warray-parameter\" }\n+\n+void call_fa4 (void)\n+{\n+  fa4 (a4);\n+  fa4 (a3);             // { dg-warning \"\\\\\\[-Warray-bounds|-Wstringop-overflow\" }\n+}"}, {"sha": "48f09da996f3b5d356e67c400d146cd5c4f395af", "filename": "gcc/testsuite/gcc.dg/Wnonnull-6.c", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da879e01ecd35737c18be1da3324f4560aba1961/gcc%2Ftestsuite%2Fgcc.dg%2FWnonnull-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da879e01ecd35737c18be1da3324f4560aba1961/gcc%2Ftestsuite%2Fgcc.dg%2FWnonnull-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWnonnull-6.c?ref=da879e01ecd35737c18be1da3324f4560aba1961", "patch": "@@ -0,0 +1,93 @@\n+/* Verify that attribute nonnull on global and local function declarations\n+   or those to pointers to functions is merged.\n+   { dg-do compile }\n+   { dg-options \"-Wall\" } */\n+\n+void fnonnull_local_local (void)\n+{\n+  extern __attribute__ ((nonnull)) void fnonnull1 (void*);\n+\n+  fnonnull1 (0);    // { dg-warning \"\\\\\\[-Wnonnull\" }\n+}\n+\n+void gnonnull_local_local (void)\n+{\n+  extern void fnonnull1 (void*);\n+\n+  fnonnull1 (0);    // { dg-warning \"\\\\\\[-Wnonnull\" }\n+}\n+\n+\n+void fnonnull_local_global (void)\n+{\n+  extern __attribute__ ((nonnull)) void fnonnull2 (void*);\n+\n+  fnonnull2 (0);    // { dg-warning \"\\\\\\[-Wnonnull\" }\n+}\n+\n+extern void fnonnull2 (void*);\n+\n+void gnonnull_local_global (void)\n+{\n+  fnonnull2 (0);    // { dg-warning \"\\\\\\[-Wnonnull\" }\n+}\n+\n+\n+extern __attribute__ ((nonnull)) void fnonnull3 (void*);\n+\n+void fnonnull_global_local (void)\n+{\n+  fnonnull3 (0);    // { dg-warning \"\\\\\\[-Wnonnull\" }\n+}\n+\n+void gnonnull_global_local (void)\n+{\n+  extern void fnonnull3 (void*);\n+\n+  fnonnull3 (0);    // { dg-warning \"\\\\\\[-Wnonnull\" }\n+}\n+\n+\n+void pfnonnull_local_local (void)\n+{\n+  extern __attribute__ ((nonnull)) void (*pfnonnull1) (void*);\n+\n+  pfnonnull1 (0);   // { dg-warning \"\\\\\\[-Wnonnull\" }\n+}\n+\n+void gpnonnull_local_local (void)\n+{\n+  extern void (*pfnonnull1) (void*);\n+\n+  pfnonnull1 (0);   // { dg-warning \"\\\\\\[-Wnonnull\" \"pr?????\" { xfail *-*-* } }\n+}\n+\n+\n+void pfnonnull_local_global (void)\n+{\n+  extern __attribute__ ((nonnull)) void (*pfnonnull2) (void*);\n+\n+  pfnonnull2 (0);   // { dg-warning \"\\\\\\[-Wnonnull\" }\n+}\n+\n+extern void (*pfnonnull2) (void*);\n+\n+void gpnonnull_local_global (void)\n+{\n+  pfnonnull2 (0);   // { dg-warning \"\\\\\\[-Wnonnull\" \"pr?????\" { xfail *-*-* } }\n+}\n+\n+\n+extern __attribute__ ((nonnull)) void (*pfnonnull3) (void*);\n+\n+void pfnonnull_global_local (void)\n+{\n+  pfnonnull3 (0);   // { dg-warning \"\\\\\\[-Wnonnull\" }\n+}\n+\n+void gpnonnull_global_local (void)\n+{\n+  extern void (*pfnonnull3) (void*);\n+\n+  pfnonnull3 (0);   // { dg-warning \"\\\\\\[-Wnonnull\" }\n+}"}, {"sha": "93596b399f1315d644b60dce281b7b1802ce77f7", "filename": "gcc/testsuite/gcc.dg/Wreturn-type3.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da879e01ecd35737c18be1da3324f4560aba1961/gcc%2Ftestsuite%2Fgcc.dg%2FWreturn-type3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da879e01ecd35737c18be1da3324f4560aba1961/gcc%2Ftestsuite%2Fgcc.dg%2FWreturn-type3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWreturn-type3.c?ref=da879e01ecd35737c18be1da3324f4560aba1961", "patch": "@@ -0,0 +1,54 @@\n+/* Verify that attribute noreturn on global and local function declarations\n+   is merged.\n+   { dg-do compile }\n+   { dg-options \"-Wall\" } */\n+\n+int fnr_local_local (void)\n+{\n+  __attribute__ ((noreturn)) void fnr1 (void);\n+\n+  fnr1 ();\n+  // no return, no warning (good)\n+}\n+\n+int gnr_local_local (void)\n+{\n+  void fnr1 (void);\n+\n+  fnr1 ();\n+  // no return, no warning (good)\n+}\n+\n+\n+int fnr_local_global (void)\n+{\n+  __attribute__ ((noreturn)) void fnr2 (void);\n+\n+  fnr2 ();\n+  // no return, no warning (good)\n+}\n+\n+void fnr2 (void);\n+\n+int gnr_local_global (void)\n+{\n+  fnr2 ();\n+  // no return, no warning (good)\n+}\n+\n+\n+__attribute__ ((noreturn)) void fnr3 (void);\n+\n+int fnr_global_local (void)\n+{\n+  fnr3 ();\n+  // no return, no warning (good)\n+}\n+\n+int gnr_global_local (void)\n+{\n+  void fnr3 (void);\n+\n+  fnr3 ();\n+  // no return, no warning (good)\n+}"}, {"sha": "c0bb9ae35e24d70fb3a8a5a94d00f50d0e34d861", "filename": "gcc/testsuite/gcc.dg/Wunused-result.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da879e01ecd35737c18be1da3324f4560aba1961/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-result.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da879e01ecd35737c18be1da3324f4560aba1961/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-result.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-result.c?ref=da879e01ecd35737c18be1da3324f4560aba1961", "patch": "@@ -0,0 +1,50 @@\n+/* PR c/99972 - missing -Wunused-result on a call to a locally redeclared\n+   warn_unused_result function\n+   { dg-do compile }\n+   { dg-options \"-Wall\" } */\n+\n+void gwur_local_local (void)\n+{\n+  __attribute__ ((warn_unused_result)) int fwur1 (void);\n+\n+  fwur1 ();         // { dg-warning \"\\\\\\[-Wunused-result\" }\n+}\n+\n+void hwur_local_local (void)\n+{\n+  /* Verify the attribute from the declaration above is copied/merged\n+     into the declaration below.  */\n+  int fwur1 (void);\n+\n+  fwur1 ();          // { dg-warning \"\\\\\\[-Wunused-result\" }\n+}\n+\n+\n+void gwur_local_global (void)\n+{\n+  __attribute__ ((warn_unused_result)) int fwur2 (void);\n+\n+  fwur2 ();         // { dg-warning \"\\\\\\[-Wunused-result\" }\n+}\n+\n+int fwur2 (void);\n+\n+void hwur_local_global (void)\n+{\n+  fwur2 ();         // { dg-warning \"\\\\\\[-Wunused-result\" }\n+}\n+\n+\n+__attribute__ ((warn_unused_result)) int fwur3 (void);\n+\n+void gwur_global_local (void)\n+{\n+  fwur3 ();         // { dg-warning \"\\\\\\[-Wunused-result\" }\n+}\n+\n+void hwur_global_local (void)\n+{\n+  int fwur3 (void);\n+\n+  fwur3 ();         // { dg-warning \"\\\\\\[-Wunused-result\" }\n+}"}, {"sha": "8d58f6ece9bffa5ca621083eb51862fd3475c63a", "filename": "gcc/testsuite/gcc.dg/attr-noreturn.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da879e01ecd35737c18be1da3324f4560aba1961/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-noreturn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da879e01ecd35737c18be1da3324f4560aba1961/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-noreturn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-noreturn.c?ref=da879e01ecd35737c18be1da3324f4560aba1961", "patch": "@@ -0,0 +1,64 @@\n+/* Verify that attribute noreturn on global and local function declarations\n+   is merged.\n+   { dg-do compile }\n+   { dg-options \"-Wall -fdump-tree-optimized\" } */\n+\n+void foo (void);\n+\n+int fnr_local_local (void)\n+{\n+  __attribute__ ((noreturn)) void fnr1 (void);\n+\n+  fnr1 ();\n+\n+  foo ();\n+}\n+\n+int gnr_local_local (void)\n+{\n+  void fnr1 (void);\n+\n+  fnr1 ();\n+\n+  foo ();\n+}\n+\n+\n+int fnr_local_global (void)\n+{\n+  __attribute__ ((noreturn)) void fnr2 (void);\n+\n+  fnr2 ();\n+\n+  foo ();\n+}\n+\n+void fnr2 (void);\n+\n+int gnr_local_global (void)\n+{\n+  fnr2 ();\n+\n+  foo ();\n+}\n+\n+\n+__attribute__ ((noreturn)) void fnr3 (void);\n+\n+int fnr_global_local (void)\n+{\n+  fnr3 ();\n+\n+  foo ();\n+}\n+\n+int gnr_global_local (void)\n+{\n+  void fnr3 (void);\n+\n+  fnr3 ();\n+\n+  foo ();\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"foo\" \"optimized\" } } */"}, {"sha": "22ee30ac5df48330abe7927c443d3c350bcd5897", "filename": "gcc/testsuite/gcc.dg/attr-returns-nonnull.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da879e01ecd35737c18be1da3324f4560aba1961/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-returns-nonnull.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da879e01ecd35737c18be1da3324f4560aba1961/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-returns-nonnull.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-returns-nonnull.c?ref=da879e01ecd35737c18be1da3324f4560aba1961", "patch": "@@ -0,0 +1,58 @@\n+/* Verify that attribute returns_nonnull on global and local function\n+   declarations is merged.\n+   { dg-do compile }\n+   { dg-options \"-Wall -fdump-tree-optimized\" } */\n+\n+void foo (void);\n+\n+\n+void frnn_local_local (void)\n+{\n+  __attribute__ ((returns_nonnull)) void* frnn1 (void);\n+\n+  if (!frnn1 ())\n+    foo ();\n+}\n+\n+void gnr_local_local (void)\n+{\n+  void* frnn1 (void);\n+\n+  if (!frnn1 ())\n+    foo ();\n+}\n+\n+void frnn_local_global (void)\n+{\n+  __attribute__ ((returns_nonnull)) void* frnn2 (void);\n+\n+  if (!frnn2 ())\n+    foo ();\n+}\n+\n+void* frnn2 (void);\n+\n+void gnr_local_global (void)\n+{\n+  if (!frnn2 ())\n+    foo ();\n+}\n+\n+__attribute__ ((returns_nonnull)) void* frnn3 (void);\n+\n+void frnn_global_local (void)\n+{\n+  if (!frnn3 ())\n+    foo ();\n+}\n+\n+void gnr_global_local (void)\n+{\n+  void* frnn3 (void);\n+\n+  if (!frnn3 ())\n+    foo ();\n+}\n+\n+\n+/* { dg-final { scan-tree-dump-not \"foo\" \"optimized\" } } */"}]}