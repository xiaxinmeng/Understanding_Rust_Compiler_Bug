{"sha": "a1541628df83eb690954f426d56d268fb57f1af6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE1NDE2MjhkZjgzZWI2OTA5NTRmNDI2ZDU2ZDI2OGZiNTdmMWFmNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-18T09:32:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-18T09:32:57Z"}, "message": "i386: Avoid C++ global constructors in every object that includes i386.h\n\nWhen looking at recog.o when working on the recog.[ch] changes to make sure\nI have not introduced runtime construction of recog_data variable, I have\nnoticed that at least in unoptimized build, every single *.o file that\nincluded i386.h has lots of runtime constructors for all the PTA_*\nvariables.\n\nAs we now require C++11, the following patch makes those constexpr so that\nthey don't need runtime initialization.\nI've verified that ~ 8276 bytes long _Z41__static_initialization_and_destruction_0ii\nat -O0 is gone from every *.o that included i386.h (and doesn't really need\nany global ctors anymore).\n\n2021-02-18  Jakub Jelinek  <jakub@redhat.com>\n\n\t* wide-int-bitmask.h (wide_int_bitmask::wide_int_bitmask (),\n\twide_int_bitmask::wide_int_bitmask (uint64_t),\n\twide_int_bitmask::wide_int_bitmask (uint64_t, uint64_t),\n\twide_int_bitmask::operator ~ () const,\n\twide_int_bitmask::operator | (wide_int_bitmask) const,\n\twide_int_bitmask::operator & (wide_int_bitmask) const): Use constexpr\n\tinstead of inline.\n\t* config/i386/i386.h (PTA_3DNOW, PTA_3DNOW_A, PTA_64BIT, PTA_ABM,\n\tPTA_AES, PTA_AVX, PTA_BMI, PTA_CX16, PTA_F16C, PTA_FMA, PTA_FMA4,\n\tPTA_FSGSBASE, PTA_LWP, PTA_LZCNT, PTA_MMX, PTA_MOVBE, PTA_NO_SAHF,\n\tPTA_PCLMUL, PTA_POPCNT, PTA_PREFETCH_SSE, PTA_RDRND, PTA_SSE, PTA_SSE2,\n\tPTA_SSE3, PTA_SSE4_1, PTA_SSE4_2, PTA_SSE4A, PTA_SSSE3, PTA_TBM,\n\tPTA_XOP, PTA_AVX2, PTA_BMI2, PTA_RTM, PTA_HLE, PTA_PRFCHW, PTA_RDSEED,\n\tPTA_ADX, PTA_FXSR, PTA_XSAVE, PTA_XSAVEOPT, PTA_AVX512F, PTA_AVX512ER,\n\tPTA_AVX512PF, PTA_AVX512CD, PTA_NO_TUNE, PTA_SHA, PTA_PREFETCHWT1,\n\tPTA_CLFLUSHOPT, PTA_XSAVEC, PTA_XSAVES, PTA_AVX512DQ, PTA_AVX512BW,\n\tPTA_AVX512VL, PTA_AVX512IFMA, PTA_AVX512VBMI, PTA_CLWB, PTA_MWAITX,\n\tPTA_CLZERO, PTA_NO_80387, PTA_PKU, PTA_AVX5124VNNIW, PTA_AVX5124FMAPS,\n\tPTA_AVX512VPOPCNTDQ, PTA_SGX, PTA_AVX512VNNI, PTA_GFNI, PTA_VAES,\n\tPTA_AVX512VBMI2, PTA_VPCLMULQDQ, PTA_AVX512BITALG, PTA_RDPID,\n\tPTA_PCONFIG, PTA_WBNOINVD, PTA_AVX512VP2INTERSECT, PTA_PTWRITE,\n\tPTA_AVX512BF16, PTA_WAITPKG, PTA_MOVDIRI, PTA_MOVDIR64B, PTA_ENQCMD,\n\tPTA_CLDEMOTE, PTA_SERIALIZE, PTA_TSXLDTRK, PTA_AMX_TILE, PTA_AMX_INT8,\n\tPTA_AMX_BF16, PTA_UINTR, PTA_HRESET, PTA_KL, PTA_WIDEKL, PTA_AVXVNNI,\n\tPTA_X86_64_BASELINE, PTA_X86_64_V2, PTA_X86_64_V3, PTA_X86_64_V4,\n\tPTA_CORE2, PTA_NEHALEM, PTA_WESTMERE, PTA_SANDYBRIDGE, PTA_IVYBRIDGE,\n\tPTA_HASWELL, PTA_BROADWELL, PTA_SKYLAKE, PTA_SKYLAKE_AVX512,\n\tPTA_CASCADELAKE, PTA_COOPERLAKE, PTA_CANNONLAKE, PTA_ICELAKE_CLIENT,\n\tPTA_ICELAKE_SERVER, PTA_TIGERLAKE, PTA_SAPPHIRERAPIDS, PTA_ALDERLAKE,\n\tPTA_KNL, PTA_BONNELL, PTA_SILVERMONT, PTA_GOLDMONT, PTA_GOLDMONT_PLUS,\n\tPTA_TREMONT, PTA_KNM): Use constexpr instead of const.", "tree": {"sha": "a2a576c41e1d27bf0ffd860455e5b1e6ddfa2a97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2a576c41e1d27bf0ffd860455e5b1e6ddfa2a97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1541628df83eb690954f426d56d268fb57f1af6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1541628df83eb690954f426d56d268fb57f1af6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1541628df83eb690954f426d56d268fb57f1af6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1541628df83eb690954f426d56d268fb57f1af6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f72e3d8c9ffb81d25d4fdba10056cd2197e22d64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f72e3d8c9ffb81d25d4fdba10056cd2197e22d64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f72e3d8c9ffb81d25d4fdba10056cd2197e22d64"}], "stats": {"total": 290, "additions": 145, "deletions": 145}, "files": [{"sha": "a34442e6b7e46a6420e51c5c2ee63cd2afa41db1", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 130, "deletions": 127, "changes": 257, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1541628df83eb690954f426d56d268fb57f1af6/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1541628df83eb690954f426d56d268fb57f1af6/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=a1541628df83eb690954f426d56d268fb57f1af6", "patch": "@@ -2391,157 +2391,160 @@ extern const char *const processor_names[];\n \n #include \"wide-int-bitmask.h\"\n \n-const wide_int_bitmask PTA_3DNOW (HOST_WIDE_INT_1U << 0);\n-const wide_int_bitmask PTA_3DNOW_A (HOST_WIDE_INT_1U << 1);\n-const wide_int_bitmask PTA_64BIT (HOST_WIDE_INT_1U << 2);\n-const wide_int_bitmask PTA_ABM (HOST_WIDE_INT_1U << 3);\n-const wide_int_bitmask PTA_AES (HOST_WIDE_INT_1U << 4);\n-const wide_int_bitmask PTA_AVX (HOST_WIDE_INT_1U << 5);\n-const wide_int_bitmask PTA_BMI (HOST_WIDE_INT_1U << 6);\n-const wide_int_bitmask PTA_CX16 (HOST_WIDE_INT_1U << 7);\n-const wide_int_bitmask PTA_F16C (HOST_WIDE_INT_1U << 8);\n-const wide_int_bitmask PTA_FMA (HOST_WIDE_INT_1U << 9);\n-const wide_int_bitmask PTA_FMA4 (HOST_WIDE_INT_1U << 10);\n-const wide_int_bitmask PTA_FSGSBASE (HOST_WIDE_INT_1U << 11);\n-const wide_int_bitmask PTA_LWP (HOST_WIDE_INT_1U << 12);\n-const wide_int_bitmask PTA_LZCNT (HOST_WIDE_INT_1U << 13);\n-const wide_int_bitmask PTA_MMX (HOST_WIDE_INT_1U << 14);\n-const wide_int_bitmask PTA_MOVBE (HOST_WIDE_INT_1U << 15);\n-const wide_int_bitmask PTA_NO_SAHF (HOST_WIDE_INT_1U << 16);\n-const wide_int_bitmask PTA_PCLMUL (HOST_WIDE_INT_1U << 17);\n-const wide_int_bitmask PTA_POPCNT (HOST_WIDE_INT_1U << 18);\n-const wide_int_bitmask PTA_PREFETCH_SSE (HOST_WIDE_INT_1U << 19);\n-const wide_int_bitmask PTA_RDRND (HOST_WIDE_INT_1U << 20);\n-const wide_int_bitmask PTA_SSE (HOST_WIDE_INT_1U << 21);\n-const wide_int_bitmask PTA_SSE2 (HOST_WIDE_INT_1U << 22);\n-const wide_int_bitmask PTA_SSE3 (HOST_WIDE_INT_1U << 23);\n-const wide_int_bitmask PTA_SSE4_1 (HOST_WIDE_INT_1U << 24);\n-const wide_int_bitmask PTA_SSE4_2 (HOST_WIDE_INT_1U << 25);\n-const wide_int_bitmask PTA_SSE4A (HOST_WIDE_INT_1U << 26);\n-const wide_int_bitmask PTA_SSSE3 (HOST_WIDE_INT_1U << 27);\n-const wide_int_bitmask PTA_TBM (HOST_WIDE_INT_1U << 28);\n-const wide_int_bitmask PTA_XOP (HOST_WIDE_INT_1U << 29);\n-const wide_int_bitmask PTA_AVX2 (HOST_WIDE_INT_1U << 30);\n-const wide_int_bitmask PTA_BMI2 (HOST_WIDE_INT_1U << 31);\n-const wide_int_bitmask PTA_RTM (HOST_WIDE_INT_1U << 32);\n-const wide_int_bitmask PTA_HLE (HOST_WIDE_INT_1U << 33);\n-const wide_int_bitmask PTA_PRFCHW (HOST_WIDE_INT_1U << 34);\n-const wide_int_bitmask PTA_RDSEED (HOST_WIDE_INT_1U << 35);\n-const wide_int_bitmask PTA_ADX (HOST_WIDE_INT_1U << 36);\n-const wide_int_bitmask PTA_FXSR (HOST_WIDE_INT_1U << 37);\n-const wide_int_bitmask PTA_XSAVE (HOST_WIDE_INT_1U << 38);\n-const wide_int_bitmask PTA_XSAVEOPT (HOST_WIDE_INT_1U << 39);\n-const wide_int_bitmask PTA_AVX512F (HOST_WIDE_INT_1U << 40);\n-const wide_int_bitmask PTA_AVX512ER (HOST_WIDE_INT_1U << 41);\n-const wide_int_bitmask PTA_AVX512PF (HOST_WIDE_INT_1U << 42);\n-const wide_int_bitmask PTA_AVX512CD (HOST_WIDE_INT_1U << 43);\n-const wide_int_bitmask PTA_NO_TUNE (HOST_WIDE_INT_1U << 44);\n-const wide_int_bitmask PTA_SHA (HOST_WIDE_INT_1U << 45);\n-const wide_int_bitmask PTA_PREFETCHWT1 (HOST_WIDE_INT_1U << 46);\n-const wide_int_bitmask PTA_CLFLUSHOPT (HOST_WIDE_INT_1U << 47);\n-const wide_int_bitmask PTA_XSAVEC (HOST_WIDE_INT_1U << 48);\n-const wide_int_bitmask PTA_XSAVES (HOST_WIDE_INT_1U << 49);\n-const wide_int_bitmask PTA_AVX512DQ (HOST_WIDE_INT_1U << 50);\n-const wide_int_bitmask PTA_AVX512BW (HOST_WIDE_INT_1U << 51);\n-const wide_int_bitmask PTA_AVX512VL (HOST_WIDE_INT_1U << 52);\n-const wide_int_bitmask PTA_AVX512IFMA (HOST_WIDE_INT_1U << 53);\n-const wide_int_bitmask PTA_AVX512VBMI (HOST_WIDE_INT_1U << 54);\n-const wide_int_bitmask PTA_CLWB (HOST_WIDE_INT_1U << 55);\n-const wide_int_bitmask PTA_MWAITX (HOST_WIDE_INT_1U << 56);\n-const wide_int_bitmask PTA_CLZERO (HOST_WIDE_INT_1U << 57);\n-const wide_int_bitmask PTA_NO_80387 (HOST_WIDE_INT_1U << 58);\n-const wide_int_bitmask PTA_PKU (HOST_WIDE_INT_1U << 59);\n-const wide_int_bitmask PTA_AVX5124VNNIW (HOST_WIDE_INT_1U << 60);\n-const wide_int_bitmask PTA_AVX5124FMAPS (HOST_WIDE_INT_1U << 61);\n-const wide_int_bitmask PTA_AVX512VPOPCNTDQ (HOST_WIDE_INT_1U << 62);\n-const wide_int_bitmask PTA_SGX (HOST_WIDE_INT_1U << 63);\n-const wide_int_bitmask PTA_AVX512VNNI (0, HOST_WIDE_INT_1U);\n-const wide_int_bitmask PTA_GFNI (0, HOST_WIDE_INT_1U << 1);\n-const wide_int_bitmask PTA_VAES (0, HOST_WIDE_INT_1U << 2);\n-const wide_int_bitmask PTA_AVX512VBMI2 (0, HOST_WIDE_INT_1U << 3);\n-const wide_int_bitmask PTA_VPCLMULQDQ (0, HOST_WIDE_INT_1U << 4);\n-const wide_int_bitmask PTA_AVX512BITALG (0, HOST_WIDE_INT_1U << 5);\n-const wide_int_bitmask PTA_RDPID (0, HOST_WIDE_INT_1U << 6);\n-const wide_int_bitmask PTA_PCONFIG (0, HOST_WIDE_INT_1U << 7);\n-const wide_int_bitmask PTA_WBNOINVD (0, HOST_WIDE_INT_1U << 8);\n-const wide_int_bitmask PTA_AVX512VP2INTERSECT (0, HOST_WIDE_INT_1U << 9);\n-const wide_int_bitmask PTA_PTWRITE (0, HOST_WIDE_INT_1U << 10);\n-const wide_int_bitmask PTA_AVX512BF16 (0, HOST_WIDE_INT_1U << 11);\n-const wide_int_bitmask PTA_WAITPKG (0, HOST_WIDE_INT_1U << 12);\n-const wide_int_bitmask PTA_MOVDIRI (0, HOST_WIDE_INT_1U << 13);\n-const wide_int_bitmask PTA_MOVDIR64B (0, HOST_WIDE_INT_1U << 14);\n-const wide_int_bitmask PTA_ENQCMD (0, HOST_WIDE_INT_1U << 15);\n-const wide_int_bitmask PTA_CLDEMOTE (0, HOST_WIDE_INT_1U << 16);\n-const wide_int_bitmask PTA_SERIALIZE (0, HOST_WIDE_INT_1U << 17);\n-const wide_int_bitmask PTA_TSXLDTRK (0, HOST_WIDE_INT_1U << 18);\n-const wide_int_bitmask PTA_AMX_TILE (0, HOST_WIDE_INT_1U << 19);\n-const wide_int_bitmask PTA_AMX_INT8 (0, HOST_WIDE_INT_1U << 20);\n-const wide_int_bitmask PTA_AMX_BF16 (0, HOST_WIDE_INT_1U << 21);\n-const wide_int_bitmask PTA_UINTR (0, HOST_WIDE_INT_1U << 22);\n-const wide_int_bitmask PTA_HRESET (0, HOST_WIDE_INT_1U << 23);\n-const wide_int_bitmask PTA_KL (0, HOST_WIDE_INT_1U << 24);\n-const wide_int_bitmask PTA_WIDEKL (0, HOST_WIDE_INT_1U << 25);\n-const wide_int_bitmask PTA_AVXVNNI (0, HOST_WIDE_INT_1U << 26);\n-\n-const wide_int_bitmask PTA_X86_64_BASELINE = PTA_64BIT | PTA_MMX | PTA_SSE\n+constexpr wide_int_bitmask PTA_3DNOW (HOST_WIDE_INT_1U << 0);\n+constexpr wide_int_bitmask PTA_3DNOW_A (HOST_WIDE_INT_1U << 1);\n+constexpr wide_int_bitmask PTA_64BIT (HOST_WIDE_INT_1U << 2);\n+constexpr wide_int_bitmask PTA_ABM (HOST_WIDE_INT_1U << 3);\n+constexpr wide_int_bitmask PTA_AES (HOST_WIDE_INT_1U << 4);\n+constexpr wide_int_bitmask PTA_AVX (HOST_WIDE_INT_1U << 5);\n+constexpr wide_int_bitmask PTA_BMI (HOST_WIDE_INT_1U << 6);\n+constexpr wide_int_bitmask PTA_CX16 (HOST_WIDE_INT_1U << 7);\n+constexpr wide_int_bitmask PTA_F16C (HOST_WIDE_INT_1U << 8);\n+constexpr wide_int_bitmask PTA_FMA (HOST_WIDE_INT_1U << 9);\n+constexpr wide_int_bitmask PTA_FMA4 (HOST_WIDE_INT_1U << 10);\n+constexpr wide_int_bitmask PTA_FSGSBASE (HOST_WIDE_INT_1U << 11);\n+constexpr wide_int_bitmask PTA_LWP (HOST_WIDE_INT_1U << 12);\n+constexpr wide_int_bitmask PTA_LZCNT (HOST_WIDE_INT_1U << 13);\n+constexpr wide_int_bitmask PTA_MMX (HOST_WIDE_INT_1U << 14);\n+constexpr wide_int_bitmask PTA_MOVBE (HOST_WIDE_INT_1U << 15);\n+constexpr wide_int_bitmask PTA_NO_SAHF (HOST_WIDE_INT_1U << 16);\n+constexpr wide_int_bitmask PTA_PCLMUL (HOST_WIDE_INT_1U << 17);\n+constexpr wide_int_bitmask PTA_POPCNT (HOST_WIDE_INT_1U << 18);\n+constexpr wide_int_bitmask PTA_PREFETCH_SSE (HOST_WIDE_INT_1U << 19);\n+constexpr wide_int_bitmask PTA_RDRND (HOST_WIDE_INT_1U << 20);\n+constexpr wide_int_bitmask PTA_SSE (HOST_WIDE_INT_1U << 21);\n+constexpr wide_int_bitmask PTA_SSE2 (HOST_WIDE_INT_1U << 22);\n+constexpr wide_int_bitmask PTA_SSE3 (HOST_WIDE_INT_1U << 23);\n+constexpr wide_int_bitmask PTA_SSE4_1 (HOST_WIDE_INT_1U << 24);\n+constexpr wide_int_bitmask PTA_SSE4_2 (HOST_WIDE_INT_1U << 25);\n+constexpr wide_int_bitmask PTA_SSE4A (HOST_WIDE_INT_1U << 26);\n+constexpr wide_int_bitmask PTA_SSSE3 (HOST_WIDE_INT_1U << 27);\n+constexpr wide_int_bitmask PTA_TBM (HOST_WIDE_INT_1U << 28);\n+constexpr wide_int_bitmask PTA_XOP (HOST_WIDE_INT_1U << 29);\n+constexpr wide_int_bitmask PTA_AVX2 (HOST_WIDE_INT_1U << 30);\n+constexpr wide_int_bitmask PTA_BMI2 (HOST_WIDE_INT_1U << 31);\n+constexpr wide_int_bitmask PTA_RTM (HOST_WIDE_INT_1U << 32);\n+constexpr wide_int_bitmask PTA_HLE (HOST_WIDE_INT_1U << 33);\n+constexpr wide_int_bitmask PTA_PRFCHW (HOST_WIDE_INT_1U << 34);\n+constexpr wide_int_bitmask PTA_RDSEED (HOST_WIDE_INT_1U << 35);\n+constexpr wide_int_bitmask PTA_ADX (HOST_WIDE_INT_1U << 36);\n+constexpr wide_int_bitmask PTA_FXSR (HOST_WIDE_INT_1U << 37);\n+constexpr wide_int_bitmask PTA_XSAVE (HOST_WIDE_INT_1U << 38);\n+constexpr wide_int_bitmask PTA_XSAVEOPT (HOST_WIDE_INT_1U << 39);\n+constexpr wide_int_bitmask PTA_AVX512F (HOST_WIDE_INT_1U << 40);\n+constexpr wide_int_bitmask PTA_AVX512ER (HOST_WIDE_INT_1U << 41);\n+constexpr wide_int_bitmask PTA_AVX512PF (HOST_WIDE_INT_1U << 42);\n+constexpr wide_int_bitmask PTA_AVX512CD (HOST_WIDE_INT_1U << 43);\n+constexpr wide_int_bitmask PTA_NO_TUNE (HOST_WIDE_INT_1U << 44);\n+constexpr wide_int_bitmask PTA_SHA (HOST_WIDE_INT_1U << 45);\n+constexpr wide_int_bitmask PTA_PREFETCHWT1 (HOST_WIDE_INT_1U << 46);\n+constexpr wide_int_bitmask PTA_CLFLUSHOPT (HOST_WIDE_INT_1U << 47);\n+constexpr wide_int_bitmask PTA_XSAVEC (HOST_WIDE_INT_1U << 48);\n+constexpr wide_int_bitmask PTA_XSAVES (HOST_WIDE_INT_1U << 49);\n+constexpr wide_int_bitmask PTA_AVX512DQ (HOST_WIDE_INT_1U << 50);\n+constexpr wide_int_bitmask PTA_AVX512BW (HOST_WIDE_INT_1U << 51);\n+constexpr wide_int_bitmask PTA_AVX512VL (HOST_WIDE_INT_1U << 52);\n+constexpr wide_int_bitmask PTA_AVX512IFMA (HOST_WIDE_INT_1U << 53);\n+constexpr wide_int_bitmask PTA_AVX512VBMI (HOST_WIDE_INT_1U << 54);\n+constexpr wide_int_bitmask PTA_CLWB (HOST_WIDE_INT_1U << 55);\n+constexpr wide_int_bitmask PTA_MWAITX (HOST_WIDE_INT_1U << 56);\n+constexpr wide_int_bitmask PTA_CLZERO (HOST_WIDE_INT_1U << 57);\n+constexpr wide_int_bitmask PTA_NO_80387 (HOST_WIDE_INT_1U << 58);\n+constexpr wide_int_bitmask PTA_PKU (HOST_WIDE_INT_1U << 59);\n+constexpr wide_int_bitmask PTA_AVX5124VNNIW (HOST_WIDE_INT_1U << 60);\n+constexpr wide_int_bitmask PTA_AVX5124FMAPS (HOST_WIDE_INT_1U << 61);\n+constexpr wide_int_bitmask PTA_AVX512VPOPCNTDQ (HOST_WIDE_INT_1U << 62);\n+constexpr wide_int_bitmask PTA_SGX (HOST_WIDE_INT_1U << 63);\n+constexpr wide_int_bitmask PTA_AVX512VNNI (0, HOST_WIDE_INT_1U);\n+constexpr wide_int_bitmask PTA_GFNI (0, HOST_WIDE_INT_1U << 1);\n+constexpr wide_int_bitmask PTA_VAES (0, HOST_WIDE_INT_1U << 2);\n+constexpr wide_int_bitmask PTA_AVX512VBMI2 (0, HOST_WIDE_INT_1U << 3);\n+constexpr wide_int_bitmask PTA_VPCLMULQDQ (0, HOST_WIDE_INT_1U << 4);\n+constexpr wide_int_bitmask PTA_AVX512BITALG (0, HOST_WIDE_INT_1U << 5);\n+constexpr wide_int_bitmask PTA_RDPID (0, HOST_WIDE_INT_1U << 6);\n+constexpr wide_int_bitmask PTA_PCONFIG (0, HOST_WIDE_INT_1U << 7);\n+constexpr wide_int_bitmask PTA_WBNOINVD (0, HOST_WIDE_INT_1U << 8);\n+constexpr wide_int_bitmask PTA_AVX512VP2INTERSECT (0, HOST_WIDE_INT_1U << 9);\n+constexpr wide_int_bitmask PTA_PTWRITE (0, HOST_WIDE_INT_1U << 10);\n+constexpr wide_int_bitmask PTA_AVX512BF16 (0, HOST_WIDE_INT_1U << 11);\n+constexpr wide_int_bitmask PTA_WAITPKG (0, HOST_WIDE_INT_1U << 12);\n+constexpr wide_int_bitmask PTA_MOVDIRI (0, HOST_WIDE_INT_1U << 13);\n+constexpr wide_int_bitmask PTA_MOVDIR64B (0, HOST_WIDE_INT_1U << 14);\n+constexpr wide_int_bitmask PTA_ENQCMD (0, HOST_WIDE_INT_1U << 15);\n+constexpr wide_int_bitmask PTA_CLDEMOTE (0, HOST_WIDE_INT_1U << 16);\n+constexpr wide_int_bitmask PTA_SERIALIZE (0, HOST_WIDE_INT_1U << 17);\n+constexpr wide_int_bitmask PTA_TSXLDTRK (0, HOST_WIDE_INT_1U << 18);\n+constexpr wide_int_bitmask PTA_AMX_TILE (0, HOST_WIDE_INT_1U << 19);\n+constexpr wide_int_bitmask PTA_AMX_INT8 (0, HOST_WIDE_INT_1U << 20);\n+constexpr wide_int_bitmask PTA_AMX_BF16 (0, HOST_WIDE_INT_1U << 21);\n+constexpr wide_int_bitmask PTA_UINTR (0, HOST_WIDE_INT_1U << 22);\n+constexpr wide_int_bitmask PTA_HRESET (0, HOST_WIDE_INT_1U << 23);\n+constexpr wide_int_bitmask PTA_KL (0, HOST_WIDE_INT_1U << 24);\n+constexpr wide_int_bitmask PTA_WIDEKL (0, HOST_WIDE_INT_1U << 25);\n+constexpr wide_int_bitmask PTA_AVXVNNI (0, HOST_WIDE_INT_1U << 26);\n+\n+constexpr wide_int_bitmask PTA_X86_64_BASELINE = PTA_64BIT | PTA_MMX | PTA_SSE\n   | PTA_SSE2 | PTA_NO_SAHF | PTA_FXSR;\n-const wide_int_bitmask PTA_X86_64_V2 = (PTA_X86_64_BASELINE & (~PTA_NO_SAHF))\n+constexpr wide_int_bitmask PTA_X86_64_V2 = (PTA_X86_64_BASELINE\n+\t\t\t\t\t    & (~PTA_NO_SAHF))\n   | PTA_CX16 | PTA_POPCNT | PTA_SSE3 | PTA_SSE4_1 | PTA_SSE4_2 | PTA_SSSE3;\n-const wide_int_bitmask PTA_X86_64_V3 = PTA_X86_64_V2\n+constexpr wide_int_bitmask PTA_X86_64_V3 = PTA_X86_64_V2\n   | PTA_AVX | PTA_AVX2 | PTA_BMI | PTA_BMI2 | PTA_F16C | PTA_FMA | PTA_LZCNT\n   | PTA_MOVBE | PTA_XSAVE;\n-const wide_int_bitmask PTA_X86_64_V4 = PTA_X86_64_V3\n+constexpr wide_int_bitmask PTA_X86_64_V4 = PTA_X86_64_V3\n   | PTA_AVX512F | PTA_AVX512BW | PTA_AVX512CD | PTA_AVX512DQ | PTA_AVX512VL;\n \n-const wide_int_bitmask PTA_CORE2 = PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2\n+constexpr wide_int_bitmask PTA_CORE2 = PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2\n   | PTA_SSE3 | PTA_SSSE3 | PTA_CX16 | PTA_FXSR;\n-const wide_int_bitmask PTA_NEHALEM = PTA_CORE2 | PTA_SSE4_1 | PTA_SSE4_2\n+constexpr wide_int_bitmask PTA_NEHALEM = PTA_CORE2 | PTA_SSE4_1 | PTA_SSE4_2\n   | PTA_POPCNT;\n-const wide_int_bitmask PTA_WESTMERE = PTA_NEHALEM | PTA_PCLMUL;\n-const wide_int_bitmask PTA_SANDYBRIDGE = PTA_WESTMERE | PTA_AVX | PTA_XSAVE\n+constexpr wide_int_bitmask PTA_WESTMERE = PTA_NEHALEM | PTA_PCLMUL;\n+constexpr wide_int_bitmask PTA_SANDYBRIDGE = PTA_WESTMERE | PTA_AVX | PTA_XSAVE\n   | PTA_XSAVEOPT;\n-const wide_int_bitmask PTA_IVYBRIDGE = PTA_SANDYBRIDGE | PTA_FSGSBASE\n+constexpr wide_int_bitmask PTA_IVYBRIDGE = PTA_SANDYBRIDGE | PTA_FSGSBASE\n   | PTA_RDRND | PTA_F16C;\n-const wide_int_bitmask PTA_HASWELL = PTA_IVYBRIDGE | PTA_AVX2 | PTA_BMI\n+constexpr wide_int_bitmask PTA_HASWELL = PTA_IVYBRIDGE | PTA_AVX2 | PTA_BMI\n   | PTA_BMI2 | PTA_LZCNT | PTA_FMA | PTA_MOVBE | PTA_HLE;\n-const wide_int_bitmask PTA_BROADWELL = PTA_HASWELL | PTA_ADX | PTA_RDSEED\n+constexpr wide_int_bitmask PTA_BROADWELL = PTA_HASWELL | PTA_ADX | PTA_RDSEED\n   | PTA_PRFCHW;\n-const wide_int_bitmask PTA_SKYLAKE = PTA_BROADWELL | PTA_AES | PTA_CLFLUSHOPT\n-  | PTA_XSAVEC | PTA_XSAVES | PTA_SGX;\n-const wide_int_bitmask PTA_SKYLAKE_AVX512 = PTA_SKYLAKE | PTA_AVX512F\n+constexpr wide_int_bitmask PTA_SKYLAKE = PTA_BROADWELL | PTA_AES\n+  | PTA_CLFLUSHOPT | PTA_XSAVEC | PTA_XSAVES | PTA_SGX;\n+constexpr wide_int_bitmask PTA_SKYLAKE_AVX512 = PTA_SKYLAKE | PTA_AVX512F\n   | PTA_AVX512CD | PTA_AVX512VL | PTA_AVX512BW | PTA_AVX512DQ | PTA_PKU\n   | PTA_CLWB;\n-const wide_int_bitmask PTA_CASCADELAKE = PTA_SKYLAKE_AVX512 | PTA_AVX512VNNI;\n-const wide_int_bitmask PTA_COOPERLAKE = PTA_CASCADELAKE | PTA_AVX512BF16;\n-const wide_int_bitmask PTA_CANNONLAKE = PTA_SKYLAKE | PTA_AVX512F\n+constexpr wide_int_bitmask PTA_CASCADELAKE = PTA_SKYLAKE_AVX512\n+  | PTA_AVX512VNNI;\n+constexpr wide_int_bitmask PTA_COOPERLAKE = PTA_CASCADELAKE | PTA_AVX512BF16;\n+constexpr wide_int_bitmask PTA_CANNONLAKE = PTA_SKYLAKE | PTA_AVX512F\n   | PTA_AVX512CD | PTA_AVX512VL | PTA_AVX512BW | PTA_AVX512DQ | PTA_PKU\n   | PTA_AVX512VBMI | PTA_AVX512IFMA | PTA_SHA;\n-const wide_int_bitmask PTA_ICELAKE_CLIENT = PTA_CANNONLAKE | PTA_AVX512VNNI\n+constexpr wide_int_bitmask PTA_ICELAKE_CLIENT = PTA_CANNONLAKE | PTA_AVX512VNNI\n   | PTA_GFNI | PTA_VAES | PTA_AVX512VBMI2 | PTA_VPCLMULQDQ | PTA_AVX512BITALG\n   | PTA_RDPID | PTA_AVX512VPOPCNTDQ;\n-const wide_int_bitmask PTA_ICELAKE_SERVER = PTA_ICELAKE_CLIENT | PTA_PCONFIG\n-  | PTA_WBNOINVD | PTA_CLWB;\n-const wide_int_bitmask PTA_TIGERLAKE = PTA_ICELAKE_CLIENT | PTA_MOVDIRI\n+constexpr wide_int_bitmask PTA_ICELAKE_SERVER = PTA_ICELAKE_CLIENT\n+  | PTA_PCONFIG | PTA_WBNOINVD | PTA_CLWB;\n+constexpr wide_int_bitmask PTA_TIGERLAKE = PTA_ICELAKE_CLIENT | PTA_MOVDIRI\n   | PTA_MOVDIR64B | PTA_CLWB | PTA_AVX512VP2INTERSECT | PTA_KL | PTA_WIDEKL;\n-const wide_int_bitmask PTA_SAPPHIRERAPIDS = PTA_COOPERLAKE | PTA_MOVDIRI\n+constexpr wide_int_bitmask PTA_SAPPHIRERAPIDS = PTA_COOPERLAKE | PTA_MOVDIRI\n   | PTA_MOVDIR64B | PTA_AVX512VP2INTERSECT | PTA_ENQCMD | PTA_CLDEMOTE\n   | PTA_PTWRITE | PTA_WAITPKG | PTA_SERIALIZE | PTA_TSXLDTRK | PTA_AMX_TILE\n   | PTA_AMX_INT8 | PTA_AMX_BF16 | PTA_UINTR | PTA_AVXVNNI;\n-const wide_int_bitmask PTA_ALDERLAKE = PTA_SKYLAKE | PTA_CLDEMOTE | PTA_PTWRITE\n-  | PTA_WAITPKG | PTA_SERIALIZE | PTA_HRESET | PTA_KL | PTA_WIDEKL | PTA_AVXVNNI;\n-const wide_int_bitmask PTA_KNL = PTA_BROADWELL | PTA_AVX512PF | PTA_AVX512ER\n-  | PTA_AVX512F | PTA_AVX512CD | PTA_PREFETCHWT1;\n-const wide_int_bitmask PTA_BONNELL = PTA_CORE2 | PTA_MOVBE;\n-const wide_int_bitmask PTA_SILVERMONT = PTA_WESTMERE | PTA_MOVBE | PTA_RDRND\n-  | PTA_PRFCHW;\n-const wide_int_bitmask PTA_GOLDMONT = PTA_SILVERMONT | PTA_AES | PTA_SHA | PTA_XSAVE\n-  | PTA_RDSEED | PTA_XSAVEC | PTA_XSAVES | PTA_CLFLUSHOPT | PTA_XSAVEOPT\n-  | PTA_FSGSBASE;\n-const wide_int_bitmask PTA_GOLDMONT_PLUS = PTA_GOLDMONT | PTA_RDPID\n+constexpr wide_int_bitmask PTA_ALDERLAKE = PTA_SKYLAKE | PTA_CLDEMOTE\n+  | PTA_PTWRITE | PTA_WAITPKG | PTA_SERIALIZE | PTA_HRESET | PTA_KL\n+  | PTA_WIDEKL | PTA_AVXVNNI;\n+constexpr wide_int_bitmask PTA_KNL = PTA_BROADWELL | PTA_AVX512PF\n+  | PTA_AVX512ER | PTA_AVX512F | PTA_AVX512CD | PTA_PREFETCHWT1;\n+constexpr wide_int_bitmask PTA_BONNELL = PTA_CORE2 | PTA_MOVBE;\n+constexpr wide_int_bitmask PTA_SILVERMONT = PTA_WESTMERE | PTA_MOVBE\n+  | PTA_RDRND | PTA_PRFCHW;\n+constexpr wide_int_bitmask PTA_GOLDMONT = PTA_SILVERMONT | PTA_AES | PTA_SHA\n+  | PTA_XSAVE | PTA_RDSEED | PTA_XSAVEC | PTA_XSAVES | PTA_CLFLUSHOPT\n+  | PTA_XSAVEOPT | PTA_FSGSBASE;\n+constexpr wide_int_bitmask PTA_GOLDMONT_PLUS = PTA_GOLDMONT | PTA_RDPID\n   | PTA_SGX | PTA_PTWRITE;\n-const wide_int_bitmask PTA_TREMONT = PTA_GOLDMONT_PLUS | PTA_CLWB\n+constexpr wide_int_bitmask PTA_TREMONT = PTA_GOLDMONT_PLUS | PTA_CLWB\n   | PTA_GFNI | PTA_MOVDIRI | PTA_MOVDIR64B | PTA_CLDEMOTE | PTA_WAITPKG;\n-const wide_int_bitmask PTA_KNM = PTA_KNL | PTA_AVX5124VNNIW\n+constexpr wide_int_bitmask PTA_KNM = PTA_KNL | PTA_AVX5124VNNIW\n   | PTA_AVX5124FMAPS | PTA_AVX512VPOPCNTDQ;\n \n #ifndef GENERATOR_FILE"}, {"sha": "763d0f686449e3c2c87fe4e0e62b98ab7fd0321d", "filename": "gcc/wide-int-bitmask.h", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1541628df83eb690954f426d56d268fb57f1af6/gcc%2Fwide-int-bitmask.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1541628df83eb690954f426d56d268fb57f1af6/gcc%2Fwide-int-bitmask.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int-bitmask.h?ref=a1541628df83eb690954f426d56d268fb57f1af6", "patch": "@@ -23,34 +23,34 @@ along with GCC; see the file COPYING3.  If not see\n class wide_int_bitmask\n {\n public:\n-  inline wide_int_bitmask ();\n-  inline wide_int_bitmask (uint64_t l);\n-  inline wide_int_bitmask (uint64_t l, uint64_t h);\n+  constexpr wide_int_bitmask ();\n+  constexpr wide_int_bitmask (uint64_t l);\n+  constexpr wide_int_bitmask (uint64_t l, uint64_t h);\n   inline wide_int_bitmask &operator &= (wide_int_bitmask);\n   inline wide_int_bitmask &operator |= (wide_int_bitmask);\n-  inline wide_int_bitmask operator ~ () const;\n-  inline wide_int_bitmask operator & (wide_int_bitmask) const;\n-  inline wide_int_bitmask operator | (wide_int_bitmask) const;\n+  constexpr wide_int_bitmask operator ~ () const;\n+  constexpr wide_int_bitmask operator & (wide_int_bitmask) const;\n+  constexpr wide_int_bitmask operator | (wide_int_bitmask) const;\n   inline wide_int_bitmask operator >> (int);\n   inline wide_int_bitmask operator << (int);\n   inline bool operator == (wide_int_bitmask) const;\n   inline bool operator != (wide_int_bitmask) const;\n   uint64_t low, high;\n };\n \n-inline\n+constexpr\n wide_int_bitmask::wide_int_bitmask ()\n : low (0), high (0)\n {\n }\n \n-inline\n+constexpr\n wide_int_bitmask::wide_int_bitmask (uint64_t l)\n : low (l), high (0)\n {\n }\n \n-inline\n+constexpr\n wide_int_bitmask::wide_int_bitmask (uint64_t l, uint64_t h)\n : low (l), high (h)\n {\n@@ -72,25 +72,22 @@ wide_int_bitmask::operator |= (wide_int_bitmask b)\n   return *this;\n }\n \n-inline wide_int_bitmask\n+constexpr wide_int_bitmask\n wide_int_bitmask::operator ~ () const\n {\n-  wide_int_bitmask ret (~low, ~high);\n-  return ret;\n+  return wide_int_bitmask (~low, ~high);\n }\n \n-inline wide_int_bitmask\n+constexpr wide_int_bitmask\n wide_int_bitmask::operator | (wide_int_bitmask b) const\n {\n-  wide_int_bitmask ret (low | b.low, high | b.high);\n-  return ret;\n+  return wide_int_bitmask (low | b.low, high | b.high);\n }\n \n-inline wide_int_bitmask\n+constexpr wide_int_bitmask\n wide_int_bitmask::operator & (wide_int_bitmask b) const\n {\n-  wide_int_bitmask ret (low & b.low, high & b.high);\n-  return ret;\n+  return wide_int_bitmask (low & b.low, high & b.high);\n }\n \n inline wide_int_bitmask"}]}