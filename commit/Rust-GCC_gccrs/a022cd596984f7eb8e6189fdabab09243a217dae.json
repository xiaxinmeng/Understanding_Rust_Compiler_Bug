{"sha": "a022cd596984f7eb8e6189fdabab09243a217dae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAyMmNkNTk2OTg0ZjdlYjhlNjE4OWZkYWJhYjA5MjQzYTIxN2RhZQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2005-09-15T22:02:13Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2005-09-15T22:02:13Z"}, "message": "re PR libgcj/16032 (libgcj should reject class files with incorrect version numbers)\n\n\tPR libgcj/16032:\n\t* interpret.cc (AVAL1U): Resolve pool entry when not direct\n\tthreaded.\n\t(AVAL2U): Likewise.\n\t(compile): Handle 'ldc class' specially.\n\t(_Jv_InterpMethod::run): Added special 'ldc class' instruction.\n\t* verify.cc (check_constant): Handle 'ldc class' for 1.5 classes.\n\t* defineclass.cc (handleCodeAttribute): Set new field.\n\t(MAJOR_1_1, MINOR_1_1, MAJOR_1_2, MINOR_1_2, MAJOR_1_3, MINOR_1_3,\n\tMAJOR_1_4, MINOR_1_4, MAJOR_1_5, MINOR_1_5): New defines.\n\t(parse): Check version numbers.\n\t(_Jv_ClassReader::is_15): New field.\n\t(_Jv_ClassReader): Initialize it.\n\t* include/java-interp.h (_Jv_InterpMethod::is_15): New field.\n\nFrom-SVN: r104325", "tree": {"sha": "9f425c2996ae0b146771dcc668979c48675ee708", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f425c2996ae0b146771dcc668979c48675ee708"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a022cd596984f7eb8e6189fdabab09243a217dae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a022cd596984f7eb8e6189fdabab09243a217dae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a022cd596984f7eb8e6189fdabab09243a217dae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a022cd596984f7eb8e6189fdabab09243a217dae/comments", "author": null, "committer": null, "parents": [{"sha": "9026e8d4d52b13de3adcb6a165145a30f366decb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9026e8d4d52b13de3adcb6a165145a30f366decb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9026e8d4d52b13de3adcb6a165145a30f366decb"}], "stats": {"total": 117, "additions": 101, "deletions": 16}, "files": [{"sha": "3520d8c3c0812aec1b32ebd7285bb065bf4e3319", "filename": "libjava/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a022cd596984f7eb8e6189fdabab09243a217dae/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a022cd596984f7eb8e6189fdabab09243a217dae/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a022cd596984f7eb8e6189fdabab09243a217dae", "patch": "@@ -1,3 +1,20 @@\n+2005-09-15  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR libgcj/16032:\n+\t* interpret.cc (AVAL1U): Resolve pool entry when not direct\n+\tthreaded.\n+\t(AVAL2U): Likewise.\n+\t(compile): Handle 'ldc class' specially.\n+\t(_Jv_InterpMethod::run): Added special 'ldc class' instruction.\n+\t* verify.cc (check_constant): Handle 'ldc class' for 1.5 classes.\n+\t* defineclass.cc (handleCodeAttribute): Set new field.\n+\t(MAJOR_1_1, MINOR_1_1, MAJOR_1_2, MINOR_1_2, MAJOR_1_3, MINOR_1_3,\n+\tMAJOR_1_4, MINOR_1_4, MAJOR_1_5, MINOR_1_5): New defines.\n+\t(parse): Check version numbers.\n+\t(_Jv_ClassReader::is_15): New field.\n+\t(_Jv_ClassReader): Initialize it.\n+\t* include/java-interp.h (_Jv_InterpMethod::is_15): New field.\n+\n 2005-09-15  Tom Tromey  <tromey@redhat.com>\n \n \tFor PR libgcj/23288:"}, {"sha": "89e0636f4aa71d88607ff44e078b0723dce11e39", "filename": "libjava/defineclass.cc", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a022cd596984f7eb8e6189fdabab09243a217dae/libjava%2Fdefineclass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a022cd596984f7eb8e6189fdabab09243a217dae/libjava%2Fdefineclass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fdefineclass.cc?ref=a022cd596984f7eb8e6189fdabab09243a217dae", "patch": "@@ -101,13 +101,17 @@ struct _Jv_ClassReader\n \n   // the class to define (see java-interp.h)\n   jclass\t   def;\n-  \n+\n   // the classes associated interpreter data.\n   _Jv_InterpClass  *def_interp;\n \n   // The name we found.\n   _Jv_Utf8Const **found_name;\n \n+  // True if this is a 1.5 class file.\n+  bool             is_15;\n+\n+\n   /* check that the given number of input bytes are available */\n   inline void check (int num)\n   {\n@@ -233,6 +237,8 @@ struct _Jv_ClassReader\n     bytes  = (unsigned char*) (elements (data)+offset);\n     len    = length;\n     pos    = 0;\n+    is_15  = false;\n+\n     def    = klass;\n     found_name = name_result;\n \n@@ -302,19 +308,32 @@ _Jv_DefineClass (jclass klass, jbyteArray data, jint offset, jint length,\n \f\n /** This section defines the parsing/scanning of the class data */\n \n+// Major and minor version numbers for various releases.\n+#define MAJOR_1_1 45\n+#define MINOR_1_1  3\n+#define MAJOR_1_2 46\n+#define MINOR_1_2  0\n+#define MAJOR_1_3 47\n+#define MINOR_1_3  0\n+#define MAJOR_1_4 48\n+#define MINOR_1_4  0\n+#define MAJOR_1_5 49\n+#define MINOR_1_5  0\n+\n void\n _Jv_ClassReader::parse ()\n {\n   int magic = read4 ();\n-\n-  /* FIXME: Decide which range of version numbers to allow */\n-\n-  /* int minor_version = */ read2u ();\n-  /* int major_verson  = */ read2u ();\n-\n   if (magic != (int) 0xCAFEBABE)\n     throw_class_format_error (\"bad magic number\");\n \n+  int minor_version = read2u ();\n+  int major_version = read2u ();\n+  if (major_version < MAJOR_1_1 || major_version > MAJOR_1_5\n+      || (major_version == MAJOR_1_5 && minor_version > MINOR_1_5))\n+    throw_class_format_error (\"unrecognized class file version\");\n+  is_15 = (major_version == MAJOR_1_5);\n+\n   pool_count = read2u ();\n \n   read_constpool ();\n@@ -1318,6 +1337,7 @@ void _Jv_ClassReader::handleCodeAttribute\n   method->max_locals     = max_locals;\n   method->code_length    = code_length;\n   method->exc_count      = exc_table_length;\n+  method->is_15          = is_15;\n   method->defining_class = def;\n   method->self           = &def->methods[method_index];\n   method->prepared       = NULL;"}, {"sha": "269e39c5a5ef71bfe6f2d52c7038889fc4055a95", "filename": "libjava/include/java-interp.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a022cd596984f7eb8e6189fdabab09243a217dae/libjava%2Finclude%2Fjava-interp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a022cd596984f7eb8e6189fdabab09243a217dae/libjava%2Finclude%2Fjava-interp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjava-interp.h?ref=a022cd596984f7eb8e6189fdabab09243a217dae", "patch": "@@ -137,6 +137,7 @@ class _Jv_InterpMethod : public _Jv_MethodBase\n   int              code_length;\n \n   _Jv_ushort       exc_count;\n+  bool             is_15;\n \n   // Length of the line_table - when this is zero then line_table is NULL.\n   int line_table_len;  \n@@ -218,7 +219,8 @@ _Jv_GetFirstMethod (_Jv_InterpClass *klass)\n   return klass->interpreted_methods;\n }\n \n-struct _Jv_ResolvedMethod {\n+struct _Jv_ResolvedMethod\n+{\n   jint            stack_item_count;\t\n   jint            vtable_index;\t\n   jclass          klass;"}, {"sha": "dacf19dfb12e1da403c1d71a0c0a5c9243255f1f", "filename": "libjava/interpret.cc", "status": "modified", "additions": 47, "deletions": 4, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a022cd596984f7eb8e6189fdabab09243a217dae/libjava%2Finterpret.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a022cd596984f7eb8e6189fdabab09243a217dae/libjava%2Finterpret.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret.cc?ref=a022cd596984f7eb8e6189fdabab09243a217dae", "patch": "@@ -507,7 +507,16 @@ _Jv_InterpMethod::compile (const void * const *insn_targets)\n \t      {\n \t\tint index = get1u (pc);\n \t\t++pc;\n-\t\tSET_DATUM (pool_data[index].o);\n+\t\t// For an unresolved class we want to delay resolution\n+\t\t// until execution.\n+\t\tif (defining_class->constants.tags[index] == JV_CONSTANT_Class)\n+\t\t  {\n+\t\t    --next;\n+\t\t    SET_INSN (insn_targets[int (op_jsr_w) + 1]);\n+\t\t    SET_INT (index);\n+\t\t  }\n+\t\telse\n+\t\t  SET_DATUM (pool_data[index].o);\n \t      }\n \t      break;\n \n@@ -537,7 +546,16 @@ _Jv_InterpMethod::compile (const void * const *insn_targets)\n \t      {\n \t\tint index = get2u (pc);\n \t\tpc += 2;\n-\t\tSET_DATUM (pool_data[index].o);\n+\t\t// For an unresolved class we want to delay resolution\n+\t\t// until execution.\n+\t\tif (defining_class->constants.tags[index] == JV_CONSTANT_Class)\n+\t\t  {\n+\t\t    --next;\n+\t\t    SET_INSN (insn_targets[int (op_jsr_w) + 1]);\n+\t\t    SET_INT (index);\n+\t\t  }\n+\t\telse\n+\t\t  SET_DATUM (pool_data[index].o);\n \t      }\n \t      break;\n \n@@ -1017,7 +1035,11 @@ _Jv_InterpMethod::run (void *retp, ffi_raw *args, _Jv_InterpMethod *meth)\n     INSN_LABEL(ifnonnull),\n     INSN_LABEL(goto_w),\n     INSN_LABEL(jsr_w),\n+#ifdef DIRECT_THREADED\n+    INSN_LABEL (ldc_class)\n+#else\n     0\n+#endif\n   };\n \n   pc_t pc;\n@@ -1058,8 +1080,16 @@ _Jv_InterpMethod::run (void *retp, ffi_raw *args, _Jv_InterpMethod *meth)\n #define GET2S() (pc += 2, get2s (pc- 2))\n #define GET1U() get1u (pc++)\n #define GET2U() (pc += 2, get2u (pc - 2))\n-#define AVAL1U() ({ int index = get1u (pc++); pool_data[index].o; })\n-#define AVAL2U() ({ int index = get2u (pc); pc += 2; pool_data[index].o; })\n+  // Note that these could be more efficient when not handling 'ldc\n+  // class'.\n+#define AVAL1U()\t\t\t\t\t\t\\\n+  ({ int index = get1u (pc++);\t\t\t\t\t\\\n+      resolve_pool_entry (meth->defining_class, index).o; })\n+#define AVAL2U()\t\t\t\t\t\t\\\n+  ({ int index = get2u (pc); pc += 2;\t\t\t\t\\\n+      resolve_pool_entry (meth->defining_class, index).o; })\n+  // Note that we don't need to resolve the pool entry here as class\n+  // constants are never wide.\n #define AVAL2UP() ({ int index = get2u (pc); pc += 2; &pool_data[index]; })\n #define SKIP_GOTO pc += 2\n #define GOTO_VAL() pc - 1 + get2s (pc)\n@@ -1320,6 +1350,19 @@ _Jv_InterpMethod::run (void *retp, ffi_raw *args, _Jv_InterpMethod *meth)\n       PUSHA ((jobject) AVAL2U ());\n       NEXT_INSN;\n \n+#ifdef DIRECT_THREADED\n+      // For direct threaded we have a separate 'ldc class' operation.\n+    insn_ldc_class:\n+      {\n+\t// We could rewrite the instruction at this point.\n+\tint index = INTVAL ();\n+\tjobject k = (_Jv_Linker::resolve_pool_entry (meth->defining_class,\n+\t\t\t\t\t\t     index)).o;\n+\tPUSHA (k);\n+      }\n+      NEXT_INSN;\n+#endif /* DIRECT_THREADED */\n+\n     insn_ldc2_w:\n       {\n \tvoid *where = AVAL2UP ();"}, {"sha": "8b9cfcc759fae5dc8dc828087529535f9e068e30", "filename": "libjava/verify.cc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a022cd596984f7eb8e6189fdabab09243a217dae/libjava%2Fverify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a022cd596984f7eb8e6189fdabab09243a217dae/libjava%2Fverify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fverify.cc?ref=a022cd596984f7eb8e6189fdabab09243a217dae", "patch": "@@ -1950,13 +1950,16 @@ class _Jv_BytecodeVerifier\n   {\n     check_pool_index (index);\n     _Jv_Constants *pool = &current_class->constants;\n-    if (pool->tags[index] == JV_CONSTANT_ResolvedString\n-\t|| pool->tags[index] == JV_CONSTANT_String)\n+    int tag = pool->tags[index];\n+    if (tag == JV_CONSTANT_ResolvedString || tag == JV_CONSTANT_String)\n       return type (&java::lang::String::class$, this);\n-    else if (pool->tags[index] == JV_CONSTANT_Integer)\n+    else if (tag == JV_CONSTANT_Integer)\n       return type (int_type);\n-    else if (pool->tags[index] == JV_CONSTANT_Float)\n+    else if (tag == JV_CONSTANT_Float)\n       return type (float_type);\n+    else if (current_method->is_15\n+\t     && (tag == JV_CONSTANT_ResolvedClass || tag == JV_CONSTANT_Class))\n+      return type (&java::lang::Class::class$, this);\n     verify_fail (\"String, int, or float constant expected\", start_PC);\n   }\n "}]}