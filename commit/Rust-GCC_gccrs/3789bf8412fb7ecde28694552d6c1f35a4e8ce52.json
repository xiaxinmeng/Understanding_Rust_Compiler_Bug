{"sha": "3789bf8412fb7ecde28694552d6c1f35a4e8ce52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc4OWJmODQxMmZiN2VjZGUyODY5NDU1MmQ2YzFmMzVhNGU4Y2U1Mg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-11-23T15:21:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-11-23T15:21:32Z"}, "message": "re PR tree-optimization/68465 (pass_lim doesn't detect identical loop entry conditions)\n\n2015-11-23  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/68465\n\t* tree-ssa-sccvn.c (sccvn_dom_walker::before_dom_children):\n\tAlso record equalities from multiple predecessor blocks if\n\tonly one non-backedge exists.\n\n\t* gcc.dg/tree-ssa/ssa-fre-52.c: New testcase.\n\nFrom-SVN: r230764", "tree": {"sha": "ed35bdd54ea7057eb9acff643f542abc99f99c4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed35bdd54ea7057eb9acff643f542abc99f99c4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3789bf8412fb7ecde28694552d6c1f35a4e8ce52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3789bf8412fb7ecde28694552d6c1f35a4e8ce52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3789bf8412fb7ecde28694552d6c1f35a4e8ce52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3789bf8412fb7ecde28694552d6c1f35a4e8ce52/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "78cc43a2ab49c6ce1c730503cff73ea2e3a597bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78cc43a2ab49c6ce1c730503cff73ea2e3a597bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78cc43a2ab49c6ce1c730503cff73ea2e3a597bc"}], "stats": {"total": 66, "additions": 59, "deletions": 7}, "files": [{"sha": "61cbac92610e9ed2319369bfb06a9bc95a17fbf8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3789bf8412fb7ecde28694552d6c1f35a4e8ce52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3789bf8412fb7ecde28694552d6c1f35a4e8ce52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3789bf8412fb7ecde28694552d6c1f35a4e8ce52", "patch": "@@ -1,3 +1,10 @@\n+2015-11-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/68465\n+\t* tree-ssa-sccvn.c (sccvn_dom_walker::before_dom_children):\n+\tAlso record equalities from multiple predecessor blocks if\n+\tonly one non-backedge exists.\n+\n 2015-11-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/68363"}, {"sha": "dd7f96a8faaccb1abfaba0c8261bd0868ddf00af", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3789bf8412fb7ecde28694552d6c1f35a4e8ce52/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3789bf8412fb7ecde28694552d6c1f35a4e8ce52/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3789bf8412fb7ecde28694552d6c1f35a4e8ce52", "patch": "@@ -1,3 +1,8 @@\n+2015-11-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/68465\n+\t* gcc.dg/tree-ssa/ssa-fre-52.c: New testcase.\n+\n 2015-11-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/68363"}, {"sha": "8b607d576acc513a63eb034b66ff594f926358cd", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-52.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3789bf8412fb7ecde28694552d6c1f35a4e8ce52/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-52.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3789bf8412fb7ecde28694552d6c1f35a4e8ce52/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-52.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-52.c?ref=3789bf8412fb7ecde28694552d6c1f35a4e8ce52", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-fre1\" } */\n+\n+void bar ();\n+void foo (int n)\n+{\n+  if (n > 0)\n+    {\n+      int j = 0;\n+      do\n+\t{\n+\t  if (n > 0)\n+\t    {\n+\t      int i = 0;\n+\t      do\n+\t\t{\n+\t\t  bar ();\n+\t\t}\n+\t      while (i < n);\n+\t    }\n+\t}\n+      while (j < n);\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"if\" 1 \"fre1\" } } */"}, {"sha": "9a55b5b51613c70e062d947dc5a5464df8dcc54a", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3789bf8412fb7ecde28694552d6c1f35a4e8ce52/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3789bf8412fb7ecde28694552d6c1f35a4e8ce52/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=3789bf8412fb7ecde28694552d6c1f35a4e8ce52", "patch": "@@ -4357,32 +4357,46 @@ sccvn_dom_walker::before_dom_children (basic_block bb)\n \n   /* If we have a single predecessor record the equivalence from a\n      possible condition on the predecessor edge.  */\n-  if (single_pred_p (bb))\n+  edge pred_e = NULL;\n+  FOR_EACH_EDGE (e, ei, bb->preds)\n+    {\n+      /* Ignore simple backedges from this to allow recording conditions\n+         in loop headers.  */\n+      if (dominated_by_p (CDI_DOMINATORS, e->src, e->dest))\n+\tcontinue;\n+      if (! pred_e)\n+\tpred_e = e;\n+      else\n+\t{\n+\t  pred_e = NULL;\n+\t  break;\n+\t}\n+    }\n+  if (pred_e)\n     {\n-      edge e = single_pred_edge (bb);\n       /* Check if there are multiple executable successor edges in\n \t the source block.  Otherwise there is no additional info\n \t to be recorded.  */\n       edge e2;\n-      FOR_EACH_EDGE (e2, ei, e->src->succs)\n-\tif (e2 != e\n+      FOR_EACH_EDGE (e2, ei, pred_e->src->succs)\n+\tif (e2 != pred_e\n \t    && e2->flags & EDGE_EXECUTABLE)\n \t  break;\n       if (e2 && (e2->flags & EDGE_EXECUTABLE))\n \t{\n-\t  gimple *stmt = last_stmt (e->src);\n+\t  gimple *stmt = last_stmt (pred_e->src);\n \t  if (stmt\n \t      && gimple_code (stmt) == GIMPLE_COND)\n \t    {\n \t      enum tree_code code = gimple_cond_code (stmt);\n \t      tree lhs = gimple_cond_lhs (stmt);\n \t      tree rhs = gimple_cond_rhs (stmt);\n \t      record_conds (bb, code, lhs, rhs,\n-\t\t\t    (e->flags & EDGE_TRUE_VALUE) != 0);\n+\t\t\t    (pred_e->flags & EDGE_TRUE_VALUE) != 0);\n \t      code = invert_tree_comparison (code, HONOR_NANS (lhs));\n \t      if (code != ERROR_MARK)\n \t\trecord_conds (bb, code, lhs, rhs,\n-\t\t\t      (e->flags & EDGE_TRUE_VALUE) == 0);\n+\t\t\t      (pred_e->flags & EDGE_TRUE_VALUE) == 0);\n \t    }\n \t}\n     }"}]}