{"sha": "72d50660ad57224cefc7ad40b81c994b49a503b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJkNTA2NjBhZDU3MjI0Y2VmYzdhZDQwYjgxYzk5NGI0OWE1MDNiNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-06-08T13:11:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-06-08T13:11:43Z"}, "message": "re PR tree-optimization/71452 (Wrong optimization of stores to _Bool via char*)\n\n2016-06-08  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/71452\n\t* tree-ssa.c (non_rewritable_lvalue_p): Make sure that the\n\ttype used for the SSA rewrite has enough precision to cover\n\tthe dynamic type of the location.\n\n\t* gcc.dg/torture/pr71452.c: New testcase.\n\nFrom-SVN: r237214", "tree": {"sha": "91404c94ca65e268950f891ecf25f02f3c2cbd3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91404c94ca65e268950f891ecf25f02f3c2cbd3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72d50660ad57224cefc7ad40b81c994b49a503b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72d50660ad57224cefc7ad40b81c994b49a503b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72d50660ad57224cefc7ad40b81c994b49a503b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72d50660ad57224cefc7ad40b81c994b49a503b6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "988c115ca0fee432e5d6823a44e3289c0b73ad15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/988c115ca0fee432e5d6823a44e3289c0b73ad15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/988c115ca0fee432e5d6823a44e3289c0b73ad15"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "4f5d3177f1e2d24f64eb96a06ccbda44f909ba71", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d50660ad57224cefc7ad40b81c994b49a503b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d50660ad57224cefc7ad40b81c994b49a503b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72d50660ad57224cefc7ad40b81c994b49a503b6", "patch": "@@ -1,3 +1,10 @@\n+2016-06-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71452\n+\t* tree-ssa.c (non_rewritable_lvalue_p): Make sure that the\n+\ttype used for the SSA rewrite has enough precision to cover\n+\tthe dynamic type of the location.\n+\n 2016-06-08  Jakub Jelinek  <jakub@redhat.com>\n \t    Richard Biener  <rguenther@suse.de>\n "}, {"sha": "28b17cf4d02751e1cbe4d3ad1ff6c8dcb653cd8a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d50660ad57224cefc7ad40b81c994b49a503b6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d50660ad57224cefc7ad40b81c994b49a503b6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=72d50660ad57224cefc7ad40b81c994b49a503b6", "patch": "@@ -1,3 +1,8 @@\n+2016-06-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71452\n+\t* gcc.dg/torture/pr71452.c: New testcase.\n+\n 2016-06-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/71448"}, {"sha": "8948d39fdafd6145c882251e10bb37154c7ef0bd", "filename": "gcc/testsuite/gcc.dg/torture/pr71452.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d50660ad57224cefc7ad40b81c994b49a503b6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71452.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d50660ad57224cefc7ad40b81c994b49a503b6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71452.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71452.c?ref=72d50660ad57224cefc7ad40b81c994b49a503b6", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do run } */\n+\n+int main()\n+{\n+  _Bool b;\n+  *(char *)&b = 123;\n+  if (*(char *)&b != 123)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "30c6269e34530a1a11d8e04aeabc900239bce3db", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d50660ad57224cefc7ad40b81c994b49a503b6/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d50660ad57224cefc7ad40b81c994b49a503b6/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=72d50660ad57224cefc7ad40b81c994b49a503b6", "patch": "@@ -1292,6 +1292,14 @@ non_rewritable_lvalue_p (tree lhs)\n       if (integer_zerop (TREE_OPERAND (lhs, 1))\n \t  && DECL_P (decl)\n \t  && DECL_SIZE (decl) == TYPE_SIZE (TREE_TYPE (lhs))\n+\t  /* If the dynamic type of the decl has larger precision than\n+\t     the decl itself we can't use the decls type for SSA rewriting.  */\n+\t  && ((! INTEGRAL_TYPE_P (TREE_TYPE (decl))\n+\t       || compare_tree_int (DECL_SIZE (decl),\n+\t\t\t\t    TYPE_PRECISION (TREE_TYPE (decl))) == 0)\n+\t      || (INTEGRAL_TYPE_P (TREE_TYPE (lhs))\n+\t\t  && (TYPE_PRECISION (TREE_TYPE (decl))\n+\t\t      >= TYPE_PRECISION (TREE_TYPE (lhs)))))\n \t  && (TREE_THIS_VOLATILE (decl) == TREE_THIS_VOLATILE (lhs)))\n \treturn false;\n "}]}