{"sha": "fb55ca75aed99996a52ea22ba5456c918e7e70c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI1NWNhNzVhZWQ5OTk5NmE1MmVhMjJiYTU0NTZjOTE4ZTdlNzBjNg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-07-27T08:44:22Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-07-27T08:44:22Z"}, "message": "re PR fortran/40873 (-fwhole-file -fwhole-program: Wrong decls cause too much to be optimized away)\n\n2010-07-26  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/40873\n        * trans-decl.c (gfc_get_extern_function_decl): Fix generation\n        for functions which are later in the same file.\n        (gfc_create_function_decl, build_function_decl,\n        build_entry_thunks): Add global argument.\n        * trans.c (gfc_generate_module_code): Update\n        gfc_create_function_decl call.\n        * trans.h (gfc_create_function_decl): Update prototype.\n        * resolve.c (resolve_global_procedure): Also resolve for\n        IFSRC_IFBODY.\n\n2010-07-26  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/40873\n        * gfortran.dg/whole_file_22.f90: New test.\n        * gfortran.dg/whole_file_23.f90: New test.\n\nFrom-SVN: r162557", "tree": {"sha": "806144f554b32c6d406d7bddc3f6676634069925", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/806144f554b32c6d406d7bddc3f6676634069925"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb55ca75aed99996a52ea22ba5456c918e7e70c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb55ca75aed99996a52ea22ba5456c918e7e70c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb55ca75aed99996a52ea22ba5456c918e7e70c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb55ca75aed99996a52ea22ba5456c918e7e70c6/comments", "author": null, "committer": null, "parents": [{"sha": "bec627e5aaa40fb2b5b11cb1e8bdda6b078e2b4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bec627e5aaa40fb2b5b11cb1e8bdda6b078e2b4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bec627e5aaa40fb2b5b11cb1e8bdda6b078e2b4c"}], "stats": {"total": 184, "additions": 161, "deletions": 23}, "files": [{"sha": "7700e0bc7d1dd2107422fd763bd9998f9249e607", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb55ca75aed99996a52ea22ba5456c918e7e70c6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb55ca75aed99996a52ea22ba5456c918e7e70c6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=fb55ca75aed99996a52ea22ba5456c918e7e70c6", "patch": "@@ -1,3 +1,16 @@\n+2010-07-26  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/40873\n+\t* trans-decl.c (gfc_get_extern_function_decl): Fix generation\n+\tfor functions which are later in the same file.\n+\t(gfc_create_function_decl, build_function_decl,\n+\tbuild_entry_thunks): Add global argument.\n+\t* trans.c (gfc_generate_module_code): Update\n+\tgfc_create_function_decl call.\n+\t* trans.h (gfc_create_function_decl): Update prototype.\n+\t* resolve.c (resolve_global_procedure): Also resolve for\n+\tIFSRC_IFBODY.\n+\n 2010-07-26  Richard Henderson  <rth@redhat.com>\n \n \tPR target/44132"}, {"sha": "dab533d8242264f4725dc872bd4e40ae34b01256", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb55ca75aed99996a52ea22ba5456c918e7e70c6/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb55ca75aed99996a52ea22ba5456c918e7e70c6/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=fb55ca75aed99996a52ea22ba5456c918e7e70c6", "patch": "@@ -1816,7 +1816,8 @@ resolve_global_procedure (gfc_symbol *sym, locus *where,\n     gfc_global_used (gsym, where);\n \n   if (gfc_option.flag_whole_file\n-\t&& sym->attr.if_source == IFSRC_UNKNOWN\n+\t&& (sym->attr.if_source == IFSRC_UNKNOWN\n+\t    || sym->attr.if_source == IFSRC_IFBODY)\n \t&& gsym->type != GSYM_UNKNOWN\n \t&& gsym->ns\n \t&& gsym->ns->resolved != -1\n@@ -1902,7 +1903,7 @@ resolve_global_procedure (gfc_symbol *sym, locus *where,\n \t\t   sym->name, &sym->declared_at, gfc_typename (&sym->ts),\n \t\t   gfc_typename (&def_sym->ts));\n \n-      if (def_sym->formal)\n+      if (def_sym->formal && sym->attr.if_source != IFSRC_IFBODY)\n \t{\n \t  gfc_formal_arglist *arg = def_sym->formal;\n \t  for ( ; arg; arg = arg->next)\n@@ -1969,14 +1970,19 @@ resolve_global_procedure (gfc_symbol *sym, locus *where,\n \t\t       where);\n \n \t  /* F2003, 12.3.1.1 (3b); F2008, 12.4.2.2 (3b) */\n-\t  if (def_sym->result->attr.pointer\n-\t      || def_sym->result->attr.allocatable)\n+\t  if ((def_sym->result->attr.pointer\n+\t       || def_sym->result->attr.allocatable)\n+\t       && (sym->attr.if_source != IFSRC_IFBODY\n+\t\t   || def_sym->result->attr.pointer\n+\t\t\t!= sym->result->attr.pointer\n+\t\t   || def_sym->result->attr.allocatable\n+\t\t\t!= sym->result->attr.allocatable))\n \t    gfc_error (\"Function '%s' at %L with a POINTER or ALLOCATABLE \"\n \t\t       \"result must have an explicit interface\", sym->name,\n \t\t       where);\n \n \t  /* F2003, 12.3.1.1 (3c); F2008, 12.4.2.2 (3c)  */\n-\t  if (sym->ts.type == BT_CHARACTER\n+\t  if (sym->ts.type == BT_CHARACTER && sym->attr.if_source != IFSRC_IFBODY\n \t      && def_sym->ts.u.cl->length != NULL)\n \t    {\n \t      gfc_charlen *cl = sym->ts.u.cl;\n@@ -1992,14 +1998,14 @@ resolve_global_procedure (gfc_symbol *sym, locus *where,\n \t}\n \n       /* F2003, 12.3.1.1 (4); F2008, 12.4.2.2 (4) */\n-      if (def_sym->attr.elemental)\n+      if (def_sym->attr.elemental && !sym->attr.elemental)\n \t{\n \t  gfc_error (\"ELEMENTAL procedure '%s' at %L must have an explicit \"\n \t\t     \"interface\", sym->name, &sym->declared_at);\n \t}\n \n       /* F2003, 12.3.1.1 (5); F2008, 12.4.2.2 (5) */\n-      if (def_sym->attr.is_bind_c)\n+      if (def_sym->attr.is_bind_c && !sym->attr.is_bind_c)\n \t{\n \t  gfc_error (\"Procedure '%s' at %L with BIND(C) attribute must have \"\n \t\t     \"an explicit interface\", sym->name, &sym->declared_at);\n@@ -2010,7 +2016,8 @@ resolve_global_procedure (gfc_symbol *sym, locus *where,\n \t      && !(gfc_option.warn_std & GFC_STD_GNU)))\n \tgfc_errors_to_warnings (1);\n \n-      gfc_procedure_use (def_sym, actual, where);\n+      if (sym->attr.if_source != IFSRC_IFBODY)  \n+\tgfc_procedure_use (def_sym, actual, where);\n \n       gfc_errors_to_warnings (0);\n     }"}, {"sha": "5d6ea02b20e9d8f4f4a73578a83d9d4fa79f16a4", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 34, "deletions": 11, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb55ca75aed99996a52ea22ba5456c918e7e70c6/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb55ca75aed99996a52ea22ba5456c918e7e70c6/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=fb55ca75aed99996a52ea22ba5456c918e7e70c6", "patch": "@@ -1413,8 +1413,26 @@ gfc_get_extern_function_decl (gfc_symbol * sym)\n \t&& !sym->backend_decl\n \t&& gsym && gsym->ns\n \t&& ((gsym->type == GSYM_SUBROUTINE) || (gsym->type == GSYM_FUNCTION))\n-\t&& gsym->ns->proc_name->backend_decl)\n+\t&& (gsym->ns->proc_name->backend_decl || !sym->attr.intrinsic))\n     {\n+      if (!gsym->ns->proc_name->backend_decl)\n+\t{\n+\t  /* By construction, the external function cannot be\n+\t     a contained procedure.  */\n+\t  locus old_loc;\n+\t  tree save_fn_decl = current_function_decl;\n+\n+\t  current_function_decl = NULL_TREE;\n+\t  gfc_get_backend_locus (&old_loc);\n+\t  push_cfun (cfun);\n+\n+\t  gfc_create_function_decl (gsym->ns, true);\n+\n+\t  pop_cfun ();\n+\t  gfc_set_backend_locus (&old_loc);\n+\t  current_function_decl = save_fn_decl;\n+\t}\n+\n       /* If the namespace has entries, the proc_name is the\n \t entry master.  Find the entry and use its backend_decl.\n \t otherwise, use the proc_name backend_decl.  */\n@@ -1574,7 +1592,7 @@ gfc_get_extern_function_decl (gfc_symbol * sym)\n    a master function with alternate entry points.  */\n \n static void\n-build_function_decl (gfc_symbol * sym)\n+build_function_decl (gfc_symbol * sym, bool global)\n {\n   tree fndecl, type, attributes;\n   symbol_attribute attr;\n@@ -1682,7 +1700,11 @@ build_function_decl (gfc_symbol * sym)\n \n   /* Layout the function declaration and put it in the binding level\n      of the current function.  */\n-  pushdecl (fndecl);\n+\n+  if (global)\n+    pushdecl_top_level (fndecl);\n+  else\n+    pushdecl (fndecl);\n \n   sym->backend_decl = fndecl;\n }\n@@ -1955,7 +1977,7 @@ trans_function_start (gfc_symbol * sym)\n /* Create thunks for alternate entry points.  */\n \n static void\n-build_entry_thunks (gfc_namespace * ns)\n+build_entry_thunks (gfc_namespace * ns, bool global)\n {\n   gfc_formal_arglist *formal;\n   gfc_formal_arglist *thunk_formal;\n@@ -1977,7 +1999,7 @@ build_entry_thunks (gfc_namespace * ns)\n \n       thunk_sym = el->sym;\n       \n-      build_function_decl (thunk_sym);\n+      build_function_decl (thunk_sym, global);\n       create_function_arglist (thunk_sym);\n \n       trans_function_start (thunk_sym);\n@@ -2137,17 +2159,18 @@ build_entry_thunks (gfc_namespace * ns)\n \n \n /* Create a decl for a function, and create any thunks for alternate entry\n-   points.  */\n+   points. If global is true, generate the function in the global binding\n+   level, otherwise in the current binding level (which can be global).  */\n \n void\n-gfc_create_function_decl (gfc_namespace * ns)\n+gfc_create_function_decl (gfc_namespace * ns, bool global)\n {\n   /* Create a declaration for the master function.  */\n-  build_function_decl (ns->proc_name);\n+  build_function_decl (ns->proc_name, global);\n \n   /* Compile the entry thunks.  */\n   if (ns->entries)\n-    build_entry_thunks (ns);\n+    build_entry_thunks (ns, global);\n \n   /* Now create the read argument list.  */\n   create_function_arglist (ns->proc_name);\n@@ -3728,7 +3751,7 @@ gfc_generate_contained_functions (gfc_namespace * parent)\n       if (ns->parent != parent)\n \tcontinue;\n \n-      gfc_create_function_decl (ns);\n+      gfc_create_function_decl (ns, false);\n     }\n \n   for (ns = parent->contained; ns; ns = ns->sibling)\n@@ -4364,7 +4387,7 @@ gfc_generate_function_code (gfc_namespace * ns)\n \n   /* Create the declaration for functions with global scope.  */\n   if (!sym->backend_decl)\n-    gfc_create_function_decl (ns);\n+    gfc_create_function_decl (ns, false);\n \n   fndecl = sym->backend_decl;\n   old_context = current_function_decl;"}, {"sha": "4bd4f3b219838a1955889f42d8b0d4aa0479adf3", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb55ca75aed99996a52ea22ba5456c918e7e70c6/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb55ca75aed99996a52ea22ba5456c918e7e70c6/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=fb55ca75aed99996a52ea22ba5456c918e7e70c6", "patch": "@@ -1388,7 +1388,7 @@ gfc_generate_module_code (gfc_namespace * ns)\n       if (!n->proc_name)\n         continue;\n \n-      gfc_create_function_decl (n);\n+      gfc_create_function_decl (n, false);\n       gcc_assert (DECL_CONTEXT (n->proc_name->backend_decl) == NULL_TREE);\n       DECL_CONTEXT (n->proc_name->backend_decl) = ns->proc_name->backend_decl;\n       gfc_module_add_decl (entry, n->proc_name->backend_decl);"}, {"sha": "99f0dc09283dd167f3b66e8169504ad8d60ec1ee", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb55ca75aed99996a52ea22ba5456c918e7e70c6/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb55ca75aed99996a52ea22ba5456c918e7e70c6/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=fb55ca75aed99996a52ea22ba5456c918e7e70c6", "patch": "@@ -449,7 +449,7 @@ void gfc_allocate_lang_decl (tree);\n tree gfc_advance_chain (tree, int);\n \n /* Create a decl for a function.  */\n-void gfc_create_function_decl (gfc_namespace *);\n+void gfc_create_function_decl (gfc_namespace *, bool);\n /* Generate the code for a function.  */\n void gfc_generate_function_code (gfc_namespace *);\n /* Output a BLOCK DATA program unit.  */\n@@ -537,14 +537,16 @@ void gfc_process_block_locals (gfc_namespace*);\n /* Output initialization/clean-up code that was deferred.  */\n void gfc_trans_deferred_vars (gfc_symbol*, gfc_wrapped_block *);\n \n-/* somewhere! */\n+/* In f95-lang.c.  */\n tree pushdecl (tree);\n tree pushdecl_top_level (tree);\n void pushlevel (int);\n tree poplevel (int, int, int);\n tree getdecls (void);\n tree gfc_truthvalue_conversion (tree);\n tree gfc_builtin_function (tree);\n+\n+/* In trans-types.c.  */\n struct array_descr_info;\n bool gfc_get_array_descr_info (const_tree, struct array_descr_info *);\n "}, {"sha": "9ce38788dd2869b627ba5eb46692c2d2458bc160", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb55ca75aed99996a52ea22ba5456c918e7e70c6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb55ca75aed99996a52ea22ba5456c918e7e70c6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fb55ca75aed99996a52ea22ba5456c918e7e70c6", "patch": "@@ -1,4 +1,10 @@\n-2010-07-19  Iain Sandoe  <iains@gcc.gnu.org>\n+2010-07-26  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/40873\n+\t* gfortran.dg/whole_file_22.f90: New test.\n+\t* gfortran.dg/whole_file_23.f90: New test.\n+\n+2010-07-26  Iain Sandoe  <iains@gcc.gnu.org>\n \t    Jack Howarth  <howarth@bromo.med.uc.edu>\n \t    Richard Henderson  <rth@redhat.com>\n "}, {"sha": "4e229207ccdda13681f2e0b0ebaa7a6e9dc6d81b", "filename": "gcc/testsuite/gfortran.dg/whole_file_22.f90", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb55ca75aed99996a52ea22ba5456c918e7e70c6/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_22.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb55ca75aed99996a52ea22ba5456c918e7e70c6/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_22.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_22.f90?ref=fb55ca75aed99996a52ea22ba5456c918e7e70c6", "patch": "@@ -0,0 +1,38 @@\n+! { dg-do link }\n+! { dg-options \"-fwhole-program -O3 -g\" }\n+!\n+! PR fortran/40873\n+!\n+      program prog\n+        call one()\n+        call two()\n+        call test()\n+      end program prog\n+      subroutine one()\n+        call three()\n+      end subroutine one\n+      subroutine two()\n+        call three()\n+      end subroutine two\n+      subroutine three()\n+      end subroutine three\n+\n+SUBROUTINE c()\n+ CALL a()\n+END SUBROUTINE c\n+\n+SUBROUTINE a()\n+END SUBROUTINE a\n+\n+MODULE M\n+CONTAINS\n+ SUBROUTINE b()\n+   CALL c()\n+ END SUBROUTINE\n+END MODULE\n+\n+subroutine test()\n+USE M\n+CALL b()\n+END\n+"}, {"sha": "c8f66e6cd62ae47988e5dc0162e1e10951f857d9", "filename": "gcc/testsuite/gfortran.dg/whole_file_23.f90", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb55ca75aed99996a52ea22ba5456c918e7e70c6/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_23.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb55ca75aed99996a52ea22ba5456c918e7e70c6/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_23.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_23.f90?ref=fb55ca75aed99996a52ea22ba5456c918e7e70c6", "patch": "@@ -0,0 +1,49 @@\n+! { dg-do compile }\n+! \n+! PR fortran/40873\n+!\n+! Failed to compile (segfault) with -fwhole-file.\n+! Cf. PR 40873 comment 24; test case taken from\n+! PR fortran/31867 comment 6.\n+!\n+\n+pure integer function lensum (words, sep)\n+  character (len=*), intent(in)        :: words(:), sep\n+  lensum = (size (words)-1) * len (sep) + sum (len_trim (words))\n+end function\n+\n+module util_mod\n+  implicit none\n+  interface\n+    pure integer function lensum (words, sep)\n+      character (len=*), intent(in)        :: words(:), sep\n+    end function\n+  end interface\n+  contains\n+  function join (words, sep) result(str)\n+! trim and concatenate a vector of character variables, \n+! inserting sep between them\n+    character (len=*), intent(in)        :: words(:), sep\n+    character (len=lensum (words, sep))  :: str\n+    integer                              :: i, nw\n+    nw  = size (words)\n+    str = \"\"\n+    if (nw < 1) then\n+      return\n+    else\n+      str = words(1)\n+    end if\n+    do i=2,nw\n+      str = trim (str) // sep // words(i)\n+    end do\n+  end function join\n+end module util_mod\n+!\n+program xjoin\n+  use util_mod, only: join\n+  implicit none\n+  character (len=5) :: words(2) = (/\"two  \",\"three\"/) \n+  write (*,\"(1x,'words = ',a)\") \"'\"//join (words, \"&\")//\"'\"\n+end program xjoin\n+\n+! { dg-final { cleanup-modules \"util_mod\" } }"}]}