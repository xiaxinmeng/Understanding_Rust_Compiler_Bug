{"sha": "1c8ebf66965509008329b6e0425ffda407265263", "node_id": "C_kwDOANBUbNoAKDFjOGViZjY2OTY1NTA5MDA4MzI5YjZlMDQyNWZmZGE0MDcyNjUyNjM", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-12T14:58:09Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-12T15:04:17Z"}, "message": "Revert GCC changes to ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc", "tree": {"sha": "9c2852809074d13e1cdb5d5bedc2955dbf357875", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c2852809074d13e1cdb5d5bedc2955dbf357875"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c8ebf66965509008329b6e0425ffda407265263", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c8ebf66965509008329b6e0425ffda407265263", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c8ebf66965509008329b6e0425ffda407265263", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c8ebf66965509008329b6e0425ffda407265263/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3399688a1bfe506e80109b765a63ea278d29383c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3399688a1bfe506e80109b765a63ea278d29383c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3399688a1bfe506e80109b765a63ea278d29383c"}], "stats": {"total": 3058, "additions": 576, "deletions": 2482}, "files": [{"sha": "31ff95500c96de724f53be8bd07a2b9df1c0acb5", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 32, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -570,8 +570,6 @@ tm_p_file_list=@tm_p_file_list@\n tm_p_include_list=@tm_p_include_list@\n tm_d_file_list=@tm_d_file_list@\n tm_d_include_list=@tm_d_include_list@\n-tm_rust_file_list=@tm_rust_file_list@\n-tm_rust_include_list=@tm_rust_include_list@\n build_xm_file_list=@build_xm_file_list@\n build_xm_include_list=@build_xm_include_list@\n build_xm_defines=@build_xm_defines@\n@@ -865,7 +863,6 @@ CONFIG_H  = config.h  $(host_xm_file_list)\n TCONFIG_H = tconfig.h $(xm_file_list)\n TM_P_H    = tm_p.h    $(tm_p_file_list)\n TM_D_H    = tm_d.h    $(tm_d_file_list)\n-TM_RUST_H = tm_rust.h $(tm_rust_file_list)\n GTM_H     = tm.h      $(tm_file_list) insn-constants.h\n TM_H      = $(GTM_H) insn-flags.h $(OPTIONS_H)\n \n@@ -928,7 +925,6 @@ TARGET_H = $(TM_H) target.h $(TARGET_DEF) insn-modes.h insn-codes.h\n C_TARGET_H = c-family/c-target.h $(C_TARGET_DEF)\n COMMON_TARGET_H = common/common-target.h $(INPUT_H) $(COMMON_TARGET_DEF)\n D_TARGET_H = d/d-target.h $(D_TARGET_DEF)\n-RUST_TARGET_H = rust/rust-target.h $(RUST_TARGET_DEF)\n MACHMODE_H = machmode.h mode-classes.def\n HOOKS_H = hooks.h\n HOSTHOOKS_DEF_H = hosthooks-def.h $(HOOKS_H)\n@@ -1228,9 +1224,6 @@ CXX_TARGET_OBJS=@cxx_target_objs@\n # Target specific, D specific object file\n D_TARGET_OBJS=@d_target_objs@\n \n-# Target specific, D specific object file\n-RUST_TARGET_OBJS=@rust_target_objs@\n-\n # Target specific, Fortran specific object file\n FORTRAN_TARGET_OBJS=@fortran_target_objs@\n \n@@ -1932,7 +1925,6 @@ tconfig.h: cs-tconfig.h ; @true\n tm.h: cs-tm.h ; @true\n tm_p.h: cs-tm_p.h ; @true\n tm_d.h: cs-tm_d.h ; @true\n-tm_rust.h: cs-tm_rust.h ; @true\n \n cs-config.h: Makefile\n \tTARGET_CPU_DEFAULT=\"\" \\\n@@ -1964,11 +1956,6 @@ cs-tm_d.h: Makefile\n \tHEADERS=\"$(tm_d_include_list)\" DEFINES=\"\" \\\n \t$(SHELL) $(srcdir)/mkconfig.sh tm_d.h\n \n-cs-tm_rust.h: Makefile\n-\tTARGET_CPU_DEFAULT=\"\" \\\n-\tHEADERS=\"$(tm_rust_include_list)\" DEFINES=\"\" \\\n-\t$(SHELL) $(srcdir)/mkconfig.sh tm_rust.h\n-\n # Don't automatically run autoconf, since configure.ac might be accidentally\n # newer than configure.  Also, this writes into the source directory which\n # might be on a read-only file system.  If configured for maintainer mode\n@@ -2305,12 +2292,6 @@ default-d.o: config/default-d.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n-# Files used by the Rust language front end.\n-\n-default-rust.o: config/default-rust.cc\n-\t$(COMPILE) $<\n-\t$(POSTCOMPILE)\n-\n # Language-independent files.\n \n DRIVER_DEFINES = \\\n@@ -2615,15 +2596,6 @@ s-d-target-hooks-def-h: build/genhooks$(build_exeext)\n \t\t\t\t\t     d/d-target-hooks-def.h\n \t$(STAMP) s-d-target-hooks-def-h\n \n-rust/rust-target-hooks-def.h: s-rust-target-hooks-def-h; @true\n-\n-s-rust-target-hooks-def-h: build/genhooks$(build_exeext)\n-\t$(RUN_GEN) build/genhooks$(build_exeext) \"Rust Target Hook\" \\\n-\t\t\t\t\t     > tmp-rust-target-hooks-def.h\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-rust-target-hooks-def.h \\\n-\t\t\t\t\t     rust/rust-target-hooks-def.h\n-\t$(STAMP) s-rust-target-hooks-def-h\n-\n # check if someone mistakenly only changed tm.texi.\n # We use a different pathname here to avoid a circular dependency.\n s-tm-texi: $(srcdir)/doc/../doc/tm.texi\n@@ -2648,7 +2620,6 @@ s-tm-texi: build/genhooks$(build_exeext) $(srcdir)/doc/tm.texi.in\n \t    || test $(srcdir)/doc/tm.texi -nt $(srcdir)/c-family/c-target.def \\\n \t    || test $(srcdir)/doc/tm.texi -nt $(srcdir)/common/common-target.def \\\n \t    || test $(srcdir)/doc/tm.texi -nt $(srcdir)/d/d-target.def \\\n-\t    || test $(srcdir)/doc/tm.texi -nt $(srcdir)/rust/rust-target.def \\\n \t  ); then \\\n \t  echo >&2 ; \\\n \t  echo You should edit $(srcdir)/doc/tm.texi.in rather than $(srcdir)/doc/tm.texi . >&2 ; \\\n@@ -2797,16 +2768,16 @@ s-gtype: $(EXTRA_GTYPE_DEPS) build/gengtype$(build_exeext) \\\n                     -r gtype.state\n \t$(STAMP) s-gtype\n \n-generated_files = config.h tm.h $(TM_P_H) $(TM_D_H) $(TM_RUST_H) $(TM_H) \\\n-       multilib.h $(simple_generated_h) specs.h \\\n+generated_files = config.h tm.h $(TM_P_H) $(TM_D_H) $(TM_H) multilib.h \\\n+       $(simple_generated_h) specs.h \\\n        tree-check.h genrtl.h insn-modes.h insn-modes-inline.h \\\n        tm-preds.h tm-constrs.h \\\n        $(ALL_GTFILES_H) gtype-desc.cc gtype-desc.h version.h \\\n        options.h target-hooks-def.h insn-opinit.h \\\n        common/common-target-hooks-def.h pass-instances.def \\\n        gimple-match.cc generic-match.cc \\\n        c-family/c-target-hooks-def.h d/d-target-hooks-def.h \\\n-       rust/rust-target-hooks-def.h case-cfn-macros.h \\\n+       case-cfn-macros.h \\\n        cfn-operators.pd omp-device-properties.h\n \n #\f"}, {"sha": "fe7bcf66752714898a76ef528f8691db91b6624a", "filename": "gcc/common.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -3570,10 +3570,6 @@ static-libgo\n Driver\n ; Documented for Go, but always accepted by driver.\n \n-static-librust\n-Driver\n-; Documented for Rust, but always accepted by driver.\n-\n static-libasan\n Driver\n "}, {"sha": "2c4266ce7b0c6460fc8942775b773a406fbd3005", "filename": "gcc/config.gcc", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -90,9 +90,6 @@\n #  tm_d_file\t\tA list of headers with definitions of target hook\n #\t\t\tmacros for the D compiler.\n #\n-#  tm_rust_file\t\tA list of headers with definitions of target hook\n-#\t\t\tmacros for the Rust compiler.\n-#\n #  out_file\t\tThe name of the machine description C support\n #\t\t\tfile, if different from \"$cpu_type/$cpu_type.c\".\n #\n@@ -149,9 +146,6 @@\n #  d_target_objs\tList of extra target-dependent objects that be\n #\t\t\tlinked into the D compiler only.\n #\n-#  rust_target_objs\tList of extra target-dependent objects that be\n-#\t\t\tlinked into the Rust compiler only.\n-#\n #  fortran_target_objs\tList of extra target-dependent objects that be\n #\t\t\tlinked into the fortran compiler only.\n #\n@@ -207,9 +201,6 @@\n #\n #  target_has_targetdm\tSet to yes or no depending on whether the target\n #\t\t\thas its own definition of targetdm.\n-#\n-#  target_has_targetrustm\tSet to yes or no depending on whether the target\n-#\t\t\thas its own definition of targetrustm.\n \n out_file=\n common_out_file=\n@@ -226,7 +217,6 @@ extra_options=\n c_target_objs=\n cxx_target_objs=\n d_target_objs=\n-rust_target_objs=\n fortran_target_objs=\n target_has_targetcm=no\n target_has_targetm_common=yes\n@@ -339,14 +329,12 @@ aarch64*-*-*)\n \tc_target_objs=\"aarch64-c.o\"\n \tcxx_target_objs=\"aarch64-c.o\"\n \td_target_objs=\"aarch64-d.o\"\n-\trust_target_objs=\"aarch64-rust.o\"\n \textra_objs=\"aarch64-builtins.o aarch-common.o aarch64-sve-builtins.o aarch64-sve-builtins-shapes.o aarch64-sve-builtins-base.o aarch64-sve-builtins-sve2.o cortex-a57-fma-steering.o aarch64-speculation.o falkor-tag-collision-avoidance.o aarch64-bti-insert.o aarch64-cc-fusion.o\"\n \ttarget_gtfiles=\"\\$(srcdir)/config/aarch64/aarch64-builtins.cc \\$(srcdir)/config/aarch64/aarch64-sve-builtins.h \\$(srcdir)/config/aarch64/aarch64-sve-builtins.cc\"\n \ttarget_has_targetm_common=yes\n \t;;\n alpha*-*-*)\n \tcpu_type=alpha\n-\trust_target_objs=\"alpha-rust.o\"\n \textra_options=\"${extra_options} g.opt\"\n \t;;\n amdgcn*)\n@@ -360,7 +348,6 @@ arc*-*-*)\n \tcpu_type=arc\n \tc_target_objs=\"arc-c.o\"\n \tcxx_target_objs=\"arc-c.o\"\n-\trust_target_objs=\"arc-rust.o\"\n \textra_options=\"${extra_options} arc/arc-tables.opt g.opt\"\n \textra_headers=\"arc-simd.h\"\n \t;;\n@@ -372,7 +359,6 @@ arm*-*-*)\n \tc_target_objs=\"arm-c.o\"\n \tcxx_target_objs=\"arm-c.o\"\n \td_target_objs=\"arm-d.o\"\n-\trust_target_objs=\"arm-rust.o\"\n \textra_options=\"${extra_options} arm/arm-tables.opt\"\n \ttarget_gtfiles=\"\\$(srcdir)/config/arm/arm-builtins.cc \\$(srcdir)/config/arm/arm-mve-builtins.h \\$(srcdir)/config/arm/arm-mve-builtins.cc\"\n \t;;\n@@ -389,7 +375,6 @@ bpf-*-*)\n \t;;\n frv*)\tcpu_type=frv\n \textra_options=\"${extra_options} g.opt\"\n-\trust_target_objs=\"frv-rust.o\"\n \t;;\n ft32*)\tcpu_type=ft32\n \ttarget_has_targetm_common=no\n@@ -401,14 +386,12 @@ fido-*-*)\n \tcpu_type=m68k\n \textra_headers=math-68881.h\n \textra_options=\"${extra_options} m68k/m68k-tables.opt\"\n-\trust_target_objs=\"m68k-rust.o\"\n         ;;\n i[34567]86-*-* | x86_64-*-*)\n \tcpu_type=i386\n \tc_target_objs=\"i386-c.o\"\n \tcxx_target_objs=\"i386-c.o\"\n \td_target_objs=\"i386-d.o\"\n-\trust_target_objs=\"i386-rust.o\"\n \textra_objs=\"x86-tune-sched.o x86-tune-sched-bd.o x86-tune-sched-atom.o x86-tune-sched-core.o i386-options.o i386-builtins.o i386-expand.o i386-features.o\"\n \ttarget_gtfiles=\"\\$(srcdir)/config/i386/i386-builtins.cc \\$(srcdir)/config/i386/i386-expand.cc \\$(srcdir)/config/i386/i386-options.cc\"\n \textra_options=\"${extra_options} fused-madd.opt\"\n@@ -443,13 +426,11 @@ i[34567]86-*-* | x86_64-*-*)\n \t\t       mwaitintrin.h avx512fp16intrin.h avx512fp16vlintrin.h\"\n \t;;\n ia64-*-*)\n-\trust_target_objs=\"ia64-rust.o\"\n \textra_headers=ia64intrin.h\n \textra_options=\"${extra_options} g.opt fused-madd.opt\"\n \t;;\n hppa*-*-*)\n \tcpu_type=pa\n-\trust_target_objs=\"pa-rust.o\"\n \t;;\n lm32*)\n \textra_options=\"${extra_options} g.opt\"\n@@ -461,7 +442,6 @@ m32r*-*-*)\n m68k-*-*)\n \textra_headers=math-68881.h\n \textra_options=\"${extra_options} m68k/m68k-tables.opt\"\n-\trust_target_objs=\"m68k-rust.o\"\n \t;;\n microblaze*-*-*)\n         cpu_type=microblaze\n@@ -470,14 +450,12 @@ microblaze*-*-*)\n mips*-*-*)\n \tcpu_type=mips\n \td_target_objs=\"mips-d.o\"\n-\trust_target_objs=\"mips-rust.o\"\n \textra_headers=\"loongson.h loongson-mmiintrin.h msa.h\"\n \textra_objs=\"frame-header-opt.o\"\n \textra_options=\"${extra_options} g.opt fused-madd.opt mips/mips-tables.opt\"\n \t;;\n nds32*)\n \tcpu_type=nds32\n-\trust_target_objs=\"nds32-rust.o\"\n \textra_headers=\"nds32_intrinsic.h nds32_isr.h nds32_init.inc\"\n \tcase ${target} in\n \t  nds32*-*-linux*)\n@@ -493,18 +471,15 @@ nds32*)\n \t;;\n nios2-*-*)\n \tcpu_type=nios2\n-\trust_target_objs=\"nios2-rust.o\"\n \textra_options=\"${extra_options} g.opt\"\n \t;;\n nvptx-*-*)\n \tcpu_type=nvptx\n \tc_target_objs=\"nvptx-c.o\"\n \tcxx_target_objs=\"nvptx-c.o\"\n-\trust_target_objs=\"nvptx-rust.o\"\n \t;;\n or1k*-*-*)\n \tcpu_type=or1k\n-\trust_target_objs=\"or1k-rust.o\"\n \t;;\n powerpc*-*-*)\n \tcpu_type=rs6000\n@@ -536,7 +511,6 @@ riscv*)\n \tcpu_type=riscv\n \textra_objs=\"riscv-builtins.o riscv-c.o riscv-sr.o riscv-shorten-memrefs.o\"\n \td_target_objs=\"riscv-d.o\"\n-\trust_target_objs=\"riscv-rust.o\"\n \t;;\n rs6000*-*-*)\n \textra_options=\"${extra_options} g.opt fused-madd.opt rs6000/rs6000-tables.opt\"\n@@ -550,30 +524,25 @@ sparc*-*-*)\n \tc_target_objs=\"sparc-c.o\"\n \tcxx_target_objs=\"sparc-c.o\"\n \td_target_objs=\"sparc-d.o\"\n-\trust_target_objs=\"sparc-rust.o\"\n \textra_headers=\"visintrin.h\"\n \t;;\n s390*-*-*)\n \tcpu_type=s390\n \td_target_objs=\"s390-d.o\"\n-\trust_target_objs=\"s390-rust.o\"\n \textra_options=\"${extra_options} fused-madd.opt\"\n \textra_headers=\"s390intrin.h htmintrin.h htmxlintrin.h vecintrin.h\"\n \t;;\n # Note the 'l'; we need to be able to match e.g. \"shle\" or \"shl\".\n sh[123456789lbe]*-*-* | sh-*-*)\n \tcpu_type=sh\n-\trust_target_objs=\"sh-rust.o\"\n \textra_options=\"${extra_options} fused-madd.opt\"\n \textra_objs=\"${extra_objs} sh_treg_combine.o sh-mem.o sh_optimize_sett_clrt.o\"\n \t;;\n v850*-*-*)\n \tcpu_type=v850\n-\trust_target_objs=\"v850-rust.o\"\n \t;;\n tic6x-*-*)\n \tcpu_type=c6x\n-\trust_target_objs=\"c6x-rust.o\"\n \textra_headers=\"c6x_intrinsics.h\"\n \textra_options=\"${extra_options} c6x/c6x-tables.opt\"\n \t;;\n@@ -590,12 +559,10 @@ esac\n \n tm_file=${cpu_type}/${cpu_type}.h\n tm_d_file=${cpu_type}/${cpu_type}.h\n-tm_rust_file=${cpu_type}/${cpu_type}.h\n if test -f ${srcdir}/config/${cpu_type}/${cpu_type}-protos.h\n then\n \ttm_p_file=${cpu_type}/${cpu_type}-protos.h\n \ttm_d_file=\"${tm_d_file} ${cpu_type}/${cpu_type}-protos.h\"\n-\ttm_rust_file=\"${tm_rust_file} ${cpu_type}/${cpu_type}-protos.h\"\n fi\n \n extra_modes=\n@@ -1581,7 +1548,6 @@ cr16-*-elf)\n         tm_file=\"elfos.h ${tm_file} newlib-stdint.h\"\n         tmake_file=\"${tmake_file} cr16/t-cr16 \"\n         use_collect2=no\n-        rust_target_objs=\"cr16-rust.o\"\n         ;;\n cris-*-elf | cris-*-none)\n \ttm_file=\"elfos.h newlib-stdint.h ${tm_file}\"\n@@ -1652,7 +1618,6 @@ csky-*-*)\n \t\texit 1\n \t\t;;\n \tesac\n-\trust_target_objs=\"csky-rust.o\"\n \t;;\n epiphany-*-elf | epiphany-*-rtems*)\n \ttm_file=\"dbxelf.h elfos.h ${tm_file}\"\n@@ -1669,7 +1634,6 @@ epiphany-*-elf | epiphany-*-rtems*)\n \textra_objs=\"${extra_objs} mode-switch-use.o resolve-sw-modes.o\"\n \ttm_defines=\"${tm_defines} EPIPHANY_STACK_OFFSET=${with_stack_offset:-8}\"\n \textra_headers=\"epiphany_intrinsics.h\"\n-\trust_target_objs=\"epiphany-rust.o\"\n \t;;\n fr30-*-elf)\n \ttm_file=\"dbxelf.h elfos.h newlib-stdint.h ${tm_file}\"\n@@ -2898,7 +2862,6 @@ or1k*-*-*)\n pdp11-*-*)\n \ttm_file=\"${tm_file} newlib-stdint.h\"\n \tuse_gcc_stdint=wrap\n-\trust_target_objs=\"pdp11-rust.o\"\n \t;;\n # port not yet contributed\n #powerpc-*-openbsd*)\n@@ -3184,12 +3147,10 @@ rx-*-elf*)\n \ttm_file=\"dbxelf.h elfos.h newlib-stdint.h ${tm_file}\"\n \ttmake_file=\"${tmake_file} rx/t-rx\"\n \textra_options=\"${extra_options} rx/elf.opt\"\n-\trust_target_objs=\"rx-rust.o\"\n \t;;\n rx-*-linux*)\n \ttm_file=\"elfos.h linux.h glibc-stdint.h rx/linux.h ../../libgcc/config/rx/rx-abi.h\"\n \ttmake_file=\"${tmake_file} rx/t-linux\"\n-\trust_target_objs=\"rx-rust.o\"\n \t;;\n s390-*-linux*)\n \ttm_file=\"s390/s390.h dbxelf.h elfos.h gnu-user.h linux.h glibc-stdint.h s390/linux.h\"\n@@ -3671,10 +3632,6 @@ if [ \"$target_has_targetdm\" = \"no\" ]; then\n   d_target_objs=\"$d_target_objs default-d.o\"\n fi\n \n-if [ \"$target_has_targetrustm\" = \"no\" ]; then\n-  rust_target_objs=\"$rust_target_objs default-rust.o\"\n-fi\n-\n # Support for --with-cpu and related options (and a few unrelated options,\n # too).\n case ${with_cpu} in\n@@ -5421,7 +5378,6 @@ case ${target} in\n \t\tc_target_objs=\"${c_target_objs} ${cpu_type}-c.o\"\n \t\tcxx_target_objs=\"${cxx_target_objs} ${cpu_type}-c.o\"\n \t\td_target_objs=\"${d_target_objs} ${cpu_type}-d.o\"\n-\t\trust_target_objs=\"${rust_target_objs} ${cpu_type}-rust.o\"\t\t\n \t\ttmake_file=\"${cpu_type}/t-${cpu_type} ${tmake_file}\"\n \t\t;;\n "}, {"sha": "13beb3781b61afd82d767884f3c16ff8eead09cc", "filename": "gcc/config/aarch64/aarch64-freebsd.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Faarch64%2Faarch64-freebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Faarch64%2Faarch64-freebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-freebsd.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -65,14 +65,6 @@\n   }                                           \\\n   while (false)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in aarch64-freebsd.h - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()       \\\n-  do {                              \\\n-    FBSD_TARGET_RUST_OS_INFO ();    \\\n-  } while (0)\n-\n #define TARGET_ASM_FILE_END file_end_indicate_exec_stack\n \n /* Uninitialized common symbols in non-PIE executables, even with"}, {"sha": "5e4553d79f5053f2da0eb381e0805f47aec964ae", "filename": "gcc/config/aarch64/aarch64-linux.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Faarch64%2Faarch64-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Faarch64%2Faarch64-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-linux.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -64,13 +64,6 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define GNU_USER_TARGET_D_CRITSEC_SIZE 48\n-\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\\\n-    GNU_USER_TARGET_RUST_OS_INFO();\t\t\\\n-  } while (0)\n-\n #define TARGET_ASM_FILE_END aarch64_file_end_indicate_exec_stack\n \n /* Uninitialized common symbols in non-PIE executables, even with"}, {"sha": "9485f309c7b597c126009325fa1033e4a3fc1d00", "filename": "gcc/config/aarch64/aarch64-netbsd.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Faarch64%2Faarch64-netbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Faarch64%2Faarch64-netbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-netbsd.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -52,14 +52,6 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in aarch64-netbsd.h - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\\\n-    NETBSD_TARGET_RUST_OS_INFO();\t\t\\\n-  } while (0)\n-\n #undef SUBTARGET_CPP_SPEC\n #define SUBTARGET_CPP_SPEC NETBSD_CPP_SPEC\n "}, {"sha": "26368538a5556693785dd2df0836dec9c6b2b7f3", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -1026,9 +1026,6 @@ std::string aarch64_get_extension_string_for_isa_flags (uint64_t, uint64_t);\n extern void aarch64_d_target_versions (void);\n extern void aarch64_d_register_target_info (void);\n \n-/* In aarch64-rust.cc  */\n-extern void aarch64_rust_target_cpu_info (void);\n-\n rtl_opt_pass *make_pass_fma_steering (gcc::context *);\n rtl_opt_pass *make_pass_track_speculation (gcc::context *);\n rtl_opt_pass *make_pass_tag_collision_avoidance (gcc::context *);"}, {"sha": "4b127d8d3422e996adda05af3176be38d40d9b62", "filename": "gcc/config/aarch64/aarch64-vxworks.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Faarch64%2Faarch64-vxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Faarch64%2Faarch64-vxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-vxworks.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -55,14 +55,6 @@ along with GCC; see the file COPYING3.  If not see\n     VXWORKS_OS_CPP_BUILTINS ();\t\t  \\\n   } while (0)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in aarch64-vxworks.h - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t  \\\n-  do {\t\t\t\t\t  \\\n-    VXWORKS_TARGET_RUST_OS_INFO ();\t\t  \\\n-  } while (0)\n-\n /* Static stack checking is supported.  */\n #define STACK_CHECK_STATIC_BUILTIN 1\n "}, {"sha": "dddf133cc4ae81b7eba13c4882a70485f8b31c0d", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -30,9 +30,6 @@\n #define TARGET_D_CPU_VERSIONS aarch64_d_target_versions\n #define TARGET_D_REGISTER_CPU_TARGET_INFO aarch64_d_register_target_info\n \n-/* Target CPU info for Rust.  */\n-#define TARGET_RUST_CPU_INFO aarch64_rust_target_cpu_info\n-\n \f\n \n #define REGISTER_TARGET_PRAGMAS() aarch64_register_pragmas ()"}, {"sha": "b572161f4e6931caf1cb8241a76a982ddf565e30", "filename": "gcc/config/aarch64/rtems.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Faarch64%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Faarch64%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Frtems.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -31,16 +31,3 @@\n \tbuiltin_define (\"__USE_INIT_FINI__\");\t\\\n \tbuiltin_assert (\"system=rtems\");\t\\\n     } while (0)\n-\n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in rtems.h (aarch64) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\\\n-    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n-    /*everything is subject to change, especially target_env and target_family*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n-    builtin_rust_info (\"target_os\", \"rtems\");\t\t\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n-  } while (0)"}, {"sha": "75b463d2f032f42989170a6fdcea5728de224f10", "filename": "gcc/config/aarch64/t-aarch64", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Faarch64%2Ft-aarch64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Faarch64%2Ft-aarch64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Ft-aarch64?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -118,10 +118,6 @@ aarch64-d.o: $(srcdir)/config/aarch64/aarch64-d.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n-aarch64-rust.o: $(srcdir)/config/aarch64/aarch64-rust.cc\n-\t$(COMPILE) $<\n-\t$(POSTCOMPILE)\n-\n PASSES_EXTRA += $(srcdir)/config/aarch64/aarch64-passes.def\n \n cortex-a57-fma-steering.o: $(srcdir)/config/aarch64/cortex-a57-fma-steering.cc \\"}, {"sha": "0c832bf039c5510494e79b0def7a06c116e92c30", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -112,9 +112,6 @@ extern bool some_small_symbolic_operand_int (rtx);\n extern int tls_symbolic_operand_1 (rtx, int, int);\n extern rtx resolve_reload_operand (rtx);\n \n-/* Declare functions in alpha-rust.cc  */\n-extern void alpha_rust_target_cpu_info (void);\n-\n namespace gcc { class context; }\n class rtl_opt_pass;\n "}, {"sha": "c01353a3bf29ea16cf519994ea1b7596ed95a1a9", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -94,9 +94,6 @@ along with GCC; see the file COPYING3.  If not see\n   while (0)\n #endif\n \n-/* Target CPU info for Rust.  */\n-#define TARGET_RUST_CPU_INFO alpha_rust_target_cpu_info\n-\n /* Run-time compilation parameters selecting different hardware subsets.  */\n \n /* Which processor to schedule for. The cpu attribute defines a list that"}, {"sha": "9ab501c261693e6cbae2ec102567bd991585f390", "filename": "gcc/config/alpha/linux.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Falpha%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Falpha%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Flinux.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -33,14 +33,6 @@ along with GCC; see the file COPYING3.  If not see\n \t  builtin_define (\"_GNU_SOURCE\");\t\t\t\\\n     } while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\t\t\\\n-  do {\t\t\t\t\\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n-    builtin_rust_info (\"target_os\", \"linux\");\t\t\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n-    builtin_rust_info (\"target_env\", \"gnu\");\t\t\t\\\n-  } while (0)\n-\n #undef LIB_SPEC\n #define LIB_SPEC \\\n   \"%{pthread:-lpthread} \\"}, {"sha": "10c969045b9cdebadc1fa6d02e16578c53d2a175", "filename": "gcc/config/alpha/netbsd.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Falpha%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Falpha%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fnetbsd.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -23,10 +23,6 @@ along with GCC; see the file COPYING3.  If not see\n \tNETBSD_OS_CPP_BUILTINS_ELF();\t\t\\\n     } while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t \t\\\n-  do {\t\t\t\t\t\\\n-    NETBSD_TARGET_RUST_OS_INFO();\t\\\n-  } while (0)\n \n /* NetBSD doesn't use the LANGUAGE* built-ins.  */\n #undef SUBTARGET_LANGUAGE_CPP_BUILTINS"}, {"sha": "d7a6535994c92db2c7ac55894a0b66b0065b8533", "filename": "gcc/config/alpha/openbsd.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Falpha%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Falpha%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fopenbsd.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -48,11 +48,6 @@ along with GCC; see the file COPYING3.  If not see\n \tOPENBSD_OS_CPP_BUILTINS_LP64();\t\t\\\n     } while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    OPENBSD_TARGET_RUST_OS_INFO();\t\\\n-  } while (0)\n-\n /* Layout of source language data types.  */\n \n /* This must agree with <machine/_types.h> */"}, {"sha": "7549010469debd8dd26f2e2a2eabebb337478c82", "filename": "gcc/config/alpha/t-alpha", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Falpha%2Ft-alpha", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Falpha%2Ft-alpha", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Ft-alpha?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -17,7 +17,3 @@\n # <http://www.gnu.org/licenses/>.\n \n PASSES_EXTRA += $(srcdir)/config/alpha/alpha-passes.def\n-\n-alpha-rust.o: $(srcdir)/config/alpha/alpha-rust.cc\n-\t$(COMPILE) $<\n-\t$(POSTCOMPILE)"}, {"sha": "0ae5aed419143f4e2d6627eeab94195e74f1e126", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -41,9 +41,6 @@ along with GCC; see the file COPYING3.  If not see\n         builtin_define (\"__IEEE_FLOAT\");\t\\\n     } while (0)\n \n-#define SUBTARGET_RUST_OS_INFO()\t\t\\\n-  do {} while (0)\n-\n #undef PCC_STATIC_STRUCT_RETURN\n \n #define MAX_OFILE_ALIGNMENT 524288  /* 8 x 2^16 by DEC Ada Test CD40VRA */"}, {"sha": "db542f04ae5edae8b389d2f884050f891abc57ef", "filename": "gcc/config/arc/arc-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farc%2Farc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farc%2Farc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-protos.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -108,8 +108,5 @@ extern bool arc_is_jli_call_p (rtx);\n extern void arc_file_end (void);\n extern bool arc_is_secure_call_p (rtx);\n \n-/* Declare functions in arc-rust.cc  */\n-extern void arc_rust_target_cpu_info (void);\n-\n rtl_opt_pass * make_pass_arc_ifcvt (gcc::context *ctxt);\n rtl_opt_pass * make_pass_arc_predicate_delay_insns (gcc::context *ctxt);"}, {"sha": "539a1662084777a3ae5ebdce5f79a235e4f37504", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -52,9 +52,6 @@ along with GCC; see the file COPYING3.  If not see\n /* Names to predefine in the preprocessor for this target machine.  */\n #define TARGET_CPU_CPP_BUILTINS() arc_cpu_cpp_builtins (pfile)\n \n-/* CPU info for Rust for this target machine.  */\n-#define TARGET_RUST_CPU_INFO arc_rust_target_cpu_info\n-\n /* Macros enabled by specific command line option.  FIXME: to be\n    deprecatd.  */\n #define CPP_SPEC \"\\"}, {"sha": "0f1ff055be757ad1483910fc4918e7fef7fe4d5e", "filename": "gcc/config/arc/linux.h", "status": "modified", "additions": 30, "deletions": 41, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Flinux.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -22,30 +22,21 @@ along with GCC; see the file COPYING3.  If not see\n #undef DWARF2_UNWIND_INFO\n #define DWARF2_UNWIND_INFO 1\n \n-#define TARGET_OS_CPP_BUILTINS()                                               \\\n-  do                                                                           \\\n-    {                                                                          \\\n-      GNU_USER_TARGET_OS_CPP_BUILTINS ();                                      \\\n-    }                                                                          \\\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      GNU_USER_TARGET_OS_CPP_BUILTINS ();\t\\\n+    }\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()                                                  \\\n-  do                                                                           \\\n-    {                                                                          \\\n-      GNU_USER_TARGET_RUST_OS_INFO ();                                         \\\n-      /*TODO: does this properly register 'linux' as 'target_os'?*/            \\\n-    }                                                                          \\\n-  while (0)\n-\n-#define GLIBC_DYNAMIC_LINKER                                                   \\\n+#define GLIBC_DYNAMIC_LINKER\t\t\t\t\t\\\n   \"/lib/ld-linux-arc%{mbig-endian:eb}%{mcpu=arc700:700}.so.2\"\n-#define UCLIBC_DYNAMIC_LINKER \"/lib/ld-uClibc.so.0\"\n+#define UCLIBC_DYNAMIC_LINKER  \"/lib/ld-uClibc.so.0\"\n \n /* Note that the default is to link against dynamic libraries, if they are\n    available.  Override with -static.  */\n #undef LINK_SPEC\n-#define LINK_SPEC                                                              \\\n-  \"%{h*} \\\n+#define LINK_SPEC \"%{h*} \\\n   %{static:-Bstatic} \\\n   %{shared:-shared} \\\n   %{symbolic:-Bsymbolic} \\\n@@ -58,15 +49,15 @@ along with GCC; see the file COPYING3.  If not see\n   %{mcpu=nps400:-marclinux_nps; :-marclinux}\"\n \n #undef STARTFILE_SPEC\n-#define STARTFILE_SPEC                                                         \\\n+#define STARTFILE_SPEC\t\t\t\t\t\t\t\\\n   LINUX_OR_ANDROID_LD (GNU_USER_TARGET_STARTFILE_SPEC, ANDROID_STARTFILE_SPEC)\n \n #undef ENDFILE_SPEC\n-#define ENDFILE_SPEC                                                           \\\n+#define ENDFILE_SPEC\t\t\t\t\t\t\t\\\n   LINUX_OR_ANDROID_LD (GNU_USER_TARGET_ENDFILE_SPEC, ANDROID_ENDFILE_SPEC)\n \n #undef LIB_SPEC\n-#define LIB_SPEC                                                               \\\n+#define LIB_SPEC  \\\n   \"%{pthread:-lpthread} \\\n    %{shared:-lc} \\\n    %{!shared:%{profile:-lc_p}%{!profile:-lc}}\"\n@@ -84,15 +75,14 @@ along with GCC; see the file COPYING3.  If not see\n \n /* We do not have any MULTILIB_OPTIONS specified, so there are no\n    MULTILIB_DEFAULTS.  */\n-#undef MULTILIB_DEFAULTS\n+#undef  MULTILIB_DEFAULTS\n \n /* Linux toolchains use r25 as the thread pointer register.  */\n #undef TARGET_ARC_TP_REGNO_DEFAULT\n #define TARGET_ARC_TP_REGNO_DEFAULT 25\n \n #undef SUBTARGET_CPP_SPEC\n-#define SUBTARGET_CPP_SPEC                                                     \\\n-  \"\\\n+#define SUBTARGET_CPP_SPEC \"\\\n    %{pthread:-D_REENTRANT} \\\n \"\n \n@@ -113,8 +103,7 @@ along with GCC; see the file COPYING3.  If not see\n #endif\n \n #undef SUBTARGET_CPP_SPEC\n-#define SUBTARGET_CPP_SPEC                                                     \\\n-  \"\\\n+#define SUBTARGET_CPP_SPEC \"\\\n    %{pthread:-D_REENTRANT} \\\n \"\n \n@@ -125,25 +114,25 @@ along with GCC; see the file COPYING3.  If not see\n /* Clear the instruction cache from `beg' to `end'.  This makes an\n    inline system call to SYS_cacheflush.  */\n #undef CLEAR_INSN_CACHE\n-#define CLEAR_INSN_CACHE(beg, end)                                             \\\n-  {                                                                            \\\n-    register unsigned long _beg __asm(\"r0\") = (unsigned long) (beg);           \\\n-    register unsigned long _end __asm(\"r1\") = (unsigned long) (end);           \\\n-    register unsigned long _xtr __asm(\"r2\") = 0;                               \\\n-    register unsigned long _scno __asm(\"r8\") = 244;                            \\\n-    __asm __volatile(\"trap_s 0\t\t; sys_cache_sync\"                              \\\n-\t\t     : \"=r\"(_beg)                                              \\\n-\t\t     : \"0\"(_beg), \"r\"(_end), \"r\"(_xtr), \"r\"(_scno));           \\\n-  }\n+#define CLEAR_INSN_CACHE(beg, end)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  register unsigned long _beg __asm (\"r0\") = (unsigned long) (beg);\t\\\n+  register unsigned long _end __asm (\"r1\") = (unsigned long) (end);\t\\\n+  register unsigned long _xtr __asm (\"r2\") = 0;\t\t\t\t\\\n+  register unsigned long _scno __asm (\"r8\") = 244;\t\t\t\\\n+  __asm __volatile (\"trap_s 0\t\t; sys_cache_sync\"\t\t\\\n+\t\t    : \"=r\" (_beg)\t\t\t\t\t\\\n+\t\t    : \"0\" (_beg), \"r\" (_end), \"r\" (_xtr), \"r\" (_scno));\t\\\n+}\n \n /* Emit rtl for profiling.  Output assembler code to FILE\n    to call \"_mcount\" for profiling a function entry.  */\n-#define PROFILE_HOOK(LABEL)                                                    \\\n-  {                                                                            \\\n-    rtx fun, rt;                                                               \\\n-    rt = get_hard_reg_initial_val (Pmode, RETURN_ADDR_REGNUM);                 \\\n-    fun = gen_rtx_SYMBOL_REF (Pmode, \"_mcount\");                               \\\n-    emit_library_call (fun, LCT_NORMAL, VOIDmode, rt, Pmode);                  \\\n+#define PROFILE_HOOK(LABEL)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+   rtx fun, rt;\t\t\t\t\t\t\t\\\n+   rt = get_hard_reg_initial_val (Pmode, RETURN_ADDR_REGNUM);\t\\\n+   fun = gen_rtx_SYMBOL_REF (Pmode, \"_mcount\");\t\t\t\\\n+   emit_library_call (fun, LCT_NORMAL, VOIDmode, rt, Pmode);\t\\\n   }\n \n /* Enter/Leave ops are default off for linux targets.  */"}, {"sha": "9af2d2f3910a93d5217a12fdaa5aec0f8c01f65d", "filename": "gcc/config/arc/t-arc", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farc%2Ft-arc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farc%2Ft-arc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Ft-arc?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -28,11 +28,6 @@ $(TREE_H) $(TM_H) $(TM_P_H) coretypes.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(srcdir)/config/arc/arc-c.cc\n \n-arc-rust.o: $(srcdir)/config/arc/arc-rust.cc $(CONFIG_H) $(SYSTEM_H) \\\n-$(TREE_H) $(TM_H) $(TM_P_H) coretypes.h\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/arc/arc-rust.cc\n-\n #Run `arc-cpus` if you changed something in arc-cpus.def\n \n .PHONY: arc-cpus"}, {"sha": "cd55a9f6ca54f4ea4d0acd2731a6cf8a0d80bf0b", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -403,9 +403,6 @@ extern void arm_cpu_cpp_builtins (struct cpp_reader *);\n extern void arm_d_target_versions (void);\n extern void arm_d_register_target_info (void);\n \n-/* Defined in arm-rust.cc  */\n-extern void arm_rust_target_cpu_info (void);\n-\n extern bool arm_is_constant_pool_ref (rtx);\n \n /* The bits in this mask specify which instruction scheduling options should"}, {"sha": "f52724d01ad039b042239404959c86eafea045b8", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -51,9 +51,6 @@ extern char arm_arch_name[];\n #define TARGET_D_CPU_VERSIONS arm_d_target_versions\n #define TARGET_D_REGISTER_CPU_TARGET_INFO arm_d_register_target_info\n \n-/* Target CPU info for Rust.  */\n-#define TARGET_RUST_CPU_INFO arm_rust_target_cpu_info\n-\n #include \"config/arm/arm-opts.h\"\n \n /* The processor for which instructions should be scheduled.  */"}, {"sha": "70984ddd147af7817b33d60c942830cb23a1fcae", "filename": "gcc/config/arm/bpabi.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farm%2Fbpabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farm%2Fbpabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fbpabi.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -104,16 +104,6 @@\n #define TARGET_OS_CPP_BUILTINS() \\\n   TARGET_BPABI_CPP_BUILTINS()\n \n-#define BPABI_TARGET_RUST_OS_INFO() \\\n-  do { \\\n-    /*TODO: is this even an OS? What should go here?*/ \\\n-  } while (0)\n-\n-/* Override less-specific arm/linux-elf.h definition. */\n-#undef TARGET_RUST_OS_INFO\n-#define TARGET_RUST_OS_INFO() \\\n-  BPABI_TARGET_RUST_OS_INFO()\n-\n /* The BPABI specifies the use of .{init,fini}_array.  Therefore, we\n    do not want GCC to put anything into the .{init,fini} sections.  */\n #undef INIT_SECTION_ASM_OP"}, {"sha": "2bd0dc97df31db3ca8e4b8819573ac8ece860f0c", "filename": "gcc/config/arm/freebsd.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farm%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farm%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffreebsd.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -83,15 +83,6 @@\n     }\t\t\t\t\t\t\\\n   while (false)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in freebsd.h (arm) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO() \t\t\\\n-  do {\t\t\t\t\t\t\\\n-    FBSD_TARGET_RUST_OS_INFO ();\t\t\\\n-    BPABI_TARGET_RUST_OS_INFO ();\t\t\\\n-  } while (0)\n-\n /* We default to a soft-float ABI so that binaries can run on all\n    target hardware.  */\n #undef TARGET_DEFAULT_FLOAT_ABI"}, {"sha": "50cc0bc6d08c27628be352ddbb6e5725f7665215", "filename": "gcc/config/arm/linux-eabi.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farm%2Flinux-eabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farm%2Flinux-eabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-eabi.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -33,14 +33,6 @@\n #define EXTRA_TARGET_D_OS_VERSIONS()\t\t\\\n   ANDROID_TARGET_D_OS_VERSIONS();\n \n-#define EXTRA_TARGET_RUST_OS_INFO()\t\t\\\n-  do { \t\t\t\t\t\t\\\n-    BPABI_TARGET_RUST_OS_INFO();\t\t\\\n-    GNU_USER_TARGET_RUST_OS_INFO();\t\t\\\n-    ANDROID_TARGET_RUST_OS_INFO();\t\t\\\n-    /*TODO: ensure that this makes target_os 'linux' properly and stuff*/ \\\n-  while (0)\n-\n /* We default to a soft-float ABI so that binaries can run on all\n    target hardware.  If you override this to use the hard-float ABI then\n    change the setting of GLIBC_DYNAMIC_LINKER_DEFAULT as well.  */"}, {"sha": "df3da67c4f02efd942dc5f83c383515456d16f54", "filename": "gcc/config/arm/linux-elf.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farm%2Flinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farm%2Flinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-elf.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -83,11 +83,6 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\\\n-   do {\t\t\t\t\t\t\\\n-\t   GNU_USER_TARGET_RUST_OS_INFO();\t\\\n-   } while (0)\n-\n /* Call the function profiler with a given profile label.  */\n #undef  ARM_FUNCTION_PROFILER\n #define ARM_FUNCTION_PROFILER(STREAM, LABELNO)  \t\t\t\\"}, {"sha": "c85fcd3e38576da7dbbf91b62f2b99e2466b2c4d", "filename": "gcc/config/arm/netbsd-eabi.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farm%2Fnetbsd-eabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farm%2Fnetbsd-eabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fnetbsd-eabi.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -64,16 +64,6 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in netbsd-eabi.h (arm) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-  \tif (TARGET_AAPCS_BASED)\t\t\t\\\n-      BPABI_TARGET_RUST_OS_INFO();\t\t\\\n-    NETBSD_TARGET_RUST_OS_INFO();\t\t\\\n-  } while (0)\n-\n #undef SUBTARGET_CPP_SPEC\n #define SUBTARGET_CPP_SPEC NETBSD_CPP_SPEC\n "}, {"sha": "d239c734c5c50e5c5e50cba042608540f3ade165", "filename": "gcc/config/arm/netbsd-elf.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farm%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farm%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fnetbsd-elf.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -51,14 +51,6 @@\n     }\t\t\t\t\t\\\n   while (0)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in netbsd-elf.h (arm) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\\\n-  do {\t\t\t\t\t\\\n-    NETBSD_TARGET_RUST_OS_INFO();\t\\\n-  } while (0)\n-\n #undef SUBTARGET_CPP_SPEC\n #define SUBTARGET_CPP_SPEC NETBSD_CPP_SPEC\n "}, {"sha": "a569343451adad205c3bedb682ebf90d103dae21", "filename": "gcc/config/arm/rtems.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farm%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farm%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Frtems.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -33,18 +33,4 @@\n \tTARGET_BPABI_CPP_BUILTINS();    \t\\\n     } while (0)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in rtems.h (arm) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\\\n-    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n-    /*everything is subject to change, especially target_env and target_family - TODO*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\\\n-    builtin_rust_info (\"target_os\", \"rtems\");\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\\\n-    BPABI_TARGET_RUST_OS_INFO();\t\\\n-  } while (0)\n-\n #define ARM_DEFAULT_SHORT_ENUMS false"}, {"sha": "7df39170180ab00e83b1dd2409e19443f81c32ee", "filename": "gcc/config/arm/symbian.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farm%2Fsymbian.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farm%2Fsymbian.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fsymbian.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -78,21 +78,6 @@\n     }\t\t\t\t\t\t\t\t\\\n   while (false)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in symbian.h (arm) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\\\n-    /*note: as far as I know, rustc has no supported for symbian, so this is just guessed*/ \\\n-    /*everything is subject to change, especially target_env and target_vendor - TODO*/ \\\n-    /*some triple examples i've seen are \"arm-nokia-symbian-eabi\" and possibly \"arm-none-symbian-elf\"*/ \\\n-    builtin_rust_info (\"target_family\", \"\");\t\\\n-    builtin_rust_info (\"target_os\", \"symbian\");\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\\\n-    BPABI_TARGET_RUST_OS_INFO();\t\\\n-  } while (0)\n-\n /* On SymbianOS, these sections are not writable, so we use \"a\",\n    rather than \"aw\", for the section attributes.  */\n #undef ARM_EABI_CTORS_SECTION_OP"}, {"sha": "041cc6ec0459f130cf00bcbc41ec76263b5f65c7", "filename": "gcc/config/arm/t-arm", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farm%2Ft-arm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farm%2Ft-arm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -172,10 +172,6 @@ arm-d.o: $(srcdir)/config/arm/arm-d.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n-arm-rust.o: $(srcdir)/config/arm/arm-rust.cc\n-\t$(COMPILE) $<\n-\t$(POSTCOMPILE)\n-\n arm-common.o: arm-cpu-cdata.h\n \n driver-arm.o: arm-native.h"}, {"sha": "362d2b5ebd8a1759ad1e9d5752e166b6caa1f3d4", "filename": "gcc/config/arm/uclinux-eabi.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farm%2Fuclinux-eabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farm%2Fuclinux-eabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fuclinux-eabi.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -46,19 +46,6 @@\n     }\t\t\t\t\t\t\\\n   while (false)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in uclinux-eabi.h (arm) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\\\n-    BPABI_TARGET_RUST_OS_INFO();\t\\\n-    /*note: as far as I know, rustc does not distinguish between uclinux and regular linux kernels*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t   \\\n-    builtin_rust_info (\"target_os\", \"linux\");\t      \\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n-    builtin_rust_info (\"target_env\", \"gnu\");\t         \\\n-  } while (0)\n-\n #undef SUBTARGET_EXTRA_LINK_SPEC\n #define SUBTARGET_EXTRA_LINK_SPEC \" -m armelf_linux_eabi -elf2flt\" \\\n   \" --pic-veneer --target2=abs\""}, {"sha": "921440d49bd1ff14ded4054a63999c43f4c1c736", "filename": "gcc/config/arm/uclinux-elf.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farm%2Fuclinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farm%2Fuclinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fuclinux-elf.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -48,18 +48,6 @@\n     }\t\t\t\t\t\t\\\n   while (false)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in uclinux-elf.h (arm) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\\\n-    /*note: as far as I know, rustc does not distinguish between uclinux and regular linux kernels*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t   \\\n-    builtin_rust_info (\"target_os\", \"linux\");\t      \\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n-    builtin_rust_info (\"target_env\", \"gnu\");\t         \\\n-  } while (0)\n-\n /* The GNU C++ standard library requires that these macros be defined.  */\n #undef CPLUSPLUS_CPP_SPEC\n #define CPLUSPLUS_CPP_SPEC \"-D_GNU_SOURCE %(cpp)\""}, {"sha": "2bcd01edc97a6deea08a59de1591478890bb1a72", "filename": "gcc/config/arm/vxworks.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farm%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Farm%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvxworks.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -75,20 +75,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n     MAYBE_TARGET_BPABI_CPP_BUILTINS ();\t\t\t\\\n   } while (0)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in vxworks.h (arm) - c++ undefines it and redefines it.\"\n-#endif\n-#ifdef BPABI_TARGET_RUST_OS_INFO\n-# define MAYBE_BPABI_TARGET_RUST_OS_INFO BPABI_TARGET_RUST_OS_INFO\n-#else\n-# define MAYBE_BPABI_TARGET_RUST_OS_INFO()\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\t\\\n-  do {\t\t\t\\\n-    VXWORKS_TARGET_RUST_OS_INFO ();\t\t\t\\\n-    MAYBE_BPABI_TARGET_RUST_OS_INFO ();\t\t\t\\\n-  } while (0)\n-\n #undef SUBTARGET_OVERRIDE_OPTIONS\n #define SUBTARGET_OVERRIDE_OPTIONS VXWORKS_OVERRIDE_OPTIONS\n "}, {"sha": "a442a81f90c3a1e0270396a9cc3722682ef6ade4", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 541, "deletions": 636, "changes": 1177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -32,221 +32,186 @@\n \n /* Predefinition in the preprocessor for this target machine */\n #ifndef TARGET_CPU_CPP_BUILTINS\n-#define TARGET_CPU_CPP_BUILTINS()                                              \\\n-  do                                                                           \\\n-    {                                                                          \\\n-      builtin_define_std (\"bfin\");                                             \\\n-      builtin_define_std (\"BFIN\");                                             \\\n-      builtin_define (\"__ADSPBLACKFIN__\");                                     \\\n-      builtin_define (\"__ADSPLPBLACKFIN__\");                                   \\\n-                                                                               \\\n-      switch (bfin_cpu_type)                                                   \\\n-\t{                                                                      \\\n-\tcase BFIN_CPU_UNKNOWN:                                                 \\\n-\t  break;                                                               \\\n-\tcase BFIN_CPU_BF512:                                                   \\\n-\t  builtin_define (\"__ADSPBF512__\");                                    \\\n-\t  builtin_define (\"__ADSPBF51x__\");                                    \\\n-\t  break;                                                               \\\n-\tcase BFIN_CPU_BF514:                                                   \\\n-\t  builtin_define (\"__ADSPBF514__\");                                    \\\n-\t  builtin_define (\"__ADSPBF51x__\");                                    \\\n-\t  break;                                                               \\\n-\tcase BFIN_CPU_BF516:                                                   \\\n-\t  builtin_define (\"__ADSPBF516__\");                                    \\\n-\t  builtin_define (\"__ADSPBF51x__\");                                    \\\n-\t  break;                                                               \\\n-\tcase BFIN_CPU_BF518:                                                   \\\n-\t  builtin_define (\"__ADSPBF518__\");                                    \\\n-\t  builtin_define (\"__ADSPBF51x__\");                                    \\\n-\t  break;                                                               \\\n-\tcase BFIN_CPU_BF522:                                                   \\\n-\t  builtin_define (\"__ADSPBF522__\");                                    \\\n-\t  builtin_define (\"__ADSPBF52x__\");                                    \\\n-\t  break;                                                               \\\n-\tcase BFIN_CPU_BF523:                                                   \\\n-\t  builtin_define (\"__ADSPBF523__\");                                    \\\n-\t  builtin_define (\"__ADSPBF52x__\");                                    \\\n-\t  break;                                                               \\\n-\tcase BFIN_CPU_BF524:                                                   \\\n-\t  builtin_define (\"__ADSPBF524__\");                                    \\\n-\t  builtin_define (\"__ADSPBF52x__\");                                    \\\n-\t  break;                                                               \\\n-\tcase BFIN_CPU_BF525:                                                   \\\n-\t  builtin_define (\"__ADSPBF525__\");                                    \\\n-\t  builtin_define (\"__ADSPBF52x__\");                                    \\\n-\t  break;                                                               \\\n-\tcase BFIN_CPU_BF526:                                                   \\\n-\t  builtin_define (\"__ADSPBF526__\");                                    \\\n-\t  builtin_define (\"__ADSPBF52x__\");                                    \\\n-\t  break;                                                               \\\n-\tcase BFIN_CPU_BF527:                                                   \\\n-\t  builtin_define (\"__ADSPBF527__\");                                    \\\n-\t  builtin_define (\"__ADSPBF52x__\");                                    \\\n-\t  break;                                                               \\\n-\tcase BFIN_CPU_BF531:                                                   \\\n-\t  builtin_define (\"__ADSPBF531__\");                                    \\\n-\t  break;                                                               \\\n-\tcase BFIN_CPU_BF532:                                                   \\\n-\t  builtin_define (\"__ADSPBF532__\");                                    \\\n-\t  break;                                                               \\\n-\tcase BFIN_CPU_BF533:                                                   \\\n-\t  builtin_define (\"__ADSPBF533__\");                                    \\\n-\t  break;                                                               \\\n-\tcase BFIN_CPU_BF534:                                                   \\\n-\t  builtin_define (\"__ADSPBF534__\");                                    \\\n-\t  break;                                                               \\\n-\tcase BFIN_CPU_BF536:                                                   \\\n-\t  builtin_define (\"__ADSPBF536__\");                                    \\\n-\t  break;                                                               \\\n-\tcase BFIN_CPU_BF537:                                                   \\\n-\t  builtin_define (\"__ADSPBF537__\");                                    \\\n-\t  break;                                                               \\\n-\tcase BFIN_CPU_BF538:                                                   \\\n-\t  builtin_define (\"__ADSPBF538__\");                                    \\\n-\t  break;                                                               \\\n-\tcase BFIN_CPU_BF539:                                                   \\\n-\t  builtin_define (\"__ADSPBF539__\");                                    \\\n-\t  break;                                                               \\\n-\tcase BFIN_CPU_BF542M:                                                  \\\n-\t  builtin_define (\"__ADSPBF542M__\");                                   \\\n-\t  /* FALLTHRU */                                                       \\\n-\tcase BFIN_CPU_BF542:                                                   \\\n-\t  builtin_define (\"__ADSPBF542__\");                                    \\\n-\t  builtin_define (\"__ADSPBF54x__\");                                    \\\n-\t  break;                                                               \\\n-\tcase BFIN_CPU_BF544M:                                                  \\\n-\t  builtin_define (\"__ADSPBF544M__\");                                   \\\n-\t  /* FALLTHRU */                                                       \\\n-\tcase BFIN_CPU_BF544:                                                   \\\n-\t  builtin_define (\"__ADSPBF544__\");                                    \\\n-\t  builtin_define (\"__ADSPBF54x__\");                                    \\\n-\t  break;                                                               \\\n-\tcase BFIN_CPU_BF547M:                                                  \\\n-\t  builtin_define (\"__ADSPBF547M__\");                                   \\\n-\t  /* FALLTHRU */                                                       \\\n-\tcase BFIN_CPU_BF547:                                                   \\\n-\t  builtin_define (\"__ADSPBF547__\");                                    \\\n-\t  builtin_define (\"__ADSPBF54x__\");                                    \\\n-\t  break;                                                               \\\n-\tcase BFIN_CPU_BF548M:                                                  \\\n-\t  builtin_define (\"__ADSPBF548M__\");                                   \\\n-\t  /* FALLTHRU */                                                       \\\n-\tcase BFIN_CPU_BF548:                                                   \\\n-\t  builtin_define (\"__ADSPBF548__\");                                    \\\n-\t  builtin_define (\"__ADSPBF54x__\");                                    \\\n-\t  break;                                                               \\\n-\tcase BFIN_CPU_BF549M:                                                  \\\n-\t  builtin_define (\"__ADSPBF549M__\");                                   \\\n-\t  /* FALLTHRU */                                                       \\\n-\tcase BFIN_CPU_BF549:                                                   \\\n-\t  builtin_define (\"__ADSPBF549__\");                                    \\\n-\t  builtin_define (\"__ADSPBF54x__\");                                    \\\n-\t  break;                                                               \\\n-\tcase BFIN_CPU_BF561:                                                   \\\n-\t  builtin_define (\"__ADSPBF561__\");                                    \\\n-\t  break;                                                               \\\n-\tcase BFIN_CPU_BF592:                                                   \\\n-\t  builtin_define (\"__ADSPBF592__\");                                    \\\n-\t  builtin_define (\"__ADSPBF59x__\");                                    \\\n-\t  break;                                                               \\\n-\t}                                                                      \\\n-                                                                               \\\n-      if (bfin_si_revision != -1)                                              \\\n-\t{                                                                      \\\n-\t  /* space of 0xnnnn and a NUL */                                      \\\n-\t  char *buf = XALLOCAVEC (char, 7);                                    \\\n-                                                                               \\\n-\t  sprintf (buf, \"0x%04x\", bfin_si_revision);                           \\\n-\t  builtin_define_with_value (\"__SILICON_REVISION__\", buf, 0);          \\\n-\t}                                                                      \\\n-                                                                               \\\n-      if (bfin_workarounds)                                                    \\\n-\tbuiltin_define (\"__WORKAROUNDS_ENABLED\");                              \\\n-      if (ENABLE_WA_SPECULATIVE_LOADS)                                         \\\n-\tbuiltin_define (\"__WORKAROUND_SPECULATIVE_LOADS\");                     \\\n-      if (ENABLE_WA_SPECULATIVE_SYNCS)                                         \\\n-\tbuiltin_define (\"__WORKAROUND_SPECULATIVE_SYNCS\");                     \\\n-      if (ENABLE_WA_INDIRECT_CALLS)                                            \\\n-\tbuiltin_define (\"__WORKAROUND_INDIRECT_CALLS\");                        \\\n-      if (ENABLE_WA_RETS)                                                      \\\n-\tbuiltin_define (\"__WORKAROUND_RETS\");                                  \\\n-                                                                               \\\n-      if (TARGET_FDPIC)                                                        \\\n-\t{                                                                      \\\n-\t  builtin_define (\"__BFIN_FDPIC__\");                                   \\\n-\t  builtin_define (\"__FDPIC__\");                                        \\\n-\t}                                                                      \\\n-      if (TARGET_ID_SHARED_LIBRARY && !TARGET_SEP_DATA)                        \\\n-\tbuiltin_define (\"__ID_SHARED_LIB__\");                                  \\\n-      if (flag_no_builtin)                                                     \\\n-\tbuiltin_define (\"__NO_BUILTIN\");                                       \\\n-      if (TARGET_MULTICORE)                                                    \\\n-\tbuiltin_define (\"__BFIN_MULTICORE\");                                   \\\n-      if (TARGET_COREA)                                                        \\\n-\tbuiltin_define (\"__BFIN_COREA\");                                       \\\n-      if (TARGET_COREB)                                                        \\\n-\tbuiltin_define (\"__BFIN_COREB\");                                       \\\n-      if (TARGET_SDRAM)                                                        \\\n-\tbuiltin_define (\"__BFIN_SDRAM\");                                       \\\n-    }                                                                          \\\n+#define TARGET_CPU_CPP_BUILTINS()\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      builtin_define_std (\"bfin\");\t\t\\\n+      builtin_define_std (\"BFIN\");\t\t\\\n+      builtin_define (\"__ADSPBLACKFIN__\");\t\\\n+      builtin_define (\"__ADSPLPBLACKFIN__\");\t\\\n+\t\t\t\t\t\t\\\n+      switch (bfin_cpu_type)\t\t\t\\\n+\t{\t\t\t\t\t\\\n+\tcase BFIN_CPU_UNKNOWN:\t\t\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF512:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF512__\");\t\\\n+\t  builtin_define (\"__ADSPBF51x__\");\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF514:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF514__\");\t\\\n+\t  builtin_define (\"__ADSPBF51x__\");\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF516:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF516__\");\t\\\n+\t  builtin_define (\"__ADSPBF51x__\");\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF518:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF518__\");\t\\\n+\t  builtin_define (\"__ADSPBF51x__\");\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF522:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF522__\");\t\\\n+\t  builtin_define (\"__ADSPBF52x__\");\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF523:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF523__\");\t\\\n+\t  builtin_define (\"__ADSPBF52x__\");\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF524:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF524__\");\t\\\n+\t  builtin_define (\"__ADSPBF52x__\");\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF525:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF525__\");\t\\\n+\t  builtin_define (\"__ADSPBF52x__\");\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF526:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF526__\");\t\\\n+\t  builtin_define (\"__ADSPBF52x__\");\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF527:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF527__\");\t\\\n+\t  builtin_define (\"__ADSPBF52x__\");\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF531:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF531__\");\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF532:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF532__\");\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF533:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF533__\");\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF534:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF534__\");\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF536:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF536__\");\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF537:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF537__\");\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF538:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF538__\");\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF539:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF539__\");\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF542M:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF542M__\");\t\\\n+\t  /* FALLTHRU */\t\t\t\\\n+\tcase BFIN_CPU_BF542:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF542__\");\t\\\n+\t  builtin_define (\"__ADSPBF54x__\");\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF544M:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF544M__\");\t\\\n+\t  /* FALLTHRU */\t\t\t\\\n+\tcase BFIN_CPU_BF544:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF544__\");\t\\\n+\t  builtin_define (\"__ADSPBF54x__\");\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF547M:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF547M__\");\t\\\n+\t  /* FALLTHRU */\t\t\t\\\n+\tcase BFIN_CPU_BF547:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF547__\");\t\\\n+\t  builtin_define (\"__ADSPBF54x__\");\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF548M:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF548M__\");\t\\\n+\t  /* FALLTHRU */\t\t\t\\\n+\tcase BFIN_CPU_BF548:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF548__\");\t\\\n+\t  builtin_define (\"__ADSPBF54x__\");\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF549M:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF549M__\");\t\\\n+\t  /* FALLTHRU */\t\t\t\\\n+\tcase BFIN_CPU_BF549:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF549__\");\t\\\n+\t  builtin_define (\"__ADSPBF54x__\");\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF561:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF561__\");\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF592:            \\\n+\t  builtin_define (\"__ADSPBF592__\"); \\\n+\t  builtin_define (\"__ADSPBF59x__\"); \\\n+\t  break;                \\\n+\t}\t\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+      if (bfin_si_revision != -1)\t\t\\\n+\t{\t\t\t\t\t\\\n+\t  /* space of 0xnnnn and a NUL */\t\\\n+\t  char *buf = XALLOCAVEC (char, 7);\t\\\n+\t\t\t\t\t\t\\\n+\t  sprintf (buf, \"0x%04x\", bfin_si_revision);\t\t\t\\\n+\t  builtin_define_with_value (\"__SILICON_REVISION__\", buf, 0);\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      if (bfin_workarounds)\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__WORKAROUNDS_ENABLED\");\t\t\t\\\n+      if (ENABLE_WA_SPECULATIVE_LOADS)\t\t\t\t\t\\\n+\tbuiltin_define (\"__WORKAROUND_SPECULATIVE_LOADS\");\t\t\\\n+      if (ENABLE_WA_SPECULATIVE_SYNCS)\t\t\t\t\t\\\n+\tbuiltin_define (\"__WORKAROUND_SPECULATIVE_SYNCS\");\t\t\\\n+      if (ENABLE_WA_INDIRECT_CALLS)\t\t\t\t\t\\\n+\tbuiltin_define (\"__WORKAROUND_INDIRECT_CALLS\");\t\t\t\\\n+      if (ENABLE_WA_RETS)\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__WORKAROUND_RETS\");\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+      if (TARGET_FDPIC)\t\t\t\t\\\n+\t{\t\t\t\t\t\\\n+\t  builtin_define (\"__BFIN_FDPIC__\");\t\\\n+\t  builtin_define (\"__FDPIC__\");\t\t\\\n+\t}\t\t\t\t\t\\\n+      if (TARGET_ID_SHARED_LIBRARY\t\t\\\n+\t  && !TARGET_SEP_DATA)\t\t\t\\\n+\tbuiltin_define (\"__ID_SHARED_LIB__\");\t\\\n+      if (flag_no_builtin)\t\t\t\\\n+\tbuiltin_define (\"__NO_BUILTIN\");\t\\\n+      if (TARGET_MULTICORE)\t\t\t\\\n+\tbuiltin_define (\"__BFIN_MULTICORE\");\t\\\n+      if (TARGET_COREA)\t\t\t\t\\\n+\tbuiltin_define (\"__BFIN_COREA\");\t\\\n+      if (TARGET_COREB)\t\t\t\t\\\n+\tbuiltin_define (\"__BFIN_COREB\");\t\\\n+      if (TARGET_SDRAM)\t\t\t\t\\\n+\tbuiltin_define (\"__BFIN_SDRAM\");\t\\\n+    }\t\t\t\t\t\t\\\n   while (0)\n #endif\n \n-/* Rust target CPU info for this machine. Could not add new compilation unit\n- without significant modification to target, so included as macro instead. */\n-#define TARGET_RUST_CPU_INFO()                                                 \\\n-  do                                                                           \\\n-    {                                                                          \\\n-      rust_add_target_info (\"target_arch\", \"bfin\");                            \\\n-      /* TODO maybe add other features? based on old llvm so ones missing */   \\\n-      if (TARGET_SDRAM)                                                        \\\n-\trust_add_target_info (\"target_feature\", \"sdram\");                      \\\n-      if (TARGET_ICPLB)                                                        \\\n-\trust_add_target_info (\"target_feature\", \"icplb\");                      \\\n-      if (ENABLE_WA_05000074)                                                  \\\n-\trust_add_target_info (\"target_feature\", \"mi-shift-anomaly\");           \\\n-      if (ENABLE_WA_SPECULATIVE_SYNCS)                                         \\\n-\trust_add_target_info (\"target_feature\", \"csync-anomaly\");              \\\n-      if (ENABLE_WA_SPECULATIVE_LOADS)                                         \\\n-\trust_add_target_info (\"target_feature\", \"specld-anomaly\");             \\\n-      if (ENABLE_WA_05000257)                                                  \\\n-\trust_add_target_info (\"target_feature\", \"hwloop-anomaly\");             \\\n-      if (ENABLE_WA_05000283)                                                  \\\n-\trust_add_target_info (\"target_feature\", \"mmr-stall-anomaly\");          \\\n-      if (ENABLE_WA_LOAD_LCREGS)                                               \\\n-\trust_add_target_info (\"target_feature\", \"lcregs-anomaly\");             \\\n-      if (ENABLE_WA_05000315)                                                  \\\n-\trust_add_target_info (\"target_feature\", \"killed-mmr-anomaly\");         \\\n-      if (ENABLE_WA_RETS)                                                      \\\n-\trust_add_target_info (\"target_feature\", \"rets-anomaly\");               \\\n-      if (ENABLE_WA_INDIRECT_CALLS)                                            \\\n-\trust_add_target_info (\"target_feature\", \"ind-call-anomaly\");           \\\n-    }                                                                          \\\n-  while (0)\n-\n-#define DRIVER_SELF_SPECS                                                      \\\n-  SUBTARGET_DRIVER_SELF_SPECS \"\\\n+#define DRIVER_SELF_SPECS SUBTARGET_DRIVER_SELF_SPECS\t\"\\\n  %{mleaf-id-shared-library:%{!mid-shared-library:-mid-shared-library}} \\\n  %{mfdpic:%{!fpic:%{!fpie:%{!fPIC:%{!fPIE:\\\n    \t    %{!fno-pic:%{!fno-pie:%{!fno-PIC:%{!fno-PIE:-fpie}}}}}}}}} \\\n \"\n #ifndef SUBTARGET_DRIVER_SELF_SPECS\n-#define SUBTARGET_DRIVER_SELF_SPECS\n+# define SUBTARGET_DRIVER_SELF_SPECS\n #endif\n \n-#define LINK_GCC_C_SEQUENCE_SPEC                                               \\\n-  \"\\\n+#define LINK_GCC_C_SEQUENCE_SPEC \"\\\n   %{mfast-fp:-lbffastfp} %G %{!nolibc:%L} %{mfast-fp:-lbffastfp} %G \\\n \"\n \n-#undef ASM_SPEC\n-#define ASM_SPEC                                                               \\\n-  \"\\\n+#undef  ASM_SPEC\n+#define ASM_SPEC \"\\\n     %{mno-fdpic:-mnopic} %{mfdpic}\"\n \n-#define LINK_SPEC                                                              \\\n-  \"\\\n+#define LINK_SPEC \"\\\n %{h*} %{v:-V} \\\n %{mfdpic:-melf32bfinfd -z text} \\\n %{static:-dn -Bstatic} \\\n@@ -255,7 +220,7 @@\n -init __init -fini __fini \"\n \n /* Generate DSP instructions, like DSP halfword loads */\n-#define TARGET_DSP (1)\n+#define TARGET_DSP\t\t\t(1)\n \n #define TARGET_DEFAULT 0\n \n@@ -264,8 +229,8 @@\n \n extern const char *bfin_library_id_string;\n \n-#define FUNCTION_MODE SImode\n-#define Pmode SImode\n+#define FUNCTION_MODE    SImode\n+#define Pmode            SImode\n \n /* store-condition-codes instructions store 0 for false\n    This is the value stored for true.  */\n@@ -308,7 +273,7 @@ extern const char *bfin_library_id_string;\n \n #define FDPIC_FPTR_REGNO REG_P1\n #define FDPIC_REGNO REG_P3\n-#define OUR_FDPIC_REG get_hard_reg_initial_val (SImode, FDPIC_REGNO)\n+#define OUR_FDPIC_REG\tget_hard_reg_initial_val (SImode, FDPIC_REGNO)\n \n /* A static chain register for nested functions.  We need to use a\n    call-clobbered register for this.  */\n@@ -330,10 +295,10 @@ extern const char *bfin_library_id_string;\n /* Define this if the above stack space is to be considered part of the\n  * space allocated by the caller.  */\n #define OUTGOING_REG_PARM_STACK_SPACE(FNTYPE) 1\n-\n+\t  \n /* Define this if the maximum size of all the outgoing args is to be\n    accumulated and pushed during the prologue.  The amount can be\n-   found in the variable crtl->outgoing_args_size. */\n+   found in the variable crtl->outgoing_args_size. */ \n #define ACCUMULATE_OUTGOING_ARGS 1\n \n /*#define DATA_ALIGNMENT(TYPE, BASIC-ALIGN) for arrays.. */\n@@ -351,7 +316,7 @@ extern const char *bfin_library_id_string;\n #define LOCAL_ALIGNMENT(TYPE, ALIGN) bfin_local_alignment ((TYPE), (ALIGN))\n \n #define TRAMPOLINE_SIZE (TARGET_FDPIC ? 30 : 18)\n-\n+\f\n /* Definitions for register eliminations.\n \n    This is an array of structures.  Each structure initializes one pair\n@@ -365,21 +330,17 @@ extern const char *bfin_library_id_string;\n    circumstances.  The hard frame pointer is not used before reload and\n    so it is not eligible for elimination.  */\n \n-#define ELIMINABLE_REGS                                                        \\\n-  {                                                                            \\\n-    {ARG_POINTER_REGNUM, STACK_POINTER_REGNUM},                                \\\n-      {ARG_POINTER_REGNUM, FRAME_POINTER_REGNUM},                              \\\n-    {                                                                          \\\n-      FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM                               \\\n-    }                                                                          \\\n-  }\n+#define ELIMINABLE_REGS\t\t\t\t\\\n+{{ ARG_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\\\n+ { ARG_POINTER_REGNUM, FRAME_POINTER_REGNUM},\t\\\n+ { FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM}}\t\\\n \n /* Define the offset between two registers, one to be eliminated, and the other\n    its replacement, at the start of a routine.  */\n \n-#define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET)                           \\\n+#define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET) \\\n   ((OFFSET) = bfin_initial_elimination_offset ((FROM), (TO)))\n-\n+\f\n /* This processor has\n    8 data register for doing arithmetic\n    8  pointer register for doing addressing, including\n@@ -402,54 +363,50 @@ extern const char *bfin_library_id_string;\n #define IREG_P(X) (REG_P (X) && I_REGNO_P (REGNO (X)))\n #define DPREG_P(X) (REG_P (X) && DP_REGNO_P (REGNO (X)))\n \n-#define REGISTER_NAMES                                                         \\\n-  {                                                                            \\\n-    \"R0\", \"R1\", \"R2\", \"R3\", \"R4\", \"R5\", \"R6\", \"R7\", \"P0\", \"P1\", \"P2\", \"P3\",    \\\n-      \"P4\", \"P5\", \"SP\", \"FP\", \"I0\", \"I1\", \"I2\", \"I3\", \"B0\", \"B1\", \"B2\", \"B3\",  \\\n-      \"L0\", \"L1\", \"L2\", \"L3\", \"M0\", \"M1\", \"M2\", \"M3\", \"A0\", \"A1\", \"CC\",        \\\n-      \"RETS\", \"RETI\", \"RETX\", \"RETN\", \"RETE\", \"ASTAT\", \"SEQSTAT\", \"USP\",       \\\n-      \"ARGP\", \"LT0\", \"LT1\", \"LC0\", \"LC1\", \"LB0\", \"LB1\"                         \\\n-  }\n-\n-#define SHORT_REGISTER_NAMES                                                   \\\n-  {                                                                            \\\n-    \"R0.L\", \"R1.L\", \"R2.L\", \"R3.L\", \"R4.L\", \"R5.L\", \"R6.L\", \"R7.L\", \"P0.L\",    \\\n-      \"P1.L\", \"P2.L\", \"P3.L\", \"P4.L\", \"P5.L\", \"SP.L\", \"FP.L\", \"I0.L\", \"I1.L\",  \\\n-      \"I2.L\", \"I3.L\", \"B0.L\", \"B1.L\", \"B2.L\", \"B3.L\", \"L0.L\", \"L1.L\", \"L2.L\",  \\\n-      \"L3.L\", \"M0.L\", \"M1.L\", \"M2.L\", \"M3.L\",                                  \\\n-  }\n-\n-#define HIGH_REGISTER_NAMES                                                    \\\n-  {                                                                            \\\n-    \"R0.H\", \"R1.H\", \"R2.H\", \"R3.H\", \"R4.H\", \"R5.H\", \"R6.H\", \"R7.H\", \"P0.H\",    \\\n-      \"P1.H\", \"P2.H\", \"P3.H\", \"P4.H\", \"P5.H\", \"SP.H\", \"FP.H\", \"I0.H\", \"I1.H\",  \\\n-      \"I2.H\", \"I3.H\", \"B0.H\", \"B1.H\", \"B2.H\", \"B3.H\", \"L0.H\", \"L1.H\", \"L2.H\",  \\\n-      \"L3.H\", \"M0.H\", \"M1.H\", \"M2.H\", \"M3.H\",                                  \\\n-  }\n-\n-#define DREGS_PAIR_NAMES                                                       \\\n-  {                                                                            \\\n-    \"R1:0.p\", 0, \"R3:2.p\", 0, \"R5:4.p\", 0, \"R7:6.p\", 0,                        \\\n-  }\n-\n-#define BYTE_REGISTER_NAMES                                                    \\\n-  {                                                                            \\\n-    \"R0.B\", \"R1.B\", \"R2.B\", \"R3.B\", \"R4.B\", \"R5.B\", \"R6.B\", \"R7.B\",            \\\n-  }\n+#define REGISTER_NAMES { \\\n+  \"R0\", \"R1\", \"R2\", \"R3\", \"R4\", \"R5\", \"R6\", \"R7\", \\\n+  \"P0\", \"P1\", \"P2\", \"P3\", \"P4\", \"P5\", \"SP\", \"FP\", \\\n+  \"I0\", \"I1\", \"I2\", \"I3\", \"B0\", \"B1\", \"B2\", \"B3\", \\\n+  \"L0\", \"L1\", \"L2\", \"L3\", \"M0\", \"M1\", \"M2\", \"M3\", \\\n+  \"A0\", \"A1\", \\\n+  \"CC\", \\\n+  \"RETS\", \"RETI\", \"RETX\", \"RETN\", \"RETE\", \"ASTAT\", \"SEQSTAT\", \"USP\", \\\n+  \"ARGP\", \\\n+  \"LT0\", \"LT1\", \"LC0\", \"LC1\", \"LB0\", \"LB1\" \\\n+}\n+\n+#define SHORT_REGISTER_NAMES { \\\n+\t\"R0.L\",\t\"R1.L\",\t\"R2.L\",\t\"R3.L\", \"R4.L\", \"R5.L\", \"R6.L\", \"R7.L\", \\\n+\t\"P0.L\",\t\"P1.L\",\t\"P2.L\",\t\"P3.L\", \"P4.L\", \"P5.L\", \"SP.L\", \"FP.L\", \\\n+\t\"I0.L\",\t\"I1.L\", \"I2.L\",\t\"I3.L\",\t\"B0.L\",\t\"B1.L\",\t\"B2.L\",\t\"B3.L\", \\\n+\t\"L0.L\",\t\"L1.L\",\t\"L2.L\",\t\"L3.L\",\t\"M0.L\",\t\"M1.L\",\t\"M2.L\",\t\"M3.L\", }\n+\n+#define HIGH_REGISTER_NAMES { \\\n+\t\"R0.H\",\t\"R1.H\",\t\"R2.H\",\t\"R3.H\", \"R4.H\", \"R5.H\", \"R6.H\", \"R7.H\", \\\n+\t\"P0.H\",\t\"P1.H\",\t\"P2.H\",\t\"P3.H\", \"P4.H\", \"P5.H\", \"SP.H\", \"FP.H\", \\\n+\t\"I0.H\",\t\"I1.H\",\t\"I2.H\",\t\"I3.H\",\t\"B0.H\",\t\"B1.H\",\t\"B2.H\",\t\"B3.H\", \\\n+\t\"L0.H\",\t\"L1.H\",\t\"L2.H\",\t\"L3.H\",\t\"M0.H\",\t\"M1.H\",\t\"M2.H\",\t\"M3.H\", }\n+\n+#define DREGS_PAIR_NAMES { \\\n+  \"R1:0.p\", 0, \"R3:2.p\", 0, \"R5:4.p\", 0, \"R7:6.p\", 0,  }\n+\n+#define BYTE_REGISTER_NAMES { \\\n+  \"R0.B\", \"R1.B\", \"R2.B\", \"R3.B\", \"R4.B\", \"R5.B\", \"R6.B\", \"R7.B\",  }\n+\n \n /* 1 for registers that have pervasive standard uses\n    and are not available for the register allocator.  */\n \n-#define FIXED_REGISTERS                                                        \\\n-  /*r0 r1 r2 r3 r4 r5 r6 r7   p0 p1 p2 p3 p4 p5 p6 p7 */                       \\\n-  {                                                                            \\\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,                               \\\n-      0, /*i0 i1 i2 i3 b0 b1 b2 b3   l0 l1 l2 l3 m0 m1 m2 m3 */                \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0,                             \\\n-      0, /*a0 a1 cc rets/i/x/n/e     astat seqstat usp argp lt0/1 lc0/1 */     \\\n-      0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, /*lb0/1 */               \\\n-      1, 1                                                                     \\\n-  }\n+#define FIXED_REGISTERS \\\n+/*r0 r1 r2 r3 r4 r5 r6 r7   p0 p1 p2 p3 p4 p5 p6 p7 */ \\\n+{ 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 1, 0,    \\\n+/*i0 i1 i2 i3 b0 b1 b2 b3   l0 l1 l2 l3 m0 m1 m2 m3 */ \\\n+  0, 0, 0, 0, 0, 0, 0, 0,   1, 1, 1, 1, 0, 0, 0, 0,    \\\n+/*a0 a1 cc rets/i/x/n/e     astat seqstat usp argp lt0/1 lc0/1 */ \\\n+  0, 0, 0, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1,    \\\n+/*lb0/1 */ \\\n+  1, 1  \\\n+}\n \n /* 1 for registers not available across function calls.\n    These must include the FIXED_REGISTERS and also any\n@@ -458,32 +415,34 @@ extern const char *bfin_library_id_string;\n    and the register where structure-value addresses are passed.\n    Aside from that, you can include as many other registers as you like.  */\n \n-#define CALL_USED_REGISTERS                                                    \\\n-  /*r0 r1 r2 r3 r4 r5 r6 r7   p0 p1 p2 p3 p4 p5 p6 p7 */                       \\\n-  {                                                                            \\\n-    1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1,                               \\\n-      0, /*i0 i1 i2 i3 b0 b1 b2 b3   l0 l1 l2 l3 m0 m1 m2 m3 */                \\\n-      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,                             \\\n-      1, /*a0 a1 cc rets/i/x/n/e     astat seqstat usp argp lt0/1 lc0/1 */     \\\n-      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, /*lb0/1 */               \\\n-      1, 1                                                                     \\\n-  }\n+#define CALL_USED_REGISTERS \\\n+/*r0 r1 r2 r3 r4 r5 r6 r7   p0 p1 p2 p3 p4 p5 p6 p7 */ \\\n+{ 1, 1, 1, 1, 0, 0, 0, 0,   1, 1, 1, 0, 0, 0, 1, 0, \\\n+/*i0 i1 i2 i3 b0 b1 b2 b3   l0 l1 l2 l3 m0 m1 m2 m3 */ \\\n+  1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1,   \\\n+/*a0 a1 cc rets/i/x/n/e     astat seqstat usp argp lt0/1 lc0/1 */ \\\n+  1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1, \\\n+/*lb0/1 */ \\\n+  1, 1  \\\n+}\n \n /* Order in which to allocate registers.  Each register must be\n    listed once, even those in FIXED_REGISTERS.  List frame pointer\n    late and fixed registers last.  Note that, in general, we prefer\n    registers listed in CALL_USED_REGISTERS, keeping the others\n    available for storage of persistent values. */\n \n-#define REG_ALLOC_ORDER                                                        \\\n-  {                                                                            \\\n-    REG_R0, REG_R1, REG_R2, REG_R3, REG_R7, REG_R6, REG_R5, REG_R4, REG_P2,    \\\n-      REG_P1, REG_P0, REG_P5, REG_P4, REG_P3, REG_P6, REG_P7, REG_A0, REG_A1,  \\\n-      REG_I0, REG_I1, REG_I2, REG_I3, REG_B0, REG_B1, REG_B2, REG_B3, REG_L0,  \\\n-      REG_L1, REG_L2, REG_L3, REG_M0, REG_M1, REG_M2, REG_M3, REG_RETS,        \\\n-      REG_RETI, REG_RETX, REG_RETN, REG_RETE, REG_ASTAT, REG_SEQSTAT, REG_USP, \\\n-      REG_CC, REG_ARGP, REG_LT0, REG_LT1, REG_LC0, REG_LC1, REG_LB0, REG_LB1   \\\n-  }\n+#define REG_ALLOC_ORDER \\\n+{ REG_R0, REG_R1, REG_R2, REG_R3, REG_R7, REG_R6, REG_R5, REG_R4, \\\n+  REG_P2, REG_P1, REG_P0, REG_P5, REG_P4, REG_P3, REG_P6, REG_P7, \\\n+  REG_A0, REG_A1, \\\n+  REG_I0, REG_I1, REG_I2, REG_I3, REG_B0, REG_B1, REG_B2, REG_B3, \\\n+  REG_L0, REG_L1, REG_L2, REG_L3, REG_M0, REG_M1, REG_M2, REG_M3, \\\n+  REG_RETS, REG_RETI, REG_RETX, REG_RETN, REG_RETE,\t\t  \\\n+  REG_ASTAT, REG_SEQSTAT, REG_USP, \t\t\t\t  \\\n+  REG_CC, REG_ARGP,\t\t\t\t\t\t  \\\n+  REG_LT0, REG_LT1, REG_LC0, REG_LC1, REG_LB0, REG_LB1\t\t  \\\n+}\n \n /* Define the classes of registers for register constraints in the\n    machine description.  Also define ranges of constants.\n@@ -505,15 +464,15 @@ extern const char *bfin_library_id_string;\n    For any two classes, it is very desirable that there be another\n    class that represents their union. */\n \n+\n enum reg_class\n {\n   NO_REGS,\n   IREGS,\n   BREGS,\n   LREGS,\n   MREGS,\n-  CIRCREGS, /* Circular buffering registers, Ix, Bx, Lx together form.  See\n-\t       Automatic Circular Buffering.  */\n+  CIRCREGS, /* Circular buffering registers, Ix, Bx, Lx together form.  See Automatic Circular Buffering.  */\n   DAGREGS,\n   EVEN_AREGS,\n   ODD_AREGS,\n@@ -543,25 +502,52 @@ enum reg_class\n   LB_REGS,\n   PROLOGUE_REGS,\n   NON_A_CC_REGS,\n-  ALL_REGS,\n-  LIM_REG_CLASSES\n+  ALL_REGS, LIM_REG_CLASSES\n };\n \n-#define N_REG_CLASSES ((int) LIM_REG_CLASSES)\n+#define N_REG_CLASSES ((int)LIM_REG_CLASSES)\n \n #define GENERAL_REGS DPREGS\n \n /* Give names of register classes as strings for dump file.   */\n \n-#define REG_CLASS_NAMES                                                        \\\n-  {                                                                            \\\n-    \"NO_REGS\", \"IREGS\", \"BREGS\", \"LREGS\", \"MREGS\", \"CIRCREGS\", \"DAGREGS\",      \\\n-      \"EVEN_AREGS\", \"ODD_AREGS\", \"AREGS\", \"CCREGS\", \"EVEN_DREGS\", \"ODD_DREGS\", \\\n-      \"D0REGS\", \"D1REGS\", \"D2REGS\", \"D3REGS\", \"D4REGS\", \"D5REGS\", \"D6REGS\",    \\\n-      \"D7REGS\", \"DREGS\", \"P0REGS\", \"FDPIC_REGS\", \"FDPIC_FPTR_REGS\",            \\\n-      \"PREGS_CLOBBERED\", \"PREGS\", \"IPREGS\", \"DPREGS\", \"MOST_REGS\", \"LT_REGS\",  \\\n-      \"LC_REGS\", \"LB_REGS\", \"PROLOGUE_REGS\", \"NON_A_CC_REGS\", \"ALL_REGS\"       \\\n-  }\n+#define REG_CLASS_NAMES \\\n+{  \"NO_REGS\",\t\t\\\n+   \"IREGS\",\t\t\\\n+   \"BREGS\",\t\t\\\n+   \"LREGS\",\t\t\\\n+   \"MREGS\",\t\t\\\n+   \"CIRCREGS\",\t\t\\\n+   \"DAGREGS\",\t\t\\\n+   \"EVEN_AREGS\",\t\\\n+   \"ODD_AREGS\",\t\t\\\n+   \"AREGS\",\t\t\\\n+   \"CCREGS\",\t\t\\\n+   \"EVEN_DREGS\",\t\\\n+   \"ODD_DREGS\",\t\t\\\n+   \"D0REGS\",\t\t\\\n+   \"D1REGS\",\t\t\\\n+   \"D2REGS\",\t\t\\\n+   \"D3REGS\",\t\t\\\n+   \"D4REGS\",\t\t\\\n+   \"D5REGS\",\t\t\\\n+   \"D6REGS\",\t\t\\\n+   \"D7REGS\",\t\t\\\n+   \"DREGS\",\t\t\\\n+   \"P0REGS\",\t\t\\\n+   \"FDPIC_REGS\",\t\\\n+   \"FDPIC_FPTR_REGS\",\t\\\n+   \"PREGS_CLOBBERED\",\t\\\n+   \"PREGS\",\t\t\\\n+   \"IPREGS\",\t\t\\\n+   \"DPREGS\",\t\t\\\n+   \"MOST_REGS\",\t\t\\\n+   \"LT_REGS\",\t\t\\\n+   \"LC_REGS\",\t\t\\\n+   \"LB_REGS\",\t\t\\\n+   \"PROLOGUE_REGS\",\t\\\n+   \"NON_A_CC_REGS\",\t\\\n+   \"ALL_REGS\" }\n \n /* An initializer containing the contents of the register classes, as integers\n    which are bit masks.  The Nth integer specifies the contents of class N.\n@@ -577,145 +563,102 @@ enum reg_class\n /* NOTE: DSP registers, IREGS - AREGS, are not GENERAL_REGS.  We use\n    MOST_REGS as the union of DPREGS and DAGREGS.  */\n \n-#define REG_CLASS_CONTENTS                                                     \\\n-  /* 31 - 0       63-32   */                                                   \\\n-  {                                                                            \\\n-    {0x00000000, 0},\t     /* NO_REGS */                                     \\\n-      {0x000f0000, 0},\t     /* IREGS */                                       \\\n-      {0x00f00000, 0},\t     /* BREGS */                                       \\\n-      {0x0f000000, 0},\t     /* LREGS */                                       \\\n-      {0xf0000000, 0},\t     /* MREGS */                                       \\\n-      {0x0fff0000, 0},\t     /* CIRCREGS */                                    \\\n-      {0xffff0000, 0},\t     /* DAGREGS */                                     \\\n-      {0x00000000, 0x1},     /* EVEN_AREGS */                                  \\\n-      {0x00000000, 0x2},     /* ODD_AREGS */                                   \\\n-      {0x00000000, 0x3},     /* AREGS */                                       \\\n-      {0x00000000, 0x4},     /* CCREGS */                                      \\\n-      {0x00000055, 0},\t     /* EVEN_DREGS */                                  \\\n-      {0x000000aa, 0},\t     /* ODD_DREGS */                                   \\\n-      {0x00000001, 0},\t     /* D0REGS */                                      \\\n-      {0x00000002, 0},\t     /* D1REGS */                                      \\\n-      {0x00000004, 0},\t     /* D2REGS */                                      \\\n-      {0x00000008, 0},\t     /* D3REGS */                                      \\\n-      {0x00000010, 0},\t     /* D4REGS */                                      \\\n-      {0x00000020, 0},\t     /* D5REGS */                                      \\\n-      {0x00000040, 0},\t     /* D6REGS */                                      \\\n-      {0x00000080, 0},\t     /* D7REGS */                                      \\\n-      {0x000000ff, 0},\t     /* DREGS */                                       \\\n-      {0x00000100, 0x000},   /* P0REGS */                                      \\\n-      {0x00000800, 0x000},   /* FDPIC_REGS */                                  \\\n-      {0x00000200, 0x000},   /* FDPIC_FPTR_REGS */                             \\\n-      {0x00004700, 0x800},   /* PREGS_CLOBBERED */                             \\\n-      {0x0000ff00, 0x800},   /* PREGS */                                       \\\n-      {0x000fff00, 0x800},   /* IPREGS */                                      \\\n-      {0x0000ffff, 0x800},   /* DPREGS */                                      \\\n-      {0xffffffff, 0x800},   /* MOST_REGS */                                   \\\n-      {0x00000000, 0x3000},  /* LT_REGS */                                     \\\n-      {0x00000000, 0xc000},  /* LC_REGS */                                     \\\n-      {0x00000000, 0x30000}, /* LB_REGS */                                     \\\n-      {0x00000000, 0x3f7f8}, /* PROLOGUE_REGS */                               \\\n-      {0xffffffff, 0x3fff8}, /* NON_A_CC_REGS */                               \\\n-    {                                                                          \\\n-      0xffffffff, 0x3ffff                                                      \\\n-    }                                                                          \\\n-  } /* ALL_REGS */\n-\n-#define IREG_POSSIBLE_P(OUTER)                                                 \\\n-  ((OUTER) == POST_INC || (OUTER) == PRE_INC || (OUTER) == POST_DEC            \\\n-   || (OUTER) == PRE_DEC || (OUTER) == MEM || (OUTER) == ADDRESS)\n-\n-#define MODE_CODE_BASE_REG_CLASS(MODE, AS, OUTER, INDEX)                       \\\n+#define REG_CLASS_CONTENTS \\\n+    /* 31 - 0       63-32   */ \\\n+{   { 0x00000000,    0 },\t\t/* NO_REGS */\t\\\n+    { 0x000f0000,    0 },\t\t/* IREGS */\t\\\n+    { 0x00f00000,    0 },\t\t/* BREGS */\t\t\\\n+    { 0x0f000000,    0 },\t\t/* LREGS */\t\\\n+    { 0xf0000000,    0 },\t\t/* MREGS */   \\\n+    { 0x0fff0000,    0 },\t\t/* CIRCREGS */   \\\n+    { 0xffff0000,    0 },\t\t/* DAGREGS */   \\\n+    { 0x00000000,    0x1 },\t\t/* EVEN_AREGS */   \\\n+    { 0x00000000,    0x2 },\t\t/* ODD_AREGS */   \\\n+    { 0x00000000,    0x3 },\t\t/* AREGS */   \\\n+    { 0x00000000,    0x4 },\t\t/* CCREGS */  \\\n+    { 0x00000055,    0 },\t\t/* EVEN_DREGS */   \\\n+    { 0x000000aa,    0 },\t\t/* ODD_DREGS */   \\\n+    { 0x00000001,    0 },\t\t/* D0REGS */   \\\n+    { 0x00000002,    0 },\t\t/* D1REGS */   \\\n+    { 0x00000004,    0 },\t\t/* D2REGS */   \\\n+    { 0x00000008,    0 },\t\t/* D3REGS */   \\\n+    { 0x00000010,    0 },\t\t/* D4REGS */   \\\n+    { 0x00000020,    0 },\t\t/* D5REGS */   \\\n+    { 0x00000040,    0 },\t\t/* D6REGS */   \\\n+    { 0x00000080,    0 },\t\t/* D7REGS */   \\\n+    { 0x000000ff,    0 },\t\t/* DREGS */   \\\n+    { 0x00000100,    0x000 },\t\t/* P0REGS */   \\\n+    { 0x00000800,    0x000 },\t\t/* FDPIC_REGS */   \\\n+    { 0x00000200,    0x000 },\t\t/* FDPIC_FPTR_REGS */   \\\n+    { 0x00004700,    0x800 },\t\t/* PREGS_CLOBBERED */   \\\n+    { 0x0000ff00,    0x800 },\t\t/* PREGS */   \\\n+    { 0x000fff00,    0x800 },\t\t/* IPREGS */\t\\\n+    { 0x0000ffff,    0x800 },\t\t/* DPREGS */   \\\n+    { 0xffffffff,    0x800 },\t\t/* MOST_REGS */\\\n+    { 0x00000000,    0x3000 },\t\t/* LT_REGS */\\\n+    { 0x00000000,    0xc000 },\t\t/* LC_REGS */\\\n+    { 0x00000000,    0x30000 },\t\t/* LB_REGS */\\\n+    { 0x00000000,    0x3f7f8 },\t\t/* PROLOGUE_REGS */\\\n+    { 0xffffffff,    0x3fff8 },\t\t/* NON_A_CC_REGS */\\\n+    { 0xffffffff,    0x3ffff }}\t\t/* ALL_REGS */\n+\n+#define IREG_POSSIBLE_P(OUTER)\t\t\t\t     \\\n+  ((OUTER) == POST_INC || (OUTER) == PRE_INC\t\t     \\\n+   || (OUTER) == POST_DEC || (OUTER) == PRE_DEC\t\t     \\\n+   || (OUTER) == MEM || (OUTER) == ADDRESS)\n+\n+#define MODE_CODE_BASE_REG_CLASS(MODE, AS, OUTER, INDEX)\t\\\n   ((MODE) == HImode && IREG_POSSIBLE_P (OUTER) ? IPREGS : PREGS)\n \n-#define INDEX_REG_CLASS PREGS\n+#define INDEX_REG_CLASS         PREGS\n \n-#define REGNO_OK_FOR_BASE_STRICT_P(X, MODE, OUTER, INDEX)                      \\\n-  (P_REGNO_P (X) || (X) == REG_ARGP                                            \\\n-   || (IREG_POSSIBLE_P (OUTER) && (MODE) == HImode && I_REGNO_P (X)))\n+#define REGNO_OK_FOR_BASE_STRICT_P(X, MODE, OUTER, INDEX)\t\\\n+  (P_REGNO_P (X) || (X) == REG_ARGP\t\t\t\t\\\n+   || (IREG_POSSIBLE_P (OUTER) && (MODE) == HImode\t\t\\\n+       && I_REGNO_P (X)))\n \n-#define REGNO_OK_FOR_BASE_NONSTRICT_P(X, MODE, OUTER, INDEX)                   \\\n-  ((X) >= FIRST_PSEUDO_REGISTER                                                \\\n+#define REGNO_OK_FOR_BASE_NONSTRICT_P(X, MODE, OUTER, INDEX)\t\\\n+  ((X) >= FIRST_PSEUDO_REGISTER\t\t\t\t\t\\\n    || REGNO_OK_FOR_BASE_STRICT_P (X, MODE, OUTER, INDEX))\n \n #ifdef REG_OK_STRICT\n-#define REGNO_MODE_CODE_OK_FOR_BASE_P(X, MODE, AS, OUTER, INDEX)               \\\n+#define REGNO_MODE_CODE_OK_FOR_BASE_P(X, MODE, AS, OUTER, INDEX) \\\n   REGNO_OK_FOR_BASE_STRICT_P (X, MODE, OUTER, INDEX)\n #else\n-#define REGNO_MODE_CODE_OK_FOR_BASE_P(X, MODE, AS, OUTER, INDEX)               \\\n+#define REGNO_MODE_CODE_OK_FOR_BASE_P(X, MODE, AS, OUTER, INDEX) \\\n   REGNO_OK_FOR_BASE_NONSTRICT_P (X, MODE, OUTER, INDEX)\n #endif\n \n-#define REGNO_OK_FOR_INDEX_P(X) 0\n+#define REGNO_OK_FOR_INDEX_P(X)   0\n \n /* The same information, inverted:\n    Return the class number of the smallest class containing\n    reg number REGNO.  This could be a conditional expression\n    or could index an array.  */\n \n-#define REGNO_REG_CLASS(REGNO)                                                                       \\\n-  ((REGNO) == REG_R0                                                                                 \\\n-     ? D0REGS                                                                                        \\\n-     : (REGNO) == REG_R1                                                                             \\\n-\t ? D1REGS                                                                                    \\\n-\t : (REGNO) == REG_R2                                                                         \\\n-\t     ? D2REGS                                                                                \\\n-\t     : (REGNO) == REG_R3                                                                     \\\n-\t\t ? D3REGS                                                                            \\\n-\t\t : (REGNO) == REG_R4                                                                 \\\n-\t\t     ? D4REGS                                                                        \\\n-\t\t     : (REGNO) == REG_R5                                                             \\\n-\t\t\t ? D5REGS                                                                    \\\n-\t\t\t : (REGNO) == REG_R6                                                         \\\n-\t\t\t     ? D6REGS                                                                \\\n-\t\t\t     : (REGNO) == REG_R7                                                     \\\n-\t\t\t\t ? D7REGS                                                            \\\n-\t\t\t\t : (REGNO) == REG_P0                                                 \\\n-\t\t\t\t     ? P0REGS                                                        \\\n-\t\t\t\t     : (REGNO) < REG_I0                                              \\\n-\t\t\t\t\t ? PREGS                                                     \\\n-\t\t\t\t\t : (REGNO) == REG_ARGP                                       \\\n-\t\t\t\t\t     ? PREGS                                                 \\\n-\t\t\t\t\t     : (REGNO) >= REG_I0                                     \\\n-\t\t\t\t\t\t   && (REGNO) <= REG_I3                              \\\n-\t\t\t\t\t\t ? IREGS                                             \\\n-\t\t\t\t\t\t : (REGNO) >= REG_L0                                 \\\n-\t\t\t\t\t\t       && (REGNO) <= REG_L3                          \\\n-\t\t\t\t\t\t     ? LREGS                                         \\\n-\t\t\t\t\t\t     : (REGNO) >= REG_B0                             \\\n-\t\t\t\t\t\t\t   && (REGNO)                                \\\n-\t\t\t\t\t\t\t\t<= REG_B3                            \\\n-\t\t\t\t\t\t\t ? BREGS                                     \\\n-\t\t\t\t\t\t\t : (REGNO) >= REG_M0                         \\\n-\t\t\t\t\t\t\t       && (REGNO)                            \\\n-\t\t\t\t\t\t\t\t    <= REG_M3                        \\\n-\t\t\t\t\t\t\t     ? MREGS                                 \\\n-\t\t\t\t\t\t\t     : (REGNO)                               \\\n-\t\t\t\t\t\t\t\t     == REG_A0                       \\\n-\t\t\t\t\t\t\t\t   || (REGNO)                        \\\n-\t\t\t\t\t\t\t\t\t== REG_A1                    \\\n-\t\t\t\t\t\t\t\t ? AREGS                             \\\n-\t\t\t\t\t\t\t\t : (REGNO)                           \\\n-\t\t\t\t\t\t\t\t\t == REG_LT0                  \\\n-\t\t\t\t\t\t\t\t       || (REGNO)                    \\\n-\t\t\t\t\t\t\t\t\t    == REG_LT1               \\\n-\t\t\t\t\t\t\t\t     ? LT_REGS                       \\\n-\t\t\t\t\t\t\t\t     : (REGNO)                       \\\n-\t\t\t\t\t\t\t\t\t     == REG_LC0              \\\n-\t\t\t\t\t\t\t\t\t   || (REGNO)                \\\n-\t\t\t\t\t\t\t\t\t\t== REG_LC1           \\\n-\t\t\t\t\t\t\t\t\t ? LC_REGS                   \\\n-\t\t\t\t\t\t\t\t\t : (REGNO)                   \\\n-\t\t\t\t\t\t\t\t\t\t == REG_LB0          \\\n-\t\t\t\t\t\t\t\t\t       || (REGNO)            \\\n-\t\t\t\t\t\t\t\t\t\t    == REG_LB1       \\\n-\t\t\t\t\t\t\t\t\t     ? LB_REGS               \\\n-\t\t\t\t\t\t\t\t\t     : (REGNO)               \\\n-\t\t\t\t\t\t\t\t\t\t   == REG_CC         \\\n-\t\t\t\t\t\t\t\t\t\t ? CCREGS            \\\n-\t\t\t\t\t\t\t\t\t\t : (REGNO)           \\\n-\t\t\t\t\t\t\t\t\t\t       >= REG_RETS   \\\n-\t\t\t\t\t\t\t\t\t\t     ? PROLOGUE_REGS \\\n-\t\t\t\t\t\t\t\t\t\t     : NO_REGS)\n+#define REGNO_REG_CLASS(REGNO) \\\n+((REGNO) == REG_R0 ? D0REGS\t\t\t\t\\\n+ : (REGNO) == REG_R1 ? D1REGS\t\t\t\t\\\n+ : (REGNO) == REG_R2 ? D2REGS\t\t\t\t\\\n+ : (REGNO) == REG_R3 ? D3REGS\t\t\t\t\\\n+ : (REGNO) == REG_R4 ? D4REGS\t\t\t\t\\\n+ : (REGNO) == REG_R5 ? D5REGS\t\t\t\t\\\n+ : (REGNO) == REG_R6 ? D6REGS\t\t\t\t\\\n+ : (REGNO) == REG_R7 ? D7REGS\t\t\t\t\\\n+ : (REGNO) == REG_P0 ? P0REGS\t\t\t\t\\\n+ : (REGNO) < REG_I0 ? PREGS\t\t\t\t\\\n+ : (REGNO) == REG_ARGP ? PREGS\t\t\t\t\\\n+ : (REGNO) >= REG_I0 && (REGNO) <= REG_I3 ? IREGS\t\\\n+ : (REGNO) >= REG_L0 && (REGNO) <= REG_L3 ? LREGS\t\\\n+ : (REGNO) >= REG_B0 && (REGNO) <= REG_B3 ? BREGS\t\\\n+ : (REGNO) >= REG_M0 && (REGNO) <= REG_M3 ? MREGS\t\\\n+ : (REGNO) == REG_A0 || (REGNO) == REG_A1 ? AREGS\t\\\n+ : (REGNO) == REG_LT0 || (REGNO) == REG_LT1 ? LT_REGS\t\\\n+ : (REGNO) == REG_LC0 || (REGNO) == REG_LC1 ? LC_REGS\t\\\n+ : (REGNO) == REG_LB0 || (REGNO) == REG_LB1 ? LB_REGS\t\\\n+ : (REGNO) == REG_CC ? CCREGS\t\t\t\t\\\n+ : (REGNO) >= REG_RETS ? PROLOGUE_REGS\t\t\t\\\n+ : NO_REGS)\n \n /* When this hook returns true for MODE, the compiler allows\n    registers explicitly used in the rtl to be used as spill registers\n@@ -725,10 +668,9 @@ enum reg_class\n \n /* Return the maximum number of consecutive registers\n    needed to represent mode MODE in a register of class CLASS.  */\n-#define CLASS_MAX_NREGS(CLASS, MODE)                                           \\\n-  ((MODE) == V2PDImode && (CLASS) == AREGS                                     \\\n-     ? 2                                                                       \\\n-     : ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n+#define CLASS_MAX_NREGS(CLASS, MODE)\t\t\t\t\t\\\n+  ((MODE) == V2PDImode && (CLASS) == AREGS ? 2\t\t\t\t\\\n+   : ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n \n /* A C expression that is nonzero if hard register TO can be\n    considered for use as a rename register for FROM register */\n@@ -739,52 +681,41 @@ enum reg_class\n    class to use when it is necessary to copy value X into a register\n    in class CLASS.  The value is a register class; perhaps CLASS, or\n    perhaps another, smaller class.  */\n-#define PREFERRED_RELOAD_CLASS(X, CLASS)                                       \\\n-  (GET_CODE (X) == POST_INC || GET_CODE (X) == POST_DEC                        \\\n-       || GET_CODE (X) == PRE_DEC                                              \\\n-     ? PREGS                                                                   \\\n-     : (CLASS))\n+#define PREFERRED_RELOAD_CLASS(X, CLASS)\t\t\\\n+  (GET_CODE (X) == POST_INC\t\t\t\t\\\n+   || GET_CODE (X) == POST_DEC\t\t\t\t\\\n+   || GET_CODE (X) == PRE_DEC ? PREGS : (CLASS))\n \n /* Function Calling Conventions. */\n \n /* The type of the current function; normal functions are of type\n    SUBROUTINE.  */\n-typedef enum\n-{\n-  SUBROUTINE,\n-  INTERRUPT_HANDLER,\n-  EXCPT_HANDLER,\n-  NMI_HANDLER\n+typedef enum {\n+  SUBROUTINE, INTERRUPT_HANDLER, EXCPT_HANDLER, NMI_HANDLER\n } e_funkind;\n-#define FUNCTION_RETURN_REGISTERS                                              \\\n-  {                                                                            \\\n-    REG_RETS, REG_RETI, REG_RETX, REG_RETN                                     \\\n-  }\n+#define FUNCTION_RETURN_REGISTERS { REG_RETS, REG_RETI, REG_RETX, REG_RETN }\n \n-#define FUNCTION_ARG_REGISTERS                                                 \\\n-  {                                                                            \\\n-    REG_R0, REG_R1, REG_R2, -1                                                 \\\n-  }\n+#define FUNCTION_ARG_REGISTERS { REG_R0, REG_R1, REG_R2, -1 }\n \n /* Flags for the call/call_value rtl operations set up by function_arg */\n-#define CALL_NORMAL 0x00000000 /* no special processing */\n-#define CALL_LONG 0x00000001   /* always call indirect */\n-#define CALL_SHORT 0x00000002  /* always call by symbol */\n-\n-typedef struct\n-{\n-  int words;\t   /* # words passed so far */\n-  int nregs;\t   /* # registers available for passing */\n-  int *arg_regs;   /* array of register -1 terminated */\n-  int call_cookie; /* Do special things for this call */\n+#define CALL_NORMAL\t\t0x00000000\t/* no special processing */\n+#define CALL_LONG\t\t0x00000001\t/* always call indirect */\n+#define CALL_SHORT\t\t0x00000002\t/* always call by symbol */\n+\n+typedef struct {\n+  int words;\t\t\t/* # words passed so far */\n+  int nregs;\t\t\t/* # registers available for passing */\n+  int *arg_regs;\t\t/* array of register -1 terminated */\n+  int call_cookie;\t\t/* Do special things for this call */\n } CUMULATIVE_ARGS;\n \n #define FUNCTION_ARG_REGNO_P(REGNO) function_arg_regno_p (REGNO)\n \n+\n /* Initialize a variable CUM of type CUMULATIVE_ARGS\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0.  */\n-#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS)     \\\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT, N_NAMED_ARGS)\t\\\n   (init_cumulative_args (&CUM, FNTYPE, LIBNAME))\n \n /* Define how to find the value returned by a function.\n@@ -795,13 +726,14 @@ typedef struct\n \n #define VALUE_REGNO(MODE) (REG_R0)\n \n-#define FUNCTION_VALUE(VALTYPE, FUNC)                                          \\\n-  gen_rtx_REG (TYPE_MODE (VALTYPE), VALUE_REGNO (TYPE_MODE (VALTYPE)))\n+#define FUNCTION_VALUE(VALTYPE, FUNC)\t\t\\\n+  gen_rtx_REG (TYPE_MODE (VALTYPE),\t\t\\\n+\t       VALUE_REGNO(TYPE_MODE(VALTYPE)))\n \n /* Define how to find the value returned by a library function\n    assuming the value has mode MODE.  */\n \n-#define LIBCALL_VALUE(MODE) gen_rtx_REG (MODE, VALUE_REGNO (MODE))\n+#define LIBCALL_VALUE(MODE)  gen_rtx_REG (MODE, VALUE_REGNO(MODE))\n \n #define FUNCTION_VALUE_REGNO_P(N) ((N) == REG_R0)\n \n@@ -818,11 +750,11 @@ typedef struct\n #define INCOMING_FRAME_SP_OFFSET 0\n \n /* Describe how we implement __builtin_eh_return.  */\n-#define EH_RETURN_DATA_REGNO(N) ((N) < 2 ? (N) : INVALID_REGNUM)\n-#define EH_RETURN_STACKADJ_RTX gen_rtx_REG (Pmode, REG_P2)\n-#define EH_RETURN_HANDLER_RTX                                                  \\\n-  gen_frame_mem (Pmode,                                                        \\\n-\t\t plus_constant (Pmode, frame_pointer_rtx, UNITS_PER_WORD))\n+#define EH_RETURN_DATA_REGNO(N)\t((N) < 2 ? (N) : INVALID_REGNUM)\n+#define EH_RETURN_STACKADJ_RTX\tgen_rtx_REG (Pmode, REG_P2)\n+#define EH_RETURN_HANDLER_RTX \\\n+  gen_frame_mem (Pmode, plus_constant (Pmode, frame_pointer_rtx, \\\n+\t\t\t\t       UNITS_PER_WORD))\n \n /* Addressing Modes */\n \n@@ -832,12 +764,12 @@ typedef struct\n      would ever accept. */\n #define MAX_REGS_PER_ADDRESS 1\n \n-#define LEGITIMATE_MODE_FOR_AUTOINC_P(MODE)                                    \\\n-  (GET_MODE_SIZE (MODE) <= 4 || (MODE) == PDImode)\n+#define LEGITIMATE_MODE_FOR_AUTOINC_P(MODE) \\\n+      (GET_MODE_SIZE (MODE) <= 4 || (MODE) == PDImode)\n \n #define HAVE_POST_INCREMENT 1\n #define HAVE_POST_DECREMENT 1\n-#define HAVE_PRE_DECREMENT 1\n+#define HAVE_PRE_DECREMENT  1\n \n /* `LEGITIMATE_PIC_OPERAND_P (X)'\n      A C expression that is nonzero if X is a legitimate immediate\n@@ -847,11 +779,12 @@ typedef struct\n      not check it either.  You need not define this macro if all\n      constants (including `SYMBOL_REF') can be immediate operands when\n      generating position independent code. */\n-#define LEGITIMATE_PIC_OPERAND_P(X) !SYMBOLIC_CONST (X)\n+#define LEGITIMATE_PIC_OPERAND_P(X) ! SYMBOLIC_CONST (X)\n \n-#define SYMBOLIC_CONST(X)                                                      \\\n-  (GET_CODE (X) == SYMBOL_REF || GET_CODE (X) == LABEL_REF                     \\\n-   || (GET_CODE (X) == CONST && symbolic_reference_mentioned_p (X)))\n+#define SYMBOLIC_CONST(X)\t\\\n+(GET_CODE (X) == SYMBOL_REF\t\t\t\t\t\t\\\n+ || GET_CODE (X) == LABEL_REF\t\t\t\t\t\t\\\n+ || (GET_CODE (X) == CONST && symbolic_reference_mentioned_p (X)))\n \n /* Max number of bytes we can move from memory to memory\n    in one reasonably fast instruction.  */\n@@ -876,12 +809,12 @@ typedef struct\n    preferable since it may eliminate subsequent memory access if\n    subsequent accesses occur to other fields in the same word of the\n    structure, but to different bytes.  */\n-#define SLOW_BYTE_ACCESS 0\n+#define SLOW_BYTE_ACCESS  0\n #define SLOW_SHORT_ACCESS 0\n \n /* Define this if most significant bit is lowest numbered\n    in instructions that operate on numbered bit-fields. */\n-#define BITS_BIG_ENDIAN 0\n+#define BITS_BIG_ENDIAN  0\n \n /* Define this if most significant byte of a word is the lowest numbered.\n    We can't access bytes but if we could we would in the Big Endian order. */\n@@ -930,22 +863,24 @@ typedef struct\n  *  really cause some alignment problem\n  */\n \n-#define UNITS_PER_FLOAT ((FLOAT_TYPE_SIZE + BITS_PER_UNIT - 1) / BITS_PER_UNIT)\n+#define UNITS_PER_FLOAT  ((FLOAT_TYPE_SIZE  + BITS_PER_UNIT - 1) / \\\n+\t\t\t   BITS_PER_UNIT)\n+\n+#define UNITS_PER_DOUBLE ((DOUBLE_TYPE_SIZE + BITS_PER_UNIT - 1) / \\\n+ \t\t\t   BITS_PER_UNIT)\n \n-#define UNITS_PER_DOUBLE                                                       \\\n-  ((DOUBLE_TYPE_SIZE + BITS_PER_UNIT - 1) / BITS_PER_UNIT)\n \n /* what is the 'type' of size_t */\n #define SIZE_TYPE \"long unsigned int\"\n \n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 1\n #define FLOAT_TYPE_SIZE BITS_PER_WORD\n-#define SHORT_TYPE_SIZE 16\n-#define CHAR_TYPE_SIZE 8\n-#define INT_TYPE_SIZE 32\n-#define LONG_TYPE_SIZE 32\n-#define LONG_LONG_TYPE_SIZE 64\n+#define SHORT_TYPE_SIZE 16 \n+#define CHAR_TYPE_SIZE\t8\n+#define INT_TYPE_SIZE\t32\n+#define LONG_TYPE_SIZE\t32\n+#define LONG_LONG_TYPE_SIZE 64 \n \n /* Note: Fix this to depend on target switch. -- lev */\n \n@@ -956,8 +891,8 @@ typedef struct\n  * #define DOUBLES_ARE_FLOATS 1\n  */\n \n-#define DOUBLE_TYPE_SIZE 64\n-#define LONG_DOUBLE_TYPE_SIZE 64\n+#define DOUBLE_TYPE_SIZE\t64\n+#define LONG_DOUBLE_TYPE_SIZE\t64\n \n /* `PROMOTE_MODE (M, UNSIGNEDP, TYPE)'\n      A macro to update M and UNSIGNEDP when an object whose type is\n@@ -982,18 +917,18 @@ typedef struct\n \n      Do not define this macro if it would never modify M.*/\n \n-#define BFIN_PROMOTE_MODE_P(MODE)                                              \\\n-  (!TARGET_DSP && GET_MODE_CLASS (MODE) == MODE_INT                            \\\n-   && GET_MODE_SIZE (MODE) < UNITS_PER_WORD)\n-\n-#define PROMOTE_MODE(MODE, UNSIGNEDP, TYPE)                                    \\\n-  if (BFIN_PROMOTE_MODE_P (MODE))                                              \\\n-    {                                                                          \\\n-      if (MODE == QImode)                                                      \\\n-\tUNSIGNEDP = 1;                                                         \\\n-      else if (MODE == HImode)                                                 \\\n-\tUNSIGNEDP = 0;                                                         \\\n-      (MODE) = SImode;                                                         \\\n+#define BFIN_PROMOTE_MODE_P(MODE) \\\n+    (!TARGET_DSP && GET_MODE_CLASS (MODE) == MODE_INT\t\\\n+      && GET_MODE_SIZE (MODE) < UNITS_PER_WORD)\n+\n+#define PROMOTE_MODE(MODE, UNSIGNEDP, TYPE)     \\\n+  if (BFIN_PROMOTE_MODE_P(MODE))\t\t\\\n+    {                                           \\\n+      if (MODE == QImode)                       \\\n+        UNSIGNEDP = 1;                          \\\n+      else if (MODE == HImode)                  \\\n+        UNSIGNEDP = 0;      \t\t\t\\\n+      (MODE) = SImode;                          \\\n     }\n \n /* Describing Relative Costs of Operations */\n@@ -1008,191 +943,161 @@ typedef struct\n #define JUMP_TABLES_IN_TEXT_SECTION flag_pic\n \n /* Define if operations between registers always perform the operation\n-   on the full register even if a narrower mode is specified.\n+   on the full register even if a narrower mode is specified. \n #define WORD_REGISTER_OPERATIONS 1\n */\n \n /* Evaluates to true if A and B are mac flags that can be used\n    together in a single multiply insn.  That is the case if they are\n    both the same flag not involving M, or if one is a combination of\n    the other with M.  */\n-#define MACFLAGS_MATCH_P(A, B)                                                 \\\n-  ((A) == (B) || ((A) == MACFLAG_NONE && (B) == MACFLAG_M)                     \\\n-   || ((A) == MACFLAG_M && (B) == MACFLAG_NONE)                                \\\n-   || ((A) == MACFLAG_IS && (B) == MACFLAG_IS_M)                               \\\n-   || ((A) == MACFLAG_IS_M && (B) == MACFLAG_IS))\n+#define MACFLAGS_MATCH_P(A, B) \\\n+ ((A) == (B) \\\n+  || ((A) == MACFLAG_NONE && (B) == MACFLAG_M) \\\n+  || ((A) == MACFLAG_M && (B) == MACFLAG_NONE) \\\n+  || ((A) == MACFLAG_IS && (B) == MACFLAG_IS_M) \\\n+  || ((A) == MACFLAG_IS_M && (B) == MACFLAG_IS))\n \n /* Switch into a generic section.  */\n-#define TARGET_ASM_NAMED_SECTION default_elf_asm_named_section\n+#define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n \n-#define PRINT_OPERAND(FILE, RTX, CODE) print_operand (FILE, RTX, CODE)\n+#define PRINT_OPERAND(FILE, RTX, CODE)\t print_operand (FILE, RTX, CODE)\n #define PRINT_OPERAND_ADDRESS(FILE, RTX) print_address_operand (FILE, RTX)\n \n-typedef enum sections\n-{\n-  CODE_DIR,\n-  DATA_DIR,\n-  LAST_SECT_NM\n+typedef enum sections {\n+    CODE_DIR,\n+    DATA_DIR,\n+    LAST_SECT_NM\n } SECT_ENUM_T;\n \n-typedef enum directives\n-{\n-  LONG_CONST_DIR,\n-  SHORT_CONST_DIR,\n-  BYTE_CONST_DIR,\n-  SPACE_DIR,\n-  INIT_DIR,\n-  LAST_DIR_NM\n+typedef enum directives {\n+    LONG_CONST_DIR,\n+    SHORT_CONST_DIR,\n+    BYTE_CONST_DIR,\n+    SPACE_DIR,\n+    INIT_DIR,\n+    LAST_DIR_NM\n } DIR_ENUM_T;\n \n-#define IS_ASM_LOGICAL_LINE_SEPARATOR(C, STR)                                  \\\n-  ((C) == ';' || ((C) == '|' && (STR)[1] == '|'))\n+#define IS_ASM_LOGICAL_LINE_SEPARATOR(C, STR)\t\\\n+  ((C) == ';'\t\t\t\t\t\\\n+   || ((C) == '|' && (STR)[1] == '|'))\n \n #define TEXT_SECTION_ASM_OP \".text;\"\n #define DATA_SECTION_ASM_OP \".data;\"\n \n-#define ASM_APP_ON \"\"\n+#define ASM_APP_ON  \"\"\n #define ASM_APP_OFF \"\"\n \n-#define ASM_GLOBALIZE_LABEL1(FILE, NAME)                                       \\\n-  do                                                                           \\\n-    {                                                                          \\\n-      fputs (\".global \", FILE);                                                \\\n-      assemble_name (FILE, NAME);                                              \\\n-      fputc (';', FILE);                                                       \\\n-      fputc ('\\n', FILE);                                                      \\\n-    }                                                                          \\\n-  while (0)\n-\n-#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)                            \\\n-  do                                                                           \\\n-    {                                                                          \\\n-      fputs (\".type \", FILE);                                                  \\\n-      assemble_name (FILE, NAME);                                              \\\n-      fputs (\", STT_FUNC\", FILE);                                              \\\n-      fputc (';', FILE);                                                       \\\n-      fputc ('\\n', FILE);                                                      \\\n-      ASM_OUTPUT_LABEL (FILE, NAME);                                           \\\n-    }                                                                          \\\n-  while (0)\n-\n-#define ASM_OUTPUT_LABEL(FILE, NAME)                                           \\\n-  do                                                                           \\\n-    {                                                                          \\\n-      assemble_name (FILE, NAME);                                              \\\n-      fputs (\":\\n\", FILE);                                                     \\\n-    }                                                                          \\\n-  while (0)\n-\n-#define ASM_OUTPUT_LABELREF(FILE, NAME)                                        \\\n-  do                                                                           \\\n-    {                                                                          \\\n-      fprintf (FILE, \"_%s\", NAME);                                             \\\n-    }                                                                          \\\n-  while (0)\n-\n-#define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE)                                   \\\n-  do                                                                           \\\n-    {                                                                          \\\n-      char __buf[256];                                                         \\\n-      fprintf (FILE, \"\\t.dd\\t\");                                               \\\n-      ASM_GENERATE_INTERNAL_LABEL (__buf, \"L\", VALUE);                         \\\n-      assemble_name (FILE, __buf);                                             \\\n-      fputc (';', FILE);                                                       \\\n-      fputc ('\\n', FILE);                                                      \\\n-    }                                                                          \\\n-  while (0)\n-\n-#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL)                       \\\n-  MY_ASM_OUTPUT_ADDR_DIFF_ELT (FILE, VALUE, REL)\n-\n-#define MY_ASM_OUTPUT_ADDR_DIFF_ELT(FILE, VALUE, REL)                          \\\n-  do                                                                           \\\n-    {                                                                          \\\n-      char __buf[256];                                                         \\\n-      fprintf (FILE, \"\\t.dd\\t\");                                               \\\n-      ASM_GENERATE_INTERNAL_LABEL (__buf, \"L\", VALUE);                         \\\n-      assemble_name (FILE, __buf);                                             \\\n-      fputs (\" - \", FILE);                                                     \\\n-      ASM_GENERATE_INTERNAL_LABEL (__buf, \"L\", REL);                           \\\n-      assemble_name (FILE, __buf);                                             \\\n-      fputc (';', FILE);                                                       \\\n-      fputc ('\\n', FILE);                                                      \\\n-    }                                                                          \\\n-  while (0)\n-\n-#define ASM_OUTPUT_ALIGN(FILE, LOG)                                            \\\n-  do                                                                           \\\n-    {                                                                          \\\n-      if ((LOG) != 0)                                                          \\\n-\tfprintf (FILE, \"\\t.align %d\\n\", 1 << (LOG));                           \\\n-    }                                                                          \\\n-  while (0)\n-\n-#define ASM_OUTPUT_SKIP(FILE, SIZE)                                            \\\n-  do                                                                           \\\n-    {                                                                          \\\n-      asm_output_skip (FILE, SIZE);                                            \\\n-    }                                                                          \\\n-  while (0)\n-\n-#define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)                            \\\n-  do                                                                           \\\n-    {                                                                          \\\n-      switch_to_section (data_section);                                        \\\n-      if ((SIZE) >= (unsigned int) 4)                                          \\\n-\tASM_OUTPUT_ALIGN (FILE, 2);                                            \\\n-      ASM_OUTPUT_SIZE_DIRECTIVE (FILE, NAME, SIZE);                            \\\n-      ASM_OUTPUT_LABEL (FILE, NAME);                                           \\\n-      fprintf (FILE, \"%s %ld;\\n\", ASM_SPACE,                                   \\\n-\t       (ROUNDED) > (unsigned int) 1 ? (ROUNDED) : 1);                  \\\n-    }                                                                          \\\n-  while (0)\n-\n-#define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)                           \\\n-  do                                                                           \\\n-    {                                                                          \\\n-      ASM_GLOBALIZE_LABEL1 (FILE, NAME);                                       \\\n-      ASM_OUTPUT_LOCAL (FILE, NAME, SIZE, ROUNDED);                            \\\n-    }                                                                          \\\n-  while (0)\n+#define ASM_GLOBALIZE_LABEL1(FILE, NAME) \\\n+  do {  fputs (\".global \", FILE);\t\t\\\n+        assemble_name (FILE, NAME);\t        \\\n+        fputc (';',FILE);\t\t\t\\\n+        fputc ('\\n',FILE);\t\t\t\\\n+      } while (0)\n+\n+#define ASM_DECLARE_FUNCTION_NAME(FILE,NAME,DECL) \\\n+  do {\t\t\t\t\t\\\n+    fputs (\".type \", FILE);           \t\\\n+    assemble_name (FILE, NAME);         \\\n+    fputs (\", STT_FUNC\", FILE);         \\\n+    fputc (';',FILE);                   \\\n+    fputc ('\\n',FILE);\t\t\t\\\n+    ASM_OUTPUT_LABEL(FILE, NAME);\t\\\n+  } while (0)\n+\n+#define ASM_OUTPUT_LABEL(FILE, NAME)    \\\n+  do {  assemble_name (FILE, NAME);\t\t\\\n+        fputs (\":\\n\",FILE);\t\t\t\\\n+      } while (0)\n+\n+#define ASM_OUTPUT_LABELREF(FILE,NAME) \t\\\n+    do {  fprintf (FILE, \"_%s\", NAME); \\\n+        } while (0)\n+\n+#define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE)    \t\\\n+do { char __buf[256];\t\t\t\t\t\\\n+     fprintf (FILE, \"\\t.dd\\t\");\t\t\t\t\\\n+     ASM_GENERATE_INTERNAL_LABEL (__buf, \"L\", VALUE);\t\\\n+     assemble_name (FILE, __buf);\t\t\t\\\n+     fputc (';', FILE);\t\t\t\t\t\\\n+     fputc ('\\n', FILE);\t\t\t\t\\\n+   } while (0)\n+\n+#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n+    MY_ASM_OUTPUT_ADDR_DIFF_ELT(FILE, VALUE, REL)\n+\n+#define MY_ASM_OUTPUT_ADDR_DIFF_ELT(FILE, VALUE, REL)\t\t\\\n+    do {\t\t\t\t\t\t\t\\\n+\tchar __buf[256];\t\t\t\t\t\\\n+\tfprintf (FILE, \"\\t.dd\\t\");\t\t\t\t\\\n+\tASM_GENERATE_INTERNAL_LABEL (__buf, \"L\", VALUE);\t\\\n+\tassemble_name (FILE, __buf);\t\t\t\t\\\n+\tfputs (\" - \", FILE);\t\t\t\t\t\\\n+\tASM_GENERATE_INTERNAL_LABEL (__buf, \"L\", REL);\t\t\\\n+\tassemble_name (FILE, __buf);\t\t\t\t\\\n+\tfputc (';', FILE);\t\t\t\t\t\\\n+\tfputc ('\\n', FILE);\t\t\t\t\t\\\n+    } while (0)\n+\n+#define ASM_OUTPUT_ALIGN(FILE,LOG) \t\t\t\t\\\n+    do {\t\t\t\t\t\t\t\\\n+      if ((LOG) != 0)\t\t\t\t\t\t\\\n+\tfprintf (FILE, \"\\t.align %d\\n\", 1 << (LOG));\t\t\\\n+    } while (0)\n+\n+#define ASM_OUTPUT_SKIP(FILE,SIZE)\t\t\\\n+    do {\t\t\t\t\t\\\n+\tasm_output_skip (FILE, SIZE);\t\t\\\n+    } while (0)\n+\n+#define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED) \t\\\n+do { \t\t\t\t\t\t\\\n+    switch_to_section (data_section);\t\t\t\t\\\n+    if ((SIZE) >= (unsigned int) 4 ) ASM_OUTPUT_ALIGN(FILE,2);\t\\\n+    ASM_OUTPUT_SIZE_DIRECTIVE (FILE, NAME, SIZE);\t\t\\\n+    ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\\\n+    fprintf (FILE, \"%s %ld;\\n\", ASM_SPACE,\t\t\t\\\n+\t     (ROUNDED) > (unsigned int) 1 ? (ROUNDED) : 1);\t\\\n+} while (0)\n+\n+#define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)\t\\\n+     do {\t\t\t\t\t\t\\\n+\tASM_GLOBALIZE_LABEL1(FILE,NAME); \t\t\\\n+        ASM_OUTPUT_LOCAL (FILE, NAME, SIZE, ROUNDED); } while(0)\n \n #define ASM_COMMENT_START \"//\"\n \n #define PROFILE_BEFORE_PROLOGUE\n-#define FUNCTION_PROFILER(FILE, LABELNO)                                       \\\n-  do                                                                           \\\n-    {                                                                          \\\n-      fprintf (FILE, \"\\t[--SP] = RETS;\\n\");                                    \\\n-      if (TARGET_LONG_CALLS)                                                   \\\n-\t{                                                                      \\\n-\t  fprintf (FILE, \"\\tP2.h = __mcount;\\n\");                              \\\n-\t  fprintf (FILE, \"\\tP2.l = __mcount;\\n\");                              \\\n-\t  fprintf (FILE, \"\\tCALL (P2);\\n\");                                    \\\n-\t}                                                                      \\\n-      else                                                                     \\\n-\tfprintf (FILE, \"\\tCALL __mcount;\\n\");                                  \\\n-      fprintf (FILE, \"\\tRETS = [SP++];\\n\");                                    \\\n-    }                                                                          \\\n-  while (0)\n+#define FUNCTION_PROFILER(FILE, LABELNO)\t\\\n+  do {\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\t[--SP] = RETS;\\n\");\t\\\n+    if (TARGET_LONG_CALLS)\t\t\t\\\n+      {\t\t\t\t\t\t\\\n+\tfprintf (FILE, \"\\tP2.h = __mcount;\\n\");\t\\\n+\tfprintf (FILE, \"\\tP2.l = __mcount;\\n\");\t\\\n+\tfprintf (FILE, \"\\tCALL (P2);\\n\");\t\\\n+      }\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\\\n+      fprintf (FILE, \"\\tCALL __mcount;\\n\");\t\\\n+    fprintf (FILE, \"\\tRETS = [SP++];\\n\");\t\\\n+  } while(0)\n \n #undef NO_PROFILE_COUNTERS\n #define NO_PROFILE_COUNTERS 1\n \n-#define ASM_OUTPUT_REG_PUSH(FILE, REGNO)                                       \\\n-  fprintf (FILE, \"\\t[--SP] = %s;\\n\", reg_names[REGNO])\n-#define ASM_OUTPUT_REG_POP(FILE, REGNO)                                        \\\n-  fprintf (FILE, \"\\t%s = [SP++];\\n\", reg_names[REGNO])\n+#define ASM_OUTPUT_REG_PUSH(FILE, REGNO) fprintf (FILE, \"\\t[--SP] = %s;\\n\", reg_names[REGNO])\n+#define ASM_OUTPUT_REG_POP(FILE, REGNO)  fprintf (FILE, \"\\t%s = [SP++];\\n\", reg_names[REGNO])\n \n extern rtx bfin_cc_rtx, bfin_rets_rtx;\n \n /* This works for GAS and some other assemblers.  */\n-#define SET_ASM_OP \".set \"\n+#define SET_ASM_OP              \".set \"\n \n /* DBX register number for a given compiler register number */\n-#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n+#define DBX_REGISTER_NUMBER(REGNO)  (REGNO) \n \n-#define SIZE_ASM_OP \"\\t.size\\t\"\n+#define SIZE_ASM_OP     \"\\t.size\\t\"\n \n extern int splitting_for_sched, splitting_loops;\n "}, {"sha": "86c54692152a945d4b05dd022a541666807c2e8a", "filename": "gcc/config/bfin/linux.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fbfin%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fbfin%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Flinux.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -28,11 +28,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #undef TARGET_OS_CPP_BUILTINS\n #define TARGET_OS_CPP_BUILTINS() GNU_USER_TARGET_OS_CPP_BUILTINS()\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in linux.h (bfin) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO() GNU_USER_TARGET_RUST_OS_INFO()\n-\n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC \\\n   \"%{!shared: %{pg|p|profile:gcrt1.o%s;pie:Scrt1.o%s;:crt1.o%s}} crtreloc.o%s \\"}, {"sha": "1061fe6fd55b9e0c164960cbb6f9d797a3eca962", "filename": "gcc/config/bfin/rtems.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fbfin%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fbfin%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Frtems.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -31,13 +31,3 @@\n       builtin_assert (\"system=rtems\");\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n-\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\\\n-    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n-    /*everything is subject to change, especially target_env and target_family*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n-    builtin_rust_info (\"target_os\", \"rtems\");\t\t\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n-  } while (0)"}, {"sha": "4e3efe9a69592fb81517161f09b937eb31fd750e", "filename": "gcc/config/bfin/uclinux.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fbfin%2Fuclinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fbfin%2Fuclinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fuclinux.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -27,8 +27,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #define TARGET_OS_CPP_BUILTINS() GNU_USER_TARGET_OS_CPP_BUILTINS()\n \n-#define TARGET_RUST_OS_INFO() GNU_USER_TARGET_RUST_OS_INFO()\n-\n #undef LINK_GCC_C_SEQUENCE_SPEC\n #define LINK_GCC_C_SEQUENCE_SPEC \"\\\n   %{mfast-fp:-lbffastfp} %G %{!nolibc:%L} %{mfast-fp:-lbffastfp} %G \\"}, {"sha": "9cbe281c10e4a3fcedb5f506ca779f2e9369e1ff", "filename": "gcc/config/c6x/c6x-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fc6x%2Fc6x-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fc6x%2Fc6x-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x-protos.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -21,9 +21,6 @@\n #ifndef GCC_C6X_PROTOS_H\n #define GCC_C6X_PROTOS_H\n \n-/* Defined in c6x-rust.cc  */\n-extern void c6x_rust_target_cpu_info (void);\n-\n /* Functions defined in c6x.cc.  */\n \n #ifdef RTX_CODE"}, {"sha": "766ce1e38e1dcfe98c5ebea69bdfabe69cd88b2f", "filename": "gcc/config/c6x/c6x.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fc6x%2Fc6x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fc6x%2Fc6x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -114,8 +114,6 @@ extern c6x_cpu_t c6x_arch;\n \t}\t\t\t\t\t\\\n     } while (0)\n \n-#define TARGET_RUST_CPU_INFO c6x_rust_target_cpu_info\n-\n #define OPTION_DEFAULT_SPECS \\\n   {\"arch\", \"%{!march=*:-march=%(VALUE)}\" }\n "}, {"sha": "0f29c05baa2844f9df2ce0ac4cfa65213062c912", "filename": "gcc/config/c6x/t-c6x", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fc6x%2Ft-c6x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fc6x%2Ft-c6x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Ft-c6x?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -42,7 +42,3 @@ $(srcdir)/config/c6x/c6x-tables.opt: $(srcdir)/config/c6x/genopt.sh \\\n   $(srcdir)/config/c6x/c6x-isas.def\n \t$(SHELL) $(srcdir)/config/c6x/genopt.sh $(srcdir)/config/c6x > \\\n \t\t$(srcdir)/config/c6x/c6x-tables.opt\n-\n-c6x-rust.o: $(srcdir)/config/c6x/c6x-rust.cc \\\n-  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}, {"sha": "df2ad932377e610bcbcd334bc97691dacdd318fa", "filename": "gcc/config/c6x/uclinux-elf.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fc6x%2Fuclinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fc6x%2Fuclinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fuclinux-elf.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -32,18 +32,6 @@\n     }\t\t\t\t\t\t\\\n   while (false)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in uclinux-elf.h (c6x) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\\\n-    /*note: as far as I know, rustc does not distinguish between uclinux and regular linux kernels*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t   \\\n-    builtin_rust_info (\"target_os\", \"linux\");\t      \\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n-    builtin_rust_info (\"target_env\", \"gnu\");\t         \\\n-  } while (0)\n-\n #undef  STARTFILE_SPEC\n #define STARTFILE_SPEC \\\n   \"%{!shared:crt1%O%s} crti%O%s %{shared|pie:crtbeginS.o%s;:crtbegin.o%s}\""}, {"sha": "300bb31ad84af025279a38d25d00dfee39eb65ee", "filename": "gcc/config/cr16/cr16-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fcr16%2Fcr16-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fcr16%2Fcr16-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcr16%2Fcr16-protos.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -45,9 +45,6 @@ enum data_model_type\n   ILLEGAL_DM\t\t/* Illegal data model.  */\n };\n \n-/* Defined in cr16-rust.cc  */\n-extern void cr16_rust_target_cpu_info (void);\n-\n #ifdef RTX_CODE\n \n /* Addressing Modes.  */"}, {"sha": "100bb4f123c40c2e04e54a29f005ec709ddc3603", "filename": "gcc/config/cr16/cr16.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fcr16%2Fcr16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fcr16%2Fcr16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcr16%2Fcr16.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -67,8 +67,6 @@ do                                         \\\n while (0)\n #endif\n \n-#define TARGET_RUST_CPU_INFO cr16_rust_target_cpu_info\n-\n /* Force the generation of dwarf .debug_frame sections even if not\n    compiling -g.  This guarantees that we can unwind the stack.  */\n #define DWARF2_FRAME_INFO 1"}, {"sha": "928730f2dfdee81ac1b3aaf8699166efc03c5174", "filename": "gcc/config/cr16/t-cr16", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fcr16%2Ft-cr16", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fcr16%2Ft-cr16", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcr16%2Ft-cr16?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -23,6 +23,3 @@ MULTILIB_DIRNAMES    = far-pic int32\n MULTILIB_MATCHES     =\n MULTILIB_EXTRA_OPTS  = mcr16cplus mdata-model=far\n \n-cr16-rust.o: $(srcdir)/config/cr16/cr16-rust.cc \\\n-  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}, {"sha": "bea3757672e417bb841737e582e9307eedb512d6", "filename": "gcc/config/csky/csky-linux-elf.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fcsky%2Fcsky-linux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fcsky%2Fcsky-linux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky-linux-elf.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -95,11 +95,6 @@\n     }\t\t\t\t\t    \\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\\\n-    GNU_USER_TARGET_RUST_OS_INFO();\t\\\n-  } while (0)\n-\n /* In crtstuff.c to control section in where code resides.\n    We have to write it as asm code.  */\n #ifdef __PIC__"}, {"sha": "8f61735a47dc5ab03006deea2dd2c75ea363428d", "filename": "gcc/config/csky/csky-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fcsky%2Fcsky-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fcsky%2Fcsky-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky-protos.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -27,8 +27,6 @@ extern bool csky_legitimate_pic_operand_p (rtx);\n \n extern void csky_cpu_cpp_builtins (cpp_reader *);\n \n-extern void csky_rust_target_cpu_info (void);\n-\n extern bool csky_inlinable_constant (HOST_WIDE_INT value);\n extern bool csky_shifted_imm8_constant (unsigned HOST_WIDE_INT,\n \t\t\t\t\tunsigned int *, unsigned int *);"}, {"sha": "22b1151b7ea517401d9507dd793b1117d091ac8d", "filename": "gcc/config/csky/csky.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fcsky%2Fcsky.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fcsky%2Fcsky.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -813,8 +813,6 @@ extern enum reg_class regno_reg_class[FIRST_PSEUDO_REGISTER];\n #define TARGET_CPU_CPP_BUILTINS()\t\t      \\\n   csky_cpu_cpp_builtins (pfile)\n \n-#define TARGET_RUST_CPU_INFO csky_rust_target_cpu_info\n-\n /******************************************************************\n  *\t\t\tPer-function Data\t\t\t  *\n  ******************************************************************/"}, {"sha": "d076d480f8f06b668caeed330829ffe51573fbe2", "filename": "gcc/config/csky/t-csky", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fcsky%2Ft-csky", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fcsky%2Ft-csky", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Ft-csky?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -27,7 +27,3 @@ $(srcdir)/config/csky/csky_tables.opt: $(srcdir)/config/csky/csky_genopt.sh \\\n   $(srcdir)/config/csky/csky_cores.def\n \t$(SHELL) $(srcdir)/config/csky/csky_genopt.sh $(srcdir)/config/csky > \\\n \t\t$(srcdir)/config/csky/csky_tables.opt\n-\n-csky-rust.o: $(srcdir)/config/csky/csky-rust.cc \\\n-  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}, {"sha": "0235e62681dcf9d8c0b1903ef5d795865b3802b0", "filename": "gcc/config/dragonfly.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fdragonfly.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fdragonfly.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdragonfly.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -35,18 +35,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n     }                                       \\\n   while (0)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in dragonflybsd.h - c++ undefines it and redefines it.\"\n-/* TODO: ensure that this works correctly and the undef and redef reason is known */\n-#endif\n-#define TARGET_RUST_OS_INFO()                       \\\n-  do {                                              \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\t\\\n-    builtin_rust_info (\"target_os\", \"dragonfly\");\t\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\"); \\\n-    builtin_rust_info (\"target_env\", \"\");\t\t\t      \\\n-  } while (0)\n-\n #undef  CPP_SPEC\n #define CPP_SPEC \\\n  \"%(cpp_cpu) %(cpp_arch) %{posix:-D_POSIX_SOURCE}\""}, {"sha": "61b63234e4683cb9bcf25a12b6338fe0f55c6dc8", "filename": "gcc/config/epiphany/epiphany-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fepiphany%2Fepiphany-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fepiphany%2Fepiphany-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany-protos.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -26,9 +26,6 @@ extern struct rtx_def *gen_compare_reg (machine_mode, enum rtx_code,\n \t\t\t\t\tmachine_mode, rtx, rtx);\n #endif\n \n-/* Defined in epiphany-rust.cc  */\n-extern void epiphany_rust_target_cpu_info (void);\n-\n /* Declarations for various fns used in the .md file.  */\n extern void epiphany_final_prescan_insn (rtx_insn *, rtx *, int);\n extern bool epiphany_is_long_call_p (rtx);"}, {"sha": "8c723845ae378de229c67f689e65f747a83bb897", "filename": "gcc/config/epiphany/epiphany.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fepiphany%2Fepiphany.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fepiphany%2Fepiphany.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -41,8 +41,6 @@ along with GCC; see the file COPYING3.  If not see\n \tbuiltin_assert (\"machine=epiphany\");\t\\\n     } while (0)\n \n-#define TARGET_RUST_CPU_INFO epiphany_rust_target_cpu_info\n-\n /* Pick up the libgloss library. One day we may do this by linker script, but\n    for now its static.\n    libgloss might use errno/__errno, which might not have been needed when we"}, {"sha": "f7f961cad8572402981674f05dd10490c54e859c", "filename": "gcc/config/epiphany/rtems.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fepiphany%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fepiphany%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Frtems.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -26,16 +26,3 @@\n \tbuiltin_define (\"__USE_INIT_FINI__\");\t\\\n \tbuiltin_assert (\"system=rtems\");\t\\\n     } while (0)\n-\n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in rtems.h (epiphany) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\\\n-    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n-    /*everything is subject to change, especially target_env and target_family - TODO*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\\\n-    builtin_rust_info (\"target_os\", \"rtems\");\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\\\n-  } while (0)"}, {"sha": "27a8052402c65e719f89f4e1dea8be0760bc23eb", "filename": "gcc/config/epiphany/t-epiphany", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fepiphany%2Ft-epiphany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fepiphany%2Ft-epiphany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Ft-epiphany?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -30,10 +30,6 @@ resolve-sw-modes.o : $(srcdir)/config/epiphany/resolve-sw-modes.cc \\\n   insn-attr-common.h $(TREE_PASS_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $<\n \n-epiphany-rust.o: $(srcdir)/config/epiphany/epiphany-rust.cc \\\n-  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n-\n SPECS = specs.install\n \n specs: specs.install"}, {"sha": "3d0c3a9431efd3229f1eecb87ed5044b6cf66c9c", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -38,14 +38,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n    while (0)\n \n-#define TARGET_RUST_CPU_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    rust_add_target_info(\"target_arch\", \"fr30\");\t\\\n-    if (TARGET_SMALL_MODEL)\t\\\n-      rust_add_target_info(\"target_feature\", \"small-model\");\t\\\n-    /*TODO: figure out how to do lsim option here if useful */\t\\\n-  } while (0)\n-\n #undef  STARTFILE_SPEC\n #define STARTFILE_SPEC \"crt0.o%s crti.o%s crtbegin.o%s\"\n "}, {"sha": "594487829b581d3936acc8c364d13dd812a10995", "filename": "gcc/config/freebsd-spec.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Ffreebsd-spec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Ffreebsd-spec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffreebsd-spec.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -49,15 +49,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n /* Define the default FreeBSD-specific per-CPU hook code.  */\n #define FBSD_TARGET_CPU_CPP_BUILTINS() do {} while (0)\n \n-#define FBSD_TARGET_RUST_OS_INFO()\t\t\t\t\t\\\n-  do {\t\t\t\t\t\\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\t\\\n-    builtin_rust_info (\"target_os\", \"freebsd\");\t\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\"); \\\n-    builtin_rust_info (\"target_env\", \"\");\t\t\t      \\\n-    /*TODO: is default per-CPU hook code required here?*/ \\\n-  } while (0)\n-\n /* Provide a CPP_SPEC appropriate for FreeBSD.  We just deal with the GCC \n    option `-posix', and PIC issues.  */\n "}, {"sha": "28ebcad88d4f0c2c9ef842e01d47dbdefd65c971", "filename": "gcc/config/freebsd.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffreebsd.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -32,11 +32,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef  TARGET_OS_CPP_BUILTINS\n #define TARGET_OS_CPP_BUILTINS() FBSD_TARGET_OS_CPP_BUILTINS()\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in freebsd.h - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO() FBSD_TARGET_RUST_OS_INFO()\n-\n #undef  CPP_SPEC\n #define CPP_SPEC FBSD_CPP_SPEC\n "}, {"sha": "bc07111d61a0121bdcba23d6fa153ce6899aaddd", "filename": "gcc/config/frv/frv-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -26,9 +26,6 @@ extern void frv_debug_stack\t\t\t(frv_stack_t *);\n extern int frv_initial_elimination_offset\t(int, int);\n extern void frv_ifcvt_machdep_init\t\t(void *);\n \n-/* Defined in frv-rust.cc  */\n-extern void frv_rust_target_cpu_info (void);\n-\n #ifdef RTX_CODE\n extern int frv_legitimate_address_p_1\t\t(machine_mode, rtx,\n \t\t\t\t\t\t int, int, int);"}, {"sha": "8cd67f75b090ea75eded5b93d99397cc8d86af98", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -188,7 +188,6 @@\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_CPU_INFO frv_rust_target_cpu_info\n \f\n #define TARGET_HAS_FPRS\t\t(TARGET_HARD_FLOAT || TARGET_MEDIA)\n "}, {"sha": "98652b5dd4a54a3492a75585ba4f00a74fbe97b6", "filename": "gcc/config/frv/linux.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Ffrv%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Ffrv%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Flinux.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -57,14 +57,6 @@\n     builtin_assert (\"system=linux\");\t\\\n   } while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\\\n-  do {\t\t\t\t\t\\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\\\n-    builtin_rust_info (\"target_os\", \"linux\");\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n-    builtin_rust_info (\"target_env\", \"gnu\");\t\\\n-  } while (0)\n-\n #define HAS_INIT_SECTION 1\n #define INIT_SECTION_ASM_OP\t\"\\t.section .init,\\\"ax\\\"\"\n #define FINI_SECTION_ASM_OP\t\"\\t.section .fini,\\\"ax\\\"\""}, {"sha": "cacdb255381d0ada6802be4ddd8f82c45bb9460e", "filename": "gcc/config/frv/t-frv", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Ffrv%2Ft-frv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Ffrv%2Ft-frv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ft-frv?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -34,7 +34,3 @@ MULTILIB_MATCHES\t= mcpu?simple=mcpu?fr300 \\\n MULTILIB_EXCEPTIONS\t= mcpu=frv/mno-pack* mcpu=simple/mno-pack*\n \n EXTRA_HEADERS = $(srcdir)/config/frv/frv-asm.h\n-\n-frv-rust.o: $(srcdir)/config/frv/frv-rust.cc \\\n-  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}, {"sha": "ab170b152c3720337d2925cf30fe457364b19e49", "filename": "gcc/config/ft32/ft32.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fft32%2Fft32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fft32%2Fft32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fft32%2Fft32.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -463,23 +463,6 @@ do { \\\n     builtin_define (\"__FT32__\");          \\\n   }\n \n-#define TARGET_RUST_CPU_INFO()   \\\n-  do {      \\\n-    rust_add_target_info(\"target_arch\", \"ft32\");  \\\n-    if (TARGET_SIM)   \\\n-      rust_add_target_info(\"target_feature\", \"sim\");   \\\n-    if (ft32_lra_flag)   \\\n-      rust_add_target_info(\"target_feature\", \"lra\");   \\\n-    if (TARGET_NODIV)   \\\n-      rust_add_target_info(\"target_feature\", \"nodiv\");   \\\n-    if (TARGET_FT32B)   \\\n-      rust_add_target_info(\"target_feature\", \"ft32b\");   \\\n-    if (TARGET_COMPRESS)   \\\n-      rust_add_target_info(\"target_feature\", \"compress\");   \\\n-    if (TARGET_NOPM)   \\\n-      rust_add_target_info(\"target_feature\", \"nopm\");   \\\n-  } while (0)\n-\n #define HAS_LONG_UNCOND_BRANCH true\n \n #define NO_FUNCTION_CSE 1"}, {"sha": "e013265a2105156da45f5c06afae401a0a152fd4", "filename": "gcc/config/fuchsia.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Ffuchsia.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Ffuchsia.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffuchsia.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -66,19 +66,3 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (false)\n \n-#ifndef EXTRA_TARGET_RUST_OS_INFO\n-#define EXTRA_TARGET_RUST_OS_INFO()\n-#endif\n-\n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in fuchsia.h - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\t\\\n-\t/*NOTE: target_family is subject to change if rustc decides to change it to non-unix*/ \\\n-    builtin_rust_info (\"target_os\", \"fuchsia\");\t\t\\\n-    builtin_rust_info (\"target_vendor\", \"\"); \\\n-    builtin_rust_info (\"target_env\", \"\");\t\t\t      \\\n-\tEXTRA_TARGET_RUST_OS_INFO();\t\t\\\n-  } while (0)"}, {"sha": "9ae8919f5f8d1a064a6d7872e6ba916e60950dfd", "filename": "gcc/config/gcn/gcn.h", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fgcn%2Fgcn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fgcn%2Fgcn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -27,28 +27,6 @@\n     }\t\t\t\t\t\\\n   while(0)\n \n-#define TARGET_RUST_CPU_INFO()   \\\n-  do {      \\\n-    rust_add_target_info(\"target_arch\", \"amdgcn\");  \\\n-    /*TODO: maybe make arches features? e.g. \"fiji\", \"gfx900\"*/ \\\n-    /*TODO: is defining via \"is arch 3\" or \"is arch 3 or higher\" better?*/ \\\n-    if (TARGET_GCN3)   \\\n-      rust_add_target_info(\"target_feature\", \"gcn3\");   \\\n-    if (TARGET_GCN5)   \\\n-      rust_add_target_info(\"target_feature\", \"gcn5\");   \\\n-    if (TARGET_ABI64)   \\\n-      rust_add_target_info(\"target_feature\", \"64\");   \\\n-    else /*are these defines actually useful?*/  \\\n-      rust_add_target_info(\"target_feature\", \"32\");   \\\n-    /*TODO: figure out how to check gomp feature*/ \\\n-    /*TODO: ensure that vars below are accessible - defined weirdly so may not be*/ \\\n-    if (flag_bypass_init_error)   \\\n-      rust_add_target_info(\"target_feature\", \"bypass-init-error\");   \\\n-    if (flag_worker_partitioning)   \\\n-      rust_add_target_info(\"target_feature\", \"acc-experimental-workers\");   \\\n-    /*TODO: figure out how to represent stack-size and local-symbol-id as defines*/ \\\n-  } while (0)\n-\n /* Support for a compile-time default architecture and tuning.\n    The rules are:\n    --with-arch is ignored if -march is specified."}, {"sha": "de2ead82be93eedfc238cc4ed64716fdcc058ddf", "filename": "gcc/config/gnu.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fgnu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fgnu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgnu.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -37,12 +37,3 @@ along with GCC.  If not, see <http://www.gnu.org/licenses/>.\n \tbuiltin_version (\"Hurd\");\t\t\\\n \tbuiltin_version (\"CRuntime_Glibc\");\t\\\n     } while (0)\n-\n-#define GNU_USER_TARGET_RUST_OS_INFO()\t\t\\\n-\tdo { /*is this correct? or should os be \"hurd\"?*/ \\\n-\tbuiltin_rust_info (\"target_family\", \"unix\");\t\\\n-\tbuiltin_rust_info (\"target_os\", \"gnu\");\t\\\n-\tbuiltin_rust_info (\"target_vendor\", \"unknown\");\t\\\n-\tbuiltin_rust_info (\"target_env\", \"\");\t\t\t\\\n-\t/* TODO: is target_env required?*/ \\\n-\t} while (0)"}, {"sha": "9de45004cf1434fbfc7f1142e69e67f71244d198", "filename": "gcc/config/h8300/linux.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fh8300%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fh8300%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Flinux.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -29,11 +29,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\\\n-  do {\t\t\t\t\t\t\\\n-    GNU_USER_TARGET_RUST_OS_INFO();\t\\\n-  } while (0)\n-\n #undef LINK_SPEC\n #define LINK_SPEC \"%{mh:-mh8300helf_linux} %{ms:-m h8300self_linux} %{msx:-m h8300sxelf_linux}\"\n "}, {"sha": "75fede50fa089aed2747dfc80ae084ebfa55598c", "filename": "gcc/config/i386/crtdll.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Fcrtdll.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Fcrtdll.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcrtdll.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -31,18 +31,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#ifdef EXTRA_TARGET_RUST_OS_INFO\n-# error \"EXTRA_TARGET_RUST_OS_INFO already defined in crtdll.h (i386) - c++ undefines it and redefines it.\"\n-#endif\n-#define EXTRA_TARGET_RUST_OS_INFO()\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\\\n-    builtin_rust_info (\"target_family\", \"windows\");\t\\\n-    builtin_rust_info (\"target_os\", \"windows\");\t\\\n-    builtin_rust_info (\"target_vendor\", \"pc\");\t\\\n-    /*TODO: is this the right target_env? it says gnu tools up there, but env may change.*/ \\\n-    builtin_rust_info (\"target_env\", \"gnu\");\t\\\n-  } while (0)\n-\n #undef LIBGCC_SPEC\n #define LIBGCC_SPEC \\\n   \"%{mthreads:-lmingwthrd} -lmingw32 -lgcc -lcoldname -libmingwex -lcrtdll\""}, {"sha": "45150458cc5c5fd465e75311484c9f626537063a", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -151,11 +151,6 @@ along with GCC; see the file COPYING3.  If not see\n   }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-  \tEXTRA_TARGET_RUST_OS_INFO ();\t\t\t\t\t\\\n-  } while (0)\n-\n /* Get tree.cc to declare a target-specific specialization of\n    merge_decl_attributes.  */\n #define TARGET_DLLIMPORT_DECL_ATTRIBUTES 1"}, {"sha": "d06eda369cf55ed7eebb9c199de78580c2031d18", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -38,16 +38,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#define EXTRA_TARGET_RUST_OS_INFO()\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\\\n-    /*TODO: derived from llvm triple - rustc has no support for cygwin, but follows llvm triple*/ \\\n-    /*target_family is defined as unix due to posix-compliance, but this is subject to change*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\\\n-    builtin_rust_info (\"target_os\", \"windows\");\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n-    builtin_rust_info (\"target_env\", \"cygnus\");\t\\\n-  } while (0)\n-\n #undef CPP_SPEC\n #define CPP_SPEC \"%(cpp_cpu) %{posix:-D_POSIX_SOURCE} \\\n   %{!ansi:-Dunix} \\"}, {"sha": "a55f6b2b8741b13de61067a78809614743deb0d8", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -40,16 +40,6 @@ along with GCC; see the file COPYING3.  If not see\n     darwin_cpp_builtins (pfile);\t\t\\\n   } while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\t\t\\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\\\n-    /*TODO: rust actually has \"macos\", \"ios\", and \"tvos\" for darwin targets, but gcc seems to have no*/ \\\n-    /*current support for them, so assuming that target_os is always macos for now*/ \\\n-    builtin_rust_info (\"target_os\", \"macos\");\t\\\n-    builtin_rust_info (\"target_vendor\", \"apple\");\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\\\n-  } while (0)\n-\n #undef PTRDIFF_TYPE\n #define PTRDIFF_TYPE (TARGET_64BIT ? \"long int\" : \"int\")\n "}, {"sha": "909821e953be7291ef0ea16ecbea64f7fd02cda1", "filename": "gcc/config/i386/djgpp.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -57,15 +57,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    /*rustc has no support for this, so values are taken from rusty-dos' djgpp github issue guesses*/ \\\n-    builtin_rust_info (\"target_family\", \"windows\");\t\\\n-    builtin_rust_info (\"target_os\", \"msdos\");\t\\\n-    builtin_rust_info (\"target_vendor\", \"pc\");\t\\\n-    builtin_rust_info (\"target_env\", \"djgpp\");\t\\\n-  } while (0)\n-\n #undef CPP_SPEC\n #define CPP_SPEC \"-remap %{posix:-D_POSIX_SOURCE}\"\n "}, {"sha": "23b54c5be52510feb7d9383441b4073450b8b4aa", "filename": "gcc/config/i386/gnu-user-common.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Fgnu-user-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Fgnu-user-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgnu-user-common.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -36,11 +36,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\\\n-    GNU_USER_TARGET_RUST_OS_INFO();\t\t\t\\\n-  } while (0)\n-\n #undef CPP_SPEC\n #define CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n "}, {"sha": "6b3c9516a7f44b0e416fefad567791f19304ae14", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -276,9 +276,6 @@ extern void ix86_d_target_versions (void);\n extern void ix86_d_register_target_info (void);\n extern bool ix86_d_has_stdcall_convention (unsigned int *, unsigned int *);\n \n-/* In i386-rust.cc  */\n-extern void ix86_rust_target_cpu_info (void);\n-\n /* In winnt.cc  */\n extern void i386_pe_unique_section (tree, int);\n extern void i386_pe_declare_function_type (FILE *, const char *, int);"}, {"sha": "f41e0908250c7c2e48915cd456b294040fba854a", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -609,9 +609,6 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define TARGET_D_REGISTER_CPU_TARGET_INFO ix86_d_register_target_info\n #define TARGET_D_HAS_STDCALL_CONVENTION ix86_d_has_stdcall_convention\n \n-/* Target CPU info for Rust.  */\n-#define TARGET_RUST_CPU_INFO ix86_rust_target_cpu_info \n-\n #ifndef CC1_SPEC\n #define CC1_SPEC \"%(cc1_cpu) \"\n #endif"}, {"sha": "efa7fb2072c2e348cdc665ab3a2d2c145a7b2ce3", "filename": "gcc/config/i386/linux-common.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Flinux-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Flinux-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux-common.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -30,23 +30,6 @@ along with GCC; see the file COPYING3.  If not see\n #define EXTRA_TARGET_D_OS_VERSIONS()\t\t\\\n   ANDROID_TARGET_D_OS_VERSIONS();\n \n-#define EXTRA_TARGET_RUST_OS_INFO()\t\t\\\n-  ANDROID_TARGET_RUST_OS_INFO();\n-// TODO: decide on whether following c frontend style or d one - leaning towards c\n-\n-\n-/*#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in linux-common.h (i386) - c++ undefines it and redefines it.\"\n-# error \"note that this above error (linux-common-i386) is expected due to already defining EXTRA_TARGET stuff\"\n-#endif*/\n-/* This is previously defined in gnu-user-common.h, but has no linux-specific info.  */\n-#undef TARGET_RUST_OS_INFO \n-#define TARGET_RUST_OS_INFO()               \\\n-  do {                                      \\\n-    GNU_USER_TARGET_RUST_OS_INFO();         \\\n-    ANDROID_TARGET_RUST_OS_INFO();          \\\n-  } while (0)\n-\n #undef CC1_SPEC\n #define CC1_SPEC \\\n   LINUX_OR_ANDROID_CC (GNU_USER_TARGET_CC1_SPEC, \\"}, {"sha": "baa62c14986b8b303e497f4114169f1d1264959e", "filename": "gcc/config/i386/lynx.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flynx.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -25,15 +25,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    /*TODO: not supported by rustc and so subject to change - based on llvm triple*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\\\n-    builtin_rust_info (\"target_os\", \"lynxos\");\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\\\n-  } while (0)\n-\n /* The svr4 ABI for the i386 says that records and unions are returned\n    in memory.  */\n "}, {"sha": "d3ca0cd0279df4b87fbd72d4b2c1a60f80b1ba2c", "filename": "gcc/config/i386/mingw32.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Fmingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Fmingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw32.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -65,14 +65,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#define EXTRA_TARGET_RUST_OS_INFO()\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\\\n-    builtin_rust_info (\"target_family\", \"windows\");\t\\\n-    builtin_rust_info (\"target_os\", \"windows\");\t\\\n-    builtin_rust_info (\"target_vendor\", \"pc\");\t\\\n-    builtin_rust_info (\"target_env\", \"gnu\");\t\\\n-  } while (0)\n-\n #ifndef TARGET_USE_PTHREAD_BY_DEFAULT\n #define SPEC_PTHREAD1 \"pthread\"\n #define SPEC_PTHREAD2 \"!no-pthread\""}, {"sha": "b1d7d484ce7a6f25e5112b4b5dcfb273b94c1653", "filename": "gcc/config/i386/netbsd-elf.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -26,11 +26,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    NETBSD_TARGET_RUST_OS_INFO();\t\t\\\n-  } while (0)\n-\n \n /* Extra specs needed for NetBSD/i386 ELF.  */\n "}, {"sha": "656fd45af6f23036ca3383eb1d6cfa598935b3b4", "filename": "gcc/config/i386/netbsd64.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Fnetbsd64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Fnetbsd64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetbsd64.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -26,11 +26,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    NETBSD_TARGET_RUST_OS_INFO();\t\t\\\n-  } while (0)\n-\n \n /* Extra specs needed for NetBSD/x86-64 ELF.  */\n "}, {"sha": "5df300918d9ab4f59f1c050fe53061b619bb2ccb", "filename": "gcc/config/i386/nto.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Fnto.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Fnto.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnto.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -36,18 +36,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in nto.h (i386) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    /*TODO: not supported by rustc and so subject to change - based on triple found online*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\\\n-    builtin_rust_info (\"target_os\", \"nto\");\t\\\n-    builtin_rust_info (\"target_vendor\", \"pc\");\t\\\n-    builtin_rust_info (\"target_env\", \"qnx\");\t\\\n-  } while (0)\n-\n #undef THREAD_MODEL_SPEC\n #define THREAD_MODEL_SPEC \"posix\"\n "}, {"sha": "2176e79495c4fc8a7b6f813c42d2bf1cbfcc831c", "filename": "gcc/config/i386/openbsdelf.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Fopenbsdelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Fopenbsdelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fopenbsdelf.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -25,11 +25,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    OPENBSD_TARGET_RUST_OS_INFO();\t\t\\\n-  } while (0)\n-\n #undef DBX_REGISTER_NUMBER\n #define DBX_REGISTER_NUMBER(n) \\\n   (TARGET_64BIT ? dbx64_register_map[n] : svr4_dbx_register_map[n])"}, {"sha": "9549977cbf88ecfc29c0baa7bedb6c46e68b3c90", "filename": "gcc/config/i386/rdos.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Frdos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Frdos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Frdos.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -37,14 +37,3 @@ along with GCC; see the file COPYING3.  If not see\n       builtin_assert (\"system=rdos\");\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n-\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    /*TODO: not supported by rustc and so subject to change - based on triple found online*/ \\\n-    /*this seems to not refer to the 70s Data General RDOS, but one partly compatible with win32*/ \\\n-    /*as such, target_family could be windows*/ \\\n-    builtin_rust_info (\"target_family\", \"\");\t\\\n-    builtin_rust_info (\"target_os\", \"rdos\");\t\\\n-    builtin_rust_info (\"target_vendor\", \"pc\");\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\\\n-  } while (0)"}, {"sha": "a6035ffdad1d32a85d4222da131bd2b19167ff92", "filename": "gcc/config/i386/rtemself.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Frtemself.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Frtemself.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Frtemself.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -33,13 +33,3 @@\n \tbuiltin_assert (\"system=rtems\");\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n-\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\\\n-    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n-    /*everything is subject to change, especially target_env and target_family*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n-    builtin_rust_info (\"target_os\", \"rtems\");\t\t\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n-  } while (0)"}, {"sha": "4e2a0efc615157816be34fa506e20de8b631a310", "filename": "gcc/config/i386/t-i386", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Ft-i386", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Ft-i386", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-i386?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -46,10 +46,6 @@ i386-d.o: $(srcdir)/config/i386/i386-d.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n-i386-rust.o: $(srcdir)/config/i386/i386-rust.cc\n-\t$(COMPILE) $<\n-\t$(POSTCOMPILE)\n-\n i386-options.o: $(srcdir)/config/i386/i386-options.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)"}, {"sha": "3b8eb6f3a59b6d3effa7c8aa3e5147f5de861e14", "filename": "gcc/config/i386/vxworks.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fi386%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fvxworks.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -113,11 +113,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\t\\\n-  do {\t\t\t\t\t\t\t\\\n-    VXWORKS_TARGET_RUST_OS_INFO();\t\t\t\\\n-  } while (0)\n-\n #undef  CPP_SPEC\n #define CPP_SPEC VXWORKS_ADDITIONAL_CPP_SPEC\n #undef  CC1_SPEC"}, {"sha": "fa705d759241befa4910096f26fd018c4d6c3568", "filename": "gcc/config/ia64/hpux.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fia64%2Fhpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fia64%2Fhpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -52,15 +52,6 @@ do {\t\t\t\t\t\t\t\\\n \t  builtin_define(\"_ILP32\");\t\t\t\\\n } while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\t\\\n-  do {\t\t\t\t\t\t\t\\\n-    /*TODO: rustc has no supported for hp-ux, so this is subject to change (and guessed)*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n-    builtin_rust_info (\"target_os\", \"hpux\");\t\t\t\\\n-    builtin_rust_info (\"target_vendor\", \"hp\");\t\t\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n-  } while (0)\n-\n #undef CPP_SPEC\n #define CPP_SPEC \\\n   \"%{mt|pthread:-D_REENTRANT -D_THREAD_SAFE -D_POSIX_C_SOURCE=199506L}\""}, {"sha": "77e0cf7c72ba862809fa68fb5ae19361e22c901b", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -65,9 +65,6 @@ extern void ia64_expand_vec_perm_even_odd (rtx, rtx, rtx, int);\n extern void ia64_expand_vec_setv2sf (rtx op[3]);\n #endif /* RTX_CODE */\n \n-/* Defined in ia64-rust.cc  */\n-extern void ia64_rust_target_cpu_info (void);\n-\n #ifdef TREE_CODE\n #ifdef RTX_CODE\n extern rtx ia64_expand_builtin (tree, rtx, rtx, machine_mode, int);"}, {"sha": "bd0ef35e9a4241bd3376cba7ba792aae57fd6269", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -43,8 +43,6 @@ do {\t\t\t\t\t\t\\\n \tbuiltin_define(\"__SIZEOF_FLOAT128__=16\");\\\n } while (0)\n \n-#define TARGET_RUST_CPU_INFO ia64_rust_target_cpu_info\n-\n #ifndef SUBTARGET_EXTRA_SPECS\n #define SUBTARGET_EXTRA_SPECS\n #endif"}, {"sha": "93510098ccc487c0d9ddaffac5f8dce73ee44fe4", "filename": "gcc/config/ia64/linux.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fia64%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fia64%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Flinux.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -34,11 +34,6 @@ do {\t\t\t\t\t\t\\\n \tbuiltin_define(\"_LONGLONG\");\t\t\\\n } while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    GNU_USER_TARGET_RUST_OS_INFO();\t\\\n-  } while (0)\n-\n /* Need to override linux.h STARTFILE_SPEC, since it has crtbeginT.o in.  */\n #undef STARTFILE_SPEC\n #ifdef HAVE_LD_PIE"}, {"sha": "3fedb7b21c1405613810ca13c1cf94c23e426691", "filename": "gcc/config/ia64/t-ia64", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fia64%2Ft-ia64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fia64%2Ft-ia64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Ft-ia64?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -21,10 +21,6 @@ ia64-c.o: $(srcdir)/config/ia64/ia64-c.cc $(CONFIG_H) $(SYSTEM_H) \\\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(srcdir)/config/ia64/ia64-c.cc\n \n-ia64-rust.o: $(srcdir)/config/ia64/ia64-rust.cc \\\n-  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n-\n # genattrtab generates very long string literals.\n insn-attrtab.o-warn = -Wno-error\n "}, {"sha": "81ec9db29938042175ce3ee40d7f431a10f3289d", "filename": "gcc/config/ia64/vms.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fia64%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fia64%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fvms.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -26,9 +26,6 @@ along with GCC; see the file COPYING3.  If not see\n \tbuiltin_define (\"__IEEE_FLOAT\");\t\\\n     } while (0)\n \n-#define SUBTARGET_RUST_OS_INFO()\t\t\\\n-  do {} while (0)\n-\n /* Need .debug_line info generated from gcc and gas.  */\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT (MASK_DWARF2_ASM | MASK_GNU_AS)"}, {"sha": "3327f14b83131a00b71160204317f750a3a4bfdd", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -43,19 +43,6 @@\n     }                                           \\\n   while (0)\n \n-#define TARGET_RUST_CPU_INFO()   \\\n-  do {      \\\n-    rust_add_target_info(\"target_arch\", \"iq2000\");  \\\n-    /*TODO: maybe make sub-arches features?*/ \\\n-    if (TARGET_EMBEDDED_DATA)   \\\n-      rust_add_target_info(\"target_feature\", \"embedded-data\");   \\\n-    if (TARGET_GPOPT)   \\\n-      rust_add_target_info(\"target_feature\", \"gpopt\");   \\\n-    /*TODO: figure out if can detect no-crt0 as feature*/ \\\n-    if (TARGET_UNINIT_CONST_IN_RODATA)   \\\n-      rust_add_target_info(\"target_feature\", \"uninit-const-in-rodata\");   \\\n-  } while (0)\n-\n /* Macros used in the machine description to test the flags.  */\n \n #define TARGET_STATS\t\t0"}, {"sha": "f74a627bc43407a925af57f7f63a6627a6f4125e", "filename": "gcc/config/kfreebsd-gnu.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fkfreebsd-gnu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fkfreebsd-gnu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fkfreebsd-gnu.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -35,14 +35,6 @@ along with GCC; see the file COPYING3.  If not see\n \tbuiltin_version (\"CRuntime_Glibc\");\t\\\n     } while (0)\n \n-#define GNU_USER_TARGET_RUST_OS_INFO()\t\t\\\n-    do {\t\t\t\t\t\\\n-  builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n-  builtin_rust_info (\"target_os\", \"kfreebsd\");\t\t\t\\\n-  builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n-  builtin_rust_info (\"target_env\", \"gnu\");\t\t\t\\\n-    } while (0)\n-\n #define GNU_USER_DYNAMIC_LINKER        GLIBC_DYNAMIC_LINKER\n #define GNU_USER_DYNAMIC_LINKER32      GLIBC_DYNAMIC_LINKER32\n #define GNU_USER_DYNAMIC_LINKER64      GLIBC_DYNAMIC_LINKER64"}, {"sha": "8379f960b8b731d6018fe20c639f0110933ccc72", "filename": "gcc/config/kopensolaris-gnu.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fkopensolaris-gnu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fkopensolaris-gnu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fkopensolaris-gnu.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -36,17 +36,5 @@ along with GCC; see the file COPYING3.  If not see\n \tbuiltin_version (\"CRuntime_Glibc\");\t\\\n     } while (0)\n \n-#ifdef GNU_USER_TARGET_RUST_OS_INFO\n-# error # error \"TARGET_RUST_OS_INFO already defined in kopensolaris-gnu.h - c++ undefines it and redefines it.\"\n-#endif\n-#define GNU_USER_TARGET_RUST_OS_INFO()\t\t\\\n-    do {\t\t\t\t\t\\\n-  builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n-  builtin_rust_info (\"target_os\", \"kopensolaris\");\t\t\t\\\n-  /*the target_os is maybe not right but i can't find any better atm*/ \\\n-  builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n-  builtin_rust_info (\"target_env\", \"gnu\");\t\t\t\\\n-    } while (0)\n-\n #undef GNU_USER_DYNAMIC_LINKER\n #define GNU_USER_DYNAMIC_LINKER \"/lib/ld.so.1\""}, {"sha": "cf340660adb6e03014e909d27d02a8ee0dd02c3a", "filename": "gcc/config/linux-android.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Flinux-android.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Flinux-android.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux-android.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -31,18 +31,6 @@\n \t  builtin_version (\"Android\");\t\t\t\t\\\n     } while (0)\n \n-#define ANDROID_TARGET_RUST_OS_INFO()\t\t\t\t\\\n-    do {\t\t\t\t\t\t\t\\\n-  if (TARGET_ANDROID)\t{\t\t\t\t\\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\t\\\n-    builtin_rust_info (\"target_os\", \"android\");\t\t\t\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\t\t\t\\\n-  } else {\t\t\t\t\\\n-    builtin_rust_info (\"target_os\", \"linux\");\t\t\t\t\\\n-  }\t/*this else is required if I'm intepreting structure of defines correctly*/\t\t\t\\\n-    } while (0)\n-\n #if ANDROID_DEFAULT\n # define NOANDROID \"mno-android\"\n #else"}, {"sha": "2e888e3b1765cc1e582ee5d3df2f42f782a9f3ad", "filename": "gcc/config/linux.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -66,20 +66,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \t  builtin_version (\"CRuntime_Musl\");\t\t\t\\\n     } while (0)\n \n-#define GNU_USER_TARGET_RUST_OS_INFO()\t\t\t\t\\\n-    do {\t\t\t\t\t\t\t\\\n-  builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n-  builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n-  /*is there way of determining target_os and target_env here since could also be android?*/\t\t\\\n-  /*target_vendor may not be \"unknown\" - FIXME ensure it is*/  \\\n-  if (OPTION_GLIBC)\t\t\t\\\n-      builtin_rust_info (\"target_env\", \"gnu\");\t\t\t\\\n-  else if (OPTION_MUSL)\t\t\t\\\n-      builtin_rust_info (\"target_env\", \"musl\");\t\t\t\\\n-  else /*TODO: determine if bionic and uclibc are considered to be different envs in rustc*/ \\\n-      builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n-    } while (0)\n-\n /* Determine which dynamic linker to use depending on whether GLIBC or\n    uClibc or Bionic or musl is the default C library and whether\n    -muclibc or -mglibc or -mbionic or -mmusl has been passed to change"}, {"sha": "23f66c904466332f9da176cbd4893adcdbf0f99b", "filename": "gcc/config/lm32/lm32.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Flm32%2Flm32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Flm32%2Flm32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -43,21 +43,6 @@\n     }                                                   \\\n   while (0)\n \n-#define TARGET_RUST_CPU_INFO()                                        \\\n-  do {                                                                \\\n-    rust_add_target_info(\"target_arch\", \"lm32\");                      \\\n-    if (TARGET_MULTIPLY_ENABLED)                                      \\\n-      rust_add_target_info(\"target_feature\", \"multiply-enabled\");     \\\n-    if (TARGET_DIVIDE_ENABLED)                                        \\\n-      rust_add_target_info(\"target_feature\", \"divide-enabled\");       \\\n-    if (TARGET_BARREL_SHIFT_ENABLED)                                  \\\n-      rust_add_target_info(\"target_feature\", \"barrel-shift-enabled\"); \\\n-    if (TARGET_SIGN_EXTEND_ENABLED)                                   \\\n-      rust_add_target_info(\"target_feature\", \"sign-extend-enabled\");  \\\n-    if (TARGET_USER_ENABLED)                                          \\\n-      rust_add_target_info(\"target_feature\", \"user-enabled\");         \\\n-  } while (0)\n-\n #undef  ASM_SPEC\n #define ASM_SPEC \"\\\n %{mmultiply-enabled} \\"}, {"sha": "80c52346966623dde2f4c08d24528b01150cdca9", "filename": "gcc/config/lm32/rtems.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Flm32%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Flm32%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Frtems.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -33,18 +33,5 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in rtems.h (lm32) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\\\n-    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n-    /*everything is subject to change, especially target_env and target_family - TODO*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\\\n-    builtin_rust_info (\"target_os\", \"rtems\");\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\\\n-  } while (0)\n-\n /* Use the default */\n #undef LINK_GCC_C_SEQUENCE_SPEC"}, {"sha": "8657122524a7489c3de5777972cfeafdf239e71c", "filename": "gcc/config/lm32/uclinux-elf.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Flm32%2Fuclinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Flm32%2Fuclinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Fuclinux-elf.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -67,8 +67,6 @@\n \n #define TARGET_OS_CPP_BUILTINS() GNU_USER_TARGET_OS_CPP_BUILTINS()\n \n-#define TARGET_RUST_OS_INFO() GNU_USER_TARGET_RUST_OS_INFO()\n-\n #undef LINK_GCC_C_SEQUENCE_SPEC\n #define LINK_GCC_C_SEQUENCE_SPEC \\\n   \"%{static|static-pie:--start-group} %G %{!nolibc:%L} \\"}, {"sha": "af99103fd64f9fc5e5c2469b105079308366f7d2", "filename": "gcc/config/m32c/m32c.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fm32c%2Fm32c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fm32c%2Fm32c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -80,21 +80,6 @@\n       builtin_define (\"__m32c_cpu__=1\"); \\\n   }\n \n-#define TARGET_RUST_CPU_INFO() \\\n-  do { \\\n-    rust_add_target_info(\"target_arch\", \"m32c\"); \\\n-    if (TARGET_R8C) \\\n-      rust_add_target_info(\"target_feature\", \"r8c\"); \\\n-    if (TARGET_M16C) \\\n-      rust_add_target_info(\"target_feature\", \"m16c\"); \\\n-    if (TARGET_M32CM) \\\n-      rust_add_target_info(\"target_feature\", \"m32cm\"); \\\n-    if (TARGET_M32C) \\\n-      rust_add_target_info(\"target_feature\", \"m32c\"); \\\n-    /*TODO: find way of getting sim info?*/ \\\n-    /*TODO: find way of defining memregs usefully?*/ \\\n-  } while (0)\n-\n /* The pragma handlers need to know if we've started processing\n    functions yet, as the memregs pragma should only be given at the\n    beginning of the file.  This variable starts off TRUE and later"}, {"sha": "553f77cfd4d589056e0f8f1f8518bcb9ec170678", "filename": "gcc/config/m32c/rtems.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fm32c%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fm32c%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Frtems.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -34,18 +34,5 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in rtems.h (m32c) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\\\n-    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n-    /*everything is subject to change, especially target_env and target_family - TODO*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\\\n-    builtin_rust_info (\"target_os\", \"rtems\");\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\\\n-  } while (0)\n-\n /* Use the default */\n #undef LINK_GCC_C_SEQUENCE_SPEC"}, {"sha": "05661bf355ae88f29049ca6350665cfec1d9b68d", "filename": "gcc/config/m68k/linux.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fm68k%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fm68k%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flinux.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -60,8 +60,6 @@ along with GCC; see the file COPYING3.  If not see\n /* Target OS builtins.  */\n #define TARGET_OS_CPP_BUILTINS() GNU_USER_TARGET_OS_CPP_BUILTINS()\n \n-#define TARGET_RUST_OS_INFO() GNU_USER_TARGET_RUST_OS_INFO()\n-\n #undef CPP_SPEC\n #define CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n "}, {"sha": "3139eb8e6e821ee568f1d7c6bce8d8564fee0204", "filename": "gcc/config/m68k/m68k-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -101,9 +101,6 @@ extern enum attr_op_mem m68k_sched_attr_op_mem (rtx_insn *);\n \n #endif /* RTX_CODE */\n \n-/* Defined in m68k-rust.cc  */\n-extern void m68k_rust_target_cpu_info (void);\n-\n extern enum reg_class m68k_secondary_reload_class (enum reg_class,\n \t\t\t\t\t\t   machine_mode, rtx);\n extern enum reg_class m68k_preferred_reload_class (rtx, enum reg_class);"}, {"sha": "cd353db41a62876799b8c95ab57a4e0a5ba38582", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -196,8 +196,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_CPU_INFO m68k_rust_target_cpu_info\n-\n /* Classify the groups of pseudo-ops used to assemble QI, HI and SI\n    quantities.  */\n #define INT_OP_STANDARD\t0\t/* .byte, .short, .long */"}, {"sha": "ee55faf6912464575c8bd8295a82e93e7a9b9b24", "filename": "gcc/config/m68k/m68kemb.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fm68k%2Fm68kemb.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fm68k%2Fm68kemb.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68kemb.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -39,16 +39,6 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    /*TODO: assuming that embedded means \"no operating system\", at least by rustc terms*/ \\\n-    /*basing this all on embedinomicon sample targets*/ \\\n-    builtin_rust_info (\"target_family\", \"\");\t\\\n-    builtin_rust_info (\"target_os\", \"none\");\t\\\n-    builtin_rust_info (\"target_vendor\", \"\");\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\\\n-  } while (0)\n-\n /* Override the default LIB_SPEC from gcc.cc.  We don't currently support\n    profiling, or libg.a.  */\n "}, {"sha": "d262b60bbf25fcf4151dc4b3560d6a0a147d1ba9", "filename": "gcc/config/m68k/netbsd-elf.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -35,11 +35,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\\\n-   do {\t\t\t\t\t\t\\\n-      NETBSD_TARGET_RUST_OS_INFO();\t\t\\\n-   } while (0)\n-\n /* Don't try using XFmode on the 68010.  */ \n #undef LONG_DOUBLE_TYPE_SIZE\n #define LONG_DOUBLE_TYPE_SIZE (TARGET_68020 ? 80 : 64)"}, {"sha": "63c57fdcc2c30848682b52ad036218787805f53a", "filename": "gcc/config/m68k/openbsd.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fm68k%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fm68k%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fopenbsd.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -28,11 +28,6 @@ along with GCC; see the file COPYING3.  If not see\n    }\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\\\n-   do {\t\t\t\t\t\t\\\n-      OPENBSD_TARGET_RUST_OS_INFO();\t\\\n-   } while (0)\n-\n /* Define __HAVE_68881__ in preprocessor, unless -msoft-float is specified.\n    This will control the use of inline 68881 insns in certain macros.  */\n #undef CPP_SPEC"}, {"sha": "4a796e8e8962e7250ccc620ea69856b30bac1dbf", "filename": "gcc/config/m68k/rtemself.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fm68k%2Frtemself.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fm68k%2Frtemself.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Frtemself.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -36,14 +36,3 @@\n \tbuiltin_assert (\"system=rtems\");\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n-\n-#undef TARGET_RUST_OS_INFO /* This undef is actually necessary because m68kemb.h assumes embedded.  */\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\\\n-    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n-    /*everything is subject to change, especially target_env and target_family - TODO*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\\\n-    builtin_rust_info (\"target_os\", \"rtems\");\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\\\n-  } while (0)"}, {"sha": "391a9315cf14e781bbd24b13279d519fefa84a48", "filename": "gcc/config/m68k/t-opts", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fm68k%2Ft-opts", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fm68k%2Ft-opts", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ft-opts?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -6,7 +6,3 @@ $(srcdir)/config/m68k/m68k-tables.opt: $(srcdir)/config/m68k/genopt.sh \\\n   $(srcdir)/config/m68k/m68k-microarchs.def\n \t$(SHELL) $(srcdir)/config/m68k/genopt.sh $(srcdir)/config/m68k > \\\n \t\t$(srcdir)/config/m68k/m68k-tables.opt\n-\n-m68k-rust.o: $(srcdir)/config/m68k/m68k-rust.cc \\\n-  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}, {"sha": "e438b6e5375d99677b43731a3fde863b1eedf1cd", "filename": "gcc/config/m68k/uclinux.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fm68k%2Fuclinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fm68k%2Fuclinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fuclinux.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -58,19 +58,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in uclinux.h (m68k) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\\\n-    /*note: as far as I know, rustc does not distinguish between uclinux and regular linux kernels*/ \\\n-    /*TODO: check whether defining this as GNU_USER_TARGET_RUST_OS_INFO would have different behaviour*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t   \\\n-    builtin_rust_info (\"target_os\", \"linux\");\t      \\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n-    builtin_rust_info (\"target_env\", \"gnu\");\t         \\\n-  } while (0)\n-\n /* -msep-data is the default PIC mode on this target.  */\n #define DRIVER_SELF_SPECS \\\n   \"%{\" FPIE_OR_FPIC_SPEC \":%{!msep-data:%{!mid-shared-library: -msep-data}}}\""}, {"sha": "c905c4024f359ee4be62aff27330ce363da67448", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -49,31 +49,6 @@\n     }\t\t\t\t\t\t\t\t\t  \\\n   while (0)\n \n-#define TARGET_RUST_CPU_INFO() \\\n-  do {\t\t\t\t\t\t\t\\\n-    rust_add_target_info(\"target_arch\", \"mcore\");\t\t\\\n-    if (TARGET_M340)\t\t\t\t\t\t\t\\\n-      rust_add_target_info(\"target_feature\", \"m340\");\t\\\n-    else\t\t\t\t\t\t\t  \\\n-      rust_add_target_info(\"target_feature\", \"m210\");\t\\\n-    if (TARGET_OVERALIGN_FUNC)\t\t\t\t\t\t\\\n-      rust_add_target_info(\"target_feature\", \"4byte-functions\");\t\\\n-    if (TARGET_CG_DATA)\t\t\t\t\t\t\t\\\n-      rust_add_target_info(\"target_feature\", \"callgraph-data\");\t\\\n-    if (TARGET_DIV)\t\t\t\t\t\t\t\\\n-      rust_add_target_info(\"target_feature\", \"div\");\t\\\n-    if (TARGET_HARDLIT)\t\t\t\t\t\t\t\\\n-      rust_add_target_info(\"target_feature\", \"hardlit\");\t\\\n-    /*TODO: find way of getting no-lsim info?*/ \\\n-    if (TARGET_RELAX_IMM)\t\t\t\t\t\t\t\\\n-      rust_add_target_info(\"target_feature\", \"relax-immediates\");\t\\\n-    if (TARGET_SLOW_BYTES)\t\t\t\t\t\t\t\\\n-      rust_add_target_info(\"target_feature\", \"slow-bytes\");\t\\\n-    /*TODO: find way of defining stack-increment usefully?*/ \\\n-    if (TARGET_W_FIELD)\t\t\t\t\t\t\t\\\n-      rust_add_target_info(\"target_feature\", \"wide-bitfields\");\t\\\n-  } while (0)\n-\n #undef  CPP_SPEC\n #define CPP_SPEC \"%{m210:%{mlittle-endian:%ethe m210 does not have little endian support}}\"\n "}, {"sha": "5b1a365eda447c34a2cdc9415956b6d0e3a5010a", "filename": "gcc/config/microblaze/linux.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmicroblaze%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmicroblaze%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Flinux.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -58,9 +58,4 @@\n #undef TARGET_OS_CPP_BUILTINS\n #define TARGET_OS_CPP_BUILTINS() GNU_USER_TARGET_OS_CPP_BUILTINS()\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in linux.h (microblaze) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO() GNU_USER_TARGET_RUST_OS_INFO()\n-\n #define TARGET_ASM_FILE_END file_end_indicate_exec_stack"}, {"sha": "d2c6afd484e60cf77c65ccd174f369af65e5fd41", "filename": "gcc/config/microblaze/rtems.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmicroblaze%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmicroblaze%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Frtems.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -29,14 +29,6 @@\n   builtin_assert( \"system=rtems\" );\t\t\\\n } while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\\\n-    builtin_rust_info (\"target_os\", \"rtems\");\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\\\n-  } while (0)\n-\n /* Redefine to include only items relevant for RTEMS */\n #undef LINK_SPEC\n #define LINK_SPEC \"%{shared:-shared} -N -relax \\"}, {"sha": "6aad7192e6958463789900c708b88fded7e9f86b", "filename": "gcc/config/mips/gnu-user.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmips%2Fgnu-user.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmips%2Fgnu-user.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fgnu-user.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -38,11 +38,6 @@ along with GCC; see the file COPYING3.  If not see\n       builtin_define (\"_GNU_SOURCE\");\t\t\t\t\\\n   } while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\\\n-    GNU_USER_TARGET_RUST_OS_INFO();\t\t\t\t\\\n-  } while (0)\n-\n #undef SUBTARGET_CPP_SPEC\n #define SUBTARGET_CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n "}, {"sha": "cf7713b16ea1295fdb942c4cff5addc6cdcee5e1", "filename": "gcc/config/mips/linux-common.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmips%2Flinux-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmips%2Flinux-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux-common.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -30,10 +30,6 @@ along with GCC; see the file COPYING3.  If not see\n #define EXTRA_TARGET_D_OS_VERSIONS()\t\t\t\t\\\n   ANDROID_TARGET_D_OS_VERSIONS();\n \n-#define EXTRA_TARGET_RUST_OS_INFO()\t\t\t\t\\\n-  ANDROID_TARGET_RUST_OS_INFO();\n-/*TODO: ensure that correct target data is being set here. */\n-\n #undef  LINK_SPEC\n #define LINK_SPEC\t\t\t\t\t\t\t\\\n   LINUX_OR_ANDROID_LD (GNU_USER_TARGET_LINK_SPEC,\t\t\t\\"}, {"sha": "9d0f4d90fd9756b631453ef76733c4eedc5de860", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -392,7 +392,4 @@ extern void mips_expand_vec_cmp_expr (rtx *);\n extern void mips_d_target_versions (void);\n extern void mips_d_register_target_info (void);\n \n-/* Routines implemented in mips-rust.cc  */\n-extern void mips_rust_target_cpu_info (void);\n-\n #endif /* ! GCC_MIPS_PROTOS_H */"}, {"sha": "bf5c1d5a7092e36798d31e133ebc8a66906905ee", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -684,9 +684,6 @@ struct mips_cpu_info {\n #define TARGET_D_CPU_VERSIONS mips_d_target_versions\n #define TARGET_D_REGISTER_CPU_TARGET_INFO mips_d_register_target_info\n \n-/* Target CPU info for Rust.  */\n-#define TARGET_RUST_CPU_INFO mips_rust_target_cpu_info\n-\n /* Default target_flags if no switches are specified  */\n \n #ifndef TARGET_DEFAULT"}, {"sha": "2ed594e6b45c3083af7ad9297e7f56cf237f5836", "filename": "gcc/config/mips/netbsd.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fnetbsd.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -45,11 +45,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\t\\\n-  do {\t\t\\\n-    NETBSD_TARGET_RUST_OS_INFO();\t\t\\\n-  } while (0)\n-\n /* The generic MIPS TARGET_CPU_CPP_BUILTINS are incorrect for NetBSD.\n    Specifically, they define too many namespace-invasive macros.  Override\n    them here.  Note this is structured for easy comparison to the version"}, {"sha": "df8c28f03ef93bd2187a956c19d80a70af902f44", "filename": "gcc/config/mips/rtems.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmips%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmips%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Frtems.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -32,16 +32,6 @@ do {\t\t\t\t\t\\\n   builtin_assert (\"system=rtems\");\t\\\n } while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\\\n-    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n-    /*everything is subject to change, especially target_env and target_family*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n-    builtin_rust_info (\"target_os\", \"rtems\");\t\t\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n-  } while (0)\n-\n /* No sdata.\n  * The RTEMS BSPs expect -G0\n  */"}, {"sha": "f802d8bb5fc959e3e65f0fa8730722d60af58a65", "filename": "gcc/config/mips/sdemtk.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmips%2Fsdemtk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmips%2Fsdemtk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsdemtk.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -53,17 +53,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\t\\\n-  do {\t\t\t\t\t\t\t\\\n-    /*TODO: WTF is SDE and why can't I find any info on it? is it even a real os?*/ \\\n-    /*note: as far as I know, rustc has no supported for sde, so this is just guessed*/ \\\n-    /*literally everything is subject to change because of the lack of info I can find on it*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n-    builtin_rust_info (\"target_os\", \"sde\");\t\t\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n-  } while (0)\n-\n /* For __clear_cache in libgcc2.c.  */\n #ifdef IN_LIBGCC2\n extern void mips_sync_icache (void *beg, unsigned long len);"}, {"sha": "d7a934f438ceb62fa2c053bae63590fd488fd3e7", "filename": "gcc/config/mips/t-mips", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmips%2Ft-mips", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmips%2Ft-mips", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-mips?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -28,7 +28,3 @@ frame-header-opt.o: $(srcdir)/config/mips/frame-header-opt.cc\n mips-d.o: $(srcdir)/config/mips/mips-d.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n-\n-mips-rust.o: $(srcdir)/config/mips/mips-rust.cc \\\n-  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}, {"sha": "11a71e09fa9edaf5c65646953cd68e7692858b3c", "filename": "gcc/config/mips/vxworks.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmips%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmips%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fvxworks.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -58,11 +58,6 @@ VXWORKS_LINK_SPEC\n     }                                                   \\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\t\\\n-  do {\t\t\t\\\n-    VXWORKS_TARGET_RUST_OS_INFO();\t\t\\\n-  } while (0)\n-\n #undef SUBTARGET_CPP_SPEC\n #define SUBTARGET_CPP_SPEC VXWORKS_ADDITIONAL_CPP_SPEC\n "}, {"sha": "0fc45db6d74d0133c8b255993dad6b3b695e63a7", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -133,32 +133,6 @@ struct GTY(()) machine_function\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_CPU_INFO() \\\n-  do { \\\n-    rust_add_target_info(\"target_arch\", \"mmix\"); \\\n-    /*ignoring libfuncs as options say to get rid of it*/ \\\n-    if (TARGET_ABI_GNU) \\\n-      rust_add_target_info(\"target_feature\", \"abi-gnu\"); \\\n-    else \\\n-      rust_add_target_info(\"target_feature\", \"abi-mmixware\"); \\\n-    if (TARGET_FCMP_EPSILON) \\\n-      rust_add_target_info(\"target_feature\", \"epsilon\"); \\\n-    if (TARGET_ZERO_EXTEND) \\\n-      rust_add_target_info(\"target_feature\", \"zero-extend\"); \\\n-    if (TARGET_KNUTH_DIVISION) \\\n-      rust_add_target_info(\"target_feature\", \"knuthdiv\"); \\\n-    if (TARGET_TOPLEVEL_SYMBOLS) \\\n-      rust_add_target_info(\"target_feature\", \"toplevel-symbols\"); \\\n-    if (TARGET_BRANCH_PREDICT) \\\n-      rust_add_target_info(\"target_feature\", \"branch-predict\"); \\\n-    if (TARGET_BASE_ADDRESSES) \\\n-      rust_add_target_info(\"target_feature\", \"base-addresses\"); \\\n-    if (!(USE_RETURN_INSN)) \\\n-      rust_add_target_info(\"target_feature\", \"single-exit\"); \\\n-    /*TODO: find way of getting no-set-program-start and elf info?*/ \\\n-    /*TODO: find way of defining set-program-start, set-data-start usefully?*/ \\\n-  } while (0)\n-\n #define TARGET_DEFAULT \\\n  (MASK_BRANCH_PREDICT | MASK_BASE_ADDRESSES | MASK_USE_RETURN_INSN)\n "}, {"sha": "8cb16f6baf77a351a4e3c8f1e45891dff6844d0b", "filename": "gcc/config/mn10300/linux.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmn10300%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmn10300%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Flinux.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -24,8 +24,6 @@\n \n #define TARGET_OS_CPP_BUILTINS() GNU_USER_TARGET_OS_CPP_BUILTINS()\n \n-#define TARGET_RUST_OS_INFO() GNU_USER_TARGET_RUST_OS_INFO()\n-\n #undef  CPP_SPEC\n #define CPP_SPEC \"%{mam33:-D__AM33__} %{!mam33:-D__AM33__=2 -D__AM33_2__} \\\n   %{posix:-D_POSIX_SOURCE} \\"}, {"sha": "bc57f4b176ccbd39870c7837de387f3d8e3d0a9c", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -58,26 +58,6 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_CPU_INFO() \\\n-  do { \\\n-    rust_add_target_info(\"target_arch\", \"mn10300\"); \\\n-    if (TARGET_AM33) \\\n-      rust_add_target_info(\"target_feature\", \"am33\"); \\\n-    else if (TARGET_AM33_2) \\\n-      rust_add_target_info(\"target_feature\", \"am33-2\"); \\\n-    else if (TARGET_AM34) \\\n-      rust_add_target_info(\"target_feature\", \"am34\"); \\\n-    if (TARGET_MULT_BUG) \\\n-      rust_add_target_info(\"target_feature\", \"mult-bug\"); \\\n-    if (TARGET_PTR_A0D0) \\\n-      rust_add_target_info(\"target_feature\", \"return-pointer-on-d0\"); \\\n-    if (TARGET_ALLOW_LIW) \\\n-      rust_add_target_info(\"target_feature\", \"liw\"); \\\n-    if (TARGET_ALLOW_SETLB) \\\n-      rust_add_target_info(\"target_feature\", \"setlb\"); \\\n-    /*TODO: find way of getting no-crt0 and relax info?*/ \\\n-  } while (0)\n-\n #ifndef MN10300_OPTS_H\n #include \"config/mn10300/mn10300-opts.h\"\n #endif"}, {"sha": "7bd45815b843433b29348442307aec46f502d6d2", "filename": "gcc/config/moxie/moxie.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmoxie%2Fmoxie.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmoxie%2Fmoxie.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -423,18 +423,6 @@ enum reg_class\n       builtin_define (\"__MOXIE_BIG_ENDIAN__\");\t\t\\\n   }\n \n-#define TARGET_RUST_CPU_INFO() \\\n-  do { \\\n-    rust_add_target_info(\"target_arch\", \"moxie\"); \\\n-    if (TARGET_LITTLE_ENDIAN) \\\n-      rust_add_target_info(\"target_feature\", \"el\"); \\\n-    else \\\n-      rust_add_target_info(\"target_feature\", \"eb\"); \\\n-    if (TARGET_HAS_MULX) \\\n-      rust_add_target_info(\"target_feature\", \"mul.x\"); \\\n-    /*TODO: find way of getting no-crt0 info?*/ \\\n-  } while (0)\n-\n #define HAS_LONG_UNCOND_BRANCH true\n \n #endif /* GCC_MOXIE_H */"}, {"sha": "b2620ad1d2236428a447cd5b68f09946039d3a0d", "filename": "gcc/config/moxie/moxiebox.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmoxie%2Fmoxiebox.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmoxie%2Fmoxiebox.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxiebox.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -28,16 +28,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    /*TODO: rustc has no supported for moxiebox, so this is just guessed - values subject to change*/ \\\n-    /*I can find virtually no info on target triples, so target_family and target_vendor most of all*/ \\\n-    builtin_rust_info (\"target_family\", \"\");\t\t\t\\\n-    builtin_rust_info (\"target_os\", \"moxiebox\");\t\t\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n-  } while (0)\n-\n #undef LIB_SPEC\n #define LIB_SPEC \\\n \"%{!T*:-Tmoxiebox.ld} \\"}, {"sha": "737f9232ae963b479afeac5778e62e9fc823c792", "filename": "gcc/config/moxie/rtems.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmoxie%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmoxie%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Frtems.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -33,16 +33,6 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n-    /*everything is subject to change, especially target_env and target_family*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n-    builtin_rust_info (\"target_os\", \"rtems\");\t\t\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n-  } while (0)\n-\n #undef LINK_SPEC\n #undef SIZE_TYPE\n #undef PTRDIFF_TYPE"}, {"sha": "b84d53294ec78c06532b324867ddf17c974b06f1", "filename": "gcc/config/moxie/uclinux.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmoxie%2Fuclinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmoxie%2Fuclinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fuclinux.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -30,8 +30,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #define TARGET_OS_CPP_BUILTINS() GNU_USER_TARGET_OS_CPP_BUILTINS()\n \n-#define TARGET_RUST_OS_INFO() GNU_USER_TARGET_RUST_OS_INFO()\n-\n #undef TARGET_LIBC_HAS_FUNCTION\n #define TARGET_LIBC_HAS_FUNCTION no_c99_libc_has_function\n "}, {"sha": "39667655c434a37cdbf56b4563cbc97342867528", "filename": "gcc/config/msp430/msp430.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -44,23 +44,6 @@ extern bool msp430x;\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_CPU_INFO()                                                 \\\n-  do                                                                           \\\n-    {                                                                          \\\n-      rust_add_target_info (\"target_arch\", \"msp430\");                          \\\n-      /*TODO: ensure below variables work*/                                    \\\n-      if (msp430_hwmult_type == MSP430_HWMULT_SMALL)                           \\\n-\trust_add_target_info (\"target_feature\", \"hwmult16\");                   \\\n-      else if (msp430_hwmult_type == MSP430_HWMULT_LARGE)                      \\\n-\trust_add_target_info (\"target_feature\", \"hwmult32\");                   \\\n-      else if (msp430_hwmult_type == MSP430_HWMULT_F5SERIES)                   \\\n-\trust_add_target_info (\"target_feature\", \"hwmultf5\");                   \\\n-      if (msp430x)                                                             \\\n-\trust_add_target_info (\"target_feature\", \"ext\");                        \\\n-      /*TODO: add other options that aren't in llvm?*/                         \\\n-    }                                                                          \\\n-  while (0)\n-\n /* For the \"c\" language where exceptions are implicitly disabled, use\n    crt*_no_eh.o unless -fexceptions is passed.  For other languages, only use\n    crt*_no_eh.o if -fno-exceptions is explicitly passed.  */"}, {"sha": "831be817a90f7102f8990bc7efc9af4bcf22776c", "filename": "gcc/config/nds32/linux.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fnds32%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fnds32%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Flinux.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -36,11 +36,6 @@\n     }                                           \\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()                 \\\n-  do {                                        \\\n-    GNU_USER_TARGET_RUST_OS_INFO();           \\\n-  } while (0)\n-\n #ifdef TARGET_BIG_ENDIAN_DEFAULT\n #define LD_SO_ENDIAN_SPEC \"%{mlittle-endian:le}%{!mlittle-endian:be}\"\n #else"}, {"sha": "377423c7937520d3b6ac65580f6b4f8583fdad9f", "filename": "gcc/config/nds32/nds32-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -319,9 +319,6 @@ extern int nds32_address_cost_impl (rtx, machine_mode, addr_space_t, bool);\n /* Auxiliary functions for pre-define marco.  */\n extern void nds32_cpu_cpp_builtins(struct cpp_reader *);\n \n-/* Routines implemented in nds32-rust.cc  */\n-extern void nds32_rust_target_cpu_info (void);\n-\n /* Auxiliary functions for const_vector's constraints.  */\n \n extern HOST_WIDE_INT const_vector_to_hwint (rtx);"}, {"sha": "18ef8ae9ee86fc8255814dfbdbadaea4c37ad293", "filename": "gcc/config/nds32/nds32.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fnds32%2Fnds32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fnds32%2Fnds32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -1006,9 +1006,6 @@ enum nds32_builtins\n #define TARGET_CPU_CPP_BUILTINS() \\\n   nds32_cpu_cpp_builtins (pfile)\n \n-/* Target CPU info for Rust.  */\n-#define TARGET_RUST_CPU_INFO nds32_rust_target_cpu_info\n-\n \f\n /* Defining Data Structures for Per-function Information.  */\n "}, {"sha": "3833f3daceb2b2d6ca4e74a0cba7adf527123b54", "filename": "gcc/config/nds32/t-nds32", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fnds32%2Ft-nds32", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fnds32%2Ft-nds32", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Ft-nds32?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -144,7 +144,3 @@ nds32-utils.o: \\\n   intl.h libfuncs.h $(PARAMS_H) $(OPTS_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(srcdir)/config/nds32/nds32-utils.cc\n-\n-nds32-rust.o: $(srcdir)/config/nds32/nds32-rust.cc \\\n-  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}, {"sha": "9e46a0fff02c1577a1acc6a4f7033af4a3786bd3", "filename": "gcc/config/netbsd.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetbsd.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -29,15 +29,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-/* TARGET_RUST_OS_INFO() common to all NetBSD targets.  */\n-#define NETBSD_TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n-    builtin_rust_info (\"target_os\", \"netbsd\");\t\t\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n-  } while (0)\n-\n /* CPP_SPEC parts common to all NetBSD targets.  */\n #define NETBSD_CPP_SPEC\t\t\t\t\\\n   \"%{posix:-D_POSIX_SOURCE} \\"}, {"sha": "f5dd813acad52c8b9cd8427b77a18124a48b8ea9", "filename": "gcc/config/nios2/linux.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fnios2%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fnios2%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Flinux.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -26,11 +26,6 @@\n     }                                           \\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()                 \\\n-  do {                                        \\\n-    GNU_USER_TARGET_RUST_OS_INFO();           \\\n-  } while (0)\n-\n #undef CPP_SPEC\n #define CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n "}, {"sha": "62de3a8a9cbaaf424f4cb6adb5a8c5d68d124f51", "filename": "gcc/config/nios2/nios2-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fnios2%2Fnios2-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fnios2%2Fnios2-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2-protos.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -30,9 +30,6 @@ extern bool nios2_expand_return (void);\n extern void nios2_function_profiler (FILE *, int);\n extern bool nios2_fpu_insn_enabled (enum n2fpu_code);\n \n-/* Routines implemented in nios2-rust.cc  */\n-extern void nios2_rust_target_cpu_info (void);\n-\n #ifdef RTX_CODE\n extern bool nios2_large_constant_p (rtx);\n extern bool nios2_large_constant_memory_operand_p (rtx);"}, {"sha": "7c7d5c05fd7c40e7843582dc18599eb65da3de26", "filename": "gcc/config/nios2/nios2.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fnios2%2Fnios2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fnios2%2Fnios2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -44,9 +44,6 @@\n     }\t\t\t\t\t\t    \\\n   while (0)\n \n-/* Target CPU info for Rust.  */\n-#define TARGET_RUST_CPU_INFO nios2_rust_target_cpu_info\n-\n /* We're little endian, unless otherwise specified by defining\n    BIG_ENDIAN_FLAG.  */\n #ifndef TARGET_ENDIAN_DEFAULT"}, {"sha": "a96c67b10f74141b44fd421a493b645fa28eddb1", "filename": "gcc/config/nios2/rtems.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fnios2%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fnios2%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Frtems.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -32,16 +32,6 @@ do {                                    \\\n   builtin_assert (\"system=rtems\");      \\\n } while (0)\n \n-#define TARGET_RUST_OS_INFO()                         \\\n-  do {                                                \\\n-    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n-    /*everything is subject to change, especially target_env and target_family*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");      \\\n-    builtin_rust_info (\"target_os\", \"rtems\");         \\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");   \\\n-    builtin_rust_info (\"target_env\", \"\");             \\\n-  } while (0)\n-\n /* This toolchain implements the ABI for Linux Systems documented in the\n    Nios II Processor Reference Handbook.\n "}, {"sha": "1649924c4bb3627f01ed361d62051d268afcf617", "filename": "gcc/config/nios2/t-nios2", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fnios2%2Ft-nios2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fnios2%2Ft-nios2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Ft-nios2?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -25,7 +25,3 @@\n # MULTILIB_OPTIONS += EL/EB\n # MULTILIB_DIRNAMES += le be\n # MULTILIB_MATCHES += EL=mel EB=meb\n-\n-nios2-rust.o: $(srcdir)/config/nios2/nios2-rust.cc \\\n-  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}, {"sha": "3d6ad148cb469f0afb106222352be6f256804fee", "filename": "gcc/config/nvptx/nvptx-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -44,9 +44,6 @@ extern void nvptx_cpu_cpp_builtins (void);\n extern void nvptx_register_pragmas (void);\n extern unsigned int nvptx_data_alignment (const_tree, unsigned int);\n \n-/* Routines implemented in nvptx-rust.cc  */\n-extern void nvptx_rust_target_cpu_info (void);\n-\n #ifdef RTX_CODE\n extern void nvptx_expand_oacc_fork (unsigned);\n extern void nvptx_expand_oacc_join (unsigned);"}, {"sha": "9fda2f0d86c0328fec45d75cd9f5cfc32494cdd3", "filename": "gcc/config/nvptx/nvptx.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -36,8 +36,6 @@\n \n #define TARGET_CPU_CPP_BUILTINS() nvptx_cpu_cpp_builtins ()\n \n-#define TARGET_RUST_CPU_INFO nvptx_rust_target_cpu_info\n-\n /* Avoid the default in ../../gcc.cc, which adds \"-pthread\", which is not\n    supported for nvptx.  */\n #define GOMP_SELF_SPECS \"\""}, {"sha": "b1707665a9f4269e9d3508c536d5f316cd75443e", "filename": "gcc/config/nvptx/t-nvptx", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fnvptx%2Ft-nvptx", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fnvptx%2Ft-nvptx", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Ft-nvptx?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -14,7 +14,3 @@ mkoffload$(exeext): mkoffload.o collect-utils.o libcommon-target.a $(LIBIBERTY)\n \t  mkoffload.o collect-utils.o libcommon-target.a $(LIBIBERTY) $(LIBS)\n \n MULTILIB_OPTIONS = mgomp\n-\n-nvptx-rust.o: $(srcdir)/config/nvptx/nvptx-rust.cc \\\n-  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}, {"sha": "54be22254927d613c034913842bb3cbf96363788", "filename": "gcc/config/openbsd.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fopenbsd.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -102,14 +102,6 @@ while (0)\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define OPENBSD_TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\t\\\n-    builtin_rust_info (\"target_os\", \"openbsd\");\t\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\"); \\\n-    builtin_rust_info (\"target_env\", \"\");\t\t\t      \\\n-  } while(0)\n-\n /* CPP_SPEC appropriate for OpenBSD. We deal with -posix and -pthread.\n    XXX the way threads are handled currently is not very satisfying,\n    since all code must be compiled with -pthread to work. "}, {"sha": "52909af41a6e60bacfe16d291f1bb502ec4e3c1a", "filename": "gcc/config/or1k/linux.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2For1k%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2For1k%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2For1k%2Flinux.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -27,8 +27,6 @@\n #define TARGET_OS_CPP_BUILTINS() \\\n   GNU_USER_TARGET_OS_CPP_BUILTINS ()\n \n-#define TARGET_RUST_OS_INFO() GNU_USER_TARGET_RUST_OS_INFO()\n-\n #define GLIBC_DYNAMIC_LINKER \"/lib/ld-linux-or1k.so.1\"\n \n #undef MUSL_DYNAMIC_LINKER"}, {"sha": "5e96a63c0c00a50429a3466a04eb18ec6d543081", "filename": "gcc/config/or1k/or1k-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2For1k%2For1k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2For1k%2For1k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2For1k%2For1k-protos.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -29,9 +29,6 @@ extern void or1k_expand_move (machine_mode, rtx, rtx);\n extern void or1k_expand_compare (rtx *);\n extern void or1k_expand_call (rtx, rtx, rtx, bool);\n \n-/* Routines implemented in or1k-rust.cc  */\n-extern void or1k_rust_target_cpu_info (void);\n-\n #ifdef RTX_CODE\n void or1k_expand_atomic_compare_and_swap (rtx operands[]);\n void or1k_expand_atomic_compare_and_swap_qihi (rtx operands[]);"}, {"sha": "18a526d386f1267d5894fcbd71a519a866446ea8", "filename": "gcc/config/or1k/or1k.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2For1k%2For1k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2For1k%2For1k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2For1k%2For1k.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -39,8 +39,6 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_CPU_INFO or1k_rust_target_cpu_info\n-\n #define TARGET_CMODEL_SMALL \\\n   (or1k_code_model == CMODEL_SMALL)\n #define TARGET_CMODEL_LARGE \\"}, {"sha": "a4f38cd13b316e0be608b80e38365c789017f981", "filename": "gcc/config/or1k/rtems.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2For1k%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2For1k%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2For1k%2Frtems.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -29,19 +29,5 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in rtems.h (or1k) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n-    /*everything is subject to change, especially target_env and target_family*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n-    builtin_rust_info (\"target_os\", \"rtems\");\t\t\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n-  } while (0)\n-\n #define RTEMS_STARTFILE_SPEC \"crtbegin%O%s\"\n #define RTEMS_ENDFILE_SPEC \"crtend%O%s\"\n-"}, {"sha": "7862a766dfc9b991c55ae3b5b37a8c3840650087", "filename": "gcc/config/or1k/t-or1k", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2For1k%2Ft-or1k", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2For1k%2Ft-or1k", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2For1k%2Ft-or1k?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -20,7 +20,3 @@\n \n comma=,\n MULTILIB_OPTIONS = $(subst $(comma), ,$(TM_MULTILIB_CONFIG))\n-\n-or1k-rust.o: $(srcdir)/config/or1k/or1k-rust.cc \\\n-  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}, {"sha": "bf8a9cd081ddc67199a26afd9ead162b295b5233", "filename": "gcc/config/pa/pa-hpux.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fpa%2Fpa-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fpa%2Fpa-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -89,18 +89,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in pa-hpux.h (pa) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\t\\\n-  do {\t\t\t\t\t\t\t\\\n-    /*TODO: rustc has no supported for hp-ux, so this is subject to change (and guessed)*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n-    builtin_rust_info (\"target_os\", \"hpux\");\t\t\t\\\n-    builtin_rust_info (\"target_vendor\", \"hp\");\t\t\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n-  } while (0)\n-\n /* Like the default, except no -lg.  */\n #undef LIB_SPEC\n #define LIB_SPEC \"%{!shared:%{!p:%{!pg:-lc}}%{p: -L/lib/libp/ -lc}%{pg: -L/lib/libp/ -lc}}\""}, {"sha": "92977685790fe6abd7e7be5184cf4ef51034f95f", "filename": "gcc/config/pa/pa-hpux10.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fpa%2Fpa-hpux10.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fpa%2Fpa-hpux10.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux10.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -90,18 +90,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in pa-hpux10.h (pa) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\t\\\n-  do {\t\t\t\t\t\t\t\\\n-    /*TODO: rustc has no supported for hp-ux, so this is subject to change (and guessed)*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n-    builtin_rust_info (\"target_os\", \"hpux\");\t\t\t\\\n-    builtin_rust_info (\"target_vendor\", \"hp\");\t\t\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n-  } while (0)\n-\n #define CPP_SPEC \"%{threads: -D_REENTRANT -D_DCE_THREADS}\"\n \n /* We can debug dynamically linked executables on hpux9; we also want"}, {"sha": "b29dcd1056977e2242430ebbdf1e5caae42d383e", "filename": "gcc/config/pa/pa-hpux11.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fpa%2Fpa-hpux11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fpa%2Fpa-hpux11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux11.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -119,18 +119,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in pa-hpux11.h (pa) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\t\\\n-  do {\t\t\t\t\t\t\t\\\n-    /*TODO: rustc has no supported for hp-ux, so this is subject to change (and guessed)*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n-    builtin_rust_info (\"target_os\", \"hpux\");\t\t\t\\\n-    builtin_rust_info (\"target_vendor\", \"hp\");\t\t\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n-  } while (0)\n-\n #undef CPP_SPEC\n #define CPP_SPEC \\\n   \"%{mt|pthread:-D_REENTRANT -D_THREAD_SAFE -D_POSIX_C_SOURCE=199506L}\""}, {"sha": "5af11a1df80464adb560bd1f46f986dd54cfa2ea", "filename": "gcc/config/pa/pa-linux.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-linux.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -27,14 +27,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in pa-linux.h (pa) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\t\\\n-  do {\t\t\t\t\t\t\t\\\n-    GNU_USER_TARGET_RUST_OS_INFO();\t\\\n-  } while (0)\n-\n #undef CPP_SPEC\n #define CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n "}, {"sha": "f5eaec6899d7d33701c41e612ffcc82602f2a708", "filename": "gcc/config/pa/pa-netbsd.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fpa%2Fpa-netbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fpa%2Fpa-netbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-netbsd.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -27,14 +27,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in pa-netbsd.h (pa) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\t\\\n-  do {\t\t\t\t\t\t\t\\\n-    NETBSD_TARGET_RUST_OS_INFO();\t\\\n-  } while (0)\n-\n #undef CPP_SPEC\n #define CPP_SPEC NETBSD_CPP_SPEC\n "}, {"sha": "455294fe247dd8268acdabe09a992e185a9fb872", "filename": "gcc/config/pa/pa-openbsd.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fpa%2Fpa-openbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fpa%2Fpa-openbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-openbsd.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -27,14 +27,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in pa-openbsd.h (pa) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\t\\\n-  do {\t\t\t\t\t\t\t\\\n-    OPENBSD_TARGET_RUST_OS_INFO();\t\\\n-  } while (0)\n-\n /* Our profiling scheme doesn't LP labels and counter words.  */\n #define NO_DEFERRED_PROFILE_COUNTERS 1\n "}, {"sha": "d474d9efc91eba323cdee670b47f7b94d4f0dd7a", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -115,6 +115,3 @@ extern const int pa_magic_milli[];\n /* Routines implemented in pa-d.cc  */\n extern void pa_d_target_versions (void);\n extern void pa_d_register_target_info (void);\n-\n-/* Routines implemented in pa-rust.cc  */\n-extern void pa_rust_target_cpu_info (void);"}, {"sha": "92d3d1841a9e5b113f76bf8c71fcef04e64af52e", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -185,8 +185,6 @@ do {\t\t\t\t\t\t\t\t\\\n        builtin_define(\"__SIZEOF_FLOAT128__=16\");\t\t\\\n } while (0)\n \n-#define TARGET_RUST_CPU_INFO pa_rust_target_cpu_info\n-\n /* An old set of OS defines for various BSD-like systems.  */\n #define TARGET_OS_CPP_BUILTINS()\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n@@ -204,8 +202,6 @@ do {\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-/* TODO: is a TARGET_RUST_OS_INFO() required here? probably not */\n-\n #define CC1_SPEC \"%{pg:} %{p:}\"\n \n #define LINK_SPEC \"%{mlinker-opt:-O} %{!shared:-u main} %{shared:-b}\""}, {"sha": "2428280fbc8644800299878fc7731eb5c031300f", "filename": "gcc/config/pa/t-pa", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fpa%2Ft-pa", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fpa%2Ft-pa", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Ft-pa?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -2,6 +2,3 @@ pa-d.o: $(srcdir)/config/pa/pa-d.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n-pa-rust.o: $(srcdir)/config/pa/pa-rust.cc \\\n-  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}, {"sha": "5fd524b914c4f4e37895ea6533a293d90dccc157", "filename": "gcc/config/pdp11/pdp11-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fpdp11%2Fpdp11-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fpdp11%2Fpdp11-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11-protos.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -55,6 +55,3 @@ extern void pdp11_gen_int_label (char *, const char *, int);\n extern void pdp11_output_labelref (FILE *, const char *);\n extern void pdp11_output_def (FILE *, const char *, const char *);\n extern void pdp11_output_addr_vec_elt (FILE *, int);\n-\n-/* Routines implemented in pdp11-rust.cc  */\n-extern void pdp11_rust_target_cpu_info (void);"}, {"sha": "b7d66c3bc3946a7cd8c81db4fe677a97a322aa04", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -49,7 +49,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_CPU_INFO pdp11_rust_target_cpu_info\n \n /* Generate DBX debugging information.  */\n "}, {"sha": "25cfbb58d553093171f7e0ebfe39c6ef891ea017", "filename": "gcc/config/pdp11/t-pdp11", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fpdp11%2Ft-pdp11", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fpdp11%2Ft-pdp11", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Ft-pdp11?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -29,7 +29,3 @@ CRTSTUFF_T_CFLAGS = -Os\n # We could say \"-Werror -Wno-error=type-limits\", alas, not all supported\n # gcc bootstrap compilers support the latter option.\n dwarf2out.o-warn = -Wno-error\n-\n-pdp11-rust.o: $(srcdir)/config/pdp11/pdp11-rust.cc \\\n-  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}, {"sha": "d9eef3573704f493207e0953d423f3d212f4a65a", "filename": "gcc/config/phoenix.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fphoenix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fphoenix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fphoenix.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -26,18 +26,6 @@ along with GCC; see the file COPYING3.  If not see\n       builtin_assert (\"system=unix\");      \\\n     } while (0)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in phoenix.h - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()                       \\\n-  do {                                              \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\t\\\n-    builtin_rust_info (\"target_os\", \"phoenix\");\t\t  \\\n-    builtin_rust_info (\"target_vendor\", \"unknown\"); \\\n-    builtin_rust_info (\"target_env\", \"\");\t\t\t      \\\n-    /*TODO: ensure these values are correct*/       \\\n-  } while(0)\n-\n #define STD_LIB_SPEC \"%{!shared:%{g*:-lg} %{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p}}\"\n \n /* This will prevent selecting 'unsigned long int' instead of 'unsigned int' as 'uint32_t' in stdint-newlib.h. */"}, {"sha": "8498859de5382ae6fbe367b2e7334790551d3e28", "filename": "gcc/config/pru/pru.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fpru%2Fpru.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fpru%2Fpru.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpru%2Fpru.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -37,21 +37,6 @@\n     }\t\t\t\t\t\t    \\\n   while (0)\n \n-#define TARGET_RUST_CPU_INFO()\t\t    \\\n-  do {\t\t    \\\n-    rust_add_target_info(\"target_arch\", \"pru\");\t\t    \\\n-    if (TARGET_MINRT)\t\t    \\\n-      rust_add_target_info(\"target_feature\", \"minrt\");\t\t    \\\n-    if (TARGET_OPT_LOOP)\t\t    \\\n-      rust_add_target_info(\"target_feature\", \"loop\");\t\t    \\\n-    if (pru_current_abi == PRU_ABI_GNU)\t\t    \\\n-      rust_add_target_info(\"target_feature\", \"abi-gnu\");\t\t    \\\n-    else if (pru_current_abi == PRU_ABI_TI)\t\t    \\\n-      rust_add_target_info(\"target_feature\", \"abi-ti\");\t\t    \\\n-    /*TODO: find way of getting no-relax and mcu info?*/\t\t    \\\n-    /*TODO: add additional options for the changed abi things (e.g. pointer size, return value)?*/    \\\n-  } while (0)\n-\n /* TI ABI implementation is not feature-complete enough (e.g. function\n    pointers are not supported), so we cannot list it as a multilib variant.\n    To prevent misuse from users, do not link any of the standard libraries.  */"}, {"sha": "38803723ba907103d8f6a093b98f0d769528259e", "filename": "gcc/config/riscv/linux.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Friscv%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Friscv%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Flinux.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -22,11 +22,6 @@ along with GCC; see the file COPYING3.  If not see\n     GNU_USER_TARGET_OS_CPP_BUILTINS();\t\t\t\t\\\n   } while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\\\n-    GNU_USER_TARGET_RUST_OS_INFO();\t\t\t\t\\\n-  } while (0)\n-\n #define GLIBC_DYNAMIC_LINKER \"/lib/ld-linux-riscv\" XLEN_SPEC \"-\" ABI_SPEC \".so.1\"\n \n #define MUSL_ABI_SUFFIX \\"}, {"sha": "20c2381c21aa01ec09b9c321da664c4a00a637d9", "filename": "gcc/config/riscv/riscv-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-protos.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -82,9 +82,6 @@ void riscv_cpu_cpp_builtins (cpp_reader *);\n extern void riscv_d_target_versions (void);\n extern void riscv_d_register_target_info (void);\n \n-/* Routines implemented in riscv-rust.cc  */\n-extern void riscv_rust_target_cpu_info (void);\n-\n /* Routines implemented in riscv-builtins.cc.  */\n extern void riscv_atomic_assign_expand_fenv (tree *, tree *, tree *);\n extern rtx riscv_expand_builtin (tree, rtx, rtx, machine_mode, int);"}, {"sha": "695668424c3f8d27e719496e858b7fd2f4798234", "filename": "gcc/config/riscv/riscv.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Friscv%2Friscv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Friscv%2Friscv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -31,9 +31,6 @@ along with GCC; see the file COPYING3.  If not see\n #define TARGET_D_CPU_VERSIONS riscv_d_target_versions\n #define TARGET_D_REGISTER_CPU_TARGET_INFO riscv_d_register_target_info\n \n-/* Target CPU info for Rust.  */\n-#define TARGET_RUST_CPU_INFO riscv_rust_target_cpu_info\n-\n #ifdef TARGET_BIG_ENDIAN_DEFAULT\n #define DEFAULT_ENDIAN_SPEC    \"b\"\n #else"}, {"sha": "14e5e59caaa9ae75ab161b0f51c523964143792c", "filename": "gcc/config/riscv/rtems.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Friscv%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Friscv%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Frtems.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -29,16 +29,3 @@\n \tbuiltin_define (\"__USE_INIT_FINI__\");\t\\\n \tbuiltin_assert (\"system=rtems\");\t\\\n     } while (0)\n-\n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in rtems.h (riscv) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n-    /*everything is subject to change, especially target_env and target_family*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n-    builtin_rust_info (\"target_os\", \"rtems\");\t\t\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n-  } while (0)"}, {"sha": "096d70e3c91415f2e9b6bd0273e9cfa32f75646d", "filename": "gcc/config/riscv/t-riscv", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Friscv%2Ft-riscv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Friscv%2Ft-riscv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Ft-riscv?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -28,7 +28,3 @@ PASSES_EXTRA += $(srcdir)/config/riscv/riscv-passes.def\n $(common_out_file): $(srcdir)/config/riscv/riscv-cores.def \\\n     $(srcdir)/config/riscv/riscv-protos.h \\\n     $(srcdir)/config/riscv/riscv-subset.h\n-\n-riscv-rust.o: $(srcdir)/config/riscv/riscv-rust.cc \\\n-  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}, {"sha": "ead5cdda472cdc91595b2705bfcc6de18b09cb0a", "filename": "gcc/config/rl78/rl78.h", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frl78%2Frl78.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frl78%2Frl78.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -49,30 +49,6 @@\n     }                                           \\\n   while (0)\n \n-#define TARGET_RUST_CPU_INFO()\t\t    \\\n-  do {\t\t    \\\n-    rust_add_target_info(\"target_arch\", \"rl78\"); \t\\\n-    if (RL78_MUL_NONE)\t\t\t\t\\\n-      rust_add_target_info(\"target_feature\", \"mul-g10\"); \t\\\n-    else if (RL78_MUL_G13)\t\t\t\t\\\n-      rust_add_target_info(\"target_feature\", \"mul-g13\"); \t\\\n-    else if (RL78_MUL_G14)\t\t\t\t\\\n-      rust_add_target_info(\"target_feature\", \"mul-g14\"); \t\\\n-    if (TARGET_ALLREGS)\t\t\t\t\\\n-      rust_add_target_info(\"target_feature\", \"allregs\"); \t\\\n-    if (TARGET_G10)\t\t\t\t\\\n-      rust_add_target_info(\"target_feature\", \"cpu-g10\"); \t\\\n-    else if (TARGET_G13)\t\t\t\t\\\n-      rust_add_target_info(\"target_feature\", \"cpu-g13\"); \t\\\n-    else if (TARGET_G14)\t\t\t\t\\\n-      rust_add_target_info(\"target_feature\", \"cpu-g14\"); \t\\\n-    if (TARGET_ES0)\t\t\t\t\\\n-      rust_add_target_info(\"target_feature\", \"es0\"); \t\\\n-    if (TARGET_SAVE_MDUC_REGISTERS)\t\t\t\t\\\n-      rust_add_target_info(\"target_feature\", \"save-mduc-in-interrupts\"); \t\\\n-    /*TODO: find way of getting sim, relax info?*/ \t\\\n-  } while (0)\n-\n #undef  STARTFILE_SPEC\n #define STARTFILE_SPEC \"%{pg:gcrt0.o%s}%{!pg:crt0.o%s} crtbegin.o%s\"\n "}, {"sha": "ad3238bf09ae7c0be2ffdfe9f0a17da388f26130", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -166,16 +166,6 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define AIX_TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    /*note: as far as I know, rustc has no supported for aix, so this is just guessed from triple*/ \\\n-    /*target_vendor is subject to change (and target_env to a lesser extent)*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n-    builtin_rust_info (\"target_os\", \"aix\");\t\t\t\\\n-    builtin_rust_info (\"target_vendor\", \"ibm\");\t\t\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n-  } while (0)\n-\n /* Define appropriate architecture macros for preprocessor depending on\n    target switches.  */\n "}, {"sha": "57e07bcc65ee460435ebcf0db2b726004450072b", "filename": "gcc/config/rs6000/aix71.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Faix71.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Faix71.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix71.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -117,14 +117,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n     }                                \\\n   while (0)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in aix71.h (rs6000) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    AIX_TARGET_RUST_OS_INFO (); \\\n-  } while (0)\n-\n #define CPP_SPEC32 \"\"\n #define CPP_SPEC64 \"-D__64BIT__\"\n #define CPP_SPEC_COMMON \"%{posix: -D_POSIX_SOURCE} \\"}, {"sha": "ca73acbb2c8fb50ce97ca1b46f54374b2bc97f55", "filename": "gcc/config/rs6000/aix72.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Faix72.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Faix72.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix72.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -118,14 +118,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n     }                                \\\n   while (0)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in aix72.h (rs6000) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    AIX_TARGET_RUST_OS_INFO (); \\\n-  } while (0)\n-\n #define CPP_SPEC32 \"\"\n #define CPP_SPEC64 \"-D__64BIT__\"\n #define CPP_SPEC_COMMON \"%{posix: -D_POSIX_SOURCE} \\"}, {"sha": "8baa27e54c0d006f4825387e96489118c7ebdfe0", "filename": "gcc/config/rs6000/aix73.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Faix73.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Faix73.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix73.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -119,14 +119,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n     }                                \\\n   while (0)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in aix73.h (rs6000) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    AIX_TARGET_RUST_OS_INFO (); \\\n-  } while (0)\n-\n #define CPP_SPEC32 \"\"\n #define CPP_SPEC64 \"-D__64BIT__\"\n #define CPP_SPEC_COMMON \"%{posix: -D_POSIX_SOURCE} \\"}, {"sha": "b5cef42610f7645762ad8cd2866e0b727b7a97c4", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -74,16 +74,6 @@\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\t\\\n-  do {\t\t\t\t\t\t\t\\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\\\n-    /*TODO: rust actually has \"macos\", \"ios\", and \"tvos\" for darwin targets, but gcc seems to have no*/ \\\n-    /*current support for them, so assuming that target_os is always macos for now*/ \\\n-    builtin_rust_info (\"target_os\", \"macos\");\t\\\n-    builtin_rust_info (\"target_vendor\", \"apple\");\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\\\n-  } while (0)\n-\n #define SUBTARGET_OVERRIDE_OPTIONS darwin_rs6000_override_options ()\n \n #define C_COMMON_OVERRIDE_OPTIONS do {\t\t\t\t\t\\"}, {"sha": "e58283fe5d4eb96ad597c16dcee63db91efe854a", "filename": "gcc/config/rs6000/eabi.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Feabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Feabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabi.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -39,15 +39,3 @@\n       TARGET_OS_SYSV_CPP_BUILTINS ();     \\\n     }                                     \\\n   while (0)\n-\n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in eabi.h (rs6000) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()                 \\\n-  do {                                        \\\n-    /*TODO: values here are assumed from rustc's \"bare metal\" template*/ \\\n-    builtin_rust_info (\"target_family\", \"\");  \\\n-    builtin_rust_info (\"target_os\", \"none\");  \\\n-    builtin_rust_info (\"target_vendor\", \"\");  \\\n-    builtin_rust_info (\"target_env\", \"\");     \\\n-  } while (0)"}, {"sha": "5b931ed737f55e47c5a7831de34a823635017001", "filename": "gcc/config/rs6000/eabisim.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Feabisim.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Feabisim.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabisim.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -34,18 +34,6 @@\n     }                                      \\\n   while (0)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in eabisim.h (rs6000) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()                 \\\n-  do {                                        \\\n-    /*TODO: values here are assumed from rustc's \"bare metal\" template*/ \\\n-    builtin_rust_info (\"target_family\", \"\");  \\\n-    builtin_rust_info (\"target_os\", \"none\");  \\\n-    builtin_rust_info (\"target_vendor\", \"\");  \\\n-    builtin_rust_info (\"target_env\", \"\");     \\\n-  } while (0)\n-\n /* Make the simulator the default */\n #undef\tLIB_DEFAULT_SPEC\n #define LIB_DEFAULT_SPEC \"%(lib_sim)\""}, {"sha": "e6a3223b244cba28647c998348f7f0261e426a23", "filename": "gcc/config/rs6000/linux.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -59,13 +59,6 @@\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n-/* Override less-specific rs6000/sysv4.h definition. */\n-#undef TARGET_RUST_OS_INFO\n-#define TARGET_RUST_OS_INFO()          \\\n-  do {                                 \\\n-    GNU_USER_TARGET_RUST_OS_INFO();\t\t\\\n-  } while (0)\n-\n #undef\tCPP_OS_DEFAULT_SPEC\n #define CPP_OS_DEFAULT_SPEC \"%(cpp_os_linux)\"\n "}, {"sha": "d617f346f81a7b0deff19ff5601e6dcf1d845fa6", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -312,13 +312,6 @@ extern int dot_symbols;\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n-/* Override less-specific rs6000/sysv4.h definition. */\n-#undef TARGET_RUST_OS_INFO\n-#define TARGET_RUST_OS_INFO()          \\\n-  do {                                 \\\n-    GNU_USER_TARGET_RUST_OS_INFO();\t\t\\\n-  } while (0)\n-\n #undef  CPP_OS_DEFAULT_SPEC\n #define CPP_OS_DEFAULT_SPEC \"%(cpp_os_linux) %(include_extra)\"\n "}, {"sha": "dcf5fc40e90d546d71852ab17d497fd976c648b0", "filename": "gcc/config/rs6000/lynx.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flynx.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -71,18 +71,6 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in lynx.h (rs6000) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    /*TODO: not supported by rustc and so subject to change - based on llvm triple*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\\\n-    builtin_rust_info (\"target_os\", \"lynxos\");\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\\\n-  } while (0)\n-\n /* LynxOS does not do anything with .fixup plus let's not create\n    writable section for linkonce.r and linkonce.t.  */\n "}, {"sha": "7830f0ed719dc23032c26ce2fe07b21af7359853", "filename": "gcc/config/rs6000/netbsd.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fnetbsd.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -34,14 +34,6 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in netbsd.h (rs6000) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()          \\\n-  do {                                 \\\n-    NETBSD_TARGET_RUST_OS_INFO();\t\t\\\n-  } while (0)\n-\n /* Override the default from rs6000.h to avoid conflicts with macros\n    defined in NetBSD header files.  */\n "}, {"sha": "59fe1c8cb8bb9b262bb83cc8eaeb456e9f174c2c", "filename": "gcc/config/rs6000/rs6000-logue.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Frs6000-logue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Frs6000-logue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-logue.cc?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -5324,13 +5324,12 @@ rs6000_output_function_epilogue (FILE *file)\n \t use language_string.\n \t C is 0.  Fortran is 1.  Ada is 3.  Modula-2 is 8.  C++ is 9.\n \t Java is 13.  Objective-C is 14.  Objective-C++ isn't assigned\n-\t a number, so for now use 9.  LTO, Go, D, Rust, and JIT aren't\n-\t assigned numbers either, so for now use 0.  */\n+\t a number, so for now use 9.  LTO, Go, D, and JIT aren't assigned\n+\t numbers either, so for now use 0.  */\n       if (lang_GNU_C ()\n \t  || ! strcmp (language_string, \"GNU GIMPLE\")\n \t  || ! strcmp (language_string, \"GNU Go\")\n \t  || ! strcmp (language_string, \"GNU D\")\n-\t  || ! strcmp (language_string, \"GNU Rust\")\n \t  || ! strcmp (language_string, \"libgccjit\"))\n \ti = 0;\n       else if (! strcmp (language_string, \"GNU F77\")"}, {"sha": "e322ac0c1990bec789af5168598794826cbe2703", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -329,9 +329,6 @@ extern void (*rs6000_target_modify_macros_ptr) (bool, HOST_WIDE_INT,\n extern void rs6000_d_target_versions (void);\n extern void rs6000_d_register_target_info (void);\n \n-/* Declare functions in rs6000-rust.cc  */\n-extern void rs6000_rust_target_cpu_info (void);\n-\n #ifdef NO_DOLLAR_IN_LABEL\n const char * rs6000_xcoff_strip_dollar (const char *);\n #endif"}, {"sha": "5fdb8f2c82cdd8a0ae5a5a3823f62a1f1183ebc7", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -650,9 +650,6 @@ extern unsigned char rs6000_recip_bits[];\n #define TARGET_D_CPU_VERSIONS rs6000_d_target_versions\n #define TARGET_D_REGISTER_CPU_TARGET_INFO rs6000_d_register_target_info\n \n-/* Target CPU info for Rust.  */\n-#define TARGET_RUST_CPU_INFO rs6000_rust_target_cpu_info\n-\n /* This is used by rs6000_cpu_cpp_builtins to indicate the byte order\n    we're compiling for.  Some configurations may need to override it.  */\n #define RS6000_CPU_CPP_ENDIAN_BUILTINS()\t\\"}, {"sha": "a6520aa363d334e717313f304ddba9477074daaa", "filename": "gcc/config/rs6000/rtems.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frtems.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -72,19 +72,6 @@\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in rtems.h (rs6000) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n-    /*everything is subject to change, especially target_env and target_family*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n-    builtin_rust_info (\"target_os\", \"rtems\");\t\t\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n-  } while (0)\n-\n /* Copy and paste from linux64.h and freebsd64.h */\n #undef RELOCATABLE_NEEDS_FIXUP\n #define RELOCATABLE_NEEDS_FIXUP \\"}, {"sha": "7e2519de5d484080c373387de843622f24366ff8", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -547,19 +547,6 @@ extern int fixuplabelno;\n   while (0)\n #endif\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in sysv4.h (rs6000) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    /*TODO: everything in here is just guessed from gcc triples and assumptions - nothing really*/ \\\n-    /*targets system v anymore so hard to find info on it. as such, everything subject to change*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n-    builtin_rust_info (\"target_os\", \"sysv4\");\t\t\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n-  } while (0)\n-\n /* Select one of BIG_OPT, LITTLE_OPT or DEFAULT_OPT depending\n    on various -mbig, -mlittle and -mcall- options.  */\n #define ENDIAN_SELECT(BIG_OPT, LITTLE_OPT, DEFAULT_OPT)\t\\"}, {"sha": "90079ced168f3802fffc67b1669b96c9a47a6973", "filename": "gcc/config/rs6000/t-rs6000", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-rs6000?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -39,10 +39,6 @@ rs6000-d.o: $(srcdir)/config/rs6000/rs6000-d.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n-rs6000-rust.o: $(srcdir)/config/rs6000/rs6000-rust.cc\n-\t$(COMPILE) $<\n-\t$(POSTCOMPILE)\n-\n rs6000-logue.o: $(srcdir)/config/rs6000/rs6000-logue.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)"}, {"sha": "4f6d116929b67a2ec10ca3f51bcf8c096c0e4209", "filename": "gcc/config/rs6000/vxworks.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frs6000%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvxworks.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -103,13 +103,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\\\n   while (0)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in vxworks.h (rs6000) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\t\\\n-  do {\t\t\t\\\n-    VXWORKS_TARGET_RUST_OS_INFO ();\t\t\t\\\n-  } while (0)\n \n #define VX_CPUDEF(CPUID) \\\n   \":-D\" VX_CPU_PREFIX \"CPU=\" VX_CPU_PREFIX #CPUID"}, {"sha": "73bd579d8f61729a3052df33a159e620eac7a39e", "filename": "gcc/config/rx/rx-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frx%2Frx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frx%2Frx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx-protos.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -171,7 +171,4 @@ rx_find_use_of_reg (rtx reg, rtx_insn* insn, F stepfunc)\n \n #endif\n \n-/* Routines implemented in rx-rust.cc  */\n-extern void rx_rust_target_cpu_info (void);\n-\n #endif /* GCC_RX_PROTOS_H */"}, {"sha": "ce9c2ff12785b6c1f29acff1ad1150eae5801c58", "filename": "gcc/config/rx/rx.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frx%2Frx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frx%2Frx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -75,8 +75,6 @@\n     }                                           \\\n   while (0)\n \n-#define TARGET_RUST_CPU_INFO rx_rust_target_cpu_info\n-\n #undef  CC1_SPEC\n #define CC1_SPEC \"\\\n   %{mas100-syntax:%{gdwarf*:%e-mas100-syntax is incompatible with -gdwarf}} \\"}, {"sha": "18c94f0b97be86657dcfc974ff7783049dc0733e", "filename": "gcc/config/rx/t-rx", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frx%2Ft-rx", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Frx%2Ft-rx", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Ft-rx?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -35,7 +35,3 @@ MULTILIB_MATCHES    = nofpu=mnofpu  nofpu=mcpu?rx200  nofpu=mcpu?rx100\n \n MULTILIB_EXCEPTIONS =\n MULTILIB_EXTRA_OPTS = \n-\n-rx-rust.o: $(srcdir)/config/rx/rx-rust.cc \\\n-  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}, {"sha": "d7b7e7a7b02b34aa428bb1e3b3b21d3c46cfe0ba", "filename": "gcc/config/s390/linux.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fs390%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fs390%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Flinux.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -48,11 +48,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    GNU_USER_TARGET_RUST_OS_INFO();\t\\\n-  } while (0)\n-\n \n /* Target specific assembler settings.  */\n /* Rewrite -march=arch* options to the original CPU name in order to"}, {"sha": "e62515958706c0342170f9bbd3fe580982f0165a", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -179,9 +179,6 @@ extern bool s390_const_operand_ok (tree, int, int, tree);\n extern void s390_d_target_versions (void);\n extern void s390_d_register_target_info (void);\n \n-/* Routines implemented in s390-rust.cc  */\n-extern void s390_rust_target_cpu_info (void);\n-\n /* Pass management.  */\n namespace gcc { class context; }\n class rtl_opt_pass;"}, {"sha": "5a64048a5a18bf4c3d7678755ebd2aeb10549259", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -251,9 +251,6 @@ enum processor_flags\n #define TARGET_D_CPU_VERSIONS s390_d_target_versions\n #define TARGET_D_REGISTER_CPU_TARGET_INFO s390_d_register_target_info\n \n-/* Target CPU info for Rust.  */\n-#define TARGET_RUST_CPU_INFO s390_rust_target_cpu_info\n-\n #ifdef DEFAULT_TARGET_64BIT\n #define TARGET_DEFAULT     (MASK_64BIT | MASK_ZARCH | MASK_HARD_DFP\t\\\n \t\t\t    | MASK_OPT_HTM | MASK_OPT_VX)"}, {"sha": "767df107cccf82696abcdd72fd5f687d495d3223", "filename": "gcc/config/s390/t-s390", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fs390%2Ft-s390", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fs390%2Ft-s390", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Ft-s390?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -30,7 +30,3 @@ s390-c.o: $(srcdir)/config/s390/s390-c.cc \\\n s390-d.o: $(srcdir)/config/s390/s390-d.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n-\n-s390-rust.o: $(srcdir)/config/s390/s390-rust.cc \\\n-  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}, {"sha": "26469cb333824225d0b539d63b779d2a7d23a206", "filename": "gcc/config/s390/tpf.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fs390%2Ftpf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fs390%2Ftpf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Ftpf.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -69,19 +69,6 @@ along with GCC; see the file COPYING3.  If not see\n     }                                           \\\n   while (0)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in tpf.h (s390) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\t\\\n-  do {\t\t\t\\\n-    /*TODO: everything in here is just guessed from gcc triples as rustc has no support*/ \\\n-    /*as such, stuff subject to change*/ \\\n-    builtin_rust_info (\"target_family\", \"\");\t\t\t\\\n-    builtin_rust_info (\"target_os\", \"tpf\");\t\t\t\\\n-    builtin_rust_info (\"target_vendor\", \"ibm\");\t\t\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n-  } while (0)\n-\n \n #define EXTRA_SPECS                             \\\n   { \"entry_spec\", ENTRY_SPEC }"}, {"sha": "d96d077c99e93e5cb5a691b1cca47e963fb936ce", "filename": "gcc/config/sh/linux.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsh%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsh%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Flinux.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -37,11 +37,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    GNU_USER_TARGET_RUST_OS_INFO();\t\\\n-  } while (0)\n-\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT \\\n   (TARGET_CPU_DEFAULT | TARGET_ENDIAN_DEFAULT | TARGET_OPT_DEFAULT)"}, {"sha": "f18e6b08f0c548c9f1ec16d8092f1aeb44c62456", "filename": "gcc/config/sh/netbsd-elf.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsh%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsh%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fnetbsd-elf.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -35,11 +35,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    NETBSD_TARGET_RUST_OS_INFO();\t\\\n-  } while (0)\n-\n /* Provide a LINK_SPEC appropriate for a NetBSD/sh ELF target.\n    We use the SH_LINK_SPEC from sh/sh.h, and define the appropriate\n    SUBTARGET_LINK_SPEC that pulls in what we need from a generic"}, {"sha": "8b9c33b53f00746c922d54c37a6f04fe529e85ce", "filename": "gcc/config/sh/rtems.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsh%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsh%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Frtems.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -29,13 +29,3 @@\n   builtin_define( \"__rtems__\" );\t\t\\\n   builtin_assert( \"system=rtems\" );\t\t\\\n } while (0)\n-\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n-    /*everything is subject to change, especially target_env and target_family*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n-    builtin_rust_info (\"target_os\", \"rtems\");\t\t\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n-  } while (0)"}, {"sha": "71908263a6db47215472977b6c00246a26a9b28e", "filename": "gcc/config/sh/rtemself.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsh%2Frtemself.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsh%2Frtemself.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Frtemself.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -29,13 +29,3 @@\n   builtin_define( \"__rtems__\" );\t\t\\\n   builtin_assert( \"system=rtems\" );\t\t\\\n } while (0)\n-\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n-    /*everything is subject to change, especially target_env and target_family*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n-    builtin_rust_info (\"target_os\", \"rtems\");\t\t\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n-  } while (0)"}, {"sha": "44a4bdfe202c4ed593b06aa6d6ee77b164541afc", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -313,9 +313,6 @@ sh_cbranch_distance (rtx_insn* cbranch_insn,\n \n extern void sh_cpu_cpp_builtins (cpp_reader* pfile);\n \n-/* Routines implemented in sh-rust.cc  */\n-extern void sh_rust_target_cpu_info (void);\n-\n extern const char *output_jump_label_table (void);\n extern rtx get_t_reg_rtx (void);\n extern void sh_expand_prologue (void);"}, {"sha": "4f209d2319fde5056157eddc83267bcf8ed5eb0f", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -31,8 +31,6 @@ extern int code_for_indirect_jump_scratch;\n \n #define TARGET_CPU_CPP_BUILTINS() sh_cpu_cpp_builtins (pfile)\n \n-#define TARGET_RUST_CPU_INFO sh_rust_target_cpu_info\n-\n /* Value should be nonzero if functions must have frame pointers.\n    Zero means the frame pointer need not be set up (and parms may be accessed\n    via the stack pointer) in functions that seem suitable.  */"}, {"sha": "dd5652e11bfb6eea4a0ad51ff439ffcc567676d9", "filename": "gcc/config/sh/t-sh", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsh%2Ft-sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsh%2Ft-sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-sh?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -25,10 +25,6 @@ sh-c.o: $(srcdir)/config/sh/sh-c.cc \\\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(srcdir)/config/sh/sh-c.cc\n \n-sh-rust.o: $(srcdir)/config/sh/sh-rust.cc \\\n-  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n-\n sh_treg_combine.o: $(srcdir)/config/sh/sh_treg_combine.cc \\\n   $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(TM_H) $(TM_P_H) coretypes.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}, {"sha": "ae31a63b767a6c1111af603f7ac30f78927cc9b5", "filename": "gcc/config/sh/vxworks.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsh%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsh%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fvxworks.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -28,11 +28,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    VXWORKS_TARGET_RUST_OS_INFO ();\t\t\\\n-  } while (0)\n-\n #undef SUBTARGET_OVERRIDE_OPTIONS\n #define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\\"}, {"sha": "e22c70c45aea09fb40f09e48350cefb335927620", "filename": "gcc/config/sol2.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -124,16 +124,6 @@ along with GCC; see the file COPYING3.  If not see\n     solaris_override_options ();\t\t\t\\\n   } while (0)\n \n-#define EXTRA_TARGET_RUST_OS_INFO()\n-#define TARGET_RUST_OS_INFO()\t\t\t\\\n-  do {\t\t\t\\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n-    builtin_rust_info (\"target_os\", \"solaris\");\t\t\t\\\n-    builtin_rust_info (\"target_vendor\", \"sun\");\t\t\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n-    EXTRA_TARGET_RUST_OS_INFO();\t\t\t\\\n-  } while (0)\n-\n #if DEFAULT_ARCH32_P\n #define MULTILIB_DEFAULTS { \"m32\" }\n #else"}, {"sha": "6a809e9092d7df778e91f6681d4884a097235e16", "filename": "gcc/config/sparc/linux.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsparc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsparc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -27,11 +27,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    GNU_USER_TARGET_RUST_OS_INFO();\t\t\\\n-  } while (0)\n-\n #undef  ENDFILE_SPEC\n #define ENDFILE_SPEC \\\n   GNU_USER_TARGET_ENDFILE_SPEC \\"}, {"sha": "46823b62a3f37e58a5995424e3db10d3a8b0d5d8", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -30,11 +30,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    GNU_USER_TARGET_RUST_OS_INFO();\t\t\\\n-  } while (0)\n-\n /* On Linux, the combination sparc64-* --with-cpu=v8 is supported and\n    selects a 32-bit compiler.  */\n #if defined(TARGET_64BIT_DEFAULT) && TARGET_CPU_DEFAULT >= TARGET_CPU_v9"}, {"sha": "af194df3ed34b19abfb14f4fd33bfdd52950abe3", "filename": "gcc/config/sparc/netbsd-elf.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -35,11 +35,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    NETBSD_TARGET_RUST_OS_INFO();\t\t\\\n-  } while (0)\n-\n /* CPP defines used by all NetBSD targets.  */\n #undef CPP_SUBTARGET_SPEC\n #define CPP_SUBTARGET_SPEC \"%(netbsd_cpp_spec)\""}, {"sha": "3ca1e0a03619055e3324c0cd0de06fb985a2be17", "filename": "gcc/config/sparc/openbsd64.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsparc%2Fopenbsd64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsparc%2Fopenbsd64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fopenbsd64.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -41,11 +41,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    OPENBSD_TARGET_RUST_OS_INFO();\t\t\\\n-  } while (0)\n-\n #undef ASM_SPEC\n #define ASM_SPEC \"\\\n -s %{\" FPIE_OR_FPIC_SPEC \":-K PIC} \\"}, {"sha": "b40baf2f8edbf30b4f4114ce36727e24cd0e6e9f", "filename": "gcc/config/sparc/rtemself.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsparc%2Frtemself.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsparc%2Frtemself.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Frtemself.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -38,19 +38,6 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in rtemself.h (sparc) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n-    /*everything is subject to change, especially target_env and target_family*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n-    builtin_rust_info (\"target_os\", \"rtems\");\t\t\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n-  } while (0)\n-\n /* Use the default */\n #undef LINK_GCC_C_SEQUENCE_SPEC\n "}, {"sha": "f9e1c74554d3add865435f72ef255b901e667cf6", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -116,7 +116,4 @@ extern rtl_opt_pass *make_pass_work_around_errata (gcc::context *);\n extern void sparc_d_target_versions (void);\n extern void sparc_d_register_target_info (void);\n \n-/* Routines implemented in sparc-rust.cc  */\n-extern void sparc_rust_target_cpu_info (void);\n-\n #endif /* __SPARC_PROTOS_H__ */"}, {"sha": "2e17fca197a33962a41563c81466a06a1031d57a", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -31,9 +31,6 @@ along with GCC; see the file COPYING3.  If not see\n #define TARGET_D_CPU_VERSIONS sparc_d_target_versions\n #define TARGET_D_REGISTER_CPU_TARGET_INFO sparc_d_register_target_info\n \n-/* Target CPU info for Rust.  */\n-#define TARGET_RUST_CPU_INFO sparc_rust_target_cpu_info\n-\n /* Specify this in a cover file to provide bi-architecture (32/64) support.  */\n /* #define SPARC_BI_ARCH */\n "}, {"sha": "2dd06c94ece32c969754197aca7d598bcdc640e0", "filename": "gcc/config/sparc/t-sparc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsparc%2Ft-sparc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsparc%2Ft-sparc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ft-sparc?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -28,10 +28,6 @@ sparc-d.o: $(srcdir)/config/sparc/sparc-d.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n-sparc-rust.o: $(srcdir)/config/sparc/sparc-rust.cc \\\n-  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n-\n # Hack around PR bootstrap/92002.\n tree-ssanames.o-warn += -Wno-error=uninitialized -Wno-error=maybe-uninitialized\n wide-int.o-warn += -Wno-error=uninitialized -Wno-error=maybe-uninitialized"}, {"sha": "c9ce2d22a51213b2a0b98c892ce829518b1ab199", "filename": "gcc/config/sparc/vxworks.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsparc%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fsparc%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fvxworks.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -27,11 +27,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    VXWORKS_TARGET_RUST_OS_INFO ();\t\t\\\n-  } while (0)\n-\n #undef SUBTARGET_OVERRIDE_OPTIONS\n #define SUBTARGET_OVERRIDE_OPTIONS VXWORKS_OVERRIDE_OPTIONS\n "}, {"sha": "aae1f9520997040171cf49189bab42f9dd9414b7", "filename": "gcc/config/tilegx/linux.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Ftilegx%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Ftilegx%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Flinux.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -18,12 +18,6 @@\n    along with GCC; see the file COPYING3.  If not see\n    <http://www.gnu.org/licenses/>.  */\n \n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    /*TODO: ensure that this is all that needs to be defined*/ \\\n-    GNU_USER_TARGET_RUST_OS_INFO ();\t\t\\\n-  } while (0)\n-\n #undef CPP_SPEC\n #define CPP_SPEC \"%{pthread:-D_REENTRANT}\"\n "}, {"sha": "3f1c25de4185ac79e6934d3bf0af193716b90fb2", "filename": "gcc/config/tilegx/tilegx.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Ftilegx%2Ftilegx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Ftilegx%2Ftilegx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -54,21 +54,6 @@\n #define TARGET_CPU_CPP_BUILTINS() \\\n   tilegx_cpu_cpp_builtins (pfile)\n \n-#define TARGET_RUST_CPU_INFO()\t\t    \\\n-  do {\t\t    \\\n-    rust_add_target_info(\"target_arch\", \"tilegx\");\t\t    \\\n-    if (tilegx_cpu == 0)\t\t    \\\n-      rust_add_target_info(\"target_feature\", \"cpu-tilegx\");\t\t    \\\n-    if (TARGET_32BIT)\t\t    \\\n-      rust_add_target_info(\"target_feature\", \"32\");\t\t    \\\n-    else\t\t    \\\n-      rust_add_target_info(\"target_feature\", \"64\");\t\t    \\\n-    if (tilegx_cmodel == CM_SMALL)\t\t    \\\n-      rust_add_target_info(\"target_feature\", \"cmodel-small\");\t\t    \\\n-    else if (tilegx_cmodel == CM_LARGE)\t\t    \\\n-      rust_add_target_info(\"target_feature\", \"cmodel-large\");\t\t    \\\n-  } while (0)\n-\n #undef PTRDIFF_TYPE\n #define PTRDIFF_TYPE (TARGET_32BIT ? \"int\" : \"long int\")\n "}, {"sha": "65a411e109f2eca07d8960be7f4e6a6a73d24ee7", "filename": "gcc/config/tilepro/linux.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Ftilepro%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Ftilepro%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Flinux.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -18,12 +18,6 @@\n    along with GCC; see the file COPYING3.  If not see\n    <http://www.gnu.org/licenses/>.  */\n \n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    /*TODO: ensure that this is all that needs to be defined*/ \\\n-    GNU_USER_TARGET_RUST_OS_INFO ();\t\t\\\n-  } while (0)\n-\n #undef CPP_SPEC\n #define CPP_SPEC \"%{pthread:-D_REENTRANT}\"\n "}, {"sha": "6c37aba9c44eb810312319c90ee0030d722bfdee", "filename": "gcc/config/tilepro/tilepro.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Ftilepro%2Ftilepro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Ftilepro%2Ftilepro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -34,14 +34,6 @@\n #define TARGET_CPU_CPP_BUILTINS() \\\n   tilepro_cpu_cpp_builtins (pfile)\n \n-#define TARGET_RUST_CPU_INFO()\t\t    \\\n-  do {\t\t    \\\n-    rust_add_target_info(\"target_arch\", \"tilepro\");\t\t    \\\n-    rust_add_target_info(\"target_feature\", \"32\");\t\t    \\\n-    if (tilepro_cpu == 0)\t\t    \\\n-      rust_add_target_info(\"target_feature\", \"cpu-tilepro\");\t\t    \\\n-  } while (0)\n-\n #undef PTRDIFF_TYPE\n #define PTRDIFF_TYPE \"int\"\n "}, {"sha": "96948b63f06bf52be2aeb091ff33285ac829bcd3", "filename": "gcc/config/v850/rtems.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fv850%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fv850%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Frtems.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -32,16 +32,6 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n-    /*everything is subject to change, especially target_env and target_family*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n-    builtin_rust_info (\"target_os\", \"rtems\");\t\t\t\\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n-    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n-  } while (0)\n-\n /* Map mv850e1 and mv850es to mv850e to match MULTILIB_MATCHES */\n #undef  ASM_SPEC\n #define ASM_SPEC \"%{mv850es:-mv850e} \\"}, {"sha": "275ee8fccb34e2e0667f44ad5981463685ad6eb3", "filename": "gcc/config/v850/t-v850", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fv850%2Ft-v850", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fv850%2Ft-v850", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Ft-v850?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -30,10 +30,6 @@ v850-c.o: $(srcdir)/config/v850/v850-c.cc $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(srcdir)/config/v850/v850-c.cc \n \n-v850-rust.o: $(srcdir)/config/v850/v850-rust.cc \\\n-  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n-\n # Local Variables:\n # mode: Makefile\n # End:"}, {"sha": "890552b20d992a75397cdd99ae6b41acd59792be", "filename": "gcc/config/v850/v850-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850-protos.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -65,7 +65,4 @@ extern void ghs_pragma_endtda\t\t    (struct cpp_reader *);\n extern void ghs_pragma_endsda\t\t    (struct cpp_reader *);\n extern void ghs_pragma_endzda\t\t    (struct cpp_reader *);\n \n-/* Routines implemented in v850-rust.cc  */\n-extern void v850_rust_target_cpu_info (void);\n-\n #endif /* ! GCC_V850_PROTOS_H */"}, {"sha": "328926eab1d94924134986b6a5383674a947d143", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -156,8 +156,6 @@\n     }\t\t\t\t\t\t\\\n   while(0)\n \n-#define TARGET_RUST_CPU_INFO v850_rust_target_cpu_info\n-\n #define MASK_CPU (MASK_V850 | MASK_V850E | MASK_V850E1 | MASK_V850E2 | MASK_V850E2V3 | MASK_V850E3V5)\n \f\n /* Target machine storage layout */"}, {"sha": "1893b02f752f0615aecfb6e20067bde19f8edeb2", "filename": "gcc/config/vax/linux.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fvax%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fvax%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Flinux.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -20,8 +20,6 @@ along with GCC; see the file COPYING3.  If not see\n \n #define TARGET_OS_CPP_BUILTINS() GNU_USER_TARGET_OS_CPP_BUILTINS()\n \n-#define TARGET_RUST_OS_INFO() GNU_USER_TARGET_RUST_OS_INFO()\n-\n /* We use GAS, G-float double and want new DI patterns.  */\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT (MASK_QMATH | MASK_G_FLOAT)"}, {"sha": "eba9e2877647eb15e35e2c47792c83e9d124badb", "filename": "gcc/config/vax/netbsd-elf.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fvax%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fvax%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fnetbsd-elf.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -27,14 +27,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in netbsd-elf.h (vax) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    NETBSD_TARGET_RUST_OS_INFO();\t\t\\\n-  } while (0)\n-\n #undef CPP_SPEC\n #define CPP_SPEC NETBSD_CPP_SPEC\n "}, {"sha": "85a0721ac680b5873a5dd9972f9318e0fa1e8659", "filename": "gcc/config/vax/openbsd.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fvax%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fvax%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fopenbsd.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -29,11 +29,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    OPENBSD_TARGET_RUST_OS_INFO();\t\t\\\n-  } while (0)\n-\n /* Layout of source language data types.  */\n \n /* This must agree with <machine/ansi.h>  */"}, {"sha": "45c0e75634e0fff9c5bbacdd4239ef6e87c5e4a1", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -33,23 +33,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_CPU_INFO()\t\t    \\\n-  do {\t\t    \\\n-    rust_add_target_info(\"target_arch\", \"vax\");\t\t    \\\n-    if (TARGET_G_FLOAT)\t\t    \\\n-      rust_add_target_info(\"target_feature\", \"g-float\");\t\t    \\\n-    else\t\t    \\\n-      rust_add_target_info(\"target_feature\", \"d-float\");\t\t    \\\n-    if (TARGET_UNIX_ASM)\t\t    \\\n-      rust_add_target_info(\"target_feature\", \"unix-as\");\t\t    \\\n-    else\t\t    \\\n-      rust_add_target_info(\"target_feature\", \"gas\");\t\t    \\\n-    if (TARGET_VAXC_ALIGNMENT)\t\t    \\\n-      rust_add_target_info(\"target_feature\", \"vaxc-alignment\");\t\t    \\\n-    if (TARGET_QMATH)\t\t    \\\n-      rust_add_target_info(\"target_feature\", \"qmath\");\t\t    \\\n-  } while (0)\n-\n /* Use -J option for long branch support with Unix assembler.  */\n \n #define ASM_SPEC \"-J\""}, {"sha": "e9819243728686faaf2c64112d02711d6a54221d", "filename": "gcc/config/visium/visium.h", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fvisium%2Fvisium.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fvisium%2Fvisium.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -80,30 +80,6 @@\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n-#define TARGET_RUST_CPU_INFO()\t\t    \\\n-  do {\t\t    \\\n-    rust_add_target_info(\"target_arch\", \"visium\");\t\t    \\\n-    /*TODO: figure out how to get info from debug, sim and enable-trampolines*/ \\\n-    if (TARGET_FPU)\t\t    \\\n-      rust_add_target_info(\"target_feature\", \"hard-float\");\t\t    \\\n-    else\t\t    \\\n-      rust_add_target_info(\"target_feature\", \"soft-float\");\t\t    \\\n-    if (TARGET_MCM)\t\t    \\\n-      rust_add_target_info(\"target_feature\", \"mcm\");\t\t    \\\n-    else if (visium_cpu_and_features == PROCESSOR_GR5)\t\t    \\\n-      rust_add_target_info(\"target_feature\", \"gr5\");\t\t    \\\n-    else if (visium_cpu_and_features == PROCESSOR_GR6)\t\t    \\\n-      rust_add_target_info(\"target_feature\", \"gas\");\t\t    \\\n-    if (TARGET_SV_MODE)\t\t    \\\n-      rust_add_target_info(\"target_feature\", \"sv-mode\");\t\t    \\\n-    else\t\t    \\\n-      rust_add_target_info(\"target_feature\", \"user-mode\");\t\t    \\\n-    if (TARGET_BMI)\t\t    \\\n-      rust_add_target_info(\"target_feature\", \"bmi\");\t\t    \\\n-    if (TARGET_FPU_IEEE)\t\t    \\\n-      rust_add_target_info(\"target_feature\", \"fpu-ieee\");\t\t    \\\n-  } while (0)\n-\n /* Recast the cpu class to be the cpu attribute.\n    Every file includes us, but not every file includes insn-attr.h.  */\n #define visium_cpu_attr ((enum attr_cpu) visium_cpu)"}, {"sha": "847624aaa9318292be5a332082a75a3e0579c593", "filename": "gcc/config/vms/vms.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fvms%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fvms%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -38,19 +38,6 @@ along with GCC; see the file COPYING3.  If not see\n     builtin_define_with_int_value (\"__VMS_VER\", vms_c_get_vms_ver ());   \\\n   } while (0)\n \n-#define TARGET_RUST_OS_INFO()\t\t\t\t\t \\\n-  do {\t\t\t\t\t \\\n-    /*target_family (and others) are subject to change - no support by rustc so unknown values - TODO*/ \\\n-    /*target_family written as unix because of supposed POSIX-compliance*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n-    builtin_rust_info (\"target_os\", \"vms\");\t\t\t\\\n-    /*target_vendor written as unknown because i don't know what it would be (maybe HP?)*/ \\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n-    /*target_env is empty as not a gnu target environment*/ \\\n-    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n-    SUBTARGET_RUST_OS_INFO();\t\t\t\t\t \\\n-  } while (0)\n-\n extern void vms_c_register_includes (const char *, const char *, int);\n #define TARGET_EXTRA_INCLUDES vms_c_register_includes\n "}, {"sha": "6a5f2f8f2eca6488c67bb31bf1fb972e1314f89f", "filename": "gcc/config/vxworks.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -337,14 +337,6 @@ extern void vxworks_asm_out_destructor (rtx symbol, int priority);\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#define VXWORKS_TARGET_RUST_OS_INFO()\t\t\t\t\t\\\n-  do {\t\t\t\t\t\\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n-    builtin_rust_info (\"target_os\", \"vxworks\");\t\t\t\\\n-    builtin_rust_info (\"target_vendor\", \"wrs\");\t\t\t\\\n-    builtin_rust_info (\"target_env\", \"gnu\");\t\t\t\\\n-  } while (0)\n-\n /* For specific CPU macro definitions expected by the system headers,\n    different versions of VxWorks expect different forms of macros,\n    such as \"_VX_CPU=...\" on Vx7 and some variants of Vx6, or \"CPU=...\""}, {"sha": "0cc45467ab831cbd1bc14593c6d655755554014c", "filename": "gcc/config/vxworksae.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fvxworksae.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fvxworksae.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworksae.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -77,15 +77,6 @@ along with GCC; see the file COPYING3.  If not see\n     }                                                                   \\\n   while (0)\n \n-#define VXWORKS_TARGET_RUST_OS_INFO()\t\t\t\t\t\\\n-  do {\t\t\t\t\t\\\n-    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n-    builtin_rust_info (\"target_os\", \"vxworks\");\t\t\t\\\n-    builtin_rust_info (\"target_vendor\", \"wrs\");\t\t\t\\\n-    builtin_rust_info (\"target_env\", \"gnu\");\t\t\t\\\n-    /*is env correct? vxworks.h implies that this might not come with a gnu toolchain*/ \\\n-  } while (0)\n-\n /* Do VxWorks-specific parts of TARGET_OPTION_OVERRIDE.  */\n \n /* None of the VxWorks AE/653/MILS ports to date has native TLS support.  */"}, {"sha": "edce618fb94e6698c3d36dcdcd2d8c2205cdfa9c", "filename": "gcc/config/xtensa/linux.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fxtensa%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fxtensa%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Flinux.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -20,8 +20,6 @@ along with GCC; see the file COPYING3.  If not see\n \n #define TARGET_OS_CPP_BUILTINS() GNU_USER_TARGET_OS_CPP_BUILTINS()\n \n-#define TARGET_RUST_OS_INFO() GNU_USER_TARGET_RUST_OS_INFO()\n-\n #undef SUBTARGET_CPP_SPEC\n #define SUBTARGET_CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n "}, {"sha": "d47fd6313b44b2e13415ce6c05f61e967254754d", "filename": "gcc/config/xtensa/uclinux.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fxtensa%2Fuclinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fxtensa%2Fuclinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fuclinux.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -27,19 +27,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#ifdef TARGET_RUST_OS_INFO\n-# error \"TARGET_RUST_OS_INFO already defined in uclinux.h (xtensa) - c++ undefines it and redefines it.\"\n-#endif\n-#define TARGET_RUST_OS_INFO()\t\t\\\n-  do {\t\t\t\t\t\\\n-    /*note: as far as I know, rustc does not distinguish between uclinux and regular linux kernels*/ \\\n-    builtin_rust_info (\"target_family\", \"unix\");\t   \\\n-    builtin_rust_info (\"target_os\", \"linux\");\t      \\\n-    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n-    builtin_rust_info (\"target_env\", \"gnu\");\t         \\\n-    /*TODO: is GNU_USER_TARGET_RUST_OS_INFO() better here or is hardcoded stuff fine?*/ \\\n-  } while (0)\n-\n #undef SUBTARGET_CPP_SPEC\n #define SUBTARGET_CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n "}, {"sha": "00e2930b30afac897ba3ece4970a0a2ef785b329", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -90,20 +90,6 @@ along with GCC; see the file COPYING3.  If not see\n       builtin_define (\"__XTENSA_SOFT_FLOAT__\");\t\t\t\t\\\n   } while (0)\n \n-#define TARGET_RUST_CPU_INFO()\t\t    \\\n-  do {\t\t    \\\n-    rust_add_target_info(\"target_arch\", \"xtensa\");\t\t    \\\n-    /*TODO: figure out how to get info from longcalls, target-align and text-section-literals*/ \\\n-    if (TARGET_CONST16)\t\t    \\\n-      rust_add_target_info(\"target_feature\", \"const16\");\t\t    \\\n-    if (TARGET_FORCE_NO_PIC)\t\t    \\\n-      rust_add_target_info(\"target_feature\", \"force-no-pic\");\t\t    \\\n-    if (TARGET_AUTO_LITPOOLS)\t\t    \\\n-      rust_add_target_info(\"target_feature\", \"auto-litpools\");\t\t    \\\n-    if (TARGET_SERIALIZE_VOLATILE)\t\t    \\\n-      rust_add_target_info(\"target_feature\", \"serialize-volatile\");\t\t    \\\n-  } while (0)\n-\n #define CPP_SPEC \" %(subtarget_cpp_spec) \"\n \n #ifndef SUBTARGET_CPP_SPEC"}, {"sha": "fd7227078e4a076375045c2bc1b7e4f699d594f2", "filename": "gcc/configure", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -645,7 +645,6 @@ GMPINC\n GMPLIBS\n target_cpu_default\n d_target_objs\n-rust_target_objs\n fortran_target_objs\n cxx_target_objs\n c_target_objs\n@@ -655,8 +654,6 @@ xm_include_list\n xm_file_list\n tm_d_include_list\n tm_d_file_list\n-tm_rust_include_list\n-tm_rust_file_list\n tm_p_include_list\n tm_p_file_list\n tm_defines\n@@ -12998,7 +12995,6 @@ fi\n tm_file=\"${tm_file} defaults.h\"\n tm_p_file=\"${tm_p_file} tm-preds.h\"\n tm_d_file=\"${tm_d_file} defaults.h\"\n-tm_rust_file=\"${tm_rust_file} defaults.h\"\n host_xm_file=\"auto-host.h ansidecl.h ${host_xm_file}\"\n build_xm_file=\"${build_auto} ansidecl.h ${build_xm_file}\"\n # We don't want ansidecl.h in target files, write code there in ISO/GNU C.\n@@ -13407,21 +13403,6 @@ for f in $tm_d_file; do\n   esac\n done\n \n-tm_rust_file_list=\n-tm_rust_include_list=\"options.h insn-constants.h\"\n-for f in $tm_rust_file; do\n-  case $f in\n-    defaults.h )\n-       tm_rust_file_list=\"${tm_rust_file_list} \\$(srcdir)/$f\"\n-       tm_rust_include_list=\"${tm_rust_include_list} $f\"\n-       ;;\n-    * )\n-       tm_rust_file_list=\"${tm_rust_file_list} \\$(srcdir)/config/$f\"\n-       tm_rust_include_list=\"${tm_rust_include_list} config/$f\"\n-       ;;\n-  esac\n-done\n-\n xm_file_list=\n xm_include_list=\n for f in $xm_file; do"}, {"sha": "40cfd38fe56ceed7fbf5dd96bf3c55a40005c34f", "filename": "gcc/configure.ac", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -2103,7 +2103,6 @@ AC_SUBST(HAVE_AUTO_BUILD)\n tm_file=\"${tm_file} defaults.h\"\n tm_p_file=\"${tm_p_file} tm-preds.h\"\n tm_d_file=\"${tm_d_file} defaults.h\"\n-tm_rust_file=\"${tm_rust_file} defaults.h\"\n host_xm_file=\"auto-host.h ansidecl.h ${host_xm_file}\"\n build_xm_file=\"${build_auto} ansidecl.h ${build_xm_file}\"\n # We don't want ansidecl.h in target files, write code there in ISO/GNU C.\n@@ -2361,21 +2360,6 @@ for f in $tm_d_file; do\n   esac\n done\n \n-tm_rust_file_list=\n-tm_rust_include_list=\"options.h insn-constants.h\"\n-for f in $tm_rust_file; do\n-  case $f in\n-    defaults.h )\n-       tm_rust_file_list=\"${tm_rust_file_list} \\$(srcdir)/$f\"\n-       tm_rust_include_list=\"${tm_rust_include_list} $f\"\n-       ;;\n-    * )\n-       tm_rust_file_list=\"${tm_rust_file_list} \\$(srcdir)/config/$f\"\n-       tm_rust_include_list=\"${tm_rust_include_list} config/$f\"\n-       ;;\n-  esac\n-done\n-\n xm_file_list=\n xm_include_list=\n for f in $xm_file; do\n@@ -7438,8 +7422,6 @@ AC_SUBST(tm_p_file_list)\n AC_SUBST(tm_p_include_list)\n AC_SUBST(tm_d_file_list)\n AC_SUBST(tm_d_include_list)\n-AC_SUBST(tm_rust_file_list)\n-AC_SUBST(tm_rust_include_list)\n AC_SUBST(xm_file_list)\n AC_SUBST(xm_include_list)\n AC_SUBST(xm_defines)\n@@ -7448,7 +7430,6 @@ AC_SUBST(c_target_objs)\n AC_SUBST(cxx_target_objs)\n AC_SUBST(fortran_target_objs)\n AC_SUBST(d_target_objs)\n-AC_SUBST(rust_target_objs)\n AC_SUBST(target_cpu_default)\n \n AC_SUBST_FILE(language_hooks)"}, {"sha": "962bbb8caaf8e1cccd23b0d6c87c2e598bc0174d", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -53,7 +53,6 @@ through the macros defined in the @file{.h} file.\n * PCH Target::          Validity checking for precompiled headers.\n * C++ ABI::             Controlling C++ ABI changes.\n * D Language and ABI::  Controlling D ABI changes.\n-* Rust Language and ABI:: Controlling Rust ABI changes.\n * Named Address Spaces:: Adding support for named address spaces\n * Misc::                Everything else.\n @end menu\n@@ -11062,22 +11061,6 @@ if they have external linkage.  If this flag is false, then instantiated\n decls will be emitted as weak symbols.  The default is @code{false}.\n @end deftypevr\n \n-@node Rust Language and ABI\n-@section Rust ABI parameters\n-@cindex parameters, rust abi\n-\n-@deftypefn {Rust Target Hook} void TARGET_RUST_CPU_INFO (void)\n-Declare all environmental CPU info and features relating to the target CPU\n-using the function @code{rust_add_target_info}, which takes a string representing\n-the feature key and a string representing the feature value.  Configuration pairs\n-predefined by this hook apply to all files that are being compiled.\n-@end deftypefn\n-\n-@deftypefn {Rust Target Hook} void TARGET_RUST_OS_INFO (void)\n-Similar to @code{TARGET_RUST_CPU_INFO}, but is used for configuration info\n-relating to the target operating system.\n-@end deftypefn\n-\n @node Named Address Spaces\n @section Adding support for named address spaces\n @cindex named address spaces"}, {"sha": "394b59e70a68f846bb1a6b7ea6a64af5bd00155b", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -53,7 +53,6 @@ through the macros defined in the @file{.h} file.\n * PCH Target::          Validity checking for precompiled headers.\n * C++ ABI::             Controlling C++ ABI changes.\n * D Language and ABI::  Controlling D ABI changes.\n-* Rust Language and ABI:: Controlling Rust ABI changes.\n * Named Address Spaces:: Adding support for named address spaces\n * Misc::                Everything else.\n @end menu\n@@ -7328,14 +7327,6 @@ floating-point support; they are not included in this mechanism.\n \n @hook TARGET_D_TEMPLATES_ALWAYS_COMDAT\n \n-@node Rust Language and ABI\n-@section Rust ABI parameters\n-@cindex parameters, rust abi\n-\n-@hook TARGET_RUST_CPU_INFO\n-\n-@hook TARGET_RUST_OS_INFO\n-\n @node Named Address Spaces\n @section Adding support for named address spaces\n @cindex named address spaces"}, {"sha": "20ad607b158b1e187cfca00521d5733d01870d7e", "filename": "gcc/genhooks.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fgenhooks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Fgenhooks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenhooks.cc?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -35,7 +35,6 @@ static struct hook_desc hook_array[] = {\n #include \"c-family/c-target.def\"\n #include \"common/common-target.def\"\n #include \"d/d-target.def\"\n-#include \"rust/rust-target.def\"\n #undef DEFHOOK\n };\n "}]}