{"sha": "42110e7b0f32c645e044e814e6d8f44823c7c53d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIxMTBlN2IwZjMyYzY0NWUwNDRlODE0ZTZkOGY0NDgyM2M3YzUzZA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-01-07T10:44:59Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-01-07T10:44:59Z"}, "message": "format.h: New file.\n\n\t* gcc.dg/format/format.h: New file.\n\t* gcc.dg/format/array-1.c, gcc.dg/format/attr-1.c,\n\tgcc.dg/format/branch-1.c, gcc.dg/format/c90-printf-1.c,\n\tgcc.dg/format/c90-printf-2.c, gcc.dg/format/c90-printf-3.c,\n\tgcc.dg/format/c90-scanf-1.c, gcc.dg/format/c90-scanf-2.c,\n\tgcc.dg/format/c90-scanf-3.c, gcc.dg/format/c90-scanf-4.c,\n\tgcc.dg/format/c90-strftime-1.c, gcc.dg/format/c90-strftime-2.c,\n\tgcc.dg/format/c94-printf-1.c, gcc.dg/format/c94-scanf-1.c,\n\tgcc.dg/format/c99-printf-1.c, gcc.dg/format/c99-printf-2.c,\n\tgcc.dg/format/c99-printf-3.c, gcc.dg/format/c99-scanf-1.c,\n\tgcc.dg/format/c99-scanf-2.c, gcc.dg/format/c99-scanf-3.c,\n\tgcc.dg/format/c99-strftime-1.c, gcc.dg/format/c99-strftime-2.c,\n\tgcc.dg/format/diag-1.c, gcc.dg/format/errmk-1.c,\n\tgcc.dg/format/ext-1.c, gcc.dg/format/ext-2.c,\n\tgcc.dg/format/ext-3.c, gcc.dg/format/ext-4.c,\n\tgcc.dg/format/ext-5.c, gcc.dg/format/miss-1.c,\n\tgcc.dg/format/miss-2.c, gcc.dg/format/no-exargs-1.c,\n\tgcc.dg/format/no-y2k-1.c, gcc.dg/format/nonlit-1.c,\n\tgcc.dg/format/nonlit-2.c, gcc.dg/format/nonlit-3.c,\n\tgcc.dg/format/sec-1.c, gcc.dg/format/strfmon-1.c,\n\tgcc.dg/format/va-1.c, gcc.dg/format/warnll-1.c,\n\tgcc.dg/format/xopen-1.c, gcc.dg/format/z-1.c: Include \"format.h\"\n\tinstead of declaring standard types, macros and functions in each\n\ttest.\n\nFrom-SVN: r38767", "tree": {"sha": "09e466d179dd9978c2d5c6df6799a5862c668fec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09e466d179dd9978c2d5c6df6799a5862c668fec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42110e7b0f32c645e044e814e6d8f44823c7c53d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42110e7b0f32c645e044e814e6d8f44823c7c53d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42110e7b0f32c645e044e814e6d8f44823c7c53d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42110e7b0f32c645e044e814e6d8f44823c7c53d/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96a45535c32b2f22650347c5152dd0e791e8582d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96a45535c32b2f22650347c5152dd0e791e8582d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96a45535c32b2f22650347c5152dd0e791e8582d"}], "stats": {"total": 546, "additions": 184, "deletions": 362}, "files": [{"sha": "e24ff842f0474f4fb979b0007f025579db85d484", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -1,3 +1,30 @@\n+2001-01-07  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/format/format.h: New file.\n+\t* gcc.dg/format/array-1.c, gcc.dg/format/attr-1.c,\n+\tgcc.dg/format/branch-1.c, gcc.dg/format/c90-printf-1.c,\n+\tgcc.dg/format/c90-printf-2.c, gcc.dg/format/c90-printf-3.c,\n+\tgcc.dg/format/c90-scanf-1.c, gcc.dg/format/c90-scanf-2.c,\n+\tgcc.dg/format/c90-scanf-3.c, gcc.dg/format/c90-scanf-4.c,\n+\tgcc.dg/format/c90-strftime-1.c, gcc.dg/format/c90-strftime-2.c,\n+\tgcc.dg/format/c94-printf-1.c, gcc.dg/format/c94-scanf-1.c,\n+\tgcc.dg/format/c99-printf-1.c, gcc.dg/format/c99-printf-2.c,\n+\tgcc.dg/format/c99-printf-3.c, gcc.dg/format/c99-scanf-1.c,\n+\tgcc.dg/format/c99-scanf-2.c, gcc.dg/format/c99-scanf-3.c,\n+\tgcc.dg/format/c99-strftime-1.c, gcc.dg/format/c99-strftime-2.c,\n+\tgcc.dg/format/diag-1.c, gcc.dg/format/errmk-1.c,\n+\tgcc.dg/format/ext-1.c, gcc.dg/format/ext-2.c,\n+\tgcc.dg/format/ext-3.c, gcc.dg/format/ext-4.c,\n+\tgcc.dg/format/ext-5.c, gcc.dg/format/miss-1.c,\n+\tgcc.dg/format/miss-2.c, gcc.dg/format/no-exargs-1.c,\n+\tgcc.dg/format/no-y2k-1.c, gcc.dg/format/nonlit-1.c,\n+\tgcc.dg/format/nonlit-2.c, gcc.dg/format/nonlit-3.c,\n+\tgcc.dg/format/sec-1.c, gcc.dg/format/strfmon-1.c,\n+\tgcc.dg/format/va-1.c, gcc.dg/format/warnll-1.c,\n+\tgcc.dg/format/xopen-1.c, gcc.dg/format/z-1.c: Include \"format.h\"\n+\tinstead of declaring standard types, macros and functions in each\n+\ttest.\n+\n 2001-01-06  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* gcc.c-torture/execute/20010106-1.c: New test."}, {"sha": "fa27abe1dee6774c9c1a943e4c777b96b11d3df7", "filename": "gcc/testsuite/gcc.dg/format/array-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Farray-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Farray-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Farray-1.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -3,7 +3,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -Wformat=2\" } */\n \n-extern int printf (const char *, ...);\n+#include \"format.h\"\n \n const char a1[] = \"foo\";\n const char a2[] = \"foo%d\";"}, {"sha": "b92c67a81e7bf9a11b7cb68713354055c48ced39", "filename": "gcc/testsuite/gcc.dg/format/attr-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-1.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -3,5 +3,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -Wformat\" } */\n \n+#include \"format.h\"\n+\n extern void foo0 (const char *) __attribute__((__format__(__strftime__, 1, 0)));\n extern void foo1 (const char *, ...) __attribute__((__format__(__strftime__, 1, 2))); /* { dg-error \"cannot format\" \"strftime first_arg_num != 0\" } */"}, {"sha": "2d07104039000cc19937d47588a510d63ff543fc", "filename": "gcc/testsuite/gcc.dg/format/branch-1.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fbranch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fbranch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fbranch-1.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -3,9 +3,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -Wformat\" } */\n \n-#define NULL ((void *)0)\n-\n-extern int printf (const char *, ...);\n+#include \"format.h\"\n \n void\n foo (long l, int nfoo)\n@@ -25,5 +23,5 @@ foo (long l, int nfoo)\n   printf ((nfoo > 1) ? \"%d foos\" : ((nfoo > 0) ? \"%ld foo\" : \"%d foos\"), nfoo); /* { dg-warning \"long int format\" \"wrong type\" } */\n   /* Extra arguments to NULL should be complained about.  */\n   printf (NULL, \"foo\"); /* { dg-warning \"too many\" \"NULL extra args\" } */\n-  /* { dg-warning \"null\" \"null format arg\" { target *-*-* } 27 } */\n+  /* { dg-warning \"null\" \"null format arg\" { target *-*-* } 25 } */\n }"}, {"sha": "da7bb52e9c6d2af03d33b680b41448cd906f1572", "filename": "gcc/testsuite/gcc.dg/format/c90-printf-1.c", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-1.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -6,19 +6,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=iso9899:1990 -pedantic -Wformat\" } */\n \n-typedef __WCHAR_TYPE__ wchar_t;\n-\n-#ifndef __WINT_TYPE__\n-#define __WINT_TYPE__ unsigned int\n-#endif\n-typedef __WINT_TYPE__ wint_t;\n-\n-__extension__ typedef long long int llong;\n-__extension__ typedef unsigned long long int ullong;\n-\n-extern int printf (const char *, ...);\n-\n-#define NULL ((void *)0)\n+#include \"format.h\"\n \n void\n foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,"}, {"sha": "b9da764b60eb457fa1cced1d570b4a0e0ece1862", "filename": "gcc/testsuite/gcc.dg/format/c90-printf-2.c", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-2.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -5,33 +5,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=iso9899:1990 -pedantic -Wformat\" } */\n \n-typedef __SIZE_TYPE__ size_t;\n-typedef __PTRDIFF_TYPE__ ptrdiff_t;\n-\n-__extension__ typedef long long int llong;\n-\n-/* This next definition is a kludge.  When GCC has a <stdint.h> it\n-   should be used.\n-*/\n-/* (T *) if E is zero, (void *) otherwise.  */\n-#define type_if_not(T, E) __typeof__(0 ? (T *)0 : (void *)(E))\n-\n-/* (T *) if E is nonzero, (void *) otherwise.  */\n-#define type_if(T, E) type_if_not(T, !(E))\n-\n-/* Combine pointer types, all but one (void *).  */\n-#define type_comb2(T1, T2) __typeof__(0 ? (T1)0 : (T2)0)\n-#define type_comb3(T1, T2, T3) type_comb2(T1, type_comb2(T2, T3))\n-\n-#define maybe_int_ptr type_if(int, sizeof(int) == sizeof(llong))\n-#define maybe_long_ptr type_if(long, sizeof(long) == sizeof(llong) && sizeof(long) > sizeof(int))\n-#define maybe_long_long_ptr type_if(llong, sizeof(llong) > sizeof(long))\n-\n-#define intmax_type_ptr type_comb3(maybe_int_ptr, maybe_long_ptr, maybe_long_long_ptr)\n-\n-typedef __typeof__(*((intmax_type_ptr)0)) intmax_t;\n-\n-extern int printf (const char *, ...);\n+#include \"format.h\"\n \n void\n foo (int i, double d, llong ll, intmax_t j, size_t z, ptrdiff_t t)"}, {"sha": "78518a2b6599df2fae8eb0424b9eb7de4938018c", "filename": "gcc/testsuite/gcc.dg/format/c90-printf-3.c", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-3.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -6,28 +6,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=iso9899:1990 -pedantic -Wformat\" } */\n \n-/* This may not be correct in the particular case, but allows the\n-   prototypes to be declared, and we don't try to link.\n-*/\n-typedef struct _FILE FILE;\n-extern FILE *stdout;\n-\n-typedef __SIZE_TYPE__ size_t;\n-typedef __builtin_va_list va_list;\n-\n-extern int fprintf (FILE *, const char *, ...);\n-extern int printf (const char *, ...);\n-extern int sprintf (char *, const char *, ...);\n-extern int vfprintf (FILE *, const char *, va_list);\n-extern int vprintf (const char *, va_list);\n-extern int vsprintf (char *, const char *, va_list);\n-\n-extern int snprintf (char *, size_t, const char *, ...);\n-extern int vsnprintf (char *, size_t, const char *, va_list);\n-\n-extern char *gettext (const char *);\n-extern char *dgettext (const char *, const char *);\n-extern char *dcgettext (const char *, const char *, int);\n+#include \"format.h\"\n \n void\n foo (int i, char *s, size_t n, va_list v0, va_list v1, va_list v2, va_list v3,"}, {"sha": "813b79dd31191411914596704057fa9c033f22b3", "filename": "gcc/testsuite/gcc.dg/format/c90-scanf-1.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-scanf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-scanf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-scanf-1.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -6,14 +6,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=iso9899:1990 -pedantic -Wformat\" } */\n \n-typedef __WCHAR_TYPE__ wchar_t;\n-\n-__extension__ typedef long long int llong;\n-__extension__ typedef unsigned long long int ullong;\n-\n-extern int scanf (const char *, ...);\n-\n-#define NULL ((void *)0)\n+#include \"format.h\"\n \n void\n foo (int *ip, unsigned int *uip, short int *hp, unsigned short int *uhp,"}, {"sha": "52c08921ef9daf4b93ec5a7788af09cac5b501bb", "filename": "gcc/testsuite/gcc.dg/format/c90-scanf-2.c", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-scanf-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-scanf-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-scanf-2.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -5,33 +5,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=iso9899:1990 -pedantic -Wformat\" } */\n \n-typedef __SIZE_TYPE__ size_t;\n-typedef __PTRDIFF_TYPE__ ptrdiff_t;\n-\n-__extension__ typedef long long int llong;\n-\n-/* This next definition is a kludge.  When GCC has a <stdint.h> it\n-   should be used.\n-*/\n-/* (T *) if E is zero, (void *) otherwise.  */\n-#define type_if_not(T, E) __typeof__(0 ? (T *)0 : (void *)(E))\n-\n-/* (T *) if E is nonzero, (void *) otherwise.  */\n-#define type_if(T, E) type_if_not(T, !(E))\n-\n-/* Combine pointer types, all but one (void *).  */\n-#define type_comb2(T1, T2) __typeof__(0 ? (T1)0 : (T2)0)\n-#define type_comb3(T1, T2, T3) type_comb2(T1, type_comb2(T2, T3))\n-\n-#define maybe_int_ptr type_if(int, sizeof(int) == sizeof(llong))\n-#define maybe_long_ptr type_if(long, sizeof(long) == sizeof(llong) && sizeof(long) > sizeof(int))\n-#define maybe_long_long_ptr type_if(llong, sizeof(llong) > sizeof(long))\n-\n-#define intmax_type_ptr type_comb3(maybe_int_ptr, maybe_long_ptr, maybe_long_long_ptr)\n-\n-typedef __typeof__(*((intmax_type_ptr)0)) intmax_t;\n-\n-extern int scanf (const char *, ...);\n+#include \"format.h\"\n \n void\n foo (signed char *hhp, float *fp, llong *llp, intmax_t *jp,"}, {"sha": "9b6f29006f67d56f0399db96624e311905e1c366", "filename": "gcc/testsuite/gcc.dg/format/c90-scanf-3.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-scanf-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-scanf-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-scanf-3.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -5,9 +5,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=iso9899:1990 -pedantic -Wformat\" } */\n \n-typedef __WCHAR_TYPE__ wchar_t;\n-\n-extern int scanf (const char *, ...);\n+#include \"format.h\"\n \n void\n foo (char **sp, wchar_t **lsp)"}, {"sha": "e15dbd22616f8127ddc39270528834d3dd480040", "filename": "gcc/testsuite/gcc.dg/format/c90-scanf-4.c", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-scanf-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-scanf-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-scanf-4.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -6,25 +6,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=iso9899:1990 -pedantic -Wformat\" } */\n \n-/* This may not be correct in the particular case, but allows the\n-   prototypes to be declared, and we don't try to link.\n-*/\n-typedef struct _FILE FILE;\n-extern FILE *stdin;\n-\n-typedef __builtin_va_list va_list;\n-\n-extern int fscanf (FILE *, const char *, ...);\n-extern int scanf (const char *, ...);\n-extern int sscanf (const char *, const char *, ...);\n-\n-extern int vfscanf (FILE *, const char *, va_list);\n-extern int vscanf (const char *, va_list);\n-extern int vsscanf (const char *, const char *, va_list);\n-\n-extern char *gettext (const char *);\n-extern char *dgettext (const char *, const char *);\n-extern char *dcgettext (const char *, const char *, int);\n+#include \"format.h\"\n \n void\n foo (int *ip, char *s, va_list v0, va_list v1, va_list v2, va_list v3,"}, {"sha": "0d75e9194dbd86277e0fba3b52c7ff2effa4e3be", "filename": "gcc/testsuite/gcc.dg/format/c90-strftime-1.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-strftime-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-strftime-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-strftime-1.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -3,11 +3,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=iso9899:1990 -pedantic -Wformat\" } */\n \n-typedef __SIZE_TYPE__ size_t;\n-\n-struct tm;\n-\n-extern size_t strftime (char *, size_t, const char *, const struct tm *);\n+#include \"format.h\"\n \n void\n foo (char *s, size_t m, const struct tm *tp)"}, {"sha": "9742e44d055aada95c013b5aab798ff55026bd28", "filename": "gcc/testsuite/gcc.dg/format/c90-strftime-2.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-strftime-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-strftime-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-strftime-2.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -4,22 +4,18 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=iso9899:1990 -pedantic -Wformat\" } */\n \n-typedef __SIZE_TYPE__ size_t;\n-\n-struct tm;\n-\n-extern size_t strftime (char *, size_t, const char *, const struct tm *);\n+#include \"format.h\"\n \n void\n foo (char *s, size_t m, const struct tm *tp)\n {\n   strftime (s, m, \"%C\", tp); /* { dg-warning \"C\" \"%C not in C90\" } */\n   strftime (s, m, \"%D\", tp); /* { dg-warning \"C\" \"%D not in C90\" } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 17 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 13 } */\n   strftime (s, m, \"%e\", tp); /* { dg-warning \"C\" \"%e not in C90\" } */\n   strftime (s, m, \"%F\", tp); /* { dg-warning \"C\" \"%F not in C90\" } */\n   strftime (s, m, \"%g\", tp); /* { dg-warning \"C\" \"%g not in C90\" } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 21 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 17 } */\n   strftime (s, m, \"%G\", tp); /* { dg-warning \"C\" \"%G not in C90\" } */\n   strftime (s, m, \"%h\", tp); /* { dg-warning \"C\" \"%h not in C90\" } */\n   strftime (s, m, \"%n\", tp); /* { dg-warning \"C\" \"%n not in C90\" } */"}, {"sha": "9ffc8385e62120f6233f7675a5681860bf38fe36", "filename": "gcc/testsuite/gcc.dg/format/c94-printf-1.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc94-printf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc94-printf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc94-printf-1.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -3,14 +3,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=iso9899:199409 -pedantic -Wformat\" } */\n \n-typedef __WCHAR_TYPE__ wchar_t;\n-\n-#ifndef __WINT_TYPE__\n-#define __WINT_TYPE__ unsigned int\n-#endif\n-typedef __WINT_TYPE__ wint_t;\n-\n-extern int printf (const char *, ...);\n+#include \"format.h\"\n \n void\n foo (wint_t lc, wchar_t *ls)"}, {"sha": "1eaad7dbf26803aadd7cf5347d91db153886119f", "filename": "gcc/testsuite/gcc.dg/format/c94-scanf-1.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc94-scanf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc94-scanf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc94-scanf-1.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -3,9 +3,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=iso9899:199409 -pedantic -Wformat\" } */\n \n-typedef __WCHAR_TYPE__ wchar_t;\n-\n-extern int scanf (const char *, ...);\n+#include \"format.h\"\n \n void\n foo (wchar_t *ls)"}, {"sha": "e99015c9374579977d06483ff7b9fcd39085b81e", "filename": "gcc/testsuite/gcc.dg/format/c99-printf-1.c", "status": "modified", "additions": 1, "deletions": 32, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-printf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-printf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-printf-1.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -6,38 +6,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=iso9899:1999 -pedantic -Wformat\" } */\n \n-typedef __WCHAR_TYPE__ wchar_t;\n-typedef __WINT_TYPE__ wint_t;\n-typedef __SIZE_TYPE__ size_t;\n-typedef __PTRDIFF_TYPE__ ptrdiff_t;\n-\n-/* Kludge to get signed type corresponding to size_t.  */\n-#define unsigned signed\n-typedef __SIZE_TYPE__ signed_size_t;\n-#undef unsigned\n-\n-/* These next definitions are kludges.  When GCC has a <stdint.h> it\n-   should be used.\n-*/\n-#include <limits.h>\n-#if INT_MAX == LLONG_MAX\n-typedef int intmax_t;\n-#elif LONG_MAX == LLONG_MAX\n-typedef long intmax_t;\n-#else\n-typedef long long intmax_t;\n-#endif\n-#if UINT_MAX == ULLONG_MAX\n-typedef unsigned int uintmax_t;\n-#elif ULONG_MAX == ULLONG_MAX\n-typedef unsigned long uintmax_t;\n-#else\n-typedef unsigned long long uintmax_t;\n-#endif\n-\n-extern int printf (const char *, ...);\n-\n-#define NULL ((void *)0)\n+#include \"format.h\"\n \n void\n foo (int i, unsigned int u, double d, char *s, void *p, int *n,"}, {"sha": "9efcb0667c40e6eea0079d601d214c62c2fdd968", "filename": "gcc/testsuite/gcc.dg/format/c99-printf-2.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-printf-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-printf-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-printf-2.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -5,11 +5,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=iso9899:1999 -pedantic -Wformat\" } */\n \n-typedef __SIZE_TYPE__ size_t;\n-typedef __WCHAR_TYPE__ wchar_t;\n-typedef __WINT_TYPE__ wint_t;\n-\n-extern int printf (const char *, ...);\n+#include \"format.h\"\n \n void\n foo (int i, long long ll, size_t z, wint_t lc, wchar_t *ls)"}, {"sha": "23ef33d29d00922a578a0c8cf7212130444a58f5", "filename": "gcc/testsuite/gcc.dg/format/c99-printf-3.c", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-printf-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-printf-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-printf-3.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -5,27 +5,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=iso9899:1999 -pedantic -Wformat\" } */\n \n-/* This may not be correct in the particular case, but allows the\n-   prototypes to be declared, and we don't try to link.\n-*/\n-typedef struct _FILE FILE;\n-extern FILE *stdout;\n-\n-typedef __SIZE_TYPE__ size_t;\n-typedef __builtin_va_list va_list;\n-\n-extern int fprintf (FILE *restrict, const char *restrict, ...);\n-extern int printf (const char *restrict, ...);\n-extern int sprintf (char *restrict, const char *restrict, ...);\n-extern int vfprintf (FILE *restrict, const char *restrict, va_list);\n-extern int vprintf (const char *restrict, va_list);\n-extern int vsprintf (char *restrict, const char *restrict, va_list);\n-extern int snprintf (char *restrict, size_t, const char *restrict, ...);\n-extern int vsnprintf (char *restrict, size_t, const char *restrict, va_list);\n-\n-extern char *gettext (const char *);\n-extern char *dgettext (const char *, const char *);\n-extern char *dcgettext (const char *, const char *, int);\n+#include \"format.h\"\n \n void\n foo (int i, char *s, size_t n, va_list v0, va_list v1, va_list v2, va_list v3,"}, {"sha": "7910ece7a70bd8a174b34d123fff67e068347c96", "filename": "gcc/testsuite/gcc.dg/format/c99-scanf-1.c", "status": "modified", "additions": 1, "deletions": 32, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-scanf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-scanf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-scanf-1.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -6,38 +6,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=iso9899:1999 -pedantic -Wformat\" } */\n \n-typedef __WCHAR_TYPE__ wchar_t;\n-typedef __SIZE_TYPE__ size_t;\n-typedef __PTRDIFF_TYPE__ ptrdiff_t;\n-\n-/* Kludges to get types corresponding to size_t and ptrdiff_t.  */\n-#define unsigned signed\n-typedef __SIZE_TYPE__ signed_size_t;\n-#undef unsigned\n-#define signed /* Type might or might not have explicit 'signed'.  */\n-typedef unsigned __PTRDIFF_TYPE__ unsigned_ptrdiff_t;\n-#undef signed\n-\n-/* These next definitions are kludges.  When GCC has a <stdint.h> it\n-   should be used.\n-*/\n-#include <limits.h>\n-#if INT_MAX == LLONG_MAX\n-typedef int intmax_t;\n-#elif LONG_MAX == LLONG_MAX\n-typedef long intmax_t;\n-#else\n-typedef long long intmax_t;\n-#endif\n-#if UINT_MAX == ULLONG_MAX\n-typedef unsigned int uintmax_t;\n-#elif ULONG_MAX == ULLONG_MAX\n-typedef unsigned long uintmax_t;\n-#else\n-typedef unsigned long long uintmax_t;\n-#endif\n-\n-extern int scanf (const char *, ...);\n+#include \"format.h\"\n \n void\n foo (int *ip, unsigned int *uip, short int *hp, unsigned short int *uhp,"}, {"sha": "eedf3e57c103510a12f97bddfd2e8839b5a9ae25", "filename": "gcc/testsuite/gcc.dg/format/c99-scanf-2.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-scanf-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-scanf-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-scanf-2.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -5,9 +5,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=iso9899:1999 -pedantic -Wformat\" } */\n \n-typedef __WCHAR_TYPE__ wchar_t;\n-\n-extern int scanf (const char *, ...);\n+#include \"format.h\"\n \n void\n foo (int *ip, long long int *llp, wchar_t *ls)"}, {"sha": "091a3ea95466510ea643a90f34f07d3cac86eef2", "filename": "gcc/testsuite/gcc.dg/format/c99-scanf-3.c", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-scanf-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-scanf-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-scanf-3.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -5,24 +5,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=iso9899:1999 -pedantic -Wformat\" } */\n \n-/* This may not be correct in the particular case, but allows the\n-   prototypes to be declared, and we don't try to link.\n-*/\n-typedef struct _FILE FILE;\n-extern FILE *stdin;\n-\n-typedef __builtin_va_list va_list;\n-\n-extern int fscanf (FILE *restrict, const char *restrict, ...);\n-extern int scanf (const char *restrict, ...);\n-extern int sscanf (const char *restrict, const char *restrict, ...);\n-extern int vfscanf (FILE *restrict, const char *restrict, va_list);\n-extern int vscanf (const char *restrict, va_list);\n-extern int vsscanf (const char *restrict, const char *restrict, va_list);\n-\n-extern char *gettext (const char *);\n-extern char *dgettext (const char *, const char *);\n-extern char *dcgettext (const char *, const char *, int);\n+#include \"format.h\"\n \n void\n foo (int *ip, char *s, va_list v0, va_list v1, va_list v2, va_list v3,"}, {"sha": "a643d2999a6ea896f88295899a86c0b7f76fb9ed", "filename": "gcc/testsuite/gcc.dg/format/c99-strftime-1.c", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-strftime-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-strftime-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-strftime-1.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -3,11 +3,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=iso9899:1999 -pedantic -Wformat\" } */\n \n-typedef __SIZE_TYPE__ size_t;\n-\n-struct tm;\n-\n-extern size_t strftime (char *, size_t, const char *, const struct tm *);\n+#include \"format.h\"\n \n void\n foo (char *s, size_t m, const struct tm *tp)\n@@ -35,19 +31,19 @@ foo (char *s, size_t m, const struct tm *tp)\n   strftime (s, m, \"%EOy\", tp); /* { dg-warning \"multiple|together\" \"multiple %E/%O\" } */\n   strftime (s, m, \"%OEy\", tp); /* { dg-warning \"multiple|together\" \"multiple %E/%O\" } */\n   strftime (s, m, \"%OOV\", tp); /* { dg-warning \"multiple|repeated\" \"multiple %E/%O\" } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 35 } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 36 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 31 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 32 } */\n   strftime (s, m, \"%Ea\", tp); /* { dg-warning \"flag|modifier\" \"bad %Ea\" } */\n   strftime (s, m, \"%EA\", tp); /* { dg-warning \"flag|modifier\" \"bad %EA\" } */\n   strftime (s, m, \"%Eb\", tp); /* { dg-warning \"flag|modifier\" \"bad %Eb\" } */\n   strftime (s, m, \"%EB\", tp); /* { dg-warning \"flag|modifier\" \"bad %EB\" } */\n   strftime (s, m, \"%Ed\", tp); /* { dg-warning \"flag|modifier\" \"bad %Ed\" } */\n   strftime (s, m, \"%ED\", tp); /* { dg-warning \"flag|modifier\" \"bad %ED\" } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 45 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 41 } */\n   strftime (s, m, \"%Ee\", tp); /* { dg-warning \"flag|modifier\" \"bad %Ee\" } */\n   strftime (s, m, \"%EF\", tp); /* { dg-warning \"flag|modifier\" \"bad %EF\" } */\n   strftime (s, m, \"%Eg\", tp); /* { dg-warning \"flag|modifier\" \"bad %Eg\" } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 49 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 45 } */\n   strftime (s, m, \"%EG\", tp); /* { dg-warning \"flag|modifier\" \"bad %EG\" } */\n   strftime (s, m, \"%Eh\", tp); /* { dg-warning \"flag|modifier\" \"bad %Eh\" } */\n   strftime (s, m, \"%EH\", tp); /* { dg-warning \"flag|modifier\" \"bad %EH\" } */\n@@ -75,13 +71,13 @@ foo (char *s, size_t m, const struct tm *tp)\n   strftime (s, m, \"%Ob\", tp); /* { dg-warning \"flag|modifier\" \"bad %Ob\" } */\n   strftime (s, m, \"%OB\", tp); /* { dg-warning \"flag|modifier\" \"bad %OB\" } */\n   strftime (s, m, \"%Oc\", tp); /* { dg-warning \"flag|modifier\" \"bad %Oc\" } */\n-  /* { dg-warning \"in some locales\" \"2-digit year\" { target *-*-* } 77 } */\n+  /* { dg-warning \"in some locales\" \"2-digit year\" { target *-*-* } 73 } */\n   strftime (s, m, \"%OC\", tp); /* { dg-warning \"flag|modifier|C\" \"bad %OC\" } */\n   strftime (s, m, \"%OD\", tp); /* { dg-warning \"flag|modifier\" \"bad %OD\" } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 80 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 76 } */\n   strftime (s, m, \"%OF\", tp); /* { dg-warning \"flag|modifier\" \"bad %OF\" } */\n   strftime (s, m, \"%Og\", tp); /* { dg-warning \"flag|modifier|C\" \"bad %Og\" } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 83 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 79 } */\n   strftime (s, m, \"%OG\", tp); /* { dg-warning \"flag|modifier|C\" \"bad %OG\" } */\n   strftime (s, m, \"%Oh\", tp); /* { dg-warning \"flag|modifier\" \"bad %Oh\" } */\n   strftime (s, m, \"%Oj\", tp); /* { dg-warning \"flag|modifier|C\" \"bad %Oj\" } */\n@@ -92,7 +88,7 @@ foo (char *s, size_t m, const struct tm *tp)\n   strftime (s, m, \"%Ot\", tp); /* { dg-warning \"flag|modifier\" \"bad %Ot\" } */\n   strftime (s, m, \"%OT\", tp); /* { dg-warning \"flag|modifier\" \"bad %OT\" } */\n   strftime (s, m, \"%Ox\", tp); /* { dg-warning \"flag|modifier\" \"bad %Ox\" } */\n-  /* { dg-warning \"in some locales\" \"2-digit year\" { target *-*-* } 94 } */\n+  /* { dg-warning \"in some locales\" \"2-digit year\" { target *-*-* } 90 } */\n   strftime (s, m, \"%OX\", tp); /* { dg-warning \"flag|modifier\" \"bad %OX\" } */\n   strftime (s, m, \"%OY\", tp); /* { dg-warning \"flag|modifier|C\" \"bad %OY\" } */\n   strftime (s, m, \"%Oz\", tp); /* { dg-warning \"flag|modifier|C\" \"bad %Oz\" } */"}, {"sha": "747faa2c22caa73cf2a24d071630c54ed64d5069", "filename": "gcc/testsuite/gcc.dg/format/c99-strftime-2.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-strftime-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-strftime-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-strftime-2.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -3,11 +3,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=iso9899:1999 -pedantic -Wformat\" } */\n \n-typedef __SIZE_TYPE__ size_t;\n-\n-struct tm;\n-\n-extern size_t strftime (char *, size_t, const char *, const struct tm *);\n+#include \"format.h\"\n \n void\n foo (char *s, size_t m, const struct tm *tp)"}, {"sha": "1c9a246165b354c9556ad4d22819164a6740676a", "filename": "gcc/testsuite/gcc.dg/format/diag-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdiag-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdiag-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdiag-1.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -3,7 +3,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -Wformat\" } */\n \n-extern int printf (const char *, ...);\n+#include \"format.h\"\n \n void\n foo (double d)"}, {"sha": "77630ab0a093dbdc10fad2264092e97919f52f89", "filename": "gcc/testsuite/gcc.dg/format/errmk-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Ferrmk-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Ferrmk-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Ferrmk-1.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -3,7 +3,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wformat\" } */\n \n-extern int printf (const char *, ...);\n+#include \"format.h\"\n \n void\n foo (int t)"}, {"sha": "dd780321c0a261c730ae2e7fc9f962b315796c7a", "filename": "gcc/testsuite/gcc.dg/format/ext-1.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-1.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -5,15 +5,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -Wformat\" } */\n \n-/* %q formats want a \"quad\"; GCC considers this to be a long long.  */\n-typedef long long int quad_t;\n-typedef unsigned long long int u_quad_t;\n-\n-typedef __WCHAR_TYPE__ wchar_t;\n-typedef __WINT_TYPE__ wint_t;\n-typedef __SIZE_TYPE__ size_t;\n-\n-extern int printf (const char *, ...);\n+#include \"format.h\"\n \n void\n foo (quad_t q, u_quad_t uq, quad_t *qn, size_t z, size_t *zn, long long int ll,"}, {"sha": "466991b5959a16d97d46cdb88a204147964ef08b", "filename": "gcc/testsuite/gcc.dg/format/ext-2.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-2.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -5,13 +5,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -Wformat\" } */\n \n-/* %q formats want a \"quad\"; GCC considers this to be a long long.  */\n-typedef long long int quad_t;\n-typedef unsigned long long int u_quad_t;\n-\n-typedef __WCHAR_TYPE__ wchar_t;\n-\n-extern int scanf (const char *, ...);\n+#include \"format.h\"\n \n void\n foo (quad_t *qp, u_quad_t *uqp, quad_t *qn, long long int *llp,"}, {"sha": "e71731ed987f81563c1ec970ad80efb1d3e21c54", "filename": "gcc/testsuite/gcc.dg/format/ext-3.c", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-3.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -5,11 +5,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -Wformat\" } */\n \n-typedef __SIZE_TYPE__ size_t;\n-\n-struct tm;\n-\n-extern size_t strftime (char *, size_t, const char *, const struct tm *);\n+#include \"format.h\"\n \n void\n foo (char *s, size_t m, const struct tm *tp)\n@@ -102,6 +98,10 @@ foo (char *s, size_t m, const struct tm *tp)\n   strftime (s, m, \"%-x\", tp); /* { dg-warning \"flag\" \"bad %x\" } */\n   strftime (s, m, \"%_x\", tp); /* { dg-warning \"flag\" \"bad %x\" } */\n   strftime (s, m, \"%0x\", tp); /* { dg-warning \"flag\" \"bad %x\" } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 89 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 90 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 91 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 92 } */\n   /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 93 } */\n   /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 94 } */\n   /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 95 } */\n@@ -110,10 +110,6 @@ foo (char *s, size_t m, const struct tm *tp)\n   /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 98 } */\n   /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 99 } */\n   /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 100 } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 101 } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 102 } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 103 } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 104 } */\n   /* Incorrect usages with GNU extension conversion characters.  */\n   strftime (s, m, \"%5P\", tp); /* { dg-warning \"width\" \"bad %P\" } */\n   strftime (s, m, \"%-P\", tp); /* { dg-warning \"flag\" \"bad %P\" } */\n@@ -193,16 +189,16 @@ foo (char *s, size_t m, const struct tm *tp)\n   strftime (s, m, \"%#x\", tp); /* { dg-warning \"flag\" \"bad %x\" } */\n   strftime (s, m, \"%^y\", tp); /* { dg-warning \"flag\" \"bad %y\" } */\n   strftime (s, m, \"%#y\", tp); /* { dg-warning \"flag\" \"bad %y\" } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 182 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 183 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 184 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 185 } */\n   /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 186 } */\n   /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 187 } */\n   /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 188 } */\n   /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 189 } */\n   /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 190 } */\n   /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 191 } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 192 } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 193 } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 194 } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 195 } */\n   /* GCC also accepts the glibc format extensions %P, %k, %l, %s.  */\n   strftime (s, m, \"%P%k%l%s\", tp);\n   /* GCC also accepts the glibc extension of the \"O\" modifier on some"}, {"sha": "db8250067b057445ca4550f93c2340769ac91727", "filename": "gcc/testsuite/gcc.dg/format/ext-4.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-4.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -3,9 +3,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu89 -Wformat\" } */\n \n-typedef __WCHAR_TYPE__ wchar_t;\n-\n-extern int scanf (const char *, ...);\n+#include \"format.h\"\n \n void\n foo (char **sp, wchar_t **lsp)"}, {"sha": "eebc7faa38c542ccb15178a8c11e3302877c40a7", "filename": "gcc/testsuite/gcc.dg/format/ext-5.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-5.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -3,11 +3,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -Wformat\" } */\n \n-extern int printf (const char *, ...);\n-\n-extern char *gettext (const char *);\n-extern char *dgettext (const char *, const char *);\n-extern char *dcgettext (const char *, const char *, int);\n+#include \"format.h\"\n \n void\n foo (int i, long l)"}, {"sha": "b41ebd924976b2eded0442f97c1831d53f497b9a", "filename": "gcc/testsuite/gcc.dg/format/format.h", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fformat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fformat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fformat.h?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -0,0 +1,93 @@\n+/* Format checking tests: common header.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+\n+#include <stdarg.h>\n+#include <stddef.h>\n+\n+#ifndef _WINT_T\n+#ifndef __WINT_TYPE__\n+#define __WINT_TYPE__ unsigned int\n+#endif\n+typedef __WINT_TYPE__ wint_t;\n+#endif\n+\n+/* Kludges to get types corresponding to size_t and ptrdiff_t.  */\n+#define unsigned signed\n+typedef __SIZE_TYPE__ signed_size_t;\n+/* We also use this type to approximate ssize_t.  */\n+typedef __SIZE_TYPE__ ssize_t;\n+#undef unsigned\n+#define signed /* Type might or might not have explicit 'signed'.  */\n+typedef unsigned __PTRDIFF_TYPE__ unsigned_ptrdiff_t;\n+#undef signed\n+\n+__extension__ typedef long long int llong;\n+__extension__ typedef unsigned long long int ullong;\n+\n+/* %q formats want a \"quad\"; GCC considers this to be a long long.  */\n+typedef llong quad_t;\n+typedef ullong u_quad_t;\n+\n+/* This next definition is a kludge.  When GCC has a <stdint.h> it\n+   should be used.\n+*/\n+/* (T *) if E is zero, (void *) otherwise.  */\n+#define type_if_not(T, E) __typeof__(0 ? (T *)0 : (void *)(E))\n+\n+/* (T *) if E is nonzero, (void *) otherwise.  */\n+#define type_if(T, E) type_if_not(T, !(E))\n+\n+/* Combine pointer types, all but one (void *).  */\n+#define type_comb2(T1, T2) __typeof__(0 ? (T1)0 : (T2)0)\n+#define type_comb3(T1, T2, T3) type_comb2(T1, type_comb2(T2, T3))\n+\n+#define maybe_int_ptr type_if(int, sizeof(int) == sizeof(llong))\n+#define maybe_uint_ptr type_if(unsigned int, sizeof(unsigned int) == sizeof(ullong))\n+#define maybe_long_ptr type_if(long, sizeof(long) == sizeof(llong) && sizeof(long) > sizeof(int))\n+#define maybe_ulong_ptr type_if(unsigned long, sizeof(unsigned long) == sizeof(ullong) && sizeof(unsigned long) > sizeof(unsigned int))\n+#define maybe_long_long_ptr type_if(llong, sizeof(llong) > sizeof(long))\n+#define maybe_ulong_long_ptr type_if(ullong, sizeof(ullong) > sizeof(unsigned long))\n+\n+#define intmax_type_ptr type_comb3(maybe_int_ptr, maybe_long_ptr, maybe_long_long_ptr)\n+#define uintmax_type_ptr type_comb3(maybe_uint_ptr, maybe_ulong_ptr, maybe_ulong_long_ptr)\n+\n+typedef __typeof__(*((intmax_type_ptr)0)) intmax_t;\n+typedef __typeof__(*((uintmax_type_ptr)0)) uintmax_t;\n+\n+#if __STDC_VERSION__ < 199901L\n+#define restrict /* \"restrict\" not in old C standard.  */\n+#endif\n+\n+/* This may not be correct in the particular case, but allows the\n+   prototypes to be declared, and we don't try to link.\n+*/\n+typedef struct _FILE FILE;\n+extern FILE *stdin;\n+extern FILE *stdout;\n+\n+extern int fprintf (FILE *restrict, const char *restrict, ...);\n+extern int printf (const char *restrict, ...);\n+extern int sprintf (char *restrict, const char *restrict, ...);\n+extern int vfprintf (FILE *restrict, const char *restrict, va_list);\n+extern int vprintf (const char *restrict, va_list);\n+extern int vsprintf (char *restrict, const char *restrict, va_list);\n+extern int snprintf (char *restrict, size_t, const char *restrict, ...);\n+extern int vsnprintf (char *restrict, size_t, const char *restrict, va_list);\n+\n+extern int fscanf (FILE *restrict, const char *restrict, ...);\n+extern int scanf (const char *restrict, ...);\n+extern int sscanf (const char *restrict, const char *restrict, ...);\n+extern int vfscanf (FILE *restrict, const char *restrict, va_list);\n+extern int vscanf (const char *restrict, va_list);\n+extern int vsscanf (const char *restrict, const char *restrict, va_list);\n+\n+extern char *gettext (const char *);\n+extern char *dgettext (const char *, const char *);\n+extern char *dcgettext (const char *, const char *, int);\n+\n+struct tm;\n+\n+extern size_t strftime (char *restrict, size_t, const char *restrict,\n+\t\t\tconst struct tm *restrict);\n+\n+extern ssize_t strfmon (char *restrict, size_t, const char *restrict, ...);"}, {"sha": "234578535aa687475fac83a663fde5e4fb379b09", "filename": "gcc/testsuite/gcc.dg/format/miss-1.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-1.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -3,10 +3,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -Wformat -Wmissing-format-attribute\" } */\n \n-#include <stdarg.h>\n-\n-extern int vprintf (const char *restrict, va_list);\n-extern int vscanf (const char *restrict, va_list);\n+#include \"format.h\"\n \n void\n foo (const char *fmt, ...)"}, {"sha": "f3afe2472ebed31a353400f73dcfc595999fe215", "filename": "gcc/testsuite/gcc.dg/format/miss-2.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-2.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -4,9 +4,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -Wformat -Wmissing-format-attribute\" } */\n \n-#include <stdarg.h>\n-\n-extern int vprintf (const char *restrict, va_list);\n+#include \"format.h\"\n \n void\n foo (int i, ...)"}, {"sha": "75247087f28ad7d3aa35209b7da489d28f29f115", "filename": "gcc/testsuite/gcc.dg/format/no-exargs-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fno-exargs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fno-exargs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fno-exargs-1.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -4,7 +4,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -Wformat -Wno-format-extra-args\" } */\n \n-extern int printf (const char *, ...);\n+#include \"format.h\"\n \n void\n foo (int i)"}, {"sha": "ee68cd6db9faa189e9796016c4f39a668fe31d51", "filename": "gcc/testsuite/gcc.dg/format/no-y2k-1.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fno-y2k-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fno-y2k-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fno-y2k-1.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -3,11 +3,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -Wformat -Wno-format-y2k\" } */\n \n-typedef __SIZE_TYPE__ size_t;\n-\n-struct tm;\n-\n-extern size_t strftime (char *, size_t, const char *, const struct tm *);\n+#include \"format.h\"\n \n void\n foo (char *s, size_t m, const struct tm *tp)"}, {"sha": "af0cd372381fd6761c3c8cb43bd5f6cfd7568889", "filename": "gcc/testsuite/gcc.dg/format/nonlit-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fnonlit-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fnonlit-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fnonlit-1.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -3,10 +3,10 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -Wformat -Wformat-nonliteral\" } */\n \n-extern int printf (const char *, ...);\n+#include \"format.h\"\n \n void\n-foo (char *s, __SIZE_TYPE__ i)\n+foo (char *s, size_t i)\n {\n   printf ((const char *)i, i); /* { dg-warning \"argument types\" \"non-literal\" } */\n   printf (s, i); /* { dg-warning \"argument types\" \"non-literal\" } */"}, {"sha": "2ca2e4803754baae61f79dd28f0236942d09312f", "filename": "gcc/testsuite/gcc.dg/format/nonlit-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fnonlit-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fnonlit-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fnonlit-2.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -3,10 +3,10 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -Wformat=2\" } */\n \n-extern int printf (const char *, ...);\n+#include \"format.h\"\n \n void\n-foo (char *s, __SIZE_TYPE__ i)\n+foo (char *s, size_t i)\n {\n   printf ((const char *)i, i); /* { dg-warning \"argument types\" \"non-literal\" } */\n   printf (s, i); /* { dg-warning \"argument types\" \"non-literal\" } */"}, {"sha": "ce94c8c36683f965acc59d0a82c65ababab35e1a", "filename": "gcc/testsuite/gcc.dg/format/nonlit-3.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fnonlit-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fnonlit-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fnonlit-3.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -3,11 +3,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -Wformat -Wformat-nonliteral\" } */\n \n-typedef __SIZE_TYPE__ size_t;\n-\n-struct tm;\n-\n-extern size_t strftime (char *, size_t, const char *, const struct tm *);\n+#include \"format.h\"\n \n void\n foo (char *s, size_t m, const struct tm *tp, char *fmt)"}, {"sha": "9189b51e10d03a10285942aeabe65c9b0840dba9", "filename": "gcc/testsuite/gcc.dg/format/sec-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fsec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fsec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fsec-1.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -3,7 +3,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -Wformat -Wformat-security\" } */\n \n-extern int printf (const char *, ...);\n+#include \"format.h\"\n \n void\n foo (char *s)"}, {"sha": "cf381b87d2defa658c43949e5145fede584fdc5c", "filename": "gcc/testsuite/gcc.dg/format/strfmon-1.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fstrfmon-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fstrfmon-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fstrfmon-1.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -3,16 +3,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -Wformat\" } */\n \n-typedef __SIZE_TYPE__ size_t;\n-\n-/* Kludge to get something that may be ssize_t.  */\n-#define unsigned signed\n-typedef __SIZE_TYPE__ ssize_t;\n-#undef unsigned\n-\n-#define NULL ((void *)0)\n-\n-extern ssize_t strfmon (char *restrict, size_t, const char *restrict, ...);\n+#include \"format.h\"\n \n void\n foo (char *s, size_t m, double d, long double ld)"}, {"sha": "5f5eeab4e84736ba4062c33ea83851c005033217", "filename": "gcc/testsuite/gcc.dg/format/va-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fva-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fva-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fva-1.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -3,7 +3,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wformat\" } */\n \n-extern int printf (const char *, ...);\n+#include \"format.h\"\n \n void\n foo (void *p)"}, {"sha": "2d22776937add211ece82456a4fa0dfcc716232b", "filename": "gcc/testsuite/gcc.dg/format/warnll-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fwarnll-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fwarnll-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fwarnll-1.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -5,8 +5,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=iso9899:1990 -pedantic -Wformat -Wno-long-long\" } */\n \n-extern int printf (const char *, ...);\n-extern int scanf (const char *, ...);\n+#include \"format.h\"\n \n void\n foo (long long ll, unsigned long long ull, long long *lln,"}, {"sha": "38cba1eb7353238dd7d2e094ba37526031976c3f", "filename": "gcc/testsuite/gcc.dg/format/xopen-1.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fxopen-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fxopen-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fxopen-1.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -6,13 +6,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -Wformat\" } */\n \n-typedef __WCHAR_TYPE__ wchar_t;\n-typedef __WINT_TYPE__ wint_t;\n-typedef __builtin_va_list va_list;\n-\n-extern int printf (const char *, ...);\n-extern int vprintf (const char *, va_list);\n-extern int scanf (const char *, ...);\n+#include \"format.h\"\n \n void\n foo (int i, unsigned int u, wint_t lc, wchar_t *ls, int *ip, double d,"}, {"sha": "7916201ff7d4eef17849523dcd1408c8ad006d30", "filename": "gcc/testsuite/gcc.dg/format/z-1.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fz-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42110e7b0f32c645e044e814e6d8f44823c7c53d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fz-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fz-1.c?ref=42110e7b0f32c645e044e814e6d8f44823c7c53d", "patch": "@@ -3,10 +3,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wformat\" } */\n \n-typedef __SIZE_TYPE__ size_t;\n-\n-extern int printf (const char *, ...);\n-extern int scanf (const char *, ...);\n+#include \"format.h\"\n \n size_t\n foo (void)"}]}