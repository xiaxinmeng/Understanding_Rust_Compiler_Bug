{"sha": "d90ffcfb7d105d004cf04911a42935be03256b49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkwZmZjZmI3ZDEwNWQwMDRjZjA0OTExYTQyOTM1YmUwMzI1NmI0OQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2017-12-08T12:11:02Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2017-12-08T12:11:02Z"}, "message": "Prevent SRA from removing type changing assignment\n\n2017-12-08  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/83141\n\t* tree-sra.c (contains_vce_or_bfcref_p): Move up in the file, also\n\ttest for MEM_REFs implicitely changing types with padding.  Remove\n\tinline keyword.\n\t(build_accesses_from_assign): Added contains_vce_or_bfcref_p checks.\n\ntestsuite/\n\t* gcc.dg/tree-ssa/pr83141.c: New test.\n\t* gcc.dg/guality/pr54970.c: XFAIL tests querying a[0].\n\nFrom-SVN: r255510", "tree": {"sha": "532b5384e1818d533de7ff602a79ef179ad6acd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/532b5384e1818d533de7ff602a79ef179ad6acd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d90ffcfb7d105d004cf04911a42935be03256b49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d90ffcfb7d105d004cf04911a42935be03256b49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d90ffcfb7d105d004cf04911a42935be03256b49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d90ffcfb7d105d004cf04911a42935be03256b49/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0123db8e39de9fdcb36e9a5ad26b3039474672bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0123db8e39de9fdcb36e9a5ad26b3039474672bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0123db8e39de9fdcb36e9a5ad26b3039474672bd"}], "stats": {"total": 115, "additions": 91, "deletions": 24}, "files": [{"sha": "8184c66e8c8db31808124060660c5b05735da69f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d90ffcfb7d105d004cf04911a42935be03256b49/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d90ffcfb7d105d004cf04911a42935be03256b49/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d90ffcfb7d105d004cf04911a42935be03256b49", "patch": "@@ -1,3 +1,11 @@\n+2017-12-08  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/83141\n+\t* tree-sra.c (contains_vce_or_bfcref_p): Move up in the file, also\n+\ttest for MEM_REFs implicitely changing types with padding.  Remove\n+\tinline keyword.\n+\t(build_accesses_from_assign): Added contains_vce_or_bfcref_p checks.\n+\n 2017-12-08  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/arc/arc.c (arc_attribute_table): Add exclusions to"}, {"sha": "7d03796f215892420d4d25391b45f917ca2b322d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d90ffcfb7d105d004cf04911a42935be03256b49/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d90ffcfb7d105d004cf04911a42935be03256b49/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d90ffcfb7d105d004cf04911a42935be03256b49", "patch": "@@ -1,3 +1,9 @@\n+2017-12-08  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/83141\n+\t* gcc.dg/tree-ssa/pr83141.c: New test.\n+\t* gcc.dg/guality/pr54970.c: XFAIL tests querying a[0].\n+\n 2017-12-08  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR middle-end/83609"}, {"sha": "1819d023e21f509523464f34058f285634634087", "filename": "gcc/testsuite/gcc.dg/guality/pr54970.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d90ffcfb7d105d004cf04911a42935be03256b49/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54970.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d90ffcfb7d105d004cf04911a42935be03256b49/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54970.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54970.c?ref=d90ffcfb7d105d004cf04911a42935be03256b49", "patch": "@@ -24,23 +24,23 @@ main ()\n \t\t\t\t/* { dg-final { gdb-test 25 \"*p\" \"13\" } } */\n   asm volatile (NOP);\t\t/* { dg-final { gdb-test 25 \"*q\" \"12\" } } */\n   __builtin_memcpy (&a, (int [3]) { 4, 5, 6 }, sizeof (a));\n-\t\t\t\t/* { dg-final { gdb-test 31 \"a\\[0\\]\" \"4\" } } */\n+\t\t\t\t/* { dg-final { gdb-test 31 \"a\\[0\\]\" \"4\" { xfail { *-*-* } } } } */\n \t\t\t\t/* { dg-final { gdb-test 31 \"a\\[1\\]\" \"5\" } } */\n \t\t\t\t/* { dg-final { gdb-test 31 \"a\\[2\\]\" \"6\" } } */\n \t\t\t\t/* { dg-final { gdb-test 31 \"*p\" \"6\" } } */\n   asm volatile (NOP);\t\t/* { dg-final { gdb-test 31 \"*q\" \"5\" } } */\n-  *p += 20;\t\t\t/* { dg-final { gdb-test 36 \"a\\[0\\]\" \"4\" } } */\n+  *p += 20;\t\t\t/* { dg-final { gdb-test 36 \"a\\[0\\]\" \"4\" { xfail { *-*-* } } } } */\n \t\t\t\t/* { dg-final { gdb-test 36 \"a\\[1\\]\" \"5\" } } */\n \t\t\t\t/* { dg-final { gdb-test 36 \"a\\[2\\]\" \"26\" } } */\n \t\t\t\t/* { dg-final { gdb-test 36 \"*p\" \"26\" } } */\n   asm volatile (NOP);\t\t/* { dg-final { gdb-test 36 \"*q\" \"5\" } } */\n-  *q += 20;\t\t\t/* { dg-final { gdb-test 45 \"a\\[0\\]\" \"4\" } } */\n+  *q += 20;\t\t\t/* { dg-final { gdb-test 45 \"a\\[0\\]\" \"4\" { xfail { *-*-* } } } } */\n \t\t\t\t/* { dg-final { gdb-test 45 \"a\\[1\\]\" \"25\" } } */\n \t\t\t\t/* { dg-final { gdb-test 45 \"a\\[2\\]\" \"26\" } } */\n \t\t\t\t/* { dg-final { gdb-test 45 \"*p\" \"26\" } } */\n \t\t\t\t/* { dg-final { gdb-test 45 \"p\\[-1\\]\" \"25\" } } */\n-\t\t\t\t/* { dg-final { gdb-test 45 \"p\\[-2\\]\" \"4\" } } */\n-\t\t\t\t/* { dg-final { gdb-test 45 \"q\\[-1\\]\" \"4\" } } */\n+\t\t\t\t/* { dg-final { gdb-test 45 \"p\\[-2\\]\" \"4\" { xfail { *-*-* } } } } */\n+\t\t\t\t/* { dg-final { gdb-test 45 \"q\\[-1\\]\" \"4\" { xfail { *-*-* } } } } */\n \t\t\t\t/* { dg-final { gdb-test 45 \"q\\[1\\]\" \"26\" } } */\n   asm volatile (NOP);\t\t/* { dg-final { gdb-test 45 \"*q\" \"25\" } } */\n   return 0;"}, {"sha": "73ea45c613c5335df89495af2c8ff79eae93d1a0", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr83141.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d90ffcfb7d105d004cf04911a42935be03256b49/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr83141.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d90ffcfb7d105d004cf04911a42935be03256b49/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr83141.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr83141.c?ref=d90ffcfb7d105d004cf04911a42935be03256b49", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O -fdump-tree-esra-details\" } */\n+\n+volatile short vs;\n+volatile long vl;\n+\n+struct A { short s; long i; long j; };\n+struct A a, b;\n+void foo ()\n+{\n+  struct A c;\n+  __builtin_memcpy (&c, &b, sizeof (struct A));\n+  __builtin_memcpy (&a, &c, sizeof (struct A));\n+\n+  vs = c.s;\n+  vl = c.i;\n+  vl = c.j;\n+}\n+\n+\n+int main()\n+{\n+  if ((sizeof (short) != 2)\n+      || (__builtin_offsetof (struct A, i) < 4))\n+    return 0;\n+\n+  __builtin_memset (&b, 0, sizeof (struct A));\n+  b.s = 1;\n+  __builtin_memcpy ((char *)&b+2, &b, 2);\n+  foo ();\n+  __builtin_memcpy (&a, (char *)&a+2, 2);\n+  if (a.s != 1)\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"Will attempt to totally scalarize\" \"esra\" } } */"}, {"sha": "54f1c8d54d5b8700ec9948e3142e083a32dd78aa", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 35, "deletions": 19, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d90ffcfb7d105d004cf04911a42935be03256b49/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d90ffcfb7d105d004cf04911a42935be03256b49/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=d90ffcfb7d105d004cf04911a42935be03256b49", "patch": "@@ -1141,6 +1141,33 @@ contains_view_convert_expr_p (const_tree ref)\n   return false;\n }\n \n+/* Return true if REF contains a VIEW_CONVERT_EXPR or a MEM_REF that performs\n+   type conversion or a COMPONENT_REF with a bit-field field declaration.  */\n+\n+static bool\n+contains_vce_or_bfcref_p (const_tree ref)\n+{\n+  while (handled_component_p (ref))\n+    {\n+      if (TREE_CODE (ref) == VIEW_CONVERT_EXPR\n+\t  || (TREE_CODE (ref) == COMPONENT_REF\n+\t      && DECL_BIT_FIELD (TREE_OPERAND (ref, 1))))\n+\treturn true;\n+      ref = TREE_OPERAND (ref, 0);\n+    }\n+\n+  if (TREE_CODE (ref) != MEM_REF\n+      || TREE_CODE (TREE_OPERAND (ref, 0)) != ADDR_EXPR)\n+    return false;\n+\n+  tree mem = TREE_OPERAND (TREE_OPERAND (ref, 0), 0);\n+  if (TYPE_MAIN_VARIANT (TREE_TYPE (ref))\n+      != TYPE_MAIN_VARIANT (TREE_TYPE (mem)))\n+    return true;\n+\n+  return false;\n+}\n+\n /* Search the given tree for a declaration by skipping handled components and\n    exclude it from the candidates.  */\n \n@@ -1339,7 +1366,14 @@ build_accesses_from_assign (gimple *stmt)\n       racc->grp_assignment_read = 1;\n       if (should_scalarize_away_bitmap && !gimple_has_volatile_ops (stmt)\n \t  && !is_gimple_reg_type (racc->type))\n-\tbitmap_set_bit (should_scalarize_away_bitmap, DECL_UID (racc->base));\n+\t{\n+\t  if (contains_vce_or_bfcref_p (rhs))\n+\t    bitmap_set_bit (cannot_scalarize_away_bitmap,\n+\t\t\t    DECL_UID (racc->base));\n+\t  else\n+\t    bitmap_set_bit (should_scalarize_away_bitmap,\n+\t\t\t    DECL_UID (racc->base));\n+\t}\n       if (storage_order_barrier_p (lhs))\n \tracc->grp_unscalarizable_region = 1;\n     }\n@@ -3416,24 +3450,6 @@ get_repl_default_def_ssa_name (struct access *racc)\n   return get_or_create_ssa_default_def (cfun, racc->replacement_decl);\n }\n \n-/* Return true if REF has an VIEW_CONVERT_EXPR or a COMPONENT_REF with a\n-   bit-field field declaration somewhere in it.  */\n-\n-static inline bool\n-contains_vce_or_bfcref_p (const_tree ref)\n-{\n-  while (handled_component_p (ref))\n-    {\n-      if (TREE_CODE (ref) == VIEW_CONVERT_EXPR\n-\t  || (TREE_CODE (ref) == COMPONENT_REF\n-\t      && DECL_BIT_FIELD (TREE_OPERAND (ref, 1))))\n-\treturn true;\n-      ref = TREE_OPERAND (ref, 0);\n-    }\n-\n-  return false;\n-}\n-\n /* Examine both sides of the assignment statement pointed to by STMT, replace\n    them with a scalare replacement if there is one and generate copying of\n    replacements if scalarized aggregates have been used in the assignment.  GSI"}]}