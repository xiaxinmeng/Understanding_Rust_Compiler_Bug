{"sha": "45222d4a3d07fc721de24bcb6c264dcd0541150a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUyMjJkNGEzZDA3ZmM3MjFkZTI0YmNiNmMyNjRkY2QwNTQxMTUwYQ==", "commit": {"author": {"name": "Thomas Neumann", "email": "tneumann@users.sourceforge.net", "date": "2007-06-06T14:33:57Z"}, "committer": {"name": "Thomas Neumann", "email": "tneumann@gcc.gnu.org", "date": "2007-06-06T14:33:57Z"}, "message": "lambda-code.c (struct lambda_lattice_s): Add a name to the struct.\n\n\t* lambda-code.c (struct lambda_lattice_s): Add a name to the struct.\n\t(lambda_body_vector_new): Use type safe memory macros.\n\t(lambda_linear_expression_new): Likewise.\n\t(lambda_loopnest_new): Likewise.\n\t(lambda_lattice_new): Likewise.\n\t(replace_uses_equiv_to_x_with_y): Cast according to the coding\n\tconventions. Use type safe memory macros.\n\t* lambda.h (struct lambda_trans_matrix_s): Add a name to the struct.\n\t(lambda_body_vector_s): Likewise.\n\t* lambda-mat.c (lambda_matrix_new): Use type safe memory macros.\n\t* lambda-trans.c (lambda_trans_matrix_new): Likewise.\n\nFrom-SVN: r125491", "tree": {"sha": "b80fec3949a169acee5421cfa7637d4c4eec7242", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b80fec3949a169acee5421cfa7637d4c4eec7242"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45222d4a3d07fc721de24bcb6c264dcd0541150a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45222d4a3d07fc721de24bcb6c264dcd0541150a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45222d4a3d07fc721de24bcb6c264dcd0541150a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45222d4a3d07fc721de24bcb6c264dcd0541150a/comments", "author": {"login": "neumannt", "id": 25097991, "node_id": "MDQ6VXNlcjI1MDk3OTkx", "avatar_url": "https://avatars.githubusercontent.com/u/25097991?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neumannt", "html_url": "https://github.com/neumannt", "followers_url": "https://api.github.com/users/neumannt/followers", "following_url": "https://api.github.com/users/neumannt/following{/other_user}", "gists_url": "https://api.github.com/users/neumannt/gists{/gist_id}", "starred_url": "https://api.github.com/users/neumannt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neumannt/subscriptions", "organizations_url": "https://api.github.com/users/neumannt/orgs", "repos_url": "https://api.github.com/users/neumannt/repos", "events_url": "https://api.github.com/users/neumannt/events{/privacy}", "received_events_url": "https://api.github.com/users/neumannt/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "68c834d087355b52387e37a5c87436153b638b05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68c834d087355b52387e37a5c87436153b638b05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68c834d087355b52387e37a5c87436153b638b05"}], "stats": {"total": 40, "additions": 27, "deletions": 13}, "files": [{"sha": "0d19d01d0d5c3be0160022bb193a76fdef62edb9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45222d4a3d07fc721de24bcb6c264dcd0541150a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45222d4a3d07fc721de24bcb6c264dcd0541150a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45222d4a3d07fc721de24bcb6c264dcd0541150a", "patch": "@@ -1,3 +1,17 @@\n+2007-06-06  Thomas Neumann  <tneumann@users.sourceforge.net>\n+\n+\t* lambda-code.c (struct lambda_lattice_s): Add a name to the struct.\n+\t(lambda_body_vector_new): Use type safe memory macros.\n+\t(lambda_linear_expression_new): Likewise.\n+\t(lambda_loopnest_new): Likewise.\n+\t(lambda_lattice_new): Likewise.\n+\t(replace_uses_equiv_to_x_with_y): Cast according to the coding\n+\tconventions. Use type safe memory macros.\n+\t* lambda.h (struct lambda_trans_matrix_s): Add a name to the struct.\n+\t(lambda_body_vector_s): Likewise.\n+\t* lambda-mat.c (lambda_matrix_new): Use type safe memory macros.\n+\t* lambda-trans.c (lambda_trans_matrix_new): Likewise.\n+\n 2007-06-06  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-forwprop.c (forward_propagate_into_cond): Return 2"}, {"sha": "501079f6cadfec20cd0bb1b867c8b7e8b2e68c06", "filename": "gcc/lambda-code.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45222d4a3d07fc721de24bcb6c264dcd0541150a/gcc%2Flambda-code.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45222d4a3d07fc721de24bcb6c264dcd0541150a/gcc%2Flambda-code.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda-code.c?ref=45222d4a3d07fc721de24bcb6c264dcd0541150a", "patch": "@@ -120,7 +120,7 @@ static bool perfect_nestify (struct loop *, VEC(tree,heap) *,\n \t\t\t     VEC(tree,heap) *);\n /* Lattice stuff that is internal to the code generation algorithm.  */\n \n-typedef struct\n+typedef struct lambda_lattice_s\n {\n   /* Lattice base matrix.  */\n   lambda_matrix base;\n@@ -155,7 +155,7 @@ lambda_body_vector_new (int size)\n {\n   lambda_body_vector ret;\n \n-  ret = ggc_alloc (sizeof (*ret));\n+  ret = GGC_NEW (struct lambda_body_vector_s);\n   LBV_COEFFICIENTS (ret) = lambda_vector_new (size);\n   LBV_SIZE (ret) = size;\n   LBV_DENOMINATOR (ret) = 1;\n@@ -227,7 +227,7 @@ lambda_linear_expression_new (int dim, int invariants)\n {\n   lambda_linear_expression ret;\n \n-  ret = ggc_alloc_cleared (sizeof (*ret));\n+  ret = GGC_CNEW (struct lambda_linear_expression_s);\n \n   LLE_COEFFICIENTS (ret) = lambda_vector_new (dim);\n   LLE_CONSTANT (ret) = 0;\n@@ -328,9 +328,9 @@ lambda_loopnest\n lambda_loopnest_new (int depth, int invariants)\n {\n   lambda_loopnest ret;\n-  ret = ggc_alloc (sizeof (*ret));\n+  ret = GGC_NEW (struct lambda_loopnest_s);\n \n-  LN_LOOPS (ret) = ggc_alloc_cleared (depth * sizeof (lambda_loop));\n+  LN_LOOPS (ret) = GGC_CNEWVEC (lambda_loop, depth);\n   LN_DEPTH (ret) = depth;\n   LN_INVARIANTS (ret) = invariants;\n \n@@ -360,7 +360,7 @@ static lambda_lattice\n lambda_lattice_new (int depth, int invariants)\n {\n   lambda_lattice ret;\n-  ret = ggc_alloc (sizeof (*ret));\n+  ret = GGC_NEW (struct lambda_lattice_s);\n   LATTICE_BASE (ret) = lambda_matrix_new (depth, depth);\n   LATTICE_ORIGIN (ret) = lambda_vector_new (depth);\n   LATTICE_ORIGIN_INVARIANTS (ret) = lambda_matrix_new (depth, invariants);\n@@ -1981,7 +1981,7 @@ replace_uses_equiv_to_x_with_y (struct loop *loop, tree stmt, tree x,\n \t temporaries.  */\n       in.hash = htab_hash_pointer (use);\n       in.base.from = use;\n-      h = htab_find_with_hash (replacements, &in, in.hash);\n+      h = (struct tree_map *) htab_find_with_hash (replacements, &in, in.hash);\n       if (h != NULL)\n \t{\n \t  SET_USE (use_p, h->to);\n@@ -2023,7 +2023,7 @@ replace_uses_equiv_to_x_with_y (struct loop *loop, tree stmt, tree x,\n       bsi_insert_before (firstbsi, setstmt, BSI_SAME_STMT);\n       update_stmt (setstmt);\n       SET_USE (use_p, var);\n-      h = ggc_alloc (sizeof (struct tree_map));\n+      h = GGC_NEW (struct tree_map);\n       h->hash = in.hash;\n       h->base.from = use;\n       h->to = var;"}, {"sha": "bd383bc9d5cec9e14f4b178b88f3c27d205837e7", "filename": "gcc/lambda-mat.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45222d4a3d07fc721de24bcb6c264dcd0541150a/gcc%2Flambda-mat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45222d4a3d07fc721de24bcb6c264dcd0541150a/gcc%2Flambda-mat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda-mat.c?ref=45222d4a3d07fc721de24bcb6c264dcd0541150a", "patch": "@@ -37,7 +37,7 @@ lambda_matrix_new (int m, int n)\n   lambda_matrix mat;\n   int i;\n \n-  mat = ggc_alloc (m * sizeof (lambda_vector));\n+  mat = GGC_NEWVEC (lambda_vector, m);\n   \n   for (i = 0; i < m; i++)\n     mat[i] = lambda_vector_new (n);"}, {"sha": "fbd8304272fe1398e1e2bddff177ecf1204f1c83", "filename": "gcc/lambda-trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45222d4a3d07fc721de24bcb6c264dcd0541150a/gcc%2Flambda-trans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45222d4a3d07fc721de24bcb6c264dcd0541150a/gcc%2Flambda-trans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda-trans.c?ref=45222d4a3d07fc721de24bcb6c264dcd0541150a", "patch": "@@ -35,7 +35,7 @@ lambda_trans_matrix_new (int colsize, int rowsize)\n {\n   lambda_trans_matrix ret;\n   \n-  ret = ggc_alloc (sizeof (*ret));\n+  ret = GGC_NEW (struct lambda_trans_matrix_s);\n   LTM_MATRIX (ret) = lambda_matrix_new (rowsize, colsize);\n   LTM_ROWSIZE (ret) = rowsize;\n   LTM_COLSIZE (ret) = colsize;"}, {"sha": "9310b84581452ac632a73fa0ef2fffdc170ded2a", "filename": "gcc/lambda.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45222d4a3d07fc721de24bcb6c264dcd0541150a/gcc%2Flambda.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45222d4a3d07fc721de24bcb6c264dcd0541150a/gcc%2Flambda.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda.h?ref=45222d4a3d07fc721de24bcb6c264dcd0541150a", "patch": "@@ -40,7 +40,7 @@ typedef lambda_vector *lambda_matrix;\n /* A transformation matrix, which is a self-contained ROWSIZE x COLSIZE\n    matrix.  Rather than use floats, we simply keep a single DENOMINATOR that\n    represents the denominator for every element in the matrix.  */\n-typedef struct\n+typedef struct lambda_trans_matrix_s\n {\n   lambda_matrix matrix;\n   int rowsize;\n@@ -61,7 +61,7 @@ typedef struct\n    This structure is used during code generation in order to rewrite the old\n    induction variable uses in a statement in terms of the newly created\n    induction variables.  */\n-typedef struct\n+typedef struct lambda_body_vector_s\n {\n   lambda_vector coefficients;\n   int size;\n@@ -127,7 +127,7 @@ typedef struct lambda_loop_s\n    and an integer representing the number of INVARIANTS in the loop.  Both of\n    these integers are used to size the associated coefficient vectors in the\n    linear expression structures.  */\n-typedef struct\n+typedef struct lambda_loopnest_s\n {\n   lambda_loop *loops;\n   int depth;"}]}