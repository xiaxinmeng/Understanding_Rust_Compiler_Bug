{"sha": "dcda050e6c3c3726cb14109674053f83cae330be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNkYTA1MGU2YzNjMzcyNmNiMTQxMDk2NzQwNTNmODNjYWUzMzBiZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-09T13:37:43Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-09T13:37:43Z"}, "message": "libstdc++: Fix BUILTIN-PTR-CMP helpers\n\nThe helpers that implement BUILTIN-PTR-CMP do not currently check if the\narguments are actually comparable, so the concept is true when it\nshouldn't be.\n\nSince we're trying to test for an unambiguous conversion to pointers, we\ncan also require that it returns bool, because the built-in comparisons\nfor pointers do return bool.\n\n\t* include/bits/range_cmp.h (__detail::__eq_builtin_ptr_cmp): Require\n\tequality comparison to be valid and return bool.\n\t(__detail::__less_builtin_ptr_cmp): Likewise for less-than comparison.\n\t* testsuite/20_util/function_objects/range.cmp/equal_to.cc: Check\n\ttype with ambiguous conversion to fundamental types.\n\t* testsuite/20_util/function_objects/range.cmp/less.cc: Likewise.", "tree": {"sha": "57f505992990d92e97d0e99617c3f7cf7c7227b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57f505992990d92e97d0e99617c3f7cf7c7227b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcda050e6c3c3726cb14109674053f83cae330be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcda050e6c3c3726cb14109674053f83cae330be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcda050e6c3c3726cb14109674053f83cae330be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcda050e6c3c3726cb14109674053f83cae330be/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81958cd6adf402a85dc7d21b43caac56fba0af21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81958cd6adf402a85dc7d21b43caac56fba0af21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81958cd6adf402a85dc7d21b43caac56fba0af21"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "fb4641aee6dd994cdf5cf8c6e5c27c783365c3f3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcda050e6c3c3726cb14109674053f83cae330be/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcda050e6c3c3726cb14109674053f83cae330be/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=dcda050e6c3c3726cb14109674053f83cae330be", "patch": "@@ -1,3 +1,12 @@\n+2020-02-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/range_cmp.h (__detail::__eq_builtin_ptr_cmp): Require\n+\tequality comparison to be valid and return bool.\n+\t(__detail::__less_builtin_ptr_cmp): Likewise for less-than comparison.\n+\t* testsuite/20_util/function_objects/range.cmp/equal_to.cc: Check\n+\ttype with ambiguous conversion to fundamental types.\n+\t* testsuite/20_util/function_objects/range.cmp/less.cc: Likewise.\n+\n 2020-02-07  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/iterator_concepts.h (iter_difference_t, iter_value_t):"}, {"sha": "571ba7f955510616e5ebee332b8392c669b31f00", "filename": "libstdc++-v3/include/bits/range_cmp.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcda050e6c3c3726cb14109674053f83cae330be/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_cmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcda050e6c3c3726cb14109674053f83cae330be/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_cmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_cmp.h?ref=dcda050e6c3c3726cb14109674053f83cae330be", "patch": "@@ -62,7 +62,8 @@ namespace ranges\n     // BUILTIN-PTR-CMP(T, ==, U)\n     template<typename _Tp, typename _Up>\n       concept __eq_builtin_ptr_cmp\n-\t= convertible_to<_Tp, const volatile void*>\n+\t= requires (_Tp&& __t, _Up&& __u) { { __t == __u } -> same_as<bool>; }\n+\t  && convertible_to<_Tp, const volatile void*>\n \t  && convertible_to<_Up, const volatile void*>\n \t  && (! requires(_Tp&& __t, _Up&& __u)\n \t      { operator==(std::forward<_Tp>(__t), std::forward<_Up>(__u)); }\n@@ -73,7 +74,8 @@ namespace ranges\n     // BUILTIN-PTR-CMP(T, <, U)\n     template<typename _Tp, typename _Up>\n       concept __less_builtin_ptr_cmp\n-\t= convertible_to<_Tp, const volatile void*>\n+\t= requires (_Tp&& __t, _Up&& __u) { { __t < __u } -> same_as<bool>; }\n+\t  && convertible_to<_Tp, const volatile void*>\n \t  && convertible_to<_Up, const volatile void*>\n \t  && (! requires(_Tp&& __t, _Up&& __u)\n \t      { operator<(std::forward<_Tp>(__t), std::forward<_Up>(__u)); }"}, {"sha": "34f8ee5aca4e9d4f6e3eb49f058de57d690a4f4b", "filename": "libstdc++-v3/testsuite/20_util/function_objects/range.cmp/equal_to.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcda050e6c3c3726cb14109674053f83cae330be/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Frange.cmp%2Fequal_to.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcda050e6c3c3726cb14109674053f83cae330be/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Frange.cmp%2Fequal_to.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Frange.cmp%2Fequal_to.cc?ref=dcda050e6c3c3726cb14109674053f83cae330be", "patch": "@@ -69,6 +69,15 @@ test02()\n   VERIFY( f(x, x) );\n }\n \n+struct Y\n+{\n+  operator void*() const;\n+  operator int() const;\n+};\n+\n+// X{} == X{} is ambiguous so ranges::equal_to{}(X{}, X{}) should be invalid\n+static_assert( !std::is_invocable_v<F&, Y, Y> );\n+\n int\n main()\n {"}, {"sha": "bf7d600e7fea71530d903c92e0adc4d8e085f34c", "filename": "libstdc++-v3/testsuite/20_util/function_objects/range.cmp/less.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcda050e6c3c3726cb14109674053f83cae330be/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Frange.cmp%2Fless.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcda050e6c3c3726cb14109674053f83cae330be/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Frange.cmp%2Fless.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Frange.cmp%2Fless.cc?ref=dcda050e6c3c3726cb14109674053f83cae330be", "patch": "@@ -74,6 +74,15 @@ test02()\n   VERIFY( ! f(x, x) );\n }\n \n+struct Y\n+{\n+  operator void*() const;\n+  operator int() const;\n+};\n+\n+// X{} == X{} is ambiguous so ranges::less{}(X{}, X{}) should be invalid\n+static_assert( !std::is_invocable_v<F&, Y, Y> );\n+\n int\n main()\n {"}]}