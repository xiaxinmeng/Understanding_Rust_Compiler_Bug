{"sha": "e54c2581c540202cc0d777c4de6185d95e663233", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU0YzI1ODFjNTQwMjAyY2MwZDc3N2M0ZGU2MTg1ZDk1ZTY2MzIzMw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-08-28T13:44:39Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-08-28T13:44:39Z"}, "message": "gcc.c (execute): Fold SIGPIPE handling into switch statement.\n\n\t* gcc.c (execute): Fold SIGPIPE handling into switch\n\tstatement.  Adjust internal error message.\n\nFrom-SVN: r251385", "tree": {"sha": "bed7057c0c3406840e32702879686f3f132853e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bed7057c0c3406840e32702879686f3f132853e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e54c2581c540202cc0d777c4de6185d95e663233", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e54c2581c540202cc0d777c4de6185d95e663233", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e54c2581c540202cc0d777c4de6185d95e663233", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e54c2581c540202cc0d777c4de6185d95e663233/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1963f60adb1ea775220cc92e0c644bbb59ad3191", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1963f60adb1ea775220cc92e0c644bbb59ad3191", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1963f60adb1ea775220cc92e0c644bbb59ad3191"}], "stats": {"total": 80, "additions": 43, "deletions": 37}, "files": [{"sha": "abe7d855260fd3bb54e6a1d17a06c2bae8fe4da5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e54c2581c540202cc0d777c4de6185d95e663233/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e54c2581c540202cc0d777c4de6185d95e663233/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e54c2581c540202cc0d777c4de6185d95e663233", "patch": "@@ -1,3 +1,8 @@\n+2017-08-28  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* gcc.c (execute): Fold SIGPIPE handling into switch\n+\tstatement.  Adjust internal error message.\n+\n 2017-08-28  Richard Biener  <rguenther@suse.de>\n \n \tPR debug/81993"}, {"sha": "6fa523140e7c4275041e7ff40e10178faa1e28d8", "filename": "gcc/gcc.c", "status": "modified", "additions": 38, "deletions": 37, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e54c2581c540202cc0d777c4de6185d95e663233/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e54c2581c540202cc0d777c4de6185d95e663233/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=e54c2581c540202cc0d777c4de6185d95e663233", "patch": "@@ -3135,49 +3135,50 @@ execute (void)\n \tint status = statuses[i];\n \n \tif (WIFSIGNALED (status))\n-\t  {\n-#ifdef SIGPIPE\n-\t    /* SIGPIPE is a special case.  It happens in -pipe mode\n-\t       when the compiler dies before the preprocessor is done,\n-\t       or the assembler dies before the compiler is done.\n-\t       There's generally been an error already, and this is\n-\t       just fallout.  So don't generate another error unless\n-\t       we would otherwise have succeeded.  */\n-\t    if (WTERMSIG (status) == SIGPIPE\n-\t\t&& (signal_count || greatest_status >= MIN_FATAL_STATUS))\n-\t      {\n-\t\tsignal_count++;\n-\t\tret_code = -1;\n-\t      }\n-\t    else\n-#endif\n-\t      switch (WTERMSIG (status))\n-\t\t{\n-\t\tcase SIGINT:\n-\t\t/* SIGQUIT and SIGKILL are not available on MinGW.  */\n+\t  switch (WTERMSIG (status))\n+\t    {\n+\t    case SIGINT:\n+\t    case SIGTERM:\n+\t      /* SIGQUIT and SIGKILL are not available on MinGW.  */\n #ifdef SIGQUIT\n-\t\tcase SIGQUIT:\n+\t    case SIGQUIT:\n #endif\n #ifdef SIGKILL\n-\t\tcase SIGKILL:\n+\t    case SIGKILL:\n #endif\n-\t\tcase SIGTERM:\n-\t\t  /* The user (or environment) did something to the\n-\t\t     inferior.  Making this an ICE confuses the user\n-\t\t     into thinking there's a compiler bug.  Much more\n-\t\t     likely is the user or OOM killer nuked it.  */\n-\t\t  fatal_error (input_location,\n-\t\t\t       \"%s signal terminated program %s\",\n-\t\t\t       strsignal (WTERMSIG (status)),\n-\t\t\t       commands[i].prog);\n+\t      /* The user (or environment) did something to the\n+\t\t inferior.  Making this an ICE confuses the user into\n+\t\t thinking there's a compiler bug.  Much more likely is\n+\t\t the user or OOM killer nuked it.  */\n+\t      fatal_error (input_location,\n+\t\t\t   \"%s signal terminated program %s\",\n+\t\t\t   strsignal (WTERMSIG (status)),\n+\t\t\t   commands[i].prog);\n+\t      break;\n+\n+#ifdef SIGPIPE\n+\t    case SIGPIPE:\n+\t      /* SIGPIPE is a special case.  It happens in -pipe mode\n+\t\t when the compiler dies before the preprocessor is\n+\t\t done, or the assembler dies before the compiler is\n+\t\t done.  There's generally been an error already, and\n+\t\t this is just fallout.  So don't generate another\n+\t\t error unless we would otherwise have succeeded.  */\n+\t      if (signal_count || greatest_status >= MIN_FATAL_STATUS)\n+\t\t{\n+\t\t  signal_count++;\n+\t\t  ret_code = -1;\n \t\t  break;\n-\t\tdefault:\n-\t\t  /* The inferior failed to catch the signal.  */\n-\t\t  internal_error_no_backtrace (\"%s (program %s)\",\n-\t\t\t\t\t       strsignal (WTERMSIG (status)),\n-\t\t\t\t\t       commands[i].prog);\n \t\t}\n-\t  }\n+#endif\n+\t      /* FALLTHROUGH */\n+\n+\t    default:\n+\t      /* The inferior failed to catch the signal.  */\n+\t      internal_error_no_backtrace (\"%s signal terminated program %s\",\n+\t\t\t\t\t   strsignal (WTERMSIG (status)),\n+\t\t\t\t\t   commands[i].prog);\n+\t    }\n \telse if (WIFEXITED (status)\n \t\t && WEXITSTATUS (status) >= MIN_FATAL_STATUS)\n \t  {"}]}