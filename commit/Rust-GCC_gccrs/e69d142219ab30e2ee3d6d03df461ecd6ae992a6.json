{"sha": "e69d142219ab30e2ee3d6d03df461ecd6ae992a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY5ZDE0MjIxOWFiMzBlMmVlM2Q2ZDAzZGY0NjFlY2Q2YWU5OTJhNg==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2002-07-18T19:26:07Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2002-07-18T19:26:07Z"}, "message": "sh-protos.h (sh_expand_unop_v2sf): Move inside #ifdef RTX_CODE guard.\n\n\t* sh-protos.h (sh_expand_unop_v2sf): Move inside #ifdef RTX_CODE guard.\n\t(sh_expand_binop_v2sf): Likewise.\n\t* sh.c (machine_dependent_reorg): Add move for UNSPEC_MOVA.\n\t(int_gpr_dest, trunc_hi_operand): New functions.\n\t* sh.h (PREDICATE_CODES): Add any_register_operand, int_gpr_dest and\n\ttrunc_hi_operand.\n\t(SPECIAL_MODE_PREDICATES, any_register_operand): Define.\n\t* sh.md (cmpeqdi_t+1): Remove comments that genrecog warns about.\n\t(adddi3_compact+1, subdi3_compact+1, ashlsi3_n+1, ashlhi3+1): Likewise.\n\t(ashrsi2_16+1, ashrsi2_31+1, lshrsi3_n+1, ashrdi3+[12]): Likewise.\n\t(and_shl_scratch+[12], zero_extendhidi2+1): Likewise.\n\t(zero_extendhisi2_media+1, extendhidi2+1, extendqidi2+1): Likewise.\n\t(extendhisi2_media+1, extendqisi2_media+1): Likewise.\n\t(movsi_media_nofpu+[12], movhi_media+1, movdi_media_nofpu+1): Likewise.\n\t(movdi_const_16bit+[12], movdf_i4+[123], reload_outdf+[2-5]): Likewise.\n\t(movsf_ie+1): Likewise.\n\t(loaddi_trunc): Use int_gpr_dest predicate.\n\t(use_sfunc_addr, indirect_jump_scratch, sibcall_compact): Add mode(s).\n\t(mova, mova_const, GOTaddr2picreg, ptrel, casesi_worker_0): Likewise.\n\t(casesi_worker_0+[12], casesi_worker): Likewise.\n\t(shcompact_preserve_incoming_args): Likewise.\n\t(mov_nop): Use any_register_operand predicate.\n\t(mperm_w0): Use trunc_hi_operand predicate.\n\nFrom-SVN: r55564", "tree": {"sha": "7f7cd5022c7cdc5025ffd0ea722560f562cba9f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f7cd5022c7cdc5025ffd0ea722560f562cba9f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e69d142219ab30e2ee3d6d03df461ecd6ae992a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e69d142219ab30e2ee3d6d03df461ecd6ae992a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e69d142219ab30e2ee3d6d03df461ecd6ae992a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e69d142219ab30e2ee3d6d03df461ecd6ae992a6/comments", "author": null, "committer": null, "parents": [{"sha": "47a4976fdaeb9fe474363e3118690d20f26bbcc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47a4976fdaeb9fe474363e3118690d20f26bbcc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47a4976fdaeb9fe474363e3118690d20f26bbcc5"}], "stats": {"total": 276, "additions": 171, "deletions": 105}, "files": [{"sha": "f3f7d3f7ff06f0f64df8c3ac583464a7f7345ae5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69d142219ab30e2ee3d6d03df461ecd6ae992a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69d142219ab30e2ee3d6d03df461ecd6ae992a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e69d142219ab30e2ee3d6d03df461ecd6ae992a6", "patch": "@@ -1,3 +1,29 @@\n+Thu Jul 18 19:39:18 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* sh-protos.h (sh_expand_unop_v2sf): Move inside #ifdef RTX_CODE guard.\n+\t(sh_expand_binop_v2sf): Likewise.\n+\t* sh.c (machine_dependent_reorg): Add move for UNSPEC_MOVA.\n+\t(int_gpr_dest, trunc_hi_operand): New functions.\n+\t* sh.h (PREDICATE_CODES): Add any_register_operand, int_gpr_dest and\n+\ttrunc_hi_operand.\n+\t(SPECIAL_MODE_PREDICATES, any_register_operand): Define.\n+\t* sh.md (cmpeqdi_t+1): Remove comments that genrecog warns about.\n+\t(adddi3_compact+1, subdi3_compact+1, ashlsi3_n+1, ashlhi3+1): Likewise.\n+\t(ashrsi2_16+1, ashrsi2_31+1, lshrsi3_n+1, ashrdi3+[12]): Likewise.\n+\t(and_shl_scratch+[12], zero_extendhidi2+1): Likewise.\n+\t(zero_extendhisi2_media+1, extendhidi2+1, extendqidi2+1): Likewise.\n+\t(extendhisi2_media+1, extendqisi2_media+1): Likewise.\n+\t(movsi_media_nofpu+[12], movhi_media+1, movdi_media_nofpu+1): Likewise.\n+\t(movdi_const_16bit+[12], movdf_i4+[123], reload_outdf+[2-5]): Likewise.\n+\t(movsf_ie+1): Likewise.\n+\t(loaddi_trunc): Use int_gpr_dest predicate.\n+\t(use_sfunc_addr, indirect_jump_scratch, sibcall_compact): Add mode(s).\n+\t(mova, mova_const, GOTaddr2picreg, ptrel, casesi_worker_0): Likewise.\n+\t(casesi_worker_0+[12], casesi_worker): Likewise.\n+\t(shcompact_preserve_incoming_args): Likewise.\n+\t(mov_nop): Use any_register_operand predicate.\n+\t(mperm_w0): Use trunc_hi_operand predicate.\n+\n 2002-07-18  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* pa-linux.h (DWARF2_UNWIND_INFO): Delete define."}, {"sha": "a46a3270c452ca362f3f98c34824265d0e7b8672", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69d142219ab30e2ee3d6d03df461ecd6ae992a6/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69d142219ab30e2ee3d6d03df461ecd6ae992a6/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=e69d142219ab30e2ee3d6d03df461ecd6ae992a6", "patch": "@@ -100,6 +100,8 @@ extern void expand_df_binop PARAMS ((rtx (*)(rtx, rtx, rtx, rtx), rtx *));\n extern void expand_fp_branch PARAMS ((rtx (*)(void), rtx (*)(void)));\n extern int sh_insn_length_adjustment PARAMS ((rtx));\n extern int sh_can_redirect_branch PARAMS ((rtx, rtx));\n+extern void sh_expand_unop_v2sf (enum rtx_code, rtx, rtx);\n+extern void sh_expand_binop_v2sf (enum rtx_code, rtx, rtx, rtx);\n #ifdef TREE_CODE\n extern void sh_va_start PARAMS ((tree, rtx));\n extern rtx sh_va_arg PARAMS ((tree, tree));\n@@ -117,8 +119,6 @@ extern void output_file_start PARAMS ((FILE *));\n extern int sh_media_register_for_return PARAMS ((void));\n extern void sh_expand_prologue PARAMS ((void));\n extern void sh_expand_epilogue PARAMS ((void));\n-extern void sh_expand_unop_v2sf (enum rtx_code, rtx, rtx);\n-extern void sh_expand_binop_v2sf (enum rtx_code, rtx, rtx, rtx);\n extern int sh_need_epilogue PARAMS ((void));\n extern int initial_elimination_offset PARAMS ((int, int));\n extern int fldi_ok PARAMS ((void));"}, {"sha": "67215029155411dbbdb134ddd48e605a097c0554", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69d142219ab30e2ee3d6d03df461ecd6ae992a6/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69d142219ab30e2ee3d6d03df461ecd6ae992a6/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=e69d142219ab30e2ee3d6d03df461ecd6ae992a6", "patch": "@@ -3828,7 +3828,7 @@ machine_dependent_reorg (first)\n \t\t    {\n \t\t      lab = add_constant (XVECEXP (src, 0, 0), mode, 0);\n \t\t      newsrc = gen_rtx_LABEL_REF (VOIDmode, lab);\n-\t\t      newsrc = gen_rtx_UNSPEC (VOIDmode,\n+\t\t      newsrc = gen_rtx_UNSPEC (SImode,\n \t\t\t\t\t       gen_rtvec (1, newsrc),\n \t\t\t\t\t       UNSPEC_MOVA);\n \t\t    }\n@@ -5869,6 +5869,21 @@ arith_reg_dest (op, mode)\n   return arith_reg_operand (op, mode);\n }\n \n+int\n+int_gpr_dest (op, mode)\n+     rtx op;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+{\n+  enum machine_mode op_mode = GET_MODE (op);\n+\n+  if (GET_MODE_CLASS (op_mode) != MODE_INT\n+      || GET_MODE_SIZE (op_mode) >= UNITS_PER_WORD)\n+    return 0;\n+  if (! reload_completed)\n+    return 0;\n+  return true_regnum (op) <= LAST_GENERAL_REG;\n+}\n+\n int\n fp_arith_reg_operand (op, mode)\n      rtx op;\n@@ -6258,6 +6273,19 @@ extend_reg_operand (op, mode)\n \t  : arith_reg_operand) (op, mode);\n }\n \n+int\n+trunc_hi_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  enum machine_mode op_mode = GET_MODE (op);\n+\n+  if (op_mode != SImode && op_mode != DImode\n+      && op_mode != V4HImode && op_mode != V2SImode)\n+    return 0;\n+  return extend_reg_operand (op, mode);\n+}\n+\n int\n extend_reg_or_0_operand (op, mode)\n      rtx op;"}, {"sha": "fc1cfb4161084ce79bdc221679526363bb9feadb", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69d142219ab30e2ee3d6d03df461ecd6ae992a6/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69d142219ab30e2ee3d6d03df461ecd6ae992a6/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=e69d142219ab30e2ee3d6d03df461ecd6ae992a6", "patch": "@@ -3211,6 +3211,7 @@ extern int rtx_equal_function_value_matters;\n /* Define the codes that are matched by predicates in sh.c.  */\n #define PREDICATE_CODES \\\n   {\"and_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\t\\\n+  {\"any_register_operand\", {SUBREG, REG}},\t\t\t\t\\\n   {\"arith_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\t\\\n   {\"arith_reg_dest\", {SUBREG, REG}},\t\t\t\t\t\\\n   {\"arith_reg_operand\", {SUBREG, REG}},\t\t\t\t\t\\\n@@ -3227,6 +3228,7 @@ extern int rtx_equal_function_value_matters;\n   {\"general_movsrc_operand\", {SUBREG, REG, CONST_INT, CONST_DOUBLE, MEM}}, \\\n   {\"general_movdst_operand\", {SUBREG, REG, MEM}},\t\t\t\\\n   {\"greater_comparison_operator\", {GT,GE,GTU,GEU}},\t\t\t\\\n+  {\"int_gpr_dest\", {SUBREG, REG}},\t\t\t\t\t\\\n   {\"inqhi_operand\", {TRUNCATE}},\t\t\t\t\t\\\n   {\"less_comparison_operator\", {LT,LE,LTU,LEU}},\t\t\t\\\n   {\"logical_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\\\n@@ -3235,13 +3237,22 @@ extern int rtx_equal_function_value_matters;\n   {\"shmedia_6bit_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\\\n   {\"target_reg_operand\", {SUBREG, REG}},\t\t\t\t\\\n   {\"target_operand\", {SUBREG, REG, LABEL_REF, SYMBOL_REF, CONST, UNSPEC}},\\\n+  {\"trunc_hi_operand\", {SUBREG, REG, TRUNCATE}},\t\t\t\\\n   {\"register_operand\", {SUBREG, REG}},\t\t\t\t\t\\\n   {\"sh_const_vec\", {CONST_VECTOR}},\t\t\t\t\t\\\n   {\"sh_1el_vec\", {CONST_VECTOR, PARALLEL}},\t\t\t\t\\\n   {\"sh_rep_vec\", {CONST_VECTOR, PARALLEL}},\t\t\t\t\\\n   {\"symbol_ref_operand\", {SYMBOL_REF}},\t\t\t\t\t\\\n   {\"unary_float_operator\", {ABS, NEG, SQRT}},\t\t\t\t\\\n \n+#define SPECIAL_MODE_PREDICATES \\\n+  \"any_register_operand\", \\\n+  \"int_gpr_dest\", \\\n+  \"trunc_hi_operand\", \\\n+  /* This line intentionally left blank.  */\n+\n+#define any_register_operand register_operand\n+\n /* Define this macro if it is advisable to hold scalars in registers\n    in a wider mode than that declared by the program.  In such cases, \n    the value is constrained to be within the bounds of the declared"}, {"sha": "48ae813354c6aa07065021a718b1d3c9deb40315", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 103, "deletions": 102, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69d142219ab30e2ee3d6d03df461ecd6ae992a6/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69d142219ab30e2ee3d6d03df461ecd6ae992a6/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=e69d142219ab30e2ee3d6d03df461ecd6ae992a6", "patch": "@@ -857,8 +857,8 @@\n \n (define_split\n   [(set (reg:SI T_REG)\n-\t(eq:SI (match_operand:DI 0 \"arith_reg_operand\" \"r,r\")\n-\t       (match_operand:DI 1 \"arith_reg_or_0_operand\" \"N,r\")))]\n+\t(eq:SI (match_operand:DI 0 \"arith_reg_operand\" \"\")\n+\t       (match_operand:DI 1 \"arith_reg_or_0_operand\" \"\")))]\n ;; If we applied this split when not optimizing, it would only be\n ;; applied during the machine-dependent reorg, when no new basic blocks\n ;; may be created.\n@@ -1142,9 +1142,9 @@\n   [(set_attr \"length\" \"6\")])\n \n (define_split\n-  [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r\")\n-\t(plus:DI (match_operand:DI 1 \"arith_reg_operand\" \"%0\")\n-\t\t (match_operand:DI 2 \"arith_reg_operand\" \"r\")))\n+  [(set (match_operand:DI 0 \"arith_reg_operand\" \"\")\n+\t(plus:DI (match_operand:DI 1 \"arith_reg_operand\" \"\")\n+\t\t (match_operand:DI 2 \"arith_reg_operand\" \"\")))\n    (clobber (reg:SI T_REG))]\n   \"TARGET_SH1 && reload_completed\"\n   [(const_int 0)]\n@@ -1253,9 +1253,9 @@\n   [(set_attr \"length\" \"6\")])\n \n (define_split\n-  [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r\")\n-\t(minus:DI (match_operand:DI 1 \"arith_reg_operand\" \"0\")\n-\t\t  (match_operand:DI 2 \"arith_reg_operand\" \"r\")))\n+  [(set (match_operand:DI 0 \"arith_reg_operand\" \"\")\n+\t(minus:DI (match_operand:DI 1 \"arith_reg_operand\" \"\")\n+\t\t  (match_operand:DI 2 \"arith_reg_operand\" \"\")))\n    (clobber (reg:SI T_REG))]\n   \"TARGET_SH1 && reload_completed\"\n   [(const_int 0)]\n@@ -1350,12 +1350,12 @@\n \n ;; The INSN_REFERENCES_ARE_DELAYED in sh.h is problematic because it\n ;; also has an effect on the register that holds the address of the sfunc.\n-;; To make this work, we have an extra dummy insns that shows the use\n+;; To make this work, we have an extra dummy insn that shows the use\n ;; of this register for reorg.\n \n (define_insn \"use_sfunc_addr\"\n   [(set (reg:SI PR_REG)\n-\t(unspec [(match_operand:SI 0 \"register_operand\" \"r\")] UNSPEC_SFUNC))]\n+\t(unspec:SI [(match_operand:SI 0 \"register_operand\" \"r\")] UNSPEC_SFUNC))]\n   \"TARGET_SH1\"\n   \"\"\n   [(set_attr \"length\" \"0\")])\n@@ -2378,7 +2378,7 @@\n (define_split\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n \t(ashift:SI (match_operand:SI 1 \"arith_reg_operand\" \"\")\n-\t\t   (match_operand:SI 2 \"const_int_operand\" \"n\")))\n+\t\t   (match_operand:SI 2 \"const_int_operand\" \"\")))\n    (clobber (reg:SI T_REG))]\n   \"TARGET_SH1 && reload_completed\"\n   [(use (reg:SI R0_REG))]\n@@ -2441,7 +2441,7 @@\n (define_split\n   [(set (match_operand:HI 0 \"arith_reg_operand\" \"\")\n \t(ashift:HI (match_operand:HI 1 \"arith_reg_operand\" \"\")\n-\t\t   (match_operand:HI 2 \"const_int_operand\" \"n\")))\n+\t\t   (match_operand:HI 2 \"const_int_operand\" \"\")))\n    (clobber (reg:SI T_REG))]\n   \"TARGET_SH1 && reload_completed\"\n   [(use (reg:SI R0_REG))]\n@@ -2482,8 +2482,8 @@\n   [(set_attr \"length\" \"4\")])\n \n (define_split\n-  [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n-        (ashiftrt:SI (match_operand:SI 1 \"arith_reg_operand\" \"r\")\n+  [(set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n+        (ashiftrt:SI (match_operand:SI 1 \"arith_reg_operand\" \"\")\n \t\t     (const_int 16)))]\n   \"TARGET_SH1\"\n   [(set (match_dup 0) (rotate:SI (match_dup 1) (const_int 16)))\n@@ -2502,8 +2502,8 @@\n   [(set_attr \"length\" \"4\")])\n \n (define_split\n-  [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n-\t(ashiftrt:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n+  [(set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n+\t(ashiftrt:SI (match_operand:SI 1 \"arith_reg_operand\" \"\")\n \t\t     (const_int 31)))\n    (clobber (reg:SI T_REG))]\n   \"TARGET_SH1\"\n@@ -2628,7 +2628,7 @@\n (define_split\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n \t(lshiftrt:SI (match_operand:SI 1 \"arith_reg_operand\" \"\")\n-\t\t     (match_operand:SI 2 \"const_int_operand\" \"n\")))\n+\t\t     (match_operand:SI 2 \"const_int_operand\" \"\")))\n    (clobber (reg:SI T_REG))]\n   \"TARGET_SH1 && reload_completed\"\n   [(use (reg:SI R0_REG))]\n@@ -2803,8 +2803,8 @@\n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(and:SI (ashift:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t\t   (match_operand:SI 2 \"const_int_operand\" \"n\"))\n-\t\t(match_operand:SI 3 \"const_int_operand\" \"n\")))]\n+\t\t\t   (match_operand:SI 2 \"const_int_operand\" \"\"))\n+\t\t(match_operand:SI 3 \"const_int_operand\" \"\")))]\n   \"TARGET_SH1 && (unsigned)INTVAL (operands[2]) < 32\"\n   [(use (reg:SI R0_REG))]\n   \"if (gen_shl_and (operands[0], operands[2], operands[3], operands[1])) FAIL;\n@@ -2813,8 +2813,8 @@\n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(and:SI (ashift:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t\t   (match_operand:SI 2 \"const_int_operand\" \"n\"))\n-\t\t(match_operand:SI 3 \"const_int_operand\" \"n\")))\n+\t\t\t   (match_operand:SI 2 \"const_int_operand\" \"\"))\n+\t\t(match_operand:SI 3 \"const_int_operand\" \"\")))\n    (clobber (reg:SI T_REG))]\n   \"TARGET_SH1 && (unsigned)INTVAL (operands[2]) < 32\"\n   [(use (reg:SI R0_REG))]\n@@ -2895,15 +2895,15 @@\n    (set_attr \"type\" \"arith\")])\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,&r\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(lshiftrt:SI\n \t (ashift:SI\n \t  (and:SI\n-\t   (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r,0\")\n-\t\t\t(match_operand:SI 2 \"const_int_operand\" \"N,n\"))\n-\t   (match_operand:SI 3 \"register_operand\" \"0,r\"))\n-\t  (match_operand:SI 4 \"const_int_operand\" \"n,n\"))\n-\t (match_operand:SI 5 \"const_int_operand\" \"n,n\")))\n+\t   (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"\")\n+\t\t\t(match_operand:SI 2 \"const_int_operand\" \"\"))\n+\t   (match_operand:SI 3 \"register_operand\" \"\"))\n+\t  (match_operand:SI 4 \"const_int_operand\" \"\"))\n+\t (match_operand:SI 5 \"const_int_operand\" \"\")))\n    (clobber (reg:SI T_REG))]\n   \"TARGET_SH1\"\n   [(use (reg:SI R0_REG))]\n@@ -2928,11 +2928,11 @@\n \n ;; signed left/right shift combination.\n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n         (sign_extract:SI\n-\t (ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t    (match_operand:SI 2 \"const_int_operand\" \"n\"))\n-\t (match_operand:SI 3 \"const_int_operand\" \"n\")\n+\t (ashift:SI (match_operand:SI 1 \"register_operand\" \"\")\n+\t\t    (match_operand:SI 2 \"const_int_operand\" \"\"))\n+\t (match_operand:SI 3 \"const_int_operand\" \"\")\n \t (const_int 0)))\n    (clobber (reg:SI T_REG))]\n   \"TARGET_SH1\"\n@@ -3107,8 +3107,8 @@\n   [(set_attr \"type\" \"*,load_media\")])\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI (match_operand:HI 1 \"extend_reg_operand\" \"r\")))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(zero_extend:DI (match_operand:HI 1 \"extend_reg_operand\" \"\")))]\n   \"TARGET_SHMEDIA && reload_completed\"\n   [(set (match_dup 0) (ashift:DI (subreg:DI (match_dup 1) 0) (const_int 48)))\n    (set (match_dup 0) (lshiftrt:DI (match_dup 0) (const_int 48)))]\n@@ -3121,7 +3121,7 @@\n ;; ??? when a truncated input to a zero_extrend is reloaded, reload will\n ;; reload the entrire truncate expression.\n (define_insn_and_split \"*loaddi_trunc\"\n-  [(set (match_operand 0 \"register_operand\" \"=r\")\n+  [(set (match_operand 0 \"int_gpr_dest\" \"=r\")\n \t(truncate (match_operand:DI 1 \"memory_operand\" \"m\")))]\n   \"TARGET_SHMEDIA && reload_completed\"\n   \"#\"\n@@ -3166,8 +3166,8 @@\n   [(set_attr \"type\" \"arith_media,load_media\")])\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:SI (match_operand:HI 1 \"extend_reg_operand\" \"r\")))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(zero_extend:SI (match_operand:HI 1 \"extend_reg_operand\" \"\")))]\n   \"TARGET_SHMEDIA && reload_completed\"\n   [(set (match_dup 0) (ashift:SI (subreg:SI (match_dup 1) 0) (const_int 16)))\n    (set (match_dup 0) (lshiftrt:SI (match_dup 0) (const_int 16)))]\n@@ -3239,8 +3239,8 @@\n   [(set_attr \"type\" \"*,load_media\")])\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:DI (match_operand:HI 1 \"extend_reg_operand\" \"r\")))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(sign_extend:DI (match_operand:HI 1 \"extend_reg_operand\" \"\")))]\n   \"TARGET_SHMEDIA && reload_completed\"\n   [(set (match_dup 0) (ashift:DI (subreg:DI (match_dup 1) 0) (const_int 48)))\n    (set (match_dup 0) (ashiftrt:DI (match_dup 0) (const_int 48)))]\n@@ -3260,8 +3260,8 @@\n   [(set_attr \"type\" \"*,load_media\")])\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:DI (match_operand:QI 1 \"extend_reg_operand\" \"r\")))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(sign_extend:DI (match_operand:QI 1 \"extend_reg_operand\" \"\")))]\n   \"TARGET_SHMEDIA && reload_completed\"\n   [(set (match_dup 0) (ashift:DI (subreg:DI (match_dup 1) 0) (const_int 56)))\n    (set (match_dup 0) (ashiftrt:DI (match_dup 0) (const_int 56)))]\n@@ -3297,8 +3297,8 @@\n   [(set_attr \"type\" \"arith_media,load_media\")])\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:SI (match_operand:HI 1 \"extend_reg_operand\" \"r\")))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(sign_extend:SI (match_operand:HI 1 \"extend_reg_operand\" \"\")))]\n   \"TARGET_SHMEDIA && reload_completed\"\n   [(set (match_dup 0) (ashift:SI (subreg:SI (match_dup 1) 0) (const_int 16)))\n    (set (match_dup 0) (ashiftrt:SI (match_dup 0) (const_int 16)))]\n@@ -3334,8 +3334,8 @@\n   [(set_attr \"type\" \"arith_media,load_media\")])\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:SI (match_operand:QI 1 \"extend_reg_operand\" \"r\")))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(sign_extend:SI (match_operand:QI 1 \"extend_reg_operand\" \"\")))]\n   \"TARGET_SHMEDIA && reload_completed\"\n   [(set (match_dup 0) (ashift:SI (subreg:SI (match_dup 1) 0) (const_int 24)))\n    (set (match_dup 0) (ashiftrt:SI (match_dup 0) (const_int 24)))]\n@@ -3601,8 +3601,8 @@\n    (set_attr \"length\" \"4,4,8,4,4,4,4,12\")])\n \n (define_split\n-  [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n-\t(match_operand:SI 1 \"immediate_operand\" \"s\"))]\n+  [(set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n+\t(match_operand:SI 1 \"immediate_operand\" \"\"))]\n   \"TARGET_SHMEDIA && reload_completed\n    && MOVI_SHORI_BASE_OPERAND_P (operands[1])\"\n   [(set (subreg:DI (match_dup 0) 0) (match_dup 2))]\n@@ -3613,8 +3613,8 @@\n }\")\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(match_operand:SI 1 \"immediate_operand\" \"n\"))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(match_operand:SI 1 \"immediate_operand\" \"\"))]\n   \"TARGET_SHMEDIA && reload_completed\n    && ((GET_CODE (operands[1]) == CONST_INT\n \t&& ! CONST_OK_FOR_J (INTVAL (operands[1])))\n@@ -3799,8 +3799,8 @@\n   [(set_attr \"type\" \"arith_media,arith_media,*,load_media,store_media\")])\n \n (define_split\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(match_operand:HI 1 \"immediate_operand\" \"n\"))]\n+  [(set (match_operand:HI 0 \"register_operand\" \"\")\n+\t(match_operand:HI 1 \"immediate_operand\" \"\"))]\n   \"TARGET_SHMEDIA && reload_completed\n    && ! CONST_OK_FOR_J (INTVAL (operands[1]))\"\n   [(set (subreg:DI (match_dup 0) 0) (match_dup 1))])\n@@ -3932,8 +3932,8 @@\n    (set_attr \"length\" \"4,4,16,4,4,4,4,*\")])\n \n (define_split\n-  [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r\")\n-\t(match_operand:DI 1 \"immediate_operand\" \"s\"))]\n+  [(set (match_operand:DI 0 \"arith_reg_operand\" \"\")\n+\t(match_operand:DI 1 \"immediate_operand\" \"\"))]\n   \"TARGET_SHMEDIA && reload_completed\n    && MOVI_SHORI_BASE_OPERAND_P (operands[1])\"\n   [(set (match_dup 0) (match_dup 1))]\n@@ -4040,8 +4040,8 @@\n   \"\")\n \n (define_split\n-  [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r\")\n-\t(match_operand:DI 1 \"immediate_operand\" \"i\"))]\n+  [(set (match_operand:DI 0 \"arith_reg_operand\" \"\")\n+\t(match_operand:DI 1 \"immediate_operand\" \"\"))]\n   \"TARGET_SHMEDIA && reload_completed\n    && GET_CODE (operands[1]) == CONST_INT\n    && ! CONST_OK_FOR_J (INTVAL (operands[1]))\"\n@@ -4138,8 +4138,8 @@\n }\")\n \n (define_split\n-  [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r\")\n-\t(match_operand:DI 1 \"immediate_operand\" \"F\"))]\n+  [(set (match_operand:DI 0 \"arith_reg_operand\" \"\")\n+\t(match_operand:DI 1 \"immediate_operand\" \"\"))]\n   \"TARGET_SHMEDIA && reload_completed\n    && GET_CODE (operands[1]) == CONST_DOUBLE\"\n   [(set (match_dup 0) (match_dup 2))\n@@ -4326,7 +4326,7 @@\n (define_split\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t(match_operand:DF 1 \"register_operand\" \"\"))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))\n+   (use (match_operand:PSI 2 \"fpscr_operand\" \"\"))\n    (clobber (match_scratch:SI 3 \"=X\"))]\n   \"TARGET_SH4 && reload_completed\n    && (true_regnum (operands[0]) < 16) != (true_regnum (operands[1]) < 16)\"\n@@ -4365,8 +4365,8 @@\n (define_split\n   [(set (match_operand:DF 0 \"general_movdst_operand\" \"\")\n \t(match_operand:DF 1 \"general_movsrc_operand\"  \"\"))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))\n-   (clobber (match_scratch:SI 3 \"X\"))]\n+   (use (match_operand:PSI 2 \"fpscr_operand\" \"\"))\n+   (clobber (match_scratch:SI 3 \"\"))]\n   \"TARGET_SH4\n    && reload_completed\n    && true_regnum (operands[0]) < 16\n@@ -4438,7 +4438,7 @@\n (define_split\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t(match_operand:DF 1 \"memory_operand\"  \"\"))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))\n+   (use (match_operand:PSI 2 \"fpscr_operand\" \"\"))\n    (clobber (reg:SI R0_REG))]\n   \"TARGET_SH4 && reload_completed\"\n   [(parallel [(set (match_dup 0) (match_dup 1))\n@@ -4476,7 +4476,7 @@\n (define_split\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t(match_operand:DF 1 \"register_operand\" \"\"))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))\n+   (use (match_operand:PSI 2 \"fpscr_operand\" \"\"))\n    (clobber (match_scratch:SI 3 \"X\"))]\n   \"TARGET_SH4 && ! TARGET_FMOVD && reload_completed\n    && FP_OR_XD_REGISTER_P (true_regnum (operands[0]))\n@@ -4495,8 +4495,8 @@\n (define_split\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t(mem:DF (match_operand:SI 1 \"register_operand\" \"\")))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))\n-   (clobber (match_scratch:SI 3 \"X\"))]\n+   (use (match_operand:PSI 2 \"fpscr_operand\" \"\"))\n+   (clobber (match_scratch:SI 3 \"\"))]\n   \"TARGET_SH4 && ! TARGET_FMOVD && reload_completed\n    && FP_OR_XD_REGISTER_P (true_regnum (operands[0]))\n    && find_regno_note (insn, REG_DEAD, true_regnum (operands[1]))\"\n@@ -4521,8 +4521,8 @@\n (define_split\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t(match_operand:DF 1 \"memory_operand\" \"\"))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))\n-   (clobber (match_scratch:SI 3 \"X\"))]\n+   (use (match_operand:PSI 2 \"fpscr_operand\" \"\"))\n+   (clobber (match_scratch:SI 3 \"\"))]\n   \"TARGET_SH4 && ! TARGET_FMOVD && reload_completed\n    && FP_OR_XD_REGISTER_P (true_regnum (operands[0]))\"\n   [(const_int 0)]\n@@ -4562,8 +4562,8 @@\n (define_split\n   [(set (match_operand:DF 0 \"memory_operand\" \"\")\n \t(match_operand:DF 1 \"register_operand\" \"\"))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))\n-   (clobber (match_scratch:SI 3 \"X\"))]\n+   (use (match_operand:PSI 2 \"fpscr_operand\" \"\"))\n+   (clobber (match_scratch:SI 3 \"\"))]\n   \"TARGET_SH4 && ! TARGET_FMOVD && reload_completed\n    && FP_OR_XD_REGISTER_P (true_regnum (operands[1]))\"\n   [(const_int 0)]\n@@ -5022,7 +5022,7 @@\n (define_split\n   [(set (match_operand:SF 0 \"register_operand\" \"\")\n \t(match_operand:SF 1 \"register_operand\" \"\"))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))\n+   (use (match_operand:PSI 2 \"fpscr_operand\" \"\"))\n    (clobber (reg:SI FPUL_REG))]\n   \"TARGET_SH1\"\n   [(parallel [(set (reg:SF FPUL_REG) (match_dup 1))\n@@ -5057,7 +5057,7 @@\n }\")\n \n (define_insn \"mov_nop\"\n-  [(set (match_operand 0 \"register_operand\" \"\") (match_dup 0))]\n+  [(set (match_operand 0 \"any_register_operand\" \"\") (match_dup 0))]\n   \"TARGET_SH3E\"\n   \"\"\n   [(set_attr \"length\" \"0\")\n@@ -5138,8 +5138,8 @@\n ;; This one has the additional purpose to record a possible scratch register\n ;; for the following branch.\n (define_insn \"indirect_jump_scratch\"\n-  [(set (match_operand 0 \"register_operand\" \"=r\")\n-\t(unspec [(match_operand 1 \"const_int_operand\" \"\")] UNSPEC_BBR))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand 1 \"const_int_operand\" \"\")] UNSPEC_BBR))]\n   \"TARGET_SH1\"\n   \"\"\n   [(set_attr \"length\" \"0\")])\n@@ -6210,7 +6210,7 @@\n   [(call (mem:SI (match_operand:SI 0 \"register_operand\" \"k,k\"))\n \t (match_operand 1 \"\" \"\"))\n    (return)\n-   (use (match_operand 2 \"register_operand\" \"z,x\"))\n+   (use (match_operand:SI 2 \"register_operand\" \"z,x\"))\n    (use (reg:SI R1_REG))\n    (use (reg:PSI FPSCR_REG))\n    ;; We want to make sure the `x' above will only match MACH_REG\n@@ -6633,7 +6633,7 @@\n \n (define_insn \"mova\"\n   [(set (reg:SI R0_REG)\n-\t(unspec [(label_ref (match_operand 0 \"\" \"\"))] UNSPEC_MOVA))]\n+\t(unspec:SI [(label_ref (match_operand 0 \"\" \"\"))] UNSPEC_MOVA))]\n   \"TARGET_SH1\"\n   \"mova\t%O0,r0\"\n   [(set_attr \"in_delay_slot\" \"no\")\n@@ -6642,16 +6642,16 @@\n ;; machine_dependent_reorg() will make this a `mova'.\n (define_insn \"mova_const\"\n   [(set (reg:SI R0_REG)\n-\t(unspec [(match_operand 0 \"immediate_operand\" \"i\")] UNSPEC_MOVA))]\n+\t(unspec:SI [(match_operand 0 \"immediate_operand\" \"i\")] UNSPEC_MOVA))]\n   \"TARGET_SH1\"\n   \"#\"\n   [(set_attr \"in_delay_slot\" \"no\")\n    (set_attr \"type\" \"arith\")])\n \n (define_expand \"GOTaddr2picreg\"\n   [(set (reg:SI R0_REG)\n-\t(unspec [(const:SI (unspec:SI [(match_dup 1)] UNSPEC_PIC))]\n-\t\tUNSPEC_MOVA))\n+\t(unspec:SI [(const:SI (unspec:SI [(match_dup 1)] UNSPEC_PIC))]\n+\t\t   UNSPEC_MOVA))\n    (set (match_dup 0) (const:SI (unspec:SI [(match_dup 1)] UNSPEC_PIC)))\n    (set (match_dup 0) (plus:SI (match_dup 0) (reg:SI R0_REG)))]\n   \"\" \"\n@@ -6728,8 +6728,8 @@\n    (set_attr \"length\" \"*\")])\n \n (define_insn \"ptrel\"\n-  [(set (match_operand:DI 0 \"target_reg_operand\" \"=bk\")\n-\t(plus (match_operand:DI 1 \"register_operand\" \"r\")\n+  [(set (match_operand:DI 0 \"target_reg_operand\" \"=b\")\n+\t(plus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t      (pc)))\n    (match_operand:DI 2 \"\" \"\")]\n   \"TARGET_SHMEDIA\"\n@@ -6979,7 +6979,7 @@\n \n (define_insn \"casesi_worker_0\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(unspec:SI [(match_operand 1 \"register_operand\" \"0,r\")\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"0,r\")\n \t\t (label_ref (match_operand 2 \"\" \"\"))] UNSPEC_CASESI))\n    (clobber (match_scratch:SI 3 \"=X,1\"))\n    (clobber (match_scratch:SI 4 \"=&z,z\"))]\n@@ -6988,37 +6988,38 @@\n \n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(unspec [(match_operand 1 \"register_operand\" \"\")\n-\t\t (label_ref (match_operand 2 \"\" \"\"))] UNSPEC_CASESI))\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"\")\n+\t\t    (label_ref (match_operand 2 \"\" \"\"))] UNSPEC_CASESI))\n    (clobber (match_scratch:SI 3 \"\"))\n    (clobber (match_scratch:SI 4 \"\"))]\n   \"TARGET_SH1 && ! TARGET_SH2 && reload_completed\"\n-  [(set (reg:SI R0_REG) (unspec [(label_ref (match_dup 2))] UNSPEC_MOVA))\n+  [(set (reg:SI R0_REG) (unspec:SI [(label_ref (match_dup 2))] UNSPEC_MOVA))\n    (parallel [(set (match_dup 0)\n-\t      (unspec [(reg:SI R0_REG) (match_dup 1)\n-\t\t       (label_ref (match_dup 2))] UNSPEC_CASESI))\n+\t      (unspec:SI [(reg:SI R0_REG) (match_dup 1)\n+\t\t\t  (label_ref (match_dup 2))] UNSPEC_CASESI))\n \t      (clobber (match_dup 3))])\n    (set (match_dup 0) (plus:SI (match_dup 0) (reg:SI R0_REG)))]\n   \"if (GET_CODE (operands[2]) == CODE_LABEL) LABEL_NUSES (operands[2])++;\")\n \n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(unspec:SI [(match_operand 1 \"register_operand\" \"\")\n-\t\t (label_ref (match_operand 2 \"\" \"\"))] UNSPEC_CASESI))\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"\")\n+\t\t    (label_ref (match_operand 2 \"\" \"\"))] UNSPEC_CASESI))\n    (clobber (match_scratch:SI 3 \"\"))\n    (clobber (match_scratch:SI 4 \"\"))]\n   \"TARGET_SH2 && reload_completed\"\n-  [(set (reg:SI R0_REG) (unspec [(label_ref (match_dup 2))] UNSPEC_MOVA))\n+  [(set (reg:SI R0_REG) (unspec:SI [(label_ref (match_dup 2))] UNSPEC_MOVA))\n    (parallel [(set (match_dup 0)\n \t      (unspec:SI [(reg:SI R0_REG) (match_dup 1)\n-\t\t       (label_ref (match_dup 2))] UNSPEC_CASESI))\n+\t\t\t  (label_ref (match_dup 2))] UNSPEC_CASESI))\n \t      (clobber (match_dup 3))])]\n   \"if (GET_CODE (operands[2]) == CODE_LABEL) LABEL_NUSES (operands[2])++;\")\n \n (define_insn \"*casesi_worker\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(unspec [(reg:SI R0_REG) (match_operand 1 \"register_operand\" \"0,r\")\n-\t\t (label_ref (match_operand 2 \"\" \"\"))] UNSPEC_CASESI))\n+\t(unspec:SI [(reg:SI R0_REG)\n+\t\t    (match_operand:SI 1 \"register_operand\" \"0,r\")\n+\t\t    (label_ref (match_operand 2 \"\" \"\"))] UNSPEC_CASESI))\n    (clobber (match_scratch:SI 3 \"=X,1\"))]\n   \"TARGET_SH1\"\n   \"*\n@@ -7192,23 +7193,23 @@\n }\")\n \n (define_insn \"shcompact_preserve_incoming_args\"\n-  [(set (match_operand 0 \"register_operand\" \"+r\")\n-\t(unspec [(match_dup 0)] UNSPEC_COMPACT_ARGS))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"+r\")\n+\t(unspec:SI [(match_dup 0)] UNSPEC_COMPACT_ARGS))]\n   \"TARGET_SHCOMPACT\"\n   \"\"\n   [(set_attr \"length\" \"0\")])\n \n (define_insn \"shcompact_incoming_args\"\n-  [(set (reg:SI R2_REG) (unspec [(reg:SI R2_REG)] UNSPEC_COMPACT_ARGS))\n-   (set (reg:SI R3_REG) (unspec [(reg:SI R3_REG)] UNSPEC_COMPACT_ARGS))\n-   (set (reg:SI R4_REG) (unspec [(reg:SI R4_REG)] UNSPEC_COMPACT_ARGS))\n-   (set (reg:SI R5_REG) (unspec [(reg:SI R5_REG)] UNSPEC_COMPACT_ARGS))\n-   (set (reg:SI R6_REG) (unspec [(reg:SI R6_REG)] UNSPEC_COMPACT_ARGS))\n-   (set (reg:SI R7_REG) (unspec [(reg:SI R7_REG)] UNSPEC_COMPACT_ARGS))\n-   (set (reg:SI R8_REG) (unspec [(reg:SI R8_REG)] UNSPEC_COMPACT_ARGS))\n-   (set (reg:SI R9_REG) (unspec [(reg:SI R9_REG)] UNSPEC_COMPACT_ARGS))\n+  [(set (reg:SI R2_REG) (unspec:SI [(reg:SI R2_REG)] UNSPEC_COMPACT_ARGS))\n+   (set (reg:SI R3_REG) (unspec:SI [(reg:SI R3_REG)] UNSPEC_COMPACT_ARGS))\n+   (set (reg:SI R4_REG) (unspec:SI [(reg:SI R4_REG)] UNSPEC_COMPACT_ARGS))\n+   (set (reg:SI R5_REG) (unspec:SI [(reg:SI R5_REG)] UNSPEC_COMPACT_ARGS))\n+   (set (reg:SI R6_REG) (unspec:SI [(reg:SI R6_REG)] UNSPEC_COMPACT_ARGS))\n+   (set (reg:SI R7_REG) (unspec:SI [(reg:SI R7_REG)] UNSPEC_COMPACT_ARGS))\n+   (set (reg:SI R8_REG) (unspec:SI [(reg:SI R8_REG)] UNSPEC_COMPACT_ARGS))\n+   (set (reg:SI R9_REG) (unspec:SI [(reg:SI R9_REG)] UNSPEC_COMPACT_ARGS))\n    (set (mem:BLK (reg:SI MACL_REG))\n-\t(unspec [(reg:SI MACH_REG)] UNSPEC_COMPACT_ARGS))\n+\t(unspec:BLK [(reg:SI MACH_REG)] UNSPEC_COMPACT_ARGS))\n    (use (reg:SI R0_REG))\n    (clobber (reg:SI R0_REG))\n    (clobber (reg:SI MACL_REG))\n@@ -9898,7 +9899,7 @@\n (define_insn \"mperm_w0\"\n   [(set (match_operand:V4HI 0 \"arith_reg_dest\" \"=r\")\n \t(vec_duplicate:V4HI (truncate:HI (match_operand 1\n-\t\t\t\t\t  \"extend_reg_operand\" \"r\"))))]\n+\t\t\t\t\t  \"trunc_hi_operand\" \"r\"))))]\n   \"TARGET_SHMEDIA\"\n   \"mperm.w\t%1, r63, %0\"\n   [(set_attr \"type\" \"arith_media\")])"}]}