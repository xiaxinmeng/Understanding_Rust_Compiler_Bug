{"sha": "190c04ba36d9c6c3dce41f12012aa97c6d7f22f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkwYzA0YmEzNmQ5YzZjM2RjZTQxZjEyMDEyYWE5N2M2ZDdmMjJmNQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-10-05T16:03:08Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-10-06T14:07:02Z"}, "message": "lto: fix LTO debug sections copying.\n\nreadelf -S prints:\n\nThere are 81999 section headers, starting at offset 0x1f488060:\n\nSection Headers:\n  [Nr] Name              Type            Address          Off    Size   ES Flg Lk Inf Al\n  [ 0]                   NULL            0000000000000000 000000 01404f 00     81998   0  0\n  [ 1] .group            GROUP           0000000000000000 000040 000008 04     81995 105027  4\n...\n  [81995] .symtab           SYMTAB          0000000000000000 d5d9298 2db310 18     81997 105026  8\n  [81996] .symtab_shndx     SYMTAB SECTION INDICES 0000000000000000 d8b45a8 079dd8 04     81995   0  4\n  [81997] .strtab           STRTAB          0000000000000000 d92e380 80460c 00      0   0  1\n...\n\nLooking at the documentation:\nTable 7\u201315 ELF sh_link and sh_info Interpretation\n\nsh_type - sh_link\nSHT_SYMTAB - The section header index of the associated string table.\nSHT_SYMTAB_SHNDX - The section header index of the associated symbol table.\n\nAs seen, sh_link of a SHT_SYMTAB always points to a .strtab and readelf\nconfirms that.\n\nSo we need to use reverse mapping taken from\n  [81996] .symtab_shndx     SYMTAB SECTION INDICES 0000000000000000 d8b45a8 079dd8 04     81995   0  4\n\nwhere sh_link points to 81995.\n\nlibiberty/ChangeLog:\n\n\tPR lto/97290\n\t* simple-object-elf.c (simple_object_elf_copy_lto_debug_sections):\n\tUse sh_link of a .symtab_shndx section.", "tree": {"sha": "5ae616d53d3231f9a73afd4a03b0a1494cc0dc5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ae616d53d3231f9a73afd4a03b0a1494cc0dc5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/190c04ba36d9c6c3dce41f12012aa97c6d7f22f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/190c04ba36d9c6c3dce41f12012aa97c6d7f22f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/190c04ba36d9c6c3dce41f12012aa97c6d7f22f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/190c04ba36d9c6c3dce41f12012aa97c6d7f22f5/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9a88a0a55e131172960fe56013965a7ab4eaf96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9a88a0a55e131172960fe56013965a7ab4eaf96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9a88a0a55e131172960fe56013965a7ab4eaf96"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "37e73348cb72c7e59792dc19c02cf51937b2ec4c", "filename": "libiberty/simple-object-elf.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/190c04ba36d9c6c3dce41f12012aa97c6d7f22f5/libiberty%2Fsimple-object-elf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/190c04ba36d9c6c3dce41f12012aa97c6d7f22f5/libiberty%2Fsimple-object-elf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fsimple-object-elf.c?ref=190c04ba36d9c6c3dce41f12012aa97c6d7f22f5", "patch": "@@ -1191,7 +1191,7 @@ simple_object_elf_copy_lto_debug_sections (simple_object_read *sobj,\n \t  unsigned int sh_link;\n \t  sh_link = ELF_FETCH_FIELD (type_functions, ei_class, Shdr,\n \t\t\t\t     shdr, sh_link, Elf_Word);\n-\t  symtab_indices_shndx[sh_link - 1] = i;\n+\t  symtab_indices_shndx[sh_link - 1] = i - 1;\n \t  /* Always discard the extended index sections, after\n \t     copying it will not be needed.  This way we don't need to\n \t     update it and deal with the ordering constraints of\n@@ -1372,19 +1372,22 @@ simple_object_elf_copy_lto_debug_sections (simple_object_read *sobj,\n \t{\n \t  unsigned entsize = ELF_FETCH_FIELD (type_functions, ei_class, Shdr,\n \t\t\t\t\t      shdr, sh_entsize, Elf_Addr);\n-\t  unsigned strtab = ELF_FETCH_FIELD (type_functions, ei_class, Shdr,\n-\t\t\t\t\t     shdr, sh_link, Elf_Word);\n \t  size_t prevailing_name_idx = 0;\n \t  unsigned char *ent;\n \t  unsigned *shndx_table = NULL;\n \t  /* Read the section index table if present.  */\n \t  if (symtab_indices_shndx[i - 1] != 0)\n \t    {\n-\t      unsigned char *sidxhdr = shdrs + (strtab - 1) * shdr_size;\n+\t      unsigned char *sidxhdr = shdrs + symtab_indices_shndx[i - 1] * shdr_size;\n \t      off_t sidxoff = ELF_FETCH_FIELD (type_functions, ei_class, Shdr,\n \t\t\t\t\t       sidxhdr, sh_offset, Elf_Addr);\n \t      size_t sidxsz = ELF_FETCH_FIELD (type_functions, ei_class, Shdr,\n \t\t\t\t\t       sidxhdr, sh_size, Elf_Addr);\n+\t      unsigned int shndx_type\n+\t\t= ELF_FETCH_FIELD (type_functions, ei_class, Shdr,\n+\t\t\t\t   sidxhdr, sh_type, Elf_Word);\n+\t      if (shndx_type != SHT_SYMTAB_SHNDX)\n+\t\treturn \"Wrong section type of a SYMTAB SECTION INDICES section\";\n \t      shndx_table = (unsigned *)XNEWVEC (char, sidxsz);\n \t      simple_object_internal_read (sobj->descriptor,\n \t\t\t\t\t   sobj->offset + sidxoff,"}]}