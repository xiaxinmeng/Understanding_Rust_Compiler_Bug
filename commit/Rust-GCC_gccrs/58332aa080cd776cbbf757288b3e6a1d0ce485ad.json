{"sha": "58332aa080cd776cbbf757288b3e6a1d0ce485ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgzMzJhYTA4MGNkNzc2Y2JiZjc1NzI4OGIzZTZhMWQwY2U0ODVhZA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2014-11-18T11:16:03Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2014-11-18T11:16:03Z"}, "message": "vcls.c: New test.\n\n2014-11-18  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/testsuite/\n\t* gcc.target/aarch64/advsimd-intrinsics/vcls.c: New test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcnt.c: New test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcombine.c: New test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcreate.c: New test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvt.c: New test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vdup_lane.c: New test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vext.c: New test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vget_high.c: New test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vget_low.c: New test.\n\nFrom-SVN: r217706", "tree": {"sha": "028625f90a3fb9057b6d634113510bd3ab29eb04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/028625f90a3fb9057b6d634113510bd3ab29eb04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58332aa080cd776cbbf757288b3e6a1d0ce485ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58332aa080cd776cbbf757288b3e6a1d0ce485ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58332aa080cd776cbbf757288b3e6a1d0ce485ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58332aa080cd776cbbf757288b3e6a1d0ce485ad/comments", "author": null, "committer": null, "parents": [{"sha": "fcfce895d320e916fe82ccc0b51701355770ad3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcfce895d320e916fe82ccc0b51701355770ad3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcfce895d320e916fe82ccc0b51701355770ad3b"}], "stats": {"total": 1083, "additions": 1083, "deletions": 0}, "files": [{"sha": "477ca7716424c47f88184004a06be4a45fcf4e32", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58332aa080cd776cbbf757288b3e6a1d0ce485ad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58332aa080cd776cbbf757288b3e6a1d0ce485ad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=58332aa080cd776cbbf757288b3e6a1d0ce485ad", "patch": "@@ -1,3 +1,15 @@\n+2014-11-18  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcls.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcnt.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcombine.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcreate.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvt.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vdup_lane.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vext.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vget_high.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vget_low.c: New test.\n+\n 2014-11-18  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \n \t* c-c++-common/tm/safe-3.c: Add bind_pic_locally."}, {"sha": "1d56c126f2205df765acd9462443daf746514507", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcls.c", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58332aa080cd776cbbf757288b3e6a1d0ce485ad/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58332aa080cd776cbbf757288b3e6a1d0ce485ad/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcls.c?ref=58332aa080cd776cbbf757288b3e6a1d0ce485ad", "patch": "@@ -0,0 +1,174 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0x2, 0x2, 0x2, 0x2 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0x19, 0x19 };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0x7, 0x7, 0x7, 0x7,\n+\t\t\t\t\t0x7, 0x7, 0x7, 0x7,\n+\t\t\t\t\t0x7, 0x7, 0x7, 0x7,\n+\t\t\t\t\t0x7, 0x7, 0x7, 0x7 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0x2, 0x2, 0x2, 0x2,\n+\t\t\t\t\t0x2, 0x2, 0x2, 0x2 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0x14, 0x14, 0x14, 0x14 };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t   0x33333333, 0x33333333 };\n+\n+/* Expected results with negative input.  */\n+VECT_VAR_DECL(expected_with_negative,int,8,8) [] = { 0x7, 0x7, 0x7, 0x7,\n+\t\t\t\t\t\t     0x7, 0x7, 0x7, 0x7 };\n+VECT_VAR_DECL(expected_with_negative,int,16,4) [] = { 0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_with_negative,int,32,2) [] = { 0x1, 0x1 };\n+VECT_VAR_DECL(expected_with_negative,int,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected_with_negative,uint,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t      0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_with_negative,uint,16,4) [] = { 0x3333, 0x3333,\n+\t\t\t\t\t\t       0x3333, 0x3333 };\n+VECT_VAR_DECL(expected_with_negative,uint,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected_with_negative,uint,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected_with_negative,poly,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t      0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_with_negative,poly,16,4) [] = { 0x3333, 0x3333,\n+\t\t\t\t\t\t       0x3333, 0x3333 };\n+VECT_VAR_DECL(expected_with_negative,hfloat,32,2) [] = { 0x33333333,\n+\t\t\t\t\t\t\t 0x33333333 };\n+VECT_VAR_DECL(expected_with_negative,int,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t      0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t      0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_with_negative,int,16,8) [] = { 0x2, 0x2, 0x2, 0x2,\n+\t\t\t\t\t\t      0x2, 0x2, 0x2, 0x2 };\n+VECT_VAR_DECL(expected_with_negative,int,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_with_negative,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t\t      0x3333333333333333 };\n+VECT_VAR_DECL(expected_with_negative,uint,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t       0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t       0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t       0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_with_negative,uint,16,8) [] = { 0x3333, 0x3333,\n+\t\t\t\t\t\t       0x3333, 0x3333,\n+\t\t\t\t\t\t       0x3333, 0x3333,\n+\t\t\t\t\t\t       0x3333, 0x3333 };\n+VECT_VAR_DECL(expected_with_negative,uint,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t\t       0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected_with_negative,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t\t       0x3333333333333333 };\n+VECT_VAR_DECL(expected_with_negative,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t       0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t       0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t       0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_with_negative,poly,16,8) [] = { 0x3333, 0x3333,\n+\t\t\t\t\t\t       0x3333, 0x3333,\n+\t\t\t\t\t\t       0x3333, 0x3333,\n+\t\t\t\t\t\t       0x3333, 0x3333 };\n+VECT_VAR_DECL(expected_with_negative,hfloat,32,4) [] = { 0x33333333,\n+\t\t\t\t\t\t\t 0x33333333,\n+\t\t\t\t\t\t\t 0x33333333,\n+\t\t\t\t\t\t\t 0x33333333 };\n+\n+#define INSN_NAME vcls\n+#define TEST_MSG \"VCLS/VCLSQ\"\n+\n+#define FNNAME1(NAME) void exec_ ## NAME (void)\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+FNNAME (INSN_NAME)\n+{\n+  /* Basic test: y=vcls(x), then store the result.  */\n+#define TEST_UNARY_OP1(INSN, Q, T1, T2, W, N)\t\t\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n+    INSN##Q##_##T2##W(VECT_VAR(vector, T1, W, N));\t\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vector_res, T1, W, N))\n+\n+#define TEST_UNARY_OP(INSN, Q, T1, T2, W, N)\t\\\n+  TEST_UNARY_OP1(INSN, Q, T1, T2, W, N)\t\t\\\n+\n+  /* No need for 64 bits variants.  */\n+  DECL_VARIABLE(vector, int, 8, 8);\n+  DECL_VARIABLE(vector, int, 16, 4);\n+  DECL_VARIABLE(vector, int, 32, 2);\n+  DECL_VARIABLE(vector, int, 8, 16);\n+  DECL_VARIABLE(vector, int, 16, 8);\n+  DECL_VARIABLE(vector, int, 32, 4);\n+\n+  DECL_VARIABLE(vector_res, int, 8, 8);\n+  DECL_VARIABLE(vector_res, int, 16, 4);\n+  DECL_VARIABLE(vector_res, int, 32, 2);\n+  DECL_VARIABLE(vector_res, int, 8, 16);\n+  DECL_VARIABLE(vector_res, int, 16, 8);\n+  DECL_VARIABLE(vector_res, int, 32, 4);\n+\n+  clean_results ();\n+\n+  /* Fill input vector with arbitrary values.  */\n+  VDUP(vector, , int, s, 8, 8, 0x1);\n+  VDUP(vector, , int, s, 16, 4, 0x1234);\n+  VDUP(vector, , int, s, 32, 2, 0x34);\n+  VDUP(vector, q, int, s, 8, 16, 0);\n+  VDUP(vector, q, int, s, 16, 8, 0x1234);\n+  VDUP(vector, q, int, s, 32, 4, 0x678);\n+\n+  /* Apply a unary operator named INSN_NAME.  */\n+  TEST_UNARY_OP(INSN_NAME, , int, s, 8, 8);\n+  TEST_UNARY_OP(INSN_NAME, , int, s, 16, 4);\n+  TEST_UNARY_OP(INSN_NAME, , int, s, 32, 2);\n+  TEST_UNARY_OP(INSN_NAME, q, int, s, 8, 16);\n+  TEST_UNARY_OP(INSN_NAME, q, int, s, 16, 8);\n+  TEST_UNARY_OP(INSN_NAME, q, int, s, 32, 4);\n+\n+  CHECK_RESULTS (TEST_MSG, \" (positive input)\");\n+\n+  /* Fill input vector with arbitrary values (negative).  */\n+  VDUP(vector, , int, s, 8, 8, 0xFF);\n+  VDUP(vector, , int, s, 16, 4, 0xC234);\n+  VDUP(vector, , int, s, 32, 2, 0xDEAD0034);\n+  VDUP(vector, q, int, s, 8, 16, 0x80);\n+  VDUP(vector, q, int, s, 16, 8, 0xE234);\n+  VDUP(vector, q, int, s, 32, 4, 0xBEEF0678);\n+\n+  /* Apply a unary operator named INSN_NAME  */\n+  TEST_UNARY_OP(INSN_NAME, , int, s, 8, 8);\n+  TEST_UNARY_OP(INSN_NAME, , int, s, 16, 4);\n+  TEST_UNARY_OP(INSN_NAME, , int, s, 32, 2);\n+  TEST_UNARY_OP(INSN_NAME, q, int, s, 8, 16);\n+  TEST_UNARY_OP(INSN_NAME, q, int, s, 16, 8);\n+  TEST_UNARY_OP(INSN_NAME, q, int, s, 32, 4);\n+\n+  CHECK_RESULTS_NAMED (TEST_MSG, expected_with_negative, \" (negative input)\");\n+}\n+\n+int main (void)\n+{\n+  exec_vcls ();\n+  return 0;\n+}"}, {"sha": "4d9f0ced9ac5523ef1a327a417df999302a4433b", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcnt.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58332aa080cd776cbbf757288b3e6a1d0ce485ad/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58332aa080cd776cbbf757288b3e6a1d0ce485ad/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcnt.c?ref=58332aa080cd776cbbf757288b3e6a1d0ce485ad", "patch": "@@ -0,0 +1,96 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4 };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0x3333333333333333, 0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,\n+\t\t\t\t\t 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,\n+\t\t\t\t\t 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6 };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t   0x33333333, 0x33333333 };\n+\n+#define INSN_NAME vcnt\n+#define TEST_MSG \"VCNT/VCNTQ\"\n+\n+#define FNNAME1(NAME) void exec_ ## NAME (void)\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+FNNAME (INSN_NAME)\n+{\n+  /* Basic test: y=vcnt(x), then store the result.  */\n+#define TEST_UNARY_OP1(INSN, Q, T1, T2, W, N)\t\t\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n+    INSN##Q##_##T2##W(VECT_VAR(vector, T1, W, N));\t\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vector_res, T1, W, N))\n+\n+#define TEST_UNARY_OP(INSN, Q, T1, T2, W, N)\t\\\n+  TEST_UNARY_OP1(INSN, Q, T1, T2, W, N)\t\t\\\n+\n+  /* No need for 64 bits variants.  */\n+  DECL_VARIABLE(vector, int, 8, 8);\n+  DECL_VARIABLE(vector, uint, 8, 8);\n+  DECL_VARIABLE(vector, poly, 8, 8);\n+  DECL_VARIABLE(vector, int, 8, 16);\n+  DECL_VARIABLE(vector, uint, 8, 16);\n+  DECL_VARIABLE(vector, poly, 8, 16);\n+\n+  DECL_VARIABLE(vector_res, int, 8, 8);\n+  DECL_VARIABLE(vector_res, uint, 8, 8);\n+  DECL_VARIABLE(vector_res, poly, 8, 8);\n+  DECL_VARIABLE(vector_res, int, 8, 16);\n+  DECL_VARIABLE(vector_res, uint, 8, 16);\n+  DECL_VARIABLE(vector_res, poly, 8, 16);\n+\n+  clean_results ();\n+\n+  /* Fill input vector with arbitrary values.  */\n+  VDUP(vector, , int, s, 8, 8, 0xFF);\n+  VDUP(vector, , uint, u, 8, 8, 0x35);\n+  VDUP(vector, , poly, p, 8, 8, 0x35);\n+  VDUP(vector, q, int, s, 8, 16, 0);\n+  VDUP(vector, q, uint, u, 8, 16, 0xBD);\n+  VDUP(vector, q, poly, p, 8, 16, 0xBD);\n+\n+  /* Apply a unary operator named INSN_NAME.  */\n+  TEST_UNARY_OP(INSN_NAME, , int, s, 8, 8);\n+  TEST_UNARY_OP(INSN_NAME, , uint, u, 8, 8);\n+  TEST_UNARY_OP(INSN_NAME, , poly, p, 8, 8);\n+  TEST_UNARY_OP(INSN_NAME, q, int, s, 8, 16);\n+  TEST_UNARY_OP(INSN_NAME, q, uint, u, 8, 16);\n+  TEST_UNARY_OP(INSN_NAME, q, poly, p, 8, 16);\n+\n+  CHECK_RESULTS (TEST_MSG, \"\");\n+}\n+\n+int main (void)\n+{\n+  exec_vcnt ();\n+  return 0;\n+}"}, {"sha": "6d5a854937d7fea5c8a587c2b8c6f1aba6b3faa9", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcombine.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58332aa080cd776cbbf757288b3e6a1d0ce485ad/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58332aa080cd776cbbf757288b3e6a1d0ce485ad/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcombine.c?ref=58332aa080cd776cbbf757288b3e6a1d0ce485ad", "patch": "@@ -0,0 +1,98 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t       0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t0xf4, 0xf5, 0xf6, 0xf7,\n+\t\t\t\t\t0x11, 0x11, 0x11, 0x11,\n+\t\t\t\t\t0x11, 0x11, 0x11, 0x11 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n+\t\t\t\t\t0x22, 0x22, 0x22, 0x22 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0xfffffff0, 0xfffffff1, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0xfffffffffffffff0, 0x44 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t 0xf4, 0xf5, 0xf6, 0xf7,\n+\t\t\t\t\t 0x55, 0x55, 0x55, 0x55,\n+\t\t\t\t\t 0x55, 0x55, 0x55, 0x55 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n+\t\t\t\t\t 0x66, 0x66, 0x66, 0x66 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0xfffffff0, 0xfffffff1, 0x77, 0x77 };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0xfffffffffffffff0, 0x88 };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t 0xf4, 0xf5, 0xf6, 0xf7,\n+\t\t\t\t\t 0x55, 0x55, 0x55, 0x55,\n+\t\t\t\t\t 0x55, 0x55, 0x55, 0x55 };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n+\t\t\t\t\t 0x66, 0x66, 0x66, 0x66 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0xc1800000, 0xc1700000,\n+\t\t\t\t\t   0x40533333, 0x40533333 };\n+\n+#define TEST_MSG \"VCOMBINE\"\n+void exec_vcombine (void)\n+{\n+  /* Basic test: vec128=vcombine(vec64_a, vec64_b), then store the result.  */\n+#define TEST_VCOMBINE(T1, T2, W, N, N2)\t\t\t\t\t\\\n+  VECT_VAR(vector128, T1, W, N2) =\t\t\t\t\t\\\n+    vcombine_##T2##W(VECT_VAR(vector64_a, T1, W, N),\t\t\t\\\n+\t\t     VECT_VAR(vector64_b, T1, W, N));\t\t\t\\\n+  vst1q_##T2##W(VECT_VAR(result, T1, W, N2), VECT_VAR(vector128, T1, W, N2))\n+\n+  DECL_VARIABLE_64BITS_VARIANTS(vector64_a);\n+  DECL_VARIABLE_64BITS_VARIANTS(vector64_b);\n+  DECL_VARIABLE_128BITS_VARIANTS(vector128);\n+\n+  /* Initialize input \"vector64_a\" from \"buffer\".  */\n+  TEST_MACRO_64BITS_VARIANTS_2_5(VLOAD, vector64_a, buffer);\n+  VLOAD(vector64_a, buffer, , float, f, 32, 2);\n+\n+  /* Choose init value arbitrarily.  */\n+  VDUP(vector64_b, , int, s, 8, 8, 0x11);\n+  VDUP(vector64_b, , int, s, 16, 4, 0x22);\n+  VDUP(vector64_b, , int, s, 32, 2, 0x33);\n+  VDUP(vector64_b, , int, s, 64, 1, 0x44);\n+  VDUP(vector64_b, , uint, u, 8, 8, 0x55);\n+  VDUP(vector64_b, , uint, u, 16, 4, 0x66);\n+  VDUP(vector64_b, , uint, u, 32, 2, 0x77);\n+  VDUP(vector64_b, , uint, u, 64, 1, 0x88);\n+  VDUP(vector64_b, , poly, p, 8, 8, 0x55);\n+  VDUP(vector64_b, , poly, p, 16, 4, 0x66);\n+  VDUP(vector64_b, , float, f, 32, 2, 3.3f);\n+\n+  clean_results ();\n+\n+  /* Execute the tests.  */\n+  TEST_VCOMBINE(int, s, 8, 8, 16);\n+  TEST_VCOMBINE(int, s, 16, 4, 8);\n+  TEST_VCOMBINE(int, s, 32, 2, 4);\n+  TEST_VCOMBINE(int, s, 64, 1, 2);\n+  TEST_VCOMBINE(uint, u, 8, 8, 16);\n+  TEST_VCOMBINE(uint, u, 16, 4, 8);\n+  TEST_VCOMBINE(uint, u, 32, 2, 4);\n+  TEST_VCOMBINE(uint, u, 64, 1, 2);\n+  TEST_VCOMBINE(poly, p, 8, 8, 16);\n+  TEST_VCOMBINE(poly, p, 16, 4, 8);\n+  TEST_VCOMBINE(float, f, 32, 2, 4);\n+\n+  CHECK_RESULTS (TEST_MSG, \"\");\n+}\n+\n+int main (void)\n+{\n+  exec_vcombine ();\n+  return 0;\n+}"}, {"sha": "686358df455cf7f4bdd3431202146eaf56a766b3", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcreate.c", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58332aa080cd776cbbf757288b3e6a1d0ce485ad/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcreate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58332aa080cd776cbbf757288b3e6a1d0ce485ad/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcreate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcreate.c?ref=58332aa080cd776cbbf757288b3e6a1d0ce485ad", "patch": "@@ -0,0 +1,123 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xf0, 0xde, 0xbc, 0x9a,\n+\t\t\t\t       0x78, 0x56, 0x34, 0x12 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xdef0, 0x9abc, 0x5678, 0x1234 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0x9abcdef0, 0x12345678 };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0x123456789abcdef0 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xf0, 0xde, 0xbc, 0x9a,\n+\t\t\t\t\t0x78, 0x56, 0x34, 0x12 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xdef0, 0x9abc, 0x5678, 0x1234 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0x9abcdef0, 0x12345678 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0x123456789abcdef0 };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0xf0, 0xde, 0xbc, 0x9a,\n+\t\t\t\t\t0x78, 0x56, 0x34, 0x12 };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0xdef0, 0x9abc, 0x5678, 0x1234 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x9abcdef0, 0x12345678 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t   0x33333333, 0x33333333 };\n+\n+#define INSN_NAME vcreate\n+#define TEST_MSG \"VCREATE\"\n+\n+#define FNNAME1(NAME) void exec_ ## NAME (void)\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+FNNAME (INSN_NAME)\n+{\n+  /* Basic test: y=vcreate(x), then store the result.  */\n+#define TEST_VCREATE(T1, T2, W, N)\t\t\t\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) = vcreate_##T2##W(VECT_VAR(val, T1, W, N)); \\\n+  vst1_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vector_res, T1, W, N))\n+\n+#define DECL_VAL(VAR, T1, W, N)\t\t\t\\\n+  uint64_t VECT_VAR(VAR, T1, W, N)\n+\n+  DECL_VAL(val, int, 8, 8);\n+  DECL_VAL(val, int, 16, 4);\n+  DECL_VAL(val, int, 32, 2);\n+  DECL_VAL(val, int, 64, 1);\n+  DECL_VAL(val, float, 32, 2);\n+  DECL_VAL(val, uint, 8, 8);\n+  DECL_VAL(val, uint, 16, 4);\n+  DECL_VAL(val, uint, 32, 2);\n+  DECL_VAL(val, uint, 64, 1);\n+  DECL_VAL(val, poly, 8, 8);\n+  DECL_VAL(val, poly, 16, 4);\n+\n+  DECL_VARIABLE(vector_res, int, 8, 8);\n+  DECL_VARIABLE(vector_res, int, 16, 4);\n+  DECL_VARIABLE(vector_res, int, 32, 2);\n+  DECL_VARIABLE(vector_res, int, 64, 1);\n+  DECL_VARIABLE(vector_res, float, 32, 2);\n+  DECL_VARIABLE(vector_res, uint, 8, 8);\n+  DECL_VARIABLE(vector_res, uint, 16, 4);\n+  DECL_VARIABLE(vector_res, uint, 32, 2);\n+  DECL_VARIABLE(vector_res, uint, 64, 1);\n+  DECL_VARIABLE(vector_res, poly, 8, 8);\n+  DECL_VARIABLE(vector_res, poly, 16, 4);\n+\n+  clean_results ();\n+\n+  /* Initialize input values arbitrarily.  */\n+  VECT_VAR(val, int, 8, 8) = 0x123456789abcdef0LL;\n+  VECT_VAR(val, int, 16, 4) = 0x123456789abcdef0LL;\n+  VECT_VAR(val, int, 32, 2) = 0x123456789abcdef0LL;\n+  VECT_VAR(val, int, 64, 1) = 0x123456789abcdef0LL;\n+  VECT_VAR(val, float, 32, 2) = 0x123456789abcdef0LL;\n+  VECT_VAR(val, uint, 8, 8) = 0x123456789abcdef0ULL;\n+  VECT_VAR(val, uint, 16, 4) = 0x123456789abcdef0ULL;\n+  VECT_VAR(val, uint, 32, 2) = 0x123456789abcdef0ULL;\n+  VECT_VAR(val, uint, 64, 1) = 0x123456789abcdef0ULL;\n+  VECT_VAR(val, poly, 8, 8) = 0x123456789abcdef0ULL;\n+  VECT_VAR(val, poly, 16, 4) = 0x123456789abcdef0ULL;\n+\n+  TEST_VCREATE(int, s, 8, 8);\n+  TEST_VCREATE(int, s, 16, 4);\n+  TEST_VCREATE(int, s, 32, 2);\n+  TEST_VCREATE(float, f, 32, 2);\n+  TEST_VCREATE(int, s, 64, 1);\n+  TEST_VCREATE(uint, u, 8, 8);\n+  TEST_VCREATE(uint, u, 16, 4);\n+  TEST_VCREATE(uint, u, 32, 2);\n+  TEST_VCREATE(uint, u, 64, 1);\n+  TEST_VCREATE(poly, p, 8, 8);\n+  TEST_VCREATE(poly, p, 16, 4);\n+\n+  CHECK_RESULTS (TEST_MSG, \"\");\n+}\n+\n+int main (void)\n+{\n+  exec_vcreate ();\n+  return 0;\n+}"}, {"sha": "8e80f1e0e9852b238615655a0aad3cc88222e5f4", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvt.c", "status": "added", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58332aa080cd776cbbf757288b3e6a1d0ce485ad/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58332aa080cd776cbbf757288b3e6a1d0ce485ad/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvt.c?ref=58332aa080cd776cbbf757288b3e6a1d0ce485ad", "patch": "@@ -0,0 +1,185 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+#include <math.h>\n+\n+/* Expected results for vcvt.  */\n+VECT_VAR_DECL(expected_s,hfloat,32,2) [] = { 0xc1800000, 0xc1700000 };\n+VECT_VAR_DECL(expected_u,hfloat,32,2) [] = { 0x4f800000, 0x4f800000 };\n+VECT_VAR_DECL(expected_s,hfloat,32,4) [] = { 0xc1800000, 0xc1700000,\n+\t\t\t\t\t   0xc1600000, 0xc1500000 };\n+VECT_VAR_DECL(expected_u,hfloat,32,4) [] = { 0x4f800000, 0x4f800000,\n+\t\t\t\t\t   0x4f800000, 0x4f800000 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffffff1, 0x5 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0x0, 0x5 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0x0, 0x0, 0xf, 0xfffffff1 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0x0, 0x0, 0xf, 0x0 };\n+\n+/* Expected results for vcvt_n.  */\n+VECT_VAR_DECL(expected_vcvt_n_s,hfloat,32,2) [] = { 0xc0800000, 0xc0700000 };\n+VECT_VAR_DECL(expected_vcvt_n_u,hfloat,32,2) [] = { 0x4c000000, 0x4c000000 };\n+VECT_VAR_DECL(expected_vcvt_n_s,hfloat,32,4) [] = { 0xb2800000, 0xb2700000,\n+\t\t\t\t\t\t  0xb2600000, 0xb2500000 };\n+VECT_VAR_DECL(expected_vcvt_n_u,hfloat,32,4) [] = { 0x49800000, 0x49800000,\n+\t\t\t\t\t\t  0x49800000, 0x49800000 };\n+VECT_VAR_DECL(expected_vcvt_n,int,32,2) [] = { 0xff0b3333, 0x54cccd };\n+VECT_VAR_DECL(expected_vcvt_n,uint,32,2) [] = { 0x0, 0x15 };\n+VECT_VAR_DECL(expected_vcvt_n,int,32,4) [] = { 0x0, 0x0, 0x1e3d7, 0xfffe1c29 };\n+VECT_VAR_DECL(expected_vcvt_n,uint,32,4) [] = { 0x0, 0x0, 0x1e, 0x0 };\n+\n+/* Expected results for vcvt with rounding.  */\n+VECT_VAR_DECL(expected_rounding,int,32,2) [] = { 0xa, 0xa };\n+VECT_VAR_DECL(expected_rounding,uint,32,2) [] = { 0xa, 0xa };\n+VECT_VAR_DECL(expected_rounding,int,32,4) [] = { 0x7d, 0x7d, 0x7d, 0x7d };\n+VECT_VAR_DECL(expected_rounding,uint,32,4) [] = { 0x7d, 0x7d, 0x7d, 0x7d };\n+\n+/* Expected results for vcvt_n with rounding.  */\n+VECT_VAR_DECL(expected_vcvt_n_rounding,int,32,2) [] = { 0xa66666, 0xa66666 };\n+VECT_VAR_DECL(expected_vcvt_n_rounding,uint,32,2) [] = { 0xa66666, 0xa66666 };\n+VECT_VAR_DECL(expected_vcvt_n_rounding,int,32,4) [] = { 0xfbccc, 0xfbccc,\n+\t\t\t\t\t       0xfbccc, 0xfbccc };\n+VECT_VAR_DECL(expected_vcvt_n_rounding,uint,32,4) [] = { 0xfbccc, 0xfbccc,\n+\t\t\t\t\t\t0xfbccc, 0xfbccc };\n+\n+/* Expected results for vcvt_n with saturation.  */\n+VECT_VAR_DECL(expected_vcvt_n_saturation,int,32,2) [] = { 0x7fffffff,\n+\t\t\t\t\t\t\t  0x7fffffff };\n+VECT_VAR_DECL(expected_vcvt_n_saturation,int,32,4) [] = { 0x7fffffff,\n+\t\t\t\t\t\t\t  0x7fffffff,\n+\t\t\t\t\t       0x7fffffff, 0x7fffffff };\n+\n+#define TEST_MSG \"VCVT/VCVTQ\"\n+void exec_vcvt (void)\n+{\n+  int i;\n+\n+  /* Basic test: y=vcvt(x), then store the result.  */\n+#define TEST_VCVT(Q, T1, T2, W, N, TS1, TS2, EXP)\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\\\n+    vcvt##Q##_##T2##W##_##TS2##W(VECT_VAR(vector, TS1, W, N));\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\\\n+\t\t    VECT_VAR(vector_res, T1, W, N));\t\t\\\n+  CHECK(TEST_MSG, T1, W, N, PRIx##W, EXP, TEST_MSG2);\n+\n+#define TEST_VCVT_FP(Q, T1, T2, W, N, TS1, TS2, EXP)\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\\\n+    vcvt##Q##_##T2##W##_##TS2##W(VECT_VAR(vector, TS1, W, N));\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\\\n+\t\t    VECT_VAR(vector_res, T1, W, N));\t\t\\\n+  CHECK_FP(TEST_MSG, T1, W, N, PRIx##W, EXP, TEST_MSG2);\n+\n+#define TEST_VCVT_N(Q, T1, T2, W, N, TS1, TS2, V, EXP)\t\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n+    vcvt##Q##_n_##T2##W##_##TS2##W(VECT_VAR(vector, TS1, W, N), V);\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\t\\\n+\t\t    VECT_VAR(vector_res, T1, W, N));\t\t\t\\\n+  CHECK(TEST_MSG, T1, W, N, PRIx##W, EXP, TEST_MSG2);\n+\n+#define TEST_VCVT_N_FP(Q, T1, T2, W, N, TS1, TS2, V, EXP)\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n+    vcvt##Q##_n_##T2##W##_##TS2##W(VECT_VAR(vector, TS1, W, N), V);\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\t\\\n+\t\t    VECT_VAR(vector_res, T1, W, N));\t\t\t\\\n+  CHECK_FP(TEST_MSG, T1, W, N, PRIx##W, EXP, TEST_MSG2);\n+\n+  DECL_VARIABLE_ALL_VARIANTS(vector);\n+  DECL_VARIABLE_ALL_VARIANTS(vector_res);\n+\n+  clean_results ();\n+\n+  /* Initialize input \"vector\" from \"buffer\".  */\n+  TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector, buffer);\n+  VLOAD(vector, buffer, , float, f, 32, 2);\n+  VLOAD(vector, buffer, q, float, f, 32, 4);\n+\n+  /* Make sure some elements have a fractional part, to exercise\n+     integer conversions.  */\n+  VSET_LANE(vector, , float, f, 32, 2, 0, -15.3f);\n+  VSET_LANE(vector, , float, f, 32, 2, 1, 5.3f);\n+  VSET_LANE(vector, q, float, f, 32, 4, 2, -15.3f);\n+  VSET_LANE(vector, q, float, f, 32, 4, 3, 5.3f);\n+\n+  /* The same result buffers are used multiple times, so we check them\n+     before overwriting them.  */\n+#define TEST_MSG2 \"\"\n+\n+  /* vcvt_f32_xx.  */\n+  TEST_VCVT_FP(, float, f, 32, 2, int, s, expected_s);\n+  TEST_VCVT_FP(, float, f, 32, 2, uint, u, expected_u);\n+\n+  /* vcvtq_f32_xx.  */\n+  TEST_VCVT_FP(q, float, f, 32, 4, int, s, expected_s);\n+  TEST_VCVT_FP(q, float, f, 32, 4, uint, u, expected_u);\n+\n+  /* vcvt_xx_f32.  */\n+  TEST_VCVT(, int, s, 32, 2, float, f, expected);\n+  TEST_VCVT(, uint, u, 32, 2, float, f, expected);\n+\n+  VSET_LANE(vector, q, float, f, 32, 4, 0, 0.0f);\n+  VSET_LANE(vector, q, float, f, 32, 4, 1, -0.0f);\n+  VSET_LANE(vector, q, float, f, 32, 4, 2, 15.12f);\n+  VSET_LANE(vector, q, float, f, 32, 4, 3, -15.12f);\n+\n+  /* vcvtq_xx_f32.  */\n+  TEST_VCVT(q, int, s, 32, 4, float, f, expected);\n+  TEST_VCVT(q, uint, u, 32, 4, float, f, expected);\n+\n+  /* The same result buffers are used multiple times, so we check them\n+     before overwriting them.  */\n+#undef TEST_MSG\n+#define TEST_MSG \"VCVT_N/VCVTQ_N\"\n+\n+  /* vcvt_n_f32_xx.  */\n+  TEST_VCVT_N_FP(, float, f, 32, 2, int, s, 2, expected_vcvt_n_s);\n+  TEST_VCVT_N_FP(, float, f, 32, 2, uint, u, 7, expected_vcvt_n_u);\n+\n+  /* vcvtq_n_f32_xx.  */\n+  TEST_VCVT_N_FP(q, float, f, 32, 4, int, s, 30, expected_vcvt_n_s);\n+  TEST_VCVT_N_FP(q, float, f, 32, 4, uint, u, 12, expected_vcvt_n_u);\n+\n+  /* vcvt_n_xx_f32.  */\n+  TEST_VCVT_N(, int, s, 32, 2, float, f, 20, expected_vcvt_n);\n+  TEST_VCVT_N(, uint, u, 32, 2, float, f, 2, expected_vcvt_n);\n+\n+  /* vcvtq_n_xx_f32.  */\n+  TEST_VCVT_N(q, int, s, 32, 4, float, f, 13, expected_vcvt_n);\n+  TEST_VCVT_N(q, uint, u, 32, 4, float, f, 1, expected_vcvt_n);\n+\n+  /* Check rounding.  */\n+#undef TEST_MSG\n+#define TEST_MSG \"VCVT/VCVTQ\"\n+#undef TEST_MSG2\n+#define TEST_MSG2 \"(check rounding)\"\n+  VDUP(vector, , float, f, 32, 2, 10.4f);\n+  VDUP(vector, q, float, f, 32, 4, 125.9f);\n+  /* vcvt_xx_f32.  */\n+  TEST_VCVT(, int, s, 32, 2, float, f, expected_rounding);\n+  TEST_VCVT(, uint, u, 32, 2, float, f, expected_rounding);\n+  /* vcvtq_xx_f32.  */\n+  TEST_VCVT(q, int, s, 32, 4, float, f, expected_rounding);\n+  TEST_VCVT(q, uint, u, 32, 4, float, f, expected_rounding);\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VCVT_N/VCVTQ_N\"\n+  /* vcvt_n_xx_f32.  */\n+  TEST_VCVT_N(, int, s, 32, 2, float, f, 20, expected_vcvt_n_rounding);\n+  TEST_VCVT_N(, uint, u, 32, 2, float, f, 20, expected_vcvt_n_rounding);\n+  /* vcvtq_n_xx_f32.  */\n+  TEST_VCVT_N(q, int, s, 32, 4, float, f, 13, expected_vcvt_n_rounding);\n+  TEST_VCVT_N(q, uint, u, 32, 4, float, f, 13, expected_vcvt_n_rounding);\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VCVT_N/VCVTQ_N\"\n+#undef TEST_MSG2\n+#define TEST_MSG2 \"(check saturation)\"\n+  /* vcvt_n_xx_f32.  */\n+  TEST_VCVT_N(, int, s, 32, 2, float, f, 31, expected_vcvt_n_saturation);\n+  /* vcvtq_n_xx_f32.  */\n+  TEST_VCVT_N(q, int, s, 32, 4, float, f, 31, expected_vcvt_n_saturation);\n+}\n+\n+int main (void)\n+{\n+  exec_vcvt ();\n+  return 0;\n+}"}, {"sha": "c1ff6dd3007100966a488a33bc714802b987a084", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vdup_lane.c", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58332aa080cd776cbbf757288b3e6a1d0ce485ad/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdup_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58332aa080cd776cbbf757288b3e6a1d0ce485ad/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdup_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdup_lane.c?ref=58332aa080cd776cbbf757288b3e6a1d0ce485ad", "patch": "@@ -0,0 +1,100 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xf1, 0xf1, 0xf1, 0xf1,\n+\t\t\t\t       0xf1, 0xf1, 0xf1, 0xf1 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xfff2, 0xfff2, 0xfff2, 0xfff2 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffffff1, 0xfffffff1 };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xf7, 0xf7, 0xf7, 0xf7,\n+\t\t\t\t\t0xf7, 0xf7, 0xf7, 0xf7 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xfff3, 0xfff3, 0xfff3, 0xfff3 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xfffffff1, 0xfffffff1 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0xf7, 0xf7, 0xf7, 0xf7,\n+\t\t\t\t\t0xf7, 0xf7, 0xf7, 0xf7 };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0xfff3, 0xfff3, 0xfff3, 0xfff3 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc1700000, 0xc1700000 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0xf2, 0xf2, 0xf2, 0xf2,\n+\t\t\t\t\t0xf2, 0xf2, 0xf2, 0xf2,\n+\t\t\t\t\t0xf2, 0xf2, 0xf2, 0xf2,\n+\t\t\t\t\t0xf2, 0xf2, 0xf2, 0xf2 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0xfff3, 0xfff3, 0xfff3, 0xfff3,\n+\t\t\t\t\t0xfff3, 0xfff3, 0xfff3, 0xfff3 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0xfffffff1, 0xfffffff1,\n+\t\t\t\t\t0xfffffff1, 0xfffffff1 };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0xfffffffffffffff0,\n+\t\t\t\t\t0xfffffffffffffff0 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0xf5, 0xf5, 0xf5, 0xf5,\n+\t\t\t\t\t 0xf5, 0xf5, 0xf5, 0xf5,\n+\t\t\t\t\t 0xf5, 0xf5, 0xf5, 0xf5,\n+\t\t\t\t\t 0xf5, 0xf5, 0xf5, 0xf5 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0xfff1, 0xfff1, 0xfff1, 0xfff1,\n+\t\t\t\t\t 0xfff1, 0xfff1, 0xfff1, 0xfff1 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0xfffffff0, 0xfffffff0,\n+\t\t\t\t\t 0xfffffff0, 0xfffffff0 };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0xfffffffffffffff0,\n+\t\t\t\t\t 0xfffffffffffffff0 };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0xf5, 0xf5, 0xf5, 0xf5,\n+\t\t\t\t\t 0xf5, 0xf5, 0xf5, 0xf5,\n+\t\t\t\t\t 0xf5, 0xf5, 0xf5, 0xf5,\n+\t\t\t\t\t 0xf5, 0xf5, 0xf5, 0xf5 };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0xfff1, 0xfff1, 0xfff1, 0xfff1,\n+\t\t\t\t\t 0xfff1, 0xfff1, 0xfff1, 0xfff1 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0xc1700000, 0xc1700000,\n+\t\t\t\t\t   0xc1700000, 0xc1700000 };\n+\n+#define TEST_MSG \"VDUP_LANE/VDUP_LANEQ\"\n+void exec_vdup_lane (void)\n+{\n+  /* Basic test: vec1=vdup_lane(vec2, lane), then store the result.  */\n+#define TEST_VDUP_LANE(Q, T1, T2, W, N, N2, L)\t\t\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n+    vdup##Q##_lane_##T2##W(VECT_VAR(vector, T1, W, N2), L);\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vector_res, T1, W, N))\n+\n+  /* Input vector can only have 64 bits.  */\n+  DECL_VARIABLE_64BITS_VARIANTS(vector);\n+\n+  DECL_VARIABLE_ALL_VARIANTS(vector_res);\n+\n+  clean_results ();\n+\n+  TEST_MACRO_64BITS_VARIANTS_2_5(VLOAD, vector, buffer);\n+  VLOAD(vector, buffer, , float, f, 32, 2);\n+\n+  /* Choose lane arbitrarily.  */\n+  TEST_VDUP_LANE(, int, s, 8, 8, 8, 1);\n+  TEST_VDUP_LANE(, int, s, 16, 4, 4, 2);\n+  TEST_VDUP_LANE(, int, s, 32, 2, 2, 1);\n+  TEST_VDUP_LANE(, int, s, 64, 1, 1, 0);\n+  TEST_VDUP_LANE(, uint, u, 8, 8, 8, 7);\n+  TEST_VDUP_LANE(, uint, u, 16, 4, 4, 3);\n+  TEST_VDUP_LANE(, uint, u, 32, 2, 2, 1);\n+  TEST_VDUP_LANE(, uint, u, 64, 1, 1, 0);\n+  TEST_VDUP_LANE(, poly, p, 8, 8, 8, 7);\n+  TEST_VDUP_LANE(, poly, p, 16, 4, 4, 3);\n+  TEST_VDUP_LANE(, float, f, 32, 2, 2, 1);\n+\n+  TEST_VDUP_LANE(q, int, s, 8, 16, 8, 2);\n+  TEST_VDUP_LANE(q, int, s, 16, 8, 4, 3);\n+  TEST_VDUP_LANE(q, int, s, 32, 4, 2, 1);\n+  TEST_VDUP_LANE(q, int, s, 64, 2, 1, 0);\n+  TEST_VDUP_LANE(q, uint, u, 8, 16, 8, 5);\n+  TEST_VDUP_LANE(q, uint, u, 16, 8, 4, 1);\n+  TEST_VDUP_LANE(q, uint, u, 32, 4, 2, 0);\n+  TEST_VDUP_LANE(q, uint, u, 64, 2, 1, 0);\n+  TEST_VDUP_LANE(q, poly, p, 8, 16, 8, 5);\n+  TEST_VDUP_LANE(q, poly, p, 16, 8, 4, 1);\n+  TEST_VDUP_LANE(q, float, f, 32, 4, 2, 1);\n+\n+  CHECK_RESULTS (TEST_MSG, \"\");\n+}\n+\n+int main (void)\n+{\n+  exec_vdup_lane ();\n+  return 0;\n+}"}, {"sha": "0b014ebda87e1486ea6005d597f6dc30b5dfc470", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vext.c", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58332aa080cd776cbbf757288b3e6a1d0ce485ad/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvext.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58332aa080cd776cbbf757288b3e6a1d0ce485ad/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvext.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvext.c?ref=58332aa080cd776cbbf757288b3e6a1d0ce485ad", "patch": "@@ -0,0 +1,123 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xf7, 0x11, 0x11, 0x11,\n+\t\t\t\t       0x11, 0x11, 0x11, 0x11 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xfff3, 0x22, 0x22, 0x22 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffffff1, 0x33 };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xf6, 0xf7, 0x55, 0x55,\n+\t\t\t\t\t0x55, 0x55, 0x55, 0x55 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xfff2, 0xfff3, 0x66, 0x66 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xfffffff1, 0x77 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0xf6, 0xf7, 0x55, 0x55,\n+\t\t\t\t\t0x55, 0x55, 0x55, 0x55 };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0xfff2, 0xfff3, 0x66, 0x66 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc1700000, 0x42066666 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0xfe, 0xff, 0x11, 0x11,\n+\t\t\t\t\t0x11, 0x11, 0x11, 0x11,\n+\t\t\t\t\t0x11, 0x11, 0x11, 0x11,\n+\t\t\t\t\t0x11, 0x11, 0x11, 0x11 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0xfff7, 0x22, 0x22, 0x22,\n+\t\t\t\t\t0x22, 0x22, 0x22, 0x22 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0xfffffff3, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0xfffffffffffffff1, 0x44 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0xfc, 0xfd, 0xfe, 0xff,\n+\t\t\t\t\t 0x55, 0x55, 0x55, 0x55,\n+\t\t\t\t\t 0x55, 0x55, 0x55, 0x55,\n+\t\t\t\t\t 0x55, 0x55, 0x55, 0x55 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0xfff6, 0xfff7, 0x66, 0x66,\n+\t\t\t\t\t 0x66, 0x66, 0x66, 0x66 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0xfffffff3, 0x77, 0x77, 0x77 };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0xfffffffffffffff1, 0x88 };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0xfc, 0xfd, 0xfe, 0xff,\n+\t\t\t\t\t 0x55, 0x55, 0x55, 0x55,\n+\t\t\t\t\t 0x55, 0x55, 0x55, 0x55,\n+\t\t\t\t\t 0x55, 0x55, 0x55, 0x55 };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0xfff6, 0xfff7, 0x66, 0x66,\n+\t\t\t\t\t 0x66, 0x66, 0x66, 0x66 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0xc1500000, 0x4204cccd,\n+\t\t\t\t\t   0x4204cccd, 0x4204cccd };\n+\n+#define TEST_MSG \"VEXT/VEXTQ\"\n+void exec_vext (void)\n+{\n+  /* vector_res = vext(vector1,vector2,offset), then store the result.  */\n+#define TEST_VEXT(Q, T1, T2, W, N, V)\t\t\t\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n+    vext##Q##_##T2##W(VECT_VAR(vector1, T1, W, N),\t\t\t\\\n+\t\t      VECT_VAR(vector2, T1, W, N),\t\t\t\\\n+\t\t      V);\t\t\t\t\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vector_res, T1, W, N))\n+\n+  DECL_VARIABLE_ALL_VARIANTS(vector1);\n+  DECL_VARIABLE_ALL_VARIANTS(vector2);\n+  DECL_VARIABLE_ALL_VARIANTS(vector_res);\n+\n+  clean_results ();\n+\n+  TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector1, buffer);\n+  VLOAD(vector1, buffer, , float, f, 32, 2);\n+  VLOAD(vector1, buffer, q, float, f, 32, 4);\n+\n+  /* Choose arbitrary initialization values.  */\n+  VDUP(vector2, , int, s, 8, 8, 0x11);\n+  VDUP(vector2, , int, s, 16, 4, 0x22);\n+  VDUP(vector2, , int, s, 32, 2, 0x33);\n+  VDUP(vector2, , int, s, 64, 1, 0x44);\n+  VDUP(vector2, , uint, u, 8, 8, 0x55);\n+  VDUP(vector2, , uint, u, 16, 4, 0x66);\n+  VDUP(vector2, , uint, u, 32, 2, 0x77);\n+  VDUP(vector2, , uint, u, 64, 1, 0x88);\n+  VDUP(vector2, , poly, p, 8, 8, 0x55);\n+  VDUP(vector2, , poly, p, 16, 4, 0x66);\n+  VDUP(vector2, , float, f, 32, 2, 33.6f);\n+\n+  VDUP(vector2, q, int, s, 8, 16, 0x11);\n+  VDUP(vector2, q, int, s, 16, 8, 0x22);\n+  VDUP(vector2, q, int, s, 32, 4, 0x33);\n+  VDUP(vector2, q, int, s, 64, 2, 0x44);\n+  VDUP(vector2, q, uint, u, 8, 16, 0x55);\n+  VDUP(vector2, q, uint, u, 16, 8, 0x66);\n+  VDUP(vector2, q, uint, u, 32, 4, 0x77);\n+  VDUP(vector2, q, uint, u, 64, 2, 0x88);\n+  VDUP(vector2, q, poly, p, 8, 16, 0x55);\n+  VDUP(vector2, q, poly, p, 16, 8, 0x66);\n+  VDUP(vector2, q, float, f, 32, 4, 33.2f);\n+\n+  /* Choose arbitrary extract offsets.  */\n+  TEST_VEXT(, int, s, 8, 8, 7);\n+  TEST_VEXT(, int, s, 16, 4, 3);\n+  TEST_VEXT(, int, s, 32, 2, 1);\n+  TEST_VEXT(, int, s, 64, 1, 0);\n+  TEST_VEXT(, uint, u, 8, 8, 6);\n+  TEST_VEXT(, uint, u, 16, 4, 2);\n+  TEST_VEXT(, uint, u, 32, 2, 1);\n+  TEST_VEXT(, uint, u, 64, 1, 0);\n+  TEST_VEXT(, poly, p, 8, 8, 6);\n+  TEST_VEXT(, poly, p, 16, 4, 2);\n+  TEST_VEXT(, float, f, 32, 2, 1);\n+\n+  TEST_VEXT(q, int, s, 8, 16, 14);\n+  TEST_VEXT(q, int, s, 16, 8, 7);\n+  TEST_VEXT(q, int, s, 32, 4, 3);\n+  TEST_VEXT(q, int, s, 64, 2, 1);\n+  TEST_VEXT(q, uint, u, 8, 16, 12);\n+  TEST_VEXT(q, uint, u, 16, 8, 6);\n+  TEST_VEXT(q, uint, u, 32, 4, 3);\n+  TEST_VEXT(q, uint, u, 64, 2, 1);\n+  TEST_VEXT(q, poly, p, 8, 16, 12);\n+  TEST_VEXT(q, poly, p, 16, 8, 6);\n+  TEST_VEXT(q, float, f, 32, 4, 3);\n+\n+  CHECK_RESULTS (TEST_MSG, \"\");\n+}\n+\n+int main (void)\n+{\n+  exec_vext ();\n+  return 0;\n+}"}, {"sha": "69ad90b7e2e9acab0cb0723c02d94a108fe7a518", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vget_high.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58332aa080cd776cbbf757288b3e6a1d0ce485ad/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvget_high.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58332aa080cd776cbbf757288b3e6a1d0ce485ad/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvget_high.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvget_high.c?ref=58332aa080cd776cbbf757288b3e6a1d0ce485ad", "patch": "@@ -0,0 +1,86 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xf8, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t       0xfc, 0xfd, 0xfe, 0xff };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffffff2, 0xfffffff3 };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0xfffffffffffffff1 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xf8, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t\t0xfc, 0xfd, 0xfe, 0xff };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xfffffff2, 0xfffffff3 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0xfffffffffffffff1 };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0xf8, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t\t0xfc, 0xfd, 0xfe, 0xff };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc1600000, 0xc1500000 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t   0x33333333, 0x33333333 };\n+\n+#define TEST_MSG \"VGET_HIGH\"\n+void exec_vget_high (void)\n+{\n+  /* Basic test: vec64=vget_high(vec128), then store the result.  */\n+#define TEST_VGET_HIGH(T1, T2, W, N, N2)\t\t\t\t\\\n+  VECT_VAR(vector64, T1, W, N) =\t\t\t\t\t\\\n+    vget_high_##T2##W(VECT_VAR(vector128, T1, W, N2));\t\t\t\\\n+  vst1_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vector64, T1, W, N))\n+\n+  DECL_VARIABLE_64BITS_VARIANTS(vector64);\n+  DECL_VARIABLE_128BITS_VARIANTS(vector128);\n+\n+  TEST_MACRO_128BITS_VARIANTS_2_5(VLOAD, vector128, buffer);\n+  VLOAD(vector128, buffer, q, float, f, 32, 4);\n+\n+  clean_results ();\n+\n+  /* Execute the tests.  */\n+  TEST_VGET_HIGH(int, s, 8, 8, 16);\n+  TEST_VGET_HIGH(int, s, 16, 4, 8);\n+  TEST_VGET_HIGH(int, s, 32, 2, 4);\n+  TEST_VGET_HIGH(int, s, 64, 1, 2);\n+  TEST_VGET_HIGH(uint, u, 8, 8, 16);\n+  TEST_VGET_HIGH(uint, u, 16, 4, 8);\n+  TEST_VGET_HIGH(uint, u, 32, 2, 4);\n+  TEST_VGET_HIGH(uint, u, 64, 1, 2);\n+  TEST_VGET_HIGH(poly, p, 8, 8, 16);\n+  TEST_VGET_HIGH(poly, p, 16, 4, 8);\n+  TEST_VGET_HIGH(float, f, 32, 2, 4);\n+\n+  CHECK_RESULTS (TEST_MSG, \"\");\n+}\n+\n+int main (void)\n+{\n+  exec_vget_high ();\n+  return 0;\n+}"}, {"sha": "db4a0019506107155614ec317b6a9265ef5c6a92", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vget_low.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58332aa080cd776cbbf757288b3e6a1d0ce485ad/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvget_low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58332aa080cd776cbbf757288b3e6a1d0ce485ad/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvget_low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvget_low.c?ref=58332aa080cd776cbbf757288b3e6a1d0ce485ad", "patch": "@@ -0,0 +1,86 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t       0xf4, 0xf5, 0xf6, 0xf7 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffffff0, 0xfffffff1 };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t0xf4, 0xf5, 0xf6, 0xf7 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xfffffff0, 0xfffffff1 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t0xf4, 0xf5, 0xf6, 0xf7 };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc1800000, 0xc1700000 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t   0x33333333, 0x33333333 };\n+\n+#define TEST_MSG \"VGET_LOW\"\n+void exec_vget_low (void)\n+{\n+  /* Basic test: vec64=vget_low(vec128), then store the result.  */\n+#define TEST_VGET_LOW(T1, T2, W, N, N2)\t\t\t\t\t\\\n+  VECT_VAR(vector64, T1, W, N) =\t\t\t\t\t\\\n+    vget_low_##T2##W(VECT_VAR(vector128, T1, W, N2));\t\t\t\\\n+  vst1_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vector64, T1, W, N))\n+\n+  DECL_VARIABLE_64BITS_VARIANTS(vector64);\n+  DECL_VARIABLE_128BITS_VARIANTS(vector128);\n+\n+  TEST_MACRO_128BITS_VARIANTS_2_5(VLOAD, vector128, buffer);\n+  VLOAD(vector128, buffer, q, float, f, 32, 4);\n+\n+  clean_results ();\n+\n+  /* Execute the tests.  */\n+  TEST_VGET_LOW(int, s, 8, 8, 16);\n+  TEST_VGET_LOW(int, s, 16, 4, 8);\n+  TEST_VGET_LOW(int, s, 32, 2, 4);\n+  TEST_VGET_LOW(int, s, 64, 1, 2);\n+  TEST_VGET_LOW(uint, u, 8, 8, 16);\n+  TEST_VGET_LOW(uint, u, 16, 4, 8);\n+  TEST_VGET_LOW(uint, u, 32, 2, 4);\n+  TEST_VGET_LOW(uint, u, 64, 1, 2);\n+  TEST_VGET_LOW(poly, p, 8, 8, 16);\n+  TEST_VGET_LOW(poly, p, 16, 4, 8);\n+  TEST_VGET_LOW(float, f, 32, 2, 4);\n+\n+  CHECK_RESULTS (TEST_MSG, \"\");\n+}\n+\n+int main (void)\n+{\n+  exec_vget_low ();\n+  return 0;\n+}"}]}