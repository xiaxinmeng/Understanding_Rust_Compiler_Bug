{"sha": "ac9e2cff8d126d583fc8273142b2d1602a3f72ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM5ZTJjZmY4ZDEyNmQ1ODNmYzgyNzMxNDJiMmQxNjAyYTNmNzJlZQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@apple.com", "date": "2004-08-18T18:51:37Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-08-18T18:51:37Z"}, "message": "darwin.md: Delete the altivec patterns which are handled differently now.\n\n2004-08-18  Andrew Pinski  <apinski@apple.com>\n\n        * config/rs6000/darwin.md: Delete the altivec patterns which are\n        handled differently now.\n        (load_macho_picbase_di): Make sure that is only happens for TARGET_64BIT\n        (macho_correct_pic_di): Likewise.\n        (call_indirect_nonlocal_darwin64): Likewise.\n        Delete the save world/saveFP/saveVec patterns.\n\n        Revert the reversion of: 2004-08-16  Stan Shebs  <shebs@apple.com>\n        * config/darwin.c (macho_indirect_data_reference): Add DImode case.\n        * config/rs6000/rs6000.md: Include darwin.md.\n        (builtin_setjmp_receiver): Add DImode case.\n        * config/rs6000/rs6000.c (rs6000_emit_move): Add DImode case to\n        Darwin bits.\n\nFrom-SVN: r86204", "tree": {"sha": "9056ed8903083721aa5488b2c0b9f2dcae30fcc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9056ed8903083721aa5488b2c0b9f2dcae30fcc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac9e2cff8d126d583fc8273142b2d1602a3f72ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac9e2cff8d126d583fc8273142b2d1602a3f72ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac9e2cff8d126d583fc8273142b2d1602a3f72ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac9e2cff8d126d583fc8273142b2d1602a3f72ee/comments", "author": null, "committer": null, "parents": [{"sha": "92b9a671bfb851c12aa3bbb112e7f3d4119d93ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92b9a671bfb851c12aa3bbb112e7f3d4119d93ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92b9a671bfb851c12aa3bbb112e7f3d4119d93ed"}], "stats": {"total": 160, "additions": 47, "deletions": 113}, "files": [{"sha": "9a817826c607625702ff32072792003754a50777", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac9e2cff8d126d583fc8273142b2d1602a3f72ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac9e2cff8d126d583fc8273142b2d1602a3f72ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac9e2cff8d126d583fc8273142b2d1602a3f72ee", "patch": "@@ -1,3 +1,19 @@\n+2004-08-18  Andrew Pinski  <apinski@apple.com>\n+\n+\t* config/rs6000/darwin.md: Delete the altivec patterns which are \n+\thandled differently now.\n+\t(load_macho_picbase_di): Make sure that is only happens for TARGET_64BIT\n+\t(macho_correct_pic_di): Likewise.\n+\t(call_indirect_nonlocal_darwin64): Likewise.\n+\tDelete the save world/saveFP/saveVec patterns.\n+\t\n+\tRevert the reversion of: 2004-08-16  Stan Shebs  <shebs@apple.com>\n+        * config/darwin.c (macho_indirect_data_reference): Add DImode case.\n+        * config/rs6000/rs6000.md: Include darwin.md.\n+        (builtin_setjmp_receiver): Add DImode case.\n+        * config/rs6000/rs6000.c (rs6000_emit_move): Add DImode case to\n+        Darwin bits.\n+\n 2004-08-18  Matt Austern  <austern@apple.com>\n \n \tDead code stripping\n@@ -62,8 +78,8 @@\n \n 2004-08-18  Andrew Pinski  <apinski@apple.com>\n \n-\t* config/darwin.c (machopic_legitimize_pic_address): Only set MEM_READONLY_P\n-\tin the non TARGET_TOC case.\n+\t* config/darwin.c (machopic_legitimize_pic_address): Only set \n+\tMEM_READONLY_P in the non TARGET_TOC case.\n \n 2004-08-18  Zack Weinberg  <zack@codesourcery.com>\n "}, {"sha": "7b6a524db8d5175dd98cb52f11c58e655ccb7c85", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac9e2cff8d126d583fc8273142b2d1602a3f72ee/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac9e2cff8d126d583fc8273142b2d1602a3f72ee/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=ac9e2cff8d126d583fc8273142b2d1602a3f72ee", "patch": "@@ -333,8 +333,12 @@ machopic_indirect_data_reference (rtx orig, rtx reg)\n       if (defined && MACHO_DYNAMIC_NO_PIC_P)\n \t{\n #if defined (TARGET_TOC)\n-\t  emit_insn (gen_macho_high (reg, orig));\n-\t  emit_insn (gen_macho_low (reg, reg, orig));\n+ \t  emit_insn (GET_MODE (orig) == DImode\n+\t\t     ? gen_macho_high_di (reg, orig)\n+\t\t     : gen_macho_high (reg, orig));\n+ \t  emit_insn (GET_MODE (orig) == DImode\n+\t\t     ? gen_macho_low_di (reg, reg, orig)\n+\t\t     : gen_macho_low (reg, reg, orig));\n #else\n \t   /* some other cpu -- writeme!  */\n \t   abort ();\n@@ -529,7 +533,9 @@ machopic_legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \t      rtx asym = XEXP (orig, 0);\n \t      rtx mem;\n \n-\t      emit_insn (gen_macho_high (temp_reg, asym));\n+\t      emit_insn (mode == DImode\n+\t\t\t ? gen_macho_high_di (temp_reg, asym)\n+\t\t\t : gen_macho_high (temp_reg, asym));\n \t      mem = gen_rtx_MEM (GET_MODE (orig),\n \t\t\t\t gen_rtx_LO_SUM (Pmode, temp_reg, asym));\n \t      MEM_READONLY_P (mem) = 1;"}, {"sha": "313bda3dd3f7c1d666f3798f7279c05d6bc7e123", "filename": "gcc/config/rs6000/darwin.md", "status": "modified", "additions": 3, "deletions": 104, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac9e2cff8d126d583fc8273142b2d1602a3f72ee/gcc%2Fconfig%2Frs6000%2Fdarwin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac9e2cff8d126d583fc8273142b2d1602a3f72ee/gcc%2Fconfig%2Frs6000%2Fdarwin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.md?ref=ac9e2cff8d126d583fc8273142b2d1602a3f72ee", "patch": "@@ -145,55 +145,10 @@ Boston, MA 02111-1307, USA.  */\n \t(match_dup 2))]\n   \"\")\n \n-(define_insn \"\"\n-  [(set (mem:V4SI (plus:DI (match_operand:DI 0 \"gpc_reg_operand\" \"b,r\")\n-\t\t\t (match_operand:DI 1 \"gpc_reg_operand\" \"r,b\")))\n-\t(match_operand:V4SI 2 \"register_operand\" \"v,v\"))]\n-  \"TARGET_MACHO && TARGET_64BIT\"\n-  \"@\n-   stvx %2,%0,%1\n-   stvx %2,%1,%0\"\n-  [(set_attr \"type\" \"vecstore\")])\n-\n-(define_insn \"\"\n-  [(set (mem:V4SI (match_operand:DI 0 \"gpc_reg_operand\" \"r\"))\n-\t(match_operand:V4SI 1 \"register_operand\" \"v\"))]\n-  \"TARGET_MACHO && TARGET_64BIT\"\n-  \"stvx %1,0,%0\"\n-  [(set_attr \"type\" \"vecstore\")])\n-\n-(define_split\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"\")\n-\t(mem:V4SI (plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t (match_operand:DI 2 \"short_cint_operand\" \"\"))))\n-   (clobber (match_operand:DI 3 \"gpc_reg_operand\" \"\"))]\n-  \"TARGET_MACHO && TARGET_64BIT\"\n-  [(set (match_dup 3) (plus:DI (match_dup 1) (match_dup 2)))\n-   (set (match_dup 0)\n-\t(mem:V4SI (match_dup 3)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v,v\")\n-\t(mem:V4SI (plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"b,r\")\n-\t\t\t (match_operand:DI 2 \"gpc_reg_operand\" \"r,b\"))))]\n-  \"TARGET_MACHO && TARGET_64BIT\"\n-  \"@\n-   lvx %0,%1,%2\n-   lvx %0,%2,%1\"\n-  [(set_attr \"type\" \"vecload\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-        (mem:V4SI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_MACHO && TARGET_64BIT\"\n-  \"lvx %0,0,%1\"\n-  [(set_attr \"type\" \"vecload\")])\n-\n (define_insn \"load_macho_picbase_di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=l\")\n \t(unspec:DI [(match_operand:DI 1 \"immediate_operand\" \"s\")] 15))]\n-  \"(DEFAULT_ABI == ABI_DARWIN) && flag_pic\"\n+  \"(DEFAULT_ABI == ABI_DARWIN) && flag_pic && TARGET_64BIT\"\n   \"bcl 20,31,%1\\\\n%1:\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"4\")])\n@@ -204,7 +159,7 @@ Boston, MA 02111-1307, USA.  */\n \t\t (unspec:DI [(match_operand:DI 2 \"immediate_operand\" \"s\")\n \t\t\t     (match_operand:DI 3 \"immediate_operand\" \"s\")]\n \t\t\t    16)))]\n-  \"DEFAULT_ABI == ABI_DARWIN\"\n+  \"DEFAULT_ABI == ABI_DARWIN && TARGET_64BIT\"\n   \"addis %0,%1,ha16(%2-%3)\\n\\taddi %0,%0,lo16(%2-%3)\"\n   [(set_attr \"length\" \"8\")])\n \n@@ -213,7 +168,7 @@ Boston, MA 02111-1307, USA.  */\n \t (match_operand 1 \"\" \"g,g,g,g\"))\n    (use (match_operand:SI 2 \"immediate_operand\" \"O,O,n,n\"))\n    (clobber (match_scratch:SI 3 \"=l,l,l,l\"))]\n-  \"DEFAULT_ABI == ABI_DARWIN\"\n+  \"DEFAULT_ABI == ABI_DARWIN && TARGET_64BIT\"\n {\n   return \"b%T0l\";\n }\n@@ -338,59 +293,3 @@ Boston, MA 02111-1307, USA.  */\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"4\")])\n \n-(define_insn \"*save_fpregs_with_label_di\"\n- [(match_parallel 0 \"any_operand\"\n-                  [(clobber (match_operand:DI 1 \"register_operand\" \"=l\"))\n-\t\t   (use (match_operand:DI 2 \"call_operand\" \"s\"))\n-\t\t   (use (match_operand:DI 3 \"\" \"\"))\n-\t\t   (set (match_operand:DF 4 \"memory_operand\" \"=m\")\n-\t\t\t(match_operand:DF 5 \"gpc_reg_operand\" \"f\"))])]\n- \"TARGET_64BIT\"\n- \"*\n-#if TARGET_MACHO\n-  const char *picbase = machopic_function_base_name ();\n-  operands[3] = gen_rtx_SYMBOL_REF (Pmode, ggc_alloc_string (picbase, -1));\n-#endif\n-  return \\\"bl %z2\\\\n%3:\\\";\n-\"\n-  [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"4\")])\n-\n-(define_insn \"*save_vregs_di\"\n- [(match_parallel 0 \"any_operand\"\n-                  [(clobber (match_operand:DI 1 \"register_operand\" \"=l\"))\n-\t\t   (use (match_operand:DI 2 \"call_operand\" \"s\"))\n-\t\t   (set (match_operand:V4SI 3 \"any_operand\" \"=m\")\n-\t\t\t(match_operand:V4SI 4 \"register_operand\" \"v\"))])]\n- \"TARGET_64BIT\"\n- \"bl %z2\"\n-  [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"4\")])\n-\n-(define_insn \"*restore_vregs_di\"\n- [(match_parallel 0 \"any_operand\"\n-                  [(clobber (match_operand:DI 1 \"register_operand\" \"=l\"))\n-\t\t   (use (match_operand:DI 2 \"call_operand\" \"s\"))\n-\t\t   (clobber (match_operand:DI 3 \"gpc_reg_operand\" \"=r\"))\n-\t\t   (set (match_operand:V4SI 4 \"register_operand\" \"=v\")\n-\t\t\t(match_operand:V4SI 5 \"any_operand\" \"m\"))])]\n- \"TARGET_64BIT\"\n- \"bl %z2\")\n-\n-(define_insn \"*save_vregs_with_label_di\"\n- [(match_parallel 0 \"any_operand\"\n-                  [(clobber (match_operand:DI 1 \"register_operand\" \"=l\"))\n-\t\t   (use (match_operand:DI 2 \"call_operand\" \"s\"))\n-\t\t   (use (match_operand:DI 3 \"\" \"\"))\n-\t\t   (set (match_operand:V4SI 4 \"any_operand\" \"=m\")\n-\t\t\t(match_operand:V4SI 5 \"register_operand\" \"v\"))])]\n- \"TARGET_64BIT\"\n- \"*\n-#if TARGET_MACHO\n-  const char *picbase = machopic_function_base_name ();\n-  operands[3] = gen_rtx_SYMBOL_REF (Pmode, ggc_alloc_string (picbase, -1));\n-#endif\n-  return \\\"bl %z2\\\\n%3:\\\";\n-\"\n-  [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"4\")])"}, {"sha": "7651d2a05850d2bd5adc3e0d06d886228296c882", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac9e2cff8d126d583fc8273142b2d1602a3f72ee/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac9e2cff8d126d583fc8273142b2d1602a3f72ee/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ac9e2cff8d126d583fc8273142b2d1602a3f72ee", "patch": "@@ -4322,8 +4322,16 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n \t\t  return;\n \t\t}\n #endif\n-\t      emit_insn (gen_macho_high (target, operands[1]));\n-\t      emit_insn (gen_macho_low (operands[0], target, operands[1]));\n+\t      if (mode == DImode)\n+\t\t{\n+\t\t  emit_insn (gen_macho_high_di (target, operands[1]));\n+\t\t  emit_insn (gen_macho_low_di (operands[0], target, operands[1]));\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  emit_insn (gen_macho_high (target, operands[1]));\n+\t\t  emit_insn (gen_macho_low (operands[0], target, operands[1]));\n+\t\t}\n \t      return;\n \t    }\n "}, {"sha": "149adf7e0e7a9466b60fee651bdd171d374404c7", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac9e2cff8d126d583fc8273142b2d1602a3f72ee/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac9e2cff8d126d583fc8273142b2d1602a3f72ee/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=ac9e2cff8d126d583fc8273142b2d1602a3f72ee", "patch": "@@ -101,6 +101,7 @@\n (include \"8540.md\")\n (include \"power4.md\")\n (include \"power5.md\")\n+(include \"darwin.md\")\n \n \f\n ;; Start with fixed-point load and store insns.  Here we put only the more\n@@ -10158,8 +10159,12 @@\n \t\t\t\t  CODE_LABEL_NUMBER (operands[0]));\n       tmplabrtx = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (tmplab));\n \n-      emit_insn (gen_load_macho_picbase (picreg, tmplabrtx));\n-      emit_insn (gen_macho_correct_pic (picreg, picreg, picrtx, tmplabrtx));\n+      emit_insn (TARGET_64BIT\n+\t ? gen_load_macho_picbase_di (picreg, tmplabrtx)\n+\t : gen_load_macho_picbase (picreg, tmplabrtx));\n+      emit_insn (TARGET_64BIT\n+\t ? gen_macho_correct_pic_di (picreg, picreg, picrtx, tmplabrtx)\n+\t : gen_macho_correct_pic (picreg, picreg, picrtx, tmplabrtx));\n     }\n   else\n #endif"}]}