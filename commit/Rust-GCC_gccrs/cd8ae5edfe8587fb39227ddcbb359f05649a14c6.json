{"sha": "cd8ae5edfe8587fb39227ddcbb359f05649a14c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q4YWU1ZWRmZTg1ODdmYjM5MjI3ZGRjYmIzNTlmMDU2NDlhMTRjNg==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@cavium.com", "date": "2017-02-01T18:30:50Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2017-02-01T18:30:50Z"}, "message": "tree-vect-loop.c (vect_compute_single_scalar_iteration_cost): Pass stmt_info to record_stmt_cost.\n\n2017-02-01  Andrew Pinski  <apinski@cavium.com>\n\n        * tree-vect-loop.c (vect_compute_single_scalar_iteration_cost): Pass\n        stmt_info to record_stmt_cost.\n        (vect_get_known_peeling_cost): Pass stmt_info if known to\n        record_stmt_cost.\n        * config/aarch64/aarch64-protos.h (cpu_vector_cost): Split\n        cpu_vector_cost field into\n        scalar_int_stmt_cost and scalar_fp_stmt_cost.  Split vec_stmt_cost\n        field into vec_int_stmt_cost and vec_fp_stmt_cost.\n        * config/aarch64/aarch64.c (generic_vector_cost): Update for the\n        splitting of scalar_stmt_cost and vec_stmt_cost.\n        (thunderx_vector_cost): Likewise.\n        (cortexa57_vector_cost): LIkewise.\n        (exynosm1_vector_cost): Likewise.\n        (xgene1_vector_cost): Likewise.\n        (thunderx2t99_vector_cost): Improve after the splitting of the two\n        fields.\n        (aarch64_builtin_vectorization_cost): Update for the splitting of\n        scalar_stmt_cost and vec_stmt_cost.\n\nFrom-SVN: r245101", "tree": {"sha": "40840e00cf2a95bba9bd9036fcc9e17f824950e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40840e00cf2a95bba9bd9036fcc9e17f824950e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd8ae5edfe8587fb39227ddcbb359f05649a14c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd8ae5edfe8587fb39227ddcbb359f05649a14c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd8ae5edfe8587fb39227ddcbb359f05649a14c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd8ae5edfe8587fb39227ddcbb359f05649a14c6/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "969a32ce9354585f5f2b89df2e025f52eb0e1644", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/969a32ce9354585f5f2b89df2e025f52eb0e1644", "html_url": "https://github.com/Rust-GCC/gccrs/commit/969a32ce9354585f5f2b89df2e025f52eb0e1644"}], "stats": {"total": 130, "additions": 91, "deletions": 39}, "files": [{"sha": "b8a949d09b488ddddbf6b084f6a50bad252731a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd8ae5edfe8587fb39227ddcbb359f05649a14c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd8ae5edfe8587fb39227ddcbb359f05649a14c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd8ae5edfe8587fb39227ddcbb359f05649a14c6", "patch": "@@ -1,3 +1,24 @@\n+2017-02-01  Andrew Pinski  <apinski@cavium.com>\n+\n+\t* tree-vect-loop.c (vect_compute_single_scalar_iteration_cost): Pass\n+\tstmt_info to record_stmt_cost.\n+\t(vect_get_known_peeling_cost): Pass stmt_info if known to\n+\trecord_stmt_cost.\n+\t* config/aarch64/aarch64-protos.h (cpu_vector_cost): Split\n+\tcpu_vector_cost field into\n+\tscalar_int_stmt_cost and scalar_fp_stmt_cost.  Split vec_stmt_cost\n+\tfield into vec_int_stmt_cost and vec_fp_stmt_cost.\n+\t* config/aarch64/aarch64.c (generic_vector_cost): Update for the\n+\tsplitting of scalar_stmt_cost and vec_stmt_cost.\n+\t(thunderx_vector_cost): Likewise.\n+\t(cortexa57_vector_cost): LIkewise.\n+\t(exynosm1_vector_cost): Likewise.\n+\t(xgene1_vector_cost): Likewise.\n+\t(thunderx2t99_vector_cost): Improve after the splitting of the two\n+\tfields.\n+\t(aarch64_builtin_vectorization_cost): Update for the splitting of\n+\tscalar_stmt_cost and vec_stmt_cost.\n+\n 2017-02-01  Torvald Riegel  <triegel@redhat.com>\n             Richard Henderson  <rth@redhat.com>\n "}, {"sha": "9543f8c9f2974ad7f8612aa007f975dd6eeec2bc", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd8ae5edfe8587fb39227ddcbb359f05649a14c6/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd8ae5edfe8587fb39227ddcbb359f05649a14c6/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=cd8ae5edfe8587fb39227ddcbb359f05649a14c6", "patch": "@@ -151,11 +151,17 @@ struct cpu_regmove_cost\n /* Cost for vector insn classes.  */\n struct cpu_vector_cost\n {\n-  const int scalar_stmt_cost;\t\t /* Cost of any scalar operation,\n+  const int scalar_int_stmt_cost;\t /* Cost of any int scalar operation,\n+\t\t\t\t\t    excluding load and store.  */\n+  const int scalar_fp_stmt_cost;\t /* Cost of any fp scalar operation,\n \t\t\t\t\t    excluding load and store.  */\n   const int scalar_load_cost;\t\t /* Cost of scalar load.  */\n   const int scalar_store_cost;\t\t /* Cost of scalar store.  */\n-  const int vec_stmt_cost;\t\t /* Cost of any vector operation,\n+  const int vec_int_stmt_cost;\t\t /* Cost of any int vector operation,\n+\t\t\t\t\t    excluding load, store, permute,\n+\t\t\t\t\t    vector-to-scalar and\n+\t\t\t\t\t    scalar-to-vector operation.  */\n+  const int vec_fp_stmt_cost;\t\t /* Cost of any fp vector operation,\n \t\t\t\t\t    excluding load, store, permute,\n \t\t\t\t\t    vector-to-scalar and\n \t\t\t\t\t    scalar-to-vector operation.  */"}, {"sha": "d4808d6a87882d599ced6e4dafd584193e819139", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 43, "deletions": 26, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd8ae5edfe8587fb39227ddcbb359f05649a14c6/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd8ae5edfe8587fb39227ddcbb359f05649a14c6/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=cd8ae5edfe8587fb39227ddcbb359f05649a14c6", "patch": "@@ -365,10 +365,12 @@ static const struct cpu_regmove_cost thunderx2t99_regmove_cost =\n /* Generic costs for vector insn classes.  */\n static const struct cpu_vector_cost generic_vector_cost =\n {\n-  1, /* scalar_stmt_cost  */\n+  1, /* scalar_int_stmt_cost  */\n+  1, /* scalar_fp_stmt_cost  */\n   1, /* scalar_load_cost  */\n   1, /* scalar_store_cost  */\n-  1, /* vec_stmt_cost  */\n+  1, /* vec_int_stmt_cost  */\n+  1, /* vec_fp_stmt_cost  */\n   2, /* vec_permute_cost  */\n   1, /* vec_to_scalar_cost  */\n   1, /* scalar_to_vec_cost  */\n@@ -383,10 +385,12 @@ static const struct cpu_vector_cost generic_vector_cost =\n /* ThunderX costs for vector insn classes.  */\n static const struct cpu_vector_cost thunderx_vector_cost =\n {\n-  1, /* scalar_stmt_cost  */\n+  1, /* scalar_int_stmt_cost  */\n+  1, /* scalar_fp_stmt_cost  */\n   3, /* scalar_load_cost  */\n   1, /* scalar_store_cost  */\n-  4, /* vec_stmt_cost  */\n+  4, /* vec_int_stmt_cost  */\n+  4, /* vec_fp_stmt_cost  */\n   4, /* vec_permute_cost  */\n   2, /* vec_to_scalar_cost  */\n   2, /* scalar_to_vec_cost  */\n@@ -401,10 +405,12 @@ static const struct cpu_vector_cost thunderx_vector_cost =\n /* Generic costs for vector insn classes.  */\n static const struct cpu_vector_cost cortexa57_vector_cost =\n {\n-  1, /* scalar_stmt_cost  */\n+  1, /* scalar_int_stmt_cost  */\n+  1, /* scalar_fp_stmt_cost  */\n   4, /* scalar_load_cost  */\n   1, /* scalar_store_cost  */\n-  2, /* vec_stmt_cost  */\n+  2, /* vec_int_stmt_cost  */\n+  2, /* vec_fp_stmt_cost  */\n   3, /* vec_permute_cost  */\n   8, /* vec_to_scalar_cost  */\n   8, /* scalar_to_vec_cost  */\n@@ -418,10 +424,12 @@ static const struct cpu_vector_cost cortexa57_vector_cost =\n \n static const struct cpu_vector_cost exynosm1_vector_cost =\n {\n-  1, /* scalar_stmt_cost  */\n+  1, /* scalar_int_stmt_cost  */\n+  1, /* scalar_fp_stmt_cost  */\n   5, /* scalar_load_cost  */\n   1, /* scalar_store_cost  */\n-  3, /* vec_stmt_cost  */\n+  3, /* vec_int_stmt_cost  */\n+  3, /* vec_fp_stmt_cost  */\n   3, /* vec_permute_cost  */\n   3, /* vec_to_scalar_cost  */\n   3, /* scalar_to_vec_cost  */\n@@ -436,10 +444,12 @@ static const struct cpu_vector_cost exynosm1_vector_cost =\n /* Generic costs for vector insn classes.  */\n static const struct cpu_vector_cost xgene1_vector_cost =\n {\n-  1, /* scalar_stmt_cost  */\n+  1, /* scalar_int_stmt_cost  */\n+  1, /* scalar_fp_stmt_cost  */\n   5, /* scalar_load_cost  */\n   1, /* scalar_store_cost  */\n-  2, /* vec_stmt_cost  */\n+  2, /* vec_int_stmt_cost  */\n+  2, /* vec_fp_stmt_cost  */\n   2, /* vec_permute_cost  */\n   4, /* vec_to_scalar_cost  */\n   4, /* scalar_to_vec_cost  */\n@@ -454,10 +464,12 @@ static const struct cpu_vector_cost xgene1_vector_cost =\n /* Costs for vector insn classes for Vulcan.  */\n static const struct cpu_vector_cost thunderx2t99_vector_cost =\n {\n-  6, /* scalar_stmt_cost  */\n+  1, /* scalar_int_stmt_cost  */\n+  6, /* scalar_fp_stmt_cost  */\n   4, /* scalar_load_cost  */\n   1, /* scalar_store_cost  */\n-  6, /* vec_stmt_cost  */\n+  5, /* vec_int_stmt_cost  */\n+  6, /* vec_fp_stmt_cost  */\n   3, /* vec_permute_cost  */\n   6, /* vec_to_scalar_cost  */\n   5, /* scalar_to_vec_cost  */\n@@ -8119,50 +8131,55 @@ aarch64_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n \t\t\t\t    int misalign ATTRIBUTE_UNUSED)\n {\n   unsigned elements;\n+  const cpu_vector_cost *costs = aarch64_tune_params.vec_costs;\n+  bool fp = false;\n+\n+  if (vectype != NULL)\n+    fp = FLOAT_TYPE_P (vectype);\n \n   switch (type_of_cost)\n     {\n       case scalar_stmt:\n-\treturn aarch64_tune_params.vec_costs->scalar_stmt_cost;\n+\treturn fp ? costs->scalar_fp_stmt_cost : costs->scalar_int_stmt_cost;\n \n       case scalar_load:\n-\treturn aarch64_tune_params.vec_costs->scalar_load_cost;\n+\treturn costs->scalar_load_cost;\n \n       case scalar_store:\n-\treturn aarch64_tune_params.vec_costs->scalar_store_cost;\n+\treturn costs->scalar_store_cost;\n \n       case vector_stmt:\n-\treturn aarch64_tune_params.vec_costs->vec_stmt_cost;\n+\treturn fp ? costs->vec_fp_stmt_cost : costs->vec_int_stmt_cost;\n \n       case vector_load:\n-\treturn aarch64_tune_params.vec_costs->vec_align_load_cost;\n+\treturn costs->vec_align_load_cost;\n \n       case vector_store:\n-\treturn aarch64_tune_params.vec_costs->vec_store_cost;\n+\treturn costs->vec_store_cost;\n \n       case vec_to_scalar:\n-\treturn aarch64_tune_params.vec_costs->vec_to_scalar_cost;\n+\treturn costs->vec_to_scalar_cost;\n \n       case scalar_to_vec:\n-\treturn aarch64_tune_params.vec_costs->scalar_to_vec_cost;\n+\treturn costs->scalar_to_vec_cost;\n \n       case unaligned_load:\n-\treturn aarch64_tune_params.vec_costs->vec_unalign_load_cost;\n+\treturn costs->vec_unalign_load_cost;\n \n       case unaligned_store:\n-\treturn aarch64_tune_params.vec_costs->vec_unalign_store_cost;\n+\treturn costs->vec_unalign_store_cost;\n \n       case cond_branch_taken:\n-\treturn aarch64_tune_params.vec_costs->cond_taken_branch_cost;\n+\treturn costs->cond_taken_branch_cost;\n \n       case cond_branch_not_taken:\n-\treturn aarch64_tune_params.vec_costs->cond_not_taken_branch_cost;\n+\treturn costs->cond_not_taken_branch_cost;\n \n       case vec_perm:\n-\treturn aarch64_tune_params.vec_costs->vec_permute_cost;\n+\treturn costs->vec_permute_cost;\n \n       case vec_promote_demote:\n-\treturn aarch64_tune_params.vec_costs->vec_stmt_cost;\n+\treturn fp ? costs->vec_fp_stmt_cost : costs->vec_int_stmt_cost;\n \n       case vec_construct:\n         elements = TYPE_VECTOR_SUBPARTS (vectype);"}, {"sha": "c55be9f7febff0e08de4648b5fb43591ec2f735f", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd8ae5edfe8587fb39227ddcbb359f05649a14c6/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd8ae5edfe8587fb39227ddcbb359f05649a14c6/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=cd8ae5edfe8587fb39227ddcbb359f05649a14c6", "patch": "@@ -1329,9 +1329,9 @@ vect_compute_single_scalar_iteration_cost (loop_vec_info loop_vinfo)\n             continue;\n \n \t  vect_cost_for_stmt kind;\n-          if (STMT_VINFO_DATA_REF (vinfo_for_stmt (stmt)))\n+          if (STMT_VINFO_DATA_REF (stmt_info))\n             {\n-              if (DR_IS_READ (STMT_VINFO_DATA_REF (vinfo_for_stmt (stmt))))\n+              if (DR_IS_READ (STMT_VINFO_DATA_REF (stmt_info)))\n                kind = scalar_load;\n              else\n                kind = scalar_store;\n@@ -1341,7 +1341,7 @@ vect_compute_single_scalar_iteration_cost (loop_vec_info loop_vinfo)\n \n \t  scalar_single_iter_cost\n \t    += record_stmt_cost (&LOOP_VINFO_SCALAR_ITERATION_COST (loop_vinfo),\n-\t\t\t\t factor, kind, NULL, 0, vect_prologue);\n+\t\t\t\t factor, kind, stmt_info, 0, vect_prologue);\n         }\n     }\n   LOOP_VINFO_SINGLE_SCALAR_ITERATION_COST (loop_vinfo)\n@@ -3178,16 +3178,24 @@ vect_get_known_peeling_cost (loop_vec_info loop_vinfo, int peel_iters_prologue,\n   int j;\n   if (peel_iters_prologue)\n     FOR_EACH_VEC_ELT (*scalar_cost_vec, j, si)\n-      retval += record_stmt_cost (prologue_cost_vec,\n-\t\t\t\t  si->count * peel_iters_prologue,\n-\t\t\t\t  si->kind, NULL, si->misalign,\n-\t\t\t\t  vect_prologue);\n+\t{\n+\t  stmt_vec_info stmt_info\n+\t    = si->stmt ? vinfo_for_stmt (si->stmt) : NULL;\n+\t  retval += record_stmt_cost (prologue_cost_vec,\n+\t\t\t\t      si->count * peel_iters_prologue,\n+\t\t\t\t      si->kind, stmt_info, si->misalign,\n+\t\t\t\t      vect_prologue);\n+\t}\n   if (*peel_iters_epilogue)\n     FOR_EACH_VEC_ELT (*scalar_cost_vec, j, si)\n-      retval += record_stmt_cost (epilogue_cost_vec,\n-\t\t\t\t  si->count * *peel_iters_epilogue,\n-\t\t\t\t  si->kind, NULL, si->misalign,\n-\t\t\t\t  vect_epilogue);\n+\t{\n+\t  stmt_vec_info stmt_info\n+\t    = si->stmt ? vinfo_for_stmt (si->stmt) : NULL;\n+\t  retval += record_stmt_cost (epilogue_cost_vec,\n+\t\t\t\t      si->count * *peel_iters_epilogue,\n+\t\t\t\t      si->kind, stmt_info, si->misalign,\n+\t\t\t\t      vect_epilogue);\n+\t}\n \n   return retval;\n }"}]}