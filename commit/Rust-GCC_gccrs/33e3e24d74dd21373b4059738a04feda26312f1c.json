{"sha": "33e3e24d74dd21373b4059738a04feda26312f1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNlM2UyNGQ3NGRkMjEzNzNiNDA1OTczOGEwNGZlZGEyNjMxMmYxYw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-03-12T14:23:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-03-12T14:23:27Z"}, "message": "re PR gcov-profile/49484 (gcov crash if two(or more) forks happen at the same time)\n\n2012-03-12  Richard Guenther  <rguenther@suse.de>\n\n\t* gthr.h (__GTHREAD_MUTEX_INIT_FUNCTION): Adjust specification.\n\t* gthr-posix.h (__GTHREAD_MUTEX_INIT_FUNCTION): Define.\n\t(__gthread_mutex_init_function): New function.\n\t* gthr-single.h (__GTHREAD_MUTEX_INIT_FUNCTION): Define.\n\n\tPR gcov/49484\n\t* libgcov.c: Include gthr.h.\n\t(__gcov_flush_mx): New global variable.\n\t(init_mx, init_mx_once): New functions.\n\t(__gcov_flush): Protect self with a mutex.\n\t(__gcov_fork): Re-initialize mutex after forking.\n\t* unwind-dw2-fde.c: Change condition under which to use\n\t__GTHREAD_MUTEX_INIT_FUNCTION.\n\nFrom-SVN: r185231", "tree": {"sha": "0b5bc7d4e9657ab185aa593ffce407fded974b61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b5bc7d4e9657ab185aa593ffce407fded974b61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33e3e24d74dd21373b4059738a04feda26312f1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33e3e24d74dd21373b4059738a04feda26312f1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33e3e24d74dd21373b4059738a04feda26312f1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33e3e24d74dd21373b4059738a04feda26312f1c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "24219d389088db7eb34f492e89643a5246ec12a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24219d389088db7eb34f492e89643a5246ec12a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24219d389088db7eb34f492e89643a5246ec12a5"}], "stats": {"total": 72, "additions": 63, "deletions": 9}, "files": [{"sha": "a3294848a7612d26d37789b78d58d5f0a1001268", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e3e24d74dd21373b4059738a04feda26312f1c/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e3e24d74dd21373b4059738a04feda26312f1c/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=33e3e24d74dd21373b4059738a04feda26312f1c", "patch": "@@ -1,3 +1,19 @@\n+2012-03-12  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gthr.h (__GTHREAD_MUTEX_INIT_FUNCTION): Adjust specification.\n+\t* gthr-posix.h (__GTHREAD_MUTEX_INIT_FUNCTION): Define.\n+\t(__gthread_mutex_init_function): New function.\n+\t* gthr-single.h (__GTHREAD_MUTEX_INIT_FUNCTION): Define.\n+\n+\tPR gcov/49484\n+\t* libgcov.c: Include gthr.h.\n+\t(__gcov_flush_mx): New global variable.\n+\t(init_mx, init_mx_once): New functions.\n+\t(__gcov_flush): Protect self with a mutex.\n+\t(__gcov_fork): Re-initialize mutex after forking.\n+\t* unwind-dw2-fde.c: Change condition under which to use\n+\t__GTHREAD_MUTEX_INIT_FUNCTION.\n+\n 2012-03-12  Tristan Gingold  <gingold@adacore.com>\n \n \t* config/alpha/t-vms: Define HOST_LIBGCC2_CFLAGS."}, {"sha": "6c9af1a476582898b614c16a9bff1a402cc120b5", "filename": "libgcc/gthr-posix.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e3e24d74dd21373b4059738a04feda26312f1c/libgcc%2Fgthr-posix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e3e24d74dd21373b4059738a04feda26312f1c/libgcc%2Fgthr-posix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fgthr-posix.h?ref=33e3e24d74dd21373b4059738a04feda26312f1c", "patch": "@@ -63,6 +63,7 @@ typedef struct timespec __gthread_time_t;\n #define __GTHREAD_HAS_COND\t1\n \n #define __GTHREAD_MUTEX_INIT PTHREAD_MUTEX_INITIALIZER\n+#define __GTHREAD_MUTEX_INIT_FUNCTION __gthread_mutex_init_function\n #define __GTHREAD_ONCE_INIT PTHREAD_ONCE_INIT\n #if defined(PTHREAD_RECURSIVE_MUTEX_INITIALIZER)\n #define __GTHREAD_RECURSIVE_MUTEX_INIT PTHREAD_RECURSIVE_MUTEX_INITIALIZER\n@@ -753,6 +754,14 @@ __gthread_mutex_init_function (__gthread_mutex_t *__mutex)\n }\n #endif\n \n+static inline int\n+__gthread_mutex_init_function (__gthread_mutex_t *__mutex)\n+{\n+  if (__gthread_active_p ())\n+    return __gthrw_(pthread_mutex_init) (__mutex, NULL);\n+  return 0;\n+}\n+\n static inline int\n __gthread_mutex_destroy (__gthread_mutex_t *__mutex)\n {"}, {"sha": "87b7579e899902dae61356b6c37dc4de45c12227", "filename": "libgcc/gthr-single.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e3e24d74dd21373b4059738a04feda26312f1c/libgcc%2Fgthr-single.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e3e24d74dd21373b4059738a04feda26312f1c/libgcc%2Fgthr-single.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fgthr-single.h?ref=33e3e24d74dd21373b4059738a04feda26312f1c", "patch": "@@ -36,6 +36,7 @@ typedef int __gthread_recursive_mutex_t;\n \n #define __GTHREAD_ONCE_INIT 0\n #define __GTHREAD_MUTEX_INIT 0\n+#define __GTHREAD_MUTEX_INIT_FUNCTION (mx)\n #define __GTHREAD_RECURSIVE_MUTEX_INIT 0\n \n #define UNUSED __attribute__((unused))"}, {"sha": "813abe1e57e39ddda9e1924bfa862a022beac184", "filename": "libgcc/gthr.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e3e24d74dd21373b4059738a04feda26312f1c/libgcc%2Fgthr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e3e24d74dd21373b4059738a04feda26312f1c/libgcc%2Fgthr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fgthr.h?ref=33e3e24d74dd21373b4059738a04feda26312f1c", "patch": "@@ -52,11 +52,12 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n      \t\tto initialize __gthread_mutex_t to get a fast\n \t\tnon-recursive mutex.\n      __GTHREAD_MUTEX_INIT_FUNCTION\n-     \t\tsome systems can't initialize a mutex without a\n-\t\tfunction call.  On such systems, define this to a\n-\t\tfunction which looks like this:\n+\t\tto initialize __gthread_mutex_t to get a fast\n+\t\tnon-recursive mutex.\n+\t\tDefine this to a function which looks like this:\n \t\t  void __GTHREAD_MUTEX_INIT_FUNCTION (__gthread_mutex_t *)\n-\t\tDon't define __GTHREAD_MUTEX_INIT in this case\n+     \t\tSome systems can't initialize a mutex without a\n+\t\tfunction call.  Don't define __GTHREAD_MUTEX_INIT in this case.\n      __GTHREAD_RECURSIVE_MUTEX_INIT\n      __GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION\n      \t\tas above, but for a recursive mutex."}, {"sha": "fd04fb1a436bc0872cf4d8d6a53baebe173c10f6", "filename": "libgcc/libgcov.c", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e3e24d74dd21373b4059738a04feda26312f1c/libgcc%2Flibgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e3e24d74dd21373b4059738a04feda26312f1c/libgcc%2Flibgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov.c?ref=33e3e24d74dd21373b4059738a04feda26312f1c", "patch": "@@ -30,6 +30,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"libgcc_tm.h\"\n+#include \"gthr.h\"\n \n #if defined(inhibit_libc)\n #define IN_LIBGCOV (-1)\n@@ -705,6 +706,25 @@ __gcov_init (struct gcov_info *info)\n   info->version = 0;\n }\n \n+#ifdef __GTHREAD_MUTEX_INIT\n+ATTRIBUTE_HIDDEN __gthread_mutex_t __gcov_flush_mx = __GTHREAD_MUTEX_INIT;\n+#define init_mx_once()\n+#else\n+__gthread_mutex_t __gcov_flush_mx ATTRIBUTE_HIDDEN;\n+\n+static void\n+init_mx (void)\n+{\n+  __GTHREAD_MUTEX_INIT_FUNCTION (&mx);\n+}\n+static void\n+init_mx_once (void)\n+{\n+  static __gthread_once_t once = __GTHREAD_ONCE_INIT;\n+  __gthread_once (&once, init_mx);\n+}\n+#endif\n+\n /* Called before fork or exec - write out profile information gathered so\n    far and reset it to zero.  This avoids duplication or loss of the\n    profile information gathered so far.  */\n@@ -714,6 +734,9 @@ __gcov_flush (void)\n {\n   const struct gcov_info *gi_ptr;\n \n+  init_mx_once ();\n+  __gthread_mutex_lock (&__gcov_flush_mx);\n+\n   gcov_exit ();\n   for (gi_ptr = gcov_list; gi_ptr; gi_ptr = gi_ptr->next)\n     {\n@@ -737,6 +760,8 @@ __gcov_flush (void)\n \t    }\n \t}\n     }\n+\n+  __gthread_mutex_unlock (&__gcov_flush_mx);\n }\n \n #endif /* L_gcov */\n@@ -975,8 +1000,13 @@ __gcov_ior_profiler (gcov_type *counters, gcov_type value)\n pid_t\n __gcov_fork (void)\n {\n+  pid_t pid;\n+  extern __gthread_mutex_t __gcov_flush_mx;\n   __gcov_flush ();\n-  return fork ();\n+  pid = fork ();\n+  if (pid == 0)\n+    __GTHREAD_MUTEX_INIT_FUNCTION (&__gcov_flush_mx);\n+  return pid;\n }\n #endif\n "}, {"sha": "54eaebac27e42c57febc0926c73600cbeed79dda", "filename": "libgcc/unwind-dw2-fde.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e3e24d74dd21373b4059738a04feda26312f1c/libgcc%2Funwind-dw2-fde.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e3e24d74dd21373b4059738a04feda26312f1c/libgcc%2Funwind-dw2-fde.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2-fde.c?ref=33e3e24d74dd21373b4059738a04feda26312f1c", "patch": "@@ -47,11 +47,10 @@ static struct object *seen_objects;\n \n #ifdef __GTHREAD_MUTEX_INIT\n static __gthread_mutex_t object_mutex = __GTHREAD_MUTEX_INIT;\n+#define init_object_mutex_once()\n #else\n static __gthread_mutex_t object_mutex;\n-#endif\n \n-#ifdef __GTHREAD_MUTEX_INIT_FUNCTION\n static void\n init_object_mutex (void)\n {\n@@ -64,8 +63,6 @@ init_object_mutex_once (void)\n   static __gthread_once_t once = __GTHREAD_ONCE_INIT;\n   __gthread_once (&once, init_object_mutex);\n }\n-#else\n-#define init_object_mutex_once()\n #endif\n \n /* Called from crtbegin.o to register the unwind info for an object.  */"}]}