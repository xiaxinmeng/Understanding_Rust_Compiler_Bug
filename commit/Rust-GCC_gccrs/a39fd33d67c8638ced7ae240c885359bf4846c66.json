{"sha": "a39fd33d67c8638ced7ae240c885359bf4846c66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM5ZmQzM2Q2N2M4NjM4Y2VkN2FlMjQwYzg4NTM1OWJmNDg0NmM2Ng==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-09-13T21:34:24Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-09-13T21:34:24Z"}, "message": "Always dereference nil receiver passed to value method.\n\nFrom-SVN: r178835", "tree": {"sha": "64917c17764bc4193561971a4eba391a735da089", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64917c17764bc4193561971a4eba391a735da089"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a39fd33d67c8638ced7ae240c885359bf4846c66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a39fd33d67c8638ced7ae240c885359bf4846c66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a39fd33d67c8638ced7ae240c885359bf4846c66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a39fd33d67c8638ced7ae240c885359bf4846c66/comments", "author": null, "committer": null, "parents": [{"sha": "43052d458619645b576eff628bedcd02cdad2a2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43052d458619645b576eff628bedcd02cdad2a2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43052d458619645b576eff628bedcd02cdad2a2e"}], "stats": {"total": 24, "additions": 3, "deletions": 21}, "files": [{"sha": "ed211e97677b651ef6717567a58a50bc709fdf6b", "filename": "gcc/go/gofrontend/gogo-tree.cc", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a39fd33d67c8638ced7ae240c885359bf4846c66/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a39fd33d67c8638ced7ae240c885359bf4846c66/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc?ref=a39fd33d67c8638ced7ae240c885359bf4846c66", "patch": "@@ -1281,16 +1281,7 @@ Function::make_receiver_parm_decl(Gogo* gogo, Named_object* no, tree var_decl)\n   DECL_ARG_TYPE(parm_decl) = TREE_TYPE(parm_decl);\n \n   go_assert(DECL_INITIAL(var_decl) == NULL_TREE);\n-  // The receiver might be passed as a null pointer.\n-  tree check = fold_build2_loc(loc, NE_EXPR, boolean_type_node, parm_decl,\n-\t\t\t       fold_convert_loc(loc, TREE_TYPE(parm_decl),\n-\t\t\t\t\t\tnull_pointer_node));\n-  tree ind = build_fold_indirect_ref_loc(loc, parm_decl);\n-  TREE_THIS_NOTRAP(ind) = 1;\n-  Btype* btype = no->var_value()->type()->get_backend(gogo);\n-  tree zero_init = expr_to_tree(gogo->backend()->zero_expression(btype));\n-  tree init = fold_build3_loc(loc, COND_EXPR, TREE_TYPE(ind),\n-\t\t\t      check, ind, zero_init);\n+  tree init = build_fold_indirect_ref_loc(loc, parm_decl);\n \n   if (is_in_heap)\n     {\n@@ -1301,18 +1292,9 @@ Function::make_receiver_parm_decl(Gogo* gogo, Named_object* no, tree var_decl)\n       space = fold_convert(build_pointer_type(val_type), space);\n       tree spaceref = build_fold_indirect_ref_loc(no->location(), space);\n       TREE_THIS_NOTRAP(spaceref) = 1;\n-      tree check = fold_build2_loc(loc, NE_EXPR, boolean_type_node,\n-\t\t\t\t   parm_decl,\n-\t\t\t\t   fold_convert_loc(loc, TREE_TYPE(parm_decl),\n-\t\t\t\t\t\t    null_pointer_node));\n-      tree parmref = build_fold_indirect_ref_loc(no->location(), parm_decl);\n-      TREE_THIS_NOTRAP(parmref) = 1;\n       tree set = fold_build2_loc(loc, MODIFY_EXPR, void_type_node,\n-\t\t\t\t spaceref, parmref);\n-      init = fold_build2_loc(loc, COMPOUND_EXPR, TREE_TYPE(space),\n-\t\t\t     build3(COND_EXPR, void_type_node,\n-\t\t\t\t    check, set, NULL_TREE),\n-\t\t\t     space);\n+\t\t\t\t spaceref, init);\n+      init = fold_build2_loc(loc, COMPOUND_EXPR, TREE_TYPE(space), set, space);\n     }\n \n   DECL_INITIAL(var_decl) = init;"}]}