{"sha": "5baeaac0676b282f9ac9815f245e60e1d2f9b31f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJhZWFhYzA2NzZiMjgyZjlhYzk4MTVmMjQ1ZTYwZTFkMmY5YjMxZg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-03-28T00:31:41Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-03-28T00:31:41Z"}, "message": "c-tree.h (C_DECL_REGISTER): New.\n\n\t* c-tree.h (C_DECL_REGISTER): New.\n\t* c-aux-info.c (gen_decl), c-decl.c (objc_mark_locals_volatile,\n\tfinish_decl, grokdeclarator, get_parm_info), c-typeck.c\n\t(build_array_ref, c_mark_addressable): Set and use it.\n\t* c-decl.c (grokdeclarator), c-typeck.c (c_mark_addressable):\n\tAllow structures with volatile fields to be declared register.\n\tDon't check TREE_ADDRESSABLE before warning about taking address\n\tof register.\n\t* c-decl.c (finish_decl): Don't allow structures with volatile\n\tfields to be placed in named register.\n\t* doc/trouble.texi: Remove reference to structures with volatile\n\tfields in registers.\n\ntestsuite:\n\t* gcc.dg/940409-1.c: Remove XFAIL.\n\t* gcc.dg/reg-vol-struct-1.c: New test.\n\nFrom-SVN: r80037", "tree": {"sha": "3acc8edeeba4106c03dff66761ed088a39992358", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3acc8edeeba4106c03dff66761ed088a39992358"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5baeaac0676b282f9ac9815f245e60e1d2f9b31f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5baeaac0676b282f9ac9815f245e60e1d2f9b31f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5baeaac0676b282f9ac9815f245e60e1d2f9b31f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5baeaac0676b282f9ac9815f245e60e1d2f9b31f/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c24abdce41dacb7cceffefa2bc2fd5edea24c43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c24abdce41dacb7cceffefa2bc2fd5edea24c43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c24abdce41dacb7cceffefa2bc2fd5edea24c43"}], "stats": {"total": 114, "additions": 78, "deletions": 36}, "files": [{"sha": "7a874bdc8d005e4df85f92b757cc7e5215884b79", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5baeaac0676b282f9ac9815f245e60e1d2f9b31f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5baeaac0676b282f9ac9815f245e60e1d2f9b31f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5baeaac0676b282f9ac9815f245e60e1d2f9b31f", "patch": "@@ -1,3 +1,18 @@\n+2004-03-28  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* c-tree.h (C_DECL_REGISTER): New.\n+\t* c-aux-info.c (gen_decl), c-decl.c (objc_mark_locals_volatile,\n+\tfinish_decl, grokdeclarator, get_parm_info), c-typeck.c\n+\t(build_array_ref, c_mark_addressable): Set and use it.\n+\t* c-decl.c (grokdeclarator), c-typeck.c (c_mark_addressable):\n+\tAllow structures with volatile fields to be declared register.\n+\tDon't check TREE_ADDRESSABLE before warning about taking address\n+\tof register.\n+\t* c-decl.c (finish_decl): Don't allow structures with volatile\n+\tfields to be placed in named register.\n+\t* doc/trouble.texi: Remove reference to structures with volatile\n+\tfields in registers.\n+\n 2004-03-27  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* function.c (thread_prologue_and_epilogue): Move"}, {"sha": "2ef7324dd1423a90a0ddf7bacdcb37bc02db40bb", "filename": "gcc/c-aux-info.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5baeaac0676b282f9ac9815f245e60e1d2f9b31f/gcc%2Fc-aux-info.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5baeaac0676b282f9ac9815f245e60e1d2f9b31f/gcc%2Fc-aux-info.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-aux-info.c?ref=5baeaac0676b282f9ac9815f245e60e1d2f9b31f", "patch": "@@ -2,7 +2,7 @@\n    on information stored in GCC's tree structure.  This code implements the\n    -aux-info option.\n    Copyright (C) 1989, 1991, 1994, 1995, 1997, 1998,\n-   1999, 2000, 2003 Free Software Foundation, Inc.\n+   1999, 2000, 2003, 2004 Free Software Foundation, Inc.\n    Contributed by Ron Guilmette (rfg@segfault.us.com).\n \n This file is part of GCC.\n@@ -531,7 +531,7 @@ gen_decl (tree decl, int is_func_definition, formals_style style)\n \n   ret_val = affix_data_type (ret_val);\n \n-  if (TREE_CODE (decl) != FUNCTION_DECL && DECL_REGISTER (decl))\n+  if (TREE_CODE (decl) != FUNCTION_DECL && C_DECL_REGISTER (decl))\n     ret_val = concat (\"register \", ret_val, NULL);\n   if (TREE_PUBLIC (decl))\n     ret_val = concat (\"extern \", ret_val, NULL);"}, {"sha": "b2a0bf5c87c3b7254915fed5e457d79154ef0eb5", "filename": "gcc/c-decl.c", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5baeaac0676b282f9ac9815f245e60e1d2f9b31f/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5baeaac0676b282f9ac9815f245e60e1d2f9b31f/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=5baeaac0676b282f9ac9815f245e60e1d2f9b31f", "patch": "@@ -488,6 +488,7 @@ objc_mark_locals_volatile (void *enclosing_blk)\n \t  if (TREE_CODE (b->decl) == VAR_DECL\n \t      || TREE_CODE (b->decl) == PARM_DECL)\n \t    {\n+\t      C_DECL_REGISTER (b->decl) = 0;\n \t      DECL_REGISTER (b->decl) = 0;\n \t      TREE_THIS_VOLATILE (b->decl) = 1;\n \t    }\n@@ -2901,16 +2902,23 @@ finish_decl (tree decl, tree init, tree asmspec_tree)\n \t      /* In conjunction with an ASMSPEC, the `register'\n \t\t keyword indicates that we should place the variable\n \t\t in a particular register.  */\n-\t      if (DECL_REGISTER (decl))\n-\t\tDECL_C_HARD_REGISTER (decl) = 1;\n+\t      if (C_DECL_REGISTER (decl))\n+\t\t{\n+\t\t  DECL_C_HARD_REGISTER (decl) = 1;\n+\t\t  /* This cannot be done for a structure with volatile\n+\t\t     fields, on which DECL_REGISTER will have been\n+\t\t     reset.  */\n+\t\t  if (!DECL_REGISTER (decl))\n+\t\t    error (\"cannot put object with volatile field into register\");\n+\t\t}\n \n \t      /* If this is not a static variable, issue a warning.\n \t\t It doesn't make any sense to give an ASMSPEC for an\n \t\t ordinary, non-register local variable.  Historically,\n \t\t GCC has accepted -- but ignored -- the ASMSPEC in\n \t\t this case.  */\n \t      if (TREE_CODE (decl) == VAR_DECL\n-\t\t  && !DECL_REGISTER (decl)\n+\t\t  && !C_DECL_REGISTER (decl)\n \t\t  && !TREE_STATIC (decl))\n \t\twarning (\"%Jignoring asm-specifier for non-static local \"\n                          \"variable '%D'\", decl, decl);\n@@ -4527,7 +4535,10 @@ grokdeclarator (tree declarator, tree declspecs,\n        and in case doing stupid register allocation.  */\n \n     if (specbits & (1 << (int) RID_REGISTER))\n-      DECL_REGISTER (decl) = 1;\n+      {\n+\tC_DECL_REGISTER (decl) = 1;\n+\tDECL_REGISTER (decl) = 1;\n+      }\n \n     /* Record constancy and volatility.  */\n     c_apply_type_quals_to_decl (type_quals, decl);\n@@ -4536,7 +4547,16 @@ grokdeclarator (tree declarator, tree declspecs,\n        Otherwise, the fact that those components are volatile\n        will be ignored, and would even crash the compiler.  */\n     if (C_TYPE_FIELDS_VOLATILE (TREE_TYPE (decl)))\n-      c_mark_addressable (decl);\n+      {\n+\t/* It is not an error for a structure with volatile fields to\n+\t   be declared register, but reset DECL_REGISTER since it\n+\t   cannot actually go in a register.  */\n+\tint was_reg = C_DECL_REGISTER (decl);\n+\tC_DECL_REGISTER (decl) = 0;\n+\tDECL_REGISTER (decl) = 0;\n+\tc_mark_addressable (decl);\n+\tC_DECL_REGISTER (decl) = was_reg;\n+      }\n \n #ifdef ENABLE_CHECKING\n   /* This is the earliest point at which we might know the assembler\n@@ -4684,7 +4704,7 @@ get_parm_info (bool ellipsis)\n     {\n       if (TREE_THIS_VOLATILE (b->decl)\n \t  || TREE_READONLY (b->decl)\n-\t  || DECL_REGISTER (b->decl))\n+\t  || C_DECL_REGISTER (b->decl))\n \terror (\"'void' as only parameter may not be qualified\");\n \n       /* There cannot be an ellipsis.  */"}, {"sha": "eb167ca050ea9070c17004d7c82b67b54cc96bb4", "filename": "gcc/c-tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5baeaac0676b282f9ac9815f245e60e1d2f9b31f/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5baeaac0676b282f9ac9815f245e60e1d2f9b31f/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=5baeaac0676b282f9ac9815f245e60e1d2f9b31f", "patch": "@@ -115,6 +115,11 @@ struct lang_type GTY(())\n    been declared.  */\n #define C_DECL_DECLARED_BUILTIN(EXP) DECL_LANG_FLAG_4 (EXP)\n \n+/* Record whether a decl was declared register.  This is strictly a\n+   front-end flag, whereas DECL_REGISTER is used for code generation;\n+   they may differ for structures with volatile fields.  */\n+#define C_DECL_REGISTER(EXP) DECL_LANG_FLAG_5 (EXP)\n+\n /* Nonzero for a decl which either doesn't exist or isn't a prototype.\n    N.B. Could be simplified if all built-in decls had complete prototypes\n    (but this is presently difficult because some of them need FILE*).  */"}, {"sha": "64b568cc2185e6de42c0d0a7d23311b5ef391380", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5baeaac0676b282f9ac9815f245e60e1d2f9b31f/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5baeaac0676b282f9ac9815f245e60e1d2f9b31f/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=5baeaac0676b282f9ac9815f245e60e1d2f9b31f", "patch": "@@ -1525,7 +1525,7 @@ build_array_ref (tree array, tree index)\n \t  tree foo = array;\n \t  while (TREE_CODE (foo) == COMPONENT_REF)\n \t    foo = TREE_OPERAND (foo, 0);\n-\t  if (TREE_CODE (foo) == VAR_DECL && DECL_REGISTER (foo))\n+\t  if (TREE_CODE (foo) == VAR_DECL && C_DECL_REGISTER (foo))\n \t    pedwarn (\"ISO C forbids subscripting `register' array\");\n \t  else if (! flag_isoc99 && ! lvalue_p (foo))\n \t    pedwarn (\"ISO C90 forbids subscripting non-lvalue array\");\n@@ -2495,7 +2495,7 @@ build_unary_op (enum tree_code code, tree xarg, int flag)\n \n /* Return nonzero if REF is an lvalue valid for this language.\n    Lvalues can be assigned, unless their type has TYPE_READONLY.\n-   Lvalues can have their address taken, unless they have DECL_REGISTER.  */\n+   Lvalues can have their address taken, unless they have C_DECL_REGISTER.  */\n \n int\n lvalue_p (tree ref)\n@@ -2604,7 +2604,7 @@ c_mark_addressable (tree exp)\n       case CONST_DECL:\n       case PARM_DECL:\n       case RESULT_DECL:\n-\tif (DECL_REGISTER (x) && !TREE_ADDRESSABLE (x)\n+\tif (C_DECL_REGISTER (x)\n \t    && DECL_NONLOCAL (x))\n \t  {\n \t    if (TREE_PUBLIC (x) || TREE_STATIC (x) || DECL_EXTERNAL (x))\n@@ -2616,7 +2616,7 @@ c_mark_addressable (tree exp)\n \t    pedwarn (\"register variable `%s' used in nested function\",\n \t\t     IDENTIFIER_POINTER (DECL_NAME (x)));\n \t  }\n-\telse if (DECL_REGISTER (x) && !TREE_ADDRESSABLE (x))\n+\telse if (C_DECL_REGISTER (x))\n \t  {\n \t    if (TREE_PUBLIC (x) || TREE_STATIC (x) || DECL_EXTERNAL (x))\n \t      {\n@@ -2625,17 +2625,6 @@ c_mark_addressable (tree exp)\n \t\treturn false;\n \t      }\n \n-\t    /* If we are making this addressable due to its having\n-\t       volatile components, give a different error message.  Also\n-\t       handle the case of an unnamed parameter by not trying\n-\t       to give the name.  */\n-\n-\t    else if (C_TYPE_FIELDS_VOLATILE (TREE_TYPE (x)))\n-\t      {\n-\t\terror (\"cannot put object with volatile field into register\");\n-\t\treturn false;\n-\t      }\n-\n \t    pedwarn (\"address of register variable `%s' requested\",\n \t\t     IDENTIFIER_POINTER (DECL_NAME (x)));\n \t  }"}, {"sha": "b2112d36732bda59d57d23837a6426695bb6a1b9", "filename": "gcc/doc/trouble.texi", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5baeaac0676b282f9ac9815f245e60e1d2f9b31f/gcc%2Fdoc%2Ftrouble.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5baeaac0676b282f9ac9815f245e60e1d2f9b31f/gcc%2Fdoc%2Ftrouble.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftrouble.texi?ref=5baeaac0676b282f9ac9815f245e60e1d2f9b31f", "patch": "@@ -1413,14 +1413,6 @@ definitions) that the increments will be evaluated in any particular\n order.  Either increment might happen first.  @code{func} might get the\n arguments @samp{2, 3}, or it might get @samp{3, 2}, or even @samp{2, 2}.\n \n-@item\n-Not allowing structures with volatile fields in registers.\n-\n-Strictly speaking, there is no prohibition in the ISO C standard\n-against allowing structures with volatile fields in registers, but\n-it does not seem to make any sense and is probably not what you wanted\n-to do.  So the compiler will give an error message in this case.\n-\n @item\n Making certain warnings into errors by default.\n "}, {"sha": "0b19b8c6049686d8d14f5d6393e0e9b9bf59fafd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5baeaac0676b282f9ac9815f245e60e1d2f9b31f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5baeaac0676b282f9ac9815f245e60e1d2f9b31f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5baeaac0676b282f9ac9815f245e60e1d2f9b31f", "patch": "@@ -1,3 +1,8 @@\n+2004-03-28  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* gcc.dg/940409-1.c: Remove XFAIL.\n+\t* gcc.dg/reg-vol-struct-1.c: New test.\n+\n 2004-03-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/torture/builtin-wctype-1.c: New test."}, {"sha": "2d20b891f3f36be6d7c0932efc1197828dc0ce06", "filename": "gcc/testsuite/gcc.dg/940409-1.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5baeaac0676b282f9ac9815f245e60e1d2f9b31f/gcc%2Ftestsuite%2Fgcc.dg%2F940409-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5baeaac0676b282f9ac9815f245e60e1d2f9b31f/gcc%2Ftestsuite%2Fgcc.dg%2F940409-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F940409-1.c?ref=5baeaac0676b282f9ac9815f245e60e1d2f9b31f", "patch": "@@ -1,8 +1,6 @@\n-/* GCC should allow struct S to be in a register, but it doesn't.  This is\n-   an obscure corner case, hasn't worked since 1994, and we don't expect it\n-   to work anytime soon, hence XFAIL.  */\n+/* GCC should allow struct S to be in a register.  */\n /* { dg-do compile } */\n \n struct S { volatile int field; };\n-int f (register struct S arg);  /* { dg-bogus \"volatile field\" \"with arg\" { xfail *-*-* } } */\n-int g (register struct S);\t/* { dg-bogus \"volatile field\" \"no arg\" { xfail *-*-* } } */\n+int f (register struct S arg);  /* { dg-bogus \"volatile field\" \"with arg\" } */\n+int g (register struct S);\t/* { dg-bogus \"volatile field\" \"no arg\" } */"}, {"sha": "7751bb4a117113de15ee77d93f1b25e9b022c734", "filename": "gcc/testsuite/gcc.dg/reg-vol-struct-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5baeaac0676b282f9ac9815f245e60e1d2f9b31f/gcc%2Ftestsuite%2Fgcc.dg%2Freg-vol-struct-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5baeaac0676b282f9ac9815f245e60e1d2f9b31f/gcc%2Ftestsuite%2Fgcc.dg%2Freg-vol-struct-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Freg-vol-struct-1.c?ref=5baeaac0676b282f9ac9815f245e60e1d2f9b31f", "patch": "@@ -0,0 +1,18 @@\n+/* Test cases of structures with volatile fields declared register:\n+   should be allowed unless register name given but explicitly taking\n+   the address forbidden.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+\n+/* { dg-do compile } */\n+\n+struct S { volatile int field; };\n+\n+void\n+f (void)\n+{\n+  register struct S a;\n+  register struct S b[2];\n+  register struct S c __asm__(\"nosuchreg\"); /* { dg-error \"object with volatile field\" \"explicit reg name\" } */\n+  &a; /* { dg-warning \"address of register\" \"explicit address\" } */\n+  b; /* { dg-warning \"address of register\" \"implicit address\" } */\n+}"}]}