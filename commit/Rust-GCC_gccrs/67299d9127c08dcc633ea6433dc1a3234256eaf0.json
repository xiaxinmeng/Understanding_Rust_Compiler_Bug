{"sha": "67299d9127c08dcc633ea6433dc1a3234256eaf0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjcyOTlkOTEyN2MwOGRjYzYzM2VhNjQzM2RjMWEzMjM0MjU2ZWFmMA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-11-04T08:57:55Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-11-04T08:57:55Z"}, "message": "bitmap.h (bitmap_a_or_b, [...]): Remove.\n\n\t* bitmap.h (bitmap_a_or_b, bitmap_a_and_b): Remove.\n\t* df.c (dataflow_set_a_op_b): Use bitmap_and, bitmap_ior,\n\tbitmap_and_into, bitmap_ior_into as appropriate.\n\t* except.c (remove_eh_handler):\tLikewise.\n\t* global.c (modify_bb_reg_pav, make_accurate_live_analysis): Likewise.\n\t* tree-dfa.c (mark_new_vars_to_rename): Likewise.\n\t* tree-ssa-alias.c (merge_pointed_to_info): Likewise.\n\t* tree-ssa-live.h (live_merge_and_clear): Likewise.\n\t* tree-ssa-loop-ivopts.c (find_best_candidate, try_add_cand_for):\n\tLikewise.\n\nFrom-SVN: r90054", "tree": {"sha": "381c370b2e2063e2c34f68b24e68b22e0c832bd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/381c370b2e2063e2c34f68b24e68b22e0c832bd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67299d9127c08dcc633ea6433dc1a3234256eaf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67299d9127c08dcc633ea6433dc1a3234256eaf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67299d9127c08dcc633ea6433dc1a3234256eaf0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67299d9127c08dcc633ea6433dc1a3234256eaf0/comments", "author": null, "committer": null, "parents": [{"sha": "3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b"}], "stats": {"total": 49, "additions": 27, "deletions": 22}, "files": [{"sha": "82a7d19cd06550744945c2545a309a683e21eba9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67299d9127c08dcc633ea6433dc1a3234256eaf0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67299d9127c08dcc633ea6433dc1a3234256eaf0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67299d9127c08dcc633ea6433dc1a3234256eaf0", "patch": "@@ -1,5 +1,16 @@\n 2004-11-04  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\t* bitmap.h (bitmap_a_or_b, bitmap_a_and_b): Remove.\n+\t* df.c (dataflow_set_a_op_b): Use bitmap_and, bitmap_ior,\n+\tbitmap_and_into, bitmap_ior_into as appropriate.\n+\t* except.c (remove_eh_handler):\tLikewise.\n+\t* global.c (modify_bb_reg_pav, make_accurate_live_analysis): Likewise.\n+\t* tree-dfa.c (mark_new_vars_to_rename): Likewise.\n+\t* tree-ssa-alias.c (merge_pointed_to_info): Likewise.\n+\t* tree-ssa-live.h (live_merge_and_clear): Likewise.\n+\t* tree-ssa-loop-ivopts.c (find_best_candidate, try_add_cand_for):\n+\tLikewise.\n+\n \t* bitmap.c (bitmap_print): Make bitno unsigned.\n \t* bt-load.c (clear_btr_from_live_range,\n \tbtr_def_live_range): Likewise."}, {"sha": "9f89da8b39cbdf0caed910049746ea24e611c8ad", "filename": "gcc/bitmap.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67299d9127c08dcc633ea6433dc1a3234256eaf0/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67299d9127c08dcc633ea6433dc1a3234256eaf0/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=67299d9127c08dcc633ea6433dc1a3234256eaf0", "patch": "@@ -141,8 +141,6 @@ extern void bitmap_release_memory (void);\n /* A few compatibility/functions macros for compatibility with sbitmaps */\n #define dump_bitmap(file, bitmap) bitmap_print (file, bitmap, \"\", \"\\n\")\n #define bitmap_zero(a) bitmap_clear (a)\n-#define bitmap_a_or_b(a,b,c) bitmap_operation (a, b, c, BITMAP_IOR)\n-#define bitmap_a_and_b(a,b,c) bitmap_operation (a, b, c, BITMAP_AND)\n extern int bitmap_first_set_bit (bitmap);\n extern int bitmap_last_set_bit (bitmap);\n "}, {"sha": "dd3ab26319a4ae9def89a53b7ac2f3a2cf7da9e2", "filename": "gcc/df.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67299d9127c08dcc633ea6433dc1a3234256eaf0/gcc%2Fdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67299d9127c08dcc633ea6433dc1a3234256eaf0/gcc%2Fdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.c?ref=67299d9127c08dcc633ea6433dc1a3234256eaf0", "patch": "@@ -3750,11 +3750,11 @@ dataflow_set_a_op_b (enum set_representation repr,\n       switch (op)\n \t{\n \tcase DF_UNION:\n-\t  bitmap_a_or_b (rslt, op1, op2);\n+\t  bitmap_ior (rslt, op1, op2);\n \t  break;\n \n \tcase DF_INTERSECTION:\n-\t  bitmap_a_and_b (rslt, op1, op2);\n+\t  bitmap_and (rslt, op1, op2);\n \t  break;\n \n     \tdefault:"}, {"sha": "c67a98205a251a12d33a89005393ecd04ea5c2c3", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67299d9127c08dcc633ea6433dc1a3234256eaf0/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67299d9127c08dcc633ea6433dc1a3234256eaf0/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=67299d9127c08dcc633ea6433dc1a3234256eaf0", "patch": "@@ -2293,7 +2293,7 @@ remove_eh_handler (struct eh_region *region)\n       if (!outer->aka)\n         outer->aka = BITMAP_GGC_ALLOC ();\n       if (region->aka)\n-\tbitmap_a_or_b (outer->aka, outer->aka, region->aka);\n+\tbitmap_ior_into (outer->aka, region->aka);\n       bitmap_set_bit (outer->aka, region->region_number);\n     }\n "}, {"sha": "0cda11f83b53963201c5d90a466bfe422633a43d", "filename": "gcc/global.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67299d9127c08dcc633ea6433dc1a3234256eaf0/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67299d9127c08dcc633ea6433dc1a3234256eaf0/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=67299d9127c08dcc633ea6433dc1a3234256eaf0", "patch": "@@ -2306,7 +2306,7 @@ modify_bb_reg_pav (basic_block bb, basic_block pred, bool changed_p)\n   bb_pavin = bb_info->pavin;\n   bb_pavout = bb_info->pavout;\n   if (pred->index != ENTRY_BLOCK)\n-    bitmap_a_or_b (bb_pavin, bb_pavin, BB_INFO (pred)->pavout);\n+    bitmap_ior_into (bb_pavin, BB_INFO (pred)->pavout);\n   changed_p |= bitmap_ior_and_compl (bb_pavout, bb_info->avloc,\n \t\t\t\t     bb_pavin, bb_info->killed);\n   return changed_p;\n@@ -2405,14 +2405,14 @@ modify_reg_pav (void)\n \t insn if the pseudo-register is used first time in given BB\n \t and not lived at the BB start.  To prevent this we don't\n \t change life information for such pseudo-registers.  */\n-      bitmap_a_or_b (bb_info->pavin, bb_info->pavin, bb_info->earlyclobber);\n+      bitmap_ior_into (bb_info->pavin, bb_info->earlyclobber);\n #ifdef STACK_REGS\n       /* We can not use the same stack register for uninitialized\n \t pseudo-register and another living pseudo-register because if the\n \t uninitialized pseudo-register dies, subsequent pass reg-stack\n \t will be confused (it will believe that the other register\n \t dies).  */\n-      bitmap_a_or_b (bb_info->pavin, bb_info->pavin, stack_regs);\n+      bitmap_ior_into (bb_info->pavin, stack_regs);\n #endif\n     }\n #ifdef STACK_REGS\n@@ -2444,10 +2444,8 @@ make_accurate_live_analysis (void)\n     {\n       bb_info = BB_INFO (bb);\n       \n-      bitmap_a_and_b (bb->global_live_at_start, bb->global_live_at_start,\n-\t\t      bb_info->pavin);\n-      bitmap_a_and_b (bb->global_live_at_end, bb->global_live_at_end,\n-\t\t      bb_info->pavout);\n+      bitmap_and_into (bb->global_live_at_start, bb_info->pavin);\n+      bitmap_and_into (bb->global_live_at_end, bb_info->pavout);\n     }\n   free_bb_info ();\n }"}, {"sha": "90ff710a44b84daf8fdaae0c9e5f7f215ff0bc61", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67299d9127c08dcc633ea6433dc1a3234256eaf0/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67299d9127c08dcc633ea6433dc1a3234256eaf0/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=67299d9127c08dcc633ea6433dc1a3234256eaf0", "patch": "@@ -1004,7 +1004,7 @@ mark_new_vars_to_rename (tree stmt, bitmap vars_to_rename)\n   if (found_exposed_symbol\n       || v_may_defs_before > v_may_defs_after\n       || v_must_defs_before > v_must_defs_after)\n-    bitmap_a_or_b (vars_to_rename, vars_to_rename, vars_in_vops_to_rename);\n+    bitmap_ior_into (vars_to_rename, vars_in_vops_to_rename);\n \n   BITMAP_XFREE (vars_in_vops_to_rename);\n }"}, {"sha": "976f2d1b0fc92d1e4d9290fa9c1140c833c55208", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67299d9127c08dcc633ea6433dc1a3234256eaf0/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67299d9127c08dcc633ea6433dc1a3234256eaf0/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=67299d9127c08dcc633ea6433dc1a3234256eaf0", "patch": "@@ -1740,9 +1740,7 @@ merge_pointed_to_info (struct alias_info *ai, tree dest, tree orig)\n \t      bitmap_copy (dest_pi->pt_vars, orig_pi->pt_vars);\n \t    }\n \t  else\n-\t    bitmap_a_or_b (dest_pi->pt_vars,\n-\t\t           dest_pi->pt_vars,\n-\t\t           orig_pi->pt_vars);\n+\t    bitmap_ior_into (dest_pi->pt_vars, orig_pi->pt_vars);\n \t}\n     }\n   else"}, {"sha": "ee6ee4c4b76f6269e5e186becf237083e8d675d3", "filename": "gcc/tree-ssa-live.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67299d9127c08dcc633ea6433dc1a3234256eaf0/gcc%2Ftree-ssa-live.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67299d9127c08dcc633ea6433dc1a3234256eaf0/gcc%2Ftree-ssa-live.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.h?ref=67299d9127c08dcc633ea6433dc1a3234256eaf0", "patch": "@@ -309,7 +309,7 @@ live_var_map (tree_live_info_p live)\n static inline void \n live_merge_and_clear (tree_live_info_p live, int p1, int p2)\n {\n-  bitmap_a_or_b (live->livein[p1], live->livein[p1], live->livein[p2]);\n+  bitmap_ior_into (live->livein[p1], live->livein[p2]);\n   bitmap_zero (live->livein[p2]);\n }\n "}, {"sha": "ce1eccccfa3f1dc6915f41958916334d51aeb781", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67299d9127c08dcc633ea6433dc1a3234256eaf0/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67299d9127c08dcc633ea6433dc1a3234256eaf0/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=67299d9127c08dcc633ea6433dc1a3234256eaf0", "patch": "@@ -3473,8 +3473,8 @@ find_best_candidate (struct ivopts_data *data,\n     {\n       asol = BITMAP_XMALLOC ();\n \n-      bitmap_a_or_b (asol, data->important_candidates, use->related_cands);\n-      bitmap_a_and_b (asol, asol, sol);\n+      bitmap_ior (asol, data->important_candidates, use->related_cands);\n+      bitmap_and_into (asol, sol);\n     }\n \n   EXECUTE_IF_SET_IN_BITMAP (asol, 0, c, bi)\n@@ -3500,7 +3500,7 @@ find_best_candidate (struct ivopts_data *data,\n \t      goto next_cand;\n \t    }\n \t  if (used_inv)\n-\t    bitmap_a_or_b (used_inv, used_inv, depends_on);\n+\t    bitmap_ior_into (used_inv, depends_on);\n \t}\n \n       cnd = acnd;\n@@ -3623,7 +3623,7 @@ try_add_cand_for (struct ivopts_data *data, bitmap ivs, bitmap inv,\n       bitmap_copy (act_ivs, ivs);\n       bitmap_set_bit (act_ivs, cand->id);\n       if (depends_on)\n-\tbitmap_a_or_b (act_inv, inv, depends_on);\n+\tbitmap_ior (act_inv, inv, depends_on);\n       else\n \tbitmap_copy (act_inv, inv);\n       act_cost = set_cost_up_to (data, act_ivs, act_inv, use->id + 1);\n@@ -3651,7 +3651,7 @@ try_add_cand_for (struct ivopts_data *data, bitmap ivs, bitmap inv,\n \t  bitmap_copy (act_ivs, ivs);\n \t  bitmap_set_bit (act_ivs, cp->cand->id);\n \t  if (cp->depends_on)\n-\t    bitmap_a_or_b (act_inv, inv, cp->depends_on);\n+\t    bitmap_ior (act_inv, inv, cp->depends_on);\n \t  else\n \t    bitmap_copy (act_inv, inv);\n \t  act_cost = set_cost_up_to (data, act_ivs, act_inv, use->id + 1);"}]}