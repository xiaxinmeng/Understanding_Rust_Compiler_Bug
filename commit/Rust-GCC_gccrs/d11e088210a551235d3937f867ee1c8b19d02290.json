{"sha": "d11e088210a551235d3937f867ee1c8b19d02290", "node_id": "C_kwDOANBUbNoAKGQxMWUwODgyMTBhNTUxMjM1ZDM5MzdmODY3ZWUxYzhiMTlkMDIyOTA", "commit": {"author": {"name": "Costas Argyris", "email": "costas.argyris@gmail.com", "date": "2023-02-28T17:10:18Z"}, "committer": {"name": "Jonathan Yong", "email": "10walls@gmail.com", "date": "2023-03-09T15:00:33Z"}, "message": "Enable UTF-8 code page on Windows 64-bit host [PR108865]\n\nCompile a resource object that contains the utf8 manifest.\n\nThen link that object into the driver and compiler proper.\n\nFor compiler proper the link has to be forced because the\nresource object file gets into a static library (libbackend.a)\nand gets eventually dropped because it has no symbols of\nits own and nothing is referencing it inside the library.\n\nTherefore, an artificial symbol is planted to force the link.\n\ngcc/ChangeLog:\n\n\tPR driver/108865\n\t* config.host: add object for x86_64-*-mingw*.\n\t* config/i386/sym-mingw32.cc: dummy file to attach\n\tsymbol.\n\t* config/i386/utf8-mingw32.rc: windres resource file.\n\t* config/i386/winnt-utf8.manifest: XML manifest to\n\tenable UTF-8.\n\t* config/i386/x-mingw32: reference to x-mingw32-utf8.\n\t* config/i386/x-mingw32-utf8: Makefile fragment to\n\tembed UTF-8 manifest.\n\nSigned-off-by: Jonathan Yong <10walls@gmail.com>", "tree": {"sha": "b584729165b32ba4c2ecedc006446fa42c29048c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b584729165b32ba4c2ecedc006446fa42c29048c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d11e088210a551235d3937f867ee1c8b19d02290", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d11e088210a551235d3937f867ee1c8b19d02290", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d11e088210a551235d3937f867ee1c8b19d02290", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d11e088210a551235d3937f867ee1c8b19d02290/comments", "author": null, "committer": {"login": "jon-y", "id": 4688224, "node_id": "MDQ6VXNlcjQ2ODgyMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4688224?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jon-y", "html_url": "https://github.com/jon-y", "followers_url": "https://api.github.com/users/jon-y/followers", "following_url": "https://api.github.com/users/jon-y/following{/other_user}", "gists_url": "https://api.github.com/users/jon-y/gists{/gist_id}", "starred_url": "https://api.github.com/users/jon-y/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jon-y/subscriptions", "organizations_url": "https://api.github.com/users/jon-y/orgs", "repos_url": "https://api.github.com/users/jon-y/repos", "events_url": "https://api.github.com/users/jon-y/events{/privacy}", "received_events_url": "https://api.github.com/users/jon-y/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6457974a1f443ab58d2334c02260299616c78b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6457974a1f443ab58d2334c02260299616c78b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6457974a1f443ab58d2334c02260299616c78b8"}], "stats": {"total": 76, "additions": 72, "deletions": 4}, "files": [{"sha": "4abb32ad73d3af2f332e0adc115c8d439a264ebb", "filename": "gcc/config.host", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d11e088210a551235d3937f867ee1c8b19d02290/gcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d11e088210a551235d3937f867ee1c8b19d02290/gcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.host?ref=d11e088210a551235d3937f867ee1c8b19d02290", "patch": "@@ -241,10 +241,11 @@ case ${host} in\n   x86_64-*-mingw*)\n     use_long_long_for_widest_fast_int=yes\n     host_xm_file=i386/xm-mingw32.h\n-    host_xmake_file=\"${host_xmake_file} i386/x-mingw32\"\n+    host_xmake_file=\"${host_xmake_file} i386/x-mingw32 i386/x-mingw32-utf8\"\n     host_exeext=.exe\n     out_host_hook_obj=host-mingw32.o\n-    host_extra_gcc_objs=\"${host_extra_gcc_objs} driver-mingw32.o\"\n+    host_extra_objs=\"${host_extra_objs} utf8-mingw32.o\"\n+    host_extra_gcc_objs=\"${host_extra_gcc_objs} driver-mingw32.o utf8rc-mingw32.o\"\n     host_lto_plugin_soname=liblto_plugin.dll\n     ;;\n   aarch64*-*-darwin*)"}, {"sha": "f369698abc4155b10999900dd5186649c3a87ca0", "filename": "gcc/config/i386/sym-mingw32.cc", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d11e088210a551235d3937f867ee1c8b19d02290/gcc%2Fconfig%2Fi386%2Fsym-mingw32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d11e088210a551235d3937f867ee1c8b19d02290/gcc%2Fconfig%2Fi386%2Fsym-mingw32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsym-mingw32.cc?ref=d11e088210a551235d3937f867ee1c8b19d02290", "patch": "@@ -0,0 +1 @@\n+char HOST_EXTRA_OBJS_SYMBOL;"}, {"sha": "e2174e85b7c1f908d2cc4b02a7e84eb7bafbdf72", "filename": "gcc/config/i386/utf8-mingw32.rc", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d11e088210a551235d3937f867ee1c8b19d02290/gcc%2Fconfig%2Fi386%2Futf8-mingw32.rc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d11e088210a551235d3937f867ee1c8b19d02290/gcc%2Fconfig%2Fi386%2Futf8-mingw32.rc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Futf8-mingw32.rc?ref=d11e088210a551235d3937f867ee1c8b19d02290", "patch": "@@ -0,0 +1,3 @@\n+#include <winuser.h>\n+\n+CREATEPROCESS_MANIFEST_RESOURCE_ID RT_MANIFEST \"winnt-utf8.manifest\""}, {"sha": "dab929e1515a2bdf20e2e89afe9cc3985ca95da2", "filename": "gcc/config/i386/winnt-utf8.manifest", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d11e088210a551235d3937f867ee1c8b19d02290/gcc%2Fconfig%2Fi386%2Fwinnt-utf8.manifest", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d11e088210a551235d3937f867ee1c8b19d02290/gcc%2Fconfig%2Fi386%2Fwinnt-utf8.manifest", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt-utf8.manifest?ref=d11e088210a551235d3937f867ee1c8b19d02290", "patch": "@@ -0,0 +1,8 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n+<assembly manifestVersion=\"1.0\" xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n+  <application>\n+    <windowsSettings>\n+      <activeCodePage xmlns=\"http://schemas.microsoft.com/SMI/2019/WindowsSettings\">UTF-8</activeCodePage>\n+    </windowsSettings>\n+  </application>\n+</assembly>"}, {"sha": "cb3d84348816252dfd845ffcbf447180aae0f3ba", "filename": "gcc/config/i386/x-mingw32", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d11e088210a551235d3937f867ee1c8b19d02290/gcc%2Fconfig%2Fi386%2Fx-mingw32", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d11e088210a551235d3937f867ee1c8b19d02290/gcc%2Fconfig%2Fi386%2Fx-mingw32", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx-mingw32?ref=d11e088210a551235d3937f867ee1c8b19d02290", "patch": "@@ -27,8 +27,7 @@ WERROR_FLAGS += -Wno-format\n \n host-mingw32.o : $(srcdir)/config/i386/host-mingw32.cc $(CONFIG_H) $(SYSTEM_H) \\\n   coretypes.h hosthooks.h hosthooks-def.h toplev.h $(DIAGNOSTIC_H) $(HOOKS_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/i386/host-mingw32.cc\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n \n driver-mingw32.o : $(srcdir)/config/i386/driver-mingw32.cc $(CONFIG_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}, {"sha": "6161dc2354718379d91c1df4dc9024dfefa65485", "filename": "gcc/config/i386/x-mingw32-utf8", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d11e088210a551235d3937f867ee1c8b19d02290/gcc%2Fconfig%2Fi386%2Fx-mingw32-utf8", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d11e088210a551235d3937f867ee1c8b19d02290/gcc%2Fconfig%2Fi386%2Fx-mingw32-utf8", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx-mingw32-utf8?ref=d11e088210a551235d3937f867ee1c8b19d02290", "patch": "@@ -0,0 +1,56 @@\n+# Copyright (C) 2023 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+#\n+#\n+# For 64-bit Windows host, embed a manifest that sets the active\n+# code page of the driver and compiler proper processes to utf8.\n+# This only has an effect on Windows version 1903 (May 2019 Update)\n+# or later.\n+\n+# The resource .rc file references the utf8 .manifest file.\n+# Compile it into an object file using windres.\n+# The resulting .o file gets added to host_extra_gcc_objs in\n+# config.host for x86_64-*-mingw* host and gets linked into\n+# the driver as a .o file, so it's lack of symbols is OK.\n+utf8rc-mingw32.o : $(srcdir)/config/i386/utf8-mingw32.rc\n+\t$(WINDRES) $< $@\n+\n+# Create an object file that just exports the global symbol\n+# HOST_EXTRA_OBJS_SYMBOL\n+sym-mingw32.o : $(srcdir)/config/i386/sym-mingw32.cc\n+\t$(COMPILER) -c $< $@\n+\n+# Combine the two object files into one which has both the\n+# compiled utf8 resource and the HOST_EXTRA_OBJS_SYMBOL symbol.\n+# The resulting .o file gets added to host_extra_objs in\n+# config.host for x86_64-*-mingw* host and gets archived into\n+# libbackend.a which gets linked into the compiler proper.\n+# If nothing references it into libbackend.a, it will not\n+# get linked into the compiler proper eventually.\n+# Therefore we need to request the symbol at compiler link time.\n+utf8-mingw32.o : utf8rc-mingw32.o sym-mingw32.o\n+\t$(COMPILER) -r utf8rc-mingw32.o sym-mingw32.o -o $@\n+\n+# Force compilers to link against the utf8 resource by\n+# requiring the symbol to be defined.\n+# Otherwise the object file won't get linked in the compilers\n+# because nothing is referencing it in libbackend.a\n+# This is expected because the resource object is not supposed\n+# to have any symbols, it just has to be linked into the\n+# executable in order for Windows to use the utf8 code page.\n+$(COMPILERS) : override LDFLAGS += -Wl,--require-defined=HOST_EXTRA_OBJS_SYMBOL"}]}