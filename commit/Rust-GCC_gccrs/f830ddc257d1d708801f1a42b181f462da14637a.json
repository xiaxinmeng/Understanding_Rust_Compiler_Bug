{"sha": "f830ddc257d1d708801f1a42b181f462da14637a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgzMGRkYzI1N2QxZDcwODgwMWYxYTQyYjE4MWY0NjJkYTE0NjM3YQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2014-02-11T01:12:38Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2014-02-11T01:12:38Z"}, "message": "re PR target/59927 (ICE sorry, unimplemented: ms_abi attribute requires -maccumulate-outgoing-args or subtarget optimization implying it)\n\nPR target/59927\n\n        * calls.c (expand_call): Don't double-push for reg_parm_stack_space.\n        * config/i386/i386.c (init_cumulative_args): Remove sorry for 64-bit\n        ms-abi vs -mno-accumulate-outgoing-args.\n        (ix86_expand_prologue): Unconditionally call ix86_eax_live_at_start_p.\n        * config/i386/i386.h (ACCUMULATE_OUTGOING_ARGS): Fix comment with\n        respect to ms-abi.\n\nFrom-SVN: r207677", "tree": {"sha": "2578973d4cdade0f80d29d8d2dd1672a865ddc1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2578973d4cdade0f80d29d8d2dd1672a865ddc1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f830ddc257d1d708801f1a42b181f462da14637a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f830ddc257d1d708801f1a42b181f462da14637a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f830ddc257d1d708801f1a42b181f462da14637a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f830ddc257d1d708801f1a42b181f462da14637a/comments", "author": null, "committer": null, "parents": [{"sha": "636109955cf4bee3387565546a365976e7b49f09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/636109955cf4bee3387565546a365976e7b49f09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/636109955cf4bee3387565546a365976e7b49f09"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "45224820220f47ccd62bc1459b0da8df589d08e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f830ddc257d1d708801f1a42b181f462da14637a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f830ddc257d1d708801f1a42b181f462da14637a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f830ddc257d1d708801f1a42b181f462da14637a", "patch": "@@ -1,3 +1,13 @@\n+2014-02-10  Richard Henderson <rth@redhat.com>\n+\n+\tPR target/59927\n+\t* calls.c (expand_call): Don't double-push for reg_parm_stack_space.\n+\t* config/i386/i386.c (init_cumulative_args): Remove sorry for 64-bit\n+\tms-abi vs -mno-accumulate-outgoing-args.\n+\t(ix86_expand_prologue): Unconditionally call ix86_eax_live_at_start_p.\n+\t* config/i386/i386.h (ACCUMULATE_OUTGOING_ARGS): Fix comment with\n+\trespect to ms-abi.\n+\n 2014-02-10  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR middle-end/60080"}, {"sha": "f392319cfddf9ce0a2f4828017c2839ad65872d1", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f830ddc257d1d708801f1a42b181f462da14637a/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f830ddc257d1d708801f1a42b181f462da14637a/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=f830ddc257d1d708801f1a42b181f462da14637a", "patch": "@@ -2955,6 +2955,7 @@ expand_call (tree exp, rtx target, int ignore)\n       /* If we push args individually in reverse order, perform stack alignment\n \t before the first push (the last arg).  */\n       if (PUSH_ARGS_REVERSED && argblock == 0\n+          && adjusted_args_size.constant > reg_parm_stack_space\n \t  && adjusted_args_size.constant != unadjusted_args_size)\n \t{\n \t  /* When the stack adjustment is pending, we get better code"}, {"sha": "0a15e442bef1ee715367e2260f42b34aa4c55add", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f830ddc257d1d708801f1a42b181f462da14637a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f830ddc257d1d708801f1a42b181f462da14637a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f830ddc257d1d708801f1a42b181f462da14637a", "patch": "@@ -6110,10 +6110,6 @@ init_cumulative_args (CUMULATIVE_ARGS *cum,  /* Argument info to initialize */\n   cum->caller = caller;\n \n   /* Set up the number of registers to use for passing arguments.  */\n-\n-  if (TARGET_64BIT && cum->call_abi == MS_ABI && !ACCUMULATE_OUTGOING_ARGS)\n-    sorry (\"ms_abi attribute requires -maccumulate-outgoing-args \"\n-\t   \"or subtarget optimization implying it\");\n   cum->nregs = ix86_regparm;\n   if (TARGET_64BIT)\n     {\n@@ -11032,15 +11028,14 @@ ix86_expand_prologue (void)\n \n       if (TARGET_64BIT)\n         r10_live = (DECL_STATIC_CHAIN (current_function_decl) != 0);\n-      if (!TARGET_64BIT_MS_ABI)\n-        eax_live = ix86_eax_live_at_start_p ();\n \n-      /* Note that SEH directives need to continue tracking the stack\n-\t pointer even after the frame pointer has been set up.  */\n+      eax_live = ix86_eax_live_at_start_p ();\n       if (eax_live)\n \t{\n \t  insn = emit_insn (gen_push (eax));\n \t  allocate -= UNITS_PER_WORD;\n+\t  /* Note that SEH directives need to continue tracking the stack\n+\t     pointer even after the frame pointer has been set up.  */\n \t  if (sp_is_cfa_reg || TARGET_SEH)\n \t    {\n \t      if (sp_is_cfa_reg)"}, {"sha": "b605ae22aba556d7bfdfb310d713a9c2abcba20c", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f830ddc257d1d708801f1a42b181f462da14637a/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f830ddc257d1d708801f1a42b181f462da14637a/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=f830ddc257d1d708801f1a42b181f462da14637a", "patch": "@@ -1537,12 +1537,12 @@ enum reg_class\n    mode the difference is less drastic but visible.  \n \n    FIXME: Unlike earlier implementations, the size of unwind info seems to\n-   actually grouw with accumulation.  Is that because accumulated args\n+   actually grow with accumulation.  Is that because accumulated args\n    unwind info became unnecesarily bloated?\n-   \n-   64-bit MS ABI seem to require 16 byte alignment everywhere except for\n-   function prologue and epilogue.  This is not possible without\n-   ACCUMULATE_OUTGOING_ARGS.  \n+\n+   With the 64-bit MS ABI, we can generate correct code with or without\n+   accumulated args, but because of OUTGOING_REG_PARM_STACK_SPACE the code\n+   generated without accumulated args is terrible.\n \n    If stack probes are required, the space used for large function\n    arguments on the stack must also be probed, so enable"}]}