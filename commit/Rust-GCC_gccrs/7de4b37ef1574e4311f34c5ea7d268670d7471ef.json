{"sha": "7de4b37ef1574e4311f34c5ea7d268670d7471ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RlNGIzN2VmMTU3NGU0MzExZjM0YzVlYTdkMjY4NjcwZDc0NzFlZg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2008-05-24T20:52:00Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2008-05-24T20:52:00Z"}, "message": "inclhack.def (solaris_math_4): Use GCC's __builtin_fpclassify.\n\n\t* inclhack.def (solaris_math_4): Use GCC's __builtin_fpclassify.\n\t* tests/base/iso/math_c99.h: Update.\n\t* fixincl.x: Regenerate.\n\nFrom-SVN: r135852", "tree": {"sha": "51eb02b5ead105592be1a27adb6046ca20e87c0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51eb02b5ead105592be1a27adb6046ca20e87c0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7de4b37ef1574e4311f34c5ea7d268670d7471ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7de4b37ef1574e4311f34c5ea7d268670d7471ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7de4b37ef1574e4311f34c5ea7d268670d7471ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7de4b37ef1574e4311f34c5ea7d268670d7471ef/comments", "author": null, "committer": null, "parents": [{"sha": "c36c98215e53eb99725fa5bb187aa7b3ac4c22f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c36c98215e53eb99725fa5bb187aa7b3ac4c22f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c36c98215e53eb99725fa5bb187aa7b3ac4c22f7"}], "stats": {"total": 64, "additions": 24, "deletions": 40}, "files": [{"sha": "6f45df3854edab2c926c43fefc647bd98f6efe94", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7de4b37ef1574e4311f34c5ea7d268670d7471ef/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7de4b37ef1574e4311f34c5ea7d268670d7471ef/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=7de4b37ef1574e4311f34c5ea7d268670d7471ef", "patch": "@@ -1,3 +1,9 @@\n+2008-05-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* inclhack.def (solaris_math_4): Use GCC's __builtin_fpclassify.\n+\t* tests/base/iso/math_c99.h: Update.\n+\t* fixincl.x: Regenerate.\n+\n 2008-05-14  Joseph Myers  <joseph@codesourcery.com>\n \n \t* inclhack.def (AAB_fd_zero_asm_posix_types_h): Bypass on"}, {"sha": "f9786e047b64f5984c75690df6f594b32a1bc66a", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7de4b37ef1574e4311f34c5ea7d268670d7471ef/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7de4b37ef1574e4311f34c5ea7d268670d7471ef/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=7de4b37ef1574e4311f34c5ea7d268670d7471ef", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Wednesday May 14, 2008 at 03:12:47 PM UTC\n+ * It has been AutoGen-ed  Friday May 23, 2008 at 06:50:18 PM CEST\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Wed May 14 15:12:47 UTC 2008\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Fri May 23 18:50:18 CEST 2008\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -22,18 +22,23 @@\n  *  inclhack copyright (c) 1998, 1999, 2000, 2001\n  *  The Free Software Foundation, Inc.\n  *\n-  *  inclhack is free software: you can redistribute it and/or modify it\n- *  under the terms of the GNU General Public License as published by the\n- *  Free Software Foundation, either version 3 of the License, or\n- *  (at your option) any later version.\n+  *  inclhack is free software.\n  *  \n- *  inclhack is distributed in the hope that it will be useful, but\n- *  WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *  You may redistribute it and/or modify it under the terms of the\n+ *  GNU General Public License, as published by the Free Software\n+ *  Foundation; either version 2 of the License, or (at your option)\n+ *  any later version.\n+ *  \n+ *  inclhack is distributed in the hope that it will be useful,\n+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n  *  See the GNU General Public License for more details.\n  *  \n- *  You should have received a copy of the GNU General Public License along\n- *  with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *  You should have received a copy of the GNU General Public License\n+ *  along with inclhack.  If not, write to:\n+ *  \tThe Free Software Foundation, Inc.,\n+ *  \t51 Franklin Street, Fifth Floor\n+ *  \tBoston, MA  02110-1301, USA.\n  */\n \n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n@@ -5842,16 +5847,7 @@ static tTestDesc aSolaris_Math_4Tests[] = {\n static const char* apzSolaris_Math_4Patch[] = {\n     \"format\",\n     \"#define\\tfpclassify(x) \\\\\\n\\\n-  __extension__ ({ const __typeof(x) __x_fp = (x); \\\\\\n\\\n-\\t\\t   isnan(__x_fp) \\\\\\n\\\n-\\t\\t     ? FP_NAN \\\\\\n\\\n-\\t\\t     : isinf(__x_fp) \\\\\\n\\\n-\\t\\t       ? FP_INFINITE \\\\\\n\\\n-\\t\\t       : isnormal(__x_fp) \\\\\\n\\\n-\\t\\t\\t ? FP_NORMAL \\\\\\n\\\n-\\t\\t\\t : __x_fp == 0.0 \\\\\\n\\\n-\\t\\t\\t   ? FP_ZERO \\\\\\n\\\n-\\t\\t\\t   : FP_SUBNORMAL; })\",\n+  __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL, FP_SUBNORMAL, FP_ZERO, (x))\",\n     \"^#define[ \\t]+fpclassify\\\\(x\\\\)[ \\t]+__builtin_fpclassify\\\\(x\\\\)\",\n     (char*)NULL };\n "}, {"sha": "6c21cb1775b6d70aa53f197da19f1504911814d1", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7de4b37ef1574e4311f34c5ea7d268670d7471ef/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7de4b37ef1574e4311f34c5ea7d268670d7471ef/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=7de4b37ef1574e4311f34c5ea7d268670d7471ef", "patch": "@@ -3205,16 +3205,7 @@ fix = {\n     files = iso/math_c99.h;\n     c_fix = format;\n     c_fix_arg = \"#define\\tfpclassify(x) \\\\\\n\"\n-                \"  __extension__ ({ const __typeof(x) __x_fp = (x); \\\\\\n\"\n-                \"\\t\\t   isnan(__x_fp) \\\\\\n\"\n-                \"\\t\\t     ? FP_NAN \\\\\\n\"\n-                \"\\t\\t     : isinf(__x_fp) \\\\\\n\"\n-                \"\\t\\t       ? FP_INFINITE \\\\\\n\"\n-                \"\\t\\t       : isnormal(__x_fp) \\\\\\n\"\n-                \"\\t\\t\\t ? FP_NORMAL \\\\\\n\"\n-                \"\\t\\t\\t : __x_fp == 0.0 \\\\\\n\"\n-                \"\\t\\t\\t   ? FP_ZERO \\\\\\n\"\n-                \"\\t\\t\\t   : FP_SUBNORMAL; })\";\n+                \"  __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL, FP_SUBNORMAL, FP_ZERO, (x))\";\n     c_fix_arg = \"^#define[ \\t]+fpclassify\\\\(x\\\\)[ \\t]+__builtin_fpclassify\\\\(x\\\\)\";\n     test_text =\n     '#ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"'\"\\n\""}, {"sha": "4d9b6311f6d520e5b6990febc3a688ab96537af0", "filename": "fixincludes/tests/base/iso/math_c99.h", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7de4b37ef1574e4311f34c5ea7d268670d7471ef/fixincludes%2Ftests%2Fbase%2Fiso%2Fmath_c99.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7de4b37ef1574e4311f34c5ea7d268670d7471ef/fixincludes%2Ftests%2Fbase%2Fiso%2Fmath_c99.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fiso%2Fmath_c99.h?ref=7de4b37ef1574e4311f34c5ea7d268670d7471ef", "patch": "@@ -38,16 +38,7 @@\n #ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"\n #undef\tfpclassify\n #define\tfpclassify(x) \\\n-  __extension__ ({ const __typeof(x) __x_fp = (x); \\\n-\t\t   isnan(__x_fp) \\\n-\t\t     ? FP_NAN \\\n-\t\t     : isinf(__x_fp) \\\n-\t\t       ? FP_INFINITE \\\n-\t\t       : isnormal(__x_fp) \\\n-\t\t\t ? FP_NORMAL \\\n-\t\t\t : __x_fp == 0.0 \\\n-\t\t\t   ? FP_ZERO \\\n-\t\t\t   : FP_SUBNORMAL; })\n+  __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL, FP_SUBNORMAL, FP_ZERO, (x))\n #endif  /* SOLARIS_MATH_4_CHECK */\n \n "}]}