{"sha": "97383b4116ea63486eb5bfb0a7140871bed75fb4", "node_id": "C_kwDOANBUbNoAKDk3MzgzYjQxMTZlYTYzNDg2ZWI1YmZiMGE3MTQwODcxYmVkNzVmYjQ", "commit": {"author": {"name": "Matthias Kretz", "email": "m.kretz@gsi.de", "date": "2023-03-22T07:12:08Z"}, "committer": {"name": "Matthias Kretz", "email": "m.kretz@gsi.de", "date": "2023-03-28T14:43:14Z"}, "message": "libstdc++: Add missing trait is_simd_flag_type\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/bits/simd.h (is_simd_flag_type): New.\n\t(_IsSimdFlagType): New.\n\t(copy_from, copy_to, load ctors): Constrain _Flags using\n\t_IsSimdFlagType.", "tree": {"sha": "044b957f8f7d3385f317b4a1078352206e7a3853", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/044b957f8f7d3385f317b4a1078352206e7a3853"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97383b4116ea63486eb5bfb0a7140871bed75fb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97383b4116ea63486eb5bfb0a7140871bed75fb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97383b4116ea63486eb5bfb0a7140871bed75fb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97383b4116ea63486eb5bfb0a7140871bed75fb4/comments", "author": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb046e69f0ed2d637ea715ae71ad50131f30cb2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb046e69f0ed2d637ea715ae71ad50131f30cb2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb046e69f0ed2d637ea715ae71ad50131f30cb2d"}], "stats": {"total": 52, "additions": 39, "deletions": 13}, "files": [{"sha": "224153ffbaf5b0f3950cff5dfa5c0c4c75138305", "filename": "libstdc++-v3/include/experimental/bits/simd.h", "status": "modified", "additions": 39, "deletions": 13, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97383b4116ea63486eb5bfb0a7140871bed75fb4/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97383b4116ea63486eb5bfb0a7140871bed75fb4/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h?ref=97383b4116ea63486eb5bfb0a7140871bed75fb4", "patch": "@@ -2837,6 +2837,32 @@ template <typename _Tp>\n } // namespace simd_abi\n \n // traits {{{1\n+template <typename _Tp>\n+  struct is_simd_flag_type\n+  : false_type\n+  {};\n+\n+template <>\n+  struct is_simd_flag_type<element_aligned_tag>\n+  : true_type\n+  {};\n+\n+template <>\n+  struct is_simd_flag_type<vector_aligned_tag>\n+  : true_type\n+  {};\n+\n+template <size_t _Np>\n+  struct is_simd_flag_type<overaligned_tag<_Np>>\n+  : __bool_constant<(_Np > 0) and __has_single_bit(_Np)>\n+  {};\n+\n+template <typename _Tp>\n+  inline constexpr bool is_simd_flag_type_v = is_simd_flag_type<_Tp>::value;\n+\n+template <typename _Tp, typename = enable_if_t<is_simd_flag_type_v<_Tp>>>\n+  using _IsSimdFlagType = _Tp;\n+\n // is_abi_tag {{{2\n template <typename _Tp, typename = void_t<>>\n   struct is_abi_tag : false_type {};\n@@ -3308,7 +3334,7 @@ template <typename _M, typename _Tp>\n \n     template <typename _Up, typename _Flags>\n       [[nodiscard]] _GLIBCXX_SIMD_INTRINSIC _V\n-      copy_from(const _LoadStorePtr<_Up, value_type>* __mem, _Flags) const&&\n+      copy_from(const _LoadStorePtr<_Up, value_type>* __mem, _IsSimdFlagType<_Flags>) const&&\n       {\n \treturn {__private_init,\n \t\t_Impl::_S_masked_load(__data(_M_value), __data(_M_k),\n@@ -3317,7 +3343,7 @@ template <typename _M, typename _Tp>\n \n     template <typename _Up, typename _Flags>\n       _GLIBCXX_SIMD_INTRINSIC void\n-      copy_to(_LoadStorePtr<_Up, value_type>* __mem, _Flags) const&&\n+      copy_to(_LoadStorePtr<_Up, value_type>* __mem, _IsSimdFlagType<_Flags>) const&&\n       {\n \t_Impl::_S_masked_store(__data(_M_value),\n \t\t\t       _Flags::template _S_apply<_V>(__mem),\n@@ -3363,12 +3389,12 @@ template <typename _Tp>\n \n     template <typename _Up, typename _Flags>\n       [[nodiscard]] _GLIBCXX_SIMD_INTRINSIC _V\n-      copy_from(const _LoadStorePtr<_Up, value_type>* __mem, _Flags) const&&\n+      copy_from(const _LoadStorePtr<_Up, value_type>* __mem, _IsSimdFlagType<_Flags>) const&&\n       { return _M_k ? static_cast<_V>(__mem[0]) : _M_value; }\n \n     template <typename _Up, typename _Flags>\n       _GLIBCXX_SIMD_INTRINSIC void\n-      copy_to(_LoadStorePtr<_Up, value_type>* __mem, _Flags) const&&\n+      copy_to(_LoadStorePtr<_Up, value_type>* __mem, _IsSimdFlagType<_Flags>) const&&\n       {\n \tif (_M_k)\n \t  __mem[0] = _M_value;\n@@ -3466,7 +3492,7 @@ template <typename _M, typename _Tp>\n     // intentionally hides const_where_expression::copy_from\n     template <typename _Up, typename _Flags>\n       _GLIBCXX_SIMD_INTRINSIC void\n-      copy_from(const _LoadStorePtr<_Up, value_type>* __mem, _Flags) &&\n+      copy_from(const _LoadStorePtr<_Up, value_type>* __mem, _IsSimdFlagType<_Flags>) &&\n       {\n \t__data(_M_value) = _Impl::_S_masked_load(__data(_M_value), __data(_M_k),\n \t\t\t\t\t\t _Flags::template _S_apply<_Tp>(__mem));\n@@ -3529,7 +3555,7 @@ template <typename _Tp>\n     // intentionally hides const_where_expression::copy_from\n     template <typename _Up, typename _Flags>\n       _GLIBCXX_SIMD_INTRINSIC void\n-      copy_from(const _LoadStorePtr<_Up, value_type>* __mem, _Flags) &&\n+      copy_from(const _LoadStorePtr<_Up, value_type>* __mem, _IsSimdFlagType<_Flags>) &&\n       { if (_M_k) _M_value = __mem[0]; }\n   };\n \n@@ -4574,12 +4600,12 @@ template <typename _Tp, typename _Abi>\n     // load constructor {{{\n     template <typename _Flags>\n       _GLIBCXX_SIMD_ALWAYS_INLINE\n-      simd_mask(const value_type* __mem, _Flags)\n+      simd_mask(const value_type* __mem, _IsSimdFlagType<_Flags>)\n       : _M_data(_Impl::template _S_load<_Ip>(_Flags::template _S_apply<simd_mask>(__mem))) {}\n \n     template <typename _Flags>\n       _GLIBCXX_SIMD_ALWAYS_INLINE\n-      simd_mask(const value_type* __mem, simd_mask __k, _Flags)\n+      simd_mask(const value_type* __mem, simd_mask __k, _IsSimdFlagType<_Flags>)\n       : _M_data{}\n       {\n \t_M_data = _Impl::_S_masked_load(_M_data, __k._M_data,\n@@ -4590,14 +4616,14 @@ template <typename _Tp, typename _Abi>\n     // loads [simd_mask.load] {{{\n     template <typename _Flags>\n       _GLIBCXX_SIMD_ALWAYS_INLINE void\n-      copy_from(const value_type* __mem, _Flags)\n+      copy_from(const value_type* __mem, _IsSimdFlagType<_Flags>)\n       { _M_data = _Impl::template _S_load<_Ip>(_Flags::template _S_apply<simd_mask>(__mem)); }\n \n     // }}}\n     // stores [simd_mask.store] {{{\n     template <typename _Flags>\n       _GLIBCXX_SIMD_ALWAYS_INLINE void\n-      copy_to(value_type* __mem, _Flags) const\n+      copy_to(value_type* __mem, _IsSimdFlagType<_Flags>) const\n       { _Impl::_S_store(_M_data, _Flags::template _S_apply<simd_mask>(__mem)); }\n \n     // }}}\n@@ -5210,15 +5236,15 @@ template <typename _Tp, typename _Abi>\n     // load constructor\n     template <typename _Up, typename _Flags>\n       _GLIBCXX_SIMD_ALWAYS_INLINE\n-      simd(const _Up* __mem, _Flags)\n+      simd(const _Up* __mem, _IsSimdFlagType<_Flags>)\n       : _M_data(\n \t  _Impl::_S_load(_Flags::template _S_apply<simd>(__mem), _S_type_tag))\n       {}\n \n     // loads [simd.load]\n     template <typename _Up, typename _Flags>\n       _GLIBCXX_SIMD_ALWAYS_INLINE void\n-      copy_from(const _Vectorizable<_Up>* __mem, _Flags)\n+      copy_from(const _Vectorizable<_Up>* __mem, _IsSimdFlagType<_Flags>)\n       {\n \t_M_data = static_cast<decltype(_M_data)>(\n \t  _Impl::_S_load(_Flags::template _S_apply<simd>(__mem), _S_type_tag));\n@@ -5227,7 +5253,7 @@ template <typename _Tp, typename _Abi>\n     // stores [simd.store]\n     template <typename _Up, typename _Flags>\n       _GLIBCXX_SIMD_ALWAYS_INLINE void\n-      copy_to(_Vectorizable<_Up>* __mem, _Flags) const\n+      copy_to(_Vectorizable<_Up>* __mem, _IsSimdFlagType<_Flags>) const\n       {\n \t_Impl::_S_store(_M_data, _Flags::template _S_apply<simd>(__mem),\n \t\t\t_S_type_tag);"}]}