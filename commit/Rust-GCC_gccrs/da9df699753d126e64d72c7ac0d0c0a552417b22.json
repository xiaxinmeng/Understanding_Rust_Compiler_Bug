{"sha": "da9df699753d126e64d72c7ac0d0c0a552417b22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE5ZGY2OTk3NTNkMTI2ZTY0ZDcyYzdhYzBkMGMwYTU1MjQxN2IyMg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-09T00:16:27Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-09T00:16:27Z"}, "message": "Daily bump.", "tree": {"sha": "d96e083fbb0f7fb99e7e3bf9230d677080054f3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d96e083fbb0f7fb99e7e3bf9230d677080054f3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da9df699753d126e64d72c7ac0d0c0a552417b22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da9df699753d126e64d72c7ac0d0c0a552417b22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da9df699753d126e64d72c7ac0d0c0a552417b22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da9df699753d126e64d72c7ac0d0c0a552417b22/comments", "author": null, "committer": null, "parents": [{"sha": "9158a4d2a6cd58d6bb591d5ce64e766b399e4aef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9158a4d2a6cd58d6bb591d5ce64e766b399e4aef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9158a4d2a6cd58d6bb591d5ce64e766b399e4aef"}], "stats": {"total": 400, "additions": 399, "deletions": 1}, "files": [{"sha": "75b62b590e27e062ce6a2cb696a66478ad376ab0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9df699753d126e64d72c7ac0d0c0a552417b22/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9df699753d126e64d72c7ac0d0c0a552417b22/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da9df699753d126e64d72c7ac0d0c0a552417b22", "patch": "@@ -1,3 +1,172 @@\n+2020-10-08  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* builtins.c (mathfn_built_in_type): New.\n+\t* builtins.h (mathfn_built_in_type): Declare.\n+\t* tree-ssa-math-opts.c (execute_cse_sincos_1): Use it to\n+\tobtain the type expected by the intrinsic.\n+\n+2020-10-08  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000-builtin.def (BU_P10_MISC_2): Rename\n+\tto BU_P10_POWERPC64_MISC_2.\n+\tCFUGED, CNTLZDM, CNTTZDM, PDEPD, PEXTD): Call renamed macro.\n+\n+2020-10-08  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-nrv.c (dest_safe_for_nrv_p): Disable tbaa in\n+\tcall_may_clobber_ref_p and ref_maybe_used_by_stmt_p.\n+\t* tree-tailcall.c (find_tail_calls): Likewise.\n+\t* tree-ssa-alias.c (call_may_clobber_ref_p): Add tbaa_p parameter.\n+\t* tree-ssa-alias.h (call_may_clobber_ref_p): Update prototype.\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Pass data->tbaa_p\n+\tto call_may_clobber_ref_p_1.\n+\n+2020-10-08  Mark Wielaard  <mark@klomp.org>\n+\n+\t* dwarf2out.c (dwarf2out_finish): Emit .file 0 entry when\n+\tgenerating DWARF5 .debug_line table through gas.\n+\n+2020-10-08  John Henning  <john.henning@oracle.com>\n+\n+\tPR other/97309\n+\t* doc/invoke.texi: Improve documentation of\n+\t-fallow-store-data-races.\n+\n+2020-10-08  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/96914\n+\t* config/arm/arm_mve.h (__arm_vcvtnq_u32_f32): New.\n+\n+2020-10-08  Martin Liska  <mliska@suse.cz>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.h (_bb_vec_info::const_iterator): Remove.\n+\t(_bb_vec_info::const_reverse_iterator): Likewise.\n+\t(_bb_vec_info::region_stmts): Likewise.\n+\t(_bb_vec_info::reverse_region_stmts): Likewise.\n+\t(_bb_vec_info::_bb_vec_info): Adjust.\n+\t(_bb_vec_info::bb): Remove.\n+\t(_bb_vec_info::region_begin): Remove.\n+\t(_bb_vec_info::region_end): Remove.\n+\t(_bb_vec_info::bbs): New vector of BBs.\n+\t(vect_slp_function): Declare.\n+\t* tree-vect-patterns.c (vect_determine_precisions): Use\n+\tregular stmt iteration.\n+\t(vect_pattern_recog): Likewise.\n+\t* tree-vect-slp.c: Include cfganal.h, tree-eh.h and tree-cfg.h.\n+\t(vect_build_slp_tree_1): Properly refuse to vectorize\n+\tvolatile and throwing stmts.\n+\t(vect_build_slp_tree_2): Pass group-size down to\n+\tget_vectype_for_scalar_type.\n+\t(_bb_vec_info::_bb_vec_info): Use regular stmt iteration,\n+\tadjust for changed region specification.\n+\t(_bb_vec_info::~_bb_vec_info): Likewise.\n+\t(vect_slp_check_for_constructors): Likewise.\n+\t(vect_slp_region): Likewise.\n+\t(vect_slp_bbs): New worker operating on a vector of BBs.\n+\t(vect_slp_bb): Wrap it.\n+\t(vect_slp_function): New function splitting the function\n+\tinto multi-BB regions.\n+\t(vect_create_constant_vectors): Handle the case of inserting\n+\tafter a throwing def.\n+\t(vect_schedule_slp_instance): Adjust.\n+\t* tree-vectorizer.c (vec_info::remove_stmt): Simplify again.\n+\t(vec_info::insert_seq_on_entry): Adjust.\n+\t(pass_slp_vectorize::execute): Also init PHIs.  Call\n+\tvect_slp_function.\n+\n+2020-10-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97330\n+\t* tree-ssa-sink.c (statement_sink_location): Avoid skipping\n+\tPHIs when they dominate the insert location.\n+\n+2020-10-08  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-modref.c (get_access): Fix handling of offsets.\n+\t* tree-ssa-alias.c (modref_may_conflict): Watch for overflows.\n+\n+2020-10-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* dbgcnt.def (DEBUG_COUNTER): Add ipa_mod_ref debug counter.\n+\t* tree-ssa-alias.c (modref_may_conflict): Handle the counter.\n+\n+2020-10-08  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.c (try_vectorize_loop_1): Do not dump\n+\t\"basic block vectorized\".\n+\t(pass_slp_vectorize::execute): Likewise.\n+\t* tree-vect-slp.c (vect_analyze_slp_instance): Avoid\n+\tre-analyzing split single stmts.\n+\n+2020-10-08  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/96914\n+\t* config/arm/arm_mve.h (vqrdmlashq_n_u8, vqrdmlashq_n_u16)\n+\t(vqrdmlashq_n_u32, vqrdmlahq_n_u8, vqrdmlahq_n_u16)\n+\t(vqrdmlahq_n_u32, vqdmlahq_n_u8, vqdmlahq_n_u16, vqdmlahq_n_u32)\n+\t(vmlaldavaxq_p_u16, vmlaldavaxq_p_u32): Remove.\n+\t* config/arm/arm_mve_builtins.def (vqrdmlashq_n_u, vqrdmlahq_n_u)\n+\t(vqdmlahq_n_u, vmlaldavaxq_p_u): Remove.\n+\t* config/arm/unspecs.md (VQDMLAHQ_N_U, VQRDMLAHQ_N_U)\n+\t(VQRDMLASHQ_N_U)\n+\t(VMLALDAVAXQ_P_U): Remove unspecs.\n+\t* config/arm/iterators.md (VQDMLAHQ_N_U, VQRDMLAHQ_N_U)\n+\t(VQRDMLASHQ_N_U, VMLALDAVAXQ_P_U): Remove attributes.\n+\t(VQDMLAHQ_N, VQRDMLAHQ_N, VQRDMLASHQ_N, VMLALDAVAXQ_P): Remove\n+\tunsigned variants from iterators.\n+\t* config/arm/mve.md (mve_vqdmlahq_n_<supf><mode>)\n+\t(mve_vqrdmlahq_n_<supf><mode>)\n+\t(mve_vqrdmlashq_n_<supf><mode>, mve_vmlaldavaxq_p_<supf><mode>):\n+\tUpdate comment.\n+\n+2020-10-08  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/96914\n+\t* config/arm/arm_mve.h (vqdmlashq, vqdmlashq_m): Define.\n+\t* config/arm/arm_mve_builtins.def (vqdmlashq_n_s)\n+\t(vqdmlashq_m_n_s,): New.\n+\t* config/arm/unspecs.md (VQDMLASHQ_N_S, VQDMLASHQ_M_N_S): New\n+\tunspecs.\n+\t* config/arm/iterators.md (VQDMLASHQ_N_S, VQDMLASHQ_M_N_S): New\n+\tattributes.\n+\t(VQDMLASHQ_N): New iterator.\n+\t* config/arm/mve.md (mve_vqdmlashq_n_, mve_vqdmlashq_m_n_s): New\n+\tpatterns.\n+\n+2020-10-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/97322\n+\t* config/arm/arm.c (arm_expand_divmod_libfunc): Pass mode instead of\n+\tGET_MODE (op0) or GET_MODE (op1) to emit_library_call_value.\n+\n+2020-10-08  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/97325\n+\t* gimple-range.cc (gimple_ranger::range_of_builtin_call): Handle\n+\tnegative numbers in __builtin_ffs and __builtin_popcount.\n+\n+2020-10-08  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/97315\n+\t* range-op.cc (value_range_with_overflow): Change any\n+\tnon-overflow calculation in which both bounds are\n+\toverflow/underflow to be undefined.\n+\n+2020-10-08  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/97315\n+\t* gimple-ssa-evrp.c (hybrid_folder::choose_value): Removes the\n+\ttrap and instead annotates the listing.\n+\n+2020-10-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/97294\n+\t* tree-cfg.c (move_block_to_fn): Call notice_special_calls on\n+\tcall stmts being moved into dest_cfun.\n+\t* omp-low.c (lower_rec_input_clauses): Set cfun->calls_alloca when\n+\tadding __builtin_alloca_with_align call without gimplification.\n+\n 2020-10-07  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* common.opt (-fevrp-mode): Rename and move..."}, {"sha": "960857045523600bc32fe0c39474c6294c87e968", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9df699753d126e64d72c7ac0d0c0a552417b22/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9df699753d126e64d72c7ac0d0c0a552417b22/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=da9df699753d126e64d72c7ac0d0c0a552417b22", "patch": "@@ -1 +1 @@\n-20201008\n+20201009"}, {"sha": "c28ae8c90cbc275da5626d51ad565836b15bba6f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9df699753d126e64d72c7ac0d0c0a552417b22/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9df699753d126e64d72c7ac0d0c0a552417b22/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=da9df699753d126e64d72c7ac0d0c0a552417b22", "patch": "@@ -1,3 +1,27 @@\n+2020-10-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/96805\n+\tPR c++/96199\n+\t* pt.c (tsubst_aggr_type): Don't build a TYPENAME_TYPE when\n+\tentering_scope.\n+\t(tsubst_template_decl): Use tsubst_aggr_type.\n+\n+2020-10-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/97052\n+\t* constraint.cc (build_type_constraint): Temporarily increment\n+\tprocessing_template_decl before calling build_concept_check.\n+\t* pt.c (make_constrained_placeholder_type): Likewise.\n+\n+2020-10-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/96229\n+\t* parser.c (cp_parser_class_specifier_1): Move call to\n+\tassociate_classtype_constraints from here to ...\n+\t(cp_parser_class_head): ... here.\n+\t* pt.c (is_compatible_template_arg): Correct documentation to\n+\tsay \"argument is _no_ more constrained than the parameter\".\n+\n 2020-10-07  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/97010"}, {"sha": "b1c1ad01051e72a14fadf7eb1fb2e3be58ea1d3e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9df699753d126e64d72c7ac0d0c0a552417b22/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9df699753d126e64d72c7ac0d0c0a552417b22/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da9df699753d126e64d72c7ac0d0c0a552417b22", "patch": "@@ -1,3 +1,151 @@\n+2020-10-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/96805\n+\t* g++.dg/cpp0x/alias-decl-pr96805.C: New test.\n+\n+2020-10-08  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/96914\n+\t* gcc.target/arm/mve/intrinsics/vcvtnq_u32_f32.c: New test.\n+\n+2020-10-08  Martin Liska  <mliska@suse.cz>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/bb-slp-22.c: Adjust.\n+\t* gfortran.dg/pr68627.f: Likewise.\n+\n+2020-10-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97330\n+\t* gcc.dg/torture/pr97330-1.c: New testcase.\n+\t* gcc.dg/torture/pr97330-2.c: Likewise.\n+\n+2020-10-08  Richard Biener  <rguenther@suse.de>\n+\n+\t* g++.dg/vect/slp-pr50819.cc: Adjust.\n+\t* gcc.dg/vect/bb-slp-1.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-10.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-11.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-13.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-14.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-15.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-16.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-17.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-18.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-19.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-2.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-20.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-21.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-22.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-23.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-24.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-25.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-26.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-27.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-28.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-29.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-3.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-30.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-31.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-34.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-35.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-36.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-38.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-4.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-45.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-46.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-48.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-5.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-6.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-7.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-8.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-8a.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-8b.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-9.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-div-2.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-over-widen-1.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-over-widen-2.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-pattern-2.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-pow-1.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-pr58135.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-pr65935.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-pr78205.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-pr81635-1.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-pr81635-3.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-pr95839-2.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-pr95839.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-pr95866.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-subgroups-1.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-subgroups-2.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-subgroups-3.c: Adjust.\n+\t* gcc.dg/vect/fast-math-bb-slp-call-1.c: Adjust.\n+\t* gcc.dg/vect/no-tree-reassoc-bb-slp-12.c: Adjust.\n+\t* gcc.dg/vect/no-tree-sra-bb-slp-pr50730.c: Adjust.\n+\t* gfortran.dg/vect/pr62283-2.f: Adjust.\n+\t* gcc.target/i386/pr68961.c: Adjust.\n+\t* gcc.target/i386/pr84101.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-pr81635-2.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-pr81635-4.c: Adjust.\n+\t* gcc.dg/vect/fast-math-bb-slp-call-2.c: Adjust.\n+\t* gcc.dg/vect/costmodel/ppc/costmodel-bb-slp-9a.c: Adjust.\n+\t* gcc.dg/vect/costmodel/x86_64/costmodel-vect-slp.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-div-1.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-pr90006.c: Adjust.\n+\t* g++.dg/vect/slp-pr50413.cc: Adjust.\n+\n+2020-10-08  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/96914\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_p_u16.c: Remove.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_p_u32.c: Remove.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlahq_n_u16.c: Remove.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlahq_n_u32.c: Remove.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlahq_n_u8.c: Remove.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_n_u16.c: Remove.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_n_u32.c: Remove.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_n_u8.c: Remove.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_n_u16.c: Remove.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_n_u32.c: Remove.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_n_u8.c: Remove.\n+\n+2020-10-08  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/96914\n+\t* gcc.target/arm/mve/intrinsics/vqdmlashq_m_n_s16.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlashq_m_n_s32.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlashq_m_n_s8.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlashq_n_s16.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlashq_n_s32.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlashq_n_s8.c: New test.\n+\n+2020-10-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/97322\n+\t* gcc.dg/pr97322.c: New test.\n+\n+2020-10-08  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/pr97315-2.c: New test.\n+\n+2020-10-08  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/pr97315-1.c: New test.\n+\n+2020-10-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/97294\n+\t* gcc.dg/asan/pr97294.c: New test.\n+\n+2020-10-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/97052\n+\t* g++.dg/cpp2a/concepts-defarg2.C: New test.\n+\n+2020-10-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/96229\n+\t* g++.dg/cpp2a/concepts-class2.C: New test.\n+\n 2020-10-07  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/97010"}, {"sha": "1aa2764dbe8f9f3f0a21e454e1da89bbb2388891", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9df699753d126e64d72c7ac0d0c0a552417b22/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9df699753d126e64d72c7ac0d0c0a552417b22/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=da9df699753d126e64d72c7ac0d0c0a552417b22", "patch": "@@ -1,3 +1,15 @@\n+2020-10-08  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* internal.h (enum include_type): Rename IT_MAIN_INJECT to\n+\tIT_PRE_MAIN.\n+\t* init.c (cpp_read_main_file): If there is no line marker, adjust\n+\tthe initial line marker.\n+\t(read_original_filename): Return bool, peek the buffer directly\n+\tbefore trying to tokenize.\n+\t(read_original_directory): Likewise.  Directly prod the string\n+\tliteral.\n+\t* files.c (_cpp_stack_file): Adjust for IT_PRE_MAIN change.\n+\n 2020-09-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/97163"}, {"sha": "21a0e1b483259742753c1d33ee13a5654e1e2e92", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9df699753d126e64d72c7ac0d0c0a552417b22/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9df699753d126e64d72c7ac0d0c0a552417b22/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=da9df699753d126e64d72c7ac0d0c0a552417b22", "patch": "@@ -1,3 +1,9 @@\n+2020-10-08  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR libgomp/81802\n+\t* plugin/plugin-nvptx.c (GOMP_OFFLOAD_run): Report launch\n+\tdimensions.\n+\n 2020-10-06  Tom de Vries  <tdevries@suse.de>\n \n \t* testsuite/libgomp.oacc-fortran/declare-5.f90: Add xfail for PR92790."}, {"sha": "3692364d6df87cc33a7e37751b51aab4bfc1791a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9df699753d126e64d72c7ac0d0c0a552417b22/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9df699753d126e64d72c7ac0d0c0a552417b22/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=da9df699753d126e64d72c7ac0d0c0a552417b22", "patch": "@@ -1,3 +1,42 @@\n+2020-10-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/95788\n+\t* include/bits/ranges_uninitialized.h:\n+\t(__construct_at_fn::operator()): Rewrite in terms of\n+\tstd::construct_at.  Declare it conditionally noexcept.  Qualify\n+\tcalls to declval in its requires-clause.\n+\t* testsuite/20_util/specialized_algorithms/construct_at/95788.cc:\n+\tNew test.\n+\n+2020-10-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/82584\n+\t* include/bits/random.tcc\n+\t(discrete_distribution::param_type::_M_initialize)\n+\t(piecewise_constant_distribution::param_type::_M_initialize)\n+\t(piecewise_linear_distribution::param_type::_M_initialize):\n+\tAdd assertions for positive sums..\n+\t* testsuite/26_numerics/random/pr60037-neg.cc: Adjust dg-error\n+\tline.\n+\n+2020-10-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/ios_base.h (ios_base::failure): Add constructors\n+\ttakeing error_code argument. Add code() member function.\n+\t* testsuite/27_io/ios_base/failure/cxx11.cc: Allow test to\n+\trun for the old ABI but do not check for derivation from\n+\tstd::system_error.\n+\t* testsuite/27_io/ios_base/failure/error_code.cc: New test.\n+\n+2020-10-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/random.h (__detail::_Mod): Revert last change.\n+\t(__detail::__mod): Do not use _Mod for a==0 case.\n+\t* testsuite/26_numerics/random/linear_congruential_engine/operators/call.cc:\n+\tCheck other cases with a==0. Also check runtime results.\n+\t* testsuite/26_numerics/random/pr60037-neg.cc: Adjust dg-error\n+\tline.\n+\n 2020-10-07  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/random.h (__detail::_Mod): Avoid divide by zero."}]}