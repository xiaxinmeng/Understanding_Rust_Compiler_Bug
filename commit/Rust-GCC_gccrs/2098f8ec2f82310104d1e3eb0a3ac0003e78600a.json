{"sha": "2098f8ec2f82310104d1e3eb0a3ac0003e78600a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA5OGY4ZWMyZjgyMzEwMTA0ZDFlM2ViMGEzYWMwMDAzZTc4NjAwYQ==", "commit": {"author": {"name": "Sam Tebbs", "email": "sam.tebbs@arm.com", "date": "2019-06-05T11:06:56Z"}, "committer": {"name": "Sam Tebbs", "email": "samtebbs@gcc.gnu.org", "date": "2019-06-05T11:06:56Z"}, "message": "[PATCH][GCC][AARCH64] Add tests for pointer authentication B-key\n\n\tgcc/testsuite/ChangeLog\n\t* gcc.target/aarch64/return_address_sign_b_1.c: New file.\n\t* gcc.target/aarch64/return_address_sign_b_2.c: New file.\n\t* gcc.target/aarch64/return_address_sign_b_3.c: New file.\n\t* gcc.target/aarch64/return_address_sign_builtin.c: New file.\n\t* g++.target/aarch64/return_address_sign_ab_exception.C: New file.\n\t* g++.target/aarch64/return_address_sign_b_exception.C: New file.\n\nFrom-SVN: r271954", "tree": {"sha": "ed29df580978726fa4ab2c5d3d96b7f08f253e8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed29df580978726fa4ab2c5d3d96b7f08f253e8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2098f8ec2f82310104d1e3eb0a3ac0003e78600a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2098f8ec2f82310104d1e3eb0a3ac0003e78600a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2098f8ec2f82310104d1e3eb0a3ac0003e78600a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2098f8ec2f82310104d1e3eb0a3ac0003e78600a/comments", "author": null, "committer": null, "parents": [{"sha": "d301c1a41d7ee2dd35aac12bda09c8ced73a36f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d301c1a41d7ee2dd35aac12bda09c8ced73a36f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d301c1a41d7ee2dd35aac12bda09c8ced73a36f6"}], "stats": {"total": 164, "additions": 164, "deletions": 0}, "files": [{"sha": "0d120c422a2f09bc29c36f5cfbc11c3521101093", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2098f8ec2f82310104d1e3eb0a3ac0003e78600a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2098f8ec2f82310104d1e3eb0a3ac0003e78600a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2098f8ec2f82310104d1e3eb0a3ac0003e78600a", "patch": "@@ -1,3 +1,12 @@\n+2019-06-05  Sam Tebbs  <sam.tebbs@arm.com>\n+\n+\t* gcc.target/aarch64/return_address_sign_b_1.c: New file.\n+\t* gcc.target/aarch64/return_address_sign_b_2.c: New file.\n+\t* gcc.target/aarch64/return_address_sign_b_3.c: New file.\n+\t* gcc.target/aarch64/return_address_sign_builtin.c: New file.\n+\t* g++.target/aarch64/return_address_sign_ab_exception.C: New file.\n+\t* g++.target/aarch64/return_address_sign_b_exception.C: New file.\n+\n 2019-06-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/90733"}, {"sha": "520cd180beeba317a12d2404ce6e252eaeb6aa90", "filename": "gcc/testsuite/g++.target/aarch64/return_address_sign_ab_exception.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2098f8ec2f82310104d1e3eb0a3ac0003e78600a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Freturn_address_sign_ab_exception.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2098f8ec2f82310104d1e3eb0a3ac0003e78600a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Freturn_address_sign_ab_exception.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Freturn_address_sign_ab_exception.C?ref=2098f8ec2f82310104d1e3eb0a3ac0003e78600a", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-options \"--save-temps\" } */\n+\n+__attribute__((target(\"branch-protection=pac-ret+leaf\")))\n+int foo_a () {\n+  throw 22;\n+}\n+\n+__attribute__((target(\"branch-protection=pac-ret+leaf+b-key\")))\n+int foo_b () {\n+  throw 22;\n+}\n+\n+int main (int argc, char** argv) {\n+  try {\n+    foo_a ();\n+  } catch (...) {\n+    try {\n+      foo_b ();\n+    } catch (...) {\n+      return 0;\n+    }\n+  }\n+  return 1;\n+}\n+\n+/* { dg-final { scan-assembler-times \"paciasp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"pacibsp\" 1 } } */\n+/* { dg-final { scan-assembler-times \".cfi_b_key_frame\" 1 } } */\n+"}, {"sha": "eab2869e004b245944d2222b696e34dc4db90e6e", "filename": "gcc/testsuite/g++.target/aarch64/return_address_sign_b_exception.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2098f8ec2f82310104d1e3eb0a3ac0003e78600a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Freturn_address_sign_b_exception.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2098f8ec2f82310104d1e3eb0a3ac0003e78600a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Freturn_address_sign_b_exception.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Freturn_address_sign_b_exception.C?ref=2098f8ec2f82310104d1e3eb0a3ac0003e78600a", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mbranch-protection=pac-ret+leaf+b-key --save-temps\" } */\n+\n+int foo () {\n+  throw 22;\n+}\n+\n+int main (int argc, char** argv) {\n+  try {\n+    foo();\n+  } catch (...) {\n+    return 0;\n+  }\n+  return 1;\n+}\n+\n+/* { dg-final { scan-assembler-times \".cfi_b_key_frame\" 2 } } */"}, {"sha": "32d788ddf3fb72545d7c4b9869d8e445bdaaab37", "filename": "gcc/testsuite/gcc.target/aarch64/return_address_sign_b_1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2098f8ec2f82310104d1e3eb0a3ac0003e78600a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_b_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2098f8ec2f82310104d1e3eb0a3ac0003e78600a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_b_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_b_1.c?ref=2098f8ec2f82310104d1e3eb0a3ac0003e78600a", "patch": "@@ -0,0 +1,52 @@\n+/* Testing return address signing where no combined instructions used.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mbranch-protection=pac-ret+leaf+b-key\" } */\n+/* { dg-require-effective-target lp64 } */\n+\n+int foo (int);\n+\n+/* sibcall only.  */\n+int __attribute__ ((target (\"arch=armv8.3-a\")))\n+func1 (int a, int b)\n+{\n+  /* pacibsp */\n+  return foo (a + b);\n+  /* autibsp */\n+}\n+\n+/* non-leaf function with sibcall.  */\n+int __attribute__ ((target (\"arch=armv8.3-a\")))\n+func2 (int a, int b)\n+{\n+  /* pacibsp */\n+  if (a < b)\n+    return b;\n+\n+  a = foo (b);\n+\n+  return foo (a);\n+  /* autibsp */\n+}\n+\n+/* non-leaf function, legacy arch.  */\n+int __attribute__ ((target (\"arch=armv8.2-a\")))\n+func3 (int a, int b, int c)\n+{\n+  /* pacibsp */\n+  return a + foo (b) + c;\n+  /* autibsp */\n+}\n+\n+/* eh_return.  */\n+void __attribute__ ((target (\"arch=armv8.3-a\")))\n+func4 (long offset, void *handler, int *ptr, int imm1, int imm2)\n+{\n+  /* pacibsp */\n+  *ptr = imm1 + foo (imm1) + imm2;\n+  __builtin_eh_return (offset, handler);\n+  /* autibsp */\n+  return;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pacibsp\" 4 } } */\n+/* { dg-final { scan-assembler-times \"autibsp\" 4 } } */"}, {"sha": "9ed64ce05911475268e9ef95e88e873e21611085", "filename": "gcc/testsuite/gcc.target/aarch64/return_address_sign_b_2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2098f8ec2f82310104d1e3eb0a3ac0003e78600a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_b_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2098f8ec2f82310104d1e3eb0a3ac0003e78600a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_b_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_b_2.c?ref=2098f8ec2f82310104d1e3eb0a3ac0003e78600a", "patch": "@@ -0,0 +1,18 @@\n+/* Testing return address signing where combined instructions used.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mbranch-protection=pac-ret+leaf+b-key\" } */\n+/* { dg-require-effective-target lp64 } */\n+\n+int foo (int);\n+int bar (int, int);\n+\n+int __attribute__ ((target (\"arch=armv8.3-a\")))\n+func1 (int a, int b, int c)\n+{\n+  /* pacibsp */\n+  return a + foo (b) + c;\n+  /* retab */\n+}\n+\n+/* { dg-final { scan-assembler-times \"pacibsp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"retab\" 1 } } */"}, {"sha": "7183cc2f2b1c1692d5eda9c96c237d2e308060fb", "filename": "gcc/testsuite/gcc.target/aarch64/return_address_sign_b_3.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2098f8ec2f82310104d1e3eb0a3ac0003e78600a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_b_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2098f8ec2f82310104d1e3eb0a3ac0003e78600a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_b_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_b_3.c?ref=2098f8ec2f82310104d1e3eb0a3ac0003e78600a", "patch": "@@ -0,0 +1,22 @@\n+/* Testing the disable of return address signing.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mbranch-protection=pac-ret+leaf+b-key\" } */\n+/* { dg-require-effective-target lp64 } */\n+\n+int bar (int, int);\n+\n+int __attribute__ ((target (\"arch=armv8.3-a,branch-protection=pac-ret+b-key\")))\n+func1_leaf (int a, int b, int c, int d)\n+{\n+  return a + b + c + d;\n+}\n+\n+int __attribute__ ((target (\"arch=armv8.3-a,branch-protection=none\")))\n+func2_none (int a, int b, int c, int d)\n+{\n+  return c + bar (a, b) + d;\n+}\n+\n+/* { dg-final { scan-assembler-not \"pacibsp\" } } */\n+/* { dg-final { scan-assembler-not \"autibsp\" } } */\n+/* { dg-final { scan-assembler-not \"retab\" } } */"}, {"sha": "0a01bfc9da45589740f9939d780805c27379c650", "filename": "gcc/testsuite/gcc.target/aarch64/return_address_sign_builtin.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2098f8ec2f82310104d1e3eb0a3ac0003e78600a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_builtin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2098f8ec2f82310104d1e3eb0a3ac0003e78600a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_builtin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_builtin.c?ref=2098f8ec2f82310104d1e3eb0a3ac0003e78600a", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mbranch-protection=pac-ret+leaf+b-key\" } */\n+\n+/* The correct pauth instruction should be generated no matter the return\n+  address signing key/scope specified in the options.  */\n+\n+int foo() {\n+  /* { dg-final { scan-assembler-times \"pacia1716\" 1 } } */\n+  __builtin_aarch64_pacia1716(0, 0);\n+  /* { dg-final { scan-assembler-times \"pacib1716\" 1 } } */\n+  __builtin_aarch64_pacib1716(0, 0);\n+  /* { dg-final { scan-assembler-times \"autia1716\" 1 } } */\n+  __builtin_aarch64_autia1716(0, 0);\n+  /* { dg-final { scan-assembler-times \"autib1716\" 1 } } */\n+  __builtin_aarch64_autib1716(0, 0);\n+}"}]}