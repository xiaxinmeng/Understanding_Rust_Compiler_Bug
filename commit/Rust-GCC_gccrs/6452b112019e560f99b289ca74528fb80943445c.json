{"sha": "6452b112019e560f99b289ca74528fb80943445c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ1MmIxMTIwMTllNTYwZjk5YjI4OWNhNzQ1MjhmYjgwOTQzNDQ1Yw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-01-05T05:33:32Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-01-05T05:33:32Z"}, "message": "re PR go/47158 ([cppcheck][PATCH] found a memory leaks in gcc/gcc/go/gofrontend/gogo-tree.cc)\n\n\tPR go/47158\n\tPR go/47159\n\tPR go/47160\n\tPR go/47161\nFix space leaks.\nPatch from Ettl Martin.\n\nFrom-SVN: r168504", "tree": {"sha": "da86d664e308ce5626c93b4bce78a17cc75df4a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da86d664e308ce5626c93b4bce78a17cc75df4a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6452b112019e560f99b289ca74528fb80943445c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6452b112019e560f99b289ca74528fb80943445c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6452b112019e560f99b289ca74528fb80943445c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6452b112019e560f99b289ca74528fb80943445c/comments", "author": null, "committer": null, "parents": [{"sha": "183440ee5bf5966f231c95b9e2e09a15a40f2e78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/183440ee5bf5966f231c95b9e2e09a15a40f2e78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/183440ee5bf5966f231c95b9e2e09a15a40f2e78"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "550d1aea0ab9c6078f6d81e8f52937e8d633cdef", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6452b112019e560f99b289ca74528fb80943445c/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6452b112019e560f99b289ca74528fb80943445c/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=6452b112019e560f99b289ca74528fb80943445c", "patch": "@@ -8726,15 +8726,21 @@ Call_expression::do_get_tree(Translate_context* context)\n \t\t\t\t\t\t       arg_val,\n \t\t\t\t\t\t       location);\n \t  if (args[i] == error_mark_node)\n-\t    return error_mark_node;\n+\t    {\n+\t      delete[] args;\n+\t      return error_mark_node;\n+\t    }\n \t}\n       gcc_assert(pp == params->end());\n       gcc_assert(i == nargs);\n     }\n \n   tree rettype = TREE_TYPE(TREE_TYPE(fntype->get_tree(gogo)));\n   if (rettype == error_mark_node)\n-    return error_mark_node;\n+    {\n+      delete[] args;\n+      return error_mark_node;\n+    }\n \n   tree fn;\n   if (has_closure)\n@@ -8749,7 +8755,10 @@ Call_expression::do_get_tree(Translate_context* context)\n     gcc_unreachable();\n \n   if (fn == error_mark_node || TREE_TYPE(fn) == error_mark_node)\n-    return error_mark_node;\n+    {\n+      delete[] args;\n+      return error_mark_node;\n+    }\n \n   // This is to support builtin math functions when using 80387 math.\n   tree fndecl = fn;"}, {"sha": "bcb25191bba42e2967343756a931f65efcb711bc", "filename": "gcc/go/gofrontend/gogo-tree.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6452b112019e560f99b289ca74528fb80943445c/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6452b112019e560f99b289ca74528fb80943445c/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc?ref=6452b112019e560f99b289ca74528fb80943445c", "patch": "@@ -2832,7 +2832,11 @@ Gogo::call_builtin(tree* pdecl, source_location location, const char* name,\n       types[i] = va_arg(ap, tree);\n       args[i] = va_arg(ap, tree);\n       if (types[i] == error_mark_node || args[i] == error_mark_node)\n-\treturn error_mark_node;\n+\t{\n+\t  delete[] types;\n+\t  delete[] args;\n+\t  return error_mark_node;\n+\t}\n     }\n   va_end(ap);\n "}, {"sha": "07ac01a44ba5a4d1a875d3e96f7350df482fc2ee", "filename": "gcc/go/gofrontend/import-archive.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6452b112019e560f99b289ca74528fb80943445c/gcc%2Fgo%2Fgofrontend%2Fimport-archive.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6452b112019e560f99b289ca74528fb80943445c/gcc%2Fgo%2Fgofrontend%2Fimport-archive.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport-archive.cc?ref=6452b112019e560f99b289ca74528fb80943445c", "patch": "@@ -180,16 +180,16 @@ Archive_file::initialize()\n     }\n   if (filename == \"/\")\n     {\n-      char* buf = new char[size];\n-      if (::read(this->fd_, buf, size) != size)\n+      char* rdbuf = new char[size];\n+      if (::read(this->fd_, rdbuf, size) != size)\n \t{\n \t  error_at(this->location_, \"%s: could not read extended names\",\n \t\t   filename.c_str());\n-\t  delete buf;\n+\t  delete[] rdbuf;\n \t  return false;\n \t}\n-      this->extended_names_.assign(buf, size);\n-      delete buf;\n+      this->extended_names_.assign(rdbuf, size);\n+      delete[] rdbuf;\n     }\n \n   return true;"}, {"sha": "ec27aba4d66734a446283078bacee807f073ef1f", "filename": "gcc/go/gofrontend/import.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6452b112019e560f99b289ca74528fb80943445c/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6452b112019e560f99b289ca74528fb80943445c/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.cc?ref=6452b112019e560f99b289ca74528fb80943445c", "patch": "@@ -244,11 +244,13 @@ Import::find_object_export_data(const std::string& filename,\n   if (c < 0)\n     {\n       error_at(location, \"read %s failed: %m\", filename.c_str());\n+      delete[] buf;\n       return NULL;\n     }\n   if (c < sec_length)\n     {\n       error_at(location, \"%s: short read\", filename.c_str());\n+      delete[] buf;\n       return NULL;\n     }\n "}]}