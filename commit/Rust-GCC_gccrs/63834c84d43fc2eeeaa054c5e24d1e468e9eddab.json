{"sha": "63834c84d43fc2eeeaa054c5e24d1e468e9eddab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM4MzRjODRkNDNmYzJlZWVhYTA1NGM1ZTI0ZDFlNDY4ZTllZGRhYg==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-07-19T09:19:30Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-08-04T15:58:26Z"}, "message": "aarch64: Don't include vec_select high-half in SIMD multiply cost\n\nThe Neon multiply/multiply-accumulate/multiply-subtract instructions\ncan select the top or bottom half of the operand registers. This\nselection does not change the cost of the underlying instruction and\nthis should be reflected by the RTL cost function.\n\nThis patch adds RTL tree traversal in the Neon multiply cost function\nto match vec_select high-half of its operands. This traversal\nprevents the cost of the vec_select from being added into the cost of\nthe multiply - meaning that these instructions can now be emitted in\nthe combine pass as they are no longer deemed prohibitively\nexpensive.\n\ngcc/ChangeLog:\n\n2021-07-19  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64.c (aarch64_strip_extend_vec_half):\n\tDefine.\n\t(aarch64_rtx_mult_cost): Traverse RTL tree to prevent cost of\n\tvec_select high-half from being added into Neon multiply\n\tcost.\n\t* rtlanal.c (vec_series_highpart_p): Define.\n\t* rtlanal.h (vec_series_highpart_p): Declare.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/vmul_high_cost.c: New test.", "tree": {"sha": "ea722026fde334209daef1e4740b81cfb4b17ebd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea722026fde334209daef1e4740b81cfb4b17ebd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63834c84d43fc2eeeaa054c5e24d1e468e9eddab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63834c84d43fc2eeeaa054c5e24d1e468e9eddab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63834c84d43fc2eeeaa054c5e24d1e468e9eddab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63834c84d43fc2eeeaa054c5e24d1e468e9eddab/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d65c9d25199264bc8909018df1b0dca71c0b32d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d65c9d25199264bc8909018df1b0dca71c0b32d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d65c9d25199264bc8909018df1b0dca71c0b32d"}], "stats": {"total": 130, "additions": 130, "deletions": 0}, "files": [{"sha": "e02cbcbcb381d22c7ef9c03c7fd45748434f7692", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63834c84d43fc2eeeaa054c5e24d1e468e9eddab/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63834c84d43fc2eeeaa054c5e24d1e468e9eddab/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=63834c84d43fc2eeeaa054c5e24d1e468e9eddab", "patch": "@@ -78,6 +78,7 @@\n #include \"gimple-pretty-print.h\"\n #include \"tree-ssa-loop-niter.h\"\n #include \"fractional-cost.h\"\n+#include \"rtlanal.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -12046,6 +12047,22 @@ aarch64_strip_extend (rtx x, bool strip_shift)\n   return x;\n }\n \n+/* Helper function for rtx cost calculation. Strip extension as well as any\n+   inner VEC_SELECT high-half from X. Returns the inner vector operand if\n+   successful, or the original expression on failure.  */\n+static rtx\n+aarch64_strip_extend_vec_half (rtx x)\n+{\n+  if (GET_CODE (x) == ZERO_EXTEND || GET_CODE (x) == SIGN_EXTEND)\n+    {\n+      x = XEXP (x, 0);\n+      if (GET_CODE (x) == VEC_SELECT\n+\t  && vec_series_highpart_p (GET_MODE (x), GET_MODE (XEXP (x, 0)),\n+\t\t\t\t    XEXP (x, 1)))\n+\tx = XEXP (x, 0);\n+    }\n+  return x;\n+}\n \n /* Helper function for rtx cost calculation. Strip VEC_DUPLICATE as well as\n    any subsequent extend and VEC_SELECT from X. Returns the inner scalar\n@@ -12133,6 +12150,11 @@ aarch64_rtx_mult_cost (rtx x, enum rtx_code code, int outer, bool speed)\n       unsigned int vec_flags = aarch64_classify_vector_mode (mode);\n       if (vec_flags & VEC_ADVSIMD)\n \t{\n+\t  /* The select-operand-high-half versions of the instruction have the\n+\t     same cost as the three vector version - don't add the costs of the\n+\t     extension or selection into the costs of the multiply.  */\n+\t  op0 = aarch64_strip_extend_vec_half (op0);\n+\t  op1 = aarch64_strip_extend_vec_half (op1);\n \t  /* The by-element versions of the instruction have the same costs as\n \t     the normal 3-vector version.  We make an assumption that the input\n \t     to the VEC_DUPLICATE is already on the FP & SIMD side.  This means"}, {"sha": "d37f7789b2051fd59abddfda0c8a0fdccaa9f1dc", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63834c84d43fc2eeeaa054c5e24d1e468e9eddab/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63834c84d43fc2eeeaa054c5e24d1e468e9eddab/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=63834c84d43fc2eeeaa054c5e24d1e468e9eddab", "patch": "@@ -6953,6 +6953,25 @@ register_asm_p (const_rtx x)\n \t  && DECL_REGISTER (REG_EXPR (x)));\n }\n \n+/* Return true if, for all OP of mode OP_MODE:\n+\n+     (vec_select:RESULT_MODE OP SEL)\n+\n+   is equivalent to the highpart RESULT_MODE of OP.  */\n+\n+bool\n+vec_series_highpart_p (machine_mode result_mode, machine_mode op_mode, rtx sel)\n+{\n+  int nunits;\n+  if (GET_MODE_NUNITS (op_mode).is_constant (&nunits)\n+      && targetm.can_change_mode_class (op_mode, result_mode, ALL_REGS))\n+    {\n+      int offset = BYTES_BIG_ENDIAN ? 0 : nunits - XVECLEN (sel, 0);\n+      return rtvec_series_p (XVEC (sel, 0), offset);\n+    }\n+  return false;\n+}\n+\n /* Return true if, for all OP of mode OP_MODE:\n \n      (vec_select:RESULT_MODE OP SEL)"}, {"sha": "542dc7898bead27d3da89e5138c49563ba226eae", "filename": "gcc/rtlanal.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63834c84d43fc2eeeaa054c5e24d1e468e9eddab/gcc%2Frtlanal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63834c84d43fc2eeeaa054c5e24d1e468e9eddab/gcc%2Frtlanal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.h?ref=63834c84d43fc2eeeaa054c5e24d1e468e9eddab", "patch": "@@ -331,6 +331,10 @@ inline vec_rtx_properties_base::~vec_rtx_properties_base ()\n    collecting the references a second time.  */\n using vec_rtx_properties = growing_rtx_properties<vec_rtx_properties_base>;\n \n+bool\n+vec_series_highpart_p (machine_mode result_mode, machine_mode op_mode,\n+\t\t       rtx sel);\n+\n bool\n vec_series_lowpart_p (machine_mode result_mode, machine_mode op_mode, rtx sel);\n "}, {"sha": "ecc02e652a4ba40e2fd68154ca8be5d322f43468", "filename": "gcc/testsuite/gcc.target/aarch64/vmul_high_cost.c", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63834c84d43fc2eeeaa054c5e24d1e468e9eddab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvmul_high_cost.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63834c84d43fc2eeeaa054c5e24d1e468e9eddab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvmul_high_cost.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvmul_high_cost.c?ref=63834c84d43fc2eeeaa054c5e24d1e468e9eddab", "patch": "@@ -0,0 +1,85 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+#include <arm_neon.h>\n+\n+#define TEST_MULL_VEC(name, rettype, intype, ts, rs) \\\n+  rettype test_ ## name ## _ ## ts (intype a, intype b, intype c) \\\n+\t{ \\\n+\t\trettype t0 = name ## _ ## ts (vget_high_ ## ts (a), \\\n+\t\t\t\t\t      vget_high_ ## ts (c)); \\\n+\t\trettype t1 = name ## _ ## ts (vget_high_ ## ts (b), \\\n+\t\t\t\t\t      vget_high_ ## ts (c)); \\\n+\t\treturn vqaddq ## _ ## rs (t0, t1); \\\n+\t}\n+\n+TEST_MULL_VEC (vmull, int16x8_t, int8x16_t, s8, s16)\n+TEST_MULL_VEC (vmull, uint16x8_t, uint8x16_t, u8, u16)\n+TEST_MULL_VEC (vmull, int32x4_t, int16x8_t, s16, s32)\n+TEST_MULL_VEC (vmull, uint32x4_t, uint16x8_t, u16, u32)\n+TEST_MULL_VEC (vmull, int64x2_t, int32x4_t, s32, s64)\n+TEST_MULL_VEC (vmull, uint64x2_t, uint32x4_t, u32, u64)\n+\n+TEST_MULL_VEC (vqdmull, int32x4_t, int16x8_t, s16, s32)\n+TEST_MULL_VEC (vqdmull, int64x2_t, int32x4_t, s32, s64)\n+\n+#define TEST_MULL_N(name, rettype, intype, ts, rs) \\\n+  rettype test_ ## name ## _ ## ts (intype a, intype b, intype c) \\\n+\t{ \\\n+\t\trettype t0 = name ## _ ## ts (vget_high_ ## ts (a), b[1]); \\\n+\t\trettype t1 = name ## _ ## ts (vget_high_ ## ts (a), c[1]); \\\n+\t\treturn vqaddq ## _ ## rs (t0, t1); \\\n+\t}\n+\n+TEST_MULL_N (vmull_n, int32x4_t, int16x8_t, s16, s32)\n+TEST_MULL_N (vmull_n, uint32x4_t, uint16x8_t, u16, u32)\n+TEST_MULL_N (vmull_n, int64x2_t, int32x4_t, s32, s64)\n+TEST_MULL_N (vmull_n, uint64x2_t, uint32x4_t, u32, u64)\n+\n+TEST_MULL_N (vqdmull_n, int32x4_t, int16x8_t, s16, s32)\n+TEST_MULL_N (vqdmull_n, int64x2_t, int32x4_t, s32, s64)\n+\n+#define TEST_MLXL_VEC(name, rettype, intype, ts) \\\n+  rettype test_ ## name ## _ ## ts (rettype acc, intype a, intype b, \\\n+\t\t\t\t    intype c) \\\n+\t{ \\\n+\t\tacc = name ## _ ## ts (acc, vget_high_ ## ts (a), \\\n+\t\t\t\t\t    vget_high_ ## ts (b)); \\\n+\t\treturn name ## _ ## ts (acc, vget_high_ ## ts (a), \\\n+\t\t\t\t\t     vget_high_ ## ts (c)); \\\n+\t}\n+\n+TEST_MLXL_VEC (vmlal, int16x8_t, int8x16_t, s8)\n+TEST_MLXL_VEC (vmlal, uint16x8_t, uint8x16_t, u8)\n+TEST_MLXL_VEC (vmlal, int32x4_t, int16x8_t, s16)\n+TEST_MLXL_VEC (vmlal, uint32x4_t, uint16x8_t, u16)\n+\n+TEST_MLXL_VEC (vmlsl, int16x8_t, int8x16_t, s8)\n+TEST_MLXL_VEC (vmlsl, uint16x8_t, uint8x16_t, u8)\n+TEST_MLXL_VEC (vmlsl, int32x4_t, int16x8_t, s16)\n+TEST_MLXL_VEC (vmlsl, uint32x4_t, uint16x8_t, u16)\n+\n+#define TEST_MLXL_N(name, rettype, intype, ts) \\\n+  rettype test_ ## name ## _ ## ts (rettype acc, intype a, intype b) \\\n+\t{ \\\n+\t\tacc = name ## _ ## ts (acc, vget_high_ ## ts (a), b[1]); \\\n+\t\treturn name ## _ ## ts (acc, vget_high_ ## ts (a), b[1]); \\\n+\t}\n+\n+TEST_MLXL_N (vmlal_n, int32x4_t, int16x8_t, s16)\n+TEST_MLXL_N (vmlal_n, uint32x4_t, uint16x8_t, u16)\n+TEST_MLXL_N (vmlal_n, int64x2_t, int32x4_t, s32)\n+TEST_MLXL_N (vmlal_n, uint64x2_t, uint32x4_t, u32)\n+\n+TEST_MLXL_N (vmlsl_n, int32x4_t, int16x8_t, s16)\n+TEST_MLXL_N (vmlsl_n, uint32x4_t, uint16x8_t, u16)\n+TEST_MLXL_N (vmlsl_n, int64x2_t, int32x4_t, s32)\n+TEST_MLXL_N (vmlsl_n, uint64x2_t, uint32x4_t, u32)\n+\n+TEST_MLXL_N (vqdmlal_n, int32x4_t, int16x8_t, s16)\n+TEST_MLXL_N (vqdmlal_n, int64x2_t, int32x4_t, s32)\n+\n+TEST_MLXL_N (vqdmlsl_n, int32x4_t, int16x8_t, s16)\n+TEST_MLXL_N (vqdmlsl_n, int64x2_t, int32x4_t, s32)\n+\n+/* { dg-final { scan-assembler-not \"dup\\\\t\" } } */"}]}