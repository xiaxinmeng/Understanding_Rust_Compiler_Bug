{"sha": "c7400e2fecfd0cc44c553517a59f8a70951cf6cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc0MDBlMmZlY2ZkMGNjNDRjNTUzNTE3YTU5ZjhhNzA5NTFjZjZjZg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-02-18T09:46:59Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-02-18T09:46:59Z"}, "message": "re PR sanitizer/65081 (-fsanitize=object-size fails with simple pointer arithm)\n\n\tPR sanitizer/65081\n\t* ubsan.c (OBJSZ_MAX_OFFSET): Define.\n\t(ubsan_expand_objsize_ifn): Don't emit run-time check if the offset\n\tis in range [-16K, -1].  Don't issue run-time error if\n\t(ptr > ptr + offset).\n\n\t* c-c++-common/ubsan/pr65081.c: New test.\n\nFrom-SVN: r220784", "tree": {"sha": "c5459558a64da41ec0b46a0be7dff9d59065c89c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5459558a64da41ec0b46a0be7dff9d59065c89c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7400e2fecfd0cc44c553517a59f8a70951cf6cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7400e2fecfd0cc44c553517a59f8a70951cf6cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7400e2fecfd0cc44c553517a59f8a70951cf6cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7400e2fecfd0cc44c553517a59f8a70951cf6cf/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d77052881bc8f8a79f195a3859719c517d5aa9ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d77052881bc8f8a79f195a3859719c517d5aa9ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d77052881bc8f8a79f195a3859719c517d5aa9ad"}], "stats": {"total": 81, "additions": 80, "deletions": 1}, "files": [{"sha": "2b06a25c6e6f4d464671fbf22f9d009a6e004cfb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7400e2fecfd0cc44c553517a59f8a70951cf6cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7400e2fecfd0cc44c553517a59f8a70951cf6cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7400e2fecfd0cc44c553517a59f8a70951cf6cf", "patch": "@@ -1,3 +1,11 @@\n+2015-02-18  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR sanitizer/65081\n+\t* ubsan.c (OBJSZ_MAX_OFFSET): Define.\n+\t(ubsan_expand_objsize_ifn): Don't emit run-time check if the offset\n+\tis in range [-16K, -1].  Don't issue run-time error if\n+\t(ptr > ptr + offset).\n+\n 2015-02-18  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* doc/install.texi (nvptx-*-none): New section."}, {"sha": "b277f57054e9a148e2639c3a19c8560ed0ca2177", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7400e2fecfd0cc44c553517a59f8a70951cf6cf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7400e2fecfd0cc44c553517a59f8a70951cf6cf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c7400e2fecfd0cc44c553517a59f8a70951cf6cf", "patch": "@@ -1,3 +1,8 @@\n+2015-02-18  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR sanitizer/65081\n+\t* c-c++-common/ubsan/pr65081.c: New test.\n+\n 2015-02-17  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* gcc.target/sh/sh.exp (check_effective_target_sh1): New."}, {"sha": "a1123fd37a023b988124ac773f2e21f18094c790", "filename": "gcc/testsuite/c-c++-common/ubsan/pr65081.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7400e2fecfd0cc44c553517a59f8a70951cf6cf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr65081.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7400e2fecfd0cc44c553517a59f8a70951cf6cf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr65081.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr65081.c?ref=c7400e2fecfd0cc44c553517a59f8a70951cf6cf", "patch": "@@ -0,0 +1,26 @@\n+/* PR sanitizer/65081 */\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O2\" } } */\n+/* { dg-options \"-fsanitize=object-size -fno-sanitize-recover=object-size\" } */\n+\n+struct S\n+{\n+  int a;\n+  char p[1];\n+};\n+\n+struct S b;\n+\n+struct S *\n+foo ()\n+{\n+  struct S *i = &b;\n+  return i + 1;\n+}\n+\n+int\n+main (void)\n+{\n+  struct S *i = foo () - 1;\n+  i->a = 1;\n+}"}, {"sha": "38d98cfd4e0a7a01fa8a1baaa6a5d435295d40a7", "filename": "gcc/ubsan.c", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7400e2fecfd0cc44c553517a59f8a70951cf6cf/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7400e2fecfd0cc44c553517a59f8a70951cf6cf/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=c7400e2fecfd0cc44c553517a59f8a70951cf6cf", "patch": "@@ -920,6 +920,8 @@ ubsan_expand_null_ifn (gimple_stmt_iterator *gsip)\n   return false;\n }\n \n+#define OBJSZ_MAX_OFFSET (1024 * 16)\n+\n /* Expand UBSAN_OBJECT_SIZE internal call.  */\n \n bool\n@@ -941,6 +943,10 @@ ubsan_expand_objsize_ifn (gimple_stmt_iterator *gsi)\n       || integer_all_onesp (size))\n     /* Yes, __builtin_object_size couldn't determine the\n        object size.  */;\n+  else if (TREE_CODE (offset) == INTEGER_CST\n+\t   && wi::ges_p (wi::to_widest (offset), -OBJSZ_MAX_OFFSET)\n+\t   && wi::les_p (wi::to_widest (offset), -1))\n+    /* The offset is in range [-16K, -1].  */;\n   else\n     {\n       /* if (offset > objsize) */\n@@ -952,8 +958,42 @@ ubsan_expand_objsize_ifn (gimple_stmt_iterator *gsi)\n       gimple_set_location (g, loc);\n       gsi_insert_after (&cond_insert_point, g, GSI_NEW_STMT);\n \n+      /* If the offset is small enough, we don't need the second\n+\t run-time check.  */\n+      if (TREE_CODE (offset) == INTEGER_CST\n+\t  && wi::ges_p (wi::to_widest (offset), 0)\n+\t  && wi::les_p (wi::to_widest (offset), OBJSZ_MAX_OFFSET))\n+\t*gsi = gsi_after_labels (then_bb);\n+      else\n+\t{\n+\t  /* Don't issue run-time error if (ptr > ptr + offset).  That\n+\t     may happen when computing a POINTER_PLUS_EXPR.  */\n+\t  basic_block then2_bb, fallthru2_bb;\n+\n+\t  gimple_stmt_iterator gsi2 = gsi_after_labels (then_bb);\n+\t  cond_insert_point = create_cond_insert_point (&gsi2, false, false,\n+\t\t\t\t\t\t\ttrue, &then2_bb,\n+\t\t\t\t\t\t\t&fallthru2_bb);\n+\t  /* Convert the pointer to an integer type.  */\n+\t  tree p = make_ssa_name (pointer_sized_int_node);\n+\t  g = gimple_build_assign (p, NOP_EXPR, ptr);\n+\t  gimple_set_location (g, loc);\n+\t  gsi_insert_before (&cond_insert_point, g, GSI_NEW_STMT);\n+\t  p = gimple_assign_lhs (g);\n+\t  /* Compute ptr + offset.  */\n+\t  g = gimple_build_assign (make_ssa_name (pointer_sized_int_node),\n+\t\t\t\t   PLUS_EXPR, p, offset);\n+\t  gimple_set_location (g, loc);\n+\t  gsi_insert_after (&cond_insert_point, g, GSI_NEW_STMT);\n+\t  /* Now build the conditional and put it into the IR.  */\n+\t  g = gimple_build_cond (LE_EXPR, p, gimple_assign_lhs (g),\n+\t\t\t\t NULL_TREE, NULL_TREE);\n+\t  gimple_set_location (g, loc);\n+\t  gsi_insert_after (&cond_insert_point, g, GSI_NEW_STMT);\n+\t  *gsi = gsi_after_labels (then2_bb);\n+\t}\n+\n       /* Generate __ubsan_handle_type_mismatch call.  */\n-      *gsi = gsi_after_labels (then_bb);\n       if (flag_sanitize_undefined_trap_on_error)\n \tg = gimple_build_call (builtin_decl_explicit (BUILT_IN_TRAP), 0);\n       else"}]}