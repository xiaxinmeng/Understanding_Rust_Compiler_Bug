{"sha": "a5a8a4e61565a2a66391e29eb80813c581b7dc52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVhOGE0ZTYxNTY1YTJhNjYzOTFlMjllYjgwODEzYzU4MWI3ZGM1Mg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-07-22T12:25:11Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-07-22T14:10:29Z"}, "message": "libstdc++: Constrain reverse_iterator and move_iterator conversions [LWG 3435]\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/stl_iterator.h (reverse_iterator): Constrain\n\tconverting constructor and converting assignment operator.\n\tAccess source iterator's data member directly instead of\n\tcalling base().\n\t(move_iterator): Likewise.\n\t* testsuite/24_iterators/move_iterator/dr3435.cc: New test.\n\t* testsuite/24_iterators/reverse_iterator/dr3435.cc: New test.", "tree": {"sha": "72a3145f8cb58041ff90f27c5546aa3a967bb19c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72a3145f8cb58041ff90f27c5546aa3a967bb19c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5a8a4e61565a2a66391e29eb80813c581b7dc52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5a8a4e61565a2a66391e29eb80813c581b7dc52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5a8a4e61565a2a66391e29eb80813c581b7dc52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5a8a4e61565a2a66391e29eb80813c581b7dc52/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "259c3965b1ba04f7ee022846af6173fb1c343bc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/259c3965b1ba04f7ee022846af6173fb1c343bc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/259c3965b1ba04f7ee022846af6173fb1c343bc8"}], "stats": {"total": 128, "additions": 125, "deletions": 3}, "files": [{"sha": "60bb40a659f3c8d6f2f57e53be29b4e3fee93fe7", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 52, "deletions": 3, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a8a4e61565a2a66391e29eb80813c581b7dc52/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a8a4e61565a2a66391e29eb80813c581b7dc52/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=a5a8a4e61565a2a66391e29eb80813c581b7dc52", "patch": "@@ -129,6 +129,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t      typename iterator_traits<_Iterator>::pointer,\n                       typename iterator_traits<_Iterator>::reference>\n     {\n+#if __cplusplus >= 201103L\n+      template<typename _Iter>\n+\tfriend class reverse_iterator;\n+#endif\n+\n+#if __cpp_lib_concepts\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 3435. three_way_comparable_with<reverse_iterator<int*>, [...]>\n+      template<typename _Iter>\n+\tstatic constexpr bool __convertible = !is_same_v<_Iter, _Iterator>\n+\t    && convertible_to<const _Iter&, _Iterator>;\n+#endif\n+\n     protected:\n       _Iterator current;\n \n@@ -182,9 +195,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  underlying %iterator can be converted to the type of @c current.\n       */\n       template<typename _Iter>\n+#if __cpp_lib_concepts\n+\trequires __convertible<_Iter>\n+#endif\n \t_GLIBCXX17_CONSTEXPR\n         reverse_iterator(const reverse_iterator<_Iter>& __x)\n-\t: current(__x.base()) { }\n+\t: current(__x.current) { }\n+\n+#if __cplusplus >= 201103L\n+      template<typename _Iter>\n+#if __cpp_lib_concepts\n+\trequires __convertible<_Iter>\n+\t  && assignable_from<_Iterator&, const _Iter&>\n+#endif\n+\t_GLIBCXX17_CONSTEXPR\n+\treverse_iterator&\n+\toperator=(const reverse_iterator<_Iter>& __x)\n+\t{\n+\t  current = __x.current;\n+\t  return *this;\n+\t}\n+#endif\n \n       /**\n        *  @return  @c current, the %iterator used for underlying work.\n@@ -1270,6 +1301,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using __base_ref = typename __traits_type::reference;\n #endif\n \n+      template<typename _Iter2>\n+\tfriend class move_iterator;\n+\n+#if __cpp_lib_concepts\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 3435. three_way_comparable_with<reverse_iterator<int*>, [...]>\n+      template<typename _Iter2>\n+\tstatic constexpr bool __convertible = !is_same_v<_Iter2, _Iterator>\n+\t    && convertible_to<const _Iter2&, _Iterator>;\n+#endif\n+\n     public:\n       using iterator_type = _Iterator;\n \n@@ -1303,15 +1345,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _M_current(std::move(__i)) { }\n \n       template<typename _Iter>\n+#if __cpp_lib_concepts\n+\trequires __convertible<_Iter>\n+#endif\n \t_GLIBCXX17_CONSTEXPR\n \tmove_iterator(const move_iterator<_Iter>& __i)\n-\t: _M_current(__i.base()) { }\n+\t: _M_current(__i._M_current) { }\n \n       template<typename _Iter>\n+#if __cpp_lib_concepts\n+\trequires __convertible<_Iter>\n+\t  && assignable_from<_Iterator&, const _Iter&>\n+#endif\n \t_GLIBCXX17_CONSTEXPR\n \tmove_iterator& operator=(const move_iterator<_Iter>& __i)\n \t{\n-\t  _M_current = __i.base();\n+\t  _M_current = __i._M_current;\n \t  return *this;\n \t}\n "}, {"sha": "170d4977df1fb5bcf696eaca4e644dab6ada6c3e", "filename": "libstdc++-v3/testsuite/24_iterators/move_iterator/dr3435.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a8a4e61565a2a66391e29eb80813c581b7dc52/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fdr3435.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a8a4e61565a2a66391e29eb80813c581b7dc52/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fdr3435.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fdr3435.cc?ref=a5a8a4e61565a2a66391e29eb80813c581b7dc52", "patch": "@@ -0,0 +1,37 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <iterator>\n+#include <compare>\n+\n+// LWG 3435. three_way_comparable_with<reverse_iterator<int*>, reverse_iterator<const int*>>\n+// and\n+// LWG 3265. move_iterator's conversions are more broken after P1207\n+\n+using RI = std::move_iterator<int*>;\n+using CRI = std::move_iterator<const int*>;\n+\n+static_assert( std::three_way_comparable_with<RI, CRI> );\n+\n+static_assert( std::is_convertible_v<const RI&, CRI> );\n+static_assert( ! std::is_convertible_v<const CRI&, RI> );\n+\n+static_assert( std::is_assignable_v<CRI, const RI&> );\n+static_assert( ! std::is_assignable_v<RI, const CRI&> );"}, {"sha": "77b0f39c535a020ad0b4aaef9cb1e41d71c16c0e", "filename": "libstdc++-v3/testsuite/24_iterators/reverse_iterator/dr3435.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a8a4e61565a2a66391e29eb80813c581b7dc52/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Fdr3435.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a8a4e61565a2a66391e29eb80813c581b7dc52/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Fdr3435.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Fdr3435.cc?ref=a5a8a4e61565a2a66391e29eb80813c581b7dc52", "patch": "@@ -0,0 +1,36 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <iterator>\n+#include <compare>\n+\n+// LWG 3435.\n+// three_way_comparable_with<reverse_iterator<int*>, reverse_iterator<const int*>>\n+\n+using RI = std::reverse_iterator<int*>;\n+using CRI = std::reverse_iterator<const int*>;\n+\n+static_assert( std::three_way_comparable_with<RI, CRI> );\n+\n+static_assert( std::is_convertible_v<const RI&, CRI> );\n+static_assert( ! std::is_convertible_v<const CRI&, RI> );\n+\n+static_assert( std::is_assignable_v<CRI, const RI&> );\n+static_assert( ! std::is_assignable_v<RI, const CRI&> );"}]}