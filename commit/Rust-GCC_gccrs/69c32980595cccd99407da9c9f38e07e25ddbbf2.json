{"sha": "69c32980595cccd99407da9c9f38e07e25ddbbf2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjljMzI5ODA1OTVjY2NkOTk0MDdkYTljOWYzOGUwN2UyNWRkYmJmMg==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2011-06-07T21:20:42Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2011-06-07T21:20:42Z"}, "message": "In libobjc/: 2011-06-07 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn libobjc/:\n2011-06-07  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* class.c (objc_next_class): Removed.\n\t(class_pose_as): Removed.\n\t(CLASSOF): Removed.\n\t(class_table_replace): Removed.\n\t(objc_lookup_class): Removed.\n\nFrom-SVN: r174767", "tree": {"sha": "0fd1c1bfd2dc905722987998cc94ec7d35a73b3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fd1c1bfd2dc905722987998cc94ec7d35a73b3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69c32980595cccd99407da9c9f38e07e25ddbbf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69c32980595cccd99407da9c9f38e07e25ddbbf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69c32980595cccd99407da9c9f38e07e25ddbbf2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69c32980595cccd99407da9c9f38e07e25ddbbf2/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ac07a61dda48ef1d9564d9a40d04f0e938bdd888", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac07a61dda48ef1d9564d9a40d04f0e938bdd888", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac07a61dda48ef1d9564d9a40d04f0e938bdd888"}], "stats": {"total": 160, "additions": 9, "deletions": 151}, "files": [{"sha": "b885f9d735c74c5da23e11d206a4db118fbb4987", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69c32980595cccd99407da9c9f38e07e25ddbbf2/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69c32980595cccd99407da9c9f38e07e25ddbbf2/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=69c32980595cccd99407da9c9f38e07e25ddbbf2", "patch": "@@ -1,3 +1,11 @@\n+2011-06-07  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* class.c (objc_next_class): Removed.\n+\t(class_pose_as): Removed.\n+\t(CLASSOF): Removed.\n+\t(class_table_replace): Removed.\n+\t(objc_lookup_class): Removed.\n+\n 2011-06-07  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tRemoved the Traditional Objective-C runtime public API."}, {"sha": "3fe3561d2acceef10c29f18663d6b2de4d70e9c0", "filename": "libobjc/class.c", "status": "modified", "additions": 1, "deletions": 151, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69c32980595cccd99407da9c9f38e07e25ddbbf2/libobjc%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69c32980595cccd99407da9c9f38e07e25ddbbf2/libobjc%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fclass.c?ref=69c32980595cccd99407da9c9f38e07e25ddbbf2", "patch": "@@ -203,41 +203,6 @@ class_table_insert (const char *class_name, Class class_pointer)\n   objc_mutex_unlock (__class_table_lock);\n }\n \n-/* Replace a class in the table (used only by poseAs:).  */\n-static void \n-class_table_replace (Class old_class_pointer, Class new_class_pointer)\n-{\n-  int hash;\n-  class_node_ptr node;\n-\n-  objc_mutex_lock (__class_table_lock);\n-  \n-  hash = 0;\n-  node = class_table_array[hash];\n-  \n-  while (hash < CLASS_TABLE_SIZE)\n-    {\n-      if (node == NULL)\n-        {\n-          hash++;\n-          if (hash < CLASS_TABLE_SIZE)\n-\t    node = class_table_array[hash];\n-        }\n-      else\n-        {\n-          Class class1 = node->pointer;\n-\n-          if (class1 == old_class_pointer)\n-\t    node->pointer = new_class_pointer;\n-\n-          node = node->next;\n-        }\n-    }\n-\n-  objc_mutex_unlock (__class_table_lock);\n-}\n-\n-\n /* Get a class from the table.  This does not need mutex protection.\n    Currently, this function is called each time you call a static\n    method, this is why it must be very fast.  */\n@@ -760,16 +725,6 @@ objc_disposeClassPair (Class class_)\n   objc_free (class_);\n }\n \n-/* Traditional GNU Objective-C Runtime API.  */\n-/* Get the class object for the class named NAME.  If NAME does not\n-   identify a known class, the hook _objc_lookup_class is called.  If\n-   this fails, nil is returned.  */\n-Class\n-objc_lookup_class (const char *name)\n-{\n-  return objc_getClass (name);\n-}\n-\n /* Traditional GNU Objective-C Runtime API.  Important: this method is\n    called automatically by the compiler while messaging (if using the\n    traditional ABI), so it is worth keeping it fast; don't make it\n@@ -802,38 +757,13 @@ objc_get_class (const char *name)\n   return 0;\n }\n \n+/* This is used by the compiler too.  */\n Class\n objc_get_meta_class (const char *name)\n {\n   return objc_get_class (name)->class_pointer;\n }\n \n-/* This function provides a way to enumerate all the classes in the\n-   executable.  Pass *ENUM_STATE == NULL to start the enumeration.  The\n-   function will return 0 when there are no more classes.  \n-   For example: \n-       id class; \n-       void *es = NULL;\n-       while ((class = objc_next_class (&es)))\n-         ... do something with class; \n-*/\n-Class\n-objc_next_class (void **enum_state)\n-{\n-  Class class;\n-\n-  objc_mutex_lock (__objc_runtime_mutex);\n-  \n-  /* Make sure the table is there.  */\n-  assert (__class_table_lock);\n-\n-  class = class_table_next ((struct class_table_enumerator **) enum_state);\n-\n-  objc_mutex_unlock (__objc_runtime_mutex);\n-  \n-  return class;\n-}\n-\n /* This is used when the implementation of a method changes.  It goes\n    through all classes, looking for the ones that have these methods\n    (either method_a or method_b; method_b can be NULL), and reloads\n@@ -1035,83 +965,3 @@ class_getInstanceSize (Class class_)\n   return class_->instance_size;\n }\n \n-#define CLASSOF(c) ((c)->class_pointer)\n-\n-Class\n-class_pose_as (Class impostor, Class super_class)\n-{\n-  if (! CLS_ISRESOLV (impostor))\n-    __objc_resolve_class_links ();\n-\n-  /* Preconditions */\n-  assert (impostor);\n-  assert (super_class);\n-  assert (impostor->super_class == super_class);\n-  assert (CLS_ISCLASS (impostor));\n-  assert (CLS_ISCLASS (super_class));\n-  assert (impostor->instance_size == super_class->instance_size);\n-\n-  {\n-    Class *subclass = &(super_class->subclass_list);\n-\n-    /* Move subclasses of super_class to impostor.  */\n-    while (*subclass)\n-      {\n-        Class nextSub = (*subclass)->sibling_class;\n-\n-        if (*subclass != impostor)\n-          {\n-            Class sub = *subclass;\n-\n-            /* Classes */\n-            sub->sibling_class = impostor->subclass_list;\n-            sub->super_class = impostor;\n-            impostor->subclass_list = sub;\n-\n-            /* It will happen that SUB is not a class object if it is\n-               the top of the meta class hierarchy chain (root\n-               meta-class objects inherit their class object).  If\n-               that is the case... don't mess with the meta-meta\n-               class.  */\n-            if (CLS_ISCLASS (sub))\n-              {\n-                /* Meta classes */\n-                CLASSOF (sub)->sibling_class = \n-                  CLASSOF (impostor)->subclass_list;\n-                CLASSOF (sub)->super_class = CLASSOF (impostor);\n-                CLASSOF (impostor)->subclass_list = CLASSOF (sub);\n-              }\n-          }\n-\n-        *subclass = nextSub;\n-      }\n-\n-    /* Set subclasses of superclass to be impostor only.  */\n-    super_class->subclass_list = impostor;\n-    CLASSOF (super_class)->subclass_list = CLASSOF (impostor);\n-    \n-    /* Set impostor to have no sibling classes.  */\n-    impostor->sibling_class = 0;\n-    CLASSOF (impostor)->sibling_class = 0;\n-  }\n-  \n-  /* Check relationship of impostor and super_class is kept.  */\n-  assert (impostor->super_class == super_class);\n-  assert (CLASSOF (impostor)->super_class == CLASSOF (super_class));\n-\n-  /* This is how to update the lookup table.  Regardless of what the\n-     keys of the hashtable is, change all values that are superclass\n-     into impostor.  */\n-\n-  objc_mutex_lock (__objc_runtime_mutex);\n-\n-  class_table_replace (super_class, impostor);\n-\n-  objc_mutex_unlock (__objc_runtime_mutex);\n-\n-  /* Next, we update the dispatch tables...  */\n-  __objc_update_dispatch_table_for_class (CLASSOF (impostor));\n-  __objc_update_dispatch_table_for_class (impostor);\n-\n-  return impostor;\n-}"}]}