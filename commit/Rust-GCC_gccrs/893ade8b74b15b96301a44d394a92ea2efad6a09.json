{"sha": "893ade8b74b15b96301a44d394a92ea2efad6a09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkzYWRlOGI3NGIxNWI5NjMwMWE0NGQzOTRhOTJlYTJlZmFkNmEwOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-10-22T10:22:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-10-22T10:22:48Z"}, "message": "re PR bootstrap/87640 (internal compiler error: in check, at tree-vrp.c:155)\n\n2018-10-22  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/87640\n\t* tree-vrp.c (set_value_range_with_overflow): Decompose\n\tincomplete result.\n\t(extract_range_from_binary_expr_1): Adjust.\n\n\t* gcc.dg/torture/pr87640.c: New testcase.\n\nFrom-SVN: r265375", "tree": {"sha": "3f37c11528efeb583ac9db01d001af22d08398f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f37c11528efeb583ac9db01d001af22d08398f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/893ade8b74b15b96301a44d394a92ea2efad6a09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/893ade8b74b15b96301a44d394a92ea2efad6a09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/893ade8b74b15b96301a44d394a92ea2efad6a09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/893ade8b74b15b96301a44d394a92ea2efad6a09/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9470d3ecf371c72817599fe66fe97f469bf4627c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9470d3ecf371c72817599fe66fe97f469bf4627c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9470d3ecf371c72817599fe66fe97f469bf4627c"}], "stats": {"total": 68, "additions": 47, "deletions": 21}, "files": [{"sha": "1fad1da2e4a29ca86f1dab6fabbc8cdd1ea8d18c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893ade8b74b15b96301a44d394a92ea2efad6a09/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893ade8b74b15b96301a44d394a92ea2efad6a09/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=893ade8b74b15b96301a44d394a92ea2efad6a09", "patch": "@@ -1,3 +1,10 @@\n+2018-10-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/87640\n+\t* tree-vrp.c (set_value_range_with_overflow): Decompose\n+\tincomplete result.\n+\t(extract_range_from_binary_expr_1): Adjust.\n+\n 2018-10-22  Martin Jambor  <mjambor@suse.cz>\n \n \t* tree-eh.h (stmt_could_throw_p): Add function parameter."}, {"sha": "1ca548120a8330668fac987522350add432bd2d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893ade8b74b15b96301a44d394a92ea2efad6a09/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893ade8b74b15b96301a44d394a92ea2efad6a09/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=893ade8b74b15b96301a44d394a92ea2efad6a09", "patch": "@@ -1,3 +1,8 @@\n+2018-10-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/87640\n+\t* gcc.dg/torture/pr87640.c: New testcase.\n+\n 2018-10-22  Ilya Leoshkevich  <iii@linux.ibm.com>\n \n \t* gcc.target/s390/litpool-int.c: New test."}, {"sha": "09bd3b42f344626eae9c30ab78108f29278e8304", "filename": "gcc/testsuite/gcc.dg/torture/pr87640.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893ade8b74b15b96301a44d394a92ea2efad6a09/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr87640.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893ade8b74b15b96301a44d394a92ea2efad6a09/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr87640.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr87640.c?ref=893ade8b74b15b96301a44d394a92ea2efad6a09", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+\n+int main ()\n+{ \n+  unsigned b = 0;\n+  int c, d = -8;\n+  for (; b < 2; b++)\n+    for (c = 1; c; c--)\n+      d++;\n+  return 0;\n+}"}, {"sha": "28b4d566a526c3032f3f96c2d7d9261b1047e205", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893ade8b74b15b96301a44d394a92ea2efad6a09/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893ade8b74b15b96301a44d394a92ea2efad6a09/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=893ade8b74b15b96301a44d394a92ea2efad6a09", "patch": "@@ -1328,7 +1328,7 @@ combine_bound (enum tree_code code, wide_int &wi, wi::overflow_type &ovf,\n    underflow.  +1 indicates overflow.  0 indicates neither.  */\n \n static void\n-set_value_range_with_overflow (value_range &vr,\n+set_value_range_with_overflow (value_range_kind &kind, tree &min, tree &max,\n \t\t\t       tree type,\n \t\t\t       const wide_int &wmin, const wide_int &wmax,\n \t\t\t       wi::overflow_type min_ovf,\n@@ -1341,7 +1341,7 @@ set_value_range_with_overflow (value_range &vr,\n      range covers all values.  */\n   if (prec == 1 && wi::lt_p (wmax, wmin, sgn))\n     {\n-      set_value_range_to_varying (&vr);\n+      kind = VR_VARYING;\n       return;\n     }\n \n@@ -1357,13 +1357,15 @@ set_value_range_with_overflow (value_range &vr,\n \t     the entire range.  We have a similar check at the end of\n \t     extract_range_from_binary_expr_1.  */\n \t  if (wi::gt_p (tmin, tmax, sgn))\n-\t    vr.set_varying ();\n+\t    kind = VR_VARYING;\n \t  else\n-\t    /* No overflow or both overflow or underflow.  The\n-\t       range kind stays VR_RANGE.  */\n-\t    vr = value_range (VR_RANGE,\n-\t\t\t      wide_int_to_tree (type, tmin),\n-\t\t\t      wide_int_to_tree (type, tmax));\n+\t    {\n+\t      kind = VR_RANGE;\n+\t      /* No overflow or both overflow or underflow.  The\n+\t\t range kind stays VR_RANGE.  */\n+\t      min = wide_int_to_tree (type, tmin);\n+\t      max = wide_int_to_tree (type, tmax);\n+\t    }\n \t  return;\n \t}\n       else if ((min_ovf == wi::OVF_UNDERFLOW && max_ovf == wi::OVF_NONE)\n@@ -1384,18 +1386,18 @@ set_value_range_with_overflow (value_range &vr,\n \t     types values.  */\n \t  if (covers || wi::cmp (tmin, tmax, sgn) > 0)\n \t    {\n-\t      set_value_range_to_varying (&vr);\n+\t      kind = VR_VARYING;\n \t      return;\n \t    }\n-\t  vr = value_range (VR_ANTI_RANGE,\n-\t\t\t    wide_int_to_tree (type, tmin),\n-\t\t\t    wide_int_to_tree (type, tmax));\n+\t  kind = VR_ANTI_RANGE;\n+\t  min = wide_int_to_tree (type, tmin);\n+\t  max = wide_int_to_tree (type, tmax);\n \t  return;\n \t}\n       else\n \t{\n \t  /* Other underflow and/or overflow, drop to VR_VARYING.  */\n-\t  set_value_range_to_varying (&vr);\n+\t  kind = VR_VARYING;\n \t  return;\n \t}\n     }\n@@ -1405,7 +1407,7 @@ set_value_range_with_overflow (value_range &vr,\n \t value.  */\n       wide_int type_min = wi::min_value (prec, sgn);\n       wide_int type_max = wi::max_value (prec, sgn);\n-      tree min, max;\n+      kind = VR_RANGE;\n       if (min_ovf == wi::OVF_UNDERFLOW)\n \tmin = wide_int_to_tree (type, type_min);\n       else if (min_ovf == wi::OVF_OVERFLOW)\n@@ -1419,7 +1421,6 @@ set_value_range_with_overflow (value_range &vr,\n \tmax = wide_int_to_tree (type, type_max);\n       else\n \tmax = wide_int_to_tree (type, wmax);\n-      vr = value_range (VR_RANGE, min, max);\n     }\n }\n \n@@ -1676,21 +1677,23 @@ extract_range_from_binary_expr_1 (value_range *vr,\n \t    }\n \n \t  /* Adjust the range for possible overflow.  */\n-\t  set_value_range_with_overflow (*vr, expr_type,\n+\t  min = NULL_TREE;\n+\t  max = NULL_TREE;\n+\t  set_value_range_with_overflow (type, min, max, expr_type,\n \t\t\t\t\t wmin, wmax, min_ovf, max_ovf);\n-\t  if (vr->varying_p ())\n-\t    return;\n+\t  if (type == VR_VARYING)\n+\t    {\n+\t      set_value_range_to_varying (vr);\n+\t      return;\n+\t    }\n \n \t  /* Build the symbolic bounds if needed.  */\n-\t  min = vr->min ();\n-\t  max = vr->max ();\n \t  adjust_symbolic_bound (min, code, expr_type,\n \t\t\t\t sym_min_op0, sym_min_op1,\n \t\t\t\t neg_min_op0, neg_min_op1);\n \t  adjust_symbolic_bound (max, code, expr_type,\n \t\t\t\t sym_max_op0, sym_max_op1,\n \t\t\t\t neg_max_op0, neg_max_op1);\n-\t  type = vr->kind ();\n \t}\n       else\n \t{"}]}