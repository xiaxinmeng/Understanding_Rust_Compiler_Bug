{"sha": "5efaf7b00ee3751680bffd751fa86eed6007c46a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVmYWY3YjAwZWUzNzUxNjgwYmZmZDc1MWZhODZlZWQ2MDA3YzQ2YQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-09-30T16:34:45Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-09-30T16:34:45Z"}, "message": "Warning fixes:\n\n\t* actions.c (id_cmp): Do pointer arithmetic as `long' not `int' to\n \tensure enough bits for calculation.\n\t* ch-tree.h (check_text_length): Remove unused parameter.\n\t* convert.c (display_int_cst): Cast a HOST_WIDE_INT argument to\n\tfunction sprintf into the appropriate type for printing.\n\t* decl.c (print_lang_decl): Use HOST_WIDE_INT_PRINT_DEC as the\n\tformat specifier.\n\t(print_mode): Likewise.\n\t(init_decl_processing): Cast the arguments of bcopy/bzero to char *.\n\t* grant.c (grant_array_type): Use HOST_WIDE_INT_PRINT_DEC as\n\tthe format specifier.\n\t* inout.c (check_text_length): Remove unused parameter `type'.\n\t(build_chill_associate): Initialize variables `arg1', `arg2',\n\t`arg3', `arg4' and `arg5'.\n\t(build_chill_modify): Likewise.\n\t(scanformcont): Change type of variable `curr' to `unsigned char'.\n\t* lex.c (maybe_downcase): Cast the argument of `tolower' to\n\t`unsigned char'.\n\t* satisfy.c (satisfy): Remove unused parameter in call to\n\t`check_text_length'.\n\t* tasking.c (generate_tasking_code_variable): Pass a HOST_WIDE_INT\n\tas a `long' in call to function `error'.\n\t(decl_tasking_code_variable): Likewise.\n\nFrom-SVN: r22679", "tree": {"sha": "7810d6f845ef11b472b49bcda7839846716a29be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7810d6f845ef11b472b49bcda7839846716a29be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5efaf7b00ee3751680bffd751fa86eed6007c46a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5efaf7b00ee3751680bffd751fa86eed6007c46a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5efaf7b00ee3751680bffd751fa86eed6007c46a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5efaf7b00ee3751680bffd751fa86eed6007c46a/comments", "author": null, "committer": null, "parents": [{"sha": "5abb0464be9c333dc30d10aed65964005857f5ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5abb0464be9c333dc30d10aed65964005857f5ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5abb0464be9c333dc30d10aed65964005857f5ca"}], "stats": {"total": 105, "additions": 78, "deletions": 27}, "files": [{"sha": "5eb5e1961cee57624648fd27265bb293262b41a3", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efaf7b00ee3751680bffd751fa86eed6007c46a/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efaf7b00ee3751680bffd751fa86eed6007c46a/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=5efaf7b00ee3751680bffd751fa86eed6007c46a", "patch": "@@ -1,3 +1,37 @@\n+Wed Sep 30 19:24:41 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* actions.c (id_cmp): Do pointer arithmetic as `long' not `int' to\n+ \tensure enough bits for calculation.\n+\n+\t* ch-tree.h (check_text_length): Remove unused parameter.\n+\n+\t* convert.c (display_int_cst): Cast a HOST_WIDE_INT argument to\n+\tfunction sprintf into the appropriate type for printing.\n+\n+\t* decl.c (print_lang_decl): Use HOST_WIDE_INT_PRINT_DEC as the\n+\tformat specifier.\n+\t(print_mode): Likewise.\n+\t(init_decl_processing): Cast the arguments of bcopy/bzero to char *.\n+\n+\t* grant.c (grant_array_type): Use HOST_WIDE_INT_PRINT_DEC as\n+\tthe format specifier.\n+\n+\t* inout.c (check_text_length): Remove unused parameter `type'.\n+\t(build_chill_associate): Initialize variables `arg1', `arg2',\n+\t`arg3', `arg4' and `arg5'.\n+\t(build_chill_modify): Likewise.\n+\t(scanformcont): Change type of variable `curr' to `unsigned char'.\n+\n+\t* lex.c (maybe_downcase): Cast the argument of `tolower' to\n+\t`unsigned char'.\n+\n+\t* satisfy.c (satisfy): Remove unused parameter in call to\n+\t`check_text_length'.\n+\n+\t* tasking.c (generate_tasking_code_variable): Pass a HOST_WIDE_INT\n+\tas a `long' in call to function `error'.\n+\t(decl_tasking_code_variable): Likewise.\n+\n Wed Sep 30 19:03:02 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* grant.c (decode_decl_selective): Cast switch's enum argument to"}, {"sha": "cd1c46ba2d3bcae46ec85775bafc9b95c8557da6", "filename": "gcc/ch/actions.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efaf7b00ee3751680bffd751fa86eed6007c46a/gcc%2Fch%2Factions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efaf7b00ee3751680bffd751fa86eed6007c46a/gcc%2Fch%2Factions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Factions.c?ref=5efaf7b00ee3751680bffd751fa86eed6007c46a", "patch": "@@ -127,7 +127,9 @@ static int\n id_cmp (p1, p2)\n      tree *p1, *p2;\n {\n-  return (int)TREE_VALUE (*p1) - (int)TREE_VALUE (*p2);\n+  long diff = (long)TREE_VALUE (*p1) - (long)TREE_VALUE (*p2);\n+\n+  return (diff < 0) ? -1 : (diff > 0);\n }\n \n /* Build the FUNCTION_TYPE or METHOD_TYPE which may raise exceptions"}, {"sha": "c555677cee6638393886cce652fd56a94fd842f5", "filename": "gcc/ch/ch-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efaf7b00ee3751680bffd751fa86eed6007c46a/gcc%2Fch%2Fch-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efaf7b00ee3751680bffd751fa86eed6007c46a/gcc%2Fch%2Fch-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fch-tree.h?ref=5efaf7b00ee3751680bffd751fa86eed6007c46a", "patch": "@@ -1005,7 +1005,7 @@ extern tree build_chill_writerecord             PROTO((tree, tree));\n extern tree build_chill_writetext               PROTO((tree, tree));\n extern void build_enum_tables                   PROTO((void));\n extern tree build_text_mode                     PROTO((tree, tree, int));\n-extern tree check_text_length                   PROTO((tree, tree));\n+extern tree check_text_length                   PROTO((tree));\n extern void init_access_location                PROTO((tree, tree));\n extern void init_text_location                  PROTO((tree, tree));\n extern void inout_init                          PROTO((void));"}, {"sha": "93d14374be5bed9fc80e4a04a4018f65385d0a81", "filename": "gcc/ch/convert.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efaf7b00ee3751680bffd751fa86eed6007c46a/gcc%2Fch%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efaf7b00ee3751680bffd751fa86eed6007c46a/gcc%2Fch%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fconvert.c?ref=5efaf7b00ee3751680bffd751fa86eed6007c46a", "patch": "@@ -589,9 +589,9 @@ display_int_cst (val)\n       else if (x == '\\n')\n \tstrcpy (buffer, \"'^J'\");\n       else if (x < ' ' || x > '~')\n-\tsprintf (buffer, \"'^(%u)'\", x);\n+\tsprintf (buffer, \"'^(%u)'\", (unsigned int) x);\n       else\n-\tsprintf (buffer, \"'%c'\", x);\n+\tsprintf (buffer, \"'%c'\", (char) x);\n       return buffer;\n     case ENUMERAL_TYPE:\n       for (fields = TYPE_VALUES (TREE_TYPE (val)); fields != NULL_TREE;"}, {"sha": "9c4735962f88c1a6eefc9478babe00b213d83b9a", "filename": "gcc/ch/decl.c", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efaf7b00ee3751680bffd751fa86eed6007c46a/gcc%2Fch%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efaf7b00ee3751680bffd751fa86eed6007c46a/gcc%2Fch%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fdecl.c?ref=5efaf7b00ee3751680bffd751fa86eed6007c46a", "patch": "@@ -897,7 +897,9 @@ print_lang_decl (file, node, indent)\n      int  indent;\n {\n   indent_to (file, indent + 3);\n-  fprintf (file, \"nesting_level %d \", DECL_NESTING_LEVEL (node));\n+  fputs (\"nesting_level \", file);\n+  fprintf (file, HOST_WIDE_INT_PRINT_DEC, DECL_NESTING_LEVEL (node));\n+  fputs (\" \", file);\n   if (DECL_WEAK_NAME (node))\n     fprintf (file, \"weak_name \");\n   if (CH_DECL_SIGNAL (node))\n@@ -1437,12 +1439,22 @@ print_mode (mode)\n \t  {\n \t    tree itype = TYPE_DOMAIN (mode);\n \t    if (CH_STRING_TYPE_P (mode))\n-\t      printf (\" STRING (%d) OF \",\n-\t\t      TREE_INT_CST_LOW (TYPE_MAX_VALUE (itype)));\n+\t      {\n+\t\tfputs (\" STRING (\", stdout);\n+\t\tprintf (HOST_WIDE_INT_PRINT_DEC,\n+\t\t\tTREE_INT_CST_LOW (TYPE_MAX_VALUE (itype)));\n+\t\tfputs (\") OF \", stdout);\n+\t      }\n \t    else\n-\t      printf (\" ARRAY (%d:%d) OF \",\n-\t\t      TREE_INT_CST_LOW (TYPE_MIN_VALUE (itype)),\n-\t\t      TREE_INT_CST_LOW (TYPE_MAX_VALUE (itype)));\n+\t      {\n+\t\tfputs (\" ARRAY (\", stdout);\n+\t\tprintf (HOST_WIDE_INT_PRINT_DEC,\n+\t\t\tTREE_INT_CST_LOW (TYPE_MIN_VALUE (itype)));\n+\t\tfputs (\":\", stdout);\n+\t\tprintf (HOST_WIDE_INT_PRINT_DEC,\n+\t\t\tTREE_INT_CST_LOW (TYPE_MAX_VALUE (itype)));\n+\t\tfputs (\") OF \", stdout);\n+\t      }\n \t    mode = TREE_TYPE (mode);\n \t    break;\n \t  }\n@@ -3697,16 +3709,16 @@ init_decl_processing ()\n          tree_code_type + (int) LAST_AND_UNUSED_TREE_CODE,\n          (((int) LAST_CHILL_TREE_CODE - (int) LAST_AND_UNUSED_TREE_CODE)\n           * sizeof (char)));\n-  bcopy (chill_tree_code_length,\n-         tree_code_length + (int) LAST_AND_UNUSED_TREE_CODE,\n+  bcopy ((char *) chill_tree_code_length,\n+         (char *) (tree_code_length + (int) LAST_AND_UNUSED_TREE_CODE),\n          (((int) LAST_CHILL_TREE_CODE - (int) LAST_AND_UNUSED_TREE_CODE)\n           * sizeof (int)));\n-  bcopy (chill_tree_code_name,\n-         tree_code_name + (int) LAST_AND_UNUSED_TREE_CODE,\n+  bcopy ((char *) chill_tree_code_name,\n+         (char *) (tree_code_name + (int) LAST_AND_UNUSED_TREE_CODE),\n          (((int) LAST_CHILL_TREE_CODE - (int) LAST_AND_UNUSED_TREE_CODE)\n           * sizeof (char *)));\n   boolean_code_name = (char **) xmalloc (sizeof (char *) * (int) LAST_CHILL_TREE_CODE);\n-  bzero (boolean_code_name, sizeof (char *) * (int) LAST_CHILL_TREE_CODE);\n+  bzero ((char *) boolean_code_name, sizeof (char *) * (int) LAST_CHILL_TREE_CODE);\n \n   boolean_code_name[EQ_EXPR] = \"=\";\n   boolean_code_name[NE_EXPR] = \"/=\";"}, {"sha": "ada788c57e7670e351a5c6c0f439c4f97d8d003c", "filename": "gcc/ch/grant.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efaf7b00ee3751680bffd751fa86eed6007c46a/gcc%2Fch%2Fgrant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efaf7b00ee3751680bffd751fa86eed6007c46a/gcc%2Fch%2Fgrant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fgrant.c?ref=5efaf7b00ee3751680bffd751fa86eed6007c46a", "patch": "@@ -270,7 +270,8 @@ grant_array_type (type)\n       if (TREE_CODE (maxval) == INTEGER_CST)\n \t{\n \t  char\twrk[20];\n-\t  sprintf (wrk, \"%d\", TREE_INT_CST_LOW (maxval) + 1);\n+\t  sprintf (wrk, HOST_WIDE_INT_PRINT_DEC,\n+\t\t   TREE_INT_CST_LOW (maxval) + 1);\n \t  APPEND (result, wrk);\n \t}\n       else if (TREE_CODE (maxval) == MINUS_EXPR"}, {"sha": "c9af8160bd60a01ee5b5c840042b501180001395", "filename": "gcc/ch/inout.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efaf7b00ee3751680bffd751fa86eed6007c46a/gcc%2Fch%2Finout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efaf7b00ee3751680bffd751fa86eed6007c46a/gcc%2Fch%2Finout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Finout.c?ref=5efaf7b00ee3751680bffd751fa86eed6007c46a", "patch": "@@ -1615,8 +1615,8 @@ build_text_mode (textlength, indexmode, dynamic)\n }\n \n tree\n-check_text_length (type, length)\n-     tree type, length;\n+check_text_length (length)\n+     tree length;\n {\n   if (length == NULL_TREE || TREE_CODE (length) == ERROR_MARK)\n     return length;\n@@ -1750,7 +1750,8 @@ build_chill_associate (assoc, fname, attr)\n      tree fname;\n      tree attr;\n {\n-  tree arg1, arg2, arg3, arg4, arg5, arg6, arg7;\n+  tree arg1 = NULL_TREE, arg2 = NULL_TREE, arg3 = NULL_TREE, arg4 = NULL_TREE,\n+  arg5 = NULL_TREE, arg6, arg7;\n   int had_errors = 0;\n   tree result;\n \n@@ -1982,7 +1983,8 @@ build_chill_modify (assoc, list)\n      tree assoc;\n      tree list;\n {\n-  tree arg1, arg2, arg3, arg4, arg5, arg6, arg7;\n+  tree arg1 = NULL_TREE, arg2 = NULL_TREE, arg3 = NULL_TREE, arg4 = NULL_TREE,\n+  arg5 = NULL_TREE, arg6, arg7;\n   int had_errors = 0, numargs;\n   tree fname = NULL_TREE, attr = NULL_TREE;\n   tree result;\n@@ -3898,7 +3900,7 @@ scanformcont (fcs, len, fcsptr, lenptr, exprlist, exprptr,\n      int *nextargnum;\n {\n   fcsstate_t state = FormatText;\n-  char curr;\n+  unsigned char curr;\n   int dig;\n \n   while (len--)"}, {"sha": "bc50f64a0af3be952ddfab4f98be999828015802", "filename": "gcc/ch/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efaf7b00ee3751680bffd751fa86eed6007c46a/gcc%2Fch%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efaf7b00ee3751680bffd751fa86eed6007c46a/gcc%2Fch%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Flex.c?ref=5efaf7b00ee3751680bffd751fa86eed6007c46a", "patch": "@@ -877,7 +877,7 @@ maybe_downcase (str)\n   while (*str)\n     {\n       if (ISUPPER ((unsigned char) *str))\n-\t*str = tolower (*str);\n+\t*str = tolower ((unsigned char)*str);\n       str++;\n     }\n }"}, {"sha": "2b8607875b40a3dee0df6150e44cb9687be49a92", "filename": "gcc/ch/satisfy.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efaf7b00ee3751680bffd751fa86eed6007c46a/gcc%2Fch%2Fsatisfy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efaf7b00ee3751680bffd751fa86eed6007c46a/gcc%2Fch%2Fsatisfy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fsatisfy.c?ref=5efaf7b00ee3751680bffd751fa86eed6007c46a", "patch": "@@ -564,7 +564,7 @@ satisfy (exp, chain)\n \t\t\telse if (CH_IS_TEXT_MODE (exp) &&\n \t\t\t\t DECL_NAME (decl) == get_identifier (\"__textlength\"))\n \t\t\t  DECL_INITIAL (decl)\n-\t\t\t    = check_text_length (exp, DECL_INITIAL (decl));\n+\t\t\t    = check_text_length (DECL_INITIAL (decl));\n \t\t      }\n \t\t  }\n \t\telse if (TREE_CODE (decl) == FIELD_DECL)"}, {"sha": "c0c1c9ccbd430b893d4c9a0543f093c2c1bab26b", "filename": "gcc/ch/tasking.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efaf7b00ee3751680bffd751fa86eed6007c46a/gcc%2Fch%2Ftasking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efaf7b00ee3751680bffd751fa86eed6007c46a/gcc%2Fch%2Ftasking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Ftasking.c?ref=5efaf7b00ee3751680bffd751fa86eed6007c46a", "patch": "@@ -154,8 +154,8 @@ generate_tasking_code_variable (name, tasking_code_ptr, quasi_flag)\n       /* check for value should be assigned is out of range */\n       if (TREE_INT_CST_LOW (*tasking_code_ptr) >\n \t  TREE_INT_CST_LOW (TYPE_MAX_VALUE (chill_taskingcode_type_node)))\n-\t  error (\"Tasking code %d out of range for `%s'.\",\n-\t\t TREE_INT_CST_LOW (*tasking_code_ptr),\n+\t  error (\"Tasking code %ld out of range for `%s'.\",\n+\t\t (long) TREE_INT_CST_LOW (*tasking_code_ptr),\n \t\t IDENTIFIER_POINTER (name));\n     }\n \n@@ -201,8 +201,8 @@ decl_tasking_code_variable (name, tasking_code_ptr, quasi_flag)\n       /* check for value should be assigned is out of range */\n       if (TREE_INT_CST_LOW (*tasking_code_ptr) >\n \t  TREE_INT_CST_LOW (TYPE_MAX_VALUE (chill_taskingcode_type_node)))\n-\t  error (\"Tasking code %d out of range for `%s'.\",\n-\t\t TREE_INT_CST_LOW (*tasking_code_ptr),\n+\t  error (\"Tasking code %ld out of range for `%s'.\",\n+\t\t (long) TREE_INT_CST_LOW (*tasking_code_ptr),\n \t\t IDENTIFIER_POINTER (name));\n     }\n "}]}