{"sha": "2240d1cfe860cc718e00b8a48c89316cdd1ceb88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI0MGQxY2ZlODYwY2M3MThlMDBiOGE0OGM4OTMxNmNkZDFjZWI4OA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2011-08-07T20:59:16Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2011-08-07T20:59:16Z"}, "message": "re PR fortran/49638 ([OOP] length parameter is ignored when overriding type bound character functions with constant length.)\n\n2011-08-07  Janus Weil  <janus@gcc.gnu.org>\n\t    Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/49638\n\t* dependency.c (are_identical_variables): For dummy arguments only\n\tcheck for equal names, not equal symbols.\n\t* interface.c (gfc_check_typebound_override): Add checking for rank\n\tand character length.\n\n2011-08-07  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/49638\n\t* gfortran.dg/typebound_override_1.f90: New.\n\nCo-Authored-By: Thomas Koenig <tkoenig@gcc.gnu.org>\n\nFrom-SVN: r177550", "tree": {"sha": "dc68c0720cc893fefa9aad630b6a9958f8466d70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc68c0720cc893fefa9aad630b6a9958f8466d70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2240d1cfe860cc718e00b8a48c89316cdd1ceb88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2240d1cfe860cc718e00b8a48c89316cdd1ceb88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2240d1cfe860cc718e00b8a48c89316cdd1ceb88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2240d1cfe860cc718e00b8a48c89316cdd1ceb88/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "588c8f488fd5294c83c6733c950d9902dcb9f15b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/588c8f488fd5294c83c6733c950d9902dcb9f15b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/588c8f488fd5294c83c6733c950d9902dcb9f15b"}], "stats": {"total": 189, "additions": 183, "deletions": 6}, "files": [{"sha": "a86afc6728d14cab1beb9afa1fc972cb99ab829e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2240d1cfe860cc718e00b8a48c89316cdd1ceb88/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2240d1cfe860cc718e00b8a48c89316cdd1ceb88/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2240d1cfe860cc718e00b8a48c89316cdd1ceb88", "patch": "@@ -1,3 +1,12 @@\n+2011-08-07  Janus Weil  <janus@gcc.gnu.org>\n+\t    Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/49638\n+\t* dependency.c (are_identical_variables): For dummy arguments only\n+\tcheck for equal names, not equal symbols.\n+\t* interface.c (gfc_check_typebound_override): Add checking for rank\n+\tand character length.\n+\n 2011-08-07  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/49638"}, {"sha": "5238c861381952ee6ffe985f2f21f3b05680791f", "filename": "gcc/fortran/dependency.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2240d1cfe860cc718e00b8a48c89316cdd1ceb88/gcc%2Ffortran%2Fdependency.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2240d1cfe860cc718e00b8a48c89316cdd1ceb88/gcc%2Ffortran%2Fdependency.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.c?ref=2240d1cfe860cc718e00b8a48c89316cdd1ceb88", "patch": "@@ -123,8 +123,18 @@ are_identical_variables (gfc_expr *e1, gfc_expr *e2)\n {\n   gfc_ref *r1, *r2;\n \n-  if (e1->symtree->n.sym != e2->symtree->n.sym)\n-    return false;\n+  if (e1->symtree->n.sym->attr.dummy && e2->symtree->n.sym->attr.dummy)\n+    {\n+      /* Dummy arguments: Only check for equal names.  */\n+      if (e1->symtree->n.sym->name != e2->symtree->n.sym->name)\n+\treturn false;\n+    }\n+  else\n+    {\n+      /* Check for equal symbols.  */\n+      if (e1->symtree->n.sym != e2->symtree->n.sym)\n+\treturn false;\n+    }\n \n   /* Volatile variables should never compare equal to themselves.  */\n "}, {"sha": "0ea244de32a9676f449d2dca5b6aa4640bd685c7", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2240d1cfe860cc718e00b8a48c89316cdd1ceb88/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2240d1cfe860cc718e00b8a48c89316cdd1ceb88/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=2240d1cfe860cc718e00b8a48c89316cdd1ceb88", "patch": "@@ -3556,15 +3556,43 @@ gfc_check_typebound_override (gfc_symtree* proc, gfc_symtree* old)\n \t}\n \n       /* FIXME:  Do more comprehensive checking (including, for instance, the\n-\t rank and array-shape).  */\n+\t array-shape).  */\n       gcc_assert (proc_target->result && old_target->result);\n-      if (!gfc_compare_types (&proc_target->result->ts,\n-\t\t\t      &old_target->result->ts))\n+      if (!compare_type_rank (proc_target->result, old_target->result))\n \t{\n \t  gfc_error (\"'%s' at %L and the overridden FUNCTION should have\"\n-\t\t     \" matching result types\", proc->name, &where);\n+\t\t     \" matching result types and ranks\", proc->name, &where);\n \t  return FAILURE;\n \t}\n+\t\n+      /* Check string length.  */\n+      if (proc_target->result->ts.type == BT_CHARACTER\n+\t  && proc_target->result->ts.u.cl && old_target->result->ts.u.cl)\n+\t{\n+\t  int compval = gfc_dep_compare_expr (proc_target->result->ts.u.cl->length,\n+\t\t\t\t\t      old_target->result->ts.u.cl->length);\n+\t  switch (compval)\n+\t  {\n+\t    case -1:\n+\t    case 1:\n+\t      gfc_error (\"Character length mismatch between '%s' at '%L' and \"\n+\t\t\t \"overridden FUNCTION\", proc->name, &where);\n+\t      return FAILURE;\n+\n+\t    case -2:\n+\t      gfc_warning (\"Possible character length mismatch between '%s' at\"\n+\t\t\t   \" '%L' and overridden FUNCTION\", proc->name, &where);\n+\t      break;\n+\n+\t    case 0:\n+\t      break;\n+\n+\t    default:\n+\t      gfc_internal_error (\"gfc_check_typebound_override: Unexpected \"\n+\t\t\t\t  \"result %i of gfc_dep_compare_expr\", compval);\n+\t      break;\n+\t  }\n+\t}\n     }\n \n   /* If the overridden binding is PUBLIC, the overriding one must not be"}, {"sha": "afd84c5d701db2c5b087cc72bb5fa7992fee8753", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2240d1cfe860cc718e00b8a48c89316cdd1ceb88/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2240d1cfe860cc718e00b8a48c89316cdd1ceb88/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2240d1cfe860cc718e00b8a48c89316cdd1ceb88", "patch": "@@ -1,3 +1,8 @@\n+2011-08-07  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/49638\n+\t* gfortran.dg/typebound_override_1.f90: New.\n+\n 2011-08-07  Kai Tietz  <ktietz@redhat.com>\n \n \t* gcc.dg/tree-ssa/pr23455.c: Adjust testcases for LLP64 for"}, {"sha": "37939d9a17ccfce68ec00968a7167f07af2244ae", "filename": "gcc/testsuite/gfortran.dg/typebound_override_1.f90", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2240d1cfe860cc718e00b8a48c89316cdd1ceb88/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_override_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2240d1cfe860cc718e00b8a48c89316cdd1ceb88/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_override_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_override_1.f90?ref=2240d1cfe860cc718e00b8a48c89316cdd1ceb88", "patch": "@@ -0,0 +1,125 @@\n+! { dg-do compile }\n+!\n+! PR 49638: [OOP] length parameter is ignored when overriding type bound character functions with constant length.\n+!\n+! Original test case contributed by Hans-Werner Boschmann <boschmann@tp1.physik.uni-siegen.de>\n+\n+module m\n+\n+  implicit none\n+\n+  type :: t1\n+   contains\n+     procedure, nopass :: a => a1\n+     procedure, nopass :: b => b1\n+     procedure, nopass :: c => c1\n+     procedure, nopass :: d => d1\n+     procedure, nopass :: e => e1\n+  end type\n+\n+  type, extends(t1) :: t2\n+   contains\n+     procedure, nopass :: a => a2  ! { dg-error \"Character length mismatch\" }\n+     procedure, nopass :: b => b2  ! { dg-error \"should have matching result types and ranks\" }\n+     procedure, nopass :: c => c2  ! { dg-warning \"Possible character length mismatch\" }\n+     procedure, nopass :: d => d2  ! valid, check for commutativity (+,*)\n+     procedure, nopass :: e => e2  ! { dg-warning \"Possible character length mismatch\" }\n+  end type\n+\n+contains\n+\n+  function a1 ()\n+    character(len=6) :: a1\n+  end function\n+\n+  function a2 ()\n+    character(len=7) :: a2\n+  end function\n+\n+  function b1 ()\n+    integer :: b1\n+  end function\n+\n+  function b2 ()\n+    integer, dimension(2) :: b2\n+  end function\n+\n+  function c1 (x)\n+    integer, intent(in) :: x\n+    character(2*x) :: c1\n+  end function\n+\n+  function c2 (x)\n+    integer, intent(in) :: x\n+    character(3*x) :: c2\n+  end function\n+\n+  function d1 (y)\n+    integer, intent(in) :: y\n+    character(2*y+1) :: d1\n+  end function\n+\n+  function d2 (y)\n+    integer, intent(in) :: y\n+    character(1+y*2) :: d2\n+  end function\n+\n+  function e1 (z)\n+    integer, intent(in) :: z\n+    character(3) :: e1\n+  end function\n+\n+  function e2 (z)\n+    integer, intent(in) :: z\n+    character(z) :: e2\n+  end function\n+\n+end module m\n+\n+\n+\n+\n+module w1\n+\n+ implicit none\n+\n+ integer :: n = 1\n+\n+ type :: tt1\n+ contains\n+   procedure, nopass :: aa => aa1\n+ end type\n+\n+contains\n+\n+ function aa1 (m)\n+  integer, intent(in) :: m\n+  character(n+m) :: aa1\n+ end function\n+\n+end module w1\n+\n+\n+module w2\n+\n+ use w1, only : tt1\n+\n+ implicit none\n+\n+ integer :: n = 2\n+\n+ type, extends(tt1) :: tt2\n+ contains\n+   procedure, nopass :: aa => aa2  ! { dg-warning \"Possible character length mismatch\" }\n+ end type\n+\n+contains\n+\n+ function aa2 (m)\n+  integer, intent(in) :: m\n+  character(n+m) :: aa2\n+ end function\n+\n+end module w2\n+\n+! { dg-final { cleanup-modules \"m w1 w2\" } }"}]}