{"sha": "ab758510b21e7cbb0d08ba6a6b63bb8f9ee1a121", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI3NTg1MTBiMjFlN2NiYjBkMDhiYTZhNmI2M2JiOGY5ZWUxYTEyMQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-09-29T16:24:57Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-09-29T16:24:57Z"}, "message": "re PR target/50566 ([avr]: Add support for better logging similar to -mdeb)\n\n\tPR target/50566\n\t* config/avr/avr-log.c (avr_log_vadump): Use %b to print bool.\n\t* config/avr/avr.c (avr_rtx_costs_1): New static function, renamed\n\tfrom avr_rtx_costs.\n\t(avr_legitimate_address_p): Use avr_edump to print log information\n\tfiltered by avr_log.\n\t(extra_constraint_Q): Ditto.\n\t(avr_legitimize_address): Ditto.\n\t(avr_rtx_costs): Ditto.  Rewrite as wrapper for avr_rtx_costs_1.\n\t(final_prescan_insn): Use avr_log.rtx_costs as filter.\n\nFrom-SVN: r179359", "tree": {"sha": "1d1f74506ecc51c8e605cf4724167644add18e1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d1f74506ecc51c8e605cf4724167644add18e1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab758510b21e7cbb0d08ba6a6b63bb8f9ee1a121", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab758510b21e7cbb0d08ba6a6b63bb8f9ee1a121", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab758510b21e7cbb0d08ba6a6b63bb8f9ee1a121", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab758510b21e7cbb0d08ba6a6b63bb8f9ee1a121/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39ffb1f923eeab711e43949d0fc289fe36fed2e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39ffb1f923eeab711e43949d0fc289fe36fed2e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39ffb1f923eeab711e43949d0fc289fe36fed2e2"}], "stats": {"total": 170, "additions": 105, "deletions": 65}, "files": [{"sha": "a595e80ce753518cb7551eb9eee5f079a7bb4dcc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab758510b21e7cbb0d08ba6a6b63bb8f9ee1a121/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab758510b21e7cbb0d08ba6a6b63bb8f9ee1a121/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab758510b21e7cbb0d08ba6a6b63bb8f9ee1a121", "patch": "@@ -1,3 +1,16 @@\n+2011-09-29  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/50566\n+\t* config/avr/avr-log.c (avr_log_vadump): Use %b to print bool.\n+\t* config/avr/avr.c (avr_rtx_costs_1): New static function, renamed\n+\tfrom avr_rtx_costs.\n+\t(avr_legitimate_address_p): Use avr_edump to print log information\n+\tfiltered by avr_log.\n+\t(extra_constraint_Q): Ditto.\n+\t(avr_legitimize_address): Ditto.\n+\t(avr_rtx_costs): Ditto.  Rewrite as wrapper for avr_rtx_costs_1.\n+\t(final_prescan_insn): Use avr_log.rtx_costs as filter.\n+\n 2011-09-29  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* config/arm/arm-protos.h (arm_modes_tieable_p): Declare."}, {"sha": "7381d1edd392570f2f8b70b9948b245a3bdc5912", "filename": "gcc/config/avr/avr-log.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab758510b21e7cbb0d08ba6a6b63bb8f9ee1a121/gcc%2Fconfig%2Favr%2Favr-log.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab758510b21e7cbb0d08ba6a6b63bb8f9ee1a121/gcc%2Fconfig%2Favr%2Favr-log.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-log.c?ref=ab758510b21e7cbb0d08ba6a6b63bb8f9ee1a121", "patch": "@@ -42,6 +42,7 @@\n \n   == known %-codes ==\n   \n+  b: bool  \n   r: rtx\n   t: tree\n   T: tree (brief)\n@@ -132,7 +133,7 @@ avr_log_set_caller_f (const char *caller)\n   return avr_log_fdump_f;\n }\n \n-/* Worker function implementing the %-codes and forwarning to\n+/* Worker function implementing the %-codes and forwarding to\n    respective print/dump function.  */\n \n static void\n@@ -190,6 +191,10 @@ avr_log_vadump (FILE *file, const char *fmt, va_list ap)\n               fprintf (file, \"%x\", va_arg (ap, int));\n               break;\n                         \n+            case 'b':\n+              fprintf (file, \"%s\", va_arg (ap, int) ? \"true\" : \"false\");\n+              break;\n+                        \n             case 'c':\n               fputc (va_arg (ap, int), file);\n               break;"}, {"sha": "7e732b45c771a46b024a608a44c4c0cd949b0218", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 86, "deletions": 64, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab758510b21e7cbb0d08ba6a6b63bb8f9ee1a121/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab758510b21e7cbb0d08ba6a6b63bb8f9ee1a121/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=ab758510b21e7cbb0d08ba6a6b63bb8f9ee1a121", "patch": "@@ -1193,27 +1193,7 @@ avr_cannot_modify_jumps_p (void)\n bool\n avr_legitimate_address_p (enum machine_mode mode, rtx x, bool strict)\n {\n-  enum reg_class r = NO_REGS;\n-  \n-  if (TARGET_ALL_DEBUG)\n-    {\n-      fprintf (stderr, \"mode: (%s) %s %s %s %s:\",\n-\t       GET_MODE_NAME(mode),\n-\t       strict ? \"(strict)\": \"\",\n-\t       reload_completed ? \"(reload_completed)\": \"\",\n-\t       reload_in_progress ? \"(reload_in_progress)\": \"\",\n-\t       reg_renumber ? \"(reg_renumber)\" : \"\");\n-      if (GET_CODE (x) == PLUS\n-\t  && REG_P (XEXP (x, 0))\n-\t  && GET_CODE (XEXP (x, 1)) == CONST_INT\n-\t  && INTVAL (XEXP (x, 1)) >= 0\n-\t  && INTVAL (XEXP (x, 1)) <= MAX_LD_OFFSET (mode)\n-\t  && reg_renumber\n-\t  )\n-\tfprintf (stderr, \"(r%d ---> r%d)\", REGNO (XEXP (x, 0)),\n-\t\t true_regnum (XEXP (x, 0)));\n-      debug_rtx (x);\n-    }\n+  reg_class_t r = NO_REGS;\n   \n   if (REG_P (x) && (strict ? REG_OK_FOR_BASE_STRICT_P (x)\n                     : REG_OK_FOR_BASE_NOSTRICT_P (x)))\n@@ -1247,10 +1227,27 @@ avr_legitimate_address_p (enum machine_mode mode, rtx x, bool strict)\n     {\n       r = POINTER_REGS;\n     }\n-  if (TARGET_ALL_DEBUG)\n+\n+  if (avr_log.legitimate_address_p)\n     {\n-      fprintf (stderr, \"   ret = %c\\n\", r + '0');\n+      avr_edump (\"\\n%?: ret=%d=%R, mode=%m strict=%d \"\n+                 \"reload_completed=%d reload_in_progress=%d %s:\",\n+                 !!r, r, mode, strict, reload_completed, reload_in_progress,\n+                 reg_renumber ? \"(reg_renumber)\" : \"\");\n+      \n+      if (GET_CODE (x) == PLUS\n+          && REG_P (XEXP (x, 0))\n+          && CONST_INT_P (XEXP (x, 1))\n+          && IN_RANGE (INTVAL (XEXP (x, 1)), 0, MAX_LD_OFFSET (mode))\n+          && reg_renumber)\n+        {\n+          avr_edump (\"(r%d ---> r%d)\", REGNO (XEXP (x, 0)),\n+                     true_regnum (XEXP (x, 0)));\n+        }\n+      \n+      avr_edump (\"\\n%r\\n\", x);\n     }\n+  \n   return r == NO_REGS ? 0 : (int)r;\n }\n \n@@ -1260,30 +1257,35 @@ avr_legitimate_address_p (enum machine_mode mode, rtx x, bool strict)\n rtx\n avr_legitimize_address (rtx x, rtx oldx, enum machine_mode mode)\n {\n+  bool big_offset_p = false;\n+  \n   x = oldx;\n-  if (TARGET_ALL_DEBUG)\n+  \n+  if (GET_CODE (oldx) == PLUS\n+      && REG_P (XEXP (oldx, 0)))\n     {\n-      fprintf (stderr, \"legitimize_address mode: %s\", GET_MODE_NAME(mode));\n-      debug_rtx (oldx);\n+      if (REG_P (XEXP (oldx, 1)))\n+        x = force_reg (GET_MODE (oldx), oldx);\n+      else if (CONST_INT_P (XEXP (oldx, 1)))\n+        {\n+\t  int offs = INTVAL (XEXP (oldx, 1));\n+          if (frame_pointer_rtx != XEXP (oldx, 0)\n+              && offs > MAX_LD_OFFSET (mode))\n+            {\n+              big_offset_p = true;\n+              x = force_reg (GET_MODE (oldx), oldx);\n+            }\n+        }\n     }\n   \n-  if (GET_CODE (oldx) == PLUS\n-      && REG_P (XEXP (oldx,0)))\n+  if (avr_log.legitimize_address)\n     {\n-      if (REG_P (XEXP (oldx,1)))\n-\tx = force_reg (GET_MODE (oldx), oldx);\n-      else if (GET_CODE (XEXP (oldx, 1)) == CONST_INT)\n-\t{\n-\t  int offs = INTVAL (XEXP (oldx,1));\n-\t  if (frame_pointer_rtx != XEXP (oldx,0))\n-\t    if (offs > MAX_LD_OFFSET (mode))\n-\t      {\n-\t\tif (TARGET_ALL_DEBUG)\n-\t\t  fprintf (stderr, \"force_reg (big offset)\\n\");\n-\t\tx = force_reg (GET_MODE (oldx), oldx);\n-\t      }\n-\t}\n+      avr_edump (\"\\n%?: mode=%m\\n %r\\n\", mode, oldx);\n+\n+      if (x != oldx)\n+        avr_edump (\" %s --> %r\\n\", big_offset_p ? \"(big offset)\" : \"\", x);\n     }\n+\n   return x;\n }\n \n@@ -1711,7 +1713,7 @@ void\n final_prescan_insn (rtx insn, rtx *operand ATTRIBUTE_UNUSED,\n                     int num_operands ATTRIBUTE_UNUSED)\n {\n-  if (TARGET_ALL_DEBUG)\n+  if (avr_log.rtx_costs)\n     {\n       rtx set = single_set (insn);\n \n@@ -5825,14 +5827,15 @@ avr_operand_rtx_cost (rtx x, enum machine_mode mode, enum rtx_code outer,\n   return total;\n }\n \n-/* The AVR backend's rtx_cost function.  X is rtx expression whose cost\n-   is to be calculated.  Return true if the complete cost has been\n-   computed, and false if subexpressions should be scanned.  In either\n-   case, *TOTAL contains the cost result.  */\n+/* Worker function for AVR backend's rtx_cost function.\n+   X is rtx expression whose cost is to be calculated.\n+   Return true if the complete cost has been computed.\n+   Return false if subexpressions should be scanned.\n+   In either case, *TOTAL contains the cost result.  */\n \n static bool\n-avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED,\n-\t       int opno ATTRIBUTE_UNUSED, int *total, bool speed)\n+avr_rtx_costs_1 (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED,\n+                 int opno ATTRIBUTE_UNUSED, int *total, bool speed)\n {\n   enum rtx_code code = (enum rtx_code) codearg;\n   enum machine_mode mode = GET_MODE (x);\n@@ -6551,6 +6554,25 @@ avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED,\n   return false;\n }\n \n+\n+/* Implement `TARGET_RTX_COSTS'.  */\n+\n+static bool\n+avr_rtx_costs (rtx x, int codearg, int outer_code,\n+\t       int opno, int *total, bool speed)\n+{\n+  bool done = avr_rtx_costs_1 (x, codearg, outer_code,\n+                               opno, total, speed);\n+\n+  if (avr_log.rtx_costs)\n+    {\n+      avr_edump (\"\\n%?=%b (%s) total=%d, outer=%C:\\n%r\\n\",\n+                 done, speed ? \"speed\" : \"size\", *total, outer_code, x);\n+    }\n+\n+  return done;\n+}\n+\n /* Calculate the cost of a memory address.  */\n \n static int\n@@ -6576,6 +6598,8 @@ avr_address_cost (rtx x, bool speed ATTRIBUTE_UNUSED)\n int\n extra_constraint_Q (rtx x)\n {\n+  int ok = 0;\n+  \n   if (GET_CODE (XEXP (x,0)) == PLUS\n       && REG_P (XEXP (XEXP (x,0), 0))\n       && GET_CODE (XEXP (XEXP (x,0), 1)) == CONST_INT\n@@ -6584,23 +6608,21 @@ extra_constraint_Q (rtx x)\n     {\n       rtx xx = XEXP (XEXP (x,0), 0);\n       int regno = REGNO (xx);\n-      if (TARGET_ALL_DEBUG)\n-\t{\n-\t  fprintf (stderr, (\"extra_constraint:\\n\"\n-\t\t\t    \"reload_completed: %d\\n\"\n-\t\t\t    \"reload_in_progress: %d\\n\"),\n-\t\t   reload_completed, reload_in_progress);\n-\t  debug_rtx (x);\n-\t}\n-      if (regno >= FIRST_PSEUDO_REGISTER)\n-\treturn 1;\t\t/* allocate pseudos */\n-      else if (regno == REG_Z || regno == REG_Y)\n-\treturn 1;\t\t/* strictly check */\n-      else if (xx == frame_pointer_rtx\n-\t       || xx == arg_pointer_rtx)\n-\treturn 1;\t\t/* XXX frame & arg pointer checks */\n+      \n+      ok = (/* allocate pseudos */\n+            regno >= FIRST_PSEUDO_REGISTER\n+            /* strictly check */\n+            || regno == REG_Z || regno == REG_Y\n+            /* XXX frame & arg pointer checks */\n+            || xx == frame_pointer_rtx\n+            || xx == arg_pointer_rtx);\n+      \n+      if (avr_log.constraints)\n+        avr_edump (\"\\n%?=%d reload_completed=%d reload_in_progress=%d\\n %r\\n\",\n+                   ok, reload_completed, reload_in_progress, x);\n     }\n-  return 0;\n+\n+  return ok;\n }\n \n /* Convert condition code CONDITION to the valid AVR condition code.  */"}]}