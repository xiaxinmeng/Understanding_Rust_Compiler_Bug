{"sha": "b5c4fed92cb6d5fe30e6eac39d1299b2cf998c9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVjNGZlZDkyY2I2ZDVmZTMwZTZlYWMzOWQxMjk5YjJjZjk5OGM5ZA==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2001-01-21T21:24:30Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2001-01-21T21:24:30Z"}, "message": "Minor optimization of static ggc roots.\n\n\t* jcf-parse.c (parse_roots):  New static field.\n\t(current_field, current_method, current_file_list):  Replace by macros\n\tnaming fields of parse_roots.\n\t(init_jcf_parse):  Combine 3 ggc_add_tree_root calls to 1.\n\t* class.c (class_roots):  New static field.\n\t(registered_class, fields_ident, info_ident, class_list):\n\tNew macros naming fields of parse_roots.\n\t(build_static_field_ref):  Don't register roots here.\n\t(layout_class):  Static field list replaced by macro class_list.\n\t(init_class_processing):  Call ggc_add_tree_root for 4 roots.\n\tInitialize fields_ident and info_ident here.\n\nFrom-SVN: r39174", "tree": {"sha": "fb724a1bb57c4396ebb107ef33d32b2bef5e0b7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb724a1bb57c4396ebb107ef33d32b2bef5e0b7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5c4fed92cb6d5fe30e6eac39d1299b2cf998c9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5c4fed92cb6d5fe30e6eac39d1299b2cf998c9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5c4fed92cb6d5fe30e6eac39d1299b2cf998c9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5c4fed92cb6d5fe30e6eac39d1299b2cf998c9d/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3432b91b650d7b134217ee74392840f6a4d85c4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3432b91b650d7b134217ee74392840f6a4d85c4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3432b91b650d7b134217ee74392840f6a4d85c4b"}], "stats": {"total": 72, "additions": 36, "deletions": 36}, "files": [{"sha": "f045363d32b11903837ac5636bf355a5a6429fd1", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c4fed92cb6d5fe30e6eac39d1299b2cf998c9d/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c4fed92cb6d5fe30e6eac39d1299b2cf998c9d/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=b5c4fed92cb6d5fe30e6eac39d1299b2cf998c9d", "patch": "@@ -1,3 +1,18 @@\n+2001-01-21  Per Bothner  <per@bothner.com>\n+\n+\tMinor optimization of static ggc roots.\n+\t* jcf-parse.c (parse_roots):  New static field.\n+\t(current_field, current_method, current_file_list):  Replace by macros\n+\tnaming fields of parse_roots.\n+\t(init_jcf_parse):  Combine 3 ggc_add_tree_root calls to 1.\n+\t* class.c (class_roots):  New static field.\n+\t(registered_class, fields_ident, info_ident, class_list):\n+\tNew macros naming fields of parse_roots.\n+\t(build_static_field_ref):  Don't register roots here.\n+\t(layout_class):  Static field list replaced by macro class_list.\n+\t(init_class_processing):  Call ggc_add_tree_root for 4 roots.\n+\tInitialize fields_ident and info_ident here.\n+\n 2001-01-21  Per Bothner  <per@bothner.com>\n \n \t* jcf-parse.c (ggc_mark_jcf):  New function."}, {"sha": "f98a5d75bb452f8aefac21881cec5ea9d9b6b078", "filename": "gcc/java/class.c", "status": "modified", "additions": 15, "deletions": 30, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c4fed92cb6d5fe30e6eac39d1299b2cf998c9d/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c4fed92cb6d5fe30e6eac39d1299b2cf998c9d/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=b5c4fed92cb6d5fe30e6eac39d1299b2cf998c9d", "patch": "@@ -83,6 +83,12 @@ static assume_compiled_node *find_assume_compiled_node\n \n static assume_compiled_node *assume_compiled_tree;\n \n+static tree class_roots[4] = { NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE };\n+#define registered_class class_roots[0]\n+#define fields_ident class_roots[1]  /* get_identifier (\"fields\") */\n+#define info_ident class_roots[2]  /* get_identifier (\"info\") */\n+#define class_list class_roots[3]\n+\n /* Return the node that most closely represents the class whose name\n    is IDENT.  Start the search from NODE.  Return NULL if an\n    appropriate node does not exist.  */\n@@ -978,22 +984,10 @@ build_static_field_ref (fdecl)\n     {\n       /* Compile as:\n        * *(FTYPE*)build_class_ref(FCLASS)->fields[INDEX].info.addr */\n-      static tree fields_ident = NULL_TREE;\n-      static tree info_ident = NULL_TREE;\n       tree ref = build_class_ref (fclass);\n       tree fld;\n       int field_index = 0;\n       ref = build1 (INDIRECT_REF, class_type_node, ref);\n-      if (fields_ident == NULL_TREE)\n-\t{\n-\t  fields_ident = get_identifier (\"fields\");\n-\t  ggc_add_tree_root (&fields_ident, 1);\n-\t}\n-      if (info_ident == NULL_TREE)\n-\t{\n-\t  info_ident = get_identifier (\"info\");\n-\t  ggc_add_tree_root (&info_ident, 1);\n-\t}\n       ref = build (COMPONENT_REF, field_ptr_type_node, ref,\n \t\t   lookup_field (&class_type_node, fields_ident));\n \n@@ -1508,7 +1502,7 @@ is_compiled_class (class)\n   if (class == current_class)\n     return 2;\n \n-  seen_in_zip = (TYPE_JCF (class) && TYPE_JCF (class)->seen_in_zip);\n+  seen_in_zip = (TYPE_JCF (class) && JCF_SEEN_IN_ZIP (TYPE_JCF (class)));\n   if (CLASS_FROM_CURRENTLY_COMPILED_SOURCE_P (class) || seen_in_zip)\n     {\n       /* The class was seen in the current ZIP file and will be\n@@ -1628,19 +1622,10 @@ void\n layout_class (this_class)\n      tree this_class;\n {\n-  static tree list = NULL_TREE;\n-  static int initialized_p;\n   tree super_class = CLASSTYPE_SUPER (this_class);\n   tree field;\n   \n-  /* Register LIST with the garbage collector.  */\n-  if (!initialized_p)\n-    {\n-      ggc_add_tree_root (&list, 1);\n-      initialized_p = 1;\n-    }\n-\n-  list = tree_cons (this_class, NULL_TREE, list);\n+  class_list = tree_cons (this_class, NULL_TREE, class_list);\n   if (CLASS_BEING_LAIDOUT (this_class))\n     {\n       char buffer [1024];\n@@ -1651,7 +1636,7 @@ layout_class (this_class)\n \t       IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (this_class))));\n       obstack_grow (&temporary_obstack, buffer, strlen (buffer));\n \n-      for (current = TREE_CHAIN (list); current; \n+      for (current = TREE_CHAIN (class_list); current; \n \t   current = TREE_CHAIN (current))\n \t{\n \t  tree decl = TYPE_NAME (TREE_PURPOSE (current));\n@@ -1679,7 +1664,7 @@ layout_class (this_class)\n \t{\n \t  TYPE_SIZE (this_class) = error_mark_node;\n \t  CLASS_BEING_LAIDOUT (this_class) = 0;\n-\t  list = TREE_CHAIN (list);\n+\t  class_list = TREE_CHAIN (class_list);\n \t  return;\n \t}\n       if (TYPE_SIZE (this_class) == NULL_TREE)\n@@ -1721,7 +1706,7 @@ layout_class (this_class)\n \t\t{\n \t\t  TYPE_SIZE (this_class) = error_mark_node;\n \t\t  CLASS_BEING_LAIDOUT (this_class) = 0;\n-\t\t  list = TREE_CHAIN (list);\n+\t\t  class_list = TREE_CHAIN (class_list);\n \t\t  return;\n \t\t}\n \t    }\n@@ -1733,7 +1718,7 @@ layout_class (this_class)\n     fold (convert (int_type_node, TYPE_SIZE_UNIT (this_class)));\n \n   CLASS_BEING_LAIDOUT (this_class) = 0;\n-  list = TREE_CHAIN (list);\n+  class_list = TREE_CHAIN (class_list);\n }\n \n void\n@@ -1845,8 +1830,6 @@ layout_class_method (this_class, super_class, method_decl, dtable_count)\n   return dtable_count;\n }\n \n-static tree registered_class = NULL_TREE;\n-\n void\n register_class ()\n {\n@@ -1911,7 +1894,9 @@ void\n init_class_processing ()\n {\n   registerClass_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"_Jv_RegisterClass\");\n-  ggc_add_tree_root (&registered_class, 1);\n+  ggc_add_tree_root (class_roots, sizeof (class_roots) / sizeof (tree));\n+  fields_ident = get_identifier (\"fields\");\n+  info_ident = get_identifier (\"info\");\n   ggc_add_rtx_root (&registerClass_libfunc, 1);\n   gcc_obstack_init (&temporary_obstack);\n }"}, {"sha": "61c3c1509c106248c9ec42fe9f83c45d7c3758ab", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c4fed92cb6d5fe30e6eac39d1299b2cf998c9d/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c4fed92cb6d5fe30e6eac39d1299b2cf998c9d/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=b5c4fed92cb6d5fe30e6eac39d1299b2cf998c9d", "patch": "@@ -70,14 +70,16 @@ extern struct obstack permanent_obstack;\n    before static field references.  */\n extern int always_initialize_class_p;\n \n+static tree parse_roots[3] = { NULL_TREE, NULL_TREE, NULL_TREE };\n+\n /* The FIELD_DECL for the current field.  */\n-static tree current_field = NULL_TREE;\n+#define current_field parse_roots[0]\n \n /* The METHOD_DECL for the current method.  */\n-static tree current_method = NULL_TREE;\n+#define current_method parse_roots[1]\n \n /* A list of file names.  */\n-static tree current_file_list = NULL_TREE;\n+#define current_file_list parse_roots[2]\n \n /* The Java .class file that provides main_class;  the main input file. */\n static struct JCF main_jcf[1];\n@@ -1119,9 +1121,7 @@ void\n init_jcf_parse ()\n {\n   /* Register roots with the garbage collector.  */\n-  ggc_add_tree_root (&current_field, 1);\n-  ggc_add_tree_root (&current_method, 1);\n-  ggc_add_tree_root (&current_file_list, 1);\n+  ggc_add_tree_root (parse_roots, sizeof (parse_roots) / sizeof(tree));\n \n   ggc_add_root (&current_jcf, 1, sizeof (JCF), ggc_mark_jcf);\n }"}]}