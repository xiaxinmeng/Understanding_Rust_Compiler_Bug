{"sha": "91bd4114a73ca69e5ce3d904282b402b9f2128d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFiZDQxMTRhNzNjYTY5ZTVjZTNkOTA0MjgyYjQwMmI5ZjIxMjhkMw==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-09-02T16:22:10Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-09-02T16:22:10Z"}, "message": "[AArch64] Rewrite the vdup_lane intrinsics in C\n\ngcc/\n\t* config/aarch64/aarch64-simd-builtins.def\n\t(dup_lane_scalar): Remove.\n\t* config/aarch64/aarch64-simd.md\n\t(aarch64_simd_dup): Add 'w->w' alternative.\n\t(aarch64_dup_lane<mode>): Allow for VALL.\n\t(aarch64_dup_lane_scalar<mode>): Remove.\n\t(aarch64_dup_lane_<vswap_width_name><mode>): New.\n\t(aarch64_get_lane_signed<mode>): Add w->w altenative.\n\t(aarch64_get_lane_unsigned<mode>): Likewise.\n\t(aarch64_get_lane<mode>): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_evpc_dup): New.\n\t(aarch64_expand_vec_perm_const_1): Use aarch64_evpc_dup.\n\t* config/aarch64/iterators.md (VSWAP_WIDTH): New.\n\t(VCON): Change container of V2SF.\n\t(vswap_width_name): Likewise.\n\t* config/aarch64/arm_neon.h\n\t(__aarch64_vdup_lane_any): New.\n\t(__aarch64_vdup<q>_lane<q>_<fpsu><8,16,32,64>): Likewise.\n\t(vdup<q>_n_<psuf><8,16,32,64>): Convert to C implementation.\n\t(vdup<q>_lane<q>_<fpsu><8,16,32,64>): Likewise.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/scalar_intrinsics.c\n\t(vdup<bhsd>_lane<su><8,16,32,64>): Force values to SIMD registers.\n\nFrom-SVN: r202180", "tree": {"sha": "ff97297f82a36c9eca0cec44a4668205e70e35e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff97297f82a36c9eca0cec44a4668205e70e35e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91bd4114a73ca69e5ce3d904282b402b9f2128d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91bd4114a73ca69e5ce3d904282b402b9f2128d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91bd4114a73ca69e5ce3d904282b402b9f2128d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91bd4114a73ca69e5ce3d904282b402b9f2128d3/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d617d2d806dd4a1cb6c25f06de191593831bcd40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d617d2d806dd4a1cb6c25f06de191593831bcd40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d617d2d806dd4a1cb6c25f06de191593831bcd40"}], "stats": {"total": 9191, "additions": 4738, "deletions": 4453}, "files": [{"sha": "90096122489e118e6938efe92c4916b0d6e1f1af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91bd4114a73ca69e5ce3d904282b402b9f2128d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91bd4114a73ca69e5ce3d904282b402b9f2128d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=91bd4114a73ca69e5ce3d904282b402b9f2128d3", "patch": "@@ -1,3 +1,26 @@\n+2013-09-02  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def\n+\t(dup_lane_scalar): Remove.\n+\t* config/aarch64/aarch64-simd.md\n+\t(aarch64_simd_dup): Add 'w->w' alternative.\n+\t(aarch64_dup_lane<mode>): Allow for VALL.\n+\t(aarch64_dup_lane_scalar<mode>): Remove.\n+\t(aarch64_dup_lane_<vswap_width_name><mode>): New.\n+\t(aarch64_get_lane_signed<mode>): Add w->w altenative.\n+\t(aarch64_get_lane_unsigned<mode>): Likewise.\n+\t(aarch64_get_lane<mode>): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_evpc_dup): New.\n+\t(aarch64_expand_vec_perm_const_1): Use aarch64_evpc_dup.\n+\t* config/aarch64/iterators.md (VSWAP_WIDTH): New.\n+\t(VCON): Change container of V2SF.\n+\t(vswap_width_name): Likewise.\n+\t* config/aarch64/arm_neon.h\n+\t(__aarch64_vdup_lane_any): New.\n+\t(__aarch64_vdup<q>_lane<q>_<fpsu><8,16,32,64>): Likewise.\n+\t(vdup<q>_n_<psuf><8,16,32,64>): Convert to C implementation.\n+\t(vdup<q>_lane<q>_<fpsu><8,16,32,64>): Likewise.\n+\n 2013-09-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR middle-end/56382"}, {"sha": "f4b929edf44fbeebe6da2568a3aa76138eca0609", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91bd4114a73ca69e5ce3d904282b402b9f2128d3/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91bd4114a73ca69e5ce3d904282b402b9f2128d3/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=91bd4114a73ca69e5ce3d904282b402b9f2128d3", "patch": "@@ -336,32 +336,47 @@\n })\n \n (define_insn \"aarch64_simd_dup<mode>\"\n-  [(set (match_operand:VDQ 0 \"register_operand\" \"=w\")\n-        (vec_duplicate:VDQ (match_operand:<VEL> 1 \"register_operand\" \"r\")))]\n+  [(set (match_operand:VDQ 0 \"register_operand\" \"=w, w\")\n+        (vec_duplicate:VDQ (match_operand:<VEL> 1 \"register_operand\" \"r, w\")))]\n+  \"TARGET_SIMD\"\n+  \"@\n+   dup\\\\t%0.<Vtype>, %<vw>1\n+   dup\\\\t%0.<Vtype>, %1.<Vetype>[0]\"\n+  [(set_attr \"simd_type\" \"simd_dupgp, simd_dup\")\n+   (set_attr \"simd_mode\" \"<MODE>\")]\n+)\n+\n+(define_insn \"aarch64_simd_dup<mode>\"\n+  [(set (match_operand:VDQF 0 \"register_operand\" \"=w\")\n+        (vec_duplicate:VDQF (match_operand:<VEL> 1 \"register_operand\" \"w\")))]\n   \"TARGET_SIMD\"\n-  \"dup\\\\t%0.<Vtype>, %<vw>1\"\n-  [(set_attr \"simd_type\" \"simd_dupgp\")\n+  \"dup\\\\t%0.<Vtype>, %1.<Vetype>[0]\"\n+  [(set_attr \"simd_type\" \"simd_dup\")\n    (set_attr \"simd_mode\" \"<MODE>\")]\n )\n \n (define_insn \"aarch64_dup_lane<mode>\"\n-  [(set (match_operand:VDQ_I 0 \"register_operand\" \"=w\")\n-        (vec_duplicate:VDQ_I\n+  [(set (match_operand:VALL 0 \"register_operand\" \"=w\")\n+\t(vec_duplicate:VALL\n \t  (vec_select:<VEL>\n-\t    (match_operand:<VCON> 1 \"register_operand\" \"w\")\n+\t    (match_operand:VALL 1 \"register_operand\" \"w\")\n \t    (parallel [(match_operand:SI 2 \"immediate_operand\" \"i\")])\n           )))]\n   \"TARGET_SIMD\"\n-  \"dup\\\\t%<v>0<Vmtype>, %1.<Vetype>[%2]\"\n+  \"dup\\\\t%0.<Vtype>, %1.<Vetype>[%2]\"\n   [(set_attr \"simd_type\" \"simd_dup\")\n    (set_attr \"simd_mode\" \"<MODE>\")]\n )\n \n-(define_insn \"aarch64_simd_dup<mode>\"\n-  [(set (match_operand:VDQF 0 \"register_operand\" \"=w\")\n-        (vec_duplicate:VDQF (match_operand:<VEL> 1 \"register_operand\" \"w\")))]\n+(define_insn \"aarch64_dup_lane_<vswap_width_name><mode>\"\n+  [(set (match_operand:VALL 0 \"register_operand\" \"=w\")\n+\t(vec_duplicate:VALL\n+\t  (vec_select:<VEL>\n+\t    (match_operand:<VSWAP_WIDTH> 1 \"register_operand\" \"w\")\n+\t    (parallel [(match_operand:SI 2 \"immediate_operand\" \"i\")])\n+          )))]\n   \"TARGET_SIMD\"\n-  \"dup\\\\t%0.<Vtype>, %1.<Vetype>[0]\"\n+  \"dup\\\\t%0.<Vtype>, %1.<Vetype>[%2]\"\n   [(set_attr \"simd_type\" \"simd_dup\")\n    (set_attr \"simd_mode\" \"<MODE>\")]\n )"}, {"sha": "7635e1e26798664a8f5715e8522081c86923a306", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91bd4114a73ca69e5ce3d904282b402b9f2128d3/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91bd4114a73ca69e5ce3d904282b402b9f2128d3/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=91bd4114a73ca69e5ce3d904282b402b9f2128d3", "patch": "@@ -7931,6 +7931,55 @@ aarch64_evpc_zip (struct expand_vec_perm_d *d)\n   return true;\n }\n \n+static bool\n+aarch64_evpc_dup (struct expand_vec_perm_d *d)\n+{\n+  rtx (*gen) (rtx, rtx, rtx);\n+  rtx out = d->target;\n+  rtx in0;\n+  enum machine_mode vmode = d->vmode;\n+  unsigned int i, elt, nelt = d->nelt;\n+  rtx lane;\n+\n+  /* TODO: This may not be big-endian safe.  */\n+  if (BYTES_BIG_ENDIAN)\n+    return false;\n+\n+  elt = d->perm[0];\n+  for (i = 1; i < nelt; i++)\n+    {\n+      if (elt != d->perm[i])\n+\treturn false;\n+    }\n+\n+  /* The generic preparation in aarch64_expand_vec_perm_const_1\n+     swaps the operand order and the permute indices if it finds\n+     d->perm[0] to be in the second operand.  Thus, we can always\n+     use d->op0 and need not do any extra arithmetic to get the\n+     correct lane number.  */\n+  in0 = d->op0;\n+  lane = GEN_INT (elt);\n+\n+  switch (vmode)\n+    {\n+    case V16QImode: gen = gen_aarch64_dup_lanev16qi; break;\n+    case V8QImode: gen = gen_aarch64_dup_lanev8qi; break;\n+    case V8HImode: gen = gen_aarch64_dup_lanev8hi; break;\n+    case V4HImode: gen = gen_aarch64_dup_lanev4hi; break;\n+    case V4SImode: gen = gen_aarch64_dup_lanev4si; break;\n+    case V2SImode: gen = gen_aarch64_dup_lanev2si; break;\n+    case V2DImode: gen = gen_aarch64_dup_lanev2di; break;\n+    case V4SFmode: gen = gen_aarch64_dup_lanev4sf; break;\n+    case V2SFmode: gen = gen_aarch64_dup_lanev2sf; break;\n+    case V2DFmode: gen = gen_aarch64_dup_lanev2df; break;\n+    default:\n+      return false;\n+    }\n+\n+  emit_insn (gen (out, in0, lane));\n+  return true;\n+}\n+\n static bool\n aarch64_evpc_tbl (struct expand_vec_perm_d *d)\n {\n@@ -7988,6 +8037,8 @@ aarch64_expand_vec_perm_const_1 (struct expand_vec_perm_d *d)\n \treturn true;\n       else if (aarch64_evpc_trn (d))\n \treturn true;\n+      else if (aarch64_evpc_dup (d))\n+\treturn true;\n       return aarch64_evpc_tbl (d);\n     }\n   return false;"}, {"sha": "e289a0dd459609a5cd559ea10963ad845bfb2e4b", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 4577, "deletions": 4432, "changes": 9009, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91bd4114a73ca69e5ce3d904282b402b9f2128d3/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91bd4114a73ca69e5ce3d904282b402b9f2128d3/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=91bd4114a73ca69e5ce3d904282b402b9f2128d3"}, {"sha": "ffe125b5583c07d4e08c2e6d3de8dcf8be04baee", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91bd4114a73ca69e5ce3d904282b402b9f2128d3/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91bd4114a73ca69e5ce3d904282b402b9f2128d3/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=91bd4114a73ca69e5ce3d904282b402b9f2128d3", "patch": "@@ -383,7 +383,7 @@\n \t\t\t(V4HI \"V8HI\") (V8HI \"V8HI\")\n \t\t\t(V2SI \"V4SI\") (V4SI \"V4SI\")\n \t\t\t(DI   \"V2DI\") (V2DI \"V2DI\")\n-\t\t\t(V2SF \"V2SF\") (V4SF \"V4SF\")\n+\t\t\t(V2SF \"V4SF\") (V4SF \"V4SF\")\n \t\t\t(V2DF \"V2DF\") (SI   \"V4SI\")\n \t\t\t(HI   \"V8HI\") (QI   \"V16QI\")])\n \n@@ -527,6 +527,20 @@\n (define_mode_attr fcvt_target [(V2DF \"v2di\") (V4SF \"v4si\") (V2SF \"v2si\")])\n (define_mode_attr FCVT_TARGET [(V2DF \"V2DI\") (V4SF \"V4SI\") (V2SF \"V2SI\")])\n \n+(define_mode_attr VSWAP_WIDTH [(V8QI \"V16QI\") (V16QI \"V8QI\")\n+\t\t\t\t(V4HI \"V8HI\") (V8HI  \"V4HI\")\n+\t\t\t\t(V2SI \"V4SI\") (V4SI  \"V2SI\")\n+\t\t\t\t(DI   \"V2DI\") (V2DI  \"DI\")\n+\t\t\t\t(V2SF \"V4SF\") (V4SF  \"V2SF\")\n+\t\t\t\t(DF   \"V2DF\") (V2DF  \"DF\")])\n+\n+(define_mode_attr vswap_width_name [(V8QI \"to_128\") (V16QI \"to_64\")\n+\t\t\t\t    (V4HI \"to_128\") (V8HI  \"to_64\")\n+\t\t\t\t    (V2SI \"to_128\") (V4SI  \"to_64\")\n+\t\t\t\t    (DI   \"to_128\") (V2DI  \"to_64\")\n+\t\t\t\t    (V2SF \"to_128\") (V4SF  \"to_64\")\n+\t\t\t\t    (DF   \"to_128\") (V2DF  \"to_64\")])\n+\n ;; -------------------------------------------------------------------\n ;; Code Iterators\n ;; -------------------------------------------------------------------"}, {"sha": "d3892f696ea04a75fbd559fe8de9d366ec7b2103", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91bd4114a73ca69e5ce3d904282b402b9f2128d3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91bd4114a73ca69e5ce3d904282b402b9f2128d3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=91bd4114a73ca69e5ce3d904282b402b9f2128d3", "patch": "@@ -1,3 +1,8 @@\n+2013-09-02  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* gcc.target/aarch64/scalar_intrinsics.c\n+\t(vdup<bhsd>_lane<su><8,16,32,64>): Force values to SIMD registers.\n+\n 2013-09-02  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/57511"}, {"sha": "aa041cc2c20e2bb4354d4f168ac29334b16157a5", "filename": "gcc/testsuite/gcc.target/aarch64/scalar_intrinsics.c", "status": "modified", "additions": 40, "deletions": 8, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91bd4114a73ca69e5ce3d904282b402b9f2128d3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar_intrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91bd4114a73ca69e5ce3d904282b402b9f2128d3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar_intrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar_intrinsics.c?ref=91bd4114a73ca69e5ce3d904282b402b9f2128d3", "patch": "@@ -198,55 +198,87 @@ test_vcltzd_s64 (int64x1_t a)\n int8x1_t\n test_vdupb_lane_s8 (int8x16_t a)\n {\n-  return vdupb_lane_s8 (a, 2);\n+  int8x1_t res;\n+  force_simd (a);\n+  res = vdupb_laneq_s8 (a, 2);\n+  force_simd (res);\n+  return res;\n }\n \n uint8x1_t\n test_vdupb_lane_u8 (uint8x16_t a)\n {\n-  return vdupb_lane_u8 (a, 2);\n+  uint8x1_t res;\n+  force_simd (a);\n+  res = vdupb_laneq_u8 (a, 2);\n+  force_simd (res);\n+  return res;\n }\n \n /* { dg-final { scan-assembler-times \"aarch64_get_lanev8hi\" 2 } } */\n \n int16x1_t\n test_vduph_lane_s16 (int16x8_t a)\n {\n-  return vduph_lane_s16 (a, 2);\n+  int16x1_t res;\n+  force_simd (a);\n+  res = vduph_laneq_s16 (a, 2);\n+  force_simd (res);\n+  return res;\n }\n \n uint16x1_t\n test_vduph_lane_u16 (uint16x8_t a)\n {\n-  return vduph_lane_u16 (a, 2);\n+  uint16x1_t res;\n+  force_simd (a);\n+  res = vduph_laneq_u16 (a, 2);\n+  force_simd (res);\n+  return res;\n }\n \n /* { dg-final { scan-assembler-times \"aarch64_get_lanev4si\" 2 } } */\n \n int32x1_t\n test_vdups_lane_s32 (int32x4_t a)\n {\n-  return vdups_lane_s32 (a, 2);\n+  int32x1_t res;\n+  force_simd (a);\n+  res = vdups_laneq_s32 (a, 2);\n+  force_simd (res);\n+  return res;\n }\n \n uint32x1_t\n test_vdups_lane_u32 (uint32x4_t a)\n {\n-  return vdups_lane_u32 (a, 2);\n+  uint32x1_t res;\n+  force_simd (a);\n+  res = vdups_laneq_u32 (a, 2);\n+  force_simd (res);\n+  return res;\n }\n \n /* { dg-final { scan-assembler-times \"aarch64_get_lanev2di\" 2 } } */\n \n int64x1_t\n test_vdupd_lane_s64 (int64x2_t a)\n {\n-  return vdupd_lane_s64 (a, 1);\n+  int64x1_t res;\n+  force_simd (a);\n+  res = vdupd_laneq_s64 (a, 1);\n+  force_simd (res);\n+  return res;\n }\n \n uint64x1_t\n test_vdupd_lane_u64 (uint64x2_t a)\n {\n-  return vdupd_lane_u64 (a, 1);\n+  uint64x1_t res;\n+  force_simd (a);\n+  res = vdupd_laneq_u64 (a, 1);\n+  force_simd (res);\n+  return res;\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tcmtst\\\\td\\[0-9\\]+, d\\[0-9\\]+, d\\[0-9\\]+\" 2 } } */"}]}