{"sha": "e154242724b084380e3221df7c08fcdbd8460674", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE1NDI0MjcyNGIwODQzODBlMzIyMWRmN2MwOGZjZGJkODQ2MDY3NA==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2019-05-22T04:34:26Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2019-05-22T04:34:26Z"}, "message": "[RS6000] Don't pass -many to the assembler\n\nI'd like to remove -many from the options passed by default to the\nassembler, on the grounds that a gcc bug in instruction selection (eg.\nemitting a power9 insn for -mcpu=power8) is better found at assembly\ntime than run time.\n\nFor now, just do this when --enable-checking or gcc is not a release.\n\nThis patch also emits .machine assembler directives for ELF targets\nwhen functions are compiled for different cpus via attributes or\npragmas.  That's necessary when the initial -m<cpu> option passed to\nthe assembler doesn't enable the superset of all opcodes emitted, as\nseen by a failure of gcc.target/powerpc/clone2.c without .machine\nwhen building gcc for power8.\n\nrs6000_machine_from_flags deliberately uses ISA_2_4_MASKS rather than\nISA_2_2_MASKS for power5 because \"friz\" and other similar instructions\nenabled by gcc with TARGET_FPRND are enabled in gas by \"-mpower5\".\n(gas -mpower5 supports power5+ too.)  rs6000-cpus.def puts\nOPTION_MASK_FPRND in ISA_2_4_MASKS, so ISA_2_4_MASKS is the one to use\nin deciding to pass \"-mpower5\" to gas.\n\nO3-pr70130.c also failed on an earlier version of this patch (when\nonly testing one ISA bit to determine .machine).  This is a test for a\npower7 vector bug, but on power8 hw check_vect_support_and_set_flags\npasses -mpower8-vector which means the test isn't exercising the\noriginal bug exactly.  I reckon that is wrong, and similary for other\nvector testcases that ask for a specific cpu.  I've fixed it here by\nexplicitly passing -mno-power8-vector and similar vector options.\n\n\t* config/rs6000/rs6000.h (ASM_OPT_ANY): Define.\n\t(ASM_CPU_SPEC): Conditionally add -many.\n\t* config/rs6000/rs6000.c (rs6000_machine): New static var.\n\t(rs6000_machine_from_flags, emit_asm_machine): New functions..\n\t(rs6000_file_start): ..extracted from here, and modified to\n\ttest all ISA bits.\n\t(rs6000_output_function_prologue): Emit .machine as necessary.\n\t* testsuite/gcc.target/powerpc/ppc32-abi-dfp-1.c: Don't use\n\tpower mnemonics.\n\t* testsuite/gcc.dg/vect/O3-pr70130.c: Disable default options\n\tadded by check_vect_support_and_set_flags.\n\t* testsuite/gcc.dg/vect/pr48765.c: Likewise.\n\t* testsuite/gfortran.dg/vect/pr45714-b.f: Likewise.\n\nFrom-SVN: r271500", "tree": {"sha": "0db56ea4ad3840ad32523d630157038f27fa3d03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0db56ea4ad3840ad32523d630157038f27fa3d03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e154242724b084380e3221df7c08fcdbd8460674", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e154242724b084380e3221df7c08fcdbd8460674", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e154242724b084380e3221df7c08fcdbd8460674", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e154242724b084380e3221df7c08fcdbd8460674/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0acb03ae877cd9e9afbc0f02ec74ca3427ec70c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0acb03ae877cd9e9afbc0f02ec74ca3427ec70c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0acb03ae877cd9e9afbc0f02ec74ca3427ec70c1"}], "stats": {"total": 111, "additions": 78, "deletions": 33}, "files": [{"sha": "35242bc329cca54ab03c274419b4917f873d3e86", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e154242724b084380e3221df7c08fcdbd8460674/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e154242724b084380e3221df7c08fcdbd8460674/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e154242724b084380e3221df7c08fcdbd8460674", "patch": "@@ -1,3 +1,19 @@\n+2019-05-22  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000.h (ASM_OPT_ANY): Define.\n+\t(ASM_CPU_SPEC): Conditionally add -many.\n+\t* config/rs6000/rs6000.c (rs6000_machine): New static var.\n+\t(rs6000_machine_from_flags, emit_asm_machine): New functions..\n+\t(rs6000_file_start): ..extracted from here, and modified to\n+\ttest all ISA bits.\n+\t(rs6000_output_function_prologue): Emit .machine as necessary.\n+\t* testsuite/gcc.target/powerpc/ppc32-abi-dfp-1.c: Don't use\n+\tpower mnemonics.\n+\t* testsuite/gcc.dg/vect/O3-pr70130.c: Disable default options\n+\tadded by check_vect_support_and_set_flags.\n+\t* testsuite/gcc.dg/vect/pr48765.c: Likewise.\n+\t* testsuite/gfortran.dg/vect/pr45714-b.f: Likewise.\n+\n 2019-05-22  Hans-Peter Nilsson  <hp@axis.com>\n \n \tPR middle-end/90553"}, {"sha": "d08ba6c2d01eb7cee244518baf255238f7f7f24f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 43, "deletions": 20, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e154242724b084380e3221df7c08fcdbd8460674/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e154242724b084380e3221df7c08fcdbd8460674/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=e154242724b084380e3221df7c08fcdbd8460674", "patch": "@@ -5632,6 +5632,36 @@ rs6000_builtin_md_vectorized_function (tree fndecl, tree type_out,\n /* Default CPU string for rs6000*_file_start functions.  */\n static const char *rs6000_default_cpu;\n \n+#ifdef USING_ELFOS_H\n+static const char *rs6000_machine;\n+\n+static const char *\n+rs6000_machine_from_flags (void)\n+{\n+  if ((rs6000_isa_flags & (ISA_3_0_MASKS_SERVER & ~ISA_2_7_MASKS_SERVER)) != 0)\n+    return \"power9\";\n+  if ((rs6000_isa_flags & (ISA_2_7_MASKS_SERVER & ~ISA_2_6_MASKS_SERVER)) != 0)\n+    return \"power8\";\n+  if ((rs6000_isa_flags & (ISA_2_6_MASKS_SERVER & ~ISA_2_5_MASKS_SERVER)) != 0)\n+    return \"power7\";\n+  if ((rs6000_isa_flags & (ISA_2_5_MASKS_SERVER & ~ISA_2_4_MASKS)) != 0)\n+    return \"power6\";\n+  if ((rs6000_isa_flags & (ISA_2_4_MASKS & ~ISA_2_1_MASKS)) != 0)\n+    return \"power5\";\n+  if ((rs6000_isa_flags & ISA_2_1_MASKS) != 0)\n+    return \"power4\";\n+  if ((rs6000_isa_flags & OPTION_MASK_POWERPC64) != 0)\n+    return \"ppc64\";\n+  return \"ppc\";\n+}\n+\n+static void\n+emit_asm_machine (void)\n+{\n+  fprintf (asm_out_file, \"\\t.machine %s\\n\", rs6000_machine);\n+}\n+#endif\n+\n /* Do anything needed at the start of the asm file.  */\n \n static void\n@@ -5697,27 +5727,10 @@ rs6000_file_start (void)\n     }\n \n #ifdef USING_ELFOS_H\n+  rs6000_machine = rs6000_machine_from_flags ();\n   if (!(rs6000_default_cpu && rs6000_default_cpu[0])\n       && !global_options_set.x_rs6000_cpu_index)\n-    {\n-      fputs (\"\\t.machine \", asm_out_file);\n-      if ((rs6000_isa_flags & OPTION_MASK_MODULO) != 0)\n-\tfputs (\"power9\\n\", asm_out_file);\n-      else if ((rs6000_isa_flags & OPTION_MASK_DIRECT_MOVE) != 0)\n-\tfputs (\"power8\\n\", asm_out_file);\n-      else if ((rs6000_isa_flags & OPTION_MASK_POPCNTD) != 0)\n-\tfputs (\"power7\\n\", asm_out_file);\n-      else if ((rs6000_isa_flags & OPTION_MASK_CMPB) != 0)\n-\tfputs (\"power6\\n\", asm_out_file);\n-      else if ((rs6000_isa_flags & OPTION_MASK_POPCNTB) != 0)\n-\tfputs (\"power5\\n\", asm_out_file);\n-      else if ((rs6000_isa_flags & OPTION_MASK_MFCRF) != 0)\n-\tfputs (\"power4\\n\", asm_out_file);\n-      else if ((rs6000_isa_flags & OPTION_MASK_POWERPC64) != 0)\n-\tfputs (\"ppc64\\n\", asm_out_file);\n-      else\n-\tfputs (\"ppc\\n\", asm_out_file);\n-    }\n+    emit_asm_machine ();\n #endif\n \n   if (DEFAULT_ABI == ABI_ELFv2)\n@@ -27504,7 +27517,17 @@ static void\n rs6000_output_function_prologue (FILE *file)\n {\n   if (!cfun->is_thunk)\n-    rs6000_output_savres_externs (file);\n+    {\n+      rs6000_output_savres_externs (file);\n+#ifdef USING_ELFOS_H\n+      const char *curr_machine = rs6000_machine_from_flags ();\n+      if (rs6000_machine != curr_machine)\n+\t{\n+\t  rs6000_machine = curr_machine;\n+\t  emit_asm_machine ();\n+\t}\n+#endif\n+    }\n \n   /* ELFv2 ABI r2 setup code and local entry point.  This must follow\n      immediately after the global entry point label.  */"}, {"sha": "98a15854b425df8d6fb32cf0436d26b01c1a4cba", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e154242724b084380e3221df7c08fcdbd8460674/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e154242724b084380e3221df7c08fcdbd8460674/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=e154242724b084380e3221df7c08fcdbd8460674", "patch": "@@ -70,6 +70,12 @@\n #define PPC405_ERRATUM77 0\n #endif\n \n+#if CHECKING_P\n+#define ASM_OPT_ANY \"\"\n+#else\n+#define ASM_OPT_ANY \" -many\"\n+#endif\n+\n /* Common ASM definitions used by ASM_SPEC among the various targets for\n    handling -mcpu=xxx switches.  There is a parallel list in driver-rs6000.c to\n    provide the default assembler options if the user uses -mcpu=native, so if\n@@ -137,8 +143,8 @@\n \t    mvsx: -mpower7; \\\n \t    mpowerpc64: -mppc64;: %(asm_default)}; \\\n   :%eMissing -mcpu option in ASM_CPU_SPEC?\\n} \\\n-%{mvsx: -mvsx -maltivec; maltivec: -maltivec} \\\n--many\"\n+%{mvsx: -mvsx -maltivec; maltivec: -maltivec}\" \\\n+ASM_OPT_ANY\n \n #define CPP_DEFAULT_SPEC \"\"\n "}, {"sha": "f8b84405140e87a2244ae9f5db6136af2fe9cf57", "filename": "gcc/testsuite/gcc.dg/vect/O3-pr70130.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e154242724b084380e3221df7c08fcdbd8460674/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2FO3-pr70130.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e154242724b084380e3221df7c08fcdbd8460674/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2FO3-pr70130.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2FO3-pr70130.c?ref=e154242724b084380e3221df7c08fcdbd8460674", "patch": "@@ -1,5 +1,5 @@\n /* { dg-require-effective-target vsx_hw { target powerpc*-*-* } } */\n-/* { dg-additional-options \"-mcpu=power7\" { target powerpc*-*-* } } */\n+/* { dg-additional-options \"-mcpu=power7 -mno-power9-vector -mno-power8-vector\" { target powerpc*-*-* } } */\n \n #include \"tree-vect.h\"\n "}, {"sha": "b091a145d0f6f7cde4bffef15ee39f0293ff48de", "filename": "gcc/testsuite/gcc.dg/vect/pr48765.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e154242724b084380e3221df7c08fcdbd8460674/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr48765.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e154242724b084380e3221df7c08fcdbd8460674/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr48765.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr48765.c?ref=e154242724b084380e3221df7c08fcdbd8460674", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile { target { powerpc*-*-* } } } */\n /* { dg-skip-if \"do not override -mcpu\" { *-*-* } { \"-mcpu=*\" } { \"-mcpu=power6\" } } */\n-/* { dg-additional-options \"-O3 -mcpu=power6\" } */\n+/* { dg-additional-options \"-O3 -mcpu=power6 -mno-power9-vector -mno-power8-vector -mno-vsx\" } */\n \n enum reg_class\n {"}, {"sha": "eea7f6ffc2ea5bf3b610631c32b5bb584b7ad0e7", "filename": "gcc/testsuite/gcc.target/powerpc/ppc32-abi-dfp-1.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e154242724b084380e3221df7c08fcdbd8460674/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc32-abi-dfp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e154242724b084380e3221df7c08fcdbd8460674/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc32-abi-dfp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc32-abi-dfp-1.c?ref=e154242724b084380e3221df7c08fcdbd8460674", "patch": "@@ -45,14 +45,14 @@ __asm__ (\"\\t.globl\\t\" #NAME \"_asm\\n\\t\"\t\t\t\t\t\\\n \t #NAME \"_asm:\\n\\t\"\t\t\t\t\t\t\\\n \t \"lis 11,gparms@ha\\n\\t\"\t\t\t\t\t\t\\\n \t \"la 11,gparms@l(11)\\n\\t\"\t\t\t\t\t\\\n-\t \"st 3,0(11)\\n\\t\"\t\t\t\t\t\t\\\n-\t \"st 4,4(11)\\n\\t\"\t\t\t\t\t\t\\\n-\t \"st 5,8(11)\\n\\t\"\t\t\t\t\t\t\\\n-\t \"st 6,12(11)\\n\\t\"\t\t\t\t\t\t\\\n-\t \"st 7,16(11)\\n\\t\"\t\t\t\t\t\t\\\n-\t \"st 8,20(11)\\n\\t\"\t\t\t\t\t\t\\\n-\t \"st 9,24(11)\\n\\t\"\t\t\t\t\t\t\\\n-\t \"st 10,28(11)\\n\\t\"\t\t\t\t\t\t\\\n+\t \"stw 3,0(11)\\n\\t\"\t\t\t\t\t\t\\\n+\t \"stw 4,4(11)\\n\\t\"\t\t\t\t\t\t\\\n+\t \"stw 5,8(11)\\n\\t\"\t\t\t\t\t\t\\\n+\t \"stw 6,12(11)\\n\\t\"\t\t\t\t\t\t\\\n+\t \"stw 7,16(11)\\n\\t\"\t\t\t\t\t\t\\\n+\t \"stw 8,20(11)\\n\\t\"\t\t\t\t\t\t\\\n+\t \"stw 9,24(11)\\n\\t\"\t\t\t\t\t\t\\\n+\t \"stw 10,28(11)\\n\\t\"\t\t\t\t\t\t\\\n \t \"stfd 1,32(11)\\n\\t\"\t\t\t\t\t\t\\\n \t \"stfd 2,40(11)\\n\\t\"\t\t\t\t\t\t\\\n \t \"stfd 3,48(11)\\n\\t\"\t\t\t\t\t\t\\"}, {"sha": "abf33cd25b816f897f006585df0db9d83a5b9d51", "filename": "gcc/testsuite/gfortran.dg/vect/pr45714-b.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e154242724b084380e3221df7c08fcdbd8460674/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr45714-b.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e154242724b084380e3221df7c08fcdbd8460674/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr45714-b.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr45714-b.f?ref=e154242724b084380e3221df7c08fcdbd8460674", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile { target powerpc*-*-* } }\n-! { dg-additional-options \"-O3 -mcpu=power7 -ffast-math -mveclibabi=mass\" }\n+! { dg-additional-options \"-O3 -mcpu=power7 -mno-power9-vector -mno-power8-vector -ffast-math -mveclibabi=mass\" }\n \n       integer index(18),i,j,k,l,ipiv(18),info,ichange,neq,lda,ldb,\n      &  nrhs,iplas"}]}