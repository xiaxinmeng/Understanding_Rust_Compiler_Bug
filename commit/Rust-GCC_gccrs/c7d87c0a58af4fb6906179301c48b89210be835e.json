{"sha": "c7d87c0a58af4fb6906179301c48b89210be835e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdkODdjMGE1OGFmNGZiNjkwNjE3OTMwMWM0OGI4OTIxMGJlODM1ZQ==", "commit": {"author": {"name": "Benjamin Chelf", "email": "chelf@codesourcery.com", "date": "2000-06-17T02:37:23Z"}, "committer": {"name": "Ben Chelf", "email": "chelf@gcc.gnu.org", "date": "2000-06-17T02:37:23Z"}, "message": "c-common.c (c_tree_code_type): New array.\n\n\t* c-common.c (c_tree_code_type): New array.\n        (c_tree_code_length): Likewise.\n\t(c_tree_code_name): Likewise.\n\t(add_c_tree_codes): New function.\n\n        * c-common.h (add_c_tree_codes): Declare.\n        (enum c_tree_code): New enum.\n\n\t* c-lex.c (init_parse): Added call to add_c_tree_codes.\n\n        * cp/cp-tree.h (enum cplus_tree_code): Changed __DUMMY to\n\tCP_DUMMY_TREE_CODE. Remove #include \"c-common.def\".\n\n\t* cp/lex.c (cplus_tree_code_type[]): Removed #include \"c-common.def\".\n        (cplus_tree_code_length[]): Likewise.\n        (cplus_tree_code_name[]): Likewise.\n\t(init_parse): Added call to add_c_tree_codes. Changed\n\tLAST_AND_UNUSED_TREE_CODE to LAST_C_TREE_CODE.\n\nFrom-SVN: r34577", "tree": {"sha": "0de1cb8ed60b2da04d155bdb3c2d0ec60c45632c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0de1cb8ed60b2da04d155bdb3c2d0ec60c45632c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7d87c0a58af4fb6906179301c48b89210be835e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7d87c0a58af4fb6906179301c48b89210be835e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7d87c0a58af4fb6906179301c48b89210be835e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7d87c0a58af4fb6906179301c48b89210be835e/comments", "author": null, "committer": null, "parents": [{"sha": "cf6d5133a14cca405a9d527dc966b8d15415e8e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf6d5133a14cca405a9d527dc966b8d15415e8e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf6d5133a14cca405a9d527dc966b8d15415e8e7"}], "stats": {"total": 116, "additions": 100, "deletions": 16}, "files": [{"sha": "1a6a25fd75f39096245900e0cbc2dadcef830602", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d87c0a58af4fb6906179301c48b89210be835e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d87c0a58af4fb6906179301c48b89210be835e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7d87c0a58af4fb6906179301c48b89210be835e", "patch": "@@ -1,3 +1,15 @@\n+2000-06-16  Benjamin Chelf  <chelf@codesourcery.com>\n+\n+\t* c-common.c (c_tree_code_type): New array.\n+\t(c_tree_code_length): Likewise.\n+\t(c_tree_code_name): Likewise.\n+\t(add_c_tree_codes): New function.\n+\n+\t* c-common.h (add_c_tree_codes): Declare.\n+\t(enum c_tree_code): New enum.\n+\n+\t* c-lex.c (init_parse): Added call to add_c_tree_codes.\n+\t\n 2000-06-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* fixinc/inclhack.def (ctrl_quotes_def, io_quotes_def): Modify\n@@ -37,7 +49,7 @@ Wed Jun 14 23:46:26 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \t(print_operand): Remove unused variables neg and op.\n \t(toc_hash_mark_entry): Fix prototype.\n \n-2000-06-14  Benjamin Chelf  <chelf@cabriolet.stanford.edu>\n+2000-06-14  Benjamin Chelf  <chelf@codesourcery.com>\n \n \t* c-common.h (IF_COND): Moved here from cp/cp-tree.h.\n \t(THEN_CLAUSE): Likewise."}, {"sha": "f74cad28ab8d6ba224e64f3bd38b6bbe54c433ee", "filename": "gcc/c-common.c", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d87c0a58af4fb6906179301c48b89210be835e/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d87c0a58af4fb6906179301c48b89210be835e/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=c7d87c0a58af4fb6906179301c48b89210be835e", "patch": "@@ -3962,3 +3962,52 @@ expand_tree_builtin (function, params, coerced_params)\n \n   return NULL_TREE;\n }\n+\n+/* Tree code classes. */\n+\n+#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n+\n+static char c_tree_code_type[] = {\n+  'x',\n+#include \"c-common.def\"\n+};\n+#undef DEFTREECODE\n+\n+/* Table indexed by tree code giving number of expression\n+   operands beyond the fixed part of the node structure.\n+   Not used for types or decls.  */\n+\n+#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n+\n+static int c_tree_code_length[] = {\n+  0,\n+#include \"c-common.def\"\n+};\n+#undef DEFTREECODE\n+\n+/* Names of tree components.\n+   Used for printing out the tree and error messages.  */\n+#define DEFTREECODE(SYM, NAME, TYPE, LEN) NAME,\n+\n+static const char *c_tree_code_name[] = {\n+  \"@@dummy\",\n+#include \"c-common.def\"\n+};\n+#undef DEFTREECODE\n+\n+/* Adds the tree codes specific to the C front end to the list of all\n+   tree codes. */\n+\n+void\n+add_c_tree_codes (void)\n+{\n+  memcpy (tree_code_type + (int) LAST_AND_UNUSED_TREE_CODE,\n+\t  c_tree_code_type,\n+\t  (int)LAST_C_TREE_CODE - (int)LAST_AND_UNUSED_TREE_CODE);\n+  memcpy (tree_code_length + (int) LAST_AND_UNUSED_TREE_CODE,\n+\t  c_tree_code_length,\n+\t  (LAST_C_TREE_CODE - (int)LAST_AND_UNUSED_TREE_CODE) * sizeof (int));\n+  memcpy (tree_code_name + (int) LAST_AND_UNUSED_TREE_CODE,\n+\t  c_tree_code_name,\n+\t  (LAST_C_TREE_CODE - (int)LAST_AND_UNUSED_TREE_CODE) * sizeof (char *));\n+}"}, {"sha": "81a5127dbf4c682080cde2df316a02cbbc883ad4", "filename": "gcc/c-common.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d87c0a58af4fb6906179301c48b89210be835e/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d87c0a58af4fb6906179301c48b89210be835e/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=c7d87c0a58af4fb6906179301c48b89210be835e", "patch": "@@ -246,3 +246,16 @@ extern tree simple_type_promotes_to\t\tPARAMS ((tree));\n    function ended.  */\n #define STMT_LINENO_FOR_FN_P(NODE) \t\t\\\n   (TREE_LANG_FLAG_2 ((NODE)))\n+\n+\n+#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) SYM,\n+\n+enum c_tree_code {\n+  C_DUMMY_TREE_CODE = LAST_AND_UNUSED_TREE_CODE,\n+#include \"c-common.def\"\n+  LAST_C_TREE_CODE\n+};\n+\n+#undef DEFTREECODE\n+\n+extern void add_c_tree_codes\t\t        PARAMS ((void));"}, {"sha": "2e6e5a9ad887eebd942a4d976938011851ef234f", "filename": "gcc/c-lex.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d87c0a58af4fb6906179301c48b89210be835e/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d87c0a58af4fb6906179301c48b89210be835e/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=c7d87c0a58af4fb6906179301c48b89210be835e", "patch": "@@ -252,6 +252,8 @@ init_parse (filename)\n   cpp_token = CPP_DIRECTIVE;\n #endif\n \n+  add_c_tree_codes ();\n+  \n   init_lex ();\n   init_pragma ();\n "}, {"sha": "cdc722111ac2b83273422dd52e84e50c9248c8f1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d87c0a58af4fb6906179301c48b89210be835e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d87c0a58af4fb6906179301c48b89210be835e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c7d87c0a58af4fb6906179301c48b89210be835e", "patch": "@@ -1,3 +1,14 @@\n+2000-06-16  Benjamin Chelf  <chelf@codesourcery.com>\n+\n+\t* cp-tree.h (enum cplus_tree_code): Changed __DUMMY to\n+\tCP_DUMMY_TREE_CODE. Remove #include \"c-common.def\".\n+\n+\t* lex.c (cplus_tree_code_type[]): Removed #include \"c-common.def\".\n+\t(cplus_tree_code_length[]): Likewise.\n+\t(cplus_tree_code_name[]): Likewise.\n+\t(init_parse): Added call to add_c_tree_codes. Changed \n+\tLAST_AND_UNUSED_TREE_CODE to LAST_C_TREE_CODE.\n+\t\n 2000-06-16  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (finish_mem_initializers): Declare.\n@@ -69,7 +80,7 @@\n \t\n \t* cp-tree.h (DECL_PENDING_INLINE_P): Relax checking.\n \n-2000-06-14  Benjamin Chelf  <chelf@cabriolet.stanford.edu>\n+2000-06-14  Benjamin Chelf  <chelf@codesourcery.com>\n \n \t* cp-tree.h (IF_COND): Move to c-common.h.\n \t(THEN_CLAUSE): Likewise."}, {"sha": "d7848ba92fda44dc96b12ad04d3c3586a03bacf8", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d87c0a58af4fb6906179301c48b89210be835e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d87c0a58af4fb6906179301c48b89210be835e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c7d87c0a58af4fb6906179301c48b89210be835e", "patch": "@@ -1250,8 +1250,7 @@ extern void (*back_end_hook) PARAMS ((tree));\n /* C++ language-specific tree codes.  */\n #define DEFTREECODE(SYM, NAME, TYPE, LENGTH) SYM,\n enum cplus_tree_code {\n-  __DUMMY = LAST_AND_UNUSED_TREE_CODE,\n-#include \"c-common.def\"\n+  CP_DUMMY_TREE_CODE = LAST_C_TREE_CODE,\n #include \"cp-tree.def\"\n   LAST_CPLUS_TREE_CODE\n };"}, {"sha": "fee13f4a9685b7b9b9c08c149bec7b179823509e", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d87c0a58af4fb6906179301c48b89210be835e/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d87c0a58af4fb6906179301c48b89210be835e/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=c7d87c0a58af4fb6906179301c48b89210be835e", "patch": "@@ -341,15 +341,13 @@ get_time_identifier (name)\n   return time_identifier;\n }\n \f\n-/* Table indexed by tree code giving a string containing a character\n-   classifying the tree code.  Possibilities are\n-   t, d, s, c, r, <, 1 and 2.  See cp/cp-tree.def for details.  */\n+\n+/* Tree code classes. */\n \n #define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n \n static char cplus_tree_code_type[] = {\n   'x',\n-#include \"c-common.def\"\n #include \"cp-tree.def\"\n };\n #undef DEFTREECODE\n@@ -362,7 +360,6 @@ static char cplus_tree_code_type[] = {\n \n static int cplus_tree_code_length[] = {\n   0,\n-#include \"c-common.def\"\n #include \"cp-tree.def\"\n };\n #undef DEFTREECODE\n@@ -373,7 +370,6 @@ static int cplus_tree_code_length[] = {\n \n static const char *cplus_tree_code_name[] = {\n   \"@@dummy\",\n-#include \"c-common.def\"\n #include \"cp-tree.def\"\n };\n #undef DEFTREECODE\n@@ -584,15 +580,17 @@ init_parse (filename)\n   init_tree ();\n   init_cplus_expand ();\n \n-  memcpy (tree_code_type + (int) LAST_AND_UNUSED_TREE_CODE,\n+  add_c_tree_codes ();\n+\n+  memcpy (tree_code_type + (int) LAST_C_TREE_CODE,\n \t  cplus_tree_code_type,\n-\t  (int)LAST_CPLUS_TREE_CODE - (int)LAST_AND_UNUSED_TREE_CODE);\n-  memcpy (tree_code_length + (int) LAST_AND_UNUSED_TREE_CODE,\n+\t  (int)LAST_CPLUS_TREE_CODE - (int)LAST_C_TREE_CODE);\n+  memcpy (tree_code_length + (int) LAST_C_TREE_CODE,\n \t  cplus_tree_code_length,\n-\t  (LAST_CPLUS_TREE_CODE - (int)LAST_AND_UNUSED_TREE_CODE) * sizeof (int));\n-  memcpy (tree_code_name + (int) LAST_AND_UNUSED_TREE_CODE,\n+\t  (LAST_CPLUS_TREE_CODE - (int)LAST_C_TREE_CODE) * sizeof (int));\n+  memcpy (tree_code_name + (int) LAST_C_TREE_CODE,\n \t  cplus_tree_code_name,\n-\t  (LAST_CPLUS_TREE_CODE - (int)LAST_AND_UNUSED_TREE_CODE) * sizeof (char *));\n+\t  (LAST_CPLUS_TREE_CODE - (int)LAST_C_TREE_CODE) * sizeof (char *));\n \n   init_operators ();\n   init_method ();"}]}