{"sha": "b5fb73b6bed11aaa87919c3885349e6f1ca0349f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVmYjczYjZiZWQxMWFhYTg3OTE5YzM4ODUzNDllNmYxY2EwMzQ5Zg==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-02-20T14:44:04Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-02-21T14:11:34Z"}, "message": "amdgcn: Use correct offset mode for gather/scatter\n\nThe scatter/gather pattern names changed for GCC 10, but I hadn't noticed.\nThis switches the patterns to the new offset mode scheme.\n\n2020-02-21  Andrew Stubbs  <ams@codesourcery.com>\n\n\tgcc/\n\t* config/gcn/gcn-valu.md (gather_load<mode>): Rename to ...\n\t(gather_load<mode>v64si): ... this and set operand 2 to V64SI.\n\t(scatter_store<mode>): Rename to ...\n\t(scatter_store<mode>v64si): ... this and set operand 1 to V64SI.\n\t(scatter<mode>_exec): Delete. Move contents ...\n\t(mask_scatter_store<mode>): ... here, and rename that to ...\n\t(mask_gather_load<mode>v64si): ... this. Set operand 2 to V64SI.\n\tRemove mode conversion.\n\t(mask_gather_load<mode>): Rename to ...\n\t(mask_scatter_store<mode>v64si): ... this. Set operand 1 to V64SI.\n\tRemove mode conversion.\n\t* config/gcn/gcn.c (gcn_expand_scaled_offsets): Remove mode conversion.", "tree": {"sha": "a8dda1b1c1ccf8aa0cad7b8dafd181288de1bdf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8dda1b1c1ccf8aa0cad7b8dafd181288de1bdf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5fb73b6bed11aaa87919c3885349e6f1ca0349f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5fb73b6bed11aaa87919c3885349e6f1ca0349f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5fb73b6bed11aaa87919c3885349e6f1ca0349f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5fb73b6bed11aaa87919c3885349e6f1ca0349f/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d6bf96b583d77336cf6ca643d92d068a88414fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d6bf96b583d77336cf6ca643d92d068a88414fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d6bf96b583d77336cf6ca643d92d068a88414fa"}], "stats": {"total": 102, "additions": 36, "deletions": 66}, "files": [{"sha": "b6e52531be03439497d4cbd9d9f03711df586d66", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5fb73b6bed11aaa87919c3885349e6f1ca0349f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5fb73b6bed11aaa87919c3885349e6f1ca0349f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5fb73b6bed11aaa87919c3885349e6f1ca0349f", "patch": "@@ -1,3 +1,18 @@\n+2020-02-21  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn-valu.md (gather_load<mode>): Rename to ...\n+\t(gather_load<mode>v64si): ... this and set operand 2 to V64SI.\n+\t(scatter_store<mode>): Rename to ...\n+\t(scatter_store<mode>v64si): ... this and set operand 1 to V64SI.\n+\t(scatter<mode>_exec): Delete. Move contents ...\n+\t(mask_scatter_store<mode>): ... here, and rename that to ...\n+\t(mask_gather_load<mode>v64si): ... this. Set operand 2 to V64SI.\n+\tRemove mode conversion.\n+\t(mask_gather_load<mode>): Rename to ...\n+\t(mask_scatter_store<mode>v64si): ... this. Set operand 1 to V64SI.\n+\tRemove mode conversion.\n+\t* config/gcn/gcn.c (gcn_expand_scaled_offsets): Remove mode conversion.\n+\n 2020-02-21  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/93845"}, {"sha": "a0cc9a2d8fcc66921e2110715d52c8b4d0907430", "filename": "gcc/config/gcn/gcn-valu.md", "status": "modified", "additions": 21, "deletions": 57, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5fb73b6bed11aaa87919c3885349e6f1ca0349f/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5fb73b6bed11aaa87919c3885349e6f1ca0349f/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md?ref=b5fb73b6bed11aaa87919c3885349e6f1ca0349f", "patch": "@@ -679,10 +679,10 @@\n ;;   fields normally found in a MEM.\n ;; - Multiple forms of address expression are supported, below.\n \n-(define_expand \"gather_load<mode>\"\n+(define_expand \"gather_load<mode>v64si\"\n   [(match_operand:VEC_ALLREG_MODE 0 \"register_operand\")\n    (match_operand:DI 1 \"register_operand\")\n-   (match_operand 2 \"register_operand\")\n+   (match_operand:V64SI 2 \"register_operand\")\n    (match_operand 3 \"immediate_operand\")\n    (match_operand:SI 4 \"gcn_alu_operand\")]\n   \"\"\n@@ -811,9 +811,9 @@\n   [(set_attr \"type\" \"flat\")\n    (set_attr \"length\" \"12\")])\n \n-(define_expand \"scatter_store<mode>\"\n+(define_expand \"scatter_store<mode>v64si\"\n   [(match_operand:DI 0 \"register_operand\")\n-   (match_operand 1 \"register_operand\")\n+   (match_operand:V64SI 1 \"register_operand\")\n    (match_operand 2 \"immediate_operand\")\n    (match_operand:SI 3 \"gcn_alu_operand\")\n    (match_operand:VEC_ALLREG_MODE 4 \"register_operand\")]\n@@ -833,34 +833,6 @@\n     DONE;\n   })\n \n-(define_expand \"scatter<mode>_exec\"\n-  [(match_operand:DI 0 \"register_operand\")\n-   (match_operand 1 \"register_operand\")\n-   (match_operand 2 \"immediate_operand\")\n-   (match_operand:SI 3 \"gcn_alu_operand\")\n-   (match_operand:VEC_ALLREG_MODE 4 \"register_operand\")\n-   (match_operand:DI 5 \"gcn_exec_reg_operand\")]\n-  \"\"\n-  {\n-    operands[5] = force_reg (DImode, operands[5]);\n-\n-    rtx addr = gcn_expand_scaled_offsets (DEFAULT_ADDR_SPACE, operands[0],\n-\t\t\t\t\t  operands[1], operands[3],\n-\t\t\t\t\t  INTVAL (operands[2]), operands[5]);\n-\n-    if (GET_MODE (addr) == V64DImode)\n-      emit_insn (gen_scatter<mode>_insn_1offset_exec (addr, const0_rtx,\n-\t\t\t\t\t\t      operands[4], const0_rtx,\n-\t\t\t\t\t\t      const0_rtx,\n-\t\t\t\t\t\t      operands[5]));\n-    else\n-      emit_insn (gen_scatter<mode>_insn_2offsets_exec (operands[0], addr,\n-\t\t\t\t\t\t       const0_rtx, operands[4],\n-\t\t\t\t\t\t       const0_rtx, const0_rtx,\n-\t\t\t\t\t\t       operands[5]));\n-    DONE;\n-  })\n-\n ; Allow any address expression\n (define_expand \"scatter<mode>_expr<exec_scatter>\"\n   [(set (mem:BLK (scratch))\n@@ -2795,27 +2767,17 @@\n     DONE;\n   })\n \n-(define_expand \"mask_gather_load<mode>\"\n+(define_expand \"mask_gather_load<mode>v64si\"\n   [(match_operand:VEC_ALLREG_MODE 0 \"register_operand\")\n    (match_operand:DI 1 \"register_operand\")\n-   (match_operand 2 \"register_operand\")\n+   (match_operand:V64SI 2 \"register_operand\")\n    (match_operand 3 \"immediate_operand\")\n    (match_operand:SI 4 \"gcn_alu_operand\")\n    (match_operand:DI 5 \"\")]\n   \"\"\n   {\n     rtx exec = force_reg (DImode, operands[5]);\n \n-    /* TODO: more conversions will be needed when more types are vectorized. */\n-    if (GET_MODE (operands[2]) == V64DImode)\n-      {\n-\trtx tmp = gen_reg_rtx (V64SImode);\n-\temit_insn (gen_truncv64div64si2_exec (tmp, operands[2],\n-\t\t\t\t\t      gcn_gen_undef (V64SImode),\n-\t\t\t\t\t      exec));\n-\toperands[2] = tmp;\n-      }\n-\n     rtx addr = gcn_expand_scaled_offsets (DEFAULT_ADDR_SPACE, operands[1],\n \t\t\t\t\t  operands[2], operands[4],\n \t\t\t\t\t  INTVAL (operands[3]), exec);\n@@ -2836,9 +2798,9 @@\n     DONE;\n   })\n \n-(define_expand \"mask_scatter_store<mode>\"\n+(define_expand \"mask_scatter_store<mode>v64si\"\n   [(match_operand:DI 0 \"register_operand\")\n-   (match_operand 1 \"register_operand\")\n+   (match_operand:V64SI 1 \"register_operand\")\n    (match_operand 2 \"immediate_operand\")\n    (match_operand:SI 3 \"gcn_alu_operand\")\n    (match_operand:VEC_ALLREG_MODE 4 \"register_operand\")\n@@ -2847,18 +2809,20 @@\n   {\n     rtx exec = force_reg (DImode, operands[5]);\n \n-    /* TODO: more conversions will be needed when more types are vectorized. */\n-    if (GET_MODE (operands[1]) == V64DImode)\n-      {\n-\trtx tmp = gen_reg_rtx (V64SImode);\n-\temit_insn (gen_truncv64div64si2_exec (tmp, operands[1],\n-\t\t\t\t\t      gcn_gen_undef (V64SImode),\n-\t\t\t\t\t      exec));\n-\toperands[1] = tmp;\n-      }\n+    rtx addr = gcn_expand_scaled_offsets (DEFAULT_ADDR_SPACE, operands[0],\n+\t\t\t\t\t  operands[1], operands[3],\n+\t\t\t\t\t  INTVAL (operands[2]), exec);\n \n-    emit_insn (gen_scatter<mode>_exec (operands[0], operands[1], operands[2],\n-\t\t\t\t       operands[3], operands[4], exec));\n+    if (GET_MODE (addr) == V64DImode)\n+      emit_insn (gen_scatter<mode>_insn_1offset_exec (addr, const0_rtx,\n+\t\t\t\t\t\t      operands[4], const0_rtx,\n+\t\t\t\t\t\t      const0_rtx,\n+\t\t\t\t\t\t      exec));\n+    else\n+      emit_insn (gen_scatter<mode>_insn_2offsets_exec (operands[0], addr,\n+\t\t\t\t\t\t       const0_rtx, operands[4],\n+\t\t\t\t\t\t       const0_rtx, const0_rtx,\n+\t\t\t\t\t\t       exec));\n     DONE;\n   })\n "}, {"sha": "a8fd7d6d52fd3f2251e98faa47bafc8e6f634443", "filename": "gcc/config/gcn/gcn.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5fb73b6bed11aaa87919c3885349e6f1ca0349f/gcc%2Fconfig%2Fgcn%2Fgcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5fb73b6bed11aaa87919c3885349e6f1ca0349f/gcc%2Fconfig%2Fgcn%2Fgcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.c?ref=b5fb73b6bed11aaa87919c3885349e6f1ca0349f", "patch": "@@ -1861,15 +1861,6 @@ rtx\n gcn_expand_scaled_offsets (addr_space_t as, rtx base, rtx offsets, rtx scale,\n \t\t\t   bool unsigned_p, rtx exec)\n {\n-  /* Convert the offsets to V64SImode.\n-     TODO: more conversions will be needed when more types are vectorized. */\n-  if (GET_MODE (offsets) == V64DImode)\n-    {\n-      rtx tmp = gen_reg_rtx (V64SImode);\n-      emit_insn (gen_truncv64div64si2 (tmp, offsets));\n-      offsets = tmp;\n-    }\n-\n   rtx tmpsi = gen_reg_rtx (V64SImode);\n   rtx tmpdi = gen_reg_rtx (V64DImode);\n   rtx undefsi = exec ? gcn_gen_undef (V64SImode) : NULL;"}]}