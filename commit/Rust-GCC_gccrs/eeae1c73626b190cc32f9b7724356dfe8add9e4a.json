{"sha": "eeae1c73626b190cc32f9b7724356dfe8add9e4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVhZTFjNzM2MjZiMTkwY2MzMmY5Yjc3MjQzNTZkZmU4YWRkOWU0YQ==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1995-12-14T23:09:47Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1995-12-14T23:09:47Z"}, "message": "(untyped_call): New pattern.\n\nFrom-SVN: r10722", "tree": {"sha": "41e5418fc666310c3a99064d4a5596c1ee3508ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41e5418fc666310c3a99064d4a5596c1ee3508ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eeae1c73626b190cc32f9b7724356dfe8add9e4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeae1c73626b190cc32f9b7724356dfe8add9e4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeae1c73626b190cc32f9b7724356dfe8add9e4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeae1c73626b190cc32f9b7724356dfe8add9e4a/comments", "author": null, "committer": null, "parents": [{"sha": "3f6ddf545624fb08c1a08de0611d00e470140ae7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f6ddf545624fb08c1a08de0611d00e470140ae7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f6ddf545624fb08c1a08de0611d00e470140ae7"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "6790240184cac4073cc4b4bbe93e549464be6985", "filename": "gcc/config/clipper/clipper.md", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeae1c73626b190cc32f9b7724356dfe8add9e4a/gcc%2Fconfig%2Fclipper%2Fclipper.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeae1c73626b190cc32f9b7724356dfe8add9e4a/gcc%2Fconfig%2Fclipper%2Fclipper.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.md?ref=eeae1c73626b190cc32f9b7724356dfe8add9e4a", "patch": "@@ -1362,6 +1362,43 @@\n   \"\"\n   \"call   sp,%1\")\n \n+;; Call subroutine returning any type.\n+\n+(define_expand \"untyped_call\"\n+  [(parallel [(call (match_operand 0 \"\" \"\")\n+\t\t    (const_int 0))\n+\t      (match_operand 1 \"\" \"\")\n+\t      (match_operand 2 \"\" \"\")])]\n+  \"\"\n+  \"\n+{\n+  int i;\n+\n+  emit_call_insn (gen_call (operands[0], const0_rtx, NULL, const0_rtx));\n+\n+  for (i = 0; i < XVECLEN (operands[2], 0); i++)\n+    {\n+      rtx set = XVECEXP (operands[2], 0, i);\n+      emit_move_insn (SET_DEST (set), SET_SRC (set));\n+    }\n+\n+  /* The optimizer does not know that the call sets the function value\n+     registers we stored in the result block.  We avoid problems by\n+     claiming that all hard registers are used and clobbered at this\n+     point.  */\n+  emit_insn (gen_blockage ());\n+\n+  DONE;\n+}\")\n+\n+;; UNSPEC_VOLATILE is considered to use and clobber all hard registers and\n+;; all of memory.  This blocks insns from being moved across this point.\n+\n+(define_insn \"blockage\"\n+  [(unspec_volatile [(const_int 0)] 0)]\n+  \"\"\n+  \"\")\n+\n (define_insn \"indirect_jump\"\n   [(set (pc) (match_operand:SI 0 \"register_operand\" \"r\"))]\n   \"\""}]}