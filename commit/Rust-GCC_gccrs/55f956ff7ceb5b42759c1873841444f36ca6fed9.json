{"sha": "55f956ff7ceb5b42759c1873841444f36ca6fed9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTVmOTU2ZmY3Y2ViNWI0Mjc1OWMxODczODQxNDQ0ZjM2Y2E2ZmVkOQ==", "commit": {"author": {"name": "Olga Makhotina", "email": "olga.makhotina@intel.com", "date": "2018-02-05T07:08:24Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2018-02-05T07:08:24Z"}, "message": "Add missing mask[z]_range[_round]_s[d,s] intrinsics\n\ngcc/\n\t* config/i386/avx512dqintrin.h (_mm_mask_range_sd, _mm_maskz_range_sd,\n\t_mm_mask_range_round_sd, _mm_maskz_range_round_sd, _mm_mask_range_ss,\n\t_mm_maskz_range_ss, _mm_mask_range_round_ss,\n\t_mm_maskz_range_round_ss): New intrinsics.\n\t(__builtin_ia32_rangesd128_round)\n\t(__builtin_ia32_rangess128_round): Remove.\n\t(__builtin_ia32_rangesd128_mask_round,\n\t__builtin_ia32_rangess128_mask_round): New builtins.\n\t* config/i386/i386-builtin.def (__builtin_ia32_rangesd128_round,\n\t__builtin_ia32_rangess128_round): Remove.\n\t(__builtin_ia32_rangesd128_mask_round,\n\t__builtin_ia32_rangess128_mask_round): New builtins.\n\t* config/i386/sse.md (ranges<mode><round_saeonly_name>): Renamed to ...\n\t(ranges<mode><mask_scalar_name><round_saeonly_scalar_name>): ... this.\n\t((match_operand:VF_128 2 \"<round_saeonly_nimm_predicate>\"\n\t\"<round_saeonly_constraint>\")): Changed to ...\n\t((match_operand:VF_128 2 \"<round_saeonly_scalar_nimm_predicate>\"\n\t\"<round_saeonly_scalar_constraint>\")): ... this.\n\t(\"vrange<ssescalarmodesuffix>\\t{%3, <round_saeonly_op4>%2, %1, %0|\n\t%0, %1, %2<round_saeonly_op4>, %3}\"): Changed to ...\n\t(\"vrange<ssescalarmodesuffix>\\t{%3, <round_saeonly_scalar_mask_op4>%2,\n\t%1, %0<mask_scalar_operand4>|%0<mask_scalar_operand4>, %1,\n\t%2<round_saeonly_scalar_mask_op4>, %3}\"): ... this.\ngcc/testsuite\n\t* gcc.target/i386/avx512dq-vrangesd-1.c (_mm_mask_range_sd,\n\t_mm_maskz_range_sd, _mm_mask_range_round_sd,\n\t_mm_maskz_range_round_sd): Test new intrinsics.\n\t* gcc.target/i386/avx512dq-vrangesd-2.c (_mm_range_sd,\n\t_mm_mask_range_sd, _mm_maskz_range_sd, _mm_range_round_sd,\n\t_mm_mask_range_round_sd, _mm_maskz_range_round_sd): Test new intrinsics.\n\t* gcc.target/i386/avx512dq-vrangess-1.c (_mm_mask_range_ss,\n\t_mm_maskz_range_ss, _mm_mask_range_round_ss,\n\t_mm_maskz_range_round_ss): Test new intrinsics.\n\t* gcc.target/i386/avx512dq-vrangess-2.c (_mm_range_ss,\n\t_mm_mask_range_ss, _mm_maskz_range_ss, _mm_range_round_ss,\n\t_mm_mask_range_round_ss, _mm_maskz_range_round_ss): Test new intrinsics.\n\t* gcc.target/i386/avx-1.c (__builtin_ia32_rangesd128_round,\n\t__builtin_ia32_rangess128_round): Remove builtins.\n\t(__builtin_ia32_rangesd128_mask_round,\n\t__builtin_ia32_rangess128_mask_round): Test new builtins.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\nFrom-SVN: r257382", "tree": {"sha": "d68656ef46c3e6ae91d1db659cbe74b8d9c7df66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d68656ef46c3e6ae91d1db659cbe74b8d9c7df66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55f956ff7ceb5b42759c1873841444f36ca6fed9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55f956ff7ceb5b42759c1873841444f36ca6fed9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55f956ff7ceb5b42759c1873841444f36ca6fed9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55f956ff7ceb5b42759c1873841444f36ca6fed9/comments", "author": {"login": "Djilka", "id": 6038217, "node_id": "MDQ6VXNlcjYwMzgyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/6038217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Djilka", "html_url": "https://github.com/Djilka", "followers_url": "https://api.github.com/users/Djilka/followers", "following_url": "https://api.github.com/users/Djilka/following{/other_user}", "gists_url": "https://api.github.com/users/Djilka/gists{/gist_id}", "starred_url": "https://api.github.com/users/Djilka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Djilka/subscriptions", "organizations_url": "https://api.github.com/users/Djilka/orgs", "repos_url": "https://api.github.com/users/Djilka/repos", "events_url": "https://api.github.com/users/Djilka/events{/privacy}", "received_events_url": "https://api.github.com/users/Djilka/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5dfb4d0f3339595881fba857ab5a4b57c681a8e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dfb4d0f3339595881fba857ab5a4b57c681a8e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dfb4d0f3339595881fba857ab5a4b57c681a8e3"}], "stats": {"total": 274, "additions": 245, "deletions": 29}, "files": [{"sha": "a57b92d5e22d0e46ae32539ad334d0f0fd478062", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55f956ff7ceb5b42759c1873841444f36ca6fed9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55f956ff7ceb5b42759c1873841444f36ca6fed9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=55f956ff7ceb5b42759c1873841444f36ca6fed9", "patch": "@@ -1,3 +1,29 @@\n+2018-02-05  Olga Makhotina  <olga.makhotina@intel.com>\n+\n+\t* config/i386/avx512dqintrin.h (_mm_mask_range_sd, _mm_maskz_range_sd,\n+\t_mm_mask_range_round_sd, _mm_maskz_range_round_sd, _mm_mask_range_ss,\n+\t_mm_maskz_range_ss, _mm_mask_range_round_ss,\n+\t_mm_maskz_range_round_ss): New intrinsics.\n+\t(__builtin_ia32_rangesd128_round)\n+\t(__builtin_ia32_rangess128_round): Remove.\n+\t(__builtin_ia32_rangesd128_mask_round,\n+\t__builtin_ia32_rangess128_mask_round): New builtins.\n+\t* config/i386/i386-builtin.def (__builtin_ia32_rangesd128_round,\n+\t__builtin_ia32_rangess128_round): Remove.\n+\t(__builtin_ia32_rangesd128_mask_round,\n+\t__builtin_ia32_rangess128_mask_round): New builtins.\n+\t* config/i386/sse.md (ranges<mode><round_saeonly_name>): Renamed to ...\n+\t(ranges<mode><mask_scalar_name><round_saeonly_scalar_name>): ... this.\n+\t((match_operand:VF_128 2 \"<round_saeonly_nimm_predicate>\"\n+\t\"<round_saeonly_constraint>\")): Changed to ...\n+\t((match_operand:VF_128 2 \"<round_saeonly_scalar_nimm_predicate>\"\n+\t\"<round_saeonly_scalar_constraint>\")): ... this.\n+\t(\"vrange<ssescalarmodesuffix>\\t{%3, <round_saeonly_op4>%2, %1, %0|\n+\t%0, %1, %2<round_saeonly_op4>, %3}\"): Changed to ...\n+\t(\"vrange<ssescalarmodesuffix>\\t{%3, <round_saeonly_scalar_mask_op4>%2,\n+\t%1, %0<mask_scalar_operand4>|%0<mask_scalar_operand4>, %1,\n+\t%2<round_saeonly_scalar_mask_op4>, %3}\"): ... this.\n+\n 2018-02-02  Andrew Jenner  <andrew@codesourcery.com>\n \n \t* config/powerpcspe/powerpcspe.opt: Add Undocumented to irrelevant"}, {"sha": "13482596ba05ad04941d6c6e38fec504527ba3fe", "filename": "gcc/config/i386/avx512dqintrin.h", "status": "modified", "additions": 162, "deletions": 18, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55f956ff7ceb5b42759c1873841444f36ca6fed9/gcc%2Fconfig%2Fi386%2Favx512dqintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55f956ff7ceb5b42759c1873841444f36ca6fed9/gcc%2Fconfig%2Fi386%2Favx512dqintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512dqintrin.h?ref=55f956ff7ceb5b42759c1873841444f36ca6fed9", "patch": "@@ -1223,37 +1223,139 @@ extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_range_sd (__m128d __A, __m128d __B, int __C)\n {\n-  return (__m128d) __builtin_ia32_rangesd128_round ((__v2df) __A,\n+  return (__m128d) __builtin_ia32_rangesd128_mask_round ((__v2df) __A,\n \t\t\t\t\t\t   (__v2df) __B, __C,\n+\t\t\t\t\t\t   (__v2df)\n+\t\t\t\t\t\t   _mm_setzero_pd (),\n+\t\t\t\t\t\t   (__mmask8) -1,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_range_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B, int __C)\n+{\n+  return (__m128d) __builtin_ia32_rangesd128_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t   (__v2df) __B, __C,\n+\t\t\t\t\t\t   (__v2df) __W,\n+\t\t\t\t\t\t   (__mmask8) __U,\n \t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_range_sd (__mmask8 __U, __m128d __A, __m128d __B, int __C)\n+{\n+  return (__m128d) __builtin_ia32_rangesd128_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t   (__v2df) __B, __C,\n+\t\t\t\t\t\t   (__v2df)\n+\t\t\t\t\t\t   _mm_setzero_pd (),\n+\t\t\t\t\t\t   (__mmask8) __U,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n \n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_range_ss (__m128 __A, __m128 __B, int __C)\n {\n-  return (__m128) __builtin_ia32_rangess128_round ((__v4sf) __A,\n+  return (__m128) __builtin_ia32_rangess128_mask_round ((__v4sf) __A,\n \t\t\t\t\t\t  (__v4sf) __B, __C,\n+\t\t\t\t\t\t  (__v4sf)\n+\t\t\t\t\t\t  _mm_setzero_ps (),\n+\t\t\t\t\t\t  (__mmask8) -1,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_range_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B, int __C)\n+{\n+  return (__m128) __builtin_ia32_rangess128_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t  (__v4sf) __B, __C,\n+\t\t\t\t\t\t  (__v4sf) __W,\n+\t\t\t\t\t\t  (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_range_ss (__mmask8 __U, __m128 __A, __m128 __B, int __C)\n+{\n+  return (__m128) __builtin_ia32_rangess128_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t  (__v4sf) __B, __C,\n+\t\t\t\t\t\t  (__v4sf)\n+\t\t\t\t\t\t  _mm_setzero_ps (),\n+\t\t\t\t\t\t  (__mmask8) __U,\n \t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n }\n \n extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_range_round_sd (__m128d __A, __m128d __B, int __C, const int __R)\n {\n-  return (__m128d) __builtin_ia32_rangesd128_round ((__v2df) __A,\n+  return (__m128d) __builtin_ia32_rangesd128_mask_round ((__v2df) __A,\n \t\t\t\t\t\t   (__v2df) __B, __C,\n-\t\t\t\t\t\t   __R);\n+\t\t\t\t\t\t   (__v2df)\n+\t\t\t\t\t\t   _mm_setzero_pd (),\n+\t\t\t\t\t\t   (__mmask8) -1, __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_range_round_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B,\n+\t\t\t int __C, const int __R)\n+{\n+  return (__m128d) __builtin_ia32_rangesd128_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t   (__v2df) __B, __C,\n+\t\t\t\t\t\t   (__v2df) __W,\n+\t\t\t\t\t\t   (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_range_round_sd (__mmask8 __U, __m128d __A, __m128d __B, int __C,\n+\t\t\t  const int __R)\n+{\n+  return (__m128d) __builtin_ia32_rangesd128_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t   (__v2df) __B, __C,\n+\t\t\t\t\t\t   (__v2df)\n+\t\t\t\t\t\t   _mm_setzero_pd (),\n+\t\t\t\t\t\t   (__mmask8) __U, __R);\n }\n \n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_range_round_ss (__m128 __A, __m128 __B, int __C, const int __R)\n {\n-  return (__m128) __builtin_ia32_rangess128_round ((__v4sf) __A,\n+  return (__m128) __builtin_ia32_rangess128_mask_round ((__v4sf) __A,\n \t\t\t\t\t\t  (__v4sf) __B, __C,\n-\t\t\t\t\t\t  __R);\n+\t\t\t\t\t\t  (__v4sf)\n+\t\t\t\t\t\t  _mm_setzero_ps (),\n+\t\t\t\t\t\t  (__mmask8) -1, __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_range_round_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B,\n+\t\t\t int __C, const int __R)\n+{\n+  return (__m128) __builtin_ia32_rangess128_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t  (__v4sf) __B, __C,\n+\t\t\t\t\t\t  (__v4sf) __W,\n+\t\t\t\t\t\t  (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_range_round_ss (__mmask8 __U, __m128 __A, __m128 __B, int __C,\n+\t\t\t  const int __R)\n+{\n+  return (__m128) __builtin_ia32_rangess128_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t  (__v4sf) __B, __C,\n+\t\t\t\t\t\t  (__v4sf)\n+\t\t\t\t\t\t  _mm_setzero_ps (),\n+\t\t\t\t\t\t  (__mmask8) __U, __R);\n }\n \n extern __inline __mmask8\n@@ -2148,23 +2250,65 @@ _mm512_fpclass_ps_mask (__m512 __A, const int __imm)\n #define _kshiftri_mask8(X, Y)\t\t\t\t\t\t\\\n   ((__mmask8) __builtin_ia32_kshiftriqi ((__mmask8)(X), (__mmask8)(Y)))\n \n-#define _mm_range_sd(A, B, C)\t\t\t\t\t\t\\\n-  ((__m128d) __builtin_ia32_rangesd128_round ((__v2df)(__m128d)(A),\t\\\n-    (__v2df)(__m128d)(B), (int)(C),\t\t\t\t\t\\\n-    _MM_FROUND_CUR_DIRECTION))\n+#define _mm_range_sd(A, B, C)\t\t\t\t\t\t \\\n+  ((__m128d) __builtin_ia32_rangesd128_mask_round ((__v2df)(__m128d)(A), \\\n+    (__v2df)(__m128d)(B), (int)(C), (__v2df) _mm_setzero_pd (), \t \\\n+    (__mmask8) -1, _MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm_mask_range_sd(W, U, A, B, C)\t\t\t\t \\\n+  ((__m128d) __builtin_ia32_rangesd128_mask_round ((__v2df)(__m128d)(A), \\\n+    (__v2df)(__m128d)(B), (int)(C), (__v2df)(__m128d)(W), \t\t \\\n+    (__mmask8)(U), _MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm_maskz_range_sd(U, A, B, C)\t\t\t\t\t \\\n+  ((__m128d) __builtin_ia32_rangesd128_mask_round ((__v2df)(__m128d)(A), \\\n+    (__v2df)(__m128d)(B), (int)(C), (__v2df) _mm_setzero_pd (), \t \\\n+    (__mmask8)(U), _MM_FROUND_CUR_DIRECTION))\n \n #define _mm_range_ss(A, B, C)\t\t\t\t\t\t\\\n-  ((__m128) __builtin_ia32_rangess128_round ((__v4sf)(__m128)(A),\t\\\n-    (__v4sf)(__m128)(B), (int)(C),\t\t\t\t\t\\\n-    _MM_FROUND_CUR_DIRECTION))\n+  ((__m128) __builtin_ia32_rangess128_mask_round ((__v4sf)(__m128)(A),\t\\\n+    (__v4sf)(__m128)(B), (int)(C), (__v4sf) _mm_setzero_ps (),\t\t\\\n+    (__mmask8) -1, _MM_FROUND_CUR_DIRECTION))\n \n-#define _mm_range_round_sd(A, B, C, R)\t\t\t\t\t\\\n-  ((__m128d) __builtin_ia32_rangesd128_round ((__v2df)(__m128d)(A),\t\\\n-    (__v2df)(__m128d)(B), (int)(C), (R)))\n+#define _mm_mask_range_ss(W, U, A, B, C)\t\t\t\t\\\n+  ((__m128) __builtin_ia32_rangess128_mask_round ((__v4sf)(__m128)(A),\t\\\n+    (__v4sf)(__m128)(B), (int)(C), (__v4sf)(__m128)(W),\t\t\t\\\n+    (__mmask8)(U), _MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm_maskz_range_ss(U, A, B, C)\t\t\t\t\t\\\n+  ((__m128) __builtin_ia32_rangess128_mask_round ((__v4sf)(__m128)(A),\t\\\n+    (__v4sf)(__m128)(B), (int)(C), (__v4sf) _mm_setzero_ps (),\t\t\\\n+    (__mmask8)(U), _MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm_range_round_sd(A, B, C, R)\t\t\t\t\t \\\n+  ((__m128d) __builtin_ia32_rangesd128_mask_round ((__v2df)(__m128d)(A), \\\n+    (__v2df)(__m128d)(B), (int)(C), (__v2df) _mm_setzero_pd (),\t\t \\\n+    (__mmask8) -1, (R)))\n+\n+#define _mm_mask_range_round_sd(W, U, A, B, C, R)\t\t\t \\\n+  ((__m128d) __builtin_ia32_rangesd128_mask_round ((__v2df)(__m128d)(A), \\\n+    (__v2df)(__m128d)(B), (int)(C), (__v2df)(__m128d)(W),\t\t \\\n+    (__mmask8)(U), (R)))\n+\n+#define _mm_maskz_range_round_sd(U, A, B, C, R)\t\t\t\t \\\n+  ((__m128d) __builtin_ia32_rangesd128_mask_round ((__v2df)(__m128d)(A), \\\n+    (__v2df)(__m128d)(B), (int)(C), (__v2df) _mm_setzero_pd (),\t\t \\\n+    (__mmask8)(U), (R)))\n \n #define _mm_range_round_ss(A, B, C, R)\t\t\t\t\t\\\n-  ((__m128) __builtin_ia32_rangess128_round ((__v4sf)(__m128)(A),\t\\\n-    (__v4sf)(__m128)(B), (int)(C), (R)))\n+  ((__m128) __builtin_ia32_rangess128_mask_round ((__v4sf)(__m128)(A),\t\\\n+    (__v4sf)(__m128)(B), (int)(C), (__v4sf) _mm_setzero_ps (),\t\t\\\n+    (__mmask8) -1, (R)))\n+\n+#define _mm_mask_range_round_ss(W, U, A, B, C, R)\t\t\t\\\n+  ((__m128) __builtin_ia32_rangess128_mask_round ((__v4sf)(__m128)(A),\t\\\n+    (__v4sf)(__m128)(B), (int)(C), (__v4sf)(__m128)(W),\t\t\t\\\n+    (__mmask8)(U), (R)))\n+\n+#define _mm_maskz_range_round_ss(U, A, B, C, R)\t\t\t\t\\\n+  ((__m128) __builtin_ia32_rangess128_mask_round ((__v4sf)(__m128)(A),\t\\\n+    (__v4sf)(__m128)(B), (int)(C), (__v4sf) _mm_setzero_ps (),\t\t\\\n+    (__mmask8)(U), (R)))\n \n #define _mm512_cvtt_roundpd_epi64(A, B)\t\t    \\\n   ((__m512i)__builtin_ia32_cvttpd2qq512_mask ((A), (__v8di)\t\t\\"}, {"sha": "2caac8825f6b7270afc2fca7c7a7c12845bce9a9", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55f956ff7ceb5b42759c1873841444f36ca6fed9/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55f956ff7ceb5b42759c1873841444f36ca6fed9/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=55f956ff7ceb5b42759c1873841444f36ca6fed9", "patch": "@@ -2784,8 +2784,8 @@ BDESC (OPTION_MASK_ISA_AVX512ER, CODE_FOR_avx512er_vmrsqrt28v2df_round, \"__built\n BDESC (OPTION_MASK_ISA_AVX512ER, CODE_FOR_avx512er_vmrsqrt28v4sf_round, \"__builtin_ia32_rsqrt28ss_round\", IX86_BUILTIN_RSQRT28SS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT)\n \n /* AVX512DQ.  */\n-BDESC (OPTION_MASK_ISA_AVX512DQ, CODE_FOR_avx512dq_rangesv2df_round, \"__builtin_ia32_rangesd128_round\", IX86_BUILTIN_RANGESD128, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT_INT)\n-BDESC (OPTION_MASK_ISA_AVX512DQ, CODE_FOR_avx512dq_rangesv4sf_round, \"__builtin_ia32_rangess128_round\", IX86_BUILTIN_RANGESS128, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT_INT)\n+BDESC (OPTION_MASK_ISA_AVX512DQ, CODE_FOR_avx512dq_rangesv2df_mask_round, \"__builtin_ia32_rangesd128_mask_round\", IX86_BUILTIN_RANGESD128, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT_V2DF_UQI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512DQ, CODE_FOR_avx512dq_rangesv4sf_mask_round, \"__builtin_ia32_rangess128_mask_round\", IX86_BUILTIN_RANGESS128, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT_V4SF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512DQ, CODE_FOR_fix_notruncv8dfv8di2_mask_round, \"__builtin_ia32_cvtpd2qq512_mask\", IX86_BUILTIN_CVTPD2QQ512, UNKNOWN, (int) V8DI_FTYPE_V8DF_V8DI_QI_INT)\n BDESC (OPTION_MASK_ISA_AVX512DQ, CODE_FOR_avx512dq_cvtps2qqv8di_mask_round, \"__builtin_ia32_cvtps2qq512_mask\", IX86_BUILTIN_CVTPS2QQ512, UNKNOWN, (int) V8DI_FTYPE_V8SF_V8DI_QI_INT)\n BDESC (OPTION_MASK_ISA_AVX512DQ, CODE_FOR_ufix_notruncv8dfv8di2_mask_round, \"__builtin_ia32_cvtpd2uqq512_mask\", IX86_BUILTIN_CVTPD2UQQ512, UNKNOWN, (int) V8DI_FTYPE_V8DF_V8DI_QI_INT)"}, {"sha": "ef0d01517d44a1815fb05b5f0357869b04fb254e", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55f956ff7ceb5b42759c1873841444f36ca6fed9/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55f956ff7ceb5b42759c1873841444f36ca6fed9/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=55f956ff7ceb5b42759c1873841444f36ca6fed9", "patch": "@@ -19488,18 +19488,18 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512dq_ranges<mode><round_saeonly_name>\"\n+(define_insn \"avx512dq_ranges<mode><mask_scalar_name><round_saeonly_scalar_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF_128\n \t  (unspec:VF_128\n \t    [(match_operand:VF_128 1 \"register_operand\" \"v\")\n-\t     (match_operand:VF_128 2 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n+\t     (match_operand:VF_128 2 \"<round_saeonly_scalar_nimm_predicate>\" \"<round_saeonly_scalar_constraint>\")\n \t     (match_operand:SI 3 \"const_0_to_15_operand\")]\n \t    UNSPEC_RANGE)\n \t  (match_dup 1)\n \t  (const_int 1)))]\n   \"TARGET_AVX512DQ\"\n-  \"vrange<ssescalarmodesuffix>\\t{%3, <round_saeonly_op4>%2, %1, %0|%0, %1, %2<round_saeonly_op4>, %3}\"\n+  \"vrange<ssescalarmodesuffix>\\t{%3, <round_saeonly_scalar_mask_op4>%2, %1, %0<mask_scalar_operand4>|%0<mask_scalar_operand4>, %1, %2<round_saeonly_scalar_mask_op4>, %3}\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])"}, {"sha": "058257277c17fb9c5e688ab1a30ccf7f653276e3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55f956ff7ceb5b42759c1873841444f36ca6fed9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55f956ff7ceb5b42759c1873841444f36ca6fed9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=55f956ff7ceb5b42759c1873841444f36ca6fed9", "patch": "@@ -1,3 +1,24 @@\n+2018-02-05  Olga Makhotina  <olga.makhotina@intel.com>\n+\n+\t* gcc.target/i386/avx512dq-vrangesd-1.c (_mm_mask_range_sd,\n+\t_mm_maskz_range_sd, _mm_mask_range_round_sd,\n+\t_mm_maskz_range_round_sd): Test new intrinsics.\n+\t* gcc.target/i386/avx512dq-vrangesd-2.c (_mm_range_sd,\n+\t_mm_mask_range_sd, _mm_maskz_range_sd, _mm_range_round_sd,\n+\t_mm_mask_range_round_sd, _mm_maskz_range_round_sd): Test new intrinsics.\n+\t* gcc.target/i386/avx512dq-vrangess-1.c (_mm_mask_range_ss,\n+\t_mm_maskz_range_ss, _mm_mask_range_round_ss,\n+\t_mm_maskz_range_round_ss): Test new intrinsics.\n+\t* gcc.target/i386/avx512dq-vrangess-2.c (_mm_range_ss,\n+\t_mm_mask_range_ss, _mm_maskz_range_ss, _mm_range_round_ss,\n+\t_mm_mask_range_round_ss, _mm_maskz_range_round_ss): Test new intrinsics.\n+\t* gcc.target/i386/avx-1.c (__builtin_ia32_rangesd128_round,\n+\t__builtin_ia32_rangess128_round): Remove builtins.\n+\t(__builtin_ia32_rangesd128_mask_round,\n+\t__builtin_ia32_rangess128_mask_round): Test new builtins.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\n 2018-02-04  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR middle-end/79966"}, {"sha": "2cd3fd1462c0e4895827e3699ac92114ee5ab470", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55f956ff7ceb5b42759c1873841444f36ca6fed9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55f956ff7ceb5b42759c1873841444f36ca6fed9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=55f956ff7ceb5b42759c1873841444f36ca6fed9", "patch": "@@ -416,8 +416,10 @@\n #define __builtin_ia32_reducesd_mask(A, B, F, W, U) __builtin_ia32_reducesd_mask(A, B, 1, W, U)\n #define __builtin_ia32_reduceps512_mask(A, E, C, D) __builtin_ia32_reduceps512_mask(A, 1, C, D)\n #define __builtin_ia32_reducepd512_mask(A, E, C, D) __builtin_ia32_reducepd512_mask(A, 1, C, D)\n-#define __builtin_ia32_rangess128_round(A, B, I, F) __builtin_ia32_rangess128_round(A, B, 1, 8)\n-#define __builtin_ia32_rangesd128_round(A, B, I, F) __builtin_ia32_rangesd128_round(A, B, 1, 8)\n+#define __builtin_ia32_rangess128_mask_round(A, B, I, D, E, F) \\\n+    __builtin_ia32_rangess128_mask_round(A, B, 1, D, E, 8)\n+#define __builtin_ia32_rangesd128_mask_round(A, B, I, D, E, F) \\\n+    __builtin_ia32_rangesd128_mask_round(A, B, 1, D, E, 8)\n #define __builtin_ia32_rangeps512_mask(A, B, I, D, E, F) __builtin_ia32_rangeps512_mask(A, B, 1, D, E, 8)\n #define __builtin_ia32_rangepd512_mask(A, B, I, D, E, F) __builtin_ia32_rangepd512_mask(A, B, 1, D, E, 8)\n #define __builtin_ia32_inserti64x2_512_mask(A, B, F, D, E) __builtin_ia32_inserti64x2_512_mask(A, B, 1, D, E)"}, {"sha": "aa2124ee708fc73bec7edd904ce3199ae972e4e9", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vrangesd-1.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55f956ff7ceb5b42759c1873841444f36ca6fed9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vrangesd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55f956ff7ceb5b42759c1873841444f36ca6fed9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vrangesd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vrangesd-1.c?ref=55f956ff7ceb5b42759c1873841444f36ca6fed9", "patch": "@@ -2,6 +2,11 @@\n /* { dg-options \"-mavx512dq -O2\" } */\n /* { dg-final { scan-assembler-times \"vrangesd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vrangesd\\[ \\\\t\\]+\\[^\\$\\n\\]*\\\\$\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrangesd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrangesd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrangesd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrangesd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n \n #include <immintrin.h>\n \n@@ -12,5 +17,10 @@ void extern\n avx512dq_test (void)\n {\n   x1 = _mm_range_sd (x1, x2, 3);\n+  x1 = _mm_mask_range_sd (x1, m, x1, x2, 3);\n+  x1 = _mm_maskz_range_sd (m, x1, x2, 3);\n+\n   x1 = _mm_range_round_sd (x1, x2, 3, _MM_FROUND_NO_EXC);\n+  x1 = _mm_mask_range_round_sd (x1, m, x1, x2, 3, _MM_FROUND_NO_EXC);\n+  x1 = _mm_maskz_range_round_sd (m, x1, x2, 3, _MM_FROUND_NO_EXC);\n }"}, {"sha": "3b401df3e79faadebf1f9bf4d9cea9301206eda1", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vrangess-1.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55f956ff7ceb5b42759c1873841444f36ca6fed9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vrangess-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55f956ff7ceb5b42759c1873841444f36ca6fed9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vrangess-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vrangess-1.c?ref=55f956ff7ceb5b42759c1873841444f36ca6fed9", "patch": "@@ -2,6 +2,10 @@\n /* { dg-options \"-mavx512dq -O2\" } */\n /* { dg-final { scan-assembler-times \"vrangess\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vrangess\\[ \\\\t\\]+\\[^\\$\\n\\]*\\\\$\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrangess\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrangess\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrangess\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrangess\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n@@ -12,5 +16,10 @@ void extern\n avx512dq_test (void)\n {\n   x1 = _mm_range_ss (x1, x2, 1);\n+  x1 = _mm_mask_range_ss (x1, m, x1, x2, 1);\n+  x1 = _mm_maskz_range_ss (m, x1, x2, 1);\n+\n   x1 = _mm_range_round_ss (x1, x2, 1, _MM_FROUND_NO_EXC);\n+  x1 = _mm_mask_range_round_ss (x1, m, x1, x2, 1, _MM_FROUND_NO_EXC);\n+  x1 = _mm_maskz_range_round_ss (m, x1, x2, 1, _MM_FROUND_NO_EXC);\n }"}, {"sha": "63c38a57110dc3c6970c6d0f82c84f0ff66e821f", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55f956ff7ceb5b42759c1873841444f36ca6fed9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55f956ff7ceb5b42759c1873841444f36ca6fed9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=55f956ff7ceb5b42759c1873841444f36ca6fed9", "patch": "@@ -433,8 +433,10 @@\n #define __builtin_ia32_reducesd_mask(A, B, F, W, U) __builtin_ia32_reducesd_mask(A, B, 1, W, U)\n #define __builtin_ia32_reduceps512_mask(A, E, C, D) __builtin_ia32_reduceps512_mask(A, 1, C, D)\n #define __builtin_ia32_reducepd512_mask(A, E, C, D) __builtin_ia32_reducepd512_mask(A, 1, C, D)\n-#define __builtin_ia32_rangess128_round(A, B, I, F) __builtin_ia32_rangess128_round(A, B, 1, 8)\n-#define __builtin_ia32_rangesd128_round(A, B, I, F) __builtin_ia32_rangesd128_round(A, B, 1, 8)\n+#define __builtin_ia32_rangess128_mask_round(A, B, I, D, E, F) \\\n+    __builtin_ia32_rangess128_mask_round(A, B, 1, D, E, 8)\n+#define __builtin_ia32_rangesd128_mask_round(A, B, I, D, E, F) \\\n+    __builtin_ia32_rangesd128_mask_round(A, B, 1, D, E, 8)\n #define __builtin_ia32_rangeps512_mask(A, B, I, D, E, F) __builtin_ia32_rangeps512_mask(A, B, 1, D, E, 8)\n #define __builtin_ia32_rangepd512_mask(A, B, I, D, E, F) __builtin_ia32_rangepd512_mask(A, B, 1, D, E, 8)\n #define __builtin_ia32_inserti64x2_512_mask(A, B, F, D, E) __builtin_ia32_inserti64x2_512_mask(A, B, 1, D, E)"}, {"sha": "d2fe796ee97a8e5ce66a870f82fd624c3ed9e065", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55f956ff7ceb5b42759c1873841444f36ca6fed9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55f956ff7ceb5b42759c1873841444f36ca6fed9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=55f956ff7ceb5b42759c1873841444f36ca6fed9", "patch": "@@ -432,8 +432,10 @@\n #define __builtin_ia32_reducesd_mask(A, B, F, W, U) __builtin_ia32_reducesd_mask(A, B, 1, W, U)\n #define __builtin_ia32_reduceps512_mask(A, E, C, D) __builtin_ia32_reduceps512_mask(A, 1, C, D)\n #define __builtin_ia32_reducepd512_mask(A, E, C, D) __builtin_ia32_reducepd512_mask(A, 1, C, D)\n-#define __builtin_ia32_rangess128_round(A, B, I, F) __builtin_ia32_rangess128_round(A, B, 1, 8)\n-#define __builtin_ia32_rangesd128_round(A, B, I, F) __builtin_ia32_rangesd128_round(A, B, 1, 8)\n+#define __builtin_ia32_rangess128_mask_round(A, B, I, D, E, F) \\\n+    __builtin_ia32_rangess128_mask_round(A, B, 1, D, E, 8)\n+#define __builtin_ia32_rangesd128_mask_round(A, B, I, D, E, F) \\\n+    __builtin_ia32_rangesd128_mask_round(A, B, 1, D, E, 8)\n #define __builtin_ia32_rangeps512_mask(A, B, I, D, E, F) __builtin_ia32_rangeps512_mask(A, B, 1, D, E, 8)\n #define __builtin_ia32_rangepd512_mask(A, B, I, D, E, F) __builtin_ia32_rangepd512_mask(A, B, 1, D, E, 8)\n #define __builtin_ia32_inserti64x2_512_mask(A, B, F, D, E) __builtin_ia32_inserti64x2_512_mask(A, B, 1, D, E)"}]}