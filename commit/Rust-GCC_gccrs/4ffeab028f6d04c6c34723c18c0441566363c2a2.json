{"sha": "4ffeab028f6d04c6c34723c18c0441566363c2a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZmZWFiMDI4ZjZkMDRjNmMzNDcyM2MxOGMwNDQxNTY2MzYzYzJhMg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-04-17T19:46:50Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-04-17T19:46:50Z"}, "message": "(find_reloads): Recompute reg_equiv_address from reg_equiv_memory_loc before using it.\n\n(find_reloads): Recompute reg_equiv_address from\nreg_equiv_memory_loc before using it.\n(find_reloads_toplev, make_memloc): Likewise.\n\nFrom-SVN: r9395", "tree": {"sha": "8d4acc2b247dd0588b730ad7980794321dbeef36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d4acc2b247dd0588b730ad7980794321dbeef36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ffeab028f6d04c6c34723c18c0441566363c2a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ffeab028f6d04c6c34723c18c0441566363c2a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ffeab028f6d04c6c34723c18c0441566363c2a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ffeab028f6d04c6c34723c18c0441566363c2a2/comments", "author": null, "committer": null, "parents": [{"sha": "79c0672ee61f4484b9d06252fad5086c879a65a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79c0672ee61f4484b9d06252fad5086c879a65a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79c0672ee61f4484b9d06252fad5086c879a65a9"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "866575163310e18aa4c491d5adf458128f4e0c11", "filename": "gcc/reload.c", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffeab028f6d04c6c34723c18c0441566363c2a2/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffeab028f6d04c6c34723c18c0441566363c2a2/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=4ffeab028f6d04c6c34723c18c0441566363c2a2", "patch": "@@ -2463,7 +2463,11 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \t    {\n \t      /* If reg_equiv_address is not a constant address, copy it,\n \t\t since it may be shared.  */\n-\t      rtx address = reg_equiv_address[regno];\n+\t      /* We must rerun eliminate_regs, in case the elimination\n+\t\t offsets have changed.  */\n+\t      rtx address = XEXP (eliminate_regs (reg_equiv_memory_loc[regno],\n+\t\t\t\t\t\t  0, NULL_RTX),\n+\t\t\t\t  0);\n \n \t      if (rtx_varies_p (address))\n \t\taddress = copy_rtx (address);\n@@ -3880,7 +3884,11 @@ find_reloads_toplev (x, opnum, type, ind_levels, is_set_dest)\n       else if (reg_equiv_address[regno] != 0)\n \t{\n \t  /* If reg_equiv_address varies, it may be shared, so copy it.  */\n-\t  rtx addr = reg_equiv_address[regno];\n+\t  /* We must rerun eliminate_regs, in case the elimination\n+\t     offsets have changed.  */\n+\t  rtx addr = XEXP (eliminate_regs (reg_equiv_memory_loc[regno], 0,\n+\t\t\t\t\t   NULL_RTX),\n+\t\t\t   0);\n \n \t  if (rtx_varies_p (addr))\n \t    addr = copy_rtx (addr);\n@@ -3960,8 +3968,11 @@ find_reloads_toplev (x, opnum, type, ind_levels, is_set_dest)\n \t\t\t   || ! offsettable_memref_p (reg_equiv_mem[regno])))))\n \t{\n \t  int offset = SUBREG_WORD (x) * UNITS_PER_WORD;\n-\t  rtx addr = (reg_equiv_address[regno] ? reg_equiv_address[regno]\n-\t\t      : XEXP (reg_equiv_mem[regno], 0));\n+\t  /* We must rerun eliminate_regs, in case the elimination\n+\t     offsets have changed.  */\n+\t  rtx addr = XEXP (eliminate_regs (reg_equiv_memory_loc[regno], 0,\n+\t\t\t\t\t   NULL_RTX),\n+\t\t\t   0);\n \t  if (BYTES_BIG_ENDIAN)\n \t    {\n \t      int size;\n@@ -3998,7 +4009,10 @@ make_memloc (ad, regno)\n      int regno;\n {\n   register int i;\n-  rtx tem = reg_equiv_address[regno];\n+  /* We must rerun eliminate_regs, in case the elimination\n+     offsets have changed.  */\n+  rtx tem = XEXP (eliminate_regs (reg_equiv_memory_loc[regno], 0, NULL_RTX),\n+\t\t  0);\n \n #if 0 /* We cannot safely reuse a memloc made here;\n \t if the pseudo appears twice, and its mem needs a reload,"}]}