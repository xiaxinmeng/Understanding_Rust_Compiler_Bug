{"sha": "bdee42b16c0af056a289dbcb61ba70917ba7f83b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRlZTQyYjE2YzBhZjA1NmEyODlkYmNiNjFiYTcwOTE3YmE3ZjgzYg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-05-23T06:07:45Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-05-23T06:07:45Z"}, "message": "cpperror.c (_cpp_begin_message): No special casing of CPP_FATAL_LIMIT.\n\n\t* cpperror.c (_cpp_begin_message): No special casing\n\tof CPP_FATAL_LIMIT.\n\t* cppinit.c (sanity_checks): s/DL_FATAL/DL_ICE/.\n\t(output_deps, cpp_handle_option, cpp_post_options): Use DL_ERROR.\n\t* cpplib.c (do_include_common): Use DL_ERROR.\n\t* cpplib.h (CPP_FATAL_LIMIT, CPP_FATAL_ERRORS, DL_FATAL): Remove.\n\t(DL_ICE): Renumber.\n\t* fix-header.c (read_scan_file): Update.\n\nFrom-SVN: r53765", "tree": {"sha": "d76b0e196a131afd496bdeff96688447c5f400bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d76b0e196a131afd496bdeff96688447c5f400bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdee42b16c0af056a289dbcb61ba70917ba7f83b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdee42b16c0af056a289dbcb61ba70917ba7f83b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdee42b16c0af056a289dbcb61ba70917ba7f83b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdee42b16c0af056a289dbcb61ba70917ba7f83b/comments", "author": null, "committer": null, "parents": [{"sha": "e67a7860dc6e7e763e1149e3c77b5d00d69a678a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e67a7860dc6e7e763e1149e3c77b5d00d69a678a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e67a7860dc6e7e763e1149e3c77b5d00d69a678a"}], "stats": {"total": 69, "additions": 33, "deletions": 36}, "files": [{"sha": "4dc4f7f3ce1a22768d32e8d964f6bb598393b459", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdee42b16c0af056a289dbcb61ba70917ba7f83b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdee42b16c0af056a289dbcb61ba70917ba7f83b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bdee42b16c0af056a289dbcb61ba70917ba7f83b", "patch": "@@ -1,3 +1,14 @@\n+2002-05-23  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cpperror.c (_cpp_begin_message): No special casing\n+\tof CPP_FATAL_LIMIT.\n+\t* cppinit.c (sanity_checks): s/DL_FATAL/DL_ICE/.\n+\t(output_deps, cpp_handle_option, cpp_post_options): Use DL_ERROR.\n+\t* cpplib.c (do_include_common): Use DL_ERROR.\n+\t* cpplib.h (CPP_FATAL_LIMIT, CPP_FATAL_ERRORS, DL_FATAL): Remove.\n+\t(DL_ICE): Renumber.\n+\t* fix-header.c (read_scan_file): Update.\n+\n 2002-05-22  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/i386.c (ix86_expand_call): New function, extracted"}, {"sha": "3e6b37c40e9e1e558c34595a970fb0f542389c0c", "filename": "gcc/cpperror.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdee42b16c0af056a289dbcb61ba70917ba7f83b/gcc%2Fcpperror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdee42b16c0af056a289dbcb61ba70917ba7f83b/gcc%2Fcpperror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpperror.c?ref=bdee42b16c0af056a289dbcb61ba70917ba7f83b", "patch": "@@ -92,8 +92,7 @@ _cpp_begin_message (pfile, code, line, column)\n \t{\n \t  if (CPP_OPTION (pfile, inhibit_errors))\n \t    return 0;\n-\t  if (pfile->errors < CPP_FATAL_LIMIT)\n-\t    pfile->errors++;\n+\t  pfile->errors++;\n \t}\n       else if (CPP_OPTION (pfile, inhibit_warnings))\n \treturn 0;\n@@ -102,14 +101,9 @@ _cpp_begin_message (pfile, code, line, column)\n     case DL_ERROR:\n       if (CPP_OPTION (pfile, inhibit_errors))\n \treturn 0;\n-      if (pfile->errors < CPP_FATAL_LIMIT)\n-\tpfile->errors++;\n-      break;\n-\n-      /* Fatal errors cannot be inhibited.  */\n-    case DL_FATAL:\n+      /* ICEs cannot be inhibited.  */\n     case DL_ICE:\n-      pfile->errors = CPP_FATAL_LIMIT;\n+      pfile->errors++;\n       break;\n     }\n "}, {"sha": "55451b578950509c1f347398dd8dc91476644207", "filename": "gcc/cppinit.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdee42b16c0af056a289dbcb61ba70917ba7f83b/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdee42b16c0af056a289dbcb61ba70917ba7f83b/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=bdee42b16c0af056a289dbcb61ba70917ba7f83b", "patch": "@@ -845,31 +845,31 @@ static void sanity_checks (pfile)\n      type precisions made by cpplib.  */\n   test--;\n   if (test < 1)\n-    cpp_error (pfile, DL_FATAL, \"cppchar_t must be an unsigned type\");\n+    cpp_error (pfile, DL_ICE, \"cppchar_t must be an unsigned type\");\n \n   if (CPP_OPTION (pfile, precision) > BITS_PER_HOST_WIDEST_INT)\n-    cpp_error (pfile, DL_FATAL,\n+    cpp_error (pfile, DL_ICE,\n \t       \"preprocessor arithmetic has maximum precision of %lu bits; target requires %lu bits\",\n \t       (unsigned long)BITS_PER_HOST_WIDEST_INT,\n \t       (unsigned long)CPP_OPTION (pfile, precision));\n \n   if (CPP_OPTION (pfile, precision) < CPP_OPTION (pfile, int_precision))\n-    cpp_error (pfile, DL_FATAL,\n+    cpp_error (pfile, DL_ICE,\n \t       \"CPP arithmetic must be at least as precise as a target int\");\n \n   if (CPP_OPTION (pfile, char_precision) < 8)\n-    cpp_error (pfile, DL_FATAL, \"target char is less than 8 bits wide\");\n+    cpp_error (pfile, DL_ICE, \"target char is less than 8 bits wide\");\n \n   if (CPP_OPTION (pfile, wchar_precision) < CPP_OPTION (pfile, char_precision))\n-    cpp_error (pfile, DL_FATAL,\n+    cpp_error (pfile, DL_ICE,\n \t       \"target wchar_t is narrower than target char\");\n \n   if (CPP_OPTION (pfile, int_precision) < CPP_OPTION (pfile, char_precision))\n-    cpp_error (pfile, DL_FATAL,\n+    cpp_error (pfile, DL_ICE,\n \t       \"target int is narrower than target char\");\n \n   if (CPP_OPTION (pfile, wchar_precision) > BITS_PER_CPPCHAR_T)\n-    cpp_error (pfile, DL_FATAL,\n+    cpp_error (pfile, DL_ICE,\n \t       \"CPP on this host cannot handle wide character constants over %lu bits, but the target requires %lu bits\",\n \t       (unsigned long)BITS_PER_CPPCHAR_T,\n \t       (unsigned long)CPP_OPTION (pfile, wchar_precision));\n@@ -1061,7 +1061,7 @@ output_deps (pfile)\n   if (deps_stream != stdout)\n     {\n       if (ferror (deps_stream) || fclose (deps_stream) != 0)\n-\tcpp_error (pfile, DL_FATAL, \"I/O error on output\");\n+\tcpp_error (pfile, DL_ERROR, \"I/O error on output\");\n     }\n }\n \n@@ -1300,7 +1300,7 @@ cpp_handle_option (pfile, argc, argv, ignore)\n       else if (CPP_OPTION (pfile, out_fname) == NULL)\n \tCPP_OPTION (pfile, out_fname) = argv[i];\n       else\n-\tcpp_error (pfile, DL_FATAL,\n+\tcpp_error (pfile, DL_ERROR,\n \t\t   \"too many filenames. Type %s --help for usage info\",\n \t\t   progname);\n     }\n@@ -1328,7 +1328,7 @@ cpp_handle_option (pfile, argc, argv, ignore)\n \t      arg = argv[++i];\n \t      if (!arg)\n \t\t{\n-\t\t  cpp_error (pfile, DL_FATAL,\n+\t\t  cpp_error (pfile, DL_ERROR,\n \t\t\t     cl_options[opt_index].msg, argv[i - 1]);\n \t\t  return argc;\n \t\t}\n@@ -1481,7 +1481,7 @@ cpp_handle_option (pfile, argc, argv, ignore)\n \t    CPP_OPTION (pfile, out_fname) = arg;\n \t  else\n \t    {\n-\t      cpp_error (pfile, DL_FATAL, \"output filename specified twice\");\n+\t      cpp_error (pfile, DL_ERROR, \"output filename specified twice\");\n \t      return argc;\n \t    }\n \t  break;\n@@ -1592,7 +1592,7 @@ cpp_handle_option (pfile, argc, argv, ignore)\n \t\t}\n \t      else\n \t\t{\n-\t\t  cpp_error (pfile, DL_FATAL, \"-I- specified twice\");\n+\t\t  cpp_error (pfile, DL_ERROR, \"-I- specified twice\");\n \t\t  return argc;\n \t\t}\n \t    }\n@@ -1796,7 +1796,7 @@ cpp_post_options (pfile)\n       (CPP_OPTION (pfile, print_deps_missing_files)\n        || CPP_OPTION (pfile, deps_file)\n        || CPP_OPTION (pfile, deps_phony_targets)))\n-    cpp_error (pfile, DL_FATAL,\n+    cpp_error (pfile, DL_ERROR,\n \t       \"you must additionally specify either -M or -MM\");\n }\n "}, {"sha": "ba6924d08ec6f0b009cc6f0c9f659b6242ba38bb", "filename": "gcc/cpplib.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdee42b16c0af056a289dbcb61ba70917ba7f83b/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdee42b16c0af056a289dbcb61ba70917ba7f83b/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=bdee42b16c0af056a289dbcb61ba70917ba7f83b", "patch": "@@ -651,7 +651,7 @@ do_include_common (pfile, type)\n     {\n       /* Prevent #include recursion.  */\n       if (pfile->line_maps.depth >= CPP_STACK_MAX)\n-\tcpp_error (pfile, DL_FATAL, \"#include nested too deeply\");\n+\tcpp_error (pfile, DL_ERROR, \"#include nested too deeply\");\n       else\n \t{\n \t  check_eol (pfile);"}, {"sha": "8376e1c16573d379b9d3849564b1b33554caaeaa", "filename": "gcc/cpplib.h", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdee42b16c0af056a289dbcb61ba70917ba7f83b/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdee42b16c0af056a289dbcb61ba70917ba7f83b/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=bdee42b16c0af056a289dbcb61ba70917ba7f83b", "patch": "@@ -420,10 +420,6 @@ struct cpp_callbacks\n   void (*register_builtins) PARAMS ((cpp_reader *));\n };\n \n-#define CPP_FATAL_LIMIT 1000\n-/* True if we have seen a \"fatal\" error.  */\n-#define CPP_FATAL_ERRORS(PFILE) (cpp_errors (PFILE) >= CPP_FATAL_LIMIT)\n-\n /* Name under which this program was invoked.  */\n extern const char *progname;\n \n@@ -593,13 +589,9 @@ extern int cpp_defined PARAMS ((cpp_reader *, const unsigned char *, int));\n #define DL_PEDWARN\t\t0x02\n /* An error.  */\n #define DL_ERROR\t\t0x03\n-/* A fatal error.  We do not exit, to support use of cpplib as a\n-   library, but may only return CPP_EOF tokens thereon.  It is the\n-   caller's responsibility to check CPP_FATAL_ERRORS.  */\n-#define DL_FATAL\t\t0x04\n /* An internal consistency check failed.  Prints \"internal error: \",\n-   otherwise the same as DL_FATAL.  */\n-#define DL_ICE\t\t\t0x05\n+   otherwise the same as DL_ERROR.  */\n+#define DL_ICE\t\t\t0x04\n /* Extracts a diagnostic level from an int.  */\n #define DL_EXTRACT(l)\t\t(l & 0xf)\n /* Non-zero if a diagnostic level is one of the warnings.  */"}, {"sha": "0a3e98fb1e6577558764788356e022a9deabc5fd", "filename": "gcc/fix-header.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdee42b16c0af056a289dbcb61ba70917ba7f83b/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdee42b16c0af056a289dbcb61ba70917ba7f83b/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=bdee42b16c0af056a289dbcb61ba70917ba7f83b", "patch": "@@ -632,10 +632,10 @@ read_scan_file (in_fname, argc, argv)\n   options->inhibit_errors = 1;\n \n   i = cpp_handle_options (scan_in, argc, argv);\n-  if (i < argc && ! CPP_FATAL_ERRORS (scan_in))\n-    cpp_error (scan_in, DL_FATAL, \"invalid option `%s'\", argv[i]);\n+  if (i < argc)\n+    cpp_error (scan_in, DL_ERROR, \"invalid option `%s'\", argv[i]);\n   cpp_post_options (scan_in);\n-  if (CPP_FATAL_ERRORS (scan_in))\n+  if (cpp_errors (scan_in))\n     exit (FATAL_EXIT_CODE);\n \n   if (! cpp_read_main_file (scan_in, in_fname, NULL))"}]}