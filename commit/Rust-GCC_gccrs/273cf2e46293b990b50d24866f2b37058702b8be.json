{"sha": "273cf2e46293b990b50d24866f2b37058702b8be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjczY2YyZTQ2MjkzYjk5MGI1MGQyNDg2NmYyYjM3MDU4NzAyYjhiZQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2002-02-27T22:14:59Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-02-27T22:14:59Z"}, "message": "c-typeck.c (digest_init): Remove unused parameter; all callers changed.\n\n\t* c-typeck.c (digest_init): Remove unused parameter; all\n\tcallers changed.\n\nFrom-SVN: r50118", "tree": {"sha": "ab2e900cb76ea9746906b1b9ce1dd323267c57ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab2e900cb76ea9746906b1b9ce1dd323267c57ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/273cf2e46293b990b50d24866f2b37058702b8be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/273cf2e46293b990b50d24866f2b37058702b8be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/273cf2e46293b990b50d24866f2b37058702b8be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/273cf2e46293b990b50d24866f2b37058702b8be/comments", "author": null, "committer": null, "parents": [{"sha": "ffde66754357f637be61248e52b39beeadf65c95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffde66754357f637be61248e52b39beeadf65c95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffde66754357f637be61248e52b39beeadf65c95"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "e631babdb1b1a8937229a331c23774d191ef94c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/273cf2e46293b990b50d24866f2b37058702b8be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/273cf2e46293b990b50d24866f2b37058702b8be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=273cf2e46293b990b50d24866f2b37058702b8be", "patch": "@@ -1,3 +1,8 @@\n+2002-02-27  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* c-typeck.c (digest_init): Remove unused parameter; all\n+\tcallers changed.\n+\n 2002-02-27  Geoffrey Keating  <geoffk@redhat.com>\n \n \t* expmed.c (expand_shift): Correctly test for low part of a"}, {"sha": "0ecc4dbd394ae8ee14b8cd85930ed3acab4ed2dc", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/273cf2e46293b990b50d24866f2b37058702b8be/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/273cf2e46293b990b50d24866f2b37058702b8be/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=273cf2e46293b990b50d24866f2b37058702b8be", "patch": "@@ -73,7 +73,7 @@ static void push_array_bounds\t\tPARAMS ((int));\n static int spelling_length\t\tPARAMS ((void));\n static char *print_spelling\t\tPARAMS ((char *));\n static void warning_init\t\tPARAMS ((const char *));\n-static tree digest_init\t\t\tPARAMS ((tree, tree, int, int));\n+static tree digest_init\t\t\tPARAMS ((tree, tree, int));\n static void output_init_element\t\tPARAMS ((tree, tree, tree, int));\n static void output_pending_init_elements PARAMS ((int));\n static int set_designator\t\tPARAMS ((int));\n@@ -3659,8 +3659,7 @@ build_c_cast (type, expr)\n \t  else\n \t    name = \"\";\n \t  t = digest_init (type, build (CONSTRUCTOR, type, NULL_TREE,\n-\t\t\t\t\tbuild_tree_list (field, value)),\n-\t\t\t   0, 0);\n+\t\t\t\t\tbuild_tree_list (field, value)), 0);\n \t  TREE_CONSTANT (t) = TREE_CONSTANT (value);\n \t  return t;\n \t}\n@@ -4345,8 +4344,7 @@ store_init_value (decl, init)\n \n   /* Digest the specified initializer into an expression.  */\n \n-  value = digest_init (type, init, TREE_STATIC (decl),\n-\t\t       TREE_STATIC (decl) || (pedantic && !flag_isoc99));\n+  value = digest_init (type, init, TREE_STATIC (decl));\n \n   /* Store the expression if valid; else report error.  */\n \n@@ -4607,14 +4605,13 @@ warning_init (msgid)\n /* Digest the parser output INIT as an initializer for type TYPE.\n    Return a C expression of type TYPE to represent the initial value.\n \n-   The arguments REQUIRE_CONSTANT and CONSTRUCTOR_CONSTANT request errors\n-   if non-constant initializers or elements are seen.  CONSTRUCTOR_CONSTANT\n-   applies only to elements of constructors.  */\n+   REQUIRE_CONSTANT requests an error if non-constant initializers or\n+   elements are seen.  */\n \n static tree\n-digest_init (type, init, require_constant, constructor_constant)\n+digest_init (type, init, require_constant)\n      tree type, init;\n-     int require_constant, constructor_constant;\n+     int require_constant;\n {\n   enum tree_code code = TREE_CODE (type);\n   tree inside_init = init;\n@@ -6189,8 +6186,7 @@ output_init_element (value, type, field, pending)\n \t\t  || TREE_CHAIN (field)))))\n     return;\n \n-  value = digest_init (type, value, require_constant_value,\n-\t\t       require_constant_elements);\n+  value = digest_init (type, value, require_constant_value);\n   if (value == error_mark_node)\n     {\n       constructor_erroneous = 1;"}]}