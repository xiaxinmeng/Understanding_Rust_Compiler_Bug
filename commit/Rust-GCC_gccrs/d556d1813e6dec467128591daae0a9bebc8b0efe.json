{"sha": "d556d1813e6dec467128591daae0a9bebc8b0efe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU1NmQxODEzZTZkZWM0NjcxMjg1OTFkYWFlMGE5YmViYzhiMGVmZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-01-14T12:16:58Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-01-14T12:16:58Z"}, "message": "re PR rtl-optimization/31944 (Endless loop while building a 64-bit 2.6.20 kernel)\n\n\tPR rtl-optimization/31944\n\t* cse.c (remove_pseudo_from_table): New function.\n\t(merge_equiv_classes): Use above function to remove pseudo-registers.\n\t(invalidate): Likewise.\n\nFrom-SVN: r131522", "tree": {"sha": "6ee45e3f1b54b348479a34238b5dc118623582a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ee45e3f1b54b348479a34238b5dc118623582a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d556d1813e6dec467128591daae0a9bebc8b0efe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d556d1813e6dec467128591daae0a9bebc8b0efe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d556d1813e6dec467128591daae0a9bebc8b0efe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d556d1813e6dec467128591daae0a9bebc8b0efe/comments", "author": null, "committer": null, "parents": [{"sha": "6bf4cbe817462e6c5f7f37cc22e0f2ba34986864", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bf4cbe817462e6c5f7f37cc22e0f2ba34986864", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bf4cbe817462e6c5f7f37cc22e0f2ba34986864"}], "stats": {"total": 55, "additions": 45, "deletions": 10}, "files": [{"sha": "d463d4ea564ad514d4373381f1c8af879653f4ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d556d1813e6dec467128591daae0a9bebc8b0efe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d556d1813e6dec467128591daae0a9bebc8b0efe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d556d1813e6dec467128591daae0a9bebc8b0efe", "patch": "@@ -1,3 +1,10 @@\n+2008-01-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR rtl-optimization/31944\n+\t* cse.c (remove_pseudo_from_table): New function.\n+\t(merge_equiv_classes): Use above function to remove pseudo-registers.\n+\t(invalidate): Likewise.\n+\n 2008-01-13  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/34601"}, {"sha": "f6660e4ff12a15c02365d5c918f348a08c02b4b6", "filename": "gcc/cse.c", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d556d1813e6dec467128591daae0a9bebc8b0efe/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d556d1813e6dec467128591daae0a9bebc8b0efe/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=d556d1813e6dec467128591daae0a9bebc8b0efe", "patch": "@@ -554,7 +554,8 @@ static void delete_reg_equiv (unsigned int);\n static int mention_regs (rtx);\n static int insert_regs (rtx, struct table_elt *, int);\n static void remove_from_table (struct table_elt *, unsigned);\n-static struct table_elt *lookup\t(rtx, unsigned, enum machine_mode);\n+static void remove_pseudo_from_table (rtx, unsigned);\n+static struct table_elt *lookup (rtx, unsigned, enum machine_mode);\n static struct table_elt *lookup_for_remove (rtx, unsigned, enum machine_mode);\n static rtx lookup_as_function (rtx, enum rtx_code);\n static struct table_elt *insert (rtx, struct table_elt *, unsigned,\n@@ -1288,6 +1289,19 @@ remove_from_table (struct table_elt *elt, unsigned int hash)\n   free_element_chain = elt;\n }\n \n+/* Same as above, but X is a pseudo-register.  */\n+\n+static void\n+remove_pseudo_from_table (rtx x, unsigned int hash)\n+{\n+  struct table_elt *elt;\n+\n+  /* Because a pseudo-register can be referenced in more than one\n+     mode, we might have to remove more than one table entry.  */\n+  while ((elt = lookup_for_remove (x, hash, VOIDmode)))\n+    remove_from_table (elt, hash);\n+}\n+\n /* Look up X in the hash table and return its table element,\n    or 0 if X is not in the table.\n \n@@ -1605,7 +1619,10 @@ merge_equiv_classes (struct table_elt *class1, struct table_elt *class2)\n \t      delete_reg_equiv (REGNO (exp));\n \t    }\n \n-\t  remove_from_table (elt, hash);\n+\t  if (REG_P (exp) && REGNO (exp) >= FIRST_PSEUDO_REGISTER)\n+\t    remove_pseudo_from_table (exp, hash);\n+\t  else\n+\t    remove_from_table (elt, hash);\n \n \t  if (insert_regs (exp, class1, 0) || need_rehash)\n \t    {\n@@ -1701,14 +1718,7 @@ invalidate (rtx x, enum machine_mode full_mode)\n \tSUBREG_TICKED (regno) = -1;\n \n \tif (regno >= FIRST_PSEUDO_REGISTER)\n-\t  {\n-\t    /* Because a register can be referenced in more than one mode,\n-\t       we might have to remove more than one table entry.  */\n-\t    struct table_elt *elt;\n-\n-\t    while ((elt = lookup_for_remove (x, hash, GET_MODE (x))))\n-\t      remove_from_table (elt, hash);\n-\t  }\n+\t  remove_pseudo_from_table (x, hash);\n \telse\n \t  {\n \t    HOST_WIDE_INT in_table"}, {"sha": "6a6d9b9eda07a4983db3387329db1adc07604d6d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d556d1813e6dec467128591daae0a9bebc8b0efe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d556d1813e6dec467128591daae0a9bebc8b0efe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d556d1813e6dec467128591daae0a9bebc8b0efe", "patch": "@@ -1,3 +1,7 @@\n+2008-01-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.c-torture/compile/20080114-1.c: New test.\n+\n 2008-01-13  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/34665"}, {"sha": "51affb7bddc9b89dc22b1d3a86a04438bf588c6a", "filename": "gcc/testsuite/gcc.c-torture/compile/20080114-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d556d1813e6dec467128591daae0a9bebc8b0efe/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20080114-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d556d1813e6dec467128591daae0a9bebc8b0efe/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20080114-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20080114-1.c?ref=d556d1813e6dec467128591daae0a9bebc8b0efe", "patch": "@@ -0,0 +1,14 @@\n+/* PR rtl-optimization/31944 */\n+/* Origin: Aurelien Jarno <aurelien@aurel32.net> */\n+\n+int type;\n+\n+void stuck(int res)\n+{\n+  if (type == 1) {\n+    if (res == 0) asm volatile(\"nop\");\n+  }\n+  else if (type == 0) {\n+    if (res == 0) asm volatile(\"nop\" : : \"i\" (0));\n+  }\n+}"}]}