{"sha": "488f17e1fcdadb336f33f89e3c242898e070d1e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg4ZjE3ZTFmY2RhZGIzMzZmMzNmODllM2MyNDI4OThlMDcwZDFlMw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-08-28T21:25:22Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-08-28T21:25:22Z"}, "message": "builtin-types.def (BT_FN_FLOAT_INT_FLOAT, [...]): New.\n\n\t* builtin-types.def (BT_FN_FLOAT_INT_FLOAT,\n\tBT_FN_DOUBLE_INT_DOUBLE, BT_FN_LONGDOUBLE_INT_LONGDOUBLE): New.\n\n\t* builtins.def (BUILT_IN_ERF, BUILT_IN_ERFC, BUILT_IN_ERFCF,\n\tBUILT_IN_ERFCL, BUILT_IN_ERFF, BUILT_IN_ERFL, BUILT_IN_GAMMA,\n\tBUILT_IN_GAMMAF, BUILT_IN_GAMMAL, BUILT_IN_J0, BUILT_IN_J0F,\n\tBUILT_IN_J0L, BUILT_IN_J1, BUILT_IN_J1F, BUILT_IN_J1L,\n\tBUILT_IN_JN, BUILT_IN_JNF, BUILT_IN_JNL, BUILT_IN_LGAMMA,\n\tBUILT_IN_LGAMMAF, BUILT_IN_LGAMMAL, BUILT_IN_SIGNIFICAND,\n\tBUILT_IN_SIGNIFICANDF, BUILT_IN_SIGNIFICANDL, BUILT_IN_TGAMMA,\n\tBUILT_IN_TGAMMAF, BUILT_IN_TGAMMAL, BUILT_IN_Y0, BUILT_IN_Y0F,\n\tBUILT_IN_Y0L, BUILT_IN_Y1, BUILT_IN_Y1F, BUILT_IN_Y1L,\n\tBUILT_IN_YN, BUILT_IN_YNF, BUILT_IN_YNL): New.\n\n\t* doc/extend.texi: Document new builtins.\n\ntestsuite:\n\t* gcc.dg/builtins-1.c: Add new cases.\n\t* gcc.dg/torture/builtin-attr-1.c: Likewise.\n\nFrom-SVN: r70889", "tree": {"sha": "cbc648d9a933bc94eee9d4f6503ccdc204227156", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbc648d9a933bc94eee9d4f6503ccdc204227156"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/488f17e1fcdadb336f33f89e3c242898e070d1e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/488f17e1fcdadb336f33f89e3c242898e070d1e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/488f17e1fcdadb336f33f89e3c242898e070d1e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/488f17e1fcdadb336f33f89e3c242898e070d1e3/comments", "author": null, "committer": null, "parents": [{"sha": "2882c718518b4c37430ceda17ff23b210411c23a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2882c718518b4c37430ceda17ff23b210411c23a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2882c718518b4c37430ceda17ff23b210411c23a"}], "stats": {"total": 240, "additions": 208, "deletions": 32}, "files": [{"sha": "987b4ceb260fa3fbbd2b63f934e317cbe2701b43", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/488f17e1fcdadb336f33f89e3c242898e070d1e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/488f17e1fcdadb336f33f89e3c242898e070d1e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=488f17e1fcdadb336f33f89e3c242898e070d1e3", "patch": "@@ -1,3 +1,21 @@\n+2003-08-28  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtin-types.def (BT_FN_FLOAT_INT_FLOAT,\n+\tBT_FN_DOUBLE_INT_DOUBLE, BT_FN_LONGDOUBLE_INT_LONGDOUBLE): New.\n+\t\n+\t* builtins.def (BUILT_IN_ERF, BUILT_IN_ERFC, BUILT_IN_ERFCF,\n+\tBUILT_IN_ERFCL, BUILT_IN_ERFF, BUILT_IN_ERFL, BUILT_IN_GAMMA,\n+\tBUILT_IN_GAMMAF, BUILT_IN_GAMMAL, BUILT_IN_J0, BUILT_IN_J0F,\n+\tBUILT_IN_J0L, BUILT_IN_J1, BUILT_IN_J1F, BUILT_IN_J1L,\n+\tBUILT_IN_JN, BUILT_IN_JNF, BUILT_IN_JNL, BUILT_IN_LGAMMA,\n+\tBUILT_IN_LGAMMAF, BUILT_IN_LGAMMAL, BUILT_IN_SIGNIFICAND,\n+\tBUILT_IN_SIGNIFICANDF, BUILT_IN_SIGNIFICANDL, BUILT_IN_TGAMMA,\n+\tBUILT_IN_TGAMMAF, BUILT_IN_TGAMMAL, BUILT_IN_Y0, BUILT_IN_Y0F,\n+\tBUILT_IN_Y0L, BUILT_IN_Y1, BUILT_IN_Y1F, BUILT_IN_Y1L,\n+\tBUILT_IN_YN, BUILT_IN_YNF, BUILT_IN_YNL): New.\n+\t\n+\t* doc/extend.texi: Document new builtins.\n+\n 2003-08-28  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* fixinc/mkfixinc.sh: Remove special case code for unsupported"}, {"sha": "3043b8dc00020152f42a9d1a49e1721b2e7dab83", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/488f17e1fcdadb336f33f89e3c242898e070d1e3/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/488f17e1fcdadb336f33f89e3c242898e070d1e3/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=488f17e1fcdadb336f33f89e3c242898e070d1e3", "patch": "@@ -180,6 +180,12 @@ DEF_FUNCTION_TYPE_2 (BT_FN_DOUBLE_DOUBLE_INT,\n \t\t     BT_DOUBLE, BT_DOUBLE, BT_INT)\n DEF_FUNCTION_TYPE_2 (BT_FN_LONGDOUBLE_LONGDOUBLE_INT,\n \t\t     BT_LONGDOUBLE, BT_LONGDOUBLE, BT_INT)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT_INT_FLOAT,\n+\t\t     BT_FLOAT, BT_INT, BT_FLOAT)\n+DEF_FUNCTION_TYPE_2 (BT_FN_DOUBLE_INT_DOUBLE,\n+\t\t     BT_DOUBLE, BT_INT, BT_DOUBLE)\n+DEF_FUNCTION_TYPE_2 (BT_FN_LONGDOUBLE_INT_LONGDOUBLE,\n+\t\t     BT_LONGDOUBLE, BT_INT, BT_LONGDOUBLE)\n DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT_FLOAT_LONG,\n \t\t     BT_FLOAT, BT_FLOAT, BT_LONG)\n DEF_FUNCTION_TYPE_2 (BT_FN_DOUBLE_DOUBLE_LONG,"}, {"sha": "81a813f47c97ed4443722f404f72ff8cc6974a69", "filename": "gcc/builtins.def", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/488f17e1fcdadb336f33f89e3c242898e070d1e3/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/488f17e1fcdadb336f33f89e3c242898e070d1e3/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=488f17e1fcdadb336f33f89e3c242898e070d1e3", "patch": "@@ -182,6 +182,12 @@ DEF_C99_BUILTIN        (BUILT_IN_CREALL, \"creall\", BT_FN_LONGDOUBLE_COMPLEX_LONG\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_DREM, \"drem\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_DREMF, \"dremf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_DREML, \"dreml\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_ERF, \"erf\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_BUILTIN        (BUILT_IN_ERFC, \"erfc\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_BUILTIN        (BUILT_IN_ERFCF, \"erfcf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_BUILTIN        (BUILT_IN_ERFCL, \"erfcl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_BUILTIN        (BUILT_IN_ERFF, \"erff\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_BUILTIN        (BUILT_IN_ERFL, \"erfl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_LIB_BUILTIN        (BUILT_IN_EXP, \"exp\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_EXP10, \"exp10\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_EXP10F, \"exp10f\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n@@ -215,6 +221,9 @@ DEF_C99_BUILTIN        (BUILT_IN_FMINL, \"fminl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LON\n DEF_LIB_BUILTIN        (BUILT_IN_FMOD, \"fmod\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_FMODF, \"fmodf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_FMODL, \"fmodl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_GAMMA, \"gamma\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_GAMMAF, \"gammaf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_GAMMAL, \"gammal\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_GCC_BUILTIN        (BUILT_IN_HUGE_VAL, \"huge_val\", BT_FN_DOUBLE, ATTR_CONST_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_HUGE_VALF, \"huge_valf\", BT_FN_FLOAT, ATTR_CONST_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_HUGE_VALL, \"huge_vall\", BT_FN_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)\n@@ -227,9 +236,21 @@ DEF_C99_BUILTIN        (BUILT_IN_ILOGBL, \"ilogbl\", BT_FN_INT_LONGDOUBLE, ATTR_MA\n DEF_GCC_BUILTIN        (BUILT_IN_INF, \"inf\", BT_FN_DOUBLE, ATTR_CONST_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_INFF, \"inff\", BT_FN_FLOAT, ATTR_CONST_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_INFL, \"infl\", BT_FN_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_J0, \"j0\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_J0F, \"j0f\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_J0L, \"j0l\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_J1, \"j1\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_J1F, \"j1f\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_J1L, \"j1l\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_JN, \"jn\", BT_FN_DOUBLE_INT_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_JNF, \"jnf\", BT_FN_FLOAT_INT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_JNL, \"jnl\", BT_FN_LONGDOUBLE_INT_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_LIB_BUILTIN        (BUILT_IN_LDEXP, \"ldexp\", BT_FN_DOUBLE_DOUBLE_INT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_LDEXPF, \"ldexpf\", BT_FN_FLOAT_FLOAT_INT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_LDEXPL, \"ldexpl\", BT_FN_LONGDOUBLE_LONGDOUBLE_INT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_LGAMMA, \"lgamma\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_LGAMMAF, \"lgammaf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_LGAMMAL, \"lgammal\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_LLRINT, \"llrint\", BT_FN_LONGLONG_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_LLRINTF, \"llrintf\", BT_FN_LONGLONG_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_LLRINTL, \"llrintl\", BT_FN_LONGLONG_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n@@ -296,6 +317,9 @@ DEF_C99_BUILTIN        (BUILT_IN_SCALBLNL, \"scalblnl\", BT_FN_LONGDOUBLE_LONGDOUB\n DEF_C99_BUILTIN        (BUILT_IN_SCALBN, \"scalbn\", BT_FN_DOUBLE_DOUBLE_INT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_SCALBNF, \"scalbnf\", BT_FN_FLOAT_FLOAT_INT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_SCALBNL, \"scalbnl\", BT_FN_LONGDOUBLE_LONGDOUBLE_INT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_SIGNIFICAND, \"significand\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_SIGNIFICANDF, \"significandf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_SIGNIFICANDL, \"significandl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_LIB_BUILTIN        (BUILT_IN_SIN, \"sin\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_SINF, \"sinf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING)\n DEF_LIB_BUILTIN        (BUILT_IN_SINH, \"sinh\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n@@ -311,9 +335,21 @@ DEF_LIB_BUILTIN        (BUILT_IN_TANH, \"tanh\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_\n DEF_C99_C90RES_BUILTIN (BUILT_IN_TANHF, \"tanhf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_TANHL, \"tanhl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_TANL, \"tanl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_BUILTIN        (BUILT_IN_TGAMMA, \"tgamma\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_TGAMMAF, \"tgammaf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_TGAMMAL, \"tgammal\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_TRUNC, \"trunc\", BT_FN_DOUBLE_DOUBLE, ATTR_CONST_NOTHROW_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_TRUNCF, \"truncf\", BT_FN_FLOAT_FLOAT, ATTR_CONST_NOTHROW_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_TRUNCL, \"truncl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_Y0, \"y0\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_Y0F, \"y0f\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_Y0L, \"y0l\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_Y1, \"y1\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_Y1F, \"y1f\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_Y1L, \"y1l\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_YN, \"yn\", BT_FN_DOUBLE_INT_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_YNF, \"ynf\", BT_FN_FLOAT_INT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_YNL, \"ynl\", BT_FN_LONGDOUBLE_INT_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n \n /* Category: string/memory builtins.  */\n /* bcmp, bcopy and bzero have traditionally accepted NULL pointers"}, {"sha": "3f0819418f734eed5fb41276d5a01e60c1bfe920", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 62, "deletions": 18, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/488f17e1fcdadb336f33f89e3c242898e070d1e3/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/488f17e1fcdadb336f33f89e3c242898e070d1e3/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=488f17e1fcdadb336f33f89e3c242898e070d1e3", "patch": "@@ -4786,6 +4786,12 @@ v4si f (v4si a, v4si b, v4si c)\n @findex drem\n @findex dremf\n @findex dreml\n+@findex erf\n+@findex erfc\n+@findex erfcf\n+@findex erfcl\n+@findex erff\n+@findex erfl\n @findex exit\n @findex exp\n @findex exp10\n@@ -4826,6 +4832,9 @@ v4si f (v4si a, v4si b, v4si c)\n @findex fputs\n @findex fputs_unlocked\n @findex fscanf\n+@findex gamma\n+@findex gammaf\n+@findex gammal\n @findex gettext\n @findex hypot\n @findex hypotf\n@@ -4835,10 +4844,22 @@ v4si f (v4si a, v4si b, v4si c)\n @findex ilogbl\n @findex imaxabs\n @findex index\n+@findex j0\n+@findex j0f\n+@findex j0l\n+@findex j1\n+@findex j1f\n+@findex j1l\n+@findex jn\n+@findex jnf\n+@findex jnl\n @findex labs\n @findex ldexp\n @findex ldexpf\n @findex ldexpl\n+@findex lgamma\n+@findex lgammaf\n+@findex lgammal\n @findex llabs\n @findex llrint\n @findex llrintf\n@@ -4910,6 +4931,9 @@ v4si f (v4si a, v4si b, v4si c)\n @findex scalbn\n @findex scalbnf\n @findex scanfnl\n+@findex significand\n+@findex significandf\n+@findex significandl\n @findex sin\n @findex sinf\n @findex sinh\n@@ -4945,6 +4969,9 @@ v4si f (v4si a, v4si b, v4si c)\n @findex tanhf\n @findex tanhl\n @findex tanl\n+@findex tgamma\n+@findex tgammaf\n+@findex tgammal\n @findex trunc\n @findex truncf\n @findex truncl\n@@ -4955,6 +4982,15 @@ v4si f (v4si a, v4si b, v4si c)\n @findex vsnprintf\n @findex vsprintf\n @findex vsscanf\n+@findex y0\n+@findex y0f\n+@findex y0l\n+@findex y1\n+@findex y1f\n+@findex y1l\n+@findex yn\n+@findex ynf\n+@findex ynl\n \n GCC provides a large number of built-in functions other than the ones\n mentioned above.  Some of these are for internal use in the processing\n@@ -4981,10 +5017,15 @@ Outside strict ISO C mode (@option{-ansi}, @option{-std=c89} or\n @code{dcgettext}, @code{dgettext}, @code{dremf}, @code{dreml},\n @code{drem}, @code{exp10f}, @code{exp10l}, @code{exp10}, @code{ffsll},\n @code{ffsl}, @code{ffs}, @code{fprintf_unlocked}, @code{fputs_unlocked},\n-@code{gettext}, @code{index}, @code{mempcpy}, @code{pow10f},\n-@code{pow10l}, @code{pow10}, @code{printf_unlocked}, @code{rindex},\n-@code{scalbf}, @code{scalbl}, @code{scalb}, @code{stpcpy},\n-@code{strdup} and @code{strfmon}\n+@code{gammaf}, @code{gammal}, @code{gamma}, @code{gettext},\n+@code{index}, @code{j0f}, @code{j0l}, @code{j0}, @code{j1f}, @code{j1l},\n+@code{j1}, @code{jnf}, @code{jnl}, @code{jn}, @code{mempcpy},\n+@code{pow10f}, @code{pow10l}, @code{pow10}, @code{printf_unlocked},\n+@code{rindex}, @code{scalbf}, @code{scalbl}, @code{scalb},\n+@code{significandf}, @code{significandl}, @code{significand},\n+@code{stpcpy}, @code{strdup}, @code{strfmon}, @code{y0f}, @code{y0l},\n+@code{y0}, @code{y1f}, @code{y1l}, @code{y1}, @code{ynf}, @code{ynl} and\n+@code{yn}\n may be handled as built-in functions.\n All these functions have corresponding versions\n prefixed with @code{__builtin_}, which may be used even in strict C89\n@@ -4997,25 +5038,28 @@ The ISO C99 functions\n @code{cbrt}, @code{cimagf}, @code{cimagl}, @code{cimag}, @code{conjf},\n @code{conjl}, @code{conj}, @code{copysignf}, @code{copysignl},\n @code{copysign}, @code{crealf}, @code{creall}, @code{creal},\n-@code{exp2f}, @code{exp2l}, @code{exp2}, @code{expm1f}, @code{expm1l},\n-@code{expm1}, @code{fdimf}, @code{fdiml}, @code{fdim}, @code{fmaf},\n-@code{fmal}, @code{fmaxf}, @code{fmaxl}, @code{fmax}, @code{fma},\n-@code{fminf}, @code{fminl}, @code{fmin}, @code{hypotf}, @code{hypotl},\n-@code{hypot}, @code{ilogbf}, @code{ilogbl}, @code{ilogb},\n-@code{imaxabs}, @code{llabs}, @code{llrintf}, @code{llrintl},\n-@code{llrint}, @code{llroundf}, @code{llroundl}, @code{llround},\n-@code{log1pf}, @code{log1pl}, @code{log1p}, @code{log2f}, @code{log2l},\n-@code{log2}, @code{logbf}, @code{logbl}, @code{logb}, @code{lrintf},\n-@code{lrintl}, @code{lrint}, @code{lroundf}, @code{lroundl},\n-@code{lround}, @code{nearbyintf}, @code{nearbyintl}, @code{nearbyint},\n+@code{erfcf}, @code{erfcl}, @code{erfc}, @code{erff}, @code{erfl},\n+@code{erf}, @code{exp2f}, @code{exp2l}, @code{exp2}, @code{expm1f},\n+@code{expm1l}, @code{expm1}, @code{fdimf}, @code{fdiml}, @code{fdim},\n+@code{fmaf}, @code{fmal}, @code{fmaxf}, @code{fmaxl}, @code{fmax},\n+@code{fma}, @code{fminf}, @code{fminl}, @code{fmin}, @code{hypotf},\n+@code{hypotl}, @code{hypot}, @code{ilogbf}, @code{ilogbl}, @code{ilogb},\n+@code{imaxabs}, @code{lgammaf}, @code{lgammal}, @code{lgamma},\n+@code{llabs}, @code{llrintf}, @code{llrintl}, @code{llrint},\n+@code{llroundf}, @code{llroundl}, @code{llround}, @code{log1pf},\n+@code{log1pl}, @code{log1p}, @code{log2f}, @code{log2l}, @code{log2},\n+@code{logbf}, @code{logbl}, @code{logb}, @code{lrintf}, @code{lrintl},\n+@code{lrint}, @code{lroundf}, @code{lroundl}, @code{lround},\n+@code{nearbyintf}, @code{nearbyintl}, @code{nearbyint},\n @code{nextafterf}, @code{nextafterl}, @code{nextafter},\n @code{nexttowardf}, @code{nexttowardl}, @code{nexttoward},\n @code{remainderf}, @code{remainderl}, @code{remainder}, @code{rintf},\n @code{rintl}, @code{rint}, @code{roundf}, @code{roundl}, @code{round},\n @code{scalblnf}, @code{scalblnl}, @code{scalbln}, @code{scalbnf},\n-@code{scalbnl}, @code{scalbn}, @code{snprintf}, @code{truncf},\n-@code{truncl}, @code{trunc}, @code{vfscanf}, @code{vscanf},\n-@code{vsnprintf} and @code{vsscanf},\n+@code{scalbnl}, @code{scalbn}, @code{snprintf}, @code{tgammaf},\n+@code{tgammal}, @code{tgamma}, @code{truncf}, @code{truncl},\n+@code{trunc}, @code{vfscanf}, @code{vscanf}, @code{vsnprintf} and\n+@code{vsscanf},\n are handled as built-in functions\n except in strict ISO C90 mode (@option{-ansi} or @option{-std=c89}).\n "}, {"sha": "1a4e07f7738feeb1654c2fb369c9592014818bb9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/488f17e1fcdadb336f33f89e3c242898e070d1e3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/488f17e1fcdadb336f33f89e3c242898e070d1e3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=488f17e1fcdadb336f33f89e3c242898e070d1e3", "patch": "@@ -1,3 +1,13 @@\n+2003-08-28  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/builtins-1.c: Add new cases.\n+\t* gcc.dg/torture/builtin-attr-1.c: Likewise.\n+\n+2003-08-28  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/builtins-1.c: Add more math builtin tests.\n+\t* gcc.dg/torture/builtin-attr-1.c: New test.\n+\n 2003-08-28  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR optimization/5079"}, {"sha": "297a083771d35353021275724c6f57afd1cd76ff", "filename": "gcc/testsuite/gcc.dg/builtins-1.c", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/488f17e1fcdadb336f33f89e3c242898e070d1e3/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/488f17e1fcdadb336f33f89e3c242898e070d1e3/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-1.c?ref=488f17e1fcdadb336f33f89e3c242898e070d1e3", "patch": "@@ -30,9 +30,16 @@ double test_##FN(TYPE x) { return __builtin_##FN(x); } \\\n float test_##FN##f(TYPE x) { return __builtin_##FN##f(x); } \\\n long double test_##FN##l(TYPE x) { return __builtin_##FN##l(x); } \n \n+/* Test FP functions taking two arguments, the first argument is of a\n+   supplied type.  */\n+#define FPTEST2ARG1(FN, TYPE) \\\n+double test_##FN(TYPE x, double y) { return __builtin_##FN(x, y); } \\\n+float test_##FN##f(TYPE x, float y) { return __builtin_##FN##f(x, y); } \\\n+long double test_##FN##l(TYPE x, long double y) { return __builtin_##FN##l(x, y); } \n+\n /* Test FP functions taking two arguments, the second argument is of a\n    supplied type.  */\n-#define FPTEST2ARG(FN, TYPE) \\\n+#define FPTEST2ARG2(FN, TYPE) \\\n double test_##FN(double x, TYPE y) { return __builtin_##FN(x, y); } \\\n float test_##FN##f(float x, TYPE y) { return __builtin_##FN##f(x, y); } \\\n long double test_##FN##l(long double x, TYPE y) { return __builtin_##FN##l(x, y); } \n@@ -70,6 +77,8 @@ FPTEST2     (copysign)\n FPTEST1     (cos)\n FPTEST1     (cosh)\n FPTEST2     (drem)\n+FPTEST1     (erf)\n+FPTEST1     (erfc)\n FPTEST1     (exp)\n FPTEST1     (exp10)\n FPTEST1     (exp2)\n@@ -81,11 +90,16 @@ FPTEST3     (fma)\n FPTEST2     (fmax)\n FPTEST2     (fmin)\n FPTEST2     (fmod)\n+FPTEST1     (gamma)\n FPTEST0     (huge_val)\n FPTEST2     (hypot)\n FPTEST1     (ilogb)\n FPTEST0     (inf)\n-FPTEST2ARG  (ldexp, int)\n+FPTEST1     (j0)\n+FPTEST1     (j1)\n+FPTEST2ARG1 (jn, int)\n+FPTEST2ARG2 (ldexp, int)\n+FPTEST1     (lgamma)\n FPTEST1RET  (llrint, long long)\n FPTEST1RET  (llround, long long)\n FPTEST1     (log)\n@@ -106,11 +120,16 @@ FPTEST2     (remainder)\n FPTEST1     (rint)\n FPTEST1     (round)\n FPTEST2     (scalb)\n-FPTEST2ARG  (scalbln, int)\n-FPTEST2ARG  (scalbn, int)\n+FPTEST2ARG2 (scalbln, int)\n+FPTEST2ARG2 (scalbn, int)\n+FPTEST1     (significand)\n FPTEST1     (sin)\n FPTEST1     (sinh)\n FPTEST1     (sqrt)\n FPTEST1     (tan)\n FPTEST1     (tanh)\n+FPTEST1     (tgamma)\n FPTEST1     (trunc)\n+FPTEST1     (y0)\n+FPTEST1     (y1)\n+FPTEST2ARG1 (yn, int)"}, {"sha": "2bb16c321d371e5d12472642a96898de09e7a10f", "filename": "gcc/testsuite/gcc.dg/torture/builtin-attr-1.c", "status": "modified", "additions": 53, "deletions": 10, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/488f17e1fcdadb336f33f89e3c242898e070d1e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-attr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/488f17e1fcdadb336f33f89e3c242898e070d1e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-attr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-attr-1.c?ref=488f17e1fcdadb336f33f89e3c242898e070d1e3", "patch": "@@ -83,9 +83,24 @@ void test_builtin_##FN##f(float f1, float f2) \\\n void test_builtin_##FN##l(long double ld1, long double ld2) \\\n { if (__builtin_##FN##l(ld1,ld2) != __builtin_##FN##l(ld1,ld2)) link_failure_builtin_##FN##l(); }\n \n-/* Test the __builtin_ functions taking two arguments, one FP and one\n-   supplied type (with the \"f\" and \"l\" variants).  */\n-#define BUILTIN_FPTEST2ARG(FN, TYPE) \\\n+/* Test the __builtin_ functions taking two arguments, the first one\n+   is of a supplied type and the second one one is of FP type (with\n+   the \"f\" and \"l\" variants).  */\n+#define BUILTIN_FPTEST2ARG1(FN, TYPE) \\\n+extern void link_failure_builtin_##FN(void); \\\n+extern void link_failure_builtin_##FN##f(void); \\\n+extern void link_failure_builtin_##FN##l(void); \\\n+void test_builtin_##FN(TYPE x, double d) \\\n+{ if (__builtin_##FN(x,d) != __builtin_##FN(x,d)) link_failure_builtin_##FN(); } \\\n+void test_builtin_##FN##f(TYPE x, float f) \\\n+{ if (__builtin_##FN##f(x,f) != __builtin_##FN##f(x,f)) link_failure_builtin_##FN##f(); } \\\n+void test_builtin_##FN##l(TYPE x, long double ld) \\\n+{ if (__builtin_##FN##l(x,ld) != __builtin_##FN##l(x,ld)) link_failure_builtin_##FN##l(); }\n+\n+/* Test the __builtin_ functions taking two arguments, the first one\n+   is of FP type and the second one one is of a supplied type (with\n+   the \"f\" and \"l\" variants).  */\n+#define BUILTIN_FPTEST2ARG2(FN, TYPE) \\\n extern void link_failure_builtin_##FN(void); \\\n extern void link_failure_builtin_##FN##f(void); \\\n extern void link_failure_builtin_##FN##l(void); \\\n@@ -139,10 +154,26 @@ void test_##FN##f(float f1, float f2) \\\n void test_##FN##l(long double ld1, long double ld2) \\\n { if (FN##l(ld1,ld2) != FN##l(ld1,ld2)) link_failure_##FN##l(); }\n \n-/* Test the functions taking two arguments, one FP and one of supplied\n-   type (with the \"f\" and \"l\" variants).  */\n-#define FPTEST2ARG(FN, TYPE) \\\n-BUILTIN_FPTEST2ARG(FN, TYPE) \\\n+/* Test the functions taking two arguments, the first one is of a\n+   supplied type and the second one one is of FP type (with the \"f\"\n+   and \"l\" variants).  */\n+#define FPTEST2ARG1(FN, TYPE) \\\n+BUILTIN_FPTEST2ARG1(FN, TYPE) \\\n+extern void link_failure_##FN(void); \\\n+extern void link_failure_##FN##f(void); \\\n+extern void link_failure_##FN##l(void); \\\n+void test_##FN(TYPE x, double d) \\\n+{ if (FN(x,d) != FN(x,d)) link_failure_##FN(); } \\\n+void test_##FN##f(TYPE x, float f) \\\n+{ if (FN##f(x,f) != FN##f(x,f)) link_failure_##FN##f(); } \\\n+void test_##FN##l(TYPE x, long double ld) \\\n+{ if (FN##l(x,ld) != FN##l(x,ld)) link_failure_##FN##l(); }\n+\n+/* Test the functions taking two arguments, the first one is of FP\n+   type and the second one one is of a supplied type (with the \"f\" and\n+   \"l\" variants).  */\n+#define FPTEST2ARG2(FN, TYPE) \\\n+BUILTIN_FPTEST2ARG2(FN, TYPE) \\\n extern void link_failure_##FN(void); \\\n extern void link_failure_##FN##f(void); \\\n extern void link_failure_##FN##l(void); \\\n@@ -182,6 +213,8 @@ FPTEST2            (copysign)\n FPTEST1            (cos)\n FPTEST1            (cosh)\n FPTEST2            (drem)\n+FPTEST1            (erf)\n+FPTEST1            (erfc)\n FPTEST1            (exp)\n FPTEST1            (exp10)\n FPTEST1            (exp2)\n@@ -193,11 +226,16 @@ FPTEST3            (fma)\n FPTEST2            (fmax)\n FPTEST2            (fmin)\n FPTEST2            (fmod)\n+FPTEST1            (gamma)\n BUILTIN_FPTEST0    (huge_val)\n FPTEST2            (hypot)\n FPTEST1            (ilogb)\n BUILTIN_FPTEST0    (inf)\n-FPTEST2ARG         (ldexp, int)\n+FPTEST1            (j0)\n+FPTEST1            (j1)\n+FPTEST2ARG1        (jn, int)\n+FPTEST2ARG2        (ldexp, int)\n+FPTEST1            (lgamma)\n FPTEST1            (llrint)\n FPTEST1            (llround)\n FPTEST1            (log)\n@@ -218,14 +256,19 @@ FPTEST2            (remainder)\n FPTEST1            (rint)\n FPTEST1            (round)\n FPTEST2            (scalb)\n-FPTEST2ARG         (scalbln, int)\n-FPTEST2ARG         (scalbn, int)\n+FPTEST2ARG2        (scalbln, int)\n+FPTEST2ARG2        (scalbn, int)\n+FPTEST1            (significand)\n FPTEST1            (sin)\n FPTEST1            (sinh)\n FPTEST1            (sqrt)\n FPTEST1            (tan)\n FPTEST1            (tanh)\n+FPTEST1            (tgamma)\n FPTEST1            (trunc)\n+FPTEST1            (y0)\n+FPTEST1            (y1)\n+FPTEST2ARG1        (yn, int)\n \n /* Various other const builtins.  */\n TEST1         (abs, int)"}]}