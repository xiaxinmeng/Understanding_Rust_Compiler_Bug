{"sha": "b3908fcc0def5f1d0318bd826d889e557ed4dee0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM5MDhmY2MwZGVmNWYxZDAzMThiZDgyNmQ4ODllNTU3ZWQ0ZGVlMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2011-12-15T10:02:45Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2011-12-15T10:02:45Z"}, "message": "re PR libstdc++/51365 (cannot use final empty class in std::tuple)\n\nc-family:\n\tPR libstdc++/51365\n\t* c-common.c (RID_IS_FINAL): Add.\n\t* c-common.h (RID_IS_FINAL): Add.\ncp:\n\tPR libstdc++/51365\n\t* cp-tree.h (CPTK_IS_FINAL): Add.\n\t* parser.c (cp_parser_translation_unit): Handle RID_IS_FINAL.\n\t(cp_parser_primary_expression, cp_parser_trait_expr): Likewise.\n\t* semantics.c (trait_expr_value, finish_trait_expr): Handle\n\tCPTK_IS_FINAL.\n\t* cxx-pretty-print.c (pp_cxx_trait_expression): Likewise.\ntestsuite:\n\tPR libstdc++/51365\n\t* g++.dg/ext/is_final.C: New.\n\nFrom-SVN: r182360", "tree": {"sha": "b5ec06214bfe64f832b32feca5392a5e7503ad08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5ec06214bfe64f832b32feca5392a5e7503ad08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3908fcc0def5f1d0318bd826d889e557ed4dee0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3908fcc0def5f1d0318bd826d889e557ed4dee0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3908fcc0def5f1d0318bd826d889e557ed4dee0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3908fcc0def5f1d0318bd826d889e557ed4dee0/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d36971dd86653e81a8dba44f34f777c538b45631", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d36971dd86653e81a8dba44f34f777c538b45631", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d36971dd86653e81a8dba44f34f777c538b45631"}], "stats": {"total": 94, "additions": 88, "deletions": 6}, "files": [{"sha": "78854e2f81b2e491e5b330c2839828defebca593", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3908fcc0def5f1d0318bd826d889e557ed4dee0/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3908fcc0def5f1d0318bd826d889e557ed4dee0/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b3908fcc0def5f1d0318bd826d889e557ed4dee0", "patch": "@@ -1,3 +1,9 @@\n+2011-12-15  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/51365\n+\t* c-common.c (RID_IS_FINAL): Add.\n+\t* c-common.h (RID_IS_FINAL): Add.\n+\n 2011-11-30  Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* c.opt (fgnu-runtime): Provide full description."}, {"sha": "3e50dcf924f8838bfb92bee2ca7a1c93c6edfa2c", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3908fcc0def5f1d0318bd826d889e557ed4dee0/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3908fcc0def5f1d0318bd826d889e557ed4dee0/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=b3908fcc0def5f1d0318bd826d889e557ed4dee0", "patch": "@@ -462,6 +462,7 @@ const struct c_common_resword c_common_reswords[] =\n   { \"__is_convertible_to\", RID_IS_CONVERTIBLE_TO, D_CXXONLY },\n   { \"__is_empty\",\tRID_IS_EMPTY,\tD_CXXONLY },\n   { \"__is_enum\",\tRID_IS_ENUM,\tD_CXXONLY },\n+  { \"__is_final\",\tRID_IS_FINAL,\tD_CXXONLY },\n   { \"__is_literal_type\", RID_IS_LITERAL_TYPE, D_CXXONLY },\n   { \"__is_pod\",\t\tRID_IS_POD,\tD_CXXONLY },\n   { \"__is_polymorphic\",\tRID_IS_POLYMORPHIC, D_CXXONLY },"}, {"sha": "103c5816ac4489b76dc939fd873fe3dab50462fa", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3908fcc0def5f1d0318bd826d889e557ed4dee0/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3908fcc0def5f1d0318bd826d889e557ed4dee0/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=b3908fcc0def5f1d0318bd826d889e557ed4dee0", "patch": "@@ -134,20 +134,20 @@ enum rid\n   RID_CONSTCAST, RID_DYNCAST, RID_REINTCAST, RID_STATCAST,\n \n   /* C++ extensions */\n-  RID_BASES,                  RID_DIRECT_BASES,\n+  RID_BASES,                   RID_DIRECT_BASES,\n   RID_HAS_NOTHROW_ASSIGN,      RID_HAS_NOTHROW_CONSTRUCTOR,\n   RID_HAS_NOTHROW_COPY,        RID_HAS_TRIVIAL_ASSIGN,\n   RID_HAS_TRIVIAL_CONSTRUCTOR, RID_HAS_TRIVIAL_COPY,\n   RID_HAS_TRIVIAL_DESTRUCTOR,  RID_HAS_VIRTUAL_DESTRUCTOR,\n   RID_IS_ABSTRACT,             RID_IS_BASE_OF,\n   RID_IS_CLASS,                RID_IS_CONVERTIBLE_TO,\n   RID_IS_EMPTY,                RID_IS_ENUM,\n-  RID_IS_LITERAL_TYPE,         RID_IS_POD,\n-  RID_IS_POLYMORPHIC,          RID_IS_STD_LAYOUT,\n-  RID_IS_TRIVIAL,              RID_IS_UNION,\n-  RID_UNDERLYING_TYPE,\n+  RID_IS_FINAL,                RID_IS_LITERAL_TYPE,\n+  RID_IS_POD,                  RID_IS_POLYMORPHIC,\n+  RID_IS_STD_LAYOUT,           RID_IS_TRIVIAL,\n+  RID_IS_UNION,                RID_UNDERLYING_TYPE,\n \n-  /* C++0x */\n+  /* C++11 */\n   RID_CONSTEXPR, RID_DECLTYPE, RID_NOEXCEPT, RID_NULLPTR, RID_STATIC_ASSERT,\n \n   /* Objective-C (\"AT\" reserved words - they are only keywords when"}, {"sha": "7e99f58f037176453f7737e060533ffdf8618cff", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3908fcc0def5f1d0318bd826d889e557ed4dee0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3908fcc0def5f1d0318bd826d889e557ed4dee0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b3908fcc0def5f1d0318bd826d889e557ed4dee0", "patch": "@@ -1,3 +1,13 @@\n+2011-12-15  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/51365\n+\t* cp-tree.h (CPTK_IS_FINAL): Add.\n+\t* parser.c (cp_parser_translation_unit): Handle RID_IS_FINAL.\n+\t(cp_parser_primary_expression, cp_parser_trait_expr): Likewise.\n+\t* semantics.c (trait_expr_value, finish_trait_expr): Handle\n+\tCPTK_IS_FINAL.\n+\t* cxx-pretty-print.c (pp_cxx_trait_expression): Likewise.\n+\n 2011-12-14  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/51554"}, {"sha": "42a9ced641a6901269c9264ad317a42acdab38e9", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3908fcc0def5f1d0318bd826d889e557ed4dee0/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3908fcc0def5f1d0318bd826d889e557ed4dee0/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b3908fcc0def5f1d0318bd826d889e557ed4dee0", "patch": "@@ -587,6 +587,7 @@ typedef enum cp_trait_kind\n   CPTK_IS_CONVERTIBLE_TO,\n   CPTK_IS_EMPTY,\n   CPTK_IS_ENUM,\n+  CPTK_IS_FINAL,\n   CPTK_IS_LITERAL_TYPE,\n   CPTK_IS_POD,\n   CPTK_IS_POLYMORPHIC,"}, {"sha": "3d10afb837c92e909f636497ee6a3e7367fbc775", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3908fcc0def5f1d0318bd826d889e557ed4dee0/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3908fcc0def5f1d0318bd826d889e557ed4dee0/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=b3908fcc0def5f1d0318bd826d889e557ed4dee0", "patch": "@@ -2380,6 +2380,9 @@ pp_cxx_trait_expression (cxx_pretty_printer *pp, tree t)\n     case CPTK_IS_ENUM:\n       pp_cxx_ws_string (pp, \"__is_enum\");\n       break;\n+    case CPTK_IS_FINAL:\n+      pp_cxx_ws_string (pp, \"__is_final\");\n+      break;\n     case CPTK_IS_POD:\n       pp_cxx_ws_string (pp, \"__is_pod\");\n       break;"}, {"sha": "9301e53140748d63ec087c50a0eb9ab4c15cb11a", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3908fcc0def5f1d0318bd826d889e557ed4dee0/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3908fcc0def5f1d0318bd826d889e557ed4dee0/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=b3908fcc0def5f1d0318bd826d889e557ed4dee0", "patch": "@@ -3854,6 +3854,7 @@ cp_parser_translation_unit (cp_parser* parser)\n      __is_convertible_to ( type-id , type-id )     \n      __is_empty ( type-id )\n      __is_enum ( type-id )\n+     __is_final ( type-id )\n      __is_literal_type ( type-id )\n      __is_pod ( type-id )\n      __is_polymorphic ( type-id )\n@@ -4199,6 +4200,7 @@ cp_parser_primary_expression (cp_parser *parser,\n \tcase RID_IS_CONVERTIBLE_TO:\n \tcase RID_IS_EMPTY:\n \tcase RID_IS_ENUM:\n+\tcase RID_IS_FINAL:\n \tcase RID_IS_LITERAL_TYPE:\n \tcase RID_IS_POD:\n \tcase RID_IS_POLYMORPHIC:\n@@ -7868,6 +7870,9 @@ cp_parser_trait_expr (cp_parser* parser, enum rid keyword)\n     case RID_IS_ENUM:\n       kind = CPTK_IS_ENUM;\n       break;\n+    case RID_IS_FINAL:\n+      kind = CPTK_IS_FINAL;\n+      break;\n     case RID_IS_LITERAL_TYPE:\n       kind = CPTK_IS_LITERAL_TYPE;\n       break;"}, {"sha": "2f2a26a0d52acf24295ff3cf8a21c66735aa102d", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3908fcc0def5f1d0318bd826d889e557ed4dee0/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3908fcc0def5f1d0318bd826d889e557ed4dee0/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=b3908fcc0def5f1d0318bd826d889e557ed4dee0", "patch": "@@ -5434,6 +5434,9 @@ trait_expr_value (cp_trait_kind kind, tree type1, tree type2)\n     case CPTK_IS_ENUM:\n       return (type_code1 == ENUMERAL_TYPE);\n \n+    case CPTK_IS_FINAL:\n+      return (CLASS_TYPE_P (type1) && CLASSTYPE_FINAL (type1));\n+\n     case CPTK_IS_LITERAL_TYPE:\n       return (literal_type_p (type1));\n \n@@ -5493,6 +5496,7 @@ finish_trait_expr (cp_trait_kind kind, tree type1, tree type2)\n \t      || kind == CPTK_IS_CONVERTIBLE_TO\n \t      || kind == CPTK_IS_EMPTY\n \t      || kind == CPTK_IS_ENUM\n+\t      || kind == CPTK_IS_FINAL\n \t      || kind == CPTK_IS_LITERAL_TYPE\n \t      || kind == CPTK_IS_POD\n \t      || kind == CPTK_IS_POLYMORPHIC\n@@ -5533,6 +5537,7 @@ finish_trait_expr (cp_trait_kind kind, tree type1, tree type2)\n     case CPTK_HAS_VIRTUAL_DESTRUCTOR:\n     case CPTK_IS_ABSTRACT:\n     case CPTK_IS_EMPTY:\n+    case CPTK_IS_FINAL:\n     case CPTK_IS_LITERAL_TYPE:\n     case CPTK_IS_POD:\n     case CPTK_IS_POLYMORPHIC:"}, {"sha": "71c3f67a2458a5ded6347bcfa6d662c573049565", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3908fcc0def5f1d0318bd826d889e557ed4dee0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3908fcc0def5f1d0318bd826d889e557ed4dee0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b3908fcc0def5f1d0318bd826d889e557ed4dee0", "patch": "@@ -1,3 +1,8 @@\n+2011-12-15  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/51365\n+\t* g++.dg/ext/is_final.C: New.\n+\n 2012-12-15  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/48508"}, {"sha": "7833f3a101b060ecca598d14468e16c9c3afc03c", "filename": "gcc/testsuite/g++.dg/ext/is_final.C", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3908fcc0def5f1d0318bd826d889e557ed4dee0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_final.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3908fcc0def5f1d0318bd826d889e557ed4dee0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_final.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_final.C?ref=b3908fcc0def5f1d0318bd826d889e557ed4dee0", "patch": "@@ -0,0 +1,46 @@\n+// PR c++/51365\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+struct A { };\n+static_assert( ! __is_final (A), \"A not final\" );\n+\n+struct Af final { };\n+static_assert( __is_final (Af), \"Af is final\" );\n+\n+class B { };\n+static_assert( ! __is_final (B), \"B not final\" );\n+\n+class Bf final { };\n+static_assert( __is_final (Bf), \"Bf is final\" );\n+\n+struct C : private A, private B { };\n+static_assert( ! __is_final (C), \"C not final\" );\n+\n+struct Cf final : private A, private B { };\n+static_assert( __is_final (Cf), \"Cf is final\" );\n+\n+struct D { virtual ~D() final { } };\n+static_assert( ! __is_final (D), \"D not final\" );\n+\n+struct Df final { virtual ~Df() final { } };\n+static_assert( __is_final (Df), \"Df is final\" );\n+\n+template<typename> struct E { };\n+static_assert( ! __is_final (E<int>), \"E<int> not final\" );\n+static_assert( ! __is_final (E<Af>),  \"E<Af> not final\" );\n+\n+template<typename> struct Ef final { };\n+static_assert( __is_final (Ef<int>), \"Ef<int> is final\" );\n+static_assert( __is_final (Ef<A>),   \"Ef<A> is final\" );\n+static_assert( __is_final (Ef<Af>),  \"Ef<Af> is final\" );\n+\n+template<typename> struct F { virtual ~F() final { }; };\n+static_assert( ! __is_final (F<int>), \"F<int> not final\" );\n+static_assert( ! __is_final (F<Af>),  \"F<Af> not final\" );\n+\n+template<typename> struct Ff final { virtual ~Ff() final { }; };\n+static_assert( __is_final (Ff<int>), \"Ff<int> is final\" );\n+static_assert( __is_final (Ff<A>),   \"Ff<A> is final\" );\n+static_assert( __is_final (Ff<Af>),  \"Ff<Af> is final\" );\n+"}]}