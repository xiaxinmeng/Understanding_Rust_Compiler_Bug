{"sha": "d59a576b8b5e12c3a56f0262912090e2921f5daa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU5YTU3NmI4YjVlMTJjM2E1NmYwMjYyOTEyMDkwZTI5MjFmNWRhYQ==", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2020-06-29T18:36:03Z"}, "committer": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2020-07-02T10:38:18Z"}, "message": "Redefine NULL to nullptr\n\nBootstrap with musl libc fails with numerous \"missing sentinel in\nfunction call\" errors.  This is because musl defines NULL as 0L for C++,\nbut gcc requires sentinel value to be a pointer or __null.\n\nJonathan Wakely says:\n\n    To be really safe during stage 1, GCC should not use NULL as a\n    pointer sentinel in C++ code anyway.\n\n    The bootstrap compiler could define it to 0 or 0u, neither of which\n    is guaranteed to be OK to pass as a varargs sentinel where a null\n    pointer is expected.  Any of (void*)0 or (void*)NULL or nullptr\n    would be safe.\n\nWhile it is possible to fix this by replacing NULL sentinels with\nnullptrs, such approach would generate backporting conflicts, therefore\nsimply redefine NULL to nullptr at the end of system.h, where it would\nnot confuse system headers.\n\ngcc/ChangeLog:\n\n2020-06-30  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\tPR bootstrap/95700\n\t* system.h (NULL): Redefine to nullptr.", "tree": {"sha": "d615a216d6a34f5d1ebc2deeef15e8d3e2714b70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d615a216d6a34f5d1ebc2deeef15e8d3e2714b70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d59a576b8b5e12c3a56f0262912090e2921f5daa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d59a576b8b5e12c3a56f0262912090e2921f5daa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d59a576b8b5e12c3a56f0262912090e2921f5daa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d59a576b8b5e12c3a56f0262912090e2921f5daa/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0e7c73c515c305863620a821ee85bc557bfbef5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e7c73c515c305863620a821ee85bc557bfbef5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0e7c73c515c305863620a821ee85bc557bfbef5"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "a241e1355c40120478a0403f153c6e59561bf28c", "filename": "gcc/system.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d59a576b8b5e12c3a56f0262912090e2921f5daa/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d59a576b8b5e12c3a56f0262912090e2921f5daa/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=d59a576b8b5e12c3a56f0262912090e2921f5daa", "patch": "@@ -1263,4 +1263,14 @@ void gcc_stablesort (void *, size_t, size_t,\n    of the number.  */\n #define PRsa(n) \"%\" #n PRIu64 \"%c\"\n \n+/* System headers may define NULL to be an integer (e.g. 0L), which cannot be\n+   used safely in certain contexts (e.g. as sentinels).  Redefine NULL to\n+   nullptr in order to make it safer.  Note that this might confuse system\n+   headers, however, by convention they must not be included after this point.\n+*/\n+#ifdef __cplusplus\n+#undef NULL\n+#define NULL nullptr\n+#endif\n+\n #endif /* ! GCC_SYSTEM_H */"}]}