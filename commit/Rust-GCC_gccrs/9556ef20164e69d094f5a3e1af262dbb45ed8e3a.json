{"sha": "9556ef20164e69d094f5a3e1af262dbb45ed8e3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU1NmVmMjAxNjRlNjlkMDk0ZjVhM2UxYWYyNjJkYmI0NWVkOGUzYQ==", "commit": {"author": {"name": "Prathamesh Kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2019-08-21T20:41:41Z"}, "committer": {"name": "Prathamesh Kulkarni", "email": "prathamesh3492@gcc.gnu.org", "date": "2019-08-21T20:41:41Z"}, "message": "re PR target/88839 ([SVE] Poor implementation of blend-like permutes)\n\n2019-08-22  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n\t    Richard Sandiford  <richard.sandiford@arm.com>\n\n\tPR target/88839\n\t* config/aarch64/aarch64.c (aarch64_evpc_sel): New function.\n\t(aarch64_expand_vec_perm_const_1): Call aarch64_evpc_sel.\n\ntestsuite/\n\t* gcc.target/aarch64/sve/sel_1.c: New test.\n\t* gcc.target/aarch64/sve/sel_2.c: Likewise.\n\t* gcc.target/aarch64/sve/sel_3.c: Likewise.\n\t* gcc.target/aarch64/sve/sel_4.c: Likewise.\n\t* gcc.target/aarch64/sve/sel_5.c: Likewise.\n\t* gcc.target/aarch64/sve/sel_6.c: Likewise.\n\nCo-Authored-By: Richard Sandiford <richard.sandiford@arm.com>\n\nFrom-SVN: r274810", "tree": {"sha": "685e02f687be4a31b0203722d3cf1553525b691a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/685e02f687be4a31b0203722d3cf1553525b691a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9556ef20164e69d094f5a3e1af262dbb45ed8e3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9556ef20164e69d094f5a3e1af262dbb45ed8e3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9556ef20164e69d094f5a3e1af262dbb45ed8e3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9556ef20164e69d094f5a3e1af262dbb45ed8e3a/comments", "author": null, "committer": null, "parents": [{"sha": "846f78d414101dbd33ff9c370d379bae73ae0efa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/846f78d414101dbd33ff9c370d379bae73ae0efa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/846f78d414101dbd33ff9c370d379bae73ae0efa"}], "stats": {"total": 324, "additions": 324, "deletions": 0}, "files": [{"sha": "8f08e399fd5b31695eb38372613c6f8d9d9436d0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9556ef20164e69d094f5a3e1af262dbb45ed8e3a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9556ef20164e69d094f5a3e1af262dbb45ed8e3a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9556ef20164e69d094f5a3e1af262dbb45ed8e3a", "patch": "@@ -1,3 +1,10 @@\n+2019-08-22  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\t    Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/88839\n+\t* config/aarch64/aarch64.c (aarch64_evpc_sel): New function.\n+\t(aarch64_expand_vec_perm_const_1): Call aarch64_evpc_sel.\n+\n 2019-08-21  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \tPR target/90724"}, {"sha": "01b138d9569c5fde0bfa6c3a0eba51a16f1b2b25", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9556ef20164e69d094f5a3e1af262dbb45ed8e3a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9556ef20164e69d094f5a3e1af262dbb45ed8e3a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=9556ef20164e69d094f5a3e1af262dbb45ed8e3a", "patch": "@@ -17975,6 +17975,50 @@ aarch64_evpc_sve_tbl (struct expand_vec_perm_d *d)\n   return true;\n }\n \n+/* Try to implement D using SVE SEL instruction.  */\n+\n+static bool\n+aarch64_evpc_sel (struct expand_vec_perm_d *d)\n+{\n+  machine_mode vmode = d->vmode;\n+  int unit_size = GET_MODE_UNIT_SIZE (vmode);\n+\n+  if (d->vec_flags != VEC_SVE_DATA\n+      || unit_size > 8)\n+    return false;\n+\n+  int n_patterns = d->perm.encoding ().npatterns ();\n+  poly_int64 vec_len = d->perm.length ();\n+\n+  for (int i = 0; i < n_patterns; ++i)\n+    if (!known_eq (d->perm[i], i)\n+\t&& !known_eq (d->perm[i], vec_len + i))\n+      return false;\n+\n+  for (int i = n_patterns; i < n_patterns * 2; i++)\n+    if (!d->perm.series_p (i, n_patterns, i, n_patterns)\n+\t&& !d->perm.series_p (i, n_patterns, vec_len + i, n_patterns))\n+      return false;\n+\n+  if (d->testing_p)\n+    return true;\n+\n+  machine_mode pred_mode = aarch64_sve_pred_mode (unit_size).require ();\n+\n+  rtx_vector_builder builder (pred_mode, n_patterns, 2);\n+  for (int i = 0; i < n_patterns * 2; i++)\n+    {\n+      rtx elem = known_eq (d->perm[i], i) ? CONST1_RTX (BImode)\n+\t\t\t\t\t  : CONST0_RTX (BImode);\n+      builder.quick_push (elem);\n+    }\n+\n+  rtx const_vec = builder.build ();\n+  rtx pred = force_reg (pred_mode, const_vec);\n+  emit_insn (gen_vcond_mask (vmode, vmode, d->target, d->op1, d->op0, pred));\n+  return true;\n+}\n+\n static bool\n aarch64_expand_vec_perm_const_1 (struct expand_vec_perm_d *d)\n {\n@@ -18007,6 +18051,8 @@ aarch64_expand_vec_perm_const_1 (struct expand_vec_perm_d *d)\n \treturn true;\n       else if (aarch64_evpc_trn (d))\n \treturn true;\n+      else if (aarch64_evpc_sel (d))\n+\treturn true;\n       if (d->vec_flags == VEC_SVE_DATA)\n \treturn aarch64_evpc_sve_tbl (d);\n       else if (d->vec_flags == VEC_ADVSIMD)"}, {"sha": "0d141dc8f47e393577efc46a9503fd973f910aa9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9556ef20164e69d094f5a3e1af262dbb45ed8e3a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9556ef20164e69d094f5a3e1af262dbb45ed8e3a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9556ef20164e69d094f5a3e1af262dbb45ed8e3a", "patch": "@@ -1,3 +1,14 @@\n+2019-08-22  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\t    Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/88839\n+\t* gcc.target/aarch64/sve/sel_1.c: New test.\n+\t* gcc.target/aarch64/sve/sel_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/sel_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/sel_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/sel_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/sel_6.c: Likewise.\n+\n 2019-08-21  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR c++/91505"}, {"sha": "e651e5b93b66bff15907969ea15d9ae37028ac0a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/sel_1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9556ef20164e69d094f5a3e1af262dbb45ed8e3a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsel_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9556ef20164e69d094f5a3e1af262dbb45ed8e3a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsel_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsel_1.c?ref=9556ef20164e69d094f5a3e1af262dbb45ed8e3a", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -msve-vector-bits=256 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+typedef int8_t vnx16qi __attribute__((vector_size (32)));\n+\n+/* Predicate vector: 1 0 1 0 ... */\n+\n+#define MASK_32\t\t{ 0, 33, 2, 35, 4, 37, 6, 39, 8, 41,\t\t\t\\\n+\t\t\t  10, 43, 12, 45, 14, 47, 16, 49, 18, 51, \t\t\\\n+\t\t\t  20, 53, 22, 55, 24, 57, 26, 59, 28, 61, 30, 63 }\n+\n+#define INDEX_32 vnx16qi\n+\n+#define PERMUTE(type, nunits)\t\t\t\t\t\t\\\n+type permute_##type (type x, type y)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  return __builtin_shuffle (x, y, (INDEX_##nunits) MASK_##nunits);\t\\\n+}\n+\n+PERMUTE(vnx16qi, 32)\n+\n+/* { dg-final { scan-assembler-not {\\ttbl\\t} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.b, p[0-9]+, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tptrue\\tp[0-9]+\\.h, vl16\\n} 1 } } */"}, {"sha": "05391474a925942e2907fb2ed0793a77e6b52661", "filename": "gcc/testsuite/gcc.target/aarch64/sve/sel_2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9556ef20164e69d094f5a3e1af262dbb45ed8e3a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsel_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9556ef20164e69d094f5a3e1af262dbb45ed8e3a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsel_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsel_2.c?ref=9556ef20164e69d094f5a3e1af262dbb45ed8e3a", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -msve-vector-bits=256 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+typedef int8_t vnx16qi __attribute__((vector_size (32)));\n+typedef int16_t vnx8hi __attribute__((vector_size (32)));\n+typedef int32_t vnx4si __attribute__((vector_size (32)));\n+\n+typedef _Float16 vnx8hf __attribute__((vector_size (32)));\n+typedef float vnx4sf __attribute__((vector_size (32)));\n+\n+/* Predicate vector: 1 0 0 0 ... */\n+\n+#define MASK_32\t\t{ 0, 33, 34, 35, 4, 37, 38, 39, 8, 41, 42, 43, 12,\t\t\\\n+\t\t\t  45, 46, 47, 16, 49, 50, 51, 20, 53, 54, 55, 24,\t\t\\\n+\t\t\t  57, 58, 59, 28, 61, 62, 63 } \n+\n+/* Predicate vector: 1 0 1 0 ... */\n+\n+#define MASK_16\t\t{0, 17, 2, 19, 4, 21, 6, 23, 8, 25, 10, 27, 12, 29, 14, 31}\n+\n+#define INDEX_32 vnx16qi\n+#define INDEX_16 vnx8hi\n+\n+#define PERMUTE(type, nunits)\t\t\t\t\t\t\\\n+type permute_##type (type x, type y)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  return __builtin_shuffle (x, y, (INDEX_##nunits) MASK_##nunits);\t\\\n+}\n+\n+PERMUTE(vnx16qi, 32)\n+PERMUTE(vnx8hi, 16)\n+PERMUTE(vnx8hf, 16)\n+\n+/* { dg-final { scan-assembler-not {\\ttbl\\t} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.b, p[0-9]+, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h, p[0-9]+, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tptrue\\tp[0-9]+\\.s, vl8\\n} 3 } } */"}, {"sha": "a87492d9df1885ff451af692a7f173604ed2c056", "filename": "gcc/testsuite/gcc.target/aarch64/sve/sel_3.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9556ef20164e69d094f5a3e1af262dbb45ed8e3a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsel_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9556ef20164e69d094f5a3e1af262dbb45ed8e3a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsel_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsel_3.c?ref=9556ef20164e69d094f5a3e1af262dbb45ed8e3a", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -msve-vector-bits=256 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+typedef int8_t vnx16qi __attribute__((vector_size (32)));\n+typedef int16_t vnx8hi __attribute__((vector_size (32)));\n+typedef int32_t vnx4si __attribute__((vector_size (32)));\n+typedef _Float16 vnx8hf __attribute__((vector_size (32)));\n+typedef float vnx4sf __attribute__((vector_size (32)));\n+\n+/* Predicate vector: 1 0 0 0 0 0 0 0 ... */\n+\n+#define MASK_32\t\t{ 0, 33, 34, 35, 36, 37, 38, 39,  \\\n+\t\t\t  8, 41, 42, 43, 44, 45, 46, 47,  \\\n+\t\t\t  16, 49, 50, 51, 52, 53, 54, 55, \\\n+\t\t\t  24, 57, 58, 59, 60, 61, 62, 63  }\n+\n+/* Predicate vector: 1 0 0 0 ... */\n+\n+#define MASK_16\t\t{ 0, 17, 18, 19, 4, 21, 22, 23, \\\n+\t\t\t  8, 25, 26, 27, 12, 29, 30, 31 } \n+\n+/* Predicate vector: 1 0 ... */\n+\n+#define MASK_8\t\t{ 0, 9, 2, 11, 4, 13, 6, 15 }\n+\n+#define INDEX_32 vnx16qi\n+#define INDEX_16 vnx8hi\n+#define INDEX_8 vnx4si\n+\n+#define PERMUTE(type, nunits)\t\t\t\t\t\t\\\n+type permute_##type (type x, type y)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  return __builtin_shuffle (x, y, (INDEX_##nunits) MASK_##nunits);\t\\\n+}\n+\n+PERMUTE(vnx16qi, 32)\n+PERMUTE(vnx8hi, 16)\n+PERMUTE(vnx4si, 8)\n+PERMUTE(vnx8hf, 16)\n+PERMUTE(vnx4sf, 8)\n+\n+/* { dg-final { scan-assembler-not {\\ttbl\\t} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.b, p[0-9]+, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h, p[0-9]+, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.s, p[0-9]+, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tptrue\\tp[0-9]+\\.d, vl4\\n} 5 } } */"}, {"sha": "e9bbc5527d3444c0e2c6c10bc586bf01045e54b2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/sel_4.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9556ef20164e69d094f5a3e1af262dbb45ed8e3a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsel_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9556ef20164e69d094f5a3e1af262dbb45ed8e3a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsel_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsel_4.c?ref=9556ef20164e69d094f5a3e1af262dbb45ed8e3a", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -msve-vector-bits=256 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+typedef int8_t vnx16qi __attribute__((vector_size (32)));\n+typedef int16_t vnx8hi __attribute__((vector_size (32)));\n+typedef int32_t vnx4si __attribute__((vector_size (32)));\n+typedef int64_t vnx2di __attribute__((vector_size (32)));\n+\n+typedef _Float16 vnx8hf __attribute__((vector_size (32)));\n+typedef float vnx4sf __attribute__((vector_size (32)));\n+typedef double vnx2df __attribute__((vector_size (32)));\n+\n+/* Predicate vector: 1 1 0 0 ... */\n+\n+#define MASK_32\t\t{ 0, 1, 34, 35, 4, 5, 38, 39, 8, 9, 42, 43, 12, 13,\t\\\n+\t\t\t  46, 47, 16, 17, 50, 51, 20, 21, 54, 55, 24, 25,\t\\\n+\t\t\t  58, 59, 28, 29, 62, 63 } \n+\n+#define MASK_16\t\t{0, 1, 18, 19, 4, 5, 22, 23, 8, 9, 26, 27, 12, 13, 30, 31} \n+#define MASK_8\t\t{0, 1, 10, 11, 4, 5, 14, 15} \n+#define MASK_4\t\t{0, 1, 6, 7}\n+\n+#define INDEX_32 vnx16qi\n+#define INDEX_16 vnx8hi\n+#define INDEX_8 vnx4si\n+#define INDEX_4 vnx2di\n+\n+#define PERMUTE(type, nunits)\t\t\t\t\t\t\\\n+type permute_##type (type x, type y)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  return __builtin_shuffle (x, y, (INDEX_##nunits) MASK_##nunits);\t\\\n+}\n+\n+PERMUTE(vnx16qi, 32)\n+PERMUTE(vnx8hi, 16)\n+PERMUTE(vnx4si, 8)\n+PERMUTE(vnx2di, 4)\n+\n+PERMUTE(vnx8hf, 16)\n+PERMUTE(vnx4sf, 8)\n+PERMUTE(vnx2df, 4)\n+\n+/* { dg-final { scan-assembler-not {\\ttbl\\t} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.b, p[0-9]+, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h, p[0-9]+, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.s, p[0-9]+, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.d, p[0-9]+, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */"}, {"sha": "935abb54dd180cf6e7d1a607fb35e5eedc616676", "filename": "gcc/testsuite/gcc.target/aarch64/sve/sel_5.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9556ef20164e69d094f5a3e1af262dbb45ed8e3a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsel_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9556ef20164e69d094f5a3e1af262dbb45ed8e3a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsel_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsel_5.c?ref=9556ef20164e69d094f5a3e1af262dbb45ed8e3a", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -msve-vector-bits=256 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+typedef int8_t vnx16qi __attribute__((vector_size (32)));\n+typedef int16_t vnx8hi __attribute__((vector_size (32)));\n+typedef int32_t vnx4si __attribute__((vector_size (32)));\n+typedef int64_t vnx2di __attribute__((vector_size (32)));\n+\n+typedef _Float16 vnx8hf __attribute__((vector_size (32)));\n+typedef float vnx4sf __attribute__((vector_size (32)));\n+typedef double vnx2df __attribute__((vector_size (32)));\n+\n+/* Predicate vector: 1 0 0 1 ... */\n+\n+#define MASK_32\t\t{ 0, 33, 34, 3, 4, 37, 38, 7, 8, 41, 42, 11, 12, 45, 46,\t\\\n+\t\t\t  15, 16, 49, 50, 19, 20, 53, 54, 23, 24, 57, 58, 27, 28,\t\\\n+\t\t\t  61, 62, 31 } \n+\n+#define MASK_16\t\t{0, 17, 18, 3, 4, 21, 22, 7, 8, 25, 26, 11, 12, 29, 30, 15}\n+#define MASK_8\t\t{0, 9, 10, 3, 4, 13, 14, 7} \n+#define MASK_4\t\t{0, 5, 6, 3}\n+\n+#define INDEX_32 vnx16qi\n+#define INDEX_16 vnx8hi\n+#define INDEX_8 vnx4si\n+#define INDEX_4 vnx2di\n+\n+#define PERMUTE(type, nunits)\t\t\t\t\t\t\\\n+type permute_##type (type x, type y)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  return __builtin_shuffle (x, y, (INDEX_##nunits) MASK_##nunits);\t\\\n+}\n+\n+PERMUTE(vnx16qi, 32)\n+PERMUTE(vnx8hi, 16)\n+PERMUTE(vnx4si, 8)\n+PERMUTE(vnx2di, 4)\n+\n+PERMUTE(vnx8hf, 16)\n+PERMUTE(vnx4sf, 8)\n+PERMUTE(vnx2df, 4)\n+\n+/* { dg-final { scan-assembler-not {\\ttbl\\t} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.b, p[0-9]+, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h, p[0-9]+, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.s, p[0-9]+, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.d, p[0-9]+, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */"}, {"sha": "772938f68a7cd5b6828325f7d7a797de36ce2f9b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/sel_6.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9556ef20164e69d094f5a3e1af262dbb45ed8e3a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsel_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9556ef20164e69d094f5a3e1af262dbb45ed8e3a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsel_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsel_6.c?ref=9556ef20164e69d094f5a3e1af262dbb45ed8e3a", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -msve-vector-bits=256 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+typedef int32_t vnx4si __attribute__((vector_size (32)));\n+typedef int64_t vnx2di __attribute__((vector_size (32)));\n+\n+typedef float vnx4sf __attribute__((vector_size (32)));\n+typedef double vnx2df __attribute__((vector_size (32)));\n+\n+/* Predicate vector: 1 0 0 0 ... */\n+\n+#define MASK_32\t\t{ 0, 33, 34, 35, 4, 37, 38, 39, 8, 41, 42, 43, 12,\t\t\\\n+\t\t\t  45, 46, 47, 16, 49, 50, 51, 20, 53, 54, 55, 24,\t\t\\\n+\t\t\t  57, 58, 59, 28, 61, 62, 63 } \n+\n+#define MASK_16\t\t{0, 17, 18, 19, 4, 21, 22, 23, 8, 25, 26, 27, 12, 29, 30, 31} \n+#define MASK_8\t\t{0, 9, 10, 11, 4, 13, 14, 15}\n+#define MASK_4\t\t{0, 5, 6, 7}\n+\n+#define INDEX_8 vnx4si\n+#define INDEX_4 vnx2di\n+\n+#define PERMUTE(type, nunits)\t\t\t\t\t\t\\\n+type permute_##type (type x, type y)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  return __builtin_shuffle (x, y, (INDEX_##nunits) MASK_##nunits);\t\\\n+}\n+\n+PERMUTE(vnx4si, 8)\n+PERMUTE(vnx2di, 4)\n+\n+PERMUTE(vnx4sf, 8)\n+PERMUTE(vnx2df, 4)\n+\n+/* { dg-final { scan-assembler-not {\\ttbl\\t} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.s, p[0-9]+, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.d, p[0-9]+, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tptrue\\tp[0-9]+\\.d, vl4\\n} 2 } } */"}]}