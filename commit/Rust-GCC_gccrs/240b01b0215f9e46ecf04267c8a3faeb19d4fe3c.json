{"sha": "240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQwYjAxYjAyMTVmOWU0NmVjZjA0MjY3YzhhM2ZhZWIxOWQ0ZmUzYw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-03T17:06:27Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-04T11:54:28Z"}, "message": "libstdc++: Add [[nodiscard]] to iterators and related utilities\n\nThis adds [[nodiscard]] throughout <iterator>, as proposed by P2377R0\n(with some minor corrections).\n\nThe attribute is added for all modes from C++11 up, using\n[[__nodiscard__]] or _GLIBCXX_NODISCARD where C++17 [[nodiscard]] can't\nbe used directly.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/iterator_concepts.h (iter_move): Add\n\t[[nodiscard]].\n\t* include/bits/range_access.h (begin, end, cbegin, cend)\n\t(rbegin, rend, crbegin, crend, size, data, ssize): Likewise.\n\t* include/bits/ranges_base.h (ranges::begin, ranges::end)\n\t(ranges::cbegin, ranges::cend, ranges::rbegin, ranges::rend)\n\t(ranges::crbegin, ranges::crend, ranges::size, ranges::ssize)\n\t(ranges::empty, ranges::data, ranges::cdata): Likewise.\n\t* include/bits/stl_iterator.h (reverse_iterator, __normal_iterator)\n\t(back_insert_iterator, front_insert_iterator, insert_iterator)\n\t(move_iterator, move_sentinel, common_iterator)\n\t(counted_iterator): Likewise.\n\t* include/bits/stl_iterator_base_funcs.h (distance, next, prev):\n\tLikewise.\n\t* include/bits/stream_iterator.h (istream_iterator)\n\t(ostream_iterartor): Likewise.\n\t* include/bits/streambuf_iterator.h (istreambuf_iterator)\n\t(ostreambuf_iterator): Likewise.\n\t* include/std/ranges (views::single, views::iota, views::all)\n\t(views::filter, views::transform, views::take, views::take_while)\n\t(views::drop, views::drop_while, views::join, views::lazy_split)\n\t(views::split, views::counted, views::common, views::reverse)\n\t(views::elements): Likewise.\n\t* testsuite/20_util/rel_ops.cc: Use -Wno-unused-result.\n\t* testsuite/24_iterators/move_iterator/greedy_ops.cc: Likewise.\n\t* testsuite/24_iterators/normal_iterator/greedy_ops.cc:\n\tLikewise.\n\t* testsuite/24_iterators/reverse_iterator/2.cc: Likewise.\n\t* testsuite/24_iterators/reverse_iterator/greedy_ops.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/range_access/char/1.cc:\n\tCast result to void.\n\t* testsuite/21_strings/basic_string/range_access/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/range_access/char/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/range_access/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/23_containers/array/range_access.cc: Likewise.\n\t* testsuite/23_containers/deque/range_access.cc: Likewise.\n\t* testsuite/23_containers/forward_list/range_access.cc:\n\tLikewise.\n\t* testsuite/23_containers/list/range_access.cc: Likewise.\n\t* testsuite/23_containers/map/range_access.cc: Likewise.\n\t* testsuite/23_containers/multimap/range_access.cc: Likewise.\n\t* testsuite/23_containers/multiset/range_access.cc: Likewise.\n\t* testsuite/23_containers/set/range_access.cc: Likewise.\n\t* testsuite/23_containers/unordered_map/range_access.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_multimap/range_access.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_multiset/range_access.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_set/range_access.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/range_access.cc: Likewise.\n\t* testsuite/24_iterators/customization_points/iter_move.cc:\n\tLikewise.\n\t* testsuite/24_iterators/istream_iterator/sentinel.cc:\n\tLikewise.\n\t* testsuite/24_iterators/istreambuf_iterator/sentinel.cc:\n\tLikewise.\n\t* testsuite/24_iterators/move_iterator/dr2061.cc: Likewise.\n\t* testsuite/24_iterators/operations/prev_neg.cc: Likewise.\n\t* testsuite/24_iterators/ostreambuf_iterator/2.cc: Likewise.\n\t* testsuite/24_iterators/range_access/range_access.cc:\n\tLikewise.\n\t* testsuite/24_iterators/range_operations/100768.cc: Likewise.\n\t* testsuite/26_numerics/valarray/range_access2.cc: Likewise.\n\t* testsuite/28_regex/range_access.cc: Likewise.\n\t* testsuite/experimental/string_view/range_access/char/1.cc:\n\tLikewise.\n\t* testsuite/experimental/string_view/range_access/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/ext/vstring/range_access.cc: Likewise.\n\t* testsuite/std/ranges/adaptors/take.cc: Likewise.\n\t* testsuite/std/ranges/p2259.cc: Likewise.", "tree": {"sha": "b0edf23a15175b9aa5d9e8ddfb30a191d26a8c1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0edf23a15175b9aa5d9e8ddfb30a191d26a8c1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2724d1bba6b36451404811fba3244f8897717ef3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2724d1bba6b36451404811fba3244f8897717ef3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2724d1bba6b36451404811fba3244f8897717ef3"}], "stats": {"total": 385, "additions": 285, "deletions": 100}, "files": [{"sha": "739017aaaadb841b88e48d2fcc9377a8a935c309", "filename": "libstdc++-v3/include/bits/iterator_concepts.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -120,6 +120,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  using __type = typename __result<_Tp>::type;\n \n \ttemplate<std::__detail::__dereferenceable _Tp>\n+\t  [[nodiscard]]\n \t  constexpr __type<_Tp>\n \t  operator()(_Tp&& __e) const\n \t  noexcept(_S_noexcept<_Tp>())"}, {"sha": "ab2d4f8652c329544de8bad784a572f3b35dd4de", "filename": "libstdc++-v3/include/bits/range_access.h", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -47,6 +47,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n+    [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR auto\n     begin(_Container& __cont) -> decltype(__cont.begin())\n     { return __cont.begin(); }\n@@ -57,6 +58,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n+    [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR auto\n     begin(const _Container& __cont) -> decltype(__cont.begin())\n     { return __cont.begin(); }\n@@ -67,6 +69,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n+    [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR auto\n     end(_Container& __cont) -> decltype(__cont.end())\n     { return __cont.end(); }\n@@ -77,6 +80,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n+    [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR auto\n     end(const _Container& __cont) -> decltype(__cont.end())\n     { return __cont.end(); }\n@@ -86,6 +90,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __arr  Array.\n    */\n   template<typename _Tp, size_t _Nm>\n+    [[__nodiscard__]]\n     inline _GLIBCXX14_CONSTEXPR _Tp*\n     begin(_Tp (&__arr)[_Nm]) noexcept\n     { return __arr; }\n@@ -96,6 +101,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __arr  Array.\n    */\n   template<typename _Tp, size_t _Nm>\n+    [[__nodiscard__]]\n     inline _GLIBCXX14_CONSTEXPR _Tp*\n     end(_Tp (&__arr)[_Nm]) noexcept\n     { return __arr + _Nm; }\n@@ -115,6 +121,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n+    [[__nodiscard__]]\n     inline constexpr auto\n     cbegin(const _Container& __cont) noexcept(noexcept(std::begin(__cont)))\n       -> decltype(std::begin(__cont))\n@@ -126,6 +133,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n+    [[__nodiscard__]]\n     inline constexpr auto\n     cend(const _Container& __cont) noexcept(noexcept(std::end(__cont)))\n       -> decltype(std::end(__cont))\n@@ -137,6 +145,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n+    [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR auto\n     rbegin(_Container& __cont) -> decltype(__cont.rbegin())\n     { return __cont.rbegin(); }\n@@ -147,6 +156,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n+    [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR auto\n     rbegin(const _Container& __cont) -> decltype(__cont.rbegin())\n     { return __cont.rbegin(); }\n@@ -157,6 +167,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n+    [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR auto\n     rend(_Container& __cont) -> decltype(__cont.rend())\n     { return __cont.rend(); }\n@@ -167,6 +178,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n+    [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR auto\n     rend(const _Container& __cont) -> decltype(__cont.rend())\n     { return __cont.rend(); }\n@@ -177,6 +189,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __arr  Array.\n    */\n   template<typename _Tp, size_t _Nm>\n+    [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Tp*>\n     rbegin(_Tp (&__arr)[_Nm]) noexcept\n     { return reverse_iterator<_Tp*>(__arr + _Nm); }\n@@ -187,6 +200,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __arr  Array.\n    */\n   template<typename _Tp, size_t _Nm>\n+    [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Tp*>\n     rend(_Tp (&__arr)[_Nm]) noexcept\n     { return reverse_iterator<_Tp*>(__arr); }\n@@ -197,6 +211,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __il  initializer_list.\n    */\n   template<typename _Tp>\n+    [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR reverse_iterator<const _Tp*>\n     rbegin(initializer_list<_Tp> __il) noexcept\n     { return reverse_iterator<const _Tp*>(__il.end()); }\n@@ -207,6 +222,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __il  initializer_list.\n    */\n   template<typename _Tp>\n+    [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR reverse_iterator<const _Tp*>\n     rend(initializer_list<_Tp> __il) noexcept\n     { return reverse_iterator<const _Tp*>(__il.begin()); }\n@@ -217,6 +233,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n+    [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR auto\n     crbegin(const _Container& __cont) -> decltype(std::rbegin(__cont))\n     { return std::rbegin(__cont); }\n@@ -227,6 +244,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n+    [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR auto\n     crend(const _Container& __cont) -> decltype(std::rend(__cont))\n     { return std::rend(__cont); }\n@@ -241,6 +259,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template <typename _Container>\n+    [[nodiscard]]\n     constexpr auto\n     size(const _Container& __cont) noexcept(noexcept(__cont.size()))\n     -> decltype(__cont.size())\n@@ -250,6 +269,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @brief  Return the size of an array.\n    */\n   template <typename _Tp, size_t _Nm>\n+    [[nodiscard]]\n     constexpr size_t\n     size(const _Tp (&)[_Nm]) noexcept\n     { return _Nm; }\n@@ -286,6 +306,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template <typename _Container>\n+    [[nodiscard]]\n     constexpr auto\n     data(_Container& __cont) noexcept(noexcept(__cont.data()))\n     -> decltype(__cont.data())\n@@ -296,6 +317,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template <typename _Container>\n+    [[nodiscard]]\n     constexpr auto\n     data(const _Container& __cont) noexcept(noexcept(__cont.data()))\n     -> decltype(__cont.data())\n@@ -306,6 +328,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __array  Array.\n    */\n   template <typename _Tp, size_t _Nm>\n+    [[nodiscard]]\n     constexpr _Tp*\n     data(_Tp (&__array)[_Nm]) noexcept\n     { return __array; }\n@@ -315,13 +338,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __il  Initializer list.\n    */\n   template <typename _Tp>\n+    [[nodiscard]]\n     constexpr const _Tp*\n     data(initializer_list<_Tp> __il) noexcept\n     { return __il.begin(); }\n \n #if __cplusplus > 201703L\n #define __cpp_lib_ssize 201902L\n   template<typename _Container>\n+    [[nodiscard]]\n     constexpr auto\n     ssize(const _Container& __cont)\n     noexcept(noexcept(__cont.size()))\n@@ -332,6 +357,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Tp, ptrdiff_t _Num>\n+    [[nodiscard]]\n     constexpr ptrdiff_t\n     ssize(const _Tp (&)[_Num]) noexcept\n     { return _Num; }"}, {"sha": "614b6edf9df6dbcace76ef9457865bdba23fb397", "filename": "libstdc++-v3/include/bits/ranges_base.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -110,6 +110,7 @@ namespace ranges\n       template<__maybe_borrowed_range _Tp>\n \trequires is_array_v<remove_reference_t<_Tp>> || __member_begin<_Tp>\n \t  || __adl_begin<_Tp>\n+\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())\n \t{\n@@ -161,6 +162,7 @@ namespace ranges\n       template<__maybe_borrowed_range _Tp>\n \trequires is_bounded_array_v<remove_reference_t<_Tp>>\n \t  || __member_end<_Tp> || __adl_end<_Tp>\n+\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())\n \t{\n@@ -192,6 +194,7 @@ namespace ranges\n     struct _CBegin\n     {\n       template<typename _Tp>\n+\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Tp&& __e) const\n \tnoexcept(noexcept(_Begin{}(__cust_access::__as_const<_Tp>(__e))))\n@@ -204,6 +207,7 @@ namespace ranges\n     struct _CEnd final\n     {\n       template<typename _Tp>\n+\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Tp&& __e) const\n \tnoexcept(noexcept(_End{}(__cust_access::__as_const<_Tp>(__e))))\n@@ -263,6 +267,7 @@ namespace ranges\n     public:\n       template<__maybe_borrowed_range _Tp>\n \trequires __member_rbegin<_Tp> || __adl_rbegin<_Tp> || __reversable<_Tp>\n+\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Tp&& __t) const\n \tnoexcept(_S_noexcept<_Tp&>())\n@@ -321,6 +326,7 @@ namespace ranges\n     public:\n       template<__maybe_borrowed_range _Tp>\n \trequires __member_rend<_Tp> || __adl_rend<_Tp> || __reversable<_Tp>\n+\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Tp&& __t) const\n \tnoexcept(_S_noexcept<_Tp&>())\n@@ -337,6 +343,7 @@ namespace ranges\n     struct _CRBegin\n     {\n       template<typename _Tp>\n+\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Tp&& __e) const\n \tnoexcept(noexcept(_RBegin{}(__cust_access::__as_const<_Tp>(__e))))\n@@ -349,6 +356,7 @@ namespace ranges\n     struct _CREnd\n     {\n       template<typename _Tp>\n+\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Tp&& __e) const\n \tnoexcept(noexcept(_REnd{}(__cust_access::__as_const<_Tp>(__e))))\n@@ -408,6 +416,7 @@ namespace ranges\n       template<typename _Tp>\n \trequires is_bounded_array_v<remove_reference_t<_Tp>>\n \t  || __member_size<_Tp> || __adl_size<_Tp> || __sentinel_size<_Tp>\n+\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())\n \t{\n@@ -428,6 +437,7 @@ namespace ranges\n       // 3403. Domain of ranges::ssize(E) doesn't match ranges::size(E)\n       template<typename _Tp>\n \trequires requires (_Tp& __t) { _Size{}(__t); }\n+\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Tp&& __t) const noexcept(noexcept(_Size{}(__t)))\n \t{\n@@ -487,6 +497,7 @@ namespace ranges\n       template<typename _Tp>\n \trequires __member_empty<_Tp> || __size0_empty<_Tp>\n \t  || __eq_iter_empty<_Tp>\n+\t[[nodiscard]]\n \tconstexpr bool\n \toperator()(_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())\n \t{\n@@ -528,6 +539,7 @@ namespace ranges\n     public:\n       template<__maybe_borrowed_range _Tp>\n \trequires __member_data<_Tp> || __begin_data<_Tp>\n+\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Tp&& __t) const noexcept(_S_noexcept<_Tp>())\n \t{\n@@ -541,6 +553,7 @@ namespace ranges\n     struct _CData\n     {\n       template<typename _Tp>\n+\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Tp&& __e) const\n \tnoexcept(noexcept(_Data{}(__cust_access::__as_const<_Tp>(__e))))\n@@ -782,6 +795,7 @@ namespace ranges\n   struct __distance_fn final\n   {\n     template<input_or_output_iterator _It, sentinel_for<_It> _Sent>\n+      [[nodiscard]]\n       constexpr iter_difference_t<_It>\n       operator()(_It __first, _Sent __last) const\n       {\n@@ -800,6 +814,7 @@ namespace ranges\n       }\n \n     template<range _Range>\n+      [[nodiscard]]\n       constexpr range_difference_t<_Range>\n       operator()(_Range&& __r) const\n       {\n@@ -817,6 +832,7 @@ namespace ranges\n   struct __next_fn final\n   {\n     template<input_or_output_iterator _It>\n+      [[nodiscard]]\n       constexpr _It\n       operator()(_It __x) const\n       {\n@@ -825,6 +841,7 @@ namespace ranges\n       }\n \n     template<input_or_output_iterator _It>\n+      [[nodiscard]]\n       constexpr _It\n       operator()(_It __x, iter_difference_t<_It> __n) const\n       {\n@@ -833,6 +850,7 @@ namespace ranges\n       }\n \n     template<input_or_output_iterator _It, sentinel_for<_It> _Sent>\n+      [[nodiscard]]\n       constexpr _It\n       operator()(_It __x, _Sent __bound) const\n       {\n@@ -841,6 +859,7 @@ namespace ranges\n       }\n \n     template<input_or_output_iterator _It, sentinel_for<_It> _Sent>\n+      [[nodiscard]]\n       constexpr _It\n       operator()(_It __x, iter_difference_t<_It> __n, _Sent __bound) const\n       {\n@@ -856,6 +875,7 @@ namespace ranges\n   struct __prev_fn final\n   {\n     template<bidirectional_iterator _It>\n+      [[nodiscard]]\n       constexpr _It\n       operator()(_It __x) const\n       {\n@@ -864,6 +884,7 @@ namespace ranges\n       }\n \n     template<bidirectional_iterator _It>\n+      [[nodiscard]]\n       constexpr _It\n       operator()(_It __x, iter_difference_t<_It> __n) const\n       {\n@@ -872,6 +893,7 @@ namespace ranges\n       }\n \n     template<bidirectional_iterator _It>\n+      [[nodiscard]]\n       constexpr _It\n       operator()(_It __x, iter_difference_t<_It> __n, _It __bound) const\n       {"}, {"sha": "3773d600b8f22f1e3529e767947339f5974bc223", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 105, "deletions": 16, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -223,6 +223,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /**\n        *  @return  @c current, the %iterator used for underlying work.\n       */\n+      _GLIBCXX_NODISCARD\n       _GLIBCXX17_CONSTEXPR iterator_type\n       base() const\n       { return current; }\n@@ -237,6 +238,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *           @c *x remains valid after @c x has been modified or\n        *           destroyed. This is a bug: http://gcc.gnu.org/PR51823\n       */\n+      _GLIBCXX_NODISCARD\n       _GLIBCXX17_CONSTEXPR reference\n       operator*() const\n       {\n@@ -249,6 +251,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  This requires that @c --current is dereferenceable.\n       */\n+      _GLIBCXX_NODISCARD\n       _GLIBCXX17_CONSTEXPR pointer\n       operator->() const\n #if __cplusplus > 201703L && __cpp_concepts >= 201907L\n@@ -318,6 +321,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  The underlying iterator must be a Random Access Iterator.\n       */\n+      _GLIBCXX_NODISCARD\n       _GLIBCXX17_CONSTEXPR reverse_iterator\n       operator+(difference_type __n) const\n       { return reverse_iterator(current - __n); }\n@@ -340,6 +344,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  The underlying iterator must be a Random Access Iterator.\n       */\n+      _GLIBCXX_NODISCARD\n       _GLIBCXX17_CONSTEXPR reverse_iterator\n       operator-(difference_type __n) const\n       { return reverse_iterator(current + __n); }\n@@ -362,11 +367,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  The underlying iterator must be a Random Access Iterator.\n       */\n+      _GLIBCXX_NODISCARD\n       _GLIBCXX17_CONSTEXPR reference\n       operator[](difference_type __n) const\n       { return *(*this + __n); }\n \n #if __cplusplus > 201703L && __cpp_lib_concepts\n+      [[nodiscard]]\n       friend constexpr iter_rvalue_reference_t<_Iterator>\n       iter_move(const reverse_iterator& __i)\n       noexcept(is_nothrow_copy_constructible_v<_Iterator>\n@@ -415,36 +422,42 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   */\n #if __cplusplus <= 201703L || ! defined __cpp_lib_concepts\n   template<typename _Iterator>\n+    _GLIBCXX_NODISCARD\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator==(const reverse_iterator<_Iterator>& __x,\n \t       const reverse_iterator<_Iterator>& __y)\n     { return __x.base() == __y.base(); }\n \n   template<typename _Iterator>\n+    _GLIBCXX_NODISCARD\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator<(const reverse_iterator<_Iterator>& __x,\n \t      const reverse_iterator<_Iterator>& __y)\n     { return __y.base() < __x.base(); }\n \n   template<typename _Iterator>\n+    _GLIBCXX_NODISCARD\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator!=(const reverse_iterator<_Iterator>& __x,\n \t       const reverse_iterator<_Iterator>& __y)\n     { return !(__x == __y); }\n \n   template<typename _Iterator>\n+    _GLIBCXX_NODISCARD\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator>(const reverse_iterator<_Iterator>& __x,\n \t      const reverse_iterator<_Iterator>& __y)\n     { return __y < __x; }\n \n   template<typename _Iterator>\n+    _GLIBCXX_NODISCARD\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator<=(const reverse_iterator<_Iterator>& __x,\n \t       const reverse_iterator<_Iterator>& __y)\n     { return !(__y < __x); }\n \n   template<typename _Iterator>\n+    _GLIBCXX_NODISCARD\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator>=(const reverse_iterator<_Iterator>& __x,\n \t       const reverse_iterator<_Iterator>& __y)\n@@ -454,24 +467,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // DR 280. Comparison of reverse_iterator to const reverse_iterator.\n \n   template<typename _IteratorL, typename _IteratorR>\n+    _GLIBCXX_NODISCARD\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator==(const reverse_iterator<_IteratorL>& __x,\n \t       const reverse_iterator<_IteratorR>& __y)\n     { return __x.base() == __y.base(); }\n \n   template<typename _IteratorL, typename _IteratorR>\n+    _GLIBCXX_NODISCARD\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator<(const reverse_iterator<_IteratorL>& __x,\n \t      const reverse_iterator<_IteratorR>& __y)\n     { return __x.base() > __y.base(); }\n \n   template<typename _IteratorL, typename _IteratorR>\n+    _GLIBCXX_NODISCARD\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator!=(const reverse_iterator<_IteratorL>& __x,\n \t       const reverse_iterator<_IteratorR>& __y)\n     { return __x.base() != __y.base(); }\n \n   template<typename _IteratorL, typename _IteratorR>\n+    _GLIBCXX_NODISCARD\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator>(const reverse_iterator<_IteratorL>& __x,\n \t      const reverse_iterator<_IteratorR>& __y)\n@@ -484,47 +501,54 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return __x.base() >= __y.base(); }\n \n   template<typename _IteratorL, typename _IteratorR>\n+    _GLIBCXX_NODISCARD\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator>=(const reverse_iterator<_IteratorL>& __x,\n \t       const reverse_iterator<_IteratorR>& __y)\n     { return __x.base() <= __y.base(); }\n #else // C++20\n   template<typename _IteratorL, typename _IteratorR>\n+    [[nodiscard]]\n     constexpr bool\n     operator==(const reverse_iterator<_IteratorL>& __x,\n \t       const reverse_iterator<_IteratorR>& __y)\n     requires requires { { __x.base() == __y.base() } -> convertible_to<bool>; }\n     { return __x.base() == __y.base(); }\n \n   template<typename _IteratorL, typename _IteratorR>\n+    [[nodiscard]]\n     constexpr bool\n     operator!=(const reverse_iterator<_IteratorL>& __x,\n \t       const reverse_iterator<_IteratorR>& __y)\n     requires requires { { __x.base() != __y.base() } -> convertible_to<bool>; }\n     { return __x.base() != __y.base(); }\n \n   template<typename _IteratorL, typename _IteratorR>\n+    [[nodiscard]]\n     constexpr bool\n     operator<(const reverse_iterator<_IteratorL>& __x,\n \t      const reverse_iterator<_IteratorR>& __y)\n     requires requires { { __x.base() > __y.base() } -> convertible_to<bool>; }\n     { return __x.base() > __y.base(); }\n \n   template<typename _IteratorL, typename _IteratorR>\n+    [[nodiscard]]\n     constexpr bool\n     operator>(const reverse_iterator<_IteratorL>& __x,\n \t      const reverse_iterator<_IteratorR>& __y)\n     requires requires { { __x.base() < __y.base() } -> convertible_to<bool>; }\n     { return __x.base() < __y.base(); }\n \n   template<typename _IteratorL, typename _IteratorR>\n+    [[nodiscard]]\n     constexpr bool\n     operator<=(const reverse_iterator<_IteratorL>& __x,\n \t       const reverse_iterator<_IteratorR>& __y)\n     requires requires { { __x.base() >= __y.base() } -> convertible_to<bool>; }\n     { return __x.base() >= __y.base(); }\n \n   template<typename _IteratorL, typename _IteratorR>\n+    [[nodiscard]]\n     constexpr bool\n     operator>=(const reverse_iterator<_IteratorL>& __x,\n \t       const reverse_iterator<_IteratorR>& __y)\n@@ -533,6 +557,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _IteratorL,\n \t   three_way_comparable_with<_IteratorL> _IteratorR>\n+    [[nodiscard]]\n     constexpr compare_three_way_result_t<_IteratorL, _IteratorR>\n     operator<=>(const reverse_iterator<_IteratorL>& __x,\n \t\tconst reverse_iterator<_IteratorR>& __y)\n@@ -556,6 +581,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // DR 685. reverse_iterator/move_iterator difference has invalid signatures\n   template<typename _IteratorL, typename _IteratorR>\n+    [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR auto\n     operator-(const reverse_iterator<_IteratorL>& __x,\n \t      const reverse_iterator<_IteratorR>& __y)\n@@ -564,6 +590,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   template<typename _Iterator>\n+    _GLIBCXX_NODISCARD\n     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>\n     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n \t      const reverse_iterator<_Iterator>& __x)\n@@ -583,6 +610,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // DR 2285. make_reverse_iterator\n   /// Generator function for reverse_iterator.\n   template<typename _Iterator>\n+    [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>\n     make_reverse_iterator(_Iterator __i)\n     { return reverse_iterator<_Iterator>(__i); }\n@@ -683,7 +711,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n       /// Simply returns *this.\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       back_insert_iterator&\n       operator*()\n       { return *this; }\n@@ -713,7 +741,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  types for you.\n   */\n   template<typename _Container>\n-    _GLIBCXX20_CONSTEXPR\n+    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n     inline back_insert_iterator<_Container>\n     back_inserter(_Container& __x)\n     { return back_insert_iterator<_Container>(__x); }\n@@ -784,7 +812,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n       /// Simply returns *this.\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       front_insert_iterator&\n       operator*()\n       { return *this; }\n@@ -814,7 +842,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  types for you.\n   */\n   template<typename _Container>\n-    _GLIBCXX20_CONSTEXPR\n+    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n     inline front_insert_iterator<_Container>\n     front_inserter(_Container& __x)\n     { return front_insert_iterator<_Container>(__x); }\n@@ -914,7 +942,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n       /// Simply returns *this.\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       insert_iterator&\n       operator*()\n       { return *this; }\n@@ -946,11 +974,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   */\n #if __cplusplus > 201703L && defined __cpp_lib_concepts\n   template<typename _Container>\n+    [[nodiscard]]\n     constexpr insert_iterator<_Container>\n     inserter(_Container& __x, std::__detail::__range_iter_t<_Container> __i)\n     { return insert_iterator<_Container>(__x, __i); }\n #else\n   template<typename _Container>\n+    _GLIBCXX_NODISCARD\n     inline insert_iterator<_Container>\n     inserter(_Container& __x, typename _Container::iterator __i)\n     { return insert_iterator<_Container>(__x, __i); }\n@@ -1090,13 +1120,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _IteratorL, typename _IteratorR, typename _Container>\n     requires requires (_IteratorL __lhs, _IteratorR __rhs)\n     { { __lhs == __rhs } -> std::convertible_to<bool>; }\n+    [[nodiscard]]\n     constexpr bool\n     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,\n \t       const __normal_iterator<_IteratorR, _Container>& __rhs)\n     noexcept(noexcept(__lhs.base() == __rhs.base()))\n     { return __lhs.base() == __rhs.base(); }\n \n   template<typename _IteratorL, typename _IteratorR, typename _Container>\n+    [[nodiscard]]\n     constexpr std::__detail::__synth3way_t<_IteratorR, _IteratorL>\n     operator<=>(const __normal_iterator<_IteratorL, _Container>& __lhs,\n \t\tconst __normal_iterator<_IteratorR, _Container>& __rhs)\n@@ -1105,31 +1137,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #else\n    // Forward iterator requirements\n   template<typename _IteratorL, typename _IteratorR, typename _Container>\n-    _GLIBCXX20_CONSTEXPR\n+    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n     inline bool\n     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,\n \t       const __normal_iterator<_IteratorR, _Container>& __rhs)\n     _GLIBCXX_NOEXCEPT\n     { return __lhs.base() == __rhs.base(); }\n \n   template<typename _Iterator, typename _Container>\n-    _GLIBCXX20_CONSTEXPR\n+    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n     inline bool\n     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,\n \t       const __normal_iterator<_Iterator, _Container>& __rhs)\n     _GLIBCXX_NOEXCEPT\n     { return __lhs.base() == __rhs.base(); }\n \n   template<typename _IteratorL, typename _IteratorR, typename _Container>\n-    _GLIBCXX20_CONSTEXPR\n+    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n     inline bool\n     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n \t       const __normal_iterator<_IteratorR, _Container>& __rhs)\n     _GLIBCXX_NOEXCEPT\n     { return __lhs.base() != __rhs.base(); }\n \n   template<typename _Iterator, typename _Container>\n-    _GLIBCXX20_CONSTEXPR\n+    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n     inline bool\n     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,\n \t       const __normal_iterator<_Iterator, _Container>& __rhs)\n@@ -1138,59 +1170,63 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Random access iterator requirements\n   template<typename _IteratorL, typename _IteratorR, typename _Container>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,\n \t      const __normal_iterator<_IteratorR, _Container>& __rhs)\n     _GLIBCXX_NOEXCEPT\n     { return __lhs.base() < __rhs.base(); }\n \n   template<typename _Iterator, typename _Container>\n-    _GLIBCXX20_CONSTEXPR\n+    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n     inline bool\n     operator<(const __normal_iterator<_Iterator, _Container>& __lhs,\n \t      const __normal_iterator<_Iterator, _Container>& __rhs)\n     _GLIBCXX_NOEXCEPT\n     { return __lhs.base() < __rhs.base(); }\n \n   template<typename _IteratorL, typename _IteratorR, typename _Container>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,\n \t      const __normal_iterator<_IteratorR, _Container>& __rhs)\n     _GLIBCXX_NOEXCEPT\n     { return __lhs.base() > __rhs.base(); }\n \n   template<typename _Iterator, typename _Container>\n-    _GLIBCXX20_CONSTEXPR\n+    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n     inline bool\n     operator>(const __normal_iterator<_Iterator, _Container>& __lhs,\n \t      const __normal_iterator<_Iterator, _Container>& __rhs)\n     _GLIBCXX_NOEXCEPT\n     { return __lhs.base() > __rhs.base(); }\n \n   template<typename _IteratorL, typename _IteratorR, typename _Container>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n \t       const __normal_iterator<_IteratorR, _Container>& __rhs)\n     _GLIBCXX_NOEXCEPT\n     { return __lhs.base() <= __rhs.base(); }\n \n   template<typename _Iterator, typename _Container>\n-    _GLIBCXX20_CONSTEXPR\n+    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n     inline bool\n     operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,\n \t       const __normal_iterator<_Iterator, _Container>& __rhs)\n     _GLIBCXX_NOEXCEPT\n     { return __lhs.base() <= __rhs.base(); }\n \n   template<typename _IteratorL, typename _IteratorR, typename _Container>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n \t       const __normal_iterator<_IteratorR, _Container>& __rhs)\n     _GLIBCXX_NOEXCEPT\n     { return __lhs.base() >= __rhs.base(); }\n \n   template<typename _Iterator, typename _Container>\n-    _GLIBCXX20_CONSTEXPR\n+    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n     inline bool\n     operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,\n \t       const __normal_iterator<_Iterator, _Container>& __rhs)\n@@ -1205,7 +1241,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _IteratorL, typename _IteratorR, typename _Container>\n #if __cplusplus >= 201103L\n     // DR 685.\n-    _GLIBCXX20_CONSTEXPR\n+    [[__nodiscard__]] _GLIBCXX20_CONSTEXPR\n     inline auto\n     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,\n \t      const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept\n@@ -1218,15 +1254,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return __lhs.base() - __rhs.base(); }\n \n   template<typename _Iterator, typename _Container>\n-    _GLIBCXX20_CONSTEXPR\n+    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n     inline typename __normal_iterator<_Iterator, _Container>::difference_type\n     operator-(const __normal_iterator<_Iterator, _Container>& __lhs,\n \t      const __normal_iterator<_Iterator, _Container>& __rhs)\n     _GLIBCXX_NOEXCEPT\n     { return __lhs.base() - __rhs.base(); }\n \n   template<typename _Iterator, typename _Container>\n-    _GLIBCXX20_CONSTEXPR\n+    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n     inline __normal_iterator<_Iterator, _Container>\n     operator+(typename __normal_iterator<_Iterator, _Container>::difference_type\n \t      __n, const __normal_iterator<_Iterator, _Container>& __i)\n@@ -1284,6 +1320,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  return *this;\n \t}\n \n+      [[nodiscard]]\n       constexpr _Sent\n       base() const\n       noexcept(is_nothrow_copy_constructible_v<_Sent>)\n@@ -1397,19 +1434,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n #if __cplusplus <= 201703L\n+      [[__nodiscard__]]\n       _GLIBCXX17_CONSTEXPR iterator_type\n       base() const\n       { return _M_current; }\n #else\n+      [[nodiscard]]\n       constexpr const iterator_type&\n       base() const & noexcept\n       { return _M_current; }\n \n+      [[nodiscard]]\n       constexpr iterator_type\n       base() &&\n       { return std::move(_M_current); }\n #endif\n \n+      [[__nodiscard__]]\n       _GLIBCXX17_CONSTEXPR reference\n       operator*() const\n #if __cplusplus > 201703L && __cpp_lib_concepts\n@@ -1418,6 +1459,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return static_cast<reference>(*_M_current); }\n #endif\n \n+      [[__nodiscard__]]\n       _GLIBCXX17_CONSTEXPR pointer\n       operator->() const\n       { return _M_current; }\n@@ -1458,6 +1500,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __tmp;\n       }\n \n+      [[__nodiscard__]]\n       _GLIBCXX17_CONSTEXPR move_iterator\n       operator+(difference_type __n) const\n       { return move_iterator(_M_current + __n); }\n@@ -1469,6 +1512,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *this;\n       }\n \n+      [[__nodiscard__]]\n       _GLIBCXX17_CONSTEXPR move_iterator\n       operator-(difference_type __n) const\n       { return move_iterator(_M_current - __n); }\n@@ -1480,6 +1524,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *this;\n       }\n \n+      [[__nodiscard__]]\n       _GLIBCXX17_CONSTEXPR reference\n       operator[](difference_type __n) const\n #if __cplusplus > 201703L && __cpp_lib_concepts\n@@ -1490,20 +1535,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus > 201703L && __cpp_lib_concepts\n       template<sentinel_for<_Iterator> _Sent>\n+\t[[nodiscard]]\n \tfriend constexpr bool\n \toperator==(const move_iterator& __x, const move_sentinel<_Sent>& __y)\n \t{ return __x.base() == __y.base(); }\n \n       template<sized_sentinel_for<_Iterator> _Sent>\n+\t[[nodiscard]]\n \tfriend constexpr iter_difference_t<_Iterator>\n \toperator-(const move_sentinel<_Sent>& __x, const move_iterator& __y)\n \t{ return __x.base() - __y.base(); }\n \n       template<sized_sentinel_for<_Iterator> _Sent>\n+\t[[nodiscard]]\n \tfriend constexpr iter_difference_t<_Iterator>\n \toperator-(const move_iterator& __x, const move_sentinel<_Sent>& __y)\n \t{ return __x.base() - __y.base(); }\n \n+      [[nodiscard]]\n       friend constexpr iter_rvalue_reference_t<_Iterator>\n       iter_move(const move_iterator& __i)\n       noexcept(noexcept(ranges::iter_move(__i._M_current)))\n@@ -1518,6 +1567,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n   template<typename _IteratorL, typename _IteratorR>\n+    [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator==(const move_iterator<_IteratorL>& __x,\n \t       const move_iterator<_IteratorR>& __y)\n@@ -1529,19 +1579,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cpp_lib_three_way_comparison\n   template<typename _IteratorL,\n \t   three_way_comparable_with<_IteratorL> _IteratorR>\n+    [[__nodiscard__]]\n     constexpr compare_three_way_result_t<_IteratorL, _IteratorR>\n     operator<=>(const move_iterator<_IteratorL>& __x,\n \t\tconst move_iterator<_IteratorR>& __y)\n     { return __x.base() <=> __y.base(); }\n #else\n   template<typename _IteratorL, typename _IteratorR>\n+    [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator!=(const move_iterator<_IteratorL>& __x,\n \t       const move_iterator<_IteratorR>& __y)\n     { return !(__x == __y); }\n #endif\n \n   template<typename _IteratorL, typename _IteratorR>\n+    [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator<(const move_iterator<_IteratorL>& __x,\n \t      const move_iterator<_IteratorR>& __y)\n@@ -1551,6 +1604,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return __x.base() < __y.base(); }\n \n   template<typename _IteratorL, typename _IteratorR>\n+    [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator<=(const move_iterator<_IteratorL>& __x,\n \t       const move_iterator<_IteratorR>& __y)\n@@ -1560,6 +1614,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return !(__y < __x); }\n \n   template<typename _IteratorL, typename _IteratorR>\n+    [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator>(const move_iterator<_IteratorL>& __x,\n \t      const move_iterator<_IteratorR>& __y)\n@@ -1569,6 +1624,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return __y < __x; }\n \n   template<typename _IteratorL, typename _IteratorR>\n+    [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator>=(const move_iterator<_IteratorL>& __x,\n \t       const move_iterator<_IteratorR>& __y)\n@@ -1586,36 +1642,42 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // prefer them to greedy unconstrained function templates.\n \n   template<typename _Iterator>\n+    [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator==(const move_iterator<_Iterator>& __x,\n \t       const move_iterator<_Iterator>& __y)\n     { return __x.base() == __y.base(); }\n \n   template<typename _Iterator>\n+    [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator!=(const move_iterator<_Iterator>& __x,\n \t       const move_iterator<_Iterator>& __y)\n     { return !(__x == __y); }\n \n   template<typename _Iterator>\n+    [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator<(const move_iterator<_Iterator>& __x,\n \t      const move_iterator<_Iterator>& __y)\n     { return __x.base() < __y.base(); }\n \n   template<typename _Iterator>\n+    [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator<=(const move_iterator<_Iterator>& __x,\n \t       const move_iterator<_Iterator>& __y)\n     { return !(__y < __x); }\n \n   template<typename _Iterator>\n+    [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator>(const move_iterator<_Iterator>& __x,\n \t      const move_iterator<_Iterator>& __y)\n     { return __y < __x; }\n \n   template<typename _Iterator>\n+    [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator>=(const move_iterator<_Iterator>& __x,\n \t       const move_iterator<_Iterator>& __y)\n@@ -1624,19 +1686,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // DR 685.\n   template<typename _IteratorL, typename _IteratorR>\n+    [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR auto\n     operator-(const move_iterator<_IteratorL>& __x,\n \t      const move_iterator<_IteratorR>& __y)\n     -> decltype(__x.base() - __y.base())\n     { return __x.base() - __y.base(); }\n \n   template<typename _Iterator>\n+    [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR move_iterator<_Iterator>\n     operator+(typename move_iterator<_Iterator>::difference_type __n,\n \t      const move_iterator<_Iterator>& __x)\n     { return __x + __n; }\n \n   template<typename _Iterator>\n+    [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR move_iterator<_Iterator>\n     make_move_iterator(_Iterator __i)\n     { return move_iterator<_Iterator>(std::move(__i)); }\n@@ -1857,20 +1922,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     }\n \n+    [[nodiscard]]\n     decltype(auto)\n     operator*()\n     {\n       __glibcxx_assert(_M_index == 0);\n       return *_M_it;\n     }\n \n+    [[nodiscard]]\n     decltype(auto)\n     operator*() const requires __detail::__dereferenceable<const _It>\n     {\n       __glibcxx_assert(_M_index == 0);\n       return *_M_it;\n     }\n \n+    [[nodiscard]]\n     decltype(auto)\n     operator->() const requires __detail::__common_iter_has_arrow<_It>\n     {\n@@ -1916,6 +1984,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     template<typename _It2, sentinel_for<_It> _Sent2>\n       requires sentinel_for<_Sent, _It2>\n+      [[nodiscard]]\n       friend bool\n       operator==(const common_iterator& __x,\n \t\t const common_iterator<_It2, _Sent2>& __y)\n@@ -1938,6 +2007,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     template<typename _It2, sentinel_for<_It> _Sent2>\n       requires sentinel_for<_Sent, _It2> && equality_comparable_with<_It, _It2>\n+      [[nodiscard]]\n       friend bool\n       operator==(const common_iterator& __x,\n \t\t const common_iterator<_It2, _Sent2>& __y)\n@@ -1961,6 +2031,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     template<sized_sentinel_for<_It> _It2, sized_sentinel_for<_It> _Sent2>\n       requires sized_sentinel_for<_Sent, _It2>\n+      [[nodiscard]]\n       friend iter_difference_t<_It2>\n       operator-(const common_iterator& __x,\n \t\tconst common_iterator<_It2, _Sent2>& __y)\n@@ -1982,6 +2053,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  }\n       }\n \n+    [[nodiscard]]\n     friend iter_rvalue_reference_t<_It>\n     iter_move(const common_iterator& __i)\n     noexcept(noexcept(ranges::iter_move(std::declval<const _It&>())))\n@@ -2132,18 +2204,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  return *this;\n \t}\n \n+      [[nodiscard]]\n       constexpr const _It&\n       base() const & noexcept\n       { return _M_current; }\n \n+      [[nodiscard]]\n       constexpr _It\n       base() &&\n       noexcept(is_nothrow_move_constructible_v<_It>)\n       { return std::move(_M_current); }\n \n+      [[nodiscard]]\n       constexpr iter_difference_t<_It>\n       count() const noexcept { return _M_length; }\n \n+      [[nodiscard]]\n       constexpr decltype(auto)\n       operator*()\n       noexcept(noexcept(*_M_current))\n@@ -2152,6 +2228,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *_M_current;\n       }\n \n+      [[nodiscard]]\n       constexpr decltype(auto)\n       operator*() const\n       noexcept(noexcept(*_M_current))\n@@ -2161,6 +2238,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *_M_current;\n       }\n \n+      [[nodiscard]]\n       constexpr auto\n       operator->() const noexcept\n       requires contiguous_iterator<_It>\n@@ -2214,11 +2292,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __tmp;\n       }\n \n+      [[nodiscard]]\n       constexpr counted_iterator\n       operator+(iter_difference_t<_It> __n) const\n \trequires random_access_iterator<_It>\n       { return counted_iterator(_M_current + __n, _M_length - __n); }\n \n+      [[nodiscard]]\n       friend constexpr counted_iterator\n       operator+(iter_difference_t<_It> __n, const counted_iterator& __x)\n       requires random_access_iterator<_It>\n@@ -2234,21 +2314,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *this;\n       }\n \n+      [[nodiscard]]\n       constexpr counted_iterator\n       operator-(iter_difference_t<_It> __n) const\n       requires random_access_iterator<_It>\n       { return counted_iterator(_M_current - __n, _M_length + __n); }\n \n       template<common_with<_It> _It2>\n+\t[[nodiscard]]\n \tfriend constexpr iter_difference_t<_It2>\n \toperator-(const counted_iterator& __x,\n \t\t  const counted_iterator<_It2>& __y)\n \t{ return __y._M_length - __x._M_length; }\n \n+      [[nodiscard]]\n       friend constexpr iter_difference_t<_It>\n       operator-(const counted_iterator& __x, default_sentinel_t)\n       { return -__x._M_length; }\n \n+      [[nodiscard]]\n       friend constexpr iter_difference_t<_It>\n       operator-(default_sentinel_t, const counted_iterator& __y)\n       { return __y._M_length; }\n@@ -2263,6 +2347,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *this;\n       }\n \n+      [[nodiscard]]\n       constexpr decltype(auto)\n       operator[](iter_difference_t<_It> __n) const\n       noexcept(noexcept(_M_current[__n]))\n@@ -2273,21 +2358,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       template<common_with<_It> _It2>\n+\t[[nodiscard]]\n \tfriend constexpr bool\n \toperator==(const counted_iterator& __x,\n \t\t   const counted_iterator<_It2>& __y)\n \t{ return __x._M_length == __y._M_length; }\n \n+      [[nodiscard]]\n       friend constexpr bool\n       operator==(const counted_iterator& __x, default_sentinel_t)\n       { return __x._M_length == 0; }\n \n       template<common_with<_It> _It2>\n+\t[[nodiscard]]\n \tfriend constexpr strong_ordering\n \toperator<=>(const counted_iterator& __x,\n \t\t    const counted_iterator<_It2>& __y)\n \t{ return __y._M_length <=> __x._M_length; }\n \n+      [[nodiscard]]\n       friend constexpr iter_rvalue_reference_t<_It>\n       iter_move(const counted_iterator& __i)\n       noexcept(noexcept(ranges::iter_move(__i._M_current)))"}, {"sha": "e5afab7f4fd392f187513bd5a346a26f25ac6ae5", "filename": "libstdc++-v3/include/bits/stl_iterator_base_funcs.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -133,6 +133,7 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n    *  and are constant time.  For other %iterator classes they are linear time.\n   */\n   template<typename _InputIterator>\n+    _GLIBCXX_NODISCARD\n     inline _GLIBCXX17_CONSTEXPR\n     typename iterator_traits<_InputIterator>::difference_type\n     distance(_InputIterator __first, _InputIterator __last)\n@@ -209,6 +210,7 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n #if __cplusplus >= 201103L\n \n   template<typename _InputIterator>\n+    _GLIBCXX_NODISCARD\n     inline _GLIBCXX17_CONSTEXPR _InputIterator\n     next(_InputIterator __x, typename\n \t iterator_traits<_InputIterator>::difference_type __n = 1)\n@@ -220,6 +222,7 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n     }\n \n   template<typename _BidirectionalIterator>\n+    _GLIBCXX_NODISCARD\n     inline _GLIBCXX17_CONSTEXPR _BidirectionalIterator\n     prev(_BidirectionalIterator __x, typename\n \t iterator_traits<_BidirectionalIterator>::difference_type __n = 1) "}, {"sha": "d74c158f3423774bd311603684f5c98a9ed05c39", "filename": "libstdc++-v3/include/bits/stream_iterator.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -89,6 +89,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       ~istream_iterator() = default;\n #endif\n \n+      _GLIBCXX_NODISCARD\n       const _Tp&\n       operator*() const\n       {\n@@ -98,6 +99,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn _M_value;\n       }\n \n+      _GLIBCXX_NODISCARD\n       const _Tp*\n       operator->() const { return std::__addressof((operator*())); }\n \n@@ -143,17 +145,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       /// Return true if the iterators refer to the same stream,\n       /// or are both at end-of-stream.\n+      _GLIBCXX_NODISCARD\n       friend bool\n       operator==(const istream_iterator& __x, const istream_iterator& __y)\n       { return __x._M_equal(__y); }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n       /// Return true if the iterators refer to different streams,\n       /// or if one is at end-of-stream and the other is not.\n+      _GLIBCXX_NODISCARD\n       friend bool\n       operator!=(const istream_iterator& __x, const istream_iterator& __y)\n       { return !__x._M_equal(__y); }\n+#endif\n \n #if __cplusplus > 201703L && __cpp_lib_concepts\n+      [[nodiscard]]\n       friend bool\n       operator==(const istream_iterator& __i, default_sentinel_t)\n       { return !__i._M_stream; }\n@@ -231,6 +238,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *this;\n       }\n \n+      _GLIBCXX_NODISCARD\n       ostream_iterator&\n       operator*()\n       { return *this; }"}, {"sha": "0a77d1a3da43d0167b11873016361ad363f9b83e", "filename": "libstdc++-v3/include/bits/streambuf_iterator.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -141,6 +141,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       ///  Return the current character pointed to by iterator.  This returns\n       ///  streambuf.sgetc().  It cannot be assigned.  NB: The result of\n       ///  operator*() on an end of stream is undefined.\n+      _GLIBCXX_NODISCARD\n       char_type\n       operator*() const\n       {\n@@ -189,6 +190,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // 110 istreambuf_iterator::equal not const\n       // NB: there is also number 111 (NAD) relevant to this function.\n       /// Return true both iterators are end or both are not end.\n+      _GLIBCXX_NODISCARD\n       bool\n       equal(const istreambuf_iterator& __b) const\n       { return _M_at_eof() == __b._M_at_eof(); }\n@@ -215,23 +217,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n #if __cplusplus > 201703L && __cpp_lib_concepts\n+      [[nodiscard]]\n       friend bool\n       operator==(const istreambuf_iterator& __i, default_sentinel_t __s)\n       { return __i._M_at_eof(); }\n #endif\n     };\n \n   template<typename _CharT, typename _Traits>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator==(const istreambuf_iterator<_CharT, _Traits>& __a,\n \t       const istreambuf_iterator<_CharT, _Traits>& __b)\n     { return __a.equal(__b); }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   template<typename _CharT, typename _Traits>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,\n \t       const istreambuf_iterator<_CharT, _Traits>& __b)\n     { return !__a.equal(__b); }\n+#endif\n \n   /// Provides output iterator semantics for streambufs.\n   template<typename _CharT, typename _Traits>\n@@ -288,6 +295,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       /// Return *this.\n+      _GLIBCXX_NODISCARD\n       ostreambuf_iterator&\n       operator*()\n       { return *this; }\n@@ -303,6 +311,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return *this; }\n \n       /// Return true if previous operator=() failed.\n+      _GLIBCXX_NODISCARD\n       bool\n       failed() const _GLIBCXX_USE_NOEXCEPT\n       { return _M_failed; }"}, {"sha": "03a3778bb5280356a7e68cb823f3d9c3641a847c", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -645,6 +645,7 @@ namespace views\n   struct _Single\n   {\n     template<typename _Tp>\n+      [[nodiscard]]\n       constexpr auto\n       operator()(_Tp&& __e) const\n       noexcept(noexcept(single_view<decay_t<_Tp>>(std::forward<_Tp>(__e))))\n@@ -656,11 +657,13 @@ namespace views\n   struct _Iota\n   {\n     template<typename _Tp>\n+      [[nodiscard]]\n       constexpr auto\n       operator()(_Tp&& __e) const\n       { return iota_view(std::forward<_Tp>(__e)); }\n \n     template<typename _Tp, typename _Up>\n+      [[nodiscard]]\n       constexpr auto\n       operator()(_Tp&& __e, _Up&& __f) const\n       { return iota_view(std::forward<_Tp>(__e), std::forward<_Up>(__f)); }\n@@ -1123,6 +1126,7 @@ namespace views::__adaptor\n \trequires view<decay_t<_Range>>\n \t  || __detail::__can_ref_view<_Range>\n \t  || __detail::__can_subrange<_Range>\n+\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Range&& __r) const\n \tnoexcept(_S_noexcept<_Range>())\n@@ -1549,6 +1553,7 @@ namespace views::__adaptor\n     {\n       template<viewable_range _Range, typename _Pred>\n \trequires __detail::__can_filter_view<_Range, _Pred>\n+\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Range&& __r, _Pred&& __p) const\n \t{\n@@ -1926,6 +1931,7 @@ namespace views::__adaptor\n     {\n       template<viewable_range _Range, typename _Fp>\n \trequires __detail::__can_transform_view<_Range, _Fp>\n+\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Range&& __r, _Fp&& __f) const\n \t{\n@@ -2107,6 +2113,7 @@ namespace views::__adaptor\n     {\n       template<viewable_range _Range, typename _Tp>\n \trequires __detail::__can_take_view<_Range, _Tp>\n+\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Range&& __r, _Tp&& __n) const\n \t{\n@@ -2234,6 +2241,7 @@ namespace views::__adaptor\n     {\n       template<viewable_range _Range, typename _Pred>\n \trequires __detail::__can_take_while_view<_Range, _Pred>\n+\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Range&& __r, _Pred&& __p) const\n \t{\n@@ -2354,6 +2362,7 @@ namespace views::__adaptor\n     {\n       template<viewable_range _Range, typename _Tp>\n \trequires __detail::__can_drop_view<_Range, _Tp>\n+\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Range&& __r, _Tp&& __n) const\n \t{\n@@ -2442,6 +2451,7 @@ namespace views::__adaptor\n     {\n       template<viewable_range _Range, typename _Pred>\n \trequires __detail::__can_drop_while_view<_Range, _Pred>\n+\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Range&& __r, _Pred&& __p) const\n \t{\n@@ -2804,6 +2814,7 @@ namespace views::__adaptor\n     {\n       template<viewable_range _Range>\n \trequires __detail::__can_join_view<_Range>\n+\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Range&& __r) const\n \t{\n@@ -3255,6 +3266,7 @@ namespace views::__adaptor\n     {\n       template<viewable_range _Range, typename _Pattern>\n \trequires __detail::__can_lazy_split_view<_Range, _Pattern>\n+\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Range&& __r, _Pattern&& __f) const\n \t{\n@@ -3463,6 +3475,7 @@ namespace views::__adaptor\n     {\n       template<viewable_range _Range, typename _Pattern>\n \trequires __detail::__can_split_view<_Range, _Pattern>\n+\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Range&& __r, _Pattern&& __f) const\n \t{\n@@ -3484,6 +3497,7 @@ namespace views::__adaptor\n     struct _Counted\n     {\n       template<input_or_output_iterator _Iter>\n+      [[nodiscard]]\n       constexpr auto\n       operator()(_Iter __i, iter_difference_t<_Iter> __n) const\n       {\n@@ -3605,6 +3619,7 @@ namespace views::__adaptor\n       template<viewable_range _Range>\n \trequires __detail::__already_common<_Range>\n \t  || __detail::__can_common_view<_Range>\n+\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Range&& __r) const\n \t{\n@@ -3727,6 +3742,7 @@ namespace views::__adaptor\n \trequires __detail::__is_reverse_view<remove_cvref_t<_Range>>\n \t  || __detail::__is_reversible_subrange<remove_cvref_t<_Range>>\n \t  || __detail::__can_reverse_view<_Range>\n+\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(_Range&& __r) const\n \t{\n@@ -4125,6 +4141,7 @@ namespace views::__adaptor\n       {\n \ttemplate<viewable_range _Range>\n \t  requires __detail::__can_elements_view<_Nm, _Range>\n+\t  [[nodiscard]]\n \t  constexpr auto\n \t  operator()(_Range&& __r) const\n \t  {"}, {"sha": "dd2c14650ae9e03d6099f4030a940099db50b163", "filename": "libstdc++-v3/testsuite/20_util/rel_ops.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Frel_ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Frel_ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Frel_ops.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -17,6 +17,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// { dg-options \"-Wno-unused-result\" }\n+\n // 20.2.1 Operators\n \n #include <utility>"}, {"sha": "d37b1cb4c4ef977641d7eff1562b14995de0fd9b", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/range_access/char/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frange_access%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frange_access%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frange_access%2Fchar%2F1.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -25,6 +25,6 @@ void\n test01()\n {\n   std::string s(\"Hello, World!\");\n-  std::begin(s);\n-  std::end(s);\n+  (void) std::begin(s);\n+  (void) std::end(s);\n }"}, {"sha": "56169150089186450c48812f68221442790b9753", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/range_access/wchar_t/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frange_access%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frange_access%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frange_access%2Fwchar_t%2F1.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -26,7 +26,7 @@ test01()\n {\n #ifdef _GLIBCXX_USE_WCHAR_T\n   std::wstring ws(L\"Hello, World!\");\n-  std::begin(ws);\n-  std::end(ws);\n+  (void) std::begin(ws);\n+  (void) std::end(ws);\n #endif\n }"}, {"sha": "4a3595663b89ea6ea40da898c1a46e969aaf7c08", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/range_access/char/1.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frange_access%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frange_access%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frange_access%2Fchar%2F1.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -25,10 +25,10 @@ void\n test01()\n {\n   std::string_view s(\"Hello, World!\");\n-  std::begin(s);\n-  std::end(s);\n-  std::rbegin(s);\n-  std::rend(s);\n+  (void) std::begin(s);\n+  (void) std::end(s);\n+  (void) std::rbegin(s);\n+  (void) std::rend(s);\n }\n \n void"}, {"sha": "f8ecd1a84cd2ae9eddd89cd6ed677c9bdf074c7f", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/range_access/wchar_t/1.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frange_access%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frange_access%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frange_access%2Fwchar_t%2F1.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -25,10 +25,10 @@ void\n test01()\n {\n   std::wstring_view ws(L\"Hello, World!\");\n-  std::begin(ws);\n-  std::end(ws);\n-  std::rbegin(ws);\n-  std::rend(ws);\n+  (void) std::begin(ws);\n+  (void) std::end(ws);\n+  (void) std::rbegin(ws);\n+  (void) std::rend(ws);\n }\n \n void"}, {"sha": "807ccdb2b0138d81ce3453337450a2d5cafb03e7", "filename": "libstdc++-v3/testsuite/23_containers/array/range_access.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frange_access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frange_access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frange_access.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -25,6 +25,6 @@ void\n test01()\n {\n   std::array<int, 3> a{{1, 2, 3}};\n-  std::begin(a);\n-  std::end(a);\n+  (void) std::begin(a);\n+  (void) std::end(a);\n }"}, {"sha": "990fc0d573b79b3385e6d1091823d6b4c2396e17", "filename": "libstdc++-v3/testsuite/23_containers/deque/range_access.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frange_access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frange_access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frange_access.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -25,6 +25,6 @@ void\n test01()\n {\n   std::deque<int> d{1, 2, 3};\n-  std::begin(d);\n-  std::end(d);\n+  (void) std::begin(d);\n+  (void) std::end(d);\n }"}, {"sha": "6398240e12628d8ad90bf7a60a921c65401eda5f", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/range_access.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frange_access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frange_access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frange_access.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -25,6 +25,6 @@ void\n test01()\n {\n   std::forward_list<int> fl{1, 2, 3};\n-  std::begin(fl);\n-  std::end(fl);\n+  (void) std::begin(fl);\n+  (void) std::end(fl);\n }"}, {"sha": "15047ec755d4134eed121df25ed261037b164da1", "filename": "libstdc++-v3/testsuite/23_containers/list/range_access.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frange_access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frange_access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frange_access.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -25,6 +25,6 @@ void\n test01()\n {\n   std::list<int> l{1, 2, 3};\n-  std::begin(l);\n-  std::end(l);\n+  (void) std::begin(l);\n+  (void) std::end(l);\n }"}, {"sha": "3c6b00128cace48d2aa4d10458afe6d5298f1b8d", "filename": "libstdc++-v3/testsuite/23_containers/map/range_access.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frange_access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frange_access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frange_access.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -25,6 +25,6 @@ void\n test01()\n {\n   std::map<int, double> m{{1, 1.0}, {2, 2.0}, {3, 3.0}};\n-  std::begin(m);\n-  std::end(m);\n+  (void) std::begin(m);\n+  (void) std::end(m);\n }"}, {"sha": "020a7a9e627cc47744b323dfb33189e599ed16cf", "filename": "libstdc++-v3/testsuite/23_containers/multimap/range_access.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frange_access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frange_access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frange_access.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -25,6 +25,6 @@ void\n test01()\n {\n   std::multimap<int, double> mm{{1, 1.0}, {2, 2.0}, {3, 3.0}};\n-  std::begin(mm);\n-  std::end(mm);\n+  (void) std::begin(mm);\n+  (void) std::end(mm);\n }"}, {"sha": "7e66bfa24aa49aef708605d74ac127d633c44826", "filename": "libstdc++-v3/testsuite/23_containers/multiset/range_access.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frange_access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frange_access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frange_access.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -25,6 +25,6 @@ void\n test01()\n {\n   std::multiset<int> ms{1, 2, 3};\n-  std::begin(ms);\n-  std::end(ms);\n+  (void) std::begin(ms);\n+  (void) std::end(ms);\n }"}, {"sha": "66099b39df4821ddaa40cc866eb6c2a98b00b6d9", "filename": "libstdc++-v3/testsuite/23_containers/set/range_access.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frange_access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frange_access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frange_access.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -25,6 +25,6 @@ void\n test01()\n {\n   std::set<int> s{1, 2, 3};\n-  std::begin(s);\n-  std::end(s);\n+  (void) std::begin(s);\n+  (void) std::end(s);\n }"}, {"sha": "ad20c1da942a92ec67c74f5ff2c1eee6c9f473e6", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/range_access.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frange_access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frange_access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frange_access.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -25,6 +25,6 @@ void\n test01()\n {\n   std::unordered_map<int, double> um{{1, 1.0}, {2, 2.0}, {3, 3.0}};\n-  std::begin(um);\n-  std::end(um);\n+  (void) std::begin(um);\n+  (void) std::end(um);\n }"}, {"sha": "4bb126e34f9e163e8280d20b886721dc880db4ec", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/range_access.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frange_access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frange_access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frange_access.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -25,6 +25,6 @@ void\n test01()\n {\n   std::unordered_multimap<int, double> umm{{1, 1.0}, {2, 2.0}, {3, 3.0}};\n-  std::begin(umm);\n-  std::end(umm);\n+  (void) std::begin(umm);\n+  (void) std::end(umm);\n }"}, {"sha": "899b74af35c4db5e0b663aa5df99276c8b933959", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/range_access.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frange_access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frange_access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frange_access.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -25,6 +25,6 @@ void\n test01()\n {\n   std::unordered_multiset<int> ums{1, 2, 3};\n-  std::begin(ums);\n-  std::end(ums);\n+  (void) std::begin(ums);\n+  (void) std::end(ums);\n }"}, {"sha": "4f9e8857113116d5f285e9cbb742906423263755", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/range_access.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frange_access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frange_access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frange_access.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -25,6 +25,6 @@ void\n test01()\n {\n   std::unordered_set<int> us{1, 2, 3};\n-  std::begin(us);\n-  std::end(us);\n+  (void) std::begin(us);\n+  (void) std::end(us);\n }"}, {"sha": "0dd761b71f18bf10d0c9785e6c88826eba1d217a", "filename": "libstdc++-v3/testsuite/23_containers/vector/range_access.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frange_access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frange_access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frange_access.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -25,10 +25,10 @@ void\n test01()\n {\n   std::vector<double> v{1.0, 2.0, 3.0};\n-  std::begin(v);\n-  std::end(v);\n+  (void) std::begin(v);\n+  (void) std::end(v);\n \n   std::vector<bool> vb{true, false, true};\n-  std::begin(vb);\n-  std::end(vb);\n+  (void) std::begin(vb);\n+  (void) std::end(vb);\n }"}, {"sha": "40a084b918c1226521776bbf75a2d0c224459bbe", "filename": "libstdc++-v3/testsuite/24_iterators/customization_points/iter_move.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcustomization_points%2Fiter_move.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcustomization_points%2Fiter_move.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcustomization_points%2Fiter_move.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -51,7 +51,7 @@ constexpr bool\n test_X(int i, int j)\n {\n   X x1{i}, x2{j};\n-  std::ranges::iter_move(&x1); // no-op\n+  (void) std::ranges::iter_move(&x1); // no-op\n   x1 = std::ranges::iter_move(&x2);\n   return x1.value == j &&  x2.value == -1;\n }"}, {"sha": "f8f16375bf09aa15a6fa72a3cfb40d30688a9fb0", "filename": "libstdc++-v3/testsuite/24_iterators/istream_iterator/sentinel.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator%2Fsentinel.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator%2Fsentinel.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator%2Fsentinel.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -43,9 +43,9 @@ test02()\n   VERIFY( iter != std::default_sentinel );\n   VERIFY( std::default_sentinel != iter );\n \n-  *iter++;\n-  *iter++;\n-  *iter++;\n+  (void) *iter++;\n+  (void) *iter++;\n+  (void) *iter++;\n   VERIFY( iter == std::default_sentinel );\n   VERIFY( std::default_sentinel == iter );\n }"}, {"sha": "b7cdd44677dfad7773364f15f495c38f83222c40", "filename": "libstdc++-v3/testsuite/24_iterators/istreambuf_iterator/sentinel.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2Fsentinel.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2Fsentinel.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2Fsentinel.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -41,7 +41,7 @@ test02()\n   VERIFY( iter != std::default_sentinel );\n   VERIFY( std::default_sentinel != iter );\n \n-  std::next(iter, 3);\n+  (void) std::next(iter, 3);\n   VERIFY( iter == std::default_sentinel );\n   VERIFY( std::default_sentinel == iter );\n }"}, {"sha": "c9bd3d677e51e4ec3e80f91c3d798b6270e4bde3", "filename": "libstdc++-v3/testsuite/24_iterators/move_iterator/dr2061.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fdr2061.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fdr2061.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fdr2061.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -23,6 +23,6 @@\n void test01()\n {\n   int a[] = { 1, 2, 3, 4 };\n-  std::make_move_iterator(a + 4);\n-  std::make_move_iterator(a);\n+  (void) std::make_move_iterator(a + 4);\n+  (void) std::make_move_iterator(a);\n }"}, {"sha": "ce50e34a5a61510121d873bd6c6ec3a8e8a5a441", "filename": "libstdc++-v3/testsuite/24_iterators/move_iterator/greedy_ops.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fgreedy_ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fgreedy_ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fgreedy_ops.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -1,4 +1,6 @@\n // { dg-do compile { target c++11 } }\n+// { dg-options \"-Wno-unused-result\" }\n+\n // Copyright (C) 2010-2021 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free"}, {"sha": "29ff7266d07619a2ddcac3a076968d6d6f2d55f5", "filename": "libstdc++-v3/testsuite/24_iterators/normal_iterator/greedy_ops.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fnormal_iterator%2Fgreedy_ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fnormal_iterator%2Fgreedy_ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fnormal_iterator%2Fgreedy_ops.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -1,4 +1,6 @@\n // { dg-do compile }\n+// { dg-options \"-Wno-unused-result\" }\n+\n // Copyright (C) 2010-2021 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -33,7 +35,7 @@ void test01()\n \t\t\t\t       greedy_ops::C> iterator_type;\n \n   iterator_type it(0);\n-  \n+\n   it == it;\n   it != it;\n   it < it;\n@@ -45,8 +47,8 @@ void test01()\n   1 + it;\n }\n \n-int main() \n-{ \n+int main()\n+{\n   test01();\n   return 0;\n }"}, {"sha": "cafafc4b651117c7aaf3ff912aeeed3a4c9d8009", "filename": "libstdc++-v3/testsuite/24_iterators/operations/prev_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Foperations%2Fprev_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Foperations%2Fprev_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Foperations%2Fprev_neg.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -37,6 +37,6 @@ void\n test02()\n {\n   const Y array[1] = { };\n-  std::prev(array + 1);\n+  (void) std::prev(array + 1);\n   // { dg-error \"forward_iterator\" \"\" { target *-*-* } 223 }\n }"}, {"sha": "a962cd5823651a013522c436434149f0bdbfe219", "filename": "libstdc++-v3/testsuite/24_iterators/ostreambuf_iterator/2.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator%2F2.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -45,19 +45,19 @@ void test02(void)\n   VERIFY( !ostrb_it01.failed() );\n   ostrb_it01 = 'a';\n   VERIFY( !ostrb_it01.failed() );\n-  *ostrb_it01;\n+  (void) *ostrb_it01;\n   VERIFY( !ostrb_it01.failed() );\n \n   costreambuf_iter ostrb_it02(0);\n   VERIFY( ostrb_it02.failed() );\n   ostrb_it02++;\n   ++ostrb_it02;\n   VERIFY( ostrb_it02.failed() );\n-  *ostrb_it02;\n+  (void) *ostrb_it02;\n   VERIFY( ostrb_it02.failed() );\n   ostrb_it02 = 'a';\n   VERIFY( ostrb_it02.failed() );\n-  \n+\n   // charT operator*() const\n   // ostreambuf_iterator& operator++();\n   // ostreambuf_iterator& operator++(int);"}, {"sha": "e679f24e75bfbe769d83825e841b7e30350cad44", "filename": "libstdc++-v3/testsuite/24_iterators/range_access/range_access.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_access%2Frange_access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_access%2Frange_access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_access%2Frange_access.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -25,8 +25,8 @@ void\n test01()\n {\n   int arr[3] = {1, 2, 3};\n-  std::begin(arr);\n-  std::end(arr);\n+  (void) std::begin(arr);\n+  (void) std::end(arr);\n \n   static_assert( noexcept(std::begin(arr)), \"LWG 2280\" );\n   static_assert( noexcept(std::end(arr)), \"LWG 2280\" );"}, {"sha": "d4deedd82f664a5386896a08200d1ef44eeca41d", "filename": "libstdc++-v3/testsuite/24_iterators/range_operations/100768.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_operations%2F100768.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_operations%2F100768.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_operations%2F100768.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -114,15 +114,15 @@ test01()\n   // deleted overloads in namespace ns3 (because it is an associated namespace\n   // and those functions are exact matches for the arguments).\n   using namespace std::ranges;\n-  advance(iter, 1);\n-  advance(iter, 3, sentinel);\n-  distance(iter, sentinel);\n-  distance(range);\n-  next(iter);\n-  next(iter, -1);\n-  next(iter, sentinel);\n-  next(iter, 5, sentinel);\n-  prev(iter);\n-  prev(iter, 0);\n-  prev(iter, 0, sentinel);\n+  (void) advance(iter, 1);\n+  (void) advance(iter, 3, sentinel);\n+  (void) distance(iter, sentinel);\n+  (void) distance(range);\n+  (void) next(iter);\n+  (void) next(iter, -1);\n+  (void) next(iter, sentinel);\n+  (void) next(iter, 5, sentinel);\n+  (void) prev(iter);\n+  (void) prev(iter, 0);\n+  (void) prev(iter, 0, sentinel);\n }"}, {"sha": "bd8b20d877d1fb435ad7434cf6239b3d867965c4", "filename": "libstdc++-v3/testsuite/24_iterators/reverse_iterator/2.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2F2.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -17,6 +17,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// { dg-options \"-Wno-unused-result\" }\n+\n // 24.4.1.2 Reverse iterators\n \n #include <iterator>"}, {"sha": "e5e6dd25027461eb4e8c32b644c924ed743770ae", "filename": "libstdc++-v3/testsuite/24_iterators/reverse_iterator/greedy_ops.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Fgreedy_ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Fgreedy_ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Fgreedy_ops.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -1,4 +1,6 @@\n // { dg-do compile }\n+// { dg-options \"-Wno-unused-result\" }\n+\n // Copyright (C) 2010-2021 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free"}, {"sha": "cf5418a61d104788f775eb29fe14aa81a0ab60ff", "filename": "libstdc++-v3/testsuite/26_numerics/valarray/range_access2.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Frange_access2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Frange_access2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Frange_access2.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -27,9 +27,9 @@ void\n test01()\n {\n   std::valarray<double> va{1.0, 2.0, 3.0};\n-  std::cbegin(va);\n-  std::cend(va);\n+  (void) std::cbegin(va);\n+  (void) std::cend(va);\n   const auto& cva = va;\n-  std::cbegin(cva);\n-  std::cend(cva);\n+  (void) std::cbegin(cva);\n+  (void) std::cend(cva);\n }"}, {"sha": "6baefbfb673c93fcd9083d7ca0b5dbd103ba62c5", "filename": "libstdc++-v3/testsuite/28_regex/range_access.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Frange_access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Frange_access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Frange_access.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -26,6 +26,6 @@ void\n test01()\n {\n   std::smatch sm;\n-  std::begin(sm);\n-  std::end(sm);\n+  (void) std::begin(sm);\n+  (void) std::end(sm);\n }"}, {"sha": "1c456920e5b2807f280f1bcf9e26afc1bcef3d9e", "filename": "libstdc++-v3/testsuite/experimental/string_view/range_access/char/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frange_access%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frange_access%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frange_access%2Fchar%2F1.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -25,6 +25,6 @@ void\n test01()\n {\n   std::experimental::string_view s(\"Hello, World!\");\n-  std::begin(s);\n-  std::end(s);\n+  (void) std::begin(s);\n+  (void) std::end(s);\n }"}, {"sha": "f19e455a6063cadfbf797794b3443797b92a2f73", "filename": "libstdc++-v3/testsuite/experimental/string_view/range_access/wchar_t/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frange_access%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frange_access%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frange_access%2Fwchar_t%2F1.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -26,7 +26,7 @@ test01()\n {\n #ifdef _GLIBCXX_USE_WCHAR_T\n   std::experimental::wstring_view ws(L\"Hello, World!\");\n-  std::begin(ws);\n-  std::end(ws);\n+  (void) std::begin(ws);\n+  (void) std::end(ws);\n #endif\n }"}, {"sha": "7b381ffd95610dfb3b0a9697d80db1f3bd792465", "filename": "libstdc++-v3/testsuite/ext/vstring/range_access.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Frange_access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Frange_access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Frange_access.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -25,12 +25,12 @@ void\n test01()\n {\n   __gnu_cxx::__vstring s(\"Hello, World!\");\n-  std::begin(s);\n-  std::end(s);\n+  (void) std::begin(s);\n+  (void) std::end(s);\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   __gnu_cxx::__wvstring ws(L\"Hello, World!\");\n-  std::begin(ws);\n-  std::end(ws);\n+  (void) std::begin(ws);\n+  (void) std::end(ws);\n #endif\n }"}, {"sha": "d79d451478da594d284753daccf2d26c7343a802", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/take.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Ftake.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Ftake.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Ftake.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -62,7 +62,7 @@ test03()\n   int x[] = {0,1,2,3,4,5};\n   auto is_odd = [] (int i) { return i%2 == 1; };\n   auto v = x | views::filter(is_odd) | views::take(3);\n-  ranges::begin(v);\n+  (void) ranges::begin(v);\n   using R = decltype(v);\n   static_assert(ranges::view<R>);\n   static_assert(!ranges::sized_range<R>);"}, {"sha": "89234e246a024bf0bd734c2644653455ac81f357", "filename": "libstdc++-v3/testsuite/std/ranges/p2259.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fp2259.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fp2259.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fp2259.cc?ref=240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "patch": "@@ -64,7 +64,7 @@ test01()\n \n   // Verify the changes to common_iterator.\n   only_cxx20_input_range auto v6 = v0 | views::common;\n-  *(v6.begin()++);\n+  (void) *(v6.begin()++);\n \n   // Verify the changes to iota_view.\n   only_cxx20_input_range auto v8 = ranges::iota_view{v0.begin()};\n@@ -77,7 +77,7 @@ test01()\n   static_assert(std::contiguous_iterator<decltype(i10)>);\n   static_assert(std::same_as<std::iterator_traits<decltype(i10)>::iterator_category,\n \t\t\t     std::random_access_iterator_tag>);\n-  i10.operator->();\n+  (void) i10.operator->();\n   __iter_without_category auto i11 = std::counted_iterator{v0.begin(), 5};\n }\n "}]}