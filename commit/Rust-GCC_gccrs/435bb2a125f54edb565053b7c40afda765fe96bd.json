{"sha": "435bb2a125f54edb565053b7c40afda765fe96bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM1YmIyYTEyNWY1NGVkYjU2NTA1M2I3YzQwYWZkYTc2NWZlOTZiZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-08-26T22:02:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-08-26T22:02:44Z"}, "message": "re PR rtl-optimization/23561 (nonoverlapping_memrefs_p returns true even for overlapping memory references)\n\n\tPR rtl-optimization/23561\n\t* builtins.c (get_memory_rtx): Add LEN argument.  If MEM_EXPR is\n\ta COMPONENT_REF, remove all COMPONENT_REF from MEM_EXPR unless\n\tat most LEN bytes long memory fits into the field.\n\t(expand_builtin_memcpy, expand_builtin_mempcpy, expand_movstr,\n\texpand_builtin_strncpy, expand_builtin_memset, expand_builtin_memcmp,\n\texpand_builtin_strcmp, expand_builtin_strncmp): Adjust callers.\n\n\t* gcc.c-torture/execute/20050826-1.c: New test.\n\nFrom-SVN: r103541", "tree": {"sha": "98ccbe9ec79be85a6d0adc7e6a8ae4dd1aafc086", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98ccbe9ec79be85a6d0adc7e6a8ae4dd1aafc086"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/435bb2a125f54edb565053b7c40afda765fe96bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/435bb2a125f54edb565053b7c40afda765fe96bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/435bb2a125f54edb565053b7c40afda765fe96bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/435bb2a125f54edb565053b7c40afda765fe96bd/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ff8afde0ea2f2673e458e610e9680fa90bc3c2dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff8afde0ea2f2673e458e610e9680fa90bc3c2dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff8afde0ea2f2673e458e610e9680fa90bc3c2dc"}], "stats": {"total": 176, "additions": 158, "deletions": 18}, "files": [{"sha": "82f46a45f26e9c8b5a1eb6fad3e4b74577d59c88", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435bb2a125f54edb565053b7c40afda765fe96bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435bb2a125f54edb565053b7c40afda765fe96bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=435bb2a125f54edb565053b7c40afda765fe96bd", "patch": "@@ -1,3 +1,13 @@\n+2005-08-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/23561\n+\t* builtins.c (get_memory_rtx): Add LEN argument.  If MEM_EXPR is\n+\ta COMPONENT_REF, remove all COMPONENT_REF from MEM_EXPR unless\n+\tat most LEN bytes long memory fits into the field.\n+\t(expand_builtin_memcpy, expand_builtin_mempcpy, expand_movstr,\n+\texpand_builtin_strncpy, expand_builtin_memset, expand_builtin_memcmp,\n+\texpand_builtin_strcmp, expand_builtin_strncmp): Adjust callers.\n+\n 2005-08-26  Richard Henderson  <rth@redhat.com>\n \n \tPR rtl-opt/23560"}, {"sha": "43bbd2427ccefa7e287d63b47ef1daaeec85ab0a", "filename": "gcc/builtins.c", "status": "modified", "additions": 101, "deletions": 18, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435bb2a125f54edb565053b7c40afda765fe96bd/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435bb2a125f54edb565053b7c40afda765fe96bd/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=435bb2a125f54edb565053b7c40afda765fe96bd", "patch": "@@ -75,7 +75,7 @@ static int get_pointer_alignment (tree, unsigned int);\n static const char *c_getstr (tree);\n static rtx c_readstr (const char *, enum machine_mode);\n static int target_char_cast (tree, char *);\n-static rtx get_memory_rtx (tree);\n+static rtx get_memory_rtx (tree, tree);\n static tree build_string_literal (int, const char *);\n static int apply_args_size (void);\n static int apply_result_size (void);\n@@ -1013,10 +1013,12 @@ expand_builtin_prefetch (tree arglist)\n }\n \n /* Get a MEM rtx for expression EXP which is the address of an operand\n-   to be used to be used in a string instruction (cmpstrsi, movmemsi, ..).  */\n+   to be used in a string instruction (cmpstrsi, movmemsi, ..).  LEN is\n+   the maximum length of the block of memory that might be accessed or\n+   NULL if unknown.  */\n \n static rtx\n-get_memory_rtx (tree exp)\n+get_memory_rtx (tree exp, tree len)\n {\n   rtx addr = expand_expr (exp, NULL_RTX, ptr_mode, EXPAND_NORMAL);\n   rtx mem = gen_rtx_MEM (BLKmode, memory_address (BLKmode, addr));\n@@ -1042,6 +1044,87 @@ get_memory_rtx (tree exp)\n   if (exp)\n     {\n       set_mem_attributes (mem, exp, 0);\n+\n+      /* Allow the string and memory builtins to overflow from one\n+\t field into another, see http://gcc.gnu.org/PR23561.\n+\t Thus avoid COMPONENT_REFs in MEM_EXPR unless we know the whole\n+\t memory accessed by the string or memory builtin will fit\n+\t within the field.  */\n+      if (MEM_EXPR (mem) && TREE_CODE (MEM_EXPR (mem)) == COMPONENT_REF)\n+\t{\n+\t  tree mem_expr = MEM_EXPR (mem);\n+\t  HOST_WIDE_INT offset = -1, length = -1;\n+\t  tree inner = exp;\n+\n+\t  while (TREE_CODE (inner) == ARRAY_REF\n+\t\t || TREE_CODE (inner) == NOP_EXPR\n+\t\t || TREE_CODE (inner) == CONVERT_EXPR\n+\t\t || TREE_CODE (inner) == NON_LVALUE_EXPR\n+\t\t || TREE_CODE (inner) == VIEW_CONVERT_EXPR\n+\t\t || TREE_CODE (inner) == SAVE_EXPR)\n+\t    inner = TREE_OPERAND (inner, 0);\n+\n+\t  gcc_assert (TREE_CODE (inner) == COMPONENT_REF);\n+\n+\t  if (MEM_OFFSET (mem)\n+\t      && GET_CODE (MEM_OFFSET (mem)) == CONST_INT)\n+\t    offset = INTVAL (MEM_OFFSET (mem));\n+\n+\t  if (offset >= 0 && len && host_integerp (len, 0))\n+\t    length = tree_low_cst (len, 0);\n+\n+\t  while (TREE_CODE (inner) == COMPONENT_REF)\n+\t    {\n+\t      tree field = TREE_OPERAND (inner, 1);\n+\t      gcc_assert (! DECL_BIT_FIELD (field));\n+\t      gcc_assert (TREE_CODE (mem_expr) == COMPONENT_REF);\n+\t      gcc_assert (field == TREE_OPERAND (mem_expr, 1));\n+\n+\t      if (length >= 0\n+\t\t  && TYPE_SIZE_UNIT (TREE_TYPE (inner))\n+\t\t  && host_integerp (TYPE_SIZE_UNIT (TREE_TYPE (inner)), 0))\n+\t\t{\n+\t\t  HOST_WIDE_INT size\n+\t\t    = tree_low_cst (TYPE_SIZE_UNIT (TREE_TYPE (inner)), 0);\n+\t\t  /* If we can prove the memory starting at XEXP (mem, 0)\n+\t\t     and ending at XEXP (mem, 0) + LENGTH will fit into\n+\t\t     this field, we can keep that COMPONENT_REF in MEM_EXPR.  */\n+\t\t  if (offset <= size\n+\t\t      && length <= size\n+\t\t      && offset + length <= size)\n+\t\t    break;\n+\t\t}\n+\n+\t      if (offset >= 0\n+\t\t  && host_integerp (DECL_FIELD_OFFSET (field), 0))\n+\t\toffset += tree_low_cst (DECL_FIELD_OFFSET (field), 0)\n+\t\t\t  + tree_low_cst (DECL_FIELD_BIT_OFFSET (field), 1)\n+\t\t\t    / BITS_PER_UNIT;\n+\t      else\n+\t\t{\n+\t\t  offset = -1;\n+\t\t  length = -1;\n+\t\t}\n+\n+\t      mem_expr = TREE_OPERAND (mem_expr, 0);\n+\t      inner = TREE_OPERAND (inner, 0);\n+\n+\t      while (TREE_CODE (inner) == NOP_EXPR\n+\t\t     || TREE_CODE (inner) == CONVERT_EXPR\n+\t\t     || TREE_CODE (inner) == NON_LVALUE_EXPR\n+\t\t     || TREE_CODE (inner) == VIEW_CONVERT_EXPR\n+\t\t     || TREE_CODE (inner) == SAVE_EXPR)\n+\t\tinner = TREE_OPERAND (inner, 0);\n+\t    }\n+\n+\t  if (mem_expr == NULL)\n+\t    offset = -1;\n+\t  if (mem_expr != MEM_EXPR (mem))\n+\t    {\n+\t      set_mem_expr (mem, mem_expr);\n+\t      set_mem_offset (mem, offset >= 0 ? GEN_INT (offset) : NULL_RTX);\n+\t    }\n+\t}\n       set_mem_alias_set (mem, 0);\n       set_mem_size (mem, NULL_RTX);\n     }\n@@ -2808,7 +2891,7 @@ expand_builtin_memcpy (tree exp, rtx target, enum machine_mode mode)\n       if (src_align == 0)\n \treturn 0;\n \n-      dest_mem = get_memory_rtx (dest);\n+      dest_mem = get_memory_rtx (dest, len);\n       set_mem_align (dest_mem, dest_align);\n       len_rtx = expand_expr (len, NULL_RTX, VOIDmode, 0);\n       src_str = c_getstr (src);\n@@ -2830,7 +2913,7 @@ expand_builtin_memcpy (tree exp, rtx target, enum machine_mode mode)\n \t  return dest_mem;\n \t}\n \n-      src_mem = get_memory_rtx (src);\n+      src_mem = get_memory_rtx (src, len);\n       set_mem_align (src_mem, src_align);\n \n       /* Copy word part most expediently.  */\n@@ -2909,7 +2992,7 @@ expand_builtin_mempcpy (tree arglist, tree type, rtx target, enum machine_mode m\n \t  && can_store_by_pieces (INTVAL (len_rtx), builtin_memcpy_read_str,\n \t\t\t\t  (void *) src_str, dest_align))\n \t{\n-\t  dest_mem = get_memory_rtx (dest);\n+\t  dest_mem = get_memory_rtx (dest, len);\n \t  set_mem_align (dest_mem, dest_align);\n \t  dest_mem = store_by_pieces (dest_mem, INTVAL (len_rtx),\n \t\t\t\t      builtin_memcpy_read_str,\n@@ -2923,9 +3006,9 @@ expand_builtin_mempcpy (tree arglist, tree type, rtx target, enum machine_mode m\n \t  && can_move_by_pieces (INTVAL (len_rtx),\n \t\t\t\t MIN (dest_align, src_align)))\n \t{\n-\t  dest_mem = get_memory_rtx (dest);\n+\t  dest_mem = get_memory_rtx (dest, len);\n \t  set_mem_align (dest_mem, dest_align);\n-\t  src_mem = get_memory_rtx (src);\n+\t  src_mem = get_memory_rtx (src, len);\n \t  set_mem_align (src_mem, src_align);\n \t  dest_mem = move_by_pieces (dest_mem, src_mem, INTVAL (len_rtx),\n \t\t\t\t     MIN (dest_align, src_align), endp);\n@@ -3053,8 +3136,8 @@ expand_movstr (tree dest, tree src, rtx target, int endp)\n   if (!HAVE_movstr)\n     return 0;\n \n-  dest_mem = get_memory_rtx (dest);\n-  src_mem = get_memory_rtx (src);\n+  dest_mem = get_memory_rtx (dest, NULL);\n+  src_mem = get_memory_rtx (src, NULL);\n   if (!endp)\n     {\n       target = force_reg (Pmode, XEXP (dest_mem, 0));\n@@ -3260,7 +3343,7 @@ expand_builtin_strncpy (tree exp, rtx target, enum machine_mode mode)\n \t\t\t\t       (void *) p, dest_align))\n \t    return 0;\n \n-\t  dest_mem = get_memory_rtx (dest);\n+\t  dest_mem = get_memory_rtx (dest, len);\n \t  store_by_pieces (dest_mem, tree_low_cst (len, 1),\n \t\t\t   builtin_strncpy_read_str,\n \t\t\t   (void *) p, dest_align, 0);\n@@ -3351,7 +3434,7 @@ expand_builtin_memset (tree arglist, rtx target, enum machine_mode mode,\n \t}\n \n       len_rtx = expand_expr (len, NULL_RTX, VOIDmode, 0);\n-      dest_mem = get_memory_rtx (dest);\n+      dest_mem = get_memory_rtx (dest, len);\n \n       if (TREE_CODE (val) != INTEGER_CST)\n \t{\n@@ -3502,8 +3585,8 @@ expand_builtin_memcmp (tree exp ATTRIBUTE_UNUSED, tree arglist, rtx target,\n \t   && REGNO (result) >= FIRST_PSEUDO_REGISTER))\n       result = gen_reg_rtx (insn_mode);\n \n-    arg1_rtx = get_memory_rtx (arg1);\n-    arg2_rtx = get_memory_rtx (arg2);\n+    arg1_rtx = get_memory_rtx (arg1, len);\n+    arg2_rtx = get_memory_rtx (arg2, len);\n     arg3_rtx = expand_expr (len, NULL_RTX, VOIDmode, 0);\n \n     /* Set MEM_SIZE as appropriate.  */\n@@ -3596,8 +3679,8 @@ expand_builtin_strcmp (tree exp, rtx target, enum machine_mode mode)\n       arg1 = builtin_save_expr (arg1);\n       arg2 = builtin_save_expr (arg2);\n \n-      arg1_rtx = get_memory_rtx (arg1);\n-      arg2_rtx = get_memory_rtx (arg2);\n+      arg1_rtx = get_memory_rtx (arg1, NULL);\n+      arg2_rtx = get_memory_rtx (arg2, NULL);\n \n #ifdef HAVE_cmpstrsi\n       /* Try to call cmpstrsi.  */\n@@ -3801,8 +3884,8 @@ expand_builtin_strncmp (tree exp, rtx target, enum machine_mode mode)\n     arg2 = builtin_save_expr (arg2);\n     len = builtin_save_expr (len);\n \n-    arg1_rtx = get_memory_rtx (arg1);\n-    arg2_rtx = get_memory_rtx (arg2);\n+    arg1_rtx = get_memory_rtx (arg1, len);\n+    arg2_rtx = get_memory_rtx (arg2, len);\n     arg3_rtx = expand_expr (len, NULL_RTX, VOIDmode, 0);\n     insn = gen_cmpstrnsi (result, arg1_rtx, arg2_rtx, arg3_rtx,\n \t\t\t  GEN_INT (MIN (arg1_align, arg2_align)));"}, {"sha": "c29bcc020ac1b7f89b50a8f38a591e3e2c32f89e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435bb2a125f54edb565053b7c40afda765fe96bd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435bb2a125f54edb565053b7c40afda765fe96bd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=435bb2a125f54edb565053b7c40afda765fe96bd", "patch": "@@ -1,5 +1,8 @@\n 2005-08-26  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR rtl-optimization/23561\n+\t* gcc.c-torture/execute/20050826-1.c: New test.\n+\n \tPR rtl-opt/23560\n \t* gcc.c-torture/execute/20050826-2.c: New test.\n "}, {"sha": "bc7f94032cb35e704b432e9f2ff9cd8683febbcd", "filename": "gcc/testsuite/gcc.c-torture/execute/20050826-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435bb2a125f54edb565053b7c40afda765fe96bd/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050826-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435bb2a125f54edb565053b7c40afda765fe96bd/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050826-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050826-1.c?ref=435bb2a125f54edb565053b7c40afda765fe96bd", "patch": "@@ -0,0 +1,44 @@\n+/* PR rtl-optimization/23561 */\n+\n+struct A\n+{\n+  char a1[1];\n+  char a2[5];\n+  char a3[1];\n+  char a4[2048 - 7];\n+} a;\n+\n+typedef __SIZE_TYPE__ size_t;\n+extern void *memset (void *, int, size_t);\n+extern void *memcpy (void *, const void *, size_t);\n+extern int memcmp (const void *, const void *, size_t);\n+extern void abort (void);\n+\n+void\n+bar (struct A *x)\n+{\n+  size_t i;\n+  if (memcmp (x, \"\\1HELLO\\1\", sizeof \"\\1HELLO\\1\"))\n+    abort ();\n+  for (i = 0; i < sizeof (x->a4); i++)\n+    if (x->a4[i])\n+      abort ();\n+}\n+\n+int\n+foo (void)\n+{\n+  memset (&a, 0, sizeof (a));\n+  a.a1[0] = 1;\n+  memcpy (a.a2, \"HELLO\", sizeof \"HELLO\");\n+  a.a3[0] = 1;\n+  bar (&a);\n+  return 0;\n+}\n+\n+int\n+main (void)\n+{\n+  foo ();\n+  return 0;\n+}"}]}