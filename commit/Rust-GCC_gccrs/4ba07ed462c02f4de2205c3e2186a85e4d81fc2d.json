{"sha": "4ba07ed462c02f4de2205c3e2186a85e4d81fc2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJhMDdlZDQ2MmMwMmY0ZGUyMjA1YzNlMjE4NmE4NWU0ZDgxZmMyZA==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2017-04-20T15:41:59Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2017-04-20T15:41:59Z"}, "message": "PR libstdc++/68397 std::tr1::expint fails ... long double arguments.\n\n2017-04-20  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tPR libstdc++/68397 std::tr1::expint fails ... long double arguments.\n\t* include/tr1/exp_integral.tcc: Increase iteration limits.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/15_expint/\n\tpr68397.cc: New test.\n\t* testsuite/special_functions/14_expint/pr68397.cc: New test.\n\nFrom-SVN: r247027", "tree": {"sha": "2ce615d6767af9d638b710fbd175adef0707963d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ce615d6767af9d638b710fbd175adef0707963d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ba07ed462c02f4de2205c3e2186a85e4d81fc2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ba07ed462c02f4de2205c3e2186a85e4d81fc2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ba07ed462c02f4de2205c3e2186a85e4d81fc2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ba07ed462c02f4de2205c3e2186a85e4d81fc2d/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "067bc855b23fc7351db7030be0c881e3760b7e6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/067bc855b23fc7351db7030be0c881e3760b7e6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/067bc855b23fc7351db7030be0c881e3760b7e6f"}], "stats": {"total": 107, "additions": 104, "deletions": 3}, "files": [{"sha": "7fb199875f2764eea730214aa12fd5c0bca537cb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ba07ed462c02f4de2205c3e2186a85e4d81fc2d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ba07ed462c02f4de2205c3e2186a85e4d81fc2d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4ba07ed462c02f4de2205c3e2186a85e4d81fc2d", "patch": "@@ -1,3 +1,11 @@\n+2017-04-20  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tPR libstdc++/68397 std::tr1::expint fails ... long double arguments.\n+\t* include/tr1/exp_integral.tcc: Increase iteration limits.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/15_expint/\n+\tpr68397.cc: New test.\n+\t* testsuite/special_functions/14_expint/pr68397.cc: New test.\n+\n 2017-04-20  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/79862"}, {"sha": "8e6f55178e7b419919a9a1621971f6fb5ddb8a93", "filename": "libstdc++-v3/include/tr1/exp_integral.tcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ba07ed462c02f4de2205c3e2186a85e4d81fc2d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fexp_integral.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ba07ed462c02f4de2205c3e2186a85e4d81fc2d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fexp_integral.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fexp_integral.tcc?ref=4ba07ed462c02f4de2205c3e2186a85e4d81fc2d", "patch": "@@ -86,7 +86,7 @@ namespace tr1\n       _Tp __term = _Tp(1);\n       _Tp __esum = _Tp(0);\n       _Tp __osum = _Tp(0);\n-      const unsigned int __max_iter = 100;\n+      const unsigned int __max_iter = 1000;\n       for (unsigned int __i = 1; __i < __max_iter; ++__i)\n         {\n           __term *= - __x / __i;\n@@ -156,7 +156,7 @@ namespace tr1\n     _Tp\n     __expint_En_series(unsigned int __n, _Tp __x)\n     {\n-      const unsigned int __max_iter = 100;\n+      const unsigned int __max_iter = 1000;\n       const _Tp __eps = std::numeric_limits<_Tp>::epsilon();\n       const int __nm1 = __n - 1;\n       _Tp __ans = (__nm1 != 0\n@@ -202,7 +202,7 @@ namespace tr1\n     _Tp\n     __expint_En_cont_frac(unsigned int __n, _Tp __x)\n     {\n-      const unsigned int __max_iter = 100;\n+      const unsigned int __max_iter = 1000;\n       const _Tp __eps = std::numeric_limits<_Tp>::epsilon();\n       const _Tp __fp_min = std::numeric_limits<_Tp>::min();\n       const int __nm1 = __n - 1;"}, {"sha": "8da16d1fc69badc94a8a52e898088b5478d109f6", "filename": "libstdc++-v3/testsuite/special_functions/14_expint/pr68397.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ba07ed462c02f4de2205c3e2186a85e4d81fc2d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F14_expint%2Fpr68397.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ba07ed462c02f4de2205c3e2186a85e4d81fc2d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F14_expint%2Fpr68397.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F14_expint%2Fpr68397.cc?ref=4ba07ed462c02f4de2205c3e2186a85e4d81fc2d", "patch": "@@ -0,0 +1,47 @@\n+// { dg-do run { target c++11 } }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// PR libstdc++/68397 -  std::tr1::expint fails in __expint_En_cont_frac\n+// for some long double arguments due to low __max_iter value\n+\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+int\n+test01()\n+{\n+  // Answers from Wolfram Alpha.\n+  long double ans_ok = -0.10001943365331651406888645149537315243646135979573L;\n+  long double ans_bomb = -0.10777727809650077516264612749163100483995270163783L;\n+\n+  auto Ei_ok = std::expint(-1.500001L);\n+  auto diff_ok = Ei_ok - ans_ok;\n+  VERIFY(std::abs(diff_ok) < 1.0e-15);\n+\n+  auto Ei_bomb = std::expint(-1.450001L);\n+  auto diff_bomb = Ei_bomb - ans_bomb;\n+  VERIFY(std::abs(diff_bomb) < 1.0e-15);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "60d0b68bad614b2f8fabb9e069918cca604f9aea", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/15_expint/pr68397.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ba07ed462c02f4de2205c3e2186a85e4d81fc2d/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F15_expint%2Fpr68397.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ba07ed462c02f4de2205c3e2186a85e4d81fc2d/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F15_expint%2Fpr68397.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F15_expint%2Fpr68397.cc?ref=4ba07ed462c02f4de2205c3e2186a85e4d81fc2d", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// PR libstdc++/68397 -  std::tr1::expint fails in __expint_En_cont_frac\n+// for some long double arguments due to low __max_iter value\n+\n+#include <tr1/cmath>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  // Answers from Wolfram Alpha.\n+  long double ans_ok = -0.10001943365331651406888645149537315243646135979573L;\n+  long double ans_bomb = -0.10777727809650077516264612749163100483995270163783L;\n+\n+  long double Ei_ok = std::tr1::expint(-1.500001L);\n+  long double diff_ok = std::abs(Ei_ok - ans_ok);\n+  VERIFY(diff_ok < 1.0e-15L);\n+\n+  long double Ei_bomb = std::tr1::expint(-1.450001L);\n+  long double diff_bomb = std::abs(Ei_bomb - ans_bomb);\n+  VERIFY(diff_bomb < 1.0e-15L);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}]}