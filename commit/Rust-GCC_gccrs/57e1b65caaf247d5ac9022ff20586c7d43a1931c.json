{"sha": "57e1b65caaf247d5ac9022ff20586c7d43a1931c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdlMWI2NWNhYWYyNDdkNWFjOTAyMmZmMjA1ODZjN2Q0M2ExOTMxYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-02-22T12:53:15Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-02-22T12:53:15Z"}, "message": "(output_move_double): Let split_double extract any constant in op 1;\n\ntake size from op 0.\n\nFrom-SVN: r9029", "tree": {"sha": "c22de8ebefc9257403604d594da31bebe5323426", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c22de8ebefc9257403604d594da31bebe5323426"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57e1b65caaf247d5ac9022ff20586c7d43a1931c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57e1b65caaf247d5ac9022ff20586c7d43a1931c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57e1b65caaf247d5ac9022ff20586c7d43a1931c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57e1b65caaf247d5ac9022ff20586c7d43a1931c/comments", "author": null, "committer": null, "parents": [{"sha": "5a1a6efdc8d44a07d2099f63250740a90ac4356c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a1a6efdc8d44a07d2099f63250740a90ac4356c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a1a6efdc8d44a07d2099f63250740a90ac4356c"}], "stats": {"total": 17, "additions": 2, "deletions": 15}, "files": [{"sha": "2182a912aa7102170b56a660ef9e8f0b9fc61829", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e1b65caaf247d5ac9022ff20586c7d43a1931c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e1b65caaf247d5ac9022ff20586c7d43a1931c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=57e1b65caaf247d5ac9022ff20586c7d43a1931c", "patch": "@@ -419,7 +419,7 @@ output_move_double (operands)\n   rtx xops[2];\n   rtx addreg0 = 0, addreg1 = 0;\n   int dest_overlapped_low = 0;\n-  int size = GET_MODE_SIZE (GET_MODE (operands[1]));\n+  int size = GET_MODE_SIZE (GET_MODE (operands[0]));\n \n   middlehalf[0] = 0;\n   middlehalf[1] = 0;\n@@ -575,20 +575,7 @@ output_move_double (operands)\n       else if (optype1 == OFFSOP)\n \tlatehalf[1] = adj_offsettable_operand (operands[1], 4);\n       else if (optype1 == CNSTOP)\n-\t{\n-\t  if (GET_CODE (operands[1]) == CONST_DOUBLE)\n-\t    split_double (operands[1], &operands[1], &latehalf[1]);\n-\t  else if (CONSTANT_P (operands[1]))\n-\t    {\n-\t      /* ??? jrv: Can this really happen?  A DImode constant\n-\t\t that isn't a CONST_DOUBLE? */\n-\t      if (GET_CODE (operands[1]) == CONST_INT\n-\t\t  && INTVAL (operands[1]) < 0)\n-\t        latehalf[1] = constm1_rtx;\n-\t      else\n-\t        latehalf[1] = const0_rtx;\n-\t    }\n-\t}\n+\tsplit_double (operands[1], &operands[1], &latehalf[1]);\n       else\n \tlatehalf[1] = operands[1];\n     }"}]}