{"sha": "25efe0608f22e455b6da57bbdbba46b624ac8569", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVlZmUwNjA4ZjIyZTQ1NWI2ZGE1N2JiZGJiYTQ2YjYyNGFjODU2OQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-05-29T14:03:31Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-05-29T14:03:31Z"}, "message": "basic-block.h (struct control_flow_graph): Move last_label_uid field up.\n\n\t* basic-block.h (struct control_flow_graph): Move last_label_uid field up.\n\t* df.h (struct df_base_ref): Move regno field up.\n\t* dwarf2out.c (struct dw_fde_struct): Move funcdef_number field down.\n\t* expr.h (struct separate_ops): Move location field up.\n\t* optabs.h (struct optab_d): Move libcall_basename field down.\n\t* config/i386/i386.c (struct ix86_frame): Move red_zone_size up.\n\t* config/i386/i386.h (struct machine_function): Convert call_abi field\n\tinto a bitfield.  Move cfa field to the end of the structure.\n\nFrom-SVN: r160025", "tree": {"sha": "66258a8d6ddfef0c7613daac8284abdce1b85462", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66258a8d6ddfef0c7613daac8284abdce1b85462"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25efe0608f22e455b6da57bbdbba46b624ac8569", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25efe0608f22e455b6da57bbdbba46b624ac8569", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25efe0608f22e455b6da57bbdbba46b624ac8569", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25efe0608f22e455b6da57bbdbba46b624ac8569/comments", "author": null, "committer": null, "parents": [{"sha": "4cceafb849e1f8a341d4e1f67a6db1dcbec36452", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cceafb849e1f8a341d4e1f67a6db1dcbec36452", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cceafb849e1f8a341d4e1f67a6db1dcbec36452"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "d7f87721271fc3602bad9e7e7d2e988fb49f1010", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25efe0608f22e455b6da57bbdbba46b624ac8569/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25efe0608f22e455b6da57bbdbba46b624ac8569/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25efe0608f22e455b6da57bbdbba46b624ac8569", "patch": "@@ -1,3 +1,14 @@\n+2010-05-29  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* basic-block.h (struct control_flow_graph): Move last_label_uid field up.\n+\t* df.h (struct df_base_ref): Move regno field up.\n+\t* dwarf2out.c (struct dw_fde_struct): Move funcdef_number field down.\n+\t* expr.h (struct separate_ops): Move location field up.\n+\t* optabs.h (struct optab_d): Move libcall_basename field down.\n+\t* config/i386/i386.c (struct ix86_frame): Move red_zone_size up.\n+\t* config/i386/i386.h (struct machine_function): Convert call_abi field\n+\tinto a bitfield.  Move cfa field to the end of the structure.\n+\n 2010-05-29  Jan Hubicka  <jh@suse.cz>\n \n \t* varpool.c (varpool_get_node): Fix lookup."}, {"sha": "95ad4a90505cc2624de55c2edc5b00b6b089c5ba", "filename": "gcc/basic-block.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25efe0608f22e455b6da57bbdbba46b624ac8569/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25efe0608f22e455b6da57bbdbba46b624ac8569/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=25efe0608f22e455b6da57bbdbba46b624ac8569", "patch": "@@ -303,6 +303,9 @@ struct GTY(()) control_flow_graph {\n   /* The first free basic block number.  */\n   int x_last_basic_block;\n \n+  /* UIDs for LABEL_DECLs.  */\n+  int last_label_uid;\n+\n   /* Mapping of labels to their associated blocks.  At present\n      only used for the gimple CFG.  */\n   VEC(basic_block,gc) *x_label_to_block_map;\n@@ -318,9 +321,6 @@ struct GTY(()) control_flow_graph {\n   /* Maximal number of entities in the single jumptable.  Used to estimate\n      final flowgraph size.  */\n   int max_jumptable_ents;\n-\n-  /* UIDs for LABEL_DECLs.  */\n-  int last_label_uid;\n };\n \n /* Defines for accessing the fields of the CFG structure for function FN.  */"}, {"sha": "de291c70861c120f46828d8106ca1520d9651b8c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25efe0608f22e455b6da57bbdbba46b624ac8569/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25efe0608f22e455b6da57bbdbba46b624ac8569/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=25efe0608f22e455b6da57bbdbba46b624ac8569", "patch": "@@ -1852,10 +1852,10 @@ struct ix86_frame\n   int nregs;\n   int padding1;\n   int va_arg_size;\n+  int red_zone_size;\n   HOST_WIDE_INT frame;\n   int padding2;\n   int outgoing_arguments_size;\n-  int red_zone_size;\n \n   HOST_WIDE_INT to_allocate;\n   /* The offsets relative to ARG_POINTER.  */"}, {"sha": "005664c2049b4c1af62d1fad685dab1b5dee1ea7", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25efe0608f22e455b6da57bbdbba46b624ac8569/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25efe0608f22e455b6da57bbdbba46b624ac8569/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=25efe0608f22e455b6da57bbdbba46b624ac8569", "patch": "@@ -2374,12 +2374,9 @@ struct GTY(()) machine_function {\n      has been computed for.  */\n   int use_fast_prologue_epilogue_nregs;\n \n-  /* The CFA state at the end of the prologue.  */\n-  struct machine_cfa_state cfa;\n-\n   /* This value is used for amd64 targets and specifies the current abi\n      to be used. MS_ABI means ms abi. Otherwise SYSV_ABI means sysv abi.  */\n-  enum calling_abi call_abi;\n+  ENUM_BITFIELD(calling_abi) call_abi : 8;\n \n   /* Nonzero if the function accesses a previous frame.  */\n   BOOL_BITFIELD accesses_prev_frame : 1;\n@@ -2405,6 +2402,9 @@ struct GTY(()) machine_function {\n   /* If true, the current function has a STATIC_CHAIN is placed on the\n      stack below the return address.  */\n   BOOL_BITFIELD static_chain_on_stack : 1;\n+\n+  /* The CFA state at the end of the prologue.  */\n+  struct machine_cfa_state cfa;\n };\n #endif\n "}, {"sha": "afbe88a422533374309b6e0ea8374f6d176285d4", "filename": "gcc/df.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25efe0608f22e455b6da57bbdbba46b624ac8569/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25efe0608f22e455b6da57bbdbba46b624ac8569/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=25efe0608f22e455b6da57bbdbba46b624ac8569", "patch": "@@ -364,6 +364,7 @@ struct df_base_ref\n   ENUM_BITFIELD(df_ref_type) type : 8;\n \t\t\t\t/* Type of ref.  */\n   int flags : 16;\t\t/* Various df_ref_flags.  */\n+  unsigned int regno;\t\t/* The register number referenced.  */\n   rtx reg;\t\t\t/* The register referenced.  */\n   struct df_link *chain;\t/* Head of def-use, use-def.  */\n   /* Pointer to the insn info of the containing instruction.  FIXME!\n@@ -375,7 +376,6 @@ struct df_base_ref\n      themselves rather than using an external structure.  */\n   union df_ref_d *next_reg;     /* Next ref with same regno and type.  */\n   union df_ref_d *prev_reg;     /* Prev ref with same regno and type.  */\n-  unsigned int regno;\t\t/* The register number referenced.  */\n   /* Location in the ref table.  This is only valid after a call to\n      df_maybe_reorganize_[use,def]_refs which is an expensive operation.  */\n   int id;"}, {"sha": "b4c626ba0c051a8a0893cb0a7704a5f44bd550a0", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25efe0608f22e455b6da57bbdbba46b624ac8569/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25efe0608f22e455b6da57bbdbba46b624ac8569/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=25efe0608f22e455b6da57bbdbba46b624ac8569", "patch": "@@ -305,8 +305,8 @@ typedef struct GTY(()) dw_fde_struct {\n   const char *dw_fde_unlikely_section_end_label;\n   dw_cfi_ref dw_fde_cfi;\n   dw_cfi_ref dw_fde_switch_cfi; /* Last CFI before switching sections.  */\n-  unsigned funcdef_number;\n   HOST_WIDE_INT stack_realignment;\n+  unsigned funcdef_number;\n   /* Dynamic realign argument pointer register.  */\n   unsigned int drap_reg;\n   /* Virtual dynamic realign argument pointer register.  */"}, {"sha": "af230a617dafcb5f9ac029c5c3171e607a9bf702", "filename": "gcc/expr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25efe0608f22e455b6da57bbdbba46b624ac8569/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25efe0608f22e455b6da57bbdbba46b624ac8569/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=25efe0608f22e455b6da57bbdbba46b624ac8569", "patch": "@@ -273,9 +273,9 @@ do {\t\t\t\t\t\t\t\t\\\n typedef struct separate_ops\n {\n   enum tree_code code;\n+  location_t location;\n   tree type;\n   tree op0, op1, op2;\n-  location_t location;\n } *sepops;\n \f\n /* Functions from optabs.c, commonly used, and without need for the optabs"}, {"sha": "faa4330e5dd744cf39f44a1c08d66a79d292555d", "filename": "gcc/optabs.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25efe0608f22e455b6da57bbdbba46b624ac8569/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25efe0608f22e455b6da57bbdbba46b624ac8569/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=25efe0608f22e455b6da57bbdbba46b624ac8569", "patch": "@@ -46,8 +46,8 @@ struct optab_handlers\n struct optab_d\n {\n   enum rtx_code code;\n-  const char *libcall_basename;\n   char libcall_suffix;\n+  const char *libcall_basename;\n   void (*libcall_gen)(struct optab_d *, const char *name, char suffix,\n \t\t      enum machine_mode);\n   struct optab_handlers handlers[NUM_MACHINE_MODES];"}]}