{"sha": "9a0af7e3fb425ae2c0e044d044feb81ef493ce2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWEwYWY3ZTNmYjQyNWFlMmMwZTA0NGQwNDRmZWI4MWVmNDkzY2UyYw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-23T21:40:56Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-23T21:40:56Z"}, "message": "LWG 2921 remove packaged_task constructors taking allocators\n\n\t* doc/xml/manual/evolution.xml: Document LWG DR 2921 change.\n\t* doc/xml/manual/intro.xml: Likewise.\n\t* include/std/future (__create_task_state): Add default arguments\n\tto make providing an allocator optional.\n\t(packaged_task::packaged_task(F&&)): Call __create_task_state directly\n\tinstead of delegating to another constructor.\n\t(packaged_task::packaged_task(allocator_arg_t, const A&, ...)): Do not\n\tdefine allocator-extended constructors for C++17 and later.\n\t* testsuite/30_threads/packaged_task/cons/alloc.cc: Only run test for\n\tC++11 and C++14.\n\t* testsuite/30_threads/packaged_task/cons/alloc2.cc: Likewise.\n\t* testsuite/30_threads/packaged_task/cons/alloc_min.cc: Likewise.\n\t* testsuite/30_threads/packaged_task/uses_allocator.cc: Likewise.\n\nFrom-SVN: r271582", "tree": {"sha": "a3d1f6bdc1b3b0ce8e8352e0048a022a8bee7691", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3d1f6bdc1b3b0ce8e8352e0048a022a8bee7691"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a0af7e3fb425ae2c0e044d044feb81ef493ce2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a0af7e3fb425ae2c0e044d044feb81ef493ce2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a0af7e3fb425ae2c0e044d044feb81ef493ce2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a0af7e3fb425ae2c0e044d044feb81ef493ce2c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa992ce717568eb88b324d39429e52df04a42eb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa992ce717568eb88b324d39429e52df04a42eb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa992ce717568eb88b324d39429e52df04a42eb1"}], "stats": {"total": 87, "additions": 61, "deletions": 26}, "files": [{"sha": "e230f24ca13ada22843788a578365db4927b8804", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0af7e3fb425ae2c0e044d044feb81ef493ce2c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0af7e3fb425ae2c0e044d044feb81ef493ce2c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9a0af7e3fb425ae2c0e044d044feb81ef493ce2c", "patch": "@@ -1,3 +1,19 @@\n+2019-05-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/evolution.xml: Document LWG DR 2921 change.\n+\t* doc/xml/manual/intro.xml: Likewise.\n+\t* include/std/future (__create_task_state): Add default arguments\n+\tto make providing an allocator optional.\n+\t(packaged_task::packaged_task(F&&)): Call __create_task_state directly\n+\tinstead of delegating to another constructor.\n+\t(packaged_task::packaged_task(allocator_arg_t, const A&, ...)): Do not\n+\tdefine allocator-extended constructors for C++17 and later.\n+\t* testsuite/30_threads/packaged_task/cons/alloc.cc: Only run test for\n+\tC++11 and C++14.\n+\t* testsuite/30_threads/packaged_task/cons/alloc2.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/cons/alloc_min.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/uses_allocator.cc: Likewise.\n+\n 2019-05-23  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* testsuite/26_numerics/random/poisson_distribution/operators/values.cc:"}, {"sha": "1bd7bb1bb9f1e2b8e08ac644c4c28db2349fe7ad", "filename": "libstdc++-v3/doc/xml/manual/evolution.xml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0af7e3fb425ae2c0e044d044feb81ef493ce2c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fevolution.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0af7e3fb425ae2c0e044d044feb81ef493ce2c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fevolution.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fevolution.xml?ref=9a0af7e3fb425ae2c0e044d044feb81ef493ce2c", "patch": "@@ -955,6 +955,11 @@ now defaults to zero.\n </itemizedlist>\n </para>\n \n+<para>\n+  The <classname>std::packaged_task</classname> constructors taking\n+  an allocator argument are only defined for C++11 and C++14.\n+</para>\n+\n </section>\n \n </section>"}, {"sha": "a2162562b549dbe117da7980694e44800b32d247", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0af7e3fb425ae2c0e044d044feb81ef493ce2c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0af7e3fb425ae2c0e044d044feb81ef493ce2c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=9a0af7e3fb425ae2c0e044d044feb81ef493ce2c", "patch": "@@ -1221,6 +1221,14 @@ requirements of the license of GCC.\n     <listitem><para>Use rvalues for deleters.\n     </para></listitem></varlistentry>\n \n+    <varlistentry xml:id=\"manual.bugs.dr2921\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2921\">2921</link>:\n+       <emphasis><code>packaged_task</code> and type-erased allocators\n+       </emphasis>\n+    </term>\n+    <listitem><para>For C++17 mode, remove the constructors taking\n+      an allocator argument.\n+    </para></listitem></varlistentry>\n+\n     <varlistentry xml:id=\"manual.bugs.dr2942\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2942\">2942</link>:\n        <emphasis>LWG 2873's resolution missed\n          <code>weak_ptr::owner_before</code>"}, {"sha": "6c276694df3051f3b22c09fa3921ce25a9719842", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 28, "deletions": 21, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0af7e3fb425ae2c0e044d044feb81ef493ce2c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0af7e3fb425ae2c0e044d044feb81ef493ce2c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=9a0af7e3fb425ae2c0e044d044feb81ef493ce2c", "patch": "@@ -1447,9 +1447,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       } _M_impl;\n     };\n \n-  template<typename _Signature, typename _Fn, typename _Alloc>\n+  template<typename _Signature, typename _Fn,\n+\t   typename _Alloc = std::allocator<int>>\n     static shared_ptr<__future_base::_Task_state_base<_Signature>>\n-    __create_task_state(_Fn&& __fn, const _Alloc& __a)\n+    __create_task_state(_Fn&& __fn, const _Alloc& __a = _Alloc())\n     {\n       typedef typename decay<_Fn>::type _Fn2;\n       typedef __future_base::_Task_state<_Fn2, _Alloc, _Signature> _State;\n@@ -1481,28 +1482,40 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Construction and destruction\n       packaged_task() noexcept { }\n \n-      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-      // 2095.  missing constructors needed for uses-allocator construction\n-      template<typename _Allocator>\n-\tpackaged_task(allocator_arg_t, const _Allocator& __a) noexcept\n-\t{ }\n-\n       template<typename _Fn, typename = __not_same<_Fn>>\n \texplicit\n \tpackaged_task(_Fn&& __fn)\n-\t: packaged_task(allocator_arg, std::allocator<int>(),\n-\t\t\tstd::forward<_Fn>(__fn))\n+\t: _M_state(\n+\t    __create_task_state<_Res(_ArgTypes...)>(std::forward<_Fn>(__fn)))\n \t{ }\n \n+#if __cplusplus < 201703L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-      // 2097.  packaged_task constructors should be constrained\n+      // 2097. packaged_task constructors should be constrained\n       // 2407. [this constructor should not be] explicit\n+      // 2921. packaged_task and type-erased allocators\n       template<typename _Fn, typename _Alloc, typename = __not_same<_Fn>>\n \tpackaged_task(allocator_arg_t, const _Alloc& __a, _Fn&& __fn)\n \t: _M_state(__create_task_state<_Res(_ArgTypes...)>(\n \t\t   std::forward<_Fn>(__fn), __a))\n \t{ }\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2095.  missing constructors needed for uses-allocator construction\n+      template<typename _Allocator>\n+\tpackaged_task(allocator_arg_t, const _Allocator& __a) noexcept\n+\t{ }\n+\n+      template<typename _Allocator>\n+\tpackaged_task(allocator_arg_t, const _Allocator&,\n+\t\t      const packaged_task&) = delete;\n+\n+      template<typename _Allocator>\n+\tpackaged_task(allocator_arg_t, const _Allocator&,\n+\t\t      packaged_task&& __other) noexcept\n+\t{ this->swap(__other); }\n+#endif\n+\n       ~packaged_task()\n       {\n         if (static_cast<bool>(_M_state) && !_M_state.unique())\n@@ -1513,19 +1526,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       packaged_task(const packaged_task&) = delete;\n       packaged_task& operator=(const packaged_task&) = delete;\n \n-      template<typename _Allocator>\n-\tpackaged_task(allocator_arg_t, const _Allocator&,\n-\t\t      const packaged_task&) = delete;\n-\n       // Move support\n       packaged_task(packaged_task&& __other) noexcept\n       { this->swap(__other); }\n \n-      template<typename _Allocator>\n-\tpackaged_task(allocator_arg_t, const _Allocator&,\n-\t\t      packaged_task&& __other) noexcept\n-\t{ this->swap(__other); }\n-\n       packaged_task& operator=(packaged_task&& __other) noexcept\n       {\n \tpackaged_task(std::move(__other)).swap(*this);\n@@ -1577,10 +1581,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t packaged_task<_Res(_ArgTypes...)>& __y) noexcept\n     { __x.swap(__y); }\n \n+#if __cplusplus < 201703L\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 2976. Dangling uses_allocator specialization for packaged_task\n   template<typename _Res, typename _Alloc>\n     struct uses_allocator<packaged_task<_Res>, _Alloc>\n     : public true_type { };\n-\n+#endif\n \n   // Shared state created by std::async().\n   // Holds a deferred function and storage for its result."}, {"sha": "815ae0d25be6d771e50ffd75011bf0ec246cff58", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/cons/alloc.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0af7e3fb425ae2c0e044d044feb81ef493ce2c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Falloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0af7e3fb425ae2c0e044d044feb81ef493ce2c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Falloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Falloc.cc?ref=9a0af7e3fb425ae2c0e044d044feb81ef493ce2c", "patch": "@@ -1,6 +1,5 @@\n-// { dg-do run }\n+// { dg-do run { target { c++11_only || c++14_only } } }\n // { dg-options \"-pthread\"  }\n-// { dg-require-effective-target c++11 }\n // { dg-require-effective-target pthread }\n // { dg-require-gthreads \"\" }\n "}, {"sha": "06b60e546b2e611e325c1f0715b32dd943d6148b", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/cons/alloc2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0af7e3fb425ae2c0e044d044feb81ef493ce2c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Falloc2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0af7e3fb425ae2c0e044d044feb81ef493ce2c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Falloc2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Falloc2.cc?ref=9a0af7e3fb425ae2c0e044d044feb81ef493ce2c", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++11 } }\n+// { dg-do compile { target { c++11_only || c++14_only } } }\n // { dg-require-gthreads \"\" }\n \n // Copyright (C) 2011-2019 Free Software Foundation, Inc."}, {"sha": "5ca0ba9ddb7c6a404c239045bc4b02691a564d6c", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/cons/alloc_min.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0af7e3fb425ae2c0e044d044feb81ef493ce2c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Falloc_min.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0af7e3fb425ae2c0e044d044feb81ef493ce2c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Falloc_min.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Falloc_min.cc?ref=9a0af7e3fb425ae2c0e044d044feb81ef493ce2c", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++11 } }\n+// { dg-do compile { target { c++11_only || c++14_only } } }\n // { dg-require-gthreads \"\" }\n \n // Copyright (C) 2011-2019 Free Software Foundation, Inc."}, {"sha": "5b1f244c960f1fe775d9e22dc5f21372ce3ac33a", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/uses_allocator.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0af7e3fb425ae2c0e044d044feb81ef493ce2c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fuses_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0af7e3fb425ae2c0e044d044feb81ef493ce2c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fuses_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fuses_allocator.cc?ref=9a0af7e3fb425ae2c0e044d044feb81ef493ce2c", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++11 } }\n+// { dg-do compile { target { c++11_only || c++14_only } } }\n // { dg-require-gthreads \"\" }\n \n // Copyright (C) 2011-2019 Free Software Foundation, Inc."}]}