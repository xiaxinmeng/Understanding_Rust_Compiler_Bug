{"sha": "1f69e63cfcc664fd7382dd877846007652a01dcf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY2OWU2M2NmY2M2NjRmZDczODJkZDg3Nzg0NjAwNzY1MmEwMWRjZg==", "commit": {"author": {"name": "Ed Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2021-02-02T21:11:57Z"}, "committer": {"name": "Ed Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2021-02-03T17:12:31Z"}, "message": "c++: Implement C++23 P0330 - Literal Suffixes for ptrdiff_t and size_t.\n\nInteger literal suffixes for signed size ('z') and unsigned size\n(some permutation od 'zu') are provided as a language addition.\n\ngcc/c-family/ChangeLog:\n\n\t* c-cppbuiltin.c (c_cpp_builtins): Define __cpp_size_t_suffix.\n\t* c-lex.c (interpret_integer): Set node type for size literal.\n\nlibcpp/ChangeLog:\n\n\t* expr.c (interpret_int_suffix): Detect 'z' integer suffix.\n\t(cpp_classify_number): Compat warning for use of 'z' suffix.\n\t* include/cpplib.h (struct cpp_options): New flag.\n\t(enum cpp_warning_reason): New flag.\n\t(CPP_N_USERDEF): Comment C++0x -> C++11.\n\t(CPP_N_SIZE_T): New flag for cpp_classify_number.\n\t* init.c (cpp_set_lang): Initialize new flag.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/udlit-shadow-neg.C: Test for 'z' and 'zu' shadowing.\n\t* g++.dg/cpp23/feat-cxx2b.C: New test.\n\t* g++.dg/cpp23/size_t-literals.C: New test.\n\t* g++.dg/warn/Wsize_t-literals.C: New test.", "tree": {"sha": "044c232c236da131484baffa67d63b1cab0eac55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/044c232c236da131484baffa67d63b1cab0eac55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f69e63cfcc664fd7382dd877846007652a01dcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f69e63cfcc664fd7382dd877846007652a01dcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f69e63cfcc664fd7382dd877846007652a01dcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f69e63cfcc664fd7382dd877846007652a01dcf/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "530203d6e3244c25eda4124f0fa5756ca9a5683e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/530203d6e3244c25eda4124f0fa5756ca9a5683e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/530203d6e3244c25eda4124f0fa5756ca9a5683e"}], "stats": {"total": 731, "additions": 701, "deletions": 30}, "files": [{"sha": "48dec21d4b41662ac46cb7a0956822fed96fe677", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f69e63cfcc664fd7382dd877846007652a01dcf/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f69e63cfcc664fd7382dd877846007652a01dcf/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=1f69e63cfcc664fd7382dd877846007652a01dcf", "patch": "@@ -1025,6 +1025,11 @@ c_cpp_builtins (cpp_reader *pfile)\n \t  cpp_define (pfile, \"__cpp_aggregate_paren_init=201902L\");\n \t  cpp_define (pfile, \"__cpp_using_enum=201907L\");\n \t}\n+      if (cxx_dialect > cxx20)\n+\t{\n+\t  /* Set feature test macros for C++23.  */\n+\t  cpp_define (pfile, \"__cpp_size_t_suffix=202006L\");\n+\t}\n       if (flag_concepts)\n         {\n \t  if (cxx_dialect >= cxx20)"}, {"sha": "6374b72ed2de7195fd6bd908abb9fa8f32656ebe", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f69e63cfcc664fd7382dd877846007652a01dcf/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f69e63cfcc664fd7382dd877846007652a01dcf/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=1f69e63cfcc664fd7382dd877846007652a01dcf", "patch": "@@ -834,6 +834,14 @@ interpret_integer (const cpp_token *token, unsigned int flags,\n     type = ((flags & CPP_N_UNSIGNED)\n \t    ? widest_unsigned_literal_type_node\n \t    : widest_integer_literal_type_node);\n+  else if (flags & CPP_N_SIZE_T)\n+    {\n+      /* itk refers to fundamental types not aliased size types.  */\n+      if (flags & CPP_N_UNSIGNED)\n+\ttype = size_type_node;\n+      else\n+\ttype = signed_size_type_node;\n+    }\n   else\n     {\n       type = integer_types[itk];"}, {"sha": "a30ec0f4f7eb76e04a6694514ef7ec3e66d85d6d", "filename": "gcc/testsuite/g++.dg/cpp0x/udlit-shadow-neg.C", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f69e63cfcc664fd7382dd877846007652a01dcf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-shadow-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f69e63cfcc664fd7382dd877846007652a01dcf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-shadow-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-shadow-neg.C?ref=1f69e63cfcc664fd7382dd877846007652a01dcf", "patch": "@@ -17,6 +17,30 @@ unsigned long long int\n operator\"\" ull(unsigned long long int k)  // { dg-warning \"integer suffix|shadowed by implementation\" }\n { return k; }\n \n+unsigned long long int\n+operator\"\" z(unsigned long long int k)  // { dg-warning \"integer suffix|shadowed by implementation\" }\n+{ return k; }\n+\n+unsigned long long int\n+operator\"\" uz(unsigned long long int k)  // { dg-warning \"integer suffix|shadowed by implementation\" }\n+{ return k; }\n+\n+unsigned long long int\n+operator\"\" zu(unsigned long long int k)  // { dg-warning \"integer suffix|shadowed by implementation\" }\n+{ return k; }\n+\n+unsigned long long int\n+operator\"\" Z(unsigned long long int k)  // { dg-warning \"integer suffix|shadowed by implementation\" }\n+{ return k; }\n+\n+unsigned long long int\n+operator\"\" UZ(unsigned long long int k)  // { dg-warning \"integer suffix|shadowed by implementation\" }\n+{ return k; }\n+\n+unsigned long long int\n+operator\"\" ZU(unsigned long long int k)  // { dg-warning \"integer suffix|shadowed by implementation\" }\n+{ return k; }\n+\n //  Namespaces are no hiding place.\n namespace Long\n {\n@@ -37,13 +61,50 @@ unsigned long long int\n operator\"\" ull(unsigned long long int k)  // { dg-warning \"integer suffix|shadowed by implementation\" }\n { return k; }\n \n+unsigned long long int\n+operator\"\" z(unsigned long long int k)  // { dg-warning \"integer suffix|shadowed by implementation\" }\n+{ return k; }\n+\n+unsigned long long int\n+operator\"\" uz(unsigned long long int k)  // { dg-warning \"integer suffix|shadowed by implementation\" }\n+{ return k; }\n+\n+unsigned long long int\n+operator\"\" zu(unsigned long long int k)  // { dg-warning \"integer suffix|shadowed by implementation\" }\n+{ return k; }\n+\n+unsigned long long int\n+operator\"\" Z(unsigned long long int k)  // { dg-warning \"integer suffix|shadowed by implementation\" }\n+{ return k; }\n+\n+unsigned long long int\n+operator\"\" UZ(unsigned long long int k)  // { dg-warning \"integer suffix|shadowed by implementation\" }\n+{ return k; }\n+\n+unsigned long long int\n+operator\"\" ZU(unsigned long long int k)  // { dg-warning \"integer suffix|shadowed by implementation\" }\n+{ return k; }\n+\n }\n \n // { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"reserved\" { target *-*-* } 5 }\n // { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"reserved\" { target *-*-* } 9 }\n // { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"reserved\" { target *-*-* } 13 }\n // { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"reserved\" { target *-*-* } 17 }\n+// { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"reserved\" { target *-*-* } 21 }\n // { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"reserved\" { target *-*-* } 25 }\n // { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"reserved\" { target *-*-* } 29 }\n // { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"reserved\" { target *-*-* } 33 }\n // { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"reserved\" { target *-*-* } 37 }\n+// { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"reserved\" { target *-*-* } 41 }\n+\n+// { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"reserved\" { target *-*-* } 49 }\n+// { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"reserved\" { target *-*-* } 53 }\n+// { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"reserved\" { target *-*-* } 57 }\n+// { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"reserved\" { target *-*-* } 61 }\n+// { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"reserved\" { target *-*-* } 65 }\n+// { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"reserved\" { target *-*-* } 69 }\n+// { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"reserved\" { target *-*-* } 73 }\n+// { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"reserved\" { target *-*-* } 77 }\n+// { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"reserved\" { target *-*-* } 81 }\n+// { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"reserved\" { target *-*-* } 85 }"}, {"sha": "94e08a4896ce042d48eb166f7da0aa6cdb727bb9", "filename": "gcc/testsuite/g++.dg/cpp23/feat-cxx2b.C", "status": "added", "additions": 549, "deletions": 0, "changes": 549, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f69e63cfcc664fd7382dd877846007652a01dcf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Ffeat-cxx2b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f69e63cfcc664fd7382dd877846007652a01dcf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Ffeat-cxx2b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Ffeat-cxx2b.C?ref=1f69e63cfcc664fd7382dd877846007652a01dcf", "patch": "@@ -0,0 +1,549 @@\n+// { dg-options \"-std=c++2b -I${srcdir}/g++.dg/cpp1y -I${srcdir}/g++.dg/cpp1y/testinc\" }\n+\n+//  C++98 features:\n+\n+#ifndef __cpp_rtti\n+#  error \"__cpp_rtti\"\n+#elif  __cpp_rtti != 199711\n+#  error \"__cpp_rtti != 199711\"\n+#endif\n+\n+#ifndef __cpp_exceptions\n+#  error \"__cpp_exceptions\"\n+#elif  __cpp_exceptions != 199711\n+#  error \"__cpp_exceptions != 199711\"\n+#endif\n+\n+//  C++11 features:\n+\n+#ifndef __cpp_raw_strings\n+#  error \"__cpp_raw_strings\"\n+#elif __cpp_raw_strings != 200710\n+#  error \"__cpp_raw_strings != 200710\"\n+#endif\n+\n+#ifndef __cpp_unicode_literals\n+#  error \"__cpp_unicode_literals\"\n+#elif __cpp_unicode_literals != 200710\n+#  error \"__cpp_unicode_literals != 200710\"\n+#endif\n+\n+#ifndef __cpp_user_defined_literals\n+#  error \"__cpp_user_defined_literals\"\n+#elif __cpp_user_defined_literals != 200809\n+#  error \"__cpp_user_defined_literals != 200809\"\n+#endif\n+\n+#ifndef __cpp_lambdas\n+#  error \"__cpp_lambdas\"\n+#elif __cpp_lambdas != 200907\n+#  error \"__cpp_lambdas != 200907\"\n+#endif\n+\n+#ifndef __cpp_range_based_for\n+#  error \"__cpp_range_based_for\"\n+#elif __cpp_range_based_for != 201603\n+#  error \"__cpp_range_based_for != 201603\"\n+#endif\n+\n+#ifndef __cpp_decltype\n+#  error \"__cpp_decltype\"\n+#elif __cpp_decltype != 200707\n+#  error \"__cpp_decltype != 200707\"\n+#endif\n+\n+#ifndef __cpp_attributes\n+#  error \"__cpp_attributes\"\n+#elif __cpp_attributes != 200809\n+#  error \"__cpp_attributes != 200809\"\n+#endif\n+\n+#ifndef __cpp_rvalue_references\n+#  error \"__cpp_rvalue_references\"\n+#elif __cpp_rvalue_references != 200610\n+#  error \"__cpp_rvalue_references != 200610\"\n+#endif\n+\n+#ifndef __cpp_variadic_templates\n+#  error \"__cpp_variadic_templates\"\n+#elif __cpp_variadic_templates != 200704\n+#  error \"__cpp_variadic_templates != 200704\"\n+#endif\n+\n+#ifndef __cpp_initializer_lists\n+#  error \"__cpp_initializer_lists\"\n+#elif __cpp_initializer_lists != 200806\n+#  error \"__cpp_initializer_lists != 200806\"\n+#endif\n+\n+#ifndef __cpp_delegating_constructors\n+#  error \"__cpp_delegating_constructors\"\n+#elif __cpp_delegating_constructors != 200604\n+#  error \"__cpp_delegating_constructors != 200604\"\n+#endif\n+\n+#ifndef __cpp_nsdmi\n+#  error \"__cpp_nsdmi\"\n+#elif __cpp_nsdmi != 200809\n+#  error \"__cpp_nsdmi != 200809\"\n+#endif\n+\n+#ifndef __cpp_inheriting_constructors\n+#  error \"__cpp_inheriting_constructors\"\n+#elif  __cpp_inheriting_constructors!= 201511\n+#  error \"__cpp_inheriting_constructors != 201511\"\n+#endif\n+\n+#ifndef __cpp_ref_qualifiers\n+#  error \"__cpp_ref_qualifiers\"\n+#elif __cpp_ref_qualifiers != 200710\n+#  error \"__cpp_ref_qualifiers != 200710\"\n+#endif\n+\n+#ifndef __cpp_alias_templates\n+#  error \"__cpp_alias_templates\"\n+#elif __cpp_alias_templates != 200704\n+#  error \"__cpp_alias_templates != 200704\"\n+#endif\n+\n+#ifndef __cpp_threadsafe_static_init\n+#  error \"__cpp_threadsafe_static_init\"\n+#elif __cpp_threadsafe_static_init != 200806\n+#  error \"__cpp_threadsafe_static_init != 200806\"\n+#endif\n+\n+//  C++14 features:\n+\n+#ifndef __cpp_binary_literals\n+#  error \"__cpp_binary_literals\"\n+#elif __cpp_binary_literals != 201304\n+#  error \"__cpp_binary_literals != 201304\"\n+#endif\n+\n+#ifndef __cpp_init_captures\n+#  error \"__cpp_init_captures\"\n+#elif __cpp_init_captures != 201803\n+#  error \"__cpp_init_captures != 201803\"\n+#endif\n+\n+#ifndef __cpp_generic_lambdas\n+#  error \"__cpp_generic_lambdas\"\n+#elif __cpp_generic_lambdas != 201707\n+#  error \"__cpp_generic_lambdas != 201707\"\n+#endif\n+\n+#ifndef __cpp_constexpr\n+#  error \"__cpp_constexpr\"\n+#elif __cpp_constexpr != 201907\n+#  error \"__cpp_constexpr != 201907\"\n+#endif\n+\n+#ifndef __cpp_decltype_auto\n+#  error \"__cpp_decltype_auto\"\n+#elif __cpp_decltype_auto != 201304\n+#  error \"__cpp_decltype_auto != 201304\"\n+#endif\n+\n+#ifndef __cpp_return_type_deduction\n+#  error \"__cpp_return_type_deduction\"\n+#elif __cpp_return_type_deduction != 201304\n+#  error \"__cpp_return_type_deduction != 201304\"\n+#endif\n+\n+#ifndef __cpp_aggregate_nsdmi\n+#  error \"__cpp_aggregate_nsdmi\"\n+#elif __cpp_aggregate_nsdmi != 201304\n+#  error \"__cpp_aggregate_nsdmi != 201304\"\n+#endif\n+\n+#ifndef __cpp_variable_templates\n+#  error \"__cpp_variable_templates\"\n+#elif __cpp_variable_templates != 201304\n+#  error \"__cpp_variable_templates != 201304\"\n+#endif\n+\n+#ifndef __cpp_digit_separators\n+#  error \"__cpp_digit_separators\"\n+#elif __cpp_digit_separators != 201309\n+#  error \"__cpp_digit_separators != 201309\"\n+#endif\n+\n+#ifndef __cpp_sized_deallocation\n+#  error \"__cpp_sized_deallocation\"\n+#elif __cpp_sized_deallocation != 201309\n+#  error \"__cpp_sized_deallocation != 201309\"\n+#endif\n+\n+//  GNU VLA support:\n+\n+#ifndef __cpp_runtime_arrays\n+#  error \"__cpp_runtime_arrays\"\n+#elif __cpp_runtime_arrays != 198712\n+#  error \"__cpp_runtime_arrays != 198712\"\n+#endif\n+\n+//  C++11 attributes:\n+\n+#ifdef __has_cpp_attribute\n+#  if ! __has_cpp_attribute(noreturn)\n+#    error \"__has_cpp_attribute(noreturn)\"\n+#  elif __has_cpp_attribute(noreturn) != 200809\n+#    error \"__has_cpp_attribute(noreturn) != 200809\"\n+#  endif\n+#else\n+#  error \"__has_cpp_attribute\"\n+#endif\n+\n+//  Attribute carries_dependency not in yet.\n+//#ifdef __has_cpp_attribute\n+//#  if ! __has_cpp_attribute(carries_dependency)\n+//#    error \"__has_cpp_attribute(carries_dependency)\"\n+//#  elif __has_cpp_attribute(carries_dependency) != 200809\n+//#    error \"__has_cpp_attribute(carries_dependency) != 200809\"\n+//#  endif\n+//#else\n+//#  error \"__has_cpp_attribute\"\n+//#endif\n+\n+//  C++14 attributes:\n+\n+#ifdef __has_cpp_attribute\n+#  if ! __has_cpp_attribute(deprecated)\n+#    error \"__has_cpp_attribute(deprecated)\"\n+#  elif __has_cpp_attribute(deprecated) != 201309\n+#    error \"__has_cpp_attribute(deprecated) != 201309\"\n+#  endif\n+#else\n+#  error \"__has_cpp_attribute\"\n+#endif\n+\n+//  Include checks:\n+\n+//  Check for __has_include macro.\n+#ifndef __has_include\n+#  error \"__has_include\"\n+#endif\n+\n+//  Try known bracket header (use operator).\n+#if __has_include (<complex>)\n+#else\n+#  error \"<complex>\"\n+#endif\n+\n+//  Define and use a macro to invoke the operator.\n+#define sluggo(TXT) __has_include(TXT)\n+\n+#if sluggo(<complex>)\n+#else\n+#  error \"<complex>\"\n+#endif\n+\n+#if ! sluggo(<complex>)\n+#  error \"<complex>\"\n+#else\n+#endif\n+\n+//  Quoted complex.h should find at least the bracket version.\n+#if __has_include(\"complex.h\")\n+#else\n+#  error \"complex.h\"\n+#endif\n+\n+//  Try known local quote header.\n+#if __has_include(\"complex_literals.h\")\n+#else\n+#  error \"\\\"complex_literals.h\\\"\"\n+#endif\n+\n+//  Try nonexistent bracket header.\n+#if __has_include(<stuff>)\n+#  error \"<stuff>\"\n+#else\n+#endif\n+\n+//  Try nonexistent quote header.\n+#if __has_include(\"phlegm\")\n+#  error \"\\\"phlegm\\\"\"\n+#else\n+#endif\n+\n+//  Test __has_include_next.\n+#if __has_include(\"phoobhar.h\")\n+#  include \"phoobhar.h\"\n+#else\n+#  error \"__has_include(\\\"phoobhar.h\\\")\"\n+#endif\n+\n+//  Try a macro.\n+#define COMPLEX_INC \"complex.h\"\n+#if __has_include(COMPLEX_INC)\n+#else\n+#  error COMPLEX_INC\n+#endif\n+\n+//  Realistic use of __has_include.\n+#if __has_include(<array>)\n+#  define STD_ARRAY 1\n+#  include <array>\n+  template<typename _Tp, std::size_t _Num>\n+    using array = std::array<_Tp, _Num>;\n+#elif __has_include(<tr1/array>)\n+#  define TR1_ARRAY 1\n+#  include <tr1/array>\n+  template<typename _Tp, std::size_t _Num>\n+    typedef std::tr1::array<_Tp, _Num> array;\n+#endif\n+\n+// C++17 features:\n+\n+#ifndef __cpp_unicode_characters\n+#  error \"__cpp_unicode_characters\"\n+#elif __cpp_unicode_characters != 201411\n+#  error \"__cpp_unicode_characters != 201411\"\n+#endif\n+\n+#ifndef __cpp_static_assert\n+#  error \"__cpp_static_assert\"\n+#elif __cpp_static_assert != 201411\n+#  error \"__cpp_static_assert != 201411\"\n+#endif\n+\n+#ifndef __cpp_namespace_attributes\n+#  error \"__cpp_namespace_attributes\"\n+#elif __cpp_namespace_attributes != 201411\n+#  error \"__cpp_namespace_attributes != 201411\"\n+#endif\n+\n+#ifndef __cpp_enumerator_attributes\n+#  error \"__cpp_enumerator_attributes\"\n+#elif __cpp_enumerator_attributes != 201411\n+#  error \"__cpp_enumerator_attributes != 201411\"\n+#endif\n+\n+#ifndef __cpp_nested_namespace_definitions\n+#  error \"__cpp_nested_namespace_definitions\"\n+#elif __cpp_nested_namespace_definitions != 201411\n+#  error \"__cpp_nested_namespace_definitions != 201411\"\n+#endif\n+\n+#ifndef __cpp_fold_expressions\n+#  error \"__cpp_fold_expressions\"\n+#elif __cpp_fold_expressions != 201603\n+#  error \"__cpp_fold_expressions != 201603\"\n+#endif\n+\n+#ifndef __cpp_nontype_template_args\n+#  error \"__cpp_nontype_template_args\"\n+#elif __cpp_nontype_template_args != 201911\n+#  error \"__cpp_nontype_template_args != 201911\"\n+#endif\n+\n+#ifndef __cpp_hex_float\n+#  error \"__cpp_hex_float\"\n+#elif __cpp_hex_float != 201603\n+#  error \"__cpp_hex_float != 201603\"\n+#endif\n+\n+#ifndef __cpp_aggregate_bases\n+#  error \"__cpp_aggregate_bases\"\n+#elif __cpp_aggregate_bases != 201603\n+#  error \"__cpp_aggregate_bases != 201603\"\n+#endif\n+\n+#ifndef __cpp_deduction_guides\n+#  error \"__cpp_deduction_guides\"\n+#elif __cpp_deduction_guides != 201907\n+#  error \"__cpp_deduction_guides != 201907\"\n+#endif\n+\n+#ifndef __cpp_if_constexpr\n+#  error \"__cpp_if_constexpr\"\n+#elif __cpp_if_constexpr != 201606\n+#  error \"__cpp_if_constexpr != 201606\"\n+#endif\n+\n+#ifndef __cpp_aligned_new\n+#  error \"__cpp_aligned_new\"\n+#elif __cpp_aligned_new != 201606\n+#  error \"__cpp_aligned_new != 201606\"\n+#endif\n+\n+#ifndef __cpp_template_auto\n+#  error \"__cpp_template_auto\"\n+#elif __cpp_template_auto != 201606\n+#  error \"__cpp_template_auto != 201606\"\n+#endif\n+\n+#ifndef __cpp_inline_variables\n+#  error \"__cpp_inline_variables\"\n+#elif __cpp_inline_variables != 201606\n+#  error \"__cpp_inline_variables != 201606\"\n+#endif\n+\n+#ifndef __cpp_capture_star_this\n+#  error \"__cpp_capture_star_this\"\n+#elif __cpp_capture_star_this != 201603\n+#  error \"__cpp_capture_star_this != 201603\"\n+#endif\n+\n+#ifndef __cpp_noexcept_function_type\n+#  error \"__cpp_noexcept_function_type\"\n+#elif __cpp_noexcept_function_type != 201510\n+#  error \"__cpp_noexcept_function_type != 201510\"\n+#endif\n+\n+#ifndef __cpp_structured_bindings\n+#  error \"__cpp_structured_bindings\"\n+#elif __cpp_structured_bindings != 201606\n+#  error \"__cpp_structured_bindings != 201606\"\n+#endif\n+\n+#ifndef __cpp_template_template_args\n+#  error \"__cpp_template_template_args\"\n+#elif __cpp_template_template_args != 201611\n+#  error \"__cpp_template_template_args != 201611\"\n+#endif\n+\n+#ifndef __cpp_variadic_using\n+#  error \"__cpp_variadic_using\"\n+#elif __cpp_variadic_using != 201611\n+#  error \"__cpp_variadic_using != 201611\"\n+#endif\n+\n+#ifndef __cpp_guaranteed_copy_elision\n+#  error \"__cpp_guaranteed_copy_elision\"\n+#elif __cpp_guaranteed_copy_elision != 201606\n+#  error \"__cpp_guaranteed_copy_elision != 201606\"\n+#endif\n+\n+#ifndef __cpp_nontype_template_parameter_auto\n+#  error \"__cpp_nontype_template_parameter_auto\"\n+#elif __cpp_nontype_template_parameter_auto != 201606\n+#  error \"__cpp_nontype_template_parameter_auto != 201606\"\n+#endif\n+\n+// C++20 features\n+\n+#ifndef __cpp_conditional_explicit\n+#  error \"__cpp_conditional_explicit\"\n+#elif __cpp_conditional_explicit != 201806\n+#  error \"__cpp_conditional_explicit != 201806\"\n+#endif\n+\n+#ifndef __cpp_nontype_template_parameter_class\n+#  error \"__cpp_nontype_template_parameter_class\"\n+#elif __cpp_nontype_template_parameter_class != 201806\n+#  error \"__cpp_nontype_template_parameter_class != 201806\"\n+#endif\n+\n+#ifndef __cpp_impl_destroying_delete\n+#  error \"__cpp_impl_destroying_delete\"\n+#elif __cpp_impl_destroying_delete != 201806\n+#  error \"__cpp_impl_destroying_delete != 201806\"\n+#endif\n+\n+#ifndef __cpp_constinit\n+#  error \"__cpp_constinit\"\n+#elif __cpp_constinit != 201907\n+#  error \"__cpp_constinit != 201907\"\n+#endif\n+\n+#ifndef __cpp_constexpr_dynamic_alloc\n+#  error \"__cpp_constexpr_dynamic_alloc\"\n+#elif __cpp_constexpr_dynamic_alloc != 201907\n+#  error \"__cpp_constexpr_dynamic_alloc != 201907\"\n+#endif\n+\n+#ifndef __cpp_aggregate_paren_init\n+#  error \"__cpp_aggregate_paren_init\"\n+#elif __cpp_aggregate_paren_init != 201902\n+#  error \"__cpp_aggregate_paren_init != 201902\"\n+#endif\n+\n+#ifdef __has_cpp_attribute\n+\n+#  if ! __has_cpp_attribute(maybe_unused)\n+#    error \"__has_cpp_attribute(maybe_unused)\"\n+#  elif __has_cpp_attribute(maybe_unused) != 201603\n+#    error \"__has_cpp_attribute(maybe_unused) != 201603\"\n+#  endif\n+\n+#  if ! __has_cpp_attribute(nodiscard)\n+#    error \"__has_cpp_attribute(nodiscard)\"\n+#  elif __has_cpp_attribute(nodiscard) != 201907\n+#    error \"__has_cpp_attribute(nodiscard) != 201907\"\n+#  endif\n+\n+#  if ! __has_cpp_attribute(fallthrough)\n+#    error \"__has_cpp_attribute(fallthrough)\"\n+#  elif __has_cpp_attribute(fallthrough) != 201603\n+#    error \"__has_cpp_attribute(fallthrough) != 201603\"\n+#  endif\n+\n+#  if ! __has_cpp_attribute(no_unique_address)\n+#    error \"__has_cpp_attribute(no_unique_address)\"\n+#  elif __has_cpp_attribute(no_unique_address) != 201803\n+#    error \"__has_cpp_attribute(no_unique_address) != 201803\"\n+#  endif\n+\n+#  if ! __has_cpp_attribute(likely)\n+#    error \"__has_cpp_attribute(likely)\"\n+#  elif __has_cpp_attribute(likely) != 201803\n+#    error \"__has_cpp_attribute(likely) != 201803\"\n+#  endif\n+\n+#  if ! __has_cpp_attribute(unlikely)\n+#    error \"__has_cpp_attribute(unlikely)\"\n+#  elif __has_cpp_attribute(unlikely) != 201803\n+#    error \"__has_cpp_attribute(unlikely) != 201803\"\n+#  endif\n+\n+#else\n+#  error \"__has_cpp_attribute\"\n+#endif\n+\n+#ifndef __cpp_char8_t\n+#  error \"__cpp_char8_t\"\n+#elif __cpp_char8_t != 201811\n+#  error \"__cpp_char8_t != 201811\"\n+#endif\n+\n+#ifndef __cpp_designated_initializers\n+#  error \"__cpp_designated_initializers\"\n+#elif __cpp_designated_initializers != 201707\n+#  error \"__cpp_designated_initializers != 201707\"\n+#endif\n+\n+#ifndef __cpp_constexpr_in_decltype\n+#  error \"__cpp_constexpr_in_decltype\"\n+#elif __cpp_constexpr_in_decltype != 201711\n+#  error \"__cpp_constexpr_in_decltype != 201711\"\n+#endif\n+\n+/* Not supported fully yet:\n+#ifndef __cpp_consteval\n+#  error \"__cpp_consteval\"\n+#elif __cpp_consteval != 201811\n+#  error \"__cpp_consteval != 201811\"\n+#endif\n+*/\n+\n+#ifndef __cpp_concepts\n+#  error \"__cpp_concepts\"\n+#elif __cpp_concepts != 201907\n+#  error \"__cpp_concepts != 201907\"\n+#endif\n+\n+#ifndef __cpp_using_enum\n+#  error \"__cpp_using_enum\"\n+#elif __cpp_using_enum != 201907\n+#  error \"__cpp_using_enum != 201907\"\n+#endif\n+\n+// C++23 features:\n+\n+#ifndef __cpp_size_t_suffix\n+#  error \"__cpp_size_t_suffix\"\n+#elif __cpp_size_t_suffix != 202006\n+#  error \"__cpp_size_t_suffix != 202006\"\n+#endif"}, {"sha": "3488032de3f271b786dd86a2954a6481af3727a3", "filename": "gcc/testsuite/g++.dg/cpp23/size_t-literals.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f69e63cfcc664fd7382dd877846007652a01dcf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fsize_t-literals.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f69e63cfcc664fd7382dd877846007652a01dcf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fsize_t-literals.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fsize_t-literals.C?ref=1f69e63cfcc664fd7382dd877846007652a01dcf", "patch": "@@ -0,0 +1,8 @@\n+// { dg-do compile { target c++23 } }\n+\n+#include <cstddef>\n+#include <type_traits>\n+\n+static_assert(std::is_same_v<decltype(123zu), std::size_t>);\n+static_assert(std::is_same_v<decltype(456z), std::make_signed_t<std::size_t>>);\n+"}, {"sha": "dc0025ba585b75ebd872b31b6f9d9bb6525f652f", "filename": "gcc/testsuite/g++.dg/warn/Wsize_t-literals.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f69e63cfcc664fd7382dd877846007652a01dcf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsize_t-literals.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f69e63cfcc664fd7382dd877846007652a01dcf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsize_t-literals.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsize_t-literals.C?ref=1f69e63cfcc664fd7382dd877846007652a01dcf", "patch": "@@ -0,0 +1,12 @@\n+// { dg-do compile { target c++11 } }\n+\n+#include <cstddef>\n+#include <type_traits>\n+\n+std::size_t s1 = 1234zu; // { dg-warning {use of C\\+\\+23 .size_t. integer constant} \"\" { target c++20_down } }\n+std::size_t S1 = 5678ZU; // { dg-warning {use of C\\+\\+23 .size_t. integer constant} \"\" { target c++20_down } }\n+std::size_t s2 = 1234uz; // { dg-warning {use of C\\+\\+23 .size_t. integer constant} \"\" { target c++20_down } }\n+std::size_t S2 = 5678UZ; // { dg-warning {use of C\\+\\+23 .size_t. integer constant} \"\" { target c++20_down } }\n+\n+std::make_signed<std::size_t>::type pd1 = 1234z; // { dg-warning {use of C\\+\\+23 .make_signed<size_t>::type. integer constant} \"\" { target c++20_down } }\n+std::make_signed<std::size_t>::type PD1 = 5678Z; // { dg-warning {use of C\\+\\+23 .make_signed<size_t>::type. integer constant} \"\" { target c++20_down } }"}, {"sha": "42007f98b932fc9e4490dbda7ebfd4775ec11d90", "filename": "libcpp/expr.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f69e63cfcc664fd7382dd877846007652a01dcf/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f69e63cfcc664fd7382dd877846007652a01dcf/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=1f69e63cfcc664fd7382dd877846007652a01dcf", "patch": "@@ -313,13 +313,14 @@ static unsigned int\n interpret_int_suffix (cpp_reader *pfile, const uchar *s, size_t len)\n {\n   size_t orig_len = len;\n-  size_t u, l, i;\n+  size_t u, l, i, z;\n \n-  u = l = i = 0;\n+  u = l = i = z = 0;\n \n   while (len--)\n     switch (s[len])\n       {\n+      case 'z': case 'Z':\tz++; break;\n       case 'u': case 'U':\tu++; break;\n       case 'i': case 'I':\n       case 'j': case 'J':\ti++; break;\n@@ -332,9 +333,17 @@ interpret_int_suffix (cpp_reader *pfile, const uchar *s, size_t len)\n \treturn 0;\n       }\n \n-  if (l > 2 || u > 1 || i > 1)\n+  if (l > 2 || u > 1 || i > 1 || z > 1)\n     return 0;\n \n+  if (z)\n+    {\n+      if (l > 0 || i > 0)\n+\treturn 0;\n+      if (!CPP_OPTION (pfile, cplusplus))\n+\treturn 0;\n+    }\n+\n   if (i)\n     {\n       if (!CPP_OPTION (pfile, ext_numeric_literals))\n@@ -352,7 +361,8 @@ interpret_int_suffix (cpp_reader *pfile, const uchar *s, size_t len)\n   return ((i ? CPP_N_IMAGINARY : 0)\n \t  | (u ? CPP_N_UNSIGNED : 0)\n \t  | ((l == 0) ? CPP_N_SMALL\n-\t     : (l == 1) ? CPP_N_MEDIUM : CPP_N_LARGE));\n+\t     : (l == 1) ? CPP_N_MEDIUM : CPP_N_LARGE)\n+\t  | (z ? CPP_N_SIZE_T : 0));\n }\n \n /* Return the classification flags for an int suffix.  */\n@@ -805,6 +815,16 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token,\n \t\t\t\t      virtual_location, 0, message);\n         }\n \n+      if ((result & CPP_N_SIZE_T) == CPP_N_SIZE_T\n+\t  && !CPP_OPTION (pfile, size_t_literals))\n+       {\n+\t  const char *message = (result & CPP_N_UNSIGNED) == CPP_N_UNSIGNED\n+\t\t\t\t? N_(\"use of C++23 %<size_t%> integer constant\")\n+\t\t\t\t: N_(\"use of C++23 %<make_signed<size_t>::type%> integer constant\");\n+\t  cpp_warning_with_line (pfile, CPP_W_SIZE_T_LITERALS,\n+\t\t\t\t virtual_location, 0, message);\n+       }\n+\n       result |= CPP_N_INTEGER;\n     }\n "}, {"sha": "17feb648ebe8e540ddb8d9be85fcfe74ad711731", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f69e63cfcc664fd7382dd877846007652a01dcf/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f69e63cfcc664fd7382dd877846007652a01dcf/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=1f69e63cfcc664fd7382dd877846007652a01dcf", "patch": "@@ -500,6 +500,9 @@ struct cpp_options\n   /* Nonzero means tokenize C++20 module directives.  */\n   unsigned char module_directives;\n \n+  /* Nonzero for C++23 size_t literals.  */\n+  unsigned char size_t_literals;\n+\n   /* Holds the name of the target (execution) character set.  */\n   const char *narrow_charset;\n \n@@ -626,6 +629,7 @@ enum cpp_warning_reason {\n   CPP_W_INVALID_PCH,\n   CPP_W_WARNING_DIRECTIVE,\n   CPP_W_LITERAL_SUFFIX,\n+  CPP_W_SIZE_T_LITERALS,\n   CPP_W_DATE_TIME,\n   CPP_W_PEDANTIC,\n   CPP_W_C90_C99_COMPAT,\n@@ -1211,7 +1215,9 @@ struct cpp_num\n #define CPP_N_FLOATN\t0x400000 /* _FloatN types.  */\n #define CPP_N_FLOATNX\t0x800000 /* _FloatNx types.  */\n \n-#define CPP_N_USERDEF\t0x1000000 /* C++0x user-defined literal.  */\n+#define CPP_N_USERDEF\t0x1000000 /* C++11 user-defined literal.  */\n+\n+#define CPP_N_SIZE_T\t0x2000000 /* C++23 size_t literal.  */\n \n #define CPP_N_WIDTH_FLOATN_NX\t0xF0000000 /* _FloatN / _FloatNx value\n \t\t\t\t\t      of N, divided by 16.  */"}, {"sha": "17b0d251cda9d7120f09a4bd169377d51110170d", "filename": "libcpp/init.c", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f69e63cfcc664fd7382dd877846007652a01dcf/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f69e63cfcc664fd7382dd877846007652a01dcf/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=1f69e63cfcc664fd7382dd877846007652a01dcf", "patch": "@@ -94,34 +94,35 @@ struct lang_flags\n   char va_opt;\n   char scope;\n   char dfp_constants;\n+  char size_t_literals;\n };\n \n static const struct lang_flags lang_defaults[] =\n-{ /*              c99 c++ xnum xid c11 std digr ulit rlit udlit bincst digsep trig u8chlit vaopt scope dfp */\n-  /* GNUC89   */  { 0,  0,  1,  0,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1,     0 },\n-  /* GNUC99   */  { 1,  0,  1,  1,  0,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0 },\n-  /* GNUC11   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0 },\n-  /* GNUC17   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0 },\n-  /* GNUC2X   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    1,     0,     0,   1,      1,   1,     1 },\n-  /* STDC89   */  { 0,  0,  0,  0,  0,  1,  0,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0 },\n-  /* STDC94   */  { 0,  0,  0,  0,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0 },\n-  /* STDC99   */  { 1,  0,  1,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0 },\n-  /* STDC11   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0 },\n-  /* STDC17   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0 },\n-  /* STDC2X   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    1,     0,     1,   1,      0,   1,     1 },\n-  /* GNUCXX   */  { 0,  1,  1,  1,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1,     0 },\n-  /* CXX98    */  { 0,  1,  0,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   1,     0 },\n-  /* GNUCXX11 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    0,     0,     0,   0,      1,   1,     0 },\n-  /* CXX11    */  { 1,  1,  0,  1,  1,  1,  1,   1,   1,   1,    0,     0,     1,   0,      0,   1,     0 },\n-  /* GNUCXX14 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   0,      1,   1,     0 },\n-  /* CXX14    */  { 1,  1,  0,  1,  1,  1,  1,   1,   1,   1,    1,     1,     1,   0,      0,   1,     0 },\n-  /* GNUCXX17 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0 },\n-  /* CXX17    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      0,   1,     0 },\n-  /* GNUCXX20 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0 },\n-  /* CXX20    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0 },\n-  /* GNUCXX23 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0 },\n-  /* CXX23    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0 },\n-  /* ASM      */  { 0,  0,  1,  0,  0,  0,  0,   0,   0,   0,    0,     0,     0,   0,      0,   0,     0 }\n+{ /*              c99 c++ xnum xid c11 std digr ulit rlit udlit bincst digsep trig u8chlit vaopt scope dfp szlit */\n+  /* GNUC89   */  { 0,  0,  1,  0,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1,     0,   0 },\n+  /* GNUC99   */  { 1,  0,  1,  1,  0,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0 },\n+  /* GNUC11   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0 },\n+  /* GNUC17   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0 },\n+  /* GNUC2X   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    1,     0,     0,   1,      1,   1,     1,   0 },\n+  /* STDC89   */  { 0,  0,  0,  0,  0,  1,  0,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0 },\n+  /* STDC94   */  { 0,  0,  0,  0,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0 },\n+  /* STDC99   */  { 1,  0,  1,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0 },\n+  /* STDC11   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0 },\n+  /* STDC17   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0 },\n+  /* STDC2X   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    1,     0,     1,   1,      0,   1,     1,   0 },\n+  /* GNUCXX   */  { 0,  1,  1,  1,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1,     0,   0 },\n+  /* CXX98    */  { 0,  1,  0,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   1,     0,   0 },\n+  /* GNUCXX11 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    0,     0,     0,   0,      1,   1,     0,   0 },\n+  /* CXX11    */  { 1,  1,  0,  1,  1,  1,  1,   1,   1,   1,    0,     0,     1,   0,      0,   1,     0,   0 },\n+  /* GNUCXX14 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   0,      1,   1,     0,   0 },\n+  /* CXX14    */  { 1,  1,  0,  1,  1,  1,  1,   1,   1,   1,    1,     1,     1,   0,      0,   1,     0,   0 },\n+  /* GNUCXX17 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0 },\n+  /* CXX17    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      0,   1,     0,   0 },\n+  /* GNUCXX20 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0 },\n+  /* CXX20    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0 },\n+  /* GNUCXX23 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   1 },\n+  /* CXX23    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   1 },\n+  /* ASM      */  { 0,  0,  1,  0,  0,  0,  0,   0,   0,   0,    0,     0,     0,   0,      0,   0,     0,   0 }\n };\n \n /* Sets internal flags correctly for a given language.  */\n@@ -149,6 +150,7 @@ cpp_set_lang (cpp_reader *pfile, enum c_lang lang)\n   CPP_OPTION (pfile, va_opt)\t\t\t = l->va_opt;\n   CPP_OPTION (pfile, scope)\t\t\t = l->scope;\n   CPP_OPTION (pfile, dfp_constants)\t\t = l->dfp_constants;\n+  CPP_OPTION (pfile, size_t_literals)\t\t = l->size_t_literals;\n }\n \n /* Initialize library global state.  */"}]}