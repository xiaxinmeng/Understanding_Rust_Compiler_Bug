{"sha": "5e94175fa5906a1417a229fe9ec93faa10502583", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU5NDE3NWZhNTkwNmExNDE3YTIyOWZlOWVjOTNmYWExMDUwMjU4Mw==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2013-11-14T20:57:38Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2013-11-14T20:57:38Z"}, "message": "basic-block.h (has_abnormal_outgoing_edge_p): Moved here from...\n\n\t* basic-block.h (has_abnormal_outgoing_edge_p): Moved here from...\n\t* tree-inline.c (has_abnormal_outgoing_edge_p): Remove.\n\t* gimple-ssa-isolate-paths.c: Include tree-cfg.h.\n\t(find_implicit_erroneous_behaviour): If a block has abnormal outgoing\n\tedges, then ignore it.  If the statement exhibiting erroneous\n\tbehaviour ends basic blocks, with the exception of GIMPLE_RETURNs,\n\tthen we can not optimize.\n\t(find_explicit_erroneous_behaviour): Likewise.\n\nFrom-SVN: r204821", "tree": {"sha": "844c78fddcf73f2724175bb18f2bd8e1f97aef7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/844c78fddcf73f2724175bb18f2bd8e1f97aef7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e94175fa5906a1417a229fe9ec93faa10502583", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e94175fa5906a1417a229fe9ec93faa10502583", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e94175fa5906a1417a229fe9ec93faa10502583", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e94175fa5906a1417a229fe9ec93faa10502583/comments", "author": null, "committer": null, "parents": [{"sha": "01ef823cdd7f0031d553b6798b2fa545781745f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01ef823cdd7f0031d553b6798b2fa545781745f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01ef823cdd7f0031d553b6798b2fa545781745f4"}], "stats": {"total": 79, "additions": 61, "deletions": 18}, "files": [{"sha": "1b395cb83178768b02fef9fb74497bea06a775ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e94175fa5906a1417a229fe9ec93faa10502583/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e94175fa5906a1417a229fe9ec93faa10502583/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e94175fa5906a1417a229fe9ec93faa10502583", "patch": "@@ -1,3 +1,15 @@\n+2013-11-14  Jeff Law  <law@redhat.com>\n+\n+\tPR middle-end/59127\n+\t* basic-block.h (has_abnormal_outgoing_edge_p): Moved here from...\n+\t* tree-inline.c (has_abnormal_outgoing_edge_p): Remove.\n+\t* gimple-ssa-isolate-paths.c: Include tree-cfg.h.\n+\t(find_implicit_erroneous_behaviour): If a block has abnormal outgoing\n+\tedges, then ignore it.  If the statement exhibiting erroneous\n+\tbehaviour ends basic blocks, with the exception of GIMPLE_RETURNs,\n+\tthen we can not optimize.\n+\t(find_explicit_erroneous_behaviour): Likewise.\n+\n 2013-11-14  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* gimplify-me.h:  New file.  Add prototypes."}, {"sha": "b7e3b5042ff22b31e3483c4ea31b68c256ae1db1", "filename": "gcc/basic-block.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e94175fa5906a1417a229fe9ec93faa10502583/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e94175fa5906a1417a229fe9ec93faa10502583/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=5e94175fa5906a1417a229fe9ec93faa10502583", "patch": "@@ -1008,4 +1008,19 @@ inverse_probability (int prob1)\n   check_probability (prob1);\n   return REG_BR_PROB_BASE - prob1;\n }\n+\n+/* Return true if BB has at least one abnormal outgoing edge.  */\n+\n+static inline bool\n+has_abnormal_outgoing_edge_p (basic_block bb)\n+{\n+  edge e;\n+  edge_iterator ei;\n+\n+  FOR_EACH_EDGE (e, ei, bb->succs)\n+    if (e->flags & EDGE_ABNORMAL)\n+      return true;\n+\n+  return false;\n+}\n #endif /* GCC_BASIC_BLOCK_H */"}, {"sha": "66c13f4cf6fd51025d2915c00d6ee77f067afea4", "filename": "gcc/gimple-ssa-isolate-paths.c", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e94175fa5906a1417a229fe9ec93faa10502583/gcc%2Fgimple-ssa-isolate-paths.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e94175fa5906a1417a229fe9ec93faa10502583/gcc%2Fgimple-ssa-isolate-paths.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-isolate-paths.c?ref=5e94175fa5906a1417a229fe9ec93faa10502583", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ssa-iterators.h\"\n #include \"cfgloop.h\"\n #include \"tree-pass.h\"\n+#include \"tree-cfg.h\"\n \n \n static bool cfg_altered;\n@@ -215,6 +216,17 @@ find_implicit_erroneous_behaviour (void)\n     {\n       gimple_stmt_iterator si;\n \n+      /* Out of an abundance of caution, do not isolate paths to a\n+\t block where the block has any abnormal outgoing edges.\n+\n+\t We might be able to relax this in the future.  We have to detect\n+\t when we have to split the block with the NULL dereference and\n+\t the trap we insert.  We have to preserve abnormal edges out\n+\t of the isolated block which in turn means updating PHIs at\n+\t the targets of those abnormal outgoing edges.  */\n+      if (has_abnormal_outgoing_edge_p (bb))\n+\tcontinue;\n+\n       /* First look for a PHI which sets a pointer to NULL and which\n  \t is then dereferenced within BB.  This is somewhat overly\n \t conservative, but probably catches most of the interesting\n@@ -256,8 +268,15 @@ find_implicit_erroneous_behaviour (void)\n \t        {\n \t          /* We only care about uses in BB.  Catching cases in\n \t\t     in other blocks would require more complex path\n-\t\t     isolation code.  */\n-\t\t  if (gimple_bb (use_stmt) != bb)\n+\t\t     isolation code. \n+\n+\t\t     If the statement must end a block and is not a\n+\t\t     GIMPLE_RETURN, then additional work would be\n+\t\t     necessary to isolate the path.  Just punt it for\n+\t\t     now.  */\n+\t\t  if (gimple_bb (use_stmt) != bb\n+\t\t      || (stmt_ends_bb_p (use_stmt)\n+\t\t\t  && gimple_code (use_stmt) != GIMPLE_RETURN))\n \t\t    continue;\n \n \t\t  if (infer_nonnull_range (use_stmt, lhs))\n@@ -289,6 +308,17 @@ find_explicit_erroneous_behaviour (void)\n     {\n       gimple_stmt_iterator si;\n \n+      /* Out of an abundance of caution, do not isolate paths to a\n+\t block where the block has any abnormal outgoing edges.\n+\n+\t We might be able to relax this in the future.  We have to detect\n+\t when we have to split the block with the NULL dereference and\n+\t the trap we insert.  We have to preserve abnormal edges out\n+\t of the isolated block which in turn means updating PHIs at\n+\t the targets of those abnormal outgoing edges.  */\n+      if (has_abnormal_outgoing_edge_p (bb))\n+\tcontinue;\n+\n       /* Now look at the statements in the block and see if any of\n \t them explicitly dereference a NULL pointer.  This happens\n \t because of jump threading and constant propagation.  */\n@@ -299,7 +329,8 @@ find_explicit_erroneous_behaviour (void)\n \t  /* By passing null_pointer_node, we can use infer_nonnull_range\n \t     to detect explicit NULL pointer dereferences and other uses\n \t     where a non-NULL value is required.  */\n-\t  if (infer_nonnull_range (stmt, null_pointer_node))\n+\t  if ((!stmt_ends_bb_p (stmt) || gimple_code (stmt) == GIMPLE_RETURN)\n+\t      && infer_nonnull_range (stmt, null_pointer_node))\n \t    {\n \t      insert_trap_and_remove_trailing_statements (&si,\n \t\t\t\t\t\t\t  null_pointer_node);"}, {"sha": "1e1285aebbe8bb950867080667a3ceefa26b10d5", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e94175fa5906a1417a229fe9ec93faa10502583/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e94175fa5906a1417a229fe9ec93faa10502583/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=5e94175fa5906a1417a229fe9ec93faa10502583", "patch": "@@ -4506,21 +4506,6 @@ fold_marked_statements (int first, struct pointer_set_t *statements)\n       }\n }\n \n-/* Return true if BB has at least one abnormal outgoing edge.  */\n-\n-static inline bool\n-has_abnormal_outgoing_edge_p (basic_block bb)\n-{\n-  edge e;\n-  edge_iterator ei;\n-\n-  FOR_EACH_EDGE (e, ei, bb->succs)\n-    if (e->flags & EDGE_ABNORMAL)\n-      return true;\n-\n-  return false;\n-}\n-\n /* Expand calls to inline functions in the body of FN.  */\n \n unsigned int"}]}