{"sha": "337ea6b216afd412b85f3fda78a36467ffe4a817", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM3ZWE2YjIxNmFmZDQxMmI4NWYzZmRhNzhhMzY0NjdmZmU0YTgxNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-10T18:53:17Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2020-01-10T18:53:17Z"}, "message": "Shorten right-shift again in C++.\n\nBack in SVN r131862 richi removed this code to fix PR 34235, but didn't\nremove the parallel code from the C front-end because the bug had previously\nbeen fixed in r44080.  This patch copies the code from C again.\n\n\t* typeck.c (cp_build_binary_op): Restore short_shift code.\n\nFrom-SVN: r280128", "tree": {"sha": "de398d158f61994e8448352cca3d5cddabccf119", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de398d158f61994e8448352cca3d5cddabccf119"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/337ea6b216afd412b85f3fda78a36467ffe4a817", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/337ea6b216afd412b85f3fda78a36467ffe4a817", "html_url": "https://github.com/Rust-GCC/gccrs/commit/337ea6b216afd412b85f3fda78a36467ffe4a817", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/337ea6b216afd412b85f3fda78a36467ffe4a817/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e0804c9b5efdf17bbfb692a787df36b86f71af8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0804c9b5efdf17bbfb692a787df36b86f71af8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0804c9b5efdf17bbfb692a787df36b86f71af8d"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "1dad238028acb84af68feff2019259d738cbc473", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/337ea6b216afd412b85f3fda78a36467ffe4a817/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/337ea6b216afd412b85f3fda78a36467ffe4a817/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=337ea6b216afd412b85f3fda78a36467ffe4a817", "patch": "@@ -1,5 +1,7 @@\n 2020-01-10  Jason Merrill  <jason@redhat.com>\n \n+\t* typeck.c (cp_build_binary_op): Restore short_shift code.\n+\n \tPR c++/93143 - incorrect tree sharing with constexpr.\n \t* constexpr.c (cxx_eval_outermost_constant_expr): Don't assume\n \tCONSTRUCTORs are already unshared."}, {"sha": "7b653cebca0a5da760e732491b73371d43a4c80a", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/337ea6b216afd412b85f3fda78a36467ffe4a817/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/337ea6b216afd412b85f3fda78a36467ffe4a817/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=337ea6b216afd412b85f3fda78a36467ffe4a817", "patch": "@@ -4452,6 +4452,10 @@ cp_build_binary_op (const op_location_t &location,\n      Also implies COMMON.  */\n   int short_compare = 0;\n \n+  /* Nonzero if this is a right-shift operation, which can be computed on the\n+     original short and then promoted if the operand is a promoted short.  */\n+  int short_shift = 0;\n+\n   /* Nonzero means set RESULT_TYPE to the common type of the args.  */\n   int common = 0;\n \n@@ -4844,6 +4848,9 @@ cp_build_binary_op (const op_location_t &location,\n \t\t}\n \t      else\n \t\t{\n+\t\t  if (!integer_zerop (op1))\n+\t\t    short_shift = 1;\n+\n \t\t  if (compare_tree_int (const_op1, TYPE_PRECISION (type0)) >= 0\n \t\t      && (complain & tf_warning)\n \t\t      && c_inhibit_evaluation_warnings == 0)\n@@ -5586,6 +5593,37 @@ cp_build_binary_op (const op_location_t &location,\n \t\t\t\t\t   shorten == -1);\n \t}\n \n+      /* Shifts can be shortened if shifting right.  */\n+\n+      if (short_shift)\n+\t{\n+\t  int unsigned_arg;\n+\t  tree arg0 = get_narrower (op0, &unsigned_arg);\n+\n+\t  final_type = result_type;\n+\n+\t  if (arg0 == op0 && final_type == TREE_TYPE (op0))\n+\t    unsigned_arg = TYPE_UNSIGNED (TREE_TYPE (op0));\n+\n+\t  if (TYPE_PRECISION (TREE_TYPE (arg0)) < TYPE_PRECISION (result_type)\n+\t      && tree_int_cst_sgn (op1) > 0\n+\t      /* We can shorten only if the shift count is less than the\n+\t\t number of bits in the smaller type size.  */\n+\t      && compare_tree_int (op1, TYPE_PRECISION (TREE_TYPE (arg0))) < 0\n+\t      /* We cannot drop an unsigned shift after sign-extension.  */\n+\t      && (!TYPE_UNSIGNED (final_type) || unsigned_arg))\n+\t    {\n+\t      /* Do an unsigned shift if the operand was zero-extended.  */\n+\t      result_type\n+\t\t= c_common_signed_or_unsigned_type (unsigned_arg,\n+\t\t\t\t\t\t    TREE_TYPE (arg0));\n+\t      /* Convert value-to-be-shifted to that type.  */\n+\t      if (TREE_TYPE (op0) != result_type)\n+\t\top0 = convert (result_type, op0);\n+\t      converted = 1;\n+\t    }\n+\t}\n+\n       /* Comparison operations are shortened too but differently.\n \t They identify themselves by setting short_compare = 1.  */\n "}]}