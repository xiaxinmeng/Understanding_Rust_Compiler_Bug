{"sha": "d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYyY2YzZGZiZTcyYjE2OGQ5YmRlMDhiMzRlMmExOTBjZGY3ZWIzMw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-05-08T16:55:23Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-05-08T16:55:23Z"}, "message": "check.c (check_co_minmaxsum, [...]): New.\n\ngcc/fortran/\n2014-05-08  Tobias Burnus  <burnus@net-b.de>\n\n        * check.c (check_co_minmaxsum, gfc_check_co_minmax,\n        gfc_check_co_sum): New.\n        * error.c (gfc_notify_std): Update -std=f2008ts.\n        * gfortran.h (gfc_isym_id): Add GFC_ISYM_CO_MAX,\n        GFC_ISYM_CO_MIN, GFC_ISYM_CO_SUM.\n        * intrinsic.h (gfc_check_co_minmax,\n        gfc_check_co_sum): Declare.\n        * intrinsic.c (add_subroutines): Add co_min, co_max\n        and co_sum.\n        (gfc_check_intrinsic_standard): Update text for\n        -std=f2008ts.\n        * intrinsic.texi (CO_MIN, CO_MAX, CO_SUM): Document\n        them.\n        * invoke.texi (-std=f2008ts): Update wording.\n        * trans.h (gfor_fndecl_co_max,\n        gfor_fndecl_co_min, gfor_fndecl_co_sum): Define.\n        * trans-decl.c (gfor_fndecl_co_max,\n        gfor_fndecl_co_min, gfor_fndecl_co_sum): Define.\n        (gfc_build_builtin_function_decls): Assign to it.\n        * trans-intrinsic.c (conv_co_minmaxsum): New.\n        (gfc_conv_intrinsic_subroutine): Call it.\n\nlibgfortran/\n2014-05-08  Tobias Burnus  <burnus@net-b.de>\n\n        * caf/libcaf.h (caf_vector_t, _gfortran_caf_co_sum,\n        _gfortran_caf_co_min, _gfortran_caf_co_max): Declare\n        * caf/single.c\n\ngcc/testsuite/\n2014-05-08  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.dg/coarray_collectives_1.f90: New.\n        * gfortran.dg/coarray_collectives_2.f90: New.\n        * gfortran.dg/coarray_collectives_3.f90: New.\n        * gfortran.dg/coarray_collectives_4.f90: New.\n        * gfortran.dg/coarray_collectives_5.f90: New.\n        * gfortran.dg/coarray_collectives_6.f90: New.\n        * gfortran.dg/coarray/collectives_1.f90: New.\n        * gfortran.dg/assumed_rank_5.f90: Update dg-error.\n        * gfortran.dg/assumed_type_4.f90: Update dg-error.\n        * gfortran.dg/bind_c_array_params.f03: Update dg-error.\n        * gfortran.dg/bind_c_usage_28.f90: Update dg-error.\n        * gfortran.dg/c_funloc_tests_5.f03: Update dg-error.\n        * gfortran.dg/c_funloc_tests_6.f90: Update dg-error.\n        * gfortran.dg/c_loc_tests_11.f03: Update dg-error.\n\nFrom-SVN: r210223", "tree": {"sha": "778c1f6a41dea0e8e0d26817d32358e245d22ded", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/778c1f6a41dea0e8e0d26817d32358e245d22ded"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/comments", "author": null, "committer": null, "parents": [{"sha": "272325bd6abba598a8f125dab36b626acb648b03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/272325bd6abba598a8f125dab36b626acb648b03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/272325bd6abba598a8f125dab36b626acb648b03"}], "stats": {"total": 740, "additions": 717, "deletions": 23}, "files": [{"sha": "07a84d4773fed6eaa6a29f6e56ec708d6752ba79", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "patch": "@@ -1,3 +1,27 @@\n+2014-05-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* check.c (check_co_minmaxsum, gfc_check_co_minmax,\n+\tgfc_check_co_sum): New.\n+\t* error.c (gfc_notify_std): Update -std=f2008ts.\n+\t* gfortran.h (gfc_isym_id): Add GFC_ISYM_CO_MAX,\n+\tGFC_ISYM_CO_MIN, GFC_ISYM_CO_SUM.\n+\t* intrinsic.h (gfc_check_co_minmax,\n+\tgfc_check_co_sum): Declare.\n+\t* intrinsic.c (add_subroutines): Add co_min, co_max\n+\tand co_sum.\n+\t(gfc_check_intrinsic_standard): Update text for\n+\t-std=f2008ts.\n+\t* intrinsic.texi (CO_MIN, CO_MAX, CO_SUM): Document\n+\tthem.\n+\t* invoke.texi (-std=f2008ts): Update wording.\n+\t* trans.h (gfor_fndecl_co_max,\n+\tgfor_fndecl_co_min, gfor_fndecl_co_sum): Define.\n+\t* trans-decl.c (gfor_fndecl_co_max,\n+\tgfor_fndecl_co_min, gfor_fndecl_co_sum): Define.\n+\t(gfc_build_builtin_function_decls): Assign to it.\n+\t* trans-intrinsic.c (conv_co_minmaxsum): New.\n+\t(gfc_conv_intrinsic_subroutine): Call it.\n+\n 2014-05-06  Kenneth Zadeck  <zadeck@naturalbridge.com>\n \t    Mike Stump  <mikestump@comcast.net>\n \t    Richard Sandiford  <rdsandiford@googlemail.com>"}, {"sha": "90ba0c921e5f4543a7549746090af60ff66913d6", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "patch": "@@ -1290,6 +1290,91 @@ gfc_check_cmplx (gfc_expr *x, gfc_expr *y, gfc_expr *kind)\n }\n \n \n+static bool\n+check_co_minmaxsum (gfc_expr *a, gfc_expr *result_image, gfc_expr *stat,\n+\t\t    gfc_expr *errmsg)\n+{\n+  if (!variable_check (a, 0, false))\n+    return false;\n+\n+  if (result_image != NULL)\n+    {\n+      if (!type_check (result_image, 1, BT_INTEGER))\n+\treturn false;\n+      if (!scalar_check (result_image, 1))\n+\treturn false;\n+    }\n+\n+  if (stat != NULL)\n+    {\n+      if (!type_check (stat, 2, BT_INTEGER))\n+\treturn false;\n+      if (!scalar_check (stat, 2))\n+\treturn false;\n+      if (!variable_check (stat, 2, false))\n+\treturn false;\n+      if (stat->ts.kind != 4)\n+\t{\n+\t  gfc_error (\"The stat= argument at %L must be a kind=4 integer \"\n+\t\t     \"variable\", &stat->where);\n+\t  return false;\n+\t}\n+    }\n+\n+  if (errmsg != NULL)\n+    {\n+      if (!type_check (errmsg, 3, BT_CHARACTER))\n+\treturn false;\n+      if (!scalar_check (errmsg, 3))\n+\treturn false;\n+      if (!variable_check (errmsg, 3, false))\n+\treturn false;\n+      if (errmsg->ts.kind != 1)\n+\t{\n+\t  gfc_error (\"The errmsg= argument at %L must be a default-kind \"\n+\t\t     \"character variable\", &errmsg->where);\n+\t  return false;\n+\t}\n+    }\n+\n+  if (gfc_option.coarray == GFC_FCOARRAY_NONE)\n+    {\n+      gfc_fatal_error (\"Coarrays disabled at %L, use -fcoarray= to enable\",\n+\t\t       &a->where);\n+      return false;\n+    }\n+\n+  return true;\n+}\n+\n+\n+bool\n+gfc_check_co_minmax (gfc_expr *a, gfc_expr *result_image, gfc_expr *stat,\n+\t\t     gfc_expr *errmsg)\n+{\n+  if (a->ts.type != BT_INTEGER && a->ts.type != BT_REAL\n+      && a->ts.type != BT_CHARACTER)\n+    {\n+       gfc_error (\"'%s' argument of '%s' intrinsic at %L shall be of type \"\n+\t\t  \"integer, real or character\",\n+\t\t  gfc_current_intrinsic_arg[0]->name, gfc_current_intrinsic,\n+\t\t  &a->where);\n+       return false;\n+    }\n+  return check_co_minmaxsum (a, result_image, stat, errmsg);\n+}\n+\n+\n+bool\n+gfc_check_co_sum (gfc_expr *a, gfc_expr *result_image, gfc_expr *stat,\n+\t\t  gfc_expr *errmsg)\n+{\n+  if (!numeric_check (a, 0))\n+    return false;\n+  return check_co_minmaxsum (a, result_image, stat, errmsg);\n+}\n+\n+\n bool\n gfc_check_complex (gfc_expr *x, gfc_expr *y)\n {"}, {"sha": "6ae44e87c2f7b4dfc40e381f1ca8c3411ee2a853", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "patch": "@@ -878,7 +878,7 @@ gfc_notify_std (int std, const char *gmsgid, ...)\n   switch (std)\n   {\n     case GFC_STD_F2008_TS:\n-      msg2 = \"TS 29113:\";\n+      msg2 = \"TS 29113/TS 18508:\";\n       break;\n     case GFC_STD_F2008_OBS:\n       msg2 = _(\"Fortran 2008 obsolescent feature:\");"}, {"sha": "63be8af2be261ca53670960ef60ef449d18fab6e", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "patch": "@@ -323,6 +323,9 @@ enum gfc_isym_id\n   GFC_ISYM_CHDIR,\n   GFC_ISYM_CHMOD,\n   GFC_ISYM_CMPLX,\n+  GFC_ISYM_CO_MAX,\n+  GFC_ISYM_CO_MIN,\n+  GFC_ISYM_CO_SUM,\n   GFC_ISYM_COMMAND_ARGUMENT_COUNT,\n   GFC_ISYM_COMPILER_OPTIONS,\n   GFC_ISYM_COMPILER_VERSION,"}, {"sha": "852ae92d211d15c9e36df97373615f6cff8f6bd1", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "patch": "@@ -3004,7 +3004,7 @@ add_subroutines (void)\n {\n   /* Argument names as in the standard (to be used as argument keywords).  */\n   const char\n-    *h = \"harvest\", *dt = \"date\", *vl = \"values\", *pt = \"put\",\n+    *a = \"a\", *h = \"harvest\", *dt = \"date\", *vl = \"values\", *pt = \"put\",\n     *c = \"count\", *tm = \"time\", *tp = \"topos\", *gt = \"get\",\n     *t = \"to\", *zn = \"zone\", *fp = \"frompos\", *cm = \"count_max\",\n     *f = \"from\", *sz = \"size\", *ln = \"len\", *cr = \"count_rate\",\n@@ -3013,7 +3013,8 @@ add_subroutines (void)\n     *trim_name = \"trim_name\", *ut = \"unit\", *han = \"handler\",\n     *sec = \"seconds\", *res = \"result\", *of = \"offset\", *md = \"mode\",\n     *whence = \"whence\", *pos = \"pos\", *ptr = \"ptr\", *p1 = \"path1\",\n-    *p2 = \"path2\", *msk = \"mask\", *old = \"old\";\n+    *p2 = \"path2\", *msk = \"mask\", *old = \"old\", *result_image = \"result_image\",\n+    *stat = \"stat\", *errmsg = \"errmsg\";\n \n   int di, dr, dc, dl, ii;\n \n@@ -3209,6 +3210,31 @@ add_subroutines (void)\n \t      \"fptr\", BT_UNKNOWN, 0, REQUIRED, INTENT_OUT);\n   make_from_module();\n \n+  /* Coarray collectives.  */\n+  add_sym_4s (\"co_max\", GFC_ISYM_CO_MAX, CLASS_IMPURE,\n+\t      BT_UNKNOWN, 0, GFC_STD_F2008_TS,\n+\t      gfc_check_co_minmax, NULL, NULL,\n+\t      a, BT_REAL, dr, REQUIRED, INTENT_INOUT,\n+\t      result_image, BT_INTEGER, di, OPTIONAL, INTENT_IN,\n+\t      stat, BT_INTEGER, di, OPTIONAL, INTENT_OUT,\n+\t      errmsg, BT_CHARACTER, dc, OPTIONAL, INTENT_OUT);\n+\n+  add_sym_4s (\"co_min\", GFC_ISYM_CO_MIN, CLASS_IMPURE,\n+\t      BT_UNKNOWN, 0, GFC_STD_F2008_TS,\n+\t      gfc_check_co_minmax, NULL, NULL,\n+\t      a, BT_REAL, dr, REQUIRED, INTENT_INOUT,\n+\t      result_image, BT_INTEGER, di, OPTIONAL, INTENT_IN,\n+\t      stat, BT_INTEGER, di, OPTIONAL, INTENT_OUT,\n+\t      errmsg, BT_CHARACTER, dc, OPTIONAL, INTENT_OUT);\n+\n+  add_sym_4s (\"co_sum\", GFC_ISYM_CO_SUM, CLASS_IMPURE,\n+\t      BT_UNKNOWN, 0, GFC_STD_F2008_TS,\n+\t      gfc_check_co_sum, NULL, NULL,\n+\t      a, BT_REAL, dr, REQUIRED, INTENT_INOUT,\n+\t      result_image, BT_INTEGER, di, OPTIONAL, INTENT_IN,\n+\t      stat, BT_INTEGER, di, OPTIONAL, INTENT_OUT,\n+\t      errmsg, BT_CHARACTER, dc, OPTIONAL, INTENT_OUT);\n+\n   /* More G77 compatibility garbage.  */\n   add_sym_3s (\"alarm\", GFC_ISYM_ALARM, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_alarm_sub, NULL, gfc_resolve_alarm_sub,\n@@ -4160,7 +4186,7 @@ gfc_check_intrinsic_standard (const gfc_intrinsic_sym* isym,\n       break;\n \n     case GFC_STD_F2008_TS:\n-      symstd_msg = \"new in TS 29113\";\n+      symstd_msg = \"new in TS 29113/TS 18508\";\n       break;\n \n     case GFC_STD_GNU:"}, {"sha": "162fa71b660e7ab9ea0efd1a218cd342e4f5d76c", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "patch": "@@ -49,6 +49,8 @@ bool gfc_check_chdir (gfc_expr *);\n bool gfc_check_chmod (gfc_expr *, gfc_expr *);\n bool gfc_check_cmplx (gfc_expr *, gfc_expr *, gfc_expr *);\n bool gfc_check_complex (gfc_expr *, gfc_expr *);\n+bool gfc_check_co_minmax (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n+bool gfc_check_co_sum (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n bool gfc_check_count (gfc_expr *, gfc_expr *, gfc_expr *);\n bool gfc_check_cshift (gfc_expr *, gfc_expr *, gfc_expr *);\n bool gfc_check_ctime (gfc_expr *);"}, {"sha": "b091ee4c9b4b289e7e343ebce3ac05e05affd9b8", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 165, "deletions": 0, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "patch": "@@ -86,6 +86,9 @@ Some basic guidelines for editing this document:\n * @code{CHDIR}:         CHDIR,     Change working directory\n * @code{CHMOD}:         CHMOD,     Change access permissions of files\n * @code{CMPLX}:         CMPLX,     Complex conversion function\n+* @code{CO_MAX}:        CO_MAX,    Maximal value on the current set of images\n+* @code{CO_MIN}:        CO_MIN,    Minimal value on the current set of images\n+* @code{CO_SUM}:        CO_SUM,    Sum of values on the current set of images\n * @code{COMMAND_ARGUMENT_COUNT}: COMMAND_ARGUMENT_COUNT, Get number of command line arguments\n * @code{COMPILER_OPTIONS}: COMPILER_OPTIONS, Options passed to the compiler\n * @code{COMPILER_VERSION}: COMPILER_VERSION, Compiler version string\n@@ -2811,6 +2814,168 @@ end program test_cmplx\n \n \n \n+@node CO_MAX\n+@section @code{CO_MAX} --- Maximal value on the current set of images\n+@fnindex CO_MAX\n+@cindex Collectives, maximal value\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{CO_MAX} determines element-wise the maximal value of @var{A} on all\n+images of the current team.  If @var{RESULT_IMAGE} is present, the maximum\n+values are returned on in @var{A} on the specified image only and the value\n+of @var{A} on the other images become undefined.  If @var{RESULT_IMAGE} is\n+not present, the value is returned on all images.  If the execution was\n+successful and @var{STAT} is present, it is assigned the value zero.  If the\n+execution failed, @var{STAT} gets assigned a nonzero value and, if present,\n+@var{ERRMSG} gets assigned a value describing the occurred error.\n+\n+@item @emph{Standard}:\n+Technical Specification (TS) 18508 or later\n+\n+@item @emph{Class}:\n+Collective subroutine\n+\n+@item @emph{Syntax}:\n+@code{CALL CO_MAX(A [, RESULT_IMAGE, STAT, ERRMSG])}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .70\n+@item @var{A}            @tab shall be an integer, real or character variable,\n+which has the same type and type parameters on all images of the team.\n+@item @var{RESULT_IMAGE} @tab (optional) a scalar integer expression; if\n+present, it shall have the same the same value on all images and refer to an\n+image of the current team.\n+@item @var{STAT}         @tab (optional) a scalar integer variable\n+@item @var{ERRMSG}       @tab (optional) a scalar character variable\n+@end multitable\n+\n+@item @emph{Example}:\n+@smallexample\n+program test\n+  integer :: val\n+  val = this_image ()\n+  call co_max (val, result_image=1)\n+  if (this_image() == 1) then\n+    write(*,*) \"Maximal value\", val  ! prints num_images()\n+  end if\n+end program test\n+@end smallexample\n+\n+@item @emph{See also}:\n+@ref{CO_MIN}, @ref{CO_SUM}\n+@end table\n+\n+\n+\n+@node CO_MIN\n+@section @code{CO_MIN} --- Minimal value on the current set of images\n+@fnindex CO_MIN\n+@cindex Collectives, minimal value\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{CO_MIN} determines element-wise the minimal value of @var{A} on all\n+images of the current team.  If @var{RESULT_IMAGE} is present, the minimal\n+values are returned on in @var{A} on the specified image only and the value\n+of @var{A} on the other images become undefined.  If @var{RESULT_IMAGE} is\n+not present, the value is returned on all images.  If the execution was\n+successful and @var{STAT} is present, it is assigned the value zero.  If the\n+execution failed, @var{STAT} gets assigned a nonzero value and, if present,\n+@var{ERRMSG} gets assigned a value describing the occurred error.\n+\n+@item @emph{Standard}:\n+Technical Specification (TS) 18508 or later\n+\n+@item @emph{Class}:\n+Collective subroutine\n+\n+@item @emph{Syntax}:\n+@code{CALL CO_MIN(A [, RESULT_IMAGE, STAT, ERRMSG])}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .70\n+@item @var{A}            @tab shall be an integer, real or character variable,\n+which has the same type and type parameters on all images of the team.\n+@item @var{RESULT_IMAGE} @tab (optional) a scalar integer expression; if\n+present, it shall have the same the same value on all images and refer to an\n+image of the current team.\n+@item @var{STAT}         @tab (optional) a scalar integer variable\n+@item @var{ERRMSG}       @tab (optional) a scalar character variable\n+@end multitable\n+\n+@item @emph{Example}:\n+@smallexample\n+program test\n+  integer :: val\n+  val = this_image ()\n+  call co_min (val, result_image=1)\n+  if (this_image() == 1) then\n+    write(*,*) \"Minimal value\", val  ! prints 1\n+  end if\n+end program test\n+@end smallexample\n+\n+@item @emph{See also}:\n+@ref{CO_MAX}, @ref{CO_SUM}\n+@end table\n+\n+\n+\n+@node CO_SUM\n+@section @code{CO_SUM} --- Sum of values on the current set of images\n+@fnindex CO_SUM\n+@cindex Collectives, sum of values\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{CO_SUM} sums up the values of each element of @var{A} on all\n+images of the current team.  If @var{RESULT_IMAGE} is present, the summed-up\n+values are returned on in @var{A} on the specified image only and the value\n+of @var{A} on the other images become undefined.  If @var{RESULT_IMAGE} is\n+not present, the value is returned on all images.  If the execution was\n+successful and @var{STAT} is present, it is assigned the value zero.  If the\n+execution failed, @var{STAT} gets assigned a nonzero value and, if present,\n+@var{ERRMSG} gets assigned a value describing the occurred error.\n+\n+@item @emph{Standard}:\n+Technical Specification (TS) 18508 or later\n+\n+@item @emph{Class}:\n+Collective subroutine\n+\n+@item @emph{Syntax}:\n+@code{CALL CO_MIN(A [, RESULT_IMAGE, STAT, ERRMSG])}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .70\n+@item @var{A}            @tab shall be an integer, real or complex variable,\n+which has the same type and type parameters on all images of the team.\n+@item @var{RESULT_IMAGE} @tab (optional) a scalar integer expression; if\n+present, it shall have the same the same value on all images and refer to an\n+image of the current team.\n+@item @var{STAT}         @tab (optional) a scalar integer variable\n+@item @var{ERRMSG}       @tab (optional) a scalar character variable\n+@end multitable\n+\n+@item @emph{Example}:\n+@smallexample\n+program test\n+  integer :: val\n+  val = this_image ()\n+  call co_sum (val, result_image=1)\n+  if (this_image() == 1) then\n+    write(*,*) \"The sum is \", val ! prints (n**2 + n)/2, with n = num_images()\n+  end if\n+end program test\n+@end smallexample\n+\n+@item @emph{See also}:\n+@ref{CO_MAX}, @ref{CO_MIN}\n+@end table\n+\n+\n+\n @node COMMAND_ARGUMENT_COUNT\n @section @code{COMMAND_ARGUMENT_COUNT} --- Get number of command line arguments\n @fnindex COMMAND_ARGUMENT_COUNT"}, {"sha": "4c7d4a3bef037a008f8a0e3fc766576e5564aa97", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "patch": "@@ -402,7 +402,7 @@ language standard, and warnings are given for the Fortran 77 features\n that are permitted but obsolescent in later standards. @samp{-std=f2008ts}\n allows the Fortran 2008 standard including the additions of the \n Technical Specification (TS) 29113 on Further Interoperability of Fortran\n-with C.\n+with C and TS 18508 on Additional Parallel Features in Fortran.\n \n @end table\n "}, {"sha": "5dd5d2aa2929dbda074c8ee48bbd98cfc736e531", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "patch": "@@ -131,6 +131,9 @@ tree gfor_fndecl_caf_sync_all;\n tree gfor_fndecl_caf_sync_images;\n tree gfor_fndecl_caf_error_stop;\n tree gfor_fndecl_caf_error_stop_str;\n+tree gfor_fndecl_co_max;\n+tree gfor_fndecl_co_min;\n+tree gfor_fndecl_co_sum;\n \n \n /* Math functions.  Many other math functions are handled in\n@@ -3280,12 +3283,12 @@ gfc_build_builtin_function_decls (void)\n \n       gfor_fndecl_caf_sync_all = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_sync_all\")), \".WW\", void_type_node,\n-\t3, pint_type, build_pointer_type (pchar_type_node), integer_type_node);\n+\t3, pint_type, pchar_type_node, integer_type_node);\n \n       gfor_fndecl_caf_sync_images = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_sync_images\")), \".RRWW\", void_type_node,\n \t5, integer_type_node, pint_type, pint_type,\n-\tbuild_pointer_type (pchar_type_node), integer_type_node);\n+\tpchar_type_node, integer_type_node);\n \n       gfor_fndecl_caf_error_stop = gfc_build_library_function_decl (\n \tget_identifier (PREFIX(\"caf_error_stop\")),\n@@ -3298,6 +3301,21 @@ gfc_build_builtin_function_decls (void)\n \tvoid_type_node, 2, pchar_type_node, gfc_int4_type_node);\n       /* CAF's ERROR STOP doesn't return.  */\n       TREE_THIS_VOLATILE (gfor_fndecl_caf_error_stop_str) = 1;\n+\n+      gfor_fndecl_co_max = gfc_build_library_function_decl_with_spec (\n+\tget_identifier (PREFIX(\"caf_co_max\")), \"WR.WW\",\n+\tvoid_type_node, 7, pvoid_type_node, pvoid_type_node, integer_type_node,\n+\tpint_type, pchar_type_node, integer_type_node, integer_type_node);\n+\n+      gfor_fndecl_co_min = gfc_build_library_function_decl_with_spec (\n+\tget_identifier (PREFIX(\"caf_co_min\")), \"WR.WW\",\n+\tvoid_type_node, 7, pvoid_type_node, pvoid_type_node, integer_type_node,\n+\tpint_type, pchar_type_node, integer_type_node, integer_type_node);\n+\n+      gfor_fndecl_co_sum = gfc_build_library_function_decl_with_spec (\n+\tget_identifier (PREFIX(\"caf_co_sum\")), \"WR.WW\",\n+\tvoid_type_node, 6, pvoid_type_node, pvoid_type_node, integer_type_node,\n+\tpint_type, pchar_type_node, integer_type_node);\n     }\n \n   gfc_build_intrinsic_function_decls ();"}, {"sha": "755d3d42ae361ec417392a316a97595a5b026bc6", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "patch": "@@ -7508,6 +7508,124 @@ gfc_walk_intrinsic_function (gfc_ss * ss, gfc_expr * expr,\n }\n \n \n+static tree\n+conv_co_minmaxsum (gfc_code *code)\n+{\n+  gfc_se argse;\n+  stmtblock_t block, post_block;\n+  tree fndecl, array, vec, strlen, image_index, stat, errmsg, errmsg_len;\n+\n+  gfc_start_block (&block);\n+  gfc_init_block (&post_block);\n+\n+  /* stat.  */\n+  if (code->ext.actual->next->next->expr)\n+    {\n+      gfc_init_se (&argse, NULL);\n+      gfc_conv_expr (&argse, code->ext.actual->next->next->expr);\n+      gfc_add_block_to_block (&block, &argse.pre);\n+      gfc_add_block_to_block (&post_block, &argse.post);\n+      stat = argse.expr;\n+      if (gfc_option.coarray != GFC_FCOARRAY_SINGLE)\n+\tstat = gfc_build_addr_expr (NULL_TREE, stat);\n+    }\n+  else if (gfc_option.coarray == GFC_FCOARRAY_SINGLE)\n+    stat = NULL_TREE;\n+  else\n+    stat = null_pointer_node;\n+\n+  /* Early exit for GFC_FCOARRAY_SINGLE.  */\n+  if (gfc_option.coarray == GFC_FCOARRAY_SINGLE)\n+    {\n+      if (stat != NULL_TREE)\n+\tgfc_add_modify (&block, stat,\n+\t\t\tfold_convert (TREE_TYPE (stat), integer_zero_node));\n+      return gfc_finish_block (&block);\n+    }\n+\n+  /* Handle the array.  */\n+  gfc_init_se (&argse, NULL);\n+  if (code->ext.actual->expr->rank == 0)\n+    {\n+      symbol_attribute attr;\n+      gfc_clear_attr (&attr);\n+      gfc_init_se (&argse, NULL);\n+      gfc_conv_expr (&argse, code->ext.actual->expr);\n+      gfc_add_block_to_block (&block, &argse.pre);\n+      gfc_add_block_to_block (&post_block, &argse.post);\n+      array = gfc_conv_scalar_to_descriptor (&argse, argse.expr, attr);\n+      array = gfc_build_addr_expr (NULL_TREE, array);\n+    }\n+  else\n+    {\n+      argse.want_pointer = 1;\n+      gfc_conv_expr_descriptor (&argse, code->ext.actual->expr);\n+      array = argse.expr;\n+    }\n+  gfc_add_block_to_block (&block, &argse.pre);\n+  gfc_add_block_to_block (&post_block, &argse.post);\n+\n+  if (code->ext.actual->expr->ts.type == BT_CHARACTER)\n+    strlen = argse.string_length;\n+  else\n+    strlen = integer_zero_node;\n+\n+  vec = null_pointer_node;\n+\n+  /* image_index.  */\n+  if (code->ext.actual->next->expr)\n+    {\n+      gfc_init_se (&argse, NULL);\n+      gfc_conv_expr (&argse, code->ext.actual->next->expr);\n+      gfc_add_block_to_block (&block, &argse.pre);\n+      gfc_add_block_to_block (&post_block, &argse.post);\n+      image_index = fold_convert (integer_type_node, argse.expr);\n+    }\n+  else\n+    image_index = integer_zero_node;\n+\n+  /* errmsg.  */\n+  if (code->ext.actual->next->next->next->expr)\n+    {\n+      gfc_init_se (&argse, NULL);\n+      gfc_conv_expr (&argse, code->ext.actual->next->next->next->expr);\n+      gfc_add_block_to_block (&block, &argse.pre);\n+      gfc_add_block_to_block (&post_block, &argse.post);\n+      errmsg = argse.expr;\n+      errmsg_len = fold_convert (integer_type_node, argse.string_length);\n+    }\n+  else\n+    {\n+      errmsg = null_pointer_node;\n+      errmsg_len = integer_zero_node;\n+    }\n+\n+  /* Generate the function call.  */\n+  if (code->resolved_isym->id == GFC_ISYM_CO_MAX)\n+    fndecl = gfor_fndecl_co_max;\n+  else if (code->resolved_isym->id == GFC_ISYM_CO_MIN)\n+    fndecl = gfor_fndecl_co_min;\n+  else\n+    {\n+      gcc_assert (code->resolved_isym->id == GFC_ISYM_CO_SUM);\n+      fndecl = gfor_fndecl_co_sum;\n+    }\n+\n+  if (code->resolved_isym->id == GFC_ISYM_CO_SUM)\n+    fndecl = build_call_expr_loc (input_location, fndecl, 6, array, vec,\n+\t\t\t\t  image_index, stat, errmsg, errmsg_len);\n+  else\n+    fndecl = build_call_expr_loc (input_location, fndecl, 7, array, vec,\n+\t\t\t\t  image_index, stat, errmsg, strlen,\n+\t\t\t\t  errmsg_len);\n+  gfc_add_expr_to_block (&block, fndecl);\n+  gfc_add_block_to_block (&block, &post_block);\n+\n+  /* Add CALL to CO_SUM/MIN/MAX: array descriptor, vector descriptor, stat, errmsg, strlen, errmsglen */\n+  return gfc_finish_block (&block);\n+}\n+\n+\n static tree\n conv_intrinsic_atomic_def (gfc_code *code)\n {\n@@ -7803,6 +7921,11 @@ gfc_conv_intrinsic_subroutine (gfc_code *code)\n       res = conv_isocbinding_subroutine (code);\n       break;\n \n+    case GFC_ISYM_CO_MIN:\n+    case GFC_ISYM_CO_MAX:\n+    case GFC_ISYM_CO_SUM:\n+      res = conv_co_minmaxsum (code);\n+      break;\n \n     default:\n       res = NULL_TREE;"}, {"sha": "baae780ed6a299fb7da9c07b52518228086fc09f", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "patch": "@@ -709,6 +709,9 @@ extern GTY(()) tree gfor_fndecl_caf_sync_all;\n extern GTY(()) tree gfor_fndecl_caf_sync_images;\n extern GTY(()) tree gfor_fndecl_caf_error_stop;\n extern GTY(()) tree gfor_fndecl_caf_error_stop_str;\n+extern GTY(()) tree gfor_fndecl_co_max;\n+extern GTY(()) tree gfor_fndecl_co_min;\n+extern GTY(()) tree gfor_fndecl_co_sum;\n \n \n /* Math functions.  Many other math functions are handled in"}, {"sha": "7ea4d9ea91d4593b409520c39bae0f7bbb8e863e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "patch": "@@ -1,3 +1,20 @@\n+2014-05-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/coarray_collectives_1.f90: New.\n+\t* gfortran.dg/coarray_collectives_2.f90: New.\n+\t* gfortran.dg/coarray_collectives_3.f90: New.\n+\t* gfortran.dg/coarray_collectives_4.f90: New.\n+\t* gfortran.dg/coarray_collectives_5.f90: New.\n+\t* gfortran.dg/coarray_collectives_6.f90: New.\n+\t* gfortran.dg/coarray/collectives_1.f90: New.\n+\t* gfortran.dg/assumed_rank_5.f90: Update dg-error.\n+\t* gfortran.dg/assumed_type_4.f90: Update dg-error.\n+\t* gfortran.dg/bind_c_array_params.f03: Update dg-error.\n+\t* gfortran.dg/bind_c_usage_28.f90: Update dg-error.\n+\t* gfortran.dg/c_funloc_tests_5.f03: Update dg-error.\n+\t* gfortran.dg/c_funloc_tests_6.f90: Update dg-error.\n+\t* gfortran.dg/c_loc_tests_11.f03: Update dg-error.\n+\n 2014-05-08  Wei Mi  <wmi@google.com>\n \n \tPR target/58066\n@@ -564,7 +581,7 @@\n \n 2014-04-28  Martin Jambor  <mjambor@suse.cz>\n \n-        * gcc.dg/tree-ssa/sra-14.c: New test.\n+\t* gcc.dg/tree-ssa/sra-14.c: New test.\n \n 2014-04-28  Richard Biener  <rguenther@suse.de>\n \n@@ -613,10 +630,10 @@\n \n 2014-04-25  Cary Coutant  <ccoutant@google.com>\n \n-        PR debug/60929\n-        * g++.dg/debug/dwarf2/dwarf4-nested.C: New test case.\n-        * g++.dg/debug/dwarf2/dwarf4-typedef.C: Add\n-        -fdebug-types-section flag.\n+\tPR debug/60929\n+\t* g++.dg/debug/dwarf2/dwarf4-nested.C: New test case.\n+\t* g++.dg/debug/dwarf2/dwarf4-typedef.C: Add\n+\t-fdebug-types-section flag.\n \n 2014-04-25  Jiong Wang  <jiong.wang@arm.com>\n "}, {"sha": "f3d633d12ab96920c5bf27718c362512c1e3eab7", "filename": "gcc/testsuite/gfortran.dg/assumed_rank_5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_5.f90?ref=d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "patch": "@@ -5,5 +5,5 @@\n !\n !\n subroutine foo(x)\n-  integer :: x(..)  ! { dg-error \"TS 29113: Assumed-rank array\" }\n+  integer :: x(..)  ! { dg-error \"TS 29113/TS 18508: Assumed-rank array\" }\n end subroutine foo"}, {"sha": "e940c4540399664bfbec5dff7ec08466b849fbf0", "filename": "gcc/testsuite/gfortran.dg/assumed_type_4.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_4.f90?ref=d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "patch": "@@ -6,5 +6,5 @@\n ! Test TYPE(*)\n \n subroutine one(a)\n-  type(*)  :: a ! { dg-error \"TS 29113: Assumed type\" }\n+  type(*)  :: a ! { dg-error \"TS 29113/TS 18508: Assumed type\" }\n end subroutine one"}, {"sha": "16045170bf852e27870c88c89a14378a88b4689c", "filename": "gcc/testsuite/gfortran.dg/bind_c_array_params.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_array_params.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_array_params.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_array_params.f03?ref=d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "patch": "@@ -5,11 +5,11 @@ module bind_c_array_params\n implicit none\n \n contains\n-  subroutine sub0(assumed_array) bind(c) ! { dg-error \"TS 29113: Assumed-shape array 'assumed_array' at .1. as dummy argument to the BIND.C. procedure 'sub0'\" }\n+  subroutine sub0(assumed_array) bind(c) ! { dg-error \"TS 29113/TS 18508: Assumed-shape array 'assumed_array' at .1. as dummy argument to the BIND.C. procedure 'sub0'\" }\n     integer(c_int), dimension(:) :: assumed_array\n   end subroutine sub0\n \n-  subroutine sub1(deferred_array) bind(c) ! { dg-error \"TS 29113: Variable 'deferred_array' at .1. with POINTER attribute in procedure 'sub1' with BIND.C.\" }\n+  subroutine sub1(deferred_array) bind(c) ! { dg-error \"TS 29113/TS 18508: Variable 'deferred_array' at .1. with POINTER attribute in procedure 'sub1' with BIND.C.\" }\n     integer(c_int), pointer :: deferred_array(:)\n   end subroutine sub1\n end module bind_c_array_params"}, {"sha": "bb9b5e85f7d85c530d622ade88185983a51d90cf", "filename": "gcc/testsuite/gfortran.dg/bind_c_usage_28.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_28.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_28.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_28.f90?ref=d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "patch": "@@ -8,11 +8,11 @@\n   integer :: i\n end type\n interface\n-     subroutine psub(this) bind(c, name='Psub') ! { dg-error \"TS 29113: Variable 'this' at .1. with POINTER attribute in procedure 'psub' with BIND.C.\" }\n+     subroutine psub(this) bind(c, name='Psub') ! { dg-error \"TS 29113/TS 18508: Variable 'this' at .1. with POINTER attribute in procedure 'psub' with BIND.C.\" }\n        import :: c_float, cstruct\n        real(c_float), pointer  :: this(:)\n      end subroutine psub\n-     subroutine psub2(that) bind(c, name='Psub2') ! { dg-error \"TS 29113: Variable 'that' at .1. with ALLOCATABLE attribute in procedure 'psub2' with BIND.C.\" }\n+     subroutine psub2(that) bind(c, name='Psub2') ! { dg-error \"TS 29113/TS 18508: Variable 'that' at .1. with ALLOCATABLE attribute in procedure 'psub2' with BIND.C.\" }\n        import :: c_float, cstruct\n        type(cstruct), allocatable  :: that(:)\n      end subroutine psub2"}, {"sha": "8c1843bdf1dd442403214d18162d946683780e06", "filename": "gcc/testsuite/gfortran.dg/c_funloc_tests_5.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funloc_tests_5.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funloc_tests_5.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funloc_tests_5.f03?ref=d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "patch": "@@ -8,9 +8,9 @@ module c_funloc_tests_5\n   subroutine sub0() bind(c)\n     type(c_funptr) :: my_c_funptr\n \n-    my_c_funptr = c_funloc(sub1) ! { dg-error \"TS 29113: Noninteroperable procedure at .1. to C_FUNLOC\" }\n+    my_c_funptr = c_funloc(sub1) ! { dg-error \"TS 29113/TS 18508: Noninteroperable procedure at .1. to C_FUNLOC\" }\n \n-    my_c_funptr = c_funloc(func0) ! { dg-error \"TS 29113: Noninteroperable procedure at .1. to C_FUNLOC\" }\n+    my_c_funptr = c_funloc(func0) ! { dg-error \"TS 29113/TS 18508: Noninteroperable procedure at .1. to C_FUNLOC\" }\n   end subroutine sub0\n \n   subroutine sub1() "}, {"sha": "d426e81a862d99198f92bc1d189d079e47651ccc", "filename": "gcc/testsuite/gfortran.dg/c_funloc_tests_6.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funloc_tests_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funloc_tests_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funloc_tests_6.f90?ref=d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "patch": "@@ -26,6 +26,6 @@ end subroutine sub\n call c_f_pointer (cfp, int)     ! { dg-error \"Argument CPTR at .1. to C_F_POINTER shall have the type TYPE.C_PTR.\" }\n call c_f_procpointer (cp, fsub) ! { dg-error \"Argument CPTR at .1. to C_F_PROCPOINTER shall have the type TYPE.C_FUNPTR.\" }\n \n-cfp = c_funloc (noCsub) ! { dg-error \"TS 29113: Noninteroperable procedure at .1. to C_FUNLOC\" }\n-call c_f_procpointer (cfp, fint) ! { dg-error \"TS 29113: Noninteroperable procedure pointer at .1. to C_F_PROCPOINTER\" }\n+cfp = c_funloc (noCsub) ! { dg-error \"TS 29113/TS 18508: Noninteroperable procedure at .1. to C_FUNLOC\" }\n+call c_f_procpointer (cfp, fint) ! { dg-error \"TS 29113/TS 18508: Noninteroperable procedure pointer at .1. to C_F_PROCPOINTER\" }\n end"}, {"sha": "d009ce09652e8d463646e5214541a3ad569abcaf", "filename": "gcc/testsuite/gfortran.dg/c_loc_tests_11.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_11.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_11.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_11.f03?ref=d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "patch": "@@ -43,7 +43,7 @@ type(c_ptr) function get_foo_address(handle)\n     integer(c_int), intent(in) :: handle    \n     get_foo_address = c_loc(foo_pool(handle)%v)\n \n-    get_foo_address = c_loc(foo_pool2(handle)%v) ! { dg-error \"TS 29113: Noninteroperable array at .1. as argument to C_LOC: Expression is a noninteroperable derived type\" }\n+    get_foo_address = c_loc(foo_pool2(handle)%v) ! { dg-error \"TS 29113/TS 18508: Noninteroperable array at .1. as argument to C_LOC: Expression is a noninteroperable derived type\" }\n   end function get_foo_address\n \n     "}, {"sha": "140493891672b330e614e23f0b63a5b225372ed8", "filename": "gcc/testsuite/gfortran.dg/coarray/collectives_1.f90", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fcollectives_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fcollectives_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fcollectives_1.f90?ref=d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "patch": "@@ -0,0 +1,44 @@\n+! { dg-do run }\n+!\n+! CO_SUM/CO_MIN/CO_MAX\n+!\n+program test\n+  implicit none\n+  intrinsic co_max\n+  intrinsic co_min\n+  intrinsic co_sum\n+  call test_min\n+  call test_max\n+  call test_sum\n+contains\n+  subroutine test_min\n+    integer :: val\n+    val = this_image ()\n+    call co_max (val, result_image=1)\n+    if (this_image() == 1) then\n+      !write(*,*) \"Maximal value\", val\n+      if (val /= num_images()) call abort()\n+    end if\n+  end subroutine test_min\n+\n+  subroutine test_max\n+    integer :: val\n+    val = this_image ()\n+    call co_min (val, result_image=1)\n+    if (this_image() == 1) then\n+      !write(*,*) \"Minimal value\", val\n+      if (val /= 1) call abort()\n+    end if\n+  end subroutine test_max\n+\n+  subroutine test_sum\n+    integer :: val, n\n+    val = this_image ()\n+    call co_sum (val, result_image=1)\n+    if (this_image() == 1) then\n+      !write(*,*) \"The sum is \", val\n+      n = num_images()\n+      if (val /= (n**2 + n)/2) call abort()\n+    end if\n+  end subroutine test_sum\n+end program test"}, {"sha": "a09a81f6b1d067b6b7b04397be301fb670249072", "filename": "gcc/testsuite/gfortran.dg/coarray_collectives_1.f90", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_1.f90?ref=d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "patch": "@@ -0,0 +1,38 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=single\" }\n+!\n+!\n+! CO_SUM/CO_MIN/CO_MAX\n+!\n+program test\n+  implicit none\n+  intrinsic co_max\n+  intrinsic co_min\n+  intrinsic co_sum\n+  integer :: val, i\n+  character(len=30) :: errmsg\n+  integer(8) :: i8\n+  character(len=19, kind=4) :: msg4\n+\n+  call co_sum(\"abc\") ! { dg-error \"must be a numeric type\" }\n+  call co_max(cmplx(1.0,0.0)) ! { dg-error \"shall be of type integer, real or character\" }\n+  call co_min(cmplx(0.0,1.0)) ! { dg-error \"shall be of type integer, real or character\" }\n+\n+  call co_sum(1) ! { dg-error \"must be a variable\" }\n+  call co_min(\"abc\") ! { dg-error \"must be a variable\" }\n+  call co_max(2.3) ! { dg-error \"must be a variable\" }\n+\n+  call co_sum(val, result_image=[1,2]) ! { dg-error \"must be a scalar\" }\n+  call co_sum(val, result_image=1.0) ! { dg-error \"must be INTEGER\" }\n+  call co_min(val, stat=[1,2]) ! { dg-error \"must be a scalar\" }\n+  call co_min(val, stat=1.0) ! { dg-error \"must be INTEGER\" }\n+  call co_min(val, stat=1) ! { dg-error \"must be a variable\" }\n+  call co_min(val, stat=i, result_image=1) ! OK\n+  call co_max(val, stat=i, errmsg=errmsg, result_image=1) ! OK\n+  call co_max(val, stat=i, errmsg=[errmsg], result_image=1) ! { dg-error \"must be a scalar\" }\n+  call co_max(val, stat=i, errmsg=5, result_image=1) ! { dg-error \"must be CHARACTER\" }\n+  call co_sum(val, errmsg=\"abc\") ! { dg-error \"must be a variable\" }\n+\n+  call co_sum(val, stat=i8) ! { dg-error \"The stat= argument at .1. must be a kind=4 integer variable\" }\n+  call co_min(val, errmsg=msg4) ! { dg-error \"The errmsg= argument at .1. must be a default-kind character variable\" }\n+end program test"}, {"sha": "7494d3d4ada5bd76a6592a600647c5854963f1cd", "filename": "gcc/testsuite/gfortran.dg/coarray_collectives_2.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_2.f90?ref=d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=single -std=f2008\" }\n+!\n+!\n+! CO_SUM/CO_MIN/CO_MAX\n+!\n+program test\n+  implicit none\n+  intrinsic co_max ! { dg-error \"is not available in the current standard settings but new in TS 29113/TS 18508.\" }\n+  intrinsic co_min ! { dg-error \"is not available in the current standard settings but new in TS 29113/TS 18508.\" }\n+  intrinsic co_sum ! { dg-error \"is not available in the current standard settings but new in TS 29113/TS 18508.\" }\n+end program test"}, {"sha": "971ee6ad1706e353d126ae6539664fb66e101b3b", "filename": "gcc/testsuite/gfortran.dg/coarray_collectives_3.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_3.f90?ref=d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do compile }\n+!\n+! CO_SUM/CO_MIN/CO_MAX\n+!\n+program test\n+  implicit none\n+  intrinsic co_max\n+  integer :: val\n+  call co_max(val) ! { dg-error \"Coarrays disabled at .1., use -fcoarray= to enable\" }\n+end program test"}, {"sha": "8b3da94642afbc2e05b159f97ed30b4f9c8e85a5", "filename": "gcc/testsuite/gfortran.dg/coarray_collectives_4.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_4.f90?ref=d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original -fcoarray=single\" }\n+!\n+! CO_SUM/CO_MIN/CO_MAX\n+!\n+program test\n+  implicit none\n+  intrinsic co_max\n+  integer :: stat1, stat2, stat3\n+  real :: val\n+  call co_max(val, stat=stat1)\n+  call co_min(val, stat=stat2)\n+  call co_sum(val, stat=stat3)\n+end program test\n+\n+! { dg-final { scan-tree-dump-times \"stat1 = 0;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"stat2 = 0;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"stat3 = 0;\" 1 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }\n+"}, {"sha": "15894d28ad00dfb6d402d6991418d125df1c5d14", "filename": "gcc/testsuite/gfortran.dg/coarray_collectives_5.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_5.f90?ref=d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original -fcoarray=lib\" }\n+!\n+! CO_SUM/CO_MIN/CO_MAX\n+!\n+program test\n+  implicit none\n+  intrinsic co_max\n+  integer :: stat1, stat2, stat3\n+  real :: val\n+  call co_max(val, stat=stat1)\n+  call co_min(val, stat=stat2)\n+  call co_sum(val, stat=stat3)\n+end program test\n+\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_co_max \\\\(&desc.., 0B, 0, &stat1, 0B, 0, 0\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_co_min \\\\(&desc.., 0B, 0, &stat2, 0B, 0, 0\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_co_sum \\\\(&desc.., 0B, 0, &stat3, 0B, 0\\\\);\" 1 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "630ce9d53f99187a4f3ded084229c8a9376d7bb1", "filename": "gcc/testsuite/gfortran.dg/coarray_collectives_6.f90", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_6.f90?ref=d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "patch": "@@ -0,0 +1,26 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original -fcoarray=lib\" }\n+!\n+! CO_SUM/CO_MIN/CO_MAX\n+!\n+program test\n+  implicit none\n+  intrinsic co_max\n+  integer :: stat1, stat2, stat3\n+  character(len=6) :: errmesg1\n+  character(len=7) :: errmesg2\n+  character(len=8) :: errmesg3\n+  real :: val1\n+  complex, allocatable :: val2(:)\n+  character(len=99) :: val3\n+  integer :: res\n+\n+  call co_max(val1, stat=stat1, errmsg=errmesg1)\n+  call co_sum(val2, result_image=4, stat=stat2, errmsg=errmesg2)\n+  call co_min(val3, result_image=res,stat=stat3, errmsg=errmesg3)\n+end program test\n+\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_co_max \\\\(&desc.., 0B, 0, &stat1, errmesg1, 0, 6\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_co_sum \\\\(&val2, 0B, 4, &stat2, errmesg2, 7\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_co_min \\\\(&desc.., 0B, res, &stat3, errmesg3, 99, 8\\\\);\" 1 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "1b17c28c1c14128fdc0aa3d3eb5d6a3a7d0f255d", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "patch": "@@ -1,3 +1,9 @@\n+2014-05-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* caf/libcaf.h (caf_vector_t, _gfortran_caf_co_sum,\n+\t_gfortran_caf_co_min, _gfortran_caf_co_max): Declare\n+\t* caf/single.c\n+\n 2014-05-06  Jerry DeLisle  <jvdelisle@gcc.gnu>\n \n \tPR libfortran/61049"}, {"sha": "f60eebc7b802c1face62cf3cd60268b4790b5dee", "filename": "libgfortran/caf/libcaf.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/libgfortran%2Fcaf%2Flibcaf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/libgfortran%2Fcaf%2Flibcaf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Flibcaf.h?ref=d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "patch": "@@ -65,6 +65,17 @@ typedef struct caf_static_t {\n }\n caf_static_t;\n \n+typedef struct caf_vector_t {\n+  size_t nvec;  /* size of the vector; 0 means dim triplet.  */\n+  union {\n+    struct {\n+      ptrdiff_t lower_bound, upper_bound, stride;\n+    } triplet;\n+    ptrdiff_t *vector;\n+  } u;\n+}\n+caf_vector_t;\n+\n \n void _gfortran_caf_init (int *, char ***);\n void _gfortran_caf_finalize (void);\n@@ -92,4 +103,10 @@ void _gfortran_caf_error_stop_str (const char *, int32_t)\n      __attribute__ ((noreturn));\n void _gfortran_caf_error_stop (int32_t) __attribute__ ((noreturn));\n \n+void _gfortran_caf_co_sum (void *, caf_vector_t *, int, int *, char *, int);\n+void _gfortran_caf_co_min (void *, caf_vector_t *, int, int *, char *, int,\n+\t\t\t   int);\n+void _gfortran_caf_co_max (void *, caf_vector_t *, int, int *, char *, int,\n+\t\t\t   int);\n+\n #endif  /* LIBCAF_H  */"}, {"sha": "b8833275d62c3d5ecf870757bc5d652802499720", "filename": "libgfortran/caf/single.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/libgfortran%2Fcaf%2Fsingle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33/libgfortran%2Fcaf%2Fsingle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Fsingle.c?ref=d62cf3dfbe72b168d9bde08b34e2a190cdf7eb33", "patch": "@@ -202,3 +202,39 @@ _gfortran_caf_error_stop (int32_t error)\n   fprintf (stderr, \"ERROR STOP %d\\n\", error);\n   exit (error);\n }\n+\n+\n+void\n+_gfortran_caf_co_sum (void *a __attribute__ ((unused)),\n+\t\t      caf_vector_t vector[] __attribute__ ((unused)),\n+\t\t      int result_image __attribute__ ((unused)),\n+\t\t      int *stat, char *errmsg __attribute__ ((unused)),\n+\t\t      int errmsg_len __attribute__ ((unused)))\n+{\n+  if (stat)\n+    stat = 0;\n+}\n+\n+void\n+_gfortran_caf_co_min (void *a __attribute__ ((unused)),\n+\t\t      caf_vector_t vector[] __attribute__ ((unused)),\n+\t\t      int result_image __attribute__ ((unused)),\n+\t\t      int *stat, char *errmsg __attribute__ ((unused)),\n+\t\t      int src_len __attribute__ ((unused)),\n+\t\t      int errmsg_len __attribute__ ((unused)))\n+{\n+  if (stat)\n+    stat = 0;\n+}\n+\n+void\n+_gfortran_caf_co_max (void *a __attribute__ ((unused)),\n+\t\t      caf_vector_t vector[] __attribute__ ((unused)),\n+\t\t      int result_image __attribute__ ((unused)),\n+\t\t      int *stat, char *errmsg __attribute__ ((unused)),\n+\t\t      int src_len __attribute__ ((unused)),\n+\t\t      int errmsg_len __attribute__ ((unused)))\n+{\n+  if (stat)\n+    stat = 0;\n+}"}]}