{"sha": "8cdea6ab132a3624569e3dd32eabff4d84fb5a25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNkZWE2YWIxMzJhMzYyNDU2OWUzZGQzMmVhYmZmNGQ4NGZiNWEyNQ==", "commit": {"author": {"name": "Shujing Zhao", "email": "pearly.zhao@oracle.com", "date": "2010-04-30T06:16:26Z"}, "committer": {"name": "Shujing Zhao", "email": "pzhao@gcc.gnu.org", "date": "2010-04-30T06:16:26Z"}, "message": "re PR c++/43779 (Parts of message not available for translation)\n\n2010-04-30  Shujing Zhao  <pearly.zhao@oracle.com>\n\n        PR c++/43779\n        * typeck.c (warn_args_num): New function.\n        (convert_arguments): Use warn_args_num to print the diagnostic\n        messages.\n\nFrom-SVN: r158919", "tree": {"sha": "c49bd712866a97c4cf438a468ac34ac0062e8133", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c49bd712866a97c4cf438a468ac34ac0062e8133"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cdea6ab132a3624569e3dd32eabff4d84fb5a25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cdea6ab132a3624569e3dd32eabff4d84fb5a25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cdea6ab132a3624569e3dd32eabff4d84fb5a25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cdea6ab132a3624569e3dd32eabff4d84fb5a25/comments", "author": null, "committer": null, "parents": [{"sha": "10ab8f62dbcd15439b2c1a8b6114e4fb4281731a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10ab8f62dbcd15439b2c1a8b6114e4fb4281731a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10ab8f62dbcd15439b2c1a8b6114e4fb4281731a"}], "stats": {"total": 83, "additions": 48, "deletions": 35}, "files": [{"sha": "6a41a03a2c7787bff6599cf52d267e5b6be5306d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cdea6ab132a3624569e3dd32eabff4d84fb5a25/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cdea6ab132a3624569e3dd32eabff4d84fb5a25/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8cdea6ab132a3624569e3dd32eabff4d84fb5a25", "patch": "@@ -1,3 +1,10 @@\n+2010-04-30  Shujing Zhao  <pearly.zhao@oracle.com>\n+\n+\tPR c++/43779\n+\t* typeck.c (warn_args_num): New function.\n+\t(convert_arguments): Use warn_args_num to print the diagnostic\n+\tmessages. \n+\n 2010-04-29  Fabien Ch\u00eane  <fabien.chene@gmail.com>\n \n \tPR c++/43890"}, {"sha": "46bc34dbbb6e68f4e9dca91458ab87ac04c6503f", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 41, "deletions": 35, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cdea6ab132a3624569e3dd32eabff4d84fb5a25/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cdea6ab132a3624569e3dd32eabff4d84fb5a25/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=8cdea6ab132a3624569e3dd32eabff4d84fb5a25", "patch": "@@ -61,6 +61,7 @@ static void casts_away_constness_r (tree *, tree *);\n static bool casts_away_constness (tree, tree);\n static void maybe_warn_about_returning_address_of_local (tree);\n static tree lookup_destructor (tree, tree, tree);\n+static void warn_args_num (location_t, tree, bool);\n static int convert_arguments (tree, VEC(tree,gc) **, tree, int,\n                               tsubst_flags_t);\n \n@@ -3286,6 +3287,44 @@ cp_build_function_call_vec (tree function, VEC(tree,gc) **params,\n   return ret;\n }\n \f\n+/* Subroutine of convert_arguments.\n+   Warn about wrong number of args are genereted. */\n+\n+static void\n+warn_args_num (location_t loc, tree fndecl, bool too_many_p)\n+{\n+  if (fndecl)\n+    {\n+      if (TREE_CODE (TREE_TYPE (fndecl)) == METHOD_TYPE)\n+\t{\n+\t  if (DECL_NAME (fndecl) == NULL_TREE\n+\t      || IDENTIFIER_HAS_TYPE_VALUE (DECL_NAME (fndecl)))\n+\t    error_at (loc,\n+\t\t      too_many_p\n+\t\t      ? G_(\"too many arguments to constructor %q#D\")\n+\t\t      : G_(\"too few arguments to constructor %q#D\"),\n+\t\t      fndecl);\n+\t  else\n+\t    error_at (loc,\n+\t\t      too_many_p\n+\t\t      ? G_(\"too many arguments to member function %q#D\")\n+\t\t      : G_(\"too few arguments to member function %q#D\"),\n+\t\t      fndecl);\n+\t}\n+      else\n+\terror_at (loc,\n+\t\t  too_many_p\n+\t\t  ? G_(\"too many arguments to function %q#D\")\n+\t\t  : G_(\"too few arguments to function %q#D\"),\n+\t\t  fndecl);\n+      inform (DECL_SOURCE_LOCATION (fndecl),\n+\t      \"declared here\");\n+    }\n+  else\n+    error_at (loc, too_many_p ? G_(\"too many arguments to function\")\n+\t\t      \t      : G_(\"too few arguments to function\"));\n+}\n+\n /* Convert the actual parameter expressions in the list VALUES to the\n    types in the list TYPELIST.  The converted expressions are stored\n    back in the VALUES vector.\n@@ -3307,26 +3346,11 @@ convert_arguments (tree typelist, VEC(tree,gc) **values, tree fndecl,\n \t\t   int flags, tsubst_flags_t complain)\n {\n   tree typetail;\n-  const char *called_thing = 0;\n   unsigned int i;\n \n   /* Argument passing is always copy-initialization.  */\n   flags |= LOOKUP_ONLYCONVERTING;\n \n-  if (fndecl)\n-    {\n-      if (TREE_CODE (TREE_TYPE (fndecl)) == METHOD_TYPE)\n-\t{\n-\t  if (DECL_NAME (fndecl) == NULL_TREE\n-\t      || IDENTIFIER_HAS_TYPE_VALUE (DECL_NAME (fndecl)))\n-\t    called_thing = \"constructor\";\n-\t  else\n-\t    called_thing = \"member function\";\n-\t}\n-      else\n-\tcalled_thing = \"function\";\n-    }\n-\n   for (i = 0, typetail = typelist;\n        i < VEC_length (tree, *values);\n        i++)\n@@ -3341,15 +3365,7 @@ convert_arguments (tree typelist, VEC(tree,gc) **values, tree fndecl,\n \t{\n           if (complain & tf_error)\n             {\n-              if (fndecl)\n-                {\n-                  error_at (input_location, \"too many arguments to %s %q#D\", \n-\t\t\t    called_thing, fndecl);\n-\t\t  inform (DECL_SOURCE_LOCATION (fndecl),\n-\t\t\t  \"declared here\");\n-                }\n-              else\n-                error (\"too many arguments to function\");\n+\t      warn_args_num (input_location, fndecl, /*too_many_p=*/true);\n               return i;\n             }\n           else\n@@ -3454,17 +3470,7 @@ convert_arguments (tree typelist, VEC(tree,gc) **values, tree fndecl,\n       else\n \t{\n           if (complain & tf_error)\n-            {\n-              if (fndecl)\n-                {\n-                  error_at (input_location, \"too few arguments to %s %q#D\", \n-\t\t\t    called_thing, fndecl);\n-\t\t  inform (DECL_SOURCE_LOCATION (fndecl),\n-\t\t\t  \"declared here\");\n-                }\n-              else\n-                error (\"too few arguments to function\");\n-            }\n+\t    warn_args_num (input_location, fndecl, /*too_many_p=*/false);\n \t  return -1;\n \t}\n     }"}]}