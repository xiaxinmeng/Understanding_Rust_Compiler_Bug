{"sha": "c4fee1c646d52a9001a53fa0d4072db86b9be791", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRmZWUxYzY0NmQ1MmE5MDAxYTUzZmEwZDQwNzJkYjg2YjliZTc5MQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-15T00:16:54Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-15T00:16:54Z"}, "message": "Daily bump.", "tree": {"sha": "0a7ed48c7b7071ba37258d725fa3bc5a65bf3054", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a7ed48c7b7071ba37258d725fa3bc5a65bf3054"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4fee1c646d52a9001a53fa0d4072db86b9be791", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4fee1c646d52a9001a53fa0d4072db86b9be791", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4fee1c646d52a9001a53fa0d4072db86b9be791", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4fee1c646d52a9001a53fa0d4072db86b9be791/comments", "author": null, "committer": null, "parents": [{"sha": "69feb7601e86274fa9abbfb420b00c8adf947e7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69feb7601e86274fa9abbfb420b00c8adf947e7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69feb7601e86274fa9abbfb420b00c8adf947e7b"}], "stats": {"total": 265, "additions": 264, "deletions": 1}, "files": [{"sha": "e6c88f20c0ec975a56cace9c7c0169de9c1bc0c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fee1c646d52a9001a53fa0d4072db86b9be791/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fee1c646d52a9001a53fa0d4072db86b9be791/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4fee1c646d52a9001a53fa0d4072db86b9be791", "patch": "@@ -1,3 +1,133 @@\n+2021-07-14  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (adjacent_mem_locations): Return the lower\n+\taddressed memory rtx, if any.\n+\t(rs6000_split_multireg_move): Fix code formatting.\n+\tHandle MMA build built-ins with operands in adjacent memory locations.\n+\n+2021-07-14  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_split_multireg_move): Move to later\n+\tin the file.\n+\n+2021-07-14  Jason Merrill  <jason@redhat.com>\n+\n+\t* sel-sched-ir.h (get_all_loop_exits): Use auto_vec.\n+\n+2021-07-14  Jason Merrill  <jason@redhat.com>\n+\n+\t* doc/invoke.texi: -fdelete-dead-exceptions is on by default for\n+\tC++.\n+\n+2021-07-14  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* tree-vect-patterns.c (vect_recog_dot_prod_pattern):\n+\tRemove erroneous line.\n+\n+2021-07-14  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* params.opt (param_evrp_mode): Change default.\n+\n+2021-07-14  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (udot, sdot): Rename to...\n+\t(sdot_prod, udot_prod): ...These.\n+\t* config/aarch64/aarch64-simd.md (<sur>dot_prod<vsi2qi>): Remove.\n+\t(aarch64_<sur>dot<vsi2qi>): Rename to...\n+\t(<sur>dot_prod<vsi2qi>): ...This.\n+\t* config/aarch64/arm_neon.h (vdot_u32, vdotq_u32, vdot_s32, vdotq_s32):\n+\tUpdate builtins.\n+\n+2021-07-14  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/arm/neon.md (<sup>dot_prod<vsi2qi>): Drop statements.\n+\n+2021-07-14  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* doc/sourcebuild.texi (arm_v8_2a_i8mm_neon_hw): Document.\n+\n+2021-07-14  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/arm/neon.md (usdot_prod<vsi2qi>): New.\n+\n+2021-07-14  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_usdot<vsi2qi>): Rename to...\n+\t(usdot_prod<vsi2qi>): ... This.\n+\t* config/aarch64/aarch64-simd-builtins.def (usdot): Rename to...\n+\t(usdot_prod): ...This.\n+\t* config/aarch64/arm_neon.h (vusdot_s32, vusdotq_s32): Likewise.\n+\t* config/aarch64/aarch64-sve.md (@aarch64_<sur>dot_prod<vsi2qi>):\n+\tRename to...\n+\t(@<sur>dot_prod<vsi2qi>): ...This.\n+\t* config/aarch64/aarch64-sve-builtins-base.cc\n+\t(svusdot_impl::expand): Use it.\n+\n+2021-07-14  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* optabs.def (usdot_prod_optab): New.\n+\t* doc/md.texi: Document it and clarify other dot prod optabs.\n+\t* optabs-tree.h (enum optab_subtype): Add optab_vector_mixed_sign.\n+\t* optabs-tree.c (optab_for_tree_code): Support usdot_prod_optab.\n+\t* optabs.c (expand_widen_pattern_expr): Likewise.\n+\t* tree-cfg.c (verify_gimple_assign_ternary): Likewise.\n+\t* tree-vect-loop.c (vectorizable_reduction): Query dot-product kind.\n+\t* tree-vect-patterns.c (vect_supportable_direct_optab_p): Take optional\n+\toptab subtype.\n+\t(vect_widened_op_tree): Optionally ignore\n+\tmismatch types.\n+\t(vect_recog_dot_prod_pattern): Support usdot_prod_optab.\n+\n+2021-07-14  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/101395\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Check\n+\t\"arch [32|64]\" and \"tune [32|64]\" for 32-bit and 64-bit codegen.\n+\tEnable UINTR only for 64-bit codegen.\n+\t* config/i386/i386-options.c\n+\t(ix86_option_override_internal::DEF_PTA): Skip PTA_UINTR if not\n+\tin 64-bit mode.\n+\t* config/i386/i386.h (ARCH_ARG): New.\n+\t(CC1_CPU_SPEC): Pass \"[arch|tune] 32\" for 32-bit codegen and\n+\t\"[arch|tune] 64\" for 64-bit codegen.\n+\n+2021-07-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101445\n+\t* tree-vect-stmts.c (vectorizable_load): Do the gap adjustment\n+\tof the IV in the correct direction for negative stride\n+\taccesses.\n+\n+2021-07-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR go/101407\n+\t* godump.c (godump_str_hash): New type.\n+\t(godump_container::pot_dummy_types): Use string_hash instead of\n+\tptr_hash in the hash_set.\n+\n+2021-07-14  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-loop.c (vect_find_reusable_accumulator): Handle\n+\tvector types where the old vector type has a multiple of\n+\tthe new vector type elements.\n+\t(vect_create_partial_epilog): New function, split out from...\n+\t(vect_create_epilog_for_reduction): ... here.\n+\t(vect_transform_cycle_phi): Reduce the re-used accumulator\n+\tto the new vector type.\n+\n+2021-07-14  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* tree-ssa-alias.c (attr_fnspec::verify): Fix index in\n+\tnon-'t'-sized arg check.\n+\n+2021-07-14  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* tree-cfg.c (cleanup_dead_labels_eh): Update\n+\tpost_landing_pad label upon change of landing pad block's\n+\tprimary label.\n+\t(cleanup_dead_labels): Check that a removed label is not that\n+\tof a landing pad.\n+\n 2021-07-13  Jonathan Wright  <jonathan.wright@arm.com>\n \n \t* combine.c (combine_simplify_rtx): Add vec_select -> subreg"}, {"sha": "9070a2a21d5d697d20bc140dd38cdadad788bd80", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fee1c646d52a9001a53fa0d4072db86b9be791/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fee1c646d52a9001a53fa0d4072db86b9be791/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=c4fee1c646d52a9001a53fa0d4072db86b9be791", "patch": "@@ -1 +1 @@\n-20210714\n+20210715"}, {"sha": "f98bf2b208ff4192057e0ceedc8d35abed2ec3f9", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fee1c646d52a9001a53fa0d4072db86b9be791/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fee1c646d52a9001a53fa0d4072db86b9be791/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=c4fee1c646d52a9001a53fa0d4072db86b9be791", "patch": "@@ -1,3 +1,7 @@\n+2021-07-14  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-opts.c (c_common_post_options): Set -fdelete-dead-exceptions.\n+\n 2021-07-06  Martin Sebor  <msebor@redhat.com>\n \n \t* c-format.c (gcc_tdiag_char_table): Remove support for %G and %K."}, {"sha": "a80d236ba9ae280bc213a51ea3fde0e5d798e162", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fee1c646d52a9001a53fa0d4072db86b9be791/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fee1c646d52a9001a53fa0d4072db86b9be791/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c4fee1c646d52a9001a53fa0d4072db86b9be791", "patch": "@@ -1,3 +1,38 @@\n+2021-07-14  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/88252\n+\t* cp-tree.h (TEMPLATE_TYPE_PARM_FOR_CLASS): Remove.\n+\t* pt.c (push_template_decl): Remove TEMPLATE_TYPE_PARM_FOR_CLASS\n+\thandling.\n+\t(redeclare_class_template): Likewise.\n+\t(forwarding_reference_p): Define.\n+\t(maybe_adjust_types_for_deduction): Use it instead.  Add 'tparms'\n+\tparameter.\n+\t(unify_one_argument): Pass tparms to\n+\tmaybe_adjust_types_for_deduction.\n+\t(try_one_overload): Likewise.\n+\t(unify): Likewise.\n+\t(rewrite_template_parm): Remove TEMPLATE_TYPE_PARM_FOR_CLASS\n+\thandling.\n+\n+2021-07-14  Jason Merrill  <jason@redhat.com>\n+\n+\t* class.c (struct find_final_overrider_data): Use auto_vec.\n+\t(find_final_overrider): Remove explicit release.\n+\t* coroutines.cc (process_conditional): Use auto_vec.\n+\t* cp-gimplify.c (struct cp_genericize_data): Use auto_vec.\n+\t(cp_genericize_tree): Remove explicit release.\n+\t* parser.c (cp_parser_objc_at_property_declaration): Use\n+\tauto_delete_vec.\n+\t* semantics.c (omp_reduction_lookup): Use auto_vec.\n+\n+2021-07-14  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/101371\n+\t* constexpr.c (cxx_eval_array_reference): Create a new .object\n+\tand .ctor for the non-aggregate non-scalar case too when\n+\tvalue-initializing.\n+\n 2021-07-12  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/79501"}, {"sha": "5406c53f21420698067a63171782234a4f039a62", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fee1c646d52a9001a53fa0d4072db86b9be791/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fee1c646d52a9001a53fa0d4072db86b9be791/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c4fee1c646d52a9001a53fa0d4072db86b9be791", "patch": "@@ -1,3 +1,9 @@\n+2021-07-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/100949\n+\t* trans-expr.c (gfc_trans_class_init_assign): Call\n+\tgfc_conv_expr_present only for dummy variables.\n+\n 2021-07-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/100227"}, {"sha": "944639a95dfcf372f47a8d84cfc56b819831fbee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fee1c646d52a9001a53fa0d4072db86b9be791/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fee1c646d52a9001a53fa0d4072db86b9be791/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c4fee1c646d52a9001a53fa0d4072db86b9be791", "patch": "@@ -1,3 +1,84 @@\n+2021-07-14  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/mma-builtin-9.c: New test.\n+\n+2021-07-14  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/88252\n+\t* g++.dg/cpp1z/class-deduction96.C: New test.\n+\n+2021-07-14  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/torture/pr100382.C: Pass -fno-delete-dead-exceptions.\n+\n+2021-07-14  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.dg/vect/vect-reduc-dot-11.c: Expect pass.\n+\t* gcc.dg/vect/vect-reduc-dot-15.c: Likewise.\n+\t* gcc.dg/vect/vect-reduc-dot-19.c: Likewise.\n+\t* gcc.dg/vect/vect-reduc-dot-21.c: Likewise.\n+\n+2021-07-14  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/pr80776-1.c: Remove xfail.\n+\n+2021-07-14  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/101371\n+\t* g++.dg/cpp1y/constexpr-101371-2.C: New test.\n+\t* g++.dg/cpp1y/constexpr-101371.C: New test.\n+\n+2021-07-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/100949\n+\t* gfortran.dg/pr100949.f90: New test.\n+\n+2021-07-14  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_arm_v8_2a_imm8_neon_ok_nocache,\n+\tcheck_effective_target_arm_v8_2a_i8mm_neon_hw,\n+\tcheck_effective_target_vect_usdot_qi): New.\n+\t* gcc.dg/vect/vect-reduc-dot-9.c: New test.\n+\t* gcc.dg/vect/vect-reduc-dot-10.c: New test.\n+\t* gcc.dg/vect/vect-reduc-dot-11.c: New test.\n+\t* gcc.dg/vect/vect-reduc-dot-12.c: New test.\n+\t* gcc.dg/vect/vect-reduc-dot-13.c: New test.\n+\t* gcc.dg/vect/vect-reduc-dot-14.c: New test.\n+\t* gcc.dg/vect/vect-reduc-dot-15.c: New test.\n+\t* gcc.dg/vect/vect-reduc-dot-16.c: New test.\n+\t* gcc.dg/vect/vect-reduc-dot-17.c: New test.\n+\t* gcc.dg/vect/vect-reduc-dot-18.c: New test.\n+\t* gcc.dg/vect/vect-reduc-dot-19.c: New test.\n+\t* gcc.dg/vect/vect-reduc-dot-20.c: New test.\n+\t* gcc.dg/vect/vect-reduc-dot-21.c: New test.\n+\t* gcc.dg/vect/vect-reduc-dot-22.c: New test.\n+\n+2021-07-14  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/arm/simd/vusdot-autovec.c: New test.\n+\n+2021-07-14  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/aarch64/simd/vusdot-autovec.c: New test.\n+\t* gcc.target/aarch64/sve/vusdot-autovec.c: New test.\n+\n+2021-07-14  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/101395\n+\t* gcc.target/i386/pr101395-1.c: New test.\n+\t* gcc.target/i386/pr101395-2.c: Likewise.\n+\t* gcc.target/i386/pr101395-3.c: Likewise.\n+\n+2021-07-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101445\n+\t* gcc.dg/vect/pr101445.c: New testcase.\n+\n+2021-07-14  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.target/i386/vect-reduc-1.c: New testcase.\n+\n 2021-07-13  Jonathan Wright  <jonathan.wright@arm.com>\n \n \t* gcc.target/aarch64/extract_zero_extend.c: Remove dump scan"}, {"sha": "4ea4d2e807b57b69bc139a9c221c108f087b3dfd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fee1c646d52a9001a53fa0d4072db86b9be791/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fee1c646d52a9001a53fa0d4072db86b9be791/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c4fee1c646d52a9001a53fa0d4072db86b9be791", "patch": "@@ -1,3 +1,10 @@\n+2021-07-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/string_view (basic_string_view(It, End)): Add\n+\tnoexcept-specifier.\n+\t* testsuite/21_strings/basic_string_view/cons/char/range.cc:\n+\tCheck noexcept-specifier. Also check construction without CTAD.\n+\n 2021-07-13  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR c++/101361"}]}