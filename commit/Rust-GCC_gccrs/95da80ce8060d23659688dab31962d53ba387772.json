{"sha": "95da80ce8060d23659688dab31962d53ba387772", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVkYTgwY2U4MDYwZDIzNjU5Njg4ZGFiMzE5NjJkNTNiYTM4Nzc3Mg==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1994-05-13T02:57:30Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1994-05-13T02:57:30Z"}, "message": "Initial revision\n\nFrom-SVN: r7291", "tree": {"sha": "c1f60bfde9c905f1f9a23644ef60aae60c2b0aee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1f60bfde9c905f1f9a23644ef60aae60c2b0aee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95da80ce8060d23659688dab31962d53ba387772", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95da80ce8060d23659688dab31962d53ba387772", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95da80ce8060d23659688dab31962d53ba387772", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95da80ce8060d23659688dab31962d53ba387772/comments", "author": null, "committer": null, "parents": [{"sha": "a4443a085561a653c669edf833f5a1496f246b9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4443a085561a653c669edf833f5a1496f246b9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4443a085561a653c669edf833f5a1496f246b9b"}], "stats": {"total": 670, "additions": 670, "deletions": 0}, "files": [{"sha": "071cce6c8114b1ae65c64005a220b1c9010fbe06", "filename": "gcc/cp/g++.1", "status": "added", "additions": 670, "deletions": 0, "changes": 670, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95da80ce8060d23659688dab31962d53ba387772/gcc%2Fcp%2Fg%2B%2B.1", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95da80ce8060d23659688dab31962d53ba387772/gcc%2Fcp%2Fg%2B%2B.1", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fg%2B%2B.1?ref=95da80ce8060d23659688dab31962d53ba387772", "patch": "@@ -0,0 +1,670 @@\n+.\\\" Copyright (c) 1991, 1992 Free Software Foundation              -*-Text-*-\n+.\\\" See section COPYING for conditions for redistribution\n+.\\\" FIXME: no info here on predefines.  Should there be?  extra for C++...\n+.TH G++ 1 \"30apr1993\" \"GNU Tools\" \"GNU Tools\"\n+.de BP\n+.sp\n+.ti \\-.2i\n+\\(**\n+..\n+.SH NAME\n+g++ \\- GNU project C++ Compiler (v2.4)\n+.SH SYNOPSIS\n+.RB g++ \" [\" \\c\n+.IR option \" | \" filename \" ].\\|.\\|.\n+.SH DESCRIPTION\n+The C and C++ compilers are integrated;\n+.B g++\n+is a script to call\n+.B gcc with options to recognize C++.  \n+.B gcc\n+processes input files\n+through one or more of four stages: preprocessing, compilation,\n+assembly, and linking.  This man page contains full descriptions for \n+.I only\n+C++ specific aspects of the compiler, though it also contains\n+summaries of some general-purpose options.  For a fuller explanation\n+of the compiler, see\n+.BR gcc ( 1 ).\n+\n+C++ source files use one of the suffixes `\\|\\c\n+.B .C\\c\n+\\&\\|', `\\|\\c\n+.B .cc\\c\n+\\&\\|', or `\\|\\c\n+.B .cxx\\c\n+\\&\\|'; preprocessed C++ files use the suffix `\\|\\c\n+.B .ii\\c\n+\\&\\|'.\n+.SH OPTIONS\n+There are many command-line options, including options to control\n+details of optimization, warnings, and code generation, which are\n+common to both \n+.B gcc\n+and\n+.B g++\\c\n+\\&.  For full information on all options, see \n+.BR gcc ( 1 ).\n+\n+Options must be separate: `\\|\\c\n+.B \\-dr\\c\n+\\&\\|' is quite different from `\\|\\c\n+.B \\-d \\-r\n+\\&\\|'. \n+\n+Most `\\|\\c\n+.B \\-f\\c\n+\\&\\|' and `\\|\\c\n+.B \\-W\\c\n+\\&\\|' options have two contrary forms: \n+.BI \\-f name\n+and\n+.BI \\-fno\\- name\\c\n+\\& (or \n+.BI \\-W name\n+and\n+.BI \\-Wno\\- name\\c\n+\\&). Only the non-default forms are shown here.\n+\n+.TP\n+.B \\-c\n+Compile or assemble the source files, but do not link.  The compiler\n+output is an object file corresponding to each source file.\n+.TP\n+.BI \\-D macro\n+Define macro \\c\n+.I macro\\c\n+\\& with the string `\\|\\c\n+.B 1\\c\n+\\&\\|' as its definition.\n+.TP\n+.BI \\-D macro = defn\n+Define macro \\c\n+.I macro\\c\n+\\& as \\c\n+.I defn\\c\n+\\&.\n+.TP\n+.B \\-E\n+Stop after the preprocessing stage; do not run the compiler proper.  The\n+output is preprocessed source code, which is sent to the\n+standard output.\n+.TP\n+.B \\-fall\\-virtual\n+Treat all possible member functions as virtual, implicitly.  All\n+member functions (except for constructor functions and\n+.B new\n+or\n+.B delete\n+member operators) are treated as virtual functions of the class where\n+they appear.\n+\n+This does not mean that all calls to these member functions will be\n+made through the internal table of virtual functions.  Under some\n+circumstances, the compiler can determine that a call to a given\n+virtual function can be made directly; in these cases the calls are\n+direct in any case.\n+.TP\n+.B \\-fdollars\\-in\\-identifiers\n+Permit the use of `\\|\\c\n+.B $\\c\n+\\&\\|' in identifiers.\n+Traditional C allowed the character `\\|\\c\n+.B $\\c\n+\\&\\|' to form part of identifiers; by default, GNU C also\n+allows this.  However, ANSI C forbids `\\|\\c\n+.B $\\c\n+\\&\\|' in identifiers, and GNU C++ also forbids it by default on most\n+platforms (though on some platforms it's enabled by default for GNU\n+C++ as well).\n+.TP\n+.B \\-felide\\-constructors\n+Use this option to instruct the compiler to be smarter about when it can\n+elide constructors.  Without this flag, GNU C++ and cfront both\n+generate effectively the same code for:\n+.sp\n+.br\n+A\\ foo\\ ();\n+.br\n+A\\ x\\ (foo\\ ());\\ \\ \\ //\\ x\\ initialized\\ by\\ `foo\\ ()',\\ no\\ ctor\\ called\n+.br\n+A\\ y\\ =\\ foo\\ ();\\ \\ \\ //\\ call\\ to\\ `foo\\ ()'\\ heads\\ to\\ temporary,\n+.br\n+\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ //\\ y\\ is\\ initialized\\ from\\ the\\ temporary.\n+.br\n+.sp\n+Note the difference!  With this flag, GNU C++ initializes `\\|\\c\n+.B y\\c\n+\\&\\|' directly\n+from the call to \n+.B foo ()\n+without going through a temporary.\n+.TP\n+.B \\-fenum\\-int\\-equiv\n+Normally GNU C++ allows conversion of \n+.B enum\n+to\n+.B int\\c\n+\\&, but not the other way around.  Use this option if you want GNU C++\n+to allow conversion of\n+.B int\n+to \n+.B enum\n+as well.  \n+.TP\n+.B \\-fexternal\\-templates\n+Produce smaller code for template declarations, by generating only a\n+single copy of each template function where it is defined.\n+To use this option successfully, you must also mark all files that\n+use templates with either `\\|\\c\n+.B #pragma implementation\\c\n+\\&\\|' (the definition) or\n+`\\|\\c\n+.B #pragma interface\\c\n+\\&\\|' (declarations).\n+\n+When your code is compiled with `\\|\\c\n+.B \\-fexternal\\-templates\\c\n+\\&\\|', all\n+template instantiations are external.  You must arrange for all\n+necessary instantiations to appear in the implementation file; you can\n+do this with a \\c\n+.B typedef\\c\n+\\& that references each instantiation needed.\n+Conversely, when you compile using the default option\n+`\\|\\c\n+.B \\-fno\\-external\\-templates\\c\n+\\&\\|', all template instantiations are\n+explicitly internal.\n+.TP\n+.B \\-fno\\-gnu\\-linker\n+Do not output global initializations (such as C++ constructors and\n+destructors) in the form used by the GNU linker (on systems where the GNU\n+linker is the standard method of handling them).  Use this option when\n+you want to use a non-GNU linker, which also requires using the\n+.B collect2\n+program to make sure the system linker includes\n+constructors and destructors.  (\\c\n+.B collect2\n+is included in the GNU CC distribution.)  For systems which\n+.I must\n+use\n+.B collect2\\c\n+\\&, the compiler driver\n+.B gcc\n+is configured to do this automatically.\n+.TP\n+.B \\-fmemoize\\-lookups\n+.TP\n+.B \\-fsave\\-memoized\n+These flags are used to get the compiler to compile programs faster\n+using heuristics.  They are not on by default since they are only effective\n+about half the time.  The other half of the time programs compile more\n+slowly (and take more memory).\n+\n+The first time the compiler must build a call to a member function (or\n+reference to a data member), it must (1) determine whether the class\n+implements member functions of that name; (2) resolve which member\n+function to call (which involves figuring out what sorts of type\n+conversions need to be made); and (3) check the visibility of the member\n+function to the caller.  All of this adds up to slower compilation.\n+Normally, the second time a call is made to that member function (or\n+reference to that data member), it must go through the same lengthy\n+process again.  This means that code like this\n+.sp\n+.br\n+\\ \\ cout\\ <<\\ \"This\\ \"\\ <<\\ p\\ <<\\ \"\\ has\\ \"\\ <<\\ n\\ <<\\ \"\\ legs.\\en\";\n+.br\n+.sp\n+makes six passes through all three steps.  By using a software cache,\n+a ``hit'' significantly reduces this cost.  Unfortunately, using the\n+cache introduces another layer of mechanisms which must be implemented,\n+and so incurs its own overhead.  `\\|\\c\n+.B \\-fmemoize\\-lookups\\c\n+\\&\\|' enables\n+the software cache.\n+\n+Because access privileges (visibility) to members and member functions\n+may differ from one function context to the next, \n+.B g++\n+may need to flush the cache. With the `\\|\\c\n+.B \\-fmemoize\\-lookups\\c\n+\\&\\|' flag, the cache is flushed after every\n+function that is compiled.  The `\\|\\c\n+\\-fsave\\-memoized\\c\n+\\&\\|' flag enables the same software cache, but when the compiler\n+determines that the context of the last function compiled would yield\n+the same access privileges of the next function to compile, it\n+preserves the cache. \n+This is most helpful when defining many member functions for the same\n+class: with the exception of member functions which are friends of\n+other classes, each member function has exactly the same access\n+privileges as every other, and the cache need not be flushed.\n+.TP\n+.B \\-fno\\-default\\-inline\n+Do not make member functions inline by default merely because they are\n+defined inside the class scope.  Otherwise, when you specify\n+.B \\-O\\c\n+\\&, member functions defined inside class scope are compiled\n+inline by default; i.e., you don't need to add `\\|\\c\n+.B inline\\c\n+\\&\\|' in front of\n+the member function name.\n+.TP\n+.B \\-fno\\-strict\\-prototype\n+Consider the declaration \\c\n+.B int foo ();\\c\n+\\&.  In C++, this means that the\n+function \\c\n+.B foo\\c\n+\\& takes no arguments.  In ANSI C, this is declared\n+.B int foo(void);\\c\n+\\&.  With the flag `\\|\\c\n+.B \\-fno\\-strict\\-prototype\\c\n+\\&\\|',\n+declaring functions with no arguments is equivalent to declaring its\n+argument list to be untyped, i.e., \\c\n+.B int foo ();\\c\n+\\& is equivalent to\n+saying \\c\n+.B int foo (...);\\c\n+\\&.\n+.TP\n+.B \\-fnonnull\\-objects\n+Normally, GNU C++ makes conservative assumptions about objects reached\n+through references.  For example, the compiler must check that `\\|\\c\n+.B a\\c\n+\\&\\|' is not null in code like the following:\n+.br\n+\\ \\ \\ \\ obj\\ &a\\ =\\ g\\ ();\n+.br\n+\\ \\ \\ \\ a.f\\ (2);\n+.br\n+Checking that references of this sort have non-null values requires\n+extra code, however, and it is unnecessary for many programs.  You can\n+use `\\|\\c\n+.B \\-fnonnull\\-objects\\c\n+\\&\\|' to omit the checks for null, if your program doesn't require the\n+default checking.\n+.TP\n+.B \\-fhandle\\-signatures\n+.TP\n+.B \\-fno\\-handle\\-signatures\n+These options control the recognition of the \\c\n+.B signature\\c\n+\\& and \\c\n+.B sigof\\c\n+\\& constructs for specifying abstract types.  By default, these\n+constructs are not recognized.\n+.TP\n+.B \\-fthis\\-is\\-variable\n+The incorporation of user-defined free store management into C++ has\n+made assignment to \\c\n+.B this\\c\n+\\& an anachronism.  Therefore, by default GNU\n+C++ treats the type of \\c\n+.B this\\c\n+\\& in a member function of \\c\n+.B class X\\c\n+\\&\n+to be \\c\n+.B X *const\\c\n+\\&.  In other words, it is illegal to assign to\n+\\c\n+.B this\\c\n+\\& within a class member function.  However, for backwards\n+compatibility, you can invoke the old behavior by using\n+\\&`\\|\\c\n+.B \\-fthis\\-is\\-variable\\c\n+\\&\\|'.\n+.TP\n+.B \\-g\n+Produce debugging information in the operating system's native format\n+(for DBX or SDB or DWARF).  GDB also can work with this debugging\n+information.  On most systems that use DBX format, `\\|\\c\n+.B \\-g\\c\n+\\&\\|' enables use\n+of extra debugging information that only GDB can use.\n+\n+Unlike most other C compilers, GNU CC allows you to use `\\|\\c\n+.B \\-g\\c\n+\\&\\|' with\n+`\\|\\c\n+.B \\-O\\c\n+\\&\\|'.  The shortcuts taken by optimized code may occasionally\n+produce surprising results: some variables you declared may not exist\n+at all; flow of control may briefly move where you did not expect it;\n+some statements may not be executed because they compute constant\n+results or their values were already at hand; some statements may\n+execute in different places because they were moved out of loops.\n+\n+Nevertheless it proves possible to debug optimized output.  This makes\n+it reasonable to use the optimizer for programs that might have bugs.\n+.TP\n+.BI \"\\-I\" \"dir\"\\c\n+\\&\n+Append directory \\c\n+.I dir\\c\n+\\& to the list of directories searched for include files.\n+.TP\n+.BI \"\\-L\" \"dir\"\\c\n+\\&\n+Add directory \\c\n+.I dir\\c\n+\\& to the list of directories to be searched\n+for `\\|\\c\n+.B \\-l\\c\n+\\&\\|'.\n+.TP\n+.BI \\-l library\\c\n+\\&\n+Use the library named \\c\n+.I library\\c\n+\\& when linking.  (C++ programs often require `\\|\\c\n+\\-lg++\\c\n+\\&\\|' for successful linking.)\n+.TP\n+.B \\-nostdinc\n+Do not search the standard system directories for header files.  Only\n+the directories you have specified with\n+.B \\-I\n+options (and the current directory, if appropriate) are searched.\n+.TP\n+.B \\-nostdinc++\n+Do not search for header files in the standard directories specific to\n+C++, but do still search the other standard directories.  (This option\n+is used when building libg++.)\n+.TP\n+.B \\-O\n+Optimize.  Optimizing compilation takes somewhat more time, and a lot\n+more memory for a large function.\n+.TP\n+.BI \"\\-o \" file\\c\n+\\&\n+Place output in file \\c\n+.I file\\c\n+\\&.\n+.TP\n+.B \\-S\n+Stop after the stage of compilation proper; do not assemble.  The output\n+is an assembler code file for each non-assembler input\n+file specified.\n+.TP\n+.B \\-traditional\n+Attempt to support some aspects of traditional C compilers.\n+\n+Specifically, for both C and C++ programs:\n+.TP\n+\\ \\ \\ \\(bu\n+In the preprocessor, comments convert to nothing at all, rather than\n+to a space.  This allows traditional token concatenation.\n+.TP\n+\\ \\ \\ \\(bu\n+In the preprocessor, macro arguments are recognized within string\n+constants in a macro definition (and their values are stringified,\n+though without additional quote marks, when they appear in such a\n+context).  The preprocessor always considers a string constant to end\n+at a newline.\n+.TP\n+\\ \\ \\ \\(bu\n+The preprocessor does not predefine the macro \\c\n+.B __STDC__\\c\n+\\& when you use\n+`\\|\\c\n+.B \\-traditional\\c\n+\\&\\|', but still predefines\\c\n+.B __GNUC__\\c\n+\\& (since the GNU extensions indicated by \n+.B __GNUC__\\c\n+\\& are not affected by\n+`\\|\\c\n+.B \\-traditional\\c\n+\\&\\|').  If you need to write header files that work\n+differently depending on whether `\\|\\c\n+.B \\-traditional\\c\n+\\&\\|' is in use, by\n+testing both of these predefined macros you can distinguish four\n+situations: GNU C, traditional GNU C, other ANSI C compilers, and\n+other old C compilers.\n+.TP\n+\\ \\ \\ \\(bu\n+In the preprocessor, comments convert to nothing at all, rather than\n+to a space.  This allows traditional token concatenation.\n+.TP\n+\\ \\ \\ \\(bu\n+In the preprocessor, macro arguments are recognized within string\n+constants in a macro definition (and their values are stringified,\n+though without additional quote marks, when they appear in such a\n+context).  The preprocessor always considers a string constant to end\n+at a newline.\n+.TP\n+\\ \\ \\ \\(bu\n+The preprocessor does not predefine the macro \\c\n+.B __STDC__\\c\n+\\& when you use\n+`\\|\\c\n+.B \\-traditional\\c\n+\\&\\|', but still predefines\\c\n+.B __GNUC__\\c\n+\\& (since the GNU extensions indicated by \n+.B __GNUC__\\c\n+\\& are not affected by\n+`\\|\\c\n+.B \\-traditional\\c\n+\\&\\|').  If you need to write header files that work\n+differently depending on whether `\\|\\c\n+.B \\-traditional\\c\n+\\&\\|' is in use, by\n+testing both of these predefined macros you can distinguish four\n+situations: GNU C, traditional GNU C, other ANSI C compilers, and\n+other old C compilers.\n+.PP\n+.TP\n+\\ \\ \\ \\(bu\n+String ``constants'' are not necessarily constant; they are stored in\n+writable space, and identical looking constants are allocated\n+separately.\n+\n+For C++ programs only (not C), `\\|\\c\n+.B \\-traditional\\c\n+\\&\\|' has one additional effect: assignment to \n+.B this\n+is permitted.  This is the same as the effect of `\\|\\c\n+.B \\-fthis\\-is\\-variable\\c\n+\\&\\|'.\n+.TP\n+.BI \\-U macro\n+Undefine macro \\c\n+.I macro\\c\n+\\&.\n+.TP\n+.B \\-Wall\n+Issue warnings for conditions which pertain to usage that we recommend\n+avoiding and that we believe is easy to avoid, even in conjunction\n+with macros. \n+.TP\n+.B \\-Wenum\\-clash\n+Warn when converting between different enumeration types.\n+.TP\n+.B \\-Woverloaded\\-virtual\n+In a derived class, the definitions of virtual functions must match\n+the type signature of a virtual function declared in the base class.\n+Use this option to request warnings when a derived class declares a\n+function that may be an erroneous attempt to define a virtual\n+function: that is, warn when a function with the same name as a\n+virtual function in the base class, but with a type signature that\n+doesn't match any virtual functions from the base class.\n+.TP\n+.B \\-Wtemplate\\-debugging\n+When using templates in a C++ program, warn if debugging is not yet\n+fully available.\n+.TP\n+.B \\-w\n+Inhibit all warning messages.\n+.TP\n+.BI +e N\n+Control how virtual function definitions are used, in a fashion\n+compatible with\n+.B cfront\n+1.x.\n+.PP\n+\n+.SH PRAGMAS\n+Two `\\|\\c\n+.B #pragma\\c\n+\\&\\|' directives are supported for GNU C++, to permit using the same\n+header file for two purposes: as a definition of interfaces to a given\n+object class, and as the full definition of the contents of that object class.\n+.TP\n+.B #pragma interface\n+Use this directive in header files that define object classes, to save\n+space in most of the object files that use those classes.  Normally,\n+local copies of certain information (backup copies of inline member\n+functions, debugging information, and the internal tables that\n+implement virtual functions) must be kept in each object file that\n+includes class definitions.  You can use this pragma to avoid such\n+duplication.  When a header file containing `\\|\\c\n+.B #pragma interface\\c\n+\\&\\|' is included in a compilation, this auxiliary information\n+will not be generated (unless the main input source file itself uses\n+`\\|\\c\n+.B #pragma implementation\\c\n+\\&\\|').  Instead, the object files will contain references to be\n+resolved at link time.  \n+.tr !\"\n+.TP\n+.B #pragma implementation\n+.TP\n+.BI \"#pragma implementation !\" objects .h!\n+Use this pragma in a main input file, when you want full output from\n+included header files to be generated (and made globally visible).\n+The included header file, in turn, should use `\\|\\c\n+.B #pragma interface\\c\n+\\&\\|'.  \n+Backup copies of inline member functions, debugging information, and\n+the internal tables used to implement virtual functions are all\n+generated in implementation files.\n+\n+If you use `\\|\\c\n+.B #pragma implementation\\c\n+\\&\\|' with no argument, it applies to an include file with the same\n+basename as your source file; for example, in `\\|\\c\n+.B allclass.cc\\c\n+\\&\\|', `\\|\\c\n+.B #pragma implementation\\c\n+\\&\\|' by itself is equivalent to `\\|\\c\n+.B \n+#pragma implementation \"allclass.h\"\\c\n+\\&\\|'.  Use the string argument if you want a single implementation\n+file to include code from multiple header files.  \n+\n+There is no way to split up the contents of a single header file into\n+multiple implementation files. \n+.SH FILES\n+.ta \\w'LIBDIR/g++\\-include 'u\n+file.h\tC header (preprocessor) file\n+.br\n+file.i\tpreprocessed C source file\n+.br\n+file.C\tC++ source file\n+.br\n+file.cc\tC++ source file\n+.br\n+file.cxx\tC++ source file\n+.br\n+file.s\tassembly language file\n+.br\n+file.o\tobject file\n+.br\n+a.out\tlink edited output\n+.br\n+\\fITMPDIR\\fR/cc\\(**\ttemporary files\n+.br\n+\\fILIBDIR\\fR/cpp\tpreprocessor\n+.br\n+\\fILIBDIR\\fR/cc1plus\tcompiler\n+.br\n+\\fILIBDIR\\fR/collect\tlinker front end needed on some machines\n+.br\n+\\fILIBDIR\\fR/libgcc.a\tGCC subroutine library\n+.br\n+/lib/crt[01n].o\tstart-up routine\n+.br\n+\\fILIBDIR\\fR/ccrt0\tadditional start-up routine for C++\n+.br\n+/lib/libc.a\tstandard C library, see\n+.IR intro (3)\n+.br\n+/usr/include\tstandard directory for \n+.B #include\n+files\n+.br\n+\\fILIBDIR\\fR/include\tstandard gcc directory for\n+.B #include\n+files\n+.br\n+\\fILIBDIR\\fR/g++\\-include\tadditional g++ directory for\n+.B #include\n+.sp\n+.I LIBDIR\n+is usually\n+.B /usr/local/lib/\\c\n+.IR machine / version .\n+.br\n+.I TMPDIR\n+comes from the environment variable \n+.B TMPDIR\n+(default\n+.B /usr/tmp\n+if available, else\n+.B /tmp\\c\n+\\&).\n+.SH \"SEE ALSO\"\n+gcc(1), cpp(1), as(1), ld(1), gdb(1), adb(1), dbx(1), sdb(1).\n+.br\n+.RB \"`\\|\" gcc \"\\|', `\\|\" cpp \\|', \n+.RB `\\| as \\|', `\\| ld \\|',\n+and \n+.RB `\\| gdb \\|'\n+entries in\n+.B info\\c\n+\\&.\n+.br\n+.I \n+Using and Porting GNU CC (for version 2.0)\\c\n+, Richard M. Stallman; \n+.I\n+The C Preprocessor\\c\n+, Richard M. Stallman;\n+.I \n+Debugging with GDB: the GNU Source-Level Debugger\\c\n+, Richard M. Stallman and Roland H. Pesch;\n+.I\n+Using as: the GNU Assembler\\c\n+, Dean Elsner, Jay Fenlason & friends;\n+.I\n+gld: the GNU linker\\c\n+, Steve Chamberlain and Roland Pesch.\n+\n+.SH BUGS\n+For instructions on how to report bugs, see the GCC manual.\n+\n+.SH COPYING\n+Copyright (c) 1991, 1992, 1993 Free Software Foundation, Inc.\n+.PP\n+Permission is granted to make and distribute verbatim copies of\n+this manual provided the copyright notice and this permission notice\n+are preserved on all copies.\n+.PP\n+Permission is granted to copy and distribute modified versions of this\n+manual under the conditions for verbatim copying, provided that the\n+entire resulting derived work is distributed under the terms of a\n+permission notice identical to this one.\n+.PP\n+Permission is granted to copy and distribute translations of this\n+manual into another language, under the above conditions for modified\n+versions, except that this permission notice may be included in\n+translations approved by the Free Software Foundation instead of in\n+the original English.\n+.SH AUTHORS\n+See the GNU CC Manual for the contributors to GNU CC."}]}