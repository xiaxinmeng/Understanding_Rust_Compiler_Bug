{"sha": "66434729a79dfa2d9790aadeca7082511c387980", "node_id": "C_kwDOANBUbNoAKDY2NDM0NzI5YTc5ZGZhMmQ5NzkwYWFkZWNhNzA4MjUxMWMzODc5ODA", "commit": {"author": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2022-07-26T13:46:20Z"}, "committer": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2022-07-27T02:19:55Z"}, "message": "LoongArch: adjust the default of -mexplicit-relocs by checking gas feature\n\nThe assembly produced with -mexplicit-relocs is not supported by gas <=\n2.39.  Check if the assembler supports explicit relocations and set the\ndefault accordingly.\n\ngcc/ChangeLog:\n\n\t* configure.ac (HAVE_AS_EXPLICIT_RELOCS): Define to 1 if the\n\tassembler supports explicit relocation for LoongArch.\n\t* configure: Regenerate.\n\t* config/loongarch/loongarch-opts.h (HAVE_AS_EXPLICIT_RELOCS):\n\tDefine to 0 if not defined.\n\t* config/loongarch/genopts/loongarch.opt.in\n\t(TARGET_EXPLICIT_RELOCS): Default to HAVE_AS_EXPLICIT_RELOCS.\n\t* config/loongarch/loongarch.opt: Regenerate.", "tree": {"sha": "212f0639bda831a62d4e61c4360b0bd60f6b4173", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/212f0639bda831a62d4e61c4360b0bd60f6b4173"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66434729a79dfa2d9790aadeca7082511c387980", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQSR0PV2MB+STX3t3OisqtIOGecQ4wUCYuCgywAKCRCsqtIOGecQ\n4+epAQC5O0ZcCieWMn0MTKqw6clpjW/640ZPHCzRq0spRgIJYQD+PDc+jxEy2uFu\nYX60TGHeqvo4HFAWqE5Cj/lDUDcsvgw=\n=uW7n\n-----END PGP SIGNATURE-----", "payload": "tree 212f0639bda831a62d4e61c4360b0bd60f6b4173\nparent fd96c4b51a733f72fa567a96c253fb3ddf11bd2a\nauthor Xi Ruoyao <xry111@xry111.site> 1658843180 +0800\ncommitter Xi Ruoyao <xry111@xry111.site> 1658888395 +0800\n\nLoongArch: adjust the default of -mexplicit-relocs by checking gas feature\n\nThe assembly produced with -mexplicit-relocs is not supported by gas <=\n2.39.  Check if the assembler supports explicit relocations and set the\ndefault accordingly.\n\ngcc/ChangeLog:\n\n\t* configure.ac (HAVE_AS_EXPLICIT_RELOCS): Define to 1 if the\n\tassembler supports explicit relocation for LoongArch.\n\t* configure: Regenerate.\n\t* config/loongarch/loongarch-opts.h (HAVE_AS_EXPLICIT_RELOCS):\n\tDefine to 0 if not defined.\n\t* config/loongarch/genopts/loongarch.opt.in\n\t(TARGET_EXPLICIT_RELOCS): Default to HAVE_AS_EXPLICIT_RELOCS.\n\t* config/loongarch/loongarch.opt: Regenerate.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66434729a79dfa2d9790aadeca7082511c387980", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66434729a79dfa2d9790aadeca7082511c387980", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66434729a79dfa2d9790aadeca7082511c387980/comments", "author": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd96c4b51a733f72fa567a96c253fb3ddf11bd2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd96c4b51a733f72fa567a96c253fb3ddf11bd2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd96c4b51a733f72fa567a96c253fb3ddf11bd2a"}], "stats": {"total": 52, "additions": 46, "deletions": 6}, "files": [{"sha": "a571b6b75240d2c175e744f254bc631b441d9239", "filename": "gcc/config/loongarch/genopts/loongarch.opt.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66434729a79dfa2d9790aadeca7082511c387980/gcc%2Fconfig%2Floongarch%2Fgenopts%2Floongarch.opt.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66434729a79dfa2d9790aadeca7082511c387980/gcc%2Fconfig%2Floongarch%2Fgenopts%2Floongarch.opt.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Fgenopts%2Floongarch.opt.in?ref=66434729a79dfa2d9790aadeca7082511c387980", "patch": "@@ -155,7 +155,7 @@ Target Joined RejectNegative UInteger Var(loongarch_max_inline_memcpy_size) Init\n -mmax-inline-memcpy-size=SIZE\tSet the max size of memcpy to inline, default is 1024.\n \n mexplicit-relocs\n-Target Var(TARGET_EXPLICIT_RELOCS) Init(1)\n+Target Var(TARGET_EXPLICIT_RELOCS) Init(HAVE_AS_EXPLICIT_RELOCS)\n Use %reloc() assembly operators.\n \n ; The code model option names for -mcmodel."}, {"sha": "da24ecd2b50bf1d611102644986cf848b53acd27", "filename": "gcc/config/loongarch/loongarch-opts.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66434729a79dfa2d9790aadeca7082511c387980/gcc%2Fconfig%2Floongarch%2Floongarch-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66434729a79dfa2d9790aadeca7082511c387980/gcc%2Fconfig%2Floongarch%2Floongarch-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch-opts.h?ref=66434729a79dfa2d9790aadeca7082511c387980", "patch": "@@ -87,4 +87,8 @@ loongarch_config_target (struct loongarch_target *target,\n    while -m[no]-memcpy imposes a global constraint.  */\n #define TARGET_DO_OPTIMIZE_BLOCK_MOVE_P  loongarch_do_optimize_block_move_p()\n \n+#ifndef HAVE_AS_EXPLICIT_RELOCS\n+#define HAVE_AS_EXPLICIT_RELOCS 0\n+#endif\n+\n #endif /* LOONGARCH_OPTS_H */"}, {"sha": "9df7e187283539b4d17e505458de761e916f2209", "filename": "gcc/config/loongarch/loongarch.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66434729a79dfa2d9790aadeca7082511c387980/gcc%2Fconfig%2Floongarch%2Floongarch.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66434729a79dfa2d9790aadeca7082511c387980/gcc%2Fconfig%2Floongarch%2Floongarch.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.opt?ref=66434729a79dfa2d9790aadeca7082511c387980", "patch": "@@ -162,7 +162,7 @@ Target Joined RejectNegative UInteger Var(loongarch_max_inline_memcpy_size) Init\n -mmax-inline-memcpy-size=SIZE\tSet the max size of memcpy to inline, default is 1024.\n \n mexplicit-relocs\n-Target Var(TARGET_EXPLICIT_RELOCS) Init(1)\n+Target Var(TARGET_EXPLICIT_RELOCS) Init(HAVE_AS_EXPLICIT_RELOCS)\n Use %reloc() assembly operators.\n \n ; The code model option names for -mcmodel."}, {"sha": "7eb9479ae8ee7515476980c2d99fa19f24a47eb5", "filename": "gcc/configure", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66434729a79dfa2d9790aadeca7082511c387980/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66434729a79dfa2d9790aadeca7082511c387980/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=66434729a79dfa2d9790aadeca7082511c387980", "patch": "@@ -19674,7 +19674,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19679 \"configure\"\n+#line 19677 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -19780,7 +19780,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19785 \"configure\"\n+#line 19783 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -28771,7 +28771,7 @@ $as_echo \"#define HAVE_AS_MARCH_ZIFENCEI 1\" >>confdefs.h\n fi\n \n     ;;\n-  loongarch*-*-*)\n+    loongarch*-*-*)\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for .dtprelword support\" >&5\n $as_echo_n \"checking assembler for .dtprelword support... \" >&6; }\n if ${gcc_cv_as_loongarch_dtprelword+:} false; then :\n@@ -28807,6 +28807,37 @@ if test $gcc_cv_as_loongarch_dtprelword != yes; then\n $as_echo \"#define HAVE_AS_DTPRELWORD 1\" >>confdefs.h\n \n fi\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for explicit relocation support\" >&5\n+$as_echo_n \"checking assembler for explicit relocation support... \" >&6; }\n+if ${gcc_cv_as_loongarch_explicit_relocs+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_loongarch_explicit_relocs=no\n+  if test x$gcc_cv_as != x; then\n+    $as_echo 'a:pcalau12i $t0,%pc_hi20(a)' > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags  -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_loongarch_explicit_relocs=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_loongarch_explicit_relocs\" >&5\n+$as_echo \"$gcc_cv_as_loongarch_explicit_relocs\" >&6; }\n+if test $gcc_cv_as_loongarch_explicit_relocs = yes; then\n+\n+$as_echo \"#define HAVE_AS_EXPLICIT_RELOCS 1\" >>confdefs.h\n+\n+fi\n+\n     ;;\n     s390*-*-*)\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for .gnu_attribute support\" >&5"}, {"sha": "e5f708c6b3882e6d4d480de4777f1690280a91f7", "filename": "gcc/configure.ac", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66434729a79dfa2d9790aadeca7082511c387980/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66434729a79dfa2d9790aadeca7082511c387980/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=66434729a79dfa2d9790aadeca7082511c387980", "patch": "@@ -5287,7 +5287,7 @@ configured with --enable-newlib-nano-formatted-io.])\n       [AC_DEFINE(HAVE_AS_MARCH_ZIFENCEI, 1,\n \t\t [Define if the assembler understands -march=rv*_zifencei.])])\n     ;;\n-  loongarch*-*-*)\n+    loongarch*-*-*)\n     gcc_GAS_CHECK_FEATURE([.dtprelword support],\n       gcc_cv_as_loongarch_dtprelword, [2,18,0],,\n       [.section .tdata,\"awT\",@progbits\n@@ -5297,6 +5297,11 @@ x:\n \t.dtprelword x+0x8000],,\n       [AC_DEFINE(HAVE_AS_DTPRELWORD, 1,\n \t  [Define if your assembler supports .dtprelword.])])\n+    gcc_GAS_CHECK_FEATURE([explicit relocation support],\n+      gcc_cv_as_loongarch_explicit_relocs,,\n+      [a:pcalau12i $t0,%pc_hi20(a)],,\n+      [AC_DEFINE(HAVE_AS_EXPLICIT_RELOCS, 1,\n+\t  [Define if your assembler supports explicit relocation.])])\n     ;;\n     s390*-*-*)\n     gcc_GAS_CHECK_FEATURE([.gnu_attribute support],"}]}