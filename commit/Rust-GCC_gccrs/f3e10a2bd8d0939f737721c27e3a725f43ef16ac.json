{"sha": "f3e10a2bd8d0939f737721c27e3a725f43ef16ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNlMTBhMmJkOGQwOTM5ZjczNzcyMWMyN2UzYTcyNWY0M2VmMTZhYw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-07-01T16:13:40Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-07-01T16:13:40Z"}, "message": "i386.c (ix86_build_signbit_mask): Generate TImode and TFmode constants via two element DImode vector for hosts...\n\n\t* config/i386/i386.c (ix86_build_signbit_mask): Generate TImode and\n\tTFmode constants via two element DImode vector for hosts with\n\tHOST_BITS_PER_WIDE_INT < 64.\n\t(ix86_init_builtins): Define __builtin_fabsq and __builtin_copysignq\n\talso for HOST_BITS_PER_WIDE_INT < 64.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/quad-sse.c: New test.\n\nFrom-SVN: r137322", "tree": {"sha": "47ed6270d229ffefbe00ea288e319a4e65637330", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47ed6270d229ffefbe00ea288e319a4e65637330"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3e10a2bd8d0939f737721c27e3a725f43ef16ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3e10a2bd8d0939f737721c27e3a725f43ef16ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3e10a2bd8d0939f737721c27e3a725f43ef16ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3e10a2bd8d0939f737721c27e3a725f43ef16ac/comments", "author": null, "committer": null, "parents": [{"sha": "a8f77badd9e99beda848c4fb523b64eb19ba25e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8f77badd9e99beda848c4fb523b64eb19ba25e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8f77badd9e99beda848c4fb523b64eb19ba25e9"}], "stats": {"total": 109, "additions": 80, "deletions": 29}, "files": [{"sha": "24766f8621f0c83d248106084332fde43d5bbb4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3e10a2bd8d0939f737721c27e3a725f43ef16ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3e10a2bd8d0939f737721c27e3a725f43ef16ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3e10a2bd8d0939f737721c27e3a725f43ef16ac", "patch": "@@ -1,3 +1,11 @@\n+2008-07-01  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_build_signbit_mask): Generate TImode and\n+\tTFmode constants via two element DImode vector for hosts with\n+\tHOST_BITS_PER_WIDE_INT < 64.\n+\t(ix86_init_builtins): Define __builtin_fabsq and __builtin_copysignq\n+\talso for HOST_BITS_PER_WIDE_INT < 64.\n+\n 2008-07-01  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/36666\n@@ -14,8 +22,7 @@\n \tif the results address is not taken.\n \t(do_deref): Use get_constraint_exp_for_temp.\n \t(get_constraint_for_1): Rename from ...\n-\t(get_constraint_for): ... this.  Add the old function as\n-\twrapper.\n+\t(get_constraint_for): ... this.  Add the old function as wrapper.\n \t(do_structure_copy): Use get_constraint_for_1.\n \n 2008-07-01  Martin Jambor  <mjambor@suse.cz>\n@@ -39,25 +46,23 @@\n \t* config/darwin-driver.c (darwin_default_min_version): Fix\n \t-Wc++-compat warnings.\n \n-2008-06-30 Uros Bizjak  <ubizjak@gmail.com>\n+2008-06-30  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*movti_rex64): Add \"!\" to \"r\" constraint\n \tof operand 0.\n \n 2008-06-30  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n-\t* ifcvt.c (cond_move_process_if_block): Free vectors on false\n-\treturn.\n+\t* ifcvt.c (cond_move_process_if_block): Free vectors on false return.\n \t\n 2008-06-30  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n \tPR rtl-optimization/34744\n-\t* df-scan.c (df_scan_free_ref_vec, df_scan_free_mws_vec): New\n-\tmacros.\n+\t* df-scan.c (df_scan_free_ref_vec, df_scan_free_mws_vec): New macros.\n        \t(df_scan_free_internal): Free data structures not\n \tallocated in storage pools.\n \t(df_mw_hardreg_chain_delete_eq_uses): Use df_scan_free_mws_vec.\n-\t(df_refs_add_to_chains): Use df_scan_free_ref_vec and \n+\t(df_refs_add_to_chains): Use df_scan_free_ref_vec and\n \tdf_scan_free_mws_vec.\n \t* dse.c (dse_step6): Free offset_map_p and offset_map_n\n \tunconditionally.\n@@ -202,7 +207,7 @@\n \t* doc/rtl.texi (const_vector): Document const_fixed as legitimate\n \telement type of const_vector.\n \n-2008-06-28 Uros Bizjak  <ubizjak@gmail.com>\n+2008-06-28  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (addti3, adddi3, addsi3, addhi3, addqi3):\n \tRemove FLAGS_REG clobber from expander pattern.\n@@ -266,7 +271,7 @@\n \t(init_one_libfunc): Reuse decls and SYMBOL_REFs when asked\n \tfor the same function twice.\n \n-2008-06-27 Uros Bizjak  <ubizjak@gmail.com>\n+2008-06-27  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (ashlti3, ashrti3, lshrti3): Expand using\n \tix86_expand_binary_operator directly.\n@@ -833,7 +838,7 @@\n \thave_similar_memory_accesses_1, ref_base_address_1): Likewise.\n \t* tree-ssa-phiopt.c (name_to_bb_hash): Likewise.\n \n-2008-06-25 Uros Bizjak  <ubizjak@gmail.com>\n+2008-06-25  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/36627\n \t* config/i386/i386.md : Change constraints of HImode and QImode\n@@ -2155,7 +2160,7 @@\n \t* config/vax/vaxv.h: Remove.\n \t* config/windiss.h: Remove.\n \n-2008-06-06 Uros Bizjak <ubizjak@gmail.com>\n+2008-06-06  Uros Bizjak <ubizjak@gmail.com>\n \n \tPR rtl-optimization/36438\n \t* cse.c (fold_rtx) [ASHIFT, LSHIFTRT, ASHIFTRT]: Break out early"}, {"sha": "5a2c0c870a73e4f51c428960d37e866aecfeb6e6", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 37, "deletions": 16, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3e10a2bd8d0939f737721c27e3a725f43ef16ac/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3e10a2bd8d0939f737721c27e3a725f43ef16ac/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f3e10a2bd8d0939f737721c27e3a725f43ef16ac", "patch": "@@ -11330,10 +11330,35 @@ ix86_build_signbit_mask (enum machine_mode mode, bool vect, bool invert)\n \n     case TImode:\n     case TFmode:\n-      imode = TImode;\n       vec_mode = VOIDmode;\n-      gcc_assert (HOST_BITS_PER_WIDE_INT >= 64);\n-      lo = 0, hi = (HOST_WIDE_INT)1 << shift;\n+      if (HOST_BITS_PER_WIDE_INT >= 64)\n+\t{\n+\t  imode = TImode;\n+\t  lo = 0, hi = (HOST_WIDE_INT)1 << shift;\n+\t}\n+      else\n+\t{\n+\t  rtvec vec;\n+\n+\t  imode = DImode;\n+\t  lo = 0, hi = (HOST_WIDE_INT)1 << (shift - HOST_BITS_PER_WIDE_INT);\n+\n+\t  if (invert)\n+\t    {\n+\t      lo = ~lo, hi = ~hi;\n+\t      v = constm1_rtx;\n+\t    }\n+\t  else\n+\t    v = const0_rtx;\n+\n+\t  mask = immed_double_const (lo, hi, imode);\n+\n+\t  vec = gen_rtvec (2, v, mask);\n+\t  v = gen_rtx_CONST_VECTOR (V2DImode, vec);\n+\t  v = copy_to_mode_reg (mode, gen_lowpart (mode, v));\n+\n+\t  return v;\n+\t}\n      break;\n \n     default:\n@@ -20222,20 +20247,16 @@ ix86_init_builtins (void)\n \t\t\t       NULL, NULL_TREE);\n   ix86_builtins[(int) IX86_BUILTIN_INFQ] = decl;\n \n-  if (HOST_BITS_PER_WIDE_INT >= 64)\n-    {\n-      /* Those builtins need TImode to compile.  */\n-      ftype = build_function_type_list (float128_type_node,\n-\t\t\t\t\tfloat128_type_node,\n-\t\t\t\t\tNULL_TREE);\n-      def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_fabsq\", ftype, IX86_BUILTIN_FABSQ);\n+  ftype = build_function_type_list (float128_type_node,\n+\t\t\t\t    float128_type_node,\n+\t\t\t\t    NULL_TREE);\n+  def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_fabsq\", ftype, IX86_BUILTIN_FABSQ);\n \n-      ftype = build_function_type_list (float128_type_node,\n-\t\t\t\t\tfloat128_type_node,\n-\t\t\t\t\tfloat128_type_node,\n-\t\t\t\t\tNULL_TREE);\n-      def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_copysignq\", ftype, IX86_BUILTIN_COPYSIGNQ);\n-    }\n+  ftype = build_function_type_list (float128_type_node,\n+\t\t\t\t    float128_type_node,\n+\t\t\t\t    float128_type_node,\n+\t\t\t\t    NULL_TREE);\n+  def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_copysignq\", ftype, IX86_BUILTIN_COPYSIGNQ);\n \n   if (TARGET_MMX)\n     ix86_init_mmx_sse_builtins ();"}, {"sha": "0d48ea94e89c6da02fbf7ceb5dd3b8025c5d9d74", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3e10a2bd8d0939f737721c27e3a725f43ef16ac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3e10a2bd8d0939f737721c27e3a725f43ef16ac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f3e10a2bd8d0939f737721c27e3a725f43ef16ac", "patch": "@@ -1,3 +1,7 @@\n+2008-07-01  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/quad-sse.c: New test.\n+\n 2008-07-01  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/36666\n@@ -12,7 +16,7 @@\n \tPR target/36598\n \t* gcc.dg/memcpy-1.c: Mark test XFAIL for avr target.\n \n-2008-06-30 Uros Bizjak  <ubizjak@gmail.com>\n+2008-06-30  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/movti.c: New test.\n "}, {"sha": "fed61122f195191cc4d7847de93e1195c4ced258", "filename": "gcc/testsuite/gcc.target/i386/quad-sse.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3e10a2bd8d0939f737721c27e3a725f43ef16ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fquad-sse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3e10a2bd8d0939f737721c27e3a725f43ef16ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fquad-sse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fquad-sse.c?ref=f3e10a2bd8d0939f737721c27e3a725f43ef16ac", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+__float128 x, y;\n+\n+__float128 test_1(void)\n+{\n+  return -x;\n+}\n+\n+__float128 test_2(void)\n+{\n+  return __builtin_fabsq (x);\n+}\n+\n+__float128 test_3(void)\n+{\n+  return __builtin_copysignq (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-not \"call\" } } */"}]}