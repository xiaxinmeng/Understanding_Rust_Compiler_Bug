{"sha": "fb0d5c60f5cbc3ef3689af7ecac566526e31ea14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIwZDVjNjBmNWNiYzNlZjM2ODlhZjdlY2FjNTY2NTI2ZTMxZWExNA==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2013-05-06T19:02:12Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2013-05-06T19:02:12Z"}, "message": "mips.c: Include tree-pass.h.\n\n\n\t* config/mips/mips.c: Include tree-pass.h.\n\t(mips_reorg): Split in pre- and post-dbr_schedule parts.\n\t(mips_machine_reorg2): Move mips_reorg post-dbr_schedule parts here.\n\t(pass_mips_machine_reorg2): New machine specific pass.\n\t(insert_pass_mips_machine_reorg2): New pass plugin definition.\n\t(mips_option_override): Register the new pass.\n\t* rtl.h (cleanup_barriers): Remove prototype.\n\t(dbr_schedule): Likewise.\n\t* jump.c (cleanup_barriers): Make static.\n\t* reorg.c (dbr_schedule): Likewise.\n\nFrom-SVN: r198640", "tree": {"sha": "f55285f0494cd3a17b590e13db249b4831517104", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f55285f0494cd3a17b590e13db249b4831517104"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb0d5c60f5cbc3ef3689af7ecac566526e31ea14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb0d5c60f5cbc3ef3689af7ecac566526e31ea14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb0d5c60f5cbc3ef3689af7ecac566526e31ea14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb0d5c60f5cbc3ef3689af7ecac566526e31ea14/comments", "author": null, "committer": null, "parents": [{"sha": "6555abe0ef5f9e917f99874c37adcb9063873ca6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6555abe0ef5f9e917f99874c37adcb9063873ca6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6555abe0ef5f9e917f99874c37adcb9063873ca6"}], "stats": {"total": 68, "additions": 57, "deletions": 11}, "files": [{"sha": "47868064267e6ab86e05e980c743cce1da9c8651", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb0d5c60f5cbc3ef3689af7ecac566526e31ea14/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb0d5c60f5cbc3ef3689af7ecac566526e31ea14/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb0d5c60f5cbc3ef3689af7ecac566526e31ea14", "patch": "@@ -1,3 +1,17 @@\n+2013-05-06  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\n+\t* config/mips/mips.c: Include tree-pass.h.\n+\t(mips_reorg): Split in pre- and post-dbr_schedule parts.\n+\t(mips_machine_reorg2): Move mips_reorg post-dbr_schedule parts here.\n+\t(pass_mips_machine_reorg2): New machine specific pass.\n+\t(insert_pass_mips_machine_reorg2): New pass plugin definition.\n+\t(mips_option_override): Register the new pass.\n+\t* rtl.h (cleanup_barriers): Remove prototype.\n+\t(dbr_schedule): Likewise.\n+\t* jump.c (cleanup_barriers): Make static.\n+\t* reorg.c (dbr_schedule): Likewise.\n+\n 2013-05-06  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/57185"}, {"sha": "ab183827e3f3009454f4687c2de432c30677554d", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 41, "deletions": 5, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb0d5c60f5cbc3ef3689af7ecac566526e31ea14/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb0d5c60f5cbc3ef3689af7ecac566526e31ea14/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=fb0d5c60f5cbc3ef3689af7ecac566526e31ea14", "patch": "@@ -55,6 +55,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic.h\"\n #include \"target-globals.h\"\n #include \"opts.h\"\n+#include \"tree-pass.h\"\n \n /* True if X is an UNSPEC wrapper around a SYMBOL_REF or LABEL_REF.  */\n #define UNSPEC_ADDRESS_P(X)\t\t\t\t\t\\\n@@ -16368,12 +16369,14 @@ mips_reorg (void)\n       mips_df_reorg ();\n       free_bb_for_insn ();\n     }\n+}\n \n-  if (optimize > 0 && flag_delayed_branch)\n-    {\n-      cleanup_barriers ();\n-      dbr_schedule (get_insns ());\n-    }\n+/* We use a machine specific pass to do a second machine dependent reorg\n+   pass after delay branch scheduling.  */\n+\n+static unsigned int\n+mips_machine_reorg2 (void)\n+{\n   mips_reorg_process_insns ();\n   if (!TARGET_MIPS16\n       && TARGET_EXPLICIT_RELOCS\n@@ -16386,6 +16389,34 @@ mips_reorg (void)\n     mips_reorg_process_insns ();\n   mips16_split_long_branches ();\n }\n+\n+struct rtl_opt_pass pass_mips_machine_reorg2 =\n+{\n+ {\n+  RTL_PASS,\n+  \"mach2\",\t\t\t\t/* name */\n+  OPTGROUP_NONE,\t\t\t/* optinfo_flags */\n+  NULL,\t\t\t\t\t/* gate */\n+  mips_machine_reorg2,\t\t\t/* execute */\n+  NULL,\t\t\t\t\t/* sub */\n+  NULL,\t\t\t\t\t/* next */\n+  0,\t\t\t\t\t/* static_pass_number */\n+  TV_MACH_DEP,\t\t\t\t/* tv_id */\n+  0,\t\t\t\t\t/* properties_required */\n+  0,\t\t\t\t\t/* properties_provided */\n+  0,\t\t\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t\t/* todo_flags_start */\n+  TODO_verify_rtl_sharing,\t\t/* todo_flags_finish */\n+ }\n+};\n+\n+struct register_pass_info insert_pass_mips_machine_reorg2 =\n+{\n+  &pass_mips_machine_reorg2.pass,\t/* pass */\n+  \"dbr\",\t\t\t\t/* reference_pass_name */\n+  1,\t\t\t\t\t/* ref_pass_instance_number */\n+  PASS_POS_INSERT_AFTER\t\t\t/* po_op */\n+};\n \f\n /* Implement TARGET_ASM_OUTPUT_MI_THUNK.  Generate rtl rather than asm text\n    in order to avoid duplicating too much logic from elsewhere.  */\n@@ -17161,6 +17192,11 @@ mips_option_override (void)\n      Do all CPP-sensitive stuff in uncompressed mode; we'll switch modes\n      later if required.  */\n   mips_set_compression_mode (0);\n+\n+  /* We register a second machine specific reorg pass after delay slot\n+     filling.  Registering the pass must be done at start up.  It's\n+     convenient to do it here.  */\n+  register_pass (&insert_pass_mips_machine_reorg2);\n }\n \n /* Swap the register information for registers I and I + 1, which"}, {"sha": "4fb1e6e6befebaae8f17ddf7a177dcf63069d557", "filename": "gcc/jump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb0d5c60f5cbc3ef3689af7ecac566526e31ea14/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb0d5c60f5cbc3ef3689af7ecac566526e31ea14/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=fb0d5c60f5cbc3ef3689af7ecac566526e31ea14", "patch": "@@ -118,7 +118,7 @@ rebuild_jump_labels_chain (rtx chain)\n    This simple pass moves barriers and removes duplicates so that the\n    old code is happy.\n  */\n-unsigned int\n+static unsigned int\n cleanup_barriers (void)\n {\n   rtx insn, next, prev;"}, {"sha": "237be6f0ca458f92d1c8e20d702500b99725ef77", "filename": "gcc/reorg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb0d5c60f5cbc3ef3689af7ecac566526e31ea14/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb0d5c60f5cbc3ef3689af7ecac566526e31ea14/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=fb0d5c60f5cbc3ef3689af7ecac566526e31ea14", "patch": "@@ -3585,7 +3585,7 @@ make_return_insns (rtx first)\n \f\n /* Try to find insns to place in delay slots.  */\n \n-void\n+static void\n dbr_schedule (rtx first)\n {\n   rtx insn, next, epilogue_insn = 0;"}, {"sha": "0d0a2a347ebe7110d7f951a3e786bae6d10954ef", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb0d5c60f5cbc3ef3689af7ecac566526e31ea14/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb0d5c60f5cbc3ef3689af7ecac566526e31ea14/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=fb0d5c60f5cbc3ef3689af7ecac566526e31ea14", "patch": "@@ -1930,7 +1930,6 @@ extern enum rtx_code swap_condition (enum rtx_code);\n extern enum rtx_code unsigned_condition (enum rtx_code);\n extern enum rtx_code signed_condition (enum rtx_code);\n extern void mark_jump_label (rtx, rtx, int);\n-extern unsigned int cleanup_barriers (void);\n \n /* In jump.c */\n extern rtx delete_related_insns (rtx);\n@@ -2674,9 +2673,6 @@ extern void reg_scan (rtx, unsigned int);\n extern void fix_register (const char *, int, int);\n extern bool invalid_mode_change_p (unsigned int, enum reg_class);\n \n-/* In reorg.c */\n-extern void dbr_schedule (rtx);\n-\n /* In reload1.c */\n extern int function_invariant_p (const_rtx);\n "}]}