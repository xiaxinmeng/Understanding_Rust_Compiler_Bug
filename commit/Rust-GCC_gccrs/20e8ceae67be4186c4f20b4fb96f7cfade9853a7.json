{"sha": "20e8ceae67be4186c4f20b4fb96f7cfade9853a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBlOGNlYWU2N2JlNDE4NmM0ZjIwYjRmYjk2ZjdjZmFkZTk4NTNhNw==", "commit": {"author": {"name": "Andrew Benson", "email": "abenson@carnegiescience.edu", "date": "2018-07-20T20:00:42Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2018-07-20T20:00:42Z"}, "message": "gfortran.h (gfc_symbol): Add pointer to next derived type.\n\n2018-07-20  Andrew Benson  <abenson@carnegiescience.edu>\n\n\t* gfortran.h (gfc_symbol): Add pointer to next derived type.\n\t(gfc_dt_list, gfc_get_dt_list): Remove.\n\t(gfc_namespace): Replace gfc_dt_list with gfc_symbol.\n\t* parse.c (resolve_all_program_units): Replace gfc_free_dt_list() with\n\tsimple nullification of gfc_derived_types.\n\t* resolve.c (resolve_global_procedure): Replace gfc_dt_list with\n\tgfc_symbol.\n\t(add_dt_to_dt_list): Change derived type linked list insertion to\n\tutilize dt_next pointers in gfc_symbol.\n\t* symbol.c (gfc_new_symbol, gfc_free_dt_list, gfc_symbol_done2)\n\t(get_iso_c_binding_dt, generate_isocbinding_symbol): Remove\n\tgfc_free_dt_list as gfc_dt_list is obsoleted. Change derived type\n\tlinked list search/insertion to utilize dt_next pointers in gfc_symbol.\n\t* trans-types.c (gfc_get_derived_type): Change derived type linked\n\tlist search to utilize dt_next pointers in gfc_symbol.\n\nFrom-SVN: r262909", "tree": {"sha": "f7b6db1d67d284cfce8a26fd209a356ce66b23ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7b6db1d67d284cfce8a26fd209a356ce66b23ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20e8ceae67be4186c4f20b4fb96f7cfade9853a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20e8ceae67be4186c4f20b4fb96f7cfade9853a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20e8ceae67be4186c4f20b4fb96f7cfade9853a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20e8ceae67be4186c4f20b4fb96f7cfade9853a7/comments", "author": {"login": "abensonca", "id": 7468651, "node_id": "MDQ6VXNlcjc0Njg2NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/7468651?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abensonca", "html_url": "https://github.com/abensonca", "followers_url": "https://api.github.com/users/abensonca/followers", "following_url": "https://api.github.com/users/abensonca/following{/other_user}", "gists_url": "https://api.github.com/users/abensonca/gists{/gist_id}", "starred_url": "https://api.github.com/users/abensonca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abensonca/subscriptions", "organizations_url": "https://api.github.com/users/abensonca/orgs", "repos_url": "https://api.github.com/users/abensonca/repos", "events_url": "https://api.github.com/users/abensonca/events{/privacy}", "received_events_url": "https://api.github.com/users/abensonca/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9a81cdb415ff070289eda51d122663c62219330", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9a81cdb415ff070289eda51d122663c62219330", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9a81cdb415ff070289eda51d122663c62219330"}], "stats": {"total": 170, "additions": 90, "deletions": 80}, "files": [{"sha": "08af3afdbe9cb5a9cfad7ed019ed514d35f462f8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e8ceae67be4186c4f20b4fb96f7cfade9853a7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e8ceae67be4186c4f20b4fb96f7cfade9853a7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=20e8ceae67be4186c4f20b4fb96f7cfade9853a7", "patch": "@@ -1,3 +1,21 @@\n+2018-07-20  Andrew Benson  <abenson@carnegiescience.edu>\n+\n+\t* gfortran.h (gfc_symbol): Add pointer to next derived type.\n+\t(gfc_dt_list, gfc_get_dt_list): Remove.\n+\t(gfc_namespace): Replace gfc_dt_list with gfc_symbol.\n+\t* parse.c (resolve_all_program_units): Replace gfc_free_dt_list() with\n+\tsimple nullification of gfc_derived_types.\n+\t* resolve.c (resolve_global_procedure): Replace gfc_dt_list with\n+\tgfc_symbol.\n+\t(add_dt_to_dt_list): Change derived type linked list insertion to\n+\tutilize dt_next pointers in gfc_symbol.\n+\t* symbol.c (gfc_new_symbol, gfc_free_dt_list, gfc_symbol_done2)\n+\t(get_iso_c_binding_dt, generate_isocbinding_symbol): Remove\n+\tgfc_free_dt_list as gfc_dt_list is obsoleted. Change derived type\n+\tlinked list search/insertion to utilize dt_next pointers in gfc_symbol.\n+\t* trans-types.c (gfc_get_derived_type): Change derived type linked\n+\tlist search to utilize dt_next pointers in gfc_symbol.\n+\n 2018-07-19  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* trans-intrinsic.c: (gfc_conv_intrinsic_minmax): Emit MIN_MAX_EXPR"}, {"sha": "af7350930622455973200e772a4843a83ff8a995", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e8ceae67be4186c4f20b4fb96f7cfade9853a7/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e8ceae67be4186c4f20b4fb96f7cfade9853a7/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=20e8ceae67be4186c4f20b4fb96f7cfade9853a7", "patch": "@@ -1614,6 +1614,9 @@ typedef struct gfc_symbol\n \n   /* Link to corresponding association-list if this is an associate name.  */\n   struct gfc_association_list *assoc;\n+\n+  /* Link to next entry in derived type list */\n+  struct gfc_symbol *dt_next;\n }\n gfc_symbol;\n \n@@ -1715,18 +1718,8 @@ typedef struct gfc_symtree\n }\n gfc_symtree;\n \n-/* A linked list of derived types in the namespace.  */\n-typedef struct gfc_dt_list\n-{\n-  struct gfc_symbol *derived;\n-  struct gfc_dt_list *next;\n-}\n-gfc_dt_list;\n-\n-#define gfc_get_dt_list() XCNEW (gfc_dt_list)\n-\n-  /* A list of all derived types.  */\n-  extern gfc_dt_list *gfc_derived_types;\n+/* A list of all derived types.  */\n+extern gfc_symbol *gfc_derived_types;\n \n typedef struct gfc_oacc_routine_name\n {\n@@ -1812,7 +1805,7 @@ typedef struct gfc_namespace\n \n   gfc_charlen *cl_list;\n \n-  gfc_dt_list *derived_types;\n+  gfc_symbol *derived_types;\n \n   int save_all, seen_save, seen_implicit_none;\n "}, {"sha": "13cc6f5fccde98705938f47036d737acea0a4bf0", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e8ceae67be4186c4f20b4fb96f7cfade9853a7/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e8ceae67be4186c4f20b4fb96f7cfade9853a7/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=20e8ceae67be4186c4f20b4fb96f7cfade9853a7", "patch": "@@ -6051,7 +6051,7 @@ add_global_program (void)\n static void\n resolve_all_program_units (gfc_namespace *gfc_global_ns_list)\n {\n-  gfc_free_dt_list ();\n+  gfc_derived_types = NULL;\n   gfc_current_ns = gfc_global_ns_list;\n   for (; gfc_current_ns; gfc_current_ns = gfc_current_ns->sibling)\n     {"}, {"sha": "3035e025749a08c7463bfb1bc7f48f8221894166", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e8ceae67be4186c4f20b4fb96f7cfade9853a7/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e8ceae67be4186c4f20b4fb96f7cfade9853a7/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=20e8ceae67be4186c4f20b4fb96f7cfade9853a7", "patch": "@@ -2509,7 +2509,7 @@ resolve_global_procedure (gfc_symbol *sym, locus *where,\n       /* Resolve the gsymbol namespace if needed.  */\n       if (!gsym->ns->resolved)\n \t{\n-\t  gfc_dt_list *old_dt_list;\n+\t  gfc_symbol *old_dt_list;\n \n \t  /* Stash away derived types so that the backend_decls do not\n \t     get mixed up.  */\n@@ -13533,16 +13533,19 @@ resolve_typebound_procedures (gfc_symbol* derived)\n static void\n add_dt_to_dt_list (gfc_symbol *derived)\n {\n-  gfc_dt_list *dt_list;\n-\n-  for (dt_list = gfc_derived_types; dt_list; dt_list = dt_list->next)\n-    if (derived == dt_list->derived)\n-      return;\n-\n-  dt_list = gfc_get_dt_list ();\n-  dt_list->next = gfc_derived_types;\n-  dt_list->derived = derived;\n-  gfc_derived_types = dt_list;\n+  if (!derived->dt_next)\n+    {\n+      if (gfc_derived_types)\n+\t{\n+\t  derived->dt_next = gfc_derived_types->dt_next;\n+\t  gfc_derived_types->dt_next = derived;\n+\t}\n+      else\n+\t{\n+\t  derived->dt_next = derived;\n+\t}\n+      gfc_derived_types = derived;\n+    }\n }\n \n "}, {"sha": "0a4f7c1711bb5091024c09b9ec9c04fdf9dade6b", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 33, "deletions": 45, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e8ceae67be4186c4f20b4fb96f7cfade9853a7/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e8ceae67be4186c4f20b4fb96f7cfade9853a7/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=20e8ceae67be4186c4f20b4fb96f7cfade9853a7", "patch": "@@ -107,7 +107,7 @@ gfc_namespace *gfc_global_ns_list;\n \n gfc_gsymbol *gfc_gsym_root = NULL;\n \n-gfc_dt_list *gfc_derived_types;\n+gfc_symbol *gfc_derived_types;\n \n static gfc_undo_change_set default_undo_chgset_var = { vNULL, vNULL, NULL };\n static gfc_undo_change_set *latest_undo_chgset = &default_undo_chgset_var;\n@@ -3137,6 +3137,7 @@ gfc_new_symbol (const char *name, gfc_namespace *ns)\n   p->common_block = NULL;\n   p->f2k_derived = NULL;\n   p->assoc = NULL;\n+  p->dt_next = NULL;\n   p->fn_result_spec = 0;\n \n   return p;\n@@ -3896,23 +3897,6 @@ free_sym_tree (gfc_symtree *sym_tree)\n }\n \n \n-/* Free the derived type list.  */\n-\n-void\n-gfc_free_dt_list (void)\n-{\n-  gfc_dt_list *dt, *n;\n-\n-  for (dt = gfc_derived_types; dt; dt = n)\n-    {\n-      n = dt->next;\n-      free (dt);\n-    }\n-\n-  gfc_derived_types = NULL;\n-}\n-\n-\n /* Free the gfc_equiv_info's.  */\n \n static void\n@@ -4098,7 +4082,7 @@ gfc_symbol_done_2 (void)\n       gfc_free_namespace (gfc_current_ns);\n       gfc_current_ns = NULL;\n     }\n-  gfc_free_dt_list ();\n+  gfc_derived_types = NULL;\n \n   enforce_single_undo_checkpoint ();\n   free_undo_change_set_data (*latest_undo_chgset);\n@@ -4361,20 +4345,21 @@ gfc_get_gsymbol (const char *name)\n static gfc_symbol *\n get_iso_c_binding_dt (int sym_id)\n {\n-  gfc_dt_list *dt_list;\n-\n-  dt_list = gfc_derived_types;\n+  gfc_symbol *dt_list = gfc_derived_types;\n \n   /* Loop through the derived types in the name list, searching for\n      the desired symbol from iso_c_binding.  Search the parent namespaces\n      if necessary and requested to (parent_flag).  */\n-  while (dt_list != NULL)\n+  if (dt_list)\n     {\n-      if (dt_list->derived->from_intmod != INTMOD_NONE\n-\t  && dt_list->derived->intmod_sym_id == sym_id)\n-        return dt_list->derived;\n-\n-      dt_list = dt_list->next;\n+      while (dt_list->dt_next != gfc_derived_types)\n+\t{\n+\t  if (dt_list->from_intmod != INTMOD_NONE\n+\t      && dt_list->intmod_sym_id == sym_id)\n+\t    return dt_list;\n+\t\n+\t  dt_list = dt_list->dt_next;\n+\t}\n     }\n \n   return NULL;\n@@ -4780,11 +4765,16 @@ generate_isocbinding_symbol (const char *mod_name, iso_c_binding_symbol s,\n       if (tmp_sym->attr.flavor == FL_DERIVED\n \t  && !get_iso_c_binding_dt (tmp_sym->intmod_sym_id))\n \t{\n-\t  gfc_dt_list *dt_list;\n-\t  dt_list = gfc_get_dt_list ();\n-\t  dt_list->derived = tmp_sym;\n-\t  dt_list->next = gfc_derived_types;\n-  \t  gfc_derived_types = dt_list;\n+\t  if (gfc_derived_types)\n+\t    {\n+\t      tmp_sym->dt_next = gfc_derived_types->dt_next;\n+\t      gfc_derived_types->dt_next = tmp_sym;\n+\t    }\n+\t  else\n+\t    {\n+\t      tmp_sym->dt_next = tmp_sym;\n+\t    }\n+\t  gfc_derived_types = tmp_sym;\n         }\n \n       return tmp_symtree;\n@@ -4892,7 +4882,6 @@ generate_isocbinding_symbol (const char *mod_name, iso_c_binding_symbol s,\n       case ISOCBINDING_FUNPTR:\n \t{\n \t  gfc_symbol *dt_sym;\n-\t  gfc_dt_list **dt_list_ptr = NULL;\n \t  gfc_component *tmp_comp = NULL;\n \n \t  /* Generate real derived type.  */\n@@ -4954,17 +4943,16 @@ generate_isocbinding_symbol (const char *mod_name, iso_c_binding_symbol s,\n \t  dt_sym->ts.u.derived = dt_sym;\n \n \t  /* Add the symbol created for the derived type to the current ns.  */\n-\t  dt_list_ptr = &(gfc_derived_types);\n-\t  while (*dt_list_ptr != NULL && (*dt_list_ptr)->next != NULL)\n-\t    dt_list_ptr = &((*dt_list_ptr)->next);\n-\n-\t  /* There is already at least one derived type in the list, so append\n-\t     the one we're currently building for c_ptr or c_funptr.  */\n-\t  if (*dt_list_ptr != NULL)\n-\t    dt_list_ptr = &((*dt_list_ptr)->next);\n-\t  (*dt_list_ptr) = gfc_get_dt_list ();\n-\t  (*dt_list_ptr)->derived = dt_sym;\n-\t  (*dt_list_ptr)->next = NULL;\n+\t  if (gfc_derived_types)\n+\t    {\n+\t      dt_sym->dt_next = gfc_derived_types->dt_next;\n+\t      gfc_derived_types->dt_next = dt_sym;\n+\t    }\n+\t  else\n+\t    {\n+\t      dt_sym->dt_next = dt_sym;\n+\t    }\n+\t  gfc_derived_types = dt_sym;\n \n \t  gfc_add_component (dt_sym, \"c_address\", &tmp_comp);\n \t  if (tmp_comp == NULL)"}, {"sha": "46f6d8c03a6430378648cfcc669a4625b2e2e5af", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e8ceae67be4186c4f20b4fb96f7cfade9853a7/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e8ceae67be4186c4f20b4fb96f7cfade9853a7/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=20e8ceae67be4186c4f20b4fb96f7cfade9853a7", "patch": "@@ -2542,7 +2542,6 @@ gfc_get_derived_type (gfc_symbol * derived, int codimen)\n   bool got_canonical = false;\n   bool unlimited_entity = false;\n   gfc_component *c;\n-  gfc_dt_list *dt;\n   gfc_namespace *ns;\n   tree tmp;\n   bool coarray_flag;\n@@ -2607,14 +2606,19 @@ gfc_get_derived_type (gfc_symbol * derived, int codimen)\n \t   ns->translated && !got_canonical;\n \t   ns = ns->sibling)\n \t{\n-\t  dt = ns->derived_types;\n-\t  for (; dt && !canonical; dt = dt->next)\n+\t  if (ns->derived_types)\n \t    {\n-\t      gfc_copy_dt_decls_ifequal (dt->derived, derived, true);\n-\t      if (derived->backend_decl)\n-\t\tgot_canonical = true;\n-\t    }\n-\t}\n+\t      for (gfc_symbol *dt = ns->derived_types; dt && !got_canonical;\n+\t\t   dt = dt->dt_next)\n+\t\t{\n+\t\t  gfc_copy_dt_decls_ifequal (dt, derived, true);\n+\t\t  if (derived->backend_decl)\n+\t\t    got_canonical = true;\n+\t\t  if (dt->dt_next == ns->derived_types)\n+\t\t    break;\n+\t\t}\n+ \t    }\n+ \t}\n     }\n \n   /* Store up the canonical type to be added to this one.  */\n@@ -2875,8 +2879,12 @@ gfc_get_derived_type (gfc_symbol * derived, int codimen)\n \t}\n     }\n \n-  for (dt = gfc_derived_types; dt; dt = dt->next)\n-    gfc_copy_dt_decls_ifequal (derived, dt->derived, false);\n+  for (gfc_symbol *dt = gfc_derived_types; dt; dt = dt->dt_next)\n+    {\n+      gfc_copy_dt_decls_ifequal (derived, dt, false);\n+      if (dt->dt_next == gfc_derived_types)\n+\tbreak;\n+    }\n \n   return derived->backend_decl;\n }"}]}