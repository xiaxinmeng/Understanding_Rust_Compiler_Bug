{"sha": "19278b02d711d178cce78033a5a95ffeccbae42d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkyNzhiMDJkNzExZDE3OGNjZTc4MDMzYTVhOTVmZmVjY2JhZTQyZA==", "commit": {"author": {"name": "Prathamesh Kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2016-08-06T18:11:24Z"}, "committer": {"name": "Prathamesh Kulkarni", "email": "prathamesh3492@gcc.gnu.org", "date": "2016-08-06T18:11:24Z"}, "message": "tree-ssa-ccp.c (extend_mask): New param sgn.\n\n2016-08-08  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n\n\t* tree-ssa-ccp.c (extend_mask): New param sgn.\n\tRemove ORing with wi::mask.\n\t(get_default_value): Adjust call to extend_mask to pass sign.\n\t(evaluate_stmt): Likewise.\n\nFrom-SVN: r239212", "tree": {"sha": "70ffd34e11596b0b92f8ebdceb4c25ea8bb189da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70ffd34e11596b0b92f8ebdceb4c25ea8bb189da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19278b02d711d178cce78033a5a95ffeccbae42d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19278b02d711d178cce78033a5a95ffeccbae42d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19278b02d711d178cce78033a5a95ffeccbae42d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19278b02d711d178cce78033a5a95ffeccbae42d/comments", "author": null, "committer": null, "parents": [{"sha": "e7864d68ee80371a51f3667dc0b2102c344b41c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7864d68ee80371a51f3667dc0b2102c344b41c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7864d68ee80371a51f3667dc0b2102c344b41c0"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "6a669e6576139a554651af03c1a7c8261ad48d42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19278b02d711d178cce78033a5a95ffeccbae42d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19278b02d711d178cce78033a5a95ffeccbae42d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19278b02d711d178cce78033a5a95ffeccbae42d", "patch": "@@ -1,3 +1,10 @@\n+2016-08-08  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\t* tree-ssa-ccp.c (extend_mask): New param sgn.\n+\tRemove ORing with wi::mask.\n+\t(get_default_value): Adjust call to extend_mask to pass sign.\n+\t(evaluate_stmt): Likewise.\n+\n 2016-08-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcov.c (handle_cycle): Use INTTYPE_MAXIMUM (int64_t) instead of"}, {"sha": "5d5386e4f8f70d6d4fd2e5b8a74a511022ff1f12", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19278b02d711d178cce78033a5a95ffeccbae42d/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19278b02d711d178cce78033a5a95ffeccbae42d/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=19278b02d711d178cce78033a5a95ffeccbae42d", "patch": "@@ -231,13 +231,12 @@ debug_lattice_value (ccp_prop_value_t val)\n   fprintf (stderr, \"\\n\");\n }\n \n-/* Extend NONZERO_BITS to a full mask, with the upper bits being set.  */\n+/* Extend NONZERO_BITS to a full mask, based on sgn.  */ \n \n static widest_int\n-extend_mask (const wide_int &nonzero_bits)\n+extend_mask (const wide_int &nonzero_bits, signop sgn)\n {\n-  return (wi::mask <widest_int> (wi::get_precision (nonzero_bits), true)\n-\t  | widest_int::from (nonzero_bits, UNSIGNED));\n+  return widest_int::from (nonzero_bits, sgn); \n }\n \n /* Compute a default value for variable VAR and store it in the\n@@ -287,7 +286,7 @@ get_default_value (tree var)\n \t\t{\n \t\t  val.lattice_val = CONSTANT;\n \t\t  val.value = build_zero_cst (TREE_TYPE (var));\n-\t\t  val.mask = extend_mask (nonzero_bits);\n+\t\t  val.mask = extend_mask (nonzero_bits, TYPE_SIGN (TREE_TYPE (var)));\n \t\t}\n \t    }\n \t}\n@@ -1937,7 +1936,7 @@ evaluate_stmt (gimple *stmt)\n \t    {\n \t      val.lattice_val = CONSTANT;\n \t      val.value = build_zero_cst (TREE_TYPE (lhs));\n-\t      val.mask = extend_mask (nonzero_bits);\n+\t      val.mask = extend_mask (nonzero_bits, TYPE_SIGN (TREE_TYPE (lhs)));\n \t      is_constant = true;\n \t    }\n \t  else\n@@ -1948,7 +1947,8 @@ evaluate_stmt (gimple *stmt)\n \t      if (nonzero_bits == 0)\n \t\tval.mask = 0;\n \t      else\n-\t\tval.mask = val.mask & extend_mask (nonzero_bits);\n+\t\tval.mask = val.mask & extend_mask (nonzero_bits,\n+\t\t\t\t\t\t   TYPE_SIGN (TREE_TYPE (lhs)));\n \t    }\n \t}\n     }"}]}