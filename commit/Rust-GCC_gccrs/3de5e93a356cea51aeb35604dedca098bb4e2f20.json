{"sha": "3de5e93a356cea51aeb35604dedca098bb4e2f20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RlNWU5M2EzNTZjZWE1MWFlYjM1NjA0ZGVkY2EwOThiYjRlMmYyMA==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb.gcc@gmail.com", "date": "2007-12-03T23:09:23Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2007-12-03T23:09:23Z"}, "message": "re PR middle-end/33713 (can't find a register in class 'GENERAL_REGS' while reloading 'asm')\n\n        PR33713\n        * doc/invoke.texi: Remove -fforce-addr documentation.\n        * expr.c (emit_move_insn): Remove use of flag_force_addr.\n        (expand_expr_real_1): Same.\n        (do_tablejump): Same.\n        Call memory_address instead of memory_address_noforce.\n        * expr.h (memory_address_noforce): Remove prototype.\n        * explow.c (memory_address): Remove support for flag_force_addr.\n        (validize_mem): Same.\n        (memory_address_noforce): Remove.\n        * common.opt: Add dummy documentation for -fforce-addr.\n        * combine.c (can_combine_p): Remove -fforce-addr comment.\n        * config/cris/cris.h (OPTIMIZATION_OPTIONS): Remove set of\n        flag_force_addr.\n        * config/m68k/m68k.h (PIC_CASE_VECTOR_ADDRESS): Remove comment\n        relating to memory_address_noforce.\n        * testsuite/gcc.c-torture/compile/20050802-1.c: Remove.\n        * testsuite/gcc.c-torture/compile/20011113-1.c: Remove.\n\nFrom-SVN: r130591", "tree": {"sha": "91ef6bed119b5a89220aef6ef1626cc5351ce550", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91ef6bed119b5a89220aef6ef1626cc5351ce550"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3de5e93a356cea51aeb35604dedca098bb4e2f20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3de5e93a356cea51aeb35604dedca098bb4e2f20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3de5e93a356cea51aeb35604dedca098bb4e2f20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3de5e93a356cea51aeb35604dedca098bb4e2f20/comments", "author": null, "committer": null, "parents": [{"sha": "d2dda7fed054ab18eaabd73adb0ca30b7bcb6605", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2dda7fed054ab18eaabd73adb0ca30b7bcb6605", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2dda7fed054ab18eaabd73adb0ca30b7bcb6605"}], "stats": {"total": 138, "additions": 42, "deletions": 96}, "files": [{"sha": "d24aa2a00896e7fb9d033855aba2444a04b977f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de5e93a356cea51aeb35604dedca098bb4e2f20/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de5e93a356cea51aeb35604dedca098bb4e2f20/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3de5e93a356cea51aeb35604dedca098bb4e2f20", "patch": "@@ -1,3 +1,24 @@\n+2007-12-03  Steven Bosscher  <stevenb.gcc@gmail.com>\n+\n+\tPR33713\n+\t* doc/invoke.texi: Remove -fforce-addr documentation.\n+\t* expr.c (emit_move_insn): Remove use of flag_force_addr.\n+\t(expand_expr_real_1): Same.\n+\t(do_tablejump): Same.\n+\tCall memory_address instead of memory_address_noforce.\n+\t* expr.h (memory_address_noforce): Remove prototype.\n+\t* explow.c (memory_address): Remove support for flag_force_addr.\n+\t(validize_mem): Same.\n+\t(memory_address_noforce): Remove.\n+\t* common.opt: Add dummy documentation for -fforce-addr.\n+\t* combine.c (can_combine_p): Remove -fforce-addr comment.\n+\t* config/cris/cris.h (OPTIMIZATION_OPTIONS): Remove set of\n+\tflag_force_addr.\n+\t* config/m68k/m68k.h (PIC_CASE_VECTOR_ADDRESS): Remove comment\n+\trelating to memory_address_noforce.\n+\t* testsuite/gcc.c-torture/compile/20050802-1.c: Remove.\n+\t* testsuite/gcc.c-torture/compile/20011113-1.c: Remove.\n+\t\n 2007-12-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* omp-low.c (lookup_decl_in_outer_ctx): Allow calling this"}, {"sha": "4e7086f6c6b89d69d7407b1fc8e7be8d4d0da99e", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de5e93a356cea51aeb35604dedca098bb4e2f20/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de5e93a356cea51aeb35604dedca098bb4e2f20/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=3de5e93a356cea51aeb35604dedca098bb4e2f20", "patch": "@@ -1694,7 +1694,7 @@ can_combine_p (rtx insn, rtx i3, rtx pred ATTRIBUTE_UNUSED, rtx succ,\n \t change whether the life span of some REGs crosses calls or not,\n \t and it is a pain to update that information.\n \t Exception: if source is a constant, moving it later can't hurt.\n-\t Accept that special case, because it helps -fforce-addr a lot.  */\n+\t Accept that as a special case.  */\n       || (DF_INSN_LUID (insn) < last_call_luid && ! CONSTANT_P (src)))\n     return 0;\n "}, {"sha": "e4916e4c7b459a27da37b8774ec6302243a2f4ac", "filename": "gcc/common.opt", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de5e93a356cea51aeb35604dedca098bb4e2f20/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de5e93a356cea51aeb35604dedca098bb4e2f20/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=3de5e93a356cea51aeb35604dedca098bb4e2f20", "patch": "@@ -482,11 +482,9 @@ ffloat-store\n Common Report Var(flag_float_store) Optimization\n Don't allocate floats and doubles in extended-precision registers\n \n-; Nonzero for -fforce-addr: load memory address into a register before\n-; reference to memory.  This makes better cse but slower compilation.\n fforce-addr\n-Common Report Var(flag_force_addr) Optimization\n-Copy memory address constants into registers before use\n+Common\n+Does nothing.  Preserved for backward compatibility.\n \n fforward-propagate\n Common Report Var(flag_forward_propagate) Optimization"}, {"sha": "b2748deb00115be1c7508fe140218ca2204c25de", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de5e93a356cea51aeb35604dedca098bb4e2f20/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de5e93a356cea51aeb35604dedca098bb4e2f20/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=3de5e93a356cea51aeb35604dedca098bb4e2f20", "patch": "@@ -305,10 +305,7 @@ extern int target_flags;\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       if ((OPTIMIZE) >= 2 || (SIZE))\t\t\\\n-\t{\t\t\t\t\t\\\n-\t  flag_force_addr = 1;\t\t\t\\\n-\t  flag_omit_frame_pointer = 1;\t\t\\\n-\t}\t\t\t\t\t\\\n+\tflag_omit_frame_pointer = 1;\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n "}, {"sha": "862f7ca640241c034933af18e0a9b73417ed2c05", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de5e93a356cea51aeb35604dedca098bb4e2f20/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de5e93a356cea51aeb35604dedca098bb4e2f20/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=3de5e93a356cea51aeb35604dedca098bb4e2f20", "patch": "@@ -755,9 +755,7 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-/* Don't call memory_address_noforce for the address to fetch\n-   the switch offset.  This address is ok as it stands,\n-   but memory_address_noforce would alter it.  */\n+/* This address is OK as it stands.  */\n #define PIC_CASE_VECTOR_ADDRESS(index) index\n \f\n /* For the 68000, we handle X+REG by loading X into a register R and"}, {"sha": "337642057c92b661e979ace0131d2fccd09d963f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de5e93a356cea51aeb35604dedca098bb4e2f20/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de5e93a356cea51aeb35604dedca098bb4e2f20/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3de5e93a356cea51aeb35604dedca098bb4e2f20", "patch": "@@ -324,7 +324,7 @@ Objective-C and Objective-C++ Dialects}.\n -fcse-skip-blocks -fcx-limited-range -fdata-sections -fdce -fdce @gol\n -fdelayed-branch -fdelete-null-pointer-checks -fdse -fdse @gol\n -fearly-inlining -fexpensive-optimizations -ffast-math @gol\n--ffinite-math-only -ffloat-store -fforce-addr -fforward-propagate @gol\n+-ffinite-math-only -ffloat-store -fforward-propagate @gol\n -ffunction-sections -fgcse -fgcse-after-reload -fgcse-las -fgcse-lm @gol\n -fgcse-sm -fif-conversion -fif-conversion2 -finline-functions @gol\n -finline-functions-called-once -finline-limit=@var{n} @gol\n@@ -5141,11 +5141,6 @@ function calls and pops them all at once.\n \n Disabled at levels @option{-O}, @option{-O2}, @option{-O3}, @option{-Os}.\n \n-@item -fforce-addr\n-@opindex fforce-addr\n-Force memory address constants to be copied into registers before\n-doing arithmetic on them.\n-\n @item -fforward-propagate\n @opindex fforward-propagate\n Perform a forward propagation pass on RTL.  The pass tries to combine two"}, {"sha": "a5ed65b2e566512e3b1fc117619e6c71e22f5317", "filename": "gcc/explow.c", "status": "modified", "additions": 7, "deletions": 30, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de5e93a356cea51aeb35604dedca098bb4e2f20/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de5e93a356cea51aeb35604dedca098bb4e2f20/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=3de5e93a356cea51aeb35604dedca098bb4e2f20", "patch": "@@ -431,18 +431,21 @@ memory_address (enum machine_mode mode, rtx x)\n \n       /* At this point, any valid address is accepted.  */\n       if (memory_address_p (mode, x))\n-\tgoto win;\n+\tgoto done;\n \n       /* If it was valid before but breaking out memory refs invalidated it,\n \t use it the old way.  */\n       if (memory_address_p (mode, oldx))\n-\tgoto win2;\n+\t{\n+\t  x = oldx;\n+\t  goto done;\n+\t}\n \n       /* Perform machine-dependent transformations on X\n \t in certain cases.  This is not necessary since the code\n \t below can handle all possible cases, but machine-dependent\n \t transformations can make better code.  */\n-      LEGITIMIZE_ADDRESS (x, oldx, mode, win);\n+      LEGITIMIZE_ADDRESS (x, oldx, mode, done);\n \n       /* PLUS and MULT can appear in special ways\n \t as the result of attempts to make an address usable for indexing.\n@@ -482,17 +485,6 @@ memory_address (enum machine_mode mode, rtx x)\n \t the register is a valid address.  */\n       else\n \tx = force_reg (Pmode, x);\n-\n-      goto done;\n-\n-    win2:\n-      x = oldx;\n-    win:\n-      if (flag_force_addr && ! cse_not_expected && !REG_P (x))\n-\t{\n-\t  x = force_operand (x, NULL_RTX);\n-\t  x = force_reg (Pmode, x);\n-\t}\n     }\n \n  done:\n@@ -515,20 +507,6 @@ memory_address (enum machine_mode mode, rtx x)\n   return x;\n }\n \n-/* Like `memory_address' but pretend `flag_force_addr' is 0.  */\n-\n-rtx\n-memory_address_noforce (enum machine_mode mode, rtx x)\n-{\n-  int ambient_force_addr = flag_force_addr;\n-  rtx val;\n-\n-  flag_force_addr = 0;\n-  val = memory_address (mode, x);\n-  flag_force_addr = ambient_force_addr;\n-  return val;\n-}\n-\n /* Convert a mem ref into one with a valid memory address.\n    Pass through anything else unchanged.  */\n \n@@ -538,8 +516,7 @@ validize_mem (rtx ref)\n   if (!MEM_P (ref))\n     return ref;\n   ref = use_anchored_address (ref);\n-  if (! (flag_force_addr && CONSTANT_ADDRESS_P (XEXP (ref, 0)))\n-      && memory_address_p (GET_MODE (ref), XEXP (ref, 0)))\n+  if (memory_address_p (GET_MODE (ref), XEXP (ref, 0)))\n     return ref;\n \n   /* Don't alter REF itself, since that is probably a stack slot.  */"}, {"sha": "87ed3c29874b36f2cd0b030f11d6c2f17761c77d", "filename": "gcc/expr.c", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de5e93a356cea51aeb35604dedca098bb4e2f20/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de5e93a356cea51aeb35604dedca098bb4e2f20/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=3de5e93a356cea51aeb35604dedca098bb4e2f20", "patch": "@@ -3391,16 +3391,12 @@ emit_move_insn (rtx x, rtx y)\n   /* If X or Y are memory references, verify that their addresses are valid\n      for the machine.  */\n   if (MEM_P (x)\n-      && ((! memory_address_p (GET_MODE (x), XEXP (x, 0))\n-\t   && ! push_operand (x, GET_MODE (x)))\n-\t  || (flag_force_addr\n-\t      && CONSTANT_ADDRESS_P (XEXP (x, 0)))))\n+      && (! memory_address_p (GET_MODE (x), XEXP (x, 0))\n+\t  && ! push_operand (x, GET_MODE (x))))\n     x = validize_mem (x);\n \n   if (MEM_P (y)\n-      && (! memory_address_p (GET_MODE (y), XEXP (y, 0))\n-\t  || (flag_force_addr\n-\t      && CONSTANT_ADDRESS_P (XEXP (y, 0)))))\n+      && ! memory_address_p (GET_MODE (y), XEXP (y, 0)))\n     y = validize_mem (y);\n \n   gcc_assert (mode != BLKmode);\n@@ -7294,9 +7290,8 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       if (MEM_P (decl_rtl) && REG_P (XEXP (decl_rtl, 0)))\n \ttemp = validize_mem (decl_rtl);\n \n-      /* If DECL_RTL is memory, we are in the normal case and either\n-\t the address is not valid or it is not a register and -fforce-addr\n-\t is specified, get the address into a register.  */\n+      /* If DECL_RTL is memory, we are in the normal case and the\n+\t address is not valid, get the address into a register.  */\n \n       else if (MEM_P (decl_rtl) && modifier != EXPAND_INITIALIZER)\n \t{\n@@ -7305,8 +7300,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t  decl_rtl = use_anchored_address (decl_rtl);\n \t  if (modifier != EXPAND_CONST_ADDRESS\n \t      && modifier != EXPAND_SUM\n-\t      && (!memory_address_p (DECL_MODE (exp), XEXP (decl_rtl, 0))\n-\t\t  || (flag_force_addr && !REG_P (XEXP (decl_rtl, 0)))))\n+\t      && !memory_address_p (DECL_MODE (exp), XEXP (decl_rtl, 0)))\n \t    temp = replace_equiv_address (decl_rtl,\n \t\t\t\t\t  copy_rtx (XEXP (decl_rtl, 0)));\n \t}\n@@ -7428,8 +7422,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       if (modifier != EXPAND_CONST_ADDRESS\n \t  && modifier != EXPAND_INITIALIZER\n \t  && modifier != EXPAND_SUM\n-\t  && (! memory_address_p (mode, XEXP (temp, 0))\n-\t      || flag_force_addr))\n+\t  && ! memory_address_p (mode, XEXP (temp, 0)))\n \treturn replace_equiv_address (temp,\n \t\t\t\t      copy_rtx (XEXP (temp, 0)));\n       return temp;\n@@ -9970,10 +9963,6 @@ do_tablejump (rtx index, enum machine_mode mode, rtx range, rtx table_label,\n     index = copy_to_mode_reg (Pmode, index);\n #endif\n \n-  /* If flag_force_addr were to affect this address\n-     it could interfere with the tricky assumptions made\n-     about addresses that contain label-refs,\n-     which may be valid only very near the tablejump itself.  */\n   /* ??? The only correct use of CASE_VECTOR_MODE is the one inside the\n      GET_MODE_SIZE, because this indicates how large insns are.  The other\n      uses should all be Pmode, because they are addresses.  This code\n@@ -9987,7 +9976,7 @@ do_tablejump (rtx index, enum machine_mode mode, rtx range, rtx table_label,\n     index = PIC_CASE_VECTOR_ADDRESS (index);\n   else\n #endif\n-    index = memory_address_noforce (CASE_VECTOR_MODE, index);\n+    index = memory_address (CASE_VECTOR_MODE, index);\n   temp = gen_reg_rtx (CASE_VECTOR_MODE);\n   vector = gen_const_mem (CASE_VECTOR_MODE, index);\n   convert_move (temp, vector, 0);"}, {"sha": "8cc5ae3ff805f072f6246344c6c99549940b92c8", "filename": "gcc/expr.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de5e93a356cea51aeb35604dedca098bb4e2f20/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de5e93a356cea51aeb35604dedca098bb4e2f20/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=3de5e93a356cea51aeb35604dedca098bb4e2f20", "patch": "@@ -616,9 +616,6 @@ extern rtx eliminate_constant_term (rtx, rtx *);\n    by emitting insns to perform arithmetic if nec.  */\n extern rtx memory_address (enum machine_mode, rtx);\n \n-/* Like `memory_address' but pretend `flag_force_addr' is 0.  */\n-extern rtx memory_address_noforce (enum machine_mode, rtx);\n-\n /* Return a memory reference like MEMREF, but with its mode changed\n    to MODE and its address changed to ADDR.\n    (VOIDmode means don't change the mode."}, {"sha": "abd0b51a17a92a08beff1b293006e84e3a322997", "filename": "gcc/testsuite/gcc.c-torture/compile/20050802-1.c", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2dda7fed054ab18eaabd73adb0ca30b7bcb6605/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20050802-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2dda7fed054ab18eaabd73adb0ca30b7bcb6605/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20050802-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20050802-1.c?ref=d2dda7fed054ab18eaabd73adb0ca30b7bcb6605", "patch": "@@ -1,10 +0,0 @@\n-/* PR 23196 */\n-/* { dg-options \"-fforce-addr\" } */\n-\n-void foo()\n-{\n-  char c;\n-\n-  c |= 1;\n-  bar(&c);\n-}"}, {"sha": "3f40160ed9978bf8e19c1beead1c9563ef2d5bdb", "filename": "gcc/testsuite/gcc.dg/20011113-1.c", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2dda7fed054ab18eaabd73adb0ca30b7bcb6605/gcc%2Ftestsuite%2Fgcc.dg%2F20011113-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2dda7fed054ab18eaabd73adb0ca30b7bcb6605/gcc%2Ftestsuite%2Fgcc.dg%2F20011113-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20011113-1.c?ref=d2dda7fed054ab18eaabd73adb0ca30b7bcb6605", "patch": "@@ -1,16 +0,0 @@\n-/* Copyright (C) 2001  Free Software Foundation.\n-   by Hans-Peter Nilsson  <hp@axis.com>  */\n-\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -fforce-addr\" } */\n-\n-const char foo[] = \"fum\";\n-const struct fi\n-{\n-  const char *const in;\n-  const char *const out;\n-  const int flags;\n-} fie[] = {\n-  {\"nw\", \" new\", 0},\n-  {\"dl\", foo, 1}\n-};"}]}