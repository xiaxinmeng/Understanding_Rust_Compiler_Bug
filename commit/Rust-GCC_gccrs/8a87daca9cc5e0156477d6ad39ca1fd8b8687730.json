{"sha": "8a87daca9cc5e0156477d6ad39ca1fd8b8687730", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE4N2RhY2E5Y2M1ZTAxNTY0NzdkNmFkMzljYTFmZDhiODY4NzczMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-02-03T19:44:27Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-02-03T19:44:27Z"}, "message": "PR c++/12245 - excessive memory use\n\n\t* constexpr.c (maybe_constant_value): Fold maybe_constant_value_1\n\tback in.  Don't cache constants.\n\t(maybe_constant_init): Don't cache constants.\n\nFrom-SVN: r245169", "tree": {"sha": "89916b185c7ce9e6cdac80634876abedd8b5f330", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89916b185c7ce9e6cdac80634876abedd8b5f330"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a87daca9cc5e0156477d6ad39ca1fd8b8687730", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a87daca9cc5e0156477d6ad39ca1fd8b8687730", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a87daca9cc5e0156477d6ad39ca1fd8b8687730", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a87daca9cc5e0156477d6ad39ca1fd8b8687730/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "99be38ec6a484b92940c2d415e14db33ebfb19bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99be38ec6a484b92940c2d415e14db33ebfb19bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99be38ec6a484b92940c2d415e14db33ebfb19bc"}], "stats": {"total": 42, "additions": 20, "deletions": 22}, "files": [{"sha": "f77e6cb985f32369dc9e3a260be7a6c19ad7cc2e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a87daca9cc5e0156477d6ad39ca1fd8b8687730/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a87daca9cc5e0156477d6ad39ca1fd8b8687730/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8a87daca9cc5e0156477d6ad39ca1fd8b8687730", "patch": "@@ -1,5 +1,10 @@\n 2017-02-03  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/12245 - excessive memory use\n+\t* constexpr.c (maybe_constant_value): Fold maybe_constant_value_1\n+\tback in.  Don't cache constants.\n+\t(maybe_constant_init): Don't cache constants.\n+\n \tPR c++/79294 - ICE with invalid template argument\n \t* pt.c (convert_nontype_argument_function): Check value-dependence.\n \t(convert_nontype_argument): Don't check it here for function ptrs."}, {"sha": "f9bc518641b5908f4fccef41bfeb2d8760bbb805", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a87daca9cc5e0156477d6ad39ca1fd8b8687730/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a87daca9cc5e0156477d6ad39ca1fd8b8687730/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=8a87daca9cc5e0156477d6ad39ca1fd8b8687730", "patch": "@@ -4777,8 +4777,10 @@ fold_simple (tree t)\n    Otherwise, if T does not have TREE_CONSTANT set, returns T.\n    Otherwise, returns a version of T without TREE_CONSTANT.  */\n \n-static tree\n-maybe_constant_value_1 (tree t, tree decl)\n+static GTY((deletable)) hash_map<tree, tree> *cv_cache;\n+\n+tree\n+maybe_constant_value (tree t, tree decl)\n {\n   tree r;\n \n@@ -4791,36 +4793,25 @@ maybe_constant_value_1 (tree t, tree decl)\n \t}\n       return t;\n     }\n+  else if (CONSTANT_CLASS_P (t))\n+    /* No caching or evaluation needed.  */\n+    return t;\n+\n+  if (cv_cache == NULL)\n+    cv_cache = hash_map<tree, tree>::create_ggc (101);\n+  if (tree *cached = cv_cache->get (t))\n+    return *cached;\n \n   r = cxx_eval_outermost_constant_expr (t, true, true, decl);\n   gcc_checking_assert (r == t\n \t\t       || CONVERT_EXPR_P (t)\n \t\t       || TREE_CODE (t) == VIEW_CONVERT_EXPR\n \t\t       || (TREE_CONSTANT (t) && !TREE_CONSTANT (r))\n \t\t       || !cp_tree_equal (r, t));\n+  cv_cache->put (t, r);\n   return r;\n }\n \n-static GTY((deletable)) hash_map<tree, tree> *cv_cache;\n-\n-/* If T is a constant expression, returns its reduced value.\n-   Otherwise, if T does not have TREE_CONSTANT set, returns T.\n-   Otherwise, returns a version of T without TREE_CONSTANT.  */\n-\n-tree\n-maybe_constant_value (tree t, tree decl)\n-{\n-  if (cv_cache == NULL)\n-    cv_cache = hash_map<tree, tree>::create_ggc (101);\n-\n-  if (tree *cached = cv_cache->get (t))\n-    return *cached;\n-\n-  tree ret = maybe_constant_value_1 (t, decl);\n-  cv_cache->put (t, ret);\n-  return ret;\n-}\n-\n /* Dispose of the whole CV_CACHE.  */\n \n static void\n@@ -4916,6 +4907,8 @@ maybe_constant_init (tree t, tree decl)\n     t = TARGET_EXPR_INITIAL (t);\n   if (!potential_nondependent_static_init_expression (t))\n     /* Don't try to evaluate it.  */;\n+  else if (CONSTANT_CLASS_P (t))\n+    /* No evaluation needed.  */;\n   else\n     t = cxx_eval_outermost_constant_expr (t, true, false, decl);\n   if (TREE_CODE (t) == TARGET_EXPR)"}]}