{"sha": "2547e60d2fca2a323a1b16e04c595aeeec598bc1", "node_id": "C_kwDOANBUbNoAKDI1NDdlNjBkMmZjYTJhMzIzYTFiMTZlMDRjNTk1YWVlZWM1OThiYzE", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-16T17:05:40Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-17T16:16:20Z"}, "message": "Fix ICE assertion on bad duplicate name\n\nThis fixes the ice for TypeNoBounds canonical paths for reference types\nwhich was not implemented resulting in empty paths for the canonical\npath of impl_blocks for example.\n\nA Fixme has been added to point out that we should update this interface\nto only take AST::TypeNoBounds.\n\nFixes #808", "tree": {"sha": "13db0ace4e0315564d028ac4f8c77c31661a2e3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13db0ace4e0315564d028ac4f8c77c31661a2e3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2547e60d2fca2a323a1b16e04c595aeeec598bc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2547e60d2fca2a323a1b16e04c595aeeec598bc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2547e60d2fca2a323a1b16e04c595aeeec598bc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2547e60d2fca2a323a1b16e04c595aeeec598bc1/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5514d9cec51d5ec7cc30dd6cdbfadfdddbe0aab3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5514d9cec51d5ec7cc30dd6cdbfadfdddbe0aab3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5514d9cec51d5ec7cc30dd6cdbfadfdddbe0aab3"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "2bcf79d3decb424171b5ce5ee618dcf6d237503f", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2547e60d2fca2a323a1b16e04c595aeeec598bc1/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2547e60d2fca2a323a1b16e04c595aeeec598bc1/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=2547e60d2fca2a323a1b16e04c595aeeec598bc1", "patch": "@@ -101,6 +101,7 @@ class ResolveTypeToCanonicalPath : public ResolverBase\n   using Rust::Resolver::ResolverBase::visit;\n \n public:\n+  // FIXME this should really only take AST::TypeNoBounds&\n   static CanonicalPath resolve (AST::Type &type,\n \t\t\t\tbool include_generic_args = true,\n \t\t\t\tbool type_resolve_generic_args = true)\n@@ -121,6 +122,8 @@ class ResolveTypeToCanonicalPath : public ResolverBase\n       }\n   }\n \n+  void visit (AST::ReferenceType &ref) override;\n+\n   void visit (AST::TypePathSegmentGeneric &seg) override;\n \n   void visit (AST::TypePathSegment &seg) override;"}, {"sha": "45daa02b240b9c2d42ad2cf2170f44080b60f571", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2547e60d2fca2a323a1b16e04c595aeeec598bc1/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2547e60d2fca2a323a1b16e04c595aeeec598bc1/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=2547e60d2fca2a323a1b16e04c595aeeec598bc1", "patch": "@@ -481,6 +481,24 @@ ResolveTypeToCanonicalPath::visit (AST::TypePathSegment &seg)\n   result = result.append (ident_seg);\n }\n \n+void\n+ResolveTypeToCanonicalPath::visit (AST::ReferenceType &ref)\n+{\n+  auto inner_type\n+    = ResolveTypeToCanonicalPath::resolve (*ref.get_type_referenced ().get (),\n+\t\t\t\t\t   include_generic_args_flag,\n+\t\t\t\t\t   type_resolve_generic_args_flag);\n+\n+  std::string segment_string (\"&\");\n+  if (ref.get_has_mut ())\n+    segment_string += \"mut \";\n+\n+  segment_string += inner_type.get ();\n+\n+  auto ident_seg = CanonicalPath::new_seg (ref.get_node_id (), segment_string);\n+  result = result.append (ident_seg);\n+}\n+\n // rust-ast-resolve-expr.h\n \n void"}]}