{"sha": "74d5be8c5779288c38cfc4fde48feb7ce4cf0071", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRkNWJlOGM1Nzc5Mjg4YzM4Y2ZjNGZkZTQ4ZmViN2NlNGNmMDA3MQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2016-05-06T10:29:33Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2016-05-06T10:29:33Z"}, "message": "sh.md (*cmpeqsi_t): Remove combine insn pattern and similar corresponding combine split pattern.\n\ngcc/\n\t* config/sh/sh.md (*cmpeqsi_t): Remove combine insn pattern and similar\n\tcorresponding combine split pattern.\n\nFrom-SVN: r235956", "tree": {"sha": "bd660e7b66508384e4799283985e7eaa087fdcd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd660e7b66508384e4799283985e7eaa087fdcd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74d5be8c5779288c38cfc4fde48feb7ce4cf0071", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74d5be8c5779288c38cfc4fde48feb7ce4cf0071", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74d5be8c5779288c38cfc4fde48feb7ce4cf0071", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74d5be8c5779288c38cfc4fde48feb7ce4cf0071/comments", "author": null, "committer": null, "parents": [{"sha": "ce23a8ff10368c0d9b0b5aba820202bfea07b2c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce23a8ff10368c0d9b0b5aba820202bfea07b2c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce23a8ff10368c0d9b0b5aba820202bfea07b2c3"}], "stats": {"total": 44, "additions": 5, "deletions": 39}, "files": [{"sha": "50a47af4d04c8fbced9ad31b8fa737a16617daa2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d5be8c5779288c38cfc4fde48feb7ce4cf0071/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d5be8c5779288c38cfc4fde48feb7ce4cf0071/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74d5be8c5779288c38cfc4fde48feb7ce4cf0071", "patch": "@@ -1,3 +1,8 @@\n+2016-05-06  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* config/sh/sh.md (*cmpeqsi_t): Remove combine insn pattern and similar\n+\tcorresponding combine split pattern.\n+\n 2016-05-06  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/58219"}, {"sha": "2d0ca2feb8c91548b3664a77b8bdd0a5baf65542", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d5be8c5779288c38cfc4fde48feb7ce4cf0071/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d5be8c5779288c38cfc4fde48feb7ce4cf0071/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=74d5be8c5779288c38cfc4fde48feb7ce4cf0071", "patch": "@@ -909,22 +909,6 @@\n   FAIL;\n })\n \n-;; FIXME: For some reason, on SH4A and SH2A combine fails to simplify this\n-;; pattern by itself.  What this actually does is:\n-;;\tx == 0: (1 >> 0-0) & 1 = 1\n-;;\tx != 0: (1 >> 0-x) & 1 = 0\n-;; Without this the test pr51244-8.c fails on SH2A and SH4A.\n-(define_insn_and_split \"*cmpeqsi_t\"\n-  [(set (reg:SI T_REG)\n-\t(and:SI (lshiftrt:SI\n-\t\t  (const_int 1)\n-\t\t  (neg:SI (match_operand:SI 0 \"arith_reg_operand\" \"r\")))\n-\t\t(const_int 1)))]\n-  \"TARGET_SH1\"\n-  \"#\"\n-  \"&& 1\"\n-  [(set (reg:SI T_REG) (eq:SI (match_dup 0) (const_int 0)))])\n-\n (define_insn \"cmpgtsi_t\"\n   [(set (reg:SI T_REG)\n \t(gt:SI (match_operand:SI 0 \"arith_reg_operand\" \"r,r\")\n@@ -1229,29 +1213,6 @@\n \t\t\t   (label_ref (match_dup 2))\n \t\t\t   (pc)))])\n \n-;; FIXME: Similar to the *cmpeqsi_t pattern above, for some reason, on SH4A\n-;; and SH2A combine fails to simplify this pattern by itself.\n-;; What this actually does is:\n-;;\tx == 0: (1 >> 0-0) & 1 = 1\n-;;\tx != 0: (1 >> 0-x) & 1 = 0\n-;; Without this the test pr51244-8.c fails on SH2A and SH4A.\n-(define_split\n-  [(set (pc)\n-\t(if_then_else\n-\t  (eq (and:SI (lshiftrt:SI\n-\t\t\t(const_int 1)\n-\t\t\t(neg:SI (match_operand:SI 0 \"arith_reg_operand\" \"\")))\n-\t\t      (const_int 1))\n-\t      (const_int 0))\n-\t  (label_ref (match_operand 2))\n-\t  (pc)))\n-   (clobber (reg:SI T_REG))]\n-  \"TARGET_SH1\"\n-  [(set (reg:SI T_REG) (eq:SI (match_dup 0) (const_int 0)))\n-   (set (pc) (if_then_else (eq (reg:SI T_REG) (const_int 0))\n-\t\t\t   (label_ref (match_dup 2))\n-\t\t\t   (pc)))])\n-\n ;; FIXME: These don't seem to have any effect on the generated cbranch code\n ;;\t  anymore, but only on some register allocation choices.\n (define_split"}]}