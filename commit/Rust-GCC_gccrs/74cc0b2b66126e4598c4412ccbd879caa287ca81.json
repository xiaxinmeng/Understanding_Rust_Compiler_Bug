{"sha": "74cc0b2b66126e4598c4412ccbd879caa287ca81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRjYzBiMmI2NjEyNmU0NTk4YzQ0MTJjY2JkODc5Y2FhMjg3Y2E4MQ==", "commit": {"author": {"name": "Steve Ellcey", "email": "sellcey@cavium.com", "date": "2017-08-01T15:37:22Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2017-08-01T15:37:22Z"}, "message": "re PR tree-optimization/80925 (vect peeling failures)\n\n2017-08-01  Steve Ellcey  <sellcey@cavium.com>\n\n\tPR tree-optimization/80925\n\t* gcc.dg/vect/vect-28.c: Add\n\t--param vect-max-peeling-for-alignment=0 option.\n\tRemove unaligned access and peeling checks.\n\t* gcc.dg/vect/vect-33-big-array.c: Ditto.\n\t* gcc.dg/vect/vect-70.c: Ditto.\n\t* gcc.dg/vect/vect-87.c: Ditto.\n\t* gcc.dg/vect/vect-88.c: Ditto.\n\t* gcc.dg/vect/vect-91.c: Ditto.\n\t* gcc.dg/vect/vect-93.c: Ditto.\n\nFrom-SVN: r250783", "tree": {"sha": "53f56e9ff0cf53d45920921379affbcaec50a15f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53f56e9ff0cf53d45920921379affbcaec50a15f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74cc0b2b66126e4598c4412ccbd879caa287ca81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74cc0b2b66126e4598c4412ccbd879caa287ca81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74cc0b2b66126e4598c4412ccbd879caa287ca81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74cc0b2b66126e4598c4412ccbd879caa287ca81/comments", "author": {"login": "sellcey", "id": 25938520, "node_id": "MDQ6VXNlcjI1OTM4NTIw", "avatar_url": "https://avatars.githubusercontent.com/u/25938520?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sellcey", "html_url": "https://github.com/sellcey", "followers_url": "https://api.github.com/users/sellcey/followers", "following_url": "https://api.github.com/users/sellcey/following{/other_user}", "gists_url": "https://api.github.com/users/sellcey/gists{/gist_id}", "starred_url": "https://api.github.com/users/sellcey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sellcey/subscriptions", "organizations_url": "https://api.github.com/users/sellcey/orgs", "repos_url": "https://api.github.com/users/sellcey/repos", "events_url": "https://api.github.com/users/sellcey/events{/privacy}", "received_events_url": "https://api.github.com/users/sellcey/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "0cc7f3b23f17b1702082b76e59ca35328bc7b1d7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74cc0b2b66126e4598c4412ccbd879caa287ca81/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74cc0b2b66126e4598c4412ccbd879caa287ca81/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=74cc0b2b66126e4598c4412ccbd879caa287ca81", "patch": "@@ -1,3 +1,16 @@\n+2017-08-01  Steve Ellcey  <sellcey@cavium.com>\n+\n+\tPR tree-optimization/80925\n+\t* gcc.dg/vect/vect-28.c: Add\n+\t--param vect-max-peeling-for-alignment=0 option.\n+\tRemove unaligned access and peeling checks.\n+\t* gcc.dg/vect/vect-33-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-70.c: Ditto.\n+\t* gcc.dg/vect/vect-87.c: Ditto.\n+\t* gcc.dg/vect/vect-88.c: Ditto.\n+\t* gcc.dg/vect/vect-91.c: Ditto.\n+\t* gcc.dg/vect/vect-93.c: Ditto.\n+\n 2017-08-01  Tom de Vries  <tom@codesourcery.com>\n \n \t* gcc.target/nvptx/slp-2.c (foo): Use signed loop iteration variable."}, {"sha": "e213df1a46548d7d2962335c5600c252d9d5d5f3", "filename": "gcc/testsuite/gcc.dg/vect/vect-28.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74cc0b2b66126e4598c4412ccbd879caa287ca81/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74cc0b2b66126e4598c4412ccbd879caa287ca81/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-28.c?ref=74cc0b2b66126e4598c4412ccbd879caa287ca81", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target vect_int } */\n+/* { dg-additional-options \"--param vect-max-peeling-for-alignment=0\" } */\n \n #include <stdarg.h>\n #include \"tree-vect.h\"\n@@ -39,6 +40,4 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { target { vector_alignment_reachable } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" { target { {! vector_alignment_reachable} && {! vect_hw_misalign} } } } } */"}, {"sha": "c1aa399a240e8c7f50ae10610e2c40d41ea8d555", "filename": "gcc/testsuite/gcc.dg/vect/vect-33-big-array.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74cc0b2b66126e4598c4412ccbd879caa287ca81/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-33-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74cc0b2b66126e4598c4412ccbd879caa287ca81/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-33-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-33-big-array.c?ref=74cc0b2b66126e4598c4412ccbd879caa287ca81", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target vect_int } */\n+/* { dg-additional-options \"--param vect-max-peeling-for-alignment=0\" } */\n \n #include <stdarg.h>\n #include \"tree-vect.h\"\n@@ -38,6 +39,4 @@ int main (void)\n \n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { target vector_alignment_reachable } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" { target { {! vector_alignment_reachable} && {! vect_hw_misalign} } } } } */"}, {"sha": "a110f9c34e810650baedfb2327ea5b4d92a7d695", "filename": "gcc/testsuite/gcc.dg/vect/vect-70.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74cc0b2b66126e4598c4412ccbd879caa287ca81/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-70.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74cc0b2b66126e4598c4412ccbd879caa287ca81/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-70.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-70.c?ref=74cc0b2b66126e4598c4412ccbd879caa287ca81", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target vect_int } */\n+/* { dg-additional-options \"--param vect-max-peeling-for-alignment=0\" } */\n \n #include <stdarg.h>\n #include \"tree-vect.h\"\n@@ -63,6 +64,4 @@ int main (void)\n }\n           \n /* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" {target { vector_alignment_reachable} } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" {target {{! vector_alignment_reachable} && {! vect_hw_misalign} } } } } */"}, {"sha": "17b1dcdee99c819c8a65eadbf9159d9f78242f62", "filename": "gcc/testsuite/gcc.dg/vect/vect-87.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74cc0b2b66126e4598c4412ccbd879caa287ca81/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-87.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74cc0b2b66126e4598c4412ccbd879caa287ca81/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-87.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-87.c?ref=74cc0b2b66126e4598c4412ccbd879caa287ca81", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target vect_int } */\n+/* { dg-additional-options \"--param vect-max-peeling-for-alignment=0\" } */\n \n #include <stdarg.h>\n #include \"tree-vect.h\"\n@@ -50,6 +51,4 @@ int main (void)\n \n /* Fails for targets that don't vectorize PLUS (e.g alpha).  */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" {target vector_alignment_reachable} } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" {target { {! vector_alignment_reachable} && {! vect_hw_misalign} } } } } */"}, {"sha": "b99cb4d89a4b8e94000dc6334514af042e1d2031", "filename": "gcc/testsuite/gcc.dg/vect/vect-88.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74cc0b2b66126e4598c4412ccbd879caa287ca81/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-88.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74cc0b2b66126e4598c4412ccbd879caa287ca81/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-88.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-88.c?ref=74cc0b2b66126e4598c4412ccbd879caa287ca81", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target vect_int } */\n+/* { dg-additional-options \"--param vect-max-peeling-for-alignment=0\" } */\n \n #include <stdarg.h>\n #include \"tree-vect.h\"\n@@ -50,6 +51,4 @@ int main (void)\n \n /* Fails for targets that don't vectorize PLUS (e.g alpha).  */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" {target vector_alignment_reachable } } }  */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" {target { {! vector_alignment_reachable} && {! vect_hw_misalign} } } } } */"}, {"sha": "979b8e93aefa89f738a39a8bcd3b4e01546c2ef8", "filename": "gcc/testsuite/gcc.dg/vect/vect-91.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74cc0b2b66126e4598c4412ccbd879caa287ca81/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-91.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74cc0b2b66126e4598c4412ccbd879caa287ca81/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-91.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-91.c?ref=74cc0b2b66126e4598c4412ccbd879caa287ca81", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target vect_int } */\n+/* { dg-additional-options \"--param vect-max-peeling-for-alignment=0\" } */\n \n #include <stdarg.h>\n #include \"tree-vect.h\"\n@@ -60,5 +61,4 @@ main3 ()\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 3 \"vect\" { xfail vect_no_int_add } } } */\n /* { dg-final { scan-tree-dump-times \"accesses have the same alignment.\" 3 \"vect\" { target { { vect_aligned_arrays } && {! vect_sizes_32B_16B} } } } } */\n /* { dg-final { scan-tree-dump-times \"accesses have the same alignment.\" 2 \"vect\" { target { {! vect_aligned_arrays } && {vect_sizes_32B_16B} } } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 3 \"vect\" {target { vector_alignment_reachable } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 3 \"vect\" {target { {! vector_alignment_reachable} && {! vect_hw_misalign} } } } } */"}, {"sha": "dfa4d42b8b2c62d2a34c314d9b1ad33d3e491164", "filename": "gcc/testsuite/gcc.dg/vect/vect-93.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74cc0b2b66126e4598c4412ccbd879caa287ca81/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-93.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74cc0b2b66126e4598c4412ccbd879caa287ca81/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-93.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-93.c?ref=74cc0b2b66126e4598c4412ccbd879caa287ca81", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target vect_float } */\n+/* { dg-additional-options \"--param vect-max-peeling-for-alignment=0\" } */\n \n #include <stdarg.h>\n #include \"tree-vect.h\"\n@@ -71,14 +72,11 @@ int main (void)\n \n /* main && main1 together: */\n /* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 2 \"vect\" { target powerpc*-*-* i?86-*-* x86_64-*-* } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" { target { vect_no_align && {! vector_alignment_reachable} } } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 3 \"vect\" { xfail { { vect_no_align } || { { ! vector_alignment_reachable} || vect_element_align } } } } } */\n \n /* in main1: */\n /* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { target !powerpc*-*-* !i?86-*-* !x86_64-*-* } } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n \n /* in main: */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n "}]}