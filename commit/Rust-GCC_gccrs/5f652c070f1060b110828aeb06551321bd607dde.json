{"sha": "5f652c070f1060b110828aeb06551321bd607dde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY2NTJjMDcwZjEwNjBiMTEwODI4YWViMDY1NTEzMjFiZDYwN2RkZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-06-23T00:49:46Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-06-23T00:49:46Z"}, "message": "expr.c (expand_expr): STRIP_NOPS before checking against MAX_INTEGER_COMPUTATION_MODE\n\n\t* expr.c (expand_expr): STRIP_NOPS before checking against\n\tMAX_INTEGER_COMPUTATION_MODE\n\t(check_max_integer_computation_mode): Likewise.\n\nFrom-SVN: r27715", "tree": {"sha": "447967b076bf125f03ca262bb8c3d97515e80825", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/447967b076bf125f03ca262bb8c3d97515e80825"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f652c070f1060b110828aeb06551321bd607dde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f652c070f1060b110828aeb06551321bd607dde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f652c070f1060b110828aeb06551321bd607dde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f652c070f1060b110828aeb06551321bd607dde/comments", "author": null, "committer": null, "parents": [{"sha": "49208cca8d7d28b3fede5e7c2ab47864d90e1469", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49208cca8d7d28b3fede5e7c2ab47864d90e1469", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49208cca8d7d28b3fede5e7c2ab47864d90e1469"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "bcdcb16000657f3e09b36f6435b39a21a9068ba0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f652c070f1060b110828aeb06551321bd607dde/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f652c070f1060b110828aeb06551321bd607dde/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f652c070f1060b110828aeb06551321bd607dde", "patch": "@@ -1,3 +1,9 @@\n+Wed Jun 23 00:48:21 1999  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* expr.c (expand_expr): STRIP_NOPS before checking against\n+\tMAX_INTEGER_COMPUTATION_MODE\n+\t(check_max_integer_computation_mode): Likewise.\n+\n Tue Jun 22 20:23:43 1999  Jim Wilson  <wilson@cygnus.com>\n \n \t* md.texi (smul@var{m}3_highpart): Add missing 's' prefix."}, {"sha": "99c5e3671cc98e142108726187816a32ed52fc36", "filename": "gcc/expr.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f652c070f1060b110828aeb06551321bd607dde/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f652c070f1060b110828aeb06551321bd607dde/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=5f652c070f1060b110828aeb06551321bd607dde", "patch": "@@ -5397,9 +5397,13 @@ void\n check_max_integer_computation_mode (exp)\n     tree exp;\n {\n-  enum tree_code code = TREE_CODE (exp);\n+  enum tree_code code;\n   enum machine_mode mode;\n \n+  /* Strip any NOPs that don't change the mode.  */\n+  STRIP_NOPS (exp);\n+  code = TREE_CODE (exp);\n+\n   /* We must allow conversions of constants to MAX_INTEGER_COMPUTATION_MODE.  */\n   if (code == NOP_EXPR\n       && TREE_CODE (TREE_OPERAND (exp, 0)) == INTEGER_CST)\n@@ -5578,7 +5582,12 @@ expand_expr (exp, target, tmode, modifier)\n     }\n \n #ifdef MAX_INTEGER_COMPUTATION_MODE\n+  /* Only check stuff here if the mode we want is different from the mode\n+     of the expression; if it's the same, check_max_integer_computiation_mode\n+     will handle it.  Do we really need to check this stuff at all?  */\n+\n   if (target\n+      && GET_MODE (target) != mode\n       && TREE_CODE (exp) != INTEGER_CST\n       && TREE_CODE (exp) != PARM_DECL\n       && TREE_CODE (exp) != ARRAY_REF\n@@ -5595,7 +5604,8 @@ expand_expr (exp, target, tmode, modifier)\n \tfatal (\"unsupported wide integer operation\");\n     }\n \n-  if (TREE_CODE (exp) != INTEGER_CST\n+  if (tmode != mode\n+      && TREE_CODE (exp) != INTEGER_CST\n       && TREE_CODE (exp) != PARM_DECL\n       && TREE_CODE (exp) != ARRAY_REF\n       && TREE_CODE (exp) != COMPONENT_REF"}]}