{"sha": "c29ea88a1dafb892b521501f36bd11871bcdce98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI5ZWE4OGExZGFmYjg5MmI1MjE1MDFmMzZiZDExODcxYmNkY2U5OA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2000-04-15T15:20:58Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-04-15T15:20:58Z"}, "message": "flow.c (count_basic_blocks, [...]): Remove last change.\n\n\t* flow.c (count_basic_blocks, find_basic_blocks_1): Remove last change.\n\t* optabs.c (emit_libcall_block): If have REG_EHG_REGION, update\n\tregion number to -1.\n\nFrom-SVN: r33164", "tree": {"sha": "821e1bef737bb762147038f329cc098df7dca708", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/821e1bef737bb762147038f329cc098df7dca708"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c29ea88a1dafb892b521501f36bd11871bcdce98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c29ea88a1dafb892b521501f36bd11871bcdce98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c29ea88a1dafb892b521501f36bd11871bcdce98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c29ea88a1dafb892b521501f36bd11871bcdce98/comments", "author": null, "committer": null, "parents": [{"sha": "a46c7e85d8324ee8946c255fbd1a547a6b4d2b8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a46c7e85d8324ee8946c255fbd1a547a6b4d2b8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a46c7e85d8324ee8946c255fbd1a547a6b4d2b8c"}], "stats": {"total": 79, "additions": 35, "deletions": 44}, "files": [{"sha": "2c8a972fc155b6507324a82f6b9fcc8d8b69a417", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29ea88a1dafb892b521501f36bd11871bcdce98/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29ea88a1dafb892b521501f36bd11871bcdce98/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c29ea88a1dafb892b521501f36bd11871bcdce98", "patch": "@@ -1,3 +1,9 @@\n+Sat Apr 15 10:59:19 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* flow.c (count_basic_blocks, find_basic_blocks_1): Remove last change.\n+\t* optabs.c (emit_libcall_block): If have REG_EHG_REGION, update\n+\tregion number to -1.\n+\n 2000-04-15  Richard Earnshaw (rearnsah@arm.com)\n \n \t* emit-rtl.c (unshare_all_rtl_again): Unmark everything, then"}, {"sha": "9f7537e3aeab6a367845d82649c0851f73a9ff93", "filename": "gcc/flow.c", "status": "modified", "additions": 16, "deletions": 33, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29ea88a1dafb892b521501f36bd11871bcdce98/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29ea88a1dafb892b521501f36bd11871bcdce98/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=c29ea88a1dafb892b521501f36bd11871bcdce98", "patch": "@@ -462,7 +462,6 @@ count_basic_blocks (f)\n   register int count = 0;\n   int eh_region = 0;\n   int call_had_abnormal_edge = 0;\n-  int in_libcall = 0;\n \n   prev_code = JUMP_INSN;\n   for (insn = f; insn; insn = NEXT_INSN (insn))\n@@ -473,17 +472,9 @@ count_basic_blocks (f)\n \t  || (GET_RTX_CLASS (code) == 'i'\n \t      && (prev_code == JUMP_INSN\n \t\t  || prev_code == BARRIER\n-\t\t  || (prev_code == CALL_INSN\n-\t\t      && call_had_abnormal_edge && in_libcall == 0))))\n+\t\t  || (prev_code == CALL_INSN && call_had_abnormal_edge))))\n \tcount++;\n \n-      /* Track whether or not we are in a LIBCALL block.  These must\n-\t all be within the same basic block.  */\n-      if (find_reg_note (insn, REG_LIBCALL, NULL_RTX) != 0)\n-\tin_libcall++;\n-      else if (find_reg_note (insn, REG_RETVAL, NULL_RTX) != 0)\n-\tin_libcall--;\n-\n       /* Record whether this call created an edge.  */\n       if (code == CALL_INSN)\n \t{\n@@ -538,7 +529,6 @@ find_basic_blocks_1 (f)\n   rtx label_value_list = NULL_RTX;\n   rtx head = NULL_RTX;\n   rtx end = NULL_RTX;\n-  int in_libcall = 0;\n   \n   /* We process the instructions in a slightly different way than we did\n      previously.  This is so that we see a NOTE_BASIC_BLOCK after we have\n@@ -671,9 +661,8 @@ find_basic_blocks_1 (f)\n \t      call_has_abnormal_edge = 1;\n \n \t    /* A basic block ends at a call that can either throw or\n-\t       do a non-local goto.  LIBCALLs must reside totally in one\n-\t       basic block, so don't end a block after them.  */\n-\t    if (call_has_abnormal_edge && in_libcall == 0)\n+\t       do a non-local goto.  */\n+\t    if (call_has_abnormal_edge)\n \t      {\n \t      new_bb_inclusive:\n \t\tif (head == NULL_RTX)\n@@ -713,27 +702,21 @@ find_basic_blocks_1 (f)\n \t     we know isn't part of any otherwise visible control flow.  */\n \t     \n \t  for (note = REG_NOTES (insn); note; note = XEXP (note, 1))\n-\t    {\n-\t      if (REG_NOTE_KIND (note) == REG_LABEL)\n-\t\t{\n-\t\t  rtx lab = XEXP (note, 0), next;\n+\t    if (REG_NOTE_KIND (note) == REG_LABEL)\n+\t      {\n+\t\trtx lab = XEXP (note, 0), next;\n \n-\t\t  if (lab == eh_return_stub_label)\n-\t\t    ;\n-\t\t  else if ((next = next_nonnote_insn (lab)) != NULL\n-\t\t\t   && GET_CODE (next) == JUMP_INSN\n-\t\t\t   && (GET_CODE (PATTERN (next)) == ADDR_VEC\n-\t\t\t       || GET_CODE (PATTERN (next)) == ADDR_DIFF_VEC))\n+\t\tif (lab == eh_return_stub_label)\n \t\t    ;\n-\t\t  else\n-\t\t    label_value_list\n-\t\t      = alloc_EXPR_LIST (0, XEXP (note, 0), label_value_list);\n-\t\t}\n-\t      else if (REG_NOTE_KIND (note) == REG_LIBCALL)\n-\t\tin_libcall++;\n-\t      else if (REG_NOTE_KIND (note) == REG_RETVAL)\n-\t\tin_libcall--;\n-\t    }\n+\t\telse if ((next = next_nonnote_insn (lab)) != NULL\n+\t\t\t && GET_CODE (next) == JUMP_INSN\n+\t\t\t && (GET_CODE (PATTERN (next)) == ADDR_VEC\n+\t\t\t     || GET_CODE (PATTERN (next)) == ADDR_DIFF_VEC))\n+\t\t  ;\n+\t\telse\n+\t\t  label_value_list\n+\t\t    = alloc_EXPR_LIST (0, XEXP (note, 0), label_value_list);\n+\t      }\n \t}\n     }\n "}, {"sha": "5f2a76ad9b9757d75db9468dd2162dc48a7143f1", "filename": "gcc/optabs.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29ea88a1dafb892b521501f36bd11871bcdce98/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29ea88a1dafb892b521501f36bd11871bcdce98/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=c29ea88a1dafb892b521501f36bd11871bcdce98", "patch": "@@ -2758,19 +2758,21 @@ emit_libcall_block (insns, target, result, equiv)\n   rtx prev, next, first, last, insn;\n \n   /* look for any CALL_INSNs in this sequence, and attach a REG_EH_REGION\n-     reg note to indicate that this call cannot throw. (Unless there is\n-     already a REG_EH_REGION note.) */\n+     reg note to indicate that this call cannot throw or execute a nonlocal\n+     goto. (Unless there is already a REG_EH_REGION note, in which case\n+     we update it.)  */\n \n   for (insn = insns; insn; insn = NEXT_INSN (insn))\n-    {\n-      if (GET_CODE (insn) == CALL_INSN)\n-        {\n-          rtx note = find_reg_note (insn, REG_EH_REGION, NULL_RTX);\n-          if (note == NULL_RTX)\n-            REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EH_REGION, GEN_INT (-1),\n-                                                  REG_NOTES (insn));\n-        }\n-    }\n+    if (GET_CODE (insn) == CALL_INSN)\n+      {\n+\trtx note = find_reg_note (insn, REG_EH_REGION, NULL_RTX);\n+\n+\tif (note != 0)\n+\t  XEXP (note, 0) = GEN_INT (-1);\n+\telse\n+\t  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EH_REGION, GEN_INT (-1),\n+\t\t\t\t\t\tREG_NOTES (insn));\n+      }\n \n   /* First emit all insns that set pseudos.  Remove them from the list as\n      we go.  Avoid insns that set pseudos which were referenced in previous"}]}