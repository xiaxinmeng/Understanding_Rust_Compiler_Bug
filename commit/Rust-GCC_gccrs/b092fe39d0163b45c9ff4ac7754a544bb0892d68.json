{"sha": "b092fe39d0163b45c9ff4ac7754a544bb0892d68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA5MmZlMzlkMDE2M2I0NWM5ZmY0YWM3NzU0YTU0NGJiMDg5MmQ2OA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-06-25T11:17:03Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-06-25T11:17:03Z"}, "message": "Remove 'unsigned' in header comment canonicalize_loop_ivs\n\n2015-06-25  Tom de Vries  <tom@codesourcery.com>\n\n\t* tree-ssa-loop-manip.c (canonicalize_loop_ivs): Don't claim in header\n\tcomment that the generated IV is unsigned.\n\nFrom-SVN: r224936", "tree": {"sha": "0d8f91be99c6c2c6ede434867849901e1065f162", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d8f91be99c6c2c6ede434867849901e1065f162"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b092fe39d0163b45c9ff4ac7754a544bb0892d68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b092fe39d0163b45c9ff4ac7754a544bb0892d68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b092fe39d0163b45c9ff4ac7754a544bb0892d68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b092fe39d0163b45c9ff4ac7754a544bb0892d68/comments", "author": null, "committer": null, "parents": [{"sha": "238a4dba309e8e2f37e1372a3fa56d295a43fa80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/238a4dba309e8e2f37e1372a3fa56d295a43fa80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/238a4dba309e8e2f37e1372a3fa56d295a43fa80"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "5e8c7f85d8483f2396ba465bb8e18d3bd8804a31", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b092fe39d0163b45c9ff4ac7754a544bb0892d68/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b092fe39d0163b45c9ff4ac7754a544bb0892d68/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b092fe39d0163b45c9ff4ac7754a544bb0892d68", "patch": "@@ -1,3 +1,8 @@\n+2015-06-25  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* tree-ssa-loop-manip.c (canonicalize_loop_ivs): Don't claim in header\n+\tcomment that the generated IV is unsigned.\n+\n 2015-06-25  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \tPR target/29693"}, {"sha": "a72b779ef9d7c7abec213d812cbde7bf5b73d484", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b092fe39d0163b45c9ff4ac7754a544bb0892d68/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b092fe39d0163b45c9ff4ac7754a544bb0892d68/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=b092fe39d0163b45c9ff4ac7754a544bb0892d68", "patch": "@@ -1319,15 +1319,14 @@ rewrite_all_phi_nodes_with_iv (loop_p loop, tree main_iv)\n   free (bbs);\n }\n \n-/* Bases all the induction variables in LOOP on a single induction\n-   variable (unsigned with base 0 and step 1), whose final value is\n-   compared with *NIT.  When the IV type precision has to be larger\n-   than *NIT type precision, *NIT is converted to the larger type, the\n-   conversion code is inserted before the loop, and *NIT is updated to\n-   the new definition.  When BUMP_IN_LATCH is true, the induction\n-   variable is incremented in the loop latch, otherwise it is\n-   incremented in the loop header.  Return the induction variable that\n-   was created.  */\n+/* Bases all the induction variables in LOOP on a single induction variable\n+   (with base 0 and step 1), whose final value is compared with *NIT.  When the\n+   IV type precision has to be larger than *NIT type precision, *NIT is\n+   converted to the larger type, the conversion code is inserted before the\n+   loop, and *NIT is updated to the new definition.  When BUMP_IN_LATCH is true,\n+   the induction variable is incremented in the loop latch, otherwise it is\n+   incremented in the loop header.  Return the induction variable that was\n+   created.  */\n \n tree\n canonicalize_loop_ivs (struct loop *loop, tree *nit, bool bump_in_latch)"}]}