{"sha": "3e0f61acb373be0655fad7c0bdf700bd82f08bfe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UwZjYxYWNiMzczYmUwNjU1ZmFkN2MwYmRmNzAwYmQ4MmYwOGJmZQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2002-01-05T04:03:36Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2002-01-05T04:03:36Z"}, "message": "invoke.texi (Option Summary): Document -mbranch-predict, -mreg-stack-fill-bug-workaround and their negatives.\n\n\t* doc/invoke.texi (Option Summary) <MMIX Options>: Document\n\t-mbranch-predict, -mreg-stack-fill-bug-workaround and their\n\tnegatives.\n\t(MMIX Options): Ditto.  Fix item/itemx typo for -mno-zero-extend.\n\t* config/mmix/mmix.c (mmix_target_asm_function_prologue): Rework\n\tkludge for pre-october-14th mmix versions to handle new-found bug\n\twith PUSHJ/PUSHGO and the register stack.\n\t* config/mmix/mmix.h (struct machine_function): Rename member\n\thas_call_value_without_parameters to has_call_without_parameters.\n\tAll referers changed.\n\t(TARGET_MASK_REG_STACK_FILL_BUG, TARGET_DEFAULT\n\tTARGET_MASK_BRANCH_PREDICT): New macros.\n\t(TARGET_SWITCHES): New options -mreg-stack-fill-bug-workaround,\n\t-mno-reg-stack-fill-bug-workaround.\n\t* config/mmix/mmix.md (\"call\"): Set struct machine member\n\thas_call_without_parameters.\n\nFrom-SVN: r48558", "tree": {"sha": "5c9c7a976d5bf6612a0a74ec84f16266e97a7623", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c9c7a976d5bf6612a0a74ec84f16266e97a7623"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e0f61acb373be0655fad7c0bdf700bd82f08bfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e0f61acb373be0655fad7c0bdf700bd82f08bfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e0f61acb373be0655fad7c0bdf700bd82f08bfe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e0f61acb373be0655fad7c0bdf700bd82f08bfe/comments", "author": null, "committer": null, "parents": [{"sha": "c6c3221d211f2e438757b489858d7894dbec615f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6c3221d211f2e438757b489858d7894dbec615f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6c3221d211f2e438757b489858d7894dbec615f"}], "stats": {"total": 116, "additions": 98, "deletions": 18}, "files": [{"sha": "c4b13aa255cd115f34bda3bb5e04a6a2f2a18c9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0f61acb373be0655fad7c0bdf700bd82f08bfe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0f61acb373be0655fad7c0bdf700bd82f08bfe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e0f61acb373be0655fad7c0bdf700bd82f08bfe", "patch": "@@ -1,3 +1,22 @@\n+2002-01-05  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* doc/invoke.texi (Option Summary) <MMIX Options>: Document\n+\t-mbranch-predict, -mreg-stack-fill-bug-workaround and their\n+\tnegatives.\n+\t(MMIX Options): Ditto.  Fix item/itemx typo for -mno-zero-extend.\n+\t* config/mmix/mmix.c (mmix_target_asm_function_prologue): Rework\n+\tkludge for pre-october-14th mmix versions to handle new-found bug\n+\twith PUSHJ/PUSHGO and the register stack.\n+\t* config/mmix/mmix.h (struct machine_function): Rename member\n+\thas_call_value_without_parameters to has_call_without_parameters.\n+\tAll referers changed.\n+\t(TARGET_MASK_REG_STACK_FILL_BUG, TARGET_DEFAULT\n+\tTARGET_MASK_BRANCH_PREDICT): New macros.\n+\t(TARGET_SWITCHES): New options -mreg-stack-fill-bug-workaround,\n+\t-mno-reg-stack-fill-bug-workaround.\n+\t* config/mmix/mmix.md (\"call\"): Set struct machine member\n+\thas_call_without_parameters.\n+\n Sat Jan  5 02:20:22 CET 2002  Jan Hubicka  <jh@suse.cz>\n \n \t* cfgcleanup.c (thread_jump): Fix handling of reversed branches."}, {"sha": "5f9b4a8f3874bf1083ceeaa3c1f02ccbadfb917c", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 45, "deletions": 13, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0f61acb373be0655fad7c0bdf700bd82f08bfe/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0f61acb373be0655fad7c0bdf700bd82f08bfe/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=3e0f61acb373be0655fad7c0bdf700bd82f08bfe", "patch": "@@ -967,19 +967,51 @@ mmix_target_asm_function_prologue (stream, locals_size)\n \n   mmix_highest_saved_stack_register = regno;\n \n-  /* FIXME: A kludge for the MMIXware ABI.  The return value comes back in\n-     L of the caller, not just the register number of the X field of\n-     PUSH{J,GO}.  So we need to make L agree with that number if there's a\n-     function call in this function that returns a value but takes no\n-     parameters (if there were parameters, L would be set to at least the\n-     first parameter register, $16).  A real solution includes a pass to\n-     test that settings of $15 (MMIX_RETURN_VALUE_REGNUM for the MMIXware\n-     ABI) dominate all function calls that return a value.  This could be\n-     done in the planned machine_dep_reorg pass to rename all registers.  */\n-  if (! TARGET_ABI_GNU && cfun->machine->has_call_value_without_parameters)\n-    fprintf (stream, \"\\tSET %s,%s\\n\",\n-\t     reg_names[MMIX_RETURN_VALUE_REGNUM],\n-\t     reg_names[MMIX_RETURN_VALUE_REGNUM]);\n+  /* FIXME: Remove this when a corrected mmix version is released.\n+\n+     This kludge is a work-around for a presumed bug in the mmix simulator\n+     (reported to knuth-bug), all versions up and including \"Version of 14\n+     October 2001\".  When the circular register stack fills up, the parts\n+     that would be overwritten need to be written to memory.  If the\n+     \"filling\" instruction is a PUSHJ or PUSHGO, rL == 0 afterwards.  That\n+     precise condition (rS == rO && rL == 0) is the same as for an empty\n+     register stack, which means no more data is written to memory for\n+     that round.  A hack is to remove the \"&& L!=0\" from \"@<Increase\n+     rL@>=\" in mmix-sim.w: the register stack isn't empty under normal\n+     circumstances, unless SAVE or UNSAVE is used, interrupts are enabled\n+     or cases where rS == rO and rL is explicitly written to 0 as in\n+     \"PUT rL,0\".\n+\n+     A workaround is to make sure PUSHJ or PUSHGO isn't filling up the\n+     register stac.  This is accomplished if $16 or higher is written\n+     before the function call.  This doesn't happen from a leaf functions\n+     of course.  For the MMIXware ABI, this can't happen if all called\n+     functions have parameters, because parameters start at $16.\n+     Otherwise, and for the GNU ABI, if any register $16 and up is used,\n+     we can see if it's mentioned before any function-call without\n+     parameters.  This isn't too important; the bug will probably be fixed\n+     soon and there's an option to not emit the work-around code.  The\n+     call-with-parameters kludge wouldn't be there if it hadn't been for\n+     it being left-over from a previous mmix version.\n+\n+     The actual code makes sure any register stack fill happens as early\n+     as in the function prologue with a \"SET $16,$16\" (essentially a nop\n+     except for the effects on the register stack).  */\n+  if (TARGET_REG_STACK_FILL_BUG\n+      && ((TARGET_ABI_GNU && !leaf_function_p ())\n+\t  || (!TARGET_ABI_GNU\n+\t      && cfun->machine->has_call_without_parameters)))\n+    {\n+      /* We don't have a specific macro or derivable expression for the\n+\t first non-call-saved register.  If we need it in other places\n+\t than here (which is temporary code anyway), such a macro should\n+\t be added.  */\n+      int flush_regno\n+\t= TARGET_ABI_GNU ? mmix_highest_saved_stack_register + 2 : 16;\n+\n+      fprintf (stream, \"\\tSET %s,%s\\n\",\n+\t       reg_names[flush_regno], reg_names[flush_regno]);\n+    }\n }\n \n /* TARGET_ASM_FUNCTION_EPILOGUE.  */"}, {"sha": "32fa0e9300aef483d2f329476abb7ce2386ec9c7", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0f61acb373be0655fad7c0bdf700bd82f08bfe/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0f61acb373be0655fad7c0bdf700bd82f08bfe/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=3e0f61acb373be0655fad7c0bdf700bd82f08bfe", "patch": "@@ -90,7 +90,7 @@ extern struct rtx_def *mmix_compare_op1;\n    mmix.md too.  */\n struct machine_function\n  {\n-   int has_call_value_without_parameters;\n+   int has_call_without_parameters;\n    int has_landing_pad;\n  };\n \n@@ -157,6 +157,7 @@ extern int target_flags;\n #define TARGET_MASK_KNUTH_DIVISION 16\n #define TARGET_MASK_TOPLEVEL_SYMBOLS 32\n #define TARGET_MASK_BRANCH_PREDICT 64\n+#define TARGET_MASK_REG_STACK_FILL_BUG 128\n \n /* FIXME: Get rid of this one.  */\n #define TARGET_LIBFUNC (target_flags & TARGET_MASK_LIBFUNCS)\n@@ -166,8 +167,11 @@ extern int target_flags;\n #define TARGET_KNUTH_DIVISION (target_flags & TARGET_MASK_KNUTH_DIVISION)\n #define TARGET_TOPLEVEL_SYMBOLS (target_flags & TARGET_MASK_TOPLEVEL_SYMBOLS)\n #define TARGET_BRANCH_PREDICT (target_flags & TARGET_MASK_BRANCH_PREDICT)\n+#define TARGET_REG_STACK_FILL_BUG \\\n+ (target_flags & TARGET_MASK_REG_STACK_FILL_BUG)\n \n-#define TARGET_DEFAULT TARGET_MASK_BRANCH_PREDICT\n+#define TARGET_DEFAULT \\\n+ (TARGET_MASK_BRANCH_PREDICT | TARGET_MASK_REG_STACK_FILL_BUG)\n \n /* FIXME: Provide a way to *load* the epsilon register.  */\n #define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n@@ -198,6 +202,12 @@ extern int target_flags;\n    N_(\"Use P-mnemonics for branches statically predicted as taken\")},\t\\\n   {\"no-branch-predict\",\t-TARGET_MASK_BRANCH_PREDICT,\t\t\t\\\n    N_(\"Don't use P-mnemonics for branches\")},\t\t\t\t\\\n+  {\"reg-stack-fill-bug-workaround\",\tTARGET_MASK_REG_STACK_FILL_BUG,\t\\\n+   N_(\"Work around inconsistent behavior when a PUSHJ or PUSHGO\\\n+ instruction fills the register stack\")},\t\t\t\t\\\n+  {\"no-reg-stack-fill-bug-workaround\",\t-TARGET_MASK_REG_STACK_FILL_BUG,\\\n+   N_(\"Don't work around inconsistent behavior when a PUSHJ or PUSHGO\\\n+ instruction fills the register stack\")},\t\\\n   {\"\",\t\t\tTARGET_DEFAULT, \"\"}}\n \n /* Unfortunately, this must not reference anything in \"mmix.c\".  */"}, {"sha": "08ee0b309a41fb973a5d07d11d75282d3a91a88f", "filename": "gcc/config/mmix/mmix.md", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0f61acb373be0655fad7c0bdf700bd82f08bfe/gcc%2Fconfig%2Fmmix%2Fmmix.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0f61acb373be0655fad7c0bdf700bd82f08bfe/gcc%2Fconfig%2Fmmix%2Fmmix.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.md?ref=3e0f61acb373be0655fad7c0bdf700bd82f08bfe", "patch": "@@ -995,6 +995,12 @@ DIVU %1,%1,%2\\;GET %0,:rR\\;NEGU %2,0,%0\\;CSNN %0,$255,%2\")\n      error too.  */\n   if (operands[2] == NULL_RTX)\n     operands[2] = const0_rtx;\n+\n+  /* FIXME: Documentation bug: operands[3] (operands[2] for 'call') is the\n+     *next* argument register, not the number of arguments in registers.  */\n+  cfun->machine->has_call_without_parameters\n+    |= REG_P (operands[2]) && REGNO (operands[2]) == MMIX_FIRST_ARG_REGNUM;\n+\n   operands[4] = gen_rtx_REG (DImode, MMIX_INCOMING_RETURN_ADDRESS_REGNUM);\n }\")\n \n@@ -1020,7 +1026,7 @@ DIVU %1,%1,%2\\;GET %0,:rR\\;NEGU %2,0,%0\\;CSNN %0,$255,%2\")\n \n   /* FIXME: Documentation bug: operands[3] (operands[2] for 'call') is the\n      *next* argument register, not the number of arguments in registers.  */\n-  cfun->machine->has_call_value_without_parameters\n+  cfun->machine->has_call_without_parameters\n     |= REG_P (operands[3]) && REGNO (operands[3]) == MMIX_FIRST_ARG_REGNUM;\n \n   operands[5] = gen_rtx_REG (DImode, MMIX_INCOMING_RETURN_ADDRESS_REGNUM);"}, {"sha": "5b3fbc17dc2117dbc7bea76fd8c9527d9692fae6", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0f61acb373be0655fad7c0bdf700bd82f08bfe/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0f61acb373be0655fad7c0bdf700bd82f08bfe/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3e0f61acb373be0655fad7c0bdf700bd82f08bfe", "patch": "@@ -589,7 +589,8 @@ in the following sections.\n @gccoptlist{\n -mlibfuncs -mno-libfuncs -mepsilon -mno-epsilon -mabi=gnu @gol\n -mabi=mmixware -mzero-extend -mknuthdiv -mtoplevel-symbols @gol\n--melf}\n+-melf -mbranch-predict -mreg-stack-fill-bug-workaround @gol\n+-mno-branch-predict -mno-reg-stack-fill-bug-workaround}\n \n @emph{IA-64 Options}\n @gccoptlist{\n@@ -9716,7 +9717,7 @@ the called function) are seen as registers @code{$0} and up, as opposed to\n the GNU ABI which uses global registers @code{$231} and up.\n \n @item -mzero-extend\n-@item -mno-zero-extend\n+@itemx -mno-zero-extend\n When reading data from memory in sizes shorter than 64 bits, use (do not\n use) zero-extending load instructions by default, rather than\n sign-extending ones.\n@@ -9736,6 +9737,18 @@ code can be used with the @code{PREFIX} assembly directive.\n @item -melf\n Generate an executable in the ELF format, rather than the default\n @samp{mmo} format used by the @command{mmix} simulator.\n+\n+@item -mbranch-predict\n+@itemx -mno-branch-predict\n+Use (do not use) the probable-branch instructions, when static branch\n+prediction indicates a probable branch.\n+\n+@item -mreg-stack-fill-bug-workaround\n+@itemx -mno-reg-stack-fill-bug-workaround\n+Work around (do not work around) an inconsistency in the circular\n+register stack mechanism in the @command{mmix} simulator, which\n+causes entries in the register stack to not be flushed to memory if\n+the instruction causing the fill-up is @code{PUSHJ} or @code{PUSHGO}.\n @end table\n \n @node Code Gen Options"}]}