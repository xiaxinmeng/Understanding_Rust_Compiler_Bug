{"sha": "9257f35f7bf0c9272fbbc54bcc4c266db56a48c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI1N2YzNWY3YmYwYzkyNzJmYmJjNTRiY2M0YzI2NmRiNTZhNDhjOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-05-02T18:38:44Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-05-02T18:38:44Z"}, "message": "re PR c++/48446 (internal compiler error: in gimplify_var_or_parm_decl, at gimplify.c:1946)\n\n\tPR c++/48446\n\t* decl.c (stabilize_save_expr_r, stabilize_vla_size): New.\n\t(compute_array_index_type): Revert earlier 48446 changes.\n\t(grokdeclarator): Use stabilize_vla_size.\n\nFrom-SVN: r173264", "tree": {"sha": "715ea8c7a89c8624ccdf8797a48e0f708db6c0b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/715ea8c7a89c8624ccdf8797a48e0f708db6c0b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9257f35f7bf0c9272fbbc54bcc4c266db56a48c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9257f35f7bf0c9272fbbc54bcc4c266db56a48c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9257f35f7bf0c9272fbbc54bcc4c266db56a48c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9257f35f7bf0c9272fbbc54bcc4c266db56a48c8/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6fb380f70867fe2a693361320ad4e0055d2d2321", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fb380f70867fe2a693361320ad4e0055d2d2321", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fb380f70867fe2a693361320ad4e0055d2d2321"}], "stats": {"total": 91, "additions": 80, "deletions": 11}, "files": [{"sha": "983939e2a180aedcbb186e56a26c15eb8d8c9ca8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257f35f7bf0c9272fbbc54bcc4c266db56a48c8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257f35f7bf0c9272fbbc54bcc4c266db56a48c8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9257f35f7bf0c9272fbbc54bcc4c266db56a48c8", "patch": "@@ -1,3 +1,10 @@\n+2011-05-02  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/48446\n+\t* decl.c (stabilize_save_expr_r, stabilize_vla_size): New.\n+\t(compute_array_index_type): Revert earlier 48446 changes.\n+\t(grokdeclarator): Use stabilize_vla_size.\n+\n 2011-05-02  Dmitry Gorbachev  <d.g.gorbachev@gmail.com>\n \t    Eric Botcazou <ebotcazou@adacore.com>\n "}, {"sha": "f9dd6dec5f8fa038a2e5a20a518a58d773544239", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 48, "deletions": 11, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257f35f7bf0c9272fbbc54bcc4c266db56a48c8/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257f35f7bf0c9272fbbc54bcc4c266db56a48c8/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9257f35f7bf0c9272fbbc54bcc4c266db56a48c8", "patch": "@@ -7576,6 +7576,38 @@ check_static_variable_definition (tree decl, tree type)\n   return 0;\n }\n \n+/* *expr_p is part of the TYPE_SIZE of a variably-sized array.  If any\n+   SAVE_EXPRs in *expr_p wrap expressions with side-effects, break those\n+   expressions out into temporary variables so that walk_tree doesn't\n+   step into them (c++/15764).  */\n+\n+static tree\n+stabilize_save_expr_r (tree *expr_p, int *walk_subtrees, void *data)\n+{\n+  struct pointer_set_t *pset = (struct pointer_set_t *)data;\n+  tree expr = *expr_p;\n+  if (TREE_CODE (expr) == SAVE_EXPR)\n+    {\n+      tree op = TREE_OPERAND (expr, 0);\n+      cp_walk_tree (&op, stabilize_save_expr_r, data, pset);\n+      if (TREE_SIDE_EFFECTS (op))\n+\tTREE_OPERAND (expr, 0) = get_temp_regvar (TREE_TYPE (op), op);\n+    }\n+  else if (!EXPR_P (expr))\n+    *walk_subtrees = 0;\n+  return NULL;\n+}\n+\n+/* Entry point for the above.  */\n+\n+static void\n+stabilize_vla_size (tree size)\n+{\n+  struct pointer_set_t *pset = pointer_set_create ();\n+  /* Break out any function calls into temporary variables.  */\n+  cp_walk_tree (&size, stabilize_save_expr_r, pset, pset);\n+}\n+\n /* Given the SIZE (i.e., number of elements) in an array, compute an\n    appropriate index type for the array.  If non-NULL, NAME is the\n    name of the thing being declared.  */\n@@ -7769,16 +7801,8 @@ compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n       processing_template_decl = saved_processing_template_decl;\n \n       if (!TREE_CONSTANT (itype))\n-\t{\n-\t  /* A variable sized array.  */\n-\t  if (TREE_SIDE_EFFECTS (itype))\n-\t    /* Use get_temp_regvar rather than variable_size here so that\n-\t       people walking expressions that use a variable of this type\n-\t       don't walk into this expression.  */\n-\t    itype = get_temp_regvar (TREE_TYPE (itype), itype);\n-\t  else\n-\t    itype = variable_size (itype);\n-\t}\n+\t/* A variable sized array.  */\n+\titype = variable_size (itype);\n       /* Make sure that there was no overflow when creating to a signed\n \t index type.  (For example, on a 32-bit machine, an array with\n \t size 2^32 - 1 is too big.)  */\n@@ -9051,7 +9075,12 @@ grokdeclarator (const cp_declarator *declarator,\n \t      && (decl_context == NORMAL || decl_context == FIELD)\n \t      && at_function_scope_p ()\n \t      && variably_modified_type_p (type, NULL_TREE))\n-\t    finish_expr_stmt (TYPE_SIZE (type));\n+\t    {\n+\t      /* First break out any side-effects.  */\n+\t      stabilize_vla_size (TYPE_SIZE (type));\n+\t      /* And then force evaluation of the SAVE_EXPR.  */\n+\t      finish_expr_stmt (TYPE_SIZE (type));\n+\t    }\n \n \t  if (declarator->kind == cdk_reference)\n \t    {\n@@ -9126,6 +9155,14 @@ grokdeclarator (const cp_declarator *declarator,\n \t}\n     }\n \n+  /* We need to stabilize side-effects in VLA sizes for regular array\n+     declarations too, not just pointers to arrays.  */\n+  if (type != error_mark_node && !TYPE_NAME (type)\n+      && (decl_context == NORMAL || decl_context == FIELD)\n+      && at_function_scope_p ()\n+      && variably_modified_type_p (type, NULL_TREE))\n+    stabilize_vla_size (TYPE_SIZE (type));\n+\n   /* A `constexpr' specifier used in an object declaration declares\n      the object as `const'.  */\n   if (constexpr_p && innermost_code != cdk_function)"}, {"sha": "e6cdd3fa654a3359013334791eb7ca68e3bcacb0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257f35f7bf0c9272fbbc54bcc4c266db56a48c8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257f35f7bf0c9272fbbc54bcc4c266db56a48c8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9257f35f7bf0c9272fbbc54bcc4c266db56a48c8", "patch": "@@ -1,3 +1,7 @@\n+2011-05-02  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-c++-common/vla-1.c: New.\n+\n 2011-05-02  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/48822"}, {"sha": "401c4e05511726db87daa39b856648c258e278e9", "filename": "gcc/testsuite/c-c++-common/vla-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257f35f7bf0c9272fbbc54bcc4c266db56a48c8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvla-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257f35f7bf0c9272fbbc54bcc4c266db56a48c8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvla-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvla-1.c?ref=9257f35f7bf0c9272fbbc54bcc4c266db56a48c8", "patch": "@@ -0,0 +1,21 @@\n+/* Test that changes to a variable are reflected in a VLA later in the\n+   expression.  */\n+/* { dg-options \"\" } */\n+\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+void abort();\n+\n+int i = 4;\n+int f()\n+{\n+  return i;\n+}\n+\n+int main()\n+{\n+  if (i+=2, sizeof(*(int(*)[f()])0) != 6*sizeof(int))\n+    abort();\n+  return 0;\n+}"}]}