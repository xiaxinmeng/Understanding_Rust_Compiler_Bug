{"sha": "8bb501bb101f74c9c02e949edad65f07615e27d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJiNTAxYmIxMDFmNzRjOWMwMmU5NDllZGFkNjVmMDc2MTVlMjdkMA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2006-11-24T13:30:59Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2006-11-24T13:30:59Z"}, "message": "s390.c (s390_emit_compare_and_swap): New function.\n\n2006-11-24  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* config/s390.c (s390_emit_compare_and_swap): New function.\n\t(s390_expand_cs_hqi, s390_expand_atomic): Call \n\ts390_emit_compare_and_swap.\n\n2006-11-24  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* gcc.dg/20061124-1.c: New testcase.\n\nFrom-SVN: r119151", "tree": {"sha": "a5a7094da9c34bd39de801a48073299a8a714627", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5a7094da9c34bd39de801a48073299a8a714627"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bb501bb101f74c9c02e949edad65f07615e27d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bb501bb101f74c9c02e949edad65f07615e27d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bb501bb101f74c9c02e949edad65f07615e27d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bb501bb101f74c9c02e949edad65f07615e27d0/comments", "author": null, "committer": null, "parents": [{"sha": "af1e323e93b86d33d9474dcdb64774b5e8c258e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af1e323e93b86d33d9474dcdb64774b5e8c258e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af1e323e93b86d33d9474dcdb64774b5e8c258e8"}], "stats": {"total": 61, "additions": 51, "deletions": 10}, "files": [{"sha": "a79d14b7c5d5816f5da3814c2ebf0fc74f26fb67", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb501bb101f74c9c02e949edad65f07615e27d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb501bb101f74c9c02e949edad65f07615e27d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8bb501bb101f74c9c02e949edad65f07615e27d0", "patch": "@@ -1,3 +1,9 @@\n+2006-11-24  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* config/s390.c (s390_emit_compare_and_swap): New function.\n+\t(s390_expand_cs_hqi, s390_expand_atomic): Call \n+\ts390_emit_compare_and_swap.\n+\n 2006-11-23  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* pa.c (return_addr_rtx): Change 0xe0400002 to -532676606."}, {"sha": "cfe959e88f0ea20e5edcb0eee980b7657c79e5f9", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb501bb101f74c9c02e949edad65f07615e27d0/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb501bb101f74c9c02e949edad65f07615e27d0/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=8bb501bb101f74c9c02e949edad65f07615e27d0", "patch": "@@ -780,6 +780,24 @@ s390_emit_compare (enum rtx_code code, rtx op0, rtx op1)\n   return ret;\n }\n \n+/* Emit a SImode compare and swap instruction setting MEM to NEW if OLD\n+   matches CMP.\n+   Return the correct condition RTL to be placed in the IF_THEN_ELSE of the\n+   conditional branch testing the result.  */\n+\n+static rtx\n+s390_emit_compare_and_swap (enum rtx_code code, rtx old, rtx mem, rtx cmp, rtx new)\n+{\n+  rtx ret;\n+\n+  emit_insn (gen_sync_compare_and_swap_ccsi (old, mem, cmp, new));\n+  ret = gen_rtx_fmt_ee (code, VOIDmode, s390_compare_emitted, const0_rtx);\n+\n+  s390_compare_emitted = NULL_RTX;\n+\n+  return ret;\n+}\n+\n /* Emit a jump instruction to TARGET.  If COND is NULL_RTX, emit an\n    unconditional jump, else a conditional jump under condition COND.  */\n \n@@ -4187,11 +4205,9 @@ s390_expand_cs_hqi (enum machine_mode mode, rtx target, rtx mem, rtx cmp, rtx ne\n     newv = force_reg (SImode, expand_simple_binop (SImode, IOR, new, val,\n \t\t\t\t\t\t   NULL_RTX, 1, OPTAB_DIRECT));\n \n-  /* Emit compare_and_swap pattern.  */\n-  emit_insn (gen_sync_compare_and_swap_ccsi (res, ac.memsi, cmpv, newv));\n-      \n   /* Jump to end if we're done (likely?).  */\n-  s390_emit_jump (csend, s390_emit_compare (EQ, cmpv, ac.memsi));\n+  s390_emit_jump (csend, s390_emit_compare_and_swap (EQ, res, ac.memsi,\n+\t\t\t\t\t\t     cmpv, newv));\n \n   /* Check for changes outside mode.  */\n   resv = expand_simple_binop (SImode, AND, res, ac.modemaski, \n@@ -4284,13 +4300,9 @@ s390_expand_atomic (enum machine_mode mode, enum rtx_code code,\n     default:\n       gcc_unreachable ();\n     }\n-  /* Emit compare_and_swap pattern.  */\n-  emit_insn (gen_sync_compare_and_swap_ccsi (cmp, ac.memsi, cmp, new));\n \n-  /* Loop until swapped (unlikely?).  */\n-  s390_emit_jump (csloop, gen_rtx_fmt_ee (NE, CCZ1mode,\n-\t\t\t\t\t  gen_rtx_REG (CCZ1mode, CC_REGNUM),\n-\t\t\t\t\t  const0_rtx));\n+  s390_emit_jump (csloop, s390_emit_compare_and_swap (NE, cmp,\n+\t\t\t\t\t\t      ac.memsi, cmp, new));\n \n   /* Return the correct part of the bitfield.  */\n   if (target)"}, {"sha": "b97aa166ac5c1d9bee191ed83da13d4435cd2de6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb501bb101f74c9c02e949edad65f07615e27d0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb501bb101f74c9c02e949edad65f07615e27d0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8bb501bb101f74c9c02e949edad65f07615e27d0", "patch": "@@ -1,3 +1,7 @@\n+2006-11-24  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* gcc.dg/20061124-1.c: New testcase.\n+\n 2006-11-23  Eric Christopher  <echristo@apple.com>\n \n \t* gcc.dg/inline-16.c: Use __SIZE_TYPE__."}, {"sha": "14d04395e388277b5c2b852d55d414c53601236e", "filename": "gcc/testsuite/gcc.dg/20061124-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb501bb101f74c9c02e949edad65f07615e27d0/gcc%2Ftestsuite%2Fgcc.dg%2F20061124-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb501bb101f74c9c02e949edad65f07615e27d0/gcc%2Ftestsuite%2Fgcc.dg%2F20061124-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20061124-1.c?ref=8bb501bb101f74c9c02e949edad65f07615e27d0", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sync_char_short } */\n+\n+/* This testcase failed on s390 because no compare instruction for\n+   the check of FLAG was emitted.  */\n+\n+unsigned short int count = 0;\n+int flag = 1;\n+\n+extern void abort (void);\n+\n+int\n+main ()\n+{\n+  __sync_add_and_fetch (&count, -1);\n+\n+  if (!flag)\n+    abort ();\n+}"}]}