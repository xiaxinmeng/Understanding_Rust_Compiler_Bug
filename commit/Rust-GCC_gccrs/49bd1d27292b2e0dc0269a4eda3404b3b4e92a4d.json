{"sha": "49bd1d27292b2e0dc0269a4eda3404b3b4e92a4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDliZDFkMjcyOTJiMmUwZGMwMjY5YTRlZGEzNDA0YjNiNGU5MmE0ZA==", "commit": {"author": {"name": "Stan Shebs", "email": "shebs@apple.com", "date": "2004-08-16T18:57:27Z"}, "committer": {"name": "Stan Shebs", "email": "shebs@gcc.gnu.org", "date": "2004-08-16T18:57:27Z"}, "message": "Basic support for 64-bit Darwin.\n\n        * config/darwin.c (macho_indirect_data_reference): Add DImode case.\n        (machopic_legitimize_pic_address): Similarly, plus use Pmode\n        instead of SImode.\n        * config/rs6000/darwin.h (PTRDIFF_TYPE): Be \"long int\" if 64-bit.\n        (TARGET_OS_CPP_BUILTINS): Add 64-bit preprocessor macro.\n        (SUBTARGET_SWITCHES): Add -m32 and -m64 flags.\n        (SUBTARGET_OVERRIDE_OPTIONS): Require 64-bit processor if -m64.\n        (PROCESSOR_DEFAULT64): Define.\n        * config/rs6000/darwin.md: New file, patterns specific to 64-bit\n        Darwin.\n        * config/rs6000/rs6000.md: Include darwin.md.\n        (builtin_setjmp_receiver): Add DImode case.\n        * config/rs6000/rs6000.c (TARGET_ASM_UNALIGNED_DI_OP): Define for\n        Darwin.\n        (TARGET_ASM_ALIGNED_DI_OP): Ditto.\n        (rs6000_emit_move): Add DImode case to Darwin bits.\n        (machopic_output_stub): Use .quad if 64-bit.\n        * invoke.texi: Document -m32 and -m64.\n\nFrom-SVN: r86070", "tree": {"sha": "950498faedd80bf16bfac8247a122bbd8dccb081", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/950498faedd80bf16bfac8247a122bbd8dccb081"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49bd1d27292b2e0dc0269a4eda3404b3b4e92a4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49bd1d27292b2e0dc0269a4eda3404b3b4e92a4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49bd1d27292b2e0dc0269a4eda3404b3b4e92a4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49bd1d27292b2e0dc0269a4eda3404b3b4e92a4d/comments", "author": null, "committer": null, "parents": [{"sha": "dcb9bd6b24969dcc4ceb2c6388d025776e027974", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcb9bd6b24969dcc4ceb2c6388d025776e027974", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcb9bd6b24969dcc4ceb2c6388d025776e027974"}], "stats": {"total": 489, "additions": 477, "deletions": 12}, "files": [{"sha": "8b8d90ba7fe3b41a8c2cb902b03f6768c1db8cd3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49bd1d27292b2e0dc0269a4eda3404b3b4e92a4d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49bd1d27292b2e0dc0269a4eda3404b3b4e92a4d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=49bd1d27292b2e0dc0269a4eda3404b3b4e92a4d", "patch": "@@ -1,3 +1,25 @@\n+2004-08-16  Stan Shebs  <shebs@apple.com>\n+\n+\tBasic support for 64-bit Darwin.\n+\t* config/darwin.c (macho_indirect_data_reference): Add DImode case.\n+\t(machopic_legitimize_pic_address): Similarly, plus use Pmode\n+\tinstead of SImode.\n+\t* config/rs6000/darwin.h (PTRDIFF_TYPE): Be \"long int\" if 64-bit.\n+\t(TARGET_OS_CPP_BUILTINS): Add 64-bit preprocessor macro.\n+\t(SUBTARGET_SWITCHES): Add -m32 and -m64 flags.\n+\t(SUBTARGET_OVERRIDE_OPTIONS): Require 64-bit processor if -m64.\n+\t(PROCESSOR_DEFAULT64): Define.\n+\t* config/rs6000/darwin.md: New file, patterns specific to 64-bit\n+\tDarwin.\n+\t* config/rs6000/rs6000.md: Include darwin.md.\n+\t(builtin_setjmp_receiver): Add DImode case.\n+\t* config/rs6000/rs6000.c (TARGET_ASM_UNALIGNED_DI_OP): Define for\n+\tDarwin.\n+\t(TARGET_ASM_ALIGNED_DI_OP): Ditto.\n+\t(rs6000_emit_move): Add DImode case to Darwin bits.\n+\t(machopic_output_stub): Use .quad if 64-bit.\n+\t* invoke.texi: Document -m32 and -m64.\n+\n 2004-08-16  Janis Johnson  <janis187@us.ibm.com>\n \n \t* doc/extend.texi (AltiVec builtins): Document additional differences"}, {"sha": "9f47dc4607c246dd7a9badd1bef0f683e8412f7d", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49bd1d27292b2e0dc0269a4eda3404b3b4e92a4d/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49bd1d27292b2e0dc0269a4eda3404b3b4e92a4d/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=49bd1d27292b2e0dc0269a4eda3404b3b4e92a4d", "patch": "@@ -333,8 +333,12 @@ machopic_indirect_data_reference (rtx orig, rtx reg)\n       if (defined && MACHO_DYNAMIC_NO_PIC_P)\n \t{\n #if defined (TARGET_TOC)\n-           emit_insn (gen_macho_high (reg, orig));\n-           emit_insn (gen_macho_low (reg, reg, orig));\n+ \t  emit_insn (GET_MODE (orig) == DImode\n+\t\t     ? gen_macho_high_di (reg, orig)\n+\t\t     : gen_macho_high (reg, orig));\n+ \t  emit_insn (GET_MODE (orig) == DImode\n+\t\t     ? gen_macho_low_di (reg, reg, orig)\n+\t\t     : gen_macho_low (reg, reg, orig));\n #else\n \t   /* some other cpu -- writeme!  */\n \t   abort ();\n@@ -529,7 +533,9 @@ machopic_legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \t      rtx asym = XEXP (orig, 0);\n \t      rtx mem;\n \n-\t      emit_insn (gen_macho_high (temp_reg, asym));\n+\t      emit_insn (mode == DImode\n+\t\t\t ? gen_macho_high_di (temp_reg, asym)\n+\t\t\t : gen_macho_high (temp_reg, asym));\n \t      mem = gen_rtx_MEM (GET_MODE (orig),\n \t\t\t\t gen_rtx_LO_SUM (Pmode, temp_reg, asym));\n \t      RTX_UNCHANGING_P (mem) = 1;\n@@ -551,7 +557,7 @@ machopic_legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n #if defined (TARGET_TOC) /* i.e., PowerPC */\n \t      /* Generating a new reg may expose opportunities for\n \t\t common subexpression elimination.  */\n-              rtx hi_sum_reg = no_new_pseudos ? reg : gen_reg_rtx (SImode);\n+              rtx hi_sum_reg = no_new_pseudos ? reg : gen_reg_rtx (Pmode);\n \t      rtx mem;\n \t      rtx insn;\n \t      rtx sum;\n@@ -634,7 +640,7 @@ machopic_legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \t\t  if (reload_in_progress)\n \t\t    abort ();\n \t\t  else\n-\t\t    reg = gen_reg_rtx (SImode);\n+\t\t    reg = gen_reg_rtx (Pmode);\n \t\t}\n \n \t      hi_sum_reg = reg;"}, {"sha": "1f1924fe5b481bb7bd00388f3134ef57fc61ef81", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49bd1d27292b2e0dc0269a4eda3404b3b4e92a4d/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49bd1d27292b2e0dc0269a4eda3404b3b4e92a4d/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=49bd1d27292b2e0dc0269a4eda3404b3b4e92a4d", "patch": "@@ -35,6 +35,10 @@\n #define TARGET_TOC 0\n #define TARGET_NO_TOC 1\n \n+/* Override the default rs6000 definition.  */\n+#undef  PTRDIFF_TYPE\n+#define PTRDIFF_TYPE (TARGET_64BIT ? \"long int\" : \"int\")\n+\n /* Darwin switches.  */\n /* Use dynamic-no-pic codegen (no picbase reg; not suitable for shlibs.)  */\n #define MASK_MACHO_DYNAMIC_NO_PIC 0x00800000\n@@ -48,7 +52,8 @@\n #define TARGET_OS_CPP_BUILTINS()                \\\n   do                                            \\\n     {                                           \\\n-      builtin_define (\"__ppc__\");               \\\n+      if (!TARGET_64BIT) builtin_define (\"__ppc__\");   \\\n+      if (TARGET_64BIT) builtin_define (\"__ppc64__\");  \\\n       builtin_define (\"__POWERPC__\");           \\\n       builtin_define (\"__NATURAL_ALIGNMENT__\"); \\\n       builtin_define (\"__MACH__\");              \\\n@@ -60,6 +65,10 @@\n /*  */\n #undef\tSUBTARGET_SWITCHES\n #define SUBTARGET_SWITCHES\t\t\t\t\t\t\\\n+  { \"64\",     MASK_64BIT | MASK_POWERPC64, \\\n+        N_(\"Generate 64-bit code\") }, \\\n+  { \"32\",     - (MASK_64BIT | MASK_POWERPC64), \\\n+        N_(\"Generate 32-bit code\") }, \\\n   {\"dynamic-no-pic\",\tMASK_MACHO_DYNAMIC_NO_PIC,\t\t\t\\\n       N_(\"Generate code suitable for executables (NOT shared libs)\")},\t\\\n   {\"no-dynamic-no-pic\",\t-MASK_MACHO_DYNAMIC_NO_PIC, \"\"},\n@@ -87,6 +96,11 @@ do {\t\t\t\t\t\t\t\t\t\\\n         flag_pic = 2;\t\t\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_64BIT && ! TARGET_POWERPC64)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      target_flags |= MASK_POWERPC64;\t\t\t\t\t\\\n+      warning (\"-m64 requires PowerPC64 architecture, enabling\");\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n } while(0)\n \n /* Darwin has 128-bit long double support in libc in 10.4 and later.\n@@ -252,10 +266,12 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define RS6000_MCOUNT \"*mcount\"\n \n-/* Default processor: a G4.  */\n+/* Default processor: G4, and G5 for 64-bit.  */\n \n #undef PROCESSOR_DEFAULT\n #define PROCESSOR_DEFAULT  PROCESSOR_PPC7400\n+#undef PROCESSOR_DEFAULT64\n+#define PROCESSOR_DEFAULT64  PROCESSOR_POWER4\n \n /* Default target flag settings.  Despite the fact that STMW/LMW\n    serializes, it's still a big code size win to use them.  Use FSEL by"}, {"sha": "12dcf24ace271bf95c2f0da323502893ef54bf8c", "filename": "gcc/config/rs6000/darwin.md", "status": "added", "additions": 392, "deletions": 0, "changes": 392, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49bd1d27292b2e0dc0269a4eda3404b3b4e92a4d/gcc%2Fconfig%2Frs6000%2Fdarwin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49bd1d27292b2e0dc0269a4eda3404b3b4e92a4d/gcc%2Fconfig%2Frs6000%2Fdarwin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.md?ref=49bd1d27292b2e0dc0269a4eda3404b3b4e92a4d", "patch": "@@ -0,0 +1,392 @@\n+/* Machine description patterns for PowerPC running Darwin (Mac OS X).\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+   Contributed by Apple Computer Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+(define_insn \"adddi3_high\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=b\")\n+        (plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"b\")\n+                 (high:DI (match_operand 2 \"\" \"\"))))]\n+  \"TARGET_MACHO && TARGET_64BIT\"\n+  \"{cau|addis} %0,%1,ha16(%2)\"\n+  [(set_attr \"length\" \"4\")])\n+\n+(define_insn \"movdf_low_di\"\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f,!r\")\n+        (mem:DF (lo_sum:DI (match_operand:DI 1 \"gpc_reg_operand\" \"b,b\")\n+                           (match_operand 2 \"\" \"\"))))]\n+  \"TARGET_MACHO && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_64BIT\"\n+  \"*\n+{\n+  switch (which_alternative)\n+    {\n+      case 0:\n+\treturn \\\"lfd %0,lo16(%2)(%1)\\\";\n+      case 1:\n+\t{\n+\t  rtx operands2[4];\n+\t  operands2[0] = operands[0];\n+\t  operands2[1] = operands[1];\n+\t  operands2[2] = operands[2];\n+\t  if (TARGET_POWERPC64 && TARGET_32BIT)\n+\t    /* Note, old assemblers didn't support relocation here. */\n+\t    return \\\"ld %0,lo16(%2)(%1)\\\";\n+\t  else\n+\t  {\n+\t    operands2[3] = gen_rtx_REG (SImode, RS6000_PIC_OFFSET_TABLE_REGNUM);\n+\t    output_asm_insn (\\\"{l|ld} %0,lo16(%2)(%1)\\\", operands);\n+#if TARGET_MACHO\n+\t    if (MACHO_DYNAMIC_NO_PIC_P)\n+\t      output_asm_insn (\\\"{liu|lis} %L0,ha16(%2+4)\\\", operands);\n+\t    else\n+\t    /* We cannot rely on ha16(low half)==ha16(high half), alas,\n+\t       although in practice it almost always is.  */\n+\t    output_asm_insn (\\\"{cau|addis} %L0,%3,ha16(%2+4)\\\", operands2);\n+#endif\n+\t    return (\\\"{l|lwz} %L0,lo16(%2+4)(%L0)\\\");\n+\t  }\n+\t}\n+      default:\n+\tabort();\n+    }\n+}\"\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"length\" \"4,12\")])\n+\n+(define_insn \"movdf_low_st_di\"\n+  [(set (mem:DF (lo_sum:DI (match_operand:DI 1 \"gpc_reg_operand\" \"b\")\n+                           (match_operand 2 \"\" \"\")))\n+\t(match_operand:DF 0 \"gpc_reg_operand\" \"f\"))]\n+  \"TARGET_MACHO && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_64BIT\"\n+  \"stfd %0,lo16(%2)(%1)\"\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"movsf_low_di\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f,!r\")\n+        (mem:SF (lo_sum:DI (match_operand:DI 1 \"gpc_reg_operand\" \"b,b\")\n+                           (match_operand 2 \"\" \"\"))))]\n+  \"TARGET_MACHO && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_64BIT\"\n+  \"@\n+   lfs %0,lo16(%2)(%1)\n+   {l|ld} %0,lo16(%2)(%1)\"\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"movsf_low_st_di\"\n+  [(set (mem:SF (lo_sum:DI (match_operand:DI 1 \"gpc_reg_operand\" \"b,b\")\n+                           (match_operand 2 \"\" \"\")))\n+\t(match_operand:SF 0 \"gpc_reg_operand\" \"f,!r\"))]\n+  \"TARGET_MACHO && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_64BIT\"\n+  \"@\n+   stfs %0,lo16(%2)(%1)\n+   {st|stw} %0,lo16(%2)(%1)\"\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"length\" \"4\")])\n+\n+;; 64-bit MachO load/store support\n+(define_insn \"movdi_low\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+        (mem:DI (lo_sum:DI (match_operand:DI 1 \"gpc_reg_operand\" \"b\")\n+                           (match_operand 2 \"\" \"\"))))]\n+  \"TARGET_MACHO && TARGET_64BIT\"\n+  \"{l|ld} %0,lo16(%2)(%1)\"\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"movdi_low_st\"\n+  [(set (mem:DI (lo_sum:DI (match_operand:DI 1 \"gpc_reg_operand\" \"b\")\n+                           (match_operand 2 \"\" \"\")))\n+\t(match_operand:DI 0 \"gpc_reg_operand\" \"r\"))]\n+  \"TARGET_MACHO && TARGET_64BIT\"\n+  \"{st|std} %0,lo16(%2)(%1)\"\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"macho_high_di\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=b*r\")\n+\t(high:DI (match_operand 1 \"\" \"\")))]\n+  \"TARGET_MACHO && TARGET_64BIT\"\n+  \"{liu|lis} %0,ha16(%1)\")\n+\n+(define_insn \"macho_low_di\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(lo_sum:DI (match_operand:DI 1 \"gpc_reg_operand\" \"b,!*r\")\n+\t\t   (match_operand 2 \"\" \"\")))]\n+   \"TARGET_MACHO && TARGET_64BIT\"\n+   \"@\n+    {cal %0,%a2@l(%1)|la %0,lo16(%2)(%1)}\n+    {cal %0,%a2@l(%1)|addic %0,%1,lo16(%2)}\")\n+\n+(define_split\n+  [(set (mem:V4SI (plus:DI (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n+\t\t\t (match_operand:DI 1 \"short_cint_operand\" \"\")))\n+\t(match_operand:V4SI 2 \"register_operand\" \"\"))\n+   (clobber (match_operand:DI 3 \"gpc_reg_operand\" \"\"))]\n+  \"TARGET_MACHO && TARGET_64BIT\"\n+  [(set (match_dup 3) (plus:DI (match_dup 0) (match_dup 1)))\n+   (set (mem:V4SI (match_dup 3))\n+\t(match_dup 2))]\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (mem:V4SI (plus:DI (match_operand:DI 0 \"gpc_reg_operand\" \"b,r\")\n+\t\t\t (match_operand:DI 1 \"gpc_reg_operand\" \"r,b\")))\n+\t(match_operand:V4SI 2 \"register_operand\" \"v,v\"))]\n+  \"TARGET_MACHO && TARGET_64BIT\"\n+  \"@\n+   stvx %2,%0,%1\n+   stvx %2,%1,%0\"\n+  [(set_attr \"type\" \"vecstore\")])\n+\n+(define_insn \"\"\n+  [(set (mem:V4SI (match_operand:DI 0 \"gpc_reg_operand\" \"r\"))\n+\t(match_operand:V4SI 1 \"register_operand\" \"v\"))]\n+  \"TARGET_MACHO && TARGET_64BIT\"\n+  \"stvx %1,0,%0\"\n+  [(set_attr \"type\" \"vecstore\")])\n+\n+(define_split\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"\")\n+\t(mem:V4SI (plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n+\t\t\t (match_operand:DI 2 \"short_cint_operand\" \"\"))))\n+   (clobber (match_operand:DI 3 \"gpc_reg_operand\" \"\"))]\n+  \"TARGET_MACHO && TARGET_64BIT\"\n+  [(set (match_dup 3) (plus:DI (match_dup 1) (match_dup 2)))\n+   (set (match_dup 0)\n+\t(mem:V4SI (match_dup 3)))]\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v,v\")\n+\t(mem:V4SI (plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"b,r\")\n+\t\t\t (match_operand:DI 2 \"gpc_reg_operand\" \"r,b\"))))]\n+  \"TARGET_MACHO && TARGET_64BIT\"\n+  \"@\n+   lvx %0,%1,%2\n+   lvx %0,%2,%1\"\n+  [(set_attr \"type\" \"vecload\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (mem:V4SI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")))]\n+  \"TARGET_MACHO && TARGET_64BIT\"\n+  \"lvx %0,0,%1\"\n+  [(set_attr \"type\" \"vecload\")])\n+\n+(define_insn \"load_macho_picbase_di\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=l\")\n+\t(unspec:DI [(match_operand:DI 1 \"immediate_operand\" \"s\")] 15))]\n+  \"(DEFAULT_ABI == ABI_DARWIN) && flag_pic\"\n+  \"bcl 20,31,%1\\\\n%1:\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"macho_correct_pic_di\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n+\t\t (unspec:DI [(match_operand:DI 2 \"immediate_operand\" \"s\")\n+\t\t\t     (match_operand:DI 3 \"immediate_operand\" \"s\")]\n+\t\t\t    16)))]\n+  \"DEFAULT_ABI == ABI_DARWIN\"\n+  \"addis %0,%1,ha16(%2-%3)\\n\\taddi %0,%0,lo16(%2-%3)\"\n+  [(set_attr \"length\" \"8\")])\n+\n+(define_insn \"*call_indirect_nonlocal_darwin64\"\n+  [(call (mem:SI (match_operand:DI 0 \"register_operand\" \"c,*l,c,*l\"))\n+\t (match_operand 1 \"\" \"g,g,g,g\"))\n+   (use (match_operand:SI 2 \"immediate_operand\" \"O,O,n,n\"))\n+   (clobber (match_scratch:SI 3 \"=l,l,l,l\"))]\n+  \"DEFAULT_ABI == ABI_DARWIN\"\n+{\n+  return \"b%T0l\";\n+}\n+  [(set_attr \"type\" \"jmpreg,jmpreg,jmpreg,jmpreg\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n+\n+(define_insn \"*call_nonlocal_darwin64\"\n+  [(call (mem:SI (match_operand:DI 0 \"symbol_ref_operand\" \"s,s\"))\n+\t (match_operand 1 \"\" \"g,g\"))\n+   (use (match_operand:SI 2 \"immediate_operand\" \"O,n\"))\n+   (clobber (match_scratch:SI 3 \"=l,l\"))]\n+  \"(DEFAULT_ABI == ABI_DARWIN)\n+   && (INTVAL (operands[2]) & CALL_LONG) == 0\"\n+{\n+#if TARGET_MACHO\n+  return output_call(insn, operands, 0, 2);\n+#endif\n+}\n+  [(set_attr \"type\" \"branch,branch\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_insn \"*call_value_indirect_nonlocal_darwin64\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (mem:SI (match_operand:DI 1 \"register_operand\" \"c,*l,c,*l\"))\n+\t      (match_operand 2 \"\" \"g,g,g,g\")))\n+   (use (match_operand:SI 3 \"immediate_operand\" \"O,O,n,n\"))\n+   (clobber (match_scratch:SI 4 \"=l,l,l,l\"))]\n+  \"DEFAULT_ABI == ABI_DARWIN\"\n+{\n+  return \"b%T1l\";\n+}\n+  [(set_attr \"type\" \"jmpreg,jmpreg,jmpreg,jmpreg\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n+\n+(define_insn \"*call_value_nonlocal_darwin64\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (mem:SI (match_operand:DI 1 \"symbol_ref_operand\" \"s,s\"))\n+\t      (match_operand 2 \"\" \"g,g\")))\n+   (use (match_operand:SI 3 \"immediate_operand\" \"O,n\"))\n+   (clobber (match_scratch:SI 4 \"=l,l\"))]\n+  \"(DEFAULT_ABI == ABI_DARWIN)\n+   && (INTVAL (operands[3]) & CALL_LONG) == 0\"\n+{\n+#if TARGET_MACHO\n+  return output_call(insn, operands, 1, 3);\n+#endif     \n+}\n+  [(set_attr \"type\" \"branch,branch\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_insn \"*sibcall_nonlocal_darwin64\"\n+  [(call (mem:SI (match_operand:DI 0 \"symbol_ref_operand\" \"s,s\"))\n+\t (match_operand 1 \"\" \"\"))\n+   (use (match_operand 2 \"immediate_operand\" \"O,n\"))\n+   (use (match_operand:SI 3 \"register_operand\" \"l,l\"))\n+   (return)]\n+  \"(DEFAULT_ABI == ABI_DARWIN)\n+   && (INTVAL (operands[2]) & CALL_LONG) == 0\"\n+{\n+  return \"b %z0\";\n+}\n+  [(set_attr \"type\" \"branch,branch\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_insn \"*sibcall_value_nonlocal_darwin64\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (mem:SI (match_operand:DI 1 \"symbol_ref_operand\" \"s,s\"))\n+\t      (match_operand 2 \"\" \"\")))\n+   (use (match_operand:SI 3 \"immediate_operand\" \"O,n\"))\n+   (use (match_operand:SI 4 \"register_operand\" \"l,l\"))\n+   (return)]\n+  \"(DEFAULT_ABI == ABI_DARWIN)\n+   && (INTVAL (operands[3]) & CALL_LONG) == 0\"\n+  \"*\n+{\n+  return \\\"b %z1\\\";\n+}\"\n+  [(set_attr \"type\" \"branch,branch\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+\n+(define_insn \"*sibcall_symbolic_64\"\n+  [(call (mem:SI (match_operand:DI 0 \"call_operand\" \"s,c\")) ; 64\n+\t (match_operand 1 \"\" \"\"))\n+   (use (match_operand 2 \"\" \"\"))\n+   (use (match_operand:SI 3 \"register_operand\" \"l,l\"))\n+   (return)]\n+  \"TARGET_64BIT && DEFAULT_ABI == ABI_DARWIN\"\n+  \"*\n+{\n+  switch (which_alternative)\n+    {\n+      case 0:  return \\\"b %z0\\\";\n+      case 1:  return \\\"b%T0\\\";\n+      default:  abort();\n+    }\n+}\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"*sibcall_value_symbolic_64\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (mem:SI (match_operand:DI 1 \"call_operand\" \"s,c\"))\n+\t      (match_operand 2 \"\" \"\")))\n+   (use (match_operand:SI 3 \"\" \"\"))\n+   (use (match_operand:SI 4 \"register_operand\" \"l,l\"))\n+   (return)]\n+  \"TARGET_64BIT && DEFAULT_ABI == ABI_DARWIN\"\n+  \"*\n+{\n+  switch (which_alternative)\n+    {\n+      case 0:  return \\\"b %z1\\\";\n+      case 1:  return \\\"b%T1\\\";\n+      default:  abort();\n+    }\n+}\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"*save_fpregs_with_label_di\"\n+ [(match_parallel 0 \"any_operand\"\n+                  [(clobber (match_operand:DI 1 \"register_operand\" \"=l\"))\n+\t\t   (use (match_operand:DI 2 \"call_operand\" \"s\"))\n+\t\t   (use (match_operand:DI 3 \"\" \"\"))\n+\t\t   (set (match_operand:DF 4 \"memory_operand\" \"=m\")\n+\t\t\t(match_operand:DF 5 \"gpc_reg_operand\" \"f\"))])]\n+ \"TARGET_64BIT\"\n+ \"*\n+#if TARGET_MACHO\n+  const char *picbase = machopic_function_base_name ();\n+  operands[3] = gen_rtx_SYMBOL_REF (Pmode, ggc_alloc_string (picbase, -1));\n+#endif\n+  return \\\"bl %z2\\\\n%3:\\\";\n+\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"*save_vregs_di\"\n+ [(match_parallel 0 \"any_operand\"\n+                  [(clobber (match_operand:DI 1 \"register_operand\" \"=l\"))\n+\t\t   (use (match_operand:DI 2 \"call_operand\" \"s\"))\n+\t\t   (set (match_operand:V4SI 3 \"any_operand\" \"=m\")\n+\t\t\t(match_operand:V4SI 4 \"register_operand\" \"v\"))])]\n+ \"TARGET_64BIT\"\n+ \"bl %z2\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"*restore_vregs_di\"\n+ [(match_parallel 0 \"any_operand\"\n+                  [(clobber (match_operand:DI 1 \"register_operand\" \"=l\"))\n+\t\t   (use (match_operand:DI 2 \"call_operand\" \"s\"))\n+\t\t   (clobber (match_operand:DI 3 \"gpc_reg_operand\" \"=r\"))\n+\t\t   (set (match_operand:V4SI 4 \"register_operand\" \"=v\")\n+\t\t\t(match_operand:V4SI 5 \"any_operand\" \"m\"))])]\n+ \"TARGET_64BIT\"\n+ \"bl %z2\")\n+\n+(define_insn \"*save_vregs_with_label_di\"\n+ [(match_parallel 0 \"any_operand\"\n+                  [(clobber (match_operand:DI 1 \"register_operand\" \"=l\"))\n+\t\t   (use (match_operand:DI 2 \"call_operand\" \"s\"))\n+\t\t   (use (match_operand:DI 3 \"\" \"\"))\n+\t\t   (set (match_operand:V4SI 4 \"any_operand\" \"=m\")\n+\t\t\t(match_operand:V4SI 5 \"register_operand\" \"v\"))])]\n+ \"TARGET_64BIT\"\n+ \"*\n+#if TARGET_MACHO\n+  const char *picbase = machopic_function_base_name ();\n+  operands[3] = gen_rtx_SYMBOL_REF (Pmode, ggc_alloc_string (picbase, -1));\n+#endif\n+  return \\\"bl %z2\\\\n%3:\\\";\n+\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"4\")])"}, {"sha": "fc63c315f8b2b43ce2aecd79ee9ae3649822b4db", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49bd1d27292b2e0dc0269a4eda3404b3b4e92a4d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49bd1d27292b2e0dc0269a4eda3404b3b4e92a4d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=49bd1d27292b2e0dc0269a4eda3404b3b4e92a4d", "patch": "@@ -851,6 +851,10 @@ static const char alt_reg_names[][8] =\n #define TARGET_ASM_UNALIGNED_HI_OP \"\\t.short\\t\"\n #undef TARGET_ASM_UNALIGNED_SI_OP\n #define TARGET_ASM_UNALIGNED_SI_OP \"\\t.long\\t\"\n+#undef TARGET_ASM_UNALIGNED_DI_OP\n+#define TARGET_ASM_UNALIGNED_DI_OP \"\\t.quad\\t\"\n+#undef TARGET_ASM_ALIGNED_DI_OP\n+#define TARGET_ASM_ALIGNED_DI_OP \"\\t.quad\\t\"\n #endif\n #endif\n \n@@ -4310,8 +4314,16 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n \t\t  return;\n \t\t}\n #endif\n-\t      emit_insn (gen_macho_high (target, operands[1]));\n-\t      emit_insn (gen_macho_low (operands[0], target, operands[1]));\n+\t      if (mode == DImode)\n+\t\t{\n+\t\t  emit_insn (gen_macho_high_di (target, operands[1]));\n+\t\t  emit_insn (gen_macho_low_di (operands[0], target, operands[1]));\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  emit_insn (gen_macho_high (target, operands[1]));\n+\t\t  emit_insn (gen_macho_low (operands[0], target, operands[1]));\n+\t\t}\n \t      return;\n \t    }\n \n@@ -16208,7 +16220,8 @@ machopic_output_stub (FILE *file, const char *symb, const char *stub)\n   machopic_lazy_symbol_ptr_section ();\n   fprintf (file, \"%s:\\n\", lazy_ptr_name);\n   fprintf (file, \"\\t.indirect_symbol %s\\n\", symbol_name);\n-  fprintf (file, \"\\t.long dyld_stub_binding_helper\\n\");\n+  fprintf (file, \"%sdyld_stub_binding_helper\\n\",\n+\t   (TARGET_64BIT ? DOUBLE_INT_ASM_OP : \"\\t.long\\t\"));\n }\n \n /* Legitimize PIC addresses.  If the address is already"}, {"sha": "149adf7e0e7a9466b60fee651bdd171d374404c7", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49bd1d27292b2e0dc0269a4eda3404b3b4e92a4d/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49bd1d27292b2e0dc0269a4eda3404b3b4e92a4d/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=49bd1d27292b2e0dc0269a4eda3404b3b4e92a4d", "patch": "@@ -101,6 +101,7 @@\n (include \"8540.md\")\n (include \"power4.md\")\n (include \"power5.md\")\n+(include \"darwin.md\")\n \n \f\n ;; Start with fixed-point load and store insns.  Here we put only the more\n@@ -10158,8 +10159,12 @@\n \t\t\t\t  CODE_LABEL_NUMBER (operands[0]));\n       tmplabrtx = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (tmplab));\n \n-      emit_insn (gen_load_macho_picbase (picreg, tmplabrtx));\n-      emit_insn (gen_macho_correct_pic (picreg, picreg, picrtx, tmplabrtx));\n+      emit_insn (TARGET_64BIT\n+\t ? gen_load_macho_picbase_di (picreg, tmplabrtx)\n+\t : gen_load_macho_picbase (picreg, tmplabrtx));\n+      emit_insn (TARGET_64BIT\n+\t ? gen_macho_correct_pic_di (picreg, picreg, picrtx, tmplabrtx)\n+\t : gen_macho_correct_pic (picreg, picreg, picrtx, tmplabrtx));\n     }\n   else\n #endif"}, {"sha": "98b66e293857adda6481935a7d325af9793f74f9", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49bd1d27292b2e0dc0269a4eda3404b3b4e92a4d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49bd1d27292b2e0dc0269a4eda3404b3b4e92a4d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=49bd1d27292b2e0dc0269a4eda3404b3b4e92a4d", "patch": "@@ -9974,6 +9974,17 @@ This switch enables or disables the generation of floating point\n operations on the general purpose registers for architectures that\n support it.  This option is currently only available on the MPC8540.\n \n+@item -m32\n+@itemx -m64\n+@opindex m32\n+@opindex m64\n+Generate code for 32-bit or 64-bit environments of Darwin and SVR4\n+targets (including GNU/Linux).  The 32-bit environment sets int, long\n+and pointer to 32 bits and generates code that runs on any PowerPC\n+variant.  The 64-bit environment sets int to 32 bits and long and\n+pointer to 64 bits, and generates code for PowerPC64, as for\n+@option{-mpowerpc64}.\n+\n @item -mfull-toc\n @itemx -mno-fp-in-toc\n @itemx -mno-sum-in-toc"}]}