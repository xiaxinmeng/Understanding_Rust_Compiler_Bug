{"sha": "0fcc85cd9e285522f9896a88e1374e0cc2454b4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZjYzg1Y2Q5ZTI4NTUyMmY5ODk2YTg4ZTEzNzRlMGNjMjQ1NGI0Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2012-06-29T16:18:15Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2012-06-29T16:18:15Z"}, "message": "Use builtin_widen_mult_even/odd in tree-vect-generic division expansion\n\n        * tree-vect-generic.c: Include target.h.\n        (expand_vector_divmod): Use builtin_mul_widen_even/odd if supported.\n        * Makefile.in (tree-vect-generic.o): Update.\n\nFrom-SVN: r189081", "tree": {"sha": "a60d1f6cd77109afc8f7c41317d57566f8f0922a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a60d1f6cd77109afc8f7c41317d57566f8f0922a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fcc85cd9e285522f9896a88e1374e0cc2454b4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fcc85cd9e285522f9896a88e1374e0cc2454b4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fcc85cd9e285522f9896a88e1374e0cc2454b4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fcc85cd9e285522f9896a88e1374e0cc2454b4f/comments", "author": null, "committer": null, "parents": [{"sha": "d4a10d0a628008949adf9e2baee507f8a0985b3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4a10d0a628008949adf9e2baee507f8a0985b3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4a10d0a628008949adf9e2baee507f8a0985b3f"}], "stats": {"total": 102, "additions": 76, "deletions": 26}, "files": [{"sha": "32e8ce2515b529b7794152bca48359786aaa286e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fcc85cd9e285522f9896a88e1374e0cc2454b4f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fcc85cd9e285522f9896a88e1374e0cc2454b4f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0fcc85cd9e285522f9896a88e1374e0cc2454b4f", "patch": "@@ -1,3 +1,9 @@\n+2012-06-29  Richard Henderson  <rth@redhat.com>\n+\n+\t* tree-vect-generic.c: Include target.h.\n+\t(expand_vector_divmod): Use builtin_mul_widen_even/odd if supported.\n+\t* Makefile.in (tree-vect-generic.o): Update.\n+\n 2012-06-29  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* configure.ac: Remove special gtfiles case for C."}, {"sha": "9955fd79fefccb4d85a0a00e456d5331b0c1a0e6", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fcc85cd9e285522f9896a88e1374e0cc2454b4f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fcc85cd9e285522f9896a88e1374e0cc2454b4f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=0fcc85cd9e285522f9896a88e1374e0cc2454b4f", "patch": "@@ -3036,7 +3036,7 @@ tree-vect-generic.o : tree-vect-generic.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n     $(TM_H) $(TREE_FLOW_H) $(GIMPLE_H) tree-iterator.h $(TREE_PASS_H) \\\n     $(FLAGS_H) $(OPTABS_H) $(MACHMODE_H) $(EXPR_H) \\\n     langhooks.h $(FLAGS_H) $(DIAGNOSTIC_H) gt-tree-vect-generic.h $(GGC_H) \\\n-    coretypes.h insn-codes.h $(DIAGNOSTIC_H)\n+    coretypes.h insn-codes.h $(DIAGNOSTIC_H) $(TARGET_H)\n df-core.o : df-core.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    insn-config.h $(RECOG_H) $(FUNCTION_H) $(REGS_H) alloc-pool.h \\\n    hard-reg-set.h $(BASIC_BLOCK_H) $(DF_H) $(BITMAP_H) sbitmap.h $(TIMEVAR_H) \\"}, {"sha": "89d8bae99c7fafcada37814445fa6c8a02140dac", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 69, "deletions": 25, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fcc85cd9e285522f9896a88e1374e0cc2454b4f/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fcc85cd9e285522f9896a88e1374e0cc2454b4f/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=0fcc85cd9e285522f9896a88e1374e0cc2454b4f", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"ggc.h\"\n #include \"diagnostic.h\"\n+#include \"target.h\"\n \n /* Need to include rtl.h, expr.h, etc. for optabs.  */\n #include \"expr.h\"\n@@ -456,7 +457,7 @@ expand_vector_divmod (gimple_stmt_iterator *gsi, tree type, tree op0,\n   optab op;\n   tree *vec;\n   unsigned char *sel = NULL;\n-  tree cur_op, mhi, mlo, mulcst, perm_mask, wider_type, tem;\n+  tree cur_op, mhi, mlo, mulcst, perm_mask, wider_type, tem, decl_e, decl_o;\n \n   if (prec > HOST_BITS_PER_WIDE_INT)\n     return NULL_TREE;\n@@ -745,32 +746,52 @@ expand_vector_divmod (gimple_stmt_iterator *gsi, tree type, tree op0,\n     return NULL_TREE;\n \n   op = optab_for_tree_code (MULT_HIGHPART_EXPR, type, optab_default);\n-  if (op != NULL\n-      && optab_handler (op, TYPE_MODE (type)) != CODE_FOR_nothing)\n-    wider_type = NULL_TREE;\n+  if (op != NULL && optab_handler (op, TYPE_MODE (type)) != CODE_FOR_nothing)\n+    wider_type = decl_e = decl_o = NULL_TREE;\n   else\n     {\n-      op = optab_for_tree_code (VEC_WIDEN_MULT_LO_EXPR, type, optab_default);\n-      if (op == NULL\n-\t  || optab_handler (op, TYPE_MODE (type)) == CODE_FOR_nothing)\n-\treturn NULL_TREE;\n-      op = optab_for_tree_code (VEC_WIDEN_MULT_HI_EXPR, type, optab_default);\n-      if (op == NULL\n-\t  || optab_handler (op, TYPE_MODE (type)) == CODE_FOR_nothing)\n-\treturn NULL_TREE;\n-      sel = XALLOCAVEC (unsigned char, nunits);\n-      for (i = 0; i < nunits; i++)\n-\tsel[i] = 2 * i + (BYTES_BIG_ENDIAN ? 0 : 1);\n-      if (!can_vec_perm_p (TYPE_MODE (type), false, sel))\n-\treturn NULL_TREE;\n-      wider_type\n-\t= build_vector_type (build_nonstandard_integer_type (prec * 2,\n-\t\t\t\t\t\t\t     unsignedp),\n-\t\t\t     nunits / 2);\n+      wider_type = build_nonstandard_integer_type (prec * 2, unsignedp),\n+      wider_type = build_vector_type (wider_type, nunits / 2);\n       if (GET_MODE_CLASS (TYPE_MODE (wider_type)) != MODE_VECTOR_INT\n \t  || GET_MODE_BITSIZE (TYPE_MODE (wider_type))\n \t     != GET_MODE_BITSIZE (TYPE_MODE (type)))\n \treturn NULL_TREE;\n+\n+      sel = XALLOCAVEC (unsigned char, nunits);\n+\n+      if (targetm.vectorize.builtin_mul_widen_even\n+\t  && targetm.vectorize.builtin_mul_widen_odd\n+\t  && (decl_e = targetm.vectorize.builtin_mul_widen_even (type))\n+\t  && (decl_o = targetm.vectorize.builtin_mul_widen_odd (type))\n+\t  && (TYPE_MODE (TREE_TYPE (TREE_TYPE (decl_e)))\n+\t      == TYPE_MODE (wider_type)))\n+\t{\n+\t  for (i = 0; i < nunits; i++)\n+\t    sel[i] = !BYTES_BIG_ENDIAN + (i & ~1) + ((i & 1) ? nunits : 0);\n+\t  if (!can_vec_perm_p (TYPE_MODE (wider_type), false, sel))\n+\t    decl_e = decl_o = NULL_TREE;\n+\t}\n+      else\n+\tdecl_e = decl_o = NULL_TREE;\n+\n+      if (decl_e == NULL_TREE)\n+\t{\n+\t  op = optab_for_tree_code (VEC_WIDEN_MULT_LO_EXPR,\n+\t\t\t\t    type, optab_default);\n+\t  if (op == NULL\n+\t      || optab_handler (op, TYPE_MODE (type)) == CODE_FOR_nothing)\n+\t    return NULL_TREE;\n+\t  op = optab_for_tree_code (VEC_WIDEN_MULT_HI_EXPR,\n+\t\t\t\t    type, optab_default);\n+\t  if (op == NULL\n+\t      || optab_handler (op, TYPE_MODE (type)) == CODE_FOR_nothing)\n+\t    return NULL_TREE;\n+\n+\t  for (i = 0; i < nunits; i++)\n+\t    sel[i] = 2 * i + (BYTES_BIG_ENDIAN ? 0 : 1);\n+\t  if (!can_vec_perm_p (TYPE_MODE (type), false, sel))\n+\t    return NULL_TREE;\n+\t}\n     }\n \n   cur_op = op0;\n@@ -816,11 +837,34 @@ expand_vector_divmod (gimple_stmt_iterator *gsi, tree type, tree op0,\n       for (i = 0; i < nunits; i++)\n \tvec[i] = build_int_cst (TREE_TYPE (type), sel[i]);\n       perm_mask = build_vector (type, vec);\n-      mhi = gimplify_build2 (gsi, VEC_WIDEN_MULT_HI_EXPR, wider_type,\n-\t\t\t     cur_op, mulcst);\n+\n+      if (decl_e != NULL_TREE)\n+\t{\n+\t  gimple call;\n+\n+\t  call = gimple_build_call (decl_e, 2, cur_op, mulcst);\n+\t  mhi = create_tmp_reg (wider_type, NULL);\n+\t  add_referenced_var (mhi);\n+\t  mhi = make_ssa_name (mhi, call);\n+\t  gimple_call_set_lhs (call, mhi);\n+\t  gsi_insert_seq_before (gsi, call, GSI_SAME_STMT);\n+\n+\t  call = gimple_build_call (decl_o, 2, cur_op, mulcst);\n+\t  mlo = create_tmp_reg (wider_type, NULL);\n+\t  add_referenced_var (mlo);\n+\t  mlo = make_ssa_name (mlo, call);\n+\t  gimple_call_set_lhs (call, mlo);\n+\t  gsi_insert_seq_before (gsi, call, GSI_SAME_STMT);\n+\t}\n+      else\n+\t{\n+\t  mhi = gimplify_build2 (gsi, VEC_WIDEN_MULT_HI_EXPR, wider_type,\n+\t\t\t\t cur_op, mulcst);\n+\t  mlo = gimplify_build2 (gsi, VEC_WIDEN_MULT_LO_EXPR, wider_type,\n+\t\t\t\t cur_op, mulcst);\n+\t}\n+\n       mhi = gimplify_build1 (gsi, VIEW_CONVERT_EXPR, type, mhi);\n-      mlo = gimplify_build2 (gsi, VEC_WIDEN_MULT_LO_EXPR, wider_type,\n-\t\t\t     cur_op, mulcst);\n       mlo = gimplify_build1 (gsi, VIEW_CONVERT_EXPR, type, mlo);\n       if (BYTES_BIG_ENDIAN)\n \tcur_op = gimplify_build3 (gsi, VEC_PERM_EXPR, type, mhi, mlo,"}]}