{"sha": "b7e52782f605f9dd73526cf6fcf305207612313d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdlNTI3ODJmNjA1ZjlkZDczNTI2Y2Y2ZmNmMzA1MjA3NjEyMzEzZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2017-06-02T09:57:40Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-06-02T09:57:40Z"}, "message": "* builtins. (expand_builtin_alloca): Remove second parameter and\n\tinfer its value from the first parameter instead.\n\t(expand_builtin) <BUILT_IN_ALLOCA>: Adjust call to above.\n\nFrom-SVN: r248818", "tree": {"sha": "99c858951e72bae6b7f5542f9300ad8e2e8f0b6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99c858951e72bae6b7f5542f9300ad8e2e8f0b6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7e52782f605f9dd73526cf6fcf305207612313d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7e52782f605f9dd73526cf6fcf305207612313d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7e52782f605f9dd73526cf6fcf305207612313d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7e52782f605f9dd73526cf6fcf305207612313d/comments", "author": null, "committer": null, "parents": [{"sha": "1c26adb74dd3c09b755dd8d224d7a028155b110e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c26adb74dd3c09b755dd8d224d7a028155b110e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c26adb74dd3c09b755dd8d224d7a028155b110e"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "143829aecfdba5265f8a5d771b015304313d1028", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e52782f605f9dd73526cf6fcf305207612313d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e52782f605f9dd73526cf6fcf305207612313d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b7e52782f605f9dd73526cf6fcf305207612313d", "patch": "@@ -1,3 +1,9 @@\n+2017-06-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* builtins. (expand_builtin_alloca): Remove second parameter and\n+\tinfer its value from the first parameter instead.\n+\t(expand_builtin) <BUILT_IN_ALLOCA>: Adjust call to above.\n+\n 2017-06-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/80903"}, {"sha": "30462ad0f419721fd0aa2029dbc9f8f5593b5823", "filename": "gcc/builtins.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e52782f605f9dd73526cf6fcf305207612313d/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e52782f605f9dd73526cf6fcf305207612313d/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=b7e52782f605f9dd73526cf6fcf305207612313d", "patch": "@@ -140,7 +140,7 @@ static rtx expand_builtin_memset_with_bounds (tree, rtx, machine_mode);\n static rtx expand_builtin_memset_args (tree, tree, tree, rtx, machine_mode, tree);\n static rtx expand_builtin_bzero (tree);\n static rtx expand_builtin_strlen (tree, rtx, machine_mode);\n-static rtx expand_builtin_alloca (tree, bool);\n+static rtx expand_builtin_alloca (tree);\n static rtx expand_builtin_unop (machine_mode, tree, rtx, rtx, optab);\n static rtx expand_builtin_frame_address (tree, tree);\n static tree stabilize_va_list_loc (location_t, tree, int);\n@@ -4914,19 +4914,18 @@ expand_builtin_frame_address (tree fndecl, tree exp)\n }\n \n /* Expand EXP, a call to the alloca builtin.  Return NULL_RTX if we\n-   failed and the caller should emit a normal call.  CANNOT_ACCUMULATE\n-   is the same as for allocate_dynamic_stack_space.  */\n+   failed and the caller should emit a normal call.  */\n \n static rtx\n-expand_builtin_alloca (tree exp, bool cannot_accumulate)\n+expand_builtin_alloca (tree exp)\n {\n   rtx op0;\n   rtx result;\n   unsigned int align;\n   tree fndecl = get_callee_fndecl (exp);\n   bool alloca_with_align = (DECL_FUNCTION_CODE (fndecl)\n \t\t\t    == BUILT_IN_ALLOCA_WITH_ALIGN);\n-\n+  bool alloca_for_var = CALL_ALLOCA_FOR_VAR_P (exp);\n   bool valid_arglist\n     = (alloca_with_align\n        ? validate_arglist (exp, INTEGER_TYPE, INTEGER_TYPE, VOID_TYPE)\n@@ -4955,8 +4954,9 @@ expand_builtin_alloca (tree exp, bool cannot_accumulate)\n \t   ? TREE_INT_CST_LOW (CALL_EXPR_ARG (exp, 1))\n \t   : BIGGEST_ALIGNMENT);\n \n-  /* Allocate the desired space.  */\n-  result = allocate_dynamic_stack_space (op0, 0, align, cannot_accumulate);\n+  /* Allocate the desired space.  If the allocation stems from the declaration\n+     of a variable-sized object, it cannot accumulate.  */\n+  result = allocate_dynamic_stack_space (op0, 0, align, alloca_for_var);\n   result = convert_memory_address (ptr_mode, result);\n \n   return result;\n@@ -6752,9 +6752,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, machine_mode mode,\n \n     case BUILT_IN_ALLOCA:\n     case BUILT_IN_ALLOCA_WITH_ALIGN:\n-      /* If the allocation stems from the declaration of a variable-sized\n-\t object, it cannot accumulate.  */\n-      target = expand_builtin_alloca (exp, CALL_ALLOCA_FOR_VAR_P (exp));\n+      target = expand_builtin_alloca (exp);\n       if (target)\n \treturn target;\n       break;"}]}