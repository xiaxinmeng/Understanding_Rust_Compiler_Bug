{"sha": "ce4065374b97d6ee7309d3f38de5ee3f87c69b43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U0MDY1Mzc0Yjk3ZDZlZTczMDlkM2YzOGRlNWVlM2Y4N2M2OWI0Mw==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2005-05-04T15:41:56Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2005-05-04T15:41:56Z"}, "message": "Makefile.tpl (POSTSTAGE1_HOST_EXPORTS): Rename from STAGE_HOST_EXPORTS.\n\n2005-05-04  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* Makefile.tpl (POSTSTAGE1_HOST_EXPORTS): Rename from\n\tSTAGE_HOST_EXPORTS.\n\t(configure, all): Add bootstrap support.\n\t(Host modules, target modules): Pass post-stage1 flags and exports.\n\t(Top-level bootstrap): Remove bootstrap rules, expanded elsewhere.\n\t* Makefile.in: Regenerate.\n\nFrom-SVN: r99218", "tree": {"sha": "00a36f8eca5143a77212cfebe120841e4e0a1dfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00a36f8eca5143a77212cfebe120841e4e0a1dfc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce4065374b97d6ee7309d3f38de5ee3f87c69b43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce4065374b97d6ee7309d3f38de5ee3f87c69b43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce4065374b97d6ee7309d3f38de5ee3f87c69b43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce4065374b97d6ee7309d3f38de5ee3f87c69b43/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cedc99b54dfebc122807154f585703d3d0aebb22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cedc99b54dfebc122807154f585703d3d0aebb22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cedc99b54dfebc122807154f585703d3d0aebb22"}], "stats": {"total": 7451, "additions": 3917, "deletions": 3534}, "files": [{"sha": "3ed6bf62b7f40e51bad55f9700c570d0edb8927f", "filename": "ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4065374b97d6ee7309d3f38de5ee3f87c69b43/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4065374b97d6ee7309d3f38de5ee3f87c69b43/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=ce4065374b97d6ee7309d3f38de5ee3f87c69b43", "patch": "@@ -1,3 +1,12 @@\n+2005-05-04  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* Makefile.tpl (POSTSTAGE1_HOST_EXPORTS): Rename from\n+\tSTAGE_HOST_EXPORTS.\n+\t(configure, all): Add bootstrap support.\n+\t(Host modules, target modules): Pass post-stage1 flags and exports.\n+\t(Top-level bootstrap): Remove bootstrap rules, expanded elsewhere.\n+\t* Makefile.in: Regenerate.\n+\n 2005-04-29  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* configure: Regenerate."}, {"sha": "7d6a55938bb6ceca93feaa82ed690562e17eec5f", "filename": "Makefile.in", "status": "modified", "additions": 3834, "deletions": 3466, "changes": 7300, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4065374b97d6ee7309d3f38de5ee3f87c69b43/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4065374b97d6ee7309d3f38de5ee3f87c69b43/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=ce4065374b97d6ee7309d3f38de5ee3f87c69b43"}, {"sha": "2c114e40681fb445e535216395f8206b2282d389", "filename": "Makefile.tpl", "status": "modified", "additions": 74, "deletions": 68, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4065374b97d6ee7309d3f38de5ee3f87c69b43/Makefile.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4065374b97d6ee7309d3f38de5ee3f87c69b43/Makefile.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.tpl?ref=ce4065374b97d6ee7309d3f38de5ee3f87c69b43", "patch": "@@ -161,7 +161,7 @@ HOST_EXPORTS = \\\n \t$(RPATH_ENVVAR)=`echo \"$(HOST_LIB_PATH)$$$(RPATH_ENVVAR)\" | sed 's,::*,:,g;s,^:*,,;s,:*$$,,'`; export $(RPATH_ENVVAR);\n \n # Similar, for later GCC stages.\n-STAGE_HOST_EXPORTS = \\\n+POSTSTAGE1_HOST_EXPORTS = \\\n \t$(RPATH_ENVVAR)=`echo \"$(TARGET_LIB_PATH)$$$(RPATH_ENVVAR)\" | sed 's,::*,:,g;s,^:*,,;s,:*$$,,'`; export $(RPATH_ENVVAR); \\\n \t$(HOST_EXPORTS) \\\n \tCC=\"$(STAGE_CC_WRAPPER) $$r/$(HOST_SUBDIR)/prev-gcc/xgcc$(exeext) \\\n@@ -848,6 +848,35 @@ configure-[+prefix+][+module+]: [+deps+]\n \t  [+args+] $${srcdiroption} [+extra_configure_flags+] \\\n \t  || exit 1\n @endif [+prefix+][+module+]\n+\n+[+ IF bootstrap +]\n+[+ FOR bootstrap_stage +]\n+.PHONY: configure-stage[+id+]-[+prefix+][+module+] maybe-configure-stage[+id+]-[+prefix+][+module+]\n+maybe-configure-stage[+id+]-[+prefix+][+module+]:\n+@if [+module+]-bootstrap\n+maybe-configure-stage[+id+]-[+prefix+][+module+]: configure-stage[+id+]-[+prefix+][+module+]\n+configure-stage[+id+]-[+prefix+][+module+]: [+deps+]\n+\t@$(MAKE) stage[+id+]-start\n+\t@[ -f [+subdir+]/[+module+]/Makefile ] && exit 0 || : ; \\\n+\tr=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\t[+exports+][+ IF prev +] \\\n+\t[+poststage1_exports+][+ ENDIF prev +] \\\n+\techo Configuring stage [+id+] in [+subdir+]/[+module+] ; \\\n+\tcd [+subdir+]/[+module+] || exit 1; \\\n+\tcase $(srcdir) in \\\n+\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n+\t  *) topdir=`echo [+subdir+]/[+module+]/ | \\\n+\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n+\tesac; \\\n+\tsrcdiroption=\"--srcdir=$${topdir}/[+module+]\"; \\\n+\tlibsrcdir=\"$$s/[+module+]\"; \\\n+\t$(SHELL) $${libsrcdir}/configure \\\n+\t  [+args+] $${srcdiroption} \\\n+\t  [+stage_configure_flags+] [+extra_configure_flags+]\n+@endif [+module+]-bootstrap\n+[+ ENDFOR bootstrap_stage +]\n+[+ ENDIF bootstrap +]\n [+ ENDDEF +]\n \n [+ DEFINE all +]\n@@ -865,6 +894,41 @@ all-[+prefix+][+module+]: configure-[+prefix+][+module+]\n \t(cd [+subdir+]/[+module+] && \\\n \t  $(MAKE) [+args+] [+extra_make_flags+] $(TARGET-[+prefix+][+module+]))\n @endif [+prefix+][+module+]\n+\n+[+ IF bootstrap +]\n+[+ FOR bootstrap_stage +]\n+.PHONY: all-stage[+id+]-[+prefix+][+module+] maybe-all-stage[+id+]-[+prefix+][+module+]\n+.PHONY: clean-stage[+id+]-[+prefix+][+module+] maybe-clean-stage[+id+]-[+prefix+][+module+]\n+maybe-all-stage[+id+]-[+prefix+][+module+]:\n+maybe-clean-stage[+id+]-[+prefix+][+module+]:\n+@if [+module+]-bootstrap\n+maybe-all-stage[+id+]-[+prefix+][+module+]: all-stage[+id+]-[+prefix+][+module+]\n+all-stage[+id+]: all-stage[+id+]-[+prefix+][+module+]\n+all-stage[+id+]-[+prefix+][+module+]: configure-stage[+id+]-[+prefix+][+module+]\n+\t@$(MAKE) stage[+id+]-start\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\t[+exports+][+ IF prev +] \\\n+\t[+poststage1_exports+][+ ENDIF prev +] \\\n+\tcd [+subdir+]/[+module+] && \\\n+\t$(MAKE) [+args+] [+ IF prev\n+\t\t+][+poststage1_args+][+ ENDIF prev\n+\t\t+] [+stage_make_flags+] [+extra_make_flags+]\n+\n+maybe-clean-stage[+id+]-[+prefix+][+module+]: clean-stage[+id+]-[+prefix+][+module+]\n+clean-stage[+id+]: clean-stage[+id+]-[+prefix+][+module+]\n+clean-stage[+id+]-[+prefix+][+module+]:\n+\t@[ -f [+subdir+]/[+module+]/Makefile ] || [ -f [+subdir+]/stage[+id+]-[+module+]/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f [+subdir+]/[+module+]/Makefile ] || $(MAKE) stage[+id+]-start ; \\\n+\tcd [+subdir+]/[+module+] && \\\n+\t$(MAKE) [+args+] [+ IF prev +] \\\n+\t\t[+poststage1_args+] [+ ENDIF prev +] \\\n+\t\t[+stage_make_flags+] [+extra_make_flags+] clean\n+@endif [+module+]-bootstrap\n+\n+[+ ENDFOR bootstrap_stage +]\n+[+ ENDIF bootstrap +]\n [+ ENDDEF +]\n \n # --------------------------------------\n@@ -881,11 +945,16 @@ all-[+prefix+][+module+]: configure-[+prefix+][+module+]\n # Modules which run on the host machine\n # --------------------------------------\n [+ FOR host_modules +]\n-[+ configure prefix=\"\" subdir=\"$(HOST_SUBDIR)\" exports=\"$(HOST_EXPORTS)\"\n+[+ configure prefix=\"\" subdir=\"$(HOST_SUBDIR)\"\n+\t     exports=\"$(HOST_EXPORTS)\"\n+\t     poststage1_exports=\"$(POSTSTAGE1_HOST_EXPORTS)\"\n \t     args=\"$(HOST_CONFIGARGS)\" +]\n \n-[+ all prefix=\"\" subdir=\"$(HOST_SUBDIR)\" exports=\"$(HOST_EXPORTS)\"\n-       args=\"$(FLAGS_TO_PASS)\" +]\n+[+ all prefix=\"\" subdir=\"$(HOST_SUBDIR)\"\n+       exports=\"$(HOST_EXPORTS)\"\n+       poststage1_exports=\"$(POSTSTAGE1_HOST_EXPORTS)\"\n+       args=\"$(FLAGS_TO_PASS)\"\n+       poststage1_args=\"$(POSTSTAGE1_FLAGS_TO_PASS)\" +]\n \n .PHONY: check-[+module+] maybe-check-[+module+]\n maybe-check-[+module+]:\n@@ -1271,7 +1340,7 @@ stage[+id+]-start::\n \t@[ -f stage_current ] && $(MAKE) `cat stage_current`-end || : ; \\\n \techo stage[+id+] > stage_current ; \\\n \techo stage[+id+] > stage_last; \\\n-\t$(mkinstalldirs) $(HOST_SUBDIR)[+\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)[+\n    FOR host_modules +][+ IF bootstrap +]\n @if [+ module +]\n \t@cd $(HOST_SUBDIR); [ -d stage[+id+]-[+module+] ] || \\\n@@ -1305,70 +1374,7 @@ stage[+id+]-bubble:: [+ IF prev +]stage[+prev+]-bubble[+ ENDIF +][+IF lean +]\n \tfi\n \n .PHONY: all-stage[+id+] clean-stage[+id+]\n-all-stage[+id+]: [+ FOR host_modules +][+ IF bootstrap +]\\\n-  maybe-all-stage[+id+]-[+module+][+\n-ENDIF bootstrap+] [+ ENDFOR host_modules +]\n-\n do-clean: clean-stage[+id+]\n-clean-stage[+id+]: [+ FOR host_modules +][+ IF bootstrap +]\\\n-  maybe-clean-stage[+id+]-[+module+][+\n-ENDIF bootstrap+] [+ ENDFOR host_modules +]\n-\n-[+ FOR host_modules +][+ IF bootstrap +]\n-.PHONY: configure-stage[+id+]-[+module+] maybe-configure-stage[+id+]-[+module+]\n-.PHONY: all-stage[+id+]-[+module+] maybe-all-stage[+id+]-[+module+]\n-.PHONY: clean-stage[+id+]-[+module+] maybe-clean-stage[+id+]-[+module+]\n-\n-maybe-configure-stage[+id+]-[+module+]:\n-maybe-all-stage[+id+]-[+module+]:\n-maybe-clean-stage[+id+]-[+module+]:\n-\n-@if [+module+]-bootstrap\n-maybe-configure-stage[+id+]-[+module+]: configure-stage[+id+]-[+module+]\n-configure-stage[+id+]-[+module+]:\n-\t@$(MAKE) stage[+id+]-start\n-\t@[ -f [+module+]/Makefile ] && exit 0 || : ; \\\n-\tr=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; [+ IF prev +] \\\n-\t$(STAGE_HOST_EXPORTS) [+ ELSE prev +] \\\n-\t$(HOST_EXPORTS) [+ ENDIF prev +] \\\n-\techo Configuring stage [+id+] in [+module+] ; \\\n-\tcd $(HOST_SUBDIR)/[+module+] || exit 1; \\\n-\tcase $(srcdir) in \\\n-\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n-\t  *) topdir=`echo $(HOST_SUBDIR)/[+module+]/ | \\\n-\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n-\tesac; \\\n-\tsrcdiroption=\"--srcdir=$${topdir}/[+module+]\"; \\\n-\tlibsrcdir=\"$$s/[+module+]\"; \\\n-\t$(SHELL) $${libsrcdir}/configure \\\n-\t  $(HOST_CONFIGARGS) $${srcdiroption} \\\n-\t  [+stage_configure_flags+] [+extra_configure_flags+]\n-\n-maybe-all-stage[+id+]-[+module+]: all-stage[+id+]-[+module+]\n-all-stage[+id+]-[+module+]: configure-stage[+id+]-[+module+]\n-\t@$(MAKE) stage[+id+]-start\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; [+ IF prev +] \\\n-\t$(STAGE_HOST_EXPORTS) [+ ELSE prev +] \\\n-\t$(HOST_EXPORTS) [+ ENDIF prev +] \\\n-\tcd $(HOST_SUBDIR)/[+module+] && \\\n-\t$(MAKE) $(FLAGS_TO_PASS) [+ IF prev +] \\\n-\t\t$(POSTSTAGE1_FLAGS_TO_PASS) [+ ENDIF prev +] \\\n-\t\t[+stage_make_flags+] [+extra_make_flags+]\n-\n-maybe-clean-stage[+id+]-[+module+]: clean-stage[+id+]-[+module+]\n-clean-stage[+id+]-[+module+]:\n-\t@[ -f [+module+]/Makefile ] || [ -f stage[+id+]-[+module+]/Makefile ] \\\n-\t  || exit 0 ; \\\n-\t[ -f [+module+]/Makefile ] || $(MAKE) stage[+id+]-start ; \\\n-\tcd $(HOST_SUBDIR)/[+module+] && \\\n-\t$(MAKE) $(FLAGS_TO_PASS) [+ IF prev +] \\\n-\t\t$(POSTSTAGE1_FLAGS_TO_PASS) [+ ENDIF prev +] \\\n-\t\t[+stage_make_flags+] [+extra_make_flags+] clean\n-@endif [+module+]-bootstrap\n-\n-[+ ENDIF bootstrap +][+ ENDFOR host_modules +]\n \n # FIXME: Will not need to be conditional when toplevel bootstrap is the\n # only possibility, but now it conflicts with no-bootstrap rules"}]}