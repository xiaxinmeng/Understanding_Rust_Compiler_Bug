{"sha": "41bda0036ce81e7ac513f325e7b0f41ccf11cbab", "node_id": "C_kwDOANBUbNoAKDQxYmRhMDAzNmNlODFlN2FjNTEzZjMyNWU3YjBmNDFjY2YxMWNiYWI", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-03-11T07:48:58Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-03-11T07:48:58Z"}, "message": "Fortran: OpenMP/OpenACC avoid uninit access in size calc for mapping\n\ngcc/fortran/ChangeLog:\n\n\t* trans-openmp.cc (gfc_trans_omp_clauses, gfc_omp_finish_clause):\n\tObtain size for mapping only if allocatable array is allocated.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/goacc/array-with-dt-1.f90: Update/add comments;\n\tremove dg-warning for 'is used uninitialized'.\n\t* gfortran.dg/goacc/pr93464.f90: Likewise.\n\t* gfortran.dg/goacc/array-with-dt-1a.f90: New; copied from\n\tgfortran.dg/goacc/array-with-dt-1.f90 but run with -O0. Update\n\tdg-warning for 'may be used uninitialized'.\n\t* gfortran.dg/goacc/pr93464-2.f90: Likewise; copied from\n\tgfortran.dg/goacc/pr93464.f90.", "tree": {"sha": "9add88c8a39abefc167dddc6117aa9d376d2d90b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9add88c8a39abefc167dddc6117aa9d376d2d90b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41bda0036ce81e7ac513f325e7b0f41ccf11cbab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41bda0036ce81e7ac513f325e7b0f41ccf11cbab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41bda0036ce81e7ac513f325e7b0f41ccf11cbab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41bda0036ce81e7ac513f325e7b0f41ccf11cbab/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e28be89665f340368e399a1f2140c96a7a79ee8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e28be89665f340368e399a1f2140c96a7a79ee8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e28be89665f340368e399a1f2140c96a7a79ee8"}], "stats": {"total": 89, "additions": 80, "deletions": 9}, "files": [{"sha": "fad76a4791ffe019f6465a205b366bc6b078e0e6", "filename": "gcc/fortran/trans-openmp.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41bda0036ce81e7ac513f325e7b0f41ccf11cbab/gcc%2Ffortran%2Ftrans-openmp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41bda0036ce81e7ac513f325e7b0f41ccf11cbab/gcc%2Ffortran%2Ftrans-openmp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.cc?ref=41bda0036ce81e7ac513f325e7b0f41ccf11cbab", "patch": "@@ -1597,7 +1597,8 @@ gfc_omp_finish_clause (tree c, gimple_seq *pre_p, bool openacc)\n       tree size = create_tmp_var (gfc_array_index_type);\n       tree elemsz = TYPE_SIZE_UNIT (gfc_get_element_type (type));\n       elemsz = fold_convert (gfc_array_index_type, elemsz);\n-      if (GFC_TYPE_ARRAY_AKIND (type) == GFC_ARRAY_POINTER\n+      if (GFC_TYPE_ARRAY_AKIND (type) == GFC_ARRAY_ALLOCATABLE\n+\t  || GFC_TYPE_ARRAY_AKIND (type) == GFC_ARRAY_POINTER\n \t  || GFC_TYPE_ARRAY_AKIND (type) == GFC_ARRAY_POINTER_CONT)\n \t{\n \t  stmtblock_t cond_block;\n@@ -3208,7 +3209,8 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \n \t\t      /* We have to check for n->sym->attr.dimension because\n \t\t\t of scalar coarrays.  */\n-\t\t      if (n->sym->attr.pointer && n->sym->attr.dimension)\n+\t\t      if ((n->sym->attr.pointer || n->sym->attr.allocatable)\n+\t\t\t  && n->sym->attr.dimension)\n \t\t\t{\n \t\t\t  stmtblock_t cond_block;\n \t\t\t  tree size"}, {"sha": "fb27f6e405896b6f925353f70d3102221af60085", "filename": "gcc/testsuite/gfortran.dg/goacc/array-with-dt-1.f90", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41bda0036ce81e7ac513f325e7b0f41ccf11cbab/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41bda0036ce81e7ac513f325e7b0f41ccf11cbab/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-1.f90?ref=41bda0036ce81e7ac513f325e7b0f41ccf11cbab", "patch": "@@ -1,15 +1,27 @@\n ! { dg-additional-options -Wuninitialized }\n \n+! Purpose of this testcase (from the commit log):\n+!   This patch fixes lowering of derived-type mappings which select elements\n+!   of arrays of derived types, and similar. These would previously lead\n+!   to ICEs.\n+\n+! This testcase does not show any uninitialized warnings when compiled with -O\n+! (as done). For -O0, see testcase file 'array-with-dt-1a.f90'.\n+\n type t\n    integer, allocatable :: A(:,:)\n end type t\n \n type(t), allocatable :: b(:)\n-! { dg-note {'b' declared here} {} { target *-*-* } .-1 }\n+\n+! Remark: Semantically, the following line requires that 'b'\n+! is already present on the device.\n \n !$acc update host(b)\n-! { dg-warning {'b\\.dim\\[0\\]\\.ubound' is used uninitialized} {} { target *-*-* } .-1 }\n-! { dg-warning {'b\\.dim\\[0\\]\\.lbound' is used uninitialized} {} { target *-*-* } .-2 }\n+\n+! Remark: Semantically, the following lines require that b is allocated\n+! and present on the device. The last line also requires the same for 'A'.\n+\n !$acc update host(b(:))\n !$acc update host(b(1)%A)\n !$acc update host(b(1)%A(:,:))"}, {"sha": "8beaeb45e2ea3ab9b9985d734e5f4ee165b6a035", "filename": "gcc/testsuite/gfortran.dg/goacc/array-with-dt-1a.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41bda0036ce81e7ac513f325e7b0f41ccf11cbab/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-1a.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41bda0036ce81e7ac513f325e7b0f41ccf11cbab/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-1a.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-1a.f90?ref=41bda0036ce81e7ac513f325e7b0f41ccf11cbab", "patch": "@@ -0,0 +1,27 @@\n+! { dg-additional-options \"-Wuninitialized -O0\" }\n+!\n+! With -O0 only, 'may be uninitalized' warnings show up.\n+! For the original testcase, compiled with '-O',\n+! see testcase file 'array-with-dt-1a.f90'\n+\n+type t\n+   integer, allocatable :: A(:,:)\n+end type t\n+\n+type(t), allocatable :: b(:)\n+! { dg-note {'b' declared here} {} { target *-*-* } .-1 }\n+\n+! Remark: Semantically, the following line requires that 'b'\n+! is already present on the device.\n+\n+!$acc update host(b)\n+! { dg-warning {'b\\.dim\\[0\\]\\.ubound' may be used uninitialized} {} { target *-*-* } .-1 }\n+! { dg-warning {'b\\.dim\\[0\\]\\.lbound' may be used uninitialized} {} { target *-*-* } .-2 }\n+\n+! Remark: Semantically, the following lines require that b is allocated\n+! and present on the device. The last line also requires the same for 'A'.\n+\n+!$acc update host(b(:))\n+!$acc update host(b(1)%A)\n+!$acc update host(b(1)%A(:,:))\n+end"}, {"sha": "5da6a4eb7b000d707f263c514048f19b61f91739", "filename": "gcc/testsuite/gfortran.dg/goacc/pr93464-2.f90", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41bda0036ce81e7ac513f325e7b0f41ccf11cbab/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fpr93464-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41bda0036ce81e7ac513f325e7b0f41ccf11cbab/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fpr93464-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fpr93464-2.f90?ref=41bda0036ce81e7ac513f325e7b0f41ccf11cbab", "patch": "@@ -0,0 +1,26 @@\n+! { dg-additional-options \"-Wuninitialized -O0\" }\n+!\n+! PR fortran/93464\n+!\n+! Contributed by G. Steinmetz\n+!\n+! Did before ICE in gfc_omp_check_optional_argument\n+\n+! Additionally, check for uninitialized warnings. There are\n+! none with -O (cf. original testcase file 'pr93464.f90').\n+! For -O0, see below:\n+\n+program p\n+   character :: c(2) = 'a'\n+   character, allocatable :: z(:)\n+   ! { dg-note {'z' declared here} {} { target *-*-* } .-1 }\n+   !$acc parallel\n+   ! { dg-warning {'z\\.dim\\[0\\]\\.ubound' may be used uninitialized} {} { target *-*-* } .-1 }\n+   ! { dg-warning {'z\\.dim\\[0\\]\\.lbound' may be used uninitialized} {} { target *-*-* } .-2 }\n+   !$omp target\n+   ! Remark: As run-time check, required either 'c' being allocated or if(allocated(c)':\n+   z = c\n+   !$acc end parallel\n+   !$omp end target\n+   print *, z\n+end"}, {"sha": "1b5ca7d1c76a6c74829065946eefe1de1a014829", "filename": "gcc/testsuite/gfortran.dg/goacc/pr93464.f90", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41bda0036ce81e7ac513f325e7b0f41ccf11cbab/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fpr93464.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41bda0036ce81e7ac513f325e7b0f41ccf11cbab/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fpr93464.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fpr93464.f90?ref=41bda0036ce81e7ac513f325e7b0f41ccf11cbab", "patch": "@@ -1,17 +1,21 @@\n+! { dg-additional-options -Wuninitialized }\n+!\n ! PR fortran/93464\n !\n ! Contributed by G. Steinmetz\n+!\n+! Did before ICE in gfc_omp_check_optional_argument\n \n-! { dg-additional-options -Wuninitialized }\n+! Additionally, check for uninitialized warnings.\n+! Compiled with -O (as done here), no show up;\n+! for -O0, see testcase file 'pr93464-1.f90'.\n \n program p\n    character :: c(2) = 'a'\n    character, allocatable :: z(:)\n-   ! { dg-note {'z' declared here} {} { target *-*-* } .-1 }\n    !$acc parallel\n-   ! { dg-warning {'z\\.dim\\[0\\]\\.ubound' is used uninitialized} {} { target *-*-* } .-1 }\n-   ! { dg-warning {'z\\.dim\\[0\\]\\.lbound' is used uninitialized} {} { target *-*-* } .-2 }\n    !$omp target\n+   ! Remark: As run-time check, required either 'c' being allocated or if(allocated(c)':\n    z = c\n    !$acc end parallel\n    !$omp end target"}]}