{"sha": "15ba56964dee4136423c2d8534698013663fb8df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTViYTU2OTY0ZGVlNDEzNjQyM2MyZDg1MzQ2OTgwMTM2NjNmYjhkZg==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2011-01-22T16:05:49Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2011-01-22T16:05:49Z"}, "message": "rx.md (UNSPEC_CONST): New.\n\n\t* config/rx/rx.md (UNSPEC_CONST): New.\n\t(deallocate_and_return): Wrap the amount popped off the stack in\n\tan UNSPEC_CONST in order to stop it being rejected by\n\t-mmax-constant-size.\n\t(pop_and_return): Add a \"(return)\" rtx.\n\t(call): Drop the immediate operand.\n\t(call_internal): Likewise.\n\t(call_value): Likewise.\n\t(call_value_internal): Likewise.\n\t(sibcall_internal): Likewise.\n\t(sibcall_value_internal): Likewise.\n\t(sibcall): Likewise.  Generate an explicit call using\n\tsibcall_internal.\n\t(sibcall_value): Likewise.\n\t(mov<>): FAIL if a constant operand is not legitimate.\n\t(addsi3_unpsec): New pattern.\n\t* config/rx/rx.c (rx_print_operand_address): Handle UNPSEC\n\tCONSTs.\n\t(ok_for_max_constant): New function.\n\t(gen_safe_add): New function.\n\t(rx_expand_prologue): Use gen_safe_add.\n\t(rx_expand_epilogue): Likewise.\n\t(rx_is_legitimate_constant): Use ok_for_max_constant.  Handle\n\tUNSPEC CONSTs.\n\nFrom-SVN: r169128", "tree": {"sha": "d481aa07a94b7a8eb9d86cc2affd8fb6a5e36660", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d481aa07a94b7a8eb9d86cc2affd8fb6a5e36660"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15ba56964dee4136423c2d8534698013663fb8df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15ba56964dee4136423c2d8534698013663fb8df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15ba56964dee4136423c2d8534698013663fb8df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15ba56964dee4136423c2d8534698013663fb8df/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4618de23d8ac1c2a2c054c8120bcf02d190901d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4618de23d8ac1c2a2c054c8120bcf02d190901d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4618de23d8ac1c2a2c054c8120bcf02d190901d5"}], "stats": {"total": 200, "additions": 146, "deletions": 54}, "files": [{"sha": "b0edbea1d047a9a426c83496ec54515826315e8b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ba56964dee4136423c2d8534698013663fb8df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ba56964dee4136423c2d8534698013663fb8df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=15ba56964dee4136423c2d8534698013663fb8df", "patch": "@@ -1,3 +1,30 @@\n+2011-01-22  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/rx/rx.md (UNSPEC_CONST): New.\n+\t(deallocate_and_return): Wrap the amount popped off the stack in\n+\tan UNSPEC_CONST in order to stop it being rejected by\n+\t-mmax-constant-size.\n+\t(pop_and_return): Add a \"(return)\" rtx.\n+\t(call): Drop the immediate operand.\n+\t(call_internal): Likewise.\n+\t(call_value): Likewise.\n+\t(call_value_internal): Likewise.\n+\t(sibcall_internal): Likewise.\n+\t(sibcall_value_internal): Likewise.\n+\t(sibcall): Likewise.  Generate an explicit call using\n+\tsibcall_internal.\n+\t(sibcall_value): Likewise.\n+\t(mov<>): FAIL if a constant operand is not legitimate.\n+\t(addsi3_unpsec): New pattern.\n+\t* config/rx/rx.c (rx_print_operand_address): Handle UNPSEC\n+\tCONSTs.\n+\t(ok_for_max_constant): New function.\n+\t(gen_safe_add): New function.\n+\t(rx_expand_prologue): Use gen_safe_add.\n+\t(rx_expand_epilogue): Likewise.\n+\t(rx_is_legitimate_constant): Use ok_for_max_constant.  Handle\n+\tUNSPEC CONSTs.\n+\n 2011-01-21  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/47053"}, {"sha": "54cb7371598655ac3877192ae9a85b5eff39a7b6", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 83, "deletions": 45, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ba56964dee4136423c2d8534698013663fb8df/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ba56964dee4136423c2d8534698013663fb8df/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=15ba56964dee4136423c2d8534698013663fb8df", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines used for code generation on Renesas RX processors.\n-   Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n+   Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n    Contributed by Red Hat.\n \n    This file is part of GCC.\n@@ -323,10 +323,20 @@ rx_print_operand_address (FILE * file, rtx addr)\n \tbreak;\n       }\n \n+    case CONST:\n+      if (GET_CODE (XEXP (addr, 0)) == UNSPEC)\n+\t{\n+\t  addr = XEXP (addr, 0);\n+\t  gcc_assert (XINT (addr, 1) == UNSPEC_CONST);\n+      \n+\t  addr = XVECEXP (addr, 0, 0);\n+\t  gcc_assert (CONST_INT_P (addr));\n+\t}\n+      /* Fall through.  */\n     case LABEL_REF:\n     case SYMBOL_REF:\n-    case CONST:\n       fprintf (file, \"#\");\n+\n     default:\n       output_addr_const (file, addr);\n       break;\n@@ -1281,6 +1291,56 @@ mark_frame_related (rtx insn)\n     }\n }\n \n+static bool\n+ok_for_max_constant (HOST_WIDE_INT val)\n+{\n+  if (rx_max_constant_size == 0  || rx_max_constant_size == 4)\n+    /* If there is no constraint on the size of constants\n+       used as operands, then any value is legitimate.  */\n+    return true;\n+\n+  /* rx_max_constant_size specifies the maximum number\n+     of bytes that can be used to hold a signed value.  */\n+  return IN_RANGE (val, (-1 << (rx_max_constant_size * 8)),\n+\t\t        ( 1 << (rx_max_constant_size * 8)));\n+}\n+\n+/* Generate an ADD of SRC plus VAL into DEST.\n+   Handles the case where VAL is too big for max_constant_value.\n+   Sets FRAME_RELATED_P on the insn if IS_FRAME_RELATED is true.  */\n+\n+static void\n+gen_safe_add (rtx dest, rtx src, rtx val, bool is_frame_related)\n+{\n+  rtx insn;\n+\n+  if (val == NULL_RTX || INTVAL (val) == 0)\n+    {\n+      gcc_assert (dest != src);\n+\n+      insn = emit_move_insn (dest, src);\n+    }\n+  else if (ok_for_max_constant (INTVAL (val)))\n+    insn = emit_insn (gen_addsi3 (dest, src, val));\n+  else\n+    {\n+      insn = emit_insn (gen_addsi3_unspec (dest, src, val));\n+\n+      if (is_frame_related)\n+\t/* We have to provide our own frame related note here\n+\t   as the dwarf2out code cannot be expected to grok\n+\t   our unspec.  */\n+\tadd_reg_note (insn, REG_FRAME_RELATED_EXPR,\n+\t\t      gen_rtx_SET (SImode, dest,\n+\t\t\t\t   gen_rtx_PLUS (SImode, src, val)));\n+      return;\n+    }\n+\n+  if (is_frame_related)\n+    RTX_FRAME_RELATED_P (insn) = 1;\n+  return;\n+}\n+\n void\n rx_expand_prologue (void)\n {\n@@ -1370,17 +1430,8 @@ rx_expand_prologue (void)\n \n   /* If needed, set up the frame pointer.  */\n   if (frame_pointer_needed)\n-    {\n-      if (frame_size)\n-\tinsn = emit_insn (gen_addsi3 (frame_pointer_rtx, stack_pointer_rtx,\n-\t\t\t\t      GEN_INT (- (HOST_WIDE_INT) frame_size)));\n-      else\n-\tinsn = emit_move_insn (frame_pointer_rtx, stack_pointer_rtx);\n-\n-      RTX_FRAME_RELATED_P (insn) = 1;\n-    }\n-\n-  insn = NULL_RTX;\n+    gen_safe_add (frame_pointer_rtx, stack_pointer_rtx,\n+\t\t  GEN_INT (- (HOST_WIDE_INT) frame_size), true);\n \n   /* Allocate space for the outgoing args.\n      If the stack frame has not already been set up then handle this as well.  */\n@@ -1389,29 +1440,26 @@ rx_expand_prologue (void)\n       if (frame_size)\n \t{\n \t  if (frame_pointer_needed)\n-\t    insn = emit_insn (gen_addsi3 (stack_pointer_rtx, frame_pointer_rtx,\n-\t\t\t\t\t  GEN_INT (- (HOST_WIDE_INT)\n-\t\t\t\t\t\t   stack_size)));\n+\t    gen_safe_add (stack_pointer_rtx, frame_pointer_rtx,\n+\t\t\t  GEN_INT (- (HOST_WIDE_INT) stack_size), true);\n \t  else\n-\t    insn = emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx,\n-\t\t\t\t\t  GEN_INT (- (HOST_WIDE_INT)\n-\t\t\t\t\t\t   (frame_size + stack_size))));\n+\t    gen_safe_add (stack_pointer_rtx, stack_pointer_rtx,\n+\t\t\t  GEN_INT (- (HOST_WIDE_INT) (frame_size + stack_size)),\n+\t\t\t  true);\n \t}\n       else\n-\tinsn = emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx,\n-\t\t\t\t      GEN_INT (- (HOST_WIDE_INT) stack_size)));\n+\tgen_safe_add (stack_pointer_rtx, stack_pointer_rtx,\n+\t\t      GEN_INT (- (HOST_WIDE_INT) stack_size), true);\n     }\n   else if (frame_size)\n     {\n       if (! frame_pointer_needed)\n-\tinsn = emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx,\n-\t\t\t\t      GEN_INT (- (HOST_WIDE_INT) frame_size)));\n+\tgen_safe_add (stack_pointer_rtx, stack_pointer_rtx,\n+\t\t      GEN_INT (- (HOST_WIDE_INT) frame_size), true);\n       else\n-\tinsn = emit_move_insn (stack_pointer_rtx, frame_pointer_rtx);\n+\tgen_safe_add (stack_pointer_rtx, frame_pointer_rtx, NULL_RTX,\n+\t\t      true);\n     }\n-\n-  if (insn != NULL_RTX)\n-    RTX_FRAME_RELATED_P (insn) = 1;\n }\n \n static void\n@@ -1589,8 +1637,8 @@ rx_expand_epilogue (bool is_sibcall)\n     {\n       /* Cannot use the special instructions - deconstruct by hand.  */\n       if (total_size)\n-\temit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx,\n-\t\t\t       GEN_INT (total_size)));\n+\tgen_safe_add (stack_pointer_rtx, stack_pointer_rtx,\n+\t\t      GEN_INT (total_size), false);\n \n       if (MUST_SAVE_ACC_REGISTER)\n \t{\n@@ -1682,8 +1730,8 @@ rx_expand_epilogue (bool is_sibcall)\n \t  return;\n \t}\n \n-      emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx,\n-\t\t\t     GEN_INT (total_size)));\n+      gen_safe_add (stack_pointer_rtx, stack_pointer_rtx,\n+\t\t    GEN_INT (total_size), false);\n     }\n \n   if (low)\n@@ -2342,8 +2390,6 @@ rx_is_ms_bitfield_layout (const_tree record_type ATTRIBUTE_UNUSED)\n bool\n rx_is_legitimate_constant (rtx x)\n {\n-  HOST_WIDE_INT val;\n-\n   switch (GET_CODE (x))\n     {\n     case CONST:\n@@ -2366,7 +2412,9 @@ rx_is_legitimate_constant (rtx x)\n \tcase SYMBOL_REF:\n \t  return true;\n \n-\t  /* One day we may have to handle UNSPEC constants here.  */\n+\tcase UNSPEC:\n+\t  return XINT (x, 1) == UNSPEC_CONST;\n+\n \tdefault:\n \t  /* FIXME: Can this ever happen ?  */\n \t  abort ();\n@@ -2386,17 +2434,7 @@ rx_is_legitimate_constant (rtx x)\n       break;\n     }\n \n-  if (rx_max_constant_size == 0  || rx_max_constant_size == 4)\n-    /* If there is no constraint on the size of constants\n-       used as operands, then any value is legitimate.  */\n-    return true;\n-\n-  val = INTVAL (x);\n-\n-  /* rx_max_constant_size specifies the maximum number\n-     of bytes that can be used to hold a signed value.  */\n-  return IN_RANGE (val, (-1 << (rx_max_constant_size * 8)),\n-\t\t        ( 1 << (rx_max_constant_size * 8)));\n+  return ok_for_max_constant (INTVAL (x));\n }\n \n static int"}, {"sha": "1ae42cbd235ad1cf4e64891280b18554bb57a84f", "filename": "gcc/config/rx/rx.md", "status": "modified", "additions": 36, "deletions": 9, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ba56964dee4136423c2d8534698013663fb8df/gcc%2Fconfig%2Frx%2Frx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ba56964dee4136423c2d8534698013663fb8df/gcc%2Fconfig%2Frx%2Frx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.md?ref=15ba56964dee4136423c2d8534698013663fb8df", "patch": "@@ -1,5 +1,5 @@\n ;;  Machine Description for Renesas RX processors\n-;;  Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n+;;  Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n ;;  Contributed by Red Hat.\n \n ;; This file is part of GCC.\n@@ -50,6 +50,7 @@\n    (UNSPEC_RTE             10)\n    (UNSPEC_RTFI            11)\n    (UNSPEC_NAKED           12)\n+   (UNSPEC_CONST           13)\n    \n    (UNSPEC_MOVSTR          20)\n    (UNSPEC_MOVMEM          21)\n@@ -416,10 +417,12 @@\n    (set_attr \"timings\" \"55\")]\n )\n \n+;; Unspec used so that the constant will not be invalid\n+;; if -mmax-constant-size has been specified.\n (define_insn \"deallocate_and_return\"\n   [(set (reg:SI SP_REG)\n \t(plus:SI (reg:SI SP_REG)\n-\t\t (match_operand:SI 0 \"immediate_operand\" \"i\")))\n+\t\t (const:SI (unspec:SI [(match_operand 0 \"const_int_operand\" \"n\")] UNSPEC_CONST))))\n    (return)]\n   \"\"\n   \"rtsd\\t%0\"\n@@ -431,7 +434,8 @@\n   [(match_parallel 1 \"rx_rtsd_vector\"\n      [(set (reg:SI SP_REG)\n \t   (plus:SI (reg:SI SP_REG)\n-\t\t    (match_operand:SI 0 \"const_int_operand\" \"n\")))])]\n+\t\t    (match_operand:SI 0 \"const_int_operand\" \"n\")))])\n+   (return)]\n   \"reload_completed\"\n   {\n     rx_emit_stack_popm (operands, false);\n@@ -481,14 +485,14 @@\n \n     if (! rx_call_operand (dest, Pmode))\n       dest = force_reg (Pmode, dest);\n-    emit_call_insn (gen_call_internal (dest, operands[1]));\n+    emit_call_insn (gen_call_internal (dest));\n     DONE;\n   }\n )\n \n (define_insn \"call_internal\"\n   [(call (mem:QI (match_operand:SI 0 \"rx_call_operand\" \"r,Symbol\"))\n-\t (match_operand:SI         1 \"general_operand\" \"g,g\"))\n+\t (const_int 0))\n    (clobber (reg:CC CC_REG))]\n   \"\"\n   \"@\n@@ -508,15 +512,15 @@\n \n     if (! rx_call_operand (dest, Pmode))\n       dest = force_reg (Pmode, dest);\n-    emit_call_insn (gen_call_value_internal (operands[0], dest, operands[2]));\n+    emit_call_insn (gen_call_value_internal (operands[0], dest));\n     DONE;\n   }\n )\n \n (define_insn \"call_value_internal\"\n   [(set (match_operand                  0 \"register_operand\" \"=r,r\")\n \t(call (mem:QI (match_operand:SI 1 \"rx_call_operand\"   \"r,Symbol\"))\n-\t      (match_operand:SI         2 \"general_operand\"   \"g,g\")))\n+\t      (const_int 0)))\n    (clobber (reg:CC CC_REG))]\n   \"\"\n   \"@\n@@ -540,12 +544,14 @@\n   {\n     if (MEM_P (operands[0]))\n       operands[0] = XEXP (operands[0], 0);\n+    emit_call_insn (gen_sibcall_internal (operands[0]));\n+    DONE;\n   }\n )\n \n (define_insn \"sibcall_internal\"\n   [(call (mem:QI (match_operand:SI 0 \"rx_symbolic_call_operand\" \"Symbol\"))\n-\t (match_operand:SI         1 \"general_operand\"          \"g\"))\n+\t (const_int 0))\n    (return)]\n   \"\"\n   \"bra\\t%A0\"\n@@ -563,13 +569,15 @@\n   {\n     if (MEM_P (operands[1]))\n       operands[1] = XEXP (operands[1], 0);\n+    emit_call_insn (gen_sibcall_value_internal (operands[0], operands[1]));\n+    DONE;\n   }\n )\n \n (define_insn \"sibcall_value_internal\"\n  [(set (match_operand                  0 \"register_operand\"         \"=r\")\n        (call (mem:QI (match_operand:SI 1 \"rx_symbolic_call_operand\" \"Symbol\"))\n-\t     (match_operand:SI         2 \"general_operand\"          \"g\")))\n+\t     (const_int 0)))\n   (return)]\n   \"\"\n   \"bra\\t%A1\"\n@@ -621,6 +629,9 @@\n   {\n     if (MEM_P (operand0) && MEM_P (operand1))\n       operands[1] = copy_to_mode_reg (<register_modes:MODE>mode, operand1);\n+    if (CONST_INT_P (operand1)\n+        && ! rx_is_legitimate_constant (operand1))\n+      FAIL;\n   }\n )\n \n@@ -1110,6 +1121,22 @@\n   DONE;\n })\n \n+;; A pattern to add an integer to a register, regardless of the\n+;; setting of the -mmax-constant-size command line switch.\n+;; See rx.c:gen_safe_add() for more details.\n+(define_insn \"addsi3_unspec\"\n+  [(set (match_operand:SI          0 \"register_operand\"  \"=r,r\")\n+\t(plus:SI (match_operand:SI 1 \"register_operand\"  \"%0,r\")\n+\t\t (const:SI (unspec:SI [(match_operand 2 \"const_int_operand\" \"n,n\")] UNSPEC_CONST))))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n+  \"@\n+  add\\t%2, %0\n+  add\\t%2, %1, %0\"\n+  [(set_attr \"timings\" \"11\")\n+   (set_attr \"length\"   \"6\")]\n+)\n+\n (define_insn \"andsi3\"\n   [(set (match_operand:SI         0 \"register_operand\"  \"=r,r,r,r,r,r,r,r,r\")\n \t(and:SI (match_operand:SI 1 \"register_operand\"  \"%0,0,0,0,0,0,r,r,0\")"}]}