{"sha": "9ca8fefeb720c8a9dec58e9a99042e6727309251", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNhOGZlZmViNzIwYzhhOWRlYzU4ZTlhOTkwNDJlNjcyNzMwOTI1MQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-07-07T22:26:38Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-07-07T22:35:10Z"}, "message": "libstdc++: Whitespace changes to keep lines below 80 columns\n\nAlso remove leading spaces that are followed by tabs.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/limits: Whitespace changes.", "tree": {"sha": "09a1a2100a17e0a4d94643c8f9e89a58db3799e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09a1a2100a17e0a4d94643c8f9e89a58db3799e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ca8fefeb720c8a9dec58e9a99042e6727309251", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ca8fefeb720c8a9dec58e9a99042e6727309251", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ca8fefeb720c8a9dec58e9a99042e6727309251", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ca8fefeb720c8a9dec58e9a99042e6727309251/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9845b7b45621e3833aee47276cb111e43be0e48b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9845b7b45621e3833aee47276cb111e43be0e48b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9845b7b45621e3833aee47276cb111e43be0e48b"}], "stats": {"total": 292, "additions": 148, "deletions": 144}, "files": [{"sha": "bee9b9f6bb67e319425982722dc56c95b7af2eb1", "filename": "libstdc++-v3/include/std/limits", "status": "modified", "additions": 148, "deletions": 144, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca8fefeb720c8a9dec58e9a99042e6727309251/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca8fefeb720c8a9dec58e9a99042e6727309251/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits?ref=9ca8fefeb720c8a9dec58e9a99042e6727309251", "patch": "@@ -1479,152 +1479,152 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if !defined(__STRICT_ANSI__)\n \n-#define __INT_N(TYPE, BITSIZE, EXT, UEXT)\t\t\t\\\n-  template<> \t\t\t\t\t\t\t\t\t\\\n-    struct numeric_limits<TYPE> \t\t\t\t\t\t\\\n-    { \t\t\t\t\t\t\t\t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true; \t\t\\\n- \t\t\t\t\t\t\t\t\t\t\\\n-      static _GLIBCXX_CONSTEXPR TYPE \t\t\t\t\t\t\\\n-\tmin() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_min_b (TYPE, BITSIZE); } \\\n- \t\t\t\t\t\t\t\t\t\t\\\n-      static _GLIBCXX_CONSTEXPR TYPE \t\t\t\t\t\t\\\n-      max() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_max_b (TYPE, BITSIZE); } \t\\\n- \t\t\t\t\t\t\t\t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR int digits \t\t\t\t\t\\\n-       = BITSIZE - 1; \t\t\t\t\t\t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR int digits10 \t\t\t\t\\\n-       = (BITSIZE - 1) * 643L / 2136; \t\t\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR bool is_signed = true; \t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR bool is_integer = true; \t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR bool is_exact = true; \t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR int radix = 2; \t\t\t\t\\\n- \t\t\t\t\t\t\t\t\t\t\\\n-      static _GLIBCXX_CONSTEXPR TYPE \t\t\t\t\t\t\\\n-      epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; } \t\t\t\t\\\n- \t\t\t\t\t\t\t\t\t\t\\\n-      static _GLIBCXX_CONSTEXPR TYPE \t\t\t\t\t\t\\\n-      round_error() _GLIBCXX_USE_NOEXCEPT { return 0; } \t\t\t\\\n- \t\t\t\t\t\t\t\t\t\t\\\n-      EXT\t\t\t\t\t\t\t\t\t\\\n- \t\t\t\t\t\t\t\t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0; \t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0; \t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0; \t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0; \t\t\t\\\n- \t\t\t\t\t\t\t\t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false; \t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false; \t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false; \t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm \t\t\\\n-       = denorm_absent; \t\t\t\t\t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false; \t\t\\\n- \t\t\t\t\t\t\t\t\t\t\\\n-      static _GLIBCXX_CONSTEXPR TYPE \t\t\t\t\t\t\\\n-      infinity() _GLIBCXX_USE_NOEXCEPT \t\t\t\t\t\t\\\n-      { return static_cast<TYPE>(0); } \t\t\t\t\t\t\\\n- \t\t\t\t\t\t\t\t\t\t\\\n-      static _GLIBCXX_CONSTEXPR TYPE \t\t\t\t\t\t\\\n-      quiet_NaN() _GLIBCXX_USE_NOEXCEPT \t\t\t\t\t\\\n-      { return static_cast<TYPE>(0); } \t\t\t\t\t\t\\\n-       \t\t\t\t\t\t\t\t\t\t\\\n-      static _GLIBCXX_CONSTEXPR TYPE \t\t\t\t\t\t\\\n-      signaling_NaN() _GLIBCXX_USE_NOEXCEPT \t\t\t\t\t\\\n-      { return static_cast<TYPE>(0); } \t\t\t\t\t\t\\\n-       \t\t\t\t\t\t\t\t\t\t\\\n-      static _GLIBCXX_CONSTEXPR TYPE \t\t\t\t\t\t\\\n-      denorm_min() _GLIBCXX_USE_NOEXCEPT \t\t\t\t\t\\\n-      { return static_cast<TYPE>(0); } \t\t\t\t\t\t\\\n- \t\t\t\t\t\t\t\t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false; \t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true; \t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR bool is_modulo = false; \t\t\t\\\n- \t\t\t\t\t\t\t\t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR bool traps \t\t\t\t\t\\\n-       = __glibcxx_integral_traps; \t\t\t\t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false; \t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style \t\t\\\n-       = round_toward_zero; \t\t\t\t\t\t\t\\\n-    }; \t\t\t\t\t\t\t\t\t\t\\\n- \t\t\t\t\t\t\t\t\t\t\\\n-  template<> \t\t\t\t\t\t\t\t\t\\\n-    struct numeric_limits<unsigned TYPE> \t\t\t\t\t\\\n-    { \t\t\t\t\t\t\t\t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true; \t\t\\\n- \t\t\t\t\t\t\t\t\t\t\\\n-      static _GLIBCXX_CONSTEXPR unsigned TYPE \t\t\t\t\t\\\n-      min() _GLIBCXX_USE_NOEXCEPT { return 0; } \t\t\t\t\\\n- \t\t\t\t\t\t\t\t\t\t\\\n-      static _GLIBCXX_CONSTEXPR unsigned TYPE \t\t\t\t\t\\\n-      max() _GLIBCXX_USE_NOEXCEPT\t\t\t\t\t\t\\\n-      { return  __glibcxx_max_b (unsigned TYPE, BITSIZE); }\t\t\t\\\n- \t\t\t\t\t\t\t\t\t\t\\\n-      UEXT\t\t\t\t\t\t\t\t\t\\\n- \t\t\t\t\t\t\t\t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR int digits \t\t\t\t\t\\\n-       = BITSIZE; \t\t\t\t\t\t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR int digits10 \t\t\t\t\\\n-       = BITSIZE * 643L / 2136; \t\t\t\t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR bool is_signed = false; \t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR bool is_integer = true; \t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR bool is_exact = true; \t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR int radix = 2; \t\t\t\t\\\n- \t\t\t\t\t\t\t\t\t\t\\\n-      static _GLIBCXX_CONSTEXPR unsigned TYPE \t\t\t\t\t\\\n-      epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; } \t\t\t\t\\\n- \t\t\t\t\t\t\t\t\t\t\\\n-      static _GLIBCXX_CONSTEXPR unsigned TYPE \t\t\t\t\t\\\n-      round_error() _GLIBCXX_USE_NOEXCEPT { return 0; } \t\t\t\\\n- \t\t\t\t\t\t\t\t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0; \t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0; \t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0; \t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0; \t\t\t\\\n- \t\t\t\t\t\t\t\t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false; \t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false; \t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false; \t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm \t\t\\\n-       = denorm_absent; \t\t\t\t\t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false; \t\t\\\n- \t\t\t\t\t\t\t\t\t\t\\\n-      static _GLIBCXX_CONSTEXPR unsigned TYPE \t\t\t\t\t\\\n-      infinity() _GLIBCXX_USE_NOEXCEPT \t\t\t\t\t\t\\\n-      { return static_cast<unsigned TYPE>(0); } \t\t\t\t\\\n- \t\t\t\t\t\t\t\t\t\t\\\n-      static _GLIBCXX_CONSTEXPR unsigned TYPE \t\t\t\t\t\\\n-      quiet_NaN() _GLIBCXX_USE_NOEXCEPT \t\t\t\t\t\\\n-      { return static_cast<unsigned TYPE>(0); } \t\t\t\t\\\n- \t\t\t\t\t\t\t\t\t\t\\\n-      static _GLIBCXX_CONSTEXPR unsigned TYPE \t\t\t\t\t\\\n-      signaling_NaN() _GLIBCXX_USE_NOEXCEPT \t\t\t\t\t\\\n-      { return static_cast<unsigned TYPE>(0); } \t\t\t\t\\\n- \t\t\t\t\t\t\t\t\t\t\\\n-      static _GLIBCXX_CONSTEXPR unsigned TYPE \t\t\t\t\t\\\n-      denorm_min() _GLIBCXX_USE_NOEXCEPT \t\t\t\t\t\\\n-      { return static_cast<unsigned TYPE>(0); } \t\t\t\t\\\n- \t\t\t\t\t\t\t\t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false; \t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true; \t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR bool is_modulo = true; \t\t\t\\\n- \t\t\t\t\t\t\t\t\t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps; \t\\\n-      static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false; \t\t\\\n-      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style \t\t\\\n-       = round_toward_zero; \t\t\t\t\t\t\t\\\n+#define __INT_N(TYPE, BITSIZE, EXT, UEXT)\t\t\t\t\\\n+  template<>\t\t\t\t\t\t\t\t\\\n+    struct numeric_limits<TYPE>\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      static _GLIBCXX_CONSTEXPR TYPE\t\t\t\t\t\\\n+      min() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_min_b (TYPE, BITSIZE); } \\\n+\t\t\t\t\t\t\t\t\t\\\n+      static _GLIBCXX_CONSTEXPR TYPE\t\t\t\t\t\\\n+      max() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_max_b (TYPE, BITSIZE); } \\\n+\t\t\t\t\t\t\t\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR int digits\t\t\t\t\\\n+\t= BITSIZE - 1;\t\t\t\t\t\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR int digits10\t\t\t\\\n+\t= (BITSIZE - 1) * 643L / 2136;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR bool is_signed = true;\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR int radix = 2;\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      static _GLIBCXX_CONSTEXPR TYPE\t\t\t\t\t\\\n+      epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      static _GLIBCXX_CONSTEXPR TYPE \t\t\t\t\t\\\n+      round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      EXT\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;\t\\\n+      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm\t\\\n+\t= denorm_absent;\t\t\t\t\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      static _GLIBCXX_CONSTEXPR TYPE\t\t\t\t\t\\\n+      infinity() _GLIBCXX_USE_NOEXCEPT\t\t\t\t\t\\\n+      { return static_cast<TYPE>(0); }\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      static _GLIBCXX_CONSTEXPR TYPE\t\t\t\t\t\\\n+      quiet_NaN() _GLIBCXX_USE_NOEXCEPT\t\t\t\t\t\\\n+      { return static_cast<TYPE>(0); }\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      static _GLIBCXX_CONSTEXPR TYPE\t\t\t\t\t\\\n+      signaling_NaN() _GLIBCXX_USE_NOEXCEPT\t\t\t\t\\\n+      { return static_cast<TYPE>(0); }\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      static _GLIBCXX_CONSTEXPR TYPE\t\t\t\t\t\\\n+      denorm_min() _GLIBCXX_USE_NOEXCEPT\t\t\t\t\\\n+      { return static_cast<TYPE>(0); }\t\t\t\t\t\\\n+ \t\t\t\t\t\t\t\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false; \t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true; \t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR bool is_modulo = false; \t\t\\\n+ \t\t\t\t\t\t\t\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR bool traps \t\t\t\t\\\n+\t= __glibcxx_integral_traps; \t\t\t\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false; \t\\\n+      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style \t\\\n+\t= round_toward_zero; \t\t\t\t\t\t\\\n+    }; \t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  template<>\t\t\t\t\t\t\t\t\\\n+    struct numeric_limits<unsigned TYPE>\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      static _GLIBCXX_CONSTEXPR unsigned TYPE\t\t\t\t\\\n+      min() _GLIBCXX_USE_NOEXCEPT { return 0; }\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      static _GLIBCXX_CONSTEXPR unsigned TYPE\t\t\t\t\\\n+      max() _GLIBCXX_USE_NOEXCEPT\t\t\t\t\t\\\n+      { return  __glibcxx_max_b (unsigned TYPE, BITSIZE); }\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      UEXT\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR int digits\t\t\t\t\\\n+\t= BITSIZE;\t\t\t\t\t\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR int digits10\t\t\t\\\n+\t= BITSIZE * 643L / 2136; \t\t\t\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR bool is_signed = false;\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR int radix = 2;\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      static _GLIBCXX_CONSTEXPR unsigned TYPE \t\t\t\t\\\n+      epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      static _GLIBCXX_CONSTEXPR unsigned TYPE\t\t\t\t\\\n+      round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0; \t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;\t\\\n+      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm\t\\\n+       = denorm_absent; \t\t\t\t\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      static _GLIBCXX_CONSTEXPR unsigned TYPE \t\t\t\t\\\n+      infinity() _GLIBCXX_USE_NOEXCEPT \t\t\t\t\t\\\n+      { return static_cast<unsigned TYPE>(0); }\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      static _GLIBCXX_CONSTEXPR unsigned TYPE\t\t\t\t\\\n+      quiet_NaN() _GLIBCXX_USE_NOEXCEPT \t\t\t\t\\\n+      { return static_cast<unsigned TYPE>(0); }\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      static _GLIBCXX_CONSTEXPR unsigned TYPE\t\t\t\t\\\n+      signaling_NaN() _GLIBCXX_USE_NOEXCEPT\t\t\t\t\\\n+      { return static_cast<unsigned TYPE>(0); }\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      static _GLIBCXX_CONSTEXPR unsigned TYPE \t\t\t\t\\\n+      denorm_min() _GLIBCXX_USE_NOEXCEPT\t\t\t\t\\\n+      { return static_cast<unsigned TYPE>(0); }\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR bool is_modulo = true;\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps; \\\n+      static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;\t\\\n+      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style\t\\\n+\t= round_toward_zero;\t\t\t\t\t\t\\\n     };\n \n #if __cplusplus >= 201103L\n \n-#define __INT_N_201103(TYPE)\t\t\t\t\t\t\t\\\n-      static constexpr TYPE \t\t\t\t\t\t\t\\\n-      lowest() noexcept { return min(); }\t\t\t\t\t\\\n+#define __INT_N_201103(TYPE)\t\t\t\t\t\t\\\n+      static constexpr TYPE \t\t\t\t\t\t\\\n+      lowest() noexcept { return min(); }\t\t\t\t\\\n       static constexpr int max_digits10 = 0;\n \n-#define __INT_N_U201103(TYPE)\t\t\t\t\t\t\t\\\n-      static constexpr unsigned TYPE \t\t\t\t\t\t\\\n-      lowest() noexcept { return min(); }\t\t\t\t\t\\\n+#define __INT_N_U201103(TYPE)\t\t\t\t\t\t\\\n+      static constexpr unsigned TYPE  \t\t\t\t\t\\\n+      lowest() noexcept { return min(); }\t\t\t\t\\\n       static constexpr int max_digits10 = 0;\n \n #else\n@@ -1634,19 +1634,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #ifdef __GLIBCXX_TYPE_INT_N_0\n   __INT_N(__GLIBCXX_TYPE_INT_N_0, __GLIBCXX_BITSIZE_INT_N_0,\n-\t  __INT_N_201103 (__GLIBCXX_TYPE_INT_N_0), __INT_N_U201103 (__GLIBCXX_TYPE_INT_N_0))\n+\t  __INT_N_201103 (__GLIBCXX_TYPE_INT_N_0),\n+\t  __INT_N_U201103 (__GLIBCXX_TYPE_INT_N_0))\n #endif\n #ifdef __GLIBCXX_TYPE_INT_N_1\n   __INT_N (__GLIBCXX_TYPE_INT_N_1, __GLIBCXX_BITSIZE_INT_N_1,\n-\t  __INT_N_201103 (__GLIBCXX_TYPE_INT_N_1), __INT_N_U201103 (__GLIBCXX_TYPE_INT_N_1))\n+\t  __INT_N_201103 (__GLIBCXX_TYPE_INT_N_1),\n+\t  __INT_N_U201103 (__GLIBCXX_TYPE_INT_N_1))\n #endif\n #ifdef __GLIBCXX_TYPE_INT_N_2\n   __INT_N (__GLIBCXX_TYPE_INT_N_2, __GLIBCXX_BITSIZE_INT_N_2,\n-\t  __INT_N_201103 (__GLIBCXX_TYPE_INT_N_2), __INT_N_U201103 (__GLIBCXX_TYPE_INT_N_2))\n+\t  __INT_N_201103 (__GLIBCXX_TYPE_INT_N_2),\n+\t  __INT_N_U201103 (__GLIBCXX_TYPE_INT_N_2))\n #endif\n #ifdef __GLIBCXX_TYPE_INT_N_3\n   __INT_N (__GLIBCXX_TYPE_INT_N_3, __GLIBCXX_BITSIZE_INT_N_3,\n-\t  __INT_N_201103 (__GLIBCXX_TYPE_INT_N_3), __INT_N_U201103 (__GLIBCXX_TYPE_INT_N_3))\n+\t  __INT_N_201103 (__GLIBCXX_TYPE_INT_N_3),\n+\t  __INT_N_U201103 (__GLIBCXX_TYPE_INT_N_3))\n #endif\n \n #undef __INT_N"}]}