{"sha": "01d2a7d70396ca672c10a4ed68d1739b42dbc1ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFkMmE3ZDcwMzk2Y2E2NzJjMTBhNGVkNjhkMTczOWI0MmRiYzFhZQ==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2008-03-28T22:57:25Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2008-03-28T22:57:25Z"}, "message": "re PR fortran/34714 (ICE-on-invalid in gfc_conv_descriptor_dtype)\n\ngcc/fortran:\n2008-03-28  Daniel Franke  <franke.daniel@gmail.com>\n            Paul Richard Thomas <paul.richard.thomas@gmail.com>\n\n\tPR fortran/34714\n        * primary.c (match_variable): Improved matching of function\n        result variables.\n        * resolve.c (resolve_allocate_deallocate): Removed checks if\n        the actual argument for STAT is a variable.\n\ngcc/testsuite:\n2008-03-28  Daniel Franke  <franke.daniel@gmail.com>\n\n        PR fortran/34714\n        * gfortran.dg/alloc_alloc_expr_3.f90: New test.\n        * gfortran.dg/allocate_stat.f90: Adjusted error-match text.\n        * gfortran.dg/func_assign.f90: Likewise.\n        * gfortran.dg/implicit_11.f90: Likewise.\n        * gfortran.dg/proc_assign_1.f90: Likewise.\n        * gfortran.dg/proc_assign_2.f90: Likewise.\n        * gfortran.dg/procedure_lvalue.f90: Likewise.\n\t\t\t\t\t\t\t\t\n\n\nCo-Authored-By: Paul Richard Thomas <paul.richard.thomas@gmail.com>\n\nFrom-SVN: r133701", "tree": {"sha": "c75023c35ce4493e5451b72fe5cb99c3b2cce45e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c75023c35ce4493e5451b72fe5cb99c3b2cce45e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01d2a7d70396ca672c10a4ed68d1739b42dbc1ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01d2a7d70396ca672c10a4ed68d1739b42dbc1ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01d2a7d70396ca672c10a4ed68d1739b42dbc1ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01d2a7d70396ca672c10a4ed68d1739b42dbc1ae/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "716aaa593ae2583e36d545fef90c939630152d67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/716aaa593ae2583e36d545fef90c939630152d67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/716aaa593ae2583e36d545fef90c939630152d67"}], "stats": {"total": 129, "additions": 72, "deletions": 57}, "files": [{"sha": "06589954ead61fb0877a9d80b4c8b99954625d4b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01d2a7d70396ca672c10a4ed68d1739b42dbc1ae/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01d2a7d70396ca672c10a4ed68d1739b42dbc1ae/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=01d2a7d70396ca672c10a4ed68d1739b42dbc1ae", "patch": "@@ -1,3 +1,12 @@\n+2008-03-28  Daniel Franke  <franke.daniel@gmail.com>\n+\t    Paul Richard Thomas <paul.richard.thomas@gmail.com>\n+\n+\tPR fortran/34714\n+\t* primary.c (match_variable): Improved matching of function \n+\tresult variables.\n+\t* resolve.c (resolve_allocate_deallocate): Removed checks if\n+\tthe actual argument for STAT is a variable.\n+\n 2008-03-28  Tobias Burnus  <burnus@net-b.de>\n \n \t* symbol.c (gfc_get_default_type): Fix error message; option"}, {"sha": "8f85873ce0316d5d471397013c697f9f69dd8f6d", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01d2a7d70396ca672c10a4ed68d1739b42dbc1ae/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01d2a7d70396ca672c10a4ed68d1739b42dbc1ae/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=01d2a7d70396ca672c10a4ed68d1739b42dbc1ae", "patch": "@@ -2561,8 +2561,18 @@ match_variable (gfc_expr **result, int equiv_flag, int host_flag)\n       break;\n \n     case FL_PROCEDURE:\n-      /* Check for a nonrecursive function result */\n-      if (sym->attr.function && sym->result == sym && !sym->attr.external)\n+      /* Check for a nonrecursive function result variable.  */\n+      if (sym->attr.function\n+          && !sym->attr.external\n+          && sym->result == sym\n+          && ((sym == gfc_current_ns->proc_name\n+               && sym == gfc_current_ns->proc_name->result)\n+              || (gfc_current_ns->parent\n+                  && sym == gfc_current_ns->parent->proc_name->result)\n+              || (sym->attr.entry\n+                  && sym->ns == gfc_current_ns)\n+              || (sym->attr.entry\n+                  && sym->ns == gfc_current_ns->parent)))\n \t{\n \t  /* If a function result is a derived type, then the derived\n \t     type may still have to be resolved.  */"}, {"sha": "41b1addbab334b838c3d952b6fc78b6db963fe4e", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01d2a7d70396ca672c10a4ed68d1739b42dbc1ae/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01d2a7d70396ca672c10a4ed68d1739b42dbc1ae/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=01d2a7d70396ca672c10a4ed68d1739b42dbc1ae", "patch": "@@ -4878,7 +4878,6 @@ resolve_allocate_deallocate (gfc_code *code, const char *fcn)\n {\n   gfc_symbol *s = NULL;\n   gfc_alloc *a;\n-  bool is_variable;\n \n   if (code->expr)\n     s = code->expr->symtree->n.sym;\n@@ -4892,45 +4891,6 @@ resolve_allocate_deallocate (gfc_code *code, const char *fcn)\n       if (gfc_pure (NULL) && gfc_impure_variable (s))\n \tgfc_error (\"Illegal STAT variable in %s statement at %C \"\n \t\t   \"for a PURE procedure\", fcn);\n-\n-      is_variable = false;\n-      if (s->attr.flavor == FL_VARIABLE)\n-\tis_variable = true;\n-      else if (s->attr.function && s->result == s\n-\t\t && (gfc_current_ns->proc_name == s\n-\t\t\t||\n-\t\t    (gfc_current_ns->parent\n-\t\t       && gfc_current_ns->parent->proc_name == s)))\n-\tis_variable = true;\n-      else if (gfc_current_ns->entries && s->result == s)\n-\t{\n-\t  gfc_entry_list *el;\n-\t  for (el = gfc_current_ns->entries; el; el = el->next)\n-\t    if (el->sym == s)\n-\t      {\n-\t\tis_variable = true;\n-\t      }\n-\t}\n-      else if (gfc_current_ns->parent && gfc_current_ns->parent->entries\n-\t         && s->result == s)\n-\t{\n-\t  gfc_entry_list *el;\n-\t  for (el = gfc_current_ns->parent->entries; el; el = el->next)\n-\t    if (el->sym == s)\n-\t      {\n-\t\tis_variable = true;\n-\t      }\n-\t}\n-\n-      if (s->attr.flavor == FL_UNKNOWN\n-\t    && gfc_add_flavor (&s->attr, FL_VARIABLE,\n-\t\t\t       s->name, NULL) == SUCCESS)\n-\tis_variable = true;\n-\n-      if (!is_variable)\n-\tgfc_error (\"STAT tag in %s statement at %L must be \"\n-\t\t   \"a variable\", fcn, &code->expr->where);\n-\n     }\n \n   if (s && code->expr->ts.type != BT_INTEGER)"}, {"sha": "468a4dbefd1d7feded19bfe6110b2e35c880de6b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01d2a7d70396ca672c10a4ed68d1739b42dbc1ae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01d2a7d70396ca672c10a4ed68d1739b42dbc1ae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=01d2a7d70396ca672c10a4ed68d1739b42dbc1ae", "patch": "@@ -1,3 +1,14 @@\n+2008-03-28  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/34714\n+\t* gfortran.dg/alloc_alloc_expr_3.f90: New test.\n+\t* gfortran.dg/allocate_stat.f90: Adjusted error-match text.\n+\t* gfortran.dg/func_assign.f90: Likewise.\n+\t* gfortran.dg/implicit_11.f90: Likewise.\n+\t* gfortran.dg/proc_assign_1.f90: Likewise.\n+\t* gfortran.dg/proc_assign_2.f90: Likewise.\n+\t* gfortran.dg/procedure_lvalue.f90: Likewise.\n+\n 2008-03-28  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/35699"}, {"sha": "13b2230c0ab7800e5247042748889d2c693f0253", "filename": "gcc/testsuite/gfortran.dg/alloc_alloc_expr_3.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01d2a7d70396ca672c10a4ed68d1739b42dbc1ae/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_alloc_expr_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01d2a7d70396ca672c10a4ed68d1739b42dbc1ae/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_alloc_expr_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_alloc_expr_3.f90?ref=01d2a7d70396ca672c10a4ed68d1739b42dbc1ae", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do compile }\n+!\n+! PR fortran/34714 - ICE on invalid\n+! Testcase contributed by Martin Reinecke <martin AT mpa-garching DOT mpg DOT de>\n+!\n+\n+module foo\n+  type bar\n+    logical, pointer, dimension(:) :: baz\n+  end type\n+contains\n+\n+function func1()\n+  type(bar) func1\n+  allocate(func1%baz(1))\n+end function\n+\n+function func2()\n+  type(bar) func2\n+  allocate(func1%baz(1))      ! { dg-error \"is not a variable\" }\n+end function\n+\n+end module foo\n+\n+! { dg-final { cleanup-modules \"foo\" } }"}, {"sha": "7f9eaf58d6d0dffe78ef56dfb949fa9f3f655a80", "filename": "gcc/testsuite/gfortran.dg/allocate_stat.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01d2a7d70396ca672c10a4ed68d1739b42dbc1ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_stat.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01d2a7d70396ca672c10a4ed68d1739b42dbc1ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_stat.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_stat.f90?ref=01d2a7d70396ca672c10a4ed68d1739b42dbc1ae", "patch": "@@ -51,7 +51,7 @@ integer function func2()\n   end interface\n   real, pointer :: gain \n   integer, parameter :: res = 2\n-  allocate (gain,STAT=func2) ! { dg-error \"STAT tag in ALLOCATE statement at .1. must be a variable\" }\n+  allocate (gain,STAT=func2) ! { dg-error \"is not a variable\" }\n   deallocate(gain)\n end subroutine sub\n \n@@ -68,9 +68,9 @@ function one()\n  end function one\n  subroutine sub()\n    integer, pointer :: p\n-   allocate(p, stat=one) ! { dg-error \"STAT tag in ALLOCATE statement at .1. must be a variable\" }\n+   allocate(p, stat=one) ! { dg-error \"is not a variable\" }\n    if(associated(p)) deallocate(p)\n-   allocate(p, stat=two) ! { dg-error \"STAT tag in ALLOCATE statement at .1. must be a variable\" }\n+   allocate(p, stat=two) ! { dg-error \"is not a variable\" }\n    if(associated(p)) deallocate(p)\n  end subroutine sub\n end module test"}, {"sha": "7ecf32941ca737eca0c58988bc3438fac2f9d7bf", "filename": "gcc/testsuite/gfortran.dg/func_assign.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01d2a7d70396ca672c10a4ed68d1739b42dbc1ae/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_assign.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01d2a7d70396ca672c10a4ed68d1739b42dbc1ae/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_assign.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_assign.f90?ref=01d2a7d70396ca672c10a4ed68d1739b42dbc1ae", "patch": "@@ -25,8 +25,8 @@ end subroutine sub\n    end interface\n    sub = 'a'  ! { dg-error \"is not a variable\" }\n    fun = 4.4  ! { dg-error \"is not a variable\" }\n-   funget = 4 ! { dg-error \"is not a VALUE\" }\n-   bar = 5    ! { dg-error \"is not a VALUE\" }\n+   funget = 4 ! { dg-error \"is not a variable\" }\n+   bar = 5    ! { dg-error \"is not a variable\" }\n   end subroutine a\n end module mod\n "}, {"sha": "d33acd10a41f66aad470c06843a3c66ed177a2a7", "filename": "gcc/testsuite/gfortran.dg/implicit_11.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01d2a7d70396ca672c10a4ed68d1739b42dbc1ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01d2a7d70396ca672c10a4ed68d1739b42dbc1ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_11.f90?ref=01d2a7d70396ca672c10a4ed68d1739b42dbc1ae", "patch": "@@ -31,7 +31,7 @@ end function istat2\n      SUBROUTINE AD0001\n        REAL RLA1(:)\n        ALLOCATABLE RLA1\n-       ALLOCATE (RLA1(NF10), STAT = ISTAT2) ! { dg-error \"must be a variable\" }\n+       ALLOCATE (RLA1(NF10), STAT = ISTAT2) ! { dg-error \"is not a variable\" }\n      END SUBROUTINE\n      END MODULE tests2\n "}, {"sha": "919089acb425443683c18ce6b67a6a9ae1836886", "filename": "gcc/testsuite/gfortran.dg/proc_assign_1.f90", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01d2a7d70396ca672c10a4ed68d1739b42dbc1ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_assign_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01d2a7d70396ca672c10a4ed68d1739b42dbc1ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_assign_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_assign_1.f90?ref=01d2a7d70396ca672c10a4ed68d1739b42dbc1ae", "patch": "@@ -30,11 +30,11 @@ subroutine foobar ()\n         end subroutine foobar\r\n     end function foo\r\n     subroutine bar()         ! This was the original bug.\r\n-        foo = 10             ! { dg-error \"is not a VALUE\" }\r\n+        foo = 10             ! { dg-error \"is not a variable\" }\r\n     end subroutine bar\r\n     integer function oh_no ()\r\n         oh_no = 1\r\n-        foo = 5              ! { dg-error \"is not a VALUE\" }\r\n+        foo = 5              ! { dg-error \"is not a variable\" }\r\n     end function oh_no\r\n end module simple\r\n \r\n@@ -59,16 +59,16 @@ end function ext2\n     stmt_fcn (w) = sin (w)     \r\n     call x (y ())\r\n     x = 10                   ! { dg-error \"is not a variable\" }\r\n-    y = 20                   ! { dg-error \"is not a VALUE\" }\r\n-    foo_er = 8               ! { dg-error \"is not a VALUE\" }\r\n-    ext1 = 99                ! { dg-error \"is not a VALUE\" }\r\n-    ext2 = 99                ! { dg-error \"is not a VALUE\" }\r\n+    y = 20                   ! { dg-error \"is not a variable\" }\r\n+    foo_er = 8               ! { dg-error \"is not a variable\" }\r\n+    ext1 = 99                ! { dg-error \"is not a variable\" }\r\n+    ext2 = 99                ! { dg-error \"is not a variable\" }\r\n     stmt_fcn = 1.0           ! { dg-error \"is not a variable\" }\r\n     w = stmt_fcn (1.0)\r\n contains\r\n     subroutine x (i)\r\n         integer i\r\n-        y = i                ! { dg-error \"is not a VALUE\" }\r\n+        y = i                ! { dg-error \"is not a variable\" }\r\n     end subroutine x\r\n     function y ()\r\n         integer y\r"}, {"sha": "8f313c58fa31908757bdf663d2e68680740a81e0", "filename": "gcc/testsuite/gfortran.dg/proc_assign_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01d2a7d70396ca672c10a4ed68d1739b42dbc1ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_assign_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01d2a7d70396ca672c10a4ed68d1739b42dbc1ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_assign_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_assign_2.f90?ref=01d2a7d70396ca672c10a4ed68d1739b42dbc1ae", "patch": "@@ -14,7 +14,7 @@ LOGICAL FUNCTION f1()\n     END FUNCTION\n \n     LOGICAL FUNCTION f2()\n-      f1 = .FALSE.  ! { dg-error \"not a VALUE\" }\n+      f1 = .FALSE.  ! { dg-error \"is not a variable\" }\n     END FUNCTION\n   END FUNCTION\n END MODULE"}, {"sha": "741dc8c34a3fa36556c124aa7bba4422c42e5666", "filename": "gcc/testsuite/gfortran.dg/procedure_lvalue.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01d2a7d70396ca672c10a4ed68d1739b42dbc1ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fprocedure_lvalue.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01d2a7d70396ca672c10a4ed68d1739b42dbc1ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fprocedure_lvalue.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fprocedure_lvalue.f90?ref=01d2a7d70396ca672c10a4ed68d1739b42dbc1ae", "patch": "@@ -14,7 +14,7 @@ end module t\n \n subroutine r\n   use t\n-  b = 1.       ! { dg-error \"is not a VALUE\" }\n+  b = 1.       ! { dg-error \"is not a variable\" }\n   y = a(1.)\n end subroutine r\n "}]}