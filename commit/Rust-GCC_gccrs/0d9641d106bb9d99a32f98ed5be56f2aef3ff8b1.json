{"sha": "0d9641d106bb9d99a32f98ed5be56f2aef3ff8b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ5NjQxZDEwNmJiOWQ5OWEzMmY5OGVkNWJlNTZmMmFlZjNmZjhiMQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-04-17T20:49:59Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-04-17T20:49:59Z"}, "message": "(subst_prev_insn): New variable.\n\n(try_combine): Set it.\n(get_last_value): Use it.\n\nFrom-SVN: r9396", "tree": {"sha": "746204aae31b807d4d94e95700a31f8e5fb47d69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/746204aae31b807d4d94e95700a31f8e5fb47d69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d9641d106bb9d99a32f98ed5be56f2aef3ff8b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d9641d106bb9d99a32f98ed5be56f2aef3ff8b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d9641d106bb9d99a32f98ed5be56f2aef3ff8b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d9641d106bb9d99a32f98ed5be56f2aef3ff8b1/comments", "author": null, "committer": null, "parents": [{"sha": "4ffeab028f6d04c6c34723c18c0441566363c2a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ffeab028f6d04c6c34723c18c0441566363c2a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ffeab028f6d04c6c34723c18c0441566363c2a2"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "a95284a1b198b956b80623511d2ecb5ef4602751", "filename": "gcc/combine.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d9641d106bb9d99a32f98ed5be56f2aef3ff8b1/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d9641d106bb9d99a32f98ed5be56f2aef3ff8b1/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=0d9641d106bb9d99a32f98ed5be56f2aef3ff8b1", "patch": "@@ -173,6 +173,11 @@ static int last_call_cuid;\n \n static rtx subst_insn;\n \n+/* This is an insn that belongs before subst_insn, but is not currently\n+   on the insn chain.  */\n+\n+static rtx subst_prev_insn;\n+\n /* This is the lowest CUID that `subst' is currently dealing with.\n    get_last_value will not return a value if the register was set at or\n    after this CUID.  If not for this mechanism, we could get confused if\n@@ -1358,8 +1363,9 @@ try_combine (i3, i2, i1)\n \t     never appear in the insn stream so giving it the same INSN_UID\n \t     as I2 will not cause a problem.  */\n \n-\t  i1 = gen_rtx (INSN, VOIDmode, INSN_UID (i2), 0, i2,\n-\t\t\tXVECEXP (PATTERN (i2), 0, 1), -1, 0, 0);\n+\t  subst_prev_insn = i1\n+\t    = gen_rtx (INSN, VOIDmode, INSN_UID (i2), 0, i2,\n+\t\t       XVECEXP (PATTERN (i2), 0, 1), -1, 0, 0);\n \n \t  SUBST (PATTERN (i2), XVECEXP (PATTERN (i2), 0, 0));\n \t  SUBST (XEXP (SET_SRC (PATTERN (i2)), 0),\n@@ -9943,9 +9949,12 @@ get_last_value (x)\n   /* If the value was set in a later insn than the ones we are processing,\n      we can't use it even if the register was only set once, but make a quick\n      check to see if the previous insn set it to something.  This is commonly\n-     the case when the same pseudo is used by repeated insns.  */\n+     the case when the same pseudo is used by repeated insns.\n+\n+     This does not work if there exists an instruction which is temporarily\n+     not on the insn chain.  */\n \n-  if (INSN_CUID (reg_last_set[regno]) >= subst_low_cuid)\n+  if (INSN_CUID (reg_last_set[regno]) >= subst_low_cuid && ! subst_prev_insn)\n     {\n       rtx insn, set;\n "}]}