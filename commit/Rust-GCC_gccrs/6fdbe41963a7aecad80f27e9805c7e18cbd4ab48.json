{"sha": "6fdbe41963a7aecad80f27e9805c7e18cbd4ab48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZkYmU0MTk2M2E3YWVjYWQ4MGYyN2U5ODA1YzdlMThjYmQ0YWI0OA==", "commit": {"author": {"name": "Matt Turner", "email": "mattst88@gmail.com", "date": "2019-09-26T10:52:42Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2019-09-26T10:52:42Z"}, "message": "driver: Also prune joined switches with negation\n\nWhen -march=native is passed to host_detect_local_cpu to the backend,\nit overrides all command lines after it.  That means\n\n$ gcc -march=native -march=armv8-a\n\nis treated as\n\n$ gcc -march=armv8-a -march=native\n\nPrune joined switches with Negative and RejectNegative to allow\n-march=armv8-a to override previous -march=native on command-line.\n\nThis is the same fix as was applied for i386 in SVN revision 269164 but for\naarch64 and arm.\n\n2019-09-26  Matt Turner  <mattst88@gmail.com>\n\n\tPR driver/69471\n\t* config/aarch64/aarch64.opt (march=): Add Negative(march=).\n\t(mtune=): Add Negative(mtune=).\n\t(mcpu=): Add Negative(mcpu=).\n\t* config/arm/arm.opt: Likewise.\n\nFrom-SVN: r276148", "tree": {"sha": "f1555196e11cd3694bc1f495ac51ceb461758f69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1555196e11cd3694bc1f495ac51ceb461758f69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6fdbe41963a7aecad80f27e9805c7e18cbd4ab48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fdbe41963a7aecad80f27e9805c7e18cbd4ab48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fdbe41963a7aecad80f27e9805c7e18cbd4ab48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fdbe41963a7aecad80f27e9805c7e18cbd4ab48/comments", "author": {"login": "mattst88", "id": 590254, "node_id": "MDQ6VXNlcjU5MDI1NA==", "avatar_url": "https://avatars.githubusercontent.com/u/590254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattst88", "html_url": "https://github.com/mattst88", "followers_url": "https://api.github.com/users/mattst88/followers", "following_url": "https://api.github.com/users/mattst88/following{/other_user}", "gists_url": "https://api.github.com/users/mattst88/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattst88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattst88/subscriptions", "organizations_url": "https://api.github.com/users/mattst88/orgs", "repos_url": "https://api.github.com/users/mattst88/repos", "events_url": "https://api.github.com/users/mattst88/events{/privacy}", "received_events_url": "https://api.github.com/users/mattst88/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2b5b5e24149160e38ff3cd98c6a911f0eba4acc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b5b5e24149160e38ff3cd98c6a911f0eba4acc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b5b5e24149160e38ff3cd98c6a911f0eba4acc5"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "98fa0ffe56bb990b90857949e0553e6017ee2245", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fdbe41963a7aecad80f27e9805c7e18cbd4ab48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fdbe41963a7aecad80f27e9805c7e18cbd4ab48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6fdbe41963a7aecad80f27e9805c7e18cbd4ab48", "patch": "@@ -1,3 +1,11 @@\n+2019-09-26  Matt Turner  <mattst88@gmail.com>\n+\n+\tPR driver/69471\n+\t* config/aarch64/aarch64.opt (march=): Add Negative(march=).\n+\t(mtune=): Add Negative(mtune=).\n+\t(mcpu=): Add Negative(mcpu=).\n+\t* config/arm/arm.opt: Likewise.\n+\n 2019-09-26  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/arm.md (arm_<simd32_op>): New define_insn."}, {"sha": "fc43428b32a9a685f4471ba4f451b089ef2a31ed", "filename": "gcc/config/aarch64/aarch64.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fdbe41963a7aecad80f27e9805c7e18cbd4ab48/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fdbe41963a7aecad80f27e9805c7e18cbd4ab48/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.opt?ref=6fdbe41963a7aecad80f27e9805c7e18cbd4ab48", "patch": "@@ -119,15 +119,15 @@ EnumValue\n Enum(aarch64_tls_size) String(48) Value(48)\n \n march=\n-Target RejectNegative ToLower Joined Var(aarch64_arch_string)\n+Target RejectNegative Negative(march=) ToLower Joined Var(aarch64_arch_string)\n Use features of architecture ARCH.\n \n mcpu=\n-Target RejectNegative ToLower Joined Var(aarch64_cpu_string)\n+Target RejectNegative Negative(mcpu=) ToLower Joined Var(aarch64_cpu_string)\n Use features of and optimize for CPU.\n \n mtune=\n-Target RejectNegative ToLower Joined Var(aarch64_tune_string)\n+Target RejectNegative Negative(mtune=) ToLower Joined Var(aarch64_tune_string)\n Optimize for CPU.\n \n mabi="}, {"sha": "76c10ab62a2533ab5664d2a7530cf35f19f7b64c", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fdbe41963a7aecad80f27e9805c7e18cbd4ab48/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fdbe41963a7aecad80f27e9805c7e18cbd4ab48/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=6fdbe41963a7aecad80f27e9805c7e18cbd4ab48", "patch": "@@ -82,7 +82,7 @@ mapcs-stack-check\n Target Report Mask(APCS_STACK) Undocumented\n \n march=\n-Target RejectNegative ToLower Joined Var(arm_arch_string)\n+Target RejectNegative Negative(march=) ToLower Joined Var(arm_arch_string)\n Specify the name of the target architecture.\n \n ; Other arm_arch values are loaded from arm-tables.opt\n@@ -107,7 +107,7 @@ Target Report Mask(CALLER_INTERWORKING)\n Thumb: Assume function pointers may go to non-Thumb aware code.\n \n mcpu=\n-Target RejectNegative ToLower Joined Var(arm_cpu_string)\n+Target RejectNegative Negative(mcpu=) ToLower Joined Var(arm_cpu_string)\n Specify the name of the target CPU.\n \n mfloat-abi=\n@@ -232,7 +232,7 @@ Target Report Mask(TPCS_LEAF_FRAME)\n Thumb: Generate (leaf) stack frames even if not needed.\n \n mtune=\n-Target RejectNegative ToLower Joined Var(arm_tune_string)\n+Target RejectNegative Negative(mtune=) ToLower Joined Var(arm_tune_string)\n Tune code for the given processor.\n \n mprint-tune-info"}]}