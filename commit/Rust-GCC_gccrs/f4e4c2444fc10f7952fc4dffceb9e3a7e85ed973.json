{"sha": "f4e4c2444fc10f7952fc4dffceb9e3a7e85ed973", "node_id": "C_kwDOANBUbNoAKGY0ZTRjMjQ0NGZjMTBmNzk1MmZjNGRmZmNlYjllM2E3ZTg1ZWQ5NzM", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-07-25T11:30:27Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-07-27T13:31:42Z"}, "message": "unsafe: Forbid use of certain static values outside of unsafe contexts\n\nUsing a mutable static or an extern static requires an unsafe function\nor block", "tree": {"sha": "0d837389aee6635dc75a7b1a78de2a38a268e958", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d837389aee6635dc75a7b1a78de2a38a268e958"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4e4c2444fc10f7952fc4dffceb9e3a7e85ed973", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e4c2444fc10f7952fc4dffceb9e3a7e85ed973", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4e4c2444fc10f7952fc4dffceb9e3a7e85ed973", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e4c2444fc10f7952fc4dffceb9e3a7e85ed973/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7b6a9ee16ae495a858a694d53b8c74548f5bbdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7b6a9ee16ae495a858a694d53b8c74548f5bbdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7b6a9ee16ae495a858a694d53b8c74548f5bbdd"}], "stats": {"total": 127, "additions": 123, "deletions": 4}, "files": [{"sha": "d234179f2fa9258756f6a2fc0a8e245044e5509d", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.cc", "status": "modified", "additions": 74, "deletions": 4, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e4c2444fc10f7952fc4dffceb9e3a7e85ed973/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e4c2444fc10f7952fc4dffceb9e3a7e85ed973/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc?ref=f4e4c2444fc10f7952fc4dffceb9e3a7e85ed973", "patch": "@@ -25,7 +25,10 @@\n namespace Rust {\n namespace HIR {\n \n-UnsafeChecker::UnsafeChecker () : context (*Resolver::TypeCheckContext::get ())\n+UnsafeChecker::UnsafeChecker ()\n+  : context (*Resolver::TypeCheckContext::get ()),\n+    resolver (*Resolver::Resolver::get ()),\n+    mappings (*Analysis::Mappings::get ())\n {}\n \n void\n@@ -35,6 +38,47 @@ UnsafeChecker::go (HIR::Crate &crate)\n     item->accept_vis (*this);\n }\n \n+static void\n+check_static_mut (HIR::Item *maybe_static, Location locus)\n+{\n+  if (maybe_static->get_hir_kind () == Node::BaseKind::VIS_ITEM)\n+    {\n+      auto item = static_cast<Item *> (maybe_static);\n+      if (item->get_item_kind () == Item::ItemKind::Static)\n+\t{\n+\t  auto static_item = static_cast<StaticItem *> (item);\n+\t  if (static_item->is_mut ())\n+\t    rust_error_at (\n+\t      locus, \"use of mutable static requires unsafe function or block\");\n+\t}\n+    }\n+}\n+\n+static void\n+check_extern_static (HIR::ExternalItem *maybe_static, Location locus)\n+{\n+  if (maybe_static->get_extern_kind () == ExternalItem::ExternKind::Static)\n+    rust_error_at (locus,\n+\t\t   \"use of extern static requires unsafe function or block\");\n+}\n+\n+void\n+UnsafeChecker::check_use_of_static (HirId node_id, Location locus)\n+{\n+  if (is_unsafe_context ())\n+    return;\n+\n+  auto maybe_static_mut = mappings.lookup_hir_item (node_id);\n+  auto maybe_extern_static = mappings.lookup_hir_extern_item (node_id);\n+\n+  if (maybe_static_mut)\n+    check_static_mut (maybe_static_mut, locus);\n+\n+  if (maybe_extern_static)\n+    check_extern_static (static_cast<ExternalItem *> (maybe_extern_static),\n+\t\t\t locus);\n+}\n+\n void\n UnsafeChecker::push_unsafe (HirId id)\n {\n@@ -60,7 +104,18 @@ UnsafeChecker::is_unsafe_context ()\n \n void\n UnsafeChecker::visit (IdentifierExpr &ident_expr)\n-{}\n+{\n+  NodeId ast_node_id = ident_expr.get_mappings ().get_nodeid ();\n+  NodeId ref_node_id;\n+  HirId definition_id;\n+\n+  if (!resolver.lookup_resolved_name (ast_node_id, &ref_node_id))\n+    return;\n+\n+  rust_assert (mappings.lookup_node_to_hir (ref_node_id, &definition_id));\n+\n+  check_use_of_static (definition_id, ident_expr.get_locus ());\n+}\n \n void\n UnsafeChecker::visit (Lifetime &lifetime)\n@@ -72,7 +127,18 @@ UnsafeChecker::visit (LifetimeParam &lifetime_param)\n \n void\n UnsafeChecker::visit (PathInExpression &path)\n-{}\n+{\n+  NodeId ast_node_id = path.get_mappings ().get_nodeid ();\n+  NodeId ref_node_id;\n+  HirId definition_id;\n+\n+  if (!resolver.lookup_resolved_name (ast_node_id, &ref_node_id))\n+    return;\n+\n+  rust_assert (mappings.lookup_node_to_hir (ref_node_id, &definition_id));\n+\n+  check_use_of_static (definition_id, path.get_locus ());\n+}\n \n void\n UnsafeChecker::visit (TypePathSegment &segment)\n@@ -253,7 +319,11 @@ UnsafeChecker::visit (StructExprStructBase &expr)\n \n void\n UnsafeChecker::visit (CallExpr &expr)\n-{}\n+{\n+  if (expr.has_params ())\n+    for (auto &arg : expr.get_arguments ())\n+      arg->accept_vis (*this);\n+}\n \n void\n UnsafeChecker::visit (MethodCallExpr &expr)"}, {"sha": "38b9019e3b7ceefad466c678b4a9ac35d284e916", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e4c2444fc10f7952fc4dffceb9e3a7e85ed973/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e4c2444fc10f7952fc4dffceb9e3a7e85ed973/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h?ref=f4e4c2444fc10f7952fc4dffceb9e3a7e85ed973", "patch": "@@ -20,6 +20,7 @@\n #define RUST_UNSAFE_CHECKER_H\n \n #include \"rust-hir-visitor.h\"\n+#include \"rust-name-resolver.h\"\n #include \"rust-hir-type-check.h\"\n \n namespace Rust {\n@@ -51,7 +52,15 @@ class UnsafeChecker : public HIRFullVisitor\n    */\n   bool is_unsafe_context ();\n \n+  /**\n+   * Check if a mutable static or external static item is used outside of an\n+   * unsafe context\n+   */\n+  void check_use_of_static (HirId node_id, Location locus);\n+\n   Resolver::TypeCheckContext &context;\n+  Resolver::Resolver resolver;\n+  Analysis::Mappings mappings;\n \n   virtual void visit (IdentifierExpr &ident_expr) override;\n   virtual void visit (Lifetime &lifetime) override;"}, {"sha": "9cd3f6b4bf29756eb444b3b4e9c6ece66751905c", "filename": "gcc/testsuite/rust/compile/unsafe1.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e4c2444fc10f7952fc4dffceb9e3a7e85ed973/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e4c2444fc10f7952fc4dffceb9e3a7e85ed973/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe1.rs?ref=f4e4c2444fc10f7952fc4dffceb9e3a7e85ed973", "patch": "@@ -0,0 +1,14 @@\n+fn foo(_a: &i32) {}\n+fn bar(_a: i32) {}\n+\n+static mut a: i32 = 15;\n+\n+fn main() {\n+    foo(&a); // { dg-error \"use of mutable static\" }\n+    bar(a); // { dg-error \"use of mutable static\" }\n+\n+    unsafe {\n+        foo(&a);\n+        bar(a);\n+    }\n+}"}, {"sha": "e03e4bc59f425dd644dfce2e99fe1caa35d552c5", "filename": "gcc/testsuite/rust/compile/unsafe2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e4c2444fc10f7952fc4dffceb9e3a7e85ed973/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e4c2444fc10f7952fc4dffceb9e3a7e85ed973/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe2.rs?ref=f4e4c2444fc10f7952fc4dffceb9e3a7e85ed973", "patch": "@@ -0,0 +1,16 @@\n+fn foo(_a: &i32) {}\n+fn bar(_a: i32) {}\n+\n+mod inner {\n+    pub static mut a: i32 = 15;\n+}\n+\n+fn main() {\n+    foo(&inner::a); // { dg-error \"use of mutable static\" }\n+    bar(inner::a); // { dg-error \"use of mutable static\" }\n+\n+    unsafe {\n+        foo(&inner::a);\n+        bar(inner::a);\n+    }\n+}"}, {"sha": "56aec76008a50769f2a9cd4cdca3ab4dc2efb515", "filename": "gcc/testsuite/rust/compile/unsafe3.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e4c2444fc10f7952fc4dffceb9e3a7e85ed973/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e4c2444fc10f7952fc4dffceb9e3a7e85ed973/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe3.rs?ref=f4e4c2444fc10f7952fc4dffceb9e3a7e85ed973", "patch": "@@ -0,0 +1,10 @@\n+extern \"C\" {\n+    static VALUE: char;\n+}\n+\n+fn main() {\n+    let _ = VALUE; // { dg-error \"use of extern static\" }\n+    unsafe {\n+        let _ = VALUE;\n+    }\n+}"}]}