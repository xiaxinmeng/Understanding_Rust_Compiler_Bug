{"sha": "4b7d9ed4a8e049e777252718c4cddb85fece7cde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI3ZDllZDRhOGUwNDllNzc3MjUyNzE4YzRjZGRiODVmZWNlN2NkZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-06-20T14:39:44Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-06-20T14:39:44Z"}, "message": "re PR c++/43831 ([C++0x] gcc-4.5.0 does not fail invalid lambda captures (against n3092 5.1.2/8))\n\n\tPR c++/43831\n\t* parser.c (cp_parser_lambda_introducer): Complain about redundant\n\tcaptures.\n\t* semantics.c (add_capture): Likewise.\n\t(register_capture_members): Clear IDENTIFIER_MARKED.\n\nFrom-SVN: r175211", "tree": {"sha": "cde6f088985ae859fdb6f847866868f41f9a337e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cde6f088985ae859fdb6f847866868f41f9a337e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b7d9ed4a8e049e777252718c4cddb85fece7cde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b7d9ed4a8e049e777252718c4cddb85fece7cde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b7d9ed4a8e049e777252718c4cddb85fece7cde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b7d9ed4a8e049e777252718c4cddb85fece7cde/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c2954af9266e69bc422c3ca6c77fdecd92199070", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2954af9266e69bc422c3ca6c77fdecd92199070", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2954af9266e69bc422c3ca6c77fdecd92199070"}], "stats": {"total": 108, "additions": 82, "deletions": 26}, "files": [{"sha": "5d85ee0c3776efbfd67169a7596e4e0c79c10d54", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7d9ed4a8e049e777252718c4cddb85fece7cde/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7d9ed4a8e049e777252718c4cddb85fece7cde/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4b7d9ed4a8e049e777252718c4cddb85fece7cde", "patch": "@@ -1,3 +1,11 @@\n+2011-06-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/43831\n+\t* parser.c (cp_parser_lambda_introducer): Complain about redundant\n+\tcaptures.\n+\t* semantics.c (add_capture): Likewise.\n+\t(register_capture_members): Clear IDENTIFIER_MARKED.\n+\n 2011-06-17  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/49458"}, {"sha": "75dac6ae2147fe454e9aacefaab73a171d3cbb20", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7d9ed4a8e049e777252718c4cddb85fece7cde/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7d9ed4a8e049e777252718c4cddb85fece7cde/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=4b7d9ed4a8e049e777252718c4cddb85fece7cde", "patch": "@@ -7485,6 +7485,10 @@ cp_parser_lambda_introducer (cp_parser* parser, tree lambda_expr)\n       /* Possibly capture `this'.  */\n       if (cp_lexer_next_token_is_keyword (parser->lexer, RID_THIS))\n \t{\n+\t  location_t loc = cp_lexer_peek_token (parser->lexer)->location;\n+\t  if (LAMBDA_EXPR_DEFAULT_CAPTURE_MODE (lambda_expr) == CPLD_COPY)\n+\t    pedwarn (loc, 0, \"explicit by-copy capture of %<this%> redundant \"\n+\t\t     \"with by-copy capture default\");\n \t  cp_lexer_consume_token (parser->lexer);\n \t  add_capture (lambda_expr,\n \t\t       /*id=*/this_identifier,\n@@ -7568,6 +7572,21 @@ cp_parser_lambda_introducer (cp_parser* parser, tree lambda_expr)\n \tcapture_init_expr\n \t  = unqualified_name_lookup_error (capture_init_expr);\n \n+      if (LAMBDA_EXPR_DEFAULT_CAPTURE_MODE (lambda_expr) != CPLD_NONE\n+\t  && !explicit_init_p)\n+\t{\n+\t  if (LAMBDA_EXPR_DEFAULT_CAPTURE_MODE (lambda_expr) == CPLD_COPY\n+\t      && capture_kind == BY_COPY)\n+\t    pedwarn (capture_token->location, 0, \"explicit by-copy capture \"\n+\t\t     \"of %qD redundant with by-copy capture default\",\n+\t\t     capture_id);\n+\t  if (LAMBDA_EXPR_DEFAULT_CAPTURE_MODE (lambda_expr) == CPLD_REFERENCE\n+\t      && capture_kind == BY_REFERENCE)\n+\t    pedwarn (capture_token->location, 0, \"explicit by-reference \"\n+\t\t     \"capture of %qD redundant with by-reference capture \"\n+\t\t     \"default\", capture_id);\n+\t}\n+\n       add_capture (lambda_expr,\n \t\t   capture_id,\n \t\t   capture_init_expr,"}, {"sha": "1f683c7f9bdc51bbc360014b284f1d9a81d39a29", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 38, "deletions": 26, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7d9ed4a8e049e777252718c4cddb85fece7cde/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7d9ed4a8e049e777252718c4cddb85fece7cde/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=4b7d9ed4a8e049e777252718c4cddb85fece7cde", "patch": "@@ -8516,8 +8516,8 @@ tree\n add_capture (tree lambda, tree id, tree initializer, bool by_reference_p,\n \t     bool explicit_init_p)\n {\n-  tree type;\n-  tree member;\n+  char *buf;\n+  tree type, member, name;\n \n   type = lambda_capture_field_type (initializer);\n   if (by_reference_p)\n@@ -8527,18 +8527,31 @@ add_capture (tree lambda, tree id, tree initializer, bool by_reference_p,\n \terror (\"cannot capture %qE by reference\", initializer);\n     }\n \n+  /* Add __ to the beginning of the field name so that user code\n+     won't find the field with name lookup.  We can't just leave the name\n+     unset because template instantiation uses the name to find\n+     instantiated fields.  */\n+  buf = (char *) alloca (IDENTIFIER_LENGTH (id) + 3);\n+  buf[1] = buf[0] = '_';\n+  memcpy (buf + 2, IDENTIFIER_POINTER (id),\n+\t  IDENTIFIER_LENGTH (id) + 1);\n+  name = get_identifier (buf);\n+\n+  /* If TREE_TYPE isn't set, we're still in the introducer, so check\n+     for duplicates.  */\n+  if (!TREE_TYPE (lambda))\n+    {\n+      if (IDENTIFIER_MARKED (name))\n+\t{\n+\t  pedwarn (input_location, 0,\n+\t\t   \"already captured %qD in lambda expression\", id);\n+\t  return NULL_TREE;\n+\t}\n+      IDENTIFIER_MARKED (name) = true;\n+    }\n+\n   /* Make member variable.  */\n-  {\n-    /* Add __ to the beginning of the field name so that user code\n-       won't find the field with name lookup.  We can't just leave the name\n-       unset because template instantiation uses the name to find\n-       instantiated fields.  */\n-    char *buf = (char *) alloca (IDENTIFIER_LENGTH (id) + 3);\n-    buf[1] = buf[0] = '_';\n-    memcpy (buf + 2, IDENTIFIER_POINTER (id),\n-\t    IDENTIFIER_LENGTH (id) + 1);\n-    member = build_lang_decl (FIELD_DECL, get_identifier (buf), type);\n-  }\n+  member = build_lang_decl (FIELD_DECL, name, type);\n \n   if (!explicit_init_p)\n     /* Normal captures are invisible to name lookup but uses are replaced\n@@ -8548,20 +8561,16 @@ add_capture (tree lambda, tree id, tree initializer, bool by_reference_p,\n        always visible.  */\n     DECL_NORMAL_CAPTURE_P (member) = true;\n \n+  if (id == this_identifier)\n+    LAMBDA_EXPR_THIS_CAPTURE (lambda) = member;\n+\n   /* Add it to the appropriate closure class if we've started it.  */\n   if (current_class_type && current_class_type == TREE_TYPE (lambda))\n     finish_member_declaration (member);\n \n   LAMBDA_EXPR_CAPTURE_LIST (lambda)\n     = tree_cons (member, initializer, LAMBDA_EXPR_CAPTURE_LIST (lambda));\n \n-  if (id == this_identifier)\n-    {\n-      if (LAMBDA_EXPR_CAPTURES_THIS_P (lambda))\n-        error (\"already captured %<this%> in lambda expression\");\n-      LAMBDA_EXPR_THIS_CAPTURE (lambda) = member;\n-    }\n-\n   if (TREE_TYPE (lambda))\n     return build_capture_proxy (member);\n   /* For explicit captures we haven't started the function yet, so we wait\n@@ -8572,13 +8581,16 @@ add_capture (tree lambda, tree id, tree initializer, bool by_reference_p,\n /* Register all the capture members on the list CAPTURES, which is the\n    LAMBDA_EXPR_CAPTURE_LIST for the lambda after the introducer.  */\n \n-void register_capture_members (tree captures)\n+void\n+register_capture_members (tree captures)\n {\n-  if (captures)\n-    {\n-      register_capture_members (TREE_CHAIN (captures));\n-      finish_member_declaration (TREE_PURPOSE (captures));\n-    }\n+  if (captures == NULL_TREE)\n+    return;\n+\n+  register_capture_members (TREE_CHAIN (captures));\n+  /* We set this in add_capture to avoid duplicates.  */\n+  IDENTIFIER_MARKED (DECL_NAME (TREE_PURPOSE (captures))) = false;\n+  finish_member_declaration (TREE_PURPOSE (captures));\n }\n \n /* Similar to add_capture, except this works on a stack of nested lambdas."}, {"sha": "789cdda7cddae71b8867815faa4240e93e6cf7b4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7d9ed4a8e049e777252718c4cddb85fece7cde/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7d9ed4a8e049e777252718c4cddb85fece7cde/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4b7d9ed4a8e049e777252718c4cddb85fece7cde", "patch": "@@ -1,3 +1,8 @@\n+2011-06-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/43831\n+\t* g++.dg/cpp0x/lambda/lambda-capture-reduncancy.C: New.\n+\n 2011-06-20  Kai Tietz  <ktietz@redhat.com>\n \n \t* gcc.dg/binop-notand1.c: New test."}, {"sha": "51e55a7aa4c7886feb551f3ee88fbe6d2c6ed5ee", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-capture-redundancy.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7d9ed4a8e049e777252718c4cddb85fece7cde/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-capture-redundancy.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7d9ed4a8e049e777252718c4cddb85fece7cde/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-capture-redundancy.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-capture-redundancy.C?ref=4b7d9ed4a8e049e777252718c4cddb85fece7cde", "patch": "@@ -0,0 +1,12 @@\n+// FDIS 5.1.2/8\n+// { dg-options \"-pedantic-errors -std=c++0x\" }\n+\n+struct S2 { void f(int i); };\n+void S2::f(int i) {\n+  [&, i]{ };       // OK\n+  [&, &i]{ };\t   // { dg-error \"\" } i preceded by & when & is the default\n+  [=, i]{ };       // { dg-error \"\" } i not preceded by & when = is the default\n+  [=, this]{ };\t   // { dg-error \"\" } this when = is the default\n+  [i, i]{ };\t   // { dg-error \"\" } i repeated\n+  [this, this]{ }; // { dg-error \"\" } i repeated\n+}"}]}