{"sha": "8e519a8b0a3543210d7103042cc0a2e1b3603832", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU1MTlhOGIwYTM1NDMyMTBkNzEwMzA0MmNjMGEyZTFiMzYwMzgzMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-03-17T02:38:35Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-03-17T02:38:35Z"}, "message": "re PR c++/56039 (ICE in iterative_hash_template_arg, at cp/pt.c:1606)\n\n\tPR c++/56039\n\t* tree.c (strip_typedefs_expr): Complain about lambda, don't abort.\n\nFrom-SVN: r196741", "tree": {"sha": "537eec4ddbf3b4541feb32a35b27600200b1f3dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/537eec4ddbf3b4541feb32a35b27600200b1f3dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e519a8b0a3543210d7103042cc0a2e1b3603832", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e519a8b0a3543210d7103042cc0a2e1b3603832", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e519a8b0a3543210d7103042cc0a2e1b3603832", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e519a8b0a3543210d7103042cc0a2e1b3603832/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bf7292fcee25bce85063c8d05842d907f46dd4da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf7292fcee25bce85063c8d05842d907f46dd4da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf7292fcee25bce85063c8d05842d907f46dd4da"}], "stats": {"total": 61, "additions": 60, "deletions": 1}, "files": [{"sha": "983365ca5e8b8d989e2229eadce874503559373c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e519a8b0a3543210d7103042cc0a2e1b3603832/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e519a8b0a3543210d7103042cc0a2e1b3603832/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8e519a8b0a3543210d7103042cc0a2e1b3603832", "patch": "@@ -1,5 +1,8 @@\n 2013-03-16  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/56039\n+\t* tree.c (strip_typedefs_expr): Complain about lambda, don't abort.\n+\n \tPR c++/54359\n \t* parser.c (cp_parser_direct_declarator): Fix late return\n \tfor out-of-class defn of member function."}, {"sha": "42ba677056c807ffa35f3d46ce47ea815fb3d09a", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e519a8b0a3543210d7103042cc0a2e1b3603832/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e519a8b0a3543210d7103042cc0a2e1b3603832/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=8e519a8b0a3543210d7103042cc0a2e1b3603832", "patch": "@@ -1421,7 +1421,8 @@ strip_typedefs_expr (tree t)\n       }\n \n     case LAMBDA_EXPR:\n-      gcc_unreachable ();\n+      error (\"lambda-expression in a constant expression\");\n+      return error_mark_node;\n \n     default:\n       break;"}, {"sha": "973f8a7804819db2a3f4fc756e6d5b31a53cdc07", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-sfinae1.C", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e519a8b0a3543210d7103042cc0a2e1b3603832/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-sfinae1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e519a8b0a3543210d7103042cc0a2e1b3603832/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-sfinae1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-sfinae1.C?ref=8e519a8b0a3543210d7103042cc0a2e1b3603832", "patch": "@@ -0,0 +1,55 @@\n+// PR c++/56039\n+// { dg-do compile { target c++11 } }\n+\n+template <bool> struct BoolSink { typedef void type; };\n+\n+template <typename T, typename U>\n+struct AddRvalueReferenceImpl { typedef T type; };\n+\n+template <typename T>\n+struct AddRvalueReferenceImpl<T, typename BoolSink<false &&\n+      [] {\n+         extern T &&tref;\n+      }>::type> {\t\t// { dg-error \"lambda\" }\n+   typedef T &&type;\n+};\n+\n+template <typename T>\n+struct AddRvalueReference : AddRvalueReferenceImpl<T, void> { };\n+\n+namespace ImplHelpers {\n+   template <typename T>\n+   typename AddRvalueReference<T>::type create(void) { }\n+}\n+\n+template <typename T, typename U, typename ...Args>\n+struct IsConstructibleImpl { enum { value = 0 }; };\n+\n+template <typename T, typename ...Args>\n+struct IsConstructibleImpl<T, typename BoolSink<false &&\n+      [] {\n+         T t( ::ImplHelpers::create<Args>() ...);\n+      }>::type, Args ...> {\t// { dg-error \"lambda\" }\n+   enum { value = 1 };\n+};\n+\n+template <typename T, typename ...Args>\n+struct IsConstructible : IsConstructibleImpl<T, void, Args ...> { };\n+\n+struct DestroyMe {\n+   ~DestroyMe() = delete;\n+};\n+\n+static_assert(+IsConstructible<int>::value, \"error\");\n+static_assert(!IsConstructible<void>::value, \"error\");\n+static_assert(+IsConstructible<int [1]>::value, \"error\");\n+static_assert(!IsConstructible<DestroyMe>::value, \"error\");\n+static_assert(!IsConstructible<int *, char *>::value, \"error\");\n+\n+static_assert(+IsConstructible<int &&, int>::value, \"error\");\n+static_assert(!IsConstructible<int &&, int &>::value, \"error\");\n+static_assert(+IsConstructible<int &&, int &&>::value, \"error\");\n+\n+// { dg-prune-output \"expected\" }\n+// { dg-prune-output \"does not name a class\" }\n+// { dg-prune-output \"static assertion\" }"}]}