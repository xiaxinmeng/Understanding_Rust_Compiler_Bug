{"sha": "7f4edbcba63f129d037ffba8bd6deab84da5fd43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y0ZWRiY2JhNjNmMTI5ZDAzN2ZmYmE4YmQ2ZGVhYjg0ZGE1ZmQ0Mw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@cygnus.co.uk", "date": "1999-07-20T10:41:10Z"}, "committer": {"name": "Bernd Schmidt", "email": "crux@gcc.gnu.org", "date": "1999-07-20T10:41:10Z"}, "message": "c-common.h: New file.\n\n\t* c-common.h: New file.\n\t* c-common.c (permanent_obstack): Delete unused declaration.\n\t(c_global_trees): New array.\n\t(c_common_nodes_and_builtins): New function; split off common code\n\tfrom init_decl_processing in both c-decl.c and cp/decl.c.\n\t* c-tree.h: Delete lots of declarations of tree nodes; replaced by\n\tc_global_trees and accessor macros defined in c-common.h.\n\tInclude c-common.h.\n\t* c-decl.c: Delete definitions for tree nodes that were replaced by\n\tc_global_trees.\n\t(init_decl_processing): Build void_list_node.\n\tCall c_common_nodes_and_builtins; delete code to generate the common\n\tbuiltins here.\n\n\t* objc/objc-act.c (build_module_descriptor): Rename variable\n\tvoid_list_node to avoid clash with c-common.h.\n\n\t* cp/cp-tree.h: Delete lots of declarations of tree nodes; replaced by\n\tc_global_trees and accessor macros defined in c-common.h.\n\t(cp_tree_index): New enumeration.\n\t(cp_global_trees): Declare new array.  Add accessor macros for it, and\n\tdelete declarations of tree nodes replaced by it.\n\t(builtin_function): Delete macro, add declaration for new function.\n\tInclude c-common.h.\n\t* cp/decl.c: Delete definitions for tree nodes that were replaced by\n\tcp_global_trees and c_global_trees.\n\t(init_decl_processing): Call c_common_nodes_and_builtins; delete code\n\tto generate the common builtins here.\n\t(builtin_function): New function.\n\t* cp/decl2.c (abort_fndecl): Delete declaration.\n\t* cp/except.c (expand_builtin_return_address): Delete declaration.\n\t(builtin_return_address_fndecl): Delete variable.\n\t(const_ptr_type_node): Delete declaration.\n\t* cp/lex.c (cons_up_default_function): Delete declaration of\n\tvoid_list_node.\n\t* cp/parse.y (void_list_node): Delete declaration.\n\t* cp/rtti.c (type_info_type_node, tinfo_fn_id, tinfo_fn_type):\n\tDelete variables.\n\t(const_string_type_node): Delete declaration.\n\t* cp/search.c (abort_fndecl): Delete declaration.\n\n\t* Makefile.in: Update dependencies.\n\t* objc/Make-lang.in: Likewise.\n\t* cp/Makefile.in: Likewise.\n\nFrom-SVN: r28188", "tree": {"sha": "acba269fe48cc12a4f0ec25249c8195ed409ca23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acba269fe48cc12a4f0ec25249c8195ed409ca23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f4edbcba63f129d037ffba8bd6deab84da5fd43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f4edbcba63f129d037ffba8bd6deab84da5fd43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f4edbcba63f129d037ffba8bd6deab84da5fd43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f4edbcba63f129d037ffba8bd6deab84da5fd43/comments", "author": null, "committer": null, "parents": [{"sha": "3791a1dc294190ba6e759fdd1e5cb46cbdd54713", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3791a1dc294190ba6e759fdd1e5cb46cbdd54713", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3791a1dc294190ba6e759fdd1e5cb46cbdd54713"}], "stats": {"total": 3500, "additions": 1647, "deletions": 1853}, "files": [{"sha": "d6da990663955521a5bdb4d3fda750d20bbc77db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f4edbcba63f129d037ffba8bd6deab84da5fd43", "patch": "@@ -1,3 +1,24 @@\n+Tue Jul 20 11:24:19 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n+\n+\t* c-common.h: New file.\n+\t* c-common.c (permanent_obstack): Delete unused declaration.\n+\t(c_global_trees): New array.\n+\t(c_common_nodes_and_builtins): New function; split off common code\n+\tfrom init_decl_processing in both c-decl.c and cp/decl.c.\n+\t* c-tree.h: Delete lots of declarations of tree nodes; replaced by\n+\tc_global_trees and accessor macros defined in c-common.h.\n+\tInclude c-common.h.\n+\t* c-decl.c: Delete definitions for tree nodes that were replaced by\n+\tc_global_trees.\n+\t(init_decl_processing): Build void_list_node.\n+\tCall c_common_nodes_and_builtins; delete code to generate the common\n+\tbuiltins here.\n+\t* objc/objc-act.c (build_module_descriptor): Rename variable\n+\tvoid_list_node to avoid clash with c-common.h.\n+\n+\t* Makefile.in: Update dependencies.\n+\t* objc/Make-lang.in: Likewise.\n+\n Mon Jul 19 14:22:18 1999  Mark P. Mitchell  <mark@codesourcery.com>\n \n \t* config/mips/iris6gld.h (MAKE_DECL_ONE_ONLY): Define."}, {"sha": "521e694b47c4b2746043f70cdcf07a2ba0732f5a", "filename": "gcc/Makefile.in", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7f4edbcba63f129d037ffba8bd6deab84da5fd43", "patch": "@@ -1319,7 +1319,7 @@ s-crt0:\t$(CRT0_S) $(MCRT0_S) $(GCC_PASSES) $(CONFIG_H)\n # C language specific files.\n \n c-parse.o : $(srcdir)/c-parse.c $(CONFIG_H) $(TREE_H) c-lex.h \\\n-    $(srcdir)/c-parse.h c-tree.h input.h flags.h system.h toplev.h\n+    $(srcdir)/c-parse.h c-tree.h c-common.h input.h flags.h system.h toplev.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c $(srcdir)/c-parse.c\n $(srcdir)/c-parse.h: $(srcdir)/c-parse.c\n $(srcdir)/c-parse.c: $(srcdir)/c-parse.y\n@@ -1336,22 +1336,22 @@ $(srcdir)/c-gperf.h: c-parse.gperf\n \t   -k1,3,$$ $(srcdir)/c-parse.gperf >tmp-gperf.h\n \t $(srcdir)/move-if-change tmp-gperf.h $(srcdir)/c-gperf.h\n \n-c-decl.o : c-decl.c $(CONFIG_H) system.h $(TREE_H) c-tree.h c-lex.h flags.h \\\n-    output.h toplev.h\n-c-typeck.o : c-typeck.c $(CONFIG_H) system.h $(TREE_H) c-tree.h flags.h \\\n-    intl.h output.h $(EXPR_H) $(RTL_H) toplev.h\n-c-lang.o : c-lang.c $(CONFIG_H) system.h $(TREE_H) c-tree.h c-lex.h toplev.h \\\n-    output.h\n+c-decl.o : c-decl.c $(CONFIG_H) system.h $(TREE_H) c-tree.h c-common.h \\\n+    c-lex.h flags.h output.h toplev.h\n+c-typeck.o : c-typeck.c $(CONFIG_H) system.h $(TREE_H) c-tree.h c-common.h \\\n+    flags.h intl.h output.h $(EXPR_H) $(RTL_H) toplev.h\n+c-lang.o : c-lang.c $(CONFIG_H) system.h $(TREE_H) c-tree.h c-common.h \\\n+    c-lex.h toplev.h output.h\n c-lex.o : c-lex.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) c-lex.h c-tree.h \\\n-    $(srcdir)/c-parse.h input.h intl.h flags.h $(srcdir)/c-gperf.h c-pragma.h \\\n-    toplev.h output.h mbchar.h\n-c-aux-info.o : c-aux-info.c  $(CONFIG_H) system.h $(TREE_H) c-tree.h flags.h \\\n-    toplev.h\n+    c-common.h $(srcdir)/c-parse.h $(srcdir)/c-gperf.h c-pragma.h input.h \\\n+    intl.h flags.h toplev.h output.h mbchar.h\n+c-aux-info.o : c-aux-info.c  $(CONFIG_H) system.h $(TREE_H) c-tree.h \\\n+    c-common.h flags.h toplev.h\n c-convert.o : c-convert.c $(CONFIG_H) system.h $(TREE_H) flags.h toplev.h\n c-pragma.o: c-pragma.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) except.h \\\n     function.h defaults.h c-pragma.h toplev.h\n c-iterate.o: c-iterate.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) c-tree.h \\\n-    flags.h toplev.h $(EXPR_H)\n+    c-common.h flags.h toplev.h $(EXPR_H)\n mbchar.o: mbchar.c $(CONFIG_H) system.h mbchar.h\n graph.o: graph.c $(CONFIG_H) system.h toplev.h flags.h output.h $(RTL_H) \\\n     hard-reg-set.h $(BASIC_BLOCK_H)\n@@ -1401,7 +1401,7 @@ s-under: $(GCC_PASSES)\n # A file used by all variants of C.\n \n c-common.o : c-common.c $(CONFIG_H) system.h $(TREE_H) c-tree.h c-lex.h \\\n-\tflags.h toplev.h output.h c-pragma.h $(RTL_H)\n+\tc-common.h flags.h toplev.h output.h c-pragma.h $(RTL_H)\n \n # Language-independent files.\n "}, {"sha": "7abfad237cc5ebc4895bc564bde2e59207fd9c50", "filename": "gcc/c-common.c", "status": "modified", "additions": 394, "deletions": 1, "changes": 395, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=7f4edbcba63f129d037ffba8bd6deab84da5fd43", "patch": "@@ -45,7 +45,97 @@ static enum cpp_token cpp_token;\n #endif\n #endif\n \n-extern struct obstack permanent_obstack;\n+/* The following symbols are subsumed in the c_global_trees array, and\n+   listed here individually for documentation purposes. \n+\n+   INTEGER_TYPE and REAL_TYPE nodes for the standard data types.\n+\n+\ttree short_integer_type_node;\n+\ttree long_integer_type_node;\n+\ttree long_long_integer_type_node;\n+\n+\ttree short_unsigned_type_node;\n+\ttree long_unsigned_type_node;\n+\ttree long_long_unsigned_type_node;\n+\n+\ttree boolean_type_node;\n+\ttree boolean_false_node;\n+\ttree boolean_true_node;\n+\n+\ttree ptrdiff_type_node;\n+\n+\ttree unsigned_char_type_node;\n+\ttree signed_char_type_node;\n+\ttree wchar_type_node;\n+\ttree signed_wchar_type_node;\n+\ttree unsigned_wchar_type_node;\n+\n+\ttree float_type_node;\n+\ttree double_type_node;\n+\ttree long_double_type_node;\n+\n+\ttree complex_integer_type_node;\n+\ttree complex_float_type_node;\n+\ttree complex_double_type_node;\n+\ttree complex_long_double_type_node;\n+\n+\ttree intQI_type_node;\n+\ttree intHI_type_node;\n+\ttree intSI_type_node;\n+\ttree intDI_type_node;\n+\ttree intTI_type_node;\n+\n+\ttree unsigned_intQI_type_node;\n+\ttree unsigned_intHI_type_node;\n+\ttree unsigned_intSI_type_node;\n+\ttree unsigned_intDI_type_node;\n+\ttree unsigned_intTI_type_node;\n+\n+\ttree widest_integer_literal_type_node;\n+\ttree widest_unsigned_literal_type_node;\n+\n+   Nodes for types `void *' and `const void *'.\n+\n+\ttree ptr_type_node, const_ptr_type_node;\n+\n+   Nodes for types `char *' and `const char *'.\n+\n+\ttree string_type_node, const_string_type_node;\n+\n+   Type `char[SOMENUMBER]'.\n+   Used when an array of char is needed and the size is irrelevant.\n+\n+\ttree char_array_type_node;\n+\n+   Type `int[SOMENUMBER]' or something like it.\n+   Used when an array of int needed and the size is irrelevant.\n+\n+\ttree int_array_type_node;\n+\n+   Type `wchar_t[SOMENUMBER]' or something like it.\n+   Used when a wide string literal is created.\n+\n+\ttree wchar_array_type_node;\n+\n+   Type `int ()' -- used for implicit declaration of functions.\n+\n+\ttree default_function_type;\n+\n+   Function types `int (int)', etc.\n+\n+\ttree int_ftype_int;\n+\ttree void_ftype;\n+\ttree void_ftype_ptr;\n+\ttree int_ftype_int;\n+\ttree ptr_ftype_sizetype;\n+\n+   A VOID_TYPE node, packaged in a TREE_LIST.\n+\n+\ttree void_list_node;\n+\n+*/\n+\n+tree c_global_trees[CTI_MAX];\n \n /* Nonzero means the expression being parsed will never be evaluated.\n    This is a count, since unevaluated expressions can nest.  */\n@@ -3319,3 +3409,306 @@ c_get_alias_set (t)\n \n   return TYPE_ALIAS_SET (type);\n }\n+\n+/* Build tree nodes and builtin functions common to both C and C++ language\n+   frontends.  \n+   CPLUS_MODE is nonzero if we are called from the C++ frontend, we generate\n+   some stricter prototypes in that case. \n+   NO_BUILTINS and NO_NONANSI_BUILTINS contain the respective values of\n+   the language frontend flags flag_no_builtin and\n+   flag_no_nonansi_builtin.  */\n+void\n+c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n+    int cplus_mode, no_builtins, no_nonansi_builtins;\n+{\n+  tree temp;\n+  tree memcpy_ftype, memset_ftype, strlen_ftype;\n+  tree endlink, int_endlink, double_endlink, unsigned_endlink;\n+  tree sizetype_endlink;\n+  tree ptr_ftype, ptr_ftype_unsigned;\n+  tree void_ftype_any, void_ftype_int;\n+  tree double_ftype_double, double_ftype_double_double;\n+  tree float_ftype_float, ldouble_ftype_ldouble;\n+  tree int_ftype_cptr_cptr_sizet;\n+  tree int_ftype_string_string, string_ftype_ptr_ptr;\n+  tree long_ftype_long;\n+  /* Either char* or void*.  */\n+  tree traditional_ptr_type_node;\n+\n+  endlink = void_list_node;\n+  int_endlink = tree_cons (NULL_TREE, integer_type_node, endlink);\n+  double_endlink = tree_cons (NULL_TREE, double_type_node, endlink);\n+  unsigned_endlink = tree_cons (NULL_TREE, unsigned_type_node, endlink);\n+\n+  ptr_ftype = build_function_type (ptr_type_node, NULL_TREE);\n+  ptr_ftype_unsigned = build_function_type (ptr_type_node, unsigned_endlink);\n+  sizetype_endlink = tree_cons (NULL_TREE, sizetype, endlink);\n+  /* We realloc here because sizetype could be int or unsigned.  S'ok.  */\n+  ptr_ftype_sizetype = build_function_type (ptr_type_node, sizetype_endlink);\n+\n+  void_ftype_any = build_function_type (void_type_node, NULL_TREE);\n+  void_ftype = build_function_type (void_type_node, endlink);\n+  void_ftype_int = build_function_type (void_type_node, int_endlink);\n+  void_ftype_ptr\n+    = build_function_type (void_type_node,\n+ \t\t\t   tree_cons (NULL_TREE, ptr_type_node, endlink));\n+\n+  float_ftype_float\n+    = build_function_type (float_type_node,\n+\t\t\t   tree_cons (NULL_TREE, float_type_node, endlink));\n+\n+  double_ftype_double\n+    = build_function_type (double_type_node, double_endlink);\n+\n+  ldouble_ftype_ldouble\n+    = build_function_type (long_double_type_node,\n+\t\t\t   tree_cons (NULL_TREE, long_double_type_node,\n+\t\t\t\t      endlink));\n+\n+  double_ftype_double_double\n+    = build_function_type (double_type_node,\n+\t\t\t   tree_cons (NULL_TREE, double_type_node,\n+\t\t\t\t      double_endlink));\n+\n+  int_ftype_int\n+    = build_function_type (integer_type_node, int_endlink);\n+\n+  long_ftype_long\n+    = build_function_type (long_integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, long_integer_type_node,\n+\t\t\t\t      endlink));\n+\n+  int_ftype_cptr_cptr_sizet\n+    = build_function_type (integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, const_ptr_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, const_ptr_type_node,\n+\t\t\t\t\t\t tree_cons (NULL_TREE,\n+\t\t\t\t\t\t\t    sizetype,\n+\t\t\t\t\t\t\t    endlink))));\n+\n+  /* Prototype for strcpy.  */\n+  string_ftype_ptr_ptr\n+    = build_function_type (string_type_node,\n+\t\t\t   tree_cons (NULL_TREE, string_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE,\n+\t\t\t\t\t\t const_string_type_node,\n+\t\t\t\t\t\t endlink)));\n+\n+  /* Prototype for strcmp.  */\n+  int_ftype_string_string\n+    = build_function_type (integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, const_string_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE,\n+\t\t\t\t\t\t const_string_type_node,\n+\t\t\t\t\t\t endlink)));\n+\n+  /* Prototype for strlen.  */\n+  strlen_ftype\n+    = build_function_type ((flag_traditional && ! cplus_mode\n+\t\t\t    ? integer_type_node : sizetype),\n+\t\t\t   tree_cons (NULL_TREE, const_string_type_node,\n+\t\t\t\t      endlink));\n+\n+  traditional_ptr_type_node = (flag_traditional && ! cplus_mode\n+\t\t\t       ? string_type_node : ptr_type_node);\n+\n+  /* Prototype for memcpy.  */\n+  memcpy_ftype\n+    = build_function_type (traditional_ptr_type_node,\n+\t\t\t   tree_cons (NULL_TREE, ptr_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, const_ptr_type_node,\n+\t\t\t\t\t\t sizetype_endlink)));\n+\n+  /* Prototype for memset.  */\n+  memset_ftype\n+    = build_function_type (traditional_ptr_type_node,\n+\t\t\t   tree_cons (NULL_TREE, ptr_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n+\t\t\t\t\t\t tree_cons (NULL_TREE,\n+\t\t\t\t\t\t\t    sizetype,\n+\t\t\t\t\t\t\t    endlink))));\n+\n+  builtin_function (\"__builtin_constant_p\", default_function_type,\n+\t\t    BUILT_IN_CONSTANT_P, NULL_PTR);\n+\n+  builtin_function (\"__builtin_return_address\", ptr_ftype_unsigned,\n+\t\t    BUILT_IN_RETURN_ADDRESS, NULL_PTR);\n+\n+  builtin_function (\"__builtin_frame_address\", ptr_ftype_unsigned,\n+\t\t    BUILT_IN_FRAME_ADDRESS, NULL_PTR);\n+\n+  builtin_function (\"__builtin_alloca\", ptr_ftype_sizetype,\n+\t\t    BUILT_IN_ALLOCA, \"alloca\");\n+  builtin_function (\"__builtin_ffs\", int_ftype_int, BUILT_IN_FFS, NULL_PTR);\n+  /* Define alloca, ffs as builtins.\n+     Declare _exit just to mark it as volatile.  */\n+  if (! no_builtins && ! no_nonansi_builtins)\n+    {\n+      temp = builtin_function (\"alloca\", ptr_ftype_sizetype,\n+\t\t\t       BUILT_IN_ALLOCA, NULL_PTR);\n+      /* Suppress error if redefined as a non-function.  */\n+      DECL_BUILT_IN_NONANSI (temp) = 1;\n+      temp = builtin_function (\"ffs\", int_ftype_int, BUILT_IN_FFS, NULL_PTR);\n+      /* Suppress error if redefined as a non-function.  */\n+      DECL_BUILT_IN_NONANSI (temp) = 1;\n+      temp = builtin_function (\"_exit\", void_ftype_int,\n+\t\t\t       NOT_BUILT_IN, NULL_PTR);\n+      TREE_THIS_VOLATILE (temp) = 1;\n+      TREE_SIDE_EFFECTS (temp) = 1;\n+      /* Suppress error if redefined as a non-function.  */\n+      DECL_BUILT_IN_NONANSI (temp) = 1;\n+    }\n+\n+  builtin_function (\"__builtin_abs\", int_ftype_int, BUILT_IN_ABS, NULL_PTR);\n+  builtin_function (\"__builtin_fabsf\", float_ftype_float, BUILT_IN_FABS,\n+\t\t    NULL_PTR);\n+  builtin_function (\"__builtin_fabs\", double_ftype_double, BUILT_IN_FABS,\n+\t\t    NULL_PTR);\n+  builtin_function (\"__builtin_fabsl\", ldouble_ftype_ldouble, BUILT_IN_FABS,\n+\t\t    NULL_PTR);\n+  builtin_function (\"__builtin_labs\", long_ftype_long, BUILT_IN_LABS,\n+\t\t    NULL_PTR);\n+  builtin_function (\"__builtin_saveregs\", ptr_ftype, BUILT_IN_SAVEREGS,\n+\t\t    NULL_PTR);\n+  builtin_function (\"__builtin_classify_type\", default_function_type,\n+\t\t    BUILT_IN_CLASSIFY_TYPE, NULL_PTR);\n+  builtin_function (\"__builtin_next_arg\", ptr_ftype, BUILT_IN_NEXT_ARG,\n+\t\t    NULL_PTR);\n+  builtin_function (\"__builtin_args_info\", int_ftype_int, BUILT_IN_ARGS_INFO,\n+\t\t    NULL_PTR);\n+  builtin_function (\"__builtin_setjmp\",\n+\t\t    build_function_type (integer_type_node,\n+\t\t\t\t\t tree_cons (NULL_TREE, ptr_type_node,\n+\t\t\t\t\t\t    endlink)),\n+\t\t    BUILT_IN_SETJMP, NULL_PTR);\n+  builtin_function (\"__builtin_longjmp\",\n+\t\t    build_function_type (void_type_node,\n+\t\t\t\t\t tree_cons (NULL_TREE, ptr_type_node,\n+\t\t\t\t\t\t    tree_cons (NULL_TREE,\n+\t\t\t\t\t\t\t       integer_type_node,\n+\t\t\t\t\t\t\t       endlink))),\n+\t\t    BUILT_IN_LONGJMP, NULL_PTR);\n+  builtin_function (\"__builtin_trap\", void_ftype, BUILT_IN_TRAP, NULL_PTR);\n+\n+  /* Untyped call and return.  */\n+  builtin_function (\"__builtin_apply_args\", ptr_ftype,\n+\t\t    BUILT_IN_APPLY_ARGS, NULL_PTR);\n+\n+  temp = tree_cons (NULL_TREE,\n+\t\t    build_pointer_type (build_function_type (void_type_node,\n+\t\t\t\t\t\t\t     NULL_TREE)),\n+\t\t    tree_cons (NULL_TREE,\n+\t\t\t       ptr_type_node,\n+\t\t\t       tree_cons (NULL_TREE,\n+\t\t\t\t\t  sizetype,\n+\t\t\t\t\t  endlink)));\n+  builtin_function (\"__builtin_apply\",\n+\t\t    build_function_type (ptr_type_node, temp),\n+\t\t    BUILT_IN_APPLY, NULL_PTR);\n+  builtin_function (\"__builtin_return\", void_ftype_ptr,\n+\t\t    BUILT_IN_RETURN, NULL_PTR);\n+\n+  /* Currently under experimentation.  */\n+  builtin_function (\"__builtin_memcpy\", memcpy_ftype, BUILT_IN_MEMCPY,\n+\t\t    \"memcpy\");\n+  builtin_function (\"__builtin_memcmp\", int_ftype_cptr_cptr_sizet,\n+\t\t    BUILT_IN_MEMCMP, \"memcmp\");\n+  builtin_function (\"__builtin_memset\", memset_ftype, BUILT_IN_MEMSET,\n+\t\t    \"memset\");\n+  builtin_function (\"__builtin_strcmp\", int_ftype_string_string,\n+\t\t    BUILT_IN_STRCMP, \"strcmp\");\n+  builtin_function (\"__builtin_strcpy\", string_ftype_ptr_ptr,\n+\t\t    BUILT_IN_STRCPY, \"strcpy\");\n+  builtin_function (\"__builtin_strlen\", strlen_ftype,\n+\t\t    BUILT_IN_STRLEN, \"strlen\");\n+  builtin_function (\"__builtin_sqrtf\", float_ftype_float, \n+\t\t    BUILT_IN_FSQRT, \"sqrtf\");\n+  builtin_function (\"__builtin_fsqrt\", double_ftype_double,\n+\t\t    BUILT_IN_FSQRT, \"sqrt\");\n+  builtin_function (\"__builtin_sqrtl\", ldouble_ftype_ldouble,\n+\t\t    BUILT_IN_FSQRT, \"sqrtl\");\n+  builtin_function (\"__builtin_sinf\", float_ftype_float, \n+\t\t    BUILT_IN_SIN, \"sinf\");\n+  builtin_function (\"__builtin_sin\", double_ftype_double, \n+\t\t    BUILT_IN_SIN, \"sin\");\n+  builtin_function (\"__builtin_sinl\", ldouble_ftype_ldouble, \n+\t\t    BUILT_IN_SIN, \"sinl\");\n+  builtin_function (\"__builtin_cosf\", float_ftype_float, \n+\t\t    BUILT_IN_COS, \"cosf\");\n+  builtin_function (\"__builtin_cos\", double_ftype_double, \n+\t\t    BUILT_IN_COS, \"cos\");\n+  builtin_function (\"__builtin_cosl\", ldouble_ftype_ldouble, \n+\t\t    BUILT_IN_COS, \"cosl\");\n+\n+  if (! no_builtins)\n+    {\n+      builtin_function (\"abs\", int_ftype_int, BUILT_IN_ABS, NULL_PTR);\n+      builtin_function (\"fabsf\", float_ftype_float, BUILT_IN_FABS, NULL_PTR);\n+      builtin_function (\"fabs\", double_ftype_double, BUILT_IN_FABS, NULL_PTR);\n+      builtin_function (\"fabsl\", ldouble_ftype_ldouble, BUILT_IN_FABS,\n+\t\t\tNULL_PTR);\n+      builtin_function (\"labs\", long_ftype_long, BUILT_IN_LABS, NULL_PTR);\n+      builtin_function (\"memcpy\", memcpy_ftype, BUILT_IN_MEMCPY, NULL_PTR);\n+      builtin_function (\"memcmp\", int_ftype_cptr_cptr_sizet, BUILT_IN_MEMCMP,\n+\t\t\tNULL_PTR);\n+      builtin_function (\"memset\", memset_ftype, BUILT_IN_MEMSET, NULL_PTR);\n+      builtin_function (\"strcmp\", int_ftype_string_string, BUILT_IN_STRCMP,\n+\t\t\tNULL_PTR);\n+      builtin_function (\"strcpy\", string_ftype_ptr_ptr, BUILT_IN_STRCPY,\n+\t\t\tNULL_PTR);\n+      builtin_function (\"strlen\", strlen_ftype, BUILT_IN_STRLEN, NULL_PTR);\n+      builtin_function (\"sqrtf\", float_ftype_float, BUILT_IN_FSQRT, NULL_PTR);\n+      builtin_function (\"sqrt\", double_ftype_double, BUILT_IN_FSQRT, NULL_PTR);\n+      builtin_function (\"sqrtl\", ldouble_ftype_ldouble, BUILT_IN_FSQRT,\n+\t\t\tNULL_PTR);\n+      builtin_function (\"sinf\", float_ftype_float, BUILT_IN_SIN, NULL_PTR);\n+      builtin_function (\"sin\", double_ftype_double, BUILT_IN_SIN, NULL_PTR);\n+      builtin_function (\"sinl\", ldouble_ftype_ldouble, BUILT_IN_SIN, NULL_PTR);\n+      builtin_function (\"cosf\", float_ftype_float, BUILT_IN_COS, NULL_PTR);\n+      builtin_function (\"cos\", double_ftype_double, BUILT_IN_COS, NULL_PTR);\n+      builtin_function (\"cosl\", ldouble_ftype_ldouble, BUILT_IN_COS, NULL_PTR);\n+\n+      /* Declare these functions volatile\n+\t to avoid spurious \"control drops through\" warnings.  */\n+      temp = builtin_function (\"abort\", cplus_mode ? void_ftype : void_ftype_any,\n+\t\t\t       NOT_BUILT_IN, NULL_PTR);\n+      TREE_THIS_VOLATILE (temp) = 1;\n+      TREE_SIDE_EFFECTS (temp) = 1;\n+\n+#if 0 /* ??? The C++ frontend used to do this.  */\n+      /* Well, these are actually ANSI, but we can't set DECL_BUILT_IN on\n+\t them...  */\n+      DECL_BUILT_IN_NONANSI (temp) = 1;\n+#endif\n+      temp = builtin_function (\"exit\",\n+\t\t\t       cplus_mode ? void_ftype_int : void_ftype_any,\n+\t\t\t       NOT_BUILT_IN, NULL_PTR);\n+      TREE_THIS_VOLATILE (temp) = 1;\n+      TREE_SIDE_EFFECTS (temp) = 1;\n+\n+#if 0 /* ??? The C++ frontend used to do this.  */\n+      /* Well, these are actually ANSI, but we can't set DECL_BUILT_IN on\n+\t them...  */\n+      DECL_BUILT_IN_NONANSI (temp) = 1;\n+#endif\n+    }\n+\n+#if 0\n+  /* Support for these has not been written in either expand_builtin\n+     or build_function_call.  */\n+  builtin_function (\"__builtin_div\", default_ftype, BUILT_IN_DIV, NULL_PTR);\n+  builtin_function (\"__builtin_ldiv\", default_ftype, BUILT_IN_LDIV, NULL_PTR);\n+  builtin_function (\"__builtin_ffloor\", double_ftype_double, BUILT_IN_FFLOOR,\n+\t\t    NULL_PTR);\n+  builtin_function (\"__builtin_fceil\", double_ftype_double, BUILT_IN_FCEIL,\n+\t\t    NULL_PTR);\n+  builtin_function (\"__builtin_fmod\", double_ftype_double_double,\n+\t\t    BUILT_IN_FMOD, NULL_PTR);\n+  builtin_function (\"__builtin_frem\", double_ftype_double_double,\n+\t\t    BUILT_IN_FREM, NULL_PTR);\n+  builtin_function (\"__builtin_getexp\", double_ftype_double, BUILT_IN_GETEXP,\n+\t\t    NULL_PTR);\n+  builtin_function (\"__builtin_getman\", double_ftype_double, BUILT_IN_GETMAN,\n+\t\t    NULL_PTR);\n+#endif\n+}"}, {"sha": "0290c8f0e63c5595bc58f9eff226ac5164afc8b5", "filename": "gcc/c-common.h", "status": "added", "additions": 192, "deletions": 0, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=7f4edbcba63f129d037ffba8bd6deab84da5fd43", "patch": "@@ -0,0 +1,192 @@\n+/* Definitions for c-common.c.\n+   Copyright (C) 1987, 93, 94, 95, 97, 98, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Standard named or nameless data types of the C compiler.  */\n+\n+enum c_tree_index\n+{\n+    CTI_INTQI_TYPE,\n+    CTI_INTHI_TYPE,\n+    CTI_INTSI_TYPE,\n+    CTI_INTDI_TYPE,\n+    CTI_INTTI_TYPE,\n+\n+    CTI_UINTQI_TYPE,\n+    CTI_UINTHI_TYPE,\n+    CTI_UINTSI_TYPE,\n+    CTI_UINTDI_TYPE,\n+    CTI_UINTTI_TYPE,\n+    \n+    CTI_SIGNED_CHAR_TYPE,\n+    CTI_UNSIGNED_CHAR_TYPE,\n+    CTI_WCHAR_TYPE,\n+    CTI_SIGNED_WCHAR_TYPE,\n+    CTI_UNSIGNED_WCHAR_TYPE,\n+    CTI_SHORT_INTEGER_TYPE,\n+    CTI_SHORT_UNSIGNED_TYPE,\n+    CTI_LONG_INTEGER_TYPE,\n+    CTI_LONG_UNSIGNED_TYPE,\n+    CTI_LONG_LONG_INTEGER_TYPE,\n+    CTI_LONG_LONG_UNSIGNED_TYPE,\n+    CTI_WIDEST_INT_LIT_TYPE,\n+    CTI_WIDEST_UINT_LIT_TYPE,\n+\n+    CTI_COMPLEX_INTEGER_TYPE,\n+    CTI_COMPLEX_FLOAT_TYPE,\n+    CTI_COMPLEX_DOUBLE_TYPE,\n+    CTI_COMPLEX_LONG_DOUBLE_TYPE,\n+\n+    CTI_FLOAT_TYPE,\n+    CTI_DOUBLE_TYPE,\n+    CTI_LONG_DOUBLE_TYPE,\n+\n+    CTI_CHAR_ARRAY_TYPE,\n+    CTI_WCHAR_ARRAY_TYPE,\n+    CTI_INT_ARRAY_TYPE,\n+    CTI_STRING_TYPE,\n+    CTI_CONST_STRING_TYPE,\n+\n+    CTI_PTR_TYPE,\n+    CTI_CONST_PTR_TYPE,\n+    CTI_PTRDIFF_TYPE,\n+\n+    CTI_BOOLEAN_TYPE,\n+    CTI_BOOLEAN_TRUE,\n+    CTI_BOOLEAN_FALSE,\n+    CTI_DEFAULT_FUNCTION_TYPE,\n+    CTI_VOID_LIST,\n+\n+    CTI_VOID_FTYPE,\n+    CTI_VOID_FTYPE_PTR,\n+    CTI_INT_FTYPE_INT,\n+    CTI_PTR_FTYPE_SIZETYPE,\n+    \n+    CTI_MAX\n+};\n+\n+extern tree c_global_trees[CTI_MAX];\n+\n+#define intQI_type_node\t\t\tc_global_trees[CTI_INTQI_TYPE]\n+#define intHI_type_node\t\t\tc_global_trees[CTI_INTHI_TYPE]\n+#define intSI_type_node\t\t\tc_global_trees[CTI_INTSI_TYPE]\n+#define intDI_type_node\t\t\tc_global_trees[CTI_INTDI_TYPE]\n+#if HOST_BITS_PER_WIDE_INT >= 64\n+#define intTI_type_node\t\t\tc_global_trees[CTI_INTTI_TYPE]\n+#endif\n+\n+#define unsigned_intQI_type_node\tc_global_trees[CTI_UINTQI_TYPE]\n+#define unsigned_intHI_type_node\tc_global_trees[CTI_UINTHI_TYPE]\n+#define unsigned_intSI_type_node\tc_global_trees[CTI_UINTSI_TYPE]\n+#define unsigned_intDI_type_node\tc_global_trees[CTI_UINTDI_TYPE]\n+#if HOST_BITS_PER_WIDE_INT >= 64\n+#define unsigned_intTI_type_node\tc_global_trees[CTI_UINTTI_TYPE]\n+#endif\n+\n+#define signed_char_type_node\t\tc_global_trees[CTI_SIGNED_CHAR_TYPE]\n+#define unsigned_char_type_node\t\tc_global_trees[CTI_UNSIGNED_CHAR_TYPE]\n+#define wchar_type_node\t\t\tc_global_trees[CTI_WCHAR_TYPE]\n+#define signed_wchar_type_node\t\tc_global_trees[CTI_SIGNED_WCHAR_TYPE]\n+#define unsigned_wchar_type_node\tc_global_trees[CTI_UNSIGNED_WCHAR_TYPE]\n+#define short_integer_type_node\t\tc_global_trees[CTI_SHORT_INTEGER_TYPE]\n+#define short_unsigned_type_node\tc_global_trees[CTI_SHORT_UNSIGNED_TYPE]\n+#define long_integer_type_node\t\tc_global_trees[CTI_LONG_INTEGER_TYPE]\n+#define long_unsigned_type_node\t\tc_global_trees[CTI_LONG_UNSIGNED_TYPE]\n+#define long_long_integer_type_node\tc_global_trees[CTI_LONG_LONG_INTEGER_TYPE]\n+#define long_long_unsigned_type_node\tc_global_trees[CTI_LONG_LONG_UNSIGNED_TYPE]\n+#define widest_integer_literal_type_node c_global_trees[CTI_WIDEST_INT_LIT_TYPE]\n+#define widest_unsigned_literal_type_node c_global_trees[CTI_WIDEST_UINT_LIT_TYPE]\n+\n+#define float_type_node\t\t\tc_global_trees[CTI_FLOAT_TYPE]\n+#define double_type_node\t\tc_global_trees[CTI_DOUBLE_TYPE]\n+#define long_double_type_node\t\tc_global_trees[CTI_LONG_DOUBLE_TYPE]\n+\n+#define complex_integer_type_node\tc_global_trees[CTI_COMPLEX_INTEGER_TYPE]\n+#define complex_float_type_node\t\tc_global_trees[CTI_COMPLEX_FLOAT_TYPE]\n+#define complex_double_type_node\tc_global_trees[CTI_COMPLEX_DOUBLE_TYPE]\n+#define complex_long_double_type_node\tc_global_trees[CTI_COMPLEX_LONG_DOUBLE_TYPE]\n+\n+#define boolean_type_node\t\tc_global_trees[CTI_BOOLEAN_TYPE]\n+#define boolean_true_node\t\tc_global_trees[CTI_BOOLEAN_TRUE]\n+#define boolean_false_node\t\tc_global_trees[CTI_BOOLEAN_FALSE]\n+\n+#define ptr_type_node\t\t\tc_global_trees[CTI_PTR_TYPE]\n+#define const_ptr_type_node\t\tc_global_trees[CTI_CONST_PTR_TYPE]\n+#define ptrdiff_type_node\t\tc_global_trees[CTI_PTRDIFF_TYPE]\n+\n+#define char_array_type_node\t\tc_global_trees[CTI_CHAR_ARRAY_TYPE]\n+#define wchar_array_type_node\t\tc_global_trees[CTI_WCHAR_ARRAY_TYPE]\n+#define int_array_type_node\t\tc_global_trees[CTI_INT_ARRAY_TYPE]\n+#define string_type_node\t\tc_global_trees[CTI_STRING_TYPE]\n+#define const_string_type_node\t\tc_global_trees[CTI_CONST_STRING_TYPE]\n+\n+#define default_function_type\t\tc_global_trees[CTI_DEFAULT_FUNCTION_TYPE]\n+#define void_list_node\t\t\tc_global_trees[CTI_VOID_LIST]\n+#define void_ftype\t\t\tc_global_trees[CTI_VOID_FTYPE]\n+#define void_ftype_ptr\t\t\tc_global_trees[CTI_VOID_FTYPE_PTR]\n+#define int_ftype_int\t\t\tc_global_trees[CTI_INT_FTYPE_INT]\n+#define ptr_ftype_sizetype\t\tc_global_trees[CTI_PTR_FTYPE_SIZETYPE]\n+\n+extern void declare_function_name\t\tPROTO((void));\n+extern void decl_attributes\t\t\tPROTO((tree, tree, tree));\n+extern void init_function_format_info\t\tPROTO((void));\n+extern void check_function_format\t\tPROTO((tree, tree, tree));\n+extern void c_apply_type_quals_to_decl\t\tPROTO((int, tree));\n+extern int c_get_alias_set\t\t\tPROTO((tree));\n+/* Print an error message for invalid operands to arith operation CODE.\n+   NOP_EXPR is used as a special case (see truthvalue_conversion).  */\n+extern void binary_op_error\t\t\tPROTO((enum tree_code));\n+extern void c_expand_expr_stmt\t\t\tPROTO((tree));\n+extern void c_expand_start_cond\t\t\tPROTO((tree, int, int));\n+extern void c_expand_start_else\t\t\tPROTO((void));\n+extern void c_expand_end_cond\t\t\tPROTO((void));\n+/* Validate the expression after `case' and apply default promotions.  */\n+extern tree check_case_value\t\t\tPROTO((tree));\n+/* Concatenate a list of STRING_CST nodes into one STRING_CST.  */\n+extern tree combine_strings\t\t\tPROTO((tree));\n+extern void constant_expression_warning\t\tPROTO((tree));\n+extern tree convert_and_check\t\t\tPROTO((tree, tree));\n+extern void overflow_warning\t\t\tPROTO((tree));\n+extern void unsigned_conversion_warning\t\tPROTO((tree, tree));\n+/* Read the rest of the current #-directive line.  */\n+#if USE_CPPLIB\n+extern char *get_directive_line\t\t\tPROTO((void));\n+#define GET_DIRECTIVE_LINE() get_directive_line ()\n+#else\n+extern char *get_directive_line\t\t\tPROTO((FILE *));\n+#define GET_DIRECTIVE_LINE() get_directive_line (finput)\n+#endif\n+\n+/* Subroutine of build_binary_op, used for comparison operations.\n+   See if the operands have both been converted from subword integer types\n+   and, if so, perhaps change them both back to their original type.  */\n+extern tree shorten_compare\t\t\tPROTO((tree *, tree *, tree *, enum tree_code *));\n+/* Prepare expr to be an argument of a TRUTH_NOT_EXPR,\n+   or validate its data type for an `if' or `while' statement or ?..: exp. */\n+extern tree truthvalue_conversion\t\tPROTO((tree));\n+extern tree type_for_mode\t\t\tPROTO((enum machine_mode, int));\n+extern tree type_for_size\t\t\tPROTO((unsigned, int));\n+\n+/* Declare a predefined function.  Return the declaration.  This function is\n+   provided by each language frontend.  */\n+extern tree builtin_function\t\t\tPROTO((const char *, tree, enum built_in_function, const char *));\n+\n+/* Build tree nodes and builtin functions common to both C and C++ language\n+   frontends.  */\n+extern void c_common_nodes_and_builtins\t\tPROTO((int, int, int));"}, {"sha": "0a4e7aa4818f306cdc04b2ac5a1b3214d7dea16d", "filename": "gcc/c-decl.c", "status": "modified", "additions": 9, "deletions": 417, "changes": 426, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=7f4edbcba63f129d037ffba8bd6deab84da5fd43", "patch": "@@ -111,111 +111,13 @@ enum decl_context\n \n tree error_mark_node;\n \n-/* INTEGER_TYPE and REAL_TYPE nodes for the standard data types */\n+/* These can't be part of the above array, since they are declared\n+   individually in tree.h, and used by the debug output routines.  */\n \n-tree short_integer_type_node;\n+tree void_type_node;\n+tree char_type_node;\n tree integer_type_node;\n-tree long_integer_type_node;\n-tree long_long_integer_type_node;\n-\n-tree short_unsigned_type_node;\n tree unsigned_type_node;\n-tree long_unsigned_type_node;\n-tree long_long_unsigned_type_node;\n-\n-/* These are used for integer literals that are larger than \n-   a long long.  The largest integer literals we can handle\n-   are the width of two HOST_WIDE_INTs.  If two HOST_WIDE_INTs\n-   are not larger than the target's long long, then these\n-   will never be used. */\n-tree widest_integer_literal_type_node;\n-tree widest_unsigned_literal_type_node;\n-\n-tree boolean_type_node;\n-tree boolean_false_node;\n-tree boolean_true_node;\n-\n-tree ptrdiff_type_node;\n-\n-tree unsigned_char_type_node;\n-tree signed_char_type_node;\n-tree char_type_node;\n-tree wchar_type_node;\n-tree signed_wchar_type_node;\n-tree unsigned_wchar_type_node;\n-\n-tree float_type_node;\n-tree double_type_node;\n-tree long_double_type_node;\n-\n-tree complex_integer_type_node;\n-tree complex_float_type_node;\n-tree complex_double_type_node;\n-tree complex_long_double_type_node;\n-\n-tree intQI_type_node;\n-tree intHI_type_node;\n-tree intSI_type_node;\n-tree intDI_type_node;\n-#if HOST_BITS_PER_WIDE_INT >= 64\n-tree intTI_type_node;\n-#endif\n-\n-tree unsigned_intQI_type_node;\n-tree unsigned_intHI_type_node;\n-tree unsigned_intSI_type_node;\n-tree unsigned_intDI_type_node;\n-#if HOST_BITS_PER_WIDE_INT >= 64\n-tree unsigned_intTI_type_node;\n-#endif\n-\n-/* a VOID_TYPE node.  */\n-\n-tree void_type_node;\n-\n-/* Nodes for types `void *' and `const void *'.  */\n-\n-tree ptr_type_node, const_ptr_type_node;\n-\n-/* Nodes for types `char *' and `const char *'.  */\n-\n-tree string_type_node, const_string_type_node;\n-\n-/* Type `char[SOMENUMBER]'.\n-   Used when an array of char is needed and the size is irrelevant.  */\n-\n-tree char_array_type_node;\n-\n-/* Type `int[SOMENUMBER]' or something like it.\n-   Used when an array of int needed and the size is irrelevant.  */\n-\n-tree int_array_type_node;\n-\n-/* Type `wchar_t[SOMENUMBER]' or something like it.\n-   Used when a wide string literal is created.  */\n-\n-tree wchar_array_type_node;\n-\n-/* type `int ()' -- used for implicit declaration of functions.  */\n-\n-tree default_function_type;\n-\n-/* function types `double (double)' and `double (double, double)', etc.  */\n-\n-tree double_ftype_double, double_ftype_double_double;\n-tree int_ftype_int, long_ftype_long;\n-tree float_ftype_float;\n-tree ldouble_ftype_ldouble;\n-\n-/* Function type `void (void *, void *, int)' and similar ones */\n-\n-tree void_ftype_ptr_ptr_int, int_ftype_ptr_ptr_int, void_ftype_ptr_int_int;\n-\n-/* Function type `char *(char *, char *)' and similar ones */\n-tree string_ftype_ptr_ptr, int_ftype_string_string;\n-\n-/* Function type `int (const void *, const void *, size_t)' */\n-tree int_ftype_cptr_cptr_sizet;\n \n /* Two expressions that are constants with value zero.\n    The first is of type `int', the second of type `void *'.  */\n@@ -3027,13 +2929,8 @@ void\n init_decl_processing ()\n {\n   register tree endlink;\n-  /* Either char* or void*.  */\n-  tree traditional_ptr_type_node;\n-  /* Data types of memcpy and strlen.  */\n-  tree memcpy_ftype, memset_ftype, strlen_ftype;\n-  tree void_ftype_any, ptr_ftype_void, ptr_ftype_ptr;\n+  tree ptr_ftype_void, ptr_ftype_ptr;\n   int wchar_type_size;\n-  tree temp;\n   tree array_domain_type;\n \n   current_function_decl = NULL;\n@@ -3255,130 +3152,23 @@ init_decl_processing ()\n   wchar_array_type_node\n     = build_array_type (wchar_type_node, array_domain_type);\n \n+  void_list_node = tree_cons (NULL_TREE, void_type_node, NULL_TREE);\n+\n   default_function_type\n     = build_function_type (integer_type_node, NULL_TREE);\n \n   ptr_type_node = build_pointer_type (void_type_node);\n   const_ptr_type_node\n     = build_pointer_type (build_type_variant (void_type_node, 1, 0));\n \n-  endlink = tree_cons (NULL_TREE, void_type_node, NULL_TREE);\n-\n-  void_ftype_any\n-    = build_function_type (void_type_node, NULL_TREE);\n-\n-  float_ftype_float\n-    = build_function_type (float_type_node,\n-\t\t\t   tree_cons (NULL_TREE, float_type_node, endlink));\n-\n-  double_ftype_double\n-    = build_function_type (double_type_node,\n-\t\t\t   tree_cons (NULL_TREE, double_type_node, endlink));\n-\n-  ldouble_ftype_ldouble\n-    = build_function_type (long_double_type_node,\n-\t\t\t   tree_cons (NULL_TREE, long_double_type_node,\n-\t\t\t\t      endlink));\n-\n-  double_ftype_double_double\n-    = build_function_type (double_type_node,\n-\t\t\t   tree_cons (NULL_TREE, double_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE,\n-\t\t\t\t\t\t double_type_node, endlink)));\n-\n-  int_ftype_int\n-    = build_function_type (integer_type_node,\n-\t\t\t   tree_cons (NULL_TREE, integer_type_node, endlink));\n-\n-  long_ftype_long\n-    = build_function_type (long_integer_type_node,\n-\t\t\t   tree_cons (NULL_TREE,\n-\t\t\t\t      long_integer_type_node, endlink));\n-\n-  void_ftype_ptr_ptr_int\n-    = build_function_type (void_type_node,\n-\t\t\t   tree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t\t\t\t tree_cons (NULL_TREE,\n-\t\t\t\t\t\t\t    integer_type_node,\n-\t\t\t\t\t\t\t    endlink))));\n-\n-  int_ftype_cptr_cptr_sizet\n-    = build_function_type (integer_type_node,\n-\t\t\t   tree_cons (NULL_TREE, const_ptr_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, const_ptr_type_node,\n-\t\t\t\t\t\t tree_cons (NULL_TREE,\n-\t\t\t\t\t\t\t    sizetype,\n-\t\t\t\t\t\t\t    endlink))));\n-\n-  void_ftype_ptr_int_int\n-    = build_function_type (void_type_node,\n-\t\t\t   tree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n-\t\t\t\t\t\t tree_cons (NULL_TREE,\n-\t\t\t\t\t\t\t    integer_type_node,\n-\t\t\t\t\t\t\t    endlink))));\n-\n-  string_ftype_ptr_ptr\t\t/* strcpy prototype */\n-    = build_function_type (string_type_node,\n-\t\t\t   tree_cons (NULL_TREE, string_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE,\n-\t\t\t\t\t\t const_string_type_node,\n-\t\t\t\t\t\t endlink)));\n-\n-  int_ftype_string_string\t/* strcmp prototype */\n-    = build_function_type (integer_type_node,\n-\t\t\t   tree_cons (NULL_TREE, const_string_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE,\n-\t\t\t\t\t\t const_string_type_node,\n-\t\t\t\t\t\t endlink)));\n-\n-  strlen_ftype\t\t/* strlen prototype */\n-    = build_function_type (flag_traditional ? integer_type_node : sizetype,\n-\t\t\t   tree_cons (NULL_TREE, const_string_type_node,\n-\t\t\t\t      endlink));\n-\n-  traditional_ptr_type_node\n-    = (flag_traditional ? string_type_node : ptr_type_node);\n-\n-  memcpy_ftype\t/* memcpy prototype */\n-    = build_function_type (traditional_ptr_type_node,\n-\t\t\t   tree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, const_ptr_type_node,\n-\t\t\t\t\t\t tree_cons (NULL_TREE,\n-\t\t\t\t\t\t\t    sizetype,\n-\t\t\t\t\t\t\t    endlink))));\n-\n-  memset_ftype\t/* memset prototype */\n-    = build_function_type (traditional_ptr_type_node,\n-\t\t\t   tree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n-\t\t\t\t\t\t tree_cons (NULL_TREE,\n-\t\t\t\t\t\t\t    sizetype,\n-\t\t\t\t\t\t\t    endlink))));\n+  c_common_nodes_and_builtins (0, flag_no_builtin, flag_no_nonansi_builtin);\n \n+  endlink = void_list_node;\n   ptr_ftype_void = build_function_type (ptr_type_node, endlink);\n   ptr_ftype_ptr\n     = build_function_type (ptr_type_node,\n \t\t\t   tree_cons (NULL_TREE, ptr_type_node, endlink));\n \n-  builtin_function (\"__builtin_constant_p\", default_function_type,\n-\t\t    BUILT_IN_CONSTANT_P, NULL_PTR);\n-\n-  builtin_function (\"__builtin_return_address\",\n-\t\t    build_function_type (ptr_type_node, \n-\t\t\t\t\t tree_cons (NULL_TREE,\n-\t\t\t\t\t\t    unsigned_type_node,\n-\t\t\t\t\t\t    endlink)),\n-\t\t    BUILT_IN_RETURN_ADDRESS, NULL_PTR);\n-\n-  builtin_function (\"__builtin_frame_address\",\n-\t\t    build_function_type (ptr_type_node, \n-\t\t\t\t\t tree_cons (NULL_TREE,\n-\t\t\t\t\t\t    unsigned_type_node,\n-\t\t\t\t\t\t    endlink)),\n-\t\t    BUILT_IN_FRAME_ADDRESS, NULL_PTR);\n-\n   builtin_function (\"__builtin_aggregate_incoming_address\",\n \t\t    build_function_type (ptr_type_node, NULL_TREE),\n \t\t    BUILT_IN_AGGREGATE_INCOMING_ADDRESS, NULL_PTR);\n@@ -3409,204 +3199,6 @@ init_decl_processing ()\n \t\t\t\t\t\t\t   endlink)))),\n      BUILT_IN_EH_RETURN, NULL_PTR);\n \n-  builtin_function (\"__builtin_alloca\",\n-\t\t    build_function_type (ptr_type_node,\n-\t\t\t\t\t tree_cons (NULL_TREE,\n-\t\t\t\t\t\t    sizetype,\n-\t\t\t\t\t\t    endlink)),\n-\t\t    BUILT_IN_ALLOCA, \"alloca\");\n-  builtin_function (\"__builtin_ffs\", int_ftype_int, BUILT_IN_FFS, NULL_PTR);\n-  /* Define alloca, ffs as builtins.\n-     Declare _exit just to mark it as volatile.  */\n-  if (! flag_no_builtin && !flag_no_nonansi_builtin)\n-    {\n-      temp = builtin_function (\"alloca\",\n-\t\t\t       build_function_type (ptr_type_node,\n-\t\t\t\t\t\t    tree_cons (NULL_TREE,\n-\t\t\t\t\t\t\t       sizetype,\n-\t\t\t\t\t\t\t       endlink)),\n-\t\t\t       BUILT_IN_ALLOCA, NULL_PTR);\n-      /* Suppress error if redefined as a non-function.  */\n-      DECL_BUILT_IN_NONANSI (temp) = 1;\n-      temp = builtin_function (\"ffs\", int_ftype_int, BUILT_IN_FFS, NULL_PTR);\n-      /* Suppress error if redefined as a non-function.  */\n-      DECL_BUILT_IN_NONANSI (temp) = 1;\n-      temp = builtin_function (\"_exit\", void_ftype_any, NOT_BUILT_IN,\n-\t\t\t       NULL_PTR);\n-      TREE_THIS_VOLATILE (temp) = 1;\n-      TREE_SIDE_EFFECTS (temp) = 1;\n-      /* Suppress error if redefined as a non-function.  */\n-      DECL_BUILT_IN_NONANSI (temp) = 1;\n-    }\n-\n-  builtin_function (\"__builtin_abs\", int_ftype_int, BUILT_IN_ABS, NULL_PTR);\n-  builtin_function (\"__builtin_fabsf\", float_ftype_float, BUILT_IN_FABS,\n-\t\t    NULL_PTR);\n-  builtin_function (\"__builtin_fabs\", double_ftype_double, BUILT_IN_FABS,\n-\t\t    NULL_PTR);\n-  builtin_function (\"__builtin_fabsl\", ldouble_ftype_ldouble, BUILT_IN_FABS,\n-\t\t    NULL_PTR);\n-  builtin_function (\"__builtin_labs\", long_ftype_long, BUILT_IN_LABS,\n-\t\t    NULL_PTR);\n-  builtin_function (\"__builtin_saveregs\",\n-\t\t    build_function_type (ptr_type_node, NULL_TREE),\n-\t\t    BUILT_IN_SAVEREGS, NULL_PTR);\n-/* EXPAND_BUILTIN_VARARGS is obsolete.  */\n-#if 0\n-  builtin_function (\"__builtin_varargs\",\n-\t\t    build_function_type (ptr_type_node,\n-\t\t\t\t\t tree_cons (NULL_TREE,\n-\t\t\t\t\t\t    integer_type_node,\n-\t\t\t\t\t\t    endlink)),\n-\t\t    BUILT_IN_VARARGS, NULL_PTR);\n-#endif\n-  builtin_function (\"__builtin_classify_type\", default_function_type,\n-\t\t    BUILT_IN_CLASSIFY_TYPE, NULL_PTR);\n-  builtin_function (\"__builtin_next_arg\",\n-\t\t    build_function_type (ptr_type_node, NULL_TREE),\n-\t\t    BUILT_IN_NEXT_ARG, NULL_PTR);\n-  builtin_function (\"__builtin_args_info\",\n-\t\t    build_function_type (integer_type_node,\n-\t\t\t\t\t tree_cons (NULL_TREE,\n-\t\t\t\t\t\t    integer_type_node,\n-\t\t\t\t\t\t    endlink)),\n-\t\t    BUILT_IN_ARGS_INFO, NULL_PTR);\n-\n-  /* Untyped call and return.  */\n-  builtin_function (\"__builtin_apply_args\",\n-\t\t    build_function_type (ptr_type_node, NULL_TREE),\n-\t\t    BUILT_IN_APPLY_ARGS, NULL_PTR);\n-\n-  temp = tree_cons (NULL_TREE,\n-\t\t    build_pointer_type (build_function_type (void_type_node,\n-\t\t\t\t\t\t\t     NULL_TREE)),\n-\t\t    tree_cons (NULL_TREE,\n-\t\t\t       ptr_type_node,\n-\t\t\t       tree_cons (NULL_TREE,\n-\t\t\t\t\t  sizetype,\n-\t\t\t\t\t  endlink)));\n-  builtin_function (\"__builtin_apply\",\n-\t\t    build_function_type (ptr_type_node, temp),\n-\t\t    BUILT_IN_APPLY, NULL_PTR);\n-  builtin_function (\"__builtin_return\",\n-\t\t    build_function_type (void_type_node,\n-\t\t\t\t\t tree_cons (NULL_TREE,\n-\t\t\t\t\t\t    ptr_type_node,\n-\t\t\t\t\t\t    endlink)),\n-\t\t    BUILT_IN_RETURN, NULL_PTR);\n-\n-  /* Currently under experimentation.  */\n-  builtin_function (\"__builtin_memcpy\", memcpy_ftype,\n-\t\t    BUILT_IN_MEMCPY, \"memcpy\");\n-  builtin_function (\"__builtin_memcmp\", int_ftype_cptr_cptr_sizet,\n-\t\t    BUILT_IN_MEMCMP, \"memcmp\");\n-  builtin_function (\"__builtin_memset\", memset_ftype,\n-\t\t    BUILT_IN_MEMSET, \"memset\");\n-  builtin_function (\"__builtin_strcmp\", int_ftype_string_string,\n-\t\t    BUILT_IN_STRCMP, \"strcmp\");\n-  builtin_function (\"__builtin_strcpy\", string_ftype_ptr_ptr,\n-\t\t    BUILT_IN_STRCPY, \"strcpy\");\n-  builtin_function (\"__builtin_strlen\", strlen_ftype,\n-\t\t    BUILT_IN_STRLEN, \"strlen\");\n-  builtin_function (\"__builtin_sqrtf\", float_ftype_float, \n-\t\t    BUILT_IN_FSQRT, \"sqrtf\");\n-  builtin_function (\"__builtin_fsqrt\", double_ftype_double, \n-\t\t    BUILT_IN_FSQRT, \"sqrt\");\n-  builtin_function (\"__builtin_sqrtl\", ldouble_ftype_ldouble, \n-\t\t    BUILT_IN_FSQRT, \"sqrtl\");\n-  builtin_function (\"__builtin_sinf\", float_ftype_float, \n-\t\t    BUILT_IN_SIN, \"sinf\");\n-  builtin_function (\"__builtin_sin\", double_ftype_double, \n-\t\t    BUILT_IN_SIN, \"sin\");\n-  builtin_function (\"__builtin_sinl\", ldouble_ftype_ldouble, \n-\t\t    BUILT_IN_SIN, \"sinl\");\n-  builtin_function (\"__builtin_cosf\", float_ftype_float, \n-\t\t    BUILT_IN_COS, \"cosf\");\n-  builtin_function (\"__builtin_cos\", double_ftype_double, \n-\t\t    BUILT_IN_COS, \"cos\");\n-  builtin_function (\"__builtin_cosl\", ldouble_ftype_ldouble, \n-\t\t    BUILT_IN_COS, \"cosl\");\n-  builtin_function (\"__builtin_setjmp\",\n-\t\t    build_function_type (integer_type_node,\n-\t\t\t\t\t tree_cons (NULL_TREE,\n-\t\t\t\t\t\t    ptr_type_node, endlink)),\n-\t\t    BUILT_IN_SETJMP, NULL_PTR);\n-  builtin_function (\"__builtin_longjmp\",\n-\t\t    build_function_type\n-\t\t    (void_type_node,\n-\t\t     tree_cons (NULL, ptr_type_node,\n-\t\t\t\ttree_cons (NULL_TREE,\n-\t\t\t\t\t   integer_type_node,\n-\t\t\t\t\t   endlink))),\n-\t\t    BUILT_IN_LONGJMP, NULL_PTR);\n-  builtin_function (\"__builtin_trap\",\n-\t\t    build_function_type (void_type_node, endlink),\n-\t\t    BUILT_IN_TRAP, NULL_PTR);\n-\n-  /* In an ANSI C program, it is okay to supply built-in meanings\n-     for these functions, since applications cannot validly use them\n-     with any other meaning.\n-     However, honor the -fno-builtin option.  */\n-  if (!flag_no_builtin)\n-    {\n-      builtin_function (\"abs\", int_ftype_int, BUILT_IN_ABS, NULL_PTR);\n-      builtin_function (\"fabsf\", float_ftype_float, BUILT_IN_FABS, NULL_PTR);\n-      builtin_function (\"fabs\", double_ftype_double, BUILT_IN_FABS, NULL_PTR);\n-      builtin_function (\"fabsl\", ldouble_ftype_ldouble, BUILT_IN_FABS,\n-\t\t\tNULL_PTR);\n-      builtin_function (\"labs\", long_ftype_long, BUILT_IN_LABS, NULL_PTR);\n-      builtin_function (\"memcpy\", memcpy_ftype, BUILT_IN_MEMCPY, NULL_PTR);\n-      builtin_function (\"memcmp\", int_ftype_cptr_cptr_sizet, BUILT_IN_MEMCMP,\n-\t\t\tNULL_PTR);\n-      builtin_function (\"memset\", memset_ftype, BUILT_IN_MEMSET, NULL_PTR);\n-      builtin_function (\"strcmp\", int_ftype_string_string, BUILT_IN_STRCMP,\n-\t\t\tNULL_PTR);\n-      builtin_function (\"strcpy\", string_ftype_ptr_ptr, BUILT_IN_STRCPY,\n-\t\t\tNULL_PTR);\n-      builtin_function (\"strlen\", strlen_ftype, BUILT_IN_STRLEN, NULL_PTR);\n-      builtin_function (\"sqrtf\", float_ftype_float, BUILT_IN_FSQRT, NULL_PTR);\n-      builtin_function (\"sqrt\", double_ftype_double, BUILT_IN_FSQRT, NULL_PTR);\n-      builtin_function (\"sqrtl\", ldouble_ftype_ldouble, BUILT_IN_FSQRT,\n-\t\t\tNULL_PTR);\n-      builtin_function (\"sinf\", float_ftype_float, BUILT_IN_SIN, NULL_PTR);\n-      builtin_function (\"sin\", double_ftype_double, BUILT_IN_SIN, NULL_PTR);\n-      builtin_function (\"sinl\", ldouble_ftype_ldouble, BUILT_IN_SIN, NULL_PTR);\n-      builtin_function (\"cosf\", float_ftype_float, BUILT_IN_COS, NULL_PTR);\n-      builtin_function (\"cos\", double_ftype_double, BUILT_IN_COS, NULL_PTR);\n-      builtin_function (\"cosl\", ldouble_ftype_ldouble, BUILT_IN_COS, NULL_PTR);\n-\n-      /* Declare these functions volatile\n-\t to avoid spurious \"control drops through\" warnings.  */\n-      /* Don't specify the argument types, to avoid errors\n-\t from certain code which isn't valid in ANSI but which exists.  */\n-      temp = builtin_function (\"abort\", void_ftype_any, NOT_BUILT_IN,\n-\t\t\t       NULL_PTR);\n-      TREE_THIS_VOLATILE (temp) = 1;\n-      TREE_SIDE_EFFECTS (temp) = 1;\n-      temp = builtin_function (\"exit\", void_ftype_any, NOT_BUILT_IN, NULL_PTR);\n-      TREE_THIS_VOLATILE (temp) = 1;\n-      TREE_SIDE_EFFECTS (temp) = 1;\n-    }\n-\n-#if 0\n-  /* Support for these has not been written in either expand_builtin\n-     or build_function_call.  */\n-  builtin_function (\"__builtin_div\", default_ftype, BUILT_IN_DIV, NULL_PTR);\n-  builtin_function (\"__builtin_ldiv\", default_ftype, BUILT_IN_LDIV, NULL_PTR);\n-  builtin_function (\"__builtin_ffloor\", double_ftype_double, BUILT_IN_FFLOOR,\n-\t\t    NULL_PTR);\n-  builtin_function (\"__builtin_fceil\", double_ftype_double, BUILT_IN_FCEIL,\n-\t\t    NULL_PTR);\n-  builtin_function (\"__builtin_fmod\", double_ftype_double_double,\n-\t\t    BUILT_IN_FMOD, NULL_PTR);\n-  builtin_function (\"__builtin_frem\", double_ftype_double_double,\n-\t\t    BUILT_IN_FREM, NULL_PTR);\n-  builtin_function (\"__builtin_getexp\", double_ftype_double, BUILT_IN_GETEXP,\n-\t\t    NULL_PTR);\n-  builtin_function (\"__builtin_getman\", double_ftype_double, BUILT_IN_GETMAN,\n-\t\t    NULL_PTR);\n-#endif\n-\n   pedantic_lvalues = pedantic;\n \n   /* Create the global bindings for __FUNCTION__ and __PRETTY_FUNCTION__.  */"}, {"sha": "1db0790a1c8a78746b0428b7e4bb0a3c8a9d5690", "filename": "gcc/c-tree.h", "status": "modified", "additions": 2, "deletions": 105, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=7f4edbcba63f129d037ffba8bd6deab84da5fd43", "patch": "@@ -21,6 +21,8 @@ Boston, MA 02111-1307, USA.  */\n #ifndef _C_TREE_H\n #define _C_TREE_H\n \n+#include \"c-common.h\"\n+\n /* Language-dependent contents of an identifier.  */\n \n /* The limbo_value is used for block level extern declarations, which need\n@@ -175,116 +177,11 @@ extern tree build_objc_string\t\t\tPROTO((int, const char *));\n /* in c-aux-info.c */\n extern void gen_aux_info_record                 PROTO((tree, int, int, int));\n \n-/* in c-common.c */\n-extern void declare_function_name               PROTO((void));\n-extern void decl_attributes                     PROTO((tree, tree, tree));\n-extern void init_function_format_info\t\tPROTO((void));\n-extern void check_function_format\t\tPROTO((tree, tree, tree));\n-extern int c_get_alias_set                      PROTO((tree));\n-extern void c_apply_type_quals_to_decl          PROTO((int, tree));\n-/* Print an error message for invalid operands to arith operation CODE.\n-   NOP_EXPR is used as a special case (see truthvalue_conversion).  */\n-extern void binary_op_error                     PROTO((enum tree_code));\n-extern void c_expand_expr_stmt                  PROTO((tree));\n-extern void c_expand_start_cond                 PROTO((tree, int, int));\n-extern void c_expand_start_else                 PROTO((void));\n-extern void c_expand_end_cond                   PROTO((void));\n-/* Validate the expression after `case' and apply default promotions.  */\n-extern tree check_case_value                    PROTO((tree));\n-/* Concatenate a list of STRING_CST nodes into one STRING_CST.  */\n-extern tree combine_strings                     PROTO((tree));\n-extern void constant_expression_warning         PROTO((tree));\n-extern tree convert_and_check\t\t\tPROTO((tree, tree));\n-extern void overflow_warning\t\t\tPROTO((tree));\n-extern void unsigned_conversion_warning\t\tPROTO((tree, tree));\n-/* Read the rest of the current #-directive line.  */\n-#if USE_CPPLIB\n-extern char *get_directive_line                 PROTO((void));\n-#define GET_DIRECTIVE_LINE() get_directive_line ()\n-#else\n-extern char *get_directive_line                 PROTO((FILE *));\n-#define GET_DIRECTIVE_LINE() get_directive_line (finput)\n-#endif\n-\n-/* Subroutine of build_binary_op, used for comparison operations.\n-   See if the operands have both been converted from subword integer types\n-   and, if so, perhaps change them both back to their original type.  */\n-extern tree shorten_compare                     PROTO((tree *, tree *, tree *, enum tree_code *));\n-/* Prepare expr to be an argument of a TRUTH_NOT_EXPR,\n-   or validate its data type for an `if' or `while' statement or ?..: exp. */\n-extern tree truthvalue_conversion               PROTO((tree));\n-extern tree type_for_mode                       PROTO((enum machine_mode, int));\n-extern tree type_for_size                       PROTO((unsigned, int));\n-\n /* in c-convert.c */\n extern tree convert                             PROTO((tree, tree));\n \n /* in c-decl.c */\n-/* Standard named or nameless data types of the C compiler.  */\n-extern tree char_array_type_node;\n-extern tree char_type_node;\n-extern tree const_ptr_type_node;\n-extern tree const_string_type_node;\n-extern tree default_function_type;\n-extern tree double_ftype_double;\n-extern tree double_ftype_double_double;\n-extern tree double_type_node;\n-extern tree float_type_node;\n-#if HOST_BITS_PER_WIDE_INT >= 64\n-extern tree intTI_type_node;\n-#endif\n-extern tree intDI_type_node;\n-extern tree intHI_type_node;\n-extern tree intQI_type_node;\n-extern tree intSI_type_node;\n-extern tree int_array_type_node;\n-extern tree int_ftype_cptr_cptr_sizet;\n-extern tree int_ftype_int;\n-extern tree int_ftype_ptr_ptr_int;\n-extern tree int_ftype_string_string;\n-extern tree integer_type_node;\n-extern tree long_double_type_node;\n-extern tree long_ftype_long;\n-extern tree long_integer_type_node;\n-extern tree long_unsigned_type_node;\n-extern tree long_long_integer_type_node;\n-extern tree long_long_unsigned_type_node;\n-extern tree widest_integer_literal_type_node;\n-extern tree widest_unsigned_literal_type_node;\n-extern tree complex_integer_type_node;\n-extern tree complex_float_type_node;\n-extern tree complex_double_type_node;\n-extern tree complex_long_double_type_node;\n-extern tree ptr_type_node;\n-extern tree ptrdiff_type_node;\n-extern tree short_integer_type_node;\n-extern tree short_unsigned_type_node;\n-extern tree signed_char_type_node;\n-extern tree signed_wchar_type_node;\n-extern tree string_ftype_ptr_ptr;\n-extern tree string_type_node;\n-extern tree unsigned_char_type_node;\n-#if HOST_BITS_PER_WIDE_INT >= 64\n-extern tree unsigned_intTI_type_node;\n-#endif\n-extern tree unsigned_intDI_type_node;\n-extern tree unsigned_intHI_type_node;\n-extern tree unsigned_intQI_type_node;\n-extern tree unsigned_intSI_type_node;\n-extern tree unsigned_type_node;\n-extern tree unsigned_wchar_type_node;\n-extern tree void_ftype_ptr_int_int;\n-extern tree void_ftype_ptr_ptr_int;\n-extern tree void_type_node;\n-extern tree wchar_array_type_node;\n-extern tree wchar_type_node;\n-extern tree boolean_type_node;\n-extern tree boolean_true_node;\n-extern tree boolean_false_node;\n-\n extern tree build_enumerator                    PROTO((tree, tree));\n-/* Declare a predefined function.  Return the declaration.  */\n-extern tree builtin_function                    PROTO((const char *, tree, enum built_in_function function_, const char *));\n /* Add qualifiers to a type, in the fashion for C.  */\n extern tree c_build_qualified_type              PROTO((tree, int));\n #define c_build_type_variant(TYPE, CONST_P, VOLATILE_P)\t\t  \\"}, {"sha": "def17e5a226016957640357bc2ac952bb2a5cd2e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7f4edbcba63f129d037ffba8bd6deab84da5fd43", "patch": "@@ -1,3 +1,30 @@\n+Tue Jul 20 11:24:19 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n+\n+\t* cp-tree.h: Delete lots of declarations of tree nodes; replaced by\n+\tc_global_trees and accessor macros defined in c-common.h.\n+\t(cp_tree_index): New enumeration.\n+\t(cp_global_trees): Declare new array.  Add accessor macros for it, and\n+\tdelete declarations of tree nodes replaced by it.\n+\t(builtin_function): Delete macro, add declaration for new function.\n+\tInclude c-common.h.\n+\t* decl.c: Delete definitions for tree nodes that were replaced by\n+\tcp_global_trees and c_global_trees.\n+\t(init_decl_processing): Call c_common_nodes_and_builtins; delete code\n+\tto generate the common builtins here.\n+\t(builtin_function): New function.\n+\t* decl2.c (abort_fndecl): Delete declaration.\n+\t* except.c (expand_builtin_return_address): Delete declaration.\n+\t(builtin_return_address_fndecl): Delete variable.\n+\t(const_ptr_type_node): Delete declaration.\n+\t* lex.c (cons_up_default_function): Delete declaration of\n+\tvoid_list_node.\n+\t* parse.y (void_list_node): Delete declaration.\n+\t* rtti.c (type_info_type_node, tinfo_fn_id, tinfo_fn_type):\n+\tDelete variables.\n+\t(const_string_type_node): Delete declaration.\n+\t* search.c (abort_fndecl): Delete declaration.\n+\t* Makefile.in: Update dependencies.\n+\n 1999-07-19  Mark Mitchell  <mark@codesourcery.com>\n \n \t* pt.c (check_default_tmpl_args): Move test for missing default"}, {"sha": "d876a145401d669c82b89857514d4ba829b0f056", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=7f4edbcba63f129d037ffba8bd6deab84da5fd43", "patch": "@@ -214,7 +214,7 @@ RTL_H = $(srcdir)/../rtl.h $(srcdir)/../rtl.def \\\n \t$(srcdir)/../machmode.h $(srcdir)/../machmode.def\n TREE_H = $(srcdir)/../tree.h $(srcdir)/../real.h $(srcdir)/../tree.def \\\n \t$(srcdir)/../machmode.h $(srcdir)/../machmode.def\n-CXX_TREE_H = $(TREE_H) cp-tree.h cp-tree.def\n+CXX_TREE_H = $(TREE_H) cp-tree.h $(srcdir)/../c-common.h cp-tree.def\n PARSE_H = $(srcdir)/parse.h\n PARSE_C = $(srcdir)/parse.c\n EXPR_H = $(srcdir)/../expr.h ../insn-codes.h"}, {"sha": "cc6aa0f4c9464db663a04c7bfff2c625bd965e08", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 92, "deletions": 70, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7f4edbcba63f129d037ffba8bd6deab84da5fd43", "patch": "@@ -19,6 +19,8 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n+#include \"c-common.h\"\n+\n #ifndef _CP_TREE_H\n #define _CP_TREE_H\n \n@@ -329,40 +331,96 @@ extern int pedantic;\n    next exception handler.  */\n extern tree exception_throw_decl;\n \n-extern tree double_type_node, long_double_type_node, float_type_node;\n-extern tree char_type_node, unsigned_char_type_node, signed_char_type_node;\n-extern tree ptrdiff_type_node;\n-\n-extern tree short_integer_type_node, short_unsigned_type_node;\n-extern tree long_integer_type_node, long_unsigned_type_node;\n-extern tree long_long_integer_type_node, long_long_unsigned_type_node;\n-extern tree widest_integer_literal_type_node, widest_unsigned_literal_type_node;\n-extern tree unsigned_type_node;\n-extern tree string_type_node, char_array_type_node, int_array_type_node;\n-extern tree wchar_array_type_node;\n-extern tree wchar_type_node, signed_wchar_type_node, unsigned_wchar_type_node;\n-\n-extern tree complex_integer_type_node;\n-extern tree complex_float_type_node;\n-extern tree complex_double_type_node;\n-extern tree complex_long_double_type_node;\n-\n-extern tree intQI_type_node, unsigned_intQI_type_node;\n-extern tree intHI_type_node, unsigned_intHI_type_node;\n-extern tree intSI_type_node, unsigned_intSI_type_node;\n-extern tree intDI_type_node, unsigned_intDI_type_node;\n-#if HOST_BITS_PER_WIDE_INT >= 64\n-extern tree intTI_type_node, unsigned_intTI_type_node;\n-#endif\n+enum cp_tree_index\n+{\n+    CPTI_JAVA_BYTE_TYPE,\n+    CPTI_JAVA_SHORT_TYPE,\n+    CPTI_JAVA_INT_TYPE,\n+    CPTI_JAVA_LONG_TYPE,\n+    CPTI_JAVA_FLOAT_TYPE,\n+    CPTI_JAVA_DOUBLE_TYPE,\n+    CPTI_JAVA_CHAR_TYPE,\n+    CPTI_JAVA_BOOLEAN_TYPE,\n+\n+    CPTI_VOID_ZERO,\n+    CPTI_WCHAR_DECL,\n+    CPTI_VTABLE_ENTRY_TYPE,\n+    CPTI_DELTA_TYPE,\n+\n+    CPTI_TP_DESC_TYPE,\n+    CPTI_ACCESS_MODE_TYPE,\n+    CPTI_BLTN_DESC_TYPE,\n+    CPTI_USER_DESC_TYPE,\n+    CPTI_CLASS_DESC_TYPE,\n+    CPTI_PTR_DESC_TYPE,\n+    CPTI_ATTR_DESC_TYPE,\n+    CPTI_FUNC_DESC_TYPE,\n+    CPTI_PTMF_DESC_TYPE,\n+    CPTI_PTMD_DESC_TYPE,\n+    \n+    CPTI_CLASS_STAR_TYPE,\n+    CPTI_CLASS_TYPE,\n+    CPTI_RECORD_TYPE,\n+    CPTI_UNION_TYPE,\n+    CPTI_ENUM_TYPE,\n+    CPTI_UNKNOWN_TYPE,\n+    CPTI_OPAQUE_TYPE,\n+    CPTI_SIGNATURE_TYPE,\n+    CPTI_SIGTABLE_ENTRY_TYPE,\n+    CPTI_VTBL_TYPE,\n+    CPTI_VTBL_PTR_TYPE,\n+    CPTI_STD,\n+    CPTI_TYPE_INFO_TYPE,\n+    CPTI_TINFO_FN_ID,\n+    CPTI_TINFO_FN_TYPE,\n+    CPTI_ABORT_FNDECL,\n+    CPTI_GLOBAL_DELETE_FNDECL,\n+\n+    CPTI_MAX\n+};\n \n-extern tree java_byte_type_node;\n-extern tree java_short_type_node;\n-extern tree java_int_type_node;\n-extern tree java_long_type_node;\n-extern tree java_float_type_node;\n-extern tree java_double_type_node;\n-extern tree java_char_type_node;\n-extern tree java_boolean_type_node;\n+extern tree cp_global_trees[CPTI_MAX];\n+\n+#define java_byte_type_node\t\tcp_global_trees[CPTI_JAVA_BYTE_TYPE]\n+#define java_short_type_node\t\tcp_global_trees[CPTI_JAVA_SHORT_TYPE]\n+#define java_int_type_node\t\tcp_global_trees[CPTI_JAVA_INT_TYPE]\n+#define java_long_type_node\t\tcp_global_trees[CPTI_JAVA_LONG_TYPE]\n+#define java_float_type_node\t\tcp_global_trees[CPTI_JAVA_FLOAT_TYPE]\n+#define java_double_type_node\t\tcp_global_trees[CPTI_JAVA_DOUBLE_TYPE]\n+#define java_char_type_node\t\tcp_global_trees[CPTI_JAVA_CHAR_TYPE]\n+#define java_boolean_type_node\t\tcp_global_trees[CPTI_JAVA_BOOLEAN_TYPE]\n+\n+#define void_zero_node\t\t\tcp_global_trees[CPTI_VOID_ZERO]\n+#define wchar_decl_node\t\t\tcp_global_trees[CPTI_WCHAR_DECL]\n+#define vtable_entry_type\t\tcp_global_trees[CPTI_VTABLE_ENTRY_TYPE]\n+#define delta_type_node\t\t\tcp_global_trees[CPTI_DELTA_TYPE]\n+#define __tp_desc_type_node\t\tcp_global_trees[CPTI_TP_DESC_TYPE]\n+#define __access_mode_type_node\t\tcp_global_trees[CPTI_ACCESS_MODE_TYPE]\n+#define __bltn_desc_type_node\t\tcp_global_trees[CPTI_BLTN_DESC_TYPE]\n+#define __user_desc_type_node\t\tcp_global_trees[CPTI_USER_DESC_TYPE]\n+#define __class_desc_type_node\t\tcp_global_trees[CPTI_CLASS_DESC_TYPE]\n+#define __ptr_desc_type_node\t\tcp_global_trees[CPTI_PTR_DESC_TYPE]\n+#define __attr_desc_type_node\t\tcp_global_trees[CPTI_ATTR_DESC_TYPE]\n+#define __func_desc_type_node\t\tcp_global_trees[CPTI_FUNC_DESC_TYPE]\n+#define __ptmf_desc_type_node\t\tcp_global_trees[CPTI_PTMF_DESC_TYPE]\n+#define __ptmd_desc_type_node\t\tcp_global_trees[CPTI_PTMD_DESC_TYPE]\n+#define class_star_type_node\t\tcp_global_trees[CPTI_CLASS_STAR_TYPE]\n+#define class_type_node\t\t\tcp_global_trees[CPTI_CLASS_TYPE]\n+#define record_type_node\t\tcp_global_trees[CPTI_RECORD_TYPE]\n+#define union_type_node\t\t\tcp_global_trees[CPTI_UNION_TYPE]\n+#define enum_type_node\t\t\tcp_global_trees[CPTI_ENUM_TYPE]\n+#define unknown_type_node\t\tcp_global_trees[CPTI_UNKNOWN_TYPE]\n+#define opaque_type_node\t\tcp_global_trees[CPTI_OPAQUE_TYPE]\n+#define signature_type_node\t\tcp_global_trees[CPTI_SIGNATURE_TYPE]\n+#define sigtable_entry_type\t\tcp_global_trees[CPTI_SIGTABLE_ENTRY_TYPE]\n+#define vtbl_type_node\t\t\tcp_global_trees[CPTI_VTBL_TYPE]\n+#define vtbl_ptr_type_node\t\tcp_global_trees[CPTI_VTBL_PTR_TYPE]\n+#define std_node\t\t\tcp_global_trees[CPTI_STD]\n+#define type_info_type_node\t\tcp_global_trees[CPTI_TYPE_INFO_TYPE]\n+#define tinfo_fn_id\t\t\tcp_global_trees[CPTI_TINFO_FN_ID]\n+#define tinfo_fn_type\t\t\tcp_global_trees[CPTI_TINFO_FN_TYPE]\n+#define abort_fndecl\t\t\tcp_global_trees[CPTI_ABORT_FNDECL]\n+#define global_delete_fndecl\t\tcp_global_trees[CPTI_GLOBAL_DELETE_FNDECL]\n \n extern int current_function_returns_value;\n extern int current_function_returns_null;\n@@ -2048,9 +2106,6 @@ extern int flag_new_for_scope;\n #define DEFARG_LENGTH(NODE)\t(DEFARG_NODE_CHECK(NODE)->identifier.length)\n #define DEFARG_POINTER(NODE)\t(DEFARG_NODE_CHECK(NODE)->identifier.pointer)\n \n-#define builtin_function(NAME, TYPE, CODE, LIBNAME) \\\n-  define_function (NAME, TYPE, CODE, (void (*) PROTO((tree)))pushdecl, LIBNAME)\n-\n /* These macros provide convenient access to the various _STMT nodes\n    created when parsing template declarations.  */\n #define IF_COND(NODE)           TREE_OPERAND (NODE, 0)\n@@ -2153,22 +2208,6 @@ extern tree type_for_size                       PROTO((unsigned, int));\n extern int c_get_alias_set                      PROTO((tree));\n \n /* in decl{2}.c */\n-extern tree void_list_node;\n-extern tree void_zero_node;\n-extern tree default_function_type;\n-extern tree vtable_entry_type;\n-extern tree sigtable_entry_type;\n-extern tree __t_desc_type_node;\n-#if 0\n-extern tree __tp_desc_type_node;\n-#endif\n-extern tree __access_mode_type_node;\n-extern tree __bltn_desc_type_node, __user_desc_type_node;\n-extern tree __class_desc_type_node, __attr_desc_type_node;\n-extern tree __ptr_desc_type_node, __func_desc_type_node;\n-extern tree __ptmf_desc_type_node, __ptmd_desc_type_node;\n-extern tree type_info_type_node;\n-extern tree class_star_type_node;\n extern tree this_identifier;\n extern tree ctor_identifier, dtor_identifier;\n extern tree pfn_identifier;\n@@ -2182,36 +2221,19 @@ extern tree vt_off_identifier;\n /* A node that is a list (length 1) of error_mark_nodes.  */\n extern tree error_mark_list;\n \n-extern tree ptr_type_node;\n-extern tree class_type_node, record_type_node, union_type_node, enum_type_node;\n-extern tree unknown_type_node;\n-extern tree opaque_type_node, signature_type_node;\n-\n /* Node for \"pointer to (virtual) function\".\n    This may be distinct from ptr_type_node so gdb can distinguish them.  */\n #define vfunc_ptr_type_node \\\n   (flag_vtable_thunks ? vtable_entry_type : ptr_type_node)\n \n-/* The type of a vtbl, i.e., an array of vtable entries.  */\n-extern tree vtbl_type_node;\n-/* The type of a class vtbl pointer, i.e., a pointer to a vtable entry.  */\n-extern tree vtbl_ptr_type_node;\n-extern tree delta_type_node;\n-extern tree std_node;\n \n-extern tree long_long_integer_type_node, long_long_unsigned_type_node;\n /* For building calls to `delete'.  */\n extern tree integer_two_node, integer_three_node;\n-extern tree boolean_type_node, boolean_true_node, boolean_false_node;\n \n extern tree null_node;\n \n extern tree anonymous_namespace_name;\n \n-/* The FUNCTION_DECL for the default `::operator delete'.  */\n-\n-extern tree global_delete_fndecl;\n-\n /* in pt.c  */\n \n /* These values are used for the `STRICT' parameter to type_unfication and\n@@ -2862,7 +2884,7 @@ extern void init_decl_processing\t\tPROTO((void));\n extern int init_type_desc\t\t\tPROTO((void));\n extern tree define_function\n \tPROTO((const char *, tree, enum built_in_function,\n-\t       void (*) (tree), const char *));\n+\t       void (*) (tree), const char *));  \n extern tree check_tag_decl\t\t\tPROTO((tree));\n extern void shadow_tag\t\t\t\tPROTO((tree));\n extern tree groktypename\t\t\tPROTO((tree));"}, {"sha": "83237373b9c5265491797fcae6a3b28371a1c6f8", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 71, "deletions": 403, "changes": 474, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7f4edbcba63f129d037ffba8bd6deab84da5fd43", "patch": "@@ -46,8 +46,6 @@ Boston, MA 02111-1307, USA.  */\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-extern tree builtin_return_address_fndecl;\n-\n extern struct obstack permanent_obstack;\n extern struct obstack* saveable_obstack;\n \n@@ -207,158 +205,82 @@ tree error_mark_node;\n /* Erroneous argument lists can use this *IFF* they do not modify it.  */\n tree error_mark_list;\n \n-/* INTEGER_TYPE and REAL_TYPE nodes for the standard data types */\n-\n-tree short_integer_type_node;\n-tree integer_type_node;\n-tree long_integer_type_node;\n-tree long_long_integer_type_node;\n-\n-tree short_unsigned_type_node;\n-tree unsigned_type_node;\n-tree long_unsigned_type_node;\n-tree long_long_unsigned_type_node;\n-\n-/* These are used for integer literals that are larger than \n-   a long long.  The largest integer literals we can handle\n-   are the width of two HOST_WIDE_INTs.  If two HOST_WIDE_INTs\n-   are not larger than the target's long long, then these\n-   will never be used. */\n-tree widest_integer_literal_type_node;\n-tree widest_unsigned_literal_type_node;\n-\n-tree ptrdiff_type_node;\n-\n-tree unsigned_char_type_node;\n-tree signed_char_type_node;\n-tree char_type_node;\n-tree wchar_type_node;\n-tree signed_wchar_type_node;\n-tree unsigned_wchar_type_node;\n-\n-tree wchar_decl_node;\n-\n-tree float_type_node;\n-tree double_type_node;\n-tree long_double_type_node;\n+/* The following symbols are subsumed in the cp_global_trees array, and\n+   listed here individually for documentation purposes. \n \n-tree complex_integer_type_node;\n-tree complex_float_type_node;\n-tree complex_double_type_node;\n-tree complex_long_double_type_node;\n+   C++ extensions\n+\ttree wchar_decl_node;\n+\ttree void_zero_node;\n \n-tree intQI_type_node;\n-tree intHI_type_node;\n-tree intSI_type_node;\n-tree intDI_type_node;\n-#if HOST_BITS_PER_WIDE_INT >= 64\n-tree intTI_type_node;\n+\ttree vtable_entry_type;\n+\ttree delta_type_node;\n+#if 0\n+   Old rtti stuff.\n+\ttree __baselist_desc_type_node;\n+\ttree __i_desc_type_node, __m_desc_type_node;\n+\ttree __t_desc_array_type, __i_desc_array_type, __m_desc_array_type;\n #endif\n-\n-tree unsigned_intQI_type_node;\n-tree unsigned_intHI_type_node;\n-tree unsigned_intSI_type_node;\n-tree unsigned_intDI_type_node;\n-#if HOST_BITS_PER_WIDE_INT >= 64\n-tree unsigned_intTI_type_node;\n+\ttree __t_desc_type_node;\n+#if 0\n+\ttree __tp_desc_type_node;\n+#endif\n+\ttree __access_mode_type_node;\n+\ttree __bltn_desc_type_node, __user_desc_type_node, __class_desc_type_node;\n+\ttree __ptr_desc_type_node, __attr_desc_type_node, __func_desc_type_node;\n+\ttree __ptmf_desc_type_node, __ptmd_desc_type_node;\n+#if 0\n+   Not needed yet?  May be needed one day?\n+\ttree __bltn_desc_array_type, __user_desc_array_type, __class_desc_array_type;\n+\ttree __ptr_desc_array_type, __attr_dec_array_type, __func_desc_array_type;\n+\ttree __ptmf_desc_array_type, __ptmd_desc_array_type;\n #endif\n \n-tree java_byte_type_node;\n-tree java_short_type_node;\n-tree java_int_type_node;\n-tree java_long_type_node;\n-tree java_float_type_node;\n-tree java_double_type_node;\n-tree java_char_type_node;\n-tree java_boolean_type_node;\n-\n-/* A VOID_TYPE node, and the same, packaged in a TREE_LIST.  */\n-\n-tree void_type_node, void_list_node;\n-tree void_zero_node;\n-\n-/* Nodes for types `void *' and `const void *'.  */\n-\n-tree ptr_type_node;\n-tree const_ptr_type_node;\n-\n-/* Nodes for types `char *' and `const char *'.  */\n-\n-tree string_type_node, const_string_type_node;\n+\ttree class_star_type_node;\n+\ttree class_type_node, record_type_node, union_type_node, enum_type_node;\n+\ttree unknown_type_node;\n+\ttree opaque_type_node, signature_type_node;\n+\ttree sigtable_entry_type;\n \n-/* Type `char[256]' or something like it.\n-   Used when an array of char is needed and the size is irrelevant.  */\n+   Array type `vtable_entry_type[]'\n \n-tree char_array_type_node;\n+\ttree vtbl_type_node;\n+\ttree vtbl_ptr_type_node;\n \n-/* Type `int[256]' or something like it.\n-   Used when an array of int needed and the size is irrelevant.  */\n+   Nnamespace std\n \n-tree int_array_type_node;\n+\ttree std_node;\n \n-/* Type `wchar_t[256]' or something like it.\n-   Used when a wide string literal is created.  */\n+   A FUNCTION_DECL which can call `abort'.  Not necessarily the\n+   one that the user will declare, but sufficient to be called\n+   by routines that want to abort the program.\n \n-tree wchar_array_type_node;\n+\ttree abort_fndecl;\n \n-/* The bool data type, and constants */\n-tree boolean_type_node, boolean_true_node, boolean_false_node;\n+   The FUNCTION_DECL for the default `::operator delete'.\n \n-/* Type `int ()' -- used for implicit declaration of functions.  */\n+\ttree global_delete_fndecl;\n \n-tree default_function_type;\n+   Used by RTTI\n+\ttree type_info_type_node, tinfo_fn_id, tinfo_fn_type;\n \n-/* Function types `double (double)' and `double (double, double)', etc.  */\n+*/\n \n-static tree double_ftype_double, double_ftype_double_double;\n-static tree int_ftype_int, long_ftype_long;\n-static tree float_ftype_float;\n-static tree ldouble_ftype_ldouble;\n+tree cp_global_trees[CPTI_MAX];\n \n-/* Function type `int (const void *, const void *, size_t)' */\n-static tree int_ftype_cptr_cptr_sizet;\n+/* These can't be part of the above array, since they are declared\n+   individually in tree.h, and used by the debug output routines.  */\n \n-/* C++ extensions */\n-tree vtable_entry_type;\n-tree delta_type_node;\n-#if 0\n-/* Old rtti stuff.  */\n-tree __baselist_desc_type_node;\n-tree __i_desc_type_node, __m_desc_type_node;\n-tree __t_desc_array_type, __i_desc_array_type, __m_desc_array_type;\n-#endif\n-tree __t_desc_type_node;\n-#if 0\n-tree __tp_desc_type_node;\n-#endif\n-tree __access_mode_type_node;\n-tree __bltn_desc_type_node, __user_desc_type_node, __class_desc_type_node;\n-tree __ptr_desc_type_node, __attr_desc_type_node, __func_desc_type_node;\n-tree __ptmf_desc_type_node, __ptmd_desc_type_node;\n-#if 0\n-/* Not needed yet?  May be needed one day?  */\n-tree __bltn_desc_array_type, __user_desc_array_type, __class_desc_array_type;\n-tree __ptr_desc_array_type, __attr_dec_array_type, __func_desc_array_type;\n-tree __ptmf_desc_array_type, __ptmd_desc_array_type;\n-#endif\n+tree void_type_node;\n+tree char_type_node;\n+tree integer_type_node;\n+tree unsigned_type_node;\n \n /* Indicates that there is a type value in some namespace, although\n-   that is not necessarily in scope at the moment. */\n+   that is not necessarily in scope at the moment.  */\n \n static tree global_type_node;\n \n-tree class_star_type_node;\n-tree class_type_node, record_type_node, union_type_node, enum_type_node;\n-tree unknown_type_node;\n-tree opaque_type_node, signature_type_node;\n-tree sigtable_entry_type;\n-\n-/* Array type `vtable_entry_type[]' */\n-tree vtbl_type_node;\n-tree vtbl_ptr_type_node;\n-\n-/* namespace std */\n-tree std_node;\n+/* Namespace std.  */\n int in_std = 0;\n \n /* Expect only namespace names now. */\n@@ -386,16 +308,6 @@ static rtx last_parm_cleanup_insn;\n \n tree ctor_label;\n \n-/* A FUNCTION_DECL which can call `abort'.  Not necessarily the\n-   one that the user will declare, but sufficient to be called\n-   by routines that want to abort the program.  */\n-\n-tree abort_fndecl;\n-\n-/* A FUNCTION_DECL for the default `::operator delete'.  */\n-\n-tree global_delete_fndecl;\n-\n extern rtx cleanup_label, return_label;\n \n /* If original DECL_RESULT of current function was a register,\n@@ -6154,19 +6066,10 @@ auto_function (name, type, code)\n void\n init_decl_processing ()\n {\n-  register tree endlink, int_endlink, double_endlink, unsigned_endlink;\n   tree fields[20];\n-  /* Data type of memcpy.  */\n-  tree memcpy_ftype, strlen_ftype;\n   int wchar_type_size;\n-  tree temp;\n   tree array_domain_type;\n   tree vb_off_identifier = NULL_TREE;\n-  /* Function type `char *(char *, char *)' and similar ones */\n-  tree string_ftype_ptr_ptr, int_ftype_string_string;\n-  tree sizetype_endlink;\n-  tree ptr_ftype, ptr_ftype_unsigned, ptr_ftype_sizetype;\n-  tree void_ftype, void_ftype_int, void_ftype_ptr;\n \n   /* Have to make these distinct before we try using them.  */\n   lang_name_cplusplus = get_identifier (\"C++\");\n@@ -6463,269 +6366,24 @@ init_decl_processing ()\n      need to look inside this envelope.  */\n   class_star_type_node = build_pointer_type (make_lang_type (RECORD_TYPE));\n \n+  if (flag_huge_objects)\n+    delta_type_node = long_integer_type_node;\n+  else\n+    delta_type_node = short_integer_type_node;\n+\n   default_function_type\n     = build_function_type (integer_type_node, NULL_TREE);\n \n   ptr_type_node = build_pointer_type (void_type_node);\n   const_ptr_type_node\n     = build_pointer_type (build_qualified_type (void_type_node,\n-\t\t\t\t\t\tTYPE_QUAL_CONST)); \n-#if 0\n-  record_builtin_type (RID_MAX, NULL_PTR, ptr_type_node);\n-#endif\n-  endlink = void_list_node;\n-  int_endlink = tree_cons (NULL_TREE, integer_type_node, endlink);\n-  double_endlink = tree_cons (NULL_TREE, double_type_node, endlink);\n-  unsigned_endlink = tree_cons (NULL_TREE, unsigned_type_node, endlink);\n-\n-  ptr_ftype = build_function_type (ptr_type_node, NULL_TREE);\n-  ptr_ftype_unsigned = build_function_type (ptr_type_node, unsigned_endlink);\n-  sizetype_endlink = tree_cons (NULL_TREE, sizetype, endlink);\n-  /* We realloc here because sizetype could be int or unsigned.  S'ok.  */\n-  ptr_ftype_sizetype = build_function_type (ptr_type_node, sizetype_endlink);\n-\n-  void_ftype = build_function_type (void_type_node, endlink);\n-  void_ftype_int = build_function_type (void_type_node, int_endlink);\n-  void_ftype_ptr\n-    = build_function_type (void_type_node,\n- \t\t\t   tree_cons (NULL_TREE, ptr_type_node, endlink));\n+\t\t\t\t\t\tTYPE_QUAL_CONST));\n+  c_common_nodes_and_builtins (1, flag_no_builtin, flag_no_nonansi_builtin);\n+\n   void_ftype_ptr\n     = build_exception_variant (void_ftype_ptr,\n \t\t\t       tree_cons (NULL_TREE, NULL_TREE, NULL_TREE));\n \n-  float_ftype_float\n-    = build_function_type (float_type_node,\n-\t\t\t   tree_cons (NULL_TREE, float_type_node, endlink));\n-\n-  double_ftype_double\n-    = build_function_type (double_type_node, double_endlink);\n-\n-  ldouble_ftype_ldouble\n-    = build_function_type (long_double_type_node,\n-\t\t\t   tree_cons (NULL_TREE, long_double_type_node,\n-\t\t\t\t      endlink));\n-\n-  double_ftype_double_double\n-    = build_function_type (double_type_node,\n-\t\t\t   tree_cons (NULL_TREE, double_type_node,\n-\t\t\t\t      double_endlink));\n-\n-  int_ftype_int\n-    = build_function_type (integer_type_node, int_endlink);\n-\n-  long_ftype_long\n-    = build_function_type (long_integer_type_node,\n-\t\t\t   tree_cons (NULL_TREE, long_integer_type_node,\n-\t\t\t\t      endlink));\n-\n-  int_ftype_cptr_cptr_sizet\n-    = build_function_type (integer_type_node,\n-\t\t\t   tree_cons (NULL_TREE, const_ptr_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, const_ptr_type_node,\n-\t\t\t\t\t\t tree_cons (NULL_TREE,\n-\t\t\t\t\t\t\t    sizetype,\n-\t\t\t\t\t\t\t    endlink))));\n-\n-  string_ftype_ptr_ptr\t\t/* strcpy prototype */\n-    = build_function_type (string_type_node,\n-\t\t\t   tree_cons (NULL_TREE, string_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE,\n-\t\t\t\t\t\t const_string_type_node,\n-\t\t\t\t\t\t endlink)));\n-\n-  int_ftype_string_string\t/* strcmp prototype */\n-    = build_function_type (integer_type_node,\n-\t\t\t   tree_cons (NULL_TREE, const_string_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE,\n-\t\t\t\t\t\t const_string_type_node,\n-\t\t\t\t\t\t endlink)));\n-\n-  strlen_ftype\t\t/* strlen prototype */\n-    = build_function_type (sizetype,\n-\t\t\t   tree_cons (NULL_TREE, const_string_type_node,\n-\t\t\t\t      endlink));\n-\n-  memcpy_ftype\t/* memcpy prototype */\n-    = build_function_type (ptr_type_node,\n-\t\t\t   tree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, const_ptr_type_node,\n-\t\t\t\t\t\t sizetype_endlink)));\n-\n-  if (flag_huge_objects)\n-    delta_type_node = long_integer_type_node;\n-  else\n-    delta_type_node = short_integer_type_node;\n-\n-  builtin_function (\"__builtin_constant_p\", default_function_type,\n-\t\t    BUILT_IN_CONSTANT_P, NULL_PTR);\n-\n-  builtin_return_address_fndecl\n-    = builtin_function (\"__builtin_return_address\", ptr_ftype_unsigned,\n-\t\t\tBUILT_IN_RETURN_ADDRESS, NULL_PTR);\n-\n-  builtin_function (\"__builtin_frame_address\", ptr_ftype_unsigned,\n-\t\t    BUILT_IN_FRAME_ADDRESS, NULL_PTR);\n-\n-  builtin_function (\"__builtin_alloca\", ptr_ftype_sizetype,\n-\t\t    BUILT_IN_ALLOCA, \"alloca\");\n-  builtin_function (\"__builtin_ffs\", int_ftype_int, BUILT_IN_FFS, NULL_PTR);\n-  /* Define alloca, ffs as builtins.\n-     Declare _exit just to mark it as volatile.  */\n-  if (! flag_no_builtin && !flag_no_nonansi_builtin)\n-    {\n-      temp = builtin_function (\"alloca\", ptr_ftype_sizetype,\n-\t\t\t       BUILT_IN_ALLOCA, NULL_PTR);\n-      /* Suppress error if redefined as a non-function.  */\n-      DECL_BUILT_IN_NONANSI (temp) = 1;\n-      temp = builtin_function (\"ffs\", int_ftype_int, BUILT_IN_FFS, NULL_PTR);\n-      /* Suppress error if redefined as a non-function.  */\n-      DECL_BUILT_IN_NONANSI (temp) = 1;\n-      temp = builtin_function (\"_exit\", void_ftype_int,\n-\t\t\t       NOT_BUILT_IN, NULL_PTR);\n-      TREE_THIS_VOLATILE (temp) = 1;\n-      TREE_SIDE_EFFECTS (temp) = 1;\n-      /* Suppress error if redefined as a non-function.  */\n-      DECL_BUILT_IN_NONANSI (temp) = 1;\n-    }\n-\n-  builtin_function (\"__builtin_abs\", int_ftype_int, BUILT_IN_ABS, NULL_PTR);\n-  builtin_function (\"__builtin_fabsf\", float_ftype_float, BUILT_IN_FABS,\n-\t\t    NULL_PTR);\n-  builtin_function (\"__builtin_fabs\", double_ftype_double, BUILT_IN_FABS,\n-\t\t    NULL_PTR);\n-  builtin_function (\"__builtin_fabsl\", ldouble_ftype_ldouble, BUILT_IN_FABS,\n-\t\t    NULL_PTR);\n-  builtin_function (\"__builtin_labs\", long_ftype_long,\n-\t\t    BUILT_IN_LABS, NULL_PTR);\n-  builtin_function (\"__builtin_saveregs\", ptr_ftype,\n-\t\t    BUILT_IN_SAVEREGS, NULL_PTR);\n-  builtin_function (\"__builtin_classify_type\", default_function_type,\n-\t\t    BUILT_IN_CLASSIFY_TYPE, NULL_PTR);\n-  builtin_function (\"__builtin_next_arg\", ptr_ftype,\n-\t\t    BUILT_IN_NEXT_ARG, NULL_PTR);\n-  builtin_function (\"__builtin_args_info\", int_ftype_int,\n-\t\t    BUILT_IN_ARGS_INFO, NULL_PTR);\n-  builtin_function (\"__builtin_setjmp\",\n-\t\t    build_function_type (integer_type_node,\n-\t\t\t\t\t tree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t\t\t\t    endlink)),\n-\t\t    BUILT_IN_SETJMP, NULL_PTR);\n-  builtin_function (\"__builtin_longjmp\",\n-\t\t    build_function_type (integer_type_node,\n-\t\t\t\t\t tree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t\t\t\t    tree_cons (NULL_TREE,\n-\t\t\t\t\t\t\t       integer_type_node,\n-\t\t\t\t\t\t\t       endlink))),\n-\t\t    BUILT_IN_LONGJMP, NULL_PTR);\n-\n-  /* Untyped call and return.  */\n-  builtin_function (\"__builtin_apply_args\", ptr_ftype,\n-\t\t    BUILT_IN_APPLY_ARGS, NULL_PTR);\n-\n-  temp = tree_cons (NULL_TREE,\n-\t\t    build_pointer_type (build_function_type (void_type_node,\n-\t\t\t\t\t\t\t     NULL_TREE)),\n-\t\t    tree_cons (NULL_TREE, ptr_ftype_sizetype, NULL_TREE));\n-  builtin_function (\"__builtin_apply\",\n-\t\t    build_function_type (ptr_type_node, temp),\n-\t\t    BUILT_IN_APPLY, NULL_PTR);\n-  builtin_function (\"__builtin_return\", void_ftype_ptr,\n-\t\t    BUILT_IN_RETURN, NULL_PTR);\n-\n-  /* Currently under experimentation.  */\n-  builtin_function (\"__builtin_memcpy\", memcpy_ftype,\n-\t\t    BUILT_IN_MEMCPY, \"memcpy\");\n-  builtin_function (\"__builtin_memcmp\", int_ftype_cptr_cptr_sizet,\n-\t\t    BUILT_IN_MEMCMP, \"memcmp\");\n-  builtin_function (\"__builtin_strcmp\", int_ftype_string_string,\n-\t\t    BUILT_IN_STRCMP, \"strcmp\");\n-  builtin_function (\"__builtin_strcpy\", string_ftype_ptr_ptr,\n-\t\t    BUILT_IN_STRCPY, \"strcpy\");\n-  builtin_function (\"__builtin_strlen\", strlen_ftype,\n-\t\t    BUILT_IN_STRLEN, \"strlen\");\n-  builtin_function (\"__builtin_sqrtf\", float_ftype_float, \n-\t\t    BUILT_IN_FSQRT, \"sqrtf\");\n-  builtin_function (\"__builtin_fsqrt\", double_ftype_double,\n-\t\t    BUILT_IN_FSQRT, NULL_PTR);\n-  builtin_function (\"__builtin_sqrtl\", ldouble_ftype_ldouble, \n-\t\t    BUILT_IN_FSQRT, \"sqrtl\");\n-  builtin_function (\"__builtin_sinf\", float_ftype_float, \n-\t\t    BUILT_IN_SIN, \"sinf\");\n-  builtin_function (\"__builtin_sin\", double_ftype_double, \n-\t\t    BUILT_IN_SIN, \"sin\");\n-  builtin_function (\"__builtin_sinl\", ldouble_ftype_ldouble, \n-\t\t    BUILT_IN_SIN, \"sinl\");\n-  builtin_function (\"__builtin_cosf\", float_ftype_float, \n-\t\t    BUILT_IN_COS, \"cosf\");\n-  builtin_function (\"__builtin_cos\", double_ftype_double, \n-\t\t    BUILT_IN_COS, \"cos\");\n-  builtin_function (\"__builtin_cosl\", ldouble_ftype_ldouble, \n-\t\t    BUILT_IN_COS, \"cosl\");\n-\n-  if (!flag_no_builtin)\n-    {\n-      builtin_function (\"abs\", int_ftype_int, BUILT_IN_ABS, NULL_PTR);\n-      builtin_function (\"fabs\", double_ftype_double, BUILT_IN_FABS, NULL_PTR);\n-      builtin_function (\"labs\", long_ftype_long, BUILT_IN_LABS, NULL_PTR);\n-      builtin_function (\"fabsf\", float_ftype_float, BUILT_IN_FABS, NULL_PTR);\n-      builtin_function (\"fabsl\", ldouble_ftype_ldouble, BUILT_IN_FABS,\n-\t\t\tNULL_PTR);\n-      builtin_function (\"memcpy\", memcpy_ftype, BUILT_IN_MEMCPY, NULL_PTR);\n-      builtin_function (\"memcmp\", int_ftype_cptr_cptr_sizet, BUILT_IN_MEMCMP,\n-\t\t\tNULL_PTR);\n-      builtin_function (\"strcmp\", int_ftype_string_string, BUILT_IN_STRCMP,\n-\t\t\tNULL_PTR);\n-      builtin_function (\"strcpy\", string_ftype_ptr_ptr, BUILT_IN_STRCPY,\n-\t\t\tNULL_PTR);\n-      builtin_function (\"strlen\", strlen_ftype, BUILT_IN_STRLEN, NULL_PTR);\n-      builtin_function (\"sqrtf\", float_ftype_float, BUILT_IN_FSQRT, NULL_PTR);\n-      builtin_function (\"sqrt\", double_ftype_double, BUILT_IN_FSQRT, NULL_PTR);\n-      builtin_function (\"sqrtl\", ldouble_ftype_ldouble, BUILT_IN_FSQRT,\n-\t\t\tNULL_PTR);\n-      builtin_function (\"sinf\", float_ftype_float, BUILT_IN_SIN, NULL_PTR);\n-      builtin_function (\"sin\", double_ftype_double, BUILT_IN_SIN, NULL_PTR);\n-      builtin_function (\"sinl\", ldouble_ftype_ldouble, BUILT_IN_SIN, NULL_PTR);\n-      builtin_function (\"cosf\", float_ftype_float, BUILT_IN_COS, NULL_PTR);\n-      builtin_function (\"cos\", double_ftype_double, BUILT_IN_COS, NULL_PTR);\n-      builtin_function (\"cosl\", ldouble_ftype_ldouble, BUILT_IN_COS, NULL_PTR);\n-\n-      /* Declare these functions volatile\n-\t to avoid spurious \"control drops through\" warnings.  */\n-      temp = builtin_function (\"abort\", void_ftype,\n-\t\t\t       NOT_BUILT_IN, NULL_PTR);\n-      TREE_THIS_VOLATILE (temp) = 1;\n-      TREE_SIDE_EFFECTS (temp) = 1;\n-      /* Well, these are actually ANSI, but we can't set DECL_BUILT_IN on\n-         them...  */\n-      DECL_BUILT_IN_NONANSI (temp) = 1;\n-      temp = builtin_function (\"exit\", void_ftype_int,\n-\t\t\t       NOT_BUILT_IN, NULL_PTR);\n-      TREE_THIS_VOLATILE (temp) = 1;\n-      TREE_SIDE_EFFECTS (temp) = 1;\n-      DECL_BUILT_IN_NONANSI (temp) = 1;\n-    }\n-\n-#if 0\n-  /* Support for these has not been written in either expand_builtin\n-     or build_function_call.  */\n-  builtin_function (\"__builtin_div\", default_ftype, BUILT_IN_DIV, NULL_PTR);\n-  builtin_function (\"__builtin_ldiv\", default_ftype, BUILT_IN_LDIV, NULL_PTR);\n-  builtin_function (\"__builtin_ffloor\", double_ftype_double, BUILT_IN_FFLOOR,\n-\t\t    NULL_PTR);\n-  builtin_function (\"__builtin_fceil\", double_ftype_double, BUILT_IN_FCEIL,\n-\t\t    NULL_PTR);\n-  builtin_function (\"__builtin_fmod\", double_ftype_double_double,\n-\t\t    BUILT_IN_FMOD, NULL_PTR);\n-  builtin_function (\"__builtin_frem\", double_ftype_double_double,\n-\t\t    BUILT_IN_FREM, NULL_PTR);\n-  builtin_function (\"__builtin_memset\", ptr_ftype_ptr_int_int,\n-\t\t    BUILT_IN_MEMSET, NULL_PTR);\n-  builtin_function (\"__builtin_getexp\", double_ftype_double, BUILT_IN_GETEXP,\n-\t\t    NULL_PTR);\n-  builtin_function (\"__builtin_getman\", double_ftype_double, BUILT_IN_GETMAN,\n-\t\t    NULL_PTR);\n-#endif\n-\n   /* C++ extensions */\n \n   unknown_type_node = make_node (UNKNOWN_TYPE);\n@@ -6968,6 +6626,16 @@ define_function (name, type, function_code, pfn, library_name)\n     }\n   return decl;\n }\n+\n+tree\n+builtin_function (name, type, code, libname)\n+     const char *name;\n+     tree type;\n+     enum built_in_function code;\n+     const char *libname;\n+{\n+  return define_function (name, type, code, (void (*) PROTO((tree)))pushdecl, libname);\n+}\n \f\n /* When we call finish_struct for an anonymous union, we create\n    default copy constructors and such.  But, an anonymous union"}, {"sha": "0e8962f66f625587fcde6ba45575e29733c093b9", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=7f4edbcba63f129d037ffba8bd6deab84da5fd43", "patch": "@@ -2394,8 +2394,6 @@ coerce_delete_type (type)\n   return type;\n }\n \f\n-extern tree abort_fndecl;\n-\n static void\n mark_vtable_entries (decl)\n      tree decl;"}, {"sha": "c6869c6ee20807f473aa4ad46825190210b71fe4", "filename": "gcc/cp/except.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=7f4edbcba63f129d037ffba8bd6deab84da5fd43", "patch": "@@ -37,13 +37,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"eh-common.h\"\n \n-rtx expand_builtin_return_addr\tPROTO((enum built_in_function, int, rtx));\n-\n-/* Holds the fndecl for __builtin_return_address.  */\n-tree builtin_return_address_fndecl;\n-\n-/* A couple of backend routines from m88k.c */\n-\n static void push_eh_cleanup PROTO((void));\n static tree build_eh_type_type PROTO((tree));\n static tree build_eh_type PROTO((tree));\n@@ -184,7 +177,6 @@ static tree Unwind;\n    ========================================================================= */\n \n extern rtx catch_clauses;\n-extern tree const_ptr_type_node;\n \n /* ========================================================================= */\n "}, {"sha": "a02b7f3335b0f63121804f8aa57154ed825a9eb2", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=7f4edbcba63f129d037ffba8bd6deab84da5fd43", "patch": "@@ -2002,7 +2002,6 @@ cons_up_default_function (type, full_name, kind)\n      tree type, full_name;\n      int kind;\n {\n-  extern tree void_list_node;\n   tree declspecs = NULL_TREE;\n   tree fn, args = NULL_TREE;\n   tree argtype;"}, {"sha": "01a41e03642fa25ceb4e14fce264d3d934c52194", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 813, "deletions": 814, "changes": 1627, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=7f4edbcba63f129d037ffba8bd6deab84da5fd43"}, {"sha": "829b4ca7b0cf420b1e21d232cd2169db38c9aa0e", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=7f4edbcba63f129d037ffba8bd6deab84da5fd43", "patch": "@@ -47,7 +47,6 @@ Boston, MA 02111-1307, USA.  */\n    definition here.  (fnf) */\n char *language_string = \"GNU C++\";\n \n-extern tree void_list_node;\n extern struct obstack permanent_obstack;\n \n extern int end_of_file;"}, {"sha": "3c65f38989e9051de177b228eca707efd5f634e6", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=7f4edbcba63f129d037ffba8bd6deab84da5fd43", "patch": "@@ -48,10 +48,6 @@ static void expand_ptr_desc PROTO((tree, tree));\n static void expand_generic_desc PROTO((tree, tree, const char *));\n static tree throw_bad_cast PROTO((void));\n static tree throw_bad_typeid PROTO((void));\n-\n-tree type_info_type_node;\n-tree tinfo_fn_id;\n-tree tinfo_fn_type;\n \f\n void\n init_rtti_processing ()\n@@ -726,8 +722,6 @@ build_dynamic_cast (type, expr)\n    Note: these constructors always return the address of the descriptor\n    info, since that is simplest for their mutual interaction.  */\n \n-extern tree const_string_type_node;\n-\n /* Build an initializer for a __si_type_info node.  */\n \n static void"}, {"sha": "f1be6db5fb5a86ba34a39be2466faa5401319768", "filename": "gcc/cp/search.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=7f4edbcba63f129d037ffba8bd6deab84da5fd43", "patch": "@@ -37,7 +37,6 @@ Boston, MA 02111-1307, USA.  */\n #define obstack_chunk_free free\n \n extern struct obstack *current_obstack;\n-extern tree abort_fndecl;\n \n #include \"stack.h\"\n "}, {"sha": "805c7cd1c2014e1a0e9d3bccaace1dbdc2850804", "filename": "gcc/objc/Make-lang.in", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fobjc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fobjc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMake-lang.in?ref=7f4edbcba63f129d037ffba8bd6deab84da5fd43", "patch": "@@ -66,8 +66,9 @@ cc1obj$(exeext): $(P) $(OBJS) $(OBJC_OBJS) $(LIBDEPS)\n \n objc-parse.o : $(srcdir)/objc/objc-parse.c \\\n    $(CONFIG_H) $(TREE_H) $(srcdir)/toplev.h \\\n-   $(srcdir)/c-lex.h $(srcdir)/c-tree.h $(srcdir)/input.h \\\n-   $(srcdir)/flags.h $(srcdir)/output.h $(srcdir)/objc/objc-act.h system.h\n+   $(srcdir)/c-lex.h $(srcdir)/c-tree.h $(srcdir)/c-common.h \\\n+   $(srcdir)/input.h $(srcdir)/flags.h $(srcdir)/output.h \\\n+   $(srcdir)/objc/objc-act.h system.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -I$(srcdir)/objc \\\n \t-c $(srcdir)/objc/objc-parse.c\n \n@@ -85,9 +86,10 @@ $(srcdir)/objc/objc-parse.y: $(srcdir)/c-parse.in\n \n objc-act.o : $(srcdir)/objc/objc-act.c \\\n    $(CONFIG_H) $(TREE_H) $(RTL_H) system.h \\\n-   $(srcdir)/c-tree.h $(srcdir)/c-lex.h $(srcdir)/toplev.h \\\n-   $(srcdir)/flags.h $(srcdir)/objc/objc-act.h $(srcdir)/input.h \\\n-   $(srcdir)/function.h $(srcdir)/output.h $(srcdir)/c-parse.h\n+   $(srcdir)/c-tree.h $(srcdir)/c-common.h $(srcdir)/c-lex.h \\\n+   $(srcdir)/toplev.h $(srcdir)/flags.h $(srcdir)/objc/objc-act.h \\\n+   $(srcdir)/input.h $(srcdir)/function.h $(srcdir)/output.h \\\n+   $(srcdir)/c-parse.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -I$(srcdir)/objc \\\n \t-c $(srcdir)/objc/objc-act.c\n "}, {"sha": "685c95087feec975bb66c29fedc6e8cb762763b4", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f4edbcba63f129d037ffba8bd6deab84da5fd43/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=7f4edbcba63f129d037ffba8bd6deab84da5fd43", "patch": "@@ -1769,17 +1769,17 @@ build_module_descriptor ()\n     return 0;\n \n   {\n-    tree parms, function_decl, decelerator, void_list_node;\n+    tree parms, function_decl, decelerator, void_list_node_1;\n     tree function_type;\n     tree init_function_name = get_file_function_name ('I');\n \n     /* Declare void __objc_execClass (void *); */\n \n-    void_list_node = build_tree_list (NULL_TREE, void_type_node);\n+    void_list_node_1 = build_tree_list (NULL_TREE, void_type_node);\n     function_type\n       = build_function_type (void_type_node,\n \t\t\t     tree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t\t\tvoid_list_node));\n+\t\t\t\t\tvoid_list_node_1));\n     function_decl = build_decl (FUNCTION_DECL,\n \t\t\t\tget_identifier (TAG_EXECCLASS),\n \t\t\t\tfunction_type);\n@@ -1797,12 +1797,12 @@ build_module_descriptor ()\n \n     /* void _GLOBAL_$I$<gnyf> () {objc_execClass (&L_OBJC_MODULES);}  */\n \n-    start_function (void_list_node,\n+    start_function (void_list_node_1,\n \t\t    build_parse_node (CALL_EXPR, init_function_name,\n \t\t\t\t      /* This has the format of the output\n \t\t\t\t\t of get_parm_info.  */\n \t\t\t\t      tree_cons (NULL_TREE, NULL_TREE,\n-\t\t\t\t\t\t void_list_node),\n+\t\t\t\t\t\t void_list_node_1),\n \t\t\t\t      NULL_TREE),\n \t\t    NULL_TREE, NULL_TREE, 0);\n #if 0 /* This should be turned back on later"}]}