{"sha": "c265dfbf748e9fc3006a0f844294ef2cea145d71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI2NWRmYmY3NDhlOWZjMzAwNmEwZjg0NDI5NGVmMmNlYTE0NWQ3MQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-11-05T13:29:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-11-05T13:29:52Z"}, "message": "re PR target/92280 (gcc.target/i386/pr83008.c FAILs)\n\n2019-11-05  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/92280\n\t* match.pd (BIT_FIELD_REF of CTOR): Unless the original CTOR\n\thad a single use do not create a new CTOR.\n\t* tree-ssa-forwprop.c (simplify_bitfield_ref): Do not re-fold\n\tBIT_FIELD_REF of a CTOR via GENERIC.\n\nFrom-SVN: r277832", "tree": {"sha": "b5cdf144d28fdfcf0ed650dd26cbbf9b6e682513", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5cdf144d28fdfcf0ed650dd26cbbf9b6e682513"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c265dfbf748e9fc3006a0f844294ef2cea145d71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c265dfbf748e9fc3006a0f844294ef2cea145d71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c265dfbf748e9fc3006a0f844294ef2cea145d71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c265dfbf748e9fc3006a0f844294ef2cea145d71/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d9adca6e663070311c73cbd7dc9d73e7713aa315", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9adca6e663070311c73cbd7dc9d73e7713aa315", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9adca6e663070311c73cbd7dc9d73e7713aa315"}], "stats": {"total": 45, "additions": 22, "deletions": 23}, "files": [{"sha": "ca42d43f9eceb2a592ebb187270d3f99e7740b56", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c265dfbf748e9fc3006a0f844294ef2cea145d71/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c265dfbf748e9fc3006a0f844294ef2cea145d71/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c265dfbf748e9fc3006a0f844294ef2cea145d71", "patch": "@@ -1,3 +1,11 @@\n+2019-11-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92280\n+\t* match.pd (BIT_FIELD_REF of CTOR): Unless the original CTOR\n+\thad a single use do not create a new CTOR.\n+\t* tree-ssa-forwprop.c (simplify_bitfield_ref): Do not re-fold\n+\tBIT_FIELD_REF of a CTOR via GENERIC.\n+\n 2019-11-05  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \t* config/s390/s390.c (s390_vector_alignment): Check if the value"}, {"sha": "eabd01fc115b5a64ea93441e1265d1675afd3d29", "filename": "gcc/match.pd", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c265dfbf748e9fc3006a0f844294ef2cea145d71/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c265dfbf748e9fc3006a0f844294ef2cea145d71/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=c265dfbf748e9fc3006a0f844294ef2cea145d71", "patch": "@@ -5565,15 +5565,19 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t (if (elt < CONSTRUCTOR_NELTS (ctor))\n \t  (view_convert { CONSTRUCTOR_ELT (ctor, elt)->value; })\n \t  { build_zero_cst (type); })\n-\t {\n-\t   vec<constructor_elt, va_gc> *vals;\n-\t   vec_alloc (vals, count);\n-\t   for (unsigned i = 0;\n-\t\ti < count && elt + i < CONSTRUCTOR_NELTS (ctor); ++i)\n-\t     CONSTRUCTOR_APPEND_ELT (vals, NULL_TREE,\n-\t\t\t\t     CONSTRUCTOR_ELT (ctor, elt + i)->value);\n-\t   build_constructor (type, vals);\n-\t })))\n+\t /* We don't want to emit new CTORs unless the old one goes away.\n+\t    ???  Eventually allow this if the CTOR ends up constant or\n+\t    uniform.  */\n+\t (if (single_use (@0))\n+\t  {\n+\t    vec<constructor_elt, va_gc> *vals;\n+\t    vec_alloc (vals, count);\n+\t    for (unsigned i = 0;\n+\t\t i < count && elt + i < CONSTRUCTOR_NELTS (ctor); ++i)\n+\t      CONSTRUCTOR_APPEND_ELT (vals, NULL_TREE,\n+\t\t\t\t      CONSTRUCTOR_ELT (ctor, elt + i)->value);\n+\t    build_constructor (type, vals);\n+\t  }))))\n       /* The bitfield references a single constructor element.  */\n       (if (k.is_constant (&const_k)\n \t   && idx + n <= (idx / const_k + 1) * const_k)"}, {"sha": "386406fbb38e46aded92f2bd84f287b0382523d3", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c265dfbf748e9fc3006a0f844294ef2cea145d71/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c265dfbf748e9fc3006a0f844294ef2cea145d71/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=c265dfbf748e9fc3006a0f844294ef2cea145d71", "patch": "@@ -1786,7 +1786,7 @@ simplify_bitfield_ref (gimple_stmt_iterator *gsi)\n {\n   gimple *stmt = gsi_stmt (*gsi);\n   gimple *def_stmt;\n-  tree op, op0, op1, op2;\n+  tree op, op0, op1;\n   tree elem_type;\n   unsigned idx, size;\n   enum tree_code code;\n@@ -1804,20 +1804,7 @@ simplify_bitfield_ref (gimple_stmt_iterator *gsi)\n     return false;\n \n   op1 = TREE_OPERAND (op, 1);\n-  op2 = TREE_OPERAND (op, 2);\n   code = gimple_assign_rhs_code (def_stmt);\n-\n-  if (code == CONSTRUCTOR)\n-    {\n-      tree tem = fold_ternary (BIT_FIELD_REF, TREE_TYPE (op),\n-\t\t\t       gimple_assign_rhs1 (def_stmt), op1, op2);\n-      if (!tem || !valid_gimple_rhs_p (tem))\n-\treturn false;\n-      gimple_assign_set_rhs_from_tree (gsi, tem);\n-      update_stmt (gsi_stmt (*gsi));\n-      return true;\n-    }\n-\n   elem_type = TREE_TYPE (TREE_TYPE (op0));\n   if (TREE_TYPE (op) != elem_type)\n     return false;"}]}