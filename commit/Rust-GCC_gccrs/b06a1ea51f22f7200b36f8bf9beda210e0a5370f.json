{"sha": "b06a1ea51f22f7200b36f8bf9beda210e0a5370f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA2YTFlYTUxZjIyZjcyMDBiMzZmOGJmOWJlZGEyMTBlMGE1MzcwZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jw@kayari.org", "date": "2002-10-12T06:14:31Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-10-12T06:14:31Z"}, "message": "howto.html:  Correct nasting of XHTML elements.\n\n2002-10-12  Jonathan Wakely  <jw@kayari.org>\n            Gabriel Dos Reis  <gdr@integrable-solutions.net>\n\n\t* docs/html/21_strings/howto.html#5:  Correct nasting of XHTML\n\telements.  Correct allocator-related text.\n\nCo-Authored-By: Gabriel Dos Reis <gdr@integrable-solutions.net>\n\nFrom-SVN: r58080", "tree": {"sha": "2e9663cef5aeeced9cdb982264a61566ef4c4272", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e9663cef5aeeced9cdb982264a61566ef4c4272"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b06a1ea51f22f7200b36f8bf9beda210e0a5370f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b06a1ea51f22f7200b36f8bf9beda210e0a5370f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b06a1ea51f22f7200b36f8bf9beda210e0a5370f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b06a1ea51f22f7200b36f8bf9beda210e0a5370f/comments", "author": null, "committer": null, "parents": [{"sha": "c0b80fecdfa09d24579195a0719e018ced60034a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0b80fecdfa09d24579195a0719e018ced60034a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0b80fecdfa09d24579195a0719e018ced60034a"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "e6b8cf3c5dd649849a249ce8900a7515b34c9d1d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b06a1ea51f22f7200b36f8bf9beda210e0a5370f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b06a1ea51f22f7200b36f8bf9beda210e0a5370f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b06a1ea51f22f7200b36f8bf9beda210e0a5370f", "patch": "@@ -1,3 +1,9 @@\n+2002-10-12  Jonathan Wakely  <jw@kayari.org>\n+            Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* docs/html/21_strings/howto.html#5:  Correct nasting of XHTML\n+\telements.  Correct allocator-related text.\n+\n 2002-10-11  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/22_locale/static_members.cc (test02): Fix."}, {"sha": "cba9c3f21d4b7604b560a1b42818d0ddb4dfefa5", "filename": "libstdc++-v3/docs/html/21_strings/howto.html", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b06a1ea51f22f7200b36f8bf9beda210e0a5370f/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F21_strings%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b06a1ea51f22f7200b36f8bf9beda210e0a5370f/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F21_strings%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F21_strings%2Fhowto.html?ref=b06a1ea51f22f7200b36f8bf9beda210e0a5370f", "patch": "@@ -350,26 +350,28 @@ <h2><a name=\"5\">Making strings of arbitrary character types</a></h2>\n    <p>That's the theory.  Remember however that basic_string has additional\n       type parameters, which take default arguments based on the character\n       type (called CharT here):\n-      <pre>\n+   </p>\n+   <pre>\n       template &lt;typename CharT,\n                 typename Traits = char_traits&lt;CharT&gt;,\n                 typename Alloc = allocator&lt;CharT&gt; &gt;\n       class basic_string { .... };</pre>\n-      Now, <code>allocator&lt;CharT&gt;</code> will probably Do The Right\n-      Thing by default, unless you need to do something very strange with\n-      memory allocation in your characters.\n+   <p>Now, <code>allocator&lt;CharT&gt;</code> will probably Do The Right\n+      Thing by default, unless you need to implement your own allocator\n+      for your characters.\n    </p>\n    <p>But <code>char_traits</code> takes more work.  The char_traits\n       template is <em>declared</em> but not <em>defined</em>.\n       That means there is only\n-      <pre>\n+   </p>\n+   <pre>\n       template &lt;typename CharT&gt;\n         struct char_traits\n         {\n             static void foo (type1 x, type2 y);\n             ...\n         };</pre>\n-      and functions such as char_traits&lt;CharT&gt;::foo() are not\n+   <p>and functions such as char_traits&lt;CharT&gt;::foo() are not\n       actually defined anywhere for the general case.  The C++ standard\n       permits this, because writing such a definition to fit all possible\n       CharT's cannot be done.  (For a time, in earlier versions of GCC,"}]}