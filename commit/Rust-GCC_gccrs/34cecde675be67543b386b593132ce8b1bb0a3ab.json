{"sha": "34cecde675be67543b386b593132ce8b1bb0a3ab", "node_id": "C_kwDOANBUbNoAKDM0Y2VjZGU2NzViZTY3NTQzYjM4NmI1OTMxMzJjZThiMWJiMGEzYWI", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-10-16T18:32:27Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-10-17T16:59:24Z"}, "message": "Fortran: check type of operands of logical operations, comparisons [PR107272]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/107272\n\t* arith.cc (gfc_arith_not): Operand must be of type BT_LOGICAL.\n\t(gfc_arith_and): Likewise.\n\t(gfc_arith_or): Likewise.\n\t(gfc_arith_eqv): Likewise.\n\t(gfc_arith_neqv): Likewise.\n\t(gfc_arith_eq): Compare consistency of types of operands.\n\t(gfc_arith_ne): Likewise.\n\t(gfc_arith_gt): Likewise.\n\t(gfc_arith_ge): Likewise.\n\t(gfc_arith_lt): Likewise.\n\t(gfc_arith_le): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/107272\n\t* gfortran.dg/pr107272.f90: New test.", "tree": {"sha": "fa13d8d62eea22add2b8185ed6fe1be0776d27af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa13d8d62eea22add2b8185ed6fe1be0776d27af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34cecde675be67543b386b593132ce8b1bb0a3ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34cecde675be67543b386b593132ce8b1bb0a3ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34cecde675be67543b386b593132ce8b1bb0a3ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34cecde675be67543b386b593132ce8b1bb0a3ab/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8950288333162caa68b85c71ed2d02f40976ddb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8950288333162caa68b85c71ed2d02f40976ddb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8950288333162caa68b85c71ed2d02f40976ddb9"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "e76a82a1668cf387995f875bf94b6751d9358993", "filename": "gcc/fortran/arith.cc", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34cecde675be67543b386b593132ce8b1bb0a3ab/gcc%2Ffortran%2Farith.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34cecde675be67543b386b593132ce8b1bb0a3ab/gcc%2Ffortran%2Farith.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.cc?ref=34cecde675be67543b386b593132ce8b1bb0a3ab", "patch": "@@ -422,6 +422,9 @@ gfc_arith_not (gfc_expr *op1, gfc_expr **resultp)\n {\n   gfc_expr *result;\n \n+  if (op1->ts.type != BT_LOGICAL)\n+    return ARITH_INVALID_TYPE;\n+\n   result = gfc_get_constant_expr (BT_LOGICAL, op1->ts.kind, &op1->where);\n   result->value.logical = !op1->value.logical;\n   *resultp = result;\n@@ -435,6 +438,9 @@ gfc_arith_and (gfc_expr *op1, gfc_expr *op2, gfc_expr **resultp)\n {\n   gfc_expr *result;\n \n+  if (op1->ts.type != BT_LOGICAL || op2->ts.type != BT_LOGICAL)\n+    return ARITH_INVALID_TYPE;\n+\n   result = gfc_get_constant_expr (BT_LOGICAL, gfc_kind_max (op1, op2),\n \t\t\t\t  &op1->where);\n   result->value.logical = op1->value.logical && op2->value.logical;\n@@ -449,6 +455,9 @@ gfc_arith_or (gfc_expr *op1, gfc_expr *op2, gfc_expr **resultp)\n {\n   gfc_expr *result;\n \n+  if (op1->ts.type != BT_LOGICAL || op2->ts.type != BT_LOGICAL)\n+    return ARITH_INVALID_TYPE;\n+\n   result = gfc_get_constant_expr (BT_LOGICAL, gfc_kind_max (op1, op2),\n \t\t\t\t  &op1->where);\n   result->value.logical = op1->value.logical || op2->value.logical;\n@@ -463,6 +472,9 @@ gfc_arith_eqv (gfc_expr *op1, gfc_expr *op2, gfc_expr **resultp)\n {\n   gfc_expr *result;\n \n+  if (op1->ts.type != BT_LOGICAL || op2->ts.type != BT_LOGICAL)\n+    return ARITH_INVALID_TYPE;\n+\n   result = gfc_get_constant_expr (BT_LOGICAL, gfc_kind_max (op1, op2),\n \t\t\t\t  &op1->where);\n   result->value.logical = op1->value.logical == op2->value.logical;\n@@ -477,6 +489,9 @@ gfc_arith_neqv (gfc_expr *op1, gfc_expr *op2, gfc_expr **resultp)\n {\n   gfc_expr *result;\n \n+  if (op1->ts.type != BT_LOGICAL || op2->ts.type != BT_LOGICAL)\n+    return ARITH_INVALID_TYPE;\n+\n   result = gfc_get_constant_expr (BT_LOGICAL, gfc_kind_max (op1, op2),\n \t\t\t\t  &op1->where);\n   result->value.logical = op1->value.logical != op2->value.logical;\n@@ -1187,6 +1202,9 @@ gfc_arith_eq (gfc_expr *op1, gfc_expr *op2, gfc_expr **resultp)\n {\n   gfc_expr *result;\n \n+  if (op1->ts.type != op2->ts.type)\n+    return ARITH_INVALID_TYPE;\n+\n   result = gfc_get_constant_expr (BT_LOGICAL, gfc_default_logical_kind,\n \t\t\t\t  &op1->where);\n   result->value.logical = (op1->ts.type == BT_COMPLEX)\n@@ -1203,6 +1221,9 @@ gfc_arith_ne (gfc_expr *op1, gfc_expr *op2, gfc_expr **resultp)\n {\n   gfc_expr *result;\n \n+  if (op1->ts.type != op2->ts.type)\n+    return ARITH_INVALID_TYPE;\n+\n   result = gfc_get_constant_expr (BT_LOGICAL, gfc_default_logical_kind,\n \t\t\t\t  &op1->where);\n   result->value.logical = (op1->ts.type == BT_COMPLEX)\n@@ -1219,6 +1240,9 @@ gfc_arith_gt (gfc_expr *op1, gfc_expr *op2, gfc_expr **resultp)\n {\n   gfc_expr *result;\n \n+  if (op1->ts.type != op2->ts.type)\n+    return ARITH_INVALID_TYPE;\n+\n   result = gfc_get_constant_expr (BT_LOGICAL, gfc_default_logical_kind,\n \t\t\t\t  &op1->where);\n   result->value.logical = (gfc_compare_expr (op1, op2, INTRINSIC_GT) > 0);\n@@ -1233,6 +1257,9 @@ gfc_arith_ge (gfc_expr *op1, gfc_expr *op2, gfc_expr **resultp)\n {\n   gfc_expr *result;\n \n+  if (op1->ts.type != op2->ts.type)\n+    return ARITH_INVALID_TYPE;\n+\n   result = gfc_get_constant_expr (BT_LOGICAL, gfc_default_logical_kind,\n \t\t\t\t  &op1->where);\n   result->value.logical = (gfc_compare_expr (op1, op2, INTRINSIC_GE) >= 0);\n@@ -1247,6 +1274,9 @@ gfc_arith_lt (gfc_expr *op1, gfc_expr *op2, gfc_expr **resultp)\n {\n   gfc_expr *result;\n \n+  if (op1->ts.type != op2->ts.type)\n+    return ARITH_INVALID_TYPE;\n+\n   result = gfc_get_constant_expr (BT_LOGICAL, gfc_default_logical_kind,\n \t\t\t\t  &op1->where);\n   result->value.logical = (gfc_compare_expr (op1, op2, INTRINSIC_LT) < 0);\n@@ -1261,6 +1291,9 @@ gfc_arith_le (gfc_expr *op1, gfc_expr *op2, gfc_expr **resultp)\n {\n   gfc_expr *result;\n \n+  if (op1->ts.type != op2->ts.type)\n+    return ARITH_INVALID_TYPE;\n+\n   result = gfc_get_constant_expr (BT_LOGICAL, gfc_default_logical_kind,\n \t\t\t\t  &op1->where);\n   result->value.logical = (gfc_compare_expr (op1, op2, INTRINSIC_LE) <= 0);"}, {"sha": "4b5c6a0f844f0490f126bd8351b63a3a8360512e", "filename": "gcc/testsuite/gfortran.dg/pr107272.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34cecde675be67543b386b593132ce8b1bb0a3ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr107272.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34cecde675be67543b386b593132ce8b1bb0a3ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr107272.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr107272.f90?ref=34cecde675be67543b386b593132ce8b1bb0a3ab", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do compile }\n+! PR fortran/107272 - followup of PR/107217 for non-numeric types\n+\n+program p\n+  print *, 2 <= [real :: (['1'])] ! { dg-error \"Cannot convert\" }\n+  print *, 2 <  [real :: (['1'])] ! { dg-error \"Cannot convert\" }\n+  print *, 2 == [real :: (['1'])] ! { dg-error \"Cannot convert\" }\n+  print *, 2 /= [real :: (['1'])] ! { dg-error \"Cannot convert\" }\n+  print *, 2 >= [real :: (['1'])] ! { dg-error \"Cannot convert\" }\n+  print *, 2 >  [real :: (['1'])] ! { dg-error \"Cannot convert\" }\n+  print *, [real :: (['1'])] >= 2 ! { dg-error \"Cannot convert\" }\n+  print *, [real :: (['1'])] >  2 ! { dg-error \"Cannot convert\" }\n+  print *, [real :: (['1'])] == 2 ! { dg-error \"Cannot convert\" }\n+  print *, [real :: (['1'])] /= 2 ! { dg-error \"Cannot convert\" }\n+  print *, [real :: (['1'])] <= 2 ! { dg-error \"Cannot convert\" }\n+  print *, [real :: (['1'])] <  2 ! { dg-error \"Cannot convert\" }\n+  print *, [logical :: (['1'])] .and.  .true. ! { dg-error \"Cannot convert\" }\n+  print *, [logical :: (['1'])] .or.   .true. ! { dg-error \"Cannot convert\" }\n+  print *, [logical :: (['1'])] .eqv.  .true. ! { dg-error \"Cannot convert\" }\n+  print *, [logical :: (['1'])] .neqv. .true. ! { dg-error \"Cannot convert\" }\n+end"}]}