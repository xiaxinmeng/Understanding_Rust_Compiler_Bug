{"sha": "9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNmMTA2NTViYjc4YjUwMDU4MWYyZTNlOWJmZDBkNDRjYmVlN2Q1Yw==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2009-12-11T14:36:05Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2009-12-11T14:36:05Z"}, "message": "re PR c++/42225 (GCC 4.5 ICE (segfault) on C++ templated code)\n\nFix PR c++/42225\n\ngcc/cp/ChangeLog:\n\tPR c++/42225\n\t* typeck.c (incompatible_dependent_typedefs_p): New function.\n\t(structural_comptypes): Use it.\n\t* cp-tree.h (cp_set_underlying_type): Declare ...\n\t* tree.c (cp_set_underlying_type): ... new function.\n\t* class.c (build_self_reference): Use cp_set_underlying_type\n\tinstead of set_underlying_type.\n\t* decl2.c (grokfield): Likewise.\n\t* name-lookup.c (pushdecl_maybe_friend): Likewise.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/42225\n\t* g++.dg/template/typedef24.C: New test.\n\t* g++.dg/template/typedef25.C: New test.\n\nFrom-SVN: r155160", "tree": {"sha": "fcebb61777e39028dfd13660e12098519b9ca084", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcebb61777e39028dfd13660e12098519b9ca084"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c/comments", "author": null, "committer": null, "parents": [{"sha": "c9e900454a397fc14d0ba4bdef23fd3154314fbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9e900454a397fc14d0ba4bdef23fd3154314fbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9e900454a397fc14d0ba4bdef23fd3154314fbe"}], "stats": {"total": 161, "additions": 158, "deletions": 3}, "files": [{"sha": "988f98f41e6a87e4885cf0605cc10f4949a7e00b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c", "patch": "@@ -1,3 +1,15 @@\n+2009-12-11  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/42225\n+\t* typeck.c (incompatible_dependent_typedefs_p): New function.\n+\t(structural_comptypes): Use it.\n+\t* cp-tree.h (cp_set_underlying_type): Declare ...\n+\t* tree.c (cp_set_underlying_type): ... new function.\n+\t* class.c (build_self_reference): Use cp_set_underlying_type\n+\tinstead of set_underlying_type.\n+\t* decl2.c (grokfield): Likewise.\n+\t* name-lookup.c (pushdecl_maybe_friend): Likewise.\n+\n 2009-12-11  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/42251"}, {"sha": "fff438033d350d894fd2df168d212a1b365b7374", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c", "patch": "@@ -6514,7 +6514,7 @@ build_self_reference (void)\n   DECL_CONTEXT (value) = current_class_type;\n   DECL_ARTIFICIAL (value) = 1;\n   SET_DECL_SELF_REFERENCE_P (value);\n-  set_underlying_type (value);\n+  cp_set_underlying_type (value);\n \n   if (processing_template_decl)\n     value = push_template_decl (value);"}, {"sha": "d0a0435bb23683938dc10e0591f4b8a8f90a4faa", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c", "patch": "@@ -5189,6 +5189,7 @@ extern bool class_tmpl_impl_spec_p\t\t(const_tree);\n extern int zero_init_p\t\t\t\t(const_tree);\n extern tree strip_typedefs\t\t\t(tree);\n extern bool typedef_variant_p\t\t\t(tree);\n+extern void cp_set_underlying_type\t\t(tree);\n extern tree copy_binfo\t\t\t\t(tree, tree, tree,\n \t\t\t\t\t\t tree *, int);\n extern int member_p\t\t\t\t(const_tree);"}, {"sha": "2b284fb126231a42289b545a108c681ee621ca39", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c", "patch": "@@ -844,7 +844,7 @@ grokfield (const cp_declarator *declarator,\n       if (declspecs->specs[(int)ds_typedef]\n           && TREE_TYPE (value) != error_mark_node\n           && TYPE_NAME (TYPE_MAIN_VARIANT (TREE_TYPE (value))) != value)\n-\tset_underlying_type (value);\n+\tcp_set_underlying_type (value);\n \n       return value;\n     }"}, {"sha": "1371c8a11c699fa5455ba292ab331779db65ebf9", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c", "patch": "@@ -874,7 +874,7 @@ pushdecl_maybe_friend (tree x, bool is_friend)\n \t\t     inlining.  */\n \t\t  && (!TYPE_NAME (type)\n \t\t      || TYPE_NAME (type) != DECL_ABSTRACT_ORIGIN (x))))\n-\t    set_underlying_type (x);\n+\t    cp_set_underlying_type (x);\n \n \t  if (type != error_mark_node\n \t      && TYPE_NAME (type)"}, {"sha": "7097f8c68b61fa921823c1ff4b48eb319dcd5885", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c", "patch": "@@ -1076,6 +1076,22 @@ typedef_variant_p (tree type)\n   return is_typedef_decl (TYPE_NAME (type));\n }\n \n+/* Setup a TYPE_DECL node as a typedef representation.\n+   See comments of set_underlying_type in c-common.c.  */\n+\n+void\n+cp_set_underlying_type (tree t)\n+{\n+  set_underlying_type (t);\n+  /* If the typedef variant type is dependent, make it require\n+     structural equality.\n+     This is useful when comparing two dependent typedef variant types,\n+     because it forces the comparison of the template parameters of their\n+     decls for instance.  */\n+  if (dependent_type_p (TREE_TYPE (t)))\n+    SET_TYPE_STRUCTURAL_EQUALITY (TREE_TYPE (t));\n+}\n+\n \f\n /* Makes a copy of BINFO and TYPE, which is to be inherited into a\n    graph dominated by T.  If BINFO is NULL, TYPE is a dependent base,"}, {"sha": "791b5065c8f204447276b084e3cc04bf5ce2ac13", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c", "patch": "@@ -1073,6 +1073,47 @@ comp_array_types (const_tree t1, const_tree t2, bool allow_redeclaration)\n   return true;\n }\n \n+/* Subroutine of structural_comptypes.\n+   Compare the template parameters of the\n+   typedef decl of T1 and T2. \n+   Return TRUE if the template parameters of the typedef decls of T1 and T2 are\n+   different, FALSE otherwise.  */\n+\n+static bool\n+incompatible_dependent_typedefs_p (tree t1, tree t2)\n+{\n+  tree decl1, tinfo1,\n+       decl2, tinfo2;\n+\n+  if (!typedef_variant_p (t1)\n+      || !typedef_variant_p (t2)\n+      || !dependent_type_p (t1)\n+      || !dependent_type_p (t2))\n+    return false;\n+\n+  decl1 = TYPE_NAME (t1);\n+  decl2 = TYPE_NAME (t2);\n+  if (decl1 == decl2)\n+    return false ;\n+\n+  tinfo1 = get_template_info (decl1);\n+  if (!tinfo1)\n+    tinfo1 = get_template_info (DECL_CONTEXT (decl1));\n+\n+  tinfo2 = get_template_info (decl2);\n+  if (!tinfo2)\n+    tinfo2 = get_template_info (DECL_CONTEXT (decl2));\n+\n+  gcc_assert (tinfo1 != NULL_TREE\n+\t      && tinfo2 != NULL_TREE);\n+\n+  if (tinfo1 == tinfo2)\n+    return false;\n+\n+  return !comp_template_parms (DECL_TEMPLATE_PARMS (TI_TEMPLATE (tinfo1)),\n+\t\t\t       DECL_TEMPLATE_PARMS (TI_TEMPLATE (tinfo2)));\n+}\n+\n /* Subroutine in comptypes.  */\n \n static bool\n@@ -1120,6 +1161,9 @@ structural_comptypes (tree t1, tree t2, int strict)\n       && TYPE_MAIN_VARIANT (t1) == TYPE_MAIN_VARIANT (t2))\n     return true;\n \n+  if (incompatible_dependent_typedefs_p (t1, t2))\n+    return false;\n+\n   /* Compare the types.  Break out if they could be the same.  */\n   switch (TREE_CODE (t1))\n     {"}, {"sha": "18343a27538dc8a22146d80e93b7323ba53e671e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c", "patch": "@@ -1,3 +1,9 @@\n+2009-12-11  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/42225\n+\t* g++.dg/template/typedef24.C: New test.\n+\t* g++.dg/template/typedef25.C: New test.\n+\n 2009-12-11  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/42251"}, {"sha": "ddcae1d61e0785f2a95899fabd58ba1edc59fb96", "filename": "gcc/testsuite/g++.dg/template/typedef24.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef24.C?ref=9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c", "patch": "@@ -0,0 +1,33 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// Origin PR c++/42225\n+// { dg-do compile }\n+\n+template<class T>\n+struct A\n+{\n+    typedef T I;\n+};\n+\n+template<class T, int>\n+struct B\n+{\n+    typedef T TT;\n+    typedef typename TT::I TT_I;\n+    typedef A<TT_I> TA;\n+};\n+\n+template<class T>\n+void\n+foo()\n+{\n+    typedef T TT;\n+    typedef typename TT::I TT_I;\n+    typedef A<TT_I> TA;\n+}\n+\n+int\n+main()\n+{\n+    foo<A<int> >();\n+}\n+"}, {"sha": "4f5868f12718a86b85b41a44ff688165a9c19663", "filename": "gcc/testsuite/g++.dg/template/typedef25.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef25.C?ref=9cf10655bb78b500581f2e3e9bfd0d44cbee7d5c", "patch": "@@ -0,0 +1,43 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// Origin PR c++/42225\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do compile }\n+\n+template<class T>\n+struct A\n+{\n+    typedef T I;\n+    static const char *i;\n+};\n+\n+template<class T, int>\n+struct B\n+{\n+    typedef T TT;\n+    typedef decltype(TT::i)  TT_I0;\n+    typedef decltype(&TT::i) TT_I1;\n+    typedef decltype(*TT::i) TT_I2;\n+    typedef A<TT_I0> TA0;\n+    typedef A<TT_I1> TA1;\n+    typedef A<TT_I2> TA2;\n+};\n+\n+template<class T>\n+void\n+foo()\n+{\n+    typedef T TT;\n+    typedef decltype(TT::i)  TT_I0;\n+    typedef decltype(&TT::i) TT_I1;\n+    typedef decltype(*TT::i) TT_I2;\n+    typedef A<TT_I0> TA0;\n+    typedef A<TT_I1> TA1;\n+    typedef A<TT_I2> TA2;\n+}\n+\n+int\n+main()\n+{\n+    foo<A<int> >();\n+}\n+"}]}