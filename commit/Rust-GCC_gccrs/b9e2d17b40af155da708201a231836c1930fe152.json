{"sha": "b9e2d17b40af155da708201a231836c1930fe152", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjllMmQxN2I0MGFmMTU1ZGE3MDgyMDFhMjMxODM2YzE5MzBmZTE1Mg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-05-08T21:02:31Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-05-08T21:02:31Z"}, "message": "cpplex.c (cpp_interpret_charconst): Truncate as well as sign-extend.\n\n\t* cpplex.c (cpp_interpret_charconst): Truncate as well as\n\tsign-extend.\ndoc:\n\t* cpp.texi: Clarify multichar charconst valuation.\ntestsuite:\n\t* gcc.dg/cpp/charconst-4.c: More tests.\n\nFrom-SVN: r53301", "tree": {"sha": "dcf24c4e35c90d6be02f200980d40c51523db0ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcf24c4e35c90d6be02f200980d40c51523db0ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9e2d17b40af155da708201a231836c1930fe152", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9e2d17b40af155da708201a231836c1930fe152", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9e2d17b40af155da708201a231836c1930fe152", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9e2d17b40af155da708201a231836c1930fe152/comments", "author": null, "committer": null, "parents": [{"sha": "4434687a6ce7af0d637a4b1683bc91d8508fa2c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4434687a6ce7af0d637a4b1683bc91d8508fa2c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4434687a6ce7af0d637a4b1683bc91d8508fa2c5"}], "stats": {"total": 103, "additions": 84, "deletions": 19}, "files": [{"sha": "3b3bede67ab06f2cadeaafcc01c8ae144e356b5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e2d17b40af155da708201a231836c1930fe152/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e2d17b40af155da708201a231836c1930fe152/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9e2d17b40af155da708201a231836c1930fe152", "patch": "@@ -1,3 +1,10 @@\n+2002-05-08  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cpplex.c (cpp_interpret_charconst): Truncate as well as\n+\tsign-extend.\n+doc:\n+\t* cpp.texi: Clarify multichar charconst valuation.\n+\n 2002-05-08  Mark Mitchell  <mark@codesourcery.com>\n \n \t* doc/invoke.texi: Document -mwindiss option."}, {"sha": "bba6f0747304cfd6ad09c06e08b9996b891e7c50", "filename": "gcc/cpplex.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e2d17b40af155da708201a231836c1930fe152/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e2d17b40af155da708201a231836c1930fe152/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=b9e2d17b40af155da708201a231836c1930fe152", "patch": "@@ -1954,16 +1954,18 @@ cpp_interpret_charconst (pfile, token, pchars_seen, unsignedp)\n \tcpp_error (pfile, DL_WARNING, \"multi-character character constant\");\n     }\n \n-  /* Sign-extend the constant.  */\n-  if (!unsigned_p)\n+  /* Sign-extend or truncate the constant to cppchar_t.  The value is\n+     in WIDTH bits, but for multi-char charconsts it's value is the\n+     full target type's width.  */\n+  if (chars_seen > 1)\n+    width *= max_chars;\n+  if (width < BITS_PER_CPPCHAR_T)\n     {\n-      size_t precision = width;\n-\n-      if (chars_seen > 1)\n-\tprecision *= max_chars;\n-      if (precision < BITS_PER_CPPCHAR_T\n-\t  && (result & ((cppchar_t) 1 << (precision - 1))))\n-\tresult |= ~(((cppchar_t) 1 << precision) - 1);\n+      mask = ((cppchar_t) 1 << width) - 1;\n+      if (unsigned_p || !(result & (1 << (width - 1))))\n+\tresult &= mask;\n+      else\n+\tresult |= ~mask;\n     }\n \n   *pchars_seen = chars_seen;"}, {"sha": "194175362a810ccbb9a34b03784a829a7e084a0f", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e2d17b40af155da708201a231836c1930fe152/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e2d17b40af155da708201a231836c1930fe152/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=b9e2d17b40af155da708201a231836c1930fe152", "patch": "@@ -3512,19 +3512,21 @@ The preprocessor and compiler interpret character constants in the\n same way; i.e.@: escape sequences such as @samp{\\a} are given the\n values they would have on the target machine.\n \n-Multi-character character constants are interpreted a character at a\n-time, shifting the previous result left by the number of bits per\n-target character and or-ing the value of the new character truncated\n-to the width of a target character.  They have type @code{int}, and\n-are treated as signed regardless of whether single characters are\n-signed or not (a slight change from versions 3.1 and earlier of GCC).\n-If there are more characters in the constant than would fit in the\n-target @code{int} an error is issued.\n+The compiler values a multi-character character constant a character\n+at a time, shifting the previous value left by the number of bits per\n+target character, and then or-ing in the bit-pattern of the new\n+character truncated to the width of a target character.  The final\n+bit-pattern is given type @code{int}, and is therefore signed,\n+regardless of whether single characters are signed or not (a slight\n+change from versions 3.1 and earlier of GCC).  If there are more\n+characters in the constant than would fit in the target @code{int} the\n+compiler issues a warning, and the excess leading characters are\n+ignored.\n \n For example, 'ab' for a target with an 8-bit @code{char} would be\n interpreted as @w{(int) ((unsigned char) 'a' * 256 + (unsigned char)\n-'b')}, and 'a\\234' as @w{(int) ((unsigned char) 'a' * 256 + (unsigned\n-char) '\\234')}.\n+'b')}, and '\\234a' as @w{(int) ((unsigned char) '\\234' * 256 + (unsigned\n+char) 'a')}.\n \n @item Source file inclusion.\n "}, {"sha": "f0b7a1cf4d1eb2d25590c6b006c7b70d12dc9a02", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e2d17b40af155da708201a231836c1930fe152/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e2d17b40af155da708201a231836c1930fe152/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b9e2d17b40af155da708201a231836c1930fe152", "patch": "@@ -1,3 +1,7 @@\n+2002-05-08  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* gcc.dg/cpp/charconst-4.c: More tests.\n+\n 2002-05-08  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c/6569"}, {"sha": "986ea80f57ede04020c0a7e2c77985d71afc4a9f", "filename": "gcc/testsuite/gcc.dg/cpp/charconst-4.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e2d17b40af155da708201a231836c1930fe152/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcharconst-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e2d17b40af155da708201a231836c1930fe152/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcharconst-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcharconst-4.c?ref=b9e2d17b40af155da708201a231836c1930fe152", "patch": "@@ -0,0 +1,50 @@\n+/* Copyright (C) 2001 Free Software Foundation, Inc.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-Wno-multichar -fsigned-char\" } */\n+\n+/* This tests how overly-long multichar charconsts are truncated, and\n+   whether \"short\" multichar charconsts are incorrectly sign extended\n+   (regardless of char signedness).  Preprocessor is used so that we\n+   have only one place where the too long warning is generated, so\n+   that the test works for all targets.\n+\n+   Neil Booth, 8 May 2002.  */\n+\n+#include <limits.h>\n+\n+#if INT_MAX == 32767\n+# define LONG_CHARCONST '!\\234a'\n+# define SHORT_CHARCONST '\\234a'\n+# define POS_CHARCONST '\\1'\n+#elif INT_MAX == 2147483647\n+# define LONG_CHARCONST '!\\234abc'\n+# define SHORT_CHARCONST '\\234abc'\n+# define POS_CHARCONST '\\234a'\n+#elif INT_MAX == 9223372036854775807\n+# define LONG_CHARCONST '!\\234abcdefg'\n+# define SHORT_CHARCONST '\\234abcdefg'\n+# define POS_CHARCONST '\\234a'\n+#else\n+/* Target int size not handled, do something that won't fail.  */\n+# define LONG_CHARCONST '\\234a'\n+# define SHORT_CHARCONST '\\234a'\n+# define POS_CHARCONST '\\1'\n+#endif\n+\n+#if POS_CHARCONST < 0\n+# error Charconst incorrectly sign-extended\n+#endif\n+\n+#if LONG_CHARCONST != SHORT_CHARCONST /* { dg-warning \"too long\" \"\" } */\n+# error Overly long charconst truncates wrongly for preprocessor\n+#endif\n+\n+int main ()\n+{\n+  if (POS_CHARCONST < 0)\n+    abort ();\n+  if (LONG_CHARCONST != SHORT_CHARCONST)  /* { dg-warning \"too long\" \"\" } */\n+    abort ();\n+  return 0;\n+}"}]}