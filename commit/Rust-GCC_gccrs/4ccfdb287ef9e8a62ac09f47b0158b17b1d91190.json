{"sha": "4ccfdb287ef9e8a62ac09f47b0158b17b1d91190", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNjZmRiMjg3ZWY5ZThhNjJhYzA5ZjQ3YjAxNThiMTdiMWQ5MTE5MA==", "commit": {"author": {"name": "John Marino", "email": "gnugcc@marino.st", "date": "2017-03-10T19:33:27Z"}, "committer": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2017-03-10T19:33:27Z"}, "message": "freebsd-unwind.h: New file.\n\n2017-03-10  John Marino  <gnugcc@marino.st>\n\n    * config/aarch64/freebsd-unwind.h: New file.\n    * config.host: Add aarch64-*-freebsd unwinder.\n\nFrom-SVN: r246052", "tree": {"sha": "1a3ccb130d1d70655f70ab9d1a972059aef8d8ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a3ccb130d1d70655f70ab9d1a972059aef8d8ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ccfdb287ef9e8a62ac09f47b0158b17b1d91190", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ccfdb287ef9e8a62ac09f47b0158b17b1d91190", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ccfdb287ef9e8a62ac09f47b0158b17b1d91190", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ccfdb287ef9e8a62ac09f47b0158b17b1d91190/comments", "author": null, "committer": null, "parents": [{"sha": "4144e4e3010cb49a3659055de45acbf7a96b2da4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4144e4e3010cb49a3659055de45acbf7a96b2da4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4144e4e3010cb49a3659055de45acbf7a96b2da4"}], "stats": {"total": 115, "additions": 114, "deletions": 1}, "files": [{"sha": "4bae69f396155333aab3313d039ba1ab0dbcabfd", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ccfdb287ef9e8a62ac09f47b0158b17b1d91190/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ccfdb287ef9e8a62ac09f47b0158b17b1d91190/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=4ccfdb287ef9e8a62ac09f47b0158b17b1d91190", "patch": "@@ -1,3 +1,8 @@\n+2017-03-10  John Marino  <gnugcc@marino.st>\n+\n+\t* config/aarch64/freebsd-unwind.h: New file.\n+\t* config.host: Add aarch64-*-freebsd unwinder.\n+\n 2017-03-10  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/crtrestvr.s: Use .machine altivec."}, {"sha": "b279a6458f9a6df702cffd3634e690bbeaa99875", "filename": "libgcc/config.host", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ccfdb287ef9e8a62ac09f47b0158b17b1d91190/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ccfdb287ef9e8a62ac09f47b0158b17b1d91190/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=4ccfdb287ef9e8a62ac09f47b0158b17b1d91190", "patch": "@@ -340,7 +340,7 @@ aarch64*-*-freebsd*)\n \textra_parts=\"$extra_parts crtfastmath.o\"\n \ttmake_file=\"${tmake_file} ${cpu_type}/t-aarch64\"\n \ttmake_file=\"${tmake_file} ${cpu_type}/t-softfp t-softfp t-crtfm\"\n-\tmd_unwind_header=aarch64/aarch64-unwind.h\n+\tmd_unwind_header=aarch64/freebsd-unwind.h\n \t;;\n aarch64*-*-linux*)\n \textra_parts=\"$extra_parts crtfastmath.o\""}, {"sha": "b822a7281f5dda588686c202fb637979a53eb2c5", "filename": "libgcc/config/aarch64/freebsd-unwind.h", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ccfdb287ef9e8a62ac09f47b0158b17b1d91190/libgcc%2Fconfig%2Faarch64%2Ffreebsd-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ccfdb287ef9e8a62ac09f47b0158b17b1d91190/libgcc%2Fconfig%2Faarch64%2Ffreebsd-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Faarch64%2Ffreebsd-unwind.h?ref=4ccfdb287ef9e8a62ac09f47b0158b17b1d91190", "patch": "@@ -0,0 +1,108 @@\n+/* DWARF2 EH unwinding support for FreeBSD/ARM64 (aarch64).\n+   Copyright (C) 2017 Free Software Foundation, Inc.\n+   Contributed by John Marino <gnugcc@marino.st>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Identify a signal frame, and set the frame state data appropriately.\n+   See unwind-dw2.c for the structs. */\n+\n+/* Always include AArch64 unwinder header file.  */\n+#include \"config/aarch64/aarch64-unwind.h\"\n+\n+#include <sys/types.h>\n+#include <signal.h>\n+#include <unistd.h>\n+#include <sys/ucontext.h>\n+#include <machine/frame.h>\n+#include <sys/user.h>\n+#include <sys/sysctl.h>\n+\n+#define REG_NAME(reg)   mc_gpregs.gp_## reg\n+#define XREG(num)       mc_gpregs.gp_x[num]\n+#define DARC            __LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__\n+\n+#define MD_FALLBACK_FRAME_STATE_FOR aarch64_freebsd_fallback_frame_state\n+\n+static int\n+aarch64_outside_sigtramp_range (unsigned char *pc)\n+{\n+  static int sigtramp_range_determined = 0;\n+  static unsigned char *sigtramp_start, *sigtramp_end;\n+\n+  if (sigtramp_range_determined == 0)\n+    {\n+      struct kinfo_sigtramp kst = {0};\n+      size_t len = sizeof (kst);\n+      int mib[4] = { CTL_KERN, KERN_PROC, KERN_PROC_SIGTRAMP, getpid() };\n+\n+      sigtramp_range_determined = 1;\n+      if (sysctl (mib, 4, &kst, &len, NULL, 0) == 0)\n+      {\n+        sigtramp_range_determined = 2;\n+        sigtramp_start = kst.ksigtramp_start;\n+        sigtramp_end   = kst.ksigtramp_end;\n+      }\n+    }\n+  if (sigtramp_range_determined < 2)  /* sysctl failed if < 2 */\n+    return 1;\n+\n+  return (pc < sigtramp_start || pc >= sigtramp_end);\n+}\n+\n+static _Unwind_Reason_Code\n+aarch64_freebsd_fallback_frame_state\n+(struct _Unwind_Context *context, _Unwind_FrameState *fs)\n+{\n+  int n;\n+  struct sigframe *sf;\n+  mcontext_t *sc;\n+  _Unwind_Ptr new_cfa;\n+\n+  if (aarch64_outside_sigtramp_range(context->ra))\n+    return _URC_END_OF_STACK;\n+\n+  sf = (struct sigframe *) context->cfa;\n+  sc = &sf->sf_uc.uc_mcontext;\n+\n+  new_cfa = (_Unwind_Ptr) sc;\n+  fs->regs.cfa_how = CFA_REG_OFFSET;\n+  fs->regs.cfa_reg = __LIBGCC_STACK_POINTER_REGNUM__;\n+  fs->regs.cfa_offset = new_cfa - (_Unwind_Ptr) context->cfa;\n+\n+  for (n = 0; n < 32; n++)\n+    fs->regs.reg[n].how = REG_SAVED_OFFSET;\n+\n+  for (n = 0; n < 30; n++)\n+    fs->regs.reg[n].loc.offset = (_Unwind_Ptr) &(sc->XREG(n)) - new_cfa;\n+\n+  fs->regs.reg[30].loc.offset = (_Unwind_Ptr) &(sc->REG_NAME(lr)) - new_cfa;\n+  fs->regs.reg[31].loc.offset = (_Unwind_Ptr) &(sc->REG_NAME(sp)) - new_cfa;\n+\n+  fs->regs.reg[DARC].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[DARC].loc.offset = (_Unwind_Ptr) &(sc->REG_NAME(elr)) - new_cfa;\n+\n+  fs->retaddr_column = DARC;\n+  fs->signal_frame = 1;\n+\n+  return _URC_NO_REASON;\n+}"}]}