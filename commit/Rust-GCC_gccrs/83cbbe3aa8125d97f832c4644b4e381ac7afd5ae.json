{"sha": "83cbbe3aa8125d97f832c4644b4e381ac7afd5ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNjYmJlM2FhODEyNWQ5N2Y4MzJjNDY0NGI0ZTM4MWFjN2FmZDVhZQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2018-01-10T22:02:31Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2018-01-10T22:02:31Z"}, "message": "rs6000.c (is_complex_IBM_long_double): Explicitly check for 128-bit long double before checking TCmode.\n\n2018-01-10  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000.c (is_complex_IBM_long_double): Explicitly\n\tcheck for 128-bit long double before checking TCmode.\n\t* config/rs6000/rs6000.h (FLOAT128_IEEE_P): Explicitly check for\n\t128-bit long doubles before checking TFmode or TCmode.\n\t(FLOAT128_IBM_P): Likewise.\n\nFrom-SVN: r256458", "tree": {"sha": "6abf8dd0960762f686a610cff3d66c43a743a4db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6abf8dd0960762f686a610cff3d66c43a743a4db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83cbbe3aa8125d97f832c4644b4e381ac7afd5ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83cbbe3aa8125d97f832c4644b4e381ac7afd5ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83cbbe3aa8125d97f832c4644b4e381ac7afd5ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83cbbe3aa8125d97f832c4644b4e381ac7afd5ae/comments", "author": null, "committer": null, "parents": [{"sha": "c42d0aa0893cab444366c80fdd5b23bb45de6276", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c42d0aa0893cab444366c80fdd5b23bb45de6276", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c42d0aa0893cab444366c80fdd5b23bb45de6276"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "9e7590526e0434e89b92ef7cdf853810d1b3b7f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83cbbe3aa8125d97f832c4644b4e381ac7afd5ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83cbbe3aa8125d97f832c4644b4e381ac7afd5ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=83cbbe3aa8125d97f832c4644b4e381ac7afd5ae", "patch": "@@ -1,3 +1,11 @@\n+2018-01-10  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (is_complex_IBM_long_double): Explicitly\n+\tcheck for 128-bit long double before checking TCmode.\n+\t* config/rs6000/rs6000.h (FLOAT128_IEEE_P): Explicitly check for\n+\t128-bit long doubles before checking TFmode or TCmode.\n+\t(FLOAT128_IBM_P): Likewise.\n+\n 2018-01-10  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/83671"}, {"sha": "0a0b49422d89ce1129a1b940d2a1fe069d1b3227", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83cbbe3aa8125d97f832c4644b4e381ac7afd5ae/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83cbbe3aa8125d97f832c4644b4e381ac7afd5ae/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=83cbbe3aa8125d97f832c4644b4e381ac7afd5ae", "patch": "@@ -11429,7 +11429,7 @@ rs6000_must_pass_in_stack (machine_mode mode, const_tree type)\n static inline bool\n is_complex_IBM_long_double (machine_mode mode)\n {\n-  return mode == ICmode || (!TARGET_IEEEQUAD && mode == TCmode);\n+  return mode == ICmode || (mode == TCmode && FLOAT128_IBM_P (TCmode));\n }\n \n /* Whether ABI_V4 passes MODE args to a function in floating point"}, {"sha": "3bffa29835560314d1acee2c7dcadff4fdf54b8e", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83cbbe3aa8125d97f832c4644b4e381ac7afd5ae/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83cbbe3aa8125d97f832c4644b4e381ac7afd5ae/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=83cbbe3aa8125d97f832c4644b4e381ac7afd5ae", "patch": "@@ -437,11 +437,13 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    Similarly IFmode is the IBM long double format even if the default is IEEE\n    128-bit.  Don't allow IFmode if -msoft-float.  */\n #define FLOAT128_IEEE_P(MODE)\t\t\t\t\t\t\\\n-  ((TARGET_IEEEQUAD && ((MODE) == TFmode || (MODE) == TCmode))\t\t\\\n+  ((TARGET_IEEEQUAD && TARGET_LONG_DOUBLE_128\t\t\t\t\\\n+    && ((MODE) == TFmode || (MODE) == TCmode))\t\t\t\t\\\n    || ((MODE) == KFmode) || ((MODE) == KCmode))\n \n #define FLOAT128_IBM_P(MODE)\t\t\t\t\t\t\\\n-  ((!TARGET_IEEEQUAD && ((MODE) == TFmode || (MODE) == TCmode))\t\t\\\n+  ((!TARGET_IEEEQUAD && TARGET_LONG_DOUBLE_128\t\t\t\t\\\n+    && ((MODE) == TFmode || (MODE) == TCmode))\t\t\t\t\\\n    || (TARGET_HARD_FLOAT && ((MODE) == IFmode || (MODE) == ICmode)))\n \n /* Helper macros to say whether a 128-bit floating point type can go in a"}]}