{"sha": "cf4737dcec18336b735a46d524bd8ef056e3d245", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y0NzM3ZGNlYzE4MzM2YjczNWE0NmQ1MjRiZDhlZjA1NmUzZDI0NQ==", "commit": {"author": {"name": "Liaiss Merzougue", "email": "merzougue@adacore.com", "date": "2020-10-08T15:26:11Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-11-25T13:22:25Z"}, "message": "[Ada] Unrecursify Set_Digit/Set_Image_Unsigned procedure\n\ngcc/ada/\n\n\t* libgnat/s-imagei.adb\n\t(Set_Digits): Rewrite the procedure to remove recursion.\n\t(Image_Integer, Set_Image_Integer): Update assertions and remove\n\tredundant ones.\n\t* libgnat/s-imageu.adb\n\t(Set_Image_Unsigned): Rewrite the procedure to remove recursion.", "tree": {"sha": "3d9cd601e10616588a6be5c73232eb86b9e7db72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d9cd601e10616588a6be5c73232eb86b9e7db72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf4737dcec18336b735a46d524bd8ef056e3d245", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf4737dcec18336b735a46d524bd8ef056e3d245", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf4737dcec18336b735a46d524bd8ef056e3d245", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf4737dcec18336b735a46d524bd8ef056e3d245/comments", "author": {"login": "liaiss", "id": 62889025, "node_id": "MDQ6VXNlcjYyODg5MDI1", "avatar_url": "https://avatars.githubusercontent.com/u/62889025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liaiss", "html_url": "https://github.com/liaiss", "followers_url": "https://api.github.com/users/liaiss/followers", "following_url": "https://api.github.com/users/liaiss/following{/other_user}", "gists_url": "https://api.github.com/users/liaiss/gists{/gist_id}", "starred_url": "https://api.github.com/users/liaiss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liaiss/subscriptions", "organizations_url": "https://api.github.com/users/liaiss/orgs", "repos_url": "https://api.github.com/users/liaiss/repos", "events_url": "https://api.github.com/users/liaiss/events{/privacy}", "received_events_url": "https://api.github.com/users/liaiss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b0c5c722709d41d2c7a9ccacb7a4f0cf3bd38e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b0c5c722709d41d2c7a9ccacb7a4f0cf3bd38e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b0c5c722709d41d2c7a9ccacb7a4f0cf3bd38e2"}], "stats": {"total": 86, "additions": 50, "deletions": 36}, "files": [{"sha": "36c1f6fea9f05de0a47de5ebba8cf17f86a2d902", "filename": "gcc/ada/libgnat/s-imagei.adb", "status": "modified", "additions": 27, "deletions": 20, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf4737dcec18336b735a46d524bd8ef056e3d245/gcc%2Fada%2Flibgnat%2Fs-imagei.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf4737dcec18336b735a46d524bd8ef056e3d245/gcc%2Fada%2Flibgnat%2Fs-imagei.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-imagei.adb?ref=cf4737dcec18336b735a46d524bd8ef056e3d245", "patch": "@@ -56,8 +56,11 @@ package body System.Image_I is\n       if V >= 0 then\n          S (1) := ' ';\n          P := 1;\n+         pragma Assert (P < S'Last);\n+\n       else\n          P := 0;\n+         pragma Assert (P < S'Last - 1);\n       end if;\n \n       Set_Image_Integer (V, S, P);\n@@ -72,26 +75,31 @@ package body System.Image_I is\n       S : in out String;\n       P : in out Natural)\n    is\n+      Nb_Digits : Natural := 0;\n+      Value     : Non_Positive := T;\n    begin\n-      if T <= -10 then\n-         Set_Digits (T / 10, S, P);\n-         pragma Assert (P >= (S'First - 1) and P < S'Last and\n-                        P < Natural'Last);\n-         --  No check is done since, as documented in the Set_Image_Integer\n-         --  specification, the caller guarantees that S is long enough to\n-         --  hold the result.\n-         P := P + 1;\n-         S (P) := Character'Val (48 - (T rem 10));\n+      pragma Assert (P >= S'First - 1 and P < S'Last);\n+      --  No check is done since, as documented in the Set_Image_Integer\n+      --  specification, the caller guarantees that S is long enough to\n+      --  hold the result.\n \n-      else\n-         pragma Assert (P >= (S'First - 1) and P < S'Last and\n-                        P < Natural'Last);\n-         --  No check is done since, as documented in the Set_Image_Integer\n-         --  specification, the caller guarantees that S is long enough to\n-         --  hold the result.\n-         P := P + 1;\n-         S (P) := Character'Val (48 - T);\n-      end if;\n+      --  First we compute the number of characters needed for representing\n+      --  the number.\n+      loop\n+         Value := Value / 10;\n+         Nb_Digits := Nb_Digits + 1;\n+         exit when Value = 0;\n+      end loop;\n+\n+      Value := T;\n+\n+      --  We now populate digits from the end of the string to the beginning\n+      for J in reverse  1 .. Nb_Digits loop\n+         S (P + J) := Character'Val (48 - (Value rem 10));\n+         Value := Value / 10;\n+      end loop;\n+\n+      P := P + Nb_Digits;\n    end Set_Digits;\n \n    -----------------------\n@@ -108,8 +116,7 @@ package body System.Image_I is\n          Set_Digits (-V, S, P);\n \n       else\n-         pragma Assert (P >= (S'First - 1) and P < S'Last and\n-                        P < Natural'Last);\n+         pragma Assert (P >= S'First - 1 and P < S'Last);\n          --  No check is done since, as documented in the specification,\n          --  the caller guarantees that S is long enough to hold the result.\n          P := P + 1;"}, {"sha": "8ffb8f036038ab185f36b013defaafe16350cc3f", "filename": "gcc/ada/libgnat/s-imageu.adb", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf4737dcec18336b735a46d524bd8ef056e3d245/gcc%2Fada%2Flibgnat%2Fs-imageu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf4737dcec18336b735a46d524bd8ef056e3d245/gcc%2Fada%2Flibgnat%2Fs-imageu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-imageu.adb?ref=cf4737dcec18336b735a46d524bd8ef056e3d245", "patch": "@@ -56,24 +56,31 @@ package body System.Image_U is\n       S : in out String;\n       P : in out Natural)\n    is\n+      Nb_Digits : Natural := 0;\n+      Value     : Uns := V;\n    begin\n-      if V >= 10 then\n-         Set_Image_Unsigned (V / 10, S, P);\n-         pragma Assert (P >= (S'First - 1) and P < S'Last and\n-                        P < Natural'Last);\n-         --  No check is done since, as documented in the specification,\n-         --  the caller guarantees that S is long enough to hold the result.\n-         P := P + 1;\n-         S (P) := Character'Val (48 + (V rem 10));\n+      pragma Assert (P >= S'First - 1 and then P < S'Last and then\n+                     P < Natural'Last);\n+      --  No check is done since, as documented in the specification, the\n+      --  caller guarantees that S is long enough to hold the result.\n \n-      else\n-         pragma Assert (P >= (S'First - 1) and P < S'Last and\n-                        P < Natural'Last);\n-         --  No check is done since, as documented in the specification,\n-         --  the caller guarantees that S is long enough to hold the result.\n-         P := P + 1;\n-         S (P) := Character'Val (48 + V);\n-      end if;\n+      --  First we compute the number of characters needed for representing\n+      --  the number.\n+      loop\n+         Value := Value / 10;\n+         Nb_Digits := Nb_Digits + 1;\n+         exit when Value = 0;\n+      end loop;\n+\n+      Value := V;\n+\n+      --  We now populate digits from the end of the string to the beginning\n+      for J in reverse  1 .. Nb_Digits loop\n+         S (P + J) := Character'Val (48 + (Value rem 10));\n+         Value := Value / 10;\n+      end loop;\n+\n+      P := P + Nb_Digits;\n    end Set_Image_Unsigned;\n \n end System.Image_U;"}]}