{"sha": "5fe52462aa360852a33af4a40f0bd52e1709cca2", "node_id": "C_kwDOANBUbNoAKDVmZTUyNDYyYWEzNjA4NTJhMzNhZjRhNDBmMGJkNTJlMTcwOWNjYTI", "commit": {"author": {"name": "antego", "email": "antego@users.noreply.github.com", "date": "2022-05-01T01:26:24Z"}, "committer": {"name": "antego", "email": "antego@users.noreply.github.com", "date": "2022-05-01T01:26:24Z"}, "message": "Code deduplication for expression and type expansions.\n\nFollow-up for #1161", "tree": {"sha": "74875e9df756ef9f304e20c0bc251e35678a9a3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74875e9df756ef9f304e20c0bc251e35678a9a3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fe52462aa360852a33af4a40f0bd52e1709cca2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fe52462aa360852a33af4a40f0bd52e1709cca2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fe52462aa360852a33af4a40f0bd52e1709cca2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fe52462aa360852a33af4a40f0bd52e1709cca2/comments", "author": {"login": "antego", "id": 1451467, "node_id": "MDQ6VXNlcjE0NTE0Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/1451467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antego", "html_url": "https://github.com/antego", "followers_url": "https://api.github.com/users/antego/followers", "following_url": "https://api.github.com/users/antego/following{/other_user}", "gists_url": "https://api.github.com/users/antego/gists{/gist_id}", "starred_url": "https://api.github.com/users/antego/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antego/subscriptions", "organizations_url": "https://api.github.com/users/antego/orgs", "repos_url": "https://api.github.com/users/antego/repos", "events_url": "https://api.github.com/users/antego/events{/privacy}", "received_events_url": "https://api.github.com/users/antego/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antego", "id": 1451467, "node_id": "MDQ6VXNlcjE0NTE0Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/1451467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antego", "html_url": "https://github.com/antego", "followers_url": "https://api.github.com/users/antego/followers", "following_url": "https://api.github.com/users/antego/following{/other_user}", "gists_url": "https://api.github.com/users/antego/gists{/gist_id}", "starred_url": "https://api.github.com/users/antego/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antego/subscriptions", "organizations_url": "https://api.github.com/users/antego/orgs", "repos_url": "https://api.github.com/users/antego/repos", "events_url": "https://api.github.com/users/antego/events{/privacy}", "received_events_url": "https://api.github.com/users/antego/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f38bf60c3ac7f039db5ff5c7c0587325097892c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f38bf60c3ac7f039db5ff5c7c0587325097892c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f38bf60c3ac7f039db5ff5c7c0587325097892c8"}], "stats": {"total": 176, "additions": 56, "deletions": 120}, "files": [{"sha": "771cd9961917b983adf8ad629685b106dc2af990", "filename": "gcc/rust/expand/rust-attribute-visitor.cc", "status": "modified", "additions": 54, "deletions": 120, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fe52462aa360852a33af4a40f0bd52e1709cca2/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fe52462aa360852a33af4a40f0bd52e1709cca2/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc?ref=5fe52462aa360852a33af4a40f0bd52e1709cca2", "patch": "@@ -41,9 +41,7 @@ AttrVisitor::expand_struct_fields (std::vector<AST::StructField> &fields)\n       auto &type = field.get_field_type ();\n       type->accept_vis (*this);\n \n-      auto t_fragment = expander.take_expanded_fragment (*this);\n-      if (t_fragment.should_expand ())\n-\ttype = t_fragment.take_type_fragment ();\n+      maybe_expand_type (type);\n \n       if (type->is_marked_for_strip ())\n \trust_error_at (type->get_locus (),\n@@ -110,9 +108,7 @@ AttrVisitor::expand_function_params (std::vector<AST::FunctionParam> &params)\n       auto &type = param.get_type ();\n       type->accept_vis (*this);\n \n-      auto t_fragment = expander.take_expanded_fragment (*this);\n-      if (t_fragment.should_expand ())\n-\ttype = t_fragment.take_type_fragment ();\n+      maybe_expand_type (type);\n \n       if (type->is_marked_for_strip ())\n \trust_error_at (type->get_locus (),\n@@ -137,9 +133,7 @@ AttrVisitor::expand_generic_args (AST::GenericArgs &args)\n   for (auto &type : args.get_type_args ())\n     {\n       type->accept_vis (*this);\n-      auto t_fragment = expander.take_expanded_fragment (*this);\n-      if (t_fragment.should_expand ())\n-\ttype = t_fragment.take_type_fragment ();\n+      maybe_expand_type (type);\n \n       if (type->is_marked_for_strip ())\n \trust_error_at (type->get_locus (),\n@@ -169,9 +163,7 @@ AttrVisitor::expand_qualified_path_type (AST::QualifiedPathType &path_type)\n   auto &type = path_type.get_type ();\n   type->accept_vis (*this);\n \n-  auto t_fragment = expander.take_expanded_fragment (*this);\n-  if (t_fragment.should_expand ())\n-    type = t_fragment.take_type_fragment ();\n+  maybe_expand_type (type);\n \n   expander.pop_context ();\n \n@@ -216,9 +208,7 @@ AttrVisitor::AttrVisitor::expand_closure_params (\n \t  auto &type = param.get_type ();\n \t  type->accept_vis (*this);\n \n-\t  auto t_fragment = expander.take_expanded_fragment (*this);\n-\t  if (t_fragment.should_expand ())\n-\t    type = t_fragment.take_type_fragment ();\n+\t  maybe_expand_type (type);\n \n \t  if (type->is_marked_for_strip ())\n \t    rust_error_at (type->get_locus (),\n@@ -241,9 +231,7 @@ AttrVisitor::expand_self_param (AST::SelfParam &self_param)\n       auto &type = self_param.get_type ();\n       type->accept_vis (*this);\n \n-      auto t_fragment = expander.take_expanded_fragment (*this);\n-      if (t_fragment.should_expand ())\n-\ttype = t_fragment.take_type_fragment ();\n+      maybe_expand_type (type);\n \n       if (type->is_marked_for_strip ())\n \trust_error_at (type->get_locus (),\n@@ -281,9 +269,7 @@ AttrVisitor::expand_trait_function_decl (AST::TraitFunctionDecl &decl)\n       auto &return_type = decl.get_return_type ();\n       return_type->accept_vis (*this);\n \n-      auto r_fragment = expander.take_expanded_fragment (*this);\n-      if (r_fragment.should_expand ())\n-\treturn_type = r_fragment.take_type_fragment ();\n+      maybe_expand_type (return_type);\n \n       if (return_type->is_marked_for_strip ())\n \trust_error_at (return_type->get_locus (),\n@@ -319,9 +305,7 @@ AttrVisitor::expand_trait_method_decl (AST::TraitMethodDecl &decl)\n       auto &return_type = decl.get_return_type ();\n       return_type->accept_vis (*this);\n \n-      auto r_fragment = expander.take_expanded_fragment (*this);\n-      if (r_fragment.should_expand ())\n-\treturn_type = r_fragment.take_type_fragment ();\n+      maybe_expand_type (return_type);\n \n       if (return_type->is_marked_for_strip ())\n \trust_error_at (return_type->get_locus (),\n@@ -445,9 +429,7 @@ AttrVisitor::visit (AST::TypePathSegmentFunction &segment)\n       auto &return_type = type_path_function.get_return_type ();\n       return_type->accept_vis (*this);\n \n-      auto r_fragment = expander.take_expanded_fragment (*this);\n-      if (r_fragment.should_expand ())\n-\treturn_type = r_fragment.take_type_fragment ();\n+      maybe_expand_type (return_type);\n \n       if (return_type->is_marked_for_strip ())\n \trust_error_at (return_type->get_locus (),\n@@ -612,17 +594,13 @@ AttrVisitor::visit (AST::ArithmeticOrLogicalExpr &expr)\n    * with outer expr */\n   auto &l_expr = expr.get_left_expr ();\n   l_expr->accept_vis (*this);\n-  auto l_fragment = expander.take_expanded_fragment (*this);\n-  if (l_fragment.should_expand ())\n-    l_expr = l_fragment.take_expression_fragment ();\n+  maybe_expand_expr (l_expr);\n \n   /* should syntactically not have outer attributes, though this may\n    * not have worked in practice */\n   auto &r_expr = expr.get_right_expr ();\n   r_expr->accept_vis (*this);\n-  auto r_fragment = expander.take_expanded_fragment (*this);\n-  if (r_fragment.should_expand ())\n-    r_expr = r_fragment.take_expression_fragment ();\n+  maybe_expand_expr (r_expr);\n \n   // ensure that they are not marked for strip\n   if (expr.get_left_expr ()->is_marked_for_strip ())\n@@ -645,17 +623,13 @@ AttrVisitor::visit (AST::ComparisonExpr &expr)\n    * with outer expr */\n   auto &l_expr = expr.get_left_expr ();\n   l_expr->accept_vis (*this);\n-  auto l_fragment = expander.take_expanded_fragment (*this);\n-  if (l_fragment.should_expand ())\n-    l_expr = l_fragment.take_expression_fragment ();\n+  maybe_expand_expr (l_expr);\n \n   /* should syntactically not have outer attributes, though this may\n    * not have worked in practice */\n   auto &r_expr = expr.get_right_expr ();\n   r_expr->accept_vis (*this);\n-  auto r_fragment = expander.take_expanded_fragment (*this);\n-  if (r_fragment.should_expand ())\n-    r_expr = r_fragment.take_expression_fragment ();\n+  maybe_expand_expr (r_expr);\n \n   // ensure that they are not marked for strip\n   if (expr.get_left_expr ()->is_marked_for_strip ())\n@@ -678,17 +652,13 @@ AttrVisitor::visit (AST::LazyBooleanExpr &expr)\n    * with outer expr */\n   auto &l_expr = expr.get_left_expr ();\n   l_expr->accept_vis (*this);\n-  auto l_fragment = expander.take_expanded_fragment (*this);\n-  if (l_fragment.should_expand ())\n-    l_expr = l_fragment.take_expression_fragment ();\n+  maybe_expand_expr (l_expr);\n \n   /* should syntactically not have outer attributes, though this may\n    * not have worked in practice */\n   auto &r_expr = expr.get_right_expr ();\n   r_expr->accept_vis (*this);\n-  auto r_fragment = expander.take_expanded_fragment (*this);\n-  if (r_fragment.should_expand ())\n-    r_expr = r_fragment.take_expression_fragment ();\n+  maybe_expand_expr (r_expr);\n \n   // ensure that they are not marked for strip\n   if (expr.get_left_expr ()->is_marked_for_strip ())\n@@ -738,17 +708,13 @@ AttrVisitor::visit (AST::AssignmentExpr &expr)\n    * with outer expr */\n   auto &l_expr = expr.get_left_expr ();\n   l_expr->accept_vis (*this);\n-  auto l_fragment = expander.take_expanded_fragment (*this);\n-  if (l_fragment.should_expand ())\n-    l_expr = l_fragment.take_expression_fragment ();\n+  maybe_expand_expr (l_expr);\n \n   /* should syntactically not have outer attributes, though this may\n    * not have worked in practice */\n   auto &r_expr = expr.get_right_expr ();\n   r_expr->accept_vis (*this);\n-  auto r_fragment = expander.take_expanded_fragment (*this);\n-  if (r_fragment.should_expand ())\n-    r_expr = r_fragment.take_expression_fragment ();\n+  maybe_expand_expr (r_expr);\n \n   // ensure that they are not marked for strip\n   if (expr.get_left_expr ()->is_marked_for_strip ())\n@@ -771,17 +737,13 @@ AttrVisitor::visit (AST::CompoundAssignmentExpr &expr)\n    * with outer expr */\n   auto &l_expr = expr.get_left_expr ();\n   l_expr->accept_vis (*this);\n-  auto l_frag = expander.take_expanded_fragment (*this);\n-  if (l_frag.should_expand ())\n-    l_expr = l_frag.take_expression_fragment ();\n+  maybe_expand_expr (l_expr);\n \n   /* should syntactically not have outer attributes, though this may\n    * not have worked in practice */\n   auto &r_expr = expr.get_right_expr ();\n   r_expr->accept_vis (*this);\n-  auto r_frag = expander.take_expanded_fragment (*this);\n-  if (r_frag.should_expand ())\n-    r_expr = r_frag.take_expression_fragment ();\n+  maybe_expand_expr (r_expr);\n \n   // ensure that they are not marked for strip\n   if (expr.get_left_expr ()->is_marked_for_strip ())\n@@ -1259,9 +1221,7 @@ AttrVisitor::visit (AST::BlockExpr &expr)\n       auto &tail_expr = expr.get_tail_expr ();\n \n       tail_expr->accept_vis (*this);\n-      auto fragment = expander.take_expanded_fragment (*this);\n-      if (fragment.should_expand ())\n-\ttail_expr = fragment.take_expression_fragment ();\n+      maybe_expand_expr (tail_expr);\n \n       if (tail_expr->is_marked_for_strip ())\n \texpr.strip_tail_expr ();\n@@ -1290,9 +1250,7 @@ AttrVisitor::visit (AST::ClosureExprInnerTyped &expr)\n   auto &type = expr.get_return_type ();\n   type->accept_vis (*this);\n \n-  auto t_fragment = expander.take_expanded_fragment (*this);\n-  if (t_fragment.should_expand ())\n-    type = t_fragment.take_type_fragment ();\n+  maybe_expand_type (type);\n \n   if (type->is_marked_for_strip ())\n     rust_error_at (type->get_locus (), \"cannot strip type in this position\");\n@@ -1630,9 +1588,7 @@ AttrVisitor::visit (AST::IfExpr &expr)\n   // can't strip condition expr itself, but can strip sub-expressions\n   auto &condition_expr = expr.get_condition_expr ();\n   condition_expr->accept_vis (*this);\n-  auto cond_fragment = expander.take_expanded_fragment (*this);\n-  if (cond_fragment.should_expand ())\n-    condition_expr = cond_fragment.take_expression_fragment ();\n+  maybe_expand_expr (condition_expr);\n   if (condition_expr->is_marked_for_strip ())\n     rust_error_at (condition_expr->get_locus (),\n \t\t   \"cannot strip expression in this position - outer \"\n@@ -1660,9 +1616,7 @@ AttrVisitor::visit (AST::IfExprConseqElse &expr)\n   // can't strip condition expr itself, but can strip sub-expressions\n   auto &condition_expr = expr.get_condition_expr ();\n   condition_expr->accept_vis (*this);\n-  auto cond_fragment = expander.take_expanded_fragment (*this);\n-  if (cond_fragment.should_expand ())\n-    condition_expr = cond_fragment.take_expression_fragment ();\n+  maybe_expand_expr (condition_expr);\n   if (condition_expr->is_marked_for_strip ())\n     rust_error_at (condition_expr->get_locus (),\n \t\t   \"cannot strip expression in this position - outer \"\n@@ -1698,9 +1652,7 @@ AttrVisitor::visit (AST::IfExprConseqIf &expr)\n   // can't strip condition expr itself, but can strip sub-expressions\n   auto &condition_expr = expr.get_condition_expr ();\n   condition_expr->accept_vis (*this);\n-  auto cond_fragment = expander.take_expanded_fragment (*this);\n-  if (cond_fragment.should_expand ())\n-    condition_expr = cond_fragment.take_expression_fragment ();\n+  maybe_expand_expr (condition_expr);\n   if (condition_expr->is_marked_for_strip ())\n     rust_error_at (condition_expr->get_locus (),\n \t\t   \"cannot strip expression in this position - outer \"\n@@ -1736,9 +1688,7 @@ AttrVisitor::visit (AST::IfExprConseqIfLet &expr)\n   // can't strip condition expr itself, but can strip sub-expressions\n   auto &condition_expr = expr.get_condition_expr ();\n   condition_expr->accept_vis (*this);\n-  auto cond_fragment = expander.take_expanded_fragment (*this);\n-  if (cond_fragment.should_expand ())\n-    condition_expr = cond_fragment.take_expression_fragment ();\n+  maybe_expand_expr (condition_expr);\n   if (condition_expr->is_marked_for_strip ())\n     rust_error_at (condition_expr->get_locus (),\n \t\t   \"cannot strip expression in this position - outer \"\n@@ -2061,9 +2011,7 @@ AttrVisitor::visit (AST::TypeParam &param)\n       auto &type = param.get_type ();\n       type->accept_vis (*this);\n \n-      auto t_fragment = expander.take_expanded_fragment (*this);\n-      if (t_fragment.should_expand ())\n-\ttype = t_fragment.take_type_fragment ();\n+      maybe_expand_type (type);\n \n       if (type->is_marked_for_strip ())\n \trust_error_at (type->get_locus (),\n@@ -2087,9 +2035,7 @@ AttrVisitor::visit (AST::TypeBoundWhereClauseItem &item)\n   auto &type = item.get_type ();\n   type->accept_vis (*this);\n \n-  auto t_fragment = expander.take_expanded_fragment (*this);\n-  if (t_fragment.should_expand ())\n-    type = t_fragment.take_type_fragment ();\n+  maybe_expand_type (type);\n \n   if (type->is_marked_for_strip ())\n     rust_error_at (type->get_locus (), \"cannot strip type in this position\");\n@@ -2131,9 +2077,7 @@ AttrVisitor::visit (AST::Method &method)\n       auto &return_type = method.get_return_type ();\n       return_type->accept_vis (*this);\n \n-      auto r_fragment = expander.take_expanded_fragment (*this);\n-      if (r_fragment.should_expand ())\n-\treturn_type = r_fragment.take_type_fragment ();\n+      maybe_expand_type (return_type);\n \n       if (return_type->is_marked_for_strip ())\n \trust_error_at (return_type->get_locus (),\n@@ -2253,9 +2197,7 @@ AttrVisitor::visit (AST::Function &function)\n       auto &return_type = function.get_return_type ();\n       return_type->accept_vis (*this);\n \n-      auto t_fragment = expander.take_expanded_fragment (*this);\n-      if (t_fragment.should_expand ())\n-\treturn_type = t_fragment.take_type_fragment ();\n+      maybe_expand_type (return_type);\n \n       if (return_type->is_marked_for_strip ())\n \trust_error_at (return_type->get_locus (),\n@@ -2467,9 +2409,7 @@ AttrVisitor::visit (AST::ConstantItem &const_item)\n   auto &type = const_item.get_type ();\n   type->accept_vis (*this);\n \n-  auto t_fragment = expander.take_expanded_fragment (*this);\n-  if (t_fragment.should_expand ())\n-    type = t_fragment.take_type_fragment ();\n+  maybe_expand_type (type);\n \n   if (type->is_marked_for_strip ())\n     rust_error_at (type->get_locus (), \"cannot strip type in this position\");\n@@ -2503,9 +2443,7 @@ AttrVisitor::visit (AST::StaticItem &static_item)\n   auto &type = static_item.get_type ();\n   type->accept_vis (*this);\n \n-  auto t_fragment = expander.take_expanded_fragment (*this);\n-  if (t_fragment.should_expand ())\n-    type = t_fragment.take_type_fragment ();\n+  maybe_expand_type (type);\n \n   if (type->is_marked_for_strip ())\n     rust_error_at (type->get_locus (), \"cannot strip type in this position\");\n@@ -2591,9 +2529,7 @@ AttrVisitor::visit (AST::TraitItemConst &item)\n   auto &type = item.get_type ();\n   type->accept_vis (*this);\n \n-  auto t_fragment = expander.take_expanded_fragment (*this);\n-  if (t_fragment.should_expand ())\n-    type = t_fragment.take_type_fragment ();\n+  maybe_expand_type (type);\n \n   if (type->is_marked_for_strip ())\n     rust_error_at (type->get_locus (), \"cannot strip type in this position\");\n@@ -2698,9 +2634,7 @@ AttrVisitor::visit (AST::InherentImpl &impl)\n   auto &type = impl.get_type ();\n   type->accept_vis (*this);\n \n-  auto t_fragment = expander.take_expanded_fragment (*this);\n-  if (t_fragment.should_expand ())\n-    type = t_fragment.take_type_fragment ();\n+  maybe_expand_type (type);\n \n   if (type->is_marked_for_strip ())\n     rust_error_at (type->get_locus (), \"cannot strip type in this position\");\n@@ -2744,9 +2678,7 @@ AttrVisitor::visit (AST::TraitImpl &impl)\n   auto &type = impl.get_type ();\n   type->accept_vis (*this);\n \n-  auto t_fragment = expander.take_expanded_fragment (*this);\n-  if (t_fragment.should_expand ())\n-    type = t_fragment.take_type_fragment ();\n+  maybe_expand_type (type);\n \n   if (type->is_marked_for_strip ())\n     rust_error_at (type->get_locus (), \"cannot strip type in this position\");\n@@ -2785,9 +2717,7 @@ AttrVisitor::visit (AST::ExternalStaticItem &item)\n   auto &type = item.get_type ();\n   type->accept_vis (*this);\n \n-  auto t_fragment = expander.take_expanded_fragment (*this);\n-  if (t_fragment.should_expand ())\n-    type = t_fragment.take_type_fragment ();\n+  maybe_expand_type (type);\n \n   if (type->is_marked_for_strip ())\n     rust_error_at (type->get_locus (), \"cannot strip type in this position\");\n@@ -2829,9 +2759,7 @@ AttrVisitor::visit (AST::ExternalFunctionItem &item)\n       auto &type = param.get_type ();\n       type->accept_vis (*this);\n \n-      auto t_fragment = expander.take_expanded_fragment (*this);\n-      if (t_fragment.should_expand ())\n-\ttype = t_fragment.take_type_fragment ();\n+      maybe_expand_type (type);\n \n       if (type->is_marked_for_strip ())\n \trust_error_at (type->get_locus (),\n@@ -2856,9 +2784,7 @@ AttrVisitor::visit (AST::ExternalFunctionItem &item)\n       auto &return_type = item.get_return_type ();\n       return_type->accept_vis (*this);\n \n-      auto r_fragment = expander.take_expanded_fragment (*this);\n-      if (r_fragment.should_expand ())\n-\treturn_type = r_fragment.take_type_fragment ();\n+      maybe_expand_type (return_type);\n \n       if (return_type->is_marked_for_strip ())\n \trust_error_at (return_type->get_locus (),\n@@ -3233,9 +3159,7 @@ AttrVisitor::visit (AST::LetStmt &stmt)\n       auto &type = stmt.get_type ();\n       type->accept_vis (*this);\n \n-      auto t_fragment = expander.take_expanded_fragment (*this);\n-      if (t_fragment.should_expand ())\n-\ttype = t_fragment.take_type_fragment ();\n+      maybe_expand_type (type);\n \n       if (type->is_marked_for_strip ())\n \trust_error_at (type->get_locus (),\n@@ -3257,9 +3181,7 @@ AttrVisitor::visit (AST::LetStmt &stmt)\n \t\t       \"cannot strip expression in this position - outer \"\n \t\t       \"attributes not allowed\");\n \n-      auto fragment = expander.take_expanded_fragment (*this);\n-      if (fragment.should_expand ())\n-\tinit_expr = fragment.take_expression_fragment ();\n+      maybe_expand_expr (init_expr);\n     }\n }\n void\n@@ -3441,9 +3363,7 @@ AttrVisitor::visit (AST::BareFunctionType &type)\n       auto &type = param.get_type ();\n       type->accept_vis (*this);\n \n-      auto t_fragment = expander.take_expanded_fragment (*this);\n-      if (t_fragment.should_expand ())\n-\ttype = t_fragment.take_type_fragment ();\n+      maybe_expand_type (type);\n \n       if (type->is_marked_for_strip ())\n \trust_error_at (type->get_locus (),\n@@ -3472,4 +3392,18 @@ AttrVisitor::visit (AST::BareFunctionType &type)\n \n   // no where clause, apparently\n }\n+void\n+AttrVisitor::maybe_expand_expr (std::unique_ptr<AST::Expr> &expr)\n+{\n+  auto fragment = expander.take_expanded_fragment (*this);\n+  if (fragment.should_expand ())\n+    expr = fragment.take_expression_fragment ();\n+}\n+void\n+AttrVisitor::maybe_expand_type (std::unique_ptr<AST::Type> &type)\n+{\n+  auto fragment = expander.take_expanded_fragment (*this);\n+  if (fragment.should_expand ())\n+    type = fragment.take_type_fragment ();\n+}\n } // namespace Rust"}, {"sha": "4b42d78cf89bfc7360c08479802bed8d93977797", "filename": "gcc/rust/expand/rust-attribute-visitor.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fe52462aa360852a33af4a40f0bd52e1709cca2/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fe52462aa360852a33af4a40f0bd52e1709cca2/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.h?ref=5fe52462aa360852a33af4a40f0bd52e1709cca2", "patch": "@@ -25,6 +25,8 @@ class AttrVisitor : public AST::ASTVisitor\n {\n private:\n   MacroExpander &expander;\n+  void maybe_expand_expr (std::unique_ptr<AST::Expr> &expr);\n+  void maybe_expand_type (std::unique_ptr<AST::Type> &expr);\n \n public:\n   AttrVisitor (MacroExpander &expander) : expander (expander) {}"}]}