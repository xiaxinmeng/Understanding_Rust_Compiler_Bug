{"sha": "2a43945fa59a5d450f24b2c47c35c8fef8f959a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE0Mzk0NWZhNTlhNWQ0NTBmMjRiMmM0N2MzNWM4ZmVmOGY5NTlhOA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-07-06T23:05:13Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-07-06T23:05:13Z"}, "message": "h8300.c: Fix comment typos.\n\n\t* config/h8300/h8300.c: Fix comment typos.\n\t* config/h8300/h8300.md: Likewise.\n\t* config/i386/athlon.md: Likewise.\n\t* config/i386/i386.c: Likewise.\n\t* config/i386/pentium.md: Likewise.\n\t* config/ia64/ia64.c: Likewise.\n\t* config/ia64/itanium1.md: Likewise.\n\t* config/ia64/itanium2.md: Likewise.\n\t* config/m32r/m32r.md: Likewise.\n\t* config/m68hc11/m68hc11.c: Likewise.\n\t* config/mcore/mcore.c: Likewise.\n\t* config/mips/sr71k.md: Likewise.\n\t* config/mips/t-iris5-as: Likewise.\n\t* config/mmix/mmix.h: Likewise.\n\t* config/ns32k/ns32k.h: Likewise.\n\t* config/ns32k/NOTES: Fix a typo.\n\nFrom-SVN: r69021", "tree": {"sha": "d9b885f5b134494348b00445a56947b4f9f310d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9b885f5b134494348b00445a56947b4f9f310d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a43945fa59a5d450f24b2c47c35c8fef8f959a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a43945fa59a5d450f24b2c47c35c8fef8f959a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a43945fa59a5d450f24b2c47c35c8fef8f959a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/comments", "author": null, "committer": null, "parents": [{"sha": "127b81366e7ee0700cec2733126fc35e85a59122", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/127b81366e7ee0700cec2733126fc35e85a59122", "html_url": "https://github.com/Rust-GCC/gccrs/commit/127b81366e7ee0700cec2733126fc35e85a59122"}], "stats": {"total": 69, "additions": 44, "deletions": 25}, "files": [{"sha": "805f19f2752a410776b08f798afa9ff52bb81e2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a43945fa59a5d450f24b2c47c35c8fef8f959a8", "patch": "@@ -1,3 +1,22 @@\n+2003-07-06  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300.c: Fix comment typos.\n+\t* config/h8300/h8300.md: Likewise.\n+\t* config/i386/athlon.md: Likewise.\n+\t* config/i386/i386.c: Likewise.\n+\t* config/i386/pentium.md: Likewise.\n+\t* config/ia64/ia64.c: Likewise.\n+\t* config/ia64/itanium1.md: Likewise.\n+\t* config/ia64/itanium2.md: Likewise.\n+\t* config/m32r/m32r.md: Likewise.\n+\t* config/m68hc11/m68hc11.c: Likewise.\n+\t* config/mcore/mcore.c: Likewise.\n+\t* config/mips/sr71k.md: Likewise.\n+\t* config/mips/t-iris5-as: Likewise.\n+\t* config/mmix/mmix.h: Likewise.\n+\t* config/ns32k/ns32k.h: Likewise.\n+\t* config/ns32k/NOTES: Fix a typo.\n+\n 2003-07-06  Andreas Jaeger  <aj@suse.de>\n \n \t* stmt.c: Convert remaining prototypes to ISO C90."}, {"sha": "5ab2bfac04d85c185f4a574abac1135ad20b42ca", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=2a43945fa59a5d450f24b2c47c35c8fef8f959a8", "patch": "@@ -1920,7 +1920,7 @@ compute_mov_length (rtx *operands)\n \t    return base_length - 2;\n \t  else\n \t    /* In SImode and SFmode, we use two mov.w instructions, so\n-\t       double the adustment.  */\n+\t       double the adjustment.  */\n \t    return base_length - 4;\n \t}\n "}, {"sha": "209e919b8b96065e784deca401e0d202c2791e00", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=2a43945fa59a5d450f24b2c47c35c8fef8f959a8", "patch": "@@ -4189,7 +4189,7 @@\n \t\t      (pc)))]\n   \"operands[4] = GEN_INT (- INTVAL (operands[1]));\")\n \n-;; For certain (in)equaltity comparisons against a constant, we can\n+;; For certain (in)equality comparisons against a constant, we can\n ;; XOR the register with the constant, and test the register against\n ;; 0.\n "}, {"sha": "b90ae22c06d7e27c3a91a54020974035f0253295", "filename": "gcc/config/i386/athlon.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fi386%2Fathlon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fi386%2Fathlon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fathlon.md?ref=2a43945fa59a5d450f24b2c47c35c8fef8f959a8", "patch": "@@ -667,7 +667,7 @@\n \t\t\t      (eq_attr \"type\" \"sseadd\"))\n \t\t\t \"athlon-double,athlon-fpsched,(athlon-fadd*2)\")\n \n-;; Conversions behaves very irregulary and the scheduling is critical here.\n+;; Conversions behaves very irregularly and the scheduling is critical here.\n ;; Take each instruction separately.  Assume that the mode is always set to the\n ;; destination one and athlon_decode is set to the K8 versions.\n "}, {"sha": "dc8cebd782ec7b256399aedb486e00b68f3bfee3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2a43945fa59a5d450f24b2c47c35c8fef8f959a8", "patch": "@@ -2608,7 +2608,7 @@ contains_128bit_aligned_vector_p (type)\n \n   if (AGGREGATE_TYPE_P (type))\n     {\n-      /* Walk the agregates recursively.  */\n+      /* Walk the aggregates recursively.  */\n       if (TREE_CODE (type) == RECORD_TYPE\n \t  || TREE_CODE (type) == UNION_TYPE\n \t  || TREE_CODE (type) == QUAL_UNION_TYPE)"}, {"sha": "4f5ee04fd018bc6996f2ac1ed1c1477a5d7b8970", "filename": "gcc/config/i386/pentium.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fi386%2Fpentium.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fi386%2Fpentium.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpentium.md?ref=2a43945fa59a5d450f24b2c47c35c8fef8f959a8", "patch": "@@ -210,7 +210,7 @@\n   \"pentium-firstv\")\n \n ;; Floating point instruction dispatch in U pipe, but continue\n-;; in FP pipeline allowing other isntructions to be executed.\n+;; in FP pipeline allowing other instructions to be executed.\n (define_insn_reservation \"pent_fp\" 3\n   (and (eq_attr \"cpu\" \"pentium\")\n        (eq_attr \"type\" \"fop,fistp\"))"}, {"sha": "444e882457d125fb7935a1fd7c56ac39cdd4bbb6", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=2a43945fa59a5d450f24b2c47c35c8fef8f959a8", "patch": "@@ -1559,7 +1559,7 @@ ia64_split_call (retval, addr, retaddr, scratch_r, scratch_b,\n       bool addr_dead_p;\n \n       /* ??? We are currently constrained to *not* use peep2, because\n-\t we can legitimiately change the global lifetime of the GP\n+\t we can legitimately change the global lifetime of the GP\n \t (in the form of killing where previously live).  This is \n \t because a call through a descriptor doesn't use the previous\n \t value of the GP, while a direct call does, and we do not"}, {"sha": "2b844115160b1a0450667abbc6171e6072880d09", "filename": "gcc/config/ia64/itanium1.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fia64%2Fitanium1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fia64%2Fitanium1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fitanium1.md?ref=2a43945fa59a5d450f24b2c47c35c8fef8f959a8", "patch": "@@ -178,7 +178,7 @@\n           first regular expression *and* the reservation described by\n           the second regular expression *and* etc.\n \n-       4. \"*\" is used for convinience and simply means sequence in\n+       4. \"*\" is used for convenience and simply means sequence in\n           which the regular expression are repeated NUMBER times with\n           cycle advancing (see \",\").\n \n@@ -461,7 +461,7 @@\n (define_reservation \"1_F\" \"1_F0|1_F1|1_F2\")\n \n ;;; \"Each B slot in MBB or BBB bundle disperses to the corresponding B\n-;;; unit. That is, a B slot in 1st position is despersed to B0.  In the\n+;;; unit. That is, a B slot in 1st position is dispersed to B0.  In the\n ;;; 2nd position it is dispersed to B2\".\n (define_reservation \"1_NB\"\n     \"1_0b.bb+1_unb0|1_0bb.b+1_unb1|1_0bbb.+1_unb2\\\n@@ -908,7 +908,7 @@\n \n ;; Bypasses:\n (define_bypass  1 \"1_fcmp\" \"1_br,1_scall\")\n-;; ??? I found 7 cycle dealy for 1_fmac -> 1_fcmp for Itanium1\n+;; ??? I found 7 cycle delay for 1_fmac -> 1_fcmp for Itanium1\n (define_bypass  7 \"1_fmac\" \"1_fmisc,1_fcvtfx,1_xmpy,1_fcmp\")\n \n ;; ???\n@@ -1235,7 +1235,7 @@\n     |1b_1mf.i+1_5+1b_uf1|1b_1mf.b+1_5+1b_uf1\")\n \n ;;; \"Each B slot in MBB or BBB bundle disperses to the corresponding B\n-;;; unit. That is, a B slot in 1st position is despersed to B0.  In the\n+;;; unit. That is, a B slot in 1st position is dispersed to B0.  In the\n ;;; 2nd position it is dispersed to B2\".\n (define_reservation \"1b_NB\"\n     \"1b_0b.bb+1_1+1b_unb0|1b_0bb.b+1_2+1b_unb1|1b_0bbb.+1_3+1b_unb2\\"}, {"sha": "0cdb07013467993db05ac5d7f6fbdaa147076a1a", "filename": "gcc/config/ia64/itanium2.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fia64%2Fitanium2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fia64%2Fitanium2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fitanium2.md?ref=2a43945fa59a5d450f24b2c47c35c8fef8f959a8", "patch": "@@ -176,7 +176,7 @@\n           first regular expression *and* the reservation described by\n           the second regular expression *and* etc.\n \n-       4. \"*\" is used for convinience and simply means sequence in\n+       4. \"*\" is used for convenience and simply means sequence in\n           which the regular expression are repeated NUMBER times with\n           cycle advancing (see \",\").\n \n@@ -524,7 +524,7 @@\n (define_reservation \"2_F\" \"2_F0|2_F1|2_F2\")\n \n ;;; \"Each B slot in MBB or BBB bundle disperses to the corresponding B\n-;;; unit. That is, a B slot in 1st position is despersed to B0.  In the\n+;;; unit. That is, a B slot in 1st position is dispersed to B0.  In the\n ;;; 2nd position it is dispersed to B2\".\n (define_reservation \"2_NB\"\n     \"2_0b.bb+2_unb0|2_0bb.b+2_unb1|2_0bbb.+2_unb2\\\n@@ -1349,7 +1349,7 @@\n     |2b_1mf.i+2_5+2b_uf1|2b_1mmf.+2_6+2b_uf1|2b_1mf.b+2_5+2b_uf1\")\n \n ;;; \"Each B slot in MBB or BBB bundle disperses to the corresponding B\n-;;; unit. That is, a B slot in 1st position is despersed to B0.  In the\n+;;; unit. That is, a B slot in 1st position is dispersed to B0.  In the\n ;;; 2nd position it is dispersed to B2\".\n (define_reservation \"2b_NB\"\n     \"2b_0b.bb+2_1+2b_unb0|2b_0bb.b+2_2+2b_unb1|2b_0bbb.+2_3+2b_unb2\\"}, {"sha": "b5ca402e1637eb10f72f103d5f89c6ce47da8bcd", "filename": "gcc/config/m32r/m32r.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fm32r%2Fm32r.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fm32r%2Fm32r.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.md?ref=2a43945fa59a5d450f24b2c47c35c8fef8f959a8", "patch": "@@ -204,7 +204,7 @@\n ;; Function units of the M32R\n ;; Units that take one cycle do not need to be specified.\n \n-;; (define_function_unit {name} {multiplicity} {simulataneity} {test}\n+;; (define_function_unit {name} {multiplicity} {simultaneity} {test}\n ;;                       {ready-delay} {issue-delay} [{conflict-list}])\n \n ;; Hack to get GCC to better pack the instructions.\n@@ -2537,7 +2537,7 @@\n ;;         st r4,@(4,sp) \n ;;         bl sub\n ;; \n-;; Simialr code is produced for the subtract expression.  With this\n+;; Similar code is produced for the subtract expression.  With this\n ;; peephole the redundant move is eliminated.\n ;;\n ;; This optimization only works if PRESERVE_DEATH_INFO_REGNO_P is"}, {"sha": "38690ee7319335e63b3a2a2117ef3cda5656ffd4", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=2a43945fa59a5d450f24b2c47c35c8fef8f959a8", "patch": "@@ -5185,7 +5185,7 @@ m68hc11_reorg ()\n   if (optimize)\n     compute_bb_for_insn ();\n \n-  /* After some splitting, there are some oportunities for CSE pass.\n+  /* After some splitting, there are some opportunities for CSE pass.\n      This happens quite often when 32-bit or above patterns are split.  */\n   if (optimize > 0 && split_done)\n     {"}, {"sha": "59c04d6c839cb2dfebe1ce15945e370bcff16bbf", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=2a43945fa59a5d450f24b2c47c35c8fef8f959a8", "patch": "@@ -2651,7 +2651,7 @@ typedef struct\n \n /* The maximum number of constants that can fit into one pool, since\n    the pc relative range is 0...1020 bytes and constants are at least 4\n-   bytes long.  We subtact 4 from the range to allow for the case where\n+   bytes long.  We subtract 4 from the range to allow for the case where\n    we need to add a branch/align before the constant pool.  */\n \n #define MAX_COUNT 1016"}, {"sha": "d6c7cafa083dabd2a33849f5c82230d7ddf08112", "filename": "gcc/config/mips/sr71k.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fmips%2Fsr71k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fmips%2Fsr71k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsr71k.md?ref=2a43945fa59a5d450f24b2c47c35c8fef8f959a8", "patch": "@@ -2,7 +2,7 @@\n ;;\n ;; DFA-based pipeline description for Sandcraft SR3 (MIPS64 based)\n ;;\n-;; The SR3 is describeds as:\n+;; The SR3 is described as:\n ;;     - nine-stage pipeline, insn buffering with out-of-order issue to\n ;;       multiple function units, with an average dispatch rate of 2\n ;;       insn.s per cycle (max 6 insns: 2 fpu, 4 cpu).\n@@ -22,8 +22,8 @@\n ;;\n ;;\n ;; Reservation model is based on:\n-;;   1) Figure 6-1, from the 1.0 specicification.\n-;;   2) Chapter 19, from the 1.0 specificication.\n+;;   1) Figure 6-1, from the 1.0 specification.\n+;;   2) Chapter 19, from the 1.0 specification.\n ;;   3) following questions(Red Hat)/answers(Sandcraft):\n ;;     RH> From Section 19.1\n ;;     RH>      1) In terms of figure 6-1, are all the instructions in"}, {"sha": "a1e48956a56f4a6fa9e691fb5d365bb9c65327ee", "filename": "gcc/config/mips/t-iris5-as", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fmips%2Ft-iris5-as", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fmips%2Ft-iris5-as", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-iris5-as?ref=2a43945fa59a5d450f24b2c47c35c8fef8f959a8", "patch": "@@ -1,5 +1,5 @@\n # omit -g, gcc doesn't support the o32 mdebug debugging format and warns about\n-# every invokation with -g*\n+# every invocation with -g*\n # add -save-temps to avoid comparison failure due to embedded temp file names\n BOOT_CFLAGS = -O2 -save-temps\n "}, {"sha": "62a258eccf7e7d3709ae75b974d628e5b0d9e376", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=2a43945fa59a5d450f24b2c47c35c8fef8f959a8", "patch": "@@ -169,7 +169,7 @@ extern int target_flags;\n    address goes in a global register.  When addressing, it's more like\n    \"base address plus offset\", with the offset being 0..255 from the base,\n    which itself can be a symbol plus an offset.  The effect is like having\n-   a constant pool in global registers, code offseting from those\n+   a constant pool in global registers, code offsetting from those\n    registers (automatically causing a request for a suitable constant base\n    address register) without having to know the specific register or the\n    specific offset.  The setback is that there's a limited number of"}, {"sha": "32e9704d95f7d7048febad52223ebd36f1e6a742", "filename": "gcc/config/ns32k/NOTES", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fns32k%2FNOTES", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fns32k%2FNOTES", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2FNOTES?ref=2a43945fa59a5d450f24b2c47c35c8fef8f959a8", "patch": "@@ -53,7 +53,7 @@ For example, the emitted code for the case of LT is\n which is, in effect, \"branch if ordered and less than.\"\n \n We also need insns for the reverse branches. These have the PC and\n-the label ref opereands reversed. Thus the reverse bgt has a pattern:\n+the label ref operands reversed. Thus the reverse bgt has a pattern:\n \n  (set (pc)\n \t(if_then_else (gt (cc0)"}, {"sha": "dfe131b1e61c3a1177e0b0ac14cdd97b60d40dae", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a43945fa59a5d450f24b2c47c35c8fef8f959a8/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=2a43945fa59a5d450f24b2c47c35c8fef8f959a8", "patch": "@@ -472,7 +472,7 @@ enum reg_class\n \n \n /* LONG_REGS are registers which can only hold double precision floats\n- * and can only be accessable by long float instructions.\n+ * and can only be accessible by long float instructions.\n  */\n #define CANNOT_CHANGE_MODE_CLASS(FROM, TO, CLASS)\t\\\n   (GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO)\t\t\\\n@@ -885,7 +885,7 @@ __transfer_from_trampoline ()\t\t\\\n #endif\n \n /* SMALL_REGISTER_CLASSES is a run time option. This should no longer\n-   be necessay and should go when we have confidence that we won't run\n+   be necessary and should go when we have confidence that we won't run\n    out of spill registers */\n #define SMALL_REGISTER_CLASSES (target_flags & MASK_SRC)\n "}]}