{"sha": "e3e6cff41e9d63815a0396e02ee17d0a1261fccd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNlNmNmZjQxZTlkNjM4MTVhMDM5NmUwMmVlMTdkMGExMjYxZmNjZA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-01-26T09:55:30Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-01-26T09:55:30Z"}, "message": "re PR tree-optimization/38745 (ICE: statement makes a memory store, but has no VDEFS)\n\n2009-01-26  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/38745\n\t* tree-ssa.c (execute_update_addresses_taken): Do not include\n\tvariables that cannot possibly be a register in not_reg_needs.\n\tDo not clear TREE_ADDRESSABLE on vars that may not become\n\tregisters.\n\t* tree-ssa.c (update_alias_info_1): Include those in the set\n\tof addressable vars.\n\n\t* g++.dg/torture/pr38745.C: New testcase.\n\nFrom-SVN: r143673", "tree": {"sha": "5b8e8a5315c9686f63ea2da022b4eaeb2c40ea42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b8e8a5315c9686f63ea2da022b4eaeb2c40ea42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3e6cff41e9d63815a0396e02ee17d0a1261fccd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3e6cff41e9d63815a0396e02ee17d0a1261fccd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3e6cff41e9d63815a0396e02ee17d0a1261fccd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3e6cff41e9d63815a0396e02ee17d0a1261fccd/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dc874b53e5529e2a76d610500345e1f469366346", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc874b53e5529e2a76d610500345e1f469366346", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc874b53e5529e2a76d610500345e1f469366346"}], "stats": {"total": 74, "additions": 73, "deletions": 1}, "files": [{"sha": "505c99a394bf19e5aa9fbb29b863f9959903fd6c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3e6cff41e9d63815a0396e02ee17d0a1261fccd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3e6cff41e9d63815a0396e02ee17d0a1261fccd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3e6cff41e9d63815a0396e02ee17d0a1261fccd", "patch": "@@ -1,3 +1,13 @@\n+2009-01-26  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/38745\n+\t* tree-ssa.c (execute_update_addresses_taken): Do not include\n+\tvariables that cannot possibly be a register in not_reg_needs.\n+\tDo not clear TREE_ADDRESSABLE on vars that may not become\n+\tregisters.\n+\t* tree-ssa.c (update_alias_info_1): Include those in the set\n+\tof addressable vars.\n+\n 2009-01-26  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/38851"}, {"sha": "5743ae0d7c823c911c66b81dd003b5042d52406b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3e6cff41e9d63815a0396e02ee17d0a1261fccd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3e6cff41e9d63815a0396e02ee17d0a1261fccd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e3e6cff41e9d63815a0396e02ee17d0a1261fccd", "patch": "@@ -1,3 +1,8 @@\n+2009-01-26  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/38745\n+\t* g++.dg/torture/pr38745.C: New testcase.\n+\n 2009-01-26  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/38851"}, {"sha": "4ad9d85fe3696e772d220827f215ca40f848fe46", "filename": "gcc/testsuite/g++.dg/torture/pr38745.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3e6cff41e9d63815a0396e02ee17d0a1261fccd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr38745.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3e6cff41e9d63815a0396e02ee17d0a1261fccd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr38745.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr38745.C?ref=e3e6cff41e9d63815a0396e02ee17d0a1261fccd", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+\n+union u_u16\n+{\n+  unsigned short v;\n+  struct\n+    {\n+      unsigned char lo8, hi8;\n+    } __attribute__ ((__may_alias__)) u;\n+} __attribute__ ((__may_alias__));\n+union u_u32\n+{\n+  unsigned int v;\n+  struct\n+    {\n+      u_u16 lo16, hi16;\n+    } u;\n+} __attribute__ ((__may_alias__));\n+union u_u64\n+{\n+  struct\n+    {\n+      u_u32 lo32, hi32;\n+    } u;\n+};\n+struct Record\n+{\n+};\n+long long\n+UnpackFullKey (Record & rec, const char *&p)\n+{\n+  long long c64 = 0;\n+  (*(u_u16 *) & (*(u_u32 *) & ( *(u_u64*)&c64).u.lo32.v).u.lo16.v).u.hi8 = 1;\n+  return c64;\n+}\n+"}, {"sha": "9ed242d03a8d793a2f016e4fbc1ac4410b4ba08f", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3e6cff41e9d63815a0396e02ee17d0a1261fccd/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3e6cff41e9d63815a0396e02ee17d0a1261fccd/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=e3e6cff41e9d63815a0396e02ee17d0a1261fccd", "patch": "@@ -2483,6 +2483,22 @@ update_alias_info_1 (gimple stmt, struct alias_info *ai)\n   if (addr_taken)\n     bitmap_ior_into (gimple_addressable_vars (cfun), addr_taken);\n \n+  /* If we have a call or an assignment, see if the lhs contains\n+     a local decl that requires not to be a gimple register.  */\n+  if (gimple_code (stmt) == GIMPLE_ASSIGN\n+      || gimple_code (stmt) == GIMPLE_CALL)\n+    {\n+      tree lhs = gimple_get_lhs (stmt);\n+      /* A plain decl does not need it set.  */\n+      if (lhs && handled_component_p (lhs))\n+\t{\n+\t  tree var = get_base_address (lhs);\n+\t  if (DECL_P (var)\n+\t      && is_gimple_reg_type (TREE_TYPE (var)))\n+\t    bitmap_set_bit (gimple_addressable_vars (cfun), DECL_UID (var));\n+\t}\n+    }\n+\n   /* Process each operand use.  For pointers, determine whether they\n      are dereferenced by the statement, or whether their value\n      escapes, etc.  */"}, {"sha": "91cbc1950018995abcea1e12bf4152adb0118fe1", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3e6cff41e9d63815a0396e02ee17d0a1261fccd/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3e6cff41e9d63815a0396e02ee17d0a1261fccd/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=e3e6cff41e9d63815a0396e02ee17d0a1261fccd", "patch": "@@ -1731,7 +1731,12 @@ execute_update_addresses_taken (void)\n \t  || bitmap_bit_p (addresses_taken, DECL_UID (var)))\n \tcontinue;\n \t\n-      if (TREE_ADDRESSABLE (var))\n+      if (TREE_ADDRESSABLE (var)\n+\t  /* Do not change TREE_ADDRESSABLE if we need to preserve var as\n+\t     a non-register.  Otherwise we are confused and forget to\n+\t     add virtual operands for it.  */\n+\t  && (!is_gimple_reg_type (TREE_TYPE (var))\n+\t      || !bitmap_bit_p (not_reg_needs, DECL_UID (var))))\n \t{\n \t  TREE_ADDRESSABLE (var) = 0;\n \t  if (is_gimple_reg (var))"}]}