{"sha": "1b29f05e56e3b6711352d5cfd8b30785beb3b663", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIyOWYwNWU1NmUzYjY3MTEzNTJkNWNmZDhiMzA3ODViZWIzYjY2Mw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-03-28T08:40:49Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-03-28T08:40:49Z"}, "message": "tree-vectorizer.h (vect_create_data_ref_ptr): Adjust prototype.\n\n\t* tree-vectorizer.h (vect_create_data_ref_ptr): Adjust prototype.\n\t* tree-vect-data-refs.c (vect_create_data_ref_ptr): Add GSI parameter.\n\tInsert new statements at it in lieu of STMT.\n\t(vect_setup_realignment): Adjust call to vect_create_data_ref_ptr.\n\t* tree-vect-stmts.c (vectorizable_store): Likewise.\n\t(vectorizable_load): Likewise.\n\nFrom-SVN: r171592", "tree": {"sha": "37b1217368c03af34bab18d88543d292d72e0cfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37b1217368c03af34bab18d88543d292d72e0cfa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b29f05e56e3b6711352d5cfd8b30785beb3b663", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b29f05e56e3b6711352d5cfd8b30785beb3b663", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b29f05e56e3b6711352d5cfd8b30785beb3b663", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b29f05e56e3b6711352d5cfd8b30785beb3b663/comments", "author": null, "committer": null, "parents": [{"sha": "506e68087a1e12a38255fbf77b53a0808860c0a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/506e68087a1e12a38255fbf77b53a0808860c0a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/506e68087a1e12a38255fbf77b53a0808860c0a8"}], "stats": {"total": 56, "additions": 42, "deletions": 14}, "files": [{"sha": "0c2b9312a6381db919c2c955b5b62adf739ffd28", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b29f05e56e3b6711352d5cfd8b30785beb3b663/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b29f05e56e3b6711352d5cfd8b30785beb3b663/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b29f05e56e3b6711352d5cfd8b30785beb3b663", "patch": "@@ -1,3 +1,12 @@\n+2011-03-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-vectorizer.h (vect_create_data_ref_ptr): Adjust prototype.\n+\t* tree-vect-data-refs.c (vect_create_data_ref_ptr): Add GSI parameter.\n+\tInsert new statements at it in lieu of STMT.\n+\t(vect_setup_realignment): Adjust call to vect_create_data_ref_ptr.\n+\t* tree-vect-stmts.c (vectorizable_store): Likewise.\n+\t(vectorizable_load): Likewise.\n+\n 2011-03-28  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/alpha/alpha.md (addtf3): Change mode of operands to TFmode."}, {"sha": "a9f70d0795aea3794726fe5eec2f090e9e81da1c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b29f05e56e3b6711352d5cfd8b30785beb3b663/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b29f05e56e3b6711352d5cfd8b30785beb3b663/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1b29f05e56e3b6711352d5cfd8b30785beb3b663", "patch": "@@ -1,3 +1,7 @@\n+2011-03-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/slp-1.c: New test.\n+\n 2011-03-27  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/i386/avx256-unaligned-load-1.c: New."}, {"sha": "bb352020f9753d9f7cfa282edb112b07d081711c", "filename": "gcc/testsuite/gcc.dg/slp-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b29f05e56e3b6711352d5cfd8b30785beb3b663/gcc%2Ftestsuite%2Fgcc.dg%2Fslp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b29f05e56e3b6711352d5cfd8b30785beb3b663/gcc%2Ftestsuite%2Fgcc.dg%2Fslp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fslp-1.c?ref=1b29f05e56e3b6711352d5cfd8b30785beb3b663", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+struct R {\n+  double d1;\n+  double d2;\n+};\n+\n+struct R foo (struct R arg)\n+{\n+  struct R ret;\n+  ret.d1 = arg.d2 * (0.0 - arg.d1);\n+  ret.d2 = ret.d1;\n+  return ret;\n+}"}, {"sha": "8f411140880f83b00b085c77e6901f06349bf977", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b29f05e56e3b6711352d5cfd8b30785beb3b663/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b29f05e56e3b6711352d5cfd8b30785beb3b663/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=1b29f05e56e3b6711352d5cfd8b30785beb3b663", "patch": "@@ -2922,9 +2922,10 @@ vect_create_addr_base_for_vector_ref (gimple stmt,\n    2. AT_LOOP: the loop where the vector memref is to be created.\n    3. OFFSET (optional): an offset to be added to the initial address accessed\n         by the data-ref in STMT.\n-   4. ONLY_INIT: indicate if vp is to be updated in the loop, or remain\n+   4. BSI: location where the new stmts are to be placed if there is no loop\n+   5. ONLY_INIT: indicate if vp is to be updated in the loop, or remain\n         pointing to the initial address.\n-   5. TYPE: if not NULL indicates the required type of the data-ref.\n+   6. TYPE: if not NULL indicates the required type of the data-ref.\n \n    Output:\n    1. Declare a new ptr to vector_type, and have it point to the base of the\n@@ -2952,9 +2953,9 @@ vect_create_addr_base_for_vector_ref (gimple stmt,\n    4. Return the pointer.  */\n \n tree\n-vect_create_data_ref_ptr (gimple stmt, struct loop *at_loop,\n-\t\t\t  tree offset, tree *initial_address, gimple *ptr_incr,\n-\t\t\t  bool only_init, bool *inv_p)\n+vect_create_data_ref_ptr (gimple stmt, struct loop *at_loop, tree offset,\n+\t\t\t  tree *initial_address, gimple_stmt_iterator *gsi,\n+\t\t\t  gimple *ptr_incr, bool only_init, bool *inv_p)\n {\n   tree base_name;\n   stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n@@ -2980,7 +2981,6 @@ vect_create_data_ref_ptr (gimple stmt, struct loop *at_loop,\n   gimple incr;\n   tree step;\n   bb_vec_info bb_vinfo = STMT_VINFO_BB_VINFO (stmt_info);\n-  gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n   tree base;\n \n   if (loop_vinfo)\n@@ -3125,7 +3125,7 @@ vect_create_data_ref_ptr (gimple stmt, struct loop *at_loop,\n           gcc_assert (!new_bb);\n         }\n       else\n-        gsi_insert_seq_before (&gsi, new_stmt_list, GSI_SAME_STMT);\n+        gsi_insert_seq_before (gsi, new_stmt_list, GSI_SAME_STMT);\n     }\n \n   *initial_address = new_temp;\n@@ -3147,7 +3147,7 @@ vect_create_data_ref_ptr (gimple stmt, struct loop *at_loop,\n \t  gcc_assert (!new_bb);\n \t}\n       else\n-\tgsi_insert_before (&gsi, vec_stmt, GSI_SAME_STMT);\n+\tgsi_insert_before (gsi, vec_stmt, GSI_SAME_STMT);\n     }\n   else\n     vect_ptr_init = new_temp;\n@@ -3672,7 +3672,7 @@ vect_setup_realignment (gimple stmt, gimple_stmt_iterator *gsi,\n       gcc_assert (!compute_in_loop);\n       vec_dest = vect_create_destination_var (scalar_dest, vectype);\n       ptr = vect_create_data_ref_ptr (stmt, loop_for_initial_load, NULL_TREE,\n-\t\t\t\t      &init_addr, &inc, true, &inv_p);\n+\t\t\t\t      &init_addr, NULL, &inc, true, &inv_p);\n       new_stmt = gimple_build_assign_with_ops\n \t\t   (BIT_AND_EXPR, NULL_TREE, ptr,\n \t\t    build_int_cst (TREE_TYPE (ptr),"}, {"sha": "16020e5c0eece4ca9432cbaeab5d2931e1739629", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b29f05e56e3b6711352d5cfd8b30785beb3b663/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b29f05e56e3b6711352d5cfd8b30785beb3b663/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=1b29f05e56e3b6711352d5cfd8b30785beb3b663", "patch": "@@ -3582,7 +3582,7 @@ vectorizable_store (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t  gcc_assert (useless_type_conversion_p (vectype,\n \t\t\t\t\t\t TREE_TYPE (vec_oprnd)));\n \t  dataref_ptr = vect_create_data_ref_ptr (first_stmt, NULL, NULL_TREE,\n-\t\t\t\t\t\t  &dummy, &ptr_incr, false,\n+\t\t\t\t\t\t  &dummy, gsi, &ptr_incr, false,\n \t\t\t\t\t\t  &inv_p);\n \t  gcc_assert (bb_vinfo || !inv_p);\n \t}\n@@ -4109,9 +4109,8 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n     {\n       /* 1. Create the vector pointer update chain.  */\n       if (j == 0)\n-        dataref_ptr = vect_create_data_ref_ptr (first_stmt,\n-\t\t\t\t\t        at_loop, offset,\n-\t\t\t\t\t\t&dummy, &ptr_incr, false,\n+        dataref_ptr = vect_create_data_ref_ptr (first_stmt, at_loop, offset,\n+\t\t\t\t\t\t&dummy, gsi, &ptr_incr, false,\n \t\t\t\t\t\t&inv_p);\n       else\n         dataref_ptr ="}, {"sha": "4efa5be20d828d02d0d9fea4b46f49e6b2c6d5db", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b29f05e56e3b6711352d5cfd8b30785beb3b663/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b29f05e56e3b6711352d5cfd8b30785beb3b663/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=1b29f05e56e3b6711352d5cfd8b30785beb3b663", "patch": "@@ -824,7 +824,8 @@ extern bool vect_analyze_data_ref_accesses (loop_vec_info, bb_vec_info);\n extern bool vect_prune_runtime_alias_test_list (loop_vec_info);\n extern bool vect_analyze_data_refs (loop_vec_info, bb_vec_info, int *);\n extern tree vect_create_data_ref_ptr (gimple, struct loop *, tree, tree *,\n-                                      gimple *, bool, bool *);\n+                                      gimple_stmt_iterator *, gimple *,\n+                                      bool, bool *);\n extern tree bump_vector_ptr (tree, gimple, gimple_stmt_iterator *, gimple, tree);\n extern tree vect_create_destination_var (tree, tree);\n extern bool vect_strided_store_supported (tree);"}]}