{"sha": "5a731790054474a6361b88a7a123abc8013e4d4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE3MzE3OTAwNTQ0NzRhNjM2MWI4OGE3YTEyM2FiYzgwMTNlNGQ0ZQ==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-08-21T23:09:10Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-08-22T14:53:25Z"}, "message": "Reject duplicate field names in structs and unions.\n\nOdd things happen if structs or unions have duplicate field names.\nEmit an error when lowering an struct/union item or declaration\nstatement and a duplicate field name is detected.  A new testcase\n'dup_fields.rs' checks an error is actually produced.", "tree": {"sha": "f5854ab5f3c824e9f93f4b2e73dd533f50aaa682", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5854ab5f3c824e9f93f4b2e73dd533f50aaa682"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a731790054474a6361b88a7a123abc8013e4d4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a731790054474a6361b88a7a123abc8013e4d4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a731790054474a6361b88a7a123abc8013e4d4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a731790054474a6361b88a7a123abc8013e4d4e/comments", "author": null, "committer": null, "parents": [{"sha": "ac3be517de2c0ec596eeee754b863243cb071098", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac3be517de2c0ec596eeee754b863243cb071098", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac3be517de2c0ec596eeee754b863243cb071098"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "c7f874d1dc9975f479930341fede1126ae706f54", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a731790054474a6361b88a7a123abc8013e4d4e/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a731790054474a6361b88a7a123abc8013e4d4e/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=5a731790054474a6361b88a7a123abc8013e4d4e", "patch": "@@ -175,6 +175,25 @@ class ASTLoweringItem : public ASTLoweringBase\n \t\t\t       struct_decl.get_locus ());\n   }\n \n+  /* Checks whether the name of a field already exists.  Returns true\n+     and produces an error if so.  */\n+  static bool struct_field_name_exists (std::vector<HIR::StructField> &fields,\n+\t\t\t\t\tHIR::StructField &new_field)\n+  {\n+    for (auto &field : fields)\n+      {\n+\tif (field.get_field_name ().compare (new_field.get_field_name ()) == 0)\n+\t  {\n+\t    RichLocation r (new_field.get_locus ());\n+\t    r.add_range (field.get_locus ());\n+\t    rust_error_at (r, \"duplicate field name %qs\",\n+\t\t\t   field.get_field_name ().c_str ());\n+\t    return true;\n+\t  }\n+      }\n+    return false;\n+  }\n+\n   void visit (AST::StructStruct &struct_decl) override\n   {\n     std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;\n@@ -205,6 +224,10 @@ class ASTLoweringItem : public ASTLoweringBase\n \t\t\t\t\t std::unique_ptr<HIR::Type> (type), vis,\n \t\t\t\t\t field.get_locus (),\n \t\t\t\t\t field.get_outer_attrs ());\n+\n+      if (struct_field_name_exists (fields, translated_field))\n+\treturn false;\n+\n       fields.push_back (std::move (translated_field));\n       return true;\n     });\n@@ -257,6 +280,10 @@ class ASTLoweringItem : public ASTLoweringBase\n \t\t\t\t\t   std::unique_ptr<HIR::Type> (type),\n \t\t\t\t\t   vis, variant.get_locus (),\n \t\t\t\t\t   variant.get_outer_attrs ());\n+\n+      if (struct_field_name_exists (variants, translated_variant))\n+\treturn false;\n+\n       variants.push_back (std::move (translated_variant));\n       return true;\n     });"}, {"sha": "1e72c8a2023d2bdb09ed4020356e0faa04e9a2ee", "filename": "gcc/rust/hir/rust-ast-lower-stmt.h", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a731790054474a6361b88a7a123abc8013e4d4e/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a731790054474a6361b88a7a123abc8013e4d4e/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h?ref=5a731790054474a6361b88a7a123abc8013e4d4e", "patch": "@@ -161,6 +161,25 @@ class ASTLoweringStmt : public ASTLoweringBase\n \t\t\t       struct_decl.get_locus ());\n   }\n \n+  /* Checks whether the name of a field already exists.  Returns true\n+     and produces an error if so.  */\n+  static bool struct_field_name_exists (std::vector<HIR::StructField> &fields,\n+\t\t\t\t\tHIR::StructField &new_field)\n+  {\n+    for (auto &field : fields)\n+      {\n+\tif (field.get_field_name ().compare (new_field.get_field_name ()) == 0)\n+\t  {\n+\t    RichLocation r (new_field.get_locus ());\n+\t    r.add_range (field.get_locus ());\n+\t    rust_error_at (r, \"duplicate field name %qs\",\n+\t\t\t   field.get_field_name ().c_str ());\n+\t    return true;\n+\t  }\n+      }\n+    return false;\n+  }\n+\n   void visit (AST::StructStruct &struct_decl) override\n   {\n     std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;\n@@ -191,6 +210,10 @@ class ASTLoweringStmt : public ASTLoweringBase\n \t\t\t\t\t std::unique_ptr<HIR::Type> (type), vis,\n \t\t\t\t\t field.get_locus (),\n \t\t\t\t\t field.get_outer_attrs ());\n+\n+      if (struct_field_name_exists (fields, translated_field))\n+\treturn false;\n+\n       fields.push_back (std::move (translated_field));\n       return true;\n     });\n@@ -242,6 +265,10 @@ class ASTLoweringStmt : public ASTLoweringBase\n \t\t\t\t\t   std::unique_ptr<HIR::Type> (type),\n \t\t\t\t\t   vis, variant.get_locus (),\n \t\t\t\t\t   variant.get_outer_attrs ());\n+\n+      if (struct_field_name_exists (variants, translated_variant))\n+\treturn false;\n+\n       variants.push_back (std::move (translated_variant));\n       return true;\n     });"}, {"sha": "ab39955eca05fd5b400f5505ead52f619b09f84e", "filename": "gcc/testsuite/rust/compile/dup_fields.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a731790054474a6361b88a7a123abc8013e4d4e/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdup_fields.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a731790054474a6361b88a7a123abc8013e4d4e/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdup_fields.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdup_fields.rs?ref=5a731790054474a6361b88a7a123abc8013e4d4e", "patch": "@@ -0,0 +1,23 @@\n+struct S { a: i32, b: i32, c: u8, a: i128 }\n+// { dg-error \"duplicate field\" \"\" { target *-*-* } .-1 }\n+\n+union U\n+  {\n+    a: i32,\n+    b: i32,\n+    c: u8,\n+    b: char // { dg-error \"duplicate field\" \"\" { target *-*-* } }\n+  }\n+\n+fn main ()\n+{\n+  struct SS { alpha: i32, beta: i32, gamma: u8, gamma: i128 }\n+  // { dg-error \"duplicate field\" \"\" { target *-*-* } .-1 }\n+\n+  union UU\n+    {\n+      alpha: i32, beta: i32,\n+      gamma: u8, beta: char\n+      // { dg-error \"duplicate field\" \"\" { target *-*-* } .-1 }\n+    }\n+}"}]}