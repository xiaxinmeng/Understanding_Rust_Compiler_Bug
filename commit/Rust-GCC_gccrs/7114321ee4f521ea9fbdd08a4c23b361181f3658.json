{"sha": "7114321ee4f521ea9fbdd08a4c23b361181f3658", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzExNDMyMWVlNGY1MjFlYTlmYmRkMDhhNGMyM2IzNjExODFmMzY1OA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2011-03-24T23:37:02Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2011-03-24T23:37:02Z"}, "message": "function.c (instantiate_virtual_regs): Use FOR_EACH_BB and FOR_BB_INSNS_SAFE to iterate through insns.\n\n\t* function.c (instantiate_virtual_regs): Use FOR_EACH_BB and\n\tFOR_BB_INSNS_SAFE to iterate through insns.  Re-indent.\n\t(pass_instantiate_virtual_regs): Require PROP_cfglayout.\n\t* passes.c (init_optimization_passes): Move\n\tpass_instantiate_virtual_regs after pass_into_cfg_layout_mode.\n\nFrom-SVN: r171426", "tree": {"sha": "f5e6b65d440def829e0dc9d896d1a600cc578ba4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5e6b65d440def829e0dc9d896d1a600cc578ba4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7114321ee4f521ea9fbdd08a4c23b361181f3658", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7114321ee4f521ea9fbdd08a4c23b361181f3658", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7114321ee4f521ea9fbdd08a4c23b361181f3658", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7114321ee4f521ea9fbdd08a4c23b361181f3658/comments", "author": null, "committer": null, "parents": [{"sha": "c8679567247626c57e30a673b9a9141a889eba50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8679567247626c57e30a673b9a9141a889eba50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8679567247626c57e30a673b9a9141a889eba50"}], "stats": {"total": 69, "additions": 42, "deletions": 27}, "files": [{"sha": "85c45b61cb815cef00064bb1fbecc9da7c8d22c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7114321ee4f521ea9fbdd08a4c23b361181f3658/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7114321ee4f521ea9fbdd08a4c23b361181f3658/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7114321ee4f521ea9fbdd08a4c23b361181f3658", "patch": "@@ -1,3 +1,11 @@\n+2011-03-24  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* function.c (instantiate_virtual_regs): Use FOR_EACH_BB and\n+\tFOR_BB_INSNS_SAFE to iterate through insns.  Re-indent.\n+\t(pass_instantiate_virtual_regs): Require PROP_cfglayout.\n+\t* passes.c (init_optimization_passes): Move\n+\tpass_instantiate_virtual_regs after pass_into_cfg_layout_mode.\n+\n 2011-03-24  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* dojump.c (do_jump_by_parts_greater_rtx): Optimize in specific cases."}, {"sha": "49404c873ff45ebe6bd70c35a639538628e5e032", "filename": "gcc/function.c", "status": "modified", "additions": 33, "deletions": 26, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7114321ee4f521ea9fbdd08a4c23b361181f3658/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7114321ee4f521ea9fbdd08a4c23b361181f3658/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=7114321ee4f521ea9fbdd08a4c23b361181f3658", "patch": "@@ -1883,7 +1883,7 @@ instantiate_decls (tree fndecl)\n static unsigned int\n instantiate_virtual_regs (void)\n {\n-  rtx insn;\n+  basic_block bb;\n \n   /* Compute the offsets to use for this function.  */\n   in_arg_offset = FIRST_PARM_OFFSET (current_function_decl);\n@@ -1901,33 +1901,40 @@ instantiate_virtual_regs (void)\n \n   /* Scan through all the insns, instantiating every virtual register still\n      present.  */\n-  for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n-    if (INSN_P (insn))\n-      {\n-\t/* These patterns in the instruction stream can never be recognized.\n-\t   Fortunately, they shouldn't contain virtual registers either.  */\n-\tif (GET_CODE (PATTERN (insn)) == USE\n-\t    || GET_CODE (PATTERN (insn)) == CLOBBER\n-\t    || GET_CODE (PATTERN (insn)) == ADDR_VEC\n-\t    || GET_CODE (PATTERN (insn)) == ADDR_DIFF_VEC\n-\t    || GET_CODE (PATTERN (insn)) == ASM_INPUT)\n-\t  continue;\n-\telse if (DEBUG_INSN_P (insn))\n-\t  for_each_rtx (&INSN_VAR_LOCATION (insn),\n-\t\t\tinstantiate_virtual_regs_in_rtx, NULL);\n-\telse\n-\t  instantiate_virtual_regs_in_insn (insn);\n+  FOR_EACH_BB (bb)\n+    {\n+      rtx insn, curr;\n \n-\tif (INSN_DELETED_P (insn))\n-\t  continue;\n+      FOR_BB_INSNS_SAFE (bb, insn, curr)\n+\t{\n+\t  if (INSN_P (insn))\n+\t    {\n+\t      /* These patterns in the instruction stream can never be recognized.\n+\t\t Fortunately, they shouldn't contain virtual registers either.  */\n+\t      if (GET_CODE (PATTERN (insn)) == USE\n+\t\t  || GET_CODE (PATTERN (insn)) == CLOBBER\n+\t\t  || GET_CODE (PATTERN (insn)) == ADDR_VEC\n+\t\t  || GET_CODE (PATTERN (insn)) == ADDR_DIFF_VEC\n+\t\t  || GET_CODE (PATTERN (insn)) == ASM_INPUT)\n+\t\tcontinue;\n+\t      else if (DEBUG_INSN_P (insn))\n+\t\tfor_each_rtx (&INSN_VAR_LOCATION (insn),\n+\t\t\t      instantiate_virtual_regs_in_rtx, NULL);\n+\t      else\n+\t\tinstantiate_virtual_regs_in_insn (insn);\n \n-\tfor_each_rtx (&REG_NOTES (insn), instantiate_virtual_regs_in_rtx, NULL);\n+\t      if (INSN_DELETED_P (insn))\n+\t\tcontinue;\n \n-\t/* Instantiate any virtual registers in CALL_INSN_FUNCTION_USAGE.  */\n-\tif (CALL_P (insn))\n-\t  for_each_rtx (&CALL_INSN_FUNCTION_USAGE (insn),\n-\t\t\tinstantiate_virtual_regs_in_rtx, NULL);\n-      }\n+\t      for_each_rtx (&REG_NOTES (insn), instantiate_virtual_regs_in_rtx, NULL);\n+\n+\t      /* Instantiate any virtual registers in CALL_INSN_FUNCTION_USAGE.  */\n+\t      if (CALL_P (insn))\n+\t\tfor_each_rtx (&CALL_INSN_FUNCTION_USAGE (insn),\n+\t\t\t      instantiate_virtual_regs_in_rtx, NULL);\n+\t    }\n+\t}\n+    }\n \n   /* Instantiate the virtual registers in the DECLs for debugging purposes.  */\n   instantiate_decls (current_function_decl);\n@@ -1963,7 +1970,7 @@ struct rtl_opt_pass pass_instantiate_virtual_regs =\n   NULL,                                 /* next */\n   0,                                    /* static_pass_number */\n   TV_NONE,                              /* tv_id */\n-  0,                                    /* properties_required */\n+  PROP_cfglayout,                       /* properties_required */\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */"}, {"sha": "3353557ec3cd5b58f7a381355d944a467ffeaa92", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7114321ee4f521ea9fbdd08a4c23b361181f3658/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7114321ee4f521ea9fbdd08a4c23b361181f3658/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=7114321ee4f521ea9fbdd08a4c23b361181f3658", "patch": "@@ -956,8 +956,8 @@ init_optimization_passes (void)\n       NEXT_PASS (pass_rtl_eh);\n       NEXT_PASS (pass_initial_value_sets);\n       NEXT_PASS (pass_unshare_all_rtl);\n-      NEXT_PASS (pass_instantiate_virtual_regs);\n       NEXT_PASS (pass_into_cfg_layout_mode);\n+      NEXT_PASS (pass_instantiate_virtual_regs);\n       NEXT_PASS (pass_jump2);\n       NEXT_PASS (pass_lower_subreg);\n       NEXT_PASS (pass_df_initialize_opt);"}]}