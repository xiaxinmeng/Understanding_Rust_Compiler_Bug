{"sha": "c14add82fa4ec24a09e48d56094d9f46310f0809", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE0YWRkODJmYTRlYzI0YTA5ZTQ4ZDU2MDk0ZDlmNDYzMTBmMDgwOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-06-03T11:51:10Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-06-03T11:51:10Z"}, "message": "re PR tree-optimization/86034 (wrong code for bit-field manipulation at -Os)\n\n\tPR tree-optimization/86034\n\t* gimple-ssa-store-merging.c (output_merged_store): Convert the RHS to\n\tthe unsigned bitfield type in a bit insertion sequence if it does not\n\thave a larger precision than the bitfield size.\n\t(process_store): Also bypass widening conversions for BIT_INSERT_EXPR.\n\nFrom-SVN: r261128", "tree": {"sha": "74d872b2a20990ecc63ce48b040263450fdce3df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74d872b2a20990ecc63ce48b040263450fdce3df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c14add82fa4ec24a09e48d56094d9f46310f0809", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c14add82fa4ec24a09e48d56094d9f46310f0809", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c14add82fa4ec24a09e48d56094d9f46310f0809", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c14add82fa4ec24a09e48d56094d9f46310f0809/comments", "author": null, "committer": null, "parents": [{"sha": "5b9a3332c27e2f4ea372f2fc53bcbd27e204fb73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b9a3332c27e2f4ea372f2fc53bcbd27e204fb73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b9a3332c27e2f4ea372f2fc53bcbd27e204fb73"}], "stats": {"total": 58, "additions": 54, "deletions": 4}, "files": [{"sha": "4faeadc8a47e9fcb1110301380591d0fec9e0778", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14add82fa4ec24a09e48d56094d9f46310f0809/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14add82fa4ec24a09e48d56094d9f46310f0809/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c14add82fa4ec24a09e48d56094d9f46310f0809", "patch": "@@ -1,3 +1,11 @@\n+2018-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR tree-optimization/86034\n+\t* gimple-ssa-store-merging.c (output_merged_store): Convert the RHS to\n+\tthe unsigned bitfield type in a bit insertion sequence if it does not\n+\thave a larger precision than the bitfield size.\n+\t(process_store): Also bypass widening conversions for BIT_INSERT_EXPR.\n+\n 2018-06-03  Kito Cheng  <kito.cheng@gmail.com>\n \n \t* config/nds32/nds32-peephole2.md: Add new patterns for code size."}, {"sha": "b972f9bef8488561736711616f5185c7d6d89ee0", "filename": "gcc/gimple-ssa-store-merging.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14add82fa4ec24a09e48d56094d9f46310f0809/gcc%2Fgimple-ssa-store-merging.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14add82fa4ec24a09e48d56094d9f46310f0809/gcc%2Fgimple-ssa-store-merging.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-store-merging.c?ref=c14add82fa4ec24a09e48d56094d9f46310f0809", "patch": "@@ -3778,7 +3778,14 @@ imm_store_chain_info::output_merged_store (merged_store_group *group)\n \t\t  const HOST_WIDE_INT end_gap\n \t\t    = (try_bitpos + try_size) - (info->bitpos + info->bitsize);\n \t\t  tree tem = info->ops[0].val;\n-\t\t  if ((BYTES_BIG_ENDIAN ? start_gap : end_gap) > 0)\n+\t\t  if (TYPE_PRECISION (TREE_TYPE (tem)) <= info->bitsize)\n+\t\t    {\n+\t\t      tree bitfield_type\n+\t\t\t= build_nonstandard_integer_type (info->bitsize,\n+\t\t\t\t\t\t\t  UNSIGNED);\n+\t\t      tem = gimple_convert (&seq, loc, bitfield_type, tem);\n+\t\t    }\n+\t\t  else if ((BYTES_BIG_ENDIAN ? start_gap : end_gap) > 0)\n \t\t    {\n \t\t      const unsigned HOST_WIDE_INT imask\n \t\t\t= (HOST_WIDE_INT_1U << info->bitsize) - 1;\n@@ -4270,13 +4277,12 @@ pass_store_merging::process_store (gimple *stmt)\n \t      || !multiple_p (bitpos, BITS_PER_UNIT))\n \t  && const_bitsize <= 64)\n \t{\n-\t  /* Bypass a truncating conversion to the bit-field type.  */\n+\t  /* Bypass a conversion to the bit-field type.  */\n \t  if (is_gimple_assign (def_stmt) && CONVERT_EXPR_CODE_P (rhs_code))\n \t    {\n \t      tree rhs1 = gimple_assign_rhs1 (def_stmt);\n \t      if (TREE_CODE (rhs1) == SSA_NAME\n-\t\t  && INTEGRAL_TYPE_P (TREE_TYPE (rhs1))\n-\t\t  && const_bitsize <= TYPE_PRECISION (TREE_TYPE (rhs1)))\n+\t\t  && INTEGRAL_TYPE_P (TREE_TYPE (rhs1)))\n \t\trhs = rhs1;\n \t    }\n \t  rhs_code = BIT_INSERT_EXPR;"}, {"sha": "1367ca6882c562d077449708ce4dfbf277673f18", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14add82fa4ec24a09e48d56094d9f46310f0809/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14add82fa4ec24a09e48d56094d9f46310f0809/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c14add82fa4ec24a09e48d56094d9f46310f0809", "patch": "@@ -1,3 +1,7 @@\n+2018-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/torture/pr86034.c: New test.\n+\n 2018-06-03  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/36497"}, {"sha": "247428c27728c0af232536fd3795a381aa125188", "filename": "gcc/testsuite/gcc.dg/torture/pr86034.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14add82fa4ec24a09e48d56094d9f46310f0809/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr86034.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14add82fa4ec24a09e48d56094d9f46310f0809/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr86034.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr86034.c?ref=c14add82fa4ec24a09e48d56094d9f46310f0809", "patch": "@@ -0,0 +1,32 @@\n+/* PR tree-optimization/86034 */\n+/* Testcase by  Zhendong Su  <su@cs.ucdavis.edu> */\n+\n+/* { dg-do run } */\n+\n+struct A\n+{\n+  int b;\n+  int c:24;\n+  int d:10;\n+  int e;\n+} f;\n+\n+int g; \n+\n+void h ()\n+{\n+  struct A i = { 0, 0, -1, 0 };\n+L:\n+  f = i;\n+  i.d = 0;\n+  if (g < 0)\n+    goto L;\n+}\n+\n+int main (void)\n+{\n+  h ();\n+  if (f.e != 0) \n+    __builtin_abort ();\n+  return 0; \n+}"}]}