{"sha": "661eb8f9e5270df79c21601273219e2a8e282204", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYxZWI4ZjllNTI3MGRmNzljMjE2MDEyNzMyMTllMmE4ZTI4MjIwNA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2018-04-20T21:27:08Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2018-04-20T21:27:08Z"}, "message": "re PR target/85456 (PowerPC: Using -mabi=ieeelongdouble calls wrong function for __builtin_powi.)\n\n[libgcc]\n2018-04-20  Michael Meissner  <meissner@linux.ibm.com>\n\n\tPR target/85456\n\t* config/rs6000/_powikf2.c: New file.  Add support for the\n\t__builtin_powil function when long double is IEEE 128-bit floating\n\tpoint.\n\t* config/rs6000/float128-ifunc.c (__powikf2_resolve): Add\n\t__powikf2 support.\n\t(__powikf2): Likewise.\n\t* config/rs6000/quad-float128.h (__powikf2_sw): Likewise.\n\t(__powikf2_hw): Likewise.\n\t(__powikf2): Likewise.\n\t* config/rs6000/t-float128 (fp128_ppc_funcs): Likewise.\n\t* config/rs6000/t-float128-hw (fp128_hw_func): Likewise.\n\t(_powikf2-hw.c): Likewise.\n\n[gcc]\n2018-04-20  Michael Meissner  <meissner@linux.ibm.com>\n\n\tPR target/85456\n\t* config/rs6000/rs6000.c (init_float128_ieee): Add support to call\n\t__powikf2 when long double is IEEE 128-bit.\n\n[gcc/testsuite]\n2018-04-20  Michael Meissner  <meissner@linux.ibm.com>\n\n\tPR target/85456\n\t* gcc.target/powerpc/pr85456.c: New test.\n\nFrom-SVN: r259533", "tree": {"sha": "0177db3daa9c272dc9903521a296e8daf574d0ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0177db3daa9c272dc9903521a296e8daf574d0ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/661eb8f9e5270df79c21601273219e2a8e282204", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/661eb8f9e5270df79c21601273219e2a8e282204", "html_url": "https://github.com/Rust-GCC/gccrs/commit/661eb8f9e5270df79c21601273219e2a8e282204", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/661eb8f9e5270df79c21601273219e2a8e282204/comments", "author": null, "committer": null, "parents": [{"sha": "8833e667be9d960a556b53bfd25101165b92a0b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8833e667be9d960a556b53bfd25101165b92a0b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8833e667be9d960a556b53bfd25101165b92a0b5"}], "stats": {"total": 127, "additions": 124, "deletions": 3}, "files": [{"sha": "b58362d217472af31b8677291003eca350d14dd1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661eb8f9e5270df79c21601273219e2a8e282204/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661eb8f9e5270df79c21601273219e2a8e282204/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=661eb8f9e5270df79c21601273219e2a8e282204", "patch": "@@ -1,3 +1,9 @@\n+2018-04-20  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\tPR target/85456\n+\t* config/rs6000/rs6000.c (init_float128_ieee): Add support to call\n+\t__powikf2 when long double is IEEE 128-bit.\n+\n 2018-04-20  Kito Cheng  <kito.cheng@gmail.com>\n \n \t* config/riscv/riscv.c (riscv_first_stack_step): Round up min"}, {"sha": "cbd4cfe3eb2129cc8f45c9b7787947a660baea82", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661eb8f9e5270df79c21601273219e2a8e282204/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661eb8f9e5270df79c21601273219e2a8e282204/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=661eb8f9e5270df79c21601273219e2a8e282204", "patch": "@@ -18657,6 +18657,7 @@ init_float128_ieee (machine_mode mode)\n       set_optab_libfunc (sdiv_optab, mode, \"__divkf3\");\n       set_optab_libfunc (sqrt_optab, mode, \"__sqrtkf2\");\n       set_optab_libfunc (abs_optab, mode, \"__abstkf2\");\n+      set_optab_libfunc (powi_optab, mode, \"__powitkf2\");\n \n       set_optab_libfunc (eq_optab, mode, \"__eqkf2\");\n       set_optab_libfunc (ne_optab, mode, \"__nekf2\");"}, {"sha": "5314d9e14b4f7a92e81b79ad6e2d2adafc0ff27f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661eb8f9e5270df79c21601273219e2a8e282204/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661eb8f9e5270df79c21601273219e2a8e282204/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=661eb8f9e5270df79c21601273219e2a8e282204", "patch": "@@ -1,3 +1,8 @@\n+2018-04-20  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\tPR target/85456\n+\t* gcc.target/powerpc/pr85456.c: New test.\n+\n 2018-04-20  Bill Schmidt  <wschmidt@linux.ibm.com>\n \n \t* g++.dg/ext/undef-bool-1.C: Require lp64."}, {"sha": "b9df16a2b70abcfa65b24a7425e4237ba0836b98", "filename": "gcc/testsuite/gcc.target/powerpc/pr85456.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661eb8f9e5270df79c21601273219e2a8e282204/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr85456.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661eb8f9e5270df79c21601273219e2a8e282204/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr85456.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr85456.c?ref=661eb8f9e5270df79c21601273219e2a8e282204", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-O2 -mpower8-vector -mabi=ieeelongdouble -Wno-psabi\" } */\n+\n+/* Check that the __builtin_powil generates a call to the correct function\n+   when long double uses IEEE 128-bit floating point.  */\n+\n+long double\n+do_powl (long double a, int i)\n+{\n+  return __builtin_powil (a, i);\n+}\n+\n+/* { dg-final { scan-assembler \"bl __powikf2\" } } */"}, {"sha": "f0361dc73fc616c9379aa25fc353cd41b43aec49", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661eb8f9e5270df79c21601273219e2a8e282204/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661eb8f9e5270df79c21601273219e2a8e282204/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=661eb8f9e5270df79c21601273219e2a8e282204", "patch": "@@ -1,3 +1,19 @@\n+2018-04-20  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\tPR target/85456\n+\t* config/rs6000/_powikf2.c: New file.  Add support for the\n+\t__builtin_powil function when long double is IEEE 128-bit floating\n+\tpoint.\n+\t* config/rs6000/float128-ifunc.c (__powikf2_resolve): Add\n+\t__powikf2 support.\n+\t(__powikf2): Likewise.\n+\t* config/rs6000/quad-float128.h (__powikf2_sw): Likewise.\n+\t(__powikf2_hw): Likewise.\n+\t(__powikf2): Likewise.\n+\t* config/rs6000/t-float128 (fp128_ppc_funcs): Likewise.\n+\t* config/rs6000/t-float128-hw (fp128_hw_func): Likewise.\n+\t(_powikf2-hw.c): Likewise.\n+\n 2018-04-19  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR libgcc/85334"}, {"sha": "7afd0963ca919b9773ff089d839eae80a24d12c4", "filename": "libgcc/config/rs6000/_powikf2.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661eb8f9e5270df79c21601273219e2a8e282204/libgcc%2Fconfig%2Frs6000%2F_powikf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661eb8f9e5270df79c21601273219e2a8e282204/libgcc%2Fconfig%2Frs6000%2F_powikf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2F_powikf2.c?ref=661eb8f9e5270df79c21601273219e2a8e282204", "patch": "@@ -0,0 +1,63 @@\n+/* Copyright (C) 1989-2018 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"soft-fp.h\"\n+#include \"quad-float128.h\"\n+\n+/* __powikf3 can be compiled 3 different ways:\n+\n+   1) If the assembler does not have support for the IEEE 128-bit insns\n+   (xsaddqp, etc.) it is just compiled as __powikf2.\n+\n+   2) If the assembler has IEEE 128-bit floating point support, and __powikf2\n+   is not previously defined, it is defined as __powikf2_sw.\n+\n+   3) If the assembler has IEEE 128-bit floating point support, and __powikf2\n+   is included by _powikf2-hw.c, which defines __powikf2 as __powikf2_hw.  The\n+   __powikf2_hw.c is compiled with -mcpu=power9 and it automatically uses the\n+   IEEE 128-bit instructions.\n+\n+   For #2/#3, float128-ifunc.c defines an ifunc function for __powikf2, that\n+   will use the software version on power7/power8 systems, and the hardware\n+   version on power9 systems.\n+\n+   The code is cloned from the code in libgcc2.c (which handles the standard\n+   SF, DF, TF, and XF types).  */\n+\n+#if defined(FLOAT128_HW_INSNS) && !defined(__powikf2)\n+#define __powikf2 __powikf2_sw\n+#endif\n+\n+TFtype\n+__powikf2 (TFtype x, SItype_ppc m)\n+{\n+  unsigned int n = m < 0 ? -m : m;\n+  TFtype y = n % 2 ? x : 1;\n+  while (n >>= 1)\n+    {\n+      x = x * x;\n+      if (n % 2)\n+\ty = y * x;\n+    }\n+  return m < 0 ? 1/y : y;\n+}"}, {"sha": "8fcac242cb4c47ba34a585a7ad02aa05c6753dae", "filename": "libgcc/config/rs6000/float128-ifunc.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661eb8f9e5270df79c21601273219e2a8e282204/libgcc%2Fconfig%2Frs6000%2Ffloat128-ifunc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661eb8f9e5270df79c21601273219e2a8e282204/libgcc%2Fconfig%2Frs6000%2Ffloat128-ifunc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ffloat128-ifunc.c?ref=661eb8f9e5270df79c21601273219e2a8e282204", "patch": "@@ -84,6 +84,12 @@ __negkf2_resolve (void)\n   return SW_OR_HW (__negkf2_sw, __negkf2_hw);\n }\n \n+static __typeof__ (__powikf2_sw) *\n+__powikf2_resolve (void)\n+{\n+  return SW_OR_HW (__powikf2_sw, __powikf2_hw);\n+}\n+\n static __typeof__ (__floatsikf_sw) *\n __floatsikf_resolve (void)\n {\n@@ -243,6 +249,9 @@ TFtype __divkf3 (TFtype, TFtype)\n TFtype __negkf2 (TFtype)\n   __attribute__ ((__ifunc__ (\"__negkf2_resolve\")));\n \n+TFtype __powikf2 (TFtype, SItype_ppc)\n+  __attribute__ ((__ifunc__ (\"__powikf2_resolve\")));\n+\n CMPtype __eqkf2 (TFtype, TFtype)\n   __attribute__ ((__ifunc__ (\"__eqkf2_resolve\")));\n "}, {"sha": "1d4d513047012a86a1a240db2311bc851c86a8ed", "filename": "libgcc/config/rs6000/quad-float128.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661eb8f9e5270df79c21601273219e2a8e282204/libgcc%2Fconfig%2Frs6000%2Fquad-float128.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661eb8f9e5270df79c21601273219e2a8e282204/libgcc%2Fconfig%2Frs6000%2Fquad-float128.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Fquad-float128.h?ref=661eb8f9e5270df79c21601273219e2a8e282204", "patch": "@@ -72,6 +72,7 @@ extern TFtype __subkf3_sw (TFtype, TFtype);\n extern TFtype __mulkf3_sw (TFtype, TFtype);\n extern TFtype __divkf3_sw (TFtype, TFtype);\n extern TFtype __negkf2_sw (TFtype);\n+extern TFtype __powikf2_sw (TFtype, SItype_ppc);\n extern CMPtype __eqkf2_sw (TFtype, TFtype);\n extern CMPtype __gekf2_sw (TFtype, TFtype);\n extern CMPtype __lekf2_sw (TFtype, TFtype);\n@@ -114,6 +115,7 @@ extern TFtype __subkf3_hw (TFtype, TFtype);\n extern TFtype __mulkf3_hw (TFtype, TFtype);\n extern TFtype __divkf3_hw (TFtype, TFtype);\n extern TFtype __negkf2_hw (TFtype);\n+extern TFtype __powikf2_hw (TFtype, SItype_ppc);\n extern CMPtype __eqkf2_hw (TFtype, TFtype);\n extern CMPtype __gekf2_hw (TFtype, TFtype);\n extern CMPtype __lekf2_hw (TFtype, TFtype);\n@@ -142,6 +144,7 @@ extern TFtype __subkf3 (TFtype, TFtype);\n extern TFtype __mulkf3 (TFtype, TFtype);\n extern TFtype __divkf3 (TFtype, TFtype);\n extern TFtype __negkf2 (TFtype);\n+extern TFtype __powikf2 (TFtype, SItype_ppc);\n extern CMPtype __eqkf2 (TFtype, TFtype);\n extern CMPtype __nekf2 (TFtype, TFtype);\n extern CMPtype __gekf2 (TFtype, TFtype);"}, {"sha": "8d525211ddaf59f1dd4a7f98042c4f23a3fa2c54", "filename": "libgcc/config/rs6000/t-float128", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661eb8f9e5270df79c21601273219e2a8e282204/libgcc%2Fconfig%2Frs6000%2Ft-float128", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661eb8f9e5270df79c21601273219e2a8e282204/libgcc%2Fconfig%2Frs6000%2Ft-float128", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-float128?ref=661eb8f9e5270df79c21601273219e2a8e282204", "patch": "@@ -25,7 +25,7 @@ fp128_softfp_obj\t= $(fp128_softfp_static_obj) $(fp128_softfp_shared_obj)\n # New functions for software emulation\n fp128_ppc_funcs\t\t= floattikf floatuntikf fixkfti fixunskfti \\\n \t\t\t  extendkftf2-sw trunctfkf2-sw \\\n-\t\t\t  sfp-exceptions _mulkc3 _divkc3\n+\t\t\t  sfp-exceptions _mulkc3 _divkc3 _powikf2\n \n fp128_ppc_src\t\t= $(addprefix $(srcdir)/config/rs6000/,$(addsuffix \\\n \t\t\t\t.c,$(fp128_ppc_funcs)))"}, {"sha": "acdddb0ba0150137b550477eca5b3c0ca7846b2b", "filename": "libgcc/config/rs6000/t-float128-hw", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661eb8f9e5270df79c21601273219e2a8e282204/libgcc%2Fconfig%2Frs6000%2Ft-float128-hw", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661eb8f9e5270df79c21601273219e2a8e282204/libgcc%2Fconfig%2Frs6000%2Ft-float128-hw", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-float128-hw?ref=661eb8f9e5270df79c21601273219e2a8e282204", "patch": "@@ -6,9 +6,9 @@ FLOAT128_HW_INSNS\t= -DFLOAT128_HW_INSNS\n \n # New functions for hardware support\n fp128_hardfp_src\t= _mulkc3-hw.c _divkc3-hw.c\n-fp128_hw_funcs\t\t= float128-hw _mulkc3-hw _divkc3-hw\n+fp128_hw_funcs\t\t= float128-hw _mulkc3-hw _divkc3-hw _powikf2-hw\n fp128_hw_src\t\t= $(srcdir)/config/rs6000/float128-hw.c _mulkc3-hw.c \\\n-\t\t\t  _divkc3-hw.c\n+\t\t\t  _divkc3-hw.c _powikf2-hw.c\n fp128_hw_static_obj\t= $(addsuffix $(objext),$(fp128_hw_funcs))\n fp128_hw_shared_obj\t= $(addsuffix _s$(objext),$(fp128_hw_funcs))\n fp128_hw_obj\t\t= $(fp128_hw_static_obj) $(fp128_hw_shared_obj)\n@@ -43,3 +43,7 @@ _mulkc3-hw.c: $(srcdir)/config/rs6000/_mulkc3.c\n _divkc3-hw.c: $(srcdir)/config/rs6000/_divkc3.c\n \t(echo \"#define __divkc3 __divkc3_hw\"; \\\n \t cat $(srcdir)/config/rs6000/_divkc3.c) > _divkc3-hw.c\n+\n+_powikf2-hw.c: $(srcdir)/config/rs6000/_powikf2.c\n+\t(echo \"#define __powikf2 __powikf2_hw\"; \\\n+\t cat $(srcdir)/config/rs6000/_powikf2.c) > _powikf2-hw.c"}]}