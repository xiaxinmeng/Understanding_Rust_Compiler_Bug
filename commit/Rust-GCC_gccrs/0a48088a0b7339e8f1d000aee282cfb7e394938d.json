{"sha": "0a48088a0b7339e8f1d000aee282cfb7e394938d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE0ODA4OGEwYjczMzllOGYxZDAwMGFlZTI4MmNmYjdlMzk0OTM4ZA==", "commit": {"author": {"name": "Ilya Tocar", "email": "ilya.tocar@intel.com", "date": "2015-04-27T15:24:48Z"}, "committer": {"name": "Ilya Tocar", "email": "tocarip@gcc.gnu.org", "date": "2015-04-27T15:24:48Z"}, "message": "i386.h (EXT_REX_SSE_REG_P): New.\n\n2015-04-27  Ilya Tocar  <ilya.tocar@intel.com>\n\n\t* config/i386/i386.h (EXT_REX_SSE_REG_P): New.\n\t* config/i386/i386.md (*cmpi<FPCMP:unord><MODEF:mode>_mixed): Use \"v\"\n\tconstraint.\n\t(*movxi_internal_avx512f): Ditto.\n\t(define_split): Check for xmm16+, when splitting scalar float_extend.\n\t(*extendsfdf2_mixed): Use \"v\" constraint.\n\t(define_split): Check for xmm16+, when splitting scalar float_truncate.\n\t(*truncdfsf_fast_sse): Use \"v\" constraint.\n\t(fix_trunc<MODEF:mode><SWI48:mode>_sse): Ditto.\n\t(*float<SWI48:mode><MODEF:mode>2_sse): Ditto.\n\t(define_peephole2): Check for xmm16+, when converting scalar\n\tfloat_truncate.\n\t(define_peephole2): Check for xmm16+, when converting scalar\n\tfloat_extend.\n\t(*fop_<mode>_comm_mixed): Use \"v\" constraint.\n\t(*fop_<mode>_comm_sse): Ditto.\n\t(*fop_<mode>_1_mixed): Ditto.\n\t(*sqrt<mode>2_sse): Ditto.\n\t(*ieee_s<ieee_maxmin><mode>3): Ditto.\n\nFrom-SVN: r222470", "tree": {"sha": "fc40727b84dd64d463e87e68bbdcabdddd484ca6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc40727b84dd64d463e87e68bbdcabdddd484ca6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a48088a0b7339e8f1d000aee282cfb7e394938d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a48088a0b7339e8f1d000aee282cfb7e394938d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a48088a0b7339e8f1d000aee282cfb7e394938d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a48088a0b7339e8f1d000aee282cfb7e394938d/comments", "author": {"login": "TocarIP", "id": 16836375, "node_id": "MDQ6VXNlcjE2ODM2Mzc1", "avatar_url": "https://avatars.githubusercontent.com/u/16836375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TocarIP", "html_url": "https://github.com/TocarIP", "followers_url": "https://api.github.com/users/TocarIP/followers", "following_url": "https://api.github.com/users/TocarIP/following{/other_user}", "gists_url": "https://api.github.com/users/TocarIP/gists{/gist_id}", "starred_url": "https://api.github.com/users/TocarIP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TocarIP/subscriptions", "organizations_url": "https://api.github.com/users/TocarIP/orgs", "repos_url": "https://api.github.com/users/TocarIP/repos", "events_url": "https://api.github.com/users/TocarIP/events{/privacy}", "received_events_url": "https://api.github.com/users/TocarIP/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8abf301803382a2e433e7731ebc18f8e4d771fc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8abf301803382a2e433e7731ebc18f8e4d771fc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8abf301803382a2e433e7731ebc18f8e4d771fc6"}], "stats": {"total": 72, "additions": 52, "deletions": 20}, "files": [{"sha": "3e2c8ddec202bb812b16806757c979ccd9752802", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a48088a0b7339e8f1d000aee282cfb7e394938d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a48088a0b7339e8f1d000aee282cfb7e394938d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a48088a0b7339e8f1d000aee282cfb7e394938d", "patch": "@@ -1,3 +1,25 @@\n+2015-04-27  Ilya Tocar  <ilya.tocar@intel.com>\n+\n+\t* config/i386/i386.h (EXT_REX_SSE_REG_P): New.\n+\t* config/i386/i386.md (*cmpi<FPCMP:unord><MODEF:mode>_mixed): Use \"v\"\n+\tconstraint.\n+\t(*movxi_internal_avx512f): Ditto.\n+\t(define_split): Check for xmm16+, when splitting scalar float_extend.\n+\t(*extendsfdf2_mixed): Use \"v\" constraint.\n+\t(define_split): Check for xmm16+, when splitting scalar float_truncate.\n+\t(*truncdfsf_fast_sse): Use \"v\" constraint.\n+\t(fix_trunc<MODEF:mode><SWI48:mode>_sse): Ditto.\n+\t(*float<SWI48:mode><MODEF:mode>2_sse): Ditto.\n+\t(define_peephole2): Check for xmm16+, when converting scalar\n+\tfloat_truncate.\n+\t(define_peephole2): Check for xmm16+, when converting scalar\n+\tfloat_extend.\n+\t(*fop_<mode>_comm_mixed): Use \"v\" constraint.\n+\t(*fop_<mode>_comm_sse): Ditto.\n+\t(*fop_<mode>_1_mixed): Ditto.\n+\t(*sqrt<mode>2_sse): Ditto.\n+\t(*ieee_s<ieee_maxmin><mode>3): Ditto.\n+\n 2015-04-27  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* combine.c (simplify_if_then_else): Use std::swap instead"}, {"sha": "a645c2a21a502966d0dc3254a5a901e734743d51", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a48088a0b7339e8f1d000aee282cfb7e394938d/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a48088a0b7339e8f1d000aee282cfb7e394938d/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=0a48088a0b7339e8f1d000aee282cfb7e394938d", "patch": "@@ -1484,6 +1484,8 @@ enum reg_class\n #define REX_SSE_REGNO_P(N) \\\n   IN_RANGE ((N), FIRST_REX_SSE_REG, LAST_REX_SSE_REG)\n \n+#define EXT_REX_SSE_REG_P(X) (REG_P (X) && EXT_REX_SSE_REGNO_P (REGNO (X)))\n+\n #define EXT_REX_SSE_REGNO_P(N) \\\n   IN_RANGE ((N), FIRST_EXT_REX_SSE_REG, LAST_EXT_REX_SSE_REG)\n "}, {"sha": "937871a5af552c776d68c1a89f7043d0ee456ee0", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a48088a0b7339e8f1d000aee282cfb7e394938d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a48088a0b7339e8f1d000aee282cfb7e394938d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=0a48088a0b7339e8f1d000aee282cfb7e394938d", "patch": "@@ -1644,8 +1644,8 @@\n (define_insn \"*cmpi<FPCMP:unord><MODEF:mode>_mixed\"\n   [(set (reg:FPCMP FLAGS_REG)\n \t(compare:FPCMP\n-\t  (match_operand:MODEF 0 \"register_operand\" \"f,x\")\n-\t  (match_operand:MODEF 1 \"nonimmediate_operand\" \"f,xm\")))]\n+\t  (match_operand:MODEF 0 \"register_operand\" \"f,v\")\n+\t  (match_operand:MODEF 1 \"nonimmediate_operand\" \"f,vm\")))]\n   \"SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\"\n   \"* return output_fp_compare (insn, operands, true,\n \t\t\t       <FPCMP:MODE>mode == CCFPUmode);\"\n@@ -1944,8 +1944,8 @@\n    (set_attr \"length_immediate\" \"1\")])\n \n (define_insn \"*movxi_internal_avx512f\"\n-  [(set (match_operand:XI 0 \"nonimmediate_operand\" \"=x,x ,m\")\n-\t(match_operand:XI 1 \"vector_move_operand\"  \"C ,xm,x\"))]\n+  [(set (match_operand:XI 0 \"nonimmediate_operand\" \"=v,v ,m\")\n+\t(match_operand:XI 1 \"vector_move_operand\"  \"C ,vm,v\"))]\n   \"TARGET_AVX512F && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (which_alternative)\n@@ -3988,7 +3988,9 @@\n \t  (match_operand:SF 1 \"nonimmediate_operand\")))]\n   \"TARGET_USE_VECTOR_FP_CONVERTS\n    && optimize_insn_for_speed_p ()\n-   && reload_completed && SSE_REG_P (operands[0])\"\n+   && reload_completed && SSE_REG_P (operands[0])\n+   && (!EXT_REX_SSE_REG_P (operands[0])\n+       || TARGET_AVX512VL)\"\n    [(set (match_dup 2)\n \t (float_extend:V2DF\n \t   (vec_select:V2SF\n@@ -4033,9 +4035,9 @@\n   \"operands[2] = gen_rtx_REG (SFmode, REGNO (operands[0]));\")\n \n (define_insn \"*extendsfdf2_mixed\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,m,x\")\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,m,v\")\n         (float_extend:DF\n-\t  (match_operand:SF 1 \"nonimmediate_operand\" \"fm,f,xm\")))]\n+\t  (match_operand:SF 1 \"nonimmediate_operand\" \"fm,f,vm\")))]\n   \"TARGET_SSE2 && TARGET_SSE_MATH\"\n {\n   switch (which_alternative)\n@@ -4136,7 +4138,9 @@\n \t  (match_operand:DF 1 \"nonimmediate_operand\")))]\n   \"TARGET_USE_VECTOR_FP_CONVERTS\n    && optimize_insn_for_speed_p ()\n-   && reload_completed && SSE_REG_P (operands[0])\"\n+   && reload_completed && SSE_REG_P (operands[0])\n+   && (!EXT_REX_SSE_REG_P (operands[0])\n+       || TARGET_AVX512VL)\"\n    [(set (match_dup 2)\n \t (vec_concat:V4SF\n \t   (float_truncate:V2SF\n@@ -4189,9 +4193,9 @@\n ;; SSE alternative doesn't depend on flag_unsafe_math_optimizations,\n ;; because nothing we do there is unsafe.\n (define_insn \"*truncdfsf_fast_mixed\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\"   \"=fm,x\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\"   \"=fm,v\")\n         (float_truncate:SF\n-          (match_operand:DF 1 \"nonimmediate_operand\" \"f  ,xm\")))]\n+          (match_operand:DF 1 \"nonimmediate_operand\" \"f  ,vm\")))]\n   \"TARGET_SSE2 && TARGET_SSE_MATH\"\n {\n   switch (which_alternative)\n@@ -4521,7 +4525,7 @@\n ;; When SSE is available, it is always faster to use it!\n (define_insn \"fix_trunc<MODEF:mode><SWI48:mode>_sse\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r,r\")\n-\t(fix:SWI48 (match_operand:MODEF 1 \"nonimmediate_operand\" \"x,m\")))]\n+\t(fix:SWI48 (match_operand:MODEF 1 \"nonimmediate_operand\" \"v,m\")))]\n   \"SSE_FLOAT_MODE_P (<MODEF:MODE>mode)\n    && (!TARGET_FISTTP || TARGET_SSE_MATH)\"\n   \"%vcvtt<MODEF:ssemodesuffix>2si<SWI48:rex64suffix>\\t{%1, %0|%0, %1}\"\n@@ -4841,7 +4845,7 @@\n })\n \n (define_insn \"*float<SWI48:mode><MODEF:mode>2_mixed\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"=f,x,x\")\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=f,v,v\")\n \t(float:MODEF\n \t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"m,r,m\")))]\n   \"SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\"\n@@ -4944,7 +4948,9 @@\n    && optimize_function_for_speed_p (cfun)\n    && SSE_REG_P (operands[0])\n    && (!SSE_REG_P (operands[1])\n-       || REGNO (operands[0]) != REGNO (operands[1]))\"\n+       || REGNO (operands[0]) != REGNO (operands[1]))\n+   && (!EXT_REX_SSE_REG_P (operands[0])\n+       || TARGET_AVX512VL)\"\n   [(set (match_dup 0)\n \t(vec_merge:V4SF\n \t  (vec_duplicate:V4SF\n@@ -4971,7 +4977,9 @@\n    && optimize_function_for_speed_p (cfun)\n    && SSE_REG_P (operands[0])\n    && (!SSE_REG_P (operands[1])\n-       || REGNO (operands[0]) != REGNO (operands[1]))\"\n+       || REGNO (operands[0]) != REGNO (operands[1]))\n+   && (!EXT_REX_SSE_REG_P (operands[0])\n+       || TARGET_AVX512VL)\"\n   [(set (match_dup 0)\n         (vec_merge:V2DF\n           (float_extend:V2DF\n@@ -13955,9 +13963,9 @@\n })\n \n (define_insn \"*sqrt<mode>2_sse\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=v\")\n \t(sqrt:MODEF\n-\t  (match_operand:MODEF 1 \"nonimmediate_operand\" \"xm\")))]\n+\t  (match_operand:MODEF 1 \"nonimmediate_operand\" \"vm\")))]\n   \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"\n   \"%vsqrt<ssemodesuffix>\\t{%1, %d0|%d0, %1}\"\n   [(set_attr \"type\" \"sse\")\n@@ -16919,17 +16927,17 @@\n \t (UNSPEC_IEEE_MIN \"min\")])\n \n (define_insn \"*ieee_s<ieee_maxmin><mode>3\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=x,v\")\n \t(unspec:MODEF\n-\t  [(match_operand:MODEF 1 \"register_operand\" \"0,x\")\n-\t   (match_operand:MODEF 2 \"nonimmediate_operand\" \"xm,xm\")]\n+\t  [(match_operand:MODEF 1 \"register_operand\" \"0,v\")\n+\t   (match_operand:MODEF 2 \"nonimmediate_operand\" \"xm,vm\")]\n \t  IEEE_MAXMIN))]\n   \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"\n   \"@\n    <ieee_maxmin><ssemodesuffix>\\t{%2, %0|%0, %2}\n    v<ieee_maxmin><ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n-   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"prefix\" \"orig,maybe_evex\")\n    (set_attr \"type\" \"sseadd\")\n    (set_attr \"mode\" \"<MODE>\")])\n "}]}