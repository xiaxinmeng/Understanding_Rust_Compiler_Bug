{"sha": "325fe81618c822b8cac4fd31c1ec57066ef338cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI1ZmU4MTYxOGM4MjJiOGNhYzRmZDMxYzFlYzU3MDY2ZWYzMzhjZg==", "commit": {"author": {"name": "Yury Gribov", "email": "tetra2005@gmail.com", "date": "2017-07-21T19:48:51Z"}, "committer": {"name": "Yury Gribov", "email": "ygribov@gcc.gnu.org", "date": "2017-07-21T19:48:51Z"}, "message": "re PR middle-end/56727 (Recursive call goes through the PLT unnecessarily)\n\n2017-07-21  Yury Gribov  <tetra2005@gmail.com>\n\n\tPR middle-end/56727\n\t* ipa-visibility (function_and_variable_visibility): Convert\n\trecursive PLT call to direct call if appropriate.\n\n\t* gcc.dg/pr56727-1.c: New test.\n\t* gcc.dg/pr56727-2.c: New test.\n\nFrom-SVN: r250442", "tree": {"sha": "d8eef4564991b0292b0db768be536f9bd4d883cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8eef4564991b0292b0db768be536f9bd4d883cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/325fe81618c822b8cac4fd31c1ec57066ef338cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/325fe81618c822b8cac4fd31c1ec57066ef338cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/325fe81618c822b8cac4fd31c1ec57066ef338cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/325fe81618c822b8cac4fd31c1ec57066ef338cf/comments", "author": {"login": "yugr", "id": 1101391, "node_id": "MDQ6VXNlcjExMDEzOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1101391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yugr", "html_url": "https://github.com/yugr", "followers_url": "https://api.github.com/users/yugr/followers", "following_url": "https://api.github.com/users/yugr/following{/other_user}", "gists_url": "https://api.github.com/users/yugr/gists{/gist_id}", "starred_url": "https://api.github.com/users/yugr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yugr/subscriptions", "organizations_url": "https://api.github.com/users/yugr/orgs", "repos_url": "https://api.github.com/users/yugr/repos", "events_url": "https://api.github.com/users/yugr/events{/privacy}", "received_events_url": "https://api.github.com/users/yugr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d5c125ca0cd017c96b5996b8e934a5d755f5a577", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5c125ca0cd017c96b5996b8e934a5d755f5a577", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5c125ca0cd017c96b5996b8e934a5d755f5a577"}], "stats": {"total": 82, "additions": 82, "deletions": 0}, "files": [{"sha": "55937a8a34439174b41d30554fcf247acaf73be3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/325fe81618c822b8cac4fd31c1ec57066ef338cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/325fe81618c822b8cac4fd31c1ec57066ef338cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=325fe81618c822b8cac4fd31c1ec57066ef338cf", "patch": "@@ -1,3 +1,9 @@\n+2017-07-21  Yury Gribov  <tetra2005@gmail.com>\n+\n+\tPR middle-end/56727\n+\t* ipa-visibility (function_and_variable_visibility): Convert\n+\trecursive PLT call to direct call if appropriate.\n+\n 2017-07-21  Andrew Pinski  <apinski@cavium.com>\n \n \t* tree-ssa-sccvn.c (vn_nary_op_eq): Check BIT_INSERT_EXPR's"}, {"sha": "21321703dbbc3329d1a25b18e8a20b49160c8267", "filename": "gcc/ipa-visibility.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/325fe81618c822b8cac4fd31c1ec57066ef338cf/gcc%2Fipa-visibility.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/325fe81618c822b8cac4fd31c1ec57066ef338cf/gcc%2Fipa-visibility.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-visibility.c?ref=325fe81618c822b8cac4fd31c1ec57066ef338cf", "patch": "@@ -83,6 +83,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cgraph.h\"\n #include \"calls.h\"\n #include \"varasm.h\"\n+#include \"ipa-utils.h\"\n \n /* Return true when NODE can not be local. Worker for cgraph_local_node_p.  */\n \n@@ -617,6 +618,36 @@ function_and_variable_visibility (bool whole_program)\n   /* All aliases should be procssed at this point.  */\n   gcc_checking_assert (!alias_pairs || !alias_pairs->length ());\n \n+  FOR_EACH_DEFINED_FUNCTION (node)\n+    {\n+      if (node->get_availability () != AVAIL_INTERPOSABLE\n+\t  || DECL_EXTERNAL (node->decl)\n+\t  || node->has_aliases_p ())\n+\tcontinue;\n+\n+      cgraph_node *alias = 0;\n+      for (cgraph_edge *e = node->callees; e; e = e->next_callee)\n+\t{\n+\t  /* Recursive function calls usually can't be interposed.  */\n+\n+\t  if (!e->recursive_p ())\n+\t    continue;\n+\n+\t  if (!alias)\n+\t    { \n+\t      alias = dyn_cast<cgraph_node *> (node->noninterposable_alias ());\n+\t      gcc_assert (alias && alias != node);\n+\t    }\n+\n+\t  e->redirect_callee (alias);\n+\t  if (gimple_has_body_p (e->caller->decl))\n+\t    { \n+\t      push_cfun (DECL_STRUCT_FUNCTION (e->caller->decl));\n+\t      e->redirect_call_stmt_to_callee ();\n+\t      pop_cfun (); \n+\t    }\n+\t}\n+    }\n   FOR_EACH_FUNCTION (node)\n     {\n       int flags = flags_from_decl_or_type (node->decl);"}, {"sha": "6ee65b15e974b7c0603e920e2de09e9da18bdc25", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/325fe81618c822b8cac4fd31c1ec57066ef338cf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/325fe81618c822b8cac4fd31c1ec57066ef338cf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=325fe81618c822b8cac4fd31c1ec57066ef338cf", "patch": "@@ -1,3 +1,9 @@\n+2017-07-21  Yury Gribov  <tetra2005@gmail.com>\n+\n+\tPR middle-end/56727\n+\t* gcc.dg/pr56727-1.c: New test.\n+\t* gcc.dg/pr56727-2.c: New test.\n+\n 2017-07-21  Steven Munroe  <munroesj@gcc.gnu.org>\n \n \t* gcc.target/powerpc/mmx-check.h: New file."}, {"sha": "ffc133545e7973c62713659cab6eafe0046a547d", "filename": "gcc/testsuite/gcc.dg/pr56727-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/325fe81618c822b8cac4fd31c1ec57066ef338cf/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56727-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/325fe81618c822b8cac4fd31c1ec57066ef338cf/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56727-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56727-1.c?ref=325fe81618c822b8cac4fd31c1ec57066ef338cf", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile { target fpic } } */\n+/* { dg-options \"-O2 -fPIC\" } */\n+/* { dg-final { scan-assembler-not \"@(PLT|plt)\" { target i?86-*-* x86_64-*-* powerpc*-*-* } } } */\n+\n+#define define_func(type) \\\n+  void f_ ## type (type b) { f_ ## type (0); } \\\n+  void __attribute__((noinline, noclone)) f_noinline_ ## type (type b) \\\n+  { f_noinline_ ## type (0); }\n+\n+define_func(char)\n+define_func(short)\n+define_func(int)\n+define_func(long)\n+\n+int foo(int n)\n+{\n+  return (n == 1 || n == 2) ? 1 : foo(n-1) * foo(n-2);\n+}\n+\n+int __attribute__((noinline, noclone)) foo_noinline(int n)\n+{\n+  return (n == 1 || n == 2) ? 1 : foo_noinline(n-1) * foo_noinline(n-2);\n+}"}, {"sha": "a285d5760eb11cc49cbe739d645329f989080bc8", "filename": "gcc/testsuite/gcc.dg/pr56727-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/325fe81618c822b8cac4fd31c1ec57066ef338cf/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56727-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/325fe81618c822b8cac4fd31c1ec57066ef338cf/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56727-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56727-2.c?ref=325fe81618c822b8cac4fd31c1ec57066ef338cf", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target fpic } } */\n+/* { dg-options \"-O2 -fPIC\" } */\n+/* { dg-final { scan-assembler \"@(PLT|plt)\" { target i?86-*-* x86_64-*-* powerpc*-*-* } } } */\n+\n+__attribute__((noinline, noclone))\n+void f (short b)\n+{\n+  f (0);\n+}\n+\n+static void g (short) __attribute__ ((alias (\"f\")));\n+\n+void h ()\n+{\n+  g (0);\n+}"}]}