{"sha": "3dac68b99e0aa1503c2743f70e67a84401002a45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RhYzY4Yjk5ZTBhYTE1MDNjMjc0M2Y3MGU2N2E4NDQwMTAwMmE0NQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2011-01-14T03:27:32Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-01-14T03:27:32Z"}, "message": "Move clearing of flag_strict_aliasing to gcc interface.\n\nFrom-SVN: r168774", "tree": {"sha": "01bf0d7874de7304a90a873d92d8904544ec31c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01bf0d7874de7304a90a873d92d8904544ec31c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dac68b99e0aa1503c2743f70e67a84401002a45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dac68b99e0aa1503c2743f70e67a84401002a45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dac68b99e0aa1503c2743f70e67a84401002a45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dac68b99e0aa1503c2743f70e67a84401002a45/comments", "author": null, "committer": null, "parents": [{"sha": "632469d01e0652c465f9074d2ec7f5de1cb7dac9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/632469d01e0652c465f9074d2ec7f5de1cb7dac9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/632469d01e0652c465f9074d2ec7f5de1cb7dac9"}], "stats": {"total": 66, "additions": 46, "deletions": 20}, "files": [{"sha": "6354ce5ea12d747908aace2de528117b422810ac", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dac68b99e0aa1503c2743f70e67a84401002a45/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dac68b99e0aa1503c2743f70e67a84401002a45/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=3dac68b99e0aa1503c2743f70e67a84401002a45", "patch": "@@ -1,3 +1,12 @@\n+2011-01-13  Ian Lance Taylor  <iant@google.com>\n+\n+\t* go-backend.c: Include \"rtl.h\" and \"target.h\".\n+\t(go_imported_unsafe): New function.\n+\t* go-c.h (go_imported_unsafe): Declare.\n+\t* Make-lang.in (go/go-backend.o): Depend on $(RTL_H).\n+\t(go/gogo-tree.o): Remove dependency on $(RTL_H).\n+\t(go/unsafe.o): Depend on $(GO_C_H).\n+\n 2010-12-31  Joern Rennecke  <amylaar@spamcop.net>\n \n \tPR go/47113"}, {"sha": "a8c3aa63fcf011797d4c48ea8be97af7c5ca3050", "filename": "gcc/go/Make-lang.in", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dac68b99e0aa1503c2743f70e67a84401002a45/gcc%2Fgo%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dac68b99e0aa1503c2743f70e67a84401002a45/gcc%2Fgo%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FMake-lang.in?ref=3dac68b99e0aa1503c2743f70e67a84401002a45", "patch": "@@ -1,6 +1,6 @@\n # Make-lang.in -- Top level -*- makefile -*- fragment for gcc Go frontend.\n \n-# Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n+# Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n \n # This file is part of GCC.\n \n@@ -221,7 +221,7 @@ GO_EXPRESSIONS_H = go/gofrontend/expressions.h go/gofrontend/operator.h\n GO_IMPORT_H = go/gofrontend/import.h go/gofrontend/export.h\n \n go/go-backend.o: go/go-backend.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-\t$(TREE_H) $(TM_H) $(TM_P_H)\n+\t$(TM_H) $(RTL_H) $(TREE_H) $(TM_P_H) $(TARGET_H)\n \n go/go-lang.o: go/go-lang.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(OPTS_H) \\\n \t\t$(TREE_H) $(GIMPLE_H) $(GGC_H) $(TOPLEV_H) debug.h options.h \\\n@@ -254,7 +254,7 @@ go/go-dump.o: go/gofrontend/go-dump.cc $(GO_SYSTEM_H) $(GO_C_H) \\\n \tgo/gofrontend/go-dump.h\n go/gogo-tree.o: go/gofrontend/gogo-tree.cc $(GO_SYSTEM_H) $(TOPLEV_H) \\\n \t$(TREE_H) $(GIMPLE_H) tree-iterator.h $(CGRAPH_H) langhooks.h \\\n-\tconvert.h output.h $(DIAGNOSTIC_H) $(RTL_H) $(GO_TYPES_H) \\\n+\tconvert.h output.h $(DIAGNOSTIC_H) $(GO_TYPES_H) \\\n \t$(GO_EXPRESSIONS_H) $(GO_STATEMENTS_H) $(GO_GOGO_H)\n go/gogo.o: go/gofrontend/gogo.cc $(GO_SYSTEM_H) $(GO_C_H) \\\n \tgo/gofrontend/go-dump.h $(GO_LEX_H) $(GO_TYPES_H) $(GO_STATEMENTS_H) \\\n@@ -277,4 +277,5 @@ go/types.o: go/gofrontend/types.cc $(GO_SYSTEM_H) $(TOPLEV_H) intl.h $(TREE_H) \\\n \t$(GIMPLE_H) $(REAL_H) convert.h $(GO_C_H) $(GO_GOGO_H) \\\n \tgo/gofrontend/operator.h $(GO_EXPRESSIONS_H) $(GO_STATEMENTS_H) \\\n \tgo/gofrontend/export.h $(GO_IMPORT_H) $(GO_TYPES_H)\n-go/unsafe.o: go/gofrontend/unsafe.cc $(GO_SYSTEM_H) $(GO_TYPES_H) $(GO_GOGO_H)\n+go/unsafe.o: go/gofrontend/unsafe.cc $(GO_SYSTEM_H) $(GO_C_H) $(GO_TYPES_H) \\\n+\t$(GO_GOGO_H)"}, {"sha": "5ecc99bb18ebef02c1581999aa3d270b4003fcca", "filename": "gcc/go/go-backend.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dac68b99e0aa1503c2743f70e67a84401002a45/gcc%2Fgo%2Fgo-backend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dac68b99e0aa1503c2743f70e67a84401002a45/gcc%2Fgo%2Fgo-backend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-backend.c?ref=3dac68b99e0aa1503c2743f70e67a84401002a45", "patch": "@@ -1,5 +1,5 @@\n /* go-backend.c -- Go frontend interface to gcc backend.\n-   Copyright (C) 2010 Free Software Foundation, Inc.\n+   Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -20,9 +20,11 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n-#include \"tree.h\"\n #include \"tm.h\"\n+#include \"rtl.h\"\n+#include \"tree.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n \n #include \"go-c.h\"\n \n@@ -70,3 +72,22 @@ go_trampoline_info (unsigned int *size, unsigned int *alignment)\n   *size = TRAMPOLINE_SIZE;\n   *alignment = TRAMPOLINE_ALIGNMENT;\n }\n+\n+/* This is called by the Go frontend proper if the unsafe package was\n+   imported.  When that happens we can not do type-based alias\n+   analysis.  */\n+\n+void\n+go_imported_unsafe (void)\n+{\n+  flag_strict_aliasing = false;\n+\n+  /* This is a real hack.  init_varasm_once has already grabbed an\n+     alias set, which we don't want when we aren't doing strict\n+     aliasing.  We reinitialize to make it do it again.  This should\n+     be OK in practice since we haven't really done anything yet.  */\n+  init_varasm_once ();\n+\n+  /* Let the backend know that the options have changed.  */\n+  targetm.override_options_after_change ();\n+}"}, {"sha": "a45151783cdd24cbf9099d79a6854c3788eae222", "filename": "gcc/go/go-c.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dac68b99e0aa1503c2743f70e67a84401002a45/gcc%2Fgo%2Fgo-c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dac68b99e0aa1503c2743f70e67a84401002a45/gcc%2Fgo%2Fgo-c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-c.h?ref=3dac68b99e0aa1503c2743f70e67a84401002a45", "patch": "@@ -1,5 +1,5 @@\n /* go-c.h -- Header file for go frontend gcc C interface.\n-   Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n+   Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -65,6 +65,8 @@ extern unsigned int go_field_alignment (tree);\n \n extern void go_trampoline_info (unsigned int *size, unsigned int *alignment);\n \n+extern void go_imported_unsafe (void);\n+\n #if defined(__cplusplus) && !defined(ENABLE_BUILD_WITH_CXX)\n } /* End extern \"C\".  */\n #endif"}, {"sha": "ccd17c64edb1ea7ea3950c0fb9f34dc5fb4906a8", "filename": "gcc/go/gofrontend/gogo-tree.cc", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dac68b99e0aa1503c2743f70e67a84401002a45/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dac68b99e0aa1503c2743f70e67a84401002a45/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc?ref=3dac68b99e0aa1503c2743f70e67a84401002a45", "patch": "@@ -22,7 +22,6 @@ extern \"C\"\n #include \"convert.h\"\n #include \"output.h\"\n #include \"diagnostic.h\"\n-#include \"rtl.h\"\n \n #ifndef ENABLE_BUILD_WITH_CXX\n }\n@@ -810,17 +809,6 @@ Gogo::write_globals()\n \n   // Pass everything back to the middle-end.\n \n-  if (this->imported_unsafe_)\n-    {\n-      // Importing the \"unsafe\" package automatically disables TBAA.\n-      flag_strict_aliasing = false;\n-\n-      // This is a real hack.  init_varasm_once has already grabbed an\n-      // alias set, which we don't want when we aren't going strict\n-      // aliasing.  We reinitialize to make it do it again.  FIXME.\n-      init_varasm_once();\n-    }\n-\n   wrapup_global_declarations(vec, count);\n \n   cgraph_finalize_compilation_unit();"}, {"sha": "e219f61edae79427c713ead47574ee24f53fe4f2", "filename": "gcc/go/gofrontend/unsafe.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dac68b99e0aa1503c2743f70e67a84401002a45/gcc%2Fgo%2Fgofrontend%2Funsafe.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dac68b99e0aa1503c2743f70e67a84401002a45/gcc%2Fgo%2Fgofrontend%2Funsafe.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Funsafe.cc?ref=3dac68b99e0aa1503c2743f70e67a84401002a45", "patch": "@@ -6,6 +6,7 @@\n \n #include \"go-system.h\"\n \n+#include \"go-c.h\"\n #include \"types.h\"\n #include \"gogo.h\"\n \n@@ -130,5 +131,9 @@ Gogo::import_unsafe(const std::string& local_name, bool is_local_name_exported,\n   if (add_to_globals)\n     this->add_named_object(no);\n \n-  this->imported_unsafe_ = true;\n+  if (!this->imported_unsafe_)\n+    {\n+      go_imported_unsafe();\n+      this->imported_unsafe_ = true;\n+    }\n }"}]}