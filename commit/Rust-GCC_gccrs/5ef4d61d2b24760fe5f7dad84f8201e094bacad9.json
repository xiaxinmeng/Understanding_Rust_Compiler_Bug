{"sha": "5ef4d61d2b24760fe5f7dad84f8201e094bacad9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVmNGQ2MWQyYjI0NzYwZmU1ZjdkYWQ4NGY4MjAxZTA5NGJhY2FkOQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2017-06-30T06:46:42Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-06-30T06:46:42Z"}, "message": "profile-count.h: Fix typos and whitespace issues.\n\ngcc/ChangeLog:\n\n2017-06-30  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* profile-count.h (enum profile_quality): Fix typos and whitespace\n\tissues.\n\nFrom-SVN: r249830", "tree": {"sha": "2e9c0e8c5aabb7ab6255e278c7976c9d24a0f304", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e9c0e8c5aabb7ab6255e278c7976c9d24a0f304"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ef4d61d2b24760fe5f7dad84f8201e094bacad9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ef4d61d2b24760fe5f7dad84f8201e094bacad9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ef4d61d2b24760fe5f7dad84f8201e094bacad9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ef4d61d2b24760fe5f7dad84f8201e094bacad9/comments", "author": null, "committer": null, "parents": [{"sha": "8f746f8c89b70a891b6892e6189247678a5445a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f746f8c89b70a891b6892e6189247678a5445a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f746f8c89b70a891b6892e6189247678a5445a7"}], "stats": {"total": 51, "additions": 28, "deletions": 23}, "files": [{"sha": "ebb0bf32bdc720aaa0ebaf270b942cf87358ae16", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef4d61d2b24760fe5f7dad84f8201e094bacad9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef4d61d2b24760fe5f7dad84f8201e094bacad9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ef4d61d2b24760fe5f7dad84f8201e094bacad9", "patch": "@@ -1,3 +1,8 @@\n+2017-06-30  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* profile-count.h (enum profile_quality): Fix typos and whitespace\n+\tissues.\n+\n 2017-06-30  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/s390.c (s390_expand_setmem): Adjust to the new data"}, {"sha": "6a1031531ff8a15134fe7b0c6680e6347e3dac88", "filename": "gcc/profile-count.h", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef4d61d2b24760fe5f7dad84f8201e094bacad9/gcc%2Fprofile-count.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef4d61d2b24760fe5f7dad84f8201e094bacad9/gcc%2Fprofile-count.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile-count.h?ref=5ef4d61d2b24760fe5f7dad84f8201e094bacad9", "patch": "@@ -21,15 +21,15 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_PROFILE_COUNT_H\n #define GCC_PROFILE_COUNT_H\n \n-/* Quality of the proflie count.  Because gengtype does not support enums\n-   inside of clases, this is in global namespace.  */\n+/* Quality of the profile count.  Because gengtype does not support enums\n+   inside of classes, this is in global namespace.  */\n enum profile_quality {\n   /* Profile is based on static branch prediction heuristics.  It may or may\n      not reflect the reality.  */\n   profile_guessed = 0,\n   /* Profile was determined by autofdo.  */\n   profile_afdo = 1,\n-  /* Profile was originally based on feedback but it was adjusted \n+  /* Profile was originally based on feedback but it was adjusted\n      by code duplicating optimization.  It may not precisely reflect the\n      particular code path.  */\n   profile_adjusted = 2,\n@@ -43,13 +43,13 @@ enum profile_quality {\n \n #define RDIV(X,Y) (((X) + (Y) / 2) / (Y))\n \n-/* Data type to hold probabilities.  It implement fixed point arithmetics\n+/* Data type to hold probabilities.  It implements fixed point arithmetics\n    with capping so probability is always in range [0,1] and scaling requiring\n    values greater than 1 needs to be represented otherwise.\n \n    In addition to actual value the quality of profile is tracked and propagated\n    through all operations.  Special value UNINITIALIZED is used for probabilities\n-   that has not been detemrined yet (for example bacause of\n+   that has not been determined yet (for example bacause of\n    -fno-guess-branch-probability)\n \n    Typically probabilities are derived from profile feedback (via\n@@ -68,15 +68,15 @@ enum profile_quality {\n      - always\n \n    Named probabilities except for never/always are assumed to be statically\n-   guessed and thus not necessarily acurate.  The difference between never\n-   and guessedn never is that the first one should be used only in case that\n+   guessed and thus not necessarily accurate.  The difference between never\n+   and guessed_never is that the first one should be used only in case that\n    well behaving program will very likely not execute the \"never\" path.\n    For example if the path is going to abort () call or it exception handling.\n \n-   Alawyas and guessted_always probabilities are symmetric.\n+   Always and guessed_always probabilities are symmetric.\n \n    For legacy code we support conversion to/from REG_BR_PROB_BASE based fixpoint\n-   integer arithmetics. Once the code is converted to branch probabiitlies,\n+   integer arithmetics. Once the code is converted to branch probabilities,\n    these conversions will probably go away because they are lossy.\n */\n \n@@ -175,7 +175,7 @@ class GTY((user)) profile_probability\n     }\n \n   /* Conversion from and to REG_BR_PROB_BASE integer fixpoint arithmetics.\n-     this is mostly to support legacy code and hsould go away.  */\n+     this is mostly to support legacy code and should go away.  */\n   static profile_probability from_reg_br_prob_base (int v)\n     {\n       profile_probability ret;\n@@ -199,7 +199,7 @@ class GTY((user)) profile_probability\n       if (val1 > val2)\n \tret.m_val = max_probability;\n       else\n-        ret.m_val = RDIV (val1 * max_probability, val2);\n+\tret.m_val = RDIV (val1 * max_probability, val2);\n       ret.m_quality = profile_precise;\n       return ret;\n     }\n@@ -237,7 +237,7 @@ class GTY((user)) profile_probability\n       else\n \t{\n \t  m_val = MIN ((uint32_t)(m_val + other.m_val), max_probability);\n-          m_quality = MIN (m_quality, other.m_quality);\n+\t  m_quality = MIN (m_quality, other.m_quality);\n \t}\n       return *this;\n     }\n@@ -263,7 +263,7 @@ class GTY((user)) profile_probability\n       else\n \t{\n \t  m_val = m_val >= other.m_val ? m_val - other.m_val : 0;\n-          m_quality = MIN (m_quality, other.m_quality);\n+\t  m_quality = MIN (m_quality, other.m_quality);\n \t}\n       return *this;\n     }\n@@ -288,8 +288,8 @@ class GTY((user)) profile_probability\n \treturn *this = profile_probability::uninitialized ();\n       else\n \t{\n-          m_val = RDIV ((uint64_t)m_val * other.m_val, max_probability);\n-          m_quality = MIN (m_quality, other.m_quality);\n+\t  m_val = RDIV ((uint64_t)m_val * other.m_val, max_probability);\n+\t  m_quality = MIN (m_quality, other.m_quality);\n \t}\n       return *this;\n     }\n@@ -307,7 +307,7 @@ class GTY((user)) profile_probability\n       else\n \t{\n \t  gcc_checking_assert (other.m_val);\n-          ret.m_val = MIN (RDIV ((uint64_t)m_val * max_probability,\n+\t  ret.m_val = MIN (RDIV ((uint64_t)m_val * max_probability,\n \t\t\t\t other.m_val),\n \t\t\t   max_probability);\n \t}\n@@ -329,11 +329,11 @@ class GTY((user)) profile_probability\n \t  else\n \t    {\n \t      gcc_checking_assert (other.m_val);\n-              m_val = MIN (RDIV ((uint64_t)m_val * max_probability,\n+\t      m_val = MIN (RDIV ((uint64_t)m_val * max_probability,\n \t\t\t\t other.m_val),\n \t\t\t   max_probability);\n \t    }\n-          m_quality = MIN (m_quality, other.m_quality);\n+\t  m_quality = MIN (m_quality, other.m_quality);\n \t}\n       return *this;\n     }\n@@ -591,7 +591,7 @@ class GTY(()) profile_count\n       else\n \t{\n \t  m_val += other.m_val;\n-          m_quality = MIN (m_quality, other.m_quality);\n+\t  m_quality = MIN (m_quality, other.m_quality);\n \t}\n       return *this;\n     }\n@@ -615,7 +615,7 @@ class GTY(()) profile_count\n       else\n \t{\n \t  m_val = m_val >= other.m_val ? m_val - other.m_val: 0;\n-          m_quality = MIN (m_quality, other.m_quality);\n+\t  m_quality = MIN (m_quality, other.m_quality);\n \t}\n       return *this;\n     }\n@@ -727,9 +727,9 @@ class GTY(()) profile_count\n       profile_count ret;\n       /* Take care for overflows!  */\n       if (num.m_val < max_safe_multiplier || m_val < max_safe_multiplier)\n-        ret.m_val = RDIV (m_val * num.m_val, den.m_val);\n+\tret.m_val = RDIV (m_val * num.m_val, den.m_val);\n       else\n-        ret.m_val = RDIV (m_val * RDIV (num.m_val * max_safe_multiplier,\n+\tret.m_val = RDIV (m_val * RDIV (num.m_val * max_safe_multiplier,\n \t\t\t\t\tden.m_val), max_safe_multiplier);\n       ret.m_quality = MIN (m_quality, profile_adjusted);\n       return ret;\n@@ -748,7 +748,7 @@ class GTY(()) profile_count\n       if (overall < m_val)\n \tret.m_val = profile_probability::max_probability;\n       else\n-        ret.m_val = RDIV (m_val * profile_probability::max_probability,\n+\tret.m_val = RDIV (m_val * profile_probability::max_probability,\n \t\t\t  overall.m_val);\n       ret.m_quality = MIN (m_quality, overall.m_quality);\n       return ret;"}]}