{"sha": "7a9c7d01fd7c06dae1757dc50b2d5eb753619146", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E5YzdkMDFmZDdjMDZkYWUxNzU3ZGM1MGIyZDVlYjc1MzYxOTE0Ng==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "ook@ucw.cz", "date": "2007-09-08T06:46:53Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2007-09-08T06:46:53Z"}, "message": "re PR tree-optimization/32183 (reassoc2 can more extra calculations into a loop)\n\n2007-09-07  Zdenek Dvorak  <ook@ucw.cz>\n\n\tPR tree-optimization/32183\n\t* Makefile.in (tree-ssa-reassoc.o): Also depend on $(CFGLOOP_H).\n\n\t* tree-ssa-reassoc.c: Include cfgloop.h.\n\t(is_reassociable_op): Add a loop argument and return true only\n\tfor inside loop.\n\t(linearize_expr): Updated.\n\t(should_break_up_subtract): Likewise.\n\t(linearize_expr_tree): Likewise.\n\t(init_reassoc): Call loop_optimizer_init with\n\tAVOID_CFG_MODIFICATIONS.  Remove calculate_dominance_info call\n\twith CDI_DOMINATORS.\n\t(fini_reassoc): Call loop_optimizer_finalize.\n\nFrom-SVN: r128262", "tree": {"sha": "db33abdfbd16a8f9e8335c12bce9877a851b9dcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db33abdfbd16a8f9e8335c12bce9877a851b9dcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a9c7d01fd7c06dae1757dc50b2d5eb753619146", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a9c7d01fd7c06dae1757dc50b2d5eb753619146", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a9c7d01fd7c06dae1757dc50b2d5eb753619146", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a9c7d01fd7c06dae1757dc50b2d5eb753619146/comments", "author": {"login": "rakdver", "id": 20416833, "node_id": "MDQ6VXNlcjIwNDE2ODMz", "avatar_url": "https://avatars.githubusercontent.com/u/20416833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rakdver", "html_url": "https://github.com/rakdver", "followers_url": "https://api.github.com/users/rakdver/followers", "following_url": "https://api.github.com/users/rakdver/following{/other_user}", "gists_url": "https://api.github.com/users/rakdver/gists{/gist_id}", "starred_url": "https://api.github.com/users/rakdver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rakdver/subscriptions", "organizations_url": "https://api.github.com/users/rakdver/orgs", "repos_url": "https://api.github.com/users/rakdver/repos", "events_url": "https://api.github.com/users/rakdver/events{/privacy}", "received_events_url": "https://api.github.com/users/rakdver/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a7b4caa2fd212c8e5aa1b1ba6ff432944f13bde0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7b4caa2fd212c8e5aa1b1ba6ff432944f13bde0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7b4caa2fd212c8e5aa1b1ba6ff432944f13bde0"}], "stats": {"total": 63, "additions": 47, "deletions": 16}, "files": [{"sha": "22c3c6a3536650cfd49e8b52aab145c56fc03677", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9c7d01fd7c06dae1757dc50b2d5eb753619146/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9c7d01fd7c06dae1757dc50b2d5eb753619146/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a9c7d01fd7c06dae1757dc50b2d5eb753619146", "patch": "@@ -1,3 +1,19 @@\n+2007-09-07  Zdenek Dvorak  <ook@ucw.cz>\n+\n+\tPR tree-optimization/32183\n+\t* Makefile.in (tree-ssa-reassoc.o): Also depend on $(CFGLOOP_H).\n+\n+\t* tree-ssa-reassoc.c: Include cfgloop.h.\n+\t(is_reassociable_op): Add a loop argument and return true only\n+\tfor inside loop.\n+\t(linearize_expr): Updated.\n+\t(should_break_up_subtract): Likewise.\n+\t(linearize_expr_tree): Likewise.\n+\t(init_reassoc): Call loop_optimizer_init with\n+\tAVOID_CFG_MODIFICATIONS.  Remove calculate_dominance_info call\n+\twith CDI_DOMINATORS.\n+\t(fini_reassoc): Call loop_optimizer_finalize.\n+\n 2007-09-07  Sterling Augustine  <sterling@tensilica.com>\n \n \t* config/xtensa/lib2funcs.S (__xtensa_sync_caches): Use an ISYNC even"}, {"sha": "724c452cab8b29a7955ba420b114aae64fc11018", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9c7d01fd7c06dae1757dc50b2d5eb753619146/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9c7d01fd7c06dae1757dc50b2d5eb753619146/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7a9c7d01fd7c06dae1757dc50b2d5eb753619146", "patch": "@@ -2201,7 +2201,7 @@ tree-ssa-reassoc.o : tree-ssa-reassoc.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(GGC_H) $(DIAGNOSTIC_H) errors.h $(TIMEVAR_H) \\\n    $(TM_H) coretypes.h $(TREE_DUMP_H) tree-pass.h $(FLAGS_H) tree-iterator.h\\\n    $(BASIC_BLOCK_H) $(TREE_GIMPLE_H) $(TREE_INLINE_H) vec.h \\\n-   alloc-pool.h pointer-set.h\n+   alloc-pool.h pointer-set.h $(CFGLOOP_H)\n tree-optimize.o : tree-optimize.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) $(GGC_H) output.h $(DIAGNOSTIC_H) \\\n    $(FLAGS_H) $(TIMEVAR_H) $(TM_H) coretypes.h $(TREE_DUMP_H) toplev.h \\"}, {"sha": "200088d7dd43871f2b10929e5e6ea49f40204fed", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9c7d01fd7c06dae1757dc50b2d5eb753619146/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9c7d01fd7c06dae1757dc50b2d5eb753619146/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=7a9c7d01fd7c06dae1757dc50b2d5eb753619146", "patch": "@@ -38,6 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"vec.h\"\n #include \"langhooks.h\"\n #include \"pointer-set.h\"\n+#include \"cfgloop.h\"\n \n /*  This is a simple global reassociation pass.  It is, in part, based\n     on the LLVM pass of the same name (They do some things more/less\n@@ -344,13 +345,21 @@ add_to_ops_vec (VEC(operand_entry_t, heap) **ops, tree op)\n }\n \n /* Return true if STMT is reassociable operation containing a binary\n-   operation with tree code CODE.  */\n+   operation with tree code CODE, and is inside LOOP.  */\n \n static bool\n-is_reassociable_op (tree stmt, enum tree_code code)\n+is_reassociable_op (tree stmt, enum tree_code code, struct loop *loop)\n {\n-  if (!IS_EMPTY_STMT (stmt)\n-      && TREE_CODE (stmt) == GIMPLE_MODIFY_STMT\n+  basic_block bb;\n+\n+  if (IS_EMPTY_STMT (stmt))\n+    return false;\n+\n+  bb = bb_for_stmt (stmt);\n+  if (!flow_bb_inside_loop_p (loop, bb))\n+    return false;\n+\n+  if (TREE_CODE (stmt) == GIMPLE_MODIFY_STMT\n       && TREE_CODE (GIMPLE_STMT_OPERAND (stmt, 1)) == code\n       && has_single_use (GIMPLE_STMT_OPERAND (stmt, 0)))\n     return true;\n@@ -929,9 +938,10 @@ linearize_expr (tree stmt)\n   tree binrhs = SSA_NAME_DEF_STMT (TREE_OPERAND (rhs, 1));\n   tree binlhs = SSA_NAME_DEF_STMT (TREE_OPERAND (rhs, 0));\n   tree newbinrhs = NULL_TREE;\n+  struct loop *loop = loop_containing_stmt (stmt);\n \n-  gcc_assert (is_reassociable_op (binlhs, TREE_CODE (rhs))\n-\t      && is_reassociable_op (binrhs, TREE_CODE (rhs)));\n+  gcc_assert (is_reassociable_op (binlhs, TREE_CODE (rhs), loop)\n+\t      && is_reassociable_op (binrhs, TREE_CODE (rhs), loop));\n \n   bsinow = bsi_for_stmt (stmt);\n   bsirhs = bsi_for_stmt (binrhs);\n@@ -959,9 +969,8 @@ linearize_expr (tree stmt)\n   TREE_VISITED (stmt) = 1;\n \n   /* Tail recurse on the new rhs if it still needs reassociation.  */\n-  if (newbinrhs && is_reassociable_op (newbinrhs, rhscode))\n+  if (newbinrhs && is_reassociable_op (newbinrhs, rhscode, loop))\n     linearize_expr (stmt);\n-\n }\n \n /* If LHS has a single immediate use that is a GIMPLE_MODIFY_STMT, return\n@@ -1046,13 +1055,14 @@ should_break_up_subtract (tree stmt)\n   tree binlhs = TREE_OPERAND (rhs, 0);\n   tree binrhs = TREE_OPERAND (rhs, 1);\n   tree immusestmt;\n+  struct loop *loop = loop_containing_stmt (stmt);\n \n   if (TREE_CODE (binlhs) == SSA_NAME\n-      && is_reassociable_op (SSA_NAME_DEF_STMT (binlhs), PLUS_EXPR))\n+      && is_reassociable_op (SSA_NAME_DEF_STMT (binlhs), PLUS_EXPR, loop))\n     return true;\n \n   if (TREE_CODE (binrhs) == SSA_NAME\n-      && is_reassociable_op (SSA_NAME_DEF_STMT (binrhs), PLUS_EXPR))\n+      && is_reassociable_op (SSA_NAME_DEF_STMT (binrhs), PLUS_EXPR, loop))\n     return true;\n \n   if (TREE_CODE (lhs) == SSA_NAME\n@@ -1096,19 +1106,20 @@ linearize_expr_tree (VEC(operand_entry_t, heap) **ops, tree stmt)\n   bool binlhsisreassoc = false;\n   bool binrhsisreassoc = false;\n   enum tree_code rhscode = TREE_CODE (rhs);\n+  struct loop *loop = loop_containing_stmt (stmt);\n \n   TREE_VISITED (stmt) = 1;\n \n   if (TREE_CODE (binlhs) == SSA_NAME)\n     {\n       binlhsdef = SSA_NAME_DEF_STMT (binlhs);\n-      binlhsisreassoc = is_reassociable_op (binlhsdef, rhscode);\n+      binlhsisreassoc = is_reassociable_op (binlhsdef, rhscode, loop);\n     }\n \n   if (TREE_CODE (binrhs) == SSA_NAME)\n     {\n       binrhsdef = SSA_NAME_DEF_STMT (binrhs);\n-      binrhsisreassoc = is_reassociable_op (binrhsdef, rhscode);\n+      binrhsisreassoc = is_reassociable_op (binrhsdef, rhscode, loop);\n     }\n \n   /* If the LHS is not reassociable, but the RHS is, we need to swap\n@@ -1159,7 +1170,8 @@ linearize_expr_tree (VEC(operand_entry_t, heap) **ops, tree stmt)\n     }\n \n   gcc_assert (TREE_CODE (binrhs) != SSA_NAME\n-\t      || !is_reassociable_op (SSA_NAME_DEF_STMT (binrhs), rhscode));\n+\t      || !is_reassociable_op (SSA_NAME_DEF_STMT (binrhs),\n+\t\t\t\t      rhscode, loop));\n   bsinow = bsi_for_stmt (stmt);\n   bsilhs = bsi_for_stmt (SSA_NAME_DEF_STMT (binlhs));\n   bsi_move_before (&bsilhs, &bsinow);\n@@ -1399,6 +1411,10 @@ init_reassoc (void)\n   tree param;\n   int *bbs = XNEWVEC (int, last_basic_block + 1);\n \n+  /* Find the loops, so that we can prevent moving calculations in\n+     them.  */\n+  loop_optimizer_init (AVOID_CFG_MODIFICATIONS);\n+\n   memset (&reassociate_stats, 0, sizeof (reassociate_stats));\n \n   operand_entry_pool = create_alloc_pool (\"operand entry pool\",\n@@ -1435,7 +1451,6 @@ init_reassoc (void)\n     bb_rank[bbs[i]] = ++rank  << 16;\n \n   free (bbs);\n-  calculate_dominance_info (CDI_DOMINATORS);\n   calculate_dominance_info (CDI_POST_DOMINATORS);\n   broken_up_subtracts = NULL;\n }\n@@ -1446,7 +1461,6 @@ init_reassoc (void)\n static void\n fini_reassoc (void)\n {\n-\n   if (dump_file && (dump_flags & TDF_STATS))\n     {\n       fprintf (dump_file, \"Reassociation stats:\\n\");\n@@ -1465,6 +1479,7 @@ fini_reassoc (void)\n   free (bb_rank);\n   VEC_free (tree, heap, broken_up_subtracts);\n   free_dominance_info (CDI_POST_DOMINATORS);\n+  loop_optimizer_finalize ();\n }\n \n /* Gate and execute functions for Reassociation.  */"}]}