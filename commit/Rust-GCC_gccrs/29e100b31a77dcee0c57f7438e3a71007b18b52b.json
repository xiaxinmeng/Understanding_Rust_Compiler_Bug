{"sha": "29e100b31a77dcee0c57f7438e3a71007b18b52b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjllMTAwYjMxYTc3ZGNlZTBjNTdmNzQzOGUzYTcxMDA3YjE4YjUyYg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-11-23T10:42:50Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-11-23T10:42:50Z"}, "message": "decl.c (components_need_strict_alignment): New.\n\n\t* gcc-interface/decl.c (components_need_strict_alignment): New.\n\t(components_to_record): Do not pack the variants if one of the fields\n\tneeds strict alignment.  Likewise for the variant part as a whole.\n\tSpecify the position of the variants even if the size isn't specified,\n\tbut do not specify the size of the variant part in this case.\n\nFrom-SVN: r193750", "tree": {"sha": "9dbc2f03652be5a6d21b9de8d0f15736f32e9aae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dbc2f03652be5a6d21b9de8d0f15736f32e9aae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29e100b31a77dcee0c57f7438e3a71007b18b52b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29e100b31a77dcee0c57f7438e3a71007b18b52b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29e100b31a77dcee0c57f7438e3a71007b18b52b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29e100b31a77dcee0c57f7438e3a71007b18b52b/comments", "author": null, "committer": null, "parents": [{"sha": "1076781c1f312bf3ac2d19844b484b0ef0ca9c5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1076781c1f312bf3ac2d19844b484b0ef0ca9c5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1076781c1f312bf3ac2d19844b484b0ef0ca9c5d"}], "stats": {"total": 89, "additions": 80, "deletions": 9}, "files": [{"sha": "b8359188efe0c72734fdd293d8073660fe768f92", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29e100b31a77dcee0c57f7438e3a71007b18b52b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29e100b31a77dcee0c57f7438e3a71007b18b52b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=29e100b31a77dcee0c57f7438e3a71007b18b52b", "patch": "@@ -1,8 +1,15 @@\n+2012-11-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (components_need_strict_alignment): New.\n+\t(components_to_record): Do not pack the variants if one of the fields\n+\tneeds strict alignment.  Likewise for the variant part as a whole.\n+\tSpecify the position of the variants even if the size isn't specified,\n+\tbut do not specify the size of the variant part in this case.\n+\n 2012-11-20  Diego Novillo  <dnovillo@google.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n \n-\t* gcc-interface/decl.c: Replace all vec<T,A>()\n-\tinitializers with vNULL.\n+\t* gcc-interface/decl.c: Replace all vec<T,A>() initializers with vNULL.\n \n 2012-11-18  Eric Botcazou  <ebotcazou@adacore.com>\n "}, {"sha": "a5205ceeb66e63bbd89cb3e1d2076fd6670334a0", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 45, "deletions": 7, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29e100b31a77dcee0c57f7438e3a71007b18b52b/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29e100b31a77dcee0c57f7438e3a71007b18b52b/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=29e100b31a77dcee0c57f7438e3a71007b18b52b", "patch": "@@ -6650,6 +6650,30 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n   return gnu_field;\n }\n \f\n+/* Return true if at least one member of COMPONENT_LIST needs strict\n+   alignment.  */\n+\n+static bool\n+components_need_strict_alignment (Node_Id component_list)\n+{\n+  Node_Id component_decl;\n+\n+  for (component_decl = First_Non_Pragma (Component_Items (component_list));\n+       Present (component_decl);\n+       component_decl = Next_Non_Pragma (component_decl))\n+    {\n+      Entity_Id gnat_field = Defining_Entity (component_decl);\n+\n+      if (Is_Aliased (gnat_field))\n+\treturn True;\n+\n+      if (Strict_Alignment (Etype (gnat_field)))\n+\treturn True;\n+    }\n+\n+  return False;\n+}\n+\n /* Return true if TYPE is a type with variable size or a padding type with a\n    field of variable size or a record that has a field with such a type.  */\n \n@@ -6880,6 +6904,7 @@ components_to_record (tree gnu_record_type, Node_Id gnat_component_list,\n \t\t       \"XVN\");\n       tree gnu_union_type, gnu_union_name;\n       tree this_first_free_pos, gnu_variant_list = NULL_TREE;\n+      bool union_field_needs_strict_alignment = false;\n \n       if (TREE_CODE (gnu_name) == TYPE_DECL)\n \tgnu_name = DECL_NAME (gnu_name);\n@@ -6980,8 +7005,18 @@ components_to_record (tree gnu_record_type, Node_Id gnat_component_list,\n \t  else\n \t    {\n \t      /* Deal with packedness like in gnat_to_gnu_field.  */\n-\t      int field_packed\n-\t\t= adjust_packed (gnu_variant_type, gnu_record_type, packed);\n+\t      bool field_needs_strict_alignment\n+\t        = components_need_strict_alignment (Component_List (variant));\n+\t      int field_packed;\n+\n+\t      if (field_needs_strict_alignment)\n+\t\t{\n+\t\t  field_packed = 0;\n+\t\t  union_field_needs_strict_alignment = true;\n+\t\t}\n+\t      else\n+\t\tfield_packed\n+\t\t  = adjust_packed (gnu_variant_type, gnu_record_type, packed);\n \n \t      /* Finalize the record type now.  We used to throw away\n \t\t empty records but we no longer do that because we need\n@@ -6997,8 +7032,7 @@ components_to_record (tree gnu_record_type, Node_Id gnat_component_list,\n \t\t\t\t     gnu_union_type,\n \t\t\t\t     all_rep_and_size\n \t\t\t\t     ? TYPE_SIZE (gnu_variant_type) : 0,\n-\t\t\t\t     all_rep_and_size\n-\t\t\t\t     ? bitsize_zero_node : 0,\n+\t\t\t\t     all_rep ? bitsize_zero_node : 0,\n \t\t\t\t     field_packed, 0);\n \n \t      DECL_INTERNAL_P (gnu_field) = 1;\n@@ -7041,12 +7075,16 @@ components_to_record (tree gnu_record_type, Node_Id gnat_component_list,\n \t\t\t    NULL, true, debug_info, gnat_component_list);\n \n \t  /* Deal with packedness like in gnat_to_gnu_field.  */\n-\t  union_field_packed\n-\t    = adjust_packed (gnu_union_type, gnu_record_type, packed);\n+\t  if (union_field_needs_strict_alignment)\n+\t    union_field_packed = 0;\n+\t  else\n+\t    union_field_packed\n+\t      = adjust_packed (gnu_union_type, gnu_record_type, packed);\n \n \t  gnu_variant_part\n \t    = create_field_decl (gnu_var_name, gnu_union_type, gnu_record_type,\n-\t\t\t\t all_rep ? TYPE_SIZE (gnu_union_type) : 0,\n+\t\t\t\t all_rep_and_size\n+\t\t\t\t ? TYPE_SIZE (gnu_union_type) : 0,\n \t\t\t\t all_rep || this_first_free_pos\n \t\t\t\t ? bitsize_zero_node : 0,\n \t\t\t\t union_field_packed, 0);"}, {"sha": "7bc16ad3faee3edd1bdd2261bed82be58c7d7522", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29e100b31a77dcee0c57f7438e3a71007b18b52b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29e100b31a77dcee0c57f7438e3a71007b18b52b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=29e100b31a77dcee0c57f7438e3a71007b18b52b", "patch": "@@ -1,3 +1,7 @@\n+2012-11-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/discr39.adb: New test.\n+\n 2012-11-23  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR testsuite/52641"}, {"sha": "1ffb972dc2c2a6b5877fcdd2852dbba9c883db37", "filename": "gcc/testsuite/gnat.dg/discr39.adb", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29e100b31a77dcee0c57f7438e3a71007b18b52b/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr39.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29e100b31a77dcee0c57f7438e3a71007b18b52b/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr39.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr39.adb?ref=29e100b31a77dcee0c57f7438e3a71007b18b52b", "patch": "@@ -0,0 +1,22 @@\n+-- { dg-do run }\n+\n+with System.Storage_Elements; use System.Storage_Elements;\n+\n+procedure Discr39 is\n+\n+  type Rec (Has_Src : Boolean) is record\n+     case Has_Src is\n+        when True  => Src : aliased Integer;\n+        when False => null;\n+     end case;\n+  end record;\n+  pragma Pack(Rec);\n+  for Rec'Alignment use Integer'Alignment;\n+\n+  R : Rec (Has_Src => True);\n+\n+begin\n+  if R.Src'Address mod Integer'Alignment /= 0 then\n+     raise Program_Error;\n+  end if;\n+end;"}]}