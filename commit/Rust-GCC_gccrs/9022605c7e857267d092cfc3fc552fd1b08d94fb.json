{"sha": "9022605c7e857267d092cfc3fc552fd1b08d94fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAyMjYwNWM3ZTg1NzI2N2QwOTJjZmMzZmM1NTJmZDFiMDhkOTRmYg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-01T07:07:46Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-01T07:07:46Z"}, "message": "(safe_write): New function.\n\n(write_output): Use safe_write.\n\nFrom-SVN: r5960", "tree": {"sha": "71a6dac1b66406c3581f72174bc647fb8d28e3e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71a6dac1b66406c3581f72174bc647fb8d28e3e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9022605c7e857267d092cfc3fc552fd1b08d94fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9022605c7e857267d092cfc3fc552fd1b08d94fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9022605c7e857267d092cfc3fc552fd1b08d94fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9022605c7e857267d092cfc3fc552fd1b08d94fb/comments", "author": null, "committer": null, "parents": [{"sha": "a3fb124a50a9a34f615fcbb82e6049104a77b6ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3fb124a50a9a34f615fcbb82e6049104a77b6ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3fb124a50a9a34f615fcbb82e6049104a77b6ea"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "671d7deb5e7982a52b623bd55892253b31e26960", "filename": "gcc/cccp.c", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9022605c7e857267d092cfc3fc552fd1b08d94fb/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9022605c7e857267d092cfc3fc552fd1b08d94fb/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=9022605c7e857267d092cfc3fc552fd1b08d94fb", "patch": "@@ -4746,6 +4746,24 @@ pcstring_used (hp)\n   delete_macro (hp);\n }\n \n+/* Write LEN bytes at PTR to descriptor DESC,\n+   retrying if necessary, and treating any real error as fatal.  */\n+\n+static void\n+safe_write (desc, ptr, len)\n+     int desc;\n+     char *ptr;\n+     int len;\n+{\n+  while (len > 0) {\n+    int written = write (fileno (stdout), ptr, len);\n+    if (written < 0)\n+      pfatal_with_name (out_fname);\n+    ptr += written;\n+    len -= written;\n+  }\n+}\n+\n /* Write the output, interspersing precompiled strings in their */\n  /* appropriate places. */\n static void\n@@ -4756,6 +4774,7 @@ write_output ()\n   int line_command_len = 80;\n   char *line_command = xmalloc (line_command_len);\n   int len;\n+  int written;\n \n   /* In each run through the loop, either cur_buf_loc == */\n   /* next_string_loc, in which case we print a series of strings, or */\n@@ -4776,10 +4795,8 @@ write_output ()\n \tstrcpy (quote_string (line_command + strlen (line_command),\n \t\t              next_string->filename),\n \t\t\"\\n\");\n-\tif (write (fileno (stdout), line_command, strlen (line_command)) < 0)\n-\t  pfatal_with_name (out_fname);\n-\tif (write (fileno (stdout), next_string->contents, next_string->len) < 0)\n-\t  pfatal_with_name (out_fname);\n+\tsafe_write (fileno (stdout), line_command, strlen (line_command));\n+\tsafe_write (fileno (stdout), next_string->contents, next_string->len);\n       }\t      \n       next_string = next_string->chain;\n     }\n@@ -4789,8 +4806,7 @@ write_output ()\n \t\t- (cur_buf_loc - outbuf.buf))\n \t     : outbuf.bufp - cur_buf_loc);\n       \n-      if (write (fileno (stdout), cur_buf_loc, len) < len)\n-\tpfatal_with_name (out_fname);\n+      safe_write (fileno (stdout), cur_buf_loc, len);\n       cur_buf_loc += len;\n     }\n   }"}]}