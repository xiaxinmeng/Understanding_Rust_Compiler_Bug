{"sha": "c05e32f58d802bda7fafe9e3471e163734a79c79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA1ZTMyZjU4ZDgwMmJkYTdmYWZlOWUzNDcxZTE2MzczNGE3OWM3OQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2011-11-16T18:28:08Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-11-16T18:28:08Z"}, "message": "sse.md (round<mode>2_vec_pack_sfix): Optimize V2DFmode sequence for AVX.\n\n\t* config/i386/sse.md (round<mode>2_vec_pack_sfix): Optimize V2DFmode\n\tsequence for AVX.\n\t(<sse4_1>_round<ssemodesuffix>_vec_pack_sfix<avxsizesuffix>): Ditto.\n\nFrom-SVN: r181421", "tree": {"sha": "a3d9a1dedd8e3c3cffd88cfcf531c0323eae4da5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3d9a1dedd8e3c3cffd88cfcf531c0323eae4da5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c05e32f58d802bda7fafe9e3471e163734a79c79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c05e32f58d802bda7fafe9e3471e163734a79c79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c05e32f58d802bda7fafe9e3471e163734a79c79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c05e32f58d802bda7fafe9e3471e163734a79c79/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a6bbb56fef2ade340c48a60c38fa21213c152401", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6bbb56fef2ade340c48a60c38fa21213c152401", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6bbb56fef2ade340c48a60c38fa21213c152401"}], "stats": {"total": 78, "additions": 58, "deletions": 20}, "files": [{"sha": "dd03e1aeb0e40c97d1a4b54e40f89e86b0a4e943", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05e32f58d802bda7fafe9e3471e163734a79c79/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05e32f58d802bda7fafe9e3471e163734a79c79/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c05e32f58d802bda7fafe9e3471e163734a79c79", "patch": "@@ -1,3 +1,9 @@\n+2011-11-16  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (round<mode>2_vec_pack_sfix): Optimize V2DFmode\n+\tsequence for AVX.\n+\t(<sse4_1>_round<ssemodesuffix>_vec_pack_sfix<avxsizesuffix>): Ditto.\n+\n 2011-11-16  Venkataramanan Kumar  <venkataramanan.kumar@amd.com>\n \n \t* doc/invoke.texi: Document AMD bdver1 and btver1.\n@@ -11,13 +17,15 @@\n \tthe base reg is stored iff compiling for Thumb1.\n \n 2011-11-16  Razya Ladelsky  <razya@il.ibm.com>\n-\t\n+\n \tPR tree-optimization/49960\n-\t* tree-data-ref.c (initialize_data_dependence_relation): Add initializations. \n+\t* tree-data-ref.c (initialize_data_dependence_relation): Add\n+\tinitializations.\n \tRemove call to compute_self_dependence.\n \t(compute_affine_dependence): Remove the !DDR_SELF_REFERENCE condition.\n-\t(compute_self_dependence): Remove old code. Add call to compute_affine_dependence.\n-\t(compute_all_dependences): Remove call to compute_self_dependence. \n+\t(compute_self_dependence): Remove old code. Add call to\n+\tcompute_affine_dependence.\n+\t(compute_all_dependences): Remove call to compute_self_dependence.\n \tAdd call to compute_affine_dependence.\n \n 2011-11-16  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>"}, {"sha": "d04902b67598fafe655404731c2ae484c67936b3", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 46, "deletions": 16, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05e32f58d802bda7fafe9e3471e163734a79c79/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05e32f58d802bda7fafe9e3471e163734a79c79/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=c05e32f58d802bda7fafe9e3471e163734a79c79", "patch": "@@ -9962,17 +9962,32 @@\n {\n   rtx tmp0, tmp1;\n \n-  tmp0 = gen_reg_rtx (<MODE>mode);\n-  tmp1 = gen_reg_rtx (<MODE>mode);\n+  if (<MODE>mode == V2DFmode\n+      && TARGET_AVX && !TARGET_PREFER_AVX128)\n+    {\n+      rtx tmp2 = gen_reg_rtx (V4DFmode);\n \n-  emit_insn\n-    (gen_<sse4_1>_round<ssemodesuffix><avxsizesuffix> (tmp0, operands[1],\n-\t\t\t\t\t\t       operands[3]));\n-  emit_insn\n-    (gen_<sse4_1>_round<ssemodesuffix><avxsizesuffix> (tmp1, operands[2],\n-\t\t\t\t\t\t       operands[3]));\n-  emit_insn\n-    (gen_vec_pack_sfix_trunc_<mode> (operands[0], tmp0, tmp1));\n+      tmp0 = gen_reg_rtx (V4DFmode);\n+      tmp1 = force_reg (V2DFmode, operands[1]);\n+\n+      emit_insn (gen_avx_vec_concatv4df (tmp0, tmp1, operands[2]));\n+      emit_insn (gen_avx_roundpd256 (tmp2, tmp0, operands[3]));\n+      emit_insn (gen_fix_truncv4dfv4si2 (operands[0], tmp2));\n+    }\n+  else\n+    {\n+      tmp0 = gen_reg_rtx (<MODE>mode);\n+      tmp1 = gen_reg_rtx (<MODE>mode);\n+\n+      emit_insn\n+       (gen_<sse4_1>_round<ssemodesuffix><avxsizesuffix> (tmp0, operands[1],\n+\t\t\t\t\t\t\t  operands[3]));\n+      emit_insn\n+       (gen_<sse4_1>_round<ssemodesuffix><avxsizesuffix> (tmp1, operands[2],\n+\t\t\t\t\t\t\t  operands[3]));\n+      emit_insn\n+       (gen_vec_pack_sfix_trunc_<mode> (operands[0], tmp0, tmp1));\n+    }\n   DONE;\n })\n \n@@ -10053,14 +10068,29 @@\n {\n   rtx tmp0, tmp1;\n \n-  tmp0 = gen_reg_rtx (<MODE>mode);\n-  tmp1 = gen_reg_rtx (<MODE>mode);\n+  if (<MODE>mode == V2DFmode\n+      && TARGET_AVX && !TARGET_PREFER_AVX128)\n+    {\n+      rtx tmp2 = gen_reg_rtx (V4DFmode);\n \n-  emit_insn (gen_round<mode>2 (tmp0, operands[1]));\n-  emit_insn (gen_round<mode>2 (tmp1, operands[2]));\n+      tmp0 = gen_reg_rtx (V4DFmode);\n+      tmp1 = force_reg (V2DFmode, operands[1]);\n \n-  emit_insn\n-    (gen_vec_pack_sfix_trunc_<mode> (operands[0], tmp0, tmp1));\n+      emit_insn (gen_avx_vec_concatv4df (tmp0, tmp1, operands[2]));\n+      emit_insn (gen_roundv4df2 (tmp2, tmp0));\n+      emit_insn (gen_fix_truncv4dfv4si2 (operands[0], tmp2));\n+    }\n+  else\n+    {\n+      tmp0 = gen_reg_rtx (<MODE>mode);\n+      tmp1 = gen_reg_rtx (<MODE>mode);\n+\n+      emit_insn (gen_round<mode>2 (tmp0, operands[1]));\n+      emit_insn (gen_round<mode>2 (tmp1, operands[2]));\n+\n+      emit_insn\n+       (gen_vec_pack_sfix_trunc_<mode> (operands[0], tmp0, tmp1));\n+    }\n   DONE;\n })\n "}]}