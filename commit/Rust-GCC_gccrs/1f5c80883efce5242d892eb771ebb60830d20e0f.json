{"sha": "1f5c80883efce5242d892eb771ebb60830d20e0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY1YzgwODgzZWZjZTUyNDJkODkyZWI3NzFlYmI2MDgzMGQyMGUwZg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-02-10T19:33:10Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-02-10T19:33:10Z"}, "message": "libcpp: fix ICE comparing macro locations without column info [PR96391]\n\nPR preprocessor/96391 describes an ICE in the C++ frontend on:\n\n  #define CONST const\n  #define VOID void\n  typedef CONST VOID *PCVOID;\n\nwhere the typedef line occurs after enough code has been compiled\nthat location_t values are beyond LINE_MAP_MAX_LOCATION_WITH_COLS,\nand hence no column numbers are available.\n\nThe issue occurs in linemap_compare_locations when comparing the\nlocations of the \"const\" and \"void\" tokens.\nUpon resolving the LRK_MACRO_EXPANSION_POINT, both have the same\nlocation_t, the line of the \"typedef\" (with no column), and so\nthe l0 == l1 clause is triggered, but they are not from the\nsame macro expansion, leading first_map_in_common to return NULL\nand triggering the \"abort\" condition.\n\nThis patch fixes the issue by checking when the two macro expansion\npoint location_t values are equal that the value\n<= LINE_MAP_MAX_LOCATION_WITH_COLS and thus has column information,\nfixing the issue.\n\ngcc/testsuite/ChangeLog:\n\tPR preprocessor/96391\n\t* g++.dg/plugin/location-overflow-test-pr96391.c: New test.\n\t* g++.dg/plugin/plugin.exp (plugin_test_list): Add it,\n\tusing the location_overflow_plugin.c from gcc.dg/plugin.\n\nlibcpp/ChangeLog:\n\tPR preprocessor/96391\n\t* line-map.c (linemap_compare_locations): Require that\n\tthe location be <= LINE_MAP_MAX_LOCATION_WITH_COLS when\n\ttreating locations as coming from the same macro expansion.", "tree": {"sha": "0f8f2b3c9af09149a8e0f0e4a5e28abe8b82674e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f8f2b3c9af09149a8e0f0e4a5e28abe8b82674e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f5c80883efce5242d892eb771ebb60830d20e0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f5c80883efce5242d892eb771ebb60830d20e0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f5c80883efce5242d892eb771ebb60830d20e0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f5c80883efce5242d892eb771ebb60830d20e0f/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f39fb7b001df7cdba56cd5c572d0737667acd2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f39fb7b001df7cdba56cd5c572d0737667acd2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f39fb7b001df7cdba56cd5c572d0737667acd2c"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "18169617c0cee542bdce8211ad128e8fcd6f5350", "filename": "gcc/testsuite/g++.dg/plugin/location-overflow-test-pr96391.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5c80883efce5242d892eb771ebb60830d20e0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Flocation-overflow-test-pr96391.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5c80883efce5242d892eb771ebb60830d20e0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Flocation-overflow-test-pr96391.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Flocation-overflow-test-pr96391.c?ref=1f5c80883efce5242d892eb771ebb60830d20e0f", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-fplugin-arg-location_overflow_plugin-value=0x60000001\" } */\n+\n+/* We use location_overflow_plugin.c, which injects the case that location_t\n+   values have exceeded LINE_MAP_MAX_LOCATION_WITH_COLS, and hence no column\n+   numbers are available.  */\n+\n+/* Verify that we're in column-less mode.  */\n+extern unknown_type test; /* { dg-error \"-:'unknown_type' does not name a type\" } */\n+\n+#define CONST const\n+#define VOID void\n+typedef CONST VOID *PCVOID;"}, {"sha": "5cd4b4bff902e33f104737abe1f06b479bb12ba7", "filename": "gcc/testsuite/g++.dg/plugin/plugin.exp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5c80883efce5242d892eb771ebb60830d20e0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fplugin.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5c80883efce5242d892eb771ebb60830d20e0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fplugin.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fplugin.exp?ref=1f5c80883efce5242d892eb771ebb60830d20e0f", "patch": "@@ -72,6 +72,8 @@ set plugin_test_list [list \\\n \t  ../../gcc.dg/plugin/diagnostic-test-string-literals-2.c \\\n \t  ../../gcc.dg/plugin/diagnostic-test-string-literals-3.c \\\n \t  ../../gcc.dg/plugin/diagnostic-test-string-literals-4.c } \\\n+    { ../../gcc.dg/plugin/location_overflow_plugin.c \\\n+\t  location-overflow-test-pr96391.c } \\\n     { show_template_tree_color_plugin.c \\\n     \t  show-template-tree-color.C \\\n     \t  show-template-tree-color-labels.C \\"}, {"sha": "cccacf2fe5b2989567366befbb907ab6a0c6ebf3", "filename": "libcpp/line-map.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5c80883efce5242d892eb771ebb60830d20e0f/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5c80883efce5242d892eb771ebb60830d20e0f/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=1f5c80883efce5242d892eb771ebb60830d20e0f", "patch": "@@ -1417,7 +1417,8 @@ linemap_compare_locations (line_maps *set,\n \n   if (l0 == l1\n       && pre_virtual_p\n-      && post_virtual_p)\n+      && post_virtual_p\n+      && l0 <= LINE_MAP_MAX_LOCATION_WITH_COLS)\n     {\n       /* So pre and post represent two tokens that are present in a\n \t same macro expansion.  Let's see if the token for pre was"}]}