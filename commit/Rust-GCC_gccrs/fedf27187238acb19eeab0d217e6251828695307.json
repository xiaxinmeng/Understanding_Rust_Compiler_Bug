{"sha": "fedf27187238acb19eeab0d217e6251828695307", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVkZjI3MTg3MjM4YWNiMTllZWFiMGQyMTdlNjI1MTgyODY5NTMwNw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-11-22T09:18:37Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-11-22T09:18:37Z"}, "message": "Add sem_item::m_hash_set (PR ipa/78309)\n\n\tPR ipa/78309\n\t* ipa-icf.c (void sem_item::set_hash): Update m_hash_set.\n\t(sem_function::get_hash): Use the new field.\n\t(sem_function::parse): Remove an argument from ctor.\n\t(sem_variable::parse): Likewise.\n\t(sem_variable::get_hash): Use the new field.\n\t(sem_item_optimizer::read_section): Use new ctor and set hash.\n\t* ipa-icf.h: _hash is removed from sem_item::sem_item,\n\tsem_variable::sem_variable, sem_function::sem_function.\n\nFrom-SVN: r242687", "tree": {"sha": "6399e23823c32919144370ad6ad893df545a591e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6399e23823c32919144370ad6ad893df545a591e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fedf27187238acb19eeab0d217e6251828695307", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fedf27187238acb19eeab0d217e6251828695307", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fedf27187238acb19eeab0d217e6251828695307", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fedf27187238acb19eeab0d217e6251828695307/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "876f73136cd42b18259bd97445e0d4bb0f01236d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/876f73136cd42b18259bd97445e0d4bb0f01236d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/876f73136cd42b18259bd97445e0d4bb0f01236d"}], "stats": {"total": 93, "additions": 47, "deletions": 46}, "files": [{"sha": "b8fb5feb289ea03400112e5223188d4c60bed11c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedf27187238acb19eeab0d217e6251828695307/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedf27187238acb19eeab0d217e6251828695307/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fedf27187238acb19eeab0d217e6251828695307", "patch": "@@ -1,3 +1,15 @@\n+2016-11-22  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/78309\n+\t* ipa-icf.c (void sem_item::set_hash): Update m_hash_set.\n+\t(sem_function::get_hash): Use the new field.\n+\t(sem_function::parse): Remove an argument from ctor.\n+\t(sem_variable::parse): Likewise.\n+\t(sem_variable::get_hash): Use the new field.\n+\t(sem_item_optimizer::read_section): Use new ctor and set hash.\n+\t* ipa-icf.h: _hash is removed from sem_item::sem_item,\n+\tsem_variable::sem_variable, sem_function::sem_function.\n+\n 2016-11-21  Jeff Law  <law@redhat.com>\n \n \tPR target/68538"}, {"sha": "212e406421cac70fb1b1af8f48f5a6617dcb2b12", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 26, "deletions": 38, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedf27187238acb19eeab0d217e6251828695307/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedf27187238acb19eeab0d217e6251828695307/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=fedf27187238acb19eeab0d217e6251828695307", "patch": "@@ -131,27 +131,20 @@ symbol_compare_collection::symbol_compare_collection (symtab_node *node)\n \n /* Constructor for key value pair, where _ITEM is key and _INDEX is a target.  */\n \n-sem_usage_pair::sem_usage_pair (sem_item *_item, unsigned int _index):\n-  item (_item), index (_index)\n+sem_usage_pair::sem_usage_pair (sem_item *_item, unsigned int _index)\n+: item (_item), index (_index)\n {\n }\n \n-/* Semantic item constructor for a node of _TYPE, where STACK is used\n-   for bitmap memory allocation.  */\n-\n-sem_item::sem_item (sem_item_type _type,\n-\t\t    bitmap_obstack *stack): type (_type), m_hash (0)\n+sem_item::sem_item (sem_item_type _type, bitmap_obstack *stack)\n+: type (_type), m_hash (-1), m_hash_set (false)\n {\n   setup (stack);\n }\n \n-/* Semantic item constructor for a node of _TYPE, where STACK is used\n-   for bitmap memory allocation. The item is based on symtab node _NODE\n-   with computed _HASH.  */\n-\n sem_item::sem_item (sem_item_type _type, symtab_node *_node,\n-\t\t    hashval_t _hash, bitmap_obstack *stack): type(_type),\n-  node (_node), m_hash (_hash)\n+\t\t    bitmap_obstack *stack)\n+: type (_type), node (_node), m_hash (-1), m_hash_set (false)\n {\n   decl = node->decl;\n   setup (stack);\n@@ -230,23 +223,20 @@ sem_item::target_supports_symbol_aliases_p (void)\n void sem_item::set_hash (hashval_t hash)\n {\n   m_hash = hash;\n+  m_hash_set = true;\n }\n \n /* Semantic function constructor that uses STACK as bitmap memory stack.  */\n \n-sem_function::sem_function (bitmap_obstack *stack): sem_item (FUNC, stack),\n-  m_checker (NULL), m_compared_func (NULL)\n+sem_function::sem_function (bitmap_obstack *stack)\n+: sem_item (FUNC, stack), m_checker (NULL), m_compared_func (NULL)\n {\n   bb_sizes.create (0);\n   bb_sorted.create (0);\n }\n \n-/*  Constructor based on callgraph node _NODE with computed hash _HASH.\n-    Bitmap STACK is used for memory allocation.  */\n-sem_function::sem_function (cgraph_node *node, hashval_t hash,\n-\t\t\t    bitmap_obstack *stack):\n-  sem_item (FUNC, node, hash, stack),\n-  m_checker (NULL), m_compared_func (NULL)\n+sem_function::sem_function (cgraph_node *node, bitmap_obstack *stack)\n+: sem_item (FUNC, node, stack), m_checker (NULL), m_compared_func (NULL)\n {\n   bb_sizes.create (0);\n   bb_sorted.create (0);\n@@ -279,7 +269,7 @@ sem_function::get_bb_hash (const sem_bb *basic_block)\n hashval_t\n sem_function::get_hash (void)\n {\n-  if (!m_hash)\n+  if (!m_hash_set)\n     {\n       inchash::hash hstate;\n       hstate.add_int (177454); /* Random number for function type.  */\n@@ -1704,7 +1694,7 @@ sem_function::parse (cgraph_node *node, bitmap_obstack *stack)\n       || DECL_STATIC_DESTRUCTOR (node->decl))\n     return NULL;\n \n-  sem_function *f = new sem_function (node, 0, stack);\n+  sem_function *f = new sem_function (node, stack);\n \n   f->init ();\n \n@@ -1807,19 +1797,12 @@ sem_function::bb_dict_test (vec<int> *bb_dict, int source, int target)\n     return (*bb_dict)[source] == target;\n }\n \n-\n-/* Semantic variable constructor that uses STACK as bitmap memory stack.  */\n-\n sem_variable::sem_variable (bitmap_obstack *stack): sem_item (VAR, stack)\n {\n }\n \n-/*  Constructor based on varpool node _NODE with computed hash _HASH.\n-    Bitmap STACK is used for memory allocation.  */\n-\n-sem_variable::sem_variable (varpool_node *node, hashval_t _hash,\n-\t\t\t    bitmap_obstack *stack): sem_item(VAR,\n-\t\t\t\t  node, _hash, stack)\n+sem_variable::sem_variable (varpool_node *node, bitmap_obstack *stack)\n+: sem_item (VAR, node, stack)\n {\n   gcc_checking_assert (node);\n   gcc_checking_assert (get_node ());\n@@ -2104,7 +2087,7 @@ sem_variable::parse (varpool_node *node, bitmap_obstack *stack)\n       || node->alias)\n     return NULL;\n \n-  sem_variable *v = new sem_variable (node, 0, stack);\n+  sem_variable *v = new sem_variable (node, stack);\n \n   v->init ();\n \n@@ -2116,7 +2099,7 @@ sem_variable::parse (varpool_node *node, bitmap_obstack *stack)\n hashval_t\n sem_variable::get_hash (void)\n {\n-  if (m_hash)\n+  if (m_hash_set)\n     return m_hash;\n \n   /* All WPA streamed in symbols should have their hashes computed at compile\n@@ -2296,8 +2279,9 @@ sem_variable::dump_to_file (FILE *file)\n \n unsigned int sem_item_optimizer::class_id = 0;\n \n-sem_item_optimizer::sem_item_optimizer (): worklist (0), m_classes (0),\n-  m_classes_count (0), m_cgraph_node_hooks (NULL), m_varpool_node_hooks (NULL)\n+sem_item_optimizer::sem_item_optimizer ()\n+: worklist (0), m_classes (0), m_classes_count (0), m_cgraph_node_hooks (NULL),\n+  m_varpool_node_hooks (NULL)\n {\n   m_items.create (0);\n   bitmap_obstack_initialize (&m_bmstack);\n@@ -2417,13 +2401,17 @@ sem_item_optimizer::read_section (lto_file_decl_data *file_data,\n \t{\n \t  cgraph_node *cnode = dyn_cast <cgraph_node *> (node);\n \n-\t  m_items.safe_push (new sem_function (cnode, hash, &m_bmstack));\n+\t  sem_function *fn = new sem_function (cnode, &m_bmstack);\n+\t  fn->set_hash (hash);\n+\t  m_items.safe_push (fn);\n \t}\n       else\n \t{\n \t  varpool_node *vnode = dyn_cast <varpool_node *> (node);\n \n-\t  m_items.safe_push (new sem_variable (vnode, hash, &m_bmstack));\n+\t  sem_variable *var = new sem_variable (vnode, &m_bmstack);\n+\t  var->set_hash (hash);\n+\t  m_items.safe_push (var);\n \t}\n     }\n "}, {"sha": "e02381c5f7082ff5c8b6d42f1fb0823686917de0", "filename": "gcc/ipa-icf.h", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedf27187238acb19eeab0d217e6251828695307/gcc%2Fipa-icf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedf27187238acb19eeab0d217e6251828695307/gcc%2Fipa-icf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.h?ref=fedf27187238acb19eeab0d217e6251828695307", "patch": "@@ -151,10 +151,8 @@ class sem_item\n   sem_item (sem_item_type _type, bitmap_obstack *stack);\n \n   /* Semantic item constructor for a node of _TYPE, where STACK is used\n-     for bitmap memory allocation. The item is based on symtab node _NODE\n-     with computed _HASH.  */\n-  sem_item (sem_item_type _type, symtab_node *_node, hashval_t _hash,\n-\t    bitmap_obstack *stack);\n+     for bitmap memory allocation.  The item is based on symtab node _NODE.  */\n+  sem_item (sem_item_type _type, symtab_node *_node, bitmap_obstack *stack);\n \n   virtual ~sem_item ();\n \n@@ -274,6 +272,9 @@ class sem_item\n   /* Hash of item.  */\n   hashval_t m_hash;\n \n+  /* Indicated whether a hash value has been set or not.  */\n+  bool m_hash_set;\n+\n private:\n   /* Initialize internal data structures. Bitmap STACK is used for\n      bitmap memory allocation process.  */\n@@ -286,9 +287,9 @@ class sem_function: public sem_item\n   /* Semantic function constructor that uses STACK as bitmap memory stack.  */\n   sem_function (bitmap_obstack *stack);\n \n-  /*  Constructor based on callgraph node _NODE with computed hash _HASH.\n+  /*  Constructor based on callgraph node _NODE.\n       Bitmap STACK is used for memory allocation.  */\n-  sem_function (cgraph_node *_node, hashval_t _hash, bitmap_obstack *stack);\n+  sem_function (cgraph_node *_node, bitmap_obstack *stack);\n \n   ~sem_function ();\n \n@@ -394,10 +395,10 @@ class sem_variable: public sem_item\n   /* Semantic variable constructor that uses STACK as bitmap memory stack.  */\n   sem_variable (bitmap_obstack *stack);\n \n-  /*  Constructor based on callgraph node _NODE with computed hash _HASH.\n+  /*  Constructor based on callgraph node _NODE.\n       Bitmap STACK is used for memory allocation.  */\n \n-  sem_variable (varpool_node *_node, hashval_t _hash, bitmap_obstack *stack);\n+  sem_variable (varpool_node *_node, bitmap_obstack *stack);\n \n   inline virtual void init_wpa (void) {}\n "}]}