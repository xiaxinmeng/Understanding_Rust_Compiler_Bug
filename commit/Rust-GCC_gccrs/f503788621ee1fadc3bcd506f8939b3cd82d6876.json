{"sha": "f503788621ee1fadc3bcd506f8939b3cd82d6876", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjUwMzc4ODYyMWVlMWZhZGMzYmNkNTA2Zjg5MzliM2NkODJkNjg3Ng==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-01T10:59:58Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-01T10:59:58Z"}, "message": "[multiple changes]\n\n2011-09-01  Yannick Moy  <moy@adacore.com>\n\n\t* ali-util.adb, ali-util.ads (Read_Withed_ALIs): Add parameter\n\tIgnore_Errors to ignore failures to read ALI files when True.\n\n2011-09-01  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_ch3.adb (Expand_N_Object_Declaration): Handle non-default\n\tconstructor calls associated with non-tagged record types.\n\n2011-09-01  Robert Dewar  <dewar@adacore.com>\n\n\t* g-socthi-vms.adb: Minor reformatting.\n\n2011-09-01  Nicolas Roche  <roche@adacore.com>\n\n\t* sysdep.c: Don't use macro functions for stdio functions on VxWorks\n\tin order to avoid impact of imcompatible changes.\n\t* cstreams.c: Likewise\n\t* cio.c: Likewise\n\t* aux-io.c: Likewise\n\n2011-09-01  Yannick Moy  <moy@adacore.com>\n\n\t* lib-writ.adb (Write_With_Lines): Always output complete information\n\ton \"with\" line in Alfa mode, as this is required by formal verification\n\tback-end.\n\nFrom-SVN: r178406", "tree": {"sha": "0d9edcd5120dd470ff8c1f523b5ecd692f338259", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d9edcd5120dd470ff8c1f523b5ecd692f338259"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f503788621ee1fadc3bcd506f8939b3cd82d6876", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f503788621ee1fadc3bcd506f8939b3cd82d6876", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f503788621ee1fadc3bcd506f8939b3cd82d6876", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f503788621ee1fadc3bcd506f8939b3cd82d6876/comments", "author": null, "committer": null, "parents": [{"sha": "549e455803a0014098c187a65bc7e4ce783e8645", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/549e455803a0014098c187a65bc7e4ce783e8645", "html_url": "https://github.com/Rust-GCC/gccrs/commit/549e455803a0014098c187a65bc7e4ce783e8645"}], "stats": {"total": 203, "additions": 145, "deletions": 58}, "files": [{"sha": "dcd69b105eee2f272c95644402629dc24615f571", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f503788621ee1fadc3bcd506f8939b3cd82d6876/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f503788621ee1fadc3bcd506f8939b3cd82d6876/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f503788621ee1fadc3bcd506f8939b3cd82d6876", "patch": "@@ -1,3 +1,31 @@\n+2011-09-01  Yannick Moy  <moy@adacore.com>\n+\n+\t* ali-util.adb, ali-util.ads (Read_Withed_ALIs): Add parameter\n+\tIgnore_Errors to ignore failures to read ALI files when True.\n+\n+2011-09-01  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): Handle non-default\n+\tconstructor calls associated with non-tagged record types.\n+\n+2011-09-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* g-socthi-vms.adb: Minor reformatting.\n+\n+2011-09-01  Nicolas Roche  <roche@adacore.com>\n+\n+\t* sysdep.c: Don't use macro functions for stdio functions on VxWorks\n+\tin order to avoid impact of imcompatible changes.\n+\t* cstreams.c: Likewise\n+\t* cio.c: Likewise\n+\t* aux-io.c: Likewise\n+\n+2011-09-01  Yannick Moy  <moy@adacore.com>\n+\n+\t* lib-writ.adb (Write_With_Lines): Always output complete information\n+\ton \"with\" line in Alfa mode, as this is required by formal verification\n+\tback-end.\n+\n 2011-09-01  Tristan Gingold  <gingold@adacore.com>\n \n \t* g-socthi-vms.adb: Add comments."}, {"sha": "0b43200f14e4128a1ebf64e139dc91052f2a3e04", "filename": "gcc/ada/ali-util.adb", "status": "modified", "additions": 56, "deletions": 45, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f503788621ee1fadc3bcd506f8939b3cd82d6876/gcc%2Fada%2Fali-util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f503788621ee1fadc3bcd506f8939b3cd82d6876/gcc%2Fada%2Fali-util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali-util.adb?ref=f503788621ee1fadc3bcd506f8939b3cd82d6876", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -212,7 +212,10 @@ package body ALI.Util is\n    -- Read_Withed_ALIs --\n    ----------------------\n \n-   procedure Read_Withed_ALIs (Id : ALI_Id) is\n+   procedure Read_Withed_ALIs\n+     (Id            : ALI_Id;\n+      Ignore_Errors : Boolean := False)\n+   is\n       Afile  : File_Name_Type;\n       Text   : Text_Buffer_Ptr;\n       Idread : ALI_Id;\n@@ -234,59 +237,67 @@ package body ALI.Util is\n             then\n                Text := Read_Library_Info (Afile);\n \n-               --  Return with an error if source cannot be found. We used to\n-               --  skip this check when we did not compile library generics\n-               --  separately, but we now always do, so there is no special\n-               --  case here anymore.\n+               --  Unless Ignore_Errors is true, return with an error if source\n+               --  cannot be found. We used to skip this check when we did not\n+               --  compile library generics separately, but we now always do,\n+               --  so there is no special case here anymore.\n \n                if Text = null then\n-                  Error_Msg_File_1 := Afile;\n-                  Error_Msg_File_2 := Withs.Table (W).Sfile;\n-                  Error_Msg (\"{ not found, { must be compiled\");\n-                  Set_Name_Table_Info (Afile, Int (No_Unit_Id));\n-                  return;\n-               end if;\n-\n-               --  Enter in ALIs table\n \n-               Idread :=\n-                 Scan_ALI\n-                   (F         => Afile,\n-                    T         => Text,\n-                    Ignore_ED => False,\n-                    Err       => False);\n-\n-               Free (Text);\n-\n-               if ALIs.Table (Idread).Compile_Errors then\n-                  Error_Msg_File_1 := Withs.Table (W).Sfile;\n-                  Error_Msg (\"{ had errors, must be fixed, and recompiled\");\n-                  Set_Name_Table_Info (Afile, Int (No_Unit_Id));\n+                  if not Ignore_Errors then\n+                     Error_Msg_File_1 := Afile;\n+                     Error_Msg_File_2 := Withs.Table (W).Sfile;\n+                     Error_Msg (\"{ not found, { must be compiled\");\n+                     Set_Name_Table_Info (Afile, Int (No_Unit_Id));\n+                     return;\n+                  end if;\n \n-               elsif ALIs.Table (Idread).No_Object then\n-                  Error_Msg_File_1 := Withs.Table (W).Sfile;\n-                  Error_Msg (\"{ must be recompiled\");\n-                  Set_Name_Table_Info (Afile, Int (No_Unit_Id));\n-               end if;\n+               else\n+                  --  Enter in ALIs table\n+\n+                  Idread :=\n+                    Scan_ALI\n+                      (F         => Afile,\n+                       T         => Text,\n+                       Ignore_ED => False,\n+                       Err       => False);\n+\n+                  Free (Text);\n+\n+                  if ALIs.Table (Idread).Compile_Errors\n+                    and then not Ignore_Errors\n+                  then\n+                     Error_Msg_File_1 := Withs.Table (W).Sfile;\n+                     Error_Msg (\"{ had errors, must be fixed, and recompiled\");\n+                     Set_Name_Table_Info (Afile, Int (No_Unit_Id));\n+\n+                  elsif ALIs.Table (Idread).No_Object\n+                    and then not Ignore_Errors\n+                  then\n+                     Error_Msg_File_1 := Withs.Table (W).Sfile;\n+                     Error_Msg (\"{ must be recompiled\");\n+                     Set_Name_Table_Info (Afile, Int (No_Unit_Id));\n+                  end if;\n \n-               --  If the Unit is an Interface to a Stand-Alone Library,\n-               --  set the Interface flag in the Withs table, so that its\n-               --  dependant are not considered for elaboration order.\n+                  --  If the Unit is an Interface to a Stand-Alone Library,\n+                  --  set the Interface flag in the Withs table, so that its\n+                  --  dependant are not considered for elaboration order.\n \n-               if ALIs.Table (Idread).SAL_Interface then\n-                  Withs.Table (W).SAL_Interface  := True;\n-                  Interface_Library_Unit := True;\n+                  if ALIs.Table (Idread).SAL_Interface then\n+                     Withs.Table (W).SAL_Interface := True;\n+                     Interface_Library_Unit := True;\n \n-                  --  Set the entry in the Interfaces hash table, so that other\n-                  --  units that import this unit will set the flag in their\n-                  --  entry in the Withs table.\n+                     --  Set the entry in the Interfaces hash table, so that\n+                     --  other units that import this unit will set the flag\n+                     --  in their entry in the Withs table.\n \n-                  Interfaces.Set (Afile, True);\n+                     Interfaces.Set (Afile, True);\n \n-               else\n-                  --  Otherwise, recurse to get new dependents\n+                  else\n+                     --  Otherwise, recurse to get new dependents\n \n-                  Read_Withed_ALIs (Idread);\n+                     Read_Withed_ALIs (Idread);\n+                  end if;\n                end if;\n \n             --  If the ALI file has already been processed and is an interface,"}, {"sha": "707fec7f1f63df7adf174366fc0cfa173cbbd2a7", "filename": "gcc/ada/ali-util.ads", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f503788621ee1fadc3bcd506f8939b3cd82d6876/gcc%2Fada%2Fali-util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f503788621ee1fadc3bcd506f8939b3cd82d6876/gcc%2Fada%2Fali-util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali-util.ads?ref=f503788621ee1fadc3bcd506f8939b3cd82d6876", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -100,11 +100,15 @@ package ALI.Util is\n    -- Subprograms for Manipulating ALI Information --\n    --------------------------------------------------\n \n-   procedure Read_Withed_ALIs (Id : ALI_Id);\n+   procedure Read_Withed_ALIs\n+     (Id            : ALI_Id;\n+      Ignore_Errors : Boolean := False);\n    --  Process an ALI file which has been read and scanned by looping through\n    --  all withed units in the ALI file, checking if they have been processed.\n    --  Each unit that has not yet been processed will be read, scanned, and\n-   --  processed recursively.\n+   --  processed recursively. If Ignore_Errors is True, then failure to read an\n+   --  ALI file is not reported as an error, and scanning continues with other\n+   --  ALI files.\n \n    procedure Set_Source_Table (A : ALI_Id);\n    --  Build source table entry corresponding to the ALI file whose id is A"}, {"sha": "6ff415def982ae19722f655af8ac2e250334f8e7", "filename": "gcc/ada/aux-io.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f503788621ee1fadc3bcd506f8939b3cd82d6876/gcc%2Fada%2Faux-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f503788621ee1fadc3bcd506f8939b3cd82d6876/gcc%2Fada%2Faux-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faux-io.c?ref=f503788621ee1fadc3bcd506f8939b3cd82d6876", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *           Copyright (C) 1992-2009 Free Software Foundation, Inc.         *\n+ *           Copyright (C) 1992-2011, Free Software Foundation, Inc.        *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -39,6 +39,16 @@\n #include \"system.h\"\n #endif\n \n+/* Don't use macros versions of this functions on VxWorks since they cause\n+   imcompatible changes in some VxWorks versions */\n+#ifdef __vxworks\n+#undef getchar\n+#undef putchar\n+#undef feof\n+#undef ferror\n+#undef fileno\n+#endif\n+\n /* Function wrappers are needed to access the values from Ada which are\n    defined as C macros.  */\n "}, {"sha": "2564e4d3c473d5b022eb3b83f25d4b68e3eebb47", "filename": "gcc/ada/cio.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f503788621ee1fadc3bcd506f8939b3cd82d6876/gcc%2Fada%2Fcio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f503788621ee1fadc3bcd506f8939b3cd82d6876/gcc%2Fada%2Fcio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcio.c?ref=f503788621ee1fadc3bcd506f8939b3cd82d6876", "patch": "@@ -54,9 +54,14 @@ extern \"C\" {\n #undef stdout\n #endif\n \n-#ifdef VTHREADS\n-#undef putchar\n+/* Don't use macros versions of this functions on VxWorks since they cause\n+   imcompatible changes in some VxWorks versions */\n+#ifdef __vxworks\n #undef getchar\n+#undef putchar\n+#undef feof\n+#undef ferror\n+#undef fileno\n #endif\n \n #ifdef RTX"}, {"sha": "9b2e9b272b55302851045ebaaf12dd0856de209a", "filename": "gcc/ada/cstreams.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f503788621ee1fadc3bcd506f8939b3cd82d6876/gcc%2Fada%2Fcstreams.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f503788621ee1fadc3bcd506f8939b3cd82d6876/gcc%2Fada%2Fcstreams.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstreams.c?ref=f503788621ee1fadc3bcd506f8939b3cd82d6876", "patch": "@@ -70,6 +70,16 @@ extern \"C\" {\n \n #endif\n \n+/* Don't use macros versions of this functions on VxWorks since they cause\n+   imcompatible changes in some VxWorks versions */\n+#ifdef __vxworks\n+#undef getchar\n+#undef putchar\n+#undef feof\n+#undef ferror\n+#undef fileno\n+#endif\n+\n /* The _IONBF value in MINGW32 stdio.h is wrong.  */\n #if defined (WINNT) || defined (_WINNT)\n #if OLD_MINGW"}, {"sha": "464fdef40241c2303cbc9ae130d3bf5e6d607340", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f503788621ee1fadc3bcd506f8939b3cd82d6876/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f503788621ee1fadc3bcd506f8939b3cd82d6876/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=f503788621ee1fadc3bcd506f8939b3cd82d6876", "patch": "@@ -5129,9 +5129,13 @@ package body Exp_Ch3 is\n                              Loc))));\n                end;\n \n-            elsif Is_Tagged_Type (Typ)\n-              and then Is_CPP_Constructor_Call (Expr)\n-            then\n+            --  Handle C++ constructor calls. Note that we do not check that\n+            --  Typ is a tagged type since the equivalent Ada type of a C++\n+            --  class that has no virtual methods is a non-tagged limited\n+            --  record type.\n+\n+            elsif Is_CPP_Constructor_Call (Expr) then\n+\n                --  The call to the initialization procedure does NOT freeze the\n                --  object being initialized.\n "}, {"sha": "c075ae542e242ed2a4dddcc84054901faaf0e661", "filename": "gcc/ada/g-socthi-vms.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f503788621ee1fadc3bcd506f8939b3cd82d6876/gcc%2Fada%2Fg-socthi-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f503788621ee1fadc3bcd506f8939b3cd82d6876/gcc%2Fada%2Fg-socthi-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vms.adb?ref=f503788621ee1fadc3bcd506f8939b3cd82d6876", "patch": "@@ -41,9 +41,8 @@ package body GNAT.Sockets.Thin is\n    type VMS_Msghdr is new Msghdr;\n    pragma Pack (VMS_Msghdr);\n    --  On VMS 8.x (unlike other platforms), struct msghdr is packed, so a\n-   --  specific derived type is required.\n-   --  This structure was not packed on VMS 7.3, so sendmsg and recvmsg fail on\n-   --  earlier VMS versions.\n+   --  specific derived type is required. This structure was not packed on\n+   --  VMS 7.3, so sendmsg and recvmsg fail on earlier VMS versions.\n \n    Non_Blocking_Sockets : aliased Fd_Set;\n    --  When this package is initialized with Process_Blocking_IO set to True,"}, {"sha": "c8129e9ecbdeb8a46465cd864fe6a8f850f20172", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f503788621ee1fadc3bcd506f8939b3cd82d6876/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f503788621ee1fadc3bcd506f8939b3cd82d6876/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=f503788621ee1fadc3bcd506f8939b3cd82d6876", "patch": "@@ -796,6 +796,12 @@ package body Lib.Writ is\n                       or else\n                      Nkind (Unit (Cunit)) in N_Generic_Renaming_Declaration)\n                     and then Generic_May_Lack_ALI (Fname))\n+\n+              --  In Alfa mode, always generate the dependencies on ALI\n+              --  files, which are required to compute frame conditions\n+              --  of subprograms.\n+\n+              or else Alfa_Mode\n             then\n                Write_Info_Tab (25);\n "}, {"sha": "af05a91199b89003e934f826d1f6862ed264ed60", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f503788621ee1fadc3bcd506f8939b3cd82d6876/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f503788621ee1fadc3bcd506f8939b3cd82d6876/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=f503788621ee1fadc3bcd506f8939b3cd82d6876", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *         Copyright (C) 1992-2010, Free Software Foundation, Inc.          *\n+ *         Copyright (C) 1992-2011, Free Software Foundation, Inc.          *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -69,6 +69,16 @@ extern struct tm *localtime_r(const time_t *, struct tm *);\n \n #include \"adaint.h\"\n \n+/* Don't use macros versions of this functions on VxWorks since they cause\n+   imcompatible changes in some VxWorks versions */\n+#ifdef __vxworks\n+#undef getchar\n+#undef putchar\n+#undef feof\n+#undef ferror\n+#undef fileno\n+#endif\n+\n /*\n    mode_read_text\n    open text file for reading"}]}