{"sha": "3eae4643be652fff3b1756f4462e1941da58973d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VhZTQ2NDNiZTY1MmZmZjNiMTc1NmY0NDYyZTE5NDFkYTU4OTczZA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-10-27T14:47:55Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-10-27T14:47:55Z"}, "message": "combine.c: Fix comment formatting.\n\n\t* combine.c: Fix comment formatting.\n\t* loop.c: Likewise.\n\t* real.c: Likewise.\n\t* regclass.c: Likewise.\n\t* regmove.c: Likewise.\n\t* regrename.c: Likewise.\n\t* reg-stack.c: Likewise.\n\t* reload1.c: Likewise.\n\t* reload.c: Likewise.\n\t* reload.h: Likewise.\n\t* unroll.c: Likewise.\n\nFrom-SVN: r58583", "tree": {"sha": "64a1566fa3db7d5ae984e75042d42c81d8226d00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64a1566fa3db7d5ae984e75042d42c81d8226d00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3eae4643be652fff3b1756f4462e1941da58973d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eae4643be652fff3b1756f4462e1941da58973d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eae4643be652fff3b1756f4462e1941da58973d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eae4643be652fff3b1756f4462e1941da58973d/comments", "author": null, "committer": null, "parents": [{"sha": "e591c83de733b7de518e12d0298709c48311bad4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e591c83de733b7de518e12d0298709c48311bad4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e591c83de733b7de518e12d0298709c48311bad4"}], "stats": {"total": 50, "additions": 32, "deletions": 18}, "files": [{"sha": "7d1ef858a0073e7847c4ccfd834311cd0f833dac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae4643be652fff3b1756f4462e1941da58973d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae4643be652fff3b1756f4462e1941da58973d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3eae4643be652fff3b1756f4462e1941da58973d", "patch": "@@ -1,3 +1,17 @@\n+2002-10-27  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* combine.c: Fix comment formatting.\n+\t* loop.c: Likewise.\n+\t* real.c: Likewise.\n+\t* regclass.c: Likewise.\n+\t* regmove.c: Likewise.\n+\t* regrename.c: Likewise.\n+\t* reg-stack.c: Likewise.\n+\t* reload1.c: Likewise.\n+\t* reload.c: Likewise.\n+\t* reload.h: Likewise.\n+\t* unroll.c: Likewise.\n+\n 2002-10-27  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* reload1.c (reload): Fix a comment typo."}, {"sha": "d6dfdf68d171d35348e0873b90e74a550c27610f", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae4643be652fff3b1756f4462e1941da58973d/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae4643be652fff3b1756f4462e1941da58973d/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=3eae4643be652fff3b1756f4462e1941da58973d", "patch": "@@ -11913,7 +11913,7 @@ mark_used_regs_combine (x)\n \t{\n \t  unsigned int endregno, r;\n \n-\t  /* None of this applies to the stack, frame or arg pointers */\n+\t  /* None of this applies to the stack, frame or arg pointers.  */\n \t  if (regno == STACK_POINTER_REGNUM\n #if FRAME_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n \t      || regno == HARD_FRAME_POINTER_REGNUM\n@@ -12021,7 +12021,7 @@ move_deaths (x, maybe_kill_insn, from_cuid, to_insn, pnotes)\n       rtx where_dead = reg_last_death[regno];\n       rtx before_dead, after_dead;\n \n-      /* Don't move the register if it gets killed in between from and to */\n+      /* Don't move the register if it gets killed in between from and to.  */\n       if (maybe_kill_insn && reg_set_p (x, maybe_kill_insn)\n \t  && ! reg_referenced_p (x, maybe_kill_insn))\n \treturn;"}, {"sha": "9461530e89467b0d50b7c09573a1055e40e68f5b", "filename": "gcc/loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae4643be652fff3b1756f4462e1941da58973d/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae4643be652fff3b1756f4462e1941da58973d/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=3eae4643be652fff3b1756f4462e1941da58973d", "patch": "@@ -2475,7 +2475,7 @@ prescan_loop (loop)\n   loop_info->first_loop_store_insn = NULL_RTX;\n   loop_info->mems_idx = 0;\n   loop_info->num_mem_sets = 0;\n-  /* If loop opts run twice, this was set on 1st pass for 2nd. */\n+  /* If loop opts run twice, this was set on 1st pass for 2nd.  */\n   loop_info->preconditioned = NOTE_PRECONDITIONED (end);\n \n   for (insn = start; insn && GET_CODE (insn) != CODE_LABEL;"}, {"sha": "33f8459804602bfb2e271759507551033f4caf81", "filename": "gcc/real.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae4643be652fff3b1756f4462e1941da58973d/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae4643be652fff3b1756f4462e1941da58973d/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=3eae4643be652fff3b1756f4462e1941da58973d", "patch": "@@ -1635,7 +1635,7 @@ real_to_decimal (str, r_orig, buf_size, digits, crop_trailing_zeros)\n \n   digit = rtd_divmod (&r, &pten);\n \n-  /* Be prepared for error in that division via underflow ... */\n+  /* Be prepared for error in that division via underflow ...  */\n   if (digit == 0 && cmp_significand_0 (&r))\n     {\n       /* Multiply by 10 and try again.  */"}, {"sha": "4d37cecc8865b78bf4b48b5f5c865d88bbb1459c", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae4643be652fff3b1756f4462e1941da58973d/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae4643be652fff3b1756f4462e1941da58973d/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=3eae4643be652fff3b1756f4462e1941da58973d", "patch": "@@ -222,7 +222,7 @@ enum emit_where\n /* The block we're currently working on.  */\n static basic_block current_block;\n \n-/* This is the register file for all register after conversion */\n+/* This is the register file for all register after conversion.  */\n static rtx\n   FP_mode_reg[LAST_STACK_REG+1-FIRST_STACK_REG][(int) MAX_MACHINE_MODE];\n \n@@ -379,7 +379,7 @@ straighten_stack (insn, regstack)\n   change_stack (insn, regstack, &temp_stack, EMIT_AFTER);\n }\n \n-/* Pop a register from the stack */\n+/* Pop a register from the stack.  */\n \n static void\n pop_stack (regstack, regno)\n@@ -390,7 +390,7 @@ pop_stack (regstack, regno)\n \n   CLEAR_HARD_REG_BIT (regstack->reg_set, regno);\n   regstack->top--;\n-  /* If regno was not at the top of stack then adjust stack */\n+  /* If regno was not at the top of stack then adjust stack.  */\n   if (regstack->reg [top] != regno)\n     {\n       int i;\n@@ -1125,7 +1125,7 @@ move_for_stack_reg (insn, regstack, pat)\n \t  return;\n \t}\n \n-      /* The destination ought to be dead */\n+      /* The destination ought to be dead.  */\n       if (get_hard_regnum (regstack, dest) >= FIRST_STACK_REG)\n \tabort ();\n \n@@ -1181,7 +1181,7 @@ move_for_stack_reg (insn, regstack, pat)\n \t stack. The stack mapping is changed to reflect that DEST is\n \t now at top of stack.  */\n \n-      /* The destination ought to be dead */\n+      /* The destination ought to be dead.  */\n       if (get_hard_regnum (regstack, dest) >= FIRST_STACK_REG)\n \tabort ();\n "}, {"sha": "28c2a6f10811dd230ab25ce0d43c2aa6fbfcedef", "filename": "gcc/regclass.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae4643be652fff3b1756f4462e1941da58973d/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae4643be652fff3b1756f4462e1941da58973d/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=3eae4643be652fff3b1756f4462e1941da58973d", "patch": "@@ -292,7 +292,7 @@ init_reg_sets ()\n   memcpy (call_used_regs, initial_call_used_regs, sizeof call_used_regs);\n   memset (global_regs, 0, sizeof global_regs);\n \n-  /* Do any additional initialization regsets may need */\n+  /* Do any additional initialization regsets may need.  */\n   INIT_ONCE_REG_SET ();\n \n #ifdef REG_ALLOC_ORDER\n@@ -2296,7 +2296,7 @@ allocate_reg_info (num_regs, new_p, renumber_p)\n   if (renumber_p)\n     reg_renumber = renumber;\n \n-  /* Tell the regset code about the new number of registers */\n+  /* Tell the regset code about the new number of registers.  */\n   MAX_REGNO_REG_SET (num_regs, new_p, renumber_p);\n }\n "}, {"sha": "c39e5cce7b7463225bcbd98f146aadfcd7ed43dd", "filename": "gcc/regmove.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae4643be652fff3b1756f4462e1941da58973d/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae4643be652fff3b1756f4462e1941da58973d/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=3eae4643be652fff3b1756f4462e1941da58973d", "patch": "@@ -793,7 +793,7 @@ copy_src_to_dest (insn, src, dest, old_max_uid)\n       p_move_notes = &REG_NOTES (move_insn);\n       p_insn_notes = &REG_NOTES (insn);\n \n-      /* Move any notes mentioning src to the move instruction */\n+      /* Move any notes mentioning src to the move instruction.  */\n       for (link = REG_NOTES (insn); link != NULL_RTX; link = next)\n \t{\n \t  next = XEXP (link, 1);\n@@ -812,7 +812,7 @@ copy_src_to_dest (insn, src, dest, old_max_uid)\n       *p_move_notes = NULL_RTX;\n       *p_insn_notes = NULL_RTX;\n \n-      /* Is the insn the head of a basic block?  If so extend it */\n+      /* Is the insn the head of a basic block?  If so extend it.  */\n       insn_uid = INSN_UID (insn);\n       move_uid = INSN_UID (move_insn);\n       if (insn_uid < old_max_uid)"}, {"sha": "ac1043d38b959653045356a44390a6cae746accf", "filename": "gcc/regrename.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae4643be652fff3b1756f4462e1941da58973d/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae4643be652fff3b1756f4462e1941da58973d/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=3eae4643be652fff3b1756f4462e1941da58973d", "patch": "@@ -738,7 +738,7 @@ scan_rtx (insn, loc, class, action, type, earlyclobber)\n     }\n }\n \n-/* Build def/use chain */\n+/* Build def/use chain.  */\n \n static struct du_chain *\n build_def_use (bb)"}, {"sha": "97b35218caa1751b9a5762ed31d8665ce80c7b2f", "filename": "gcc/reload.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae4643be652fff3b1756f4462e1941da58973d/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae4643be652fff3b1756f4462e1941da58973d/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=3eae4643be652fff3b1756f4462e1941da58973d", "patch": "@@ -6004,7 +6004,7 @@ copy_replacements_1 (px, py, orig_replacements)\n     }\n }\n \n-/* Change any replacements being done to *X to be done to *Y */\n+/* Change any replacements being done to *X to be done to *Y.  */\n \n void\n move_replacements (x, y)"}, {"sha": "8d4e00038476e4ca624bd3eb4197c009eab8f485", "filename": "gcc/reload1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae4643be652fff3b1756f4462e1941da58973d/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae4643be652fff3b1756f4462e1941da58973d/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=3eae4643be652fff3b1756f4462e1941da58973d", "patch": "@@ -139,7 +139,7 @@ static int reg_reloaded_contents[FIRST_PSEUDO_REGISTER];\n    when reg_reloaded_valid is set for this register.  */\n static rtx reg_reloaded_insn[FIRST_PSEUDO_REGISTER];\n \n-/* Indicate if reg_reloaded_insn / reg_reloaded_contents is valid */\n+/* Indicate if reg_reloaded_insn / reg_reloaded_contents is valid.  */\n static HARD_REG_SET reg_reloaded_valid;\n /* Indicate if the register was dead at the end of the reload.\n    This is only valid if reg_reloaded_contents is set and valid.  */\n@@ -1497,7 +1497,7 @@ calculate_needs_all_insns (global)\n \t\t  && REGNO (SET_SRC (set)) >= FIRST_PSEUDO_REGISTER)\n \t\t{\n \t\t  delete_insn (insn);\n-\t\t  /* Delete it from the reload chain */\n+\t\t  /* Delete it from the reload chain.  */\n \t\t  if (chain->prev)\n \t\t    chain->prev->next = next;\n \t\t  else"}, {"sha": "3dea4510657bb073963eb8a0c6ff9e60999d33fd", "filename": "gcc/unroll.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae4643be652fff3b1756f4462e1941da58973d/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae4643be652fff3b1756f4462e1941da58973d/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=3eae4643be652fff3b1756f4462e1941da58973d", "patch": "@@ -1136,7 +1136,7 @@ unroll_loop (loop, insn_count, strength_reduce_p)\n   /* And whether the loop has been preconditioned.  */\n   loop_info->preconditioned = loop_preconditioned;\n \n-  /* Remember whether it was preconditioned for the second loop pass. */\n+  /* Remember whether it was preconditioned for the second loop pass.  */\n   NOTE_PRECONDITIONED (loop->end) = loop_preconditioned;\n \n   /* For each biv and giv, determine whether it can be safely split into"}]}