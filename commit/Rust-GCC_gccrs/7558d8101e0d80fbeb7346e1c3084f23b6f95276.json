{"sha": "7558d8101e0d80fbeb7346e1c3084f23b6f95276", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU1OGQ4MTAxZTBkODBmYmViNzM0NmUxYzMwODRmMjNiNmY5NTI3Ng==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-03-27T15:51:41Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-03-27T15:51:41Z"}, "message": "fstream.tcc (basic_filebuf<>::underflow): Don't call codecvt::in at all if _M_ext_next >= _M_ext_end.\n\n2007-03-27  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/fstream.tcc (basic_filebuf<>::underflow):\n\tDon't call codecvt::in at all if _M_ext_next >= _M_ext_end.\n\t* testsuite/27_io/basic_filebuf/underflow/char/3.cc: New.\n\nFrom-SVN: r123260", "tree": {"sha": "612c1978f81db69ab46275d50d7b7914b9ab1a2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/612c1978f81db69ab46275d50d7b7914b9ab1a2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7558d8101e0d80fbeb7346e1c3084f23b6f95276", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7558d8101e0d80fbeb7346e1c3084f23b6f95276", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7558d8101e0d80fbeb7346e1c3084f23b6f95276", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7558d8101e0d80fbeb7346e1c3084f23b6f95276/comments", "author": null, "committer": null, "parents": [{"sha": "c21c775aebda19b465d7fef576fb078cabac4a71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c21c775aebda19b465d7fef576fb078cabac4a71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c21c775aebda19b465d7fef576fb078cabac4a71"}], "stats": {"total": 104, "additions": 99, "deletions": 5}, "files": [{"sha": "a97306552e1ac7a1901f57a098a37b9972f39498", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7558d8101e0d80fbeb7346e1c3084f23b6f95276/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7558d8101e0d80fbeb7346e1c3084f23b6f95276/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7558d8101e0d80fbeb7346e1c3084f23b6f95276", "patch": "@@ -1,3 +1,9 @@\n+2007-03-27  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/fstream.tcc (basic_filebuf<>::underflow):\n+\tDon't call codecvt::in at all if _M_ext_next >= _M_ext_end.\n+\t* testsuite/27_io/basic_filebuf/underflow/char/3.cc: New.\n+\n 2007-03-26  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/c_compatibility/complex.h: Without"}, {"sha": "54e75dba8ededbfedbd1e02419f6fbd4c86f61d3", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7558d8101e0d80fbeb7346e1c3084f23b6f95276/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7558d8101e0d80fbeb7346e1c3084f23b6f95276/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=7558d8101e0d80fbeb7346e1c3084f23b6f95276", "patch": "@@ -279,16 +279,19 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t      _M_ext_end += __elen;\n \t\t    }\n \n-\t\t  char_type* __iend;\n-\t\t  __r = _M_codecvt->in(_M_state_cur, _M_ext_next,\n-\t\t\t\t       _M_ext_end, _M_ext_next, this->eback(),\n-\t\t\t\t       this->eback() + __buflen, __iend);\n+\t\t  char_type* __iend = this->eback();\n+\t\t  if (_M_ext_next < _M_ext_end)\n+\t\t    __r = _M_codecvt->in(_M_state_cur, _M_ext_next,\n+\t\t\t\t\t _M_ext_end, _M_ext_next,\n+\t\t\t\t\t this->eback(),\n+\t\t\t\t\t this->eback() + __buflen, __iend);\n \t\t  if (__r == codecvt_base::noconv)\n \t\t    {\n \t\t      size_t __avail = _M_ext_end - _M_ext_buf;\n \t\t      __ilen = std::min(__avail, __buflen);\n \t\t      traits_type::copy(this->eback(),\n-\t\t\t\t\treinterpret_cast<char_type*>(_M_ext_buf), __ilen);\n+\t\t\t\t\treinterpret_cast<char_type*>\n+\t\t\t\t\t(_M_ext_buf), __ilen);\n \t\t      _M_ext_next = _M_ext_buf + __ilen;\n \t\t    }\n \t\t  else"}, {"sha": "d76a52efa2c42b706ae5e97b1f126bc35cba217f", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/underflow/char/3.cc", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7558d8101e0d80fbeb7346e1c3084f23b6f95276/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7558d8101e0d80fbeb7346e1c3084f23b6f95276/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fchar%2F3.cc?ref=7558d8101e0d80fbeb7346e1c3084f23b6f95276", "patch": "@@ -0,0 +1,85 @@\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+// { dg-require-fileio \"\" }\n+\n+#include <fstream>\n+#include <cctype>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+class Mycvtcc\n+: public std::codecvt<char, char, std::mbstate_t>\n+{\n+protected:\n+  virtual result\n+  do_in(state_type&,\n+\tconst extern_type* from, const extern_type* from_end,\n+\tconst extern_type*& from_next,\n+\tintern_type* to, intern_type* to_limit,\n+\tintern_type*& to_next) const\n+  {\n+    from_next = from, to_next = to;\n+    \n+    if (from_next == from_end || to_next == to_limit)\n+      return partial;\n+    \n+    if (std::islower(*from_next))\n+      *to_next = std::toupper(*from_next);\n+    else\n+      *to_next = *from_next;\n+    ++from_next, ++to_next;\n+    return ok;\n+  }\n+\n+  virtual bool\n+  do_always_noconv() const throw()\n+  { return false; }\n+};\n+\n+// See Novell Bug 255122\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  const char* name = \"tmp_underflow_3.tst\";\n+  filebuf fbuf, fbufx;\n+\n+  fbuf.open(name, ios_base::out | ios_base::trunc);\n+  VERIFY( fbuf.sputc('a') == 'a' );\n+  VERIFY( fbuf.sputc('b') == 'b' );\n+  VERIFY( fbuf.sputc('\\n') == '\\n' );\n+  fbuf.close();\n+\n+  fbufx.pubimbue(locale(locale::classic(), new Mycvtcc));\n+  fbufx.open(name, ios_base::in);\n+  VERIFY( fbufx.sbumpc() == 'A' );\n+  VERIFY( fbufx.sbumpc() == 'B' );\n+  VERIFY( fbufx.sbumpc() == '\\n' );\n+  VERIFY( fbufx.sbumpc() == filebuf::traits_type::eof() );\n+  fbufx.close();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}