{"sha": "3f8dfdd4dff477332819e8050733ddc3c66740c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y4ZGZkZDRkZmY0NzczMzI4MTllODA1MDczM2RkYzNjNjY3NDBjMA==", "commit": {"author": {"name": "Thomas Fitzsimmons", "email": "fitzsim@redhat.com", "date": "2005-02-23T01:05:46Z"}, "committer": {"name": "Thomas Fitzsimmons", "email": "fitzsim@gcc.gnu.org", "date": "2005-02-23T01:05:46Z"}, "message": "re PR awt/20029 (Robot needs XTest)\n\n2005-02-22  Thomas Fitzsimmons  <fitzsim@redhat.com>\n\n\tPR libgcj/20029:\n\t* Makefile.am (lib_gnu_java_awt_peer_gtk_la_CFLAGS): Add X_CFLAGS.\n\t(lib_gnu_java_awt_peer_gtk_la_LDFLAGS): Add X_LIBS and -lXtst.\n\t* Makefile.in: Regenerate.\n\t* configure.ac: Check for libXtst.\n\t* configure: Regenerate.\n\nFrom-SVN: r95428", "tree": {"sha": "881c7e167023419a113c96509d6a7ec7af4ae71f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/881c7e167023419a113c96509d6a7ec7af4ae71f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f8dfdd4dff477332819e8050733ddc3c66740c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f8dfdd4dff477332819e8050733ddc3c66740c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f8dfdd4dff477332819e8050733ddc3c66740c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f8dfdd4dff477332819e8050733ddc3c66740c0/comments", "author": null, "committer": null, "parents": [{"sha": "732272ca15e24af9f85739c99c25a302947895f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/732272ca15e24af9f85739c99c25a302947895f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/732272ca15e24af9f85739c99c25a302947895f4"}], "stats": {"total": 101, "additions": 97, "deletions": 4}, "files": [{"sha": "f12fe286373c4588604cffab51f02b58472177f3", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8dfdd4dff477332819e8050733ddc3c66740c0/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8dfdd4dff477332819e8050733ddc3c66740c0/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=3f8dfdd4dff477332819e8050733ddc3c66740c0", "patch": "@@ -1,3 +1,12 @@\n+2005-02-22  Thomas Fitzsimmons  <fitzsim@redhat.com>\n+\n+\tPR libgcj/20029:\n+\t* Makefile.am (lib_gnu_java_awt_peer_gtk_la_CFLAGS): Add X_CFLAGS.\n+\t(lib_gnu_java_awt_peer_gtk_la_LDFLAGS): Add X_LIBS and -lXtst.\n+\t* Makefile.in: Regenerate.\n+\t* configure.ac: Check for libXtst.\n+\t* configure: Regenerate.\n+\n 2005-02-22  Mark Wielaard  <address@bogus.example.com>\n \n \t* java/security/AlgorithmParameterGenerator.java (getInstance):"}, {"sha": "14edb061c24627cf1b050dbc8599735272a75cd8", "filename": "libjava/Makefile.am", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8dfdd4dff477332819e8050733ddc3c66740c0/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8dfdd4dff477332819e8050733ddc3c66740c0/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=3f8dfdd4dff477332819e8050733ddc3c66740c0", "patch": "@@ -456,13 +456,13 @@ jni/classpath/primlib.h\n lib_gnu_java_awt_peer_gtk_la_CFLAGS = \\\n \t-Ijniinclude -I$(srcdir)/jni/classpath \\\n \t-I$(srcdir)/jni/gtk-peer $(PEDANTIC_CFLAGS) $(GTK_CFLAGS) $(LIBART_CFLAGS) \\\n-\t$(CAIRO_CFLAGS) $(PANGOFT2_CFLAGS)\n+\t$(X_CFLAGS) $(CAIRO_CFLAGS) $(PANGOFT2_CFLAGS)\n lib_gnu_java_awt_peer_gtk_la_GCJFLAGS = $(AM_GCJFLAGS) -fjni\n lib_gnu_java_awt_peer_gtk_la_LIBADD = $(GTK_LIBS) $(GLIB_LIBS) $(LIBART_LIBS) $(CAIRO_LIBS) $(PANGOFT2_LIBS)\n lib_gnu_java_awt_peer_gtk_la_DEPENDENCIES = $(gtk_jni_headers) libgcj-@gcc_version@.jar libgcj.la libgcj.spec\n ## The mysterious backslash in the grep pattern is consumed by make.\n lib_gnu_java_awt_peer_gtk_la_LDFLAGS = \\\n-        -version-info `grep -v '^\\#' $(srcdir)/libtool-version` $(LIBGCJ_LD_SYMBOLIC)\n+        -version-info `grep -v '^\\#' $(srcdir)/libtool-version` $(LIBGCJ_LD_SYMBOLIC) $(X_LIBS) -lXtst\n lib_gnu_java_awt_peer_gtk_la_LINK = $(LIBLINK)\n \n libjawt_la_SOURCES = jawt.c"}, {"sha": "a8d26c44c05aefbea229c526bda324d8c0e75d60", "filename": "libjava/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8dfdd4dff477332819e8050733ddc3c66740c0/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8dfdd4dff477332819e8050733ddc3c66740c0/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=3f8dfdd4dff477332819e8050733ddc3c66740c0", "patch": "@@ -5303,13 +5303,13 @@ jni/classpath/primlib.h\n lib_gnu_java_awt_peer_gtk_la_CFLAGS = \\\n \t-Ijniinclude -I$(srcdir)/jni/classpath \\\n \t-I$(srcdir)/jni/gtk-peer $(PEDANTIC_CFLAGS) $(GTK_CFLAGS) $(LIBART_CFLAGS) \\\n-\t$(CAIRO_CFLAGS) $(PANGOFT2_CFLAGS)\n+\t$(X_CFLAGS) $(CAIRO_CFLAGS) $(PANGOFT2_CFLAGS)\n \n lib_gnu_java_awt_peer_gtk_la_GCJFLAGS = $(AM_GCJFLAGS) -fjni\n lib_gnu_java_awt_peer_gtk_la_LIBADD = $(GTK_LIBS) $(GLIB_LIBS) $(LIBART_LIBS) $(CAIRO_LIBS) $(PANGOFT2_LIBS)\n lib_gnu_java_awt_peer_gtk_la_DEPENDENCIES = $(gtk_jni_headers) libgcj-@gcc_version@.jar libgcj.la libgcj.spec\n lib_gnu_java_awt_peer_gtk_la_LDFLAGS = \\\n-        -version-info `grep -v '^\\#' $(srcdir)/libtool-version` $(LIBGCJ_LD_SYMBOLIC)\n+        -version-info `grep -v '^\\#' $(srcdir)/libtool-version` $(LIBGCJ_LD_SYMBOLIC) $(X_LIBS) -lXtst\n \n lib_gnu_java_awt_peer_gtk_la_LINK = $(LIBLINK)\n libjawt_la_SOURCES = jawt.c"}, {"sha": "7dee1e010dcbda519c5548dbef62167899525148", "filename": "libjava/configure", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8dfdd4dff477332819e8050733ddc3c66740c0/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8dfdd4dff477332819e8050733ddc3c66740c0/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=3f8dfdd4dff477332819e8050733ddc3c66740c0", "patch": "@@ -13104,6 +13104,85 @@ echo \"$as_me: error: Library requirements (libart-2.0 >= 2.1) not met; consider\n \n \n \n+\n+      # We require the XTest Extension to support java.awt.Robot.\n+      echo \"$as_me:$LINENO: checking for XTestQueryExtension in -lXtst\" >&5\n+echo $ECHO_N \"checking for XTestQueryExtension in -lXtst... $ECHO_C\" >&6\n+if test \"${ac_cv_lib_Xtst_XTestQueryExtension+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lXtst ${X_LIBS} $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char XTestQueryExtension ();\n+int\n+main ()\n+{\n+XTestQueryExtension ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_lib_Xtst_XTestQueryExtension=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_lib_Xtst_XTestQueryExtension=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_lib_Xtst_XTestQueryExtension\" >&5\n+echo \"${ECHO_T}$ac_cv_lib_Xtst_XTestQueryExtension\" >&6\n+if test $ac_cv_lib_Xtst_XTestQueryExtension = yes; then\n+  true\n+else\n+  { { echo \"$as_me:$LINENO: error: libXtst not found, required by java.awt.Robot\" >&5\n+echo \"$as_me: error: libXtst not found, required by java.awt.Robot\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+\n    fi\n \n    # On Solaris, and maybe other architectures, the Boehm collector"}, {"sha": "c7da4f591f218b20e641d52043a75524816e24de", "filename": "libjava/configure.ac", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8dfdd4dff477332819e8050733ddc3c66740c0/libjava%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8dfdd4dff477332819e8050733ddc3c66740c0/libjava%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.ac?ref=3f8dfdd4dff477332819e8050733ddc3c66740c0", "patch": "@@ -1014,6 +1014,11 @@ else\n       PKG_CHECK_MODULES(LIBART, libart-2.0 >= 2.1)\n       AC_SUBST(LIBART_CFLAGS)\n       AC_SUBST(LIBART_LIBS)\n+\n+      # We require the XTest Extension to support java.awt.Robot.\n+      AC_CHECK_LIB([Xtst], [XTestQueryExtension], [true],\n+\t\t   [AC_MSG_ERROR([libXtst not found, required by java.awt.Robot])],\n+\t\t   [${X_LIBS}])\n    fi\n \n    # On Solaris, and maybe other architectures, the Boehm collector"}]}