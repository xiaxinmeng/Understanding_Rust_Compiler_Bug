{"sha": "49fedf5af48d844f32b942fc00f4de155e736f34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDlmZWRmNWFmNDhkODQ0ZjMyYjk0MmZjMDBmNGRlMTU1ZTczNmYzNA==", "commit": {"author": {"name": "Simon Martin", "email": "simartin@users.sourceforge.net", "date": "2007-03-02T22:09:20Z"}, "committer": {"name": "Simon Martin", "email": "simartin@gcc.gnu.org", "date": "2007-03-02T22:09:20Z"}, "message": "re PR c++/28253 (ICE with invalid covariant return)\n\n2007-03-02  Simon Martin  <simartin@users.sourceforge.net>\n\n\tPR c++/28253\n\t* class.c (update_vtable_entry_for_fn): Properly handle invalid overriders\n\tfor thunks.\n\nFrom-SVN: r122490", "tree": {"sha": "b77c456838fb371a3b3e6a4b05400e587472c033", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b77c456838fb371a3b3e6a4b05400e587472c033"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49fedf5af48d844f32b942fc00f4de155e736f34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49fedf5af48d844f32b942fc00f4de155e736f34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49fedf5af48d844f32b942fc00f4de155e736f34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49fedf5af48d844f32b942fc00f4de155e736f34/comments", "author": {"login": "simartin", "id": 935202, "node_id": "MDQ6VXNlcjkzNTIwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/935202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simartin", "html_url": "https://github.com/simartin", "followers_url": "https://api.github.com/users/simartin/followers", "following_url": "https://api.github.com/users/simartin/following{/other_user}", "gists_url": "https://api.github.com/users/simartin/gists{/gist_id}", "starred_url": "https://api.github.com/users/simartin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simartin/subscriptions", "organizations_url": "https://api.github.com/users/simartin/orgs", "repos_url": "https://api.github.com/users/simartin/repos", "events_url": "https://api.github.com/users/simartin/events{/privacy}", "received_events_url": "https://api.github.com/users/simartin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f9dedbe3f17b9b349674f51b6338ef2c0dd112b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9dedbe3f17b9b349674f51b6338ef2c0dd112b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9dedbe3f17b9b349674f51b6338ef2c0dd112b6"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "3319d7bb74b4e76acd56db7828822f8e9b6d9daa", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49fedf5af48d844f32b942fc00f4de155e736f34/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49fedf5af48d844f32b942fc00f4de155e736f34/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=49fedf5af48d844f32b942fc00f4de155e736f34", "patch": "@@ -1,3 +1,9 @@\n+2007-03-02  Simon Martin  <simartin@users.sourceforge.net>\n+\n+\tPR c++/28253\n+\t* class.c (update_vtable_entry_for_fn): Properly handle invalid overriders\n+\tfor thunks.\n+\n 2007-03-02  Geoffrey Keating  <geoffk@apple.com>\n \n \t* g++spec.c (lang_specific_driver): Add -lstdc++ when compiling"}, {"sha": "b39f532668661b04223a1ec50c44911753145d07", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49fedf5af48d844f32b942fc00f4de155e736f34/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49fedf5af48d844f32b942fc00f4de155e736f34/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=49fedf5af48d844f32b942fc00f4de155e736f34", "patch": "@@ -2097,7 +2097,8 @@ update_vtable_entry_for_fn (tree t, tree binfo, tree fn, tree* virtuals,\n \t\t\t\t   fixed_offset, virtual_offset);\n     }\n   else\n-    gcc_assert (!DECL_THUNK_P (fn));\n+    gcc_assert (DECL_INVALID_OVERRIDER_P (overrider_target) ||\n+\t\t!DECL_THUNK_P (fn));\n \n   /* Assume that we will produce a thunk that convert all the way to\n      the final overrider, and not to an intermediate virtual base.  */"}, {"sha": "cc6e940c5ca20c081a05c79e3093200f11cbece2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49fedf5af48d844f32b942fc00f4de155e736f34/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49fedf5af48d844f32b942fc00f4de155e736f34/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=49fedf5af48d844f32b942fc00f4de155e736f34", "patch": "@@ -1,3 +1,8 @@\n+2007-03-02  Simon Martin  <simartin@users.sourceforge.net>\n+\n+\tPR c++/28253\n+\t* g++.dg/inherit/covariant16.C: New test.\n+\n 2007-03-02  Geoffrey Keating  <geoffk@apple.com>\n \n \t* g++.dg/other/darwin-minversion-1.C: New."}, {"sha": "828b5b8f1a62b5e957e692071936cb0175b2b75d", "filename": "gcc/testsuite/g++.dg/inherit/covariant16.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49fedf5af48d844f32b942fc00f4de155e736f34/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49fedf5af48d844f32b942fc00f4de155e736f34/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant16.C?ref=49fedf5af48d844f32b942fc00f4de155e736f34", "patch": "@@ -0,0 +1,17 @@\n+/* PR c++/28253 This used to ICE. */\n+/* { dg-do \"compile\" } */\n+\n+struct A\n+{\n+  virtual A* foo();\n+};\n+\n+struct B : virtual A\n+{\n+  virtual B* foo(); /* { dg-error \"overriding\" } */\n+};\n+\n+struct C : B\n+{\n+  virtual C& foo(); /* { dg-error \"conflicting return type\" } */\n+};"}]}