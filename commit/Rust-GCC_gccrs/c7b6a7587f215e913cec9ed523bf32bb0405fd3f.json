{"sha": "c7b6a7587f215e913cec9ed523bf32bb0405fd3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdiNmE3NTg3ZjIxNWU5MTNjZWM5ZWQ1MjNiZjMyYmIwNDA1ZmQzZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-10-14T09:44:30Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-10-14T09:44:30Z"}, "message": "Support ofsetted parameters in local modref\n\n2020-10-14  Jan Hubicka  <hubicka@ucw.cz>\n\n\t* doc/invoke.texi: (ipa-jump-function-lookups): Document param.\n\t* ipa-modref.c (merge_call_side_effects): Use\n\tunadjusted_ptr_and_unit_offset.\n\t* ipa-prop.c (unadjusted_ptr_and_unit_offset): New function.\n\t* ipa-prop.h (unadjusted_ptr_and_unit_offset): Declare.\n\t* params.opt: (-param-ipa-jump-function-lookups): New.", "tree": {"sha": "e45f2f02121bc6526d9504f484dec745dea32fc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e45f2f02121bc6526d9504f484dec745dea32fc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7b6a7587f215e913cec9ed523bf32bb0405fd3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7b6a7587f215e913cec9ed523bf32bb0405fd3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7b6a7587f215e913cec9ed523bf32bb0405fd3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7b6a7587f215e913cec9ed523bf32bb0405fd3f/comments", "author": null, "committer": null, "parents": [{"sha": "87d75a11a5cb93668ae0bf6d97030e01b2eae3f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87d75a11a5cb93668ae0bf6d97030e01b2eae3f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87d75a11a5cb93668ae0bf6d97030e01b2eae3f2"}], "stats": {"total": 95, "additions": 92, "deletions": 3}, "files": [{"sha": "47aa69530ab63b110f2d048573e718876720297e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b6a7587f215e913cec9ed523bf32bb0405fd3f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b6a7587f215e913cec9ed523bf32bb0405fd3f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c7b6a7587f215e913cec9ed523bf32bb0405fd3f", "patch": "@@ -13456,6 +13456,9 @@ loop in the loop nest by a given number of iterations.  The strip\n length can be changed using the @option{loop-block-tile-size}\n parameter.\n \n+@item ipa-jump-function-lookups\n+Specifies number of statements visited during jump function offset discovery.\n+\n @item ipa-cp-value-list-size\n IPA-CP attempts to track all possible values and types passed to a function's\n parameter in order to propagate them and perform devirtualization."}, {"sha": "a6dfe1fc40128bb8245b3958de5169e6d73eae08", "filename": "gcc/ipa-modref.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b6a7587f215e913cec9ed523bf32bb0405fd3f/gcc%2Fipa-modref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b6a7587f215e913cec9ed523bf32bb0405fd3f/gcc%2Fipa-modref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref.c?ref=c7b6a7587f215e913cec9ed523bf32bb0405fd3f", "patch": "@@ -531,6 +531,10 @@ merge_call_side_effects (modref_summary *cur_summary,\n   for (unsigned i = 0; i < gimple_call_num_args (stmt); i++)\n     {\n       tree op = gimple_call_arg (stmt, i);\n+      bool offset_known;\n+      poly_int64 offset;\n+\n+      offset_known = unadjusted_ptr_and_unit_offset (op, &op, &offset);\n       if (TREE_CODE (op) == SSA_NAME\n \t  && SSA_NAME_IS_DEFAULT_DEF (op)\n \t  && TREE_CODE (SSA_NAME_VAR (op)) == PARM_DECL)\n@@ -547,15 +551,23 @@ merge_call_side_effects (modref_summary *cur_summary,\n \t      index++;\n \t    }\n \t  parm_map[i].parm_index = index;\n-\t  parm_map[i].parm_offset_known = true;\n-\t  parm_map[i].parm_offset = 0;\n+\t  parm_map[i].parm_offset_known = offset_known;\n+\t  parm_map[i].parm_offset = offset;\n \t}\n       else if (points_to_local_or_readonly_memory_p (op))\n \tparm_map[i].parm_index = -2;\n       else\n \tparm_map[i].parm_index = -1;\n       if (dump_file)\n-\tfprintf (dump_file, \" %i\", parm_map[i].parm_index);\n+\t{\n+\t  fprintf (dump_file, \" %i\", parm_map[i].parm_index);\n+\t  if (parm_map[i].parm_offset_known)\n+\t    {\n+\t      fprintf (dump_file, \" offset:\");\n+\t      print_dec ((poly_int64_pod)parm_map[i].parm_offset,\n+\t\t\t dump_file, SIGNED);\n+\t    }\n+\t}\n     }\n   if (dump_file)\n     fprintf (dump_file, \"\\n\");"}, {"sha": "63c652f4ffc1424edc6b6b085b91a236030ae178", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b6a7587f215e913cec9ed523bf32bb0405fd3f/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b6a7587f215e913cec9ed523bf32bb0405fd3f/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=c7b6a7587f215e913cec9ed523bf32bb0405fd3f", "patch": "@@ -52,6 +52,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"domwalk.h\"\n #include \"builtins.h\"\n #include \"tree-cfgcleanup.h\"\n+#include \"options.h\"\n \n /* Function summary where the parameter infos are actually stored. */\n ipa_node_params_t *ipa_node_params_sum = NULL;\n@@ -1222,6 +1223,73 @@ load_from_unmodified_param_or_agg (struct ipa_func_body_info *fbi,\n   return index;\n }\n \n+/* Walk pointer adjustemnts from OP (such as POINTER_PLUS and ADDR_EXPR)\n+   to find original pointer.  Initialize RET to the pointer which results from\n+   the walk.\n+   If offset is known return true and initialize OFFSET_RET.  */\n+\n+bool\n+unadjusted_ptr_and_unit_offset (tree op, tree *ret, poly_int64 *offset_ret)\n+{\n+  poly_int64 offset = 0;\n+  bool offset_known = true;\n+  int i;\n+\n+  for (i = 0; i < param_ipa_jump_function_lookups; i++)\n+    {\n+      if (TREE_CODE (op) == ADDR_EXPR)\n+\t{\n+\t  poly_int64 extra_offset = 0;\n+\t  tree base = get_addr_base_and_unit_offset (TREE_OPERAND (op, 0),\n+\t\t\t\t\t\t     &offset);\n+\t  if (!base)\n+\t    {\n+\t      base = get_base_address (TREE_OPERAND (op, 0));\n+\t      if (TREE_CODE (base) != MEM_REF)\n+\t\tbreak;\n+\t      offset_known = false;\n+\t    }\n+\t  else\n+\t    {\n+\t      if (TREE_CODE (base) != MEM_REF)\n+\t\tbreak;\n+\t      offset += extra_offset;\n+\t    }\n+\t  op = TREE_OPERAND (base, 0);\n+\t  if (mem_ref_offset (base).to_shwi (&extra_offset))\n+\t    offset += extra_offset;\n+\t  else\n+\t    offset_known = false;\n+\t}\n+      else if (TREE_CODE (op) == SSA_NAME\n+\t       && !SSA_NAME_IS_DEFAULT_DEF (op))\n+\t{\n+\t  gimple *pstmt = SSA_NAME_DEF_STMT (op);\n+\n+\t  if (gimple_assign_single_p (pstmt))\n+\t    op = gimple_assign_rhs1 (pstmt);\n+\t  else if (is_gimple_assign (pstmt)\n+\t\t   && gimple_assign_rhs_code (pstmt) == POINTER_PLUS_EXPR)\n+\t    {\n+\t      poly_int64 extra_offset = 0;\n+\t      if (ptrdiff_tree_p (gimple_assign_rhs2 (pstmt),\n+\t\t  &extra_offset))\n+\t\toffset += extra_offset;\n+\t      else\n+\t\toffset_known = false;\n+\t      op = gimple_assign_rhs1 (pstmt);\n+\t    }\n+\t  else\n+\t    break;\n+\t}\n+      else\n+\tbreak;\n+    }\n+  *ret = op;\n+  *offset_ret = offset;\n+  return offset_known;\n+}\n+\n /* Given that an actual argument is an SSA_NAME (given in NAME) and is a result\n    of an assignment statement STMT, try to determine whether we are actually\n    handling any of the following cases and construct an appropriate jump"}, {"sha": "0bbbbf9bd9f407d187f252270f09e23cecf57d3b", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b6a7587f215e913cec9ed523bf32bb0405fd3f/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b6a7587f215e913cec9ed523bf32bb0405fd3f/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=c7b6a7587f215e913cec9ed523bf32bb0405fd3f", "patch": "@@ -1144,6 +1144,8 @@ void ipa_dump_param (FILE *, class ipa_node_params *info, int i);\n void ipa_release_body_info (struct ipa_func_body_info *);\n tree ipa_get_callee_param_type (struct cgraph_edge *e, int i);\n bool ipcp_get_parm_bits (tree, tree *, widest_int *);\n+bool unadjusted_ptr_and_unit_offset (tree op, tree *ret,\n+\t\t\t\t     poly_int64 *offset_ret);\n \n /* From tree-sra.c:  */\n tree build_ref_for_offset (location_t, tree, poly_int64, bool, tree,"}, {"sha": "ec69ba04eafe16757e49667a59dea1b4cc8c2e4d", "filename": "gcc/params.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b6a7587f215e913cec9ed523bf32bb0405fd3f/gcc%2Fparams.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b6a7587f215e913cec9ed523bf32bb0405fd3f/gcc%2Fparams.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.opt?ref=c7b6a7587f215e913cec9ed523bf32bb0405fd3f", "patch": "@@ -253,6 +253,10 @@ The size of translation unit that IPA-CP pass considers large.\n Common Joined UInteger Var(param_ipa_cp_value_list_size) Init(8) Param Optimization\n Maximum size of a list of values associated with each parameter for interprocedural constant propagation.\n \n+-param-ipa-jump-function-lookups=\n+Common Joined UInteger Var(param_ipa_jump_function_lookups) Init(8) Param Optimization\n+Maximum number of statements visited during jump function offset discovery\n+\n -param=ipa-max-aa-steps=\n Common Joined UInteger Var(param_ipa_max_aa_steps) Init(25000) Param Optimization\n Maximum number of statements that will be visited by IPA formal parameter analysis based on alias analysis in any given function."}]}