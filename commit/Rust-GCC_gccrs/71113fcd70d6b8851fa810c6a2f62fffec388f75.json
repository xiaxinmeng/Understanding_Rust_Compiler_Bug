{"sha": "71113fcd70d6b8851fa810c6a2f62fffec388f75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzExMTNmY2Q3MGQ2Yjg4NTFmYTgxMGM2YTJmNjJmZmZlYzM4OGY3NQ==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2006-11-01T04:47:30Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2006-11-01T04:47:30Z"}, "message": "re PR c/16622 ([C99] extern inline is handled wrong in C99 mode)\n\n\t* c-decl.c (grokdeclarator): Don't set DECL_EXTERNAL on\n\tinline static functions in c99 mode.\n\n\tPR 16622\n\t* doc/extend.texi (Inline): Update.\n\t* c-tree.h (struct language_function): Remove field 'extern_inline'.\n\t* c-decl.c (current_extern_inline): Delete.\n\t(pop_scope): Adjust test for an undefined nested function.\n\tAdd warning about undeclared inline function.\n\t(diagnose_mismatched_decls): Update comments.  Disallow overriding\n\tof inline functions in a translation unit in C99.  Allow inline\n\tdeclarations in C99 at any time.\n\t(merge_decls): Boolize variables.  Handle C99 'extern inline'\n\tsemantics.\n\t(grokdeclarator): Set DECL_EXTERNAL here for functions.  Handle\n\tC99 inline semantics.\n\t(start_function): Don't clear current_extern_inline.  Don't set\n\tDECL_EXTERNAL.\n\t(c_push_function_context): Don't push current_extern_inline.\n\t(c_pop_function_context): Don't restore current_extern_inline.\n\n\tPR 11377\n\t* c-typeck.c (build_external_ref): Warn about static variables\n\tused in extern inline functions.\n\t* c-decl.c (start_decl): Warn about static variables declared\n\tin extern inline functions.\n\nFrom-SVN: r118356", "tree": {"sha": "cf167878872183d2722b5e3979810401a81da5d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf167878872183d2722b5e3979810401a81da5d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71113fcd70d6b8851fa810c6a2f62fffec388f75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71113fcd70d6b8851fa810c6a2f62fffec388f75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71113fcd70d6b8851fa810c6a2f62fffec388f75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71113fcd70d6b8851fa810c6a2f62fffec388f75/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "682d039597faffc4ec84e7a569b93e9447b3e681", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/682d039597faffc4ec84e7a569b93e9447b3e681", "html_url": "https://github.com/Rust-GCC/gccrs/commit/682d039597faffc4ec84e7a569b93e9447b3e681"}], "stats": {"total": 315, "additions": 268, "deletions": 47}, "files": [{"sha": "0b9caa31f2e91674da240d3f26ee9120793e6a08", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71113fcd70d6b8851fa810c6a2f62fffec388f75/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71113fcd70d6b8851fa810c6a2f62fffec388f75/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71113fcd70d6b8851fa810c6a2f62fffec388f75", "patch": "@@ -1,3 +1,32 @@\n+2006-10-31  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* c-decl.c (grokdeclarator): Don't set DECL_EXTERNAL on\n+\tinline static functions in c99 mode.\n+\n+\tPR 16622\n+\t* doc/extend.texi (Inline): Update.\n+\t* c-tree.h (struct language_function): Remove field 'extern_inline'.\n+\t* c-decl.c (current_extern_inline): Delete.\n+\t(pop_scope): Adjust test for an undefined nested function.\n+\tAdd warning about undeclared inline function.\n+\t(diagnose_mismatched_decls): Update comments.  Disallow overriding\n+\tof inline functions in a translation unit in C99.  Allow inline\n+\tdeclarations in C99 at any time.\n+\t(merge_decls): Boolize variables.  Handle C99 'extern inline'\n+\tsemantics.\n+\t(grokdeclarator): Set DECL_EXTERNAL here for functions.  Handle\n+\tC99 inline semantics.\n+\t(start_function): Don't clear current_extern_inline.  Don't set\n+\tDECL_EXTERNAL.\n+\t(c_push_function_context): Don't push current_extern_inline.\n+\t(c_pop_function_context): Don't restore current_extern_inline.\n+\n+\tPR 11377\n+\t* c-typeck.c (build_external_ref): Warn about static variables\n+\tused in extern inline functions.\n+\t* c-decl.c (start_decl): Warn about static variables declared\n+\tin extern inline functions.\n+\n 2006-10-31  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/23470"}, {"sha": "34709df5cfe84544f63c777f9f5ad755fa3c9565", "filename": "gcc/c-decl.c", "status": "modified", "additions": 82, "deletions": 45, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71113fcd70d6b8851fa810c6a2f62fffec388f75/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71113fcd70d6b8851fa810c6a2f62fffec388f75/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=71113fcd70d6b8851fa810c6a2f62fffec388f75", "patch": "@@ -154,10 +154,6 @@ int current_function_returns_abnormally;\n \n static int warn_about_return_type;\n \n-/* Nonzero when starting a function declared `extern inline'.  */\n-\n-static int current_extern_inline;\n-\n /* Nonzero when the current toplevel function contains a declaration\n    of a nested function which is never defined.  */\n \n@@ -797,11 +793,22 @@ pop_scope (void)\n \t      && DECL_ABSTRACT_ORIGIN (p) != p)\n \t    TREE_ADDRESSABLE (DECL_ABSTRACT_ORIGIN (p)) = 1;\n \t  if (!DECL_EXTERNAL (p)\n-\t      && DECL_INITIAL (p) == 0)\n+\t      && !DECL_INITIAL (p)\n+\t      && scope != file_scope\n+\t      && scope != external_scope)\n \t    {\n \t      error (\"nested function %q+D declared but never defined\", p);\n \t      undef_nested_function = true;\n \t    }\n+\t  /* C99 6.7.4p6: \"a function with external linkage... declared\n+\t     with an inline function specifier ... shall also be defined in the\n+\t     same translation unit.\"  */\n+\t  else if (DECL_DECLARED_INLINE_P (p)\n+\t\t   && TREE_PUBLIC (p)\n+\t\t   && !DECL_INITIAL (p)\n+\t\t   && flag_isoc99)\n+\t    pedwarn (\"inline function %q+D declared but never defined\", p);\n+\n \t  goto common_symbol;\n \n \tcase VAR_DECL:\n@@ -1292,10 +1299,11 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \n   /* Function declarations can either be 'static' or 'extern' (no\n      qualifier is equivalent to 'extern' - C99 6.2.2p5) and therefore\n-     can never conflict with each other on account of linkage (6.2.2p4).\n-     Multiple definitions are not allowed (6.9p3,5) but GCC permits\n-     two definitions if one is 'extern inline' and one is not.  The non-\n-     extern-inline definition supersedes the extern-inline definition.  */\n+     can never conflict with each other on account of linkage\n+     (6.2.2p4).  Multiple definitions are not allowed (6.9p3,5) but\n+     gnu89 mode permits two definitions if one is 'extern inline' and\n+     one is not.  The non- extern-inline definition supersedes the\n+     extern-inline definition.  */\n \n   else if (TREE_CODE (newdecl) == FUNCTION_DECL)\n     {\n@@ -1321,16 +1329,11 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t    {\n \t      /* If both decls are in the same TU and the new declaration\n \t\t isn't overriding an extern inline reject the new decl.\n-\t\t When we handle c99 style inline rules we'll want to reject\n-\t\t the following:\n-\n-\t\t DECL_EXTERN_INLINE (olddecl)\n-\t\t && !DECL_EXTERN_INLINE (newdecl)\n-\n-\t\t if they're in the same translation unit. Until we implement\n-\t\t the full semantics we accept the construct.  */\n-\t      if (!(DECL_EXTERN_INLINE (olddecl)\n-\t\t    && !DECL_EXTERN_INLINE (newdecl))\n+\t\t In c99, no overriding is allowed in the same translation\n+\t\t unit.  */\n+\t      if ((!DECL_EXTERN_INLINE (olddecl)\n+\t\t   || DECL_EXTERN_INLINE (newdecl)\n+\t\t   || flag_isoc99)\n \t\t  && same_translation_unit_p (newdecl, olddecl))\n \t\t{\n \t\t  error (\"redefinition of %q+D\", newdecl);\n@@ -1521,9 +1524,13 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t ??? Should we still warn about this now we have unit-at-a-time\n \t mode and can get it right?\n \t Definitely don't complain if the decls are in different translation\n-\t units.  */\n+\t units.\n+         C99 permits this, so don't warn in that case.  (The function\n+         may not be inlined everywhere in function-at-a-time mode, but\n+         we still shouldn't warn.)  */\n       if (DECL_DECLARED_INLINE_P (newdecl) && !DECL_DECLARED_INLINE_P (olddecl)\n-\t  && same_translation_unit_p (olddecl, newdecl))\n+\t  && same_translation_unit_p (olddecl, newdecl)\n+\t  && ! flag_isoc99)\n \t{\n \t  if (TREE_USED (olddecl))\n \t    {\n@@ -1600,12 +1607,13 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n static void\n merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n {\n-  int new_is_definition = (TREE_CODE (newdecl) == FUNCTION_DECL\n-\t\t\t   && DECL_INITIAL (newdecl) != 0);\n-  int new_is_prototype = (TREE_CODE (newdecl) == FUNCTION_DECL\n-\t\t\t  && TYPE_ARG_TYPES (TREE_TYPE (newdecl)) != 0);\n-  int old_is_prototype = (TREE_CODE (olddecl) == FUNCTION_DECL\n-\t\t\t  && TYPE_ARG_TYPES (TREE_TYPE (olddecl)) != 0);\n+  bool new_is_definition = (TREE_CODE (newdecl) == FUNCTION_DECL\n+\t\t\t    && DECL_INITIAL (newdecl) != 0);\n+  bool new_is_prototype = (TREE_CODE (newdecl) == FUNCTION_DECL\n+\t\t\t   && TYPE_ARG_TYPES (TREE_TYPE (newdecl)) != 0);\n+  bool old_is_prototype = (TREE_CODE (olddecl) == FUNCTION_DECL\n+\t\t\t   && TYPE_ARG_TYPES (TREE_TYPE (olddecl)) != 0);\n+  bool extern_changed = false;\n \n   /* For real parm decl following a forward decl, rechain the old decl\n      in its new location and clear TREE_ASM_WRITTEN (it's not a\n@@ -1752,6 +1760,18 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n \t}\n     }\n \n+   /* In c99, 'extern' declaration before (or after) 'inline' means this\n+      function is not DECL_EXTERNAL.  */\n+   if (TREE_CODE (newdecl) == FUNCTION_DECL\n+       && (DECL_DECLARED_INLINE_P (newdecl) \n+\t   || DECL_DECLARED_INLINE_P (olddecl))\n+       && (!DECL_DECLARED_INLINE_P (newdecl) \n+\t   || !DECL_DECLARED_INLINE_P (olddecl)\n+\t   || !DECL_EXTERNAL (olddecl))\n+       && DECL_EXTERNAL (newdecl)\n+       && flag_isoc99)\n+     DECL_EXTERNAL (newdecl) = 0;\n+\n   if (DECL_EXTERNAL (newdecl))\n     {\n       TREE_STATIC (newdecl) = TREE_STATIC (olddecl);\n@@ -1844,6 +1864,8 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n \t}\n     }\n \n+   extern_changed = DECL_EXTERNAL (olddecl) && !DECL_EXTERNAL (newdecl);\n+\n   /* Copy most of the decl-specific fields of NEWDECL into OLDDECL.\n      But preserve OLDDECL's DECL_UID and DECL_CONTEXT.  */\n   {\n@@ -1886,6 +1908,13 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n \t  || (TREE_CODE (olddecl) == VAR_DECL\n \t      && TREE_STATIC (olddecl))))\n     make_decl_rtl (olddecl);\n+\n+  /* If we changed a function from DECL_EXTERNAL to !DECL_EXTERNAL,\n+     and the definition is coming from the old version, cgraph needs\n+     to be called again.  */\n+  if (extern_changed && !new_is_definition \n+      && TREE_CODE (olddecl) == FUNCTION_DECL && DECL_INITIAL (olddecl))\n+    cgraph_finalize_function (olddecl, false);\n }\n \n /* Handle when a new declaration NEWDECL has the same name as an old\n@@ -3282,6 +3311,17 @@ start_decl (struct c_declarator *declarator, struct c_declspecs *declspecs,\n     warning (OPT_Wattributes, \"inline function %q+D given attribute noinline\",\n \t     decl);\n \n+  /* C99 6.7.4p3: An inline definition of a function with external\n+     linkage shall not contain a definition of a modifiable object\n+     with static storage duration...  */\n+  if (TREE_CODE (decl) == VAR_DECL\n+      && current_scope != file_scope\n+      && TREE_STATIC (decl)\n+      && DECL_DECLARED_INLINE_P (current_function_decl)\n+      && DECL_EXTERNAL (current_function_decl))\n+    pedwarn (\"%q+D is static but declared in inline function %qD \"\n+\t     \"which is not static\", decl, current_function_decl);\n+\n   /* Add this decl to the current scope.\n      TEM may equal DECL or it may be a previous decl of the same name.  */\n   tem = pushdecl (decl);\n@@ -4726,8 +4766,15 @@ grokdeclarator (const struct c_declarator *declarator,\n \t   GCC to signify a forward declaration of a nested function.  */\n \tif (storage_class == csc_auto && current_scope != file_scope)\n \t  DECL_EXTERNAL (decl) = 0;\n+\t/* In C99, a function which is declared 'inline' with 'extern'\n+\t   is not an external reference (which is confusing).  It\n+\t   means that the later definition of the function must be output\n+\t   in this file, C99 6.7.4p6.  In GNU C89, a function declared\n+\t   'extern inline' is an external reference.  */\n+\telse if (declspecs->inline_p && storage_class != csc_static)\n+\t  DECL_EXTERNAL (decl) = (storage_class == csc_extern) == !flag_isoc99;\n \telse\n-\t  DECL_EXTERNAL (decl) = 1;\n+\t  DECL_EXTERNAL (decl) = !initialized;\n \n \t/* Record absence of global scope for `static' or `auto'.  */\n \tTREE_PUBLIC (decl)\n@@ -4757,11 +4804,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t       the abstract origin pointing between the declarations,\n \t       which will confuse dwarf2out.  */\n \t    if (initialized)\n-\t      {\n-\t\tDECL_INLINE (decl) = 1;\n-\t\tif (storage_class == csc_extern)\n-\t\t  current_extern_inline = 1;\n-\t      }\n+\t      DECL_INLINE (decl) = 1;\n \t  }\n \t/* If -finline-functions, assume it can be inlined.  This does\n \t   two things: let the function be deferred until it is actually\n@@ -5259,12 +5302,15 @@ start_struct (enum tree_code code, tree name)\n \t    error (\"nested redefinition of %<union %E%>\", name);\n \t  else\n \t    error (\"nested redefinition of %<struct %E%>\", name);\n+\t  /* Don't create structures that contain themselves.  */\n+\t  ref = NULL_TREE;\n \t}\n     }\n-  else\n-    {\n-      /* Otherwise create a forward-reference just so the tag is in scope.  */\n \n+  /* Otherwise create a forward-reference just so the tag is in scope.  */\n+\n+  if (ref == NULL_TREE || TREE_CODE (ref) != code)\n+    {\n       ref = make_node (code);\n       pushtag (name, ref);\n     }\n@@ -5956,7 +6002,6 @@ start_function (struct c_declspecs *declspecs, struct c_declarator *declarator,\n   current_function_returns_null = 0;\n   current_function_returns_abnormally = 0;\n   warn_about_return_type = 0;\n-  current_extern_inline = 0;\n   c_switch_stack = NULL;\n \n   nstack_se = XOBNEW (&parser_obstack, struct c_label_context_se);\n@@ -6108,12 +6153,6 @@ start_function (struct c_declspecs *declspecs, struct c_declarator *declarator,\n     warning (OPT_Wmissing_declarations,\n \t     \"%q+D was used with no declaration before its definition\", decl1);\n \n-  /* This is a definition, not a reference.\n-     So normally clear DECL_EXTERNAL.\n-     However, `extern inline' acts like a declaration\n-     except for defining how to inline.  So set DECL_EXTERNAL in that case.  */\n-  DECL_EXTERNAL (decl1) = current_extern_inline;\n-\n   /* This function exists in static storage.\n      (This does not mean `static' in the C sense!)  */\n   TREE_STATIC (decl1) = 1;\n@@ -6846,7 +6885,6 @@ c_push_function_context (struct function *f)\n   p->returns_null = current_function_returns_null;\n   p->returns_abnormally = current_function_returns_abnormally;\n   p->warn_about_return_type = warn_about_return_type;\n-  p->extern_inline = current_extern_inline;\n }\n \n /* Restore the variables used during compilation of a C function.  */\n@@ -6875,7 +6913,6 @@ c_pop_function_context (struct function *f)\n   current_function_returns_null = p->returns_null;\n   current_function_returns_abnormally = p->returns_abnormally;\n   warn_about_return_type = p->warn_about_return_type;\n-  current_extern_inline = p->extern_inline;\n \n   f->language = NULL;\n }"}, {"sha": "5785e1cb96f06161fca909e294321f53415f15fa", "filename": "gcc/c-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71113fcd70d6b8851fa810c6a2f62fffec388f75/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71113fcd70d6b8851fa810c6a2f62fffec388f75/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=71113fcd70d6b8851fa810c6a2f62fffec388f75", "patch": "@@ -384,7 +384,6 @@ struct language_function GTY(())\n   int returns_null;\n   int returns_abnormally;\n   int warn_about_return_type;\n-  int extern_inline;\n };\n \n /* Save lists of labels used or defined in particular contexts."}, {"sha": "30b438260c64dc6700e22acd4fc2122c4aa0c4d9", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71113fcd70d6b8851fa810c6a2f62fffec388f75/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71113fcd70d6b8851fa810c6a2f62fffec388f75/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=71113fcd70d6b8851fa810c6a2f62fffec388f75", "patch": "@@ -2109,6 +2109,17 @@ build_external_ref (tree id, int fun, location_t loc)\n       if (context != 0 && context != current_function_decl)\n \tDECL_NONLOCAL (ref) = 1;\n     }\n+  /* C99 6.7.4p3: An inline definition of a function with external\n+     linkage ... shall not contain a reference to an identifier with\n+     internal linkage.  */\n+  else if (current_function_decl != 0\n+\t   && DECL_DECLARED_INLINE_P (current_function_decl)\n+\t   && DECL_EXTERNAL (current_function_decl)\n+\t   && VAR_OR_FUNCTION_DECL_P (ref)\n+\t   && (TREE_CODE (ref) != VAR_DECL || TREE_STATIC (ref))\n+\t   && ! TREE_PUBLIC (ref))\n+    pedwarn (\"%H%qD is static but used in inline function %qD \"\n+\t     \"which is not static\", &loc, ref, current_function_decl);\n \n   return ref;\n }"}, {"sha": "479113bda1b976ca16d8f734d7be6684d9e63e99", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71113fcd70d6b8851fa810c6a2f62fffec388f75/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71113fcd70d6b8851fa810c6a2f62fffec388f75/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=71113fcd70d6b8851fa810c6a2f62fffec388f75", "patch": "@@ -1,3 +1,18 @@\n+2006-10-31  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* gcc.dg/inline-16.c: New.\n+\n+\tPR 16622\n+\t* gcc.dg/inline-10.c (main): Don't declare 'main' inline without\n+\tdefining it.\n+\t* gcc.dg/inline-13.c: New.\n+\t* gcc.dg/inline-14.c: New.\n+\t* gcc.dg/inline-15.c: New.\n+\n+\tPR 11377\n+\t* gcc.dg/inline6.c: New.\n+\t* gcc.dg/inline7.c: New.\n+\n 2006-10-31  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/23470"}, {"sha": "f7a7592a6a92011d21964d3460a45fc7b57f82a4", "filename": "gcc/testsuite/gcc.dg/inline-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71113fcd70d6b8851fa810c6a2f62fffec388f75/gcc%2Ftestsuite%2Fgcc.dg%2Finline-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71113fcd70d6b8851fa810c6a2f62fffec388f75/gcc%2Ftestsuite%2Fgcc.dg%2Finline-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-10.c?ref=71113fcd70d6b8851fa810c6a2f62fffec388f75", "patch": "@@ -3,4 +3,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -ffreestanding -pedantic-errors\" } */\n \n-inline int main (void);\n+inline int main (void) { return 1; }"}, {"sha": "62a898c3c100da382cd9ae4910f844e985735ba0", "filename": "gcc/testsuite/gcc.dg/inline-13.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71113fcd70d6b8851fa810c6a2f62fffec388f75/gcc%2Ftestsuite%2Fgcc.dg%2Finline-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71113fcd70d6b8851fa810c6a2f62fffec388f75/gcc%2Ftestsuite%2Fgcc.dg%2Finline-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-13.c?ref=71113fcd70d6b8851fa810c6a2f62fffec388f75", "patch": "@@ -0,0 +1,56 @@\n+/* Verify basic C99 inline functionality.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99\" } */\n+/* { dg-final { scan-assembler-not \"dontgenerate\" } } */\n+/* { dg-final { scan-assembler \"func1\" } } */\n+/* { dg-final { scan-assembler \"func2\" } } */\n+/* { dg-final { scan-assembler \"func3\" } } */\n+/* { dg-final { scan-assembler \"func4\" } } */\n+/* { dg-final { scan-assembler \"func5\" } } */\n+/* { dg-final { scan-assembler \"func6\" } } */\n+/* { dg-final { scan-assembler \"func7\" } } */\n+/* { dg-final { scan-assembler \"func8\" } } */\n+/* { dg-final { scan-assembler \"func9\" } } */\n+\n+inline int dontgenerate1 (void)\n+{\n+  return 1;\n+}\n+\n+inline int dontgenerate2 (void);\n+inline int dontgenerate2 (void)\n+{\n+  return 2;\n+}\n+\n+inline int dontgenerate3 (void)\n+{\n+  return 3;\n+}\n+inline int dontgenerate3 (void);\n+\n+extern inline int func1 (void) { return 1; }\n+\n+extern inline int func2 (void);\n+inline int func2 (void) { return 2; }\n+\n+inline int func3 (void) { return 3; }\n+extern inline int func3 (void);\n+\n+inline int func4 (void);\n+extern inline int func4 (void) { return 4; }\n+\n+extern inline int func5 (void) { return 5; }\n+inline int func5 (void);\n+\n+extern int func6 (void);\n+inline int func6 (void) { return 6; }\n+\n+inline int func7 (void) { return 7; }\n+extern int func7 (void);\n+\n+inline int func8 (void);\n+extern int func8 (void) { return 8; }\n+\n+extern int func9 (void) { return 9; }\n+inline int func9 (void);"}, {"sha": "0987c7cde7b3f080c3cb366a8050e8847665fb4b", "filename": "gcc/testsuite/gcc.dg/inline-14.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71113fcd70d6b8851fa810c6a2f62fffec388f75/gcc%2Ftestsuite%2Fgcc.dg%2Finline-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71113fcd70d6b8851fa810c6a2f62fffec388f75/gcc%2Ftestsuite%2Fgcc.dg%2Finline-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-14.c?ref=71113fcd70d6b8851fa810c6a2f62fffec388f75", "patch": "@@ -0,0 +1,23 @@\n+/* Check that you can't redefine a C99 inline function.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99\" } */\n+\n+extern inline int func1 (void)\n+{ /* { dg-error \"previous definition\" } */\n+  return 1;\n+}\n+\n+inline int func1 (void)\n+{ /* { dg-error \"redefinition\" } */\n+  return 1;\n+}\n+\n+inline int func2 (void)\n+{ /* { dg-error \"previous definition\" } */\n+  return 2;\n+}\n+\n+inline int func2 (void)\n+{ /* { dg-error \"redefinition\" } */\n+  return 2;\n+}"}, {"sha": "7df8af1102edaf10fa45406b2e63b1d747dd31f6", "filename": "gcc/testsuite/gcc.dg/inline-15.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71113fcd70d6b8851fa810c6a2f62fffec388f75/gcc%2Ftestsuite%2Fgcc.dg%2Finline-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71113fcd70d6b8851fa810c6a2f62fffec388f75/gcc%2Ftestsuite%2Fgcc.dg%2Finline-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-15.c?ref=71113fcd70d6b8851fa810c6a2f62fffec388f75", "patch": "@@ -0,0 +1,7 @@\n+/* Check that an error message is produced when a C99 inline function\n+   is never defined.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99\" } */\n+\n+extern inline int func1 (void); /* { dg-error \"never defined\" } */\n+inline int func2 (void); /* { dg-error \"never defined\" } */"}, {"sha": "02aa1bf04a1b517b2838598345325bf5e2e219a2", "filename": "gcc/testsuite/gcc.dg/inline-16.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71113fcd70d6b8851fa810c6a2f62fffec388f75/gcc%2Ftestsuite%2Fgcc.dg%2Finline-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71113fcd70d6b8851fa810c6a2f62fffec388f75/gcc%2Ftestsuite%2Fgcc.dg%2Finline-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-16.c?ref=71113fcd70d6b8851fa810c6a2f62fffec388f75", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do link } */\n+/* { dg-options \"-std=c99\" } */\n+\n+static inline int\n+func1(const volatile void * base, int byteOffset)\n+{\n+  volatile int *addr = (volatile int *)((int)base + byteOffset);\n+  return *addr;\n+}\n+\n+static inline int\n+func2(int data)\n+{\n+    return func1(&data, 0);\n+}\n+\n+int main(int argc, char *argv[]) {\n+  int b = func2(argc);\n+\n+  return 0;\n+}"}, {"sha": "3b9e3e99e959850f23bfd9769d3c72f2263892e0", "filename": "gcc/testsuite/gcc.dg/inline6.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71113fcd70d6b8851fa810c6a2f62fffec388f75/gcc%2Ftestsuite%2Fgcc.dg%2Finline6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71113fcd70d6b8851fa810c6a2f62fffec388f75/gcc%2Ftestsuite%2Fgcc.dg%2Finline6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline6.c?ref=71113fcd70d6b8851fa810c6a2f62fffec388f75", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu89\" } */\n+static int i;\n+extern int j;\n+extern inline int func1 (void) {\n+  return i++;  /* { dg-warning \"static\" } */\n+}\n+extern inline int func2 (void) {\n+  return j++;\n+}\n+inline int func3 (void) \n+{\n+  return i++;\n+}"}, {"sha": "54f3360b8a7af1e38d447086f6d83779a1a20905", "filename": "gcc/testsuite/gcc.dg/inline7.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71113fcd70d6b8851fa810c6a2f62fffec388f75/gcc%2Ftestsuite%2Fgcc.dg%2Finline7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71113fcd70d6b8851fa810c6a2f62fffec388f75/gcc%2Ftestsuite%2Fgcc.dg%2Finline7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline7.c?ref=71113fcd70d6b8851fa810c6a2f62fffec388f75", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu89\" } */\n+extern inline void func1 (void) {\n+  static int i;  /* { dg-warning \"static\" } */\n+}\n+inline void func3 (void) \n+{\n+  static int i;\n+}"}]}