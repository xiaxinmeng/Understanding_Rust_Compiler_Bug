{"sha": "73ce7fcb8cdacf40e7342834e1af9d930e012e02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNjZTdmY2I4Y2RhY2Y0MGU3MzQyODM0ZTFhZjlkOTMwZTAxMmUwMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-11-17T07:55:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-11-17T07:55:52Z"}, "message": "re PR c++/36089 (Funny rejects valid with constant integral expression)\n\n\tPR c++/36089\n\t* init.c (constant_value_1): Handle TREE_LIST init.\n\n\t* g++.dg/template/init8.C: New test.\n\nFrom-SVN: r141941", "tree": {"sha": "eca721f5a076e4b589c4b5ee179ccd06c17325d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eca721f5a076e4b589c4b5ee179ccd06c17325d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73ce7fcb8cdacf40e7342834e1af9d930e012e02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73ce7fcb8cdacf40e7342834e1af9d930e012e02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73ce7fcb8cdacf40e7342834e1af9d930e012e02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73ce7fcb8cdacf40e7342834e1af9d930e012e02/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f92efbc3fe2521c2103b51a2fbe666a150eabe4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f92efbc3fe2521c2103b51a2fbe666a150eabe4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f92efbc3fe2521c2103b51a2fbe666a150eabe4b"}], "stats": {"total": 87, "additions": 87, "deletions": 0}, "files": [{"sha": "f1840285b5c4f4b58044ac1d4420b685afcb291c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73ce7fcb8cdacf40e7342834e1af9d930e012e02/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73ce7fcb8cdacf40e7342834e1af9d930e012e02/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=73ce7fcb8cdacf40e7342834e1af9d930e012e02", "patch": "@@ -1,3 +1,8 @@\n+2008-11-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/36089\n+\t* init.c (constant_value_1): Handle TREE_LIST init.\n+\n 2008-11-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/37561"}, {"sha": "61c78e11f621ca5d662e4e7a6d6286a8ca4945e1", "filename": "gcc/cp/init.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73ce7fcb8cdacf40e7342834e1af9d930e012e02/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73ce7fcb8cdacf40e7342834e1af9d930e012e02/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=73ce7fcb8cdacf40e7342834e1af9d930e012e02", "patch": "@@ -1659,6 +1659,15 @@ constant_value_1 (tree decl, bool integral_p)\n \t}\n       if (init == error_mark_node)\n \treturn decl;\n+      /* Initializers in templates are generally expanded during\n+\t instantiation, so before that for const int i(2)\n+\t INIT is a TREE_LIST with the actual initializer as\n+\t TREE_VALUE.  */\n+      if (processing_template_decl\n+\t  && init\n+\t  && TREE_CODE (init) == TREE_LIST\n+\t  && TREE_CHAIN (init) == NULL_TREE)\n+\tinit = TREE_VALUE (init);\n       if (!init\n \t  || !TREE_TYPE (init)\n \t  || (integral_p"}, {"sha": "4520da370211daa186b59ea13d691481271368f1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73ce7fcb8cdacf40e7342834e1af9d930e012e02/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73ce7fcb8cdacf40e7342834e1af9d930e012e02/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=73ce7fcb8cdacf40e7342834e1af9d930e012e02", "patch": "@@ -1,3 +1,8 @@\n+2008-11-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/36089\n+\t* g++.dg/template/init8.C: New test.\n+\n 2008-11-16  Mikael Morin <mikael.morin@tele2.fr>\n \n \tPR fortran/35681"}, {"sha": "1bcda1253d1b1690a09f173fe180875cef051507", "filename": "gcc/testsuite/g++.dg/template/init8.C", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73ce7fcb8cdacf40e7342834e1af9d930e012e02/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finit8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73ce7fcb8cdacf40e7342834e1af9d930e012e02/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finit8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finit8.C?ref=73ce7fcb8cdacf40e7342834e1af9d930e012e02", "patch": "@@ -0,0 +1,68 @@\n+// PR c++/36089\n+// { dg-do run }\n+\n+extern \"C\" void abort ();\n+\n+int f ()\n+{\n+  const int c(2);\n+  int d[c] = { 0, 0 };\n+  return d[0] + sizeof d;\n+}\n+\n+struct A\n+{\n+  static int f ()\n+  {\n+    const int c(2);\n+    int d[c] = { 0, 0 };\n+    return d[0] + sizeof d;\n+  }\n+};\n+\n+template <int> struct B\n+{\n+  static int f ()\n+  {\n+    const int c = 2;\n+    int d[c] = { 0, 0 };\n+    return d[0] + sizeof d;\n+  }\n+};\n+\n+template <int> struct C\n+{\n+  static int f ()\n+  {\n+    const int c(2);\n+    int d[c] = { 0, 0 };\n+    return d[0] + sizeof d;\n+  }\n+};\n+\n+template <int> struct D\n+{\n+  static int f ()\n+  {\n+    const int e(2);\n+    const int c(e);\n+    int d[c] = { 0, 0 };\n+    return d[0] + sizeof d;\n+  }\n+};\n+\n+int\n+main (void)\n+{\n+  int v = f ();\n+  if (v != 2 * sizeof (int))\n+    abort ();\n+  if (v != A::f ())\n+    abort ();\n+  if (v != B<6>::f ())\n+    abort ();\n+  if (v != C<0>::f ())\n+    abort ();\n+  if (v != D<1>::f ())\n+    abort ();\n+}"}]}