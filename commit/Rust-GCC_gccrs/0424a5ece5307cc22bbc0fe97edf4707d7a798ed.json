{"sha": "0424a5ece5307cc22bbc0fe97edf4707d7a798ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQyNGE1ZWNlNTMwN2NjMjJiYmMwZmU5N2VkZjQ3MDdkN2E3OThlZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-05T09:00:09Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-05T10:35:05Z"}, "message": "tree-optimization/94949 - fix load eliding in SM\n\nThis fixes the case of not using the multithreaded model when\nonly conditionally storing to the destination.  We cannot elide\nthe load in this case.\n\n2020-05-05  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/94949\n\t* tree-ssa-loop-im.c (execute_sm): Check whether we use\n\tthe multithreaded model or always compute the stored value\n\tbefore eliding a load.\n\n\t* gcc.dg/torture/pr94949.c: New testcase.", "tree": {"sha": "8aa71eb224c9168fd0e7165b7256c4359f848e52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8aa71eb224c9168fd0e7165b7256c4359f848e52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0424a5ece5307cc22bbc0fe97edf4707d7a798ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0424a5ece5307cc22bbc0fe97edf4707d7a798ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0424a5ece5307cc22bbc0fe97edf4707d7a798ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0424a5ece5307cc22bbc0fe97edf4707d7a798ed/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bd3a8af85356e64ec27309dba7fb2fca2343ffe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bd3a8af85356e64ec27309dba7fb2fca2343ffe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bd3a8af85356e64ec27309dba7fb2fca2343ffe"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "2267a63bca13e7821ee2172bf1d019a04c5db21c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0424a5ece5307cc22bbc0fe97edf4707d7a798ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0424a5ece5307cc22bbc0fe97edf4707d7a798ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0424a5ece5307cc22bbc0fe97edf4707d7a798ed", "patch": "@@ -1,3 +1,10 @@\n+2020-05-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/94949\n+\t* tree-ssa-loop-im.c (execute_sm): Check whether we use\n+\tthe multithreaded model or always compute the stored value\n+\tbefore eliding a load.\n+\n 2020-05-05  Alex Coplan  <alex.coplan@arm.com>\n \n \t* config/aarch64/aarch64.md (*one_cmpl_zero_extend): New."}, {"sha": "2ffa0f8f43416fcc429c7babe41f3246b5c146df", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0424a5ece5307cc22bbc0fe97edf4707d7a798ed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0424a5ece5307cc22bbc0fe97edf4707d7a798ed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0424a5ece5307cc22bbc0fe97edf4707d7a798ed", "patch": "@@ -1,3 +1,8 @@\n+2020-05-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/94949\n+\t* gcc.dg/torture/pr94949.c: New testcase.\n+\n 2020-05-05  Alex Coplan  <alex.coplan@arm.com>\n \n \t* gcc.target/aarch64/mvn_zero_ext.c: New test."}, {"sha": "6182d77b3cdaca4a62f7f457f2413bce3f9ced3e", "filename": "gcc/testsuite/gcc.dg/torture/pr94949.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0424a5ece5307cc22bbc0fe97edf4707d7a798ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr94949.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0424a5ece5307cc22bbc0fe97edf4707d7a798ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr94949.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr94949.c?ref=0424a5ece5307cc22bbc0fe97edf4707d7a798ed", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-fallow-store-data-races\" } */\n+\n+static int x = 1;\n+static volatile int y = -1;\n+int\n+main()\n+{\n+  for (int i = 0; i < 128; ++i)\n+    {\n+      if (i == y)\n+\tx = i;\n+    }\n+  if (x != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "554dd4be5bbcfb1496c8111e5cce1d61e23d98ab", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0424a5ece5307cc22bbc0fe97edf4707d7a798ed/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0424a5ece5307cc22bbc0fe97edf4707d7a798ed/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=0424a5ece5307cc22bbc0fe97edf4707d7a798ed", "patch": "@@ -2128,9 +2128,9 @@ execute_sm (class loop *loop, vec<edge> exits, im_mem_ref *ref)\n   fmt_data.orig_loop = loop;\n   for_each_index (&ref->mem.ref, force_move_till, &fmt_data);\n \n+  bool always_stored = ref_always_accessed_p (loop, ref, true);\n   if (bb_in_transaction (loop_preheader_edge (loop)->src)\n-      || (! flag_store_data_races\n-\t  && ! ref_always_accessed_p (loop, ref, true)))\n+      || (! flag_store_data_races && ! always_stored))\n     multi_threaded_model_p = true;\n \n   if (multi_threaded_model_p)\n@@ -2145,8 +2145,10 @@ execute_sm (class loop *loop, vec<edge> exits, im_mem_ref *ref)\n \n   /* Avoid doing a load if there was no load of the ref in the loop.\n      Esp. when the ref is not always stored we cannot optimize it\n-     away later.  */\n-  if (ref->loaded && bitmap_bit_p (ref->loaded, loop->num))\n+     away later.  But when it is not always stored we must use a conditional\n+     store then.  */\n+  if ((!always_stored && !multi_threaded_model_p)\n+      || (ref->loaded && bitmap_bit_p (ref->loaded, loop->num)))\n     {\n       load = gimple_build_assign (tmp_var, unshare_expr (ref->mem.ref));\n       lim_data = init_lim_data (load);"}]}