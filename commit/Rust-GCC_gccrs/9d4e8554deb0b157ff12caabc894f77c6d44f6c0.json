{"sha": "9d4e8554deb0b157ff12caabc894f77c6d44f6c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ0ZTg1NTRkZWIwYjE1N2ZmMTJjYWFiYzg5NGY3N2M2ZDQ0ZjZjMA==", "commit": {"author": {"name": "Chris Fairles", "email": "chris.fairles@gmail.com", "date": "2008-07-31T19:37:21Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-07-31T19:37:21Z"}, "message": "chrono (duration): Use explicitly defaulted ctor, cctor, dtor and assignment.\n\n2008-07-31  Chris Fairles <chris.fairles@gmail.com>\n\n        * include/std/chrono (duration): Use explicitly defaulted ctor, cctor,\n\t dtor and assignment. Add diagnostics as per 20.8.3 paragraphs 2, 3 \n\t and 4 in WD. Other minor tweaks.\n        * testsuite/20_util/duration/cons/1_neg.cc: Adjust line numbers.\n\t* testsuite/20_util/duration/requirements/typedefs_neg1.cc: New.\n\t* testsuite/20_util/duration/requirements/typedefs_neg2.cc: Likewise.\n\t* testsuite/20_util/duration/requirements/typedefs_neg3.cc: Likewise.\n\nFrom-SVN: r138434", "tree": {"sha": "18f198d79e94a66b1ea58b96abf1ddbd9eadfed1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18f198d79e94a66b1ea58b96abf1ddbd9eadfed1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d4e8554deb0b157ff12caabc894f77c6d44f6c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d4e8554deb0b157ff12caabc894f77c6d44f6c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d4e8554deb0b157ff12caabc894f77c6d44f6c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d4e8554deb0b157ff12caabc894f77c6d44f6c0/comments", "author": {"login": "chrisfearless", "id": 812000, "node_id": "MDQ6VXNlcjgxMjAwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/812000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisfearless", "html_url": "https://github.com/chrisfearless", "followers_url": "https://api.github.com/users/chrisfearless/followers", "following_url": "https://api.github.com/users/chrisfearless/following{/other_user}", "gists_url": "https://api.github.com/users/chrisfearless/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisfearless/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisfearless/subscriptions", "organizations_url": "https://api.github.com/users/chrisfearless/orgs", "repos_url": "https://api.github.com/users/chrisfearless/repos", "events_url": "https://api.github.com/users/chrisfearless/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisfearless/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "affa55c67fea50271e7a4a9f30806172e9a7a41a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/affa55c67fea50271e7a4a9f30806172e9a7a41a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/affa55c67fea50271e7a4a9f30806172e9a7a41a"}], "stats": {"total": 217, "additions": 187, "deletions": 30}, "files": [{"sha": "3cc11cf302ca7275246c62c3a5123386de210d0a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d4e8554deb0b157ff12caabc894f77c6d44f6c0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d4e8554deb0b157ff12caabc894f77c6d44f6c0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9d4e8554deb0b157ff12caabc894f77c6d44f6c0", "patch": "@@ -1,3 +1,13 @@\n+2008-07-31  Chris Fairles <chris.fairles@gmail.com>\n+\n+        * include/std/chrono (duration): Use explicitly defaulted ctor, cctor,\n+\tdtor and assignment. Add diagnostics as per 20.8.3 paragraphs 2, 3 \n+\tand 4 in WD. Other minor tweaks.\n+        * testsuite/20_util/duration/cons/1_neg.cc: Adjust line numbers.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg1.cc: New.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg2.cc: Likewise.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg3.cc: Likewise.\n+\n 2008-07-31  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/lib/libstdc++.exp (libstdc++_init): Set v3-libgomp."}, {"sha": "d20c7f45cd9f33683acb7935e4b4b6300df72564", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 37, "deletions": 28, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d4e8554deb0b157ff12caabc894f77c6d44f6c0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d4e8554deb0b157ff12caabc894f77c6d44f6c0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=9d4e8554deb0b157ff12caabc894f77c6d44f6c0", "patch": "@@ -166,36 +166,51 @@ namespace std\n         { return numeric_limits<_Rep>::min(); }\n       };\n \n+    template<typename _Tp>\n+      struct __is_duration\n+      : std::false_type\n+      { };\n+\n+    template<typename _Rep, typename _Period>\n+      struct __is_duration<duration<_Rep, _Period>>\n+      : std::true_type\n+      { };\n+\n+    template<typename T>\n+      struct __is_ratio\n+      : std::false_type\n+      { };\n+\n+    template<intmax_t _Num, intmax_t _Den>\n+      struct __is_ratio<ratio<_Num, _Den>>\n+      : std::true_type\n+      { };\n+\n     /// duration\n     template<typename _Rep, typename _Period>\n       struct duration\n       {\n+\tstatic_assert(!__is_duration<_Rep>::value, \"rep cannot be a duration\");\n+\tstatic_assert(__is_ratio<_Period>::value, \n+\t\t      \"period must be a specialization of ratio\");\n         static_assert(_Period::num > 0, \"period must be positive\");\n         \n         typedef _Rep    rep;\n         typedef _Period period;\n         \n-        // construction / destruction  \n-        duration ()\n-        : __r(rep(0))\n-        { }\n+        // 20.8.3.1 construction / copy / destroy\n+\tduration() = default;\n \n         template<typename _Rep2>\n           explicit duration(_Rep2 const& __rep)\n           : __r(static_cast<rep>(__rep))\n           {\n-            static_assert(is_convertible<_Rep2,rep>::value == true \n-              && (treat_as_floating_point<rep>::value == true \n-              || (!treat_as_floating_point<rep>::value \n-              && !treat_as_floating_point<_Rep2>::value)), \n-              \"cannot construct integral duration with floating point type\");\n+            static_assert(is_convertible<_Rep2,rep>::value \n+\t\t\t  && (treat_as_floating_point<rep>::value \n+\t\t\t      || !treat_as_floating_point<_Rep2>::value),\n+\t      \"cannot construct integral duration with floating point type\");\n           }\n \n-        duration(const duration& __d)\n-        : __r(__d.count())\n-        { }\n-\n-        // conversions\n         template<typename _Rep2, typename _Period2>\n           duration(const duration<_Rep2, _Period2>& __d)\n           : __r(duration_cast<duration>(__d).count())\n@@ -205,12 +220,16 @@ namespace std\n               \"the resulting duration is not exactly representable\");\n           }\n \n-        // observer\n+\t~duration() = default;\n+\tduration(const duration&) = default;\n+\tduration& operator=(const duration&) = default;\n+\n+        // 20.8.3.2 observer\n         rep\n         count() const\n         { return __r; }\n \n-        // arithmetic\n+        // 20.8.3.3 arithmetic\n         duration\n         operator+() const \n         { return *this; }\n@@ -269,7 +288,7 @@ namespace std\n           return *this;\n         }\n \n-        // special values\n+        // 20.8.3.4 special values\n         // TODO: These should be constexprs.\n         static const duration\n         zero()\n@@ -324,22 +343,12 @@ namespace std\n       operator*(const _Rep2& __s, const duration<_Rep1, _Period>& __d)\n       { return __d * __s; }\n \n-    template<typename _Tp>\n-      struct __is_not_duration\n-      : std::true_type\n-      { };\n-    \n-    template<typename _Rep, typename _Period>\n-      struct __is_not_duration<duration<_Rep, _Period>>\n-      : std::false_type\n-      { };\n-  \n     template<typename _Tp, typename _Up, typename _Ep = void>\n       struct __division_impl;\n   \n     template<typename _Rep1, typename _Period, typename _Rep2>\n       struct __division_impl<duration<_Rep1, _Period>, _Rep2, \n-        typename enable_if<__is_not_duration<_Rep2>::value>::type>\n+        typename enable_if<!__is_duration<_Rep2>::value>::type>\n       {\n         typedef typename common_type<_Rep1, _Rep2>::type __cr;\n         typedef "}, {"sha": "d8b08dbd4f8b48813e4fc0329508635125cdb2ae", "filename": "libstdc++-v3/testsuite/20_util/duration/cons/1_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d4e8554deb0b157ff12caabc894f77c6d44f6c0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcons%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d4e8554deb0b157ff12caabc894f77c6d44f6c0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcons%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcons%2F1_neg.cc?ref=9d4e8554deb0b157ff12caabc894f77c6d44f6c0", "patch": "@@ -41,6 +41,6 @@ test02()\n \n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 30 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 39 }\n-// { dg-error \"not exactly representable\" \"\" { target *-*-* } 203 }\n-// { dg-error \"integral duration with floating point\" \"\" { target *-*-* } 187 }\n+// { dg-error \"not exactly representable\" \"\" { target *-*-* } 218 }\n+// { dg-error \"integral duration with floating point\" \"\" { target *-*-* } 208 }\n // { dg-excess-errors \"In instantiation of\" }"}, {"sha": "188950d6347b3fc55d346a80fb40efa52a6d5d83", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg1.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d4e8554deb0b157ff12caabc894f77c6d44f6c0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d4e8554deb0b157ff12caabc894f77c6d44f6c0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc?ref=9d4e8554deb0b157ff12caabc894f77c6d44f6c0", "patch": "@@ -0,0 +1,45 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// 2008-07-31 Chris Fairles <chris.fairles@gmail.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <chrono>\n+\n+void test01()\n+{\n+  // Check if rep is a duration type\n+  typedef std::chrono::duration<int> rep_type;\n+  typedef std::chrono::duration<rep_type> test_type;\n+  test_type d;\n+}\n+\n+// { dg-error \"rep cannot be a duration\" \"\" { target *-*-* } 193 }\n+// { dg-error \"instantiated from here\" \"\" { target *-*-* } 40 }\n+// { dg-excess-errors \"In instantiation of\" }"}, {"sha": "783044fada60f97f3f39e6d388670291919e9ed8", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg2.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d4e8554deb0b157ff12caabc894f77c6d44f6c0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d4e8554deb0b157ff12caabc894f77c6d44f6c0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc?ref=9d4e8554deb0b157ff12caabc894f77c6d44f6c0", "patch": "@@ -0,0 +1,46 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// 2008-07-31 Chris Fairles <chris.fairles@gmail.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <chrono>\n+\n+void test01()\n+{\n+  // Check if period is a ratio\n+  typedef int rep_type;\n+  typedef int period_type;\n+  typedef std::chrono::duration<rep_type, period_type> test_type;\n+  test_type d;\n+}\n+\n+// { dg-error \"must be a specialization of ratio\" \"\" { target *-*-* } 194 }\n+// { dg-error \"instantiated from here\" \"\" { target *-*-* } 41 }\n+// { dg-excess-errors \"In instantiation of\" }"}, {"sha": "2896845d7d25ea42a4baa3e71a173aaace6738eb", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg3.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d4e8554deb0b157ff12caabc894f77c6d44f6c0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d4e8554deb0b157ff12caabc894f77c6d44f6c0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc?ref=9d4e8554deb0b157ff12caabc894f77c6d44f6c0", "patch": "@@ -0,0 +1,47 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// 2008-07-31 Chris Fairles <chris.fairles@gmail.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <ratio>\n+#include <chrono>\n+\n+void test01()\n+{\n+  // Check if period is positive\n+  typedef int rep_type;\n+  typedef std::ratio<-1> period_type;\n+  typedef std::chrono::duration<rep_type, period_type> test_type;\n+  test_type d;\n+}\n+\n+// { dg-error \"period must be positive\" \"\" { target *-*-* } 196 }\n+// { dg-error \"instantiated from here\" \"\" { target *-*-* } 42 }\n+// { dg-excess-errors \"In instantiation of\" }"}]}