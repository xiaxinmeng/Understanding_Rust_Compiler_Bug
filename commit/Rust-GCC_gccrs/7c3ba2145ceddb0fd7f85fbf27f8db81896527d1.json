{"sha": "7c3ba2145ceddb0fd7f85fbf27f8db81896527d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MzYmEyMTQ1Y2VkZGIwZmQ3Zjg1ZmJmMjdmOGRiODE4OTY1MjdkMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-02T21:07:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-03T05:54:03Z"}, "message": "c++: PMF template parm and noexcept [PR90664]\n\nThe constexpr code only wants to preserve PTRMEM_CST in conversions if the\nconversions are only qualification conversions; dropping noexcept counts as\na qualification adjustment in overload resolution, so let's include it here.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/90664\n\t* cvt.c (can_convert_qual): Check fnptr_conv_p.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/90664\n\t* g++.dg/cpp1z/noexcept-type24.C: New test.", "tree": {"sha": "f6c3d402642234abfc995eac5aa0e229dc4709dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6c3d402642234abfc995eac5aa0e229dc4709dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c3ba2145ceddb0fd7f85fbf27f8db81896527d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c3ba2145ceddb0fd7f85fbf27f8db81896527d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c3ba2145ceddb0fd7f85fbf27f8db81896527d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c3ba2145ceddb0fd7f85fbf27f8db81896527d1/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23be03a0f243a084a0fe03d0b96a3d045e1a2b65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23be03a0f243a084a0fe03d0b96a3d045e1a2b65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23be03a0f243a084a0fe03d0b96a3d045e1a2b65"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "f1687e804d1c56a64538a89faf3e0c41e305b091", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3ba2145ceddb0fd7f85fbf27f8db81896527d1/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3ba2145ceddb0fd7f85fbf27f8db81896527d1/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=7c3ba2145ceddb0fd7f85fbf27f8db81896527d1", "patch": "@@ -2013,6 +2013,11 @@ can_convert_qual (tree type, tree expr)\n   tree expr_type = TREE_TYPE (expr);\n   gcc_assert (!same_type_p (type, expr_type));\n \n+  /* A function pointer conversion also counts as a Qualification Adjustment\n+     under [over.ics.scs].  */\n+  if (fnptr_conv_p (type, expr_type))\n+    return true;\n+\n   if (TYPE_PTR_P (type) && TYPE_PTR_P (expr_type))\n     return comp_ptr_ttypes (TREE_TYPE (type), TREE_TYPE (expr_type));\n   else if (TYPE_PTRMEM_P (type) && TYPE_PTRMEM_P (expr_type))"}, {"sha": "df16ea7864158da3551f48e8c3e2a356485f9621", "filename": "gcc/testsuite/g++.dg/cpp1z/noexcept-type24.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3ba2145ceddb0fd7f85fbf27f8db81896527d1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnoexcept-type24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3ba2145ceddb0fd7f85fbf27f8db81896527d1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnoexcept-type24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnoexcept-type24.C?ref=7c3ba2145ceddb0fd7f85fbf27f8db81896527d1", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/90664\n+// { dg-do compile { target c++11 } }\n+\n+template <typename TT, typename MFP, MFP> struct OpM;\n+\n+template <typename TR, typename TT, TR (TT::*f)()>\n+struct OpM<TT, TR (TT::*)(), f>\n+{};\n+\n+class Class {\n+public:\n+  int address() noexcept { return 0; }\n+  void address(int) noexcept {}\n+};\n+\n+struct Sk {\n+  template <class C, typename R> Sk(R (C::*p)()) {\n+    typedef OpM<C, R (C::*)() /* noexcept */, &Class::address> OP;\n+  }\n+};\n+\n+Sk sk(static_cast<int (Class::*)()>(&Class::address));"}]}