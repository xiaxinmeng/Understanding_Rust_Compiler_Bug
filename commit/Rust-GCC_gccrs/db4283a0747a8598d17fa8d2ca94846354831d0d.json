{"sha": "db4283a0747a8598d17fa8d2ca94846354831d0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI0MjgzYTA3NDdhODU5OGQxN2ZhOGQyY2E5NDg0NjM1NDgzMWQwZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-12-17T07:40:08Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-12-17T07:40:08Z"}, "message": "cp-tree.h (cp_tree_index): Add CPTI_DSO_HANDLE.\n\n\t* cp-tree.h (cp_tree_index): Add CPTI_DSO_HANDLE.\n\t(dso_handle_node): New macro.\n\t(flag_use_cxa_atexit): New variable.\n\t(declare_global_var): New function.\n\t(start_anon_func): Remove declaration.\n\t(end_anon_func): Likewise.\n\t* decl.c (get_atexit_node): New function, split out from\n\tdestroy_local_static.  Handle flag_use_cxa_atexit.\n\t(get_dso_handle_node): Likewise.\n\t(start_cleanup_fn): Renamed from start_anon_func.  Moved here from\n\texcept.c.  Handle flag_use_cxa_atexit.\n\t(end_cleanup_fn): Renamed from end_anon_func.  Moved here from\n\texcept.c.\n\t(declare_global_var): New variable.\n\t(destroy_local_static): Handle flag_use_cxa_atexit.\n\t* decl2.c (flag_use_cxa_atexit): New variable.\n\t(lang_f_options): Likewise.\n\t* except.c (start_anon_func): Remove.\n\t(end_anon_func): Liekwise.\n\t* lang-options.h: Add -fuse-cxa-atexit and -fno-use-cxa-atexit.\n\t* rtti.c (get_tinfo_var): Use declare_global_var.\n\nFrom-SVN: r30990", "tree": {"sha": "baf33a58f78965a95318fce634a68a64f07a3cc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/baf33a58f78965a95318fce634a68a64f07a3cc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db4283a0747a8598d17fa8d2ca94846354831d0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db4283a0747a8598d17fa8d2ca94846354831d0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db4283a0747a8598d17fa8d2ca94846354831d0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db4283a0747a8598d17fa8d2ca94846354831d0d/comments", "author": null, "committer": null, "parents": [{"sha": "fc69382254fcf45ced69a604adea5b6123c3c1c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc69382254fcf45ced69a604adea5b6123c3c1c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc69382254fcf45ced69a604adea5b6123c3c1c8"}], "stats": {"total": 330, "additions": 242, "deletions": 88}, "files": [{"sha": "73cfd67b319fb3ee6933071a26ec90f33a64458a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4283a0747a8598d17fa8d2ca94846354831d0d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4283a0747a8598d17fa8d2ca94846354831d0d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=db4283a0747a8598d17fa8d2ca94846354831d0d", "patch": "@@ -1,3 +1,27 @@\n+1999-12-16  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (cp_tree_index): Add CPTI_DSO_HANDLE.\n+\t(dso_handle_node): New macro.\n+\t(flag_use_cxa_atexit): New variable.\n+\t(declare_global_var): New function.\n+\t(start_anon_func): Remove declaration.\n+\t(end_anon_func): Likewise.\n+\t* decl.c (get_atexit_node): New function, split out from\n+\tdestroy_local_static.  Handle flag_use_cxa_atexit.\n+\t(get_dso_handle_node): Likewise.\n+\t(start_cleanup_fn): Renamed from start_anon_func.  Moved here from\n+\texcept.c.  Handle flag_use_cxa_atexit.\n+\t(end_cleanup_fn): Renamed from end_anon_func.  Moved here from\n+\texcept.c.\n+\t(declare_global_var): New variable.\n+\t(destroy_local_static): Handle flag_use_cxa_atexit.\n+\t* decl2.c (flag_use_cxa_atexit): New variable.\n+\t(lang_f_options): Likewise.\n+\t* except.c (start_anon_func): Remove.\n+\t(end_anon_func): Liekwise.\n+\t* lang-options.h: Add -fuse-cxa-atexit and -fno-use-cxa-atexit.\n+\t* rtti.c (get_tinfo_var): Use declare_global_var.\n+\n 1999-12-16  Mark Mitchell  <mark@codesourcery.com>\n \n \t* class.c (check_field_decls): Don't return a value."}, {"sha": "6b22ee9e573fe216b05dcc1454f5cf14e28fe05b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4283a0747a8598d17fa8d2ca94846354831d0d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4283a0747a8598d17fa8d2ca94846354831d0d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=db4283a0747a8598d17fa8d2ca94846354831d0d", "patch": "@@ -483,6 +483,7 @@ enum cp_tree_index\n     CPTI_MINUS_ONE,\n     CPTI_TERMINATE,\n     CPTI_ATEXIT,\n+    CPTI_DSO_HANDLE,\n \n     CPTI_MAX\n };\n@@ -574,9 +575,12 @@ extern tree cp_global_trees[CPTI_MAX];\n /* The declaration for `std::terminate'.  */\n #define terminate_node                  cp_global_trees[CPTI_TERMINATE]\n \n-/* The declaration for `std::atexit'.  */\n+/* A pointer to `std::atexit'.  */\n #define atexit_node                     cp_global_trees[CPTI_ATEXIT]\n \n+/* A pointer to `__dso_handle'.  */\n+#define dso_handle_node                 cp_global_trees[CPTI_DSO_HANDLE]\n+\n /* The type of a destructor.  */\n #define cleanup_type                    cp_global_trees[CPTI_CLEANUP_TYPE]\n \n@@ -3128,6 +3132,11 @@ extern int flag_weak;\n \n extern int flag_new_abi;\n \n+/* Nonzero to use __cxa_atexit, rather than atexit, to register\n+   destructors for local statics and global objects.  */\n+\n+extern int flag_use_cxa_atexit;\n+\n /* Nonzero to not ignore namespace std. */\n \n extern int flag_honor_std;\n@@ -3564,6 +3573,7 @@ extern tree build_target_expr_with_type         PROTO((tree, tree));\n extern void make_rtl_for_local_static           PROTO((tree));\n extern int local_variable_p                     PROTO((tree));\n extern int nonstatic_local_decl_p               PROTO((tree));\n+extern tree declare_global_var                  PROTO((tree, tree));\n \n /* in decl2.c */\n extern void init_decl2\t\t\t\tPROTO((void));\n@@ -3659,8 +3669,6 @@ extern void expand_builtin_throw\t\tPROTO((void));\n extern tree expand_start_eh_spec\t\tPROTO((void));\n extern void expand_end_eh_spec\t\t        PROTO((tree, tree));\n extern void expand_exception_blocks\t\tPROTO((void));\n-extern tree start_anon_func\t\t\tPROTO((void));\n-extern void end_anon_func\t\t\tPROTO((void));\n extern tree build_throw\t\t\t\tPROTO((tree));\n extern void mark_all_runtime_matches            PROTO((void));\n "}, {"sha": "6b240f9e246a138150688987764e21cd074a9543", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 197, "deletions": 31, "changes": 228, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4283a0747a8598d17fa8d2ca94846354831d0d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4283a0747a8598d17fa8d2ca94846354831d0d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=db4283a0747a8598d17fa8d2ca94846354831d0d", "patch": "@@ -175,6 +175,10 @@ static void destroy_local_var PROTO((tree));\n static void finish_constructor_body PROTO((void));\n static void finish_destructor_body PROTO((void));\n static tree create_array_type_for_decl PROTO((tree, tree, tree));\n+static tree get_atexit_node PROTO((void));\n+static tree get_dso_handle_node PROTO((void));\n+static tree start_cleanup_fn PROTO((void));\n+static void end_cleanup_fn PROTO((void));\n \n #if defined (DEBUG_CP_BINDING_LEVELS)\n static void indent PROTO((void));\n@@ -7856,47 +7860,205 @@ finish_decl (decl, init, asmspec_tree)\n   cp_finish_decl (decl, init, asmspec_tree, 0);\n }\n \n+/* Returns a declaration for a VAR_DECL as if:\n+\n+     extern \"C\" TYPE NAME;\n+\n+   had been seen.  Used to create compiler-generated global\n+   variables.  */\n+\n+tree\n+declare_global_var (name, type)\n+     tree name;\n+     tree type;\n+{\n+  tree decl;\n+\n+  push_to_top_level ();\n+  decl = build_decl (VAR_DECL, name, type);\n+  TREE_PUBLIC (decl) = 1;\n+  DECL_EXTERNAL (decl) = 1;\n+  DECL_ARTIFICIAL (decl) = 1;\n+  pushdecl (decl);\n+  cp_finish_decl (decl, NULL_TREE, NULL_TREE, 0);\n+  pop_from_top_level ();\n+\n+  return decl;\n+}\n+\n+/* Returns a pointer to the `atexit' function.  Note that if\n+   FLAG_USE_CXA_ATEXIT is non-zero, then this will actually be the new\n+   `__cxa_atexit' function specified in the IA64 C++ ABI.  */\n+\n+static tree\n+get_atexit_node ()\n+{\n+  tree atexit_fndecl;\n+  tree arg_types;\n+  tree fn_type;\n+  tree fn_ptr_type;\n+  const char *name;\n+\n+  if (atexit_node)\n+    return atexit_node;\n+\n+  if (flag_use_cxa_atexit)\n+    {\n+      /* The declaration for `__cxa_atexit' is:\n+\n+\t   int __cxa_atexit (void (*)(void *), void *, void *)\n+\n+\t We build up the argument types and then then function type\n+\t itself.  */\n+      \n+      /* First, build the pointer-to-function type for the first\n+\t argument.  */\n+      arg_types = tree_cons (NULL_TREE, ptr_type_node, void_list_node);\n+      fn_type = build_function_type (void_type_node, arg_types);\n+      fn_ptr_type = build_pointer_type (fn_type);\n+      /* Then, build the rest of the argument types.  */\n+      arg_types = tree_cons (NULL_TREE, ptr_type_node, void_list_node);\n+      arg_types = tree_cons (NULL_TREE, ptr_type_node, arg_types);\n+      arg_types = tree_cons (NULL_TREE, fn_ptr_type, arg_types);\n+      /* And the final __cxa_atexit type.  */\n+      fn_type = build_function_type (integer_type_node, arg_types);\n+      fn_ptr_type = build_pointer_type (fn_type);\n+      name = \"__cxa_atexit\";\n+    }\n+  else\n+    {\n+      /* The declaration for `atexit' is:\n+\t  \n+           int atexit (void (*)());\n+\n+\t We build up the argument types and then then function type\n+\t itself.  */\n+      fn_type = build_function_type (void_type_node, void_list_node);\n+      fn_ptr_type = build_pointer_type (fn_type);\n+      arg_types = tree_cons (NULL_TREE, fn_ptr_type, void_list_node);\n+      /* Build the final atexit type.  */\n+      fn_type = build_function_type (integer_type_node, arg_types);\n+      name = \"atexit\";\n+    }\n+\n+  /* Now, build the function declaration.  */\n+  push_lang_context (lang_name_c);\n+  atexit_fndecl = define_function (name, fn_type, /*pfn=*/0, NULL_PTR);\n+  mark_used (atexit_fndecl);\n+  pop_lang_context ();\n+  atexit_node = default_conversion (atexit_fndecl);\n+\n+  return atexit_node;\n+}\n+\n+/* Returns the __dso_handle VAR_DECL.  */\n+\n+static tree\n+get_dso_handle_node ()\n+{\n+  if (dso_handle_node)\n+    return dso_handle_node;\n+\n+  /* Declare the variable.  */\n+  dso_handle_node = declare_global_var (get_identifier (\"__dso_handle\"),\n+\t\t\t\t\tptr_type_node);\n+\n+  return dso_handle_node;\n+}\n+\n+/* Begin a new function with internal linkage whose job will be simply\n+   to destroy some particular variable.  */\n+\n+static tree\n+start_cleanup_fn ()\n+{\n+  static int counter = 0;\n+  int old_interface_unknown = interface_unknown;\n+  char name[32];\n+  tree parmtypes;\n+  tree fntype;\n+  tree fndecl;\n+\n+  push_to_top_level ();\n+\n+  /* No need to mangle this.  */\n+  push_lang_context (lang_name_c);\n+\n+  interface_unknown = 1;\n+\n+  /* Build the parameter-types.  */\n+  parmtypes = void_list_node;\n+  /* Functions passed to __cxa_atexit take an additional parameter.\n+     We'll just ignore it.  After we implement the new calling\n+     convention for destructors, we can eliminate the use of\n+     additional cleanup functions entirely in the -fnew-abi case.  */\n+  if (flag_use_cxa_atexit)\n+    parmtypes = tree_cons (NULL_TREE, ptr_type_node, parmtypes);\n+  /* Build the function type itself.  */\n+  fntype = build_function_type (void_type_node, parmtypes);\n+  /* Build the name of the function.  */\n+  sprintf (name, \"__tcf_%d\", counter++);\n+  /* Build the function declaration.  */\n+  fndecl = build_lang_decl (FUNCTION_DECL, get_identifier (name), fntype);\n+  /* It's a function with internal linkage, generated by the\n+     compiler.  */\n+  TREE_PUBLIC (fndecl) = 0;\n+  DECL_ARTIFICIAL (fndecl) = 1;\n+  /* Build the parameter.  */\n+  if (flag_use_cxa_atexit)\n+    {\n+      tree parmdecl;\n+\n+      parmdecl = build_decl (PARM_DECL, NULL_TREE, ptr_type_node);\n+      DECL_CONTEXT (parmdecl) = fndecl;\n+      DECL_ARG_TYPE (parmdecl) = ptr_type_node;\n+      TREE_USED (parmdecl) = 1;\n+      DECL_ARGUMENTS (fndecl) = parmdecl;\n+    }\n+\n+  start_function (/*specs=*/NULL_TREE, fndecl, NULL_TREE, SF_PRE_PARSED);\n+  do_pushlevel ();\n+\n+  interface_unknown = old_interface_unknown;\n+\n+  pop_lang_context ();\n+\n+  return current_function_decl;\n+}\n+\n+/* Finish the cleanup function begun by start_cleanup_fn.  */\n+\n+static void\n+end_cleanup_fn ()\n+{\n+  do_poplevel ();\n+\n+  expand_body (finish_function (lineno, 0));\n+\n+  pop_from_top_level ();\n+}\n+\n /* Generate code to handle the destruction of the function-scoped\n    static variable DECL.  */\n \n static void\n destroy_local_static (decl)\n      tree decl;\n {\n-  tree cleanup, fcall;\n+  tree cleanup;\n   tree compound_stmt;\n-  int saved_flag_access_control;\n+  tree args;\n+  tree fcall;\n \n-  if (atexit_node == 0)\n-    {\n-      tree atexit_fndecl, PFV, pfvlist;\n-\n-      PFV = build_pointer_type (build_function_type\n-\t\t\t\t(void_type_node, void_list_node));\n-\n-      pfvlist = tree_cons (NULL_TREE, PFV, void_list_node);\n+  int saved_flag_access_control;\n \n-      push_lang_context (lang_name_c);\n-      /* Note that we do not call pushdecl for this function;\n-\t there's no reason that this declaration should be\n-\t accessible to anyone.  */\n-      atexit_fndecl\n-\t= define_function (\"atexit\",\n-\t\t\t   build_function_type (void_type_node,\n-\t\t\t\t\t\tpfvlist),\n-\t\t\t   /*pfn=*/0, NULL_PTR);\n-      mark_used (atexit_fndecl);\n-      atexit_node = default_conversion (atexit_fndecl);\n-      pop_lang_context ();\n-    }\n-\t      \n   /* Call build_cleanup before we enter the anonymous function so that\n      any access checks will be done relative to the current scope,\n      rather than the scope of the anonymous function.  */\n   build_cleanup (decl);\n \n   /* Now start the function.  */\n-  cleanup = start_anon_func ();\n+  cleanup = start_cleanup_fn ();\n \n   /* Now, recompute the cleanup.  It may contain SAVE_EXPRs that refer\n      to the original function, rather than the anonymous one.  That\n@@ -7911,16 +8073,20 @@ destroy_local_static (decl)\n   compound_stmt = begin_compound_stmt (/*has_no_scope=*/0);\n   finish_expr_stmt (fcall);\n   finish_compound_stmt (/*has_no_scope=*/0, compound_stmt);\n-  end_anon_func ();\n+  end_cleanup_fn ();\n \n   /* Call atexit with the cleanup function.  */\n   mark_addressable (cleanup);\n   cleanup = build_unary_op (ADDR_EXPR, cleanup, 0);\n-  fcall = build_function_call (atexit_node,\n-\t\t\t       tree_cons (NULL_TREE, \n-\t\t\t\t\t  cleanup, \n-\t\t\t\t\t  NULL_TREE));\n-  finish_expr_stmt (fcall);\n+  if (flag_use_cxa_atexit)\n+    {\n+      args = tree_cons (NULL_TREE, get_dso_handle_node (), NULL_TREE);\n+      args = tree_cons (NULL_TREE, null_pointer_node, args);\n+      args = tree_cons (NULL_TREE, cleanup, args);\n+    }\n+  else\n+    args = tree_cons (NULL_TREE, cleanup, NULL_TREE);\n+  finish_expr_stmt (build_function_call (get_atexit_node (), args));\n }\n \n void"}, {"sha": "7ed8ab0415304911f43095628d7edd43c8bbddcb", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4283a0747a8598d17fa8d2ca94846354831d0d/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4283a0747a8598d17fa8d2ca94846354831d0d/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=db4283a0747a8598d17fa8d2ca94846354831d0d", "patch": "@@ -441,6 +441,11 @@ int flag_weak = 1;\n \n int flag_new_abi;\n \n+/* Nonzero to use __cxa_atexit, rather than atexit, to register\n+   destructors for local statics and global objects.  */\n+\n+int flag_use_cxa_atexit;\n+\n /* Nonzero to not ignore namespace std. */\n \n int flag_honor_std;\n@@ -535,6 +540,7 @@ lang_f_options[] =\n   {\"squangle\", &flag_do_squangling, 1},\n   {\"stats\", &flag_detailed_statistics, 1},\n   {\"strict-prototype\", &flag_strict_prototype, 1},\n+  {\"use-cxa-atexit\", &flag_use_cxa_atexit, 1},\n   {\"vtable-gc\", &flag_vtable_gc, 1},\n   {\"vtable-thunks\", &flag_vtable_thunks, 1},\n   {\"weak\", &flag_weak, 1},"}, {"sha": "1dd167cc7adb35063a66cccb7cfc37005c63fb78", "filename": "gcc/cp/except.c", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4283a0747a8598d17fa8d2ca94846354831d0d/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4283a0747a8598d17fa8d2ca94846354831d0d/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=db4283a0747a8598d17fa8d2ca94846354831d0d", "patch": "@@ -681,49 +681,6 @@ expand_exception_blocks ()\n     }\n }\n \n-tree\n-start_anon_func ()\n-{\n-  static int counter = 0;\n-  int old_interface_unknown = interface_unknown;\n-  char name[32];\n-  tree params;\n-  tree t;\n-\n-  push_to_top_level ();\n-\n-  /* No need to mangle this.  */\n-  push_lang_context (lang_name_c);\n-\n-  interface_unknown = 1;\n-\n-  params = void_list_node;\n-  /* tcf stands for throw clean function.  */\n-  sprintf (name, \"__tcf_%d\", counter++);\n-  t = make_call_declarator (get_identifier (name), params, NULL_TREE,\n-\t\t\t    NULL_TREE);\n-  start_function (decl_tree_cons (NULL_TREE, get_identifier (\"static\"),\n-\t\t\t\t  void_list_node),\n-\t\t  t, NULL_TREE, SF_DEFAULT);\n-  do_pushlevel ();\n-\n-  interface_unknown = old_interface_unknown;\n-\n-  pop_lang_context ();\n-\n-  return current_function_decl;\n-}\n-\n-void\n-end_anon_func ()\n-{\n-  do_poplevel ();\n-\n-  expand_body (finish_function (lineno, 0));\n-\n-  pop_from_top_level ();\n-}\n-\n /* Return a pointer to a buffer for an exception object of type TYPE.  */\n \n static tree"}, {"sha": "779cbcd643b5b729c4fa4a254cea49b87b361695", "filename": "gcc/cp/lang-options.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4283a0747a8598d17fa8d2ca94846354831d0d/gcc%2Fcp%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4283a0747a8598d17fa8d2ca94846354831d0d/gcc%2Fcp%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-options.h?ref=db4283a0747a8598d17fa8d2ca94846354831d0d", "patch": "@@ -98,6 +98,8 @@ DEFINE_LANG_NAME (\"C++\")\n   { \"-ftemplate-depth-\", \"Specify maximum template instantiation depth\"},\n   { \"-fthis-is-variable\", \"Make 'this' not be type '* const'\"  },\n   { \"-fno-this-is-variable\", \"\" },\n+  { \"-fuse-cxa-atexit\", \"Use __cxa_atexit to register destructors.\" },\n+  { \"-fno-use-cxa-atexit\", \"\" },\n   { \"-fvtable-gc\", \"Discard unused virtual functions\" },\n   { \"-fno-vtable-gc\", \"\" },\n   { \"-fvtable-thunks\", \"Implement vtables using thunks\" },"}, {"sha": "5c8da916fbbbf793777d6f90f678b86bb87a0fc4", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4283a0747a8598d17fa8d2ca94846354831d0d/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4283a0747a8598d17fa8d2ca94846354831d0d/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=db4283a0747a8598d17fa8d2ca94846354831d0d", "patch": "@@ -308,7 +308,7 @@ get_tinfo_var (type)\n      tree type;\n {\n   tree tname = build_overload_with_type (get_identifier (\"__ti\"), type);\n-  tree tdecl, arrtype;\n+  tree arrtype;\n   int size;\n \n   if (IDENTIFIER_GLOBAL_VALUE (tname))\n@@ -342,16 +342,7 @@ get_tinfo_var (type)\n     (unsigned_char_type_node,\n      build_index_type (size_int (size / BITS_PER_UNIT - 1)));\n \n-  tdecl = build_decl (VAR_DECL, tname, arrtype);\n-  TREE_PUBLIC (tdecl) = 1;\n-  DECL_EXTERNAL (tdecl) = 1;\n-  DECL_ARTIFICIAL (tdecl) = 1;\n-  push_to_top_level ();\n-  pushdecl (tdecl);\n-  cp_finish_decl (tdecl, NULL_TREE, NULL_TREE, 0);\n-  pop_from_top_level ();\n-\n-  return tdecl;\n+  return declare_global_var (tname, arrtype);\n }\n \n /* Returns the decl for a function which will return a type_info node for"}]}