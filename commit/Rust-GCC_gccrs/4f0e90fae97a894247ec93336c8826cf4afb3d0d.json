{"sha": "4f0e90fae97a894247ec93336c8826cf4afb3d0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYwZTkwZmFlOTdhODk0MjQ3ZWM5MzMzNmM4ODI2Y2Y0YWZiM2QwZA==", "commit": {"author": {"name": "Hongtao Liu", "email": "liuhongt@gcc.gnu.org", "date": "2019-05-08T10:21:40Z"}, "committer": {"name": "Hongtao Liu", "email": "liuhongt@gcc.gnu.org", "date": "2019-05-08T10:21:40Z"}, "message": "Enable support for bfloat16 which will be in Future Cooper Lake.\n\nThere are 3 instructions for AVX512BF16: VCVTNE2PS2BF16, VCVTNEPS2BF16 and\nDPBF16PS instructions, which are Vector Neural Network Instructions\nsupporting:\n    \n- VCVTNE2PS2BF16: Convert Two Packed Single Data to One Packed BF16 Data.\n- VCVTNEPS2BF16: Convert Packed Single Data to Packed BF16 Data.\n- VDPBF16PS: Dot Product of BF16 Pairs Accumulated into Packed Single Precision.\n\n2019-05-07  Wei Xiao  <wei3.xiao@intel.com>\n\n\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_AVX512BF16_SET\n\tOPTION_MASK_ISA_AVX512BF16_UNSET, OPTION_MASK_ISA2_AVX512BW_UNSET): New.\n\t(OPTION_MASK_ISA2_AVX512F_UNSET): Add OPTION_MASK_ISA_AVX512BF16_UNSET.\n\t(ix86_handle_option): Handle -mavx512bf16.\n\t* config.gcc: Add avx512bf16vlintrin.h and avx512bf16intrin.h\n\tto extra_headers.\n\t* config/i386/avx512bf16vlintrin.h: New.\n\t* config/i386/avx512bf16intrin.h: New.\n\t* config/i386/cpuid.h (bit_AVX512BF16): New.\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect BF16.\n\t* config/i386/i386-builtin-types.def: Add new types.\n\t* config/i386/i386-builtin.def: Add new builtins.\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Define\n\t__AVX512BF16__.\n\t* config/i386/i386-option.c (ix86_target_string): Add -mavx512bf16.\n\t(ix86_option_override_internal): Handle BF16.\n\t(ix86_valid_target_attribute_inner_p): Ditto.\n\t* config/i386/i386-expand.c (ix86_expand_args_builtin): Ditto.\n\t* config/i386/i386-builtin.c (enum processor_features): Add\n\tF_AVX512BF16.\n\t(static const _isa_names_table isa_names_table): Ditto.\n\t* config/i386/i386.h (TARGET_AVX512BF16, TARGET_AVX512BF16_P): New.\n\t(PTA_AVX512BF16): Ditto.\n\t* config/i386/i386.opt: Add -mavx512bf16.\n\t* config/i386/immintrin.h: Include avx512bf16intrin.h\n\tand avx512bf16vlintrin.h.\n\t* config/i386/sse.md (avx512f_cvtne2ps2bf16_<mode><mask_name>,\n\tavx512f_cvtneps2bf16_<mode><mask_name>,\n\tavx512f_dpbf16ps_<mode><mask_half_name>): New define_insn patterns.\n\t* config/i386/subst.md (mask_half): Add new subst.\n\t* doc/invoke.texi: Document -mavx512bf16.\n\n2019-05-07  Wei Xiao  <wei3.xiao@intel.com>\n\n\t* gcc.target/i386/avx512bf16-vcvtne2ps2bf16-1.c: New test.\n\t* gcc.target/i386/avx512bf16-vcvtneps2bf16-1.c: New test.\n\t* gcc.target/i386/avx512bf16-vdpbf16ps-1.c: New test.\n\t* gcc.target/i386/avx512bf16vl-vcvtne2ps2bf16-1.c: New test.\n\t* gcc.target/i386/avx512bf16vl-vcvtneps2bf16-1.c: New test.\n\t* gcc.target/i386/avx512bf16vl-vdpbf16ps-1.c: New test.\n\t* gcc.target/i386/builtin_target.c: Handle avx512bf16.\n\t* gcc.target/i386/sse-12.c: Add -mavx512bf16.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Ditto.\n\t* gcc.target/i386/sse-22.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* g++.dg/other/i386-2.C: Ditto.\n\t* g++.dg/other/i386-3.C: Ditto.\n\n2019-05-07  Hongtao Liu  <hongtao.liu@intel.com>\n\n\t* config/i386/cpuinfo.c (get_available_features): Detect BF16.\n\t* config/i386/cpuinfo.h (enum processor_features): Add\n\tFEATURE_AVX512BF16.\n\nFrom-SVN: r271006", "tree": {"sha": "0cfa0ff6eb03bc72ee6f2320052fe38d3e8501e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cfa0ff6eb03bc72ee6f2320052fe38d3e8501e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f0e90fae97a894247ec93336c8826cf4afb3d0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0e90fae97a894247ec93336c8826cf4afb3d0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f0e90fae97a894247ec93336c8826cf4afb3d0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0e90fae97a894247ec93336c8826cf4afb3d0d/comments", "author": null, "committer": null, "parents": [{"sha": "da2d30c199a6b6866593c20dbd84673c1637be89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da2d30c199a6b6866593c20dbd84673c1637be89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da2d30c199a6b6866593c20dbd84673c1637be89"}], "stats": {"total": 842, "additions": 824, "deletions": 18}, "files": [{"sha": "e37aafc4d2a5fb7a8b9a374f59d6e12b5573d93f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -3,6 +3,40 @@\n \tPR tree-optimization/90356\n \t* match.pd ((X +/- 0.0) +/- 0.0): Optimize into X +/- 0.0 if possible.\n \n+2019-05-07  Wei Xiao  <wei3.xiao@intel.com>\n+\n+\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_AVX512BF16_SET\n+\tOPTION_MASK_ISA_AVX512BF16_UNSET, OPTION_MASK_ISA2_AVX512BW_UNSET): New.\n+\t(OPTION_MASK_ISA2_AVX512F_UNSET): Add OPTION_MASK_ISA_AVX512BF16_UNSET.\n+\t(ix86_handle_option): Handle -mavx512bf16.\n+\t* config.gcc: Add avx512bf16vlintrin.h and avx512bf16intrin.h\n+\tto extra_headers.\n+\t* config/i386/avx512bf16vlintrin.h: New.\n+\t* config/i386/avx512bf16intrin.h: New.\n+\t* config/i386/cpuid.h (bit_AVX512BF16): New.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect BF16.\n+\t* config/i386/i386-builtin-types.def: Add new types.\n+\t* config/i386/i386-builtin.def: Add new builtins.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Define\n+\t__AVX512BF16__.\n+\t* config/i386/i386-option.c (ix86_target_string): Add -mavx512bf16.\n+\t(ix86_option_override_internal): Handle BF16.\n+\t(ix86_valid_target_attribute_inner_p): Ditto.\n+\t* config/i386/i386-expand.c (ix86_expand_args_builtin): Ditto.\n+\t* config/i386/i386-builtin.c (enum processor_features): Add\n+\tF_AVX512BF16.\n+\t(static const _isa_names_table isa_names_table): Ditto.\n+\t* config/i386/i386.h (TARGET_AVX512BF16, TARGET_AVX512BF16_P): New.\n+\t(PTA_AVX512BF16): Ditto.\n+\t* config/i386/i386.opt: Add -mavx512bf16.\n+\t* config/i386/immintrin.h: Include avx512bf16intrin.h\n+\tand avx512bf16vlintrin.h.\n+\t* config/i386/sse.md (avx512f_cvtne2ps2bf16_<mode><mask_name>,\n+\tavx512f_cvtneps2bf16_<mode><mask_name>,\n+\tavx512f_dpbf16ps_<mode><mask_half_name>): New define_insn patterns.\n+\t* config/i386/subst.md (mask_half): Add new subst.\n+\t* doc/invoke.texi: Document -mavx512bf16.\n+\n 2019-05-07  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000-protos.h (rs6000_legitimize_reload_address_ptr):"}, {"sha": "db5c3f843461c0fe78336d73cbd2057c19f9f252", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -88,6 +88,7 @@ along with GCC; see the file COPYING3.  If not see\n   (OPTION_MASK_ISA_AVX512VPOPCNTDQ | OPTION_MASK_ISA_AVX512F_SET)\n #define OPTION_MASK_ISA_AVX512BITALG_SET \\\n   (OPTION_MASK_ISA_AVX512BITALG | OPTION_MASK_ISA_AVX512F_SET)\n+#define OPTION_MASK_ISA_AVX512BF16_SET OPTION_MASK_ISA_AVX512BF16\n #define OPTION_MASK_ISA_RTM_SET OPTION_MASK_ISA_RTM\n #define OPTION_MASK_ISA_PRFCHW_SET OPTION_MASK_ISA_PRFCHW\n #define OPTION_MASK_ISA_RDSEED_SET OPTION_MASK_ISA_RDSEED\n@@ -215,6 +216,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_AVX512VNNI_UNSET OPTION_MASK_ISA_AVX512VNNI\n #define OPTION_MASK_ISA_AVX512VPOPCNTDQ_UNSET OPTION_MASK_ISA_AVX512VPOPCNTDQ\n #define OPTION_MASK_ISA_AVX512BITALG_UNSET OPTION_MASK_ISA_AVX512BITALG\n+#define OPTION_MASK_ISA_AVX512BF16_UNSET OPTION_MASK_ISA_AVX512BF16\n #define OPTION_MASK_ISA_RTM_UNSET OPTION_MASK_ISA_RTM\n #define OPTION_MASK_ISA_PRFCHW_UNSET OPTION_MASK_ISA_PRFCHW\n #define OPTION_MASK_ISA_RDSEED_UNSET OPTION_MASK_ISA_RDSEED\n@@ -276,10 +278,14 @@ along with GCC; see the file COPYING3.  If not see\n    | OPTION_MASK_ISA_SSE_UNSET)\n \n #define OPTION_MASK_ISA2_AVX512F_UNSET \\\n-  (OPTION_MASK_ISA_AVX5124FMAPS_UNSET | OPTION_MASK_ISA_AVX5124VNNIW_UNSET)\n+  (OPTION_MASK_ISA_AVX512BF16_UNSET \\\n+   | OPTION_MASK_ISA_AVX5124FMAPS_UNSET \\\n+   | OPTION_MASK_ISA_AVX5124VNNIW_UNSET)\n #define OPTION_MASK_ISA2_GENERAL_REGS_ONLY_UNSET \\\n   (OPTION_MASK_ISA2_AVX512F_UNSET)\n \n+#define OPTION_MASK_ISA2_AVX512BW_UNSET OPTION_MASK_ISA_AVX512BF16_UNSET\n+\n /* Set 1 << value as value of -malign-FLAG option.  */\n \n static void\n@@ -738,6 +744,21 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mavx512bf16:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_AVX512BF16_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_AVX512BF16_SET;\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512BW_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AVX512BW_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA_AVX512BF16_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_AVX512BF16_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_msgx:\n       if (value)\n \t{\n@@ -800,6 +821,8 @@ ix86_handle_option (struct gcc_options *opts,\n \t{\n \t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_AVX512BW_UNSET;\n \t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AVX512BW_UNSET;\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AVX512BW_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AVX512BW_UNSET;\n \t}\n       return true;\n "}, {"sha": "b5a313f5c59e2090a252c320bc491430be3a2571", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -407,7 +407,7 @@ i[34567]86-*-*)\n \t\t       avx512vnnivlintrin.h vaesintrin.h vpclmulqdqintrin.h\n \t\t       avx512vpopcntdqvlintrin.h avx512bitalgintrin.h\n \t\t       pconfigintrin.h wbnoinvdintrin.h movdirintrin.h\n-\t\t       waitpkgintrin.h cldemoteintrin.h\"\n+\t\t       waitpkgintrin.h cldemoteintrin.h avx512bf16vlintrin.h avx512bf16intrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -439,7 +439,7 @@ x86_64-*-*)\n \t\t       avx512vnnivlintrin.h vaesintrin.h vpclmulqdqintrin.h\n \t\t       avx512vpopcntdqvlintrin.h avx512bitalgintrin.h\n \t\t       pconfigintrin.h wbnoinvdintrin.h movdirintrin.h\n-\t\t       waitpkgintrin.h cldemoteintrin.h\"\n+\t\t       waitpkgintrin.h cldemoteintrin.h avx512bf16vlintrin.h avx512bf16intrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "cc983bdf590dcf6a79f4bd27418a77bfd6a08d20", "filename": "gcc/config/i386/avx512bf16intrin.h", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig%2Fi386%2Favx512bf16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig%2Fi386%2Favx512bf16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512bf16intrin.h?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -0,0 +1,118 @@\n+/* Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _IMMINTRIN_H_INCLUDED\n+#error \"Never use <avx512bf16intrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef _AVX512BF16INTRIN_H_INCLUDED\n+#define _AVX512BF16INTRIN_H_INCLUDED\n+\n+#ifndef __AVX512BF16__\n+#pragma GCC push_options\n+#pragma GCC target(\"avx512bf16\")\n+#define __DISABLE_AVX512BF16__\n+#endif /* __AVX512BF16__ */\n+\n+/* Internal data types for implementing the intrinsics.  */\n+typedef short __v32bh __attribute__ ((__vector_size__ (64)));\n+\n+/* The Intel API is flexible enough that we must allow aliasing with other\n+   vector types, and their scalar components.  */\n+typedef short __m512bh __attribute__ ((__vector_size__ (64), __may_alias__));\n+\n+/* vcvtne2ps2bf16 */\n+\n+extern __inline __m512bh\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvtne2ps_pbh (__m512 __A, __m512 __B)\n+{\n+  return (__m512bh)__builtin_ia32_cvtne2ps2bf16_v32hi(__A, __B);\n+}\n+\n+extern __inline __m512bh\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtne2ps_pbh (__m512bh __A, __mmask32 __B, __m512 __C, __m512 __D)\n+{\n+  return (__m512bh)__builtin_ia32_cvtne2ps2bf16_v32hi_mask(__C, __D, __A, __B);\n+}\n+\n+extern __inline __m512bh\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvtne2ps_pbh (__mmask32 __A, __m512 __B, __m512 __C)\n+{\n+  return (__m512bh)__builtin_ia32_cvtne2ps2bf16_v32hi_maskz(__B, __C, __A);\n+}\n+\n+/* vcvtneps2bf16 */\n+\n+extern __inline __m256bh\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvtneps_pbh (__m512 __A)\n+{\n+  return (__m256bh)__builtin_ia32_cvtneps2bf16_v16sf(__A);\n+}\n+\n+extern __inline __m256bh\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtneps_pbh (__m256bh __A, __mmask16 __B, __m512 __C)\n+{\n+  return (__m256bh)__builtin_ia32_cvtneps2bf16_v16sf_mask(__C, __A, __B);\n+}\n+\n+extern __inline __m256bh\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvtneps_pbh (__mmask16 __A, __m512 __B)\n+{\n+  return (__m256bh)__builtin_ia32_cvtneps2bf16_v16sf_maskz(__B, __A);\n+}\n+\n+/* vdpbf16ps */\n+\n+extern __inline __m512\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_dpbf16_ps (__m512 __A, __m512bh __B, __m512bh __C)\n+{\n+  return (__m512)__builtin_ia32_dpbf16ps_v16sf(__A, __B, __C);\n+}\n+\n+extern __inline __m512\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_dpbf16_ps (__m512 __A, __mmask16 __B, __m512bh __C, __m512bh __D)\n+{\n+  return (__m512)__builtin_ia32_dpbf16ps_v16sf_mask(__A, __C, __D, __B);\n+}\n+\n+extern __inline __m512\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_dpbf16_ps (__mmask16 __A, __m512 __B, __m512bh __C, __m512bh __D)\n+{\n+  return (__m512)__builtin_ia32_dpbf16ps_v16sf_maskz(__B, __C, __D, __A);\n+}\n+\n+#ifdef __DISABLE_AVX512BF16__\n+#undef __DISABLE_AVX512BF16__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AVX512BF16__ */\n+\n+#endif /* _AVX512BF16INTRIN_H_INCLUDED */"}, {"sha": "fa32a7fbcbe59926a37c50c44f10c4e9cb25c8aa", "filename": "gcc/config/i386/avx512bf16vlintrin.h", "status": "added", "additions": 183, "deletions": 0, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig%2Fi386%2Favx512bf16vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig%2Fi386%2Favx512bf16vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512bf16vlintrin.h?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -0,0 +1,183 @@\n+/* Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _IMMINTRIN_H_INCLUDED\n+#error \"Never use <avx512bf16vlintrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef _AVX512BF16VLINTRIN_H_INCLUDED\n+#define _AVX512BF16VLINTRIN_H_INCLUDED\n+\n+#if !defined(__AVX512VL__) || !defined(__AVX512BF16__)\n+#pragma GCC push_options\n+#pragma GCC target(\"avx512bf16,avx512vl\")\n+#define __DISABLE_AVX512BF16VL__\n+#endif /* __AVX512BF16__ */\n+\n+/* Internal data types for implementing the intrinsics.  */\n+typedef short __v16bh __attribute__ ((__vector_size__ (32)));\n+typedef short __v8bh __attribute__ ((__vector_size__ (16)));\n+\n+/* The Intel API is flexible enough that we must allow aliasing with other\n+   vector types, and their scalar components.  */\n+typedef short __m256bh __attribute__ ((__vector_size__ (32), __may_alias__));\n+typedef short __m128bh __attribute__ ((__vector_size__ (16), __may_alias__));\n+\n+/* vcvtne2ps2bf16 */\n+\n+extern __inline __m256bh\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvtne2ps_pbh (__m256 __A, __m256 __B)\n+{\n+  return (__m256bh)__builtin_ia32_cvtne2ps2bf16_v16hi(__A, __B);\n+}\n+\n+extern __inline __m256bh\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cvtne2ps_pbh (__m256bh __A, __mmask16 __B, __m256 __C, __m256 __D)\n+{\n+  return (__m256bh)__builtin_ia32_cvtne2ps2bf16_v16hi_mask(__C, __D, __A, __B);\n+}\n+\n+extern __inline __m256bh\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_cvtne2ps_pbh (__mmask16 __A, __m256 __B, __m256 __C)\n+{\n+  return (__m256bh)__builtin_ia32_cvtne2ps2bf16_v16hi_maskz(__B, __C, __A);\n+}\n+\n+extern __inline __m128bh\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtne2ps_pbh (__m128 __A, __m128 __B)\n+{\n+  return (__m128bh)__builtin_ia32_cvtne2ps2bf16_v8hi(__A, __B);\n+}\n+\n+extern __inline __m128bh\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvtne2ps_pbh (__m128bh __A, __mmask8 __B, __m128 __C, __m128 __D)\n+{\n+  return (__m128bh)__builtin_ia32_cvtne2ps2bf16_v8hi_mask(__C, __D, __A, __B);\n+}\n+\n+extern __inline __m128bh\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_cvtne2ps_pbh (__mmask8 __A, __m128 __B, __m128 __C)\n+{\n+  return (__m128bh)__builtin_ia32_cvtne2ps2bf16_v8hi_maskz(__B, __C, __A);\n+}\n+\n+/* vcvtneps2bf16 */\n+\n+extern __inline __m128bh\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvtneps_pbh (__m256 __A)\n+{\n+  return (__m128bh)__builtin_ia32_cvtneps2bf16_v8sf(__A);\n+}\n+\n+extern __inline __m128bh\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cvtneps_pbh (__m128bh __A, __mmask8 __B, __m256 __C)\n+{\n+  return (__m128bh)__builtin_ia32_cvtneps2bf16_v8sf_mask(__C, __A, __B);\n+}\n+\n+extern __inline __m128bh\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_cvtneps_pbh (__mmask8 __A, __m256 __B)\n+{\n+  return (__m128bh)__builtin_ia32_cvtneps2bf16_v8sf_maskz(__B, __A);\n+}\n+\n+extern __inline __m128bh\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtneps_pbh (__m128 __A)\n+{\n+  return (__m128bh)__builtin_ia32_cvtneps2bf16_v4sf(__A);\n+}\n+\n+extern __inline __m128bh\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvtneps_pbh (__m128bh __A, __mmask8 __B, __m128 __C)\n+{\n+  return (__m128bh)__builtin_ia32_cvtneps2bf16_v4sf_mask(__C, __A, __B);\n+}\n+\n+extern __inline __m128bh\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_cvtneps_pbh (__mmask8 __A, __m128 __B)\n+{\n+  return (__m128bh)__builtin_ia32_cvtneps2bf16_v4sf_maskz(__B, __A);\n+}\n+\n+/* vdpbf16ps */\n+\n+extern __inline __m256\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_dpbf16_ps (__m256 __A, __m256bh __B, __m256bh __C)\n+{\n+  return (__m256)__builtin_ia32_dpbf16ps_v8sf(__A, __B, __C);\n+}\n+\n+extern __inline __m256\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_dpbf16_ps (__m256 __A, __mmask8 __B, __m256bh __C, __m256bh __D)\n+{\n+  return (__m256)__builtin_ia32_dpbf16ps_v8sf_mask(__A, __C, __D, __B);\n+}\n+\n+extern __inline __m256\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_dpbf16_ps (__mmask8 __A, __m256 __B, __m256bh __C, __m256bh __D)\n+{\n+  return (__m256)__builtin_ia32_dpbf16ps_v8sf_maskz(__B, __C, __D, __A);\n+}\n+\n+extern __inline __m128\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_dpbf16_ps (__m128 __A, __m128bh __B, __m128bh __C)\n+{\n+  return (__m128)__builtin_ia32_dpbf16ps_v4sf(__A, __B, __C);\n+}\n+\n+extern __inline __m128\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_dpbf16_ps (__m128 __A, __mmask8 __B, __m128bh __C, __m128bh __D)\n+{\n+  return (__m128)__builtin_ia32_dpbf16ps_v4sf_mask(__A, __C, __D, __B);\n+}\n+\n+extern __inline __m128\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_dpbf16_ps (__mmask8 __A, __m128 __B, __m128bh __C, __m128bh __D)\n+{\n+  return (__m128)__builtin_ia32_dpbf16ps_v4sf_maskz(__B, __C, __D, __A);\n+}\n+\n+#ifdef __DISABLE_AVX512BF16VL__\n+#undef __DISABLE_AVX512BF16VL__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AVX512BF16VL__ */\n+\n+#endif /* _AVX512BF16VLINTRIN_H_INCLUDED */"}, {"sha": "8ddd425c8b7ea01401fbeb350fd6f05ee6b6cb91", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -21,6 +21,9 @@\n  * <http://www.gnu.org/licenses/>.\n  */\n \n+/* %eax */\n+#define bit_AVX512BF16\t(1 << 5)\n+\n /* %ecx */\n #define bit_SSE3\t(1 << 0)\n #define bit_PCLMUL\t(1 << 1)"}, {"sha": "22ad5bcf07d7599784d13717139f14aac1fe6f90", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -426,6 +426,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_movdiri = 0, has_movdir64b = 0;\n   unsigned int has_waitpkg = 0;\n   unsigned int has_cldemote = 0;\n+  unsigned int has_avx512bf16 = 0;\n \n   unsigned int has_ptwrite = 0;\n \n@@ -533,6 +534,9 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       has_shstk = ecx & bit_SHSTK;\n       has_pconfig = edx & bit_PCONFIG;\n       has_waitpkg = ecx & bit_WAITPKG;\n+\n+      __cpuid_count (7, 1, eax, ebx, ecx, edx);\n+      has_avx512bf16 = eax & bit_AVX512BF16;\n     }\n \n   if (max_level >= 13)\n@@ -1143,6 +1147,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *waitpkg = has_waitpkg ? \" -mwaitpkg\" : \" -mno-waitpkg\";\n       const char *cldemote = has_cldemote ? \" -mcldemote\" : \" -mno-cldemote\";\n       const char *ptwrite = has_ptwrite ? \" -mptwrite\" : \" -mno-ptwrite\";\n+      const char *avx512bf16 = has_avx512bf16 ? \" -mavx512bf16\" : \" -mno-avx512bf16\";\n \n       options = concat (options, mmx, mmx3dnow, sse, sse2, sse3, ssse3,\n \t\t\tsse4a, cx16, sahf, movbe, aes, sha, pclmul,\n@@ -1157,7 +1162,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t\t\tclwb, mwaitx, clzero, pku, rdpid, gfni, shstk,\n \t\t\tavx512vbmi2, avx512vnni, vaes, vpclmulqdq,\n \t\t\tavx512bitalg, movdiri, movdir64b, waitpkg, cldemote,\n-\t\t\tptwrite,\n+\t\t\tptwrite, avx512bf16,\n \t\t\tNULL);\n     }\n "}, {"sha": "d7b99398e87e36cf69189f8957a2441c3e5818d4", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -1262,3 +1262,29 @@ DEF_FUNCTION_TYPE (V2DI, V2DI, V2DI, V2DI, INT)\n DEF_FUNCTION_TYPE (V4DI, V4DI)\n DEF_FUNCTION_TYPE (V4SI, V4SI, V4SI, UHI)\n DEF_FUNCTION_TYPE (V8SI, V8SI, V8SI, UHI)\n+\n+# BF16 builtins\n+DEF_FUNCTION_TYPE (V32HI, V16SF, V16SF)\n+DEF_FUNCTION_TYPE (V32HI, V16SF, V16SF, V32HI, USI)\n+DEF_FUNCTION_TYPE (V32HI, V16SF, V16SF, USI)\n+DEF_FUNCTION_TYPE (V16HI, V8SF, V8SF)\n+DEF_FUNCTION_TYPE (V16HI, V8SF, V8SF, V16HI, UHI)\n+DEF_FUNCTION_TYPE (V16HI, V8SF, V8SF, UHI)\n+DEF_FUNCTION_TYPE (V8HI, V4SF, V4SF)\n+DEF_FUNCTION_TYPE (V8HI, V4SF, V4SF, V8HI, UQI)\n+DEF_FUNCTION_TYPE (V8HI, V4SF, V4SF, UQI)\n+DEF_FUNCTION_TYPE (V16HI, V16SF)\n+DEF_FUNCTION_TYPE (V16HI, V16SF, V16HI, UHI)\n+DEF_FUNCTION_TYPE (V16HI, V16SF, UHI)\n+DEF_FUNCTION_TYPE (V8HI, V8SF)\n+DEF_FUNCTION_TYPE (V8HI, V8SF, V8HI, UQI)\n+DEF_FUNCTION_TYPE (V8HI, V8SF, UQI)\n+DEF_FUNCTION_TYPE (V8HI, V4SF)\n+DEF_FUNCTION_TYPE (V8HI, V4SF, V8HI, UQI)\n+DEF_FUNCTION_TYPE (V8HI, V4SF, UQI)\n+DEF_FUNCTION_TYPE (V16SF, V16SF, V32HI, V32HI)\n+DEF_FUNCTION_TYPE (V16SF, V16SF, V32HI, V32HI, UHI)\n+DEF_FUNCTION_TYPE (V8SF, V8SF, V16HI, V16HI)\n+DEF_FUNCTION_TYPE (V8SF, V8SF, V16HI, V16HI, UQI)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, V8HI, V8HI)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, V8HI, V8HI, UQI)"}, {"sha": "e95d5d35c8578f431537bd08540da248807c863c", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -2703,6 +2703,35 @@ BDESC (0, OPTION_MASK_ISA_VAES, CODE_FOR_vaesenclast_v16qi, \"__builtin_ia32_vaes\n BDESC (0, OPTION_MASK_ISA_VAES, CODE_FOR_vaesenclast_v32qi, \"__builtin_ia32_vaesenclast_v32qi\", IX86_BUILTIN_VAESENCLAST32, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI)\n BDESC (0, OPTION_MASK_ISA_VAES, CODE_FOR_vaesenclast_v64qi, \"__builtin_ia32_vaesenclast_v64qi\", IX86_BUILTIN_VAESENCLAST64, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI)\n \n+/* BF16 */\n+BDESC (0, OPTION_MASK_ISA_AVX512BF16, CODE_FOR_avx512f_cvtne2ps2bf16_v32hi, \"__builtin_ia32_cvtne2ps2bf16_v32hi\", IX86_BUILTIN_CVTNE2PS2HI16_V32HI, UNKNOWN, (int) V32HI_FTYPE_V16SF_V16SF)\n+BDESC (0, OPTION_MASK_ISA_AVX512BF16, CODE_FOR_avx512f_cvtne2ps2bf16_v32hi_mask, \"__builtin_ia32_cvtne2ps2bf16_v32hi_mask\", IX86_BUILTIN_CVTNE2PS2HI16_V32HI_MASK, UNKNOWN, (int) V32HI_FTYPE_V16SF_V16SF_V32HI_USI)\n+BDESC (0, OPTION_MASK_ISA_AVX512BF16, CODE_FOR_avx512f_cvtne2ps2bf16_v32hi_maskz, \"__builtin_ia32_cvtne2ps2bf16_v32hi_maskz\", IX86_BUILTIN_CVTNE2PS2HI16_V32HI_MASKZ, UNKNOWN, (int) V32HI_FTYPE_V16SF_V16SF_USI)\n+BDESC (0, OPTION_MASK_ISA_AVX512BF16, CODE_FOR_avx512f_cvtne2ps2bf16_v16hi, \"__builtin_ia32_cvtne2ps2bf16_v16hi\", IX86_BUILTIN_CVTNE2PS2HI16_V16HI, UNKNOWN, (int) V16HI_FTYPE_V8SF_V8SF)\n+BDESC (0, OPTION_MASK_ISA_AVX512BF16, CODE_FOR_avx512f_cvtne2ps2bf16_v16hi_mask, \"__builtin_ia32_cvtne2ps2bf16_v16hi_mask\", IX86_BUILTIN_CVTNE2PS2HI16_V16HI_MASK, UNKNOWN, (int) V16HI_FTYPE_V8SF_V8SF_V16HI_UHI)\n+BDESC (0, OPTION_MASK_ISA_AVX512BF16, CODE_FOR_avx512f_cvtne2ps2bf16_v16hi_maskz, \"__builtin_ia32_cvtne2ps2bf16_v16hi_maskz\", IX86_BUILTIN_CVTNE2PS2HI16_V16HI_MASKZ, UNKNOWN, (int) V16HI_FTYPE_V8SF_V8SF_UHI)\n+BDESC (0, OPTION_MASK_ISA_AVX512BF16, CODE_FOR_avx512f_cvtne2ps2bf16_v8hi, \"__builtin_ia32_cvtne2ps2bf16_v8hi\", IX86_BUILTIN_CVTNE2PS2HI16_V8HI, UNKNOWN, (int) V8HI_FTYPE_V4SF_V4SF)\n+BDESC (0, OPTION_MASK_ISA_AVX512BF16, CODE_FOR_avx512f_cvtne2ps2bf16_v8hi_mask, \"__builtin_ia32_cvtne2ps2bf16_v8hi_mask\", IX86_BUILTIN_CVTNE2PS2HI16_V8HI_MASK, UNKNOWN, (int) V8HI_FTYPE_V4SF_V4SF_V8HI_UQI)\n+BDESC (0, OPTION_MASK_ISA_AVX512BF16, CODE_FOR_avx512f_cvtne2ps2bf16_v8hi_maskz, \"__builtin_ia32_cvtne2ps2bf16_v8hi_maskz\", IX86_BUILTIN_CVTNE2PS2HI16_V8HI_MASKZ, UNKNOWN, (int) V8HI_FTYPE_V4SF_V4SF_UQI)\n+BDESC (0, OPTION_MASK_ISA_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v16sf, \"__builtin_ia32_cvtneps2bf16_v16sf\", IX86_BUILTIN_CVTNEPS2HI16_V16SF, UNKNOWN, (int) V16HI_FTYPE_V16SF)\n+BDESC (0, OPTION_MASK_ISA_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v16sf_mask, \"__builtin_ia32_cvtneps2bf16_v16sf_mask\", IX86_BUILTIN_CVTNEPS2HI16_V16SF_MASK, UNKNOWN, (int) V16HI_FTYPE_V16SF_V16HI_UHI)\n+BDESC (0, OPTION_MASK_ISA_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v16sf_maskz, \"__builtin_ia32_cvtneps2bf16_v16sf_maskz\", IX86_BUILTIN_CVTNE2PS2HI16_V16SF_MASKZ, UNKNOWN, (int) V16HI_FTYPE_V16SF_UHI)\n+BDESC (0, OPTION_MASK_ISA_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v8sf, \"__builtin_ia32_cvtneps2bf16_v8sf\", IX86_BUILTIN_CVTNEPS2HI16_V8SF, UNKNOWN, (int) V8HI_FTYPE_V8SF)\n+BDESC (0, OPTION_MASK_ISA_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v8sf_mask, \"__builtin_ia32_cvtneps2bf16_v8sf_mask\", IX86_BUILTIN_CVTNEPS2HI16_V8SF_MASK, UNKNOWN, (int) V8HI_FTYPE_V8SF_V8HI_UQI)\n+BDESC (0, OPTION_MASK_ISA_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v8sf_maskz, \"__builtin_ia32_cvtneps2bf16_v8sf_maskz\", IX86_BUILTIN_CVTNE2PS2HI16_V8SF_MASKZ, UNKNOWN, (int) V8HI_FTYPE_V8SF_UQI)\n+BDESC (0, OPTION_MASK_ISA_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v4sf, \"__builtin_ia32_cvtneps2bf16_v4sf\", IX86_BUILTIN_CVTNEPS2HI16_V4SF, UNKNOWN, (int) V8HI_FTYPE_V4SF)\n+BDESC (0, OPTION_MASK_ISA_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v4sf_mask, \"__builtin_ia32_cvtneps2bf16_v4sf_mask\", IX86_BUILTIN_CVTNEPS2HI16_V4SF_MASK, UNKNOWN, (int) V8HI_FTYPE_V4SF_V8HI_UQI)\n+BDESC (0, OPTION_MASK_ISA_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v4sf_maskz, \"__builtin_ia32_cvtneps2bf16_v4sf_maskz\", IX86_BUILTIN_CVTNE2PS2HI16_V4SF_MASKZ, UNKNOWN, (int) V8HI_FTYPE_V4SF_UQI)\n+BDESC (0, OPTION_MASK_ISA_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v16sf, \"__builtin_ia32_dpbf16ps_v16sf\", IX86_BUILTIN_DPHI16PS_V16SF, UNKNOWN, (int) V16SF_FTYPE_V16SF_V32HI_V32HI)\n+BDESC (0, OPTION_MASK_ISA_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v16sf_mask, \"__builtin_ia32_dpbf16ps_v16sf_mask\", IX86_BUILTIN_DPHI16PS_V16SF_MASK, UNKNOWN, (int) V16SF_FTYPE_V16SF_V32HI_V32HI_UHI)\n+BDESC (0, OPTION_MASK_ISA_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v16sf_maskz, \"__builtin_ia32_dpbf16ps_v16sf_maskz\", IX86_BUILTIN_DPHI16PS_V16SF_MASKZ, UNKNOWN, (int) V16SF_FTYPE_V16SF_V32HI_V32HI_UHI)\n+BDESC (0, OPTION_MASK_ISA_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v8sf, \"__builtin_ia32_dpbf16ps_v8sf\", IX86_BUILTIN_DPHI16PS_V8SF, UNKNOWN, (int) V8SF_FTYPE_V8SF_V16HI_V16HI)\n+BDESC (0, OPTION_MASK_ISA_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v8sf_mask, \"__builtin_ia32_dpbf16ps_v8sf_mask\", IX86_BUILTIN_DPHI16PS_V8SF_MASK, UNKNOWN, (int) V8SF_FTYPE_V8SF_V16HI_V16HI_UQI)\n+BDESC (0, OPTION_MASK_ISA_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v8sf_maskz, \"__builtin_ia32_dpbf16ps_v8sf_maskz\", IX86_BUILTIN_DPHI16PS_V8SF_MASKZ, UNKNOWN, (int) V8SF_FTYPE_V8SF_V16HI_V16HI_UQI)\n+BDESC (0, OPTION_MASK_ISA_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v4sf, \"__builtin_ia32_dpbf16ps_v4sf\", IX86_BUILTIN_DPHI16PS_V4SF, UNKNOWN, (int) V4SF_FTYPE_V4SF_V8HI_V8HI)\n+BDESC (0, OPTION_MASK_ISA_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v4sf_mask, \"__builtin_ia32_dpbf16ps_v4sf_mask\", IX86_BUILTIN_DPHI16PS_V4SF_MASK, UNKNOWN, (int) V4SF_FTYPE_V4SF_V8HI_V8HI_UQI)\n+BDESC (0, OPTION_MASK_ISA_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v4sf_maskz, \"__builtin_ia32_dpbf16ps_v4sf_maskz\", IX86_BUILTIN_DPHI16PS_V4SF_MASKZ, UNKNOWN, (int) V4SF_FTYPE_V4SF_V8HI_V8HI_UQI)\n+\n /* Builtins with rounding support.  */\n BDESC_END (ARGS, ROUND_ARGS)\n "}, {"sha": "72bb5d72d86eb815450c922b4f54b865318dd3f8", "filename": "gcc/config/i386/i386-builtins.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtins.c?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -1920,6 +1920,7 @@ enum processor_features\n   F_VPCLMULQDQ,\n   F_AVX512VNNI,\n   F_AVX512BITALG,\n+  F_AVX512BF16,\n   F_MAX\n };\n \n@@ -2064,7 +2065,8 @@ static const _isa_names_table isa_names_table[] =\n   {\"gfni\",\tF_GFNI,\tP_ZERO},\n   {\"vpclmulqdq\", F_VPCLMULQDQ, P_ZERO},\n   {\"avx512vnni\", F_AVX512VNNI, P_ZERO},\n-  {\"avx512bitalg\", F_AVX512BITALG, P_ZERO}\n+  {\"avx512bitalg\", F_AVX512BITALG, P_ZERO},\n+  {\"avx512bf16\", F_AVX512BF16, P_ZERO}\n };\n \n /* This parses the attribute arguments to target in DECL and determines"}, {"sha": "92bf066c0792c7201aa715e653c5eade35b2b133", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -548,6 +548,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__CLDEMOTE__\");\n   if (isa_flag2 & OPTION_MASK_ISA_PTWRITE)\n     def_or_undef (parse_in, \"__PTWRITE__\");\n+  if (isa_flag2 & OPTION_MASK_ISA_AVX512BF16)\n+    def_or_undef (parse_in, \"__AVX512BF16__\");\n   if (TARGET_IAMCU)\n     {\n       def_or_undef (parse_in, \"__iamcu\");"}, {"sha": "b7ce5d0975bbf1915e9c80816036fcc823927eb1", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -8968,6 +8968,9 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V8DF_FTYPE_V2DF:\n     case V8DF_FTYPE_V8DF:\n     case V4DI_FTYPE_V4DI:\n+    case V16HI_FTYPE_V16SF:\n+    case V8HI_FTYPE_V8SF:\n+    case V8HI_FTYPE_V4SF:\n       nargs = 1;\n       break;\n     case V4SF_FTYPE_V4SF_VEC_MERGE:\n@@ -9092,6 +9095,12 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case USI_FTYPE_USI_USI:\n     case UDI_FTYPE_UDI_UDI:\n     case V16SI_FTYPE_V8DF_V8DF:\n+    case V32HI_FTYPE_V16SF_V16SF:\n+    case V16HI_FTYPE_V8SF_V8SF:\n+    case V8HI_FTYPE_V4SF_V4SF:\n+    case V16HI_FTYPE_V16SF_UHI:\n+    case V8HI_FTYPE_V8SF_UQI:\n+    case V8HI_FTYPE_V4SF_UQI:\n       nargs = 2;\n       break;\n     case V2DI_FTYPE_V2DI_INT_CONVERT:\n@@ -9274,6 +9283,15 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V16HI_FTYPE_V16HI_V16HI_V16HI:\n     case V8SI_FTYPE_V8SI_V8SI_V8SI:\n     case V8HI_FTYPE_V8HI_V8HI_V8HI:\n+    case V32HI_FTYPE_V16SF_V16SF_USI:\n+    case V16HI_FTYPE_V8SF_V8SF_UHI:\n+    case V8HI_FTYPE_V4SF_V4SF_UQI:\n+    case V16HI_FTYPE_V16SF_V16HI_UHI:\n+    case V8HI_FTYPE_V8SF_V8HI_UQI:\n+    case V8HI_FTYPE_V4SF_V8HI_UQI:\n+    case V16SF_FTYPE_V16SF_V32HI_V32HI:\n+    case V8SF_FTYPE_V8SF_V16HI_V16HI:\n+    case V4SF_FTYPE_V4SF_V8HI_V8HI:\n       nargs = 3;\n       break;\n     case V32QI_FTYPE_V32QI_V32QI_INT:\n@@ -9413,6 +9431,9 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V16HI_FTYPE_V32QI_V32QI_V16HI_UHI:\n     case V8SI_FTYPE_V16HI_V16HI_V8SI_UQI:\n     case V4SI_FTYPE_V8HI_V8HI_V4SI_UQI:\n+    case V32HI_FTYPE_V16SF_V16SF_V32HI_USI:\n+    case V16HI_FTYPE_V8SF_V8SF_V16HI_UHI:\n+    case V8HI_FTYPE_V4SF_V4SF_V8HI_UQI:\n       nargs = 4;\n       break;\n     case V2DF_FTYPE_V2DF_V2DF_V2DI_INT:\n@@ -9456,6 +9477,9 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n       break;\n     case UCHAR_FTYPE_UCHAR_UINT_UINT_PUNSIGNED:\n     case UCHAR_FTYPE_UCHAR_ULONGLONG_ULONGLONG_PULONGLONG:\n+    case V16SF_FTYPE_V16SF_V32HI_V32HI_UHI:\n+    case V8SF_FTYPE_V8SF_V16HI_V16HI_UQI:\n+    case V4SF_FTYPE_V4SF_V8HI_V8HI_UQI:\n       nargs = 4;\n       break;\n     case UQI_FTYPE_V8DI_V8DI_INT_UQI:"}, {"sha": "dec8352143cefe3439ab2faaf2666c2bee8c5ef9", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -209,7 +209,8 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n     { \"-mmovdir64b\",\tOPTION_MASK_ISA_MOVDIR64B },\n     { \"-mwaitpkg\",\tOPTION_MASK_ISA_WAITPKG },\n     { \"-mcldemote\",\tOPTION_MASK_ISA_CLDEMOTE },\n-    { \"-mptwrite\",\tOPTION_MASK_ISA_PTWRITE }\n+    { \"-mptwrite\",\tOPTION_MASK_ISA_PTWRITE },\n+    { \"-mavx512bf16\",\tOPTION_MASK_ISA_AVX512BF16 }\n   };\n   static struct ix86_target_opts isa_opts[] =\n   {\n@@ -919,6 +920,7 @@ ix86_valid_target_attribute_inner_p (tree fndecl, tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"waitpkg\", OPT_mwaitpkg),\n     IX86_ATTR_ISA (\"cldemote\", OPT_mcldemote),\n     IX86_ATTR_ISA (\"ptwrite\",   OPT_mptwrite),\n+    IX86_ATTR_ISA (\"avx512bf16\",   OPT_mavx512bf16),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),\n@@ -2034,6 +2036,10 @@ ix86_option_override_internal (bool main_args_p,\n \t    && !(opts->x_ix86_isa_flags_explicit\n \t\t & OPTION_MASK_ISA_AVX512VPOPCNTDQ))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512VPOPCNTDQ;\n+\tif (((processor_alias_table[i].flags & PTA_AVX512BF16) != 0)\n+\t    && !(opts->x_ix86_isa_flags2_explicit\n+\t\t & OPTION_MASK_ISA_AVX512BF16))\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_AVX512BF16;\n \tif (((processor_alias_table[i].flags & PTA_SGX) != 0)\n \t    && !(opts->x_ix86_isa_flags2_explicit & OPTION_MASK_ISA_SGX))\n \t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_SGX;"}, {"sha": "3fee779296f207382e61b18c70753b4675968180", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -193,6 +193,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_CLDEMOTE_P(x) TARGET_ISA_CLDEMOTE_P(x)\n #define TARGET_PTWRITE\tTARGET_ISA_PTWRITE\n #define TARGET_PTWRITE_P(x)\tTARGET_ISA_PTWRITE_P(x)\n+#define TARGET_AVX512BF16\tTARGET_ISA_AVX512BF16\n+#define TARGET_AVX512BF16_P(x)\tTARGET_ISA_AVX512BF16_P(x)\n \n #define TARGET_LP64\tTARGET_ABI_64\n #define TARGET_LP64_P(x)\tTARGET_ABI_64_P(x)\n@@ -2355,6 +2357,7 @@ const wide_int_bitmask PTA_PCONFIG (0, HOST_WIDE_INT_1U << 7);\n const wide_int_bitmask PTA_WBNOINVD (0, HOST_WIDE_INT_1U << 8);\n const wide_int_bitmask PTA_WAITPKG (0, HOST_WIDE_INT_1U << 9);\n const wide_int_bitmask PTA_PTWRITE (0, HOST_WIDE_INT_1U << 10);\n+const wide_int_bitmask PTA_AVX512BF16 (0, HOST_WIDE_INT_1U << 11);\n \n const wide_int_bitmask PTA_CORE2 = PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2\n   | PTA_SSE3 | PTA_SSSE3 | PTA_CX16 | PTA_FXSR;"}, {"sha": "8f3dcf942ffba162d3f8645ea9f0470905c6a678", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -1101,3 +1101,8 @@ Enum(instrument_return) String(nop5) Value(instrument_return_nop5)\n mrecord-return\n Target Report Var(ix86_flag_record_return) Init(0)\n Generate a __return_loc section pointing to all return instrumentation code.\n+\n+mavx512bf16\n+Target Report Mask(ISA_AVX512BF16) Var(ix86_isa_flags2) Save\n+Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F and\n+AVX512BF16 built-in functions and code generation."}, {"sha": "d99886a5e7b698a13a29a5eed46e5d5c0008580a", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -130,6 +130,10 @@\n \n #include <cldemoteintrin.h>\n \n+#include <avx512bf16vlintrin.h>\n+\n+#include <avx512bf16intrin.h>\n+\n #include <rdseedintrin.h>\n \n #include <prfchwintrin.h>"}, {"sha": "11363de44fe0c9dac0af68a3dbb96a08fc1d563a", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -187,6 +187,11 @@\n \n   ;; For AVX512BITALG support\n   UNSPEC_VPSHUFBIT\n+\n+  ;; For AVX512BF16 support\n+  UNSPEC_VCVTNE2PS2BF16\n+  UNSPEC_VCVTNEPS2BF16\n+  UNSPEC_VDPBF16PS\n ])\n \n (define_c_enum \"unspecv\" [\n@@ -726,6 +731,15 @@\n    (V16SF \"hi\") (V8SF  \"qi\") (V4SF  \"qi\")\n    (V8DF  \"qi\") (V4DF  \"qi\") (V2DF  \"qi\")])\n \n+;; Mapping of vector modes to corresponding mask half size\n+(define_mode_attr avx512fmaskhalfmode\n+  [(V64QI \"SI\") (V32QI \"HI\") (V16QI \"QI\")\n+   (V32HI \"HI\") (V16HI \"QI\") (V8HI  \"QI\") (V4HI \"QI\")\n+   (V16SI \"QI\") (V8SI  \"QI\") (V4SI  \"QI\")\n+   (V8DI  \"QI\") (V4DI  \"QI\") (V2DI  \"QI\")\n+   (V16SF \"QI\") (V8SF  \"QI\") (V4SF  \"QI\")\n+   (V8DF  \"QI\") (V4DF  \"QI\") (V2DF  \"QI\")])\n+\n ;; Mapping of vector float modes to an integer mode of the same size\n (define_mode_attr sseintvecmode\n   [(V16SF \"V16SI\") (V8DF  \"V8DI\")\n@@ -22184,3 +22198,90 @@\n   \"vpshufbitqmb\\t{%2, %1, %0<mask_scalar_merge_operand3>|%0<mask_scalar_merge_operand3>, %1, %2}\"\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_mode_iterator BF16 [V32HI (V16HI \"TARGET_AVX512VL\") (V8HI \"TARGET_AVX512VL\")])\n+;; Converting from BF to SF\n+(define_mode_attr bf16_cvt_2sf\n+  [(V32HI  \"V16SF\") (V16HI  \"V8SF\") (V8HI  \"V4SF\")])\n+;; Converting from SF to BF\n+(define_mode_attr sf_cvt_bf16\n+  [(V4SF  \"V8HI\") (V8SF  \"V8HI\") (V16SF  \"V16HI\")])\n+;; Mapping from BF to SF\n+(define_mode_attr sf_bf16\n+  [(V4SF  \"V8HI\") (V8SF  \"V16HI\") (V16SF  \"V32HI\")])\n+\n+(define_expand \"avx512f_cvtne2ps2bf16_<mode>_maskz\"\n+  [(match_operand:BF16 0 \"register_operand\")\n+   (match_operand:<bf16_cvt_2sf> 1 \"register_operand\")\n+   (match_operand:<bf16_cvt_2sf> 2 \"register_operand\")\n+   (match_operand:<avx512fmaskmode> 3 \"register_operand\")]\n+  \"TARGET_AVX512BF16\"\n+{\n+  emit_insn (gen_avx512f_cvtne2ps2bf16_<mode>_mask(operands[0], operands[1],\n+    operands[2], CONST0_RTX(<MODE>mode), operands[3]));\n+  DONE;\n+})\n+\n+(define_insn \"avx512f_cvtne2ps2bf16_<mode><mask_name>\"\n+  [(set (match_operand:BF16 0 \"register_operand\" \"=v\")\n+\t(unspec:BF16\n+\t  [(match_operand:<bf16_cvt_2sf> 1 \"register_operand\" \"v\")\n+\t   (match_operand:<bf16_cvt_2sf> 2 \"register_operand\" \"v\")]\n+        UNSPEC_VCVTNE2PS2BF16))]\n+  \"TARGET_AVX512BF16\"\n+  \"vcvtne2ps2bf16\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\")\n+\n+(define_expand \"avx512f_cvtneps2bf16_<mode>_maskz\"\n+  [(match_operand:<sf_cvt_bf16> 0 \"register_operand\")\n+   (match_operand:VF1_AVX512VL 1 \"register_operand\")\n+   (match_operand:<avx512fmaskmode> 2 \"register_operand\")]\n+  \"TARGET_AVX512BF16\"\n+{\n+  emit_insn (gen_avx512f_cvtneps2bf16_<mode>_mask(operands[0], operands[1],\n+    CONST0_RTX(<sf_cvt_bf16>mode), operands[2]));\n+  DONE;\n+})\n+\n+(define_insn \"avx512f_cvtneps2bf16_<mode><mask_name>\"\n+  [(set (match_operand:<sf_cvt_bf16> 0 \"register_operand\" \"=v\")\n+\t(unspec:<sf_cvt_bf16>\n+\t  [(match_operand:VF1_AVX512VL 1 \"register_operand\" \"v\")]\n+        UNSPEC_VCVTNEPS2BF16))]\n+  \"TARGET_AVX512BF16\"\n+  \"vcvtneps2bf16\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\")\n+\n+(define_expand \"avx512f_dpbf16ps_<mode>_maskz\"\n+  [(match_operand:VF1_AVX512VL 0 \"register_operand\")\n+   (match_operand:VF1_AVX512VL 1 \"register_operand\")\n+   (match_operand:<sf_bf16> 2 \"register_operand\")\n+   (match_operand:<sf_bf16> 3 \"register_operand\")\n+   (match_operand:<avx512fmaskhalfmode> 4 \"register_operand\")]\n+  \"TARGET_AVX512BF16\"\n+{\n+  emit_insn (gen_avx512f_dpbf16ps_<mode>_maskz_1(operands[0], operands[1],\n+    operands[2], operands[3], CONST0_RTX(<MODE>mode), operands[4]));\n+  DONE;\n+})\n+\n+(define_insn \"avx512f_dpbf16ps_<mode><maskz_half_name>\"\n+  [(set (match_operand:VF1_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(unspec:VF1_AVX512VL\n+\t  [(match_operand:VF1_AVX512VL 1 \"register_operand\" \"0\")\n+\t   (match_operand:<sf_bf16> 2 \"register_operand\" \"v\")\n+\t   (match_operand:<sf_bf16> 3 \"register_operand\" \"v\")]\n+        UNSPEC_VDPBF16PS))]\n+  \"TARGET_AVX512BF16\"\n+  \"vdpbf16ps\\t{%3, %2, %0<maskz_half_operand4>|%0<maskz_half_operand4>, %2, %3}\")\n+\n+(define_insn \"avx512f_dpbf16ps_<mode>_mask\"\n+  [(set (match_operand:VF1_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VF1_AVX512VL\n+\t  (unspec:VF1_AVX512VL\n+\t    [(match_operand:VF1_AVX512VL 1 \"register_operand\" \"0\")\n+\t     (match_operand:<sf_bf16> 2 \"register_operand\" \"v\")\n+\t     (match_operand:<sf_bf16> 3 \"register_operand\" \"v\")]\n+             UNSPEC_VDPBF16PS)\n+          (match_dup 1)\n+          (match_operand:<avx512fmaskhalfmode> 4 \"register_operand\" \"Yk\")))]\n+  \"TARGET_AVX512BF16\"\n+  \"vdpbf16ps\\t{%3, %2, %0%{%4%}|%0%{%4%}, %2, %3}\")"}, {"sha": "dd5890584f499e8b92b268383e15a1640d120186", "filename": "gcc/config/i386/subst.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig%2Fi386%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fconfig%2Fi386%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsubst.md?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -313,3 +313,16 @@\n \t\t(const_int 1))\n \t     (match_operand:SI 3 \"const48_operand\")]\n \t\tUNSPEC_EMBEDDED_ROUNDING))])\n+\n+(define_subst_attr \"maskz_half_name\" \"maskz_half\" \"\" \"_maskz_1\")\n+(define_subst_attr \"maskz_half_operand4\" \"maskz_half\" \"\" \"%{%5%}%N4\")\n+\n+(define_subst \"maskz_half\"\n+  [(set (match_operand:SUBST_V 0)\n+        (match_operand:SUBST_V 1))]\n+  \"\"\n+  [(set (match_dup 0)\n+        (vec_merge:SUBST_V\n+\t  (match_dup 1)\n+\t  (match_operand:SUBST_V 2 \"const0_operand\" \"C\")\n+\t  (match_operand:<avx512fmaskhalfmode> 3 \"register_operand\" \"Yk\")))])"}, {"sha": "8e4a8a880efdce54bbc735f817c11c9021d45e90", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -1274,7 +1274,7 @@ See RS/6000 and PowerPC Options.\n -msse4a  -m3dnow  -m3dnowa  -mpopcnt  -mabm  -mbmi  -mtbm  -mfma4  -mxop @gol\n -madx  -mlzcnt  -mbmi2  -mfxsr  -mxsave  -mxsaveopt  -mrtm  -mhle  -mlwp @gol\n -mmwaitx  -mclzero  -mpku  -mthreads  -mgfni  -mvaes  -mwaitpkg @gol\n--mshstk -mmanual-endbr -mforce-indirect-call  -mavx512vbmi2 @gol\n+-mshstk -mmanual-endbr -mforce-indirect-call -mavx512vbmi2 -mavx512bf16 @gol\n -mvpclmulqdq  -mavx512bitalg  -mmovdiri  -mmovdir64b  -mavx512vpopcntdq @gol\n -mavx5124fmaps  -mavx512vnni  -mavx5124vnniw  -mprfchw  -mrdpid @gol\n -mrdseed  -msgx @gol\n@@ -28041,6 +28041,9 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @itemx -mavx512vbmi2\n @opindex mavx512vbmi2\n @need 200\n+@itemx -mavx512bf16\n+@opindex mavx512bf16\n+@need 200\n @itemx -mgfni\n @opindex mgfni\n @need 200\n@@ -28083,7 +28086,7 @@ AES, PCLMUL, CLFLUSHOPT, CLWB, FSGSBASE, PTWRITE, RDRND, F16C, FMA, PCONFIG,\n WBNOINVD, FMA4, PREFETCHW, RDPID, PREFETCHWT1, RDSEED, SGX, XOP, LWP,\n 3DNow!@:, enhanced 3DNow!@:, POPCNT, ABM, ADX, BMI, BMI2, LZCNT, FXSR, XSAVE,\n XSAVEOPT, XSAVEC, XSAVES, RTM, HLE, TBM, MWAITX, CLZERO, PKU, AVX512VBMI2,\n-GFNI, VAES, WAITPKG, VPCLMULQDQ, AVX512BITALG, MOVDIRI, MOVDIR64B,\n+GFNI, VAES, WAITPKG, VPCLMULQDQ, AVX512BITALG, MOVDIRI, MOVDIR64B, AVX512BF16\n AVX512VPOPCNTDQ, AVX5124FMAPS, AVX512VNNI, AVX5124VNNIW, or CLDEMOTE\n extended instruction sets.  Each has a corresponding @option{-mno-} option to\n disable use of these instructions."}, {"sha": "d50e4e040ee422a141bc56e4cbbbdc29972f2f27", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -12,6 +12,23 @@\n \t* gcc.dg/tree-ssa/pr90356-3.c: New test.\n \t* gcc.dg/tree-ssa/pr90356-4.c: New test.\n \n+2019-05-07  Wei Xiao  <wei3.xiao@intel.com>\n+\n+\t* gcc.target/i386/avx512bf16-vcvtne2ps2bf16-1.c: New test.\n+\t* gcc.target/i386/avx512bf16-vcvtneps2bf16-1.c: New test.\n+\t* gcc.target/i386/avx512bf16-vdpbf16ps-1.c: New test.\n+\t* gcc.target/i386/avx512bf16vl-vcvtne2ps2bf16-1.c: New test.\n+\t* gcc.target/i386/avx512bf16vl-vcvtneps2bf16-1.c: New test.\n+\t* gcc.target/i386/avx512bf16vl-vdpbf16ps-1.c: New test.\n+\t* gcc.target/i386/builtin_target.c: Handle avx512bf16.\n+\t* gcc.target/i386/sse-12.c: Add -mavx512bf16.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Ditto.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* g++.dg/other/i386-2.C: Ditto.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\n 2019-05-07  Cherry Zhang  <cherryyz@google.com>\n \n \t* go.dg/arrayclear.go: New test."}, {"sha": "f7a564bf46cc83b1fbfda0f1c14d1c1fb336d107", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "4d6f94fe9c1d9a569048d2f19da83b8a1c8d96a0", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "6d19459cc979dcde295afa39668e4d52edd71d53", "filename": "gcc/testsuite/gcc.target/i386/avx512bf16-vcvtne2ps2bf16-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16-vcvtne2ps2bf16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16-vcvtne2ps2bf16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16-vcvtne2ps2bf16-1.c?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bf16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtne2ps2bf16\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtne2ps2bf16\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtne2ps2bf16\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512bh res;\n+volatile __m512 x1, x2;\n+volatile __mmask32 m32;\n+\n+void extern\n+avx512bf16_test (void)\n+{\n+  res = _mm512_cvtne2ps_pbh (x1, x2);\n+  res = _mm512_mask_cvtne2ps_pbh (res, m32, x1, x2);\n+  res = _mm512_maskz_cvtne2ps_pbh (m32, x1, x2);\n+}"}, {"sha": "99ba4ee57f7d994e2d9c04ae48f0e816fbf25596", "filename": "gcc/testsuite/gcc.target/i386/avx512bf16-vcvtneps2bf16-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16-vcvtneps2bf16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16-vcvtneps2bf16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16-vcvtneps2bf16-1.c?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bf16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtneps2bf16\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtneps2bf16\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtneps2bf16\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256bh res;\n+volatile __m512 x1;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512bf16_test (void)\n+{\n+  res = _mm512_cvtneps_pbh (x1);\n+  res = _mm512_mask_cvtneps_pbh (res, m16, x1);\n+  res = _mm512_maskz_cvtneps_pbh (m16, x1);\n+}"}, {"sha": "d9ad444f63024c8475fd13374b7ebc10405cadce", "filename": "gcc/testsuite/gcc.target/i386/avx512bf16-vdpbf16ps-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16-vdpbf16ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16-vdpbf16ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16-vdpbf16ps-1.c?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bf16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vdpbf16ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vdpbf16ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vdpbf16ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 res;\n+volatile __m512bh x1, x2;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512bf16_test (void)\n+{\n+  res = _mm512_dpbf16_ps (res, x1, x2);\n+  res = _mm512_mask_dpbf16_ps (res, m16, x1, x2);\n+  res = _mm512_maskz_dpbf16_ps (m16, res, x1, x2);\n+}"}, {"sha": "b64ad7b84dd31fce3e6d165b53cb11d986bbb3c3", "filename": "gcc/testsuite/gcc.target/i386/avx512bf16-vdpbf16ps-2.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16-vdpbf16ps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16-vdpbf16ps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16-vdpbf16ps-2.c?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bf16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vdpbf16ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+typedef union\n+{\n+  __m512 x;\n+  float a[16];\n+} union512s;\n+\n+float res_ref[16];\n+union512s res;\n+__m512bh x1, x2;\n+__mmask16 m16;\n+\n+static void __attribute__((noinline, unused))\n+merge_masking_s (float *arr, unsigned long long mask, int size)\n+{\n+  int i;\n+  for (i = 0; i < size; i++)\n+  {\n+    arr[i] = (mask & (1LL << i)) ? arr[i] : 117;\n+  }\n+}\n+\n+static int __attribute__((noinline, unused))\n+check_union512s (union512s u, const float *v)\n+{\n+  int i;\n+  int err = 0;\n+  for (i = 0; i < (sizeof (u.a) / sizeof ((u.a)[0])); i++)\n+    if (u.a[i] != v[i])\n+    {\n+      err++;\n+      ;\n+    }\n+  return err;\n+}\n+\n+void extern\n+avx512bf16_test (void)\n+{\n+  res.x = _mm512_mask_dpbf16_ps (res.x, m16, x1, x2);\n+  merge_masking_s (res_ref, m16, 16);\n+  if (check_union512s (res, res_ref))\n+    abort ();\n+}"}, {"sha": "f0ec70f65c49968f43c611d4af1898970d0fe214", "filename": "gcc/testsuite/gcc.target/i386/avx512bf16vl-vcvtne2ps2bf16-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16vl-vcvtne2ps2bf16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16vl-vcvtne2ps2bf16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16vl-vcvtne2ps2bf16-1.c?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bf16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtne2ps2bf16\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtne2ps2bf16\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtne2ps2bf16\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtne2ps2bf16\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtne2ps2bf16\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtne2ps2bf16\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128bh res1;\n+volatile __m256bh res2;\n+volatile __m128 x1, x2;\n+volatile __m256 x3, x4;\n+volatile __mmask8 m8;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512bf16_test (void)\n+{\n+  res2 = _mm256_cvtne2ps_pbh (x3, x4);\n+  res2 = _mm256_mask_cvtne2ps_pbh (res2, m16, x3, x4);\n+  res2 = _mm256_maskz_cvtne2ps_pbh (m16, x3, x4);\n+\n+  res1 = _mm_cvtne2ps_pbh (x1, x2);\n+  res1 = _mm_mask_cvtne2ps_pbh (res1, m8, x1, x2);\n+  res1 = _mm_maskz_cvtne2ps_pbh (m8, x1, x2);\n+}"}, {"sha": "0969ae1b35e73b8e705e828ae8763770c5747ccf", "filename": "gcc/testsuite/gcc.target/i386/avx512bf16vl-vcvtneps2bf16-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16vl-vcvtneps2bf16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16vl-vcvtneps2bf16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16vl-vcvtneps2bf16-1.c?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bf16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtneps2bf16\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtneps2bf16\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtneps2bf16\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtneps2bf16\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtneps2bf16\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtneps2bf16\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128bh res1, res2;\n+volatile __m128 x1;\n+volatile __m256 x2;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512bf16_test (void)\n+{\n+  res2 = _mm256_cvtneps_pbh (x2);\n+  res2 = _mm256_mask_cvtneps_pbh (res2, m8, x2);\n+  res2 = _mm256_maskz_cvtneps_pbh (m8, x2);\n+\n+  res1 = _mm_cvtneps_pbh (x1);\n+  res1 = _mm_mask_cvtneps_pbh (res1, m8, x1);\n+  res1 = _mm_maskz_cvtneps_pbh (m8, x1);\n+}"}, {"sha": "18374629fbda427e73c77188a1b10454ef828a19", "filename": "gcc/testsuite/gcc.target/i386/avx512bf16vl-vdpbf16ps-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16vl-vdpbf16ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16vl-vdpbf16ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16vl-vdpbf16ps-1.c?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bf16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vdpbf16ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vdpbf16ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vdpbf16ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vdpbf16ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vdpbf16ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vdpbf16ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256 res1;\n+volatile __m256bh x1, x2;\n+volatile __m128 res2;\n+volatile __m128bh x3, x4;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512bf16_test (void)\n+{\n+  res1 = _mm256_dpbf16_ps (res1, x1, x2);\n+  res1 = _mm256_mask_dpbf16_ps (res1, m8, x1, x2);\n+  res1 = _mm256_maskz_dpbf16_ps (m8, res1, x1, x2);\n+\n+  res2 = _mm_dpbf16_ps (res2, x3, x4);\n+  res2 = _mm_mask_dpbf16_ps (res2, m8, x3, x4);\n+  res2 = _mm_maskz_dpbf16_ps (m8, res2, x3, x4);\n+}"}, {"sha": "7a8b6e805ed2257a6b7445ae5a0a82dc15851242", "filename": "gcc/testsuite/gcc.target/i386/builtin_target.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -265,6 +265,10 @@ check_features (unsigned int ecx, unsigned int edx,\n \tassert (__builtin_cpu_supports (\"avx5124vnniw\"));\n       if (edx & bit_AVX5124FMAPS)\n \tassert (__builtin_cpu_supports (\"avx5124fmaps\"));\n+\n+      __cpuid_count (7, 1, eax, ebx, ecx, edx);\n+      if (eax & bit_AVX512BF16)\n+\tassert (__builtin_cpu_supports (\"avx512bf16\"));\n     }\n \n   /* Check cpuid level of extended features.  */"}, {"sha": "606697388ee552d6297d458a63752d6e27fa11ac", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h gfniintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "2b48c455eafb588cbb6bd76eba2aa4fa866a7b10", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "ae7d3d5623b0952f18ae4bd10a7ec3f48c18240c", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "733c67011ea488ceec03f61daa33c171e901d4d2", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -101,7 +101,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -218,7 +218,7 @@ test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n \n /* immintrin.h (AVX/AVX2/RDRND/FSGSBASE/F16C/RTM/AVX512F/SHA) */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg\")\n+#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16\")\n #endif\n #include <immintrin.h>\n test_1 (_cvtss_sh, unsigned short, float, 1)"}, {"sha": "58f4c824731de4741e0427c10c4b1e2a98d784f2", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -696,6 +696,6 @@\n #define __builtin_ia32_vpclmulqdq_v2di(A, B, C)  __builtin_ia32_vpclmulqdq_v2di(A, B, 1) \n #define __builtin_ia32_vpclmulqdq_v8di(A, B, C)  __builtin_ia32_vpclmulqdq_v8di(A, B, 1) \n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16\")\n \n #include <x86intrin.h>"}, {"sha": "c3c7a16b106a10f598ce291006302b13255f658c", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -1,3 +1,9 @@\n+2019-05-07  Hongtao Liu  <hongtao.liu@intel.com>\n+\n+\t* config/i386/cpuinfo.c (get_available_features): Detect BF16.\n+\t* config/i386/cpuinfo.h (enum processor_features): Add\n+\tFEATURE_AVX512BF16.\n+\n 2019-04-23  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \t    Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \t    Jakub Jelinek  <jakub@redhat.com>"}, {"sha": "5659ec89546a3fecd0990c88ba00afe486719219", "filename": "libgcc/config/i386/cpuinfo.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -336,7 +336,7 @@ get_available_features (unsigned int ecx, unsigned int edx,\n \tset_feature (FEATURE_FMA);\n     }\n \n-  /* Get Advanced Features at level 7 (eax = 7, ecx = 0). */\n+  /* Get Advanced Features at level 7 (eax = 7, ecx = 0/1). */\n   if (max_cpuid_level >= 7)\n     {\n       __cpuid_count (7, 0, eax, ebx, ecx, edx);\n@@ -385,6 +385,10 @@ get_available_features (unsigned int ecx, unsigned int edx,\n \t    set_feature (FEATURE_AVX5124VNNIW);\n \t  if (edx & bit_AVX5124FMAPS)\n \t    set_feature (FEATURE_AVX5124FMAPS);\n+\n+\t  __cpuid_count (7, 1, eax, ebx, ecx, edx);\n+\t  if (eax & bit_AVX512BF16)\n+\t    set_feature (FEATURE_AVX512BF16);\n \t}\n     }\n "}, {"sha": "68ca466fa849f35642baed0d120e4e414be8d7a1", "filename": "libgcc/config/i386/cpuinfo.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0e90fae97a894247ec93336c8826cf4afb3d0d/libgcc%2Fconfig%2Fi386%2Fcpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0e90fae97a894247ec93336c8826cf4afb3d0d/libgcc%2Fconfig%2Fi386%2Fcpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fcpuinfo.h?ref=4f0e90fae97a894247ec93336c8826cf4afb3d0d", "patch": "@@ -119,7 +119,8 @@ enum processor_features\n   FEATURE_GFNI,\n   FEATURE_VPCLMULQDQ,\n   FEATURE_AVX512VNNI,\n-  FEATURE_AVX512BITALG\n+  FEATURE_AVX512BITALG,\n+  FEATURE_AVX512BF16\n };\n \n extern struct __processor_model"}]}