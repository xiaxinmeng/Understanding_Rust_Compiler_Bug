{"sha": "ad2a37157d3476dffb3baf93ca5001c9f6c44bda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQyYTM3MTU3ZDM0NzZkZmZiM2JhZjkzY2E1MDAxYzlmNmM0NGJkYQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2020-09-09T14:54:20Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2020-09-09T14:54:20Z"}, "message": "If the lto plugin encounters a file with multiple symbol sections, each of which also has a v1 symbol extension section[1] then it will attempt to read the extension data for *every* symbol from each of the extension sections.  This results in reading off the end of a buffer with the associated memory corruption that that entails.  This patch fixes that problem.\n\n2020-09-09  Nick Clifton  <nickc@redhat.com>\n\n\t* lto-plugin.c (struct plugin_symtab): Add last_sym field.\n\t(parse_symtab_extension): Only read as many entries as are\n\tavailable in the buffer.  Store the data read into the symbol\n\ttable indexed from last_sym.  Increment last_sym.", "tree": {"sha": "8d0820d582070a50354f4c873fb0704914e9c0b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d0820d582070a50354f4c873fb0704914e9c0b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad2a37157d3476dffb3baf93ca5001c9f6c44bda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad2a37157d3476dffb3baf93ca5001c9f6c44bda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad2a37157d3476dffb3baf93ca5001c9f6c44bda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad2a37157d3476dffb3baf93ca5001c9f6c44bda/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d3c12e4184a5e8d0cfda41e90bb2fcd98e7ddae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d3c12e4184a5e8d0cfda41e90bb2fcd98e7ddae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d3c12e4184a5e8d0cfda41e90bb2fcd98e7ddae"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "6f67552d0758b9dfa4718bd0f15964d3ab281e0f", "filename": "lto-plugin/lto-plugin.c", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad2a37157d3476dffb3baf93ca5001c9f6c44bda/lto-plugin%2Flto-plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad2a37157d3476dffb3baf93ca5001c9f6c44bda/lto-plugin%2Flto-plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Flto-plugin.c?ref=ad2a37157d3476dffb3baf93ca5001c9f6c44bda", "patch": "@@ -115,6 +115,7 @@ struct sym_aux\n struct plugin_symtab\n {\n   int nsyms;\n+  int last_sym;\n   struct sym_aux *aux;\n   struct ld_plugin_symbol *syms;\n   unsigned long long id;\n@@ -382,19 +383,30 @@ translate (char *data, char *end, struct plugin_symtab *out)\n static void\n parse_symtab_extension (char *data, char *end, struct plugin_symtab *out)\n {\n-  unsigned i;\n+  unsigned long i;\n+  unsigned char version;\n+\n+  if (data >= end)\n+    /* FIXME: Issue an error ?  */\n+    return;\n \n-  unsigned char version = *data;\n+  version = *data;\n   data++;\n \n+  if (version != 1)\n+    return;\n+\n   /* Version 1 contains the following data per entry:\n      - symbol_type\n      - section_kind\n      .  */\n \n-  if (version == 1)\n-    for (i = 0; i < out->nsyms; i++)\n-      data = parse_table_entry_extension (data, &out->syms[i]);\n+  unsigned long nsyms = (end - data) / 2;\n+\n+  for (i = 0; i < nsyms; i++)\n+    data = parse_table_entry_extension (data, out->syms + i + out->last_sym);\n+\n+  out->last_sym += nsyms;\n }\n \n /* Free all memory that is no longer needed after writing the symbol\n@@ -1172,9 +1184,12 @@ claim_file_handler (const struct ld_plugin_input_file *file, int *claimed)\n       /*  Parsing symtab extension should be done only for add_symbols_v2 and\n \t  later versions.  */\n       if (!errmsg && add_symbols_v2 != NULL)\n-\terrmsg = simple_object_find_sections (obj.objfile,\n-\t\t\t\t\t      process_symtab_extension,\n-\t\t\t\t\t      &obj, &err);\n+\t{\n+\t  obj.out->last_sym = 0;\n+\t  errmsg = simple_object_find_sections (obj.objfile,\n+\t\t\t\t\t\tprocess_symtab_extension,\n+\t\t\t\t\t\t&obj, &err);\n+\t}\n     }\n \n   if (!obj.objfile || errmsg)"}]}