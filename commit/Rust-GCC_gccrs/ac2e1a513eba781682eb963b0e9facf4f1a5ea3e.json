{"sha": "ac2e1a513eba781682eb963b0e9facf4f1a5ea3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMyZTFhNTEzZWJhNzgxNjgyZWI5NjNiMGU5ZmFjZjRmMWE1ZWEzZQ==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2017-04-25T12:04:46Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2017-04-25T12:04:46Z"}, "message": "[ARC] Addresses can use long immediate for offsets.\n\ngcc/\n2017-04-25  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc.c (LEGITIMATE_OFFSET_ADDRESS_P): Delete macro.\n\t(legitimate_offset_address_p): New function.\n\t(arc_legitimate_address_p): Use above function.\n\nFrom-SVN: r247201", "tree": {"sha": "70619ad68656ac84b308e4e35151cd010f07f645", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70619ad68656ac84b308e4e35151cd010f07f645"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac2e1a513eba781682eb963b0e9facf4f1a5ea3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac2e1a513eba781682eb963b0e9facf4f1a5ea3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac2e1a513eba781682eb963b0e9facf4f1a5ea3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac2e1a513eba781682eb963b0e9facf4f1a5ea3e/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1f8876c786ee2ea08adca27e632a9197bb90ffe7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f8876c786ee2ea08adca27e632a9197bb90ffe7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f8876c786ee2ea08adca27e632a9197bb90ffe7"}], "stats": {"total": 50, "additions": 41, "deletions": 9}, "files": [{"sha": "2f4164737c11f5ed28e18b23d2a72d619beefe36", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2e1a513eba781682eb963b0e9facf4f1a5ea3e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2e1a513eba781682eb963b0e9facf4f1a5ea3e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac2e1a513eba781682eb963b0e9facf4f1a5ea3e", "patch": "@@ -1,3 +1,9 @@\n+2017-04-25  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.c (LEGITIMATE_OFFSET_ADDRESS_P): Delete macro.\n+\t(legitimate_offset_address_p): New function.\n+\t(arc_legitimate_address_p): Use above function.\n+\n 2017-04-25  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.c (arc_output_mi_thunk): Emit PIC calls."}, {"sha": "4574481d1c3c751db5d59e57e32741e98f08aca6", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2e1a513eba781682eb963b0e9facf4f1a5ea3e/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2e1a513eba781682eb963b0e9facf4f1a5ea3e/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=ac2e1a513eba781682eb963b0e9facf4f1a5ea3e", "patch": "@@ -77,13 +77,6 @@ static const char *arc_cpu_string = arc_cpu_name;\n \t\t      ? 0 \\\n \t\t      : -(-GET_MODE_SIZE (MODE) | -4) >> 1)))\n \n-#define LEGITIMATE_OFFSET_ADDRESS_P(MODE, X, INDEX, STRICT) \\\n-(GET_CODE (X) == PLUS\t\t\t     \\\n-  && RTX_OK_FOR_BASE_P (XEXP (X, 0), (STRICT)) \\\n-  && ((INDEX && RTX_OK_FOR_INDEX_P (XEXP (X, 1), (STRICT)) \\\n-       && GET_MODE_SIZE ((MODE)) <= 4) \\\n-      || RTX_OK_FOR_OFFSET_P (MODE, XEXP (X, 1))))\n-\n #define LEGITIMATE_SCALED_ADDRESS_P(MODE, X, STRICT) \\\n (GET_CODE (X) == PLUS \\\n  && GET_CODE (XEXP (X, 0)) == MULT \\\n@@ -246,6 +239,39 @@ static bool arc_use_by_pieces_infrastructure_p (unsigned HOST_WIDE_INT,\n /* Globally visible information about currently selected cpu.  */\n const arc_cpu_t *arc_selected_cpu;\n \n+/* Check for constructions like REG + OFFS, where OFFS can be a\n+   register, an immediate or an long immediate. */\n+\n+static bool\n+legitimate_offset_address_p (enum machine_mode mode, rtx x, bool index,\n+\t\t\t     bool strict)\n+{\n+  if (GET_CODE (x) != PLUS)\n+    return false;\n+\n+  if (!RTX_OK_FOR_BASE_P (XEXP (x, 0), (strict)))\n+    return false;\n+\n+  /* Check for: [Rx + small offset] or [Rx + Ry].  */\n+  if (((index && RTX_OK_FOR_INDEX_P (XEXP (x, 1), (strict))\n+\t&& GET_MODE_SIZE ((mode)) <= 4)\n+       || RTX_OK_FOR_OFFSET_P (mode, XEXP (x, 1))))\n+    return true;\n+\n+  /* Check for [Rx + symbol].  */\n+  if (!flag_pic\n+      && (GET_CODE (XEXP (x, 1)) == SYMBOL_REF)\n+      /* Avoid this type of address for double or larger modes.  */\n+      && (GET_MODE_SIZE (mode) <= 4)\n+      /* Avoid small data which ends in something like GP +\n+\t symb@sda.  */\n+      && (!SYMBOL_REF_SMALL_P (XEXP (x, 1))\n+\t  || TARGET_NO_SDATA_SET))\n+    return true;\n+\n+  return false;\n+}\n+\n /* Implements target hook vector_mode_supported_p.  */\n \n static bool\n@@ -5468,7 +5494,7 @@ arc_legitimate_address_p (machine_mode mode, rtx x, bool strict)\n {\n   if (RTX_OK_FOR_BASE_P (x, strict))\n      return true;\n-  if (LEGITIMATE_OFFSET_ADDRESS_P (mode, x, TARGET_INDEXED_LOADS, strict))\n+  if (legitimate_offset_address_p (mode, x, TARGET_INDEXED_LOADS, strict))\n      return true;\n   if (LEGITIMATE_SCALED_ADDRESS_P (mode, x, strict))\n     return true;\n@@ -5509,7 +5535,7 @@ arc_legitimate_address_p (machine_mode mode, rtx x, bool strict)\n   if ((GET_CODE (x) == PRE_MODIFY || GET_CODE (x) == POST_MODIFY)\n       && GET_CODE (XEXP ((x), 1)) == PLUS\n       && rtx_equal_p (XEXP ((x), 0), XEXP (XEXP (x, 1), 0))\n-      && LEGITIMATE_OFFSET_ADDRESS_P (QImode, XEXP (x, 1),\n+      && legitimate_offset_address_p (QImode, XEXP (x, 1),\n \t\t\t\t      TARGET_AUTO_MODIFY_REG, strict))\n     return true;\n   return false;"}]}