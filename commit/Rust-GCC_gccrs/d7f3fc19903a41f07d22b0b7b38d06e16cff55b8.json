{"sha": "d7f3fc19903a41f07d22b0b7b38d06e16cff55b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdmM2ZjMTk5MDNhNDFmMDdkMjJiMGI3YjM4ZDA2ZTE2Y2ZmNTViOA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-01-22T17:52:44Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-01-22T17:52:44Z"}, "message": "re PR tree-optimization/19484 (function pointer propagation fails for noreturn functions)\n\n\tPR tree-optimization/19484\n\t* tree-cfg.c (remove_fallthru_edge): New function.\n\t(cleanup_control_flow): Remove fallthru edges from calls that are\n\tnow known not to return.\n\nFrom-SVN: r94070", "tree": {"sha": "1772c197ad2c8da8b3c610884def31e0650ecfba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1772c197ad2c8da8b3c610884def31e0650ecfba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7f3fc19903a41f07d22b0b7b38d06e16cff55b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7f3fc19903a41f07d22b0b7b38d06e16cff55b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7f3fc19903a41f07d22b0b7b38d06e16cff55b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7f3fc19903a41f07d22b0b7b38d06e16cff55b8/comments", "author": null, "committer": null, "parents": [{"sha": "111e0c9f4b0027d393f46fb8a5805fa2ac68283a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/111e0c9f4b0027d393f46fb8a5805fa2ac68283a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/111e0c9f4b0027d393f46fb8a5805fa2ac68283a"}], "stats": {"total": 73, "additions": 72, "deletions": 1}, "files": [{"sha": "69b5bc1ca453853e7628df1823146678ae01814d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f3fc19903a41f07d22b0b7b38d06e16cff55b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f3fc19903a41f07d22b0b7b38d06e16cff55b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7f3fc19903a41f07d22b0b7b38d06e16cff55b8", "patch": "@@ -1,3 +1,10 @@\n+2005-01-22  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\tPR tree-optimization/19484\n+\t* tree-cfg.c (remove_fallthru_edge): New function.\n+\t(cleanup_control_flow): Remove fallthru edges from calls that are\n+\tnow known not to return.\n+\n 2005-01-20  Daniel Berlin  <dberlin@dberlin.org>\n \n \tFix PR tree-optimization/19038"}, {"sha": "c8930cbbf688bc03416340d04b21708156b5aec6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f3fc19903a41f07d22b0b7b38d06e16cff55b8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f3fc19903a41f07d22b0b7b38d06e16cff55b8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d7f3fc19903a41f07d22b0b7b38d06e16cff55b8", "patch": "@@ -1,3 +1,8 @@\n+2005-01-22  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\tPR tree-optimization/19484\n+\t* gcc.c-torture/compile/20050122-[12].c: New tests.\n+\n 2005-01-22  Paul Brook  <paul@codesourcery.com>\n \n \t* gfortran.dg/implicit_2.f90: New test."}, {"sha": "a70907d905146adf2d333d7d7127ba2fd6f89318", "filename": "gcc/testsuite/gcc.c-torture/compile/20050122-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f3fc19903a41f07d22b0b7b38d06e16cff55b8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20050122-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f3fc19903a41f07d22b0b7b38d06e16cff55b8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20050122-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20050122-1.c?ref=d7f3fc19903a41f07d22b0b7b38d06e16cff55b8", "patch": "@@ -0,0 +1,12 @@\n+/* From PR 19484.  */\n+extern void foo (void) __attribute__((noreturn));\n+int n;\n+\n+void\n+g (void)\n+{\n+  void (*f) (void) = foo;\n+  if (n)\n+    f ();\n+  n = 1;\n+}"}, {"sha": "d73f6243ddd5147b8c461e9242dfa0b30d0b5a00", "filename": "gcc/testsuite/gcc.c-torture/compile/20050122-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f3fc19903a41f07d22b0b7b38d06e16cff55b8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20050122-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f3fc19903a41f07d22b0b7b38d06e16cff55b8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20050122-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20050122-2.c?ref=d7f3fc19903a41f07d22b0b7b38d06e16cff55b8", "patch": "@@ -0,0 +1,19 @@\n+/* Related to PR 19484.  */\n+extern void foo (void) __attribute__((noreturn));\n+int n;\n+\n+void\n+g (void)\n+{\n+  __label__ lab;\n+  void h (void) { if (n == 2) goto lab; }\n+  void (*f1) (void) = foo;\n+  void (*f2) (void) = h;\n+\n+  f2 ();\n+  if (n)\n+    f1 ();\n+  n = 1;\n+ lab:\n+  n++;\n+}"}, {"sha": "4df58550c051f0f8e075b5c13cc83fdc9784a106", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f3fc19903a41f07d22b0b7b38d06e16cff55b8/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f3fc19903a41f07d22b0b7b38d06e16cff55b8/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=d7f3fc19903a41f07d22b0b7b38d06e16cff55b8", "patch": "@@ -114,6 +114,7 @@ static void make_goto_expr_edges (basic_block);\n static edge tree_redirect_edge_and_branch (edge, basic_block);\n static edge tree_try_redirect_by_replacing_jump (edge, basic_block);\n static void split_critical_edges (void);\n+static bool remove_fallthru_edge (VEC(edge) *);\n \n /* Various helpers.  */\n static inline bool stmt_starts_bb_p (tree, tree);\n@@ -2059,7 +2060,7 @@ cleanup_control_flow (void)\n   basic_block bb;\n   block_stmt_iterator bsi;\n   bool retval = false;\n-  tree stmt;\n+  tree stmt, call;\n \n   FOR_EACH_BB (bb)\n     {\n@@ -2072,6 +2073,17 @@ cleanup_control_flow (void)\n       if (TREE_CODE (stmt) == COND_EXPR\n \t  || TREE_CODE (stmt) == SWITCH_EXPR)\n \tretval |= cleanup_control_expr_graph (bb, bsi);\n+\n+      /* Check for indirect calls that have been turned into\n+\t noreturn calls.  */\n+      call = get_call_expr_in (stmt);\n+      if (call != 0\n+\t  && (call_expr_flags (call) & ECF_NORETURN) != 0\n+\t  && remove_fallthru_edge (bb->succs))\n+\t{\n+\t  free_dominance_info (CDI_DOMINATORS);\n+\t  retval = true;\n+\t}\n     }\n   return retval;\n }\n@@ -2140,6 +2152,22 @@ cleanup_control_expr_graph (basic_block bb, block_stmt_iterator bsi)\n   return retval;\n }\n \n+/* Remove any fallthru edge from EV.  Return true if an edge was removed.  */\n+\n+static bool\n+remove_fallthru_edge (VEC(edge) *ev)\n+{\n+  edge_iterator ei;\n+  edge e;\n+\n+  FOR_EACH_EDGE (e, ei, ev)\n+    if ((e->flags & EDGE_FALLTHRU) != 0)\n+      {\n+\tremove_edge (e);\n+\treturn true;\n+      }\n+  return false;\n+}\n \n /* Given a basic block BB ending with COND_EXPR or SWITCH_EXPR, and a\n    predicate VAL, return the edge that will be taken out of the block."}]}