{"sha": "5ac3f0f448487f214429f35fb6880991214fbfe2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFjM2YwZjQ0ODQ4N2YyMTQ0MjlmMzVmYjY4ODA5OTEyMTRmYmZlMg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-08-20T19:33:20Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-08-20T19:33:20Z"}, "message": "Initial revision\n\nFrom-SVN: r1913", "tree": {"sha": "c19418ed60ec7567c20e8bd387f20c1fe1caf802", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c19418ed60ec7567c20e8bd387f20c1fe1caf802"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ac3f0f448487f214429f35fb6880991214fbfe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ac3f0f448487f214429f35fb6880991214fbfe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ac3f0f448487f214429f35fb6880991214fbfe2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ac3f0f448487f214429f35fb6880991214fbfe2/comments", "author": null, "committer": null, "parents": [{"sha": "4d7e336b7cde5a9954bfce7fce191309288ea0e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d7e336b7cde5a9954bfce7fce191309288ea0e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d7e336b7cde5a9954bfce7fce191309288ea0e1"}], "stats": {"total": 162, "additions": 162, "deletions": 0}, "files": [{"sha": "b10f1112be1feebf251754307f649c030a80e749", "filename": "gcc/config/vax/xm-vms.h", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac3f0f448487f214429f35fb6880991214fbfe2/gcc%2Fconfig%2Fvax%2Fxm-vms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac3f0f448487f214429f35fb6880991214fbfe2/gcc%2Fconfig%2Fvax%2Fxm-vms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fxm-vms.h?ref=5ac3f0f448487f214429f35fb6880991214fbfe2", "patch": "@@ -0,0 +1,162 @@\n+/* Configuration for GNU C-compiler for Vax.\n+   Copyright (C) 1987 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* #defines that need visibility everywhere.  */\n+#define FALSE 0\n+#define TRUE 1\n+\n+/* target machine dependencies.\n+   tm.h is a symbolic link to the actual target specific file.   */\n+#include \"tm.h\"\n+\n+/* This describes the machine the compiler is hosted on.  */\n+#define HOST_BITS_PER_CHAR 8\n+#define HOST_BITS_PER_SHORT 16\n+#define HOST_BITS_PER_INT 32\n+#define HOST_BITS_PER_LONG 32\n+#define HOST_BITS_PER_LONGLONG 64\n+\n+#define SUCCESS_EXIT_CODE 1\n+#define FATAL_EXIT_CODE (44 | 0x10000000)  /* Failure, and no DCL message.  */\n+\n+\n+/* A couple of conditionals for execution machine are controlled here.  */\n+#ifndef VMS\n+#define VMS\n+#endif\n+\n+#ifndef __GNUC__\n+/* not present, at least in VAX-11 C (VMS) v2.2 */\n+#define R_OK 4\n+#define W_OK 2\n+#define X_OK 1\n+#define F_OK 0\n+#endif\n+\n+/* If compiled with GNU C, use the built-in alloca */\n+#ifdef __GNUC__\n+#define alloca __builtin_alloca\n+#endif\n+\n+#define GCC_INCLUDE_DIR \"///not used with VMS///\"\t/* nonsense string for now */\n+\n+/* and define a local equivalent (sort of) for unlink */\n+#define unlink remove\n+\n+/* Specify the list of include file directories.  */\n+#define INCLUDE_DEFAULTS \\\n+{\t\t\t\t\t\t\t\t\t\\\n+  { \"GNU_GXX_INCLUDE:\", 1},\t\t\t\t\t\t\\\n+  { \"GNU_CC_INCLUDE:\", 0},\t/* GNU includes */\t\t\t\\\n+  { \"SYS$SYSROOT:[SYSLIB.]\", 0}, /* VAX-11 \"C\" includes */\t\t\\\n+  { \".\", 0},\t\t\t/* Make normal VMS filespecs work.  */\t\\\n+  { 0, 0}\t\t\t\t\t\t\t\t\\\n+}\n+\n+/* Under VMS a directory specification can be enclosed either in square\n+   brackets or in angle brackets.  Thus we need to check both.  This\n+   macro is used to help compare filenames in cp-lex.c.\n+\n+   We also need to make sure that the names are all lower case, because\n+   we must be able to compare filenames to determine if a file implements\n+   a class.  */\n+\n+#define FILE_NAME_NONDIRECTORY(C)\t\t\t\t\\\n+({\t\t\t\t\t\t\t\t\\\n+   char * pnt_ = (C), * pnt1_;\t\t\t\t\t\\\n+   pnt1_ = pnt_ - 1;\t\t\t\t\t\t\\\n+   while (*++pnt1_)\t\t\t\t\t\t\\\n+     if ((*pnt1_ >= 'A' && *pnt1_ <= 'Z')) *pnt1_ |= 0x20;\t\\\n+   pnt1_ = rindex (pnt_, ']'); \t\t\t\t\t\\\n+   pnt1_ = (pnt1_ == 0 ? rindex (pnt_, '>') : pnt1_);\t\t\\\n+   pnt1_ = (pnt1_ == 0 ? rindex (pnt_, ':') : pnt1_);\t\t\\\n+   (pnt1_ == 0 ? pnt_ : pnt1_ + 1);\t\t\t\t\\\n+ })\n+\n+/* Macro to generate the name of the cross reference file.  The standard\n+   one does not work, since it was written assuming that the conventions\n+   of a unix style filesystem will work on the host system.  */\n+\n+#define XREF_FILE_NAME(BUFF, NAME)\t\\\n+  s = FILE_NAME_NONDIRECTORY (NAME);\t\t\t\\\n+  if (s == NAME) sprintf(BUFF, \"%s_gxref\", NAME);\t\\\n+  else {\t\t\t\t\t\t\\\n+    strcpy(BUFF, NAME);\t\t\t\t\t\\\n+    strcat(BUFF, \"_gxref\");\t\t\t\t\\\n+  }\n+\n+/* Macro that is used in cp-xref.c to determine whether a file name is\n+   absolute or not.  */\n+\n+#define FILE_NAME_ABSOLUTE_P(NAME)\t\\\n+\t(FILE_NAME_NONDIRECTORY (NAME) != (&NAME[1]))\n+\n+/* FILE_NAME_JOINER is defined to be the characters that are inserted between \n+   a directory name and a filename in order to make an absolute file\n+   specification.  Under VMS the directory specification contains all of the\n+   required characters, so we define this to be a null string.  */\n+\n+#define FILE_NAME_JOINER \"\"\n+\f\n+#ifdef VAXC\n+/* Customizations/kludges for building with DEC's VAX C compiler\n+   rather than GCC.  */\n+#define NO_SYS_PARAMS_H\t\t/* don't have <sys/params.h> */\n+#define NO_STAB_H\t\t/* don't have <stab.h> */\n+#define USE_C_ALLOCA\t\t/* using alloca.c */\n+#define QSORT_WORKAROUND\t/* do not use VAXCRTL's qsort */\n+\n+/* use ANSI/SYSV style byte manipulation routines instead of BSD ones */\n+#define bcopy(s,d,n)\tmemcpy((d),(s),(n))\n+#define bzero(d,n)\tmemset((d),0,(n))\n+#define bcmp(l,r,n)\tmemcmp((l),(r),(n))\n+#define index\tstrchr\n+#define rindex\tstrrchr\n+\n+/* rename all too-long external symbol names to avoid warnings */\n+#define check_for_full_enumeration_handling\tcheck_for_full_enum_handling\n+#define current_function_contains_functions\tcurfunc_contains_functions\n+#define current_function_epilogue_delay_list\tcurfunc_epilogue_delay_list\n+#define current_function_has_nonlocal_label\tcurfunc_has_nonlocal_label\n+#define current_function_internal_arg_pointer\tcurfunc_internal_arg_pointer\n+#define current_function_outgoing_args_size\tcurfunc_outgoing_args_size\n+#define current_function_pretend_args_size\tcurfunc_pretend_args_size\n+#define current_function_returns_pcc_struct\tcurfunc_returns_pcc_struct\n+#define current_function_returns_pointer\tcurfunc_returns_pointer\n+#define current_function_uses_const_pool\tcurfunc_uses_const_pool\n+#define current_function_uses_pic_offset_table\tcurfunc_uses_pic_offset_table\n+#define expand_start_loop_continue_elsewhere\texpnd_start_loop_cont_elsewhere\n+#define flag_schedule_insns_after_reload\tflag_sched_insns_after_reload\n+#define maybe_building_objc_message_expr\tmaybe_building_objc_msg_expr\n+#define reg_overlap_mentioned_for_reload_p\treg_overlap_mtnd_for_reload_p\n+#define reposition_prologue_and_epilogue_notes\trepos_prolog_and_epilog_notes\n+#define rtx_equal_function_value_matters\trtx_equal_func_value_matters\n+#define set_new_first_and_last_label_num\tset_new_first_and_last_lbl_num\n+#define thread_prologue_and_epilogue_insns\tthread_prolog_and_epilog_insns\n+#endif\n+\n+/* We need to avoid the library qsort routine, due to a serious bug\n+   in VAXCRTL.  (Sorting anything with size that's not a multiple of 4\n+   after having previously sorted something that was a multiple of 4\n+   can produce wrong results and result in data corruption.)  We'll\n+   use our own substitute (in vax.c) instead.  */\n+/* #define QSORT_WORKAROUND */\n+#ifdef QSORT_WORKAROUND\n+#define qsort not_qsort\n+#endif"}]}