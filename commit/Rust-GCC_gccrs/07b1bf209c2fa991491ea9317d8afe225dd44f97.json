{"sha": "07b1bf209c2fa991491ea9317d8afe225dd44f97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdiMWJmMjA5YzJmYTk5MTQ5MWVhOTMxN2Q4YWZlMjI1ZGQ0NGY5Nw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-04-03T11:38:04Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-04-03T11:38:04Z"}, "message": "re PR bootstrap/52808 (LTO bootstrap failed with bootstrap-profiled)\n\n2012-04-03  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/52808\n\t* tracer.c (tail_duplicate): Return whether we have duplicated\n\tany block.\n\t(tracer): If we have duplicated any block, cleanup the CFG.\n\t* cfghooks.c (duplicate_block): If we duplicated a loop\n\theader but not its loop, destroy the loop because it now has\n\tmultiple entries.\n\t* tree-ssa-threadupdate.c (thread_through_loop_header): Tell\n\tthe cfg manipulation routines we are not creating a multiple\n\tentry loop.\n\n\t* gcc.dg/pr52808.c: New testcase.\n\nFrom-SVN: r186104", "tree": {"sha": "89c43a99b22d5e7d34c2934ec55d1719cf2bab3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89c43a99b22d5e7d34c2934ec55d1719cf2bab3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07b1bf209c2fa991491ea9317d8afe225dd44f97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07b1bf209c2fa991491ea9317d8afe225dd44f97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07b1bf209c2fa991491ea9317d8afe225dd44f97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07b1bf209c2fa991491ea9317d8afe225dd44f97/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "90b2952fa43b86c74d7ad99893f757abf30788f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90b2952fa43b86c74d7ad99893f757abf30788f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90b2952fa43b86c74d7ad99893f757abf30788f5"}], "stats": {"total": 82, "additions": 65, "deletions": 17}, "files": [{"sha": "74a5a18481144230da3b7152c4a203d8341327c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b1bf209c2fa991491ea9317d8afe225dd44f97/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b1bf209c2fa991491ea9317d8afe225dd44f97/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07b1bf209c2fa991491ea9317d8afe225dd44f97", "patch": "@@ -1,3 +1,16 @@\n+2012-04-03  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/52808\n+\t* tracer.c (tail_duplicate): Return whether we have duplicated\n+\tany block.\n+\t(tracer): If we have duplicated any block, cleanup the CFG.\n+\t* cfghooks.c (duplicate_block): If we duplicated a loop\n+\theader but not its loop, destroy the loop because it now has\n+\tmultiple entries.\n+\t* tree-ssa-threadupdate.c (thread_through_loop_header): Tell\n+\tthe cfg manipulation routines we are not creating a multiple\n+\tentry loop.\n+\n 2012-04-03  Tristan Gingold  <gingold@adacore.com>\n \n \t* config/vms/vms-c.c (vms_pragma_nomember_alignment): Handle"}, {"sha": "bc1b7a2f5821de8fcbb874f87275273072017290", "filename": "gcc/cfghooks.c", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b1bf209c2fa991491ea9317d8afe225dd44f97/gcc%2Fcfghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b1bf209c2fa991491ea9317d8afe225dd44f97/gcc%2Fcfghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.c?ref=07b1bf209c2fa991491ea9317d8afe225dd44f97", "patch": "@@ -1009,18 +1009,28 @@ duplicate_block (basic_block bb, edge e, basic_block after)\n     {\n       struct loop *cloop = bb->loop_father;\n       struct loop *copy = get_loop_copy (cloop);\n-      add_bb_to_loop (new_bb, copy ? copy : cloop);\n-      /* If we copied the loop latch block but not the loop, adjust\n-\t loop state.\n-\t ???  If we copied the loop header block but not the loop\n-\t we might either have created a loop copy or a loop with\n-\t multiple entries.  In both cases we probably have to\n-\t ditch the loops and arrange for a fixup.  */\n+      /* If we copied the loop header block but not the loop\n+\t we have created a loop with multiple entries.  Ditch the loop,\n+\t add the new block to the outer loop and arrange for a fixup.  */\n       if (!copy\n-\t  && cloop->latch == bb)\n+\t  && cloop->header == bb)\n \t{\n+\t  add_bb_to_loop (new_bb, loop_outer (cloop));\n+\t  cloop->header = NULL;\n \t  cloop->latch = NULL;\n-\t  loops_state_set (LOOPS_MAY_HAVE_MULTIPLE_LATCHES);\n+\t  loops_state_set (LOOPS_NEED_FIXUP);\n+\t}\n+      else\n+\t{\n+\t  add_bb_to_loop (new_bb, copy ? copy : cloop);\n+\t  /* If we copied the loop latch block but not the loop, adjust\n+\t     loop state.  */\n+\t  if (!copy\n+\t      && cloop->latch == bb)\n+\t    {\n+\t      cloop->latch = NULL;\n+\t      loops_state_set (LOOPS_MAY_HAVE_MULTIPLE_LATCHES);\n+\t    }\n \t}\n     }\n "}, {"sha": "c757d42d177d5f91314feffa197f0e3856feb88e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b1bf209c2fa991491ea9317d8afe225dd44f97/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b1bf209c2fa991491ea9317d8afe225dd44f97/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=07b1bf209c2fa991491ea9317d8afe225dd44f97", "patch": "@@ -1,3 +1,8 @@\n+2012-04-03  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/52808\n+\t* gcc.dg/pr52808.c: New testcase.\n+\n 2012-04-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/52835"}, {"sha": "b731cb40133ffa899c725bacbcfc98e185d0b951", "filename": "gcc/testsuite/gcc.dg/pr52808.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b1bf209c2fa991491ea9317d8afe225dd44f97/gcc%2Ftestsuite%2Fgcc.dg%2Fpr52808.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b1bf209c2fa991491ea9317d8afe225dd44f97/gcc%2Ftestsuite%2Fgcc.dg%2Fpr52808.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr52808.c?ref=07b1bf209c2fa991491ea9317d8afe225dd44f97", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -ftracer\" } */\n+\n+int **fn1 () __attribute__ ((__const__));\n+int main ()\n+{\n+  int i;\n+  i = 0;\n+  for (;; i++)\n+    if (*fn1 ()[i] && !'a' <= 0 && i <= 'z' || *fn1 ()[0] && 'a' <= 'z')\n+      return;\n+}"}, {"sha": "8fb9817dbe9f2353444ec389be4dd7ca2ecd2437", "filename": "gcc/tracer.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b1bf209c2fa991491ea9317d8afe225dd44f97/gcc%2Ftracer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b1bf209c2fa991491ea9317d8afe225dd44f97/gcc%2Ftracer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftracer.c?ref=07b1bf209c2fa991491ea9317d8afe225dd44f97", "patch": "@@ -59,7 +59,6 @@ static bool better_p (const_edge, const_edge);\n static edge find_best_successor (basic_block);\n static edge find_best_predecessor (basic_block);\n static int find_trace (basic_block, basic_block *);\n-static void tail_duplicate (void);\n \n /* Minimal outgoing edge probability considered for superblock formation.  */\n static int probability_cutoff;\n@@ -224,7 +223,7 @@ find_trace (basic_block bb, basic_block *trace)\n /* Look for basic blocks in frequency order, construct traces and tail duplicate\n    if profitable.  */\n \n-static void\n+static bool\n tail_duplicate (void)\n {\n   fibnode_t *blocks = XCNEWVEC (fibnode_t, last_basic_block);\n@@ -236,6 +235,7 @@ tail_duplicate (void)\n   gcov_type cover_insns;\n   int max_dup_insns;\n   basic_block bb;\n+  bool changed = false;\n \n   /* Create an oversized sbitmap to reduce the chance that we need to\n      resize it.  */\n@@ -332,6 +332,7 @@ tail_duplicate (void)\n \t\t\t bb2->index, copy->index, copy->frequency);\n \n \t      bb2 = copy;\n+\t      changed = true;\n \t    }\n \t  mark_bb_seen (bb2);\n \t  bb = bb2;\n@@ -353,13 +354,17 @@ tail_duplicate (void)\n   free (trace);\n   free (counts);\n   fibheap_delete (heap);\n+\n+  return changed;\n }\n \n /* Main entry point to this file.  */\n \n static unsigned int\n tracer (void)\n {\n+  bool changed;\n+\n   gcc_assert (current_ir_type () == IR_GIMPLE);\n \n   if (n_basic_blocks <= NUM_FIXED_BLOCKS + 1)\n@@ -370,15 +375,14 @@ tracer (void)\n     dump_flow_info (dump_file, dump_flags);\n \n   /* Trace formation is done on the fly inside tail_duplicate */\n-  tail_duplicate ();\n+  changed = tail_duplicate ();\n+  if (changed)\n+    free_dominance_info (CDI_DOMINATORS);\n \n-  /* FIXME: We really only need to do this when we know tail duplication\n-            has altered the CFG. */\n-  free_dominance_info (CDI_DOMINATORS);\n   if (dump_file)\n     dump_flow_info (dump_file, dump_flags);\n \n-  return 0;\n+  return changed ? TODO_cleanup_cfg : 0;\n }\n \f\n static bool"}, {"sha": "687eee0485ae09cd51934289f3adca3ce2184737", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b1bf209c2fa991491ea9317d8afe225dd44f97/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b1bf209c2fa991491ea9317d8afe225dd44f97/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=07b1bf209c2fa991491ea9317d8afe225dd44f97", "patch": "@@ -1004,8 +1004,12 @@ thread_through_loop_header (struct loop *loop, bool may_peel_loop_headers)\n       basic_block *bblocks;\n       unsigned nblocks, i;\n \n-      /* First handle the case latch edge is redirected.  */\n+      /* First handle the case latch edge is redirected.  We are copying\n+         the loop header but not creating a multiple entry loop.  Make the\n+\t cfg manipulation code aware of that fact.  */\n+      set_loop_copy (loop, loop);\n       loop->latch = thread_single_edge (latch);\n+      set_loop_copy (loop, NULL);\n       gcc_assert (single_succ (loop->latch) == tgt_bb);\n       loop->header = tgt_bb;\n "}]}