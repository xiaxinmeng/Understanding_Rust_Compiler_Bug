{"sha": "8f7770f9f85cbf63fa11291f7c5ad1b3962b918f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY3NzcwZjlmODVjYmY2M2ZhMTEyOTFmN2M1YWQxYjM5NjJiOTE4Zg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2007-06-06T10:43:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-06T10:43:09Z"}, "message": "sem_ch13.adb (Analyze_Attribute_Definition_Clause, [...]): Check for restriction No_Implementation_Attributes if in Ada 95 mode.\n\n2007-04-20  Robert Dewar  <dewar@adacore.com>\n\t    Arnaud Charlet  <charlet@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause, case Stream_Size):\n\tCheck for restriction No_Implementation_Attributes if in Ada 95 mode.\n\t(Storage_Pool): Do not crash when RE_Stack_Bounded_Pool is not available\n\t(Analyze_Attribute_Definition_Clause [External_Tag]): Generate error\n\tmessage when using a VM, since this attribute is not supported.\n\t(Analyze_Record_Representation_Clause): Give unrepped component warnings\n\n\t* usage.adb: Add new warning for renaming of function return objects\n\tIndicate that -gnatwp and -gnatwP concern front-end inlining\n\tAdd line for -gnatyg\n\tAdd usage information for -gnatw.c/C\n\nFrom-SVN: r125449", "tree": {"sha": "df009ee8984411f034373abb688e8fab5d3abd85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df009ee8984411f034373abb688e8fab5d3abd85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f7770f9f85cbf63fa11291f7c5ad1b3962b918f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f7770f9f85cbf63fa11291f7c5ad1b3962b918f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f7770f9f85cbf63fa11291f7c5ad1b3962b918f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f7770f9f85cbf63fa11291f7c5ad1b3962b918f/comments", "author": null, "committer": null, "parents": [{"sha": "8909e1edc6c67c2946ebf4d2581edd7126e6aa12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8909e1edc6c67c2946ebf4d2581edd7126e6aa12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8909e1edc6c67c2946ebf4d2581edd7126e6aa12"}], "stats": {"total": 109, "additions": 91, "deletions": 18}, "files": [{"sha": "981fc40337bf9c33b3367e50acec06db0c7f819b", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 69, "deletions": 8, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f7770f9f85cbf63fa11291f7c5ad1b3962b918f/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f7770f9f85cbf63fa11291f7c5ad1b3962b918f/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=8f7770f9f85cbf63fa11291f7c5ad1b3962b918f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,6 +31,7 @@ with Errout;   use Errout;\n with Exp_Tss;  use Exp_Tss;\n with Exp_Util; use Exp_Util;\n with Lib;      use Lib;\n+with Namet;    use Namet;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n with Opt;      use Opt;\n@@ -1052,7 +1053,13 @@ package body Sem_Ch13 is\n                  (\"static string required for tag name!\", Nam);\n             end if;\n \n-            Set_Has_External_Tag_Rep_Clause (U_Ent);\n+            if VM_Target = No_VM then\n+               Set_Has_External_Tag_Rep_Clause (U_Ent);\n+            else\n+               Error_Msg_Name_1 := Attr;\n+               Error_Msg_N\n+                 (\"% attribute unsupported in this configuration\", Nam);\n+            end if;\n          end External_Tag;\n \n          -----------\n@@ -1362,8 +1369,10 @@ package body Sem_Ch13 is\n             --    type Q is access Float;\n             --    for Q'Storage_Size use T'Storage_Size; -- incorrect\n \n-            if Base_Type (T) = RTE (RE_Stack_Bounded_Pool) then\n-               Error_Msg_N (\"non-sharable internal Pool\", Expr);\n+            if RTE_Available (RE_Stack_Bounded_Pool)\n+              and then Base_Type (T) = RTE (RE_Stack_Bounded_Pool)\n+            then\n+               Error_Msg_N (\"non-shareable internal Pool\", Expr);\n                return;\n             end if;\n \n@@ -1502,6 +1511,10 @@ package body Sem_Ch13 is\n             Size : constant Uint := Static_Integer (Expr);\n \n          begin\n+            if Ada_Version <= Ada_95 then\n+               Check_Restriction (No_Implementation_Attributes, N);\n+            end if;\n+\n             if Has_Stream_Size_Clause (U_Ent) then\n                Error_Msg_N (\"Stream_Size already given for &\", Nam);\n \n@@ -2076,6 +2089,9 @@ package body Sem_Ch13 is\n             --  that the back-end can compute and back-annotate properly the\n             --  size and alignment of types that may include this record.\n \n+            --  This seems dubious, this destroys the source tree in a manner\n+            --  not detectable by ASIS ???\n+\n             if Operating_Mode = Check_Semantics\n               and then ASIS_Mode\n             then\n@@ -2116,9 +2132,9 @@ package body Sem_Ch13 is\n          return;\n       end if;\n \n-      --  If a tag is present, then create a component clause that places\n-      --  it at the start of the record (otherwise gigi may place it after\n-      --  other fields that have rep clauses).\n+      --  If a tag is present, then create a component clause that places it\n+      --  at the start of the record (otherwise gigi may place it after other\n+      --  fields that have rep clauses).\n \n       Fent := First_Entity (Rectype);\n \n@@ -2570,6 +2586,51 @@ package body Sem_Ch13 is\n \n             Next_Component_Or_Discriminant (Comp);\n          end loop;\n+\n+         --  If no Complete_Representation pragma, warn if missing components\n+\n+      elsif Warn_On_Unrepped_Components\n+        and then not Warnings_Off (Rectype)\n+      then\n+         declare\n+            Num_Repped_Components   : Nat := 0;\n+            Num_Unrepped_Components : Nat := 0;\n+\n+         begin\n+            --  First count number of repped and unrepped components\n+\n+            Comp := First_Component_Or_Discriminant (Rectype);\n+            while Present (Comp) loop\n+               if Present (Component_Clause (Comp)) then\n+                  Num_Repped_Components := Num_Repped_Components + 1;\n+               else\n+                  Num_Unrepped_Components := Num_Unrepped_Components + 1;\n+               end if;\n+\n+               Next_Component_Or_Discriminant (Comp);\n+            end loop;\n+\n+            --  We are only interested in the case where there is at least one\n+            --  unrepped component, and at least half the components have rep\n+            --  clauses. We figure that if less than half have them, then the\n+            --  partial rep clause is really intentional.\n+\n+            if Num_Unrepped_Components > 0\n+              and then Num_Unrepped_Components < Num_Repped_Components\n+            then\n+               Comp := First_Component_Or_Discriminant (Rectype);\n+               while Present (Comp) loop\n+                  if No (Component_Clause (Comp)) then\n+                     Error_Msg_Sloc := Sloc (Comp);\n+                     Error_Msg_NE\n+                       (\"?no component clause given for & declared #\",\n+                        N, Comp);\n+                  end if;\n+\n+                  Next_Component_Or_Discriminant (Comp);\n+               end loop;\n+            end if;\n+         end;\n       end if;\n    end Analyze_Record_Representation_Clause;\n \n@@ -3472,7 +3533,7 @@ package body Sem_Ch13 is\n              Specification => Build_Spec);\n \n       --  For a tagged type, there is always a visible declaration for each\n-      --  stream TSS (it is a predefined primitive operation), and the for the\n+      --  stream TSS (it is a predefined primitive operation), and the\n       --  completion of this declaration occurs at the freeze point, which is\n       --  not always visible at places where the attribute definition clause is\n       --  visible. So, we create a dummy entity here for the purpose of"}, {"sha": "037c6b1905ab30cfc59ed2c57cebef6fc383afdf", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f7770f9f85cbf63fa11291f7c5ad1b3962b918f/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f7770f9f85cbf63fa11291f7c5ad1b3962b918f/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=8f7770f9f85cbf63fa11291f7c5ad1b3962b918f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                B o d y                                   --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -24,11 +24,12 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Hostparm;\n-with Namet;          use Namet;\n-with Opt;            use Opt;\n-with Osint;          use Osint;\n-with Output;         use Output;\n+with Targparm; use Targparm;\n+with Namet;    use Namet;\n+with Opt;      use Opt;\n+with Osint;    use Osint;\n+with Output;   use Output;\n+\n with System.WCh_Con; use System.WCh_Con;\n \n procedure Usage is\n@@ -40,6 +41,10 @@ procedure Usage is\n    --  than 5 characters, the maximum allowed, Write_Switch_Char will\n    --  always output exactly 12 characters.\n \n+   -----------------------\n+   -- Write_Switch_Char --\n+   -----------------------\n+\n    procedure Write_Switch_Char (Sw : String; Prefix : String := \"gnat\") is\n    begin\n       Write_Str (\"  -\");\n@@ -84,9 +89,9 @@ begin\n \n    Write_Eol;\n \n-   --  Common GCC switches not available in JGNAT\n+   --  Common GCC switches not available in JGNAT/MGNAT\n \n-   if not Hostparm.Java_VM then\n+   if VM_Target = No_VM then\n       Write_Switch_Char (\"fstack-check \", \"\");\n       Write_Line (\"Generate stack checking code\");\n \n@@ -361,6 +366,8 @@ begin\n                                                   \"(not multiple of small)\");\n    Write_Line (\"        c    turn on warnings for constant conditional\");\n    Write_Line (\"        C*   turn off warnings for constant conditional\");\n+   Write_Line (\"        .c   turn on warnings for unrepped components\");\n+   Write_Line (\"        .C*  turn off warnings for unrepped components\");\n    Write_Line (\"        d    turn on warnings for implicit dereference\");\n    Write_Line (\"        D*   turn off warnings for implicit dereference\");\n    Write_Line (\"        e    treat all warnings as errors\");\n@@ -389,14 +396,18 @@ begin\n    Write_Line (\"        n*   normal warning mode (cancels -gnatws/-gnatwe)\");\n    Write_Line (\"        o*   turn on warnings for address clause overlay\");\n    Write_Line (\"        O    turn off warnings for address clause overlay\");\n-   Write_Line (\"        p    turn on warnings for ineffective pragma Inline\");\n-   Write_Line (\"        P*   turn off warnings for ineffective pragma Inline\");\n+   Write_Line (\"        p    turn on warnings for ineffective pragma \" &\n+                                             \"Inline in frontend\");\n+   Write_Line (\"        P*   turn off warnings for ineffective pragma \" &\n+                                             \"Inline in frontend\");\n    Write_Line (\"        q*   turn on warnings for questionable \" &\n                                                   \"missing parentheses\");\n    Write_Line (\"        Q    turn off warnings for questionable \" &\n                                                   \"missing parentheses\");\n    Write_Line (\"        r    turn on warnings for redundant construct\");\n    Write_Line (\"        R*   turn off warnings for redundant construct\");\n+   Write_Line (\"        .r   turn on warnings for object renaming function\");\n+   Write_Line (\"        .R*  turn off warnings for object renaming function\");\n    Write_Line (\"        s    suppress all warnings\");\n    Write_Line (\"        t    turn on warnings for tracking deleted code\");\n    Write_Line (\"        T*   turn off warnings for tracking deleted code\");\n@@ -460,6 +471,7 @@ begin\n    Write_Line (\"        d    check no DOS line terminators\");\n    Write_Line (\"        e    check end/exit labels present\");\n    Write_Line (\"        f    check no form feeds/vertical tabs in source\");\n+   Write_Line (\"        g    check standard GNAT style rules\");\n    Write_Line (\"        h    check no horizontal tabs in source\");\n    Write_Line (\"        i    check if-then layout\");\n    Write_Line (\"        I    check mode in\");"}]}