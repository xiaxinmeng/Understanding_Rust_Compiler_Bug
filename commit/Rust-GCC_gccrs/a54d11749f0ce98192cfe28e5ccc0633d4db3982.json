{"sha": "a54d11749f0ce98192cfe28e5ccc0633d4db3982", "node_id": "C_kwDOANBUbNoAKGE1NGQxMTc0OWYwY2U5ODE5MmNmZTI4ZTVjY2MwNjMzZDRkYjM5ODI", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2020-01-14T10:25:35Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2022-01-04T10:27:11Z"}, "message": "Adjust VxWorks fixincludes hack for mkdir to work for C++\n\nFor VxWorks, replace an attempt at providing a posix API for\nmkdir via macro by a varargs prototype, which works better for\nC++ references like std::mkdir(arg1, arg2).\n\n2021-12-16  Olivier Hainque  <hainque@adacore.com>\n\nfixincludes/\n\t* inclhack.def (vxworks_posix_mkdir): Refine to expose a\n\tvarargs interface.\n\t* tests/base/sys/stat.h: Update expected results.\n\t* fixincl.x: Regenerate.", "tree": {"sha": "ddc1583d10b3b61018fcf865d01ccf50582f6134", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddc1583d10b3b61018fcf865d01ccf50582f6134"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a54d11749f0ce98192cfe28e5ccc0633d4db3982", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a54d11749f0ce98192cfe28e5ccc0633d4db3982", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a54d11749f0ce98192cfe28e5ccc0633d4db3982", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a54d11749f0ce98192cfe28e5ccc0633d4db3982/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48e2d9b7b88dabed336cd098cd212d0e53c5125f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48e2d9b7b88dabed336cd098cd212d0e53c5125f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48e2d9b7b88dabed336cd098cd212d0e53c5125f"}], "stats": {"total": 55, "additions": 27, "deletions": 28}, "files": [{"sha": "16b15c045d0da8ea447d19a5989ec687942cdb0f", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a54d11749f0ce98192cfe28e5ccc0633d4db3982/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a54d11749f0ce98192cfe28e5ccc0633d4db3982/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=a54d11749f0ce98192cfe28e5ccc0633d4db3982", "patch": "@@ -2,11 +2,11 @@\n  *\n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  *\n- * It has been AutoGen-ed  January  1, 2022 at 11:58:02 AM by AutoGen 5.18.16\n+ * It has been AutoGen-ed  January  4, 2022 at 10:24:34 AM by AutoGen 5.18.16\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Sat Jan  1 11:58:02 CET 2022\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Tue Jan  4 10:24:34 UTC 2022\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -10214,32 +10214,31 @@ static const char* apzVxworks_Ioctl_MacroPatch[] = {\n \n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n- *  Description of Vxworks_Mkdir_Macro fix\n+ *  Description of Vxworks_Posix_Mkdir fix\n  */\n-tSCC zVxworks_Mkdir_MacroName[] =\n-     \"vxworks_mkdir_macro\";\n+tSCC zVxworks_Posix_MkdirName[] =\n+     \"vxworks_posix_mkdir\";\n \n /*\n  *  File name selection pattern\n  */\n-tSCC zVxworks_Mkdir_MacroList[] =\n+tSCC zVxworks_Posix_MkdirList[] =\n   \"sys/stat.h\\0\";\n /*\n  *  Machine/OS name selection pattern\n  */\n-tSCC* apzVxworks_Mkdir_MacroMachs[] = {\n+tSCC* apzVxworks_Posix_MkdirMachs[] = {\n         \"*-*-vxworks*\",\n         (const char*)NULL };\n-#define VXWORKS_MKDIR_MACRO_TEST_CT  0\n-#define aVxworks_Mkdir_MacroTests   (tTestDesc*)NULL\n+#define VXWORKS_POSIX_MKDIR_TEST_CT  0\n+#define aVxworks_Posix_MkdirTests   (tTestDesc*)NULL\n \n /*\n- *  Fix Command Arguments for Vxworks_Mkdir_Macro\n+ *  Fix Command Arguments for Vxworks_Posix_Mkdir\n  */\n-static const char* apzVxworks_Mkdir_MacroPatch[] = {\n+static const char* apzVxworks_Posix_MkdirPatch[] = {\n     \"format\",\n-    \"%0\\n\\\n-#define mkdir(dir, ...) ((void)0, ##__VA_ARGS__, (mkdir)(dir))\\n\",\n+    \"extern STATUS mkdir(const char *dir, ...);\",\n     \"extern[\\t ]+STATUS[\\t ]+mkdir[\\t ]*\\\\([\\t ]*const[\\t ]+char[\\t ]*\\\\*[\\t ]*(|[_[:alpha:]][_[:alnum:]]*)\\\\)[\\t ]*;\",\n     (char*)NULL };\n \n@@ -10908,7 +10907,7 @@ typedef enum {\n     VOID_NULL_FIXIDX,\n     VXWORKS_GCC_PROBLEM_FIXIDX,\n     VXWORKS_IOCTL_MACRO_FIXIDX,\n-    VXWORKS_MKDIR_MACRO_FIXIDX,\n+    VXWORKS_POSIX_MKDIR_FIXIDX,\n     VXWORKS_NEEDS_VXTYPES_FIXIDX,\n     VXWORKS_NEEDS_VXWORKS_FIXIDX,\n     VXWORKS_REGS_FIXIDX,\n@@ -12177,10 +12176,10 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      VXWORKS_IOCTL_MACRO_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aVxworks_Ioctl_MacroTests,   apzVxworks_Ioctl_MacroPatch, 0 },\n \n-  {  zVxworks_Mkdir_MacroName,    zVxworks_Mkdir_MacroList,\n-     apzVxworks_Mkdir_MacroMachs,\n-     VXWORKS_MKDIR_MACRO_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n-     aVxworks_Mkdir_MacroTests,   apzVxworks_Mkdir_MacroPatch, 0 },\n+  {  zVxworks_Posix_MkdirName,    zVxworks_Posix_MkdirList,\n+     apzVxworks_Posix_MkdirMachs,\n+     VXWORKS_POSIX_MKDIR_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aVxworks_Posix_MkdirTests,   apzVxworks_Posix_MkdirPatch, 0 },\n \n   {  zVxworks_Needs_VxtypesName,    zVxworks_Needs_VxtypesList,\n      apzVxworks_Needs_VxtypesMachs,"}, {"sha": "8f056adef68216f890d5e82253afe1581d02c17f", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a54d11749f0ce98192cfe28e5ccc0633d4db3982/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a54d11749f0ce98192cfe28e5ccc0633d4db3982/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=a54d11749f0ce98192cfe28e5ccc0633d4db3982", "patch": "@@ -5159,21 +5159,23 @@ fix = {\n };\n \n /*\n- *  Wrap VxWorks mkdir to be posix compliant\n+ *  mkdir's posix interface expects two arguments.  While the RTP VxWorks\n+ *  API is fine, the kernel version handles only one.  We used to expose\n+ *  a macro and this didn't play nice with uses such as posix:mkdir(x, y)\n+ *  in libstdc++, so we expose a vararg prototype instead.\n  */\n fix = {\n-    hackname    = vxworks_mkdir_macro;\n+    hackname    = vxworks_posix_mkdir;\n     files       = sys/stat.h;\n     mach        = \"*-*-vxworks*\";\n \n     c_fix       = format;\n-    c_fix_arg   = \"%0\\n\"\n-                \"#define mkdir(dir, ...) ((void)0, ##__VA_ARGS__, (mkdir)(dir))\\n\";\n+    c_fix_arg   = \"extern STATUS mkdir(const char *dir, ...);\";\n     c_fix_arg   = \"extern[\\t ]+STATUS[\\t ]+mkdir[\\t ]*\"\n                 \"\\\\([\\t ]*const[\\t ]+char[\\t ]*\\\\*[\\t ]*\" /* arg type */\n                 \"(|[_[:alpha:]][_[:alnum:]]*)\" /* arg name (optional) */\n                 \"\\\\)[\\t ]*;\";\n-        \n+\n     test_text   = \"extern STATUS mkdir (const char * _qwerty) ;\";\n };\n "}, {"sha": "cf86e5d169e660ba4e9d69a497d344d65d15a466", "filename": "fixincludes/tests/base/sys/stat.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a54d11749f0ce98192cfe28e5ccc0633d4db3982/fixincludes%2Ftests%2Fbase%2Fsys%2Fstat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a54d11749f0ce98192cfe28e5ccc0633d4db3982/fixincludes%2Ftests%2Fbase%2Fsys%2Fstat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsys%2Fstat.h?ref=a54d11749f0ce98192cfe28e5ccc0633d4db3982", "patch": "@@ -28,11 +28,9 @@ extern int fchmod(int, mode_t);\n #endif  /* RS6000_FCHMOD_CHECK */\n \n \n-#if defined( VXWORKS_MKDIR_MACRO_CHECK )\n-extern STATUS mkdir (const char * _qwerty) ;\n-#define mkdir(dir, ...) ((void)0, ##__VA_ARGS__, (mkdir)(dir))\n-\n-#endif  /* VXWORKS_MKDIR_MACRO_CHECK */\n+#if defined( VXWORKS_POSIX_MKDIR_CHECK )\n+extern STATUS mkdir(const char *dir, ...);\n+#endif  /* VXWORKS_POSIX_MKDIR_CHECK */\n \n \n #if defined( VXWORKS_NEEDS_VXWORKS_CHECK )"}]}