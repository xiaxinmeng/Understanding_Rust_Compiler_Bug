{"sha": "94e6f78366432e9495ea7d041f43134122b23753", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRlNmY3ODM2NjQzMmU5NDk1ZWE3ZDA0MWY0MzEzNDEyMmIyMzc1Mw==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@mhpcc.edu", "date": "1999-02-18T19:49:19Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-02-18T19:49:19Z"}, "message": "* regclass.c (record_reg_classes): Correctly handle 'p' constraint.\n\nFrom-SVN: r25295", "tree": {"sha": "4065946f3c698f4bccf9a39fbf478501c4e2d442", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4065946f3c698f4bccf9a39fbf478501c4e2d442"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94e6f78366432e9495ea7d041f43134122b23753", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94e6f78366432e9495ea7d041f43134122b23753", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94e6f78366432e9495ea7d041f43134122b23753", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94e6f78366432e9495ea7d041f43134122b23753/comments", "author": null, "committer": null, "parents": [{"sha": "1b4a979b011b22a370aaed6f57f4caaf3cf0d07a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b4a979b011b22a370aaed6f57f4caaf3cf0d07a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b4a979b011b22a370aaed6f57f4caaf3cf0d07a"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "5aff4b3700ddb58298d8bee9782a33afd69e456a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94e6f78366432e9495ea7d041f43134122b23753/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94e6f78366432e9495ea7d041f43134122b23753/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=94e6f78366432e9495ea7d041f43134122b23753", "patch": "@@ -1,3 +1,7 @@\n+Thu Feb 18 20:44:21 1999  David Edelsohn  <edelsohn@mhpcc.edu>\n+\n+\t* regclass.c (record_reg_classes): Correctly handle 'p' constraint.\n+\n Thu Feb 18 19:59:37 1999  Marc Espie <espie@cvs.openbsd.org>\n \n \t* configure.in :Handle OpenBSD platforms."}, {"sha": "9faf8ab3f786a53b281387026fd54e423a25f9c1", "filename": "gcc/regclass.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94e6f78366432e9495ea7d041f43134122b23753/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94e6f78366432e9495ea7d041f43134122b23753/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=94e6f78366432e9495ea7d041f43134122b23753", "patch": "@@ -1159,6 +1159,7 @@ record_reg_classes (n_alts, n_ops, ops, modes, constraints, insn)\n \t  const char *p = constraints[i];\n \t  rtx op = ops[i];\n \t  enum machine_mode mode = modes[i];\n+\t  int allows_addr = 0;\n \t  int allows_mem = 0;\n \t  int win = 0;\n \t  unsigned char c;\n@@ -1262,7 +1263,11 @@ record_reg_classes (n_alts, n_ops, ops, modes, constraints, insn)\n \t      case '!':  case '#':  case '&':\n \t      case '0':  case '1':  case '2':  case '3':  case '4':\n \t      case '5':  case '6':  case '7':  case '8':  case '9':\n+\t\tbreak;\n+\n \t      case 'p':\n+\t\tallows_addr = 1;\n+\t\twin = address_operand (op, GET_MODE (op));\n \t\tbreak;\n \n \t      case 'm':  case 'o':  case 'V':\n@@ -1393,7 +1398,10 @@ record_reg_classes (n_alts, n_ops, ops, modes, constraints, insn)\n \t  if (GET_CODE (op) == REG && REGNO (op) >= FIRST_PSEUDO_REGISTER)\n \t    {\n \t      if (classes[i] == NO_REGS)\n-\t\talt_fail = 1;\n+\t\t{\n+\t\t  if (! allows_addr)\n+\t\t    alt_fail = 1;\n+\t\t}\n \t      else\n \t\t{\n \t\t  struct costs *pp = &this_op_costs[i];\n@@ -1443,7 +1451,7 @@ record_reg_classes (n_alts, n_ops, ops, modes, constraints, insn)\n \t  /* The only other way this alternative can be used is if this is a\n \t     constant that could be placed into memory.  */\n \n-\t  else if (CONSTANT_P (op) && allows_mem)\n+\t  else if (CONSTANT_P (op) && (allows_addr || allows_mem))\n \t    alt_cost += MEMORY_MOVE_COST (mode, classes[i], 1);\n \t  else\n \t    alt_fail = 1;"}]}