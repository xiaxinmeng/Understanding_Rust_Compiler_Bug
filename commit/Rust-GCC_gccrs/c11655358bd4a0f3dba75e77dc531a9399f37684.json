{"sha": "c11655358bd4a0f3dba75e77dc531a9399f37684", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzExNjU1MzU4YmQ0YTBmM2RiYTc1ZTc3ZGM1MzFhOTM5OWYzNzY4NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-03-21T20:15:41Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-03-21T20:15:41Z"}, "message": "re PR c++/28879 (ICE with VLA in template function)\n\n        PR c++/28879\n        * parser.c (cp_parser_direct_declarator): In a template, wrap\n        non-constant expression in NOP_EXPR with TREE_SIDE_EFFECTS set.\n        * pt.c (tsubst): Preserve it in a partial instantiation.\n        (dependent_type_p_r): Don't check value_dependent_expression_p.\n        * decl.c (compute_array_index_type): Don't check\n        value_dependent_expression_p if TREE_SIDE_EFFECTS.\n\nFrom-SVN: r144988", "tree": {"sha": "632fbc5aeb17457459bfa8833e865a8f2f37a7fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/632fbc5aeb17457459bfa8833e865a8f2f37a7fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c11655358bd4a0f3dba75e77dc531a9399f37684", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c11655358bd4a0f3dba75e77dc531a9399f37684", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c11655358bd4a0f3dba75e77dc531a9399f37684", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c11655358bd4a0f3dba75e77dc531a9399f37684/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b39f88bd05693c200851c934fca5ee8d0121173e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b39f88bd05693c200851c934fca5ee8d0121173e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b39f88bd05693c200851c934fca5ee8d0121173e"}], "stats": {"total": 74, "additions": 66, "deletions": 8}, "files": [{"sha": "e695ede3f2dde9c95fec3aa5ee4b37c80c46664d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c11655358bd4a0f3dba75e77dc531a9399f37684/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c11655358bd4a0f3dba75e77dc531a9399f37684/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c11655358bd4a0f3dba75e77dc531a9399f37684", "patch": "@@ -1,5 +1,13 @@\n 2009-03-20  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/28879\n+\t* parser.c (cp_parser_direct_declarator): In a template, wrap \n+\tnon-constant expression in NOP_EXPR with TREE_SIDE_EFFECTS set.\n+\t* pt.c (tsubst): Preserve it in a partial instantiation.\n+\t(dependent_type_p_r): Don't check value_dependent_expression_p.\n+\t* decl.c (compute_array_index_type): Don't check\n+\tvalue_dependent_expression_p if TREE_SIDE_EFFECTS.\n+\n \tC++ core issue 703\n \t* typeck2.c (check_narrowing): Don't complain about loss of \n \tprecision when converting a floating-point constant."}, {"sha": "a96e606ad4f8a4423ffde6e19d1559fc596e2bf5", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c11655358bd4a0f3dba75e77dc531a9399f37684/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c11655358bd4a0f3dba75e77dc531a9399f37684/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c11655358bd4a0f3dba75e77dc531a9399f37684", "patch": "@@ -7179,13 +7179,22 @@ compute_array_index_type (tree name, tree size)\n       type = TREE_TYPE (size);\n     }\n \n-  if (value_dependent_expression_p (size))\n-    {\n-      /* We cannot do any checking for a value-dependent SIZE. Just\n-\t build the index type and mark that it requires structural\n-\t equality checks.  */\n+  /* We can only call value_dependent_expression_p on integral constant\n+     expressions; the parser adds a dummy NOP_EXPR with TREE_SIDE_EFFECTS\n+     set if this isn't one.  */\n+  if (processing_template_decl\n+      && (TREE_SIDE_EFFECTS (size) || value_dependent_expression_p (size)))\n+    {\n+      /* We cannot do any checking for a SIZE that isn't known to be\n+\t constant. Just build the index type and mark that it requires\n+\t structural equality checks.  */\n       itype = build_index_type (build_min (MINUS_EXPR, sizetype,\n \t\t\t\t\t   size, integer_one_node));\n+      if (!TREE_SIDE_EFFECTS (size))\n+\t{\n+\t  TYPE_DEPENDENT_P (itype) = 1;\n+\t  TYPE_DEPENDENT_P_VALID (itype) = 1;\n+\t}\n       SET_TYPE_STRUCTURAL_EQUALITY (itype);\n       return itype;\n     }"}, {"sha": "d3343aa609780539c285a2d2aa3ad3576d093821", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c11655358bd4a0f3dba75e77dc531a9399f37684/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c11655358bd4a0f3dba75e77dc531a9399f37684/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=c11655358bd4a0f3dba75e77dc531a9399f37684", "patch": "@@ -13267,6 +13267,13 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t\t\t\t\t\t &non_constant_p);\n \t      if (!non_constant_p)\n \t\tbounds = fold_non_dependent_expr (bounds);\n+\t      else if (processing_template_decl)\n+\t\t{\n+\t\t  /* Remember this wasn't a constant-expression.  */\n+\t\t  bounds = build_nop (TREE_TYPE (bounds), bounds);\n+\t\t  TREE_SIDE_EFFECTS (bounds) = 1;\n+\t\t}\n+\n \t      /* Normally, the array bound must be an integral constant\n \t\t expression.  However, as an extension, we allow VLAs\n \t\t in function scopes.  */"}, {"sha": "1c408237c6f3a7a08ede804cde19f65834f35d3a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c11655358bd4a0f3dba75e77dc531a9399f37684/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c11655358bd4a0f3dba75e77dc531a9399f37684/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c11655358bd4a0f3dba75e77dc531a9399f37684", "patch": "@@ -9084,8 +9084,19 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t\t\t   /*integral_constant_expression_p=*/false);\n \tmax = fold_decl_constant_value (max);\n \n+\t/* If we're in a partial instantiation, preserve the magic NOP_EXPR\n+\t   with TREE_SIDE_EFFECTS that indicates this is not an integral\n+\t   constant expression.  */\n+\tif (processing_template_decl\n+\t    && TREE_SIDE_EFFECTS (omax) && TREE_CODE (omax) == NOP_EXPR)\n+\t  {\n+\t    gcc_assert (TREE_CODE (max) == NOP_EXPR);\n+\t    TREE_SIDE_EFFECTS (max) = 1;\n+\t  }\n+\n \tif (TREE_CODE (max) != INTEGER_CST\n \t    && !at_function_scope_p ()\n+\t    && !TREE_SIDE_EFFECTS (max)\n \t    && !value_dependent_expression_p (max))\n \t  {\n \t    if (complain & tf_error)\n@@ -15972,9 +15983,9 @@ dependent_type_p_r (tree type)\n \t   && !TREE_CONSTANT (TYPE_MAX_VALUE (type)))\n     {\n       /* If this is the TYPE_DOMAIN of an array type, consider it\n-\t dependent.  */\n-      return (value_dependent_expression_p (TYPE_MAX_VALUE (type))\n-\t      || type_dependent_expression_p (TYPE_MAX_VALUE (type)));\n+\t dependent.  We already checked for value-dependence in\n+\t compute_array_index_type.  */\n+      return type_dependent_expression_p (TYPE_MAX_VALUE (type));\n     }\n \n   /* -- a template-id in which either the template name is a template"}, {"sha": "6d651dde37ec041656ef5b0e529a04605c6945a0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c11655358bd4a0f3dba75e77dc531a9399f37684/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c11655358bd4a0f3dba75e77dc531a9399f37684/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c11655358bd4a0f3dba75e77dc531a9399f37684", "patch": "@@ -1,3 +1,8 @@\n+2009-03-21  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/28879\n+\t* g++.dg/ext/vla6.C: New test.\n+\n 2009-03-20  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/initlist5.C: Add additional test."}, {"sha": "83011f2f0ab8e75084da77b8b4ab830a048285a9", "filename": "gcc/testsuite/g++.dg/ext/vla6.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c11655358bd4a0f3dba75e77dc531a9399f37684/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c11655358bd4a0f3dba75e77dc531a9399f37684/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla6.C?ref=c11655358bd4a0f3dba75e77dc531a9399f37684", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/28879\n+// { dg-options \"\" }\n+\n+struct A\n+{\n+  int i;\n+  A(): i(1) {}\n+};\n+\n+template<int> void foo()\n+{\n+  int x[A().i];\n+}\n+\n+void f()\n+{\n+  foo<1>();\n+}"}]}