{"sha": "a065e0bb092a010664777394530ab1a52bb5293b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA2NWUwYmIwOTJhMDEwNjY0Nzc3Mzk0NTMwYWIxYTUyYmI1MjkzYg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-04-14T15:19:46Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-04-14T15:19:46Z"}, "message": "aarch64: Handle more SVE vector constants [PR99246]\n\nPR99246 is about a case in which we failed to handle a CONST_VECTOR\nwith NELTS_PER_PATTERN==2, i.e. a vector with a \u201cforeground\u201d sequence\nof N vectors followed by a repeating \u201cbackground\u201d sequence of N vectors.\n\nAt the moment, it's difficult to produce these vectors directly,\nbut I'm hoping that for GCC 12 we'll do more folding, which will\nin turn make this easier to test and easier to optimise.  Until then,\nthe patch simply relies on the testcase in the PR.\n\ngcc/\n\tPR target/99246\n\t* config/aarch64/aarch64.c (aarch64_expand_sve_const_vector_sel):\n\tNew function.\n\t(aarch64_expand_sve_const_vector): Use it for nelts_per_pattern==2.\n\ngcc/testsuite/\n\tPR target/99246\n\t* gcc.target/aarch64/sve/acle/general/pr99246.c: New test.", "tree": {"sha": "ea7b3fa6d9e02b10b6ead9ba4cec1d50a38a1c85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea7b3fa6d9e02b10b6ead9ba4cec1d50a38a1c85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a065e0bb092a010664777394530ab1a52bb5293b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a065e0bb092a010664777394530ab1a52bb5293b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a065e0bb092a010664777394530ab1a52bb5293b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a065e0bb092a010664777394530ab1a52bb5293b/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3191c1f4488d1f7563b563d7ae2a102a26f16d82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3191c1f4488d1f7563b563d7ae2a102a26f16d82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3191c1f4488d1f7563b563d7ae2a102a26f16d82"}], "stats": {"total": 71, "additions": 71, "deletions": 0}, "files": [{"sha": "04b55d9070b32bf6473865f291f4fdae22e74a99", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a065e0bb092a010664777394530ab1a52bb5293b/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a065e0bb092a010664777394530ab1a52bb5293b/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=a065e0bb092a010664777394530ab1a52bb5293b", "patch": "@@ -5166,6 +5166,56 @@ aarch64_expand_sve_ld1rq (rtx dest, rtx src)\n   return true;\n }\n \n+/* SRC is an SVE CONST_VECTOR that contains N \"foreground\" values followed\n+   by N \"background\" values.  Try to move it into TARGET using:\n+\n+      PTRUE PRED.<T>, VL<N>\n+      MOV TRUE.<T>, #<foreground>\n+      MOV FALSE.<T>, #<background>\n+      SEL TARGET.<T>, PRED.<T>, TRUE.<T>, FALSE.<T>\n+\n+   The PTRUE is always a single instruction but the MOVs might need a\n+   longer sequence.  If the background value is zero (as it often is),\n+   the sequence can sometimes collapse to a PTRUE followed by a\n+   zero-predicated move.\n+\n+   Return the target on success, otherwise return null.  */\n+\n+static rtx\n+aarch64_expand_sve_const_vector_sel (rtx target, rtx src)\n+{\n+  gcc_assert (CONST_VECTOR_NELTS_PER_PATTERN (src) == 2);\n+\n+  /* Make sure that the PTRUE is valid.  */\n+  machine_mode mode = GET_MODE (src);\n+  machine_mode pred_mode = aarch64_sve_pred_mode (mode);\n+  unsigned int npatterns = CONST_VECTOR_NPATTERNS (src);\n+  if (aarch64_svpattern_for_vl (pred_mode, npatterns)\n+      == AARCH64_NUM_SVPATTERNS)\n+    return NULL_RTX;\n+\n+  rtx_vector_builder pred_builder (pred_mode, npatterns, 2);\n+  rtx_vector_builder true_builder (mode, npatterns, 1);\n+  rtx_vector_builder false_builder (mode, npatterns, 1);\n+  for (unsigned int i = 0; i < npatterns; ++i)\n+    {\n+      true_builder.quick_push (CONST_VECTOR_ENCODED_ELT (src, i));\n+      pred_builder.quick_push (CONST1_RTX (BImode));\n+    }\n+  for (unsigned int i = 0; i < npatterns; ++i)\n+    {\n+      false_builder.quick_push (CONST_VECTOR_ENCODED_ELT (src, i + npatterns));\n+      pred_builder.quick_push (CONST0_RTX (BImode));\n+    }\n+  expand_operand ops[4];\n+  create_output_operand (&ops[0], target, mode);\n+  create_input_operand (&ops[1], true_builder.build (), mode);\n+  create_input_operand (&ops[2], false_builder.build (), mode);\n+  create_input_operand (&ops[3], pred_builder.build (), pred_mode);\n+  expand_insn (code_for_vcond_mask (mode, mode), 4, ops);\n+  return target;\n+}\n+\n /* Return a register containing CONST_VECTOR SRC, given that SRC has an\n    SVE data mode and isn't a legitimate constant.  Use TARGET for the\n    result if convenient.\n@@ -5300,6 +5350,10 @@ aarch64_expand_sve_const_vector (rtx target, rtx src)\n   if (GET_MODE_NUNITS (mode).is_constant ())\n     return NULL_RTX;\n \n+  if (nelts_per_pattern == 2)\n+    if (rtx res = aarch64_expand_sve_const_vector_sel (target, src))\n+      return res;\n+\n   /* Expand each pattern individually.  */\n   gcc_assert (npatterns > 1);\n   rtx_vector_builder builder;"}, {"sha": "7f1079c1bd655ce966725ae5ade3a4ad026a395f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general/pr99246.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a065e0bb092a010664777394530ab1a52bb5293b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fpr99246.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a065e0bb092a010664777394530ab1a52bb5293b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fpr99246.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fpr99246.c?ref=a065e0bb092a010664777394530ab1a52bb5293b", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-options \"-Os\" } */\n+\n+#include <arm_sve.h>\n+extern char b[];\n+int x;\n+void f() {\n+  while (x) {\n+    x = svaddv(\n+        svnot_z(svnot_z(svptrue_pat_b8(SV_VL6),\n+                        svmov_z(svptrue_pat_b8(SV_VL1),\n+                                svptrue_pat_b16(SV_VL3))),\n+                svptrue_pat_b64(SV_VL2)),\n+        svdup_s32(8193));\n+    for (int j = x; j; j++)\n+      b[j] = 0;\n+  }\n+}"}]}