{"sha": "59159a105e300b3ed5f9a67a1b76947e91f338b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkxNTlhMTA1ZTMwMGIzZWQ1ZjlhNjdhMWI3Njk0N2U5MWYzMzhiNA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@cygnus.com", "date": "1999-07-27T15:03:03Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1999-07-27T15:03:03Z"}, "message": "Add clones of fp-cmp-1 for float/long double; Change name of unknown register\n\nFrom-SVN: r28296", "tree": {"sha": "978da4b2a27cbe17907c7401ade6a44e8ef3d5fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/978da4b2a27cbe17907c7401ade6a44e8ef3d5fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59159a105e300b3ed5f9a67a1b76947e91f338b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59159a105e300b3ed5f9a67a1b76947e91f338b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59159a105e300b3ed5f9a67a1b76947e91f338b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59159a105e300b3ed5f9a67a1b76947e91f338b4/comments", "author": null, "committer": null, "parents": [{"sha": "94b82f2bcfcffceced323c28d9e494844b4dbc2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94b82f2bcfcffceced323c28d9e494844b4dbc2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94b82f2bcfcffceced323c28d9e494844b4dbc2a"}], "stats": {"total": 96, "additions": 95, "deletions": 1}, "files": [{"sha": "89700ee5b269776043e9ee4c1756ae2dbca9740a", "filename": "gcc/testsuite/gcc.c-torture/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59159a105e300b3ed5f9a67a1b76947e91f338b4/gcc%2Ftestsuite%2Fgcc.c-torture%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59159a105e300b3ed5f9a67a1b76947e91f338b4/gcc%2Ftestsuite%2Fgcc.c-torture%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2FChangeLog?ref=59159a105e300b3ed5f9a67a1b76947e91f338b4", "patch": "@@ -1,3 +1,15 @@\n+1999-07-27  Michael Meissner  <meissner@cygnus.com>\n+\n+\t* execute/ieee/fp-cmp-2.c: New file, clone from fp-cmp-1.c,\n+\tconverting double to float.\n+\n+\t* execute/ieee/fp-cmp-3.c: New file, clone from fp-cmp-1.c,\n+\tconverting double to long double.\n+\n+\t* noncompile/920507-1.c (x): Rename asm register from fr1 to\n+\tunknown_register, since fr1 is a legitimate register on some\n+\tmachines.\n+\n 1999-06-23  Nick Clifton  <nickc@cygnus.com>\n \n \t* compile/dll.c: New test case.  Check that dll attributes"}, {"sha": "2a86d0f5eb9b8a1e5c4d27e7c18ea070ba8a94fd", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/fp-cmp-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59159a105e300b3ed5f9a67a1b76947e91f338b4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59159a105e300b3ed5f9a67a1b76947e91f338b4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-2.c?ref=59159a105e300b3ed5f9a67a1b76947e91f338b4", "patch": "@@ -0,0 +1,41 @@\n+#include <signal.h>\n+\n+float nan = 1.0f/0.0f - 1.0f/0.0f;\n+float x = 1.0f;\n+\n+void leave ()\n+{\n+  exit (0);\n+}\n+\n+main ()\n+{\n+#if ! defined (__vax__) && ! defined (_CRAY)\n+  /* Move this line earlier, for architectures (like alpha) that issue \n+     SIGFPE on the first comparisons. */\n+#ifndef SIGNAL_SUPPRESS\n+  /* Some machines catches a SIGFPE when a NaN is compared.\n+     Let this test succeed o such machines.  */\n+  signal (SIGFPE, leave);\n+#endif\n+  /* NaN is an IEEE unordered operand.  All these test should be false.  */\n+  if (nan == nan)\n+    abort ();\n+  if (nan != x)\n+    x = 1.0;\n+  else\n+    abort ();\n+\n+  if (nan < x)\n+    abort ();\n+  if (nan > x)\n+    abort ();\n+  if (nan <= x)\n+    abort ();\n+  if (nan >= x)\n+    abort ();\n+  if (nan == x)\n+    abort ();\n+#endif\n+  exit (0);\n+}"}, {"sha": "8b182902d9b1683988f83fb06a3e5ab10b1b5c91", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/fp-cmp-3.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59159a105e300b3ed5f9a67a1b76947e91f338b4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59159a105e300b3ed5f9a67a1b76947e91f338b4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-3.c?ref=59159a105e300b3ed5f9a67a1b76947e91f338b4", "patch": "@@ -0,0 +1,41 @@\n+#include <signal.h>\n+\n+long double nan = 1.0l/0.0l - 1.0l/0.0l;\n+long double x = 1.0l;\n+\n+void leave ()\n+{\n+  exit (0);\n+}\n+\n+main ()\n+{\n+#if ! defined (__vax__) && ! defined (_CRAY)\n+  /* Move this line earlier, for architectures (like alpha) that issue \n+     SIGFPE on the first comparisons. */\n+#ifndef SIGNAL_SUPPRESS\n+  /* Some machines catches a SIGFPE when a NaN is compared.\n+     Let this test succeed o such machines.  */\n+  signal (SIGFPE, leave);\n+#endif\n+  /* NaN is an IEEE unordered operand.  All these test should be false.  */\n+  if (nan == nan)\n+    abort ();\n+  if (nan != x)\n+    x = 1.0;\n+  else\n+    abort ();\n+\n+  if (nan < x)\n+    abort ();\n+  if (nan > x)\n+    abort ();\n+  if (nan <= x)\n+    abort ();\n+  if (nan >= x)\n+    abort ();\n+  if (nan == x)\n+    abort ();\n+#endif\n+  exit (0);\n+}"}, {"sha": "07f2fd03a90ee2d008de225884d1b88ce60aa12b", "filename": "gcc/testsuite/gcc.c-torture/noncompile/920507-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59159a105e300b3ed5f9a67a1b76947e91f338b4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fnoncompile%2F920507-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59159a105e300b3ed5f9a67a1b76947e91f338b4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fnoncompile%2F920507-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fnoncompile%2F920507-1.c?ref=59159a105e300b3ed5f9a67a1b76947e91f338b4", "patch": "@@ -1 +1 @@\n-x(){register*a asm(\"fr1\");int*v[1]={a};}\n+x(){register*a asm(\"unknown_register\");int*v[1]={a};}"}]}