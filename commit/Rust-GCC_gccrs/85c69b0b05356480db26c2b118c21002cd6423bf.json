{"sha": "85c69b0b05356480db26c2b118c21002cd6423bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVjNjliMGIwNTM1NjQ4MGRiMjZjMmIxMThjMjEwMDJjZDY0MjNiZg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-11-25T08:53:22Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-11-25T08:53:22Z"}, "message": "re PR tree-optimization/68492 (internal compiler error: in vect_is_simple_use, at tree-vect-stmts.c:8266)\n\n2015-11-25  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/68492\n\t* tree-vect-slp.c (vect_build_slp_tree): Consistently build up\n\top from scalars after operand swapping.\n\nFrom-SVN: r230855", "tree": {"sha": "b9754ae937355742f3fb626740515cc07bb6f513", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9754ae937355742f3fb626740515cc07bb6f513"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85c69b0b05356480db26c2b118c21002cd6423bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85c69b0b05356480db26c2b118c21002cd6423bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85c69b0b05356480db26c2b118c21002cd6423bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85c69b0b05356480db26c2b118c21002cd6423bf/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "993a6bd98b1e9a31f453f3ac7a21550d94b5b601", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/993a6bd98b1e9a31f453f3ac7a21550d94b5b601", "html_url": "https://github.com/Rust-GCC/gccrs/commit/993a6bd98b1e9a31f453f3ac7a21550d94b5b601"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "28def7d3e3a391f766ce7d87960dc7631fee2c0a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c69b0b05356480db26c2b118c21002cd6423bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c69b0b05356480db26c2b118c21002cd6423bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85c69b0b05356480db26c2b118c21002cd6423bf", "patch": "@@ -1,3 +1,9 @@\n+2015-11-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/68492\n+\t* tree-vect-slp.c (vect_build_slp_tree): Consistently build up\n+\top from scalars after operand swapping.\n+\n 2015-11-25  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/68502"}, {"sha": "320248cff1c3ae7851b6bbf1bdb72a11b1688f82", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c69b0b05356480db26c2b118c21002cd6423bf/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c69b0b05356480db26c2b118c21002cd6423bf/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=85c69b0b05356480db26c2b118c21002cd6423bf", "patch": "@@ -1078,6 +1078,35 @@ vect_build_slp_tree (vec_info *vinfo,\n \t\t\t\t   tem, npermutes, &this_tree_size,\n \t\t\t\t   max_tree_size))\n \t    {\n+\t      /* If we have all children of child built up from scalars then\n+\t\t just throw that away and build it up this node from scalars.  */\n+\t      if (!SLP_TREE_CHILDREN (child).is_empty ())\n+\t\t{\n+\t\t  unsigned int j;\n+\t\t  slp_tree grandchild;\n+\n+\t\t  FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (child), j, grandchild)\n+\t\t    if (grandchild != NULL)\n+\t\t      break;\n+\t\t  if (!grandchild)\n+\t\t    {\n+\t\t      /* Roll back.  */\n+\t\t      *max_nunits = old_max_nunits;\n+\t\t      loads->truncate (old_nloads);\n+\t\t      FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (child), j, grandchild)\n+\t\t\tvect_free_slp_tree (grandchild);\n+\t\t      SLP_TREE_CHILDREN (child).truncate (0);\n+\n+\t\t      dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t\t       \"Building parent vector operands from \"\n+\t\t\t\t       \"scalars instead\\n\");\n+\t\t      oprnd_info->def_stmts = vNULL;\n+\t\t      vect_free_slp_tree (child);\n+\t\t      SLP_TREE_CHILDREN (*node).quick_push (NULL);\n+\t\t      continue;\n+\t\t    }\n+\t\t}\n+\n \t      /* ... so if successful we can apply the operand swapping\n \t\t to the GIMPLE IL.  This is necessary because for example\n \t\t vect_get_slp_defs uses operand indexes and thus expects"}]}