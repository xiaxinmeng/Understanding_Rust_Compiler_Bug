{"sha": "4bfab79a72afbe0f6232668fdfa4b56a6aaea2e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJmYWI3OWE3MmFmYmUwZjYyMzI2NjhmZGZhNGI1NmE2YWFlYTJlNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-04-24T20:05:35Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-18T09:08:35Z"}, "message": "[Ada] Small cleanup in constraint checking code for allocators\n\n2020-06-18  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch4.adb (Expand_Allocator_Expression): Apply constraint\n\tand predicate checks for the qualified expression on entry,\n\tfollowed by constraint and predicate checks for the allocator\n\titself, and return early if this results in a static error.\n\t(Expand_N_Allocator): Do not do the same here.  Instead apply\n\tconstraint and predicate checks for arrays in the subtype\n\tindication case.\n\t* exp_ch5.adb (Expand_N_Assignment_Statement): Do not apply\n\trange checks to allocators here.", "tree": {"sha": "0eb7817062f22f81cf24f5c5c5e18a4a7b35f83e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0eb7817062f22f81cf24f5c5c5e18a4a7b35f83e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bfab79a72afbe0f6232668fdfa4b56a6aaea2e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bfab79a72afbe0f6232668fdfa4b56a6aaea2e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bfab79a72afbe0f6232668fdfa4b56a6aaea2e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bfab79a72afbe0f6232668fdfa4b56a6aaea2e6/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b93d80bc8fc58c4ef746a8ddc699167c3ededfb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b93d80bc8fc58c4ef746a8ddc699167c3ededfb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b93d80bc8fc58c4ef746a8ddc699167c3ededfb9"}], "stats": {"total": 121, "additions": 58, "deletions": 63}, "files": [{"sha": "d421a59591bc8097e50629fe3bac889ed11e7fa5", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 58, "deletions": 43, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfab79a72afbe0f6232668fdfa4b56a6aaea2e6/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfab79a72afbe0f6232668fdfa4b56a6aaea2e6/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=4bfab79a72afbe0f6232668fdfa4b56a6aaea2e6", "patch": "@@ -99,7 +99,7 @@ package body Exp_Ch4 is\n \n    procedure Expand_Allocator_Expression (N : Node_Id);\n    --  Subsidiary to Expand_N_Allocator, for the case when the expression\n-   --  is a qualified expression or an aggregate.\n+   --  is a qualified expression.\n \n    procedure Expand_Array_Comparison (N : Node_Id);\n    --  This routine handles expansion of the comparison operators (N_Op_Lt,\n@@ -781,10 +781,10 @@ package body Exp_Ch4 is\n \n       --  Local variables\n \n-      Aggr_In_Place : constant Boolean   := Is_Delayed_Aggregate (Exp);\n       Indic         : constant Node_Id   := Subtype_Mark (Expression (N));\n       T             : constant Entity_Id := Entity (Indic);\n       Adj_Call      : Node_Id;\n+      Aggr_In_Place : Boolean;\n       Node          : Node_Id;\n       Tag_Assign    : Node_Id;\n       Temp          : Entity_Id;\n@@ -808,6 +808,44 @@ package body Exp_Ch4 is\n          return;\n       end if;\n \n+      --  If we have:\n+      --    type A is access T1;\n+      --    X : A := new T2'(...);\n+      --  T1 and T2 can be different subtypes, and we might need to check\n+      --  both constraints. First check against the type of the qualified\n+      --  expression.\n+\n+      Apply_Constraint_Check (Exp, T, No_Sliding => True);\n+\n+      Apply_Predicate_Check (Exp, T);\n+\n+      if Do_Range_Check (Exp) then\n+         Generate_Range_Check (Exp, T, CE_Range_Check_Failed);\n+      end if;\n+\n+      --  A check is also needed in cases where the designated subtype is\n+      --  constrained and differs from the subtype given in the qualified\n+      --  expression. Note that the check on the qualified expression does\n+      --  not allow sliding, but this check does (a relaxation from Ada 83).\n+\n+      if Is_Constrained (DesigT)\n+        and then not Subtypes_Statically_Match (T, DesigT)\n+      then\n+         Apply_Constraint_Check (Exp, DesigT, No_Sliding => False);\n+\n+         Apply_Predicate_Check (Exp, DesigT);\n+\n+         if Do_Range_Check (Exp) then\n+            Generate_Range_Check (Exp, DesigT, CE_Range_Check_Failed);\n+         end if;\n+      end if;\n+\n+      if Nkind (Exp) = N_Raise_Constraint_Error then\n+         Rewrite (N, New_Copy (Exp));\n+         Set_Etype (N, PtrT);\n+         return;\n+      end if;\n+\n       --  In the case of an Ada 2012 allocator whose initial value comes from a\n       --  function call, pass \"the accessibility level determined by the point\n       --  of call\" (AI05-0234) to the function. Conceptually, this belongs in\n@@ -837,6 +875,8 @@ package body Exp_Ch4 is\n          end;\n       end if;\n \n+      Aggr_In_Place := Is_Delayed_Aggregate (Exp);\n+\n       --  Case of tagged type or type requiring finalization\n \n       if Is_Tagged_Type (T) or else Needs_Finalization (T) then\n@@ -1218,35 +1258,6 @@ package body Exp_Ch4 is\n       else\n          Build_Allocate_Deallocate_Proc (N, True);\n \n-         --  If we have:\n-         --    type A is access T1;\n-         --    X : A := new T2'(...);\n-         --  T1 and T2 can be different subtypes, and we might need to check\n-         --  both constraints. First check against the type of the qualified\n-         --  expression.\n-\n-         Apply_Constraint_Check (Exp, T, No_Sliding => True);\n-\n-         if Do_Range_Check (Exp) then\n-            Generate_Range_Check (Exp, DesigT, CE_Range_Check_Failed);\n-         end if;\n-\n-         --  A check is also needed in cases where the designated subtype is\n-         --  constrained and differs from the subtype given in the qualified\n-         --  expression. Note that the check on the qualified expression does\n-         --  not allow sliding, but this check does (a relaxation from Ada 83).\n-\n-         if Is_Constrained (DesigT)\n-           and then not Subtypes_Statically_Match (T, DesigT)\n-         then\n-            Apply_Constraint_Check\n-              (Exp, DesigT, No_Sliding => False);\n-\n-            if Do_Range_Check (Exp) then\n-               Generate_Range_Check (Exp, DesigT, CE_Range_Check_Failed);\n-            end if;\n-         end if;\n-\n          --  For an access to unconstrained packed array, GIGI needs to see an\n          --  expression with a constrained subtype in order to compute the\n          --  proper size for the allocator.\n@@ -4796,20 +4807,9 @@ package body Exp_Ch4 is\n                New_Occurrence_Of (RTE (RE_Check_Standard_Allocator), Loc)));\n       end if;\n \n-      --  Handle case of qualified expression (other than optimization above).\n-      --  First apply constraint checks, because the bounds or discriminants\n-      --  in the aggregate might not match the subtype mark in the allocator.\n+      --  Handle case of qualified expression (other than optimization above)\n \n       if Nkind (Expression (N)) = N_Qualified_Expression then\n-         declare\n-            Exp : constant Node_Id   := Expression (Expression (N));\n-            Typ : constant Entity_Id := Etype (Expression (N));\n-\n-         begin\n-            Apply_Constraint_Check (Exp, Typ);\n-            Apply_Predicate_Check  (Exp, Typ);\n-         end;\n-\n          Expand_Allocator_Expression (N);\n          return;\n       end if;\n@@ -4842,6 +4842,21 @@ package body Exp_Ch4 is\n          Temp_Type : Entity_Id;\n \n       begin\n+         --  Apply constraint checks against designated subtype (RM 4.8(10/2)).\n+         --  Discriminant checks will be generated by the expansion below.\n+\n+         if Is_Array_Type (Dtyp) then\n+            Apply_Constraint_Check (Expression (N), Dtyp, No_Sliding => True);\n+\n+            Apply_Predicate_Check (Expression (N), Dtyp);\n+\n+            if Nkind (Expression (N)) = N_Raise_Constraint_Error then\n+               Rewrite (N, New_Copy (Expression (N)));\n+               Set_Etype (N, PtrT);\n+               return;\n+            end if;\n+         end if;\n+\n          if No_Initialization (N) then\n \n             --  Even though this might be a simple allocation, create a custom"}, {"sha": "db2ab18afb445abf4547e8753d4dcbb9fe64a95e", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfab79a72afbe0f6232668fdfa4b56a6aaea2e6/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfab79a72afbe0f6232668fdfa4b56a6aaea2e6/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=4bfab79a72afbe0f6232668fdfa4b56a6aaea2e6", "patch": "@@ -2447,26 +2447,6 @@ package body Exp_Ch5 is\n             if Is_Constrained (Etype (Lhs)) then\n                Apply_Length_Check (Rhs, Etype (Lhs));\n             end if;\n-\n-            if Nkind (Rhs) = N_Allocator then\n-               declare\n-                  Target_Typ : constant Entity_Id := Etype (Expression (Rhs));\n-                  C_Es       : Check_Result;\n-\n-               begin\n-                  C_Es :=\n-                    Get_Range_Checks\n-                      (Lhs,\n-                       Target_Typ,\n-                       Etype (Designated_Type (Etype (Lhs))));\n-\n-                  Insert_Range_Checks\n-                    (C_Es,\n-                     N,\n-                     Target_Typ,\n-                     Sloc (Lhs));\n-               end;\n-            end if;\n          end if;\n \n       --  Apply range check for access type case"}]}