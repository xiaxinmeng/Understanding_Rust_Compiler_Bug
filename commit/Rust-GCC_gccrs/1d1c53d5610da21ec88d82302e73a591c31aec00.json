{"sha": "1d1c53d5610da21ec88d82302e73a591c31aec00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQxYzUzZDU2MTBkYTIxZWM4OGQ4MjMwMmU3M2E1OTFjMzFhZWMwMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-05-17T11:52:06Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-05-17T11:52:06Z"}, "message": "stl_algobase.h (mismatch): Move...\n\n2007-05-17  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_algobase.h (mismatch): Move...\n\t* include/bits/stl_algo.h: ... here.\n\nFrom-SVN: r124792", "tree": {"sha": "4d4316fd4d880fc4ba7367dade34e45c04b68e01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d4316fd4d880fc4ba7367dade34e45c04b68e01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d1c53d5610da21ec88d82302e73a591c31aec00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d1c53d5610da21ec88d82302e73a591c31aec00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d1c53d5610da21ec88d82302e73a591c31aec00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d1c53d5610da21ec88d82302e73a591c31aec00/comments", "author": null, "committer": null, "parents": [{"sha": "95440e3ee04b6297d2747d5d989c39ea8ca3905b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95440e3ee04b6297d2747d5d989c39ea8ca3905b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95440e3ee04b6297d2747d5d989c39ea8ca3905b"}], "stats": {"total": 137, "additions": 71, "deletions": 66}, "files": [{"sha": "6a1f923d6e713a81312dc34ed73ecefb8287159e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d1c53d5610da21ec88d82302e73a591c31aec00/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d1c53d5610da21ec88d82302e73a591c31aec00/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1d1c53d5610da21ec88d82302e73a591c31aec00", "patch": "@@ -1,3 +1,8 @@\n+2007-05-17  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_algobase.h (mismatch): Move...\n+\t* include/bits/stl_algo.h: ... here.\n+\n 2007-05-17  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/tr1/cmath: Guard special math with"}, {"sha": "1d743ab94b4bd9e3a0a9f3ac3e617ce9e2395ffb", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d1c53d5610da21ec88d82302e73a591c31aec00/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d1c53d5610da21ec88d82302e73a591c31aec00/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=1d1c53d5610da21ec88d82302e73a591c31aec00", "patch": "@@ -449,6 +449,72 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return __n;\n     }\n \n+  /**\n+   *  @brief Finds the places in ranges which don't match.\n+   *  @param  first1  An input iterator.\n+   *  @param  last1   An input iterator.\n+   *  @param  first2  An input iterator.\n+   *  @return   A pair of iterators pointing to the first mismatch.\n+   *\n+   *  This compares the elements of two ranges using @c == and returns a pair\n+   *  of iterators.  The first iterator points into the first range, the\n+   *  second iterator points into the second range, and the elements pointed\n+   *  to by the iterators are not equal.\n+  */\n+  template<typename _InputIterator1, typename _InputIterator2>\n+    pair<_InputIterator1, _InputIterator2>\n+    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,\n+\t     _InputIterator2 __first2)\n+    {\n+      // concept requirements\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n+      __glibcxx_function_requires(_EqualOpConcept<\n+\t    typename iterator_traits<_InputIterator1>::value_type,\n+\t    typename iterator_traits<_InputIterator2>::value_type>)\n+      __glibcxx_requires_valid_range(__first1, __last1);\n+\n+      while (__first1 != __last1 && *__first1 == *__first2)\n+        {\n+\t  ++__first1;\n+\t  ++__first2;\n+        }\n+      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);\n+    }\n+\n+  /**\n+   *  @brief Finds the places in ranges which don't match.\n+   *  @param  first1  An input iterator.\n+   *  @param  last1   An input iterator.\n+   *  @param  first2  An input iterator.\n+   *  @param  binary_pred  A binary predicate @link s20_3_1_base functor@endlink.\n+   *  @return   A pair of iterators pointing to the first mismatch.\n+   *\n+   *  This compares the elements of two ranges using the binary_pred\n+   *  parameter, and returns a pair\n+   *  of iterators.  The first iterator points into the first range, the\n+   *  second iterator points into the second range, and the elements pointed\n+   *  to by the iterators are not equal.\n+  */\n+  template<typename _InputIterator1, typename _InputIterator2,\n+\t   typename _BinaryPredicate>\n+    pair<_InputIterator1, _InputIterator2>\n+    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,\n+\t     _InputIterator2 __first2, _BinaryPredicate __binary_pred)\n+    {\n+      // concept requirements\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n+      __glibcxx_requires_valid_range(__first1, __last1);\n+\n+      while (__first1 != __last1 && bool(__binary_pred(*__first1, *__first2)))\n+        {\n+\t  ++__first1;\n+\t  ++__first2;\n+        }\n+      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);\n+    }\n+\n   /**\n    *  @brief Search a sequence for a matching sub-sequence.\n    *  @param  first1  A forward iterator."}, {"sha": "f9f58373affdb0a5bb47614cdcd3f64ac6663b42", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d1c53d5610da21ec88d82302e73a591c31aec00/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d1c53d5610da21ec88d82302e73a591c31aec00/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=1d1c53d5610da21ec88d82302e73a591c31aec00", "patch": "@@ -678,72 +678,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t   __value));\n     }\n \n-  /**\n-   *  @brief Finds the places in ranges which don't match.\n-   *  @param  first1  An input iterator.\n-   *  @param  last1   An input iterator.\n-   *  @param  first2  An input iterator.\n-   *  @return   A pair of iterators pointing to the first mismatch.\n-   *\n-   *  This compares the elements of two ranges using @c == and returns a pair\n-   *  of iterators.  The first iterator points into the first range, the\n-   *  second iterator points into the second range, and the elements pointed\n-   *  to by the iterators are not equal.\n-  */\n-  template<typename _InputIterator1, typename _InputIterator2>\n-    pair<_InputIterator1, _InputIterator2>\n-    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,\n-\t     _InputIterator2 __first2)\n-    {\n-      // concept requirements\n-      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n-      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n-      __glibcxx_function_requires(_EqualOpConcept<\n-\t    typename iterator_traits<_InputIterator1>::value_type,\n-\t    typename iterator_traits<_InputIterator2>::value_type>)\n-      __glibcxx_requires_valid_range(__first1, __last1);\n-\n-      while (__first1 != __last1 && *__first1 == *__first2)\n-        {\n-\t  ++__first1;\n-\t  ++__first2;\n-        }\n-      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);\n-    }\n-\n-  /**\n-   *  @brief Finds the places in ranges which don't match.\n-   *  @param  first1  An input iterator.\n-   *  @param  last1   An input iterator.\n-   *  @param  first2  An input iterator.\n-   *  @param  binary_pred  A binary predicate @link s20_3_1_base functor@endlink.\n-   *  @return   A pair of iterators pointing to the first mismatch.\n-   *\n-   *  This compares the elements of two ranges using the binary_pred\n-   *  parameter, and returns a pair\n-   *  of iterators.  The first iterator points into the first range, the\n-   *  second iterator points into the second range, and the elements pointed\n-   *  to by the iterators are not equal.\n-  */\n-  template<typename _InputIterator1, typename _InputIterator2,\n-\t   typename _BinaryPredicate>\n-    pair<_InputIterator1, _InputIterator2>\n-    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,\n-\t     _InputIterator2 __first2, _BinaryPredicate __binary_pred)\n-    {\n-      // concept requirements\n-      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n-      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n-      __glibcxx_requires_valid_range(__first1, __last1);\n-\n-      while (__first1 != __last1 && bool(__binary_pred(*__first1, *__first2)))\n-        {\n-\t  ++__first1;\n-\t  ++__first2;\n-        }\n-      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);\n-    }\n-\n \n   template<bool _BoolType>\n     struct __equal"}]}