{"sha": "0f7fa3d01f482328963c1bbfcd1ab64a42531c42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY3ZmEzZDAxZjQ4MjMyODk2M2MxYmJmY2QxYWI2NGE0MjUzMWM0Mg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-03-10T13:36:26Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-03-10T13:36:26Z"}, "message": "i386.h (DBX_REGISTER_NUMBER): Return proper values for 64bits.\n\n\t* i386.h (DBX_REGISTER_NUMBER): Return proper values for 64bits.\n\t(dbx64_register_map): Declare.\n\t(RETURN_ADDR_RTX): Fix for 64bit.\n\t(DWARF_FRAME_RETURN_COLUMN): Set to 16 for 64bit.\n\t(INCOMING_FRAME_SP_OFFSET): Set to 8.\n\t* i386.c (dbx64_register_map): New global array.\n\t* beos-elf.h, freebsd.h, i386-interix.h, i386elf.h,\n\tlinux.h (DBX_REGISTER_REGNUMBER): Use dbx64_register_map\n\tfor 64bits.\n\nFrom-SVN: r40365", "tree": {"sha": "6858ad957520b91ff57e23721436c4bbdacca7b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6858ad957520b91ff57e23721436c4bbdacca7b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f7fa3d01f482328963c1bbfcd1ab64a42531c42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f7fa3d01f482328963c1bbfcd1ab64a42531c42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f7fa3d01f482328963c1bbfcd1ab64a42531c42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f7fa3d01f482328963c1bbfcd1ab64a42531c42/comments", "author": null, "committer": null, "parents": [{"sha": "2251fd7866f9545630581d3c6b846e82481373c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2251fd7866f9545630581d3c6b846e82481373c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2251fd7866f9545630581d3c6b846e82481373c1"}], "stats": {"total": 51, "additions": 41, "deletions": 10}, "files": [{"sha": "05985746fed682f2812bef86a681c434d4db9611", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7fa3d01f482328963c1bbfcd1ab64a42531c42/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7fa3d01f482328963c1bbfcd1ab64a42531c42/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f7fa3d01f482328963c1bbfcd1ab64a42531c42", "patch": "@@ -1,3 +1,15 @@\n+Sat Mar 10 14:34:59 CET 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.h (DBX_REGISTER_NUMBER): Return proper values for 64bits.\n+\t(dbx64_register_map): Declare.\n+\t(RETURN_ADDR_RTX): Fix for 64bit.\n+\t(DWARF_FRAME_RETURN_COLUMN): Set to 16 for 64bit.\n+\t(INCOMING_FRAME_SP_OFFSET): Set to 8.\n+\t* i386.c (dbx64_register_map): New global array.\n+\t* beos-elf.h, freebsd.h, i386-interix.h, i386elf.h,\n+\tlinux.h (DBX_REGISTER_REGNUMBER): Use dbx64_register_map\n+\tfor 64bits.\n+\n 2001-03-10  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cppfiles.c (search_from): Use lbasename."}, {"sha": "5b980b609a8ca2a97117fba9abfb02f528d38a22", "filename": "gcc/config/i386/beos-elf.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7fa3d01f482328963c1bbfcd1ab64a42531c42/gcc%2Fconfig%2Fi386%2Fbeos-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7fa3d01f482328963c1bbfcd1ab64a42531c42/gcc%2Fconfig%2Fi386%2Fbeos-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbeos-elf.h?ref=0f7fa3d01f482328963c1bbfcd1ab64a42531c42", "patch": "@@ -49,7 +49,8 @@ Boston, MA 02111-1307, USA.  */\n #define JUMP_TABLES_IN_TEXT_SECTION (flag_pic)\n \n #undef DBX_REGISTER_NUMBER\n-#define DBX_REGISTER_NUMBER(n)  svr4_dbx_register_map[n]\n+#define DBX_REGISTER_NUMBER(n) \\\n+  (TARGET_64BIT ? dbx64_register_map[n] : svr4_dbx_register_map[n])\n \n /* Output assembler code to FILE to increment profiler label # LABELNO\n    for profiling a function entry.  */"}, {"sha": "6ae623507c408e34469958817059778fd7c8bc1e", "filename": "gcc/config/i386/freebsd.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7fa3d01f482328963c1bbfcd1ab64a42531c42/gcc%2Fconfig%2Fi386%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7fa3d01f482328963c1bbfcd1ab64a42531c42/gcc%2Fconfig%2Fi386%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffreebsd.h?ref=0f7fa3d01f482328963c1bbfcd1ab64a42531c42", "patch": "@@ -50,7 +50,8 @@ Boston, MA 02111-1307, USA.  */\n #define JUMP_TABLES_IN_TEXT_SECTION (flag_pic)\n \n #undef DBX_REGISTER_NUMBER\n-#define DBX_REGISTER_NUMBER(n)  svr4_dbx_register_map[n]\n+#define DBX_REGISTER_NUMBER(n) \\\n+  (TARGET_64BIT ? dbx64_register_map[n] : svr4_dbx_register_map[n])\n \n #undef  NO_PROFILE_COUNTERS\n #define NO_PROFILE_COUNTERS"}, {"sha": "69486a544ffdc361fb240e78f00e7a168297b0ef", "filename": "gcc/config/i386/i386-interix.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7fa3d01f482328963c1bbfcd1ab64a42531c42/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7fa3d01f482328963c1bbfcd1ab64a42531c42/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix.h?ref=0f7fa3d01f482328963c1bbfcd1ab64a42531c42", "patch": "@@ -432,7 +432,8 @@ while (0)\n \n #undef DBX_REGISTER_NUMBER\n #define DBX_REGISTER_NUMBER(n) \\\n-((n) == 0 ? 0 \\\n+(TARGET_64BIT ? dbx64_register_map[n] \\\n+ : (n) == 0 ? 0 \\\n  : (n) == 1 ? 2 \\\n  : (n) == 2 ? 1 \\\n  : (n) == 3 ? 3 \\"}, {"sha": "5667c1cc40a67822ffd79214bba303111ab6c3a7", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7fa3d01f482328963c1bbfcd1ab64a42531c42/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7fa3d01f482328963c1bbfcd1ab64a42531c42/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0f7fa3d01f482328963c1bbfcd1ab64a42531c42", "patch": "@@ -353,6 +353,18 @@ int const dbx_register_map[FIRST_PSEUDO_REGISTER] =\n   29, 30, 31, 32, 33, 34, 35, 36,       /* MMX */\n };\n \n+/* The \"default\" register map used in 64bit mode.  */\n+int const dbx64_register_map[FIRST_PSEUDO_REGISTER] =\n+{\n+  0, 1, 2, 3, 4, 5, 6, 7,\t\t/* general regs */\n+  33, 34, 35, 36, 37, 38, 39, 40\t/* fp regs */\n+  -1, -1, -1, -1, -1,\t\t\t/* arg, flags, fpsr, dir, frame */\n+  17, 18, 19, 20, 21, 22, 23, 24,\t/* SSE */\n+  41, 42, 43, 44, 45, 46, 47, 48,       /* MMX */\n+  8,9,10,11,12,13,14,15,\t\t/* extended integer registers */\n+  25, 26, 27, 28, 29, 30, 31, 32,\t/* extended SSE registers */\n+};\n+\n /* Define the register numbers to be used in Dwarf debugging information.\n    The SVR4 reference port C compiler uses the following register numbers\n    in its Dwarf output code:"}, {"sha": "9afd9daeac0a86103097a65dad4a0e45ece0cc0d", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7fa3d01f482328963c1bbfcd1ab64a42531c42/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7fa3d01f482328963c1bbfcd1ab64a42531c42/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=0f7fa3d01f482328963c1bbfcd1ab64a42531c42", "patch": "@@ -2718,9 +2718,11 @@ number as al, and ax.\n \n /* How to renumber registers for dbx and gdb.  */\n \n-#define DBX_REGISTER_NUMBER(n)  dbx_register_map[n]\n+#define DBX_REGISTER_NUMBER(n) \\\n+  (TARGET_64BIT ? dbx64_register_map[n] : dbx_register_map[n])\n \n extern int const dbx_register_map[FIRST_PSEUDO_REGISTER];\n+extern int const dbx64_register_map[FIRST_PSEUDO_REGISTER];\n extern int const svr4_dbx_register_map[FIRST_PSEUDO_REGISTER];\n \n /* Before the prologue, RA is at 0(%esp).  */\n@@ -2730,14 +2732,14 @@ extern int const svr4_dbx_register_map[FIRST_PSEUDO_REGISTER];\n /* After the prologue, RA is at -4(AP) in the current frame.  */\n #define RETURN_ADDR_RTX(COUNT, FRAME)\t\t\t\t\t\\\n   ((COUNT) == 0\t\t\t\t\t\t\t\t\\\n-   ? gen_rtx_MEM (Pmode, plus_constant (arg_pointer_rtx, -4))\\\n-   : gen_rtx_MEM (Pmode, plus_constant (FRAME, 4)))\n+   ? gen_rtx_MEM (Pmode, plus_constant (arg_pointer_rtx, TARGET_64BIT ? -8 : -4))\\\n+   : gen_rtx_MEM (Pmode, plus_constant (FRAME, TARGET_64BIT ? 8 : 4)))\n \n /* PC is dbx register 8; let's use that column for RA. */\n-#define DWARF_FRAME_RETURN_COLUMN \t8\n+#define DWARF_FRAME_RETURN_COLUMN \t(TARGET_64BIT ? 16 : 8)\n \n /* Before the prologue, the top of the frame is at 4(%esp).  */\n-#define INCOMING_FRAME_SP_OFFSET 4\n+#define INCOMING_FRAME_SP_OFFSET UNITS_PER_WORD\n \n /* This is how to output the definition of a user-level label named NAME,\n    such as the label on a static function or variable NAME.  */"}, {"sha": "730761ff79cd6a761ecb1cd3e9efa7b817268b68", "filename": "gcc/config/i386/i386elf.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7fa3d01f482328963c1bbfcd1ab64a42531c42/gcc%2Fconfig%2Fi386%2Fi386elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7fa3d01f482328963c1bbfcd1ab64a42531c42/gcc%2Fconfig%2Fi386%2Fi386elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386elf.h?ref=0f7fa3d01f482328963c1bbfcd1ab64a42531c42", "patch": "@@ -112,7 +112,8 @@ do { long value[3];\t\t\t\t\t\t\t\\\n   } while (0)\n \n #undef DBX_REGISTER_NUMBER\n-#define DBX_REGISTER_NUMBER(n)  svr4_dbx_register_map[n]\n+#define DBX_REGISTER_NUMBER(n) \\\n+  (TARGET_64BIT ? dbx64_register_map[n] : svr4_dbx_register_map[n])\n \n /* The routine used to output sequences of byte values.  We use a special\n    version of this for most svr4 targets because doing so makes the"}, {"sha": "34e416cc49b7376b76781b561267824614e30fe4", "filename": "gcc/config/i386/linux.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7fa3d01f482328963c1bbfcd1ab64a42531c42/gcc%2Fconfig%2Fi386%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7fa3d01f482328963c1bbfcd1ab64a42531c42/gcc%2Fconfig%2Fi386%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux.h?ref=0f7fa3d01f482328963c1bbfcd1ab64a42531c42", "patch": "@@ -56,7 +56,8 @@ Boston, MA 02111-1307, USA.  */\n #define JUMP_TABLES_IN_TEXT_SECTION (flag_pic)\n \n #undef DBX_REGISTER_NUMBER\n-#define DBX_REGISTER_NUMBER(n)  svr4_dbx_register_map[n]\n+#define DBX_REGISTER_NUMBER(n) \\\n+  (TARGET_64BIT ? dbx64_register_map[n] : svr4_dbx_register_map[n])\n \n /* Output assembler code to FILE to call the profiler.\n    To the best of my knowledge, no Linux libc has required the label"}]}