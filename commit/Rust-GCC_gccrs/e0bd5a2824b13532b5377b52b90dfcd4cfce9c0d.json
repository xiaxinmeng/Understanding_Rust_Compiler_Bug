{"sha": "e0bd5a2824b13532b5377b52b90dfcd4cfce9c0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBiZDVhMjgyNGIxMzUzMmI1Mzc3YjUyYjkwZGZjZDRjZmNlOWMwZA==", "commit": {"author": {"name": "Pat Haugen", "email": "pthaugen@us.ibm.com", "date": "2017-08-30T18:36:12Z"}, "committer": {"name": "Pat Haugen", "email": "pthaugen@gcc.gnu.org", "date": "2017-08-30T18:36:12Z"}, "message": "rs6000.c (rs6000_emit_prologue_move_from_cr): Rename from rs6000_emit_move_from_cr and call renamed function.\n\n\t* config/rs6000/rs6000.c (rs6000_emit_prologue_move_from_cr): Rename from\n\trs6000_emit_move_from_cr and call renamed function.\n\t(rs6000_emit_prologue): Call renamed functions.\n\t* config/rs6000/rs6000.md (prologue_movesi_from_cr): Rename from\n\tmovesi_from_cr, remove volatile CRs.\n\n\t* gcc.target/powerpc/cr_shrink-wrap.c: New.\n\nFrom-SVN: r251543", "tree": {"sha": "614654caffeff2f30cfb53cca282e3f2c90a20ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/614654caffeff2f30cfb53cca282e3f2c90a20ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0bd5a2824b13532b5377b52b90dfcd4cfce9c0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0bd5a2824b13532b5377b52b90dfcd4cfce9c0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0bd5a2824b13532b5377b52b90dfcd4cfce9c0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0bd5a2824b13532b5377b52b90dfcd4cfce9c0d/comments", "author": null, "committer": null, "parents": [{"sha": "5e2eef484ba7f8a8f023adf14f1b3de4d4e6c12b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e2eef484ba7f8a8f023adf14f1b3de4d4e6c12b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e2eef484ba7f8a8f023adf14f1b3de4d4e6c12b"}], "stats": {"total": 51, "additions": 40, "deletions": 11}, "files": [{"sha": "37d888fa0392180489be0a0ba2e29b6d16fea19b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bd5a2824b13532b5377b52b90dfcd4cfce9c0d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bd5a2824b13532b5377b52b90dfcd4cfce9c0d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0bd5a2824b13532b5377b52b90dfcd4cfce9c0d", "patch": "@@ -1,3 +1,11 @@\n+2017-08-30  Pat Haugen  <pthaugen@us.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_emit_prologue_move_from_cr): Rename from\n+\trs6000_emit_move_from_cr and call renamed function.\n+\t(rs6000_emit_prologue): Call renamed functions.\n+\t* config/rs6000/rs6000.md (prologue_movesi_from_cr): Rename from\n+\tmovesi_from_cr, remove volatile CRs.\n+\n 2017-08-30  Jon Beniston  <jon@beniston.com>\n \t    Richard Biener  <rguenther@suse.de>\n "}, {"sha": "cf744d8bf620b8b6f26845475b7667340baa0246", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bd5a2824b13532b5377b52b90dfcd4cfce9c0d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bd5a2824b13532b5377b52b90dfcd4cfce9c0d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=e0bd5a2824b13532b5377b52b90dfcd4cfce9c0d", "patch": "@@ -26097,10 +26097,14 @@ rs6000_emit_savres_rtx (rs6000_stack_t *info,\n   return insn;\n }\n \n-/* Emit code to store CR fields that need to be saved into REG.  */\n+/* Emit prologue code to store CR fields that need to be saved into REG.  This\n+   function should only be called when moving the non-volatile CRs to REG, it\n+   is not a general purpose routine to move the entire set of CRs to REG.\n+   Specifically, gen_prologue_movesi_from_cr() does not contain uses of the\n+   volatile CRs.  */\n \n static void\n-rs6000_emit_move_from_cr (rtx reg)\n+rs6000_emit_prologue_move_from_cr (rtx reg)\n {\n   /* Only the ELFv2 ABI allows storing only selected fields.  */\n   if (DEFAULT_ABI == ABI_ELFv2 && TARGET_MFCRF)\n@@ -26131,7 +26135,7 @@ rs6000_emit_move_from_cr (rtx reg)\n \t as well, using logical operations to combine the values.  */\n     }\n \n-  emit_insn (gen_movesi_from_cr (reg));\n+  emit_insn (gen_prologue_movesi_from_cr (reg));\n }\n \n /* Return whether the split-stack arg pointer (r12) is used.  */\n@@ -26871,7 +26875,7 @@ rs6000_emit_prologue (void)\n     {\n       cr_save_rtx = gen_rtx_REG (SImode, cr_save_regno);\n       START_USE (cr_save_regno);\n-      rs6000_emit_move_from_cr (cr_save_rtx);\n+      rs6000_emit_prologue_move_from_cr (cr_save_rtx);\n     }\n \n   /* Do any required saving of fpr's.  If only one or two to save, do\n@@ -27109,7 +27113,7 @@ rs6000_emit_prologue (void)\n \t{\n \t  START_USE (0);\n \t  cr_save_rtx = gen_rtx_REG (SImode, 0);\n-\t  rs6000_emit_move_from_cr (cr_save_rtx);\n+\t  rs6000_emit_prologue_move_from_cr (cr_save_rtx);\n \t}\n \n       /* Saving CR requires a two-instruction sequence: one instruction\n@@ -27196,7 +27200,7 @@ rs6000_emit_prologue (void)\n       /* ??? We might get better performance by using multiple mfocrf\n \t instructions.  */\n       crsave = gen_rtx_REG (SImode, 0);\n-      emit_insn (gen_movesi_from_cr (crsave));\n+      emit_insn (gen_prologue_movesi_from_cr (crsave));\n \n       for (i = 0; i < 8; i++)\n \tif (!call_used_regs[CR0_REGNO + i])"}, {"sha": "f67e949a3a3dae0af80fd2ee6116a08a6e1a30f4", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bd5a2824b13532b5377b52b90dfcd4cfce9c0d/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bd5a2824b13532b5377b52b90dfcd4cfce9c0d/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=e0bd5a2824b13532b5377b52b90dfcd4cfce9c0d", "patch": "@@ -13032,12 +13032,14 @@\n }\"\n   [(set_attr \"type\" \"mfcrf\")])\n \n-(define_insn \"movesi_from_cr\"\n+;; Don't include the volatile CRs since their values are not used wrt CR save\n+;; in the prologue and doing so prevents shrink-wrapping because we can't move the\n+;; prologue past an insn (early exit test) that defines a register used in the\n+;; prologue.\n+(define_insn \"prologue_movesi_from_cr\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:SI [(reg:CC CR0_REGNO) (reg:CC CR1_REGNO)\n-\t\t    (reg:CC CR2_REGNO) (reg:CC CR3_REGNO)\n-\t\t    (reg:CC CR4_REGNO) (reg:CC CR5_REGNO)\n-\t\t    (reg:CC CR6_REGNO) (reg:CC CR7_REGNO)]\n+        (unspec:SI [(reg:CC CR2_REGNO) (reg:CC CR3_REGNO)\n+\t\t    (reg:CC CR4_REGNO)]\n \t\t   UNSPEC_MOVESI_FROM_CR))]\n   \"\"\n   \"mfcr %0\""}, {"sha": "331b6dd29f83732f183d5d379290732ffee1b0a6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bd5a2824b13532b5377b52b90dfcd4cfce9c0d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bd5a2824b13532b5377b52b90dfcd4cfce9c0d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e0bd5a2824b13532b5377b52b90dfcd4cfce9c0d", "patch": "@@ -1,3 +1,7 @@\n+2017-08-30  Pat Haugen  <pthaugen@us.ibm.com>\n+\n+\t* gcc.target/powerpc/cr_shrink-wrap.c: New.\n+\n 2017-08-30  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/82015"}, {"sha": "d16b3fdf23b23922a415905190f3c54fa43243cd", "filename": "gcc/testsuite/gcc.target/powerpc/cr_shrink-wrap.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bd5a2824b13532b5377b52b90dfcd4cfce9c0d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcr_shrink-wrap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bd5a2824b13532b5377b52b90dfcd4cfce9c0d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcr_shrink-wrap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcr_shrink-wrap.c?ref=e0bd5a2824b13532b5377b52b90dfcd4cfce9c0d", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-rtl-pro_and_epilogue\" } */\n+\n+void foo(int i)\n+{\n+  if (i > 0)\n+    /* Non-volatile CR kill on true path should not prevent shrink-wrap.  */\n+    asm (\"\" : : : \"cr2\", \"cr3\");\n+}\n+\n+/* { dg-final { scan-rtl-dump-times \"Performing shrink-wrapping\" 1 \"pro_and_epilogue\" } } */"}]}