{"sha": "92390dd17128b1e4f4c456e5185566bbe5ee35a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIzOTBkZDE3MTI4YjFlNGY0YzQ1NmU1MTg1NTY2YmJlNWVlMzVhNA==", "commit": {"author": {"name": "Paolo Bonzini", "email": "pbonzini@redhat.com", "date": "2012-11-27T20:29:15Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2012-11-27T20:29:15Z"}, "message": "re PR rtl-optimization/55489 (insane PRE memory usage with PIE (translate.i))\n\n2012-11-27  Paolo Bonzini  <pbonzini@redhat.com>\n\n\tPR rtl-optimization/55489\n\t* gcse.c (compute_transp): Precompute a canonical version\n\tof XEXP (x, 0), and pass it to canon_true_dependence.\n\n\t* alias.c (init_alias_analysis): Fix allocation of reg_known_value.\n\nFrom-SVN: r193868", "tree": {"sha": "436c983a432ffc86e3f81d2f07a71c8635c1bf4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/436c983a432ffc86e3f81d2f07a71c8635c1bf4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92390dd17128b1e4f4c456e5185566bbe5ee35a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92390dd17128b1e4f4c456e5185566bbe5ee35a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92390dd17128b1e4f4c456e5185566bbe5ee35a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92390dd17128b1e4f4c456e5185566bbe5ee35a4/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "18e1fd7565cd40baf448858cb069d25b99338a08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18e1fd7565cd40baf448858cb069d25b99338a08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18e1fd7565cd40baf448858cb069d25b99338a08"}], "stats": {"total": 52, "additions": 32, "deletions": 20}, "files": [{"sha": "3efad5a1700dc7c17ddf79114455a32a3ae440a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92390dd17128b1e4f4c456e5185566bbe5ee35a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92390dd17128b1e4f4c456e5185566bbe5ee35a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92390dd17128b1e4f4c456e5185566bbe5ee35a4", "patch": "@@ -1,3 +1,11 @@\n+2012-11-27  Paolo Bonzini  <pbonzini@redhat.com>\n+\n+\tPR rtl-optimization/55489\n+\t* gcse.c (compute_transp): Precompute a canonical version\n+\tof XEXP (x, 0), and pass it to canon_true_dependence.\n+\n+\t* alias.c (init_alias_analysis): Fix allocation of reg_known_value.\n+\n 2012-11-27  Diego Novillo  <dnovillo@google.com>\n \n \t* vec.h: Replace 'class vec' with 'struct vec' everywhere."}, {"sha": "130c1a4950badc1372f71991640372286f6d6c5e", "filename": "gcc/alias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92390dd17128b1e4f4c456e5185566bbe5ee35a4/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92390dd17128b1e4f4c456e5185566bbe5ee35a4/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=92390dd17128b1e4f4c456e5185566bbe5ee35a4", "patch": "@@ -2808,7 +2808,7 @@ init_alias_analysis (void)\n \n   timevar_push (TV_ALIAS_ANALYSIS);\n \n-  vec_alloc (reg_known_value, maxreg - FIRST_PSEUDO_REGISTER);\n+  vec_safe_grow_cleared (reg_known_value, maxreg - FIRST_PSEUDO_REGISTER);\n   reg_known_equiv_p = sbitmap_alloc (maxreg - FIRST_PSEUDO_REGISTER);\n \n   /* If we have memory allocated from the previous run, use it.  */"}, {"sha": "ee45b6544f96733065c43fa8014b972f952c99ff", "filename": "gcc/gcse.c", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92390dd17128b1e4f4c456e5185566bbe5ee35a4/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92390dd17128b1e4f4c456e5185566bbe5ee35a4/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=92390dd17128b1e4f4c456e5185566bbe5ee35a4", "patch": "@@ -1677,6 +1677,10 @@ compute_transp (const_rtx x, int indx, sbitmap *bmap)\n \t{\n \t  bitmap_iterator bi;\n \t  unsigned bb_index;\n+\t  rtx x_addr;\n+\n+\t  x_addr = get_addr (XEXP (x, 0));\n+\t  x_addr = canon_rtx (x_addr);\n \n \t  /* First handle all the blocks with calls.  We don't need to\n \t     do any list walking for them.  */\n@@ -1685,27 +1689,27 @@ compute_transp (const_rtx x, int indx, sbitmap *bmap)\n \t      bitmap_clear_bit (bmap[bb_index], indx);\n \t    }\n \n-\t    /* Now iterate over the blocks which have memory modifications\n-\t       but which do not have any calls.  */\n-\t    EXECUTE_IF_AND_COMPL_IN_BITMAP (modify_mem_list_set,\n-\t\t\t\t\t    blocks_with_calls,\n-\t\t\t\t\t    0, bb_index, bi)\n-\t      {\n-\t\tvec<modify_pair> list\n-\t\t  = canon_modify_mem_list[bb_index];\n-\t\tmodify_pair *pair;\n-\t\tunsigned ix;\n+\t  /* Now iterate over the blocks which have memory modifications\n+\t     but which do not have any calls.  */\n+\t  EXECUTE_IF_AND_COMPL_IN_BITMAP (modify_mem_list_set,\n+\t\t\t\t\t  blocks_with_calls,\n+\t\t\t\t\t  0, bb_index, bi)\n+\t    {\n+\t      vec<modify_pair> list\n+\t\t= canon_modify_mem_list[bb_index];\n+\t      modify_pair *pair;\n+\t      unsigned ix;\n \n-\t\tFOR_EACH_VEC_ELT_REVERSE (list, ix, pair)\n-\t\t  {\n-\t\t    rtx dest = pair->dest;\n-\t\t    rtx dest_addr = pair->dest_addr;\n+\t      FOR_EACH_VEC_ELT_REVERSE (list, ix, pair)\n+\t\t{\n+\t\t  rtx dest = pair->dest;\n+\t\t  rtx dest_addr = pair->dest_addr;\n \n-\t\t    if (canon_true_dependence (dest, GET_MODE (dest),\n-\t\t\t\t\t       dest_addr, x, NULL_RTX))\n-\t\t      bitmap_clear_bit (bmap[bb_index], indx);\n-\t          }\n-\t      }\n+\t\t  if (canon_true_dependence (dest, GET_MODE (dest),\n+\t\t\t\t\t     dest_addr, x, x_addr))\n+\t\t    bitmap_clear_bit (bmap[bb_index], indx);\n+\t        }\n+\t    }\n \t}\n \n       x = XEXP (x, 0);"}]}