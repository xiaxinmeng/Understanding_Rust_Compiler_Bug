{"sha": "7b1980026cceb8cdd46dc796b8be79245366f1f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IxOTgwMDI2Y2NlYjhjZGQ0NmRjNzk2YjhiZTc5MjQ1MzY2ZjFmNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2008-04-02T19:07:27Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-04-02T19:07:27Z"}, "message": "i386.md (*float<SSEMODEI24:mode><X87MODEF:mode>2_1): Emit gen_floatdi<X87MODEF:mode>2_i387_with_xmm for DImode values in 32bit mode...\n\n        * config/i386/i386.md (*float<SSEMODEI24:mode><X87MODEF:mode>2_1):\n        Emit gen_floatdi<X87MODEF:mode>2_i387_with_xmm for DImode values\n        in 32bit mode when XMM registers are available to avoid store\n        forwarding stalls.\n        (floatdi<X87MODEF:mode>2_i387_with_xmm): New insn pattern and\n        corresponding post-reload splitters.\n\nFrom-SVN: r133845", "tree": {"sha": "56faf3425a568cd278b27628ce70cd0df4b9f171", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56faf3425a568cd278b27628ce70cd0df4b9f171"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b1980026cceb8cdd46dc796b8be79245366f1f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b1980026cceb8cdd46dc796b8be79245366f1f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b1980026cceb8cdd46dc796b8be79245366f1f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b1980026cceb8cdd46dc796b8be79245366f1f7/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ce52c73bed836a449ee3f4e5333c57e86aa8bbc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce52c73bed836a449ee3f4e5333c57e86aa8bbc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce52c73bed836a449ee3f4e5333c57e86aa8bbc9"}], "stats": {"total": 80, "additions": 79, "deletions": 1}, "files": [{"sha": "984ff05559c762335cbce2ddcb10d99d79b5b720", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b1980026cceb8cdd46dc796b8be79245366f1f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b1980026cceb8cdd46dc796b8be79245366f1f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b1980026cceb8cdd46dc796b8be79245366f1f7", "patch": "@@ -1,3 +1,12 @@\n+2008-04-02  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*float<SSEMODEI24:mode><X87MODEF:mode>2_1):\n+\tEmit gen_floatdi<X87MODEF:mode>2_i387_with_xmm for DImode values\n+\tin 32bit mode when XMM registers are available to avoid store\n+\tforwarding stalls.\n+\t(floatdi<X87MODEF:mode>2_i387_with_xmm): New insn pattern and\n+\tcorresponding post-reload splitters.\n+\n 2008-04-02  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (bdesc_sse_3arg): Add __builtin_ia32_shufps"}, {"sha": "adeafc2f3f5ed5cb836b6f48c0647e4a61921cc5", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 70, "deletions": 1, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b1980026cceb8cdd46dc796b8be79245366f1f7/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b1980026cceb8cdd46dc796b8be79245366f1f7/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=7b1980026cceb8cdd46dc796b8be79245366f1f7", "patch": "@@ -4925,7 +4925,21 @@\n   \"&& 1\"\n   [(parallel [(set (match_dup 0) (float:X87MODEF (match_dup 1)))\n \t      (clobber (match_dup 2))])]\n-  \"operands[2] = assign_386_stack_local (<SSEMODEI24:MODE>mode, SLOT_TEMP);\")\n+{\n+  operands[2] = assign_386_stack_local (<SSEMODEI24:MODE>mode, SLOT_TEMP);\n+\n+  /* Avoid store forwarding (partial memory) stall penalty\n+     by passing DImode value through XMM registers.  */\n+  if (<SSEMODEI24:MODE>mode == DImode && !TARGET_64BIT \n+      && TARGET_80387 && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES \n+      && !optimize_size)\n+    {\n+      emit_insn (gen_floatdi<X87MODEF:mode>2_i387_with_xmm (operands[0],\n+\t\t\t\t\t\t\t    operands[1],\n+\t\t\t\t\t\t\t    operands[2]));\n+      DONE;\n+    }\n+})\n \n (define_insn \"*floatsi<mode>2_vector_mixed_with_temp\"\n   [(set (match_operand:MODEF 0 \"register_operand\" \"=f,f,x,x,x\")\n@@ -5310,6 +5324,61 @@\n   [(set (match_dup 0) (float:X87MODEF (match_dup 1)))]\n   \"\")\n \n+;; Avoid store forwarding (partial memory) stall penalty\n+;; by passing DImode value through XMM registers.  */\n+\n+(define_insn \"floatdi<X87MODEF:mode>2_i387_with_xmm\"\n+  [(set (match_operand:X87MODEF 0 \"register_operand\" \"=f,f\")\n+\t(float:X87MODEF\n+\t  (match_operand:DI 1 \"nonimmediate_operand\" \"m,?r\")))\n+   (clobber (match_scratch:V4SI 3 \"=&x,x\"))\n+   (clobber (match_scratch:V4SI 4 \"=&x,x\"))\n+   (clobber (match_operand:DI 2 \"memory_operand\" \"=m,m\"))]\n+  \"TARGET_80387 && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES\n+   && !TARGET_64BIT && !optimize_size\"\n+  \"#\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"mode\" \"<X87MODEF:MODE>\")\n+   (set_attr \"unit\" \"i387\")\n+   (set_attr \"fp_int_src\" \"true\")])\n+\n+(define_split\n+  [(set (match_operand:X87MODEF 0 \"register_operand\" \"\")\n+\t(float:X87MODEF (match_operand:DI 1 \"register_operand\" \"\")))\n+   (clobber (match_operand:V4SI 3 \"register_operand\" \"\"))\n+   (clobber (match_operand:V4SI 4 \"register_operand\" \"\"))\n+   (clobber (match_operand:DI 2 \"memory_operand\" \"\"))]\n+  \"TARGET_80387 && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES\n+   && !TARGET_64BIT && !optimize_size\n+   && reload_completed\n+   && FP_REG_P (operands[0])\"\n+  [(set (match_dup 2) (match_dup 3))\n+   (set (match_dup 0) (float:X87MODEF (match_dup 2)))]\n+{\n+  /* The DImode arrived in a pair of integral registers (e.g. %edx:%eax).\n+     Assemble the 64-bit DImode value in an xmm register.  */\n+  emit_insn (gen_sse2_loadld (operands[3], CONST0_RTX (V4SImode),\n+\t\t\t      gen_rtx_SUBREG (SImode, operands[1], 0)));\n+  emit_insn (gen_sse2_loadld (operands[4], CONST0_RTX (V4SImode),\n+\t\t\t      gen_rtx_SUBREG (SImode, operands[1], 4)));\n+  emit_insn (gen_sse2_punpckldq (operands[3], operands[3], operands[4]));\n+\n+  operands[3] = gen_rtx_REG (DImode, REGNO (operands[3]));\n+})\n+\n+(define_split\n+  [(set (match_operand:X87MODEF 0 \"register_operand\" \"\")\n+\t(float:X87MODEF (match_operand:DI 1 \"memory_operand\" \"\")))\n+   (clobber (match_operand:V4SI 2 \"register_operand\" \"\"))\n+   (clobber (match_operand:V4SI 3 \"register_operand\" \"\"))\n+   (clobber (match_operand:DI 4 \"memory_operand\" \"\"))]\n+  \"TARGET_80387 && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES\n+   && !TARGET_64BIT && !optimize_size\n+   && reload_completed\n+   && FP_REG_P (operands[0])\"\n+  [(set (match_dup 0) (float:X87MODEF (match_dup 1)))]\n+  \"\")\n+\n ;; Avoid store forwarding (partial memory) stall penalty by extending\n ;; SImode value to DImode through XMM register instead of pushing two\n ;; SImode values to stack. Note that even !TARGET_INTER_UNIT_MOVES"}]}