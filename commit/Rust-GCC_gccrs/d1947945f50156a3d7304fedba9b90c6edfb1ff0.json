{"sha": "d1947945f50156a3d7304fedba9b90c6edfb1ff0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE5NDc5NDVmNTAxNTZhM2Q3MzA0ZmVkYmE5YjkwYzZlZGZiMWZmMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-10-17T23:04:48Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2011-10-17T23:04:48Z"}, "message": "Fix predicates used in sparc VIS edge instructions.\n\n\t* config/sparc/sparc.md: Use register_or_zero_operand where rJ\n\tis the constraint.\n\nFrom-SVN: r180113", "tree": {"sha": "0850cc39eef6cc9e89c5ca0e03467354147884b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0850cc39eef6cc9e89c5ca0e03467354147884b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1947945f50156a3d7304fedba9b90c6edfb1ff0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1947945f50156a3d7304fedba9b90c6edfb1ff0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1947945f50156a3d7304fedba9b90c6edfb1ff0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1947945f50156a3d7304fedba9b90c6edfb1ff0/comments", "author": null, "committer": null, "parents": [{"sha": "e00560c2909f3f93686202e7fb11b77e2b868ca3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e00560c2909f3f93686202e7fb11b77e2b868ca3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e00560c2909f3f93686202e7fb11b77e2b868ca3"}], "stats": {"total": 75, "additions": 40, "deletions": 35}, "files": [{"sha": "5ecf066fbf44aa6b22e336c617f21cd9bc955b78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1947945f50156a3d7304fedba9b90c6edfb1ff0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1947945f50156a3d7304fedba9b90c6edfb1ff0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1947945f50156a3d7304fedba9b90c6edfb1ff0", "patch": "@@ -1,8 +1,13 @@\n+2011-10-17  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/sparc/sparc.md: Use register_or_zero_operand where rJ\n+\tis the constraint.\n+\n 2011-10-17  David S. Miller  <davem@davemloft.net>\n \n \t* config/sparc/sparc-modes.def: Add single entry vector modes for\n \tDImode and SImode.\n-\t* config/sparc/sparc/sparc.md (V32, V32I, V64, V64I, V64N8): Delete\n+\t* config/sparc/sparc.md (V32, V32I, V64, V64I, V64N8): Delete\n \tmode iterators.\n \t(mov<V32:mode>): Revert back to plain SFmode pattern.\n \t(*movsf_insn): Likewise."}, {"sha": "75238c52acbd7469e4dda68a657782229918823d", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1947945f50156a3d7304fedba9b90c6edfb1ff0/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1947945f50156a3d7304fedba9b90c6edfb1ff0/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=d1947945f50156a3d7304fedba9b90c6edfb1ff0", "patch": "@@ -8214,8 +8214,8 @@\n ;; with the same operands.\n (define_insn \"edge8<P:mode>_vis\"\n   [(set (reg:CC_NOOV CC_REG)\n-        (compare:CC_NOOV (minus:P (match_operand:P 1 \"register_operand\" \"rJ\")\n-\t\t\t  \t  (match_operand:P 2 \"register_operand\" \"rJ\"))\n+        (compare:CC_NOOV (minus:P (match_operand:P 1 \"register_or_zero_operand\" \"rJ\")\n+\t\t\t  \t  (match_operand:P 2 \"register_or_zero_operand\" \"rJ\"))\n \t\t\t (const_int 0)))\n    (set (match_operand:P 0 \"register_operand\" \"=r\")\n         (unspec:P [(match_dup 1) (match_dup 2)] UNSPEC_EDGE8))]\n@@ -8225,8 +8225,8 @@\n \n (define_insn \"edge8l<P:mode>_vis\"\n   [(set (reg:CC_NOOV CC_REG)\n-        (compare:CC_NOOV (minus:P (match_operand:P 1 \"register_operand\" \"rJ\")\n-\t\t\t  \t  (match_operand:P 2 \"register_operand\" \"rJ\"))\n+        (compare:CC_NOOV (minus:P (match_operand:P 1 \"register_or_zero_operand\" \"rJ\")\n+\t\t\t  \t  (match_operand:P 2 \"register_or_zero_operand\" \"rJ\"))\n \t\t\t (const_int 0)))\n    (set (match_operand:P 0 \"register_operand\" \"=r\")\n         (unspec:P [(match_dup 1) (match_dup 2)] UNSPEC_EDGE8L))]\n@@ -8236,8 +8236,8 @@\n \n (define_insn \"edge16<P:mode>_vis\"\n   [(set (reg:CC_NOOV CC_REG)\n-        (compare:CC_NOOV (minus:P (match_operand:P 1 \"register_operand\" \"rJ\")\n-\t\t\t  \t  (match_operand:P 2 \"register_operand\" \"rJ\"))\n+        (compare:CC_NOOV (minus:P (match_operand:P 1 \"register_or_zero_operand\" \"rJ\")\n+\t\t\t  \t  (match_operand:P 2 \"register_or_zero_operand\" \"rJ\"))\n \t\t\t (const_int 0)))\n    (set (match_operand:P 0 \"register_operand\" \"=r\")\n         (unspec:P [(match_dup 1) (match_dup 2)] UNSPEC_EDGE16))]\n@@ -8247,8 +8247,8 @@\n \n (define_insn \"edge16l<P:mode>_vis\"\n   [(set (reg:CC_NOOV CC_REG)\n-        (compare:CC_NOOV (minus:P (match_operand:P 1 \"register_operand\" \"rJ\")\n-\t\t\t  \t  (match_operand:P 2 \"register_operand\" \"rJ\"))\n+        (compare:CC_NOOV (minus:P (match_operand:P 1 \"register_or_zero_operand\" \"rJ\")\n+\t\t\t  \t  (match_operand:P 2 \"register_or_zero_operand\" \"rJ\"))\n \t\t\t (const_int 0)))\n    (set (match_operand:P 0 \"register_operand\" \"=r\")\n         (unspec:P [(match_dup 1) (match_dup 2)] UNSPEC_EDGE16L))]\n@@ -8258,8 +8258,8 @@\n \n (define_insn \"edge32<P:mode>_vis\"\n   [(set (reg:CC_NOOV CC_REG)\n-        (compare:CC_NOOV (minus:P (match_operand:P 1 \"register_operand\" \"rJ\")\n-\t\t\t  \t  (match_operand:P 2 \"register_operand\" \"rJ\"))\n+        (compare:CC_NOOV (minus:P (match_operand:P 1 \"register_or_zero_operand\" \"rJ\")\n+\t\t\t  \t  (match_operand:P 2 \"register_or_zero_operand\" \"rJ\"))\n \t\t\t (const_int 0)))\n    (set (match_operand:P 0 \"register_operand\" \"=r\")\n         (unspec:P [(match_dup 1) (match_dup 2)] UNSPEC_EDGE32))]\n@@ -8269,8 +8269,8 @@\n \n (define_insn \"edge32l<P:mode>_vis\"\n   [(set (reg:CC_NOOV CC_REG)\n-        (compare:CC_NOOV (minus:P (match_operand:P 1 \"register_operand\" \"rJ\")\n-\t\t\t  \t  (match_operand:P 2 \"register_operand\" \"rJ\"))\n+        (compare:CC_NOOV (minus:P (match_operand:P 1 \"register_or_zero_operand\" \"rJ\")\n+\t\t\t  \t  (match_operand:P 2 \"register_or_zero_operand\" \"rJ\"))\n \t\t\t (const_int 0)))\n    (set (match_operand:P 0 \"register_operand\" \"=r\")\n         (unspec:P [(match_dup 1) (match_dup 2)] UNSPEC_EDGE32L))]\n@@ -8294,35 +8294,35 @@\n \n (define_insn \"array8<P:mode>_vis\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n-        (unspec:P [(match_operand:P 1 \"register_operand\" \"rJ\")\n-                   (match_operand:P 2 \"register_operand\" \"rJ\")]\n+        (unspec:P [(match_operand:P 1 \"register_or_zero_operand\" \"rJ\")\n+                   (match_operand:P 2 \"register_or_zero_operand\" \"rJ\")]\n                   UNSPEC_ARRAY8))]\n   \"TARGET_VIS\"\n   \"array8\\t%r1, %r2, %0\"\n   [(set_attr \"type\" \"array\")])\n \n (define_insn \"array16<P:mode>_vis\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n-        (unspec:P [(match_operand:P 1 \"register_operand\" \"rJ\")\n-                   (match_operand:P 2 \"register_operand\" \"rJ\")]\n+        (unspec:P [(match_operand:P 1 \"register_or_zero_operand\" \"rJ\")\n+                   (match_operand:P 2 \"register_or_zero_operand\" \"rJ\")]\n                   UNSPEC_ARRAY16))]\n   \"TARGET_VIS\"\n   \"array16\\t%r1, %r2, %0\"\n   [(set_attr \"type\" \"array\")])\n \n (define_insn \"array32<P:mode>_vis\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n-        (unspec:P [(match_operand:P 1 \"register_operand\" \"rJ\")\n-                   (match_operand:P 2 \"register_operand\" \"rJ\")]\n+        (unspec:P [(match_operand:P 1 \"register_or_zero_operand\" \"rJ\")\n+                   (match_operand:P 2 \"register_or_zero_operand\" \"rJ\")]\n                   UNSPEC_ARRAY32))]\n   \"TARGET_VIS\"\n   \"array32\\t%r1, %r2, %0\"\n   [(set_attr \"type\" \"array\")])\n \n (define_insn \"bmaskdi_vis\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (plus:DI (match_operand:DI 1 \"register_operand\" \"rJ\")\n-                 (match_operand:DI 2 \"register_operand\" \"rJ\")))\n+        (plus:DI (match_operand:DI 1 \"register_or_zero_operand\" \"rJ\")\n+                 (match_operand:DI 2 \"register_or_zero_operand\" \"rJ\")))\n    (set (zero_extract:DI (reg:DI GSR_REG) (const_int 32) (const_int 32))\n         (plus:DI (match_dup 1) (match_dup 2)))]\n   \"TARGET_VIS2\"\n@@ -8331,8 +8331,8 @@\n \n (define_insn \"bmasksi_vis\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (plus:SI (match_operand:SI 1 \"register_operand\" \"rJ\")\n-                 (match_operand:SI 2 \"register_operand\" \"rJ\")))\n+        (plus:SI (match_operand:SI 1 \"register_or_zero_operand\" \"rJ\")\n+                 (match_operand:SI 2 \"register_or_zero_operand\" \"rJ\")))\n    (set (zero_extract:DI (reg:DI GSR_REG) (const_int 32) (const_int 32))\n         (zero_extend:DI (plus:SI (match_dup 1) (match_dup 2))))]\n   \"TARGET_VIS2\"\n@@ -8353,53 +8353,53 @@\n ;; VIS 2.0 adds edge variants which do not set the condition codes\n (define_insn \"edge8n<P:mode>_vis\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n-        (unspec:P [(match_operand:P 1 \"register_operand\" \"rJ\")\n-\t           (match_operand:P 2 \"register_operand\" \"rJ\")]\n+        (unspec:P [(match_operand:P 1 \"register_or_zero_operand\" \"rJ\")\n+\t           (match_operand:P 2 \"register_or_zero_operand\" \"rJ\")]\n                   UNSPEC_EDGE8N))]\n   \"TARGET_VIS2\"\n   \"edge8n\\t%r1, %r2, %0\"\n   [(set_attr \"type\" \"edgen\")])\n \n (define_insn \"edge8ln<P:mode>_vis\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n-        (unspec:P [(match_operand:P 1 \"register_operand\" \"rJ\")\n-\t           (match_operand:P 2 \"register_operand\" \"rJ\")]\n+        (unspec:P [(match_operand:P 1 \"register_or_zero_operand\" \"rJ\")\n+\t           (match_operand:P 2 \"register_or_zero_operand\" \"rJ\")]\n                   UNSPEC_EDGE8LN))]\n   \"TARGET_VIS2\"\n   \"edge8ln\\t%r1, %r2, %0\"\n   [(set_attr \"type\" \"edgen\")])\n \n (define_insn \"edge16n<P:mode>_vis\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n-        (unspec:P [(match_operand:P 1 \"register_operand\" \"rJ\")\n-                   (match_operand:P 2 \"register_operand\" \"rJ\")]\n+        (unspec:P [(match_operand:P 1 \"register_or_zero_operand\" \"rJ\")\n+                   (match_operand:P 2 \"register_or_zero_operand\" \"rJ\")]\n                   UNSPEC_EDGE16N))]\n   \"TARGET_VIS2\"\n   \"edge16n\\t%r1, %r2, %0\"\n   [(set_attr \"type\" \"edgen\")])\n \n (define_insn \"edge16ln<P:mode>_vis\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n-        (unspec:P [(match_operand:P 1 \"register_operand\" \"rJ\")\n-                   (match_operand:P 2 \"register_operand\" \"rJ\")]\n+        (unspec:P [(match_operand:P 1 \"register_or_zero_operand\" \"rJ\")\n+                   (match_operand:P 2 \"register_or_zero_operand\" \"rJ\")]\n                   UNSPEC_EDGE16LN))]\n   \"TARGET_VIS2\"\n   \"edge16ln\\t%r1, %r2, %0\"\n   [(set_attr \"type\" \"edgen\")])\n \n (define_insn \"edge32n<P:mode>_vis\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n-        (unspec:P [(match_operand:P 1 \"register_operand\" \"rJ\")\n-                   (match_operand:P 2 \"register_operand\" \"rJ\")]\n+        (unspec:P [(match_operand:P 1 \"register_or_zero_operand\" \"rJ\")\n+                   (match_operand:P 2 \"register_or_zero_operand\" \"rJ\")]\n                   UNSPEC_EDGE32N))]\n   \"TARGET_VIS2\"\n   \"edge32n\\t%r1, %r2, %0\"\n   [(set_attr \"type\" \"edgen\")])\n \n (define_insn \"edge32ln<P:mode>_vis\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n-        (unspec:P [(match_operand:P 1 \"register_operand\" \"rJ\")\n-                   (match_operand:P 2 \"register_operand\" \"rJ\")]\n+        (unspec:P [(match_operand:P 1 \"register_or_zero_operand\" \"rJ\")\n+                   (match_operand:P 2 \"register_or_zero_operand\" \"rJ\")]\n                   UNSPEC_EDGE32LN))]\n   \"TARGET_VIS2\"\n   \"edge32ln\\t%r1, %r2, %0\""}]}