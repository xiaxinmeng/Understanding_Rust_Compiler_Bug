{"sha": "0c2d1a2a2323e457e3e076457f95cbc7460b92f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMyZDFhMmEyMzIzZTQ1N2UzZTA3NjQ1N2Y5NWNiYzc0NjBiOTJmNw==", "commit": {"author": {"name": "Joe Buck", "email": "jbuck@synopsys.com", "date": "1999-08-11T06:37:09Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-08-11T06:37:09Z"}, "message": "invoke.texi: s/GNU CC/GCC/ for consistency with gcc.texi.\n\n\n        * invoke.texi: s/GNU CC/GCC/ for consistency with gcc.texi.\n        Fix documentation of -ansi flag to describe its C++ behavior.\n        Remove bogus reference to GCC 2.9.\n\nFrom-SVN: r28657", "tree": {"sha": "3e62038a9b2834d7bcf4a8041d1a6831b39edb8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e62038a9b2834d7bcf4a8041d1a6831b39edb8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c2d1a2a2323e457e3e076457f95cbc7460b92f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c2d1a2a2323e457e3e076457f95cbc7460b92f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c2d1a2a2323e457e3e076457f95cbc7460b92f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c2d1a2a2323e457e3e076457f95cbc7460b92f7/comments", "author": null, "committer": null, "parents": [{"sha": "9a816500734eabe59e20166f33e99976500cb0bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a816500734eabe59e20166f33e99976500cb0bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a816500734eabe59e20166f33e99976500cb0bf"}], "stats": {"total": 274, "additions": 143, "deletions": 131}, "files": [{"sha": "d502faa9a5a72e0a37b9858300d7ee521ac58229", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c2d1a2a2323e457e3e076457f95cbc7460b92f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c2d1a2a2323e457e3e076457f95cbc7460b92f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c2d1a2a2323e457e3e076457f95cbc7460b92f7", "patch": "@@ -1,3 +1,9 @@\n+Wed Aug 11 00:34:22 1999  Joe Buck  <jbuck@synopsys.com>\n+\n+\t* invoke.texi: s/GNU CC/GCC/ for consistency with gcc.texi.\n+\tFix documentation of -ansi flag to describe its C++ behavior.\n+\tRemove bogus reference to GCC 2.9.\n+\n Tue Aug 10 17:19:02 1999  Jim Wilson  <wilson@cygnus.com>\n \n \t* config/sh/sh.c (machine_dependent_reorg): Only call PUT_MODE on\n@@ -417,6 +423,7 @@ Mon Aug  9 01:52:24 1999  Jason Merrill  <jason@yorick.cygnus.com>\n \t* except.c (expand_eh_region_start_for_decl): Always start a new block.\n \t* stmt.c (is_eh_region): Make sure current_function is present, too.\n \n+>>>>>>> 1.4094\n Mon Aug  9 01:15:24 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* pa.h (HARD_REGNO_MODE_OK): Correctly handle FPregs, even when"}, {"sha": "5e0a8606552f5e232253709d8c4ad833d78e141b", "filename": "gcc/invoke.texi", "status": "modified", "additions": 136, "deletions": 131, "changes": 267, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c2d1a2a2323e457e3e076457f95cbc7460b92f7/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c2d1a2a2323e457e3e076457f95cbc7460b92f7/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=0c2d1a2a2323e457e3e076457f95cbc7460b92f7", "patch": "@@ -3,12 +3,12 @@\n @c For copying conditions, see the file gcc.texi.\n \n @node Invoking GCC\n-@chapter GNU CC Command Options\n-@cindex GNU CC command options\n+@chapter GCC Command Options\n+@cindex GCC command options\n @cindex command options\n-@cindex options, GNU CC command\n+@cindex options, GCC command\n \n-When you invoke GNU CC, it normally does preprocessing, compilation,\n+When you invoke GCC, it normally does preprocessing, compilation,\n assembly and linking.  The ``overall options'' allow you to stop this\n process at an intermediate stage.  For example, the @samp{-c} option\n says not to run the linker.  Then the output consists of object files\n@@ -20,7 +20,7 @@ options control the assembler and linker; most of these are not\n documented here, since you rarely need to use any of them.\n \n @cindex C compilation options\n-Most of the command line options that you can use with GNU CC are useful\n+Most of the command line options that you can use with GCC are useful\n for C programs; when an option is only useful with another language\n (usually C++), the explanation says so explicitly.  If the description\n for a particular option does not mention a source language, you can use\n@@ -69,12 +69,12 @@ only one of these two forms, whichever one is not the default.\n * Directory Options::   Where to find header files and libraries.\n                         Where to find the compiler executable files.\n * Spec Files::          How to pass switches to sub-processes.\n-* Target Options::      Running a cross-compiler, or an old version of GNU CC.\n+* Target Options::      Running a cross-compiler, or an old version of GCC.\n * Submodel Options::    Specifying minor hardware or convention variations,\n                         such as 68010 vs 68020.\n * Code Gen Options::    Specifying conventions for function calls, data layout\n                         and register usage.\n-* Environment Variables:: Env vars that affect GNU CC.\n+* Environment Variables:: Env vars that affect GCC.\n * Running Protoize::    Automatically adding or removing function prototypes.\n @end menu\n \n@@ -452,7 +452,7 @@ in the following sections.\n * Directory Options::   Where to find header files and libraries.\n                         Where to find the compiler executable files.\n * Spec Files::          How to pass switches to sub-processes.\n-* Target Options::      Running a cross-compiler, or an old version of GNU CC.\n+* Target Options::      Running a cross-compiler, or an old version of GCC.\n @end menu\n \n @node Overall Options\n@@ -602,7 +602,7 @@ be displayed.\n @cindex C++ source file suffixes\n C++ source files conventionally use one of the suffixes @samp{.C},\n @samp{.cc}, @samp{.cpp}, @samp{.c++}, @samp{.cp}, or @samp{.cxx};\n-preprocessed C++ files use the suffix @samp{.ii}.  GNU CC recognizes\n+preprocessed C++ files use the suffix @samp{.ii}.  GCC recognizes\n files with these names and compiles them as C++ programs even if you\n call the compiler the same way as for compiling C programs (usually with\n the name @code{gcc}).\n@@ -613,7 +613,7 @@ However, C++ programs often require class libraries as well as a\n compiler that understands the C++ language---and under some\n circumstances, you might want to compile programs from standard input,\n or otherwise without a suffix that flags them as C++ programs.\n-@code{g++} is a program that calls GNU CC with the default language\n+@code{g++} is a program that calls GCC with the default language\n set to C++, and automatically specifies linking against the C++\n library.  On many systems, the script @code{g++} is also\n installed with the name @code{c++}.\n@@ -640,14 +640,20 @@ from C, such as C++ and Objective C) that the compiler accepts:\n @table @code\n @cindex ANSI support\n @item -ansi\n-Support all ANSI standard C programs.\n+In C mode, support all ANSI standard C programs.  In C++ mode,\n+remove GNU extensions that conflict with ANSI C++.\n+@c shouldn't we be saying \"ISO\"?\n \n-This turns off certain features of GNU C that are incompatible with ANSI\n-C, such as the @code{asm}, @code{inline} and @code{typeof} keywords, and\n+This turns off certain features of GCC that are incompatible with ANSI\n+C (when compiling C code), or of ANSI standard C++ (when compiling C++ code),\n+such as the @code{asm} and @code{typeof} keywords, and\n predefined macros such as @code{unix} and @code{vax} that identify the\n type of system you are using.  It also enables the undesirable and\n-rarely used ANSI trigraph feature, and it disables recognition of C++\n-style @samp{//} comments.\n+rarely used ANSI trigraph feature.  For the C compiler, \n+it disables recognition of C++ style @samp{//} comments as well as\n+the @code{inline} keyword.  For the C++ compiler,\n+@samp{-foperator-names} is enabled as well.\n+\n \n The alternate keywords @code{__asm__}, @code{__extension__},\n @code{__inline__} and @code{__typeof__} continue to work despite\n@@ -945,7 +951,7 @@ g++ -g -frepo -O -c firstClass.C\n @noindent\n In this example, only @samp{-frepo} is an option meant\n only for C++ programs; you can use the other options with any\n-language supported by GNU CC.\n+language supported by GCC.\n \n Here is a list of options that are @emph{only} for compiling C++ programs:\n \n@@ -1321,8 +1327,7 @@ negative form beginning @samp{-Wno-} to turn off warnings;\n for example, @samp{-Wno-implicit}.  This manual lists only one of the\n two forms, whichever is not the default.\n \n-These options control the amount and kinds of warnings produced by GNU\n-CC:\n+These options control the amount and kinds of warnings produced by GCC:\n \n @table @code\n @cindex syntax checking\n@@ -1346,7 +1351,7 @@ these escape routes; application programs should avoid them.\n @xref{Alternate Keywords}.\n \n This option is not intended to be @i{useful}; it exists only to satisfy\n-pedants who would otherwise claim that GNU CC fails to support the ANSI\n+pedants who would otherwise claim that GCC fails to support the ANSI\n standard.\n \n Some users try to use @samp{-pedantic} to check programs for strict ANSI\n@@ -1493,7 +1498,7 @@ to compute a value that itself is never used, because such\n computations may be deleted by data flow analysis before the warnings\n are printed.\n \n-These warnings are made optional because GNU CC is not smart\n+These warnings are made optional because GCC is not smart\n enough to see all the reasons why the code might be correct\n despite appearing to have an error.  Here is one example of how\n this can happen:\n@@ -1515,7 +1520,7 @@ this can happen:\n \n @noindent\n If the value of @code{y} is always 1, 2 or 3, then @code{x} is\n-always initialized, but GNU CC doesn't know this.  Here is\n+always initialized, but GCC doesn't know this.  Here is\n another common case:\n \n @smallexample\n@@ -1779,11 +1784,11 @@ Make all warnings into errors.\n @end table\n \n @node Debugging Options\n-@section Options for Debugging Your Program or GNU CC\n+@section Options for Debugging Your Program or GCC\n @cindex options, debugging\n @cindex debugging information options\n \n-GNU CC has various special options that are used for debugging\n+GCC has various special options that are used for debugging\n either your program or GCC:\n \n @table @code\n@@ -1801,7 +1806,7 @@ to generate the extra information, use @samp{-gstabs+}, @samp{-gstabs},\n @samp{-gxcoff+}, @samp{-gxcoff}, @samp{-gdwarf-1+}, or @samp{-gdwarf-1}\n (see below).\n \n-Unlike most other C compilers, GNU CC allows you to use @samp{-g} with\n+Unlike most other C compilers, GCC allows you to use @samp{-g} with\n @samp{-O}.  The shortcuts taken by optimized code may occasionally\n produce surprising results: some variables you declared may not exist\n at all; flow of control may briefly move where you did not expect it;\n@@ -1812,7 +1817,7 @@ execute in different places because they were moved out of loops.\n Nevertheless it proves possible to debug optimized output.  This makes\n it reasonable to use the optimizer for programs that might have bugs.\n \n-The following options are useful when GNU CC is generated with the\n+The following options are useful when GCC is generated with the\n capability for more than one debugging format.\n \n @item -ggdb\n@@ -1990,7 +1995,7 @@ frequencies.\n \n @item -fprofile-arcs\n Instrument @dfn{arcs} during compilation.  For each function of your\n-program, GNU CC creates a program flow graph, then finds a spanning tree\n+program, GCC creates a program flow graph, then finds a spanning tree\n for the graph.  Only arcs that are not on the spanning tree have to be\n instrumented: the compiler adds code to count the number of times that these\n arcs are executed.  When an arc is the only exit or only entrance to a\n@@ -2020,7 +2025,7 @@ branch probabilities.\n @need 2000\n @item -ftest-coverage\n Create data files for the @code{gcov} code-coverage utility\n-(@pxref{Gcov,, @code{gcov}: a GNU CC Test Coverage Program}).\n+(@pxref{Gcov,, @code{gcov}: a GCC Test Coverage Program}).\n The data file names begin with the name of your source file:\n \n @table @code\n@@ -2128,7 +2133,7 @@ unit to @var{file}.\n When running a cross-compiler, pretend that the target machine uses the\n same floating point format as the host machine.  This causes incorrect\n output of the actual floating constants, but the actual instruction\n-sequence will probably be the same as GNU CC would make when running on\n+sequence will probably be the same as GCC would make when running on\n the target machine.\n \n @item -save-temps\n@@ -2140,7 +2145,7 @@ compiling @file{foo.c} with @samp{-c -save-temps} would produce files\n @item -print-file-name=@var{library}\n Print the full absolute name of the library file @var{library} that\n would be used when linking---and don't do anything else.  With this\n-option, GNU CC does not compile or link anything; it just prints the\n+option, GCC does not compile or link anything; it just prints the\n file name.\n \n @item -print-prog-name=@var{program}\n@@ -2204,7 +2209,7 @@ without a frame pointer.  On some machines the compiler also turns\n on other flags.@refill\n \n @item -O2\n-Optimize even more.  GNU CC performs nearly all supported optimizations\n+Optimize even more.  GCC performs nearly all supported optimizations\n that do not involve a space-speed tradeoff.  The compiler does not\n perform loop unrolling or function inlining when you specify @samp{-O2}.\n As compared to @samp{-O}, this option increases both compilation time\n@@ -2342,7 +2347,7 @@ callable version of the function.  This switch does not affect\n Emit variables declared @code{static const} when optimization isn't turned\n on, even if the variables aren't referenced.\n \n-GNU CC enables this option by default.  If you want to force the compiler to\n+GCC enables this option by default.  If you want to force the compiler to\n check if the variable was referenced, regardless of whether or not\n optimization is turned on, use the @samp{-fno-keep-static-consts} option.\n \n@@ -2423,7 +2428,7 @@ Perform a number of minor optimizations that are relatively expensive.\n Attempt to reassign register numbers in move instructions and as\n operands of other simple instructions in order to maximize the amount of\n register tying.  This is especially helpful on machines with two-operand\n-instructions.  GNU CC enables this optimization by default with @samp{-O2}\n+instructions.  GCC enables this optimization by default with @samp{-O2}\n or higher.\n \n Note @code{-fregmove} and @code{-foptimize-register-moves} are the same\n@@ -2854,20 +2859,20 @@ mechanism when this option is specified.\n @cindex unresolved references and @code{-nodefaultlibs}\n One of the standard libraries bypassed by @samp{-nostdlib} and\n @samp{-nodefaultlibs} is @file{libgcc.a}, a library of internal subroutines\n-that GNU CC uses to overcome shortcomings of particular machines, or special\n+that GCC uses to overcome shortcomings of particular machines, or special\n needs for some languages.\n @ifset INTERNALS\n-(@xref{Interface,,Interfacing to GNU CC Output}, for more discussion of\n+(@xref{Interface,,Interfacing to GCC Output}, for more discussion of\n @file{libgcc.a}.)\n @end ifset\n @ifclear INTERNALS\n-(@xref{Interface,,Interfacing to GNU CC Output,gcc.info,Porting GNU CC},\n+(@xref{Interface,,Interfacing to GCC Output,gcc.info,Porting GCC},\n for more discussion of @file{libgcc.a}.)\n @end ifclear\n In most cases, you need @file{libgcc.a} even when you want to avoid\n other standard libraries.  In other words, when you specify @samp{-nostdlib}\n or @samp{-nodefaultlibs} you should usually specify @samp{-lgcc} as well.\n-This ensures that you have no unresolved references to internal GNU CC\n+This ensures that you have no unresolved references to internal GCC\n library subroutines.  (For example, @samp{__main}, used to ensure C++\n constructors will be called; @pxref{Collect2,,@code{collect2}}.)\n \n@@ -2892,7 +2897,7 @@ this option.\n \n @item -Xlinker @var{option}\n Pass @var{option} as an option to the linker.  You can use this to\n-supply system-specific linker options which GNU CC does not know how to\n+supply system-specific linker options which GCC does not know how to\n recognize.\n \n If you want to pass an option that takes an argument, you must use\n@@ -3428,24 +3433,24 @@ proper position among the other output files.\n @cindex compiler version, specifying\n @cindex target machine, specifying\n \n-By default, GNU CC compiles code for the same type of machine that you\n+By default, GCC compiles code for the same type of machine that you\n are using.  However, it can also be installed as a cross-compiler, to\n compile for some other type of machine.  In fact, several different\n-configurations of GNU CC, for different target machines, can be\n+configurations of GCC, for different target machines, can be\n installed side by side.  Then you specify which one to use with the\n @samp{-b} option.\n \n-In addition, older and newer versions of GNU CC can be installed side\n+In addition, older and newer versions of GCC can be installed side\n by side.  One of them (probably the newest) will be the default, but\n you may sometimes wish to use another.\n \n @table @code\n @item -b @var{machine}\n The argument @var{machine} specifies the target machine for compilation.\n-This is useful when you have installed GNU CC as a cross-compiler.\n+This is useful when you have installed GCC as a cross-compiler.\n \n The value to use for @var{machine} is the same as was specified as the\n-machine type when configuring GNU CC as a cross-compiler.  For\n+machine type when configuring GCC as a cross-compiler.  For\n example, if a cross-compiler was configured with @samp{configure\n i386v}, meaning to compile for an 80386 running System V, then you\n would specify @samp{-b i386v} to run that cross compiler.\n@@ -3454,17 +3459,17 @@ When you do not specify @samp{-b}, it normally means to compile for\n the same type of machine that you are using.\n \n @item -V @var{version}\n-The argument @var{version} specifies which version of GNU CC to run.\n+The argument @var{version} specifies which version of GCC to run.\n This is useful when multiple versions are installed.  For example,\n-@var{version} might be @samp{2.0}, meaning to run GNU CC version 2.0.\n+@var{version} might be @samp{2.0}, meaning to run GCC version 2.0.\n \n The default version, when you do not specify @samp{-V}, is the last\n-version of GNU CC that you installed.\n+version of GCC that you installed.\n @end table\n \n The @samp{-b} and @samp{-V} options actually work by controlling part of\n the file name used for the executable files and libraries used for\n-compilation.  A given version of GNU CC, for a given target machine, is\n+compilation.  A given version of GCC, for a given target machine, is\n normally kept in the directory @file{/usr/local/lib/gcc-lib/@var{machine}/@var{version}}.@refill\n \n Thus, sites can customize the effect of @samp{-b} or @samp{-V} either by\n@@ -3681,13 +3686,13 @@ The @code{rtd} instruction is supported by the 68010, 68020, 68030,\n \n @item -malign-int\n @itemx -mno-align-int\n-Control whether GNU CC aligns @code{int}, @code{long}, @code{long long}, \n+Control whether GCC aligns @code{int}, @code{long}, @code{long long}, \n @code{float}, @code{double}, and @code{long double} variables on a 32-bit\n boundary (@samp{-malign-int}) or a 16-bit boundary (@samp{-mno-align-int}).\n Aligning variables on 32-bit boundaries produces code that runs somewhat\n faster on processors with 32-bit busses at the expense of more memory.\n \n-@strong{Warning:} if you use the @samp{-malign-int} switch, GNU CC will\n+@strong{Warning:} if you use the @samp{-malign-int} switch, GCC will\n align structures containing the above types  differently than\n most published application binary interface specifications for the m68k.\n \n@@ -3755,7 +3760,7 @@ cross-compilation.  The embedded targets @samp{sparc-*-aout} and\n @samp{-msoft-float} changes the calling convention in the output file;\n therefore, it is only useful if you compile @emph{all} of a program with\n this option.  In particular, you need to compile @file{libgcc.a}, the\n-library that comes with GNU CC, with @samp{-msoft-float} in order for\n+library that comes with GCC, with @samp{-msoft-float} in order for\n this to work.\n \n @item -mhard-quad-float\n@@ -3800,7 +3805,7 @@ instructions (except for leaf functions) and is the normal mode of operation.\n @itemx -munaligned-doubles\n Assume that doubles have 8 byte alignment.  This is the default.\n \n-With @samp{-munaligned-doubles}, GNU CC assumes that doubles have 8 byte\n+With @samp{-munaligned-doubles}, GCC assumes that doubles have 8 byte\n alignment only if they are contained in another type, or if they have an\n absolute address.  Otherwise, it assumes they have 4 byte alignment.\n Specifying this option avoids some rare compatibility problems with code\n@@ -3822,7 +3827,7 @@ divide instructions which exist in SPARC v8 but not in SPARC v7.\n multiply, integer divide step and scan (@code{ffs}) instructions which\n exist in SPARClite but not in SPARC v7.\n \n-These options are deprecated and will be deleted in GNU CC 2.9.\n+These options are deprecated and will be deleted in a future GCC release.\n They have been replaced with @samp{-mcpu=xxx}.\n \n @item -mcypress\n@@ -3837,7 +3842,7 @@ With @samp{-msupersparc} the compiler optimizes code for the SuperSparc cpu, as\n used in the SparcStation 10, 1000 and 2000 series. This flag also enables use\n of the full SPARC v8 instruction set.\n \n-These options are deprecated and will be deleted in GNU CC 2.9.\n+These options are deprecated and will be deleted in a future GCC release.\n They have been replaced with @samp{-mcpu=xxx}.\n \n @item -mcpu=@var{cpu_type}\n@@ -3951,7 +3956,7 @@ Programs are statically linked, PIC is not supported.\n \n @item -mstack-bias\n @itemx -mno-stack-bias\n-With @samp{-mstack-bias}, GNU CC assumes that the stack pointer, and\n+With @samp{-mstack-bias}, GCC assumes that the stack pointer, and\n frame pointer if present, are offset by -2047 which must be added back\n when making stack frame references.\n Otherwise, assume no such offset is present.\n@@ -4118,7 +4123,7 @@ not pass @samp{-assert pure-text} to the linker when linking a shared object.\n @item -msoft-float\n @kindex -msoft-float\n Generate output containing library calls for floating point.\n-@strong{Warning:} the requisite libraries are not part of GNU CC.\n+@strong{Warning:} the requisite libraries are not part of GCC.\n Normally the facilities of the machine's usual C compiler are used, but\n this can't be done directly in cross-compilation.  You must make your\n own arrangements to provide suitable library functions for\n@@ -4227,7 +4232,7 @@ cross-compilation.\n @samp{-msoft-float} changes the calling convention in the output file;\n therefore, it is only useful if you compile @emph{all} of a program with\n this option.  In particular, you need to compile @file{libgcc.a}, the\n-library that comes with GNU CC, with @samp{-msoft-float} in order for\n+library that comes with GCC, with @samp{-msoft-float} in order for\n this to work.\n \n @item -mlittle-endian\n@@ -4623,7 +4628,7 @@ Control how function arguments are stored in stack frames.\n @samp{-moptimize-arg-area} saves space by optimizing them, but this\n conflicts with the 88open specifications.  The opposite alternative,\n @samp{-mno-optimize-arg-area}, agrees with 88open standards.  By default\n-GNU CC does not optimize the argument area.\n+GCC does not optimize the argument area.\n \n @item -mshort-data-@var{num}\n @kindex -mshort-data-@var{num}\n@@ -4683,7 +4688,7 @@ Which variant of the assembler syntax to emit.\n @samp{-msvr4} makes the C preprocessor recognize @samp{#pragma weak}\n that is used on System V release 4.\n @item\n-@samp{-msvr4} makes GNU CC issue additional declaration directives used in\n+@samp{-msvr4} makes GCC issue additional declaration directives used in\n SVr4.\n @end enumerate\n \n@@ -4754,7 +4759,7 @@ particular, the behavior of such a division with and without\n @cindex bit shift overflow (88k)\n @cindex large bit shifts (88k)\n Include code to detect bit-shifts of more than 31 bits; respectively,\n-trap such shifts or emit code to handle them properly.  By default GNU CC\n+trap such shifts or emit code to handle them properly.  By default GCC\n makes no special provision for large bit shifts.\n \n @item -mwarn-passed-structs\n@@ -4763,7 +4768,7 @@ makes no special provision for large bit shifts.\n Warn when a function passes a struct as an argument or result.\n Structure-passing conventions have changed during the evolution of the C\n language, and are often the source of portability problems.  By default,\n-GNU CC issues no such warning.\n+GCC issues no such warning.\n @end table\n \n @node RS/6000 and PowerPC Options\n@@ -4791,7 +4796,7 @@ These @samp{-m} options are defined for the IBM RS/6000 and PowerPC:\n @kindex -mpowerpc-gpopt\n @kindex -mpowerpc-gfxopt\n @kindex -mpowerpc64\n-GNU CC supports two related instruction set architectures for the\n+GCC supports two related instruction set architectures for the\n RS/6000 and PowerPC.  The @dfn{POWER} instruction set are those\n instructions supported by the @samp{rios} chip set used in the original\n RS/6000 systems and the @dfn{PowerPC} instruction set is the\n@@ -4804,36 +4809,36 @@ register is included in processors supporting the POWER architecture.\n \n You use these options to specify which instructions are available on the\n processor you are using.  The default value of these options is\n-determined when configuring GNU CC.  Specifying the\n+determined when configuring GCC.  Specifying the\n @samp{-mcpu=@var{cpu_type}} overrides the specification of these\n options.  We recommend you use the @samp{-mcpu=@var{cpu_type}} option\n rather than the options listed above.\n \n-The @samp{-mpower} option allows GNU CC to generate instructions that\n+The @samp{-mpower} option allows GCC to generate instructions that\n are found only in the POWER architecture and to use the MQ register.\n-Specifying @samp{-mpower2} implies @samp{-power} and also allows GNU CC\n+Specifying @samp{-mpower2} implies @samp{-power} and also allows GCC\n to generate instructions that are present in the POWER2 architecture but\n not the original POWER architecture.\n \n-The @samp{-mpowerpc} option allows GNU CC to generate instructions that\n+The @samp{-mpowerpc} option allows GCC to generate instructions that\n are found only in the 32-bit subset of the PowerPC architecture.\n Specifying @samp{-mpowerpc-gpopt} implies @samp{-mpowerpc} and also allows\n-GNU CC to use the optional PowerPC architecture instructions in the\n+GCC to use the optional PowerPC architecture instructions in the\n General Purpose group, including floating-point square root.  Specifying\n-@samp{-mpowerpc-gfxopt} implies @samp{-mpowerpc} and also allows GNU CC to\n+@samp{-mpowerpc-gfxopt} implies @samp{-mpowerpc} and also allows GCC to\n use the optional PowerPC architecture instructions in the Graphics\n group, including floating-point select.\n \n-The @samp{-mpowerpc64} option allows GNU CC to generate the additional\n+The @samp{-mpowerpc64} option allows GCC to generate the additional\n 64-bit instructions that are found in the full PowerPC64 architecture\n-and to treat GPRs as 64-bit, doubleword quantities.  GNU CC defaults to\n+and to treat GPRs as 64-bit, doubleword quantities.  GCC defaults to\n @samp{-mno-powerpc64}.\n \n-If you specify both @samp{-mno-power} and @samp{-mno-powerpc}, GNU CC\n+If you specify both @samp{-mno-power} and @samp{-mno-powerpc}, GCC\n will use only the instructions in the common subset of both\n architectures plus some special AIX common-mode calls, and will not use\n the MQ register.  Specifying both @samp{-mpower} and @samp{-mpowerpc}\n-permits GNU CC to use any instruction from either architecture and to\n+permits GCC to use any instruction from either architecture and to\n allow use of the MQ register; specify this for the Motorola MPC601.\n \n @item -mnew-mnemonics\n@@ -4845,10 +4850,10 @@ Select which mnemonics to use in the generated assembler code.\n defined for the PowerPC architecture, while @samp{-mold-mnemonics}\n requests the assembler mnemonics defined for the POWER architecture.\n Instructions defined in only one architecture have only one mnemonic;\n-GNU CC uses that mnemonic irrespective of which of these options is\n+GCC uses that mnemonic irrespective of which of these options is\n specified.\n \n-GNU CC defaults to the mnemonics appropriate for the architecture in\n+GCC defaults to the mnemonics appropriate for the architecture in\n use.  Specifying @samp{-mcpu=@var{cpu_type}} sometimes overrides the\n value of these option.  Unless you are building a cross-compiler, you\n should normally not specify either @samp{-mnew-mnemonics} or\n@@ -4886,9 +4891,9 @@ enable the @samp{-mpowerpc} option and disable the @samp{-mpower} option.\n \n AIX versions 4 or greater selects @samp{-mcpu=common} by default, so\n that code will operate on all members of the RS/6000 POWER and PowerPC\n-families.  In that case, GNU CC will use only the instructions in the\n+families.  In that case, GCC will use only the instructions in the\n common subset of both architectures plus some special AIX common-mode\n-calls, and will not use the MQ register.  GNU CC assumes a generic\n+calls, and will not use the MQ register.  GCC assumes a generic\n processor model for scheduling purposes.\n \n Specifying any of the options @samp{-mcpu=rios1}, @samp{-mcpu=rios2},\n@@ -4918,25 +4923,25 @@ instruction scheduling parameters.\n @kindex -mminimal-toc\n Modify generation of the TOC (Table Of Contents), which is created for\n every executable file.  The @samp{-mfull-toc} option is selected by\n-default.  In that case, GNU CC will allocate at least one TOC entry for\n-each unique non-automatic variable reference in your program.  GNU CC\n+default.  In that case, GCC will allocate at least one TOC entry for\n+each unique non-automatic variable reference in your program.  GCC\n will also place floating-point constants in the TOC.  However, only\n 16,384 entries are available in the TOC.\n \n If you receive a linker error message that saying you have overflowed\n the available TOC space, you can reduce the amount of TOC space used\n with the @samp{-mno-fp-in-toc} and @samp{-mno-sum-in-toc} options.\n-@samp{-mno-fp-in-toc} prevents GNU CC from putting floating-point\n-constants in the TOC and @samp{-mno-sum-in-toc} forces GNU CC to\n+@samp{-mno-fp-in-toc} prevents GCC from putting floating-point\n+constants in the TOC and @samp{-mno-sum-in-toc} forces GCC to\n generate code to calculate the sum of an address and a constant at\n run-time instead of putting that sum into the TOC.  You may specify one\n-or both of these options.  Each causes GNU CC to produce very slightly\n+or both of these options.  Each causes GCC to produce very slightly\n slower and larger code at the expense of conserving TOC space.\n \n If you still run out of space in the TOC even when you specify both of\n these options, specify @samp{-mminimal-toc} instead.  This option causes\n-GNU CC to make only one TOC entry for every file.  When you specify this\n-option, GNU CC will produce code that is slower and larger but which\n+GCC to make only one TOC entry for every file.  When you specify this\n+option, GCC will produce code that is slower and larger but which\n uses extremely little TOC space.  You may wish to use this option\n only on files that contain less frequently executed code. @refill\n \n@@ -4948,7 +4953,7 @@ Enable 64-bit PowerPC ABI and calling convention: 64-bit pointers, 64-bit\n @code{long} type, and the infrastructure needed to support them.\n Specifying @samp{-m64} implies @samp{-mpowerpc64} and\n @samp{-mpowerpc}, while @samp{-m32} disables the 64-bit ABI and\n-implies @samp{-mno-powerpc64}.  GNU CC defaults to @samp{-m32}.\n+implies @samp{-mno-powerpc64}.  GCC defaults to @samp{-m32}.\n \n @item -mxl-call\n @itemx -mno-xl-call\n@@ -4987,7 +4992,7 @@ option are incompatible.\n @kindex -msoft-float\n Generate code that does not use (uses) the floating-point register set.\n Software floating point emulation is provided if you use the\n-@samp{-msoft-float} option, and pass the option to GNU CC when linking.\n+@samp{-msoft-float} option, and pass the option to GCC when linking.\n \n @item -mmultiple\n @itemx -mno-multiple\n@@ -5411,7 +5416,7 @@ prevents compilation.\n \n @item -msoft-float\n Generate output containing library calls for floating point.\n-@strong{Warning:} the requisite libraries are not part of GNU CC.\n+@strong{Warning:} the requisite libraries are not part of GCC.\n Normally the facilities of the machine's usual C compiler are used, but\n this can't be done directly in cross-compilation.  You must make your\n own arrangements to provide suitable library functions for\n@@ -5555,7 +5560,7 @@ comparison is unordered.\n \n @item -msoft-float\n Generate output containing library calls for floating point.\n-@strong{Warning:} the requisite libraries are not part of GNU CC.\n+@strong{Warning:} the requisite libraries are not part of GCC.\n Normally the facilities of the machine's usual C compiler are used, but\n this can't be done directly in cross-compilation.  You must make your\n own arrangements to provide suitable library functions for\n@@ -5585,7 +5590,7 @@ also use the @samp{-ffast-math} switch.\n \n @item -malign-double\n @itemx -mno-align-double\n-Control whether GNU CC aligns @code{double}, @code{long double}, and\n+Control whether GCC aligns @code{double}, @code{long double}, and\n @code{long long} variables on a two word boundary or a one word\n boundary.  Aligning @code{double} variables on a two word boundary will\n produce code that runs somewhat faster on a @samp{Pentium} at the\n@@ -5597,13 +5602,13 @@ the published application binary interface specifications for the 386.\n \n @item -msvr3-shlib\n @itemx -mno-svr3-shlib\n-Control whether GNU CC places uninitialized locals into @code{bss} or\n+Control whether GCC places uninitialized locals into @code{bss} or\n @code{data}.  @samp{-msvr3-shlib} places these locals into @code{bss}.\n These options are meaningful only on System V Release 3.\n \n @item -mno-wide-multiply\n @itemx -mwide-multiply\n-Control whether GNU CC uses the @code{mul} and @code{imul} that produce\n+Control whether GCC uses the @code{mul} and @code{imul} that produce\n 64 bit results in @code{eax:edx} from 32 bit operands to do @code{long\n long} multiplies and 32-bit division by constants.\n \n@@ -5790,7 +5795,7 @@ does provide software floating point support.\n @samp{-msoft-float} changes the calling convention in the output file;\n therefore, it is only useful if you compile @emph{all} of a program with\n this option.  In particular, you need to compile @file{libgcc.a}, the\n-library that comes with GNU CC, with @samp{-msoft-float} in order for\n+library that comes with GCC, with @samp{-msoft-float} in order for\n this to work.\n @end table\n \n@@ -6009,7 +6014,7 @@ rounding towards plus infinity.  Thus, unless your program modifies the\n In the Alpha architecture, floating point traps are imprecise.  This\n means without software assistance it is impossible to recover from a\n floating trap and program execution normally needs to be terminated.\n-GNU CC can generate code that can assist operating system trap handlers\n+GCC can generate code that can assist operating system trap handlers\n in determining the exact location that caused a floating point trap.\n Depending on the requirements of an application, different levels of\n precisions can be selected:\n@@ -6040,12 +6045,12 @@ generated assembly file.  Under DEC Unix, this has the effect that\n IEEE-conformant math library routines will be linked in.\n \n @item -mbuild-constants\n-Normally GNU CC examines a 32- or 64-bit integer constant to\n+Normally GCC examines a 32- or 64-bit integer constant to\n see if it can construct it from smaller constants in two or three\n instructions.  If it cannot, it will output the constant as a literal and\n generate code to load it from the data segment at runtime.\n \n-Use this option to require GNU CC to construct @emph{all} integer constants\n+Use this option to require GCC to construct @emph{all} integer constants\n using code, even if it takes more instructions (the maximum is six).\n \n You would typically use this option to build a shared library dynamic\n@@ -6063,19 +6068,19 @@ assembler (@samp{-malpha-as}) or by the GNU assembler @samp{-mgas}.\n @itemx -mno-cix\n @itemx -mmax\n @itemx -mno-max\n-Indicate whether GNU CC should generate code to use the optional BWX,\n+Indicate whether GCC should generate code to use the optional BWX,\n CIX, and MAX instruction sets.  The default is to use the instruction sets\n supported by the CPU type specified via @samp{-mcpu=} option or that\n-of the CPU on which GNU CC was built if none was specified.\n+of the CPU on which GCC was built if none was specified.\n \n @item -mcpu=@var{cpu_type}\n Set the instruction set, register set, and instruction scheduling\n parameters for machine type @var{cpu_type}.  You can specify either the\n-@samp{EV} style name or the corresponding chip number.  GNU CC\n+@samp{EV} style name or the corresponding chip number.  GCC\n supports scheduling parameters for the EV4 and EV5 family of processors\n and will choose the default values for the instruction set from\n the processor you specify.  If you do not specify a processor type,\n-GNU CC will default to the processor on which the compiler was built.\n+GCC will default to the processor on which the compiler was built.\n \n Supported values for @var{cpu_type} are\n \n@@ -6596,7 +6601,7 @@ programs that don't use exception handling.\n Return ``short'' @code{struct} and @code{union} values in memory like\n longer ones, rather than in registers.  This convention is less\n efficient, but it has the advantage of allowing intercallability between\n-GNU CC-compiled files and files compiled with other compilers.\n+GCC-compiled files and files compiled with other compilers.\n \n The precise convention for returning structures in memory depends\n on the target configuration macros.\n@@ -6610,9 +6615,9 @@ returned in registers when possible.  This is more efficient for small\n structures than @samp{-fpcc-struct-return}.\n \n If you specify neither @samp{-fpcc-struct-return} nor its contrary\n-@samp{-freg-struct-return}, GNU CC defaults to whichever convention is\n-standard for the target.  If there is no standard convention, GNU CC\n-defaults to @samp{-fpcc-struct-return}, except on targets where GNU CC\n+@samp{-freg-struct-return}, GCC defaults to whichever convention is\n+standard for the target.  If there is no standard convention, GCC\n+defaults to @samp{-fpcc-struct-return}, except on targets where GCC\n is the principal compiler.  In those cases, we can choose the standard,\n and we chose the more efficient register return alternative.\n \n@@ -6648,7 +6653,7 @@ destructors) in the form used by the GNU linker (on systems where the GNU\n linker is the standard method of handling them).  Use this option when\n you want to use a non-GNU linker, which also requires using the\n @code{collect2} program to make sure the system linker includes\n-constructors and destructors.  (@code{collect2} is included in the GNU CC\n+constructors and destructors.  (@code{collect2} is included in the GCC\n distribution.)  For systems which @emph{must} use @code{collect2}, the\n compiler driver @code{gcc} is configured to do this automatically.\n \n@@ -6674,7 +6679,7 @@ Consider all memory references through pointers to be volatile.\n \n @item -fvolatile-global\n Consider all memory references to extern and global data items to\n-be volatile.  GNU CC does not consider static data items to be volatile\n+be volatile.  GCC does not consider static data items to be volatile\n because of this switch.\n \n @item -fvolatile-static\n@@ -6687,15 +6692,15 @@ Generate position-independent code (PIC) suitable for use in a shared\n library, if supported for the target machine.  Such code accesses all\n constant addresses through a global offset table (GOT).  The dynamic\n loader resolves the GOT entries when the program starts (the dynamic\n-loader is not part of GNU CC; it is part of the operating system).  If\n+loader is not part of GCC; it is part of the operating system).  If\n the GOT size for the linked executable exceeds a machine-specific\n maximum size, you get an error message from the linker indicating that\n @samp{-fpic} does not work; in that case, recompile with @samp{-fPIC}\n instead.  (These maximums are 16k on the m88k, 8k on the Sparc, and 32k\n on the m68k and RS/6000.  The 386 has no such limit.)\n \n Position-independent code requires special support, and therefore works\n-only on certain machines.  For the 386, GNU CC supports PIC for System V\n+only on certain machines.  For the 386, GCC supports PIC for System V\n but not for the Sun 386i.  Code generated for the IBM RS/6000 is always\n position-independent.\n \n@@ -6755,7 +6760,7 @@ not want to use this option, since it makes the code suboptimal, and\n the offsets of structure members won't agree with system libraries.\n \n @item -fcheck-memory-usage\n-Generate extra code to check each memory access.  GNU CC will generate\n+Generate extra code to check each memory access.  GCC will generate\n code that is suitable for a detector of bad memory accesses such as\n @file{Checker}.\n \n@@ -6770,7 +6775,7 @@ If you do not, you might get erroneous messages from the detector.\n If you use functions from a library that have side-effects (such as\n @code{read}), you might not be able to recompile the library and\n specify this option.  In that case, you can enable the\n-@samp{-fprefix-function-name} option, which requests GNU CC to encapsulate\n+@samp{-fprefix-function-name} option, which requests GCC to encapsulate\n your code and make other functions look as if they were compiled with\n @samp{-fcheck-memory-usage}.  This is done by calling ``stubs'',\n which are provided by the detector.  If you cannot find or build\n@@ -6796,8 +6801,8 @@ These calls would be similar to those done in the stubs described above.\n @c        should be documented!\n \n @item -fprefix-function-name\n-Request GNU CC to add a prefix to the symbols generated for function names.\n-GNU CC adds a prefix to the names of functions defined as well as\n+Request GCC to add a prefix to the symbols generated for function names.\n+GCC adds a prefix to the names of functions defined as well as\n functions called.  Code compiled with this option and code compiled\n without the option can't be linked together, unless stubs are used.\n \n@@ -6812,7 +6817,7 @@ foo (int a)\n @end example\n \n @noindent\n-GNU CC will compile the code as if it was written:\n+GCC will compile the code as if it was written:\n @example\n extern void prefix_bar (int);\n void\n@@ -6893,27 +6898,27 @@ option, and that not all targets provide complete support for it.\n @end table\n \n @node Environment Variables\n-@section Environment Variables Affecting GNU CC\n+@section Environment Variables Affecting GCC\n @cindex environment variables\n \n-This section describes several environment variables that affect how GNU\n-CC operates.  Some of them work by specifying directories or prefixes to use\n+This section describes several environment variables that affect how GCC\n+operates.  Some of them work by specifying directories or prefixes to use\n when searching for various kinds of files. Some are used to specify other\n aspects of the compilation environment.\n \n @ifclear INTERNALS\n Note that you can also specify places to search using options such as\n @samp{-B}, @samp{-I} and @samp{-L} (@pxref{Directory Options}).  These\n take precedence over places specified using environment variables, which\n-in turn take precedence over those specified by the configuration of GNU\n-CC.\n+in turn take precedence over those specified by the configuration of GCC.\n+\n @end ifclear\n @ifset INTERNALS\n Note that you can also specify places to search using options such as\n @samp{-B}, @samp{-I} and @samp{-L} (@pxref{Directory Options}).  These\n take precedence over places specified using environment variables, which\n-in turn take precedence over those specified by the configuration of GNU\n-CC.  @xref{Driver}.\n+in turn take precedence over those specified by the configuration of GCC.\n+@xref{Driver}.\n @end ifset\n \n @table @code\n@@ -6934,16 +6939,16 @@ CC.  @xref{Driver}.\n @c @findex LC_TIME\n @findex LC_ALL\n @cindex locale\n-These environment variables control the way that GNU CC uses\n-localization information that allow GNU CC to work with different\n-national conventions.  GNU CC inspects the locale categories\n+These environment variables control the way that GCC uses\n+localization information that allow GCC to work with different\n+national conventions.  GCC inspects the locale categories\n @code{LC_CTYPE} and @code{LC_MESSAGES} if it has been configured to do\n so.  These locale categories can be set to any value supported by your\n installation.  A typical value is @samp{en_UK} for English in the United\n Kingdom.\n \n The @code{LC_CTYPE} environment variable specifies character\n-classification.  GNU CC uses it to determine the character boundaries in\n+classification.  GCC uses it to determine the character boundaries in\n a string; this is needed for some multibyte encodings that contain quote\n and escape characters that would otherwise be interpreted as a string\n end or escape.\n@@ -6954,13 +6959,13 @@ use in diagnostic messages.\n If the @code{LC_ALL} environment variable is set, it overrides the value\n of @code{LC_CTYPE} and @code{LC_MESSAGES}; otherwise, @code{LC_CTYPE}\n and @code{LC_MESSAGES} default to the value of the @code{LANG}\n-environment variable.  If none of these variables are set, GNU CC\n+environment variable.  If none of these variables are set, GCC\n defaults to traditional C English behavior.\n \n @item TMPDIR\n @findex TMPDIR\n If @code{TMPDIR} is set, it specifies the directory to use for temporary\n-files.  GNU CC uses temporary files to hold the output of one stage of\n+files.  GCC uses temporary files to hold the output of one stage of\n compilation which is to be used as input to the next stage: for example,\n the output of the preprocessor, which is the input to the compiler\n proper.\n@@ -6972,7 +6977,7 @@ names of the subprograms executed by the compiler.  No slash is added\n when this prefix is combined with the name of a subprogram, but you can\n specify a prefix that ends with a slash if you wish.\n \n-If GNU CC cannot find the subprogram using the specified prefix, it\n+If GCC cannot find the subprogram using the specified prefix, it\n tries looking in the usual places for the subprogram.\n \n The default value of @code{GCC_EXEC_PREFIX} is\n@@ -6987,27 +6992,27 @@ used for linking.\n In addition, the prefix is used in an unusual way in finding the\n directories to search for header files.  For each of the standard\n directories whose name normally begins with @samp{/usr/local/lib/gcc-lib}\n-(more precisely, with the value of @code{GCC_INCLUDE_DIR}), GNU CC tries\n+(more precisely, with the value of @code{GCC_INCLUDE_DIR}), GCC tries\n replacing that beginning with the specified prefix to produce an\n-alternate directory name.  Thus, with @samp{-Bfoo/}, GNU CC will search\n+alternate directory name.  Thus, with @samp{-Bfoo/}, GCC will search\n @file{foo/bar} where it would normally search @file{/usr/local/lib/bar}.\n These alternate directories are searched first; the standard directories\n come next.\n \n @item COMPILER_PATH\n @findex COMPILER_PATH\n The value of @code{COMPILER_PATH} is a colon-separated list of\n-directories, much like @code{PATH}.  GNU CC tries the directories thus\n+directories, much like @code{PATH}.  GCC tries the directories thus\n specified when searching for subprograms, if it can't find the\n subprograms using @code{GCC_EXEC_PREFIX}.\n \n @item LIBRARY_PATH\n @findex LIBRARY_PATH\n The value of @code{LIBRARY_PATH} is a colon-separated list of\n directories, much like @code{PATH}.  When configured as a native compiler,\n-GNU CC tries the directories thus specified when searching for special\n+GCC tries the directories thus specified when searching for special\n linker files, if it can't find them using @code{GCC_EXEC_PREFIX}.  Linking\n-using GNU CC also uses these directories when searching for ordinary\n+using GCC also uses these directories when searching for ordinary\n libraries for the @samp{-l} option (but directories specified with\n @samp{-L} come first).\n \n@@ -7020,7 +7025,7 @@ libraries for the @samp{-l} option (but directories specified with\n @c @itemx OBJCPLUS_INCLUDE_PATH\n These environment variables pertain to particular languages.  Each\n variable's value is a colon-separated list of directories, much like\n-@code{PATH}.  When GNU CC searches for header files, it tries the\n+@code{PATH}.  When GCC searches for header files, it tries the\n directories listed in the variable for the language you are using, after\n the directories specified with @samp{-I} but before the standard header\n file directories.\n@@ -7113,9 +7118,9 @@ original source file.  The original file is renamed to a name ending\n with @samp{.save}.  If the @samp{.save} file already exists, then\n the source file is simply discarded.\n \n-@code{protoize} and @code{unprotoize} both depend on GNU CC itself to\n+@code{protoize} and @code{unprotoize} both depend on GCC itself to\n scan the program and collect information about the functions it uses.\n-So neither of these programs will work until GNU CC is installed.\n+So neither of these programs will work until GCC is installed.\n \n Here is a table of the options you can use with @code{protoize} and\n @code{unprotoize}.  Each option works with both programs unless"}]}