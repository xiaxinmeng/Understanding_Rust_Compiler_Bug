{"sha": "ffed8a0113115cd45517924de7e3d77fcc311ed8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZlZDhhMDExMzExNWNkNDU1MTc5MjRkZTdlM2Q3N2ZjYzMxMWVkOA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2008-01-04T14:49:28Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2008-01-04T14:49:28Z"}, "message": "re PR tree-optimization/34448 (ICE in declare_inline_vars, at tree-inline.c:3243)\n\n        PR tree-optimization/34448\n        PR tree-optimization/34465\n        * gimplify.c (gimplify_init_constructor): Add new parameter\n        notify_temp_creation.  Use it.\n        (gimplify_modify_expr_rhs): Take volatiles into account when\n        optimizing constructors.\n        Do not optimize constructors if gimplify_init_constructor will dump to\n        memory.\n        * gcc.dg/tree-ssa/pr32901.c: Tests const volatiles.\n        * gcc.c-torture/compile/pr34448.c: New.\n\nFrom-SVN: r131323", "tree": {"sha": "eb0540227d9c314ec673b8e4248e0c999272e22f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb0540227d9c314ec673b8e4248e0c999272e22f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffed8a0113115cd45517924de7e3d77fcc311ed8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffed8a0113115cd45517924de7e3d77fcc311ed8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffed8a0113115cd45517924de7e3d77fcc311ed8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffed8a0113115cd45517924de7e3d77fcc311ed8/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b5ca517cae507a6b6eb71a8da2d700d90f9522ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5ca517cae507a6b6eb71a8da2d700d90f9522ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5ca517cae507a6b6eb71a8da2d700d90f9522ae"}], "stats": {"total": 131, "additions": 116, "deletions": 15}, "files": [{"sha": "d0468013ed57e9539a176148930bdc2f4433f4c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffed8a0113115cd45517924de7e3d77fcc311ed8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffed8a0113115cd45517924de7e3d77fcc311ed8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ffed8a0113115cd45517924de7e3d77fcc311ed8", "patch": "@@ -1,3 +1,16 @@\n+2008-01-04  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/34448\n+\tPR tree-optimization/34465\n+\t* gimplify.c (gimplify_init_constructor): Add new parameter\n+\tnotify_temp_creation.  Use it.\n+\t(gimplify_modify_expr_rhs): Take volatiles into account when\n+\toptimizing constructors.\n+\tDo not optimize constructors if gimplify_init_constructor will dump to\n+\tmemory.\n+\t* gcc.dg/tree-ssa/pr32901.c: Tests const volatiles.\n+\t* gcc.c-torture/compile/pr34448.c: New.\n+\n 2008-01-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR gcov-profile/34609"}, {"sha": "dd832228f0aa863397ce8d57139a69956d252ddb", "filename": "gcc/gimplify.c", "status": "modified", "additions": 59, "deletions": 11, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffed8a0113115cd45517924de7e3d77fcc311ed8/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffed8a0113115cd45517924de7e3d77fcc311ed8/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=ffed8a0113115cd45517924de7e3d77fcc311ed8", "patch": "@@ -3119,11 +3119,18 @@ gimplify_init_ctor_eval (tree object, VEC(constructor_elt,gc) *elts,\n \n    Note that we still need to clear any elements that don't have explicit\n    initializers, so if not all elements are initialized we keep the\n-   original MODIFY_EXPR, we just remove all of the constructor elements.  */\n+   original MODIFY_EXPR, we just remove all of the constructor elements.\n+\n+   If NOTIFY_TEMP_CREATION is true, do not gimplify, just return\n+   GS_ERROR if we would have to create a temporary when gimplifying\n+   this constructor.  Otherwise, return GS_OK.\n+\n+   If NOTIFY_TEMP_CREATION is false, just do the gimplification.  */\n \n static enum gimplify_status\n gimplify_init_constructor (tree *expr_p, tree *pre_p,\n-\t\t\t   tree *post_p, bool want_value)\n+\t\t\t   tree *post_p, bool want_value,\n+\t\t\t   bool notify_temp_creation)\n {\n   tree object;\n   tree ctor = GENERIC_TREE_OPERAND (*expr_p, 1);\n@@ -3134,10 +3141,13 @@ gimplify_init_constructor (tree *expr_p, tree *pre_p,\n   if (TREE_CODE (ctor) != CONSTRUCTOR)\n     return GS_UNHANDLED;\n \n-  ret = gimplify_expr (&GENERIC_TREE_OPERAND (*expr_p, 0), pre_p, post_p,\n-\t\t       is_gimple_lvalue, fb_lvalue);\n-  if (ret == GS_ERROR)\n-    return ret;\n+  if (!notify_temp_creation)\n+    {\n+      ret = gimplify_expr (&GENERIC_TREE_OPERAND (*expr_p, 0), pre_p, post_p,\n+\t\t\t   is_gimple_lvalue, fb_lvalue);\n+      if (ret == GS_ERROR)\n+\treturn ret;\n+    }\n   object = GENERIC_TREE_OPERAND (*expr_p, 0);\n \n   elts = CONSTRUCTOR_ELTS (ctor);\n@@ -3159,7 +3169,11 @@ gimplify_init_constructor (tree *expr_p, tree *pre_p,\n \t   individual elements.  The exception is that a CONSTRUCTOR node\n \t   with no elements indicates zero-initialization of the whole.  */\n \tif (VEC_empty (constructor_elt, elts))\n-\t  break;\n+\t  {\n+\t    if (notify_temp_creation)\n+\t      return GS_OK;\n+\t    break;\n+\t  }\n \n \t/* Fetch information about the constructor to direct later processing.\n \t   We might want to make static versions of it in various cases, and\n@@ -3175,6 +3189,8 @@ gimplify_init_constructor (tree *expr_p, tree *pre_p,\n \t    && TREE_READONLY (object)\n \t    && TREE_CODE (object) == VAR_DECL)\n \t  {\n+\t    if (notify_temp_creation)\n+\t      return GS_ERROR;\n \t    DECL_INITIAL (object) = ctor;\n \t    TREE_STATIC (object) = 1;\n \t    if (!DECL_NAME (object))\n@@ -3251,7 +3267,12 @@ gimplify_init_constructor (tree *expr_p, tree *pre_p,\n \n \t    if (size > 0 && !can_move_by_pieces (size, align))\n \t      {\n-\t\ttree new = create_tmp_var_raw (type, \"C\");\n+\t\ttree new;\n+\n+\t\tif (notify_temp_creation)\n+\t\t  return GS_ERROR;\n+\n+\t\tnew = create_tmp_var_raw (type, \"C\");\n \n \t\tgimple_add_tmp_var (new);\n \t\tTREE_STATIC (new) = 1;\n@@ -3273,6 +3294,9 @@ gimplify_init_constructor (tree *expr_p, tree *pre_p,\n \t      }\n \t  }\n \n+\tif (notify_temp_creation)\n+\t  return GS_OK;\n+\n \t/* If there are nonzero elements, pre-evaluate to capture elements\n \t   overlapping with the lhs into temporaries.  We must do this before\n \t   clearing to fetch the values before they are zeroed-out.  */\n@@ -3312,6 +3336,9 @@ gimplify_init_constructor (tree *expr_p, tree *pre_p,\n       {\n \ttree r, i;\n \n+\tif (notify_temp_creation)\n+\t  return GS_OK;\n+\n \t/* Extract the real and imaginary parts out of the ctor.  */\n \tgcc_assert (VEC_length (constructor_elt, elts) == 2);\n \tr = VEC_index (constructor_elt, elts, 0)->value;\n@@ -3348,6 +3375,9 @@ gimplify_init_constructor (tree *expr_p, tree *pre_p,\n \tunsigned HOST_WIDE_INT ix;\n \tconstructor_elt *ce;\n \n+\tif (notify_temp_creation)\n+\t  return GS_OK;\n+\n \t/* Go ahead and simplify constant constructors to VECTOR_CST.  */\n \tif (TREE_CONSTANT (ctor))\n \t  {\n@@ -3488,10 +3518,27 @@ gimplify_modify_expr_rhs (tree *expr_p, tree *from_p, tree *to_p, tree *pre_p,\n \t   constructor expression to the RHS of the MODIFY_EXPR.  */\n \tif (DECL_INITIAL (*from_p)\n \t    && TYPE_READONLY (TREE_TYPE (*from_p))\n+\t    && !TREE_THIS_VOLATILE (*from_p)\n \t    && TREE_CODE (DECL_INITIAL (*from_p)) == CONSTRUCTOR)\n \t  {\n-\t    *from_p = DECL_INITIAL (*from_p);\n-\t    ret = GS_OK;\n+\t    tree old_from = *from_p;\n+\n+\t    /* Move the constructor into the RHS.  */\n+\t    *from_p = unshare_expr (DECL_INITIAL (*from_p));\n+\n+\t    /* Let's see if gimplify_init_constructor will need to put\n+\t       it in memory.  If so, revert the change.  */\n+\t    ret = gimplify_init_constructor (expr_p, NULL, NULL, false, true);\n+\t    if (ret == GS_ERROR)\n+\t      {\n+\t\t*from_p = old_from;\n+\t\t/* Fall through.  */\n+\t      }\n+\t    else\n+\t      {\n+\t\tret = GS_OK;\n+\t\tbreak;\n+\t      }\n \t  }\n \tret = GS_UNHANDLED;\n \tbreak;\n@@ -3551,7 +3598,8 @@ gimplify_modify_expr_rhs (tree *expr_p, tree *from_p, tree *to_p, tree *pre_p,\n       case CONSTRUCTOR:\n \t/* If we're initializing from a CONSTRUCTOR, break this into\n \t   individual MODIFY_EXPRs.  */\n-\treturn gimplify_init_constructor (expr_p, pre_p, post_p, want_value);\n+\treturn gimplify_init_constructor (expr_p, pre_p, post_p, want_value,\n+\t\t\t\t\t  false);\n \n       case COND_EXPR:\n \t/* If we're assigning to a non-register type, push the assignment"}, {"sha": "988465efe742dbd3710030b89551df01249bf1da", "filename": "gcc/testsuite/gcc.c-torture/compile/pr34448.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffed8a0113115cd45517924de7e3d77fcc311ed8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr34448.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffed8a0113115cd45517924de7e3d77fcc311ed8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr34448.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr34448.c?ref=ffed8a0113115cd45517924de7e3d77fcc311ed8", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+typedef struct chunk_t chunk_t;\n+struct chunk_t\n+{\n+  unsigned char *ptr;\n+  long unsigned int len;\n+};\n+extern chunk_t asn1_wrap (chunk_t c, ...);\n+typedef struct linked_list_t linked_list_t;\n+chunk_t ietfAttr_list_encode (linked_list_t * list);\n+extern linked_list_t *groups;\n+static unsigned char ASN1_group_oid_str[] = {\n+    0x06\n+};\n+static const chunk_t ASN1_group_oid = {\n+  ASN1_group_oid_str, sizeof (ASN1_group_oid_str)\n+};\n+static chunk_t\n+build_attribute_type (const chunk_t type, chunk_t content)\n+{\n+  return type;\n+}\n+static chunk_t\n+build_attributes (void)\n+{\n+  return asn1_wrap (build_attribute_type (ASN1_group_oid,\n+\t\t\t\t\t  ietfAttr_list_encode (groups)));\n+}\n+void build_attr_cert (void)\n+{\n+  asn1_wrap (build_attributes ());\n+}"}, {"sha": "c0ba060e115bb47f3ece1a5d0bc2ab698a7832a2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr32901.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffed8a0113115cd45517924de7e3d77fcc311ed8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr32901.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffed8a0113115cd45517924de7e3d77fcc311ed8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr32901.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr32901.c?ref=ffed8a0113115cd45517924de7e3d77fcc311ed8", "patch": "@@ -7,18 +7,24 @@ struct foo {\n         unsigned : 4;\n };\n \n-extern struct foo thefoo;\n+extern struct foo thefoo, theotherfoo;\n \n void setup_foo(void)\n {\n         const struct foo init = {\n                 .a1 = 1,\n                 .a2 = 5,\n         };\n+\tvolatile const struct foo volinit = {\n+\t\t.a1 = 0,\n+\t\t.a2 = 6\n+\t};\n         thefoo = init;\n+\ttheotherfoo = volinit;\n }\n \n-/* { dg-final { scan-tree-dump-times \"thefoo.0 = \\{\\}\" 1 \"gimple\"} } */\n-/* { dg-final { scan-tree-dump-times \"thefoo.0.a1 = 1\" 1 \"gimple\"} } */\n-/* { dg-final { scan-tree-dump-times \"thefoo.0.a2 = 5\" 1 \"gimple\"} } */\n+/* { dg-final { scan-tree-dump-times \"thefoo.* = {}\" 1 \"gimple\"} } */\n+/* { dg-final { scan-tree-dump-times \"thefoo.* = 1\" 1 \"gimple\"} } */\n+/* { dg-final { scan-tree-dump-times \"thefoo.* = 5\" 1 \"gimple\"} } */\n+/* { dg-final { scan-tree-dump-times \"theotherfoo = volinit\" 1 \"gimple\"} } */\n /* { dg-final { cleanup-tree-dump \"gimple\" } } */"}]}