{"sha": "d78182cc0ce05104e2f1cd40c97de974f075479f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc4MTgyY2MwY2UwNTEwNGUyZjFjZDQwYzk3ZGU5NzRmMDc1NDc5Zg==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-10-13T10:08:50Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-10-13T10:08:50Z"}, "message": "Support DEFPARAMENUM in params.def\n\n2015-10-13  Tom de Vries  <tom@codesourcery.com>\n\n\t* Makefile.in (PARAMS_H, PLUGIN_HEADERS): Add params-enum.h.\n\t* params-enum.h: New file.\n\t* opts.c (handle_param): Handle case that param arg is a string.\n\t* params-list.h: Handle DEFPARAMENUM5 in params.def.\n\t* params.c (find_param): New function, factored out of ...\n\t(set_param_value): ... here.\n\t(param_string_value_p): New function.\n\t* params.h (struct param_info): Add value_names field.\n\t(find_param, param_string_value_p): Declare.\n\nFrom-SVN: r228755", "tree": {"sha": "89563bd3c31401b7aa9c038829d9746e20a87a34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89563bd3c31401b7aa9c038829d9746e20a87a34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d78182cc0ce05104e2f1cd40c97de974f075479f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d78182cc0ce05104e2f1cd40c97de974f075479f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d78182cc0ce05104e2f1cd40c97de974f075479f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d78182cc0ce05104e2f1cd40c97de974f075479f/comments", "author": null, "committer": null, "parents": [{"sha": "7fd103efccee2a5706df7ffafae9315995edd841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fd103efccee2a5706df7ffafae9315995edd841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fd103efccee2a5706df7ffafae9315995edd841"}], "stats": {"total": 182, "additions": 150, "deletions": 32}, "files": [{"sha": "83e4bfadfd4eae4ab69b36af39f47d4c4c8bbc74", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78182cc0ce05104e2f1cd40c97de974f075479f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78182cc0ce05104e2f1cd40c97de974f075479f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d78182cc0ce05104e2f1cd40c97de974f075479f", "patch": "@@ -1,3 +1,15 @@\n+2015-10-13  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* Makefile.in (PARAMS_H, PLUGIN_HEADERS): Add params-enum.h.\n+\t* params-enum.h: New file.\n+\t* opts.c (handle_param): Handle case that param arg is a string.\n+\t* params-list.h: Handle DEFPARAMENUM5 in params.def.\n+\t* params.c (find_param): New function, factored out of ...\n+\t(set_param_value): ... here.\n+\t(param_string_value_p): New function.\n+\t* params.h (struct param_info): Add value_names field.\n+\t(find_param, param_string_value_p): Declare.\n+\n 2015-10-13  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/67476"}, {"sha": "783e4c989ac33e97833fd26f55d9dbd1c88b85ba", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78182cc0ce05104e2f1cd40c97de974f075479f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78182cc0ce05104e2f1cd40c97de974f075479f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=d78182cc0ce05104e2f1cd40c97de974f075479f", "patch": "@@ -890,7 +890,7 @@ RTL_BASE_H = coretypes.h rtl.h rtl.def $(MACHMODE_H) reg-notes.def \\\n FIXED_VALUE_H = fixed-value.h $(MACHMODE_H) double-int.h\n RTL_H = $(RTL_BASE_H) $(FLAGS_H) genrtl.h\n READ_MD_H = $(OBSTACK_H) $(HASHTAB_H) read-md.h\n-PARAMS_H = params.h params.def\n+PARAMS_H = params.h params-enum.h params.def\n BUILTINS_DEF = builtins.def sync-builtins.def omp-builtins.def \\\n \tgtm-builtins.def sanitizer.def cilkplus.def cilk-builtins.def\n INTERNAL_FN_DEF = internal-fn.def\n@@ -3260,8 +3260,8 @@ PLUGIN_HEADERS = $(TREE_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   tree-iterator.h $(PLUGIN_H) $(TREE_SSA_H) langhooks.h incpath.h debug.h \\\n   $(EXCEPT_H) tree-ssa-sccvn.h real.h output.h $(IPA_UTILS_H) \\\n   $(C_PRAGMA_H)  $(CPPLIB_H)  $(FUNCTION_H) \\\n-  cppdefault.h flags.h $(MD5_H) params.def params.h prefix.h tree-inline.h \\\n-  $(GIMPLE_PRETTY_PRINT_H) realmpfr.h \\\n+  cppdefault.h flags.h $(MD5_H) params.def params.h params-enum.h \\\n+  prefix.h tree-inline.h $(GIMPLE_PRETTY_PRINT_H) realmpfr.h \\\n   $(IPA_PROP_H) $(TARGET_H) $(RTL_H) $(TM_P_H) $(CFGLOOP_H) $(EMIT_RTL_H) \\\n   version.h stringpool.h gimplify.h gimple-iterator.h gimple-ssa.h \\\n   fold-const.h tree-cfg.h tree-into-ssa.h tree-ssanames.h print-tree.h \\"}, {"sha": "89b3e793de62cb3f372c1daf1c9560e6b96dd304", "filename": "gcc/opts.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78182cc0ce05104e2f1cd40c97de974f075479f/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78182cc0ce05104e2f1cd40c97de974f075479f/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=d78182cc0ce05104e2f1cd40c97de974f075479f", "patch": "@@ -2128,14 +2128,21 @@ handle_param (struct gcc_options *opts, struct gcc_options *opts_set,\n \t      arg);\n   else\n     {\n-      value = integral_argument (equal + 1);\n-      if (value == -1)\n-\terror_at (loc, \"invalid --param value %qs\", equal + 1);\n+      *equal = '\\0';\n+\n+      enum compiler_param index;\n+      if (!find_param (arg, &index))\n+\terror_at (loc, \"invalid --param name %qs\", arg);\n       else\n \t{\n-\t  *equal = '\\0';\n-\t  set_param_value (arg, value,\n-\t\t\t   opts->x_param_values, opts_set->x_param_values);\n+\t  if (!param_string_value_p (index, equal + 1, &value))\n+\t    value = integral_argument (equal + 1);\n+\n+\t  if (value == -1)\n+\t    error_at (loc, \"invalid --param value %qs\", equal + 1);\n+\t  else\n+\t    set_param_value (arg, value,\n+\t\t\t     opts->x_param_values, opts_set->x_param_values);\n \t}\n     }\n "}, {"sha": "a95e16c21e4806b7216ace9464f0ebbd0dd474e3", "filename": "gcc/params-enum.h", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78182cc0ce05104e2f1cd40c97de974f075479f/gcc%2Fparams-enum.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78182cc0ce05104e2f1cd40c97de974f075479f/gcc%2Fparams-enum.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams-enum.h?ref=d78182cc0ce05104e2f1cd40c97de974f075479f", "patch": "@@ -0,0 +1,39 @@\n+/* params-enums.h - Run-time parameter enums.\n+   Copyright (C) 2015 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define DEFPARAM(ENUM, OPTION, HELP, DEFAULT, MIN, MAX)\n+#define DEFPARAMENUMNAME(ENUM) ENUM ## _KIND\n+#define DEFPARAMENUMVAL(ENUM, V) ENUM ## _KIND_ ## V\n+#define DEFPARAMENUMTERM(ENUM) ENUM ## _KIND_ ## LAST\n+#define DEFPARAMENUM5(ENUM, OPTION, HELP, DEFAULT, V0, V1, V2, V3, V4)\t\\\n+  enum DEFPARAMENUMNAME (ENUM)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    DEFPARAMENUMVAL (ENUM, V0),\t\t\t\t\t\\\n+    DEFPARAMENUMVAL (ENUM, V1),\t\t\t\t\t\\\n+    DEFPARAMENUMVAL (ENUM, V2),\t\t\t\t\t\\\n+    DEFPARAMENUMVAL (ENUM, V3),\t\t\t\t\t\\\n+    DEFPARAMENUMVAL (ENUM, V4),\t\t\t\t\t\\\n+    DEFPARAMENUMTERM (ENUM)\t\t\t\t\t\\\n+  };\n+#include \"params.def\"\n+#undef DEFPARAMENUM5\n+#undef DEFPARAMENUMTERM\n+#undef DEFPARAMENUMVAL\n+#undef DEFPARAMENUMNAME\n+#undef DEFPARAM"}, {"sha": "fa76856338470ef29b05074dee3ae5f3ace75448", "filename": "gcc/params-list.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78182cc0ce05104e2f1cd40c97de974f075479f/gcc%2Fparams-list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78182cc0ce05104e2f1cd40c97de974f075479f/gcc%2Fparams-list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams-list.h?ref=d78182cc0ce05104e2f1cd40c97de974f075479f", "patch": "@@ -19,5 +19,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #define DEFPARAM(enumerator, option, nocmsgid, default, min, max) \\\n   enumerator,\n+#define DEFPARAMENUM5(enumerator, option, nocmsgid, default, \\\n+\t\t      v0, v1, v2, v3, v4) enumerator,\n #include \"params.def\"\n #undef DEFPARAM\n+#undef DEFPARAMENUM5"}, {"sha": "d58d81edc887ebd0719d74cee3a7226518da5cb5", "filename": "gcc/params.c", "status": "modified", "additions": 74, "deletions": 23, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78182cc0ce05104e2f1cd40c97de974f075479f/gcc%2Fparams.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78182cc0ce05104e2f1cd40c97de974f075479f/gcc%2Fparams.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.c?ref=d78182cc0ce05104e2f1cd40c97de974f075479f", "patch": "@@ -23,6 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"common/common-target.h\"\n #include \"params.h\"\n+#include \"params-enum.h\"\n #include \"diagnostic-core.h\"\n \n /* An array containing the compiler parameters and their current\n@@ -37,12 +38,23 @@ static size_t num_compiler_params;\n    default values determined.  */\n static bool params_finished;\n \n+#define DEFPARAM(ENUM, OPTION, HELP, DEFAULT, MIN, MAX)\n+#define DEFPARAMENUM5(ENUM, OPTION, HELP, DEFAULT, V0, V1, V2, V3, V4)\t\\\n+  static const char *values_ ## ENUM [] = { #V0, #V1, #V2, #V3, #V4, NULL };\n+#include \"params.def\"\n+#undef DEFPARAMENUM5\n+#undef DEFPARAM\n+\n static const param_info lang_independent_params[] = {\n #define DEFPARAM(ENUM, OPTION, HELP, DEFAULT, MIN, MAX) \\\n-  { OPTION, DEFAULT, MIN, MAX, HELP },\n+  { OPTION, DEFAULT, MIN, MAX, HELP, NULL },\n+#define DEFPARAMENUM5(ENUM, OPTION, HELP, DEFAULT,\t     \\\n+\t\t      V0, V1, V2, V3, V4)\t\t     \\\n+  { OPTION, (int)ENUM ## _KIND_ ## DEFAULT, 0, 4, HELP, values_ ## ENUM },\n #include \"params.def\"\n #undef DEFPARAM\n-  { NULL, 0, 0, 0, NULL }\n+#undef DEFPARAMENUM5\n+  { NULL, 0, 0, 0, NULL, NULL }\n };\n \n /* Add the N PARAMS to the current list of compiler parameters.  */\n@@ -114,6 +126,45 @@ set_param_value_internal (compiler_param num, int value,\n     params_set[i] = true;\n }\n \n+/* Return true if it can find the matching entry for NAME in the parameter\n+   table, and assign the entry index to INDEX.  Return false otherwise.  */\n+\n+bool\n+find_param (const char *name, enum compiler_param *index)\n+{\n+  for (size_t i = 0; i < num_compiler_params; ++i)\n+    if (strcmp (compiler_params[i].option, name) == 0)\n+      {\n+\t*index = (enum compiler_param) i;\n+\treturn true;\n+      }\n+\n+  return false;\n+}\n+\n+/* Return true if param with entry index INDEX should be defined using strings.\n+   If so, return the value corresponding to VALUE_NAME in *VALUE_P.  */\n+\n+bool\n+param_string_value_p (enum compiler_param index, const char *value_name,\n+\t\t      int *value_p)\n+{\n+  param_info *entry = &compiler_params[(int) index];\n+  if (entry->value_names == NULL)\n+    return false;\n+\n+  *value_p = -1;\n+\n+  for (int i = 0; entry->value_names[i] != NULL; ++i)\n+    if (strcmp (entry->value_names[i], value_name) == 0)\n+      {\n+\t*value_p = i;\n+\treturn true;\n+      }\n+\n+  return true;\n+}\n+\n /* Set the VALUE associated with the parameter given by NAME in PARAMS\n    and PARAMS_SET.  */\n \n@@ -126,27 +177,27 @@ set_param_value (const char *name, int value,\n   /* Make sure nobody tries to set a parameter to an invalid value.  */\n   gcc_assert (value != INVALID_PARAM_VAL);\n \n-  /* Scan the parameter table to find a matching entry.  */\n-  for (i = 0; i < num_compiler_params; ++i)\n-    if (strcmp (compiler_params[i].option, name) == 0)\n-      {\n-\tif (value < compiler_params[i].min_value)\n-\t  error (\"minimum value of parameter %qs is %u\",\n-\t\t compiler_params[i].option,\n-\t\t compiler_params[i].min_value);\n-\telse if (compiler_params[i].max_value > compiler_params[i].min_value\n-\t\t && value > compiler_params[i].max_value)\n-\t  error (\"maximum value of parameter %qs is %u\",\n-\t\t compiler_params[i].option,\n-\t\t compiler_params[i].max_value);\n-\telse\n-\t  set_param_value_internal ((compiler_param) i, value,\n-\t\t\t\t    params, params_set, true);\n-\treturn;\n-      }\n-\n-  /* If we didn't find this parameter, issue an error message.  */\n-  error (\"invalid parameter %qs\", name);\n+  enum compiler_param index;\n+  if (!find_param (name, &index))\n+    {\n+      /* If we didn't find this parameter, issue an error message.  */\n+      error (\"invalid parameter %qs\", name);\n+      return;\n+    }\n+  i = (size_t)index;\n+\n+  if (value < compiler_params[i].min_value)\n+    error (\"minimum value of parameter %qs is %u\",\n+\t   compiler_params[i].option,\n+\t   compiler_params[i].min_value);\n+  else if (compiler_params[i].max_value > compiler_params[i].min_value\n+\t   && value > compiler_params[i].max_value)\n+    error (\"maximum value of parameter %qs is %u\",\n+\t   compiler_params[i].option,\n+\t   compiler_params[i].max_value);\n+  else\n+    set_param_value_internal ((compiler_param) i, value,\n+\t\t\t      params, params_set, true);\n }\n \n /* Set the value of the parameter given by NUM to VALUE in PARAMS and"}, {"sha": "1090d00908179c8347fbc36054b543d9a8c060a4", "filename": "gcc/params.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78182cc0ce05104e2f1cd40c97de974f075479f/gcc%2Fparams.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78182cc0ce05104e2f1cd40c97de974f075479f/gcc%2Fparams.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.h?ref=d78182cc0ce05104e2f1cd40c97de974f075479f", "patch": "@@ -55,6 +55,9 @@ struct param_info\n \n   /* A short description of the option.  */\n   const char *const help;\n+\n+  /* The optional names corresponding to the values.  */\n+  const char **value_names;\n };\n \n /* An array containing the compiler parameters and their current\n@@ -85,6 +88,9 @@ enum compiler_param\n   LAST_PARAM\n };\n \n+extern bool find_param (const char *, enum compiler_param *);\n+extern bool param_string_value_p (enum compiler_param, const char *, int *);\n+\n /* The value of the parameter given by ENUM.  Not an lvalue.  */\n #define PARAM_VALUE(ENUM) \\\n   ((int) global_options.x_param_values[(int) ENUM])"}]}