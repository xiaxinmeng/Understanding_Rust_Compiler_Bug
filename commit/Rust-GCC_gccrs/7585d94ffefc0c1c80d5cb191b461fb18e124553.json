{"sha": "7585d94ffefc0c1c80d5cb191b461fb18e124553", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU4NWQ5NGZmZWZjMGMxYzgwZDVjYjE5MWI0NjFmYjE4ZTEyNDU1Mw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2015-12-17T01:33:41Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2015-12-17T01:33:41Z"}, "message": "PR c/68868 - atomic_init emits an unnecessary fence\n\ngcc/ChangeLog\n\t* ginclude/stdatomic.h (atomic_init): Use atomic_store instead\n\tof plain assignment.\ngcc/testsuite/ChangeLog\n\t* testsuite/gcc.dg/atomic/stdatomic-init.c: New test.\n\nFrom-SVN: r231733", "tree": {"sha": "6096f84130edc1cfc3d88b7e2927b49a222da8da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6096f84130edc1cfc3d88b7e2927b49a222da8da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7585d94ffefc0c1c80d5cb191b461fb18e124553", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7585d94ffefc0c1c80d5cb191b461fb18e124553", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7585d94ffefc0c1c80d5cb191b461fb18e124553", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7585d94ffefc0c1c80d5cb191b461fb18e124553/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9393bc31a2a33c7662fe9d11afb059da3b46c2a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9393bc31a2a33c7662fe9d11afb059da3b46c2a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9393bc31a2a33c7662fe9d11afb059da3b46c2a6"}], "stats": {"total": 142, "additions": 136, "deletions": 6}, "files": [{"sha": "8e51a4740a455e8ac8bcde352b2f1514ae316e9f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7585d94ffefc0c1c80d5cb191b461fb18e124553/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7585d94ffefc0c1c80d5cb191b461fb18e124553/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7585d94ffefc0c1c80d5cb191b461fb18e124553", "patch": "@@ -1,3 +1,9 @@\n+2015-12-16  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/68868\n+\t* ginclude/stdatomic.h (atomic_init): Use atomic_store instead\n+\tof plain assignment.\n+\n 2015-12-15  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/68805"}, {"sha": "d77b569b64fb917011c89e45de0c448858c05bec", "filename": "gcc/ginclude/stdatomic.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7585d94ffefc0c1c80d5cb191b461fb18e124553/gcc%2Fginclude%2Fstdatomic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7585d94ffefc0c1c80d5cb191b461fb18e124553/gcc%2Fginclude%2Fstdatomic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstdatomic.h?ref=7585d94ffefc0c1c80d5cb191b461fb18e124553", "patch": "@@ -77,12 +77,10 @@ typedef _Atomic __UINTMAX_TYPE__ atomic_uintmax_t;\n \n \n #define ATOMIC_VAR_INIT(VALUE)\t(VALUE)\n-#define atomic_init(PTR, VAL)\t\t\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      *(PTR) = (VAL);\t\t\t\t\\\n-    }\t\t\t\t\t\t\\\n-  while (0)\n+\n+/* Initialize an atomic object pointed to by PTR with VAL.  */\n+#define atomic_init(PTR, VAL)                           \\\n+  atomic_store_explicit (PTR, VAL, __ATOMIC_RELAXED)\n \n #define kill_dependency(Y)\t\t\t\\\n   __extension__\t\t\t\t\t\\"}, {"sha": "14ea41304882b154a90caa6245d68ed6aeccaf2c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7585d94ffefc0c1c80d5cb191b461fb18e124553/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7585d94ffefc0c1c80d5cb191b461fb18e124553/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7585d94ffefc0c1c80d5cb191b461fb18e124553", "patch": "@@ -1,3 +1,8 @@\n+2015-12-16  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/68868\n+\t* testsuite/gcc.dg/atomic/stdatomic-init.c: New test.\n+\n 2015-12-15  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/68805"}, {"sha": "78f55c03e7ad19c119ccce9109abb3a99ba4f2d0", "filename": "gcc/testsuite/gcc.dg/atomic/stdatomic-init.c", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7585d94ffefc0c1c80d5cb191b461fb18e124553/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fstdatomic-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7585d94ffefc0c1c80d5cb191b461fb18e124553/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fstdatomic-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fstdatomic-init.c?ref=7585d94ffefc0c1c80d5cb191b461fb18e124553", "patch": "@@ -0,0 +1,121 @@\n+/* Test the atomic_init generic function.  Verify that __atomic_store_N\n+   is called with the last argument of memory_order_relaxed (i.e., 0)\n+   for each invocation of the atomic_init() macro in the test and that\n+   there are no calls to __atomic_store_N with a non-zero last argument.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-gimple -std=c11 -pedantic-errors\" } */\n+/* { dg-final { scan-tree-dump-times \"__atomic_store_. \\\\(\\[^\\n\\r]*, 0\\\\)\" 54 \"gimple\" } } */\n+/* { dg-final { scan-tree-dump-not \"__atomic_store_. \\\\(\\[^\\n\\r]*, \\[1-5\\]\\\\)\" \"gimple\" } } */\n+\n+#include <stdatomic.h>\n+\n+struct Atomic {\n+  /* Volatile to prevent re-initialization from being optimized away.  */\n+  volatile atomic_bool   b;\n+  volatile atomic_char   c;\n+  volatile atomic_schar  sc;\n+  volatile atomic_uchar  uc;\n+  volatile atomic_short  ss;\n+  volatile atomic_ushort us;\n+  volatile atomic_int    si;\n+  volatile atomic_uint   ui;\n+  volatile atomic_long   sl;\n+  volatile atomic_ulong  ul;\n+  volatile atomic_llong  sll;\n+  volatile atomic_ullong ull;\n+  volatile atomic_size_t sz;\n+};\n+\n+struct Value {\n+  _Bool              b;\n+  char               c;\n+  signed char        sc;\n+  unsigned char      uc;\n+  short              ss;\n+  unsigned short     us;\n+  int                si;\n+  unsigned int       ui;\n+  long               sl;\n+  unsigned long      ul;\n+  long long          sll;\n+  unsigned long long ull;\n+  __SIZE_TYPE__      sz;\n+};\n+\n+/* Exercise the atomic_init() macro with a literal argument.  */\n+\n+void atomic_init_lit (struct Atomic *pa)\n+{\n+  atomic_init (&pa->b, 0);\n+  atomic_init (&pa->b, 1);\n+\n+  atomic_init (&pa->c, 'x');\n+  atomic_init (&pa->c, 0);\n+  atomic_init (&pa->c, 1);\n+  atomic_init (&pa->c, 255);\n+  \n+  atomic_init (&pa->sc, (signed char)'x');\n+  atomic_init (&pa->sc, (signed char)0);\n+  atomic_init (&pa->sc, (signed char)1);\n+  atomic_init (&pa->sc, (signed char)__SCHAR_MAX__);\n+\n+  atomic_init (&pa->uc, (unsigned char)'x');\n+  atomic_init (&pa->uc, (unsigned char)0);\n+  atomic_init (&pa->uc, (unsigned char)1);\n+  atomic_init (&pa->sc, (unsigned char)__SCHAR_MAX__);\n+\n+  atomic_init (&pa->ss, (signed short)0);\n+  atomic_init (&pa->ss, (signed short)1);\n+  atomic_init (&pa->ss, (signed short)__SHRT_MAX__);\n+\n+  atomic_init (&pa->us, (unsigned short)0);\n+  atomic_init (&pa->us, (unsigned short)1);\n+  atomic_init (&pa->us, (unsigned short)__SHRT_MAX__);\n+\n+  atomic_init (&pa->si, (signed int)0);\n+  atomic_init (&pa->si, (signed int)1);\n+  atomic_init (&pa->si, (signed int)__INT_MAX__);\n+\n+  atomic_init (&pa->ui, (unsigned int)0);\n+  atomic_init (&pa->ui, (unsigned int)1);\n+  atomic_init (&pa->ui, (unsigned int)__INT_MAX__);\n+  \n+  atomic_init (&pa->sl, (signed long)0);\n+  atomic_init (&pa->sl, (signed long)1);\n+  atomic_init (&pa->sl, (signed long)__LONG_MAX__);\n+\n+  atomic_init (&pa->ul, (unsigned long)0);\n+  atomic_init (&pa->ul, (unsigned long)1);\n+  atomic_init (&pa->ul, (unsigned long)__LONG_MAX__);\n+\n+  atomic_init (&pa->sll, (signed long long)0);\n+  atomic_init (&pa->sll, (signed long long)1);\n+  atomic_init (&pa->sll, (signed long long)__LONG_LONG_MAX__);\n+\n+  atomic_init (&pa->ull, (unsigned long long)0);\n+  atomic_init (&pa->ull, (unsigned long long)1);\n+  atomic_init (&pa->ull, (unsigned long long)__LONG_LONG_MAX__); \n+\n+  atomic_init (&pa->sz, 0);\n+  atomic_init (&pa->sz, 1);\n+  atomic_init (&pa->sz, __SIZE_MAX__); \n+}\n+\n+/* Exercise the atomic_init() macro with an lvalue argument.  */\n+\n+void atomic_init_lval (struct Atomic *pa, const struct Value *pv)\n+{\n+  atomic_init (&pa->b, pv->b);\n+  atomic_init (&pa->c, pv->c);\n+  atomic_init (&pa->sc, pv->sc);\n+  atomic_init (&pa->uc, pv->uc);\n+  atomic_init (&pa->ss, pv->ss);\n+  atomic_init (&pa->us, pv->us);\n+  atomic_init (&pa->si, pv->si);\n+  atomic_init (&pa->ui, pv->ui); \n+  atomic_init (&pa->sl, pv->sl);\n+  atomic_init (&pa->ul, pv->ul);\n+  atomic_init (&pa->sll, pv->sll);\n+  atomic_init (&pa->ull, pv->ull);\n+  atomic_init (&pa->sz, pv->sz);\n+}"}]}