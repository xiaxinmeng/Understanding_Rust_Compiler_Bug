{"sha": "bc5208f7357bfe8e466890a4c856a642cc16920f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM1MjA4ZjczNTdiZmU4ZTQ2Njg5MGE0Yzg1NmE2NDJjYzE2OTIwZg==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-07-26T15:31:40Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-07-30T10:51:35Z"}, "message": "d: Use hasMonitor to determine whether to emit a __monitor field in D classes\n\nThis helper introduced by the front-end is a better gate, and allows the\nfront-end to change rules for what gets a monitor in the future.\n\ngcc/d/ChangeLog:\n\n\t* types.cc (layout_aggregate_type): Call hasMonitor.\n\t* typeinfo.cc (TypeInfoVisitor::layout_base): Likewise.\n\t(layout_cpp_typeinfo): Likewise.  Don't emit vtable unless\n\thave_typeinfo_p.", "tree": {"sha": "cbc6f17418d942a80ef54a35acb212c4c9e6b263", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbc6f17418d942a80ef54a35acb212c4c9e6b263"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc5208f7357bfe8e466890a4c856a642cc16920f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc5208f7357bfe8e466890a4c856a642cc16920f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc5208f7357bfe8e466890a4c856a642cc16920f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc5208f7357bfe8e466890a4c856a642cc16920f/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2abe4e1aded1409964b870899d18dfdb6384821", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2abe4e1aded1409964b870899d18dfdb6384821", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2abe4e1aded1409964b870899d18dfdb6384821"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "c9126f4c6b57b23b17068a315a6c590c31c202da", "filename": "gcc/d/typeinfo.cc", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc5208f7357bfe8e466890a4c856a642cc16920f/gcc%2Fd%2Ftypeinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc5208f7357bfe8e466890a4c856a642cc16920f/gcc%2Fd%2Ftypeinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Ftypeinfo.cc?ref=bc5208f7357bfe8e466890a4c856a642cc16920f", "patch": "@@ -423,7 +423,8 @@ class TypeInfoVisitor : public Visitor\n     else\n       this->layout_field (null_pointer_node);\n \n-    this->layout_field (null_pointer_node);\n+    if (cd->hasMonitor ())\n+      this->layout_field (null_pointer_node);\n   }\n \n   /* Write out the interfaces field of class CD.\n@@ -1457,9 +1458,17 @@ layout_cpp_typeinfo (ClassDeclaration *cd)\n   /* Use the vtable of __cpp_type_info_ptr, the EH personality routine\n      expects this, as it uses .classinfo identity comparison to test for\n      C++ catch handlers.  */\n-  tree vptr = get_vtable_decl (ClassDeclaration::cpp_type_info_ptr);\n-  CONSTRUCTOR_APPEND_ELT (init, NULL_TREE, build_address (vptr));\n-  CONSTRUCTOR_APPEND_ELT (init, NULL_TREE, null_pointer_node);\n+  ClassDeclaration *cppti = ClassDeclaration::cpp_type_info_ptr;\n+  if (have_typeinfo_p (cppti))\n+    {\n+      tree vptr = get_vtable_decl (cppti);\n+      CONSTRUCTOR_APPEND_ELT (init, NULL_TREE, build_address (vptr));\n+    }\n+  else\n+    CONSTRUCTOR_APPEND_ELT (init, NULL_TREE, null_pointer_node);\n+\n+  if (cppti->hasMonitor ())\n+    CONSTRUCTOR_APPEND_ELT (init, NULL_TREE, null_pointer_node);\n \n   /* Let C++ do the RTTI generation, and just reference the symbol as\n      extern, knowing the underlying type is not required.  */\n@@ -1471,9 +1480,7 @@ layout_cpp_typeinfo (ClassDeclaration *cd)\n \n   /* Build the initializer and emit.  */\n   DECL_INITIAL (decl) = build_struct_literal (TREE_TYPE (decl), init);\n-  DECL_EXTERNAL (decl) = 0;\n-  d_pushdecl (decl);\n-  rest_of_decl_compilation (decl, 1, 0);\n+  d_finish_decl (decl);\n }\n \n /* Get the VAR_DECL of the __cpp_type_info_ptr for DECL.  If this does not yet"}, {"sha": "8e674618004d9a86ba9cba71fb53a407c750ed4f", "filename": "gcc/d/types.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc5208f7357bfe8e466890a4c856a642cc16920f/gcc%2Fd%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc5208f7357bfe8e466890a4c856a642cc16920f/gcc%2Fd%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Ftypes.cc?ref=bc5208f7357bfe8e466890a4c856a642cc16920f", "patch": "@@ -469,7 +469,7 @@ layout_aggregate_type (AggregateDeclaration *decl, tree type,\n \t      insert_aggregate_field (type, field, 0);\n \t    }\n \n-\t  if (!id && !cd->isCPPclass ())\n+\t  if (!id && cd->hasMonitor ())\n \t    {\n \t      tree field = create_field_decl (ptr_type_node, \"__monitor\", 1,\n \t\t\t\t\t      inherited_p);"}]}