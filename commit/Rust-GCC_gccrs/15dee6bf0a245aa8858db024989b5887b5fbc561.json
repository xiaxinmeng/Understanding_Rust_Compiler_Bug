{"sha": "15dee6bf0a245aa8858db024989b5887b5fbc561", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVkZWU2YmYwYTI0NWFhODg1OGRiMDI0OTg5YjU4ODdiNWZiYzU2MQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-05-13T14:24:34Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-05-13T14:24:34Z"}, "message": "ctype_scan_char.cc: Tweak.\n\n\n2002-05-13  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/22_locale/ctype_scan_char.cc: Tweak.\n\t* testsuite/22_locale/ctype_scan_wchar_t.cc: New.\n\n\t* docs/html/install.html: Fix.\n\nFrom-SVN: r53424", "tree": {"sha": "b3f20e234a09af909a00dc01f2cc897236145f93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3f20e234a09af909a00dc01f2cc897236145f93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15dee6bf0a245aa8858db024989b5887b5fbc561", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15dee6bf0a245aa8858db024989b5887b5fbc561", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15dee6bf0a245aa8858db024989b5887b5fbc561", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15dee6bf0a245aa8858db024989b5887b5fbc561/comments", "author": null, "committer": null, "parents": [{"sha": "540f5c9b2d578aa5f1d5546eec7c9493b26ac3a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/540f5c9b2d578aa5f1d5546eec7c9493b26ac3a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/540f5c9b2d578aa5f1d5546eec7c9493b26ac3a5"}], "stats": {"total": 404, "additions": 387, "deletions": 17}, "files": [{"sha": "52007d5fdc32553608e800cb256581c1d45821e9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15dee6bf0a245aa8858db024989b5887b5fbc561/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15dee6bf0a245aa8858db024989b5887b5fbc561/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=15dee6bf0a245aa8858db024989b5887b5fbc561", "patch": "@@ -1,3 +1,10 @@\n+2002-05-13  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/22_locale/ctype_scan_char.cc: Tweak.\n+\t* testsuite/22_locale/ctype_scan_wchar_t.cc: New.\t\n+\n+\t* docs/html/install.html: Fix.\n+\t\n 2002-05-13  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/fstream.tcc"}, {"sha": "ff351049b98f37b77b22b046f28cecf4359cd1e8", "filename": "libstdc++-v3/docs/html/install.html", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15dee6bf0a245aa8858db024989b5887b5fbc561/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Finstall.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15dee6bf0a245aa8858db024989b5887b5fbc561/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Finstall.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Finstall.html?ref=15dee6bf0a245aa8858db024989b5887b5fbc561", "patch": "@@ -113,10 +113,14 @@ <h2><a name=\"prereqs\">Tools you will need beforehand</a></h2>\n \t  <p> <code> rpm -e glibc-common --nodeps </code> </p>\n \t  <p> <code> rpm -i --define \"_install_langs all\" \n \t  glibc-common-2.2.5-34.i386.rpm </code> </p>\n- \t  <li> install just the necessary locales\n+\t  </li> \n+\t  <li> install just the necessary locales\n \t  <p> <code> localedef -i de_DE -f ISO-8859-1 de_DE </code> </p>\n-         </p>\n-      </dl>\n+\t  </li> \n+        </p>\n+\t</dd>\n+      </dt>\n+    </dl>\n    </p>\n \n <hr>"}, {"sha": "6e8d1d31e26be2ca4cf3d525c8936822529dfb4b", "filename": "libstdc++-v3/testsuite/22_locale/ctype_scan_char.cc", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15dee6bf0a245aa8858db024989b5887b5fbc561/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_scan_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15dee6bf0a245aa8858db024989b5887b5fbc561/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_scan_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_scan_char.cc?ref=15dee6bf0a245aa8858db024989b5887b5fbc561", "patch": "@@ -32,33 +32,37 @@\n #include <locale>\n #include <testsuite_hooks.h>\n \n-class gnu_ctype: public std::ctype<char> { };\n+typedef char char_type;\n+typedef std::char_traits<char_type> traits_type;\n+class gnu_ctype: public std::ctype<char_type> { };\n \n // These two macros take a ctype mask, a string and a pointer within\n // the string that the scan function should return, usually either the\n // first or last character if the string contains identical values as\n // below.\n #define VERIFY_SCAN_IS(MASK, STRING, EXPECTED) \\\n   VERIFY(gctype.scan_is((MASK), (STRING), \\\n-\t\t\t(STRING)+strlen(STRING)) == (EXPECTED))\n+\t\t\t(STRING) + traits_type::length(STRING)) == (EXPECTED))\n #define VERIFY_SCAN_NOT(MASK, STRING, EXPECTED) \\\n   VERIFY(gctype.scan_not((MASK), (STRING), \\\n-\t\t\t (STRING)+strlen(STRING)) == (EXPECTED))\n+\t\t\t (STRING) + traits_type::length(STRING)) == (EXPECTED))\n \n // Sanity check scan_is() and scan_not().\n void test01()\n {\n-  const char *const ca = \"aaaaa\";\n-  const char *const cz = \"zzzzz\";\n-  const char *const cA = \"AAAAA\";\n-  const char *const cZ = \"ZZZZZ\";\n-  const char *const c0 = \"00000\";\n-  const char *const c9 = \"99999\";\n-  const char *const cs = \"     \";\n-  const char *const xf = \"fffff\";\n-  const char *const xF = \"FFFFF\";\n-  const char *const p1 = \"!!!!!\";\n-  const char *const p2 = \"/////\";\n+  bool test = true;\n+\n+  const char_type *const ca = \"aaaaa\";\n+  const char_type *const cz = \"zzzzz\";\n+  const char_type *const cA = \"AAAAA\";\n+  const char_type *const cZ = \"ZZZZZ\";\n+  const char_type *const c0 = \"00000\";\n+  const char_type *const c9 = \"99999\";\n+  const char_type *const cs = \"     \";\n+  const char_type *const xf = \"fffff\";\n+  const char_type *const xF = \"FFFFF\";\n+  const char_type *const p1 = \"!!!!!\";\n+  const char_type *const p2 = \"/////\";\n   \n   gnu_ctype gctype;\n "}, {"sha": "96ee9ae6d4ce32fca15ffb8cfcf28aba6b19773f", "filename": "libstdc++-v3/testsuite/22_locale/ctype_scan_wchar_t.cc", "status": "added", "additions": 355, "deletions": 0, "changes": 355, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15dee6bf0a245aa8858db024989b5887b5fbc561/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_scan_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15dee6bf0a245aa8858db024989b5887b5fbc561/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_scan_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_scan_wchar_t.cc?ref=15dee6bf0a245aa8858db024989b5887b5fbc561", "patch": "@@ -0,0 +1,355 @@\n+// 2002-05-10 ghazi\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// { dg-do run }\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// XXX This test is not working for non-glibc locale models.\n+// { dg-do run { xfail *-*-* } }\n+\n+typedef wchar_t char_type;\n+typedef std::char_traits<char_type> traits_type;\n+class gnu_ctype: public std::ctype<char_type> { };\n+\n+// These two macros take a ctype mask, a string and a pointer within\n+// the string that the scan function should return, usually either the\n+// first or last character if the string contains identical values as\n+// below.\n+#define VERIFY_SCAN_IS(MASK, STRING, EXPECTED) \\\n+  VERIFY(gctype.scan_is((MASK), (STRING), \\\n+\t\t\t(STRING) + traits_type::length(STRING)) == (EXPECTED))\n+#define VERIFY_SCAN_NOT(MASK, STRING, EXPECTED) \\\n+  VERIFY(gctype.scan_not((MASK), (STRING), \\\n+\t\t\t (STRING) + traits_type::length(STRING)) == (EXPECTED))\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+// Sanity check scan_is() and scan_not().\n+void test01()\n+{\n+  bool test = true;\n+\n+  const char_type *const ca = L\"aaaaa\";\n+  const char_type *const cz = L\"zzzzz\";\n+  const char_type *const cA = L\"AAAAA\";\n+  const char_type *const cZ = L\"ZZZZZ\";\n+  const char_type *const c0 = L\"00000\";\n+  const char_type *const c9 = L\"99999\";\n+  const char_type *const cs = L\"     \";\n+  const char_type *const xf = L\"fffff\";\n+  const char_type *const xF = L\"FFFFF\";\n+  const char_type *const p1 = L\"!!!!!\";\n+  const char_type *const p2 = L\"/////\";\n+  \n+  gnu_ctype gctype;\n+\n+  // 'a'\n+  VERIFY_SCAN_IS (std::ctype_base::alnum, ca, ca);\n+  VERIFY_SCAN_IS (std::ctype_base::alpha, ca, ca);\n+  VERIFY_SCAN_IS (std::ctype_base::cntrl, ca, ca+5);\n+  VERIFY_SCAN_IS (std::ctype_base::digit, ca, ca+5);\n+  VERIFY_SCAN_IS (std::ctype_base::graph, ca, ca);\n+  VERIFY_SCAN_IS (std::ctype_base::lower, ca, ca);\n+  VERIFY_SCAN_IS (std::ctype_base::print, ca, ca);\n+  VERIFY_SCAN_IS (std::ctype_base::punct, ca, ca+5);\n+  VERIFY_SCAN_IS (std::ctype_base::space, ca, ca+5);\n+  VERIFY_SCAN_IS (std::ctype_base::upper, ca, ca+5);\n+  VERIFY_SCAN_IS (std::ctype_base::xdigit, ca, ca);\n+\n+  VERIFY_SCAN_NOT (std::ctype_base::alnum, ca, ca+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::alpha, ca, ca+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::cntrl, ca, ca);\n+  VERIFY_SCAN_NOT (std::ctype_base::digit, ca, ca);\n+  VERIFY_SCAN_NOT (std::ctype_base::graph, ca, ca+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::lower, ca, ca+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::print, ca, ca+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::punct, ca, ca);\n+  VERIFY_SCAN_NOT (std::ctype_base::space, ca, ca);\n+  VERIFY_SCAN_NOT (std::ctype_base::upper, ca, ca);\n+  VERIFY_SCAN_NOT (std::ctype_base::xdigit, ca, ca+5);\n+\n+  // 'z'\n+  VERIFY_SCAN_IS (std::ctype_base::alnum, cz, cz);\n+  VERIFY_SCAN_IS (std::ctype_base::alpha, cz, cz);\n+  VERIFY_SCAN_IS (std::ctype_base::cntrl, cz, cz+5);\n+  VERIFY_SCAN_IS (std::ctype_base::digit, cz, cz+5);\n+  VERIFY_SCAN_IS (std::ctype_base::graph, cz, cz);\n+  VERIFY_SCAN_IS (std::ctype_base::lower, cz, cz);\n+  VERIFY_SCAN_IS (std::ctype_base::print, cz, cz);\n+  VERIFY_SCAN_IS (std::ctype_base::punct, cz, cz+5);\n+  VERIFY_SCAN_IS (std::ctype_base::space, cz, cz+5);\n+  VERIFY_SCAN_IS (std::ctype_base::upper, cz, cz+5);\n+  VERIFY_SCAN_IS (std::ctype_base::xdigit, cz, cz+5);\n+  \n+  VERIFY_SCAN_NOT (std::ctype_base::alnum, cz, cz+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::alpha, cz, cz+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::cntrl, cz, cz);\n+  VERIFY_SCAN_NOT (std::ctype_base::digit, cz, cz);\n+  VERIFY_SCAN_NOT (std::ctype_base::graph, cz, cz+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::lower, cz, cz+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::print, cz, cz+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::punct, cz, cz);\n+  VERIFY_SCAN_NOT (std::ctype_base::space, cz, cz);\n+  VERIFY_SCAN_NOT (std::ctype_base::upper, cz, cz);\n+  VERIFY_SCAN_NOT (std::ctype_base::xdigit, cz, cz);\n+  \n+  // 'A'\n+  VERIFY_SCAN_IS (std::ctype_base::alnum, cA, cA);\n+  VERIFY_SCAN_IS (std::ctype_base::alpha, cA, cA);\n+  VERIFY_SCAN_IS (std::ctype_base::cntrl, cA, cA+5);\n+  VERIFY_SCAN_IS (std::ctype_base::digit, cA, cA+5);\n+  VERIFY_SCAN_IS (std::ctype_base::graph, cA, cA);\n+  VERIFY_SCAN_IS (std::ctype_base::lower, cA, cA+5);\n+  VERIFY_SCAN_IS (std::ctype_base::print, cA, cA);\n+  VERIFY_SCAN_IS (std::ctype_base::punct, cA, cA+5);\n+  VERIFY_SCAN_IS (std::ctype_base::space, cA, cA+5);\n+  VERIFY_SCAN_IS (std::ctype_base::upper, cA, cA);\n+  VERIFY_SCAN_IS (std::ctype_base::xdigit, cA, cA);\n+  \n+  VERIFY_SCAN_NOT (std::ctype_base::alnum, cA, cA+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::alpha, cA, cA+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::cntrl, cA, cA);\n+  VERIFY_SCAN_NOT (std::ctype_base::digit, cA, cA);\n+  VERIFY_SCAN_NOT (std::ctype_base::graph, cA, cA+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::lower, cA, cA);\n+  VERIFY_SCAN_NOT (std::ctype_base::print, cA, cA+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::punct, cA, cA);\n+  VERIFY_SCAN_NOT (std::ctype_base::space, cA, cA);\n+  VERIFY_SCAN_NOT (std::ctype_base::upper, cA, cA+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::xdigit, cA, cA+5);\n+  \n+  // 'Z'\n+  VERIFY_SCAN_IS (std::ctype_base::alnum, cZ, cZ);\n+  VERIFY_SCAN_IS (std::ctype_base::alpha, cZ, cZ);\n+  VERIFY_SCAN_IS (std::ctype_base::cntrl, cZ, cZ+5);\n+  VERIFY_SCAN_IS (std::ctype_base::digit, cZ, cZ+5);\n+  VERIFY_SCAN_IS (std::ctype_base::graph, cZ, cZ);\n+  VERIFY_SCAN_IS (std::ctype_base::lower, cZ, cZ+5);\n+  VERIFY_SCAN_IS (std::ctype_base::print, cZ, cZ);\n+  VERIFY_SCAN_IS (std::ctype_base::punct, cZ, cZ+5);\n+  VERIFY_SCAN_IS (std::ctype_base::space, cZ, cZ+5);\n+  VERIFY_SCAN_IS (std::ctype_base::upper, cZ, cZ);\n+  VERIFY_SCAN_IS (std::ctype_base::xdigit, cZ, cZ+5);\n+  \n+  VERIFY_SCAN_NOT (std::ctype_base::alnum, cZ, cZ+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::alpha, cZ, cZ+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::cntrl, cZ, cZ);\n+  VERIFY_SCAN_NOT (std::ctype_base::digit, cZ, cZ);\n+  VERIFY_SCAN_NOT (std::ctype_base::graph, cZ, cZ+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::lower, cZ, cZ);\n+  VERIFY_SCAN_NOT (std::ctype_base::print, cZ, cZ+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::punct, cZ, cZ);\n+  VERIFY_SCAN_NOT (std::ctype_base::space, cZ, cZ);\n+  VERIFY_SCAN_NOT (std::ctype_base::upper, cZ, cZ+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::xdigit, cZ, cZ);\n+  \n+  // '0'\n+  VERIFY_SCAN_IS (std::ctype_base::alnum, c0, c0);\n+  VERIFY_SCAN_IS (std::ctype_base::alpha, c0, c0+5);\n+  VERIFY_SCAN_IS (std::ctype_base::cntrl, c0, c0+5);\n+  VERIFY_SCAN_IS (std::ctype_base::digit, c0, c0);\n+  VERIFY_SCAN_IS (std::ctype_base::graph, c0, c0);\n+  VERIFY_SCAN_IS (std::ctype_base::lower, c0, c0+5);\n+  VERIFY_SCAN_IS (std::ctype_base::print, c0, c0);\n+  VERIFY_SCAN_IS (std::ctype_base::punct, c0, c0+5);\n+  VERIFY_SCAN_IS (std::ctype_base::space, c0, c0+5);\n+  VERIFY_SCAN_IS (std::ctype_base::upper, c0, c0+5);\n+  VERIFY_SCAN_IS (std::ctype_base::xdigit, c0, c0);\n+  \n+  VERIFY_SCAN_NOT (std::ctype_base::alnum, c0, c0+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::alpha, c0, c0);\n+  VERIFY_SCAN_NOT (std::ctype_base::cntrl, c0, c0);\n+  VERIFY_SCAN_NOT (std::ctype_base::digit, c0, c0+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::graph, c0, c0+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::lower, c0, c0);\n+  VERIFY_SCAN_NOT (std::ctype_base::print, c0, c0+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::punct, c0, c0);\n+  VERIFY_SCAN_NOT (std::ctype_base::space, c0, c0);\n+  VERIFY_SCAN_NOT (std::ctype_base::upper, c0, c0);\n+  VERIFY_SCAN_NOT (std::ctype_base::xdigit, c0, c0+5);\n+  \n+  // '9'\n+  VERIFY_SCAN_IS (std::ctype_base::alnum, c9, c9);\n+  VERIFY_SCAN_IS (std::ctype_base::alpha, c9, c9+5);\n+  VERIFY_SCAN_IS (std::ctype_base::cntrl, c9, c9+5);\n+  VERIFY_SCAN_IS (std::ctype_base::digit, c9, c9);\n+  VERIFY_SCAN_IS (std::ctype_base::graph, c9, c9);\n+  VERIFY_SCAN_IS (std::ctype_base::lower, c9, c9+5);\n+  VERIFY_SCAN_IS (std::ctype_base::print, c9, c9);\n+  VERIFY_SCAN_IS (std::ctype_base::punct, c9, c9+5);\n+  VERIFY_SCAN_IS (std::ctype_base::space, c9, c9+5);\n+  VERIFY_SCAN_IS (std::ctype_base::upper, c9, c9+5);\n+  VERIFY_SCAN_IS (std::ctype_base::xdigit, c9, c9);\n+  \n+  VERIFY_SCAN_NOT (std::ctype_base::alnum, c9, c9+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::alpha, c9, c9);\n+  VERIFY_SCAN_NOT (std::ctype_base::cntrl, c9, c9);\n+  VERIFY_SCAN_NOT (std::ctype_base::digit, c9, c9+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::graph, c9, c9+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::lower, c9, c9);\n+  VERIFY_SCAN_NOT (std::ctype_base::print, c9, c9+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::punct, c9, c9);\n+  VERIFY_SCAN_NOT (std::ctype_base::space, c9, c9);\n+  VERIFY_SCAN_NOT (std::ctype_base::upper, c9, c9);\n+  VERIFY_SCAN_NOT (std::ctype_base::xdigit, c9, c9+5);\n+  \n+  // ' '\n+  VERIFY_SCAN_IS (std::ctype_base::alnum, cs, cs+5);\n+  VERIFY_SCAN_IS (std::ctype_base::alpha, cs, cs+5);\n+  VERIFY_SCAN_IS (std::ctype_base::cntrl, cs, cs+5);\n+  VERIFY_SCAN_IS (std::ctype_base::digit, cs, cs+5);\n+  VERIFY_SCAN_IS (std::ctype_base::graph, cs, cs+5);\n+  VERIFY_SCAN_IS (std::ctype_base::lower, cs, cs+5);\n+  VERIFY_SCAN_IS (std::ctype_base::print, cs, cs);\n+  VERIFY_SCAN_IS (std::ctype_base::punct, cs, cs+5);\n+  VERIFY_SCAN_IS (std::ctype_base::space, cs, cs);\n+  VERIFY_SCAN_IS (std::ctype_base::upper, cs, cs+5);\n+  VERIFY_SCAN_IS (std::ctype_base::xdigit, cs, cs+5);\n+  \n+  VERIFY_SCAN_NOT (std::ctype_base::alnum, cs, cs);\n+  VERIFY_SCAN_NOT (std::ctype_base::alpha, cs, cs);\n+  VERIFY_SCAN_NOT (std::ctype_base::cntrl, cs, cs);\n+  VERIFY_SCAN_NOT (std::ctype_base::digit, cs, cs);\n+  VERIFY_SCAN_NOT (std::ctype_base::graph, cs, cs);\n+  VERIFY_SCAN_NOT (std::ctype_base::lower, cs, cs);\n+  VERIFY_SCAN_NOT (std::ctype_base::print, cs, cs+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::punct, cs, cs);\n+  VERIFY_SCAN_NOT (std::ctype_base::space, cs, cs+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::upper, cs, cs);\n+  VERIFY_SCAN_NOT (std::ctype_base::xdigit, cs, cs);\n+  \n+  // 'f'\n+  VERIFY_SCAN_IS (std::ctype_base::alnum, xf, xf);\n+  VERIFY_SCAN_IS (std::ctype_base::alpha, xf, xf);\n+  VERIFY_SCAN_IS (std::ctype_base::cntrl, xf, xf+5);\n+  VERIFY_SCAN_IS (std::ctype_base::digit, xf, xf+5);\n+  VERIFY_SCAN_IS (std::ctype_base::graph, xf, xf);\n+  VERIFY_SCAN_IS (std::ctype_base::lower, xf, xf);\n+  VERIFY_SCAN_IS (std::ctype_base::print, xf, xf);\n+  VERIFY_SCAN_IS (std::ctype_base::punct, xf, xf+5);\n+  VERIFY_SCAN_IS (std::ctype_base::space, xf, xf+5);\n+  VERIFY_SCAN_IS (std::ctype_base::upper, xf, xf+5);\n+  VERIFY_SCAN_IS (std::ctype_base::xdigit, xf, xf);\n+  \n+  VERIFY_SCAN_NOT (std::ctype_base::alnum, xf, xf+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::alpha, xf, xf+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::cntrl, xf, xf);\n+  VERIFY_SCAN_NOT (std::ctype_base::digit, xf, xf);\n+  VERIFY_SCAN_NOT (std::ctype_base::graph, xf, xf+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::lower, xf, xf+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::print, xf, xf+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::punct, xf, xf);\n+  VERIFY_SCAN_NOT (std::ctype_base::space, xf, xf);\n+  VERIFY_SCAN_NOT (std::ctype_base::upper, xf, xf);\n+  VERIFY_SCAN_NOT (std::ctype_base::xdigit, xf, xf+5);\n+  \n+  // 'F'\n+  VERIFY_SCAN_IS (std::ctype_base::alnum, xF, xF);\n+  VERIFY_SCAN_IS (std::ctype_base::alpha, xF, xF);\n+  VERIFY_SCAN_IS (std::ctype_base::cntrl, xF, xF+5);\n+  VERIFY_SCAN_IS (std::ctype_base::digit, xF, xF+5);\n+  VERIFY_SCAN_IS (std::ctype_base::graph, xF, xF);\n+  VERIFY_SCAN_IS (std::ctype_base::lower, xF, xF+5);\n+  VERIFY_SCAN_IS (std::ctype_base::print, xF, xF);\n+  VERIFY_SCAN_IS (std::ctype_base::punct, xF, xF+5);\n+  VERIFY_SCAN_IS (std::ctype_base::space, xF, xF+5);\n+  VERIFY_SCAN_IS (std::ctype_base::upper, xF, xF);\n+  VERIFY_SCAN_IS (std::ctype_base::xdigit, xF, xF);\n+  \n+  VERIFY_SCAN_NOT (std::ctype_base::alnum, xF, xF+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::alpha, xF, xF+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::cntrl, xF, xF);\n+  VERIFY_SCAN_NOT (std::ctype_base::digit, xF, xF);\n+  VERIFY_SCAN_NOT (std::ctype_base::graph, xF, xF+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::lower, xF, xF);\n+  VERIFY_SCAN_NOT (std::ctype_base::print, xF, xF+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::punct, xF, xF);\n+  VERIFY_SCAN_NOT (std::ctype_base::space, xF, xF);\n+  VERIFY_SCAN_NOT (std::ctype_base::upper, xF, xF+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::xdigit, xF, xF+5);\n+  \n+  // '!'\n+  VERIFY_SCAN_IS (std::ctype_base::alnum, p1, p1+5);\n+  VERIFY_SCAN_IS (std::ctype_base::alpha, p1, p1+5);\n+  VERIFY_SCAN_IS (std::ctype_base::cntrl, p1, p1+5);\n+  VERIFY_SCAN_IS (std::ctype_base::digit, p1, p1+5);\n+  VERIFY_SCAN_IS (std::ctype_base::graph, p1, p1);\n+  VERIFY_SCAN_IS (std::ctype_base::lower, p1, p1+5);\n+  VERIFY_SCAN_IS (std::ctype_base::print, p1, p1);\n+  VERIFY_SCAN_IS (std::ctype_base::punct, p1, p1);\n+  VERIFY_SCAN_IS (std::ctype_base::space, p1, p1+5);\n+  VERIFY_SCAN_IS (std::ctype_base::upper, p1, p1+5);\n+  VERIFY_SCAN_IS (std::ctype_base::xdigit, p1, p1+5);\n+  \n+  VERIFY_SCAN_NOT (std::ctype_base::alnum, p1, p1);\n+  VERIFY_SCAN_NOT (std::ctype_base::alpha, p1, p1);\n+  VERIFY_SCAN_NOT (std::ctype_base::cntrl, p1, p1);\n+  VERIFY_SCAN_NOT (std::ctype_base::digit, p1, p1);\n+  VERIFY_SCAN_NOT (std::ctype_base::lower, p1, p1);\n+  VERIFY_SCAN_NOT (std::ctype_base::print, p1, p1+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::punct, p1, p1+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::space, p1, p1);\n+  VERIFY_SCAN_NOT (std::ctype_base::upper, p1, p1);\n+  VERIFY_SCAN_NOT (std::ctype_base::xdigit, p1, p1);\n+  \n+  // '/'\n+  VERIFY_SCAN_IS (std::ctype_base::alnum, p2, p2+5);\n+  VERIFY_SCAN_IS (std::ctype_base::alpha, p2, p2+5);\n+  VERIFY_SCAN_IS (std::ctype_base::cntrl, p2, p2+5);\n+  VERIFY_SCAN_IS (std::ctype_base::digit, p2, p2+5);\n+  VERIFY_SCAN_IS (std::ctype_base::graph, p2, p2);\n+  VERIFY_SCAN_IS (std::ctype_base::lower, p2, p2+5);\n+  VERIFY_SCAN_IS (std::ctype_base::print, p2, p2);\n+  VERIFY_SCAN_IS (std::ctype_base::punct, p2, p2);\n+  VERIFY_SCAN_IS (std::ctype_base::space, p2, p2+5);\n+  VERIFY_SCAN_IS (std::ctype_base::upper, p2, p2+5);\n+  VERIFY_SCAN_IS (std::ctype_base::xdigit, p2, p2+5);\n+\n+  VERIFY_SCAN_NOT (std::ctype_base::alnum, p2, p2);\n+  VERIFY_SCAN_NOT (std::ctype_base::alpha, p2, p2);\n+  VERIFY_SCAN_NOT (std::ctype_base::cntrl, p2, p2);\n+  VERIFY_SCAN_NOT (std::ctype_base::digit, p2, p2);\n+  VERIFY_SCAN_NOT (std::ctype_base::graph, p2, p2+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::lower, p2, p2);\n+  VERIFY_SCAN_NOT (std::ctype_base::print, p2, p2+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::punct, p2, p2+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::space, p2, p2);\n+  VERIFY_SCAN_NOT (std::ctype_base::upper, p2, p2);\n+  VERIFY_SCAN_NOT (std::ctype_base::xdigit, p2, p2);\n+}\n+#endif\n+\n+int main() \n+{\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  test01();\n+#endif\n+  return 0;\n+}"}]}