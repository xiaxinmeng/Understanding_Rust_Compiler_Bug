{"sha": "715a8bc8d471d9b8ed5361b32055ae2be6b75fb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE1YThiYzhkNDcxZDliOGVkNTM2MWIzMjA1NWFlMmJlNmI3NWZiNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-11-26T14:18:26Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-11-26T14:19:14Z"}, "message": "i386: Cleanup argument handling in ix86_expand_*_builtin functions.\n\nThere is no need for struct with rtx and mode members since mode is never used.\n\n2020-11-26  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\t* config/i386/i386-expand.c (ix86_expand_multi_arg_builtin):\n\tRemove args array of structs, declare rtx xops array instead.\n\tUpdate all uses.\n\t(ix86_expand_args_builtin): Ditto.\n\t(ix86_expand_round_builtin): Ditto.\n\t(ix86_expand_special_args_builtin): Ditto.", "tree": {"sha": "fe3fcb6987229041a4243335e92cb59c4d741453", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe3fcb6987229041a4243335e92cb59c4d741453"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/715a8bc8d471d9b8ed5361b32055ae2be6b75fb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/715a8bc8d471d9b8ed5361b32055ae2be6b75fb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/715a8bc8d471d9b8ed5361b32055ae2be6b75fb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/715a8bc8d471d9b8ed5361b32055ae2be6b75fb7/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a93fa478533908acd4595e6c1dd32885183260c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a93fa478533908acd4595e6c1dd32885183260c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a93fa478533908acd4595e6c1dd32885183260c"}], "stats": {"total": 112, "additions": 44, "deletions": 68}, "files": [{"sha": "408cd9baa7897ab274e059818937feb36d94ac2d", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 44, "deletions": 68, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715a8bc8d471d9b8ed5361b32055ae2be6b75fb7/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715a8bc8d471d9b8ed5361b32055ae2be6b75fb7/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=715a8bc8d471d9b8ed5361b32055ae2be6b75fb7", "patch": "@@ -8299,16 +8299,12 @@ ix86_expand_multi_arg_builtin (enum insn_code icode, tree exp, rtx target,\n \t\t\t       enum rtx_code sub_code)\n {\n   rtx pat;\n-  int i;\n-  int nargs;\n+  unsigned int i, nargs;\n   bool comparison_p = false;\n   bool tf_p = false;\n   bool last_arg_constant = false;\n   int num_memory = 0;\n-  struct {\n-    rtx op;\n-    machine_mode mode;\n-  } args[4];\n+  rtx xops[4];\n \n   machine_mode tmode = insn_data[icode].operand[0].mode;\n \n@@ -8402,7 +8398,7 @@ ix86_expand_multi_arg_builtin (enum insn_code icode, tree exp, rtx target,\n   else if (memory_operand (target, tmode))\n     num_memory++;\n \n-  gcc_assert (nargs <= 4);\n+  gcc_assert (nargs <= ARRAY_SIZE (xops));\n \n   for (i = 0; i < nargs; i++)\n     {\n@@ -8482,38 +8478,36 @@ ix86_expand_multi_arg_builtin (enum insn_code icode, tree exp, rtx target,\n \t    op = force_reg (mode, op);\n \t}\n \n-      args[i].op = op;\n-      args[i].mode = mode;\n+      xops[i] = op;\n     }\n \n   switch (nargs)\n     {\n     case 1:\n-      pat = GEN_FCN (icode) (target, args[0].op);\n+      pat = GEN_FCN (icode) (target, xops[0]);\n       break;\n \n     case 2:\n       if (tf_p)\n-\tpat = GEN_FCN (icode) (target, args[0].op, args[1].op,\n+\tpat = GEN_FCN (icode) (target, xops[0], xops[1],\n \t\t\t       GEN_INT ((int)sub_code));\n       else if (! comparison_p)\n-\tpat = GEN_FCN (icode) (target, args[0].op, args[1].op);\n+\tpat = GEN_FCN (icode) (target, xops[0], xops[1]);\n       else\n \t{\n \t  rtx cmp_op = gen_rtx_fmt_ee (sub_code, GET_MODE (target),\n-\t\t\t\t       args[0].op,\n-\t\t\t\t       args[1].op);\n+\t\t\t\t       xops[0], xops[1]);\n \n-\t  pat = GEN_FCN (icode) (target, cmp_op, args[0].op, args[1].op);\n+\t  pat = GEN_FCN (icode) (target, cmp_op, xops[0], xops[1]);\n \t}\n       break;\n \n     case 3:\n-      pat = GEN_FCN (icode) (target, args[0].op, args[1].op, args[2].op);\n+      pat = GEN_FCN (icode) (target, xops[0], xops[1], xops[2]);\n       break;\n \n     case 4:\n-      pat = GEN_FCN (icode) (target, args[0].op, args[1].op, args[2].op, args[3].op);\n+      pat = GEN_FCN (icode) (target, xops[0], xops[1], xops[2], xops[3]);\n       break;\n \n     default:\n@@ -8993,11 +8987,7 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n   unsigned int nargs_constant = 0;\n   unsigned int mask_pos = 0;\n   int num_memory = 0;\n-  struct\n-    {\n-      rtx op;\n-      machine_mode mode;\n-    } args[6];\n+  rtx xops[6];\n   bool second_arg_count = false;\n   enum insn_code icode = d->icode;\n   const struct insn_data_d *insn_p = &insn_data[icode];\n@@ -9757,7 +9747,7 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n       gcc_unreachable ();\n     }\n \n-  gcc_assert (nargs <= ARRAY_SIZE (args));\n+  gcc_assert (nargs <= ARRAY_SIZE (xops));\n \n   if (comparison != UNKNOWN)\n     {\n@@ -9964,34 +9954,31 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n \t    }\n \t}\n \n-      args[i].op = op;\n-      args[i].mode = mode;\n+      xops[i] = op;\n     }\n \n   switch (nargs)\n     {\n     case 1:\n-      pat = GEN_FCN (icode) (real_target, args[0].op);\n+      pat = GEN_FCN (icode) (real_target, xops[0]);\n       break;\n     case 2:\n-      pat = GEN_FCN (icode) (real_target, args[0].op, args[1].op);\n+      pat = GEN_FCN (icode) (real_target, xops[0], xops[1]);\n       break;\n     case 3:\n-      pat = GEN_FCN (icode) (real_target, args[0].op, args[1].op,\n-\t\t\t     args[2].op);\n+      pat = GEN_FCN (icode) (real_target, xops[0], xops[1], xops[2]);\n       break;\n     case 4:\n-      pat = GEN_FCN (icode) (real_target, args[0].op, args[1].op,\n-\t\t\t     args[2].op, args[3].op);\n+      pat = GEN_FCN (icode) (real_target, xops[0], xops[1],\n+\t\t\t     xops[2], xops[3]);\n       break;\n     case 5:\n-      pat = GEN_FCN (icode) (real_target, args[0].op, args[1].op,\n-\t\t\t     args[2].op, args[3].op, args[4].op);\n+      pat = GEN_FCN (icode) (real_target, xops[0], xops[1],\n+\t\t\t     xops[2], xops[3], xops[4]);\n       break;\n     case 6:\n-      pat = GEN_FCN (icode) (real_target, args[0].op, args[1].op,\n-\t\t\t     args[2].op, args[3].op, args[4].op,\n-\t\t\t     args[5].op);\n+      pat = GEN_FCN (icode) (real_target, xops[0], xops[1],\n+\t\t\t     xops[2], xops[3], xops[4], xops[5]);\n       break;\n     default:\n       gcc_unreachable ();\n@@ -10258,11 +10245,7 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n {\n   rtx pat;\n   unsigned int i, nargs;\n-  struct\n-    {\n-      rtx op;\n-      machine_mode mode;\n-    } args[6];\n+  rtx xops[6];\n   enum insn_code icode = d->icode;\n   const struct insn_data_d *insn_p = &insn_data[icode];\n   machine_mode tmode = insn_p->operand[0].mode;\n@@ -10362,7 +10345,7 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n     default:\n       gcc_unreachable ();\n     }\n-  gcc_assert (nargs <= ARRAY_SIZE (args));\n+  gcc_assert (nargs <= ARRAY_SIZE (xops));\n \n   if (optimize\n       || target == 0\n@@ -10434,34 +10417,31 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n \t    }\n \t}\n \n-      args[i].op = op;\n-      args[i].mode = mode;\n+      xops[i] = op;\n     }\n \n   switch (nargs)\n     {\n     case 1:\n-      pat = GEN_FCN (icode) (target, args[0].op);\n+      pat = GEN_FCN (icode) (target, xops[0]);\n       break;\n     case 2:\n-      pat = GEN_FCN (icode) (target, args[0].op, args[1].op);\n+      pat = GEN_FCN (icode) (target, xops[0], xops[1]);\n       break;\n     case 3:\n-      pat = GEN_FCN (icode) (target, args[0].op, args[1].op,\n-\t\t\t     args[2].op);\n+      pat = GEN_FCN (icode) (target, xops[0], xops[1], xops[2]);\n       break;\n     case 4:\n-      pat = GEN_FCN (icode) (target, args[0].op, args[1].op,\n-\t\t\t     args[2].op, args[3].op);\n+      pat = GEN_FCN (icode) (target, xops[0], xops[1],\n+\t\t\t     xops[2], xops[3]);\n       break;\n     case 5:\n-      pat = GEN_FCN (icode) (target, args[0].op, args[1].op,\n-\t\t\t     args[2].op, args[3].op, args[4].op);\n+      pat = GEN_FCN (icode) (target, xops[0], xops[1],\n+\t\t\t     xops[2], xops[3], xops[4]);\n       break;\n     case 6:\n-      pat = GEN_FCN (icode) (target, args[0].op, args[1].op,\n-\t\t\t     args[2].op, args[3].op, args[4].op,\n-\t\t\t     args[5].op);\n+      pat = GEN_FCN (icode) (target, xops[0], xops[1],\n+\t\t\t     xops[2], xops[3], xops[4], xops[5]);\n       break;\n     default:\n       gcc_unreachable ();\n@@ -10488,11 +10468,7 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n   rtx pat, op;\n   unsigned int i, nargs, arg_adjust, memory;\n   bool aligned_mem = false;\n-  struct\n-    {\n-      rtx op;\n-      machine_mode mode;\n-    } args[3];\n+  rtx xops[3];\n   enum insn_code icode = d->icode;\n   const struct insn_data_d *insn_p = &insn_data[icode];\n   machine_mode tmode = insn_p->operand[0].mode;\n@@ -10566,7 +10542,7 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n       nargs = 1;\n       klass = store;\n       /* Reserve memory operand for target.  */\n-      memory = ARRAY_SIZE (args);\n+      memory = ARRAY_SIZE (xops);\n       switch (icode)\n \t{\n \t/* These builtins and instructions require the memory\n@@ -10703,7 +10679,7 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n       nargs = 2;\n       klass = store;\n       /* Reserve memory operand for target.  */\n-      memory = ARRAY_SIZE (args);\n+      memory = ARRAY_SIZE (xops);\n       break;\n     case V4SF_FTYPE_PCV4SF_V4SF_UQI:\n     case V8SF_FTYPE_PCV8SF_V8SF_UQI:\n@@ -10777,7 +10753,7 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n       gcc_unreachable ();\n     }\n \n-  gcc_assert (nargs <= ARRAY_SIZE (args));\n+  gcc_assert (nargs <= ARRAY_SIZE (xops));\n \n   if (klass == store)\n     {\n@@ -10855,8 +10831,7 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n \t    }\n \t}\n \n-      args[i].op = op;\n-      args[i].mode = mode;\n+      xops[i]= op;\n     }\n \n   switch (nargs)\n@@ -10865,20 +10840,21 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n       pat = GEN_FCN (icode) (target);\n       break;\n     case 1:\n-      pat = GEN_FCN (icode) (target, args[0].op);\n+      pat = GEN_FCN (icode) (target, xops[0]);\n       break;\n     case 2:\n-      pat = GEN_FCN (icode) (target, args[0].op, args[1].op);\n+      pat = GEN_FCN (icode) (target, xops[0], xops[1]);\n       break;\n     case 3:\n-      pat = GEN_FCN (icode) (target, args[0].op, args[1].op, args[2].op);\n+      pat = GEN_FCN (icode) (target, xops[0], xops[1], xops[2]);\n       break;\n     default:\n       gcc_unreachable ();\n     }\n \n   if (! pat)\n     return 0;\n+\n   emit_insn (pat);\n   return klass == store ? 0 : target;\n }"}]}