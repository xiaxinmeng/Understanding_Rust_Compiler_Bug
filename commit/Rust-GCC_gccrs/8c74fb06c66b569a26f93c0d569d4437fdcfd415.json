{"sha": "8c74fb06c66b569a26f93c0d569d4437fdcfd415", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM3NGZiMDZjNjZiNTY5YTI2ZjkzYzBkNTY5ZDQ0MzdmZGNmZDQxNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-04-27T11:39:47Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-04-27T11:39:47Z"}, "message": "reload.h (elimination_target_reg_p): Declare.\n\ngcc/\n\t* reload.h (elimination_target_reg_p): Declare.\n\t* reload.c (find_reloads): Don't apply the reg_rtx move\n\toptimization if the SET_DEST satisfies elimination_target_reg_p.\n\t* reload1.c (elimination_target_reg_p): New function.\n\t(gen_reload): In the move/add2 fallback, make sure that op0\n\tdoes not overlap the destination register.\n\nFrom-SVN: r124215", "tree": {"sha": "a4840b670d6361a1ddbbb4b10ca1921ee3bb7e7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4840b670d6361a1ddbbb4b10ca1921ee3bb7e7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c74fb06c66b569a26f93c0d569d4437fdcfd415", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c74fb06c66b569a26f93c0d569d4437fdcfd415", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c74fb06c66b569a26f93c0d569d4437fdcfd415", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c74fb06c66b569a26f93c0d569d4437fdcfd415/comments", "author": null, "committer": null, "parents": [{"sha": "a9b77cd1f72118dead00c720f1fc3348b7c5127e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9b77cd1f72118dead00c720f1fc3348b7c5127e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9b77cd1f72118dead00c720f1fc3348b7c5127e"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "d56233977f6dda76728580387aad30fea9a648b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c74fb06c66b569a26f93c0d569d4437fdcfd415/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c74fb06c66b569a26f93c0d569d4437fdcfd415/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c74fb06c66b569a26f93c0d569d4437fdcfd415", "patch": "@@ -1,3 +1,12 @@\n+2007-04-27  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* reload.h (elimination_target_reg_p): Declare.\n+\t* reload.c (find_reloads): Don't apply the reg_rtx move\n+\toptimization if the SET_DEST satisfies elimination_target_reg_p.\n+\t* reload1.c (elimination_target_reg_p): New function.\n+\t(gen_reload): In the move/add2 fallback, make sure that op0\n+\tdoes not overlap the destination register.\n+\n 2007-04-27  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \t* tree-ssa-loop-im.c (determine_invariantness_stmt): Attempt to"}, {"sha": "8ed2f4b38804a1f8df7739b8e527217ddaed3fab", "filename": "gcc/reload.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c74fb06c66b569a26f93c0d569d4437fdcfd415/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c74fb06c66b569a26f93c0d569d4437fdcfd415/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=8c74fb06c66b569a26f93c0d569d4437fdcfd415", "patch": "@@ -4465,7 +4465,8 @@ find_reloads (rtx insn, int replace, int ind_levels, int live_known,\n     if (rld[i].when_needed == RELOAD_FOR_INPUT\n \t&& GET_CODE (PATTERN (insn)) == SET\n \t&& REG_P (SET_DEST (PATTERN (insn)))\n-\t&& SET_SRC (PATTERN (insn)) == rld[i].in)\n+\t&& SET_SRC (PATTERN (insn)) == rld[i].in\n+\t&& !elimination_target_reg_p (SET_DEST (PATTERN (insn))))\n       {\n \trtx dest = SET_DEST (PATTERN (insn));\n \tunsigned int regno = REGNO (dest);"}, {"sha": "38d340fd5cd63f17e7c17430c02ddfa31dbfde85", "filename": "gcc/reload.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c74fb06c66b569a26f93c0d569d4437fdcfd415/gcc%2Freload.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c74fb06c66b569a26f93c0d569d4437fdcfd415/gcc%2Freload.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.h?ref=8c74fb06c66b569a26f93c0d569d4437fdcfd415", "patch": "@@ -342,6 +342,7 @@ extern void mark_home_live (int);\n /* Scan X and replace any eliminable registers (such as fp) with a\n    replacement (such as sp), plus an offset.  */\n extern rtx eliminate_regs (rtx, enum machine_mode, rtx);\n+extern bool elimination_target_reg_p (rtx);\n \n /* Deallocate the reload register used by reload number R.  */\n extern void deallocate_reload_reg (int r);"}, {"sha": "4d2dea520b8363c459c8c4d4118bcfd1b5072466", "filename": "gcc/reload1.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c74fb06c66b569a26f93c0d569d4437fdcfd415/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c74fb06c66b569a26f93c0d569d4437fdcfd415/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=8c74fb06c66b569a26f93c0d569d4437fdcfd415", "patch": "@@ -3607,6 +3607,20 @@ update_eliminables (HARD_REG_SET *pset)\n     SET_HARD_REG_BIT (*pset, HARD_FRAME_POINTER_REGNUM);\n }\n \n+/* Return true if X is used as the target register of an elimination.  */\n+\n+bool\n+elimination_target_reg_p (rtx x)\n+{\n+  struct elim_table *ep;\n+\n+  for (ep = reg_eliminate; ep < &reg_eliminate[NUM_ELIMINABLE_REGS]; ep++)\n+    if (ep->to_rtx == x && ep->can_eliminate)\n+      return true;\n+\n+  return false;\n+}\n+\n /* Initialize the table of registers to eliminate.  */\n \n static void\n@@ -7873,6 +7887,7 @@ gen_reload (rtx out, rtx in, int opnum, enum reload_type type)\n       /* If that failed, copy the address register to the reload register.\n \t Then add the constant to the reload register.  */\n \n+      gcc_assert (!reg_overlap_mentioned_p (out, op0));\n       gen_reload (out, op1, opnum, type);\n       insn = emit_insn (gen_add2_insn (out, op0));\n       set_unique_reg_note (insn, REG_EQUIV, in);"}]}