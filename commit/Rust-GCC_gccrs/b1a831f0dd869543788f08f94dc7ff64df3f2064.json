{"sha": "b1a831f0dd869543788f08f94dc7ff64df3f2064", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFhODMxZjBkZDg2OTU0Mzc4OGYwOGY5NGRjN2ZmNjRkZjNmMjA2NA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-03-26T16:08:31Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-03-26T16:08:31Z"}, "message": "aarch64: Add costs for LD[234]/ST[234] permutes\n\nAt the moment, we cost LD[234] and ST[234] as N vector loads\nor stores, which effectively treats the implied permute as free.\nThis patch adds additional costs for the permutes, which apply on\ntop of the costs for the loads and stores.\n\nLike with the previous patches, this one only becomes active if\na CPU selects use_new_vector_costs.  It should therefore have\na very low impact on other CPUs.\n\ngcc/\n\t* config/aarch64/aarch64-protos.h (simd_vec_cost::ld2_st2_permute_cost)\n\t(simd_vec_cost::ld3_st3_permute_cost): New member variables.\n\t(simd_vec_cost::ld4_st4_permute_cost): Likewise.\n\t* config/aarch64/aarch64.c (generic_advsimd_vector_cost): Update\n\taccordingly, using zero for the new costs.\n\t(generic_sve_vector_cost, a64fx_advsimd_vector_cost): Likewise.\n\t(a64fx_sve_vector_cost, qdf24xx_advsimd_vector_cost): Likewise.\n\t(thunderx_advsimd_vector_cost, tsv110_advsimd_vector_cost): Likewise.\n\t(cortexa57_advsimd_vector_cost, exynosm1_advsimd_vector_cost)\n\t(xgene1_advsimd_vector_cost, thunderx2t99_advsimd_vector_cost)\n\t(thunderx3t110_advsimd_vector_cost): Likewise.\n\t(aarch64_ld234_st234_vectors): New function.\n\t(aarch64_adjust_stmt_cost): Likewise.\n\t(aarch64_add_stmt_cost): Call aarch64_adjust_stmt_cost if using\n\tthe new vector costs.", "tree": {"sha": "7879dd3ea74ae1f1253a246ff56eb0a12152562f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7879dd3ea74ae1f1253a246ff56eb0a12152562f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1a831f0dd869543788f08f94dc7ff64df3f2064", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1a831f0dd869543788f08f94dc7ff64df3f2064", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1a831f0dd869543788f08f94dc7ff64df3f2064", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1a831f0dd869543788f08f94dc7ff64df3f2064/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1282988ba15337f21a940cd5d1c0b34a62378a2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1282988ba15337f21a940cd5d1c0b34a62378a2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1282988ba15337f21a940cd5d1c0b34a62378a2f"}], "stats": {"total": 101, "additions": 101, "deletions": 0}, "files": [{"sha": "3d152754981016380c028893c1f49f532a7a68f5", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a831f0dd869543788f08f94dc7ff64df3f2064/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a831f0dd869543788f08f94dc7ff64df3f2064/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=b1a831f0dd869543788f08f94dc7ff64df3f2064", "patch": "@@ -202,6 +202,13 @@ struct simd_vec_cost\n      specially below.  */\n   const int fp_stmt_cost;\n \n+  /* Per-vector cost of permuting vectors after an LD2, LD3 or LD4,\n+     as well as the per-vector cost of permuting vectors before\n+     an ST2, ST3 or ST4.  */\n+  const int ld2_st2_permute_cost;\n+  const int ld3_st3_permute_cost;\n+  const int ld4_st4_permute_cost;\n+\n   /* Cost of a permute operation.  */\n   const int permute_cost;\n "}, {"sha": "8fb723dabd263122758cd5a2e24c85110db947c9", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a831f0dd869543788f08f94dc7ff64df3f2064/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a831f0dd869543788f08f94dc7ff64df3f2064/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=b1a831f0dd869543788f08f94dc7ff64df3f2064", "patch": "@@ -590,6 +590,9 @@ static const advsimd_vec_cost generic_advsimd_vector_cost =\n {\n   1, /* int_stmt_cost  */\n   1, /* fp_stmt_cost  */\n+  0, /* ld2_st2_permute_cost  */\n+  0, /* ld3_st3_permute_cost  */\n+  0, /* ld4_st4_permute_cost  */\n   2, /* permute_cost  */\n   2, /* reduc_i8_cost  */\n   2, /* reduc_i16_cost  */\n@@ -612,6 +615,9 @@ static const sve_vec_cost generic_sve_vector_cost =\n   {\n     1, /* int_stmt_cost  */\n     1, /* fp_stmt_cost  */\n+    0, /* ld2_st2_permute_cost  */\n+    0, /* ld3_st3_permute_cost  */\n+    0, /* ld4_st4_permute_cost  */\n     2, /* permute_cost  */\n     2, /* reduc_i8_cost  */\n     2, /* reduc_i16_cost  */\n@@ -650,6 +656,9 @@ static const advsimd_vec_cost a64fx_advsimd_vector_cost =\n {\n   2, /* int_stmt_cost  */\n   5, /* fp_stmt_cost  */\n+  0, /* ld2_st2_permute_cost  */\n+  0, /* ld3_st3_permute_cost  */\n+  0, /* ld4_st4_permute_cost  */\n   3, /* permute_cost  */\n   13, /* reduc_i8_cost  */\n   13, /* reduc_i16_cost  */\n@@ -671,6 +680,9 @@ static const sve_vec_cost a64fx_sve_vector_cost =\n   {\n     2, /* int_stmt_cost  */\n     5, /* fp_stmt_cost  */\n+    0, /* ld2_st2_permute_cost  */\n+    0, /* ld3_st3_permute_cost  */\n+    0, /* ld4_st4_permute_cost  */\n     3, /* permute_cost  */\n     13, /* reduc_i8_cost  */\n     13, /* reduc_i16_cost  */\n@@ -708,6 +720,9 @@ static const advsimd_vec_cost qdf24xx_advsimd_vector_cost =\n {\n   1, /* int_stmt_cost  */\n   3, /* fp_stmt_cost  */\n+  0, /* ld2_st2_permute_cost  */\n+  0, /* ld3_st3_permute_cost  */\n+  0, /* ld4_st4_permute_cost  */\n   2, /* permute_cost  */\n   1, /* reduc_i8_cost  */\n   1, /* reduc_i16_cost  */\n@@ -742,6 +757,9 @@ static const advsimd_vec_cost thunderx_advsimd_vector_cost =\n {\n   4, /* int_stmt_cost  */\n   1, /* fp_stmt_cost  */\n+  0, /* ld2_st2_permute_cost  */\n+  0, /* ld3_st3_permute_cost  */\n+  0, /* ld4_st4_permute_cost  */\n   4, /* permute_cost  */\n   2, /* reduc_i8_cost  */\n   2, /* reduc_i16_cost  */\n@@ -775,6 +793,9 @@ static const advsimd_vec_cost tsv110_advsimd_vector_cost =\n {\n   2, /* int_stmt_cost  */\n   2, /* fp_stmt_cost  */\n+  0, /* ld2_st2_permute_cost  */\n+  0, /* ld3_st3_permute_cost  */\n+  0, /* ld4_st4_permute_cost  */\n   2, /* permute_cost  */\n   3, /* reduc_i8_cost  */\n   3, /* reduc_i16_cost  */\n@@ -807,6 +828,9 @@ static const advsimd_vec_cost cortexa57_advsimd_vector_cost =\n {\n   2, /* int_stmt_cost  */\n   2, /* fp_stmt_cost  */\n+  0, /* ld2_st2_permute_cost  */\n+  0, /* ld3_st3_permute_cost  */\n+  0, /* ld4_st4_permute_cost  */\n   3, /* permute_cost  */\n   8, /* reduc_i8_cost  */\n   8, /* reduc_i16_cost  */\n@@ -840,6 +864,9 @@ static const advsimd_vec_cost exynosm1_advsimd_vector_cost =\n {\n   3, /* int_stmt_cost  */\n   3, /* fp_stmt_cost  */\n+  0, /* ld2_st2_permute_cost  */\n+  0, /* ld3_st3_permute_cost  */\n+  0, /* ld4_st4_permute_cost  */\n   3, /* permute_cost  */\n   3, /* reduc_i8_cost  */\n   3, /* reduc_i16_cost  */\n@@ -872,6 +899,9 @@ static const advsimd_vec_cost xgene1_advsimd_vector_cost =\n {\n   2, /* int_stmt_cost  */\n   2, /* fp_stmt_cost  */\n+  0, /* ld2_st2_permute_cost  */\n+  0, /* ld3_st3_permute_cost  */\n+  0, /* ld4_st4_permute_cost  */\n   2, /* permute_cost  */\n   4, /* reduc_i8_cost  */\n   4, /* reduc_i16_cost  */\n@@ -905,6 +935,9 @@ static const advsimd_vec_cost thunderx2t99_advsimd_vector_cost =\n {\n   4, /* int_stmt_cost  */\n   5, /* fp_stmt_cost  */\n+  0, /* ld2_st2_permute_cost  */\n+  0, /* ld3_st3_permute_cost  */\n+  0, /* ld4_st4_permute_cost  */\n   10, /* permute_cost  */\n   6, /* reduc_i8_cost  */\n   6, /* reduc_i16_cost  */\n@@ -938,6 +971,9 @@ static const advsimd_vec_cost thunderx3t110_advsimd_vector_cost =\n {\n   5, /* int_stmt_cost  */\n   5, /* fp_stmt_cost  */\n+  0, /* ld2_st2_permute_cost  */\n+  0, /* ld3_st3_permute_cost  */\n+  0, /* ld4_st4_permute_cost  */\n   10, /* permute_cost  */\n   5, /* reduc_i8_cost  */\n   5, /* reduc_i16_cost  */\n@@ -14086,6 +14122,26 @@ aarch64_reduc_type (vec_info *vinfo, stmt_vec_info stmt_info)\n   return -1;\n }\n \n+/* Return true if an access of kind KIND for STMT_INFO represents one\n+   vector of an LD[234] or ST[234] operation.  Return the total number of\n+   vectors (2, 3 or 4) if so, otherwise return a value outside that range.  */\n+static int\n+aarch64_ld234_st234_vectors (vect_cost_for_stmt kind, stmt_vec_info stmt_info)\n+{\n+  if ((kind == vector_load\n+       || kind == unaligned_load\n+       || kind == vector_store\n+       || kind == unaligned_store)\n+      && STMT_VINFO_DATA_REF (stmt_info))\n+    {\n+      stmt_info = DR_GROUP_FIRST_ELEMENT (stmt_info);\n+      if (stmt_info\n+\t  && STMT_VINFO_MEMORY_ACCESS_TYPE (stmt_info) == VMAT_LOAD_STORE_LANES)\n+\treturn DR_GROUP_SIZE (stmt_info);\n+    }\n+  return 0;\n+}\n+\n /* Return true if creating multiple copies of STMT_INFO for Advanced SIMD\n    vectors would produce a series of LDP or STP operations.  KIND is the\n    kind of statement that STMT_INFO represents.  */\n@@ -14320,6 +14376,38 @@ aarch64_sve_adjust_stmt_cost (class vec_info *vinfo, vect_cost_for_stmt kind,\n   return stmt_cost;\n }\n \n+/* STMT_COST is the cost calculated for STMT_INFO, which has cost kind KIND\n+   and which when vectorized would operate on vector type VECTYPE.  Add the\n+   cost of any embedded operations.  */\n+static unsigned int\n+aarch64_adjust_stmt_cost (vect_cost_for_stmt kind, stmt_vec_info stmt_info,\n+\t\t\t  tree vectype, unsigned int stmt_cost)\n+{\n+  if (vectype)\n+    {\n+      const simd_vec_cost *simd_costs = aarch64_simd_vec_costs (vectype);\n+\n+      /* Detect cases in which a vector load or store represents an\n+\t LD[234] or ST[234] instruction.  */\n+      switch (aarch64_ld234_st234_vectors (kind, stmt_info))\n+\t{\n+\tcase 2:\n+\t  stmt_cost += simd_costs->ld2_st2_permute_cost;\n+\t  break;\n+\n+\tcase 3:\n+\t  stmt_cost += simd_costs->ld3_st3_permute_cost;\n+\t  break;\n+\n+\tcase 4:\n+\t  stmt_cost += simd_costs->ld4_st4_permute_cost;\n+\t  break;\n+\t}\n+    }\n+\n+  return stmt_cost;\n+}\n+\n /* Implement targetm.vectorize.add_stmt_cost.  */\n static unsigned\n aarch64_add_stmt_cost (class vec_info *vinfo, void *data, int count,\n@@ -14347,6 +14435,12 @@ aarch64_add_stmt_cost (class vec_info *vinfo, void *data, int count,\n \tstmt_cost = aarch64_sve_adjust_stmt_cost (vinfo, kind, stmt_info,\n \t\t\t\t\t\t  vectype, stmt_cost);\n \n+      if (stmt_info && aarch64_use_new_vector_costs_p ())\n+\t/* Account for any extra \"embedded\" costs that apply additively\n+\t   to the base cost calculated above.  */\n+\tstmt_cost = aarch64_adjust_stmt_cost (kind, stmt_info, vectype,\n+\t\t\t\t\t      stmt_cost);\n+\n       /* Statements in an inner loop relative to the loop being\n \t vectorized are weighted more heavily.  The value here is\n \t arbitrary and could potentially be improved with analysis.  */"}]}