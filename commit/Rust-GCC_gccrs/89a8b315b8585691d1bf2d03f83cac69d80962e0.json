{"sha": "89a8b315b8585691d1bf2d03f83cac69d80962e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODlhOGIzMTViODU4NTY5MWQxYmYyZDAzZjgzY2FjNjlkODA5NjJlMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-03-30T21:01:19Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-03-30T21:01:19Z"}, "message": "sparc.h (OVERRIDE_OPTIONS): Don't override -fpic or -fomit-frame-pointer with profiling.\n\n        * config/sparc/sparc.h (OVERRIDE_OPTIONS): Don't override -fpic\n        or -fomit-frame-pointer with profiling.\n        (SUBTARGET_OVERRIDE_OPTIONS): Remove.\n        (FUNCTION_PROFILER): Do nothing.\n        (PROFILE_HOOK): New.\n        * config/sparc/sparc.c (sparc_override_options): Don't check\n        code models for profiling.\n        (sparc_function_profiler): Remove.\n        (sparc_profile_hook): New.\n        * config/sparc/sparc-protos.h: Update.\n\nFrom-SVN: r51610", "tree": {"sha": "57f84f5aebe83dce04083f27877db27ae4394101", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57f84f5aebe83dce04083f27877db27ae4394101"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89a8b315b8585691d1bf2d03f83cac69d80962e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89a8b315b8585691d1bf2d03f83cac69d80962e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89a8b315b8585691d1bf2d03f83cac69d80962e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89a8b315b8585691d1bf2d03f83cac69d80962e0/comments", "author": null, "committer": null, "parents": [{"sha": "6b7d1a345ed3a6936676a2ae190f9f4fc3a409ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b7d1a345ed3a6936676a2ae190f9f4fc3a409ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b7d1a345ed3a6936676a2ae190f9f4fc3a409ce"}], "stats": {"total": 101, "additions": 33, "deletions": 68}, "files": [{"sha": "230f511de85e81d55a27f33d1ab2c355ed05ffe2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a8b315b8585691d1bf2d03f83cac69d80962e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a8b315b8585691d1bf2d03f83cac69d80962e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89a8b315b8585691d1bf2d03f83cac69d80962e0", "patch": "@@ -1,3 +1,17 @@\n+2002-03-30  Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/6032\n+\t* config/sparc/sparc.h (OVERRIDE_OPTIONS): Don't override -fpic\n+\tor -fomit-frame-pointer with profiling.\n+\t(SUBTARGET_OVERRIDE_OPTIONS): Remove.\n+\t(FUNCTION_PROFILER): Do nothing.\n+\t(PROFILE_HOOK): New.\n+\t* config/sparc/sparc.c (sparc_override_options): Don't check\n+\tcode models for profiling.\n+\t(sparc_function_profiler): Remove.\n+\t(sparc_profile_hook): New.\n+\t* config/sparc/sparc-protos.h: Update.\n+\n 2002-03-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR optimization/6086\n@@ -7,12 +21,14 @@\n \n Sat Mar 30 14:08:55 CET 2002  Jan Hubicka  <jh@suse.cz>\n \n-\t* local-alloc.c (local_alloc): Avoid call of update_equiv_regs when not optimizing.\n+\t* local-alloc.c (local_alloc): Avoid call of update_equiv_regs\n+\twhen not optimizing.\n \n \t* toplev.c (rest_of_compilation): Cann mark_constant_function\n \tonly when optimizing.\n \n-\t* flow.c (calculate_global_regs_live): Ensure that all AUX fields are NULL.\n+\t* flow.c (calculate_global_regs_live): Ensure that all AUX fields\n+\tare NULL.\n \n \t* cfgcleanup.c (bb_flags): Add BB_NONTHREADABLE_BLOCK.\n \t(thread_jump): Set BB_NONTHREADABLE_BLOCK, check it."}, {"sha": "8c5c7ff75a2db9036ef163dd379286856fc775aa", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a8b315b8585691d1bf2d03f83cac69d80962e0/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a8b315b8585691d1bf2d03f83cac69d80962e0/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=89a8b315b8585691d1bf2d03f83cac69d80962e0", "patch": "@@ -57,10 +57,7 @@ extern int check_pic PARAMS ((int));\n extern int short_branch PARAMS ((int, int));\n extern int sparc_flat_epilogue_delay_slots PARAMS ((void));\n extern unsigned long sparc_flat_compute_frame_size PARAMS ((int));\n-extern void sparc_function_profiler PARAMS ((FILE *, int));\n-extern void sparc_function_block_profiler PARAMS ((FILE *, int));\n-extern void sparc_block_profiler PARAMS ((FILE *, int));\n-extern void sparc_function_block_profiler_exit PARAMS ((FILE *));\n+extern void sparc_profile_hook PARAMS ((int));\n extern void sparc_override_options PARAMS ((void));\n extern int leaf_return_peephole_ok PARAMS ((void));\n extern void sparc_output_scratch_registers PARAMS ((FILE *));"}, {"sha": "ec5340416f4ece89ce4fde57660b3efe0cda7b82", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 9, "deletions": 34, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a8b315b8585691d1bf2d03f83cac69d80962e0/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a8b315b8585691d1bf2d03f83cac69d80962e0/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=89a8b315b8585691d1bf2d03f83cac69d80962e0", "patch": "@@ -432,12 +432,6 @@ sparc_override_options ()\n   /* Do various machine dependent initializations.  */\n   sparc_init_modes ();\n \n-  if ((profile_flag)\n-      && sparc_cmodel != CM_32 && sparc_cmodel != CM_MEDLOW)\n-    {\n-      error (\"profiling does not support code models other than medlow\");\n-    }\n-\n   /* Register global variables with the garbage collector.  */\n   sparc_add_gc_roots ();\n }\n@@ -8617,42 +8611,23 @@ sparc_return_peephole_ok (dest, src)\n   return IN_OR_GLOBAL_P (dest);\n }\n \f\n-/* Output assembler code to FILE to increment profiler label # LABELNO\n-   for profiling a function entry.\n-\n-   32 bit sparc uses %g2 as the STATIC_CHAIN_REGNUM which gets clobbered\n-   during profiling so we need to save/restore it around the call to mcount.\n-   We're guaranteed that a save has just been done, and we use the space\n-   allocated for intreg/fpreg value passing.  */\n+/* Output rtl to increment the profiler label LABELNO\n+   for profiling a function entry.  */\n \n void\n-sparc_function_profiler (file, labelno)\n-     FILE *file;\n+sparc_profile_hook (labelno)\n      int labelno;\n {\n   char buf[32];\n-  ASM_GENERATE_INTERNAL_LABEL (buf, \"LP\", labelno);\n-\n-  if (! TARGET_ARCH64)\n-    fputs (\"\\tst\\t%g2, [%fp-4]\\n\", file);\n+  rtx lab, fun;\n \n-  fputs (\"\\tsethi\\t%hi(\", file);\n-  assemble_name (file, buf);\n-  fputs (\"), %o0\\n\", file);\n-\n-  fputs (\"\\tcall\\t\", file);\n-  assemble_name (file, MCOUNT_FUNCTION);\n-  putc ('\\n', file);\n-\n-  fputs (\"\\t or\\t%o0, %lo(\", file);\n-  assemble_name (file, buf);\n-  fputs (\"), %o0\\n\", file);\n+  ASM_GENERATE_INTERNAL_LABEL (buf, \"LP\", labelno);\n+  lab = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (buf));\n+  fun = gen_rtx_SYMBOL_REF (Pmode, MCOUNT_FUNCTION);\n \n-  if (! TARGET_ARCH64)\n-    fputs (\"\\tld\\t[%fp-4], %g2\\n\", file);\n+  emit_library_call (fun, 0, VOIDmode, 1, lab, Pmode);\n }\n-\n-\n+\f\n /* Mark ARG, which is really a struct ultrasparc_pipline_state *, for\n    GC.  */\n "}, {"sha": "fba2cc696e6593cbecdd5383387a9252bb146519", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 5, "deletions": 28, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a8b315b8585691d1bf2d03f83cac69d80962e0/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a8b315b8585691d1bf2d03f83cac69d80962e0/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=89a8b315b8585691d1bf2d03f83cac69d80962e0", "patch": "@@ -373,29 +373,7 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n /* Show we can debug even without a frame pointer.  */\n #define CAN_DEBUG_WITHOUT_FP\n \n-/* To make profiling work with -f{pic,PIC}, we need to emit the profiling\n-   code into the rtl.  Also, if we are profiling, we cannot eliminate\n-   the frame pointer (because the return address will get smashed).  */\n-\n-#define OVERRIDE_OPTIONS \\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    if (profile_flag || profile_arc_flag)\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tif (flag_pic)\t\t\t\t\t\t\t\\\n-\t  {\t\t\t\t\t\t\t\t\\\n-\t    const char *const pic_string = (flag_pic == 1) ? \"-fpic\" : \"-fPIC\";\\\n-\t    warning (\"%s and profiling conflict: disabling %s\",\t\t\\\n-\t\t     pic_string, pic_string);\t\t\t\t\\\n-\t    flag_pic = 0;\t\t\t\t\t\t\\\n-\t  }\t\t\t\t\t\t\t\t\\\n-\tflag_omit_frame_pointer = 0;\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    sparc_override_options ();\t\t\t\t\t\t\\\n-    SUBTARGET_OVERRIDE_OPTIONS;\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* This is meant to be redefined in the host dependent files.  */\n-#define SUBTARGET_OVERRIDE_OPTIONS\n+#define OVERRIDE_OPTIONS  sparc_override_options ()\n \n /* Generate DBX debugging information.  */\n \n@@ -1854,14 +1832,13 @@ do {\t\t\t\t\t\t\t\t\t\\\n #endif\n \n \f\n-/* Output assembler code to FILE to increment profiler label # LABELNO\n-   for profiling a function entry.  */\n+/* Emit rtl for profiling.  */\n+#define PROFILE_HOOK(LABEL)   sparc_profile_hook (LABEL)\n \n-#define FUNCTION_PROFILER(FILE, LABELNO) \\\n-  sparc_function_profiler(FILE, LABELNO)\n+/* All the work done in PROFILE_HOOK, but still required.  */\n+#define FUNCTION_PROFILER(FILE, LABELNO) do { } while (0)\n \n /* Set the name of the mcount function for the system.  */\n-\n #define MCOUNT_FUNCTION \"*mcount\"\n \f\n /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,"}]}