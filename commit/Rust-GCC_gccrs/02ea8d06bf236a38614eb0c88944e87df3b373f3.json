{"sha": "02ea8d06bf236a38614eb0c88944e87df3b373f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJlYThkMDZiZjIzNmEzODYxNGViMGM4ODk0NGU4N2RmM2IzNzNmMw==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2004-05-14T05:08:55Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2004-05-14T05:08:55Z"}, "message": "tree-ssa-live.c (calculate_live_on_entry): Ignore virtual variables.\n\n        * tree-ssa-live.c (calculate_live_on_entry): Ignore virtual\n        variables.  Simplify slightly by using USE_OP/DEF_OP instead\n        of USE_OP_PTR/DEF_OP_PTR and dereferencing the result.\n\nFrom-SVN: r81832", "tree": {"sha": "0b1887d59955d558b6642e832178665cb0476947", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b1887d59955d558b6642e832178665cb0476947"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02ea8d06bf236a38614eb0c88944e87df3b373f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02ea8d06bf236a38614eb0c88944e87df3b373f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02ea8d06bf236a38614eb0c88944e87df3b373f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02ea8d06bf236a38614eb0c88944e87df3b373f3/comments", "author": null, "committer": null, "parents": [{"sha": "90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce"}], "stats": {"total": 39, "additions": 9, "deletions": 30}, "files": [{"sha": "66e9db272eda43395eddd9b055acfa98d8e33767", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ea8d06bf236a38614eb0c88944e87df3b373f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ea8d06bf236a38614eb0c88944e87df3b373f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02ea8d06bf236a38614eb0c88944e87df3b373f3", "patch": "@@ -61,6 +61,10 @@\n \n 2004-05-13  Jeff Law  <law@redhat.com>\n \n+\t* tree-ssa-live.c (calculate_live_on_entry): Ignore virtual\n+\tvariables.  Simplify slightly by using USE_OP/DEF_OP instead\n+\tof USE_OP_PTR/DEF_OP_PTR and dereferencing the result.\n+\n \t* tree-into-ssa.c (compute_global_livein): Use EXECUTE_IF_SET_IN_BITMAP\n \trather than iterating through the blocks testing each bit in\n \tlivein to initialize the worklist."}, {"sha": "3a166a7c21caf2ed437a4f625e5fc66fa121eb48", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 5, "deletions": 30, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ea8d06bf236a38614eb0c88944e87df3b373f3/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ea8d06bf236a38614eb0c88944e87df3b373f3/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=02ea8d06bf236a38614eb0c88944e87df3b373f3", "patch": "@@ -551,12 +551,10 @@ calculate_live_on_entry (var_map map)\n   basic_block bb;\n   bitmap saw_def;\n   tree phi, var, stmt;\n-  tree *vec;\n+  tree op;\n   edge e;\n   varray_type stack;\n   block_stmt_iterator bsi;\n-  vuse_optype vuses;\n-  vdef_optype vdefs;\n   use_optype uses;\n   def_optype defs;\n   stmt_ann_t ann;\n@@ -610,39 +608,16 @@ calculate_live_on_entry (var_map map)\n \t  num = NUM_USES (uses);\n \t  for (i = 0; i < num; i++)\n \t    {\n-\t      vec = USE_OP_PTR (uses, i);\n-\t      add_livein_if_notdef (live, saw_def, *vec, bb);\n-\t    }\n-\n-\t  vuses = VUSE_OPS (ann);\n-\t  num = NUM_VUSES (vuses);\n-\t  for (i = 0; i < num; i++)\n-\t    {\n-\t      var = VUSE_OP (vuses, i);\n-\t      add_livein_if_notdef (live, saw_def, var, bb);\n-\t    }\n-\n-\t  vdefs = VDEF_OPS (ann);\n-\t  num = NUM_VDEFS (vdefs);\n-\t  for (i = 0; i < num; i++)\n-\t    {\n-\t      var = VDEF_OP (vdefs, i);\n-\t      add_livein_if_notdef (live, saw_def, var, bb);\n+\t      op = USE_OP (uses, i);\n+\t      add_livein_if_notdef (live, saw_def, op, bb);\n \t    }\n \n \t  defs = DEF_OPS (ann);\n \t  num = NUM_DEFS (defs);\n \t  for (i = 0; i < num; i++)\n \t    {\n-\t      vec = DEF_OP_PTR (defs, i);\n-\t      set_if_valid (map, saw_def, *vec);\n-\t    }\n-\n-\t  num = NUM_VDEFS (vdefs);\n-\t  for (i = 0; i < num; i++)\n-\t    {\n-\t      var = VDEF_RESULT (vdefs, i);\n-\t      set_if_valid (map, saw_def, var);\n+\t      op = DEF_OP (defs, i);\n+\t      set_if_valid (map, saw_def, op);\n \t    }\n \t}\n     }"}]}