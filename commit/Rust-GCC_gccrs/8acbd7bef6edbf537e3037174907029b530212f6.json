{"sha": "8acbd7bef6edbf537e3037174907029b530212f6", "node_id": "C_kwDOANBUbNoAKDhhY2JkN2JlZjZlZGJmNTM3ZTMwMzcxNzQ5MDcwMjliNTMwMjEyZjY", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-24T08:43:36Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-25T10:51:21Z"}, "message": "path solver: Compute ranges in path in gimple order.\n\nAndrew's patch for this PR103254 papered over some underlying\nperformance issues in the path solver that I'd like to address.\n\nWe are currently solving the SSA's defined in the current block in\nbitmap order, which amounts to random order for all purposes.  This is\ncausing unnecessary recursion in gori.  This patch changes the order\nto gimple order, thus solving dependencies before uses.\n\nThere is no change in threadable paths with this change.\n\nTested on x86-64 & ppc64le Linux.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/103254\n\t* gimple-range-path.cc (path_range_query::compute_ranges_defined): New\n\t(path_range_query::compute_ranges_in_block): Move to\n\tcompute_ranges_defined.\n\t* gimple-range-path.h (compute_ranges_defined): New.", "tree": {"sha": "af3c72a02705b7ba336706efd779b67af58357ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af3c72a02705b7ba336706efd779b67af58357ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8acbd7bef6edbf537e3037174907029b530212f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8acbd7bef6edbf537e3037174907029b530212f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8acbd7bef6edbf537e3037174907029b530212f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8acbd7bef6edbf537e3037174907029b530212f6/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94912212d3d1be0b1c490e9b5f45165ef5f30d8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94912212d3d1be0b1c490e9b5f45165ef5f30d8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94912212d3d1be0b1c490e9b5f45165ef5f30d8a"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "e24086691c4259944398658f4103b18998ccdc05", "filename": "gcc/gimple-range-path.cc", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8acbd7bef6edbf537e3037174907029b530212f6/gcc%2Fgimple-range-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8acbd7bef6edbf537e3037174907029b530212f6/gcc%2Fgimple-range-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.cc?ref=8acbd7bef6edbf537e3037174907029b530212f6", "patch": "@@ -401,6 +401,27 @@ path_range_query::compute_ranges_in_phis (basic_block bb)\n     }\n }\n \n+// Compute ranges defined in block.\n+\n+void\n+path_range_query::compute_ranges_defined (basic_block bb)\n+{\n+  int_range_max r;\n+\n+  compute_ranges_in_phis (bb);\n+\n+  // Iterate in gimple order to minimize recursion.\n+  for (auto gsi = gsi_start_nondebug_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+    if (gimple_has_lhs (gsi_stmt (gsi)))\n+      {\n+\ttree name = gimple_get_lhs (gsi_stmt (gsi));\n+\tif (TREE_CODE (name) == SSA_NAME\n+\t    && bitmap_bit_p (m_imports, SSA_NAME_VERSION (name))\n+\t    && range_defined_in_block (r, name, bb))\n+\t  set_cache (r, name);\n+      }\n+}\n+\n // Compute ranges defined in the current block, or exported to the\n // next block.\n \n@@ -423,17 +444,7 @@ path_range_query::compute_ranges_in_block (basic_block bb)\n \tclear_cache (name);\n     }\n \n-  // Solve imports defined in this block, starting with the PHIs...\n-  compute_ranges_in_phis (bb);\n-  // ...and then the rest of the imports.\n-  EXECUTE_IF_SET_IN_BITMAP (m_imports, 0, i, bi)\n-    {\n-      tree name = ssa_name (i);\n-\n-      if (gimple_code (SSA_NAME_DEF_STMT (name)) != GIMPLE_PHI\n-\t  && range_defined_in_block (r, name, bb))\n-\tset_cache (r, name);\n-    }\n+  compute_ranges_defined (bb);\n \n   if (at_exit ())\n     return;"}, {"sha": "81c87d475dd67de0dd73ae2f23a40c808ad17d66", "filename": "gcc/gimple-range-path.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8acbd7bef6edbf537e3037174907029b530212f6/gcc%2Fgimple-range-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8acbd7bef6edbf537e3037174907029b530212f6/gcc%2Fgimple-range-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.h?ref=8acbd7bef6edbf537e3037174907029b530212f6", "patch": "@@ -58,6 +58,7 @@ class path_range_query : public range_query\n   // Methods to compute ranges for the given path.\n   bool range_defined_in_block (irange &, tree name, basic_block bb);\n   void compute_ranges_in_block (basic_block bb);\n+  void compute_ranges_defined (basic_block bb);\n   void compute_ranges_in_phis (basic_block bb);\n   void adjust_for_non_null_uses (basic_block bb);\n   void ssa_range_in_phi (irange &r, gphi *phi);"}]}