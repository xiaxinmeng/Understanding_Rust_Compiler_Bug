{"sha": "b6316324fceaef431799a8b386de5cc9881d6898", "node_id": "C_kwDOANBUbNoAKGI2MzE2MzI0ZmNlYWVmNDMxNzk5YThiMzg2ZGU1Y2M5ODgxZDY4OTg", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-08-22T12:45:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-08-22T14:13:11Z"}, "message": "Remove dead predicate analysis GENERIC expr building code\n\nThe following removes the unused def_expr, use_expr and expr APIs\nfrom the predicate class including the unconditional build of the\nGENERIC use_expr on each uninit analysis run.\n\n\t* gimple-predicate-analysis.h (predicate::m_use_expr): Remove.\n\t(predicate::def_expr): Likewise.\n\t(predicate::use_expr): Likewise.\n\t(predicate::expr): Likewise.\n\t* gimple-predicate-analysis.cc (predicate::def_expr): Remove.\n\t(predicate::use_expr): Likewise.\n\t(predicate::expr): Likewise.\n\t(predicate::is_use_guarded): Do not build m_use_expr.", "tree": {"sha": "14341b8990015a6158075d07176a00e7f33fefd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14341b8990015a6158075d07176a00e7f33fefd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6316324fceaef431799a8b386de5cc9881d6898", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6316324fceaef431799a8b386de5cc9881d6898", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6316324fceaef431799a8b386de5cc9881d6898", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6316324fceaef431799a8b386de5cc9881d6898/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "827f64135957ce21617cd0345508077439fa29d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/827f64135957ce21617cd0345508077439fa29d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/827f64135957ce21617cd0345508077439fa29d8"}], "stats": {"total": 55, "additions": 2, "deletions": 53}, "files": [{"sha": "d1b0d1283dc39e196d0983995558eb67c6f645c2", "filename": "gcc/gimple-predicate-analysis.cc", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6316324fceaef431799a8b386de5cc9881d6898/gcc%2Fgimple-predicate-analysis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6316324fceaef431799a8b386de5cc9881d6898/gcc%2Fgimple-predicate-analysis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-predicate-analysis.cc?ref=b6316324fceaef431799a8b386de5cc9881d6898", "patch": "@@ -1892,7 +1892,6 @@ predicate::is_use_guarded (gimple *use_stmt, basic_block use_bb,\n \t  /* Lazily initialize *THIS from the PHI and build its use\n \t     expression.  */\n \t  init_from_phi_def (phi);\n-\t  m_use_expr = build_pred_expr (use_preds.m_preds);\n \t}\n \n       /* The use is not guarded.  */\n@@ -1921,7 +1920,6 @@ predicate::is_use_guarded (gimple *use_stmt, basic_block use_bb,\n       /* Lazily initialize *THIS from PHI.  */\n       if (!init_from_phi_def (phi))\n \t{\n-\t  m_use_expr = build_pred_expr (use_preds.m_preds);\n \t  return false;\n \t}\n \n@@ -1938,8 +1936,6 @@ predicate::is_use_guarded (gimple *use_stmt, basic_block use_bb,\n   if (superset_of (use_preds))\n     return true;\n \n-  m_use_expr = build_pred_expr (use_preds.m_preds);\n-\n   return false;\n }\n \n@@ -2326,38 +2322,3 @@ predicate::init_from_control_deps (const vec<edge> *dep_chains,\n     /* Clear M_PREDS to indicate failure.  */\n     m_preds.release ();\n }\n-\n-/* Return the predicate expression guarding the definition of\n-   the interesting variable.  When INVERT is set, return the logical\n-   NOT of the predicate.  */\n-\n-tree\n-predicate::def_expr (bool invert /* = false */) const\n-{\n-  /* The predicate is stored in an inverted form.  */\n-  return build_pred_expr (m_preds, !invert);\n-}\n-\n-/* Return the predicate expression guarding the use of the interesting\n-   variable or null if the use predicate hasn't been determined yet.  */\n-\n-tree\n-predicate::use_expr () const\n-{\n-  return m_use_expr;\n-}\n-\n-/* Return a logical AND expression with the (optionally inverted) predicate\n-   expression guarding the definition of the interesting variable and one\n-   guarding its use.  Return null if the use predicate hasn't yet been\n-   determined.  */\n-\n-tree\n-predicate::expr (bool invert /* = false */) const\n-{\n-  if (!m_use_expr)\n-    return NULL_TREE;\n-\n-  tree expr = build_pred_expr (m_preds, !invert);\n-  return build2 (TRUTH_AND_EXPR, boolean_type_node, expr, m_use_expr);\n-}"}, {"sha": "204cdbccfc7099675c445818948c519d41de000f", "filename": "gcc/gimple-predicate-analysis.h", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6316324fceaef431799a8b386de5cc9881d6898/gcc%2Fgimple-predicate-analysis.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6316324fceaef431799a8b386de5cc9881d6898/gcc%2Fgimple-predicate-analysis.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-predicate-analysis.h?ref=b6316324fceaef431799a8b386de5cc9881d6898", "patch": "@@ -69,11 +69,11 @@ class predicate\n \n   /* Construct with the specified EVAL object.  */\n   predicate (func_t &eval)\n-    : m_preds (vNULL), m_eval (eval), m_use_expr () { }\n+    : m_preds (vNULL), m_eval (eval) { }\n \n   /* Copy.  */\n   predicate (const predicate &rhs)\n-    : m_preds (vNULL), m_eval (rhs.m_eval), m_use_expr ()\n+    : m_preds (vNULL), m_eval (rhs.m_eval)\n     {\n       *this = rhs;\n     }\n@@ -109,15 +109,6 @@ class predicate\n   bool is_use_guarded (gimple *, basic_block, gphi *, unsigned,\n \t\t       hash_set<gphi *> *);\n \n-  /* Return the predicate expression guarding the definition of\n-     the interesting variable, optionally inverted.  */\n-  tree def_expr (bool = false) const;\n-  /* Return the predicate expression guarding the use of the interesting\n-     variable.  */\n-  tree use_expr () const;\n-\n-  tree expr (bool = false) const;\n-\n private:\n   bool includes (const pred_chain &) const;\n   bool superset_of (const predicate &) const;\n@@ -145,9 +136,6 @@ class predicate\n   pred_chain_union m_preds;\n   /* Callback to evaluate an operand.  Return true if it's interesting.  */\n   func_t &m_eval;\n-  /* The predicate expression guarding the use of the interesting\n-     variable.  */\n-  tree m_use_expr;\n };\n \n /* Bit mask handling macros.  */"}]}