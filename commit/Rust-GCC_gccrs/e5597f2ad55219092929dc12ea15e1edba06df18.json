{"sha": "e5597f2ad55219092929dc12ea15e1edba06df18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU1OTdmMmFkNTUyMTkwOTI5MjlkYzEyZWExNWUxZWRiYTA2ZGYxOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-09-18T07:47:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-09-18T07:47:25Z"}, "message": "openmp: Allow private or firstprivate arguments to default clause even for C/C++\n\nOpenMP 5.1 allows default(private) or default(firstprivate) even in C/C++,\nbut it behaves the same way as in Fortran only for variables not declared at\nnamespace or file scope.  For the namespace/file scope variables it instead\nbehaves as default(none).\n\n2021-09-18  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/\n\t* gimplify.c (omp_default_clause): For C/C++ default({,first}private),\n\tif file/namespace scope variable doesn't have predetermined sharing,\n\ttreat it as if there was default(none).\ngcc/c/\n\t* c-parser.c (c_parser_omp_clause_default): Handle private and\n\tfirstprivate arguments, adjust diagnostics on unknown argument.\ngcc/cp/\n\t* parser.c (cp_parser_omp_clause_default): Handle private and\n\tfirstprivate arguments, adjust diagnostics on unknown argument.\n\t* cp-gimplify.c (cxx_omp_finish_clause): Handle OMP_CLAUSE_PRIVATE.\ngcc/testsuite/\n\t* c-c++-common/gomp/default-2.c: New test.\n\t* c-c++-common/gomp/default-3.c: New test.\n\t* g++.dg/gomp/default-1.C: New test.\nlibgomp/\n\t* testsuite/libgomp.c++/default-1.C: New test.\n\t* testsuite/libgomp.c-c++-common/default-1.c: New test.\n\t* libgomp.texi (OpenMP 5.1): Mark \"private and firstprivate argument\n\tto default clause in C and C++\" as implemented.", "tree": {"sha": "db45e32b3dc999d431fae4e2bdbd0bed09573756", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db45e32b3dc999d431fae4e2bdbd0bed09573756"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5597f2ad55219092929dc12ea15e1edba06df18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5597f2ad55219092929dc12ea15e1edba06df18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5597f2ad55219092929dc12ea15e1edba06df18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5597f2ad55219092929dc12ea15e1edba06df18/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d07c750cc6c866e77e0c7eafcd71466139882618", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d07c750cc6c866e77e0c7eafcd71466139882618", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d07c750cc6c866e77e0c7eafcd71466139882618"}], "stats": {"total": 309, "additions": 302, "deletions": 7}, "files": [{"sha": "c5e222bfeef5e7ad0cd6309f04b5958210cca1d5", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5597f2ad55219092929dc12ea15e1edba06df18/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5597f2ad55219092929dc12ea15e1edba06df18/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=e5597f2ad55219092929dc12ea15e1edba06df18", "patch": "@@ -13420,6 +13420,9 @@ c_parser_omp_clause_copyprivate (c_parser *parser, tree list)\n /* OpenMP 2.5:\n    default ( none | shared )\n \n+   OpenMP 5.1:\n+   default ( private | firstprivate )\n+\n    OpenACC:\n    default ( none | present ) */\n \n@@ -13446,9 +13449,24 @@ c_parser_omp_clause_default (c_parser *parser, tree list, bool is_oacc)\n \t  break;\n \n \tcase 'p':\n-\t  if (strcmp (\"present\", p) != 0 || !is_oacc)\n+\t  if (is_oacc)\n+\t    {\n+\t      if (strcmp (\"present\", p) != 0)\n+\t\tgoto invalid_kind;\n+\t      kind = OMP_CLAUSE_DEFAULT_PRESENT;\n+\t    }\n+\t  else\n+\t    {\n+\t      if (strcmp (\"private\", p) != 0)\n+\t\tgoto invalid_kind;\n+\t      kind = OMP_CLAUSE_DEFAULT_PRIVATE;\n+\t    }\n+\t  break;\n+\n+\tcase 'f':\n+\t  if (strcmp (\"firstprivate\", p) != 0 || is_oacc)\n \t    goto invalid_kind;\n-\t  kind = OMP_CLAUSE_DEFAULT_PRESENT;\n+\t  kind = OMP_CLAUSE_DEFAULT_FIRSTPRIVATE;\n \t  break;\n \n \tcase 's':\n@@ -13469,7 +13487,8 @@ c_parser_omp_clause_default (c_parser *parser, tree list, bool is_oacc)\n       if (is_oacc)\n \tc_parser_error (parser, \"expected %<none%> or %<present%>\");\n       else\n-\tc_parser_error (parser, \"expected %<none%> or %<shared%>\");\n+\tc_parser_error (parser, \"expected %<none%>, %<shared%>, \"\n+\t\t\t\t\"%<private%> or %<firstprivate%>\");\n     }\n   parens.skip_until_found_close (parser);\n "}, {"sha": "c86a5fefa68ff5636fb7e0539ae9739af3828fbd", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5597f2ad55219092929dc12ea15e1edba06df18/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5597f2ad55219092929dc12ea15e1edba06df18/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=e5597f2ad55219092929dc12ea15e1edba06df18", "patch": "@@ -2060,6 +2060,7 @@ cxx_omp_finish_clause (tree c, gimple_seq *, bool /* openacc */)\n   bool make_shared = false;\n \n   if (OMP_CLAUSE_CODE (c) != OMP_CLAUSE_FIRSTPRIVATE\n+      && OMP_CLAUSE_CODE (c) != OMP_CLAUSE_PRIVATE\n       && (OMP_CLAUSE_CODE (c) != OMP_CLAUSE_LASTPRIVATE\n \t  || !OMP_CLAUSE_LASTPRIVATE_LOOP_IV (c)))\n     return;\n@@ -2080,9 +2081,10 @@ cxx_omp_finish_clause (tree c, gimple_seq *, bool /* openacc */)\n      Save the results, because later we won't be in the right context\n      for making these queries.  */\n   bool first = OMP_CLAUSE_CODE (c) == OMP_CLAUSE_FIRSTPRIVATE;\n+  bool last = OMP_CLAUSE_CODE (c) == OMP_CLAUSE_LASTPRIVATE;\n   if (!make_shared\n       && CLASS_TYPE_P (inner_type)\n-      && cxx_omp_create_clause_info (c, inner_type, !first, first, !first,\n+      && cxx_omp_create_clause_info (c, inner_type, !first, first, last,\n \t\t\t\t     true))\n     make_shared = true;\n "}, {"sha": "b9ed38dbafb9d9bcccad48e9870d47aff929d27e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5597f2ad55219092929dc12ea15e1edba06df18/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5597f2ad55219092929dc12ea15e1edba06df18/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=e5597f2ad55219092929dc12ea15e1edba06df18", "patch": "@@ -36988,6 +36988,9 @@ cp_parser_omp_clause_collapse (cp_parser *parser, tree list, location_t location\n /* OpenMP 2.5:\n    default ( none | shared )\n \n+   OpenMP 5.1:\n+   default ( private | firstprivate )\n+\n    OpenACC:\n    default ( none | present ) */\n \n@@ -37001,7 +37004,12 @@ cp_parser_omp_clause_default (cp_parser *parser, tree list,\n   matching_parens parens;\n   if (!parens.require_open (parser))\n     return list;\n-  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))\n+  if (!is_oacc && cp_lexer_next_token_is_keyword (parser->lexer, RID_PRIVATE))\n+    {\n+      kind = OMP_CLAUSE_DEFAULT_PRIVATE;\n+      cp_lexer_consume_token (parser->lexer);\n+    }\n+  else if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))\n     {\n       tree id = cp_lexer_peek_token (parser->lexer)->u.value;\n       const char *p = IDENTIFIER_POINTER (id);\n@@ -37020,6 +37028,12 @@ cp_parser_omp_clause_default (cp_parser *parser, tree list,\n \t  kind = OMP_CLAUSE_DEFAULT_PRESENT;\n \t  break;\n \n+\tcase 'f':\n+\t  if (strcmp (\"firstprivate\", p) != 0 || is_oacc)\n+\t    goto invalid_kind;\n+\t  kind = OMP_CLAUSE_DEFAULT_FIRSTPRIVATE;\n+\t  break;\n+\n \tcase 's':\n \t  if (strcmp (\"shared\", p) != 0 || is_oacc)\n \t    goto invalid_kind;\n@@ -37038,7 +37052,8 @@ cp_parser_omp_clause_default (cp_parser *parser, tree list,\n       if (is_oacc)\n \tcp_parser_error (parser, \"expected %<none%> or %<present%>\");\n       else\n-\tcp_parser_error (parser, \"expected %<none%> or %<shared%>\");\n+\tcp_parser_error (parser, \"expected %<none%>, %<shared%>, \"\n+\t\t\t\t \"%<private%> or %<firstprivate%>\");\n     }\n \n   if (kind == OMP_CLAUSE_DEFAULT_UNSPECIFIED"}, {"sha": "9163dcda438afb756f356b6d1e3db10a7dff1da6", "filename": "gcc/gimplify.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5597f2ad55219092929dc12ea15e1edba06df18/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5597f2ad55219092929dc12ea15e1edba06df18/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=e5597f2ad55219092929dc12ea15e1edba06df18", "patch": "@@ -7369,6 +7369,18 @@ omp_default_clause (struct gimplify_omp_ctx *ctx, tree decl,\n     default_kind = kind;\n   else if (VAR_P (decl) && TREE_STATIC (decl) && DECL_IN_CONSTANT_POOL (decl))\n     default_kind = OMP_CLAUSE_DEFAULT_SHARED;\n+  /* For C/C++ default({,first}private), variables with static storage duration\n+     declared in a namespace or global scope and referenced in construct\n+     must be explicitly specified, i.e. acts as default(none).  */\n+  else if ((default_kind == OMP_CLAUSE_DEFAULT_PRIVATE\n+\t    || default_kind == OMP_CLAUSE_DEFAULT_FIRSTPRIVATE)\n+\t   && VAR_P (decl)\n+\t   && is_global_var (decl)\n+\t   && (DECL_FILE_SCOPE_P (decl)\n+\t       || (DECL_CONTEXT (decl)\n+\t\t   && TREE_CODE (DECL_CONTEXT (decl)) == NAMESPACE_DECL))\n+\t   && !lang_GNU_Fortran ())\n+    default_kind = OMP_CLAUSE_DEFAULT_NONE;\n \n   switch (default_kind)\n     {"}, {"sha": "6378e6e804c6a76a2fba9f984ab8284855659383", "filename": "gcc/testsuite/c-c++-common/gomp/default-2.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5597f2ad55219092929dc12ea15e1edba06df18/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdefault-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5597f2ad55219092929dc12ea15e1edba06df18/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdefault-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdefault-2.c?ref=e5597f2ad55219092929dc12ea15e1edba06df18", "patch": "@@ -0,0 +1,67 @@\n+int x;\n+extern int z;\n+\n+void\n+foo (void)\n+{\n+  int y = 0, i;\n+  static int w;\n+  #pragma omp task default(firstprivate)\t/* { dg-message \"note: enclosing 'task'\" } */\n+  {\n+    y++;\t/* { dg-bogus \"'y' not specified in enclosing 'task'\" } */\n+    w++;\t/* { dg-bogus \"'w' not specified in enclosing 'task'\" } */\n+    x++;\t/* { dg-error \"'x' not specified in enclosing 'task'\" } */\n+    z++;\t/* { dg-error \"'z' not specified in enclosing 'task'\" } */\n+  }\n+  #pragma omp taskloop default(firstprivate)\t/* { dg-message \"note: enclosing 'taskloop'\" } */\n+  for (i = 0; i < 64; i++)\n+    {\n+      y++;\t/* { dg-bogus \"'y' not specified in enclosing 'taskloop'\" } */\n+      w++;\t/* { dg-bogus \"'w' not specified in enclosing 'taskloop'\" } */\n+      x++;\t/* { dg-error \"'x' not specified in enclosing 'taskloop'\" } */\n+      z++;\t/* { dg-error \"'z' not specified in enclosing 'taskloop'\" } */\n+    }\n+  #pragma omp teams default(firstprivate)\t/* { dg-message \"note: enclosing 'teams'\" } */\n+  {\n+    y++;\t/* { dg-bogus \"'y' not specified in enclosing 'teams'\" } */\n+    w++;\t/* { dg-bogus \"'w' not specified in enclosing 'teams'\" } */\n+    x++;\t/* { dg-error \"'x' not specified in enclosing 'teams'\" } */\n+    z++;\t/* { dg-error \"'z' not specified in enclosing 'teams'\" } */\n+  }\n+  #pragma omp parallel default(firstprivate)\t/* { dg-message \"note: enclosing 'parallel'\" } */\n+  {\n+    y++;\t/* { dg-bogus \"'y' not specified in enclosing 'parallel'\" } */\n+    w++;\t/* { dg-bogus \"'w' not specified in enclosing 'parallel'\" } */\n+    x++;\t/* { dg-error \"'x' not specified in enclosing 'parallel'\" } */\n+    z++;\t/* { dg-error \"'z' not specified in enclosing 'parallel'\" } */\n+  }\n+  #pragma omp task default(private)\t/* { dg-message \"note: enclosing 'task'\" } */\n+  {\n+    y = 1;\t/* { dg-bogus \"'y' not specified in enclosing 'task'\" } */\n+    w = 1;\t/* { dg-bogus \"'w' not specified in enclosing 'task'\" } */\n+    x++;\t/* { dg-error \"'x' not specified in enclosing 'task'\" } */\n+    z++;\t/* { dg-error \"'z' not specified in enclosing 'task'\" } */\n+  }\n+  #pragma omp taskloop default(private)\t/* { dg-message \"note: enclosing 'taskloop'\" } */\n+  for (i = 0; i < 64; i++)\n+    {\n+      y = 1;\t/* { dg-bogus \"'y' not specified in enclosing 'taskloop'\" } */\n+      w = 1;\t/* { dg-bogus \"'w' not specified in enclosing 'taskloop'\" } */\n+      x++;\t/* { dg-error \"'x' not specified in enclosing 'taskloop'\" } */\n+      z++;\t/* { dg-error \"'z' not specified in enclosing 'taskloop'\" } */\n+    }\n+  #pragma omp teams default(private)\t/* { dg-message \"note: enclosing 'teams'\" } */\n+  {\n+    y = 1;\t/* { dg-bogus \"'y' not specified in enclosing 'teams'\" } */\n+    w = 1;\t/* { dg-bogus \"'w' not specified in enclosing 'teams'\" } */\n+    x++;\t/* { dg-error \"'x' not specified in enclosing 'teams'\" } */\n+    z++;\t/* { dg-error \"'z' not specified in enclosing 'teams'\" } */\n+  }\n+  #pragma omp parallel default(private)\t/* { dg-message \"note: enclosing 'parallel'\" } */\n+  {\n+    y = 1;\t/* { dg-bogus \"'y' not specified in enclosing 'parallel'\" } */\n+    w++;\t/* { dg-bogus \"'w' not specified in enclosing 'parallel'\" } */\n+    x++;\t/* { dg-error \"'x' not specified in enclosing 'parallel'\" } */\n+    z++;\t/* { dg-error \"'z' not specified in enclosing 'parallel'\" } */\n+  }\n+}"}, {"sha": "a742a7105e91741e53a2c6a2f4ba342ddfae9d4a", "filename": "gcc/testsuite/c-c++-common/gomp/default-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5597f2ad55219092929dc12ea15e1edba06df18/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdefault-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5597f2ad55219092929dc12ea15e1edba06df18/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdefault-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdefault-3.c?ref=e5597f2ad55219092929dc12ea15e1edba06df18", "patch": "@@ -0,0 +1,14 @@\n+void\n+foo (void)\n+{\n+  int i;\n+  #pragma omp task default(copyprivate)\t/* { dg-error \"expected 'none', 'shared', 'private' or 'firstprivate' before 'copyprivate'\" } */\n+  ;\n+  #pragma omp taskloop default(copyprivate)\t/* { dg-error \"expected 'none', 'shared', 'private' or 'firstprivate' before 'copyprivate'\" } */\n+  for (i = 0; i < 64; i++)\n+    ;\n+  #pragma omp teams default(copyprivate)\t/* { dg-error \"expected 'none', 'shared', 'private' or 'firstprivate' before 'copyprivate'\" } */\n+  ;\n+  #pragma omp parallel default(copyprivate)\t/* { dg-error \"expected 'none', 'shared', 'private' or 'firstprivate' before 'copyprivate'\" } */\n+  ;\n+}"}, {"sha": "e39df12837d1a06edb82a1ed0a21df2318f74820", "filename": "gcc/testsuite/g++.dg/gomp/default-1.C", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5597f2ad55219092929dc12ea15e1edba06df18/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdefault-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5597f2ad55219092929dc12ea15e1edba06df18/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdefault-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdefault-1.C?ref=e5597f2ad55219092929dc12ea15e1edba06df18", "patch": "@@ -0,0 +1,112 @@\n+namespace N\n+{\n+  int x;\n+  extern int z;\n+}\n+\n+struct S\n+{\n+  static int s;\n+};\n+\n+#if __cpp_variable_templates >= 201304\n+template <int N>\n+int t = N;\n+#endif\n+\n+void\n+foo (void)\n+{\n+  int y = 0, i;\n+  static int w;\n+  #pragma omp task default(firstprivate)\t/* { dg-message \"note: enclosing 'task'\" } */\n+  {\n+    y++;\t/* { dg-bogus \"'y' not specified in enclosing 'task'\" } */\n+    w++;\t/* { dg-bogus \"'w' not specified in enclosing 'task'\" } */\n+    S::s++;\t/* { dg-bogus \"'S::s' not specified in enclosing 'task'\" } */\n+    N::x++;\t/* { dg-error \"'x' not specified in enclosing 'task'\" } */\n+    N::z++;\t/* { dg-error \"'z' not specified in enclosing 'task'\" } */\n+#if __cpp_variable_templates >= 201304\n+    t<5>++;\t/* { dg-error \"'t' not specified in enclosing 'task'\" \"\" { target c++14 } } */\n+#endif\n+  }\n+  #pragma omp taskloop default(firstprivate)\t/* { dg-message \"note: enclosing 'taskloop'\" } */\n+  for (i = 0; i < 64; i++)\n+    {\n+      y++;\t/* { dg-bogus \"'y' not specified in enclosing 'taskloop'\" } */\n+      w++;\t/* { dg-bogus \"'w' not specified in enclosing 'taskloop'\" } */\n+      S::s++;\t/* { dg-bogus \"'S::s' not specified in enclosing 'taskloop'\" } */\n+      N::x++;\t/* { dg-error \"'x' not specified in enclosing 'taskloop'\" } */\n+      N::z++;\t/* { dg-error \"'z' not specified in enclosing 'taskloop'\" } */\n+#if __cpp_variable_templates >= 201304\n+      t<5>++;\t/* { dg-error \"'t' not specified in enclosing 'taskloop'\" \"\" { target c++14 } } */\n+#endif\n+    }\n+  #pragma omp teams default(firstprivate)\t/* { dg-message \"note: enclosing 'teams'\" } */\n+  {\n+    y++;\t/* { dg-bogus \"'y' not specified in enclosing 'teams'\" } */\n+    w++;\t/* { dg-bogus \"'w' not specified in enclosing 'teams'\" } */\n+    S::s++;\t/* { dg-bogus \"'S::s' not specified in enclosing 'teams'\" } */\n+    N::x++;\t/* { dg-error \"'x' not specified in enclosing 'teams'\" } */\n+    N::z++;\t/* { dg-error \"'z' not specified in enclosing 'teams'\" } */\n+#if __cpp_variable_templates >= 201304\n+    t<5>++;\t/* { dg-error \"'t' not specified in enclosing 'teams'\" \"\" { target c++14 } } */\n+#endif\n+  }\n+  #pragma omp parallel default(firstprivate)\t/* { dg-message \"note: enclosing 'parallel'\" } */\n+  {\n+    y++;\t/* { dg-bogus \"'y' not specified in enclosing 'parallel'\" } */\n+    w++;\t/* { dg-bogus \"'w' not specified in enclosing 'parallel'\" } */\n+    S::s++;\t/* { dg-bogus \"'S::s' not specified in enclosing 'parallel'\" } */\n+    N::x++;\t/* { dg-error \"'x' not specified in enclosing 'parallel'\" } */\n+    N::z++;\t/* { dg-error \"'z' not specified in enclosing 'parallel'\" } */\n+#if __cpp_variable_templates >= 201304\n+    t<5>++;\t/* { dg-error \"'t' not specified in enclosing 'parallel'\" \"\" { target c++14 } } */\n+#endif\n+  }\n+  #pragma omp task default(private)\t/* { dg-message \"note: enclosing 'task'\" } */\n+  {\n+    y = 1;\t/* { dg-bogus \"'y' not specified in enclosing 'task'\" } */\n+    w = 1;\t/* { dg-bogus \"'w' not specified in enclosing 'task'\" } */\n+    S::s = 1;\t/* { dg-bogus \"'S::s' not specified in enclosing 'task'\" } */\n+    N::x++;\t/* { dg-error \"'x' not specified in enclosing 'task'\" } */\n+    N::z++;\t/* { dg-error \"'z' not specified in enclosing 'task'\" } */\n+#if __cpp_variable_templates >= 201304\n+    t<5>++;\t/* { dg-error \"'t' not specified in enclosing 'task'\" \"\" { target c++14 } } */\n+#endif\n+  }\n+  #pragma omp taskloop default(private)\t/* { dg-message \"note: enclosing 'taskloop'\" } */\n+  for (i = 0; i < 64; i++)\n+    {\n+      y = 1;\t/* { dg-bogus \"'y' not specified in enclosing 'taskloop'\" } */\n+      w = 1;\t/* { dg-bogus \"'w' not specified in enclosing 'taskloop'\" } */\n+      S::s = 1;\t/* { dg-bogus \"'S::s' not specified in enclosing 'taskloop'\" } */\n+      N::x++;\t/* { dg-error \"'x' not specified in enclosing 'taskloop'\" } */\n+      N::z++;\t/* { dg-error \"'z' not specified in enclosing 'taskloop'\" } */\n+#if __cpp_variable_templates >= 201304\n+      t<5>++;\t/* { dg-error \"'t' not specified in enclosing 'taskloop'\" \"\" { target c++14 } } */\n+#endif\n+    }\n+  #pragma omp teams default(private)\t/* { dg-message \"note: enclosing 'teams'\" } */\n+  {\n+    y = 1;\t/* { dg-bogus \"'y' not specified in enclosing 'teams'\" } */\n+    w = 1;\t/* { dg-bogus \"'w' not specified in enclosing 'teams'\" } */\n+    S::s = 1;\t/* { dg-bogus \"'S::s' not specified in enclosing 'teams'\" } */\n+    N::x++;\t/* { dg-error \"'x' not specified in enclosing 'teams'\" } */\n+    N::z++;\t/* { dg-error \"'z' not specified in enclosing 'teams'\" } */\n+#if __cpp_variable_templates >= 201304\n+    t<5>++;\t/* { dg-error \"'t' not specified in enclosing 'teams'\" \"\" { target c++14 } } */\n+#endif\n+  }\n+  #pragma omp parallel default(private)\t/* { dg-message \"note: enclosing 'parallel'\" } */\n+  {\n+    y = 1;\t/* { dg-bogus \"'y' not specified in enclosing 'parallel'\" } */\n+    w = 1;\t/* { dg-bogus \"'w' not specified in enclosing 'parallel'\" } */\n+    S::s = 1;\t/* { dg-bogus \"'S::s' not specified in enclosing 'parallel'\" } */\n+    N::x++;\t/* { dg-error \"'x' not specified in enclosing 'parallel'\" } */\n+    N::z++;\t/* { dg-error \"'z' not specified in enclosing 'parallel'\" } */\n+#if __cpp_variable_templates >= 201304\n+    t<5>++;\t/* { dg-error \"'t' not specified in enclosing 'parallel'\" \"\" { target c++14 } } */\n+#endif\n+  }\n+}"}, {"sha": "b3bab8feddf7195a9d2bb247bac7bd2b5be43ce2", "filename": "libgomp/libgomp.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5597f2ad55219092929dc12ea15e1edba06df18/libgomp%2Flibgomp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5597f2ad55219092929dc12ea15e1edba06df18/libgomp%2Flibgomp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.texi?ref=e5597f2ad55219092929dc12ea15e1edba06df18", "patch": "@@ -305,7 +305,7 @@ The OpenMP 4.5 specification is fully supported.\n @item @code{seq_cst} clause on a @code{flush} construct @tab Y @tab\n @item @code{inoutset} argument to the @code{depend} clause @tab N @tab\n @item @code{private} and @code{firstprivate} argument to @code{default}\n-      clause in C and C++ @tab N @tab\n+      clause in C and C++ @tab Y @tab\n @item @code{present} argument to @code{defaultmap} clause @tab N @tab\n @item @code{omp_set_num_teams}, @code{omp_set_teams_thread_limit},\n       @code{omp_get_max_teams}, @code{omp_get_teams_thread_limit} runtime"}, {"sha": "3c03c2988b9333864c195cb897d503cedb248b84", "filename": "libgomp/testsuite/libgomp.c++/default-1.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5597f2ad55219092929dc12ea15e1edba06df18/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fdefault-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5597f2ad55219092929dc12ea15e1edba06df18/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fdefault-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fdefault-1.C?ref=e5597f2ad55219092929dc12ea15e1edba06df18", "patch": "@@ -0,0 +1,29 @@\n+#include <omp.h>\n+#include <stdlib.h>\n+\n+struct S { S () : s (42) {} S (const S &x) : s (x.s) {}; ~S () {} int s; };\n+\n+int\n+main ()\n+{\n+  S s;\n+  s.s = 113;\n+  #pragma omp parallel num_threads(4) default(firstprivate)\n+  {\n+    if (s.s != 113)\n+      abort ();\n+    s.s = omp_get_thread_num ();\n+    #pragma omp barrier\n+    if (s.s != omp_get_thread_num ())\n+      abort ();\n+  }\n+  #pragma omp parallel num_threads(4) default(private)\n+  {\n+    if (s.s != 42)\n+      abort ();\n+    s.s = omp_get_thread_num () + 13;\n+    #pragma omp barrier\n+    if (s.s != omp_get_thread_num () + 13)\n+      abort ();\n+  }\n+}"}, {"sha": "2a1d05ab0e3de0f60027fd8353196125702920a2", "filename": "libgomp/testsuite/libgomp.c-c++-common/default-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5597f2ad55219092929dc12ea15e1edba06df18/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fdefault-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5597f2ad55219092929dc12ea15e1edba06df18/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fdefault-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fdefault-1.c?ref=e5597f2ad55219092929dc12ea15e1edba06df18", "patch": "@@ -0,0 +1,25 @@\n+#include <omp.h>\n+#include <stdlib.h>\n+\n+int\n+main ()\n+{\n+  int v = 42;\n+  #pragma omp parallel num_threads(4) default(firstprivate)\n+  {\n+    if (v != 42)\n+      abort ();\n+    v = omp_get_thread_num ();\n+    #pragma omp barrier\n+    if (v != omp_get_thread_num ())\n+      abort ();\n+  }\n+  #pragma omp parallel num_threads(4) default(private)\n+  {\n+    v = omp_get_thread_num () + 13;\n+    #pragma omp barrier\n+    if (v != omp_get_thread_num () + 13)\n+      abort ();\n+  }\n+  return 0;\n+}"}]}