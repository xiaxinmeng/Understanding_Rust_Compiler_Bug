{"sha": "add9f797fa0cc76741c777eaf3839072234a6ede", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRkOWY3OTdmYTBjYzc2NzQxYzc3N2VhZjM4MzkwNzIyMzRhNmVkZQ==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2006-02-15T09:40:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-15T09:40:24Z"}, "message": "freeze.adb (Freeze_Entity): Handle subtypes of protected types and task types when...\n\n2006-02-13  Javier Miranda  <miranda@adacore.com>\n\n\t* freeze.adb (Freeze_Entity): Handle subtypes of protected types and\n\ttask types when accessing to the corresponding record type.\n\tRemove '!' in warning message.\n\nFrom-SVN: r111070", "tree": {"sha": "f0db4c59a951036451ca31e04f52c0c13bff0d71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0db4c59a951036451ca31e04f52c0c13bff0d71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/add9f797fa0cc76741c777eaf3839072234a6ede", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/add9f797fa0cc76741c777eaf3839072234a6ede", "html_url": "https://github.com/Rust-GCC/gccrs/commit/add9f797fa0cc76741c777eaf3839072234a6ede", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/add9f797fa0cc76741c777eaf3839072234a6ede/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "59e54267fc4d2eec894f1f4f4f8fc596cee68f3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59e54267fc4d2eec894f1f4f4f8fc596cee68f3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59e54267fc4d2eec894f1f4f4f8fc596cee68f3a"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "09363af823e61ae38171d294b3b3ec08bf4362b5", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/add9f797fa0cc76741c777eaf3839072234a6ede/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/add9f797fa0cc76741c777eaf3839072234a6ede/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=add9f797fa0cc76741c777eaf3839072234a6ede", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2227,7 +2227,7 @@ package body Freeze is\n \n                            if Formal = First_Formal (E) then\n                               Error_Msg_NE\n-                                (\"?in inherited operation&!\", Warn_Node, E);\n+                                (\"?in inherited operation&\", Warn_Node, E);\n                            end if;\n                         else\n                            Warn_Node := Formal;\n@@ -2372,7 +2372,7 @@ package body Freeze is\n                --  pragma is to suppress implicit initialization.\n \n                if Is_Imported (E)\n-                 and then not Present (Address_Clause (E))\n+                 and then No (Address_Clause (E))\n                then\n                   Set_Is_Public (E);\n                end if;\n@@ -3159,26 +3159,37 @@ package body Freeze is\n                Prim_List : Elist_Id;\n                Prim      : Elmt_Id;\n                Ent       : Entity_Id;\n+               Aux_E     : Entity_Id;\n \n             begin\n+               --  Handle subtypes\n+\n+               if Ekind (E) = E_Protected_Subtype\n+                 or else Ekind (E) = E_Task_Subtype\n+               then\n+                  Aux_E := Etype (E);\n+               else\n+                  Aux_E := E;\n+               end if;\n+\n                --  Ada 2005 (AI-345): In case of concurrent type generate\n                --  reference to the wrapper that allow us to dispatch calls\n                --  through their implemented abstract interface types.\n \n                --  The check for Present here is to protect against previously\n                --  reported critical errors.\n \n-               if Is_Concurrent_Type (E)\n-                 and then Present (Corresponding_Record_Type (E))\n+               if Is_Concurrent_Type (Aux_E)\n+                 and then Present (Corresponding_Record_Type (Aux_E))\n                then\n                   pragma Assert (not Is_Empty_Elmt_List\n                                        (Abstract_Interfaces\n-                                        (Corresponding_Record_Type (E))));\n+                                        (Corresponding_Record_Type (Aux_E))));\n \n                   Prim_List := Primitive_Operations\n-                                (Corresponding_Record_Type (E));\n+                                (Corresponding_Record_Type (Aux_E));\n                else\n-                  Prim_List := Primitive_Operations (E);\n+                  Prim_List := Primitive_Operations (Aux_E);\n                end if;\n \n                --  Loop to generate references for primitive operations"}]}