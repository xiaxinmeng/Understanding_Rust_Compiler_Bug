{"sha": "1d9a8675d379f02f5e39639f469ae8dfcf33fea9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ5YTg2NzVkMzc5ZjAyZjVlMzk2MzlmNDY5YWU4ZGZjZjMzZmVhOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-13T22:23:33Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-13T22:23:33Z"}, "message": "c++: Predefine __STDCPP_THREADS__ in the compiler if thread model is not single [PR63287]\n\nThe following patch predefines __STDCPP_THREADS__ macro to 1 if c++11 or\nlater and thread model (e.g. printed by gcc -v) is not single.\nThere are two targets not handled by this patch, those that define\nTHREAD_MODEL_SPEC.  In one case - QNX - it looks just like a mistake\nto me, instead of setting thread_model=posix in config.gcc it uses\nTHREAD_MODEL_SPEC macro to set it unconditionally to posix.\nThe other is hpux10, which uses -threads option to decide if threads\nare enabled or not, but that option isn't really passed to the compiler.\nI think that is something that really should be solved in config/pa/\ninstead, e.g. in the config/xxx/xxx-c.c targets usually set their own\npredefined macros and it could handle this, and either pass the option\nalso to the compiler, or say predefine __STDCPP_THREADS__ if _DCE_THREADS\nmacro is defined already (or -D_DCE_THREADS found on the command line),\nor whatever else.\n\n2020-11-13  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/63287\n\t* c-cppbuiltin.c: Include configargs.h.\n\t(c_cpp_builtins): For C++11 and later if THREAD_MODEL_SPEC is not\n\tdefined, predefine __STDCPP_THREADS__ to 1 unless thread_model is\n\t\"single\".", "tree": {"sha": "e3c9446577fa53aa93cc9c390399227f11e9deed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3c9446577fa53aa93cc9c390399227f11e9deed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d9a8675d379f02f5e39639f469ae8dfcf33fea9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d9a8675d379f02f5e39639f469ae8dfcf33fea9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d9a8675d379f02f5e39639f469ae8dfcf33fea9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d9a8675d379f02f5e39639f469ae8dfcf33fea9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccd56db89806a5f6eb3be99fc3b4fe364cf35e98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccd56db89806a5f6eb3be99fc3b4fe364cf35e98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccd56db89806a5f6eb3be99fc3b4fe364cf35e98"}], "stats": {"total": 7, "additions": 7, "deletions": 0}, "files": [{"sha": "8856a97021804df222a70f0a3c41eedb1faf6981", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9a8675d379f02f5e39639f469ae8dfcf33fea9/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9a8675d379f02f5e39639f469ae8dfcf33fea9/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=1d9a8675d379f02f5e39639f469ae8dfcf33fea9", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"debug.h\"\t\t/* For dwarf2out_do_cfi_asm.  */\n #include \"common/common-target.h\"\n #include \"cppbuiltin.h\"\n+#include \"configargs.h\"\n \n #ifndef TARGET_OS_CPP_BUILTINS\n # define TARGET_OS_CPP_BUILTINS()\n@@ -1034,6 +1035,12 @@ c_cpp_builtins (cpp_reader *pfile)\n \tcpp_define (pfile, \"__cpp_threadsafe_static_init=200806L\");\n       if (flag_char8_t)\n         cpp_define (pfile, \"__cpp_char8_t=201811L\");\n+#ifndef THREAD_MODEL_SPEC\n+      /* Targets that define THREAD_MODEL_SPEC need to define\n+\t __STDCPP_THREADS__ in their config/XXX/XXX-c.c themselves.  */\n+      if (cxx_dialect >= cxx11 && strcmp (thread_model, \"single\") != 0)\n+\tcpp_define (pfile, \"__STDCPP_THREADS__=1\");\n+#endif\n     }\n   /* Note that we define this for C as well, so that we know if\n      __attribute__((cleanup)) will interface with EH.  */"}]}