{"sha": "b92be669aa9bbc320969d0296a3af805deb9c785", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkyYmU2NjlhYTliYmMzMjA5NjlkMDI5NmEzYWY4MDVkZWI5Yzc4NQ==", "commit": {"author": {"name": "Per Bothner", "email": "pbothner@apple.com", "date": "2003-12-05T22:50:53Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2003-12-05T22:50:53Z"}, "message": "cppfiles.c (file_hash_hash): New static function.\n\n\n\t* cppfiles.c (file_hash_hash):  New static function.\n\t(hash_string_eq):  Renamed static function to file_hash_eq.\n\t(_cpp_init_files):  Create file_hash table with above callbacks.\n\t(cpp_included):  Must use htab_find_with_hash insead of htab_find.\n\t(_cpp_find_find, make_cpp_dir):  Must use htab_find_slot_with_hash.\n\nFrom-SVN: r74350", "tree": {"sha": "85697fb074299b5a55735ea11b1d31e771753cae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85697fb074299b5a55735ea11b1d31e771753cae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b92be669aa9bbc320969d0296a3af805deb9c785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b92be669aa9bbc320969d0296a3af805deb9c785", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b92be669aa9bbc320969d0296a3af805deb9c785", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b92be669aa9bbc320969d0296a3af805deb9c785/comments", "author": null, "committer": null, "parents": [{"sha": "b3e4bb0347eeb9d3276178c99ad829e870cc5451", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3e4bb0347eeb9d3276178c99ad829e870cc5451", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3e4bb0347eeb9d3276178c99ad829e870cc5451"}], "stats": {"total": 41, "additions": 35, "deletions": 6}, "files": [{"sha": "67e967880630e418c9bc75de916e984310fea984", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b92be669aa9bbc320969d0296a3af805deb9c785/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b92be669aa9bbc320969d0296a3af805deb9c785/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b92be669aa9bbc320969d0296a3af805deb9c785", "patch": "@@ -1,3 +1,11 @@\n+2003-12-05  Per Bothner  <pbothner@apple.com>\n+\n+\t* cppfiles.c (file_hash_hash):  New static function.\n+\t(hash_string_eq):  Renamed static function to file_hash_eq.\n+\t(_cpp_init_files):  Create file_hash table with above callbacks.\n+\t(cpp_included):  Must use htab_find_with_hash insead of htab_find.\n+\t(_cpp_find_find, make_cpp_dir):  Must use htab_find_slot_with_hash.\n+\n 2003-12-05  Per Bothner  <pbothner@apple.com>\n \n \t* line-map.h (source_location):  New typedef."}, {"sha": "c2d91f581d8962e66ad9611d74f0e8b4e94e7818", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b92be669aa9bbc320969d0296a3af805deb9c785/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b92be669aa9bbc320969d0296a3af805deb9c785/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=b92be669aa9bbc320969d0296a3af805deb9c785", "patch": "@@ -172,7 +172,8 @@ static cpp_dir *make_cpp_dir (cpp_reader *, const char *dir_name, int sysp);\n static void allocate_file_hash_entries (cpp_reader *pfile);\n static struct file_hash_entry *new_file_hash_entry (cpp_reader *pfile);\n static int report_missing_guard (void **slot, void *b);\n-static int hash_string_eq (const void *p, const void *q);\n+static hashval_t file_hash_hash (const void *p);\n+static int file_hash_eq (const void *p, const void *q);\n static char *read_filename_string (int ch, FILE *f);\n static void read_name_map (cpp_dir *dir);\n static char *remap_filename (cpp_reader *pfile, _cpp_file *file);\n@@ -367,7 +368,9 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir, bool f\n     cpp_error (pfile, CPP_DL_ICE, \"NULL directory in find_file\");\n \n   hash_slot = (struct file_hash_entry **)\n-    htab_find_slot (pfile->file_hash, fname, INSERT);\n+    htab_find_slot_with_hash (pfile->file_hash, fname,\n+\t\t\t      htab_hash_string (fname),\n+\t\t\t      INSERT);\n \n   /* First check the cache before we resort to memory allocation.  */\n   entry = search_cache (*hash_slot, start_dir);\n@@ -797,7 +800,9 @@ make_cpp_dir (cpp_reader *pfile, const char *dir_name, int sysp)\n   cpp_dir *dir;\n \n   hash_slot = (struct file_hash_entry **)\n-    htab_find_slot (pfile->file_hash, dir_name, INSERT);\n+    htab_find_slot_with_hash (pfile->file_hash, dir_name,\n+\t\t\t      htab_hash_string (dir_name),\n+\t\t\t      INSERT);\n \n   /* Have we already hashed this directory?  */\n   for (entry = *hash_slot; entry; entry = entry->next)\n@@ -848,17 +853,33 @@ cpp_included (cpp_reader *pfile, const char *fname)\n {\n   struct file_hash_entry *entry;\n \n-  entry = htab_find (pfile->file_hash, fname);\n+  entry = htab_find_with_hash (pfile->file_hash, fname,\n+\t\t\t       htab_hash_string (fname));\n \n   while (entry && (entry->start_dir == NULL || entry->u.file->err_no))\n     entry = entry->next;\n \n   return entry != NULL;\n }\n \n+/* Calculate the hash value of a file hash entry P. */\n+\n+static hashval_t\n+file_hash_hash (const void *p)\n+{\n+  struct file_hash_entry *entry = (struct file_hash_entry *) p;\n+  const char *hname;\n+  if (entry->start_dir)\n+    hname = entry->u.file->name;\n+  else\n+    hname = entry->u.dir->name;\n+\n+  return htab_hash_string (hname);\n+}\n+\n /* Compare a string Q against a file hash entry P.  */\n static int\n-hash_string_eq (const void *p, const void *q)\n+file_hash_eq (const void *p, const void *q)\n {\n   struct file_hash_entry *entry = (struct file_hash_entry *) p;\n   const char *fname = (const char *) q;\n@@ -876,7 +897,7 @@ hash_string_eq (const void *p, const void *q)\n void\n _cpp_init_files (cpp_reader *pfile)\n {\n-  pfile->file_hash = htab_create_alloc (127, htab_hash_string, hash_string_eq,\n+  pfile->file_hash = htab_create_alloc (127, file_hash_hash, file_hash_eq,\n \t\t\t\t\tNULL, xcalloc, free);\n   allocate_file_hash_entries (pfile);\n }"}]}