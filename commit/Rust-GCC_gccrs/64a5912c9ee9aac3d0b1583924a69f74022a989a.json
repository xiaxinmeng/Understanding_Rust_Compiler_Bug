{"sha": "64a5912c9ee9aac3d0b1583924a69f74022a989a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRhNTkxMmM5ZWU5YWFjM2QwYjE1ODM5MjRhNjlmNzQwMjJhOTg5YQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-10-31T20:21:58Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-10-31T20:21:58Z"}, "message": "diagnostics: get rid of *_at_rich_loc in favor of overloading\n\nAdding a fix-it hint currently involves changing e.g.:\n\n  error_at (token->location,\n            \"unknown type name %qE; did you mean %qs?\",\n            token->value, hint);\nto:\n\n  gcc_rich_location richloc (token->location);\n  richloc.add_fixit_replace (hint);\n  error_at_rich_loc (&richloc,\n                     \"unknown type name %qE; did you mean %qs?\",\n                     token->value, hint);\n\nto make the change from taking a location_t to a rich_location *.\n\nThis patch renames the \"*_at_rich_loc\" diagnostic entrypoints to use\nthe same function names for rich_location * as for location_t,\nvia overloading, to simplify the above change to just changing from:\n\n  error_at (token->location,\n            \"unknown type name %qE; did you mean %qs?\",\n            token->value, hint);\nto:\n\n  gcc_rich_location richloc (token->location);\n  richloc.add_fixit_replace (hint);\n  error_at (&richloc,\n            \"unknown type name %qE; did you mean %qs?\",\n            token->value, hint);\n\nthus saving space (and typing) and usually avoiding the need to reindent\nthe \"error_at\" invocation.\n\nWith this change, 0 is no longer acceptable as a location_t to these\nentrypoints, as e.g.:\n\n../../src/gcc/auto-profile.c:855:37: error: call of overloaded\n'inform(int, const char [18])' is ambiguous\n       inform (0, \"Not expected TAG.\");\n                                     ^\nIn file included from ../../src/gcc/auto-profile.c:35:0:\n../../src/gcc/diagnostic-core.h:88:13: note: candidate:\n'void inform(location_t, const char*, ...)'\n extern void inform (location_t, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n             ^~~~~~\n../../src/gcc/diagnostic-core.h:89:13: note: candidate:\n'void inform(rich_location*, const char*, ...)'\n extern void inform (rich_location *, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n             ^~~~~~\n\nSuch locations now need to be spelled out as UNKNOWN_LOCATION,\nrather than 0.\n\nI considered making the API take a rich_location & rather than a\nrich_location *, but doing so would mean replacing\n  diagnostic_set_info\nand\n  diagnostic_set_info_translated\nwith a constructor for diagnostic_info, which was a more invasive\nchange.  Maybe in the future.\n\ngcc/ChangeLog:\n\t* auto-profile.c (autofdo_source_profile::read): Use\n\tUNKNOWN_LOCATION rather than 0.\n\t* diagnostic-core.h (warning_at_rich_loc): Rename to...\n\t(warning_at): ...this overload.\n\t(warning_at_rich_loc_n): Rename to...\n\t(warning_n): ...this overload.\n\t(error_at_rich_loc): Rename to...\n\t(error_at): ...this overload.\n\t(pedwarn_at_rich_loc): Rename to...\n\t(pedwarn): ...this overload.\n\t(permerror_at_rich_loc): Rename to...\n\t(permerror): ...this overload.\n\t(inform_at_rich_loc): Rename to...\n\t(inform): ...this overload.\n\t* diagnostic.c: (diagnostic_n_impl): Delete location_t-based decl.\n\t(diagnostic_n_impl_richloc): Rename to...\n\t(diagnostic_n_impl): ...this rich_location *-based decl.\n\t(inform_at_rich_loc): Rename to...\n\t(inform): ...this, and add an assertion.\n\t(inform_n): Update for removal of location_t-based diagnostic_n_impl.\n\t(warning_at_rich_loc): Rename to...\n\t(warning_at): ...this, and add an assertion.\n\t(warning_at_rich_loc_n): Rename to...\n\t(warning_n): ...this, and add an assertion.\n\t(warning_n): Update location_t-based implementation for removal of\n\tlocation_t-based diagnostic_n_impl.\n\t(pedwarn_at_rich_loc): Rename to...\n\t(pedwarn): ...this, and add an assertion.\n\t(permerror_at_rich_loc): Rename to...\n\t(permerror): ...this, and add an assertion.\n\t(error_n): Update for removal of location_t-based diagnostic_n_impl.\n\t(error_at_rich_loc): Rename to...\n\t(error_at): ...this, and add an assertion.\n\t* gcc.c (do_spec_1): Use UNKNOWN_LOCATION rather than 0.\n\t(driver::do_spec_on_infiles): Likewise.\n\t* substring-locations.c (format_warning_va): Update for renaming\n\tof inform_at_rich_loc.\n\ngcc/c-family/ChangeLog:\n\t* c-common.c (binary_op_error): Update for renaming of\n\terror_at_rich_loc.\n\t(c_parse_error): Likewise.\n\t* c-warn.c (warn_logical_not_parentheses): Likewise for\n\trenaming of inform_at_rich_loc.\n\t(warn_for_restrict): Likewise for renaming of\n\twarning_at_rich_loc_n.\n\ngcc/c/ChangeLog:\n\t* c-decl.c (implicit_decl_warning): Update for renaming of\n\tpedwarn_at_rich_loc and warning_at_rich_loc.\n\t(implicitly_declare): Likewise for renaming of inform_at_rich_loc.\n\t(undeclared_variable): Likewise for renaming of error_at_rich_loc.\n\t* c-parser.c (c_parser_declaration_or_fndef): Likewise.\n\t(c_parser_struct_or_union_specifier): Likewise for renaming of\n\tpedwarn_at_rich_loc.\n\t(c_parser_parameter_declaration): Likewise for renaming of\n\terror_at_rich_loc.\n\t* c-typeck.c (build_component_ref): Likewise.\n\t(build_unary_op): Likewise for renaming of inform_at_rich_loc.\n\t(pop_init_level): Likewise for renaming of warning_at_rich_loc.\n\t(set_init_label): Likewise for renaming of error_at_rich_loc.\n\ngcc/cp/ChangeLog:\n\t* class.c (explain_non_literal_class): Use UNKNOWN_LOCATION rather\n\tthan 0.\n\t* name-lookup.c (suggest_alternatives_for): Update for renaming of\n\tinform_at_rich_loc.\n\t(maybe_suggest_missing_header): Likewise.\n\t(suggest_alternative_in_explicit_scope): Likewise.\n\t* parser.c (cp_parser_diagnose_invalid_type_name): Likewise for\n\trenaming of error_at_rich_loc.\n\t(cp_parser_string_literal): Likewise.\n\t(cp_parser_nested_name_specifier_opt): Likewise.\n\t(cp_parser_cast_expression): Likewise for renaming of\n\twarning_at_rich_loc.\n\t(cp_parser_decl_specifier_seq): Likewise for renaming of\n\terror_at_rich_loc and warning_at_rich_loc.\n\t(cp_parser_elaborated_type_specifier): Likewise for renaming of\n\tpedwarn_at_rich_loc.\n\t(cp_parser_cv_qualifier_seq_opt): Likewise for renaming of\n\terror_at_rich_loc.\n\t(cp_parser_virt_specifier_seq_opt): Likewise.\n\t(cp_parser_class_specifier_1): Likewise.\n\t(cp_parser_class_head): Likewise.\n\t(cp_parser_member_declaration): Likewise for renaming of\n\tpedwarn_at_rich_loc, warning_at_rich_loc, and error_at_rich_loc.\n\t(cp_parser_enclosed_template_argument_list): Likewise for renaming\n\tof error_at_rich_loc.\n\t(set_and_check_decl_spec_loc): Likewise.\n\t* pt.c (listify): Likewise.\n\t* rtti.c (typeid_ok_p): Likewise.\n\t* semantics.c (process_outer_var_ref): Use UNKNOWN_LOCATION rather\n\tthan 0.\n\t* typeck.c (access_failure_info::maybe_suggest_accessor): Update\n\tfor renaming of inform_at_rich_loc.\n\t(finish_class_member_access_expr): Likewise for renaming of\n\terror_at_rich_loc.\n\ngcc/objc/ChangeLog:\n\t* objc-gnu-runtime-abi-01.c (objc_gnu_runtime_abi_01_init): Use\n\tUNKNOWN_LOCATION rather than 0.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/plugin/diagnostic_plugin_show_trees.c (show_tree): Update\n\tfor renaming of error_at_rich_loc and inform_at_rich_loc.\n\t* gcc.dg/plugin/diagnostic_plugin_test_show_locus.c\n\t(test_show_locus): Likewise for renaming of warning_at_rich_loc.\n\nlibcpp/ChangeLog:\n\t* directives.c (_cpp_handle_directive): Update for renaming of\n\tcpp_error_at_richloc to cpp_error_at.\n\t* errors.c (cpp_diagnostic_at_richloc): Rename to...\n\t(cpp_diagnostic_at): ...this, dropping the location_t-based\n\timplementation.\n\t(cpp_diagnostic): Update for removal of location_t-based\n\tcpp_diagnostic_at.\n\t(cpp_error_at): Likewise.\n\t(cpp_error_at_richloc): Rename to...\n\t(cpp_error_at): ...this, and update for renaming of\n\tcpp_diagnostic_at_richloc.\n\t* include/cpplib.h (cpp_error_at_richloc): Rename to...\n\t(cpp_error_at): ...this.\n\nFrom-SVN: r254280", "tree": {"sha": "cb8b5c256608f1f3000c501188dcc3432997271e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb8b5c256608f1f3000c501188dcc3432997271e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64a5912c9ee9aac3d0b1583924a69f74022a989a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64a5912c9ee9aac3d0b1583924a69f74022a989a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64a5912c9ee9aac3d0b1583924a69f74022a989a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64a5912c9ee9aac3d0b1583924a69f74022a989a/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "881c969cf6797917ad69ea7bf4c47888890125ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/881c969cf6797917ad69ea7bf4c47888890125ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/881c969cf6797917ad69ea7bf4c47888890125ff"}], "stats": {"total": 612, "additions": 362, "deletions": 250}, "files": [{"sha": "4987693efe306191c39756bc1ec7032e8f8d1653", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=64a5912c9ee9aac3d0b1583924a69f74022a989a", "patch": "@@ -1,3 +1,43 @@\n+2017-10-31  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* auto-profile.c (autofdo_source_profile::read): Use\n+\tUNKNOWN_LOCATION rather than 0.\n+\t* diagnostic-core.h (warning_at_rich_loc): Rename to...\n+\t(warning_at): ...this overload.\n+\t(warning_at_rich_loc_n): Rename to...\n+\t(warning_n): ...this overload.\n+\t(error_at_rich_loc): Rename to...\n+\t(error_at): ...this overload.\n+\t(pedwarn_at_rich_loc): Rename to...\n+\t(pedwarn): ...this overload.\n+\t(permerror_at_rich_loc): Rename to...\n+\t(permerror): ...this overload.\n+\t(inform_at_rich_loc): Rename to...\n+\t(inform): ...this overload.\n+\t* diagnostic.c: (diagnostic_n_impl): Delete location_t-based decl.\n+\t(diagnostic_n_impl_richloc): Rename to...\n+\t(diagnostic_n_impl): ...this rich_location *-based decl.\n+\t(inform_at_rich_loc): Rename to...\n+\t(inform): ...this, and add an assertion.\n+\t(inform_n): Update for removal of location_t-based diagnostic_n_impl.\n+\t(warning_at_rich_loc): Rename to...\n+\t(warning_at): ...this, and add an assertion.\n+\t(warning_at_rich_loc_n): Rename to...\n+\t(warning_n): ...this, and add an assertion.\n+\t(warning_n): Update location_t-based implementation for removal of\n+\tlocation_t-based diagnostic_n_impl.\n+\t(pedwarn_at_rich_loc): Rename to...\n+\t(pedwarn): ...this, and add an assertion.\n+\t(permerror_at_rich_loc): Rename to...\n+\t(permerror): ...this, and add an assertion.\n+\t(error_n): Update for removal of location_t-based diagnostic_n_impl.\n+\t(error_at_rich_loc): Rename to...\n+\t(error_at): ...this, and add an assertion.\n+\t* gcc.c (do_spec_1): Use UNKNOWN_LOCATION rather than 0.\n+\t(driver::do_spec_on_infiles): Likewise.\n+\t* substring-locations.c (format_warning_va): Update for renaming\n+\tof inform_at_rich_loc.\n+\n 2017-10-31  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* builtins.def (DEF_FLOATN_BUILTIN): Change most _Float<N> and"}, {"sha": "130d8df5b1e4dfa203cb00452c591d0c44ceb289", "filename": "gcc/auto-profile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fauto-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fauto-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fauto-profile.c?ref=64a5912c9ee9aac3d0b1583924a69f74022a989a", "patch": "@@ -852,7 +852,7 @@ autofdo_source_profile::read ()\n {\n   if (gcov_read_unsigned () != GCOV_TAG_AFDO_FUNCTION)\n     {\n-      inform (0, \"Not expected TAG.\");\n+      inform (UNKNOWN_LOCATION, \"Not expected TAG.\");\n       return false;\n     }\n "}, {"sha": "e8476426fcb174590e87754493a748c3eba981a9", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=64a5912c9ee9aac3d0b1583924a69f74022a989a", "patch": "@@ -1,3 +1,13 @@\n+2017-10-31  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-common.c (binary_op_error): Update for renaming of\n+\terror_at_rich_loc.\n+\t(c_parse_error): Likewise.\n+\t* c-warn.c (warn_logical_not_parentheses): Likewise for\n+\trenaming of inform_at_rich_loc.\n+\t(warn_for_restrict): Likewise for renaming of\n+\twarning_at_rich_loc_n.\n+\n 2017-10-30  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c.opt (std=c17, std=gnu17, std=iso9899:2017): New options."}, {"sha": "24077c72ae9283ede90c44bc5656625603748e55", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=64a5912c9ee9aac3d0b1583924a69f74022a989a", "patch": "@@ -2694,9 +2694,9 @@ binary_op_error (rich_location *richloc, enum tree_code code,\n     default:\n       gcc_unreachable ();\n     }\n-  error_at_rich_loc (richloc,\n-\t\t     \"invalid operands to binary %s (have %qT and %qT)\",\n-\t\t     opname, type0, type1);\n+  error_at (richloc,\n+\t    \"invalid operands to binary %s (have %qT and %qT)\",\n+\t    opname, type0, type1);\n }\n \f\n /* Given an expression as a tree, return its original type.  Do this\n@@ -5944,7 +5944,7 @@ c_parse_error (const char *gmsgid, enum cpp_ttype token_type,\n       else\n \tmessage = catenate_messages (gmsgid, \" before %s'\\\\x%x'\");\n \n-      error_at_rich_loc (richloc, message, prefix, val);\n+      error_at (richloc, message, prefix, val);\n       free (message);\n       message = NULL;\n     }\n@@ -5972,7 +5972,7 @@ c_parse_error (const char *gmsgid, enum cpp_ttype token_type,\n   else if (token_type == CPP_NAME)\n     {\n       message = catenate_messages (gmsgid, \" before %qE\");\n-      error_at_rich_loc (richloc, message, value);\n+      error_at (richloc, message, value);\n       free (message);\n       message = NULL;\n     }\n@@ -5985,16 +5985,16 @@ c_parse_error (const char *gmsgid, enum cpp_ttype token_type,\n   else if (token_type < N_TTYPES)\n     {\n       message = catenate_messages (gmsgid, \" before %qs token\");\n-      error_at_rich_loc (richloc, message, cpp_type2name (token_type, token_flags));\n+      error_at (richloc, message, cpp_type2name (token_type, token_flags));\n       free (message);\n       message = NULL;\n     }\n   else\n-    error_at_rich_loc (richloc, gmsgid);\n+    error_at (richloc, gmsgid);\n \n   if (message)\n     {\n-      error_at_rich_loc (richloc, message);\n+      error_at (richloc, message);\n       free (message);\n     }\n #undef catenate_messages"}, {"sha": "09ef6856cf90447dcdbf5a5a02d17c5a44ddbed8", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=64a5912c9ee9aac3d0b1583924a69f74022a989a", "patch": "@@ -496,8 +496,8 @@ warn_logical_not_parentheses (location_t location, enum tree_code code,\n       rich_location richloc (line_table, lhs_loc);\n       richloc.add_fixit_insert_before (lhs_loc, \"(\");\n       richloc.add_fixit_insert_after (lhs_loc, \")\");\n-      inform_at_rich_loc (&richloc, \"add parentheses around left hand side \"\n-\t\t\t  \"expression to silence this warning\");\n+      inform (&richloc, \"add parentheses around left hand side \"\n+\t      \"expression to silence this warning\");\n     }\n }\n \n@@ -2391,13 +2391,13 @@ warn_for_restrict (unsigned param_pos, tree *argarray, unsigned nargs)\n \trichloc.add_range (EXPR_LOCATION (arg), false);\n     }\n \n-  warning_at_rich_loc_n (&richloc, OPT_Wrestrict, arg_positions.length (),\n-\t\t\t \"passing argument %i to restrict-qualified parameter\"\n-\t\t\t \" aliases with argument %Z\",\n-\t\t\t \"passing argument %i to restrict-qualified parameter\"\n-\t\t\t \" aliases with arguments %Z\",\n-\t\t\t param_pos + 1, arg_positions.address (),\n-\t\t\t arg_positions.length ());\n+  warning_n (&richloc, OPT_Wrestrict, arg_positions.length (),\n+\t     \"passing argument %i to restrict-qualified parameter\"\n+\t     \" aliases with argument %Z\",\n+\t     \"passing argument %i to restrict-qualified parameter\"\n+\t     \" aliases with arguments %Z\",\n+\t     param_pos + 1, arg_positions.address (),\n+\t     arg_positions.length ());\n }\n \n /* Callback function to determine whether an expression TP or one of its"}, {"sha": "60feeea902276a948f926b29876d44022b511d10", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=64a5912c9ee9aac3d0b1583924a69f74022a989a", "patch": "@@ -1,3 +1,19 @@\n+2017-10-31  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-decl.c (implicit_decl_warning): Update for renaming of\n+\tpedwarn_at_rich_loc and warning_at_rich_loc.\n+\t(implicitly_declare): Likewise for renaming of inform_at_rich_loc.\n+\t(undeclared_variable): Likewise for renaming of error_at_rich_loc.\n+\t* c-parser.c (c_parser_declaration_or_fndef): Likewise.\n+\t(c_parser_struct_or_union_specifier): Likewise for renaming of\n+\tpedwarn_at_rich_loc.\n+\t(c_parser_parameter_declaration): Likewise for renaming of\n+\terror_at_rich_loc.\n+\t* c-typeck.c (build_component_ref): Likewise.\n+\t(build_unary_op): Likewise for renaming of inform_at_rich_loc.\n+\t(pop_init_level): Likewise for renaming of warning_at_rich_loc.\n+\t(set_init_label): Likewise for renaming of error_at_rich_loc.\n+\n 2017-10-30  Richard Biener  <rguenther@suse.de>\n \n \t* gimple-parser.c (c_parser_gimple_statement): Parse conditional"}, {"sha": "d95a2b6ea4f3237633156320436d281484308b98", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=64a5912c9ee9aac3d0b1583924a69f74022a989a", "patch": "@@ -3119,10 +3119,10 @@ implicit_decl_warning (location_t loc, tree id, tree olddecl)\n \t{\n \t  gcc_rich_location richloc (loc);\n \t  richloc.add_fixit_replace (hint);\n-\t  warned = pedwarn_at_rich_loc\n-\t    (&richloc, OPT_Wimplicit_function_declaration,\n-\t     \"implicit declaration of function %qE; did you mean %qs?\",\n-\t     id, hint);\n+\t  warned = pedwarn (&richloc, OPT_Wimplicit_function_declaration,\n+\t\t\t    \"implicit declaration of function %qE;\"\n+\t\t\t    \" did you mean %qs?\",\n+\t\t\t    id, hint);\n \t}\n       else\n \twarned = pedwarn (loc, OPT_Wimplicit_function_declaration,\n@@ -3132,7 +3132,7 @@ implicit_decl_warning (location_t loc, tree id, tree olddecl)\n     {\n       gcc_rich_location richloc (loc);\n       richloc.add_fixit_replace (hint);\n-      warned = warning_at_rich_loc\n+      warned = warning_at\n \t(&richloc, OPT_Wimplicit_function_declaration,\n \t G_(\"implicit declaration of function %qE; did you mean %qs?\"),\n \t id, hint);\n@@ -3401,10 +3401,9 @@ implicitly_declare (location_t loc, tree functionid)\n \t\t    {\n \t\t      rich_location richloc (line_table, loc);\n \t\t      maybe_add_include_fixit (&richloc, header);\n-\t\t      inform_at_rich_loc\n-\t\t\t(&richloc,\n-\t\t\t \"include %qs or provide a declaration of %qD\",\n-\t\t\t header, decl);\n+\t\t      inform (&richloc,\n+\t\t\t      \"include %qs or provide a declaration of %qD\",\n+\t\t\t      header, decl);\n \t\t    }\n \t\t  newtype = TREE_TYPE (decl);\n \t\t}\n@@ -3472,10 +3471,10 @@ undeclared_variable (location_t loc, tree id)\n \t{\n \t  gcc_rich_location richloc (loc);\n \t  richloc.add_fixit_replace (guessed_id);\n-\t  error_at_rich_loc (&richloc,\n-\t\t\t     \"%qE undeclared here (not in a function);\"\n-\t\t\t     \" did you mean %qs?\",\n-\t\t\t     id, guessed_id);\n+\t  error_at (&richloc,\n+\t\t    \"%qE undeclared here (not in a function);\"\n+\t\t    \" did you mean %qs?\",\n+\t\t    id, guessed_id);\n \t}\n       else\n \terror_at (loc, \"%qE undeclared here (not in a function)\", id);\n@@ -3490,11 +3489,10 @@ undeclared_variable (location_t loc, tree id)\n \t    {\n \t      gcc_rich_location richloc (loc);\n \t      richloc.add_fixit_replace (guessed_id);\n-\t      error_at_rich_loc\n-\t\t(&richloc,\n-\t\t \"%qE undeclared (first use in this function);\"\n-\t\t \" did you mean %qs?\",\n-\t\t id, guessed_id);\n+\t      error_at (&richloc,\n+\t\t\t\"%qE undeclared (first use in this function);\"\n+\t\t\t\" did you mean %qs?\",\n+\t\t\tid, guessed_id);\n \t    }\n \t  else\n \t    error_at (loc, \"%qE undeclared (first use in this function)\", id);"}, {"sha": "7bca5f1a2a7cb9df355b267ae94fc76fb47a8f73", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=64a5912c9ee9aac3d0b1583924a69f74022a989a", "patch": "@@ -1785,36 +1785,36 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n \t{\n \t  /* This is not C++ with its implicit typedef.  */\n \t  richloc.add_fixit_insert_before (\"struct \");\n-\t  error_at_rich_loc (&richloc,\n-\t\t\t     \"unknown type name %qE;\"\n-\t\t\t     \" use %<struct%> keyword to refer to the type\",\n-\t\t\t     name);\n+\t  error_at (&richloc,\n+\t\t    \"unknown type name %qE;\"\n+\t\t    \" use %<struct%> keyword to refer to the type\",\n+\t\t    name);\n \t}\n       else if (tag_exists_p (UNION_TYPE, name))\n \t{\n \t  richloc.add_fixit_insert_before (\"union \");\n-\t  error_at_rich_loc (&richloc,\n-\t\t\t     \"unknown type name %qE;\"\n-\t\t\t     \" use %<union%> keyword to refer to the type\",\n-\t\t\t     name);\n+\t  error_at (&richloc,\n+\t\t    \"unknown type name %qE;\"\n+\t\t    \" use %<union%> keyword to refer to the type\",\n+\t\t    name);\n \t}\n       else if (tag_exists_p (ENUMERAL_TYPE, name))\n \t{\n \t  richloc.add_fixit_insert_before (\"enum \");\n-\t  error_at_rich_loc (&richloc,\n-\t\t\t     \"unknown type name %qE;\"\n-\t\t\t     \" use %<enum%> keyword to refer to the type\",\n-\t\t\t     name);\n+\t  error_at (&richloc,\n+\t\t    \"unknown type name %qE;\"\n+\t\t    \" use %<enum%> keyword to refer to the type\",\n+\t\t    name);\n \t}\n       else\n \t{\n \t  const char *hint = lookup_name_fuzzy (name, FUZZY_LOOKUP_TYPENAME);\n \t  if (hint)\n \t    {\n \t      richloc.add_fixit_replace (hint);\n-\t      error_at_rich_loc (&richloc,\n-\t\t\t\t \"unknown type name %qE; did you mean %qs?\",\n-\t\t\t\t name, hint);\n+\t      error_at (&richloc,\n+\t\t\t\"unknown type name %qE; did you mean %qs?\",\n+\t\t\tname, hint);\n \t    }\n \t  else\n \t    error_at (here, \"unknown type name %qE\", name);\n@@ -3168,9 +3168,8 @@ c_parser_struct_or_union_specifier (c_parser *parser)\n \t\t= c_parser_peek_token (parser)->location;\n \t      gcc_rich_location richloc (semicolon_loc);\n \t      richloc.add_fixit_remove ();\n-\t      pedwarn_at_rich_loc\n-\t\t(&richloc, OPT_Wpedantic,\n-\t\t \"extra semicolon in struct or union specified\");\n+\t      pedwarn (&richloc, OPT_Wpedantic,\n+\t\t       \"extra semicolon in struct or union specified\");\n \t      c_parser_consume_token (parser);\n \t      continue;\n \t    }\n@@ -4073,9 +4072,9 @@ c_parser_parameter_declaration (c_parser *parser, tree attrs)\n \t    {\n \t      gcc_rich_location richloc (token->location);\n \t      richloc.add_fixit_replace (hint);\n-\t      error_at_rich_loc (&richloc,\n-\t\t\t\t \"unknown type name %qE; did you mean %qs?\",\n-\t\t\t\t token->value, hint);\n+\t      error_at (&richloc,\n+\t\t\t\"unknown type name %qE; did you mean %qs?\",\n+\t\t\ttoken->value, hint);\n \t    }\n \t  else\n \t    error_at (token->location, \"unknown type name %qE\", token->value);"}, {"sha": "4bdc48a9ea38d1e0e235b3b51cbf03090a182799", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=64a5912c9ee9aac3d0b1583924a69f74022a989a", "patch": "@@ -2406,10 +2406,9 @@ build_component_ref (location_t loc, tree datum, tree component,\n \t      gcc_rich_location rich_loc (reported_loc);\n \t      if (component_loc != UNKNOWN_LOCATION)\n \t\trich_loc.add_fixit_misspelled_id (component_loc, guessed_id);\n-\t      error_at_rich_loc\n-\t\t(&rich_loc,\n-\t\t \"%qT has no member named %qE; did you mean %qE?\",\n-\t\t type, component, guessed_id);\n+\t      error_at (&rich_loc,\n+\t\t\t\"%qT has no member named %qE; did you mean %qE?\",\n+\t\t\ttype, component, guessed_id);\n \t    }\n \t  else\n \t    error_at (loc, \"%qT has no member named %qE\", type, component);\n@@ -2483,9 +2482,9 @@ build_component_ref (location_t loc, tree datum, tree component,\n       rich_location richloc (line_table, loc);\n       /* \"loc\" should be the \".\" token.  */\n       richloc.add_fixit_replace (\"->\");\n-      error_at_rich_loc (&richloc,\n-\t\t\t \"%qE is a pointer; did you mean to use %<->%>?\",\n-\t\t\t datum);\n+      error_at (&richloc,\n+\t\t\"%qE is a pointer; did you mean to use %<->%>?\",\n+\t\tdatum);\n       return error_mark_node;\n     }\n   else if (code != ERROR_MARK)\n@@ -4276,8 +4275,7 @@ build_unary_op (location_t location, enum tree_code code, tree xarg,\n \t    {\n \t      gcc_rich_location richloc (location);\n \t      richloc.add_fixit_insert_before (location, \"!\");\n-\t      inform_at_rich_loc (&richloc, \"did you mean to use logical \"\n-\t\t\t\t  \"not?\");\n+\t      inform (&richloc, \"did you mean to use logical not?\");\n \t    }\n \t  if (!noconvert)\n \t    arg = default_conversion (arg);\n@@ -8256,9 +8254,9 @@ pop_init_level (location_t loc, int implicit,\n       && !constructor_zeroinit)\n     {\n       gcc_assert (initializer_stack->missing_brace_richloc);\n-      warning_at_rich_loc (initializer_stack->missing_brace_richloc,\n-\t\t\t   OPT_Wmissing_braces,\n-\t\t\t   \"missing braces around initializer\");\n+      warning_at (initializer_stack->missing_brace_richloc,\n+\t\t  OPT_Wmissing_braces,\n+\t\t  \"missing braces around initializer\");\n     }\n \n   /* Warn when some struct elements are implicitly initialized to zero.  */\n@@ -8580,10 +8578,9 @@ set_init_label (location_t loc, tree fieldname, location_t fieldname_loc,\n \t{\n \t  gcc_rich_location rich_loc (fieldname_loc);\n \t  rich_loc.add_fixit_misspelled_id (fieldname_loc, guessed_id);\n-\t  error_at_rich_loc\n-\t    (&rich_loc,\n-\t     \"%qT has no member named %qE; did you mean %qE?\",\n-\t     constructor_type, fieldname, guessed_id);\n+\t  error_at (&rich_loc,\n+\t\t    \"%qT has no member named %qE; did you mean %qE?\",\n+\t\t    constructor_type, fieldname, guessed_id);\n \t}\n       else\n \terror_at (fieldname_loc, \"%qT has no member named %qE\","}, {"sha": "4b92622d027c28a8d039e5c098491ded102488b0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=64a5912c9ee9aac3d0b1583924a69f74022a989a", "patch": "@@ -1,3 +1,40 @@\n+2017-10-31  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* class.c (explain_non_literal_class): Use UNKNOWN_LOCATION rather\n+\tthan 0.\n+\t* name-lookup.c (suggest_alternatives_for): Update for renaming of\n+\tinform_at_rich_loc.\n+\t(maybe_suggest_missing_header): Likewise.\n+\t(suggest_alternative_in_explicit_scope): Likewise.\n+\t* parser.c (cp_parser_diagnose_invalid_type_name): Likewise for\n+\trenaming of error_at_rich_loc.\n+\t(cp_parser_string_literal): Likewise.\n+\t(cp_parser_nested_name_specifier_opt): Likewise.\n+\t(cp_parser_cast_expression): Likewise for renaming of\n+\twarning_at_rich_loc.\n+\t(cp_parser_decl_specifier_seq): Likewise for renaming of\n+\terror_at_rich_loc and warning_at_rich_loc.\n+\t(cp_parser_elaborated_type_specifier): Likewise for renaming of\n+\tpedwarn_at_rich_loc.\n+\t(cp_parser_cv_qualifier_seq_opt): Likewise for renaming of\n+\terror_at_rich_loc.\n+\t(cp_parser_virt_specifier_seq_opt): Likewise.\n+\t(cp_parser_class_specifier_1): Likewise.\n+\t(cp_parser_class_head): Likewise.\n+\t(cp_parser_member_declaration): Likewise for renaming of\n+\tpedwarn_at_rich_loc, warning_at_rich_loc, and error_at_rich_loc.\n+\t(cp_parser_enclosed_template_argument_list): Likewise for renaming\n+\tof error_at_rich_loc.\n+\t(set_and_check_decl_spec_loc): Likewise.\n+\t* pt.c (listify): Likewise.\n+\t* rtti.c (typeid_ok_p): Likewise.\n+\t* semantics.c (process_outer_var_ref): Use UNKNOWN_LOCATION rather\n+\tthan 0.\n+\t* typeck.c (access_failure_info::maybe_suggest_accessor): Update\n+\tfor renaming of inform_at_rich_loc.\n+\t(finish_class_member_access_expr): Likewise for renaming of\n+\terror_at_rich_loc.\n+\n 2017-10-31  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-tree.h (struct operator_name_info_t): Rename to ..."}, {"sha": "98e62c6ad45009b0710e57060cd8a1c998bc9dd4", "filename": "gcc/cp/class.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=64a5912c9ee9aac3d0b1583924a69f74022a989a", "patch": "@@ -5394,18 +5394,20 @@ explain_non_literal_class (tree t)\n     /* Already explained.  */\n     return;\n \n-  inform (0, \"%q+T is not literal because:\", t);\n+  inform (UNKNOWN_LOCATION, \"%q+T is not literal because:\", t);\n   if (cxx_dialect < cxx17 && LAMBDA_TYPE_P (t))\n-    inform (0, \"  %qT is a closure type, which is only literal in \"\n+    inform (UNKNOWN_LOCATION,\n+\t    \"  %qT is a closure type, which is only literal in \"\n \t    \"C++17 and later\", t);\n   else if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (t))\n-    inform (0, \"  %q+T has a non-trivial destructor\", t);\n+    inform (UNKNOWN_LOCATION, \"  %q+T has a non-trivial destructor\", t);\n   else if (CLASSTYPE_NON_AGGREGATE (t)\n \t   && !TYPE_HAS_TRIVIAL_DFLT (t)\n \t   && !LAMBDA_TYPE_P (t)\n \t   && !TYPE_HAS_CONSTEXPR_CTOR (t))\n     {\n-      inform (0, \"  %q+T is not an aggregate, does not have a trivial \"\n+      inform (UNKNOWN_LOCATION,\n+\t      \"  %q+T is not an aggregate, does not have a trivial \"\n \t      \"default constructor, and has no constexpr constructor that \"\n \t      \"is not a copy or move constructor\", t);\n       if (type_has_non_user_provided_default_constructor (t))\n@@ -5437,7 +5439,8 @@ explain_non_literal_class (tree t)\n \t  tree basetype = TREE_TYPE (base_binfo);\n \t  if (!CLASSTYPE_LITERAL_P (basetype))\n \t    {\n-\t      inform (0, \"  base class %qT of %q+T is non-literal\",\n+\t      inform (UNKNOWN_LOCATION,\n+\t\t      \"  base class %qT of %q+T is non-literal\",\n \t\t      basetype, t);\n \t      explain_non_literal_class (basetype);\n \t      return;"}, {"sha": "b4976d8b7ccf420d3da5d2b9cd5f8dd21721d2b1", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=64a5912c9ee9aac3d0b1583924a69f74022a989a", "patch": "@@ -5377,7 +5377,7 @@ suggest_alternatives_for (location_t location, tree name,\n       gcc_rich_location richloc (location);\n \n       richloc.add_fixit_replace (fuzzy);\n-      inform_at_rich_loc (&richloc, \"suggested alternative: %qs\", fuzzy);\n+      inform (&richloc, \"suggested alternative: %qs\", fuzzy);\n     }\n }\n \n@@ -5485,10 +5485,10 @@ maybe_suggest_missing_header (location_t location, tree name, tree scope)\n \n   gcc_rich_location richloc (location);\n   maybe_add_include_fixit (&richloc, header_hint);\n-  inform_at_rich_loc (&richloc,\n-\t\t      \"%<std::%s%> is defined in header %qs;\"\n-\t\t      \" did you forget to %<#include %s%>?\",\n-\t\t      name_str, header_hint, header_hint);\n+  inform (&richloc,\n+\t  \"%<std::%s%> is defined in header %qs;\"\n+\t  \" did you forget to %<#include %s%>?\",\n+\t  name_str, header_hint, header_hint);\n   return true;\n }\n \n@@ -5518,8 +5518,8 @@ suggest_alternative_in_explicit_scope (location_t location, tree name,\n     {\n       gcc_rich_location richloc (location);\n       richloc.add_fixit_replace (fuzzy_name);\n-      inform_at_rich_loc (&richloc, \"suggested alternative: %qs\",\n-\t\t\t  fuzzy_name);\n+      inform (&richloc, \"suggested alternative: %qs\",\n+\t      fuzzy_name);\n       return true;\n     }\n "}, {"sha": "77b96376e1367b920887117f09574ef6ea36a261", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=64a5912c9ee9aac3d0b1583924a69f74022a989a", "patch": "@@ -3294,9 +3294,9 @@ cp_parser_diagnose_invalid_type_name (cp_parser *parser, tree id,\n \t{\n \t  gcc_rich_location richloc (location);\n \t  richloc.add_fixit_replace (suggestion);\n-\t  error_at_rich_loc (&richloc,\n-\t\t\t     \"%qE does not name a type; did you mean %qs?\",\n-\t\t\t     id, suggestion);\n+\t  error_at (&richloc,\n+\t\t    \"%qE does not name a type; did you mean %qs?\",\n+\t\t    id, suggestion);\n \t}\n       else\n \terror_at (location, \"%qE does not name a type\", id);\n@@ -4107,9 +4107,9 @@ cp_parser_string_literal (cp_parser *parser, bool translate, bool wide_ok,\n \t\t{\n \t\t  rich_location rich_loc (line_table, tok->location);\n \t\t  rich_loc.add_range (last_tok_loc, false);\n-\t\t  error_at_rich_loc (&rich_loc,\n-\t\t\t\t     \"unsupported non-standard concatenation \"\n-\t\t\t\t     \"of string literals\");\n+\t\t  error_at (&rich_loc,\n+\t\t\t    \"unsupported non-standard concatenation \"\n+\t\t\t    \"of string literals\");\n \t\t}\n \t    }\n \n@@ -6163,9 +6163,9 @@ cp_parser_nested_name_specifier_opt (cp_parser *parser,\n \t    {\n \t      gcc_rich_location richloc (token->location);\n \t      richloc.add_fixit_replace (\"::\");\n-\t      error_at_rich_loc (&richloc,\n-\t\t\t\t \"found %<:%> in nested-name-specifier, \"\n-\t\t\t\t \"expected %<::%>\");\n+\t      error_at (&richloc,\n+\t\t\t\"found %<:%> in nested-name-specifier, \"\n+\t\t\t\"expected %<::%>\");\n \t      token->type = CPP_SCOPE;\n \t    }\n \n@@ -9097,8 +9097,8 @@ cp_parser_cast_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t\t  gcc_rich_location rich_loc (input_location);\n \t\t  maybe_add_cast_fixit (&rich_loc, open_paren_loc, close_paren_loc,\n \t\t\t\t\texpr, type);\n-\t\t  warning_at_rich_loc (&rich_loc, OPT_Wold_style_cast,\n-\t\t\t\t       \"use of old-style cast to %q#T\", type);\n+\t\t  warning_at (&rich_loc, OPT_Wold_style_cast,\n+\t\t\t      \"use of old-style cast to %q#T\", type);\n \t\t}\n \n \t      /* Only type conversions to integral or enumeration types\n@@ -13549,7 +13549,7 @@ cp_parser_decl_specifier_seq (cp_parser* parser,\n \t    {\n \t      gcc_rich_location richloc (token->location);\n \t      richloc.add_fixit_remove ();\n-\t      error_at_rich_loc (&richloc, \"%<friend%> used outside of class\");\n+\t      error_at (&richloc, \"%<friend%> used outside of class\");\n \t      cp_lexer_purge_token (parser->lexer);\n \t    }\n \t  else\n@@ -13615,9 +13615,9 @@ cp_parser_decl_specifier_seq (cp_parser* parser,\n \t\t we're complaining about C++0x compatibility.  */\n \t      gcc_rich_location richloc (token->location);\n \t      richloc.add_fixit_remove ();\n-\t      warning_at_rich_loc (&richloc, OPT_Wc__11_compat,\n-\t\t\t\t   \"%<auto%> changes meaning in C++11; \"\n-\t\t\t\t   \"please remove it\");\n+\t      warning_at (&richloc, OPT_Wc__11_compat,\n+\t\t\t  \"%<auto%> changes meaning in C++11; \"\n+\t\t\t  \"please remove it\");\n \n               /* Set the storage class anyway.  */\n               cp_parser_set_storage_class (parser, decl_specs, RID_AUTO,\n@@ -17661,9 +17661,9 @@ cp_parser_elaborated_type_specifier (cp_parser* parser,\n \t  gcc_rich_location richloc (token->location);\n \t  richloc.add_range (input_location, false);\n \t  richloc.add_fixit_remove ();\n-\t  pedwarn_at_rich_loc (&richloc, 0, \"elaborated-type-specifier for \"\n-\t\t\t       \"a scoped enum must not use the %qD keyword\",\n-\t\t\t       token->u.value);\n+\t  pedwarn (&richloc, 0, \"elaborated-type-specifier for \"\n+\t\t   \"a scoped enum must not use the %qD keyword\",\n+\t\t   token->u.value);\n \t  /* Consume the `struct' or `class' and parse it anyway.  */\n \t  cp_lexer_consume_token (parser->lexer);\n \t}\n@@ -20659,7 +20659,7 @@ cp_parser_cv_qualifier_seq_opt (cp_parser* parser)\n \t{\n \t  gcc_rich_location richloc (token->location);\n \t  richloc.add_fixit_remove ();\n-\t  error_at_rich_loc (&richloc, \"duplicate cv-qualifier\");\n+\t  error_at (&richloc, \"duplicate cv-qualifier\");\n \t  cp_lexer_purge_token (parser->lexer);\n \t}\n       else\n@@ -20808,7 +20808,7 @@ cp_parser_virt_specifier_seq_opt (cp_parser* parser)\n \t{\n \t  gcc_rich_location richloc (token->location);\n \t  richloc.add_fixit_remove ();\n-\t  error_at_rich_loc (&richloc, \"duplicate virt-specifier\");\n+\t  error_at (&richloc, \"duplicate virt-specifier\");\n \t  cp_lexer_purge_token (parser->lexer);\n \t}\n       else\n@@ -22606,14 +22606,14 @@ cp_parser_class_specifier_1 (cp_parser* parser)\n \t  richloc.add_fixit_insert_before (next_loc, \";\");\n \n \tif (CLASSTYPE_DECLARED_CLASS (type))\n-\t  error_at_rich_loc (&richloc,\n-\t\t\t     \"expected %<;%> after class definition\");\n+\t  error_at (&richloc,\n+\t\t    \"expected %<;%> after class definition\");\n \telse if (TREE_CODE (type) == RECORD_TYPE)\n-\t  error_at_rich_loc (&richloc,\n-\t\t\t     \"expected %<;%> after struct definition\");\n+\t  error_at (&richloc,\n+\t\t    \"expected %<;%> after struct definition\");\n \telse if (TREE_CODE (type) == UNION_TYPE)\n-\t  error_at_rich_loc (&richloc,\n-\t\t\t     \"expected %<;%> after union definition\");\n+\t  error_at (&richloc,\n+\t\t    \"expected %<;%> after union definition\");\n \telse\n \t  gcc_unreachable ();\n \n@@ -23060,9 +23060,9 @@ cp_parser_class_head (cp_parser* parser,\n       rich_location richloc (line_table, reported_loc);\n       richloc.add_fixit_insert_before (class_head_start_location,\n                                        \"template <> \");\n-      error_at_rich_loc\n-        (&richloc,\n-         \"an explicit specialization must be preceded by %<template <>%>\");\n+      error_at (&richloc,\n+\t\t\"an explicit specialization must be preceded by\"\n+\t\t\" %<template <>%>\");\n       invalid_explicit_specialization_p = true;\n       /* Take the same action that would have been taken by\n \t cp_parser_explicit_specialization.  */\n@@ -23530,7 +23530,7 @@ cp_parser_member_declaration (cp_parser* parser)\n \t    {\n \t      gcc_rich_location richloc (token->location);\n \t      richloc.add_fixit_remove ();\n-\t      pedwarn_at_rich_loc (&richloc, OPT_Wpedantic, \"extra %<;%>\");\n+\t      pedwarn (&richloc, OPT_Wpedantic, \"extra %<;%>\");\n \t    }\n \t}\n       else\n@@ -23873,9 +23873,9 @@ cp_parser_member_declaration (cp_parser* parser)\n \t\t\t= cp_lexer_consume_token (parser->lexer)->location;\n \t\t      gcc_rich_location richloc (semicolon_loc);\n \t\t      richloc.add_fixit_remove ();\n-\t\t      warning_at_rich_loc (&richloc, OPT_Wextra_semi,\n-\t\t\t\t\t   \"extra %<;%> after in-class \"\n-\t\t\t\t\t   \"function definition\");\n+\t\t      warning_at (&richloc, OPT_Wextra_semi,\n+\t\t\t\t  \"extra %<;%> after in-class \"\n+\t\t\t\t  \"function definition\");\n \t\t    }\n \t\t  goto out;\n \t\t}\n@@ -23918,8 +23918,8 @@ cp_parser_member_declaration (cp_parser* parser)\n \t\t  cp_token *token = cp_lexer_previous_token (parser->lexer);\n \t\t  gcc_rich_location richloc (token->location);\n \t\t  richloc.add_fixit_remove ();\n-\t\t  error_at_rich_loc (&richloc, \"stray %<,%> at end of \"\n-\t\t\t\t     \"member declaration\");\n+\t\t  error_at (&richloc, \"stray %<,%> at end of \"\n+\t\t\t    \"member declaration\");\n \t\t}\n \t    }\n \t  /* If the next token isn't a `;', then we have a parse error.  */\n@@ -23932,8 +23932,8 @@ cp_parser_member_declaration (cp_parser* parser)\n \t      cp_token *token = cp_lexer_previous_token (parser->lexer);\n \t      gcc_rich_location richloc (token->location);\n \t      richloc.add_fixit_insert_after (\";\");\n-\t      error_at_rich_loc (&richloc, \"expected %<;%> at end of \"\n-\t\t\t\t \"member declaration\");\n+\t      error_at (&richloc, \"expected %<;%> at end of \"\n+\t\t\t\"member declaration\");\n \n \t      /* Assume that the user meant to provide a semicolon.  If\n \t\t we were to cp_parser_skip_to_end_of_statement, we might\n@@ -27544,8 +27544,8 @@ cp_parser_enclosed_template_argument_list (cp_parser* parser)\n \t  cp_token *token = cp_lexer_peek_token (parser->lexer);\n \t  gcc_rich_location richloc (token->location);\n \t  richloc.add_fixit_replace (\"> >\");\n-\t  error_at_rich_loc (&richloc, \"%<>>%> should be %<> >%> \"\n-\t\t\t     \"within a nested template argument list\");\n+\t  error_at (&richloc, \"%<>>%> should be %<> >%> \"\n+\t\t    \"within a nested template argument list\");\n \n \t  token->type = CPP_GREATER;\n \t}\n@@ -28174,7 +28174,7 @@ set_and_check_decl_spec_loc (cp_decl_specifier_seq *decl_specs,\n \t    {\n \t      gcc_rich_location richloc (location);\n \t      richloc.add_fixit_remove ();\n-\t      error_at_rich_loc (&richloc, \"duplicate %qD\", token->u.value);\n+\t      error_at (&richloc, \"duplicate %qD\", token->u.value);\n \t    }\n \t}\n       else\n@@ -28198,7 +28198,7 @@ set_and_check_decl_spec_loc (cp_decl_specifier_seq *decl_specs,\n \t  };\n \t  gcc_rich_location richloc (location);\n \t  richloc.add_fixit_remove ();\n-\t  error_at_rich_loc (&richloc, \"duplicate %qs\", decl_spec_names[ds]);\n+\t  error_at (&richloc, \"duplicate %qs\", decl_spec_names[ds]);\n \t}\n     }\n }"}, {"sha": "f525d2233cc41d0f54c400fa0c1aabce2c30655c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=64a5912c9ee9aac3d0b1583924a69f74022a989a", "patch": "@@ -25130,9 +25130,9 @@ listify (tree arg)\n     {    \n       gcc_rich_location richloc (input_location);\n       maybe_add_include_fixit (&richloc, \"<initializer_list>\");\n-      error_at_rich_loc (&richloc,\n-                         \"deducing from brace-enclosed initializer list\"\n-                         \" requires #include <initializer_list>\");\n+      error_at (&richloc,\n+\t\t\"deducing from brace-enclosed initializer list\"\n+\t\t\" requires #include <initializer_list>\");\n \n       return error_mark_node;\n     }"}, {"sha": "10ecbfd95892469a8a80342a9d99de2b394d5497", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=64a5912c9ee9aac3d0b1583924a69f74022a989a", "patch": "@@ -319,9 +319,9 @@ typeid_ok_p (void)\n     {\n       gcc_rich_location richloc (input_location);\n       maybe_add_include_fixit (&richloc, \"<typeinfo>\");\n-      error_at_rich_loc (&richloc,\n-\t\t\t \"must %<#include <typeinfo>%> before using\"\n-\t\t\t \" %<typeid%>\");\n+      error_at (&richloc,\n+\t\t\"must %<#include <typeinfo>%> before using\"\n+\t\t\" %<typeid%>\");\n \n       return false;\n     }"}, {"sha": "664952e749c61710cc97068f919705647aa31611", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=64a5912c9ee9aac3d0b1583924a69f74022a989a", "patch": "@@ -3399,7 +3399,7 @@ process_outer_var_ref (tree decl, tsubst_flags_t complain, bool force_use)\n \t    inform (location_of (closure),\n \t\t    \"the lambda has no capture-default\");\n \t  else if (TYPE_CLASS_SCOPE_P (closure))\n-\t    inform (0, \"lambda in local class %q+T cannot \"\n+\t    inform (UNKNOWN_LOCATION, \"lambda in local class %q+T cannot \"\n \t\t    \"capture variables from the enclosing context\",\n \t\t    TYPE_CONTEXT (closure));\n \t  inform (DECL_SOURCE_LOCATION (decl), \"%q#D declared here\", decl);"}, {"sha": "285d8d2fb11181015505c3d04a35b04bad0ee978", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=64a5912c9ee9aac3d0b1583924a69f74022a989a", "patch": "@@ -2677,8 +2677,8 @@ access_failure_info::maybe_suggest_accessor (bool const_p) const\n   pretty_printer pp;\n   pp_printf (&pp, \"%s()\", IDENTIFIER_POINTER (DECL_NAME (accessor)));\n   richloc.add_fixit_replace (pp_formatted_text (&pp));\n-  inform_at_rich_loc (&richloc, \"field %q#D can be accessed via %q#D\",\n-\t\t      m_field_decl, accessor);\n+  inform (&richloc, \"field %q#D can be accessed via %q#D\",\n+\t  m_field_decl, accessor);\n }\n \n /* This function is called by the parser to process a class member\n@@ -2883,12 +2883,12 @@ finish_class_member_access_expr (cp_expr object, tree name, bool template_p,\n \t\t      gcc_rich_location rich_loc (bogus_component_loc);\n \t\t      rich_loc.add_fixit_misspelled_id (bogus_component_loc,\n \t\t\t\t\t\t\tguessed_id);\n-\t\t      error_at_rich_loc\n-\t\t\t(&rich_loc,\n-\t\t\t \"%q#T has no member named %qE; did you mean %qE?\",\n-\t\t\t TREE_CODE (access_path) == TREE_BINFO\n-\t\t\t ? TREE_TYPE (access_path) : object_type, name,\n-\t\t\t guessed_id);\n+\t\t      error_at (&rich_loc,\n+\t\t\t\t\"%q#T has no member named %qE;\"\n+\t\t\t\t\" did you mean %qE?\",\n+\t\t\t\tTREE_CODE (access_path) == TREE_BINFO\n+\t\t\t\t? TREE_TYPE (access_path) : object_type,\n+\t\t\t\tname, guessed_id);\n \t\t    }\n \t\t  else\n \t\t    error (\"%q#T has no member named %qE\","}, {"sha": "24025f1ef80b555ce15778c3fc9fb93ca9d97a45", "filename": "gcc/diagnostic-core.h", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fdiagnostic-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fdiagnostic-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-core.h?ref=64a5912c9ee9aac3d0b1583924a69f74022a989a", "patch": "@@ -61,33 +61,32 @@ extern void internal_error_no_backtrace (const char *, ...)\n extern bool warning (int, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n extern bool warning_n (location_t, int, int, const char *, const char *, ...)\n     ATTRIBUTE_GCC_DIAG(4,6) ATTRIBUTE_GCC_DIAG(5,6);\n+extern bool warning_n (rich_location *, int, int, const char *,\n+\t\t       const char *, ...)\n+    ATTRIBUTE_GCC_DIAG(4, 6) ATTRIBUTE_GCC_DIAG(5, 6);\n extern bool warning_at (location_t, int, const char *, ...)\n     ATTRIBUTE_GCC_DIAG(3,4);\n-extern bool warning_at_rich_loc (rich_location *, int, const char *, ...)\n+extern bool warning_at (rich_location *, int, const char *, ...)\n     ATTRIBUTE_GCC_DIAG(3,4);\n-extern bool warning_at_rich_loc_n (rich_location *, int, int, const char *,\n-\t\t\t\t  const char *, ...)\n-    ATTRIBUTE_GCC_DIAG(4, 6) ATTRIBUTE_GCC_DIAG(5, 6);\n extern void error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n extern void error_n (location_t, int, const char *, const char *, ...)\n     ATTRIBUTE_GCC_DIAG(3,5) ATTRIBUTE_GCC_DIAG(4,5);\n extern void error_at (location_t, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n-extern void error_at_rich_loc (rich_location *, const char *, ...)\n+extern void error_at (rich_location *, const char *, ...)\n   ATTRIBUTE_GCC_DIAG(2,3);\n extern void fatal_error (location_t, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3)\n      ATTRIBUTE_NORETURN;\n /* Pass one of the OPT_W* from options.h as the second parameter.  */\n extern bool pedwarn (location_t, int, const char *, ...)\n      ATTRIBUTE_GCC_DIAG(3,4);\n-extern bool pedwarn_at_rich_loc (rich_location *, int, const char *, ...)\n+extern bool pedwarn (rich_location *, int, const char *, ...)\n      ATTRIBUTE_GCC_DIAG(3,4);\n extern bool permerror (location_t, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n-extern bool permerror_at_rich_loc (rich_location *, const char *,\n+extern bool permerror (rich_location *, const char *,\n \t\t\t\t   ...) ATTRIBUTE_GCC_DIAG(2,3);\n extern void sorry (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n extern void inform (location_t, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n-extern void inform_at_rich_loc (rich_location *, const char *,\n-\t\t\t\t...) ATTRIBUTE_GCC_DIAG(2,3);\n+extern void inform (rich_location *, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n extern void inform_n (location_t, int, const char *, const char *, ...)\n     ATTRIBUTE_GCC_DIAG(3,5) ATTRIBUTE_GCC_DIAG(4,5);\n extern void verbatim (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);"}, {"sha": "9db4b46532d826278c8804962ef84b51257ff10c", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 43, "deletions": 44, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=64a5912c9ee9aac3d0b1583924a69f74022a989a", "patch": "@@ -50,12 +50,9 @@ along with GCC; see the file COPYING3.  If not see\n /* Prototypes.  */\n static bool diagnostic_impl (rich_location *, int, const char *,\n \t\t\t     va_list *, diagnostic_t) ATTRIBUTE_GCC_DIAG(3,0);\n-static bool diagnostic_n_impl (location_t, int, int, const char *,\n+static bool diagnostic_n_impl (rich_location *, int, int, const char *,\n \t\t\t       const char *, va_list *,\n \t\t\t       diagnostic_t) ATTRIBUTE_GCC_DIAG(5,0);\n-static bool diagnostic_n_impl_richloc (rich_location *, int, int, const char *,\n-\t\t\t\t       const char *, va_list *,\n-\t\t\t\t       diagnostic_t) ATTRIBUTE_GCC_DIAG(5,0);\n \n static void error_recursion (diagnostic_context *) ATTRIBUTE_NORETURN;\n static void real_abort (void) ATTRIBUTE_NORETURN;\n@@ -1074,10 +1071,9 @@ diagnostic_append_note (diagnostic_context *context,\n   va_end (ap);\n }\n \n-/* Implement emit_diagnostic, inform, inform_at_rich_loc, warning, warning_at,\n-   warning_at_rich_loc, pedwarn, permerror, permerror_at_rich_loc, error,\n-   error_at, error_at_rich_loc, sorry, fatal_error, internal_error, and\n-   internal_error_no_backtrace, as documented and defined below.  */\n+/* Implement emit_diagnostic, inform, warning, warning_at, pedwarn,\n+   permerror, error, error_at, error_at, sorry, fatal_error, internal_error,\n+   and internal_error_no_backtrace, as documented and defined below.  */\n static bool\n diagnostic_impl (rich_location *richloc, int opt,\n \t\t const char *gmsgid,\n@@ -1099,12 +1095,13 @@ diagnostic_impl (rich_location *richloc, int opt,\n   return diagnostic_report_diagnostic (global_dc, &diagnostic);\n }\n \n-/* Same as diagonostic_n_impl taking rich_location instead of location_t.  */\n+/* Implement inform_n, warning_n, and error_n, as documented and\n+   defined below.  */\n static bool\n-diagnostic_n_impl_richloc (rich_location *richloc, int opt, int n,\n-\t\t\t   const char *singular_gmsgid,\n-\t\t\t   const char *plural_gmsgid,\n-\t\t\t   va_list *ap, diagnostic_t kind)\n+diagnostic_n_impl (rich_location *richloc, int opt, int n,\n+\t\t   const char *singular_gmsgid,\n+\t\t   const char *plural_gmsgid,\n+\t\t   va_list *ap, diagnostic_t kind)\n {\n   diagnostic_info diagnostic;\n   diagnostic_set_info_translated (&diagnostic,\n@@ -1113,19 +1110,6 @@ diagnostic_n_impl_richloc (rich_location *richloc, int opt, int n,\n   if (kind == DK_WARNING)\n     diagnostic.option_index = opt;\n   return diagnostic_report_diagnostic (global_dc, &diagnostic);\n-} \n-\n-/* Implement inform_n, warning_n, and error_n, as documented and\n-   defined below.  */\n-static bool\n-diagnostic_n_impl (location_t location, int opt, int n,\n-\t\t   const char *singular_gmsgid,\n-\t\t   const char *plural_gmsgid,\n-\t\t   va_list *ap, diagnostic_t kind)\n-{\n-  rich_location richloc (line_table, location);\n-  return diagnostic_n_impl_richloc (&richloc, opt, n,\n-\t\t\t\t    singular_gmsgid, plural_gmsgid, ap, kind);\n }\n \n /* Wrapper around diagnostic_impl taking a variable argument list.  */\n@@ -1164,10 +1148,12 @@ inform (location_t location, const char *gmsgid, ...)\n   va_end (ap);\n }\n \n-/* Same as \"inform\", but at RICHLOC.  */\n+/* Same as \"inform\" above, but at RICHLOC.  */\n void\n-inform_at_rich_loc (rich_location *richloc, const char *gmsgid, ...)\n+inform (rich_location *richloc, const char *gmsgid, ...)\n {\n+  gcc_assert (richloc);\n+\n   va_list ap;\n   va_start (ap, gmsgid);\n   diagnostic_impl (richloc, -1, gmsgid, &ap, DK_NOTE);\n@@ -1182,7 +1168,8 @@ inform_n (location_t location, int n, const char *singular_gmsgid,\n {\n   va_list ap;\n   va_start (ap, plural_gmsgid);\n-  diagnostic_n_impl (location, -1, n, singular_gmsgid, plural_gmsgid,\n+  rich_location richloc (line_table, location);\n+  diagnostic_n_impl (&richloc, -1, n, singular_gmsgid, plural_gmsgid,\n \t\t     &ap, DK_NOTE);\n   va_end (ap);\n }\n@@ -1216,29 +1203,33 @@ warning_at (location_t location, int opt, const char *gmsgid, ...)\n   return ret;\n }\n \n-/* Same as warning at, but using RICHLOC.  */\n+/* Same as \"warning at\" above, but using RICHLOC.  */\n \n bool\n-warning_at_rich_loc (rich_location *richloc, int opt, const char *gmsgid, ...)\n+warning_at (rich_location *richloc, int opt, const char *gmsgid, ...)\n {\n+  gcc_assert (richloc);\n+\n   va_list ap;\n   va_start (ap, gmsgid);\n   bool ret = diagnostic_impl (richloc, opt, gmsgid, &ap, DK_WARNING);\n   va_end (ap);\n   return ret;\n }\n \n-/* Same as warning_at_rich_loc but for plural variant.  */\n+/* Same as warning_n plural variant below, but using RICHLOC.  */\n \n bool\n-warning_at_rich_loc_n (rich_location *richloc, int opt, int n,\n-\t\t       const char *singular_gmsgid, const char *plural_gmsgid, ...)\n+warning_n (rich_location *richloc, int opt, int n,\n+\t   const char *singular_gmsgid, const char *plural_gmsgid, ...)\n {\n+  gcc_assert (richloc);\n+\n   va_list ap;\n   va_start (ap, plural_gmsgid);\n-  bool ret = diagnostic_n_impl_richloc (richloc, opt, n,\n-\t\t\t\t\tsingular_gmsgid, plural_gmsgid,\n-\t\t\t\t\t&ap, DK_WARNING);\n+  bool ret = diagnostic_n_impl (richloc, opt, n,\n+\t\t\t\tsingular_gmsgid, plural_gmsgid,\n+\t\t\t\t&ap, DK_WARNING);\n   va_end (ap);\n   return ret;\n }\n@@ -1253,7 +1244,8 @@ warning_n (location_t location, int opt, int n, const char *singular_gmsgid,\n {\n   va_list ap;\n   va_start (ap, plural_gmsgid);\n-  bool ret = diagnostic_n_impl (location, opt, n,\n+  rich_location richloc (line_table, location);\n+  bool ret = diagnostic_n_impl (&richloc, opt, n,\n \t\t\t\tsingular_gmsgid, plural_gmsgid,\n \t\t\t\t&ap, DK_WARNING);\n   va_end (ap);\n@@ -1284,11 +1276,13 @@ pedwarn (location_t location, int opt, const char *gmsgid, ...)\n   return ret;\n }\n \n-/* Same as pedwarn, but using RICHLOC.  */\n+/* Same as pedwarn above, but using RICHLOC.  */\n \n bool\n-pedwarn_at_rich_loc (rich_location *richloc, int opt, const char *gmsgid, ...)\n+pedwarn (rich_location *richloc, int opt, const char *gmsgid, ...)\n {\n+  gcc_assert (richloc);\n+\n   va_list ap;\n   va_start (ap, gmsgid);\n   bool ret = diagnostic_impl (richloc, opt, gmsgid, &ap, DK_PEDWARN);\n@@ -1314,11 +1308,13 @@ permerror (location_t location, const char *gmsgid, ...)\n   return ret;\n }\n \n-/* Same as \"permerror\", but at RICHLOC.  */\n+/* Same as \"permerror\" above, but at RICHLOC.  */\n \n bool\n-permerror_at_rich_loc (rich_location *richloc, const char *gmsgid, ...)\n+permerror (rich_location *richloc, const char *gmsgid, ...)\n {\n+  gcc_assert (richloc);\n+\n   va_list ap;\n   va_start (ap, gmsgid);\n   bool ret = diagnostic_impl (richloc, -1, gmsgid, &ap, DK_PERMERROR);\n@@ -1346,7 +1342,8 @@ error_n (location_t location, int n, const char *singular_gmsgid,\n {\n   va_list ap;\n   va_start (ap, plural_gmsgid);\n-  diagnostic_n_impl (location, -1, n, singular_gmsgid, plural_gmsgid,\n+  rich_location richloc (line_table, location);\n+  diagnostic_n_impl (&richloc, -1, n, singular_gmsgid, plural_gmsgid,\n \t\t     &ap, DK_ERROR);\n   va_end (ap);\n }\n@@ -1365,8 +1362,10 @@ error_at (location_t loc, const char *gmsgid, ...)\n /* Same as above, but use RICH_LOC.  */\n \n void\n-error_at_rich_loc (rich_location *richloc, const char *gmsgid, ...)\n+error_at (rich_location *richloc, const char *gmsgid, ...)\n {\n+  gcc_assert (richloc);\n+\n   va_list ap;\n   va_start (ap, gmsgid);\n   diagnostic_impl (richloc, -1, gmsgid, &ap, DK_ERROR);"}, {"sha": "43e6d590c251a355cdd0fe94095dcda6bd6554e6", "filename": "gcc/gcc.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=64a5912c9ee9aac3d0b1583924a69f74022a989a", "patch": "@@ -5315,7 +5315,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t      buf = (char *) alloca (p - q + 1);\n \t      strncpy (buf, q, p - q);\n \t      buf[p - q] = 0;\n-\t      inform (0, \"%s\", _(buf));\n+\t      inform (UNKNOWN_LOCATION, \"%s\", _(buf));\n \t      if (*p)\n \t\tp++;\n \t    }\n@@ -8192,7 +8192,8 @@ driver::do_spec_on_infiles () const\n \t      else if (compare_debug && debug_check_temp_file[0])\n \t\t{\n \t\t  if (verbose_flag)\n-\t\t    inform (0, \"recompiling with -fcompare-debug\");\n+\t\t    inform (UNKNOWN_LOCATION,\n+\t\t\t    \"recompiling with -fcompare-debug\");\n \n \t\t  compare_debug = -compare_debug;\n \t\t  n_switches = n_switches_debug_check[1];\n@@ -8217,7 +8218,7 @@ driver::do_spec_on_infiles () const\n \t\t\t\t\t       debug_check_temp_file[1]));\n \n \t\t  if (verbose_flag)\n-\t\t    inform (0, \"comparing final insns dumps\");\n+\t\t    inform (UNKNOWN_LOCATION, \"comparing final insns dumps\");\n \n \t\t  if (compare_files (debug_check_temp_file))\n \t\t    this_file_error = 1;"}, {"sha": "7d8659289990f6c3dd47b0287333a92e578a85d7", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=64a5912c9ee9aac3d0b1583924a69f74022a989a", "patch": "@@ -1,3 +1,8 @@\n+2017-10-31  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* objc-gnu-runtime-abi-01.c (objc_gnu_runtime_abi_01_init): Use\n+\tUNKNOWN_LOCATION rather than 0.\n+\n 2017-10-17  Nathan Sidwell  <nathan@acm.org>\n \n \t* objc-act.c (objc_common_tree_size): Return size of TYPE nodes."}, {"sha": "4321b365358e45b81c348d453cfc71491bade4a8", "filename": "gcc/objc/objc-gnu-runtime-abi-01.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fobjc%2Fobjc-gnu-runtime-abi-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fobjc%2Fobjc-gnu-runtime-abi-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-gnu-runtime-abi-01.c?ref=64a5912c9ee9aac3d0b1583924a69f74022a989a", "patch": "@@ -130,7 +130,8 @@ objc_gnu_runtime_abi_01_init (objc_runtime_hooks *rthooks)\n   /* GNU runtime does not need the compiler to change code in order to do GC. */\n   if (flag_objc_gc)\n     {\n-      warning_at (0, 0, \"%<-fobjc-gc%> is ignored for %<-fgnu-runtime%>\");\n+      warning_at (UNKNOWN_LOCATION, 0,\n+\t\t  \"%<-fobjc-gc%> is ignored for %<-fgnu-runtime%>\");\n       flag_objc_gc = 0;\n     }\n "}, {"sha": "7de435b969f63ccf08544fc87238457a7bf6cb31", "filename": "gcc/substring-locations.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fsubstring-locations.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Fsubstring-locations.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsubstring-locations.c?ref=64a5912c9ee9aac3d0b1583924a69f74022a989a", "patch": "@@ -155,8 +155,8 @@ format_warning_va (const substring_loc &fmt_loc,\n \tif (corrected_substring)\n \t  substring_richloc.add_fixit_replace (fmt_substring_range,\n \t\t\t\t\t       corrected_substring);\n-\tinform_at_rich_loc (&substring_richloc,\n-\t\t\t    \"format string is defined here\");\n+\tinform (&substring_richloc,\n+\t\t\"format string is defined here\");\n       }\n \n   return warned;"}, {"sha": "42e634dbcc46361211e5b4572a9dde325ce9fc88", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=64a5912c9ee9aac3d0b1583924a69f74022a989a", "patch": "@@ -1,3 +1,10 @@\n+2017-10-31  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/plugin/diagnostic_plugin_show_trees.c (show_tree): Update\n+\tfor renaming of error_at_rich_loc and inform_at_rich_loc.\n+\t* gcc.dg/plugin/diagnostic_plugin_test_show_locus.c\n+\t(test_show_locus): Likewise for renaming of warning_at_rich_loc.\n+\n 2017-10-31  Martin Liska  <mliska@suse.cz>\n \n \t* g++.dg/gcov/loop.C: New test."}, {"sha": "0bdd877dbd5aec13096c20295e4f34c903616055", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic_plugin_show_trees.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_show_trees.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_show_trees.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_show_trees.c?ref=64a5912c9ee9aac3d0b1583924a69f74022a989a", "patch": "@@ -45,14 +45,14 @@ show_tree (tree node)\n \n   if (richloc.get_num_locations () < 2)\n     {\n-      error_at_rich_loc (&richloc, \"range not found\");\n+      error_at (&richloc, \"range not found\");\n       return;\n     }\n \n   enum tree_code code = TREE_CODE (node);\n \n   location_range *range = richloc.get_range (1);\n-  inform_at_rich_loc (&richloc, \"%s\", get_tree_code_name (code));\n+  inform (&richloc, \"%s\", get_tree_code_name (code));\n \n   /* Recurse.  */\n   int min_idx = 0;"}, {"sha": "9751e1cd25e9fa52447d4a0cadbc1971ffcf60d3", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic_plugin_test_show_locus.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5912c9ee9aac3d0b1583924a69f74022a989a/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c?ref=64a5912c9ee9aac3d0b1583924a69f74022a989a", "patch": "@@ -176,7 +176,7 @@ test_show_locus (function *fun)\n       rich_location richloc (line_table, get_loc (line, 15));\n       add_range (&richloc, get_loc (line, 10), get_loc (line, 14), false);\n       add_range (&richloc, get_loc (line, 16), get_loc (line, 16), false);\n-      warning_at_rich_loc (&richloc, 0, \"test\");\n+      warning_at (&richloc, 0, \"test\");\n     }\n \n   if (0 == strcmp (fnname, \"test_simple_2\"))\n@@ -185,7 +185,7 @@ test_show_locus (function *fun)\n       rich_location richloc (line_table, get_loc (line, 24));\n       add_range (&richloc, get_loc (line, 6), get_loc (line, 22), false);\n       add_range (&richloc, get_loc (line, 26), get_loc (line, 43), false);\n-      warning_at_rich_loc (&richloc, 0, \"test\");\n+      warning_at (&richloc, 0, \"test\");\n     }\n \n   if (0 == strcmp (fnname, \"test_multiline\"))\n@@ -195,7 +195,7 @@ test_show_locus (function *fun)\n       add_range (&richloc, get_loc (line, 7), get_loc (line, 23), false);\n       add_range (&richloc, get_loc (line + 1, 9), get_loc (line + 1, 26),\n \t\t false);\n-      warning_at_rich_loc (&richloc, 0, \"test\");\n+      warning_at (&richloc, 0, \"test\");\n     }\n \n   if (0 == strcmp (fnname, \"test_many_lines\"))\n@@ -205,7 +205,7 @@ test_show_locus (function *fun)\n       add_range (&richloc, get_loc (line, 7), get_loc (line + 4, 65), false);\n       add_range (&richloc, get_loc (line + 5, 9), get_loc (line + 10, 61),\n \t\t false);\n-      warning_at_rich_loc (&richloc, 0, \"test\");\n+      warning_at (&richloc, 0, \"test\");\n     }\n \n   /* Example of a rich_location where the range is larger than\n@@ -216,7 +216,7 @@ test_show_locus (function *fun)\n       location_t start = get_loc (line, 12);\n       location_t finish = get_loc (line, 16);\n       rich_location richloc (line_table, make_location (start, start, finish));\n-      warning_at_rich_loc (&richloc, 0, \"test\");\n+      warning_at (&richloc, 0, \"test\");\n     }\n \n   /* Example of a single-range location where the range starts\n@@ -251,7 +251,7 @@ test_show_locus (function *fun)\n       add_range (&richloc, caret_b, caret_b, true);\n       global_dc->caret_chars[0] = 'A';\n       global_dc->caret_chars[1] = 'B';\n-      warning_at_rich_loc (&richloc, 0, \"test\");\n+      warning_at (&richloc, 0, \"test\");\n       global_dc->caret_chars[0] = '^';\n       global_dc->caret_chars[1] = '^';\n     }\n@@ -265,7 +265,7 @@ test_show_locus (function *fun)\n       rich_location richloc (line_table, make_location (start, start, finish));\n       richloc.add_fixit_insert_before (\"{\");\n       richloc.add_fixit_insert_after (\"}\");\n-      warning_at_rich_loc (&richloc, 0, \"example of insertion hints\");\n+      warning_at (&richloc, 0, \"example of insertion hints\");\n     }\n \n   if (0 == strcmp (fnname, \"test_fixit_insert_newline\"))\n@@ -277,7 +277,7 @@ test_show_locus (function *fun)\n       location_t case_loc = make_location (case_start, case_start, case_finish);\n       rich_location richloc (line_table, case_loc);\n       richloc.add_fixit_insert_before (line_start, \"      break;\\n\");\n-      warning_at_rich_loc (&richloc, 0, \"example of newline insertion hint\");\n+      warning_at (&richloc, 0, \"example of newline insertion hint\");\n     }\n \n   if (0 == strcmp (fnname, \"test_fixit_remove\"))\n@@ -290,7 +290,7 @@ test_show_locus (function *fun)\n       src_range.m_start = start;\n       src_range.m_finish = finish;\n       richloc.add_fixit_remove (src_range);\n-      warning_at_rich_loc (&richloc, 0, \"example of a removal hint\");\n+      warning_at (&richloc, 0, \"example of a removal hint\");\n     }\n \n   if (0 == strcmp (fnname, \"test_fixit_replace\"))\n@@ -303,7 +303,7 @@ test_show_locus (function *fun)\n       src_range.m_start = start;\n       src_range.m_finish = finish;\n       richloc.add_fixit_replace (src_range, \"gtk_widget_show_all\");\n-      warning_at_rich_loc (&richloc, 0, \"example of a replacement hint\");\n+      warning_at (&richloc, 0, \"example of a replacement hint\");\n     }\n \n   if (0 == strcmp (fnname, \"test_mutually_exclusive_suggestions\"))\n@@ -319,14 +319,14 @@ test_show_locus (function *fun)\n \trich_location richloc (line_table, make_location (start, start, finish));\n \trichloc.add_fixit_replace (src_range, \"replacement_1\");\n \trichloc.fixits_cannot_be_auto_applied ();\n-\twarning_at_rich_loc (&richloc, 0, \"warning 1\");\n+\twarning_at (&richloc, 0, \"warning 1\");\n       }\n \n       {\n \trich_location richloc (line_table, make_location (start, start, finish));\n \trichloc.add_fixit_replace (src_range, \"replacement_2\");\n \trichloc.fixits_cannot_be_auto_applied ();\n-\twarning_at_rich_loc (&richloc, 0, \"warning 2\");\n+\twarning_at (&richloc, 0, \"warning 2\");\n       }\n     }  \n \n@@ -346,7 +346,7 @@ test_show_locus (function *fun)\n       richloc.add_range (caret_b, true);\n       global_dc->caret_chars[0] = '1';\n       global_dc->caret_chars[1] = '2';\n-      warning_at_rich_loc (&richloc, 0, \"test\");\n+      warning_at (&richloc, 0, \"test\");\n       global_dc->caret_chars[0] = '^';\n       global_dc->caret_chars[1] = '^';\n     }\n@@ -411,8 +411,8 @@ test_show_locus (function *fun)\n \t statically-allocated buffer in class rich_location,\n \t and then trigger a reallocation of the dynamic buffer.  */\n       gcc_assert (richloc.get_num_locations () > 3 + (2 * 16));\n-      warning_at_rich_loc (&richloc, 0, \"test of %i locations\",\n-\t\t\t   richloc.get_num_locations ());\n+      warning_at (&richloc, 0, \"test of %i locations\",\n+\t\t  richloc.get_num_locations ());\n     }\n }\n "}, {"sha": "39e12bda927f9f7042e66567276f5de259e75488", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5912c9ee9aac3d0b1583924a69f74022a989a/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5912c9ee9aac3d0b1583924a69f74022a989a/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=64a5912c9ee9aac3d0b1583924a69f74022a989a", "patch": "@@ -1,3 +1,19 @@\n+2017-10-31  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* directives.c (_cpp_handle_directive): Update for renaming of\n+\tcpp_error_at_richloc to cpp_error_at.\n+\t* errors.c (cpp_diagnostic_at_richloc): Rename to...\n+\t(cpp_diagnostic_at): ...this, dropping the location_t-based\n+\timplementation.\n+\t(cpp_diagnostic): Update for removal of location_t-based\n+\tcpp_diagnostic_at.\n+\t(cpp_error_at): Likewise.\n+\t(cpp_error_at_richloc): Rename to...\n+\t(cpp_error_at): ...this, and update for renaming of\n+\tcpp_diagnostic_at_richloc.\n+\t* include/cpplib.h (cpp_error_at_richloc): Rename to...\n+\t(cpp_error_at): ...this.\n+\n 2017-10-30  Joseph Myers  <joseph@codesourcery.com>\n \n \t* include/cpplib.h (enum c_lang): Add CLK_GNUC17 and CLK_STDC17."}, {"sha": "e2952216c655e1e03bdf8e6fb9b71f3ff5029727", "filename": "libcpp/directives.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5912c9ee9aac3d0b1583924a69f74022a989a/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5912c9ee9aac3d0b1583924a69f74022a989a/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=64a5912c9ee9aac3d0b1583924a69f74022a989a", "patch": "@@ -527,10 +527,10 @@ _cpp_handle_directive (cpp_reader *pfile, int indented)\n \t      source_range misspelled_token_range\n \t\t= get_range_from_loc (pfile->line_table, dname->src_loc);\n \t      richloc.add_fixit_replace (misspelled_token_range, hint);\n-\t      cpp_error_at_richloc (pfile, CPP_DL_ERROR, &richloc,\n-\t\t\t\t    \"invalid preprocessing directive #%s;\"\n-\t\t\t\t    \" did you mean #%s?\",\n-\t\t\t\t    unrecognized, hint);\n+\t      cpp_error_at (pfile, CPP_DL_ERROR, &richloc,\n+\t\t\t    \"invalid preprocessing directive #%s;\"\n+\t\t\t    \" did you mean #%s?\",\n+\t\t\t    unrecognized, hint);\n \t    }\n \t  else\n \t    cpp_error (pfile, CPP_DL_ERROR,"}, {"sha": "d49c85324d8358fe670d2df6bf87dee71eb39a2a", "filename": "libcpp/errors.c", "status": "modified", "additions": 10, "deletions": 26, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5912c9ee9aac3d0b1583924a69f74022a989a/libcpp%2Ferrors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5912c9ee9aac3d0b1583924a69f74022a989a/libcpp%2Ferrors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ferrors.c?ref=64a5912c9ee9aac3d0b1583924a69f74022a989a", "patch": "@@ -29,35 +29,17 @@ along with this program; see the file COPYING3.  If not see\n \n /* Print a diagnostic at the given location.  */\n \n-ATTRIBUTE_FPTR_PRINTF(5,0)\n-static bool\n-cpp_diagnostic_at_richloc (cpp_reader * pfile, int level, int reason,\n-\t\t\t   rich_location *richloc,\n-\t\t\t   const char *msgid, va_list *ap)\n-{\n-  bool ret;\n-\n-  if (!pfile->cb.error)\n-    abort ();\n-  ret = pfile->cb.error (pfile, level, reason, richloc, _(msgid), ap);\n-\n-  return ret;\n-}\n-\n-/* Print a diagnostic at the given location.  */\n-\n ATTRIBUTE_FPTR_PRINTF(5,0)\n static bool\n cpp_diagnostic_at (cpp_reader * pfile, int level, int reason,\n-\t\t   source_location src_loc,\n+\t\t   rich_location *richloc,\n \t\t   const char *msgid, va_list *ap)\n {\n   bool ret;\n \n   if (!pfile->cb.error)\n     abort ();\n-  rich_location richloc (pfile->line_table, src_loc);\n-  ret = pfile->cb.error (pfile, level, reason, &richloc, _(msgid), ap);\n+  ret = pfile->cb.error (pfile, level, reason, richloc, _(msgid), ap);\n \n   return ret;\n }\n@@ -88,7 +70,8 @@ cpp_diagnostic (cpp_reader * pfile, int level, int reason,\n     {\n       src_loc = pfile->cur_token[-1].src_loc;\n     }\n-  return cpp_diagnostic_at (pfile, level, reason, src_loc, msgid, ap);\n+  rich_location richloc (pfile->line_table, src_loc);\n+  return cpp_diagnostic_at (pfile, level, reason, &richloc, msgid, ap);\n }\n \n /* Print a warning or error, depending on the value of LEVEL.  */\n@@ -265,7 +248,8 @@ cpp_error_at (cpp_reader * pfile, int level, source_location src_loc,\n \n   va_start (ap, msgid);\n \n-  ret = cpp_diagnostic_at (pfile, level, CPP_W_NONE, src_loc,\n+  rich_location richloc (pfile->line_table, src_loc);\n+  ret = cpp_diagnostic_at (pfile, level, CPP_W_NONE, &richloc,\n \t\t\t   msgid, &ap);\n \n   va_end (ap);\n@@ -276,16 +260,16 @@ cpp_error_at (cpp_reader * pfile, int level, source_location src_loc,\n    a column override.  */\n \n bool\n-cpp_error_at_richloc (cpp_reader * pfile, int level, rich_location *richloc,\n-\t\t      const char *msgid, ...)\n+cpp_error_at (cpp_reader * pfile, int level, rich_location *richloc,\n+\t      const char *msgid, ...)\n {\n   va_list ap;\n   bool ret;\n \n   va_start (ap, msgid);\n \n-  ret = cpp_diagnostic_at_richloc (pfile, level, CPP_W_NONE, richloc,\n-\t\t\t\t   msgid, &ap);\n+  ret = cpp_diagnostic_at (pfile, level, CPP_W_NONE, richloc,\n+\t\t\t   msgid, &ap);\n \n   va_end (ap);\n   return ret;"}, {"sha": "5a14858c44fcee55c8abe8e6303afce6daaefe01", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5912c9ee9aac3d0b1583924a69f74022a989a/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5912c9ee9aac3d0b1583924a69f74022a989a/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=64a5912c9ee9aac3d0b1583924a69f74022a989a", "patch": "@@ -1096,9 +1096,9 @@ extern bool cpp_error_at (cpp_reader * pfile, int level,\n \t\t\t  source_location src_loc, const char *msgid, ...)\n   ATTRIBUTE_PRINTF_4;\n \n-extern bool cpp_error_at_richloc (cpp_reader * pfile, int level,\n-\t\t\t\t  rich_location *richloc, const char *msgid,\n-\t\t\t\t  ...)\n+extern bool cpp_error_at (cpp_reader * pfile, int level,\n+\t\t\t  rich_location *richloc, const char *msgid,\n+\t\t\t  ...)\n   ATTRIBUTE_PRINTF_4;\n \n /* In lex.c */"}]}