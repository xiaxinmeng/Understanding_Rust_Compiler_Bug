{"sha": "41dab855dce20d5d7042c9330dd8124d0ece19c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFkYWI4NTVkY2UyMGQ1ZDcwNDJjOTMzMGRkODEyNGQwZWNlMTljMA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2019-06-06T13:59:07Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2019-06-06T13:59:07Z"}, "message": "[AArch64] PR tree-optimization/90332: Implement vec_init<M><N> where N is a vector mode\n\nThis patch fixes the failing gcc.dg/vect/slp-reduc-sad-2.c testcase on aarch64\nby implementing a vec_init optab that can handle two half-width vectors producing a full-width one\nby concatenating them.\n\nIn the gcc.dg/vect/slp-reduc-sad-2.c case it's a V8QI reg concatenated with a V8QI const_vector of zeroes.\nThis can be implemented efficiently using the aarch64_combinez pattern that just loads a D-register to make\nuse of the implicit zero-extending semantics of that load.\nOtherwise it concatenates the two vector using aarch64_simd_combine.\n\nWith this patch I'm seeing the effect from richi's original patch that added gcc.dg/vect/slp-reduc-sad-2.c on aarch64\nand 525.x264_r improves by about 1.5%.\n\n\tPR tree-optimization/90332\n\t* config/aarch64/aarch64.c (aarch64_expand_vector_init):\n\tHandle VALS containing two vectors.\n\t* config/aarch64/aarch64-simd.md (*aarch64_combinez<mode>): Rename\n\tto...\n\t(@aarch64_combinez<mode>): ... This.\n\t(*aarch64_combinez_be<mode>): Rename to...\n\t(@aarch64_combinez_be<mode>): ... This.\n\t(vec_init<mode><Vhalf>): New define_expand.\n\t* config/aarch64/iterators.md (Vhalf): Handle V8HF.\n\nFrom-SVN: r272002", "tree": {"sha": "d2a266d73253c9d053aaf156075ef6bbc2accd30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2a266d73253c9d053aaf156075ef6bbc2accd30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41dab855dce20d5d7042c9330dd8124d0ece19c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41dab855dce20d5d7042c9330dd8124d0ece19c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41dab855dce20d5d7042c9330dd8124d0ece19c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41dab855dce20d5d7042c9330dd8124d0ece19c0/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93"}], "stats": {"total": 66, "additions": 64, "deletions": 2}, "files": [{"sha": "ae15b05c65fcaa786dd752c4dd65b80b6dc471cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41dab855dce20d5d7042c9330dd8124d0ece19c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41dab855dce20d5d7042c9330dd8124d0ece19c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41dab855dce20d5d7042c9330dd8124d0ece19c0", "patch": "@@ -1,3 +1,16 @@\n+2019-06-06  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR tree-optimization/90332\n+\t* config/aarch64/aarch64.c (aarch64_expand_vector_init):\n+\tHandle VALS containing two vectors.\n+\t* config/aarch64/aarch64-simd.md (*aarch64_combinez<mode>): Rename\n+\tto...\n+\t(@aarch64_combinez<mode>): ... This.\n+\t(*aarch64_combinez_be<mode>): Rename to...\n+\t(@aarch64_combinez_be<mode>): ... This.\n+\t(vec_init<mode><Vhalf>): New define_expand.\n+\t* config/aarch64/iterators.md (Vhalf): Handle V8HF.\n+\n 2019-06-06  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* config/msp430/msp430.md (ashlhi3): Use the const_variant of shift"}, {"sha": "df8bf1d97788d6489c72e2740374312442020038", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41dab855dce20d5d7042c9330dd8124d0ece19c0/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41dab855dce20d5d7042c9330dd8124d0ece19c0/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=41dab855dce20d5d7042c9330dd8124d0ece19c0", "patch": "@@ -3216,7 +3216,7 @@\n ;; In this insn, operand 1 should be low, and operand 2 the high part of the\n ;; dest vector.\n \n-(define_insn \"*aarch64_combinez<mode>\"\n+(define_insn \"@aarch64_combinez<mode>\"\n   [(set (match_operand:<VDBL> 0 \"register_operand\" \"=w,w,w\")\n \t(vec_concat:<VDBL>\n \t  (match_operand:VDC 1 \"general_operand\" \"w,?r,m\")\n@@ -3230,7 +3230,7 @@\n    (set_attr \"arch\" \"simd,fp,simd\")]\n )\n \n-(define_insn \"*aarch64_combinez_be<mode>\"\n+(define_insn \"@aarch64_combinez_be<mode>\"\n   [(set (match_operand:<VDBL> 0 \"register_operand\" \"=w,w,w\")\n         (vec_concat:<VDBL>\n \t  (match_operand:VDC 2 \"aarch64_simd_or_scalar_imm_zero\")\n@@ -5959,6 +5959,15 @@\n   DONE;\n })\n \n+(define_expand \"vec_init<mode><Vhalf>\"\n+  [(match_operand:VQ_NO2E 0 \"register_operand\" \"\")\n+   (match_operand 1 \"\" \"\")]\n+  \"TARGET_SIMD\"\n+{\n+  aarch64_expand_vector_init (operands[0], operands[1]);\n+  DONE;\n+})\n+\n (define_insn \"*aarch64_simd_ld1r<mode>\"\n   [(set (match_operand:VALL_F16 0 \"register_operand\" \"=w\")\n \t(vec_duplicate:VALL_F16"}, {"sha": "9a035dd9ed8665274249581f8c404d18ae72e873", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41dab855dce20d5d7042c9330dd8124d0ece19c0/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41dab855dce20d5d7042c9330dd8124d0ece19c0/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=41dab855dce20d5d7042c9330dd8124d0ece19c0", "patch": "@@ -15106,6 +15106,45 @@ aarch64_expand_vector_init (rtx target, rtx vals)\n   rtx v0 = XVECEXP (vals, 0, 0);\n   bool all_same = true;\n \n+  /* This is a special vec_init<M><N> where N is not an element mode but a\n+     vector mode with half the elements of M.  We expect to find two entries\n+     of mode N in VALS and we must put their concatentation into TARGET.  */\n+  if (XVECLEN (vals, 0) == 2 && VECTOR_MODE_P (GET_MODE (XVECEXP (vals, 0, 0))))\n+    {\n+      gcc_assert (known_eq (GET_MODE_SIZE (mode),\n+\t\t  2 * GET_MODE_SIZE (GET_MODE (XVECEXP (vals, 0, 0)))));\n+      rtx lo = XVECEXP (vals, 0, 0);\n+      rtx hi = XVECEXP (vals, 0, 1);\n+      machine_mode narrow_mode = GET_MODE (lo);\n+      gcc_assert (GET_MODE_INNER (narrow_mode) == inner_mode);\n+      gcc_assert (narrow_mode == GET_MODE (hi));\n+\n+      /* When we want to concatenate a half-width vector with zeroes we can\n+\t use the aarch64_combinez[_be] patterns.  Just make sure that the\n+\t zeroes are in the right half.  */\n+      if (BYTES_BIG_ENDIAN\n+\t  && aarch64_simd_imm_zero (lo, narrow_mode)\n+\t  && general_operand (hi, narrow_mode))\n+\temit_insn (gen_aarch64_combinez_be (narrow_mode, target, hi, lo));\n+      else if (!BYTES_BIG_ENDIAN\n+\t       && aarch64_simd_imm_zero (hi, narrow_mode)\n+\t       && general_operand (lo, narrow_mode))\n+\temit_insn (gen_aarch64_combinez (narrow_mode, target, lo, hi));\n+      else\n+\t{\n+\t  /* Else create the two half-width registers and combine them.  */\n+\t  if (!REG_P (lo))\n+\t    lo = force_reg (GET_MODE (lo), lo);\n+\t  if (!REG_P (hi))\n+\t    hi = force_reg (GET_MODE (hi), hi);\n+\n+\t  if (BYTES_BIG_ENDIAN)\n+\t    std::swap (lo, hi);\n+\t  emit_insn (gen_aarch64_simd_combine (narrow_mode, target, lo, hi));\n+\t}\n+     return;\n+   }\n+\n   /* Count the number of variable elements to initialise.  */\n   for (int i = 0; i < n_elts; ++i)\n     {"}, {"sha": "2179e6f21db7669e1ccec88c1272b2fab6f0d1be", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41dab855dce20d5d7042c9330dd8124d0ece19c0/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41dab855dce20d5d7042c9330dd8124d0ece19c0/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=41dab855dce20d5d7042c9330dd8124d0ece19c0", "patch": "@@ -768,6 +768,7 @@\n ;; Half modes of all vector modes, in lower-case.\n (define_mode_attr Vhalf [(V8QI \"v4qi\")  (V16QI \"v8qi\")\n \t\t\t (V4HI \"v2hi\")  (V8HI  \"v4hi\")\n+\t\t\t (V8HF  \"v4hf\")\n \t\t\t (V2SI \"si\")    (V4SI  \"v2si\")\n \t\t\t (V2DI \"di\")    (V2SF  \"sf\")\n \t\t\t (V4SF \"v2sf\")  (V2DF  \"df\")])"}]}