{"sha": "385eb93d42f33bf62a78e57a925a05d4d9715b80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg1ZWI5M2Q0MmYzM2JmNjJhNzhlNTdhOTI1YTA1ZDRkOTcxNWI4MA==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-01-08T14:57:33Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-01-08T14:57:33Z"}, "message": "[AARCH64] Add support for floating-point vcond.\n\ngcc/\n\t* config/aarch64/aarch64-simd.md\n\t(aarch64_simd_bsl<mode>_internal): Add floating-point modes.\n\t(aarch64_simd_bsl): Likewise.\n\t(aarch64_vcond_internal<mode>): Likewise.\n\t(vcond<mode><mode>): Likewise.\n\t(aarch64_cm<cmp><mode>): Fix constraints, add new modes.\n\t* config/aarch64/iterators.md (V_cmp_result): Add V2DF.\n\ngcc/testsuite/\n\t* gcc/testsuite/gcc.target/aarch64/vect-fcm-eq-d.c: New.\n\t* gcc/testsuite/gcc.target/aarch64/vect-fcm-eq-f.c: Likewise.\n\t* gcc/testsuite/gcc.target/aarch64/vect-fcm-ge-d.c: Likewise.\n\t* gcc/testsuite/gcc.target/aarch64/vect-fcm-ge-f.c: Likewise.\n\t* gcc/testsuite/gcc.target/aarch64/vect-fcm-gt-d.c: Likewise.\n\t* gcc/testsuite/gcc.target/aarch64/vect-fcm-gt-f.c: Likewise.\n\t* gcc/testsuite/gcc.target/aarch64/vect-fcm.x: Likewise.\n\t* gcc/testsuite/lib/target-supports.exp\n\t(check_effective_target_vect_cond): Enable for AArch64.\n\nFrom-SVN: r195018", "tree": {"sha": "d449449a11ce24c9039195c95b20d0a43b6872f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d449449a11ce24c9039195c95b20d0a43b6872f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/385eb93d42f33bf62a78e57a925a05d4d9715b80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/385eb93d42f33bf62a78e57a925a05d4d9715b80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/385eb93d42f33bf62a78e57a925a05d4d9715b80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/385eb93d42f33bf62a78e57a925a05d4d9715b80/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4dcd1054bf677f8022fd5c92704e46597018396c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dcd1054bf677f8022fd5c92704e46597018396c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dcd1054bf677f8022fd5c92704e46597018396c"}], "stats": {"total": 268, "additions": 249, "deletions": 19}, "files": [{"sha": "d9bf3c58d7cab09aaf7275bbf458b241308b05e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385eb93d42f33bf62a78e57a925a05d4d9715b80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385eb93d42f33bf62a78e57a925a05d4d9715b80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=385eb93d42f33bf62a78e57a925a05d4d9715b80", "patch": "@@ -1,3 +1,13 @@\n+2013-01-08  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md\n+\t(aarch64_simd_bsl<mode>_internal): Add floating-point modes.\n+\t(aarch64_simd_bsl): Likewise.\n+\t(aarch64_vcond_internal<mode>): Likewise.\n+\t(vcond<mode><mode>): Likewise.\n+\t(aarch64_cm<cmp><mode>): Fix constraints, add new modes.\n+\t* config/aarch64/iterators.md (V_cmp_result): Add V2DF.\n+\n 2013-01-08  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64-builtins.c"}, {"sha": "e6655e8aa0494499a60b5b5d20ca9220bc4713a4", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 85, "deletions": 18, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385eb93d42f33bf62a78e57a925a05d4d9715b80/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385eb93d42f33bf62a78e57a925a05d4d9715b80/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=385eb93d42f33bf62a78e57a925a05d4d9715b80", "patch": "@@ -1463,7 +1463,7 @@\n    (set_attr \"simd_mode\" \"V2SI\")]\n )\n \n-;; vbsl_* intrinsics may compile to any of vbsl/vbif/vbit depending on register\n+;; vbsl_* intrinsics may compile to any of bsl/bif/bit depending on register\n ;; allocation.  For an intrinsic of form:\n ;;   vD = bsl_* (vS, vN, vM)\n ;; We can use any of:\n@@ -1472,11 +1472,12 @@\n ;;   bif vD, vM, vS  (if D = N, so 0-bits in vS choose bits from vM, else vN)\n \n (define_insn \"aarch64_simd_bsl<mode>_internal\"\n-  [(set (match_operand:VDQ 0 \"register_operand\"\t\t     \"=w,w,w\")\n-\t(unspec:VDQ [(match_operand:VDQ 1 \"register_operand\" \" 0,w,w\")\n-\t\t     (match_operand:VDQ 2 \"register_operand\" \" w,w,0\")\n-\t\t     (match_operand:VDQ 3 \"register_operand\" \" w,0,w\")]\n-\t\t    UNSPEC_BSL))]\n+  [(set (match_operand:VALL 0 \"register_operand\"\t\t\"=w,w,w\")\n+\t(unspec:VALL\n+\t [(match_operand:<V_cmp_result> 1 \"register_operand\"\t\" 0,w,w\")\n+\t  (match_operand:VALL 2 \"register_operand\"\t\t\" w,w,0\")\n+\t  (match_operand:VALL 3 \"register_operand\"\t\t\" w,0,w\")]\n+\t UNSPEC_BSL))]\n   \"TARGET_SIMD\"\n   \"@\n   bsl\\\\t%0.<Vbtype>, %2.<Vbtype>, %3.<Vbtype>\n@@ -1485,15 +1486,15 @@\n )\n \n (define_expand \"aarch64_simd_bsl<mode>\"\n-  [(set (match_operand:VDQ 0 \"register_operand\")\n-\t(unspec:VDQ [(match_operand:<V_cmp_result> 1 \"register_operand\")\n-\t\t     (match_operand:VDQ 2 \"register_operand\")\n-\t\t     (match_operand:VDQ 3 \"register_operand\")]\n-\t\t    UNSPEC_BSL))]\n+  [(set (match_operand:VALL 0 \"register_operand\")\n+\t(unspec:VALL [(match_operand:<V_cmp_result> 1 \"register_operand\")\n+\t\t      (match_operand:VALL 2 \"register_operand\")\n+\t\t      (match_operand:VALL 3 \"register_operand\")]\n+\t\t     UNSPEC_BSL))]\n   \"TARGET_SIMD\"\n {\n   /* We can't alias operands together if they have different modes.  */\n-  operands[1] = gen_lowpart (<MODE>mode, operands[1]);\n+  operands[1] = gen_lowpart (<V_cmp_result>mode, operands[1]);\n })\n \n (define_expand \"aarch64_vcond_internal<mode>\"\n@@ -1574,14 +1575,64 @@\n   DONE;\n })\n \n+(define_expand \"aarch64_vcond_internal<mode>\"\n+  [(set (match_operand:VDQF 0 \"register_operand\")\n+\t(if_then_else:VDQF\n+\t  (match_operator 3 \"comparison_operator\"\n+\t    [(match_operand:VDQF 4 \"register_operand\")\n+\t     (match_operand:VDQF 5 \"nonmemory_operand\")])\n+\t  (match_operand:VDQF 1 \"register_operand\")\n+\t  (match_operand:VDQF 2 \"register_operand\")))]\n+  \"TARGET_SIMD\"\n+{\n+  int inverse = 0;\n+  rtx mask = gen_reg_rtx (<V_cmp_result>mode);\n+\n+  if (!REG_P (operands[5])\n+      && (operands[5] != CONST0_RTX (<MODE>mode)))\n+    operands[5] = force_reg (<MODE>mode, operands[5]);\n+\n+  switch (GET_CODE (operands[3]))\n+    {\n+    case LT:\n+      inverse = 1;\n+      /* Fall through.  */\n+    case GE:\n+      emit_insn (gen_aarch64_cmge<mode> (mask, operands[4], operands[5]));\n+      break;\n+    case LE:\n+      inverse = 1;\n+      /* Fall through.  */\n+    case GT:\n+      emit_insn (gen_aarch64_cmgt<mode> (mask, operands[4], operands[5]));\n+      break;\n+    case NE:\n+      inverse = 1;\n+      /* Fall through.  */\n+    case EQ:\n+      emit_insn (gen_aarch64_cmeq<mode> (mask, operands[4], operands[5]));\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  if (inverse)\n+    emit_insn (gen_aarch64_simd_bsl<mode> (operands[0], mask, operands[2],\n+\t\t\t\t    operands[1]));\n+  else\n+    emit_insn (gen_aarch64_simd_bsl<mode> (operands[0], mask, operands[1],\n+\t\t\t\t    operands[2]));\n+  DONE;\n+})\n+\n (define_expand \"vcond<mode><mode>\"\n-  [(set (match_operand:VDQ 0 \"register_operand\")\n-\t(if_then_else:VDQ\n+  [(set (match_operand:VALL 0 \"register_operand\")\n+\t(if_then_else:VALL\n \t  (match_operator 3 \"comparison_operator\"\n-\t    [(match_operand:VDQ 4 \"register_operand\")\n-\t     (match_operand:VDQ 5 \"nonmemory_operand\")])\n-\t  (match_operand:VDQ 1 \"register_operand\")\n-\t  (match_operand:VDQ 2 \"register_operand\")))]\n+\t    [(match_operand:VALL 4 \"register_operand\")\n+\t     (match_operand:VALL 5 \"nonmemory_operand\")])\n+\t  (match_operand:VALL 1 \"register_operand\")\n+\t  (match_operand:VALL 2 \"register_operand\")))]\n   \"TARGET_SIMD\"\n {\n   emit_insn (gen_aarch64_vcond_internal<mode> (operands[0], operands[1],\n@@ -2866,6 +2917,22 @@\n    (set_attr \"simd_mode\" \"<MODE>\")]\n )\n \n+;; fcm(eq|ge|le|lt|gt)\n+\n+(define_insn \"aarch64_cm<cmp><mode>\"\n+  [(set (match_operand:<V_cmp_result> 0 \"register_operand\" \"=w,w\")\n+\t(unspec:<V_cmp_result>\n+\t  [(match_operand:VDQF 1 \"register_operand\" \"w,w\")\n+\t   (match_operand:VDQF 2 \"aarch64_simd_reg_or_zero\" \"w,Dz\")]\n+\t   VCMP_S))]\n+  \"TARGET_SIMD\"\n+  \"@\n+  fcm<cmp>\\t%<v>0<Vmtype>, %<v>1<Vmtype>, %<v>2<Vmtype>\n+  fcm<cmp>\\t%<v>0<Vmtype>, %<v>1<Vmtype>, 0\"\n+  [(set_attr \"simd_type\" \"simd_fcmp\")\n+   (set_attr \"simd_mode\" \"<MODE>\")]\n+)\n+\n ;; addp\n \n (define_insn \"aarch64_addp<mode>\""}, {"sha": "303a4bca1ae7a5a9e626dec2b3397103421b6a01", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385eb93d42f33bf62a78e57a925a05d4d9715b80/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385eb93d42f33bf62a78e57a925a05d4d9715b80/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=385eb93d42f33bf62a78e57a925a05d4d9715b80", "patch": "@@ -1,3 +1,15 @@\n+2013-01-08  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* gcc/testsuite/gcc.target/aarch64/vect-fcm-eq-d.c: New.\n+\t* gcc/testsuite/gcc.target/aarch64/vect-fcm-eq-f.c: Likewise.\n+\t* gcc/testsuite/gcc.target/aarch64/vect-fcm-ge-d.c: Likewise.\n+\t* gcc/testsuite/gcc.target/aarch64/vect-fcm-ge-f.c: Likewise.\n+\t* gcc/testsuite/gcc.target/aarch64/vect-fcm-gt-d.c: Likewise.\n+\t* gcc/testsuite/gcc.target/aarch64/vect-fcm-gt-f.c: Likewise.\n+\t* gcc/testsuite/gcc.target/aarch64/vect-fcm.x: Likewise.\n+\t* gcc/testsuite/lib/target-supports.exp\n+\t(check_effective_target_vect_cond): Enable for AArch64.\n+\n 2013-01-08  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* gcc.target/aarch64/vsqrt.c (test_square_root_v2sf): Use"}, {"sha": "a177d28fedb9f1744f373c6119b18adf0ee9ac11", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm-eq-d.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385eb93d42f33bf62a78e57a925a05d4d9715b80/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-eq-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385eb93d42f33bf62a78e57a925a05d4d9715b80/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-eq-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-eq-d.c?ref=385eb93d42f33bf62a78e57a925a05d4d9715b80", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-all -fno-unroll-loops --save-temps -fno-inline\" } */\n+\n+#define FTYPE double\n+#define OP ==\n+#define INV_OP !=\n+\n+#include \"vect-fcm.x\"\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 3 \"vect\" } } */\n+/* { dg-final { scan-assembler-times \"fcmeq\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fcmeq\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, 0\" 1 } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "01f388075d3e2be14c2286f28e7ad315cdca59dc", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm-eq-f.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385eb93d42f33bf62a78e57a925a05d4d9715b80/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-eq-f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385eb93d42f33bf62a78e57a925a05d4d9715b80/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-eq-f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-eq-f.c?ref=385eb93d42f33bf62a78e57a925a05d4d9715b80", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-all -fno-unroll-loops --save-temps -fno-inline\" } */\n+\n+#define FTYPE float\n+#define OP ==\n+#define INV_OP !=\n+\n+#include \"vect-fcm.x\"\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 3 \"vect\" } } */\n+/* { dg-final { scan-assembler-times \"fcmeq\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fcmeq\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, 0\" 1 } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "6027593a8d45bccbb48fcc2823f1d642f244bb3d", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm-ge-d.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385eb93d42f33bf62a78e57a925a05d4d9715b80/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-ge-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385eb93d42f33bf62a78e57a925a05d4d9715b80/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-ge-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-ge-d.c?ref=385eb93d42f33bf62a78e57a925a05d4d9715b80", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-all -fno-unroll-loops --save-temps -fno-inline\" } */\n+\n+#define FTYPE double\n+#define OP >=\n+#define INV_OP <\n+\n+#include \"vect-fcm.x\"\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 3 \"vect\" } } */\n+/* { dg-final { scan-assembler-times \"fcmge\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fcmge\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, 0\" 1 } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "0337d70359c583069da42411aff141c839ca88d6", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm-ge-f.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385eb93d42f33bf62a78e57a925a05d4d9715b80/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-ge-f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385eb93d42f33bf62a78e57a925a05d4d9715b80/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-ge-f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-ge-f.c?ref=385eb93d42f33bf62a78e57a925a05d4d9715b80", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-all -fno-unroll-loops --save-temps -fno-inline\" } */\n+\n+#define FTYPE float\n+#define OP >=\n+#define INV_OP <\n+\n+#include \"vect-fcm.x\"\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 3 \"vect\" } } */\n+/* { dg-final { scan-assembler-times \"fcmge\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fcmge\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, 0\" 1 } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "b812a39196d24ce2047f8ab5c005368f455bfb62", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm-gt-d.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385eb93d42f33bf62a78e57a925a05d4d9715b80/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-gt-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385eb93d42f33bf62a78e57a925a05d4d9715b80/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-gt-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-gt-d.c?ref=385eb93d42f33bf62a78e57a925a05d4d9715b80", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-all -fno-unroll-loops --save-temps -fno-inline\" } */\n+\n+#define FTYPE double\n+#define OP >\n+#define INV_OP <=\n+\n+#include \"vect-fcm.x\"\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 3 \"vect\" } } */\n+/* { dg-final { scan-assembler-times \"fcmgt\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fcmgt\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, 0\" 1 } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "5e012a4f4c9c6a81b352c310abb4d5c133e946f5", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm-gt-f.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385eb93d42f33bf62a78e57a925a05d4d9715b80/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-gt-f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385eb93d42f33bf62a78e57a925a05d4d9715b80/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-gt-f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-gt-f.c?ref=385eb93d42f33bf62a78e57a925a05d4d9715b80", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-all -fno-unroll-loops --save-temps -fno-inline\" } */\n+\n+#define FTYPE float\n+#define OP >\n+#define INV_OP <=\n+\n+#include \"vect-fcm.x\"\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 3 \"vect\" } } */\n+/* { dg-final { scan-assembler-times \"fcmgt\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fcmgt\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, 0\" 1 } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "7e51bef0ce2430f109c45a193b3f166ed86f43ce", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm.x", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385eb93d42f33bf62a78e57a925a05d4d9715b80/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385eb93d42f33bf62a78e57a925a05d4d9715b80/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm.x?ref=385eb93d42f33bf62a78e57a925a05d4d9715b80", "patch": "@@ -0,0 +1,56 @@\n+#include <stdlib.h>\n+#define N 16\n+\n+FTYPE input1[N] =\n+{2.0, 4.0, 8.0, 16.0,\n+ 2.125, 4.25, 8.5, 17.0,\n+ -2.0, -4.0, -8.0, -16.0,\n+ -2.125, -4.25, -8.5, -17.0};\n+\n+FTYPE input2[N] =\n+{-2.0, 4.0, -8.0, 16.0,\n+ 2.125, -4.25, 8.5, -17.0,\n+ 2.0, -4.0, 8.0, -16.0,\n+ -2.125, 4.25, -8.5, 17.0};\n+\n+void\n+foo (FTYPE *in1, FTYPE *in2, FTYPE *output)\n+{\n+  int i = 0;\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++)\n+    output[i] = (in1[i] OP in2[i]) ? 2.0 : 4.0;\n+}\n+\n+void\n+bar (FTYPE *in1, FTYPE *in2, FTYPE *output)\n+{\n+  int i = 0;\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++)\n+    output[i] = (in1[i] INV_OP in2[i]) ? 4.0 : 2.0;\n+}\n+\n+void\n+foobar (FTYPE *in1, FTYPE *in2, FTYPE *output)\n+{\n+  int i = 0;\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++)\n+    output[i] = (in1[i] OP 0.0) ? 4.0 : 2.0;\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  FTYPE out1[N];\n+  FTYPE out2[N];\n+  int i = 0;\n+  foo (input1, input2, out1);\n+  bar (input1, input2, out2);\n+  for (i = 0; i < N; i++)\n+    if (out1[i] != out2[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "3ee560868ef1009ef93b91274a11b092f316573d", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385eb93d42f33bf62a78e57a925a05d4d9715b80/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385eb93d42f33bf62a78e57a925a05d4d9715b80/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=385eb93d42f33bf62a78e57a925a05d4d9715b80", "patch": "@@ -3699,7 +3699,8 @@ proc check_effective_target_vect_condition { } {\n \tverbose \"check_effective_target_vect_cond: using cached result\" 2\n     } else {\n \tset et_vect_cond_saved 0\n-\tif { [istarget powerpc*-*-*]\n+\tif { [istarget aarch64*-*-*]\n+\t     || [istarget powerpc*-*-*]\n \t     || [istarget ia64-*-*]\n \t     || [istarget i?86-*-*]\n \t     || [istarget spu-*-*]"}]}