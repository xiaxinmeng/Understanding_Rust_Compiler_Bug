{"sha": "f0b7d4cc49ddb1c2c7474cc3f61e260aa93a96c0", "node_id": "C_kwDOANBUbNoAKGYwYjdkNGNjNDlkZGIxYzJjNzQ3NGNjM2Y2MWUyNjBhYTkzYTk2YzA", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-10-14T14:43:58Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-10-14T17:56:37Z"}, "message": "Simplification for right shift.\n\nWhen the first operand of a signed right shift is zero or negative one, the\nRHS doesn't matter and the shift can be converted to a copy.\n\n\tPR tree-optimization/102738\n\tgcc/\n\t* vr-values.c (simplify_using_ranges::simplify): Handle RSHIFT_EXPR.\n\n\tgcc/testsuite\n\t* gcc.dg/pr102738.c: New.", "tree": {"sha": "71c7d4f4e47be4d9c5dd632be114c68d99fc8091", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71c7d4f4e47be4d9c5dd632be114c68d99fc8091"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0b7d4cc49ddb1c2c7474cc3f61e260aa93a96c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0b7d4cc49ddb1c2c7474cc3f61e260aa93a96c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0b7d4cc49ddb1c2c7474cc3f61e260aa93a96c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0b7d4cc49ddb1c2c7474cc3f61e260aa93a96c0/comments", "author": null, "committer": null, "parents": [{"sha": "2c4666fb0686a8f5a55821f1527351dc71c018b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c4666fb0686a8f5a55821f1527351dc71c018b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c4666fb0686a8f5a55821f1527351dc71c018b4"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "776fcecb27a832ff10867b2ffab416ca60283b16", "filename": "gcc/testsuite/gcc.dg/pr102738.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b7d4cc49ddb1c2c7474cc3f61e260aa93a96c0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102738.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b7d4cc49ddb1c2c7474cc3f61e260aa93a96c0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102738.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102738.c?ref=f0b7d4cc49ddb1c2c7474cc3f61e260aa93a96c0", "patch": "@@ -0,0 +1,48 @@\n+/* PR tree-optimization/102738 */\n+/* { dg-options \"-O2 -fdump-tree-evrp\" } */\n+\n+/* Remove arithmetic shift right when the LHS is known to be 0 or -1.  */\n+\n+int a1(__int128 f, int g)\n+{\n+     /* Leaves f >> 127.  */\n+    return (f >> 127) >> g;\n+}\n+\n+int a2(int f, int g)\n+{\n+     /* Leaves f >> 31.  */\n+    return (f >> 31) >> g;\n+}\n+\n+int a3(int f, int g)\n+{\n+    if (f == 0 || f == -1)\n+      return f >> g;\n+    __builtin_unreachable();\n+}\n+\n+int a4(int f, int g)\n+{\n+    if (f == 0 || f == 1)\n+      return (-f) >> g;\n+    __builtin_unreachable();\n+}\n+\n+int a5(int f, int g)\n+{\n+    if (f == 0 || f == 1)\n+      return (f-1) >> g;\n+    return 0;\n+}\n+\n+int a6(int f, int g)\n+{\n+    if (f == 6 || f == 7)\n+      return (f-7) >> g;\n+    __builtin_unreachable();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \" >> 127\" 1 \"evrp\" } } */\n+/* { dg-final { scan-tree-dump-times \" >> 31\" 1 \"evrp\" } } */\n+/* { dg-final { scan-tree-dump-times \" >> \" 2 \"evrp\" } } */"}, {"sha": "d0f7cb41bc851058236980f98b4021a3eb20d4d9", "filename": "gcc/vr-values.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b7d4cc49ddb1c2c7474cc3f61e260aa93a96c0/gcc%2Fvr-values.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b7d4cc49ddb1c2c7474cc3f61e260aa93a96c0/gcc%2Fvr-values.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.c?ref=f0b7d4cc49ddb1c2c7474cc3f61e260aa93a96c0", "patch": "@@ -4281,6 +4281,28 @@ simplify_using_ranges::simplify (gimple_stmt_iterator *gsi)\n \tcase MAX_EXPR:\n \t  return simplify_min_or_max_using_ranges (gsi, stmt);\n \n+\tcase RSHIFT_EXPR:\n+\t  {\n+\t    tree op0 = gimple_assign_rhs1 (stmt);\n+\t    tree type = TREE_TYPE (op0);\n+\t    int_range_max range;\n+\t    if (TYPE_SIGN (type) == SIGNED\n+\t\t&& query->range_of_expr (range, op0, stmt))\n+\t      {\n+\t\tunsigned prec = TYPE_PRECISION (TREE_TYPE (op0));\n+\t\tint_range<2> nzm1 (type, wi::minus_one (prec), wi::zero (prec),\n+\t\t\t\t   VR_ANTI_RANGE);\n+\t\trange.intersect (nzm1);\n+\t\t// If there are no ranges other than [-1, 0] remove the shift.\n+\t\tif (range.undefined_p ())\n+\t\t  {\n+\t\t    gimple_assign_set_rhs_from_tree (gsi, op0);\n+\t\t    return true;\n+\t\t  }\n+\t\treturn false;\n+\t      }\n+\t    break;\n+\t  }\n \tdefault:\n \t  break;\n \t}"}]}