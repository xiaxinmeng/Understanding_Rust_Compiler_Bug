{"sha": "308aab0bb643f5237eb0bfc6c7134a35907a33a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA4YWFiMGJiNjQzZjUyMzdlYjBiZmM2YzcxMzRhMzU5MDdhMzNhOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-20T13:54:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-20T13:54:18Z"}, "message": "[multiple changes]\n\n2014-02-20  Vincent Celier  <celier@adacore.com>\n\n\t* gnatcmd.adb, make.adb, prj-makr.adb, clean.adb: Call\n\tStringt.Initialize in all project aware tools.\n\n2014-02-20  Doug Rupp  <rupp@adacore.com>\n\n\t* gnat_ugn.texi: Document gnatbind -X option.\n\t* vms_data.ads: Minor warnings documentation reformatting.\n\n2014-02-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch3.adb (Expand_Freeze_Array_Type): Only create invariant\n\tprocedure for a base type.\n\n2014-02-20  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch4.adb (Analyze_Case_Expression): Get type from first\n\texpression with type info.\n\t* sem_ch13.adb: Minor reformatting.\n\t* sem_eval.adb (Subtypes_Statically_Match): Make sure we return\n\tFalse if predicates do not match on the two types.\n\n2014-02-20  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma [pragma Attach_Handler]):\n\tIn Relaxed_RM_Semantics mode, allow any static integer value,\n\tfor compatibility with other compilers.\n\nFrom-SVN: r207948", "tree": {"sha": "96a217922d8ccaaed3885b46ea154f3d83bc7b1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96a217922d8ccaaed3885b46ea154f3d83bc7b1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/308aab0bb643f5237eb0bfc6c7134a35907a33a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/308aab0bb643f5237eb0bfc6c7134a35907a33a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/308aab0bb643f5237eb0bfc6c7134a35907a33a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/308aab0bb643f5237eb0bfc6c7134a35907a33a9/comments", "author": null, "committer": null, "parents": [{"sha": "0f361206d509b12123af6693d6fd92e608a6cb12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f361206d509b12123af6693d6fd92e608a6cb12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f361206d509b12123af6693d6fd92e608a6cb12"}], "stats": {"total": 146, "additions": 112, "deletions": 34}, "files": [{"sha": "13a2d013f3070a7c0bcaffc1044683ca35114e2e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/308aab0bb643f5237eb0bfc6c7134a35907a33a9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/308aab0bb643f5237eb0bfc6c7134a35907a33a9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=308aab0bb643f5237eb0bfc6c7134a35907a33a9", "patch": "@@ -1,3 +1,32 @@\n+2014-02-20  Vincent Celier  <celier@adacore.com>\n+\n+\t* gnatcmd.adb, make.adb, prj-makr.adb, clean.adb: Call\n+\tStringt.Initialize in all project aware tools.\n+\n+2014-02-20  Doug Rupp  <rupp@adacore.com>\n+\n+\t* gnat_ugn.texi: Document gnatbind -X option.\n+\t* vms_data.ads: Minor warnings documentation reformatting.\n+\n+2014-02-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_Freeze_Array_Type): Only create invariant\n+\tprocedure for a base type.\n+\n+2014-02-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Case_Expression): Get type from first\n+\texpression with type info.\n+\t* sem_ch13.adb: Minor reformatting.\n+\t* sem_eval.adb (Subtypes_Statically_Match): Make sure we return\n+\tFalse if predicates do not match on the two types.\n+\n+2014-02-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma [pragma Attach_Handler]):\n+\tIn Relaxed_RM_Semantics mode, allow any static integer value,\n+\tfor compatibility with other compilers.\n+\n 2014-02-20  Vincent Celier  <celier@adacore.com>\n \n \t* errutil.adb (Initialize): Properly initialize entry in table"}, {"sha": "49e3a5bdd140da57bdc293475f91c2156186577e", "filename": "gcc/ada/clean.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/308aab0bb643f5237eb0bfc6c7134a35907a33a9/gcc%2Fada%2Fclean.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/308aab0bb643f5237eb0bfc6c7134a35907a33a9/gcc%2Fada%2Fclean.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fclean.adb?ref=308aab0bb643f5237eb0bfc6c7134a35907a33a9", "patch": "@@ -39,6 +39,7 @@ with Prj.Tree; use Prj.Tree;\n with Prj.Util; use Prj.Util;\n with Sdefault;\n with Snames;\n+with Stringt;\n with Switch;   use Switch;\n with Table;\n with Targparm; use Targparm;\n@@ -1559,6 +1560,7 @@ package body Clean is\n \n          Csets.Initialize;\n          Snames.Initialize;\n+         Stringt.Initialize;\n \n          Prj.Tree.Initialize (Root_Environment, Gnatmake_Flags);\n "}, {"sha": "6934363a565e0b287e801b5d7bad21e313981cb4", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/308aab0bb643f5237eb0bfc6c7134a35907a33a9/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/308aab0bb643f5237eb0bfc6c7134a35907a33a9/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=308aab0bb643f5237eb0bfc6c7134a35907a33a9", "patch": "@@ -6076,13 +6076,15 @@ package body Exp_Ch3 is\n       end if;\n \n       if Has_Invariants (Component_Type (Base))\n+        and then Typ = Base\n         and then In_Open_Scopes (Scope (Component_Type (Base)))\n       then\n          --  Generate component invariant checking procedure. This is only\n          --  relevant if the array type is within the scope of the component\n          --  type. Otherwise an array object can only be built using the public\n          --  subprograms for the component type, and calls to those will have\n-         --  invariant checks.\n+         --  invariant checks. The invariant procedure is only generated for\n+         --  a base type, not a subtype.\n \n          Insert_Component_Invariant_Checks\n            (N, Base, Build_Array_Invariant_Proc (Base, N));"}, {"sha": "51efc05ce75d7e6676622882e991dbfa1eeadd98", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/308aab0bb643f5237eb0bfc6c7134a35907a33a9/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/308aab0bb643f5237eb0bfc6c7134a35907a33a9/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=308aab0bb643f5237eb0bfc6c7134a35907a33a9", "patch": "@@ -8484,6 +8484,16 @@ Default mode, in which sources are checked for consistency only if\n they are available.\n @end ifset\n \n+@item ^-X@var{nnn}^/RETURN_CODES=POSIX^\n+@cindex @option{^-X@var{nnn}^/RETURN_CODES=POSIX^} (@code{gnatbind})\n+Set default exit status value, normally 0 for POSIX compliance.\n+\n+@ifset vms\n+@item /RETURN_CODES=VMS\n+@cindex @option{/RETURN_CODES=VMS} (@code{gnatbind})\n+VMS default normal successful return value is 1.\n+@end ifset\n+\n @item ^-y^/ENABLE_LEAP_SECONDS^\n @cindex @option{^-y^/ENABLE_LEAP_SECONDS^} (@code{gnatbind})\n Enable leap seconds support in @code{Ada.Calendar} and its children."}, {"sha": "494fd4d9ceb7b5d21fce1355d9ebdf21c4cd4297", "filename": "gcc/ada/gnatcmd.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/308aab0bb643f5237eb0bfc6c7134a35907a33a9/gcc%2Fada%2Fgnatcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/308aab0bb643f5237eb0bfc6c7134a35907a33a9/gcc%2Fada%2Fgnatcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatcmd.adb?ref=308aab0bb643f5237eb0bfc6c7134a35907a33a9", "patch": "@@ -44,6 +44,7 @@ with Prj.Util; use Prj.Util;\n with Sdefault;\n with Sinput.P;\n with Snames;   use Snames;\n+with Stringt;\n with Table;\n with Targparm;\n with Tempdir;\n@@ -1392,6 +1393,7 @@ begin\n \n    Csets.Initialize;\n    Snames.Initialize;\n+   Stringt.Initialize;\n \n    Prj.Tree.Initialize (Root_Environment, Gnatmake_Flags);\n "}, {"sha": "e8acb4e604a69212dacdea879776ec3bbd74ad67", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/308aab0bb643f5237eb0bfc6c7134a35907a33a9/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/308aab0bb643f5237eb0bfc6c7134a35907a33a9/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=308aab0bb643f5237eb0bfc6c7134a35907a33a9", "patch": "@@ -55,6 +55,7 @@ with Sdefault;\n with SFN_Scan;\n with Sinput.P;\n with Snames;   use Snames;\n+with Stringt;\n \n pragma Warnings (Off);\n with System.HTable;\n@@ -6411,6 +6412,7 @@ package body Make is\n \n       Csets.Initialize;\n       Snames.Initialize;\n+      Stringt.Initialize;\n \n       Prj.Initialize (Project_Tree);\n "}, {"sha": "4f4ab43c08c63aa8d3d4c22ebf6560525a0f8df6", "filename": "gcc/ada/prj-makr.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/308aab0bb643f5237eb0bfc6c7134a35907a33a9/gcc%2Fada%2Fprj-makr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/308aab0bb643f5237eb0bfc6c7134a35907a33a9/gcc%2Fada%2Fprj-makr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-makr.adb?ref=308aab0bb643f5237eb0bfc6c7134a35907a33a9", "patch": "@@ -38,6 +38,7 @@ with Prj.Tree; use Prj.Tree;\n with Prj.Util; use Prj.Util;\n with Sdefault;\n with Snames;   use Snames;\n+with Stringt;\n with Table;    use Table;\n with Tempdir;\n \n@@ -804,6 +805,7 @@ package body Prj.Makr is\n \n       Csets.Initialize;\n       Snames.Initialize;\n+      Stringt.Initialize;\n \n       Prj.Initialize (No_Project_Tree);\n "}, {"sha": "4c85bfaee9a95e72b96b59da8b66d45999bd8a62", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/308aab0bb643f5237eb0bfc6c7134a35907a33a9/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/308aab0bb643f5237eb0bfc6c7134a35907a33a9/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=308aab0bb643f5237eb0bfc6c7134a35907a33a9", "patch": "@@ -86,7 +86,7 @@ package body Sem_Ch13 is\n    --  size value. In this case, we reset the Alignment to unknown.\n \n    procedure Build_Predicate_Functions (Typ : Entity_Id; N : Node_Id);\n-   --  If Typ has predicates (indicated by Has_Predicates being set for Typ,\n+   --  If Typ has predicates (indicated by Has_Predicates being set for Typ),\n    --  then either there are pragma Predicate entries on the rep chain for the\n    --  type (note that Predicate aspects are converted to pragma Predicate), or\n    --  there are inherited aspects from a parent type, or ancestor subtypes."}, {"sha": "12fffbda6127b7b75eae7c3e305e483ef96ebe07", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/308aab0bb643f5237eb0bfc6c7134a35907a33a9/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/308aab0bb643f5237eb0bfc6c7134a35907a33a9/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=308aab0bb643f5237eb0bfc6c7134a35907a33a9", "patch": "@@ -1356,11 +1356,15 @@ package body Sem_Ch4 is\n       --  Local variables\n \n       Expr      : constant Node_Id := Expression (N);\n-      FirstX    : constant Node_Id := Expression (First (Alternatives (N)));\n       Alt       : Node_Id;\n       Exp_Type  : Entity_Id;\n       Exp_Btype : Entity_Id;\n \n+      FirstX : Node_Id := Empty;\n+      --  First expression in the case for which there is some type information\n+      --  available, i.e. it is not Any_Type, which can happen because of some\n+      --  error, or from the use of e.g. raise Constraint_Error.\n+\n       Others_Present : Boolean;\n       --  Indicates if Others was present\n \n@@ -1379,9 +1383,17 @@ package body Sem_Ch4 is\n       Alt := First (Alternatives (N));\n       while Present (Alt) loop\n          Analyze (Expression (Alt));\n+\n+         if No (FirstX) and then Etype (Expression (Alt)) /= Any_Type then\n+            FirstX := Expression (Alt);\n+         end if;\n+\n          Next (Alt);\n       end loop;\n \n+      --  Get our initial type from the first expression for which we got some\n+      --  useful type information from the expression.\n+\n       if not Is_Overloaded (FirstX) then\n          Set_Etype (N, Etype (FirstX));\n "}, {"sha": "7857d80f1d4e9ab9f820b7a3d921a16ccbb62634", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/308aab0bb643f5237eb0bfc6c7134a35907a33a9/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/308aab0bb643f5237eb0bfc6c7134a35907a33a9/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=308aab0bb643f5237eb0bfc6c7134a35907a33a9", "patch": "@@ -4901,6 +4901,11 @@ package body Sem_Eval is\n       then\n          return False;\n \n+      --  No match if predicates do not match\n+\n+      elsif not Predicates_Match then\n+         return False;\n+\n       --  Scalar types\n \n       elsif Is_Scalar_Type (T1) then\n@@ -4955,7 +4960,7 @@ package body Sem_Eval is\n             return True;\n          end if;\n \n-         --  Otherwise both types have bound that can be compared\n+         --  Otherwise both types have bounds that can be compared\n \n          declare\n             LB1 : constant Node_Id := Type_Low_Bound  (T1);\n@@ -4964,11 +4969,10 @@ package body Sem_Eval is\n             HB2 : constant Node_Id := Type_High_Bound (T2);\n \n          begin\n-            --  If the bounds are the same tree node, then match if and only\n-            --  if any predicates present also match.\n+            --  If the bounds are the same tree node, then match (common case)\n \n             if LB1 = LB2 and then HB1 = HB2 then\n-               return Predicates_Match;\n+               return True;\n \n             --  Otherwise bounds must be static and identical value\n "}, {"sha": "eb1dbd11d39f682c94b991520dceb1ecad25f726", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/308aab0bb643f5237eb0bfc6c7134a35907a33a9/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/308aab0bb643f5237eb0bfc6c7134a35907a33a9/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=308aab0bb643f5237eb0bfc6c7134a35907a33a9", "patch": "@@ -11545,19 +11545,32 @@ package body Sem_Prag is\n                --  be expanded in the init proc. If expansion is enabled, then\n                --  perform semantic checks on a copy only.\n \n-               if Expander_Active then\n-                  declare\n-                     Temp : constant Node_Id :=\n-                              New_Copy_Tree (Get_Pragma_Arg (Arg2));\n-                  begin\n-                     Set_Parent (Temp, N);\n-                     Preanalyze_And_Resolve (Temp, RTE (RE_Interrupt_ID));\n-                  end;\n+               declare\n+                  Temp  : Node_Id;\n+                  Typ   : Node_Id;\n+                  Parg2 : constant Node_Id := Get_Pragma_Arg (Arg2);\n \n-               else\n-                  Analyze (Get_Pragma_Arg (Arg2));\n-                  Resolve (Get_Pragma_Arg (Arg2), RTE (RE_Interrupt_ID));\n-               end if;\n+               begin\n+                  --  In Relaxed_RM_Semantics mode, we allow any static\n+                  --  integer value, for compatibility with other compilers.\n+\n+                  if Relaxed_RM_Semantics\n+                    and then Nkind (Parg2) = N_Integer_Literal\n+                  then\n+                     Typ := Standard_Integer;\n+                  else\n+                     Typ := RTE (RE_Interrupt_ID);\n+                  end if;\n+\n+                  if Expander_Active then\n+                     Temp := New_Copy_Tree (Parg2);\n+                     Set_Parent (Temp, N);\n+                     Preanalyze_And_Resolve (Temp, Typ);\n+                  else\n+                     Analyze (Parg2);\n+                     Resolve (Parg2, Typ);\n+                  end if;\n+               end;\n \n                Process_Interrupt_Or_Attach_Handler;\n             end if;"}, {"sha": "e6cacd854909aa934dfa5e79a5521f768e41cadb", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/308aab0bb643f5237eb0bfc6c7134a35907a33a9/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/308aab0bb643f5237eb0bfc6c7134a35907a33a9/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=308aab0bb643f5237eb0bfc6c7134a35907a33a9", "patch": "@@ -3345,7 +3345,7 @@ package VMS_Data is\n    --                             qualifier with a value other than NONE (in\n    --                             other words, this option is effective only\n    --                             if optimization is turned on).\n-\n+   --\n    --   ERRORS                    Warning messages are to be treated as errors.\n    --                             The warning string still appears, but the\n    --                             warning messages are counted as errors, and\n@@ -3389,7 +3389,7 @@ package VMS_Data is\n    --                           access to an atomic variable requires the\n    --                           generation of atomic synchronization code.\n    --\n-   --   AVOID_GAPS              Activate warnings for gaps in records.\n+   --   AVOIDGAPS               Activate warnings for gaps in records.\n    --   (-gnatw.h)              This outputs a warning if a representation\n    --                           clause for a record leaves unallocated bits.\n    --\n@@ -3408,6 +3408,10 @@ package VMS_Data is\n    --   (-gnatwc)               in tests where the expression is known to\n    --                           be True or False at compile time.\n    --\n+   --   CONSTANT_VARIABLES      Activate warnings on constant variables.\n+   --   (-gnatwk)               A warning is output for a variable which could\n+   --                           have been declared as a constant.\n+   --\n    --   DELETED_CODE            Activate warning for conditional deleted code.\n    --   (-gnatwt)               This option generates warnings for tracking of\n    --                           code in conditionals (IF and CASE statements)\n@@ -3416,10 +3420,6 @@ package VMS_Data is\n    --                           front end. This may be useful for detecting\n    --                           deactivated code in certified applications.\n    --\n-   --   CONSTANT_VARIABLES      Activate warnings on constant variables.\n-   --   (-gnatwk)               A warning is output for a variable which could\n-   --                           have been declared as a constant.\n-   --\n    --   ELABORATION             Activate warnings on missing pragma Elaborate\n    --   (-gnatwl)               and Elaborate_All statements.\n    --\n@@ -3433,15 +3433,6 @@ package VMS_Data is\n    --                           an entity with the same name as some other\n    --                           entity that is directly or use-visible.\n    --\n-   --   IMPORT_EXPORT_PRAGMAS   Activate warnings on import-export pragmas.\n-   --   (-gnatwx)               This generates a warning on an Export or Import\n-   --                           pragma when the compiler detects a possible\n-   --                           conflict between the Ada and foreign language\n-   --                           calling sequences. For example, the use of\n-   --                           default parameters in a convention C procedure\n-   --                           is dubious because the C compiler cannot supply\n-   --                           the proper default, so a warning is issued.\n-   --\n    --   IMPLEMENTATION          Activate warnings for a with of an internal\n    --   (-gnatwi)               GNAT implementation unit, defined as any unit\n    --                           from the Ada, Interfaces, GNAT, DEC or System\n@@ -3461,6 +3452,15 @@ package VMS_Data is\n    --                           checks occur only at points where the source\n    --                           program contains an explicit use of .all.\n    --\n+   --   IMPORT_EXPORT_PRAGMAS   Activate warnings on import-export pragmas.\n+   --   (-gnatwx)               This generates a warning on an Export or Import\n+   --                           pragma when the compiler detects a possible\n+   --                           conflict between the Ada and foreign language\n+   --                           calling sequences. For example, the use of\n+   --                           default parameters in a convention C procedure\n+   --                           is dubious because the C compiler cannot supply\n+   --                           the proper default, so a warning is issued.\n+   --\n    --   INEFFECTIVE_INLINE      Activate warnings on ineffective Inlines.\n    --   (-gnatwp)               Activates warnings for failure of front end\n    --                           inlining (activated by /INLINE=FULL) to"}]}