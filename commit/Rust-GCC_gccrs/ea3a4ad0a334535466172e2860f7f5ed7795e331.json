{"sha": "ea3a4ad0a334535466172e2860f7f5ed7795e331", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWEzYTRhZDBhMzM0NTM1NDY2MTcyZTI4NjBmN2Y1ZWQ3Nzk1ZTMzMQ==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2012-03-09T14:48:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-03-09T14:48:24Z"}, "message": "sem_ch6.adb (Check_Body_To_Inline): In AAMP and VM targets use frontend inlining at all optimization levels.\n\n2012-03-09  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch6.adb (Check_Body_To_Inline): In AAMP and VM targets\n\tuse frontend inlining at all optimization levels.\n\t* sem_util.adb (Must_Inline): In AAMP and VM targets, given that\n\tthere is no inlining support in the backend, use also frontend\n\tinlining when compiling with optimizations enabled.\n\t* exp_ch6.adb (Expand_Call): Minor code reorganization.\n\nFrom-SVN: r185140", "tree": {"sha": "f3541728bbceb78cc0bfefa5f0f4aaf895e11126", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3541728bbceb78cc0bfefa5f0f4aaf895e11126"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea3a4ad0a334535466172e2860f7f5ed7795e331", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea3a4ad0a334535466172e2860f7f5ed7795e331", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea3a4ad0a334535466172e2860f7f5ed7795e331", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea3a4ad0a334535466172e2860f7f5ed7795e331/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "30da483da3ce6ea64ac9b4daea5cd41c59bc4446", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30da483da3ce6ea64ac9b4daea5cd41c59bc4446", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30da483da3ce6ea64ac9b4daea5cd41c59bc4446"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "194f6b00ac9f80168271358f94d0f69ca7882504", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea3a4ad0a334535466172e2860f7f5ed7795e331/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea3a4ad0a334535466172e2860f7f5ed7795e331/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ea3a4ad0a334535466172e2860f7f5ed7795e331", "patch": "@@ -1,3 +1,12 @@\n+2012-03-09  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Body_To_Inline): In AAMP and VM targets\n+\tuse frontend inlining at all optimization levels.\n+\t* sem_util.adb (Must_Inline): In AAMP and VM targets, given that\n+\tthere is no inlining support in the backend, use also frontend\n+\tinlining when compiling with optimizations enabled.\n+\t* exp_ch6.adb (Expand_Call): Minor code reorganization.\n+\n 2012-03-09  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/ada-tree.h (TYPE_VAX_FLOATING_POINT_P): Move around.\n@@ -504,7 +513,6 @@\n \tcan happen in an instantiation in programs that run afoul or\n \tAI05-0087.\n \n-\n 2012-02-17  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_ch6.adb (Legal_Copy): If layout is not"}, {"sha": "7b6b296456c184d722065163df9be13cb237f806", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea3a4ad0a334535466172e2860f7f5ed7795e331/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea3a4ad0a334535466172e2860f7f5ed7795e331/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=ea3a4ad0a334535466172e2860f7f5ed7795e331", "patch": "@@ -3790,10 +3790,7 @@ package body Exp_Ch6 is\n                Spec : constant Node_Id := Unit_Declaration_Node (Subp);\n \n             begin\n-               if Optimization_Level > 0 then\n-                  Do_Inline (Subp, Orig_Subp);\n-\n-               elsif Must_Inline (Subp) then\n+               if Must_Inline (Subp) then\n                   if In_Extended_Main_Code_Unit (Call_Node)\n                     and then In_Same_Extended_Unit (Sloc (Spec), Loc)\n                     and then not Has_Completion (Subp)\n@@ -3805,6 +3802,9 @@ package body Exp_Ch6 is\n                   else\n                      Do_Inline_Always (Subp, Orig_Subp);\n                   end if;\n+\n+               elsif Optimization_Level > 0 then\n+                  Do_Inline (Subp, Orig_Subp);\n                end if;\n \n                --  The call may have been inlined or may have been passed to"}, {"sha": "82898b901de70b943f918667cdbff67951d0f72d", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea3a4ad0a334535466172e2860f7f5ed7795e331/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea3a4ad0a334535466172e2860f7f5ed7795e331/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=ea3a4ad0a334535466172e2860f7f5ed7795e331", "patch": "@@ -4888,9 +4888,13 @@ package body Sem_Ch6 is\n          Remove (Body_To_Analyze);\n \n          --  Keep separate checks needed when compiling without optimizations\n+         --  AAMP and VM targets have no support for inlining in the backend\n+         --  and hence we use frontend inlining at all optimization levels.\n \n-         if Optimization_Level = 0 then\n-\n+         if Optimization_Level = 0\n+           or else AAMP_On_Target\n+           or else VM_Target /= No_VM\n+         then\n             --  Cannot inline functions whose body has a call that returns an\n             --  unconstrained type since the secondary stack is involved, and\n             --  it is not worth inlining."}, {"sha": "67fa2e0fd15074646505a378d9684c4fcf842052", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea3a4ad0a334535466172e2860f7f5ed7795e331/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea3a4ad0a334535466172e2860f7f5ed7795e331/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=ea3a4ad0a334535466172e2860f7f5ed7795e331", "patch": "@@ -9422,7 +9422,13 @@ package body Sem_Util is\n \n    function Must_Inline (Subp : Entity_Id) return Boolean is\n    begin\n-      return Optimization_Level = 0\n+      --  AAMP and VM targets have no support for inlining in the backend.\n+      --  Hence we do as much inlining as possible in the front end.\n+\n+      return\n+        (Optimization_Level = 0\n+           or else AAMP_On_Target\n+           or else VM_Target /= No_VM)\n         and then Has_Pragma_Inline (Subp)\n         and then (Has_Pragma_Inline_Always (Subp) or else Front_End_Inlining);\n    end Must_Inline;"}]}