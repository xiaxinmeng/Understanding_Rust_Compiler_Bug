{"sha": "f4d8e0d1aa31d97ded8682a20259bdfe46519392", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRkOGUwZDFhYTMxZDk3ZGVkODY4MmEyMDI1OWJkZmU0NjUxOTM5Mg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2007-08-23T05:03:19Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2007-08-23T05:03:19Z"}, "message": "match.c (intrinsic_operators): Delete.\n\n2007-08-22  Roger Sayle  <roger@eyesopen.com>\n\t    Tobias Schl\u00fcter <tobias.schlueter@physik.uni-muenchen.de>\n\n\t* match.c (intrinsic_operators): Delete.\n\t(gfc_match_intrinsic_op): Rewrite matcher to avoid calling\n\tgfc_match_strings.\n\n\nCo-Authored-By: Tobias Schl\u00fcter <tobias.schlueter@physik.uni-muenchen.de>\n\nFrom-SVN: r127727", "tree": {"sha": "8aeb22c0b5f9de95a85b70f7e22c50d22e395103", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8aeb22c0b5f9de95a85b70f7e22c50d22e395103"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4d8e0d1aa31d97ded8682a20259bdfe46519392", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4d8e0d1aa31d97ded8682a20259bdfe46519392", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4d8e0d1aa31d97ded8682a20259bdfe46519392", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4d8e0d1aa31d97ded8682a20259bdfe46519392/comments", "author": null, "committer": null, "parents": [{"sha": "4bbed40523d201cb8381c2297ff0d048924e20b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bbed40523d201cb8381c2297ff0d048924e20b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bbed40523d201cb8381c2297ff0d048924e20b0"}], "stats": {"total": 261, "additions": 222, "deletions": 39}, "files": [{"sha": "ab8067c77824cb2ab8dff707dee5f90c0cd3e0fa", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4d8e0d1aa31d97ded8682a20259bdfe46519392/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4d8e0d1aa31d97ded8682a20259bdfe46519392/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f4d8e0d1aa31d97ded8682a20259bdfe46519392", "patch": "@@ -1,3 +1,10 @@\n+2007-08-22  Roger Sayle  <roger@eyesopen.com>\n+\t    Tobias Schl\ufffdter <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\t* match.c (intrinsic_operators): Delete.\n+\t(gfc_match_intrinsic_op): Rewrite matcher to avoid calling\n+\tgfc_match_strings.\n+\n 2007-08-22  Christopher D. Rickett  <crickett@lanl.gov>\n \n \tPR fortran/33020"}, {"sha": "5773aa2c7e6feed09ee31dd4db6637ed72a89969", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 215, "deletions": 39, "changes": 254, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4d8e0d1aa31d97ded8682a20259bdfe46519392/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4d8e0d1aa31d97ded8682a20259bdfe46519392/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=f4d8e0d1aa31d97ded8682a20259bdfe46519392", "patch": "@@ -26,39 +26,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"match.h\"\n #include \"parse.h\"\n \n-/* For matching and debugging purposes.  Order matters here!  The\n-   unary operators /must/ precede the binary plus and minus, or\n-   the expression parser breaks.  */\n-\n-static mstring intrinsic_operators[] = {\n-    minit (\"+\", INTRINSIC_UPLUS),\n-    minit (\"-\", INTRINSIC_UMINUS),\n-    minit (\"+\", INTRINSIC_PLUS),\n-    minit (\"-\", INTRINSIC_MINUS),\n-    minit (\"**\", INTRINSIC_POWER),\n-    minit (\"//\", INTRINSIC_CONCAT),\n-    minit (\"*\", INTRINSIC_TIMES),\n-    minit (\"/\", INTRINSIC_DIVIDE),\n-    minit (\".and.\", INTRINSIC_AND),\n-    minit (\".or.\", INTRINSIC_OR),\n-    minit (\".eqv.\", INTRINSIC_EQV),\n-    minit (\".neqv.\", INTRINSIC_NEQV),\n-    minit (\".eq.\", INTRINSIC_EQ_OS),\n-    minit (\"==\", INTRINSIC_EQ),\n-    minit (\".ne.\", INTRINSIC_NE_OS),\n-    minit (\"/=\", INTRINSIC_NE),\n-    minit (\".ge.\", INTRINSIC_GE_OS),\n-    minit (\">=\", INTRINSIC_GE),\n-    minit (\".le.\", INTRINSIC_LE_OS),\n-    minit (\"<=\", INTRINSIC_LE),\n-    minit (\".lt.\", INTRINSIC_LT_OS),\n-    minit (\"<\", INTRINSIC_LT),\n-    minit (\".gt.\", INTRINSIC_GT_OS),\n-    minit (\">\", INTRINSIC_GT),\n-    minit (\".not.\", INTRINSIC_NOT),\n-    minit (\"parens\", INTRINSIC_PARENTHESES),\n-    minit (NULL, INTRINSIC_NONE)\n-};\n \n /* For debugging and diagnostic purposes.  Return the textual representation\n    of the intrinsic operator OP.  */\n@@ -726,15 +693,224 @@ gfc_match_symbol (gfc_symbol **matched_symbol, int host_assoc)\n match\n gfc_match_intrinsic_op (gfc_intrinsic_op *result)\n {\n-  gfc_intrinsic_op op;\n+  locus orig_loc = gfc_current_locus;\n+  int ch;\n \n-  op = (gfc_intrinsic_op) gfc_match_strings (intrinsic_operators);\n+  gfc_gobble_whitespace ();\n+  ch = gfc_next_char ();\n+  switch (ch)\n+    {\n+    case '+':\n+      /* Matched \"+\".  */\n+      *result = INTRINSIC_PLUS;\n+      return MATCH_YES;\n \n-  if (op == INTRINSIC_NONE)\n-    return MATCH_NO;\n+    case '-':\n+      /* Matched \"-\".  */\n+      *result = INTRINSIC_MINUS;\n+      return MATCH_YES;\n \n-  *result = op;\n-  return MATCH_YES;\n+    case '=':\n+      if (gfc_next_char () == '=')\n+\t{\n+\t  /* Matched \"==\".  */\n+\t  *result = INTRINSIC_EQ;\n+\t  return MATCH_YES;\n+\t}\n+      break;\n+\n+    case '<':\n+      if (gfc_peek_char () == '=')\n+\t{\n+\t  /* Matched \"<=\".  */\n+\t  gfc_next_char ();\n+\t  *result = INTRINSIC_LE;\n+\t  return MATCH_YES;\n+\t}\n+      /* Matched \"<\".  */\n+      *result = INTRINSIC_LT;\n+      return MATCH_YES;\n+\n+    case '>':\n+      if (gfc_peek_char () == '=')\n+\t{\n+\t  /* Matched \">=\".  */\n+\t  gfc_next_char ();\n+\t  *result = INTRINSIC_GE;\n+\t  return MATCH_YES;\n+\t}\n+      /* Matched \">\".  */\n+      *result = INTRINSIC_GT;\n+      return MATCH_YES;\n+\n+    case '*':\n+      if (gfc_peek_char () == '*')\n+\t{\n+\t  /* Matched \"**\".  */\n+\t  gfc_next_char ();\n+\t  *result = INTRINSIC_POWER;\n+\t  return MATCH_YES;\n+\t}\n+      /* Matched \"*\".  */\n+      *result = INTRINSIC_TIMES;\n+      return MATCH_YES;\n+\n+    case '/':\n+      ch = gfc_peek_char ();\n+      if (ch == '=')\n+\t{\n+\t  /* Matched \"/=\".  */\n+\t  gfc_next_char ();\n+\t  *result = INTRINSIC_NE;\n+\t  return MATCH_YES;\n+\t}\n+      else if (ch == '/')\n+\t{\n+\t  /* Matched \"//\".  */\n+\t  gfc_next_char ();\n+\t  *result = INTRINSIC_CONCAT;\n+\t  return MATCH_YES;\n+\t}\n+      /* Matched \"/\".  */\n+      *result = INTRINSIC_DIVIDE;\n+      return MATCH_YES;\n+\n+    case '.':\n+      ch = gfc_next_char ();\n+      switch (ch)\n+\t{\n+\tcase 'a':\n+\t  if (gfc_next_char () == 'n'\n+\t      && gfc_next_char () == 'd'\n+\t      && gfc_next_char () == '.')\n+\t    {\n+\t      /* Matched \".and.\".  */\n+\t      *result = INTRINSIC_AND;\n+\t      return MATCH_YES;\n+\t    }\n+\t  break;\n+\n+\tcase 'e':\n+\t  if (gfc_next_char () == 'q')\n+\t    {\n+\t      ch = gfc_next_char ();\n+\t      if (ch == '.')\n+\t\t{\n+\t\t  /* Matched \".eq.\".  */\n+\t\t  *result = INTRINSIC_EQ_OS;\n+\t\t  return MATCH_YES;\n+\t\t}\n+\t      else if (ch == 'v')\n+\t\t{\n+\t\t  if (gfc_next_char () == '.')\n+\t\t    {\n+\t\t      /* Matched \".eqv.\".  */\n+\t\t      *result = INTRINSIC_EQV;\n+\t\t      return MATCH_YES;\n+\t\t    }\n+\t\t}\n+\t    }\n+\t  break;\n+\n+\tcase 'g':\n+\t  ch = gfc_next_char ();\n+\t  if (ch == 'e')\n+\t    {\n+\t      if (gfc_next_char () == '.')\n+\t\t{\n+\t\t  /* Matched \".ge.\".  */\n+\t\t  *result = INTRINSIC_GE_OS;\n+\t\t  return MATCH_YES;\n+\t\t}\n+\t    }\n+\t  else if (ch == 't')\n+\t    {\n+\t      if (gfc_next_char () == '.')\n+\t\t{\n+\t\t  /* Matched \".gt.\".  */\n+\t\t  *result = INTRINSIC_GT_OS;\n+\t\t  return MATCH_YES;\n+\t\t}\n+\t    }\n+\t  break;\n+\n+\tcase 'l':\n+\t  ch = gfc_next_char ();\n+\t  if (ch == 'e')\n+\t    {\n+\t      if (gfc_next_char () == '.')\n+\t\t{\n+\t\t  /* Matched \".le.\".  */\n+\t\t  *result = INTRINSIC_LE_OS;\n+\t\t  return MATCH_YES;\n+\t\t}\n+\t    }\n+\t  else if (ch == 't')\n+\t    {\n+\t      if (gfc_next_char () == '.')\n+\t\t{\n+\t\t  /* Matched \".lt.\".  */\n+\t\t  *result = INTRINSIC_LT_OS;\n+\t\t  return MATCH_YES;\n+\t\t}\n+\t    }\n+\t  break;\n+\n+\tcase 'n':\n+\t  ch = gfc_next_char ();\n+\t  if (ch == 'e')\n+\t    {\n+\t      ch = gfc_next_char ();\n+\t      if (ch == '.')\n+\t\t{\n+\t\t  /* Matched \".ne.\".  */\n+\t\t  *result = INTRINSIC_NE_OS;\n+\t\t  return MATCH_YES;\n+\t\t}\n+\t      else if (ch == 'q')\n+\t\t{\n+\t\t  if (gfc_next_char () == 'v'\n+\t\t      && gfc_next_char () == '.')\n+\t\t    {\n+\t\t      /* Matched \".neqv.\".  */\n+\t\t      *result = INTRINSIC_NEQV;\n+\t\t      return MATCH_YES;\n+\t\t    }\n+\t\t}\n+\t    }\n+\t  else if (ch == 'o')\n+\t    {\n+\t      if (gfc_next_char () == 't'\n+\t\t  && gfc_next_char () == '.')\n+\t\t{\n+\t\t  /* Matched \".not.\".  */\n+\t\t  *result = INTRINSIC_NOT;\n+\t\t  return MATCH_YES;\n+\t\t}\n+\t    }\n+\t  break;\n+\n+\tcase 'o':\n+\t  if (gfc_next_char () == 'r'\n+\t      && gfc_next_char () == '.')\n+\t    {\n+\t      /* Matched \".or.\".  */\n+\t      *result = INTRINSIC_OR;\n+\t      return MATCH_YES;\n+\t    }\n+\t  break;\n+\n+\tdefault:\n+\t  break;\n+\t}\n+      break;\n+\n+    default:\n+      break;\n+    }\n+\n+  gfc_current_locus = orig_loc;\n+  return MATCH_NO;\n }\n \n "}]}