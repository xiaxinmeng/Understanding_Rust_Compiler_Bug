{"sha": "111e0c9f4b0027d393f46fb8a5805fa2ac68283a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTExZTBjOWY0YjAwMjdkMzkzZjQ2ZmI4YTU4MDVmYTJhYzY4MjgzYQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2005-01-22T16:48:23Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-01-22T16:48:23Z"}, "message": "re PR tree-optimization/19038 (tree-ssa causing loops to have more than one BB)\n\n2005-01-20  Daniel Berlin  <dberlin@dberlin.org>\n\n\tFix PR tree-optimization/19038\n\t* tree-ssa-dom.c (cprop_operand): Don't replace loop invaeriant\n\tcopies with loop variant ones.\n\nFrom-SVN: r94069", "tree": {"sha": "0a76779a7881d888f227491e074bdc5063b828ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a76779a7881d888f227491e074bdc5063b828ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/111e0c9f4b0027d393f46fb8a5805fa2ac68283a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/111e0c9f4b0027d393f46fb8a5805fa2ac68283a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/111e0c9f4b0027d393f46fb8a5805fa2ac68283a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/111e0c9f4b0027d393f46fb8a5805fa2ac68283a/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6aa9e91ac15db486a9edfd04bc40d9d7c2c57245", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aa9e91ac15db486a9edfd04bc40d9d7c2c57245", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aa9e91ac15db486a9edfd04bc40d9d7c2c57245"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "1a9d9e6cbb72f850d370ec5325f469654ffd10f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/111e0c9f4b0027d393f46fb8a5805fa2ac68283a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/111e0c9f4b0027d393f46fb8a5805fa2ac68283a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=111e0c9f4b0027d393f46fb8a5805fa2ac68283a", "patch": "@@ -1,3 +1,9 @@\n+2005-01-20  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\tFix PR tree-optimization/19038\n+\t* tree-ssa-dom.c (cprop_operand): Don't replace loop invaeriant\n+\tcopies with loop variant ones.\n+\n 2005-01-22  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* cfganal.c, real.h, reorg.c, timevar.def, tree-ssa-ccp.c,"}, {"sha": "68147989e4943fcfa24c226820a5c6742fd6d5d7", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/111e0c9f4b0027d393f46fb8a5805fa2ac68283a/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/111e0c9f4b0027d393f46fb8a5805fa2ac68283a/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=111e0c9f4b0027d393f46fb8a5805fa2ac68283a", "patch": "@@ -2819,6 +2819,14 @@ cprop_operand (tree stmt, use_operand_p op_p)\n \t extensions.  */\n       else if (!may_propagate_copy (op, val))\n \treturn false;\n+      \n+      /* Do not propagate copies if the propagated value is at a deeper loop\n+\t depth than the propagatee.  Otherwise, this may move loop variant\n+\t variables outside of their loops and prevent coalescing\n+\t opportunities.  If the value was loop invariant, it will be hoisted\n+\t by LICM and exposed for copy propagation.  */\n+      if (loop_depth_of_name (val) > loop_depth_of_name (op))\n+\treturn false;\n \n       /* Dump details.  */\n       if (dump_file && (dump_flags & TDF_DETAILS))"}]}