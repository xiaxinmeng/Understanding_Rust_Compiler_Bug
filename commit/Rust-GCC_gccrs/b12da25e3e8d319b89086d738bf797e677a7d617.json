{"sha": "b12da25e3e8d319b89086d738bf797e677a7d617", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjEyZGEyNWUzZThkMzE5Yjg5MDg2ZDczOGJmNzk3ZTY3N2E3ZDYxNw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@rabi.phys.columbia.edu", "date": "1998-11-25T08:54:10Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-11-25T08:54:10Z"}, "message": "gcc.c: Split out Objective-C specs to...\n\n        * gcc.c: Split out Objective-C specs to...\n        * objc/lang-specs.h: here. (New file.) Make the specs cpplib\n        aware.\n        * c-lex.c (init_parse): Always initialize the filename global.\n        * objc/objc-act.c (lang_init): Always call check_newline at\n        beginning of file.\n\nFrom-SVN: r23850", "tree": {"sha": "80d2563d80fdd9f18e7cc3d3c913e75d8eba1e56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80d2563d80fdd9f18e7cc3d3c913e75d8eba1e56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b12da25e3e8d319b89086d738bf797e677a7d617", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b12da25e3e8d319b89086d738bf797e677a7d617", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b12da25e3e8d319b89086d738bf797e677a7d617", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b12da25e3e8d319b89086d738bf797e677a7d617/comments", "author": null, "committer": null, "parents": [{"sha": "a64f294eeae361dd1be45d145b30f0904ec557e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a64f294eeae361dd1be45d145b30f0904ec557e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a64f294eeae361dd1be45d145b30f0904ec557e5"}], "stats": {"total": 153, "additions": 120, "deletions": 33}, "files": [{"sha": "b5dbe8005a6c4fcfde6722745175439ab36303c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12da25e3e8d319b89086d738bf797e677a7d617/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12da25e3e8d319b89086d738bf797e677a7d617/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b12da25e3e8d319b89086d738bf797e677a7d617", "patch": "@@ -1,3 +1,13 @@\n+1998-11-25 07:51 -0500  Zack Weinberg  <zack@rabi.phys.columbia.edu>\n+\n+\t* gcc.c: Split out Objective-C specs to...\n+\t* objc/lang-specs.h: here. (New file.) Make the specs cpplib\n+\taware.\n+\n+\t* c-lex.c (init_parse): Always initialize the filename global.\n+\t* objc/objc-act.c (lang_init): Always call check_newline at\n+\tbeginning of file.\n+\n Wed Nov 25 00:48:29 1998  Graham  <grahams@rcp.co.uk>\n \n \t* reload1.c (reload): Remove unused variable."}, {"sha": "934f251b354ea9dafdc10edd1025c07d2de2e077", "filename": "gcc/c-lex.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12da25e3e8d319b89086d738bf797e677a7d617/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12da25e3e8d319b89086d738bf797e677a7d617/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=b12da25e3e8d319b89086d738bf797e677a7d617", "patch": "@@ -189,21 +189,22 @@ init_parse (filename)\n #ifdef IO_BUFFER_SIZE\n   setvbuf (finput, (char *) xmalloc (IO_BUFFER_SIZE), _IOFBF, IO_BUFFER_SIZE);\n #endif\n-#endif /* !USE_CPPLIB */\n-\n-  init_lex ();\n-\n-#if USE_CPPLIB\n+#else /* !USE_CPPLIB */\n   parse_in.show_column = 1;\n   if (! cpp_start_read (&parse_in, filename))\n     abort ();\n \n+  if (filename == 0 || !strcmp (filename, \"-\"))\n+    filename = \"stdin\";\n+\n   /* cpp_start_read always puts at least one line directive into the\n      token buffer.  We must arrange to read it out here. */\n   yy_cur = parse_in.token_buffer;\n   yy_lim = CPP_PWRITTEN (&parse_in);\n #endif\n \n+  init_lex ();\n+\n   return filename;\n }\n "}, {"sha": "c0a3a4288f61b1999060b9c89f81be4430005d2a", "filename": "gcc/gcc.c", "status": "modified", "additions": 4, "deletions": 27, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12da25e3e8d319b89086d738bf797e677a7d617/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12da25e3e8d319b89086d738bf797e677a7d617/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=b12da25e3e8d319b89086d738bf797e677a7d617", "patch": "@@ -581,8 +581,10 @@ static struct compiler default_compilers[] =\n      were not present when we built the driver, we will hit these copies\n      and be given a more meaningful error than \"file not used since\n      linking is not done\".  */\n-  {\".cc\", {\"#C++\"}}, {\".cxx\", {\"#C++\"}}, {\".cpp\", {\"#C++\"}}, {\".c++\", {\"#C++\"}},\n-  {\".C\", {\"#C++\"}}, {\".ads\", {\"#Ada\"}}, {\".adb\", {\"#Ada\"}}, {\".ada\", {\"#Ada\"}},\n+  {\".m\", {\"#Objective-C\"}},\n+  {\".cc\", {\"#C++\"}}, {\".cxx\", {\"#C++\"}}, {\".cpp\", {\"#C++\"}},\n+  {\".c++\", {\"#C++\"}}, {\".C\", {\"#C++\"}},\n+  {\".ads\", {\"#Ada\"}}, {\".adb\", {\"#Ada\"}}, {\".ada\", {\"#Ada\"}},\n   {\".f\", {\"#Fortran\"}}, {\".for\", {\"#Fortran\"}}, {\".F\", {\"#Fortran\"}},\n   {\".fpp\", {\"#Fortran\"}},\n   {\".p\", {\"#Pascal\"}}, {\".pas\", {\"#Pascal\"}},\n@@ -664,31 +666,6 @@ static struct compiler default_compilers[] =\n \t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*} %Z\\\n         %i %W{o*}}\\\n     %{!E:%e-E required when input is from standard input}\"}},\n-  {\".m\", {\"@objective-c\"}},\n-  {\"@objective-c\",\n-   {\"cpp -lang-objc %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %I\\\n-\t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n-\t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n-        -undef -D__OBJC__ -D__GNUC__=%v1 -D__GNUC_MINOR__=%v2\\\n-\t %{ansi:-trigraphs -D__STRICT_ANSI__}\\\n-\t%{!undef:%{!ansi:%p} %P} %{trigraphs}\\\n-        %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n-        %{traditional} %{ftraditional:-traditional}\\\n-        %{traditional-cpp:-traditional}\\\n-\t%{fleading-underscore} %{fno-leading-underscore}\\\n-\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*} %Z\\\n-        %i %{!M:%{!MM:%{!E:%{!pipe:%g.i}}}}%{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\",\n-    \"%{!M:%{!MM:%{!E:cc1obj %{!pipe:%g.i} %1 \\\n-\t\t   %{!Q:-quiet} -dumpbase %b.m %{d*} %{m*} %{a*}\\\n-\t\t   %{g*} %{O*} %{W*} %{w} %{pedantic*} %{ansi} \\\n-\t\t   %{traditional} %{v:-version} %{pg:-p} %{p} %{f*} \\\n-    \t\t   -lang-objc %{gen-decls} \\\n-\t\t   %{aux-info*}\\\n-\t\t   %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n-\t\t   %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\\\n-              %{!S:as %a %Y\\\n-\t\t      %{c:%W{o*}%{!o*:-o %w%b%O}}%{!c:-o %d%w%u%O}\\\n-                      %{!pipe:%g.s} %A\\n }}}}\"}},\n   {\".h\", {\"@c-header\"}},\n   {\"@c-header\",\n    {\"%{!E:%eCompilation of header file requested} \\"}, {"sha": "1b33ba1a97ba0ed3c805179ac701ac7c1463a87e", "filename": "gcc/objc/lang-specs.h", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12da25e3e8d319b89086d738bf797e677a7d617/gcc%2Fobjc%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12da25e3e8d319b89086d738bf797e677a7d617/gcc%2Fobjc%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Flang-specs.h?ref=b12da25e3e8d319b89086d738bf797e677a7d617", "patch": "@@ -0,0 +1,92 @@\n+/* Definitions for specs for Objective-C.\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* This is the contribution to the `default_compilers' array in gcc.c for\n+   objc.  */\n+\n+  {\".m\", {\"@objective-c\"}},\n+  {\"@objective-c\",\n+#if USE_CPPLIB\n+   {\"%{E|M|MM:cpp -lang-objc %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %I\\\n+\t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n+\t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n+        -undef -D__OBJC__ -D__GNUC__=%v1 -D__GNUC_MINOR__=%v2\\\n+\t%{ansi:-trigraphs -D__STRICT_ANSI__}\\\n+\t%{!undef:%{!ansi:%p} %P} %{trigraphs}\\\n+        %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n+        %{traditional} %{ftraditional:-traditional}\\\n+        %{traditional-cpp:-traditional}\\\n+\t%{fleading-underscore} %{fno-leading-underscore}\\\n+\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*} %Z\\\n+        %i %{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}}\\n}\",\n+    \"%{!M:%{!MM:%{!E:cc1obj %i %1 \\\n+\t\t   %{nostdinc*} %{A*} %{I*} %{P} %I\\\n+\t\t   -undef -D__OBJC__ -D__GNUC__=%v1 -D__GNUC_MINOR__=%v2\\\n+\t\t   %{!undef:%{!ansi:%p} %P} %{trigraphs}\\\n+\t\t   %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n+\t\t   %{!Q:-quiet} -dumpbase %b.m %{d*} %{m*} %{a*}\\\n+\t\t   %{g*} %{O*} %{W*} %{w} %{pedantic*} %{ansi} \\\n+\t\t   %{traditional} %{v:-version} %{pg:-p} %{p} %{f*} \\\n+    \t\t   -lang-objc %{gen-decls} \\\n+\t\t   %{aux-info*}\\\n+\t\t   %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n+\t\t   %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\\\n+     %{!S:as %a %Y\\\n+\t%{c:%W{o*}%{!o*:-o %w%b%O}}%{!c:-o %d%w%u%O}\\\n+        %{!pipe:%g.s} %A\\n }}}}\"}\n+#else /* ! USE_CPPLIB */\n+   {\"cpp -lang-objc %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %I\\\n+\t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n+\t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n+        -undef -D__OBJC__ -D__GNUC__=%v1 -D__GNUC_MINOR__=%v2\\\n+\t %{ansi:-trigraphs -D__STRICT_ANSI__}\\\n+\t%{!undef:%{!ansi:%p} %P} %{trigraphs}\\\n+        %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n+        %{traditional} %{ftraditional:-traditional}\\\n+        %{traditional-cpp:-traditional}\\\n+\t%{fleading-underscore} %{fno-leading-underscore}\\\n+\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*} %Z\\\n+        %i %{!M:%{!MM:%{!E:%{!pipe:%g.mi}}}}%{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\",\n+    \"%{!M:%{!MM:%{!E:cc1obj %{!pipe:%g.mi} %1 \\\n+\t\t   %{!Q:-quiet} -dumpbase %b.m %{d*} %{m*} %{a*}\\\n+\t\t   %{g*} %{O*} %{W*} %{w} %{pedantic*} %{ansi} \\\n+\t\t   %{traditional} %{v:-version} %{pg:-p} %{p} %{f*} \\\n+    \t\t   -lang-objc %{gen-decls} \\\n+\t\t   %{aux-info*}\\\n+\t\t   %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n+\t\t   %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\\\n+              %{!S:as %a %Y\\\n+\t\t      %{c:%W{o*}%{!o*:-o %w%b%O}}%{!c:-o %d%w%u%O}\\\n+                      %{!pipe:%g.s} %A\\n }}}}\"}\n+#endif /* ! USE_CPPLIB */\n+  },\n+  {\".mi\", {\"@objc-cpp-output\"}},\n+  {\"@objc-cpp-output\",\n+   {\"%{!M:%{!MM:%{!E:cc1obj %{!pipe:%g.i} %1 \\\n+\t\t   %{!Q:-quiet} -dumpbase %b.m %{d*} %{m*} %{a*}\\\n+\t\t   %{g*} %{O*} %{W*} %{w} %{pedantic*} %{ansi} \\\n+\t\t   %{traditional} %{v:-version} %{pg:-p} %{p} %{f*} \\\n+    \t\t   -lang-objc %{gen-decls} \\\n+\t\t   %{aux-info*}\\\n+\t\t   %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n+\t\t   %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\",\n+    \"%{!S:as %a %Y\\\n+\t%{c:%W{o*}%{!o*:-o %w%b%O}}%{!c:-o %d%w%u%O}\\\n+        %{!pipe:%g.s} %A\\n }}}}\"}},"}, {"sha": "332c93bb06221fbffd4448e93de08979b6d8eada", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12da25e3e8d319b89086d738bf797e677a7d617/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12da25e3e8d319b89086d738bf797e677a7d617/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=b12da25e3e8d319b89086d738bf797e677a7d617", "patch": "@@ -592,6 +592,10 @@ generate_struct_by_value_array ()\n   exit (0);\n }\n \n+#if USE_CPPLIB\n+extern char *yy_cur;\n+#endif\n+\n void\n lang_init_options ()\n {\n@@ -605,7 +609,10 @@ lang_init ()\n      With luck, we discover the real source file's name from that\n      and put it in input_filename.  */\n   ungetc (check_newline (), finput);\n-#endif\n+#else\n+  check_newline ();\n+  yy_cur--;\n+#endif \n \n   /* The line number can be -1 if we had -g3 and the input file\n      had a directive specifying line 0.  But we want predefined"}]}