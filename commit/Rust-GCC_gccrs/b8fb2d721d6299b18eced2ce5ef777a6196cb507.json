{"sha": "b8fb2d721d6299b18eced2ce5ef777a6196cb507", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhmYjJkNzIxZDYyOTliMThlY2VkMmNlNWVmNzc3YTYxOTZjYjUwNw==", "commit": {"author": {"name": "Christian Iseli", "email": "Christian.Iseli@lslsun.epfl.ch", "date": "1997-10-17T15:40:52Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-10-17T15:40:52Z"}, "message": "reload.c (debug_reload_to_stream): New function.\n\n        * reload.c (debug_reload_to_stream): New function.  Specify stream\n        into which to write debug info.\n        (debug_reload): Modify to call debug_reload_to_stream with stderr.\nThanks.  Installed.\n\nFrom-SVN: r15953", "tree": {"sha": "3e452db1403ba024693ac38a7a189424f5480669", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e452db1403ba024693ac38a7a189424f5480669"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8fb2d721d6299b18eced2ce5ef777a6196cb507", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8fb2d721d6299b18eced2ce5ef777a6196cb507", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8fb2d721d6299b18eced2ce5ef777a6196cb507", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8fb2d721d6299b18eced2ce5ef777a6196cb507/comments", "author": null, "committer": null, "parents": [{"sha": "b79ee7eb70cf8d352424531e73fdc14398d233ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b79ee7eb70cf8d352424531e73fdc14398d233ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b79ee7eb70cf8d352424531e73fdc14398d233ab"}], "stats": {"total": 63, "additions": 39, "deletions": 24}, "files": [{"sha": "3b2cc6bd3e0020b77ebdb989f41b09bc159a47f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8fb2d721d6299b18eced2ce5ef777a6196cb507/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8fb2d721d6299b18eced2ce5ef777a6196cb507/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8fb2d721d6299b18eced2ce5ef777a6196cb507", "patch": "@@ -1,3 +1,9 @@\n+Fri Oct 17 12:29:48 1997  Christian Iseli  <Christian.Iseli@lslsun.epfl.ch>\n+\n+\t* reload.c (debug_reload_to_stream): New function.  Specify stream\n+ \tinto which to write debug info.\n+\t(debug_reload): Modify to call debug_reload_to_stream with stderr.\n+\n Thu Oct 16 15:07:51 1997  Richard Henderson  <rth@cygnus.com>\n \n \t* combine.c (can_combine_p): Don't combine with an asm whose"}, {"sha": "4b48a6c317128f392ffe175d90c1dc9c7fafd785", "filename": "gcc/reload.c", "status": "modified", "additions": 33, "deletions": 24, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8fb2d721d6299b18eced2ce5ef777a6196cb507/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8fb2d721d6299b18eced2ce5ef777a6196cb507/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=b8fb2d721d6299b18eced2ce5ef777a6196cb507", "patch": "@@ -6108,86 +6108,95 @@ static char *reload_when_needed_name[] =\n \n static char *reg_class_names[] = REG_CLASS_NAMES;\n \n-/* This function is used to print the variables set by 'find_reloads' */\n+/* These functions are used to print the variables set by 'find_reloads' */\n \n void\n-debug_reload ()\n+debug_reload_to_stream (f)\n+     FILE *f;\n {\n   int r;\n   char *prefix;\n \n+  if (! f)\n+    f = stderr;\n   for (r = 0; r < n_reloads; r++)\n     {\n-      fprintf (stderr, \"Reload %d: \", r);\n+      fprintf (f, \"Reload %d: \", r);\n \n       if (reload_in[r] != 0)\n \t{\n-\t  fprintf (stderr, \"reload_in (%s) = \",\n+\t  fprintf (f, \"reload_in (%s) = \",\n \t\t   GET_MODE_NAME (reload_inmode[r]));\n-\t  print_inline_rtx (stderr, reload_in[r], 24);\n-\t  fprintf (stderr, \"\\n\\t\");\n+\t  print_inline_rtx (f, reload_in[r], 24);\n+\t  fprintf (f, \"\\n\\t\");\n \t}\n \n       if (reload_out[r] != 0)\n \t{\n-\t  fprintf (stderr, \"reload_out (%s) = \",\n+\t  fprintf (f, \"reload_out (%s) = \",\n \t\t   GET_MODE_NAME (reload_outmode[r]));\n-\t  print_inline_rtx (stderr, reload_out[r], 24);\n-\t  fprintf (stderr, \"\\n\\t\");\n+\t  print_inline_rtx (f, reload_out[r], 24);\n+\t  fprintf (f, \"\\n\\t\");\n \t}\n \n-      fprintf (stderr, \"%s, \", reg_class_names[(int) reload_reg_class[r]]);\n+      fprintf (f, \"%s, \", reg_class_names[(int) reload_reg_class[r]]);\n \n-      fprintf (stderr, \"%s (opnum = %d)\",\n+      fprintf (f, \"%s (opnum = %d)\",\n \t       reload_when_needed_name[(int) reload_when_needed[r]],\n \t       reload_opnum[r]);\n \n       if (reload_optional[r])\n-\tfprintf (stderr, \", optional\");\n+\tfprintf (f, \", optional\");\n \n       if (reload_inc[r] != 0)\n-\tfprintf (stderr, \", inc by %d\", reload_inc[r]);\n+\tfprintf (f, \", inc by %d\", reload_inc[r]);\n \n       if (reload_nocombine[r])\n-\tfprintf (stderr, \", can't combine\");\n+\tfprintf (f, \", can't combine\");\n \n       if (reload_secondary_p[r])\n-\tfprintf (stderr, \", secondary_reload_p\");\n+\tfprintf (f, \", secondary_reload_p\");\n \n       if (reload_in_reg[r] != 0)\n \t{\n-\t  fprintf (stderr, \"\\n\\treload_in_reg: \");\n-\t  print_inline_rtx (stderr, reload_in_reg[r], 24);\n+\t  fprintf (f, \"\\n\\treload_in_reg: \");\n+\t  print_inline_rtx (f, reload_in_reg[r], 24);\n \t}\n \n       if (reload_reg_rtx[r] != 0)\n \t{\n-\t  fprintf (stderr, \"\\n\\treload_reg_rtx: \");\n-\t  print_inline_rtx (stderr, reload_reg_rtx[r], 24);\n+\t  fprintf (f, \"\\n\\treload_reg_rtx: \");\n+\t  print_inline_rtx (f, reload_reg_rtx[r], 24);\n \t}\n \n       prefix = \"\\n\\t\";\n       if (reload_secondary_in_reload[r] != -1)\n \t{\n-\t  fprintf (stderr, \"%ssecondary_in_reload = %d\",\n+\t  fprintf (f, \"%ssecondary_in_reload = %d\",\n \t\t   prefix, reload_secondary_in_reload[r]);\n \t  prefix = \", \";\n \t}\n \n       if (reload_secondary_out_reload[r] != -1)\n-\tfprintf (stderr, \"%ssecondary_out_reload = %d\\n\",\n+\tfprintf (f, \"%ssecondary_out_reload = %d\\n\",\n \t\t prefix, reload_secondary_out_reload[r]);\n \n       prefix = \"\\n\\t\";\n       if (reload_secondary_in_icode[r] != CODE_FOR_nothing)\n \t{\n-\t  fprintf (stderr, \"%ssecondary_in_icode = %s\", prefix, insn_name[r]);\n+\t  fprintf (f, \"%ssecondary_in_icode = %s\", prefix, insn_name[r]);\n \t  prefix = \", \";\n \t}\n \n       if (reload_secondary_out_icode[r] != CODE_FOR_nothing)\n-\tfprintf (stderr, \"%ssecondary_out_icode = %s\", prefix, insn_name[r]);\n+\tfprintf (f, \"%ssecondary_out_icode = %s\", prefix, insn_name[r]);\n \n-      fprintf (stderr, \"\\n\");\n+      fprintf (f, \"\\n\");\n     }\n }\n+\n+void\n+debug_reload ()\n+{\n+  debug_reload_to_stream (stderr);\n+}"}]}