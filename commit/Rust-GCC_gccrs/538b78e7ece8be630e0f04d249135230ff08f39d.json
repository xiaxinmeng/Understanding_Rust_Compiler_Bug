{"sha": "538b78e7ece8be630e0f04d249135230ff08f39d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM4Yjc4ZTdlY2U4YmU2MzBlMGYwNGQyNDkxMzUyMzBmZjA4ZjM5ZA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-24T22:20:30Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-24T22:20:30Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r584", "tree": {"sha": "7f910136b17e4aeb338517626ad069030c3487ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f910136b17e4aeb338517626ad069030c3487ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/538b78e7ece8be630e0f04d249135230ff08f39d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/538b78e7ece8be630e0f04d249135230ff08f39d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/538b78e7ece8be630e0f04d249135230ff08f39d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/538b78e7ece8be630e0f04d249135230ff08f39d/comments", "author": null, "committer": null, "parents": [{"sha": "9ae57db83081ac648783113f5cf536aff3e55252", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ae57db83081ac648783113f5cf536aff3e55252", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ae57db83081ac648783113f5cf536aff3e55252"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "04f638f3bbe0d0f6c9122fc1de242a82ac74bc05", "filename": "gcc/cse.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538b78e7ece8be630e0f04d249135230ff08f39d/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538b78e7ece8be630e0f04d249135230ff08f39d/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=538b78e7ece8be630e0f04d249135230ff08f39d", "patch": "@@ -605,6 +605,12 @@ rtx_cost (x)\n       /* Used in loop.c and combine.c as a marker.  */\n       total = 0;\n       break;\n+    case ASM_OPERANDS:\n+      /* We don't want these to be used in substitutions because\n+\t we have no way of validating the resulting insn.  So assign\n+\t anything containing an ASM_OPERANDS a very high cost.  */\n+      total = 1000;\n+      break;\n     default:\n       total = 2;\n     }\n@@ -1528,7 +1534,7 @@ rehash_using_reg (x)\n       {\n \tnext = p->next_same_hash;\n \tif (GET_CODE (p->exp) != REG && reg_mentioned_p (x, p->exp)\n-\t    && exp_equiv_p (p->exp, p->exp, 1)\n+\t    && exp_equiv_p (p->exp, p->exp, 1, 0)\n \t    && i != (hash = safe_hash (p->exp, p->mode) % NBUCKETS))\n \t  {\n \t    if (p->next_same_hash)\n@@ -3650,11 +3656,11 @@ simplify_binary_operation (code, mode, op0, op1)\n   switch (code)\n     {\n     case PLUS:\n-      val = arg0 + arg1;\n+      val = arg0s + arg1s;\n       break;\n \n     case MINUS:\n-      val = arg0 - arg1;\n+      val = arg0s - arg1s;\n       break;\n \n     case MULT:\n@@ -5956,7 +5962,8 @@ cse_insn (insn, in_libcall_block)\n \t  /* We might have two BARRIERs separated by notes.  Delete the second\n \t     one if so.  */\n \n-\t  if (p != insn && GET_CODE (NEXT_INSN (p)) == BARRIER)\n+\t  if (p != insn && NEXT_INSN (p) != 0\n+\t      && GET_CODE (NEXT_INSN (p)) == BARRIER)\n \t    delete_insn (NEXT_INSN (p));\n \n \t  cse_jumps_altered = 1;"}]}