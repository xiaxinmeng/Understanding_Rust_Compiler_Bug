{"sha": "492792ed9b7a3b6ce5f595b2dc848eb2dae8116f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDkyNzkyZWQ5YjdhM2I2Y2U1ZjU5NWIyZGM4NDhlYjJkYWU4MTE2Zg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2011-12-15T14:53:55Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-12-15T14:53:55Z"}, "message": "primary.c (gfc_match_varspec): Match array spec for polymorphic coarrays.\n\n2011-12-15  Tobias Burnus  <burnus@net-b.de>\n\n        * primary.c (gfc_match_varspec): Match array spec for\n        polymorphic coarrays.\n        (gfc_match_rvalue): If a symbol of unknown flavor has a\n        codimension, mark it as a variable.\n        * simplify.c (gfc_simplify_image_index): Directly call\n        simplify_cobound.\n        * trans-intrinsic.c (trans_this_image): Fix handling of\n        corank = 1 arrays.\n\n2011-12-15  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.dg/coarray/poly_run_3.f90: New.\n        * gfortran.dg/coarray/poly_run_2.f90: Enable comment-out test.\n\nFrom-SVN: r182371", "tree": {"sha": "64b1cf86d7267525f4882d22ee8dde0a6c359b88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64b1cf86d7267525f4882d22ee8dde0a6c359b88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/492792ed9b7a3b6ce5f595b2dc848eb2dae8116f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/492792ed9b7a3b6ce5f595b2dc848eb2dae8116f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/492792ed9b7a3b6ce5f595b2dc848eb2dae8116f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/492792ed9b7a3b6ce5f595b2dc848eb2dae8116f/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9d69847d6ea68145f1b065d5d4a1cafadebf0d37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d69847d6ea68145f1b065d5d4a1cafadebf0d37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d69847d6ea68145f1b065d5d4a1cafadebf0d37"}], "stats": {"total": 170, "additions": 88, "deletions": 82}, "files": [{"sha": "1f00326faa02e7144943c780defbe32aecfd3f13", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/492792ed9b7a3b6ce5f595b2dc848eb2dae8116f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/492792ed9b7a3b6ce5f595b2dc848eb2dae8116f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=492792ed9b7a3b6ce5f595b2dc848eb2dae8116f", "patch": "@@ -1,3 +1,14 @@\n+2011-12-15  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* primary.c (gfc_match_varspec): Match array spec for\n+\tpolymorphic coarrays.\n+\t(gfc_match_rvalue): If a symbol of unknown flavor has a\n+\tcodimension, mark it as a variable.\n+\t* simplify.c (gfc_simplify_image_index): Directly call\n+\tsimplify_cobound.\n+\t* trans-intrinsic.c (trans_this_image): Fix handling of\n+\tcorank = 1 arrays.\n+\n 2011-12-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/51517"}, {"sha": "afc4684682fd5514523feb9331c735f523514727", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/492792ed9b7a3b6ce5f595b2dc848eb2dae8116f/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/492792ed9b7a3b6ce5f595b2dc848eb2dae8116f/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=492792ed9b7a3b6ce5f595b2dc848eb2dae8116f", "patch": "@@ -1821,7 +1821,8 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,\n \t  && !(gfc_matching_procptr_assignment\n \t       && sym->attr.flavor == FL_PROCEDURE))\n       || (sym->ts.type == BT_CLASS && sym->attr.class_ok\n-\t  && CLASS_DATA (sym)->attr.dimension))\n+\t  && (CLASS_DATA (sym)->attr.dimension\n+\t      || CLASS_DATA (sym)->attr.codimension)))\n     {\n       /* In EQUIVALENCE, we don't know yet whether we are seeing\n \t an array, character variable or array of character\n@@ -2894,10 +2895,10 @@ gfc_match_rvalue (gfc_expr **result)\n \t  && gfc_get_default_type (sym->name, sym->ns)->type == BT_DERIVED)\n \tgfc_set_default_type (sym, 0, sym->ns);\n \n-      /* If the symbol has a dimension attribute, the expression is a\n+      /* If the symbol has a (co)dimension attribute, the expression is a\n \t variable.  */\n \n-      if (sym->attr.dimension)\n+      if (sym->attr.dimension || sym->attr.codimension)\n \t{\n \t  if (gfc_add_flavor (&sym->attr, FL_VARIABLE,\n \t\t\t      sym->name, NULL) == FAILURE)\n@@ -2913,7 +2914,9 @@ gfc_match_rvalue (gfc_expr **result)\n \t  break;\n \t}\n \n-      if (sym->ts.type == BT_CLASS && CLASS_DATA (sym)->attr.dimension)\n+      if (sym->ts.type == BT_CLASS\n+\t  && (CLASS_DATA (sym)->attr.dimension\n+\t      || CLASS_DATA (sym)->attr.codimension))\n \t{\n \t  if (gfc_add_flavor (&sym->attr, FL_VARIABLE,\n \t\t\t      sym->name, NULL) == FAILURE)"}, {"sha": "282d88d8e4aec9474a800204c6292773d3a3139a", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 2, "deletions": 72, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/492792ed9b7a3b6ce5f595b2dc848eb2dae8116f/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/492792ed9b7a3b6ce5f595b2dc848eb2dae8116f/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=492792ed9b7a3b6ce5f595b2dc848eb2dae8116f", "patch": "@@ -6227,10 +6227,6 @@ gfc_simplify_image_index (gfc_expr *coarray, gfc_expr *sub)\n gfc_expr *\n gfc_simplify_this_image (gfc_expr *coarray, gfc_expr *dim)\n {\n-  gfc_ref *ref;\n-  gfc_array_spec *as;\n-  int d;\n-\n   if (gfc_option.coarray != GFC_FCOARRAY_SINGLE)\n     return NULL;\n \n@@ -6244,74 +6240,8 @@ gfc_simplify_this_image (gfc_expr *coarray, gfc_expr *dim)\n       return result;\n     }\n \n-  gcc_assert (coarray->expr_type == EXPR_VARIABLE);\n-\n-  /* Follow any component references.  */\n-  as = coarray->symtree->n.sym->as;\n-  for (ref = coarray->ref; ref; ref = ref->next)\n-    if (ref->type == REF_COMPONENT)\n-      as = ref->u.ar.as;\n-\n-  if (as->type == AS_DEFERRED)\n-    return NULL;\n-\n-  if (dim == NULL)\n-    {\n-      /* Multi-dimensional bounds.  */\n-      gfc_expr *bounds[GFC_MAX_DIMENSIONS];\n-      gfc_expr *e;\n-\n-      /* Simplify the bounds for each dimension.  */\n-      for (d = 0; d < as->corank; d++)\n-\t{\n-\t  bounds[d] = simplify_bound_dim (coarray, NULL, d + as->rank + 1, 0,\n-\t\t\t\t\t  as, NULL, true);\n-\t  if (bounds[d] == NULL || bounds[d] == &gfc_bad_expr)\n-\t    {\n-\t      int j;\n-\n-\t      for (j = 0; j < d; j++)\n-\t\tgfc_free_expr (bounds[j]);\n-\n-\t      return bounds[d];\n-\t    }\n-\t}\n-\n-      /* Allocate the result expression.  */\n-      e = gfc_get_expr ();\n-      e->where = coarray->where;\n-      e->expr_type = EXPR_ARRAY;\n-      e->ts.type = BT_INTEGER;\n-      e->ts.kind = gfc_default_integer_kind;\n-\n-      e->rank = 1;\n-      e->shape = gfc_get_shape (1);\n-      mpz_init_set_ui (e->shape[0], as->corank);\n-\n-      /* Create the constructor for this array.  */\n-      for (d = 0; d < as->corank; d++)\n-        gfc_constructor_append_expr (&e->value.constructor,\n-                                     bounds[d], &e->where);\n-\n-      return e;\n-    }\n-  else\n-    {\n-      /* A DIM argument is specified.  */\n-      if (dim->expr_type != EXPR_CONSTANT)\n-\treturn NULL;\n-\n-      d = mpz_get_si (dim->value.integer);\n-\n-      if (d < 1 || d > as->corank)\n-\t{\n-\t  gfc_error (\"DIM argument at %L is out of bounds\", &dim->where);\n-\t  return &gfc_bad_expr;\n-\t}\n-\n-      return simplify_bound_dim (coarray, NULL, d + as->rank, 0, as, NULL,\n-\t\t\t\t true);\n-   }\n+  /* For -fcoarray=single, this_image(A) is the same as lcobound(A).  */\n+  return simplify_cobound (coarray, dim, NULL, 0);\n }\n \n "}, {"sha": "5c964c1229fe03aece6d91e326f74d3b985bb33d", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/492792ed9b7a3b6ce5f595b2dc848eb2dae8116f/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/492792ed9b7a3b6ce5f595b2dc848eb2dae8116f/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=492792ed9b7a3b6ce5f595b2dc848eb2dae8116f", "patch": "@@ -1054,6 +1054,11 @@ trans_this_image (gfc_se * se, gfc_expr *expr)\n      one always has a dim_arg argument.\n \n      m = this_images() - 1\n+     if (corank == 1)\n+       {\n+\t sub(1) = m + lcobound(corank)\n+\t return;\n+       }\n      i = rank\n      min_var = min (rank + corank - 2, rank + dim_arg - 1)\n      for (;;)\n@@ -1070,15 +1075,29 @@ trans_this_image (gfc_se * se, gfc_expr *expr)\n \t\t\t\t       : m + lcobound(corank)\n   */\n \n+  /* this_image () - 1.  */\n+  tmp = fold_convert (type, gfort_gvar_caf_this_image);\n+  tmp = fold_build2_loc (input_location, MINUS_EXPR, type, tmp,\n+\t\t       build_int_cst (type, 1));\n+  if (corank == 1)\n+    {\n+      /* sub(1) = m + lcobound(corank).  */\n+      lbound = gfc_conv_descriptor_lbound_get (desc,\n+\t\t\tbuild_int_cst (TREE_TYPE (gfc_array_index_type),\n+\t\t\t\t       corank+rank-1));\n+      lbound = fold_convert (type, lbound);\n+      tmp = fold_build2_loc (input_location, PLUS_EXPR, type, tmp, lbound);\n+\n+      se->expr = tmp;\n+      return;\n+    }\n+\n   m = gfc_create_var (type, NULL); \n   ml = gfc_create_var (type, NULL); \n   loop_var = gfc_create_var (integer_type_node, NULL); \n   min_var = gfc_create_var (integer_type_node, NULL); \n \n   /* m = this_image () - 1.  */\n-  tmp = fold_convert (type, gfort_gvar_caf_this_image);\n-  tmp = fold_build2_loc (input_location, MINUS_EXPR, type, tmp,\n-\t\t       build_int_cst (type, 1));\n   gfc_add_modify (&se->pre, m, tmp);\n \n   /* min_var = min (rank + corank-2, rank + dim_arg - 1).  */"}, {"sha": "465097785cdc4b36a35a9eba22b1c4374a56eac4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/492792ed9b7a3b6ce5f595b2dc848eb2dae8116f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/492792ed9b7a3b6ce5f595b2dc848eb2dae8116f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=492792ed9b7a3b6ce5f595b2dc848eb2dae8116f", "patch": "@@ -1,3 +1,8 @@\n+2011-12-15  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/coarray/poly_run_3.f90: New.\n+\t* gfortran.dg/coarray/poly_run_2.f90: Enable comment-out test.\n+\n 2011-12-15  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/51564"}, {"sha": "02704dd7796069c1e03450e0842e726d6d6690cf", "filename": "gcc/testsuite/gfortran.dg/coarray/poly_run_2.f90", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/492792ed9b7a3b6ce5f595b2dc848eb2dae8116f/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fpoly_run_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/492792ed9b7a3b6ce5f595b2dc848eb2dae8116f/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fpoly_run_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fpoly_run_2.f90?ref=492792ed9b7a3b6ce5f595b2dc848eb2dae8116f", "patch": "@@ -10,9 +10,8 @@\n if (any (lcobound(A) /= [1, -5])) call abort ()\n if (num_images() == 1) then\n   if (any (ucobound(A) /= [4, -5])) call abort ()\n-! FIXME: Tree walk issue\n-!else\n-!  if (ucobound(A,dim=1) /= 4) call abort ()\n+else\n+  if (ucobound(A,dim=1) /= 4) call abort ()\n end if\n if (allocated(A)) i = 5\n call s(A)"}, {"sha": "17a010844ebb59114b1f0b8f6af7c987872ed058", "filename": "gcc/testsuite/gfortran.dg/coarray/poly_run_3.f90", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/492792ed9b7a3b6ce5f595b2dc848eb2dae8116f/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fpoly_run_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/492792ed9b7a3b6ce5f595b2dc848eb2dae8116f/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fpoly_run_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fpoly_run_3.f90?ref=492792ed9b7a3b6ce5f595b2dc848eb2dae8116f", "patch": "@@ -0,0 +1,39 @@\n+! { dg-do run }\n+!\n+! Check that the bounds of polymorphic coarrays is\n+! properly handled.\n+!\n+type t\n+end type t\n+class(t), allocatable :: a(:)[:]\n+class(t), allocatable :: b[:], d[:]\n+\n+allocate(a(1)[*])\n+if (this_image() == 1 .and. any (this_image(a) /= lcobound(a))) &\n+  call abort ()\n+if (any (lcobound(a) /= 1)) call abort()\n+if (any (ucobound(a) /= this_image())) call abort ()\n+deallocate(a)\n+\n+allocate(b[*])\n+if (this_image() == 1 .and. any (this_image(b) /= lcobound(b))) &\n+  call abort ()\n+if (any (lcobound(b) /= 1)) call abort()\n+if (any (ucobound(b) /= this_image())) call abort ()\n+deallocate(b)\n+\n+allocate(a(1)[-10:*])\n+if (this_image() == 1 .and. any (this_image(a) /= lcobound(a))) &\n+  call abort ()\n+if (any (lcobound(a) /= -10)) call abort()\n+if (any (ucobound(a) /= -11+this_image())) call abort ()\n+deallocate(a)\n+\n+allocate(d[23:*])\n+if (this_image() == 1 .and. any (this_image(d) /= lcobound(d))) &\n+  call abort ()\n+if (any (lcobound(d) /= 23)) call abort()\n+if (any (ucobound(d) /= 22+this_image())) call abort ()\n+deallocate(d)\n+\n+end"}]}